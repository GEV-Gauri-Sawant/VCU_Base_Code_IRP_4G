   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "pb_encode.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.buf_write,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	buf_write:
  25              	.LFB0:
  26              	 .file 1 "../4g_module/pb_encode.c"
   1:../4g_module/pb_encode.c **** /* pb_encode.c -- encode a protobuf using minimal resources
   2:../4g_module/pb_encode.c ****  *
   3:../4g_module/pb_encode.c ****  * 2011 Petteri Aimonen <jpa@kapsi.fi>
   4:../4g_module/pb_encode.c ****  */
   5:../4g_module/pb_encode.c **** 
   6:../4g_module/pb_encode.c **** #include "pb.h"
   7:../4g_module/pb_encode.c **** #include "pb_encode.h"
   8:../4g_module/pb_encode.c **** #include "pb_common.h"
   9:../4g_module/pb_encode.c **** 
  10:../4g_module/pb_encode.c **** /* Use the GCC warn_unused_result attribute to check that all return values
  11:../4g_module/pb_encode.c ****  * are propagated correctly. On other compilers and gcc before 3.4.0 just
  12:../4g_module/pb_encode.c ****  * ignore the annotation.
  13:../4g_module/pb_encode.c ****  */
  14:../4g_module/pb_encode.c **** #if !defined(__GNUC__) || ( __GNUC__ < 3) || (__GNUC__ == 3 && __GNUC_MINOR__ < 4)
  15:../4g_module/pb_encode.c ****     #define checkreturn
  16:../4g_module/pb_encode.c **** #else
  17:../4g_module/pb_encode.c ****     #define checkreturn __attribute__((warn_unused_result))
  18:../4g_module/pb_encode.c **** #endif
  19:../4g_module/pb_encode.c **** 
  20:../4g_module/pb_encode.c **** /**************************************
  21:../4g_module/pb_encode.c ****  * Declarations internal to this file *
  22:../4g_module/pb_encode.c ****  **************************************/
  23:../4g_module/pb_encode.c **** static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count);
  24:../4g_module/pb_encode.c **** static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field);
  25:../4g_module/pb_encode.c **** static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field);
  26:../4g_module/pb_encode.c **** static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field);
  27:../4g_module/pb_encode.c **** static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field);
  28:../4g_module/pb_encode.c **** static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field);
  29:../4g_module/pb_encode.c **** static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field);
  30:../4g_module/pb_encode.c **** static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *exten
  31:../4g_module/pb_encode.c **** static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high);
  32:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field);
  33:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field);
  34:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field);
  35:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field);
  36:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field);
  37:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field);
  38:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *fiel
  39:../4g_module/pb_encode.c **** 
  40:../4g_module/pb_encode.c **** #ifdef PB_WITHOUT_64BIT
  41:../4g_module/pb_encode.c **** #define pb_int64_t int32_t
  42:../4g_module/pb_encode.c **** #define pb_uint64_t uint32_t
  43:../4g_module/pb_encode.c **** #else
  44:../4g_module/pb_encode.c **** #define pb_int64_t int64_t
  45:../4g_module/pb_encode.c **** #define pb_uint64_t uint64_t
  46:../4g_module/pb_encode.c **** #endif
  47:../4g_module/pb_encode.c **** 
  48:../4g_module/pb_encode.c **** /*******************************
  49:../4g_module/pb_encode.c ****  * pb_ostream_t implementation *
  50:../4g_module/pb_encode.c ****  *******************************/
  51:../4g_module/pb_encode.c **** 
  52:../4g_module/pb_encode.c **** static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
  53:../4g_module/pb_encode.c **** {
  27              	 .loc 1 53 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31 0000 80B5     	 push {r7,lr}
  32              	.LCFI0:
  33              	 .cfi_def_cfa_offset 8
  34              	 .cfi_offset 7,-8
  35              	 .cfi_offset 14,-4
  36 0002 86B0     	 sub sp,sp,#24
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 32
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 F860     	 str r0,[r7,#12]
  43 0008 B960     	 str r1,[r7,#8]
  44 000a 7A60     	 str r2,[r7,#4]
  54:../4g_module/pb_encode.c ****     pb_byte_t *dest = (pb_byte_t*)stream->state;
  45              	 .loc 1 54 0
  46 000c FB68     	 ldr r3,[r7,#12]
  47 000e 5B68     	 ldr r3,[r3,#4]
  48 0010 7B61     	 str r3,[r7,#20]
  55:../4g_module/pb_encode.c ****     stream->state = dest + count;
  49              	 .loc 1 55 0
  50 0012 7A69     	 ldr r2,[r7,#20]
  51 0014 7B68     	 ldr r3,[r7,#4]
  52 0016 1A44     	 add r2,r2,r3
  53 0018 FB68     	 ldr r3,[r7,#12]
  54 001a 5A60     	 str r2,[r3,#4]
  56:../4g_module/pb_encode.c ****     
  57:../4g_module/pb_encode.c ****     memcpy(dest, buf, count * sizeof(pb_byte_t));
  55              	 .loc 1 57 0
  56 001c 7869     	 ldr r0,[r7,#20]
  57 001e B968     	 ldr r1,[r7,#8]
  58 0020 7A68     	 ldr r2,[r7,#4]
  59 0022 FFF7FEFF 	 bl memcpy
  58:../4g_module/pb_encode.c ****     
  59:../4g_module/pb_encode.c ****     return true;
  60              	 .loc 1 59 0
  61 0026 0123     	 movs r3,#1
  60:../4g_module/pb_encode.c **** }
  62              	 .loc 1 60 0
  63 0028 1846     	 mov r0,r3
  64 002a 1837     	 adds r7,r7,#24
  65              	.LCFI3:
  66              	 .cfi_def_cfa_offset 8
  67 002c BD46     	 mov sp,r7
  68              	.LCFI4:
  69              	 .cfi_def_cfa_register 13
  70              	 
  71 002e 80BD     	 pop {r7,pc}
  72              	 .cfi_endproc
  73              	.LFE0:
  75              	 .section .text.pb_ostream_from_buffer,"ax",%progbits
  76              	 .align 2
  77              	 .global pb_ostream_from_buffer
  78              	 .thumb
  79              	 .thumb_func
  81              	pb_ostream_from_buffer:
  82              	.LFB1:
  61:../4g_module/pb_encode.c **** 
  62:../4g_module/pb_encode.c **** pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
  63:../4g_module/pb_encode.c **** {
  83              	 .loc 1 63 0
  84              	 .cfi_startproc
  85              	 
  86              	 
  87              	 
  88 0000 B0B4     	 push {r4,r5,r7}
  89              	.LCFI5:
  90              	 .cfi_def_cfa_offset 12
  91              	 .cfi_offset 4,-12
  92              	 .cfi_offset 5,-8
  93              	 .cfi_offset 7,-4
  94 0002 8BB0     	 sub sp,sp,#44
  95              	.LCFI6:
  96              	 .cfi_def_cfa_offset 56
  97 0004 00AF     	 add r7,sp,#0
  98              	.LCFI7:
  99              	 .cfi_def_cfa_register 7
 100 0006 F860     	 str r0,[r7,#12]
 101 0008 B960     	 str r1,[r7,#8]
 102 000a 7A60     	 str r2,[r7,#4]
  64:../4g_module/pb_encode.c ****     pb_ostream_t stream;
  65:../4g_module/pb_encode.c **** #ifdef PB_BUFFER_ONLY
  66:../4g_module/pb_encode.c ****     /* In PB_BUFFER_ONLY configuration the callback pointer is just int*.
  67:../4g_module/pb_encode.c ****      * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
  68:../4g_module/pb_encode.c ****      */
  69:../4g_module/pb_encode.c ****     static const int marker = 0;
  70:../4g_module/pb_encode.c ****     stream.callback = &marker;
  71:../4g_module/pb_encode.c **** #else
  72:../4g_module/pb_encode.c ****     stream.callback = &buf_write;
 103              	 .loc 1 72 0
 104 000c 0B4B     	 ldr r3,.L5
 105 000e 7B61     	 str r3,[r7,#20]
  73:../4g_module/pb_encode.c **** #endif
  74:../4g_module/pb_encode.c ****     stream.state = buf;
 106              	 .loc 1 74 0
 107 0010 BB68     	 ldr r3,[r7,#8]
 108 0012 BB61     	 str r3,[r7,#24]
  75:../4g_module/pb_encode.c ****     stream.max_size = bufsize;
 109              	 .loc 1 75 0
 110 0014 7B68     	 ldr r3,[r7,#4]
 111 0016 FB61     	 str r3,[r7,#28]
  76:../4g_module/pb_encode.c ****     stream.bytes_written = 0;
 112              	 .loc 1 76 0
 113 0018 0023     	 movs r3,#0
 114 001a 3B62     	 str r3,[r7,#32]
  77:../4g_module/pb_encode.c **** #ifndef PB_NO_ERRMSG
  78:../4g_module/pb_encode.c ****     stream.errmsg = NULL;
 115              	 .loc 1 78 0
 116 001c 0023     	 movs r3,#0
 117 001e 7B62     	 str r3,[r7,#36]
  79:../4g_module/pb_encode.c **** #endif
  80:../4g_module/pb_encode.c ****     return stream;
 118              	 .loc 1 80 0
 119 0020 FB68     	 ldr r3,[r7,#12]
 120 0022 1D46     	 mov r5,r3
 121 0024 07F11404 	 add r4,r7,#20
 122 0028 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 123 002a 0FC5     	 stmia r5!,{r0,r1,r2,r3}
 124 002c 2368     	 ldr r3,[r4]
 125 002e 2B60     	 str r3,[r5]
  81:../4g_module/pb_encode.c **** }
 126              	 .loc 1 81 0
 127 0030 F868     	 ldr r0,[r7,#12]
 128 0032 2C37     	 adds r7,r7,#44
 129              	.LCFI8:
 130              	 .cfi_def_cfa_offset 12
 131 0034 BD46     	 mov sp,r7
 132              	.LCFI9:
 133              	 .cfi_def_cfa_register 13
 134              	 
 135 0036 B0BC     	 pop {r4,r5,r7}
 136              	.LCFI10:
 137              	 .cfi_restore 7
 138              	 .cfi_restore 5
 139              	 .cfi_restore 4
 140              	 .cfi_def_cfa_offset 0
 141 0038 7047     	 bx lr
 142              	.L6:
 143 003a 00BF     	 .align 2
 144              	.L5:
 145 003c 00000000 	 .word buf_write
 146              	 .cfi_endproc
 147              	.LFE1:
 149              	 .section .rodata
 150              	 .align 2
 151              	.LC0:
 152 0000 73747265 	 .ascii "stream full\000"
 152      616D2066 
 152      756C6C00 
 153              	 .align 2
 154              	.LC1:
 155 000c 696F2065 	 .ascii "io error\000"
 155      72726F72 
 155      00
 156              	 .section .text.pb_write,"ax",%progbits
 157              	 .align 2
 158              	 .global pb_write
 159              	 .thumb
 160              	 .thumb_func
 162              	pb_write:
 163              	.LFB2:
  82:../4g_module/pb_encode.c **** 
  83:../4g_module/pb_encode.c **** bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
  84:../4g_module/pb_encode.c **** {
 164              	 .loc 1 84 0
 165              	 .cfi_startproc
 166              	 
 167              	 
 168 0000 80B5     	 push {r7,lr}
 169              	.LCFI11:
 170              	 .cfi_def_cfa_offset 8
 171              	 .cfi_offset 7,-8
 172              	 .cfi_offset 14,-4
 173 0002 84B0     	 sub sp,sp,#16
 174              	.LCFI12:
 175              	 .cfi_def_cfa_offset 24
 176 0004 00AF     	 add r7,sp,#0
 177              	.LCFI13:
 178              	 .cfi_def_cfa_register 7
 179 0006 F860     	 str r0,[r7,#12]
 180 0008 B960     	 str r1,[r7,#8]
 181 000a 7A60     	 str r2,[r7,#4]
  85:../4g_module/pb_encode.c ****     if (count > 0 && stream->callback != NULL)
 182              	 .loc 1 85 0
 183 000c 7B68     	 ldr r3,[r7,#4]
 184 000e 002B     	 cmp r3,#0
 185 0010 37D0     	 beq .L8
 186              	 .loc 1 85 0 is_stmt 0 discriminator 1
 187 0012 FB68     	 ldr r3,[r7,#12]
 188 0014 1B68     	 ldr r3,[r3]
 189 0016 002B     	 cmp r3,#0
 190 0018 33D0     	 beq .L8
  86:../4g_module/pb_encode.c ****     {
  87:../4g_module/pb_encode.c ****         if (stream->bytes_written + count < stream->bytes_written ||
 191              	 .loc 1 87 0 is_stmt 1
 192 001a FB68     	 ldr r3,[r7,#12]
 193 001c DA68     	 ldr r2,[r3,#12]
 194 001e 7B68     	 ldr r3,[r7,#4]
 195 0020 1A44     	 add r2,r2,r3
 196 0022 FB68     	 ldr r3,[r7,#12]
 197 0024 DB68     	 ldr r3,[r3,#12]
 198 0026 9A42     	 cmp r2,r3
 199 0028 07D3     	 bcc .L9
  88:../4g_module/pb_encode.c ****             stream->bytes_written + count > stream->max_size)
 200              	 .loc 1 88 0 discriminator 1
 201 002a FB68     	 ldr r3,[r7,#12]
 202 002c DA68     	 ldr r2,[r3,#12]
 203 002e 7B68     	 ldr r3,[r7,#4]
 204 0030 1A44     	 add r2,r2,r3
 205 0032 FB68     	 ldr r3,[r7,#12]
 206 0034 9B68     	 ldr r3,[r3,#8]
  87:../4g_module/pb_encode.c ****             stream->bytes_written + count > stream->max_size)
 207              	 .loc 1 87 0 discriminator 1
 208 0036 9A42     	 cmp r2,r3
 209 0038 0BD9     	 bls .L10
 210              	.L9:
  89:../4g_module/pb_encode.c ****         {
  90:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "stream full");
 211              	 .loc 1 90 0
 212 003a FB68     	 ldr r3,[r7,#12]
 213 003c 1B69     	 ldr r3,[r3,#16]
 214 003e 002B     	 cmp r3,#0
 215 0040 02D0     	 beq .L11
 216              	 .loc 1 90 0 is_stmt 0 discriminator 1
 217 0042 FB68     	 ldr r3,[r7,#12]
 218 0044 1B69     	 ldr r3,[r3,#16]
 219 0046 00E0     	 b .L12
 220              	.L11:
 221              	 .loc 1 90 0 discriminator 2
 222 0048 134B     	 ldr r3,.L16
 223              	.L12:
 224              	 .loc 1 90 0 discriminator 4
 225 004a FA68     	 ldr r2,[r7,#12]
 226 004c 1361     	 str r3,[r2,#16]
 227 004e 0023     	 movs r3,#0
 228 0050 1EE0     	 b .L13
 229              	.L10:
  91:../4g_module/pb_encode.c ****         }
  92:../4g_module/pb_encode.c **** 
  93:../4g_module/pb_encode.c **** #ifdef PB_BUFFER_ONLY
  94:../4g_module/pb_encode.c ****         if (!buf_write(stream, buf, count))
  95:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
  96:../4g_module/pb_encode.c **** #else        
  97:../4g_module/pb_encode.c ****         if (!stream->callback(stream, buf, count))
 230              	 .loc 1 97 0 is_stmt 1
 231 0052 FB68     	 ldr r3,[r7,#12]
 232 0054 1B68     	 ldr r3,[r3]
 233 0056 F868     	 ldr r0,[r7,#12]
 234 0058 B968     	 ldr r1,[r7,#8]
 235 005a 7A68     	 ldr r2,[r7,#4]
 236 005c 9847     	 blx r3
 237 005e 0346     	 mov r3,r0
 238 0060 83F00103 	 eor r3,r3,#1
 239 0064 DBB2     	 uxtb r3,r3
 240 0066 002B     	 cmp r3,#0
 241 0068 0BD0     	 beq .L8
  98:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "io error");
 242              	 .loc 1 98 0
 243 006a FB68     	 ldr r3,[r7,#12]
 244 006c 1B69     	 ldr r3,[r3,#16]
 245 006e 002B     	 cmp r3,#0
 246 0070 02D0     	 beq .L14
 247              	 .loc 1 98 0 is_stmt 0 discriminator 1
 248 0072 FB68     	 ldr r3,[r7,#12]
 249 0074 1B69     	 ldr r3,[r3,#16]
 250 0076 00E0     	 b .L15
 251              	.L14:
 252              	 .loc 1 98 0 discriminator 2
 253 0078 084B     	 ldr r3,.L16+4
 254              	.L15:
 255              	 .loc 1 98 0 discriminator 4
 256 007a FA68     	 ldr r2,[r7,#12]
 257 007c 1361     	 str r3,[r2,#16]
 258 007e 0023     	 movs r3,#0
 259 0080 06E0     	 b .L13
 260              	.L8:
  99:../4g_module/pb_encode.c **** #endif
 100:../4g_module/pb_encode.c ****     }
 101:../4g_module/pb_encode.c ****     
 102:../4g_module/pb_encode.c ****     stream->bytes_written += count;
 261              	 .loc 1 102 0 is_stmt 1
 262 0082 FB68     	 ldr r3,[r7,#12]
 263 0084 DA68     	 ldr r2,[r3,#12]
 264 0086 7B68     	 ldr r3,[r7,#4]
 265 0088 1A44     	 add r2,r2,r3
 266 008a FB68     	 ldr r3,[r7,#12]
 267 008c DA60     	 str r2,[r3,#12]
 103:../4g_module/pb_encode.c ****     return true;
 268              	 .loc 1 103 0
 269 008e 0123     	 movs r3,#1
 270              	.L13:
 104:../4g_module/pb_encode.c **** }
 271              	 .loc 1 104 0
 272 0090 1846     	 mov r0,r3
 273 0092 1037     	 adds r7,r7,#16
 274              	.LCFI14:
 275              	 .cfi_def_cfa_offset 8
 276 0094 BD46     	 mov sp,r7
 277              	.LCFI15:
 278              	 .cfi_def_cfa_register 13
 279              	 
 280 0096 80BD     	 pop {r7,pc}
 281              	.L17:
 282              	 .align 2
 283              	.L16:
 284 0098 00000000 	 .word .LC0
 285 009c 0C000000 	 .word .LC1
 286              	 .cfi_endproc
 287              	.LFE2:
 289              	 .section .text.safe_read_bool,"ax",%progbits
 290              	 .align 2
 291              	 .thumb
 292              	 .thumb_func
 294              	safe_read_bool:
 295              	.LFB3:
 105:../4g_module/pb_encode.c **** 
 106:../4g_module/pb_encode.c **** /*************************
 107:../4g_module/pb_encode.c ****  * Encode a single field *
 108:../4g_module/pb_encode.c ****  *************************/
 109:../4g_module/pb_encode.c **** 
 110:../4g_module/pb_encode.c **** /* Read a bool value without causing undefined behavior even if the value
 111:../4g_module/pb_encode.c ****  * is invalid. See issue #434 and
 112:../4g_module/pb_encode.c ****  * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 113:../4g_module/pb_encode.c ****  */
 114:../4g_module/pb_encode.c **** static bool safe_read_bool(const void *pSize)
 115:../4g_module/pb_encode.c **** {
 296              	 .loc 1 115 0
 297              	 .cfi_startproc
 298              	 
 299              	 
 300              	 
 301 0000 80B4     	 push {r7}
 302              	.LCFI16:
 303              	 .cfi_def_cfa_offset 4
 304              	 .cfi_offset 7,-4
 305 0002 85B0     	 sub sp,sp,#20
 306              	.LCFI17:
 307              	 .cfi_def_cfa_offset 24
 308 0004 00AF     	 add r7,sp,#0
 309              	.LCFI18:
 310              	 .cfi_def_cfa_register 7
 311 0006 7860     	 str r0,[r7,#4]
 116:../4g_module/pb_encode.c ****     const char *p = (const char *)pSize;
 312              	 .loc 1 116 0
 313 0008 7B68     	 ldr r3,[r7,#4]
 314 000a BB60     	 str r3,[r7,#8]
 117:../4g_module/pb_encode.c ****     size_t i;
 118:../4g_module/pb_encode.c ****     for (i = 0; i < sizeof(bool); i++)
 315              	 .loc 1 118 0
 316 000c 0023     	 movs r3,#0
 317 000e FB60     	 str r3,[r7,#12]
 318 0010 0AE0     	 b .L19
 319              	.L22:
 119:../4g_module/pb_encode.c ****     {
 120:../4g_module/pb_encode.c ****         if (p[i] != 0)
 320              	 .loc 1 120 0
 321 0012 BA68     	 ldr r2,[r7,#8]
 322 0014 FB68     	 ldr r3,[r7,#12]
 323 0016 1344     	 add r3,r3,r2
 324 0018 1B78     	 ldrb r3,[r3]
 325 001a 002B     	 cmp r3,#0
 326 001c 01D0     	 beq .L20
 121:../4g_module/pb_encode.c ****             return true;
 327              	 .loc 1 121 0
 328 001e 0123     	 movs r3,#1
 329 0020 06E0     	 b .L21
 330              	.L20:
 118:../4g_module/pb_encode.c ****     {
 331              	 .loc 1 118 0 discriminator 2
 332 0022 FB68     	 ldr r3,[r7,#12]
 333 0024 0133     	 adds r3,r3,#1
 334 0026 FB60     	 str r3,[r7,#12]
 335              	.L19:
 118:../4g_module/pb_encode.c ****     {
 336              	 .loc 1 118 0 is_stmt 0 discriminator 1
 337 0028 FB68     	 ldr r3,[r7,#12]
 338 002a 002B     	 cmp r3,#0
 339 002c F1D0     	 beq .L22
 122:../4g_module/pb_encode.c ****     }
 123:../4g_module/pb_encode.c ****     return false;
 340              	 .loc 1 123 0 is_stmt 1
 341 002e 0023     	 movs r3,#0
 342              	.L21:
 124:../4g_module/pb_encode.c **** }
 343              	 .loc 1 124 0
 344 0030 1846     	 mov r0,r3
 345 0032 1437     	 adds r7,r7,#20
 346              	.LCFI19:
 347              	 .cfi_def_cfa_offset 4
 348 0034 BD46     	 mov sp,r7
 349              	.LCFI20:
 350              	 .cfi_def_cfa_register 13
 351              	 
 352 0036 5DF8047B 	 ldr r7,[sp],#4
 353              	.LCFI21:
 354              	 .cfi_restore 7
 355              	 .cfi_def_cfa_offset 0
 356 003a 7047     	 bx lr
 357              	 .cfi_endproc
 358              	.LFE3:
 360              	 .section .rodata
 361 0015 000000   	 .align 2
 362              	.LC2:
 363 0018 61727261 	 .ascii "array max size exceeded\000"
 363      79206D61 
 363      78207369 
 363      7A652065 
 363      78636565 
 364              	 .align 2
 365              	.LC3:
 366 0030 286E6F6E 	 .ascii "(none)\000"
 366      652900
 367              	 .section .text.encode_array,"ax",%progbits
 368              	 .align 2
 369              	 .thumb
 370              	 .thumb_func
 372              	encode_array:
 373              	.LFB4:
 125:../4g_module/pb_encode.c **** 
 126:../4g_module/pb_encode.c **** /* Encode a static array. Handles the size calculations and possible packing. */
 127:../4g_module/pb_encode.c **** static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
 128:../4g_module/pb_encode.c **** {
 374              	 .loc 1 128 0
 375              	 .cfi_startproc
 376              	 
 377              	 
 378 0000 80B5     	 push {r7,lr}
 379              	.LCFI22:
 380              	 .cfi_def_cfa_offset 8
 381              	 .cfi_offset 7,-8
 382              	 .cfi_offset 14,-4
 383 0002 8CB0     	 sub sp,sp,#48
 384              	.LCFI23:
 385              	 .cfi_def_cfa_offset 56
 386 0004 00AF     	 add r7,sp,#0
 387              	.LCFI24:
 388              	 .cfi_def_cfa_register 7
 389 0006 7860     	 str r0,[r7,#4]
 390 0008 3960     	 str r1,[r7]
 129:../4g_module/pb_encode.c ****     pb_size_t i;
 130:../4g_module/pb_encode.c ****     pb_size_t count;
 131:../4g_module/pb_encode.c **** #ifndef PB_ENCODE_ARRAYS_UNPACKED
 132:../4g_module/pb_encode.c ****     size_t size;
 133:../4g_module/pb_encode.c **** #endif
 134:../4g_module/pb_encode.c **** 
 135:../4g_module/pb_encode.c ****     count = *(pb_size_t*)field->pSize;
 391              	 .loc 1 135 0
 392 000a 3B68     	 ldr r3,[r7]
 393 000c 1B6A     	 ldr r3,[r3,#32]
 394 000e 1B88     	 ldrh r3,[r3]
 395 0010 BB84     	 strh r3,[r7,#36]
 136:../4g_module/pb_encode.c **** 
 137:../4g_module/pb_encode.c ****     if (count == 0)
 396              	 .loc 1 137 0
 397 0012 BB8C     	 ldrh r3,[r7,#36]
 398 0014 002B     	 cmp r3,#0
 399 0016 01D1     	 bne .L24
 138:../4g_module/pb_encode.c ****         return true;
 400              	 .loc 1 138 0
 401 0018 0123     	 movs r3,#1
 402 001a 3EE1     	 b .L25
 403              	.L24:
 139:../4g_module/pb_encode.c **** 
 140:../4g_module/pb_encode.c ****     if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 404              	 .loc 1 140 0
 405 001c 3B68     	 ldr r3,[r7]
 406 001e 9B7D     	 ldrb r3,[r3,#22]
 407 0020 03F0C003 	 and r3,r3,#192
 408 0024 802B     	 cmp r3,#128
 409 0026 10D0     	 beq .L26
 410              	 .loc 1 140 0 is_stmt 0 discriminator 1
 411 0028 3B68     	 ldr r3,[r7]
 412 002a 9B8A     	 ldrh r3,[r3,#20]
 413 002c BA8C     	 ldrh r2,[r7,#36]
 414 002e 9A42     	 cmp r2,r3
 415 0030 0BD9     	 bls .L26
 141:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "array max size exceeded");
 416              	 .loc 1 141 0 is_stmt 1
 417 0032 7B68     	 ldr r3,[r7,#4]
 418 0034 1B69     	 ldr r3,[r3,#16]
 419 0036 002B     	 cmp r3,#0
 420 0038 02D0     	 beq .L27
 421              	 .loc 1 141 0 is_stmt 0 discriminator 1
 422 003a 7B68     	 ldr r3,[r7,#4]
 423 003c 1B69     	 ldr r3,[r3,#16]
 424 003e 00E0     	 b .L28
 425              	.L27:
 426              	 .loc 1 141 0 discriminator 2
 427 0040 984B     	 ldr r3,.L60
 428              	.L28:
 429              	 .loc 1 141 0 discriminator 4
 430 0042 7A68     	 ldr r2,[r7,#4]
 431 0044 1361     	 str r3,[r2,#16]
 432 0046 0023     	 movs r3,#0
 433 0048 27E1     	 b .L25
 434              	.L26:
 142:../4g_module/pb_encode.c ****     
 143:../4g_module/pb_encode.c **** #ifndef PB_ENCODE_ARRAYS_UNPACKED
 144:../4g_module/pb_encode.c ****     /* We always pack arrays if the datatype allows it. */
 145:../4g_module/pb_encode.c ****     if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 435              	 .loc 1 145 0 is_stmt 1
 436 004a 3B68     	 ldr r3,[r7]
 437 004c 9B7D     	 ldrb r3,[r3,#22]
 438 004e 03F00F03 	 and r3,r3,#15
 439 0052 052B     	 cmp r3,#5
 440 0054 00F2B480 	 bhi .L29
 146:../4g_module/pb_encode.c ****     {
 147:../4g_module/pb_encode.c ****         if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 441              	 .loc 1 147 0
 442 0058 3B68     	 ldr r3,[r7]
 443 005a 1B8A     	 ldrh r3,[r3,#16]
 444 005c 7868     	 ldr r0,[r7,#4]
 445 005e 0221     	 movs r1,#2
 446 0060 1A46     	 mov r2,r3
 447 0062 FFF7FEFF 	 bl pb_encode_tag
 448 0066 0346     	 mov r3,r0
 449 0068 83F00103 	 eor r3,r3,#1
 450 006c DBB2     	 uxtb r3,r3
 451 006e 002B     	 cmp r3,#0
 452 0070 01D0     	 beq .L30
 148:../4g_module/pb_encode.c ****             return false;
 453              	 .loc 1 148 0
 454 0072 0023     	 movs r3,#0
 455 0074 11E1     	 b .L25
 456              	.L30:
 149:../4g_module/pb_encode.c ****         
 150:../4g_module/pb_encode.c ****         /* Determine the total size of packed array. */
 151:../4g_module/pb_encode.c ****         if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 457              	 .loc 1 151 0
 458 0076 3B68     	 ldr r3,[r7]
 459 0078 9B7D     	 ldrb r3,[r3,#22]
 460 007a 03F00F03 	 and r3,r3,#15
 461 007e 042B     	 cmp r3,#4
 462 0080 03D1     	 bne .L31
 152:../4g_module/pb_encode.c ****         {
 153:../4g_module/pb_encode.c ****             size = 4 * (size_t)count;
 463              	 .loc 1 153 0
 464 0082 BB8C     	 ldrh r3,[r7,#36]
 465 0084 9B00     	 lsls r3,r3,#2
 466 0086 BB62     	 str r3,[r7,#40]
 467 0088 49E0     	 b .L32
 468              	.L31:
 154:../4g_module/pb_encode.c ****         }
 155:../4g_module/pb_encode.c ****         else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 469              	 .loc 1 155 0
 470 008a 3B68     	 ldr r3,[r7]
 471 008c 9B7D     	 ldrb r3,[r3,#22]
 472 008e 03F00F03 	 and r3,r3,#15
 473 0092 052B     	 cmp r3,#5
 474 0094 03D1     	 bne .L33
 156:../4g_module/pb_encode.c ****         {
 157:../4g_module/pb_encode.c ****             size = 8 * (size_t)count;
 475              	 .loc 1 157 0
 476 0096 BB8C     	 ldrh r3,[r7,#36]
 477 0098 DB00     	 lsls r3,r3,#3
 478 009a BB62     	 str r3,[r7,#40]
 479 009c 3FE0     	 b .L32
 480              	.L33:
 481              	.LBB2:
 158:../4g_module/pb_encode.c ****         }
 159:../4g_module/pb_encode.c ****         else
 160:../4g_module/pb_encode.c ****         { 
 161:../4g_module/pb_encode.c ****             pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 482              	 .loc 1 161 0
 483 009e 0023     	 movs r3,#0
 484 00a0 BB60     	 str r3,[r7,#8]
 485 00a2 0023     	 movs r3,#0
 486 00a4 FB60     	 str r3,[r7,#12]
 487 00a6 0023     	 movs r3,#0
 488 00a8 3B61     	 str r3,[r7,#16]
 489 00aa 0023     	 movs r3,#0
 490 00ac 7B61     	 str r3,[r7,#20]
 491 00ae 0023     	 movs r3,#0
 492 00b0 BB61     	 str r3,[r7,#24]
 162:../4g_module/pb_encode.c ****             void *pData_orig = field->pData;
 493              	 .loc 1 162 0
 494 00b2 3B68     	 ldr r3,[r7]
 495 00b4 DB69     	 ldr r3,[r3,#28]
 496 00b6 3B62     	 str r3,[r7,#32]
 163:../4g_module/pb_encode.c ****             for (i = 0; i < count; i++)
 497              	 .loc 1 163 0
 498 00b8 0023     	 movs r3,#0
 499 00ba FB85     	 strh r3,[r7,#46]
 500 00bc 26E0     	 b .L34
 501              	.L40:
 164:../4g_module/pb_encode.c ****             {
 165:../4g_module/pb_encode.c ****                 if (!pb_enc_varint(&sizestream, field))
 502              	 .loc 1 165 0
 503 00be 07F10803 	 add r3,r7,#8
 504 00c2 1846     	 mov r0,r3
 505 00c4 3968     	 ldr r1,[r7]
 506 00c6 FFF7FEFF 	 bl pb_enc_varint
 507 00ca 0346     	 mov r3,r0
 508 00cc 83F00103 	 eor r3,r3,#1
 509 00d0 DBB2     	 uxtb r3,r3
 510 00d2 002B     	 cmp r3,#0
 511 00d4 10D0     	 beq .L35
 166:../4g_module/pb_encode.c ****                     PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 512              	 .loc 1 166 0
 513 00d6 7B68     	 ldr r3,[r7,#4]
 514 00d8 1B69     	 ldr r3,[r3,#16]
 515 00da 002B     	 cmp r3,#0
 516 00dc 02D0     	 beq .L36
 517              	 .loc 1 166 0 is_stmt 0 discriminator 1
 518 00de 7B68     	 ldr r3,[r7,#4]
 519 00e0 1B69     	 ldr r3,[r3,#16]
 520 00e2 05E0     	 b .L37
 521              	.L36:
 522              	 .loc 1 166 0 discriminator 2
 523 00e4 BB69     	 ldr r3,[r7,#24]
 524 00e6 002B     	 cmp r3,#0
 525 00e8 01D0     	 beq .L38
 526              	 .loc 1 166 0 discriminator 4
 527 00ea BB69     	 ldr r3,[r7,#24]
 528 00ec 00E0     	 b .L37
 529              	.L38:
 530              	 .loc 1 166 0 discriminator 5
 531 00ee 6E4B     	 ldr r3,.L60+4
 532              	.L37:
 533              	 .loc 1 166 0 discriminator 8
 534 00f0 7A68     	 ldr r2,[r7,#4]
 535 00f2 1361     	 str r3,[r2,#16]
 536 00f4 0023     	 movs r3,#0
 537 00f6 D0E0     	 b .L25
 538              	.L35:
 167:../4g_module/pb_encode.c ****                 field->pData = (char*)field->pData + field->data_size;
 539              	 .loc 1 167 0 is_stmt 1 discriminator 2
 540 00f8 3B68     	 ldr r3,[r7]
 541 00fa DB69     	 ldr r3,[r3,#28]
 542 00fc 3A68     	 ldr r2,[r7]
 543 00fe 528A     	 ldrh r2,[r2,#18]
 544 0100 1A44     	 add r2,r2,r3
 545 0102 3B68     	 ldr r3,[r7]
 546 0104 DA61     	 str r2,[r3,#28]
 163:../4g_module/pb_encode.c ****             {
 547              	 .loc 1 163 0 discriminator 2
 548 0106 FB8D     	 ldrh r3,[r7,#46]
 549 0108 0133     	 adds r3,r3,#1
 550 010a FB85     	 strh r3,[r7,#46]
 551              	.L34:
 163:../4g_module/pb_encode.c ****             {
 552              	 .loc 1 163 0 is_stmt 0 discriminator 1
 553 010c FA8D     	 ldrh r2,[r7,#46]
 554 010e BB8C     	 ldrh r3,[r7,#36]
 555 0110 9A42     	 cmp r2,r3
 556 0112 D4D3     	 bcc .L40
 168:../4g_module/pb_encode.c ****             }
 169:../4g_module/pb_encode.c ****             field->pData = pData_orig;
 557              	 .loc 1 169 0 is_stmt 1
 558 0114 3B68     	 ldr r3,[r7]
 559 0116 3A6A     	 ldr r2,[r7,#32]
 560 0118 DA61     	 str r2,[r3,#28]
 170:../4g_module/pb_encode.c ****             size = sizestream.bytes_written;
 561              	 .loc 1 170 0
 562 011a 7B69     	 ldr r3,[r7,#20]
 563 011c BB62     	 str r3,[r7,#40]
 564              	.L32:
 565              	.LBE2:
 171:../4g_module/pb_encode.c ****         }
 172:../4g_module/pb_encode.c ****         
 173:../4g_module/pb_encode.c ****         if (!pb_encode_varint(stream, (pb_uint64_t)size))
 566              	 .loc 1 173 0
 567 011e BB6A     	 ldr r3,[r7,#40]
 568 0120 1A46     	 mov r2,r3
 569 0122 4FF00003 	 mov r3,#0
 570 0126 7868     	 ldr r0,[r7,#4]
 571 0128 FFF7FEFF 	 bl pb_encode_varint
 572 012c 0346     	 mov r3,r0
 573 012e 83F00103 	 eor r3,r3,#1
 574 0132 DBB2     	 uxtb r3,r3
 575 0134 002B     	 cmp r3,#0
 576 0136 01D0     	 beq .L41
 174:../4g_module/pb_encode.c ****             return false;
 577              	 .loc 1 174 0
 578 0138 0023     	 movs r3,#0
 579 013a AEE0     	 b .L25
 580              	.L41:
 175:../4g_module/pb_encode.c ****         
 176:../4g_module/pb_encode.c ****         if (stream->callback == NULL)
 581              	 .loc 1 176 0
 582 013c 7B68     	 ldr r3,[r7,#4]
 583 013e 1B68     	 ldr r3,[r3]
 584 0140 002B     	 cmp r3,#0
 585 0142 06D1     	 bne .L42
 177:../4g_module/pb_encode.c ****             return pb_write(stream, NULL, size); /* Just sizing.. */
 586              	 .loc 1 177 0
 587 0144 7868     	 ldr r0,[r7,#4]
 588 0146 0021     	 movs r1,#0
 589 0148 BA6A     	 ldr r2,[r7,#40]
 590 014a FFF7FEFF 	 bl pb_write
 591 014e 0346     	 mov r3,r0
 592 0150 A3E0     	 b .L25
 593              	.L42:
 178:../4g_module/pb_encode.c ****         
 179:../4g_module/pb_encode.c ****         /* Write the data */
 180:../4g_module/pb_encode.c ****         for (i = 0; i < count; i++)
 594              	 .loc 1 180 0
 595 0152 0023     	 movs r3,#0
 596 0154 FB85     	 strh r3,[r7,#46]
 597 0156 2EE0     	 b .L43
 598              	.L48:
 181:../4g_module/pb_encode.c ****         {
 182:../4g_module/pb_encode.c ****             if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXE
 599              	 .loc 1 182 0
 600 0158 3B68     	 ldr r3,[r7]
 601 015a 9B7D     	 ldrb r3,[r3,#22]
 602 015c 03F00F03 	 and r3,r3,#15
 603 0160 042B     	 cmp r3,#4
 604 0162 05D0     	 beq .L44
 605              	 .loc 1 182 0 is_stmt 0 discriminator 1
 606 0164 3B68     	 ldr r3,[r7]
 607 0166 9B7D     	 ldrb r3,[r3,#22]
 608 0168 03F00F03 	 and r3,r3,#15
 609 016c 052B     	 cmp r3,#5
 610 016e 0CD1     	 bne .L45
 611              	.L44:
 183:../4g_module/pb_encode.c ****             {
 184:../4g_module/pb_encode.c ****                 if (!pb_enc_fixed(stream, field))
 612              	 .loc 1 184 0 is_stmt 1
 613 0170 7868     	 ldr r0,[r7,#4]
 614 0172 3968     	 ldr r1,[r7]
 615 0174 FFF7FEFF 	 bl pb_enc_fixed
 616 0178 0346     	 mov r3,r0
 617 017a 83F00103 	 eor r3,r3,#1
 618 017e DBB2     	 uxtb r3,r3
 619 0180 002B     	 cmp r3,#0
 620 0182 01D0     	 beq .L46
 185:../4g_module/pb_encode.c ****                     return false;
 621              	 .loc 1 185 0
 622 0184 0023     	 movs r3,#0
 623 0186 88E0     	 b .L25
 624              	.L46:
 184:../4g_module/pb_encode.c ****                     return false;
 625              	 .loc 1 184 0
 626 0188 0BE0     	 b .L47
 627              	.L45:
 186:../4g_module/pb_encode.c ****             }
 187:../4g_module/pb_encode.c ****             else
 188:../4g_module/pb_encode.c ****             {
 189:../4g_module/pb_encode.c ****                 if (!pb_enc_varint(stream, field))
 628              	 .loc 1 189 0
 629 018a 7868     	 ldr r0,[r7,#4]
 630 018c 3968     	 ldr r1,[r7]
 631 018e FFF7FEFF 	 bl pb_enc_varint
 632 0192 0346     	 mov r3,r0
 633 0194 83F00103 	 eor r3,r3,#1
 634 0198 DBB2     	 uxtb r3,r3
 635 019a 002B     	 cmp r3,#0
 636 019c 01D0     	 beq .L47
 190:../4g_module/pb_encode.c ****                     return false;
 637              	 .loc 1 190 0
 638 019e 0023     	 movs r3,#0
 639 01a0 7BE0     	 b .L25
 640              	.L47:
 191:../4g_module/pb_encode.c ****             }
 192:../4g_module/pb_encode.c **** 
 193:../4g_module/pb_encode.c ****             field->pData = (char*)field->pData + field->data_size;
 641              	 .loc 1 193 0 discriminator 2
 642 01a2 3B68     	 ldr r3,[r7]
 643 01a4 DB69     	 ldr r3,[r3,#28]
 644 01a6 3A68     	 ldr r2,[r7]
 645 01a8 528A     	 ldrh r2,[r2,#18]
 646 01aa 1A44     	 add r2,r2,r3
 647 01ac 3B68     	 ldr r3,[r7]
 648 01ae DA61     	 str r2,[r3,#28]
 180:../4g_module/pb_encode.c ****         {
 649              	 .loc 1 180 0 discriminator 2
 650 01b0 FB8D     	 ldrh r3,[r7,#46]
 651 01b2 0133     	 adds r3,r3,#1
 652 01b4 FB85     	 strh r3,[r7,#46]
 653              	.L43:
 180:../4g_module/pb_encode.c ****         {
 654              	 .loc 1 180 0 is_stmt 0 discriminator 1
 655 01b6 FA8D     	 ldrh r2,[r7,#46]
 656 01b8 BB8C     	 ldrh r3,[r7,#36]
 657 01ba 9A42     	 cmp r2,r3
 658 01bc CCD3     	 bcc .L48
 659 01be 6BE0     	 b .L49
 660              	.L29:
 194:../4g_module/pb_encode.c ****         }
 195:../4g_module/pb_encode.c ****     }
 196:../4g_module/pb_encode.c ****     else /* Unpacked fields */
 197:../4g_module/pb_encode.c **** #endif
 198:../4g_module/pb_encode.c ****     {
 199:../4g_module/pb_encode.c ****         for (i = 0; i < count; i++)
 661              	 .loc 1 199 0 is_stmt 1
 662 01c0 0023     	 movs r3,#0
 663 01c2 FB85     	 strh r3,[r7,#46]
 664 01c4 64E0     	 b .L50
 665              	.L59:
 200:../4g_module/pb_encode.c ****         {
 201:../4g_module/pb_encode.c ****             /* Normally the data is stored directly in the array entries, but
 202:../4g_module/pb_encode.c ****              * for pointer-type string and bytes fields, the array entries are
 203:../4g_module/pb_encode.c ****              * actually pointers themselves also. So we have to dereference once
 204:../4g_module/pb_encode.c ****              * more to get to the actual data. */
 205:../4g_module/pb_encode.c ****             if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 666              	 .loc 1 205 0
 667 01c6 3B68     	 ldr r3,[r7]
 668 01c8 9B7D     	 ldrb r3,[r3,#22]
 669 01ca 03F0C003 	 and r3,r3,#192
 670 01ce 802B     	 cmp r3,#128
 671 01d0 48D1     	 bne .L51
 206:../4g_module/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 672              	 .loc 1 206 0 discriminator 1
 673 01d2 3B68     	 ldr r3,[r7]
 674 01d4 9B7D     	 ldrb r3,[r3,#22]
 675 01d6 03F00F03 	 and r3,r3,#15
 205:../4g_module/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 676              	 .loc 1 205 0 discriminator 1
 677 01da 072B     	 cmp r3,#7
 678 01dc 05D0     	 beq .L52
 207:../4g_module/pb_encode.c ****                  PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 679              	 .loc 1 207 0
 680 01de 3B68     	 ldr r3,[r7]
 681 01e0 9B7D     	 ldrb r3,[r3,#22]
 682 01e2 03F00F03 	 and r3,r3,#15
 206:../4g_module/pb_encode.c ****                 (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 683              	 .loc 1 206 0
 684 01e6 062B     	 cmp r3,#6
 685 01e8 3CD1     	 bne .L51
 686              	.L52:
 687              	.LBB3:
 208:../4g_module/pb_encode.c ****             {
 209:../4g_module/pb_encode.c ****                 bool status;
 210:../4g_module/pb_encode.c ****                 void *pData_orig = field->pData;
 688              	 .loc 1 210 0
 689 01ea 3B68     	 ldr r3,[r7]
 690 01ec DB69     	 ldr r3,[r3,#28]
 691 01ee FB61     	 str r3,[r7,#28]
 211:../4g_module/pb_encode.c ****                 field->pData = *(void* const*)field->pData;
 692              	 .loc 1 211 0
 693 01f0 3B68     	 ldr r3,[r7]
 694 01f2 DB69     	 ldr r3,[r3,#28]
 695 01f4 1A68     	 ldr r2,[r3]
 696 01f6 3B68     	 ldr r3,[r7]
 697 01f8 DA61     	 str r2,[r3,#28]
 212:../4g_module/pb_encode.c **** 
 213:../4g_module/pb_encode.c ****                 if (!field->pData)
 698              	 .loc 1 213 0
 699 01fa 3B68     	 ldr r3,[r7]
 700 01fc DB69     	 ldr r3,[r3,#28]
 701 01fe 002B     	 cmp r3,#0
 702 0200 1CD1     	 bne .L53
 214:../4g_module/pb_encode.c ****                 {
 215:../4g_module/pb_encode.c ****                     /* Null pointer in array is treated as empty string / bytes */
 216:../4g_module/pb_encode.c ****                     status = pb_encode_tag_for_field(stream, field) &&
 703              	 .loc 1 216 0
 704 0202 7868     	 ldr r0,[r7,#4]
 705 0204 3968     	 ldr r1,[r7]
 706 0206 FFF7FEFF 	 bl pb_encode_tag_for_field
 707 020a 0346     	 mov r3,r0
 708 020c 002B     	 cmp r3,#0
 709 020e 0BD0     	 beq .L54
 217:../4g_module/pb_encode.c ****                              pb_encode_varint(stream, 0);
 710              	 .loc 1 217 0 discriminator 1
 711 0210 7868     	 ldr r0,[r7,#4]
 712 0212 4FF00002 	 mov r2,#0
 713 0216 4FF00003 	 mov r3,#0
 714 021a FFF7FEFF 	 bl pb_encode_varint
 715 021e 0346     	 mov r3,r0
 216:../4g_module/pb_encode.c ****                              pb_encode_varint(stream, 0);
 716              	 .loc 1 216 0 discriminator 1
 717 0220 002B     	 cmp r3,#0
 718 0222 01D0     	 beq .L54
 216:../4g_module/pb_encode.c ****                              pb_encode_varint(stream, 0);
 719              	 .loc 1 216 0 is_stmt 0 discriminator 3
 720 0224 0123     	 movs r3,#1
 721 0226 00E0     	 b .L55
 722              	.L54:
 216:../4g_module/pb_encode.c ****                              pb_encode_varint(stream, 0);
 723              	 .loc 1 216 0 discriminator 4
 724 0228 0023     	 movs r3,#0
 725              	.L55:
 216:../4g_module/pb_encode.c ****                              pb_encode_varint(stream, 0);
 726              	 .loc 1 216 0 discriminator 6
 727 022a 87F82730 	 strb r3,[r7,#39]
 728 022e 97F82730 	 ldrb r3,[r7,#39]
 729 0232 03F00103 	 and r3,r3,#1
 730 0236 87F82730 	 strb r3,[r7,#39]
 731 023a 06E0     	 b .L56
 732              	.L53:
 218:../4g_module/pb_encode.c ****                 }
 219:../4g_module/pb_encode.c ****                 else
 220:../4g_module/pb_encode.c ****                 {
 221:../4g_module/pb_encode.c ****                     status = encode_basic_field(stream, field);
 733              	 .loc 1 221 0 is_stmt 1
 734 023c 7868     	 ldr r0,[r7,#4]
 735 023e 3968     	 ldr r1,[r7]
 736 0240 FFF7FEFF 	 bl encode_basic_field
 737 0244 0346     	 mov r3,r0
 738 0246 87F82730 	 strb r3,[r7,#39]
 739              	.L56:
 222:../4g_module/pb_encode.c ****                 }
 223:../4g_module/pb_encode.c **** 
 224:../4g_module/pb_encode.c ****                 field->pData = pData_orig;
 740              	 .loc 1 224 0
 741 024a 3B68     	 ldr r3,[r7]
 742 024c FA69     	 ldr r2,[r7,#28]
 743 024e DA61     	 str r2,[r3,#28]
 225:../4g_module/pb_encode.c **** 
 226:../4g_module/pb_encode.c ****                 if (!status)
 744              	 .loc 1 226 0
 745 0250 97F82730 	 ldrb r3,[r7,#39]
 746 0254 83F00103 	 eor r3,r3,#1
 747 0258 DBB2     	 uxtb r3,r3
 748 025a 002B     	 cmp r3,#0
 749 025c 01D0     	 beq .L57
 227:../4g_module/pb_encode.c ****                     return false;
 750              	 .loc 1 227 0
 751 025e 0023     	 movs r3,#0
 752 0260 1BE0     	 b .L25
 753              	.L57:
 754              	.LBE3:
 208:../4g_module/pb_encode.c ****                 bool status;
 755              	 .loc 1 208 0
 756 0262 0BE0     	 b .L58
 757              	.L51:
 228:../4g_module/pb_encode.c ****             }
 229:../4g_module/pb_encode.c ****             else
 230:../4g_module/pb_encode.c ****             {
 231:../4g_module/pb_encode.c ****                 if (!encode_basic_field(stream, field))
 758              	 .loc 1 231 0
 759 0264 7868     	 ldr r0,[r7,#4]
 760 0266 3968     	 ldr r1,[r7]
 761 0268 FFF7FEFF 	 bl encode_basic_field
 762 026c 0346     	 mov r3,r0
 763 026e 83F00103 	 eor r3,r3,#1
 764 0272 DBB2     	 uxtb r3,r3
 765 0274 002B     	 cmp r3,#0
 766 0276 01D0     	 beq .L58
 232:../4g_module/pb_encode.c ****                     return false;
 767              	 .loc 1 232 0
 768 0278 0023     	 movs r3,#0
 769 027a 0EE0     	 b .L25
 770              	.L58:
 233:../4g_module/pb_encode.c ****             }
 234:../4g_module/pb_encode.c ****             field->pData = (char*)field->pData + field->data_size;
 771              	 .loc 1 234 0 discriminator 2
 772 027c 3B68     	 ldr r3,[r7]
 773 027e DB69     	 ldr r3,[r3,#28]
 774 0280 3A68     	 ldr r2,[r7]
 775 0282 528A     	 ldrh r2,[r2,#18]
 776 0284 1A44     	 add r2,r2,r3
 777 0286 3B68     	 ldr r3,[r7]
 778 0288 DA61     	 str r2,[r3,#28]
 199:../4g_module/pb_encode.c ****         {
 779              	 .loc 1 199 0 discriminator 2
 780 028a FB8D     	 ldrh r3,[r7,#46]
 781 028c 0133     	 adds r3,r3,#1
 782 028e FB85     	 strh r3,[r7,#46]
 783              	.L50:
 199:../4g_module/pb_encode.c ****         {
 784              	 .loc 1 199 0 is_stmt 0 discriminator 1
 785 0290 FA8D     	 ldrh r2,[r7,#46]
 786 0292 BB8C     	 ldrh r3,[r7,#36]
 787 0294 9A42     	 cmp r2,r3
 788 0296 96D3     	 bcc .L59
 789              	.L49:
 235:../4g_module/pb_encode.c ****         }
 236:../4g_module/pb_encode.c ****     }
 237:../4g_module/pb_encode.c ****     
 238:../4g_module/pb_encode.c ****     return true;
 790              	 .loc 1 238 0 is_stmt 1
 791 0298 0123     	 movs r3,#1
 792              	.L25:
 239:../4g_module/pb_encode.c **** }
 793              	 .loc 1 239 0
 794 029a 1846     	 mov r0,r3
 795 029c 3037     	 adds r7,r7,#48
 796              	.LCFI25:
 797              	 .cfi_def_cfa_offset 8
 798 029e BD46     	 mov sp,r7
 799              	.LCFI26:
 800              	 .cfi_def_cfa_register 13
 801              	 
 802 02a0 80BD     	 pop {r7,pc}
 803              	.L61:
 804 02a2 00BF     	 .align 2
 805              	.L60:
 806 02a4 18000000 	 .word .LC2
 807 02a8 30000000 	 .word .LC3
 808              	 .cfi_endproc
 809              	.LFE4:
 811              	 .section .text.pb_check_proto3_default_value,"ax",%progbits
 812              	 .align 2
 813              	 .thumb
 814              	 .thumb_func
 816              	pb_check_proto3_default_value:
 817              	.LFB5:
 240:../4g_module/pb_encode.c **** 
 241:../4g_module/pb_encode.c **** /* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 242:../4g_module/pb_encode.c ****  * This function implements the check for the zero value. */
 243:../4g_module/pb_encode.c **** static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
 244:../4g_module/pb_encode.c **** {
 818              	 .loc 1 244 0
 819              	 .cfi_startproc
 820              	 
 821              	 
 822 0000 80B5     	 push {r7,lr}
 823              	.LCFI27:
 824              	 .cfi_def_cfa_offset 8
 825              	 .cfi_offset 7,-8
 826              	 .cfi_offset 14,-4
 827 0002 92B0     	 sub sp,sp,#72
 828              	.LCFI28:
 829              	 .cfi_def_cfa_offset 80
 830 0004 00AF     	 add r7,sp,#0
 831              	.LCFI29:
 832              	 .cfi_def_cfa_register 7
 833 0006 7860     	 str r0,[r7,#4]
 245:../4g_module/pb_encode.c ****     pb_type_t type = field->type;
 834              	 .loc 1 245 0
 835 0008 7B68     	 ldr r3,[r7,#4]
 836 000a 9B7D     	 ldrb r3,[r3,#22]
 837 000c 87F84530 	 strb r3,[r7,#69]
 246:../4g_module/pb_encode.c **** 
 247:../4g_module/pb_encode.c ****     if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 838              	 .loc 1 247 0
 839 0010 97F84530 	 ldrb r3,[r7,#69]
 840 0014 03F0C003 	 and r3,r3,#192
 841 0018 002B     	 cmp r3,#0
 842 001a 40F0CB80 	 bne .L63
 248:../4g_module/pb_encode.c ****     {
 249:../4g_module/pb_encode.c ****         if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 843              	 .loc 1 249 0
 844 001e 97F84530 	 ldrb r3,[r7,#69]
 845 0022 03F03003 	 and r3,r3,#48
 846 0026 002B     	 cmp r3,#0
 847 0028 01D1     	 bne .L64
 250:../4g_module/pb_encode.c ****         {
 251:../4g_module/pb_encode.c ****             /* Required proto2 fields inside proto3 submessage, pretty rare case */
 252:../4g_module/pb_encode.c ****             return false;
 848              	 .loc 1 252 0
 849 002a 0023     	 movs r3,#0
 850 002c 02E1     	 b .L65
 851              	.L64:
 253:../4g_module/pb_encode.c ****         }
 254:../4g_module/pb_encode.c ****         else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 852              	 .loc 1 254 0
 853 002e 97F84530 	 ldrb r3,[r7,#69]
 854 0032 03F03003 	 and r3,r3,#48
 855 0036 202B     	 cmp r3,#32
 856 0038 08D1     	 bne .L66
 255:../4g_module/pb_encode.c ****         {
 256:../4g_module/pb_encode.c ****             /* Repeated fields inside proto3 submessage: present if count != 0 */
 257:../4g_module/pb_encode.c ****             return *(const pb_size_t*)field->pSize == 0;
 857              	 .loc 1 257 0
 858 003a 7B68     	 ldr r3,[r7,#4]
 859 003c 1B6A     	 ldr r3,[r3,#32]
 860 003e 1B88     	 ldrh r3,[r3]
 861 0040 002B     	 cmp r3,#0
 862 0042 0CBF     	 ite eq
 863 0044 0123     	 moveq r3,#1
 864 0046 0023     	 movne r3,#0
 865 0048 DBB2     	 uxtb r3,r3
 866 004a F3E0     	 b .L65
 867              	.L66:
 258:../4g_module/pb_encode.c ****         }
 259:../4g_module/pb_encode.c ****         else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 868              	 .loc 1 259 0
 869 004c 97F84530 	 ldrb r3,[r7,#69]
 870 0050 03F03003 	 and r3,r3,#48
 871 0054 302B     	 cmp r3,#48
 872 0056 08D1     	 bne .L67
 260:../4g_module/pb_encode.c ****         {
 261:../4g_module/pb_encode.c ****             /* Oneof fields */
 262:../4g_module/pb_encode.c ****             return *(const pb_size_t*)field->pSize == 0;
 873              	 .loc 1 262 0
 874 0058 7B68     	 ldr r3,[r7,#4]
 875 005a 1B6A     	 ldr r3,[r3,#32]
 876 005c 1B88     	 ldrh r3,[r3]
 877 005e 002B     	 cmp r3,#0
 878 0060 0CBF     	 ite eq
 879 0062 0123     	 moveq r3,#1
 880 0064 0023     	 movne r3,#0
 881 0066 DBB2     	 uxtb r3,r3
 882 0068 E4E0     	 b .L65
 883              	.L67:
 263:../4g_module/pb_encode.c ****         }
 264:../4g_module/pb_encode.c ****         else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 884              	 .loc 1 264 0
 885 006a 97F84530 	 ldrb r3,[r7,#69]
 886 006e 03F03003 	 and r3,r3,#48
 887 0072 102B     	 cmp r3,#16
 888 0074 15D1     	 bne .L68
 889              	 .loc 1 264 0 is_stmt 0 discriminator 1
 890 0076 7B68     	 ldr r3,[r7,#4]
 891 0078 1B6A     	 ldr r3,[r3,#32]
 892 007a 002B     	 cmp r3,#0
 893 007c 11D0     	 beq .L68
 265:../4g_module/pb_encode.c ****         {
 266:../4g_module/pb_encode.c ****             /* Proto2 optional fields inside proto3 message, or proto3
 267:../4g_module/pb_encode.c ****              * submessage fields. */
 268:../4g_module/pb_encode.c ****             return safe_read_bool(field->pSize) == false;
 894              	 .loc 1 268 0 is_stmt 1
 895 007e 7B68     	 ldr r3,[r7,#4]
 896 0080 1B6A     	 ldr r3,[r3,#32]
 897 0082 1846     	 mov r0,r3
 898 0084 FFF7FEFF 	 bl safe_read_bool
 899 0088 0346     	 mov r3,r0
 900 008a 002B     	 cmp r3,#0
 901 008c 14BF     	 ite ne
 902 008e 0123     	 movne r3,#1
 903 0090 0023     	 moveq r3,#0
 904 0092 DBB2     	 uxtb r3,r3
 905 0094 83F00103 	 eor r3,r3,#1
 906 0098 DBB2     	 uxtb r3,r3
 907 009a 03F00103 	 and r3,r3,#1
 908 009e DBB2     	 uxtb r3,r3
 909 00a0 C8E0     	 b .L65
 910              	.L68:
 269:../4g_module/pb_encode.c ****         }
 270:../4g_module/pb_encode.c ****         else if (field->descriptor->default_value)
 911              	 .loc 1 270 0
 912 00a2 7B68     	 ldr r3,[r7,#4]
 913 00a4 1B68     	 ldr r3,[r3]
 914 00a6 9B68     	 ldr r3,[r3,#8]
 915 00a8 002B     	 cmp r3,#0
 916 00aa 01D0     	 beq .L69
 271:../4g_module/pb_encode.c ****         {
 272:../4g_module/pb_encode.c ****             /* Proto3 messages do not have default values, but proto2 messages
 273:../4g_module/pb_encode.c ****              * can contain optional fields without has_fields (generator option 'proto3').
 274:../4g_module/pb_encode.c ****              * In this case they must always be encoded, to make sure that the
 275:../4g_module/pb_encode.c ****              * non-zero default value is overwritten.
 276:../4g_module/pb_encode.c ****              */
 277:../4g_module/pb_encode.c ****             return false;
 917              	 .loc 1 277 0
 918 00ac 0023     	 movs r3,#0
 919 00ae C1E0     	 b .L65
 920              	.L69:
 278:../4g_module/pb_encode.c ****         }
 279:../4g_module/pb_encode.c **** 
 280:../4g_module/pb_encode.c ****         /* Rest is proto3 singular fields */
 281:../4g_module/pb_encode.c ****         if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 921              	 .loc 1 281 0
 922 00b0 97F84530 	 ldrb r3,[r7,#69]
 923 00b4 03F00F03 	 and r3,r3,#15
 924 00b8 052B     	 cmp r3,#5
 925 00ba 1CD8     	 bhi .L70
 926              	.LBB4:
 282:../4g_module/pb_encode.c ****         {
 283:../4g_module/pb_encode.c ****             /* Simple integer / float fields */
 284:../4g_module/pb_encode.c ****             pb_size_t i;
 285:../4g_module/pb_encode.c ****             const char *p = (const char*)field->pData;
 927              	 .loc 1 285 0
 928 00bc 7B68     	 ldr r3,[r7,#4]
 929 00be DB69     	 ldr r3,[r3,#28]
 930 00c0 3B64     	 str r3,[r7,#64]
 286:../4g_module/pb_encode.c ****             for (i = 0; i < field->data_size; i++)
 931              	 .loc 1 286 0
 932 00c2 0023     	 movs r3,#0
 933 00c4 A7F84630 	 strh r3,[r7,#70]
 934 00c8 0DE0     	 b .L71
 935              	.L73:
 287:../4g_module/pb_encode.c ****             {
 288:../4g_module/pb_encode.c ****                 if (p[i] != 0)
 936              	 .loc 1 288 0
 937 00ca B7F84630 	 ldrh r3,[r7,#70]
 938 00ce 3A6C     	 ldr r2,[r7,#64]
 939 00d0 1344     	 add r3,r3,r2
 940 00d2 1B78     	 ldrb r3,[r3]
 941 00d4 002B     	 cmp r3,#0
 942 00d6 01D0     	 beq .L72
 289:../4g_module/pb_encode.c ****                 {
 290:../4g_module/pb_encode.c ****                     return false;
 943              	 .loc 1 290 0
 944 00d8 0023     	 movs r3,#0
 945 00da ABE0     	 b .L65
 946              	.L72:
 286:../4g_module/pb_encode.c ****             {
 947              	 .loc 1 286 0 discriminator 2
 948 00dc B7F84630 	 ldrh r3,[r7,#70]
 949 00e0 0133     	 adds r3,r3,#1
 950 00e2 A7F84630 	 strh r3,[r7,#70]
 951              	.L71:
 286:../4g_module/pb_encode.c ****             {
 952              	 .loc 1 286 0 is_stmt 0 discriminator 1
 953 00e6 7B68     	 ldr r3,[r7,#4]
 954 00e8 5B8A     	 ldrh r3,[r3,#18]
 955 00ea B7F84620 	 ldrh r2,[r7,#70]
 956 00ee 9A42     	 cmp r2,r3
 957 00f0 EBD3     	 bcc .L73
 291:../4g_module/pb_encode.c ****                 }
 292:../4g_module/pb_encode.c ****             }
 293:../4g_module/pb_encode.c **** 
 294:../4g_module/pb_encode.c ****             return true;
 958              	 .loc 1 294 0 is_stmt 1
 959 00f2 0123     	 movs r3,#1
 960 00f4 9EE0     	 b .L65
 961              	.L70:
 962              	.LBE4:
 295:../4g_module/pb_encode.c ****         }
 296:../4g_module/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 963              	 .loc 1 296 0
 964 00f6 97F84530 	 ldrb r3,[r7,#69]
 965 00fa 03F00F03 	 and r3,r3,#15
 966 00fe 062B     	 cmp r3,#6
 967 0100 0AD1     	 bne .L74
 968              	.LBB5:
 297:../4g_module/pb_encode.c ****         {
 298:../4g_module/pb_encode.c ****             const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 969              	 .loc 1 298 0
 970 0102 7B68     	 ldr r3,[r7,#4]
 971 0104 DB69     	 ldr r3,[r3,#28]
 972 0106 FB63     	 str r3,[r7,#60]
 299:../4g_module/pb_encode.c ****             return bytes->size == 0;
 973              	 .loc 1 299 0
 974 0108 FB6B     	 ldr r3,[r7,#60]
 975 010a 1B88     	 ldrh r3,[r3]
 976 010c 002B     	 cmp r3,#0
 977 010e 0CBF     	 ite eq
 978 0110 0123     	 moveq r3,#1
 979 0112 0023     	 movne r3,#0
 980 0114 DBB2     	 uxtb r3,r3
 981 0116 8DE0     	 b .L65
 982              	.L74:
 983              	.LBE5:
 300:../4g_module/pb_encode.c ****         }
 301:../4g_module/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 984              	 .loc 1 301 0
 985 0118 97F84530 	 ldrb r3,[r7,#69]
 986 011c 03F00F03 	 and r3,r3,#15
 987 0120 072B     	 cmp r3,#7
 988 0122 08D1     	 bne .L75
 302:../4g_module/pb_encode.c ****         {
 303:../4g_module/pb_encode.c ****             return *(const char*)field->pData == '\0';
 989              	 .loc 1 303 0
 990 0124 7B68     	 ldr r3,[r7,#4]
 991 0126 DB69     	 ldr r3,[r3,#28]
 992 0128 1B78     	 ldrb r3,[r3]
 993 012a 002B     	 cmp r3,#0
 994 012c 0CBF     	 ite eq
 995 012e 0123     	 moveq r3,#1
 996 0130 0023     	 movne r3,#0
 997 0132 DBB2     	 uxtb r3,r3
 998 0134 7EE0     	 b .L65
 999              	.L75:
 304:../4g_module/pb_encode.c ****         }
 305:../4g_module/pb_encode.c ****         else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 1000              	 .loc 1 305 0
 1001 0136 97F84530 	 ldrb r3,[r7,#69]
 1002 013a 03F00F03 	 and r3,r3,#15
 1003 013e 0B2B     	 cmp r3,#11
 1004 0140 07D1     	 bne .L76
 306:../4g_module/pb_encode.c ****         {
 307:../4g_module/pb_encode.c ****             /* Fixed length bytes is only empty if its length is fixed
 308:../4g_module/pb_encode.c ****              * as 0. Which would be pretty strange, but we can check
 309:../4g_module/pb_encode.c ****              * it anyway. */
 310:../4g_module/pb_encode.c ****             return field->data_size == 0;
 1005              	 .loc 1 310 0
 1006 0142 7B68     	 ldr r3,[r7,#4]
 1007 0144 5B8A     	 ldrh r3,[r3,#18]
 1008 0146 002B     	 cmp r3,#0
 1009 0148 0CBF     	 ite eq
 1010 014a 0123     	 moveq r3,#1
 1011 014c 0023     	 movne r3,#0
 1012 014e DBB2     	 uxtb r3,r3
 1013 0150 70E0     	 b .L65
 1014              	.L76:
 311:../4g_module/pb_encode.c ****         }
 312:../4g_module/pb_encode.c ****         else if (PB_LTYPE_IS_SUBMSG(type))
 1015              	 .loc 1 312 0
 1016 0152 97F84530 	 ldrb r3,[r7,#69]
 1017 0156 03F00F03 	 and r3,r3,#15
 1018 015a 082B     	 cmp r3,#8
 1019 015c 05D0     	 beq .L77
 1020              	 .loc 1 312 0 is_stmt 0 discriminator 1
 1021 015e 97F84530 	 ldrb r3,[r7,#69]
 1022 0162 03F00F03 	 and r3,r3,#15
 1023 0166 092B     	 cmp r3,#9
 1024 0168 63D1     	 bne .L78
 1025              	.L77:
 1026              	.LBB6:
 313:../4g_module/pb_encode.c ****         {
 314:../4g_module/pb_encode.c ****             /* Check all fields in the submessage to find if any of them
 315:../4g_module/pb_encode.c ****              * are non-zero. The comparison cannot be done byte-per-byte
 316:../4g_module/pb_encode.c ****              * because the C struct may contain padding bytes that must
 317:../4g_module/pb_encode.c ****              * be skipped. Note that usually proto3 submessages have
 318:../4g_module/pb_encode.c ****              * a separate has_field that is checked earlier in this if.
 319:../4g_module/pb_encode.c ****              */
 320:../4g_module/pb_encode.c ****             pb_field_iter_t iter;
 321:../4g_module/pb_encode.c ****             if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 1027              	 .loc 1 321 0 is_stmt 1
 1028 016a 7B68     	 ldr r3,[r7,#4]
 1029 016c 5A6A     	 ldr r2,[r3,#36]
 1030 016e 7B68     	 ldr r3,[r7,#4]
 1031 0170 DB69     	 ldr r3,[r3,#28]
 1032 0172 07F10C01 	 add r1,r7,#12
 1033 0176 0846     	 mov r0,r1
 1034 0178 1146     	 mov r1,r2
 1035 017a 1A46     	 mov r2,r3
 1036 017c FFF7FEFF 	 bl pb_field_iter_begin
 1037 0180 0346     	 mov r3,r0
 1038 0182 002B     	 cmp r3,#0
 1039 0184 14D0     	 beq .L79
 1040              	.L82:
 322:../4g_module/pb_encode.c ****             {
 323:../4g_module/pb_encode.c ****                 do
 324:../4g_module/pb_encode.c ****                 {
 325:../4g_module/pb_encode.c ****                     if (!pb_check_proto3_default_value(&iter))
 1041              	 .loc 1 325 0
 1042 0186 07F10C03 	 add r3,r7,#12
 1043 018a 1846     	 mov r0,r3
 1044 018c FFF738FF 	 bl pb_check_proto3_default_value
 1045 0190 0346     	 mov r3,r0
 1046 0192 83F00103 	 eor r3,r3,#1
 1047 0196 DBB2     	 uxtb r3,r3
 1048 0198 002B     	 cmp r3,#0
 1049 019a 01D0     	 beq .L80
 326:../4g_module/pb_encode.c ****                     {
 327:../4g_module/pb_encode.c ****                         return false;
 1050              	 .loc 1 327 0
 1051 019c 0023     	 movs r3,#0
 1052 019e 49E0     	 b .L65
 1053              	.L80:
 328:../4g_module/pb_encode.c ****                     }
 329:../4g_module/pb_encode.c ****                 } while (pb_field_iter_next(&iter));
 1054              	 .loc 1 329 0
 1055 01a0 07F10C03 	 add r3,r7,#12
 1056 01a4 1846     	 mov r0,r3
 1057 01a6 FFF7FEFF 	 bl pb_field_iter_next
 1058 01aa 0346     	 mov r3,r0
 1059 01ac 002B     	 cmp r3,#0
 1060 01ae EAD1     	 bne .L82
 1061              	.L79:
 330:../4g_module/pb_encode.c ****             }
 331:../4g_module/pb_encode.c ****             return true;
 1062              	 .loc 1 331 0
 1063 01b0 0123     	 movs r3,#1
 1064 01b2 3FE0     	 b .L65
 1065              	.L63:
 1066              	.LBE6:
 332:../4g_module/pb_encode.c ****         }
 333:../4g_module/pb_encode.c ****     }
 334:../4g_module/pb_encode.c ****     else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 1067              	 .loc 1 334 0
 1068 01b4 97F84530 	 ldrb r3,[r7,#69]
 1069 01b8 03F0C003 	 and r3,r3,#192
 1070 01bc 802B     	 cmp r3,#128
 1071 01be 07D1     	 bne .L83
 335:../4g_module/pb_encode.c ****     {
 336:../4g_module/pb_encode.c ****         return field->pData == NULL;
 1072              	 .loc 1 336 0
 1073 01c0 7B68     	 ldr r3,[r7,#4]
 1074 01c2 DB69     	 ldr r3,[r3,#28]
 1075 01c4 002B     	 cmp r3,#0
 1076 01c6 0CBF     	 ite eq
 1077 01c8 0123     	 moveq r3,#1
 1078 01ca 0023     	 movne r3,#0
 1079 01cc DBB2     	 uxtb r3,r3
 1080 01ce 31E0     	 b .L65
 1081              	.L83:
 337:../4g_module/pb_encode.c ****     }
 338:../4g_module/pb_encode.c ****     else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 1082              	 .loc 1 338 0
 1083 01d0 97F84530 	 ldrb r3,[r7,#69]
 1084 01d4 03F0C003 	 and r3,r3,#192
 1085 01d8 402B     	 cmp r3,#64
 1086 01da 2AD1     	 bne .L78
 339:../4g_module/pb_encode.c ****     {
 340:../4g_module/pb_encode.c ****         if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 1087              	 .loc 1 340 0
 1088 01dc 97F84530 	 ldrb r3,[r7,#69]
 1089 01e0 03F00F03 	 and r3,r3,#15
 1090 01e4 0A2B     	 cmp r3,#10
 1091 01e6 0AD1     	 bne .L84
 1092              	.LBB7:
 341:../4g_module/pb_encode.c ****         {
 342:../4g_module/pb_encode.c ****             const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 1093              	 .loc 1 342 0
 1094 01e8 7B68     	 ldr r3,[r7,#4]
 1095 01ea DB69     	 ldr r3,[r3,#28]
 1096 01ec 1B68     	 ldr r3,[r3]
 1097 01ee BB63     	 str r3,[r7,#56]
 343:../4g_module/pb_encode.c ****             return extension == NULL;
 1098              	 .loc 1 343 0
 1099 01f0 BB6B     	 ldr r3,[r7,#56]
 1100 01f2 002B     	 cmp r3,#0
 1101 01f4 0CBF     	 ite eq
 1102 01f6 0123     	 moveq r3,#1
 1103 01f8 0023     	 movne r3,#0
 1104 01fa DBB2     	 uxtb r3,r3
 1105 01fc 1AE0     	 b .L65
 1106              	.L84:
 1107              	.LBE7:
 344:../4g_module/pb_encode.c ****         }
 345:../4g_module/pb_encode.c ****         else if (field->descriptor->field_callback == pb_default_field_callback)
 1108              	 .loc 1 345 0
 1109 01fe 7B68     	 ldr r3,[r7,#4]
 1110 0200 1B68     	 ldr r3,[r3]
 1111 0202 DB68     	 ldr r3,[r3,#12]
 1112 0204 0D4A     	 ldr r2,.L86
 1113 0206 9342     	 cmp r3,r2
 1114 0208 0AD1     	 bne .L85
 1115              	.LBB8:
 346:../4g_module/pb_encode.c ****         {
 347:../4g_module/pb_encode.c ****             pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 1116              	 .loc 1 347 0
 1117 020a 7B68     	 ldr r3,[r7,#4]
 1118 020c DB69     	 ldr r3,[r3,#28]
 1119 020e 7B63     	 str r3,[r7,#52]
 348:../4g_module/pb_encode.c ****             return pCallback->funcs.encode == NULL;
 1120              	 .loc 1 348 0
 1121 0210 7B6B     	 ldr r3,[r7,#52]
 1122 0212 1B68     	 ldr r3,[r3]
 1123 0214 002B     	 cmp r3,#0
 1124 0216 0CBF     	 ite eq
 1125 0218 0123     	 moveq r3,#1
 1126 021a 0023     	 movne r3,#0
 1127 021c DBB2     	 uxtb r3,r3
 1128 021e 09E0     	 b .L65
 1129              	.L85:
 1130              	.LBE8:
 349:../4g_module/pb_encode.c ****         }
 350:../4g_module/pb_encode.c ****         else
 351:../4g_module/pb_encode.c ****         {
 352:../4g_module/pb_encode.c ****             return field->descriptor->field_callback == NULL;
 1131              	 .loc 1 352 0
 1132 0220 7B68     	 ldr r3,[r7,#4]
 1133 0222 1B68     	 ldr r3,[r3]
 1134 0224 DB68     	 ldr r3,[r3,#12]
 1135 0226 002B     	 cmp r3,#0
 1136 0228 0CBF     	 ite eq
 1137 022a 0123     	 moveq r3,#1
 1138 022c 0023     	 movne r3,#0
 1139 022e DBB2     	 uxtb r3,r3
 1140 0230 00E0     	 b .L65
 1141              	.L78:
 353:../4g_module/pb_encode.c ****         }
 354:../4g_module/pb_encode.c ****     }
 355:../4g_module/pb_encode.c **** 
 356:../4g_module/pb_encode.c ****     return false; /* Not typically reached, safe default for weird special cases. */
 1142              	 .loc 1 356 0
 1143 0232 0023     	 movs r3,#0
 1144              	.L65:
 357:../4g_module/pb_encode.c **** }
 1145              	 .loc 1 357 0 discriminator 1
 1146 0234 1846     	 mov r0,r3
 1147 0236 4837     	 adds r7,r7,#72
 1148              	.LCFI30:
 1149              	 .cfi_def_cfa_offset 8
 1150 0238 BD46     	 mov sp,r7
 1151              	.LCFI31:
 1152              	 .cfi_def_cfa_register 13
 1153              	 
 1154 023a 80BD     	 pop {r7,pc}
 1155              	.L87:
 1156              	 .align 2
 1157              	.L86:
 1158 023c 00000000 	 .word pb_default_field_callback
 1159              	 .cfi_endproc
 1160              	.LFE5:
 1162              	 .section .rodata
 1163 0037 00       	 .align 2
 1164              	.LC4:
 1165 0038 696E7661 	 .ascii "invalid field type\000"
 1165      6C696420 
 1165      6669656C 
 1165      64207479 
 1165      706500
 1166              	 .section .text.encode_basic_field,"ax",%progbits
 1167              	 .align 2
 1168              	 .thumb
 1169              	 .thumb_func
 1171              	encode_basic_field:
 1172              	.LFB6:
 358:../4g_module/pb_encode.c **** 
 359:../4g_module/pb_encode.c **** /* Encode a field with static or pointer allocation, i.e. one whose data
 360:../4g_module/pb_encode.c ****  * is available to the encoder directly. */
 361:../4g_module/pb_encode.c **** static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
 362:../4g_module/pb_encode.c **** {
 1173              	 .loc 1 362 0
 1174              	 .cfi_startproc
 1175              	 
 1176              	 
 1177 0000 80B5     	 push {r7,lr}
 1178              	.LCFI32:
 1179              	 .cfi_def_cfa_offset 8
 1180              	 .cfi_offset 7,-8
 1181              	 .cfi_offset 14,-4
 1182 0002 82B0     	 sub sp,sp,#8
 1183              	.LCFI33:
 1184              	 .cfi_def_cfa_offset 16
 1185 0004 00AF     	 add r7,sp,#0
 1186              	.LCFI34:
 1187              	 .cfi_def_cfa_register 7
 1188 0006 7860     	 str r0,[r7,#4]
 1189 0008 3960     	 str r1,[r7]
 363:../4g_module/pb_encode.c ****     if (!field->pData)
 1190              	 .loc 1 363 0
 1191 000a 3B68     	 ldr r3,[r7]
 1192 000c DB69     	 ldr r3,[r3,#28]
 1193 000e 002B     	 cmp r3,#0
 1194 0010 01D1     	 bne .L89
 364:../4g_module/pb_encode.c ****     {
 365:../4g_module/pb_encode.c ****         /* Missing pointer field */
 366:../4g_module/pb_encode.c ****         return true;
 1195              	 .loc 1 366 0
 1196 0012 0123     	 movs r3,#1
 1197 0014 61E0     	 b .L90
 1198              	.L89:
 367:../4g_module/pb_encode.c ****     }
 368:../4g_module/pb_encode.c **** 
 369:../4g_module/pb_encode.c ****     if (!pb_encode_tag_for_field(stream, field))
 1199              	 .loc 1 369 0
 1200 0016 7868     	 ldr r0,[r7,#4]
 1201 0018 3968     	 ldr r1,[r7]
 1202 001a FFF7FEFF 	 bl pb_encode_tag_for_field
 1203 001e 0346     	 mov r3,r0
 1204 0020 83F00103 	 eor r3,r3,#1
 1205 0024 DBB2     	 uxtb r3,r3
 1206 0026 002B     	 cmp r3,#0
 1207 0028 01D0     	 beq .L91
 370:../4g_module/pb_encode.c ****         return false;
 1208              	 .loc 1 370 0
 1209 002a 0023     	 movs r3,#0
 1210 002c 55E0     	 b .L90
 1211              	.L91:
 371:../4g_module/pb_encode.c **** 
 372:../4g_module/pb_encode.c ****     switch (PB_LTYPE(field->type))
 1212              	 .loc 1 372 0
 1213 002e 3B68     	 ldr r3,[r7]
 1214 0030 9B7D     	 ldrb r3,[r3,#22]
 1215 0032 03F00F03 	 and r3,r3,#15
 1216 0036 0B2B     	 cmp r3,#11
 1217 0038 44D8     	 bhi .L92
 1218 003a 01A2     	 adr r2,.L94
 1219 003c 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 1220              	 .p2align 2
 1221              	.L94:
 1222 0040 71000000 	 .word .L93+1
 1223 0044 7D000000 	 .word .L95+1
 1224 0048 7D000000 	 .word .L95+1
 1225 004c 7D000000 	 .word .L95+1
 1226 0050 89000000 	 .word .L96+1
 1227 0054 89000000 	 .word .L96+1
 1228 0058 95000000 	 .word .L97+1
 1229 005c A1000000 	 .word .L98+1
 1230 0060 AD000000 	 .word .L99+1
 1231 0064 AD000000 	 .word .L99+1
 1232 0068 C5000000 	 .word .L92+1
 1233 006c B9000000 	 .word .L100+1
 1234              	 .p2align 1
 1235              	.L93:
 373:../4g_module/pb_encode.c ****     {
 374:../4g_module/pb_encode.c ****         case PB_LTYPE_BOOL:
 375:../4g_module/pb_encode.c ****             return pb_enc_bool(stream, field);
 1236              	 .loc 1 375 0
 1237 0070 7868     	 ldr r0,[r7,#4]
 1238 0072 3968     	 ldr r1,[r7]
 1239 0074 FFF7FEFF 	 bl pb_enc_bool
 1240 0078 0346     	 mov r3,r0
 1241 007a 2EE0     	 b .L90
 1242              	.L95:
 376:../4g_module/pb_encode.c **** 
 377:../4g_module/pb_encode.c ****         case PB_LTYPE_VARINT:
 378:../4g_module/pb_encode.c ****         case PB_LTYPE_UVARINT:
 379:../4g_module/pb_encode.c ****         case PB_LTYPE_SVARINT:
 380:../4g_module/pb_encode.c ****             return pb_enc_varint(stream, field);
 1243              	 .loc 1 380 0
 1244 007c 7868     	 ldr r0,[r7,#4]
 1245 007e 3968     	 ldr r1,[r7]
 1246 0080 FFF7FEFF 	 bl pb_enc_varint
 1247 0084 0346     	 mov r3,r0
 1248 0086 28E0     	 b .L90
 1249              	.L96:
 381:../4g_module/pb_encode.c **** 
 382:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED32:
 383:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED64:
 384:../4g_module/pb_encode.c ****             return pb_enc_fixed(stream, field);
 1250              	 .loc 1 384 0
 1251 0088 7868     	 ldr r0,[r7,#4]
 1252 008a 3968     	 ldr r1,[r7]
 1253 008c FFF7FEFF 	 bl pb_enc_fixed
 1254 0090 0346     	 mov r3,r0
 1255 0092 22E0     	 b .L90
 1256              	.L97:
 385:../4g_module/pb_encode.c **** 
 386:../4g_module/pb_encode.c ****         case PB_LTYPE_BYTES:
 387:../4g_module/pb_encode.c ****             return pb_enc_bytes(stream, field);
 1257              	 .loc 1 387 0
 1258 0094 7868     	 ldr r0,[r7,#4]
 1259 0096 3968     	 ldr r1,[r7]
 1260 0098 FFF7FEFF 	 bl pb_enc_bytes
 1261 009c 0346     	 mov r3,r0
 1262 009e 1CE0     	 b .L90
 1263              	.L98:
 388:../4g_module/pb_encode.c **** 
 389:../4g_module/pb_encode.c ****         case PB_LTYPE_STRING:
 390:../4g_module/pb_encode.c ****             return pb_enc_string(stream, field);
 1264              	 .loc 1 390 0
 1265 00a0 7868     	 ldr r0,[r7,#4]
 1266 00a2 3968     	 ldr r1,[r7]
 1267 00a4 FFF7FEFF 	 bl pb_enc_string
 1268 00a8 0346     	 mov r3,r0
 1269 00aa 16E0     	 b .L90
 1270              	.L99:
 391:../4g_module/pb_encode.c **** 
 392:../4g_module/pb_encode.c ****         case PB_LTYPE_SUBMESSAGE:
 393:../4g_module/pb_encode.c ****         case PB_LTYPE_SUBMSG_W_CB:
 394:../4g_module/pb_encode.c ****             return pb_enc_submessage(stream, field);
 1271              	 .loc 1 394 0
 1272 00ac 7868     	 ldr r0,[r7,#4]
 1273 00ae 3968     	 ldr r1,[r7]
 1274 00b0 FFF7FEFF 	 bl pb_enc_submessage
 1275 00b4 0346     	 mov r3,r0
 1276 00b6 10E0     	 b .L90
 1277              	.L100:
 395:../4g_module/pb_encode.c **** 
 396:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED_LENGTH_BYTES:
 397:../4g_module/pb_encode.c ****             return pb_enc_fixed_length_bytes(stream, field);
 1278              	 .loc 1 397 0
 1279 00b8 7868     	 ldr r0,[r7,#4]
 1280 00ba 3968     	 ldr r1,[r7]
 1281 00bc FFF7FEFF 	 bl pb_enc_fixed_length_bytes
 1282 00c0 0346     	 mov r3,r0
 1283 00c2 0AE0     	 b .L90
 1284              	.L92:
 398:../4g_module/pb_encode.c **** 
 399:../4g_module/pb_encode.c ****         default:
 400:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid field type");
 1285              	 .loc 1 400 0
 1286 00c4 7B68     	 ldr r3,[r7,#4]
 1287 00c6 1B69     	 ldr r3,[r3,#16]
 1288 00c8 002B     	 cmp r3,#0
 1289 00ca 02D0     	 beq .L101
 1290              	 .loc 1 400 0 is_stmt 0 discriminator 1
 1291 00cc 7B68     	 ldr r3,[r7,#4]
 1292 00ce 1B69     	 ldr r3,[r3,#16]
 1293 00d0 00E0     	 b .L102
 1294              	.L101:
 1295              	 .loc 1 400 0 discriminator 2
 1296 00d2 044B     	 ldr r3,.L103
 1297              	.L102:
 1298              	 .loc 1 400 0 discriminator 4
 1299 00d4 7A68     	 ldr r2,[r7,#4]
 1300 00d6 1361     	 str r3,[r2,#16]
 1301 00d8 0023     	 movs r3,#0
 1302              	.L90:
 401:../4g_module/pb_encode.c ****     }
 402:../4g_module/pb_encode.c **** }
 1303              	 .loc 1 402 0 is_stmt 1
 1304 00da 1846     	 mov r0,r3
 1305 00dc 0837     	 adds r7,r7,#8
 1306              	.LCFI35:
 1307              	 .cfi_def_cfa_offset 8
 1308 00de BD46     	 mov sp,r7
 1309              	.LCFI36:
 1310              	 .cfi_def_cfa_register 13
 1311              	 
 1312 00e0 80BD     	 pop {r7,pc}
 1313              	.L104:
 1314 00e2 00BF     	 .align 2
 1315              	.L103:
 1316 00e4 38000000 	 .word .LC4
 1317              	 .cfi_endproc
 1318              	.LFE6:
 1320              	 .section .rodata
 1321 004b 00       	 .align 2
 1322              	.LC5:
 1323 004c 63616C6C 	 .ascii "callback error\000"
 1323      6261636B 
 1323      20657272 
 1323      6F7200
 1324              	 .section .text.encode_callback_field,"ax",%progbits
 1325              	 .align 2
 1326              	 .thumb
 1327              	 .thumb_func
 1329              	encode_callback_field:
 1330              	.LFB7:
 403:../4g_module/pb_encode.c **** 
 404:../4g_module/pb_encode.c **** /* Encode a field with callback semantics. This means that a user function is
 405:../4g_module/pb_encode.c ****  * called to provide and encode the actual data. */
 406:../4g_module/pb_encode.c **** static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
 407:../4g_module/pb_encode.c **** {
 1331              	 .loc 1 407 0
 1332              	 .cfi_startproc
 1333              	 
 1334              	 
 1335 0000 80B5     	 push {r7,lr}
 1336              	.LCFI37:
 1337              	 .cfi_def_cfa_offset 8
 1338              	 .cfi_offset 7,-8
 1339              	 .cfi_offset 14,-4
 1340 0002 82B0     	 sub sp,sp,#8
 1341              	.LCFI38:
 1342              	 .cfi_def_cfa_offset 16
 1343 0004 00AF     	 add r7,sp,#0
 1344              	.LCFI39:
 1345              	 .cfi_def_cfa_register 7
 1346 0006 7860     	 str r0,[r7,#4]
 1347 0008 3960     	 str r1,[r7]
 408:../4g_module/pb_encode.c ****     if (field->descriptor->field_callback != NULL)
 1348              	 .loc 1 408 0
 1349 000a 3B68     	 ldr r3,[r7]
 1350 000c 1B68     	 ldr r3,[r3]
 1351 000e DB68     	 ldr r3,[r3,#12]
 1352 0010 002B     	 cmp r3,#0
 1353 0012 18D0     	 beq .L106
 409:../4g_module/pb_encode.c ****     {
 410:../4g_module/pb_encode.c ****         if (!field->descriptor->field_callback(NULL, stream, field))
 1354              	 .loc 1 410 0
 1355 0014 3B68     	 ldr r3,[r7]
 1356 0016 1B68     	 ldr r3,[r3]
 1357 0018 DB68     	 ldr r3,[r3,#12]
 1358 001a 0020     	 movs r0,#0
 1359 001c 7968     	 ldr r1,[r7,#4]
 1360 001e 3A68     	 ldr r2,[r7]
 1361 0020 9847     	 blx r3
 1362 0022 0346     	 mov r3,r0
 1363 0024 83F00103 	 eor r3,r3,#1
 1364 0028 DBB2     	 uxtb r3,r3
 1365 002a 002B     	 cmp r3,#0
 1366 002c 0BD0     	 beq .L106
 411:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "callback error");
 1367              	 .loc 1 411 0
 1368 002e 7B68     	 ldr r3,[r7,#4]
 1369 0030 1B69     	 ldr r3,[r3,#16]
 1370 0032 002B     	 cmp r3,#0
 1371 0034 02D0     	 beq .L107
 1372              	 .loc 1 411 0 is_stmt 0 discriminator 1
 1373 0036 7B68     	 ldr r3,[r7,#4]
 1374 0038 1B69     	 ldr r3,[r3,#16]
 1375 003a 00E0     	 b .L108
 1376              	.L107:
 1377              	 .loc 1 411 0 discriminator 2
 1378 003c 044B     	 ldr r3,.L110
 1379              	.L108:
 1380              	 .loc 1 411 0 discriminator 4
 1381 003e 7A68     	 ldr r2,[r7,#4]
 1382 0040 1361     	 str r3,[r2,#16]
 1383 0042 0023     	 movs r3,#0
 1384 0044 00E0     	 b .L109
 1385              	.L106:
 412:../4g_module/pb_encode.c ****     }
 413:../4g_module/pb_encode.c ****     return true;
 1386              	 .loc 1 413 0 is_stmt 1
 1387 0046 0123     	 movs r3,#1
 1388              	.L109:
 414:../4g_module/pb_encode.c **** }
 1389              	 .loc 1 414 0
 1390 0048 1846     	 mov r0,r3
 1391 004a 0837     	 adds r7,r7,#8
 1392              	.LCFI40:
 1393              	 .cfi_def_cfa_offset 8
 1394 004c BD46     	 mov sp,r7
 1395              	.LCFI41:
 1396              	 .cfi_def_cfa_register 13
 1397              	 
 1398 004e 80BD     	 pop {r7,pc}
 1399              	.L111:
 1400              	 .align 2
 1401              	.L110:
 1402 0050 4C000000 	 .word .LC5
 1403              	 .cfi_endproc
 1404              	.LFE7:
 1406              	 .section .rodata
 1407 005b 00       	 .align 2
 1408              	.LC6:
 1409 005c 6D697373 	 .ascii "missing required field\000"
 1409      696E6720 
 1409      72657175 
 1409      69726564 
 1409      20666965 
 1410              	 .section .text.encode_field,"ax",%progbits
 1411              	 .align 2
 1412              	 .thumb
 1413              	 .thumb_func
 1415              	encode_field:
 1416              	.LFB8:
 415:../4g_module/pb_encode.c **** 
 416:../4g_module/pb_encode.c **** /* Encode a single field of any callback, pointer or static type. */
 417:../4g_module/pb_encode.c **** static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
 418:../4g_module/pb_encode.c **** {
 1417              	 .loc 1 418 0
 1418              	 .cfi_startproc
 1419              	 
 1420              	 
 1421 0000 80B5     	 push {r7,lr}
 1422              	.LCFI42:
 1423              	 .cfi_def_cfa_offset 8
 1424              	 .cfi_offset 7,-8
 1425              	 .cfi_offset 14,-4
 1426 0002 82B0     	 sub sp,sp,#8
 1427              	.LCFI43:
 1428              	 .cfi_def_cfa_offset 16
 1429 0004 00AF     	 add r7,sp,#0
 1430              	.LCFI44:
 1431              	 .cfi_def_cfa_register 7
 1432 0006 7860     	 str r0,[r7,#4]
 1433 0008 3960     	 str r1,[r7]
 419:../4g_module/pb_encode.c ****     /* Check field presence */
 420:../4g_module/pb_encode.c ****     if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 1434              	 .loc 1 420 0
 1435 000a 3B68     	 ldr r3,[r7]
 1436 000c 9B7D     	 ldrb r3,[r3,#22]
 1437 000e 03F03003 	 and r3,r3,#48
 1438 0012 302B     	 cmp r3,#48
 1439 0014 08D1     	 bne .L113
 421:../4g_module/pb_encode.c ****     {
 422:../4g_module/pb_encode.c ****         if (*(const pb_size_t*)field->pSize != field->tag)
 1440              	 .loc 1 422 0
 1441 0016 3B68     	 ldr r3,[r7]
 1442 0018 1B6A     	 ldr r3,[r3,#32]
 1443 001a 1A88     	 ldrh r2,[r3]
 1444 001c 3B68     	 ldr r3,[r7]
 1445 001e 1B8A     	 ldrh r3,[r3,#16]
 1446 0020 9A42     	 cmp r2,r3
 1447 0022 26D0     	 beq .L114
 423:../4g_module/pb_encode.c ****         {
 424:../4g_module/pb_encode.c ****             /* Different type oneof field */
 425:../4g_module/pb_encode.c ****             return true;
 1448              	 .loc 1 425 0
 1449 0024 0123     	 movs r3,#1
 1450 0026 59E0     	 b .L115
 1451              	.L113:
 426:../4g_module/pb_encode.c ****         }
 427:../4g_module/pb_encode.c ****     }
 428:../4g_module/pb_encode.c ****     else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 1452              	 .loc 1 428 0
 1453 0028 3B68     	 ldr r3,[r7]
 1454 002a 9B7D     	 ldrb r3,[r3,#22]
 1455 002c 03F03003 	 and r3,r3,#48
 1456 0030 102B     	 cmp r3,#16
 1457 0032 1ED1     	 bne .L114
 429:../4g_module/pb_encode.c ****     {
 430:../4g_module/pb_encode.c ****         if (field->pSize)
 1458              	 .loc 1 430 0
 1459 0034 3B68     	 ldr r3,[r7]
 1460 0036 1B6A     	 ldr r3,[r3,#32]
 1461 0038 002B     	 cmp r3,#0
 1462 003a 0CD0     	 beq .L116
 431:../4g_module/pb_encode.c ****         {
 432:../4g_module/pb_encode.c ****             if (safe_read_bool(field->pSize) == false)
 1463              	 .loc 1 432 0
 1464 003c 3B68     	 ldr r3,[r7]
 1465 003e 1B6A     	 ldr r3,[r3,#32]
 1466 0040 1846     	 mov r0,r3
 1467 0042 FFF7FEFF 	 bl safe_read_bool
 1468 0046 0346     	 mov r3,r0
 1469 0048 83F00103 	 eor r3,r3,#1
 1470 004c DBB2     	 uxtb r3,r3
 1471 004e 002B     	 cmp r3,#0
 1472 0050 0FD0     	 beq .L114
 433:../4g_module/pb_encode.c ****             {
 434:../4g_module/pb_encode.c ****                 /* Missing optional field */
 435:../4g_module/pb_encode.c ****                 return true;
 1473              	 .loc 1 435 0
 1474 0052 0123     	 movs r3,#1
 1475 0054 42E0     	 b .L115
 1476              	.L116:
 436:../4g_module/pb_encode.c ****             }
 437:../4g_module/pb_encode.c ****         }
 438:../4g_module/pb_encode.c ****         else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 1477              	 .loc 1 438 0
 1478 0056 3B68     	 ldr r3,[r7]
 1479 0058 9B7D     	 ldrb r3,[r3,#22]
 1480 005a 03F0C003 	 and r3,r3,#192
 1481 005e 002B     	 cmp r3,#0
 1482 0060 07D1     	 bne .L114
 439:../4g_module/pb_encode.c ****         {
 440:../4g_module/pb_encode.c ****             /* Proto3 singular field */
 441:../4g_module/pb_encode.c ****             if (pb_check_proto3_default_value(field))
 1483              	 .loc 1 441 0
 1484 0062 3868     	 ldr r0,[r7]
 1485 0064 FFF7FEFF 	 bl pb_check_proto3_default_value
 1486 0068 0346     	 mov r3,r0
 1487 006a 002B     	 cmp r3,#0
 1488 006c 01D0     	 beq .L114
 442:../4g_module/pb_encode.c ****                 return true;
 1489              	 .loc 1 442 0
 1490 006e 0123     	 movs r3,#1
 1491 0070 34E0     	 b .L115
 1492              	.L114:
 443:../4g_module/pb_encode.c ****         }
 444:../4g_module/pb_encode.c ****     }
 445:../4g_module/pb_encode.c **** 
 446:../4g_module/pb_encode.c ****     if (!field->pData)
 1493              	 .loc 1 446 0
 1494 0072 3B68     	 ldr r3,[r7]
 1495 0074 DB69     	 ldr r3,[r3,#28]
 1496 0076 002B     	 cmp r3,#0
 1497 0078 13D1     	 bne .L117
 447:../4g_module/pb_encode.c ****     {
 448:../4g_module/pb_encode.c ****         if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 1498              	 .loc 1 448 0
 1499 007a 3B68     	 ldr r3,[r7]
 1500 007c 9B7D     	 ldrb r3,[r3,#22]
 1501 007e 03F03003 	 and r3,r3,#48
 1502 0082 002B     	 cmp r3,#0
 1503 0084 0BD1     	 bne .L118
 449:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "missing required field");
 1504              	 .loc 1 449 0
 1505 0086 7B68     	 ldr r3,[r7,#4]
 1506 0088 1B69     	 ldr r3,[r3,#16]
 1507 008a 002B     	 cmp r3,#0
 1508 008c 02D0     	 beq .L119
 1509              	 .loc 1 449 0 is_stmt 0 discriminator 1
 1510 008e 7B68     	 ldr r3,[r7,#4]
 1511 0090 1B69     	 ldr r3,[r3,#16]
 1512 0092 00E0     	 b .L120
 1513              	.L119:
 1514              	 .loc 1 449 0 discriminator 2
 1515 0094 134B     	 ldr r3,.L123
 1516              	.L120:
 1517              	 .loc 1 449 0 discriminator 4
 1518 0096 7A68     	 ldr r2,[r7,#4]
 1519 0098 1361     	 str r3,[r2,#16]
 1520 009a 0023     	 movs r3,#0
 1521 009c 1EE0     	 b .L115
 1522              	.L118:
 450:../4g_module/pb_encode.c **** 
 451:../4g_module/pb_encode.c ****         /* Pointer field set to NULL */
 452:../4g_module/pb_encode.c ****         return true;
 1523              	 .loc 1 452 0 is_stmt 1
 1524 009e 0123     	 movs r3,#1
 1525 00a0 1CE0     	 b .L115
 1526              	.L117:
 453:../4g_module/pb_encode.c ****     }
 454:../4g_module/pb_encode.c **** 
 455:../4g_module/pb_encode.c ****     /* Then encode field contents */
 456:../4g_module/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 1527              	 .loc 1 456 0
 1528 00a2 3B68     	 ldr r3,[r7]
 1529 00a4 9B7D     	 ldrb r3,[r3,#22]
 1530 00a6 03F0C003 	 and r3,r3,#192
 1531 00aa 402B     	 cmp r3,#64
 1532 00ac 05D1     	 bne .L121
 457:../4g_module/pb_encode.c ****     {
 458:../4g_module/pb_encode.c ****         return encode_callback_field(stream, field);
 1533              	 .loc 1 458 0
 1534 00ae 7868     	 ldr r0,[r7,#4]
 1535 00b0 3968     	 ldr r1,[r7]
 1536 00b2 FFF7FEFF 	 bl encode_callback_field
 1537 00b6 0346     	 mov r3,r0
 1538 00b8 10E0     	 b .L115
 1539              	.L121:
 459:../4g_module/pb_encode.c ****     }
 460:../4g_module/pb_encode.c ****     else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 1540              	 .loc 1 460 0
 1541 00ba 3B68     	 ldr r3,[r7]
 1542 00bc 9B7D     	 ldrb r3,[r3,#22]
 1543 00be 03F03003 	 and r3,r3,#48
 1544 00c2 202B     	 cmp r3,#32
 1545 00c4 05D1     	 bne .L122
 461:../4g_module/pb_encode.c ****     {
 462:../4g_module/pb_encode.c ****         return encode_array(stream, field);
 1546              	 .loc 1 462 0
 1547 00c6 7868     	 ldr r0,[r7,#4]
 1548 00c8 3968     	 ldr r1,[r7]
 1549 00ca FFF7FEFF 	 bl encode_array
 1550 00ce 0346     	 mov r3,r0
 1551 00d0 04E0     	 b .L115
 1552              	.L122:
 463:../4g_module/pb_encode.c ****     }
 464:../4g_module/pb_encode.c ****     else
 465:../4g_module/pb_encode.c ****     {
 466:../4g_module/pb_encode.c ****         return encode_basic_field(stream, field);
 1553              	 .loc 1 466 0
 1554 00d2 7868     	 ldr r0,[r7,#4]
 1555 00d4 3968     	 ldr r1,[r7]
 1556 00d6 FFF7FEFF 	 bl encode_basic_field
 1557 00da 0346     	 mov r3,r0
 1558              	.L115:
 467:../4g_module/pb_encode.c ****     }
 468:../4g_module/pb_encode.c **** }
 1559              	 .loc 1 468 0
 1560 00dc 1846     	 mov r0,r3
 1561 00de 0837     	 adds r7,r7,#8
 1562              	.LCFI45:
 1563              	 .cfi_def_cfa_offset 8
 1564 00e0 BD46     	 mov sp,r7
 1565              	.LCFI46:
 1566              	 .cfi_def_cfa_register 13
 1567              	 
 1568 00e2 80BD     	 pop {r7,pc}
 1569              	.L124:
 1570              	 .align 2
 1571              	.L123:
 1572 00e4 5C000000 	 .word .LC6
 1573              	 .cfi_endproc
 1574              	.LFE8:
 1576              	 .section .rodata
 1577 0073 00       	 .align 2
 1578              	.LC7:
 1579 0074 696E7661 	 .ascii "invalid extension\000"
 1579      6C696420 
 1579      65787465 
 1579      6E73696F 
 1579      6E00
 1580              	 .section .text.default_extension_encoder,"ax",%progbits
 1581              	 .align 2
 1582              	 .thumb
 1583              	 .thumb_func
 1585              	default_extension_encoder:
 1586              	.LFB9:
 469:../4g_module/pb_encode.c **** 
 470:../4g_module/pb_encode.c **** /* Default handler for extension fields. Expects to have a pb_msgdesc_t
 471:../4g_module/pb_encode.c ****  * pointer in the extension->type->arg field, pointing to a message with
 472:../4g_module/pb_encode.c ****  * only one field in it.  */
 473:../4g_module/pb_encode.c **** static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *exten
 474:../4g_module/pb_encode.c **** {
 1587              	 .loc 1 474 0
 1588              	 .cfi_startproc
 1589              	 
 1590              	 
 1591 0000 80B5     	 push {r7,lr}
 1592              	.LCFI47:
 1593              	 .cfi_def_cfa_offset 8
 1594              	 .cfi_offset 7,-8
 1595              	 .cfi_offset 14,-4
 1596 0002 8CB0     	 sub sp,sp,#48
 1597              	.LCFI48:
 1598              	 .cfi_def_cfa_offset 56
 1599 0004 00AF     	 add r7,sp,#0
 1600              	.LCFI49:
 1601              	 .cfi_def_cfa_register 7
 1602 0006 7860     	 str r0,[r7,#4]
 1603 0008 3960     	 str r1,[r7]
 475:../4g_module/pb_encode.c ****     pb_field_iter_t iter;
 476:../4g_module/pb_encode.c **** 
 477:../4g_module/pb_encode.c ****     if (!pb_field_iter_begin_extension_const(&iter, extension))
 1604              	 .loc 1 477 0
 1605 000a 07F10803 	 add r3,r7,#8
 1606 000e 1846     	 mov r0,r3
 1607 0010 3968     	 ldr r1,[r7]
 1608 0012 FFF7FEFF 	 bl pb_field_iter_begin_extension_const
 1609 0016 0346     	 mov r3,r0
 1610 0018 83F00103 	 eor r3,r3,#1
 1611 001c DBB2     	 uxtb r3,r3
 1612 001e 002B     	 cmp r3,#0
 1613 0020 0BD0     	 beq .L126
 478:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid extension");
 1614              	 .loc 1 478 0
 1615 0022 7B68     	 ldr r3,[r7,#4]
 1616 0024 1B69     	 ldr r3,[r3,#16]
 1617 0026 002B     	 cmp r3,#0
 1618 0028 02D0     	 beq .L127
 1619              	 .loc 1 478 0 is_stmt 0 discriminator 1
 1620 002a 7B68     	 ldr r3,[r7,#4]
 1621 002c 1B69     	 ldr r3,[r3,#16]
 1622 002e 00E0     	 b .L128
 1623              	.L127:
 1624              	 .loc 1 478 0 discriminator 2
 1625 0030 074B     	 ldr r3,.L131
 1626              	.L128:
 1627              	 .loc 1 478 0 discriminator 4
 1628 0032 7A68     	 ldr r2,[r7,#4]
 1629 0034 1361     	 str r3,[r2,#16]
 1630 0036 0023     	 movs r3,#0
 1631 0038 06E0     	 b .L130
 1632              	.L126:
 479:../4g_module/pb_encode.c **** 
 480:../4g_module/pb_encode.c ****     return encode_field(stream, &iter);
 1633              	 .loc 1 480 0 is_stmt 1
 1634 003a 07F10803 	 add r3,r7,#8
 1635 003e 7868     	 ldr r0,[r7,#4]
 1636 0040 1946     	 mov r1,r3
 1637 0042 FFF7FEFF 	 bl encode_field
 1638 0046 0346     	 mov r3,r0
 1639              	.L130:
 481:../4g_module/pb_encode.c **** }
 1640              	 .loc 1 481 0 discriminator 1
 1641 0048 1846     	 mov r0,r3
 1642 004a 3037     	 adds r7,r7,#48
 1643              	.LCFI50:
 1644              	 .cfi_def_cfa_offset 8
 1645 004c BD46     	 mov sp,r7
 1646              	.LCFI51:
 1647              	 .cfi_def_cfa_register 13
 1648              	 
 1649 004e 80BD     	 pop {r7,pc}
 1650              	.L132:
 1651              	 .align 2
 1652              	.L131:
 1653 0050 74000000 	 .word .LC7
 1654              	 .cfi_endproc
 1655              	.LFE9:
 1657              	 .section .text.encode_extension_field,"ax",%progbits
 1658              	 .align 2
 1659              	 .thumb
 1660              	 .thumb_func
 1662              	encode_extension_field:
 1663              	.LFB10:
 482:../4g_module/pb_encode.c **** 
 483:../4g_module/pb_encode.c **** 
 484:../4g_module/pb_encode.c **** /* Walk through all the registered extensions and give them a chance
 485:../4g_module/pb_encode.c ****  * to encode themselves. */
 486:../4g_module/pb_encode.c **** static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
 487:../4g_module/pb_encode.c **** {
 1664              	 .loc 1 487 0
 1665              	 .cfi_startproc
 1666              	 
 1667              	 
 1668 0000 80B5     	 push {r7,lr}
 1669              	.LCFI52:
 1670              	 .cfi_def_cfa_offset 8
 1671              	 .cfi_offset 7,-8
 1672              	 .cfi_offset 14,-4
 1673 0002 84B0     	 sub sp,sp,#16
 1674              	.LCFI53:
 1675              	 .cfi_def_cfa_offset 24
 1676 0004 00AF     	 add r7,sp,#0
 1677              	.LCFI54:
 1678              	 .cfi_def_cfa_register 7
 1679 0006 7860     	 str r0,[r7,#4]
 1680 0008 3960     	 str r1,[r7]
 488:../4g_module/pb_encode.c ****     const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 1681              	 .loc 1 488 0
 1682 000a 3B68     	 ldr r3,[r7]
 1683 000c DB69     	 ldr r3,[r3,#28]
 1684 000e 1B68     	 ldr r3,[r3]
 1685 0010 FB60     	 str r3,[r7,#12]
 489:../4g_module/pb_encode.c **** 
 490:../4g_module/pb_encode.c ****     while (extension)
 1686              	 .loc 1 490 0
 1687 0012 1EE0     	 b .L134
 1688              	.L139:
 1689              	.LBB9:
 491:../4g_module/pb_encode.c ****     {
 492:../4g_module/pb_encode.c ****         bool status;
 493:../4g_module/pb_encode.c ****         if (extension->type->encode)
 1690              	 .loc 1 493 0
 1691 0014 FB68     	 ldr r3,[r7,#12]
 1692 0016 1B68     	 ldr r3,[r3]
 1693 0018 5B68     	 ldr r3,[r3,#4]
 1694 001a 002B     	 cmp r3,#0
 1695 001c 08D0     	 beq .L135
 494:../4g_module/pb_encode.c ****             status = extension->type->encode(stream, extension);
 1696              	 .loc 1 494 0
 1697 001e FB68     	 ldr r3,[r7,#12]
 1698 0020 1B68     	 ldr r3,[r3]
 1699 0022 5B68     	 ldr r3,[r3,#4]
 1700 0024 7868     	 ldr r0,[r7,#4]
 1701 0026 F968     	 ldr r1,[r7,#12]
 1702 0028 9847     	 blx r3
 1703 002a 0346     	 mov r3,r0
 1704 002c FB72     	 strb r3,[r7,#11]
 1705 002e 05E0     	 b .L136
 1706              	.L135:
 495:../4g_module/pb_encode.c ****         else
 496:../4g_module/pb_encode.c ****             status = default_extension_encoder(stream, extension);
 1707              	 .loc 1 496 0
 1708 0030 7868     	 ldr r0,[r7,#4]
 1709 0032 F968     	 ldr r1,[r7,#12]
 1710 0034 FFF7FEFF 	 bl default_extension_encoder
 1711 0038 0346     	 mov r3,r0
 1712 003a FB72     	 strb r3,[r7,#11]
 1713              	.L136:
 497:../4g_module/pb_encode.c **** 
 498:../4g_module/pb_encode.c ****         if (!status)
 1714              	 .loc 1 498 0
 1715 003c FB7A     	 ldrb r3,[r7,#11]
 1716 003e 83F00103 	 eor r3,r3,#1
 1717 0042 DBB2     	 uxtb r3,r3
 1718 0044 002B     	 cmp r3,#0
 1719 0046 01D0     	 beq .L137
 499:../4g_module/pb_encode.c ****             return false;
 1720              	 .loc 1 499 0
 1721 0048 0023     	 movs r3,#0
 1722 004a 06E0     	 b .L138
 1723              	.L137:
 500:../4g_module/pb_encode.c ****         
 501:../4g_module/pb_encode.c ****         extension = extension->next;
 1724              	 .loc 1 501 0
 1725 004c FB68     	 ldr r3,[r7,#12]
 1726 004e 9B68     	 ldr r3,[r3,#8]
 1727 0050 FB60     	 str r3,[r7,#12]
 1728              	.L134:
 1729              	.LBE9:
 490:../4g_module/pb_encode.c ****     {
 1730              	 .loc 1 490 0
 1731 0052 FB68     	 ldr r3,[r7,#12]
 1732 0054 002B     	 cmp r3,#0
 1733 0056 DDD1     	 bne .L139
 502:../4g_module/pb_encode.c ****     }
 503:../4g_module/pb_encode.c ****     
 504:../4g_module/pb_encode.c ****     return true;
 1734              	 .loc 1 504 0
 1735 0058 0123     	 movs r3,#1
 1736              	.L138:
 505:../4g_module/pb_encode.c **** }
 1737              	 .loc 1 505 0
 1738 005a 1846     	 mov r0,r3
 1739 005c 1037     	 adds r7,r7,#16
 1740              	.LCFI55:
 1741              	 .cfi_def_cfa_offset 8
 1742 005e BD46     	 mov sp,r7
 1743              	.LCFI56:
 1744              	 .cfi_def_cfa_register 13
 1745              	 
 1746 0060 80BD     	 pop {r7,pc}
 1747              	 .cfi_endproc
 1748              	.LFE10:
 1750 0062 00BF     	 .section .text.pb_encode,"ax",%progbits
 1751              	 .align 2
 1752              	 .global pb_encode
 1753              	 .thumb
 1754              	 .thumb_func
 1756              	pb_encode:
 1757              	.LFB11:
 506:../4g_module/pb_encode.c **** 
 507:../4g_module/pb_encode.c **** /*********************
 508:../4g_module/pb_encode.c ****  * Encode all fields *
 509:../4g_module/pb_encode.c ****  *********************/
 510:../4g_module/pb_encode.c **** 
 511:../4g_module/pb_encode.c **** bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct
 512:../4g_module/pb_encode.c **** {
 1758              	 .loc 1 512 0
 1759              	 .cfi_startproc
 1760              	 
 1761              	 
 1762 0000 80B5     	 push {r7,lr}
 1763              	.LCFI57:
 1764              	 .cfi_def_cfa_offset 8
 1765              	 .cfi_offset 7,-8
 1766              	 .cfi_offset 14,-4
 1767 0002 8EB0     	 sub sp,sp,#56
 1768              	.LCFI58:
 1769              	 .cfi_def_cfa_offset 64
 1770 0004 00AF     	 add r7,sp,#0
 1771              	.LCFI59:
 1772              	 .cfi_def_cfa_register 7
 1773 0006 F860     	 str r0,[r7,#12]
 1774 0008 B960     	 str r1,[r7,#8]
 1775 000a 7A60     	 str r2,[r7,#4]
 513:../4g_module/pb_encode.c ****     pb_field_iter_t iter;
 514:../4g_module/pb_encode.c ****     if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 1776              	 .loc 1 514 0
 1777 000c 07F11003 	 add r3,r7,#16
 1778 0010 1846     	 mov r0,r3
 1779 0012 B968     	 ldr r1,[r7,#8]
 1780 0014 7A68     	 ldr r2,[r7,#4]
 1781 0016 FFF7FEFF 	 bl pb_field_iter_begin_const
 1782 001a 0346     	 mov r3,r0
 1783 001c 83F00103 	 eor r3,r3,#1
 1784 0020 DBB2     	 uxtb r3,r3
 1785 0022 002B     	 cmp r3,#0
 1786 0024 01D0     	 beq .L141
 515:../4g_module/pb_encode.c ****         return true; /* Empty message type */
 1787              	 .loc 1 515 0
 1788 0026 0123     	 movs r3,#1
 1789 0028 2AE0     	 b .L145
 1790              	.L141:
 516:../4g_module/pb_encode.c ****     
 517:../4g_module/pb_encode.c ****     do {
 518:../4g_module/pb_encode.c ****         if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 1791              	 .loc 1 518 0
 1792 002a 97F82630 	 ldrb r3,[r7,#38]
 1793 002e 03F00F03 	 and r3,r3,#15
 1794 0032 0A2B     	 cmp r3,#10
 1795 0034 0DD1     	 bne .L143
 519:../4g_module/pb_encode.c ****         {
 520:../4g_module/pb_encode.c ****             /* Special case for the extension field placeholder */
 521:../4g_module/pb_encode.c ****             if (!encode_extension_field(stream, &iter))
 1796              	 .loc 1 521 0
 1797 0036 07F11003 	 add r3,r7,#16
 1798 003a F868     	 ldr r0,[r7,#12]
 1799 003c 1946     	 mov r1,r3
 1800 003e FFF7FEFF 	 bl encode_extension_field
 1801 0042 0346     	 mov r3,r0
 1802 0044 83F00103 	 eor r3,r3,#1
 1803 0048 DBB2     	 uxtb r3,r3
 1804 004a 002B     	 cmp r3,#0
 1805 004c 0FD0     	 beq .L144
 522:../4g_module/pb_encode.c ****                 return false;
 1806              	 .loc 1 522 0
 1807 004e 0023     	 movs r3,#0
 1808 0050 16E0     	 b .L145
 1809              	.L143:
 523:../4g_module/pb_encode.c ****         }
 524:../4g_module/pb_encode.c ****         else
 525:../4g_module/pb_encode.c ****         {
 526:../4g_module/pb_encode.c ****             /* Regular field */
 527:../4g_module/pb_encode.c ****             if (!encode_field(stream, &iter))
 1810              	 .loc 1 527 0
 1811 0052 07F11003 	 add r3,r7,#16
 1812 0056 F868     	 ldr r0,[r7,#12]
 1813 0058 1946     	 mov r1,r3
 1814 005a FFF7FEFF 	 bl encode_field
 1815 005e 0346     	 mov r3,r0
 1816 0060 83F00103 	 eor r3,r3,#1
 1817 0064 DBB2     	 uxtb r3,r3
 1818 0066 002B     	 cmp r3,#0
 1819 0068 01D0     	 beq .L144
 528:../4g_module/pb_encode.c ****                 return false;
 1820              	 .loc 1 528 0
 1821 006a 0023     	 movs r3,#0
 1822 006c 08E0     	 b .L145
 1823              	.L144:
 529:../4g_module/pb_encode.c ****         }
 530:../4g_module/pb_encode.c ****     } while (pb_field_iter_next(&iter));
 1824              	 .loc 1 530 0
 1825 006e 07F11003 	 add r3,r7,#16
 1826 0072 1846     	 mov r0,r3
 1827 0074 FFF7FEFF 	 bl pb_field_iter_next
 1828 0078 0346     	 mov r3,r0
 1829 007a 002B     	 cmp r3,#0
 1830 007c D5D1     	 bne .L141
 531:../4g_module/pb_encode.c ****     
 532:../4g_module/pb_encode.c ****     return true;
 1831              	 .loc 1 532 0
 1832 007e 0123     	 movs r3,#1
 1833              	.L145:
 533:../4g_module/pb_encode.c **** }
 1834              	 .loc 1 533 0 discriminator 1
 1835 0080 1846     	 mov r0,r3
 1836 0082 3837     	 adds r7,r7,#56
 1837              	.LCFI60:
 1838              	 .cfi_def_cfa_offset 8
 1839 0084 BD46     	 mov sp,r7
 1840              	.LCFI61:
 1841              	 .cfi_def_cfa_register 13
 1842              	 
 1843 0086 80BD     	 pop {r7,pc}
 1844              	 .cfi_endproc
 1845              	.LFE11:
 1847              	 .section .text.pb_encode_ex,"ax",%progbits
 1848              	 .align 2
 1849              	 .global pb_encode_ex
 1850              	 .thumb
 1851              	 .thumb_func
 1853              	pb_encode_ex:
 1854              	.LFB12:
 534:../4g_module/pb_encode.c **** 
 535:../4g_module/pb_encode.c **** bool checkreturn pb_encode_ex(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_str
 536:../4g_module/pb_encode.c **** {
 1855              	 .loc 1 536 0
 1856              	 .cfi_startproc
 1857              	 
 1858              	 
 1859 0000 80B5     	 push {r7,lr}
 1860              	.LCFI62:
 1861              	 .cfi_def_cfa_offset 8
 1862              	 .cfi_offset 7,-8
 1863              	 .cfi_offset 14,-4
 1864 0002 86B0     	 sub sp,sp,#24
 1865              	.LCFI63:
 1866              	 .cfi_def_cfa_offset 32
 1867 0004 00AF     	 add r7,sp,#0
 1868              	.LCFI64:
 1869              	 .cfi_def_cfa_register 7
 1870 0006 F860     	 str r0,[r7,#12]
 1871 0008 B960     	 str r1,[r7,#8]
 1872 000a 7A60     	 str r2,[r7,#4]
 1873 000c 3B60     	 str r3,[r7]
 537:../4g_module/pb_encode.c ****   if ((flags & PB_ENCODE_DELIMITED) != 0)
 1874              	 .loc 1 537 0
 1875 000e 3B68     	 ldr r3,[r7]
 1876 0010 03F00203 	 and r3,r3,#2
 1877 0014 002B     	 cmp r3,#0
 1878 0016 06D0     	 beq .L147
 538:../4g_module/pb_encode.c ****   {
 539:../4g_module/pb_encode.c ****     return pb_encode_submessage(stream, fields, src_struct);
 1879              	 .loc 1 539 0
 1880 0018 F868     	 ldr r0,[r7,#12]
 1881 001a B968     	 ldr r1,[r7,#8]
 1882 001c 7A68     	 ldr r2,[r7,#4]
 1883 001e FFF7FEFF 	 bl pb_encode_submessage
 1884 0022 0346     	 mov r3,r0
 1885 0024 22E0     	 b .L148
 1886              	.L147:
 540:../4g_module/pb_encode.c ****   }
 541:../4g_module/pb_encode.c ****   else if ((flags & PB_ENCODE_NULLTERMINATED) != 0)
 1887              	 .loc 1 541 0
 1888 0026 3B68     	 ldr r3,[r7]
 1889 0028 03F00403 	 and r3,r3,#4
 1890 002c 002B     	 cmp r3,#0
 1891 002e 17D0     	 beq .L149
 1892              	.LBB10:
 542:../4g_module/pb_encode.c ****   {
 543:../4g_module/pb_encode.c ****     const pb_byte_t zero = 0;
 1893              	 .loc 1 543 0
 1894 0030 0023     	 movs r3,#0
 1895 0032 FB75     	 strb r3,[r7,#23]
 544:../4g_module/pb_encode.c **** 
 545:../4g_module/pb_encode.c ****     if (!pb_encode(stream, fields, src_struct))
 1896              	 .loc 1 545 0
 1897 0034 F868     	 ldr r0,[r7,#12]
 1898 0036 B968     	 ldr r1,[r7,#8]
 1899 0038 7A68     	 ldr r2,[r7,#4]
 1900 003a FFF7FEFF 	 bl pb_encode
 1901 003e 0346     	 mov r3,r0
 1902 0040 83F00103 	 eor r3,r3,#1
 1903 0044 DBB2     	 uxtb r3,r3
 1904 0046 002B     	 cmp r3,#0
 1905 0048 01D0     	 beq .L150
 546:../4g_module/pb_encode.c ****         return false;
 1906              	 .loc 1 546 0
 1907 004a 0023     	 movs r3,#0
 1908 004c 0EE0     	 b .L148
 1909              	.L150:
 547:../4g_module/pb_encode.c **** 
 548:../4g_module/pb_encode.c ****     return pb_write(stream, &zero, 1);
 1910              	 .loc 1 548 0
 1911 004e 07F11703 	 add r3,r7,#23
 1912 0052 F868     	 ldr r0,[r7,#12]
 1913 0054 1946     	 mov r1,r3
 1914 0056 0122     	 movs r2,#1
 1915 0058 FFF7FEFF 	 bl pb_write
 1916 005c 0346     	 mov r3,r0
 1917 005e 05E0     	 b .L148
 1918              	.L149:
 1919              	.LBE10:
 549:../4g_module/pb_encode.c ****   }
 550:../4g_module/pb_encode.c ****   else
 551:../4g_module/pb_encode.c ****   {
 552:../4g_module/pb_encode.c ****     return pb_encode(stream, fields, src_struct);
 1920              	 .loc 1 552 0
 1921 0060 F868     	 ldr r0,[r7,#12]
 1922 0062 B968     	 ldr r1,[r7,#8]
 1923 0064 7A68     	 ldr r2,[r7,#4]
 1924 0066 FFF7FEFF 	 bl pb_encode
 1925 006a 0346     	 mov r3,r0
 1926              	.L148:
 553:../4g_module/pb_encode.c ****   }
 554:../4g_module/pb_encode.c **** }
 1927              	 .loc 1 554 0 discriminator 1
 1928 006c 1846     	 mov r0,r3
 1929 006e 1837     	 adds r7,r7,#24
 1930              	.LCFI65:
 1931              	 .cfi_def_cfa_offset 8
 1932 0070 BD46     	 mov sp,r7
 1933              	.LCFI66:
 1934              	 .cfi_def_cfa_register 13
 1935              	 
 1936 0072 80BD     	 pop {r7,pc}
 1937              	 .cfi_endproc
 1938              	.LFE12:
 1940              	 .section .text.pb_get_encoded_size,"ax",%progbits
 1941              	 .align 2
 1942              	 .global pb_get_encoded_size
 1943              	 .thumb
 1944              	 .thumb_func
 1946              	pb_get_encoded_size:
 1947              	.LFB13:
 555:../4g_module/pb_encode.c **** 
 556:../4g_module/pb_encode.c **** bool pb_get_encoded_size(size_t *size, const pb_msgdesc_t *fields, const void *src_struct)
 557:../4g_module/pb_encode.c **** {
 1948              	 .loc 1 557 0
 1949              	 .cfi_startproc
 1950              	 
 1951              	 
 1952 0000 80B5     	 push {r7,lr}
 1953              	.LCFI67:
 1954              	 .cfi_def_cfa_offset 8
 1955              	 .cfi_offset 7,-8
 1956              	 .cfi_offset 14,-4
 1957 0002 8AB0     	 sub sp,sp,#40
 1958              	.LCFI68:
 1959              	 .cfi_def_cfa_offset 48
 1960 0004 00AF     	 add r7,sp,#0
 1961              	.LCFI69:
 1962              	 .cfi_def_cfa_register 7
 1963 0006 F860     	 str r0,[r7,#12]
 1964 0008 B960     	 str r1,[r7,#8]
 1965 000a 7A60     	 str r2,[r7,#4]
 558:../4g_module/pb_encode.c ****     pb_ostream_t stream = PB_OSTREAM_SIZING;
 1966              	 .loc 1 558 0
 1967 000c 0023     	 movs r3,#0
 1968 000e 7B61     	 str r3,[r7,#20]
 1969 0010 0023     	 movs r3,#0
 1970 0012 BB61     	 str r3,[r7,#24]
 1971 0014 0023     	 movs r3,#0
 1972 0016 FB61     	 str r3,[r7,#28]
 1973 0018 0023     	 movs r3,#0
 1974 001a 3B62     	 str r3,[r7,#32]
 1975 001c 0023     	 movs r3,#0
 1976 001e 7B62     	 str r3,[r7,#36]
 559:../4g_module/pb_encode.c ****     
 560:../4g_module/pb_encode.c ****     if (!pb_encode(&stream, fields, src_struct))
 1977              	 .loc 1 560 0
 1978 0020 07F11403 	 add r3,r7,#20
 1979 0024 1846     	 mov r0,r3
 1980 0026 B968     	 ldr r1,[r7,#8]
 1981 0028 7A68     	 ldr r2,[r7,#4]
 1982 002a FFF7FEFF 	 bl pb_encode
 1983 002e 0346     	 mov r3,r0
 1984 0030 83F00103 	 eor r3,r3,#1
 1985 0034 DBB2     	 uxtb r3,r3
 1986 0036 002B     	 cmp r3,#0
 1987 0038 01D0     	 beq .L153
 561:../4g_module/pb_encode.c ****         return false;
 1988              	 .loc 1 561 0
 1989 003a 0023     	 movs r3,#0
 1990 003c 03E0     	 b .L155
 1991              	.L153:
 562:../4g_module/pb_encode.c ****     
 563:../4g_module/pb_encode.c ****     *size = stream.bytes_written;
 1992              	 .loc 1 563 0
 1993 003e 3A6A     	 ldr r2,[r7,#32]
 1994 0040 FB68     	 ldr r3,[r7,#12]
 1995 0042 1A60     	 str r2,[r3]
 564:../4g_module/pb_encode.c ****     return true;
 1996              	 .loc 1 564 0
 1997 0044 0123     	 movs r3,#1
 1998              	.L155:
 565:../4g_module/pb_encode.c **** }
 1999              	 .loc 1 565 0 discriminator 1
 2000 0046 1846     	 mov r0,r3
 2001 0048 2837     	 adds r7,r7,#40
 2002              	.LCFI70:
 2003              	 .cfi_def_cfa_offset 8
 2004 004a BD46     	 mov sp,r7
 2005              	.LCFI71:
 2006              	 .cfi_def_cfa_register 13
 2007              	 
 2008 004c 80BD     	 pop {r7,pc}
 2009              	 .cfi_endproc
 2010              	.LFE13:
 2012 004e 00BF     	 .section .text.pb_encode_varint_32,"ax",%progbits
 2013              	 .align 2
 2014              	 .thumb
 2015              	 .thumb_func
 2017              	pb_encode_varint_32:
 2018              	.LFB14:
 566:../4g_module/pb_encode.c **** 
 567:../4g_module/pb_encode.c **** /********************
 568:../4g_module/pb_encode.c ****  * Helper functions *
 569:../4g_module/pb_encode.c ****  ********************/
 570:../4g_module/pb_encode.c **** 
 571:../4g_module/pb_encode.c **** /* This function avoids 64-bit shifts as they are quite slow on many platforms. */
 572:../4g_module/pb_encode.c **** static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
 573:../4g_module/pb_encode.c **** {
 2019              	 .loc 1 573 0
 2020              	 .cfi_startproc
 2021              	 
 2022              	 
 2023 0000 80B5     	 push {r7,lr}
 2024              	.LCFI72:
 2025              	 .cfi_def_cfa_offset 8
 2026              	 .cfi_offset 7,-8
 2027              	 .cfi_offset 14,-4
 2028 0002 88B0     	 sub sp,sp,#32
 2029              	.LCFI73:
 2030              	 .cfi_def_cfa_offset 40
 2031 0004 00AF     	 add r7,sp,#0
 2032              	.LCFI74:
 2033              	 .cfi_def_cfa_register 7
 2034 0006 F860     	 str r0,[r7,#12]
 2035 0008 B960     	 str r1,[r7,#8]
 2036 000a 7A60     	 str r2,[r7,#4]
 574:../4g_module/pb_encode.c ****     size_t i = 0;
 2037              	 .loc 1 574 0
 2038 000c 0023     	 movs r3,#0
 2039 000e FB61     	 str r3,[r7,#28]
 575:../4g_module/pb_encode.c ****     pb_byte_t buffer[10];
 576:../4g_module/pb_encode.c ****     pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 2040              	 .loc 1 576 0
 2041 0010 BB68     	 ldr r3,[r7,#8]
 2042 0012 DBB2     	 uxtb r3,r3
 2043 0014 03F07F03 	 and r3,r3,#127
 2044 0018 FB76     	 strb r3,[r7,#27]
 577:../4g_module/pb_encode.c ****     low >>= 7;
 2045              	 .loc 1 577 0
 2046 001a BB68     	 ldr r3,[r7,#8]
 2047 001c DB09     	 lsrs r3,r3,#7
 2048 001e BB60     	 str r3,[r7,#8]
 578:../4g_module/pb_encode.c **** 
 579:../4g_module/pb_encode.c ****     while (i < 4 && (low != 0 || high != 0))
 2049              	 .loc 1 579 0
 2050 0020 14E0     	 b .L157
 2051              	.L159:
 580:../4g_module/pb_encode.c ****     {
 581:../4g_module/pb_encode.c ****         byte |= 0x80;
 2052              	 .loc 1 581 0
 2053 0022 FB7E     	 ldrb r3,[r7,#27]
 2054 0024 63F07F03 	 orn r3,r3,#127
 2055 0028 FB76     	 strb r3,[r7,#27]
 582:../4g_module/pb_encode.c ****         buffer[i++] = byte;
 2056              	 .loc 1 582 0
 2057 002a FB69     	 ldr r3,[r7,#28]
 2058 002c 5A1C     	 adds r2,r3,#1
 2059 002e FA61     	 str r2,[r7,#28]
 2060 0030 07F12002 	 add r2,r7,#32
 2061 0034 1344     	 add r3,r3,r2
 2062 0036 FA7E     	 ldrb r2,[r7,#27]
 2063 0038 03F8102C 	 strb r2,[r3,#-16]
 583:../4g_module/pb_encode.c ****         byte = (pb_byte_t)(low & 0x7F);
 2064              	 .loc 1 583 0
 2065 003c BB68     	 ldr r3,[r7,#8]
 2066 003e DBB2     	 uxtb r3,r3
 2067 0040 03F07F03 	 and r3,r3,#127
 2068 0044 FB76     	 strb r3,[r7,#27]
 584:../4g_module/pb_encode.c ****         low >>= 7;
 2069              	 .loc 1 584 0
 2070 0046 BB68     	 ldr r3,[r7,#8]
 2071 0048 DB09     	 lsrs r3,r3,#7
 2072 004a BB60     	 str r3,[r7,#8]
 2073              	.L157:
 579:../4g_module/pb_encode.c ****     {
 2074              	 .loc 1 579 0
 2075 004c FB69     	 ldr r3,[r7,#28]
 2076 004e 032B     	 cmp r3,#3
 2077 0050 05D8     	 bhi .L158
 579:../4g_module/pb_encode.c ****     {
 2078              	 .loc 1 579 0 is_stmt 0 discriminator 1
 2079 0052 BB68     	 ldr r3,[r7,#8]
 2080 0054 002B     	 cmp r3,#0
 2081 0056 E4D1     	 bne .L159
 579:../4g_module/pb_encode.c ****     {
 2082              	 .loc 1 579 0 discriminator 2
 2083 0058 7B68     	 ldr r3,[r7,#4]
 2084 005a 002B     	 cmp r3,#0
 2085 005c E1D1     	 bne .L159
 2086              	.L158:
 585:../4g_module/pb_encode.c ****     }
 586:../4g_module/pb_encode.c **** 
 587:../4g_module/pb_encode.c ****     if (high)
 2087              	 .loc 1 587 0 is_stmt 1
 2088 005e 7B68     	 ldr r3,[r7,#4]
 2089 0060 002B     	 cmp r3,#0
 2090 0062 25D0     	 beq .L160
 588:../4g_module/pb_encode.c ****     {
 589:../4g_module/pb_encode.c ****         byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 2091              	 .loc 1 589 0
 2092 0064 7B68     	 ldr r3,[r7,#4]
 2093 0066 DBB2     	 uxtb r3,r3
 2094 0068 03F00703 	 and r3,r3,#7
 2095 006c DBB2     	 uxtb r3,r3
 2096 006e 1B01     	 lsls r3,r3,#4
 2097 0070 DAB2     	 uxtb r2,r3
 2098 0072 FB7E     	 ldrb r3,[r7,#27]
 2099 0074 1343     	 orrs r3,r3,r2
 2100 0076 FB76     	 strb r3,[r7,#27]
 590:../4g_module/pb_encode.c ****         high >>= 3;
 2101              	 .loc 1 590 0
 2102 0078 7B68     	 ldr r3,[r7,#4]
 2103 007a DB08     	 lsrs r3,r3,#3
 2104 007c 7B60     	 str r3,[r7,#4]
 591:../4g_module/pb_encode.c **** 
 592:../4g_module/pb_encode.c ****         while (high)
 2105              	 .loc 1 592 0
 2106 007e 14E0     	 b .L161
 2107              	.L162:
 593:../4g_module/pb_encode.c ****         {
 594:../4g_module/pb_encode.c ****             byte |= 0x80;
 2108              	 .loc 1 594 0
 2109 0080 FB7E     	 ldrb r3,[r7,#27]
 2110 0082 63F07F03 	 orn r3,r3,#127
 2111 0086 FB76     	 strb r3,[r7,#27]
 595:../4g_module/pb_encode.c ****             buffer[i++] = byte;
 2112              	 .loc 1 595 0
 2113 0088 FB69     	 ldr r3,[r7,#28]
 2114 008a 5A1C     	 adds r2,r3,#1
 2115 008c FA61     	 str r2,[r7,#28]
 2116 008e 07F12002 	 add r2,r7,#32
 2117 0092 1344     	 add r3,r3,r2
 2118 0094 FA7E     	 ldrb r2,[r7,#27]
 2119 0096 03F8102C 	 strb r2,[r3,#-16]
 596:../4g_module/pb_encode.c ****             byte = (pb_byte_t)(high & 0x7F);
 2120              	 .loc 1 596 0
 2121 009a 7B68     	 ldr r3,[r7,#4]
 2122 009c DBB2     	 uxtb r3,r3
 2123 009e 03F07F03 	 and r3,r3,#127
 2124 00a2 FB76     	 strb r3,[r7,#27]
 597:../4g_module/pb_encode.c ****             high >>= 7;
 2125              	 .loc 1 597 0
 2126 00a4 7B68     	 ldr r3,[r7,#4]
 2127 00a6 DB09     	 lsrs r3,r3,#7
 2128 00a8 7B60     	 str r3,[r7,#4]
 2129              	.L161:
 592:../4g_module/pb_encode.c ****         {
 2130              	 .loc 1 592 0
 2131 00aa 7B68     	 ldr r3,[r7,#4]
 2132 00ac 002B     	 cmp r3,#0
 2133 00ae E7D1     	 bne .L162
 2134              	.L160:
 598:../4g_module/pb_encode.c ****         }
 599:../4g_module/pb_encode.c ****     }
 600:../4g_module/pb_encode.c **** 
 601:../4g_module/pb_encode.c ****     buffer[i++] = byte;
 2135              	 .loc 1 601 0
 2136 00b0 FB69     	 ldr r3,[r7,#28]
 2137 00b2 5A1C     	 adds r2,r3,#1
 2138 00b4 FA61     	 str r2,[r7,#28]
 2139 00b6 07F12002 	 add r2,r7,#32
 2140 00ba 1344     	 add r3,r3,r2
 2141 00bc FA7E     	 ldrb r2,[r7,#27]
 2142 00be 03F8102C 	 strb r2,[r3,#-16]
 602:../4g_module/pb_encode.c **** 
 603:../4g_module/pb_encode.c ****     return pb_write(stream, buffer, i);
 2143              	 .loc 1 603 0
 2144 00c2 07F11003 	 add r3,r7,#16
 2145 00c6 F868     	 ldr r0,[r7,#12]
 2146 00c8 1946     	 mov r1,r3
 2147 00ca FA69     	 ldr r2,[r7,#28]
 2148 00cc FFF7FEFF 	 bl pb_write
 2149 00d0 0346     	 mov r3,r0
 604:../4g_module/pb_encode.c **** }
 2150              	 .loc 1 604 0
 2151 00d2 1846     	 mov r0,r3
 2152 00d4 2037     	 adds r7,r7,#32
 2153              	.LCFI75:
 2154              	 .cfi_def_cfa_offset 8
 2155 00d6 BD46     	 mov sp,r7
 2156              	.LCFI76:
 2157              	 .cfi_def_cfa_register 13
 2158              	 
 2159 00d8 80BD     	 pop {r7,pc}
 2160              	 .cfi_endproc
 2161              	.LFE14:
 2163 00da 00BF     	 .section .text.pb_encode_varint,"ax",%progbits
 2164              	 .align 2
 2165              	 .global pb_encode_varint
 2166              	 .thumb
 2167              	 .thumb_func
 2169              	pb_encode_varint:
 2170              	.LFB15:
 605:../4g_module/pb_encode.c **** 
 606:../4g_module/pb_encode.c **** bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
 607:../4g_module/pb_encode.c **** {
 2171              	 .loc 1 607 0
 2172              	 .cfi_startproc
 2173              	 
 2174              	 
 2175 0000 B0B5     	 push {r4,r5,r7,lr}
 2176              	.LCFI77:
 2177              	 .cfi_def_cfa_offset 16
 2178              	 .cfi_offset 4,-16
 2179              	 .cfi_offset 5,-12
 2180              	 .cfi_offset 7,-8
 2181              	 .cfi_offset 14,-4
 2182 0002 86B0     	 sub sp,sp,#24
 2183              	.LCFI78:
 2184              	 .cfi_def_cfa_offset 40
 2185 0004 00AF     	 add r7,sp,#0
 2186              	.LCFI79:
 2187              	 .cfi_def_cfa_register 7
 2188 0006 F860     	 str r0,[r7,#12]
 2189 0008 C7E90023 	 strd r2,[r7]
 608:../4g_module/pb_encode.c ****     if (value <= 0x7F)
 2190              	 .loc 1 608 0
 2191 000c D7E90023 	 ldrd r2,[r7]
 2192 0010 002B     	 cmp r3,#0
 2193 0012 08BF     	 it eq
 2194 0014 802A     	 cmpeq r2,#128
 2195 0016 0AD2     	 bcs .L165
 2196              	.LBB11:
 609:../4g_module/pb_encode.c ****     {
 610:../4g_module/pb_encode.c ****         /* Fast path: single byte */
 611:../4g_module/pb_encode.c ****         pb_byte_t byte = (pb_byte_t)value;
 2197              	 .loc 1 611 0
 2198 0018 3B78     	 ldrb r3,[r7]
 2199 001a FB75     	 strb r3,[r7,#23]
 612:../4g_module/pb_encode.c ****         return pb_write(stream, &byte, 1);
 2200              	 .loc 1 612 0
 2201 001c 07F11703 	 add r3,r7,#23
 2202 0020 F868     	 ldr r0,[r7,#12]
 2203 0022 1946     	 mov r1,r3
 2204 0024 0122     	 movs r2,#1
 2205 0026 FFF7FEFF 	 bl pb_write
 2206 002a 0346     	 mov r3,r0
 2207 002c 0AE0     	 b .L166
 2208              	.L165:
 2209              	.LBE11:
 613:../4g_module/pb_encode.c ****     }
 614:../4g_module/pb_encode.c ****     else
 615:../4g_module/pb_encode.c ****     {
 616:../4g_module/pb_encode.c **** #ifdef PB_WITHOUT_64BIT
 617:../4g_module/pb_encode.c ****         return pb_encode_varint_32(stream, value, 0);
 618:../4g_module/pb_encode.c **** #else
 619:../4g_module/pb_encode.c ****         return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 2210              	 .loc 1 619 0
 2211 002e 3968     	 ldr r1,[r7]
 2212 0030 D7E90023 	 ldrd r2,[r7]
 2213 0034 1C00     	 movs r4,r3
 2214 0036 0025     	 movs r5,#0
 2215 0038 2346     	 mov r3,r4
 2216 003a F868     	 ldr r0,[r7,#12]
 2217 003c 1A46     	 mov r2,r3
 2218 003e FFF7FEFF 	 bl pb_encode_varint_32
 2219 0042 0346     	 mov r3,r0
 2220              	.L166:
 620:../4g_module/pb_encode.c **** #endif
 621:../4g_module/pb_encode.c ****     }
 622:../4g_module/pb_encode.c **** }
 2221              	 .loc 1 622 0 discriminator 1
 2222 0044 1846     	 mov r0,r3
 2223 0046 1837     	 adds r7,r7,#24
 2224              	.LCFI80:
 2225              	 .cfi_def_cfa_offset 16
 2226 0048 BD46     	 mov sp,r7
 2227              	.LCFI81:
 2228              	 .cfi_def_cfa_register 13
 2229              	 
 2230 004a B0BD     	 pop {r4,r5,r7,pc}
 2231              	 .cfi_endproc
 2232              	.LFE15:
 2234              	 .section .text.pb_encode_svarint,"ax",%progbits
 2235              	 .align 2
 2236              	 .global pb_encode_svarint
 2237              	 .thumb
 2238              	 .thumb_func
 2240              	pb_encode_svarint:
 2241              	.LFB16:
 623:../4g_module/pb_encode.c **** 
 624:../4g_module/pb_encode.c **** bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
 625:../4g_module/pb_encode.c **** {
 2242              	 .loc 1 625 0
 2243              	 .cfi_startproc
 2244              	 
 2245              	 
 2246 0000 80B5     	 push {r7,lr}
 2247              	.LCFI82:
 2248              	 .cfi_def_cfa_offset 8
 2249              	 .cfi_offset 7,-8
 2250              	 .cfi_offset 14,-4
 2251 0002 88B0     	 sub sp,sp,#32
 2252              	.LCFI83:
 2253              	 .cfi_def_cfa_offset 40
 2254 0004 00AF     	 add r7,sp,#0
 2255              	.LCFI84:
 2256              	 .cfi_def_cfa_register 7
 2257 0006 F860     	 str r0,[r7,#12]
 2258 0008 C7E90023 	 strd r2,[r7]
 626:../4g_module/pb_encode.c ****     pb_uint64_t zigzagged;
 627:../4g_module/pb_encode.c ****     pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 2259              	 .loc 1 627 0
 2260 000c 4FF0FF32 	 mov r2,#-1
 2261 0010 6FF00043 	 mvn r3,#-2147483648
 2262 0014 C7E90423 	 strd r2,[r7,#16]
 628:../4g_module/pb_encode.c ****     if (value < 0)
 2263              	 .loc 1 628 0
 2264 0018 D7E90023 	 ldrd r2,[r7]
 2265 001c 002A     	 cmp r2,#0
 2266 001e 73F10003 	 sbcs r3,r3,#0
 2267 0022 11DA     	 bge .L168
 629:../4g_module/pb_encode.c ****         zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 2268              	 .loc 1 629 0
 2269 0024 D7E90001 	 ldrd r0,[r7]
 2270 0028 D7E90423 	 ldrd r2,[r7,#16]
 2271 002c 02EA0002 	 and r2,r2,r0
 2272 0030 03EA0103 	 and r3,r3,r1
 2273 0034 9218     	 adds r2,r2,r2
 2274 0036 43EB0303 	 adc r3,r3,r3
 2275 003a 6FEA0202 	 mvn r2,r2
 2276 003e 6FEA0303 	 mvn r3,r3
 2277 0042 C7E90623 	 strd r2,[r7,#24]
 2278 0046 06E0     	 b .L169
 2279              	.L168:
 630:../4g_module/pb_encode.c ****     else
 631:../4g_module/pb_encode.c ****         zigzagged = (pb_uint64_t)value << 1;
 2280              	 .loc 1 631 0
 2281 0048 D7E90023 	 ldrd r2,[r7]
 2282 004c 9218     	 adds r2,r2,r2
 2283 004e 43EB0303 	 adc r3,r3,r3
 2284 0052 C7E90623 	 strd r2,[r7,#24]
 2285              	.L169:
 632:../4g_module/pb_encode.c ****     
 633:../4g_module/pb_encode.c ****     return pb_encode_varint(stream, zigzagged);
 2286              	 .loc 1 633 0
 2287 0056 F868     	 ldr r0,[r7,#12]
 2288 0058 D7E90623 	 ldrd r2,[r7,#24]
 2289 005c FFF7FEFF 	 bl pb_encode_varint
 2290 0060 0346     	 mov r3,r0
 634:../4g_module/pb_encode.c **** }
 2291              	 .loc 1 634 0
 2292 0062 1846     	 mov r0,r3
 2293 0064 2037     	 adds r7,r7,#32
 2294              	.LCFI85:
 2295              	 .cfi_def_cfa_offset 8
 2296 0066 BD46     	 mov sp,r7
 2297              	.LCFI86:
 2298              	 .cfi_def_cfa_register 13
 2299              	 
 2300 0068 80BD     	 pop {r7,pc}
 2301              	 .cfi_endproc
 2302              	.LFE16:
 2304 006a 00BF     	 .section .text.pb_encode_fixed32,"ax",%progbits
 2305              	 .align 2
 2306              	 .global pb_encode_fixed32
 2307              	 .thumb
 2308              	 .thumb_func
 2310              	pb_encode_fixed32:
 2311              	.LFB17:
 635:../4g_module/pb_encode.c **** 
 636:../4g_module/pb_encode.c **** bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
 637:../4g_module/pb_encode.c **** {
 2312              	 .loc 1 637 0
 2313              	 .cfi_startproc
 2314              	 
 2315              	 
 2316 0000 80B5     	 push {r7,lr}
 2317              	.LCFI87:
 2318              	 .cfi_def_cfa_offset 8
 2319              	 .cfi_offset 7,-8
 2320              	 .cfi_offset 14,-4
 2321 0002 82B0     	 sub sp,sp,#8
 2322              	.LCFI88:
 2323              	 .cfi_def_cfa_offset 16
 2324 0004 00AF     	 add r7,sp,#0
 2325              	.LCFI89:
 2326              	 .cfi_def_cfa_register 7
 2327 0006 7860     	 str r0,[r7,#4]
 2328 0008 3960     	 str r1,[r7]
 638:../4g_module/pb_encode.c **** #if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
 639:../4g_module/pb_encode.c ****     /* Fast path if we know that we're on little endian */
 640:../4g_module/pb_encode.c ****     return pb_write(stream, (const pb_byte_t*)value, 4);
 2329              	 .loc 1 640 0
 2330 000a 7868     	 ldr r0,[r7,#4]
 2331 000c 3968     	 ldr r1,[r7]
 2332 000e 0422     	 movs r2,#4
 2333 0010 FFF7FEFF 	 bl pb_write
 2334 0014 0346     	 mov r3,r0
 641:../4g_module/pb_encode.c **** #else
 642:../4g_module/pb_encode.c ****     uint32_t val = *(const uint32_t*)value;
 643:../4g_module/pb_encode.c ****     pb_byte_t bytes[4];
 644:../4g_module/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 645:../4g_module/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 646:../4g_module/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 647:../4g_module/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 648:../4g_module/pb_encode.c ****     return pb_write(stream, bytes, 4);
 649:../4g_module/pb_encode.c **** #endif
 650:../4g_module/pb_encode.c **** }
 2335              	 .loc 1 650 0
 2336 0016 1846     	 mov r0,r3
 2337 0018 0837     	 adds r7,r7,#8
 2338              	.LCFI90:
 2339              	 .cfi_def_cfa_offset 8
 2340 001a BD46     	 mov sp,r7
 2341              	.LCFI91:
 2342              	 .cfi_def_cfa_register 13
 2343              	 
 2344 001c 80BD     	 pop {r7,pc}
 2345              	 .cfi_endproc
 2346              	.LFE17:
 2348 001e 00BF     	 .section .text.pb_encode_fixed64,"ax",%progbits
 2349              	 .align 2
 2350              	 .global pb_encode_fixed64
 2351              	 .thumb
 2352              	 .thumb_func
 2354              	pb_encode_fixed64:
 2355              	.LFB18:
 651:../4g_module/pb_encode.c **** 
 652:../4g_module/pb_encode.c **** #ifndef PB_WITHOUT_64BIT
 653:../4g_module/pb_encode.c **** bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
 654:../4g_module/pb_encode.c **** {
 2356              	 .loc 1 654 0
 2357              	 .cfi_startproc
 2358              	 
 2359              	 
 2360 0000 80B5     	 push {r7,lr}
 2361              	.LCFI92:
 2362              	 .cfi_def_cfa_offset 8
 2363              	 .cfi_offset 7,-8
 2364              	 .cfi_offset 14,-4
 2365 0002 82B0     	 sub sp,sp,#8
 2366              	.LCFI93:
 2367              	 .cfi_def_cfa_offset 16
 2368 0004 00AF     	 add r7,sp,#0
 2369              	.LCFI94:
 2370              	 .cfi_def_cfa_register 7
 2371 0006 7860     	 str r0,[r7,#4]
 2372 0008 3960     	 str r1,[r7]
 655:../4g_module/pb_encode.c **** #if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
 656:../4g_module/pb_encode.c ****     /* Fast path if we know that we're on little endian */
 657:../4g_module/pb_encode.c ****     return pb_write(stream, (const pb_byte_t*)value, 8);
 2373              	 .loc 1 657 0
 2374 000a 7868     	 ldr r0,[r7,#4]
 2375 000c 3968     	 ldr r1,[r7]
 2376 000e 0822     	 movs r2,#8
 2377 0010 FFF7FEFF 	 bl pb_write
 2378 0014 0346     	 mov r3,r0
 658:../4g_module/pb_encode.c **** #else
 659:../4g_module/pb_encode.c ****     uint64_t val = *(const uint64_t*)value;
 660:../4g_module/pb_encode.c ****     pb_byte_t bytes[8];
 661:../4g_module/pb_encode.c ****     bytes[0] = (pb_byte_t)(val & 0xFF);
 662:../4g_module/pb_encode.c ****     bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
 663:../4g_module/pb_encode.c ****     bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
 664:../4g_module/pb_encode.c ****     bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
 665:../4g_module/pb_encode.c ****     bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 666:../4g_module/pb_encode.c ****     bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 667:../4g_module/pb_encode.c ****     bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 668:../4g_module/pb_encode.c ****     bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 669:../4g_module/pb_encode.c ****     return pb_write(stream, bytes, 8);
 670:../4g_module/pb_encode.c **** #endif
 671:../4g_module/pb_encode.c **** }
 2379              	 .loc 1 671 0
 2380 0016 1846     	 mov r0,r3
 2381 0018 0837     	 adds r7,r7,#8
 2382              	.LCFI95:
 2383              	 .cfi_def_cfa_offset 8
 2384 001a BD46     	 mov sp,r7
 2385              	.LCFI96:
 2386              	 .cfi_def_cfa_register 13
 2387              	 
 2388 001c 80BD     	 pop {r7,pc}
 2389              	 .cfi_endproc
 2390              	.LFE18:
 2392 001e 00BF     	 .section .text.pb_encode_tag,"ax",%progbits
 2393              	 .align 2
 2394              	 .global pb_encode_tag
 2395              	 .thumb
 2396              	 .thumb_func
 2398              	pb_encode_tag:
 2399              	.LFB19:
 672:../4g_module/pb_encode.c **** #endif
 673:../4g_module/pb_encode.c **** 
 674:../4g_module/pb_encode.c **** bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number
 675:../4g_module/pb_encode.c **** {
 2400              	 .loc 1 675 0
 2401              	 .cfi_startproc
 2402              	 
 2403              	 
 2404 0000 B0B5     	 push {r4,r5,r7,lr}
 2405              	.LCFI97:
 2406              	 .cfi_def_cfa_offset 16
 2407              	 .cfi_offset 4,-16
 2408              	 .cfi_offset 5,-12
 2409              	 .cfi_offset 7,-8
 2410              	 .cfi_offset 14,-4
 2411 0002 86B0     	 sub sp,sp,#24
 2412              	.LCFI98:
 2413              	 .cfi_def_cfa_offset 40
 2414 0004 00AF     	 add r7,sp,#0
 2415              	.LCFI99:
 2416              	 .cfi_def_cfa_register 7
 2417 0006 F860     	 str r0,[r7,#12]
 2418 0008 0B46     	 mov r3,r1
 2419 000a 7A60     	 str r2,[r7,#4]
 2420 000c FB72     	 strb r3,[r7,#11]
 676:../4g_module/pb_encode.c ****     pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 2421              	 .loc 1 676 0
 2422 000e 7B68     	 ldr r3,[r7,#4]
 2423 0010 1A46     	 mov r2,r3
 2424 0012 4FF00003 	 mov r3,#0
 2425 0016 DD00     	 lsls r5,r3,#3
 2426 0018 45EA5275 	 orr r5,r5,r2,lsr#29
 2427 001c D400     	 lsls r4,r2,#3
 2428 001e FA7A     	 ldrb r2,[r7,#11]
 2429 0020 4FF00003 	 mov r3,#0
 2430 0024 42EA0402 	 orr r2,r2,r4
 2431 0028 43EA0503 	 orr r3,r3,r5
 2432 002c C7E90423 	 strd r2,[r7,#16]
 677:../4g_module/pb_encode.c ****     return pb_encode_varint(stream, tag);
 2433              	 .loc 1 677 0
 2434 0030 F868     	 ldr r0,[r7,#12]
 2435 0032 D7E90423 	 ldrd r2,[r7,#16]
 2436 0036 FFF7FEFF 	 bl pb_encode_varint
 2437 003a 0346     	 mov r3,r0
 678:../4g_module/pb_encode.c **** }
 2438              	 .loc 1 678 0
 2439 003c 1846     	 mov r0,r3
 2440 003e 1837     	 adds r7,r7,#24
 2441              	.LCFI100:
 2442              	 .cfi_def_cfa_offset 16
 2443 0040 BD46     	 mov sp,r7
 2444              	.LCFI101:
 2445              	 .cfi_def_cfa_register 13
 2446              	 
 2447 0042 B0BD     	 pop {r4,r5,r7,pc}
 2448              	 .cfi_endproc
 2449              	.LFE19:
 2451              	 .section .text.pb_encode_tag_for_field,"ax",%progbits
 2452              	 .align 2
 2453              	 .global pb_encode_tag_for_field
 2454              	 .thumb
 2455              	 .thumb_func
 2457              	pb_encode_tag_for_field:
 2458              	.LFB20:
 679:../4g_module/pb_encode.c **** 
 680:../4g_module/pb_encode.c **** bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
 681:../4g_module/pb_encode.c **** {
 2459              	 .loc 1 681 0
 2460              	 .cfi_startproc
 2461              	 
 2462              	 
 2463 0000 80B5     	 push {r7,lr}
 2464              	.LCFI102:
 2465              	 .cfi_def_cfa_offset 8
 2466              	 .cfi_offset 7,-8
 2467              	 .cfi_offset 14,-4
 2468 0002 84B0     	 sub sp,sp,#16
 2469              	.LCFI103:
 2470              	 .cfi_def_cfa_offset 24
 2471 0004 00AF     	 add r7,sp,#0
 2472              	.LCFI104:
 2473              	 .cfi_def_cfa_register 7
 2474 0006 7860     	 str r0,[r7,#4]
 2475 0008 3960     	 str r1,[r7]
 682:../4g_module/pb_encode.c ****     pb_wire_type_t wiretype;
 683:../4g_module/pb_encode.c ****     switch (PB_LTYPE(field->type))
 2476              	 .loc 1 683 0
 2477 000a 3B68     	 ldr r3,[r7]
 2478 000c 9B7D     	 ldrb r3,[r3,#22]
 2479 000e 03F00F03 	 and r3,r3,#15
 2480 0012 0B2B     	 cmp r3,#11
 2481 0014 26D8     	 bhi .L178
 2482 0016 01A2     	 adr r2,.L180
 2483 0018 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 2484              	 .p2align 2
 2485              	.L180:
 2486 001c 4D000000 	 .word .L179+1
 2487 0020 4D000000 	 .word .L179+1
 2488 0024 4D000000 	 .word .L179+1
 2489 0028 4D000000 	 .word .L179+1
 2490 002c 53000000 	 .word .L181+1
 2491 0030 59000000 	 .word .L182+1
 2492 0034 5F000000 	 .word .L183+1
 2493 0038 5F000000 	 .word .L183+1
 2494 003c 5F000000 	 .word .L183+1
 2495 0040 5F000000 	 .word .L183+1
 2496 0044 65000000 	 .word .L178+1
 2497 0048 5F000000 	 .word .L183+1
 2498              	 .p2align 1
 2499              	.L179:
 684:../4g_module/pb_encode.c ****     {
 685:../4g_module/pb_encode.c ****         case PB_LTYPE_BOOL:
 686:../4g_module/pb_encode.c ****         case PB_LTYPE_VARINT:
 687:../4g_module/pb_encode.c ****         case PB_LTYPE_UVARINT:
 688:../4g_module/pb_encode.c ****         case PB_LTYPE_SVARINT:
 689:../4g_module/pb_encode.c ****             wiretype = PB_WT_VARINT;
 2500              	 .loc 1 689 0
 2501 004c 0023     	 movs r3,#0
 2502 004e FB73     	 strb r3,[r7,#15]
 690:../4g_module/pb_encode.c ****             break;
 2503              	 .loc 1 690 0
 2504 0050 14E0     	 b .L184
 2505              	.L181:
 691:../4g_module/pb_encode.c ****         
 692:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED32:
 693:../4g_module/pb_encode.c ****             wiretype = PB_WT_32BIT;
 2506              	 .loc 1 693 0
 2507 0052 0523     	 movs r3,#5
 2508 0054 FB73     	 strb r3,[r7,#15]
 694:../4g_module/pb_encode.c ****             break;
 2509              	 .loc 1 694 0
 2510 0056 11E0     	 b .L184
 2511              	.L182:
 695:../4g_module/pb_encode.c ****         
 696:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED64:
 697:../4g_module/pb_encode.c ****             wiretype = PB_WT_64BIT;
 2512              	 .loc 1 697 0
 2513 0058 0123     	 movs r3,#1
 2514 005a FB73     	 strb r3,[r7,#15]
 698:../4g_module/pb_encode.c ****             break;
 2515              	 .loc 1 698 0
 2516 005c 0EE0     	 b .L184
 2517              	.L183:
 699:../4g_module/pb_encode.c ****         
 700:../4g_module/pb_encode.c ****         case PB_LTYPE_BYTES:
 701:../4g_module/pb_encode.c ****         case PB_LTYPE_STRING:
 702:../4g_module/pb_encode.c ****         case PB_LTYPE_SUBMESSAGE:
 703:../4g_module/pb_encode.c ****         case PB_LTYPE_SUBMSG_W_CB:
 704:../4g_module/pb_encode.c ****         case PB_LTYPE_FIXED_LENGTH_BYTES:
 705:../4g_module/pb_encode.c ****             wiretype = PB_WT_STRING;
 2518              	 .loc 1 705 0
 2519 005e 0223     	 movs r3,#2
 2520 0060 FB73     	 strb r3,[r7,#15]
 706:../4g_module/pb_encode.c ****             break;
 2521              	 .loc 1 706 0
 2522 0062 0BE0     	 b .L184
 2523              	.L178:
 707:../4g_module/pb_encode.c ****         
 708:../4g_module/pb_encode.c ****         default:
 709:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid field type");
 2524              	 .loc 1 709 0
 2525 0064 7B68     	 ldr r3,[r7,#4]
 2526 0066 1B69     	 ldr r3,[r3,#16]
 2527 0068 002B     	 cmp r3,#0
 2528 006a 02D0     	 beq .L185
 2529              	 .loc 1 709 0 is_stmt 0 discriminator 1
 2530 006c 7B68     	 ldr r3,[r7,#4]
 2531 006e 1B69     	 ldr r3,[r3,#16]
 2532 0070 00E0     	 b .L186
 2533              	.L185:
 2534              	 .loc 1 709 0 discriminator 2
 2535 0072 094B     	 ldr r3,.L188
 2536              	.L186:
 2537              	 .loc 1 709 0 discriminator 4
 2538 0074 7A68     	 ldr r2,[r7,#4]
 2539 0076 1361     	 str r3,[r2,#16]
 2540 0078 0023     	 movs r3,#0
 2541 007a 08E0     	 b .L187
 2542              	.L184:
 710:../4g_module/pb_encode.c ****     }
 711:../4g_module/pb_encode.c ****     
 712:../4g_module/pb_encode.c ****     return pb_encode_tag(stream, wiretype, field->tag);
 2543              	 .loc 1 712 0 is_stmt 1
 2544 007c 3B68     	 ldr r3,[r7]
 2545 007e 1B8A     	 ldrh r3,[r3,#16]
 2546 0080 1A46     	 mov r2,r3
 2547 0082 FB7B     	 ldrb r3,[r7,#15]
 2548 0084 7868     	 ldr r0,[r7,#4]
 2549 0086 1946     	 mov r1,r3
 2550 0088 FFF7FEFF 	 bl pb_encode_tag
 2551 008c 0346     	 mov r3,r0
 2552              	.L187:
 713:../4g_module/pb_encode.c **** }
 2553              	 .loc 1 713 0
 2554 008e 1846     	 mov r0,r3
 2555 0090 1037     	 adds r7,r7,#16
 2556              	.LCFI105:
 2557              	 .cfi_def_cfa_offset 8
 2558 0092 BD46     	 mov sp,r7
 2559              	.LCFI106:
 2560              	 .cfi_def_cfa_register 13
 2561              	 
 2562 0094 80BD     	 pop {r7,pc}
 2563              	.L189:
 2564 0096 00BF     	 .align 2
 2565              	.L188:
 2566 0098 38000000 	 .word .LC4
 2567              	 .cfi_endproc
 2568              	.LFE20:
 2570              	 .section .text.pb_encode_string,"ax",%progbits
 2571              	 .align 2
 2572              	 .global pb_encode_string
 2573              	 .thumb
 2574              	 .thumb_func
 2576              	pb_encode_string:
 2577              	.LFB21:
 714:../4g_module/pb_encode.c **** 
 715:../4g_module/pb_encode.c **** bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
 716:../4g_module/pb_encode.c **** {
 2578              	 .loc 1 716 0
 2579              	 .cfi_startproc
 2580              	 
 2581              	 
 2582 0000 80B5     	 push {r7,lr}
 2583              	.LCFI107:
 2584              	 .cfi_def_cfa_offset 8
 2585              	 .cfi_offset 7,-8
 2586              	 .cfi_offset 14,-4
 2587 0002 84B0     	 sub sp,sp,#16
 2588              	.LCFI108:
 2589              	 .cfi_def_cfa_offset 24
 2590 0004 00AF     	 add r7,sp,#0
 2591              	.LCFI109:
 2592              	 .cfi_def_cfa_register 7
 2593 0006 F860     	 str r0,[r7,#12]
 2594 0008 B960     	 str r1,[r7,#8]
 2595 000a 7A60     	 str r2,[r7,#4]
 717:../4g_module/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 2596              	 .loc 1 717 0
 2597 000c 7B68     	 ldr r3,[r7,#4]
 2598 000e 1A46     	 mov r2,r3
 2599 0010 4FF00003 	 mov r3,#0
 2600 0014 F868     	 ldr r0,[r7,#12]
 2601 0016 FFF7FEFF 	 bl pb_encode_varint
 2602 001a 0346     	 mov r3,r0
 2603 001c 83F00103 	 eor r3,r3,#1
 2604 0020 DBB2     	 uxtb r3,r3
 2605 0022 002B     	 cmp r3,#0
 2606 0024 01D0     	 beq .L191
 718:../4g_module/pb_encode.c ****         return false;
 2607              	 .loc 1 718 0
 2608 0026 0023     	 movs r3,#0
 2609 0028 05E0     	 b .L192
 2610              	.L191:
 719:../4g_module/pb_encode.c ****     
 720:../4g_module/pb_encode.c ****     return pb_write(stream, buffer, size);
 2611              	 .loc 1 720 0
 2612 002a F868     	 ldr r0,[r7,#12]
 2613 002c B968     	 ldr r1,[r7,#8]
 2614 002e 7A68     	 ldr r2,[r7,#4]
 2615 0030 FFF7FEFF 	 bl pb_write
 2616 0034 0346     	 mov r3,r0
 2617              	.L192:
 721:../4g_module/pb_encode.c **** }
 2618              	 .loc 1 721 0
 2619 0036 1846     	 mov r0,r3
 2620 0038 1037     	 adds r7,r7,#16
 2621              	.LCFI110:
 2622              	 .cfi_def_cfa_offset 8
 2623 003a BD46     	 mov sp,r7
 2624              	.LCFI111:
 2625              	 .cfi_def_cfa_register 13
 2626              	 
 2627 003c 80BD     	 pop {r7,pc}
 2628              	 .cfi_endproc
 2629              	.LFE21:
 2631 003e 00BF     	 .section .rodata
 2632 0086 0000     	 .align 2
 2633              	.LC8:
 2634 0088 7375626D 	 .ascii "submsg size changed\000"
 2634      73672073 
 2634      697A6520 
 2634      6368616E 
 2634      67656400 
 2635              	 .section .text.pb_encode_submessage,"ax",%progbits
 2636              	 .align 2
 2637              	 .global pb_encode_submessage
 2638              	 .thumb
 2639              	 .thumb_func
 2641              	pb_encode_submessage:
 2642              	.LFB22:
 722:../4g_module/pb_encode.c **** 
 723:../4g_module/pb_encode.c **** bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void 
 724:../4g_module/pb_encode.c **** {
 2643              	 .loc 1 724 0
 2644              	 .cfi_startproc
 2645              	 
 2646              	 
 2647 0000 80B5     	 push {r7,lr}
 2648              	.LCFI112:
 2649              	 .cfi_def_cfa_offset 8
 2650              	 .cfi_offset 7,-8
 2651              	 .cfi_offset 14,-4
 2652 0002 8CB0     	 sub sp,sp,#48
 2653              	.LCFI113:
 2654              	 .cfi_def_cfa_offset 56
 2655 0004 00AF     	 add r7,sp,#0
 2656              	.LCFI114:
 2657              	 .cfi_def_cfa_register 7
 2658 0006 F860     	 str r0,[r7,#12]
 2659 0008 B960     	 str r1,[r7,#8]
 2660 000a 7A60     	 str r2,[r7,#4]
 725:../4g_module/pb_encode.c ****     /* First calculate the message size using a non-writing substream. */
 726:../4g_module/pb_encode.c ****     pb_ostream_t substream = PB_OSTREAM_SIZING;
 2661              	 .loc 1 726 0
 2662 000c 0023     	 movs r3,#0
 2663 000e 7B61     	 str r3,[r7,#20]
 2664 0010 0023     	 movs r3,#0
 2665 0012 BB61     	 str r3,[r7,#24]
 2666 0014 0023     	 movs r3,#0
 2667 0016 FB61     	 str r3,[r7,#28]
 2668 0018 0023     	 movs r3,#0
 2669 001a 3B62     	 str r3,[r7,#32]
 2670 001c 0023     	 movs r3,#0
 2671 001e 7B62     	 str r3,[r7,#36]
 727:../4g_module/pb_encode.c ****     size_t size;
 728:../4g_module/pb_encode.c ****     bool status;
 729:../4g_module/pb_encode.c ****     
 730:../4g_module/pb_encode.c ****     if (!pb_encode(&substream, fields, src_struct))
 2672              	 .loc 1 730 0
 2673 0020 07F11403 	 add r3,r7,#20
 2674 0024 1846     	 mov r0,r3
 2675 0026 B968     	 ldr r1,[r7,#8]
 2676 0028 7A68     	 ldr r2,[r7,#4]
 2677 002a FFF7FEFF 	 bl pb_encode
 2678 002e 0346     	 mov r3,r0
 2679 0030 83F00103 	 eor r3,r3,#1
 2680 0034 DBB2     	 uxtb r3,r3
 2681 0036 002B     	 cmp r3,#0
 2682 0038 04D0     	 beq .L194
 731:../4g_module/pb_encode.c ****     {
 732:../4g_module/pb_encode.c **** #ifndef PB_NO_ERRMSG
 733:../4g_module/pb_encode.c ****         stream->errmsg = substream.errmsg;
 2683              	 .loc 1 733 0
 2684 003a 7A6A     	 ldr r2,[r7,#36]
 2685 003c FB68     	 ldr r3,[r7,#12]
 2686 003e 1A61     	 str r2,[r3,#16]
 734:../4g_module/pb_encode.c **** #endif
 735:../4g_module/pb_encode.c ****         return false;
 2687              	 .loc 1 735 0
 2688 0040 0023     	 movs r3,#0
 2689 0042 63E0     	 b .L204
 2690              	.L194:
 736:../4g_module/pb_encode.c ****     }
 737:../4g_module/pb_encode.c ****     
 738:../4g_module/pb_encode.c ****     size = substream.bytes_written;
 2691              	 .loc 1 738 0
 2692 0044 3B6A     	 ldr r3,[r7,#32]
 2693 0046 FB62     	 str r3,[r7,#44]
 739:../4g_module/pb_encode.c ****     
 740:../4g_module/pb_encode.c ****     if (!pb_encode_varint(stream, (pb_uint64_t)size))
 2694              	 .loc 1 740 0
 2695 0048 FB6A     	 ldr r3,[r7,#44]
 2696 004a 1A46     	 mov r2,r3
 2697 004c 4FF00003 	 mov r3,#0
 2698 0050 F868     	 ldr r0,[r7,#12]
 2699 0052 FFF7FEFF 	 bl pb_encode_varint
 2700 0056 0346     	 mov r3,r0
 2701 0058 83F00103 	 eor r3,r3,#1
 2702 005c DBB2     	 uxtb r3,r3
 2703 005e 002B     	 cmp r3,#0
 2704 0060 01D0     	 beq .L196
 741:../4g_module/pb_encode.c ****         return false;
 2705              	 .loc 1 741 0
 2706 0062 0023     	 movs r3,#0
 2707 0064 52E0     	 b .L204
 2708              	.L196:
 742:../4g_module/pb_encode.c ****     
 743:../4g_module/pb_encode.c ****     if (stream->callback == NULL)
 2709              	 .loc 1 743 0
 2710 0066 FB68     	 ldr r3,[r7,#12]
 2711 0068 1B68     	 ldr r3,[r3]
 2712 006a 002B     	 cmp r3,#0
 2713 006c 06D1     	 bne .L197
 744:../4g_module/pb_encode.c ****         return pb_write(stream, NULL, size); /* Just sizing */
 2714              	 .loc 1 744 0
 2715 006e F868     	 ldr r0,[r7,#12]
 2716 0070 0021     	 movs r1,#0
 2717 0072 FA6A     	 ldr r2,[r7,#44]
 2718 0074 FFF7FEFF 	 bl pb_write
 2719 0078 0346     	 mov r3,r0
 2720 007a 47E0     	 b .L204
 2721              	.L197:
 745:../4g_module/pb_encode.c ****     
 746:../4g_module/pb_encode.c ****     if (stream->bytes_written + size > stream->max_size)
 2722              	 .loc 1 746 0
 2723 007c FB68     	 ldr r3,[r7,#12]
 2724 007e DA68     	 ldr r2,[r3,#12]
 2725 0080 FB6A     	 ldr r3,[r7,#44]
 2726 0082 1A44     	 add r2,r2,r3
 2727 0084 FB68     	 ldr r3,[r7,#12]
 2728 0086 9B68     	 ldr r3,[r3,#8]
 2729 0088 9A42     	 cmp r2,r3
 2730 008a 0BD9     	 bls .L198
 747:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "stream full");
 2731              	 .loc 1 747 0
 2732 008c FB68     	 ldr r3,[r7,#12]
 2733 008e 1B69     	 ldr r3,[r3,#16]
 2734 0090 002B     	 cmp r3,#0
 2735 0092 02D0     	 beq .L199
 2736              	 .loc 1 747 0 is_stmt 0 discriminator 1
 2737 0094 FB68     	 ldr r3,[r7,#12]
 2738 0096 1B69     	 ldr r3,[r3,#16]
 2739 0098 00E0     	 b .L200
 2740              	.L199:
 2741              	 .loc 1 747 0 discriminator 2
 2742 009a 1E4B     	 ldr r3,.L205
 2743              	.L200:
 2744              	 .loc 1 747 0 discriminator 4
 2745 009c FA68     	 ldr r2,[r7,#12]
 2746 009e 1361     	 str r3,[r2,#16]
 2747 00a0 0023     	 movs r3,#0
 2748 00a2 33E0     	 b .L204
 2749              	.L198:
 748:../4g_module/pb_encode.c ****         
 749:../4g_module/pb_encode.c ****     /* Use a substream to verify that a callback doesn't write more than
 750:../4g_module/pb_encode.c ****      * what it did the first time. */
 751:../4g_module/pb_encode.c ****     substream.callback = stream->callback;
 2750              	 .loc 1 751 0 is_stmt 1
 2751 00a4 FB68     	 ldr r3,[r7,#12]
 2752 00a6 1B68     	 ldr r3,[r3]
 2753 00a8 7B61     	 str r3,[r7,#20]
 752:../4g_module/pb_encode.c ****     substream.state = stream->state;
 2754              	 .loc 1 752 0
 2755 00aa FB68     	 ldr r3,[r7,#12]
 2756 00ac 5B68     	 ldr r3,[r3,#4]
 2757 00ae BB61     	 str r3,[r7,#24]
 753:../4g_module/pb_encode.c ****     substream.max_size = size;
 2758              	 .loc 1 753 0
 2759 00b0 FB6A     	 ldr r3,[r7,#44]
 2760 00b2 FB61     	 str r3,[r7,#28]
 754:../4g_module/pb_encode.c ****     substream.bytes_written = 0;
 2761              	 .loc 1 754 0
 2762 00b4 0023     	 movs r3,#0
 2763 00b6 3B62     	 str r3,[r7,#32]
 755:../4g_module/pb_encode.c **** #ifndef PB_NO_ERRMSG
 756:../4g_module/pb_encode.c ****     substream.errmsg = NULL;
 2764              	 .loc 1 756 0
 2765 00b8 0023     	 movs r3,#0
 2766 00ba 7B62     	 str r3,[r7,#36]
 757:../4g_module/pb_encode.c **** #endif
 758:../4g_module/pb_encode.c ****     
 759:../4g_module/pb_encode.c ****     status = pb_encode(&substream, fields, src_struct);
 2767              	 .loc 1 759 0
 2768 00bc 07F11403 	 add r3,r7,#20
 2769 00c0 1846     	 mov r0,r3
 2770 00c2 B968     	 ldr r1,[r7,#8]
 2771 00c4 7A68     	 ldr r2,[r7,#4]
 2772 00c6 FFF7FEFF 	 bl pb_encode
 2773 00ca 0346     	 mov r3,r0
 2774 00cc 87F82B30 	 strb r3,[r7,#43]
 760:../4g_module/pb_encode.c ****     
 761:../4g_module/pb_encode.c ****     stream->bytes_written += substream.bytes_written;
 2775              	 .loc 1 761 0
 2776 00d0 FB68     	 ldr r3,[r7,#12]
 2777 00d2 DA68     	 ldr r2,[r3,#12]
 2778 00d4 3B6A     	 ldr r3,[r7,#32]
 2779 00d6 1A44     	 add r2,r2,r3
 2780 00d8 FB68     	 ldr r3,[r7,#12]
 2781 00da DA60     	 str r2,[r3,#12]
 762:../4g_module/pb_encode.c ****     stream->state = substream.state;
 2782              	 .loc 1 762 0
 2783 00dc BA69     	 ldr r2,[r7,#24]
 2784 00de FB68     	 ldr r3,[r7,#12]
 2785 00e0 5A60     	 str r2,[r3,#4]
 763:../4g_module/pb_encode.c **** #ifndef PB_NO_ERRMSG
 764:../4g_module/pb_encode.c ****     stream->errmsg = substream.errmsg;
 2786              	 .loc 1 764 0
 2787 00e2 7A6A     	 ldr r2,[r7,#36]
 2788 00e4 FB68     	 ldr r3,[r7,#12]
 2789 00e6 1A61     	 str r2,[r3,#16]
 765:../4g_module/pb_encode.c **** #endif
 766:../4g_module/pb_encode.c ****     
 767:../4g_module/pb_encode.c ****     if (substream.bytes_written != size)
 2790              	 .loc 1 767 0
 2791 00e8 3A6A     	 ldr r2,[r7,#32]
 2792 00ea FB6A     	 ldr r3,[r7,#44]
 2793 00ec 9A42     	 cmp r2,r3
 2794 00ee 0BD0     	 beq .L201
 768:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "submsg size changed");
 2795              	 .loc 1 768 0
 2796 00f0 FB68     	 ldr r3,[r7,#12]
 2797 00f2 1B69     	 ldr r3,[r3,#16]
 2798 00f4 002B     	 cmp r3,#0
 2799 00f6 02D0     	 beq .L202
 2800              	 .loc 1 768 0 is_stmt 0 discriminator 1
 2801 00f8 FB68     	 ldr r3,[r7,#12]
 2802 00fa 1B69     	 ldr r3,[r3,#16]
 2803 00fc 00E0     	 b .L203
 2804              	.L202:
 2805              	 .loc 1 768 0 discriminator 2
 2806 00fe 064B     	 ldr r3,.L205+4
 2807              	.L203:
 2808              	 .loc 1 768 0 discriminator 4
 2809 0100 FA68     	 ldr r2,[r7,#12]
 2810 0102 1361     	 str r3,[r2,#16]
 2811 0104 0023     	 movs r3,#0
 2812 0106 01E0     	 b .L204
 2813              	.L201:
 769:../4g_module/pb_encode.c ****     
 770:../4g_module/pb_encode.c ****     return status;
 2814              	 .loc 1 770 0 is_stmt 1
 2815 0108 97F82B30 	 ldrb r3,[r7,#43]
 2816              	.L204:
 771:../4g_module/pb_encode.c **** }
 2817              	 .loc 1 771 0 discriminator 1
 2818 010c 1846     	 mov r0,r3
 2819 010e 3037     	 adds r7,r7,#48
 2820              	.LCFI115:
 2821              	 .cfi_def_cfa_offset 8
 2822 0110 BD46     	 mov sp,r7
 2823              	.LCFI116:
 2824              	 .cfi_def_cfa_register 13
 2825              	 
 2826 0112 80BD     	 pop {r7,pc}
 2827              	.L206:
 2828              	 .align 2
 2829              	.L205:
 2830 0114 00000000 	 .word .LC0
 2831 0118 88000000 	 .word .LC8
 2832              	 .cfi_endproc
 2833              	.LFE22:
 2835              	 .section .text.pb_enc_bool,"ax",%progbits
 2836              	 .align 2
 2837              	 .thumb
 2838              	 .thumb_func
 2840              	pb_enc_bool:
 2841              	.LFB23:
 772:../4g_module/pb_encode.c **** 
 773:../4g_module/pb_encode.c **** /* Field encoders */
 774:../4g_module/pb_encode.c **** 
 775:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
 776:../4g_module/pb_encode.c **** {
 2842              	 .loc 1 776 0
 2843              	 .cfi_startproc
 2844              	 
 2845              	 
 2846 0000 80B5     	 push {r7,lr}
 2847              	.LCFI117:
 2848              	 .cfi_def_cfa_offset 8
 2849              	 .cfi_offset 7,-8
 2850              	 .cfi_offset 14,-4
 2851 0002 84B0     	 sub sp,sp,#16
 2852              	.LCFI118:
 2853              	 .cfi_def_cfa_offset 24
 2854 0004 00AF     	 add r7,sp,#0
 2855              	.LCFI119:
 2856              	 .cfi_def_cfa_register 7
 2857 0006 7860     	 str r0,[r7,#4]
 2858 0008 3960     	 str r1,[r7]
 777:../4g_module/pb_encode.c ****     uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 2859              	 .loc 1 777 0
 2860 000a 3B68     	 ldr r3,[r7]
 2861 000c DB69     	 ldr r3,[r3,#28]
 2862 000e 1846     	 mov r0,r3
 2863 0010 FFF7FEFF 	 bl safe_read_bool
 2864 0014 0346     	 mov r3,r0
 2865 0016 FB60     	 str r3,[r7,#12]
 778:../4g_module/pb_encode.c ****     PB_UNUSED(field);
 779:../4g_module/pb_encode.c ****     return pb_encode_varint(stream, value);
 2866              	 .loc 1 779 0
 2867 0018 FB68     	 ldr r3,[r7,#12]
 2868 001a 1A46     	 mov r2,r3
 2869 001c 4FF00003 	 mov r3,#0
 2870 0020 7868     	 ldr r0,[r7,#4]
 2871 0022 FFF7FEFF 	 bl pb_encode_varint
 2872 0026 0346     	 mov r3,r0
 780:../4g_module/pb_encode.c **** }
 2873              	 .loc 1 780 0
 2874 0028 1846     	 mov r0,r3
 2875 002a 1037     	 adds r7,r7,#16
 2876              	.LCFI120:
 2877              	 .cfi_def_cfa_offset 8
 2878 002c BD46     	 mov sp,r7
 2879              	.LCFI121:
 2880              	 .cfi_def_cfa_register 13
 2881              	 
 2882 002e 80BD     	 pop {r7,pc}
 2883              	 .cfi_endproc
 2884              	.LFE23:
 2886              	 .section .rodata
 2887              	 .align 2
 2888              	.LC9:
 2889 009c 696E7661 	 .ascii "invalid data_size\000"
 2889      6C696420 
 2889      64617461 
 2889      5F73697A 
 2889      6500
 2890              	 .section .text.pb_enc_varint,"ax",%progbits
 2891              	 .align 2
 2892              	 .thumb
 2893              	 .thumb_func
 2895              	pb_enc_varint:
 2896              	.LFB24:
 781:../4g_module/pb_encode.c **** 
 782:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
 783:../4g_module/pb_encode.c **** {
 2897              	 .loc 1 783 0
 2898              	 .cfi_startproc
 2899              	 
 2900              	 
 2901 0000 80B5     	 push {r7,lr}
 2902              	.LCFI122:
 2903              	 .cfi_def_cfa_offset 8
 2904              	 .cfi_offset 7,-8
 2905              	 .cfi_offset 14,-4
 2906 0002 86B0     	 sub sp,sp,#24
 2907              	.LCFI123:
 2908              	 .cfi_def_cfa_offset 32
 2909 0004 00AF     	 add r7,sp,#0
 2910              	.LCFI124:
 2911              	 .cfi_def_cfa_register 7
 2912 0006 7860     	 str r0,[r7,#4]
 2913 0008 3960     	 str r1,[r7]
 784:../4g_module/pb_encode.c ****     if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 2914              	 .loc 1 784 0
 2915 000a 3B68     	 ldr r3,[r7]
 2916 000c 9B7D     	 ldrb r3,[r3,#22]
 2917 000e 03F00F03 	 and r3,r3,#15
 2918 0012 022B     	 cmp r3,#2
 2919 0014 4AD1     	 bne .L210
 2920              	.LBB12:
 785:../4g_module/pb_encode.c ****     {
 786:../4g_module/pb_encode.c ****         /* Perform unsigned integer extension */
 787:../4g_module/pb_encode.c ****         pb_uint64_t value = 0;
 2921              	 .loc 1 787 0
 2922 0016 4FF00002 	 mov r2,#0
 2923 001a 4FF00003 	 mov r3,#0
 2924 001e C7E90423 	 strd r2,[r7,#16]
 788:../4g_module/pb_encode.c **** 
 789:../4g_module/pb_encode.c ****         if (field->data_size == sizeof(uint_least8_t))
 2925              	 .loc 1 789 0
 2926 0022 3B68     	 ldr r3,[r7]
 2927 0024 5B8A     	 ldrh r3,[r3,#18]
 2928 0026 012B     	 cmp r3,#1
 2929 0028 08D1     	 bne .L211
 790:../4g_module/pb_encode.c ****             value = *(const uint_least8_t*)field->pData;
 2930              	 .loc 1 790 0
 2931 002a 3B68     	 ldr r3,[r7]
 2932 002c DB69     	 ldr r3,[r3,#28]
 2933 002e 1B78     	 ldrb r3,[r3]
 2934 0030 DAB2     	 uxtb r2,r3
 2935 0032 4FF00003 	 mov r3,#0
 2936 0036 C7E90423 	 strd r2,[r7,#16]
 2937 003a 30E0     	 b .L212
 2938              	.L211:
 791:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(uint_least16_t))
 2939              	 .loc 1 791 0
 2940 003c 3B68     	 ldr r3,[r7]
 2941 003e 5B8A     	 ldrh r3,[r3,#18]
 2942 0040 022B     	 cmp r3,#2
 2943 0042 08D1     	 bne .L213
 792:../4g_module/pb_encode.c ****             value = *(const uint_least16_t*)field->pData;
 2944              	 .loc 1 792 0
 2945 0044 3B68     	 ldr r3,[r7]
 2946 0046 DB69     	 ldr r3,[r3,#28]
 2947 0048 1B88     	 ldrh r3,[r3]
 2948 004a 9AB2     	 uxth r2,r3
 2949 004c 4FF00003 	 mov r3,#0
 2950 0050 C7E90423 	 strd r2,[r7,#16]
 2951 0054 23E0     	 b .L212
 2952              	.L213:
 793:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(uint32_t))
 2953              	 .loc 1 793 0
 2954 0056 3B68     	 ldr r3,[r7]
 2955 0058 5B8A     	 ldrh r3,[r3,#18]
 2956 005a 042B     	 cmp r3,#4
 2957 005c 08D1     	 bne .L214
 794:../4g_module/pb_encode.c ****             value = *(const uint32_t*)field->pData;
 2958              	 .loc 1 794 0
 2959 005e 3B68     	 ldr r3,[r7]
 2960 0060 DB69     	 ldr r3,[r3,#28]
 2961 0062 1B68     	 ldr r3,[r3]
 2962 0064 1A46     	 mov r2,r3
 2963 0066 4FF00003 	 mov r3,#0
 2964 006a C7E90423 	 strd r2,[r7,#16]
 2965 006e 16E0     	 b .L212
 2966              	.L214:
 795:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(pb_uint64_t))
 2967              	 .loc 1 795 0
 2968 0070 3B68     	 ldr r3,[r7]
 2969 0072 5B8A     	 ldrh r3,[r3,#18]
 2970 0074 082B     	 cmp r3,#8
 2971 0076 06D1     	 bne .L215
 796:../4g_module/pb_encode.c ****             value = *(const pb_uint64_t*)field->pData;
 2972              	 .loc 1 796 0
 2973 0078 3B68     	 ldr r3,[r7]
 2974 007a DB69     	 ldr r3,[r3,#28]
 2975 007c D3E90023 	 ldrd r2,[r3]
 2976 0080 C7E90423 	 strd r2,[r7,#16]
 2977 0084 0BE0     	 b .L212
 2978              	.L215:
 797:../4g_module/pb_encode.c ****         else
 798:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid data_size");
 2979              	 .loc 1 798 0
 2980 0086 7B68     	 ldr r3,[r7,#4]
 2981 0088 1B69     	 ldr r3,[r3,#16]
 2982 008a 002B     	 cmp r3,#0
 2983 008c 02D0     	 beq .L216
 2984              	 .loc 1 798 0 is_stmt 0 discriminator 1
 2985 008e 7B68     	 ldr r3,[r7,#4]
 2986 0090 1B69     	 ldr r3,[r3,#16]
 2987 0092 00E0     	 b .L217
 2988              	.L216:
 2989              	 .loc 1 798 0 discriminator 2
 2990 0094 334B     	 ldr r3,.L227
 2991              	.L217:
 2992              	 .loc 1 798 0 discriminator 4
 2993 0096 7A68     	 ldr r2,[r7,#4]
 2994 0098 1361     	 str r3,[r2,#16]
 2995 009a 0023     	 movs r3,#0
 2996 009c 5DE0     	 b .L218
 2997              	.L212:
 799:../4g_module/pb_encode.c **** 
 800:../4g_module/pb_encode.c ****         return pb_encode_varint(stream, value);
 2998              	 .loc 1 800 0 is_stmt 1
 2999 009e 7868     	 ldr r0,[r7,#4]
 3000 00a0 D7E90423 	 ldrd r2,[r7,#16]
 3001 00a4 FFF7FEFF 	 bl pb_encode_varint
 3002 00a8 0346     	 mov r3,r0
 3003 00aa 56E0     	 b .L218
 3004              	.L210:
 3005              	.LBE12:
 3006              	.LBB13:
 801:../4g_module/pb_encode.c ****     }
 802:../4g_module/pb_encode.c ****     else
 803:../4g_module/pb_encode.c ****     {
 804:../4g_module/pb_encode.c ****         /* Perform signed integer extension */
 805:../4g_module/pb_encode.c ****         pb_int64_t value = 0;
 3007              	 .loc 1 805 0
 3008 00ac 4FF00002 	 mov r2,#0
 3009 00b0 4FF00003 	 mov r3,#0
 3010 00b4 C7E90223 	 strd r2,[r7,#8]
 806:../4g_module/pb_encode.c **** 
 807:../4g_module/pb_encode.c ****         if (field->data_size == sizeof(int_least8_t))
 3011              	 .loc 1 807 0
 3012 00b8 3B68     	 ldr r3,[r7]
 3013 00ba 5B8A     	 ldrh r3,[r3,#18]
 3014 00bc 012B     	 cmp r3,#1
 3015 00be 08D1     	 bne .L219
 808:../4g_module/pb_encode.c ****             value = *(const int_least8_t*)field->pData;
 3016              	 .loc 1 808 0
 3017 00c0 3B68     	 ldr r3,[r7]
 3018 00c2 DB69     	 ldr r3,[r3,#28]
 3019 00c4 1B78     	 ldrb r3,[r3]
 3020 00c6 5AB2     	 sxtb r2,r3
 3021 00c8 4FEAE273 	 asr r3,r2,#31
 3022 00cc C7E90223 	 strd r2,[r7,#8]
 3023 00d0 30E0     	 b .L220
 3024              	.L219:
 809:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(int_least16_t))
 3025              	 .loc 1 809 0
 3026 00d2 3B68     	 ldr r3,[r7]
 3027 00d4 5B8A     	 ldrh r3,[r3,#18]
 3028 00d6 022B     	 cmp r3,#2
 3029 00d8 08D1     	 bne .L221
 810:../4g_module/pb_encode.c ****             value = *(const int_least16_t*)field->pData;
 3030              	 .loc 1 810 0
 3031 00da 3B68     	 ldr r3,[r7]
 3032 00dc DB69     	 ldr r3,[r3,#28]
 3033 00de 1B88     	 ldrh r3,[r3]
 3034 00e0 1AB2     	 sxth r2,r3
 3035 00e2 4FEAE273 	 asr r3,r2,#31
 3036 00e6 C7E90223 	 strd r2,[r7,#8]
 3037 00ea 23E0     	 b .L220
 3038              	.L221:
 811:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(int32_t))
 3039              	 .loc 1 811 0
 3040 00ec 3B68     	 ldr r3,[r7]
 3041 00ee 5B8A     	 ldrh r3,[r3,#18]
 3042 00f0 042B     	 cmp r3,#4
 3043 00f2 08D1     	 bne .L222
 812:../4g_module/pb_encode.c ****             value = *(const int32_t*)field->pData;
 3044              	 .loc 1 812 0
 3045 00f4 3B68     	 ldr r3,[r7]
 3046 00f6 DB69     	 ldr r3,[r3,#28]
 3047 00f8 1B68     	 ldr r3,[r3]
 3048 00fa 1A46     	 mov r2,r3
 3049 00fc 4FEAE273 	 asr r3,r2,#31
 3050 0100 C7E90223 	 strd r2,[r7,#8]
 3051 0104 16E0     	 b .L220
 3052              	.L222:
 813:../4g_module/pb_encode.c ****         else if (field->data_size == sizeof(pb_int64_t))
 3053              	 .loc 1 813 0
 3054 0106 3B68     	 ldr r3,[r7]
 3055 0108 5B8A     	 ldrh r3,[r3,#18]
 3056 010a 082B     	 cmp r3,#8
 3057 010c 06D1     	 bne .L223
 814:../4g_module/pb_encode.c ****             value = *(const pb_int64_t*)field->pData;
 3058              	 .loc 1 814 0
 3059 010e 3B68     	 ldr r3,[r7]
 3060 0110 DB69     	 ldr r3,[r3,#28]
 3061 0112 D3E90023 	 ldrd r2,[r3]
 3062 0116 C7E90223 	 strd r2,[r7,#8]
 3063 011a 0BE0     	 b .L220
 3064              	.L223:
 815:../4g_module/pb_encode.c ****         else
 816:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "invalid data_size");
 3065              	 .loc 1 816 0
 3066 011c 7B68     	 ldr r3,[r7,#4]
 3067 011e 1B69     	 ldr r3,[r3,#16]
 3068 0120 002B     	 cmp r3,#0
 3069 0122 02D0     	 beq .L224
 3070              	 .loc 1 816 0 is_stmt 0 discriminator 1
 3071 0124 7B68     	 ldr r3,[r7,#4]
 3072 0126 1B69     	 ldr r3,[r3,#16]
 3073 0128 00E0     	 b .L225
 3074              	.L224:
 3075              	 .loc 1 816 0 discriminator 2
 3076 012a 0E4B     	 ldr r3,.L227
 3077              	.L225:
 3078              	 .loc 1 816 0 discriminator 4
 3079 012c 7A68     	 ldr r2,[r7,#4]
 3080 012e 1361     	 str r3,[r2,#16]
 3081 0130 0023     	 movs r3,#0
 3082 0132 12E0     	 b .L218
 3083              	.L220:
 817:../4g_module/pb_encode.c **** 
 818:../4g_module/pb_encode.c ****         if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 3084              	 .loc 1 818 0 is_stmt 1
 3085 0134 3B68     	 ldr r3,[r7]
 3086 0136 9B7D     	 ldrb r3,[r3,#22]
 3087 0138 03F00F03 	 and r3,r3,#15
 3088 013c 032B     	 cmp r3,#3
 3089 013e 06D1     	 bne .L226
 819:../4g_module/pb_encode.c ****             return pb_encode_svarint(stream, value);
 3090              	 .loc 1 819 0
 3091 0140 7868     	 ldr r0,[r7,#4]
 3092 0142 D7E90223 	 ldrd r2,[r7,#8]
 3093 0146 FFF7FEFF 	 bl pb_encode_svarint
 3094 014a 0346     	 mov r3,r0
 3095 014c 05E0     	 b .L218
 3096              	.L226:
 820:../4g_module/pb_encode.c **** #ifdef PB_WITHOUT_64BIT
 821:../4g_module/pb_encode.c ****         else if (value < 0)
 822:../4g_module/pb_encode.c ****             return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
 823:../4g_module/pb_encode.c **** #endif
 824:../4g_module/pb_encode.c ****         else
 825:../4g_module/pb_encode.c ****             return pb_encode_varint(stream, (pb_uint64_t)value);
 3097              	 .loc 1 825 0
 3098 014e D7E90223 	 ldrd r2,[r7,#8]
 3099 0152 7868     	 ldr r0,[r7,#4]
 3100 0154 FFF7FEFF 	 bl pb_encode_varint
 3101 0158 0346     	 mov r3,r0
 3102              	.L218:
 3103              	.LBE13:
 826:../4g_module/pb_encode.c **** 
 827:../4g_module/pb_encode.c ****     }
 828:../4g_module/pb_encode.c **** }
 3104              	 .loc 1 828 0
 3105 015a 1846     	 mov r0,r3
 3106 015c 1837     	 adds r7,r7,#24
 3107              	.LCFI125:
 3108              	 .cfi_def_cfa_offset 8
 3109 015e BD46     	 mov sp,r7
 3110              	.LCFI126:
 3111              	 .cfi_def_cfa_register 13
 3112              	 
 3113 0160 80BD     	 pop {r7,pc}
 3114              	.L228:
 3115 0162 00BF     	 .align 2
 3116              	.L227:
 3117 0164 9C000000 	 .word .LC9
 3118              	 .cfi_endproc
 3119              	.LFE24:
 3121              	 .section .text.pb_enc_fixed,"ax",%progbits
 3122              	 .align 2
 3123              	 .thumb
 3124              	 .thumb_func
 3126              	pb_enc_fixed:
 3127              	.LFB25:
 829:../4g_module/pb_encode.c **** 
 830:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
 831:../4g_module/pb_encode.c **** {
 3128              	 .loc 1 831 0
 3129              	 .cfi_startproc
 3130              	 
 3131              	 
 3132 0000 80B5     	 push {r7,lr}
 3133              	.LCFI127:
 3134              	 .cfi_def_cfa_offset 8
 3135              	 .cfi_offset 7,-8
 3136              	 .cfi_offset 14,-4
 3137 0002 82B0     	 sub sp,sp,#8
 3138              	.LCFI128:
 3139              	 .cfi_def_cfa_offset 16
 3140 0004 00AF     	 add r7,sp,#0
 3141              	.LCFI129:
 3142              	 .cfi_def_cfa_register 7
 3143 0006 7860     	 str r0,[r7,#4]
 3144 0008 3960     	 str r1,[r7]
 832:../4g_module/pb_encode.c **** #ifdef PB_CONVERT_DOUBLE_FLOAT
 833:../4g_module/pb_encode.c ****     if (field->data_size == sizeof(float) && PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 834:../4g_module/pb_encode.c ****     {
 835:../4g_module/pb_encode.c ****         return pb_encode_float_as_double(stream, *(float*)field->pData);
 836:../4g_module/pb_encode.c ****     }
 837:../4g_module/pb_encode.c **** #endif
 838:../4g_module/pb_encode.c **** 
 839:../4g_module/pb_encode.c ****     if (field->data_size == sizeof(uint32_t))
 3145              	 .loc 1 839 0
 3146 000a 3B68     	 ldr r3,[r7]
 3147 000c 5B8A     	 ldrh r3,[r3,#18]
 3148 000e 042B     	 cmp r3,#4
 3149 0010 07D1     	 bne .L230
 840:../4g_module/pb_encode.c ****     {
 841:../4g_module/pb_encode.c ****         return pb_encode_fixed32(stream, field->pData);
 3150              	 .loc 1 841 0
 3151 0012 3B68     	 ldr r3,[r7]
 3152 0014 DB69     	 ldr r3,[r3,#28]
 3153 0016 7868     	 ldr r0,[r7,#4]
 3154 0018 1946     	 mov r1,r3
 3155 001a FFF7FEFF 	 bl pb_encode_fixed32
 3156 001e 0346     	 mov r3,r0
 3157 0020 16E0     	 b .L231
 3158              	.L230:
 842:../4g_module/pb_encode.c ****     }
 843:../4g_module/pb_encode.c **** #ifndef PB_WITHOUT_64BIT
 844:../4g_module/pb_encode.c ****     else if (field->data_size == sizeof(uint64_t))
 3159              	 .loc 1 844 0
 3160 0022 3B68     	 ldr r3,[r7]
 3161 0024 5B8A     	 ldrh r3,[r3,#18]
 3162 0026 082B     	 cmp r3,#8
 3163 0028 07D1     	 bne .L232
 845:../4g_module/pb_encode.c ****     {
 846:../4g_module/pb_encode.c ****         return pb_encode_fixed64(stream, field->pData);
 3164              	 .loc 1 846 0
 3165 002a 3B68     	 ldr r3,[r7]
 3166 002c DB69     	 ldr r3,[r3,#28]
 3167 002e 7868     	 ldr r0,[r7,#4]
 3168 0030 1946     	 mov r1,r3
 3169 0032 FFF7FEFF 	 bl pb_encode_fixed64
 3170 0036 0346     	 mov r3,r0
 3171 0038 0AE0     	 b .L231
 3172              	.L232:
 847:../4g_module/pb_encode.c ****     }
 848:../4g_module/pb_encode.c **** #endif
 849:../4g_module/pb_encode.c ****     else
 850:../4g_module/pb_encode.c ****     {
 851:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid data_size");
 3173              	 .loc 1 851 0
 3174 003a 7B68     	 ldr r3,[r7,#4]
 3175 003c 1B69     	 ldr r3,[r3,#16]
 3176 003e 002B     	 cmp r3,#0
 3177 0040 02D0     	 beq .L233
 3178              	 .loc 1 851 0 is_stmt 0 discriminator 1
 3179 0042 7B68     	 ldr r3,[r7,#4]
 3180 0044 1B69     	 ldr r3,[r3,#16]
 3181 0046 00E0     	 b .L234
 3182              	.L233:
 3183              	 .loc 1 851 0 discriminator 2
 3184 0048 034B     	 ldr r3,.L235
 3185              	.L234:
 3186              	 .loc 1 851 0 discriminator 4
 3187 004a 7A68     	 ldr r2,[r7,#4]
 3188 004c 1361     	 str r3,[r2,#16]
 3189 004e 0023     	 movs r3,#0
 3190              	.L231:
 852:../4g_module/pb_encode.c ****     }
 853:../4g_module/pb_encode.c **** }
 3191              	 .loc 1 853 0 is_stmt 1
 3192 0050 1846     	 mov r0,r3
 3193 0052 0837     	 adds r7,r7,#8
 3194              	.LCFI130:
 3195              	 .cfi_def_cfa_offset 8
 3196 0054 BD46     	 mov sp,r7
 3197              	.LCFI131:
 3198              	 .cfi_def_cfa_register 13
 3199              	 
 3200 0056 80BD     	 pop {r7,pc}
 3201              	.L236:
 3202              	 .align 2
 3203              	.L235:
 3204 0058 9C000000 	 .word .LC9
 3205              	 .cfi_endproc
 3206              	.LFE25:
 3208              	 .section .rodata
 3209 00ae 0000     	 .align 2
 3210              	.LC10:
 3211 00b0 62797465 	 .ascii "bytes size exceeded\000"
 3211      73207369 
 3211      7A652065 
 3211      78636565 
 3211      64656400 
 3212              	 .section .text.pb_enc_bytes,"ax",%progbits
 3213              	 .align 2
 3214              	 .thumb
 3215              	 .thumb_func
 3217              	pb_enc_bytes:
 3218              	.LFB26:
 854:../4g_module/pb_encode.c **** 
 855:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
 856:../4g_module/pb_encode.c **** {
 3219              	 .loc 1 856 0
 3220              	 .cfi_startproc
 3221              	 
 3222              	 
 3223 0000 80B5     	 push {r7,lr}
 3224              	.LCFI132:
 3225              	 .cfi_def_cfa_offset 8
 3226              	 .cfi_offset 7,-8
 3227              	 .cfi_offset 14,-4
 3228 0002 84B0     	 sub sp,sp,#16
 3229              	.LCFI133:
 3230              	 .cfi_def_cfa_offset 24
 3231 0004 00AF     	 add r7,sp,#0
 3232              	.LCFI134:
 3233              	 .cfi_def_cfa_register 7
 3234 0006 7860     	 str r0,[r7,#4]
 3235 0008 3960     	 str r1,[r7]
 857:../4g_module/pb_encode.c ****     const pb_bytes_array_t *bytes = NULL;
 3236              	 .loc 1 857 0
 3237 000a 0023     	 movs r3,#0
 3238 000c FB60     	 str r3,[r7,#12]
 858:../4g_module/pb_encode.c **** 
 859:../4g_module/pb_encode.c ****     bytes = (const pb_bytes_array_t*)field->pData;
 3239              	 .loc 1 859 0
 3240 000e 3B68     	 ldr r3,[r7]
 3241 0010 DB69     	 ldr r3,[r3,#28]
 3242 0012 FB60     	 str r3,[r7,#12]
 860:../4g_module/pb_encode.c ****     
 861:../4g_module/pb_encode.c ****     if (bytes == NULL)
 3243              	 .loc 1 861 0
 3244 0014 FB68     	 ldr r3,[r7,#12]
 3245 0016 002B     	 cmp r3,#0
 3246 0018 06D1     	 bne .L238
 862:../4g_module/pb_encode.c ****     {
 863:../4g_module/pb_encode.c ****         /* Treat null pointer as an empty bytes field */
 864:../4g_module/pb_encode.c ****         return pb_encode_string(stream, NULL, 0);
 3247              	 .loc 1 864 0
 3248 001a 7868     	 ldr r0,[r7,#4]
 3249 001c 0021     	 movs r1,#0
 3250 001e 0022     	 movs r2,#0
 3251 0020 FFF7FEFF 	 bl pb_encode_string
 3252 0024 0346     	 mov r3,r0
 3253 0026 23E0     	 b .L239
 3254              	.L238:
 865:../4g_module/pb_encode.c ****     }
 866:../4g_module/pb_encode.c ****     
 867:../4g_module/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 3255              	 .loc 1 867 0
 3256 0028 3B68     	 ldr r3,[r7]
 3257 002a 9B7D     	 ldrb r3,[r3,#22]
 3258 002c 03F0C003 	 and r3,r3,#192
 3259 0030 002B     	 cmp r3,#0
 3260 0032 13D1     	 bne .L240
 868:../4g_module/pb_encode.c ****         bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 3261              	 .loc 1 868 0 discriminator 1
 3262 0034 FB68     	 ldr r3,[r7,#12]
 3263 0036 1B88     	 ldrh r3,[r3]
 3264 0038 1A46     	 mov r2,r3
 3265 003a 3B68     	 ldr r3,[r7]
 3266 003c 5B8A     	 ldrh r3,[r3,#18]
 3267 003e 023B     	 subs r3,r3,#2
 867:../4g_module/pb_encode.c ****         bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 3268              	 .loc 1 867 0 discriminator 1
 3269 0040 9A42     	 cmp r2,r3
 3270 0042 0BD9     	 bls .L240
 869:../4g_module/pb_encode.c ****     {
 870:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "bytes size exceeded");
 3271              	 .loc 1 870 0
 3272 0044 7B68     	 ldr r3,[r7,#4]
 3273 0046 1B69     	 ldr r3,[r3,#16]
 3274 0048 002B     	 cmp r3,#0
 3275 004a 02D0     	 beq .L241
 3276              	 .loc 1 870 0 is_stmt 0 discriminator 1
 3277 004c 7B68     	 ldr r3,[r7,#4]
 3278 004e 1B69     	 ldr r3,[r3,#16]
 3279 0050 00E0     	 b .L242
 3280              	.L241:
 3281              	 .loc 1 870 0 discriminator 2
 3282 0052 094B     	 ldr r3,.L243
 3283              	.L242:
 3284              	 .loc 1 870 0 discriminator 4
 3285 0054 7A68     	 ldr r2,[r7,#4]
 3286 0056 1361     	 str r3,[r2,#16]
 3287 0058 0023     	 movs r3,#0
 3288 005a 09E0     	 b .L239
 3289              	.L240:
 871:../4g_module/pb_encode.c ****     }
 872:../4g_module/pb_encode.c ****     
 873:../4g_module/pb_encode.c ****     return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 3290              	 .loc 1 873 0 is_stmt 1
 3291 005c FB68     	 ldr r3,[r7,#12]
 3292 005e 9A1C     	 adds r2,r3,#2
 3293 0060 FB68     	 ldr r3,[r7,#12]
 3294 0062 1B88     	 ldrh r3,[r3]
 3295 0064 7868     	 ldr r0,[r7,#4]
 3296 0066 1146     	 mov r1,r2
 3297 0068 1A46     	 mov r2,r3
 3298 006a FFF7FEFF 	 bl pb_encode_string
 3299 006e 0346     	 mov r3,r0
 3300              	.L239:
 874:../4g_module/pb_encode.c **** }
 3301              	 .loc 1 874 0
 3302 0070 1846     	 mov r0,r3
 3303 0072 1037     	 adds r7,r7,#16
 3304              	.LCFI135:
 3305              	 .cfi_def_cfa_offset 8
 3306 0074 BD46     	 mov sp,r7
 3307              	.LCFI136:
 3308              	 .cfi_def_cfa_register 13
 3309              	 
 3310 0076 80BD     	 pop {r7,pc}
 3311              	.L244:
 3312              	 .align 2
 3313              	.L243:
 3314 0078 B0000000 	 .word .LC10
 3315              	 .cfi_endproc
 3316              	.LFE26:
 3318              	 .section .rodata
 3319              	 .align 2
 3320              	.LC11:
 3321 00c4 7A65726F 	 .ascii "zero-length string\000"
 3321      2D6C656E 
 3321      67746820 
 3321      73747269 
 3321      6E6700
 3322 00d7 00       	 .align 2
 3323              	.LC12:
 3324 00d8 756E7465 	 .ascii "unterminated string\000"
 3324      726D696E 
 3324      61746564 
 3324      20737472 
 3324      696E6700 
 3325              	 .section .text.pb_enc_string,"ax",%progbits
 3326              	 .align 2
 3327              	 .thumb
 3328              	 .thumb_func
 3330              	pb_enc_string:
 3331              	.LFB27:
 875:../4g_module/pb_encode.c **** 
 876:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
 877:../4g_module/pb_encode.c **** {
 3332              	 .loc 1 877 0
 3333              	 .cfi_startproc
 3334              	 
 3335              	 
 3336 0000 80B5     	 push {r7,lr}
 3337              	.LCFI137:
 3338              	 .cfi_def_cfa_offset 8
 3339              	 .cfi_offset 7,-8
 3340              	 .cfi_offset 14,-4
 3341 0002 86B0     	 sub sp,sp,#24
 3342              	.LCFI138:
 3343              	 .cfi_def_cfa_offset 32
 3344 0004 00AF     	 add r7,sp,#0
 3345              	.LCFI139:
 3346              	 .cfi_def_cfa_register 7
 3347 0006 7860     	 str r0,[r7,#4]
 3348 0008 3960     	 str r1,[r7]
 878:../4g_module/pb_encode.c ****     size_t size = 0;
 3349              	 .loc 1 878 0
 3350 000a 0023     	 movs r3,#0
 3351 000c 7B61     	 str r3,[r7,#20]
 879:../4g_module/pb_encode.c ****     size_t max_size = (size_t)field->data_size;
 3352              	 .loc 1 879 0
 3353 000e 3B68     	 ldr r3,[r7]
 3354 0010 5B8A     	 ldrh r3,[r3,#18]
 3355 0012 3B61     	 str r3,[r7,#16]
 880:../4g_module/pb_encode.c ****     const char *str = (const char*)field->pData;
 3356              	 .loc 1 880 0
 3357 0014 3B68     	 ldr r3,[r7]
 3358 0016 DB69     	 ldr r3,[r3,#28]
 3359 0018 BB60     	 str r3,[r7,#8]
 881:../4g_module/pb_encode.c ****     
 882:../4g_module/pb_encode.c ****     if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 3360              	 .loc 1 882 0
 3361 001a 3B68     	 ldr r3,[r7]
 3362 001c 9B7D     	 ldrb r3,[r3,#22]
 3363 001e 03F0C003 	 and r3,r3,#192
 3364 0022 802B     	 cmp r3,#128
 3365 0024 03D1     	 bne .L246
 883:../4g_module/pb_encode.c ****     {
 884:../4g_module/pb_encode.c ****         max_size = (size_t)-1;
 3366              	 .loc 1 884 0
 3367 0026 4FF0FF33 	 mov r3,#-1
 3368 002a 3B61     	 str r3,[r7,#16]
 3369 002c 11E0     	 b .L247
 3370              	.L246:
 885:../4g_module/pb_encode.c ****     }
 886:../4g_module/pb_encode.c ****     else
 887:../4g_module/pb_encode.c ****     {
 888:../4g_module/pb_encode.c ****         /* pb_dec_string() assumes string fields end with a null
 889:../4g_module/pb_encode.c ****          * terminator when the type isn't PB_ATYPE_POINTER, so we
 890:../4g_module/pb_encode.c ****          * shouldn't allow more than max-1 bytes to be written to
 891:../4g_module/pb_encode.c ****          * allow space for the null terminator.
 892:../4g_module/pb_encode.c ****          */
 893:../4g_module/pb_encode.c ****         if (max_size == 0)
 3371              	 .loc 1 893 0
 3372 002e 3B69     	 ldr r3,[r7,#16]
 3373 0030 002B     	 cmp r3,#0
 3374 0032 0BD1     	 bne .L248
 894:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "zero-length string");
 3375              	 .loc 1 894 0
 3376 0034 7B68     	 ldr r3,[r7,#4]
 3377 0036 1B69     	 ldr r3,[r3,#16]
 3378 0038 002B     	 cmp r3,#0
 3379 003a 02D0     	 beq .L249
 3380              	 .loc 1 894 0 is_stmt 0 discriminator 1
 3381 003c 7B68     	 ldr r3,[r7,#4]
 3382 003e 1B69     	 ldr r3,[r3,#16]
 3383 0040 00E0     	 b .L250
 3384              	.L249:
 3385              	 .loc 1 894 0 discriminator 2
 3386 0042 1C4B     	 ldr r3,.L259
 3387              	.L250:
 3388              	 .loc 1 894 0 discriminator 4
 3389 0044 7A68     	 ldr r2,[r7,#4]
 3390 0046 1361     	 str r3,[r2,#16]
 3391 0048 0023     	 movs r3,#0
 3392 004a 2FE0     	 b .L251
 3393              	.L248:
 895:../4g_module/pb_encode.c **** 
 896:../4g_module/pb_encode.c ****         max_size -= 1;
 3394              	 .loc 1 896 0 is_stmt 1
 3395 004c 3B69     	 ldr r3,[r7,#16]
 3396 004e 013B     	 subs r3,r3,#1
 3397 0050 3B61     	 str r3,[r7,#16]
 3398              	.L247:
 897:../4g_module/pb_encode.c ****     }
 898:../4g_module/pb_encode.c **** 
 899:../4g_module/pb_encode.c **** 
 900:../4g_module/pb_encode.c ****     if (str == NULL)
 3399              	 .loc 1 900 0
 3400 0052 BB68     	 ldr r3,[r7,#8]
 3401 0054 002B     	 cmp r3,#0
 3402 0056 02D1     	 bne .L252
 901:../4g_module/pb_encode.c ****     {
 902:../4g_module/pb_encode.c ****         size = 0; /* Treat null pointer as an empty string */
 3403              	 .loc 1 902 0
 3404 0058 0023     	 movs r3,#0
 3405 005a 7B61     	 str r3,[r7,#20]
 3406 005c 20E0     	 b .L253
 3407              	.L252:
 3408              	.LBB14:
 903:../4g_module/pb_encode.c ****     }
 904:../4g_module/pb_encode.c ****     else
 905:../4g_module/pb_encode.c ****     {
 906:../4g_module/pb_encode.c ****         const char *p = str;
 3409              	 .loc 1 906 0
 3410 005e BB68     	 ldr r3,[r7,#8]
 3411 0060 FB60     	 str r3,[r7,#12]
 907:../4g_module/pb_encode.c **** 
 908:../4g_module/pb_encode.c ****         /* strnlen() is not always available, so just use a loop */
 909:../4g_module/pb_encode.c ****         while (size < max_size && *p != '\0')
 3412              	 .loc 1 909 0
 3413 0062 05E0     	 b .L254
 3414              	.L256:
 910:../4g_module/pb_encode.c ****         {
 911:../4g_module/pb_encode.c ****             size++;
 3415              	 .loc 1 911 0
 3416 0064 7B69     	 ldr r3,[r7,#20]
 3417 0066 0133     	 adds r3,r3,#1
 3418 0068 7B61     	 str r3,[r7,#20]
 912:../4g_module/pb_encode.c ****             p++;
 3419              	 .loc 1 912 0
 3420 006a FB68     	 ldr r3,[r7,#12]
 3421 006c 0133     	 adds r3,r3,#1
 3422 006e FB60     	 str r3,[r7,#12]
 3423              	.L254:
 909:../4g_module/pb_encode.c ****         {
 3424              	 .loc 1 909 0
 3425 0070 7A69     	 ldr r2,[r7,#20]
 3426 0072 3B69     	 ldr r3,[r7,#16]
 3427 0074 9A42     	 cmp r2,r3
 3428 0076 03D2     	 bcs .L255
 909:../4g_module/pb_encode.c ****         {
 3429              	 .loc 1 909 0 is_stmt 0 discriminator 1
 3430 0078 FB68     	 ldr r3,[r7,#12]
 3431 007a 1B78     	 ldrb r3,[r3]
 3432 007c 002B     	 cmp r3,#0
 3433 007e F1D1     	 bne .L256
 3434              	.L255:
 913:../4g_module/pb_encode.c ****         }
 914:../4g_module/pb_encode.c **** 
 915:../4g_module/pb_encode.c ****         if (*p != '\0')
 3435              	 .loc 1 915 0 is_stmt 1
 3436 0080 FB68     	 ldr r3,[r7,#12]
 3437 0082 1B78     	 ldrb r3,[r3]
 3438 0084 002B     	 cmp r3,#0
 3439 0086 0BD0     	 beq .L253
 916:../4g_module/pb_encode.c ****         {
 917:../4g_module/pb_encode.c ****             PB_RETURN_ERROR(stream, "unterminated string");
 3440              	 .loc 1 917 0
 3441 0088 7B68     	 ldr r3,[r7,#4]
 3442 008a 1B69     	 ldr r3,[r3,#16]
 3443 008c 002B     	 cmp r3,#0
 3444 008e 02D0     	 beq .L257
 3445              	 .loc 1 917 0 is_stmt 0 discriminator 1
 3446 0090 7B68     	 ldr r3,[r7,#4]
 3447 0092 1B69     	 ldr r3,[r3,#16]
 3448 0094 00E0     	 b .L258
 3449              	.L257:
 3450              	 .loc 1 917 0 discriminator 2
 3451 0096 084B     	 ldr r3,.L259+4
 3452              	.L258:
 3453              	 .loc 1 917 0 discriminator 4
 3454 0098 7A68     	 ldr r2,[r7,#4]
 3455 009a 1361     	 str r3,[r2,#16]
 3456 009c 0023     	 movs r3,#0
 3457 009e 05E0     	 b .L251
 3458              	.L253:
 3459              	.LBE14:
 918:../4g_module/pb_encode.c ****         }
 919:../4g_module/pb_encode.c ****     }
 920:../4g_module/pb_encode.c **** 
 921:../4g_module/pb_encode.c **** #ifdef PB_VALIDATE_UTF8
 922:../4g_module/pb_encode.c ****     if (!pb_validate_utf8(str))
 923:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid utf8");
 924:../4g_module/pb_encode.c **** #endif
 925:../4g_module/pb_encode.c **** 
 926:../4g_module/pb_encode.c ****     return pb_encode_string(stream, (const pb_byte_t*)str, size);
 3460              	 .loc 1 926 0 is_stmt 1
 3461 00a0 7868     	 ldr r0,[r7,#4]
 3462 00a2 B968     	 ldr r1,[r7,#8]
 3463 00a4 7A69     	 ldr r2,[r7,#20]
 3464 00a6 FFF7FEFF 	 bl pb_encode_string
 3465 00aa 0346     	 mov r3,r0
 3466              	.L251:
 927:../4g_module/pb_encode.c **** }
 3467              	 .loc 1 927 0
 3468 00ac 1846     	 mov r0,r3
 3469 00ae 1837     	 adds r7,r7,#24
 3470              	.LCFI140:
 3471              	 .cfi_def_cfa_offset 8
 3472 00b0 BD46     	 mov sp,r7
 3473              	.LCFI141:
 3474              	 .cfi_def_cfa_register 13
 3475              	 
 3476 00b2 80BD     	 pop {r7,pc}
 3477              	.L260:
 3478              	 .align 2
 3479              	.L259:
 3480 00b4 C4000000 	 .word .LC11
 3481 00b8 D8000000 	 .word .LC12
 3482              	 .cfi_endproc
 3483              	.LFE27:
 3485              	 .section .rodata
 3486              	 .align 2
 3487              	.LC13:
 3488 00ec 696E7661 	 .ascii "invalid field descriptor\000"
 3488      6C696420 
 3488      6669656C 
 3488      64206465 
 3488      73637269 
 3489 0105 000000   	 .section .text.pb_enc_submessage,"ax",%progbits
 3490              	 .align 2
 3491              	 .thumb
 3492              	 .thumb_func
 3494              	pb_enc_submessage:
 3495              	.LFB28:
 928:../4g_module/pb_encode.c **** 
 929:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
 930:../4g_module/pb_encode.c **** {
 3496              	 .loc 1 930 0
 3497              	 .cfi_startproc
 3498              	 
 3499              	 
 3500 0000 80B5     	 push {r7,lr}
 3501              	.LCFI142:
 3502              	 .cfi_def_cfa_offset 8
 3503              	 .cfi_offset 7,-8
 3504              	 .cfi_offset 14,-4
 3505 0002 84B0     	 sub sp,sp,#16
 3506              	.LCFI143:
 3507              	 .cfi_def_cfa_offset 24
 3508 0004 00AF     	 add r7,sp,#0
 3509              	.LCFI144:
 3510              	 .cfi_def_cfa_register 7
 3511 0006 7860     	 str r0,[r7,#4]
 3512 0008 3960     	 str r1,[r7]
 931:../4g_module/pb_encode.c ****     if (field->submsg_desc == NULL)
 3513              	 .loc 1 931 0
 3514 000a 3B68     	 ldr r3,[r7]
 3515 000c 5B6A     	 ldr r3,[r3,#36]
 3516 000e 002B     	 cmp r3,#0
 3517 0010 0BD1     	 bne .L262
 932:../4g_module/pb_encode.c ****         PB_RETURN_ERROR(stream, "invalid field descriptor");
 3518              	 .loc 1 932 0
 3519 0012 7B68     	 ldr r3,[r7,#4]
 3520 0014 1B69     	 ldr r3,[r3,#16]
 3521 0016 002B     	 cmp r3,#0
 3522 0018 02D0     	 beq .L263
 3523              	 .loc 1 932 0 is_stmt 0 discriminator 1
 3524 001a 7B68     	 ldr r3,[r7,#4]
 3525 001c 1B69     	 ldr r3,[r3,#16]
 3526 001e 00E0     	 b .L264
 3527              	.L263:
 3528              	 .loc 1 932 0 discriminator 2
 3529 0020 194B     	 ldr r3,.L267
 3530              	.L264:
 3531              	 .loc 1 932 0 discriminator 4
 3532 0022 7A68     	 ldr r2,[r7,#4]
 3533 0024 1361     	 str r3,[r2,#16]
 3534 0026 0023     	 movs r3,#0
 3535 0028 2AE0     	 b .L265
 3536              	.L262:
 933:../4g_module/pb_encode.c **** 
 934:../4g_module/pb_encode.c ****     if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 3537              	 .loc 1 934 0 is_stmt 1
 3538 002a 3B68     	 ldr r3,[r7]
 3539 002c 9B7D     	 ldrb r3,[r3,#22]
 3540 002e 03F00F03 	 and r3,r3,#15
 3541 0032 092B     	 cmp r3,#9
 3542 0034 1AD1     	 bne .L266
 3543              	 .loc 1 934 0 is_stmt 0 discriminator 1
 3544 0036 3B68     	 ldr r3,[r7]
 3545 0038 1B6A     	 ldr r3,[r3,#32]
 3546 003a 002B     	 cmp r3,#0
 3547 003c 16D0     	 beq .L266
 3548              	.LBB15:
 935:../4g_module/pb_encode.c ****     {
 936:../4g_module/pb_encode.c ****         /* Message callback is stored right before pSize. */
 937:../4g_module/pb_encode.c ****         pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 3549              	 .loc 1 937 0 is_stmt 1
 3550 003e 3B68     	 ldr r3,[r7]
 3551 0040 1B6A     	 ldr r3,[r3,#32]
 3552 0042 083B     	 subs r3,r3,#8
 3553 0044 FB60     	 str r3,[r7,#12]
 938:../4g_module/pb_encode.c ****         if (callback->funcs.encode)
 3554              	 .loc 1 938 0
 3555 0046 FB68     	 ldr r3,[r7,#12]
 3556 0048 1B68     	 ldr r3,[r3]
 3557 004a 002B     	 cmp r3,#0
 3558 004c 0ED0     	 beq .L266
 939:../4g_module/pb_encode.c ****         {
 940:../4g_module/pb_encode.c ****             if (!callback->funcs.encode(stream, field, &callback->arg))
 3559              	 .loc 1 940 0
 3560 004e FB68     	 ldr r3,[r7,#12]
 3561 0050 1B68     	 ldr r3,[r3]
 3562 0052 FA68     	 ldr r2,[r7,#12]
 3563 0054 0432     	 adds r2,r2,#4
 3564 0056 7868     	 ldr r0,[r7,#4]
 3565 0058 3968     	 ldr r1,[r7]
 3566 005a 9847     	 blx r3
 3567 005c 0346     	 mov r3,r0
 3568 005e 83F00103 	 eor r3,r3,#1
 3569 0062 DBB2     	 uxtb r3,r3
 3570 0064 002B     	 cmp r3,#0
 3571 0066 01D0     	 beq .L266
 941:../4g_module/pb_encode.c ****                 return false;
 3572              	 .loc 1 941 0
 3573 0068 0023     	 movs r3,#0
 3574 006a 09E0     	 b .L265
 3575              	.L266:
 3576              	.LBE15:
 942:../4g_module/pb_encode.c ****         }
 943:../4g_module/pb_encode.c ****     }
 944:../4g_module/pb_encode.c ****     
 945:../4g_module/pb_encode.c ****     return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 3577              	 .loc 1 945 0
 3578 006c 3B68     	 ldr r3,[r7]
 3579 006e 5A6A     	 ldr r2,[r3,#36]
 3580 0070 3B68     	 ldr r3,[r7]
 3581 0072 DB69     	 ldr r3,[r3,#28]
 3582 0074 7868     	 ldr r0,[r7,#4]
 3583 0076 1146     	 mov r1,r2
 3584 0078 1A46     	 mov r2,r3
 3585 007a FFF7FEFF 	 bl pb_encode_submessage
 3586 007e 0346     	 mov r3,r0
 3587              	.L265:
 946:../4g_module/pb_encode.c **** }
 3588              	 .loc 1 946 0
 3589 0080 1846     	 mov r0,r3
 3590 0082 1037     	 adds r7,r7,#16
 3591              	.LCFI145:
 3592              	 .cfi_def_cfa_offset 8
 3593 0084 BD46     	 mov sp,r7
 3594              	.LCFI146:
 3595              	 .cfi_def_cfa_register 13
 3596              	 
 3597 0086 80BD     	 pop {r7,pc}
 3598              	.L268:
 3599              	 .align 2
 3600              	.L267:
 3601 0088 EC000000 	 .word .LC13
 3602              	 .cfi_endproc
 3603              	.LFE28:
 3605              	 .section .text.pb_enc_fixed_length_bytes,"ax",%progbits
 3606              	 .align 2
 3607              	 .thumb
 3608              	 .thumb_func
 3610              	pb_enc_fixed_length_bytes:
 3611              	.LFB29:
 947:../4g_module/pb_encode.c **** 
 948:../4g_module/pb_encode.c **** static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *fiel
 949:../4g_module/pb_encode.c **** {
 3612              	 .loc 1 949 0
 3613              	 .cfi_startproc
 3614              	 
 3615              	 
 3616 0000 80B5     	 push {r7,lr}
 3617              	.LCFI147:
 3618              	 .cfi_def_cfa_offset 8
 3619              	 .cfi_offset 7,-8
 3620              	 .cfi_offset 14,-4
 3621 0002 82B0     	 sub sp,sp,#8
 3622              	.LCFI148:
 3623              	 .cfi_def_cfa_offset 16
 3624 0004 00AF     	 add r7,sp,#0
 3625              	.LCFI149:
 3626              	 .cfi_def_cfa_register 7
 3627 0006 7860     	 str r0,[r7,#4]
 3628 0008 3960     	 str r1,[r7]
 950:../4g_module/pb_encode.c ****     return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 3629              	 .loc 1 950 0
 3630 000a 3B68     	 ldr r3,[r7]
 3631 000c DA69     	 ldr r2,[r3,#28]
 3632 000e 3B68     	 ldr r3,[r7]
 3633 0010 5B8A     	 ldrh r3,[r3,#18]
 3634 0012 7868     	 ldr r0,[r7,#4]
 3635 0014 1146     	 mov r1,r2
 3636 0016 1A46     	 mov r2,r3
 3637 0018 FFF7FEFF 	 bl pb_encode_string
 3638 001c 0346     	 mov r3,r0
 951:../4g_module/pb_encode.c **** }
 3639              	 .loc 1 951 0
 3640 001e 1846     	 mov r0,r3
 3641 0020 0837     	 adds r7,r7,#8
 3642              	.LCFI150:
 3643              	 .cfi_def_cfa_offset 8
 3644 0022 BD46     	 mov sp,r7
 3645              	.LCFI151:
 3646              	 .cfi_def_cfa_register 13
 3647              	 
 3648 0024 80BD     	 pop {r7,pc}
 3649              	 .cfi_endproc
 3650              	.LFE29:
 3652 0026 00BF     	 .text
 3653              	.Letext0:
 3654              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 3655              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 3656              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 3657              	 .file 5 "../4g_module/pb.h"
 3658              	 .file 6 "../4g_module/pb_encode.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pb_encode.c
    {standard input}:20     .text.buf_write:00000000 $t
    {standard input}:24     .text.buf_write:00000000 buf_write
    {standard input}:76     .text.pb_ostream_from_buffer:00000000 $t
    {standard input}:81     .text.pb_ostream_from_buffer:00000000 pb_ostream_from_buffer
    {standard input}:145    .text.pb_ostream_from_buffer:0000003c $d
    {standard input}:150    .rodata:00000000 $d
    {standard input}:157    .text.pb_write:00000000 $t
    {standard input}:162    .text.pb_write:00000000 pb_write
    {standard input}:284    .text.pb_write:00000098 $d
    {standard input}:290    .text.safe_read_bool:00000000 $t
    {standard input}:294    .text.safe_read_bool:00000000 safe_read_bool
    {standard input}:368    .text.encode_array:00000000 $t
    {standard input}:372    .text.encode_array:00000000 encode_array
    {standard input}:2398   .text.pb_encode_tag:00000000 pb_encode_tag
    {standard input}:2895   .text.pb_enc_varint:00000000 pb_enc_varint
    {standard input}:2169   .text.pb_encode_varint:00000000 pb_encode_varint
    {standard input}:3126   .text.pb_enc_fixed:00000000 pb_enc_fixed
    {standard input}:2457   .text.pb_encode_tag_for_field:00000000 pb_encode_tag_for_field
    {standard input}:1171   .text.encode_basic_field:00000000 encode_basic_field
    {standard input}:806    .text.encode_array:000002a4 $d
    {standard input}:812    .text.pb_check_proto3_default_value:00000000 $t
    {standard input}:816    .text.pb_check_proto3_default_value:00000000 pb_check_proto3_default_value
    {standard input}:1158   .text.pb_check_proto3_default_value:0000023c $d
    {standard input}:1167   .text.encode_basic_field:00000000 $t
    {standard input}:1222   .text.encode_basic_field:00000040 $d
    {standard input}:1234   .text.encode_basic_field:00000070 $t
    {standard input}:2840   .text.pb_enc_bool:00000000 pb_enc_bool
    {standard input}:3217   .text.pb_enc_bytes:00000000 pb_enc_bytes
    {standard input}:3330   .text.pb_enc_string:00000000 pb_enc_string
    {standard input}:3494   .text.pb_enc_submessage:00000000 pb_enc_submessage
    {standard input}:3610   .text.pb_enc_fixed_length_bytes:00000000 pb_enc_fixed_length_bytes
    {standard input}:1316   .text.encode_basic_field:000000e4 $d
    {standard input}:1325   .text.encode_callback_field:00000000 $t
    {standard input}:1329   .text.encode_callback_field:00000000 encode_callback_field
    {standard input}:1402   .text.encode_callback_field:00000050 $d
    {standard input}:1411   .text.encode_field:00000000 $t
    {standard input}:1415   .text.encode_field:00000000 encode_field
    {standard input}:1572   .text.encode_field:000000e4 $d
    {standard input}:1581   .text.default_extension_encoder:00000000 $t
    {standard input}:1585   .text.default_extension_encoder:00000000 default_extension_encoder
    {standard input}:1653   .text.default_extension_encoder:00000050 $d
    {standard input}:1658   .text.encode_extension_field:00000000 $t
    {standard input}:1662   .text.encode_extension_field:00000000 encode_extension_field
    {standard input}:1751   .text.pb_encode:00000000 $t
    {standard input}:1756   .text.pb_encode:00000000 pb_encode
    {standard input}:1848   .text.pb_encode_ex:00000000 $t
    {standard input}:1853   .text.pb_encode_ex:00000000 pb_encode_ex
    {standard input}:2641   .text.pb_encode_submessage:00000000 pb_encode_submessage
    {standard input}:1941   .text.pb_get_encoded_size:00000000 $t
    {standard input}:1946   .text.pb_get_encoded_size:00000000 pb_get_encoded_size
    {standard input}:2013   .text.pb_encode_varint_32:00000000 $t
    {standard input}:2017   .text.pb_encode_varint_32:00000000 pb_encode_varint_32
    {standard input}:2164   .text.pb_encode_varint:00000000 $t
    {standard input}:2235   .text.pb_encode_svarint:00000000 $t
    {standard input}:2240   .text.pb_encode_svarint:00000000 pb_encode_svarint
    {standard input}:2305   .text.pb_encode_fixed32:00000000 $t
    {standard input}:2310   .text.pb_encode_fixed32:00000000 pb_encode_fixed32
    {standard input}:2349   .text.pb_encode_fixed64:00000000 $t
    {standard input}:2354   .text.pb_encode_fixed64:00000000 pb_encode_fixed64
    {standard input}:2393   .text.pb_encode_tag:00000000 $t
    {standard input}:2452   .text.pb_encode_tag_for_field:00000000 $t
    {standard input}:2486   .text.pb_encode_tag_for_field:0000001c $d
    {standard input}:2498   .text.pb_encode_tag_for_field:0000004c $t
    {standard input}:2566   .text.pb_encode_tag_for_field:00000098 $d
    {standard input}:2571   .text.pb_encode_string:00000000 $t
    {standard input}:2576   .text.pb_encode_string:00000000 pb_encode_string
    {standard input}:2636   .text.pb_encode_submessage:00000000 $t
    {standard input}:2830   .text.pb_encode_submessage:00000114 $d
    {standard input}:2836   .text.pb_enc_bool:00000000 $t
    {standard input}:2891   .text.pb_enc_varint:00000000 $t
    {standard input}:3117   .text.pb_enc_varint:00000164 $d
    {standard input}:3122   .text.pb_enc_fixed:00000000 $t
    {standard input}:3204   .text.pb_enc_fixed:00000058 $d
    {standard input}:3213   .text.pb_enc_bytes:00000000 $t
    {standard input}:3314   .text.pb_enc_bytes:00000078 $d
    {standard input}:3326   .text.pb_enc_string:00000000 $t
    {standard input}:3480   .text.pb_enc_string:000000b4 $d
    {standard input}:3490   .text.pb_enc_submessage:00000000 $t
    {standard input}:3601   .text.pb_enc_submessage:00000088 $d
    {standard input}:3606   .text.pb_enc_fixed_length_bytes:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
memcpy
pb_field_iter_begin
pb_field_iter_next
pb_default_field_callback
pb_field_iter_begin_extension_const
pb_field_iter_begin_const
