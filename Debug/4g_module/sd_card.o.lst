   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sd_card.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm fs,564,4
  20              	 .comm fil,556,4
  21              	 .comm res,1,1
  22              	 .comm uart_tx_buffer,100,4
  23              	 .section .rodata
  24              	 .align 2
  25              	.LC0:
  26 0000 30313233 	 .ascii "0123456789ABCDEF\000"
  26      34353637 
  26      38394142 
  26      43444546 
  26      00
  27              	 .section .text.int_to_hex,"ax",%progbits
  28              	 .align 2
  29              	 .global int_to_hex
  30              	 .thumb
  31              	 .thumb_func
  33              	int_to_hex:
  34              	.LFB605:
  35              	 .file 1 "../4g_module/sd_card.c"
   1:../4g_module/sd_card.c **** 
   2:../4g_module/sd_card.c **** #define BUFFER_SIZE 100 // Define the buffer size according to your requirements
   3:../4g_module/sd_card.c **** #define PACKET_SIZE 256
   4:../4g_module/sd_card.c **** #define NUM_PACKETS 1
   5:../4g_module/sd_card.c **** #include "DAVE.h"
   6:../4g_module/sd_card.c **** #include "sd_card.h"
   7:../4g_module/sd_card.c **** 
   8:../4g_module/sd_card.c **** FATFS fs;  //File system object (volume work area)
   9:../4g_module/sd_card.c **** FIL fil;  //File object
  10:../4g_module/sd_card.c **** FRESULT res;
  11:../4g_module/sd_card.c **** 
  12:../4g_module/sd_card.c **** char uart_tx_buffer[BUFFER_SIZE];
  13:../4g_module/sd_card.c **** 
  14:../4g_module/sd_card.c **** void int_to_hex(uint32_t value, char *buffer) {
  36              	 .loc 1 14 0
  37              	 .cfi_startproc
  38              	 
  39              	 
  40              	 
  41 0000 80B4     	 push {r7}
  42              	.LCFI0:
  43              	 .cfi_def_cfa_offset 4
  44              	 .cfi_offset 7,-4
  45 0002 85B0     	 sub sp,sp,#20
  46              	.LCFI1:
  47              	 .cfi_def_cfa_offset 24
  48 0004 00AF     	 add r7,sp,#0
  49              	.LCFI2:
  50              	 .cfi_def_cfa_register 7
  51 0006 7860     	 str r0,[r7,#4]
  52 0008 3960     	 str r1,[r7]
  15:../4g_module/sd_card.c ****     int i;
  16:../4g_module/sd_card.c ****     for (i = 7; i >= 0; i--) {
  53              	 .loc 1 16 0
  54 000a 0723     	 movs r3,#7
  55 000c FB60     	 str r3,[r7,#12]
  56 000e 0EE0     	 b .L2
  57              	.L3:
  17:../4g_module/sd_card.c ****         buffer[i] = "0123456789ABCDEF"[value & 0xF];
  58              	 .loc 1 17 0 discriminator 3
  59 0010 FB68     	 ldr r3,[r7,#12]
  60 0012 3A68     	 ldr r2,[r7]
  61 0014 1344     	 add r3,r3,r2
  62 0016 7A68     	 ldr r2,[r7,#4]
  63 0018 02F00F02 	 and r2,r2,#15
  64 001c 0849     	 ldr r1,.L4
  65 001e 8A5C     	 ldrb r2,[r1,r2]
  66 0020 1A70     	 strb r2,[r3]
  18:../4g_module/sd_card.c ****         value >>= 4;
  67              	 .loc 1 18 0 discriminator 3
  68 0022 7B68     	 ldr r3,[r7,#4]
  69 0024 1B09     	 lsrs r3,r3,#4
  70 0026 7B60     	 str r3,[r7,#4]
  16:../4g_module/sd_card.c ****         buffer[i] = "0123456789ABCDEF"[value & 0xF];
  71              	 .loc 1 16 0 discriminator 3
  72 0028 FB68     	 ldr r3,[r7,#12]
  73 002a 013B     	 subs r3,r3,#1
  74 002c FB60     	 str r3,[r7,#12]
  75              	.L2:
  16:../4g_module/sd_card.c ****         buffer[i] = "0123456789ABCDEF"[value & 0xF];
  76              	 .loc 1 16 0 is_stmt 0 discriminator 1
  77 002e FB68     	 ldr r3,[r7,#12]
  78 0030 002B     	 cmp r3,#0
  79 0032 EDDA     	 bge .L3
  19:../4g_module/sd_card.c ****     }
  20:../4g_module/sd_card.c **** }
  80              	 .loc 1 20 0 is_stmt 1
  81 0034 1437     	 adds r7,r7,#20
  82              	.LCFI3:
  83              	 .cfi_def_cfa_offset 4
  84 0036 BD46     	 mov sp,r7
  85              	.LCFI4:
  86              	 .cfi_def_cfa_register 13
  87              	 
  88 0038 5DF8047B 	 ldr r7,[sp],#4
  89              	.LCFI5:
  90              	 .cfi_restore 7
  91              	 .cfi_def_cfa_offset 0
  92 003c 7047     	 bx lr
  93              	.L5:
  94 003e 00BF     	 .align 2
  95              	.L4:
  96 0040 00000000 	 .word .LC0
  97              	 .cfi_endproc
  98              	.LFE605:
 100              	 .section .text.uart_send_string,"ax",%progbits
 101              	 .align 2
 102              	 .global uart_send_string
 103              	 .thumb
 104              	 .thumb_func
 106              	uart_send_string:
 107              	.LFB606:
  21:../4g_module/sd_card.c **** 
  22:../4g_module/sd_card.c **** void uart_send_string(const char *str, uint32_t length) {
 108              	 .loc 1 22 0
 109              	 .cfi_startproc
 110              	 
 111              	 
 112 0000 80B5     	 push {r7,lr}
 113              	.LCFI6:
 114              	 .cfi_def_cfa_offset 8
 115              	 .cfi_offset 7,-8
 116              	 .cfi_offset 14,-4
 117 0002 82B0     	 sub sp,sp,#8
 118              	.LCFI7:
 119              	 .cfi_def_cfa_offset 16
 120 0004 00AF     	 add r7,sp,#0
 121              	.LCFI8:
 122              	 .cfi_def_cfa_register 7
 123 0006 7860     	 str r0,[r7,#4]
 124 0008 3960     	 str r1,[r7]
  23:../4g_module/sd_card.c ****     UART_Transmit(&UART_0, str, length);
 125              	 .loc 1 23 0
 126 000a 0448     	 ldr r0,.L7
 127 000c 7968     	 ldr r1,[r7,#4]
 128 000e 3A68     	 ldr r2,[r7]
 129 0010 FFF7FEFF 	 bl UART_Transmit
  24:../4g_module/sd_card.c **** }
 130              	 .loc 1 24 0
 131 0014 0837     	 adds r7,r7,#8
 132              	.LCFI9:
 133              	 .cfi_def_cfa_offset 8
 134 0016 BD46     	 mov sp,r7
 135              	.LCFI10:
 136              	 .cfi_def_cfa_register 13
 137              	 
 138 0018 80BD     	 pop {r7,pc}
 139              	.L8:
 140 001a 00BF     	 .align 2
 141              	.L7:
 142 001c 00000000 	 .word UART_0
 143              	 .cfi_endproc
 144              	.LFE606:
 146              	 .section .rodata
 147 0011 000000   	 .align 2
 148              	.LC1:
 149 0014 0D0A00   	 .ascii "\015\012\000"
 150              	 .section .text.transmit_cid_over_uart,"ax",%progbits
 151              	 .align 2
 152              	 .global transmit_cid_over_uart
 153              	 .thumb
 154              	 .thumb_func
 156              	transmit_cid_over_uart:
 157              	.LFB607:
  25:../4g_module/sd_card.c **** 
  26:../4g_module/sd_card.c **** void transmit_cid_over_uart(const SDMMC_BLOCK_CID_t *cid) {
 158              	 .loc 1 26 0
 159              	 .cfi_startproc
 160              	 
 161              	 
 162 0000 80B5     	 push {r7,lr}
 163              	.LCFI11:
 164              	 .cfi_def_cfa_offset 8
 165              	 .cfi_offset 7,-8
 166              	 .cfi_offset 14,-4
 167 0002 82B0     	 sub sp,sp,#8
 168              	.LCFI12:
 169              	 .cfi_def_cfa_offset 16
 170 0004 00AF     	 add r7,sp,#0
 171              	.LCFI13:
 172              	 .cfi_def_cfa_register 7
 173 0006 7860     	 str r0,[r7,#4]
  27:../4g_module/sd_card.c ****     int_to_hex(cid->manufacturing_date, uart_tx_buffer);
 174              	 .loc 1 27 0
 175 0008 7B68     	 ldr r3,[r7,#4]
 176 000a 1B88     	 ldrh r3,[r3]
 177 000c 1846     	 mov r0,r3
 178 000e 1449     	 ldr r1,.L10
 179 0010 FFF7FEFF 	 bl int_to_hex
  28:../4g_module/sd_card.c ****     uart_send_string(uart_tx_buffer, 8);
 180              	 .loc 1 28 0
 181 0014 1248     	 ldr r0,.L10
 182 0016 0821     	 movs r1,#8
 183 0018 FFF7FEFF 	 bl uart_send_string
  29:../4g_module/sd_card.c **** 
  30:../4g_module/sd_card.c ****     int_to_hex(cid->product_serial_num, uart_tx_buffer);
 184              	 .loc 1 30 0
 185 001c 7B68     	 ldr r3,[r7,#4]
 186 001e 5B68     	 ldr r3,[r3,#4]
 187 0020 1846     	 mov r0,r3
 188 0022 0F49     	 ldr r1,.L10
 189 0024 FFF7FEFF 	 bl int_to_hex
  31:../4g_module/sd_card.c ****     uart_send_string(uart_tx_buffer, 8);
 190              	 .loc 1 31 0
 191 0028 0D48     	 ldr r0,.L10
 192 002a 0821     	 movs r1,#8
 193 002c FFF7FEFF 	 bl uart_send_string
  32:../4g_module/sd_card.c **** 
  33:../4g_module/sd_card.c ****     int_to_hex(cid->product_rev, uart_tx_buffer);
 194              	 .loc 1 33 0
 195 0030 7B68     	 ldr r3,[r7,#4]
 196 0032 1B7A     	 ldrb r3,[r3,#8]
 197 0034 1846     	 mov r0,r3
 198 0036 0A49     	 ldr r1,.L10
 199 0038 FFF7FEFF 	 bl int_to_hex
  34:../4g_module/sd_card.c ****     uart_send_string(uart_tx_buffer, 2);
 200              	 .loc 1 34 0
 201 003c 0848     	 ldr r0,.L10
 202 003e 0221     	 movs r1,#2
 203 0040 FFF7FEFF 	 bl uart_send_string
  35:../4g_module/sd_card.c **** 
  36:../4g_module/sd_card.c ****     uart_send_string((char *)cid->product_name, 5);
 204              	 .loc 1 36 0
 205 0044 7B68     	 ldr r3,[r7,#4]
 206 0046 0933     	 adds r3,r3,#9
 207 0048 1846     	 mov r0,r3
 208 004a 0521     	 movs r1,#5
 209 004c FFF7FEFF 	 bl uart_send_string
  37:../4g_module/sd_card.c **** 
  38:../4g_module/sd_card.c ****     uart_send_string("\r\n", 2);
 210              	 .loc 1 38 0
 211 0050 0448     	 ldr r0,.L10+4
 212 0052 0221     	 movs r1,#2
 213 0054 FFF7FEFF 	 bl uart_send_string
  39:../4g_module/sd_card.c **** }
 214              	 .loc 1 39 0
 215 0058 0837     	 adds r7,r7,#8
 216              	.LCFI14:
 217              	 .cfi_def_cfa_offset 8
 218 005a BD46     	 mov sp,r7
 219              	.LCFI15:
 220              	 .cfi_def_cfa_register 13
 221              	 
 222 005c 80BD     	 pop {r7,pc}
 223              	.L11:
 224 005e 00BF     	 .align 2
 225              	.L10:
 226 0060 00000000 	 .word uart_tx_buffer
 227 0064 14000000 	 .word .LC1
 228              	 .cfi_endproc
 229              	.LFE607:
 231              	 .section .rodata
 232 0017 00       	 .align 2
 233              	.LC2:
 234 0018 303A00   	 .ascii "0:\000"
 235 001b 00       	 .align 2
 236              	.LC3:
 237 001c 46696C65 	 .ascii "File system mounted\012\000"
 237      20737973 
 237      74656D20 
 237      6D6F756E 
 237      7465640A 
 238 0031 000000   	 .align 2
 239              	.LC4:
 240 0034 00       	 .ascii "\000"
 241 0035 000000   	 .align 2
 242              	.LC5:
 243 0038 46726565 	 .ascii "Free space (KB): \000"
 243      20737061 
 243      63652028 
 243      4B42293A 
 243      2000
 244 004a 0000     	 .align 2
 245              	.LC6:
 246 004c 0A00     	 .ascii "\012\000"
 247 004e 0000     	 .align 2
 248              	.LC7:
 249 0050 546F7461 	 .ascii "Total space (KB): \000"
 249      6C207370 
 249      61636520 
 249      284B4229 
 249      3A2000
 250 0063 00       	 .align 2
 251              	.LC8:
 252 0064 4661696C 	 .ascii "Failed to retrieve CID\015\012\000"
 252      65642074 
 252      6F207265 
 252      74726965 
 252      76652043 
 253              	 .section .text.initialize_sd_card_and_transmit_cid,"ax",%progbits
 254              	 .align 2
 255              	 .global initialize_sd_card_and_transmit_cid
 256              	 .thumb
 257              	 .thumb_func
 259              	initialize_sd_card_and_transmit_cid:
 260              	.LFB608:
  40:../4g_module/sd_card.c **** 
  41:../4g_module/sd_card.c **** void initialize_sd_card_and_transmit_cid(void) {
 261              	 .loc 1 41 0
 262              	 .cfi_startproc
 263              	 
 264              	 
 265 0000 80B5     	 push {r7,lr}
 266              	.LCFI16:
 267              	 .cfi_def_cfa_offset 8
 268              	 .cfi_offset 7,-8
 269              	 .cfi_offset 14,-4
 270 0002 8AB0     	 sub sp,sp,#40
 271              	.LCFI17:
 272              	 .cfi_def_cfa_offset 48
 273 0004 00AF     	 add r7,sp,#0
 274              	.LCFI18:
 275              	 .cfi_def_cfa_register 7
  42:../4g_module/sd_card.c ****     DAVE_STATUS_t status;
  43:../4g_module/sd_card.c ****     SDMMC_BLOCK_STATUS_t sdmmc_status;
  44:../4g_module/sd_card.c ****     SDMMC_BLOCK_CID_t cid;
  45:../4g_module/sd_card.c ****     sdmmc_status = SDMMC_BLOCK_Initialize(&SDMMC_BLOCK_0);
 276              	 .loc 1 45 0
 277 0006 3948     	 ldr r0,.L16
 278 0008 FFF7FEFF 	 bl SDMMC_BLOCK_Initialize
 279 000c 0346     	 mov r3,r0
 280 000e 87F82730 	 strb r3,[r7,#39]
  46:../4g_module/sd_card.c **** 
  47:../4g_module/sd_card.c ****     if (sdmmc_status != SDMMC_BLOCK_STATUS_SUCCESS) {
  48:../4g_module/sd_card.c ****     }
  49:../4g_module/sd_card.c **** 
  50:../4g_module/sd_card.c ****     sdmmc_status = SDMMC_BLOCK_Ioctl(&SDMMC_BLOCK_0, SDMMC_BLOCK_MMC_GET_CID, &cid);
 281              	 .loc 1 50 0
 282 0012 07F10C03 	 add r3,r7,#12
 283 0016 3548     	 ldr r0,.L16
 284 0018 0C21     	 movs r1,#12
 285 001a 1A46     	 mov r2,r3
 286 001c FFF7FEFF 	 bl SDMMC_BLOCK_Ioctl
 287 0020 0346     	 mov r3,r0
 288 0022 87F82730 	 strb r3,[r7,#39]
  51:../4g_module/sd_card.c **** 
  52:../4g_module/sd_card.c ****     if (sdmmc_status == SDMMC_BLOCK_STATUS_SUCCESS) {
 289              	 .loc 1 52 0
 290 0026 97F82730 	 ldrb r3,[r7,#39]
 291 002a 002B     	 cmp r3,#0
 292 002c 5AD1     	 bne .L12
  53:../4g_module/sd_card.c ****         transmit_cid_over_uart(&cid);
 293              	 .loc 1 53 0
 294 002e 07F10C03 	 add r3,r7,#12
 295 0032 1846     	 mov r0,r3
 296 0034 FFF7FEFF 	 bl transmit_cid_over_uart
  54:../4g_module/sd_card.c ****         res = f_mount(&fs, "0:", 1);
 297              	 .loc 1 54 0
 298 0038 2D48     	 ldr r0,.L16+4
 299 003a 2E49     	 ldr r1,.L16+8
 300 003c 0122     	 movs r2,#1
 301 003e FFF7FEFF 	 bl f_mount
 302 0042 0346     	 mov r3,r0
 303 0044 1A46     	 mov r2,r3
 304 0046 2C4B     	 ldr r3,.L16+12
 305 0048 1A70     	 strb r2,[r3]
  55:../4g_module/sd_card.c ****             if (res == FR_OK) {
 306              	 .loc 1 55 0
 307 004a 2B4B     	 ldr r3,.L16+12
 308 004c 1B78     	 ldrb r3,[r3]
 309 004e 002B     	 cmp r3,#0
 310 0050 48D1     	 bne .L12
 311              	.LBB2:
  56:../4g_module/sd_card.c ****                 UART_Transmit(&UART_0, "File system mounted\n", strlen("File system mounted\n"));
 312              	 .loc 1 56 0
 313 0052 2A48     	 ldr r0,.L16+16
 314 0054 2A49     	 ldr r1,.L16+20
 315 0056 1422     	 movs r2,#20
 316 0058 FFF7FEFF 	 bl UART_Transmit
  57:../4g_module/sd_card.c **** 
  58:../4g_module/sd_card.c ****                 // Check free space
  59:../4g_module/sd_card.c ****                 FATFS *fsp;
  60:../4g_module/sd_card.c ****                 DWORD fre_clust, fre_sect, tot_sect;
  61:../4g_module/sd_card.c ****                 fsp = &fs;
 317              	 .loc 1 61 0
 318 005c 244B     	 ldr r3,.L16+4
 319 005e BB60     	 str r3,[r7,#8]
  62:../4g_module/sd_card.c ****                 res = f_getfree("", &fre_clust, &fsp);
 320              	 .loc 1 62 0
 321 0060 3A1D     	 adds r2,r7,#4
 322 0062 07F10803 	 add r3,r7,#8
 323 0066 2748     	 ldr r0,.L16+24
 324 0068 1146     	 mov r1,r2
 325 006a 1A46     	 mov r2,r3
 326 006c FFF7FEFF 	 bl f_getfree
 327 0070 0346     	 mov r3,r0
 328 0072 1A46     	 mov r2,r3
 329 0074 204B     	 ldr r3,.L16+12
 330 0076 1A70     	 strb r2,[r3]
  63:../4g_module/sd_card.c ****                 if (res == FR_OK) {
 331              	 .loc 1 63 0
 332 0078 1F4B     	 ldr r3,.L16+12
 333 007a 1B78     	 ldrb r3,[r3]
 334 007c 002B     	 cmp r3,#0
 335 007e 2DD1     	 bne .L14
  64:../4g_module/sd_card.c ****                     // Get total sectors and multiply by sector size
  65:../4g_module/sd_card.c ****                     tot_sect = (fsp->n_fatent - 2) * fsp->csize;
 336              	 .loc 1 65 0
 337 0080 BB68     	 ldr r3,[r7,#8]
 338 0082 9B69     	 ldr r3,[r3,#24]
 339 0084 023B     	 subs r3,r3,#2
 340 0086 BA68     	 ldr r2,[r7,#8]
 341 0088 5289     	 ldrh r2,[r2,#10]
 342 008a 02FB03F3 	 mul r3,r2,r3
 343 008e 3B62     	 str r3,[r7,#32]
  66:../4g_module/sd_card.c ****                     UART_Transmit(&UART_0, "Free space (KB): ", strlen("Free space (KB): "));
 344              	 .loc 1 66 0
 345 0090 1A48     	 ldr r0,.L16+16
 346 0092 1D49     	 ldr r1,.L16+28
 347 0094 1122     	 movs r2,#17
 348 0096 FFF7FEFF 	 bl UART_Transmit
  67:../4g_module/sd_card.c ****                     UART_Transmit_Integer(&UART_0, (fre_clust * fsp->csize) / 2);
 349              	 .loc 1 67 0
 350 009a BB68     	 ldr r3,[r7,#8]
 351 009c 5B89     	 ldrh r3,[r3,#10]
 352 009e 1A46     	 mov r2,r3
 353 00a0 7B68     	 ldr r3,[r7,#4]
 354 00a2 03FB02F3 	 mul r3,r3,r2
 355 00a6 5B08     	 lsrs r3,r3,#1
 356 00a8 1448     	 ldr r0,.L16+16
 357 00aa 1946     	 mov r1,r3
 358 00ac FFF7FEFF 	 bl UART_Transmit_Integer
  68:../4g_module/sd_card.c ****                     UART_Transmit(&UART_0, "\n", strlen("\n"));
 359              	 .loc 1 68 0
 360 00b0 1248     	 ldr r0,.L16+16
 361 00b2 1649     	 ldr r1,.L16+32
 362 00b4 0122     	 movs r2,#1
 363 00b6 FFF7FEFF 	 bl UART_Transmit
  69:../4g_module/sd_card.c **** 
  70:../4g_module/sd_card.c ****                     UART_Transmit(&UART_0, "Total space (KB): ", strlen("Total space (KB): "));
 364              	 .loc 1 70 0
 365 00ba 1048     	 ldr r0,.L16+16
 366 00bc 1449     	 ldr r1,.L16+36
 367 00be 1222     	 movs r2,#18
 368 00c0 FFF7FEFF 	 bl UART_Transmit
  71:../4g_module/sd_card.c ****                     UART_Transmit_Integer(&UART_0, (tot_sect) / 2);
 369              	 .loc 1 71 0
 370 00c4 3B6A     	 ldr r3,[r7,#32]
 371 00c6 5B08     	 lsrs r3,r3,#1
 372 00c8 0C48     	 ldr r0,.L16+16
 373 00ca 1946     	 mov r1,r3
 374 00cc FFF7FEFF 	 bl UART_Transmit_Integer
  72:../4g_module/sd_card.c ****                     UART_Transmit(&UART_0, "\n", strlen("\n"));
 375              	 .loc 1 72 0
 376 00d0 0A48     	 ldr r0,.L16+16
 377 00d2 0E49     	 ldr r1,.L16+32
 378 00d4 0122     	 movs r2,#1
 379 00d6 FFF7FEFF 	 bl UART_Transmit
 380 00da 03E0     	 b .L12
 381              	.L14:
  73:../4g_module/sd_card.c ****     } else {
  74:../4g_module/sd_card.c ****         uart_send_string("Failed to retrieve CID\r\n", strlen("Failed to retrieve CID\r\n"));
 382              	 .loc 1 74 0
 383 00dc 0D48     	 ldr r0,.L16+40
 384 00de 1821     	 movs r1,#24
 385 00e0 FFF7FEFF 	 bl uart_send_string
 386              	.L12:
 387              	.LBE2:
  75:../4g_module/sd_card.c ****     }
  76:../4g_module/sd_card.c **** 
  77:../4g_module/sd_card.c **** }
  78:../4g_module/sd_card.c **** }
  79:../4g_module/sd_card.c **** }
 388              	 .loc 1 79 0
 389 00e4 2837     	 adds r7,r7,#40
 390              	.LCFI19:
 391              	 .cfi_def_cfa_offset 8
 392 00e6 BD46     	 mov sp,r7
 393              	.LCFI20:
 394              	 .cfi_def_cfa_register 13
 395              	 
 396 00e8 80BD     	 pop {r7,pc}
 397              	.L17:
 398 00ea 00BF     	 .align 2
 399              	.L16:
 400 00ec 00000000 	 .word SDMMC_BLOCK_0
 401 00f0 00000000 	 .word fs
 402 00f4 18000000 	 .word .LC2
 403 00f8 00000000 	 .word res
 404 00fc 00000000 	 .word UART_0
 405 0100 1C000000 	 .word .LC3
 406 0104 34000000 	 .word .LC4
 407 0108 38000000 	 .word .LC5
 408 010c 4C000000 	 .word .LC6
 409 0110 50000000 	 .word .LC7
 410 0114 64000000 	 .word .LC8
 411              	 .cfi_endproc
 412              	.LFE608:
 414              	 .section .rodata
 415 007d 000000   	 .align 2
 416              	.LC9:
 417 0080 4572726F 	 .ascii "Error opening file for writing.\012\000"
 417      72206F70 
 417      656E696E 
 417      67206669 
 417      6C652066 
 418 00a1 000000   	 .align 2
 419              	.LC10:
 420 00a4 53746172 	 .ascii "Start %d\012\000"
 420      74202564 
 420      0A00
 421 00ae 0000     	 .align 2
 422              	.LC11:
 423 00b0 4572726F 	 .ascii "Error writing start of packet.\012\000"
 423      72207772 
 423      6974696E 
 423      67207374 
 423      61727420 
 424              	 .align 2
 425              	.LC12:
 426 00d0 4572726F 	 .ascii "Error writing packet data.\012\000"
 426      72207772 
 426      6974696E 
 426      67207061 
 426      636B6574 
 427              	 .align 2
 428              	.LC13:
 429 00ec 5061636B 	 .ascii "Packet size exceeds the maximum packet size. Skippi"
 429      65742073 
 429      697A6520 
 429      65786365 
 429      65647320 
 430 011f 6E672077 	 .ascii "ng writing.\012\000"
 430      72697469 
 430      6E672E0A 
 430      00
 431              	 .align 2
 432              	.LC14:
 433 012c 0A456E64 	 .ascii "\012End %d\012\012\000"
 433      2025640A 
 433      0A00
 434 0136 0000     	 .align 2
 435              	.LC15:
 436 0138 4572726F 	 .ascii "Error writing end of packet.\012\000"
 436      72207772 
 436      6974696E 
 436      6720656E 
 436      64206F66 
 437 0156 0000     	 .align 2
 438              	.LC16:
 439 0158 4572726F 	 .ascii "Error closing file.\012\000"
 439      7220636C 
 439      6F73696E 
 439      67206669 
 439      6C652E0A 
 440 016d 000000   	 .align 2
 441              	.LC17:
 442 0170 5061636B 	 .ascii "Packets written to file successfully.\012\000"
 442      65747320 
 442      77726974 
 442      74656E20 
 442      746F2066 
 443              	 .section .text.writePacketsToFile,"ax",%progbits
 444              	 .align 2
 445              	 .global writePacketsToFile
 446              	 .thumb
 447              	 .thumb_func
 449              	writePacketsToFile:
 450              	.LFB609:
  80:../4g_module/sd_card.c **** 
  81:../4g_module/sd_card.c **** 
  82:../4g_module/sd_card.c **** void writePacketsToFile(const char *filename, const char *packetBuffer, size_t bufferSize) {
 451              	 .loc 1 82 0
 452              	 .cfi_startproc
 453              	 
 454              	 
 455 0000 90B5     	 push {r4,r7,lr}
 456              	.LCFI21:
 457              	 .cfi_def_cfa_offset 12
 458              	 .cfi_offset 4,-12
 459              	 .cfi_offset 7,-8
 460              	 .cfi_offset 14,-4
 461 0002 ADF52D7D 	 sub sp,sp,#692
 462              	.LCFI22:
 463              	 .cfi_def_cfa_offset 704
 464 0006 00AF     	 add r7,sp,#0
 465              	.LCFI23:
 466              	 .cfi_def_cfa_register 7
 467 0008 07F10C03 	 add r3,r7,#12
 468 000c 1860     	 str r0,[r3]
 469 000e 07F10803 	 add r3,r7,#8
 470 0012 1960     	 str r1,[r3]
 471 0014 3B1D     	 adds r3,r7,#4
 472 0016 1A60     	 str r2,[r3]
  83:../4g_module/sd_card.c ****     FIL file;
  84:../4g_module/sd_card.c ****     FRESULT res;
  85:../4g_module/sd_card.c ****     UINT bytesWritten;
  86:../4g_module/sd_card.c **** 
  87:../4g_module/sd_card.c ****     // Open the file for appending
  88:../4g_module/sd_card.c ****     res = f_open(&file, filename, FA_OPEN_APPEND | FA_WRITE);
 473              	 .loc 1 88 0
 474 0018 07F17C02 	 add r2,r7,#124
 475 001c 07F10C03 	 add r3,r7,#12
 476 0020 1046     	 mov r0,r2
 477 0022 1968     	 ldr r1,[r3]
 478 0024 3222     	 movs r2,#50
 479 0026 FFF7FEFF 	 bl f_open
 480 002a 0346     	 mov r3,r0
 481 002c 87F8AB32 	 strb r3,[r7,#683]
  89:../4g_module/sd_card.c ****     if (res != FR_OK) {
 482              	 .loc 1 89 0
 483 0030 97F8AB32 	 ldrb r3,[r7,#683]
 484 0034 002B     	 cmp r3,#0
 485 0036 05D0     	 beq .L19
  90:../4g_module/sd_card.c ****         UART_Transmit(&UART_0, "Error opening file for writing.\n", strlen("Error opening file for 
 486              	 .loc 1 90 0
 487 0038 5948     	 ldr r0,.L30
 488 003a 5A49     	 ldr r1,.L30+4
 489 003c 2022     	 movs r2,#32
 490 003e FFF7FEFF 	 bl UART_Transmit
  91:../4g_module/sd_card.c ****         return;
 491              	 .loc 1 91 0
 492 0042 A8E0     	 b .L18
 493              	.L19:
 494              	.LBB3:
  92:../4g_module/sd_card.c ****     }
  93:../4g_module/sd_card.c **** 
  94:../4g_module/sd_card.c ****     // Write packets to the file
  95:../4g_module/sd_card.c ****     for (int i = 0; i < NUM_PACKETS; i++) {
 495              	 .loc 1 95 0
 496 0044 0023     	 movs r3,#0
 497 0046 C7F8AC32 	 str r3,[r7,#684]
 498 004a 88E0     	 b .L21
 499              	.L27:
 500              	.LBB4:
  96:../4g_module/sd_card.c ****         // Write start of packet
  97:../4g_module/sd_card.c ****         char startPacket[50];
  98:../4g_module/sd_card.c ****         snprintf(startPacket, sizeof(startPacket), "Start %d\n", i + 1);
 501              	 .loc 1 98 0
 502 004c D7F8AC32 	 ldr r3,[r7,#684]
 503 0050 0133     	 adds r3,r3,#1
 504 0052 07F11002 	 add r2,r7,#16
 505 0056 1046     	 mov r0,r2
 506 0058 3221     	 movs r1,#50
 507 005a 534A     	 ldr r2,.L30+8
 508 005c FFF7FEFF 	 bl snprintf
  99:../4g_module/sd_card.c ****         res = f_write(&file, startPacket, strlen(startPacket), &bytesWritten);
 509              	 .loc 1 99 0
 510 0060 07F11003 	 add r3,r7,#16
 511 0064 1846     	 mov r0,r3
 512 0066 FFF7FEFF 	 bl strlen
 513 006a 0446     	 mov r4,r0
 514 006c 07F17C01 	 add r1,r7,#124
 515 0070 07F11002 	 add r2,r7,#16
 516 0074 07F17803 	 add r3,r7,#120
 517 0078 0846     	 mov r0,r1
 518 007a 1146     	 mov r1,r2
 519 007c 2246     	 mov r2,r4
 520 007e FFF7FEFF 	 bl f_write
 521 0082 0346     	 mov r3,r0
 522 0084 87F8AB32 	 strb r3,[r7,#683]
 100:../4g_module/sd_card.c ****         if (res != FR_OK) {
 523              	 .loc 1 100 0
 524 0088 97F8AB32 	 ldrb r3,[r7,#683]
 525 008c 002B     	 cmp r3,#0
 526 008e 0AD0     	 beq .L22
 101:../4g_module/sd_card.c ****             UART_Transmit(&UART_0, "Error writing start of packet.\n", strlen("Error writing start 
 527              	 .loc 1 101 0
 528 0090 4348     	 ldr r0,.L30
 529 0092 4649     	 ldr r1,.L30+12
 530 0094 1F22     	 movs r2,#31
 531 0096 FFF7FEFF 	 bl UART_Transmit
 102:../4g_module/sd_card.c ****             f_close(&file);
 532              	 .loc 1 102 0
 533 009a 07F17C03 	 add r3,r7,#124
 534 009e 1846     	 mov r0,r3
 535 00a0 FFF7FEFF 	 bl f_close
 103:../4g_module/sd_card.c ****             return;
 536              	 .loc 1 103 0
 537 00a4 77E0     	 b .L18
 538              	.L22:
 104:../4g_module/sd_card.c ****         }
 105:../4g_module/sd_card.c **** 
 106:../4g_module/sd_card.c ****         // Write packet buffer
 107:../4g_module/sd_card.c ****         if (bufferSize <= PACKET_SIZE) {
 539              	 .loc 1 107 0
 540 00a6 3B1D     	 adds r3,r7,#4
 541 00a8 1B68     	 ldr r3,[r3]
 542 00aa B3F5807F 	 cmp r3,#256
 543 00ae 1ED8     	 bhi .L24
 108:../4g_module/sd_card.c ****             res = f_write(&file, packetBuffer, bufferSize, &bytesWritten);
 544              	 .loc 1 108 0
 545 00b0 07F17C01 	 add r1,r7,#124
 546 00b4 07F10802 	 add r2,r7,#8
 547 00b8 3B1D     	 adds r3,r7,#4
 548 00ba 07F17804 	 add r4,r7,#120
 549 00be 0846     	 mov r0,r1
 550 00c0 1168     	 ldr r1,[r2]
 551 00c2 1A68     	 ldr r2,[r3]
 552 00c4 2346     	 mov r3,r4
 553 00c6 FFF7FEFF 	 bl f_write
 554 00ca 0346     	 mov r3,r0
 555 00cc 87F8AB32 	 strb r3,[r7,#683]
 109:../4g_module/sd_card.c ****             if (res != FR_OK) {
 556              	 .loc 1 109 0
 557 00d0 97F8AB32 	 ldrb r3,[r7,#683]
 558 00d4 002B     	 cmp r3,#0
 559 00d6 0FD0     	 beq .L25
 110:../4g_module/sd_card.c ****                 UART_Transmit(&UART_0, "Error writing packet data.\n", strlen("Error writing packet
 560              	 .loc 1 110 0
 561 00d8 3148     	 ldr r0,.L30
 562 00da 3549     	 ldr r1,.L30+16
 563 00dc 1B22     	 movs r2,#27
 564 00de FFF7FEFF 	 bl UART_Transmit
 111:../4g_module/sd_card.c ****                 f_close(&file);
 565              	 .loc 1 111 0
 566 00e2 07F17C03 	 add r3,r7,#124
 567 00e6 1846     	 mov r0,r3
 568 00e8 FFF7FEFF 	 bl f_close
 112:../4g_module/sd_card.c ****                 return;
 569              	 .loc 1 112 0
 570 00ec 53E0     	 b .L18
 571              	.L24:
 113:../4g_module/sd_card.c ****             }
 114:../4g_module/sd_card.c ****         } else {
 115:../4g_module/sd_card.c ****             UART_Transmit(&UART_0, "Packet size exceeds the maximum packet size. Skipping writing.\
 572              	 .loc 1 115 0
 573 00ee 2C48     	 ldr r0,.L30
 574 00f0 3049     	 ldr r1,.L30+20
 575 00f2 3F22     	 movs r2,#63
 576 00f4 FFF7FEFF 	 bl UART_Transmit
 577              	.L25:
 116:../4g_module/sd_card.c ****         }
 117:../4g_module/sd_card.c **** 
 118:../4g_module/sd_card.c ****         // Write end of packet
 119:../4g_module/sd_card.c ****         char endPacket[50];
 120:../4g_module/sd_card.c ****         snprintf(endPacket, sizeof(endPacket), "\nEnd %d\n\n", i + 1);
 578              	 .loc 1 120 0
 579 00f8 D7F8AC32 	 ldr r3,[r7,#684]
 580 00fc 0133     	 adds r3,r3,#1
 581 00fe 07F14402 	 add r2,r7,#68
 582 0102 1046     	 mov r0,r2
 583 0104 3221     	 movs r1,#50
 584 0106 2C4A     	 ldr r2,.L30+24
 585 0108 FFF7FEFF 	 bl snprintf
 121:../4g_module/sd_card.c ****         res = f_write(&file, endPacket, strlen(endPacket), &bytesWritten);
 586              	 .loc 1 121 0
 587 010c 07F14403 	 add r3,r7,#68
 588 0110 1846     	 mov r0,r3
 589 0112 FFF7FEFF 	 bl strlen
 590 0116 0446     	 mov r4,r0
 591 0118 07F17C01 	 add r1,r7,#124
 592 011c 07F14402 	 add r2,r7,#68
 593 0120 07F17803 	 add r3,r7,#120
 594 0124 0846     	 mov r0,r1
 595 0126 1146     	 mov r1,r2
 596 0128 2246     	 mov r2,r4
 597 012a FFF7FEFF 	 bl f_write
 598 012e 0346     	 mov r3,r0
 599 0130 87F8AB32 	 strb r3,[r7,#683]
 122:../4g_module/sd_card.c ****         if (res != FR_OK) {
 600              	 .loc 1 122 0
 601 0134 97F8AB32 	 ldrb r3,[r7,#683]
 602 0138 002B     	 cmp r3,#0
 603 013a 0BD0     	 beq .L26
 123:../4g_module/sd_card.c ****             UART_Transmit(&UART_0, "Error writing end of packet.\n", strlen("Error writing end of p
 604              	 .loc 1 123 0
 605 013c 1848     	 ldr r0,.L30
 606 013e 1F49     	 ldr r1,.L30+28
 607 0140 1D22     	 movs r2,#29
 608 0142 FFF7FEFF 	 bl UART_Transmit
 124:../4g_module/sd_card.c ****             f_close(&file);
 609              	 .loc 1 124 0
 610 0146 07F17C03 	 add r3,r7,#124
 611 014a 1846     	 mov r0,r3
 612 014c FFF7FEFF 	 bl f_close
 125:../4g_module/sd_card.c ****             return;
 613              	 .loc 1 125 0
 614 0150 00BF     	 nop
 615 0152 20E0     	 b .L18
 616              	.L26:
 617              	.LBE4:
  95:../4g_module/sd_card.c ****         // Write start of packet
 618              	 .loc 1 95 0
 619 0154 D7F8AC32 	 ldr r3,[r7,#684]
 620 0158 0133     	 adds r3,r3,#1
 621 015a C7F8AC32 	 str r3,[r7,#684]
 622              	.L21:
  95:../4g_module/sd_card.c ****         // Write start of packet
 623              	 .loc 1 95 0 is_stmt 0 discriminator 1
 624 015e D7F8AC32 	 ldr r3,[r7,#684]
 625 0162 002B     	 cmp r3,#0
 626 0164 7FF772AF 	 ble .L27
 627              	.LBE3:
 126:../4g_module/sd_card.c ****         }
 127:../4g_module/sd_card.c ****     }
 128:../4g_module/sd_card.c **** 
 129:../4g_module/sd_card.c ****     // Close the file
 130:../4g_module/sd_card.c ****     res = f_close(&file);
 628              	 .loc 1 130 0 is_stmt 1
 629 0168 07F17C03 	 add r3,r7,#124
 630 016c 1846     	 mov r0,r3
 631 016e FFF7FEFF 	 bl f_close
 632 0172 0346     	 mov r3,r0
 633 0174 87F8AB32 	 strb r3,[r7,#683]
 131:../4g_module/sd_card.c ****     if (res != FR_OK) {
 634              	 .loc 1 131 0
 635 0178 97F8AB32 	 ldrb r3,[r7,#683]
 636 017c 002B     	 cmp r3,#0
 637 017e 05D0     	 beq .L28
 132:../4g_module/sd_card.c ****         UART_Transmit(&UART_0, "Error closing file.\n", strlen("Error closing file.\n"));
 638              	 .loc 1 132 0
 639 0180 0748     	 ldr r0,.L30
 640 0182 0F49     	 ldr r1,.L30+32
 641 0184 1422     	 movs r2,#20
 642 0186 FFF7FEFF 	 bl UART_Transmit
 133:../4g_module/sd_card.c ****         return;
 643              	 .loc 1 133 0
 644 018a 04E0     	 b .L18
 645              	.L28:
 134:../4g_module/sd_card.c ****     }
 135:../4g_module/sd_card.c **** 
 136:../4g_module/sd_card.c ****     UART_Transmit(&UART_0, "Packets written to file successfully.\n", strlen("Packets written to fi
 646              	 .loc 1 136 0
 647 018c 0448     	 ldr r0,.L30
 648 018e 0D49     	 ldr r1,.L30+36
 649 0190 2622     	 movs r2,#38
 650 0192 FFF7FEFF 	 bl UART_Transmit
 651              	.L18:
 137:../4g_module/sd_card.c **** }
 652              	 .loc 1 137 0
 653 0196 07F52D77 	 add r7,r7,#692
 654              	.LCFI24:
 655              	 .cfi_def_cfa_offset 12
 656 019a BD46     	 mov sp,r7
 657              	.LCFI25:
 658              	 .cfi_def_cfa_register 13
 659              	 
 660 019c 90BD     	 pop {r4,r7,pc}
 661              	.L31:
 662 019e 00BF     	 .align 2
 663              	.L30:
 664 01a0 00000000 	 .word UART_0
 665 01a4 80000000 	 .word .LC9
 666 01a8 A4000000 	 .word .LC10
 667 01ac B0000000 	 .word .LC11
 668 01b0 D0000000 	 .word .LC12
 669 01b4 EC000000 	 .word .LC13
 670 01b8 2C010000 	 .word .LC14
 671 01bc 38010000 	 .word .LC15
 672 01c0 58010000 	 .word .LC16
 673 01c4 70010000 	 .word .LC17
 674              	 .cfi_endproc
 675              	.LFE609:
 677              	 .section .rodata
 678 0197 00       	 .align 2
 679              	.LC18:
 680 0198 256400   	 .ascii "%d\000"
 681 019b 00       	 .section .text.UART_Transmit_Integer,"ax",%progbits
 682              	 .align 2
 683              	 .global UART_Transmit_Integer
 684              	 .thumb
 685              	 .thumb_func
 687              	UART_Transmit_Integer:
 688              	.LFB610:
 138:../4g_module/sd_card.c **** 
 139:../4g_module/sd_card.c **** void UART_Transmit_Integer(const UART_t *const handle, int value) {
 689              	 .loc 1 139 0
 690              	 .cfi_startproc
 691              	 
 692              	 
 693 0000 80B5     	 push {r7,lr}
 694              	.LCFI26:
 695              	 .cfi_def_cfa_offset 8
 696              	 .cfi_offset 7,-8
 697              	 .cfi_offset 14,-4
 698 0002 88B0     	 sub sp,sp,#32
 699              	.LCFI27:
 700              	 .cfi_def_cfa_offset 40
 701 0004 00AF     	 add r7,sp,#0
 702              	.LCFI28:
 703              	 .cfi_def_cfa_register 7
 704 0006 7860     	 str r0,[r7,#4]
 705 0008 3960     	 str r1,[r7]
 140:../4g_module/sd_card.c ****     char buffer[20]; // Assuming a maximum of 20 digits for an integer
 141:../4g_module/sd_card.c ****     sprintf(buffer, "%d", value); // Convert integer to string
 706              	 .loc 1 141 0
 707 000a 07F10C03 	 add r3,r7,#12
 708 000e 1846     	 mov r0,r3
 709 0010 0949     	 ldr r1,.L33
 710 0012 3A68     	 ldr r2,[r7]
 711 0014 FFF7FEFF 	 bl sprintf
 142:../4g_module/sd_card.c ****     UART_Transmit(&UART_0, buffer, strlen(buffer)); // Transmit the string via UART
 712              	 .loc 1 142 0
 713 0018 07F10C03 	 add r3,r7,#12
 714 001c 1846     	 mov r0,r3
 715 001e FFF7FEFF 	 bl strlen
 716 0022 0246     	 mov r2,r0
 717 0024 07F10C03 	 add r3,r7,#12
 718 0028 0448     	 ldr r0,.L33+4
 719 002a 1946     	 mov r1,r3
 720 002c FFF7FEFF 	 bl UART_Transmit
 143:../4g_module/sd_card.c **** }
 721              	 .loc 1 143 0
 722 0030 2037     	 adds r7,r7,#32
 723              	.LCFI29:
 724              	 .cfi_def_cfa_offset 8
 725 0032 BD46     	 mov sp,r7
 726              	.LCFI30:
 727              	 .cfi_def_cfa_register 13
 728              	 
 729 0034 80BD     	 pop {r7,pc}
 730              	.L34:
 731 0036 00BF     	 .align 2
 732              	.L33:
 733 0038 98010000 	 .word .LC18
 734 003c 00000000 	 .word UART_0
 735              	 .cfi_endproc
 736              	.LFE610:
 738              	 .text
 739              	.Letext0:
 740              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 741              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 742              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 743              	 .file 5 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 744              	 .file 6 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_gpio.h"
 745              	 .file 7 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc4_gpio.h"
 746              	 .file 8 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_usic.h"
 747              	 .file 9 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_uart.h"
 748              	 .file 10 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/UART/uart.h"
 749              	 .file 11 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_dma.h"
 750              	 .file 12 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/GLOBAL_DMA/global_dma.h"
 751              	 .file 13 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_spi.h"
 752              	 .file 14 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/SPI_MASTER/spi_master.h"
 753              	 .file 15 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/SDMMC_BLOCK/sdmmc_block.h"
 754              	 .file 16 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/FATFS/ff_Src/ff.h"
 755              	 .file 17 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DAVE.h"
 756              	 .file 18 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/cmsis_gcc.h"
 757              	 .file 19 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/core_cm4.h"
 758              	 .file 20 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 759              	 .file 21 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/UART/uart_extern.h"
 760              	 .file 22 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/SDMMC_BLOCK/sdmmc_block_extern.h"
 761              	 .file 23 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 sd_card.c
                            *COM*:00000234 fs
                            *COM*:0000022c fil
                            *COM*:00000001 res
                            *COM*:00000064 uart_tx_buffer
    {standard input}:24     .rodata:00000000 $d
    {standard input}:28     .text.int_to_hex:00000000 $t
    {standard input}:33     .text.int_to_hex:00000000 int_to_hex
    {standard input}:96     .text.int_to_hex:00000040 $d
    {standard input}:101    .text.uart_send_string:00000000 $t
    {standard input}:106    .text.uart_send_string:00000000 uart_send_string
    {standard input}:142    .text.uart_send_string:0000001c $d
    {standard input}:151    .text.transmit_cid_over_uart:00000000 $t
    {standard input}:156    .text.transmit_cid_over_uart:00000000 transmit_cid_over_uart
    {standard input}:226    .text.transmit_cid_over_uart:00000060 $d
    {standard input}:254    .text.initialize_sd_card_and_transmit_cid:00000000 $t
    {standard input}:259    .text.initialize_sd_card_and_transmit_cid:00000000 initialize_sd_card_and_transmit_cid
    {standard input}:687    .text.UART_Transmit_Integer:00000000 UART_Transmit_Integer
    {standard input}:400    .text.initialize_sd_card_and_transmit_cid:000000ec $d
    {standard input}:444    .text.writePacketsToFile:00000000 $t
    {standard input}:449    .text.writePacketsToFile:00000000 writePacketsToFile
    {standard input}:664    .text.writePacketsToFile:000001a0 $d
    {standard input}:682    .text.UART_Transmit_Integer:00000000 $t
    {standard input}:733    .text.UART_Transmit_Integer:00000038 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
UART_Transmit
UART_0
SDMMC_BLOCK_Initialize
SDMMC_BLOCK_Ioctl
f_mount
f_getfree
SDMMC_BLOCK_0
f_open
snprintf
strlen
f_write
f_close
sprintf
