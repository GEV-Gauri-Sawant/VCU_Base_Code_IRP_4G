   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "mdm_handler.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .comm gb_isMqttConnected,1,1
  20              	 .section .data.sgu8arr_caCert,"aw",%progbits
  21              	 .align 2
  24              	sgu8arr_caCert:
  25 0000 2D       	 .byte 45
  26 0001 2D       	 .byte 45
  27 0002 2D       	 .byte 45
  28 0003 2D       	 .byte 45
  29 0004 2D       	 .byte 45
  30 0005 42       	 .byte 66
  31 0006 45       	 .byte 69
  32 0007 47       	 .byte 71
  33 0008 49       	 .byte 73
  34 0009 4E       	 .byte 78
  35 000a 20       	 .byte 32
  36 000b 43       	 .byte 67
  37 000c 45       	 .byte 69
  38 000d 52       	 .byte 82
  39 000e 54       	 .byte 84
  40 000f 49       	 .byte 73
  41 0010 46       	 .byte 70
  42 0011 49       	 .byte 73
  43 0012 43       	 .byte 67
  44 0013 41       	 .byte 65
  45 0014 54       	 .byte 84
  46 0015 45       	 .byte 69
  47 0016 2D       	 .byte 45
  48 0017 2D       	 .byte 45
  49 0018 2D       	 .byte 45
  50 0019 2D       	 .byte 45
  51 001a 2D       	 .byte 45
  52 001b 0A       	 .byte 10
  53 001c 4D       	 .byte 77
  54 001d 49       	 .byte 73
  55 001e 49       	 .byte 73
  56 001f 44       	 .byte 68
  57 0020 51       	 .byte 81
  58 0021 54       	 .byte 84
  59 0022 43       	 .byte 67
  60 0023 43       	 .byte 67
  61 0024 41       	 .byte 65
  62 0025 69       	 .byte 105
  63 0026 6D       	 .byte 109
  64 0027 67       	 .byte 103
  65 0028 41       	 .byte 65
  66 0029 77       	 .byte 119
  67 002a 49       	 .byte 73
  68 002b 42       	 .byte 66
  69 002c 41       	 .byte 65
  70 002d 67       	 .byte 103
  71 002e 49       	 .byte 73
  72 002f 54       	 .byte 84
  73 0030 42       	 .byte 66
  74 0031 6D       	 .byte 109
  75 0032 79       	 .byte 121
  76 0033 66       	 .byte 102
  77 0034 7A       	 .byte 122
  78 0035 35       	 .byte 53
  79 0036 6D       	 .byte 109
  80 0037 2F       	 .byte 47
  81 0038 6A       	 .byte 106
  82 0039 41       	 .byte 65
  83 003a 6F       	 .byte 111
  84 003b 35       	 .byte 53
  85 003c 34       	 .byte 52
  86 003d 76       	 .byte 118
  87 003e 42       	 .byte 66
  88 003f 34       	 .byte 52
  89 0040 69       	 .byte 105
  90 0041 6B       	 .byte 107
  91 0042 50       	 .byte 80
  92 0043 6D       	 .byte 109
  93 0044 6C       	 .byte 108
  94 0045 6A       	 .byte 106
  95 0046 5A       	 .byte 90
  96 0047 62       	 .byte 98
  97 0048 79       	 .byte 121
  98 0049 6A       	 .byte 106
  99 004a 41       	 .byte 65
 100 004b 4E       	 .byte 78
 101 004c 42       	 .byte 66
 102 004d 67       	 .byte 103
 103 004e 6B       	 .byte 107
 104 004f 71       	 .byte 113
 105 0050 68       	 .byte 104
 106 0051 6B       	 .byte 107
 107 0052 69       	 .byte 105
 108 0053 47       	 .byte 71
 109 0054 39       	 .byte 57
 110 0055 77       	 .byte 119
 111 0056 30       	 .byte 48
 112 0057 42       	 .byte 66
 113 0058 41       	 .byte 65
 114 0059 51       	 .byte 81
 115 005a 73       	 .byte 115
 116 005b 46       	 .byte 70
 117 005c 0A       	 .byte 10
 118 005d 41       	 .byte 65
 119 005e 44       	 .byte 68
 120 005f 41       	 .byte 65
 121 0060 35       	 .byte 53
 122 0061 4D       	 .byte 77
 123 0062 51       	 .byte 81
 124 0063 73       	 .byte 115
 125 0064 77       	 .byte 119
 126 0065 43       	 .byte 67
 127 0066 51       	 .byte 81
 128 0067 59       	 .byte 89
 129 0068 44       	 .byte 68
 130 0069 56       	 .byte 86
 131 006a 51       	 .byte 81
 132 006b 51       	 .byte 81
 133 006c 47       	 .byte 71
 134 006d 45       	 .byte 69
 135 006e 77       	 .byte 119
 136 006f 4A       	 .byte 74
 137 0070 56       	 .byte 86
 138 0071 55       	 .byte 85
 139 0072 7A       	 .byte 122
 140 0073 45       	 .byte 69
 141 0074 50       	 .byte 80
 142 0075 4D       	 .byte 77
 143 0076 41       	 .byte 65
 144 0077 30       	 .byte 48
 145 0078 47       	 .byte 71
 146 0079 41       	 .byte 65
 147 007a 31       	 .byte 49
 148 007b 55       	 .byte 85
 149 007c 45       	 .byte 69
 150 007d 43       	 .byte 67
 151 007e 68       	 .byte 104
 152 007f 4D       	 .byte 77
 153 0080 47       	 .byte 71
 154 0081 51       	 .byte 81
 155 0082 57       	 .byte 87
 156 0083 31       	 .byte 49
 157 0084 68       	 .byte 104
 158 0085 65       	 .byte 101
 159 0086 6D       	 .byte 109
 160 0087 39       	 .byte 57
 161 0088 75       	 .byte 117
 162 0089 4D       	 .byte 77
 163 008a 52       	 .byte 82
 164 008b 6B       	 .byte 107
 165 008c 77       	 .byte 119
 166 008d 46       	 .byte 70
 167 008e 77       	 .byte 119
 168 008f 59       	 .byte 89
 169 0090 44       	 .byte 68
 170 0091 56       	 .byte 86
 171 0092 51       	 .byte 81
 172 0093 51       	 .byte 81
 173 0094 44       	 .byte 68
 174 0095 45       	 .byte 69
 175 0096 78       	 .byte 120
 176 0097 42       	 .byte 66
 177 0098 42       	 .byte 66
 178 0099 62       	 .byte 98
 179 009a 57       	 .byte 87
 180 009b 46       	 .byte 70
 181 009c 36       	 .byte 54
 182 009d 0A       	 .byte 10
 183 009e 62       	 .byte 98
 184 009f 32       	 .byte 50
 185 00a0 34       	 .byte 52
 186 00a1 67       	 .byte 103
 187 00a2 55       	 .byte 85
 188 00a3 6D       	 .byte 109
 189 00a4 39       	 .byte 57
 190 00a5 76       	 .byte 118
 191 00a6 64       	 .byte 100
 192 00a7 43       	 .byte 67
 193 00a8 42       	 .byte 66
 194 00a9 44       	 .byte 68
 195 00aa 51       	 .byte 81
 196 00ab 53       	 .byte 83
 197 00ac 41       	 .byte 65
 198 00ad 78       	 .byte 120
 199 00ae 4D       	 .byte 77
 200 00af 42       	 .byte 66
 201 00b0 34       	 .byte 52
 202 00b1 58       	 .byte 88
 203 00b2 44       	 .byte 68
 204 00b3 54       	 .byte 84
 205 00b4 45       	 .byte 69
 206 00b5 31       	 .byte 49
 207 00b6 4D       	 .byte 77
 208 00b7 44       	 .byte 68
 209 00b8 55       	 .byte 85
 210 00b9 79       	 .byte 121
 211 00ba 4E       	 .byte 78
 212 00bb 6A       	 .byte 106
 213 00bc 41       	 .byte 65
 214 00bd 77       	 .byte 119
 215 00be 4D       	 .byte 77
 216 00bf 44       	 .byte 68
 217 00c0 41       	 .byte 65
 218 00c1 77       	 .byte 119
 219 00c2 4D       	 .byte 77
 220 00c3 46       	 .byte 70
 221 00c4 6F       	 .byte 111
 222 00c5 58       	 .byte 88
 223 00c6 44       	 .byte 68
 224 00c7 54       	 .byte 84
 225 00c8 4D       	 .byte 77
 226 00c9 34       	 .byte 52
 227 00ca 4D       	 .byte 77
 228 00cb 44       	 .byte 68
 229 00cc 45       	 .byte 69
 230 00cd 78       	 .byte 120
 231 00ce 4E       	 .byte 78
 232 00cf 7A       	 .byte 122
 233 00d0 41       	 .byte 65
 234 00d1 77       	 .byte 119
 235 00d2 4D       	 .byte 77
 236 00d3 44       	 .byte 68
 237 00d4 41       	 .byte 65
 238 00d5 77       	 .byte 119
 239 00d6 4D       	 .byte 77
 240 00d7 46       	 .byte 70
 241 00d8 6F       	 .byte 111
 242 00d9 77       	 .byte 119
 243 00da 4F       	 .byte 79
 244 00db 54       	 .byte 84
 245 00dc 45       	 .byte 69
 246 00dd 4C       	 .byte 76
 247 00de 0A       	 .byte 10
 248 00df 4D       	 .byte 77
 249 00e0 41       	 .byte 65
 250 00e1 6B       	 .byte 107
 251 00e2 47       	 .byte 71
 252 00e3 41       	 .byte 65
 253 00e4 31       	 .byte 49
 254 00e5 55       	 .byte 85
 255 00e6 45       	 .byte 69
 256 00e7 42       	 .byte 66
 257 00e8 68       	 .byte 104
 258 00e9 4D       	 .byte 77
 259 00ea 43       	 .byte 67
 260 00eb 56       	 .byte 86
 261 00ec 56       	 .byte 86
 262 00ed 4D       	 .byte 77
 263 00ee 78       	 .byte 120
 264 00ef 44       	 .byte 68
 265 00f0 7A       	 .byte 122
 266 00f1 41       	 .byte 65
 267 00f2 4E       	 .byte 78
 268 00f3 42       	 .byte 66
 269 00f4 67       	 .byte 103
 270 00f5 4E       	 .byte 78
 271 00f6 56       	 .byte 86
 272 00f7 42       	 .byte 66
 273 00f8 41       	 .byte 65
 274 00f9 6F       	 .byte 111
 275 00fa 54       	 .byte 84
 276 00fb 42       	 .byte 66
 277 00fc 6B       	 .byte 107
 278 00fd 46       	 .byte 70
 279 00fe 74       	 .byte 116
 280 00ff 59       	 .byte 89
 281 0100 58       	 .byte 88
 282 0101 70       	 .byte 112
 283 0102 76       	 .byte 118
 284 0103 62       	 .byte 98
 285 0104 6A       	 .byte 106
 286 0105 45       	 .byte 69
 287 0106 5A       	 .byte 90
 288 0107 4D       	 .byte 77
 289 0108 42       	 .byte 66
 290 0109 63       	 .byte 99
 291 010a 47       	 .byte 71
 292 010b 41       	 .byte 65
 293 010c 31       	 .byte 49
 294 010d 55       	 .byte 85
 295 010e 45       	 .byte 69
 296 010f 41       	 .byte 65
 297 0110 78       	 .byte 120
 298 0111 4D       	 .byte 77
 299 0112 51       	 .byte 81
 300 0113 51       	 .byte 81
 301 0114 57       	 .byte 87
 302 0115 31       	 .byte 49
 303 0116 68       	 .byte 104
 304 0117 65       	 .byte 101
 305 0118 6D       	 .byte 109
 306 0119 39       	 .byte 57
 307 011a 75       	 .byte 117
 308 011b 49       	 .byte 73
 309 011c 46       	 .byte 70
 310 011d 4A       	 .byte 74
 311 011e 76       	 .byte 118
 312 011f 0A       	 .byte 10
 313 0120 62       	 .byte 98
 314 0121 33       	 .byte 51
 315 0122 51       	 .byte 81
 316 0123 67       	 .byte 103
 317 0124 51       	 .byte 81
 318 0125 30       	 .byte 48
 319 0126 45       	 .byte 69
 320 0127 67       	 .byte 103
 321 0128 4D       	 .byte 77
 322 0129 54       	 .byte 84
 323 012a 43       	 .byte 67
 324 012b 43       	 .byte 67
 325 012c 41       	 .byte 65
 326 012d 53       	 .byte 83
 327 012e 49       	 .byte 73
 328 012f 77       	 .byte 119
 329 0130 44       	 .byte 68
 330 0131 51       	 .byte 81
 331 0132 59       	 .byte 89
 332 0133 4A       	 .byte 74
 333 0134 4B       	 .byte 75
 334 0135 6F       	 .byte 111
 335 0136 5A       	 .byte 90
 336 0137 49       	 .byte 73
 337 0138 68       	 .byte 104
 338 0139 76       	 .byte 118
 339 013a 63       	 .byte 99
 340 013b 4E       	 .byte 78
 341 013c 41       	 .byte 65
 342 013d 51       	 .byte 81
 343 013e 45       	 .byte 69
 344 013f 42       	 .byte 66
 345 0140 42       	 .byte 66
 346 0141 51       	 .byte 81
 347 0142 41       	 .byte 65
 348 0143 44       	 .byte 68
 349 0144 67       	 .byte 103
 350 0145 67       	 .byte 103
 351 0146 45       	 .byte 69
 352 0147 50       	 .byte 80
 353 0148 41       	 .byte 65
 354 0149 44       	 .byte 68
 355 014a 43       	 .byte 67
 356 014b 43       	 .byte 67
 357 014c 41       	 .byte 65
 358 014d 51       	 .byte 81
 359 014e 6F       	 .byte 111
 360 014f 43       	 .byte 67
 361 0150 67       	 .byte 103
 362 0151 67       	 .byte 103
 363 0152 45       	 .byte 69
 364 0153 42       	 .byte 66
 365 0154 41       	 .byte 65
 366 0155 4C       	 .byte 76
 367 0156 4A       	 .byte 74
 368 0157 34       	 .byte 52
 369 0158 67       	 .byte 103
 370 0159 48       	 .byte 72
 371 015a 48       	 .byte 72
 372 015b 4B       	 .byte 75
 373 015c 65       	 .byte 101
 374 015d 4E       	 .byte 78
 375 015e 58       	 .byte 88
 376 015f 6A       	 .byte 106
 377 0160 0A       	 .byte 10
 378 0161 63       	 .byte 99
 379 0162 61       	 .byte 97
 380 0163 39       	 .byte 57
 381 0164 48       	 .byte 72
 382 0165 67       	 .byte 103
 383 0166 46       	 .byte 70
 384 0167 42       	 .byte 66
 385 0168 30       	 .byte 48
 386 0169 66       	 .byte 102
 387 016a 57       	 .byte 87
 388 016b 37       	 .byte 55
 389 016c 59       	 .byte 89
 390 016d 31       	 .byte 49
 391 016e 34       	 .byte 52
 392 016f 68       	 .byte 104
 393 0170 32       	 .byte 50
 394 0171 39       	 .byte 57
 395 0172 4A       	 .byte 74
 396 0173 6C       	 .byte 108
 397 0174 6F       	 .byte 111
 398 0175 39       	 .byte 57
 399 0176 31       	 .byte 49
 400 0177 67       	 .byte 103
 401 0178 68       	 .byte 104
 402 0179 59       	 .byte 89
 403 017a 50       	 .byte 80
 404 017b 6C       	 .byte 108
 405 017c 30       	 .byte 48
 406 017d 68       	 .byte 104
 407 017e 41       	 .byte 65
 408 017f 45       	 .byte 69
 409 0180 76       	 .byte 118
 410 0181 72       	 .byte 114
 411 0182 41       	 .byte 65
 412 0183 49       	 .byte 73
 413 0184 74       	 .byte 116
 414 0185 68       	 .byte 104
 415 0186 74       	 .byte 116
 416 0187 4F       	 .byte 79
 417 0188 67       	 .byte 103
 418 0189 51       	 .byte 81
 419 018a 33       	 .byte 51
 420 018b 70       	 .byte 112
 421 018c 4F       	 .byte 79
 422 018d 73       	 .byte 115
 423 018e 71       	 .byte 113
 424 018f 54       	 .byte 84
 425 0190 51       	 .byte 81
 426 0191 4E       	 .byte 78
 427 0192 72       	 .byte 114
 428 0193 6F       	 .byte 111
 429 0194 42       	 .byte 66
 430 0195 76       	 .byte 118
 431 0196 6F       	 .byte 111
 432 0197 33       	 .byte 51
 433 0198 62       	 .byte 98
 434 0199 53       	 .byte 83
 435 019a 4D       	 .byte 77
 436 019b 67       	 .byte 103
 437 019c 48       	 .byte 72
 438 019d 46       	 .byte 70
 439 019e 7A       	 .byte 122
 440 019f 5A       	 .byte 90
 441 01a0 4D       	 .byte 77
 442 01a1 0A       	 .byte 10
 443 01a2 39       	 .byte 57
 444 01a3 4F       	 .byte 79
 445 01a4 36       	 .byte 54
 446 01a5 49       	 .byte 73
 447 01a6 49       	 .byte 73
 448 01a7 38       	 .byte 56
 449 01a8 63       	 .byte 99
 450 01a9 2B       	 .byte 43
 451 01aa 36       	 .byte 54
 452 01ab 7A       	 .byte 122
 453 01ac 66       	 .byte 102
 454 01ad 31       	 .byte 49
 455 01ae 74       	 .byte 116
 456 01af 52       	 .byte 82
 457 01b0 6E       	 .byte 110
 458 01b1 34       	 .byte 52
 459 01b2 53       	 .byte 83
 460 01b3 57       	 .byte 87
 461 01b4 69       	 .byte 105
 462 01b5 77       	 .byte 119
 463 01b6 33       	 .byte 51
 464 01b7 74       	 .byte 116
 465 01b8 65       	 .byte 101
 466 01b9 35       	 .byte 53
 467 01ba 64       	 .byte 100
 468 01bb 6A       	 .byte 106
 469 01bc 67       	 .byte 103
 470 01bd 64       	 .byte 100
 471 01be 59       	 .byte 89
 472 01bf 5A       	 .byte 90
 473 01c0 36       	 .byte 54
 474 01c1 6B       	 .byte 107
 475 01c2 2F       	 .byte 47
 476 01c3 6F       	 .byte 111
 477 01c4 49       	 .byte 73
 478 01c5 32       	 .byte 50
 479 01c6 70       	 .byte 112
 480 01c7 65       	 .byte 101
 481 01c8 56       	 .byte 86
 482 01c9 4B       	 .byte 75
 483 01ca 56       	 .byte 86
 484 01cb 75       	 .byte 117
 485 01cc 52       	 .byte 82
 486 01cd 46       	 .byte 70
 487 01ce 34       	 .byte 52
 488 01cf 66       	 .byte 102
 489 01d0 6E       	 .byte 110
 490 01d1 39       	 .byte 57
 491 01d2 74       	 .byte 116
 492 01d3 42       	 .byte 66
 493 01d4 62       	 .byte 98
 494 01d5 36       	 .byte 54
 495 01d6 64       	 .byte 100
 496 01d7 4E       	 .byte 78
 497 01d8 71       	 .byte 113
 498 01d9 63       	 .byte 99
 499 01da 6D       	 .byte 109
 500 01db 7A       	 .byte 122
 501 01dc 55       	 .byte 85
 502 01dd 35       	 .byte 53
 503 01de 4C       	 .byte 76
 504 01df 2F       	 .byte 47
 505 01e0 71       	 .byte 113
 506 01e1 77       	 .byte 119
 507 01e2 0A       	 .byte 10
 508 01e3 49       	 .byte 73
 509 01e4 46       	 .byte 70
 510 01e5 41       	 .byte 65
 511 01e6 47       	 .byte 71
 512 01e7 62       	 .byte 98
 513 01e8 48       	 .byte 72
 514 01e9 72       	 .byte 114
 515 01ea 51       	 .byte 81
 516 01eb 67       	 .byte 103
 517 01ec 4C       	 .byte 76
 518 01ed 4B       	 .byte 75
 519 01ee 6D       	 .byte 109
 520 01ef 2B       	 .byte 43
 521 01f0 61       	 .byte 97
 522 01f1 2F       	 .byte 47
 523 01f2 73       	 .byte 115
 524 01f3 52       	 .byte 82
 525 01f4 78       	 .byte 120
 526 01f5 6D       	 .byte 109
 527 01f6 50       	 .byte 80
 528 01f7 55       	 .byte 85
 529 01f8 44       	 .byte 68
 530 01f9 67       	 .byte 103
 531 01fa 48       	 .byte 72
 532 01fb 33       	 .byte 51
 533 01fc 4B       	 .byte 75
 534 01fd 4B       	 .byte 75
 535 01fe 48       	 .byte 72
 536 01ff 4F       	 .byte 79
 537 0200 56       	 .byte 86
 538 0201 6A       	 .byte 106
 539 0202 34       	 .byte 52
 540 0203 75       	 .byte 117
 541 0204 74       	 .byte 116
 542 0205 57       	 .byte 87
 543 0206 70       	 .byte 112
 544 0207 2B       	 .byte 43
 545 0208 55       	 .byte 85
 546 0209 68       	 .byte 104
 547 020a 6E       	 .byte 110
 548 020b 4D       	 .byte 77
 549 020c 4A       	 .byte 74
 550 020d 62       	 .byte 98
 551 020e 75       	 .byte 117
 552 020f 6C       	 .byte 108
 553 0210 48       	 .byte 72
 554 0211 68       	 .byte 104
 555 0212 65       	 .byte 101
 556 0213 62       	 .byte 98
 557 0214 34       	 .byte 52
 558 0215 6D       	 .byte 109
 559 0216 6A       	 .byte 106
 560 0217 55       	 .byte 85
 561 0218 63       	 .byte 99
 562 0219 41       	 .byte 65
 563 021a 77       	 .byte 119
 564 021b 68       	 .byte 104
 565 021c 6D       	 .byte 109
 566 021d 61       	 .byte 97
 567 021e 68       	 .byte 104
 568 021f 52       	 .byte 82
 569 0220 57       	 .byte 87
 570 0221 61       	 .byte 97
 571 0222 36       	 .byte 54
 572 0223 0A       	 .byte 10
 573 0224 56       	 .byte 86
 574 0225 4F       	 .byte 79
 575 0226 75       	 .byte 117
 576 0227 6A       	 .byte 106
 577 0228 77       	 .byte 119
 578 0229 35       	 .byte 53
 579 022a 48       	 .byte 72
 580 022b 35       	 .byte 53
 581 022c 53       	 .byte 83
 582 022d 4E       	 .byte 78
 583 022e 7A       	 .byte 122
 584 022f 2F       	 .byte 47
 585 0230 30       	 .byte 48
 586 0231 65       	 .byte 101
 587 0232 67       	 .byte 103
 588 0233 77       	 .byte 119
 589 0234 4C       	 .byte 76
 590 0235 58       	 .byte 88
 591 0236 30       	 .byte 48
 592 0237 74       	 .byte 116
 593 0238 64       	 .byte 100
 594 0239 48       	 .byte 72
 595 023a 41       	 .byte 65
 596 023b 31       	 .byte 49
 597 023c 31       	 .byte 49
 598 023d 34       	 .byte 52
 599 023e 67       	 .byte 103
 600 023f 6B       	 .byte 107
 601 0240 39       	 .byte 57
 602 0241 35       	 .byte 53
 603 0242 37       	 .byte 55
 604 0243 45       	 .byte 69
 605 0244 57       	 .byte 87
 606 0245 57       	 .byte 87
 607 0246 36       	 .byte 54
 608 0247 37       	 .byte 55
 609 0248 63       	 .byte 99
 610 0249 34       	 .byte 52
 611 024a 63       	 .byte 99
 612 024b 58       	 .byte 88
 613 024c 38       	 .byte 56
 614 024d 6A       	 .byte 106
 615 024e 4A       	 .byte 74
 616 024f 47       	 .byte 71
 617 0250 4B       	 .byte 75
 618 0251 4C       	 .byte 76
 619 0252 68       	 .byte 104
 620 0253 44       	 .byte 68
 621 0254 2B       	 .byte 43
 622 0255 72       	 .byte 114
 623 0256 63       	 .byte 99
 624 0257 64       	 .byte 100
 625 0258 71       	 .byte 113
 626 0259 73       	 .byte 115
 627 025a 71       	 .byte 113
 628 025b 30       	 .byte 48
 629 025c 38       	 .byte 56
 630 025d 70       	 .byte 112
 631 025e 38       	 .byte 56
 632 025f 6B       	 .byte 107
 633 0260 44       	 .byte 68
 634 0261 69       	 .byte 105
 635 0262 31       	 .byte 49
 636 0263 4C       	 .byte 76
 637 0264 0A       	 .byte 10
 638 0265 39       	 .byte 57
 639 0266 33       	 .byte 51
 640 0267 46       	 .byte 70
 641 0268 63       	 .byte 99
 642 0269 58       	 .byte 88
 643 026a 6D       	 .byte 109
 644 026b 6E       	 .byte 110
 645 026c 2F       	 .byte 47
 646 026d 36       	 .byte 54
 647 026e 70       	 .byte 112
 648 026f 55       	 .byte 85
 649 0270 43       	 .byte 67
 650 0271 79       	 .byte 121
 651 0272 7A       	 .byte 122
 652 0273 69       	 .byte 105
 653 0274 4B       	 .byte 75
 654 0275 72       	 .byte 114
 655 0276 6C       	 .byte 108
 656 0277 41       	 .byte 65
 657 0278 34       	 .byte 52
 658 0279 62       	 .byte 98
 659 027a 39       	 .byte 57
 660 027b 76       	 .byte 118
 661 027c 37       	 .byte 55
 662 027d 4C       	 .byte 76
 663 027e 57       	 .byte 87
 664 027f 49       	 .byte 73
 665 0280 62       	 .byte 98
 666 0281 78       	 .byte 120
 667 0282 63       	 .byte 99
 668 0283 63       	 .byte 99
 669 0284 65       	 .byte 101
 670 0285 56       	 .byte 86
 671 0286 4F       	 .byte 79
 672 0287 46       	 .byte 70
 673 0288 33       	 .byte 51
 674 0289 34       	 .byte 52
 675 028a 47       	 .byte 71
 676 028b 66       	 .byte 102
 677 028c 49       	 .byte 73
 678 028d 44       	 .byte 68
 679 028e 35       	 .byte 53
 680 028f 79       	 .byte 121
 681 0290 48       	 .byte 72
 682 0291 49       	 .byte 73
 683 0292 39       	 .byte 57
 684 0293 59       	 .byte 89
 685 0294 2F       	 .byte 47
 686 0295 51       	 .byte 81
 687 0296 43       	 .byte 67
 688 0297 42       	 .byte 66
 689 0298 2F       	 .byte 47
 690 0299 49       	 .byte 73
 691 029a 49       	 .byte 73
 692 029b 44       	 .byte 68
 693 029c 45       	 .byte 69
 694 029d 67       	 .byte 103
 695 029e 45       	 .byte 69
 696 029f 77       	 .byte 119
 697 02a0 2B       	 .byte 43
 698 02a1 4F       	 .byte 79
 699 02a2 79       	 .byte 121
 700 02a3 51       	 .byte 81
 701 02a4 6D       	 .byte 109
 702 02a5 0A       	 .byte 10
 703 02a6 6A       	 .byte 106
 704 02a7 67       	 .byte 103
 705 02a8 53       	 .byte 83
 706 02a9 75       	 .byte 117
 707 02aa 62       	 .byte 98
 708 02ab 4A       	 .byte 74
 709 02ac 72       	 .byte 114
 710 02ad 49       	 .byte 73
 711 02ae 71       	 .byte 113
 712 02af 67       	 .byte 103
 713 02b0 30       	 .byte 48
 714 02b1 43       	 .byte 67
 715 02b2 41       	 .byte 65
 716 02b3 77       	 .byte 119
 717 02b4 45       	 .byte 69
 718 02b5 41       	 .byte 65
 719 02b6 41       	 .byte 65
 720 02b7 61       	 .byte 97
 721 02b8 4E       	 .byte 78
 722 02b9 43       	 .byte 67
 723 02ba 4D       	 .byte 77
 724 02bb 45       	 .byte 69
 725 02bc 41       	 .byte 65
 726 02bd 77       	 .byte 119
 727 02be 44       	 .byte 68
 728 02bf 77       	 .byte 119
 729 02c0 59       	 .byte 89
 730 02c1 44       	 .byte 68
 731 02c2 56       	 .byte 86
 732 02c3 52       	 .byte 82
 733 02c4 30       	 .byte 48
 734 02c5 54       	 .byte 84
 735 02c6 41       	 .byte 65
 736 02c7 51       	 .byte 81
 737 02c8 48       	 .byte 72
 738 02c9 2F       	 .byte 47
 739 02ca 42       	 .byte 66
 740 02cb 41       	 .byte 65
 741 02cc 55       	 .byte 85
 742 02cd 77       	 .byte 119
 743 02ce 41       	 .byte 65
 744 02cf 77       	 .byte 119
 745 02d0 45       	 .byte 69
 746 02d1 42       	 .byte 66
 747 02d2 2F       	 .byte 47
 748 02d3 7A       	 .byte 122
 749 02d4 41       	 .byte 65
 750 02d5 4F       	 .byte 79
 751 02d6 42       	 .byte 66
 752 02d7 67       	 .byte 103
 753 02d8 4E       	 .byte 78
 754 02d9 56       	 .byte 86
 755 02da 48       	 .byte 72
 756 02db 51       	 .byte 81
 757 02dc 38       	 .byte 56
 758 02dd 42       	 .byte 66
 759 02de 41       	 .byte 65
 760 02df 66       	 .byte 102
 761 02e0 38       	 .byte 56
 762 02e1 45       	 .byte 69
 763 02e2 42       	 .byte 66
 764 02e3 41       	 .byte 65
 765 02e4 4D       	 .byte 77
 766 02e5 43       	 .byte 67
 767 02e6 0A       	 .byte 10
 768 02e7 41       	 .byte 65
 769 02e8 59       	 .byte 89
 770 02e9 59       	 .byte 89
 771 02ea 77       	 .byte 119
 772 02eb 48       	 .byte 72
 773 02ec 51       	 .byte 81
 774 02ed 59       	 .byte 89
 775 02ee 44       	 .byte 68
 776 02ef 56       	 .byte 86
 777 02f0 52       	 .byte 82
 778 02f1 30       	 .byte 48
 779 02f2 4F       	 .byte 79
 780 02f3 42       	 .byte 66
 781 02f4 42       	 .byte 66
 782 02f5 59       	 .byte 89
 783 02f6 45       	 .byte 69
 784 02f7 46       	 .byte 70
 785 02f8 49       	 .byte 73
 786 02f9 51       	 .byte 81
 787 02fa 59       	 .byte 89
 788 02fb 7A       	 .byte 122
 789 02fc 49       	 .byte 73
 790 02fd 55       	 .byte 85
 791 02fe 30       	 .byte 48
 792 02ff 37       	 .byte 55
 793 0300 4C       	 .byte 76
 794 0301 77       	 .byte 119
 795 0302 4D       	 .byte 77
 796 0303 6C       	 .byte 108
 797 0304 4A       	 .byte 74
 798 0305 51       	 .byte 81
 799 0306 75       	 .byte 117
 800 0307 43       	 .byte 67
 801 0308 46       	 .byte 70
 802 0309 6D       	 .byte 109
 803 030a 63       	 .byte 99
 804 030b 78       	 .byte 120
 805 030c 37       	 .byte 55
 806 030d 49       	 .byte 73
 807 030e 51       	 .byte 81
 808 030f 54       	 .byte 84
 809 0310 67       	 .byte 103
 810 0311 6F       	 .byte 111
 811 0312 49       	 .byte 73
 812 0313 4D       	 .byte 77
 813 0314 41       	 .byte 65
 814 0315 30       	 .byte 48
 815 0316 47       	 .byte 71
 816 0317 43       	 .byte 67
 817 0318 53       	 .byte 83
 818 0319 71       	 .byte 113
 819 031a 47       	 .byte 71
 820 031b 53       	 .byte 83
 821 031c 49       	 .byte 73
 822 031d 62       	 .byte 98
 823 031e 33       	 .byte 51
 824 031f 44       	 .byte 68
 825 0320 51       	 .byte 81
 826 0321 45       	 .byte 69
 827 0322 42       	 .byte 66
 828 0323 43       	 .byte 67
 829 0324 77       	 .byte 119
 830 0325 55       	 .byte 85
 831 0326 41       	 .byte 65
 832 0327 0A       	 .byte 10
 833 0328 41       	 .byte 65
 834 0329 34       	 .byte 52
 835 032a 49       	 .byte 73
 836 032b 42       	 .byte 66
 837 032c 41       	 .byte 65
 838 032d 51       	 .byte 81
 839 032e 43       	 .byte 67
 840 032f 59       	 .byte 89
 841 0330 38       	 .byte 56
 842 0331 6A       	 .byte 106
 843 0332 64       	 .byte 100
 844 0333 61       	 .byte 97
 845 0334 51       	 .byte 81
 846 0335 5A       	 .byte 90
 847 0336 43       	 .byte 67
 848 0337 68       	 .byte 104
 849 0338 47       	 .byte 71
 850 0339 73       	 .byte 115
 851 033a 56       	 .byte 86
 852 033b 32       	 .byte 50
 853 033c 55       	 .byte 85
 854 033d 53       	 .byte 83
 855 033e 67       	 .byte 103
 856 033f 67       	 .byte 103
 857 0340 4E       	 .byte 78
 858 0341 69       	 .byte 105
 859 0342 4D       	 .byte 77
 860 0343 4F       	 .byte 79
 861 0344 72       	 .byte 114
 862 0345 75       	 .byte 117
 863 0346 59       	 .byte 89
 864 0347 6F       	 .byte 111
 865 0348 75       	 .byte 117
 866 0349 36       	 .byte 54
 867 034a 72       	 .byte 114
 868 034b 34       	 .byte 52
 869 034c 6C       	 .byte 108
 870 034d 4B       	 .byte 75
 871 034e 35       	 .byte 53
 872 034f 49       	 .byte 73
 873 0350 70       	 .byte 112
 874 0351 44       	 .byte 68
 875 0352 42       	 .byte 66
 876 0353 2F       	 .byte 47
 877 0354 47       	 .byte 71
 878 0355 2F       	 .byte 47
 879 0356 77       	 .byte 119
 880 0357 6B       	 .byte 107
 881 0358 6A       	 .byte 106
 882 0359 55       	 .byte 85
 883 035a 75       	 .byte 117
 884 035b 30       	 .byte 48
 885 035c 79       	 .byte 121
 886 035d 4B       	 .byte 75
 887 035e 47       	 .byte 71
 888 035f 58       	 .byte 88
 889 0360 39       	 .byte 57
 890 0361 72       	 .byte 114
 891 0362 62       	 .byte 98
 892 0363 78       	 .byte 120
 893 0364 65       	 .byte 101
 894 0365 6E       	 .byte 110
 895 0366 44       	 .byte 68
 896 0367 49       	 .byte 73
 897 0368 0A       	 .byte 10
 898 0369 55       	 .byte 85
 899 036a 35       	 .byte 53
 900 036b 50       	 .byte 80
 901 036c 4D       	 .byte 77
 902 036d 43       	 .byte 67
 903 036e 43       	 .byte 67
 904 036f 6A       	 .byte 106
 905 0370 6A       	 .byte 106
 906 0371 6D       	 .byte 109
 907 0372 43       	 .byte 67
 908 0373 58       	 .byte 88
 909 0374 50       	 .byte 80
 910 0375 49       	 .byte 73
 911 0376 36       	 .byte 54
 912 0377 54       	 .byte 84
 913 0378 35       	 .byte 53
 914 0379 33       	 .byte 51
 915 037a 69       	 .byte 105
 916 037b 48       	 .byte 72
 917 037c 54       	 .byte 84
 918 037d 66       	 .byte 102
 919 037e 49       	 .byte 73
 920 037f 55       	 .byte 85
 921 0380 4A       	 .byte 74
 922 0381 72       	 .byte 114
 923 0382 55       	 .byte 85
 924 0383 36       	 .byte 54
 925 0384 61       	 .byte 97
 926 0385 64       	 .byte 100
 927 0386 54       	 .byte 84
 928 0387 72       	 .byte 114
 929 0388 43       	 .byte 67
 930 0389 43       	 .byte 67
 931 038a 32       	 .byte 50
 932 038b 71       	 .byte 113
 933 038c 4A       	 .byte 74
 934 038d 65       	 .byte 101
 935 038e 48       	 .byte 72
 936 038f 5A       	 .byte 90
 937 0390 45       	 .byte 69
 938 0391 52       	 .byte 82
 939 0392 78       	 .byte 120
 940 0393 68       	 .byte 104
 941 0394 6C       	 .byte 108
 942 0395 62       	 .byte 98
 943 0396 49       	 .byte 73
 944 0397 31       	 .byte 49
 945 0398 42       	 .byte 66
 946 0399 6A       	 .byte 106
 947 039a 6A       	 .byte 106
 948 039b 74       	 .byte 116
 949 039c 2F       	 .byte 47
 950 039d 6D       	 .byte 109
 951 039e 73       	 .byte 115
 952 039f 76       	 .byte 118
 953 03a0 30       	 .byte 48
 954 03a1 74       	 .byte 116
 955 03a2 61       	 .byte 97
 956 03a3 64       	 .byte 100
 957 03a4 51       	 .byte 81
 958 03a5 31       	 .byte 49
 959 03a6 77       	 .byte 119
 960 03a7 55       	 .byte 85
 961 03a8 73       	 .byte 115
 962 03a9 0A       	 .byte 10
 963 03aa 4E       	 .byte 78
 964 03ab 2B       	 .byte 43
 965 03ac 67       	 .byte 103
 966 03ad 44       	 .byte 68
 967 03ae 53       	 .byte 83
 968 03af 36       	 .byte 54
 969 03b0 33       	 .byte 51
 970 03b1 70       	 .byte 112
 971 03b2 59       	 .byte 89
 972 03b3 61       	 .byte 97
 973 03b4 41       	 .byte 65
 974 03b5 43       	 .byte 67
 975 03b6 62       	 .byte 98
 976 03b7 76       	 .byte 118
 977 03b8 58       	 .byte 88
 978 03b9 79       	 .byte 121
 979 03ba 38       	 .byte 56
 980 03bb 4D       	 .byte 77
 981 03bc 57       	 .byte 87
 982 03bd 79       	 .byte 121
 983 03be 37       	 .byte 55
 984 03bf 56       	 .byte 86
 985 03c0 75       	 .byte 117
 986 03c1 33       	 .byte 51
 987 03c2 33       	 .byte 51
 988 03c3 50       	 .byte 80
 989 03c4 71       	 .byte 113
 990 03c5 55       	 .byte 85
 991 03c6 58       	 .byte 88
 992 03c7 48       	 .byte 72
 993 03c8 65       	 .byte 101
 994 03c9 65       	 .byte 101
 995 03ca 45       	 .byte 69
 996 03cb 36       	 .byte 54
 997 03cc 56       	 .byte 86
 998 03cd 2F       	 .byte 47
 999 03ce 55       	 .byte 85
 1000 03cf 71       	 .byte 113
 1001 03d0 32       	 .byte 50
 1002 03d1 56       	 .byte 86
 1003 03d2 38       	 .byte 56
 1004 03d3 76       	 .byte 118
 1005 03d4 69       	 .byte 105
 1006 03d5 54       	 .byte 84
 1007 03d6 4F       	 .byte 79
 1008 03d7 39       	 .byte 57
 1009 03d8 36       	 .byte 54
 1010 03d9 4C       	 .byte 76
 1011 03da 58       	 .byte 88
 1012 03db 46       	 .byte 70
 1013 03dc 76       	 .byte 118
 1014 03dd 4B       	 .byte 75
 1015 03de 57       	 .byte 87
 1016 03df 6C       	 .byte 108
 1017 03e0 4A       	 .byte 74
 1018 03e1 62       	 .byte 98
 1019 03e2 59       	 .byte 89
 1020 03e3 4B       	 .byte 75
 1021 03e4 38       	 .byte 56
 1022 03e5 55       	 .byte 85
 1023 03e6 39       	 .byte 57
 1024 03e7 30       	 .byte 48
 1025 03e8 76       	 .byte 118
 1026 03e9 76       	 .byte 118
 1027 03ea 0A       	 .byte 10
 1028 03eb 6F       	 .byte 111
 1029 03ec 2F       	 .byte 47
 1030 03ed 75       	 .byte 117
 1031 03ee 66       	 .byte 102
 1032 03ef 51       	 .byte 81
 1033 03f0 4A       	 .byte 74
 1034 03f1 56       	 .byte 86
 1035 03f2 74       	 .byte 116
 1036 03f3 4D       	 .byte 77
 1037 03f4 56       	 .byte 86
 1038 03f5 54       	 .byte 84
 1039 03f6 38       	 .byte 56
 1040 03f7 51       	 .byte 81
 1041 03f8 74       	 .byte 116
 1042 03f9 50       	 .byte 80
 1043 03fa 48       	 .byte 72
 1044 03fb 52       	 .byte 82
 1045 03fc 68       	 .byte 104
 1046 03fd 38       	 .byte 56
 1047 03fe 6A       	 .byte 106
 1048 03ff 72       	 .byte 114
 1049 0400 64       	 .byte 100
 1050 0401 6B       	 .byte 107
 1051 0402 50       	 .byte 80
 1052 0403 53       	 .byte 83
 1053 0404 48       	 .byte 72
 1054 0405 43       	 .byte 67
 1055 0406 61       	 .byte 97
 1056 0407 32       	 .byte 50
 1057 0408 58       	 .byte 88
 1058 0409 56       	 .byte 86
 1059 040a 34       	 .byte 52
 1060 040b 63       	 .byte 99
 1061 040c 64       	 .byte 100
 1062 040d 46       	 .byte 70
 1063 040e 79       	 .byte 121
 1064 040f 51       	 .byte 81
 1065 0410 7A       	 .byte 122
 1066 0411 52       	 .byte 82
 1067 0412 31       	 .byte 49
 1068 0413 62       	 .byte 98
 1069 0414 6C       	 .byte 108
 1070 0415 64       	 .byte 100
 1071 0416 5A       	 .byte 90
 1072 0417 77       	 .byte 119
 1073 0418 67       	 .byte 103
 1074 0419 4A       	 .byte 74
 1075 041a 63       	 .byte 99
 1076 041b 4A       	 .byte 74
 1077 041c 6D       	 .byte 109
 1078 041d 41       	 .byte 65
 1079 041e 70       	 .byte 112
 1080 041f 7A       	 .byte 122
 1081 0420 79       	 .byte 121
 1082 0421 4D       	 .byte 77
 1083 0422 5A       	 .byte 90
 1084 0423 46       	 .byte 70
 1085 0424 6F       	 .byte 111
 1086 0425 36       	 .byte 54
 1087 0426 49       	 .byte 73
 1088 0427 51       	 .byte 81
 1089 0428 36       	 .byte 54
 1090 0429 58       	 .byte 88
 1091 042a 55       	 .byte 85
 1092 042b 0A       	 .byte 10
 1093 042c 35       	 .byte 53
 1094 042d 4D       	 .byte 77
 1095 042e 73       	 .byte 115
 1096 042f 49       	 .byte 73
 1097 0430 2B       	 .byte 43
 1098 0431 79       	 .byte 121
 1099 0432 4D       	 .byte 77
 1100 0433 52       	 .byte 82
 1101 0434 51       	 .byte 81
 1102 0435 2B       	 .byte 43
 1103 0436 68       	 .byte 104
 1104 0437 44       	 .byte 68
 1105 0438 4B       	 .byte 75
 1106 0439 58       	 .byte 88
 1107 043a 4A       	 .byte 74
 1108 043b 69       	 .byte 105
 1109 043c 6F       	 .byte 111
 1110 043d 61       	 .byte 97
 1111 043e 6C       	 .byte 108
 1112 043f 64       	 .byte 100
 1113 0440 58       	 .byte 88
 1114 0441 67       	 .byte 103
 1115 0442 6A       	 .byte 106
 1116 0443 55       	 .byte 85
 1117 0444 6B       	 .byte 107
 1118 0445 4B       	 .byte 75
 1119 0446 36       	 .byte 54
 1120 0447 34       	 .byte 52
 1121 0448 32       	 .byte 50
 1122 0449 4D       	 .byte 77
 1123 044a 34       	 .byte 52
 1124 044b 55       	 .byte 85
 1125 044c 77       	 .byte 119
 1126 044d 74       	 .byte 116
 1127 044e 42       	 .byte 66
 1128 044f 56       	 .byte 86
 1129 0450 38       	 .byte 56
 1130 0451 6F       	 .byte 111
 1131 0452 62       	 .byte 98
 1132 0453 32       	 .byte 50
 1133 0454 78       	 .byte 120
 1134 0455 4A       	 .byte 74
 1135 0456 4E       	 .byte 78
 1136 0457 44       	 .byte 68
 1137 0458 64       	 .byte 100
 1138 0459 32       	 .byte 50
 1139 045a 5A       	 .byte 90
 1140 045b 68       	 .byte 104
 1141 045c 77       	 .byte 119
 1142 045d 4C       	 .byte 76
 1143 045e 6E       	 .byte 110
 1144 045f 6F       	 .byte 111
 1145 0460 51       	 .byte 81
 1146 0461 64       	 .byte 100
 1147 0462 65       	 .byte 101
 1148 0463 58       	 .byte 88
 1149 0464 65       	 .byte 101
 1150 0465 47       	 .byte 71
 1151 0466 41       	 .byte 65
 1152 0467 44       	 .byte 68
 1153 0468 62       	 .byte 98
 1154 0469 6B       	 .byte 107
 1155 046a 70       	 .byte 112
 1156 046b 79       	 .byte 121
 1157 046c 0A       	 .byte 10
 1158 046d 72       	 .byte 114
 1159 046e 71       	 .byte 113
 1160 046f 58       	 .byte 88
 1161 0470 52       	 .byte 82
 1162 0471 66       	 .byte 102
 1163 0472 62       	 .byte 98
 1164 0473 6F       	 .byte 111
 1165 0474 51       	 .byte 81
 1166 0475 6E       	 .byte 110
 1167 0476 6F       	 .byte 111
 1168 0477 5A       	 .byte 90
 1169 0478 73       	 .byte 115
 1170 0479 47       	 .byte 71
 1171 047a 34       	 .byte 52
 1172 047b 71       	 .byte 113
 1173 047c 35       	 .byte 53
 1174 047d 57       	 .byte 87
 1175 047e 54       	 .byte 84
 1176 047f 50       	 .byte 80
 1177 0480 34       	 .byte 52
 1178 0481 36       	 .byte 54
 1179 0482 38       	 .byte 56
 1180 0483 53       	 .byte 83
 1181 0484 51       	 .byte 81
 1182 0485 76       	 .byte 118
 1183 0486 76       	 .byte 118
 1184 0487 47       	 .byte 71
 1185 0488 35       	 .byte 53
 1186 0489 0A       	 .byte 10
 1187 048a 2D       	 .byte 45
 1188 048b 2D       	 .byte 45
 1189 048c 2D       	 .byte 45
 1190 048d 2D       	 .byte 45
 1191 048e 2D       	 .byte 45
 1192 048f 45       	 .byte 69
 1193 0490 4E       	 .byte 78
 1194 0491 44       	 .byte 68
 1195 0492 20       	 .byte 32
 1196 0493 43       	 .byte 67
 1197 0494 45       	 .byte 69
 1198 0495 52       	 .byte 82
 1199 0496 54       	 .byte 84
 1200 0497 49       	 .byte 73
 1201 0498 46       	 .byte 70
 1202 0499 49       	 .byte 73
 1203 049a 43       	 .byte 67
 1204 049b 41       	 .byte 65
 1205 049c 54       	 .byte 84
 1206 049d 45       	 .byte 69
 1207 049e 2D       	 .byte 45
 1208 049f 2D       	 .byte 45
 1209 04a0 2D       	 .byte 45
 1210 04a1 2D       	 .byte 45
 1211 04a2 2D       	 .byte 45
 1212 04a3 00       	 .section .data.sgu8arr_ccCert,"aw",%progbits
 1213              	 .align 2
 1216              	sgu8arr_ccCert:
 1217 0000 2D       	 .byte 45
 1218 0001 2D       	 .byte 45
 1219 0002 2D       	 .byte 45
 1220 0003 2D       	 .byte 45
 1221 0004 2D       	 .byte 45
 1222 0005 42       	 .byte 66
 1223 0006 45       	 .byte 69
 1224 0007 47       	 .byte 71
 1225 0008 49       	 .byte 73
 1226 0009 4E       	 .byte 78
 1227 000a 20       	 .byte 32
 1228 000b 43       	 .byte 67
 1229 000c 45       	 .byte 69
 1230 000d 52       	 .byte 82
 1231 000e 54       	 .byte 84
 1232 000f 49       	 .byte 73
 1233 0010 46       	 .byte 70
 1234 0011 49       	 .byte 73
 1235 0012 43       	 .byte 67
 1236 0013 41       	 .byte 65
 1237 0014 54       	 .byte 84
 1238 0015 45       	 .byte 69
 1239 0016 2D       	 .byte 45
 1240 0017 2D       	 .byte 45
 1241 0018 2D       	 .byte 45
 1242 0019 2D       	 .byte 45
 1243 001a 2D       	 .byte 45
 1244 001b 0A       	 .byte 10
 1245 001c 4D       	 .byte 77
 1246 001d 49       	 .byte 73
 1247 001e 49       	 .byte 73
 1248 001f 44       	 .byte 68
 1249 0020 57       	 .byte 87
 1250 0021 54       	 .byte 84
 1251 0022 43       	 .byte 67
 1252 0023 43       	 .byte 67
 1253 0024 41       	 .byte 65
 1254 0025 6B       	 .byte 107
 1255 0026 47       	 .byte 71
 1256 0027 67       	 .byte 103
 1257 0028 41       	 .byte 65
 1258 0029 77       	 .byte 119
 1259 002a 49       	 .byte 73
 1260 002b 42       	 .byte 66
 1261 002c 41       	 .byte 65
 1262 002d 67       	 .byte 103
 1263 002e 49       	 .byte 73
 1264 002f 55       	 .byte 85
 1265 0030 64       	 .byte 100
 1266 0031 37       	 .byte 55
 1267 0032 6F       	 .byte 111
 1268 0033 4A       	 .byte 74
 1269 0034 62       	 .byte 98
 1270 0035 75       	 .byte 117
 1271 0036 44       	 .byte 68
 1272 0037 4E       	 .byte 78
 1273 0038 5A       	 .byte 90
 1274 0039 65       	 .byte 101
 1275 003a 45       	 .byte 69
 1276 003b 33       	 .byte 51
 1277 003c 4F       	 .byte 79
 1278 003d 61       	 .byte 97
 1279 003e 48       	 .byte 72
 1280 003f 31       	 .byte 49
 1281 0040 52       	 .byte 82
 1282 0041 2F       	 .byte 47
 1283 0042 50       	 .byte 80
 1284 0043 6E       	 .byte 110
 1285 0044 6E       	 .byte 110
 1286 0045 6B       	 .byte 107
 1287 0046 6D       	 .byte 109
 1288 0047 6C       	 .byte 108
 1289 0048 48       	 .byte 72
 1290 0049 74       	 .byte 116
 1291 004a 49       	 .byte 73
 1292 004b 77       	 .byte 119
 1293 004c 44       	 .byte 68
 1294 004d 51       	 .byte 81
 1295 004e 59       	 .byte 89
 1296 004f 4A       	 .byte 74
 1297 0050 4B       	 .byte 75
 1298 0051 6F       	 .byte 111
 1299 0052 5A       	 .byte 90
 1300 0053 49       	 .byte 73
 1301 0054 68       	 .byte 104
 1302 0055 76       	 .byte 118
 1303 0056 63       	 .byte 99
 1304 0057 4E       	 .byte 78
 1305 0058 41       	 .byte 65
 1306 0059 51       	 .byte 81
 1307 005a 45       	 .byte 69
 1308 005b 4C       	 .byte 76
 1309 005c 0A       	 .byte 10
 1310 005d 42       	 .byte 66
 1311 005e 51       	 .byte 81
 1312 005f 41       	 .byte 65
 1313 0060 77       	 .byte 119
 1314 0061 54       	 .byte 84
 1315 0062 54       	 .byte 84
 1316 0063 46       	 .byte 70
 1317 0064 4C       	 .byte 76
 1318 0065 4D       	 .byte 77
 1319 0066 45       	 .byte 69
 1320 0067 6B       	 .byte 107
 1321 0068 47       	 .byte 71
 1322 0069 41       	 .byte 65
 1323 006a 31       	 .byte 49
 1324 006b 55       	 .byte 85
 1325 006c 45       	 .byte 69
 1326 006d 43       	 .byte 67
 1327 006e 77       	 .byte 119
 1328 006f 78       	 .byte 120
 1329 0070 43       	 .byte 67
 1330 0071 51       	 .byte 81
 1331 0072 57       	 .byte 87
 1332 0073 31       	 .byte 49
 1333 0074 68       	 .byte 104
 1334 0075 65       	 .byte 101
 1335 0076 6D       	 .byte 109
 1336 0077 39       	 .byte 57
 1337 0078 75       	 .byte 117
 1338 0079 49       	 .byte 73
 1339 007a 46       	 .byte 70
 1340 007b 64       	 .byte 100
 1341 007c 6C       	 .byte 108
 1342 007d 59       	 .byte 89
 1343 007e 69       	 .byte 105
 1344 007f 42       	 .byte 66
 1345 0080 54       	 .byte 84
 1346 0081 5A       	 .byte 90
 1347 0082 58       	 .byte 88
 1348 0083 4A       	 .byte 74
 1349 0084 32       	 .byte 50
 1350 0085 61       	 .byte 97
 1351 0086 57       	 .byte 87
 1352 0087 4E       	 .byte 78
 1353 0088 6C       	 .byte 108
 1354 0089 63       	 .byte 99
 1355 008a 79       	 .byte 121
 1356 008b 42       	 .byte 66
 1357 008c 50       	 .byte 80
 1358 008d 50       	 .byte 80
 1359 008e 55       	 .byte 85
 1360 008f 46       	 .byte 70
 1361 0090 74       	 .byte 116
 1362 0091 59       	 .byte 89
 1363 0092 58       	 .byte 88
 1364 0093 70       	 .byte 112
 1365 0094 76       	 .byte 118
 1366 0095 62       	 .byte 98
 1367 0096 69       	 .byte 105
 1368 0097 35       	 .byte 53
 1369 0098 6A       	 .byte 106
 1370 0099 62       	 .byte 98
 1371 009a 32       	 .byte 50
 1372 009b 30       	 .byte 48
 1373 009c 67       	 .byte 103
 1374 009d 0A       	 .byte 10
 1375 009e 53       	 .byte 83
 1376 009f 57       	 .byte 87
 1377 00a0 35       	 .byte 53
 1378 00a1 6A       	 .byte 106
 1379 00a2 4C       	 .byte 76
 1380 00a3 69       	 .byte 105
 1381 00a4 42       	 .byte 66
 1382 00a5 4D       	 .byte 77
 1383 00a6 50       	 .byte 80
 1384 00a7 56       	 .byte 86
 1385 00a8 4E       	 .byte 78
 1386 00a9 6C       	 .byte 108
 1387 00aa 59       	 .byte 89
 1388 00ab 58       	 .byte 88
 1389 00ac 52       	 .byte 82
 1390 00ad 30       	 .byte 48
 1391 00ae 62       	 .byte 98
 1392 00af 47       	 .byte 71
 1393 00b0 55       	 .byte 85
 1394 00b1 67       	 .byte 103
 1395 00b2 55       	 .byte 85
 1396 00b3 31       	 .byte 49
 1397 00b4 51       	 .byte 81
 1398 00b5 39       	 .byte 57
 1399 00b6 56       	 .byte 86
 1400 00b7 32       	 .byte 50
 1401 00b8 46       	 .byte 70
 1402 00b9 7A       	 .byte 122
 1403 00ba 61       	 .byte 97
 1404 00bb 47       	 .byte 71
 1405 00bc 6C       	 .byte 108
 1406 00bd 75       	 .byte 117
 1407 00be 5A       	 .byte 90
 1408 00bf 33       	 .byte 51
 1409 00c0 52       	 .byte 82
 1410 00c1 76       	 .byte 118
 1411 00c2 62       	 .byte 98
 1412 00c3 69       	 .byte 105
 1413 00c4 42       	 .byte 66
 1414 00c5 44       	 .byte 68
 1415 00c6 50       	 .byte 80
 1416 00c7 56       	 .byte 86
 1417 00c8 56       	 .byte 86
 1418 00c9 54       	 .byte 84
 1419 00ca 4D       	 .byte 77
 1420 00cb 42       	 .byte 66
 1421 00cc 34       	 .byte 52
 1422 00cd 58       	 .byte 88
 1423 00ce 44       	 .byte 68
 1424 00cf 54       	 .byte 84
 1425 00d0 49       	 .byte 73
 1426 00d1 30       	 .byte 48
 1427 00d2 4D       	 .byte 77
 1428 00d3 44       	 .byte 68
 1429 00d4 4D       	 .byte 77
 1430 00d5 77       	 .byte 119
 1431 00d6 4E       	 .byte 78
 1432 00d7 6A       	 .byte 106
 1433 00d8 45       	 .byte 69
 1434 00d9 77       	 .byte 119
 1435 00da 4D       	 .byte 77
 1436 00db 7A       	 .byte 122
 1437 00dc 67       	 .byte 103
 1438 00dd 77       	 .byte 119
 1439 00de 0A       	 .byte 10
 1440 00df 4F       	 .byte 79
 1441 00e0 46       	 .byte 70
 1442 00e1 6F       	 .byte 111
 1443 00e2 58       	 .byte 88
 1444 00e3 44       	 .byte 68
 1445 00e4 54       	 .byte 84
 1446 00e5 51       	 .byte 81
 1447 00e6 35       	 .byte 53
 1448 00e7 4D       	 .byte 77
 1449 00e8 54       	 .byte 84
 1450 00e9 49       	 .byte 73
 1451 00ea 7A       	 .byte 122
 1452 00eb 4D       	 .byte 77
 1453 00ec 54       	 .byte 84
 1454 00ed 49       	 .byte 73
 1455 00ee 7A       	 .byte 122
 1456 00ef 4E       	 .byte 78
 1457 00f0 54       	 .byte 84
 1458 00f1 6B       	 .byte 107
 1459 00f2 31       	 .byte 49
 1460 00f3 4F       	 .byte 79
 1461 00f4 56       	 .byte 86
 1462 00f5 6F       	 .byte 111
 1463 00f6 77       	 .byte 119
 1464 00f7 48       	 .byte 72
 1465 00f8 6A       	 .byte 106
 1466 00f9 45       	 .byte 69
 1467 00fa 63       	 .byte 99
 1468 00fb 4D       	 .byte 77
 1469 00fc 42       	 .byte 66
 1470 00fd 6F       	 .byte 111
 1471 00fe 47       	 .byte 71
 1472 00ff 41       	 .byte 65
 1473 0100 31       	 .byte 49
 1474 0101 55       	 .byte 85
 1475 0102 45       	 .byte 69
 1476 0103 41       	 .byte 65
 1477 0104 77       	 .byte 119
 1478 0105 77       	 .byte 119
 1479 0106 54       	 .byte 84
 1480 0107 51       	 .byte 81
 1481 0108 56       	 .byte 86
 1482 0109 64       	 .byte 100
 1483 010a 54       	 .byte 84
 1484 010b 49       	 .byte 73
 1485 010c 45       	 .byte 69
 1486 010d 6C       	 .byte 108
 1487 010e 76       	 .byte 118
 1488 010f 56       	 .byte 86
 1489 0110 43       	 .byte 67
 1490 0111 42       	 .byte 66
 1491 0112 44       	 .byte 68
 1492 0113 5A       	 .byte 90
 1493 0114 58       	 .byte 88
 1494 0115 4A       	 .byte 74
 1495 0116 30       	 .byte 48
 1496 0117 61       	 .byte 97
 1497 0118 57       	 .byte 87
 1498 0119 5A       	 .byte 90
 1499 011a 70       	 .byte 112
 1500 011b 59       	 .byte 89
 1501 011c 32       	 .byte 50
 1502 011d 46       	 .byte 70
 1503 011e 30       	 .byte 48
 1504 011f 0A       	 .byte 10
 1505 0120 5A       	 .byte 90
 1506 0121 54       	 .byte 84
 1507 0122 43       	 .byte 67
 1508 0123 43       	 .byte 67
 1509 0124 41       	 .byte 65
 1510 0125 53       	 .byte 83
 1511 0126 49       	 .byte 73
 1512 0127 77       	 .byte 119
 1513 0128 44       	 .byte 68
 1514 0129 51       	 .byte 81
 1515 012a 59       	 .byte 89
 1516 012b 4A       	 .byte 74
 1517 012c 4B       	 .byte 75
 1518 012d 6F       	 .byte 111
 1519 012e 5A       	 .byte 90
 1520 012f 49       	 .byte 73
 1521 0130 68       	 .byte 104
 1522 0131 76       	 .byte 118
 1523 0132 63       	 .byte 99
 1524 0133 4E       	 .byte 78
 1525 0134 41       	 .byte 65
 1526 0135 51       	 .byte 81
 1527 0136 45       	 .byte 69
 1528 0137 42       	 .byte 66
 1529 0138 42       	 .byte 66
 1530 0139 51       	 .byte 81
 1531 013a 41       	 .byte 65
 1532 013b 44       	 .byte 68
 1533 013c 67       	 .byte 103
 1534 013d 67       	 .byte 103
 1535 013e 45       	 .byte 69
 1536 013f 50       	 .byte 80
 1537 0140 41       	 .byte 65
 1538 0141 44       	 .byte 68
 1539 0142 43       	 .byte 67
 1540 0143 43       	 .byte 67
 1541 0144 41       	 .byte 65
 1542 0145 51       	 .byte 81
 1543 0146 6F       	 .byte 111
 1544 0147 43       	 .byte 67
 1545 0148 67       	 .byte 103
 1546 0149 67       	 .byte 103
 1547 014a 45       	 .byte 69
 1548 014b 42       	 .byte 66
 1549 014c 41       	 .byte 65
 1550 014d 4D       	 .byte 77
 1551 014e 6E       	 .byte 110
 1552 014f 44       	 .byte 68
 1553 0150 45       	 .byte 69
 1554 0151 78       	 .byte 120
 1555 0152 6C       	 .byte 108
 1556 0153 6D       	 .byte 109
 1557 0154 74       	 .byte 116
 1558 0155 32       	 .byte 50
 1559 0156 72       	 .byte 114
 1560 0157 43       	 .byte 67
 1561 0158 72       	 .byte 114
 1562 0159 70       	 .byte 112
 1563 015a 33       	 .byte 51
 1564 015b 69       	 .byte 105
 1565 015c 37       	 .byte 55
 1566 015d 55       	 .byte 85
 1567 015e 65       	 .byte 101
 1568 015f 65       	 .byte 101
 1569 0160 0A       	 .byte 10
 1570 0161 6B       	 .byte 107
 1571 0162 71       	 .byte 113
 1572 0163 73       	 .byte 115
 1573 0164 65       	 .byte 101
 1574 0165 74       	 .byte 116
 1575 0166 70       	 .byte 112
 1576 0167 38       	 .byte 56
 1577 0168 50       	 .byte 80
 1578 0169 69       	 .byte 105
 1579 016a 71       	 .byte 113
 1580 016b 50       	 .byte 80
 1581 016c 4A       	 .byte 74
 1582 016d 67       	 .byte 103
 1583 016e 58       	 .byte 88
 1584 016f 33       	 .byte 51
 1585 0170 36       	 .byte 54
 1586 0171 37       	 .byte 55
 1587 0172 5A       	 .byte 90
 1588 0173 31       	 .byte 49
 1589 0174 76       	 .byte 118
 1590 0175 79       	 .byte 121
 1591 0176 63       	 .byte 99
 1592 0177 6B       	 .byte 107
 1593 0178 68       	 .byte 104
 1594 0179 4A       	 .byte 74
 1595 017a 32       	 .byte 50
 1596 017b 6B       	 .byte 107
 1597 017c 71       	 .byte 113
 1598 017d 2B       	 .byte 43
 1599 017e 52       	 .byte 82
 1600 017f 61       	 .byte 97
 1601 0180 58       	 .byte 88
 1602 0181 77       	 .byte 119
 1603 0182 77       	 .byte 119
 1604 0183 71       	 .byte 113
 1605 0184 70       	 .byte 112
 1606 0185 30       	 .byte 48
 1607 0186 57       	 .byte 87
 1608 0187 6A       	 .byte 106
 1609 0188 44       	 .byte 68
 1610 0189 51       	 .byte 81
 1611 018a 47       	 .byte 71
 1612 018b 6B       	 .byte 107
 1613 018c 69       	 .byte 105
 1614 018d 33       	 .byte 51
 1615 018e 6F       	 .byte 111
 1616 018f 6F       	 .byte 111
 1617 0190 68       	 .byte 104
 1618 0191 6B       	 .byte 107
 1619 0192 43       	 .byte 67
 1620 0193 4E       	 .byte 78
 1621 0194 45       	 .byte 69
 1622 0195 77       	 .byte 119
 1623 0196 6D       	 .byte 109
 1624 0197 44       	 .byte 68
 1625 0198 39       	 .byte 57
 1626 0199 73       	 .byte 115
 1627 019a 46       	 .byte 70
 1628 019b 62       	 .byte 98
 1629 019c 6B       	 .byte 107
 1630 019d 2F       	 .byte 47
 1631 019e 61       	 .byte 97
 1632 019f 6C       	 .byte 108
 1633 01a0 76       	 .byte 118
 1634 01a1 0A       	 .byte 10
 1635 01a2 6A       	 .byte 106
 1636 01a3 62       	 .byte 98
 1637 01a4 4E       	 .byte 78
 1638 01a5 77       	 .byte 119
 1639 01a6 35       	 .byte 53
 1640 01a7 57       	 .byte 87
 1641 01a8 32       	 .byte 50
 1642 01a9 6A       	 .byte 106
 1643 01aa 45       	 .byte 69
 1644 01ab 46       	 .byte 70
 1645 01ac 67       	 .byte 103
 1646 01ad 33       	 .byte 51
 1647 01ae 36       	 .byte 54
 1648 01af 63       	 .byte 99
 1649 01b0 53       	 .byte 83
 1650 01b1 64       	 .byte 100
 1651 01b2 6F       	 .byte 111
 1652 01b3 36       	 .byte 54
 1653 01b4 70       	 .byte 112
 1654 01b5 67       	 .byte 103
 1655 01b6 69       	 .byte 105
 1656 01b7 6B       	 .byte 107
 1657 01b8 63       	 .byte 99
 1658 01b9 65       	 .byte 101
 1659 01ba 4C       	 .byte 76
 1660 01bb 51       	 .byte 81
 1661 01bc 59       	 .byte 89
 1662 01bd 37       	 .byte 55
 1663 01be 7A       	 .byte 122
 1664 01bf 5A       	 .byte 90
 1665 01c0 4F       	 .byte 79
 1666 01c1 47       	 .byte 71
 1667 01c2 6D       	 .byte 109
 1668 01c3 70       	 .byte 112
 1669 01c4 6A       	 .byte 106
 1670 01c5 4E       	 .byte 78
 1671 01c6 6F       	 .byte 111
 1672 01c7 4D       	 .byte 77
 1673 01c8 49       	 .byte 73
 1674 01c9 38       	 .byte 56
 1675 01ca 4B       	 .byte 75
 1676 01cb 34       	 .byte 52
 1677 01cc 53       	 .byte 83
 1678 01cd 42       	 .byte 66
 1679 01ce 65       	 .byte 101
 1680 01cf 73       	 .byte 115
 1681 01d0 65       	 .byte 101
 1682 01d1 6F       	 .byte 111
 1683 01d2 38       	 .byte 56
 1684 01d3 4A       	 .byte 74
 1685 01d4 4E       	 .byte 78
 1686 01d5 66       	 .byte 102
 1687 01d6 4E       	 .byte 78
 1688 01d7 5A       	 .byte 90
 1689 01d8 4F       	 .byte 79
 1690 01d9 35       	 .byte 53
 1691 01da 4C       	 .byte 76
 1692 01db 43       	 .byte 67
 1693 01dc 47       	 .byte 71
 1694 01dd 67       	 .byte 103
 1695 01de 73       	 .byte 115
 1696 01df 65       	 .byte 101
 1697 01e0 33       	 .byte 51
 1698 01e1 64       	 .byte 100
 1699 01e2 0A       	 .byte 10
 1700 01e3 69       	 .byte 105
 1701 01e4 7A       	 .byte 122
 1702 01e5 50       	 .byte 80
 1703 01e6 33       	 .byte 51
 1704 01e7 58       	 .byte 88
 1705 01e8 6A       	 .byte 106
 1706 01e9 71       	 .byte 113
 1707 01ea 33       	 .byte 51
 1708 01eb 5A       	 .byte 90
 1709 01ec 33       	 .byte 51
 1710 01ed 54       	 .byte 84
 1711 01ee 41       	 .byte 65
 1712 01ef 38       	 .byte 56
 1713 01f0 66       	 .byte 102
 1714 01f1 71       	 .byte 113
 1715 01f2 4E       	 .byte 78
 1716 01f3 79       	 .byte 121
 1717 01f4 6A       	 .byte 106
 1718 01f5 77       	 .byte 119
 1719 01f6 79       	 .byte 121
 1720 01f7 4B       	 .byte 75
 1721 01f8 33       	 .byte 51
 1722 01f9 59       	 .byte 89
 1723 01fa 50       	 .byte 80
 1724 01fb 49       	 .byte 73
 1725 01fc 53       	 .byte 83
 1726 01fd 43       	 .byte 67
 1727 01fe 70       	 .byte 112
 1728 01ff 32       	 .byte 50
 1729 0200 7A       	 .byte 122
 1730 0201 73       	 .byte 115
 1731 0202 49       	 .byte 73
 1732 0203 4F       	 .byte 79
 1733 0204 68       	 .byte 104
 1734 0205 31       	 .byte 49
 1735 0206 79       	 .byte 121
 1736 0207 66       	 .byte 102
 1737 0208 74       	 .byte 116
 1738 0209 66       	 .byte 102
 1739 020a 73       	 .byte 115
 1740 020b 42       	 .byte 66
 1741 020c 33       	 .byte 51
 1742 020d 41       	 .byte 65
 1743 020e 67       	 .byte 103
 1744 020f 76       	 .byte 118
 1745 0210 6D       	 .byte 109
 1746 0211 76       	 .byte 118
 1747 0212 68       	 .byte 104
 1748 0213 41       	 .byte 65
 1749 0214 4A       	 .byte 74
 1750 0215 53       	 .byte 83
 1751 0216 7A       	 .byte 122
 1752 0217 39       	 .byte 57
 1753 0218 6C       	 .byte 108
 1754 0219 69       	 .byte 105
 1755 021a 4D       	 .byte 77
 1756 021b 57       	 .byte 87
 1757 021c 51       	 .byte 81
 1758 021d 49       	 .byte 73
 1759 021e 43       	 .byte 67
 1760 021f 4F       	 .byte 79
 1761 0220 45       	 .byte 69
 1762 0221 63       	 .byte 99
 1763 0222 6A       	 .byte 106
 1764 0223 0A       	 .byte 10
 1765 0224 55       	 .byte 85
 1766 0225 6B       	 .byte 107
 1767 0226 68       	 .byte 104
 1768 0227 75       	 .byte 117
 1769 0228 4C       	 .byte 76
 1770 0229 44       	 .byte 68
 1771 022a 72       	 .byte 114
 1772 022b 68       	 .byte 104
 1773 022c 55       	 .byte 85
 1774 022d 48       	 .byte 72
 1775 022e 79       	 .byte 121
 1776 022f 46       	 .byte 70
 1777 0230 6B       	 .byte 107
 1778 0231 2B       	 .byte 43
 1779 0232 65       	 .byte 101
 1780 0233 79       	 .byte 121
 1781 0234 31       	 .byte 49
 1782 0235 73       	 .byte 115
 1783 0236 63       	 .byte 99
 1784 0237 5A       	 .byte 90
 1785 0238 54       	 .byte 84
 1786 0239 4B       	 .byte 75
 1787 023a 72       	 .byte 114
 1788 023b 6F       	 .byte 111
 1789 023c 7A       	 .byte 122
 1790 023d 4B       	 .byte 75
 1791 023e 59       	 .byte 89
 1792 023f 6E       	 .byte 110
 1793 0240 44       	 .byte 68
 1794 0241 42       	 .byte 66
 1795 0242 6D       	 .byte 109
 1796 0243 33       	 .byte 51
 1797 0244 45       	 .byte 69
 1798 0245 73       	 .byte 115
 1799 0246 5A       	 .byte 90
 1800 0247 75       	 .byte 117
 1801 0248 63       	 .byte 99
 1802 0249 62       	 .byte 98
 1803 024a 46       	 .byte 70
 1804 024b 39       	 .byte 57
 1805 024c 38       	 .byte 56
 1806 024d 35       	 .byte 53
 1807 024e 77       	 .byte 119
 1808 024f 39       	 .byte 57
 1809 0250 4B       	 .byte 75
 1810 0251 77       	 .byte 119
 1811 0252 38       	 .byte 56
 1812 0253 70       	 .byte 112
 1813 0254 58       	 .byte 88
 1814 0255 32       	 .byte 50
 1815 0256 70       	 .byte 112
 1816 0257 4B       	 .byte 75
 1817 0258 71       	 .byte 113
 1818 0259 6B       	 .byte 107
 1819 025a 4A       	 .byte 74
 1820 025b 37       	 .byte 55
 1821 025c 46       	 .byte 70
 1822 025d 56       	 .byte 86
 1823 025e 66       	 .byte 102
 1824 025f 33       	 .byte 51
 1825 0260 6F       	 .byte 111
 1826 0261 65       	 .byte 101
 1827 0262 77       	 .byte 119
 1828 0263 75       	 .byte 117
 1829 0264 0A       	 .byte 10
 1830 0265 35       	 .byte 53
 1831 0266 6A       	 .byte 106
 1832 0267 57       	 .byte 87
 1833 0268 69       	 .byte 105
 1834 0269 4F       	 .byte 79
 1835 026a 46       	 .byte 70
 1836 026b 63       	 .byte 99
 1837 026c 4D       	 .byte 77
 1838 026d 46       	 .byte 70
 1839 026e 42       	 .byte 66
 1840 026f 2B       	 .byte 43
 1841 0270 42       	 .byte 66
 1842 0271 76       	 .byte 118
 1843 0272 61       	 .byte 97
 1844 0273 48       	 .byte 72
 1845 0274 62       	 .byte 98
 1846 0275 47       	 .byte 71
 1847 0276 48       	 .byte 72
 1848 0277 55       	 .byte 85
 1849 0278 37       	 .byte 55
 1850 0279 62       	 .byte 98
 1851 027a 34       	 .byte 52
 1852 027b 58       	 .byte 88
 1853 027c 62       	 .byte 98
 1854 027d 33       	 .byte 51
 1855 027e 4D       	 .byte 77
 1856 027f 58       	 .byte 88
 1857 0280 31       	 .byte 49
 1858 0281 4D       	 .byte 77
 1859 0282 6C       	 .byte 108
 1860 0283 54       	 .byte 84
 1861 0284 69       	 .byte 105
 1862 0285 42       	 .byte 66
 1863 0286 41       	 .byte 65
 1864 0287 41       	 .byte 65
 1865 0288 78       	 .byte 120
 1866 0289 7A       	 .byte 122
 1867 028a 55       	 .byte 85
 1868 028b 45       	 .byte 69
 1869 028c 78       	 .byte 120
 1870 028d 4D       	 .byte 77
 1871 028e 76       	 .byte 118
 1872 028f 34       	 .byte 52
 1873 0290 59       	 .byte 89
 1874 0291 38       	 .byte 56
 1875 0292 59       	 .byte 89
 1876 0293 6A       	 .byte 106
 1877 0294 69       	 .byte 105
 1878 0295 6E       	 .byte 110
 1879 0296 43       	 .byte 67
 1880 0297 6E       	 .byte 110
 1881 0298 33       	 .byte 51
 1882 0299 37       	 .byte 55
 1883 029a 59       	 .byte 89
 1884 029b 50       	 .byte 80
 1885 029c 50       	 .byte 80
 1886 029d 4F       	 .byte 79
 1887 029e 67       	 .byte 103
 1888 029f 45       	 .byte 69
 1889 02a0 6F       	 .byte 111
 1890 02a1 2F       	 .byte 47
 1891 02a2 56       	 .byte 86
 1892 02a3 79       	 .byte 121
 1893 02a4 53       	 .byte 83
 1894 02a5 0A       	 .byte 10
 1895 02a6 75       	 .byte 117
 1896 02a7 4F       	 .byte 79
 1897 02a8 6B       	 .byte 107
 1898 02a9 43       	 .byte 67
 1899 02aa 41       	 .byte 65
 1900 02ab 77       	 .byte 119
 1901 02ac 45       	 .byte 69
 1902 02ad 41       	 .byte 65
 1903 02ae 41       	 .byte 65
 1904 02af 61       	 .byte 97
 1905 02b0 4E       	 .byte 78
 1906 02b1 67       	 .byte 103
 1907 02b2 4D       	 .byte 77
 1908 02b3 46       	 .byte 70
 1909 02b4 34       	 .byte 52
 1910 02b5 77       	 .byte 119
 1911 02b6 48       	 .byte 72
 1912 02b7 77       	 .byte 119
 1913 02b8 59       	 .byte 89
 1914 02b9 44       	 .byte 68
 1915 02ba 56       	 .byte 86
 1916 02bb 52       	 .byte 82
 1917 02bc 30       	 .byte 48
 1918 02bd 6A       	 .byte 106
 1919 02be 42       	 .byte 66
 1920 02bf 42       	 .byte 66
 1921 02c0 67       	 .byte 103
 1922 02c1 77       	 .byte 119
 1923 02c2 46       	 .byte 70
 1924 02c3 6F       	 .byte 111
 1925 02c4 41       	 .byte 65
 1926 02c5 55       	 .byte 85
 1927 02c6 78       	 .byte 120
 1928 02c7 7A       	 .byte 122
 1929 02c8 72       	 .byte 114
 1930 02c9 34       	 .byte 52
 1931 02ca 50       	 .byte 80
 1932 02cb 6F       	 .byte 111
 1933 02cc 74       	 .byte 116
 1934 02cd 48       	 .byte 72
 1935 02ce 42       	 .byte 66
 1936 02cf 70       	 .byte 112
 1937 02d0 58       	 .byte 88
 1938 02d1 50       	 .byte 80
 1939 02d2 68       	 .byte 104
 1940 02d3 74       	 .byte 116
 1941 02d4 77       	 .byte 119
 1942 02d5 38       	 .byte 56
 1943 02d6 6F       	 .byte 111
 1944 02d7 74       	 .byte 116
 1945 02d8 4B       	 .byte 75
 1946 02d9 6A       	 .byte 106
 1947 02da 50       	 .byte 80
 1948 02db 70       	 .byte 112
 1949 02dc 6F       	 .byte 111
 1950 02dd 72       	 .byte 114
 1951 02de 75       	 .byte 117
 1952 02df 6F       	 .byte 111
 1953 02e0 49       	 .byte 73
 1954 02e1 77       	 .byte 119
 1955 02e2 48       	 .byte 72
 1956 02e3 51       	 .byte 81
 1957 02e4 59       	 .byte 89
 1958 02e5 44       	 .byte 68
 1959 02e6 0A       	 .byte 10
 1960 02e7 56       	 .byte 86
 1961 02e8 52       	 .byte 82
 1962 02e9 30       	 .byte 48
 1963 02ea 4F       	 .byte 79
 1964 02eb 42       	 .byte 66
 1965 02ec 42       	 .byte 66
 1966 02ed 59       	 .byte 89
 1967 02ee 45       	 .byte 69
 1968 02ef 46       	 .byte 70
 1969 02f0 43       	 .byte 67
 1970 02f1 68       	 .byte 104
 1971 02f2 4C       	 .byte 76
 1972 02f3 4D       	 .byte 77
 1973 02f4 6E       	 .byte 110
 1974 02f5 53       	 .byte 83
 1975 02f6 53       	 .byte 83
 1976 02f7 7A       	 .byte 122
 1977 02f8 33       	 .byte 51
 1978 02f9 41       	 .byte 65
 1979 02fa 54       	 .byte 84
 1980 02fb 7A       	 .byte 122
 1981 02fc 34       	 .byte 52
 1982 02fd 53       	 .byte 83
 1983 02fe 71       	 .byte 113
 1984 02ff 4C       	 .byte 76
 1985 0300 78       	 .byte 120
 1986 0301 79       	 .byte 121
 1987 0302 6F       	 .byte 111
 1988 0303 77       	 .byte 119
 1989 0304 49       	 .byte 73
 1990 0305 66       	 .byte 102
 1991 0306 67       	 .byte 103
 1992 0307 37       	 .byte 55
 1993 0308 35       	 .byte 53
 1994 0309 5A       	 .byte 90
 1995 030a 71       	 .byte 113
 1996 030b 4D       	 .byte 77
 1997 030c 41       	 .byte 65
 1998 030d 77       	 .byte 119
 1999 030e 47       	 .byte 71
 2000 030f 41       	 .byte 65
 2001 0310 31       	 .byte 49
 2002 0311 55       	 .byte 85
 2003 0312 64       	 .byte 100
 2004 0313 45       	 .byte 69
 2005 0314 77       	 .byte 119
 2006 0315 45       	 .byte 69
 2007 0316 42       	 .byte 66
 2008 0317 2F       	 .byte 47
 2009 0318 77       	 .byte 119
 2010 0319 51       	 .byte 81
 2011 031a 43       	 .byte 67
 2012 031b 4D       	 .byte 77
 2013 031c 41       	 .byte 65
 2014 031d 41       	 .byte 65
 2015 031e 77       	 .byte 119
 2016 031f 44       	 .byte 68
 2017 0320 67       	 .byte 103
 2018 0321 59       	 .byte 89
 2019 0322 44       	 .byte 68
 2020 0323 56       	 .byte 86
 2021 0324 52       	 .byte 82
 2022 0325 30       	 .byte 48
 2023 0326 50       	 .byte 80
 2024 0327 0A       	 .byte 10
 2025 0328 41       	 .byte 65
 2026 0329 51       	 .byte 81
 2027 032a 48       	 .byte 72
 2028 032b 2F       	 .byte 47
 2029 032c 42       	 .byte 66
 2030 032d 41       	 .byte 65
 2031 032e 51       	 .byte 81
 2032 032f 44       	 .byte 68
 2033 0330 41       	 .byte 65
 2034 0331 67       	 .byte 103
 2035 0332 65       	 .byte 101
 2036 0333 41       	 .byte 65
 2037 0334 4D       	 .byte 77
 2038 0335 41       	 .byte 65
 2039 0336 30       	 .byte 48
 2040 0337 47       	 .byte 71
 2041 0338 43       	 .byte 67
 2042 0339 53       	 .byte 83
 2043 033a 71       	 .byte 113
 2044 033b 47       	 .byte 71
 2045 033c 53       	 .byte 83
 2046 033d 49       	 .byte 73
 2047 033e 62       	 .byte 98
 2048 033f 33       	 .byte 51
 2049 0340 44       	 .byte 68
 2050 0341 51       	 .byte 81
 2051 0342 45       	 .byte 69
 2052 0343 42       	 .byte 66
 2053 0344 43       	 .byte 67
 2054 0345 77       	 .byte 119
 2055 0346 55       	 .byte 85
 2056 0347 41       	 .byte 65
 2057 0348 41       	 .byte 65
 2058 0349 34       	 .byte 52
 2059 034a 49       	 .byte 73
 2060 034b 42       	 .byte 66
 2061 034c 41       	 .byte 65
 2062 034d 51       	 .byte 81
 2063 034e 43       	 .byte 67
 2064 034f 65       	 .byte 101
 2065 0350 64       	 .byte 100
 2066 0351 4A       	 .byte 74
 2067 0352 64       	 .byte 100
 2068 0353 35       	 .byte 53
 2069 0354 56       	 .byte 86
 2070 0355 79       	 .byte 121
 2071 0356 53       	 .byte 83
 2072 0357 4E       	 .byte 78
 2073 0358 48       	 .byte 72
 2074 0359 70       	 .byte 112
 2075 035a 61       	 .byte 97
 2076 035b 70       	 .byte 112
 2077 035c 62       	 .byte 98
 2078 035d 66       	 .byte 102
 2079 035e 6F       	 .byte 111
 2080 035f 50       	 .byte 80
 2081 0360 53       	 .byte 83
 2082 0361 65       	 .byte 101
 2083 0362 66       	 .byte 102
 2084 0363 67       	 .byte 103
 2085 0364 7A       	 .byte 122
 2086 0365 39       	 .byte 57
 2087 0366 4F       	 .byte 79
 2088 0367 64       	 .byte 100
 2089 0368 0A       	 .byte 10
 2090 0369 43       	 .byte 67
 2091 036a 36       	 .byte 54
 2092 036b 4F       	 .byte 79
 2093 036c 74       	 .byte 116
 2094 036d 42       	 .byte 66
 2095 036e 46       	 .byte 70
 2096 036f 52       	 .byte 82
 2097 0370 45       	 .byte 69
 2098 0371 63       	 .byte 99
 2099 0372 6C       	 .byte 108
 2100 0373 7A       	 .byte 122
 2101 0374 6B       	 .byte 107
 2102 0375 46       	 .byte 70
 2103 0376 36       	 .byte 54
 2104 0377 63       	 .byte 99
 2105 0378 54       	 .byte 84
 2106 0379 77       	 .byte 119
 2107 037a 42       	 .byte 66
 2108 037b 4E       	 .byte 78
 2109 037c 68       	 .byte 104
 2110 037d 39       	 .byte 57
 2111 037e 41       	 .byte 65
 2112 037f 55       	 .byte 85
 2113 0380 43       	 .byte 67
 2114 0381 46       	 .byte 70
 2115 0382 58       	 .byte 88
 2116 0383 38       	 .byte 56
 2117 0384 30       	 .byte 48
 2118 0385 6C       	 .byte 108
 2119 0386 79       	 .byte 121
 2120 0387 48       	 .byte 72
 2121 0388 4A       	 .byte 74
 2122 0389 32       	 .byte 50
 2123 038a 32       	 .byte 50
 2124 038b 73       	 .byte 115
 2125 038c 2F       	 .byte 47
 2126 038d 45       	 .byte 69
 2127 038e 31       	 .byte 49
 2128 038f 4A       	 .byte 74
 2129 0390 62       	 .byte 98
 2130 0391 45       	 .byte 69
 2131 0392 4C       	 .byte 76
 2132 0393 76       	 .byte 118
 2133 0394 52       	 .byte 82
 2134 0395 43       	 .byte 67
 2135 0396 49       	 .byte 73
 2136 0397 78       	 .byte 120
 2137 0398 6F       	 .byte 111
 2138 0399 68       	 .byte 104
 2139 039a 37       	 .byte 55
 2140 039b 75       	 .byte 117
 2141 039c 31       	 .byte 49
 2142 039d 71       	 .byte 113
 2143 039e 56       	 .byte 86
 2144 039f 76       	 .byte 118
 2145 03a0 59       	 .byte 89
 2146 03a1 75       	 .byte 117
 2147 03a2 50       	 .byte 80
 2148 03a3 42       	 .byte 66
 2149 03a4 4F       	 .byte 79
 2150 03a5 61       	 .byte 97
 2151 03a6 6A       	 .byte 106
 2152 03a7 4A       	 .byte 74
 2153 03a8 56       	 .byte 86
 2154 03a9 0A       	 .byte 10
 2155 03aa 51       	 .byte 81
 2156 03ab 73       	 .byte 115
 2157 03ac 33       	 .byte 51
 2158 03ad 41       	 .byte 65
 2159 03ae 66       	 .byte 102
 2160 03af 65       	 .byte 101
 2161 03b0 2F       	 .byte 47
 2162 03b1 44       	 .byte 68
 2163 03b2 75       	 .byte 117
 2164 03b3 7A       	 .byte 122
 2165 03b4 4C       	 .byte 76
 2166 03b5 52       	 .byte 82
 2167 03b6 6A       	 .byte 106
 2168 03b7 33       	 .byte 51
 2169 03b8 38       	 .byte 56
 2170 03b9 61       	 .byte 97
 2171 03ba 70       	 .byte 112
 2172 03bb 35       	 .byte 53
 2173 03bc 77       	 .byte 119
 2174 03bd 7A       	 .byte 122
 2175 03be 43       	 .byte 67
 2176 03bf 30       	 .byte 48
 2177 03c0 6F       	 .byte 111
 2178 03c1 38       	 .byte 56
 2179 03c2 2B       	 .byte 43
 2180 03c3 39       	 .byte 57
 2181 03c4 32       	 .byte 50
 2182 03c5 55       	 .byte 85
 2183 03c6 59       	 .byte 89
 2184 03c7 78       	 .byte 120
 2185 03c8 6E       	 .byte 110
 2186 03c9 56       	 .byte 86
 2187 03ca 58       	 .byte 88
 2188 03cb 51       	 .byte 81
 2189 03cc 31       	 .byte 49
 2190 03cd 2F       	 .byte 47
 2191 03ce 30       	 .byte 48
 2192 03cf 63       	 .byte 99
 2193 03d0 4C       	 .byte 76
 2194 03d1 4F       	 .byte 79
 2195 03d2 6E       	 .byte 110
 2196 03d3 42       	 .byte 66
 2197 03d4 4E       	 .byte 78
 2198 03d5 30       	 .byte 48
 2199 03d6 59       	 .byte 89
 2200 03d7 48       	 .byte 72
 2201 03d8 2B       	 .byte 43
 2202 03d9 54       	 .byte 84
 2203 03da 77       	 .byte 119
 2204 03db 54       	 .byte 84
 2205 03dc 49       	 .byte 73
 2206 03dd 73       	 .byte 115
 2207 03de 76       	 .byte 118
 2208 03df 38       	 .byte 56
 2209 03e0 47       	 .byte 71
 2210 03e1 4E       	 .byte 78
 2211 03e2 44       	 .byte 68
 2212 03e3 65       	 .byte 101
 2213 03e4 4E       	 .byte 78
 2214 03e5 64       	 .byte 100
 2215 03e6 61       	 .byte 97
 2216 03e7 6E       	 .byte 110
 2217 03e8 35       	 .byte 53
 2218 03e9 4D       	 .byte 77
 2219 03ea 0A       	 .byte 10
 2220 03eb 31       	 .byte 49
 2221 03ec 4D       	 .byte 77
 2222 03ed 39       	 .byte 57
 2223 03ee 64       	 .byte 100
 2224 03ef 37       	 .byte 55
 2225 03f0 32       	 .byte 50
 2226 03f1 4F       	 .byte 79
 2227 03f2 37       	 .byte 55
 2228 03f3 62       	 .byte 98
 2229 03f4 57       	 .byte 87
 2230 03f5 61       	 .byte 97
 2231 03f6 4C       	 .byte 76
 2232 03f7 6A       	 .byte 106
 2233 03f8 68       	 .byte 104
 2234 03f9 66       	 .byte 102
 2235 03fa 4B       	 .byte 75
 2236 03fb 56       	 .byte 86
 2237 03fc 4B       	 .byte 75
 2238 03fd 4E       	 .byte 78
 2239 03fe 55       	 .byte 85
 2240 03ff 4C       	 .byte 76
 2241 0400 6F       	 .byte 111
 2242 0401 75       	 .byte 117
 2243 0402 5A       	 .byte 90
 2244 0403 70       	 .byte 112
 2245 0404 46       	 .byte 70
 2246 0405 37       	 .byte 55
 2247 0406 51       	 .byte 81
 2248 0407 54       	 .byte 84
 2249 0408 57       	 .byte 87
 2250 0409 79       	 .byte 121
 2251 040a 6D       	 .byte 109
 2252 040b 4A       	 .byte 74
 2253 040c 66       	 .byte 102
 2254 040d 4D       	 .byte 77
 2255 040e 58       	 .byte 88
 2256 040f 37       	 .byte 55
 2257 0410 5A       	 .byte 90
 2258 0411 73       	 .byte 115
 2259 0412 52       	 .byte 82
 2260 0413 6B       	 .byte 107
 2261 0414 33       	 .byte 51
 2262 0415 61       	 .byte 97
 2263 0416 42       	 .byte 66
 2264 0417 69       	 .byte 105
 2265 0418 35       	 .byte 53
 2266 0419 58       	 .byte 88
 2267 041a 4C       	 .byte 76
 2268 041b 64       	 .byte 100
 2269 041c 36       	 .byte 54
 2270 041d 64       	 .byte 100
 2271 041e 2F       	 .byte 47
 2272 041f 54       	 .byte 84
 2273 0420 36       	 .byte 54
 2274 0421 61       	 .byte 97
 2275 0422 30       	 .byte 48
 2276 0423 74       	 .byte 116
 2277 0424 39       	 .byte 57
 2278 0425 31       	 .byte 49
 2279 0426 2F       	 .byte 47
 2280 0427 66       	 .byte 102
 2281 0428 5A       	 .byte 90
 2282 0429 50       	 .byte 80
 2283 042a 43       	 .byte 67
 2284 042b 0A       	 .byte 10
 2285 042c 64       	 .byte 100
 2286 042d 6E       	 .byte 110
 2287 042e 76       	 .byte 118
 2288 042f 6F       	 .byte 111
 2289 0430 66       	 .byte 102
 2290 0431 58       	 .byte 88
 2291 0432 4F       	 .byte 79
 2292 0433 53       	 .byte 83
 2293 0434 32       	 .byte 50
 2294 0435 4F       	 .byte 79
 2295 0436 48       	 .byte 72
 2296 0437 54       	 .byte 84
 2297 0438 32       	 .byte 50
 2298 0439 4D       	 .byte 77
 2299 043a 6E       	 .byte 110
 2300 043b 34       	 .byte 52
 2301 043c 4A       	 .byte 74
 2302 043d 69       	 .byte 105
 2303 043e 7A       	 .byte 122
 2304 043f 72       	 .byte 114
 2305 0440 78       	 .byte 120
 2306 0441 66       	 .byte 102
 2307 0442 39       	 .byte 57
 2308 0443 52       	 .byte 82
 2309 0444 44       	 .byte 68
 2310 0445 53       	 .byte 83
 2311 0446 45       	 .byte 69
 2312 0447 52       	 .byte 82
 2313 0448 59       	 .byte 89
 2314 0449 39       	 .byte 57
 2315 044a 58       	 .byte 88
 2316 044b 61       	 .byte 97
 2317 044c 2F       	 .byte 47
 2318 044d 59       	 .byte 89
 2319 044e 68       	 .byte 104
 2320 044f 49       	 .byte 73
 2321 0450 46       	 .byte 70
 2322 0451 35       	 .byte 53
 2323 0452 6C       	 .byte 108
 2324 0453 51       	 .byte 81
 2325 0454 78       	 .byte 120
 2326 0455 71       	 .byte 113
 2327 0456 4F       	 .byte 79
 2328 0457 38       	 .byte 56
 2329 0458 6C       	 .byte 108
 2330 0459 33       	 .byte 51
 2331 045a 59       	 .byte 89
 2332 045b 6B       	 .byte 107
 2333 045c 66       	 .byte 102
 2334 045d 53       	 .byte 83
 2335 045e 6C       	 .byte 108
 2336 045f 57       	 .byte 87
 2337 0460 45       	 .byte 69
 2338 0461 41       	 .byte 65
 2339 0462 65       	 .byte 101
 2340 0463 4B       	 .byte 75
 2341 0464 2B       	 .byte 43
 2342 0465 36       	 .byte 54
 2343 0466 71       	 .byte 113
 2344 0467 37       	 .byte 55
 2345 0468 47       	 .byte 71
 2346 0469 68       	 .byte 104
 2347 046a 51       	 .byte 81
 2348 046b 54       	 .byte 84
 2349 046c 0A       	 .byte 10
 2350 046d 65       	 .byte 101
 2351 046e 53       	 .byte 83
 2352 046f 79       	 .byte 121
 2353 0470 59       	 .byte 89
 2354 0471 66       	 .byte 102
 2355 0472 46       	 .byte 70
 2356 0473 69       	 .byte 105
 2357 0474 63       	 .byte 99
 2358 0475 74       	 .byte 116
 2359 0476 4F       	 .byte 79
 2360 0477 71       	 .byte 113
 2361 0478 45       	 .byte 69
 2362 0479 5A       	 .byte 90
 2363 047a 2B       	 .byte 43
 2364 047b 77       	 .byte 119
 2365 047c 74       	 .byte 116
 2366 047d 6E       	 .byte 110
 2367 047e 73       	 .byte 115
 2368 047f 46       	 .byte 70
 2369 0480 75       	 .byte 117
 2370 0481 77       	 .byte 119
 2371 0482 50       	 .byte 80
 2372 0483 79       	 .byte 121
 2373 0484 64       	 .byte 100
 2374 0485 33       	 .byte 51
 2375 0486 68       	 .byte 104
 2376 0487 74       	 .byte 116
 2377 0488 62       	 .byte 98
 2378 0489 65       	 .byte 101
 2379 048a 59       	 .byte 89
 2380 048b 66       	 .byte 102
 2381 048c 68       	 .byte 104
 2382 048d 47       	 .byte 71
 2383 048e 34       	 .byte 52
 2384 048f 4F       	 .byte 79
 2385 0490 43       	 .byte 67
 2386 0491 34       	 .byte 52
 2387 0492 34       	 .byte 52
 2388 0493 70       	 .byte 112
 2389 0494 56       	 .byte 86
 2390 0495 4F       	 .byte 79
 2391 0496 34       	 .byte 52
 2392 0497 4E       	 .byte 78
 2393 0498 4A       	 .byte 74
 2394 0499 68       	 .byte 104
 2395 049a 6D       	 .byte 109
 2396 049b 6D       	 .byte 109
 2397 049c 71       	 .byte 113
 2398 049d 71       	 .byte 113
 2399 049e 78       	 .byte 120
 2400 049f 67       	 .byte 103
 2401 04a0 64       	 .byte 100
 2402 04a1 51       	 .byte 81
 2403 04a2 64       	 .byte 100
 2404 04a3 50       	 .byte 80
 2405 04a4 55       	 .byte 85
 2406 04a5 4E       	 .byte 78
 2407 04a6 76       	 .byte 118
 2408 04a7 4B       	 .byte 75
 2409 04a8 76       	 .byte 118
 2410 04a9 0A       	 .byte 10
 2411 04aa 2D       	 .byte 45
 2412 04ab 2D       	 .byte 45
 2413 04ac 2D       	 .byte 45
 2414 04ad 2D       	 .byte 45
 2415 04ae 2D       	 .byte 45
 2416 04af 45       	 .byte 69
 2417 04b0 4E       	 .byte 78
 2418 04b1 44       	 .byte 68
 2419 04b2 20       	 .byte 32
 2420 04b3 43       	 .byte 67
 2421 04b4 45       	 .byte 69
 2422 04b5 52       	 .byte 82
 2423 04b6 54       	 .byte 84
 2424 04b7 49       	 .byte 73
 2425 04b8 46       	 .byte 70
 2426 04b9 49       	 .byte 73
 2427 04ba 43       	 .byte 67
 2428 04bb 41       	 .byte 65
 2429 04bc 54       	 .byte 84
 2430 04bd 45       	 .byte 69
 2431 04be 2D       	 .byte 45
 2432 04bf 2D       	 .byte 45
 2433 04c0 2D       	 .byte 45
 2434 04c1 2D       	 .byte 45
 2435 04c2 2D       	 .byte 45
 2436 04c3 0A       	 .byte 10
 2437              	 .section .data.sgu8arr_ckCert,"aw",%progbits
 2438              	 .align 2
 2441              	sgu8arr_ckCert:
 2442 0000 2D       	 .byte 45
 2443 0001 2D       	 .byte 45
 2444 0002 2D       	 .byte 45
 2445 0003 2D       	 .byte 45
 2446 0004 2D       	 .byte 45
 2447 0005 42       	 .byte 66
 2448 0006 45       	 .byte 69
 2449 0007 47       	 .byte 71
 2450 0008 49       	 .byte 73
 2451 0009 4E       	 .byte 78
 2452 000a 20       	 .byte 32
 2453 000b 52       	 .byte 82
 2454 000c 53       	 .byte 83
 2455 000d 41       	 .byte 65
 2456 000e 20       	 .byte 32
 2457 000f 50       	 .byte 80
 2458 0010 52       	 .byte 82
 2459 0011 49       	 .byte 73
 2460 0012 56       	 .byte 86
 2461 0013 41       	 .byte 65
 2462 0014 54       	 .byte 84
 2463 0015 45       	 .byte 69
 2464 0016 20       	 .byte 32
 2465 0017 4B       	 .byte 75
 2466 0018 45       	 .byte 69
 2467 0019 59       	 .byte 89
 2468 001a 2D       	 .byte 45
 2469 001b 2D       	 .byte 45
 2470 001c 2D       	 .byte 45
 2471 001d 2D       	 .byte 45
 2472 001e 2D       	 .byte 45
 2473 001f 0A       	 .byte 10
 2474 0020 4D       	 .byte 77
 2475 0021 49       	 .byte 73
 2476 0022 49       	 .byte 73
 2477 0023 45       	 .byte 69
 2478 0024 6F       	 .byte 111
 2479 0025 77       	 .byte 119
 2480 0026 49       	 .byte 73
 2481 0027 42       	 .byte 66
 2482 0028 41       	 .byte 65
 2483 0029 41       	 .byte 65
 2484 002a 4B       	 .byte 75
 2485 002b 43       	 .byte 67
 2486 002c 41       	 .byte 65
 2487 002d 51       	 .byte 81
 2488 002e 45       	 .byte 69
 2489 002f 41       	 .byte 65
 2490 0030 79       	 .byte 121
 2491 0031 63       	 .byte 99
 2492 0032 4D       	 .byte 77
 2493 0033 54       	 .byte 84
 2494 0034 47       	 .byte 71
 2495 0035 57       	 .byte 87
 2496 0036 61       	 .byte 97
 2497 0037 33       	 .byte 51
 2498 0038 61       	 .byte 97
 2499 0039 73       	 .byte 115
 2500 003a 4B       	 .byte 75
 2501 003b 75       	 .byte 117
 2502 003c 6E       	 .byte 110
 2503 003d 65       	 .byte 101
 2504 003e 4C       	 .byte 76
 2505 003f 74       	 .byte 116
 2506 0040 52       	 .byte 82
 2507 0041 35       	 .byte 53
 2508 0042 36       	 .byte 54
 2509 0043 53       	 .byte 83
 2510 0044 71       	 .byte 113
 2511 0045 78       	 .byte 120
 2512 0046 36       	 .byte 54
 2513 0047 32       	 .byte 50
 2514 0048 6E       	 .byte 110
 2515 0049 77       	 .byte 119
 2516 004a 2B       	 .byte 43
 2517 004b 4B       	 .byte 75
 2518 004c 6F       	 .byte 111
 2519 004d 38       	 .byte 56
 2520 004e 6D       	 .byte 109
 2521 004f 42       	 .byte 66
 2522 0050 66       	 .byte 102
 2523 0051 66       	 .byte 102
 2524 0052 72       	 .byte 114
 2525 0053 74       	 .byte 116
 2526 0054 6E       	 .byte 110
 2527 0055 57       	 .byte 87
 2528 0056 2F       	 .byte 47
 2529 0057 4A       	 .byte 74
 2530 0058 79       	 .byte 121
 2531 0059 53       	 .byte 83
 2532 005a 45       	 .byte 69
 2533 005b 6E       	 .byte 110
 2534 005c 61       	 .byte 97
 2535 005d 53       	 .byte 83
 2536 005e 72       	 .byte 114
 2537 005f 35       	 .byte 53
 2538 0060 0A       	 .byte 10
 2539 0061 46       	 .byte 70
 2540 0062 70       	 .byte 112
 2541 0063 66       	 .byte 102
 2542 0064 44       	 .byte 68
 2543 0065 43       	 .byte 67
 2544 0066 71       	 .byte 113
 2545 0067 6E       	 .byte 110
 2546 0068 52       	 .byte 82
 2547 0069 61       	 .byte 97
 2548 006a 4D       	 .byte 77
 2549 006b 4E       	 .byte 78
 2550 006c 41       	 .byte 65
 2551 006d 61       	 .byte 97
 2552 006e 53       	 .byte 83
 2553 006f 4C       	 .byte 76
 2554 0070 65       	 .byte 101
 2555 0071 69       	 .byte 105
 2556 0072 69       	 .byte 105
 2557 0073 47       	 .byte 71
 2558 0074 51       	 .byte 81
 2559 0075 49       	 .byte 73
 2560 0076 30       	 .byte 48
 2561 0077 54       	 .byte 84
 2562 0078 43       	 .byte 67
 2563 0079 59       	 .byte 89
 2564 007a 50       	 .byte 80
 2565 007b 32       	 .byte 50
 2566 007c 77       	 .byte 119
 2567 007d 56       	 .byte 86
 2568 007e 75       	 .byte 117
 2569 007f 54       	 .byte 84
 2570 0080 39       	 .byte 57
 2571 0081 71       	 .byte 113
 2572 0082 57       	 .byte 87
 2573 0083 2B       	 .byte 43
 2574 0084 4E       	 .byte 78
 2575 0085 73       	 .byte 115
 2576 0086 33       	 .byte 51
 2577 0087 44       	 .byte 68
 2578 0088 6C       	 .byte 108
 2579 0089 62       	 .byte 98
 2580 008a 61       	 .byte 97
 2581 008b 4D       	 .byte 77
 2582 008c 51       	 .byte 81
 2583 008d 57       	 .byte 87
 2584 008e 44       	 .byte 68
 2585 008f 66       	 .byte 102
 2586 0090 70       	 .byte 112
 2587 0091 78       	 .byte 120
 2588 0092 4A       	 .byte 74
 2589 0093 32       	 .byte 50
 2590 0094 6A       	 .byte 106
 2591 0095 71       	 .byte 113
 2592 0096 6D       	 .byte 109
 2593 0097 43       	 .byte 67
 2594 0098 4B       	 .byte 75
 2595 0099 52       	 .byte 82
 2596 009a 78       	 .byte 120
 2597 009b 34       	 .byte 52
 2598 009c 74       	 .byte 116
 2599 009d 42       	 .byte 66
 2600 009e 6A       	 .byte 106
 2601 009f 76       	 .byte 118
 2602 00a0 4E       	 .byte 78
 2603 00a1 0A       	 .byte 10
 2604 00a2 6B       	 .byte 107
 2605 00a3 34       	 .byte 52
 2606 00a4 61       	 .byte 97
 2607 00a5 61       	 .byte 97
 2608 00a6 6D       	 .byte 109
 2609 00a7 4D       	 .byte 77
 2610 00a8 32       	 .byte 50
 2611 00a9 67       	 .byte 103
 2612 00aa 77       	 .byte 119
 2613 00ab 6A       	 .byte 106
 2614 00ac 77       	 .byte 119
 2615 00ad 72       	 .byte 114
 2616 00ae 68       	 .byte 104
 2617 00af 49       	 .byte 73
 2618 00b0 46       	 .byte 70
 2619 00b1 36       	 .byte 54
 2620 00b2 78       	 .byte 120
 2621 00b3 36       	 .byte 54
 2622 00b4 6A       	 .byte 106
 2623 00b5 77       	 .byte 119
 2624 00b6 6B       	 .byte 107
 2625 00b7 31       	 .byte 49
 2626 00b8 38       	 .byte 56
 2627 00b9 31       	 .byte 49
 2628 00ba 6B       	 .byte 107
 2629 00bb 37       	 .byte 55
 2630 00bc 6B       	 .byte 107
 2631 00bd 73       	 .byte 115
 2632 00be 49       	 .byte 73
 2633 00bf 61       	 .byte 97
 2634 00c0 43       	 .byte 67
 2635 00c1 78       	 .byte 120
 2636 00c2 37       	 .byte 55
 2637 00c3 64       	 .byte 100
 2638 00c4 32       	 .byte 50
 2639 00c5 4C       	 .byte 76
 2640 00c6 4D       	 .byte 77
 2641 00c7 2F       	 .byte 47
 2642 00c8 64       	 .byte 100
 2643 00c9 65       	 .byte 101
 2644 00ca 4F       	 .byte 79
 2645 00cb 72       	 .byte 114
 2646 00cc 64       	 .byte 100
 2647 00cd 6E       	 .byte 110
 2648 00ce 64       	 .byte 100
 2649 00cf 4D       	 .byte 77
 2650 00d0 44       	 .byte 68
 2651 00d1 78       	 .byte 120
 2652 00d2 2B       	 .byte 43
 2653 00d3 6F       	 .byte 111
 2654 00d4 33       	 .byte 51
 2655 00d5 4B       	 .byte 75
 2656 00d6 50       	 .byte 80
 2657 00d7 44       	 .byte 68
 2658 00d8 49       	 .byte 73
 2659 00d9 72       	 .byte 114
 2660 00da 64       	 .byte 100
 2661 00db 67       	 .byte 103
 2662 00dc 38       	 .byte 56
 2663 00dd 68       	 .byte 104
 2664 00de 49       	 .byte 73
 2665 00df 4B       	 .byte 75
 2666 00e0 6E       	 .byte 110
 2667 00e1 62       	 .byte 98
 2668 00e2 0A       	 .byte 10
 2669 00e3 4F       	 .byte 79
 2670 00e4 77       	 .byte 119
 2671 00e5 67       	 .byte 103
 2672 00e6 36       	 .byte 54
 2673 00e7 48       	 .byte 72
 2674 00e8 58       	 .byte 88
 2675 00e9 4A       	 .byte 74
 2676 00ea 2B       	 .byte 43
 2677 00eb 31       	 .byte 49
 2678 00ec 2B       	 .byte 43
 2679 00ed 77       	 .byte 119
 2680 00ee 48       	 .byte 72
 2681 00ef 63       	 .byte 99
 2682 00f0 43       	 .byte 67
 2683 00f1 43       	 .byte 67
 2684 00f2 2B       	 .byte 43
 2685 00f3 61       	 .byte 97
 2686 00f4 2B       	 .byte 43
 2687 00f5 45       	 .byte 69
 2688 00f6 41       	 .byte 65
 2689 00f7 6C       	 .byte 108
 2690 00f8 4C       	 .byte 76
 2691 00f9 50       	 .byte 80
 2692 00fa 32       	 .byte 50
 2693 00fb 57       	 .byte 87
 2694 00fc 49       	 .byte 73
 2695 00fd 78       	 .byte 120
 2696 00fe 5A       	 .byte 90
 2697 00ff 41       	 .byte 65
 2698 0100 67       	 .byte 103
 2699 0101 49       	 .byte 73
 2700 0102 34       	 .byte 52
 2701 0103 52       	 .byte 82
 2702 0104 79       	 .byte 121
 2703 0105 4E       	 .byte 78
 2704 0106 53       	 .byte 83
 2705 0107 53       	 .byte 83
 2706 0108 47       	 .byte 71
 2707 0109 34       	 .byte 52
 2708 010a 73       	 .byte 115
 2709 010b 4F       	 .byte 79
 2710 010c 75       	 .byte 117
 2711 010d 46       	 .byte 70
 2712 010e 51       	 .byte 81
 2713 010f 66       	 .byte 102
 2714 0110 49       	 .byte 73
 2715 0111 57       	 .byte 87
 2716 0112 54       	 .byte 84
 2717 0113 35       	 .byte 53
 2718 0114 37       	 .byte 55
 2719 0115 4C       	 .byte 76
 2720 0116 57       	 .byte 87
 2721 0117 78       	 .byte 120
 2722 0118 78       	 .byte 120
 2723 0119 6C       	 .byte 108
 2724 011a 4D       	 .byte 77
 2725 011b 71       	 .byte 113
 2726 011c 75       	 .byte 117
 2727 011d 6A       	 .byte 106
 2728 011e 4D       	 .byte 77
 2729 011f 70       	 .byte 112
 2730 0120 69       	 .byte 105
 2731 0121 63       	 .byte 99
 2732 0122 4D       	 .byte 77
 2733 0123 0A       	 .byte 10
 2734 0124 47       	 .byte 71
 2735 0125 62       	 .byte 98
 2736 0126 63       	 .byte 99
 2737 0127 53       	 .byte 83
 2738 0128 78       	 .byte 120
 2739 0129 6D       	 .byte 109
 2740 012a 35       	 .byte 53
 2741 012b 78       	 .byte 120
 2742 012c 73       	 .byte 115
 2743 012d 58       	 .byte 88
 2744 012e 33       	 .byte 51
 2745 012f 7A       	 .byte 122
 2746 0130 6E       	 .byte 110
 2747 0131 44       	 .byte 68
 2748 0132 30       	 .byte 48
 2749 0133 72       	 .byte 114
 2750 0134 44       	 .byte 68
 2751 0135 79       	 .byte 121
 2752 0136 6C       	 .byte 108
 2753 0137 66       	 .byte 102
 2754 0138 61       	 .byte 97
 2755 0139 6B       	 .byte 107
 2756 013a 71       	 .byte 113
 2757 013b 71       	 .byte 113
 2758 013c 51       	 .byte 81
 2759 013d 6E       	 .byte 110
 2760 013e 73       	 .byte 115
 2761 013f 56       	 .byte 86
 2762 0140 56       	 .byte 86
 2763 0141 2F       	 .byte 47
 2764 0142 65       	 .byte 101
 2765 0143 68       	 .byte 104
 2766 0144 37       	 .byte 55
 2767 0145 43       	 .byte 67
 2768 0146 37       	 .byte 55
 2769 0147 6D       	 .byte 109
 2770 0148 4E       	 .byte 78
 2771 0149 61       	 .byte 97
 2772 014a 49       	 .byte 73
 2773 014b 34       	 .byte 52
 2774 014c 56       	 .byte 86
 2775 014d 77       	 .byte 119
 2776 014e 77       	 .byte 119
 2777 014f 55       	 .byte 85
 2778 0150 48       	 .byte 72
 2779 0151 34       	 .byte 52
 2780 0152 47       	 .byte 71
 2781 0153 39       	 .byte 57
 2782 0154 6F       	 .byte 111
 2783 0155 64       	 .byte 100
 2784 0156 73       	 .byte 115
 2785 0157 59       	 .byte 89
 2786 0158 64       	 .byte 100
 2787 0159 54       	 .byte 84
 2788 015a 74       	 .byte 116
 2789 015b 76       	 .byte 118
 2790 015c 68       	 .byte 104
 2791 015d 64       	 .byte 100
 2792 015e 76       	 .byte 118
 2793 015f 63       	 .byte 99
 2794 0160 78       	 .byte 120
 2795 0161 66       	 .byte 102
 2796 0162 55       	 .byte 85
 2797 0163 79       	 .byte 121
 2798 0164 0A       	 .byte 10
 2799 0165 56       	 .byte 86
 2800 0166 4F       	 .byte 79
 2801 0167 49       	 .byte 73
 2802 0168 45       	 .byte 69
 2803 0169 41       	 .byte 65
 2804 016a 44       	 .byte 68
 2805 016b 48       	 .byte 72
 2806 016c 4E       	 .byte 78
 2807 016d 51       	 .byte 81
 2808 016e 54       	 .byte 84
 2809 016f 45       	 .byte 69
 2810 0170 79       	 .byte 121
 2811 0171 2F       	 .byte 47
 2812 0172 68       	 .byte 104
 2813 0173 6A       	 .byte 106
 2814 0174 78       	 .byte 120
 2815 0175 69       	 .byte 105
 2816 0176 4F       	 .byte 79
 2817 0177 4B       	 .byte 75
 2818 0178 63       	 .byte 99
 2819 0179 4B       	 .byte 75
 2820 017a 66       	 .byte 102
 2821 017b 66       	 .byte 102
 2822 017c 74       	 .byte 116
 2823 017d 67       	 .byte 103
 2824 017e 38       	 .byte 56
 2825 017f 38       	 .byte 56
 2826 0180 36       	 .byte 54
 2827 0181 41       	 .byte 65
 2828 0182 53       	 .byte 83
 2829 0183 6A       	 .byte 106
 2830 0184 39       	 .byte 57
 2831 0185 58       	 .byte 88
 2832 0186 4A       	 .byte 74
 2833 0187 4B       	 .byte 75
 2834 0188 34       	 .byte 52
 2835 0189 36       	 .byte 54
 2836 018a 51       	 .byte 81
 2837 018b 49       	 .byte 73
 2838 018c 44       	 .byte 68
 2839 018d 41       	 .byte 65
 2840 018e 51       	 .byte 81
 2841 018f 41       	 .byte 65
 2842 0190 42       	 .byte 66
 2843 0191 41       	 .byte 65
 2844 0192 6F       	 .byte 111
 2845 0193 49       	 .byte 73
 2846 0194 42       	 .byte 66
 2847 0195 41       	 .byte 65
 2848 0196 51       	 .byte 81
 2849 0197 43       	 .byte 67
 2850 0198 6E       	 .byte 110
 2851 0199 68       	 .byte 104
 2852 019a 4D       	 .byte 77
 2853 019b 36       	 .byte 54
 2854 019c 41       	 .byte 65
 2855 019d 30       	 .byte 48
 2856 019e 71       	 .byte 113
 2857 019f 59       	 .byte 89
 2858 01a0 4C       	 .byte 76
 2859 01a1 67       	 .byte 103
 2860 01a2 47       	 .byte 71
 2861 01a3 55       	 .byte 85
 2862 01a4 58       	 .byte 88
 2863 01a5 0A       	 .byte 10
 2864 01a6 4E       	 .byte 78
 2865 01a7 6D       	 .byte 109
 2866 01a8 6B       	 .byte 107
 2867 01a9 6F       	 .byte 111
 2868 01aa 67       	 .byte 103
 2869 01ab 2B       	 .byte 43
 2870 01ac 4C       	 .byte 76
 2871 01ad 6E       	 .byte 110
 2872 01ae 4C       	 .byte 76
 2873 01af 58       	 .byte 88
 2874 01b0 4D       	 .byte 77
 2875 01b1 58       	 .byte 88
 2876 01b2 6B       	 .byte 107
 2877 01b3 67       	 .byte 103
 2878 01b4 48       	 .byte 72
 2879 01b5 63       	 .byte 99
 2880 01b6 68       	 .byte 104
 2881 01b7 39       	 .byte 57
 2882 01b8 78       	 .byte 120
 2883 01b9 36       	 .byte 54
 2884 01ba 53       	 .byte 83
 2885 01bb 7A       	 .byte 122
 2886 01bc 4F       	 .byte 79
 2887 01bd 71       	 .byte 113
 2888 01be 2B       	 .byte 43
 2889 01bf 6A       	 .byte 106
 2890 01c0 77       	 .byte 119
 2891 01c1 69       	 .byte 105
 2892 01c2 51       	 .byte 81
 2893 01c3 4F       	 .byte 79
 2894 01c4 4C       	 .byte 76
 2895 01c5 47       	 .byte 71
 2896 01c6 45       	 .byte 69
 2897 01c7 53       	 .byte 83
 2898 01c8 59       	 .byte 89
 2899 01c9 4C       	 .byte 76
 2900 01ca 75       	 .byte 117
 2901 01cb 69       	 .byte 105
 2902 01cc 6E       	 .byte 110
 2903 01cd 34       	 .byte 52
 2904 01ce 32       	 .byte 50
 2905 01cf 70       	 .byte 112
 2906 01d0 4C       	 .byte 76
 2907 01d1 43       	 .byte 67
 2908 01d2 56       	 .byte 86
 2909 01d3 77       	 .byte 119
 2910 01d4 74       	 .byte 116
 2911 01d5 4E       	 .byte 78
 2912 01d6 76       	 .byte 118
 2913 01d7 2B       	 .byte 43
 2914 01d8 50       	 .byte 80
 2915 01d9 68       	 .byte 104
 2916 01da 38       	 .byte 56
 2917 01db 49       	 .byte 73
 2918 01dc 67       	 .byte 103
 2919 01dd 4B       	 .byte 75
 2920 01de 6F       	 .byte 111
 2921 01df 48       	 .byte 72
 2922 01e0 5A       	 .byte 90
 2923 01e1 37       	 .byte 55
 2924 01e2 72       	 .byte 114
 2925 01e3 57       	 .byte 87
 2926 01e4 63       	 .byte 99
 2927 01e5 53       	 .byte 83
 2928 01e6 0A       	 .byte 10
 2929 01e7 58       	 .byte 88
 2930 01e8 73       	 .byte 115
 2931 01e9 4B       	 .byte 75
 2932 01ea 32       	 .byte 50
 2933 01eb 51       	 .byte 81
 2934 01ec 61       	 .byte 97
 2935 01ed 62       	 .byte 98
 2936 01ee 33       	 .byte 51
 2937 01ef 6A       	 .byte 106
 2938 01f0 41       	 .byte 65
 2939 01f1 38       	 .byte 56
 2940 01f2 52       	 .byte 82
 2941 01f3 2F       	 .byte 47
 2942 01f4 73       	 .byte 115
 2943 01f5 66       	 .byte 102
 2944 01f6 39       	 .byte 57
 2945 01f7 56       	 .byte 86
 2946 01f8 7A       	 .byte 122
 2947 01f9 39       	 .byte 57
 2948 01fa 44       	 .byte 68
 2949 01fb 50       	 .byte 80
 2950 01fc 6C       	 .byte 108
 2951 01fd 65       	 .byte 101
 2952 01fe 37       	 .byte 55
 2953 01ff 69       	 .byte 105
 2954 0200 4C       	 .byte 76
 2955 0201 69       	 .byte 105
 2956 0202 47       	 .byte 71
 2957 0203 33       	 .byte 51
 2958 0204 2B       	 .byte 43
 2959 0205 6B       	 .byte 107
 2960 0206 6D       	 .byte 109
 2961 0207 4F       	 .byte 79
 2962 0208 64       	 .byte 100
 2963 0209 55       	 .byte 85
 2964 020a 77       	 .byte 119
 2965 020b 58       	 .byte 88
 2966 020c 68       	 .byte 104
 2967 020d 78       	 .byte 120
 2968 020e 53       	 .byte 83
 2969 020f 4C       	 .byte 76
 2970 0210 72       	 .byte 114
 2971 0211 6B       	 .byte 107
 2972 0212 42       	 .byte 66
 2973 0213 54       	 .byte 84
 2974 0214 4A       	 .byte 74
 2975 0215 41       	 .byte 65
 2976 0216 64       	 .byte 100
 2977 0217 54       	 .byte 84
 2978 0218 70       	 .byte 112
 2979 0219 77       	 .byte 119
 2980 021a 77       	 .byte 119
 2981 021b 31       	 .byte 49
 2982 021c 6E       	 .byte 110
 2983 021d 59       	 .byte 89
 2984 021e 5A       	 .byte 90
 2985 021f 42       	 .byte 66
 2986 0220 6E       	 .byte 110
 2987 0221 34       	 .byte 52
 2988 0222 6E       	 .byte 110
 2989 0223 6A       	 .byte 106
 2990 0224 79       	 .byte 121
 2991 0225 47       	 .byte 71
 2992 0226 7A       	 .byte 122
 2993 0227 0A       	 .byte 10
 2994 0228 4D       	 .byte 77
 2995 0229 67       	 .byte 103
 2996 022a 64       	 .byte 100
 2997 022b 4A       	 .byte 74
 2998 022c 70       	 .byte 112
 2999 022d 68       	 .byte 104
 3000 022e 36       	 .byte 54
 3001 022f 45       	 .byte 69
 3002 0230 49       	 .byte 73
 3003 0231 53       	 .byte 83
 3004 0232 6B       	 .byte 107
 3005 0233 64       	 .byte 100
 3006 0234 75       	 .byte 117
 3007 0235 31       	 .byte 49
 3008 0236 57       	 .byte 87
 3009 0237 73       	 .byte 115
 3010 0238 76       	 .byte 118
 3011 0239 4E       	 .byte 78
 3012 023a 36       	 .byte 54
 3013 023b 73       	 .byte 115
 3014 023c 31       	 .byte 49
 3015 023d 37       	 .byte 55
 3016 023e 6C       	 .byte 108
 3017 023f 49       	 .byte 73
 3018 0240 54       	 .byte 84
 3019 0241 61       	 .byte 97
 3020 0242 65       	 .byte 101
 3021 0243 45       	 .byte 69
 3022 0244 4E       	 .byte 78
 3023 0245 77       	 .byte 119
 3024 0246 52       	 .byte 82
 3025 0247 50       	 .byte 80
 3026 0248 71       	 .byte 113
 3027 0249 6D       	 .byte 109
 3028 024a 56       	 .byte 86
 3029 024b 66       	 .byte 102
 3030 024c 49       	 .byte 73
 3031 024d 69       	 .byte 105
 3032 024e 79       	 .byte 121
 3033 024f 74       	 .byte 116
 3034 0250 67       	 .byte 103
 3035 0251 2F       	 .byte 47
 3036 0252 30       	 .byte 48
 3037 0253 51       	 .byte 81
 3038 0254 51       	 .byte 81
 3039 0255 59       	 .byte 89
 3040 0256 6B       	 .byte 107
 3041 0257 57       	 .byte 87
 3042 0258 6D       	 .byte 109
 3043 0259 50       	 .byte 80
 3044 025a 59       	 .byte 89
 3045 025b 59       	 .byte 89
 3046 025c 2B       	 .byte 43
 3047 025d 37       	 .byte 55
 3048 025e 76       	 .byte 118
 3049 025f 49       	 .byte 73
 3050 0260 4A       	 .byte 74
 3051 0261 6B       	 .byte 107
 3052 0262 4A       	 .byte 74
 3053 0263 6F       	 .byte 111
 3054 0264 45       	 .byte 69
 3055 0265 65       	 .byte 101
 3056 0266 43       	 .byte 67
 3057 0267 42       	 .byte 66
 3058 0268 0A       	 .byte 10
 3059 0269 49       	 .byte 73
 3060 026a 74       	 .byte 116
 3061 026b 36       	 .byte 54
 3062 026c 52       	 .byte 82
 3063 026d 6C       	 .byte 108
 3064 026e 64       	 .byte 100
 3065 026f 44       	 .byte 68
 3066 0270 51       	 .byte 81
 3067 0271 45       	 .byte 69
 3068 0272 61       	 .byte 97
 3069 0273 6E       	 .byte 110
 3070 0274 32       	 .byte 50
 3071 0275 4D       	 .byte 77
 3072 0276 69       	 .byte 105
 3073 0277 49       	 .byte 73
 3074 0278 47       	 .byte 71
 3075 0279 74       	 .byte 116
 3076 027a 34       	 .byte 52
 3077 027b 4A       	 .byte 74
 3078 027c 4F       	 .byte 79
 3079 027d 79       	 .byte 121
 3080 027e 71       	 .byte 113
 3081 027f 32       	 .byte 50
 3082 0280 53       	 .byte 83
 3083 0281 34       	 .byte 52
 3084 0282 32       	 .byte 50
 3085 0283 54       	 .byte 84
 3086 0284 38       	 .byte 56
 3087 0285 68       	 .byte 104
 3088 0286 44       	 .byte 68
 3089 0287 42       	 .byte 66
 3090 0288 6E       	 .byte 110
 3091 0289 7A       	 .byte 122
 3092 028a 30       	 .byte 48
 3093 028b 56       	 .byte 86
 3094 028c 39       	 .byte 57
 3095 028d 39       	 .byte 57
 3096 028e 31       	 .byte 49
 3097 028f 43       	 .byte 67
 3098 0290 38       	 .byte 56
 3099 0291 63       	 .byte 99
 3100 0292 39       	 .byte 57
 3101 0293 44       	 .byte 68
 3102 0294 49       	 .byte 73
 3103 0295 6D       	 .byte 109
 3104 0296 32       	 .byte 50
 3105 0297 78       	 .byte 120
 3106 0298 67       	 .byte 103
 3107 0299 55       	 .byte 85
 3108 029a 46       	 .byte 70
 3109 029b 50       	 .byte 80
 3110 029c 42       	 .byte 66
 3111 029d 2F       	 .byte 47
 3112 029e 37       	 .byte 55
 3113 029f 72       	 .byte 114
 3114 02a0 53       	 .byte 83
 3115 02a1 51       	 .byte 81
 3116 02a2 38       	 .byte 56
 3117 02a3 7A       	 .byte 122
 3118 02a4 6E       	 .byte 110
 3119 02a5 64       	 .byte 100
 3120 02a6 4A       	 .byte 74
 3121 02a7 4C       	 .byte 76
 3122 02a8 56       	 .byte 86
 3123 02a9 0A       	 .byte 10
 3124 02aa 52       	 .byte 82
 3125 02ab 63       	 .byte 99
 3126 02ac 6F       	 .byte 111
 3127 02ad 61       	 .byte 97
 3128 02ae 4B       	 .byte 75
 3129 02af 59       	 .byte 89
 3130 02b0 42       	 .byte 66
 3131 02b1 54       	 .byte 84
 3132 02b2 31       	 .byte 49
 3133 02b3 45       	 .byte 69
 3134 02b4 4D       	 .byte 77
 3135 02b5 6F       	 .byte 111
 3136 02b6 4A       	 .byte 74
 3137 02b7 44       	 .byte 68
 3138 02b8 57       	 .byte 87
 3139 02b9 57       	 .byte 87
 3140 02ba 34       	 .byte 52
 3141 02bb 6F       	 .byte 111
 3142 02bc 53       	 .byte 83
 3143 02bd 4A       	 .byte 74
 3144 02be 76       	 .byte 118
 3145 02bf 54       	 .byte 84
 3146 02c0 69       	 .byte 105
 3147 02c1 76       	 .byte 118
 3148 02c2 59       	 .byte 89
 3149 02c3 6D       	 .byte 109
 3150 02c4 53       	 .byte 83
 3151 02c5 42       	 .byte 66
 3152 02c6 64       	 .byte 100
 3153 02c7 43       	 .byte 67
 3154 02c8 57       	 .byte 87
 3155 02c9 66       	 .byte 102
 3156 02ca 51       	 .byte 81
 3157 02cb 70       	 .byte 112
 3158 02cc 50       	 .byte 80
 3159 02cd 7A       	 .byte 122
 3160 02ce 42       	 .byte 66
 3161 02cf 42       	 .byte 66
 3162 02d0 78       	 .byte 120
 3163 02d1 5A       	 .byte 90
 3164 02d2 69       	 .byte 105
 3165 02d3 77       	 .byte 119
 3166 02d4 6B       	 .byte 107
 3167 02d5 41       	 .byte 65
 3168 02d6 62       	 .byte 98
 3169 02d7 4B       	 .byte 75
 3170 02d8 53       	 .byte 83
 3171 02d9 57       	 .byte 87
 3172 02da 59       	 .byte 89
 3173 02db 79       	 .byte 121
 3174 02dc 41       	 .byte 65
 3175 02dd 45       	 .byte 69
 3176 02de 46       	 .byte 70
 3177 02df 76       	 .byte 118
 3178 02e0 32       	 .byte 50
 3179 02e1 52       	 .byte 82
 3180 02e2 35       	 .byte 53
 3181 02e3 45       	 .byte 69
 3182 02e4 78       	 .byte 120
 3183 02e5 6C       	 .byte 108
 3184 02e6 35       	 .byte 53
 3185 02e7 4A       	 .byte 74
 3186 02e8 61       	 .byte 97
 3187 02e9 66       	 .byte 102
 3188 02ea 0A       	 .byte 10
 3189 02eb 52       	 .byte 82
 3190 02ec 43       	 .byte 67
 3191 02ed 64       	 .byte 100
 3192 02ee 2B       	 .byte 43
 3193 02ef 6E       	 .byte 110
 3194 02f0 65       	 .byte 101
 3195 02f1 52       	 .byte 82
 3196 02f2 68       	 .byte 104
 3197 02f3 41       	 .byte 65
 3198 02f4 6F       	 .byte 111
 3199 02f5 47       	 .byte 71
 3200 02f6 42       	 .byte 66
 3201 02f7 41       	 .byte 65
 3202 02f8 50       	 .byte 80
 3203 02f9 74       	 .byte 116
 3204 02fa 41       	 .byte 65
 3205 02fb 2B       	 .byte 43
 3206 02fc 43       	 .byte 67
 3207 02fd 47       	 .byte 71
 3208 02fe 6D       	 .byte 109
 3209 02ff 79       	 .byte 121
 3210 0300 38       	 .byte 56
 3211 0301 4C       	 .byte 76
 3212 0302 51       	 .byte 81
 3213 0303 7A       	 .byte 122
 3214 0304 65       	 .byte 101
 3215 0305 49       	 .byte 73
 3216 0306 71       	 .byte 113
 3217 0307 39       	 .byte 57
 3218 0308 4C       	 .byte 76
 3219 0309 76       	 .byte 118
 3220 030a 4F       	 .byte 79
 3221 030b 36       	 .byte 54
 3222 030c 6D       	 .byte 109
 3223 030d 62       	 .byte 98
 3224 030e 33       	 .byte 51
 3225 030f 71       	 .byte 113
 3226 0310 34       	 .byte 52
 3227 0311 62       	 .byte 98
 3228 0312 52       	 .byte 82
 3229 0313 4F       	 .byte 79
 3230 0314 4D       	 .byte 77
 3231 0315 75       	 .byte 117
 3232 0316 7A       	 .byte 122
 3233 0317 70       	 .byte 112
 3234 0318 42       	 .byte 66
 3235 0319 31       	 .byte 49
 3236 031a 57       	 .byte 87
 3237 031b 4F       	 .byte 79
 3238 031c 72       	 .byte 114
 3239 031d 72       	 .byte 114
 3240 031e 61       	 .byte 97
 3241 031f 61       	 .byte 97
 3242 0320 72       	 .byte 114
 3243 0321 54       	 .byte 84
 3244 0322 43       	 .byte 67
 3245 0323 39       	 .byte 57
 3246 0324 43       	 .byte 67
 3247 0325 4B       	 .byte 75
 3248 0326 41       	 .byte 65
 3249 0327 6C       	 .byte 108
 3250 0328 4C       	 .byte 76
 3251 0329 44       	 .byte 68
 3252 032a 2B       	 .byte 43
 3253 032b 0A       	 .byte 10
 3254 032c 74       	 .byte 116
 3255 032d 72       	 .byte 114
 3256 032e 6B       	 .byte 107
 3257 032f 37       	 .byte 55
 3258 0330 49       	 .byte 73
 3259 0331 69       	 .byte 105
 3260 0332 56       	 .byte 86
 3261 0333 37       	 .byte 55
 3262 0334 6C       	 .byte 108
 3263 0335 48       	 .byte 72
 3264 0336 46       	 .byte 70
 3265 0337 38       	 .byte 56
 3266 0338 6B       	 .byte 107
 3267 0339 6B       	 .byte 107
 3268 033a 57       	 .byte 87
 3269 033b 45       	 .byte 69
 3270 033c 6E       	 .byte 110
 3271 033d 73       	 .byte 115
 3272 033e 6A       	 .byte 106
 3273 033f 72       	 .byte 114
 3274 0340 6A       	 .byte 106
 3275 0341 6C       	 .byte 108
 3276 0342 6E       	 .byte 110
 3277 0343 72       	 .byte 114
 3278 0344 75       	 .byte 117
 3279 0345 65       	 .byte 101
 3280 0346 59       	 .byte 89
 3281 0347 34       	 .byte 52
 3282 0348 44       	 .byte 68
 3283 0349 6E       	 .byte 110
 3284 034a 77       	 .byte 119
 3285 034b 65       	 .byte 101
 3286 034c 70       	 .byte 112
 3287 034d 35       	 .byte 53
 3288 034e 58       	 .byte 88
 3289 034f 53       	 .byte 83
 3290 0350 48       	 .byte 72
 3291 0351 66       	 .byte 102
 3292 0352 61       	 .byte 97
 3293 0353 52       	 .byte 82
 3294 0354 78       	 .byte 120
 3295 0355 31       	 .byte 49
 3296 0356 76       	 .byte 118
 3297 0357 4E       	 .byte 78
 3298 0358 7A       	 .byte 122
 3299 0359 50       	 .byte 80
 3300 035a 31       	 .byte 49
 3301 035b 47       	 .byte 71
 3302 035c 69       	 .byte 105
 3303 035d 37       	 .byte 55
 3304 035e 47       	 .byte 71
 3305 035f 2F       	 .byte 47
 3306 0360 51       	 .byte 81
 3307 0361 42       	 .byte 66
 3308 0362 36       	 .byte 54
 3309 0363 42       	 .byte 66
 3310 0364 4C       	 .byte 76
 3311 0365 34       	 .byte 52
 3312 0366 68       	 .byte 104
 3313 0367 6B       	 .byte 107
 3314 0368 6E       	 .byte 110
 3315 0369 53       	 .byte 83
 3316 036a 62       	 .byte 98
 3317 036b 4C       	 .byte 76
 3318 036c 0A       	 .byte 10
 3319 036d 4A       	 .byte 74
 3320 036e 6A       	 .byte 106
 3321 036f 4B       	 .byte 75
 3322 0370 55       	 .byte 85
 3323 0371 51       	 .byte 81
 3324 0372 2F       	 .byte 47
 3325 0373 61       	 .byte 97
 3326 0374 31       	 .byte 49
 3327 0375 35       	 .byte 53
 3328 0376 5A       	 .byte 90
 3329 0377 6E       	 .byte 110
 3330 0378 66       	 .byte 102
 3331 0379 4F       	 .byte 79
 3332 037a 36       	 .byte 54
 3333 037b 78       	 .byte 120
 3334 037c 51       	 .byte 81
 3335 037d 4B       	 .byte 75
 3336 037e 41       	 .byte 65
 3337 037f 41       	 .byte 65
 3338 0380 6F       	 .byte 111
 3339 0381 68       	 .byte 104
 3340 0382 62       	 .byte 98
 3341 0383 75       	 .byte 117
 3342 0384 50       	 .byte 80
 3343 0385 4A       	 .byte 74
 3344 0386 4C       	 .byte 76
 3345 0387 6B       	 .byte 107
 3346 0388 33       	 .byte 51
 3347 0389 62       	 .byte 98
 3348 038a 33       	 .byte 51
 3349 038b 38       	 .byte 56
 3350 038c 32       	 .byte 50
 3351 038d 31       	 .byte 49
 3352 038e 77       	 .byte 119
 3353 038f 31       	 .byte 49
 3354 0390 70       	 .byte 112
 3355 0391 4D       	 .byte 77
 3356 0392 69       	 .byte 105
 3357 0393 42       	 .byte 66
 3358 0394 68       	 .byte 104
 3359 0395 6A       	 .byte 106
 3360 0396 34       	 .byte 52
 3361 0397 75       	 .byte 117
 3362 0398 74       	 .byte 116
 3363 0399 2F       	 .byte 47
 3364 039a 66       	 .byte 102
 3365 039b 4D       	 .byte 77
 3366 039c 6B       	 .byte 107
 3367 039d 47       	 .byte 71
 3368 039e 4E       	 .byte 78
 3369 039f 7A       	 .byte 122
 3370 03a0 71       	 .byte 113
 3371 03a1 65       	 .byte 101
 3372 03a2 72       	 .byte 114
 3373 03a3 42       	 .byte 66
 3374 03a4 6C       	 .byte 108
 3375 03a5 41       	 .byte 65
 3376 03a6 6F       	 .byte 111
 3377 03a7 47       	 .byte 71
 3378 03a8 42       	 .byte 66
 3379 03a9 41       	 .byte 65
 3380 03aa 4D       	 .byte 77
 3381 03ab 32       	 .byte 50
 3382 03ac 53       	 .byte 83
 3383 03ad 0A       	 .byte 10
 3384 03ae 78       	 .byte 120
 3385 03af 50       	 .byte 80
 3386 03b0 2F       	 .byte 47
 3387 03b1 78       	 .byte 120
 3388 03b2 76       	 .byte 118
 3389 03b3 35       	 .byte 53
 3390 03b4 59       	 .byte 89
 3391 03b5 4B       	 .byte 75
 3392 03b6 69       	 .byte 105
 3393 03b7 67       	 .byte 103
 3394 03b8 76       	 .byte 118
 3395 03b9 31       	 .byte 49
 3396 03ba 63       	 .byte 99
 3397 03bb 2B       	 .byte 43
 3398 03bc 67       	 .byte 103
 3399 03bd 4D       	 .byte 77
 3400 03be 7A       	 .byte 122
 3401 03bf 74       	 .byte 116
 3402 03c0 45       	 .byte 69
 3403 03c1 57       	 .byte 87
 3404 03c2 75       	 .byte 117
 3405 03c3 6C       	 .byte 108
 3406 03c4 54       	 .byte 84
 3407 03c5 37       	 .byte 55
 3408 03c6 70       	 .byte 112
 3409 03c7 35       	 .byte 53
 3410 03c8 71       	 .byte 113
 3411 03c9 79       	 .byte 121
 3412 03ca 30       	 .byte 48
 3413 03cb 42       	 .byte 66
 3414 03cc 59       	 .byte 89
 3415 03cd 45       	 .byte 69
 3416 03ce 2B       	 .byte 43
 3417 03cf 35       	 .byte 53
 3418 03d0 64       	 .byte 100
 3419 03d1 43       	 .byte 67
 3420 03d2 74       	 .byte 116
 3421 03d3 30       	 .byte 48
 3422 03d4 34       	 .byte 52
 3423 03d5 34       	 .byte 52
 3424 03d6 55       	 .byte 85
 3425 03d7 56       	 .byte 86
 3426 03d8 37       	 .byte 55
 3427 03d9 6B       	 .byte 107
 3428 03da 63       	 .byte 99
 3429 03db 58       	 .byte 88
 3430 03dc 7A       	 .byte 122
 3431 03dd 65       	 .byte 101
 3432 03de 31       	 .byte 49
 3433 03df 75       	 .byte 117
 3434 03e0 41       	 .byte 65
 3435 03e1 6A       	 .byte 106
 3436 03e2 74       	 .byte 116
 3437 03e3 67       	 .byte 103
 3438 03e4 6C       	 .byte 108
 3439 03e5 5A       	 .byte 90
 3440 03e6 67       	 .byte 103
 3441 03e7 2F       	 .byte 47
 3442 03e8 6A       	 .byte 106
 3443 03e9 6E       	 .byte 110
 3444 03ea 30       	 .byte 48
 3445 03eb 61       	 .byte 97
 3446 03ec 41       	 .byte 65
 3447 03ed 2B       	 .byte 43
 3448 03ee 0A       	 .byte 10
 3449 03ef 6D       	 .byte 109
 3450 03f0 57       	 .byte 87
 3451 03f1 6A       	 .byte 106
 3452 03f2 58       	 .byte 88
 3453 03f3 44       	 .byte 68
 3454 03f4 2F       	 .byte 47
 3455 03f5 6A       	 .byte 106
 3456 03f6 69       	 .byte 105
 3457 03f7 30       	 .byte 48
 3458 03f8 45       	 .byte 69
 3459 03f9 4A       	 .byte 74
 3460 03fa 4A       	 .byte 74
 3461 03fb 56       	 .byte 86
 3462 03fc 2B       	 .byte 43
 3463 03fd 48       	 .byte 72
 3464 03fe 66       	 .byte 102
 3465 03ff 73       	 .byte 115
 3466 0400 35       	 .byte 53
 3467 0401 34       	 .byte 52
 3468 0402 45       	 .byte 69
 3469 0403 44       	 .byte 68
 3470 0404 66       	 .byte 102
 3471 0405 6C       	 .byte 108
 3472 0406 31       	 .byte 49
 3473 0407 50       	 .byte 80
 3474 0408 63       	 .byte 99
 3475 0409 32       	 .byte 50
 3476 040a 32       	 .byte 50
 3477 040b 45       	 .byte 69
 3478 040c 39       	 .byte 57
 3479 040d 4F       	 .byte 79
 3480 040e 55       	 .byte 85
 3481 040f 41       	 .byte 65
 3482 0410 73       	 .byte 115
 3483 0411 39       	 .byte 57
 3484 0412 2F       	 .byte 47
 3485 0413 51       	 .byte 81
 3486 0414 63       	 .byte 99
 3487 0415 63       	 .byte 99
 3488 0416 52       	 .byte 82
 3489 0417 64       	 .byte 100
 3490 0418 4F       	 .byte 79
 3491 0419 4A       	 .byte 74
 3492 041a 71       	 .byte 113
 3493 041b 74       	 .byte 116
 3494 041c 4E       	 .byte 78
 3495 041d 34       	 .byte 52
 3496 041e 30       	 .byte 48
 3497 041f 48       	 .byte 72
 3498 0420 48       	 .byte 72
 3499 0421 77       	 .byte 119
 3500 0422 47       	 .byte 71
 3501 0423 63       	 .byte 99
 3502 0424 4C       	 .byte 76
 3503 0425 31       	 .byte 49
 3504 0426 64       	 .byte 100
 3505 0427 6E       	 .byte 110
 3506 0428 54       	 .byte 84
 3507 0429 75       	 .byte 117
 3508 042a 79       	 .byte 121
 3509 042b 4B       	 .byte 75
 3510 042c 4A       	 .byte 74
 3511 042d 55       	 .byte 85
 3512 042e 43       	 .byte 67
 3513 042f 0A       	 .byte 10
 3514 0430 33       	 .byte 51
 3515 0431 5A       	 .byte 90
 3516 0432 41       	 .byte 65
 3517 0433 44       	 .byte 68
 3518 0434 75       	 .byte 117
 3519 0435 77       	 .byte 119
 3520 0436 77       	 .byte 119
 3521 0437 6C       	 .byte 108
 3522 0438 37       	 .byte 55
 3523 0439 67       	 .byte 103
 3524 043a 5A       	 .byte 90
 3525 043b 65       	 .byte 101
 3526 043c 62       	 .byte 98
 3527 043d 74       	 .byte 116
 3528 043e 6B       	 .byte 107
 3529 043f 6C       	 .byte 108
 3530 0440 76       	 .byte 118
 3531 0441 4F       	 .byte 79
 3532 0442 71       	 .byte 113
 3533 0443 58       	 .byte 88
 3534 0444 65       	 .byte 101
 3535 0445 5A       	 .byte 90
 3536 0446 6D       	 .byte 109
 3537 0447 31       	 .byte 49
 3538 0448 74       	 .byte 116
 3539 0449 6B       	 .byte 107
 3540 044a 56       	 .byte 86
 3541 044b 33       	 .byte 51
 3542 044c 46       	 .byte 70
 3543 044d 46       	 .byte 70
 3544 044e 39       	 .byte 57
 3545 044f 57       	 .byte 87
 3546 0450 67       	 .byte 103
 3547 0451 58       	 .byte 88
 3548 0452 66       	 .byte 102
 3549 0453 57       	 .byte 87
 3550 0454 42       	 .byte 66
 3551 0455 69       	 .byte 105
 3552 0456 51       	 .byte 81
 3553 0457 31       	 .byte 49
 3554 0458 41       	 .byte 65
 3555 0459 6F       	 .byte 111
 3556 045a 47       	 .byte 71
 3557 045b 41       	 .byte 65
 3558 045c 4D       	 .byte 77
 3559 045d 58       	 .byte 88
 3560 045e 6D       	 .byte 109
 3561 045f 4D       	 .byte 77
 3562 0460 6F       	 .byte 111
 3563 0461 73       	 .byte 115
 3564 0462 75       	 .byte 117
 3565 0463 2B       	 .byte 43
 3566 0464 61       	 .byte 97
 3567 0465 65       	 .byte 101
 3568 0466 46       	 .byte 70
 3569 0467 46       	 .byte 70
 3570 0468 2B       	 .byte 43
 3571 0469 56       	 .byte 86
 3572 046a 67       	 .byte 103
 3573 046b 75       	 .byte 117
 3574 046c 45       	 .byte 69
 3575 046d 75       	 .byte 117
 3576 046e 46       	 .byte 70
 3577 046f 65       	 .byte 101
 3578 0470 0A       	 .byte 10
 3579 0471 78       	 .byte 120
 3580 0472 4F       	 .byte 79
 3581 0473 48       	 .byte 72
 3582 0474 57       	 .byte 87
 3583 0475 4D       	 .byte 77
 3584 0476 39       	 .byte 57
 3585 0477 6A       	 .byte 106
 3586 0478 31       	 .byte 49
 3587 0479 44       	 .byte 68
 3588 047a 78       	 .byte 120
 3589 047b 2B       	 .byte 43
 3590 047c 54       	 .byte 84
 3591 047d 6E       	 .byte 110
 3592 047e 48       	 .byte 72
 3593 047f 64       	 .byte 100
 3594 0480 44       	 .byte 68
 3595 0481 58       	 .byte 88
 3596 0482 31       	 .byte 49
 3597 0483 48       	 .byte 72
 3598 0484 74       	 .byte 116
 3599 0485 47       	 .byte 71
 3600 0486 79       	 .byte 121
 3601 0487 55       	 .byte 85
 3602 0488 63       	 .byte 99
 3603 0489 66       	 .byte 102
 3604 048a 38       	 .byte 56
 3605 048b 4C       	 .byte 76
 3606 048c 45       	 .byte 69
 3607 048d 42       	 .byte 66
 3608 048e 4D       	 .byte 77
 3609 048f 70       	 .byte 112
 3610 0490 54       	 .byte 84
 3611 0491 58       	 .byte 88
 3612 0492 73       	 .byte 115
 3613 0493 77       	 .byte 119
 3614 0494 6E       	 .byte 110
 3615 0495 49       	 .byte 73
 3616 0496 43       	 .byte 67
 3617 0497 78       	 .byte 120
 3618 0498 69       	 .byte 105
 3619 0499 67       	 .byte 103
 3620 049a 61       	 .byte 97
 3621 049b 70       	 .byte 112
 3622 049c 65       	 .byte 101
 3623 049d 2F       	 .byte 47
 3624 049e 7A       	 .byte 122
 3625 049f 4E       	 .byte 78
 3626 04a0 72       	 .byte 114
 3627 04a1 4E       	 .byte 78
 3628 04a2 50       	 .byte 80
 3629 04a3 4D       	 .byte 77
 3630 04a4 31       	 .byte 49
 3631 04a5 64       	 .byte 100
 3632 04a6 37       	 .byte 55
 3633 04a7 31       	 .byte 49
 3634 04a8 30       	 .byte 48
 3635 04a9 51       	 .byte 81
 3636 04aa 4D       	 .byte 77
 3637 04ab 49       	 .byte 73
 3638 04ac 66       	 .byte 102
 3639 04ad 45       	 .byte 69
 3640 04ae 41       	 .byte 65
 3641 04af 2F       	 .byte 47
 3642 04b0 56       	 .byte 86
 3643 04b1 0A       	 .byte 10
 3644 04b2 50       	 .byte 80
 3645 04b3 69       	 .byte 105
 3646 04b4 6F       	 .byte 111
 3647 04b5 2B       	 .byte 43
 3648 04b6 33       	 .byte 51
 3649 04b7 6A       	 .byte 106
 3650 04b8 4F       	 .byte 79
 3651 04b9 38       	 .byte 56
 3652 04ba 68       	 .byte 104
 3653 04bb 76       	 .byte 118
 3654 04bc 5A       	 .byte 90
 3655 04bd 53       	 .byte 83
 3656 04be 66       	 .byte 102
 3657 04bf 44       	 .byte 68
 3658 04c0 6B       	 .byte 107
 3659 04c1 73       	 .byte 115
 3660 04c2 2F       	 .byte 47
 3661 04c3 74       	 .byte 116
 3662 04c4 5A       	 .byte 90
 3663 04c5 44       	 .byte 68
 3664 04c6 49       	 .byte 73
 3665 04c7 50       	 .byte 80
 3666 04c8 36       	 .byte 54
 3667 04c9 64       	 .byte 100
 3668 04ca 52       	 .byte 82
 3669 04cb 6F       	 .byte 111
 3670 04cc 56       	 .byte 86
 3671 04cd 52       	 .byte 82
 3672 04ce 63       	 .byte 99
 3673 04cf 4C       	 .byte 76
 3674 04d0 63       	 .byte 99
 3675 04d1 6D       	 .byte 109
 3676 04d2 45       	 .byte 69
 3677 04d3 57       	 .byte 87
 3678 04d4 57       	 .byte 87
 3679 04d5 69       	 .byte 105
 3680 04d6 73       	 .byte 115
 3681 04d7 47       	 .byte 71
 3682 04d8 30       	 .byte 48
 3683 04d9 48       	 .byte 72
 3684 04da 42       	 .byte 66
 3685 04db 6A       	 .byte 106
 3686 04dc 4B       	 .byte 75
 3687 04dd 77       	 .byte 119
 3688 04de 42       	 .byte 66
 3689 04df 48       	 .byte 72
 3690 04e0 46       	 .byte 70
 3691 04e1 51       	 .byte 81
 3692 04e2 50       	 .byte 80
 3693 04e3 78       	 .byte 120
 3694 04e4 2B       	 .byte 43
 3695 04e5 37       	 .byte 55
 3696 04e6 6E       	 .byte 110
 3697 04e7 63       	 .byte 99
 3698 04e8 42       	 .byte 66
 3699 04e9 46       	 .byte 70
 3700 04ea 49       	 .byte 73
 3701 04eb 66       	 .byte 102
 3702 04ec 65       	 .byte 101
 3703 04ed 70       	 .byte 112
 3704 04ee 69       	 .byte 105
 3705 04ef 2B       	 .byte 43
 3706 04f0 70       	 .byte 112
 3707 04f1 58       	 .byte 88
 3708 04f2 0A       	 .byte 10
 3709 04f3 6C       	 .byte 108
 3710 04f4 48       	 .byte 72
 3711 04f5 74       	 .byte 116
 3712 04f6 33       	 .byte 51
 3713 04f7 64       	 .byte 100
 3714 04f8 47       	 .byte 71
 3715 04f9 72       	 .byte 114
 3716 04fa 68       	 .byte 104
 3717 04fb 6F       	 .byte 111
 3718 04fc 6B       	 .byte 107
 3719 04fd 61       	 .byte 97
 3720 04fe 6A       	 .byte 106
 3721 04ff 73       	 .byte 115
 3722 0500 41       	 .byte 65
 3723 0501 49       	 .byte 73
 3724 0502 57       	 .byte 87
 3725 0503 70       	 .byte 112
 3726 0504 30       	 .byte 48
 3727 0505 48       	 .byte 72
 3728 0506 41       	 .byte 65
 3729 0507 34       	 .byte 52
 3730 0508 51       	 .byte 81
 3731 0509 55       	 .byte 85
 3732 050a 43       	 .byte 67
 3733 050b 67       	 .byte 103
 3734 050c 59       	 .byte 89
 3735 050d 42       	 .byte 66
 3736 050e 4D       	 .byte 77
 3737 050f 41       	 .byte 65
 3738 0510 4F       	 .byte 79
 3739 0511 57       	 .byte 87
 3740 0512 41       	 .byte 65
 3741 0513 30       	 .byte 48
 3742 0514 7A       	 .byte 122
 3743 0515 70       	 .byte 112
 3744 0516 49       	 .byte 73
 3745 0517 47       	 .byte 71
 3746 0518 4F       	 .byte 79
 3747 0519 46       	 .byte 70
 3748 051a 74       	 .byte 116
 3749 051b 42       	 .byte 66
 3750 051c 6E       	 .byte 110
 3751 051d 53       	 .byte 83
 3752 051e 78       	 .byte 120
 3753 051f 36       	 .byte 54
 3754 0520 48       	 .byte 72
 3755 0521 70       	 .byte 112
 3756 0522 57       	 .byte 87
 3757 0523 5A       	 .byte 90
 3758 0524 35       	 .byte 53
 3759 0525 62       	 .byte 98
 3760 0526 41       	 .byte 65
 3761 0527 63       	 .byte 99
 3762 0528 4D       	 .byte 77
 3763 0529 4A       	 .byte 74
 3764 052a 49       	 .byte 73
 3765 052b 75       	 .byte 117
 3766 052c 61       	 .byte 97
 3767 052d 2B       	 .byte 43
 3768 052e 68       	 .byte 104
 3769 052f 56       	 .byte 86
 3770 0530 48       	 .byte 72
 3771 0531 70       	 .byte 112
 3772 0532 49       	 .byte 73
 3773 0533 0A       	 .byte 10
 3774 0534 4E       	 .byte 78
 3775 0535 45       	 .byte 69
 3776 0536 78       	 .byte 120
 3777 0537 64       	 .byte 100
 3778 0538 53       	 .byte 83
 3779 0539 51       	 .byte 81
 3780 053a 6B       	 .byte 107
 3781 053b 63       	 .byte 99
 3782 053c 6B       	 .byte 107
 3783 053d 6B       	 .byte 107
 3784 053e 30       	 .byte 48
 3785 053f 37       	 .byte 55
 3786 0540 49       	 .byte 73
 3787 0541 35       	 .byte 53
 3788 0542 42       	 .byte 66
 3789 0543 43       	 .byte 67
 3790 0544 45       	 .byte 69
 3791 0545 6A       	 .byte 106
 3792 0546 48       	 .byte 72
 3793 0547 74       	 .byte 116
 3794 0548 52       	 .byte 82
 3795 0549 77       	 .byte 119
 3796 054a 45       	 .byte 69
 3797 054b 35       	 .byte 53
 3798 054c 39       	 .byte 57
 3799 054d 30       	 .byte 48
 3800 054e 74       	 .byte 116
 3801 054f 54       	 .byte 84
 3802 0550 65       	 .byte 101
 3803 0551 5A       	 .byte 90
 3804 0552 46       	 .byte 70
 3805 0553 79       	 .byte 121
 3806 0554 5A       	 .byte 90
 3807 0555 34       	 .byte 52
 3808 0556 44       	 .byte 68
 3809 0557 71       	 .byte 113
 3810 0558 50       	 .byte 80
 3811 0559 63       	 .byte 99
 3812 055a 46       	 .byte 70
 3813 055b 4E       	 .byte 78
 3814 055c 6F       	 .byte 111
 3815 055d 4A       	 .byte 74
 3816 055e 77       	 .byte 119
 3817 055f 7A       	 .byte 122
 3818 0560 55       	 .byte 85
 3819 0561 47       	 .byte 71
 3820 0562 65       	 .byte 101
 3821 0563 79       	 .byte 121
 3822 0564 46       	 .byte 70
 3823 0565 6B       	 .byte 107
 3824 0566 47       	 .byte 71
 3825 0567 73       	 .byte 115
 3826 0568 5A       	 .byte 90
 3827 0569 79       	 .byte 121
 3828 056a 4A       	 .byte 74
 3829 056b 51       	 .byte 81
 3830 056c 65       	 .byte 101
 3831 056d 65       	 .byte 101
 3832 056e 37       	 .byte 55
 3833 056f 65       	 .byte 101
 3834 0570 6E       	 .byte 110
 3835 0571 4B       	 .byte 75
 3836 0572 78       	 .byte 120
 3837 0573 6C       	 .byte 108
 3838 0574 0A       	 .byte 10
 3839 0575 56       	 .byte 86
 3840 0576 75       	 .byte 117
 3841 0577 46       	 .byte 70
 3842 0578 55       	 .byte 85
 3843 0579 33       	 .byte 51
 3844 057a 69       	 .byte 105
 3845 057b 6C       	 .byte 108
 3846 057c 65       	 .byte 101
 3847 057d 78       	 .byte 120
 3848 057e 4B       	 .byte 75
 3849 057f 44       	 .byte 68
 3850 0580 57       	 .byte 87
 3851 0581 50       	 .byte 80
 3852 0582 6D       	 .byte 109
 3853 0583 49       	 .byte 73
 3854 0584 42       	 .byte 66
 3855 0585 6F       	 .byte 111
 3856 0586 4D       	 .byte 77
 3857 0587 66       	 .byte 102
 3858 0588 78       	 .byte 120
 3859 0589 32       	 .byte 50
 3860 058a 7A       	 .byte 122
 3861 058b 69       	 .byte 105
 3862 058c 55       	 .byte 85
 3863 058d 70       	 .byte 112
 3864 058e 34       	 .byte 52
 3865 058f 76       	 .byte 118
 3866 0590 46       	 .byte 70
 3867 0591 65       	 .byte 101
 3868 0592 2B       	 .byte 43
 3869 0593 65       	 .byte 101
 3870 0594 36       	 .byte 54
 3871 0595 70       	 .byte 112
 3872 0596 51       	 .byte 81
 3873 0597 5A       	 .byte 90
 3874 0598 30       	 .byte 48
 3875 0599 75       	 .byte 117
 3876 059a 56       	 .byte 86
 3877 059b 6C       	 .byte 108
 3878 059c 46       	 .byte 70
 3879 059d 56       	 .byte 86
 3880 059e 59       	 .byte 89
 3881 059f 69       	 .byte 105
 3882 05a0 61       	 .byte 97
 3883 05a1 46       	 .byte 70
 3884 05a2 41       	 .byte 65
 3885 05a3 2F       	 .byte 47
 3886 05a4 43       	 .byte 67
 3887 05a5 6B       	 .byte 107
 3888 05a6 2F       	 .byte 47
 3889 05a7 70       	 .byte 112
 3890 05a8 4C       	 .byte 76
 3891 05a9 55       	 .byte 85
 3892 05aa 42       	 .byte 66
 3893 05ab 6C       	 .byte 108
 3894 05ac 78       	 .byte 120
 3895 05ad 6D       	 .byte 109
 3896 05ae 56       	 .byte 86
 3897 05af 4D       	 .byte 77
 3898 05b0 59       	 .byte 89
 3899 05b1 35       	 .byte 53
 3900 05b2 48       	 .byte 72
 3901 05b3 79       	 .byte 121
 3902 05b4 39       	 .byte 57
 3903 05b5 0A       	 .byte 10
 3904 05b6 64       	 .byte 100
 3905 05b7 34       	 .byte 52
 3906 05b8 32       	 .byte 50
 3907 05b9 52       	 .byte 82
 3908 05ba 75       	 .byte 117
 3909 05bb 51       	 .byte 81
 3910 05bc 4B       	 .byte 75
 3911 05bd 42       	 .byte 66
 3912 05be 67       	 .byte 103
 3913 05bf 48       	 .byte 72
 3914 05c0 39       	 .byte 57
 3915 05c1 78       	 .byte 120
 3916 05c2 58       	 .byte 88
 3917 05c3 32       	 .byte 50
 3918 05c4 56       	 .byte 86
 3919 05c5 30       	 .byte 48
 3920 05c6 7A       	 .byte 122
 3921 05c7 45       	 .byte 69
 3922 05c8 47       	 .byte 71
 3923 05c9 76       	 .byte 118
 3924 05ca 76       	 .byte 118
 3925 05cb 4F       	 .byte 79
 3926 05cc 58       	 .byte 88
 3927 05cd 63       	 .byte 99
 3928 05ce 6B       	 .byte 107
 3929 05cf 49       	 .byte 73
 3930 05d0 78       	 .byte 120
 3931 05d1 63       	 .byte 99
 3932 05d2 38       	 .byte 56
 3933 05d3 4D       	 .byte 77
 3934 05d4 50       	 .byte 80
 3935 05d5 4B       	 .byte 75
 3936 05d6 57       	 .byte 87
 3937 05d7 45       	 .byte 69
 3938 05d8 47       	 .byte 71
 3939 05d9 31       	 .byte 49
 3940 05da 62       	 .byte 98
 3941 05db 53       	 .byte 83
 3942 05dc 69       	 .byte 105
 3943 05dd 75       	 .byte 117
 3944 05de 38       	 .byte 56
 3945 05df 36       	 .byte 54
 3946 05e0 64       	 .byte 100
 3947 05e1 5A       	 .byte 90
 3948 05e2 55       	 .byte 85
 3949 05e3 32       	 .byte 50
 3950 05e4 65       	 .byte 101
 3951 05e5 30       	 .byte 48
 3952 05e6 65       	 .byte 101
 3953 05e7 48       	 .byte 72
 3954 05e8 39       	 .byte 57
 3955 05e9 79       	 .byte 121
 3956 05ea 4A       	 .byte 74
 3957 05eb 6E       	 .byte 110
 3958 05ec 37       	 .byte 55
 3959 05ed 52       	 .byte 82
 3960 05ee 59       	 .byte 89
 3961 05ef 4A       	 .byte 74
 3962 05f0 4D       	 .byte 77
 3963 05f1 51       	 .byte 81
 3964 05f2 48       	 .byte 72
 3965 05f3 74       	 .byte 116
 3966 05f4 62       	 .byte 98
 3967 05f5 31       	 .byte 49
 3968 05f6 0A       	 .byte 10
 3969 05f7 4C       	 .byte 76
 3970 05f8 33       	 .byte 51
 3971 05f9 65       	 .byte 101
 3972 05fa 79       	 .byte 121
 3973 05fb 56       	 .byte 86
 3974 05fc 6C       	 .byte 108
 3975 05fd 4B       	 .byte 75
 3976 05fe 65       	 .byte 101
 3977 05ff 68       	 .byte 104
 3978 0600 58       	 .byte 88
 3979 0601 49       	 .byte 73
 3980 0602 34       	 .byte 52
 3981 0603 4C       	 .byte 76
 3982 0604 74       	 .byte 116
 3983 0605 7A       	 .byte 122
 3984 0606 4C       	 .byte 76
 3985 0607 59       	 .byte 89
 3986 0608 50       	 .byte 80
 3987 0609 74       	 .byte 116
 3988 060a 41       	 .byte 65
 3989 060b 4B       	 .byte 75
 3990 060c 4F       	 .byte 79
 3991 060d 69       	 .byte 105
 3992 060e 2B       	 .byte 43
 3993 060f 52       	 .byte 82
 3994 0610 54       	 .byte 84
 3995 0611 46       	 .byte 70
 3996 0612 6B       	 .byte 107
 3997 0613 70       	 .byte 112
 3998 0614 52       	 .byte 82
 3999 0615 73       	 .byte 115
 4000 0616 30       	 .byte 48
 4001 0617 58       	 .byte 88
 4002 0618 68       	 .byte 104
 4003 0619 45       	 .byte 69
 4004 061a 59       	 .byte 89
 4005 061b 4C       	 .byte 76
 4006 061c 31       	 .byte 49
 4007 061d 33       	 .byte 51
 4008 061e 56       	 .byte 86
 4009 061f 58       	 .byte 88
 4010 0620 67       	 .byte 103
 4011 0621 34       	 .byte 52
 4012 0622 6E       	 .byte 110
 4013 0623 35       	 .byte 53
 4014 0624 62       	 .byte 98
 4015 0625 31       	 .byte 49
 4016 0626 2B       	 .byte 43
 4017 0627 36       	 .byte 54
 4018 0628 32       	 .byte 50
 4019 0629 52       	 .byte 82
 4020 062a 6E       	 .byte 110
 4021 062b 6C       	 .byte 108
 4022 062c 58       	 .byte 88
 4023 062d 4E       	 .byte 78
 4024 062e 51       	 .byte 81
 4025 062f 42       	 .byte 66
 4026 0630 39       	 .byte 57
 4027 0631 65       	 .byte 101
 4028 0632 74       	 .byte 116
 4029 0633 73       	 .byte 115
 4030 0634 44       	 .byte 68
 4031 0635 36       	 .byte 54
 4032 0636 41       	 .byte 65
 4033 0637 0A       	 .byte 10
 4034 0638 6F       	 .byte 111
 4035 0639 33       	 .byte 51
 4036 063a 61       	 .byte 97
 4037 063b 4D       	 .byte 77
 4038 063c 6E       	 .byte 110
 4039 063d 45       	 .byte 69
 4040 063e 77       	 .byte 119
 4041 063f 43       	 .byte 67
 4042 0640 77       	 .byte 119
 4043 0641 34       	 .byte 52
 4044 0642 6A       	 .byte 106
 4045 0643 72       	 .byte 114
 4046 0644 70       	 .byte 112
 4047 0645 67       	 .byte 103
 4048 0646 6B       	 .byte 107
 4049 0647 75       	 .byte 117
 4050 0648 4B       	 .byte 75
 4051 0649 41       	 .byte 65
 4052 064a 73       	 .byte 115
 4053 064b 34       	 .byte 52
 4054 064c 61       	 .byte 97
 4055 064d 6E       	 .byte 110
 4056 064e 66       	 .byte 102
 4057 064f 4B       	 .byte 75
 4058 0650 78       	 .byte 120
 4059 0651 66       	 .byte 102
 4060 0652 45       	 .byte 69
 4061 0653 6F       	 .byte 111
 4062 0654 6B       	 .byte 107
 4063 0655 52       	 .byte 82
 4064 0656 36       	 .byte 54
 4065 0657 4F       	 .byte 79
 4066 0658 65       	 .byte 101
 4067 0659 30       	 .byte 48
 4068 065a 6F       	 .byte 111
 4069 065b 49       	 .byte 73
 4070 065c 41       	 .byte 65
 4071 065d 38       	 .byte 56
 4072 065e 55       	 .byte 85
 4073 065f 46       	 .byte 70
 4074 0660 5A       	 .byte 90
 4075 0661 42       	 .byte 66
 4076 0662 47       	 .byte 71
 4077 0663 46       	 .byte 70
 4078 0664 37       	 .byte 55
 4079 0665 37       	 .byte 55
 4080 0666 43       	 .byte 67
 4081 0667 55       	 .byte 85
 4082 0668 79       	 .byte 121
 4083 0669 6D       	 .byte 109
 4084 066a 6C       	 .byte 108
 4085 066b 47       	 .byte 71
 4086 066c 0A       	 .byte 10
 4087 066d 2D       	 .byte 45
 4088 066e 2D       	 .byte 45
 4089 066f 2D       	 .byte 45
 4090 0670 2D       	 .byte 45
 4091 0671 2D       	 .byte 45
 4092 0672 45       	 .byte 69
 4093 0673 4E       	 .byte 78
 4094 0674 44       	 .byte 68
 4095 0675 20       	 .byte 32
 4096 0676 52       	 .byte 82
 4097 0677 53       	 .byte 83
 4098 0678 41       	 .byte 65
 4099 0679 20       	 .byte 32
 4100 067a 50       	 .byte 80
 4101 067b 52       	 .byte 82
 4102 067c 49       	 .byte 73
 4103 067d 56       	 .byte 86
 4104 067e 41       	 .byte 65
 4105 067f 54       	 .byte 84
 4106 0680 45       	 .byte 69
 4107 0681 20       	 .byte 32
 4108 0682 4B       	 .byte 75
 4109 0683 45       	 .byte 69
 4110 0684 59       	 .byte 89
 4111 0685 2D       	 .byte 45
 4112 0686 2D       	 .byte 45
 4113 0687 2D       	 .byte 45
 4114 0688 2D       	 .byte 45
 4115 0689 2D       	 .byte 45
 4116 068a 0A       	 .byte 10
 4117 068b 00       	 .section .text.XMC_GPIO_SetOutputHigh,"ax",%progbits
 4118              	 .align 2
 4119              	 .thumb
 4120              	 .thumb_func
 4122              	XMC_GPIO_SetOutputHigh:
 4123              	.LFB135:
 4124              	 .file 1 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_gpio.h"
   1:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
   2:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @file xmc_gpio.h
   3:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @date 2015-06-20
   4:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   5:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @cond
   6:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *****************************************************************************
   7:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMClib v2.2.0 - XMC Peripheral Driver Library
   8:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
   9:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  10:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * All rights reserved.
  11:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  12:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Boost Software License - Version 1.0 - August 17th, 2003
  13:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  14:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Permission is hereby granted, free of charge, to any person or organization
  15:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * obtaining a copy of the software and accompanying documentation covered by
  16:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * this license (the "Software") to use, reproduce, display, distribute,
  17:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * execute, and transmit the Software, and to prepare derivative works of the
  18:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Software, and to permit third-parties to whom the Software is furnished to
  19:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * do so, all subject to the following:
  20:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  21:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * The copyright notices in the Software and this entire statement, including
  22:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * the above license grant, this restriction and the following disclaimer,
  23:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * must be included in all copies of the Software, in whole or in part, and
  24:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * all derivative works of the Software, unless such copies or derivative
  25:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * works are solely in the form of machine-executable object code generated by
  26:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * a source language processor.
  27:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  28:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  29:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  30:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
  31:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
  32:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
  33:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
  34:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEALINGS IN THE SOFTWARE.
  35:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  36:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * To improve the quality of the software, users are encouraged to share
  37:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * modifications, enhancements or bug fixes with Infineon Technologies AG
  38:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * at XMCSupport@infineon.com.
  39:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *****************************************************************************
  40:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  41:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Change History
  42:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * --------------
  43:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  44:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-02-20:
  45:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Initial draft<br>
  46:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Documentation improved <br>
  47:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  48:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * 2015-06-20:
  49:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *     - Removed version macros and declaration of GetDriverVersion API
  50:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  51:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @endcond
  52:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  53:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  54:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  55:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #ifndef XMC_GPIO_H
  56:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_H
  57:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  58:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  59:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * HEADER FILES
  60:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
  61:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  62:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc_common.h"
  63:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  64:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  65:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup XMClib XMC Peripheral Library
  66:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @{
  67:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  68:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  69:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
  70:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @addtogroup GPIO
  71:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @brief General Purpose Input Output (GPIO) driver for the XMC microcontroller family.
  72:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  73:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * GPIO driver provide a generic and very flexible software interface for all standard digital I/O 
  74:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Each port slice has individual interfaces for the operation as General Purpose I/O and it furthe
  75:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * connectivity to the on-chip periphery and the control for the pad characteristics.
  76:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  77:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * The driver is divided into Input and Output mode.
  78:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  79:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Input mode features:
  80:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Configuration structure XMC_GPIO_CONFIG_t and initialization function XMC_GPIO_Init()
  81:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of weak pull-up or pull-down device. Configuration structure XMC_GPIO_MO
  82:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
  83:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of input hysteresis. XMC_GPIO_SetInputHysteresis()
  84:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  85:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  86:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  87:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Output mode features:
  88:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of push pull/open drain and Alternate output. Configuration structure XM
  89:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
  90:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of pad driver strength. Configuration structure XMC_GPIO_OUTPUT_STRENGTH
  91:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
  92:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  93:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * -# Allows the selection of initial output level. Configuration structure XMC_GPIO_OUTPUT_LEVEL_t
  94:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
  95:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *@{
  96:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
  97:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
  98:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
  99:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * MACROS
 100:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 101:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 102:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Pos PORT0_IOCR0_PC0_Pos
 103:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Msk PORT0_IOCR0_PC0_Msk
 104:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 105:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define PORT_IOCR_PC_Size 				(8U)
 106:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 107:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 108:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_OUTPUT_LEVEL(level) ((level == XMC_GPIO_OUTPUT_LEVEL_LOW) || \
 109:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****                                             (level == XMC_GPIO_OUTPUT_LEVEL_HIGH))
 110:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 111:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #define XMC_GPIO_CHECK_HWCTRL(hwctrl) ((hwctrl == XMC_GPIO_HWCTRL_DISABLED) || \
 112:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL1) || \
 113:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****                                        (hwctrl == XMC_GPIO_HWCTRL_PERIPHERAL2))
 114:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 115:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 116:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * ENUMS
 117:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 118:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 119:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 120:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 121:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines output level of a pin. Use type \a XMC_GPIO_OUTPUT_LEVEL_t for this enum.
 122:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 123:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_OUTPUT_LEVEL
 124:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** {
 125:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_LOW  = 0x10000U, /**<  Reset bit */
 126:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_OUTPUT_LEVEL_HIGH = 0x1U, 	/**< Set bit  */
 127:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_OUTPUT_LEVEL_t;
 128:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 129:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 130:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Defines direct hardware control characteristics of the pin . Use type \a XMC_GPIO_HWCTRL_t for t
 131:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 132:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** typedef enum XMC_GPIO_HWCTRL
 133:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** {
 134:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_DISABLED     = 0x0U, /**<  Software control only */
 135:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL1  = 0x1U, /**<  HWI0/HWO0 control path can override the software confi
 136:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_GPIO_HWCTRL_PERIPHERAL2  = 0x2U  /**<  HWI1/HWO1 control path can override the software confi
 137:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** } XMC_GPIO_HWCTRL_t;
 138:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 139:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 140:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * DEVICE FAMILY EXTENSIONS
 141:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 142:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 143:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #if UC_FAMILY == XMC1
 144:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc1_gpio.h"
 145:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #elif UC_FAMILY == XMC4
 146:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #include "xmc4_gpio.h"
 147:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #else
 148:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #error "xmc_gpio.h: family device not supported"
 149:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 150:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 151:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**************************************************************************************************
 152:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * API PROTOTYPES
 153:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  **************************************************************************************************
 154:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 155:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #ifdef __cplusplus
 156:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** extern "C" {
 157:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** #endif
 158:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 159:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 160:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 161:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	  Constant pointer pointing to GPIO port, to access port registers like Pn_OUT,Pn_O
 162:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	  Port pin number.
 163:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  config GPIO configuration data structure. Refer data structure @ref XMC_GPIO_CONFIG_t fo
 164:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 165:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 166:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 167:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 168:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC1
 169:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,hysteresis, push pull
 170:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for a selected \a po
 171:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \a config provides selected I/O settings. It configures hardware registers Pn_IOCR,Pn_OUT, Pn_OM
 172:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 173:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \if XMC4
 174:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Initializes input / output mode settings like, pull up / pull down devices,push pull /open drain
 175:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Also configures alternate function outputs and clears hardware port control for selected \a port
 176:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * It configures hardware registers Pn_IOCR,Pn_OUT,Pn_OMR,Pn_PDISC and Pn_PDR.\n
 177:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \endif
 178:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 179:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 180:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 181:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 182:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 183:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * This API is called in definition of DAVE_init by code generation and therefore should not be exp
 184:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * for the normal operation. Use other APIs only after DAVE_init is called successfully (returns DA
 185:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 186:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 187:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 188:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 189:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 190:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const c
 191:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 192:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 193:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 194:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	Constant pointer pointing to GPIO port, to access hardware register Pn_IOCR.
 195:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 196:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  mode input / output functionality selection. Refer @ref XMC_GPIO_MODE_t for valid values
 197:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 198:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 199:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 200:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 201:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets digital input and output driver functionality and characteristics of a GPIO port pin. It co
 202:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * registers Pn_IOCR. \a mode is initially configured during initialization in XMC_GPIO_Init(). Cal
 203:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * the port direction functionality as needed later in the program.
 204:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 205:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 206:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  None
 207:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 208:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 209:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 210:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode);
 211:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 212:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 213:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 214:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 215:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	 Constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 216:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	 Port pin number.
 217:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  level output level selection. Refer @ref XMC_GPIO_OUTPUT_LEVEL_t for valid values.
 218:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 219:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 220:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 221:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 222:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Set port pin output level to high or low.It configures hardware registers Pn_OMR.\a level is ini
 223:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * configured during initialization in XMC_GPIO_Init(). Call this API to alter output level as need
 224:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 225:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>
 226:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputHigh(), XMC_GPIO_SetOutputLow().
 227:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 228:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 229:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 230:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 231:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 232:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 233:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 234:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLevel(XMC_GPIO_PORT_t *const port, const uint8_t pin, const 
 235:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** {
 236:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 237:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLevel: Invalid output level", XMC_GPIO_CHECK_OUTPUT_LEVEL(level));
 238:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 239:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)level << pin;
 240:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** }
 241:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 242:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 243:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 244:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 245:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	Port pin number.
 246:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 247:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return None
 248:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 249:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Description:</b><br>
 250:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  Sets port pin output to high. It configures hardware registers Pn_OMR.
 251:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 252:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  \par<b>Related APIs:</b><BR>
 253:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *  XMC_GPIO_SetOutputLow()
 254:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 255:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Note:</b><br>
 256:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().\n
 257:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 258:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 259:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 260:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 261:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 262:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** {
 4125              	 .loc 1 262 0
 4126              	 .cfi_startproc
 4127              	 
 4128              	 
 4129              	 
 4130 0000 80B4     	 push {r7}
 4131              	.LCFI0:
 4132              	 .cfi_def_cfa_offset 4
 4133              	 .cfi_offset 7,-4
 4134 0002 83B0     	 sub sp,sp,#12
 4135              	.LCFI1:
 4136              	 .cfi_def_cfa_offset 16
 4137 0004 00AF     	 add r7,sp,#0
 4138              	.LCFI2:
 4139              	 .cfi_def_cfa_register 7
 4140 0006 7860     	 str r0,[r7,#4]
 4141 0008 0B46     	 mov r3,r1
 4142 000a FB70     	 strb r3,[r7,#3]
 263:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 264:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 265:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = (uint32_t)0x1U << pin;
 4143              	 .loc 1 265 0
 4144 000c FB78     	 ldrb r3,[r7,#3]
 4145 000e 0122     	 movs r2,#1
 4146 0010 9A40     	 lsls r2,r2,r3
 4147 0012 7B68     	 ldr r3,[r7,#4]
 4148 0014 5A60     	 str r2,[r3,#4]
 266:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** }
 4149              	 .loc 1 266 0
 4150 0016 0C37     	 adds r7,r7,#12
 4151              	.LCFI3:
 4152              	 .cfi_def_cfa_offset 4
 4153 0018 BD46     	 mov sp,r7
 4154              	.LCFI4:
 4155              	 .cfi_def_cfa_register 13
 4156              	 
 4157 001a 5DF8047B 	 ldr r7,[sp],#4
 4158              	.LCFI5:
 4159              	 .cfi_restore 7
 4160              	 .cfi_def_cfa_offset 0
 4161 001e 7047     	 bx lr
 4162              	 .cfi_endproc
 4163              	.LFE135:
 4165              	 .section .text.XMC_GPIO_SetOutputLow,"ax",%progbits
 4166              	 .align 2
 4167              	 .thumb
 4168              	 .thumb_func
 4170              	XMC_GPIO_SetOutputLow:
 4171              	.LFB136:
 267:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 268:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** /**
 269:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 270:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  port	constant pointer pointing to GPIO port, to access hardware register Pn_OMR.
 271:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @param  pin	port pin number.
 272:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 273:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * @return  None
 274:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 275:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Description:</b><br>
 276:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Sets port pin output to low. It configures hardware registers Pn_OMR.\n
 277:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 278:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * \par<b>Related APIs:</b><BR>>
 279:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * XMC_GPIO_SetOutputHigh()
 280:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 281:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *\par<b>Note:</b><br>
 282:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Prior to this api, user has to configure port pin to output mode using XMC_GPIO_SetMode().
 283:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value 
 284:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  *
 285:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****  */
 286:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 287:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** __STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
 288:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** {
 4172              	 .loc 1 288 0
 4173              	 .cfi_startproc
 4174              	 
 4175              	 
 4176              	 
 4177 0000 80B4     	 push {r7}
 4178              	.LCFI6:
 4179              	 .cfi_def_cfa_offset 4
 4180              	 .cfi_offset 7,-4
 4181 0002 83B0     	 sub sp,sp,#12
 4182              	.LCFI7:
 4183              	 .cfi_def_cfa_offset 16
 4184 0004 00AF     	 add r7,sp,#0
 4185              	.LCFI8:
 4186              	 .cfi_def_cfa_register 7
 4187 0006 7860     	 str r0,[r7,#4]
 4188 0008 0B46     	 mov r3,r1
 4189 000a FB70     	 strb r3,[r7,#3]
 289:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));
 290:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** 
 291:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h ****   port->OMR = 0x10000U << pin;
 4190              	 .loc 1 291 0
 4191 000c FB78     	 ldrb r3,[r7,#3]
 4192 000e 4FF48032 	 mov r2,#65536
 4193 0012 9A40     	 lsls r2,r2,r3
 4194 0014 7B68     	 ldr r3,[r7,#4]
 4195 0016 5A60     	 str r2,[r3,#4]
 292:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc\xmc_gpio.h **** }
 4196              	 .loc 1 292 0
 4197 0018 0C37     	 adds r7,r7,#12
 4198              	.LCFI9:
 4199              	 .cfi_def_cfa_offset 4
 4200 001a BD46     	 mov sp,r7
 4201              	.LCFI10:
 4202              	 .cfi_def_cfa_register 13
 4203              	 
 4204 001c 5DF8047B 	 ldr r7,[sp],#4
 4205              	.LCFI11:
 4206              	 .cfi_restore 7
 4207              	 .cfi_def_cfa_offset 0
 4208 0020 7047     	 bx lr
 4209              	 .cfi_endproc
 4210              	.LFE136:
 4212 0022 00BF     	 .section .text.DIGITAL_IO_SetOutputHigh,"ax",%progbits
 4213              	 .align 2
 4214              	 .thumb
 4215              	 .thumb_func
 4217              	DIGITAL_IO_SetOutputHigh:
 4218              	.LFB143:
 4219              	 .file 2 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO/digital_io.h"
   1:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /*
   2:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   3:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @file digital_io.h
   4:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @date 2021-01-08
   5:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   6:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * NOTE:
   7:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
   9:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @cond
  10:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  11:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DIGITAL_IO v4.0.18 - The DIGITAL_IO APP is used to configure a port pin as digital Input/Output.
  12:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  13:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Copyright (c) 2015-2020, Infineon Technologies AG
  14:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * All rights reserved.
  15:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  16:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  17:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * following conditions are met:
  18:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  19:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  20:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   disclaimer.
  21:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  22:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  23:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  24:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  25:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  26:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *   products derived from this software without specific prior written permission.
  27:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  28:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  29:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  30:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  31:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  32:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  33:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  34:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  35:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  36:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  37:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * with Infineon Technologies AG (dave@infineon.com).
  38:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  39:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  40:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * Change History
  41:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * --------------
  42:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  43:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-02-16
  44:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Initial version
  45:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  46:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-04-22
  47:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - XMC_ASSERT is added in static inline functions.<br>
  48:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  49:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-06-20
  50:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Version check added for XMCLib dependency.<br>
  51:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  52:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2015-12-22
  53:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Added hardware controlled IO feature.
  54:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2016-07-08:
  55:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Fixed incorrect case for an included header.<br>
  56:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * 2021-01-08:
  57:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *     - Modified check for minimum XMCLib version
  58:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  59:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * @endcond
  60:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  *
  61:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  */
  62:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  63:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  64:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * HEADER FILES
  65:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  66:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  67:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifndef DIGITAL_IO_H
  68:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_H
  69:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  70:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "xmc_gpio.h"
  71:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "DAVE_Common.h"
  72:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #include "digital_io_conf.h"
  73:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  74:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
  75:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * MACROS
  76:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  77:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_XMC_LIB_MAJOR_VERSION 2
  78:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_XMC_LIB_MINOR_VERSION 0
  79:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #define DIGITAL_IO_XMC_LIB_PATCH_VERSION 0
  80:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  81:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #if !((XMC_LIB_MAJOR_VERSION > DIGITAL_IO_XMC_LIB_MAJOR_VERSION) ||\
  82:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****       ((XMC_LIB_MAJOR_VERSION == DIGITAL_IO_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION > DIGI
  83:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****       ((XMC_LIB_MAJOR_VERSION == DIGITAL_IO_XMC_LIB_MAJOR_VERSION) && (XMC_LIB_MINOR_VERSION == DIG
  84:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #error "DIGITAL_IO requires XMC Peripheral Library v2.0.0 or higher"
  85:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
  86:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  87:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  /*************************************************************************************************
  88:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * ENUMS
  89:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
  90:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  91:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  92:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_enumerations
  93:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
  94:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  95:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
  96:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
  97:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization status of DIGITAL_IO APP.
  98:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
  99:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef enum DIGITAL_IO_STATUS
 100:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 101:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_OK = 0U,/**< 0=Status OK */
 102:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   DIGITAL_IO_STATUS_FAILURE = 1U/**< 1=Status Failed */
 103:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_STATUS_t;
 104:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 105:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 106:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 107:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 108:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 109:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 110:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * DATA STRUCTURES
 111:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 112:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 113:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_datastructures
 114:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 115:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 116:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 117:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 118:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Initialization data structure of DIGITAL_IO APP
 119:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 120:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** typedef struct DIGITAL_IO
 121:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 122:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_PORT_t *const gpio_port;             /**< port number */
 123:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_CONFIG_t gpio_config;          /**< mode, initial output level and pad driver stre
 124:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   const uint8_t gpio_pin;                       /**< pin number */
 125:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   const XMC_GPIO_HWCTRL_t hwctrl;               /**< Hardware port control */
 126:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** } DIGITAL_IO_t;
 127:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 128:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 129:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 130:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @}
 131:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 132:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 133:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 134:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**************************************************************************************************
 135:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  * API Prototypes
 136:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****  **************************************************************************************************
 137:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 138:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 139:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #ifdef __cplusplus
 140:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** extern "C" {
 141:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** #endif
 142:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 143:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 144:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @ingroup DIGITAL_IO_apidoc
 145:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @{
 146:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 147:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 148:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 149:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 150:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 151:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Get DIGITAL_IO APP version
 152:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DAVE_APP_VERSION_t APP version information (major, minor and patch number)
 153:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 154:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description: </b><br>
 155:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * The function can be used to check application software compatibility with a
 156:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * specific version of the APP.
 157:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 158:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 159:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 160:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 161:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include "DAVE.h"
 162:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 163:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 164:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 165:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t init_status;
 166:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_APP_VERSION_t version;
 167:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 168:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // Initialize DIGITAL_IO APP:
 169:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   // DIGITAL_IO_Init() is called from within DAVE_Init().
 170:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   init_status = DAVE_Init();
 171:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(init_status == DAVE_STATUS_SUCCESS)
 172:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 173:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     version = DIGITAL_IO_GetAppVersion();
 174:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     if (version.major != 4U) {
 175:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Probably, not the right version.
 176:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 177:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 178:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 179:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // More code here
 180:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1) {
 181:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 182:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 183:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     return (1);
 184:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 185:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @endcode<BR>
 186:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 187:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 188:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** DAVE_APP_VERSION_t DIGITAL_IO_GetAppVersion(void);
 189:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 190:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 191:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 192:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to initialize the port pin as per UI settings.
 193:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 194:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status. Refer @ref DIGITAL_IO_STATUS_t structure for d
 195:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 196:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 197:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function initializes GPIO port registers IOCR,PDISC,OMR,PDR/PHCR to configure pin direction,
 198:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * and pad driver strength/hysteresis.
 199:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 200:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 201:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * None
 202:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 203:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 204:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 205:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include "DAVE.h" //Declarations from DAVE Code Generation (includes SFR declaration)
 206:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 207:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 208:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 209:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 210:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 211:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 212:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 213:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 214:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 215:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 216:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 217:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 218:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 219:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 220:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 221:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 222:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 223:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 224:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 225:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 226:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return 1U;
 227:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  }
 228:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 229:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 230:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 231:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler);
 232:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 233:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 234:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 235:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to set port pin high.
 236:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 237:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 238:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 239:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 240:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to high level
 241:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 242:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 243:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  DIGITAL_IO_SetOutputLow()
 244:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 245:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 246:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 247:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * #include "DAVE.h" //Declarations from DAVE Code Generation (includes SFR declaration)
 248:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 249:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * int main(void)
 250:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * {
 251:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DAVE_STATUS_t status;
 252:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_In
 253:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   if(status == DAVE_STATUS_SUCCESS)
 254:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 255:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG("DAVE Apps initialization success\n");
 256:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 257:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   else
 258:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 259:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 260:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     while(1U)
 261:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     {
 262:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     }
 263:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 264:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   //Placeholder for user application code. The while loop below can be replaced with user applica
 265:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
 266:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   while(1U)
 267:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   {
 268:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *     // Add application code here
 269:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   }
 270:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 271:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 272:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 273:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 274:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 275:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 276:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
 277:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 4220              	 .loc 2 277 0
 4221              	 .cfi_startproc
 4222              	 
 4223              	 
 4224 0000 80B5     	 push {r7,lr}
 4225              	.LCFI12:
 4226              	 .cfi_def_cfa_offset 8
 4227              	 .cfi_offset 7,-8
 4228              	 .cfi_offset 14,-4
 4229 0002 82B0     	 sub sp,sp,#8
 4230              	.LCFI13:
 4231              	 .cfi_def_cfa_offset 16
 4232 0004 00AF     	 add r7,sp,#0
 4233              	.LCFI14:
 4234              	 .cfi_def_cfa_register 7
 4235 0006 7860     	 str r0,[r7,#4]
 278:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
 279:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 4236              	 .loc 2 279 0
 4237 0008 7B68     	 ldr r3,[r7,#4]
 4238 000a 1A68     	 ldr r2,[r3]
 4239 000c 7B68     	 ldr r3,[r7,#4]
 4240 000e 1B7C     	 ldrb r3,[r3,#16]
 4241 0010 1046     	 mov r0,r2
 4242 0012 1946     	 mov r1,r3
 4243 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputHigh
 280:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 4244              	 .loc 2 280 0
 4245 0018 0837     	 adds r7,r7,#8
 4246              	.LCFI15:
 4247              	 .cfi_def_cfa_offset 8
 4248 001a BD46     	 mov sp,r7
 4249              	.LCFI16:
 4250              	 .cfi_def_cfa_register 13
 4251              	 
 4252 001c 80BD     	 pop {r7,pc}
 4253              	 .cfi_endproc
 4254              	.LFE143:
 4256 001e 00BF     	 .section .text.DIGITAL_IO_SetOutputLow,"ax",%progbits
 4257              	 .align 2
 4258              	 .thumb
 4259              	 .thumb_func
 4261              	DIGITAL_IO_SetOutputLow:
 4262              	.LFB144:
 281:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 282:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** /**
 283:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @brief Function to reset port pin.
 284:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @param handler Pointer pointing to APP data structure. Refer @ref DIGITAL_IO_t for details.
 285:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @return None
 286:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 287:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Description:</b><br>
 288:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * This function configures port output modification register Pn_OMR, to make port pin to low level.
 289:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 290:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * \par<b>Related APIs:</b><BR>
 291:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * DIGITAL_IO_SetOutputHigh()
 292:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 293:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * Example Usage:
 294:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * @code
 295:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  #include "DAVE.h" //Declarations from DAVE Code Generation (includes SFR declaration)
 296:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 297:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  int main(void)
 298:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  {
 299:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DAVE_STATUS_t status;
 300:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    status = DAVE_Init();  //(DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_0) is called within DAVE_I
 301:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    if(status == DAVE_STATUS_SUCCESS)
 302:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 303:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG("DAVE Apps initialization success\n");
 304:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 305:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    else
 306:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 307:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      XMC_DEBUG(("DAVE Apps initialization failed with status %d\n", status));
 308:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      while(1U)
 309:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      {
 310:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      }
 311:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 312:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    //Placeholder for user application code. The while loop below can be replaced with user applic
 313:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    DIGITAL_IO_SetOutputLow(&DIGITAL_IO_0);
 314:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    while(1U)
 315:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    {
 316:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *      // Add application code here
 317:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *    }
 318:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *
 319:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *   return (1);
 320:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** * }
 321:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** *  @endcode
 322:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** */
 323:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** 
 324:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** __STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
 325:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** {
 4263              	 .loc 2 325 0
 4264              	 .cfi_startproc
 4265              	 
 4266              	 
 4267 0000 80B5     	 push {r7,lr}
 4268              	.LCFI17:
 4269              	 .cfi_def_cfa_offset 8
 4270              	 .cfi_offset 7,-8
 4271              	 .cfi_offset 14,-4
 4272 0002 82B0     	 sub sp,sp,#8
 4273              	.LCFI18:
 4274              	 .cfi_def_cfa_offset 16
 4275 0004 00AF     	 add r7,sp,#0
 4276              	.LCFI19:
 4277              	 .cfi_def_cfa_register 7
 4278 0006 7860     	 str r0,[r7,#4]
 326:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
 327:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h ****   XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 4279              	 .loc 2 327 0
 4280 0008 7B68     	 ldr r3,[r7,#4]
 4281 000a 1A68     	 ldr r2,[r3]
 4282 000c 7B68     	 ldr r3,[r7,#4]
 4283 000e 1B7C     	 ldrb r3,[r3,#16]
 4284 0010 1046     	 mov r0,r2
 4285 0012 1946     	 mov r1,r3
 4286 0014 FFF7FEFF 	 bl XMC_GPIO_SetOutputLow
 328:D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO\digital_io.h **** }
 4287              	 .loc 2 328 0
 4288 0018 0837     	 adds r7,r7,#8
 4289              	.LCFI20:
 4290              	 .cfi_def_cfa_offset 8
 4291 001a BD46     	 mov sp,r7
 4292              	.LCFI21:
 4293              	 .cfi_def_cfa_register 13
 4294              	 
 4295 001c 80BD     	 pop {r7,pc}
 4296              	 .cfi_endproc
 4297              	.LFE144:
 4299              	 .comm cluster_door_in,4,4
 4300              	 .comm Vcu_OutPuts,3,4
 4301              	 .comm Combi_Switch_IN,8,4
 4302              	 .comm Seat_Switch_IN,3,4
 4303              	 .comm Door_Switch_IN,7,4
 4304              	 .comm Relay_Control_Switch_OUT,47,4
 4305              	 .comm Hvac_IN,24,4
 4306              	 .comm Switch_Ios_IN,20,4
 4307              	 .comm Motor_controller_OUT,5,4
 4308              	 .comm Lights_OUT,8,4
 4309              	 .comm Sensors_OUT,8,4
 4310              	 .comm Aux_Inputs,6,4
 4311              	 .comm Instrument_Cluster_OUT,18,4
 4312              	 .comm Seat_Belt_OUT,3,4
 4313              	 .comm Gear_OUT,4,4
 4314              	 .comm Instrumetcluster_DriveMode_OUT,4,4
 4315              	 .comm Door_Switch_OUT,7,4
 4316              	 .comm instrument_cluster_doorsvar,7,4
 4317              	 .comm cluster_door_out,4,4
 4318              	 .comm current_time,8,4
 4319              	 .comm timeval,8,4
 4320              	 .comm GPS_data_val,16,4
 4321              	 .comm epoch,4,4
 4322              	 .comm ambient_temp,1,1
 4323 001e 00BF     	 .section .bss.gu8_signalQuality,"aw",%nobits
 4326              	gu8_signalQuality:
 4327 0000 00       	 .space 1
 4328              	 .section .bss.gu8arr_respBuffer,"aw",%nobits
 4329              	 .align 2
 4332              	gu8arr_respBuffer:
 4333 0000 00000000 	 .space 64
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4333      00000000 
 4334              	 .section .bss.gu8arr_productRevision,"aw",%nobits
 4335              	 .align 2
 4338              	gu8arr_productRevision:
 4339 0000 00000000 	 .space 19
 4339      00000000 
 4339      00000000 
 4339      00000000 
 4339      000000
 4340 0013 00       	 .section .bss.gu8arr_IMEINum,"aw",%nobits
 4341              	 .align 2
 4344              	gu8arr_IMEINum:
 4345 0000 00000000 	 .space 15
 4345      00000000 
 4345      00000000 
 4345      000000
 4346 000f 00       	 .section .bss.gu8arr_CCIDNum,"aw",%nobits
 4347              	 .align 2
 4350              	gu8arr_CCIDNum:
 4351 0000 00000000 	 .space 20
 4351      00000000 
 4351      00000000 
 4351      00000000 
 4351      00000000 
 4352              	 .section .bss.gu8arr_phoneNum,"aw",%nobits
 4353              	 .align 2
 4356              	gu8arr_phoneNum:
 4357 0000 00000000 	 .space 13
 4357      00000000 
 4357      00000000 
 4357      00
 4358 000d 000000   	 .section .bss.gu8_operatorName,"aw",%nobits
 4359              	 .align 2
 4362              	gu8_operatorName:
 4363 0000 00000000 	 .space 20
 4363      00000000 
 4363      00000000 
 4363      00000000 
 4363      00000000 
 4364              	 .section .bss.gu8_dataTime,"aw",%nobits
 4365              	 .align 2
 4368              	gu8_dataTime:
 4369 0000 00000000 	 .space 20
 4369      00000000 
 4369      00000000 
 4369      00000000 
 4369      00000000 
 4370              	 .comm gu8arr_sendMsgBuff,20,4
 4371              	 .section .bss.sgu8_respCount,"aw",%nobits
 4374              	sgu8_respCount:
 4375 0000 00       	 .space 1
 4376              	 .section .bss.sgu8_mqttClientId,"aw",%nobits
 4379              	sgu8_mqttClientId:
 4380 0000 00       	 .space 1
 4381              	 .section .bss.sgu16_cmeError,"aw",%nobits
 4382              	 .align 1
 4385              	sgu16_cmeError:
 4386 0000 0000     	 .space 2
 4387              	 .section .bss.sgu16_cmsError,"aw",%nobits
 4388              	 .align 1
 4391              	sgu16_cmsError:
 4392 0000 0000     	 .space 2
 4393              	 .section .data.sen_4gRunState,"aw",%progbits
 4396              	sen_4gRunState:
 4397 0000 01       	 .byte 1
 4398              	 .section .data.sen_sendCmdGetRespState,"aw",%progbits
 4401              	sen_sendCmdGetRespState:
 4402 0000 01       	 .byte 1
 4403              	 .section .bss.sen_simStatusState,"aw",%nobits
 4406              	sen_simStatusState:
 4407 0000 00       	 .space 1
 4408              	 .section .bss.sen_openMqttState,"aw",%nobits
 4411              	sen_openMqttState:
 4412 0000 00       	 .space 1
 4413              	 .section .bss.sen_publishDataState,"aw",%nobits
 4416              	sen_publishDataState:
 4417 0000 00       	 .space 1
 4418              	 .section .bss.sen_modemResetState,"aw",%nobits
 4421              	sen_modemResetState:
 4422 0000 00       	 .space 1
 4423              	 .section .bss.sen_10sPacektPubState,"aw",%nobits
 4426              	sen_10sPacektPubState:
 4427 0000 00       	 .space 1
 4428              	 .section .bss.sen_sslFileUpldState,"aw",%nobits
 4431              	sen_sslFileUpldState:
 4432 0000 00       	 .space 1
 4433              	 .section .bss.sen_gpsProcessState,"aw",%nobits
 4436              	sen_gpsProcessState:
 4437 0000 00       	 .space 1
 4438              	 .section .bss.sen_4gProcessState,"aw",%nobits
 4441              	sen_4gProcessState:
 4442 0000 00       	 .space 1
 4443              	 .section .bss.sgb_packetFlag,"aw",%nobits
 4446              	sgb_packetFlag:
 4447 0000 00       	 .space 1
 4448              	 .section .bss.sgb_flag4g,"aw",%nobits
 4451              	sgb_flag4g:
 4452 0000 00       	 .space 1
 4453              	 .section .bss.sgb_flagGps,"aw",%nobits
 4456              	sgb_flagGps:
 4457 0000 00       	 .space 1
 4458              	 .global gst_deviceStatus
 4459              	 .section .data.gst_deviceStatus,"aw",%progbits
 4460              	 .align 2
 4463              	gst_deviceStatus:
 4464 0000 01       	 .byte 1
 4465 0001 00       	 .byte 0
 4466 0002 00       	 .byte 0
 4467 0003 FE       	 .byte -2
 4468 0004 FE       	 .byte -2
 4469 0005 FF       	 .byte -1
 4470 0006 FE       	 .byte -2
 4471 0007 FF       	 .byte -1
 4472 0008 FF       	 .byte -1
 4473              	 .global gcst_ATCmdTable
 4474 0009 000000   	 .section .data.gcst_ATCmdTable,"aw",%progbits
 4475              	 .align 2
 4478              	gcst_ATCmdTable:
 4479 0000 44554D4D 	 .ascii "DUMMY_DATA\000"
 4479      595F4441 
 4479      544100
 4480 000b 00000000 	 .space 1021
 4480      00000000 
 4480      00000000 
 4480      00000000 
 4480      00000000 
 4481 0408 5244590D 	 .ascii "RDY\015\012\000"
 4481      0A00
 4482 040e 00000000 	 .space 44
 4482      00000000 
 4482      00000000 
 4482      00000000 
 4482      00000000 
 4483 043a 0000     	 .ascii "\000\000"
 4484 043c 00000000 	 .space 48
 4484      00000000 
 4484      00000000 
 4484      00000000 
 4484      00000000 
 4485 046c 0000     	 .ascii "\000\000"
 4486 046e 00000000 	 .space 48
 4486      00000000 
 4486      00000000 
 4486      00000000 
 4486      00000000 
 4487 049e 0000     	 .space 2
 4488 04a0 2C010000 	 .word 300
 4489 04a4 41542B51 	 .ascii "AT+QPOWD=1\000"
 4489      504F5744 
 4489      3D3100
 4490 04af 00000000 	 .space 1021
 4490      00000000 
 4490      00000000 
 4490      00000000 
 4490      00000000 
 4491 08ac 4F4B0D0A 	 .ascii "OK\015\012\000"
 4491      00
 4492 08b1 00000000 	 .space 45
 4492      00000000 
 4492      00000000 
 4492      00000000 
 4492      00000000 
 4493 08de 504F5745 	 .ascii "POWERED DOWN\015\012\000"
 4493      52454420 
 4493      444F574E 
 4493      0D0A00
 4494 08ed 00000000 	 .space 35
 4494      00000000 
 4494      00000000 
 4494      00000000 
 4494      00000000 
 4495 0910 0000     	 .ascii "\000\000"
 4496 0912 00000000 	 .space 48
 4496      00000000 
 4496      00000000 
 4496      00000000 
 4496      00000000 
 4497 0942 0000     	 .space 2
 4498 0944 2C010000 	 .word 300
 4499 0948 41542B51 	 .ascii "AT+QURCCFG=\"urcport\",\000"
 4499      55524343 
 4499      46473D22 
 4499      75726370 
 4499      6F727422 
 4500 095e 00000000 	 .space 1010
 4500      00000000 
 4500      00000000 
 4500      00000000 
 4500      00000000 
 4501 0d50 4F4B0D0A 	 .ascii "OK\015\012\000"
 4501      00
 4502 0d55 00000000 	 .space 45
 4502      00000000 
 4502      00000000 
 4502      00000000 
 4502      00000000 
 4503 0d82 0000     	 .ascii "\000\000"
 4504 0d84 00000000 	 .space 48
 4504      00000000 
 4504      00000000 
 4504      00000000 
 4504      00000000 
 4505 0db4 4552524F 	 .ascii "ERROR\000"
 4505      5200
 4506 0dba 00000000 	 .space 44
 4506      00000000 
 4506      00000000 
 4506      00000000 
 4506      00000000 
 4507 0de6 0000     	 .space 2
 4508 0de8 2C010000 	 .word 300
 4509 0dec 41544530 	 .ascii "ATE0\000"
 4509      00
 4510 0df1 00000000 	 .space 1027
 4510      00000000 
 4510      00000000 
 4510      00000000 
 4510      00000000 
 4511 11f4 4F4B0D0A 	 .ascii "OK\015\012\000"
 4511      00
 4512 11f9 00000000 	 .space 45
 4512      00000000 
 4512      00000000 
 4512      00000000 
 4512      00000000 
 4513 1226 0000     	 .ascii "\000\000"
 4514 1228 00000000 	 .space 48
 4514      00000000 
 4514      00000000 
 4514      00000000 
 4514      00000000 
 4515 1258 0000     	 .ascii "\000\000"
 4516 125a 00000000 	 .space 48
 4516      00000000 
 4516      00000000 
 4516      00000000 
 4516      00000000 
 4517 128a 0000     	 .space 2
 4518 128c 2C010000 	 .word 300
 4519 1290 41542B49 	 .ascii "AT+IFC=\000"
 4519      46433D00 
 4520 1298 00000000 	 .space 1024
 4520      00000000 
 4520      00000000 
 4520      00000000 
 4520      00000000 
 4521 1698 4F4B0D0A 	 .ascii "OK\015\012\000"
 4521      00
 4522 169d 00000000 	 .space 45
 4522      00000000 
 4522      00000000 
 4522      00000000 
 4522      00000000 
 4523 16ca 2B494643 	 .ascii "+IFC:\000"
 4523      3A00
 4524 16d0 00000000 	 .space 44
 4524      00000000 
 4524      00000000 
 4524      00000000 
 4524      00000000 
 4525 16fc 0000     	 .ascii "\000\000"
 4526 16fe 00000000 	 .space 48
 4526      00000000 
 4526      00000000 
 4526      00000000 
 4526      00000000 
 4527 172e 0000     	 .space 2
 4528 1730 2C010000 	 .word 300
 4529 1734 41544900 	 .ascii "ATI\000"
 4530 1738 00000000 	 .space 1028
 4530      00000000 
 4530      00000000 
 4530      00000000 
 4530      00000000 
 4531 1b3c 4F4B0D0A 	 .ascii "OK\015\012\000"
 4531      00
 4532 1b41 00000000 	 .space 45
 4532      00000000 
 4532      00000000 
 4532      00000000 
 4532      00000000 
 4533 1b6e 51756563 	 .ascii "Quectel\015\012\000"
 4533      74656C0D 
 4533      0A00
 4534 1b78 00000000 	 .space 40
 4534      00000000 
 4534      00000000 
 4534      00000000 
 4534      00000000 
 4535 1ba0 0000     	 .ascii "\000\000"
 4536 1ba2 00000000 	 .space 48
 4536      00000000 
 4536      00000000 
 4536      00000000 
 4536      00000000 
 4537 1bd2 0000     	 .space 2
 4538 1bd4 2C010000 	 .word 300
 4539 1bd8 41542B51 	 .ascii "AT+QSIMDET=\000"
 4539      53494D44 
 4539      45543D00 
 4540 1be4 00000000 	 .space 1020
 4540      00000000 
 4540      00000000 
 4540      00000000 
 4540      00000000 
 4541 1fe0 4F4B0D0A 	 .ascii "OK\015\012\000"
 4541      00
 4542 1fe5 00000000 	 .space 45
 4542      00000000 
 4542      00000000 
 4542      00000000 
 4542      00000000 
 4543 2012 2B515349 	 .ascii "+QSIMDET:\000"
 4543      4D444554 
 4543      3A00
 4544 201c 00000000 	 .space 40
 4544      00000000 
 4544      00000000 
 4544      00000000 
 4544      00000000 
 4545 2044 4552524F 	 .ascii "ERROR\000"
 4545      5200
 4546 204a 00000000 	 .space 44
 4546      00000000 
 4546      00000000 
 4546      00000000 
 4546      00000000 
 4547 2076 0000     	 .space 2
 4548 2078 2C010000 	 .word 300
 4549 207c 41542B51 	 .ascii "AT+QSIMSTAT=\000"
 4549      53494D53 
 4549      5441543D 
 4549      00
 4550 2089 00000000 	 .space 1019
 4550      00000000 
 4550      00000000 
 4550      00000000 
 4550      00000000 
 4551 2484 4F4B0D0A 	 .ascii "OK\015\012\000"
 4551      00
 4552 2489 00000000 	 .space 45
 4552      00000000 
 4552      00000000 
 4552      00000000 
 4552      00000000 
 4553 24b6 0000     	 .ascii "\000\000"
 4554 24b8 00000000 	 .space 48
 4554      00000000 
 4554      00000000 
 4554      00000000 
 4554      00000000 
 4555 24e8 4552524F 	 .ascii "ERROR\000"
 4555      5200
 4556 24ee 00000000 	 .space 44
 4556      00000000 
 4556      00000000 
 4556      00000000 
 4556      00000000 
 4557 251a 0000     	 .space 2
 4558 251c 2C010000 	 .word 300
 4559 2520 41542B51 	 .ascii "AT+QSIMSTAT?\000"
 4559      53494D53 
 4559      5441543F 
 4559      00
 4560 252d 00000000 	 .space 1019
 4560      00000000 
 4560      00000000 
 4560      00000000 
 4560      00000000 
 4561 2928 4F4B0D0A 	 .ascii "OK\015\012\000"
 4561      00
 4562 292d 00000000 	 .space 45
 4562      00000000 
 4562      00000000 
 4562      00000000 
 4562      00000000 
 4563 295a 2B515349 	 .ascii "+QSIMSTAT:\000"
 4563      4D535441 
 4563      543A00
 4564 2965 00000000 	 .space 39
 4564      00000000 
 4564      00000000 
 4564      00000000 
 4564      00000000 
 4565 298c 4552524F 	 .ascii "ERROR\000"
 4565      5200
 4566 2992 00000000 	 .space 44
 4566      00000000 
 4566      00000000 
 4566      00000000 
 4566      00000000 
 4567 29be 0000     	 .space 2
 4568 29c0 2C010000 	 .word 300
 4569 29c4 41542B43 	 .ascii "AT+CPIN?\000"
 4569      50494E3F 
 4569      00
 4570 29cd 00000000 	 .space 1023
 4570      00000000 
 4570      00000000 
 4570      00000000 
 4570      00000000 
 4571 2dcc 4F4B0D0A 	 .ascii "OK\015\012\000"
 4571      00
 4572 2dd1 00000000 	 .space 45
 4572      00000000 
 4572      00000000 
 4572      00000000 
 4572      00000000 
 4573 2dfe 2B435049 	 .ascii "+CPIN:\000"
 4573      4E3A00
 4574 2e05 00000000 	 .space 43
 4574      00000000 
 4574      00000000 
 4574      00000000 
 4574      00000000 
 4575 2e30 0000     	 .ascii "\000\000"
 4576 2e32 00000000 	 .space 48
 4576      00000000 
 4576      00000000 
 4576      00000000 
 4576      00000000 
 4577 2e62 0000     	 .space 2
 4578 2e64 88130000 	 .word 5000
 4579 2e68 41542B47 	 .ascii "AT+GSN\000"
 4579      534E00
 4580 2e6f 00000000 	 .space 1025
 4580      00000000 
 4580      00000000 
 4580      00000000 
 4580      00000000 
 4581 3270 4F4B0D0A 	 .ascii "OK\015\012\000"
 4581      00
 4582 3275 00000000 	 .space 45
 4582      00000000 
 4582      00000000 
 4582      00000000 
 4582      00000000 
 4583 32a2 0000     	 .ascii "\000\000"
 4584 32a4 00000000 	 .space 48
 4584      00000000 
 4584      00000000 
 4584      00000000 
 4584      00000000 
 4585 32d4 0000     	 .ascii "\000\000"
 4586 32d6 00000000 	 .space 48
 4586      00000000 
 4586      00000000 
 4586      00000000 
 4586      00000000 
 4587 3306 0000     	 .space 2
 4588 3308 2C010000 	 .word 300
 4589 330c 41542B51 	 .ascii "AT+QCCID\000"
 4589      43434944 
 4589      00
 4590 3315 00000000 	 .space 1023
 4590      00000000 
 4590      00000000 
 4590      00000000 
 4590      00000000 
 4591 3714 4F4B0D0A 	 .ascii "OK\015\012\000"
 4591      00
 4592 3719 00000000 	 .space 45
 4592      00000000 
 4592      00000000 
 4592      00000000 
 4592      00000000 
 4593 3746 2B514343 	 .ascii "+QCCID:\000"
 4593      49443A00 
 4594 374e 00000000 	 .space 42
 4594      00000000 
 4594      00000000 
 4594      00000000 
 4594      00000000 
 4595 3778 4552524F 	 .ascii "ERROR\000"
 4595      5200
 4596 377e 00000000 	 .space 44
 4596      00000000 
 4596      00000000 
 4596      00000000 
 4596      00000000 
 4597 37aa 0000     	 .space 2
 4598 37ac 2C010000 	 .word 300
 4599 37b0 41542B43 	 .ascii "AT+CNUM\000"
 4599      4E554D00 
 4600 37b8 00000000 	 .space 1024
 4600      00000000 
 4600      00000000 
 4600      00000000 
 4600      00000000 
 4601 3bb8 4F4B0D0A 	 .ascii "OK\015\012\000"
 4601      00
 4602 3bbd 00000000 	 .space 45
 4602      00000000 
 4602      00000000 
 4602      00000000 
 4602      00000000 
 4603 3bea 2B434E55 	 .ascii "+CNUM:\000"
 4603      4D3A00
 4604 3bf1 00000000 	 .space 43
 4604      00000000 
 4604      00000000 
 4604      00000000 
 4604      00000000 
 4605 3c1c 4552524F 	 .ascii "ERROR\000"
 4605      5200
 4606 3c22 00000000 	 .space 44
 4606      00000000 
 4606      00000000 
 4606      00000000 
 4606      00000000 
 4607 3c4e 0000     	 .space 2
 4608 3c50 2C010000 	 .word 300
 4609 3c54 41542B43 	 .ascii "AT+COPS?\000"
 4609      4F50533F 
 4609      00
 4610 3c5d 00000000 	 .space 1023
 4610      00000000 
 4610      00000000 
 4610      00000000 
 4610      00000000 
 4611 405c 4F4B0D0A 	 .ascii "OK\015\012\000"
 4611      00
 4612 4061 00000000 	 .space 45
 4612      00000000 
 4612      00000000 
 4612      00000000 
 4612      00000000 
 4613 408e 2B434F50 	 .ascii "+COPS:\000"
 4613      533A00
 4614 4095 00000000 	 .space 43
 4614      00000000 
 4614      00000000 
 4614      00000000 
 4614      00000000 
 4615 40c0 2B434D45 	 .ascii "+CME ERROR\000"
 4615      20455252 
 4615      4F5200
 4616 40cb 00000000 	 .space 39
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4616      00000000 
 4617 40f2 0000     	 .space 2
 4618 40f4 20BF0200 	 .word 180000
 4619 40f8 41542B43 	 .ascii "AT+CREG?\000"
 4619      5245473F 
 4619      00
 4620 4101 00000000 	 .space 1023
 4620      00000000 
 4620      00000000 
 4620      00000000 
 4620      00000000 
 4621 4500 4F4B0D0A 	 .ascii "OK\015\012\000"
 4621      00
 4622 4505 00000000 	 .space 45
 4622      00000000 
 4622      00000000 
 4622      00000000 
 4622      00000000 
 4623 4532 2B435245 	 .ascii "+CREG:\000"
 4623      473A00
 4624 4539 00000000 	 .space 43
 4624      00000000 
 4624      00000000 
 4624      00000000 
 4624      00000000 
 4625 4564 2B434D45 	 .ascii "+CME ERROR\000"
 4625      20455252 
 4625      4F5200
 4626 456f 00000000 	 .space 39
 4626      00000000 
 4626      00000000 
 4626      00000000 
 4626      00000000 
 4627 4596 0000     	 .space 2
 4628 4598 2C010000 	 .word 300
 4629 459c 41542B43 	 .ascii "AT+CSQ\000"
 4629      535100
 4630 45a3 00000000 	 .space 1025
 4630      00000000 
 4630      00000000 
 4630      00000000 
 4630      00000000 
 4631 49a4 4F4B0D0A 	 .ascii "OK\015\012\000"
 4631      00
 4632 49a9 00000000 	 .space 45
 4632      00000000 
 4632      00000000 
 4632      00000000 
 4632      00000000 
 4633 49d6 2B435351 	 .ascii "+CSQ:\000"
 4633      3A00
 4634 49dc 00000000 	 .space 44
 4634      00000000 
 4634      00000000 
 4634      00000000 
 4634      00000000 
 4635 4a08 2B434D45 	 .ascii "+CME ERROR\000"
 4635      20455252 
 4635      4F5200
 4636 4a13 00000000 	 .space 39
 4636      00000000 
 4636      00000000 
 4636      00000000 
 4636      00000000 
 4637 4a3a 0000     	 .space 2
 4638 4a3c 2C010000 	 .word 300
 4639 4a40 41542B43 	 .ascii "AT+CCLK?\000"
 4639      434C4B3F 
 4639      00
 4640 4a49 00000000 	 .space 1023
 4640      00000000 
 4640      00000000 
 4640      00000000 
 4640      00000000 
 4641 4e48 4F4B0D0A 	 .ascii "OK\015\012\000"
 4641      00
 4642 4e4d 00000000 	 .space 45
 4642      00000000 
 4642      00000000 
 4642      00000000 
 4642      00000000 
 4643 4e7a 2B43434C 	 .ascii "+CCLK:\000"
 4643      4B3A00
 4644 4e81 00000000 	 .space 43
 4644      00000000 
 4644      00000000 
 4644      00000000 
 4644      00000000 
 4645 4eac 2B434D45 	 .ascii "+CME ERROR\000"
 4645      20455252 
 4645      4F5200
 4646 4eb7 00000000 	 .space 39
 4646      00000000 
 4646      00000000 
 4646      00000000 
 4646      00000000 
 4647 4ede 0000     	 .space 2
 4648 4ee0 2C010000 	 .word 300
 4649 4ee4 41542B51 	 .ascii "AT+QMTCFG=\000"
 4649      4D544346 
 4649      473D00
 4650 4eef 00000000 	 .space 1021
 4650      00000000 
 4650      00000000 
 4650      00000000 
 4650      00000000 
 4651 52ec 4F4B0D0A 	 .ascii "OK\015\012\000"
 4651      00
 4652 52f1 00000000 	 .space 45
 4652      00000000 
 4652      00000000 
 4652      00000000 
 4652      00000000 
 4653 531e 2B514D54 	 .ascii "+QMTCFG:\000"
 4653      4346473A 
 4653      00
 4654 5327 00000000 	 .space 41
 4654      00000000 
 4654      00000000 
 4654      00000000 
 4654      00000000 
 4655 5350 4552524F 	 .ascii "ERROR\000"
 4655      5200
 4656 5356 00000000 	 .space 44
 4656      00000000 
 4656      00000000 
 4656      00000000 
 4656      00000000 
 4657 5382 0000     	 .space 2
 4658 5384 E8030000 	 .word 1000
 4659 5388 41542B51 	 .ascii "AT+QSSLCFG=\000"
 4659      53534C43 
 4659      46473D00 
 4660 5394 00000000 	 .space 1020
 4660      00000000 
 4660      00000000 
 4660      00000000 
 4660      00000000 
 4661 5790 4F4B0D0A 	 .ascii "OK\015\012\000"
 4661      00
 4662 5795 00000000 	 .space 45
 4662      00000000 
 4662      00000000 
 4662      00000000 
 4662      00000000 
 4663 57c2 2B515353 	 .ascii "+QSSLCFG:\000"
 4663      4C434647 
 4663      3A00
 4664 57cc 00000000 	 .space 40
 4664      00000000 
 4664      00000000 
 4664      00000000 
 4664      00000000 
 4665 57f4 4552524F 	 .ascii "ERROR\000"
 4665      5200
 4666 57fa 00000000 	 .space 44
 4666      00000000 
 4666      00000000 
 4666      00000000 
 4666      00000000 
 4667 5826 0000     	 .space 2
 4668 5828 2C010000 	 .word 300
 4669 582c 41542B51 	 .ascii "AT+QMTOPEN=\000"
 4669      4D544F50 
 4669      454E3D00 
 4670 5838 00000000 	 .space 1020
 4670      00000000 
 4670      00000000 
 4670      00000000 
 4670      00000000 
 4671 5c34 58585858 	 .ascii "XXXX\000"
 4671      00
 4672 5c39 00000000 	 .space 45
 4672      00000000 
 4672      00000000 
 4672      00000000 
 4672      00000000 
 4673 5c66 2B514D54 	 .ascii "+QMTOPEN:\000"
 4673      4F50454E 
 4673      3A00
 4674 5c70 00000000 	 .space 40
 4674      00000000 
 4674      00000000 
 4674      00000000 
 4674      00000000 
 4675 5c98 4552524F 	 .ascii "ERROR\000"
 4675      5200
 4676 5c9e 00000000 	 .space 44
 4676      00000000 
 4676      00000000 
 4676      00000000 
 4676      00000000 
 4677 5cca 0000     	 .space 2
 4678 5ccc C0D40100 	 .word 120000
 4679 5cd0 41542B51 	 .ascii "AT+QMTCONN=\000"
 4679      4D54434F 
 4679      4E4E3D00 
 4680 5cdc 00000000 	 .space 1020
 4680      00000000 
 4680      00000000 
 4680      00000000 
 4680      00000000 
 4681 60d8 58585858 	 .ascii "XXXX\000"
 4681      00
 4682 60dd 00000000 	 .space 45
 4682      00000000 
 4682      00000000 
 4682      00000000 
 4682      00000000 
 4683 610a 2B514D54 	 .ascii "+QMTCONN:\000"
 4683      434F4E4E 
 4683      3A00
 4684 6114 00000000 	 .space 40
 4684      00000000 
 4684      00000000 
 4684      00000000 
 4684      00000000 
 4685 613c 4552524F 	 .ascii "ERROR\000"
 4685      5200
 4686 6142 00000000 	 .space 44
 4686      00000000 
 4686      00000000 
 4686      00000000 
 4686      00000000 
 4687 616e 0000     	 .space 2
 4688 6170 88130000 	 .word 5000
 4689 6174 41542B51 	 .ascii "AT+QMTPUBEX=\000"
 4689      4D545055 
 4689      4245583D 
 4689      00
 4690 6181 00000000 	 .space 1019
 4690      00000000 
 4690      00000000 
 4690      00000000 
 4690      00000000 
 4691 657c 3E00     	 .ascii ">\000"
 4692 657e 00000000 	 .space 48
 4692      00000000 
 4692      00000000 
 4692      00000000 
 4692      00000000 
 4693 65ae 2B514D54 	 .ascii "+QMTPUBEX:\000"
 4693      50554245 
 4693      583A00
 4694 65b9 00000000 	 .space 39
 4694      00000000 
 4694      00000000 
 4694      00000000 
 4694      00000000 
 4695 65e0 4552524F 	 .ascii "ERROR\000"
 4695      5200
 4696 65e6 00000000 	 .space 44
 4696      00000000 
 4696      00000000 
 4696      00000000 
 4696      00000000 
 4697 6612 0000     	 .space 2
 4698 6614 983A0000 	 .word 15000
 4699 6618 00       	 .ascii "\000"
 4700 6619 00000000 	 .space 1031
 4700      00000000 
 4700      00000000 
 4700      00000000 
 4700      00000000 
 4701 6a20 58585858 	 .ascii "XXXX\000"
 4701      00
 4702 6a25 00000000 	 .space 45
 4702      00000000 
 4702      00000000 
 4702      00000000 
 4702      00000000 
 4703 6a52 2B514D54 	 .ascii "+QMTPUBEX:\000"
 4703      50554245 
 4703      583A00
 4704 6a5d 00000000 	 .space 39
 4704      00000000 
 4704      00000000 
 4704      00000000 
 4704      00000000 
 4705 6a84 4552524F 	 .ascii "ERROR\000"
 4705      5200
 4706 6a8a 00000000 	 .space 44
 4706      00000000 
 4706      00000000 
 4706      00000000 
 4706      00000000 
 4707 6ab6 0000     	 .space 2
 4708 6ab8 983A0000 	 .word 15000
 4709 6abc 41542B43 	 .ascii "AT+CFUN=\000"
 4709      46554E3D 
 4709      00
 4710 6ac5 00000000 	 .space 1023
 4710      00000000 
 4710      00000000 
 4710      00000000 
 4710      00000000 
 4711 6ec4 4F4B0D0A 	 .ascii "OK\015\012\000"
 4711      00
 4712 6ec9 00000000 	 .space 45
 4712      00000000 
 4712      00000000 
 4712      00000000 
 4712      00000000 
 4713 6ef6 0000     	 .ascii "\000\000"
 4714 6ef8 00000000 	 .space 48
 4714      00000000 
 4714      00000000 
 4714      00000000 
 4714      00000000 
 4715 6f28 2B434D45 	 .ascii "+CME ERROR\000"
 4715      20455252 
 4715      4F5200
 4716 6f33 00000000 	 .space 39
 4716      00000000 
 4716      00000000 
 4716      00000000 
 4716      00000000 
 4717 6f5a 0000     	 .space 2
 4718 6f5c 983A0000 	 .word 15000
 4719 6f60 41542B51 	 .ascii "AT+QMTSUB=\000"
 4719      4D545355 
 4719      423D00
 4720 6f6b 00000000 	 .space 1021
 4720      00000000 
 4720      00000000 
 4720      00000000 
 4720      00000000 
 4721 7368 58585858 	 .ascii "XXXX\000"
 4721      00
 4722 736d 00000000 	 .space 45
 4722      00000000 
 4722      00000000 
 4722      00000000 
 4722      00000000 
 4723 739a 2B514D54 	 .ascii "+QMTSUB:\000"
 4723      5355423A 
 4723      00
 4724 73a3 00000000 	 .space 41
 4724      00000000 
 4724      00000000 
 4724      00000000 
 4724      00000000 
 4725 73cc 4552524F 	 .ascii "ERROR\000"
 4725      5200
 4726 73d2 00000000 	 .space 44
 4726      00000000 
 4726      00000000 
 4726      00000000 
 4726      00000000 
 4727 73fe 0000     	 .space 2
 4728 7400 983A0000 	 .word 15000
 4729 7404 41542B51 	 .ascii "AT+QMTUNS=\000"
 4729      4D54554E 
 4729      533D00
 4730 740f 00000000 	 .space 1021
 4730      00000000 
 4730      00000000 
 4730      00000000 
 4730      00000000 
 4731 780c 4F4B0D0A 	 .ascii "OK\015\012\000"
 4731      00
 4732 7811 00000000 	 .space 45
 4732      00000000 
 4732      00000000 
 4732      00000000 
 4732      00000000 
 4733 783e 2B514D54 	 .ascii "+QMTUNS:\000"
 4733      554E533A 
 4733      00
 4734 7847 00000000 	 .space 41
 4734      00000000 
 4734      00000000 
 4734      00000000 
 4734      00000000 
 4735 7870 4552524F 	 .ascii "ERROR\000"
 4735      5200
 4736 7876 00000000 	 .space 44
 4736      00000000 
 4736      00000000 
 4736      00000000 
 4736      00000000 
 4737 78a2 0000     	 .space 2
 4738 78a4 983A0000 	 .word 15000
 4739 78a8 41542B51 	 .ascii "AT+QFUPL=\000"
 4739      4655504C 
 4739      3D00
 4740 78b2 00000000 	 .space 1022
 4740      00000000 
 4740      00000000 
 4740      00000000 
 4740      00000000 
 4741 7cb0 434F4E4E 	 .ascii "CONNECT\000"
 4741      45435400 
 4742 7cb8 00000000 	 .space 42
 4742      00000000 
 4742      00000000 
 4742      00000000 
 4742      00000000 
 4743 7ce2 2B514655 	 .ascii "+QFUPL:\000"
 4743      504C3A00 
 4744 7cea 00000000 	 .space 42
 4744      00000000 
 4744      00000000 
 4744      00000000 
 4744      00000000 
 4745 7d14 2B434D45 	 .ascii "+CME ERROR\000"
 4745      20455252 
 4745      4F5200
 4746 7d1f 00000000 	 .space 39
 4746      00000000 
 4746      00000000 
 4746      00000000 
 4746      00000000 
 4747 7d46 0000     	 .space 2
 4748 7d48 30750000 	 .word 30000
 4749 7d4c 00       	 .ascii "\000"
 4750 7d4d 00000000 	 .space 1031
 4750      00000000 
 4750      00000000 
 4750      00000000 
 4750      00000000 
 4751 8154 4F4B0D0A 	 .ascii "OK\015\012\000"
 4751      00
 4752 8159 00000000 	 .space 45
 4752      00000000 
 4752      00000000 
 4752      00000000 
 4752      00000000 
 4753 8186 4100     	 .ascii "A\000"
 4754 8188 00000000 	 .space 48
 4754      00000000 
 4754      00000000 
 4754      00000000 
 4754      00000000 
 4755 81b8 2B434D45 	 .ascii "+CME ERROR\000"
 4755      20455252 
 4755      4F5200
 4756 81c3 00000000 	 .space 39
 4756      00000000 
 4756      00000000 
 4756      00000000 
 4756      00000000 
 4757 81ea 0000     	 .space 2
 4758 81ec 30750000 	 .word 30000
 4759 81f0 41542B51 	 .ascii "AT+QFDEL=\000"
 4759      4644454C 
 4759      3D00
 4760 81fa 00000000 	 .space 1022
 4760      00000000 
 4760      00000000 
 4760      00000000 
 4760      00000000 
 4761 85f8 4F4B0D0A 	 .ascii "OK\015\012\000"
 4761      00
 4762 85fd 00000000 	 .space 45
 4762      00000000 
 4762      00000000 
 4762      00000000 
 4762      00000000 
 4763 862a 0000     	 .ascii "\000\000"
 4764 862c 00000000 	 .space 48
 4764      00000000 
 4764      00000000 
 4764      00000000 
 4764      00000000 
 4765 865c 2B434D45 	 .ascii "+CME ERROR\000"
 4765      20455252 
 4765      4F5200
 4766 8667 00000000 	 .space 39
 4766      00000000 
 4766      00000000 
 4766      00000000 
 4766      00000000 
 4767 868e 0000     	 .space 2
 4768 8690 2C010000 	 .word 300
 4769 8694 41542B51 	 .ascii "AT+QMTDISC=\000"
 4769      4D544449 
 4769      53433D00 
 4770 86a0 00000000 	 .space 1020
 4770      00000000 
 4770      00000000 
 4770      00000000 
 4770      00000000 
 4771 8a9c 4F4B0D0A 	 .ascii "OK\015\012\000"
 4771      00
 4772 8aa1 00000000 	 .space 45
 4772      00000000 
 4772      00000000 
 4772      00000000 
 4772      00000000 
 4773 8ace 2B514D54 	 .ascii "+QMTDISC:\000"
 4773      44495343 
 4773      3A00
 4774 8ad8 00000000 	 .space 40
 4774      00000000 
 4774      00000000 
 4774      00000000 
 4774      00000000 
 4775 8b00 4552524F 	 .ascii "ERROR\000"
 4775      5200
 4776 8b06 00000000 	 .space 44
 4776      00000000 
 4776      00000000 
 4776      00000000 
 4776      00000000 
 4777 8b32 0000     	 .space 2
 4778 8b34 30750000 	 .word 30000
 4779 8b38 41542B51 	 .ascii "AT+QMTCLOSE=\000"
 4779      4D54434C 
 4779      4F53453D 
 4779      00
 4780 8b45 00000000 	 .space 1019
 4780      00000000 
 4780      00000000 
 4780      00000000 
 4780      00000000 
 4781 8f40 58585858 	 .ascii "XXXX\000"
 4781      00
 4782 8f45 00000000 	 .space 45
 4782      00000000 
 4782      00000000 
 4782      00000000 
 4782      00000000 
 4783 8f72 2B514D54 	 .ascii "+QMTCLOSE:\000"
 4783      434C4F53 
 4783      453A00
 4784 8f7d 00000000 	 .space 39
 4784      00000000 
 4784      00000000 
 4784      00000000 
 4784      00000000 
 4785 8fa4 4552524F 	 .ascii "ERROR\000"
 4785      5200
 4786 8faa 00000000 	 .space 44
 4786      00000000 
 4786      00000000 
 4786      00000000 
 4786      00000000 
 4787 8fd6 0000     	 .space 2
 4788 8fd8 30750000 	 .word 30000
 4789 8fdc 41542B51 	 .ascii "AT+QGPSCFG=\000"
 4789      47505343 
 4789      46473D00 
 4790 8fe8 00000000 	 .space 1020
 4790      00000000 
 4790      00000000 
 4790      00000000 
 4790      00000000 
 4791 93e4 4F4B0D0A 	 .ascii "OK\015\012\000"
 4791      00
 4792 93e9 00000000 	 .space 45
 4792      00000000 
 4792      00000000 
 4792      00000000 
 4792      00000000 
 4793 9416 2B514750 	 .ascii "+QGPSCFG:\000"
 4793      53434647 
 4793      3A00
 4794 9420 00000000 	 .space 40
 4794      00000000 
 4794      00000000 
 4794      00000000 
 4794      00000000 
 4795 9448 4552524F 	 .ascii "ERROR\000"
 4795      5200
 4796 944e 00000000 	 .space 44
 4796      00000000 
 4796      00000000 
 4796      00000000 
 4796      00000000 
 4797 947a 0000     	 .space 2
 4798 947c 2C010000 	 .word 300
 4799 9480 41542B51 	 .ascii "AT+QGPS=1\000"
 4799      4750533D 
 4799      3100
 4800 948a 00000000 	 .space 1022
 4800      00000000 
 4800      00000000 
 4800      00000000 
 4800      00000000 
 4801 9888 4F4B0D0A 	 .ascii "OK\015\012\000"
 4801      00
 4802 988d 00000000 	 .space 45
 4802      00000000 
 4802      00000000 
 4802      00000000 
 4802      00000000 
 4803 98ba 0000     	 .ascii "\000\000"
 4804 98bc 00000000 	 .space 48
 4804      00000000 
 4804      00000000 
 4804      00000000 
 4804      00000000 
 4805 98ec 4552524F 	 .ascii "ERROR\000"
 4805      5200
 4806 98f2 00000000 	 .space 44
 4806      00000000 
 4806      00000000 
 4806      00000000 
 4806      00000000 
 4807 991e 0000     	 .space 2
 4808 9920 2C010000 	 .word 300
 4809 9924 41542B51 	 .ascii "AT+QGPSLOC=1\000"
 4809      4750534C 
 4809      4F433D31 
 4809      00
 4810 9931 00000000 	 .space 1019
 4810      00000000 
 4810      00000000 
 4810      00000000 
 4810      00000000 
 4811 9d2c 4F4B0D0A 	 .ascii "OK\015\012\000"
 4811      00
 4812 9d31 00000000 	 .space 45
 4812      00000000 
 4812      00000000 
 4812      00000000 
 4812      00000000 
 4813 9d5e 2B514750 	 .ascii "+QGPSLOC:\000"
 4813      534C4F43 
 4813      3A00
 4814 9d68 00000000 	 .space 40
 4814      00000000 
 4814      00000000 
 4814      00000000 
 4814      00000000 
 4815 9d90 2B434D45 	 .ascii "+CME ERROR\000"
 4815      20455252 
 4815      4F5200
 4816 9d9b 00000000 	 .space 39
 4816      00000000 
 4816      00000000 
 4816      00000000 
 4816      00000000 
 4817 9dc2 0000     	 .space 2
 4818 9dc4 2C010000 	 .word 300
 4819              	 .section .text.delay,"ax",%progbits
 4820              	 .align 2
 4821              	 .thumb
 4822              	 .thumb_func
 4824              	delay:
 4825              	.LFB605:
 4826              	 .file 3 "../4g_module/mdm_handler.c"
   1:../4g_module/mdm_handler.c **** /*
   2:../4g_module/mdm_handler.c ****  * mdm_handler.c
   3:../4g_module/mdm_handler.c ****  *
   4:../4g_module/mdm_handler.c ****  *  Created on: 14-Apr-2024
   5:../4g_module/mdm_handler.c ****  *      Author: Kirankumar_Chincholi
   6:../4g_module/mdm_handler.c ****  */
   7:../4g_module/mdm_handler.c **** 
   8:../4g_module/mdm_handler.c **** #include <4g_module/at_handler.h>
   9:../4g_module/mdm_handler.c **** #include <4g_module/mdm_handler.h>
  10:../4g_module/mdm_handler.c **** #include <4g_module/ssl_cert_keys.h>
  11:../4g_module/mdm_handler.c **** #include <DIGITAL_IO/digital_io.h>
  12:../4g_module/mdm_handler.c **** #include <DIGITAL_IO/digital_io_extern.h>
  13:../4g_module/mdm_handler.c **** #include <stdlib.h>
  14:../4g_module/mdm_handler.c **** #include "DAVE.h"
  15:../4g_module/mdm_handler.c **** #include "at_handler.h"
  16:../4g_module/mdm_handler.c **** #include "mdm_handler.h"
  17:../4g_module/mdm_handler.c **** #include "timer_manager/timer_manager.h"
  18:../4g_module/mdm_handler.c **** #include "pb_encode.h"
  19:../4g_module/mdm_handler.c **** #include "pb_common.h"
  20:../4g_module/mdm_handler.c **** #include "Vcu_Config.h"
  21:../4g_module/mdm_handler.c **** #include "V26_10sec_fleet.pb.h"
  22:../4g_module/mdm_handler.c **** #include "sd_card.h"
  23:../4g_module/mdm_handler.c **** #include "GPS.h"
  24:../4g_module/mdm_handler.c **** 
  25:../4g_module/mdm_handler.c **** #define NEW_LINE					"\r\n"
  26:../4g_module/mdm_handler.c **** #define OK_RSP						"OK\r\n"
  27:../4g_module/mdm_handler.c **** #define NULL_STR					"\0"
  28:../4g_module/mdm_handler.c **** #define ERROR_STR					"ERROR"
  29:../4g_module/mdm_handler.c **** #define CME_ERROR					"+CME ERROR"
  30:../4g_module/mdm_handler.c **** #define CMS_ERROR					"+CMS ERROR"
  31:../4g_module/mdm_handler.c **** #define QMTOPEN						"+QMTOPEN:"
  32:../4g_module/mdm_handler.c **** #define QMTCONN						"+QMTCONN:"
  33:../4g_module/mdm_handler.c **** #define QMTPUBEX					"+QMTPUBEX:"
  34:../4g_module/mdm_handler.c **** #define QMTDISC						"+QMTDISC:"
  35:../4g_module/mdm_handler.c **** #define	QMTSUB						"+QMTSUB:"
  36:../4g_module/mdm_handler.c **** #define QMTSTAT						"+QMTSTAT:"
  37:../4g_module/mdm_handler.c **** #define QMTRECV						"+QMTRECV:"
  38:../4g_module/mdm_handler.c **** #define QFUPL						"+QFUPL:"
  39:../4g_module/mdm_handler.c **** #define PWR_DWN						"POWERED DOWN\r\n"
  40:../4g_module/mdm_handler.c **** #define READY						"RDY\r\n"
  41:../4g_module/mdm_handler.c **** #define QMSIMSTATE					"+QSIMSTAT:"
  42:../4g_module/mdm_handler.c **** #define PRODCUT_NAME				"Quectel\r\n"
  43:../4g_module/mdm_handler.c **** #define SSL_MODE					"\"SSL\",0,1,2\r\n"
  44:../4g_module/mdm_handler.c **** #define CA_CERT_PATH				"\"cacert\",2,\"cacert.pem\"\r\n"
  45:../4g_module/mdm_handler.c **** #define CC_CERT_PATH				"\"clientcert\",2,\"clientcert.pem\"\r\n"
  46:../4g_module/mdm_handler.c **** #define CK_CERT_PATH				"\"clientkey\",2,\"clientkey.pem\"\r\n"
  47:../4g_module/mdm_handler.c **** #define SSL_AUTH					"\"seclevel\",2,2\r\n"
  48:../4g_module/mdm_handler.c **** #define SSL_VERSION					"\"sslversion\",2,4\r\n"
  49:../4g_module/mdm_handler.c **** #define SSL_CIPHER_SUITE			"\"ciphersuite\",2,0xFFFF\r\n"
  50:../4g_module/mdm_handler.c **** #define SSL_IGNORE_LOCAL_TIME		"\"ignorelocaltime\",2,1\r\n"
  51:../4g_module/mdm_handler.c **** #define MQTT_OPEN_HOST_PORT			"\"ay7oqexbk25sl-ats.iot.ap-south-1.amazonaws.com\",8883\r\n"
  52:../4g_module/mdm_handler.c **** #define MQTT_CONNECT_CLINT_ID		"smartKit"
  53:../4g_module/mdm_handler.c **** #define MQTT_PUBLISH_PARA			"0,1,1,0,\"Test\",9\r\n"
  54:../4g_module/mdm_handler.c **** #define MQTT_PUBLISH_TOPIC			"\"/Gev3/fleet\""
  55:../4g_module/mdm_handler.c **** #define MQTT_CONNECTED_MSG			"Connected"
  56:../4g_module/mdm_handler.c **** #define MQTT_SUB_TOPIC				"\"SubTest\""
  57:../4g_module/mdm_handler.c **** #define MQTT_SSL_CA_FILENAME		"\"cacert.pem\""
  58:../4g_module/mdm_handler.c **** #define MQTT_SSL_CC_FILENAME		"\"clientcert.pem\""
  59:../4g_module/mdm_handler.c **** #define MQTT_SSL_CK_FILENAME		"\"clientkey.pem\""
  60:../4g_module/mdm_handler.c **** #define MQTT_PUBLISH_QOS			0
  61:../4g_module/mdm_handler.c **** #define MQTT_SUB_QOS				0
  62:../4g_module/mdm_handler.c **** 
  63:../4g_module/mdm_handler.c **** #define TIMEOUT_300MS				300
  64:../4g_module/mdm_handler.c **** #define TIMEOUT_1S					1000
  65:../4g_module/mdm_handler.c **** #define TIMEOUT_3S					3000
  66:../4g_module/mdm_handler.c **** #define TIMEOUT_5S					5000
  67:../4g_module/mdm_handler.c **** #define TIMEOUT_8S					8000
  68:../4g_module/mdm_handler.c **** #define TIMEOUT_10S					10000
  69:../4g_module/mdm_handler.c **** #define TIMEOUT_15s					15000
  70:../4g_module/mdm_handler.c **** #define TIMEOUT_30s					30000
  71:../4g_module/mdm_handler.c **** #define TIMEOUT_180S				180000
  72:../4g_module/mdm_handler.c **** #define TIMEOUT_120S				120000
  73:../4g_module/mdm_handler.c **** 
  74:../4g_module/mdm_handler.c **** #define AT_RESP_MAX_BUFFER_SIZE		64
  75:../4g_module/mdm_handler.c **** #define SEND_AT_CMD_BUFF			1032
  76:../4g_module/mdm_handler.c **** #define CMD_BUFF					1536
  77:../4g_module/mdm_handler.c **** #define AT_CMD_RETYR_MAX_CNT		3
  78:../4g_module/mdm_handler.c **** #define PWR_DOWN_SIZE				16
  79:../4g_module/mdm_handler.c **** #define RDY_SIZE					7
  80:../4g_module/mdm_handler.c **** #define QSIMSTATE_SIZE				22
  81:../4g_module/mdm_handler.c **** #define PRO_REVISION_SIZE			19
  82:../4g_module/mdm_handler.c **** #define IMEI_SIZE					15
  83:../4g_module/mdm_handler.c **** #define CCID_SIZE					20
  84:../4g_module/mdm_handler.c **** #define PHONE_SIZE					13
  85:../4g_module/mdm_handler.c **** #define TIME_SIZE					20
  86:../4g_module/mdm_handler.c **** #define OPERATOR_SIZE				20
  87:../4g_module/mdm_handler.c **** 
  88:../4g_module/mdm_handler.c **** extern vcu_fleet_fleet_10_sec TD1;
  89:../4g_module/mdm_handler.c **** extern uint8_t Eventbuffer_4Gcomm[512];
  90:../4g_module/mdm_handler.c **** static uint8_t gu8_signalQuality = 0;
  91:../4g_module/mdm_handler.c **** static uint8_t gu8arr_respBuffer[AT_RESP_MAX_BUFFER_SIZE];
  92:../4g_module/mdm_handler.c **** static uint8_t gu8arr_productRevision[PRO_REVISION_SIZE];
  93:../4g_module/mdm_handler.c **** static uint8_t gu8arr_IMEINum[IMEI_SIZE];
  94:../4g_module/mdm_handler.c **** static uint8_t gu8arr_CCIDNum[CCID_SIZE];
  95:../4g_module/mdm_handler.c **** static uint8_t gu8arr_phoneNum[PHONE_SIZE];
  96:../4g_module/mdm_handler.c **** static uint8_t gu8_operatorName[OPERATOR_SIZE];
  97:../4g_module/mdm_handler.c **** static uint8_t gu8_dataTime[TIME_SIZE];
  98:../4g_module/mdm_handler.c **** uint8_t gu8arr_sendMsgBuff[20];
  99:../4g_module/mdm_handler.c **** static uint8_t sgu8_respCount = 0;
 100:../4g_module/mdm_handler.c **** static uint8_t sgu8_mqttClientId = 0;
 101:../4g_module/mdm_handler.c **** static uint16_t sgu16_cmeError = 0;
 102:../4g_module/mdm_handler.c **** static uint16_t sgu16_cmsError = 0;
 103:../4g_module/mdm_handler.c **** static en_4gModuleRunState_t sen_4gRunState = E_SET_URC_PORT_STATE;
 104:../4g_module/mdm_handler.c **** static en_sendCmdGetRspState_t sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 105:../4g_module/mdm_handler.c **** static en_simStatusState_t sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 106:../4g_module/mdm_handler.c **** static en_openMqttState_t sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 107:../4g_module/mdm_handler.c **** static en_publishDataState_t sen_publishDataState = E_PUBLISH_CMD_STATE;
 108:../4g_module/mdm_handler.c **** static en_modemResetState_t sen_modemResetState = E_RST_DISABLE_FUNCTION;
 109:../4g_module/mdm_handler.c **** static en_10sPacektPubState_t sen_10sPacektPubState = E_PREPARE_PACKET_STATE;
 110:../4g_module/mdm_handler.c **** static en_sslFileUploadState_t sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
 111:../4g_module/mdm_handler.c **** static en_gpsProcessState_t sen_gpsProcessState = E_EXTRACT_GPS_DATA_STATE;
 112:../4g_module/mdm_handler.c **** static en_4gProcessState_t sen_4gProcessState = E_GPS_PROCESS_STATE;
 113:../4g_module/mdm_handler.c **** 
 114:../4g_module/mdm_handler.c **** static bool sgb_packetFlag = false;
 115:../4g_module/mdm_handler.c **** static bool sgb_flag4g = false;
 116:../4g_module/mdm_handler.c **** static bool sgb_flagGps = false;
 117:../4g_module/mdm_handler.c **** 
 118:../4g_module/mdm_handler.c **** /* for error set and status */
 119:../4g_module/mdm_handler.c **** st_deviceStatus_t gst_deviceStatus = {
 120:../4g_module/mdm_handler.c **** 		.mb_isSimInserted = false,
 121:../4g_module/mdm_handler.c **** 		.mb_ismodemPwrDwn = true,
 122:../4g_module/mdm_handler.c **** 		.men_networkRegStatus = E_REG_NONE,
 123:../4g_module/mdm_handler.c **** 		.men_mqttOpenErrorCodes = E_MQTT_OPN_NONE,
 124:../4g_module/mdm_handler.c **** 		.men_mqttCloseErrorCodes = E_MQTT_CLOSE_NONE,
 125:../4g_module/mdm_handler.c **** 		.men_mqttConnectErrorCodes = E_MQTT_CON_NONE,
 126:../4g_module/mdm_handler.c **** 		.men_mqttDisconErrorCodes = E_MQTT_DISCON_NONE,
 127:../4g_module/mdm_handler.c **** 		.men_mqttPublishErrorCode = E_PUB_NONE,
 128:../4g_module/mdm_handler.c **** 		.men_mqttSubErrorCode = E_SUB_NONE
 129:../4g_module/mdm_handler.c **** };
 130:../4g_module/mdm_handler.c **** 
 131:../4g_module/mdm_handler.c **** /* command table */
 132:../4g_module/mdm_handler.c **** st_ATCmdTable_t gcst_ATCmdTable[E_IDX_MAX] = {
 133:../4g_module/mdm_handler.c **** 		  //Send command		Response string		OtherResponseString		Error String	Response timeout
 134:../4g_module/mdm_handler.c **** //Power ON/OFF
 135:../4g_module/mdm_handler.c **** 		{ 	"DUMMY_DATA", 				READY, 				NULL_STR, 				NULL_STR, 		TIMEOUT_300MS 	},	//	E_IDX_POWER_ON
 136:../4g_module/mdm_handler.c **** 		{ 	"AT+QPOWD=1", 				OK_RSP, 			PWR_DWN, 				NULL_STR, 		TIMEOUT_300MS 	},	//	E_IDX_POWER_OFF
 137:../4g_module/mdm_handler.c **** 
 138:../4g_module/mdm_handler.c **** //Port config
 139:../4g_module/mdm_handler.c **** 		{	"AT+QURCCFG=\"urcport\",", 	OK_RSP,				NULL_STR,				ERROR_STR,		TIMEOUT_300MS	},	//	E_IDX_SET_U
 140:../4g_module/mdm_handler.c **** 
 141:../4g_module/mdm_handler.c **** //Echo Off
 142:../4g_module/mdm_handler.c **** 		{ 	"ATE0", 					OK_RSP, 			NULL_STR, 				NULL_STR, 		TIMEOUT_300MS 	},	//	E_IDX_ECHO_OFF
 143:../4g_module/mdm_handler.c **** 
 144:../4g_module/mdm_handler.c **** //set flow control
 145:../4g_module/mdm_handler.c **** 		{ 	"AT+IFC=", 					OK_RSP, 			"+IFC:", 				NULL_STR, 		TIMEOUT_300MS 	},	//	E_IDX_HW_FLWCTRL
 146:../4g_module/mdm_handler.c **** 
 147:../4g_module/mdm_handler.c **** //Product info
 148:../4g_module/mdm_handler.c **** 		{ 	"ATI", 						OK_RSP, 			PRODCUT_NAME, 			NULL_STR, 		TIMEOUT_300MS 	},	//	E_EXTRACT_MODULE_INF
 149:../4g_module/mdm_handler.c **** 
 150:../4g_module/mdm_handler.c **** //SIM status
 151:../4g_module/mdm_handler.c **** 		{ 	"AT+QSIMDET=", 				OK_RSP, 			"+QSIMDET:", 			ERROR_STR, 		TIMEOUT_300MS 	},	//	E_IDX_ENABLE_S
 152:../4g_module/mdm_handler.c **** 		{ 	"AT+QSIMSTAT=", 			OK_RSP, 			NULL_STR, 				ERROR_STR, 		TIMEOUT_300MS 	},	//	E_IDX_ENABLE_SIM
 153:../4g_module/mdm_handler.c **** 		{ 	"AT+QSIMSTAT?", 			OK_RSP, 			"+QSIMSTAT:", 			ERROR_STR, 		TIMEOUT_300MS 	},	//	E_IDX_CHECK_S
 154:../4g_module/mdm_handler.c **** 		{ 	"AT+CPIN?", 				OK_RSP, 			"+CPIN:", 				NULL_STR, 		TIMEOUT_5S 		},	//	E_IDX_CPIN_CHECK
 155:../4g_module/mdm_handler.c **** 		{ 	"AT+GSN", 					OK_RSP, 			NULL_STR, 				NULL_STR, 		TIMEOUT_300MS 	},	//	E_IDX_GET_IMEI
 156:../4g_module/mdm_handler.c **** 		{ 	"AT+QCCID", 				OK_RSP, 			"+QCCID:", 				ERROR_STR,	 	TIMEOUT_300MS 	},	//	E_IDX_GET_CCID
 157:../4g_module/mdm_handler.c **** 		{ 	"AT+CNUM", 					OK_RSP, 			"+CNUM:", 				ERROR_STR, 		TIMEOUT_300MS 	},	//	E_IDX_GET_NUM
 158:../4g_module/mdm_handler.c **** 		{ 	"AT+COPS?", 				OK_RSP, 			"+COPS:", 				CME_ERROR, 		TIMEOUT_180S 	},	//	E_IDX_GET_OPERATOR
 159:../4g_module/mdm_handler.c **** 		{ 	"AT+CREG?", 				OK_RSP, 			"+CREG:", 				CME_ERROR, 		TIMEOUT_300MS 	},	//	E_IDX_CREG
 160:../4g_module/mdm_handler.c **** 		{ 	"AT+CSQ", 					OK_RSP, 			"+CSQ:", 				CME_ERROR, 		TIMEOUT_300MS 	},	//	E_IDX_SIGNAL_QLTY
 161:../4g_module/mdm_handler.c **** 		{ 	"AT+CCLK?", 				OK_RSP, 			"+CCLK:", 				CME_ERROR, 		TIMEOUT_300MS 	},	//	E_IDX_CCLK
 162:../4g_module/mdm_handler.c **** 
 163:../4g_module/mdm_handler.c **** //MQTT
 164:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTCFG=", 				OK_RSP, 			"+QMTCFG:", 			ERROR_STR, 		TIMEOUT_1S 		},	//	E_IDX_MQTT_CFG
 165:../4g_module/mdm_handler.c **** 		{ 	"AT+QSSLCFG=", 				OK_RSP, 			"+QSSLCFG:", 			ERROR_STR, 		TIMEOUT_300MS 	},	//	E_IDX_MQTT_SSL
 166:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTOPEN=", 				"XXXX", 			"+QMTOPEN:", 			ERROR_STR, 		TIMEOUT_120S 	},	//	E_IDX_MQTT_OPEN
 167:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTCONN=", 				"XXXX", 			"+QMTCONN:", 			ERROR_STR, 		TIMEOUT_5S 		},	//	E_IDX_MQTT_CONNE
 168:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTPUBEX=", 			">", 				"+QMTPUBEX:", 			ERROR_STR, 		TIMEOUT_15s 	},	//	E_IDX_MQTT_PUBLIS
 169:../4g_module/mdm_handler.c **** 		{ 	"", 						"XXXX", 			"+QMTPUBEX:", 			ERROR_STR, 		TIMEOUT_15s 	},	//	E_IDX_MQTT_PUBLISH_DATA
 170:../4g_module/mdm_handler.c **** 		{ 	"AT+CFUN=", 				OK_RSP, 			NULL_STR, 				CME_ERROR, 		TIMEOUT_15s 	},	//	E_IDX_MQTT_DISBALE_EN
 171:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTSUB=", 				"XXXX", 			"+QMTSUB:", 			ERROR_STR, 		TIMEOUT_15s 	},	//	E_IDX_MQTT_SUBSCRI
 172:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTUNS=", 				OK_RSP, 			"+QMTUNS:", 			ERROR_STR, 		TIMEOUT_15s 	},	//	E_IDX_MQTT_UNSUBSC
 173:../4g_module/mdm_handler.c **** 		{	"AT+QFUPL=",				"CONNECT",			"+QFUPL:",				CME_ERROR,		TIMEOUT_30s		},	//	E_IDX_FILE_UPLOAD_CMD
 174:../4g_module/mdm_handler.c **** 		{	"",							OK_RSP,				"A",					CME_ERROR,		TIMEOUT_30s		},	//	E_IDX_UPLOAD_FILE_CONTENT
 175:../4g_module/mdm_handler.c **** 		{	"AT+QFDEL=",				OK_RSP,				NULL_STR,				CME_ERROR,		TIMEOUT_300MS	},	//	E_IDX_FILE_DELETE
 176:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTDISC=", 				OK_RSP, 			"+QMTDISC:", 			ERROR_STR, 		TIMEOUT_30s 	},	//	E_IDX_MQTT_DISCO
 177:../4g_module/mdm_handler.c **** 		{ 	"AT+QMTCLOSE=", 			"XXXX", 			"+QMTCLOSE:",	 		ERROR_STR, 		TIMEOUT_30s 	},	//	E_IDX_MQTT_CLOS
 178:../4g_module/mdm_handler.c **** //GPS
 179:../4g_module/mdm_handler.c **** 		{ 	"AT+QGPSCFG=", 				OK_RSP, 			"+QGPSCFG:", 			ERROR_STR, 		TIMEOUT_300MS 	},	// 	E_IDX_GPS_CFG
 180:../4g_module/mdm_handler.c **** 		{ 	"AT+QGPS=1", 				OK_RSP, 			NULL_STR, 				ERROR_STR, 		TIMEOUT_300MS 	},	// 	E_IDX_ENABLE_GNSS
 181:../4g_module/mdm_handler.c **** 		{ 	"AT+QGPSLOC=1", 			OK_RSP, 			"+QGPSLOC:", 			CME_ERROR, 		TIMEOUT_300MS 	} 	// 	E_IDX_GET_GPS
 182:../4g_module/mdm_handler.c **** };
 183:../4g_module/mdm_handler.c **** 
 184:../4g_module/mdm_handler.c **** /* Blocking delay function */
 185:../4g_module/mdm_handler.c **** static void delay(uint32_t delay_ms)
 186:../4g_module/mdm_handler.c **** {
 4827              	 .loc 3 186 0
 4828              	 .cfi_startproc
 4829              	 
 4830              	 
 4831 0000 80B5     	 push {r7,lr}
 4832              	.LCFI22:
 4833              	 .cfi_def_cfa_offset 8
 4834              	 .cfi_offset 7,-8
 4835              	 .cfi_offset 14,-4
 4836 0002 84B0     	 sub sp,sp,#16
 4837              	.LCFI23:
 4838              	 .cfi_def_cfa_offset 24
 4839 0004 00AF     	 add r7,sp,#0
 4840              	.LCFI24:
 4841              	 .cfi_def_cfa_register 7
 4842 0006 7860     	 str r0,[r7,#4]
 187:../4g_module/mdm_handler.c **** 	uint32_t delay_cnt;
 188:../4g_module/mdm_handler.c **** 
 189:../4g_module/mdm_handler.c **** 	TIMER_ClearEvent(&TIMER_0);
 4843              	 .loc 3 189 0
 4844 0008 0F48     	 ldr r0,.L7
 4845 000a FFF7FEFF 	 bl TIMER_ClearEvent
 190:../4g_module/mdm_handler.c **** 
 191:../4g_module/mdm_handler.c **** 	delay_cnt = delay_ms * 100000;	//TIMER_DELAY_MUL_FACTOR;
 4846              	 .loc 3 191 0
 4847 000e 7B68     	 ldr r3,[r7,#4]
 4848 0010 0E4A     	 ldr r2,.L7+4
 4849 0012 02FB03F3 	 mul r3,r2,r3
 4850 0016 FB60     	 str r3,[r7,#12]
 192:../4g_module/mdm_handler.c **** 
 193:../4g_module/mdm_handler.c **** 	TIMER_SetTimeInterval(&TIMER_0, delay_cnt);
 4851              	 .loc 3 193 0
 4852 0018 0B48     	 ldr r0,.L7
 4853 001a F968     	 ldr r1,[r7,#12]
 4854 001c FFF7FEFF 	 bl TIMER_SetTimeInterval
 194:../4g_module/mdm_handler.c **** 
 195:../4g_module/mdm_handler.c **** 	TIMER_Start(&TIMER_0);
 4855              	 .loc 3 195 0
 4856 0020 0948     	 ldr r0,.L7
 4857 0022 FFF7FEFF 	 bl TIMER_Start
 196:../4g_module/mdm_handler.c **** 
 197:../4g_module/mdm_handler.c **** 	while (!TIMER_GetInterruptStatus(&TIMER_0))
 4858              	 .loc 3 197 0
 4859 0026 00BF     	 nop
 4860              	.L6:
 4861              	 .loc 3 197 0 is_stmt 0 discriminator 1
 4862 0028 0748     	 ldr r0,.L7
 4863 002a FFF7FEFF 	 bl TIMER_GetInterruptStatus
 4864 002e 0346     	 mov r3,r0
 4865 0030 83F00103 	 eor r3,r3,#1
 4866 0034 DBB2     	 uxtb r3,r3
 4867 0036 002B     	 cmp r3,#0
 4868 0038 F6D1     	 bne .L6
 198:../4g_module/mdm_handler.c **** 		;
 199:../4g_module/mdm_handler.c **** 
 200:../4g_module/mdm_handler.c **** 	TIMER_Stop(&TIMER_0);
 4869              	 .loc 3 200 0 is_stmt 1
 4870 003a 0348     	 ldr r0,.L7
 4871 003c FFF7FEFF 	 bl TIMER_Stop
 201:../4g_module/mdm_handler.c **** }
 4872              	 .loc 3 201 0
 4873 0040 1037     	 adds r7,r7,#16
 4874              	.LCFI25:
 4875              	 .cfi_def_cfa_offset 8
 4876 0042 BD46     	 mov sp,r7
 4877              	.LCFI26:
 4878              	 .cfi_def_cfa_register 13
 4879              	 
 4880 0044 80BD     	 pop {r7,pc}
 4881              	.L8:
 4882 0046 00BF     	 .align 2
 4883              	.L7:
 4884 0048 00000000 	 .word TIMER_0
 4885 004c A0860100 	 .word 100000
 4886              	 .cfi_endproc
 4887              	.LFE605:
 4889              	 .section .text.mod_enable4gModule,"ax",%progbits
 4890              	 .align 2
 4891              	 .global mod_enable4gModule
 4892              	 .thumb
 4893              	 .thumb_func
 4895              	mod_enable4gModule:
 4896              	.LFB606:
 202:../4g_module/mdm_handler.c **** 
 203:../4g_module/mdm_handler.c **** /**************************************************************************
 204:../4g_module/mdm_handler.c ****  * Function Name	:	mod_enable4gModule
 205:../4g_module/mdm_handler.c ****  *
 206:../4g_module/mdm_handler.c ****  * Description   	:	This function enables the Module
 207:../4g_module/mdm_handler.c ****  *
 208:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 209:../4g_module/mdm_handler.c ****  *
 210:../4g_module/mdm_handler.c ****  * Return values 	:	void
 211:../4g_module/mdm_handler.c ****  *
 212:../4g_module/mdm_handler.c ****  ****************************************************************************/
 213:../4g_module/mdm_handler.c **** void mod_enable4gModule(void)
 214:../4g_module/mdm_handler.c **** {
 4897              	 .loc 3 214 0
 4898              	 .cfi_startproc
 4899              	 
 4900              	 
 4901 0000 80B5     	 push {r7,lr}
 4902              	.LCFI27:
 4903              	 .cfi_def_cfa_offset 8
 4904              	 .cfi_offset 7,-8
 4905              	 .cfi_offset 14,-4
 4906 0002 00AF     	 add r7,sp,#0
 4907              	.LCFI28:
 4908              	 .cfi_def_cfa_register 7
 215:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputHigh(&MODULE_4G_EN_OUT_D);
 4909              	 .loc 3 215 0
 4910 0004 0A48     	 ldr r0,.L10
 4911 0006 FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 216:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 4912              	 .loc 3 216 0
 4913 000a 0A48     	 ldr r0,.L10+4
 4914 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 217:../4g_module/mdm_handler.c **** 	delay(3000);
 4915              	 .loc 3 217 0
 4916 0010 40F6B830 	 movw r0,#3000
 4917 0014 FFF7FEFF 	 bl delay
 218:../4g_module/mdm_handler.c **** 
 219:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 4918              	 .loc 3 219 0
 4919 0018 0648     	 ldr r0,.L10+4
 4920 001a FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 220:../4g_module/mdm_handler.c **** 	delay(3000);
 4921              	 .loc 3 220 0
 4922 001e 40F6B830 	 movw r0,#3000
 4923 0022 FFF7FEFF 	 bl delay
 221:../4g_module/mdm_handler.c **** 
 222:../4g_module/mdm_handler.c **** 	gb_isMqttConnected = false;
 4924              	 .loc 3 222 0
 4925 0026 044B     	 ldr r3,.L10+8
 4926 0028 0022     	 movs r2,#0
 4927 002a 1A70     	 strb r2,[r3]
 223:../4g_module/mdm_handler.c **** //	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
 224:../4g_module/mdm_handler.c **** }
 4928              	 .loc 3 224 0
 4929 002c 80BD     	 pop {r7,pc}
 4930              	.L11:
 4931 002e 00BF     	 .align 2
 4932              	.L10:
 4933 0030 00000000 	 .word MODULE_4G_EN_OUT_D
 4934 0034 00000000 	 .word DIGITAL_IO_PWRKEY
 4935 0038 00000000 	 .word gb_isMqttConnected
 4936              	 .cfi_endproc
 4937              	.LFE606:
 4939              	 .section .text.mod_disable4gModule,"ax",%progbits
 4940              	 .align 2
 4941              	 .global mod_disable4gModule
 4942              	 .thumb
 4943              	 .thumb_func
 4945              	mod_disable4gModule:
 4946              	.LFB607:
 225:../4g_module/mdm_handler.c **** 
 226:../4g_module/mdm_handler.c **** /**************************************************************************
 227:../4g_module/mdm_handler.c ****  * Function Name	:	mod_disable4gModule
 228:../4g_module/mdm_handler.c ****  *
 229:../4g_module/mdm_handler.c ****  * Description   	:	This function disable the Module
 230:../4g_module/mdm_handler.c ****  *
 231:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 232:../4g_module/mdm_handler.c ****  *
 233:../4g_module/mdm_handler.c ****  * Return values 	:	void
 234:../4g_module/mdm_handler.c ****  *
 235:../4g_module/mdm_handler.c ****  ****************************************************************************/
 236:../4g_module/mdm_handler.c **** void mod_disable4gModule(void)
 237:../4g_module/mdm_handler.c **** {
 4947              	 .loc 3 237 0
 4948              	 .cfi_startproc
 4949              	 
 4950              	 
 4951 0000 80B5     	 push {r7,lr}
 4952              	.LCFI29:
 4953              	 .cfi_def_cfa_offset 8
 4954              	 .cfi_offset 7,-8
 4955              	 .cfi_offset 14,-4
 4956 0002 00AF     	 add r7,sp,#0
 4957              	.LCFI30:
 4958              	 .cfi_def_cfa_register 7
 238:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputLow(&MODULE_4G_EN_OUT_D);
 4959              	 .loc 3 238 0
 4960 0004 0848     	 ldr r0,.L13
 4961 0006 FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 239:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 4962              	 .loc 3 239 0
 4963 000a 0848     	 ldr r0,.L13+4
 4964 000c FFF7FEFF 	 bl DIGITAL_IO_SetOutputHigh
 240:../4g_module/mdm_handler.c **** 	delay(3000);
 4965              	 .loc 3 240 0
 4966 0010 40F6B830 	 movw r0,#3000
 4967 0014 FFF7FEFF 	 bl delay
 241:../4g_module/mdm_handler.c **** 
 242:../4g_module/mdm_handler.c **** 	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 4968              	 .loc 3 242 0
 4969 0018 0448     	 ldr r0,.L13+4
 4970 001a FFF7FEFF 	 bl DIGITAL_IO_SetOutputLow
 243:../4g_module/mdm_handler.c **** 	delay(3000);
 4971              	 .loc 3 243 0
 4972 001e 40F6B830 	 movw r0,#3000
 4973 0022 FFF7FEFF 	 bl delay
 244:../4g_module/mdm_handler.c **** 
 245:../4g_module/mdm_handler.c **** //	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
 246:../4g_module/mdm_handler.c **** }
 4974              	 .loc 3 246 0
 4975 0026 80BD     	 pop {r7,pc}
 4976              	.L14:
 4977              	 .align 2
 4978              	.L13:
 4979 0028 00000000 	 .word MODULE_4G_EN_OUT_D
 4980 002c 00000000 	 .word DIGITAL_IO_PWRKEY
 4981              	 .cfi_endproc
 4982              	.LFE607:
 4984              	 .section .text.mod_open4gModPort,"ax",%progbits
 4985              	 .align 2
 4986              	 .global mod_open4gModPort
 4987              	 .thumb
 4988              	 .thumb_func
 4990              	mod_open4gModPort:
 4991              	.LFB608:
 247:../4g_module/mdm_handler.c **** 
 248:../4g_module/mdm_handler.c **** /**************************************************************************
 249:../4g_module/mdm_handler.c ****  * Function Name	:	mod_open4gModPort
 250:../4g_module/mdm_handler.c ****  *
 251:../4g_module/mdm_handler.c ****  * Description   	:	This function opens the module port
 252:../4g_module/mdm_handler.c ****  *
 253:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 254:../4g_module/mdm_handler.c ****  *
 255:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t
 256:../4g_module/mdm_handler.c ****  *
 257:../4g_module/mdm_handler.c ****  ****************************************************************************/
 258:../4g_module/mdm_handler.c **** en_responseRetCodes_t mod_open4gModPort(void)
 259:../4g_module/mdm_handler.c **** {
 4992              	 .loc 3 259 0
 4993              	 .cfi_startproc
 4994              	 
 4995              	 
 4996 0000 80B5     	 push {r7,lr}
 4997              	.LCFI31:
 4998              	 .cfi_def_cfa_offset 8
 4999              	 .cfi_offset 7,-8
 5000              	 .cfi_offset 14,-4
 5001 0002 82B0     	 sub sp,sp,#8
 5002              	.LCFI32:
 5003              	 .cfi_def_cfa_offset 16
 5004 0004 00AF     	 add r7,sp,#0
 5005              	.LCFI33:
 5006              	 .cfi_def_cfa_register 7
 260:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 5007              	 .loc 3 260 0
 5008 0006 0423     	 movs r3,#4
 5009 0008 FB71     	 strb r3,[r7,#7]
 261:../4g_module/mdm_handler.c **** 
 262:../4g_module/mdm_handler.c **** 	/* Initialize the UART port */
 263:../4g_module/mdm_handler.c **** 	len_retStatus = at_initInterface();
 5010              	 .loc 3 263 0
 5011 000a FFF7FEFF 	 bl at_initInterface
 5012 000e 0346     	 mov r3,r0
 5013 0010 FB71     	 strb r3,[r7,#7]
 264:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 265:../4g_module/mdm_handler.c **** 	{
 266:../4g_module/mdm_handler.c **** 		/* Do something after successful initialization */
 267:../4g_module/mdm_handler.c **** 	}
 268:../4g_module/mdm_handler.c **** 
 269:../4g_module/mdm_handler.c **** 	return len_retStatus;
 5014              	 .loc 3 269 0
 5015 0012 FB79     	 ldrb r3,[r7,#7]
 270:../4g_module/mdm_handler.c **** }
 5016              	 .loc 3 270 0
 5017 0014 1846     	 mov r0,r3
 5018 0016 0837     	 adds r7,r7,#8
 5019              	.LCFI34:
 5020              	 .cfi_def_cfa_offset 8
 5021 0018 BD46     	 mov sp,r7
 5022              	.LCFI35:
 5023              	 .cfi_def_cfa_register 13
 5024              	 
 5025 001a 80BD     	 pop {r7,pc}
 5026              	 .cfi_endproc
 5027              	.LFE608:
 5029              	 .section .rodata
 5030              	 .align 2
 5031              	.LC0:
 5032 0000 2B514D54 	 .ascii "+QMTSTAT:\000"
 5032      53544154 
 5032      3A00
 5033 000a 0000     	 .align 2
 5034              	.LC1:
 5035 000c 2B514D54 	 .ascii "+QMTRECV:\000"
 5035      52454356 
 5035      3A00
 5036 0016 0000     	 .align 2
 5037              	.LC2:
 5038 0018 51494E44 	 .ascii "QIND: SMS DONE\015\012\000"
 5038      3A20534D 
 5038      5320444F 
 5038      4E450D0A 
 5038      00
 5039 0029 000000   	 .align 2
 5040              	.LC3:
 5041 002c 5244590D 	 .ascii "RDY\015\012\000"
 5041      0A00
 5042 0032 0000     	 .align 2
 5043              	.LC4:
 5044 0034 504F5745 	 .ascii "POWERED DOWN\015\012\000"
 5044      52454420 
 5044      444F574E 
 5044      0D0A00
 5045              	 .section .text.mod_receiveRsp,"ax",%progbits
 5046              	 .align 2
 5047              	 .global mod_receiveRsp
 5048              	 .thumb
 5049              	 .thumb_func
 5051              	mod_receiveRsp:
 5052              	.LFB609:
 271:../4g_module/mdm_handler.c **** 
 272:../4g_module/mdm_handler.c **** /**************************************************************************
 273:../4g_module/mdm_handler.c ****  * Function Name	:	mod_receiveRsp
 274:../4g_module/mdm_handler.c ****  *
 275:../4g_module/mdm_handler.c ****  * Description   	:	This function reads data from port
 276:../4g_module/mdm_handler.c ****  *
 277:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 278:../4g_module/mdm_handler.c ****  *
 279:../4g_module/mdm_handler.c ****  * Return values 	:	void
 280:../4g_module/mdm_handler.c ****  *
 281:../4g_module/mdm_handler.c ****  ****************************************************************************/
 282:../4g_module/mdm_handler.c **** void mod_receiveRsp(void)
 283:../4g_module/mdm_handler.c **** {
 5053              	 .loc 3 283 0
 5054              	 .cfi_startproc
 5055              	 
 5056              	 
 5057 0000 80B5     	 push {r7,lr}
 5058              	.LCFI36:
 5059              	 .cfi_def_cfa_offset 8
 5060              	 .cfi_offset 7,-8
 5061              	 .cfi_offset 14,-4
 5062 0002 84B0     	 sub sp,sp,#16
 5063              	.LCFI37:
 5064              	 .cfi_def_cfa_offset 24
 5065 0004 00AF     	 add r7,sp,#0
 5066              	.LCFI38:
 5067              	 .cfi_def_cfa_register 7
 284:../4g_module/mdm_handler.c **** 	if (at_isRxBuffEmpty() != true)
 5068              	 .loc 3 284 0
 5069 0006 FFF7FEFF 	 bl at_isRxBuffEmpty
 5070 000a 0346     	 mov r3,r0
 5071 000c 83F00103 	 eor r3,r3,#1
 5072 0010 DBB2     	 uxtb r3,r3
 5073 0012 002B     	 cmp r3,#0
 5074 0014 00F0E880 	 beq .L17
 5075              	.LBB2:
 285:../4g_module/mdm_handler.c **** 	{
 286:../4g_module/mdm_handler.c **** 		uint8_t lu8_rcvdByte = 0;
 5076              	 .loc 3 286 0
 5077 0018 0023     	 movs r3,#0
 5078 001a FB73     	 strb r3,[r7,#15]
 287:../4g_module/mdm_handler.c **** 
 288:../4g_module/mdm_handler.c **** 		lu8_rcvdByte = at_readPort();
 5079              	 .loc 3 288 0
 5080 001c FFF7FEFF 	 bl at_readPort
 5081 0020 0346     	 mov r3,r0
 5082 0022 FB73     	 strb r3,[r7,#15]
 289:../4g_module/mdm_handler.c **** 		if (lu8_rcvdByte != 0)
 5083              	 .loc 3 289 0
 5084 0024 FB7B     	 ldrb r3,[r7,#15]
 5085 0026 002B     	 cmp r3,#0
 5086 0028 00F0DE80 	 beq .L17
 290:../4g_module/mdm_handler.c **** 		{
 291:../4g_module/mdm_handler.c **** 			gu8arr_respBuffer[sgu8_respCount++] = lu8_rcvdByte;
 5087              	 .loc 3 291 0
 5088 002c 704B     	 ldr r3,.L32
 5089 002e 1B78     	 ldrb r3,[r3]
 5090 0030 5A1C     	 adds r2,r3,#1
 5091 0032 D1B2     	 uxtb r1,r2
 5092 0034 6E4A     	 ldr r2,.L32
 5093 0036 1170     	 strb r1,[r2]
 5094 0038 1946     	 mov r1,r3
 5095 003a 6E4A     	 ldr r2,.L32+4
 5096 003c FB7B     	 ldrb r3,[r7,#15]
 5097 003e 5354     	 strb r3,[r2,r1]
 292:../4g_module/mdm_handler.c **** 			lu8_rcvdByte = 0;
 5098              	 .loc 3 292 0
 5099 0040 0023     	 movs r3,#0
 5100 0042 FB73     	 strb r3,[r7,#15]
 293:../4g_module/mdm_handler.c **** 
 294:../4g_module/mdm_handler.c **** 			if (NULL != strstr((const char*) gu8arr_respBuffer, (const char*) QMTSTAT))
 5101              	 .loc 3 294 0
 5102 0044 6B48     	 ldr r0,.L32+4
 5103 0046 6C49     	 ldr r1,.L32+8
 5104 0048 FFF7FEFF 	 bl strstr
 5105 004c 0346     	 mov r3,r0
 5106 004e 002B     	 cmp r3,#0
 5107 0050 4AD0     	 beq .L19
 5108              	.LBB3:
 295:../4g_module/mdm_handler.c **** 			{
 296:../4g_module/mdm_handler.c **** 				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 5109              	 .loc 3 296 0
 5110 0052 6848     	 ldr r0,.L32+4
 5111 0054 3A21     	 movs r1,#58
 5112 0056 FFF7FEFF 	 bl strchr
 5113 005a B860     	 str r0,[r7,#8]
 297:../4g_module/mdm_handler.c **** 						(const char *) gu8arr_respBuffer, ':');
 298:../4g_module/mdm_handler.c **** 
 299:../4g_module/mdm_handler.c **** 				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5114              	 .loc 3 299 0
 5115 005c B868     	 ldr r0,[r7,#8]
 5116 005e 0A21     	 movs r1,#10
 5117 0060 FFF7FEFF 	 bl strchr
 5118 0064 0346     	 mov r3,r0
 5119 0066 002B     	 cmp r3,#0
 5120 0068 3DD0     	 beq .L20
 5121              	.LBB4:
 300:../4g_module/mdm_handler.c **** 				{
 301:../4g_module/mdm_handler.c **** 					lu8p_saveptr += 2;
 5122              	 .loc 3 301 0
 5123 006a BB68     	 ldr r3,[r7,#8]
 5124 006c 0233     	 adds r3,r3,#2
 5125 006e BB60     	 str r3,[r7,#8]
 302:../4g_module/mdm_handler.c **** 
 303:../4g_module/mdm_handler.c **** 					uint8_t lu8_result = atoi((char *) lu8p_saveptr);
 5126              	 .loc 3 303 0
 5127 0070 B868     	 ldr r0,[r7,#8]
 5128 0072 FFF7FEFF 	 bl atoi
 5129 0076 0346     	 mov r3,r0
 5130 0078 FB71     	 strb r3,[r7,#7]
 304:../4g_module/mdm_handler.c **** 					if (sgu8_mqttClientId == lu8_result)	//check client Idx
 5131              	 .loc 3 304 0
 5132 007a 604B     	 ldr r3,.L32+12
 5133 007c 1B78     	 ldrb r3,[r3]
 5134 007e FA79     	 ldrb r2,[r7,#7]
 5135 0080 9A42     	 cmp r2,r3
 5136 0082 30D1     	 bne .L20
 305:../4g_module/mdm_handler.c **** 					{
 306:../4g_module/mdm_handler.c **** 						lu8p_saveptr += 2;
 5137              	 .loc 3 306 0
 5138 0084 BB68     	 ldr r3,[r7,#8]
 5139 0086 0233     	 adds r3,r3,#2
 5140 0088 BB60     	 str r3,[r7,#8]
 307:../4g_module/mdm_handler.c **** 						lu8_result = atoi((char *) lu8p_saveptr);	//check error code
 5141              	 .loc 3 307 0
 5142 008a B868     	 ldr r0,[r7,#8]
 5143 008c FFF7FEFF 	 bl atoi
 5144 0090 0346     	 mov r3,r0
 5145 0092 FB71     	 strb r3,[r7,#7]
 308:../4g_module/mdm_handler.c **** 						/* 1 --> Connection is closed or reset by a peer end
 309:../4g_module/mdm_handler.c **** 						 * 2 --> Sending PINGREQ packet timed out or failed
 310:../4g_module/mdm_handler.c **** 						 * 3 --> Sending CONNECT packet timed out or failed
 311:../4g_module/mdm_handler.c **** 						 * 4 --> Receiving CONNACK packet timed out or failed
 312:../4g_module/mdm_handler.c **** 						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
 313:../4g_module/mdm_handler.c **** 						 * */
 314:../4g_module/mdm_handler.c **** 						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
 5146              	 .loc 3 314 0
 5147 0094 FB79     	 ldrb r3,[r7,#7]
 5148 0096 012B     	 cmp r3,#1
 5149 0098 0BD0     	 beq .L21
 5150              	 .loc 3 314 0 is_stmt 0 discriminator 1
 5151 009a FB79     	 ldrb r3,[r7,#7]
 5152 009c 022B     	 cmp r3,#2
 5153 009e 08D0     	 beq .L21
 5154              	 .loc 3 314 0 discriminator 2
 5155 00a0 FB79     	 ldrb r3,[r7,#7]
 5156 00a2 032B     	 cmp r3,#3
 5157 00a4 05D0     	 beq .L21
 315:../4g_module/mdm_handler.c **** 								|| (4 == lu8_result) || (6 == lu8_result))
 5158              	 .loc 3 315 0 is_stmt 1
 5159 00a6 FB79     	 ldrb r3,[r7,#7]
 5160 00a8 042B     	 cmp r3,#4
 5161 00aa 02D0     	 beq .L21
 5162              	 .loc 3 315 0 is_stmt 0 discriminator 1
 5163 00ac FB79     	 ldrb r3,[r7,#7]
 5164 00ae 062B     	 cmp r3,#6
 5165 00b0 0BD1     	 bne .L22
 5166              	.L21:
 316:../4g_module/mdm_handler.c **** 						{
 317:../4g_module/mdm_handler.c **** 							if (gb_isMqttConnected == true)
 5167              	 .loc 3 317 0 is_stmt 1
 5168 00b2 534B     	 ldr r3,.L32+16
 5169 00b4 1B78     	 ldrb r3,[r3]
 5170 00b6 002B     	 cmp r3,#0
 5171 00b8 06D0     	 beq .L23
 318:../4g_module/mdm_handler.c **** 							{
 319:../4g_module/mdm_handler.c **** 								sen_4gRunState = E_MQTT_OPEN_STATE;
 5172              	 .loc 3 319 0
 5173 00ba 524B     	 ldr r3,.L32+20
 5174 00bc 0922     	 movs r2,#9
 5175 00be 1A70     	 strb r2,[r3]
 320:../4g_module/mdm_handler.c **** 								gb_isMqttConnected = false;
 5176              	 .loc 3 320 0
 5177 00c0 4F4B     	 ldr r3,.L32+16
 5178 00c2 0022     	 movs r2,#0
 5179 00c4 1A70     	 strb r2,[r3]
 317:../4g_module/mdm_handler.c **** 							{
 5180              	 .loc 3 317 0
 5181 00c6 0EE0     	 b .L20
 5182              	.L23:
 5183 00c8 0DE0     	 b .L20
 5184              	.L22:
 321:../4g_module/mdm_handler.c **** 							}
 322:../4g_module/mdm_handler.c **** 						}
 323:../4g_module/mdm_handler.c **** 						else if (8 == lu8_result)//The client closes the MQTT connection
 5185              	 .loc 3 323 0
 5186 00ca FB79     	 ldrb r3,[r7,#7]
 5187 00cc 082B     	 cmp r3,#8
 5188 00ce 0AD1     	 bne .L20
 324:../4g_module/mdm_handler.c **** 						{
 325:../4g_module/mdm_handler.c **** 							if (gb_isMqttConnected == true)
 5189              	 .loc 3 325 0
 5190 00d0 4B4B     	 ldr r3,.L32+16
 5191 00d2 1B78     	 ldrb r3,[r3]
 5192 00d4 002B     	 cmp r3,#0
 5193 00d6 06D0     	 beq .L20
 326:../4g_module/mdm_handler.c **** 							{
 327:../4g_module/mdm_handler.c **** 								sen_4gRunState = E_MQTT_CONNECT_STATE;
 5194              	 .loc 3 327 0
 5195 00d8 4A4B     	 ldr r3,.L32+20
 5196 00da 0B22     	 movs r2,#11
 5197 00dc 1A70     	 strb r2,[r3]
 328:../4g_module/mdm_handler.c **** 								gb_isMqttConnected = false;
 5198              	 .loc 3 328 0
 5199 00de 484B     	 ldr r3,.L32+16
 5200 00e0 0022     	 movs r2,#0
 5201 00e2 1A70     	 strb r2,[r3]
 5202              	.LBE4:
 5203              	.LBE3:
 5204 00e4 80E0     	 b .L17
 5205              	.L20:
 5206 00e6 7FE0     	 b .L17
 5207              	.L19:
 329:../4g_module/mdm_handler.c **** 							}
 330:../4g_module/mdm_handler.c **** 						}
 331:../4g_module/mdm_handler.c **** 					}
 332:../4g_module/mdm_handler.c **** 				}
 333:../4g_module/mdm_handler.c **** 			}
 334:../4g_module/mdm_handler.c **** 			else if ((NULL
 335:../4g_module/mdm_handler.c **** 					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 5208              	 .loc 3 335 0
 5209 00e8 4248     	 ldr r0,.L32+4
 5210 00ea 4749     	 ldr r1,.L32+24
 5211 00ec FFF7FEFF 	 bl strstr
 5212 00f0 0346     	 mov r3,r0
 334:../4g_module/mdm_handler.c **** 					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 5213              	 .loc 3 334 0
 5214 00f2 002B     	 cmp r3,#0
 5215 00f4 15D0     	 beq .L24
 5216              	.LBB5:
 336:../4g_module/mdm_handler.c **** 			{
 337:../4g_module/mdm_handler.c **** 				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 5217              	 .loc 3 337 0
 5218 00f6 3F48     	 ldr r0,.L32+4
 5219 00f8 3A21     	 movs r1,#58
 5220 00fa FFF7FEFF 	 bl strchr
 5221 00fe 3860     	 str r0,[r7]
 338:../4g_module/mdm_handler.c **** 						(const char *) gu8arr_respBuffer, ':');
 339:../4g_module/mdm_handler.c **** 
 340:../4g_module/mdm_handler.c **** 				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5222              	 .loc 3 340 0
 5223 0100 3868     	 ldr r0,[r7]
 5224 0102 0A21     	 movs r1,#10
 5225 0104 FFF7FEFF 	 bl strchr
 5226 0108 0346     	 mov r3,r0
 5227 010a 002B     	 cmp r3,#0
 5228 010c 08D0     	 beq .L25
 341:../4g_module/mdm_handler.c **** 				{
 342:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 5229              	 .loc 3 342 0
 5230 010e 384B     	 ldr r3,.L32
 5231 0110 0022     	 movs r2,#0
 5232 0112 1A70     	 strb r2,[r3]
 343:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5233              	 .loc 3 343 0
 5234 0114 3748     	 ldr r0,.L32+4
 5235 0116 0021     	 movs r1,#0
 5236 0118 4022     	 movs r2,#64
 5237 011a FFF7FEFF 	 bl memset
 5238              	.LBE5:
 5239 011e 63E0     	 b .L17
 5240              	.L25:
 5241 0120 62E0     	 b .L17
 5242              	.L24:
 344:../4g_module/mdm_handler.c **** 				}
 345:../4g_module/mdm_handler.c **** 			}
 346:../4g_module/mdm_handler.c **** 			else if (sgu8_respCount == 1)
 5243              	 .loc 3 346 0
 5244 0122 334B     	 ldr r3,.L32
 5245 0124 1B78     	 ldrb r3,[r3]
 5246 0126 012B     	 cmp r3,#1
 5247 0128 10D1     	 bne .L26
 347:../4g_module/mdm_handler.c **** 			{
 348:../4g_module/mdm_handler.c **** 				if ((gu8arr_respBuffer[0] == 0xFF) || (gu8arr_respBuffer[0] == '\n'))
 5248              	 .loc 3 348 0
 5249 012a 324B     	 ldr r3,.L32+4
 5250 012c 1B78     	 ldrb r3,[r3]
 5251 012e FF2B     	 cmp r3,#255
 5252 0130 03D0     	 beq .L27
 5253              	 .loc 3 348 0 is_stmt 0 discriminator 1
 5254 0132 304B     	 ldr r3,.L32+4
 5255 0134 1B78     	 ldrb r3,[r3]
 5256 0136 0A2B     	 cmp r3,#10
 5257 0138 56D1     	 bne .L17
 5258              	.L27:
 349:../4g_module/mdm_handler.c **** 				{
 350:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 5259              	 .loc 3 350 0 is_stmt 1
 5260 013a 2D4B     	 ldr r3,.L32
 5261 013c 0022     	 movs r2,#0
 5262 013e 1A70     	 strb r2,[r3]
 351:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5263              	 .loc 3 351 0
 5264 0140 2C48     	 ldr r0,.L32+4
 5265 0142 0021     	 movs r1,#0
 5266 0144 4022     	 movs r2,#64
 5267 0146 FFF7FEFF 	 bl memset
 5268 014a 4DE0     	 b .L17
 5269              	.L26:
 352:../4g_module/mdm_handler.c **** 				}
 353:../4g_module/mdm_handler.c **** 			}
 354:../4g_module/mdm_handler.c **** 			else if ((NULL
 355:../4g_module/mdm_handler.c **** 					!= strstr((const char*) gu8arr_respBuffer,
 5270              	 .loc 3 355 0
 5271 014c 2948     	 ldr r0,.L32+4
 5272 014e 2F49     	 ldr r1,.L32+28
 5273 0150 FFF7FEFF 	 bl strstr
 5274 0154 0346     	 mov r3,r0
 354:../4g_module/mdm_handler.c **** 					!= strstr((const char*) gu8arr_respBuffer,
 5275              	 .loc 3 354 0
 5276 0156 002B     	 cmp r3,#0
 5277 0158 12D0     	 beq .L29
 356:../4g_module/mdm_handler.c **** 							(const char*) "QIND: SMS DONE\r\n")))
 357:../4g_module/mdm_handler.c **** 			{
 358:../4g_module/mdm_handler.c **** 				gst_deviceStatus.mb_ismodemPwrDwn = false;
 5278              	 .loc 3 358 0
 5279 015a 2D4B     	 ldr r3,.L32+32
 5280 015c 0022     	 movs r2,#0
 5281 015e 1A70     	 strb r2,[r3]
 359:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
 5282              	 .loc 3 359 0
 5283 0160 234B     	 ldr r3,.L32
 5284 0162 0022     	 movs r2,#0
 5285 0164 1A70     	 strb r2,[r3]
 360:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5286              	 .loc 3 360 0
 5287 0166 2348     	 ldr r0,.L32+4
 5288 0168 0021     	 movs r1,#0
 5289 016a 4022     	 movs r2,#64
 5290 016c FFF7FEFF 	 bl memset
 361:../4g_module/mdm_handler.c **** 				sen_4gRunState = E_SET_URC_PORT_STATE;
 5291              	 .loc 3 361 0
 5292 0170 244B     	 ldr r3,.L32+20
 5293 0172 0122     	 movs r2,#1
 5294 0174 1A70     	 strb r2,[r3]
 362:../4g_module/mdm_handler.c **** 				delay(2000);
 5295              	 .loc 3 362 0
 5296 0176 4FF4FA60 	 mov r0,#2000
 5297 017a FFF7FEFF 	 bl delay
 5298 017e 33E0     	 b .L17
 5299              	.L29:
 363:../4g_module/mdm_handler.c **** 			}
 364:../4g_module/mdm_handler.c **** 			else if (RDY_SIZE == sgu8_respCount)
 5300              	 .loc 3 364 0
 5301 0180 1B4B     	 ldr r3,.L32
 5302 0182 1B78     	 ldrb r3,[r3]
 5303 0184 072B     	 cmp r3,#7
 5304 0186 19D1     	 bne .L30
 365:../4g_module/mdm_handler.c **** 			{
 366:../4g_module/mdm_handler.c **** 				if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) READY)))
 5305              	 .loc 3 366 0
 5306 0188 1A48     	 ldr r0,.L32+4
 5307 018a 2249     	 ldr r1,.L32+36
 5308 018c FFF7FEFF 	 bl strstr
 5309 0190 0346     	 mov r3,r0
 5310 0192 002B     	 cmp r3,#0
 5311 0194 28D0     	 beq .L17
 367:../4g_module/mdm_handler.c **** 				{
 368:../4g_module/mdm_handler.c **** 					gst_deviceStatus.mb_ismodemPwrDwn = false;
 5312              	 .loc 3 368 0
 5313 0196 1E4B     	 ldr r3,.L32+32
 5314 0198 0022     	 movs r2,#0
 5315 019a 1A70     	 strb r2,[r3]
 369:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 5316              	 .loc 3 369 0
 5317 019c 144B     	 ldr r3,.L32
 5318 019e 0022     	 movs r2,#0
 5319 01a0 1A70     	 strb r2,[r3]
 370:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5320              	 .loc 3 370 0
 5321 01a2 1448     	 ldr r0,.L32+4
 5322 01a4 0021     	 movs r1,#0
 5323 01a6 4022     	 movs r2,#64
 5324 01a8 FFF7FEFF 	 bl memset
 371:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_ECHO_OFF_STATE;
 5325              	 .loc 3 371 0
 5326 01ac 154B     	 ldr r3,.L32+20
 5327 01ae 0222     	 movs r2,#2
 5328 01b0 1A70     	 strb r2,[r3]
 372:../4g_module/mdm_handler.c **** 					delay(2000);
 5329              	 .loc 3 372 0
 5330 01b2 4FF4FA60 	 mov r0,#2000
 5331 01b6 FFF7FEFF 	 bl delay
 5332 01ba 15E0     	 b .L17
 5333              	.L30:
 373:../4g_module/mdm_handler.c **** 				}
 374:../4g_module/mdm_handler.c **** 			}
 375:../4g_module/mdm_handler.c **** 			else if (PWR_DOWN_SIZE == sgu8_respCount)
 5334              	 .loc 3 375 0
 5335 01bc 0C4B     	 ldr r3,.L32
 5336 01be 1B78     	 ldrb r3,[r3]
 5337 01c0 102B     	 cmp r3,#16
 5338 01c2 11D1     	 bne .L17
 376:../4g_module/mdm_handler.c **** 			{
 377:../4g_module/mdm_handler.c **** 				if ((NULL
 378:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 5339              	 .loc 3 378 0
 5340 01c4 0B48     	 ldr r0,.L32+4
 5341 01c6 1449     	 ldr r1,.L32+40
 5342 01c8 FFF7FEFF 	 bl strstr
 5343 01cc 0346     	 mov r3,r0
 377:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 5344              	 .loc 3 377 0
 5345 01ce 002B     	 cmp r3,#0
 5346 01d0 0AD0     	 beq .L17
 379:../4g_module/mdm_handler.c **** 				{
 380:../4g_module/mdm_handler.c **** 					gst_deviceStatus.mb_ismodemPwrDwn = true;
 5347              	 .loc 3 380 0
 5348 01d2 0F4B     	 ldr r3,.L32+32
 5349 01d4 0122     	 movs r2,#1
 5350 01d6 1A70     	 strb r2,[r3]
 381:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 5351              	 .loc 3 381 0
 5352 01d8 054B     	 ldr r3,.L32
 5353 01da 0022     	 movs r2,#0
 5354 01dc 1A70     	 strb r2,[r3]
 382:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5355              	 .loc 3 382 0
 5356 01de 0548     	 ldr r0,.L32+4
 5357 01e0 0021     	 movs r1,#0
 5358 01e2 4022     	 movs r2,#64
 5359 01e4 FFF7FEFF 	 bl memset
 5360              	.L17:
 5361              	.LBE2:
 383:../4g_module/mdm_handler.c **** 				}
 384:../4g_module/mdm_handler.c **** 			}
 385:../4g_module/mdm_handler.c **** 		}
 386:../4g_module/mdm_handler.c **** 	}
 387:../4g_module/mdm_handler.c **** }
 5362              	 .loc 3 387 0
 5363 01e8 1037     	 adds r7,r7,#16
 5364              	.LCFI39:
 5365              	 .cfi_def_cfa_offset 8
 5366 01ea BD46     	 mov sp,r7
 5367              	.LCFI40:
 5368              	 .cfi_def_cfa_register 13
 5369              	 
 5370 01ec 80BD     	 pop {r7,pc}
 5371              	.L33:
 5372 01ee 00BF     	 .align 2
 5373              	.L32:
 5374 01f0 00000000 	 .word sgu8_respCount
 5375 01f4 00000000 	 .word gu8arr_respBuffer
 5376 01f8 00000000 	 .word .LC0
 5377 01fc 00000000 	 .word sgu8_mqttClientId
 5378 0200 00000000 	 .word gb_isMqttConnected
 5379 0204 00000000 	 .word sen_4gRunState
 5380 0208 0C000000 	 .word .LC1
 5381 020c 18000000 	 .word .LC2
 5382 0210 00000000 	 .word gst_deviceStatus
 5383 0214 2C000000 	 .word .LC3
 5384 0218 34000000 	 .word .LC4
 5385              	 .cfi_endproc
 5386              	.LFE609:
 5388              	 .section .text.mod_sendCmd,"ax",%progbits
 5389              	 .align 2
 5390              	 .thumb
 5391              	 .thumb_func
 5393              	mod_sendCmd:
 5394              	.LFB610:
 388:../4g_module/mdm_handler.c **** 
 389:../4g_module/mdm_handler.c **** /**************************************************************************
 390:../4g_module/mdm_handler.c ****  * Function Name	:	mod_sendCmd
 391:../4g_module/mdm_handler.c ****  *
 392:../4g_module/mdm_handler.c ****  * Description   	:	This function sends data from port
 393:../4g_module/mdm_handler.c ****  *
 394:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t *lu8p_data
 395:../4g_module/mdm_handler.c ****  * 						uint16_t lu16_len
 396:../4g_module/mdm_handler.c ****  *
 397:../4g_module/mdm_handler.c ****  * Return values 	: 	en_responseRetCodes_t
 398:../4g_module/mdm_handler.c ****  *
 399:../4g_module/mdm_handler.c ****  ****************************************************************************/
 400:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_sendCmd(uint8_t *lu8p_data, uint16_t lu16_len)
 401:../4g_module/mdm_handler.c **** {
 5395              	 .loc 3 401 0
 5396              	 .cfi_startproc
 5397              	 
 5398              	 
 5399 0000 80B5     	 push {r7,lr}
 5400              	.LCFI41:
 5401              	 .cfi_def_cfa_offset 8
 5402              	 .cfi_offset 7,-8
 5403              	 .cfi_offset 14,-4
 5404 0002 84B0     	 sub sp,sp,#16
 5405              	.LCFI42:
 5406              	 .cfi_def_cfa_offset 24
 5407 0004 00AF     	 add r7,sp,#0
 5408              	.LCFI43:
 5409              	 .cfi_def_cfa_register 7
 5410 0006 7860     	 str r0,[r7,#4]
 5411 0008 0B46     	 mov r3,r1
 5412 000a 7B80     	 strh r3,[r7,#2]
 402:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 5413              	 .loc 3 402 0
 5414 000c 0423     	 movs r3,#4
 5415 000e FB73     	 strb r3,[r7,#15]
 403:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 5416              	 .loc 3 403 0
 5417 0010 0023     	 movs r3,#0
 5418 0012 BB73     	 strb r3,[r7,#14]
 404:../4g_module/mdm_handler.c **** 
 405:../4g_module/mdm_handler.c **** 	lu8_ret = at_writePort(lu8p_data, lu16_len);
 5419              	 .loc 3 405 0
 5420 0014 7B88     	 ldrh r3,[r7,#2]
 5421 0016 7868     	 ldr r0,[r7,#4]
 5422 0018 1946     	 mov r1,r3
 5423 001a FFF7FEFF 	 bl at_writePort
 5424 001e 0346     	 mov r3,r0
 5425 0020 BB73     	 strb r3,[r7,#14]
 406:../4g_module/mdm_handler.c **** 	if (E_SUCCESS == lu8_ret)
 5426              	 .loc 3 406 0
 5427 0022 BB7B     	 ldrb r3,[r7,#14]
 5428 0024 002B     	 cmp r3,#0
 5429 0026 02D1     	 bne .L35
 407:../4g_module/mdm_handler.c **** 	{
 408:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 5430              	 .loc 3 408 0
 5431 0028 0023     	 movs r3,#0
 5432 002a FB73     	 strb r3,[r7,#15]
 5433 002c 01E0     	 b .L36
 5434              	.L35:
 409:../4g_module/mdm_handler.c **** 	}
 410:../4g_module/mdm_handler.c **** 	else
 411:../4g_module/mdm_handler.c **** 	{
 412:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_WRITE_ERROR;
 5435              	 .loc 3 412 0
 5436 002e 0523     	 movs r3,#5
 5437 0030 FB73     	 strb r3,[r7,#15]
 5438              	.L36:
 413:../4g_module/mdm_handler.c **** 	}
 414:../4g_module/mdm_handler.c **** 
 415:../4g_module/mdm_handler.c **** 	return len_retStatus;
 5439              	 .loc 3 415 0
 5440 0032 FB7B     	 ldrb r3,[r7,#15]
 416:../4g_module/mdm_handler.c **** }
 5441              	 .loc 3 416 0
 5442 0034 1846     	 mov r0,r3
 5443 0036 1037     	 adds r7,r7,#16
 5444              	.LCFI44:
 5445              	 .cfi_def_cfa_offset 8
 5446 0038 BD46     	 mov sp,r7
 5447              	.LCFI45:
 5448              	 .cfi_def_cfa_register 13
 5449              	 
 5450 003a 80BD     	 pop {r7,pc}
 5451              	 .cfi_endproc
 5452              	.LFE610:
 5454              	 .section .rodata
 5455 0043 00       	 .align 2
 5456              	.LC5:
 5457 0044 2B514D54 	 .ascii "+QMTOPEN:\000"
 5457      4F50454E 
 5457      3A00
 5458 004e 0000     	 .align 2
 5459              	.LC6:
 5460 0050 2B514D54 	 .ascii "+QMTPUBEX:\000"
 5460      50554245 
 5460      583A00
 5461 005b 00       	 .align 2
 5462              	.LC7:
 5463 005c 2B514D54 	 .ascii "+QMTCONN:\000"
 5463      434F4E4E 
 5463      3A00
 5464 0066 0000     	 .align 2
 5465              	.LC8:
 5466 0068 2B514D54 	 .ascii "+QMTDISC:\000"
 5466      44495343 
 5466      3A00
 5467 0072 0000     	 .align 2
 5468              	.LC9:
 5469 0074 2B514D54 	 .ascii "+QMTSUB:\000"
 5469      5355423A 
 5469      00
 5470 007d 000000   	 .align 2
 5471              	.LC10:
 5472 0080 2B434D45 	 .ascii "+CME ERROR\000"
 5472      20455252 
 5472      4F5200
 5473 008b 00       	 .align 2
 5474              	.LC11:
 5475 008c 3A00     	 .ascii ":\000"
 5476 008e 0000     	 .align 2
 5477              	.LC12:
 5478 0090 2B434D53 	 .ascii "+CMS ERROR\000"
 5478      20455252 
 5478      4F5200
 5479 009b 00       	 .align 2
 5480              	.LC13:
 5481 009c 0000     	 .ascii "\000\000"
 5482              	 .section .text.mod_sendCmdGetRsp,"ax",%progbits
 5483              	 .align 2
 5484              	 .thumb
 5485              	 .thumb_func
 5487              	mod_sendCmdGetRsp:
 5488              	.LFB611:
 417:../4g_module/mdm_handler.c **** 
 418:../4g_module/mdm_handler.c **** /**************************************************************************
 419:../4g_module/mdm_handler.c ****  * Function Name	:	mod_sendCmdGetRsp
 420:../4g_module/mdm_handler.c ****  *
 421:../4g_module/mdm_handler.c ****  * Description   	:	This function sends command and get response
 422:../4g_module/mdm_handler.c ****  *
 423:../4g_module/mdm_handler.c ****  * Arguments     	:	en_ATCommandList_t -
 424:../4g_module/mdm_handler.c ****  *
 425:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 426:../4g_module/mdm_handler.c ****  *
 427:../4g_module/mdm_handler.c ****  ***************************************************************************/
 428:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_sendCmdGetRsp(en_ATCommandIdx_t len_ATCmdIdx,
 429:../4g_module/mdm_handler.c **** 		uint8_t *lu8p_cmdParam)
 430:../4g_module/mdm_handler.c **** {
 5489              	 .loc 3 430 0
 5490              	 .cfi_startproc
 5491              	 
 5492              	 
 5493 0000 90B5     	 push {r4,r7,lr}
 5494              	.LCFI46:
 5495              	 .cfi_def_cfa_offset 12
 5496              	 .cfi_offset 4,-12
 5497              	 .cfi_offset 7,-8
 5498              	 .cfi_offset 14,-4
 5499 0002 ADF2244D 	 subw sp,sp,#1060
 5500              	.LCFI47:
 5501              	 .cfi_def_cfa_offset 1072
 5502 0006 00AF     	 add r7,sp,#0
 5503              	.LCFI48:
 5504              	 .cfi_def_cfa_register 7
 5505 0008 0246     	 mov r2,r0
 5506 000a 3B46     	 mov r3,r7
 5507 000c 1960     	 str r1,[r3]
 5508 000e FB1D     	 adds r3,r7,#7
 5509 0010 1A70     	 strb r2,[r3]
 431:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 5510              	 .loc 3 431 0
 5511 0012 0423     	 movs r3,#4
 5512 0014 87F81F34 	 strb r3,[r7,#1055]
 432:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_sendCmdBuff[SEND_AT_CMD_BUFF];
 433:../4g_module/mdm_handler.c **** 	uint16_t lu16_BufferSize = 0;
 5513              	 .loc 3 433 0
 5514 0018 0023     	 movs r3,#0
 5515 001a A7F81C34 	 strh r3,[r7,#1052]
 434:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 5516              	 .loc 3 434 0
 5517 001e 0023     	 movs r3,#0
 5518 0020 C7F81834 	 str r3,[r7,#1048]
 435:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 5519              	 .loc 3 435 0
 5520 0024 07F10C03 	 add r3,r7,#12
 5521 0028 0022     	 movs r2,#0
 5522 002a 1A60     	 str r2,[r3]
 436:../4g_module/mdm_handler.c **** 
 437:../4g_module/mdm_handler.c **** 	switch (sen_sendCmdGetRespState)
 5523              	 .loc 3 437 0
 5524 002c BE4B     	 ldr r3,.L70
 5525 002e 1B78     	 ldrb r3,[r3]
 5526 0030 012B     	 cmp r3,#1
 5527 0032 10D0     	 beq .L40
 5528 0034 022B     	 cmp r3,#2
 5529 0036 70D0     	 beq .L41
 5530 0038 002B     	 cmp r3,#0
 5531 003a 40F06782 	 bne .L69
 438:../4g_module/mdm_handler.c **** 	{
 439:../4g_module/mdm_handler.c **** 		case E_AT_CMD_IDLE_STATE:
 440:../4g_module/mdm_handler.c **** 			sgu8_respCount = 0;
 5532              	 .loc 3 440 0
 5533 003e BB4B     	 ldr r3,.L70+4
 5534 0040 0022     	 movs r2,#0
 5535 0042 1A70     	 strb r2,[r3]
 441:../4g_module/mdm_handler.c **** 			memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5536              	 .loc 3 441 0
 5537 0044 BA48     	 ldr r0,.L70+8
 5538 0046 0021     	 movs r1,#0
 5539 0048 4022     	 movs r2,#64
 5540 004a FFF7FEFF 	 bl memset
 442:../4g_module/mdm_handler.c **** 			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5541              	 .loc 3 442 0
 5542 004e B64B     	 ldr r3,.L70
 5543 0050 0122     	 movs r2,#1
 5544 0052 1A70     	 strb r2,[r3]
 443:../4g_module/mdm_handler.c **** 		break;
 5545              	 .loc 3 443 0
 5546 0054 61E2     	 b .L43
 5547              	.L40:
 444:../4g_module/mdm_handler.c **** 
 445:../4g_module/mdm_handler.c **** 		case E_AT_CMD_SEND_INPROG_STATE:
 446:../4g_module/mdm_handler.c **** 			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));
 5548              	 .loc 3 446 0
 5549 0056 07F11003 	 add r3,r7,#16
 5550 005a 1846     	 mov r0,r3
 5551 005c 0021     	 movs r1,#0
 5552 005e 4FF48162 	 mov r2,#1032
 5553 0062 FFF7FEFF 	 bl memset
 447:../4g_module/mdm_handler.c **** 
 448:../4g_module/mdm_handler.c **** 			strncpy((char *) lu8arr_sendCmdBuff,
 449:../4g_module/mdm_handler.c **** 					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 5554              	 .loc 3 449 0
 5555 0066 FB1D     	 adds r3,r7,#7
 5556 0068 1B78     	 ldrb r3,[r3]
 5557 006a 40F2A442 	 movw r2,#1188
 5558 006e 02FB03F3 	 mul r3,r2,r3
 5559 0072 B04A     	 ldr r2,.L70+12
 5560 0074 9C18     	 adds r4,r3,r2
 450:../4g_module/mdm_handler.c **** 					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));
 5561              	 .loc 3 450 0
 5562 0076 FB1D     	 adds r3,r7,#7
 5563 0078 1B78     	 ldrb r3,[r3]
 5564 007a 40F2A442 	 movw r2,#1188
 5565 007e 02FB03F3 	 mul r3,r2,r3
 5566 0082 AC4A     	 ldr r2,.L70+12
 5567 0084 1344     	 add r3,r3,r2
 448:../4g_module/mdm_handler.c **** 					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 5568              	 .loc 3 448 0
 5569 0086 1846     	 mov r0,r3
 5570 0088 FFF7FEFF 	 bl strlen
 5571 008c 0246     	 mov r2,r0
 5572 008e 07F11003 	 add r3,r7,#16
 5573 0092 1846     	 mov r0,r3
 5574 0094 2146     	 mov r1,r4
 5575 0096 FFF7FEFF 	 bl strncpy
 451:../4g_module/mdm_handler.c **** 
 452:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_cmdParam)
 5576              	 .loc 3 452 0
 5577 009a 3B46     	 mov r3,r7
 5578 009c 1B68     	 ldr r3,[r3]
 5579 009e 002B     	 cmp r3,#0
 5580 00a0 06D0     	 beq .L44
 453:../4g_module/mdm_handler.c **** 			{
 454:../4g_module/mdm_handler.c **** 				strcat((char *) lu8arr_sendCmdBuff, (char *) lu8p_cmdParam);
 5581              	 .loc 3 454 0
 5582 00a2 07F11002 	 add r2,r7,#16
 5583 00a6 3B46     	 mov r3,r7
 5584 00a8 1046     	 mov r0,r2
 5585 00aa 1968     	 ldr r1,[r3]
 5586 00ac FFF7FEFF 	 bl strcat
 5587              	.L44:
 455:../4g_module/mdm_handler.c **** 			}
 456:../4g_module/mdm_handler.c **** 
 457:../4g_module/mdm_handler.c **** 			lu16_BufferSize = strlen((char *) lu8arr_sendCmdBuff);
 5588              	 .loc 3 457 0
 5589 00b0 07F11003 	 add r3,r7,#16
 5590 00b4 1846     	 mov r0,r3
 5591 00b6 FFF7FEFF 	 bl strlen
 5592 00ba 0346     	 mov r3,r0
 5593 00bc A7F81C34 	 strh r3,[r7,#1052]
 458:../4g_module/mdm_handler.c **** 			len_retStatus = mod_sendCmd(lu8arr_sendCmdBuff, lu16_BufferSize);
 5594              	 .loc 3 458 0
 5595 00c0 07F11002 	 add r2,r7,#16
 5596 00c4 B7F81C34 	 ldrh r3,[r7,#1052]
 5597 00c8 1046     	 mov r0,r2
 5598 00ca 1946     	 mov r1,r3
 5599 00cc FFF7FEFF 	 bl mod_sendCmd
 5600 00d0 0346     	 mov r3,r0
 5601 00d2 87F81F34 	 strb r3,[r7,#1055]
 459:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 5602              	 .loc 3 459 0
 5603 00d6 97F81F34 	 ldrb r3,[r7,#1055]
 5604 00da 002B     	 cmp r3,#0
 5605 00dc 1CD1     	 bne .L45
 460:../4g_module/mdm_handler.c **** 			{
 461:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 5606              	 .loc 3 461 0
 5607 00de 9448     	 ldr r0,.L70+8
 5608 00e0 0021     	 movs r1,#0
 5609 00e2 4022     	 movs r2,#64
 5610 00e4 FFF7FEFF 	 bl memset
 462:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
 5611              	 .loc 3 462 0
 5612 00e8 904B     	 ldr r3,.L70+4
 5613 00ea 0022     	 movs r2,#0
 5614 00ec 1A70     	 strb r2,[r3]
 463:../4g_module/mdm_handler.c **** 				tm_setResponseTime(gcst_ATCmdTable[len_ATCmdIdx].mu32_respTimeoutInMs);
 5615              	 .loc 3 463 0
 5616 00ee FB1D     	 adds r3,r7,#7
 5617 00f0 1B78     	 ldrb r3,[r3]
 5618 00f2 904A     	 ldr r2,.L70+12
 5619 00f4 40F2A441 	 movw r1,#1188
 5620 00f8 01FB03F3 	 mul r3,r1,r3
 5621 00fc 1344     	 add r3,r3,r2
 5622 00fe 03F59463 	 add r3,r3,#1184
 5623 0102 1B68     	 ldr r3,[r3]
 5624 0104 1846     	 mov r0,r3
 5625 0106 FFF7FEFF 	 bl tm_setResponseTime
 464:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 5626              	 .loc 3 464 0
 5627 010a 0423     	 movs r3,#4
 5628 010c 87F81F34 	 strb r3,[r7,#1055]
 465:../4g_module/mdm_handler.c **** 				sen_sendCmdGetRespState = E_AT_CMD_RECV_INPROG_STATE;
 5629              	 .loc 3 465 0
 5630 0110 854B     	 ldr r3,.L70
 5631 0112 0222     	 movs r2,#2
 5632 0114 1A70     	 strb r2,[r3]
 466:../4g_module/mdm_handler.c **** 			}
 467:../4g_module/mdm_handler.c **** 		break;
 5633              	 .loc 3 467 0
 5634 0116 00E2     	 b .L43
 5635              	.L45:
 5636 0118 FFE1     	 b .L43
 5637              	.L41:
 468:../4g_module/mdm_handler.c **** 
 469:../4g_module/mdm_handler.c **** 		case E_AT_CMD_RECV_INPROG_STATE:
 470:../4g_module/mdm_handler.c **** 			if (sgu8_respCount > 0)
 5638              	 .loc 3 470 0
 5639 011a 844B     	 ldr r3,.L70+4
 5640 011c 1B78     	 ldrb r3,[r3]
 5641 011e 002B     	 cmp r3,#0
 5642 0120 00F0DD81 	 beq .L46
 471:../4g_module/mdm_handler.c **** 			{
 472:../4g_module/mdm_handler.c **** 				if ((NULL
 473:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 474:../4g_module/mdm_handler.c **** 								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 5643              	 .loc 3 474 0
 5644 0124 FB1D     	 adds r3,r7,#7
 5645 0126 1B78     	 ldrb r3,[r3]
 5646 0128 40F2A442 	 movw r2,#1188
 5647 012c 02FB03F3 	 mul r3,r2,r3
 5648 0130 03F58163 	 add r3,r3,#1032
 5649 0134 7F4A     	 ldr r2,.L70+12
 5650 0136 1344     	 add r3,r3,r2
 473:../4g_module/mdm_handler.c **** 								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 5651              	 .loc 3 473 0
 5652 0138 7D48     	 ldr r0,.L70+8
 5653 013a 1946     	 mov r1,r3
 5654 013c FFF7FEFF 	 bl strstr
 5655 0140 0346     	 mov r3,r0
 472:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 5656              	 .loc 3 472 0
 5657 0142 002B     	 cmp r3,#0
 5658 0144 0BD0     	 beq .L47
 475:../4g_module/mdm_handler.c **** 				{
 476:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 5659              	 .loc 3 476 0
 5660 0146 794B     	 ldr r3,.L70+4
 5661 0148 0022     	 movs r2,#0
 5662 014a 1A70     	 strb r2,[r3]
 477:../4g_module/mdm_handler.c **** 					tm_clearResponseTime();
 5663              	 .loc 3 477 0
 5664 014c FFF7FEFF 	 bl tm_clearResponseTime
 478:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
 5665              	 .loc 3 478 0
 5666 0150 0023     	 movs r3,#0
 5667 0152 87F81F34 	 strb r3,[r7,#1055]
 479:../4g_module/mdm_handler.c **** 					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5668              	 .loc 3 479 0
 5669 0156 744B     	 ldr r3,.L70
 5670 0158 0122     	 movs r2,#1
 5671 015a 1A70     	 strb r2,[r3]
 5672 015c D5E1     	 b .L67
 5673              	.L47:
 480:../4g_module/mdm_handler.c **** 				}
 481:../4g_module/mdm_handler.c **** 
 482:../4g_module/mdm_handler.c **** 				else if ((NULL
 483:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 5674              	 .loc 3 483 0
 5675 015e 7448     	 ldr r0,.L70+8
 5676 0160 7549     	 ldr r1,.L70+16
 5677 0162 FFF7FEFF 	 bl strstr
 5678 0166 0346     	 mov r3,r0
 482:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 5679              	 .loc 3 482 0
 5680 0168 002B     	 cmp r3,#0
 5681 016a 1ED0     	 beq .L49
 484:../4g_module/mdm_handler.c **** 				{
 485:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5682              	 .loc 3 485 0
 5683 016c 7048     	 ldr r0,.L70+8
 5684 016e 3A21     	 movs r1,#58
 5685 0170 FFF7FEFF 	 bl strchr
 5686 0174 0246     	 mov r2,r0
 5687 0176 07F10C03 	 add r3,r7,#12
 5688 017a 1A60     	 str r2,[r3]
 486:../4g_module/mdm_handler.c **** 							':');
 487:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5689              	 .loc 3 487 0
 5690 017c 07F10C03 	 add r3,r7,#12
 5691 0180 1B68     	 ldr r3,[r3]
 5692 0182 1846     	 mov r0,r3
 5693 0184 0A21     	 movs r1,#10
 5694 0186 FFF7FEFF 	 bl strchr
 5695 018a 0346     	 mov r3,r0
 5696 018c 002B     	 cmp r3,#0
 5697 018e 00F0BC81 	 beq .L67
 488:../4g_module/mdm_handler.c **** 					{
 489:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5698              	 .loc 3 489 0
 5699 0192 664B     	 ldr r3,.L70+4
 5700 0194 0022     	 movs r2,#0
 5701 0196 1A70     	 strb r2,[r3]
 490:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5702              	 .loc 3 490 0
 5703 0198 FFF7FEFF 	 bl tm_clearResponseTime
 491:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5704              	 .loc 3 491 0
 5705 019c 0023     	 movs r3,#0
 5706 019e 87F81F34 	 strb r3,[r7,#1055]
 492:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5707              	 .loc 3 492 0
 5708 01a2 614B     	 ldr r3,.L70
 5709 01a4 0122     	 movs r2,#1
 5710 01a6 1A70     	 strb r2,[r3]
 5711 01a8 AFE1     	 b .L67
 5712              	.L49:
 493:../4g_module/mdm_handler.c **** 					}
 494:../4g_module/mdm_handler.c **** 				}
 495:../4g_module/mdm_handler.c **** //				else if ((NULL
 496:../4g_module/mdm_handler.c **** //						!= strstr((const char*) gu8arr_respBuffer, (const char*) "+QGPSLOC:")))
 497:../4g_module/mdm_handler.c **** //				{
 498:../4g_module/mdm_handler.c **** //					if(sgu8_respCount > 64)
 499:../4g_module/mdm_handler.c **** //					{
 500:../4g_module/mdm_handler.c **** //						sgu8_respCount = 0;
 501:../4g_module/mdm_handler.c **** //						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 502:../4g_module/mdm_handler.c **** //						at_clearBuff();
 503:../4g_module/mdm_handler.c **** //					}
 504:../4g_module/mdm_handler.c **** //				}
 505:../4g_module/mdm_handler.c **** 				else if ((NULL
 506:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 5713              	 .loc 3 506 0
 5714 01aa 6148     	 ldr r0,.L70+8
 5715 01ac 6349     	 ldr r1,.L70+20
 5716 01ae FFF7FEFF 	 bl strstr
 5717 01b2 0346     	 mov r3,r0
 505:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 5718              	 .loc 3 505 0
 5719 01b4 002B     	 cmp r3,#0
 5720 01b6 1ED0     	 beq .L51
 507:../4g_module/mdm_handler.c **** 				{
 508:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5721              	 .loc 3 508 0
 5722 01b8 5D48     	 ldr r0,.L70+8
 5723 01ba 3A21     	 movs r1,#58
 5724 01bc FFF7FEFF 	 bl strchr
 5725 01c0 0246     	 mov r2,r0
 5726 01c2 07F10C03 	 add r3,r7,#12
 5727 01c6 1A60     	 str r2,[r3]
 509:../4g_module/mdm_handler.c **** 							':');
 510:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5728              	 .loc 3 510 0
 5729 01c8 07F10C03 	 add r3,r7,#12
 5730 01cc 1B68     	 ldr r3,[r3]
 5731 01ce 1846     	 mov r0,r3
 5732 01d0 0A21     	 movs r1,#10
 5733 01d2 FFF7FEFF 	 bl strchr
 5734 01d6 0346     	 mov r3,r0
 5735 01d8 002B     	 cmp r3,#0
 5736 01da 00F09681 	 beq .L67
 511:../4g_module/mdm_handler.c **** 					{
 512:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5737              	 .loc 3 512 0
 5738 01de 534B     	 ldr r3,.L70+4
 5739 01e0 0022     	 movs r2,#0
 5740 01e2 1A70     	 strb r2,[r3]
 513:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5741              	 .loc 3 513 0
 5742 01e4 FFF7FEFF 	 bl tm_clearResponseTime
 514:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5743              	 .loc 3 514 0
 5744 01e8 0023     	 movs r3,#0
 5745 01ea 87F81F34 	 strb r3,[r7,#1055]
 515:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5746              	 .loc 3 515 0
 5747 01ee 4E4B     	 ldr r3,.L70
 5748 01f0 0122     	 movs r2,#1
 5749 01f2 1A70     	 strb r2,[r3]
 5750 01f4 89E1     	 b .L67
 5751              	.L51:
 516:../4g_module/mdm_handler.c **** 					}
 517:../4g_module/mdm_handler.c **** 				}
 518:../4g_module/mdm_handler.c **** 				else if ((NULL
 519:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 5752              	 .loc 3 519 0
 5753 01f6 4E48     	 ldr r0,.L70+8
 5754 01f8 5149     	 ldr r1,.L70+24
 5755 01fa FFF7FEFF 	 bl strstr
 5756 01fe 0346     	 mov r3,r0
 518:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 5757              	 .loc 3 518 0
 5758 0200 002B     	 cmp r3,#0
 5759 0202 1ED0     	 beq .L53
 520:../4g_module/mdm_handler.c **** 				{
 521:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5760              	 .loc 3 521 0
 5761 0204 4A48     	 ldr r0,.L70+8
 5762 0206 3A21     	 movs r1,#58
 5763 0208 FFF7FEFF 	 bl strchr
 5764 020c 0246     	 mov r2,r0
 5765 020e 07F10C03 	 add r3,r7,#12
 5766 0212 1A60     	 str r2,[r3]
 522:../4g_module/mdm_handler.c **** 							':');
 523:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5767              	 .loc 3 523 0
 5768 0214 07F10C03 	 add r3,r7,#12
 5769 0218 1B68     	 ldr r3,[r3]
 5770 021a 1846     	 mov r0,r3
 5771 021c 0A21     	 movs r1,#10
 5772 021e FFF7FEFF 	 bl strchr
 5773 0222 0346     	 mov r3,r0
 5774 0224 002B     	 cmp r3,#0
 5775 0226 00F07081 	 beq .L67
 524:../4g_module/mdm_handler.c **** 					{
 525:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5776              	 .loc 3 525 0
 5777 022a 404B     	 ldr r3,.L70+4
 5778 022c 0022     	 movs r2,#0
 5779 022e 1A70     	 strb r2,[r3]
 526:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5780              	 .loc 3 526 0
 5781 0230 FFF7FEFF 	 bl tm_clearResponseTime
 527:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5782              	 .loc 3 527 0
 5783 0234 0023     	 movs r3,#0
 5784 0236 87F81F34 	 strb r3,[r7,#1055]
 528:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5785              	 .loc 3 528 0
 5786 023a 3B4B     	 ldr r3,.L70
 5787 023c 0122     	 movs r2,#1
 5788 023e 1A70     	 strb r2,[r3]
 5789 0240 63E1     	 b .L67
 5790              	.L53:
 529:../4g_module/mdm_handler.c **** 					}
 530:../4g_module/mdm_handler.c **** 				}
 531:../4g_module/mdm_handler.c **** 				else if ((NULL
 532:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 5791              	 .loc 3 532 0
 5792 0242 3B48     	 ldr r0,.L70+8
 5793 0244 3F49     	 ldr r1,.L70+28
 5794 0246 FFF7FEFF 	 bl strstr
 5795 024a 0346     	 mov r3,r0
 531:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 5796              	 .loc 3 531 0
 5797 024c 002B     	 cmp r3,#0
 5798 024e 1ED0     	 beq .L55
 533:../4g_module/mdm_handler.c **** 				{
 534:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5799              	 .loc 3 534 0
 5800 0250 3748     	 ldr r0,.L70+8
 5801 0252 3A21     	 movs r1,#58
 5802 0254 FFF7FEFF 	 bl strchr
 5803 0258 0246     	 mov r2,r0
 5804 025a 07F10C03 	 add r3,r7,#12
 5805 025e 1A60     	 str r2,[r3]
 535:../4g_module/mdm_handler.c **** 							':');
 536:../4g_module/mdm_handler.c **** 
 537:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5806              	 .loc 3 537 0
 5807 0260 07F10C03 	 add r3,r7,#12
 5808 0264 1B68     	 ldr r3,[r3]
 5809 0266 1846     	 mov r0,r3
 5810 0268 0A21     	 movs r1,#10
 5811 026a FFF7FEFF 	 bl strchr
 5812 026e 0346     	 mov r3,r0
 5813 0270 002B     	 cmp r3,#0
 5814 0272 00F04A81 	 beq .L67
 538:../4g_module/mdm_handler.c **** 					{
 539:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5815              	 .loc 3 539 0
 5816 0276 2D4B     	 ldr r3,.L70+4
 5817 0278 0022     	 movs r2,#0
 5818 027a 1A70     	 strb r2,[r3]
 540:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5819              	 .loc 3 540 0
 5820 027c FFF7FEFF 	 bl tm_clearResponseTime
 541:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5821              	 .loc 3 541 0
 5822 0280 0023     	 movs r3,#0
 5823 0282 87F81F34 	 strb r3,[r7,#1055]
 542:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5824              	 .loc 3 542 0
 5825 0286 284B     	 ldr r3,.L70
 5826 0288 0122     	 movs r2,#1
 5827 028a 1A70     	 strb r2,[r3]
 5828 028c 3DE1     	 b .L67
 5829              	.L55:
 543:../4g_module/mdm_handler.c **** 					}
 544:../4g_module/mdm_handler.c **** 				}
 545:../4g_module/mdm_handler.c **** 				else if ((NULL
 546:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 5830              	 .loc 3 546 0
 5831 028e 2848     	 ldr r0,.L70+8
 5832 0290 2D49     	 ldr r1,.L70+32
 5833 0292 FFF7FEFF 	 bl strstr
 5834 0296 0346     	 mov r3,r0
 545:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 5835              	 .loc 3 545 0
 5836 0298 002B     	 cmp r3,#0
 5837 029a 1ED0     	 beq .L57
 547:../4g_module/mdm_handler.c **** 				{
 548:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5838              	 .loc 3 548 0
 5839 029c 2448     	 ldr r0,.L70+8
 5840 029e 3A21     	 movs r1,#58
 5841 02a0 FFF7FEFF 	 bl strchr
 5842 02a4 0246     	 mov r2,r0
 5843 02a6 07F10C03 	 add r3,r7,#12
 5844 02aa 1A60     	 str r2,[r3]
 549:../4g_module/mdm_handler.c **** 							':');
 550:../4g_module/mdm_handler.c **** 
 551:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5845              	 .loc 3 551 0
 5846 02ac 07F10C03 	 add r3,r7,#12
 5847 02b0 1B68     	 ldr r3,[r3]
 5848 02b2 1846     	 mov r0,r3
 5849 02b4 0A21     	 movs r1,#10
 5850 02b6 FFF7FEFF 	 bl strchr
 5851 02ba 0346     	 mov r3,r0
 5852 02bc 002B     	 cmp r3,#0
 5853 02be 00F02481 	 beq .L67
 552:../4g_module/mdm_handler.c **** 					{
 553:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5854              	 .loc 3 553 0
 5855 02c2 1A4B     	 ldr r3,.L70+4
 5856 02c4 0022     	 movs r2,#0
 5857 02c6 1A70     	 strb r2,[r3]
 554:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5858              	 .loc 3 554 0
 5859 02c8 FFF7FEFF 	 bl tm_clearResponseTime
 555:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5860              	 .loc 3 555 0
 5861 02cc 0023     	 movs r3,#0
 5862 02ce 87F81F34 	 strb r3,[r7,#1055]
 556:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5863              	 .loc 3 556 0
 5864 02d2 154B     	 ldr r3,.L70
 5865 02d4 0122     	 movs r2,#1
 5866 02d6 1A70     	 strb r2,[r3]
 5867 02d8 17E1     	 b .L67
 5868              	.L57:
 557:../4g_module/mdm_handler.c **** 					}
 558:../4g_module/mdm_handler.c **** 				}
 559:../4g_module/mdm_handler.c **** 				else if ((NULL
 560:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 5869              	 .loc 3 560 0
 5870 02da 1548     	 ldr r0,.L70+8
 5871 02dc 1B49     	 ldr r1,.L70+36
 5872 02de FFF7FEFF 	 bl strstr
 5873 02e2 0346     	 mov r3,r0
 559:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 5874              	 .loc 3 559 0
 5875 02e4 002B     	 cmp r3,#0
 5876 02e6 33D0     	 beq .L59
 561:../4g_module/mdm_handler.c **** 				{
 562:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5877              	 .loc 3 562 0
 5878 02e8 1148     	 ldr r0,.L70+8
 5879 02ea 3A21     	 movs r1,#58
 5880 02ec FFF7FEFF 	 bl strchr
 5881 02f0 0246     	 mov r2,r0
 5882 02f2 07F10C03 	 add r3,r7,#12
 5883 02f6 1A60     	 str r2,[r3]
 563:../4g_module/mdm_handler.c **** 							':');
 564:../4g_module/mdm_handler.c **** 
 565:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5884              	 .loc 3 565 0
 5885 02f8 07F10C03 	 add r3,r7,#12
 5886 02fc 1B68     	 ldr r3,[r3]
 5887 02fe 1846     	 mov r0,r3
 5888 0300 0A21     	 movs r1,#10
 5889 0302 FFF7FEFF 	 bl strchr
 5890 0306 0346     	 mov r3,r0
 5891 0308 002B     	 cmp r3,#0
 5892 030a 00F0FE80 	 beq .L67
 566:../4g_module/mdm_handler.c **** 					{
 567:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5893              	 .loc 3 567 0
 5894 030e 074B     	 ldr r3,.L70+4
 5895 0310 0022     	 movs r2,#0
 5896 0312 1A70     	 strb r2,[r3]
 568:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5897              	 .loc 3 568 0
 5898 0314 FFF7FEFF 	 bl tm_clearResponseTime
 569:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 5899              	 .loc 3 569 0
 5900 0318 0023     	 movs r3,#0
 5901 031a 87F81F34 	 strb r3,[r7,#1055]
 570:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5902              	 .loc 3 570 0
 5903 031e 024B     	 ldr r3,.L70
 5904 0320 0122     	 movs r2,#1
 5905 0322 1A70     	 strb r2,[r3]
 5906 0324 F1E0     	 b .L67
 5907              	.L71:
 5908 0326 00BF     	 .align 2
 5909              	.L70:
 5910 0328 00000000 	 .word sen_sendCmdGetRespState
 5911 032c 00000000 	 .word sgu8_respCount
 5912 0330 00000000 	 .word gu8arr_respBuffer
 5913 0334 00000000 	 .word gcst_ATCmdTable
 5914 0338 44000000 	 .word .LC5
 5915 033c 50000000 	 .word .LC6
 5916 0340 5C000000 	 .word .LC7
 5917 0344 68000000 	 .word .LC8
 5918 0348 74000000 	 .word .LC9
 5919 034c 0C000000 	 .word .LC1
 5920              	.L59:
 571:../4g_module/mdm_handler.c **** 					}
 572:../4g_module/mdm_handler.c **** 				}
 573:../4g_module/mdm_handler.c **** 				else if ((NULL
 574:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 5921              	 .loc 3 574 0
 5922 0350 7548     	 ldr r0,.L72
 5923 0352 7649     	 ldr r1,.L72+4
 5924 0354 FFF7FEFF 	 bl strstr
 5925 0358 0346     	 mov r3,r0
 573:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 5926              	 .loc 3 573 0
 5927 035a 002B     	 cmp r3,#0
 5928 035c 38D0     	 beq .L61
 575:../4g_module/mdm_handler.c **** 								(const char*) CME_ERROR)))
 576:../4g_module/mdm_handler.c **** 				{
 577:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5929              	 .loc 3 577 0
 5930 035e 7248     	 ldr r0,.L72
 5931 0360 3A21     	 movs r1,#58
 5932 0362 FFF7FEFF 	 bl strchr
 5933 0366 0246     	 mov r2,r0
 5934 0368 07F10C03 	 add r3,r7,#12
 5935 036c 1A60     	 str r2,[r3]
 578:../4g_module/mdm_handler.c **** 							':');
 579:../4g_module/mdm_handler.c **** 
 580:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5936              	 .loc 3 580 0
 5937 036e 07F10C03 	 add r3,r7,#12
 5938 0372 1B68     	 ldr r3,[r3]
 5939 0374 1846     	 mov r0,r3
 5940 0376 0A21     	 movs r1,#10
 5941 0378 FFF7FEFF 	 bl strchr
 5942 037c 0346     	 mov r3,r0
 5943 037e 002B     	 cmp r3,#0
 5944 0380 00F0C380 	 beq .L67
 581:../4g_module/mdm_handler.c **** 					{
 582:../4g_module/mdm_handler.c **** 						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 5945              	 .loc 3 582 0
 5946 0384 07F10C03 	 add r3,r7,#12
 5947 0388 6748     	 ldr r0,.L72
 5948 038a 6949     	 ldr r1,.L72+8
 5949 038c 1A46     	 mov r2,r3
 5950 038e FFF7FEFF 	 bl strtok_r
 5951 0392 C7F81804 	 str r0,[r7,#1048]
 583:../4g_module/mdm_handler.c **** 								(const char *) ":", (char **) &lu8p_saveptr);
 584:../4g_module/mdm_handler.c **** 						lu8p_saveptr++;
 5952              	 .loc 3 584 0
 5953 0396 07F10C03 	 add r3,r7,#12
 5954 039a 1B68     	 ldr r3,[r3]
 5955 039c 5A1C     	 adds r2,r3,#1
 5956 039e 07F10C03 	 add r3,r7,#12
 5957 03a2 1A60     	 str r2,[r3]
 585:../4g_module/mdm_handler.c **** 
 586:../4g_module/mdm_handler.c **** 						sgu16_cmeError = (uint16_t) atoi((const char *) lu8p_saveptr);
 5958              	 .loc 3 586 0
 5959 03a4 07F10C03 	 add r3,r7,#12
 5960 03a8 1B68     	 ldr r3,[r3]
 5961 03aa 1846     	 mov r0,r3
 5962 03ac FFF7FEFF 	 bl atoi
 5963 03b0 0346     	 mov r3,r0
 5964 03b2 9AB2     	 uxth r2,r3
 5965 03b4 5F4B     	 ldr r3,.L72+12
 5966 03b6 1A80     	 strh r2,[r3]
 587:../4g_module/mdm_handler.c **** 
 588:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 5967              	 .loc 3 588 0
 5968 03b8 5F4B     	 ldr r3,.L72+16
 5969 03ba 0022     	 movs r2,#0
 5970 03bc 1A70     	 strb r2,[r3]
 589:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 5971              	 .loc 3 589 0
 5972 03be FFF7FEFF 	 bl tm_clearResponseTime
 590:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_CME_ERROR;
 5973              	 .loc 3 590 0
 5974 03c2 0B23     	 movs r3,#11
 5975 03c4 87F81F34 	 strb r3,[r7,#1055]
 591:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 5976              	 .loc 3 591 0
 5977 03c8 5C4B     	 ldr r3,.L72+20
 5978 03ca 0122     	 movs r2,#1
 5979 03cc 1A70     	 strb r2,[r3]
 5980 03ce 9CE0     	 b .L67
 5981              	.L61:
 592:../4g_module/mdm_handler.c **** 					}
 593:../4g_module/mdm_handler.c **** 				}
 594:../4g_module/mdm_handler.c **** 				else if ((NULL
 595:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 5982              	 .loc 3 595 0
 5983 03d0 5548     	 ldr r0,.L72
 5984 03d2 5B49     	 ldr r1,.L72+24
 5985 03d4 FFF7FEFF 	 bl strstr
 5986 03d8 0346     	 mov r3,r0
 594:../4g_module/mdm_handler.c **** 						!= strstr((const char*) gu8arr_respBuffer,
 5987              	 .loc 3 594 0
 5988 03da 002B     	 cmp r3,#0
 5989 03dc 38D0     	 beq .L63
 596:../4g_module/mdm_handler.c **** 								(const char*) CMS_ERROR)))
 597:../4g_module/mdm_handler.c **** 				{
 598:../4g_module/mdm_handler.c **** 					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 5990              	 .loc 3 598 0
 5991 03de 5248     	 ldr r0,.L72
 5992 03e0 3A21     	 movs r1,#58
 5993 03e2 FFF7FEFF 	 bl strchr
 5994 03e6 0246     	 mov r2,r0
 5995 03e8 07F10C03 	 add r3,r7,#12
 5996 03ec 1A60     	 str r2,[r3]
 599:../4g_module/mdm_handler.c **** 							':');
 600:../4g_module/mdm_handler.c **** 
 601:../4g_module/mdm_handler.c **** 					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 5997              	 .loc 3 601 0
 5998 03ee 07F10C03 	 add r3,r7,#12
 5999 03f2 1B68     	 ldr r3,[r3]
 6000 03f4 1846     	 mov r0,r3
 6001 03f6 0A21     	 movs r1,#10
 6002 03f8 FFF7FEFF 	 bl strchr
 6003 03fc 0346     	 mov r3,r0
 6004 03fe 002B     	 cmp r3,#0
 6005 0400 00F08380 	 beq .L67
 602:../4g_module/mdm_handler.c **** 					{
 603:../4g_module/mdm_handler.c **** 						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 6006              	 .loc 3 603 0
 6007 0404 07F10C03 	 add r3,r7,#12
 6008 0408 4748     	 ldr r0,.L72
 6009 040a 4949     	 ldr r1,.L72+8
 6010 040c 1A46     	 mov r2,r3
 6011 040e FFF7FEFF 	 bl strtok_r
 6012 0412 C7F81804 	 str r0,[r7,#1048]
 604:../4g_module/mdm_handler.c **** 								(const char *) ":", (char **) &lu8p_saveptr);
 605:../4g_module/mdm_handler.c **** 						lu8p_saveptr++;
 6013              	 .loc 3 605 0
 6014 0416 07F10C03 	 add r3,r7,#12
 6015 041a 1B68     	 ldr r3,[r3]
 6016 041c 5A1C     	 adds r2,r3,#1
 6017 041e 07F10C03 	 add r3,r7,#12
 6018 0422 1A60     	 str r2,[r3]
 606:../4g_module/mdm_handler.c **** 
 607:../4g_module/mdm_handler.c **** 						sgu16_cmsError = (uint16_t) atoi((const char *) lu8p_saveptr);
 6019              	 .loc 3 607 0
 6020 0424 07F10C03 	 add r3,r7,#12
 6021 0428 1B68     	 ldr r3,[r3]
 6022 042a 1846     	 mov r0,r3
 6023 042c FFF7FEFF 	 bl atoi
 6024 0430 0346     	 mov r3,r0
 6025 0432 9AB2     	 uxth r2,r3
 6026 0434 434B     	 ldr r3,.L72+28
 6027 0436 1A80     	 strh r2,[r3]
 608:../4g_module/mdm_handler.c **** 
 609:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 6028              	 .loc 3 609 0
 6029 0438 3F4B     	 ldr r3,.L72+16
 6030 043a 0022     	 movs r2,#0
 6031 043c 1A70     	 strb r2,[r3]
 610:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 6032              	 .loc 3 610 0
 6033 043e FFF7FEFF 	 bl tm_clearResponseTime
 611:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_CMS_ERROR;
 6034              	 .loc 3 611 0
 6035 0442 0C23     	 movs r3,#12
 6036 0444 87F81F34 	 strb r3,[r7,#1055]
 612:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 6037              	 .loc 3 612 0
 6038 0448 3C4B     	 ldr r3,.L72+20
 6039 044a 0122     	 movs r2,#1
 6040 044c 1A70     	 strb r2,[r3]
 6041 044e 5CE0     	 b .L67
 6042              	.L63:
 613:../4g_module/mdm_handler.c **** 					}
 614:../4g_module/mdm_handler.c **** 				}
 615:../4g_module/mdm_handler.c **** 				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
 6043              	 .loc 3 615 0
 6044 0450 FB1D     	 adds r3,r7,#7
 6045 0452 1B78     	 ldrb r3,[r3]
 6046 0454 1B2B     	 cmp r3,#27
 6047 0456 12D1     	 bne .L65
 616:../4g_module/mdm_handler.c **** 				{
 617:../4g_module/mdm_handler.c **** 					if ((NULL
 618:../4g_module/mdm_handler.c **** 							!= strstr((const char*) gu8arr_respBuffer,
 6048              	 .loc 3 618 0
 6049 0458 3348     	 ldr r0,.L72
 6050 045a 4121     	 movs r1,#65
 6051 045c FFF7FEFF 	 bl strchr
 6052 0460 0346     	 mov r3,r0
 617:../4g_module/mdm_handler.c **** 							!= strstr((const char*) gu8arr_respBuffer,
 6053              	 .loc 3 617 0
 6054 0462 002B     	 cmp r3,#0
 6055 0464 51D0     	 beq .L67
 619:../4g_module/mdm_handler.c **** 									(const char*) "A")))
 620:../4g_module/mdm_handler.c **** 					{
 621:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 6056              	 .loc 3 621 0
 6057 0466 344B     	 ldr r3,.L72+16
 6058 0468 0022     	 movs r2,#0
 6059 046a 1A70     	 strb r2,[r3]
 622:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 6060              	 .loc 3 622 0
 6061 046c FFF7FEFF 	 bl tm_clearResponseTime
 623:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 6062              	 .loc 3 623 0
 6063 0470 0023     	 movs r3,#0
 6064 0472 87F81F34 	 strb r3,[r7,#1055]
 624:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 6065              	 .loc 3 624 0
 6066 0476 314B     	 ldr r3,.L72+20
 6067 0478 0122     	 movs r2,#1
 6068 047a 1A70     	 strb r2,[r3]
 6069 047c 45E0     	 b .L67
 6070              	.L65:
 625:../4g_module/mdm_handler.c **** 					}
 626:../4g_module/mdm_handler.c **** 				}
 627:../4g_module/mdm_handler.c **** 				else if ((NULL
 628:../4g_module/mdm_handler.c **** 						== strstr((const char*) NULL_STR,
 629:../4g_module/mdm_handler.c **** 								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 6071              	 .loc 3 629 0
 6072 047e FB1D     	 adds r3,r7,#7
 6073 0480 1B78     	 ldrb r3,[r3]
 6074 0482 40F2A442 	 movw r2,#1188
 6075 0486 02FB03F3 	 mul r3,r2,r3
 6076 048a 03F58D63 	 add r3,r3,#1128
 6077 048e 2E4A     	 ldr r2,.L72+32
 6078 0490 1344     	 add r3,r3,r2
 6079 0492 0433     	 adds r3,r3,#4
 628:../4g_module/mdm_handler.c **** 								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 6080              	 .loc 3 628 0
 6081 0494 2D48     	 ldr r0,.L72+36
 6082 0496 1946     	 mov r1,r3
 6083 0498 FFF7FEFF 	 bl strstr
 6084 049c 0346     	 mov r3,r0
 627:../4g_module/mdm_handler.c **** 						== strstr((const char*) NULL_STR,
 6085              	 .loc 3 627 0
 6086 049e 002B     	 cmp r3,#0
 6087 04a0 33D1     	 bne .L67
 630:../4g_module/mdm_handler.c **** 				{
 631:../4g_module/mdm_handler.c **** 					if ((NULL
 632:../4g_module/mdm_handler.c **** 							!= strstr((const char*) gu8arr_respBuffer,
 633:../4g_module/mdm_handler.c **** 									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 6088              	 .loc 3 633 0
 6089 04a2 FB1D     	 adds r3,r7,#7
 6090 04a4 1B78     	 ldrb r3,[r3]
 6091 04a6 40F2A442 	 movw r2,#1188
 6092 04aa 02FB03F3 	 mul r3,r2,r3
 6093 04ae 03F58D63 	 add r3,r3,#1128
 6094 04b2 254A     	 ldr r2,.L72+32
 6095 04b4 1344     	 add r3,r3,r2
 6096 04b6 0433     	 adds r3,r3,#4
 632:../4g_module/mdm_handler.c **** 									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 6097              	 .loc 3 632 0
 6098 04b8 1B48     	 ldr r0,.L72
 6099 04ba 1946     	 mov r1,r3
 6100 04bc FFF7FEFF 	 bl strstr
 6101 04c0 0346     	 mov r3,r0
 631:../4g_module/mdm_handler.c **** 							!= strstr((const char*) gu8arr_respBuffer,
 6102              	 .loc 3 631 0
 6103 04c2 002B     	 cmp r3,#0
 6104 04c4 21D0     	 beq .L67
 634:../4g_module/mdm_handler.c **** 					{
 635:../4g_module/mdm_handler.c **** 						sgu8_respCount = 0;
 6105              	 .loc 3 635 0
 6106 04c6 1C4B     	 ldr r3,.L72+16
 6107 04c8 0022     	 movs r2,#0
 6108 04ca 1A70     	 strb r2,[r3]
 636:../4g_module/mdm_handler.c **** 						tm_clearResponseTime();
 6109              	 .loc 3 636 0
 6110 04cc FFF7FEFF 	 bl tm_clearResponseTime
 637:../4g_module/mdm_handler.c **** //						tm_stopTimer();
 638:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_RSP_ERROR;
 6111              	 .loc 3 638 0
 6112 04d0 0323     	 movs r3,#3
 6113 04d2 87F81F34 	 strb r3,[r7,#1055]
 639:../4g_module/mdm_handler.c **** 						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 6114              	 .loc 3 639 0
 6115 04d6 194B     	 ldr r3,.L72+20
 6116 04d8 0122     	 movs r2,#1
 6117 04da 1A70     	 strb r2,[r3]
 640:../4g_module/mdm_handler.c **** 					}
 641:../4g_module/mdm_handler.c **** 
 642:../4g_module/mdm_handler.c **** 				}
 643:../4g_module/mdm_handler.c **** 			}
 644:../4g_module/mdm_handler.c **** 			else
 645:../4g_module/mdm_handler.c **** 			{
 646:../4g_module/mdm_handler.c **** 				if (tm_getResponseTimeValue() == 0)
 647:../4g_module/mdm_handler.c **** 				{
 648:../4g_module/mdm_handler.c **** 					sgu8_respCount = 0;
 649:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 650:../4g_module/mdm_handler.c **** 					tm_clearResponseTime();
 651:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_TIMEOUT_ERROR;
 652:../4g_module/mdm_handler.c **** 					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 653:../4g_module/mdm_handler.c **** 				}
 654:../4g_module/mdm_handler.c **** 			}
 655:../4g_module/mdm_handler.c **** 		break;
 6118              	 .loc 3 655 0
 6119 04dc 1DE0     	 b .L43
 6120              	.L46:
 646:../4g_module/mdm_handler.c **** 				{
 6121              	 .loc 3 646 0
 6122 04de FFF7FEFF 	 bl tm_getResponseTimeValue
 6123 04e2 0346     	 mov r3,r0
 6124 04e4 002B     	 cmp r3,#0
 6125 04e6 10D1     	 bne .L67
 648:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 6126              	 .loc 3 648 0
 6127 04e8 134B     	 ldr r3,.L72+16
 6128 04ea 0022     	 movs r2,#0
 6129 04ec 1A70     	 strb r2,[r3]
 649:../4g_module/mdm_handler.c **** 					tm_clearResponseTime();
 6130              	 .loc 3 649 0
 6131 04ee 0E48     	 ldr r0,.L72
 6132 04f0 0021     	 movs r1,#0
 6133 04f2 4022     	 movs r2,#64
 6134 04f4 FFF7FEFF 	 bl memset
 650:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_TIMEOUT_ERROR;
 6135              	 .loc 3 650 0
 6136 04f8 FFF7FEFF 	 bl tm_clearResponseTime
 651:../4g_module/mdm_handler.c **** 					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 6137              	 .loc 3 651 0
 6138 04fc 0623     	 movs r3,#6
 6139 04fe 87F81F34 	 strb r3,[r7,#1055]
 652:../4g_module/mdm_handler.c **** 				}
 6140              	 .loc 3 652 0
 6141 0502 0E4B     	 ldr r3,.L72+20
 6142 0504 0122     	 movs r2,#1
 6143 0506 1A70     	 strb r2,[r3]
 6144              	 .loc 3 655 0
 6145 0508 07E0     	 b .L43
 6146              	.L67:
 6147              	 .loc 3 655 0 is_stmt 0 discriminator 10
 6148 050a 06E0     	 b .L43
 6149              	.L69:
 656:../4g_module/mdm_handler.c **** 
 657:../4g_module/mdm_handler.c **** 		default:
 658:../4g_module/mdm_handler.c **** 			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 6150              	 .loc 3 658 0 is_stmt 1
 6151 050c 0B4B     	 ldr r3,.L72+20
 6152 050e 0122     	 movs r2,#1
 6153 0510 1A70     	 strb r2,[r3]
 659:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6154              	 .loc 3 659 0
 6155 0512 0423     	 movs r3,#4
 6156 0514 87F81F34 	 strb r3,[r7,#1055]
 660:../4g_module/mdm_handler.c **** 		break;
 6157              	 .loc 3 660 0
 6158 0518 00BF     	 nop
 6159              	.L43:
 661:../4g_module/mdm_handler.c **** 	}
 662:../4g_module/mdm_handler.c **** 
 663:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6160              	 .loc 3 663 0
 6161 051a 97F81F34 	 ldrb r3,[r7,#1055]
 664:../4g_module/mdm_handler.c **** }
 6162              	 .loc 3 664 0
 6163 051e 1846     	 mov r0,r3
 6164 0520 07F22447 	 addw r7,r7,#1060
 6165              	.LCFI49:
 6166              	 .cfi_def_cfa_offset 12
 6167 0524 BD46     	 mov sp,r7
 6168              	.LCFI50:
 6169              	 .cfi_def_cfa_register 13
 6170              	 
 6171 0526 90BD     	 pop {r4,r7,pc}
 6172              	.L73:
 6173              	 .align 2
 6174              	.L72:
 6175 0528 00000000 	 .word gu8arr_respBuffer
 6176 052c 80000000 	 .word .LC10
 6177 0530 8C000000 	 .word .LC11
 6178 0534 00000000 	 .word sgu16_cmeError
 6179 0538 00000000 	 .word sgu8_respCount
 6180 053c 00000000 	 .word sen_sendCmdGetRespState
 6181 0540 90000000 	 .word .LC12
 6182 0544 00000000 	 .word sgu16_cmsError
 6183 0548 00000000 	 .word gcst_ATCmdTable
 6184 054c 9C000000 	 .word .LC13
 6185              	 .cfi_endproc
 6186              	.LFE611:
 6188              	 .section .rodata
 6189 009e 0000     	 .align 2
 6190              	.LC14:
 6191 00a0 0D0A00   	 .ascii "\015\012\000"
 6192              	 .section .text.mod_echoOff,"ax",%progbits
 6193              	 .align 2
 6194              	 .thumb
 6195              	 .thumb_func
 6197              	mod_echoOff:
 6198              	.LFB612:
 665:../4g_module/mdm_handler.c **** 
 666:../4g_module/mdm_handler.c **** /**************************************************************************
 667:../4g_module/mdm_handler.c ****  * Function Name	:	mod_echoOff
 668:../4g_module/mdm_handler.c ****  *
 669:../4g_module/mdm_handler.c ****  * Description   	:	This function sets echo OFF
 670:../4g_module/mdm_handler.c ****  *
 671:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 672:../4g_module/mdm_handler.c ****  *
 673:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 674:../4g_module/mdm_handler.c ****  *
 675:../4g_module/mdm_handler.c ****  ****************************************************************************/
 676:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_echoOff(void)
 677:../4g_module/mdm_handler.c **** {
 6199              	 .loc 3 677 0
 6200              	 .cfi_startproc
 6201              	 
 6202              	 
 6203 0000 80B5     	 push {r7,lr}
 6204              	.LCFI51:
 6205              	 .cfi_def_cfa_offset 8
 6206              	 .cfi_offset 7,-8
 6207              	 .cfi_offset 14,-4
 6208 0002 82B0     	 sub sp,sp,#8
 6209              	.LCFI52:
 6210              	 .cfi_def_cfa_offset 16
 6211 0004 00AF     	 add r7,sp,#0
 6212              	.LCFI53:
 6213              	 .cfi_def_cfa_register 7
 678:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6214              	 .loc 3 678 0
 6215 0006 0423     	 movs r3,#4
 6216 0008 FB71     	 strb r3,[r7,#7]
 679:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 680:../4g_module/mdm_handler.c **** 
 681:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_ECHO_OFF, (uint8_t *) NEW_LINE);
 6217              	 .loc 3 681 0
 6218 000a 0320     	 movs r0,#3
 6219 000c 1349     	 ldr r1,.L79
 6220 000e FFF7FEFF 	 bl mod_sendCmdGetRsp
 6221 0012 0346     	 mov r3,r0
 6222 0014 FB71     	 strb r3,[r7,#7]
 682:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6223              	 .loc 3 682 0
 6224 0016 FB79     	 ldrb r3,[r7,#7]
 6225 0018 002B     	 cmp r3,#0
 6226 001a 03D1     	 bne .L75
 683:../4g_module/mdm_handler.c **** 	{
 684:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6227              	 .loc 3 684 0
 6228 001c 104B     	 ldr r3,.L79+4
 6229 001e 0022     	 movs r2,#0
 6230 0020 1A70     	 strb r2,[r3]
 6231 0022 16E0     	 b .L76
 6232              	.L75:
 685:../4g_module/mdm_handler.c **** 	}
 686:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6233              	 .loc 3 686 0
 6234 0024 FB79     	 ldrb r3,[r7,#7]
 6235 0026 042B     	 cmp r3,#4
 6236 0028 13D0     	 beq .L76
 687:../4g_module/mdm_handler.c **** 	{
 688:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6237              	 .loc 3 688 0
 6238 002a 0D4B     	 ldr r3,.L79+4
 6239 002c 1B78     	 ldrb r3,[r3]
 6240 002e 0133     	 adds r3,r3,#1
 6241 0030 DAB2     	 uxtb r2,r3
 6242 0032 0B4B     	 ldr r3,.L79+4
 6243 0034 1A70     	 strb r2,[r3]
 689:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6244              	 .loc 3 689 0
 6245 0036 0A4B     	 ldr r3,.L79+4
 6246 0038 1B78     	 ldrb r3,[r3]
 6247 003a 022B     	 cmp r3,#2
 6248 003c 02D8     	 bhi .L77
 690:../4g_module/mdm_handler.c **** 		{
 691:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6249              	 .loc 3 691 0
 6250 003e 0423     	 movs r3,#4
 6251 0040 FB71     	 strb r3,[r7,#7]
 6252 0042 06E0     	 b .L76
 6253              	.L77:
 692:../4g_module/mdm_handler.c **** 		}
 693:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6254              	 .loc 3 693 0
 6255 0044 064B     	 ldr r3,.L79+4
 6256 0046 1B78     	 ldrb r3,[r3]
 6257 0048 032B     	 cmp r3,#3
 6258 004a 02D9     	 bls .L76
 694:../4g_module/mdm_handler.c **** 		{
 695:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6259              	 .loc 3 695 0
 6260 004c 044B     	 ldr r3,.L79+4
 6261 004e 0022     	 movs r2,#0
 6262 0050 1A70     	 strb r2,[r3]
 6263              	.L76:
 696:../4g_module/mdm_handler.c **** 		}
 697:../4g_module/mdm_handler.c **** 	}
 698:../4g_module/mdm_handler.c **** 
 699:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6264              	 .loc 3 699 0
 6265 0052 FB79     	 ldrb r3,[r7,#7]
 700:../4g_module/mdm_handler.c **** }
 6266              	 .loc 3 700 0
 6267 0054 1846     	 mov r0,r3
 6268 0056 0837     	 adds r7,r7,#8
 6269              	.LCFI54:
 6270              	 .cfi_def_cfa_offset 8
 6271 0058 BD46     	 mov sp,r7
 6272              	.LCFI55:
 6273              	 .cfi_def_cfa_register 13
 6274              	 
 6275 005a 80BD     	 pop {r7,pc}
 6276              	.L80:
 6277              	 .align 2
 6278              	.L79:
 6279 005c A0000000 	 .word .LC14
 6280 0060 00000000 	 .word lsu8_retryCnt.14792
 6281              	 .cfi_endproc
 6282              	.LFE612:
 6284              	 .section .rodata
 6285 00a3 00       	 .align 2
 6286              	.LC15:
 6287 00a4 22757362 	 .ascii "\"usbat\"\015\012\000"
 6287      6174220D 
 6287      0A00
 6288              	 .section .text.mod_setUrcPort,"ax",%progbits
 6289              	 .align 2
 6290              	 .thumb
 6291              	 .thumb_func
 6293              	mod_setUrcPort:
 6294              	.LFB613:
 701:../4g_module/mdm_handler.c **** /**************************************************************************
 702:../4g_module/mdm_handler.c ****  * Function Name	:	mod_setUrcPort
 703:../4g_module/mdm_handler.c ****  *
 704:../4g_module/mdm_handler.c ****  * Description   	:	This function sets URC output
 705:../4g_module/mdm_handler.c ****  *
 706:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 707:../4g_module/mdm_handler.c ****  *
 708:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 709:../4g_module/mdm_handler.c ****  *
 710:../4g_module/mdm_handler.c ****  ****************************************************************************/
 711:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_setUrcPort(void)
 712:../4g_module/mdm_handler.c **** {
 6295              	 .loc 3 712 0
 6296              	 .cfi_startproc
 6297              	 
 6298              	 
 6299 0000 80B5     	 push {r7,lr}
 6300              	.LCFI56:
 6301              	 .cfi_def_cfa_offset 8
 6302              	 .cfi_offset 7,-8
 6303              	 .cfi_offset 14,-4
 6304 0002 84B0     	 sub sp,sp,#16
 6305              	.LCFI57:
 6306              	 .cfi_def_cfa_offset 24
 6307 0004 00AF     	 add r7,sp,#0
 6308              	.LCFI58:
 6309              	 .cfi_def_cfa_register 7
 713:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6310              	 .loc 3 713 0
 6311 0006 0423     	 movs r3,#4
 6312 0008 FB73     	 strb r3,[r7,#15]
 714:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 715:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[10] = "\"usbat\"\r\n";
 6313              	 .loc 3 715 0
 6314 000a 174A     	 ldr r2,.L86
 6315 000c 3B1D     	 adds r3,r7,#4
 6316 000e 07CA     	 ldmia r2,{r0,r1,r2}
 6317 0010 03C3     	 stmia r3!,{r0,r1}
 6318 0012 1A80     	 strh r2,[r3]
 716:../4g_module/mdm_handler.c **** 
 717:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_SET_URC_PRT, lu8arr_param);
 6319              	 .loc 3 717 0
 6320 0014 3B1D     	 adds r3,r7,#4
 6321 0016 0220     	 movs r0,#2
 6322 0018 1946     	 mov r1,r3
 6323 001a FFF7FEFF 	 bl mod_sendCmdGetRsp
 6324 001e 0346     	 mov r3,r0
 6325 0020 FB73     	 strb r3,[r7,#15]
 718:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6326              	 .loc 3 718 0
 6327 0022 FB7B     	 ldrb r3,[r7,#15]
 6328 0024 002B     	 cmp r3,#0
 6329 0026 03D1     	 bne .L82
 719:../4g_module/mdm_handler.c **** 	{
 720:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6330              	 .loc 3 720 0
 6331 0028 104B     	 ldr r3,.L86+4
 6332 002a 0022     	 movs r2,#0
 6333 002c 1A70     	 strb r2,[r3]
 6334 002e 16E0     	 b .L83
 6335              	.L82:
 721:../4g_module/mdm_handler.c **** 	}
 722:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6336              	 .loc 3 722 0
 6337 0030 FB7B     	 ldrb r3,[r7,#15]
 6338 0032 042B     	 cmp r3,#4
 6339 0034 13D0     	 beq .L83
 723:../4g_module/mdm_handler.c **** 	{
 724:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6340              	 .loc 3 724 0
 6341 0036 0D4B     	 ldr r3,.L86+4
 6342 0038 1B78     	 ldrb r3,[r3]
 6343 003a 0133     	 adds r3,r3,#1
 6344 003c DAB2     	 uxtb r2,r3
 6345 003e 0B4B     	 ldr r3,.L86+4
 6346 0040 1A70     	 strb r2,[r3]
 725:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6347              	 .loc 3 725 0
 6348 0042 0A4B     	 ldr r3,.L86+4
 6349 0044 1B78     	 ldrb r3,[r3]
 6350 0046 022B     	 cmp r3,#2
 6351 0048 02D8     	 bhi .L84
 726:../4g_module/mdm_handler.c **** 		{
 727:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6352              	 .loc 3 727 0
 6353 004a 0423     	 movs r3,#4
 6354 004c FB73     	 strb r3,[r7,#15]
 6355 004e 06E0     	 b .L83
 6356              	.L84:
 728:../4g_module/mdm_handler.c **** 		}
 729:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6357              	 .loc 3 729 0
 6358 0050 064B     	 ldr r3,.L86+4
 6359 0052 1B78     	 ldrb r3,[r3]
 6360 0054 032B     	 cmp r3,#3
 6361 0056 02D9     	 bls .L83
 730:../4g_module/mdm_handler.c **** 		{
 731:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6362              	 .loc 3 731 0
 6363 0058 044B     	 ldr r3,.L86+4
 6364 005a 0022     	 movs r2,#0
 6365 005c 1A70     	 strb r2,[r3]
 6366              	.L83:
 732:../4g_module/mdm_handler.c **** 		}
 733:../4g_module/mdm_handler.c **** 	}
 734:../4g_module/mdm_handler.c **** 
 735:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6367              	 .loc 3 735 0
 6368 005e FB7B     	 ldrb r3,[r7,#15]
 736:../4g_module/mdm_handler.c **** }
 6369              	 .loc 3 736 0
 6370 0060 1846     	 mov r0,r3
 6371 0062 1037     	 adds r7,r7,#16
 6372              	.LCFI59:
 6373              	 .cfi_def_cfa_offset 8
 6374 0064 BD46     	 mov sp,r7
 6375              	.LCFI60:
 6376              	 .cfi_def_cfa_register 13
 6377              	 
 6378 0066 80BD     	 pop {r7,pc}
 6379              	.L87:
 6380              	 .align 2
 6381              	.L86:
 6382 0068 A4000000 	 .word .LC15
 6383 006c 00000000 	 .word lsu8_retryCnt.14797
 6384              	 .cfi_endproc
 6385              	.LFE613:
 6387              	 .section .rodata
 6388 00ae 0000     	 .align 2
 6389              	.LC16:
 6390 00b0 302C300D 	 .ascii "0,0\015\012\000"
 6390      0A00
 6391 00b6 00000000 	 .space 4
 6392              	 .section .text.mod_setFlowCtrl,"ax",%progbits
 6393              	 .align 2
 6394              	 .thumb
 6395              	 .thumb_func
 6397              	mod_setFlowCtrl:
 6398              	.LFB614:
 737:../4g_module/mdm_handler.c **** 
 738:../4g_module/mdm_handler.c **** /**************************************************************************
 739:../4g_module/mdm_handler.c ****  * Function Name	:	mod_setFlowCtrl
 740:../4g_module/mdm_handler.c ****  *
 741:../4g_module/mdm_handler.c ****  * Description   	:	This function sets the flow control of the port
 742:../4g_module/mdm_handler.c ****  *
 743:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 744:../4g_module/mdm_handler.c ****  *
 745:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 746:../4g_module/mdm_handler.c ****  *
 747:../4g_module/mdm_handler.c ****  ****************************************************************************/
 748:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_setFlowCtrl(void)
 749:../4g_module/mdm_handler.c **** {
 6399              	 .loc 3 749 0
 6400              	 .cfi_startproc
 6401              	 
 6402              	 
 6403 0000 80B5     	 push {r7,lr}
 6404              	.LCFI61:
 6405              	 .cfi_def_cfa_offset 8
 6406              	 .cfi_offset 7,-8
 6407              	 .cfi_offset 14,-4
 6408 0002 84B0     	 sub sp,sp,#16
 6409              	.LCFI62:
 6410              	 .cfi_def_cfa_offset 24
 6411 0004 00AF     	 add r7,sp,#0
 6412              	.LCFI63:
 6413              	 .cfi_def_cfa_register 7
 750:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6414              	 .loc 3 750 0
 6415 0006 0423     	 movs r3,#4
 6416 0008 FB73     	 strb r3,[r7,#15]
 751:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 752:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[10] = "0,0\r\n";	//0,0 ---> none, none
 6417              	 .loc 3 752 0
 6418 000a 1A4A     	 ldr r2,.L93
 6419 000c 3B1D     	 adds r3,r7,#4
 6420 000e 92E80300 	 ldmia r2,{r0,r1}
 6421 0012 1860     	 str r0,[r3]
 6422 0014 0433     	 adds r3,r3,#4
 6423 0016 1980     	 strh r1,[r3]
 6424 0018 0023     	 movs r3,#0
 6425 001a 7B81     	 strh r3,[r7,#10]
 6426 001c 0023     	 movs r3,#0
 6427 001e BB81     	 strh r3,[r7,#12]
 753:../4g_module/mdm_handler.c **** 	//uint8_t lu8arr_param[10] = "2,2\r\n";	//0,0 ---> RTS, CTS
 754:../4g_module/mdm_handler.c **** 
 755:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_HW_FLWCTRL, lu8arr_param);
 6428              	 .loc 3 755 0
 6429 0020 3B1D     	 adds r3,r7,#4
 6430 0022 0420     	 movs r0,#4
 6431 0024 1946     	 mov r1,r3
 6432 0026 FFF7FEFF 	 bl mod_sendCmdGetRsp
 6433 002a 0346     	 mov r3,r0
 6434 002c FB73     	 strb r3,[r7,#15]
 756:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6435              	 .loc 3 756 0
 6436 002e FB7B     	 ldrb r3,[r7,#15]
 6437 0030 002B     	 cmp r3,#0
 6438 0032 03D1     	 bne .L89
 757:../4g_module/mdm_handler.c **** 	{
 758:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6439              	 .loc 3 758 0
 6440 0034 104B     	 ldr r3,.L93+4
 6441 0036 0022     	 movs r2,#0
 6442 0038 1A70     	 strb r2,[r3]
 6443 003a 16E0     	 b .L90
 6444              	.L89:
 759:../4g_module/mdm_handler.c **** 	}
 760:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6445              	 .loc 3 760 0
 6446 003c FB7B     	 ldrb r3,[r7,#15]
 6447 003e 042B     	 cmp r3,#4
 6448 0040 13D0     	 beq .L90
 761:../4g_module/mdm_handler.c **** 	{
 762:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6449              	 .loc 3 762 0
 6450 0042 0D4B     	 ldr r3,.L93+4
 6451 0044 1B78     	 ldrb r3,[r3]
 6452 0046 0133     	 adds r3,r3,#1
 6453 0048 DAB2     	 uxtb r2,r3
 6454 004a 0B4B     	 ldr r3,.L93+4
 6455 004c 1A70     	 strb r2,[r3]
 763:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6456              	 .loc 3 763 0
 6457 004e 0A4B     	 ldr r3,.L93+4
 6458 0050 1B78     	 ldrb r3,[r3]
 6459 0052 022B     	 cmp r3,#2
 6460 0054 02D8     	 bhi .L91
 764:../4g_module/mdm_handler.c **** 		{
 765:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6461              	 .loc 3 765 0
 6462 0056 0423     	 movs r3,#4
 6463 0058 FB73     	 strb r3,[r7,#15]
 6464 005a 06E0     	 b .L90
 6465              	.L91:
 766:../4g_module/mdm_handler.c **** 		}
 767:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6466              	 .loc 3 767 0
 6467 005c 064B     	 ldr r3,.L93+4
 6468 005e 1B78     	 ldrb r3,[r3]
 6469 0060 032B     	 cmp r3,#3
 6470 0062 02D9     	 bls .L90
 768:../4g_module/mdm_handler.c **** 		{
 769:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6471              	 .loc 3 769 0
 6472 0064 044B     	 ldr r3,.L93+4
 6473 0066 0022     	 movs r2,#0
 6474 0068 1A70     	 strb r2,[r3]
 6475              	.L90:
 770:../4g_module/mdm_handler.c **** 		}
 771:../4g_module/mdm_handler.c **** 	}
 772:../4g_module/mdm_handler.c **** 
 773:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6476              	 .loc 3 773 0
 6477 006a FB7B     	 ldrb r3,[r7,#15]
 774:../4g_module/mdm_handler.c **** }
 6478              	 .loc 3 774 0
 6479 006c 1846     	 mov r0,r3
 6480 006e 1037     	 adds r7,r7,#16
 6481              	.LCFI64:
 6482              	 .cfi_def_cfa_offset 8
 6483 0070 BD46     	 mov sp,r7
 6484              	.LCFI65:
 6485              	 .cfi_def_cfa_register 13
 6486              	 
 6487 0072 80BD     	 pop {r7,pc}
 6488              	.L94:
 6489              	 .align 2
 6490              	.L93:
 6491 0074 B0000000 	 .word .LC16
 6492 0078 00000000 	 .word lsu8_retryCnt.14803
 6493              	 .cfi_endproc
 6494              	.LFE614:
 6496              	 .section .rodata
 6497 00ba 0000     	 .align 2
 6498              	.LC17:
 6499 00bc 51756563 	 .ascii "Quectel\015\012\000"
 6499      74656C0D 
 6499      0A00
 6500              	 .section .text.mod_extractModInfo,"ax",%progbits
 6501              	 .align 2
 6502              	 .thumb
 6503              	 .thumb_func
 6505              	mod_extractModInfo:
 6506              	.LFB615:
 775:../4g_module/mdm_handler.c **** 
 776:../4g_module/mdm_handler.c **** /**************************************************************************
 777:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractModInfo
 778:../4g_module/mdm_handler.c ****  *
 779:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the module info
 780:../4g_module/mdm_handler.c ****  *
 781:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 782:../4g_module/mdm_handler.c ****  *
 783:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 784:../4g_module/mdm_handler.c ****  *
 785:../4g_module/mdm_handler.c ****  ****************************************************************************/
 786:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractModInfo(void)
 787:../4g_module/mdm_handler.c **** {
 6507              	 .loc 3 787 0
 6508              	 .cfi_startproc
 6509              	 
 6510              	 
 6511 0000 B0B5     	 push {r4,r5,r7,lr}
 6512              	.LCFI66:
 6513              	 .cfi_def_cfa_offset 16
 6514              	 .cfi_offset 4,-16
 6515              	 .cfi_offset 5,-12
 6516              	 .cfi_offset 7,-8
 6517              	 .cfi_offset 14,-4
 6518 0002 84B0     	 sub sp,sp,#16
 6519              	.LCFI67:
 6520              	 .cfi_def_cfa_offset 32
 6521 0004 00AF     	 add r7,sp,#0
 6522              	.LCFI68:
 6523              	 .cfi_def_cfa_register 7
 788:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6524              	 .loc 3 788 0
 6525 0006 0423     	 movs r3,#4
 6526 0008 FB73     	 strb r3,[r7,#15]
 789:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 790:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_temp = NULL;
 6527              	 .loc 3 790 0
 6528 000a 0023     	 movs r3,#0
 6529 000c BB60     	 str r3,[r7,#8]
 791:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 6530              	 .loc 3 791 0
 6531 000e 0023     	 movs r3,#0
 6532 0010 7B60     	 str r3,[r7,#4]
 792:../4g_module/mdm_handler.c **** 
 793:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_FEATCH_MOD_INFO, (uint8_t *) NEW_LINE);
 6533              	 .loc 3 793 0
 6534 0012 0520     	 movs r0,#5
 6535 0014 2749     	 ldr r1,.L104
 6536 0016 FFF7FEFF 	 bl mod_sendCmdGetRsp
 6537 001a 0346     	 mov r3,r0
 6538 001c FB73     	 strb r3,[r7,#15]
 794:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6539              	 .loc 3 794 0
 6540 001e FB7B     	 ldrb r3,[r7,#15]
 6541 0020 002B     	 cmp r3,#0
 6542 0022 2BD1     	 bne .L96
 795:../4g_module/mdm_handler.c **** 	{
 796:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6543              	 .loc 3 796 0
 6544 0024 244B     	 ldr r3,.L104+4
 6545 0026 0022     	 movs r2,#0
 6546 0028 1A70     	 strb r2,[r3]
 797:../4g_module/mdm_handler.c **** 		if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) PRODCUT_NAME)))
 6547              	 .loc 3 797 0
 6548 002a 2448     	 ldr r0,.L104+8
 6549 002c 2449     	 ldr r1,.L104+12
 6550 002e FFF7FEFF 	 bl strstr
 6551 0032 0346     	 mov r3,r0
 6552 0034 002B     	 cmp r3,#0
 6553 0036 1ED0     	 beq .L97
 798:../4g_module/mdm_handler.c **** 		{
 799:../4g_module/mdm_handler.c **** 			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 6554              	 .loc 3 799 0
 6555 0038 3B1D     	 adds r3,r7,#4
 6556 003a 2048     	 ldr r0,.L104+8
 6557 003c 2149     	 ldr r1,.L104+16
 6558 003e 1A46     	 mov r2,r3
 6559 0040 FFF7FEFF 	 bl strtok_r
 6560 0044 B860     	 str r0,[r7,#8]
 800:../4g_module/mdm_handler.c **** 					(const char *) ":", (char **) &lu8p_saveptr);
 801:../4g_module/mdm_handler.c **** 			lu8p_saveptr++;
 6561              	 .loc 3 801 0
 6562 0046 7B68     	 ldr r3,[r7,#4]
 6563 0048 0133     	 adds r3,r3,#1
 6564 004a 7B60     	 str r3,[r7,#4]
 802:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_temp)
 6565              	 .loc 3 802 0
 6566 004c BB68     	 ldr r3,[r7,#8]
 6567 004e 002B     	 cmp r3,#0
 6568 0050 0ED0     	 beq .L98
 803:../4g_module/mdm_handler.c **** 			{
 804:../4g_module/mdm_handler.c **** 				memcpy(gu8arr_productRevision, lu8p_saveptr, PRO_REVISION_SIZE);
 6569              	 .loc 3 804 0
 6570 0052 7B68     	 ldr r3,[r7,#4]
 6571 0054 1C4A     	 ldr r2,.L104+20
 6572 0056 1446     	 mov r4,r2
 6573 0058 1D46     	 mov r5,r3
 6574 005a 2868     	 ldr r0,[r5]
 6575 005c 6968     	 ldr r1,[r5,#4]
 6576 005e AA68     	 ldr r2,[r5,#8]
 6577 0060 EB68     	 ldr r3,[r5,#12]
 6578 0062 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 6579 0064 2B8A     	 ldrh r3,[r5,#16]
 6580 0066 AA7C     	 ldrb r2,[r5,#18]
 6581 0068 2380     	 strh r3,[r4]
 6582 006a 1346     	 mov r3,r2
 6583 006c A370     	 strb r3,[r4,#2]
 6584 006e 1CE0     	 b .L101
 6585              	.L98:
 805:../4g_module/mdm_handler.c **** 			}
 806:../4g_module/mdm_handler.c **** 			else
 807:../4g_module/mdm_handler.c **** 			{
 808:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 6586              	 .loc 3 808 0
 6587 0070 0223     	 movs r3,#2
 6588 0072 FB73     	 strb r3,[r7,#15]
 6589 0074 19E0     	 b .L101
 6590              	.L97:
 809:../4g_module/mdm_handler.c **** 			}
 810:../4g_module/mdm_handler.c **** 		}
 811:../4g_module/mdm_handler.c **** 		else
 812:../4g_module/mdm_handler.c **** 		{
 813:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 6591              	 .loc 3 813 0
 6592 0076 0223     	 movs r3,#2
 6593 0078 FB73     	 strb r3,[r7,#15]
 6594 007a 16E0     	 b .L101
 6595              	.L96:
 814:../4g_module/mdm_handler.c **** 		}
 815:../4g_module/mdm_handler.c **** 	}
 816:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6596              	 .loc 3 816 0
 6597 007c FB7B     	 ldrb r3,[r7,#15]
 6598 007e 042B     	 cmp r3,#4
 6599 0080 13D0     	 beq .L101
 817:../4g_module/mdm_handler.c **** 	{
 818:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6600              	 .loc 3 818 0
 6601 0082 0D4B     	 ldr r3,.L104+4
 6602 0084 1B78     	 ldrb r3,[r3]
 6603 0086 0133     	 adds r3,r3,#1
 6604 0088 DAB2     	 uxtb r2,r3
 6605 008a 0B4B     	 ldr r3,.L104+4
 6606 008c 1A70     	 strb r2,[r3]
 819:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6607              	 .loc 3 819 0
 6608 008e 0A4B     	 ldr r3,.L104+4
 6609 0090 1B78     	 ldrb r3,[r3]
 6610 0092 022B     	 cmp r3,#2
 6611 0094 02D8     	 bhi .L102
 820:../4g_module/mdm_handler.c **** 		{
 821:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6612              	 .loc 3 821 0
 6613 0096 0423     	 movs r3,#4
 6614 0098 FB73     	 strb r3,[r7,#15]
 6615 009a 06E0     	 b .L101
 6616              	.L102:
 822:../4g_module/mdm_handler.c **** 		}
 823:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6617              	 .loc 3 823 0
 6618 009c 064B     	 ldr r3,.L104+4
 6619 009e 1B78     	 ldrb r3,[r3]
 6620 00a0 032B     	 cmp r3,#3
 6621 00a2 02D9     	 bls .L101
 824:../4g_module/mdm_handler.c **** 		{
 825:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6622              	 .loc 3 825 0
 6623 00a4 044B     	 ldr r3,.L104+4
 6624 00a6 0022     	 movs r2,#0
 6625 00a8 1A70     	 strb r2,[r3]
 6626              	.L101:
 826:../4g_module/mdm_handler.c **** 		}
 827:../4g_module/mdm_handler.c **** 	}
 828:../4g_module/mdm_handler.c **** 
 829:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6627              	 .loc 3 829 0
 6628 00aa FB7B     	 ldrb r3,[r7,#15]
 830:../4g_module/mdm_handler.c **** }
 6629              	 .loc 3 830 0
 6630 00ac 1846     	 mov r0,r3
 6631 00ae 1037     	 adds r7,r7,#16
 6632              	.LCFI69:
 6633              	 .cfi_def_cfa_offset 16
 6634 00b0 BD46     	 mov sp,r7
 6635              	.LCFI70:
 6636              	 .cfi_def_cfa_register 13
 6637              	 
 6638 00b2 B0BD     	 pop {r4,r5,r7,pc}
 6639              	.L105:
 6640              	 .align 2
 6641              	.L104:
 6642 00b4 A0000000 	 .word .LC14
 6643 00b8 00000000 	 .word lsu8_retryCnt.14809
 6644 00bc 00000000 	 .word gu8arr_respBuffer
 6645 00c0 BC000000 	 .word .LC17
 6646 00c4 8C000000 	 .word .LC11
 6647 00c8 00000000 	 .word gu8arr_productRevision
 6648              	 .cfi_endproc
 6649              	.LFE615:
 6651              	 .section .text.mod_getModuleInfo,"ax",%progbits
 6652              	 .align 2
 6653              	 .global mod_getModuleInfo
 6654              	 .thumb
 6655              	 .thumb_func
 6657              	mod_getModuleInfo:
 6658              	.LFB616:
 831:../4g_module/mdm_handler.c **** 
 832:../4g_module/mdm_handler.c **** /**************************************************************************
 833:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getModuleInfo
 834:../4g_module/mdm_handler.c ****  *
 835:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the module info
 836:../4g_module/mdm_handler.c ****  *
 837:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t * Pointer points to an array
 838:../4g_module/mdm_handler.c ****  *
 839:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t - length
 840:../4g_module/mdm_handler.c ****  *
 841:../4g_module/mdm_handler.c ****  ****************************************************************************/
 842:../4g_module/mdm_handler.c **** uint8_t mod_getModuleInfo(uint8_t *lu8p_data)
 843:../4g_module/mdm_handler.c **** {
 6659              	 .loc 3 843 0
 6660              	 .cfi_startproc
 6661              	 
 6662              	 
 6663              	 
 6664 0000 B0B4     	 push {r4,r5,r7}
 6665              	.LCFI71:
 6666              	 .cfi_def_cfa_offset 12
 6667              	 .cfi_offset 4,-12
 6668              	 .cfi_offset 5,-8
 6669              	 .cfi_offset 7,-4
 6670 0002 85B0     	 sub sp,sp,#20
 6671              	.LCFI72:
 6672              	 .cfi_def_cfa_offset 32
 6673 0004 00AF     	 add r7,sp,#0
 6674              	.LCFI73:
 6675              	 .cfi_def_cfa_register 7
 6676 0006 7860     	 str r0,[r7,#4]
 844:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 6677              	 .loc 3 844 0
 6678 0008 0023     	 movs r3,#0
 6679 000a FB73     	 strb r3,[r7,#15]
 845:../4g_module/mdm_handler.c **** 
 846:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 6680              	 .loc 3 846 0
 6681 000c 7B68     	 ldr r3,[r7,#4]
 6682 000e 002B     	 cmp r3,#0
 6683 0010 0FD0     	 beq .L107
 847:../4g_module/mdm_handler.c **** 	{
 848:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8arr_productRevision, PRO_REVISION_SIZE);
 6684              	 .loc 3 848 0
 6685 0012 7B68     	 ldr r3,[r7,#4]
 6686 0014 0A4A     	 ldr r2,.L109
 6687 0016 1D46     	 mov r5,r3
 6688 0018 1446     	 mov r4,r2
 6689 001a 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 6690 001c 2860     	 str r0,[r5]
 6691 001e 6960     	 str r1,[r5,#4]
 6692 0020 AA60     	 str r2,[r5,#8]
 6693 0022 EB60     	 str r3,[r5,#12]
 6694 0024 2388     	 ldrh r3,[r4]
 6695 0026 A278     	 ldrb r2,[r4,#2]
 6696 0028 2B82     	 strh r3,[r5,#16]
 6697 002a 1346     	 mov r3,r2
 6698 002c AB74     	 strb r3,[r5,#18]
 849:../4g_module/mdm_handler.c **** 		lu8_ret = PRO_REVISION_SIZE;
 6699              	 .loc 3 849 0
 6700 002e 1323     	 movs r3,#19
 6701 0030 FB73     	 strb r3,[r7,#15]
 6702              	.L107:
 850:../4g_module/mdm_handler.c **** 	}
 851:../4g_module/mdm_handler.c **** 
 852:../4g_module/mdm_handler.c **** 	return lu8_ret;
 6703              	 .loc 3 852 0
 6704 0032 FB7B     	 ldrb r3,[r7,#15]
 853:../4g_module/mdm_handler.c **** }
 6705              	 .loc 3 853 0
 6706 0034 1846     	 mov r0,r3
 6707 0036 1437     	 adds r7,r7,#20
 6708              	.LCFI74:
 6709              	 .cfi_def_cfa_offset 12
 6710 0038 BD46     	 mov sp,r7
 6711              	.LCFI75:
 6712              	 .cfi_def_cfa_register 13
 6713              	 
 6714 003a B0BC     	 pop {r4,r5,r7}
 6715              	.LCFI76:
 6716              	 .cfi_restore 7
 6717              	 .cfi_restore 5
 6718              	 .cfi_restore 4
 6719              	 .cfi_def_cfa_offset 0
 6720 003c 7047     	 bx lr
 6721              	.L110:
 6722 003e 00BF     	 .align 2
 6723              	.L109:
 6724 0040 00000000 	 .word gu8arr_productRevision
 6725              	 .cfi_endproc
 6726              	.LFE616:
 6728              	 .section .rodata
 6729 00c6 0000     	 .align 2
 6730              	.LC18:
 6731 00c8 312C300D 	 .ascii "1,0\015\012\000"
 6731      0A00
 6732 00ce 00000000 	 .space 4
 6733              	 .section .text.mod_enableSimDetection,"ax",%progbits
 6734              	 .align 2
 6735              	 .thumb
 6736              	 .thumb_func
 6738              	mod_enableSimDetection:
 6739              	.LFB617:
 854:../4g_module/mdm_handler.c **** 
 855:../4g_module/mdm_handler.c **** /**************************************************************************
 856:../4g_module/mdm_handler.c ****  * Function Name	:	mod_enableSimDetection
 857:../4g_module/mdm_handler.c ****  *
 858:../4g_module/mdm_handler.c ****  * Description   	:	This function enables the SIM detection
 859:../4g_module/mdm_handler.c ****  *
 860:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 861:../4g_module/mdm_handler.c ****  *
 862:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 863:../4g_module/mdm_handler.c ****  *
 864:../4g_module/mdm_handler.c ****  ****************************************************************************/
 865:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_enableSimDetection(void)
 866:../4g_module/mdm_handler.c **** {
 6740              	 .loc 3 866 0
 6741              	 .cfi_startproc
 6742              	 
 6743              	 
 6744 0000 80B5     	 push {r7,lr}
 6745              	.LCFI77:
 6746              	 .cfi_def_cfa_offset 8
 6747              	 .cfi_offset 7,-8
 6748              	 .cfi_offset 14,-4
 6749 0002 84B0     	 sub sp,sp,#16
 6750              	.LCFI78:
 6751              	 .cfi_def_cfa_offset 24
 6752 0004 00AF     	 add r7,sp,#0
 6753              	.LCFI79:
 6754              	 .cfi_def_cfa_register 7
 867:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6755              	 .loc 3 867 0
 6756 0006 0423     	 movs r3,#4
 6757 0008 FB73     	 strb r3,[r7,#15]
 868:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 869:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[10] = "1,0\r\n";
 6758              	 .loc 3 869 0
 6759 000a 1A4A     	 ldr r2,.L116
 6760 000c 3B1D     	 adds r3,r7,#4
 6761 000e 92E80300 	 ldmia r2,{r0,r1}
 6762 0012 1860     	 str r0,[r3]
 6763 0014 0433     	 adds r3,r3,#4
 6764 0016 1980     	 strh r1,[r3]
 6765 0018 0023     	 movs r3,#0
 6766 001a 7B81     	 strh r3,[r7,#10]
 6767 001c 0023     	 movs r3,#0
 6768 001e BB81     	 strh r3,[r7,#12]
 870:../4g_module/mdm_handler.c **** 
 871:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_DETECTION, lu8arr_param);
 6769              	 .loc 3 871 0
 6770 0020 3B1D     	 adds r3,r7,#4
 6771 0022 0620     	 movs r0,#6
 6772 0024 1946     	 mov r1,r3
 6773 0026 FFF7FEFF 	 bl mod_sendCmdGetRsp
 6774 002a 0346     	 mov r3,r0
 6775 002c FB73     	 strb r3,[r7,#15]
 872:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6776              	 .loc 3 872 0
 6777 002e FB7B     	 ldrb r3,[r7,#15]
 6778 0030 002B     	 cmp r3,#0
 6779 0032 03D1     	 bne .L112
 873:../4g_module/mdm_handler.c **** 	{
 874:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6780              	 .loc 3 874 0
 6781 0034 104B     	 ldr r3,.L116+4
 6782 0036 0022     	 movs r2,#0
 6783 0038 1A70     	 strb r2,[r3]
 6784 003a 16E0     	 b .L113
 6785              	.L112:
 875:../4g_module/mdm_handler.c **** 	}
 876:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6786              	 .loc 3 876 0
 6787 003c FB7B     	 ldrb r3,[r7,#15]
 6788 003e 042B     	 cmp r3,#4
 6789 0040 13D0     	 beq .L113
 877:../4g_module/mdm_handler.c **** 	{
 878:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6790              	 .loc 3 878 0
 6791 0042 0D4B     	 ldr r3,.L116+4
 6792 0044 1B78     	 ldrb r3,[r3]
 6793 0046 0133     	 adds r3,r3,#1
 6794 0048 DAB2     	 uxtb r2,r3
 6795 004a 0B4B     	 ldr r3,.L116+4
 6796 004c 1A70     	 strb r2,[r3]
 879:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6797              	 .loc 3 879 0
 6798 004e 0A4B     	 ldr r3,.L116+4
 6799 0050 1B78     	 ldrb r3,[r3]
 6800 0052 022B     	 cmp r3,#2
 6801 0054 02D8     	 bhi .L114
 880:../4g_module/mdm_handler.c **** 		{
 881:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6802              	 .loc 3 881 0
 6803 0056 0423     	 movs r3,#4
 6804 0058 FB73     	 strb r3,[r7,#15]
 6805 005a 06E0     	 b .L113
 6806              	.L114:
 882:../4g_module/mdm_handler.c **** 		}
 883:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6807              	 .loc 3 883 0
 6808 005c 064B     	 ldr r3,.L116+4
 6809 005e 1B78     	 ldrb r3,[r3]
 6810 0060 032B     	 cmp r3,#3
 6811 0062 02D9     	 bls .L113
 884:../4g_module/mdm_handler.c **** 		{
 885:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6812              	 .loc 3 885 0
 6813 0064 044B     	 ldr r3,.L116+4
 6814 0066 0022     	 movs r2,#0
 6815 0068 1A70     	 strb r2,[r3]
 6816              	.L113:
 886:../4g_module/mdm_handler.c **** 		}
 887:../4g_module/mdm_handler.c **** 	}
 888:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6817              	 .loc 3 888 0
 6818 006a FB7B     	 ldrb r3,[r7,#15]
 889:../4g_module/mdm_handler.c **** }
 6819              	 .loc 3 889 0
 6820 006c 1846     	 mov r0,r3
 6821 006e 1037     	 adds r7,r7,#16
 6822              	.LCFI80:
 6823              	 .cfi_def_cfa_offset 8
 6824 0070 BD46     	 mov sp,r7
 6825              	.LCFI81:
 6826              	 .cfi_def_cfa_register 13
 6827              	 
 6828 0072 80BD     	 pop {r7,pc}
 6829              	.L117:
 6830              	 .align 2
 6831              	.L116:
 6832 0074 C8000000 	 .word .LC18
 6833 0078 00000000 	 .word lsu8_retryCnt.14820
 6834              	 .cfi_endproc
 6835              	.LFE617:
 6837              	 .section .text.mod_enableSimStatusReport,"ax",%progbits
 6838              	 .align 2
 6839              	 .thumb
 6840              	 .thumb_func
 6842              	mod_enableSimStatusReport:
 6843              	.LFB618:
 890:../4g_module/mdm_handler.c **** 
 891:../4g_module/mdm_handler.c **** /**************************************************************************
 892:../4g_module/mdm_handler.c ****  * Function Name	:	mod_enableSimStatusReport
 893:../4g_module/mdm_handler.c ****  *
 894:../4g_module/mdm_handler.c ****  * Description   	:	This function enables the SIM status report
 895:../4g_module/mdm_handler.c ****  *
 896:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 897:../4g_module/mdm_handler.c ****  *
 898:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 899:../4g_module/mdm_handler.c ****  *
 900:../4g_module/mdm_handler.c ****  ****************************************************************************/
 901:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_enableSimStatusReport(void)
 902:../4g_module/mdm_handler.c **** {
 6844              	 .loc 3 902 0
 6845              	 .cfi_startproc
 6846              	 
 6847              	 
 6848 0000 80B5     	 push {r7,lr}
 6849              	.LCFI82:
 6850              	 .cfi_def_cfa_offset 8
 6851              	 .cfi_offset 7,-8
 6852              	 .cfi_offset 14,-4
 6853 0002 84B0     	 sub sp,sp,#16
 6854              	.LCFI83:
 6855              	 .cfi_def_cfa_offset 24
 6856 0004 00AF     	 add r7,sp,#0
 6857              	.LCFI84:
 6858              	 .cfi_def_cfa_register 7
 903:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6859              	 .loc 3 903 0
 6860 0006 0423     	 movs r3,#4
 6861 0008 FB73     	 strb r3,[r7,#15]
 904:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 905:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[10] = "1\r\n";
 6862              	 .loc 3 905 0
 6863 000a 184B     	 ldr r3,.L123
 6864 000c 7B60     	 str r3,[r7,#4]
 6865 000e 0023     	 movs r3,#0
 6866 0010 BB60     	 str r3,[r7,#8]
 6867 0012 0023     	 movs r3,#0
 6868 0014 BB81     	 strh r3,[r7,#12]
 906:../4g_module/mdm_handler.c **** 
 907:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_STATUS, lu8arr_param);
 6869              	 .loc 3 907 0
 6870 0016 3B1D     	 adds r3,r7,#4
 6871 0018 0720     	 movs r0,#7
 6872 001a 1946     	 mov r1,r3
 6873 001c FFF7FEFF 	 bl mod_sendCmdGetRsp
 6874 0020 0346     	 mov r3,r0
 6875 0022 FB73     	 strb r3,[r7,#15]
 908:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6876              	 .loc 3 908 0
 6877 0024 FB7B     	 ldrb r3,[r7,#15]
 6878 0026 002B     	 cmp r3,#0
 6879 0028 03D1     	 bne .L119
 909:../4g_module/mdm_handler.c **** 	{
 910:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6880              	 .loc 3 910 0
 6881 002a 114B     	 ldr r3,.L123+4
 6882 002c 0022     	 movs r2,#0
 6883 002e 1A70     	 strb r2,[r3]
 6884 0030 16E0     	 b .L120
 6885              	.L119:
 911:../4g_module/mdm_handler.c **** 	}
 912:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 6886              	 .loc 3 912 0
 6887 0032 FB7B     	 ldrb r3,[r7,#15]
 6888 0034 042B     	 cmp r3,#4
 6889 0036 13D0     	 beq .L120
 913:../4g_module/mdm_handler.c **** 	{
 914:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 6890              	 .loc 3 914 0
 6891 0038 0D4B     	 ldr r3,.L123+4
 6892 003a 1B78     	 ldrb r3,[r3]
 6893 003c 0133     	 adds r3,r3,#1
 6894 003e DAB2     	 uxtb r2,r3
 6895 0040 0B4B     	 ldr r3,.L123+4
 6896 0042 1A70     	 strb r2,[r3]
 915:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 6897              	 .loc 3 915 0
 6898 0044 0A4B     	 ldr r3,.L123+4
 6899 0046 1B78     	 ldrb r3,[r3]
 6900 0048 022B     	 cmp r3,#2
 6901 004a 02D8     	 bhi .L121
 916:../4g_module/mdm_handler.c **** 		{
 917:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 6902              	 .loc 3 917 0
 6903 004c 0423     	 movs r3,#4
 6904 004e FB73     	 strb r3,[r7,#15]
 6905 0050 06E0     	 b .L120
 6906              	.L121:
 918:../4g_module/mdm_handler.c **** 		}
 919:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 6907              	 .loc 3 919 0
 6908 0052 074B     	 ldr r3,.L123+4
 6909 0054 1B78     	 ldrb r3,[r3]
 6910 0056 032B     	 cmp r3,#3
 6911 0058 02D9     	 bls .L120
 920:../4g_module/mdm_handler.c **** 		{
 921:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 6912              	 .loc 3 921 0
 6913 005a 054B     	 ldr r3,.L123+4
 6914 005c 0022     	 movs r2,#0
 6915 005e 1A70     	 strb r2,[r3]
 6916              	.L120:
 922:../4g_module/mdm_handler.c **** 		}
 923:../4g_module/mdm_handler.c **** 	}
 924:../4g_module/mdm_handler.c **** 	return len_retStatus;
 6917              	 .loc 3 924 0
 6918 0060 FB7B     	 ldrb r3,[r7,#15]
 925:../4g_module/mdm_handler.c **** }
 6919              	 .loc 3 925 0
 6920 0062 1846     	 mov r0,r3
 6921 0064 1037     	 adds r7,r7,#16
 6922              	.LCFI85:
 6923              	 .cfi_def_cfa_offset 8
 6924 0066 BD46     	 mov sp,r7
 6925              	.LCFI86:
 6926              	 .cfi_def_cfa_register 13
 6927              	 
 6928 0068 80BD     	 pop {r7,pc}
 6929              	.L124:
 6930 006a 00BF     	 .align 2
 6931              	.L123:
 6932 006c 310D0A00 	 .word 658737
 6933 0070 00000000 	 .word lsu8_retryCnt.14826
 6934              	 .cfi_endproc
 6935              	.LFE618:
 6937              	 .section .rodata
 6938 00d2 0000     	 .align 2
 6939              	.LC19:
 6940 00d4 2C00     	 .ascii ",\000"
 6941              	 .section .text.mod_checkSimStatus,"ax",%progbits
 6942              	 .align 2
 6943              	 .thumb
 6944              	 .thumb_func
 6946              	mod_checkSimStatus:
 6947              	.LFB619:
 926:../4g_module/mdm_handler.c **** 
 927:../4g_module/mdm_handler.c **** /**************************************************************************
 928:../4g_module/mdm_handler.c ****  * Function Name	:	mod_checkSimStatus
 929:../4g_module/mdm_handler.c ****  *
 930:../4g_module/mdm_handler.c ****  * Description   	:	This function checks the status of the SIM
 931:../4g_module/mdm_handler.c ****  *
 932:../4g_module/mdm_handler.c ****  * Arguments     	:	void
 933:../4g_module/mdm_handler.c ****  *
 934:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
 935:../4g_module/mdm_handler.c ****  *
 936:../4g_module/mdm_handler.c ****  ****************************************************************************/
 937:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_checkSimStatus(void)
 938:../4g_module/mdm_handler.c **** {
 6948              	 .loc 3 938 0
 6949              	 .cfi_startproc
 6950              	 
 6951              	 
 6952 0000 80B5     	 push {r7,lr}
 6953              	.LCFI87:
 6954              	 .cfi_def_cfa_offset 8
 6955              	 .cfi_offset 7,-8
 6956              	 .cfi_offset 14,-4
 6957 0002 84B0     	 sub sp,sp,#16
 6958              	.LCFI88:
 6959              	 .cfi_def_cfa_offset 24
 6960 0004 00AF     	 add r7,sp,#0
 6961              	.LCFI89:
 6962              	 .cfi_def_cfa_register 7
 939:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 6963              	 .loc 3 939 0
 6964 0006 0423     	 movs r3,#4
 6965 0008 FB73     	 strb r3,[r7,#15]
 940:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
 941:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_temp = NULL;
 6966              	 .loc 3 941 0
 6967 000a 0023     	 movs r3,#0
 6968 000c BB60     	 str r3,[r7,#8]
 942:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 6969              	 .loc 3 942 0
 6970 000e 0023     	 movs r3,#0
 6971 0010 7B60     	 str r3,[r7,#4]
 943:../4g_module/mdm_handler.c **** 
 944:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
 6972              	 .loc 3 944 0
 6973 0012 0820     	 movs r0,#8
 6974 0014 3349     	 ldr r1,.L138
 6975 0016 FFF7FEFF 	 bl mod_sendCmdGetRsp
 6976 001a 0346     	 mov r3,r0
 6977 001c FB73     	 strb r3,[r7,#15]
 945:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 6978              	 .loc 3 945 0
 6979 001e FB7B     	 ldrb r3,[r7,#15]
 6980 0020 002B     	 cmp r3,#0
 6981 0022 43D1     	 bne .L126
 946:../4g_module/mdm_handler.c **** 	{
 947:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 6982              	 .loc 3 947 0
 6983 0024 304B     	 ldr r3,.L138+4
 6984 0026 0022     	 movs r2,#0
 6985 0028 1A70     	 strb r2,[r3]
 948:../4g_module/mdm_handler.c **** 		if ((NULL
 949:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 6986              	 .loc 3 949 0
 6987 002a 3048     	 ldr r0,.L138+8
 6988 002c 3049     	 ldr r1,.L138+12
 6989 002e FFF7FEFF 	 bl strstr
 6990 0032 0346     	 mov r3,r0
 948:../4g_module/mdm_handler.c **** 		if ((NULL
 6991              	 .loc 3 948 0
 6992 0034 002B     	 cmp r3,#0
 6993 0036 36D0     	 beq .L127
 950:../4g_module/mdm_handler.c **** 						(const char*) gcst_ATCmdTable[E_IDX_CHECK_SIM_STATUS].mu8arr_otherRspString)))
 951:../4g_module/mdm_handler.c **** 		{
 952:../4g_module/mdm_handler.c **** 			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 6994              	 .loc 3 952 0
 6995 0038 3B1D     	 adds r3,r7,#4
 6996 003a 2C48     	 ldr r0,.L138+8
 6997 003c 2D49     	 ldr r1,.L138+16
 6998 003e 1A46     	 mov r2,r3
 6999 0040 FFF7FEFF 	 bl strtok_r
 7000 0044 B860     	 str r0,[r7,#8]
 953:../4g_module/mdm_handler.c **** 					(const char *) ":", (char **) &lu8p_saveptr);
 954:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_temp)
 7001              	 .loc 3 954 0
 7002 0046 BB68     	 ldr r3,[r7,#8]
 7003 0048 002B     	 cmp r3,#0
 7004 004a 29D0     	 beq .L128
 955:../4g_module/mdm_handler.c **** 			{
 956:../4g_module/mdm_handler.c **** 				lu8p_temp = (uint8_t *) strchr((const char*) lu8p_saveptr, ',');
 7005              	 .loc 3 956 0
 7006 004c 7B68     	 ldr r3,[r7,#4]
 7007 004e 1846     	 mov r0,r3
 7008 0050 2C21     	 movs r1,#44
 7009 0052 FFF7FEFF 	 bl strchr
 7010 0056 B860     	 str r0,[r7,#8]
 957:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_temp)
 7011              	 .loc 3 957 0
 7012 0058 BB68     	 ldr r3,[r7,#8]
 7013 005a 002B     	 cmp r3,#0
 7014 005c 1DD0     	 beq .L129
 958:../4g_module/mdm_handler.c **** 				{
 959:../4g_module/mdm_handler.c **** 					lu8p_temp = (uint8_t *) strtok_r(NULL, (const char *) ",",
 7015              	 .loc 3 959 0
 7016 005e 3B1D     	 adds r3,r7,#4
 7017 0060 0020     	 movs r0,#0
 7018 0062 2549     	 ldr r1,.L138+20
 7019 0064 1A46     	 mov r2,r3
 7020 0066 FFF7FEFF 	 bl strtok_r
 7021 006a B860     	 str r0,[r7,#8]
 960:../4g_module/mdm_handler.c **** 							(char **) &lu8p_saveptr);
 961:../4g_module/mdm_handler.c **** 
 962:../4g_module/mdm_handler.c **** 					gst_deviceStatus.mb_isSimInserted = (uint8_t) atoi(
 7022              	 .loc 3 962 0
 7023 006c 7B68     	 ldr r3,[r7,#4]
 7024 006e 1846     	 mov r0,r3
 7025 0070 FFF7FEFF 	 bl atoi
 7026 0074 0346     	 mov r3,r0
 7027 0076 DBB2     	 uxtb r3,r3
 7028 0078 002B     	 cmp r3,#0
 7029 007a 14BF     	 ite ne
 7030 007c 0123     	 movne r3,#1
 7031 007e 0023     	 moveq r3,#0
 7032 0080 DAB2     	 uxtb r2,r3
 7033 0082 1E4B     	 ldr r3,.L138+24
 7034 0084 5A70     	 strb r2,[r3,#1]
 963:../4g_module/mdm_handler.c **** 							(const char*) lu8p_saveptr);
 964:../4g_module/mdm_handler.c **** 
 965:../4g_module/mdm_handler.c **** 					if (true == gst_deviceStatus.mb_isSimInserted)
 7035              	 .loc 3 965 0
 7036 0086 1D4B     	 ldr r3,.L138+24
 7037 0088 5B78     	 ldrb r3,[r3,#1]
 7038 008a 002B     	 cmp r3,#0
 7039 008c 02D0     	 beq .L130
 966:../4g_module/mdm_handler.c **** 					{
 967:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 7040              	 .loc 3 967 0
 7041 008e 0023     	 movs r3,#0
 7042 0090 FB73     	 strb r3,[r7,#15]
 7043 0092 22E0     	 b .L135
 7044              	.L130:
 968:../4g_module/mdm_handler.c **** 					}
 969:../4g_module/mdm_handler.c **** 					else
 970:../4g_module/mdm_handler.c **** 					{
 971:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_INPROGRESS;
 7045              	 .loc 3 971 0
 7046 0094 0423     	 movs r3,#4
 7047 0096 FB73     	 strb r3,[r7,#15]
 7048 0098 1FE0     	 b .L135
 7049              	.L129:
 972:../4g_module/mdm_handler.c **** 					}
 973:../4g_module/mdm_handler.c **** 				}
 974:../4g_module/mdm_handler.c **** 				else
 975:../4g_module/mdm_handler.c **** 				{
 976:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 7050              	 .loc 3 976 0
 7051 009a 0223     	 movs r3,#2
 7052 009c FB73     	 strb r3,[r7,#15]
 7053 009e 1CE0     	 b .L135
 7054              	.L128:
 977:../4g_module/mdm_handler.c **** 				}
 978:../4g_module/mdm_handler.c **** 			}
 979:../4g_module/mdm_handler.c **** 			else
 980:../4g_module/mdm_handler.c **** 			{
 981:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 7055              	 .loc 3 981 0
 7056 00a0 0223     	 movs r3,#2
 7057 00a2 FB73     	 strb r3,[r7,#15]
 7058 00a4 19E0     	 b .L135
 7059              	.L127:
 982:../4g_module/mdm_handler.c **** 			}
 983:../4g_module/mdm_handler.c **** 		}
 984:../4g_module/mdm_handler.c **** 		else
 985:../4g_module/mdm_handler.c **** 		{
 986:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 7060              	 .loc 3 986 0
 7061 00a6 0223     	 movs r3,#2
 7062 00a8 FB73     	 strb r3,[r7,#15]
 7063 00aa 16E0     	 b .L135
 7064              	.L126:
 987:../4g_module/mdm_handler.c **** 		}
 988:../4g_module/mdm_handler.c **** 	}
 989:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 7065              	 .loc 3 989 0
 7066 00ac FB7B     	 ldrb r3,[r7,#15]
 7067 00ae 042B     	 cmp r3,#4
 7068 00b0 13D0     	 beq .L135
 990:../4g_module/mdm_handler.c **** 	{
 991:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 7069              	 .loc 3 991 0
 7070 00b2 0D4B     	 ldr r3,.L138+4
 7071 00b4 1B78     	 ldrb r3,[r3]
 7072 00b6 0133     	 adds r3,r3,#1
 7073 00b8 DAB2     	 uxtb r2,r3
 7074 00ba 0B4B     	 ldr r3,.L138+4
 7075 00bc 1A70     	 strb r2,[r3]
 992:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 7076              	 .loc 3 992 0
 7077 00be 0A4B     	 ldr r3,.L138+4
 7078 00c0 1B78     	 ldrb r3,[r3]
 7079 00c2 022B     	 cmp r3,#2
 7080 00c4 02D8     	 bhi .L136
 993:../4g_module/mdm_handler.c **** 		{
 994:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 7081              	 .loc 3 994 0
 7082 00c6 0423     	 movs r3,#4
 7083 00c8 FB73     	 strb r3,[r7,#15]
 7084 00ca 06E0     	 b .L135
 7085              	.L136:
 995:../4g_module/mdm_handler.c **** 		}
 996:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 7086              	 .loc 3 996 0
 7087 00cc 064B     	 ldr r3,.L138+4
 7088 00ce 1B78     	 ldrb r3,[r3]
 7089 00d0 032B     	 cmp r3,#3
 7090 00d2 02D9     	 bls .L135
 997:../4g_module/mdm_handler.c **** 		{
 998:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 7091              	 .loc 3 998 0
 7092 00d4 044B     	 ldr r3,.L138+4
 7093 00d6 0022     	 movs r2,#0
 7094 00d8 1A70     	 strb r2,[r3]
 7095              	.L135:
 999:../4g_module/mdm_handler.c **** 		}
1000:../4g_module/mdm_handler.c **** 	}
1001:../4g_module/mdm_handler.c **** 	return len_retStatus;
 7096              	 .loc 3 1001 0
 7097 00da FB7B     	 ldrb r3,[r7,#15]
1002:../4g_module/mdm_handler.c **** }
 7098              	 .loc 3 1002 0
 7099 00dc 1846     	 mov r0,r3
 7100 00de 1037     	 adds r7,r7,#16
 7101              	.LCFI90:
 7102              	 .cfi_def_cfa_offset 8
 7103 00e0 BD46     	 mov sp,r7
 7104              	.LCFI91:
 7105              	 .cfi_def_cfa_register 13
 7106              	 
 7107 00e2 80BD     	 pop {r7,pc}
 7108              	.L139:
 7109              	 .align 2
 7110              	.L138:
 7111 00e4 A0000000 	 .word .LC14
 7112 00e8 00000000 	 .word lsu8_retryCnt.14832
 7113 00ec 00000000 	 .word gu8arr_respBuffer
 7114 00f0 5A290000 	 .word gcst_ATCmdTable+10586
 7115 00f4 8C000000 	 .word .LC11
 7116 00f8 D4000000 	 .word .LC19
 7117 00fc 00000000 	 .word gst_deviceStatus
 7118              	 .cfi_endproc
 7119              	.LFE619:
 7121              	 .section .rodata
 7122 00d6 0000     	 .align 2
 7123              	.LC20:
 7124 00d8 52454144 	 .ascii "READY\000"
 7124      5900
 7125              	 .section .text.mod_cpinCheck,"ax",%progbits
 7126              	 .align 2
 7127              	 .thumb
 7128              	 .thumb_func
 7130              	mod_cpinCheck:
 7131              	.LFB620:
1003:../4g_module/mdm_handler.c **** 
1004:../4g_module/mdm_handler.c **** /**************************************************************************
1005:../4g_module/mdm_handler.c ****  * Function Name	:	mod_cpinCheck
1006:../4g_module/mdm_handler.c ****  *
1007:../4g_module/mdm_handler.c ****  * Description   	:	This function checks the CPIN command
1008:../4g_module/mdm_handler.c ****  *
1009:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1010:../4g_module/mdm_handler.c ****  *
1011:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1012:../4g_module/mdm_handler.c ****  *
1013:../4g_module/mdm_handler.c ****  ****************************************************************************/
1014:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_cpinCheck(void)
1015:../4g_module/mdm_handler.c **** {
 7132              	 .loc 3 1015 0
 7133              	 .cfi_startproc
 7134              	 
 7135              	 
 7136 0000 80B5     	 push {r7,lr}
 7137              	.LCFI92:
 7138              	 .cfi_def_cfa_offset 8
 7139              	 .cfi_offset 7,-8
 7140              	 .cfi_offset 14,-4
 7141 0002 82B0     	 sub sp,sp,#8
 7142              	.LCFI93:
 7143              	 .cfi_def_cfa_offset 16
 7144 0004 00AF     	 add r7,sp,#0
 7145              	.LCFI94:
 7146              	 .cfi_def_cfa_register 7
1016:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 7147              	 .loc 3 1016 0
 7148 0006 0423     	 movs r3,#4
 7149 0008 FB71     	 strb r3,[r7,#7]
1017:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1018:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 7150              	 .loc 3 1018 0
 7151 000a 0023     	 movs r3,#0
 7152 000c 3B60     	 str r3,[r7]
1019:../4g_module/mdm_handler.c **** 
1020:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_CPIN_CHECK, (uint8_t *) NEW_LINE);
 7153              	 .loc 3 1020 0
 7154 000e 0920     	 movs r0,#9
 7155 0010 1A49     	 ldr r1,.L147
 7156 0012 FFF7FEFF 	 bl mod_sendCmdGetRsp
 7157 0016 0346     	 mov r3,r0
 7158 0018 FB71     	 strb r3,[r7,#7]
1021:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 7159              	 .loc 3 1021 0
 7160 001a FB79     	 ldrb r3,[r7,#7]
 7161 001c 002B     	 cmp r3,#0
 7162 001e 10D1     	 bne .L141
1022:../4g_module/mdm_handler.c **** 	{
1023:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 7163              	 .loc 3 1023 0
 7164 0020 174B     	 ldr r3,.L147+4
 7165 0022 0022     	 movs r2,#0
 7166 0024 1A70     	 strb r2,[r3]
1024:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "READY");
 7167              	 .loc 3 1024 0
 7168 0026 1748     	 ldr r0,.L147+8
 7169 0028 1749     	 ldr r1,.L147+12
 7170 002a FFF7FEFF 	 bl strstr
 7171 002e 3860     	 str r0,[r7]
1025:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 7172              	 .loc 3 1025 0
 7173 0030 3B68     	 ldr r3,[r7]
 7174 0032 002B     	 cmp r3,#0
 7175 0034 02D0     	 beq .L142
1026:../4g_module/mdm_handler.c **** 		{
1027:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 7176              	 .loc 3 1027 0
 7177 0036 0023     	 movs r3,#0
 7178 0038 FB71     	 strb r3,[r7,#7]
 7179 003a 19E0     	 b .L144
 7180              	.L142:
1028:../4g_module/mdm_handler.c **** 		}
1029:../4g_module/mdm_handler.c **** 		else
1030:../4g_module/mdm_handler.c **** 		{
1031:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 7181              	 .loc 3 1031 0
 7182 003c 0223     	 movs r3,#2
 7183 003e FB71     	 strb r3,[r7,#7]
 7184 0040 16E0     	 b .L144
 7185              	.L141:
1032:../4g_module/mdm_handler.c **** 		}
1033:../4g_module/mdm_handler.c **** 	}
1034:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 7186              	 .loc 3 1034 0
 7187 0042 FB79     	 ldrb r3,[r7,#7]
 7188 0044 042B     	 cmp r3,#4
 7189 0046 13D0     	 beq .L144
1035:../4g_module/mdm_handler.c **** 	{
1036:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 7190              	 .loc 3 1036 0
 7191 0048 0D4B     	 ldr r3,.L147+4
 7192 004a 1B78     	 ldrb r3,[r3]
 7193 004c 0133     	 adds r3,r3,#1
 7194 004e DAB2     	 uxtb r2,r3
 7195 0050 0B4B     	 ldr r3,.L147+4
 7196 0052 1A70     	 strb r2,[r3]
1037:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 7197              	 .loc 3 1037 0
 7198 0054 0A4B     	 ldr r3,.L147+4
 7199 0056 1B78     	 ldrb r3,[r3]
 7200 0058 022B     	 cmp r3,#2
 7201 005a 02D8     	 bhi .L145
1038:../4g_module/mdm_handler.c **** 		{
1039:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 7202              	 .loc 3 1039 0
 7203 005c 0423     	 movs r3,#4
 7204 005e FB71     	 strb r3,[r7,#7]
 7205 0060 06E0     	 b .L144
 7206              	.L145:
1040:../4g_module/mdm_handler.c **** 		}
1041:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 7207              	 .loc 3 1041 0
 7208 0062 074B     	 ldr r3,.L147+4
 7209 0064 1B78     	 ldrb r3,[r3]
 7210 0066 032B     	 cmp r3,#3
 7211 0068 02D9     	 bls .L144
1042:../4g_module/mdm_handler.c **** 		{
1043:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 7212              	 .loc 3 1043 0
 7213 006a 054B     	 ldr r3,.L147+4
 7214 006c 0022     	 movs r2,#0
 7215 006e 1A70     	 strb r2,[r3]
 7216              	.L144:
1044:../4g_module/mdm_handler.c **** 		}
1045:../4g_module/mdm_handler.c **** 	}
1046:../4g_module/mdm_handler.c **** 	return len_retStatus;
 7217              	 .loc 3 1046 0
 7218 0070 FB79     	 ldrb r3,[r7,#7]
1047:../4g_module/mdm_handler.c **** }
 7219              	 .loc 3 1047 0
 7220 0072 1846     	 mov r0,r3
 7221 0074 0837     	 adds r7,r7,#8
 7222              	.LCFI95:
 7223              	 .cfi_def_cfa_offset 8
 7224 0076 BD46     	 mov sp,r7
 7225              	.LCFI96:
 7226              	 .cfi_def_cfa_register 13
 7227              	 
 7228 0078 80BD     	 pop {r7,pc}
 7229              	.L148:
 7230 007a 00BF     	 .align 2
 7231              	.L147:
 7232 007c A0000000 	 .word .LC14
 7233 0080 00000000 	 .word lsu8_retryCnt.14839
 7234 0084 00000000 	 .word gu8arr_respBuffer
 7235 0088 D8000000 	 .word .LC20
 7236              	 .cfi_endproc
 7237              	.LFE620:
 7239              	 .section .text.mod_extractIMEI,"ax",%progbits
 7240              	 .align 2
 7241              	 .thumb
 7242              	 .thumb_func
 7244              	mod_extractIMEI:
 7245              	.LFB621:
1048:../4g_module/mdm_handler.c **** 
1049:../4g_module/mdm_handler.c **** /**************************************************************************
1050:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractIMEI
1051:../4g_module/mdm_handler.c ****  *
1052:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the IMEI number and saves the
1053:../4g_module/mdm_handler.c ****  * 						IMEI number to global buffer
1054:../4g_module/mdm_handler.c ****  *
1055:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1056:../4g_module/mdm_handler.c ****  *
1057:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1058:../4g_module/mdm_handler.c ****  *
1059:../4g_module/mdm_handler.c ****  ****************************************************************************/
1060:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractIMEI(void)
1061:../4g_module/mdm_handler.c **** {
 7246              	 .loc 3 1061 0
 7247              	 .cfi_startproc
 7248              	 
 7249              	 
 7250 0000 90B5     	 push {r4,r7,lr}
 7251              	.LCFI97:
 7252              	 .cfi_def_cfa_offset 12
 7253              	 .cfi_offset 4,-12
 7254              	 .cfi_offset 7,-8
 7255              	 .cfi_offset 14,-4
 7256 0002 87B0     	 sub sp,sp,#28
 7257              	.LCFI98:
 7258              	 .cfi_def_cfa_offset 40
 7259 0004 00AF     	 add r7,sp,#0
 7260              	.LCFI99:
 7261              	 .cfi_def_cfa_register 7
1062:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 7262              	 .loc 3 1062 0
 7263 0006 0423     	 movs r3,#4
 7264 0008 FB75     	 strb r3,[r7,#23]
1063:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1064:../4g_module/mdm_handler.c **** 	uint8_t lu8_index = 0;
 7265              	 .loc 3 1064 0
 7266 000a 0023     	 movs r3,#0
 7267 000c BB75     	 strb r3,[r7,#22]
1065:../4g_module/mdm_handler.c **** 	uint8_t lu8ar_TempIMEI[IMEI_SIZE] = { 0 };
 7268              	 .loc 3 1065 0
 7269 000e 3B1D     	 adds r3,r7,#4
 7270 0010 0022     	 movs r2,#0
 7271 0012 1A60     	 str r2,[r3]
 7272 0014 0433     	 adds r3,r3,#4
 7273 0016 0022     	 movs r2,#0
 7274 0018 1A60     	 str r2,[r3]
 7275 001a 0433     	 adds r3,r3,#4
 7276 001c 0022     	 movs r2,#0
 7277 001e 1A60     	 str r2,[r3]
 7278 0020 0433     	 adds r3,r3,#4
 7279 0022 0022     	 movs r2,#0
 7280 0024 1A80     	 strh r2,[r3]
 7281 0026 0233     	 adds r3,r3,#2
 7282 0028 0022     	 movs r2,#0
 7283 002a 1A70     	 strb r2,[r3]
 7284 002c 0133     	 adds r3,r3,#1
1066:../4g_module/mdm_handler.c **** 
1067:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_IMEI, (uint8_t *) NEW_LINE);
 7285              	 .loc 3 1067 0
 7286 002e 0A20     	 movs r0,#10
 7287 0030 2C49     	 ldr r1,.L160
 7288 0032 FFF7FEFF 	 bl mod_sendCmdGetRsp
 7289 0036 0346     	 mov r3,r0
 7290 0038 FB75     	 strb r3,[r7,#23]
1068:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 7291              	 .loc 3 1068 0
 7292 003a FB7D     	 ldrb r3,[r7,#23]
 7293 003c 002B     	 cmp r3,#0
 7294 003e 34D1     	 bne .L150
1069:../4g_module/mdm_handler.c **** 	{
1070:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 7295              	 .loc 3 1070 0
 7296 0040 294B     	 ldr r3,.L160+4
 7297 0042 0022     	 movs r2,#0
 7298 0044 1A70     	 strb r2,[r3]
1071:../4g_module/mdm_handler.c **** 		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
 7299              	 .loc 3 1071 0
 7300 0046 3B1D     	 adds r3,r7,#4
 7301 0048 1846     	 mov r0,r3
 7302 004a 2849     	 ldr r1,.L160+8
 7303 004c 0F22     	 movs r2,#15
 7304 004e FFF7FEFF 	 bl memcpy
1072:../4g_module/mdm_handler.c **** 		IMEI_SIZE);
1073:../4g_module/mdm_handler.c **** 		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 7305              	 .loc 3 1073 0
 7306 0052 0023     	 movs r3,#0
 7307 0054 BB75     	 strb r3,[r7,#22]
 7308 0056 15E0     	 b .L151
 7309              	.L155:
1074:../4g_module/mdm_handler.c **** 		{
1075:../4g_module/mdm_handler.c **** 			if (!('0' <= lu8ar_TempIMEI[lu8_index] && '9' >= lu8ar_TempIMEI[lu8_index]))
 7310              	 .loc 3 1075 0
 7311 0058 BB7D     	 ldrb r3,[r7,#22]
 7312 005a 07F11802 	 add r2,r7,#24
 7313 005e 1344     	 add r3,r3,r2
 7314 0060 13F8143C 	 ldrb r3,[r3,#-20]
 7315 0064 2F2B     	 cmp r3,#47
 7316 0066 07D9     	 bls .L152
 7317              	 .loc 3 1075 0 is_stmt 0 discriminator 1
 7318 0068 BB7D     	 ldrb r3,[r7,#22]
 7319 006a 07F11802 	 add r2,r7,#24
 7320 006e 1344     	 add r3,r3,r2
 7321 0070 13F8143C 	 ldrb r3,[r3,#-20]
 7322 0074 392B     	 cmp r3,#57
 7323 0076 02D9     	 bls .L153
 7324              	.L152:
1076:../4g_module/mdm_handler.c **** 			{
1077:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 7325              	 .loc 3 1077 0 is_stmt 1
 7326 0078 0223     	 movs r3,#2
 7327 007a FB75     	 strb r3,[r7,#23]
1078:../4g_module/mdm_handler.c **** 				break;
 7328              	 .loc 3 1078 0
 7329 007c 05E0     	 b .L154
 7330              	.L153:
1073:../4g_module/mdm_handler.c **** 		{
 7331              	 .loc 3 1073 0 discriminator 2
 7332 007e BB7D     	 ldrb r3,[r7,#22]
 7333 0080 0133     	 adds r3,r3,#1
 7334 0082 BB75     	 strb r3,[r7,#22]
 7335              	.L151:
1073:../4g_module/mdm_handler.c **** 		{
 7336              	 .loc 3 1073 0 is_stmt 0 discriminator 1
 7337 0084 BB7D     	 ldrb r3,[r7,#22]
 7338 0086 0E2B     	 cmp r3,#14
 7339 0088 E6D9     	 bls .L155
 7340              	.L154:
1079:../4g_module/mdm_handler.c **** 			}
1080:../4g_module/mdm_handler.c **** 		}
1081:../4g_module/mdm_handler.c **** 		if (lu8_index >= IMEI_SIZE)
 7341              	 .loc 3 1081 0 is_stmt 1
 7342 008a BB7D     	 ldrb r3,[r7,#22]
 7343 008c 0E2B     	 cmp r3,#14
 7344 008e 23D9     	 bls .L157
1082:../4g_module/mdm_handler.c **** 		{
1083:../4g_module/mdm_handler.c **** 			memcpy((char *) &gu8arr_IMEINum, (const char *) &gu8arr_respBuffer[2],
 7345              	 .loc 3 1083 0
 7346 0090 174B     	 ldr r3,.L160+12
 7347 0092 184A     	 ldr r2,.L160+16
 7348 0094 941C     	 adds r4,r2,#2
 7349 0096 2068     	 ldr r0,[r4]
 7350 0098 6168     	 ldr r1,[r4,#4]
 7351 009a A268     	 ldr r2,[r4,#8]
 7352 009c 07C3     	 stmia r3!,{r0,r1,r2}
 7353 009e A289     	 ldrh r2,[r4,#12]
 7354 00a0 A17B     	 ldrb r1,[r4,#14]
 7355 00a2 1A80     	 strh r2,[r3]
 7356 00a4 0A46     	 mov r2,r1
 7357 00a6 9A70     	 strb r2,[r3,#2]
 7358 00a8 16E0     	 b .L157
 7359              	.L150:
1084:../4g_module/mdm_handler.c **** 			IMEI_SIZE);	//\r\n skipped
1085:../4g_module/mdm_handler.c **** 		}
1086:../4g_module/mdm_handler.c **** 	}
1087:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 7360              	 .loc 3 1087 0
 7361 00aa FB7D     	 ldrb r3,[r7,#23]
 7362 00ac 042B     	 cmp r3,#4
 7363 00ae 13D0     	 beq .L157
1088:../4g_module/mdm_handler.c **** 	{
1089:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 7364              	 .loc 3 1089 0
 7365 00b0 0D4B     	 ldr r3,.L160+4
 7366 00b2 1B78     	 ldrb r3,[r3]
 7367 00b4 0133     	 adds r3,r3,#1
 7368 00b6 DAB2     	 uxtb r2,r3
 7369 00b8 0B4B     	 ldr r3,.L160+4
 7370 00ba 1A70     	 strb r2,[r3]
1090:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 7371              	 .loc 3 1090 0
 7372 00bc 0A4B     	 ldr r3,.L160+4
 7373 00be 1B78     	 ldrb r3,[r3]
 7374 00c0 022B     	 cmp r3,#2
 7375 00c2 02D8     	 bhi .L158
1091:../4g_module/mdm_handler.c **** 		{
1092:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 7376              	 .loc 3 1092 0
 7377 00c4 0423     	 movs r3,#4
 7378 00c6 FB75     	 strb r3,[r7,#23]
 7379 00c8 06E0     	 b .L157
 7380              	.L158:
1093:../4g_module/mdm_handler.c **** 		}
1094:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 7381              	 .loc 3 1094 0
 7382 00ca 074B     	 ldr r3,.L160+4
 7383 00cc 1B78     	 ldrb r3,[r3]
 7384 00ce 032B     	 cmp r3,#3
 7385 00d0 02D9     	 bls .L157
1095:../4g_module/mdm_handler.c **** 		{
1096:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 7386              	 .loc 3 1096 0
 7387 00d2 054B     	 ldr r3,.L160+4
 7388 00d4 0022     	 movs r2,#0
 7389 00d6 1A70     	 strb r2,[r3]
 7390              	.L157:
1097:../4g_module/mdm_handler.c **** 		}
1098:../4g_module/mdm_handler.c **** 	}
1099:../4g_module/mdm_handler.c **** 
1100:../4g_module/mdm_handler.c **** 	return len_retStatus;
 7391              	 .loc 3 1100 0
 7392 00d8 FB7D     	 ldrb r3,[r7,#23]
1101:../4g_module/mdm_handler.c **** }
 7393              	 .loc 3 1101 0
 7394 00da 1846     	 mov r0,r3
 7395 00dc 1C37     	 adds r7,r7,#28
 7396              	.LCFI100:
 7397              	 .cfi_def_cfa_offset 12
 7398 00de BD46     	 mov sp,r7
 7399              	.LCFI101:
 7400              	 .cfi_def_cfa_register 13
 7401              	 
 7402 00e0 90BD     	 pop {r4,r7,pc}
 7403              	.L161:
 7404 00e2 00BF     	 .align 2
 7405              	.L160:
 7406 00e4 A0000000 	 .word .LC14
 7407 00e8 00000000 	 .word lsu8_retryCnt.14845
 7408 00ec 02000000 	 .word gu8arr_respBuffer+2
 7409 00f0 00000000 	 .word gu8arr_IMEINum
 7410 00f4 00000000 	 .word gu8arr_respBuffer
 7411              	 .cfi_endproc
 7412              	.LFE621:
 7414              	 .section .text.mod_getIMEI,"ax",%progbits
 7415              	 .align 2
 7416              	 .global mod_getIMEI
 7417              	 .thumb
 7418              	 .thumb_func
 7420              	mod_getIMEI:
 7421              	.LFB622:
1102:../4g_module/mdm_handler.c **** 
1103:../4g_module/mdm_handler.c **** /**************************************************************************
1104:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getIMEI
1105:../4g_module/mdm_handler.c ****  *
1106:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the IMEI
1107:../4g_module/mdm_handler.c ****  *
1108:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
1109:../4g_module/mdm_handler.c ****  *
1110:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t - length
1111:../4g_module/mdm_handler.c ****  *
1112:../4g_module/mdm_handler.c ****  ****************************************************************************/
1113:../4g_module/mdm_handler.c **** uint8_t mod_getIMEI(uint8_t *lu8p_data)
1114:../4g_module/mdm_handler.c **** {
 7422              	 .loc 3 1114 0
 7423              	 .cfi_startproc
 7424              	 
 7425              	 
 7426              	 
 7427 0000 90B4     	 push {r4,r7}
 7428              	.LCFI102:
 7429              	 .cfi_def_cfa_offset 8
 7430              	 .cfi_offset 4,-8
 7431              	 .cfi_offset 7,-4
 7432 0002 84B0     	 sub sp,sp,#16
 7433              	.LCFI103:
 7434              	 .cfi_def_cfa_offset 24
 7435 0004 00AF     	 add r7,sp,#0
 7436              	.LCFI104:
 7437              	 .cfi_def_cfa_register 7
 7438 0006 7860     	 str r0,[r7,#4]
1115:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 7439              	 .loc 3 1115 0
 7440 0008 0023     	 movs r3,#0
 7441 000a FB73     	 strb r3,[r7,#15]
1116:../4g_module/mdm_handler.c **** 
1117:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 7442              	 .loc 3 1117 0
 7443 000c 7B68     	 ldr r3,[r7,#4]
 7444 000e 002B     	 cmp r3,#0
 7445 0010 0DD0     	 beq .L163
1118:../4g_module/mdm_handler.c **** 	{
1119:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8arr_IMEINum, IMEI_SIZE);
 7446              	 .loc 3 1119 0
 7447 0012 7B68     	 ldr r3,[r7,#4]
 7448 0014 094A     	 ldr r2,.L165
 7449 0016 1C46     	 mov r4,r3
 7450 0018 1346     	 mov r3,r2
 7451 001a 07CB     	 ldmia r3!,{r0,r1,r2}
 7452 001c 2060     	 str r0,[r4]
 7453 001e 6160     	 str r1,[r4,#4]
 7454 0020 A260     	 str r2,[r4,#8]
 7455 0022 1A88     	 ldrh r2,[r3]
 7456 0024 9B78     	 ldrb r3,[r3,#2]
 7457 0026 A281     	 strh r2,[r4,#12]
 7458 0028 A373     	 strb r3,[r4,#14]
1120:../4g_module/mdm_handler.c **** 		lu8_ret = IMEI_SIZE;
 7459              	 .loc 3 1120 0
 7460 002a 0F23     	 movs r3,#15
 7461 002c FB73     	 strb r3,[r7,#15]
 7462              	.L163:
1121:../4g_module/mdm_handler.c **** 	}
1122:../4g_module/mdm_handler.c **** 
1123:../4g_module/mdm_handler.c **** 	return lu8_ret;
 7463              	 .loc 3 1123 0
 7464 002e FB7B     	 ldrb r3,[r7,#15]
1124:../4g_module/mdm_handler.c **** }
 7465              	 .loc 3 1124 0
 7466 0030 1846     	 mov r0,r3
 7467 0032 1037     	 adds r7,r7,#16
 7468              	.LCFI105:
 7469              	 .cfi_def_cfa_offset 8
 7470 0034 BD46     	 mov sp,r7
 7471              	.LCFI106:
 7472              	 .cfi_def_cfa_register 13
 7473              	 
 7474 0036 90BC     	 pop {r4,r7}
 7475              	.LCFI107:
 7476              	 .cfi_restore 7
 7477              	 .cfi_restore 4
 7478              	 .cfi_def_cfa_offset 0
 7479 0038 7047     	 bx lr
 7480              	.L166:
 7481 003a 00BF     	 .align 2
 7482              	.L165:
 7483 003c 00000000 	 .word gu8arr_IMEINum
 7484              	 .cfi_endproc
 7485              	.LFE622:
 7487              	 .section .text.mod_extractCCID,"ax",%progbits
 7488              	 .align 2
 7489              	 .thumb
 7490              	 .thumb_func
 7492              	mod_extractCCID:
 7493              	.LFB623:
1125:../4g_module/mdm_handler.c **** /**************************************************************************
1126:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractCCID
1127:../4g_module/mdm_handler.c ****  *
1128:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the CCID number and saves the
1129:../4g_module/mdm_handler.c ****  * 						CCID number to global buffer
1130:../4g_module/mdm_handler.c ****  *
1131:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1132:../4g_module/mdm_handler.c ****  *
1133:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1134:../4g_module/mdm_handler.c ****  *
1135:../4g_module/mdm_handler.c ****  ****************************************************************************/
1136:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractCCID(void)
1137:../4g_module/mdm_handler.c **** {
 7494              	 .loc 3 1137 0
 7495              	 .cfi_startproc
 7496              	 
 7497              	 
 7498 0000 B0B5     	 push {r4,r5,r7,lr}
 7499              	.LCFI108:
 7500              	 .cfi_def_cfa_offset 16
 7501              	 .cfi_offset 4,-16
 7502              	 .cfi_offset 5,-12
 7503              	 .cfi_offset 7,-8
 7504              	 .cfi_offset 14,-4
 7505 0002 84B0     	 sub sp,sp,#16
 7506              	.LCFI109:
 7507              	 .cfi_def_cfa_offset 32
 7508 0004 00AF     	 add r7,sp,#0
 7509              	.LCFI110:
 7510              	 .cfi_def_cfa_register 7
1138:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 7511              	 .loc 3 1138 0
 7512 0006 0423     	 movs r3,#4
 7513 0008 FB73     	 strb r3,[r7,#15]
1139:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1140:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_temp = NULL;
 7514              	 .loc 3 1140 0
 7515 000a 0023     	 movs r3,#0
 7516 000c BB60     	 str r3,[r7,#8]
1141:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 7517              	 .loc 3 1141 0
 7518 000e 0023     	 movs r3,#0
 7519 0010 7B60     	 str r3,[r7,#4]
1142:../4g_module/mdm_handler.c **** 
1143:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
 7520              	 .loc 3 1143 0
 7521 0012 0B20     	 movs r0,#11
 7522 0014 2749     	 ldr r1,.L176
 7523 0016 FFF7FEFF 	 bl mod_sendCmdGetRsp
 7524 001a 0346     	 mov r3,r0
 7525 001c FB73     	 strb r3,[r7,#15]
1144:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 7526              	 .loc 3 1144 0
 7527 001e FB7B     	 ldrb r3,[r7,#15]
 7528 0020 002B     	 cmp r3,#0
 7529 0022 2AD1     	 bne .L168
1145:../4g_module/mdm_handler.c **** 	{
1146:../4g_module/mdm_handler.c **** 		if ((NULL
1147:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7530              	 .loc 3 1147 0
 7531 0024 2448     	 ldr r0,.L176+4
 7532 0026 2549     	 ldr r1,.L176+8
 7533 0028 FFF7FEFF 	 bl strstr
 7534 002c 0346     	 mov r3,r0
1146:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7535              	 .loc 3 1146 0
 7536 002e 002B     	 cmp r3,#0
 7537 0030 20D0     	 beq .L169
1148:../4g_module/mdm_handler.c **** 						(const char*) gcst_ATCmdTable[E_IDX_GET_CCID].mu8arr_otherRspString)))
1149:../4g_module/mdm_handler.c **** 		{
1150:../4g_module/mdm_handler.c **** 			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 7538              	 .loc 3 1150 0
 7539 0032 3B1D     	 adds r3,r7,#4
 7540 0034 2048     	 ldr r0,.L176+4
 7541 0036 2249     	 ldr r1,.L176+12
 7542 0038 1A46     	 mov r2,r3
 7543 003a FFF7FEFF 	 bl strtok_r
 7544 003e B860     	 str r0,[r7,#8]
1151:../4g_module/mdm_handler.c **** 					(const char *) ":", (char **) &lu8p_saveptr);
1152:../4g_module/mdm_handler.c **** 			lu8p_saveptr++;
 7545              	 .loc 3 1152 0
 7546 0040 7B68     	 ldr r3,[r7,#4]
 7547 0042 0133     	 adds r3,r3,#1
 7548 0044 7B60     	 str r3,[r7,#4]
1153:../4g_module/mdm_handler.c **** 
1154:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_saveptr)
 7549              	 .loc 3 1154 0
 7550 0046 7B68     	 ldr r3,[r7,#4]
 7551 0048 002B     	 cmp r3,#0
 7552 004a 10D0     	 beq .L170
1155:../4g_module/mdm_handler.c **** 			{
1156:../4g_module/mdm_handler.c **** 				memset(gu8arr_CCIDNum, 0, sizeof(gu8arr_CCIDNum));
 7553              	 .loc 3 1156 0
 7554 004c 1D48     	 ldr r0,.L176+16
 7555 004e 0021     	 movs r1,#0
 7556 0050 1422     	 movs r2,#20
 7557 0052 FFF7FEFF 	 bl memset
1157:../4g_module/mdm_handler.c **** 				memcpy((char *) &gu8arr_CCIDNum, (const char *) lu8p_saveptr, CCID_SIZE);
 7558              	 .loc 3 1157 0
 7559 0056 7B68     	 ldr r3,[r7,#4]
 7560 0058 1A4A     	 ldr r2,.L176+16
 7561 005a 1446     	 mov r4,r2
 7562 005c 1D46     	 mov r5,r3
 7563 005e 2868     	 ldr r0,[r5]
 7564 0060 6968     	 ldr r1,[r5,#4]
 7565 0062 AA68     	 ldr r2,[r5,#8]
 7566 0064 EB68     	 ldr r3,[r5,#12]
 7567 0066 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 7568 0068 2869     	 ldr r0,[r5,#16]
 7569 006a 2060     	 str r0,[r4]
 7570 006c 1CE0     	 b .L173
 7571              	.L170:
1158:../4g_module/mdm_handler.c **** 			}
1159:../4g_module/mdm_handler.c **** 			else
1160:../4g_module/mdm_handler.c **** 			{
1161:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 7572              	 .loc 3 1161 0
 7573 006e 0223     	 movs r3,#2
 7574 0070 FB73     	 strb r3,[r7,#15]
 7575 0072 19E0     	 b .L173
 7576              	.L169:
1162:../4g_module/mdm_handler.c **** 			}
1163:../4g_module/mdm_handler.c **** 		}
1164:../4g_module/mdm_handler.c **** 		else
1165:../4g_module/mdm_handler.c **** 		{
1166:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 7577              	 .loc 3 1166 0
 7578 0074 0223     	 movs r3,#2
 7579 0076 FB73     	 strb r3,[r7,#15]
 7580 0078 16E0     	 b .L173
 7581              	.L168:
1167:../4g_module/mdm_handler.c **** 		}
1168:../4g_module/mdm_handler.c **** 	}
1169:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 7582              	 .loc 3 1169 0
 7583 007a FB7B     	 ldrb r3,[r7,#15]
 7584 007c 042B     	 cmp r3,#4
 7585 007e 13D0     	 beq .L173
1170:../4g_module/mdm_handler.c **** 	{
1171:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 7586              	 .loc 3 1171 0
 7587 0080 114B     	 ldr r3,.L176+20
 7588 0082 1B78     	 ldrb r3,[r3]
 7589 0084 0133     	 adds r3,r3,#1
 7590 0086 DAB2     	 uxtb r2,r3
 7591 0088 0F4B     	 ldr r3,.L176+20
 7592 008a 1A70     	 strb r2,[r3]
1172:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 7593              	 .loc 3 1172 0
 7594 008c 0E4B     	 ldr r3,.L176+20
 7595 008e 1B78     	 ldrb r3,[r3]
 7596 0090 022B     	 cmp r3,#2
 7597 0092 02D8     	 bhi .L174
1173:../4g_module/mdm_handler.c **** 		{
1174:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 7598              	 .loc 3 1174 0
 7599 0094 0423     	 movs r3,#4
 7600 0096 FB73     	 strb r3,[r7,#15]
 7601 0098 06E0     	 b .L173
 7602              	.L174:
1175:../4g_module/mdm_handler.c **** 		}
1176:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 7603              	 .loc 3 1176 0
 7604 009a 0B4B     	 ldr r3,.L176+20
 7605 009c 1B78     	 ldrb r3,[r3]
 7606 009e 032B     	 cmp r3,#3
 7607 00a0 02D9     	 bls .L173
1177:../4g_module/mdm_handler.c **** 		{
1178:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 7608              	 .loc 3 1178 0
 7609 00a2 094B     	 ldr r3,.L176+20
 7610 00a4 0022     	 movs r2,#0
 7611 00a6 1A70     	 strb r2,[r3]
 7612              	.L173:
1179:../4g_module/mdm_handler.c **** 		}
1180:../4g_module/mdm_handler.c **** 	}
1181:../4g_module/mdm_handler.c **** 
1182:../4g_module/mdm_handler.c **** 	return len_retStatus;
 7613              	 .loc 3 1182 0
 7614 00a8 FB7B     	 ldrb r3,[r7,#15]
1183:../4g_module/mdm_handler.c **** }
 7615              	 .loc 3 1183 0
 7616 00aa 1846     	 mov r0,r3
 7617 00ac 1037     	 adds r7,r7,#16
 7618              	.LCFI111:
 7619              	 .cfi_def_cfa_offset 16
 7620 00ae BD46     	 mov sp,r7
 7621              	.LCFI112:
 7622              	 .cfi_def_cfa_register 13
 7623              	 
 7624 00b0 B0BD     	 pop {r4,r5,r7,pc}
 7625              	.L177:
 7626 00b2 00BF     	 .align 2
 7627              	.L176:
 7628 00b4 A0000000 	 .word .LC14
 7629 00b8 00000000 	 .word gu8arr_respBuffer
 7630 00bc 46370000 	 .word gcst_ATCmdTable+14150
 7631 00c0 8C000000 	 .word .LC11
 7632 00c4 00000000 	 .word gu8arr_CCIDNum
 7633 00c8 00000000 	 .word lsu8_retryCnt.14859
 7634              	 .cfi_endproc
 7635              	.LFE623:
 7637              	 .section .text.mod_getCCID,"ax",%progbits
 7638              	 .align 2
 7639              	 .global mod_getCCID
 7640              	 .thumb
 7641              	 .thumb_func
 7643              	mod_getCCID:
 7644              	.LFB624:
1184:../4g_module/mdm_handler.c **** 
1185:../4g_module/mdm_handler.c **** /**************************************************************************
1186:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getCCID
1187:../4g_module/mdm_handler.c ****  *
1188:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the CCID
1189:../4g_module/mdm_handler.c ****  *
1190:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
1191:../4g_module/mdm_handler.c ****  *
1192:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t - length
1193:../4g_module/mdm_handler.c ****  *
1194:../4g_module/mdm_handler.c ****  ****************************************************************************/
1195:../4g_module/mdm_handler.c **** uint8_t mod_getCCID(uint8_t *lu8p_data)
1196:../4g_module/mdm_handler.c **** {
 7645              	 .loc 3 1196 0
 7646              	 .cfi_startproc
 7647              	 
 7648              	 
 7649              	 
 7650 0000 B0B4     	 push {r4,r5,r7}
 7651              	.LCFI113:
 7652              	 .cfi_def_cfa_offset 12
 7653              	 .cfi_offset 4,-12
 7654              	 .cfi_offset 5,-8
 7655              	 .cfi_offset 7,-4
 7656 0002 85B0     	 sub sp,sp,#20
 7657              	.LCFI114:
 7658              	 .cfi_def_cfa_offset 32
 7659 0004 00AF     	 add r7,sp,#0
 7660              	.LCFI115:
 7661              	 .cfi_def_cfa_register 7
 7662 0006 7860     	 str r0,[r7,#4]
1197:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 7663              	 .loc 3 1197 0
 7664 0008 0023     	 movs r3,#0
 7665 000a FB73     	 strb r3,[r7,#15]
1198:../4g_module/mdm_handler.c **** 
1199:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 7666              	 .loc 3 1199 0
 7667 000c 7B68     	 ldr r3,[r7,#4]
 7668 000e 002B     	 cmp r3,#0
 7669 0010 0CD0     	 beq .L179
1200:../4g_module/mdm_handler.c **** 	{
1201:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8arr_CCIDNum, CCID_SIZE);
 7670              	 .loc 3 1201 0
 7671 0012 7B68     	 ldr r3,[r7,#4]
 7672 0014 084A     	 ldr r2,.L181
 7673 0016 1D46     	 mov r5,r3
 7674 0018 1446     	 mov r4,r2
 7675 001a 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 7676 001c 2860     	 str r0,[r5]
 7677 001e 6960     	 str r1,[r5,#4]
 7678 0020 AA60     	 str r2,[r5,#8]
 7679 0022 EB60     	 str r3,[r5,#12]
 7680 0024 2068     	 ldr r0,[r4]
 7681 0026 2861     	 str r0,[r5,#16]
1202:../4g_module/mdm_handler.c **** 		lu8_ret = CCID_SIZE;
 7682              	 .loc 3 1202 0
 7683 0028 1423     	 movs r3,#20
 7684 002a FB73     	 strb r3,[r7,#15]
 7685              	.L179:
1203:../4g_module/mdm_handler.c **** 	}
1204:../4g_module/mdm_handler.c **** 
1205:../4g_module/mdm_handler.c **** 	return lu8_ret;
 7686              	 .loc 3 1205 0
 7687 002c FB7B     	 ldrb r3,[r7,#15]
1206:../4g_module/mdm_handler.c **** }
 7688              	 .loc 3 1206 0
 7689 002e 1846     	 mov r0,r3
 7690 0030 1437     	 adds r7,r7,#20
 7691              	.LCFI116:
 7692              	 .cfi_def_cfa_offset 12
 7693 0032 BD46     	 mov sp,r7
 7694              	.LCFI117:
 7695              	 .cfi_def_cfa_register 13
 7696              	 
 7697 0034 B0BC     	 pop {r4,r5,r7}
 7698              	.LCFI118:
 7699              	 .cfi_restore 7
 7700              	 .cfi_restore 5
 7701              	 .cfi_restore 4
 7702              	 .cfi_def_cfa_offset 0
 7703 0036 7047     	 bx lr
 7704              	.L182:
 7705              	 .align 2
 7706              	.L181:
 7707 0038 00000000 	 .word gu8arr_CCIDNum
 7708              	 .cfi_endproc
 7709              	.LFE624:
 7711              	 .section .text.mod_extractNUM,"ax",%progbits
 7712              	 .align 2
 7713              	 .thumb
 7714              	 .thumb_func
 7716              	mod_extractNUM:
 7717              	.LFB625:
1207:../4g_module/mdm_handler.c **** 
1208:../4g_module/mdm_handler.c **** /**************************************************************************
1209:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractNUM
1210:../4g_module/mdm_handler.c ****  *
1211:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the phone number and saves the
1212:../4g_module/mdm_handler.c ****  * 						phone number to global buffer
1213:../4g_module/mdm_handler.c ****  *
1214:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1215:../4g_module/mdm_handler.c ****  *
1216:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1217:../4g_module/mdm_handler.c ****  *
1218:../4g_module/mdm_handler.c ****  ****************************************************************************/
1219:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractNUM(void)
1220:../4g_module/mdm_handler.c **** {
 7718              	 .loc 3 1220 0
 7719              	 .cfi_startproc
 7720              	 
 7721              	 
 7722 0000 80B5     	 push {r7,lr}
 7723              	.LCFI119:
 7724              	 .cfi_def_cfa_offset 8
 7725              	 .cfi_offset 7,-8
 7726              	 .cfi_offset 14,-4
 7727 0002 84B0     	 sub sp,sp,#16
 7728              	.LCFI120:
 7729              	 .cfi_def_cfa_offset 24
 7730 0004 00AF     	 add r7,sp,#0
 7731              	.LCFI121:
 7732              	 .cfi_def_cfa_register 7
1221:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 7733              	 .loc 3 1221 0
 7734 0006 0423     	 movs r3,#4
 7735 0008 FB73     	 strb r3,[r7,#15]
1222:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1223:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_temp = NULL;
 7736              	 .loc 3 1223 0
 7737 000a 0023     	 movs r3,#0
 7738 000c BB60     	 str r3,[r7,#8]
1224:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 7739              	 .loc 3 1224 0
 7740 000e 0023     	 movs r3,#0
 7741 0010 7B60     	 str r3,[r7,#4]
1225:../4g_module/mdm_handler.c **** 
1226:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
 7742              	 .loc 3 1226 0
 7743 0012 0C20     	 movs r0,#12
 7744 0014 1C49     	 ldr r1,.L190
 7745 0016 FFF7FEFF 	 bl mod_sendCmdGetRsp
 7746 001a 0346     	 mov r3,r0
 7747 001c FB73     	 strb r3,[r7,#15]
1227:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 7748              	 .loc 3 1227 0
 7749 001e FB7B     	 ldrb r3,[r7,#15]
 7750 0020 002B     	 cmp r3,#0
 7751 0022 14D1     	 bne .L184
1228:../4g_module/mdm_handler.c **** 	{
1229:../4g_module/mdm_handler.c **** 		if ((NULL
1230:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7752              	 .loc 3 1230 0
 7753 0024 1948     	 ldr r0,.L190+4
 7754 0026 1A49     	 ldr r1,.L190+8
 7755 0028 FFF7FEFF 	 bl strstr
 7756 002c 0346     	 mov r3,r0
1229:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7757              	 .loc 3 1229 0
 7758 002e 002B     	 cmp r3,#0
 7759 0030 0AD0     	 beq .L185
1231:../4g_module/mdm_handler.c **** 						(const char*) gcst_ATCmdTable[E_IDX_GET_NUM].mu8arr_otherRspString)))
1232:../4g_module/mdm_handler.c **** 		{
1233:../4g_module/mdm_handler.c **** 			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 7760              	 .loc 3 1233 0
 7761 0032 3B1D     	 adds r3,r7,#4
 7762 0034 1548     	 ldr r0,.L190+4
 7763 0036 1749     	 ldr r1,.L190+12
 7764 0038 1A46     	 mov r2,r3
 7765 003a FFF7FEFF 	 bl strtok_r
 7766 003e B860     	 str r0,[r7,#8]
1234:../4g_module/mdm_handler.c **** 					(const char *) ":", (char **) &lu8p_saveptr);
1235:../4g_module/mdm_handler.c **** 
1236:../4g_module/mdm_handler.c **** 			lu8p_saveptr++;
 7767              	 .loc 3 1236 0
 7768 0040 7B68     	 ldr r3,[r7,#4]
 7769 0042 0133     	 adds r3,r3,#1
 7770 0044 7B60     	 str r3,[r7,#4]
 7771 0046 19E0     	 b .L187
 7772              	.L185:
1237:../4g_module/mdm_handler.c **** 		}
1238:../4g_module/mdm_handler.c **** 		else
1239:../4g_module/mdm_handler.c **** 		{
1240:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 7773              	 .loc 3 1240 0
 7774 0048 0223     	 movs r3,#2
 7775 004a FB73     	 strb r3,[r7,#15]
 7776 004c 16E0     	 b .L187
 7777              	.L184:
1241:../4g_module/mdm_handler.c **** 		}
1242:../4g_module/mdm_handler.c **** 	}
1243:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 7778              	 .loc 3 1243 0
 7779 004e FB7B     	 ldrb r3,[r7,#15]
 7780 0050 042B     	 cmp r3,#4
 7781 0052 13D0     	 beq .L187
1244:../4g_module/mdm_handler.c **** 	{
1245:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 7782              	 .loc 3 1245 0
 7783 0054 104B     	 ldr r3,.L190+16
 7784 0056 1B78     	 ldrb r3,[r3]
 7785 0058 0133     	 adds r3,r3,#1
 7786 005a DAB2     	 uxtb r2,r3
 7787 005c 0E4B     	 ldr r3,.L190+16
 7788 005e 1A70     	 strb r2,[r3]
1246:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 7789              	 .loc 3 1246 0
 7790 0060 0D4B     	 ldr r3,.L190+16
 7791 0062 1B78     	 ldrb r3,[r3]
 7792 0064 022B     	 cmp r3,#2
 7793 0066 02D8     	 bhi .L188
1247:../4g_module/mdm_handler.c **** 		{
1248:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 7794              	 .loc 3 1248 0
 7795 0068 0423     	 movs r3,#4
 7796 006a FB73     	 strb r3,[r7,#15]
 7797 006c 06E0     	 b .L187
 7798              	.L188:
1249:../4g_module/mdm_handler.c **** 		}
1250:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 7799              	 .loc 3 1250 0
 7800 006e 0A4B     	 ldr r3,.L190+16
 7801 0070 1B78     	 ldrb r3,[r3]
 7802 0072 032B     	 cmp r3,#3
 7803 0074 02D9     	 bls .L187
1251:../4g_module/mdm_handler.c **** 		{
1252:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 7804              	 .loc 3 1252 0
 7805 0076 084B     	 ldr r3,.L190+16
 7806 0078 0022     	 movs r2,#0
 7807 007a 1A70     	 strb r2,[r3]
 7808              	.L187:
1253:../4g_module/mdm_handler.c **** 		}
1254:../4g_module/mdm_handler.c **** 	}
1255:../4g_module/mdm_handler.c **** 	return len_retStatus;
 7809              	 .loc 3 1255 0
 7810 007c FB7B     	 ldrb r3,[r7,#15]
1256:../4g_module/mdm_handler.c **** }
 7811              	 .loc 3 1256 0
 7812 007e 1846     	 mov r0,r3
 7813 0080 1037     	 adds r7,r7,#16
 7814              	.LCFI122:
 7815              	 .cfi_def_cfa_offset 8
 7816 0082 BD46     	 mov sp,r7
 7817              	.LCFI123:
 7818              	 .cfi_def_cfa_register 13
 7819              	 
 7820 0084 80BD     	 pop {r7,pc}
 7821              	.L191:
 7822 0086 00BF     	 .align 2
 7823              	.L190:
 7824 0088 A0000000 	 .word .LC14
 7825 008c 00000000 	 .word gu8arr_respBuffer
 7826 0090 EA3B0000 	 .word gcst_ATCmdTable+15338
 7827 0094 8C000000 	 .word .LC11
 7828 0098 00000000 	 .word lsu8_retryCnt.14870
 7829              	 .cfi_endproc
 7830              	.LFE625:
 7832              	 .section .text.mod_getPhoneNum,"ax",%progbits
 7833              	 .align 2
 7834              	 .global mod_getPhoneNum
 7835              	 .thumb
 7836              	 .thumb_func
 7838              	mod_getPhoneNum:
 7839              	.LFB626:
1257:../4g_module/mdm_handler.c **** 
1258:../4g_module/mdm_handler.c **** /**************************************************************************
1259:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getPhoneNum
1260:../4g_module/mdm_handler.c ****  *
1261:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the Phone Number
1262:../4g_module/mdm_handler.c ****  *
1263:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
1264:../4g_module/mdm_handler.c ****  *
1265:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t - length
1266:../4g_module/mdm_handler.c ****  *
1267:../4g_module/mdm_handler.c ****  ****************************************************************************/
1268:../4g_module/mdm_handler.c **** uint8_t mod_getPhoneNum(uint8_t *lu8p_data)
1269:../4g_module/mdm_handler.c **** {
 7840              	 .loc 3 1269 0
 7841              	 .cfi_startproc
 7842              	 
 7843              	 
 7844              	 
 7845 0000 90B4     	 push {r4,r7}
 7846              	.LCFI124:
 7847              	 .cfi_def_cfa_offset 8
 7848              	 .cfi_offset 4,-8
 7849              	 .cfi_offset 7,-4
 7850 0002 84B0     	 sub sp,sp,#16
 7851              	.LCFI125:
 7852              	 .cfi_def_cfa_offset 24
 7853 0004 00AF     	 add r7,sp,#0
 7854              	.LCFI126:
 7855              	 .cfi_def_cfa_register 7
 7856 0006 7860     	 str r0,[r7,#4]
1270:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 7857              	 .loc 3 1270 0
 7858 0008 0023     	 movs r3,#0
 7859 000a FB73     	 strb r3,[r7,#15]
1271:../4g_module/mdm_handler.c **** 
1272:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 7860              	 .loc 3 1272 0
 7861 000c 7B68     	 ldr r3,[r7,#4]
 7862 000e 002B     	 cmp r3,#0
 7863 0010 0BD0     	 beq .L193
1273:../4g_module/mdm_handler.c **** 	{
1274:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8arr_phoneNum, PHONE_SIZE);
 7864              	 .loc 3 1274 0
 7865 0012 7B68     	 ldr r3,[r7,#4]
 7866 0014 084A     	 ldr r2,.L195
 7867 0016 1C46     	 mov r4,r3
 7868 0018 1346     	 mov r3,r2
 7869 001a 07CB     	 ldmia r3!,{r0,r1,r2}
 7870 001c 2060     	 str r0,[r4]
 7871 001e 6160     	 str r1,[r4,#4]
 7872 0020 A260     	 str r2,[r4,#8]
 7873 0022 1B78     	 ldrb r3,[r3]
 7874 0024 2373     	 strb r3,[r4,#12]
1275:../4g_module/mdm_handler.c **** 		lu8_ret = PHONE_SIZE;
 7875              	 .loc 3 1275 0
 7876 0026 0D23     	 movs r3,#13
 7877 0028 FB73     	 strb r3,[r7,#15]
 7878              	.L193:
1276:../4g_module/mdm_handler.c **** 	}
1277:../4g_module/mdm_handler.c **** 
1278:../4g_module/mdm_handler.c **** 	return lu8_ret;
 7879              	 .loc 3 1278 0
 7880 002a FB7B     	 ldrb r3,[r7,#15]
1279:../4g_module/mdm_handler.c **** }
 7881              	 .loc 3 1279 0
 7882 002c 1846     	 mov r0,r3
 7883 002e 1037     	 adds r7,r7,#16
 7884              	.LCFI127:
 7885              	 .cfi_def_cfa_offset 8
 7886 0030 BD46     	 mov sp,r7
 7887              	.LCFI128:
 7888              	 .cfi_def_cfa_register 13
 7889              	 
 7890 0032 90BC     	 pop {r4,r7}
 7891              	.LCFI129:
 7892              	 .cfi_restore 7
 7893              	 .cfi_restore 4
 7894              	 .cfi_def_cfa_offset 0
 7895 0034 7047     	 bx lr
 7896              	.L196:
 7897 0036 00BF     	 .align 2
 7898              	.L195:
 7899 0038 00000000 	 .word gu8arr_phoneNum
 7900              	 .cfi_endproc
 7901              	.LFE626:
 7903              	 .section .rodata
 7904 00de 0000     	 .align 2
 7905              	.LC21:
 7906 00e0 2200     	 .ascii "\"\000"
 7907              	 .section .text.mod_extractOperator,"ax",%progbits
 7908              	 .align 2
 7909              	 .thumb
 7910              	 .thumb_func
 7912              	mod_extractOperator:
 7913              	.LFB627:
1280:../4g_module/mdm_handler.c **** 
1281:../4g_module/mdm_handler.c **** /**************************************************************************
1282:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractOperator
1283:../4g_module/mdm_handler.c ****  *
1284:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the SIM operator
1285:../4g_module/mdm_handler.c ****  *
1286:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1287:../4g_module/mdm_handler.c ****  *
1288:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1289:../4g_module/mdm_handler.c ****  *
1290:../4g_module/mdm_handler.c ****  ****************************************************************************/
1291:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractOperator(void)
1292:../4g_module/mdm_handler.c **** {
 7914              	 .loc 3 1292 0
 7915              	 .cfi_startproc
 7916              	 
 7917              	 
 7918 0000 80B5     	 push {r7,lr}
 7919              	.LCFI130:
 7920              	 .cfi_def_cfa_offset 8
 7921              	 .cfi_offset 7,-8
 7922              	 .cfi_offset 14,-4
 7923 0002 84B0     	 sub sp,sp,#16
 7924              	.LCFI131:
 7925              	 .cfi_def_cfa_offset 24
 7926 0004 00AF     	 add r7,sp,#0
 7927              	.LCFI132:
 7928              	 .cfi_def_cfa_register 7
1293:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 7929              	 .loc 3 1293 0
 7930 0006 0423     	 movs r3,#4
 7931 0008 FB73     	 strb r3,[r7,#15]
1294:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1295:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 7932              	 .loc 3 1295 0
 7933 000a 0023     	 movs r3,#0
 7934 000c BB60     	 str r3,[r7,#8]
1296:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_savePtr = NULL;
 7935              	 .loc 3 1296 0
 7936 000e 0023     	 movs r3,#0
 7937 0010 3B60     	 str r3,[r7]
1297:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_dataPtr = NULL;
 7938              	 .loc 3 1297 0
 7939 0012 0023     	 movs r3,#0
 7940 0014 7B60     	 str r3,[r7,#4]
1298:../4g_module/mdm_handler.c **** 
1299:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
 7941              	 .loc 3 1299 0
 7942 0016 0D20     	 movs r0,#13
 7943 0018 3749     	 ldr r1,.L210
 7944 001a FFF7FEFF 	 bl mod_sendCmdGetRsp
 7945 001e 0346     	 mov r3,r0
 7946 0020 FB73     	 strb r3,[r7,#15]
1300:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 7947              	 .loc 3 1300 0
 7948 0022 FB7B     	 ldrb r3,[r7,#15]
 7949 0024 002B     	 cmp r3,#0
 7950 0026 4BD1     	 bne .L198
1301:../4g_module/mdm_handler.c **** 	{
1302:../4g_module/mdm_handler.c **** 		if ((NULL
1303:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7951              	 .loc 3 1303 0
 7952 0028 3448     	 ldr r0,.L210+4
 7953 002a 3549     	 ldr r1,.L210+8
 7954 002c FFF7FEFF 	 bl strstr
 7955 0030 0346     	 mov r3,r0
1302:../4g_module/mdm_handler.c **** 				!= strstr((const char*) gu8arr_respBuffer,
 7956              	 .loc 3 1302 0
 7957 0032 002B     	 cmp r3,#0
 7958 0034 41D0     	 beq .L199
1304:../4g_module/mdm_handler.c **** 						(const char*) gcst_ATCmdTable[E_IDX_GET_OPERATOR].mu8arr_otherRspString)))
1305:../4g_module/mdm_handler.c **** 		{
1306:../4g_module/mdm_handler.c **** 			lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 7959              	 .loc 3 1306 0
 7960 0036 3B46     	 mov r3,r7
 7961 0038 3048     	 ldr r0,.L210+4
 7962 003a 3249     	 ldr r1,.L210+12
 7963 003c 1A46     	 mov r2,r3
 7964 003e FFF7FEFF 	 bl strtok_r
 7965 0042 B860     	 str r0,[r7,#8]
1307:../4g_module/mdm_handler.c **** 					(const char *) ":", (char **) &lu8p_savePtr);
1308:../4g_module/mdm_handler.c **** 
1309:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_Ptr)
 7966              	 .loc 3 1309 0
 7967 0044 BB68     	 ldr r3,[r7,#8]
 7968 0046 002B     	 cmp r3,#0
 7969 0048 34D0     	 beq .L200
1310:../4g_module/mdm_handler.c **** 			{
1311:../4g_module/mdm_handler.c **** 				lu8p_dataPtr = lu8p_savePtr;
 7970              	 .loc 3 1311 0
 7971 004a 3B68     	 ldr r3,[r7]
 7972 004c 7B60     	 str r3,[r7,#4]
1312:../4g_module/mdm_handler.c **** 				lu8p_dataPtr = (uint8_t *) strchr((const char*) lu8p_dataPtr, ',');
 7973              	 .loc 3 1312 0
 7974 004e 7868     	 ldr r0,[r7,#4]
 7975 0050 2C21     	 movs r1,#44
 7976 0052 FFF7FEFF 	 bl strchr
 7977 0056 7860     	 str r0,[r7,#4]
1313:../4g_module/mdm_handler.c **** 
1314:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_dataPtr)
 7978              	 .loc 3 1314 0
 7979 0058 7B68     	 ldr r3,[r7,#4]
 7980 005a 002B     	 cmp r3,#0
 7981 005c 27D0     	 beq .L201
1315:../4g_module/mdm_handler.c **** 				{
1316:../4g_module/mdm_handler.c **** 					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 7982              	 .loc 3 1316 0
 7983 005e 3B46     	 mov r3,r7
 7984 0060 0020     	 movs r0,#0
 7985 0062 2949     	 ldr r1,.L210+16
 7986 0064 1A46     	 mov r2,r3
 7987 0066 FFF7FEFF 	 bl strtok_r
 7988 006a B860     	 str r0,[r7,#8]
1317:../4g_module/mdm_handler.c **** 							(char **) &lu8p_savePtr);
1318:../4g_module/mdm_handler.c **** 
1319:../4g_module/mdm_handler.c **** 					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 7989              	 .loc 3 1319 0
 7990 006c 3B46     	 mov r3,r7
 7991 006e 0020     	 movs r0,#0
 7992 0070 2549     	 ldr r1,.L210+16
 7993 0072 1A46     	 mov r2,r3
 7994 0074 FFF7FEFF 	 bl strtok_r
 7995 0078 B860     	 str r0,[r7,#8]
1320:../4g_module/mdm_handler.c **** 							(char **) &lu8p_savePtr);
1321:../4g_module/mdm_handler.c **** 
1322:../4g_module/mdm_handler.c **** 					lu8p_savePtr++;
 7996              	 .loc 3 1322 0
 7997 007a 3B68     	 ldr r3,[r7]
 7998 007c 0133     	 adds r3,r3,#1
 7999 007e 3B60     	 str r3,[r7]
1323:../4g_module/mdm_handler.c **** 					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) "\"",
 8000              	 .loc 3 1323 0
 8001 0080 3B46     	 mov r3,r7
 8002 0082 0020     	 movs r0,#0
 8003 0084 2149     	 ldr r1,.L210+20
 8004 0086 1A46     	 mov r2,r3
 8005 0088 FFF7FEFF 	 bl strtok_r
 8006 008c B860     	 str r0,[r7,#8]
1324:../4g_module/mdm_handler.c **** 							(char **) &lu8p_savePtr);
1325:../4g_module/mdm_handler.c **** 
1326:../4g_module/mdm_handler.c **** 					if (lu8p_Ptr != NULL)
 8007              	 .loc 3 1326 0
 8008 008e BB68     	 ldr r3,[r7,#8]
 8009 0090 002B     	 cmp r3,#0
 8010 0092 09D0     	 beq .L202
1327:../4g_module/mdm_handler.c **** 					{
1328:../4g_module/mdm_handler.c **** 						memset(gu8_operatorName, 0, sizeof(gu8_operatorName));
 8011              	 .loc 3 1328 0
 8012 0094 1E48     	 ldr r0,.L210+24
 8013 0096 0021     	 movs r1,#0
 8014 0098 1422     	 movs r2,#20
 8015 009a FFF7FEFF 	 bl memset
1329:../4g_module/mdm_handler.c **** 						strcpy((char *) &gu8_operatorName, (const char *) lu8p_Ptr);
 8016              	 .loc 3 1329 0
 8017 009e 1C48     	 ldr r0,.L210+24
 8018 00a0 B968     	 ldr r1,[r7,#8]
 8019 00a2 FFF7FEFF 	 bl strcpy
 8020 00a6 22E0     	 b .L207
 8021              	.L202:
1330:../4g_module/mdm_handler.c **** 					}
1331:../4g_module/mdm_handler.c **** 					else
1332:../4g_module/mdm_handler.c **** 					{
1333:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
 8022              	 .loc 3 1333 0
 8023 00a8 0223     	 movs r3,#2
 8024 00aa FB73     	 strb r3,[r7,#15]
 8025 00ac 1FE0     	 b .L207
 8026              	.L201:
1334:../4g_module/mdm_handler.c **** 					}
1335:../4g_module/mdm_handler.c **** 				}
1336:../4g_module/mdm_handler.c **** 				else
1337:../4g_module/mdm_handler.c **** 				{
1338:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 8027              	 .loc 3 1338 0
 8028 00ae 0223     	 movs r3,#2
 8029 00b0 FB73     	 strb r3,[r7,#15]
 8030 00b2 1CE0     	 b .L207
 8031              	.L200:
1339:../4g_module/mdm_handler.c **** 				}
1340:../4g_module/mdm_handler.c **** 			}
1341:../4g_module/mdm_handler.c **** 			else
1342:../4g_module/mdm_handler.c **** 			{
1343:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 8032              	 .loc 3 1343 0
 8033 00b4 0223     	 movs r3,#2
 8034 00b6 FB73     	 strb r3,[r7,#15]
 8035 00b8 19E0     	 b .L207
 8036              	.L199:
1344:../4g_module/mdm_handler.c **** 			}
1345:../4g_module/mdm_handler.c **** 		}
1346:../4g_module/mdm_handler.c **** 		else
1347:../4g_module/mdm_handler.c **** 		{
1348:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8037              	 .loc 3 1348 0
 8038 00ba 0223     	 movs r3,#2
 8039 00bc FB73     	 strb r3,[r7,#15]
 8040 00be 16E0     	 b .L207
 8041              	.L198:
1349:../4g_module/mdm_handler.c **** 		}
1350:../4g_module/mdm_handler.c **** 	}
1351:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 8042              	 .loc 3 1351 0
 8043 00c0 FB7B     	 ldrb r3,[r7,#15]
 8044 00c2 042B     	 cmp r3,#4
 8045 00c4 13D0     	 beq .L207
1352:../4g_module/mdm_handler.c **** 	{
1353:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 8046              	 .loc 3 1353 0
 8047 00c6 134B     	 ldr r3,.L210+28
 8048 00c8 1B78     	 ldrb r3,[r3]
 8049 00ca 0133     	 adds r3,r3,#1
 8050 00cc DAB2     	 uxtb r2,r3
 8051 00ce 114B     	 ldr r3,.L210+28
 8052 00d0 1A70     	 strb r2,[r3]
1354:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 8053              	 .loc 3 1354 0
 8054 00d2 104B     	 ldr r3,.L210+28
 8055 00d4 1B78     	 ldrb r3,[r3]
 8056 00d6 022B     	 cmp r3,#2
 8057 00d8 02D8     	 bhi .L208
1355:../4g_module/mdm_handler.c **** 		{
1356:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 8058              	 .loc 3 1356 0
 8059 00da 0423     	 movs r3,#4
 8060 00dc FB73     	 strb r3,[r7,#15]
 8061 00de 06E0     	 b .L207
 8062              	.L208:
1357:../4g_module/mdm_handler.c **** 		}
1358:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 8063              	 .loc 3 1358 0
 8064 00e0 0C4B     	 ldr r3,.L210+28
 8065 00e2 1B78     	 ldrb r3,[r3]
 8066 00e4 032B     	 cmp r3,#3
 8067 00e6 02D9     	 bls .L207
1359:../4g_module/mdm_handler.c **** 		{
1360:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 8068              	 .loc 3 1360 0
 8069 00e8 0A4B     	 ldr r3,.L210+28
 8070 00ea 0022     	 movs r2,#0
 8071 00ec 1A70     	 strb r2,[r3]
 8072              	.L207:
1361:../4g_module/mdm_handler.c **** 		}
1362:../4g_module/mdm_handler.c **** 	}
1363:../4g_module/mdm_handler.c **** 	return len_retStatus;
 8073              	 .loc 3 1363 0
 8074 00ee FB7B     	 ldrb r3,[r7,#15]
1364:../4g_module/mdm_handler.c **** }
 8075              	 .loc 3 1364 0
 8076 00f0 1846     	 mov r0,r3
 8077 00f2 1037     	 adds r7,r7,#16
 8078              	.LCFI133:
 8079              	 .cfi_def_cfa_offset 8
 8080 00f4 BD46     	 mov sp,r7
 8081              	.LCFI134:
 8082              	 .cfi_def_cfa_register 13
 8083              	 
 8084 00f6 80BD     	 pop {r7,pc}
 8085              	.L211:
 8086              	 .align 2
 8087              	.L210:
 8088 00f8 A0000000 	 .word .LC14
 8089 00fc 00000000 	 .word gu8arr_respBuffer
 8090 0100 8E400000 	 .word gcst_ATCmdTable+16526
 8091 0104 8C000000 	 .word .LC11
 8092 0108 D4000000 	 .word .LC19
 8093 010c E0000000 	 .word .LC21
 8094 0110 00000000 	 .word gu8_operatorName
 8095 0114 00000000 	 .word lsu8_retryCnt.14881
 8096              	 .cfi_endproc
 8097              	.LFE627:
 8099              	 .section .text.mod_getOperator,"ax",%progbits
 8100              	 .align 2
 8101              	 .global mod_getOperator
 8102              	 .thumb
 8103              	 .thumb_func
 8105              	mod_getOperator:
 8106              	.LFB628:
1365:../4g_module/mdm_handler.c **** 
1366:../4g_module/mdm_handler.c **** /**************************************************************************
1367:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getOperator
1368:../4g_module/mdm_handler.c ****  *
1369:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the Operator Name
1370:../4g_module/mdm_handler.c ****  *
1371:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
1372:../4g_module/mdm_handler.c ****  *
1373:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t - length
1374:../4g_module/mdm_handler.c ****  *
1375:../4g_module/mdm_handler.c ****  ****************************************************************************/
1376:../4g_module/mdm_handler.c **** uint8_t mod_getOperator(uint8_t *lu8p_data)
1377:../4g_module/mdm_handler.c **** {
 8107              	 .loc 3 1377 0
 8108              	 .cfi_startproc
 8109              	 
 8110              	 
 8111              	 
 8112 0000 B0B4     	 push {r4,r5,r7}
 8113              	.LCFI135:
 8114              	 .cfi_def_cfa_offset 12
 8115              	 .cfi_offset 4,-12
 8116              	 .cfi_offset 5,-8
 8117              	 .cfi_offset 7,-4
 8118 0002 85B0     	 sub sp,sp,#20
 8119              	.LCFI136:
 8120              	 .cfi_def_cfa_offset 32
 8121 0004 00AF     	 add r7,sp,#0
 8122              	.LCFI137:
 8123              	 .cfi_def_cfa_register 7
 8124 0006 7860     	 str r0,[r7,#4]
1378:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 8125              	 .loc 3 1378 0
 8126 0008 0023     	 movs r3,#0
 8127 000a FB73     	 strb r3,[r7,#15]
1379:../4g_module/mdm_handler.c **** 
1380:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 8128              	 .loc 3 1380 0
 8129 000c 7B68     	 ldr r3,[r7,#4]
 8130 000e 002B     	 cmp r3,#0
 8131 0010 0CD0     	 beq .L213
1381:../4g_module/mdm_handler.c **** 	{
1382:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8_operatorName, OPERATOR_SIZE);
 8132              	 .loc 3 1382 0
 8133 0012 7B68     	 ldr r3,[r7,#4]
 8134 0014 084A     	 ldr r2,.L215
 8135 0016 1D46     	 mov r5,r3
 8136 0018 1446     	 mov r4,r2
 8137 001a 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 8138 001c 2860     	 str r0,[r5]
 8139 001e 6960     	 str r1,[r5,#4]
 8140 0020 AA60     	 str r2,[r5,#8]
 8141 0022 EB60     	 str r3,[r5,#12]
 8142 0024 2068     	 ldr r0,[r4]
 8143 0026 2861     	 str r0,[r5,#16]
1383:../4g_module/mdm_handler.c **** 		lu8_ret = OPERATOR_SIZE;
 8144              	 .loc 3 1383 0
 8145 0028 1423     	 movs r3,#20
 8146 002a FB73     	 strb r3,[r7,#15]
 8147              	.L213:
1384:../4g_module/mdm_handler.c **** 	}
1385:../4g_module/mdm_handler.c **** 
1386:../4g_module/mdm_handler.c **** 	return lu8_ret;
 8148              	 .loc 3 1386 0
 8149 002c FB7B     	 ldrb r3,[r7,#15]
1387:../4g_module/mdm_handler.c **** }
 8150              	 .loc 3 1387 0
 8151 002e 1846     	 mov r0,r3
 8152 0030 1437     	 adds r7,r7,#20
 8153              	.LCFI138:
 8154              	 .cfi_def_cfa_offset 12
 8155 0032 BD46     	 mov sp,r7
 8156              	.LCFI139:
 8157              	 .cfi_def_cfa_register 13
 8158              	 
 8159 0034 B0BC     	 pop {r4,r5,r7}
 8160              	.LCFI140:
 8161              	 .cfi_restore 7
 8162              	 .cfi_restore 5
 8163              	 .cfi_restore 4
 8164              	 .cfi_def_cfa_offset 0
 8165 0036 7047     	 bx lr
 8166              	.L216:
 8167              	 .align 2
 8168              	.L215:
 8169 0038 00000000 	 .word gu8_operatorName
 8170              	 .cfi_endproc
 8171              	.LFE628:
 8173              	 .section .text.mod_simStatus,"ax",%progbits
 8174              	 .align 2
 8175              	 .global mod_simStatus
 8176              	 .thumb
 8177              	 .thumb_func
 8179              	mod_simStatus:
 8180              	.LFB629:
1388:../4g_module/mdm_handler.c **** 
1389:../4g_module/mdm_handler.c **** /**************************************************************************
1390:../4g_module/mdm_handler.c ****  * Function Name	:	mod_simStatus
1391:../4g_module/mdm_handler.c ****  *
1392:../4g_module/mdm_handler.c ****  * Description   	:	This function extract the sim info and checks the SIM status
1393:../4g_module/mdm_handler.c ****  *
1394:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1395:../4g_module/mdm_handler.c ****  *
1396:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1397:../4g_module/mdm_handler.c ****  *
1398:../4g_module/mdm_handler.c ****  ****************************************************************************/
1399:../4g_module/mdm_handler.c **** en_responseRetCodes_t mod_simStatus(void)
1400:../4g_module/mdm_handler.c **** {
 8181              	 .loc 3 1400 0
 8182              	 .cfi_startproc
 8183              	 
 8184              	 
 8185 0000 80B5     	 push {r7,lr}
 8186              	.LCFI141:
 8187              	 .cfi_def_cfa_offset 8
 8188              	 .cfi_offset 7,-8
 8189              	 .cfi_offset 14,-4
 8190 0002 82B0     	 sub sp,sp,#8
 8191              	.LCFI142:
 8192              	 .cfi_def_cfa_offset 16
 8193 0004 00AF     	 add r7,sp,#0
 8194              	.LCFI143:
 8195              	 .cfi_def_cfa_register 7
1401:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 8196              	 .loc 3 1401 0
 8197 0006 0423     	 movs r3,#4
 8198 0008 FB71     	 strb r3,[r7,#7]
1402:../4g_module/mdm_handler.c **** 
1403:../4g_module/mdm_handler.c **** 	switch (sen_simStatusState)
 8199              	 .loc 3 1403 0
 8200 000a 4F4B     	 ldr r3,.L242
 8201 000c 1B78     	 ldrb r3,[r3]
 8202 000e 072B     	 cmp r3,#7
 8203 0010 00F29080 	 bhi .L218
 8204 0014 01A2     	 adr r2,.L220
 8205 0016 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 8206 001a 00BF     	 .p2align 2
 8207              	.L220:
 8208 001c 3D000000 	 .word .L219+1
 8209 0020 59000000 	 .word .L221+1
 8210 0024 75000000 	 .word .L222+1
 8211 0028 91000000 	 .word .L223+1
 8212 002c AD000000 	 .word .L224+1
 8213 0030 CF000000 	 .word .L225+1
 8214 0034 F1000000 	 .word .L226+1
 8215 0038 13010000 	 .word .L227+1
 8216              	 .p2align 1
 8217              	.L219:
1404:../4g_module/mdm_handler.c **** 	{
1405:../4g_module/mdm_handler.c **** 		case E_SIM_ENABLE_SIM_DETECTION_STATE:
1406:../4g_module/mdm_handler.c **** 			len_retStatus = mod_enableSimDetection();
 8218              	 .loc 3 1406 0
 8219 003c FFF7FEFF 	 bl mod_enableSimDetection
 8220 0040 0346     	 mov r3,r0
 8221 0042 FB71     	 strb r3,[r7,#7]
1407:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 8222              	 .loc 3 1407 0
 8223 0044 FB79     	 ldrb r3,[r7,#7]
 8224 0046 002B     	 cmp r3,#0
 8225 0048 05D1     	 bne .L228
1408:../4g_module/mdm_handler.c **** 			{
1409:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8226              	 .loc 3 1409 0
 8227 004a 0423     	 movs r3,#4
 8228 004c FB71     	 strb r3,[r7,#7]
1410:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_ENABLE_SIM_STATUS_STATE;
 8229              	 .loc 3 1410 0
 8230 004e 3E4B     	 ldr r3,.L242
 8231 0050 0122     	 movs r2,#1
 8232 0052 1A70     	 strb r2,[r3]
1411:../4g_module/mdm_handler.c **** 			}
1412:../4g_module/mdm_handler.c **** 		break;
 8233              	 .loc 3 1412 0
 8234 0054 72E0     	 b .L229
 8235              	.L228:
 8236 0056 71E0     	 b .L229
 8237              	.L221:
1413:../4g_module/mdm_handler.c **** 
1414:../4g_module/mdm_handler.c **** 		case E_SIM_ENABLE_SIM_STATUS_STATE:
1415:../4g_module/mdm_handler.c **** 			len_retStatus = mod_enableSimStatusReport();
 8238              	 .loc 3 1415 0
 8239 0058 FFF7FEFF 	 bl mod_enableSimStatusReport
 8240 005c 0346     	 mov r3,r0
 8241 005e FB71     	 strb r3,[r7,#7]
1416:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 8242              	 .loc 3 1416 0
 8243 0060 FB79     	 ldrb r3,[r7,#7]
 8244 0062 002B     	 cmp r3,#0
 8245 0064 05D1     	 bne .L230
1417:../4g_module/mdm_handler.c **** 			{
1418:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8246              	 .loc 3 1418 0
 8247 0066 0423     	 movs r3,#4
 8248 0068 FB71     	 strb r3,[r7,#7]
1419:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_CHECK_SIM_STATUS_STATE;
 8249              	 .loc 3 1419 0
 8250 006a 374B     	 ldr r3,.L242
 8251 006c 0222     	 movs r2,#2
 8252 006e 1A70     	 strb r2,[r3]
1420:../4g_module/mdm_handler.c **** 			}
1421:../4g_module/mdm_handler.c **** 		break;
 8253              	 .loc 3 1421 0
 8254 0070 64E0     	 b .L229
 8255              	.L230:
 8256 0072 63E0     	 b .L229
 8257              	.L222:
1422:../4g_module/mdm_handler.c **** 
1423:../4g_module/mdm_handler.c **** 		case E_SIM_CHECK_SIM_STATUS_STATE:
1424:../4g_module/mdm_handler.c **** 			len_retStatus = mod_checkSimStatus();
 8258              	 .loc 3 1424 0
 8259 0074 FFF7FEFF 	 bl mod_checkSimStatus
 8260 0078 0346     	 mov r3,r0
 8261 007a FB71     	 strb r3,[r7,#7]
1425:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 8262              	 .loc 3 1425 0
 8263 007c FB79     	 ldrb r3,[r7,#7]
 8264 007e 002B     	 cmp r3,#0
 8265 0080 05D1     	 bne .L231
1426:../4g_module/mdm_handler.c **** 			{
1427:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8266              	 .loc 3 1427 0
 8267 0082 0423     	 movs r3,#4
 8268 0084 FB71     	 strb r3,[r7,#7]
1428:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_CPIN_CHECK_STATE;
 8269              	 .loc 3 1428 0
 8270 0086 304B     	 ldr r3,.L242
 8271 0088 0322     	 movs r2,#3
 8272 008a 1A70     	 strb r2,[r3]
1429:../4g_module/mdm_handler.c **** 			}
1430:../4g_module/mdm_handler.c **** 		break;
 8273              	 .loc 3 1430 0
 8274 008c 56E0     	 b .L229
 8275              	.L231:
 8276 008e 55E0     	 b .L229
 8277              	.L223:
1431:../4g_module/mdm_handler.c **** 
1432:../4g_module/mdm_handler.c **** 		case E_SIM_CPIN_CHECK_STATE:
1433:../4g_module/mdm_handler.c **** 			len_retStatus = mod_cpinCheck();
 8278              	 .loc 3 1433 0
 8279 0090 FFF7FEFF 	 bl mod_cpinCheck
 8280 0094 0346     	 mov r3,r0
 8281 0096 FB71     	 strb r3,[r7,#7]
1434:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 8282              	 .loc 3 1434 0
 8283 0098 FB79     	 ldrb r3,[r7,#7]
 8284 009a 002B     	 cmp r3,#0
 8285 009c 05D1     	 bne .L232
1435:../4g_module/mdm_handler.c **** 			{
1436:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8286              	 .loc 3 1436 0
 8287 009e 0423     	 movs r3,#4
 8288 00a0 FB71     	 strb r3,[r7,#7]
1437:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_EXCTRACT_IMEI_STATE;
 8289              	 .loc 3 1437 0
 8290 00a2 294B     	 ldr r3,.L242
 8291 00a4 0422     	 movs r2,#4
 8292 00a6 1A70     	 strb r2,[r3]
1438:../4g_module/mdm_handler.c **** 			}
1439:../4g_module/mdm_handler.c **** 		break;
 8293              	 .loc 3 1439 0
 8294 00a8 48E0     	 b .L229
 8295              	.L232:
 8296 00aa 47E0     	 b .L229
 8297              	.L224:
1440:../4g_module/mdm_handler.c **** 
1441:../4g_module/mdm_handler.c **** 		case E_SIM_EXCTRACT_IMEI_STATE:
1442:../4g_module/mdm_handler.c **** 			len_retStatus = mod_extractIMEI();
 8298              	 .loc 3 1442 0
 8299 00ac FFF7FEFF 	 bl mod_extractIMEI
 8300 00b0 0346     	 mov r3,r0
 8301 00b2 FB71     	 strb r3,[r7,#7]
1443:../4g_module/mdm_handler.c **** 			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 8302              	 .loc 3 1443 0
 8303 00b4 FB79     	 ldrb r3,[r7,#7]
 8304 00b6 002B     	 cmp r3,#0
 8305 00b8 02D0     	 beq .L233
 8306              	 .loc 3 1443 0 is_stmt 0 discriminator 1
 8307 00ba FB79     	 ldrb r3,[r7,#7]
 8308 00bc 042B     	 cmp r3,#4
 8309 00be 05D0     	 beq .L234
 8310              	.L233:
1444:../4g_module/mdm_handler.c **** 			{
1445:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8311              	 .loc 3 1445 0 is_stmt 1
 8312 00c0 0423     	 movs r3,#4
 8313 00c2 FB71     	 strb r3,[r7,#7]
1446:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_EXCTRACT_CCID_STATE;
 8314              	 .loc 3 1446 0
 8315 00c4 204B     	 ldr r3,.L242
 8316 00c6 0522     	 movs r2,#5
 8317 00c8 1A70     	 strb r2,[r3]
1447:../4g_module/mdm_handler.c **** 			}
1448:../4g_module/mdm_handler.c **** 		break;
 8318              	 .loc 3 1448 0
 8319 00ca 37E0     	 b .L229
 8320              	.L234:
 8321 00cc 36E0     	 b .L229
 8322              	.L225:
1449:../4g_module/mdm_handler.c **** 
1450:../4g_module/mdm_handler.c **** 		case E_SIM_EXCTRACT_CCID_STATE:
1451:../4g_module/mdm_handler.c **** 			len_retStatus = mod_extractCCID();
 8323              	 .loc 3 1451 0
 8324 00ce FFF7FEFF 	 bl mod_extractCCID
 8325 00d2 0346     	 mov r3,r0
 8326 00d4 FB71     	 strb r3,[r7,#7]
1452:../4g_module/mdm_handler.c **** 			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 8327              	 .loc 3 1452 0
 8328 00d6 FB79     	 ldrb r3,[r7,#7]
 8329 00d8 002B     	 cmp r3,#0
 8330 00da 02D0     	 beq .L235
 8331              	 .loc 3 1452 0 is_stmt 0 discriminator 1
 8332 00dc FB79     	 ldrb r3,[r7,#7]
 8333 00de 042B     	 cmp r3,#4
 8334 00e0 05D0     	 beq .L236
 8335              	.L235:
1453:../4g_module/mdm_handler.c **** 			{
1454:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8336              	 .loc 3 1454 0 is_stmt 1
 8337 00e2 0423     	 movs r3,#4
 8338 00e4 FB71     	 strb r3,[r7,#7]
1455:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_EXTRACT_NUM_STATE;
 8339              	 .loc 3 1455 0
 8340 00e6 184B     	 ldr r3,.L242
 8341 00e8 0622     	 movs r2,#6
 8342 00ea 1A70     	 strb r2,[r3]
1456:../4g_module/mdm_handler.c **** 			}
1457:../4g_module/mdm_handler.c **** 		break;
 8343              	 .loc 3 1457 0
 8344 00ec 26E0     	 b .L229
 8345              	.L236:
 8346 00ee 25E0     	 b .L229
 8347              	.L226:
1458:../4g_module/mdm_handler.c **** 
1459:../4g_module/mdm_handler.c **** 		case E_SIM_EXTRACT_NUM_STATE:
1460:../4g_module/mdm_handler.c **** 			len_retStatus = mod_extractNUM();
 8348              	 .loc 3 1460 0
 8349 00f0 FFF7FEFF 	 bl mod_extractNUM
 8350 00f4 0346     	 mov r3,r0
 8351 00f6 FB71     	 strb r3,[r7,#7]
1461:../4g_module/mdm_handler.c **** 			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 8352              	 .loc 3 1461 0
 8353 00f8 FB79     	 ldrb r3,[r7,#7]
 8354 00fa 002B     	 cmp r3,#0
 8355 00fc 02D0     	 beq .L237
 8356              	 .loc 3 1461 0 is_stmt 0 discriminator 1
 8357 00fe FB79     	 ldrb r3,[r7,#7]
 8358 0100 042B     	 cmp r3,#4
 8359 0102 05D0     	 beq .L238
 8360              	.L237:
1462:../4g_module/mdm_handler.c **** 			{
1463:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 8361              	 .loc 3 1463 0 is_stmt 1
 8362 0104 0423     	 movs r3,#4
 8363 0106 FB71     	 strb r3,[r7,#7]
1464:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_EXTRACT_OPERATOR_STATE;
 8364              	 .loc 3 1464 0
 8365 0108 0F4B     	 ldr r3,.L242
 8366 010a 0722     	 movs r2,#7
 8367 010c 1A70     	 strb r2,[r3]
1465:../4g_module/mdm_handler.c **** 			}
1466:../4g_module/mdm_handler.c **** 		break;
 8368              	 .loc 3 1466 0
 8369 010e 15E0     	 b .L229
 8370              	.L238:
 8371 0110 14E0     	 b .L229
 8372              	.L227:
1467:../4g_module/mdm_handler.c **** 
1468:../4g_module/mdm_handler.c **** 		case E_SIM_EXTRACT_OPERATOR_STATE:
1469:../4g_module/mdm_handler.c **** 			len_retStatus = mod_extractOperator();
 8373              	 .loc 3 1469 0
 8374 0112 FFF7FEFF 	 bl mod_extractOperator
 8375 0116 0346     	 mov r3,r0
 8376 0118 FB71     	 strb r3,[r7,#7]
1470:../4g_module/mdm_handler.c **** 			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 8377              	 .loc 3 1470 0
 8378 011a FB79     	 ldrb r3,[r7,#7]
 8379 011c 002B     	 cmp r3,#0
 8380 011e 02D0     	 beq .L239
 8381              	 .loc 3 1470 0 is_stmt 0 discriminator 1
 8382 0120 FB79     	 ldrb r3,[r7,#7]
 8383 0122 042B     	 cmp r3,#4
 8384 0124 05D0     	 beq .L240
 8385              	.L239:
1471:../4g_module/mdm_handler.c **** 			{
1472:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_SUCCESS;
 8386              	 .loc 3 1472 0 is_stmt 1
 8387 0126 0023     	 movs r3,#0
 8388 0128 FB71     	 strb r3,[r7,#7]
1473:../4g_module/mdm_handler.c **** 				sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 8389              	 .loc 3 1473 0
 8390 012a 074B     	 ldr r3,.L242
 8391 012c 0022     	 movs r2,#0
 8392 012e 1A70     	 strb r2,[r3]
1474:../4g_module/mdm_handler.c **** 			}
1475:../4g_module/mdm_handler.c **** 		break;
 8393              	 .loc 3 1475 0
 8394 0130 04E0     	 b .L229
 8395              	.L240:
 8396 0132 03E0     	 b .L229
 8397              	.L218:
1476:../4g_module/mdm_handler.c **** 
1477:../4g_module/mdm_handler.c **** 		default:
1478:../4g_module/mdm_handler.c **** 			sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 8398              	 .loc 3 1478 0
 8399 0134 044B     	 ldr r3,.L242
 8400 0136 0022     	 movs r2,#0
 8401 0138 1A70     	 strb r2,[r3]
1479:../4g_module/mdm_handler.c **** 		break;
 8402              	 .loc 3 1479 0
 8403 013a 00BF     	 nop
 8404              	.L229:
1480:../4g_module/mdm_handler.c **** 	}
1481:../4g_module/mdm_handler.c **** 	return len_retStatus;
 8405              	 .loc 3 1481 0
 8406 013c FB79     	 ldrb r3,[r7,#7]
1482:../4g_module/mdm_handler.c **** }
 8407              	 .loc 3 1482 0
 8408 013e 1846     	 mov r0,r3
 8409 0140 0837     	 adds r7,r7,#8
 8410              	.LCFI144:
 8411              	 .cfi_def_cfa_offset 8
 8412 0142 BD46     	 mov sp,r7
 8413              	.LCFI145:
 8414              	 .cfi_def_cfa_register 13
 8415              	 
 8416 0144 80BD     	 pop {r7,pc}
 8417              	.L243:
 8418 0146 00BF     	 .align 2
 8419              	.L242:
 8420 0148 00000000 	 .word sen_simStatusState
 8421              	 .cfi_endproc
 8422              	.LFE629:
 8424              	 .section .rodata
 8425 00e2 0000     	 .align 2
 8426              	.LC22:
 8427 00e4 302C3000 	 .ascii "0,0\000"
 8428              	 .align 2
 8429              	.LC23:
 8430 00e8 302C3100 	 .ascii "0,1\000"
 8431              	 .align 2
 8432              	.LC24:
 8433 00ec 302C3200 	 .ascii "0,2\000"
 8434              	 .align 2
 8435              	.LC25:
 8436 00f0 302C3300 	 .ascii "0,3\000"
 8437              	 .align 2
 8438              	.LC26:
 8439 00f4 302C3400 	 .ascii "0,4\000"
 8440              	 .align 2
 8441              	.LC27:
 8442 00f8 302C3500 	 .ascii "0,5\000"
 8443              	 .section .text.mod_networkStatus,"ax",%progbits
 8444              	 .align 2
 8445              	 .thumb
 8446              	 .thumb_func
 8448              	mod_networkStatus:
 8449              	.LFB630:
1483:../4g_module/mdm_handler.c **** 
1484:../4g_module/mdm_handler.c **** /**************************************************************************
1485:../4g_module/mdm_handler.c ****  * Function Name	:	mod_networkStatus
1486:../4g_module/mdm_handler.c ****  *
1487:../4g_module/mdm_handler.c ****  * Description   	:	This function checks the network status
1488:../4g_module/mdm_handler.c ****  *
1489:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1490:../4g_module/mdm_handler.c ****  *
1491:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1492:../4g_module/mdm_handler.c ****  *
1493:../4g_module/mdm_handler.c ****  ****************************************************************************/
1494:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_networkStatus(void)
1495:../4g_module/mdm_handler.c **** {
 8450              	 .loc 3 1495 0
 8451              	 .cfi_startproc
 8452              	 
 8453              	 
 8454 0000 80B5     	 push {r7,lr}
 8455              	.LCFI146:
 8456              	 .cfi_def_cfa_offset 8
 8457              	 .cfi_offset 7,-8
 8458              	 .cfi_offset 14,-4
 8459 0002 82B0     	 sub sp,sp,#8
 8460              	.LCFI147:
 8461              	 .cfi_def_cfa_offset 16
 8462 0004 00AF     	 add r7,sp,#0
 8463              	.LCFI148:
 8464              	 .cfi_def_cfa_register 7
1496:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 8465              	 .loc 3 1496 0
 8466 0006 0423     	 movs r3,#4
 8467 0008 FB71     	 strb r3,[r7,#7]
1497:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1498:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 8468              	 .loc 3 1498 0
 8469 000a 0023     	 movs r3,#0
 8470 000c 3B60     	 str r3,[r7]
1499:../4g_module/mdm_handler.c **** 
1500:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_CREG, (uint8_t *) NEW_LINE);
 8471              	 .loc 3 1500 0
 8472 000e 0E20     	 movs r0,#14
 8473 0010 4149     	 ldr r1,.L254
 8474 0012 FFF7FEFF 	 bl mod_sendCmdGetRsp
 8475 0016 0346     	 mov r3,r0
 8476 0018 FB71     	 strb r3,[r7,#7]
1501:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 8477              	 .loc 3 1501 0
 8478 001a FB79     	 ldrb r3,[r7,#7]
 8479 001c 002B     	 cmp r3,#0
 8480 001e 5ED1     	 bne .L245
1502:../4g_module/mdm_handler.c **** 	{
1503:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 8481              	 .loc 3 1503 0
 8482 0020 3E4B     	 ldr r3,.L254+4
 8483 0022 0022     	 movs r2,#0
 8484 0024 1A70     	 strb r2,[r3]
1504:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_INPROGRESS;
 8485              	 .loc 3 1504 0
 8486 0026 0423     	 movs r3,#4
 8487 0028 FB71     	 strb r3,[r7,#7]
1505:../4g_module/mdm_handler.c **** 
1506:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,0");
 8488              	 .loc 3 1506 0
 8489 002a 3D48     	 ldr r0,.L254+8
 8490 002c 3D49     	 ldr r1,.L254+12
 8491 002e FFF7FEFF 	 bl strstr
 8492 0032 3860     	 str r0,[r7]
1507:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8493              	 .loc 3 1507 0
 8494 0034 3B68     	 ldr r3,[r7]
 8495 0036 002B     	 cmp r3,#0
 8496 0038 06D0     	 beq .L246
1508:../4g_module/mdm_handler.c **** 		{
1509:../4g_module/mdm_handler.c **** 			//Not registered
1510:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_NONE;
 8497              	 .loc 3 1510 0
 8498 003a 3B4B     	 ldr r3,.L254+16
 8499 003c 0122     	 movs r2,#1
 8500 003e 9A70     	 strb r2,[r3,#2]
1511:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8501              	 .loc 3 1511 0
 8502 0040 0223     	 movs r3,#2
 8503 0042 FB71     	 strb r3,[r7,#7]
1512:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8504              	 .loc 3 1512 0
 8505 0044 FB79     	 ldrb r3,[r7,#7]
 8506 0046 62E0     	 b .L247
 8507              	.L246:
1513:../4g_module/mdm_handler.c **** 		}
1514:../4g_module/mdm_handler.c **** 
1515:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,1");
 8508              	 .loc 3 1515 0
 8509 0048 3548     	 ldr r0,.L254+8
 8510 004a 3849     	 ldr r1,.L254+20
 8511 004c FFF7FEFF 	 bl strstr
 8512 0050 3860     	 str r0,[r7]
1516:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8513              	 .loc 3 1516 0
 8514 0052 3B68     	 ldr r3,[r7]
 8515 0054 002B     	 cmp r3,#0
 8516 0056 06D0     	 beq .L248
1517:../4g_module/mdm_handler.c **** 		{
1518:../4g_module/mdm_handler.c **** 			//home network
1519:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_HOME;
 8517              	 .loc 3 1519 0
 8518 0058 334B     	 ldr r3,.L254+16
 8519 005a 0222     	 movs r2,#2
 8520 005c 9A70     	 strb r2,[r3,#2]
1520:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 8521              	 .loc 3 1520 0
 8522 005e 0023     	 movs r3,#0
 8523 0060 FB71     	 strb r3,[r7,#7]
1521:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8524              	 .loc 3 1521 0
 8525 0062 FB79     	 ldrb r3,[r7,#7]
 8526 0064 53E0     	 b .L247
 8527              	.L248:
1522:../4g_module/mdm_handler.c **** 		}
1523:../4g_module/mdm_handler.c **** 
1524:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,2");
 8528              	 .loc 3 1524 0
 8529 0066 2E48     	 ldr r0,.L254+8
 8530 0068 3149     	 ldr r1,.L254+24
 8531 006a FFF7FEFF 	 bl strstr
 8532 006e 3860     	 str r0,[r7]
1525:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8533              	 .loc 3 1525 0
 8534 0070 3B68     	 ldr r3,[r7]
 8535 0072 002B     	 cmp r3,#0
 8536 0074 06D0     	 beq .L249
1526:../4g_module/mdm_handler.c **** 		{
1527:../4g_module/mdm_handler.c **** 			//Not Registered
1528:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_NOT_REGISTERED;
 8537              	 .loc 3 1528 0
 8538 0076 2C4B     	 ldr r3,.L254+16
 8539 0078 0322     	 movs r2,#3
 8540 007a 9A70     	 strb r2,[r3,#2]
1529:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8541              	 .loc 3 1529 0
 8542 007c 0223     	 movs r3,#2
 8543 007e FB71     	 strb r3,[r7,#7]
1530:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8544              	 .loc 3 1530 0
 8545 0080 FB79     	 ldrb r3,[r7,#7]
 8546 0082 44E0     	 b .L247
 8547              	.L249:
1531:../4g_module/mdm_handler.c **** 		}
1532:../4g_module/mdm_handler.c **** 
1533:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,3");
 8548              	 .loc 3 1533 0
 8549 0084 2648     	 ldr r0,.L254+8
 8550 0086 2B49     	 ldr r1,.L254+28
 8551 0088 FFF7FEFF 	 bl strstr
 8552 008c 3860     	 str r0,[r7]
1534:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8553              	 .loc 3 1534 0
 8554 008e 3B68     	 ldr r3,[r7]
 8555 0090 002B     	 cmp r3,#0
 8556 0092 06D0     	 beq .L250
1535:../4g_module/mdm_handler.c **** 		{
1536:../4g_module/mdm_handler.c **** 			//Registration denied
1537:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_REGISTER_DENIED;
 8557              	 .loc 3 1537 0
 8558 0094 244B     	 ldr r3,.L254+16
 8559 0096 0422     	 movs r2,#4
 8560 0098 9A70     	 strb r2,[r3,#2]
1538:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8561              	 .loc 3 1538 0
 8562 009a 0223     	 movs r3,#2
 8563 009c FB71     	 strb r3,[r7,#7]
1539:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8564              	 .loc 3 1539 0
 8565 009e FB79     	 ldrb r3,[r7,#7]
 8566 00a0 35E0     	 b .L247
 8567              	.L250:
1540:../4g_module/mdm_handler.c **** 		}
1541:../4g_module/mdm_handler.c **** 
1542:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,4");
 8568              	 .loc 3 1542 0
 8569 00a2 1F48     	 ldr r0,.L254+8
 8570 00a4 2449     	 ldr r1,.L254+32
 8571 00a6 FFF7FEFF 	 bl strstr
 8572 00aa 3860     	 str r0,[r7]
1543:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8573              	 .loc 3 1543 0
 8574 00ac 3B68     	 ldr r3,[r7]
 8575 00ae 002B     	 cmp r3,#0
 8576 00b0 06D0     	 beq .L251
1544:../4g_module/mdm_handler.c **** 		{
1545:../4g_module/mdm_handler.c **** 			//Unknown
1546:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_UNKNOWN;
 8577              	 .loc 3 1546 0
 8578 00b2 1D4B     	 ldr r3,.L254+16
 8579 00b4 0522     	 movs r2,#5
 8580 00b6 9A70     	 strb r2,[r3,#2]
1547:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8581              	 .loc 3 1547 0
 8582 00b8 0223     	 movs r3,#2
 8583 00ba FB71     	 strb r3,[r7,#7]
1548:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8584              	 .loc 3 1548 0
 8585 00bc FB79     	 ldrb r3,[r7,#7]
 8586 00be 26E0     	 b .L247
 8587              	.L251:
1549:../4g_module/mdm_handler.c **** 		}
1550:../4g_module/mdm_handler.c **** 
1551:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,5");
 8588              	 .loc 3 1551 0
 8589 00c0 1748     	 ldr r0,.L254+8
 8590 00c2 1E49     	 ldr r1,.L254+36
 8591 00c4 FFF7FEFF 	 bl strstr
 8592 00c8 3860     	 str r0,[r7]
1552:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 8593              	 .loc 3 1552 0
 8594 00ca 3B68     	 ldr r3,[r7]
 8595 00cc 002B     	 cmp r3,#0
 8596 00ce 1DD0     	 beq .L252
1553:../4g_module/mdm_handler.c **** 		{
1554:../4g_module/mdm_handler.c **** 			//Registered, roaming
1555:../4g_module/mdm_handler.c **** 			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_ROAMING;
 8597              	 .loc 3 1555 0
 8598 00d0 154B     	 ldr r3,.L254+16
 8599 00d2 0622     	 movs r2,#6
 8600 00d4 9A70     	 strb r2,[r3,#2]
1556:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 8601              	 .loc 3 1556 0
 8602 00d6 0023     	 movs r3,#0
 8603 00d8 FB71     	 strb r3,[r7,#7]
1557:../4g_module/mdm_handler.c **** 			return len_retStatus;
 8604              	 .loc 3 1557 0
 8605 00da FB79     	 ldrb r3,[r7,#7]
 8606 00dc 17E0     	 b .L247
 8607              	.L245:
1558:../4g_module/mdm_handler.c **** 		}
1559:../4g_module/mdm_handler.c **** 	}
1560:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 8608              	 .loc 3 1560 0
 8609 00de FB79     	 ldrb r3,[r7,#7]
 8610 00e0 042B     	 cmp r3,#4
 8611 00e2 13D0     	 beq .L252
1561:../4g_module/mdm_handler.c **** 	{
1562:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 8612              	 .loc 3 1562 0
 8613 00e4 0D4B     	 ldr r3,.L254+4
 8614 00e6 1B78     	 ldrb r3,[r3]
 8615 00e8 0133     	 adds r3,r3,#1
 8616 00ea DAB2     	 uxtb r2,r3
 8617 00ec 0B4B     	 ldr r3,.L254+4
 8618 00ee 1A70     	 strb r2,[r3]
1563:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 8619              	 .loc 3 1563 0
 8620 00f0 0A4B     	 ldr r3,.L254+4
 8621 00f2 1B78     	 ldrb r3,[r3]
 8622 00f4 022B     	 cmp r3,#2
 8623 00f6 02D8     	 bhi .L253
1564:../4g_module/mdm_handler.c **** 		{
1565:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 8624              	 .loc 3 1565 0
 8625 00f8 0423     	 movs r3,#4
 8626 00fa FB71     	 strb r3,[r7,#7]
 8627 00fc 06E0     	 b .L252
 8628              	.L253:
1566:../4g_module/mdm_handler.c **** 		}
1567:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 8629              	 .loc 3 1567 0
 8630 00fe 074B     	 ldr r3,.L254+4
 8631 0100 1B78     	 ldrb r3,[r3]
 8632 0102 032B     	 cmp r3,#3
 8633 0104 02D9     	 bls .L252
1568:../4g_module/mdm_handler.c **** 		{
1569:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 8634              	 .loc 3 1569 0
 8635 0106 054B     	 ldr r3,.L254+4
 8636 0108 0022     	 movs r2,#0
 8637 010a 1A70     	 strb r2,[r3]
 8638              	.L252:
1570:../4g_module/mdm_handler.c **** 		}
1571:../4g_module/mdm_handler.c **** 	}
1572:../4g_module/mdm_handler.c **** 	return len_retStatus;
 8639              	 .loc 3 1572 0
 8640 010c FB79     	 ldrb r3,[r7,#7]
 8641              	.L247:
1573:../4g_module/mdm_handler.c **** }
 8642              	 .loc 3 1573 0
 8643 010e 1846     	 mov r0,r3
 8644 0110 0837     	 adds r7,r7,#8
 8645              	.LCFI149:
 8646              	 .cfi_def_cfa_offset 8
 8647 0112 BD46     	 mov sp,r7
 8648              	.LCFI150:
 8649              	 .cfi_def_cfa_register 13
 8650              	 
 8651 0114 80BD     	 pop {r7,pc}
 8652              	.L255:
 8653 0116 00BF     	 .align 2
 8654              	.L254:
 8655 0118 A0000000 	 .word .LC14
 8656 011c 00000000 	 .word lsu8_retryCnt.14907
 8657 0120 00000000 	 .word gu8arr_respBuffer
 8658 0124 E4000000 	 .word .LC22
 8659 0128 00000000 	 .word gst_deviceStatus
 8660 012c E8000000 	 .word .LC23
 8661 0130 EC000000 	 .word .LC24
 8662 0134 F0000000 	 .word .LC25
 8663 0138 F4000000 	 .word .LC26
 8664 013c F8000000 	 .word .LC27
 8665              	 .cfi_endproc
 8666              	.LFE630:
 8668              	 .section .text.mod_signalQuality,"ax",%progbits
 8669              	 .align 2
 8670              	 .thumb
 8671              	 .thumb_func
 8673              	mod_signalQuality:
 8674              	.LFB631:
1574:../4g_module/mdm_handler.c **** 
1575:../4g_module/mdm_handler.c **** /**************************************************************************
1576:../4g_module/mdm_handler.c ****  * Function Name	:	mod_signalQuality
1577:../4g_module/mdm_handler.c ****  *
1578:../4g_module/mdm_handler.c ****  * Description   	:	This function gets the signal quality
1579:../4g_module/mdm_handler.c ****  *
1580:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1581:../4g_module/mdm_handler.c ****  *
1582:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1583:../4g_module/mdm_handler.c ****  *
1584:../4g_module/mdm_handler.c ****  ****************************************************************************/
1585:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_signalQuality(void)
1586:../4g_module/mdm_handler.c **** {
 8675              	 .loc 3 1586 0
 8676              	 .cfi_startproc
 8677              	 
 8678              	 
 8679 0000 80B5     	 push {r7,lr}
 8680              	.LCFI151:
 8681              	 .cfi_def_cfa_offset 8
 8682              	 .cfi_offset 7,-8
 8683              	 .cfi_offset 14,-4
 8684 0002 82B0     	 sub sp,sp,#8
 8685              	.LCFI152:
 8686              	 .cfi_def_cfa_offset 16
 8687 0004 00AF     	 add r7,sp,#0
 8688              	.LCFI153:
 8689              	 .cfi_def_cfa_register 7
1587:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 8690              	 .loc 3 1587 0
 8691 0006 0423     	 movs r3,#4
 8692 0008 FB71     	 strb r3,[r7,#7]
1588:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1589:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 8693              	 .loc 3 1589 0
 8694 000a 0023     	 movs r3,#0
 8695 000c 3B60     	 str r3,[r7]
1590:../4g_module/mdm_handler.c **** 
1591:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_SIGNAL_QLTY, (uint8_t *) NEW_LINE);
 8696              	 .loc 3 1591 0
 8697 000e 0F20     	 movs r0,#15
 8698 0010 2049     	 ldr r1,.L263
 8699 0012 FFF7FEFF 	 bl mod_sendCmdGetRsp
 8700 0016 0346     	 mov r3,r0
 8701 0018 FB71     	 strb r3,[r7,#7]
1592:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 8702              	 .loc 3 1592 0
 8703 001a FB79     	 ldrb r3,[r7,#7]
 8704 001c 002B     	 cmp r3,#0
 8705 001e 1DD1     	 bne .L257
1593:../4g_module/mdm_handler.c **** 	{
1594:../4g_module/mdm_handler.c **** 
1595:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 8706              	 .loc 3 1595 0
 8707 0020 1D48     	 ldr r0,.L263+4
 8708 0022 1E49     	 ldr r1,.L263+8
 8709 0024 FFF7FEFF 	 bl strstr
 8710 0028 3860     	 str r0,[r7]
1596:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_SIGNAL_QLTY].mu8arr_otherRspString);
1597:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 8711              	 .loc 3 1597 0
 8712 002a 3B68     	 ldr r3,[r7]
 8713 002c 002B     	 cmp r3,#0
 8714 002e 12D0     	 beq .L258
1598:../4g_module/mdm_handler.c **** 		{
1599:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 6;
 8715              	 .loc 3 1599 0
 8716 0030 3B68     	 ldr r3,[r7]
 8717 0032 0633     	 adds r3,r3,#6
 8718 0034 3B60     	 str r3,[r7]
1600:../4g_module/mdm_handler.c **** 			gu8_signalQuality = atoi((char *) lu8p_Ptr++);
 8719              	 .loc 3 1600 0
 8720 0036 3B68     	 ldr r3,[r7]
 8721 0038 5A1C     	 adds r2,r3,#1
 8722 003a 3A60     	 str r2,[r7]
 8723 003c 1846     	 mov r0,r3
 8724 003e FFF7FEFF 	 bl atoi
 8725 0042 0346     	 mov r3,r0
 8726 0044 DAB2     	 uxtb r2,r3
 8727 0046 164B     	 ldr r3,.L263+12
 8728 0048 1A70     	 strb r2,[r3]
1601:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 8729              	 .loc 3 1601 0
 8730 004a 164B     	 ldr r3,.L263+16
 8731 004c 0022     	 movs r2,#0
 8732 004e 1A70     	 strb r2,[r3]
1602:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 8733              	 .loc 3 1602 0
 8734 0050 0023     	 movs r3,#0
 8735 0052 FB71     	 strb r3,[r7,#7]
 8736 0054 19E0     	 b .L260
 8737              	.L258:
1603:../4g_module/mdm_handler.c **** 		}
1604:../4g_module/mdm_handler.c **** 		else
1605:../4g_module/mdm_handler.c **** 		{
1606:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 8738              	 .loc 3 1606 0
 8739 0056 0223     	 movs r3,#2
 8740 0058 FB71     	 strb r3,[r7,#7]
 8741 005a 16E0     	 b .L260
 8742              	.L257:
1607:../4g_module/mdm_handler.c **** 		}
1608:../4g_module/mdm_handler.c **** 	}
1609:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 8743              	 .loc 3 1609 0
 8744 005c FB79     	 ldrb r3,[r7,#7]
 8745 005e 042B     	 cmp r3,#4
 8746 0060 13D0     	 beq .L260
1610:../4g_module/mdm_handler.c **** 	{
1611:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 8747              	 .loc 3 1611 0
 8748 0062 104B     	 ldr r3,.L263+16
 8749 0064 1B78     	 ldrb r3,[r3]
 8750 0066 0133     	 adds r3,r3,#1
 8751 0068 DAB2     	 uxtb r2,r3
 8752 006a 0E4B     	 ldr r3,.L263+16
 8753 006c 1A70     	 strb r2,[r3]
1612:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 8754              	 .loc 3 1612 0
 8755 006e 0D4B     	 ldr r3,.L263+16
 8756 0070 1B78     	 ldrb r3,[r3]
 8757 0072 022B     	 cmp r3,#2
 8758 0074 02D8     	 bhi .L261
1613:../4g_module/mdm_handler.c **** 		{
1614:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 8759              	 .loc 3 1614 0
 8760 0076 0423     	 movs r3,#4
 8761 0078 FB71     	 strb r3,[r7,#7]
 8762 007a 06E0     	 b .L260
 8763              	.L261:
1615:../4g_module/mdm_handler.c **** 		}
1616:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 8764              	 .loc 3 1616 0
 8765 007c 094B     	 ldr r3,.L263+16
 8766 007e 1B78     	 ldrb r3,[r3]
 8767 0080 032B     	 cmp r3,#3
 8768 0082 02D9     	 bls .L260
1617:../4g_module/mdm_handler.c **** 		{
1618:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 8769              	 .loc 3 1618 0
 8770 0084 074B     	 ldr r3,.L263+16
 8771 0086 0022     	 movs r2,#0
 8772 0088 1A70     	 strb r2,[r3]
 8773              	.L260:
1619:../4g_module/mdm_handler.c **** 		}
1620:../4g_module/mdm_handler.c **** 	}
1621:../4g_module/mdm_handler.c **** 	return len_retStatus;
 8774              	 .loc 3 1621 0
 8775 008a FB79     	 ldrb r3,[r7,#7]
1622:../4g_module/mdm_handler.c **** }
 8776              	 .loc 3 1622 0
 8777 008c 1846     	 mov r0,r3
 8778 008e 0837     	 adds r7,r7,#8
 8779              	.LCFI154:
 8780              	 .cfi_def_cfa_offset 8
 8781 0090 BD46     	 mov sp,r7
 8782              	.LCFI155:
 8783              	 .cfi_def_cfa_register 13
 8784              	 
 8785 0092 80BD     	 pop {r7,pc}
 8786              	.L264:
 8787              	 .align 2
 8788              	.L263:
 8789 0094 A0000000 	 .word .LC14
 8790 0098 00000000 	 .word gu8arr_respBuffer
 8791 009c D6490000 	 .word gcst_ATCmdTable+18902
 8792 00a0 00000000 	 .word gu8_signalQuality
 8793 00a4 00000000 	 .word lsu8_retryCnt.14913
 8794              	 .cfi_endproc
 8795              	.LFE631:
 8797              	 .section .text.mod_getSignalQuality,"ax",%progbits
 8798              	 .align 2
 8799              	 .global mod_getSignalQuality
 8800              	 .thumb
 8801              	 .thumb_func
 8803              	mod_getSignalQuality:
 8804              	.LFB632:
1623:../4g_module/mdm_handler.c **** 
1624:../4g_module/mdm_handler.c **** /**************************************************************************
1625:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getSignalQuality
1626:../4g_module/mdm_handler.c ****  *
1627:../4g_module/mdm_handler.c ****  * Description   	:	This function returns the signal quality
1628:../4g_module/mdm_handler.c ****  *
1629:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
1630:../4g_module/mdm_handler.c ****  *
1631:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t
1632:../4g_module/mdm_handler.c ****  *
1633:../4g_module/mdm_handler.c ****  ****************************************************************************/
1634:../4g_module/mdm_handler.c **** uint8_t mod_getSignalQuality(void)
1635:../4g_module/mdm_handler.c **** {
 8805              	 .loc 3 1635 0
 8806              	 .cfi_startproc
 8807              	 
 8808              	 
 8809              	 
 8810 0000 80B4     	 push {r7}
 8811              	.LCFI156:
 8812              	 .cfi_def_cfa_offset 4
 8813              	 .cfi_offset 7,-4
 8814 0002 00AF     	 add r7,sp,#0
 8815              	.LCFI157:
 8816              	 .cfi_def_cfa_register 7
1636:../4g_module/mdm_handler.c **** 	return gu8_signalQuality;
 8817              	 .loc 3 1636 0
 8818 0004 034B     	 ldr r3,.L267
 8819 0006 1B78     	 ldrb r3,[r3]
1637:../4g_module/mdm_handler.c **** }
 8820              	 .loc 3 1637 0
 8821 0008 1846     	 mov r0,r3
 8822 000a BD46     	 mov sp,r7
 8823              	.LCFI158:
 8824              	 .cfi_def_cfa_register 13
 8825              	 
 8826 000c 5DF8047B 	 ldr r7,[sp],#4
 8827              	.LCFI159:
 8828              	 .cfi_restore 7
 8829              	 .cfi_def_cfa_offset 0
 8830 0010 7047     	 bx lr
 8831              	.L268:
 8832 0012 00BF     	 .align 2
 8833              	.L267:
 8834 0014 00000000 	 .word gu8_signalQuality
 8835              	 .cfi_endproc
 8836              	.LFE632:
 8838              	 .section .text.mod_extractDateTime,"ax",%progbits
 8839              	 .align 2
 8840              	 .thumb
 8841              	 .thumb_func
 8843              	mod_extractDateTime:
 8844              	.LFB633:
1638:../4g_module/mdm_handler.c **** 
1639:../4g_module/mdm_handler.c **** /**************************************************************************
1640:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractDateTime
1641:../4g_module/mdm_handler.c ****  *
1642:../4g_module/mdm_handler.c ****  * Description   	:	This function extracts the Date and Time
1643:../4g_module/mdm_handler.c ****  *
1644:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1645:../4g_module/mdm_handler.c ****  *
1646:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1647:../4g_module/mdm_handler.c ****  *
1648:../4g_module/mdm_handler.c ****  ****************************************************************************/
1649:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractDateTime(void)
1650:../4g_module/mdm_handler.c **** {
 8845              	 .loc 3 1650 0
 8846              	 .cfi_startproc
 8847              	 
 8848              	 
 8849 0000 B0B5     	 push {r4,r5,r7,lr}
 8850              	.LCFI160:
 8851              	 .cfi_def_cfa_offset 16
 8852              	 .cfi_offset 4,-16
 8853              	 .cfi_offset 5,-12
 8854              	 .cfi_offset 7,-8
 8855              	 .cfi_offset 14,-4
 8856 0002 90B0     	 sub sp,sp,#64
 8857              	.LCFI161:
 8858              	 .cfi_def_cfa_offset 80
 8859 0004 00AF     	 add r7,sp,#0
 8860              	.LCFI162:
 8861              	 .cfi_def_cfa_register 7
1651:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 8862              	 .loc 3 1651 0
 8863 0006 0423     	 movs r3,#4
 8864 0008 87F83F30 	 strb r3,[r7,#63]
1652:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1653:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 8865              	 .loc 3 1653 0
 8866 000c 0023     	 movs r3,#0
 8867 000e BB63     	 str r3,[r7,#56]
1654:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_savePtr = NULL;
 8868              	 .loc 3 1654 0
 8869 0010 0023     	 movs r3,#0
 8870 0012 7B63     	 str r3,[r7,#52]
1655:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_tempBuff[50] = { 0 };
 8871              	 .loc 3 1655 0
 8872 0014 3B46     	 mov r3,r7
 8873 0016 0022     	 movs r2,#0
 8874 0018 1A60     	 str r2,[r3]
 8875 001a 0433     	 adds r3,r3,#4
 8876 001c 0022     	 movs r2,#0
 8877 001e 1A60     	 str r2,[r3]
 8878 0020 0433     	 adds r3,r3,#4
 8879 0022 0022     	 movs r2,#0
 8880 0024 1A60     	 str r2,[r3]
 8881 0026 0433     	 adds r3,r3,#4
 8882 0028 0022     	 movs r2,#0
 8883 002a 1A60     	 str r2,[r3]
 8884 002c 0433     	 adds r3,r3,#4
 8885 002e 0022     	 movs r2,#0
 8886 0030 1A60     	 str r2,[r3]
 8887 0032 0433     	 adds r3,r3,#4
 8888 0034 0022     	 movs r2,#0
 8889 0036 1A60     	 str r2,[r3]
 8890 0038 0433     	 adds r3,r3,#4
 8891 003a 0022     	 movs r2,#0
 8892 003c 1A60     	 str r2,[r3]
 8893 003e 0433     	 adds r3,r3,#4
 8894 0040 0022     	 movs r2,#0
 8895 0042 1A60     	 str r2,[r3]
 8896 0044 0433     	 adds r3,r3,#4
 8897 0046 0022     	 movs r2,#0
 8898 0048 1A60     	 str r2,[r3]
 8899 004a 0433     	 adds r3,r3,#4
 8900 004c 0022     	 movs r2,#0
 8901 004e 1A60     	 str r2,[r3]
 8902 0050 0433     	 adds r3,r3,#4
 8903 0052 0022     	 movs r2,#0
 8904 0054 1A60     	 str r2,[r3]
 8905 0056 0433     	 adds r3,r3,#4
 8906 0058 0022     	 movs r2,#0
 8907 005a 1A60     	 str r2,[r3]
 8908 005c 0433     	 adds r3,r3,#4
 8909 005e 0022     	 movs r2,#0
 8910 0060 1A80     	 strh r2,[r3]
 8911 0062 0233     	 adds r3,r3,#2
1656:../4g_module/mdm_handler.c **** 
1657:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_CCLK, (uint8_t *) NEW_LINE);
 8912              	 .loc 3 1657 0
 8913 0064 1020     	 movs r0,#16
 8914 0066 2E49     	 ldr r1,.L276
 8915 0068 FFF7FEFF 	 bl mod_sendCmdGetRsp
 8916 006c 0346     	 mov r3,r0
 8917 006e 87F83F30 	 strb r3,[r7,#63]
1658:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 8918              	 .loc 3 1658 0
 8919 0072 97F83F30 	 ldrb r3,[r7,#63]
 8920 0076 002B     	 cmp r3,#0
 8921 0078 33D1     	 bne .L270
1659:../4g_module/mdm_handler.c **** 	{
1660:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 8922              	 .loc 3 1660 0
 8923 007a 2A48     	 ldr r0,.L276+4
 8924 007c 2A49     	 ldr r1,.L276+8
 8925 007e FFF7FEFF 	 bl strstr
 8926 0082 B863     	 str r0,[r7,#56]
1661:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_CCLK].mu8arr_otherRspString);
1662:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 8927              	 .loc 3 1662 0
 8928 0084 BB6B     	 ldr r3,[r7,#56]
 8929 0086 002B     	 cmp r3,#0
 8930 0088 44D0     	 beq .L273
1663:../4g_module/mdm_handler.c **** 		{
1664:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 8931              	 .loc 3 1664 0
 8932 008a 284B     	 ldr r3,.L276+12
 8933 008c 0022     	 movs r2,#0
 8934 008e 1A70     	 strb r2,[r3]
1665:../4g_module/mdm_handler.c **** 
1666:../4g_module/mdm_handler.c **** 			memcpy(lu8arr_tempBuff, gu8arr_respBuffer, 50);
 8935              	 .loc 3 1666 0
 8936 0090 244B     	 ldr r3,.L276+4
 8937 0092 3C46     	 mov r4,r7
 8938 0094 1D46     	 mov r5,r3
 8939 0096 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 8940 0098 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 8941 009a 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 8942 009c 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 8943 009e 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 8944 00a0 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 8945 00a2 2B68     	 ldr r3,[r5]
 8946 00a4 2380     	 strh r3,[r4]
1667:../4g_module/mdm_handler.c **** 			lu8p_Ptr = (uint8_t *) strtok_r((char *) lu8arr_tempBuff, (const char *) ":",
 8947              	 .loc 3 1667 0
 8948 00a6 3A46     	 mov r2,r7
 8949 00a8 07F13403 	 add r3,r7,#52
 8950 00ac 1046     	 mov r0,r2
 8951 00ae 2049     	 ldr r1,.L276+16
 8952 00b0 1A46     	 mov r2,r3
 8953 00b2 FFF7FEFF 	 bl strtok_r
 8954 00b6 B863     	 str r0,[r7,#56]
1668:../4g_module/mdm_handler.c **** 					(char **) &lu8p_savePtr);
1669:../4g_module/mdm_handler.c **** 			lu8p_savePtr += 2;
 8955              	 .loc 3 1669 0
 8956 00b8 7B6B     	 ldr r3,[r7,#52]
 8957 00ba 0233     	 adds r3,r3,#2
 8958 00bc 7B63     	 str r3,[r7,#52]
1670:../4g_module/mdm_handler.c **** 			if (NULL != lu8p_savePtr)
 8959              	 .loc 3 1670 0
 8960 00be 7B6B     	 ldr r3,[r7,#52]
 8961 00c0 002B     	 cmp r3,#0
 8962 00c2 0AD0     	 beq .L272
1671:../4g_module/mdm_handler.c **** 			{
1672:../4g_module/mdm_handler.c **** 				memset(gu8_dataTime, 0, sizeof(gu8_dataTime));
 8963              	 .loc 3 1672 0
 8964 00c4 1B48     	 ldr r0,.L276+20
 8965 00c6 0021     	 movs r1,#0
 8966 00c8 1422     	 movs r2,#20
 8967 00ca FFF7FEFF 	 bl memset
1673:../4g_module/mdm_handler.c **** 				strncpy((char *) gu8_dataTime, (const char *) lu8p_savePtr,
 8968              	 .loc 3 1673 0
 8969 00ce 7B6B     	 ldr r3,[r7,#52]
 8970 00d0 1848     	 ldr r0,.L276+20
 8971 00d2 1946     	 mov r1,r3
 8972 00d4 1422     	 movs r2,#20
 8973 00d6 FFF7FEFF 	 bl strncpy
 8974              	.L272:
1674:../4g_module/mdm_handler.c **** 				TIME_SIZE);
1675:../4g_module/mdm_handler.c **** 			}
1676:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 8975              	 .loc 3 1676 0
 8976 00da 0023     	 movs r3,#0
 8977 00dc 87F83F30 	 strb r3,[r7,#63]
 8978 00e0 18E0     	 b .L273
 8979              	.L270:
1677:../4g_module/mdm_handler.c **** 		}
1678:../4g_module/mdm_handler.c **** 	}
1679:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 8980              	 .loc 3 1679 0
 8981 00e2 97F83F30 	 ldrb r3,[r7,#63]
 8982 00e6 042B     	 cmp r3,#4
 8983 00e8 14D0     	 beq .L273
1680:../4g_module/mdm_handler.c **** 	{
1681:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 8984              	 .loc 3 1681 0
 8985 00ea 104B     	 ldr r3,.L276+12
 8986 00ec 1B78     	 ldrb r3,[r3]
 8987 00ee 0133     	 adds r3,r3,#1
 8988 00f0 DAB2     	 uxtb r2,r3
 8989 00f2 0E4B     	 ldr r3,.L276+12
 8990 00f4 1A70     	 strb r2,[r3]
1682:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 8991              	 .loc 3 1682 0
 8992 00f6 0D4B     	 ldr r3,.L276+12
 8993 00f8 1B78     	 ldrb r3,[r3]
 8994 00fa 022B     	 cmp r3,#2
 8995 00fc 03D8     	 bhi .L274
1683:../4g_module/mdm_handler.c **** 		{
1684:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 8996              	 .loc 3 1684 0
 8997 00fe 0423     	 movs r3,#4
 8998 0100 87F83F30 	 strb r3,[r7,#63]
 8999 0104 06E0     	 b .L273
 9000              	.L274:
1685:../4g_module/mdm_handler.c **** 		}
1686:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 9001              	 .loc 3 1686 0
 9002 0106 094B     	 ldr r3,.L276+12
 9003 0108 1B78     	 ldrb r3,[r3]
 9004 010a 032B     	 cmp r3,#3
 9005 010c 02D9     	 bls .L273
1687:../4g_module/mdm_handler.c **** 		{
1688:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 9006              	 .loc 3 1688 0
 9007 010e 074B     	 ldr r3,.L276+12
 9008 0110 0022     	 movs r2,#0
 9009 0112 1A70     	 strb r2,[r3]
 9010              	.L273:
1689:../4g_module/mdm_handler.c **** 		}
1690:../4g_module/mdm_handler.c **** 	}
1691:../4g_module/mdm_handler.c **** 
1692:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9011              	 .loc 3 1692 0
 9012 0114 97F83F30 	 ldrb r3,[r7,#63]
1693:../4g_module/mdm_handler.c **** }
 9013              	 .loc 3 1693 0
 9014 0118 1846     	 mov r0,r3
 9015 011a 4037     	 adds r7,r7,#64
 9016              	.LCFI163:
 9017              	 .cfi_def_cfa_offset 16
 9018 011c BD46     	 mov sp,r7
 9019              	.LCFI164:
 9020              	 .cfi_def_cfa_register 13
 9021              	 
 9022 011e B0BD     	 pop {r4,r5,r7,pc}
 9023              	.L277:
 9024              	 .align 2
 9025              	.L276:
 9026 0120 A0000000 	 .word .LC14
 9027 0124 00000000 	 .word gu8arr_respBuffer
 9028 0128 7A4E0000 	 .word gcst_ATCmdTable+20090
 9029 012c 00000000 	 .word lsu8_retryCnt.14922
 9030 0130 8C000000 	 .word .LC11
 9031 0134 00000000 	 .word gu8_dataTime
 9032              	 .cfi_endproc
 9033              	.LFE633:
 9035              	 .section .rodata
 9036              	 .align 2
 9037              	.LC28:
 9038 00fc 25642C22 	 .ascii "%d,\"%s_%s\"\015\012\000"
 9038      25735F25 
 9038      73220D0A 
 9038      00
 9039 0109 000000   	 .align 2
 9040              	.LC29:
 9041 010c 736D6172 	 .ascii "smartKit\000"
 9041      744B6974 
 9041      00
 9042              	 .section .text.mod_mqttConnect,"ax",%progbits
 9043              	 .align 2
 9044              	 .thumb
 9045              	 .thumb_func
 9047              	mod_mqttConnect:
 9048              	.LFB634:
1694:../4g_module/mdm_handler.c **** 
1695:../4g_module/mdm_handler.c **** /**************************************************************************
1696:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttConnect
1697:../4g_module/mdm_handler.c ****  *
1698:../4g_module/mdm_handler.c ****  * Description   	:	This function used connect to the MQTT broker
1699:../4g_module/mdm_handler.c ****  *
1700:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1701:../4g_module/mdm_handler.c ****  *
1702:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1703:../4g_module/mdm_handler.c ****  *
1704:../4g_module/mdm_handler.c ****  ****************************************************************************/
1705:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttConnect(void)
1706:../4g_module/mdm_handler.c **** {
 9049              	 .loc 3 1706 0
 9050              	 .cfi_startproc
 9051              	 
 9052              	 
 9053 0000 90B5     	 push {r4,r7,lr}
 9054              	.LCFI165:
 9055              	 .cfi_def_cfa_offset 12
 9056              	 .cfi_offset 4,-12
 9057              	 .cfi_offset 7,-8
 9058              	 .cfi_offset 14,-4
 9059 0002 8FB0     	 sub sp,sp,#60
 9060              	.LCFI166:
 9061              	 .cfi_def_cfa_offset 72
 9062 0004 02AF     	 add r7,sp,#8
 9063              	.LCFI167:
 9064              	 .cfi_def_cfa 7,64
1707:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9065              	 .loc 3 1707 0
 9066 0006 0423     	 movs r3,#4
 9067 0008 87F82F30 	 strb r3,[r7,#47]
1708:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1709:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[35] = { 0 };
 9068              	 .loc 3 1709 0
 9069 000c 3B46     	 mov r3,r7
 9070 000e 0022     	 movs r2,#0
 9071 0010 1A60     	 str r2,[r3]
 9072 0012 0433     	 adds r3,r3,#4
 9073 0014 0022     	 movs r2,#0
 9074 0016 1A60     	 str r2,[r3]
 9075 0018 0433     	 adds r3,r3,#4
 9076 001a 0022     	 movs r2,#0
 9077 001c 1A60     	 str r2,[r3]
 9078 001e 0433     	 adds r3,r3,#4
 9079 0020 0022     	 movs r2,#0
 9080 0022 1A60     	 str r2,[r3]
 9081 0024 0433     	 adds r3,r3,#4
 9082 0026 0022     	 movs r2,#0
 9083 0028 1A60     	 str r2,[r3]
 9084 002a 0433     	 adds r3,r3,#4
 9085 002c 0022     	 movs r2,#0
 9086 002e 1A60     	 str r2,[r3]
 9087 0030 0433     	 adds r3,r3,#4
 9088 0032 0022     	 movs r2,#0
 9089 0034 1A60     	 str r2,[r3]
 9090 0036 0433     	 adds r3,r3,#4
 9091 0038 0022     	 movs r2,#0
 9092 003a 1A60     	 str r2,[r3]
 9093 003c 0433     	 adds r3,r3,#4
 9094 003e 0022     	 movs r2,#0
 9095 0040 1A80     	 strh r2,[r3]
 9096 0042 0233     	 adds r3,r3,#2
 9097 0044 0022     	 movs r2,#0
 9098 0046 1A70     	 strb r2,[r3]
 9099 0048 0133     	 adds r3,r3,#1
1710:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 9100              	 .loc 3 1710 0
 9101 004a 0023     	 movs r3,#0
 9102 004c BB62     	 str r3,[r7,#40]
1711:../4g_module/mdm_handler.c **** 	short ls_result = E_MQTT_CON_NONE;
 9103              	 .loc 3 1711 0
 9104 004e 4FF6FF73 	 movw r3,#65535
 9105 0052 FB84     	 strh r3,[r7,#38]
1712:../4g_module/mdm_handler.c **** 
1713:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, (const char*) "%d,\"%s_%s\"\r\n",
 9106              	 .loc 3 1713 0
 9107 0054 874B     	 ldr r3,.L308
 9108 0056 1B78     	 ldrb r3,[r3]
 9109 0058 1C46     	 mov r4,r3
 9110 005a 3A46     	 mov r2,r7
 9111 005c 864B     	 ldr r3,.L308+4
 9112 005e 0093     	 str r3,[sp]
 9113 0060 1046     	 mov r0,r2
 9114 0062 8649     	 ldr r1,.L308+8
 9115 0064 2246     	 mov r2,r4
 9116 0066 864B     	 ldr r3,.L308+12
 9117 0068 FFF7FEFF 	 bl sprintf
1714:../4g_module/mdm_handler.c **** 			sgu8_mqttClientId, MQTT_CONNECT_CLINT_ID, &gu8arr_IMEINum[5]);	//using last 10 digits of IMEI fo
1715:../4g_module/mdm_handler.c **** 
1716:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CONNECT, (uint8_t *) lu8arr_param);
 9118              	 .loc 3 1716 0
 9119 006c 3B46     	 mov r3,r7
 9120 006e 1420     	 movs r0,#20
 9121 0070 1946     	 mov r1,r3
 9122 0072 FFF7FEFF 	 bl mod_sendCmdGetRsp
 9123 0076 0346     	 mov r3,r0
 9124 0078 87F82F30 	 strb r3,[r7,#47]
1717:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 9125              	 .loc 3 1717 0
 9126 007c 97F82F30 	 ldrb r3,[r7,#47]
 9127 0080 002B     	 cmp r3,#0
 9128 0082 40F09680 	 bne .L279
1718:../4g_module/mdm_handler.c **** 	{
1719:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 9129              	 .loc 3 1719 0
 9130 0086 7F4B     	 ldr r3,.L308+16
 9131 0088 0022     	 movs r2,#0
 9132 008a 1A70     	 strb r2,[r3]
1720:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 9133              	 .loc 3 1720 0
 9134 008c 7E48     	 ldr r0,.L308+20
 9135 008e 7F49     	 ldr r1,.L308+24
 9136 0090 FFF7FEFF 	 bl strstr
 9137 0094 B862     	 str r0,[r7,#40]
1721:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CONNECT].mu8arr_otherRspString);
1722:../4g_module/mdm_handler.c **** 
1723:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 9138              	 .loc 3 1723 0
 9139 0096 BB6A     	 ldr r3,[r7,#40]
 9140 0098 002B     	 cmp r3,#0
 9141 009a 00F08680 	 beq .L280
1724:../4g_module/mdm_handler.c **** 		{
1725:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 10;
 9142              	 .loc 3 1725 0
 9143 009e BB6A     	 ldr r3,[r7,#40]
 9144 00a0 0A33     	 adds r3,r3,#10
 9145 00a2 BB62     	 str r3,[r7,#40]
1726:../4g_module/mdm_handler.c **** 			ls_result = atoi((char *) lu8p_Ptr);
 9146              	 .loc 3 1726 0
 9147 00a4 B86A     	 ldr r0,[r7,#40]
 9148 00a6 FFF7FEFF 	 bl atoi
 9149 00aa 0346     	 mov r3,r0
 9150 00ac FB84     	 strh r3,[r7,#38]
1727:../4g_module/mdm_handler.c **** 			if (sgu8_mqttClientId == ls_result)	//check client Idx
 9151              	 .loc 3 1727 0
 9152 00ae 714B     	 ldr r3,.L308
 9153 00b0 1B78     	 ldrb r3,[r3]
 9154 00b2 1A46     	 mov r2,r3
 9155 00b4 B7F92630 	 ldrsh r3,[r7,#38]
 9156 00b8 9A42     	 cmp r2,r3
 9157 00ba 72D1     	 bne .L281
1728:../4g_module/mdm_handler.c **** 			{
1729:../4g_module/mdm_handler.c **** 				lu8p_Ptr += 2;
 9158              	 .loc 3 1729 0
 9159 00bc BB6A     	 ldr r3,[r7,#40]
 9160 00be 0233     	 adds r3,r3,#2
 9161 00c0 BB62     	 str r3,[r7,#40]
1730:../4g_module/mdm_handler.c **** 				ls_result = atoi((char *) lu8p_Ptr);
 9162              	 .loc 3 1730 0
 9163 00c2 B86A     	 ldr r0,[r7,#40]
 9164 00c4 FFF7FEFF 	 bl atoi
 9165 00c8 0346     	 mov r3,r0
 9166 00ca FB84     	 strh r3,[r7,#38]
1731:../4g_module/mdm_handler.c **** 				if (0 == ls_result)	//Packet sent successfully and ACK received from server
 9167              	 .loc 3 1731 0
 9168 00cc B7F92630 	 ldrsh r3,[r7,#38]
 9169 00d0 002B     	 cmp r3,#0
 9170 00d2 19D1     	 bne .L282
1732:../4g_module/mdm_handler.c **** 				{
1733:../4g_module/mdm_handler.c **** 					lu8p_Ptr += 2;
 9171              	 .loc 3 1733 0
 9172 00d4 BB6A     	 ldr r3,[r7,#40]
 9173 00d6 0233     	 adds r3,r3,#2
 9174 00d8 BB62     	 str r3,[r7,#40]
1734:../4g_module/mdm_handler.c **** 					ls_result = atoi((char *) lu8p_Ptr);
 9175              	 .loc 3 1734 0
 9176 00da B86A     	 ldr r0,[r7,#40]
 9177 00dc FFF7FEFF 	 bl atoi
 9178 00e0 0346     	 mov r3,r0
 9179 00e2 FB84     	 strh r3,[r7,#38]
1735:../4g_module/mdm_handler.c **** 					if (0 == ls_result)	//Connection Accepted
 9180              	 .loc 3 1735 0
 9181 00e4 B7F92630 	 ldrsh r3,[r7,#38]
 9182 00e8 002B     	 cmp r3,#0
 9183 00ea 06D1     	 bne .L283
1736:../4g_module/mdm_handler.c **** 					{
1737:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes =
 9184              	 .loc 3 1737 0
 9185 00ec 684B     	 ldr r3,.L308+28
 9186 00ee 0022     	 movs r2,#0
 9187 00f0 5A71     	 strb r2,[r3,#5]
1738:../4g_module/mdm_handler.c **** 								E_ACK_RCVD_CONNECT_ACCEPT;
1739:../4g_module/mdm_handler.c **** 
1740:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 9188              	 .loc 3 1740 0
 9189 00f2 0023     	 movs r3,#0
 9190 00f4 87F82F30 	 strb r3,[r7,#47]
 9191 00f8 B5E0     	 b .L296
 9192              	.L283:
1741:../4g_module/mdm_handler.c **** 					}
1742:../4g_module/mdm_handler.c **** 					else
1743:../4g_module/mdm_handler.c **** 					{
1744:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 9193              	 .loc 3 1744 0
 9194 00fa 654B     	 ldr r3,.L308+28
 9195 00fc 0822     	 movs r2,#8
 9196 00fe 5A71     	 strb r2,[r3,#5]
1745:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
 9197              	 .loc 3 1745 0
 9198 0100 0223     	 movs r3,#2
 9199 0102 87F82F30 	 strb r3,[r7,#47]
 9200 0106 AEE0     	 b .L296
 9201              	.L282:
1746:../4g_module/mdm_handler.c **** 					}
1747:../4g_module/mdm_handler.c **** 				}
1748:../4g_module/mdm_handler.c **** 				else if (1 == ls_result)	//Packet retransmission
 9202              	 .loc 3 1748 0
 9203 0108 B7F92630 	 ldrsh r3,[r7,#38]
 9204 010c 012B     	 cmp r3,#1
 9205 010e 06D1     	 bne .L286
1749:../4g_module/mdm_handler.c **** 				{
1750:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttConnectErrorCodes = E_PACKET_RETRANSMISSION;
 9206              	 .loc 3 1750 0
 9207 0110 5F4B     	 ldr r3,.L308+28
 9208 0112 0122     	 movs r2,#1
 9209 0114 5A71     	 strb r2,[r3,#5]
1751:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
 9210              	 .loc 3 1751 0
 9211 0116 0423     	 movs r3,#4
 9212 0118 87F82F30 	 strb r3,[r7,#47]
 9213 011c A3E0     	 b .L296
 9214              	.L286:
1752:../4g_module/mdm_handler.c **** 				}
1753:../4g_module/mdm_handler.c **** 				else if (2 == ls_result)	//Failed to send packet
 9215              	 .loc 3 1753 0
 9216 011e B7F92630 	 ldrsh r3,[r7,#38]
 9217 0122 022B     	 cmp r3,#2
 9218 0124 36D1     	 bne .L287
1754:../4g_module/mdm_handler.c **** 				{
1755:../4g_module/mdm_handler.c **** 					lu8p_Ptr += 2;
 9219              	 .loc 3 1755 0
 9220 0126 BB6A     	 ldr r3,[r7,#40]
 9221 0128 0233     	 adds r3,r3,#2
 9222 012a BB62     	 str r3,[r7,#40]
1756:../4g_module/mdm_handler.c **** 					ls_result = atoi((char *) lu8p_Ptr);
 9223              	 .loc 3 1756 0
 9224 012c B86A     	 ldr r0,[r7,#40]
 9225 012e FFF7FEFF 	 bl atoi
 9226 0132 0346     	 mov r3,r0
 9227 0134 FB84     	 strh r3,[r7,#38]
1757:../4g_module/mdm_handler.c **** 					if (1 == ls_result)	//Connection Refused: Unacceptable Protocol Version
 9228              	 .loc 3 1757 0
 9229 0136 B7F92630 	 ldrsh r3,[r7,#38]
 9230 013a 012B     	 cmp r3,#1
 9231 013c 03D1     	 bne .L288
1758:../4g_module/mdm_handler.c **** 					{
1759:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes =
 9232              	 .loc 3 1759 0
 9233 013e 544B     	 ldr r3,.L308+28
 9234 0140 0322     	 movs r2,#3
 9235 0142 5A71     	 strb r2,[r3,#5]
 9236 0144 22E0     	 b .L289
 9237              	.L288:
1760:../4g_module/mdm_handler.c **** 								E_CON_REF_UNACC_PRO_VER;
1761:../4g_module/mdm_handler.c **** 					}
1762:../4g_module/mdm_handler.c **** 					else if (2 == ls_result)	//Connection Refused: Identifier Rejected
 9238              	 .loc 3 1762 0
 9239 0146 B7F92630 	 ldrsh r3,[r7,#38]
 9240 014a 022B     	 cmp r3,#2
 9241 014c 03D1     	 bne .L290
1763:../4g_module/mdm_handler.c **** 					{
1764:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_ID_REJECT;
 9242              	 .loc 3 1764 0
 9243 014e 504B     	 ldr r3,.L308+28
 9244 0150 0422     	 movs r2,#4
 9245 0152 5A71     	 strb r2,[r3,#5]
 9246 0154 1AE0     	 b .L289
 9247              	.L290:
1765:../4g_module/mdm_handler.c **** 					}
1766:../4g_module/mdm_handler.c **** 					else if (3 == ls_result)	//Connection Refused: Server Unavailable
 9248              	 .loc 3 1766 0
 9249 0156 B7F92630 	 ldrsh r3,[r7,#38]
 9250 015a 032B     	 cmp r3,#3
 9251 015c 03D1     	 bne .L291
1767:../4g_module/mdm_handler.c **** 					{
1768:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes =
 9252              	 .loc 3 1768 0
 9253 015e 4C4B     	 ldr r3,.L308+28
 9254 0160 0522     	 movs r2,#5
 9255 0162 5A71     	 strb r2,[r3,#5]
 9256 0164 12E0     	 b .L289
 9257              	.L291:
1769:../4g_module/mdm_handler.c **** 								E_CON_REF_SERVER_UNAVAIL;
1770:../4g_module/mdm_handler.c **** 					}
1771:../4g_module/mdm_handler.c **** 					else if (4 == ls_result)//Connection Refused: Bad User Name or Password
 9258              	 .loc 3 1771 0
 9259 0166 B7F92630 	 ldrsh r3,[r7,#38]
 9260 016a 042B     	 cmp r3,#4
 9261 016c 03D1     	 bne .L292
1772:../4g_module/mdm_handler.c **** 					{
1773:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes =
 9262              	 .loc 3 1773 0
 9263 016e 484B     	 ldr r3,.L308+28
 9264 0170 0622     	 movs r2,#6
 9265 0172 5A71     	 strb r2,[r3,#5]
 9266 0174 0AE0     	 b .L289
 9267              	.L292:
1774:../4g_module/mdm_handler.c **** 								E_CON_REF_BAD_USR_PASS;
1775:../4g_module/mdm_handler.c **** 					}
1776:../4g_module/mdm_handler.c **** 					else if (5 == ls_result) //Connection Refused: Not Authorized
 9268              	 .loc 3 1776 0
 9269 0176 B7F92630 	 ldrsh r3,[r7,#38]
 9270 017a 052B     	 cmp r3,#5
 9271 017c 03D1     	 bne .L293
1777:../4g_module/mdm_handler.c **** 					{
1778:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_NOT_AUTH;
 9272              	 .loc 3 1778 0
 9273 017e 444B     	 ldr r3,.L308+28
 9274 0180 0722     	 movs r2,#7
 9275 0182 5A71     	 strb r2,[r3,#5]
 9276 0184 02E0     	 b .L289
 9277              	.L293:
1779:../4g_module/mdm_handler.c **** 					}
1780:../4g_module/mdm_handler.c **** 					else
1781:../4g_module/mdm_handler.c **** 					{
1782:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 9278              	 .loc 3 1782 0
 9279 0186 424B     	 ldr r3,.L308+28
 9280 0188 0822     	 movs r2,#8
 9281 018a 5A71     	 strb r2,[r3,#5]
 9282              	.L289:
1783:../4g_module/mdm_handler.c **** 					}
1784:../4g_module/mdm_handler.c **** 
1785:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 9283              	 .loc 3 1785 0
 9284 018c 0223     	 movs r3,#2
 9285 018e 87F82F30 	 strb r3,[r7,#47]
 9286 0192 68E0     	 b .L296
 9287              	.L287:
1786:../4g_module/mdm_handler.c **** 				}
1787:../4g_module/mdm_handler.c **** 				else
1788:../4g_module/mdm_handler.c **** 				{
1789:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 9288              	 .loc 3 1789 0
 9289 0194 3E4B     	 ldr r3,.L308+28
 9290 0196 0822     	 movs r2,#8
 9291 0198 5A71     	 strb r2,[r3,#5]
1790:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 9292              	 .loc 3 1790 0
 9293 019a 0223     	 movs r3,#2
 9294 019c 87F82F30 	 strb r3,[r7,#47]
 9295 01a0 61E0     	 b .L296
 9296              	.L281:
1791:../4g_module/mdm_handler.c **** 				}
1792:../4g_module/mdm_handler.c **** 			}
1793:../4g_module/mdm_handler.c **** 			else
1794:../4g_module/mdm_handler.c **** 			{
1795:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 9297              	 .loc 3 1795 0
 9298 01a2 0223     	 movs r3,#2
 9299 01a4 87F82F30 	 strb r3,[r7,#47]
 9300 01a8 5DE0     	 b .L296
 9301              	.L280:
1796:../4g_module/mdm_handler.c **** 			}
1797:../4g_module/mdm_handler.c **** 		}
1798:../4g_module/mdm_handler.c **** 		else
1799:../4g_module/mdm_handler.c **** 		{
1800:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 9302              	 .loc 3 1800 0
 9303 01aa 0223     	 movs r3,#2
 9304 01ac 87F82F30 	 strb r3,[r7,#47]
 9305 01b0 59E0     	 b .L296
 9306              	.L279:
1801:../4g_module/mdm_handler.c **** 		}
1802:../4g_module/mdm_handler.c **** 	}
1803:../4g_module/mdm_handler.c **** 	else if (E_RET_RSP_ERROR == len_retStatus)
 9307              	 .loc 3 1803 0
 9308 01b2 97F82F30 	 ldrb r3,[r7,#47]
 9309 01b6 032B     	 cmp r3,#3
 9310 01b8 3CD1     	 bne .L297
1804:../4g_module/mdm_handler.c **** 	{
1805:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 9311              	 .loc 3 1805 0
 9312 01ba 324B     	 ldr r3,.L308+16
 9313 01bc 0022     	 movs r2,#0
 9314 01be 1A70     	 strb r2,[r3]
1806:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 9315              	 .loc 3 1806 0
 9316 01c0 3148     	 ldr r0,.L308+20
 9317 01c2 3449     	 ldr r1,.L308+32
 9318 01c4 FFF7FEFF 	 bl strstr
 9319 01c8 B862     	 str r0,[r7,#40]
1807:../4g_module/mdm_handler.c **** 				(const char *) QMTSTAT);
1808:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 9320              	 .loc 3 1808 0
 9321 01ca BB6A     	 ldr r3,[r7,#40]
 9322 01cc 002B     	 cmp r3,#0
 9323 01ce 2DD0     	 beq .L298
1809:../4g_module/mdm_handler.c **** 		{
1810:../4g_module/mdm_handler.c **** 			if (lu8p_Ptr != NULL)
 9324              	 .loc 3 1810 0
 9325 01d0 BB6A     	 ldr r3,[r7,#40]
 9326 01d2 002B     	 cmp r3,#0
 9327 01d4 26D0     	 beq .L299
1811:../4g_module/mdm_handler.c **** 			{
1812:../4g_module/mdm_handler.c **** 				lu8p_Ptr += 10;
 9328              	 .loc 3 1812 0
 9329 01d6 BB6A     	 ldr r3,[r7,#40]
 9330 01d8 0A33     	 adds r3,r3,#10
 9331 01da BB62     	 str r3,[r7,#40]
1813:../4g_module/mdm_handler.c **** 				ls_result = atoi((char *) lu8p_Ptr);
 9332              	 .loc 3 1813 0
 9333 01dc B86A     	 ldr r0,[r7,#40]
 9334 01de FFF7FEFF 	 bl atoi
 9335 01e2 0346     	 mov r3,r0
 9336 01e4 FB84     	 strh r3,[r7,#38]
1814:../4g_module/mdm_handler.c **** 				if (sgu8_mqttClientId == ls_result)	//check client Idx
 9337              	 .loc 3 1814 0
 9338 01e6 234B     	 ldr r3,.L308
 9339 01e8 1B78     	 ldrb r3,[r3]
 9340 01ea 1A46     	 mov r2,r3
 9341 01ec B7F92630 	 ldrsh r3,[r7,#38]
 9342 01f0 9A42     	 cmp r2,r3
 9343 01f2 13D1     	 bne .L300
1815:../4g_module/mdm_handler.c **** 				{
1816:../4g_module/mdm_handler.c **** 					lu8p_Ptr += 2;
 9344              	 .loc 3 1816 0
 9345 01f4 BB6A     	 ldr r3,[r7,#40]
 9346 01f6 0233     	 adds r3,r3,#2
 9347 01f8 BB62     	 str r3,[r7,#40]
1817:../4g_module/mdm_handler.c **** 					ls_result = atoi((char *) lu8p_Ptr);	//check error code
 9348              	 .loc 3 1817 0
 9349 01fa B86A     	 ldr r0,[r7,#40]
 9350 01fc FFF7FEFF 	 bl atoi
 9351 0200 0346     	 mov r3,r0
 9352 0202 FB84     	 strh r3,[r7,#38]
1818:../4g_module/mdm_handler.c **** 					if (1 == ls_result)
 9353              	 .loc 3 1818 0
 9354 0204 B7F92630 	 ldrsh r3,[r7,#38]
 9355 0208 012B     	 cmp r3,#1
 9356 020a 03D1     	 bne .L301
1819:../4g_module/mdm_handler.c **** 					{
1820:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_CONN_CLOSED_ERROR;
 9357              	 .loc 3 1820 0
 9358 020c 0A23     	 movs r3,#10
 9359 020e 87F82F30 	 strb r3,[r7,#47]
 9360 0212 28E0     	 b .L296
 9361              	.L301:
1821:../4g_module/mdm_handler.c **** 					}
1822:../4g_module/mdm_handler.c **** 					else
1823:../4g_module/mdm_handler.c **** 					{
1824:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
 9362              	 .loc 3 1824 0
 9363 0214 0223     	 movs r3,#2
 9364 0216 87F82F30 	 strb r3,[r7,#47]
 9365 021a 24E0     	 b .L296
 9366              	.L300:
1825:../4g_module/mdm_handler.c **** 					}
1826:../4g_module/mdm_handler.c **** 				}
1827:../4g_module/mdm_handler.c **** 				else
1828:../4g_module/mdm_handler.c **** 				{
1829:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 9367              	 .loc 3 1829 0
 9368 021c 0223     	 movs r3,#2
 9369 021e 87F82F30 	 strb r3,[r7,#47]
 9370 0222 20E0     	 b .L296
 9371              	.L299:
1830:../4g_module/mdm_handler.c **** 				}
1831:../4g_module/mdm_handler.c **** 			}
1832:../4g_module/mdm_handler.c **** 			else
1833:../4g_module/mdm_handler.c **** 			{
1834:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 9372              	 .loc 3 1834 0
 9373 0224 0223     	 movs r3,#2
 9374 0226 87F82F30 	 strb r3,[r7,#47]
 9375 022a 1CE0     	 b .L296
 9376              	.L298:
1835:../4g_module/mdm_handler.c **** 			}
1836:../4g_module/mdm_handler.c **** 		}
1837:../4g_module/mdm_handler.c **** 		else
1838:../4g_module/mdm_handler.c **** 		{
1839:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 9377              	 .loc 3 1839 0
 9378 022c 0223     	 movs r3,#2
 9379 022e 87F82F30 	 strb r3,[r7,#47]
 9380 0232 18E0     	 b .L296
 9381              	.L297:
1840:../4g_module/mdm_handler.c **** 		}
1841:../4g_module/mdm_handler.c **** 
1842:../4g_module/mdm_handler.c **** 	}
1843:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 9382              	 .loc 3 1843 0
 9383 0234 97F82F30 	 ldrb r3,[r7,#47]
 9384 0238 042B     	 cmp r3,#4
 9385 023a 14D0     	 beq .L296
1844:../4g_module/mdm_handler.c **** 	{
1845:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 9386              	 .loc 3 1845 0
 9387 023c 114B     	 ldr r3,.L308+16
 9388 023e 1B78     	 ldrb r3,[r3]
 9389 0240 0133     	 adds r3,r3,#1
 9390 0242 DAB2     	 uxtb r2,r3
 9391 0244 0F4B     	 ldr r3,.L308+16
 9392 0246 1A70     	 strb r2,[r3]
1846:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 9393              	 .loc 3 1846 0
 9394 0248 0E4B     	 ldr r3,.L308+16
 9395 024a 1B78     	 ldrb r3,[r3]
 9396 024c 022B     	 cmp r3,#2
 9397 024e 03D8     	 bhi .L306
1847:../4g_module/mdm_handler.c **** 		{
1848:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 9398              	 .loc 3 1848 0
 9399 0250 0423     	 movs r3,#4
 9400 0252 87F82F30 	 strb r3,[r7,#47]
 9401 0256 06E0     	 b .L296
 9402              	.L306:
1849:../4g_module/mdm_handler.c **** 		}
1850:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 9403              	 .loc 3 1850 0
 9404 0258 0A4B     	 ldr r3,.L308+16
 9405 025a 1B78     	 ldrb r3,[r3]
 9406 025c 032B     	 cmp r3,#3
 9407 025e 02D9     	 bls .L296
1851:../4g_module/mdm_handler.c **** 		{
1852:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 9408              	 .loc 3 1852 0
 9409 0260 084B     	 ldr r3,.L308+16
 9410 0262 0022     	 movs r2,#0
 9411 0264 1A70     	 strb r2,[r3]
 9412              	.L296:
1853:../4g_module/mdm_handler.c **** 		}
1854:../4g_module/mdm_handler.c **** 	}
1855:../4g_module/mdm_handler.c **** 
1856:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9413              	 .loc 3 1856 0
 9414 0266 97F82F30 	 ldrb r3,[r7,#47]
1857:../4g_module/mdm_handler.c **** }
 9415              	 .loc 3 1857 0
 9416 026a 1846     	 mov r0,r3
 9417 026c 3437     	 adds r7,r7,#52
 9418              	.LCFI168:
 9419              	 .cfi_def_cfa_offset 12
 9420 026e BD46     	 mov sp,r7
 9421              	.LCFI169:
 9422              	 .cfi_def_cfa_register 13
 9423              	 
 9424 0270 90BD     	 pop {r4,r7,pc}
 9425              	.L309:
 9426 0272 00BF     	 .align 2
 9427              	.L308:
 9428 0274 00000000 	 .word sgu8_mqttClientId
 9429 0278 05000000 	 .word gu8arr_IMEINum+5
 9430 027c FC000000 	 .word .LC28
 9431 0280 0C010000 	 .word .LC29
 9432 0284 00000000 	 .word lsu8_retryCnt.14930
 9433 0288 00000000 	 .word gu8arr_respBuffer
 9434 028c 0A610000 	 .word gcst_ATCmdTable+24842
 9435 0290 00000000 	 .word gst_deviceStatus
 9436 0294 00000000 	 .word .LC0
 9437              	 .cfi_endproc
 9438              	.LFE634:
 9440              	 .section .rodata
 9441 0115 000000   	 .align 2
 9442              	.LC30:
 9443 0118 25640D0A 	 .ascii "%d\015\012\000"
 9443      00
 9444              	 .section .text.mod_mqttDisConnect,"ax",%progbits
 9445              	 .align 2
 9446              	 .thumb
 9447              	 .thumb_func
 9449              	mod_mqttDisConnect:
 9450              	.LFB635:
1858:../4g_module/mdm_handler.c **** 
1859:../4g_module/mdm_handler.c **** /**************************************************************************
1860:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttDisConnect
1861:../4g_module/mdm_handler.c ****  *
1862:../4g_module/mdm_handler.c ****  * Description   	:	This function used disconnect to the MQTT broker
1863:../4g_module/mdm_handler.c ****  *
1864:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1865:../4g_module/mdm_handler.c ****  *
1866:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1867:../4g_module/mdm_handler.c ****  *
1868:../4g_module/mdm_handler.c ****  ****************************************************************************/
1869:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttDisConnect(void)
1870:../4g_module/mdm_handler.c **** {
 9451              	 .loc 3 1870 0
 9452              	 .cfi_startproc
 9453              	 
 9454              	 
 9455 0000 80B5     	 push {r7,lr}
 9456              	.LCFI170:
 9457              	 .cfi_def_cfa_offset 8
 9458              	 .cfi_offset 7,-8
 9459              	 .cfi_offset 14,-4
 9460 0002 84B0     	 sub sp,sp,#16
 9461              	.LCFI171:
 9462              	 .cfi_def_cfa_offset 24
 9463 0004 00AF     	 add r7,sp,#0
 9464              	.LCFI172:
 9465              	 .cfi_def_cfa_register 7
1871:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9466              	 .loc 3 1871 0
 9467 0006 0423     	 movs r3,#4
 9468 0008 FB73     	 strb r3,[r7,#15]
1872:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1873:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[3] = { 0 };
 9469              	 .loc 3 1873 0
 9470 000a 0023     	 movs r3,#0
 9471 000c 3B80     	 strh r3,[r7]
 9472 000e 0023     	 movs r3,#0
 9473 0010 BB70     	 strb r3,[r7,#2]
1874:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 9474              	 .loc 3 1874 0
 9475 0012 0023     	 movs r3,#0
 9476 0014 BB60     	 str r3,[r7,#8]
1875:../4g_module/mdm_handler.c **** 	short ls_result = E_MQTT_DISCON_NONE;
 9477              	 .loc 3 1875 0
 9478 0016 4FF6FE73 	 movw r3,#65534
 9479 001a FB80     	 strh r3,[r7,#6]
1876:../4g_module/mdm_handler.c **** 
1877:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, (const char*) "%d\r\n", sgu8_mqttClientId);
 9480              	 .loc 3 1877 0
 9481 001c 314B     	 ldr r3,.L317
 9482 001e 1B78     	 ldrb r3,[r3]
 9483 0020 1A46     	 mov r2,r3
 9484 0022 3B46     	 mov r3,r7
 9485 0024 1846     	 mov r0,r3
 9486 0026 3049     	 ldr r1,.L317+4
 9487 0028 FFF7FEFF 	 bl sprintf
1878:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISCONNECT, (uint8_t *) lu8arr_param);
 9488              	 .loc 3 1878 0
 9489 002c 3B46     	 mov r3,r7
 9490 002e 1D20     	 movs r0,#29
 9491 0030 1946     	 mov r1,r3
 9492 0032 FFF7FEFF 	 bl mod_sendCmdGetRsp
 9493 0036 0346     	 mov r3,r0
 9494 0038 FB73     	 strb r3,[r7,#15]
1879:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 9495              	 .loc 3 1879 0
 9496 003a FB7B     	 ldrb r3,[r7,#15]
 9497 003c 002B     	 cmp r3,#0
 9498 003e 35D1     	 bne .L311
1880:../4g_module/mdm_handler.c **** 	{
1881:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 9499              	 .loc 3 1881 0
 9500 0040 2A4B     	 ldr r3,.L317+8
 9501 0042 0022     	 movs r2,#0
 9502 0044 1A70     	 strb r2,[r3]
1882:../4g_module/mdm_handler.c **** 
1883:../4g_module/mdm_handler.c **** 		lu8p_Ptr =
 9503              	 .loc 3 1883 0
 9504 0046 2A48     	 ldr r0,.L317+12
 9505 0048 2A49     	 ldr r1,.L317+16
 9506 004a FFF7FEFF 	 bl strstr
 9507 004e B860     	 str r0,[r7,#8]
1884:../4g_module/mdm_handler.c **** 				(uint8_t *) strstr((const char *) gu8arr_respBuffer,
1885:../4g_module/mdm_handler.c **** 						(const char *) gcst_ATCmdTable[E_IDX_MQTT_DISCONNECT].mu8arr_otherRspString);
1886:../4g_module/mdm_handler.c **** 
1887:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 9508              	 .loc 3 1887 0
 9509 0050 BB68     	 ldr r3,[r7,#8]
 9510 0052 002B     	 cmp r3,#0
 9511 0054 41D0     	 beq .L314
1888:../4g_module/mdm_handler.c **** 		{
1889:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 14;
 9512              	 .loc 3 1889 0
 9513 0056 BB68     	 ldr r3,[r7,#8]
 9514 0058 0E33     	 adds r3,r3,#14
 9515 005a BB60     	 str r3,[r7,#8]
1890:../4g_module/mdm_handler.c **** 			ls_result = atoi((char *) lu8p_Ptr);
 9516              	 .loc 3 1890 0
 9517 005c B868     	 ldr r0,[r7,#8]
 9518 005e FFF7FEFF 	 bl atoi
 9519 0062 0346     	 mov r3,r0
 9520 0064 FB80     	 strh r3,[r7,#6]
1891:../4g_module/mdm_handler.c **** 			if (sgu8_mqttClientId == lu8p_Ptr)
 9521              	 .loc 3 1891 0
 9522 0066 1F4B     	 ldr r3,.L317
 9523 0068 1B78     	 ldrb r3,[r3]
 9524 006a 1A46     	 mov r2,r3
 9525 006c BB68     	 ldr r3,[r7,#8]
 9526 006e 9A42     	 cmp r2,r3
 9527 0070 33D1     	 bne .L314
1892:../4g_module/mdm_handler.c **** 			{
1893:../4g_module/mdm_handler.c **** 				lu8p_Ptr += 2;
 9528              	 .loc 3 1893 0
 9529 0072 BB68     	 ldr r3,[r7,#8]
 9530 0074 0233     	 adds r3,r3,#2
 9531 0076 BB60     	 str r3,[r7,#8]
1894:../4g_module/mdm_handler.c **** 				ls_result = atoi((char *) lu8p_Ptr);
 9532              	 .loc 3 1894 0
 9533 0078 B868     	 ldr r0,[r7,#8]
 9534 007a FFF7FEFF 	 bl atoi
 9535 007e 0346     	 mov r3,r0
 9536 0080 FB80     	 strh r3,[r7,#6]
1895:../4g_module/mdm_handler.c **** 				if (E_MQTT_FAILED_TO_CLOSE_CONN == ls_result)
 9537              	 .loc 3 1895 0
 9538 0082 B7F90630 	 ldrsh r3,[r7,#6]
 9539 0086 B3F1FF3F 	 cmp r3,#-1
 9540 008a 05D1     	 bne .L313
1896:../4g_module/mdm_handler.c **** 				{
1897:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttDisconErrorCodes = E_MQTT_FAILED_TO_CLOSE_CONN;
 9541              	 .loc 3 1897 0
 9542 008c 1A4B     	 ldr r3,.L317+20
 9543 008e FF22     	 movs r2,#255
 9544 0090 9A71     	 strb r2,[r3,#6]
1898:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 9545              	 .loc 3 1898 0
 9546 0092 0223     	 movs r3,#2
 9547 0094 FB73     	 strb r3,[r7,#15]
 9548 0096 20E0     	 b .L314
 9549              	.L313:
1899:../4g_module/mdm_handler.c **** 				}
1900:../4g_module/mdm_handler.c **** 				else if(E_MQTT_CONN_CLOSE_SUCCESS == ls_result)
 9550              	 .loc 3 1900 0
 9551 0098 B7F90630 	 ldrsh r3,[r7,#6]
 9552 009c 002B     	 cmp r3,#0
 9553 009e 1CD1     	 bne .L314
1901:../4g_module/mdm_handler.c **** 				{
1902:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttDisconErrorCodes = E_MQTT_CONN_CLOSE_SUCCESS;
 9554              	 .loc 3 1902 0
 9555 00a0 154B     	 ldr r3,.L317+20
 9556 00a2 0022     	 movs r2,#0
 9557 00a4 9A71     	 strb r2,[r3,#6]
1903:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
 9558              	 .loc 3 1903 0
 9559 00a6 0023     	 movs r3,#0
 9560 00a8 FB73     	 strb r3,[r7,#15]
 9561 00aa 16E0     	 b .L314
 9562              	.L311:
1904:../4g_module/mdm_handler.c **** 				}
1905:../4g_module/mdm_handler.c **** 			}
1906:../4g_module/mdm_handler.c **** 		}
1907:../4g_module/mdm_handler.c **** 	}
1908:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 9563              	 .loc 3 1908 0
 9564 00ac FB7B     	 ldrb r3,[r7,#15]
 9565 00ae 042B     	 cmp r3,#4
 9566 00b0 13D0     	 beq .L314
1909:../4g_module/mdm_handler.c **** 	{
1910:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 9567              	 .loc 3 1910 0
 9568 00b2 0E4B     	 ldr r3,.L317+8
 9569 00b4 1B78     	 ldrb r3,[r3]
 9570 00b6 0133     	 adds r3,r3,#1
 9571 00b8 DAB2     	 uxtb r2,r3
 9572 00ba 0C4B     	 ldr r3,.L317+8
 9573 00bc 1A70     	 strb r2,[r3]
1911:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 9574              	 .loc 3 1911 0
 9575 00be 0B4B     	 ldr r3,.L317+8
 9576 00c0 1B78     	 ldrb r3,[r3]
 9577 00c2 022B     	 cmp r3,#2
 9578 00c4 02D8     	 bhi .L315
1912:../4g_module/mdm_handler.c **** 		{
1913:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 9579              	 .loc 3 1913 0
 9580 00c6 0423     	 movs r3,#4
 9581 00c8 FB73     	 strb r3,[r7,#15]
 9582 00ca 06E0     	 b .L314
 9583              	.L315:
1914:../4g_module/mdm_handler.c **** 		}
1915:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 9584              	 .loc 3 1915 0
 9585 00cc 074B     	 ldr r3,.L317+8
 9586 00ce 1B78     	 ldrb r3,[r3]
 9587 00d0 032B     	 cmp r3,#3
 9588 00d2 02D9     	 bls .L314
1916:../4g_module/mdm_handler.c **** 		{
1917:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 9589              	 .loc 3 1917 0
 9590 00d4 054B     	 ldr r3,.L317+8
 9591 00d6 0022     	 movs r2,#0
 9592 00d8 1A70     	 strb r2,[r3]
 9593              	.L314:
1918:../4g_module/mdm_handler.c **** 		}
1919:../4g_module/mdm_handler.c **** 	}
1920:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9594              	 .loc 3 1920 0
 9595 00da FB7B     	 ldrb r3,[r7,#15]
1921:../4g_module/mdm_handler.c **** }
 9596              	 .loc 3 1921 0
 9597 00dc 1846     	 mov r0,r3
 9598 00de 1037     	 adds r7,r7,#16
 9599              	.LCFI173:
 9600              	 .cfi_def_cfa_offset 8
 9601 00e0 BD46     	 mov sp,r7
 9602              	.LCFI174:
 9603              	 .cfi_def_cfa_register 13
 9604              	 
 9605 00e2 80BD     	 pop {r7,pc}
 9606              	.L318:
 9607              	 .align 2
 9608              	.L317:
 9609 00e4 00000000 	 .word sgu8_mqttClientId
 9610 00e8 18010000 	 .word .LC30
 9611 00ec 00000000 	 .word lsu8_retryCnt.14938
 9612 00f0 00000000 	 .word gu8arr_respBuffer
 9613 00f4 CE8A0000 	 .word gcst_ATCmdTable+35534
 9614 00f8 00000000 	 .word gst_deviceStatus
 9615              	 .cfi_endproc
 9616              	.LFE635:
 9618              	 .section .text.mod_mqttEnableFunctionality,"ax",%progbits
 9619              	 .align 2
 9620              	 .thumb
 9621              	 .thumb_func
 9623              	mod_mqttEnableFunctionality:
 9624              	.LFB636:
1922:../4g_module/mdm_handler.c **** 
1923:../4g_module/mdm_handler.c **** /**************************************************************************
1924:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttEnableFunctionality
1925:../4g_module/mdm_handler.c ****  *
1926:../4g_module/mdm_handler.c ****  * Description   	:	This function enable the modem
1927:../4g_module/mdm_handler.c ****  *
1928:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1929:../4g_module/mdm_handler.c ****  *
1930:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1931:../4g_module/mdm_handler.c ****  *
1932:../4g_module/mdm_handler.c ****  ****************************************************************************/
1933:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttEnableFunctionality(void)
1934:../4g_module/mdm_handler.c **** {
 9625              	 .loc 3 1934 0
 9626              	 .cfi_startproc
 9627              	 
 9628              	 
 9629 0000 80B5     	 push {r7,lr}
 9630              	.LCFI175:
 9631              	 .cfi_def_cfa_offset 8
 9632              	 .cfi_offset 7,-8
 9633              	 .cfi_offset 14,-4
 9634 0002 82B0     	 sub sp,sp,#8
 9635              	.LCFI176:
 9636              	 .cfi_def_cfa_offset 16
 9637 0004 00AF     	 add r7,sp,#0
 9638              	.LCFI177:
 9639              	 .cfi_def_cfa_register 7
1935:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9640              	 .loc 3 1935 0
 9641 0006 0423     	 movs r3,#4
 9642 0008 FB71     	 strb r3,[r7,#7]
1936:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1937:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[3] = { 0 };
 9643              	 .loc 3 1937 0
 9644 000a 0023     	 movs r3,#0
 9645 000c BB80     	 strh r3,[r7,#4]
 9646 000e 0023     	 movs r3,#0
 9647 0010 BB71     	 strb r3,[r7,#6]
1938:../4g_module/mdm_handler.c **** 
1939:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, (const char*) "1\r\n");
 9648              	 .loc 3 1939 0
 9649 0012 3B1D     	 adds r3,r7,#4
 9650 0014 164A     	 ldr r2,.L324
 9651 0016 1A60     	 str r2,[r3]
1940:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 9652              	 .loc 3 1940 0
 9653 0018 3B1D     	 adds r3,r7,#4
 9654 001a 1720     	 movs r0,#23
 9655 001c 1946     	 mov r1,r3
 9656 001e FFF7FEFF 	 bl mod_sendCmdGetRsp
 9657 0022 0346     	 mov r3,r0
 9658 0024 FB71     	 strb r3,[r7,#7]
1941:../4g_module/mdm_handler.c **** 			(uint8_t *) lu8arr_param);
1942:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 9659              	 .loc 3 1942 0
 9660 0026 FB79     	 ldrb r3,[r7,#7]
 9661 0028 002B     	 cmp r3,#0
 9662 002a 05D1     	 bne .L320
1943:../4g_module/mdm_handler.c **** 	{
1944:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 9663              	 .loc 3 1944 0
 9664 002c 114B     	 ldr r3,.L324+4
 9665 002e 0022     	 movs r2,#0
 9666 0030 1A70     	 strb r2,[r3]
1945:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 9667              	 .loc 3 1945 0
 9668 0032 0023     	 movs r3,#0
 9669 0034 FB71     	 strb r3,[r7,#7]
 9670 0036 16E0     	 b .L321
 9671              	.L320:
1946:../4g_module/mdm_handler.c **** 	}
1947:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 9672              	 .loc 3 1947 0
 9673 0038 FB79     	 ldrb r3,[r7,#7]
 9674 003a 042B     	 cmp r3,#4
 9675 003c 13D0     	 beq .L321
1948:../4g_module/mdm_handler.c **** 	{
1949:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 9676              	 .loc 3 1949 0
 9677 003e 0D4B     	 ldr r3,.L324+4
 9678 0040 1B78     	 ldrb r3,[r3]
 9679 0042 0133     	 adds r3,r3,#1
 9680 0044 DAB2     	 uxtb r2,r3
 9681 0046 0B4B     	 ldr r3,.L324+4
 9682 0048 1A70     	 strb r2,[r3]
1950:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 9683              	 .loc 3 1950 0
 9684 004a 0A4B     	 ldr r3,.L324+4
 9685 004c 1B78     	 ldrb r3,[r3]
 9686 004e 022B     	 cmp r3,#2
 9687 0050 02D8     	 bhi .L322
1951:../4g_module/mdm_handler.c **** 		{
1952:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 9688              	 .loc 3 1952 0
 9689 0052 0423     	 movs r3,#4
 9690 0054 FB71     	 strb r3,[r7,#7]
 9691 0056 06E0     	 b .L321
 9692              	.L322:
1953:../4g_module/mdm_handler.c **** 		}
1954:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 9693              	 .loc 3 1954 0
 9694 0058 064B     	 ldr r3,.L324+4
 9695 005a 1B78     	 ldrb r3,[r3]
 9696 005c 032B     	 cmp r3,#3
 9697 005e 02D9     	 bls .L321
1955:../4g_module/mdm_handler.c **** 		{
1956:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 9698              	 .loc 3 1956 0
 9699 0060 044B     	 ldr r3,.L324+4
 9700 0062 0022     	 movs r2,#0
 9701 0064 1A70     	 strb r2,[r3]
 9702              	.L321:
1957:../4g_module/mdm_handler.c **** 		}
1958:../4g_module/mdm_handler.c **** 	}
1959:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9703              	 .loc 3 1959 0
 9704 0066 FB79     	 ldrb r3,[r7,#7]
1960:../4g_module/mdm_handler.c **** }
 9705              	 .loc 3 1960 0
 9706 0068 1846     	 mov r0,r3
 9707 006a 0837     	 adds r7,r7,#8
 9708              	.LCFI178:
 9709              	 .cfi_def_cfa_offset 8
 9710 006c BD46     	 mov sp,r7
 9711              	.LCFI179:
 9712              	 .cfi_def_cfa_register 13
 9713              	 
 9714 006e 80BD     	 pop {r7,pc}
 9715              	.L325:
 9716              	 .align 2
 9717              	.L324:
 9718 0070 310D0A00 	 .word 658737
 9719 0074 00000000 	 .word lsu8_retryCnt.14946
 9720              	 .cfi_endproc
 9721              	.LFE636:
 9723              	 .section .text.mod_mqttDisableFunctionality,"ax",%progbits
 9724              	 .align 2
 9725              	 .thumb
 9726              	 .thumb_func
 9728              	mod_mqttDisableFunctionality:
 9729              	.LFB637:
1961:../4g_module/mdm_handler.c **** 
1962:../4g_module/mdm_handler.c **** /**************************************************************************
1963:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttDisableFunctionality
1964:../4g_module/mdm_handler.c ****  *
1965:../4g_module/mdm_handler.c ****  * Description   	:	This function disable the modem
1966:../4g_module/mdm_handler.c ****  *
1967:../4g_module/mdm_handler.c ****  * Arguments     	:	void
1968:../4g_module/mdm_handler.c ****  *
1969:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
1970:../4g_module/mdm_handler.c ****  *
1971:../4g_module/mdm_handler.c ****  ****************************************************************************/
1972:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttDisableFunctionality(void)
1973:../4g_module/mdm_handler.c **** {
 9730              	 .loc 3 1973 0
 9731              	 .cfi_startproc
 9732              	 
 9733              	 
 9734 0000 80B5     	 push {r7,lr}
 9735              	.LCFI180:
 9736              	 .cfi_def_cfa_offset 8
 9737              	 .cfi_offset 7,-8
 9738              	 .cfi_offset 14,-4
 9739 0002 82B0     	 sub sp,sp,#8
 9740              	.LCFI181:
 9741              	 .cfi_def_cfa_offset 16
 9742 0004 00AF     	 add r7,sp,#0
 9743              	.LCFI182:
 9744              	 .cfi_def_cfa_register 7
1974:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9745              	 .loc 3 1974 0
 9746 0006 0423     	 movs r3,#4
 9747 0008 FB71     	 strb r3,[r7,#7]
1975:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
1976:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[3] = { 0 };
 9748              	 .loc 3 1976 0
 9749 000a 0023     	 movs r3,#0
 9750 000c BB80     	 strh r3,[r7,#4]
 9751 000e 0023     	 movs r3,#0
 9752 0010 BB71     	 strb r3,[r7,#6]
1977:../4g_module/mdm_handler.c **** 
1978:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, (const char*) "4\r\n");
 9753              	 .loc 3 1978 0
 9754 0012 3B1D     	 adds r3,r7,#4
 9755 0014 164A     	 ldr r2,.L331
 9756 0016 1A60     	 str r2,[r3]
1979:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 9757              	 .loc 3 1979 0
 9758 0018 3B1D     	 adds r3,r7,#4
 9759 001a 1720     	 movs r0,#23
 9760 001c 1946     	 mov r1,r3
 9761 001e FFF7FEFF 	 bl mod_sendCmdGetRsp
 9762 0022 0346     	 mov r3,r0
 9763 0024 FB71     	 strb r3,[r7,#7]
1980:../4g_module/mdm_handler.c **** 			(uint8_t *) lu8arr_param);
1981:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 9764              	 .loc 3 1981 0
 9765 0026 FB79     	 ldrb r3,[r7,#7]
 9766 0028 002B     	 cmp r3,#0
 9767 002a 05D1     	 bne .L327
1982:../4g_module/mdm_handler.c **** 	{
1983:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 9768              	 .loc 3 1983 0
 9769 002c 114B     	 ldr r3,.L331+4
 9770 002e 0022     	 movs r2,#0
 9771 0030 1A70     	 strb r2,[r3]
1984:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 9772              	 .loc 3 1984 0
 9773 0032 0023     	 movs r3,#0
 9774 0034 FB71     	 strb r3,[r7,#7]
 9775 0036 16E0     	 b .L328
 9776              	.L327:
1985:../4g_module/mdm_handler.c **** 	}
1986:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 9777              	 .loc 3 1986 0
 9778 0038 FB79     	 ldrb r3,[r7,#7]
 9779 003a 042B     	 cmp r3,#4
 9780 003c 13D0     	 beq .L328
1987:../4g_module/mdm_handler.c **** 	{
1988:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 9781              	 .loc 3 1988 0
 9782 003e 0D4B     	 ldr r3,.L331+4
 9783 0040 1B78     	 ldrb r3,[r3]
 9784 0042 0133     	 adds r3,r3,#1
 9785 0044 DAB2     	 uxtb r2,r3
 9786 0046 0B4B     	 ldr r3,.L331+4
 9787 0048 1A70     	 strb r2,[r3]
1989:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 9788              	 .loc 3 1989 0
 9789 004a 0A4B     	 ldr r3,.L331+4
 9790 004c 1B78     	 ldrb r3,[r3]
 9791 004e 022B     	 cmp r3,#2
 9792 0050 02D8     	 bhi .L329
1990:../4g_module/mdm_handler.c **** 		{
1991:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 9793              	 .loc 3 1991 0
 9794 0052 0423     	 movs r3,#4
 9795 0054 FB71     	 strb r3,[r7,#7]
 9796 0056 06E0     	 b .L328
 9797              	.L329:
1992:../4g_module/mdm_handler.c **** 		}
1993:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 9798              	 .loc 3 1993 0
 9799 0058 064B     	 ldr r3,.L331+4
 9800 005a 1B78     	 ldrb r3,[r3]
 9801 005c 032B     	 cmp r3,#3
 9802 005e 02D9     	 bls .L328
1994:../4g_module/mdm_handler.c **** 		{
1995:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 9803              	 .loc 3 1995 0
 9804 0060 044B     	 ldr r3,.L331+4
 9805 0062 0022     	 movs r2,#0
 9806 0064 1A70     	 strb r2,[r3]
 9807              	.L328:
1996:../4g_module/mdm_handler.c **** 		}
1997:../4g_module/mdm_handler.c **** 	}
1998:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9808              	 .loc 3 1998 0
 9809 0066 FB79     	 ldrb r3,[r7,#7]
1999:../4g_module/mdm_handler.c **** }
 9810              	 .loc 3 1999 0
 9811 0068 1846     	 mov r0,r3
 9812 006a 0837     	 adds r7,r7,#8
 9813              	.LCFI183:
 9814              	 .cfi_def_cfa_offset 8
 9815 006c BD46     	 mov sp,r7
 9816              	.LCFI184:
 9817              	 .cfi_def_cfa_register 13
 9818              	 
 9819 006e 80BD     	 pop {r7,pc}
 9820              	.L332:
 9821              	 .align 2
 9822              	.L331:
 9823 0070 340D0A00 	 .word 658740
 9824 0074 00000000 	 .word lsu8_retryCnt.14952
 9825              	 .cfi_endproc
 9826              	.LFE637:
 9828              	 .section .text.mod_mqttDisableEnableFunctionality,"ax",%progbits
 9829              	 .align 2
 9830              	 .thumb
 9831              	 .thumb_func
 9833              	mod_mqttDisableEnableFunctionality:
 9834              	.LFB638:
2000:../4g_module/mdm_handler.c **** 
2001:../4g_module/mdm_handler.c **** /**************************************************************************
2002:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttDisableEnableFunctionality
2003:../4g_module/mdm_handler.c ****  *
2004:../4g_module/mdm_handler.c ****  * Description   	:	This function used disable and enable the module
2005:../4g_module/mdm_handler.c ****  *
2006:../4g_module/mdm_handler.c ****  * Arguments     	:	void
2007:../4g_module/mdm_handler.c ****  *
2008:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2009:../4g_module/mdm_handler.c ****  *
2010:../4g_module/mdm_handler.c ****  ****************************************************************************/
2011:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttDisableEnableFunctionality(void)
2012:../4g_module/mdm_handler.c **** {
 9835              	 .loc 3 2012 0
 9836              	 .cfi_startproc
 9837              	 
 9838              	 
 9839 0000 80B5     	 push {r7,lr}
 9840              	.LCFI185:
 9841              	 .cfi_def_cfa_offset 8
 9842              	 .cfi_offset 7,-8
 9843              	 .cfi_offset 14,-4
 9844 0002 82B0     	 sub sp,sp,#8
 9845              	.LCFI186:
 9846              	 .cfi_def_cfa_offset 16
 9847 0004 00AF     	 add r7,sp,#0
 9848              	.LCFI187:
 9849              	 .cfi_def_cfa_register 7
2013:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9850              	 .loc 3 2013 0
 9851 0006 0423     	 movs r3,#4
 9852 0008 FB71     	 strb r3,[r7,#7]
2014:../4g_module/mdm_handler.c **** 
2015:../4g_module/mdm_handler.c **** 	switch (sen_modemResetState)
 9853              	 .loc 3 2015 0
 9854 000a 214B     	 ldr r3,.L344
 9855 000c 1B78     	 ldrb r3,[r3]
 9856 000e 012B     	 cmp r3,#1
 9857 0010 16D0     	 beq .L335
 9858 0012 022B     	 cmp r3,#2
 9859 0014 2BD0     	 beq .L336
 9860 0016 002B     	 cmp r3,#0
 9861 0018 00D0     	 beq .L337
2016:../4g_module/mdm_handler.c **** 	{
2017:../4g_module/mdm_handler.c **** 		case E_RST_DISABLE_FUNCTION:
2018:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttDisableFunctionality();
2019:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
2020:../4g_module/mdm_handler.c **** 			{
2021:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
2022:../4g_module/mdm_handler.c **** 				sen_modemResetState = E_RST_ENALBE_FUNCTION;
2023:../4g_module/mdm_handler.c **** 				tm_setResetTimer(5000);
2024:../4g_module/mdm_handler.c **** 			}
2025:../4g_module/mdm_handler.c **** 		break;
2026:../4g_module/mdm_handler.c **** 
2027:../4g_module/mdm_handler.c **** 		case E_RST_ENALBE_FUNCTION:
2028:../4g_module/mdm_handler.c **** 			if (tm_getResetTimerValue() == 0)
2029:../4g_module/mdm_handler.c **** 			{
2030:../4g_module/mdm_handler.c **** 				len_retStatus = mod_mqttEnableFunctionality();
2031:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
2032:../4g_module/mdm_handler.c **** 				{
2033:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
2034:../4g_module/mdm_handler.c **** 					sen_modemResetState = E_RST_WAIT_FUNCTION;
2035:../4g_module/mdm_handler.c **** 					tm_setResetTimer(5000);
2036:../4g_module/mdm_handler.c **** 				}
2037:../4g_module/mdm_handler.c **** 			}
2038:../4g_module/mdm_handler.c **** 		break;
2039:../4g_module/mdm_handler.c **** 
2040:../4g_module/mdm_handler.c **** 		case E_RST_WAIT_FUNCTION:
2041:../4g_module/mdm_handler.c **** 			if (tm_getResetTimerValue() == 0)
2042:../4g_module/mdm_handler.c **** 			{
2043:../4g_module/mdm_handler.c **** 				sen_modemResetState = E_RST_DISABLE_FUNCTION;
2044:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_SUCCESS;
2045:../4g_module/mdm_handler.c **** 			}
2046:../4g_module/mdm_handler.c **** 		break;
2047:../4g_module/mdm_handler.c **** 
2048:../4g_module/mdm_handler.c **** 		default:
2049:../4g_module/mdm_handler.c **** 		break;
 9862              	 .loc 3 2049 0
 9863 001a 34E0     	 b .L339
 9864              	.L337:
2018:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 9865              	 .loc 3 2018 0
 9866 001c FFF7FEFF 	 bl mod_mqttDisableFunctionality
 9867 0020 0346     	 mov r3,r0
 9868 0022 FB71     	 strb r3,[r7,#7]
2019:../4g_module/mdm_handler.c **** 			{
 9869              	 .loc 3 2019 0
 9870 0024 FB79     	 ldrb r3,[r7,#7]
 9871 0026 002B     	 cmp r3,#0
 9872 0028 09D1     	 bne .L338
2021:../4g_module/mdm_handler.c **** 				sen_modemResetState = E_RST_ENALBE_FUNCTION;
 9873              	 .loc 3 2021 0
 9874 002a 0423     	 movs r3,#4
 9875 002c FB71     	 strb r3,[r7,#7]
2022:../4g_module/mdm_handler.c **** 				tm_setResetTimer(5000);
 9876              	 .loc 3 2022 0
 9877 002e 184B     	 ldr r3,.L344
 9878 0030 0122     	 movs r2,#1
 9879 0032 1A70     	 strb r2,[r3]
2023:../4g_module/mdm_handler.c **** 			}
 9880              	 .loc 3 2023 0
 9881 0034 41F28830 	 movw r0,#5000
 9882 0038 FFF7FEFF 	 bl tm_setResetTimer
2025:../4g_module/mdm_handler.c **** 
 9883              	 .loc 3 2025 0
 9884 003c 23E0     	 b .L339
 9885              	.L338:
 9886 003e 22E0     	 b .L339
 9887              	.L335:
2028:../4g_module/mdm_handler.c **** 			{
 9888              	 .loc 3 2028 0
 9889 0040 FFF7FEFF 	 bl tm_getResetTimerValue
 9890 0044 0346     	 mov r3,r0
 9891 0046 002B     	 cmp r3,#0
 9892 0048 10D1     	 bne .L340
2030:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 9893              	 .loc 3 2030 0
 9894 004a FFF7FEFF 	 bl mod_mqttEnableFunctionality
 9895 004e 0346     	 mov r3,r0
 9896 0050 FB71     	 strb r3,[r7,#7]
2031:../4g_module/mdm_handler.c **** 				{
 9897              	 .loc 3 2031 0
 9898 0052 FB79     	 ldrb r3,[r7,#7]
 9899 0054 002B     	 cmp r3,#0
 9900 0056 09D1     	 bne .L340
2033:../4g_module/mdm_handler.c **** 					sen_modemResetState = E_RST_WAIT_FUNCTION;
 9901              	 .loc 3 2033 0
 9902 0058 0423     	 movs r3,#4
 9903 005a FB71     	 strb r3,[r7,#7]
2034:../4g_module/mdm_handler.c **** 					tm_setResetTimer(5000);
 9904              	 .loc 3 2034 0
 9905 005c 0C4B     	 ldr r3,.L344
 9906 005e 0222     	 movs r2,#2
 9907 0060 1A70     	 strb r2,[r3]
2035:../4g_module/mdm_handler.c **** 				}
 9908              	 .loc 3 2035 0
 9909 0062 41F28830 	 movw r0,#5000
 9910 0066 FFF7FEFF 	 bl tm_setResetTimer
2038:../4g_module/mdm_handler.c **** 
 9911              	 .loc 3 2038 0
 9912 006a 0CE0     	 b .L339
 9913              	.L340:
 9914 006c 0BE0     	 b .L339
 9915              	.L336:
2041:../4g_module/mdm_handler.c **** 			{
 9916              	 .loc 3 2041 0
 9917 006e FFF7FEFF 	 bl tm_getResetTimerValue
 9918 0072 0346     	 mov r3,r0
 9919 0074 002B     	 cmp r3,#0
 9920 0076 05D1     	 bne .L341
2043:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_SUCCESS;
 9921              	 .loc 3 2043 0
 9922 0078 054B     	 ldr r3,.L344
 9923 007a 0022     	 movs r2,#0
 9924 007c 1A70     	 strb r2,[r3]
2044:../4g_module/mdm_handler.c **** 			}
 9925              	 .loc 3 2044 0
 9926 007e 0023     	 movs r3,#0
 9927 0080 FB71     	 strb r3,[r7,#7]
2046:../4g_module/mdm_handler.c **** 
 9928              	 .loc 3 2046 0
 9929 0082 FFE7     	 b .L343
 9930              	.L341:
 9931              	.L343:
 9932 0084 00BF     	 nop
 9933              	.L339:
2050:../4g_module/mdm_handler.c **** 	}
2051:../4g_module/mdm_handler.c **** 
2052:../4g_module/mdm_handler.c **** 	return len_retStatus;
 9934              	 .loc 3 2052 0
 9935 0086 FB79     	 ldrb r3,[r7,#7]
2053:../4g_module/mdm_handler.c **** }
 9936              	 .loc 3 2053 0
 9937 0088 1846     	 mov r0,r3
 9938 008a 0837     	 adds r7,r7,#8
 9939              	.LCFI188:
 9940              	 .cfi_def_cfa_offset 8
 9941 008c BD46     	 mov sp,r7
 9942              	.LCFI189:
 9943              	 .cfi_def_cfa_register 13
 9944              	 
 9945 008e 80BD     	 pop {r7,pc}
 9946              	.L345:
 9947              	 .align 2
 9948              	.L344:
 9949 0090 00000000 	 .word sen_modemResetState
 9950              	 .cfi_endproc
 9951              	.LFE638:
 9953              	 .section .text.mod_mqttClose,"ax",%progbits
 9954              	 .align 2
 9955              	 .thumb
 9956              	 .thumb_func
 9958              	mod_mqttClose:
 9959              	.LFB639:
2054:../4g_module/mdm_handler.c **** 
2055:../4g_module/mdm_handler.c **** /**************************************************************************
2056:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttClose
2057:../4g_module/mdm_handler.c ****  *
2058:../4g_module/mdm_handler.c ****  * Description   	:	This function used close the MQTT broker
2059:../4g_module/mdm_handler.c ****  *
2060:../4g_module/mdm_handler.c ****  * Arguments     	:	void
2061:../4g_module/mdm_handler.c ****  *
2062:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2063:../4g_module/mdm_handler.c ****  *
2064:../4g_module/mdm_handler.c ****  ****************************************************************************/
2065:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttClose(void)
2066:../4g_module/mdm_handler.c **** {
 9960              	 .loc 3 2066 0
 9961              	 .cfi_startproc
 9962              	 
 9963              	 
 9964 0000 80B5     	 push {r7,lr}
 9965              	.LCFI190:
 9966              	 .cfi_def_cfa_offset 8
 9967              	 .cfi_offset 7,-8
 9968              	 .cfi_offset 14,-4
 9969 0002 84B0     	 sub sp,sp,#16
 9970              	.LCFI191:
 9971              	 .cfi_def_cfa_offset 24
 9972 0004 00AF     	 add r7,sp,#0
 9973              	.LCFI192:
 9974              	 .cfi_def_cfa_register 7
2067:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 9975              	 .loc 3 2067 0
 9976 0006 0423     	 movs r3,#4
 9977 0008 FB73     	 strb r3,[r7,#15]
2068:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2069:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[3] = { 0 };
 9978              	 .loc 3 2069 0
 9979 000a 0023     	 movs r3,#0
 9980 000c 3B80     	 strh r3,[r7]
 9981 000e 0023     	 movs r3,#0
 9982 0010 BB70     	 strb r3,[r7,#2]
2070:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 9983              	 .loc 3 2070 0
 9984 0012 0023     	 movs r3,#0
 9985 0014 BB60     	 str r3,[r7,#8]
2071:../4g_module/mdm_handler.c **** 	short ls_result = E_MQTT_CLOSE_NONE;
 9986              	 .loc 3 2071 0
 9987 0016 4FF6FE73 	 movw r3,#65534
 9988 001a FB80     	 strh r3,[r7,#6]
2072:../4g_module/mdm_handler.c **** 
2073:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, (const char*) "%d\r\n", sgu8_mqttClientId);
 9989              	 .loc 3 2073 0
 9990 001c 314B     	 ldr r3,.L353
 9991 001e 1B78     	 ldrb r3,[r3]
 9992 0020 1A46     	 mov r2,r3
 9993 0022 3B46     	 mov r3,r7
 9994 0024 1846     	 mov r0,r3
 9995 0026 3049     	 ldr r1,.L353+4
 9996 0028 FFF7FEFF 	 bl sprintf
2074:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CLOSE, (uint8_t *) lu8arr_param);
 9997              	 .loc 3 2074 0
 9998 002c 3B46     	 mov r3,r7
 9999 002e 1E20     	 movs r0,#30
 10000 0030 1946     	 mov r1,r3
 10001 0032 FFF7FEFF 	 bl mod_sendCmdGetRsp
 10002 0036 0346     	 mov r3,r0
 10003 0038 FB73     	 strb r3,[r7,#15]
2075:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 10004              	 .loc 3 2075 0
 10005 003a FB7B     	 ldrb r3,[r7,#15]
 10006 003c 002B     	 cmp r3,#0
 10007 003e 35D1     	 bne .L347
2076:../4g_module/mdm_handler.c **** 	{
2077:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 10008              	 .loc 3 2077 0
 10009 0040 2A4B     	 ldr r3,.L353+8
 10010 0042 0022     	 movs r2,#0
 10011 0044 1A70     	 strb r2,[r3]
2078:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 10012              	 .loc 3 2078 0
 10013 0046 2A48     	 ldr r0,.L353+12
 10014 0048 2A49     	 ldr r1,.L353+16
 10015 004a FFF7FEFF 	 bl strstr
 10016 004e B860     	 str r0,[r7,#8]
2079:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CLOSE].mu8arr_otherRspString);
2080:../4g_module/mdm_handler.c **** 
2081:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 10017              	 .loc 3 2081 0
 10018 0050 BB68     	 ldr r3,[r7,#8]
 10019 0052 002B     	 cmp r3,#0
 10020 0054 41D0     	 beq .L350
2082:../4g_module/mdm_handler.c **** 		{
2083:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 14;
 10021              	 .loc 3 2083 0
 10022 0056 BB68     	 ldr r3,[r7,#8]
 10023 0058 0E33     	 adds r3,r3,#14
 10024 005a BB60     	 str r3,[r7,#8]
2084:../4g_module/mdm_handler.c **** 			ls_result = atoi((char *) lu8p_Ptr);
 10025              	 .loc 3 2084 0
 10026 005c B868     	 ldr r0,[r7,#8]
 10027 005e FFF7FEFF 	 bl atoi
 10028 0062 0346     	 mov r3,r0
 10029 0064 FB80     	 strh r3,[r7,#6]
2085:../4g_module/mdm_handler.c **** 			if(sgu8_mqttClientId == lu8p_Ptr)
 10030              	 .loc 3 2085 0
 10031 0066 1F4B     	 ldr r3,.L353
 10032 0068 1B78     	 ldrb r3,[r3]
 10033 006a 1A46     	 mov r2,r3
 10034 006c BB68     	 ldr r3,[r7,#8]
 10035 006e 9A42     	 cmp r2,r3
 10036 0070 33D1     	 bne .L350
2086:../4g_module/mdm_handler.c **** 			{
2087:../4g_module/mdm_handler.c **** 				lu8p_Ptr += 2;
 10037              	 .loc 3 2087 0
 10038 0072 BB68     	 ldr r3,[r7,#8]
 10039 0074 0233     	 adds r3,r3,#2
 10040 0076 BB60     	 str r3,[r7,#8]
2088:../4g_module/mdm_handler.c **** 				ls_result = atoi((char *) lu8p_Ptr);
 10041              	 .loc 3 2088 0
 10042 0078 B868     	 ldr r0,[r7,#8]
 10043 007a FFF7FEFF 	 bl atoi
 10044 007e 0346     	 mov r3,r0
 10045 0080 FB80     	 strh r3,[r7,#6]
2089:../4g_module/mdm_handler.c **** 				if(E_MQTT_FAILED_TO_CLOSE_NW == ls_result)
 10046              	 .loc 3 2089 0
 10047 0082 B7F90630 	 ldrsh r3,[r7,#6]
 10048 0086 B3F1FF3F 	 cmp r3,#-1
 10049 008a 05D1     	 bne .L349
2090:../4g_module/mdm_handler.c **** 				{
2091:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttCloseErrorCodes = E_MQTT_FAILED_TO_CLOSE_NW;
 10050              	 .loc 3 2091 0
 10051 008c 1A4B     	 ldr r3,.L353+20
 10052 008e FF22     	 movs r2,#255
 10053 0090 1A71     	 strb r2,[r3,#4]
2092:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 10054              	 .loc 3 2092 0
 10055 0092 0223     	 movs r3,#2
 10056 0094 FB73     	 strb r3,[r7,#15]
 10057 0096 20E0     	 b .L350
 10058              	.L349:
2093:../4g_module/mdm_handler.c **** 				}
2094:../4g_module/mdm_handler.c **** 				else if(E_MQTT_NW_CLOSE_SUCCESS == ls_result)
 10059              	 .loc 3 2094 0
 10060 0098 B7F90630 	 ldrsh r3,[r7,#6]
 10061 009c 002B     	 cmp r3,#0
 10062 009e 1CD1     	 bne .L350
2095:../4g_module/mdm_handler.c **** 				{
2096:../4g_module/mdm_handler.c **** 					gst_deviceStatus.men_mqttCloseErrorCodes = E_MQTT_NW_CLOSE_SUCCESS;
 10063              	 .loc 3 2096 0
 10064 00a0 154B     	 ldr r3,.L353+20
 10065 00a2 0022     	 movs r2,#0
 10066 00a4 1A71     	 strb r2,[r3,#4]
2097:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
 10067              	 .loc 3 2097 0
 10068 00a6 0023     	 movs r3,#0
 10069 00a8 FB73     	 strb r3,[r7,#15]
 10070 00aa 16E0     	 b .L350
 10071              	.L347:
2098:../4g_module/mdm_handler.c **** 				}
2099:../4g_module/mdm_handler.c **** 			}
2100:../4g_module/mdm_handler.c **** 		}
2101:../4g_module/mdm_handler.c **** 	}
2102:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 10072              	 .loc 3 2102 0
 10073 00ac FB7B     	 ldrb r3,[r7,#15]
 10074 00ae 042B     	 cmp r3,#4
 10075 00b0 13D0     	 beq .L350
2103:../4g_module/mdm_handler.c **** 	{
2104:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 10076              	 .loc 3 2104 0
 10077 00b2 0E4B     	 ldr r3,.L353+8
 10078 00b4 1B78     	 ldrb r3,[r3]
 10079 00b6 0133     	 adds r3,r3,#1
 10080 00b8 DAB2     	 uxtb r2,r3
 10081 00ba 0C4B     	 ldr r3,.L353+8
 10082 00bc 1A70     	 strb r2,[r3]
2105:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 10083              	 .loc 3 2105 0
 10084 00be 0B4B     	 ldr r3,.L353+8
 10085 00c0 1B78     	 ldrb r3,[r3]
 10086 00c2 022B     	 cmp r3,#2
 10087 00c4 02D8     	 bhi .L351
2106:../4g_module/mdm_handler.c **** 		{
2107:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 10088              	 .loc 3 2107 0
 10089 00c6 0423     	 movs r3,#4
 10090 00c8 FB73     	 strb r3,[r7,#15]
 10091 00ca 06E0     	 b .L350
 10092              	.L351:
2108:../4g_module/mdm_handler.c **** 		}
2109:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 10093              	 .loc 3 2109 0
 10094 00cc 074B     	 ldr r3,.L353+8
 10095 00ce 1B78     	 ldrb r3,[r3]
 10096 00d0 032B     	 cmp r3,#3
 10097 00d2 02D9     	 bls .L350
2110:../4g_module/mdm_handler.c **** 		{
2111:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 10098              	 .loc 3 2111 0
 10099 00d4 054B     	 ldr r3,.L353+8
 10100 00d6 0022     	 movs r2,#0
 10101 00d8 1A70     	 strb r2,[r3]
 10102              	.L350:
2112:../4g_module/mdm_handler.c **** 		}
2113:../4g_module/mdm_handler.c **** 	}
2114:../4g_module/mdm_handler.c **** 	return len_retStatus;
 10103              	 .loc 3 2114 0
 10104 00da FB7B     	 ldrb r3,[r7,#15]
2115:../4g_module/mdm_handler.c **** }
 10105              	 .loc 3 2115 0
 10106 00dc 1846     	 mov r0,r3
 10107 00de 1037     	 adds r7,r7,#16
 10108              	.LCFI193:
 10109              	 .cfi_def_cfa_offset 8
 10110 00e0 BD46     	 mov sp,r7
 10111              	.LCFI194:
 10112              	 .cfi_def_cfa_register 13
 10113              	 
 10114 00e2 80BD     	 pop {r7,pc}
 10115              	.L354:
 10116              	 .align 2
 10117              	.L353:
 10118 00e4 00000000 	 .word sgu8_mqttClientId
 10119 00e8 18010000 	 .word .LC30
 10120 00ec 00000000 	 .word lsu8_retryCnt.14967
 10121 00f0 00000000 	 .word gu8arr_respBuffer
 10122 00f4 728F0000 	 .word gcst_ATCmdTable+36722
 10123 00f8 00000000 	 .word gst_deviceStatus
 10124              	 .cfi_endproc
 10125              	.LFE639:
 10127              	 .section .rodata
 10128 011d 000000   	 .align 2
 10129              	.LC31:
 10130 0120 25642C31 	 .ascii "%d,1,%d,0,%s,%d\015\012\000"
 10130      2C25642C 
 10130      302C2573 
 10130      2C25640D 
 10130      0A00
 10131              	 .section .text.mod_mqttPublishData,"ax",%progbits
 10132              	 .align 2
 10133              	 .thumb
 10134              	 .thumb_func
 10136              	mod_mqttPublishData:
 10137              	.LFB640:
2116:../4g_module/mdm_handler.c **** 
2117:../4g_module/mdm_handler.c **** /**************************************************************************
2118:../4g_module/mdm_handler.c **** * Function Name	:	mod_mqttPublishData
2119:../4g_module/mdm_handler.c **** *
2120:../4g_module/mdm_handler.c **** * Description   	:	This function used to the MQTT broker
2121:../4g_module/mdm_handler.c **** *
2122:../4g_module/mdm_handler.c **** * Arguments     	:	uint8_t * - Data to be publish
2123:../4g_module/mdm_handler.c **** *						uint16_t - Data length
2124:../4g_module/mdm_handler.c **** *						uint8_t * - Topic to publish
2125:../4g_module/mdm_handler.c **** *
2126:../4g_module/mdm_handler.c **** * Return values 	:	en_responseRetCodes_t - return status
2127:../4g_module/mdm_handler.c **** *
2128:../4g_module/mdm_handler.c **** ****************************************************************************/
2129:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttPublishData(uint8_t * lu8p_data, uint16_t lu16_len, uint8_t* l
2130:../4g_module/mdm_handler.c **** {
 10138              	 .loc 3 2130 0
 10139              	 .cfi_startproc
 10140              	 
 10141              	 
 10142 0000 90B5     	 push {r4,r7,lr}
 10143              	.LCFI195:
 10144              	 .cfi_def_cfa_offset 12
 10145              	 .cfi_offset 4,-12
 10146              	 .cfi_offset 7,-8
 10147              	 .cfi_offset 14,-4
 10148 0002 9BB0     	 sub sp,sp,#108
 10149              	.LCFI196:
 10150              	 .cfi_def_cfa_offset 120
 10151 0004 02AF     	 add r7,sp,#8
 10152              	.LCFI197:
 10153              	 .cfi_def_cfa 7,112
 10154 0006 F860     	 str r0,[r7,#12]
 10155 0008 0B46     	 mov r3,r1
 10156 000a 7A60     	 str r2,[r7,#4]
 10157 000c 7B81     	 strh r3,[r7,#10]
2131:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2132:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 10158              	 .loc 3 2132 0
 10159 000e 0423     	 movs r3,#4
 10160 0010 87F85F30 	 strb r3,[r7,#95]
2133:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 10161              	 .loc 3 2133 0
 10162 0014 0023     	 movs r3,#0
 10163 0016 BB65     	 str r3,[r7,#88]
2134:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[50] = { 0 };
 10164              	 .loc 3 2134 0
 10165 0018 07F11403 	 add r3,r7,#20
 10166 001c 0022     	 movs r2,#0
 10167 001e 1A60     	 str r2,[r3]
 10168 0020 0433     	 adds r3,r3,#4
 10169 0022 0022     	 movs r2,#0
 10170 0024 1A60     	 str r2,[r3]
 10171 0026 0433     	 adds r3,r3,#4
 10172 0028 0022     	 movs r2,#0
 10173 002a 1A60     	 str r2,[r3]
 10174 002c 0433     	 adds r3,r3,#4
 10175 002e 0022     	 movs r2,#0
 10176 0030 1A60     	 str r2,[r3]
 10177 0032 0433     	 adds r3,r3,#4
 10178 0034 0022     	 movs r2,#0
 10179 0036 1A60     	 str r2,[r3]
 10180 0038 0433     	 adds r3,r3,#4
 10181 003a 0022     	 movs r2,#0
 10182 003c 1A60     	 str r2,[r3]
 10183 003e 0433     	 adds r3,r3,#4
 10184 0040 0022     	 movs r2,#0
 10185 0042 1A60     	 str r2,[r3]
 10186 0044 0433     	 adds r3,r3,#4
 10187 0046 0022     	 movs r2,#0
 10188 0048 1A60     	 str r2,[r3]
 10189 004a 0433     	 adds r3,r3,#4
 10190 004c 0022     	 movs r2,#0
 10191 004e 1A60     	 str r2,[r3]
 10192 0050 0433     	 adds r3,r3,#4
 10193 0052 0022     	 movs r2,#0
 10194 0054 1A60     	 str r2,[r3]
 10195 0056 0433     	 adds r3,r3,#4
 10196 0058 0022     	 movs r2,#0
 10197 005a 1A60     	 str r2,[r3]
 10198 005c 0433     	 adds r3,r3,#4
 10199 005e 0022     	 movs r2,#0
 10200 0060 1A60     	 str r2,[r3]
 10201 0062 0433     	 adds r3,r3,#4
 10202 0064 0022     	 movs r2,#0
 10203 0066 1A80     	 strh r2,[r3]
 10204 0068 0233     	 adds r3,r3,#2
2135:../4g_module/mdm_handler.c **** 	short ls_result = 0;
 10205              	 .loc 3 2135 0
 10206 006a 0023     	 movs r3,#0
 10207 006c A7F85630 	 strh r3,[r7,#86]
2136:../4g_module/mdm_handler.c **** 	uint64_t lu64_totalTime = 0;
 10208              	 .loc 3 2136 0
 10209 0070 4FF00002 	 mov r2,#0
 10210 0074 4FF00003 	 mov r3,#0
 10211 0078 C7E91223 	 strd r2,[r7,#72]
2137:../4g_module/mdm_handler.c ****  
2138:../4g_module/mdm_handler.c **** 	switch (sen_publishDataState)
 10212              	 .loc 3 2138 0
 10213 007c BA4B     	 ldr r3,.L394
 10214 007e 1B78     	 ldrb r3,[r3]
 10215 0080 002B     	 cmp r3,#0
 10216 0082 03D0     	 beq .L357
 10217 0084 012B     	 cmp r3,#1
 10218 0086 00F0C380 	 beq .L358
 10219 008a B7E1     	 b .L393
 10220              	.L357:
2139:../4g_module/mdm_handler.c **** 	{
2140:../4g_module/mdm_handler.c **** 		case E_PUBLISH_CMD_STATE:
2141:../4g_module/mdm_handler.c ****  
2142:../4g_module/mdm_handler.c **** 			sprintf((char *) lu8arr_param, (const char*) "%d,1,%d,0,%s,%d\r\n",
 10221              	 .loc 3 2142 0
 10222 008c B74B     	 ldr r3,.L394+4
 10223 008e 1B78     	 ldrb r3,[r3]
 10224 0090 1C46     	 mov r4,r3
 10225 0092 7B89     	 ldrh r3,[r7,#10]
 10226 0094 07F11401 	 add r1,r7,#20
 10227 0098 7A68     	 ldr r2,[r7,#4]
 10228 009a 0092     	 str r2,[sp]
 10229 009c 0193     	 str r3,[sp,#4]
 10230 009e 0846     	 mov r0,r1
 10231 00a0 B349     	 ldr r1,.L394+8
 10232 00a2 2246     	 mov r2,r4
 10233 00a4 0023     	 movs r3,#0
 10234 00a6 FFF7FEFF 	 bl sprintf
2143:../4g_module/mdm_handler.c **** 					sgu8_mqttClientId, MQTT_PUBLISH_QOS, lu8p_topic, lu16_len);
2144:../4g_module/mdm_handler.c ****  
2145:../4g_module/mdm_handler.c **** 			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH,
 10235              	 .loc 3 2145 0
 10236 00aa 07F11403 	 add r3,r7,#20
 10237 00ae 1520     	 movs r0,#21
 10238 00b0 1946     	 mov r1,r3
 10239 00b2 FFF7FEFF 	 bl mod_sendCmdGetRsp
 10240 00b6 0346     	 mov r3,r0
 10241 00b8 87F85F30 	 strb r3,[r7,#95]
2146:../4g_module/mdm_handler.c **** 					(uint8_t *) lu8arr_param);
2147:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 10242              	 .loc 3 2147 0
 10243 00bc 97F85F30 	 ldrb r3,[r7,#95]
 10244 00c0 002B     	 cmp r3,#0
 10245 00c2 30D1     	 bne .L359
2148:../4g_module/mdm_handler.c **** 			{
2149:../4g_module/mdm_handler.c **** 				lu8p_Ptr =
 10246              	 .loc 3 2149 0
 10247 00c4 AB48     	 ldr r0,.L394+12
 10248 00c6 AC49     	 ldr r1,.L394+16
 10249 00c8 FFF7FEFF 	 bl strstr
 10250 00cc B865     	 str r0,[r7,#88]
2150:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2151:../4g_module/mdm_handler.c **** 								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH].mu8arr_respString);
2152:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_Ptr)
 10251              	 .loc 3 2152 0
 10252 00ce BB6D     	 ldr r3,[r7,#88]
 10253 00d0 002B     	 cmp r3,#0
 10254 00d2 1FD0     	 beq .L360
2153:../4g_module/mdm_handler.c **** 				{
2154:../4g_module/mdm_handler.c **** 					lsu8_retryCnt = 0;
 10255              	 .loc 3 2154 0
 10256 00d4 A94B     	 ldr r3,.L394+20
 10257 00d6 0022     	 movs r2,#0
 10258 00d8 1A70     	 strb r2,[r3]
2155:../4g_module/mdm_handler.c ****  
2156:../4g_module/mdm_handler.c **** 					memset(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString, 0,
 10259              	 .loc 3 2156 0
 10260 00da A948     	 ldr r0,.L394+24
 10261 00dc 0021     	 movs r1,#0
 10262 00de 4FF48162 	 mov r2,#1032
 10263 00e2 FFF7FEFF 	 bl memset
2157:../4g_module/mdm_handler.c **** 							sizeof(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString));
2158:../4g_module/mdm_handler.c ****  
2159:../4g_module/mdm_handler.c **** 					strncpy(
 10264              	 .loc 3 2159 0
 10265 00e6 7B89     	 ldrh r3,[r7,#10]
 10266 00e8 A548     	 ldr r0,.L394+24
 10267 00ea F968     	 ldr r1,[r7,#12]
 10268 00ec 1A46     	 mov r2,r3
 10269 00ee FFF7FEFF 	 bl strncpy
2160:../4g_module/mdm_handler.c **** 							(char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString,
2161:../4g_module/mdm_handler.c **** 							(char *) lu8p_data, lu16_len);
2162:../4g_module/mdm_handler.c ****  
2163:../4g_module/mdm_handler.c **** 					gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString[lu16_len++] =
 10270              	 .loc 3 2163 0
 10271 00f2 7B89     	 ldrh r3,[r7,#10]
 10272 00f4 5A1C     	 adds r2,r3,#1
 10273 00f6 7A81     	 strh r2,[r7,#10]
 10274 00f8 1A46     	 mov r2,r3
 10275 00fa A24B     	 ldr r3,.L394+28
 10276 00fc 1344     	 add r3,r3,r2
 10277 00fe 03F5CC43 	 add r3,r3,#26112
 10278 0102 1833     	 adds r3,r3,#24
 10279 0104 0022     	 movs r2,#0
 10280 0106 1A70     	 strb r2,[r3]
2164:../4g_module/mdm_handler.c **** 							'\0';
2165:../4g_module/mdm_handler.c ****  
2166:../4g_module/mdm_handler.c **** 					sen_publishDataState = E_PUBLISH_DATA_STATE;
 10281              	 .loc 3 2166 0
 10282 0108 974B     	 ldr r3,.L394
 10283 010a 0122     	 movs r2,#1
 10284 010c 1A70     	 strb r2,[r3]
2167:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
 10285              	 .loc 3 2167 0
 10286 010e 0423     	 movs r3,#4
 10287 0110 87F85F30 	 strb r3,[r7,#95]
 10288              	.L360:
2168:../4g_module/mdm_handler.c **** 				}
2169:../4g_module/mdm_handler.c ****  
2170:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
 10289              	 .loc 3 2170 0
 10290 0114 9C4B     	 ldr r3,.L394+32
 10291 0116 0022     	 movs r2,#0
 10292 0118 1A70     	 strb r2,[r3]
2171:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 10293              	 .loc 3 2171 0
 10294 011a 9648     	 ldr r0,.L394+12
 10295 011c 0021     	 movs r1,#0
 10296 011e 4022     	 movs r2,#64
 10297 0120 FFF7FEFF 	 bl memset
 10298 0124 73E0     	 b .L361
 10299              	.L359:
2172:../4g_module/mdm_handler.c **** 			}
2173:../4g_module/mdm_handler.c **** 			else if(E_RET_CME_ERROR == len_retStatus)
 10300              	 .loc 3 2173 0
 10301 0126 97F85F30 	 ldrb r3,[r7,#95]
 10302 012a 0B2B     	 cmp r3,#11
 10303 012c 07D1     	 bne .L362
2174:../4g_module/mdm_handler.c **** 			{
2175:../4g_module/mdm_handler.c **** 				if(sgu16_cmeError == 58)
 10304              	 .loc 3 2175 0
 10305 012e 974B     	 ldr r3,.L394+36
 10306 0130 1B88     	 ldrh r3,[r3]
 10307 0132 3A2B     	 cmp r3,#58
 10308 0134 6BD1     	 bne .L361
2176:../4g_module/mdm_handler.c **** 				{
2177:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_CME_ERROR;
 10309              	 .loc 3 2177 0
 10310 0136 0B23     	 movs r3,#11
 10311 0138 87F85F30 	 strb r3,[r7,#95]
2178:../4g_module/mdm_handler.c **** 				}
2179:../4g_module/mdm_handler.c **** 			}
2180:../4g_module/mdm_handler.c **** 			else if (E_RET_RSP_ERROR == len_retStatus)
2181:../4g_module/mdm_handler.c **** 			{
2182:../4g_module/mdm_handler.c **** 				lsu8_retryCnt = 0;
2183:../4g_module/mdm_handler.c **** 				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
2184:../4g_module/mdm_handler.c **** 						(const char *) QMTSTAT);
2185:../4g_module/mdm_handler.c **** 				if (lu8p_Ptr != NULL)
2186:../4g_module/mdm_handler.c **** 				{
2187:../4g_module/mdm_handler.c **** 					if (lu8p_Ptr != NULL)
2188:../4g_module/mdm_handler.c **** 					{
2189:../4g_module/mdm_handler.c **** 						lu8p_Ptr += 10;
2190:../4g_module/mdm_handler.c **** 						ls_result = atoi((char *) lu8p_Ptr);
2191:../4g_module/mdm_handler.c **** 						if (sgu8_mqttClientId == ls_result)	//check client Idx
2192:../4g_module/mdm_handler.c **** 						{
2193:../4g_module/mdm_handler.c **** 							lu8p_Ptr += 2;
2194:../4g_module/mdm_handler.c **** 							ls_result = atoi((char *) lu8p_Ptr);	//check error code
2195:../4g_module/mdm_handler.c **** 							if (1 == ls_result)
2196:../4g_module/mdm_handler.c **** 							{
2197:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_CONN_CLOSED_ERROR;
2198:../4g_module/mdm_handler.c **** 							}
2199:../4g_module/mdm_handler.c **** 							else
2200:../4g_module/mdm_handler.c **** 							{
2201:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_FAILED;
2202:../4g_module/mdm_handler.c **** 							}
2203:../4g_module/mdm_handler.c **** 						}
2204:../4g_module/mdm_handler.c **** 						else
2205:../4g_module/mdm_handler.c **** 						{
2206:../4g_module/mdm_handler.c **** 							len_retStatus = E_RET_FAILED;
2207:../4g_module/mdm_handler.c **** 						}
2208:../4g_module/mdm_handler.c **** 					}
2209:../4g_module/mdm_handler.c **** 					else
2210:../4g_module/mdm_handler.c **** 					{
2211:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
2212:../4g_module/mdm_handler.c **** 					}
2213:../4g_module/mdm_handler.c **** 				}
2214:../4g_module/mdm_handler.c **** 				else
2215:../4g_module/mdm_handler.c **** 				{
2216:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
2217:../4g_module/mdm_handler.c **** 				}
2218:../4g_module/mdm_handler.c ****  
2219:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
2220:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
2221:../4g_module/mdm_handler.c ****  
2222:../4g_module/mdm_handler.c **** 			}
2223:../4g_module/mdm_handler.c **** 			else if (E_RET_INPROGRESS != len_retStatus)
2224:../4g_module/mdm_handler.c **** 			{
2225:../4g_module/mdm_handler.c **** 				lsu8_retryCnt++;
2226:../4g_module/mdm_handler.c **** 				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
2227:../4g_module/mdm_handler.c **** 				{
2228:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
2229:../4g_module/mdm_handler.c **** 				}
2230:../4g_module/mdm_handler.c **** 				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
2231:../4g_module/mdm_handler.c **** 				{
2232:../4g_module/mdm_handler.c **** 					lsu8_retryCnt = 0;
2233:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_TIMEOUT_ERROR;
2234:../4g_module/mdm_handler.c **** 				}
2235:../4g_module/mdm_handler.c **** 			}
2236:../4g_module/mdm_handler.c **** 		break;
 10312              	 .loc 3 2236 0
 10313 013c 62E1     	 b .L374
 10314              	.L362:
2180:../4g_module/mdm_handler.c **** 			{
 10315              	 .loc 3 2180 0
 10316 013e 97F85F30 	 ldrb r3,[r7,#95]
 10317 0142 032B     	 cmp r3,#3
 10318 0144 46D1     	 bne .L364
2182:../4g_module/mdm_handler.c **** 				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 10319              	 .loc 3 2182 0
 10320 0146 8D4B     	 ldr r3,.L394+20
 10321 0148 0022     	 movs r2,#0
 10322 014a 1A70     	 strb r2,[r3]
2183:../4g_module/mdm_handler.c **** 						(const char *) QMTSTAT);
 10323              	 .loc 3 2183 0
 10324 014c 8948     	 ldr r0,.L394+12
 10325 014e 9049     	 ldr r1,.L394+40
 10326 0150 FFF7FEFF 	 bl strstr
 10327 0154 B865     	 str r0,[r7,#88]
2185:../4g_module/mdm_handler.c **** 				{
 10328              	 .loc 3 2185 0
 10329 0156 BB6D     	 ldr r3,[r7,#88]
 10330 0158 002B     	 cmp r3,#0
 10331 015a 2FD0     	 beq .L365
2187:../4g_module/mdm_handler.c **** 					{
 10332              	 .loc 3 2187 0
 10333 015c BB6D     	 ldr r3,[r7,#88]
 10334 015e 002B     	 cmp r3,#0
 10335 0160 28D0     	 beq .L366
2189:../4g_module/mdm_handler.c **** 						ls_result = atoi((char *) lu8p_Ptr);
 10336              	 .loc 3 2189 0
 10337 0162 BB6D     	 ldr r3,[r7,#88]
 10338 0164 0A33     	 adds r3,r3,#10
 10339 0166 BB65     	 str r3,[r7,#88]
2190:../4g_module/mdm_handler.c **** 						if (sgu8_mqttClientId == ls_result)	//check client Idx
 10340              	 .loc 3 2190 0
 10341 0168 B86D     	 ldr r0,[r7,#88]
 10342 016a FFF7FEFF 	 bl atoi
 10343 016e 0346     	 mov r3,r0
 10344 0170 A7F85630 	 strh r3,[r7,#86]
2191:../4g_module/mdm_handler.c **** 						{
 10345              	 .loc 3 2191 0
 10346 0174 7D4B     	 ldr r3,.L394+4
 10347 0176 1B78     	 ldrb r3,[r3]
 10348 0178 1A46     	 mov r2,r3
 10349 017a B7F95630 	 ldrsh r3,[r7,#86]
 10350 017e 9A42     	 cmp r2,r3
 10351 0180 14D1     	 bne .L367
2193:../4g_module/mdm_handler.c **** 							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 10352              	 .loc 3 2193 0
 10353 0182 BB6D     	 ldr r3,[r7,#88]
 10354 0184 0233     	 adds r3,r3,#2
 10355 0186 BB65     	 str r3,[r7,#88]
2194:../4g_module/mdm_handler.c **** 							if (1 == ls_result)
 10356              	 .loc 3 2194 0
 10357 0188 B86D     	 ldr r0,[r7,#88]
 10358 018a FFF7FEFF 	 bl atoi
 10359 018e 0346     	 mov r3,r0
 10360 0190 A7F85630 	 strh r3,[r7,#86]
2195:../4g_module/mdm_handler.c **** 							{
 10361              	 .loc 3 2195 0
 10362 0194 B7F95630 	 ldrsh r3,[r7,#86]
 10363 0198 012B     	 cmp r3,#1
 10364 019a 03D1     	 bne .L368
2197:../4g_module/mdm_handler.c **** 							}
 10365              	 .loc 3 2197 0
 10366 019c 0A23     	 movs r3,#10
 10367 019e 87F85F30 	 strb r3,[r7,#95]
 10368 01a2 0EE0     	 b .L372
 10369              	.L368:
2201:../4g_module/mdm_handler.c **** 							}
 10370              	 .loc 3 2201 0
 10371 01a4 0223     	 movs r3,#2
 10372 01a6 87F85F30 	 strb r3,[r7,#95]
 10373 01aa 0AE0     	 b .L372
 10374              	.L367:
2206:../4g_module/mdm_handler.c **** 						}
 10375              	 .loc 3 2206 0
 10376 01ac 0223     	 movs r3,#2
 10377 01ae 87F85F30 	 strb r3,[r7,#95]
 10378 01b2 06E0     	 b .L372
 10379              	.L366:
2211:../4g_module/mdm_handler.c **** 					}
 10380              	 .loc 3 2211 0
 10381 01b4 0223     	 movs r3,#2
 10382 01b6 87F85F30 	 strb r3,[r7,#95]
 10383 01ba 02E0     	 b .L372
 10384              	.L365:
2216:../4g_module/mdm_handler.c **** 				}
 10385              	 .loc 3 2216 0
 10386 01bc 0223     	 movs r3,#2
 10387 01be 87F85F30 	 strb r3,[r7,#95]
 10388              	.L372:
2219:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 10389              	 .loc 3 2219 0
 10390 01c2 714B     	 ldr r3,.L394+32
 10391 01c4 0022     	 movs r2,#0
 10392 01c6 1A70     	 strb r2,[r3]
2220:../4g_module/mdm_handler.c ****  
 10393              	 .loc 3 2220 0
 10394 01c8 6A48     	 ldr r0,.L394+12
 10395 01ca 0021     	 movs r1,#0
 10396 01cc 4022     	 movs r2,#64
 10397 01ce FFF7FEFF 	 bl memset
 10398 01d2 1CE0     	 b .L361
 10399              	.L364:
2223:../4g_module/mdm_handler.c **** 			{
 10400              	 .loc 3 2223 0
 10401 01d4 97F85F30 	 ldrb r3,[r7,#95]
 10402 01d8 042B     	 cmp r3,#4
 10403 01da 18D0     	 beq .L361
2225:../4g_module/mdm_handler.c **** 				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 10404              	 .loc 3 2225 0
 10405 01dc 674B     	 ldr r3,.L394+20
 10406 01de 1B78     	 ldrb r3,[r3]
 10407 01e0 0133     	 adds r3,r3,#1
 10408 01e2 DAB2     	 uxtb r2,r3
 10409 01e4 654B     	 ldr r3,.L394+20
 10410 01e6 1A70     	 strb r2,[r3]
2226:../4g_module/mdm_handler.c **** 				{
 10411              	 .loc 3 2226 0
 10412 01e8 644B     	 ldr r3,.L394+20
 10413 01ea 1B78     	 ldrb r3,[r3]
 10414 01ec 022B     	 cmp r3,#2
 10415 01ee 03D8     	 bhi .L373
2228:../4g_module/mdm_handler.c **** 				}
 10416              	 .loc 3 2228 0
 10417 01f0 0423     	 movs r3,#4
 10418 01f2 87F85F30 	 strb r3,[r7,#95]
 10419 01f6 0AE0     	 b .L361
 10420              	.L373:
2230:../4g_module/mdm_handler.c **** 				{
 10421              	 .loc 3 2230 0
 10422 01f8 604B     	 ldr r3,.L394+20
 10423 01fa 1B78     	 ldrb r3,[r3]
 10424 01fc 032B     	 cmp r3,#3
 10425 01fe 06D9     	 bls .L361
2232:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_TIMEOUT_ERROR;
 10426              	 .loc 3 2232 0
 10427 0200 5E4B     	 ldr r3,.L394+20
 10428 0202 0022     	 movs r2,#0
 10429 0204 1A70     	 strb r2,[r3]
2233:../4g_module/mdm_handler.c **** 				}
 10430              	 .loc 3 2233 0
 10431 0206 0623     	 movs r3,#6
 10432 0208 87F85F30 	 strb r3,[r7,#95]
 10433              	 .loc 3 2236 0
 10434 020c FAE0     	 b .L374
 10435              	.L361:
 10436              	 .loc 3 2236 0 is_stmt 0 discriminator 1
 10437 020e F9E0     	 b .L374
 10438              	.L358:
2237:../4g_module/mdm_handler.c ****  
2238:../4g_module/mdm_handler.c **** 		case E_PUBLISH_DATA_STATE:
2239:../4g_module/mdm_handler.c **** 			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH_DATA, NULL);
 10439              	 .loc 3 2239 0 is_stmt 1
 10440 0210 1620     	 movs r0,#22
 10441 0212 0021     	 movs r1,#0
 10442 0214 FFF7FEFF 	 bl mod_sendCmdGetRsp
 10443 0218 0346     	 mov r3,r0
 10444 021a 87F85F30 	 strb r3,[r7,#95]
2240:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 10445              	 .loc 3 2240 0
 10446 021e 97F85F30 	 ldrb r3,[r7,#95]
 10447 0222 002B     	 cmp r3,#0
 10448 0224 60D1     	 bne .L375
2241:../4g_module/mdm_handler.c **** 			{
2242:../4g_module/mdm_handler.c **** 				lu8p_Ptr =
 10449              	 .loc 3 2242 0
 10450 0226 5348     	 ldr r0,.L394+12
 10451 0228 5A49     	 ldr r1,.L394+44
 10452 022a FFF7FEFF 	 bl strstr
 10453 022e B865     	 str r0,[r7,#88]
2243:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2244:../4g_module/mdm_handler.c **** 								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_otherRspString);
2245:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_Ptr)
 10454              	 .loc 3 2245 0
 10455 0230 BB6D     	 ldr r3,[r7,#88]
 10456 0232 002B     	 cmp r3,#0
 10457 0234 4FD0     	 beq .L376
2246:../4g_module/mdm_handler.c **** 				{
2247:../4g_module/mdm_handler.c **** 					lu8p_Ptr += 11;
 10458              	 .loc 3 2247 0
 10459 0236 BB6D     	 ldr r3,[r7,#88]
 10460 0238 0B33     	 adds r3,r3,#11
 10461 023a BB65     	 str r3,[r7,#88]
2248:../4g_module/mdm_handler.c **** 					ls_result = atoi((const char *) lu8p_Ptr);
 10462              	 .loc 3 2248 0
 10463 023c B86D     	 ldr r0,[r7,#88]
 10464 023e FFF7FEFF 	 bl atoi
 10465 0242 0346     	 mov r3,r0
 10466 0244 A7F85630 	 strh r3,[r7,#86]
2249:../4g_module/mdm_handler.c **** 					if (sgu8_mqttClientId == ls_result)
 10467              	 .loc 3 2249 0
 10468 0248 484B     	 ldr r3,.L394+4
 10469 024a 1B78     	 ldrb r3,[r3]
 10470 024c 1A46     	 mov r2,r3
 10471 024e B7F95630 	 ldrsh r3,[r7,#86]
 10472 0252 9A42     	 cmp r2,r3
 10473 0254 3FD1     	 bne .L376
2250:../4g_module/mdm_handler.c **** 					{
2251:../4g_module/mdm_handler.c **** 						lu8p_Ptr += 2;
 10474              	 .loc 3 2251 0
 10475 0256 BB6D     	 ldr r3,[r7,#88]
 10476 0258 0233     	 adds r3,r3,#2
 10477 025a BB65     	 str r3,[r7,#88]
2252:../4g_module/mdm_handler.c **** 						ls_result = atoi((const char *) lu8p_Ptr);
 10478              	 .loc 3 2252 0
 10479 025c B86D     	 ldr r0,[r7,#88]
 10480 025e FFF7FEFF 	 bl atoi
 10481 0262 0346     	 mov r3,r0
 10482 0264 A7F85630 	 strh r3,[r7,#86]
2253:../4g_module/mdm_handler.c **** 						if (1 == ls_result)	//msg id
 10483              	 .loc 3 2253 0
 10484 0268 B7F95630 	 ldrsh r3,[r7,#86]
 10485 026c 012B     	 cmp r3,#1
 10486 026e 32D1     	 bne .L376
2254:../4g_module/mdm_handler.c **** 						{
2255:../4g_module/mdm_handler.c **** 							lu8p_Ptr += 2;
 10487              	 .loc 3 2255 0
 10488 0270 BB6D     	 ldr r3,[r7,#88]
 10489 0272 0233     	 adds r3,r3,#2
 10490 0274 BB65     	 str r3,[r7,#88]
2256:../4g_module/mdm_handler.c **** 							ls_result = atoi((const char *) lu8p_Ptr);
 10491              	 .loc 3 2256 0
 10492 0276 B86D     	 ldr r0,[r7,#88]
 10493 0278 FFF7FEFF 	 bl atoi
 10494 027c 0346     	 mov r3,r0
 10495 027e A7F85630 	 strh r3,[r7,#86]
2257:../4g_module/mdm_handler.c **** 							if (E_PUB_SUCCESS == ls_result)	//Packet sent successfully and ACK received
 10496              	 .loc 3 2257 0
 10497 0282 B7F95630 	 ldrsh r3,[r7,#86]
 10498 0286 002B     	 cmp r3,#0
 10499 0288 09D1     	 bne .L377
2258:../4g_module/mdm_handler.c **** 							{
2259:../4g_module/mdm_handler.c **** 								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_SUCCESS;
 10500              	 .loc 3 2259 0
 10501 028a 434B     	 ldr r3,.L394+48
 10502 028c 0022     	 movs r2,#0
 10503 028e DA71     	 strb r2,[r3,#7]
2260:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_SUCCESS;
 10504              	 .loc 3 2260 0
 10505 0290 0023     	 movs r3,#0
 10506 0292 87F85F30 	 strb r3,[r7,#95]
2261:../4g_module/mdm_handler.c **** 								sen_publishDataState = E_PUBLISH_CMD_STATE;
 10507              	 .loc 3 2261 0
 10508 0296 344B     	 ldr r3,.L394
 10509 0298 0022     	 movs r2,#0
 10510 029a 1A70     	 strb r2,[r3]
 10511 029c 1BE0     	 b .L376
 10512              	.L377:
2262:../4g_module/mdm_handler.c **** 							}
2263:../4g_module/mdm_handler.c **** 							else if(E_PUB_PACK_RETRAN == ls_result)	//Packet retransmission
 10513              	 .loc 3 2263 0
 10514 029e B7F95630 	 ldrsh r3,[r7,#86]
 10515 02a2 012B     	 cmp r3,#1
 10516 02a4 06D1     	 bne .L378
2264:../4g_module/mdm_handler.c **** 							{
2265:../4g_module/mdm_handler.c **** 								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_PACK_RETRAN;
 10517              	 .loc 3 2265 0
 10518 02a6 3C4B     	 ldr r3,.L394+48
 10519 02a8 0122     	 movs r2,#1
 10520 02aa DA71     	 strb r2,[r3,#7]
2266:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_INPROGRESS;
 10521              	 .loc 3 2266 0
 10522 02ac 0423     	 movs r3,#4
 10523 02ae 87F85F30 	 strb r3,[r7,#95]
 10524 02b2 10E0     	 b .L376
 10525              	.L378:
2267:../4g_module/mdm_handler.c **** 							}
2268:../4g_module/mdm_handler.c **** 							else if(E_PUB_FAILED_SEND_PACK == ls_result)	//Failed to send packet
 10526              	 .loc 3 2268 0
 10527 02b4 B7F95630 	 ldrsh r3,[r7,#86]
 10528 02b8 022B     	 cmp r3,#2
 10529 02ba 06D1     	 bne .L379
2269:../4g_module/mdm_handler.c **** 							{
2270:../4g_module/mdm_handler.c **** 								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_FAILED_SEND_PACK;
 10530              	 .loc 3 2270 0
 10531 02bc 364B     	 ldr r3,.L394+48
 10532 02be 0222     	 movs r2,#2
 10533 02c0 DA71     	 strb r2,[r3,#7]
2271:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_FAILED;
 10534              	 .loc 3 2271 0
 10535 02c2 0223     	 movs r3,#2
 10536 02c4 87F85F30 	 strb r3,[r7,#95]
 10537 02c8 05E0     	 b .L376
 10538              	.L379:
2272:../4g_module/mdm_handler.c **** 							}
2273:../4g_module/mdm_handler.c **** 							else
2274:../4g_module/mdm_handler.c **** 							{
2275:../4g_module/mdm_handler.c **** 								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_UNKNOWN_ERROR;
 10539              	 .loc 3 2275 0
 10540 02ca 334B     	 ldr r3,.L394+48
 10541 02cc 0322     	 movs r2,#3
 10542 02ce DA71     	 strb r2,[r3,#7]
2276:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_FAILED;
 10543              	 .loc 3 2276 0
 10544 02d0 0223     	 movs r3,#2
 10545 02d2 87F85F30 	 strb r3,[r7,#95]
 10546              	.L376:
2277:../4g_module/mdm_handler.c **** 							}
2278:../4g_module/mdm_handler.c **** 						}
2279:../4g_module/mdm_handler.c **** 					}
2280:../4g_module/mdm_handler.c **** 				}
2281:../4g_module/mdm_handler.c ****  
2282:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
 10547              	 .loc 3 2282 0
 10548 02d6 2C4B     	 ldr r3,.L394+32
 10549 02d8 0022     	 movs r2,#0
 10550 02da 1A70     	 strb r2,[r3]
2283:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 10551              	 .loc 3 2283 0
 10552 02dc 2548     	 ldr r0,.L394+12
 10553 02de 0021     	 movs r1,#0
 10554 02e0 4022     	 movs r2,#64
 10555 02e2 FFF7FEFF 	 bl memset
 10556 02e6 88E0     	 b .L380
 10557              	.L375:
2284:../4g_module/mdm_handler.c **** 			}
2285:../4g_module/mdm_handler.c **** 			else if (E_RET_RSP_ERROR == len_retStatus)
 10558              	 .loc 3 2285 0
 10559 02e8 97F85F30 	 ldrb r3,[r7,#95]
 10560 02ec 032B     	 cmp r3,#3
 10561 02ee 64D1     	 bne .L381
2286:../4g_module/mdm_handler.c **** 			{
2287:../4g_module/mdm_handler.c **** 				lsu8_retryCnt = 0;
 10562              	 .loc 3 2287 0
 10563 02f0 224B     	 ldr r3,.L394+20
 10564 02f2 0022     	 movs r2,#0
 10565 02f4 1A70     	 strb r2,[r3]
2288:../4g_module/mdm_handler.c **** 				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 10566              	 .loc 3 2288 0
 10567 02f6 1F48     	 ldr r0,.L394+12
 10568 02f8 2549     	 ldr r1,.L394+40
 10569 02fa FFF7FEFF 	 bl strstr
 10570 02fe B865     	 str r0,[r7,#88]
2289:../4g_module/mdm_handler.c **** 						(const char *) QMTSTAT);
2290:../4g_module/mdm_handler.c **** 				if (lu8p_Ptr != NULL)
 10571              	 .loc 3 2290 0
 10572 0300 BB6D     	 ldr r3,[r7,#88]
 10573 0302 002B     	 cmp r3,#0
 10574 0304 4AD0     	 beq .L382
2291:../4g_module/mdm_handler.c **** 				{
2292:../4g_module/mdm_handler.c **** 					if (lu8p_Ptr != NULL)
 10575              	 .loc 3 2292 0
 10576 0306 BB6D     	 ldr r3,[r7,#88]
 10577 0308 002B     	 cmp r3,#0
 10578 030a 28D0     	 beq .L383
2293:../4g_module/mdm_handler.c **** 					{
2294:../4g_module/mdm_handler.c **** 						lu8p_Ptr += 10;
 10579              	 .loc 3 2294 0
 10580 030c BB6D     	 ldr r3,[r7,#88]
 10581 030e 0A33     	 adds r3,r3,#10
 10582 0310 BB65     	 str r3,[r7,#88]
2295:../4g_module/mdm_handler.c **** 						ls_result = atoi((char *) lu8p_Ptr);
 10583              	 .loc 3 2295 0
 10584 0312 B86D     	 ldr r0,[r7,#88]
 10585 0314 FFF7FEFF 	 bl atoi
 10586 0318 0346     	 mov r3,r0
 10587 031a A7F85630 	 strh r3,[r7,#86]
2296:../4g_module/mdm_handler.c **** 						if (sgu8_mqttClientId == ls_result)	//check client Idx
 10588              	 .loc 3 2296 0
 10589 031e 134B     	 ldr r3,.L394+4
 10590 0320 1B78     	 ldrb r3,[r3]
 10591 0322 1A46     	 mov r2,r3
 10592 0324 B7F95630 	 ldrsh r3,[r7,#86]
 10593 0328 9A42     	 cmp r2,r3
 10594 032a 14D1     	 bne .L384
2297:../4g_module/mdm_handler.c **** 						{
2298:../4g_module/mdm_handler.c **** 							lu8p_Ptr += 2;
 10595              	 .loc 3 2298 0
 10596 032c BB6D     	 ldr r3,[r7,#88]
 10597 032e 0233     	 adds r3,r3,#2
 10598 0330 BB65     	 str r3,[r7,#88]
2299:../4g_module/mdm_handler.c **** 							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 10599              	 .loc 3 2299 0
 10600 0332 B86D     	 ldr r0,[r7,#88]
 10601 0334 FFF7FEFF 	 bl atoi
 10602 0338 0346     	 mov r3,r0
 10603 033a A7F85630 	 strh r3,[r7,#86]
2300:../4g_module/mdm_handler.c **** 							if (1 == ls_result)
 10604              	 .loc 3 2300 0
 10605 033e B7F95630 	 ldrsh r3,[r7,#86]
 10606 0342 012B     	 cmp r3,#1
 10607 0344 03D1     	 bne .L385
2301:../4g_module/mdm_handler.c **** 							{
2302:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 10608              	 .loc 3 2302 0
 10609 0346 0A23     	 movs r3,#10
 10610 0348 87F85F30 	 strb r3,[r7,#95]
 10611 034c 29E0     	 b .L389
 10612              	.L385:
2303:../4g_module/mdm_handler.c **** 							}
2304:../4g_module/mdm_handler.c **** 							else
2305:../4g_module/mdm_handler.c **** 							{
2306:../4g_module/mdm_handler.c **** 								len_retStatus = E_RET_FAILED;
 10613              	 .loc 3 2306 0
 10614 034e 0223     	 movs r3,#2
 10615 0350 87F85F30 	 strb r3,[r7,#95]
 10616 0354 25E0     	 b .L389
 10617              	.L384:
2307:../4g_module/mdm_handler.c **** 							}
2308:../4g_module/mdm_handler.c **** 						}
2309:../4g_module/mdm_handler.c **** 						else
2310:../4g_module/mdm_handler.c **** 						{
2311:../4g_module/mdm_handler.c **** 							len_retStatus = E_RET_FAILED;
 10618              	 .loc 3 2311 0
 10619 0356 0223     	 movs r3,#2
 10620 0358 87F85F30 	 strb r3,[r7,#95]
 10621 035c 21E0     	 b .L389
 10622              	.L383:
2312:../4g_module/mdm_handler.c **** 						}
2313:../4g_module/mdm_handler.c **** 					}
2314:../4g_module/mdm_handler.c **** 					else
2315:../4g_module/mdm_handler.c **** 					{
2316:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
 10623              	 .loc 3 2316 0
 10624 035e 0223     	 movs r3,#2
 10625 0360 87F85F30 	 strb r3,[r7,#95]
 10626 0364 1DE0     	 b .L389
 10627              	.L395:
 10628 0366 00BF     	 .align 2
 10629              	.L394:
 10630 0368 00000000 	 .word sen_publishDataState
 10631 036c 00000000 	 .word sgu8_mqttClientId
 10632 0370 20010000 	 .word .LC31
 10633 0374 00000000 	 .word gu8arr_respBuffer
 10634 0378 7C650000 	 .word gcst_ATCmdTable+25980
 10635 037c 00000000 	 .word lsu8_retryCnt.14976
 10636 0380 18660000 	 .word gcst_ATCmdTable+26136
 10637 0384 00000000 	 .word gcst_ATCmdTable
 10638 0388 00000000 	 .word sgu8_respCount
 10639 038c 00000000 	 .word sgu16_cmeError
 10640 0390 00000000 	 .word .LC0
 10641 0394 526A0000 	 .word gcst_ATCmdTable+27218
 10642 0398 00000000 	 .word gst_deviceStatus
 10643              	.L382:
2317:../4g_module/mdm_handler.c **** 					}
2318:../4g_module/mdm_handler.c **** 				}
2319:../4g_module/mdm_handler.c **** 				else
2320:../4g_module/mdm_handler.c **** 				{
2321:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 10644              	 .loc 3 2321 0
 10645 039c 0223     	 movs r3,#2
 10646 039e 87F85F30 	 strb r3,[r7,#95]
 10647              	.L389:
2322:../4g_module/mdm_handler.c **** 				}
2323:../4g_module/mdm_handler.c ****  
2324:../4g_module/mdm_handler.c **** 				sgu8_respCount = 0;
 10648              	 .loc 3 2324 0
 10649 03a2 1B4B     	 ldr r3,.L396
 10650 03a4 0022     	 movs r2,#0
 10651 03a6 1A70     	 strb r2,[r3]
2325:../4g_module/mdm_handler.c **** 				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 10652              	 .loc 3 2325 0
 10653 03a8 1A48     	 ldr r0,.L396+4
 10654 03aa 0021     	 movs r1,#0
 10655 03ac 4022     	 movs r2,#64
 10656 03ae FFF7FEFF 	 bl memset
2326:../4g_module/mdm_handler.c ****  
2327:../4g_module/mdm_handler.c **** 				sen_publishDataState = E_PUBLISH_CMD_STATE;
 10657              	 .loc 3 2327 0
 10658 03b2 194B     	 ldr r3,.L396+8
 10659 03b4 0022     	 movs r2,#0
 10660 03b6 1A70     	 strb r2,[r3]
 10661 03b8 1FE0     	 b .L380
 10662              	.L381:
2328:../4g_module/mdm_handler.c **** 			}
2329:../4g_module/mdm_handler.c **** 			else if (E_RET_INPROGRESS != len_retStatus)
 10663              	 .loc 3 2329 0
 10664 03ba 97F85F30 	 ldrb r3,[r7,#95]
 10665 03be 042B     	 cmp r3,#4
 10666 03c0 1BD0     	 beq .L380
2330:../4g_module/mdm_handler.c **** 			{
2331:../4g_module/mdm_handler.c **** 				lsu8_retryCnt++;
 10667              	 .loc 3 2331 0
 10668 03c2 164B     	 ldr r3,.L396+12
 10669 03c4 1B78     	 ldrb r3,[r3]
 10670 03c6 0133     	 adds r3,r3,#1
 10671 03c8 DAB2     	 uxtb r2,r3
 10672 03ca 144B     	 ldr r3,.L396+12
 10673 03cc 1A70     	 strb r2,[r3]
2332:../4g_module/mdm_handler.c **** 				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 10674              	 .loc 3 2332 0
 10675 03ce 134B     	 ldr r3,.L396+12
 10676 03d0 1B78     	 ldrb r3,[r3]
 10677 03d2 022B     	 cmp r3,#2
 10678 03d4 03D8     	 bhi .L390
2333:../4g_module/mdm_handler.c **** 				{
2334:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
 10679              	 .loc 3 2334 0
 10680 03d6 0423     	 movs r3,#4
 10681 03d8 87F85F30 	 strb r3,[r7,#95]
 10682 03dc 09E0     	 b .L391
 10683              	.L390:
2335:../4g_module/mdm_handler.c **** 				}
2336:../4g_module/mdm_handler.c **** 				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 10684              	 .loc 3 2336 0
 10685 03de 0F4B     	 ldr r3,.L396+12
 10686 03e0 1B78     	 ldrb r3,[r3]
 10687 03e2 032B     	 cmp r3,#3
 10688 03e4 05D9     	 bls .L391
2337:../4g_module/mdm_handler.c **** 				{
2338:../4g_module/mdm_handler.c **** 					lsu8_retryCnt = 0;
 10689              	 .loc 3 2338 0
 10690 03e6 0D4B     	 ldr r3,.L396+12
 10691 03e8 0022     	 movs r2,#0
 10692 03ea 1A70     	 strb r2,[r3]
2339:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_TIMEOUT_ERROR;
 10693              	 .loc 3 2339 0
 10694 03ec 0623     	 movs r3,#6
 10695 03ee 87F85F30 	 strb r3,[r7,#95]
 10696              	.L391:
2340:../4g_module/mdm_handler.c **** 				}
2341:../4g_module/mdm_handler.c **** 				sen_publishDataState = E_PUBLISH_CMD_STATE;
 10697              	 .loc 3 2341 0
 10698 03f2 094B     	 ldr r3,.L396+8
 10699 03f4 0022     	 movs r2,#0
 10700 03f6 1A70     	 strb r2,[r3]
2342:../4g_module/mdm_handler.c **** 			}
2343:../4g_module/mdm_handler.c **** 		break;
 10701              	 .loc 3 2343 0
 10702 03f8 04E0     	 b .L374
 10703              	.L380:
 10704 03fa 03E0     	 b .L374
 10705              	.L393:
2344:../4g_module/mdm_handler.c ****  
2345:../4g_module/mdm_handler.c **** 		default:
2346:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 10706              	 .loc 3 2346 0
 10707 03fc 0023     	 movs r3,#0
 10708 03fe 87F85F30 	 strb r3,[r7,#95]
2347:../4g_module/mdm_handler.c **** 		break;
 10709              	 .loc 3 2347 0
 10710 0402 00BF     	 nop
 10711              	.L374:
2348:../4g_module/mdm_handler.c **** 	}
2349:../4g_module/mdm_handler.c ****  
2350:../4g_module/mdm_handler.c **** 	return len_retStatus;
 10712              	 .loc 3 2350 0
 10713 0404 97F85F30 	 ldrb r3,[r7,#95]
2351:../4g_module/mdm_handler.c **** }
 10714              	 .loc 3 2351 0
 10715 0408 1846     	 mov r0,r3
 10716 040a 6437     	 adds r7,r7,#100
 10717              	.LCFI198:
 10718              	 .cfi_def_cfa_offset 12
 10719 040c BD46     	 mov sp,r7
 10720              	.LCFI199:
 10721              	 .cfi_def_cfa_register 13
 10722              	 
 10723 040e 90BD     	 pop {r4,r7,pc}
 10724              	.L397:
 10725              	 .align 2
 10726              	.L396:
 10727 0410 00000000 	 .word sgu8_respCount
 10728 0414 00000000 	 .word gu8arr_respBuffer
 10729 0418 00000000 	 .word sen_publishDataState
 10730 041c 00000000 	 .word lsu8_retryCnt.14976
 10731              	 .cfi_endproc
 10732              	.LFE640:
 10734              	 .section .rodata
 10735 0132 0000     	 .align 2
 10736              	.LC32:
 10737 0134 25642C31 	 .ascii "%d,1,%s,%d\015\012\000"
 10737      2C25732C 
 10737      25640D0A 
 10737      00
 10738              	 .section .text.mod_mqttSubscribe,"ax",%progbits
 10739              	 .align 2
 10740              	 .thumb
 10741              	 .thumb_func
 10743              	mod_mqttSubscribe:
 10744              	.LFB641:
2352:../4g_module/mdm_handler.c **** 
2353:../4g_module/mdm_handler.c **** 
2354:../4g_module/mdm_handler.c **** /**************************************************************************
2355:../4g_module/mdm_handler.c **** * Function Name	:	mod_mqttSubscribe
2356:../4g_module/mdm_handler.c **** *
2357:../4g_module/mdm_handler.c **** * Description   	:	This function used to subscribe the given topic
2358:../4g_module/mdm_handler.c **** *
2359:../4g_module/mdm_handler.c **** * Arguments     	:	uint8_t* - topic to subscribe
2360:../4g_module/mdm_handler.c **** *
2361:../4g_module/mdm_handler.c **** * Return values 	:	en_responseRetCodes_t - return status
2362:../4g_module/mdm_handler.c **** *
2363:../4g_module/mdm_handler.c **** ****************************************************************************/
2364:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttSubscribe(uint8_t * lpu8_topic)
2365:../4g_module/mdm_handler.c **** {
 10745              	 .loc 3 2365 0
 10746              	 .cfi_startproc
 10747              	 
 10748              	 
 10749 0000 90B5     	 push {r4,r7,lr}
 10750              	.LCFI200:
 10751              	 .cfi_def_cfa_offset 12
 10752              	 .cfi_offset 4,-12
 10753              	 .cfi_offset 7,-8
 10754              	 .cfi_offset 14,-4
 10755 0002 95B0     	 sub sp,sp,#84
 10756              	.LCFI201:
 10757              	 .cfi_def_cfa_offset 96
 10758 0004 02AF     	 add r7,sp,#8
 10759              	.LCFI202:
 10760              	 .cfi_def_cfa 7,88
 10761 0006 7860     	 str r0,[r7,#4]
2366:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2367:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 10762              	 .loc 3 2367 0
 10763 0008 0423     	 movs r3,#4
 10764 000a 87F84730 	 strb r3,[r7,#71]
2368:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 10765              	 .loc 3 2368 0
 10766 000e 0023     	 movs r3,#0
 10767 0010 3B64     	 str r3,[r7,#64]
2369:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[50] = { 0 };
 10768              	 .loc 3 2369 0
 10769 0012 07F10C03 	 add r3,r7,#12
 10770 0016 0022     	 movs r2,#0
 10771 0018 1A60     	 str r2,[r3]
 10772 001a 0433     	 adds r3,r3,#4
 10773 001c 0022     	 movs r2,#0
 10774 001e 1A60     	 str r2,[r3]
 10775 0020 0433     	 adds r3,r3,#4
 10776 0022 0022     	 movs r2,#0
 10777 0024 1A60     	 str r2,[r3]
 10778 0026 0433     	 adds r3,r3,#4
 10779 0028 0022     	 movs r2,#0
 10780 002a 1A60     	 str r2,[r3]
 10781 002c 0433     	 adds r3,r3,#4
 10782 002e 0022     	 movs r2,#0
 10783 0030 1A60     	 str r2,[r3]
 10784 0032 0433     	 adds r3,r3,#4
 10785 0034 0022     	 movs r2,#0
 10786 0036 1A60     	 str r2,[r3]
 10787 0038 0433     	 adds r3,r3,#4
 10788 003a 0022     	 movs r2,#0
 10789 003c 1A60     	 str r2,[r3]
 10790 003e 0433     	 adds r3,r3,#4
 10791 0040 0022     	 movs r2,#0
 10792 0042 1A60     	 str r2,[r3]
 10793 0044 0433     	 adds r3,r3,#4
 10794 0046 0022     	 movs r2,#0
 10795 0048 1A60     	 str r2,[r3]
 10796 004a 0433     	 adds r3,r3,#4
 10797 004c 0022     	 movs r2,#0
 10798 004e 1A60     	 str r2,[r3]
 10799 0050 0433     	 adds r3,r3,#4
 10800 0052 0022     	 movs r2,#0
 10801 0054 1A60     	 str r2,[r3]
 10802 0056 0433     	 adds r3,r3,#4
 10803 0058 0022     	 movs r2,#0
 10804 005a 1A60     	 str r2,[r3]
 10805 005c 0433     	 adds r3,r3,#4
 10806 005e 0022     	 movs r2,#0
 10807 0060 1A80     	 strh r2,[r3]
 10808 0062 0233     	 adds r3,r3,#2
2370:../4g_module/mdm_handler.c **** 	short ls8_result = 0;
 10809              	 .loc 3 2370 0
 10810 0064 0023     	 movs r3,#0
 10811 0066 FB87     	 strh r3,[r7,#62]
2371:../4g_module/mdm_handler.c ****  
2372:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, "%d,1,%s,%d\r\n", sgu8_mqttClientId, lpu8_topic,
 10812              	 .loc 3 2372 0
 10813 0068 454B     	 ldr r3,.L406
 10814 006a 1B78     	 ldrb r3,[r3]
 10815 006c 1C46     	 mov r4,r3
 10816 006e 07F10C02 	 add r2,r7,#12
 10817 0072 0023     	 movs r3,#0
 10818 0074 0093     	 str r3,[sp]
 10819 0076 1046     	 mov r0,r2
 10820 0078 4249     	 ldr r1,.L406+4
 10821 007a 2246     	 mov r2,r4
 10822 007c 7B68     	 ldr r3,[r7,#4]
 10823 007e FFF7FEFF 	 bl sprintf
2373:../4g_module/mdm_handler.c **** 			MQTT_SUB_QOS);
2374:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SUBSCRIBE, (uint8_t *) lu8arr_param);
 10824              	 .loc 3 2374 0
 10825 0082 07F10C03 	 add r3,r7,#12
 10826 0086 1820     	 movs r0,#24
 10827 0088 1946     	 mov r1,r3
 10828 008a FFF7FEFF 	 bl mod_sendCmdGetRsp
 10829 008e 0346     	 mov r3,r0
 10830 0090 87F84730 	 strb r3,[r7,#71]
2375:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 10831              	 .loc 3 2375 0
 10832 0094 97F84730 	 ldrb r3,[r7,#71]
 10833 0098 002B     	 cmp r3,#0
 10834 009a 4ED1     	 bne .L399
2376:../4g_module/mdm_handler.c **** 	{
2377:../4g_module/mdm_handler.c ****  
2378:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 10835              	 .loc 3 2378 0
 10836 009c 3A4B     	 ldr r3,.L406+8
 10837 009e 0022     	 movs r2,#0
 10838 00a0 1A70     	 strb r2,[r3]
2379:../4g_module/mdm_handler.c **** 		lu8p_Ptr =
 10839              	 .loc 3 2379 0
 10840 00a2 3A48     	 ldr r0,.L406+12
 10841 00a4 3A49     	 ldr r1,.L406+16
 10842 00a6 FFF7FEFF 	 bl strstr
 10843 00aa 3864     	 str r0,[r7,#64]
2380:../4g_module/mdm_handler.c **** 				(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2381:../4g_module/mdm_handler.c **** 						(const char *) gcst_ATCmdTable[E_IDX_MQTT_SUBSCRIBE].mu8arr_otherRspString);
2382:../4g_module/mdm_handler.c ****  
2383:../4g_module/mdm_handler.c **** 		if (NULL != lu8p_Ptr)
 10844              	 .loc 3 2383 0
 10845 00ac 3B6C     	 ldr r3,[r7,#64]
 10846 00ae 002B     	 cmp r3,#0
 10847 00b0 5FD0     	 beq .L403
2384:../4g_module/mdm_handler.c **** 		{
2385:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 13;
 10848              	 .loc 3 2385 0
 10849 00b2 3B6C     	 ldr r3,[r7,#64]
 10850 00b4 0D33     	 adds r3,r3,#13
 10851 00b6 3B64     	 str r3,[r7,#64]
2386:../4g_module/mdm_handler.c **** 			ls8_result = atoi((const char *) lu8p_Ptr);
 10852              	 .loc 3 2386 0
 10853 00b8 386C     	 ldr r0,[r7,#64]
 10854 00ba FFF7FEFF 	 bl atoi
 10855 00be 0346     	 mov r3,r0
 10856 00c0 FB87     	 strh r3,[r7,#62]
2387:../4g_module/mdm_handler.c **** 			if (sgu8_mqttClientId == ls8_result)
 10857              	 .loc 3 2387 0
 10858 00c2 2F4B     	 ldr r3,.L406
 10859 00c4 1B78     	 ldrb r3,[r3]
 10860 00c6 1A46     	 mov r2,r3
 10861 00c8 B7F93E30 	 ldrsh r3,[r7,#62]
 10862 00cc 9A42     	 cmp r2,r3
 10863 00ce 50D1     	 bne .L403
2388:../4g_module/mdm_handler.c **** 			{
2389:../4g_module/mdm_handler.c **** 				lu8p_Ptr += 2;
 10864              	 .loc 3 2389 0
 10865 00d0 3B6C     	 ldr r3,[r7,#64]
 10866 00d2 0233     	 adds r3,r3,#2
 10867 00d4 3B64     	 str r3,[r7,#64]
2390:../4g_module/mdm_handler.c **** 				ls8_result = atoi((const char *) lu8p_Ptr);
 10868              	 .loc 3 2390 0
 10869 00d6 386C     	 ldr r0,[r7,#64]
 10870 00d8 FFF7FEFF 	 bl atoi
 10871 00dc 0346     	 mov r3,r0
 10872 00de FB87     	 strh r3,[r7,#62]
2391:../4g_module/mdm_handler.c **** 				if(1 == ls8_result)
 10873              	 .loc 3 2391 0
 10874 00e0 B7F93E30 	 ldrsh r3,[r7,#62]
 10875 00e4 012B     	 cmp r3,#1
 10876 00e6 44D1     	 bne .L403
2392:../4g_module/mdm_handler.c **** 				{
2393:../4g_module/mdm_handler.c **** 					lu8p_Ptr += 2;
 10877              	 .loc 3 2393 0
 10878 00e8 3B6C     	 ldr r3,[r7,#64]
 10879 00ea 0233     	 adds r3,r3,#2
 10880 00ec 3B64     	 str r3,[r7,#64]
2394:../4g_module/mdm_handler.c **** 					ls8_result = atoi((const char *) lu8p_Ptr);
 10881              	 .loc 3 2394 0
 10882 00ee 386C     	 ldr r0,[r7,#64]
 10883 00f0 FFF7FEFF 	 bl atoi
 10884 00f4 0346     	 mov r3,r0
 10885 00f6 FB87     	 strh r3,[r7,#62]
2395:../4g_module/mdm_handler.c **** 					if(E_SUB_ACK_RCVD_CONN_ACCEPT == ls8_result)
 10886              	 .loc 3 2395 0
 10887 00f8 B7F93E30 	 ldrsh r3,[r7,#62]
 10888 00fc 002B     	 cmp r3,#0
 10889 00fe 06D1     	 bne .L401
2396:../4g_module/mdm_handler.c **** 					{
2397:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttSubErrorCode = E_SUB_ACK_RCVD_CONN_ACCEPT;
 10890              	 .loc 3 2397 0
 10891 0100 244B     	 ldr r3,.L406+20
 10892 0102 0022     	 movs r2,#0
 10893 0104 1A72     	 strb r2,[r3,#8]
2398:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_SUCCESS;
 10894              	 .loc 3 2398 0
 10895 0106 0023     	 movs r3,#0
 10896 0108 87F84730 	 strb r3,[r7,#71]
 10897 010c 31E0     	 b .L403
 10898              	.L401:
2399:../4g_module/mdm_handler.c **** 					}
2400:../4g_module/mdm_handler.c **** 					else if(E_SUB_RETRAN == ls8_result)
 10899              	 .loc 3 2400 0
 10900 010e B7F93E30 	 ldrsh r3,[r7,#62]
 10901 0112 012B     	 cmp r3,#1
 10902 0114 06D1     	 bne .L402
2401:../4g_module/mdm_handler.c **** 					{
2402:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttSubErrorCode = E_SUB_RETRAN;
 10903              	 .loc 3 2402 0
 10904 0116 1F4B     	 ldr r3,.L406+20
 10905 0118 0122     	 movs r2,#1
 10906 011a 1A72     	 strb r2,[r3,#8]
2403:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_INPROGRESS;
 10907              	 .loc 3 2403 0
 10908 011c 0423     	 movs r3,#4
 10909 011e 87F84730 	 strb r3,[r7,#71]
 10910 0122 26E0     	 b .L403
 10911              	.L402:
2404:../4g_module/mdm_handler.c **** 					}
2405:../4g_module/mdm_handler.c **** 					else if(E_SUB_FAILED_TO_SEND_PACK == ls8_result)
 10912              	 .loc 3 2405 0
 10913 0124 B7F93E30 	 ldrsh r3,[r7,#62]
 10914 0128 022B     	 cmp r3,#2
 10915 012a 22D1     	 bne .L403
2406:../4g_module/mdm_handler.c **** 					{
2407:../4g_module/mdm_handler.c **** 						gst_deviceStatus.men_mqttSubErrorCode = E_SUB_FAILED_TO_SEND_PACK;
 10916              	 .loc 3 2407 0
 10917 012c 194B     	 ldr r3,.L406+20
 10918 012e 0222     	 movs r2,#2
 10919 0130 1A72     	 strb r2,[r3,#8]
2408:../4g_module/mdm_handler.c **** 						len_retStatus = E_RET_FAILED;
 10920              	 .loc 3 2408 0
 10921 0132 0223     	 movs r3,#2
 10922 0134 87F84730 	 strb r3,[r7,#71]
 10923 0138 1BE0     	 b .L403
 10924              	.L399:
2409:../4g_module/mdm_handler.c **** 					}
2410:../4g_module/mdm_handler.c **** 				}
2411:../4g_module/mdm_handler.c **** 			}
2412:../4g_module/mdm_handler.c **** 		}
2413:../4g_module/mdm_handler.c **** 	}
2414:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 10925              	 .loc 3 2414 0
 10926 013a 97F84730 	 ldrb r3,[r7,#71]
 10927 013e 042B     	 cmp r3,#4
 10928 0140 17D0     	 beq .L403
2415:../4g_module/mdm_handler.c **** 	{
2416:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 10929              	 .loc 3 2416 0
 10930 0142 114B     	 ldr r3,.L406+8
 10931 0144 1B78     	 ldrb r3,[r3]
 10932 0146 0133     	 adds r3,r3,#1
 10933 0148 DAB2     	 uxtb r2,r3
 10934 014a 0F4B     	 ldr r3,.L406+8
 10935 014c 1A70     	 strb r2,[r3]
2417:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 10936              	 .loc 3 2417 0
 10937 014e 0E4B     	 ldr r3,.L406+8
 10938 0150 1B78     	 ldrb r3,[r3]
 10939 0152 022B     	 cmp r3,#2
 10940 0154 03D8     	 bhi .L404
2418:../4g_module/mdm_handler.c **** 		{
2419:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 10941              	 .loc 3 2419 0
 10942 0156 0423     	 movs r3,#4
 10943 0158 87F84730 	 strb r3,[r7,#71]
 10944 015c 09E0     	 b .L403
 10945              	.L404:
2420:../4g_module/mdm_handler.c **** 		}
2421:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 10946              	 .loc 3 2421 0
 10947 015e 0A4B     	 ldr r3,.L406+8
 10948 0160 1B78     	 ldrb r3,[r3]
 10949 0162 032B     	 cmp r3,#3
 10950 0164 05D9     	 bls .L403
2422:../4g_module/mdm_handler.c **** 		{
2423:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 10951              	 .loc 3 2423 0
 10952 0166 084B     	 ldr r3,.L406+8
 10953 0168 0022     	 movs r2,#0
 10954 016a 1A70     	 strb r2,[r3]
2424:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_TIMEOUT_ERROR;
 10955              	 .loc 3 2424 0
 10956 016c 0623     	 movs r3,#6
 10957 016e 87F84730 	 strb r3,[r7,#71]
 10958              	.L403:
2425:../4g_module/mdm_handler.c **** 		}
2426:../4g_module/mdm_handler.c **** 	}
2427:../4g_module/mdm_handler.c **** 	return len_retStatus;
 10959              	 .loc 3 2427 0
 10960 0172 97F84730 	 ldrb r3,[r7,#71]
2428:../4g_module/mdm_handler.c **** }
 10961              	 .loc 3 2428 0
 10962 0176 1846     	 mov r0,r3
 10963 0178 4C37     	 adds r7,r7,#76
 10964              	.LCFI203:
 10965              	 .cfi_def_cfa_offset 12
 10966 017a BD46     	 mov sp,r7
 10967              	.LCFI204:
 10968              	 .cfi_def_cfa_register 13
 10969              	 
 10970 017c 90BD     	 pop {r4,r7,pc}
 10971              	.L407:
 10972 017e 00BF     	 .align 2
 10973              	.L406:
 10974 0180 00000000 	 .word sgu8_mqttClientId
 10975 0184 34010000 	 .word .LC32
 10976 0188 00000000 	 .word lsu8_retryCnt.14989
 10977 018c 00000000 	 .word gu8arr_respBuffer
 10978 0190 9A730000 	 .word gcst_ATCmdTable+29594
 10979 0194 00000000 	 .word gst_deviceStatus
 10980              	 .cfi_endproc
 10981              	.LFE641:
 10983              	 .section .text.mod_getCurrentTime,"ax",%progbits
 10984              	 .align 2
 10985              	 .global mod_getCurrentTime
 10986              	 .thumb
 10987              	 .thumb_func
 10989              	mod_getCurrentTime:
 10990              	.LFB642:
2429:../4g_module/mdm_handler.c **** 
2430:../4g_module/mdm_handler.c **** 
2431:../4g_module/mdm_handler.c **** /**************************************************************************
2432:../4g_module/mdm_handler.c ****  * Function Name	:	mod_getCurrentTime
2433:../4g_module/mdm_handler.c ****  *
2434:../4g_module/mdm_handler.c ****  * Description   	:	This function used to get the current time
2435:../4g_module/mdm_handler.c ****  *
2436:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t* - Pointer points to an array
2437:../4g_module/mdm_handler.c ****  *
2438:../4g_module/mdm_handler.c ****  * Return values 	:	uint8_t
2439:../4g_module/mdm_handler.c ****  *
2440:../4g_module/mdm_handler.c ****  ****************************************************************************/
2441:../4g_module/mdm_handler.c **** uint8_t mod_getCurrentTime(uint8_t *lu8p_data)
2442:../4g_module/mdm_handler.c **** {
 10991              	 .loc 3 2442 0
 10992              	 .cfi_startproc
 10993              	 
 10994              	 
 10995              	 
 10996 0000 B0B4     	 push {r4,r5,r7}
 10997              	.LCFI205:
 10998              	 .cfi_def_cfa_offset 12
 10999              	 .cfi_offset 4,-12
 11000              	 .cfi_offset 5,-8
 11001              	 .cfi_offset 7,-4
 11002 0002 85B0     	 sub sp,sp,#20
 11003              	.LCFI206:
 11004              	 .cfi_def_cfa_offset 32
 11005 0004 00AF     	 add r7,sp,#0
 11006              	.LCFI207:
 11007              	 .cfi_def_cfa_register 7
 11008 0006 7860     	 str r0,[r7,#4]
2443:../4g_module/mdm_handler.c **** 	uint8_t lu8_ret = 0;
 11009              	 .loc 3 2443 0
 11010 0008 0023     	 movs r3,#0
 11011 000a FB73     	 strb r3,[r7,#15]
2444:../4g_module/mdm_handler.c **** 
2445:../4g_module/mdm_handler.c **** 	if (NULL != lu8p_data)
 11012              	 .loc 3 2445 0
 11013 000c 7B68     	 ldr r3,[r7,#4]
 11014 000e 002B     	 cmp r3,#0
 11015 0010 0CD0     	 beq .L409
2446:../4g_module/mdm_handler.c **** 	{
2447:../4g_module/mdm_handler.c **** 		memcpy(lu8p_data, gu8_dataTime, TIME_SIZE);
 11016              	 .loc 3 2447 0
 11017 0012 7B68     	 ldr r3,[r7,#4]
 11018 0014 084A     	 ldr r2,.L411
 11019 0016 1D46     	 mov r5,r3
 11020 0018 1446     	 mov r4,r2
 11021 001a 0FCC     	 ldmia r4!,{r0,r1,r2,r3}
 11022 001c 2860     	 str r0,[r5]
 11023 001e 6960     	 str r1,[r5,#4]
 11024 0020 AA60     	 str r2,[r5,#8]
 11025 0022 EB60     	 str r3,[r5,#12]
 11026 0024 2068     	 ldr r0,[r4]
 11027 0026 2861     	 str r0,[r5,#16]
2448:../4g_module/mdm_handler.c **** 		lu8_ret = TIME_SIZE;
 11028              	 .loc 3 2448 0
 11029 0028 1423     	 movs r3,#20
 11030 002a FB73     	 strb r3,[r7,#15]
 11031              	.L409:
2449:../4g_module/mdm_handler.c **** 	}
2450:../4g_module/mdm_handler.c **** 
2451:../4g_module/mdm_handler.c **** 	return lu8_ret;
 11032              	 .loc 3 2451 0
 11033 002c FB7B     	 ldrb r3,[r7,#15]
2452:../4g_module/mdm_handler.c **** }
 11034              	 .loc 3 2452 0
 11035 002e 1846     	 mov r0,r3
 11036 0030 1437     	 adds r7,r7,#20
 11037              	.LCFI208:
 11038              	 .cfi_def_cfa_offset 12
 11039 0032 BD46     	 mov sp,r7
 11040              	.LCFI209:
 11041              	 .cfi_def_cfa_register 13
 11042              	 
 11043 0034 B0BC     	 pop {r4,r5,r7}
 11044              	.LCFI210:
 11045              	 .cfi_restore 7
 11046              	 .cfi_restore 5
 11047              	 .cfi_restore 4
 11048              	 .cfi_def_cfa_offset 0
 11049 0036 7047     	 bx lr
 11050              	.L412:
 11051              	 .align 2
 11052              	.L411:
 11053 0038 00000000 	 .word gu8_dataTime
 11054              	 .cfi_endproc
 11055              	.LFE642:
 11057              	 .section .text.mod_mqttSslMode,"ax",%progbits
 11058              	 .align 2
 11059              	 .thumb
 11060              	 .thumb_func
 11062              	mod_mqttSslMode:
 11063              	.LFB643:
2453:../4g_module/mdm_handler.c **** /**************************************************************************
2454:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttSslMode
2455:../4g_module/mdm_handler.c ****  *
2456:../4g_module/mdm_handler.c ****  * Description   	:	This function Configure MQTT session into SSL mode.
2457:../4g_module/mdm_handler.c ****  *
2458:../4g_module/mdm_handler.c ****  * Arguments     	:	void
2459:../4g_module/mdm_handler.c ****  *
2460:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2461:../4g_module/mdm_handler.c ****  *
2462:../4g_module/mdm_handler.c ****  ****************************************************************************/
2463:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttSslMode(uint8_t *lu8p_param)
2464:../4g_module/mdm_handler.c **** {
 11064              	 .loc 3 2464 0
 11065              	 .cfi_startproc
 11066              	 
 11067              	 
 11068 0000 80B5     	 push {r7,lr}
 11069              	.LCFI211:
 11070              	 .cfi_def_cfa_offset 8
 11071              	 .cfi_offset 7,-8
 11072              	 .cfi_offset 14,-4
 11073 0002 84B0     	 sub sp,sp,#16
 11074              	.LCFI212:
 11075              	 .cfi_def_cfa_offset 24
 11076 0004 00AF     	 add r7,sp,#0
 11077              	.LCFI213:
 11078              	 .cfi_def_cfa_register 7
 11079 0006 7860     	 str r0,[r7,#4]
2465:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 11080              	 .loc 3 2465 0
 11081 0008 0423     	 movs r3,#4
 11082 000a FB73     	 strb r3,[r7,#15]
2466:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2467:../4g_module/mdm_handler.c **** 
2468:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CFG, lu8p_param);
 11083              	 .loc 3 2468 0
 11084 000c 1120     	 movs r0,#17
 11085 000e 7968     	 ldr r1,[r7,#4]
 11086 0010 FFF7FEFF 	 bl mod_sendCmdGetRsp
 11087 0014 0346     	 mov r3,r0
 11088 0016 FB73     	 strb r3,[r7,#15]
2469:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 11089              	 .loc 3 2469 0
 11090 0018 FB7B     	 ldrb r3,[r7,#15]
 11091 001a 002B     	 cmp r3,#0
 11092 001c 05D1     	 bne .L414
2470:../4g_module/mdm_handler.c **** 	{
2471:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 11093              	 .loc 3 2471 0
 11094 001e 114B     	 ldr r3,.L418
 11095 0020 0022     	 movs r2,#0
 11096 0022 1A70     	 strb r2,[r3]
2472:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 11097              	 .loc 3 2472 0
 11098 0024 0023     	 movs r3,#0
 11099 0026 FB73     	 strb r3,[r7,#15]
 11100 0028 16E0     	 b .L415
 11101              	.L414:
2473:../4g_module/mdm_handler.c **** 	}
2474:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 11102              	 .loc 3 2474 0
 11103 002a FB7B     	 ldrb r3,[r7,#15]
 11104 002c 042B     	 cmp r3,#4
 11105 002e 13D0     	 beq .L415
2475:../4g_module/mdm_handler.c **** 	{
2476:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 11106              	 .loc 3 2476 0
 11107 0030 0C4B     	 ldr r3,.L418
 11108 0032 1B78     	 ldrb r3,[r3]
 11109 0034 0133     	 adds r3,r3,#1
 11110 0036 DAB2     	 uxtb r2,r3
 11111 0038 0A4B     	 ldr r3,.L418
 11112 003a 1A70     	 strb r2,[r3]
2477:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 11113              	 .loc 3 2477 0
 11114 003c 094B     	 ldr r3,.L418
 11115 003e 1B78     	 ldrb r3,[r3]
 11116 0040 022B     	 cmp r3,#2
 11117 0042 02D8     	 bhi .L416
2478:../4g_module/mdm_handler.c **** 		{
2479:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 11118              	 .loc 3 2479 0
 11119 0044 0423     	 movs r3,#4
 11120 0046 FB73     	 strb r3,[r7,#15]
 11121 0048 06E0     	 b .L415
 11122              	.L416:
2480:../4g_module/mdm_handler.c **** 		}
2481:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 11123              	 .loc 3 2481 0
 11124 004a 064B     	 ldr r3,.L418
 11125 004c 1B78     	 ldrb r3,[r3]
 11126 004e 032B     	 cmp r3,#3
 11127 0050 02D9     	 bls .L415
2482:../4g_module/mdm_handler.c **** 		{
2483:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 11128              	 .loc 3 2483 0
 11129 0052 044B     	 ldr r3,.L418
 11130 0054 0022     	 movs r2,#0
 11131 0056 1A70     	 strb r2,[r3]
 11132              	.L415:
2484:../4g_module/mdm_handler.c **** 		}
2485:../4g_module/mdm_handler.c **** 	}
2486:../4g_module/mdm_handler.c **** 
2487:../4g_module/mdm_handler.c **** 	return len_retStatus;
 11133              	 .loc 3 2487 0
 11134 0058 FB7B     	 ldrb r3,[r7,#15]
2488:../4g_module/mdm_handler.c **** }
 11135              	 .loc 3 2488 0
 11136 005a 1846     	 mov r0,r3
 11137 005c 1037     	 adds r7,r7,#16
 11138              	.LCFI214:
 11139              	 .cfi_def_cfa_offset 8
 11140 005e BD46     	 mov sp,r7
 11141              	.LCFI215:
 11142              	 .cfi_def_cfa_register 13
 11143              	 
 11144 0060 80BD     	 pop {r7,pc}
 11145              	.L419:
 11146 0062 00BF     	 .align 2
 11147              	.L418:
 11148 0064 00000000 	 .word lsu8_retryCnt.15002
 11149              	 .cfi_endproc
 11150              	.LFE643:
 11152              	 .section .text.mod_mqttSslConfgi,"ax",%progbits
 11153              	 .align 2
 11154              	 .thumb
 11155              	 .thumb_func
 11157              	mod_mqttSslConfgi:
 11158              	.LFB644:
2489:../4g_module/mdm_handler.c **** 
2490:../4g_module/mdm_handler.c **** /**************************************************************************
2491:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttSslConfgi
2492:../4g_module/mdm_handler.c ****  *
2493:../4g_module/mdm_handler.c ****  * Description   	:	This function Configure SSL
2494:../4g_module/mdm_handler.c ****  *
2495:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t *
2496:../4g_module/mdm_handler.c ****  *
2497:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2498:../4g_module/mdm_handler.c ****  *
2499:../4g_module/mdm_handler.c ****  ****************************************************************************/
2500:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttSslConfgi(uint8_t *lu8p_param)
2501:../4g_module/mdm_handler.c **** {
 11159              	 .loc 3 2501 0
 11160              	 .cfi_startproc
 11161              	 
 11162              	 
 11163 0000 80B5     	 push {r7,lr}
 11164              	.LCFI216:
 11165              	 .cfi_def_cfa_offset 8
 11166              	 .cfi_offset 7,-8
 11167              	 .cfi_offset 14,-4
 11168 0002 84B0     	 sub sp,sp,#16
 11169              	.LCFI217:
 11170              	 .cfi_def_cfa_offset 24
 11171 0004 00AF     	 add r7,sp,#0
 11172              	.LCFI218:
 11173              	 .cfi_def_cfa_register 7
 11174 0006 7860     	 str r0,[r7,#4]
2502:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 11175              	 .loc 3 2502 0
 11176 0008 0423     	 movs r3,#4
 11177 000a FB73     	 strb r3,[r7,#15]
2503:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2504:../4g_module/mdm_handler.c **** 
2505:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SSL_CFG, lu8p_param);
 11178              	 .loc 3 2505 0
 11179 000c 1220     	 movs r0,#18
 11180 000e 7968     	 ldr r1,[r7,#4]
 11181 0010 FFF7FEFF 	 bl mod_sendCmdGetRsp
 11182 0014 0346     	 mov r3,r0
 11183 0016 FB73     	 strb r3,[r7,#15]
2506:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 11184              	 .loc 3 2506 0
 11185 0018 FB7B     	 ldrb r3,[r7,#15]
 11186 001a 002B     	 cmp r3,#0
 11187 001c 05D1     	 bne .L421
2507:../4g_module/mdm_handler.c **** 	{
2508:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 11188              	 .loc 3 2508 0
 11189 001e 114B     	 ldr r3,.L425
 11190 0020 0022     	 movs r2,#0
 11191 0022 1A70     	 strb r2,[r3]
2509:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 11192              	 .loc 3 2509 0
 11193 0024 0023     	 movs r3,#0
 11194 0026 FB73     	 strb r3,[r7,#15]
 11195 0028 16E0     	 b .L422
 11196              	.L421:
2510:../4g_module/mdm_handler.c **** 	}
2511:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 11197              	 .loc 3 2511 0
 11198 002a FB7B     	 ldrb r3,[r7,#15]
 11199 002c 042B     	 cmp r3,#4
 11200 002e 13D0     	 beq .L422
2512:../4g_module/mdm_handler.c **** 	{
2513:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 11201              	 .loc 3 2513 0
 11202 0030 0C4B     	 ldr r3,.L425
 11203 0032 1B78     	 ldrb r3,[r3]
 11204 0034 0133     	 adds r3,r3,#1
 11205 0036 DAB2     	 uxtb r2,r3
 11206 0038 0A4B     	 ldr r3,.L425
 11207 003a 1A70     	 strb r2,[r3]
2514:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 11208              	 .loc 3 2514 0
 11209 003c 094B     	 ldr r3,.L425
 11210 003e 1B78     	 ldrb r3,[r3]
 11211 0040 022B     	 cmp r3,#2
 11212 0042 02D8     	 bhi .L423
2515:../4g_module/mdm_handler.c **** 		{
2516:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 11213              	 .loc 3 2516 0
 11214 0044 0423     	 movs r3,#4
 11215 0046 FB73     	 strb r3,[r7,#15]
 11216 0048 06E0     	 b .L422
 11217              	.L423:
2517:../4g_module/mdm_handler.c **** 		}
2518:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 11218              	 .loc 3 2518 0
 11219 004a 064B     	 ldr r3,.L425
 11220 004c 1B78     	 ldrb r3,[r3]
 11221 004e 032B     	 cmp r3,#3
 11222 0050 02D9     	 bls .L422
2519:../4g_module/mdm_handler.c **** 		{
2520:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 11223              	 .loc 3 2520 0
 11224 0052 044B     	 ldr r3,.L425
 11225 0054 0022     	 movs r2,#0
 11226 0056 1A70     	 strb r2,[r3]
 11227              	.L422:
2521:../4g_module/mdm_handler.c **** 		}
2522:../4g_module/mdm_handler.c **** 	}
2523:../4g_module/mdm_handler.c **** 
2524:../4g_module/mdm_handler.c **** 	return len_retStatus;
 11228              	 .loc 3 2524 0
 11229 0058 FB7B     	 ldrb r3,[r7,#15]
2525:../4g_module/mdm_handler.c **** }
 11230              	 .loc 3 2525 0
 11231 005a 1846     	 mov r0,r3
 11232 005c 1037     	 adds r7,r7,#16
 11233              	.LCFI219:
 11234              	 .cfi_def_cfa_offset 8
 11235 005e BD46     	 mov sp,r7
 11236              	.LCFI220:
 11237              	 .cfi_def_cfa_register 13
 11238              	 
 11239 0060 80BD     	 pop {r7,pc}
 11240              	.L426:
 11241 0062 00BF     	 .align 2
 11242              	.L425:
 11243 0064 00000000 	 .word lsu8_retryCnt.15007
 11244              	 .cfi_endproc
 11245              	.LFE644:
 11247              	 .section .rodata
 11248 0141 000000   	 .align 2
 11249              	.LC33:
 11250 0144 25732C25 	 .ascii "%s,%d,60,1\015\012\000"
 11250      642C3630 
 11250      2C310D0A 
 11250      00
 11251 0151 000000   	 .align 2
 11252              	.LC34:
 11253 0154 22636163 	 .ascii "\"cacert.pem\"\000"
 11253      6572742E 
 11253      70656D22 
 11253      00
 11254 0161 000000   	 .align 2
 11255              	.LC35:
 11256 0164 22636C69 	 .ascii "\"clientcert.pem\"\000"
 11256      656E7463 
 11256      6572742E 
 11256      70656D22 
 11256      00
 11257 0175 000000   	 .align 2
 11258              	.LC36:
 11259 0178 22636C69 	 .ascii "\"clientkey.pem\"\000"
 11259      656E746B 
 11259      65792E70 
 11259      656D2200 
 11260              	 .section .text.mod_mqttSslCertUpload,"ax",%progbits
 11261              	 .align 2
 11262              	 .thumb
 11263              	 .thumb_func
 11265              	mod_mqttSslCertUpload:
 11266              	.LFB645:
2526:../4g_module/mdm_handler.c **** 
2527:../4g_module/mdm_handler.c **** /**************************************************************************
2528:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttSslCertUpload
2529:../4g_module/mdm_handler.c ****  *
2530:../4g_module/mdm_handler.c ****  * Description   	:	This function uploads SSL certificates
2531:../4g_module/mdm_handler.c ****  *
2532:../4g_module/mdm_handler.c ****  * Arguments     	:	en_sslFile_t - SSL files
2533:../4g_module/mdm_handler.c ****  *
2534:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2535:../4g_module/mdm_handler.c ****  *
2536:../4g_module/mdm_handler.c ****  ****************************************************************************/
2537:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttSslCertUpload(en_sslFile_t len_sslFile)
2538:../4g_module/mdm_handler.c **** {
 11267              	 .loc 3 2538 0
 11268              	 .cfi_startproc
 11269              	 
 11270              	 
 11271 0000 90B5     	 push {r4,r7,lr}
 11272              	.LCFI221:
 11273              	 .cfi_def_cfa_offset 12
 11274              	 .cfi_offset 4,-12
 11275              	 .cfi_offset 7,-8
 11276              	 .cfi_offset 14,-4
 11277 0002 93B0     	 sub sp,sp,#76
 11278              	.LCFI222:
 11279              	 .cfi_def_cfa_offset 88
 11280 0004 00AF     	 add r7,sp,#0
 11281              	.LCFI223:
 11282              	 .cfi_def_cfa_register 7
 11283 0006 0346     	 mov r3,r0
 11284 0008 FB71     	 strb r3,[r7,#7]
2539:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 11285              	 .loc 3 2539 0
 11286 000a 0423     	 movs r3,#4
 11287 000c 87F84730 	 strb r3,[r7,#71]
2540:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2541:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[50] = { 0 };
 11288              	 .loc 3 2541 0
 11289 0010 07F10803 	 add r3,r7,#8
 11290 0014 0022     	 movs r2,#0
 11291 0016 1A60     	 str r2,[r3]
 11292 0018 0433     	 adds r3,r3,#4
 11293 001a 0022     	 movs r2,#0
 11294 001c 1A60     	 str r2,[r3]
 11295 001e 0433     	 adds r3,r3,#4
 11296 0020 0022     	 movs r2,#0
 11297 0022 1A60     	 str r2,[r3]
 11298 0024 0433     	 adds r3,r3,#4
 11299 0026 0022     	 movs r2,#0
 11300 0028 1A60     	 str r2,[r3]
 11301 002a 0433     	 adds r3,r3,#4
 11302 002c 0022     	 movs r2,#0
 11303 002e 1A60     	 str r2,[r3]
 11304 0030 0433     	 adds r3,r3,#4
 11305 0032 0022     	 movs r2,#0
 11306 0034 1A60     	 str r2,[r3]
 11307 0036 0433     	 adds r3,r3,#4
 11308 0038 0022     	 movs r2,#0
 11309 003a 1A60     	 str r2,[r3]
 11310 003c 0433     	 adds r3,r3,#4
 11311 003e 0022     	 movs r2,#0
 11312 0040 1A60     	 str r2,[r3]
 11313 0042 0433     	 adds r3,r3,#4
 11314 0044 0022     	 movs r2,#0
 11315 0046 1A60     	 str r2,[r3]
 11316 0048 0433     	 adds r3,r3,#4
 11317 004a 0022     	 movs r2,#0
 11318 004c 1A60     	 str r2,[r3]
 11319 004e 0433     	 adds r3,r3,#4
 11320 0050 0022     	 movs r2,#0
 11321 0052 1A60     	 str r2,[r3]
 11322 0054 0433     	 adds r3,r3,#4
 11323 0056 0022     	 movs r2,#0
 11324 0058 1A60     	 str r2,[r3]
 11325 005a 0433     	 adds r3,r3,#4
 11326 005c 0022     	 movs r2,#0
 11327 005e 1A80     	 strh r2,[r3]
 11328 0060 0233     	 adds r3,r3,#2
2542:../4g_module/mdm_handler.c **** 	static uint8_t *slu32_pos = NULL;
2543:../4g_module/mdm_handler.c **** 	static uint16_t lu16_totalFileSize = 0;
2544:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 11329              	 .loc 3 2544 0
 11330 0062 0023     	 movs r3,#0
 11331 0064 3B64     	 str r3,[r7,#64]
2545:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_saveptr = NULL;
 11332              	 .loc 3 2545 0
 11333 0066 0023     	 movs r3,#0
 11334 0068 FB63     	 str r3,[r7,#60]
2546:../4g_module/mdm_handler.c **** 
2547:../4g_module/mdm_handler.c **** 	switch (sen_sslFileUpldState)
 11335              	 .loc 3 2547 0
 11336 006a 774B     	 ldr r3,.L448
 11337 006c 1B78     	 ldrb r3,[r3]
 11338 006e 002B     	 cmp r3,#0
 11339 0070 03D0     	 beq .L429
 11340 0072 012B     	 cmp r3,#1
 11341 0074 00F08D80 	 beq .L430
2548:../4g_module/mdm_handler.c **** 	{
2549:../4g_module/mdm_handler.c **** 		case E_SSL_UPLD_CMD_STATE:
2550:../4g_module/mdm_handler.c **** 
2551:../4g_module/mdm_handler.c **** 			if(E_CA_CERT_FILE == len_sslFile)
2552:../4g_module/mdm_handler.c **** 			{
2553:../4g_module/mdm_handler.c **** 				slu32_pos = sgu8arr_caCert;
2554:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_caCert);
2555:../4g_module/mdm_handler.c **** 				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
2556:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
2557:../4g_module/mdm_handler.c **** 			}
2558:../4g_module/mdm_handler.c **** 			else if(E_CC_CERT_FILE == len_sslFile)
2559:../4g_module/mdm_handler.c **** 			{
2560:../4g_module/mdm_handler.c **** 				slu32_pos = sgu8arr_ccCert;
2561:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
2562:../4g_module/mdm_handler.c **** 
2563:../4g_module/mdm_handler.c **** 				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CC_FILENAME,
2564:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
2565:../4g_module/mdm_handler.c **** 			}
2566:../4g_module/mdm_handler.c **** 			else if(E_CK_CERT_FILE == len_sslFile)
2567:../4g_module/mdm_handler.c **** 			{
2568:../4g_module/mdm_handler.c **** 				slu32_pos = sgu8arr_ckCert;
2569:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
2570:../4g_module/mdm_handler.c **** 
2571:../4g_module/mdm_handler.c **** 				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CK_FILENAME,
2572:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
2573:../4g_module/mdm_handler.c **** 			}
2574:../4g_module/mdm_handler.c **** 
2575:../4g_module/mdm_handler.c **** 			len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_UPLOAD_CMD,
2576:../4g_module/mdm_handler.c **** 					(uint8_t *) lu8arr_param);
2577:../4g_module/mdm_handler.c **** 
2578:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
2579:../4g_module/mdm_handler.c **** 			{
2580:../4g_module/mdm_handler.c **** 				lu8p_Ptr =
2581:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2582:../4g_module/mdm_handler.c **** 								(const char *) gcst_ATCmdTable[E_IDX_FILE_UPLOAD_CMD].mu8arr_respString);
2583:../4g_module/mdm_handler.c **** 
2584:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_Ptr)
2585:../4g_module/mdm_handler.c **** 				{
2586:../4g_module/mdm_handler.c **** 					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
2587:../4g_module/mdm_handler.c **** 							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));
2588:../4g_module/mdm_handler.c **** 
2589:../4g_module/mdm_handler.c **** 					if (lu16_totalFileSize > 1024)
2590:../4g_module/mdm_handler.c **** 					{
2591:../4g_module/mdm_handler.c **** 						strncpy(
2592:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
2593:../4g_module/mdm_handler.c **** 								(char *) slu32_pos, 1024);
2594:../4g_module/mdm_handler.c **** //						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[1024] = '\0';
2595:../4g_module/mdm_handler.c **** 					}
2596:../4g_module/mdm_handler.c **** 					else
2597:../4g_module/mdm_handler.c **** 					{
2598:../4g_module/mdm_handler.c **** 						strncpy(
2599:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
2600:../4g_module/mdm_handler.c **** 								(char *) slu32_pos, sizeof(sgu8arr_caCert));
2601:../4g_module/mdm_handler.c **** //						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[sizeof(sgu8arr_caCert)+1] = '\0
2602:../4g_module/mdm_handler.c **** 					}
2603:../4g_module/mdm_handler.c **** 
2604:../4g_module/mdm_handler.c **** 					sen_sslFileUpldState = E_SSL_UPLD_FILE_CONTENT_STATE;
2605:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
2606:../4g_module/mdm_handler.c **** 				}
2607:../4g_module/mdm_handler.c **** 				else
2608:../4g_module/mdm_handler.c **** 				{
2609:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
2610:../4g_module/mdm_handler.c **** 				}
2611:../4g_module/mdm_handler.c **** 			}
2612:../4g_module/mdm_handler.c **** 			else if(E_RET_CME_ERROR == len_retStatus)
2613:../4g_module/mdm_handler.c **** 			{
2614:../4g_module/mdm_handler.c **** 				if(407 == sgu16_cmeError)	//File already exists
2615:../4g_module/mdm_handler.c **** 				{
2616:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
2617:../4g_module/mdm_handler.c **** 				}
2618:../4g_module/mdm_handler.c **** 				if(421 == len_retStatus)	//Time out
2619:../4g_module/mdm_handler.c **** 				{
2620:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
2621:../4g_module/mdm_handler.c **** 				}
2622:../4g_module/mdm_handler.c **** 			}
2623:../4g_module/mdm_handler.c **** 		break;
2624:../4g_module/mdm_handler.c **** 
2625:../4g_module/mdm_handler.c **** 		case E_SSL_UPLD_FILE_CONTENT_STATE:
2626:../4g_module/mdm_handler.c **** 			len_retStatus = mod_sendCmdGetRsp(E_IDX_UPLOAD_FILE_CONTENT, NULL);
2627:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
2628:../4g_module/mdm_handler.c **** 			{
2629:../4g_module/mdm_handler.c **** 				lu8p_Ptr =
2630:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2631:../4g_module/mdm_handler.c **** 								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_otherRspString);
2632:../4g_module/mdm_handler.c **** 
2633:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_Ptr)
2634:../4g_module/mdm_handler.c **** 				{
2635:../4g_module/mdm_handler.c **** 					lu16_totalFileSize -= 1024;
2636:../4g_module/mdm_handler.c **** 					slu32_pos += 1024;
2637:../4g_module/mdm_handler.c **** 
2638:../4g_module/mdm_handler.c **** 					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
2639:../4g_module/mdm_handler.c **** 							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));
2640:../4g_module/mdm_handler.c **** 
2641:../4g_module/mdm_handler.c **** 					if(lu16_totalFileSize > 1024)
2642:../4g_module/mdm_handler.c **** 					{
2643:../4g_module/mdm_handler.c **** 						strncpy(
2644:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
2645:../4g_module/mdm_handler.c **** 								(char *) slu32_pos, 1024);
2646:../4g_module/mdm_handler.c **** 					}
2647:../4g_module/mdm_handler.c **** 					else
2648:../4g_module/mdm_handler.c **** 					{
2649:../4g_module/mdm_handler.c **** 						strncpy(
2650:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
2651:../4g_module/mdm_handler.c **** 								(char *) slu32_pos, lu16_totalFileSize);
2652:../4g_module/mdm_handler.c **** 					}
2653:../4g_module/mdm_handler.c **** 					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
2654:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
2655:../4g_module/mdm_handler.c **** 				}
2656:../4g_module/mdm_handler.c **** 
2657:../4g_module/mdm_handler.c **** 				lu8p_Ptr =
2658:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
2659:../4g_module/mdm_handler.c **** 								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_respString);
2660:../4g_module/mdm_handler.c **** 
2661:../4g_module/mdm_handler.c **** 				if (NULL != lu8p_Ptr)
2662:../4g_module/mdm_handler.c **** 				{
2663:../4g_module/mdm_handler.c **** 					sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
2664:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
2665:../4g_module/mdm_handler.c **** 				}
2666:../4g_module/mdm_handler.c **** 			}
2667:../4g_module/mdm_handler.c **** 		break;
2668:../4g_module/mdm_handler.c **** 
2669:../4g_module/mdm_handler.c **** 		default:
2670:../4g_module/mdm_handler.c **** 		break;
 11342              	 .loc 3 2670 0
 11343 0078 E0E0     	 b .L441
 11344              	.L429:
2551:../4g_module/mdm_handler.c **** 			{
 11345              	 .loc 3 2551 0
 11346 007a FB79     	 ldrb r3,[r7,#7]
 11347 007c 002B     	 cmp r3,#0
 11348 007e 12D1     	 bne .L431
2553:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_caCert);
 11349              	 .loc 3 2553 0
 11350 0080 724B     	 ldr r3,.L448+4
 11351 0082 734A     	 ldr r2,.L448+8
 11352 0084 1A60     	 str r2,[r3]
2554:../4g_module/mdm_handler.c **** 				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
 11353              	 .loc 3 2554 0
 11354 0086 734B     	 ldr r3,.L448+12
 11355 0088 40F2A342 	 movw r2,#1187
 11356 008c 1A80     	 strh r2,[r3]
2555:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
 11357              	 .loc 3 2555 0
 11358 008e 714B     	 ldr r3,.L448+12
 11359 0090 1B88     	 ldrh r3,[r3]
 11360 0092 1C46     	 mov r4,r3
 11361 0094 07F10803 	 add r3,r7,#8
 11362 0098 1846     	 mov r0,r3
 11363 009a 6F49     	 ldr r1,.L448+16
 11364 009c 6F4A     	 ldr r2,.L448+20
 11365 009e 2346     	 mov r3,r4
 11366 00a0 FFF7FEFF 	 bl sprintf
 11367 00a4 2AE0     	 b .L432
 11368              	.L431:
2558:../4g_module/mdm_handler.c **** 			{
 11369              	 .loc 3 2558 0
 11370 00a6 FB79     	 ldrb r3,[r7,#7]
 11371 00a8 012B     	 cmp r3,#1
 11372 00aa 12D1     	 bne .L433
2560:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
 11373              	 .loc 3 2560 0
 11374 00ac 674B     	 ldr r3,.L448+4
 11375 00ae 6C4A     	 ldr r2,.L448+24
 11376 00b0 1A60     	 str r2,[r3]
2561:../4g_module/mdm_handler.c **** 
 11377              	 .loc 3 2561 0
 11378 00b2 684B     	 ldr r3,.L448+12
 11379 00b4 40F2C442 	 movw r2,#1220
 11380 00b8 1A80     	 strh r2,[r3]
2563:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
 11381              	 .loc 3 2563 0
 11382 00ba 664B     	 ldr r3,.L448+12
 11383 00bc 1B88     	 ldrh r3,[r3]
 11384 00be 1C46     	 mov r4,r3
 11385 00c0 07F10803 	 add r3,r7,#8
 11386 00c4 1846     	 mov r0,r3
 11387 00c6 6449     	 ldr r1,.L448+16
 11388 00c8 664A     	 ldr r2,.L448+28
 11389 00ca 2346     	 mov r3,r4
 11390 00cc FFF7FEFF 	 bl sprintf
 11391 00d0 14E0     	 b .L432
 11392              	.L433:
2566:../4g_module/mdm_handler.c **** 			{
 11393              	 .loc 3 2566 0
 11394 00d2 FB79     	 ldrb r3,[r7,#7]
 11395 00d4 022B     	 cmp r3,#2
 11396 00d6 11D1     	 bne .L432
2568:../4g_module/mdm_handler.c **** 				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
 11397              	 .loc 3 2568 0
 11398 00d8 5C4B     	 ldr r3,.L448+4
 11399 00da 634A     	 ldr r2,.L448+32
 11400 00dc 1A60     	 str r2,[r3]
2569:../4g_module/mdm_handler.c **** 
 11401              	 .loc 3 2569 0
 11402 00de 5D4B     	 ldr r3,.L448+12
 11403 00e0 40F28B62 	 movw r2,#1675
 11404 00e4 1A80     	 strh r2,[r3]
2571:../4g_module/mdm_handler.c **** 						lu16_totalFileSize);
 11405              	 .loc 3 2571 0
 11406 00e6 5B4B     	 ldr r3,.L448+12
 11407 00e8 1B88     	 ldrh r3,[r3]
 11408 00ea 1C46     	 mov r4,r3
 11409 00ec 07F10803 	 add r3,r7,#8
 11410 00f0 1846     	 mov r0,r3
 11411 00f2 5949     	 ldr r1,.L448+16
 11412 00f4 5D4A     	 ldr r2,.L448+36
 11413 00f6 2346     	 mov r3,r4
 11414 00f8 FFF7FEFF 	 bl sprintf
 11415              	.L432:
2575:../4g_module/mdm_handler.c **** 					(uint8_t *) lu8arr_param);
 11416              	 .loc 3 2575 0
 11417 00fc 07F10803 	 add r3,r7,#8
 11418 0100 1A20     	 movs r0,#26
 11419 0102 1946     	 mov r1,r3
 11420 0104 FFF7FEFF 	 bl mod_sendCmdGetRsp
 11421 0108 0346     	 mov r3,r0
 11422 010a 87F84730 	 strb r3,[r7,#71]
2578:../4g_module/mdm_handler.c **** 			{
 11423              	 .loc 3 2578 0
 11424 010e 97F84730 	 ldrb r3,[r7,#71]
 11425 0112 002B     	 cmp r3,#0
 11426 0114 2ED1     	 bne .L434
2580:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
 11427              	 .loc 3 2580 0
 11428 0116 5648     	 ldr r0,.L448+40
 11429 0118 5649     	 ldr r1,.L448+44
 11430 011a FFF7FEFF 	 bl strstr
 11431 011e 3864     	 str r0,[r7,#64]
2584:../4g_module/mdm_handler.c **** 				{
 11432              	 .loc 3 2584 0
 11433 0120 3B6C     	 ldr r3,[r7,#64]
 11434 0122 002B     	 cmp r3,#0
 11435 0124 22D0     	 beq .L435
2586:../4g_module/mdm_handler.c **** 							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));
 11436              	 .loc 3 2586 0
 11437 0126 5448     	 ldr r0,.L448+48
 11438 0128 0021     	 movs r1,#0
 11439 012a 4FF48162 	 mov r2,#1032
 11440 012e FFF7FEFF 	 bl memset
2589:../4g_module/mdm_handler.c **** 					{
 11441              	 .loc 3 2589 0
 11442 0132 484B     	 ldr r3,.L448+12
 11443 0134 1B88     	 ldrh r3,[r3]
 11444 0136 B3F5806F 	 cmp r3,#1024
 11445 013a 08D9     	 bls .L436
2591:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
 11446              	 .loc 3 2591 0
 11447 013c 434B     	 ldr r3,.L448+4
 11448 013e 1B68     	 ldr r3,[r3]
 11449 0140 4D48     	 ldr r0,.L448+48
 11450 0142 1946     	 mov r1,r3
 11451 0144 4FF48062 	 mov r2,#1024
 11452 0148 FFF7FEFF 	 bl strncpy
 11453 014c 07E0     	 b .L437
 11454              	.L436:
2598:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
 11455              	 .loc 3 2598 0
 11456 014e 3F4B     	 ldr r3,.L448+4
 11457 0150 1B68     	 ldr r3,[r3]
 11458 0152 4948     	 ldr r0,.L448+48
 11459 0154 1946     	 mov r1,r3
 11460 0156 40F2A342 	 movw r2,#1187
 11461 015a FFF7FEFF 	 bl strncpy
 11462              	.L437:
2604:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
 11463              	 .loc 3 2604 0
 11464 015e 3A4B     	 ldr r3,.L448
 11465 0160 0122     	 movs r2,#1
 11466 0162 1A70     	 strb r2,[r3]
2605:../4g_module/mdm_handler.c **** 				}
 11467              	 .loc 3 2605 0
 11468 0164 0423     	 movs r3,#4
 11469 0166 87F84730 	 strb r3,[r7,#71]
 11470 016a 11E0     	 b .L439
 11471              	.L435:
2609:../4g_module/mdm_handler.c **** 				}
 11472              	 .loc 3 2609 0
 11473 016c 0223     	 movs r3,#2
 11474 016e 87F84730 	 strb r3,[r7,#71]
2623:../4g_module/mdm_handler.c **** 
 11475              	 .loc 3 2623 0
 11476 0172 63E0     	 b .L441
 11477              	.L434:
2612:../4g_module/mdm_handler.c **** 			{
 11478              	 .loc 3 2612 0
 11479 0174 97F84730 	 ldrb r3,[r7,#71]
 11480 0178 0B2B     	 cmp r3,#11
 11481 017a 09D1     	 bne .L439
2614:../4g_module/mdm_handler.c **** 				{
 11482              	 .loc 3 2614 0
 11483 017c 3F4B     	 ldr r3,.L448+52
 11484 017e 1B88     	 ldrh r3,[r3]
 11485 0180 40F29712 	 movw r2,#407
 11486 0184 9342     	 cmp r3,r2
 11487 0186 03D1     	 bne .L439
2616:../4g_module/mdm_handler.c **** 				}
 11488              	 .loc 3 2616 0
 11489 0188 0023     	 movs r3,#0
 11490 018a 87F84730 	 strb r3,[r7,#71]
2623:../4g_module/mdm_handler.c **** 
 11491              	 .loc 3 2623 0
 11492 018e 55E0     	 b .L441
 11493              	.L439:
2623:../4g_module/mdm_handler.c **** 
 11494              	 .loc 3 2623 0 is_stmt 0 discriminator 1
 11495 0190 54E0     	 b .L441
 11496              	.L430:
2626:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 11497              	 .loc 3 2626 0 is_stmt 1
 11498 0192 1B20     	 movs r0,#27
 11499 0194 0021     	 movs r1,#0
 11500 0196 FFF7FEFF 	 bl mod_sendCmdGetRsp
 11501 019a 0346     	 mov r3,r0
 11502 019c 87F84730 	 strb r3,[r7,#71]
2627:../4g_module/mdm_handler.c **** 			{
 11503              	 .loc 3 2627 0
 11504 01a0 97F84730 	 ldrb r3,[r7,#71]
 11505 01a4 002B     	 cmp r3,#0
 11506 01a6 48D1     	 bne .L442
2629:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
 11507              	 .loc 3 2629 0
 11508 01a8 3148     	 ldr r0,.L448+40
 11509 01aa 3549     	 ldr r1,.L448+56
 11510 01ac FFF7FEFF 	 bl strstr
 11511 01b0 3864     	 str r0,[r7,#64]
2633:../4g_module/mdm_handler.c **** 				{
 11512              	 .loc 3 2633 0
 11513 01b2 3B6C     	 ldr r3,[r7,#64]
 11514 01b4 002B     	 cmp r3,#0
 11515 01b6 31D0     	 beq .L443
2635:../4g_module/mdm_handler.c **** 					slu32_pos += 1024;
 11516              	 .loc 3 2635 0
 11517 01b8 264B     	 ldr r3,.L448+12
 11518 01ba 1B88     	 ldrh r3,[r3]
 11519 01bc A3F58063 	 sub r3,r3,#1024
 11520 01c0 9AB2     	 uxth r2,r3
 11521 01c2 244B     	 ldr r3,.L448+12
 11522 01c4 1A80     	 strh r2,[r3]
2636:../4g_module/mdm_handler.c **** 
 11523              	 .loc 3 2636 0
 11524 01c6 214B     	 ldr r3,.L448+4
 11525 01c8 1B68     	 ldr r3,[r3]
 11526 01ca 03F58063 	 add r3,r3,#1024
 11527 01ce 1F4A     	 ldr r2,.L448+4
 11528 01d0 1360     	 str r3,[r2]
2638:../4g_module/mdm_handler.c **** 							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));
 11529              	 .loc 3 2638 0
 11530 01d2 2948     	 ldr r0,.L448+48
 11531 01d4 0021     	 movs r1,#0
 11532 01d6 4FF48162 	 mov r2,#1032
 11533 01da FFF7FEFF 	 bl memset
2641:../4g_module/mdm_handler.c **** 					{
 11534              	 .loc 3 2641 0
 11535 01de 1D4B     	 ldr r3,.L448+12
 11536 01e0 1B88     	 ldrh r3,[r3]
 11537 01e2 B3F5806F 	 cmp r3,#1024
 11538 01e6 08D9     	 bls .L444
2643:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
 11539              	 .loc 3 2643 0
 11540 01e8 184B     	 ldr r3,.L448+4
 11541 01ea 1B68     	 ldr r3,[r3]
 11542 01ec 2248     	 ldr r0,.L448+48
 11543 01ee 1946     	 mov r1,r3
 11544 01f0 4FF48062 	 mov r2,#1024
 11545 01f4 FFF7FEFF 	 bl strncpy
 11546 01f8 08E0     	 b .L445
 11547              	.L444:
2649:../4g_module/mdm_handler.c **** 								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
 11548              	 .loc 3 2649 0
 11549 01fa 144B     	 ldr r3,.L448+4
 11550 01fc 1A68     	 ldr r2,[r3]
 11551 01fe 154B     	 ldr r3,.L448+12
 11552 0200 1B88     	 ldrh r3,[r3]
 11553 0202 1D48     	 ldr r0,.L448+48
 11554 0204 1146     	 mov r1,r2
 11555 0206 1A46     	 mov r2,r3
 11556 0208 FFF7FEFF 	 bl strncpy
 11557              	.L445:
2653:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_INPROGRESS;
 11558              	 .loc 3 2653 0
 11559 020c 1848     	 ldr r0,.L448+40
 11560 020e 0021     	 movs r1,#0
 11561 0210 4022     	 movs r2,#64
 11562 0212 FFF7FEFF 	 bl memset
2654:../4g_module/mdm_handler.c **** 				}
 11563              	 .loc 3 2654 0
 11564 0216 0423     	 movs r3,#4
 11565 0218 87F84730 	 strb r3,[r7,#71]
 11566              	.L443:
2657:../4g_module/mdm_handler.c **** 						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
 11567              	 .loc 3 2657 0
 11568 021c 1448     	 ldr r0,.L448+40
 11569 021e 1949     	 ldr r1,.L448+60
 11570 0220 FFF7FEFF 	 bl strstr
 11571 0224 3864     	 str r0,[r7,#64]
2661:../4g_module/mdm_handler.c **** 				{
 11572              	 .loc 3 2661 0
 11573 0226 3B6C     	 ldr r3,[r7,#64]
 11574 0228 002B     	 cmp r3,#0
 11575 022a 06D0     	 beq .L442
2663:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_SUCCESS;
 11576              	 .loc 3 2663 0
 11577 022c 064B     	 ldr r3,.L448
 11578 022e 0022     	 movs r2,#0
 11579 0230 1A70     	 strb r2,[r3]
2664:../4g_module/mdm_handler.c **** 				}
 11580              	 .loc 3 2664 0
 11581 0232 0023     	 movs r3,#0
 11582 0234 87F84730 	 strb r3,[r7,#71]
2667:../4g_module/mdm_handler.c **** 
 11583              	 .loc 3 2667 0
 11584 0238 FFE7     	 b .L447
 11585              	.L442:
 11586              	.L447:
 11587 023a 00BF     	 nop
 11588              	.L441:
2671:../4g_module/mdm_handler.c **** 	}
2672:../4g_module/mdm_handler.c **** 
2673:../4g_module/mdm_handler.c **** 	return len_retStatus;
 11589              	 .loc 3 2673 0
 11590 023c 97F84730 	 ldrb r3,[r7,#71]
2674:../4g_module/mdm_handler.c **** }
 11591              	 .loc 3 2674 0
 11592 0240 1846     	 mov r0,r3
 11593 0242 4C37     	 adds r7,r7,#76
 11594              	.LCFI224:
 11595              	 .cfi_def_cfa_offset 12
 11596 0244 BD46     	 mov sp,r7
 11597              	.LCFI225:
 11598              	 .cfi_def_cfa_register 13
 11599              	 
 11600 0246 90BD     	 pop {r4,r7,pc}
 11601              	.L449:
 11602              	 .align 2
 11603              	.L448:
 11604 0248 00000000 	 .word sen_sslFileUpldState
 11605 024c 00000000 	 .word slu32_pos.15014
 11606 0250 00000000 	 .word sgu8arr_caCert
 11607 0254 00000000 	 .word lu16_totalFileSize.15015
 11608 0258 44010000 	 .word .LC33
 11609 025c 54010000 	 .word .LC34
 11610 0260 00000000 	 .word sgu8arr_ccCert
 11611 0264 64010000 	 .word .LC35
 11612 0268 00000000 	 .word sgu8arr_ckCert
 11613 026c 78010000 	 .word .LC36
 11614 0270 00000000 	 .word gu8arr_respBuffer
 11615 0274 B07C0000 	 .word gcst_ATCmdTable+31920
 11616 0278 4C7D0000 	 .word gcst_ATCmdTable+32076
 11617 027c 00000000 	 .word sgu16_cmeError
 11618 0280 86810000 	 .word gcst_ATCmdTable+33158
 11619 0284 54810000 	 .word gcst_ATCmdTable+33108
 11620              	 .cfi_endproc
 11621              	.LFE645:
 11623              	 .section .rodata
 11624              	 .align 2
 11625              	.LC37:
 11626 0188 25730D0A 	 .ascii "%s\015\012\000"
 11626      00
 11627              	 .section .text.mod_mqttSslCertDelete,"ax",%progbits
 11628              	 .align 2
 11629              	 .thumb
 11630              	 .thumb_func
 11632              	mod_mqttSslCertDelete:
 11633              	.LFB646:
2675:../4g_module/mdm_handler.c **** 
2676:../4g_module/mdm_handler.c **** /**************************************************************************
2677:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttSslCertDelete
2678:../4g_module/mdm_handler.c ****  *
2679:../4g_module/mdm_handler.c ****  * Description   	:	This function deletes SSL certificates
2680:../4g_module/mdm_handler.c ****  *
2681:../4g_module/mdm_handler.c ****  * Arguments     	:	uint8_t *
2682:../4g_module/mdm_handler.c ****  *
2683:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2684:../4g_module/mdm_handler.c ****  *
2685:../4g_module/mdm_handler.c ****  ****************************************************************************/
2686:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttSslCertDelete(en_sslFile_t len_sslFile)
2687:../4g_module/mdm_handler.c **** {
 11634              	 .loc 3 2687 0
 11635              	 .cfi_startproc
 11636              	 
 11637              	 
 11638 0000 80B5     	 push {r7,lr}
 11639              	.LCFI226:
 11640              	 .cfi_def_cfa_offset 8
 11641              	 .cfi_offset 7,-8
 11642              	 .cfi_offset 14,-4
 11643 0002 90B0     	 sub sp,sp,#64
 11644              	.LCFI227:
 11645              	 .cfi_def_cfa_offset 72
 11646 0004 00AF     	 add r7,sp,#0
 11647              	.LCFI228:
 11648              	 .cfi_def_cfa_register 7
 11649 0006 0346     	 mov r3,r0
 11650 0008 FB71     	 strb r3,[r7,#7]
2688:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 11651              	 .loc 3 2688 0
 11652 000a 0423     	 movs r3,#4
 11653 000c 87F83F30 	 strb r3,[r7,#63]
2689:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[50] = { 0 };
 11654              	 .loc 3 2689 0
 11655 0010 07F10C03 	 add r3,r7,#12
 11656 0014 0022     	 movs r2,#0
 11657 0016 1A60     	 str r2,[r3]
 11658 0018 0433     	 adds r3,r3,#4
 11659 001a 0022     	 movs r2,#0
 11660 001c 1A60     	 str r2,[r3]
 11661 001e 0433     	 adds r3,r3,#4
 11662 0020 0022     	 movs r2,#0
 11663 0022 1A60     	 str r2,[r3]
 11664 0024 0433     	 adds r3,r3,#4
 11665 0026 0022     	 movs r2,#0
 11666 0028 1A60     	 str r2,[r3]
 11667 002a 0433     	 adds r3,r3,#4
 11668 002c 0022     	 movs r2,#0
 11669 002e 1A60     	 str r2,[r3]
 11670 0030 0433     	 adds r3,r3,#4
 11671 0032 0022     	 movs r2,#0
 11672 0034 1A60     	 str r2,[r3]
 11673 0036 0433     	 adds r3,r3,#4
 11674 0038 0022     	 movs r2,#0
 11675 003a 1A60     	 str r2,[r3]
 11676 003c 0433     	 adds r3,r3,#4
 11677 003e 0022     	 movs r2,#0
 11678 0040 1A60     	 str r2,[r3]
 11679 0042 0433     	 adds r3,r3,#4
 11680 0044 0022     	 movs r2,#0
 11681 0046 1A60     	 str r2,[r3]
 11682 0048 0433     	 adds r3,r3,#4
 11683 004a 0022     	 movs r2,#0
 11684 004c 1A60     	 str r2,[r3]
 11685 004e 0433     	 adds r3,r3,#4
 11686 0050 0022     	 movs r2,#0
 11687 0052 1A60     	 str r2,[r3]
 11688 0054 0433     	 adds r3,r3,#4
 11689 0056 0022     	 movs r2,#0
 11690 0058 1A60     	 str r2,[r3]
 11691 005a 0433     	 adds r3,r3,#4
 11692 005c 0022     	 movs r2,#0
 11693 005e 1A80     	 strh r2,[r3]
 11694 0060 0233     	 adds r3,r3,#2
2690:../4g_module/mdm_handler.c **** 
2691:../4g_module/mdm_handler.c **** 	if (E_CA_CERT_FILE == len_sslFile)
 11695              	 .loc 3 2691 0
 11696 0062 FB79     	 ldrb r3,[r7,#7]
 11697 0064 002B     	 cmp r3,#0
 11698 0066 07D1     	 bne .L451
2692:../4g_module/mdm_handler.c **** 	{
2693:../4g_module/mdm_handler.c **** 		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CA_FILENAME);
 11699              	 .loc 3 2693 0
 11700 0068 07F10C03 	 add r3,r7,#12
 11701 006c 1846     	 mov r0,r3
 11702 006e 1C49     	 ldr r1,.L457
 11703 0070 1C4A     	 ldr r2,.L457+4
 11704 0072 FFF7FEFF 	 bl sprintf
 11705 0076 14E0     	 b .L452
 11706              	.L451:
2694:../4g_module/mdm_handler.c **** 	}
2695:../4g_module/mdm_handler.c **** 	else if (E_CC_CERT_FILE == len_sslFile)
 11707              	 .loc 3 2695 0
 11708 0078 FB79     	 ldrb r3,[r7,#7]
 11709 007a 012B     	 cmp r3,#1
 11710 007c 07D1     	 bne .L453
2696:../4g_module/mdm_handler.c **** 	{
2697:../4g_module/mdm_handler.c **** 		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CC_FILENAME);
 11711              	 .loc 3 2697 0
 11712 007e 07F10C03 	 add r3,r7,#12
 11713 0082 1846     	 mov r0,r3
 11714 0084 1649     	 ldr r1,.L457
 11715 0086 184A     	 ldr r2,.L457+8
 11716 0088 FFF7FEFF 	 bl sprintf
 11717 008c 09E0     	 b .L452
 11718              	.L453:
2698:../4g_module/mdm_handler.c **** 	}
2699:../4g_module/mdm_handler.c **** 	else if (E_CK_CERT_FILE == len_sslFile)
 11719              	 .loc 3 2699 0
 11720 008e FB79     	 ldrb r3,[r7,#7]
 11721 0090 022B     	 cmp r3,#2
 11722 0092 06D1     	 bne .L452
2700:../4g_module/mdm_handler.c **** 	{
2701:../4g_module/mdm_handler.c **** 		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CK_FILENAME);
 11723              	 .loc 3 2701 0
 11724 0094 07F10C03 	 add r3,r7,#12
 11725 0098 1846     	 mov r0,r3
 11726 009a 1149     	 ldr r1,.L457
 11727 009c 134A     	 ldr r2,.L457+12
 11728 009e FFF7FEFF 	 bl sprintf
 11729              	.L452:
2702:../4g_module/mdm_handler.c **** 	}
2703:../4g_module/mdm_handler.c **** 
2704:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_DELETE, (uint8_t *) lu8arr_param);
 11730              	 .loc 3 2704 0
 11731 00a2 07F10C03 	 add r3,r7,#12
 11732 00a6 1C20     	 movs r0,#28
 11733 00a8 1946     	 mov r1,r3
 11734 00aa FFF7FEFF 	 bl mod_sendCmdGetRsp
 11735 00ae 0346     	 mov r3,r0
 11736 00b0 87F83F30 	 strb r3,[r7,#63]
2705:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 11737              	 .loc 3 2705 0
 11738 00b4 97F83F30 	 ldrb r3,[r7,#63]
 11739 00b8 002B     	 cmp r3,#0
 11740 00ba 03D1     	 bne .L454
2706:../4g_module/mdm_handler.c **** 	{
2707:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 11741              	 .loc 3 2707 0
 11742 00bc 0023     	 movs r3,#0
 11743 00be 87F83F30 	 strb r3,[r7,#63]
 11744 00c2 06E0     	 b .L455
 11745              	.L454:
2708:../4g_module/mdm_handler.c **** 	}
2709:../4g_module/mdm_handler.c **** 	else if(E_RET_INPROGRESS != len_retStatus)
 11746              	 .loc 3 2709 0
 11747 00c4 97F83F30 	 ldrb r3,[r7,#63]
 11748 00c8 042B     	 cmp r3,#4
 11749 00ca 02D0     	 beq .L455
2710:../4g_module/mdm_handler.c **** 	{
2711:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_FAILED;
 11750              	 .loc 3 2711 0
 11751 00cc 0223     	 movs r3,#2
 11752 00ce 87F83F30 	 strb r3,[r7,#63]
 11753              	.L455:
2712:../4g_module/mdm_handler.c **** 	}
2713:../4g_module/mdm_handler.c **** 
2714:../4g_module/mdm_handler.c **** 	return len_retStatus;
 11754              	 .loc 3 2714 0
 11755 00d2 97F83F30 	 ldrb r3,[r7,#63]
2715:../4g_module/mdm_handler.c **** }
 11756              	 .loc 3 2715 0
 11757 00d6 1846     	 mov r0,r3
 11758 00d8 4037     	 adds r7,r7,#64
 11759              	.LCFI229:
 11760              	 .cfi_def_cfa_offset 8
 11761 00da BD46     	 mov sp,r7
 11762              	.LCFI230:
 11763              	 .cfi_def_cfa_register 13
 11764              	 
 11765 00dc 80BD     	 pop {r7,pc}
 11766              	.L458:
 11767 00de 00BF     	 .align 2
 11768              	.L457:
 11769 00e0 88010000 	 .word .LC37
 11770 00e4 54010000 	 .word .LC34
 11771 00e8 64010000 	 .word .LC35
 11772 00ec 78010000 	 .word .LC36
 11773              	 .cfi_endproc
 11774              	.LFE646:
 11776              	 .section .rodata
 11777 018d 000000   	 .align 2
 11778              	.LC38:
 11779 0190 25642C25 	 .ascii "%d,%s\000"
 11779      7300
 11780 0196 0000     	 .align 2
 11781              	.LC39:
 11782 0198 22617937 	 .ascii "\"ay7oqexbk25sl-ats.iot.ap-south-1.amazonaws.com\","
 11782      6F716578 
 11782      626B3235 
 11782      736C2D61 
 11782      74732E69 
 11783 01c9 38383833 	 .ascii "8883\015\012\000"
 11783      0D0A00
 11784              	 .section .text.mod_mqttOpen,"ax",%progbits
 11785              	 .align 2
 11786              	 .thumb
 11787              	 .thumb_func
 11789              	mod_mqttOpen:
 11790              	.LFB647:
2716:../4g_module/mdm_handler.c **** /**************************************************************************
2717:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttOpen
2718:../4g_module/mdm_handler.c ****  *
2719:../4g_module/mdm_handler.c ****  * Description   	:	This function MQTT Open
2720:../4g_module/mdm_handler.c ****  *
2721:../4g_module/mdm_handler.c ****  * Arguments     	:	void
2722:../4g_module/mdm_handler.c ****  *
2723:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2724:../4g_module/mdm_handler.c ****  *
2725:../4g_module/mdm_handler.c ****  ****************************************************************************/
2726:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttOpen(void)
2727:../4g_module/mdm_handler.c **** {
 11791              	 .loc 3 2727 0
 11792              	 .cfi_startproc
 11793              	 
 11794              	 
 11795 0000 80B5     	 push {r7,lr}
 11796              	.LCFI231:
 11797              	 .cfi_def_cfa_offset 8
 11798              	 .cfi_offset 7,-8
 11799              	 .cfi_offset 14,-4
 11800 0002 92B0     	 sub sp,sp,#72
 11801              	.LCFI232:
 11802              	 .cfi_def_cfa_offset 80
 11803 0004 00AF     	 add r7,sp,#0
 11804              	.LCFI233:
 11805              	 .cfi_def_cfa_register 7
2728:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 11806              	 .loc 3 2728 0
 11807 0006 0423     	 movs r3,#4
 11808 0008 87F84730 	 strb r3,[r7,#71]
2729:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
2730:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[57] = { 0 };
 11809              	 .loc 3 2730 0
 11810 000c 3B1D     	 adds r3,r7,#4
 11811 000e 3922     	 movs r2,#57
 11812 0010 1846     	 mov r0,r3
 11813 0012 0021     	 movs r1,#0
 11814 0014 FFF7FEFF 	 bl memset
2731:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 11815              	 .loc 3 2731 0
 11816 0018 0023     	 movs r3,#0
 11817 001a 3B64     	 str r3,[r7,#64]
2732:../4g_module/mdm_handler.c **** 	short ls_result = E_MQTT_OPN_NONE;
 11818              	 .loc 3 2732 0
 11819 001c 4FF6FE73 	 movw r3,#65534
 11820 0020 FB87     	 strh r3,[r7,#62]
2733:../4g_module/mdm_handler.c **** 
2734:../4g_module/mdm_handler.c **** //	for(lu8_clientIdx = 0; lu8_clientIdx < 6; lu8_clientIdx++)
2735:../4g_module/mdm_handler.c **** //	{
2736:../4g_module/mdm_handler.c **** 	sprintf((char *) lu8arr_param, "%d,%s", sgu8_mqttClientId, MQTT_OPEN_HOST_PORT);
 11821              	 .loc 3 2736 0
 11822 0022 554B     	 ldr r3,.L474
 11823 0024 1B78     	 ldrb r3,[r3]
 11824 0026 1A46     	 mov r2,r3
 11825 0028 3B1D     	 adds r3,r7,#4
 11826 002a 1846     	 mov r0,r3
 11827 002c 5349     	 ldr r1,.L474+4
 11828 002e 544B     	 ldr r3,.L474+8
 11829 0030 FFF7FEFF 	 bl sprintf
2737:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_OPEN, lu8arr_param);
 11830              	 .loc 3 2737 0
 11831 0034 3B1D     	 adds r3,r7,#4
 11832 0036 1320     	 movs r0,#19
 11833 0038 1946     	 mov r1,r3
 11834 003a FFF7FEFF 	 bl mod_sendCmdGetRsp
 11835 003e 0346     	 mov r3,r0
 11836 0040 87F84730 	 strb r3,[r7,#71]
2738:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 11837              	 .loc 3 2738 0
 11838 0044 97F84730 	 ldrb r3,[r7,#71]
 11839 0048 002B     	 cmp r3,#0
 11840 004a 76D1     	 bne .L460
2739:../4g_module/mdm_handler.c **** 	{
2740:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 11841              	 .loc 3 2740 0
 11842 004c 4D4B     	 ldr r3,.L474+12
 11843 004e 0022     	 movs r2,#0
 11844 0050 1A70     	 strb r2,[r3]
2741:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 11845              	 .loc 3 2741 0
 11846 0052 4D48     	 ldr r0,.L474+16
 11847 0054 4D49     	 ldr r1,.L474+20
 11848 0056 FFF7FEFF 	 bl strstr
 11849 005a 3864     	 str r0,[r7,#64]
2742:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_MQTT_OPEN].mu8arr_otherRspString);
2743:../4g_module/mdm_handler.c **** 
2744:../4g_module/mdm_handler.c **** 		if (lu8p_Ptr != NULL)
 11850              	 .loc 3 2744 0
 11851 005c 3B6C     	 ldr r3,[r7,#64]
 11852 005e 002B     	 cmp r3,#0
 11853 0060 00F08480 	 beq .L471
2745:../4g_module/mdm_handler.c **** 		{
2746:../4g_module/mdm_handler.c **** 			lu8p_Ptr += 12;
 11854              	 .loc 3 2746 0
 11855 0064 3B6C     	 ldr r3,[r7,#64]
 11856 0066 0C33     	 adds r3,r3,#12
 11857 0068 3B64     	 str r3,[r7,#64]
2747:../4g_module/mdm_handler.c **** 			ls_result = atoi((char *) lu8p_Ptr);
 11858              	 .loc 3 2747 0
 11859 006a 386C     	 ldr r0,[r7,#64]
 11860 006c FFF7FEFF 	 bl atoi
 11861 0070 0346     	 mov r3,r0
 11862 0072 FB87     	 strh r3,[r7,#62]
2748:../4g_module/mdm_handler.c **** 
2749:../4g_module/mdm_handler.c **** 			if (E_NW_OPENED_SUCCESSFULLY == ls_result)	//Network opened successfully
 11863              	 .loc 3 2749 0
 11864 0074 B7F93E30 	 ldrsh r3,[r7,#62]
 11865 0078 002B     	 cmp r3,#0
 11866 007a 06D1     	 bne .L462
2750:../4g_module/mdm_handler.c **** 			{
2751:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_OPENED_SUCCESSFULLY;
 11867              	 .loc 3 2751 0
 11868 007c 444B     	 ldr r3,.L474+24
 11869 007e 0022     	 movs r2,#0
 11870 0080 DA70     	 strb r2,[r3,#3]
2752:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_SUCCESS;
 11871              	 .loc 3 2752 0
 11872 0082 0023     	 movs r3,#0
 11873 0084 87F84730 	 strb r3,[r7,#71]
 11874 0088 70E0     	 b .L471
 11875              	.L462:
2753:../4g_module/mdm_handler.c **** 				//break;
2754:../4g_module/mdm_handler.c **** 			}
2755:../4g_module/mdm_handler.c **** 			else if(E_WRONG_PARAMETER == ls_result)	//Wrong parameter
 11876              	 .loc 3 2755 0
 11877 008a B7F93E30 	 ldrsh r3,[r7,#62]
 11878 008e 012B     	 cmp r3,#1
 11879 0090 06D1     	 bne .L463
2756:../4g_module/mdm_handler.c **** 			{
2757:../4g_module/mdm_handler.c **** 				/* set VCU DTC and change the return status */
2758:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_WRONG_PARAMETER;
 11880              	 .loc 3 2758 0
 11881 0092 3F4B     	 ldr r3,.L474+24
 11882 0094 0122     	 movs r2,#1
 11883 0096 DA70     	 strb r2,[r3,#3]
2759:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 11884              	 .loc 3 2759 0
 11885 0098 0223     	 movs r3,#2
 11886 009a 87F84730 	 strb r3,[r7,#71]
 11887 009e 65E0     	 b .L471
 11888              	.L463:
2760:../4g_module/mdm_handler.c **** 			}
2761:../4g_module/mdm_handler.c **** 			else if(E_MQTT_ID_OCCUPIED == ls_result)	//MQTT identifier is occupied
 11889              	 .loc 3 2761 0
 11890 00a0 B7F93E30 	 ldrsh r3,[r7,#62]
 11891 00a4 022B     	 cmp r3,#2
 11892 00a6 17D1     	 bne .L464
2762:../4g_module/mdm_handler.c **** 			{
2763:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_MQTT_ID_OCCUPIED;
 11893              	 .loc 3 2763 0
 11894 00a8 394B     	 ldr r3,.L474+24
 11895 00aa 0222     	 movs r2,#2
 11896 00ac DA70     	 strb r2,[r3,#3]
2764:../4g_module/mdm_handler.c **** 				sgu8_mqttClientId++;
 11897              	 .loc 3 2764 0
 11898 00ae 324B     	 ldr r3,.L474
 11899 00b0 1B78     	 ldrb r3,[r3]
 11900 00b2 0133     	 adds r3,r3,#1
 11901 00b4 DAB2     	 uxtb r2,r3
 11902 00b6 304B     	 ldr r3,.L474
 11903 00b8 1A70     	 strb r2,[r3]
2765:../4g_module/mdm_handler.c **** 				if (sgu8_mqttClientId > 5)
 11904              	 .loc 3 2765 0
 11905 00ba 2F4B     	 ldr r3,.L474
 11906 00bc 1B78     	 ldrb r3,[r3]
 11907 00be 052B     	 cmp r3,#5
 11908 00c0 06D9     	 bls .L465
2766:../4g_module/mdm_handler.c **** 				{
2767:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED;
 11909              	 .loc 3 2767 0
 11910 00c2 0223     	 movs r3,#2
 11911 00c4 87F84730 	 strb r3,[r7,#71]
2768:../4g_module/mdm_handler.c **** 					sgu8_mqttClientId = 0;
 11912              	 .loc 3 2768 0
 11913 00c8 2B4B     	 ldr r3,.L474
 11914 00ca 0022     	 movs r2,#0
 11915 00cc 1A70     	 strb r2,[r3]
 11916 00ce 4DE0     	 b .L471
 11917              	.L465:
2769:../4g_module/mdm_handler.c **** 				}
2770:../4g_module/mdm_handler.c **** 				else
2771:../4g_module/mdm_handler.c **** 				{
2772:../4g_module/mdm_handler.c **** 					len_retStatus = E_RET_FAILED_TRY_DIFF_ID;
 11918              	 .loc 3 2772 0
 11919 00d0 0123     	 movs r3,#1
 11920 00d2 87F84730 	 strb r3,[r7,#71]
 11921 00d6 49E0     	 b .L471
 11922              	.L464:
2773:../4g_module/mdm_handler.c **** 				}
2774:../4g_module/mdm_handler.c **** 			}
2775:../4g_module/mdm_handler.c **** 			else if(E_FAILED_TO_OPEN_NW == ls_result)	//-1 -> Failed to open network
 11923              	 .loc 3 2775 0
 11924 00d8 B7F93E30 	 ldrsh r3,[r7,#62]
 11925 00dc B3F1FF3F 	 cmp r3,#-1
 11926 00e0 06D1     	 bne .L467
2776:../4g_module/mdm_handler.c **** 			{
2777:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_OPEN_NW;
 11927              	 .loc 3 2777 0
 11928 00e2 2B4B     	 ldr r3,.L474+24
 11929 00e4 FF22     	 movs r2,#255
 11930 00e6 DA70     	 strb r2,[r3,#3]
2778:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 11931              	 .loc 3 2778 0
 11932 00e8 0223     	 movs r3,#2
 11933 00ea 87F84730 	 strb r3,[r7,#71]
 11934 00ee 3DE0     	 b .L471
 11935              	.L467:
2779:../4g_module/mdm_handler.c **** 			}
2780:../4g_module/mdm_handler.c **** 			else if(E_FAILED_TO_ACTIVATE_PDP == ls_result)	//3  -> Failed to activate PDP
 11936              	 .loc 3 2780 0
 11937 00f0 B7F93E30 	 ldrsh r3,[r7,#62]
 11938 00f4 032B     	 cmp r3,#3
 11939 00f6 06D1     	 bne .L468
2781:../4g_module/mdm_handler.c **** 			{
2782:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_ACTIVATE_PDP;
 11940              	 .loc 3 2782 0
 11941 00f8 254B     	 ldr r3,.L474+24
 11942 00fa 0322     	 movs r2,#3
 11943 00fc DA70     	 strb r2,[r3,#3]
2783:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 11944              	 .loc 3 2783 0
 11945 00fe 0223     	 movs r3,#2
 11946 0100 87F84730 	 strb r3,[r7,#71]
 11947 0104 32E0     	 b .L471
 11948              	.L468:
2784:../4g_module/mdm_handler.c **** 			}
2785:../4g_module/mdm_handler.c **** 			else if(E_FAILED_TO_PARSE_DOMAIN_NAME == ls_result)	//Failed to parse domain name
 11949              	 .loc 3 2785 0
 11950 0106 B7F93E30 	 ldrsh r3,[r7,#62]
 11951 010a 042B     	 cmp r3,#4
 11952 010c 06D1     	 bne .L469
2786:../4g_module/mdm_handler.c **** 			{
2787:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_PARSE_DOMAIN_NAME;
 11953              	 .loc 3 2787 0
 11954 010e 204B     	 ldr r3,.L474+24
 11955 0110 0422     	 movs r2,#4
 11956 0112 DA70     	 strb r2,[r3,#3]
2788:../4g_module/mdm_handler.c **** 				/* set VCU DTC and change the return status */
2789:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_FAILED;
 11957              	 .loc 3 2789 0
 11958 0114 0223     	 movs r3,#2
 11959 0116 87F84730 	 strb r3,[r7,#71]
 11960 011a 27E0     	 b .L471
 11961              	.L469:
2790:../4g_module/mdm_handler.c **** 			}
2791:../4g_module/mdm_handler.c **** 			else if(E_NW_CONNECTION_ERROR == ls_result)	//5  -> Network connection error
 11962              	 .loc 3 2791 0
 11963 011c B7F93E30 	 ldrsh r3,[r7,#62]
 11964 0120 052B     	 cmp r3,#5
 11965 0122 06D1     	 bne .L470
2792:../4g_module/mdm_handler.c **** 			{
2793:../4g_module/mdm_handler.c **** 				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_CONNECTION_ERROR;
 11966              	 .loc 3 2793 0
 11967 0124 1A4B     	 ldr r3,.L474+24
 11968 0126 0522     	 movs r2,#5
 11969 0128 DA70     	 strb r2,[r3,#3]
2794:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_CONN_ERROR;
 11970              	 .loc 3 2794 0
 11971 012a 0D23     	 movs r3,#13
 11972 012c 87F84730 	 strb r3,[r7,#71]
 11973 0130 1CE0     	 b .L471
 11974              	.L470:
2795:../4g_module/mdm_handler.c **** 			}
2796:../4g_module/mdm_handler.c **** 			else	//other return values
2797:../4g_module/mdm_handler.c **** 			{
2798:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 11975              	 .loc 3 2798 0
 11976 0132 0423     	 movs r3,#4
 11977 0134 87F84730 	 strb r3,[r7,#71]
 11978 0138 18E0     	 b .L471
 11979              	.L460:
2799:../4g_module/mdm_handler.c **** 			}
2800:../4g_module/mdm_handler.c **** 		}
2801:../4g_module/mdm_handler.c **** 	}
2802:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 11980              	 .loc 3 2802 0
 11981 013a 97F84730 	 ldrb r3,[r7,#71]
 11982 013e 042B     	 cmp r3,#4
 11983 0140 14D0     	 beq .L471
2803:../4g_module/mdm_handler.c **** 	{
2804:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 11984              	 .loc 3 2804 0
 11985 0142 104B     	 ldr r3,.L474+12
 11986 0144 1B78     	 ldrb r3,[r3]
 11987 0146 0133     	 adds r3,r3,#1
 11988 0148 DAB2     	 uxtb r2,r3
 11989 014a 0E4B     	 ldr r3,.L474+12
 11990 014c 1A70     	 strb r2,[r3]
2805:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 11991              	 .loc 3 2805 0
 11992 014e 0D4B     	 ldr r3,.L474+12
 11993 0150 1B78     	 ldrb r3,[r3]
 11994 0152 022B     	 cmp r3,#2
 11995 0154 03D8     	 bhi .L472
2806:../4g_module/mdm_handler.c **** 		{
2807:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 11996              	 .loc 3 2807 0
 11997 0156 0423     	 movs r3,#4
 11998 0158 87F84730 	 strb r3,[r7,#71]
 11999 015c 06E0     	 b .L471
 12000              	.L472:
2808:../4g_module/mdm_handler.c **** 		}
2809:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 12001              	 .loc 3 2809 0
 12002 015e 094B     	 ldr r3,.L474+12
 12003 0160 1B78     	 ldrb r3,[r3]
 12004 0162 032B     	 cmp r3,#3
 12005 0164 02D9     	 bls .L471
2810:../4g_module/mdm_handler.c **** 		{
2811:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 12006              	 .loc 3 2811 0
 12007 0166 074B     	 ldr r3,.L474+12
 12008 0168 0022     	 movs r2,#0
 12009 016a 1A70     	 strb r2,[r3]
 12010              	.L471:
2812:../4g_module/mdm_handler.c **** 		}
2813:../4g_module/mdm_handler.c **** 	}
2814:../4g_module/mdm_handler.c **** //	}
2815:../4g_module/mdm_handler.c **** 	return len_retStatus;
 12011              	 .loc 3 2815 0
 12012 016c 97F84730 	 ldrb r3,[r7,#71]
2816:../4g_module/mdm_handler.c **** }
 12013              	 .loc 3 2816 0
 12014 0170 1846     	 mov r0,r3
 12015 0172 4837     	 adds r7,r7,#72
 12016              	.LCFI234:
 12017              	 .cfi_def_cfa_offset 8
 12018 0174 BD46     	 mov sp,r7
 12019              	.LCFI235:
 12020              	 .cfi_def_cfa_register 13
 12021              	 
 12022 0176 80BD     	 pop {r7,pc}
 12023              	.L475:
 12024              	 .align 2
 12025              	.L474:
 12026 0178 00000000 	 .word sgu8_mqttClientId
 12027 017c 90010000 	 .word .LC38
 12028 0180 98010000 	 .word .LC39
 12029 0184 00000000 	 .word lsu8_retryCnt.15031
 12030 0188 00000000 	 .word gu8arr_respBuffer
 12031 018c 665C0000 	 .word gcst_ATCmdTable+23654
 12032 0190 00000000 	 .word gst_deviceStatus
 12033              	 .cfi_endproc
 12034              	.LFE647:
 12036              	 .section .rodata
 12037              	 .align 2
 12038              	.LC40:
 12039 01d0 22636163 	 .ascii "\"cacert\",2,\"cacert.pem\"\015\012\000"
 12039      65727422 
 12039      2C322C22 
 12039      63616365 
 12039      72742E70 
 12040 01ea 0000     	 .align 2
 12041              	.LC42:
 12042 01ec 22636C69 	 .ascii "\"clientkey\",2,\"clientkey.pem\"\015\012\000"
 12042      656E746B 
 12042      6579222C 
 12042      322C2263 
 12042      6C69656E 
 12043              	 .align 2
 12044              	.LC43:
 12045 020c 22736563 	 .ascii "\"seclevel\",2,2\015\012\000"
 12045      6C657665 
 12045      6C222C32 
 12045      2C320D0A 
 12045      00
 12046 021d 000000   	 .align 2
 12047              	.LC44:
 12048 0220 2273736C 	 .ascii "\"sslversion\",2,4\015\012\000"
 12048      76657273 
 12048      696F6E22 
 12048      2C322C34 
 12048      0D0A00
 12049 0233 00       	 .align 2
 12050              	.LC45:
 12051 0234 22636970 	 .ascii "\"ciphersuite\",2,0xFFFF\015\012\000"
 12051      68657273 
 12051      75697465 
 12051      222C322C 
 12051      30784646 
 12052 024d 000000   	 .align 2
 12053              	.LC46:
 12054 0250 2269676E 	 .ascii "\"ignorelocaltime\",2,1\015\012\000"
 12054      6F72656C 
 12054      6F63616C 
 12054      74696D65 
 12054      222C322C 
 12055              	 .align 2
 12056              	.LC47:
 12057 0268 2253534C 	 .ascii "\"SSL\",%d,1,2\015\012\000"
 12057      222C2564 
 12057      2C312C32 
 12057      0D0A00
 12058 0277 00       	 .align 2
 12059              	.LC41:
 12060 0278 22636C69 	 .ascii "\"clientcert\",2,\"clientcert.pem\"\015\012\000"
 12060      656E7463 
 12060      65727422 
 12060      2C322C22 
 12060      636C6965 
 12061              	 .section .text.mod_mqttOpenConfig,"ax",%progbits
 12062              	 .align 2
 12063              	 .thumb
 12064              	 .thumb_func
 12066              	mod_mqttOpenConfig:
 12067              	.LFB648:
2817:../4g_module/mdm_handler.c **** 
2818:../4g_module/mdm_handler.c **** /**************************************************************************
2819:../4g_module/mdm_handler.c ****  * Function Name	:	mod_mqttOpenConfig
2820:../4g_module/mdm_handler.c ****  *
2821:../4g_module/mdm_handler.c ****  * Description   	:	This function MQTT Open and config
2822:../4g_module/mdm_handler.c ****  *
2823:../4g_module/mdm_handler.c ****  * Arguments     	:	void
2824:../4g_module/mdm_handler.c ****  *
2825:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
2826:../4g_module/mdm_handler.c ****  *
2827:../4g_module/mdm_handler.c ****  ****************************************************************************/
2828:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_mqttOpenConfig()
2829:../4g_module/mdm_handler.c **** {
 12068              	 .loc 3 2829 0
 12069              	 .cfi_startproc
 12070              	 
 12071              	 
 12072 0000 B0B5     	 push {r4,r5,r7,lr}
 12073              	.LCFI236:
 12074              	 .cfi_def_cfa_offset 16
 12075              	 .cfi_offset 4,-16
 12076              	 .cfi_offset 5,-12
 12077              	 .cfi_offset 7,-8
 12078              	 .cfi_offset 14,-4
 12079 0002 8AB0     	 sub sp,sp,#40
 12080              	.LCFI237:
 12081              	 .cfi_def_cfa_offset 56
 12082 0004 00AF     	 add r7,sp,#0
 12083              	.LCFI238:
 12084              	 .cfi_def_cfa_register 7
2830:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 12085              	 .loc 3 2830 0
 12086 0006 0423     	 movs r3,#4
 12087 0008 87F82730 	 strb r3,[r7,#39]
2831:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[34] = { 0 };
 12088              	 .loc 3 2831 0
 12089 000c 3B1D     	 adds r3,r7,#4
 12090 000e 0022     	 movs r2,#0
 12091 0010 1A60     	 str r2,[r3]
 12092 0012 0433     	 adds r3,r3,#4
 12093 0014 0022     	 movs r2,#0
 12094 0016 1A60     	 str r2,[r3]
 12095 0018 0433     	 adds r3,r3,#4
 12096 001a 0022     	 movs r2,#0
 12097 001c 1A60     	 str r2,[r3]
 12098 001e 0433     	 adds r3,r3,#4
 12099 0020 0022     	 movs r2,#0
 12100 0022 1A60     	 str r2,[r3]
 12101 0024 0433     	 adds r3,r3,#4
 12102 0026 0022     	 movs r2,#0
 12103 0028 1A60     	 str r2,[r3]
 12104 002a 0433     	 adds r3,r3,#4
 12105 002c 0022     	 movs r2,#0
 12106 002e 1A60     	 str r2,[r3]
 12107 0030 0433     	 adds r3,r3,#4
 12108 0032 0022     	 movs r2,#0
 12109 0034 1A60     	 str r2,[r3]
 12110 0036 0433     	 adds r3,r3,#4
 12111 0038 0022     	 movs r2,#0
 12112 003a 1A60     	 str r2,[r3]
 12113 003c 0433     	 adds r3,r3,#4
 12114 003e 0022     	 movs r2,#0
 12115 0040 1A80     	 strh r2,[r3]
 12116 0042 0233     	 adds r3,r3,#2
2832:../4g_module/mdm_handler.c **** 	switch (sen_openMqttState)
 12117              	 .loc 3 2832 0
 12118 0044 C84B     	 ldr r3,.L515
 12119 0046 1B78     	 ldrb r3,[r3]
 12120 0048 0E2B     	 cmp r3,#14
 12121 004a 00F2B581 	 bhi .L514
 12122 004e 01A2     	 adr r2,.L479
 12123 0050 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 12124              	 .p2align 2
 12125              	.L479:
 12126 0054 91000000 	 .word .L478+1
 12127 0058 B5000000 	 .word .L480+1
 12128 005c D9000000 	 .word .L481+1
 12129 0060 FD000000 	 .word .L482+1
 12130 0064 21010000 	 .word .L483+1
 12131 0068 45010000 	 .word .L484+1
 12132 006c 69010000 	 .word .L485+1
 12133 0070 A3010000 	 .word .L486+1
 12134 0074 DB010000 	 .word .L487+1
 12135 0078 15020000 	 .word .L488+1
 12136 007c 4B020000 	 .word .L489+1
 12137 0080 89020000 	 .word .L490+1
 12138 0084 C3020000 	 .word .L491+1
 12139 0088 03030000 	 .word .L492+1
 12140 008c 39030000 	 .word .L493+1
 12141              	 .p2align 1
 12142              	.L478:
2833:../4g_module/mdm_handler.c **** 	{
2834:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_UPLD_CA_CERT_STATE:
2835:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertUpload(E_CA_CERT_FILE);
 12143              	 .loc 3 2835 0
 12144 0090 0020     	 movs r0,#0
 12145 0092 FFF7FEFF 	 bl mod_mqttSslCertUpload
 12146 0096 0346     	 mov r3,r0
 12147 0098 87F82730 	 strb r3,[r7,#39]
2836:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12148              	 .loc 3 2836 0
 12149 009c 97F82730 	 ldrb r3,[r7,#39]
 12150 00a0 002B     	 cmp r3,#0
 12151 00a2 06D1     	 bne .L494
2837:../4g_module/mdm_handler.c **** 			{
2838:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12152              	 .loc 3 2838 0
 12153 00a4 0423     	 movs r3,#4
 12154 00a6 87F82730 	 strb r3,[r7,#39]
2839:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_UPLD_CC_CERT_STATE;
 12155              	 .loc 3 2839 0
 12156 00aa AF4B     	 ldr r3,.L515
 12157 00ac 0122     	 movs r2,#1
 12158 00ae 1A70     	 strb r2,[r3]
2840:../4g_module/mdm_handler.c **** 			}
2841:../4g_module/mdm_handler.c **** 		break;
 12159              	 .loc 3 2841 0
 12160 00b0 83E1     	 b .L495
 12161              	.L494:
 12162 00b2 82E1     	 b .L495
 12163              	.L480:
2842:../4g_module/mdm_handler.c **** 
2843:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_UPLD_CC_CERT_STATE:
2844:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertUpload(E_CC_CERT_FILE);
 12164              	 .loc 3 2844 0
 12165 00b4 0120     	 movs r0,#1
 12166 00b6 FFF7FEFF 	 bl mod_mqttSslCertUpload
 12167 00ba 0346     	 mov r3,r0
 12168 00bc 87F82730 	 strb r3,[r7,#39]
2845:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12169              	 .loc 3 2845 0
 12170 00c0 97F82730 	 ldrb r3,[r7,#39]
 12171 00c4 002B     	 cmp r3,#0
 12172 00c6 06D1     	 bne .L496
2846:../4g_module/mdm_handler.c **** 			{
2847:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12173              	 .loc 3 2847 0
 12174 00c8 0423     	 movs r3,#4
 12175 00ca 87F82730 	 strb r3,[r7,#39]
2848:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_UPLD_CK_CERT_STATE;
 12176              	 .loc 3 2848 0
 12177 00ce A64B     	 ldr r3,.L515
 12178 00d0 0222     	 movs r2,#2
 12179 00d2 1A70     	 strb r2,[r3]
2849:../4g_module/mdm_handler.c **** 			}
2850:../4g_module/mdm_handler.c **** 		break;
 12180              	 .loc 3 2850 0
 12181 00d4 71E1     	 b .L495
 12182              	.L496:
 12183 00d6 70E1     	 b .L495
 12184              	.L481:
2851:../4g_module/mdm_handler.c **** 
2852:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_UPLD_CK_CERT_STATE:
2853:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertUpload(E_CK_CERT_FILE);
 12185              	 .loc 3 2853 0
 12186 00d8 0220     	 movs r0,#2
 12187 00da FFF7FEFF 	 bl mod_mqttSslCertUpload
 12188 00de 0346     	 mov r3,r0
 12189 00e0 87F82730 	 strb r3,[r7,#39]
2854:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12190              	 .loc 3 2854 0
 12191 00e4 97F82730 	 ldrb r3,[r7,#39]
 12192 00e8 002B     	 cmp r3,#0
 12193 00ea 06D1     	 bne .L497
2855:../4g_module/mdm_handler.c **** 			{
2856:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12194              	 .loc 3 2856 0
 12195 00ec 0423     	 movs r3,#4
 12196 00ee 87F82730 	 strb r3,[r7,#39]
2857:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 12197              	 .loc 3 2857 0
 12198 00f2 9D4B     	 ldr r3,.L515
 12199 00f4 0622     	 movs r2,#6
 12200 00f6 1A70     	 strb r2,[r3]
2858:../4g_module/mdm_handler.c **** 			}
2859:../4g_module/mdm_handler.c **** 		break;
 12201              	 .loc 3 2859 0
 12202 00f8 5FE1     	 b .L495
 12203              	.L497:
 12204 00fa 5EE1     	 b .L495
 12205              	.L482:
2860:../4g_module/mdm_handler.c **** 
2861:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_DELE_CA_CERT_STATE:
2862:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertDelete(E_CA_CERT_FILE);
 12206              	 .loc 3 2862 0
 12207 00fc 0020     	 movs r0,#0
 12208 00fe FFF7FEFF 	 bl mod_mqttSslCertDelete
 12209 0102 0346     	 mov r3,r0
 12210 0104 87F82730 	 strb r3,[r7,#39]
2863:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12211              	 .loc 3 2863 0
 12212 0108 97F82730 	 ldrb r3,[r7,#39]
 12213 010c 002B     	 cmp r3,#0
 12214 010e 06D1     	 bne .L498
2864:../4g_module/mdm_handler.c **** 			{
2865:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12215              	 .loc 3 2865 0
 12216 0110 0423     	 movs r3,#4
 12217 0112 87F82730 	 strb r3,[r7,#39]
2866:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_DELE_CC_CERT_STATE;
 12218              	 .loc 3 2866 0
 12219 0116 944B     	 ldr r3,.L515
 12220 0118 0422     	 movs r2,#4
 12221 011a 1A70     	 strb r2,[r3]
2867:../4g_module/mdm_handler.c **** 			}
2868:../4g_module/mdm_handler.c **** 		break;
 12222              	 .loc 3 2868 0
 12223 011c 4DE1     	 b .L495
 12224              	.L498:
 12225 011e 4CE1     	 b .L495
 12226              	.L483:
2869:../4g_module/mdm_handler.c **** 
2870:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_DELE_CC_CERT_STATE:
2871:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertDelete(E_CC_CERT_FILE);
 12227              	 .loc 3 2871 0
 12228 0120 0120     	 movs r0,#1
 12229 0122 FFF7FEFF 	 bl mod_mqttSslCertDelete
 12230 0126 0346     	 mov r3,r0
 12231 0128 87F82730 	 strb r3,[r7,#39]
2872:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12232              	 .loc 3 2872 0
 12233 012c 97F82730 	 ldrb r3,[r7,#39]
 12234 0130 002B     	 cmp r3,#0
 12235 0132 06D1     	 bne .L499
2873:../4g_module/mdm_handler.c **** 			{
2874:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12236              	 .loc 3 2874 0
 12237 0134 0423     	 movs r3,#4
 12238 0136 87F82730 	 strb r3,[r7,#39]
2875:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_DELE_CK_CERT_STATE;
 12239              	 .loc 3 2875 0
 12240 013a 8B4B     	 ldr r3,.L515
 12241 013c 0522     	 movs r2,#5
 12242 013e 1A70     	 strb r2,[r3]
2876:../4g_module/mdm_handler.c **** 			}
2877:../4g_module/mdm_handler.c **** 		break;
 12243              	 .loc 3 2877 0
 12244 0140 3BE1     	 b .L495
 12245              	.L499:
 12246 0142 3AE1     	 b .L495
 12247              	.L484:
2878:../4g_module/mdm_handler.c **** 
2879:../4g_module/mdm_handler.c **** 		case E_MQTT_SSL_DELE_CK_CERT_STATE:
2880:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslCertDelete(E_CK_CERT_FILE);
 12248              	 .loc 3 2880 0
 12249 0144 0220     	 movs r0,#2
 12250 0146 FFF7FEFF 	 bl mod_mqttSslCertDelete
 12251 014a 0346     	 mov r3,r0
 12252 014c 87F82730 	 strb r3,[r7,#39]
2881:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12253              	 .loc 3 2881 0
 12254 0150 97F82730 	 ldrb r3,[r7,#39]
 12255 0154 002B     	 cmp r3,#0
 12256 0156 06D1     	 bne .L500
2882:../4g_module/mdm_handler.c **** 			{
2883:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12257              	 .loc 3 2883 0
 12258 0158 0423     	 movs r3,#4
 12259 015a 87F82730 	 strb r3,[r7,#39]
2884:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 12260              	 .loc 3 2884 0
 12261 015e 824B     	 ldr r3,.L515
 12262 0160 0022     	 movs r2,#0
 12263 0162 1A70     	 strb r2,[r3]
2885:../4g_module/mdm_handler.c **** 			}
2886:../4g_module/mdm_handler.c **** 		break;
 12264              	 .loc 3 2886 0
 12265 0164 29E1     	 b .L495
 12266              	.L500:
 12267 0166 28E1     	 b .L495
 12268              	.L485:
2887:../4g_module/mdm_handler.c **** 
2888:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_CA_CERT_STATE:
2889:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) CA_CERT_PATH);
 12269              	 .loc 3 2889 0
 12270 0168 3B1D     	 adds r3,r7,#4
 12271 016a 804A     	 ldr r2,.L515+4
 12272 016c 1C46     	 mov r4,r3
 12273 016e 1546     	 mov r5,r2
 12274 0170 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12275 0172 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12276 0174 95E80700 	 ldmia r5,{r0,r1,r2}
 12277 0178 03C4     	 stmia r4!,{r0,r1}
 12278 017a 2280     	 strh r2,[r4]
2890:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12279              	 .loc 3 2890 0
 12280 017c 3B1D     	 adds r3,r7,#4
 12281 017e 1846     	 mov r0,r3
 12282 0180 FFF7FEFF 	 bl mod_mqttSslConfgi
 12283 0184 0346     	 mov r3,r0
 12284 0186 87F82730 	 strb r3,[r7,#39]
2891:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12285              	 .loc 3 2891 0
 12286 018a 97F82730 	 ldrb r3,[r7,#39]
 12287 018e 002B     	 cmp r3,#0
 12288 0190 06D1     	 bne .L501
2892:../4g_module/mdm_handler.c **** 			{
2893:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12289              	 .loc 3 2893 0
 12290 0192 0423     	 movs r3,#4
 12291 0194 87F82730 	 strb r3,[r7,#39]
2894:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CC_CERT_STATE;
 12292              	 .loc 3 2894 0
 12293 0198 734B     	 ldr r3,.L515
 12294 019a 0722     	 movs r2,#7
 12295 019c 1A70     	 strb r2,[r3]
2895:../4g_module/mdm_handler.c **** 			}
2896:../4g_module/mdm_handler.c **** 		break;
 12296              	 .loc 3 2896 0
 12297 019e 0CE1     	 b .L495
 12298              	.L501:
 12299 01a0 0BE1     	 b .L495
 12300              	.L486:
2897:../4g_module/mdm_handler.c **** 
2898:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_CC_CERT_STATE:
2899:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) CC_CERT_PATH);
 12301              	 .loc 3 2899 0
 12302 01a2 734B     	 ldr r3,.L515+8
 12303 01a4 3C1D     	 adds r4,r7,#4
 12304 01a6 1D46     	 mov r5,r3
 12305 01a8 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12306 01aa 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12307 01ac 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12308 01ae 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12309 01b0 2B68     	 ldr r3,[r5]
 12310 01b2 2380     	 strh r3,[r4]
2900:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12311              	 .loc 3 2900 0
 12312 01b4 3B1D     	 adds r3,r7,#4
 12313 01b6 1846     	 mov r0,r3
 12314 01b8 FFF7FEFF 	 bl mod_mqttSslConfgi
 12315 01bc 0346     	 mov r3,r0
 12316 01be 87F82730 	 strb r3,[r7,#39]
2901:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12317              	 .loc 3 2901 0
 12318 01c2 97F82730 	 ldrb r3,[r7,#39]
 12319 01c6 002B     	 cmp r3,#0
 12320 01c8 06D1     	 bne .L502
2902:../4g_module/mdm_handler.c **** 			{
2903:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12321              	 .loc 3 2903 0
 12322 01ca 0423     	 movs r3,#4
 12323 01cc 87F82730 	 strb r3,[r7,#39]
2904:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CK_CERT_STATE;
 12324              	 .loc 3 2904 0
 12325 01d0 654B     	 ldr r3,.L515
 12326 01d2 0822     	 movs r2,#8
 12327 01d4 1A70     	 strb r2,[r3]
2905:../4g_module/mdm_handler.c **** 			}
2906:../4g_module/mdm_handler.c **** 		break;
 12328              	 .loc 3 2906 0
 12329 01d6 F0E0     	 b .L495
 12330              	.L502:
 12331 01d8 EFE0     	 b .L495
 12332              	.L487:
2907:../4g_module/mdm_handler.c **** 
2908:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_CK_CERT_STATE:
2909:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) CK_CERT_PATH);
 12333              	 .loc 3 2909 0
 12334 01da 3B1D     	 adds r3,r7,#4
 12335 01dc 654A     	 ldr r2,.L515+12
 12336 01de 1C46     	 mov r4,r3
 12337 01e0 1546     	 mov r5,r2
 12338 01e2 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12339 01e4 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12340 01e6 95E80F00 	 ldmia r5,{r0,r1,r2,r3}
 12341 01ea 84E80F00 	 stmia r4,{r0,r1,r2,r3}
2910:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12342              	 .loc 3 2910 0
 12343 01ee 3B1D     	 adds r3,r7,#4
 12344 01f0 1846     	 mov r0,r3
 12345 01f2 FFF7FEFF 	 bl mod_mqttSslConfgi
 12346 01f6 0346     	 mov r3,r0
 12347 01f8 87F82730 	 strb r3,[r7,#39]
2911:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12348              	 .loc 3 2911 0
 12349 01fc 97F82730 	 ldrb r3,[r7,#39]
 12350 0200 002B     	 cmp r3,#0
 12351 0202 06D1     	 bne .L503
2912:../4g_module/mdm_handler.c **** 			{
2913:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12352              	 .loc 3 2913 0
 12353 0204 0423     	 movs r3,#4
 12354 0206 87F82730 	 strb r3,[r7,#39]
2914:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_SSL_AUTH_STATE;
 12355              	 .loc 3 2914 0
 12356 020a 574B     	 ldr r3,.L515
 12357 020c 0922     	 movs r2,#9
 12358 020e 1A70     	 strb r2,[r3]
2915:../4g_module/mdm_handler.c **** 			}
2916:../4g_module/mdm_handler.c **** 		break;
 12359              	 .loc 3 2916 0
 12360 0210 D3E0     	 b .L495
 12361              	.L503:
 12362 0212 D2E0     	 b .L495
 12363              	.L488:
2917:../4g_module/mdm_handler.c **** 
2918:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_SSL_AUTH_STATE:
2919:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) SSL_AUTH);
 12364              	 .loc 3 2919 0
 12365 0214 3B1D     	 adds r3,r7,#4
 12366 0216 584A     	 ldr r2,.L515+16
 12367 0218 1C46     	 mov r4,r3
 12368 021a 1546     	 mov r5,r2
 12369 021c 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12370 021e 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12371 0220 2B68     	 ldr r3,[r5]
 12372 0222 2370     	 strb r3,[r4]
2920:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12373              	 .loc 3 2920 0
 12374 0224 3B1D     	 adds r3,r7,#4
 12375 0226 1846     	 mov r0,r3
 12376 0228 FFF7FEFF 	 bl mod_mqttSslConfgi
 12377 022c 0346     	 mov r3,r0
 12378 022e 87F82730 	 strb r3,[r7,#39]
2921:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12379              	 .loc 3 2921 0
 12380 0232 97F82730 	 ldrb r3,[r7,#39]
 12381 0236 002B     	 cmp r3,#0
 12382 0238 06D1     	 bne .L504
2922:../4g_module/mdm_handler.c **** 			{
2923:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12383              	 .loc 3 2923 0
 12384 023a 0423     	 movs r3,#4
 12385 023c 87F82730 	 strb r3,[r7,#39]
2924:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_SSL_VER_STATE;
 12386              	 .loc 3 2924 0
 12387 0240 494B     	 ldr r3,.L515
 12388 0242 0A22     	 movs r2,#10
 12389 0244 1A70     	 strb r2,[r3]
2925:../4g_module/mdm_handler.c **** 			}
2926:../4g_module/mdm_handler.c **** 		break;
 12390              	 .loc 3 2926 0
 12391 0246 B8E0     	 b .L495
 12392              	.L504:
 12393 0248 B7E0     	 b .L495
 12394              	.L489:
2927:../4g_module/mdm_handler.c **** 
2928:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_SSL_VER_STATE:
2929:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) SSL_VERSION);
 12395              	 .loc 3 2929 0
 12396 024a 3B1D     	 adds r3,r7,#4
 12397 024c 4B4A     	 ldr r2,.L515+20
 12398 024e 1C46     	 mov r4,r3
 12399 0250 1546     	 mov r5,r2
 12400 0252 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12401 0254 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12402 0256 2B68     	 ldr r3,[r5]
 12403 0258 1A46     	 mov r2,r3
 12404 025a 2280     	 strh r2,[r4]
 12405 025c 0234     	 adds r4,r4,#2
 12406 025e 1B0C     	 lsrs r3,r3,#16
 12407 0260 2370     	 strb r3,[r4]
2930:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12408              	 .loc 3 2930 0
 12409 0262 3B1D     	 adds r3,r7,#4
 12410 0264 1846     	 mov r0,r3
 12411 0266 FFF7FEFF 	 bl mod_mqttSslConfgi
 12412 026a 0346     	 mov r3,r0
 12413 026c 87F82730 	 strb r3,[r7,#39]
2931:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12414              	 .loc 3 2931 0
 12415 0270 97F82730 	 ldrb r3,[r7,#39]
 12416 0274 002B     	 cmp r3,#0
 12417 0276 06D1     	 bne .L505
2932:../4g_module/mdm_handler.c **** 			{
2933:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12418              	 .loc 3 2933 0
 12419 0278 0423     	 movs r3,#4
 12420 027a 87F82730 	 strb r3,[r7,#39]
2934:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CIPHER_STATE;
 12421              	 .loc 3 2934 0
 12422 027e 3A4B     	 ldr r3,.L515
 12423 0280 0B22     	 movs r2,#11
 12424 0282 1A70     	 strb r2,[r3]
2935:../4g_module/mdm_handler.c **** 			}
2936:../4g_module/mdm_handler.c **** 		break;
 12425              	 .loc 3 2936 0
 12426 0284 99E0     	 b .L495
 12427              	.L505:
 12428 0286 98E0     	 b .L495
 12429              	.L490:
2937:../4g_module/mdm_handler.c **** 
2938:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_CIPHER_STATE:
2939:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) SSL_CIPHER_SUITE);
 12430              	 .loc 3 2939 0
 12431 0288 3B1D     	 adds r3,r7,#4
 12432 028a 3D4A     	 ldr r2,.L515+24
 12433 028c 1C46     	 mov r4,r3
 12434 028e 1546     	 mov r5,r2
 12435 0290 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12436 0292 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12437 0294 95E80700 	 ldmia r5,{r0,r1,r2}
 12438 0298 03C4     	 stmia r4!,{r0,r1}
 12439 029a 2270     	 strb r2,[r4]
2940:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12440              	 .loc 3 2940 0
 12441 029c 3B1D     	 adds r3,r7,#4
 12442 029e 1846     	 mov r0,r3
 12443 02a0 FFF7FEFF 	 bl mod_mqttSslConfgi
 12444 02a4 0346     	 mov r3,r0
 12445 02a6 87F82730 	 strb r3,[r7,#39]
2941:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12446              	 .loc 3 2941 0
 12447 02aa 97F82730 	 ldrb r3,[r7,#39]
 12448 02ae 002B     	 cmp r3,#0
 12449 02b0 06D1     	 bne .L506
2942:../4g_module/mdm_handler.c **** 			{
2943:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12450              	 .loc 3 2943 0
 12451 02b2 0423     	 movs r3,#4
 12452 02b4 87F82730 	 strb r3,[r7,#39]
2944:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_IGR_AUTH_STATE;
 12453              	 .loc 3 2944 0
 12454 02b8 2B4B     	 ldr r3,.L515
 12455 02ba 0C22     	 movs r2,#12
 12456 02bc 1A70     	 strb r2,[r3]
2945:../4g_module/mdm_handler.c **** 			}
2946:../4g_module/mdm_handler.c **** 		break;
 12457              	 .loc 3 2946 0
 12458 02be 7CE0     	 b .L495
 12459              	.L506:
 12460 02c0 7BE0     	 b .L495
 12461              	.L491:
2947:../4g_module/mdm_handler.c **** 
2948:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_CFG_IGR_AUTH_STATE:
2949:../4g_module/mdm_handler.c **** 			strcpy((char *) lu8arr_param, (const char *) SSL_IGNORE_LOCAL_TIME);
 12462              	 .loc 3 2949 0
 12463 02c2 3B1D     	 adds r3,r7,#4
 12464 02c4 2F4A     	 ldr r2,.L515+28
 12465 02c6 1C46     	 mov r4,r3
 12466 02c8 1546     	 mov r5,r2
 12467 02ca 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12468 02cc 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12469 02ce 95E80300 	 ldmia r5,{r0,r1}
 12470 02d2 84E80300 	 stmia r4,{r0,r1}
2950:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 12471              	 .loc 3 2950 0
 12472 02d6 3B1D     	 adds r3,r7,#4
 12473 02d8 1846     	 mov r0,r3
 12474 02da FFF7FEFF 	 bl mod_mqttSslConfgi
 12475 02de 0346     	 mov r3,r0
 12476 02e0 87F82730 	 strb r3,[r7,#39]
2951:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12477              	 .loc 3 2951 0
 12478 02e4 97F82730 	 ldrb r3,[r7,#39]
 12479 02e8 002B     	 cmp r3,#0
 12480 02ea 09D1     	 bne .L507
2952:../4g_module/mdm_handler.c **** 			{
2953:../4g_module/mdm_handler.c **** 				sgu8_mqttClientId = 0;
 12481              	 .loc 3 2953 0
 12482 02ec 264B     	 ldr r3,.L515+32
 12483 02ee 0022     	 movs r2,#0
 12484 02f0 1A70     	 strb r2,[r3]
2954:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12485              	 .loc 3 2954 0
 12486 02f2 0423     	 movs r3,#4
 12487 02f4 87F82730 	 strb r3,[r7,#39]
2955:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 12488              	 .loc 3 2955 0
 12489 02f8 1B4B     	 ldr r3,.L515
 12490 02fa 0D22     	 movs r2,#13
 12491 02fc 1A70     	 strb r2,[r3]
2956:../4g_module/mdm_handler.c **** 			}
2957:../4g_module/mdm_handler.c **** 		break;
 12492              	 .loc 3 2957 0
 12493 02fe 5CE0     	 b .L495
 12494              	.L507:
 12495 0300 5BE0     	 b .L495
 12496              	.L492:
2958:../4g_module/mdm_handler.c **** 
2959:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_SSL_CFG_STATE:
2960:../4g_module/mdm_handler.c **** 			sprintf((char *) lu8arr_param, (const char *) "\"SSL\",%d,1,2\r\n",
 12497              	 .loc 3 2960 0
 12498 0302 214B     	 ldr r3,.L515+32
 12499 0304 1B78     	 ldrb r3,[r3]
 12500 0306 1A46     	 mov r2,r3
 12501 0308 3B1D     	 adds r3,r7,#4
 12502 030a 1846     	 mov r0,r3
 12503 030c 1F49     	 ldr r1,.L515+36
 12504 030e FFF7FEFF 	 bl sprintf
2961:../4g_module/mdm_handler.c **** 					sgu8_mqttClientId);
2962:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttSslMode(lu8arr_param);
 12505              	 .loc 3 2962 0
 12506 0312 3B1D     	 adds r3,r7,#4
 12507 0314 1846     	 mov r0,r3
 12508 0316 FFF7FEFF 	 bl mod_mqttSslMode
 12509 031a 0346     	 mov r3,r0
 12510 031c 87F82730 	 strb r3,[r7,#39]
2963:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12511              	 .loc 3 2963 0
 12512 0320 97F82730 	 ldrb r3,[r7,#39]
 12513 0324 002B     	 cmp r3,#0
 12514 0326 06D1     	 bne .L508
2964:../4g_module/mdm_handler.c **** 			{
2965:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12515              	 .loc 3 2965 0
 12516 0328 0423     	 movs r3,#4
 12517 032a 87F82730 	 strb r3,[r7,#39]
2966:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_STATE;
 12518              	 .loc 3 2966 0
 12519 032e 0E4B     	 ldr r3,.L515
 12520 0330 0E22     	 movs r2,#14
 12521 0332 1A70     	 strb r2,[r3]
2967:../4g_module/mdm_handler.c **** 			}
2968:../4g_module/mdm_handler.c **** 		break;
 12522              	 .loc 3 2968 0
 12523 0334 41E0     	 b .L495
 12524              	.L508:
 12525 0336 40E0     	 b .L495
 12526              	.L493:
2969:../4g_module/mdm_handler.c **** 
2970:../4g_module/mdm_handler.c **** 		case E_MQTT_OPN_STATE:
2971:../4g_module/mdm_handler.c **** 			len_retStatus = mod_mqttOpen();
 12527              	 .loc 3 2971 0
 12528 0338 FFF7FEFF 	 bl mod_mqttOpen
 12529 033c 0346     	 mov r3,r0
 12530 033e 87F82730 	 strb r3,[r7,#39]
2972:../4g_module/mdm_handler.c **** 			if (E_RET_SUCCESS == len_retStatus)
 12531              	 .loc 3 2972 0
 12532 0342 97F82730 	 ldrb r3,[r7,#39]
 12533 0346 002B     	 cmp r3,#0
 12534 0348 06D1     	 bne .L509
2973:../4g_module/mdm_handler.c **** 			{
2974:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_SUCCESS;
 12535              	 .loc 3 2974 0
 12536 034a 0023     	 movs r3,#0
 12537 034c 87F82730 	 strb r3,[r7,#39]
2975:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 12538              	 .loc 3 2975 0
 12539 0350 054B     	 ldr r3,.L515
 12540 0352 0622     	 movs r2,#6
 12541 0354 1A70     	 strb r2,[r3]
 12542 0356 2EE0     	 b .L510
 12543              	.L509:
2976:../4g_module/mdm_handler.c **** 			}
2977:../4g_module/mdm_handler.c **** 			else if (E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 12544              	 .loc 3 2977 0
 12545 0358 97F82730 	 ldrb r3,[r7,#39]
 12546 035c 012B     	 cmp r3,#1
 12547 035e 17D1     	 bne .L511
2978:../4g_module/mdm_handler.c **** 			{
2979:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 12548              	 .loc 3 2979 0
 12549 0360 014B     	 ldr r3,.L515
 12550 0362 0D22     	 movs r2,#13
 12551 0364 1A70     	 strb r2,[r3]
 12552 0366 26E0     	 b .L510
 12553              	.L516:
 12554              	 .align 2
 12555              	.L515:
 12556 0368 00000000 	 .word sen_openMqttState
 12557 036c D0010000 	 .word .LC40
 12558 0370 78020000 	 .word .LC41
 12559 0374 EC010000 	 .word .LC42
 12560 0378 0C020000 	 .word .LC43
 12561 037c 20020000 	 .word .LC44
 12562 0380 34020000 	 .word .LC45
 12563 0384 50020000 	 .word .LC46
 12564 0388 00000000 	 .word sgu8_mqttClientId
 12565 038c 68020000 	 .word .LC47
 12566              	.L511:
2980:../4g_module/mdm_handler.c **** 			}
2981:../4g_module/mdm_handler.c **** 			else if (E_RET_FAILED == len_retStatus)
 12567              	 .loc 3 2981 0
 12568 0390 97F82730 	 ldrb r3,[r7,#39]
 12569 0394 022B     	 cmp r3,#2
 12570 0396 03D1     	 bne .L512
2982:../4g_module/mdm_handler.c **** 			{
2983:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 12571              	 .loc 3 2983 0
 12572 0398 0B4B     	 ldr r3,.L517
 12573 039a 0622     	 movs r2,#6
 12574 039c 1A70     	 strb r2,[r3]
 12575 039e 0AE0     	 b .L510
 12576              	.L512:
2984:../4g_module/mdm_handler.c **** 			}
2985:../4g_module/mdm_handler.c **** 			else if(E_RET_CONN_ERROR == len_retStatus)
 12577              	 .loc 3 2985 0
 12578 03a0 97F82730 	 ldrb r3,[r7,#39]
 12579 03a4 0D2B     	 cmp r3,#13
 12580 03a6 06D1     	 bne .L510
2986:../4g_module/mdm_handler.c **** 			{
2987:../4g_module/mdm_handler.c **** 				len_retStatus = E_RET_INPROGRESS;
 12581              	 .loc 3 2987 0
 12582 03a8 0423     	 movs r3,#4
 12583 03aa 87F82730 	 strb r3,[r7,#39]
2988:../4g_module/mdm_handler.c **** 				sen_openMqttState = E_MQTT_SSL_DELE_CA_CERT_STATE;
 12584              	 .loc 3 2988 0
 12585 03ae 064B     	 ldr r3,.L517
 12586 03b0 0322     	 movs r2,#3
 12587 03b2 1A70     	 strb r2,[r3]
2989:../4g_module/mdm_handler.c **** 			}
2990:../4g_module/mdm_handler.c **** 		break;
 12588              	 .loc 3 2990 0
 12589 03b4 01E0     	 b .L495
 12590              	.L510:
 12591 03b6 00E0     	 b .L495
 12592              	.L514:
2991:../4g_module/mdm_handler.c **** 
2992:../4g_module/mdm_handler.c **** 		default:
2993:../4g_module/mdm_handler.c **** 		break;
 12593              	 .loc 3 2993 0
 12594 03b8 00BF     	 nop
 12595              	.L495:
2994:../4g_module/mdm_handler.c **** 	}
2995:../4g_module/mdm_handler.c **** 
2996:../4g_module/mdm_handler.c **** 	return len_retStatus;
 12596              	 .loc 3 2996 0
 12597 03ba 97F82730 	 ldrb r3,[r7,#39]
2997:../4g_module/mdm_handler.c **** }
 12598              	 .loc 3 2997 0
 12599 03be 1846     	 mov r0,r3
 12600 03c0 2837     	 adds r7,r7,#40
 12601              	.LCFI239:
 12602              	 .cfi_def_cfa_offset 16
 12603 03c2 BD46     	 mov sp,r7
 12604              	.LCFI240:
 12605              	 .cfi_def_cfa_register 13
 12606              	 
 12607 03c4 B0BD     	 pop {r4,r5,r7,pc}
 12608              	.L518:
 12609 03c6 00BF     	 .align 2
 12610              	.L517:
 12611 03c8 00000000 	 .word sen_openMqttState
 12612              	 .cfi_endproc
 12613              	.LFE648:
 12615              	 .section .rodata
 12616 029a 0000     	 .align 2
 12617              	.LC48:
 12618 029c 226F7574 	 .ascii "\"outport\",\"none\"\015\012\000"
 12618      706F7274 
 12618      222C226E 
 12618      6F6E6522 
 12618      0D0A00
 12619              	 .section .text.mod_gpsCfg,"ax",%progbits
 12620              	 .align 2
 12621              	 .thumb
 12622              	 .thumb_func
 12624              	mod_gpsCfg:
 12625              	.LFB649:
2998:../4g_module/mdm_handler.c **** 
2999:../4g_module/mdm_handler.c **** /**************************************************************************
3000:../4g_module/mdm_handler.c ****  * Function Name	:	mod_gpsCfg
3001:../4g_module/mdm_handler.c ****  *
3002:../4g_module/mdm_handler.c ****  * Description   	:	This function used to configure the GPS
3003:../4g_module/mdm_handler.c ****  *
3004:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3005:../4g_module/mdm_handler.c ****  *
3006:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
3007:../4g_module/mdm_handler.c ****  *
3008:../4g_module/mdm_handler.c ****  ****************************************************************************/
3009:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_gpsCfg(void)
3010:../4g_module/mdm_handler.c **** {
 12626              	 .loc 3 3010 0
 12627              	 .cfi_startproc
 12628              	 
 12629              	 
 12630 0000 B0B5     	 push {r4,r5,r7,lr}
 12631              	.LCFI241:
 12632              	 .cfi_def_cfa_offset 16
 12633              	 .cfi_offset 4,-16
 12634              	 .cfi_offset 5,-12
 12635              	 .cfi_offset 7,-8
 12636              	 .cfi_offset 14,-4
 12637 0002 88B0     	 sub sp,sp,#32
 12638              	.LCFI242:
 12639              	 .cfi_def_cfa_offset 48
 12640 0004 00AF     	 add r7,sp,#0
 12641              	.LCFI243:
 12642              	 .cfi_def_cfa_register 7
3011:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 12643              	 .loc 3 3011 0
 12644 0006 0423     	 movs r3,#4
 12645 0008 FB77     	 strb r3,[r7,#31]
3012:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
3013:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 12646              	 .loc 3 3013 0
 12647 000a 0023     	 movs r3,#0
 12648 000c BB61     	 str r3,[r7,#24]
3014:../4g_module/mdm_handler.c **** 	uint8_t lu8arr_param[] = "\"outport\",\"none\"\r\n";
 12649              	 .loc 3 3014 0
 12650 000e 214B     	 ldr r3,.L526
 12651 0010 3C1D     	 adds r4,r7,#4
 12652 0012 1D46     	 mov r5,r3
 12653 0014 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 12654 0016 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 12655 0018 2B68     	 ldr r3,[r5]
 12656 001a 1A46     	 mov r2,r3
 12657 001c 2280     	 strh r2,[r4]
 12658 001e 0234     	 adds r4,r4,#2
 12659 0020 1B0C     	 lsrs r3,r3,#16
 12660 0022 2370     	 strb r3,[r4]
3015:../4g_module/mdm_handler.c **** 
3016:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GPS_CFG, (uint8_t *) lu8arr_param);
 12661              	 .loc 3 3016 0
 12662 0024 3B1D     	 adds r3,r7,#4
 12663 0026 1F20     	 movs r0,#31
 12664 0028 1946     	 mov r1,r3
 12665 002a FFF7FEFF 	 bl mod_sendCmdGetRsp
 12666 002e 0346     	 mov r3,r0
 12667 0030 FB77     	 strb r3,[r7,#31]
3017:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 12668              	 .loc 3 3017 0
 12669 0032 FB7F     	 ldrb r3,[r7,#31]
 12670 0034 002B     	 cmp r3,#0
 12671 0036 10D1     	 bne .L520
3018:../4g_module/mdm_handler.c **** 	{
3019:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 12672              	 .loc 3 3019 0
 12673 0038 174B     	 ldr r3,.L526+4
 12674 003a 0022     	 movs r2,#0
 12675 003c 1A70     	 strb r2,[r3]
3020:../4g_module/mdm_handler.c **** 		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 12676              	 .loc 3 3020 0
 12677 003e 1748     	 ldr r0,.L526+8
 12678 0040 1749     	 ldr r1,.L526+12
 12679 0042 FFF7FEFF 	 bl strstr
 12680 0046 B861     	 str r0,[r7,#24]
3021:../4g_module/mdm_handler.c **** 				(const char *) gcst_ATCmdTable[E_IDX_GPS_CFG].mu8arr_respString);
3022:../4g_module/mdm_handler.c **** 		if(NULL != lu8p_Ptr)
 12681              	 .loc 3 3022 0
 12682 0048 BB69     	 ldr r3,[r7,#24]
 12683 004a 002B     	 cmp r3,#0
 12684 004c 02D0     	 beq .L521
3023:../4g_module/mdm_handler.c **** 		{
3024:../4g_module/mdm_handler.c **** 
3025:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 12685              	 .loc 3 3025 0
 12686 004e 0023     	 movs r3,#0
 12687 0050 FB77     	 strb r3,[r7,#31]
 12688 0052 19E0     	 b .L523
 12689              	.L521:
3026:../4g_module/mdm_handler.c **** 		}
3027:../4g_module/mdm_handler.c **** 		else
3028:../4g_module/mdm_handler.c **** 		{
3029:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_FAILED;
 12690              	 .loc 3 3029 0
 12691 0054 0223     	 movs r3,#2
 12692 0056 FB77     	 strb r3,[r7,#31]
 12693 0058 16E0     	 b .L523
 12694              	.L520:
3030:../4g_module/mdm_handler.c **** 		}
3031:../4g_module/mdm_handler.c **** 	}
3032:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 12695              	 .loc 3 3032 0
 12696 005a FB7F     	 ldrb r3,[r7,#31]
 12697 005c 042B     	 cmp r3,#4
 12698 005e 13D0     	 beq .L523
3033:../4g_module/mdm_handler.c **** 	{
3034:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 12699              	 .loc 3 3034 0
 12700 0060 0D4B     	 ldr r3,.L526+4
 12701 0062 1B78     	 ldrb r3,[r3]
 12702 0064 0133     	 adds r3,r3,#1
 12703 0066 DAB2     	 uxtb r2,r3
 12704 0068 0B4B     	 ldr r3,.L526+4
 12705 006a 1A70     	 strb r2,[r3]
3035:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 12706              	 .loc 3 3035 0
 12707 006c 0A4B     	 ldr r3,.L526+4
 12708 006e 1B78     	 ldrb r3,[r3]
 12709 0070 022B     	 cmp r3,#2
 12710 0072 02D8     	 bhi .L524
3036:../4g_module/mdm_handler.c **** 		{
3037:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 12711              	 .loc 3 3037 0
 12712 0074 0423     	 movs r3,#4
 12713 0076 FB77     	 strb r3,[r7,#31]
 12714 0078 06E0     	 b .L523
 12715              	.L524:
3038:../4g_module/mdm_handler.c **** 		}
3039:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 12716              	 .loc 3 3039 0
 12717 007a 074B     	 ldr r3,.L526+4
 12718 007c 1B78     	 ldrb r3,[r3]
 12719 007e 032B     	 cmp r3,#3
 12720 0080 02D9     	 bls .L523
3040:../4g_module/mdm_handler.c **** 		{
3041:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 12721              	 .loc 3 3041 0
 12722 0082 054B     	 ldr r3,.L526+4
 12723 0084 0022     	 movs r2,#0
 12724 0086 1A70     	 strb r2,[r3]
 12725              	.L523:
3042:../4g_module/mdm_handler.c **** 		}
3043:../4g_module/mdm_handler.c **** 	}
3044:../4g_module/mdm_handler.c **** 	return len_retStatus;
 12726              	 .loc 3 3044 0
 12727 0088 FB7F     	 ldrb r3,[r7,#31]
3045:../4g_module/mdm_handler.c **** }
 12728              	 .loc 3 3045 0
 12729 008a 1846     	 mov r0,r3
 12730 008c 2037     	 adds r7,r7,#32
 12731              	.LCFI244:
 12732              	 .cfi_def_cfa_offset 16
 12733 008e BD46     	 mov sp,r7
 12734              	.LCFI245:
 12735              	 .cfi_def_cfa_register 13
 12736              	 
 12737 0090 B0BD     	 pop {r4,r5,r7,pc}
 12738              	.L527:
 12739 0092 00BF     	 .align 2
 12740              	.L526:
 12741 0094 9C020000 	 .word .LC48
 12742 0098 00000000 	 .word lsu8_retryCnt.15060
 12743 009c 00000000 	 .word gu8arr_respBuffer
 12744 00a0 E4930000 	 .word gcst_ATCmdTable+37860
 12745              	 .cfi_endproc
 12746              	.LFE649:
 12748              	 .section .text.mod_gpsEnable,"ax",%progbits
 12749              	 .align 2
 12750              	 .thumb
 12751              	 .thumb_func
 12753              	mod_gpsEnable:
 12754              	.LFB650:
3046:../4g_module/mdm_handler.c **** 
3047:../4g_module/mdm_handler.c **** /**************************************************************************
3048:../4g_module/mdm_handler.c ****  * Function Name	:	mod_gpsEnable
3049:../4g_module/mdm_handler.c ****  *
3050:../4g_module/mdm_handler.c ****  * Description   	:	This function used to enable the GPS
3051:../4g_module/mdm_handler.c ****  *
3052:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3053:../4g_module/mdm_handler.c ****  *
3054:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
3055:../4g_module/mdm_handler.c ****  *
3056:../4g_module/mdm_handler.c ****  ****************************************************************************/
3057:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_gpsEnable(void)
3058:../4g_module/mdm_handler.c **** {
 12755              	 .loc 3 3058 0
 12756              	 .cfi_startproc
 12757              	 
 12758              	 
 12759 0000 80B5     	 push {r7,lr}
 12760              	.LCFI246:
 12761              	 .cfi_def_cfa_offset 8
 12762              	 .cfi_offset 7,-8
 12763              	 .cfi_offset 14,-4
 12764 0002 82B0     	 sub sp,sp,#8
 12765              	.LCFI247:
 12766              	 .cfi_def_cfa_offset 16
 12767 0004 00AF     	 add r7,sp,#0
 12768              	.LCFI248:
 12769              	 .cfi_def_cfa_register 7
3059:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 12770              	 .loc 3 3059 0
 12771 0006 0423     	 movs r3,#4
 12772 0008 FB71     	 strb r3,[r7,#7]
3060:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
3061:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 12773              	 .loc 3 3061 0
 12774 000a 0023     	 movs r3,#0
 12775 000c 3B60     	 str r3,[r7]
3062:../4g_module/mdm_handler.c **** 
3063:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_GNSS, (uint8_t *) NEW_LINE);
 12776              	 .loc 3 3063 0
 12777 000e 2020     	 movs r0,#32
 12778 0010 1449     	 ldr r1,.L533
 12779 0012 FFF7FEFF 	 bl mod_sendCmdGetRsp
 12780 0016 0346     	 mov r3,r0
 12781 0018 FB71     	 strb r3,[r7,#7]
3064:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 12782              	 .loc 3 3064 0
 12783 001a FB79     	 ldrb r3,[r7,#7]
 12784 001c 002B     	 cmp r3,#0
 12785 001e 05D1     	 bne .L529
3065:../4g_module/mdm_handler.c **** 	{
3066:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 12786              	 .loc 3 3066 0
 12787 0020 114B     	 ldr r3,.L533+4
 12788 0022 0022     	 movs r2,#0
 12789 0024 1A70     	 strb r2,[r3]
3067:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 12790              	 .loc 3 3067 0
 12791 0026 0023     	 movs r3,#0
 12792 0028 FB71     	 strb r3,[r7,#7]
 12793 002a 16E0     	 b .L530
 12794              	.L529:
3068:../4g_module/mdm_handler.c **** 	}
3069:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 12795              	 .loc 3 3069 0
 12796 002c FB79     	 ldrb r3,[r7,#7]
 12797 002e 042B     	 cmp r3,#4
 12798 0030 13D0     	 beq .L530
3070:../4g_module/mdm_handler.c **** 	{
3071:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 12799              	 .loc 3 3071 0
 12800 0032 0D4B     	 ldr r3,.L533+4
 12801 0034 1B78     	 ldrb r3,[r3]
 12802 0036 0133     	 adds r3,r3,#1
 12803 0038 DAB2     	 uxtb r2,r3
 12804 003a 0B4B     	 ldr r3,.L533+4
 12805 003c 1A70     	 strb r2,[r3]
3072:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 12806              	 .loc 3 3072 0
 12807 003e 0A4B     	 ldr r3,.L533+4
 12808 0040 1B78     	 ldrb r3,[r3]
 12809 0042 022B     	 cmp r3,#2
 12810 0044 02D8     	 bhi .L531
3073:../4g_module/mdm_handler.c **** 		{
3074:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 12811              	 .loc 3 3074 0
 12812 0046 0423     	 movs r3,#4
 12813 0048 FB71     	 strb r3,[r7,#7]
 12814 004a 06E0     	 b .L530
 12815              	.L531:
3075:../4g_module/mdm_handler.c **** 		}
3076:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 12816              	 .loc 3 3076 0
 12817 004c 064B     	 ldr r3,.L533+4
 12818 004e 1B78     	 ldrb r3,[r3]
 12819 0050 032B     	 cmp r3,#3
 12820 0052 02D9     	 bls .L530
3077:../4g_module/mdm_handler.c **** 		{
3078:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 12821              	 .loc 3 3078 0
 12822 0054 044B     	 ldr r3,.L533+4
 12823 0056 0022     	 movs r2,#0
 12824 0058 1A70     	 strb r2,[r3]
 12825              	.L530:
3079:../4g_module/mdm_handler.c **** 		}
3080:../4g_module/mdm_handler.c **** 	}
3081:../4g_module/mdm_handler.c **** 	return len_retStatus;
 12826              	 .loc 3 3081 0
 12827 005a FB79     	 ldrb r3,[r7,#7]
3082:../4g_module/mdm_handler.c **** }
 12828              	 .loc 3 3082 0
 12829 005c 1846     	 mov r0,r3
 12830 005e 0837     	 adds r7,r7,#8
 12831              	.LCFI249:
 12832              	 .cfi_def_cfa_offset 8
 12833 0060 BD46     	 mov sp,r7
 12834              	.LCFI250:
 12835              	 .cfi_def_cfa_register 13
 12836              	 
 12837 0062 80BD     	 pop {r7,pc}
 12838              	.L534:
 12839              	 .align 2
 12840              	.L533:
 12841 0064 A0000000 	 .word .LC14
 12842 0068 00000000 	 .word lsu8_retryCnt.15067
 12843              	 .cfi_endproc
 12844              	.LFE650:
 12846              	 .section .text.mod_extractGpsData,"ax",%progbits
 12847              	 .align 2
 12848              	 .thumb
 12849              	 .thumb_func
 12851              	mod_extractGpsData:
 12852              	.LFB651:
3083:../4g_module/mdm_handler.c **** 
3084:../4g_module/mdm_handler.c **** /**************************************************************************
3085:../4g_module/mdm_handler.c ****  * Function Name	:	mod_extractGpsData
3086:../4g_module/mdm_handler.c ****  *
3087:../4g_module/mdm_handler.c ****  * Description   	:	This function used to extract the GPS data
3088:../4g_module/mdm_handler.c ****  *
3089:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3090:../4g_module/mdm_handler.c ****  *
3091:../4g_module/mdm_handler.c ****  * Return values 	:	en_responseRetCodes_t - return status
3092:../4g_module/mdm_handler.c ****  *
3093:../4g_module/mdm_handler.c ****  ****************************************************************************/
3094:../4g_module/mdm_handler.c **** static en_responseRetCodes_t mod_extractGpsData(void)
3095:../4g_module/mdm_handler.c **** {
 12853              	 .loc 3 3095 0
 12854              	 .cfi_startproc
 12855              	 
 12856              	 
 12857 0000 80B5     	 push {r7,lr}
 12858              	.LCFI251:
 12859              	 .cfi_def_cfa_offset 8
 12860              	 .cfi_offset 7,-8
 12861              	 .cfi_offset 14,-4
 12862 0002 82B0     	 sub sp,sp,#8
 12863              	.LCFI252:
 12864              	 .cfi_def_cfa_offset 16
 12865 0004 00AF     	 add r7,sp,#0
 12866              	.LCFI253:
 12867              	 .cfi_def_cfa_register 7
3096:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 12868              	 .loc 3 3096 0
 12869 0006 0423     	 movs r3,#4
 12870 0008 FB71     	 strb r3,[r7,#7]
3097:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCnt = 0;
3098:../4g_module/mdm_handler.c **** 	uint8_t *lu8p_Ptr = NULL;
 12871              	 .loc 3 3098 0
 12872 000a 0023     	 movs r3,#0
 12873 000c 3B60     	 str r3,[r7]
3099:../4g_module/mdm_handler.c **** 
3100:../4g_module/mdm_handler.c **** 	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_GPS_DATA, (uint8_t *) NEW_LINE);
 12874              	 .loc 3 3100 0
 12875 000e 2120     	 movs r0,#33
 12876 0010 1449     	 ldr r1,.L540
 12877 0012 FFF7FEFF 	 bl mod_sendCmdGetRsp
 12878 0016 0346     	 mov r3,r0
 12879 0018 FB71     	 strb r3,[r7,#7]
3101:../4g_module/mdm_handler.c **** 	if (E_RET_SUCCESS == len_retStatus)
 12880              	 .loc 3 3101 0
 12881 001a FB79     	 ldrb r3,[r7,#7]
 12882 001c 002B     	 cmp r3,#0
 12883 001e 05D1     	 bne .L536
3102:../4g_module/mdm_handler.c **** 	{
3103:../4g_module/mdm_handler.c **** 		lsu8_retryCnt = 0;
 12884              	 .loc 3 3103 0
 12885 0020 114B     	 ldr r3,.L540+4
 12886 0022 0022     	 movs r2,#0
 12887 0024 1A70     	 strb r2,[r3]
3104:../4g_module/mdm_handler.c **** 		len_retStatus = E_RET_SUCCESS;
 12888              	 .loc 3 3104 0
 12889 0026 0023     	 movs r3,#0
 12890 0028 FB71     	 strb r3,[r7,#7]
 12891 002a 16E0     	 b .L537
 12892              	.L536:
3105:../4g_module/mdm_handler.c **** 	}
3106:../4g_module/mdm_handler.c **** 	else if (E_RET_INPROGRESS != len_retStatus)
 12893              	 .loc 3 3106 0
 12894 002c FB79     	 ldrb r3,[r7,#7]
 12895 002e 042B     	 cmp r3,#4
 12896 0030 13D0     	 beq .L537
3107:../4g_module/mdm_handler.c **** 	{
3108:../4g_module/mdm_handler.c **** 		lsu8_retryCnt++;
 12897              	 .loc 3 3108 0
 12898 0032 0D4B     	 ldr r3,.L540+4
 12899 0034 1B78     	 ldrb r3,[r3]
 12900 0036 0133     	 adds r3,r3,#1
 12901 0038 DAB2     	 uxtb r2,r3
 12902 003a 0B4B     	 ldr r3,.L540+4
 12903 003c 1A70     	 strb r2,[r3]
3109:../4g_module/mdm_handler.c **** 		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 12904              	 .loc 3 3109 0
 12905 003e 0A4B     	 ldr r3,.L540+4
 12906 0040 1B78     	 ldrb r3,[r3]
 12907 0042 022B     	 cmp r3,#2
 12908 0044 02D8     	 bhi .L538
3110:../4g_module/mdm_handler.c **** 		{
3111:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_INPROGRESS;
 12909              	 .loc 3 3111 0
 12910 0046 0423     	 movs r3,#4
 12911 0048 FB71     	 strb r3,[r7,#7]
 12912 004a 06E0     	 b .L537
 12913              	.L538:
3112:../4g_module/mdm_handler.c **** 		}
3113:../4g_module/mdm_handler.c **** 		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 12914              	 .loc 3 3113 0
 12915 004c 064B     	 ldr r3,.L540+4
 12916 004e 1B78     	 ldrb r3,[r3]
 12917 0050 032B     	 cmp r3,#3
 12918 0052 02D9     	 bls .L537
3114:../4g_module/mdm_handler.c **** 		{
3115:../4g_module/mdm_handler.c **** 			lsu8_retryCnt = 0;
 12919              	 .loc 3 3115 0
 12920 0054 044B     	 ldr r3,.L540+4
 12921 0056 0022     	 movs r2,#0
 12922 0058 1A70     	 strb r2,[r3]
 12923              	.L537:
3116:../4g_module/mdm_handler.c **** 		}
3117:../4g_module/mdm_handler.c **** 	}
3118:../4g_module/mdm_handler.c **** 	return len_retStatus;
 12924              	 .loc 3 3118 0
 12925 005a FB79     	 ldrb r3,[r7,#7]
3119:../4g_module/mdm_handler.c **** }
 12926              	 .loc 3 3119 0
 12927 005c 1846     	 mov r0,r3
 12928 005e 0837     	 adds r7,r7,#8
 12929              	.LCFI254:
 12930              	 .cfi_def_cfa_offset 8
 12931 0060 BD46     	 mov sp,r7
 12932              	.LCFI255:
 12933              	 .cfi_def_cfa_register 13
 12934              	 
 12935 0062 80BD     	 pop {r7,pc}
 12936              	.L541:
 12937              	 .align 2
 12938              	.L540:
 12939 0064 A0000000 	 .word .LC14
 12940 0068 00000000 	 .word lsu8_retryCnt.15073
 12941              	 .cfi_endproc
 12942              	.LFE651:
 12944              	 .section .text.mod_4gHandler,"ax",%progbits
 12945              	 .align 2
 12946              	 .global mod_4gHandler
 12947              	 .thumb
 12948              	 .thumb_func
 12950              	mod_4gHandler:
 12951              	.LFB652:
3120:../4g_module/mdm_handler.c **** 
3121:../4g_module/mdm_handler.c **** /**************************************************************************
3122:../4g_module/mdm_handler.c ****  * Function Name	:	mod_4gHandler
3123:../4g_module/mdm_handler.c ****  *
3124:../4g_module/mdm_handler.c ****  * Description   	:	This function has different states for initialization of
3125:../4g_module/mdm_handler.c ****  * 						components, MQTT config, MQTT open, MQTT connect and it
3126:../4g_module/mdm_handler.c ****  * 						also handles network recovery mechanisms.
3127:../4g_module/mdm_handler.c ****  *
3128:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3129:../4g_module/mdm_handler.c ****  *
3130:../4g_module/mdm_handler.c ****  * Return values 	:	void
3131:../4g_module/mdm_handler.c ****  *
3132:../4g_module/mdm_handler.c ****  ****************************************************************************/
3133:../4g_module/mdm_handler.c **** void mod_4gHandler(void)
3134:../4g_module/mdm_handler.c **** {
 12952              	 .loc 3 3134 0
 12953              	 .cfi_startproc
 12954              	 
 12955              	 
 12956 0000 80B5     	 push {r7,lr}
 12957              	.LCFI256:
 12958              	 .cfi_def_cfa_offset 8
 12959              	 .cfi_offset 7,-8
 12960              	 .cfi_offset 14,-4
 12961 0002 82B0     	 sub sp,sp,#8
 12962              	.LCFI257:
 12963              	 .cfi_def_cfa_offset 16
 12964 0004 00AF     	 add r7,sp,#0
 12965              	.LCFI258:
 12966              	 .cfi_def_cfa_register 7
3135:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 12967              	 .loc 3 3135 0
 12968 0006 0423     	 movs r3,#4
 12969 0008 FB71     	 strb r3,[r7,#7]
3136:../4g_module/mdm_handler.c **** 	static uint8_t lsu8_retryCount = 0;
3137:../4g_module/mdm_handler.c **** //	mod_receiveRsp();	//read and saved received byte in global buffer
3138:../4g_module/mdm_handler.c **** 
3139:../4g_module/mdm_handler.c **** 	if (gst_deviceStatus.mb_ismodemPwrDwn != true)
 12970              	 .loc 3 3139 0
 12971 000a A34B     	 ldr r3,.L590
 12972 000c 1B78     	 ldrb r3,[r3]
 12973 000e 83F00103 	 eor r3,r3,#1
 12974 0012 DBB2     	 uxtb r3,r3
 12975 0014 002B     	 cmp r3,#0
 12976 0016 00F03B81 	 beq .L542
3140:../4g_module/mdm_handler.c **** 	{
3141:../4g_module/mdm_handler.c **** 		switch (sen_4gRunState)
 12977              	 .loc 3 3141 0
 12978 001a A04B     	 ldr r3,.L590+4
 12979 001c 1B78     	 ldrb r3,[r3]
 12980 001e 102B     	 cmp r3,#16
 12981 0020 00F23581 	 bhi .L589
 12982 0024 01A2     	 adr r2,.L546
 12983 0026 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 12984 002a 00BF     	 .p2align 2
 12985              	.L546:
 12986 002c 8F020000 	 .word .L589+1
 12987 0030 71000000 	 .word .L547+1
 12988 0034 9D000000 	 .word .L548+1
 12989 0038 BB000000 	 .word .L549+1
 12990 003c D9000000 	 .word .L550+1
 12991 0040 F7000000 	 .word .L551+1
 12992 0044 15010000 	 .word .L552+1
 12993 0048 6B010000 	 .word .L553+1
 12994 004c 83010000 	 .word .L554+1
 12995 0050 9F010000 	 .word .L555+1
 12996 0054 8F020000 	 .word .L589+1
 12997 0058 C5010000 	 .word .L556+1
 12998 005c 5D020000 	 .word .L557+1
 12999 0060 27020000 	 .word .L558+1
 13000 0064 3F020000 	 .word .L559+1
 13001 0068 8F020000 	 .word .L589+1
 13002 006c 7B020000 	 .word .L561+1
 13003              	 .p2align 1
 13004              	.L547:
3142:../4g_module/mdm_handler.c **** 		{
3143:../4g_module/mdm_handler.c **** 			case E_MOD_IDLE_STATE:
3144:../4g_module/mdm_handler.c **** 			break;
3145:../4g_module/mdm_handler.c **** 
3146:../4g_module/mdm_handler.c **** 			case E_SET_URC_PORT_STATE:
3147:../4g_module/mdm_handler.c **** 				len_retStatus = mod_setUrcPort();
 13005              	 .loc 3 3147 0
 13006 0070 FFF7FEFF 	 bl mod_setUrcPort
 13007 0074 0346     	 mov r3,r0
 13008 0076 FB71     	 strb r3,[r7,#7]
3148:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13009              	 .loc 3 3148 0
 13010 0078 FB79     	 ldrb r3,[r7,#7]
 13011 007a 002B     	 cmp r3,#0
 13012 007c 02D0     	 beq .L562
3149:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13013              	 .loc 3 3149 0
 13014 007e FB79     	 ldrb r3,[r7,#7]
 13015 0080 042B     	 cmp r3,#4
 13016 0082 0AD0     	 beq .L563
 13017              	.L562:
3150:../4g_module/mdm_handler.c **** 				{
3151:../4g_module/mdm_handler.c **** 					mod_disable4gModule();
 13018              	 .loc 3 3151 0
 13019 0084 FFF7FEFF 	 bl mod_disable4gModule
3152:../4g_module/mdm_handler.c **** 					gst_deviceStatus.mb_ismodemPwrDwn = true;
 13020              	 .loc 3 3152 0
 13021 0088 834B     	 ldr r3,.L590
 13022 008a 0122     	 movs r2,#1
 13023 008c 1A70     	 strb r2,[r3]
3153:../4g_module/mdm_handler.c **** 					mod_enable4gModule();
 13024              	 .loc 3 3153 0
 13025 008e FFF7FEFF 	 bl mod_enable4gModule
3154:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_ECHO_OFF_STATE;
 13026              	 .loc 3 3154 0
 13027 0092 824B     	 ldr r3,.L590+4
 13028 0094 0222     	 movs r2,#2
 13029 0096 1A70     	 strb r2,[r3]
3155:../4g_module/mdm_handler.c **** 				}
3156:../4g_module/mdm_handler.c **** 			break;
 13030              	 .loc 3 3156 0
 13031 0098 FAE0     	 b .L542
 13032              	.L563:
 13033 009a F9E0     	 b .L542
 13034              	.L548:
3157:../4g_module/mdm_handler.c **** 
3158:../4g_module/mdm_handler.c **** 			case E_ECHO_OFF_STATE:
3159:../4g_module/mdm_handler.c **** 				len_retStatus = mod_echoOff();
 13035              	 .loc 3 3159 0
 13036 009c FFF7FEFF 	 bl mod_echoOff
 13037 00a0 0346     	 mov r3,r0
 13038 00a2 FB71     	 strb r3,[r7,#7]
3160:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13039              	 .loc 3 3160 0
 13040 00a4 FB79     	 ldrb r3,[r7,#7]
 13041 00a6 002B     	 cmp r3,#0
 13042 00a8 02D0     	 beq .L564
3161:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13043              	 .loc 3 3161 0
 13044 00aa FB79     	 ldrb r3,[r7,#7]
 13045 00ac 042B     	 cmp r3,#4
 13046 00ae 03D0     	 beq .L565
 13047              	.L564:
3162:../4g_module/mdm_handler.c **** 				{
3163:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_SET_FLOW_CTRL_STATE;
 13048              	 .loc 3 3163 0
 13049 00b0 7A4B     	 ldr r3,.L590+4
 13050 00b2 0322     	 movs r2,#3
 13051 00b4 1A70     	 strb r2,[r3]
3164:../4g_module/mdm_handler.c **** 				}
3165:../4g_module/mdm_handler.c **** 			break;
 13052              	 .loc 3 3165 0
 13053 00b6 EBE0     	 b .L542
 13054              	.L565:
 13055 00b8 EAE0     	 b .L542
 13056              	.L549:
3166:../4g_module/mdm_handler.c **** 
3167:../4g_module/mdm_handler.c **** 			case E_SET_FLOW_CTRL_STATE:
3168:../4g_module/mdm_handler.c **** 				len_retStatus = mod_setFlowCtrl();
 13057              	 .loc 3 3168 0
 13058 00ba FFF7FEFF 	 bl mod_setFlowCtrl
 13059 00be 0346     	 mov r3,r0
 13060 00c0 FB71     	 strb r3,[r7,#7]
3169:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13061              	 .loc 3 3169 0
 13062 00c2 FB79     	 ldrb r3,[r7,#7]
 13063 00c4 002B     	 cmp r3,#0
 13064 00c6 02D0     	 beq .L566
3170:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13065              	 .loc 3 3170 0
 13066 00c8 FB79     	 ldrb r3,[r7,#7]
 13067 00ca 042B     	 cmp r3,#4
 13068 00cc 03D0     	 beq .L567
 13069              	.L566:
3171:../4g_module/mdm_handler.c **** 				{
3172:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_EXTRACT_MODULE_INFO_STATE;
 13070              	 .loc 3 3172 0
 13071 00ce 734B     	 ldr r3,.L590+4
 13072 00d0 0422     	 movs r2,#4
 13073 00d2 1A70     	 strb r2,[r3]
3173:../4g_module/mdm_handler.c **** 				}
3174:../4g_module/mdm_handler.c **** 			break;
 13074              	 .loc 3 3174 0
 13075 00d4 DCE0     	 b .L542
 13076              	.L567:
 13077 00d6 DBE0     	 b .L542
 13078              	.L550:
3175:../4g_module/mdm_handler.c **** 
3176:../4g_module/mdm_handler.c **** 			case E_EXTRACT_MODULE_INFO_STATE:
3177:../4g_module/mdm_handler.c **** 				len_retStatus = mod_extractModInfo();
 13079              	 .loc 3 3177 0
 13080 00d8 FFF7FEFF 	 bl mod_extractModInfo
 13081 00dc 0346     	 mov r3,r0
 13082 00de FB71     	 strb r3,[r7,#7]
3178:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13083              	 .loc 3 3178 0
 13084 00e0 FB79     	 ldrb r3,[r7,#7]
 13085 00e2 002B     	 cmp r3,#0
 13086 00e4 02D0     	 beq .L568
3179:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13087              	 .loc 3 3179 0
 13088 00e6 FB79     	 ldrb r3,[r7,#7]
 13089 00e8 042B     	 cmp r3,#4
 13090 00ea 03D0     	 beq .L569
 13091              	.L568:
3180:../4g_module/mdm_handler.c **** 				{
3181:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_SIM_STATUS_STATE;
 13092              	 .loc 3 3181 0
 13093 00ec 6B4B     	 ldr r3,.L590+4
 13094 00ee 0522     	 movs r2,#5
 13095 00f0 1A70     	 strb r2,[r3]
3182:../4g_module/mdm_handler.c **** 				}
3183:../4g_module/mdm_handler.c **** 			break;
 13096              	 .loc 3 3183 0
 13097 00f2 CDE0     	 b .L542
 13098              	.L569:
 13099 00f4 CCE0     	 b .L542
 13100              	.L551:
3184:../4g_module/mdm_handler.c **** 
3185:../4g_module/mdm_handler.c **** 			case E_SIM_STATUS_STATE:
3186:../4g_module/mdm_handler.c **** 				len_retStatus = mod_simStatus();
 13101              	 .loc 3 3186 0
 13102 00f6 FFF7FEFF 	 bl mod_simStatus
 13103 00fa 0346     	 mov r3,r0
 13104 00fc FB71     	 strb r3,[r7,#7]
3187:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13105              	 .loc 3 3187 0
 13106 00fe FB79     	 ldrb r3,[r7,#7]
 13107 0100 002B     	 cmp r3,#0
 13108 0102 02D0     	 beq .L570
3188:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13109              	 .loc 3 3188 0
 13110 0104 FB79     	 ldrb r3,[r7,#7]
 13111 0106 042B     	 cmp r3,#4
 13112 0108 03D0     	 beq .L571
 13113              	.L570:
3189:../4g_module/mdm_handler.c **** 				{
3190:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_NETWORK_STATUS_STATE;
 13114              	 .loc 3 3190 0
 13115 010a 644B     	 ldr r3,.L590+4
 13116 010c 0622     	 movs r2,#6
 13117 010e 1A70     	 strb r2,[r3]
3191:../4g_module/mdm_handler.c **** 				}
3192:../4g_module/mdm_handler.c **** 			break;
 13118              	 .loc 3 3192 0
 13119 0110 BEE0     	 b .L542
 13120              	.L571:
 13121 0112 BDE0     	 b .L542
 13122              	.L552:
3193:../4g_module/mdm_handler.c **** 
3194:../4g_module/mdm_handler.c **** 			case E_NETWORK_STATUS_STATE:
3195:../4g_module/mdm_handler.c **** 				len_retStatus = mod_networkStatus();
 13123              	 .loc 3 3195 0
 13124 0114 FFF7FEFF 	 bl mod_networkStatus
 13125 0118 0346     	 mov r3,r0
 13126 011a FB71     	 strb r3,[r7,#7]
3196:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13127              	 .loc 3 3196 0
 13128 011c FB79     	 ldrb r3,[r7,#7]
 13129 011e 002B     	 cmp r3,#0
 13130 0120 03D1     	 bne .L572
3197:../4g_module/mdm_handler.c **** 				{
3198:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_SIGNAL_QUALITY_STATE;
 13131              	 .loc 3 3198 0
 13132 0122 5E4B     	 ldr r3,.L590+4
 13133 0124 0722     	 movs r2,#7
 13134 0126 1A70     	 strb r2,[r3]
 13135 0128 1EE0     	 b .L573
 13136              	.L572:
3199:../4g_module/mdm_handler.c **** 				}
3200:../4g_module/mdm_handler.c **** 				else if (E_RET_FAILED == len_retStatus)
 13137              	 .loc 3 3200 0
 13138 012a FB79     	 ldrb r3,[r7,#7]
 13139 012c 022B     	 cmp r3,#2
 13140 012e 1BD1     	 bne .L573
3201:../4g_module/mdm_handler.c **** 				{
3202:../4g_module/mdm_handler.c **** 					lsu8_retryCount++;
 13141              	 .loc 3 3202 0
 13142 0130 5B4B     	 ldr r3,.L590+8
 13143 0132 1B78     	 ldrb r3,[r3]
 13144 0134 0133     	 adds r3,r3,#1
 13145 0136 DAB2     	 uxtb r2,r3
 13146 0138 594B     	 ldr r3,.L590+8
 13147 013a 1A70     	 strb r2,[r3]
3203:../4g_module/mdm_handler.c **** 					gb_isMqttConnected = false;
 13148              	 .loc 3 3203 0
 13149 013c 594B     	 ldr r3,.L590+12
 13150 013e 0022     	 movs r2,#0
 13151 0140 1A70     	 strb r2,[r3]
3204:../4g_module/mdm_handler.c **** 					if (lsu8_retryCount >= 6)
 13152              	 .loc 3 3204 0
 13153 0142 574B     	 ldr r3,.L590+8
 13154 0144 1B78     	 ldrb r3,[r3]
 13155 0146 052B     	 cmp r3,#5
 13156 0148 06D9     	 bls .L574
3205:../4g_module/mdm_handler.c **** 					{
3206:../4g_module/mdm_handler.c **** 						lsu8_retryCount = 0;
 13157              	 .loc 3 3206 0
 13158 014a 554B     	 ldr r3,.L590+8
 13159 014c 0022     	 movs r2,#0
 13160 014e 1A70     	 strb r2,[r3]
3207:../4g_module/mdm_handler.c **** 						sen_4gRunState = E_MOD_RESET_STATE;
 13161              	 .loc 3 3207 0
 13162 0150 524B     	 ldr r3,.L590+4
 13163 0152 0C22     	 movs r2,#12
 13164 0154 1A70     	 strb r2,[r3]
 13165 0156 07E0     	 b .L573
 13166              	.L574:
3208:../4g_module/mdm_handler.c **** 					}
3209:../4g_module/mdm_handler.c **** 					else
3210:../4g_module/mdm_handler.c **** 					{
3211:../4g_module/mdm_handler.c **** 						tm_set4gRunTimer(TIMER_5S);
 13167              	 .loc 3 3211 0
 13168 0158 41F28830 	 movw r0,#5000
 13169 015c FFF7FEFF 	 bl tm_set4gRunTimer
3212:../4g_module/mdm_handler.c **** 						sen_4gRunState = E_MOD_WAIT_STATE;
 13170              	 .loc 3 3212 0
 13171 0160 4E4B     	 ldr r3,.L590+4
 13172 0162 1022     	 movs r2,#16
 13173 0164 1A70     	 strb r2,[r3]
3213:../4g_module/mdm_handler.c **** 					}
3214:../4g_module/mdm_handler.c **** 				}
3215:../4g_module/mdm_handler.c **** 			break;
 13174              	 .loc 3 3215 0
 13175 0166 93E0     	 b .L542
 13176              	.L573:
 13177 0168 92E0     	 b .L542
 13178              	.L553:
3216:../4g_module/mdm_handler.c **** 
3217:../4g_module/mdm_handler.c **** 			case E_SIGNAL_QUALITY_STATE:
3218:../4g_module/mdm_handler.c **** 				len_retStatus = mod_signalQuality();
 13179              	 .loc 3 3218 0
 13180 016a FFF7FEFF 	 bl mod_signalQuality
 13181 016e 0346     	 mov r3,r0
 13182 0170 FB71     	 strb r3,[r7,#7]
3219:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13183              	 .loc 3 3219 0
 13184 0172 FB79     	 ldrb r3,[r7,#7]
 13185 0174 002B     	 cmp r3,#0
 13186 0176 03D1     	 bne .L575
3220:../4g_module/mdm_handler.c **** 				{
3221:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_EXTRACT_TIME_DATE_STATE;
 13187              	 .loc 3 3221 0
 13188 0178 484B     	 ldr r3,.L590+4
 13189 017a 0822     	 movs r2,#8
 13190 017c 1A70     	 strb r2,[r3]
3222:../4g_module/mdm_handler.c **** 				}
3223:../4g_module/mdm_handler.c **** 			break;
 13191              	 .loc 3 3223 0
 13192 017e 87E0     	 b .L542
 13193              	.L575:
 13194 0180 86E0     	 b .L542
 13195              	.L554:
3224:../4g_module/mdm_handler.c **** 
3225:../4g_module/mdm_handler.c **** 			case E_EXTRACT_TIME_DATE_STATE:
3226:../4g_module/mdm_handler.c **** 				len_retStatus = mod_extractDateTime();
 13196              	 .loc 3 3226 0
 13197 0182 FFF7FEFF 	 bl mod_extractDateTime
 13198 0186 0346     	 mov r3,r0
 13199 0188 FB71     	 strb r3,[r7,#7]
3227:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13200              	 .loc 3 3227 0
 13201 018a FB79     	 ldrb r3,[r7,#7]
 13202 018c 002B     	 cmp r3,#0
 13203 018e 05D1     	 bne .L576
 13204              	.LBB6:
3228:../4g_module/mdm_handler.c **** 				{
3229:../4g_module/mdm_handler.c **** 					//SuperLooptime_End();
3230:../4g_module/mdm_handler.c **** 					//SuperLooptime_Start();
3231:../4g_module/mdm_handler.c **** 					set_RTC();
 13205              	 .loc 3 3231 0
 13206 0190 FFF7FEFF 	 bl set_RTC
3232:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MQTT_OPEN_STATE;
 13207              	 .loc 3 3232 0
 13208 0194 414B     	 ldr r3,.L590+4
 13209 0196 0922     	 movs r2,#9
 13210 0198 1A70     	 strb r2,[r3]
 13211              	.LBE6:
3233:../4g_module/mdm_handler.c **** 				}
3234:../4g_module/mdm_handler.c **** 			break;
 13212              	 .loc 3 3234 0
 13213 019a 79E0     	 b .L542
 13214              	.L576:
 13215 019c 78E0     	 b .L542
 13216              	.L555:
3235:../4g_module/mdm_handler.c **** 
3236:../4g_module/mdm_handler.c **** 			case E_MQTT_OPEN_STATE:
3237:../4g_module/mdm_handler.c **** 				len_retStatus = mod_mqttOpenConfig();
 13217              	 .loc 3 3237 0
 13218 019e FFF7FEFF 	 bl mod_mqttOpenConfig
 13219 01a2 0346     	 mov r3,r0
 13220 01a4 FB71     	 strb r3,[r7,#7]
3238:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13221              	 .loc 3 3238 0
 13222 01a6 FB79     	 ldrb r3,[r7,#7]
 13223 01a8 002B     	 cmp r3,#0
 13224 01aa 03D1     	 bne .L577
3239:../4g_module/mdm_handler.c **** 				{
3240:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MQTT_CONNECT_STATE;
 13225              	 .loc 3 3240 0
 13226 01ac 3B4B     	 ldr r3,.L590+4
 13227 01ae 0B22     	 movs r2,#11
 13228 01b0 1A70     	 strb r2,[r3]
 13229 01b2 06E0     	 b .L578
 13230              	.L577:
3241:../4g_module/mdm_handler.c **** 				}
3242:../4g_module/mdm_handler.c **** 				else if (E_RET_INPROGRESS != len_retStatus)
 13231              	 .loc 3 3242 0
 13232 01b4 FB79     	 ldrb r3,[r7,#7]
 13233 01b6 042B     	 cmp r3,#4
 13234 01b8 03D0     	 beq .L578
3243:../4g_module/mdm_handler.c **** 				{
3244:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MOD_RESET_STATE;
 13235              	 .loc 3 3244 0
 13236 01ba 384B     	 ldr r3,.L590+4
 13237 01bc 0C22     	 movs r2,#12
 13238 01be 1A70     	 strb r2,[r3]
3245:../4g_module/mdm_handler.c **** 				}
3246:../4g_module/mdm_handler.c **** 			break;
 13239              	 .loc 3 3246 0
 13240 01c0 66E0     	 b .L542
 13241              	.L578:
 13242 01c2 65E0     	 b .L542
 13243              	.L556:
3247:../4g_module/mdm_handler.c **** 
3248:../4g_module/mdm_handler.c **** 			case E_MQTT_CONNECT_STATE:
3249:../4g_module/mdm_handler.c **** 				len_retStatus = mod_mqttConnect();
 13244              	 .loc 3 3249 0
 13245 01c4 FFF7FEFF 	 bl mod_mqttConnect
 13246 01c8 0346     	 mov r3,r0
 13247 01ca FB71     	 strb r3,[r7,#7]
3250:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13248              	 .loc 3 3250 0
 13249 01cc FB79     	 ldrb r3,[r7,#7]
 13250 01ce 002B     	 cmp r3,#0
 13251 01d0 03D1     	 bne .L579
3251:../4g_module/mdm_handler.c **** 				{
3252:../4g_module/mdm_handler.c **** //					gb_isMqttConnected = true;
3253:../4g_module/mdm_handler.c **** //					sen_4gRunState = E_MOD_IDLE_STATE;
3254:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_GPS_CFG_STATE;
 13252              	 .loc 3 3254 0
 13253 01d2 324B     	 ldr r3,.L590+4
 13254 01d4 0D22     	 movs r2,#13
 13255 01d6 1A70     	 strb r2,[r3]
 13256 01d8 24E0     	 b .L580
 13257              	.L579:
3255:../4g_module/mdm_handler.c **** 				}
3256:../4g_module/mdm_handler.c **** 				else if(E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 13258              	 .loc 3 3256 0
 13259 01da FB79     	 ldrb r3,[r7,#7]
 13260 01dc 012B     	 cmp r3,#1
 13261 01de 13D1     	 bne .L581
3257:../4g_module/mdm_handler.c **** 				{
3258:../4g_module/mdm_handler.c **** 					sgu8_mqttClientId++;
 13262              	 .loc 3 3258 0
 13263 01e0 314B     	 ldr r3,.L590+16
 13264 01e2 1B78     	 ldrb r3,[r3]
 13265 01e4 0133     	 adds r3,r3,#1
 13266 01e6 DAB2     	 uxtb r2,r3
 13267 01e8 2F4B     	 ldr r3,.L590+16
 13268 01ea 1A70     	 strb r2,[r3]
3259:../4g_module/mdm_handler.c **** 					if (sgu8_mqttClientId > 5)
 13269              	 .loc 3 3259 0
 13270 01ec 2E4B     	 ldr r3,.L590+16
 13271 01ee 1B78     	 ldrb r3,[r3]
 13272 01f0 052B     	 cmp r3,#5
 13273 01f2 02D9     	 bls .L582
3260:../4g_module/mdm_handler.c **** 					{
3261:../4g_module/mdm_handler.c **** 						sgu8_mqttClientId = 0;
 13274              	 .loc 3 3261 0
 13275 01f4 2C4B     	 ldr r3,.L590+16
 13276 01f6 0022     	 movs r2,#0
 13277 01f8 1A70     	 strb r2,[r3]
 13278              	.L582:
3262:../4g_module/mdm_handler.c **** 					}
3263:../4g_module/mdm_handler.c **** 					sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 13279              	 .loc 3 3263 0
 13280 01fa 2C4B     	 ldr r3,.L590+20
 13281 01fc 0D22     	 movs r2,#13
 13282 01fe 1A70     	 strb r2,[r3]
3264:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MQTT_OPEN_STATE;
 13283              	 .loc 3 3264 0
 13284 0200 264B     	 ldr r3,.L590+4
 13285 0202 0922     	 movs r2,#9
 13286 0204 1A70     	 strb r2,[r3]
 13287 0206 0DE0     	 b .L580
 13288              	.L581:
3265:../4g_module/mdm_handler.c **** 				}
3266:../4g_module/mdm_handler.c **** 				else if (E_RET_CONN_CLOSED_ERROR == len_retStatus)
 13289              	 .loc 3 3266 0
 13290 0208 FB79     	 ldrb r3,[r7,#7]
 13291 020a 0A2B     	 cmp r3,#10
 13292 020c 03D1     	 bne .L583
3267:../4g_module/mdm_handler.c **** 				{
3268:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MQTT_OPEN_STATE;
 13293              	 .loc 3 3268 0
 13294 020e 234B     	 ldr r3,.L590+4
 13295 0210 0922     	 movs r2,#9
 13296 0212 1A70     	 strb r2,[r3]
 13297 0214 06E0     	 b .L580
 13298              	.L583:
3269:../4g_module/mdm_handler.c **** 				}
3270:../4g_module/mdm_handler.c **** 				else if (E_RET_INPROGRESS != len_retStatus)
 13299              	 .loc 3 3270 0
 13300 0216 FB79     	 ldrb r3,[r7,#7]
 13301 0218 042B     	 cmp r3,#4
 13302 021a 03D0     	 beq .L580
3271:../4g_module/mdm_handler.c **** 				{
3272:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_MOD_RESET_STATE;
 13303              	 .loc 3 3272 0
 13304 021c 1F4B     	 ldr r3,.L590+4
 13305 021e 0C22     	 movs r2,#12
 13306 0220 1A70     	 strb r2,[r3]
3273:../4g_module/mdm_handler.c **** 				}
3274:../4g_module/mdm_handler.c **** 			break;
 13307              	 .loc 3 3274 0
 13308 0222 35E0     	 b .L542
 13309              	.L580:
 13310 0224 34E0     	 b .L542
 13311              	.L558:
3275:../4g_module/mdm_handler.c **** 
3276:../4g_module/mdm_handler.c **** 			case E_GPS_CFG_STATE:
3277:../4g_module/mdm_handler.c **** 				len_retStatus = mod_gpsCfg();
 13312              	 .loc 3 3277 0
 13313 0226 FFF7FEFF 	 bl mod_gpsCfg
 13314 022a 0346     	 mov r3,r0
 13315 022c FB71     	 strb r3,[r7,#7]
3278:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13316              	 .loc 3 3278 0
 13317 022e FB79     	 ldrb r3,[r7,#7]
 13318 0230 002B     	 cmp r3,#0
 13319 0232 03D1     	 bne .L584
3279:../4g_module/mdm_handler.c **** 				{
3280:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_GPS_ENABLE_STATE;
 13320              	 .loc 3 3280 0
 13321 0234 194B     	 ldr r3,.L590+4
 13322 0236 0E22     	 movs r2,#14
 13323 0238 1A70     	 strb r2,[r3]
3281:../4g_module/mdm_handler.c **** 				}
3282:../4g_module/mdm_handler.c **** 			break;
 13324              	 .loc 3 3282 0
 13325 023a 29E0     	 b .L542
 13326              	.L584:
 13327 023c 28E0     	 b .L542
 13328              	.L559:
3283:../4g_module/mdm_handler.c **** 
3284:../4g_module/mdm_handler.c **** 			case E_GPS_ENABLE_STATE:
3285:../4g_module/mdm_handler.c **** 				len_retStatus = mod_gpsEnable();
 13329              	 .loc 3 3285 0
 13330 023e FFF7FEFF 	 bl mod_gpsEnable
 13331 0242 0346     	 mov r3,r0
 13332 0244 FB71     	 strb r3,[r7,#7]
3286:../4g_module/mdm_handler.c **** 				if (E_RET_SUCCESS == len_retStatus)
 13333              	 .loc 3 3286 0
 13334 0246 FB79     	 ldrb r3,[r7,#7]
 13335 0248 002B     	 cmp r3,#0
 13336 024a 06D1     	 bne .L585
3287:../4g_module/mdm_handler.c **** 				{
3288:../4g_module/mdm_handler.c **** 					gb_isMqttConnected = true;
 13337              	 .loc 3 3288 0
 13338 024c 154B     	 ldr r3,.L590+12
 13339 024e 0122     	 movs r2,#1
 13340 0250 1A70     	 strb r2,[r3]
3289:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_SET_URC_PORT_STATE;
 13341              	 .loc 3 3289 0
 13342 0252 124B     	 ldr r3,.L590+4
 13343 0254 0122     	 movs r2,#1
 13344 0256 1A70     	 strb r2,[r3]
3290:../4g_module/mdm_handler.c **** 				}
3291:../4g_module/mdm_handler.c **** 			break;
 13345              	 .loc 3 3291 0
 13346 0258 1AE0     	 b .L542
 13347              	.L585:
 13348 025a 19E0     	 b .L542
 13349              	.L557:
3292:../4g_module/mdm_handler.c **** 
3293:../4g_module/mdm_handler.c **** 			case E_GET_GPS_DATA_STATE:
3294:../4g_module/mdm_handler.c **** 
3295:../4g_module/mdm_handler.c **** 			break;
3296:../4g_module/mdm_handler.c **** 
3297:../4g_module/mdm_handler.c **** 			case E_MOD_RESET_STATE:
3298:../4g_module/mdm_handler.c **** 				len_retStatus = mod_mqttDisableEnableFunctionality();
 13350              	 .loc 3 3298 0
 13351 025c FFF7FEFF 	 bl mod_mqttDisableEnableFunctionality
 13352 0260 0346     	 mov r3,r0
 13353 0262 FB71     	 strb r3,[r7,#7]
3299:../4g_module/mdm_handler.c **** 				if ((E_RET_SUCCESS == len_retStatus)
 13354              	 .loc 3 3299 0
 13355 0264 FB79     	 ldrb r3,[r7,#7]
 13356 0266 002B     	 cmp r3,#0
 13357 0268 02D0     	 beq .L586
3300:../4g_module/mdm_handler.c **** 						|| (E_RET_INPROGRESS != len_retStatus))
 13358              	 .loc 3 3300 0
 13359 026a FB79     	 ldrb r3,[r7,#7]
 13360 026c 042B     	 cmp r3,#4
 13361 026e 03D0     	 beq .L587
 13362              	.L586:
3301:../4g_module/mdm_handler.c **** 				{
3302:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_NETWORK_STATUS_STATE;
 13363              	 .loc 3 3302 0
 13364 0270 0A4B     	 ldr r3,.L590+4
 13365 0272 0622     	 movs r2,#6
 13366 0274 1A70     	 strb r2,[r3]
3303:../4g_module/mdm_handler.c **** 				}
3304:../4g_module/mdm_handler.c **** 			break;
 13367              	 .loc 3 3304 0
 13368 0276 0BE0     	 b .L542
 13369              	.L587:
 13370 0278 0AE0     	 b .L542
 13371              	.L561:
3305:../4g_module/mdm_handler.c **** 
3306:../4g_module/mdm_handler.c **** 			case E_MOD_WAIT_STATE:
3307:../4g_module/mdm_handler.c **** 				if (tm_get4gRunTimerValue() == 0)
 13372              	 .loc 3 3307 0
 13373 027a FFF7FEFF 	 bl tm_get4gRunTimerValue
 13374 027e 0346     	 mov r3,r0
 13375 0280 002B     	 cmp r3,#0
 13376 0282 03D1     	 bne .L588
3308:../4g_module/mdm_handler.c **** 				{
3309:../4g_module/mdm_handler.c **** 					sen_4gRunState = E_NETWORK_STATUS_STATE;
 13377              	 .loc 3 3309 0
 13378 0284 054B     	 ldr r3,.L590+4
 13379 0286 0622     	 movs r2,#6
 13380 0288 1A70     	 strb r2,[r3]
3310:../4g_module/mdm_handler.c **** 				}
3311:../4g_module/mdm_handler.c **** 
3312:../4g_module/mdm_handler.c **** 			break;
 13381              	 .loc 3 3312 0
 13382 028a 01E0     	 b .L542
 13383              	.L588:
 13384 028c 00E0     	 b .L542
 13385              	.L589:
3313:../4g_module/mdm_handler.c **** 
3314:../4g_module/mdm_handler.c **** 			default:
3315:../4g_module/mdm_handler.c **** 			break;
 13386              	 .loc 3 3315 0
 13387 028e 00BF     	 nop
 13388              	.L542:
3316:../4g_module/mdm_handler.c **** 		}
3317:../4g_module/mdm_handler.c **** 	}
3318:../4g_module/mdm_handler.c **** }
 13389              	 .loc 3 3318 0
 13390 0290 0837     	 adds r7,r7,#8
 13391              	.LCFI259:
 13392              	 .cfi_def_cfa_offset 8
 13393 0292 BD46     	 mov sp,r7
 13394              	.LCFI260:
 13395              	 .cfi_def_cfa_register 13
 13396              	 
 13397 0294 80BD     	 pop {r7,pc}
 13398              	.L591:
 13399 0296 00BF     	 .align 2
 13400              	.L590:
 13401 0298 00000000 	 .word gst_deviceStatus
 13402 029c 00000000 	 .word sen_4gRunState
 13403 02a0 00000000 	 .word lsu8_retryCount.15079
 13404 02a4 00000000 	 .word gb_isMqttConnected
 13405 02a8 00000000 	 .word sgu8_mqttClientId
 13406 02ac 00000000 	 .word sen_openMqttState
 13407              	 .cfi_endproc
 13408              	.LFE652:
 13410              	 .section .rodata
 13411 02af 00       	 .align 2
 13412              	.LC49:
 13413 02b0 222F4765 	 .ascii "\"/Gev3/fleet\"\000"
 13413      76332F66 
 13413      6C656574 
 13413      2200
 13414 02be 0000     	 .section .text.mod_pub10sPackExtractGps,"ax",%progbits
 13415              	 .align 2
 13416              	 .global mod_pub10sPackExtractGps
 13417              	 .thumb
 13418              	 .thumb_func
 13420              	mod_pub10sPackExtractGps:
 13421              	.LFB653:
3319:../4g_module/mdm_handler.c **** 
3320:../4g_module/mdm_handler.c **** 
3321:../4g_module/mdm_handler.c **** /**************************************************************************
3322:../4g_module/mdm_handler.c ****  * Function Name	:	mod_pub10sPackExtractGps
3323:../4g_module/mdm_handler.c ****  *
3324:../4g_module/mdm_handler.c ****  * Description   	:	This function used to send 10s packet and Extract GPS data
3325:../4g_module/mdm_handler.c ****  *
3326:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3327:../4g_module/mdm_handler.c ****  *
3328:../4g_module/mdm_handler.c ****  * Return values 	:	void
3329:../4g_module/mdm_handler.c ****  *
3330:../4g_module/mdm_handler.c ****  ****************************************************************************/
3331:../4g_module/mdm_handler.c **** /*en_responseRetCodes_t mod_pub10sPackExtractGps(void)
3332:../4g_module/mdm_handler.c ****  {
3333:../4g_module/mdm_handler.c **** 	static uint8_t lu8_retryCont = 0;
3334:../4g_module/mdm_handler.c **** 	char size[sizeof(int) * 8 + 1];
3335:../4g_module/mdm_handler.c **** 	const char *filename = "data.txt";
3336:../4g_module/mdm_handler.c **** 
3337:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
3338:../4g_module/mdm_handler.c **** 
3339:../4g_module/mdm_handler.c **** 	switch (sen_10sPacektPubState) {
3340:../4g_module/mdm_handler.c **** 	case E_PREPARE_PACKET_STATE:
3341:../4g_module/mdm_handler.c **** 		 In this state prepare the send packet
3342:../4g_module/mdm_handler.c **** 		epoch_time();
3343:../4g_module/mdm_handler.c **** 		Process_4G_Event_Data();
3344:../4g_module/mdm_handler.c **** 
3345:../4g_module/mdm_handler.c **** 		memset(Eventbuffer_4Gcomm, 0, 512);					//change to 512
3346:../4g_module/mdm_handler.c **** 
3347:../4g_module/mdm_handler.c **** 		pb_ostream_t stream1;
3348:../4g_module/mdm_handler.c **** 
3349:../4g_module/mdm_handler.c **** 		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm,
3350:../4g_module/mdm_handler.c **** 				sizeof(Eventbuffer_4Gcomm));
3351:../4g_module/mdm_handler.c **** 		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
3352:../4g_module/mdm_handler.c **** 		writePacketsToFile(filename, Eventbuffer_4Gcomm,strlen(Eventbuffer_4Gcomm));
3353:../4g_module/mdm_handler.c **** 		sen_10sPacektPubState = E_PUB_10S_PACKET_STATE;
3354:../4g_module/mdm_handler.c **** 		break;
3355:../4g_module/mdm_handler.c **** 
3356:../4g_module/mdm_handler.c **** 	case E_PUB_10S_PACKET_STATE:
3357:../4g_module/mdm_handler.c **** 		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
3358:../4g_module/mdm_handler.c **** 				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
3359:../4g_module/mdm_handler.c **** 
3360:../4g_module/mdm_handler.c **** 		if (E_RET_SUCCESS == len_retStatus) {
3361:../4g_module/mdm_handler.c **** 			lu8_retryCont = 0;
3362:../4g_module/mdm_handler.c **** 			//tm_set4gRunTimer(TIMEOUT_10S);
3363:../4g_module/mdm_handler.c **** 			//SuperLooptime_End();
3364:../4g_module/mdm_handler.c **** 			//SuperLooptime_Start();
3365:../4g_module/mdm_handler.c **** 			sen_10sPacektPubState = E_WAIT_POST_PUB_STATE;
3366:../4g_module/mdm_handler.c **** 		}
3367:../4g_module/mdm_handler.c **** 		else if(E_RET_CME_ERROR == len_retStatus)
3368:../4g_module/mdm_handler.c **** 		{
3369:../4g_module/mdm_handler.c **** 			if(sgu16_cmeError == 58)
3370:../4g_module/mdm_handler.c **** 			{
3371:../4g_module/mdm_handler.c **** 				lu8_retryCont = 0;
3372:../4g_module/mdm_handler.c **** 				gb_isMqttConnected = false;
3373:../4g_module/mdm_handler.c **** 				sen_10sPacektPubState = E_PREPARE_PACKET_STATE;
3374:../4g_module/mdm_handler.c **** 				sen_4gRunState = E_MOD_RESET_STATE;
3375:../4g_module/mdm_handler.c **** 			}
3376:../4g_module/mdm_handler.c **** 		}
3377:../4g_module/mdm_handler.c **** 		else if (E_RET_INPROGRESS != len_retStatus) {
3378:../4g_module/mdm_handler.c **** 			lu8_retryCont++;
3379:../4g_module/mdm_handler.c **** 			if (3 > lu8_retryCont) {
3380:../4g_module/mdm_handler.c **** 				lu8_retryCont = 0;
3381:../4g_module/mdm_handler.c **** 				gb_isMqttConnected = false;
3382:../4g_module/mdm_handler.c **** 				sen_10sPacektPubState = E_PREPARE_PACKET_STATE;
3383:../4g_module/mdm_handler.c **** 				sen_4gRunState = E_MQTT_OPEN_STATE;
3384:../4g_module/mdm_handler.c **** 			}
3385:../4g_module/mdm_handler.c **** 		}
3386:../4g_module/mdm_handler.c **** 		break;
3387:../4g_module/mdm_handler.c **** 
3388:../4g_module/mdm_handler.c **** 	case E_WAIT_POST_PUB_STATE:
3389:../4g_module/mdm_handler.c **** 		 In this state wait for timeout and after timeout change the state
3390:../4g_module/mdm_handler.c **** 		RTC_GetTime(&current_time);
3391:../4g_module/mdm_handler.c **** 		if (current_time.seconds%10 == 0U) {
3392:../4g_module/mdm_handler.c **** 			sen_10sPacektPubState = E_PREPARE_PACKET_STATE;
3393:../4g_module/mdm_handler.c **** 			//print_struct_uart(&TD1);
3394:../4g_module/mdm_handler.c **** 		}
3395:../4g_module/mdm_handler.c **** 
3396:../4g_module/mdm_handler.c **** 		if (current_time.seconds%3 == 0U)
3397:../4g_module/mdm_handler.c **** 		{
3398:../4g_module/mdm_handler.c **** 			Get_CurrentLocation();
3399:../4g_module/mdm_handler.c **** 		}
3400:../4g_module/mdm_handler.c **** 		break;
3401:../4g_module/mdm_handler.c **** 
3402:../4g_module/mdm_handler.c **** 	default:
3403:../4g_module/mdm_handler.c **** 		break;
3404:../4g_module/mdm_handler.c **** 	}
3405:../4g_module/mdm_handler.c **** 
3406:../4g_module/mdm_handler.c **** 	return len_retStatus;
3407:../4g_module/mdm_handler.c **** }*/
3408:../4g_module/mdm_handler.c **** 
3409:../4g_module/mdm_handler.c **** en_responseRetCodes_t mod_pub10sPackExtractGps(void)
3410:../4g_module/mdm_handler.c **** {
 13422              	 .loc 3 3410 0
 13423              	 .cfi_startproc
 13424              	 
 13425              	 
 13426 0000 B0B5     	 push {r4,r5,r7,lr}
 13427              	.LCFI261:
 13428              	 .cfi_def_cfa_offset 16
 13429              	 .cfi_offset 4,-16
 13430              	 .cfi_offset 5,-12
 13431              	 .cfi_offset 7,-8
 13432              	 .cfi_offset 14,-4
 13433 0002 8CB0     	 sub sp,sp,#48
 13434              	.LCFI262:
 13435              	 .cfi_def_cfa_offset 64
 13436 0004 00AF     	 add r7,sp,#0
 13437              	.LCFI263:
 13438              	 .cfi_def_cfa_register 7
3411:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 13439              	 .loc 3 3411 0
 13440 0006 0423     	 movs r3,#4
 13441 0008 87F82F30 	 strb r3,[r7,#47]
3412:../4g_module/mdm_handler.c **** 	static uint8_t lu8_retryCont = 0;
3413:../4g_module/mdm_handler.c **** 
3414:../4g_module/mdm_handler.c **** 	RTC_GetTime(&current_time);
 13442              	 .loc 3 3414 0
 13443 000c 6848     	 ldr r0,.L599
 13444 000e FFF7FEFF 	 bl RTC_GetTime
3415:../4g_module/mdm_handler.c **** 
3416:../4g_module/mdm_handler.c **** 	if ((current_time.seconds % 3 == 0U) && (sgb_flagGps == false) && (sgb_packetFlag == false))
 13445              	 .loc 3 3416 0
 13446 0012 674B     	 ldr r3,.L599
 13447 0014 1B78     	 ldrb r3,[r3]
 13448 0016 C3F30503 	 ubfx r3,r3,#0,#6
 13449 001a DBB2     	 uxtb r3,r3
 13450 001c 1946     	 mov r1,r3
 13451 001e 654B     	 ldr r3,.L599+4
 13452 0020 83FB0132 	 smull r3,r2,r3,r1
 13453 0024 CB17     	 asrs r3,r1,#31
 13454 0026 D21A     	 subs r2,r2,r3
 13455 0028 1346     	 mov r3,r2
 13456 002a 5B00     	 lsls r3,r3,#1
 13457 002c 1344     	 add r3,r3,r2
 13458 002e CA1A     	 subs r2,r1,r3
 13459 0030 002A     	 cmp r2,#0
 13460 0032 13D1     	 bne .L593
 13461              	 .loc 3 3416 0 is_stmt 0 discriminator 1
 13462 0034 604B     	 ldr r3,.L599+8
 13463 0036 1B78     	 ldrb r3,[r3]
 13464 0038 83F00103 	 eor r3,r3,#1
 13465 003c DBB2     	 uxtb r3,r3
 13466 003e 002B     	 cmp r3,#0
 13467 0040 0CD0     	 beq .L593
 13468              	 .loc 3 3416 0 discriminator 2
 13469 0042 5E4B     	 ldr r3,.L599+12
 13470 0044 1B78     	 ldrb r3,[r3]
 13471 0046 83F00103 	 eor r3,r3,#1
 13472 004a DBB2     	 uxtb r3,r3
 13473 004c 002B     	 cmp r3,#0
 13474 004e 05D0     	 beq .L593
3417:../4g_module/mdm_handler.c **** 	{
3418:../4g_module/mdm_handler.c **** 		Get_CurrentLocation();
 13475              	 .loc 3 3418 0 is_stmt 1
 13476 0050 FFF7FEFF 	 bl Get_CurrentLocation
3419:../4g_module/mdm_handler.c **** 		sgb_flagGps = true;
 13477              	 .loc 3 3419 0
 13478 0054 584B     	 ldr r3,.L599+8
 13479 0056 0122     	 movs r2,#1
 13480 0058 1A70     	 strb r2,[r3]
 13481 005a 17E0     	 b .L594
 13482              	.L593:
3420:../4g_module/mdm_handler.c **** 	}
3421:../4g_module/mdm_handler.c **** 	else if ((sgb_flagGps == true) && (current_time.seconds % 3) != 0U)
 13483              	 .loc 3 3421 0
 13484 005c 564B     	 ldr r3,.L599+8
 13485 005e 1B78     	 ldrb r3,[r3]
 13486 0060 002B     	 cmp r3,#0
 13487 0062 13D0     	 beq .L594
 13488              	 .loc 3 3421 0 is_stmt 0 discriminator 1
 13489 0064 524B     	 ldr r3,.L599
 13490 0066 1B78     	 ldrb r3,[r3]
 13491 0068 C3F30503 	 ubfx r3,r3,#0,#6
 13492 006c DBB2     	 uxtb r3,r3
 13493 006e 1946     	 mov r1,r3
 13494 0070 504B     	 ldr r3,.L599+4
 13495 0072 83FB0132 	 smull r3,r2,r3,r1
 13496 0076 CB17     	 asrs r3,r1,#31
 13497 0078 D21A     	 subs r2,r2,r3
 13498 007a 1346     	 mov r3,r2
 13499 007c 5B00     	 lsls r3,r3,#1
 13500 007e 1344     	 add r3,r3,r2
 13501 0080 CA1A     	 subs r2,r1,r3
 13502 0082 002A     	 cmp r2,#0
 13503 0084 02D0     	 beq .L594
3422:../4g_module/mdm_handler.c **** 	{
3423:../4g_module/mdm_handler.c **** 		sgb_flagGps = false;
 13504              	 .loc 3 3423 0 is_stmt 1
 13505 0086 4C4B     	 ldr r3,.L599+8
 13506 0088 0022     	 movs r2,#0
 13507 008a 1A70     	 strb r2,[r3]
 13508              	.L594:
3424:../4g_module/mdm_handler.c **** 	}
3425:../4g_module/mdm_handler.c **** 
3426:../4g_module/mdm_handler.c **** 	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
 13509              	 .loc 3 3426 0
 13510 008c 484B     	 ldr r3,.L599
 13511 008e 1B78     	 ldrb r3,[r3]
 13512 0090 C3F30503 	 ubfx r3,r3,#0,#6
 13513 0094 DBB2     	 uxtb r3,r3
 13514 0096 1946     	 mov r1,r3
 13515 0098 494B     	 ldr r3,.L599+16
 13516 009a 83FB0123 	 smull r2,r3,r3,r1
 13517 009e 9A10     	 asrs r2,r3,#2
 13518 00a0 CB17     	 asrs r3,r1,#31
 13519 00a2 D21A     	 subs r2,r2,r3
 13520 00a4 1346     	 mov r3,r2
 13521 00a6 9B00     	 lsls r3,r3,#2
 13522 00a8 1344     	 add r3,r3,r2
 13523 00aa 5B00     	 lsls r3,r3,#1
 13524 00ac CA1A     	 subs r2,r1,r3
 13525 00ae 002A     	 cmp r2,#0
 13526 00b0 2CD1     	 bne .L595
 13527              	 .loc 3 3426 0 is_stmt 0 discriminator 1
 13528 00b2 444B     	 ldr r3,.L599+20
 13529 00b4 1B78     	 ldrb r3,[r3]
 13530 00b6 83F00103 	 eor r3,r3,#1
 13531 00ba DBB2     	 uxtb r3,r3
 13532 00bc 002B     	 cmp r3,#0
 13533 00be 25D0     	 beq .L595
 13534              	.LBB7:
3427:../4g_module/mdm_handler.c **** 	{
3428:../4g_module/mdm_handler.c **** 		epoch_time();
 13535              	 .loc 3 3428 0 is_stmt 1
 13536 00c0 FFF7FEFF 	 bl epoch_time
3429:../4g_module/mdm_handler.c **** 		Process_4G_Event_Data();
 13537              	 .loc 3 3429 0
 13538 00c4 FFF7FEFF 	 bl Process_4G_Event_Data
3430:../4g_module/mdm_handler.c **** 		memset(Eventbuffer_4Gcomm, 0, 512);
 13539              	 .loc 3 3430 0
 13540 00c8 3F48     	 ldr r0,.L599+24
 13541 00ca 0021     	 movs r1,#0
 13542 00cc 4FF40072 	 mov r2,#512
 13543 00d0 FFF7FEFF 	 bl memset
3431:../4g_module/mdm_handler.c **** 		pb_ostream_t stream1;
3432:../4g_module/mdm_handler.c **** 		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
 13544              	 .loc 3 3432 0
 13545 00d4 3B46     	 mov r3,r7
 13546 00d6 1846     	 mov r0,r3
 13547 00d8 3B49     	 ldr r1,.L599+24
 13548 00da 4FF40072 	 mov r2,#512
 13549 00de FFF7FEFF 	 bl pb_ostream_from_buffer
 13550 00e2 07F11804 	 add r4,r7,#24
 13551 00e6 3D46     	 mov r5,r7
 13552 00e8 0FCD     	 ldmia r5!,{r0,r1,r2,r3}
 13553 00ea 0FC4     	 stmia r4!,{r0,r1,r2,r3}
 13554 00ec 2B68     	 ldr r3,[r5]
 13555 00ee 2360     	 str r3,[r4]
3433:../4g_module/mdm_handler.c **** 		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
 13556              	 .loc 3 3433 0
 13557 00f0 07F11803 	 add r3,r7,#24
 13558 00f4 1846     	 mov r0,r3
 13559 00f6 3549     	 ldr r1,.L599+28
 13560 00f8 354A     	 ldr r2,.L599+32
 13561 00fa FFF7FEFF 	 bl pb_encode
3434:../4g_module/mdm_handler.c **** 		sgb_packetFlag = true;
 13562              	 .loc 3 3434 0
 13563 00fe 2F4B     	 ldr r3,.L599+12
 13564 0100 0122     	 movs r2,#1
 13565 0102 1A70     	 strb r2,[r3]
3435:../4g_module/mdm_handler.c **** 		sgb_flag4g = true;
 13566              	 .loc 3 3435 0
 13567 0104 2F4B     	 ldr r3,.L599+20
 13568 0106 0122     	 movs r2,#1
 13569 0108 1A70     	 strb r2,[r3]
 13570              	.LBE7:
3427:../4g_module/mdm_handler.c **** 		epoch_time();
 13571              	 .loc 3 3427 0
 13572 010a 19E0     	 b .L596
 13573              	.L595:
3436:../4g_module/mdm_handler.c **** 	}
3437:../4g_module/mdm_handler.c **** 	else if ((sgb_flag4g == true) && (current_time.seconds % 10 != 0U))
 13574              	 .loc 3 3437 0
 13575 010c 2D4B     	 ldr r3,.L599+20
 13576 010e 1B78     	 ldrb r3,[r3]
 13577 0110 002B     	 cmp r3,#0
 13578 0112 15D0     	 beq .L596
 13579              	 .loc 3 3437 0 is_stmt 0 discriminator 1
 13580 0114 264B     	 ldr r3,.L599
 13581 0116 1B78     	 ldrb r3,[r3]
 13582 0118 C3F30503 	 ubfx r3,r3,#0,#6
 13583 011c DBB2     	 uxtb r3,r3
 13584 011e 1946     	 mov r1,r3
 13585 0120 274B     	 ldr r3,.L599+16
 13586 0122 83FB0123 	 smull r2,r3,r3,r1
 13587 0126 9A10     	 asrs r2,r3,#2
 13588 0128 CB17     	 asrs r3,r1,#31
 13589 012a D21A     	 subs r2,r2,r3
 13590 012c 1346     	 mov r3,r2
 13591 012e 9B00     	 lsls r3,r3,#2
 13592 0130 1344     	 add r3,r3,r2
 13593 0132 5B00     	 lsls r3,r3,#1
 13594 0134 CA1A     	 subs r2,r1,r3
 13595 0136 002A     	 cmp r2,#0
 13596 0138 02D0     	 beq .L596
3438:../4g_module/mdm_handler.c **** 	{
3439:../4g_module/mdm_handler.c **** 		sgb_flag4g = false;
 13597              	 .loc 3 3439 0 is_stmt 1
 13598 013a 224B     	 ldr r3,.L599+20
 13599 013c 0022     	 movs r2,#0
 13600 013e 1A70     	 strb r2,[r3]
 13601              	.L596:
3440:../4g_module/mdm_handler.c **** 	}
3441:../4g_module/mdm_handler.c **** 
3442:../4g_module/mdm_handler.c **** 	if (sgb_packetFlag == true)
 13602              	 .loc 3 3442 0
 13603 0140 1E4B     	 ldr r3,.L599+12
 13604 0142 1B78     	 ldrb r3,[r3]
 13605 0144 002B     	 cmp r3,#0
 13606 0146 2ED0     	 beq .L597
3443:../4g_module/mdm_handler.c **** 	{
3444:../4g_module/mdm_handler.c **** 		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
3445:../4g_module/mdm_handler.c **** 				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 13607              	 .loc 3 3445 0
 13608 0148 1F48     	 ldr r0,.L599+24
 13609 014a FFF7FEFF 	 bl strlen
 13610 014e 0346     	 mov r3,r0
3444:../4g_module/mdm_handler.c **** 				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 13611              	 .loc 3 3444 0
 13612 0150 9BB2     	 uxth r3,r3
 13613 0152 1D48     	 ldr r0,.L599+24
 13614 0154 1946     	 mov r1,r3
 13615 0156 1F4A     	 ldr r2,.L599+36
 13616 0158 FFF7FEFF 	 bl mod_mqttPublishData
 13617 015c 0346     	 mov r3,r0
 13618 015e 87F82F30 	 strb r3,[r7,#47]
3446:../4g_module/mdm_handler.c **** 
3447:../4g_module/mdm_handler.c **** 		if (E_RET_SUCCESS == len_retStatus)
 13619              	 .loc 3 3447 0
 13620 0162 97F82F30 	 ldrb r3,[r7,#47]
 13621 0166 002B     	 cmp r3,#0
 13622 0168 03D1     	 bne .L598
3448:../4g_module/mdm_handler.c **** 		{
3449:../4g_module/mdm_handler.c **** 			sgb_packetFlag = false;
 13623              	 .loc 3 3449 0
 13624 016a 144B     	 ldr r3,.L599+12
 13625 016c 0022     	 movs r2,#0
 13626 016e 1A70     	 strb r2,[r3]
 13627 0170 19E0     	 b .L597
 13628              	.L598:
3450:../4g_module/mdm_handler.c **** 		}
3451:../4g_module/mdm_handler.c **** 		else if (E_RET_INPROGRESS != len_retStatus)
 13629              	 .loc 3 3451 0
 13630 0172 97F82F30 	 ldrb r3,[r7,#47]
 13631 0176 042B     	 cmp r3,#4
 13632 0178 15D0     	 beq .L597
3452:../4g_module/mdm_handler.c **** 		{
3453:../4g_module/mdm_handler.c **** 			lu8_retryCont++;
 13633              	 .loc 3 3453 0
 13634 017a 174B     	 ldr r3,.L599+40
 13635 017c 1B78     	 ldrb r3,[r3]
 13636 017e 0133     	 adds r3,r3,#1
 13637 0180 DAB2     	 uxtb r2,r3
 13638 0182 154B     	 ldr r3,.L599+40
 13639 0184 1A70     	 strb r2,[r3]
3454:../4g_module/mdm_handler.c **** 			if (3 > lu8_retryCont)
 13640              	 .loc 3 3454 0
 13641 0186 144B     	 ldr r3,.L599+40
 13642 0188 1B78     	 ldrb r3,[r3]
 13643 018a 022B     	 cmp r3,#2
 13644 018c 0BD8     	 bhi .L597
3455:../4g_module/mdm_handler.c **** 			{
3456:../4g_module/mdm_handler.c **** 				lu8_retryCont = 0;
 13645              	 .loc 3 3456 0
 13646 018e 124B     	 ldr r3,.L599+40
 13647 0190 0022     	 movs r2,#0
 13648 0192 1A70     	 strb r2,[r3]
3457:../4g_module/mdm_handler.c **** 
3458:../4g_module/mdm_handler.c **** 				//write to SD card
3459:../4g_module/mdm_handler.c **** 
3460:../4g_module/mdm_handler.c **** 				sgb_packetFlag = false;
 13649              	 .loc 3 3460 0
 13650 0194 094B     	 ldr r3,.L599+12
 13651 0196 0022     	 movs r2,#0
 13652 0198 1A70     	 strb r2,[r3]
3461:../4g_module/mdm_handler.c **** 				gb_isMqttConnected = false;
 13653              	 .loc 3 3461 0
 13654 019a 104B     	 ldr r3,.L599+44
 13655 019c 0022     	 movs r2,#0
 13656 019e 1A70     	 strb r2,[r3]
3462:../4g_module/mdm_handler.c **** 				sen_4gRunState = E_MQTT_OPEN_STATE;
 13657              	 .loc 3 3462 0
 13658 01a0 0F4B     	 ldr r3,.L599+48
 13659 01a2 0922     	 movs r2,#9
 13660 01a4 1A70     	 strb r2,[r3]
 13661              	.L597:
3463:../4g_module/mdm_handler.c **** 			}
3464:../4g_module/mdm_handler.c **** 		}
3465:../4g_module/mdm_handler.c **** 	}
3466:../4g_module/mdm_handler.c **** }
 13662              	 .loc 3 3466 0
 13663 01a6 1846     	 mov r0,r3
 13664 01a8 3037     	 adds r7,r7,#48
 13665              	.LCFI264:
 13666              	 .cfi_def_cfa_offset 16
 13667 01aa BD46     	 mov sp,r7
 13668              	.LCFI265:
 13669              	 .cfi_def_cfa_register 13
 13670              	 
 13671 01ac B0BD     	 pop {r4,r5,r7,pc}
 13672              	.L600:
 13673 01ae 00BF     	 .align 2
 13674              	.L599:
 13675 01b0 00000000 	 .word current_time
 13676 01b4 56555555 	 .word 1431655766
 13677 01b8 00000000 	 .word sgb_flagGps
 13678 01bc 00000000 	 .word sgb_packetFlag
 13679 01c0 67666666 	 .word 1717986919
 13680 01c4 00000000 	 .word sgb_flag4g
 13681 01c8 00000000 	 .word Eventbuffer_4Gcomm
 13682 01cc 00000000 	 .word vcu_fleet_fleet_10_sec_msg
 13683 01d0 00000000 	 .word TD1
 13684 01d4 B0020000 	 .word .LC49
 13685 01d8 00000000 	 .word lu8_retryCont.15104
 13686 01dc 00000000 	 .word gb_isMqttConnected
 13687 01e0 00000000 	 .word sen_4gRunState
 13688              	 .cfi_endproc
 13689              	.LFE653:
 13691              	 .section .text.mod_3sGpsProcess,"ax",%progbits
 13692              	 .align 2
 13693              	 .global mod_3sGpsProcess
 13694              	 .thumb
 13695              	 .thumb_func
 13697              	mod_3sGpsProcess:
 13698              	.LFB654:
3467:../4g_module/mdm_handler.c **** /**************************************************************************
3468:../4g_module/mdm_handler.c ****  * Function Name	:	mod_3sGpsProcess
3469:../4g_module/mdm_handler.c ****  *
3470:../4g_module/mdm_handler.c ****  * Description   	:	This function used to get GPS data at every 3 sec
3471:../4g_module/mdm_handler.c ****  *
3472:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3473:../4g_module/mdm_handler.c ****  *
3474:../4g_module/mdm_handler.c ****  * Return values 	:	void
3475:../4g_module/mdm_handler.c ****  *
3476:../4g_module/mdm_handler.c ****  ****************************************************************************/
3477:../4g_module/mdm_handler.c **** en_responseRetCodes_t mod_3sGpsProcess()
3478:../4g_module/mdm_handler.c **** {
 13699              	 .loc 3 3478 0
 13700              	 .cfi_startproc
 13701              	 
 13702              	 
 13703 0000 80B5     	 push {r7,lr}
 13704              	.LCFI266:
 13705              	 .cfi_def_cfa_offset 8
 13706              	 .cfi_offset 7,-8
 13707              	 .cfi_offset 14,-4
 13708 0002 82B0     	 sub sp,sp,#8
 13709              	.LCFI267:
 13710              	 .cfi_def_cfa_offset 16
 13711 0004 00AF     	 add r7,sp,#0
 13712              	.LCFI268:
 13713              	 .cfi_def_cfa_register 7
3479:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 13714              	 .loc 3 3479 0
 13715 0006 0423     	 movs r3,#4
 13716 0008 FB71     	 strb r3,[r7,#7]
3480:../4g_module/mdm_handler.c **** 
3481:../4g_module/mdm_handler.c **** 	switch(sen_gpsProcessState)
 13717              	 .loc 3 3481 0
 13718 000a 114B     	 ldr r3,.L609
 13719 000c 1B78     	 ldrb r3,[r3]
 13720 000e 002B     	 cmp r3,#0
 13721 0010 02D0     	 beq .L603
 13722 0012 012B     	 cmp r3,#1
 13723 0014 0CD0     	 beq .L604
3482:../4g_module/mdm_handler.c **** 	{
3483:../4g_module/mdm_handler.c **** 		case E_EXTRACT_GPS_DATA_STATE:
3484:../4g_module/mdm_handler.c **** //			len_retStatus = mod_extractGpsData();
3485:../4g_module/mdm_handler.c **** //			if (E_RET_SUCCESS == len_retStatus)
3486:../4g_module/mdm_handler.c **** //			{
3487:../4g_module/mdm_handler.c **** 			Get_CurrentLocation();
3488:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
3489:../4g_module/mdm_handler.c **** 				/* GPS Parsing from gu8arr_respBuffer */
3490:../4g_module/mdm_handler.c **** 				tm_set3s4gRunTimer(TIMEOUT_3S);
3491:../4g_module/mdm_handler.c **** 				sen_gpsProcessState = E_WAIT_POST_EXTRACTION_STATE;
3492:../4g_module/mdm_handler.c **** //			}
3493:../4g_module/mdm_handler.c **** 		break;
3494:../4g_module/mdm_handler.c **** 
3495:../4g_module/mdm_handler.c **** 		case E_WAIT_POST_EXTRACTION_STATE:
3496:../4g_module/mdm_handler.c **** 			/* In this state wait for timeout and after timeout change the state */
3497:../4g_module/mdm_handler.c **** 			if (tm_get3s4gRunTimerValue() == 0)
3498:../4g_module/mdm_handler.c **** 			{
3499:../4g_module/mdm_handler.c **** 				sen_gpsProcessState = E_EXTRACT_GPS_DATA_STATE;
3500:../4g_module/mdm_handler.c **** 			}
3501:../4g_module/mdm_handler.c **** 		break;
3502:../4g_module/mdm_handler.c **** 		default:
3503:../4g_module/mdm_handler.c **** 			break;
 13724              	 .loc 3 3503 0
 13725 0016 15E0     	 b .L605
 13726              	.L603:
3487:../4g_module/mdm_handler.c **** 			len_retStatus = E_RET_SUCCESS;
 13727              	 .loc 3 3487 0
 13728 0018 FFF7FEFF 	 bl Get_CurrentLocation
3488:../4g_module/mdm_handler.c **** 				/* GPS Parsing from gu8arr_respBuffer */
 13729              	 .loc 3 3488 0
 13730 001c 0023     	 movs r3,#0
 13731 001e FB71     	 strb r3,[r7,#7]
3490:../4g_module/mdm_handler.c **** 				sen_gpsProcessState = E_WAIT_POST_EXTRACTION_STATE;
 13732              	 .loc 3 3490 0
 13733 0020 40F6B830 	 movw r0,#3000
 13734 0024 FFF7FEFF 	 bl tm_set3s4gRunTimer
3491:../4g_module/mdm_handler.c **** //			}
 13735              	 .loc 3 3491 0
 13736 0028 094B     	 ldr r3,.L609
 13737 002a 0122     	 movs r2,#1
 13738 002c 1A70     	 strb r2,[r3]
3493:../4g_module/mdm_handler.c **** 
 13739              	 .loc 3 3493 0
 13740 002e 09E0     	 b .L605
 13741              	.L604:
3497:../4g_module/mdm_handler.c **** 			{
 13742              	 .loc 3 3497 0
 13743 0030 FFF7FEFF 	 bl tm_get3s4gRunTimerValue
 13744 0034 0346     	 mov r3,r0
 13745 0036 002B     	 cmp r3,#0
 13746 0038 03D1     	 bne .L606
3499:../4g_module/mdm_handler.c **** 			}
 13747              	 .loc 3 3499 0
 13748 003a 054B     	 ldr r3,.L609
 13749 003c 0022     	 movs r2,#0
 13750 003e 1A70     	 strb r2,[r3]
3501:../4g_module/mdm_handler.c **** 		default:
 13751              	 .loc 3 3501 0
 13752 0040 FFE7     	 b .L608
 13753              	.L606:
 13754              	.L608:
 13755 0042 00BF     	 nop
 13756              	.L605:
3504:../4g_module/mdm_handler.c **** 	}
3505:../4g_module/mdm_handler.c **** 
3506:../4g_module/mdm_handler.c **** 	return len_retStatus;
 13757              	 .loc 3 3506 0
 13758 0044 FB79     	 ldrb r3,[r7,#7]
3507:../4g_module/mdm_handler.c **** }
 13759              	 .loc 3 3507 0
 13760 0046 1846     	 mov r0,r3
 13761 0048 0837     	 adds r7,r7,#8
 13762              	.LCFI269:
 13763              	 .cfi_def_cfa_offset 8
 13764 004a BD46     	 mov sp,r7
 13765              	.LCFI270:
 13766              	 .cfi_def_cfa_register 13
 13767              	 
 13768 004c 80BD     	 pop {r7,pc}
 13769              	.L610:
 13770 004e 00BF     	 .align 2
 13771              	.L609:
 13772 0050 00000000 	 .word sen_gpsProcessState
 13773              	 .cfi_endproc
 13774              	.LFE654:
 13776              	 .section .text.mod_4gProcess,"ax",%progbits
 13777              	 .align 2
 13778              	 .global mod_4gProcess
 13779              	 .thumb
 13780              	 .thumb_func
 13782              	mod_4gProcess:
 13783              	.LFB655:
3508:../4g_module/mdm_handler.c **** 
3509:../4g_module/mdm_handler.c **** /**************************************************************************
3510:../4g_module/mdm_handler.c ****  * Function Name	:	mod_4gProcess
3511:../4g_module/mdm_handler.c ****  *
3512:../4g_module/mdm_handler.c ****  * Description   	:	This function used to process the 4G module
3513:../4g_module/mdm_handler.c ****  *
3514:../4g_module/mdm_handler.c ****  * Arguments     	:	void
3515:../4g_module/mdm_handler.c ****  *
3516:../4g_module/mdm_handler.c ****  * Return values 	:	void
3517:../4g_module/mdm_handler.c ****  *
3518:../4g_module/mdm_handler.c ****  ****************************************************************************/
3519:../4g_module/mdm_handler.c **** void mod_4gProcess()
3520:../4g_module/mdm_handler.c **** {
 13784              	 .loc 3 3520 0
 13785              	 .cfi_startproc
 13786              	 
 13787              	 
 13788 0000 80B5     	 push {r7,lr}
 13789              	.LCFI271:
 13790              	 .cfi_def_cfa_offset 8
 13791              	 .cfi_offset 7,-8
 13792              	 .cfi_offset 14,-4
 13793 0002 82B0     	 sub sp,sp,#8
 13794              	.LCFI272:
 13795              	 .cfi_def_cfa_offset 16
 13796 0004 00AF     	 add r7,sp,#0
 13797              	.LCFI273:
 13798              	 .cfi_def_cfa_register 7
3521:../4g_module/mdm_handler.c **** 	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 13799              	 .loc 3 3521 0
 13800 0006 0423     	 movs r3,#4
 13801 0008 FB71     	 strb r3,[r7,#7]
3522:../4g_module/mdm_handler.c **** 	switch(sen_4gProcessState)
 13802              	 .loc 3 3522 0
 13803 000a 124B     	 ldr r3,.L620
 13804 000c 1B78     	 ldrb r3,[r3]
 13805 000e 002B     	 cmp r3,#0
 13806 0010 02D0     	 beq .L613
 13807 0012 012B     	 cmp r3,#1
 13808 0014 0CD0     	 beq .L614
3523:../4g_module/mdm_handler.c **** 	{
3524:../4g_module/mdm_handler.c **** 	case E_GPS_PROCESS_STATE:
3525:../4g_module/mdm_handler.c **** 		len_retStatus = mod_3sGpsProcess();
3526:../4g_module/mdm_handler.c **** 		if (E_RET_SUCCESS == len_retStatus) {
3527:../4g_module/mdm_handler.c **** 			sen_4gProcessState = E_10S_PACKET_PROCESS_STATE;
3528:../4g_module/mdm_handler.c **** 		}
3529:../4g_module/mdm_handler.c **** 		break;
3530:../4g_module/mdm_handler.c **** 
3531:../4g_module/mdm_handler.c **** 	case E_10S_PACKET_PROCESS_STATE:
3532:../4g_module/mdm_handler.c **** 		len_retStatus = mod_pub10sPackExtractGps();
3533:../4g_module/mdm_handler.c **** 		if((E_RET_SUCCESS == len_retStatus) || (E_RET_IN_WAIT == len_retStatus)){
3534:../4g_module/mdm_handler.c **** 			sen_4gProcessState = E_GPS_PROCESS_STATE;
3535:../4g_module/mdm_handler.c **** 		}
3536:../4g_module/mdm_handler.c **** 		break;
3537:../4g_module/mdm_handler.c **** 	default:
3538:../4g_module/mdm_handler.c **** 		break;
 13809              	 .loc 3 3538 0
 13810 0016 1AE0     	 b .L611
 13811              	.L613:
3525:../4g_module/mdm_handler.c **** 		if (E_RET_SUCCESS == len_retStatus) {
 13812              	 .loc 3 3525 0
 13813 0018 FFF7FEFF 	 bl mod_3sGpsProcess
 13814 001c 0346     	 mov r3,r0
 13815 001e FB71     	 strb r3,[r7,#7]
3526:../4g_module/mdm_handler.c **** 			sen_4gProcessState = E_10S_PACKET_PROCESS_STATE;
 13816              	 .loc 3 3526 0
 13817 0020 FB79     	 ldrb r3,[r7,#7]
 13818 0022 002B     	 cmp r3,#0
 13819 0024 03D1     	 bne .L615
3527:../4g_module/mdm_handler.c **** 		}
 13820              	 .loc 3 3527 0
 13821 0026 0B4B     	 ldr r3,.L620
 13822 0028 0122     	 movs r2,#1
 13823 002a 1A70     	 strb r2,[r3]
3529:../4g_module/mdm_handler.c **** 
 13824              	 .loc 3 3529 0
 13825 002c 0FE0     	 b .L611
 13826              	.L615:
 13827 002e 0EE0     	 b .L611
 13828              	.L614:
3532:../4g_module/mdm_handler.c **** 		if((E_RET_SUCCESS == len_retStatus) || (E_RET_IN_WAIT == len_retStatus)){
 13829              	 .loc 3 3532 0
 13830 0030 FFF7FEFF 	 bl mod_pub10sPackExtractGps
 13831 0034 0346     	 mov r3,r0
 13832 0036 FB71     	 strb r3,[r7,#7]
3533:../4g_module/mdm_handler.c **** 			sen_4gProcessState = E_GPS_PROCESS_STATE;
 13833              	 .loc 3 3533 0
 13834 0038 FB79     	 ldrb r3,[r7,#7]
 13835 003a 002B     	 cmp r3,#0
 13836 003c 02D0     	 beq .L617
3533:../4g_module/mdm_handler.c **** 			sen_4gProcessState = E_GPS_PROCESS_STATE;
 13837              	 .loc 3 3533 0 is_stmt 0 discriminator 1
 13838 003e FB79     	 ldrb r3,[r7,#7]
 13839 0040 0E2B     	 cmp r3,#14
 13840 0042 03D1     	 bne .L618
 13841              	.L617:
3534:../4g_module/mdm_handler.c **** 		}
 13842              	 .loc 3 3534 0 is_stmt 1
 13843 0044 034B     	 ldr r3,.L620
 13844 0046 0022     	 movs r2,#0
 13845 0048 1A70     	 strb r2,[r3]
3536:../4g_module/mdm_handler.c **** 	default:
 13846              	 .loc 3 3536 0
 13847 004a FFE7     	 b .L619
 13848              	.L618:
 13849              	.L619:
 13850 004c 00BF     	 nop
 13851              	.L611:
3539:../4g_module/mdm_handler.c **** 	}
3540:../4g_module/mdm_handler.c **** }
 13852              	 .loc 3 3540 0
 13853 004e 0837     	 adds r7,r7,#8
 13854              	.LCFI274:
 13855              	 .cfi_def_cfa_offset 8
 13856 0050 BD46     	 mov sp,r7
 13857              	.LCFI275:
 13858              	 .cfi_def_cfa_register 13
 13859              	 
 13860 0052 80BD     	 pop {r7,pc}
 13861              	.L621:
 13862              	 .align 2
 13863              	.L620:
 13864 0054 00000000 	 .word sen_4gProcessState
 13865              	 .cfi_endproc
 13866              	.LFE655:
 13868              	 .section .bss.lsu8_retryCnt.14792,"aw",%nobits
 13871              	lsu8_retryCnt.14792:
 13872 0000 00       	 .space 1
 13873              	 .section .bss.lsu8_retryCnt.14797,"aw",%nobits
 13876              	lsu8_retryCnt.14797:
 13877 0000 00       	 .space 1
 13878              	 .section .bss.lsu8_retryCnt.14803,"aw",%nobits
 13881              	lsu8_retryCnt.14803:
 13882 0000 00       	 .space 1
 13883              	 .section .bss.lsu8_retryCnt.14809,"aw",%nobits
 13886              	lsu8_retryCnt.14809:
 13887 0000 00       	 .space 1
 13888              	 .section .bss.lsu8_retryCnt.14820,"aw",%nobits
 13891              	lsu8_retryCnt.14820:
 13892 0000 00       	 .space 1
 13893              	 .section .bss.lsu8_retryCnt.14826,"aw",%nobits
 13896              	lsu8_retryCnt.14826:
 13897 0000 00       	 .space 1
 13898              	 .section .bss.lsu8_retryCnt.14832,"aw",%nobits
 13901              	lsu8_retryCnt.14832:
 13902 0000 00       	 .space 1
 13903              	 .section .bss.lsu8_retryCnt.14839,"aw",%nobits
 13906              	lsu8_retryCnt.14839:
 13907 0000 00       	 .space 1
 13908              	 .section .bss.lsu8_retryCnt.14845,"aw",%nobits
 13911              	lsu8_retryCnt.14845:
 13912 0000 00       	 .space 1
 13913              	 .section .bss.lsu8_retryCnt.14859,"aw",%nobits
 13916              	lsu8_retryCnt.14859:
 13917 0000 00       	 .space 1
 13918              	 .section .bss.lsu8_retryCnt.14870,"aw",%nobits
 13921              	lsu8_retryCnt.14870:
 13922 0000 00       	 .space 1
 13923              	 .section .bss.lsu8_retryCnt.14881,"aw",%nobits
 13926              	lsu8_retryCnt.14881:
 13927 0000 00       	 .space 1
 13928              	 .section .bss.lsu8_retryCnt.14907,"aw",%nobits
 13931              	lsu8_retryCnt.14907:
 13932 0000 00       	 .space 1
 13933              	 .section .bss.lsu8_retryCnt.14913,"aw",%nobits
 13936              	lsu8_retryCnt.14913:
 13937 0000 00       	 .space 1
 13938              	 .section .bss.lsu8_retryCnt.14922,"aw",%nobits
 13941              	lsu8_retryCnt.14922:
 13942 0000 00       	 .space 1
 13943              	 .section .bss.lsu8_retryCnt.14930,"aw",%nobits
 13946              	lsu8_retryCnt.14930:
 13947 0000 00       	 .space 1
 13948              	 .section .bss.lsu8_retryCnt.14938,"aw",%nobits
 13951              	lsu8_retryCnt.14938:
 13952 0000 00       	 .space 1
 13953              	 .section .bss.lsu8_retryCnt.14946,"aw",%nobits
 13956              	lsu8_retryCnt.14946:
 13957 0000 00       	 .space 1
 13958              	 .section .bss.lsu8_retryCnt.14952,"aw",%nobits
 13961              	lsu8_retryCnt.14952:
 13962 0000 00       	 .space 1
 13963              	 .section .bss.lsu8_retryCnt.14967,"aw",%nobits
 13966              	lsu8_retryCnt.14967:
 13967 0000 00       	 .space 1
 13968              	 .section .bss.lsu8_retryCnt.14976,"aw",%nobits
 13971              	lsu8_retryCnt.14976:
 13972 0000 00       	 .space 1
 13973              	 .section .bss.lsu8_retryCnt.14989,"aw",%nobits
 13976              	lsu8_retryCnt.14989:
 13977 0000 00       	 .space 1
 13978              	 .section .bss.lsu8_retryCnt.15002,"aw",%nobits
 13981              	lsu8_retryCnt.15002:
 13982 0000 00       	 .space 1
 13983              	 .section .bss.lsu8_retryCnt.15007,"aw",%nobits
 13986              	lsu8_retryCnt.15007:
 13987 0000 00       	 .space 1
 13988              	 .section .bss.slu32_pos.15014,"aw",%nobits
 13989              	 .align 2
 13992              	slu32_pos.15014:
 13993 0000 00000000 	 .space 4
 13994              	 .section .bss.lu16_totalFileSize.15015,"aw",%nobits
 13995              	 .align 1
 13998              	lu16_totalFileSize.15015:
 13999 0000 0000     	 .space 2
 14000              	 .section .bss.lsu8_retryCnt.15012,"aw",%nobits
 14003              	lsu8_retryCnt.15012:
 14004 0000 00       	 .space 1
 14005              	 .section .bss.lsu8_retryCnt.15031,"aw",%nobits
 14008              	lsu8_retryCnt.15031:
 14009 0000 00       	 .space 1
 14010              	 .section .bss.lsu8_retryCnt.15060,"aw",%nobits
 14013              	lsu8_retryCnt.15060:
 14014 0000 00       	 .space 1
 14015              	 .section .bss.lsu8_retryCnt.15067,"aw",%nobits
 14018              	lsu8_retryCnt.15067:
 14019 0000 00       	 .space 1
 14020              	 .section .bss.lsu8_retryCnt.15073,"aw",%nobits
 14023              	lsu8_retryCnt.15073:
 14024 0000 00       	 .space 1
 14025              	 .section .bss.lsu8_retryCount.15079,"aw",%nobits
 14028              	lsu8_retryCount.15079:
 14029 0000 00       	 .space 1
 14030              	 .section .bss.lu8_retryCont.15104,"aw",%nobits
 14033              	lu8_retryCont.15104:
 14034 0000 00       	 .space 1
 14035              	 .text
 14036              	.Letext0:
 14037              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 14038              	 .file 5 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stddef.h"
 14039              	 .file 6 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\sys\\types.h"
 14040              	 .file 7 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 14041              	 .file 8 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/4g_module/comman.h"
 14042              	 .file 9 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/4g_module/at_handler.h"
 14043              	 .file 10 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/4g_module/mdm_handler.h"
 14044              	 .file 11 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 14045              	 .file 12 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc4_gpio.h"
 14046              	 .file 13 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc4_scu.h"
 14047              	 .file 14 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_usic.h"
 14048              	 .file 15 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_ccu4.h"
 14049              	 .file 16 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/GLOBAL_CCU4/global_ccu4.h"
 14050              	 .file 17 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_ccu8.h"
 14051              	 .file 18 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/GLOBAL_CCU8/global_ccu8.h"
 14052              	 .file 19 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/TIMER/timer.h"
 14053              	 .file 20 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_rtc.h"
 14054              	 .file 21 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_spi.h"
 14055              	 .file 22 "../4g_module/pb.h"
 14056              	 .file 23 "../4g_module/pb_encode.h"
 14057              	 .file 24 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Vcu_Config.h"
 14058              	 .file 25 "../4g_module/V26_10sec_fleet.pb.h"
 14059              	 .file 26 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/4g_module/ssl_cert_keys.h"
 14060              	 .file 27 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/cmsis_gcc.h"
 14061              	 .file 28 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/core_cm4.h"
 14062              	 .file 29 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
 14063              	 .file 30 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DIGITAL_IO/digital_io_extern.h"
 14064              	 .file 31 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/TIMER/timer_extern.h"
DEFINED SYMBOLS
                            *ABS*:00000000 mdm_handler.c
                            *COM*:00000001 gb_isMqttConnected
    {standard input}:21     .data.sgu8arr_caCert:00000000 $d
    {standard input}:24     .data.sgu8arr_caCert:00000000 sgu8arr_caCert
    {standard input}:1213   .data.sgu8arr_ccCert:00000000 $d
    {standard input}:1216   .data.sgu8arr_ccCert:00000000 sgu8arr_ccCert
    {standard input}:2438   .data.sgu8arr_ckCert:00000000 $d
    {standard input}:2441   .data.sgu8arr_ckCert:00000000 sgu8arr_ckCert
    {standard input}:4118   .text.XMC_GPIO_SetOutputHigh:00000000 $t
    {standard input}:4122   .text.XMC_GPIO_SetOutputHigh:00000000 XMC_GPIO_SetOutputHigh
    {standard input}:4166   .text.XMC_GPIO_SetOutputLow:00000000 $t
    {standard input}:4170   .text.XMC_GPIO_SetOutputLow:00000000 XMC_GPIO_SetOutputLow
    {standard input}:4213   .text.DIGITAL_IO_SetOutputHigh:00000000 $t
    {standard input}:4217   .text.DIGITAL_IO_SetOutputHigh:00000000 DIGITAL_IO_SetOutputHigh
    {standard input}:4257   .text.DIGITAL_IO_SetOutputLow:00000000 $t
    {standard input}:4261   .text.DIGITAL_IO_SetOutputLow:00000000 DIGITAL_IO_SetOutputLow
                            *COM*:00000004 cluster_door_in
                            *COM*:00000003 Vcu_OutPuts
                            *COM*:00000008 Combi_Switch_IN
                            *COM*:00000003 Seat_Switch_IN
                            *COM*:00000007 Door_Switch_IN
                            *COM*:0000002f Relay_Control_Switch_OUT
                            *COM*:00000018 Hvac_IN
                            *COM*:00000014 Switch_Ios_IN
                            *COM*:00000005 Motor_controller_OUT
                            *COM*:00000008 Lights_OUT
                            *COM*:00000008 Sensors_OUT
                            *COM*:00000006 Aux_Inputs
                            *COM*:00000012 Instrument_Cluster_OUT
                            *COM*:00000003 Seat_Belt_OUT
                            *COM*:00000004 Gear_OUT
                            *COM*:00000004 Instrumetcluster_DriveMode_OUT
                            *COM*:00000007 Door_Switch_OUT
                            *COM*:00000007 instrument_cluster_doorsvar
                            *COM*:00000004 cluster_door_out
                            *COM*:00000008 current_time
                            *COM*:00000008 timeval
                            *COM*:00000010 GPS_data_val
                            *COM*:00000004 epoch
                            *COM*:00000001 ambient_temp
    {standard input}:4326   .bss.gu8_signalQuality:00000000 gu8_signalQuality
    {standard input}:4327   .bss.gu8_signalQuality:00000000 $d
    {standard input}:4329   .bss.gu8arr_respBuffer:00000000 $d
    {standard input}:4332   .bss.gu8arr_respBuffer:00000000 gu8arr_respBuffer
    {standard input}:4335   .bss.gu8arr_productRevision:00000000 $d
    {standard input}:4338   .bss.gu8arr_productRevision:00000000 gu8arr_productRevision
    {standard input}:4341   .bss.gu8arr_IMEINum:00000000 $d
    {standard input}:4344   .bss.gu8arr_IMEINum:00000000 gu8arr_IMEINum
    {standard input}:4347   .bss.gu8arr_CCIDNum:00000000 $d
    {standard input}:4350   .bss.gu8arr_CCIDNum:00000000 gu8arr_CCIDNum
    {standard input}:4353   .bss.gu8arr_phoneNum:00000000 $d
    {standard input}:4356   .bss.gu8arr_phoneNum:00000000 gu8arr_phoneNum
    {standard input}:4359   .bss.gu8_operatorName:00000000 $d
    {standard input}:4362   .bss.gu8_operatorName:00000000 gu8_operatorName
    {standard input}:4365   .bss.gu8_dataTime:00000000 $d
    {standard input}:4368   .bss.gu8_dataTime:00000000 gu8_dataTime
                            *COM*:00000014 gu8arr_sendMsgBuff
    {standard input}:4374   .bss.sgu8_respCount:00000000 sgu8_respCount
    {standard input}:4375   .bss.sgu8_respCount:00000000 $d
    {standard input}:4379   .bss.sgu8_mqttClientId:00000000 sgu8_mqttClientId
    {standard input}:4380   .bss.sgu8_mqttClientId:00000000 $d
    {standard input}:4382   .bss.sgu16_cmeError:00000000 $d
    {standard input}:4385   .bss.sgu16_cmeError:00000000 sgu16_cmeError
    {standard input}:4388   .bss.sgu16_cmsError:00000000 $d
    {standard input}:4391   .bss.sgu16_cmsError:00000000 sgu16_cmsError
    {standard input}:4396   .data.sen_4gRunState:00000000 sen_4gRunState
    {standard input}:4401   .data.sen_sendCmdGetRespState:00000000 sen_sendCmdGetRespState
    {standard input}:4406   .bss.sen_simStatusState:00000000 sen_simStatusState
    {standard input}:4407   .bss.sen_simStatusState:00000000 $d
    {standard input}:4411   .bss.sen_openMqttState:00000000 sen_openMqttState
    {standard input}:4412   .bss.sen_openMqttState:00000000 $d
    {standard input}:4416   .bss.sen_publishDataState:00000000 sen_publishDataState
    {standard input}:4417   .bss.sen_publishDataState:00000000 $d
    {standard input}:4421   .bss.sen_modemResetState:00000000 sen_modemResetState
    {standard input}:4422   .bss.sen_modemResetState:00000000 $d
    {standard input}:4426   .bss.sen_10sPacektPubState:00000000 sen_10sPacektPubState
    {standard input}:4427   .bss.sen_10sPacektPubState:00000000 $d
    {standard input}:4431   .bss.sen_sslFileUpldState:00000000 sen_sslFileUpldState
    {standard input}:4432   .bss.sen_sslFileUpldState:00000000 $d
    {standard input}:4436   .bss.sen_gpsProcessState:00000000 sen_gpsProcessState
    {standard input}:4437   .bss.sen_gpsProcessState:00000000 $d
    {standard input}:4441   .bss.sen_4gProcessState:00000000 sen_4gProcessState
    {standard input}:4442   .bss.sen_4gProcessState:00000000 $d
    {standard input}:4446   .bss.sgb_packetFlag:00000000 sgb_packetFlag
    {standard input}:4447   .bss.sgb_packetFlag:00000000 $d
    {standard input}:4451   .bss.sgb_flag4g:00000000 sgb_flag4g
    {standard input}:4452   .bss.sgb_flag4g:00000000 $d
    {standard input}:4456   .bss.sgb_flagGps:00000000 sgb_flagGps
    {standard input}:4457   .bss.sgb_flagGps:00000000 $d
    {standard input}:4463   .data.gst_deviceStatus:00000000 gst_deviceStatus
    {standard input}:4460   .data.gst_deviceStatus:00000000 $d
    {standard input}:4478   .data.gcst_ATCmdTable:00000000 gcst_ATCmdTable
    {standard input}:4475   .data.gcst_ATCmdTable:00000000 $d
    {standard input}:4820   .text.delay:00000000 $t
    {standard input}:4824   .text.delay:00000000 delay
    {standard input}:4884   .text.delay:00000048 $d
    {standard input}:4890   .text.mod_enable4gModule:00000000 $t
    {standard input}:4895   .text.mod_enable4gModule:00000000 mod_enable4gModule
    {standard input}:4933   .text.mod_enable4gModule:00000030 $d
    {standard input}:4940   .text.mod_disable4gModule:00000000 $t
    {standard input}:4945   .text.mod_disable4gModule:00000000 mod_disable4gModule
    {standard input}:4979   .text.mod_disable4gModule:00000028 $d
    {standard input}:4985   .text.mod_open4gModPort:00000000 $t
    {standard input}:4990   .text.mod_open4gModPort:00000000 mod_open4gModPort
    {standard input}:5030   .rodata:00000000 $d
    {standard input}:5046   .text.mod_receiveRsp:00000000 $t
    {standard input}:5051   .text.mod_receiveRsp:00000000 mod_receiveRsp
    {standard input}:5374   .text.mod_receiveRsp:000001f0 $d
    {standard input}:5389   .text.mod_sendCmd:00000000 $t
    {standard input}:5393   .text.mod_sendCmd:00000000 mod_sendCmd
    {standard input}:5483   .text.mod_sendCmdGetRsp:00000000 $t
    {standard input}:5487   .text.mod_sendCmdGetRsp:00000000 mod_sendCmdGetRsp
    {standard input}:5910   .text.mod_sendCmdGetRsp:00000328 $d
    {standard input}:5922   .text.mod_sendCmdGetRsp:00000350 $t
    {standard input}:6175   .text.mod_sendCmdGetRsp:00000528 $d
    {standard input}:6193   .text.mod_echoOff:00000000 $t
    {standard input}:6197   .text.mod_echoOff:00000000 mod_echoOff
    {standard input}:6279   .text.mod_echoOff:0000005c $d
    {standard input}:13871  .bss.lsu8_retryCnt.14792:00000000 lsu8_retryCnt.14792
    {standard input}:6289   .text.mod_setUrcPort:00000000 $t
    {standard input}:6293   .text.mod_setUrcPort:00000000 mod_setUrcPort
    {standard input}:6382   .text.mod_setUrcPort:00000068 $d
    {standard input}:13876  .bss.lsu8_retryCnt.14797:00000000 lsu8_retryCnt.14797
    {standard input}:6393   .text.mod_setFlowCtrl:00000000 $t
    {standard input}:6397   .text.mod_setFlowCtrl:00000000 mod_setFlowCtrl
    {standard input}:6491   .text.mod_setFlowCtrl:00000074 $d
    {standard input}:13881  .bss.lsu8_retryCnt.14803:00000000 lsu8_retryCnt.14803
    {standard input}:6501   .text.mod_extractModInfo:00000000 $t
    {standard input}:6505   .text.mod_extractModInfo:00000000 mod_extractModInfo
    {standard input}:6642   .text.mod_extractModInfo:000000b4 $d
    {standard input}:13886  .bss.lsu8_retryCnt.14809:00000000 lsu8_retryCnt.14809
    {standard input}:6652   .text.mod_getModuleInfo:00000000 $t
    {standard input}:6657   .text.mod_getModuleInfo:00000000 mod_getModuleInfo
    {standard input}:6724   .text.mod_getModuleInfo:00000040 $d
    {standard input}:6734   .text.mod_enableSimDetection:00000000 $t
    {standard input}:6738   .text.mod_enableSimDetection:00000000 mod_enableSimDetection
    {standard input}:6832   .text.mod_enableSimDetection:00000074 $d
    {standard input}:13891  .bss.lsu8_retryCnt.14820:00000000 lsu8_retryCnt.14820
    {standard input}:6838   .text.mod_enableSimStatusReport:00000000 $t
    {standard input}:6842   .text.mod_enableSimStatusReport:00000000 mod_enableSimStatusReport
    {standard input}:6932   .text.mod_enableSimStatusReport:0000006c $d
    {standard input}:13896  .bss.lsu8_retryCnt.14826:00000000 lsu8_retryCnt.14826
    {standard input}:6942   .text.mod_checkSimStatus:00000000 $t
    {standard input}:6946   .text.mod_checkSimStatus:00000000 mod_checkSimStatus
    {standard input}:7111   .text.mod_checkSimStatus:000000e4 $d
    {standard input}:13901  .bss.lsu8_retryCnt.14832:00000000 lsu8_retryCnt.14832
    {standard input}:7126   .text.mod_cpinCheck:00000000 $t
    {standard input}:7130   .text.mod_cpinCheck:00000000 mod_cpinCheck
    {standard input}:7232   .text.mod_cpinCheck:0000007c $d
    {standard input}:13906  .bss.lsu8_retryCnt.14839:00000000 lsu8_retryCnt.14839
    {standard input}:7240   .text.mod_extractIMEI:00000000 $t
    {standard input}:7244   .text.mod_extractIMEI:00000000 mod_extractIMEI
    {standard input}:7406   .text.mod_extractIMEI:000000e4 $d
    {standard input}:13911  .bss.lsu8_retryCnt.14845:00000000 lsu8_retryCnt.14845
    {standard input}:7415   .text.mod_getIMEI:00000000 $t
    {standard input}:7420   .text.mod_getIMEI:00000000 mod_getIMEI
    {standard input}:7483   .text.mod_getIMEI:0000003c $d
    {standard input}:7488   .text.mod_extractCCID:00000000 $t
    {standard input}:7492   .text.mod_extractCCID:00000000 mod_extractCCID
    {standard input}:7628   .text.mod_extractCCID:000000b4 $d
    {standard input}:13916  .bss.lsu8_retryCnt.14859:00000000 lsu8_retryCnt.14859
    {standard input}:7638   .text.mod_getCCID:00000000 $t
    {standard input}:7643   .text.mod_getCCID:00000000 mod_getCCID
    {standard input}:7707   .text.mod_getCCID:00000038 $d
    {standard input}:7712   .text.mod_extractNUM:00000000 $t
    {standard input}:7716   .text.mod_extractNUM:00000000 mod_extractNUM
    {standard input}:7824   .text.mod_extractNUM:00000088 $d
    {standard input}:13921  .bss.lsu8_retryCnt.14870:00000000 lsu8_retryCnt.14870
    {standard input}:7833   .text.mod_getPhoneNum:00000000 $t
    {standard input}:7838   .text.mod_getPhoneNum:00000000 mod_getPhoneNum
    {standard input}:7899   .text.mod_getPhoneNum:00000038 $d
    {standard input}:7908   .text.mod_extractOperator:00000000 $t
    {standard input}:7912   .text.mod_extractOperator:00000000 mod_extractOperator
    {standard input}:8088   .text.mod_extractOperator:000000f8 $d
    {standard input}:13926  .bss.lsu8_retryCnt.14881:00000000 lsu8_retryCnt.14881
    {standard input}:8100   .text.mod_getOperator:00000000 $t
    {standard input}:8105   .text.mod_getOperator:00000000 mod_getOperator
    {standard input}:8169   .text.mod_getOperator:00000038 $d
    {standard input}:8174   .text.mod_simStatus:00000000 $t
    {standard input}:8179   .text.mod_simStatus:00000000 mod_simStatus
    {standard input}:8208   .text.mod_simStatus:0000001c $d
    {standard input}:8216   .text.mod_simStatus:0000003c $t
    {standard input}:8420   .text.mod_simStatus:00000148 $d
    {standard input}:8444   .text.mod_networkStatus:00000000 $t
    {standard input}:8448   .text.mod_networkStatus:00000000 mod_networkStatus
    {standard input}:8655   .text.mod_networkStatus:00000118 $d
    {standard input}:13931  .bss.lsu8_retryCnt.14907:00000000 lsu8_retryCnt.14907
    {standard input}:8669   .text.mod_signalQuality:00000000 $t
    {standard input}:8673   .text.mod_signalQuality:00000000 mod_signalQuality
    {standard input}:8789   .text.mod_signalQuality:00000094 $d
    {standard input}:13936  .bss.lsu8_retryCnt.14913:00000000 lsu8_retryCnt.14913
    {standard input}:8798   .text.mod_getSignalQuality:00000000 $t
    {standard input}:8803   .text.mod_getSignalQuality:00000000 mod_getSignalQuality
    {standard input}:8834   .text.mod_getSignalQuality:00000014 $d
    {standard input}:8839   .text.mod_extractDateTime:00000000 $t
    {standard input}:8843   .text.mod_extractDateTime:00000000 mod_extractDateTime
    {standard input}:9026   .text.mod_extractDateTime:00000120 $d
    {standard input}:13941  .bss.lsu8_retryCnt.14922:00000000 lsu8_retryCnt.14922
    {standard input}:9043   .text.mod_mqttConnect:00000000 $t
    {standard input}:9047   .text.mod_mqttConnect:00000000 mod_mqttConnect
    {standard input}:9428   .text.mod_mqttConnect:00000274 $d
    {standard input}:13946  .bss.lsu8_retryCnt.14930:00000000 lsu8_retryCnt.14930
    {standard input}:9445   .text.mod_mqttDisConnect:00000000 $t
    {standard input}:9449   .text.mod_mqttDisConnect:00000000 mod_mqttDisConnect
    {standard input}:9609   .text.mod_mqttDisConnect:000000e4 $d
    {standard input}:13951  .bss.lsu8_retryCnt.14938:00000000 lsu8_retryCnt.14938
    {standard input}:9619   .text.mod_mqttEnableFunctionality:00000000 $t
    {standard input}:9623   .text.mod_mqttEnableFunctionality:00000000 mod_mqttEnableFunctionality
    {standard input}:9718   .text.mod_mqttEnableFunctionality:00000070 $d
    {standard input}:13956  .bss.lsu8_retryCnt.14946:00000000 lsu8_retryCnt.14946
    {standard input}:9724   .text.mod_mqttDisableFunctionality:00000000 $t
    {standard input}:9728   .text.mod_mqttDisableFunctionality:00000000 mod_mqttDisableFunctionality
    {standard input}:9823   .text.mod_mqttDisableFunctionality:00000070 $d
    {standard input}:13961  .bss.lsu8_retryCnt.14952:00000000 lsu8_retryCnt.14952
    {standard input}:9829   .text.mod_mqttDisableEnableFunctionality:00000000 $t
    {standard input}:9833   .text.mod_mqttDisableEnableFunctionality:00000000 mod_mqttDisableEnableFunctionality
    {standard input}:9949   .text.mod_mqttDisableEnableFunctionality:00000090 $d
    {standard input}:9954   .text.mod_mqttClose:00000000 $t
    {standard input}:9958   .text.mod_mqttClose:00000000 mod_mqttClose
    {standard input}:10118  .text.mod_mqttClose:000000e4 $d
    {standard input}:13966  .bss.lsu8_retryCnt.14967:00000000 lsu8_retryCnt.14967
    {standard input}:10132  .text.mod_mqttPublishData:00000000 $t
    {standard input}:10136  .text.mod_mqttPublishData:00000000 mod_mqttPublishData
    {standard input}:10630  .text.mod_mqttPublishData:00000368 $d
    {standard input}:13971  .bss.lsu8_retryCnt.14976:00000000 lsu8_retryCnt.14976
    {standard input}:10645  .text.mod_mqttPublishData:0000039c $t
    {standard input}:10727  .text.mod_mqttPublishData:00000410 $d
    {standard input}:10739  .text.mod_mqttSubscribe:00000000 $t
    {standard input}:10743  .text.mod_mqttSubscribe:00000000 mod_mqttSubscribe
    {standard input}:10974  .text.mod_mqttSubscribe:00000180 $d
    {standard input}:13976  .bss.lsu8_retryCnt.14989:00000000 lsu8_retryCnt.14989
    {standard input}:10984  .text.mod_getCurrentTime:00000000 $t
    {standard input}:10989  .text.mod_getCurrentTime:00000000 mod_getCurrentTime
    {standard input}:11053  .text.mod_getCurrentTime:00000038 $d
    {standard input}:11058  .text.mod_mqttSslMode:00000000 $t
    {standard input}:11062  .text.mod_mqttSslMode:00000000 mod_mqttSslMode
    {standard input}:11148  .text.mod_mqttSslMode:00000064 $d
    {standard input}:13981  .bss.lsu8_retryCnt.15002:00000000 lsu8_retryCnt.15002
    {standard input}:11153  .text.mod_mqttSslConfgi:00000000 $t
    {standard input}:11157  .text.mod_mqttSslConfgi:00000000 mod_mqttSslConfgi
    {standard input}:11243  .text.mod_mqttSslConfgi:00000064 $d
    {standard input}:13986  .bss.lsu8_retryCnt.15007:00000000 lsu8_retryCnt.15007
    {standard input}:11261  .text.mod_mqttSslCertUpload:00000000 $t
    {standard input}:11265  .text.mod_mqttSslCertUpload:00000000 mod_mqttSslCertUpload
    {standard input}:11604  .text.mod_mqttSslCertUpload:00000248 $d
    {standard input}:13992  .bss.slu32_pos.15014:00000000 slu32_pos.15014
    {standard input}:13998  .bss.lu16_totalFileSize.15015:00000000 lu16_totalFileSize.15015
    {standard input}:11628  .text.mod_mqttSslCertDelete:00000000 $t
    {standard input}:11632  .text.mod_mqttSslCertDelete:00000000 mod_mqttSslCertDelete
    {standard input}:11769  .text.mod_mqttSslCertDelete:000000e0 $d
    {standard input}:11785  .text.mod_mqttOpen:00000000 $t
    {standard input}:11789  .text.mod_mqttOpen:00000000 mod_mqttOpen
    {standard input}:12026  .text.mod_mqttOpen:00000178 $d
    {standard input}:14008  .bss.lsu8_retryCnt.15031:00000000 lsu8_retryCnt.15031
    {standard input}:12062  .text.mod_mqttOpenConfig:00000000 $t
    {standard input}:12066  .text.mod_mqttOpenConfig:00000000 mod_mqttOpenConfig
    {standard input}:12126  .text.mod_mqttOpenConfig:00000054 $d
    {standard input}:12141  .text.mod_mqttOpenConfig:00000090 $t
    {standard input}:12556  .text.mod_mqttOpenConfig:00000368 $d
    {standard input}:12568  .text.mod_mqttOpenConfig:00000390 $t
    {standard input}:12611  .text.mod_mqttOpenConfig:000003c8 $d
    {standard input}:12620  .text.mod_gpsCfg:00000000 $t
    {standard input}:12624  .text.mod_gpsCfg:00000000 mod_gpsCfg
    {standard input}:12741  .text.mod_gpsCfg:00000094 $d
    {standard input}:14013  .bss.lsu8_retryCnt.15060:00000000 lsu8_retryCnt.15060
    {standard input}:12749  .text.mod_gpsEnable:00000000 $t
    {standard input}:12753  .text.mod_gpsEnable:00000000 mod_gpsEnable
    {standard input}:12841  .text.mod_gpsEnable:00000064 $d
    {standard input}:14018  .bss.lsu8_retryCnt.15067:00000000 lsu8_retryCnt.15067
    {standard input}:12847  .text.mod_extractGpsData:00000000 $t
    {standard input}:12851  .text.mod_extractGpsData:00000000 mod_extractGpsData
    {standard input}:12939  .text.mod_extractGpsData:00000064 $d
    {standard input}:14023  .bss.lsu8_retryCnt.15073:00000000 lsu8_retryCnt.15073
    {standard input}:12945  .text.mod_4gHandler:00000000 $t
    {standard input}:12950  .text.mod_4gHandler:00000000 mod_4gHandler
    {standard input}:12986  .text.mod_4gHandler:0000002c $d
    {standard input}:13003  .text.mod_4gHandler:00000070 $t
    {standard input}:13401  .text.mod_4gHandler:00000298 $d
    {standard input}:14028  .bss.lsu8_retryCount.15079:00000000 lsu8_retryCount.15079
    {standard input}:13415  .text.mod_pub10sPackExtractGps:00000000 $t
    {standard input}:13420  .text.mod_pub10sPackExtractGps:00000000 mod_pub10sPackExtractGps
    {standard input}:13675  .text.mod_pub10sPackExtractGps:000001b0 $d
    {standard input}:14033  .bss.lu8_retryCont.15104:00000000 lu8_retryCont.15104
    {standard input}:13692  .text.mod_3sGpsProcess:00000000 $t
    {standard input}:13697  .text.mod_3sGpsProcess:00000000 mod_3sGpsProcess
    {standard input}:13772  .text.mod_3sGpsProcess:00000050 $d
    {standard input}:13777  .text.mod_4gProcess:00000000 $t
    {standard input}:13782  .text.mod_4gProcess:00000000 mod_4gProcess
    {standard input}:13864  .text.mod_4gProcess:00000054 $d
    {standard input}:13872  .bss.lsu8_retryCnt.14792:00000000 $d
    {standard input}:13877  .bss.lsu8_retryCnt.14797:00000000 $d
    {standard input}:13882  .bss.lsu8_retryCnt.14803:00000000 $d
    {standard input}:13887  .bss.lsu8_retryCnt.14809:00000000 $d
    {standard input}:13892  .bss.lsu8_retryCnt.14820:00000000 $d
    {standard input}:13897  .bss.lsu8_retryCnt.14826:00000000 $d
    {standard input}:13902  .bss.lsu8_retryCnt.14832:00000000 $d
    {standard input}:13907  .bss.lsu8_retryCnt.14839:00000000 $d
    {standard input}:13912  .bss.lsu8_retryCnt.14845:00000000 $d
    {standard input}:13917  .bss.lsu8_retryCnt.14859:00000000 $d
    {standard input}:13922  .bss.lsu8_retryCnt.14870:00000000 $d
    {standard input}:13927  .bss.lsu8_retryCnt.14881:00000000 $d
    {standard input}:13932  .bss.lsu8_retryCnt.14907:00000000 $d
    {standard input}:13937  .bss.lsu8_retryCnt.14913:00000000 $d
    {standard input}:13942  .bss.lsu8_retryCnt.14922:00000000 $d
    {standard input}:13947  .bss.lsu8_retryCnt.14930:00000000 $d
    {standard input}:13952  .bss.lsu8_retryCnt.14938:00000000 $d
    {standard input}:13957  .bss.lsu8_retryCnt.14946:00000000 $d
    {standard input}:13962  .bss.lsu8_retryCnt.14952:00000000 $d
    {standard input}:13967  .bss.lsu8_retryCnt.14967:00000000 $d
    {standard input}:13972  .bss.lsu8_retryCnt.14976:00000000 $d
    {standard input}:13977  .bss.lsu8_retryCnt.14989:00000000 $d
    {standard input}:13982  .bss.lsu8_retryCnt.15002:00000000 $d
    {standard input}:13987  .bss.lsu8_retryCnt.15007:00000000 $d
    {standard input}:13989  .bss.slu32_pos.15014:00000000 $d
    {standard input}:13995  .bss.lu16_totalFileSize.15015:00000000 $d
    {standard input}:14003  .bss.lsu8_retryCnt.15012:00000000 lsu8_retryCnt.15012
    {standard input}:14004  .bss.lsu8_retryCnt.15012:00000000 $d
    {standard input}:14009  .bss.lsu8_retryCnt.15031:00000000 $d
    {standard input}:14014  .bss.lsu8_retryCnt.15060:00000000 $d
    {standard input}:14019  .bss.lsu8_retryCnt.15067:00000000 $d
    {standard input}:14024  .bss.lsu8_retryCnt.15073:00000000 $d
    {standard input}:14029  .bss.lsu8_retryCount.15079:00000000 $d
    {standard input}:14034  .bss.lu8_retryCont.15104:00000000 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
TIMER_ClearEvent
TIMER_SetTimeInterval
TIMER_Start
TIMER_GetInterruptStatus
TIMER_Stop
TIMER_0
MODULE_4G_EN_OUT_D
DIGITAL_IO_PWRKEY
at_initInterface
at_isRxBuffEmpty
at_readPort
strstr
strchr
atoi
memset
at_writePort
strlen
strncpy
strcat
tm_setResponseTime
tm_clearResponseTime
strtok_r
tm_getResponseTimeValue
memcpy
strcpy
sprintf
tm_setResetTimer
tm_getResetTimerValue
tm_set4gRunTimer
set_RTC
tm_get4gRunTimerValue
RTC_GetTime
Get_CurrentLocation
epoch_time
Process_4G_Event_Data
pb_ostream_from_buffer
pb_encode
Eventbuffer_4Gcomm
vcu_fleet_fleet_10_sec_msg
TD1
tm_set3s4gRunTimer
tm_get3s4gRunTimerValue
