
VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000144dc  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  080144dc  0c0144dc  0001c4dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00030000  2**0
                  ALLOC
  3 .data         0000bb74  1ffe8800  0c0144e4  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000f28  1fff4378  0c020058  0002c378  2**3
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0002ffc0  2**2
                  ALLOC
  6 .stab         0000009c  00000000  00000000  0002c374  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      0000014d  00000000  00000000  0002c410  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00002aa0  00000000  00000000  0002c560  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0007dd81  00000000  00000000  0002f000  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c028  00000000  00000000  000acd81  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001da05  00000000  00000000  000b8da9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000b8a4  00000000  00000000  000d67b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00018e55  00000000  00000000  000e2054  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001583d  00000000  00000000  000faea9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002498  00000000  00000000  001106e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000209d  00000000  00000000  00112b7e  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 39 01 01 08 99 02 00 08     ........9.......
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	05 69 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .i..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 0d 09 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 dd 82 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 ed 82 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0144e4 	.word	0x0c0144e4
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000bb74 	.word	0x0000bb74
 8000254:	0c0144e4 	.word	0x0c0144e4
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fff4378 	.word	0x1fff4378
 8000264:	00000f28 	.word	0x00000f28
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08001d01 	.word	0x08001d01
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08011609 	.word	0x08011609
    blx  r0
#endif

    ldr  r0, =main
 8000294:	0800ffd9 	.word	0x0800ffd9

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <tm_sysTickCallback>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void tm_sysTickCallback(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	timerCount++;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <tm_sysTickCallback+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <tm_sysTickCallback+0x70>)
 80002a8:	6013      	str	r3, [r2, #0]

	if(gu32_responseCount > 0)
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <tm_sysTickCallback+0x20>
	{
		gu32_responseCount--;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <tm_sysTickCallback+0x74>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ba:	6013      	str	r3, [r2, #0]
	}
	if(gu32_resetCounter > 0)
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <tm_sysTickCallback+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d004      	beq.n	80002ce <tm_sysTickCallback+0x32>
	{
		gu32_resetCounter--;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <tm_sysTickCallback+0x78>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <tm_sysTickCallback+0x78>)
 80002cc:	6013      	str	r3, [r2, #0]
	}

	if(gu32_4gCounter > 0)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d004      	beq.n	80002e0 <tm_sysTickCallback+0x44>
	{
		gu32_4gCounter--;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002de:	6013      	str	r3, [r2, #0]
	}

	if(gu32_10s4gCounter > 0)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <tm_sysTickCallback+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d004      	beq.n	80002f2 <tm_sysTickCallback+0x56>
	{
		gu32_10s4gCounter--;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <tm_sysTickCallback+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <tm_sysTickCallback+0x80>)
 80002f0:	6013      	str	r3, [r2, #0]
	}

	if(gu32_3s4gCounter > 0)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <tm_sysTickCallback+0x84>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <tm_sysTickCallback+0x68>
	{
		gu32_3s4gCounter--;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <tm_sysTickCallback+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <tm_sysTickCallback+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	}
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	1fff4378 	.word	0x1fff4378
 8000310:	1fff438c 	.word	0x1fff438c
 8000314:	1fff437c 	.word	0x1fff437c
 8000318:	1fff4380 	.word	0x1fff4380
 800031c:	1fff4384 	.word	0x1fff4384
 8000320:	1fff4388 	.word	0x1fff4388

08000324 <tm_setTimerCount>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_setTimerCount(uint32_t timerValue)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus;
	//uint32_t tempTimerValue = timerValue * TM_1MS_TIMER_VAL;

	timerId = (uint32_t) SYSTIMER_CreateTimer(timerValue,
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <tm_setTimerCount+0x38>)
 8000332:	2300      	movs	r3, #0
 8000334:	f006 fb44 	bl	80069c0 <SYSTIMER_CreateTimer>
 8000338:	4602      	mov	r2, r0
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <tm_setTimerCount+0x3c>)
 800033c:	601a      	str	r2, [r3, #0]
			SYSTIMER_MODE_PERIODIC, (void*) tm_sysTickCallback, NULL);

	if (0U != timerId)
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <tm_setTimerCount+0x3c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <tm_setTimerCount+0x28>
	{
		len_retStatus = E_RET_SUCCESS;
 8000346:	2300      	movs	r3, #0
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e001      	b.n	8000350 <tm_setTimerCount+0x2c>
	}
	else
	{
		len_retStatus = E_RET_TIMER_ERROR;
 800034c:	2307      	movs	r3, #7
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	0800029d 	.word	0x0800029d
 8000360:	1fff4390 	.word	0x1fff4390

08000364 <tm_startTimer>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_startTimer()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus;
	SYSTIMER_STATUS_t timerStatus;

	if (timerId != 0)
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <tm_startTimer+0x3c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00f      	beq.n	8000392 <tm_startTimer+0x2e>
	{
		timerStatus = SYSTIMER_StartTimer(timerId);
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <tm_startTimer+0x3c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f006 fbc0 	bl	8006afc <SYSTIMER_StartTimer>
 800037c:	4603      	mov	r3, r0
 800037e:	71bb      	strb	r3, [r7, #6]
		if (SYSTIMER_STATUS_SUCCESS == timerStatus)
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <tm_startTimer+0x28>
		{
			len_retStatus = E_RET_SUCCESS;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e004      	b.n	8000396 <tm_startTimer+0x32>
		}
		else
		{
			len_retStatus = E_RET_TIMER_ERROR;
 800038c:	2307      	movs	r3, #7
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	e001      	b.n	8000396 <tm_startTimer+0x32>
		}
	}
	else
	{
		len_retStatus = E_RET_TIMER_ID_ZERO_ERROR;
 8000392:	2308      	movs	r3, #8
 8000394:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 8000396:	79fb      	ldrb	r3, [r7, #7]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	1fff4390 	.word	0x1fff4390

080003a4 <tm_setResetTimer>:
{
	timerCount = 0;
}

void tm_setResetTimer(uint32_t lu32_timeInMs)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	gu32_resetCounter = lu32_timeInMs;
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <tm_setResetTimer+0x18>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	1fff437c 	.word	0x1fff437c

080003c0 <tm_getResetTimerValue>:

uint32_t tm_getResetTimerValue()
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return gu32_resetCounter;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <tm_getResetTimerValue+0x14>)
 80003c6:	681b      	ldr	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	1fff437c 	.word	0x1fff437c

080003d8 <tm_set4gRunTimer>:
{
	return gu32_3s4gCounter;
}

void tm_set4gRunTimer(uint32_t lu32_timeInMs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	gu32_3s4gCounter = lu32_timeInMs;
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <tm_set4gRunTimer+0x18>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	1fff4388 	.word	0x1fff4388

080003f4 <tm_get4gRunTimerValue>:

uint32_t tm_get4gRunTimerValue()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	return gu32_3s4gCounter;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <tm_get4gRunTimerValue+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	1fff4388 	.word	0x1fff4388

0800040c <tm_setResponseTime>:

void tm_setResponseTime(uint32_t lu32_timeInMs)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	gu32_responseCount = lu32_timeInMs;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <tm_setResponseTime+0x18>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	1fff438c 	.word	0x1fff438c

08000428 <tm_getResponseTimeValue>:

uint32_t tm_getResponseTimeValue()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	return gu32_responseCount;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <tm_getResponseTimeValue+0x14>)
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	1fff438c 	.word	0x1fff438c

08000440 <tm_clearResponseTime>:
void tm_clearResponseTime()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	gu32_responseCount = 0;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <tm_clearResponseTime+0x14>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	1fff438c 	.word	0x1fff438c

08000458 <allFaults_Process>:
	//Gtake_FaultIndicator();
	Irp_FaultIndicator();
}

void allFaults_Process(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
//	HighVoltBattery_FaultIndicator();
//	Mcu_FaultIndicator();
//	clusterFault_Indicator();
}
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8000468:	f003 fff8 	bl	800445c <XMC_RTC_Start>
}
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop

08000470 <RTC_Stop>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	XMC_RTC_Stop();
 8000474:	f004 f806 	bl	8004484 <XMC_RTC_Stop>
}
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop

0800047c <RTC_init>:
#include "Vcu_Config.h"

#include "xmc_rtc.h"
#include <time.h>
void RTC_init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	RTC_STATUS_t status_r = RTC_STATUS_FAILURE;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
	RTC_Stop();
 8000486:	f7ff fff3 	bl	8000470 <RTC_Stop>

    status_r =  RTC_SetTime(&timeval);
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <RTC_init+0x28>)
 800048c:	f007 f89e 	bl	80075cc <RTC_SetTime>
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]

    if(status_r == RTC_STATUS_SUCCESS)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <RTC_init+0x22>
    {
 	 RTC_Start();
 800049a:	f7ff ffe3 	bl	8000464 <RTC_Start>
    }
}
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	1fff47a8 	.word	0x1fff47a8

080004a8 <Process_State1_Inputs>:
instrument_clustor_buzzer_t *instrument_clustor_buzzer = &(CAN_MSG_DB[CAN_18FF2021].CAN_Data[0]);
Instrumetcluster_DriveMode_OUT_t *Instrumetcluster_DriveMode_OUT = &(CAN_MSG_DB[CAN_18FFB632].CAN_Data[4]);
eps_status_t *eps_status = &eps_n[can_0x1E5].can_matrix[0];

void Process_State1_Inputs(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	static bool init_once = 1;
	Process_Io_exp_U24();
 80004ac:	f000 f86c 	bl	8000588 <Process_Io_exp_U24>

	if(Vcu_OutPuts.IGNITION_1_OUT)
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d010      	beq.n	80004da <Process_State1_Inputs+0x32>
	{
		//Process_Io_exp_U25();
		Process_cluster_indicators();
 80004b8:	f000 f87c 	bl	80005b4 <Process_cluster_indicators>
		Process_drive_mode();
 80004bc:	f000 f938 	bl	8000730 <Process_drive_mode>
		Process_faciaaswitches();
 80004c0:	f000 fa1e 	bl	8000900 <Process_faciaaswitches>
		if(init_once)
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <Process_State1_Inputs+0x54>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <Process_State1_Inputs+0x30>
		{
			init_hw();
 80004cc:	f000 fb78 	bl	8000bc0 <init_hw>
			init_once = 0;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <Process_State1_Inputs+0x54>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e00e      	b.n	80004f6 <Process_State1_Inputs+0x4e>
 80004d8:	e00d      	b.n	80004f6 <Process_State1_Inputs+0x4e>
		}
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f083 0301 	eor.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d006      	beq.n	80004f6 <Process_State1_Inputs+0x4e>
	{
		all_Ig1_Inputs_off();
 80004e8:	f000 f91c 	bl	8000724 <all_Ig1_Inputs_off>
		cluster_indicators_off();
 80004ec:	f000 f8ee 	bl	80006cc <cluster_indicators_off>
		init_once = 1;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <Process_State1_Inputs+0x54>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
	}
}
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	1fff48cc 	.word	0x1fff48cc
 80004fc:	1ffe8810 	.word	0x1ffe8810

08000500 <hazzard>:

void hazzard(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	/* for hazzard */
	if((Vcu_OutPuts.IGNITION_1_OUT == 0) && (Combi_Switch_IN.left_indicator_IN && Combi_Switch_IN.right_indicator_IN))
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <hazzard+0x7c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	f083 0301 	eor.w	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00e      	beq.n	8000530 <hazzard+0x30>
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <hazzard+0x80>)
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00a      	beq.n	8000530 <hazzard+0x30>
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <hazzard+0x80>)
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <hazzard+0x30>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = true;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <hazzard+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = true;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <hazzard+0x84>)
 800052a:	2201      	movs	r2, #1
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	e020      	b.n	8000572 <hazzard+0x72>
	}

	else if(((Combi_Switch_IN.left_indicator_IN == 0) && (Combi_Switch_IN.right_indicator_IN == 0)))
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <hazzard+0x80>)
 8000532:	78db      	ldrb	r3, [r3, #3]
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00d      	beq.n	800055a <hazzard+0x5a>
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <hazzard+0x80>)
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d006      	beq.n	800055a <hazzard+0x5a>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = false;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <hazzard+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = false;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <hazzard+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
 8000558:	e00b      	b.n	8000572 <hazzard+0x72>
	}
	/* end */

	else if(Vcu_OutPuts.IGNITION_1_OUT)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <hazzard+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <hazzard+0x72>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = Combi_Switch_IN.left_indicator_IN;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <hazzard+0x80>)
 8000564:	78da      	ldrb	r2, [r3, #3]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <hazzard+0x84>)
 8000568:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = Combi_Switch_IN.right_indicator_IN;
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <hazzard+0x80>)
 800056c:	791a      	ldrb	r2, [r3, #4]
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <hazzard+0x84>)
 8000570:	711a      	strb	r2, [r3, #4]
	}

}
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	1fff48cc 	.word	0x1fff48cc
 8000580:	1fff48a4 	.word	0x1fff48a4
 8000584:	1fff47b0 	.word	0x1fff47b0

08000588 <Process_Io_exp_U24>:

void Process_Io_exp_U24(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	Relay_Control_Switch_OUT.low_beam_OUT = Combi_Switch_IN.low_beam_IN;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <Process_Io_exp_U24+0x24>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Process_Io_exp_U24+0x28>)
 8000592:	701a      	strb	r2, [r3, #0]
	Relay_Control_Switch_OUT.high_beam_OUT = Combi_Switch_IN.high_beam_IN;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <Process_Io_exp_U24+0x24>)
 8000596:	785a      	ldrb	r2, [r3, #1]
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Process_Io_exp_U24+0x28>)
 800059a:	705a      	strb	r2, [r3, #1]
	Relay_Control_Switch_OUT.pos_light_OUT = Combi_Switch_IN.pos_light_IN;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Process_Io_exp_U24+0x24>)
 800059e:	789a      	ldrb	r2, [r3, #2]
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <Process_Io_exp_U24+0x28>)
 80005a2:	709a      	strb	r2, [r3, #2]

	hazzard();
 80005a4:	f7ff ffac 	bl	8000500 <hazzard>
}
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	1fff48a4 	.word	0x1fff48a4
 80005b0:	1fff47b0 	.word	0x1fff47b0

080005b4 <Process_cluster_indicators>:
	//Relay_Control_Switch_OUT.ac_blower3_OUT = Hvac_IN.blower_speed3_IN;

}

void Process_cluster_indicators(void)
 {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_right_indicator = 0;//Combi_Switch_IN.right_indicator_IN;

	i_counter = 0;
}
*/
	Instrument_Cluster_OUT.set_left_indicator = Combi_Switch_IN.left_indicator_IN;
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005be:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = Combi_Switch_IN.right_indicator_IN;
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005c2:	791a      	ldrb	r2, [r3, #4]
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005c6:	71da      	strb	r2, [r3, #7]
	 //Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.low_beam_OUT;
	 Instrument_Cluster_OUT.set_high_beam = Relay_Control_Switch_OUT.high_beam_OUT;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005ca:	785a      	ldrb	r2, [r3, #1]
 80005cc:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005ce:	725a      	strb	r2, [r3, #9]
	 Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.pos_light_OUT;//There is no indicator for low beam there is for position
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005d2:	789a      	ldrb	r2, [r3, #2]
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005d6:	721a      	strb	r2, [r3, #8]
	 Instrument_Cluster_OUT.set_brake_oil = Switch_Ios_IN.brake_oil_IN;
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <Process_cluster_indicators+0xf8>)
 80005da:	799a      	ldrb	r2, [r3, #6]
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005de:	729a      	strb	r2, [r3, #10]

	// Instrument_Cluster_OUT.eps_status = 1;//default value to show eps failure
	 Instrument_Cluster_OUT.eps_status = eps_status-> Power_Steering_Fault_Indication_On_EPS;///////eps failure
 80005e0:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <Process_cluster_indicators+0xfc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005f8:	731a      	strb	r2, [r3, #12]

	 Instrument_Cluster_OUT.aux_vtg_critical;////////
	 Instrument_Cluster_OUT.battery_temp_exceeded;/////////
	 /*instrument_clustor_buzzer-> charging_connected = */Instrument_Cluster_OUT.charging_connected = charger_on();//Vcu_InPuts.charger_connect_IN;
 80005fa:	f000 fad5 	bl	8000ba8 <charger_on>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800060c:	739a      	strb	r2, [r3, #14]
	 /*instrument_clustor_indicators-> generic_alarm;////////*/
	 Instrument_Cluster_OUT.regen_enabled = Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese || Irp_Mcu_drive_states_29bit-> Regen_On_Brake;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d107      	bne.n	800062e <Process_cluster_indicators+0x7a>
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <Process_cluster_indicators+0x7e>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <Process_cluster_indicators+0x80>
 8000632:	2300      	movs	r3, #0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800063c:	73da      	strb	r2, [r3, #15]
	 instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;////////
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Process_cluster_indicators+0x104>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <Process_cluster_indicators+0xf8>)
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2d9      	uxtb	r1, r3
 8000652:	7953      	ldrb	r3, [r2, #5]
 8000654:	f361 03c3 	bfi	r3, r1, #3, #1
 8000658:	7153      	strb	r3, [r2, #5]
	 Seat_Belt_OUT.seat_occupied = (!(/*Seat_Switch_IN.seat_belt_d_IN &&*/ Seat_Switch_IN.seat_belt_p_IN));
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <Process_cluster_indicators+0x108>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000676:	709a      	strb	r2, [r3, #2]

	 if(vspeed >=10)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Process_cluster_indicators+0x110>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d908      	bls.n	8000692 <Process_cluster_indicators+0xde>
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = Seat_Belt_OUT.seat_occupied;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000686:	7899      	ldrb	r1, [r3, #2]
 8000688:	7813      	ldrb	r3, [r2, #0]
 800068a:	f361 0341 	bfi	r3, r1, #1, #1
 800068e:	7013      	strb	r3, [r2, #0]
 8000690:	e005      	b.n	800069e <Process_cluster_indicators+0xea>
	 }
	 else
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = false;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f36f 0341 	bfc	r3, #1, #1
 800069c:	7013      	strb	r3, [r2, #0]
	 }
	 // instrument_clustor_indicators-> overspeed = 1;
 }
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	1fff48a4 	.word	0x1fff48a4
 80006a4:	1fff4874 	.word	0x1fff4874
 80006a8:	1fff47b0 	.word	0x1fff47b0
 80006ac:	1fff4844 	.word	0x1fff4844
 80006b0:	1ffe8804 	.word	0x1ffe8804
 80006b4:	1ffe8818 	.word	0x1ffe8818
 80006b8:	1ffe8808 	.word	0x1ffe8808
 80006bc:	1fff47e8 	.word	0x1fff47e8
 80006c0:	1fff4828 	.word	0x1fff4828
 80006c4:	1fff522a 	.word	0x1fff522a
 80006c8:	1ffe880c 	.word	0x1ffe880c

080006cc <cluster_indicators_off>:

void cluster_indicators_off(void)
 {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_left_indicator = false;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <cluster_indicators_off+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = false;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <cluster_indicators_off+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	71da      	strb	r2, [r3, #7]
	Instrument_Cluster_OUT.set_low_beam = false;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <cluster_indicators_off+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	721a      	strb	r2, [r3, #8]
	Instrument_Cluster_OUT.set_high_beam = false;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <cluster_indicators_off+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	725a      	strb	r2, [r3, #9]
	Instrument_Cluster_OUT.set_brake_oil = false;//////
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <cluster_indicators_off+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	729a      	strb	r2, [r3, #10]
	//Instrument_Cluster_OUT.;///////eps failure
	Instrument_Cluster_OUT.aux_vtg_critical = false;////////
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <cluster_indicators_off+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	72da      	strb	r2, [r3, #11]
	Instrument_Cluster_OUT.battery_temp_exceeded = false;/////////
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <cluster_indicators_off+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	735a      	strb	r2, [r3, #13]
	Instrument_Cluster_OUT.charging_connected = false;/////////////
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <cluster_indicators_off+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	739a      	strb	r2, [r3, #14]
	/*instrument_clustor_indicators-> generic_alarm;////////*/
	Instrument_Cluster_OUT.regen_enabled = false;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <cluster_indicators_off+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	73da      	strb	r2, [r3, #15]
	/*instrument_clustor_indicators-> parking_brake_light;////////*/
	instrument_clustor_indicators-> seat_belt = false;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <cluster_indicators_off+0x54>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7953      	ldrb	r3, [r2, #5]
 800070c:	f36f 1304 	bfc	r3, #4, #1
 8000710:	7153      	strb	r3, [r2, #5]
 }
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	1fff4874 	.word	0x1fff4874
 8000720:	1ffe8808 	.word	0x1ffe8808

08000724 <all_Ig1_Inputs_off>:
{

}

void all_Ig1_Inputs_off(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

	//Relay_Control_Switch_OUT.left_indicator_OUT = false;
	//Relay_Control_Switch_OUT.right_indicator_OUT = false;

	/* IO EXP U25 */
}
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <Process_drive_mode>:

void Process_drive_mode(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	static bool prev_input = 0;
	static uint8_t ModeCounter_MCU = eco_mode_mcu, ModeCounter_Cluster = eco_mode_cluster, counter = 1;

	switch (Switch_Ios_IN.gear_sw2_IN )
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <Process_drive_mode+0xa4>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d127      	bne.n	800078c <Process_drive_mode+0x5c>
	{
		case 1:
				if((prev_input == 0 ) && (Hvac_IN.blower_speed2_IN)) // mode switch is connected to Hvac_IN.blower_speed2_IN
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <Process_drive_mode+0xa8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d014      	beq.n	8000774 <Process_drive_mode+0x44>
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <Process_drive_mode+0xac>)
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d010      	beq.n	8000774 <Process_drive_mode+0x44>
				{
					ModeCounter_Cluster++;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <Process_drive_mode+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <Process_drive_mode+0xb0>)
 800075c:	701a      	strb	r2, [r3, #0]
					if(ModeCounter_Cluster == invalid_data_cluster)
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <Process_drive_mode+0xb0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d102      	bne.n	800076c <Process_drive_mode+0x3c>
						ModeCounter_Cluster = eco_mode_cluster;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <Process_drive_mode+0xb0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

					prev_input = 1;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <Process_drive_mode+0xa8>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e00a      	b.n	800078a <Process_drive_mode+0x5a>
				}
				else if(Hvac_IN.blower_speed2_IN == 0)
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <Process_drive_mode+0xac>)
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <Process_drive_mode+0x5a>
				{
					prev_input = 0;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <Process_drive_mode+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
				}
		break;
 8000788:	e007      	b.n	800079a <Process_drive_mode+0x6a>
 800078a:	e006      	b.n	800079a <Process_drive_mode+0x6a>

		default:
				ModeCounter_MCU = eco_mode_mcu;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <Process_drive_mode+0xb4>)
 800078e:	2203      	movs	r2, #3
 8000790:	701a      	strb	r2, [r3, #0]
				ModeCounter_Cluster = eco_mode_cluster;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Process_drive_mode+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	bf00      	nop
	}
/* this is for gtake */
	if(Switch_Ios_IN.gear_sw2_IN)
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <Process_drive_mode+0xa4>)
 800079c:	7a9b      	ldrb	r3, [r3, #10]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <Process_drive_mode+0x82>
	{
		ModeCounter_MCU = 3 - ModeCounter_Cluster;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <Process_drive_mode+0xb0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f1c3 0303 	rsb	r3, r3, #3
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <Process_drive_mode+0xb4>)
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e005      	b.n	80007be <Process_drive_mode+0x8e>
	}
	else
	{
		ModeCounter_MCU = eco_mode_mcu;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Process_drive_mode+0xb4>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	701a      	strb	r2, [r3, #0]
		ModeCounter_Cluster = eco_mode_cluster;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	}
/***** for gtake end  **********/

	Process_cluster_drivemode(ModeCounter_Cluster);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Process_drive_mode+0xb0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f810 	bl	80007e8 <Process_cluster_drivemode>
	Process_motordrive_mode(ModeCounter_Cluster); //for gtake pass ModeCounter_MCU, and for irp pass ModeCounter_Cluster
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f825 	bl	800081c <Process_motordrive_mode>

}
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	1fff4844 	.word	0x1fff4844
 80007d8:	1fff4394 	.word	0x1fff4394
 80007dc:	1fff485c 	.word	0x1fff485c
 80007e0:	1fff4395 	.word	0x1fff4395
 80007e4:	1ffe8811 	.word	0x1ffe8811

080007e8 <Process_cluster_drivemode>:

void Process_cluster_drivemode(uint8_t mode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <Process_cluster_drivemode+0x2c>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <Process_cluster_drivemode+0x20>
		Instrumetcluster_DriveMode_OUT ->DriveMode = mode;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <Process_cluster_drivemode+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	1fff48ac 	.word	0x1fff48ac
 8000818:	1ffe8800 	.word	0x1ffe8800

0800081c <Process_motordrive_mode>:
void Process_motordrive_mode(uint8_t mode)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	//motordrive_mode_Gtake(uint8_t mode);
	motordrive_mode_irp(mode);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f803 	bl	8000834 <motordrive_mode_irp>
}
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <motordrive_mode_irp>:
	if(!Lights_OUT.brake_switch_out_d)
		Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = mode;
}

void motordrive_mode_irp(uint8_t mode)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <motordrive_mode_irp+0x38>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <motordrive_mode_irp+0x2c>
		Irp_Mcu_drive_states_29bit->Driving_Profile = mode;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <motordrive_mode_irp+0x3c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	7813      	ldrb	r3, [r2, #0]
 800085a:	f361 0384 	bfi	r3, r1, #2, #3
 800085e:	7013      	strb	r3, [r2, #0]
}
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	1fff48ac 	.word	0x1fff48ac
 8000870:	1ffe8818 	.word	0x1ffe8818

08000874 <Process_Regen_Control>:

void Process_Regen_Control(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	static bool prev_input = 0;

	if((prev_input == 0 ) && (Hvac_IN.blower_speed3_IN)) // regen switch is connected to Hvac_IN.blower_speed3_IN
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <Process_Regen_Control+0x7c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d026      	beq.n	80008d4 <Process_Regen_Control+0x60>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <Process_Regen_Control+0x80>)
 8000888:	799b      	ldrb	r3, [r3, #6]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d022      	beq.n	80008d4 <Process_Regen_Control+0x60>
	{
		Relay_Control_Switch_OUT.ac_blower3_OUT = !Relay_Control_Switch_OUT.ac_blower3_OUT;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <Process_Regen_Control+0x84>)
 8000890:	7a9b      	ldrb	r3, [r3, #10]
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Process_Regen_Control+0x84>)
 80008aa:	729a      	strb	r2, [r3, #10]
		prev_input = 1;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
		//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0x0;
		//if(Relay_Control_Switch_OUT.ac_blower3_OUT)
		{
			//enable region cmd
			Irp_Mcu_drive_states_29bit-> Regen_On_Brake = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <Process_Regen_Control+0x88>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <Process_Regen_Control+0x84>)
 80008b8:	7a99      	ldrb	r1, [r3, #10]
 80008ba:	7893      	ldrb	r3, [r2, #2]
 80008bc:	f361 0382 	bfi	r3, r1, #2, #1
 80008c0:	7093      	strb	r3, [r2, #2]
			Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <Process_Regen_Control+0x88>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <Process_Regen_Control+0x84>)
 80008c8:	7a99      	ldrb	r1, [r3, #10]
 80008ca:	7893      	ldrb	r3, [r2, #2]
 80008cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d0:	7093      	strb	r3, [r2, #2]
 80008d2:	e009      	b.n	80008e8 <Process_Regen_Control+0x74>
		}
	}
	else if(Hvac_IN.blower_speed3_IN == 0)
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Process_Regen_Control+0x80>)
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <Process_Regen_Control+0x74>
	{
		prev_input = 0;
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	}

}
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	1fff4396 	.word	0x1fff4396
 80008f4:	1fff485c 	.word	0x1fff485c
 80008f8:	1fff47b0 	.word	0x1fff47b0
 80008fc:	1ffe8818 	.word	0x1ffe8818

08000900 <Process_faciaaswitches>:

}


void Process_faciaaswitches(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	Process_Regen_Control();
 8000904:	f7ff ffb6 	bl	8000874 <Process_Regen_Control>
	//Process_RearDefogger();
	//Process_FogLamp();
	//Process_PowerLatch();
}
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop

0800090c <CCU81_0_IRQHandler>:

void Flasher(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
		else if(Combi_Switch_IN.right_indicator_IN)
		{
			Instrument_Cluster_OUT.set_right_indicator = !Instrument_Cluster_OUT.set_right_indicator;
		}*/
	//INTERRUPT_Disable(&INTERRUPT_0);
}
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <Process_State2_Inputs>:

#include "Vcu_Config.h"
#include "Vcu_Process.h"

void Process_State2_Inputs(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <Process_State2_Inputs+0x30>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <Process_State2_Inputs+0x16>
	{
		Process_vehicleDrive_Inputs();
 8000924:	f000 f812 	bl	800094c <Process_vehicleDrive_Inputs>
		Process_ig2_lights();
 8000928:	f000 f842 	bl	80009b0 <Process_ig2_lights>
 800092c:	e00a      	b.n	8000944 <Process_State2_Inputs+0x2c>
	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <Process_State2_Inputs+0x30>)
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <Process_State2_Inputs+0x2c>
	{
		Process_vehicleDrive_Inputs_off();
 800093c:	f000 f820 	bl	8000980 <Process_vehicleDrive_Inputs_off>
		Process_ig2_lights_off();
 8000940:	f000 f844 	bl	80009cc <Process_ig2_lights_off>
	}

}
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	1fff48cc 	.word	0x1fff48cc

0800094c <Process_vehicleDrive_Inputs>:

void Process_vehicleDrive_Inputs(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = Switch_Ios_IN.gear_sw1_IN;//neutral
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000952:	7a5a      	ldrb	r2, [r3, #9]
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000956:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = Switch_Ios_IN.gear_sw2_IN;//forward
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800095a:	7a9a      	ldrb	r2, [r3, #10]
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800095e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = Switch_Ios_IN.gear_sw3_IN;//reverse
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000962:	7ada      	ldrb	r2, [r3, #11]
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000966:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = Switch_Ios_IN.gear_sw4_IN;//park
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800096a:	7b1a      	ldrb	r2, [r3, #12]
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800096e:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay;
}
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	1fff4844 	.word	0x1fff4844
 800097c:	1fff4804 	.word	0x1fff4804

08000980 <Process_vehicleDrive_Inputs_off>:
void Process_vehicleDrive_Inputs_off(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = HIGH;// neutral
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000986:	2201      	movs	r2, #1
 8000988:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = LOW;//forward
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = LOW;//reverse
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000992:	2200      	movs	r2, #0
 8000994:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = LOW;//park
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000998:	2200      	movs	r2, #0
 800099a:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay = LOW;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

}
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	1fff4804 	.word	0x1fff4804

080009b0 <Process_ig2_lights>:

void Process_ig2_lights(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = Switch_Ios_IN.gear_sw3_IN;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <Process_ig2_lights+0x14>)
 80009b6:	7ada      	ldrb	r2, [r3, #11]
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <Process_ig2_lights+0x18>)
 80009ba:	709a      	strb	r2, [r3, #2]
}
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	1fff4844 	.word	0x1fff4844
 80009c8:	1fff48ac 	.word	0x1fff48ac

080009cc <Process_ig2_lights_off>:

void Process_ig2_lights_off(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = LOW;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <Process_ig2_lights_off+0x14>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
}
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	1fff48ac 	.word	0x1fff48ac

080009e4 <Process_VcuOutputs_Update>:


int *cluster_door_in = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[0];

void Process_VcuOutputs_Update(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	allFaults_Process();
 80009e8:	f7ff fd36 	bl	8000458 <allFaults_Process>

	Vcu_OutPuts.charger_connect_OUT = charger_on();
 80009ec:	f000 f8dc 	bl	8000ba8 <charger_on>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf14      	ite	ne
 80009f6:	2301      	movne	r3, #1
 80009f8:	2300      	moveq	r3, #0
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 80009fe:	709a      	strb	r2, [r3, #2]
	Vcu_OutPuts.IGNITION_1_OUT = Vcu_InPuts.IGNITION_1_IN;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a06:	701a      	strb	r2, [r3, #0]

	Relay_Control_Switch_OUT.elec_handbrake_pwr_out = (Switch_Ios_IN.handbrake_sw_IN || Switch_Ios_IN.electronic_brake_in_d);
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d103      	bne.n	8000a18 <Process_VcuOutputs_Update+0x34>
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <Process_VcuOutputs_Update+0x38>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <Process_VcuOutputs_Update+0x3a>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <Process_VcuOutputs_Update+0xd0>)
 8000a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	if(!Vcu_OutPuts.charger_connect_OUT)
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d004      	beq.n	8000a42 <Process_VcuOutputs_Update+0x5e>
		Vcu_OutPuts.IGNITION_2_OUT = Vcu_InPuts.IGNITION_2_IN;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a3a:	785a      	ldrb	r2, [r3, #1]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a3e:	705a      	strb	r2, [r3, #1]
 8000a40:	e002      	b.n	8000a48 <Process_VcuOutputs_Update+0x64>
	else
		Vcu_OutPuts.IGNITION_2_OUT = false;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]

	if(Vcu_OutPuts.IGNITION_1_OUT || Vcu_OutPuts.IGNITION_2_OUT)
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <Process_VcuOutputs_Update+0x74>
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00f      	beq.n	8000a78 <Process_VcuOutputs_Update+0x94>
	{
		Lights_OUT.brake_switch_out_d = !Switch_Ios_IN.brake_sw_in_d;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a5a:	7c9b      	ldrb	r3, [r3, #18]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f083 0301 	eor.w	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a74:	705a      	strb	r2, [r3, #1]
 8000a76:	e002      	b.n	8000a7e <Process_VcuOutputs_Update+0x9a>
	}
	else
	{
		Lights_OUT.brake_switch_out_d = false;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	705a      	strb	r2, [r3, #1]
	}

	if(Vcu_OutPuts.IGNITION_2_OUT && (Vcu_OutPuts.IGNITION_1_OUT == 0))
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d009      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
	{
		Vcu_OutPuts.IGNITION_1_OUT = 1;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
	}

	all_doors();
 8000a9a:	f000 f80f 	bl	8000abc <all_doors>

	Process_State1_Inputs();
 8000a9e:	f7ff fd03 	bl	80004a8 <Process_State1_Inputs>
	Process_State2_Inputs();
 8000aa2:	f7ff ff39 	bl	8000918 <Process_State2_Inputs>
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	1fff48cc 	.word	0x1fff48cc
 8000aac:	1fff5104 	.word	0x1fff5104
 8000ab0:	1fff4844 	.word	0x1fff4844
 8000ab4:	1fff47b0 	.word	0x1fff47b0
 8000ab8:	1fff48ac 	.word	0x1fff48ac

08000abc <all_doors>:

void all_doors(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	int charging = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
	Door_Switch_OUT.driver_door_OUT = Door_Switch_IN.driver_door_IN;
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <all_doors+0xdc>)
 8000ac8:	785a      	ldrb	r2, [r3, #1]
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <all_doors+0xe0>)
 8000acc:	705a      	strb	r2, [r3, #1]
	Door_Switch_OUT.passenger_door_OUT = Door_Switch_IN.passenger_door_IN;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <all_doors+0xdc>)
 8000ad0:	789a      	ldrb	r2, [r3, #2]
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <all_doors+0xe0>)
 8000ad4:	709a      	strb	r2, [r3, #2]
	Door_Switch_OUT.bonnet_OUT = 0;//Door_Switch_IN.bonnet_IN;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <all_doors+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	719a      	strb	r2, [r3, #6]
	Door_Switch_OUT.hatch_OUT = Door_Switch_IN.hatch_IN;
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <all_doors+0xdc>)
 8000ade:	795a      	ldrb	r2, [r3, #5]
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <all_doors+0xe0>)
 8000ae2:	715a      	strb	r2, [r3, #5]

	if(!Door_Switch_IN.driver_door_IN)
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <all_doors+0xdc>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <all_doors+0x3e>
		instrument_cluster_doorsvar.driver_door_OUT = (uint8_t)right_door;
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <all_doors+0xe4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	705a      	strb	r2, [r3, #1]
 8000af8:	e002      	b.n	8000b00 <all_doors+0x44>
	else
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <all_doors+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	705a      	strb	r2, [r3, #1]

	if(!Door_Switch_IN.passenger_door_IN)
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <all_doors+0xdc>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <all_doors+0x5a>
		instrument_cluster_doorsvar.passenger_door_OUT = (uint8_t)left_door;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <all_doors+0xe4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	709a      	strb	r2, [r3, #2]
 8000b14:	e002      	b.n	8000b1c <all_doors+0x60>
	else
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <all_doors+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	709a      	strb	r2, [r3, #2]

	if(!Door_Switch_IN.bonnet_IN)
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <all_doors+0xdc>)
 8000b1e:	799b      	ldrb	r3, [r3, #6]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <all_doors+0x76>
		instrument_cluster_doorsvar.bonnet_OUT = 0;//(uint8_t)hood;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <all_doors+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e002      	b.n	8000b38 <all_doors+0x7c>
	else
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <all_doors+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	719a      	strb	r2, [r3, #6]

	if(!Door_Switch_IN.hatch_IN)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <all_doors+0xdc>)
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <all_doors+0x92>
		instrument_cluster_doorsvar.hatch_OUT = (uint8_t)tailgate;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <all_doors+0xe4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	715a      	strb	r2, [r3, #5]
 8000b4c:	e002      	b.n	8000b54 <all_doors+0x98>
	else
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <all_doors+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	715a      	strb	r2, [r3, #5]

	charging = 0x20;
 8000b54:	2320      	movs	r3, #32
 8000b56:	607b      	str	r3, [r7, #4]

	if(charger_on())
 8000b58:	f000 f826 	bl	8000ba8 <charger_on>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00c      	beq.n	8000b7c <all_doors+0xc0>
	{
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <all_doors+0xe4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	705a      	strb	r2, [r3, #1]
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <all_doors+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	709a      	strb	r2, [r3, #2]
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <all_doors+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	719a      	strb	r2, [r3, #6]
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <all_doors+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
 8000b7a:	e004      	b.n	8000b86 <all_doors+0xca>
	}
	else
	{
		charging = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
		charge_complete = 0x00;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <all_doors+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	}

	if(charge_complete)
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <all_doors+0xe8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <all_doors+0xd6>
		charging = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]

	//*cluster_door_in = instrument_cluster_doorsvar.driver_door_OUT + instrument_cluster_doorsvar.passenger_door_OUT + instrument_cluster_doorsvar.bonnet_OUT + instrument_cluster_doorsvar.hatch_OUT + charge_complete + charging;
}
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	1fff48b8 	.word	0x1fff48b8
 8000b9c:	1fff4830 	.word	0x1fff4830
 8000ba0:	1fff48dc 	.word	0x1fff48dc
 8000ba4:	1fff4859 	.word	0x1fff4859

08000ba8 <charger_on>:


int charger_on(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	return Vcu_InPuts.charger_connect_IN;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <charger_on+0x14>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
	//return charging_connected ;
	return 0;
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	1fff5104 	.word	0x1fff5104

08000bc0 <init_hw>:
 */

#include "DAVE.h"

void init_hw(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status = DAVE_STATUS_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]

	if (init_status == DAVE_STATUS_SUCCESS)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <init_hw+0x1a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0);
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <init_hw+0x30>)
 8000bd2:	f007 feff 	bl	80089d4 <CAN_NODE_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	}
	if (init_status == DAVE_STATUS_SUCCESS)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <init_hw+0x2a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1);
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <init_hw+0x34>)
 8000be2:	f007 fef7 	bl	80089d4 <CAN_NODE_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
   }

}
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08013870 	.word	0x08013870
 8000bf4:	08013a58 	.word	0x08013a58

08000bf8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2201      	movs	r2, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
}
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	605a      	str	r2, [r3, #4]
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <convert_raw_data_into_current>:
	float adc_vout = (avg_receive_data / TOTAL_SAMPLES) * (VREF /RESOLUTION);
	DROPPED_IN_12V = adc_vout / ATTENUATION;
}

void convert_raw_data_into_current(void)
{
 8000c40:	b590      	push	{r4, r7, lr}
 8000c42:	b085      	sub	sp, #20
 8000c44:	af00      	add	r7, sp, #0
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000c46:	4864      	ldr	r0, [pc, #400]	; (8000dd8 <convert_raw_data_into_current+0x198>)
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2240      	movs	r2, #64	; 0x40
 8000c4c:	f010 fd0d 	bl	801166a <memset>
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000c50:	4862      	ldr	r0, [pc, #392]	; (8000ddc <convert_raw_data_into_current+0x19c>)
 8000c52:	2100      	movs	r1, #0
 8000c54:	2240      	movs	r2, #64	; 0x40
 8000c56:	f010 fd08 	bl	801166a <memset>

	for(int i = 0; i < 16; i++)
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	e0ac      	b.n	8000dba <convert_raw_data_into_current+0x17a>
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000c60:	2300      	movs	r3, #0
 8000c62:	72fb      	strb	r3, [r7, #11]
 8000c64:	e026      	b.n	8000cb4 <convert_raw_data_into_current+0x74>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
 8000c66:	4a5c      	ldr	r2, [pc, #368]	; (8000dd8 <convert_raw_data_into_current+0x198>)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c6e:	7afa      	ldrb	r2, [r7, #11]
 8000c70:	485b      	ldr	r0, [pc, #364]	; (8000de0 <convert_raw_data_into_current+0x1a0>)
 8000c72:	68f9      	ldr	r1, [r7, #12]
 8000c74:	2432      	movs	r4, #50	; 0x32
 8000c76:	fb04 f101 	mul.w	r1, r4, r1
 8000c7a:	440a      	add	r2, r1
 8000c7c:	4402      	add	r2, r0
 8000c7e:	7812      	ldrb	r2, [r2, #0]
 8000c80:	441a      	add	r2, r3
 8000c82:	4955      	ldr	r1, [pc, #340]	; (8000dd8 <convert_raw_data_into_current+0x198>)
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
 8000c8a:	4a54      	ldr	r2, [pc, #336]	; (8000ddc <convert_raw_data_into_current+0x19c>)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c92:	7afa      	ldrb	r2, [r7, #11]
 8000c94:	4853      	ldr	r0, [pc, #332]	; (8000de4 <convert_raw_data_into_current+0x1a4>)
 8000c96:	68f9      	ldr	r1, [r7, #12]
 8000c98:	2432      	movs	r4, #50	; 0x32
 8000c9a:	fb04 f101 	mul.w	r1, r4, r1
 8000c9e:	440a      	add	r2, r1
 8000ca0:	4402      	add	r2, r0
 8000ca2:	7812      	ldrb	r2, [r2, #0]
 8000ca4:	441a      	add	r2, r3
 8000ca6:	494d      	ldr	r1, [pc, #308]	; (8000ddc <convert_raw_data_into_current+0x19c>)
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000cae:	7afb      	ldrb	r3, [r7, #11]
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	72fb      	strb	r3, [r7, #11]
 8000cb4:	7afb      	ldrb	r3, [r7, #11]
 8000cb6:	2b31      	cmp	r3, #49	; 0x31
 8000cb8:	d9d5      	bls.n	8000c66 <convert_raw_data_into_current+0x26>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
		}

		float adc_vout = (ADS2_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000cba:	4a47      	ldr	r2, [pc, #284]	; (8000dd8 <convert_raw_data_into_current+0x198>)
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cc2:	4a49      	ldr	r2, [pc, #292]	; (8000de8 <convert_raw_data_into_current+0x1a8>)
 8000cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8000cc8:	091b      	lsrs	r3, r3, #4
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f00f fe1e 	bl	801090c <__aeabi_ui2d>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	460b      	mov	r3, r1
 8000cd4:	4610      	mov	r0, r2
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	f04f 0200 	mov.w	r2, #0
 8000cdc:	4b43      	ldr	r3, [pc, #268]	; (8000dec <convert_raw_data_into_current+0x1ac>)
 8000cde:	f00f fe8b 	bl	80109f8 <__aeabi_dmul>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4610      	mov	r0, r2
 8000ce8:	4619      	mov	r1, r3
 8000cea:	f010 f967 	bl	8010fbc <__aeabi_d2f>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	607b      	str	r3, [r7, #4]
		adc2_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f00f fe2c 	bl	8010950 <__aeabi_f2d>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4610      	mov	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	a331      	add	r3, pc, #196	; (adr r3, 8000dc8 <convert_raw_data_into_current+0x188>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f00f ffa1 	bl	8010c4c <__aeabi_ddiv>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	a32f      	add	r3, pc, #188	; (adr r3, 8000dd0 <convert_raw_data_into_current+0x190>)
 8000d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d18:	f00f ff98 	bl	8010c4c <__aeabi_ddiv>
 8000d1c:	4602      	mov	r2, r0
 8000d1e:	460b      	mov	r3, r1
 8000d20:	4610      	mov	r0, r2
 8000d22:	4619      	mov	r1, r3
 8000d24:	f010 f94a 	bl	8010fbc <__aeabi_d2f>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	4a31      	ldr	r2, [pc, #196]	; (8000df0 <convert_raw_data_into_current+0x1b0>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	009b      	lsls	r3, r3, #2
 8000d30:	4413      	add	r3, r2
 8000d32:	6019      	str	r1, [r3, #0]

		adc_vout = 0;
 8000d34:	f04f 0300 	mov.w	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000d3a:	4a28      	ldr	r2, [pc, #160]	; (8000ddc <convert_raw_data_into_current+0x19c>)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d42:	4a29      	ldr	r2, [pc, #164]	; (8000de8 <convert_raw_data_into_current+0x1a8>)
 8000d44:	fba2 2303 	umull	r2, r3, r2, r3
 8000d48:	091b      	lsrs	r3, r3, #4
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f00f fdde 	bl	801090c <__aeabi_ui2d>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f04f 0200 	mov.w	r2, #0
 8000d5c:	4b23      	ldr	r3, [pc, #140]	; (8000dec <convert_raw_data_into_current+0x1ac>)
 8000d5e:	f00f fe4b 	bl	80109f8 <__aeabi_dmul>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4610      	mov	r0, r2
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f010 f927 	bl	8010fbc <__aeabi_d2f>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	607b      	str	r3, [r7, #4]
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000d72:	6878      	ldr	r0, [r7, #4]
 8000d74:	f00f fdec 	bl	8010950 <__aeabi_f2d>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	a311      	add	r3, pc, #68	; (adr r3, 8000dc8 <convert_raw_data_into_current+0x188>)
 8000d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d86:	f00f ff61 	bl	8010c4c <__aeabi_ddiv>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	a30f      	add	r3, pc, #60	; (adr r3, 8000dd0 <convert_raw_data_into_current+0x190>)
 8000d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d98:	f00f ff58 	bl	8010c4c <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	4610      	mov	r0, r2
 8000da2:	4619      	mov	r1, r3
 8000da4:	f010 f90a 	bl	8010fbc <__aeabi_d2f>
 8000da8:	4601      	mov	r1, r0
 8000daa:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <convert_raw_data_into_current+0x1b4>)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	009b      	lsls	r3, r3, #2
 8000db0:	4413      	add	r3, r2
 8000db2:	6019      	str	r1, [r3, #0]
void convert_raw_data_into_current(void)
{
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	3301      	adds	r3, #1
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	2b0f      	cmp	r3, #15
 8000dbe:	f77f af4f 	ble.w	8000c60 <convert_raw_data_into_current+0x20>

		adc_vout = 0;
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
	}
}
 8000dc2:	3714      	adds	r7, #20
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	33333333 	.word	0x33333333
 8000dcc:	4062e333 	.word	0x4062e333
 8000dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8000dd4:	3f40624d 	.word	0x3f40624d
 8000dd8:	1fff4ccc 	.word	0x1fff4ccc
 8000ddc:	1fff4d0c 	.word	0x1fff4d0c
 8000de0:	1fff4de0 	.word	0x1fff4de0
 8000de4:	1fff49ac 	.word	0x1fff49ac
 8000de8:	51eb851f 	.word	0x51eb851f
 8000dec:	3f840000 	.word	0x3f840000
 8000df0:	1fff4d50 	.word	0x1fff4d50
 8000df4:	1fff48e4 	.word	0x1fff48e4

08000df8 <SPI_ADC_ProcessModeChange>:

void SPI_ADC_ProcessModeChange(uint8_t ADCMode)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	71fb      	strb	r3, [r7, #7]
	if(ADC_AUTO1 == ADCMode)
 8000e02:	79fb      	ldrb	r3, [r7, #7]
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <SPI_ADC_ProcessModeChange+0x2c>
	{
		//change operating mode to AUTO1
	}
	else if(ADC_AUTO2 == ADCMode)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d108      	bne.n	8000e20 <SPI_ADC_ProcessModeChange+0x28>
	{
		//read only ADC3 right now later on add ADC2
		SPI_ADS7961_AUTO_MODE2(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
 8000e0e:	2002      	movs	r0, #2
 8000e10:	2106      	movs	r1, #6
 8000e12:	f000 f8e9 	bl	8000fe8 <SPI_ADS7961_AUTO_MODE2>
		SPI_ADS7961_AUTO_MODE2(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
 8000e16:	2005      	movs	r0, #5
 8000e18:	2106      	movs	r1, #6
 8000e1a:	f000 f8e5 	bl	8000fe8 <SPI_ADS7961_AUTO_MODE2>
 8000e1e:	e001      	b.n	8000e24 <SPI_ADC_ProcessModeChange+0x2c>
	}
	else //manual mode
	{
		//configure manual mode
		SPI_ADC_MANUAL_MODE();
 8000e20:	f000 f806 	bl	8000e30 <SPI_ADC_MANUAL_MODE>
	}

	//do not call this right now you can call this when it is in use.
	convert_raw_data_into_current();
 8000e24:	f7ff ff0c 	bl	8000c40 <convert_raw_data_into_current>
}
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop

08000e30 <SPI_ADC_MANUAL_MODE>:

void SPI_ADC_MANUAL_MODE(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	//ADC_Read_AllChannel(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
	//ADC_Read_AllChannel(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
	ADC_Read_by_Channel(ADS3_Port2,ADS3_Pin,12);//pass Ads cs port , pin and channel
 8000e34:	2002      	movs	r0, #2
 8000e36:	2106      	movs	r1, #6
 8000e38:	220c      	movs	r2, #12
 8000e3a:	f000 f99b 	bl	8001174 <ADC_Read_by_Channel>
}
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <ADS7861_MANUAL_MODE_PKT>:

uint16_t ADS7861_MANUAL_MODE_PKT(uint16_t channel) {
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	80fb      	strh	r3, [r7, #6]

	ADS7961Frame_t transmitPkt;
	transmitPkt.Bit.operating_mode=1;
 8000e4a:	7b7b      	ldrb	r3, [r7, #13]
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	f362 1307 	bfi	r3, r2, #4, #4
 8000e52:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.enable_D0_to_D6=0;
 8000e54:	7b7b      	ldrb	r3, [r7, #13]
 8000e56:	f36f 03c3 	bfc	r3, #3, #1
 8000e5a:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.channel_selection=channel;
 8000e5c:	88fb      	ldrh	r3, [r7, #6]
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	f003 030f 	and.w	r3, r3, #15
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	89bb      	ldrh	r3, [r7, #12]
 8000e68:	f362 13ca 	bfi	r3, r2, #7, #4
 8000e6c:	81bb      	strh	r3, [r7, #12]
	transmitPkt.Bit.input_range=0;
 8000e6e:	7b3b      	ldrb	r3, [r7, #12]
 8000e70:	f36f 1386 	bfc	r3, #6, #1
 8000e74:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.device_operation=0;
 8000e76:	7b3b      	ldrb	r3, [r7, #12]
 8000e78:	f36f 1345 	bfc	r3, #5, #1
 8000e7c:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.output_mode=0;
 8000e7e:	7b3b      	ldrb	r3, [r7, #12]
 8000e80:	f36f 1304 	bfc	r3, #4, #1
 8000e84:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.GPIO_Output=0;
 8000e86:	7b3b      	ldrb	r3, [r7, #12]
 8000e88:	f36f 0303 	bfc	r3, #0, #4
 8000e8c:	733b      	strb	r3, [r7, #12]
	return  transmitPkt.F_Data;
 8000e8e:	89bb      	ldrh	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <SPI_ADS7961_AUTO2_Init>:
		}
	}
}

void SPI_ADS7961_AUTO2_Init(uint8_t temp_port_num ,uint8_t pin_number)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b08c      	sub	sp, #48	; 0x30
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	460a      	mov	r2, r1
 8000ea6:	71fb      	strb	r3, [r7, #7]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	71bb      	strb	r3, [r7, #6]
	XMC_GPIO_PORT_t * temp_ptr;

	if(temp_port_num == 5)
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	2b05      	cmp	r3, #5
 8000eb0:	d107      	bne.n	8000ec2 <SPI_ADS7961_AUTO2_Init+0x26>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8000eb2:	4b48      	ldr	r3, [pc, #288]	; (8000fd4 <SPI_ADS7961_AUTO2_Init+0x138>)
 8000eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000eb6:	4848      	ldr	r0, [pc, #288]	; (8000fd8 <SPI_ADS7961_AUTO2_Init+0x13c>)
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2240      	movs	r2, #64	; 0x40
 8000ebc:	f010 fbd5 	bl	801166a <memset>
 8000ec0:	e009      	b.n	8000ed6 <SPI_ADS7961_AUTO2_Init+0x3a>
	}
	else if(temp_port_num == 2)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d106      	bne.n	8000ed6 <SPI_ADS7961_AUTO2_Init+0x3a>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8000ec8:	4b44      	ldr	r3, [pc, #272]	; (8000fdc <SPI_ADS7961_AUTO2_Init+0x140>)
 8000eca:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000ecc:	4844      	ldr	r0, [pc, #272]	; (8000fe0 <SPI_ADS7961_AUTO2_Init+0x144>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	2240      	movs	r2, #64	; 0x40
 8000ed2:	f010 fbca 	bl	801166a <memset>
	}

	uint8_t SendData[2] = { 0x3C, 0x00 }; //{MODE_CONTROL_AUTO2 >> 8, MODE_CONTROL_AUTO2 && 0xFF};
 8000ed6:	233c      	movs	r3, #60	; 0x3c
 8000ed8:	753b      	strb	r3, [r7, #20]
 8000eda:	2300      	movs	r3, #0
 8000edc:	757b      	strb	r3, [r7, #21]
	uint8_t SendData1[2];

	if(temp_port_num == 5)
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b05      	cmp	r3, #5
 8000ee2:	d104      	bne.n	8000eee <SPI_ADS7961_AUTO2_Init+0x52>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000ee4:	2393      	movs	r3, #147	; 0x93
 8000ee6:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0xC0;
 8000ee8:	23c0      	movs	r3, #192	; 0xc0
 8000eea:	747b      	strb	r3, [r7, #17]
 8000eec:	e006      	b.n	8000efc <SPI_ADS7961_AUTO2_Init+0x60>
	}
	else if(temp_port_num == 2)
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d103      	bne.n	8000efc <SPI_ADS7961_AUTO2_Init+0x60>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000ef4:	2393      	movs	r3, #147	; 0x93
 8000ef6:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0x00;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	747b      	strb	r3, [r7, #17]
	}
	uint8_t SendData2[2] = {0x00,0x00} ; //{CONTINUE_MODE_PREVIOUS >>8, CONTINUE_MODE_PREVIOUS && 0xFF};
 8000efc:	2300      	movs	r3, #0
 8000efe:	733b      	strb	r3, [r7, #12]
 8000f00:	2300      	movs	r3, #0
 8000f02:	737b      	strb	r3, [r7, #13]

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f04:	79bb      	ldrb	r3, [r7, #6]
 8000f06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f7ff fe75 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f0e:	79bb      	ldrb	r3, [r7, #6]
 8000f10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f12:	4619      	mov	r1, r3
 8000f14:	f7ff fe80 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f1c:	e002      	b.n	8000f24 <SPI_ADS7961_AUTO2_Init+0x88>
 8000f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f20:	3301      	adds	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f26:	2b09      	cmp	r3, #9
 8000f28:	dcf9      	bgt.n	8000f1e <SPI_ADS7961_AUTO2_Init+0x82>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 2);
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	482d      	ldr	r0, [pc, #180]	; (8000fe4 <SPI_ADS7961_AUTO2_Init+0x148>)
 8000f30:	4619      	mov	r1, r3
 8000f32:	2202      	movs	r2, #2
 8000f34:	f005 fe9a 	bl	8006c6c <SPI_MASTER_Transmit>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f38:	79bb      	ldrb	r3, [r7, #6]
 8000f3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f7ff fe5b 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

    XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f46:	4619      	mov	r1, r3
 8000f48:	f7ff fe66 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
 8000f50:	e002      	b.n	8000f58 <SPI_ADS7961_AUTO2_Init+0xbc>
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	3301      	adds	r3, #1
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
 8000f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f5a:	2b09      	cmp	r3, #9
 8000f5c:	dcf9      	bgt.n	8000f52 <SPI_ADS7961_AUTO2_Init+0xb6>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 8000f5e:	f107 0314 	add.w	r3, r7, #20
 8000f62:	4820      	ldr	r0, [pc, #128]	; (8000fe4 <SPI_ADS7961_AUTO2_Init+0x148>)
 8000f64:	4619      	mov	r1, r3
 8000f66:	2202      	movs	r2, #2
 8000f68:	f005 fe80 	bl	8006c6c <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
 8000f70:	e002      	b.n	8000f78 <SPI_ADS7961_AUTO2_Init+0xdc>
 8000f72:	6a3b      	ldr	r3, [r7, #32]
 8000f74:	3301      	adds	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
 8000f78:	6a3b      	ldr	r3, [r7, #32]
 8000f7a:	2b09      	cmp	r3, #9
 8000f7c:	dcf9      	bgt.n	8000f72 <SPI_ADS7961_AUTO2_Init+0xd6>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f7e:	79bb      	ldrb	r3, [r7, #6]
 8000f80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f82:	4619      	mov	r1, r3
 8000f84:	f7ff fe38 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000f88:	79bb      	ldrb	r3, [r7, #6]
 8000f8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f7ff fe43 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
 8000f96:	e002      	b.n	8000f9e <SPI_ADS7961_AUTO2_Init+0x102>
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	61fb      	str	r3, [r7, #28]
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	dcf9      	bgt.n	8000f98 <SPI_ADS7961_AUTO2_Init+0xfc>
	// for CONTINUE MODE PREVIOUS
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData2, 2);
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	480e      	ldr	r0, [pc, #56]	; (8000fe4 <SPI_ADS7961_AUTO2_Init+0x148>)
 8000faa:	4619      	mov	r1, r3
 8000fac:	2202      	movs	r2, #2
 8000fae:	f005 fe5d 	bl	8006c6c <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61bb      	str	r3, [r7, #24]
 8000fb6:	e002      	b.n	8000fbe <SPI_ADS7961_AUTO2_Init+0x122>
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61bb      	str	r3, [r7, #24]
 8000fbe:	69bb      	ldr	r3, [r7, #24]
 8000fc0:	2b09      	cmp	r3, #9
 8000fc2:	dcf9      	bgt.n	8000fb8 <SPI_ADS7961_AUTO2_Init+0x11c>

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fc4:	79bb      	ldrb	r3, [r7, #6]
 8000fc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fc8:	4619      	mov	r1, r3
 8000fca:	f7ff fe15 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
}
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	48028500 	.word	0x48028500
 8000fd8:	1fff4ccc 	.word	0x1fff4ccc
 8000fdc:	48028200 	.word	0x48028200
 8000fe0:	1fff4d0c 	.word	0x1fff4d0c
 8000fe4:	1ffe89ac 	.word	0x1ffe89ac

08000fe8 <SPI_ADS7961_AUTO_MODE2>:

//
void SPI_ADS7961_AUTO_MODE2(uint8_t temp_port_num, uint8_t pin_number)
{
 8000fe8:	b590      	push	{r4, r7, lr}
 8000fea:	b08b      	sub	sp, #44	; 0x2c
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460a      	mov	r2, r1
 8000ff2:	71fb      	strb	r3, [r7, #7]
 8000ff4:	4613      	mov	r3, r2
 8000ff6:	71bb      	strb	r3, [r7, #6]
	uint8_t loop = 16;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ReadData[2];
//	if(flag==false)
//	{
	SPI_ADS7961_AUTO2_Init(temp_port_num, pin_number);
 8000ffe:	79fa      	ldrb	r2, [r7, #7]
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	4610      	mov	r0, r2
 8001004:	4619      	mov	r1, r3
 8001006:	f7ff ff49 	bl	8000e9c <SPI_ADS7961_AUTO2_Init>
	flag = true;
 800100a:	4b52      	ldr	r3, [pc, #328]	; (8001154 <SPI_ADS7961_AUTO_MODE2+0x16c>)
 800100c:	2201      	movs	r2, #1
 800100e:	701a      	strb	r2, [r3, #0]
//	}

	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	2b05      	cmp	r3, #5
 8001014:	d102      	bne.n	800101c <SPI_ADS7961_AUTO_MODE2+0x34>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8001016:	4b50      	ldr	r3, [pc, #320]	; (8001158 <SPI_ADS7961_AUTO_MODE2+0x170>)
 8001018:	623b      	str	r3, [r7, #32]
 800101a:	e007      	b.n	800102c <SPI_ADS7961_AUTO_MODE2+0x44>
	}
	else if (temp_port_num == 2)
 800101c:	79fb      	ldrb	r3, [r7, #7]
 800101e:	2b02      	cmp	r3, #2
 8001020:	d104      	bne.n	800102c <SPI_ADS7961_AUTO_MODE2+0x44>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8001022:	4b4e      	ldr	r3, [pc, #312]	; (800115c <SPI_ADS7961_AUTO_MODE2+0x174>)
 8001024:	623b      	str	r3, [r7, #32]
		loop = 13;
 8001026:	230d      	movs	r3, #13
 8001028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(adc2_array_counter > 49)
 800102c:	4b4c      	ldr	r3, [pc, #304]	; (8001160 <SPI_ADS7961_AUTO_MODE2+0x178>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b31      	cmp	r3, #49	; 0x31
 8001032:	d902      	bls.n	800103a <SPI_ADS7961_AUTO_MODE2+0x52>
	{
		adc2_array_counter = 0;
 8001034:	4b4a      	ldr	r3, [pc, #296]	; (8001160 <SPI_ADS7961_AUTO_MODE2+0x178>)
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
	}

	if(adc3_array_counter > 49)
 800103a:	4b4a      	ldr	r3, [pc, #296]	; (8001164 <SPI_ADS7961_AUTO_MODE2+0x17c>)
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b31      	cmp	r3, #49	; 0x31
 8001040:	d902      	bls.n	8001048 <SPI_ADS7961_AUTO_MODE2+0x60>
	{
		adc3_array_counter = 0;
 8001042:	4b48      	ldr	r3, [pc, #288]	; (8001164 <SPI_ADS7961_AUTO_MODE2+0x17c>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
 800104c:	e07b      	b.n	8001146 <SPI_ADS7961_AUTO_MODE2+0x15e>
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 800104e:	2300      	movs	r3, #0
 8001050:	76fb      	strb	r3, [r7, #27]
 8001052:	e05d      	b.n	8001110 <SPI_ADS7961_AUTO_MODE2+0x128>
		{
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001054:	79bb      	ldrb	r3, [r7, #6]
 8001056:	6a38      	ldr	r0, [r7, #32]
 8001058:	4619      	mov	r1, r3
 800105a:	f7ff fdcd 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
			//for (int i = 0; i > 9; i++);

			XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800105e:	79bb      	ldrb	r3, [r7, #6]
 8001060:	6a38      	ldr	r0, [r7, #32]
 8001062:	4619      	mov	r1, r3
 8001064:	f7ff fdd8 	bl	8000c18 <XMC_GPIO_SetOutputLow>
			for (int i = 0; i > 2; i++);
 8001068:	2300      	movs	r3, #0
 800106a:	617b      	str	r3, [r7, #20]
 800106c:	e002      	b.n	8001074 <SPI_ADS7961_AUTO_MODE2+0x8c>
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	3301      	adds	r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	2b02      	cmp	r3, #2
 8001078:	dcf9      	bgt.n	800106e <SPI_ADS7961_AUTO_MODE2+0x86>
			SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	483a      	ldr	r0, [pc, #232]	; (8001168 <SPI_ADS7961_AUTO_MODE2+0x180>)
 8001080:	4619      	mov	r1, r3
 8001082:	2202      	movs	r2, #2
 8001084:	f005 fe0c 	bl	8006ca0 <SPI_MASTER_Receive>
			for (int i = 0; i > 2; i++);
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
 800108c:	e002      	b.n	8001094 <SPI_ADS7961_AUTO_MODE2+0xac>
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	3301      	adds	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	2b02      	cmp	r3, #2
 8001098:	dcf9      	bgt.n	800108e <SPI_ADS7961_AUTO_MODE2+0xa6>
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800109a:	79bb      	ldrb	r3, [r7, #6]
 800109c:	6a38      	ldr	r0, [r7, #32]
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fdaa 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

			if (temp_port_num == 5)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	2b05      	cmp	r3, #5
 80010a8:	d116      	bne.n	80010d8 <SPI_ADS7961_AUTO_MODE2+0xf0>
			{
				ADS2_receive_data[channel_count][adc2_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 80010aa:	7efb      	ldrb	r3, [r7, #27]
 80010ac:	4a2c      	ldr	r2, [pc, #176]	; (8001160 <SPI_ADS7961_AUTO_MODE2+0x178>)
 80010ae:	7812      	ldrb	r2, [r2, #0]
 80010b0:	4614      	mov	r4, r2
 80010b2:	7b3a      	ldrb	r2, [r7, #12]
 80010b4:	0112      	lsls	r2, r2, #4
 80010b6:	b2d1      	uxtb	r1, r2
 80010b8:	7b7a      	ldrb	r2, [r7, #13]
 80010ba:	0912      	lsrs	r2, r2, #4
 80010bc:	b2d2      	uxtb	r2, r2
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	430a      	orrs	r2, r1
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	b2d0      	uxtb	r0, r2
 80010c6:	4a29      	ldr	r2, [pc, #164]	; (800116c <SPI_ADS7961_AUTO_MODE2+0x184>)
 80010c8:	2132      	movs	r1, #50	; 0x32
 80010ca:	fb01 f303 	mul.w	r3, r1, r3
 80010ce:	4423      	add	r3, r4
 80010d0:	4413      	add	r3, r2
 80010d2:	4602      	mov	r2, r0
 80010d4:	701a      	strb	r2, [r3, #0]
 80010d6:	e018      	b.n	800110a <SPI_ADS7961_AUTO_MODE2+0x122>
//				ADS2_recive_channel[channel_count] = ((ReadData[0] & 0xF0) >> 4); //uncomment channel for debugging

//				ADS2_avg_receive_data[channel_count] += ADS2_receive_data[channel_count];
			}
			else if (temp_port_num == 2)
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d115      	bne.n	800110a <SPI_ADS7961_AUTO_MODE2+0x122>
			{
				ADS3_receive_data[channel_count][adc3_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 80010de:	7efb      	ldrb	r3, [r7, #27]
 80010e0:	4a20      	ldr	r2, [pc, #128]	; (8001164 <SPI_ADS7961_AUTO_MODE2+0x17c>)
 80010e2:	7812      	ldrb	r2, [r2, #0]
 80010e4:	4614      	mov	r4, r2
 80010e6:	7b3a      	ldrb	r2, [r7, #12]
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d1      	uxtb	r1, r2
 80010ec:	7b7a      	ldrb	r2, [r7, #13]
 80010ee:	0912      	lsrs	r2, r2, #4
 80010f0:	b2d2      	uxtb	r2, r2
 80010f2:	b2d2      	uxtb	r2, r2
 80010f4:	430a      	orrs	r2, r1
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	b2d0      	uxtb	r0, r2
 80010fa:	4a1d      	ldr	r2, [pc, #116]	; (8001170 <SPI_ADS7961_AUTO_MODE2+0x188>)
 80010fc:	2132      	movs	r1, #50	; 0x32
 80010fe:	fb01 f303 	mul.w	r3, r1, r3
 8001102:	4423      	add	r3, r4
 8001104:	4413      	add	r3, r2
 8001106:	4602      	mov	r2, r0
 8001108:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 800110a:	7efb      	ldrb	r3, [r7, #27]
 800110c:	3301      	adds	r3, #1
 800110e:	76fb      	strb	r3, [r7, #27]
 8001110:	7efa      	ldrb	r2, [r7, #27]
 8001112:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001116:	429a      	cmp	r2, r3
 8001118:	d39c      	bcc.n	8001054 <SPI_ADS7961_AUTO_MODE2+0x6c>

//				ADS3_avg_receive_data[channel_count] += ADS3_receive_data[channel_count];
			}
		}

		if (temp_port_num == 5)
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b05      	cmp	r3, #5
 800111e:	d106      	bne.n	800112e <SPI_ADS7961_AUTO_MODE2+0x146>
		{
			adc2_array_counter++;
 8001120:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <SPI_ADS7961_AUTO_MODE2+0x178>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	b2da      	uxtb	r2, r3
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <SPI_ADS7961_AUTO_MODE2+0x178>)
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e008      	b.n	8001140 <SPI_ADS7961_AUTO_MODE2+0x158>
		}
		else if (temp_port_num == 2)
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d105      	bne.n	8001140 <SPI_ADS7961_AUTO_MODE2+0x158>
		{
			adc3_array_counter++;
 8001134:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <SPI_ADS7961_AUTO_MODE2+0x17c>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	b2da      	uxtb	r2, r3
 800113c:	4b09      	ldr	r3, [pc, #36]	; (8001164 <SPI_ADS7961_AUTO_MODE2+0x17c>)
 800113e:	701a      	strb	r2, [r3, #0]
	{
		adc3_array_counter = 0;
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	3301      	adds	r3, #1
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	69fb      	ldr	r3, [r7, #28]
 8001148:	2b04      	cmp	r3, #4
 800114a:	dd80      	ble.n	800104e <SPI_ADS7961_AUTO_MODE2+0x66>
		else if (temp_port_num == 2)
		{
			adc3_array_counter++;
		}
	}
}
 800114c:	372c      	adds	r7, #44	; 0x2c
 800114e:	46bd      	mov	sp, r7
 8001150:	bd90      	pop	{r4, r7, pc}
 8001152:	bf00      	nop
 8001154:	1fff4397 	.word	0x1fff4397
 8001158:	48028500 	.word	0x48028500
 800115c:	48028200 	.word	0x48028200
 8001160:	1fff4398 	.word	0x1fff4398
 8001164:	1fff4399 	.word	0x1fff4399
 8001168:	1ffe89ac 	.word	0x1ffe89ac
 800116c:	1fff4de0 	.word	0x1fff4de0
 8001170:	1fff49ac 	.word	0x1fff49ac

08001174 <ADC_Read_by_Channel>:

void ADC_Read_by_Channel(uint8_t temp_port_num, uint8_t pin_number, uint8_t channel)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08e      	sub	sp, #56	; 0x38
 8001178:	af00      	add	r7, sp, #0
 800117a:	4603      	mov	r3, r0
 800117c:	71fb      	strb	r3, [r7, #7]
 800117e:	460b      	mov	r3, r1
 8001180:	71bb      	strb	r3, [r7, #6]
 8001182:	4613      	mov	r3, r2
 8001184:	717b      	strb	r3, [r7, #5]
	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	2b05      	cmp	r3, #5
 800118a:	d107      	bne.n	800119c <ADC_Read_by_Channel+0x28>
	{
		temp_ptr = XMC_GPIO_PORT2;
 800118c:	4b51      	ldr	r3, [pc, #324]	; (80012d4 <ADC_Read_by_Channel+0x160>)
 800118e:	637b      	str	r3, [r7, #52]	; 0x34
		ADS2_avg_receive_data[channel] = 0;
 8001190:	797b      	ldrb	r3, [r7, #5]
 8001192:	4a51      	ldr	r2, [pc, #324]	; (80012d8 <ADC_Read_by_Channel+0x164>)
 8001194:	2100      	movs	r1, #0
 8001196:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800119a:	e009      	b.n	80011b0 <ADC_Read_by_Channel+0x3c>
	}
	else if (temp_port_num == 2)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d106      	bne.n	80011b0 <ADC_Read_by_Channel+0x3c>
	{
		temp_ptr = XMC_GPIO_PORT2;
 80011a2:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <ADC_Read_by_Channel+0x160>)
 80011a4:	637b      	str	r3, [r7, #52]	; 0x34
		ADS3_avg_receive_data[channel] = 0;
 80011a6:	797b      	ldrb	r3, [r7, #5]
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <ADC_Read_by_Channel+0x168>)
 80011aa:	2100      	movs	r1, #0
 80011ac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 80011b0:	2300      	movs	r3, #0
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
 80011b4:	e087      	b.n	80012c6 <ADC_Read_by_Channel+0x152>
	{
		int pkt = ADS7861_MANUAL_MODE_PKT(channel);
 80011b6:	797b      	ldrb	r3, [r7, #5]
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff fe40 	bl	8000e40 <ADS7861_MANUAL_MODE_PKT>
 80011c0:	4603      	mov	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]
		uint8_t SendData[2] = { (pkt >> 8), (pkt & 0xFF) };
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	121b      	asrs	r3, r3, #8
 80011c8:	b2db      	uxtb	r3, r3
 80011ca:	733b      	strb	r3, [r7, #12]
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	737b      	strb	r3, [r7, #13]
		uint8_t ReadData[2];
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011d6:	4619      	mov	r1, r3
 80011d8:	f7ff fd0e 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80011dc:	79bb      	ldrb	r3, [r7, #6]
 80011de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011e0:	4619      	mov	r1, r3
 80011e2:	f7ff fd19 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 16; i++)
 80011e6:	2300      	movs	r3, #0
 80011e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011ea:	e002      	b.n	80011f2 <ADC_Read_by_Channel+0x7e>
 80011ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011ee:	3301      	adds	r3, #1
 80011f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80011f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f4:	2b10      	cmp	r3, #16
 80011f6:	dcf9      	bgt.n	80011ec <ADC_Read_by_Channel+0x78>
			;
		SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 80011f8:	f107 030c 	add.w	r3, r7, #12
 80011fc:	4838      	ldr	r0, [pc, #224]	; (80012e0 <ADC_Read_by_Channel+0x16c>)
 80011fe:	4619      	mov	r1, r3
 8001200:	2202      	movs	r2, #2
 8001202:	f005 fd33 	bl	8006c6c <SPI_MASTER_Transmit>
		for (int i = 0; i > 9; i++)
 8001206:	2300      	movs	r3, #0
 8001208:	62bb      	str	r3, [r7, #40]	; 0x28
 800120a:	e002      	b.n	8001212 <ADC_Read_by_Channel+0x9e>
 800120c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800120e:	3301      	adds	r3, #1
 8001210:	62bb      	str	r3, [r7, #40]	; 0x28
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	2b09      	cmp	r3, #9
 8001216:	dcf9      	bgt.n	800120c <ADC_Read_by_Channel+0x98>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001218:	79bb      	ldrb	r3, [r7, #6]
 800121a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800121c:	4619      	mov	r1, r3
 800121e:	f7ff fceb 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 2; i++)
 8001222:	2300      	movs	r3, #0
 8001224:	627b      	str	r3, [r7, #36]	; 0x24
 8001226:	e002      	b.n	800122e <ADC_Read_by_Channel+0xba>
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	3301      	adds	r3, #1
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
 800122e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001230:	2b02      	cmp	r3, #2
 8001232:	dcf9      	bgt.n	8001228 <ADC_Read_by_Channel+0xb4>
			;
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fced 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 800123e:	2300      	movs	r3, #0
 8001240:	623b      	str	r3, [r7, #32]
 8001242:	e002      	b.n	800124a <ADC_Read_by_Channel+0xd6>
 8001244:	6a3b      	ldr	r3, [r7, #32]
 8001246:	3301      	adds	r3, #1
 8001248:	623b      	str	r3, [r7, #32]
 800124a:	6a3b      	ldr	r3, [r7, #32]
 800124c:	2b09      	cmp	r3, #9
 800124e:	dcf9      	bgt.n	8001244 <ADC_Read_by_Channel+0xd0>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001250:	f107 0308 	add.w	r3, r7, #8
 8001254:	4822      	ldr	r0, [pc, #136]	; (80012e0 <ADC_Read_by_Channel+0x16c>)
 8001256:	4619      	mov	r1, r3
 8001258:	2202      	movs	r2, #2
 800125a:	f005 fd21 	bl	8006ca0 <SPI_MASTER_Receive>
		for (int i = 0; i > 2; i++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e002      	b.n	800126a <ADC_Read_by_Channel+0xf6>
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	2b02      	cmp	r3, #2
 800126e:	dcf9      	bgt.n	8001264 <ADC_Read_by_Channel+0xf0>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001270:	79bb      	ldrb	r3, [r7, #6]
 8001272:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001274:	4619      	mov	r1, r3
 8001276:	f7ff fcbf 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 9; i++)
 800127a:	2300      	movs	r3, #0
 800127c:	61bb      	str	r3, [r7, #24]
 800127e:	e002      	b.n	8001286 <ADC_Read_by_Channel+0x112>
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	3301      	adds	r3, #1
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	2b09      	cmp	r3, #9
 800128a:	dcf9      	bgt.n	8001280 <ADC_Read_by_Channel+0x10c>
			;

		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800128c:	79bb      	ldrb	r3, [r7, #6]
 800128e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fcc1 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e002      	b.n	80012a2 <ADC_Read_by_Channel+0x12e>
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	3301      	adds	r3, #1
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dcf9      	bgt.n	800129c <ADC_Read_by_Channel+0x128>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <ADC_Read_by_Channel+0x16c>)
 80012ae:	4619      	mov	r1, r3
 80012b0:	2202      	movs	r2, #2
 80012b2:	f005 fcf5 	bl	8006ca0 <SPI_MASTER_Receive>

		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80012b6:	79bb      	ldrb	r3, [r7, #6]
 80012b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012ba:	4619      	mov	r1, r3
 80012bc:	f7ff fc9c 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
	{
		temp_ptr = XMC_GPIO_PORT2;
		ADS3_avg_receive_data[channel] = 0;
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 80012c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c2:	3301      	adds	r3, #1
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
 80012c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c8:	2b31      	cmp	r3, #49	; 0x31
 80012ca:	f77f af74 	ble.w	80011b6 <ADC_Read_by_Channel+0x42>
//			ADS3_recive_channel[channel] = ((ReadData[0] & 0xF0) >> 4);

//			ADS3_avg_receive_data[channel] += ADS3_receive_data[channel];
		}
	}
}
 80012ce:	3738      	adds	r7, #56	; 0x38
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	48028200 	.word	0x48028200
 80012d8:	1fff4ccc 	.word	0x1fff4ccc
 80012dc:	1fff4d0c 	.word	0x1fff4d0c
 80012e0:	1ffe89ac 	.word	0x1ffe89ac

080012e4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	460b      	mov	r3, r1
 80012ee:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80012f0:	78fb      	ldrb	r3, [r7, #3]
 80012f2:	2201      	movs	r2, #1
 80012f4:	409a      	lsls	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	605a      	str	r2, [r3, #4]
}
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001316:	409a      	lsls	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	605a      	str	r2, [r3, #4]
}
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop

08001328 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7c1b      	ldrb	r3, [r3, #16]
 8001338:	4610      	mov	r0, r2
 800133a:	4619      	mov	r1, r3
 800133c:	f7ff ffd2 	bl	80012e4 <XMC_GPIO_SetOutputHigh>
}
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop

08001348 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	7c1b      	ldrb	r3, [r3, #16]
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	f7ff ffd2 	bl	8001304 <XMC_GPIO_SetOutputLow>
}
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop

08001368 <State_1>:

/*instrument_clustor_indicators_t *instrument_clustor_indicators = &CAN_MSG_DB[CAN_18FFB632];*/


void State_1(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_1_OUT)
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <State_1+0x4c>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d00b      	beq.n	800138c <State_1+0x24>
	{
		/* ignition 1 on state */
		is_drive_mode = true;
 8001374:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <State_1+0x50>)
 8001376:	2201      	movs	r2, #1
 8001378:	701a      	strb	r2, [r3, #0]

		ignition1_d_on();
 800137a:	f000 f81f 	bl	80013bc <ignition1_d_on>
		faciaaswitches();
 800137e:	f000 f965 	bl	800164c <faciaaswitches>
		Can_Outputs_State1();
 8001382:	f000 f891 	bl	80014a8 <Can_Outputs_State1>
		cluster_indicators_Out();
 8001386:	f000 f897 	bl	80014b8 <cluster_indicators_Out>
 800138a:	e00d      	b.n	80013a8 <State_1+0x40>
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 800138c:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <State_1+0x4c>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	f083 0301 	eor.w	r3, r3, #1
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b00      	cmp	r3, #0
 8001398:	d006      	beq.n	80013a8 <State_1+0x40>
	{
		is_drive_mode = false;
 800139a:	4b07      	ldr	r3, [pc, #28]	; (80013b8 <State_1+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

		//check battery voltage and turn on/off DC to DC converter
//		dc_dc_state_update(); //test this later
		/* ignition 1 off state */
		ignition1_d_off();
 80013a0:	f000 f842 	bl	8001428 <ignition1_d_off>
		all_direct_controlled_relay_off();
 80013a4:	f000 f878 	bl	8001498 <all_direct_controlled_relay_off>
	}

	VcuOut_IoExp_U24();
 80013a8:	f000 f8fa 	bl	80015a0 <VcuOut_IoExp_U24>
	VcuOut_IoExp_U25();
 80013ac:	f000 f948 	bl	8001640 <VcuOut_IoExp_U25>

}
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	1fff48cc 	.word	0x1fff48cc
 80013b8:	1fff4794 	.word	0x1fff4794

080013bc <ignition1_d_on>:
void ignition1_d_on()
 {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	uart_debugg("in ig1_d_on");
 80013c0:	480f      	ldr	r0, [pc, #60]	; (8001400 <ignition1_d_on+0x44>)
 80013c2:	f00e fc1b 	bl	800fbfc <uart_debugg>
	CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x0c;

	CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x48;
	CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x71;*/

 	DIGITAL_IO_SetOutputHigh(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 80013c6:	480f      	ldr	r0, [pc, #60]	; (8001404 <ignition1_d_on+0x48>)
 80013c8:	f7ff ffae 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INFOTAINMENT_PWR_OUT_D); // check infotainment port & pin
 80013cc:	480e      	ldr	r0, [pc, #56]	; (8001408 <ignition1_d_on+0x4c>)
 80013ce:	f7ff ffab 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INSTRUMENT_CON_PWR_OUT_D);
 80013d2:	480e      	ldr	r0, [pc, #56]	; (800140c <ignition1_d_on+0x50>)
 80013d4:	f7ff ffa8 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&WIPER_PWR_OUT_D);
 80013d8:	480d      	ldr	r0, [pc, #52]	; (8001410 <ignition1_d_on+0x54>)
 80013da:	f7ff ffa5 	bl	8001328 <DIGITAL_IO_SetOutputHigh>

 	DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <ignition1_d_on+0x58>)
 80013e0:	f7ff ffa2 	bl	8001328 <DIGITAL_IO_SetOutputHigh>

 	//IOExp_SetPIN_LOW(&I2C_MASTER_1, 0x40, 0, 0);
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED1_OUT_D); /// turn on HVAC(CPIS)
 80013e4:	480c      	ldr	r0, [pc, #48]	; (8001418 <ignition1_d_on+0x5c>)
 80013e6:	f00e fd09 	bl	800fdfc <digital_io_setoutputhigh>
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED2_OUT_D); /// turn on COMPRESSOR PWR.
 80013ea:	480c      	ldr	r0, [pc, #48]	; (800141c <ignition1_d_on+0x60>)
 80013ec:	f00e fd06 	bl	800fdfc <digital_io_setoutputhigh>

 	DIGITAL_IO_SetOutputHigh(&PWR_WINDOW_OUT_D);
 80013f0:	480b      	ldr	r0, [pc, #44]	; (8001420 <ignition1_d_on+0x64>)
 80013f2:	f7ff ff99 	bl	8001328 <DIGITAL_IO_SetOutputHigh>

 	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 	/*  active low */
 	//digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);

 	uart_debugg("exit ig1_d_on");
 80013f6:	480b      	ldr	r0, [pc, #44]	; (8001424 <ignition1_d_on+0x68>)
 80013f8:	f00e fc00 	bl	800fbfc <uart_debugg>
 }
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	08012ed8 	.word	0x08012ed8
 8001404:	080133c0 	.word	0x080133c0
 8001408:	080132bc 	.word	0x080132bc
 800140c:	08013190 	.word	0x08013190
 8001410:	08013280 	.word	0x08013280
 8001414:	080134c4 	.word	0x080134c4
 8001418:	1fff42b4 	.word	0x1fff42b4
 800141c:	1fff42b8 	.word	0x1fff42b8
 8001420:	08013438 	.word	0x08013438
 8001424:	08012ee4 	.word	0x08012ee4

08001428 <ignition1_d_off>:

 void ignition1_d_off()
 {
 8001428:	b580      	push	{r7, lr}
 800142a:	af00      	add	r7, sp, #0
	 /*CAN_MSG_DB[CAN_18FF0921].CAN_Data[5] = 0x00;
	  CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x00;*/
//for(volatile int i = 0; i<0xffff*80; i++);
	  /*CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x38;
	  CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x18;*/
	 uart_debugg("in ig1_d_off");
 800142c:	4810      	ldr	r0, [pc, #64]	; (8001470 <ignition1_d_off+0x48>)
 800142e:	f00e fbe5 	bl	800fbfc <uart_debugg>
 	DIGITAL_IO_SetOutputLow(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 8001432:	4810      	ldr	r0, [pc, #64]	; (8001474 <ignition1_d_off+0x4c>)
 8001434:	f7ff ff88 	bl	8001348 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INFOTAINMENT_PWR_OUT_D);
 8001438:	480f      	ldr	r0, [pc, #60]	; (8001478 <ignition1_d_off+0x50>)
 800143a:	f7ff ff85 	bl	8001348 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INSTRUMENT_CON_PWR_OUT_D);
 800143e:	480f      	ldr	r0, [pc, #60]	; (800147c <ignition1_d_off+0x54>)
 8001440:	f7ff ff82 	bl	8001348 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&WIPER_PWR_OUT_D);
 8001444:	480e      	ldr	r0, [pc, #56]	; (8001480 <ignition1_d_off+0x58>)
 8001446:	f7ff ff7f 	bl	8001348 <DIGITAL_IO_SetOutputLow>

 	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);

 	DIGITAL_IO_SetOutputLow(&PWR_WINDOW_OUT_D);
 800144a:	480e      	ldr	r0, [pc, #56]	; (8001484 <ignition1_d_off+0x5c>)
 800144c:	f7ff ff7c 	bl	8001348 <DIGITAL_IO_SetOutputLow>

 	digital_io_setoutputlow(&AC_BLOWER_SPEED1_OUT_D); /// turn off HVAC(CPIS)
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <ignition1_d_off+0x60>)
 8001452:	f00e fc97 	bl	800fd84 <digital_io_setoutputlow>
 	digital_io_setoutputlow(&AC_BLOWER_SPEED2_OUT_D); /// turn off COMPRESSOR PWR.
 8001456:	480d      	ldr	r0, [pc, #52]	; (800148c <ignition1_d_off+0x64>)
 8001458:	f00e fc94 	bl	800fd84 <digital_io_setoutputlow>
 	DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <ignition1_d_off+0x68>)
 800145e:	f7ff ff73 	bl	8001348 <DIGITAL_IO_SetOutputLow>

 	/* active low */
 	digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 8001462:	480c      	ldr	r0, [pc, #48]	; (8001494 <ignition1_d_off+0x6c>)
 8001464:	f00e fc8e 	bl	800fd84 <digital_io_setoutputlow>

 	//digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply

 	uart_debugg("in ig1_d_off");
 8001468:	4801      	ldr	r0, [pc, #4]	; (8001470 <ignition1_d_off+0x48>)
 800146a:	f00e fbc7 	bl	800fbfc <uart_debugg>

 }
 800146e:	bd80      	pop	{r7, pc}
 8001470:	08012ef4 	.word	0x08012ef4
 8001474:	080133c0 	.word	0x080133c0
 8001478:	080132bc 	.word	0x080132bc
 800147c:	08013190 	.word	0x08013190
 8001480:	08013280 	.word	0x08013280
 8001484:	08013438 	.word	0x08013438
 8001488:	1fff42b4 	.word	0x1fff42b4
 800148c:	1fff42b8 	.word	0x1fff42b8
 8001490:	0801317c 	.word	0x0801317c
 8001494:	1fff42bc 	.word	0x1fff42bc

08001498 <all_direct_controlled_relay_off>:

 void all_direct_controlled_relay_off(void)
 {
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <all_direct_controlled_relay_off+0xc>)
 800149e:	f7ff ff53 	bl	8001348 <DIGITAL_IO_SetOutputLow>
 }
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	080131cc 	.word	0x080131cc

080014a8 <Can_Outputs_State1>:

  void Can_Outputs_State1(void)
 {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
 	CAN_OUTPUT_COMPRESSOR();
 80014ac:	f009 f8ca 	bl	800a644 <CAN_OUTPUT_COMPRESSOR>
 	CAN_OUTPUT_CLUSTER();
 80014b0:	f008 fd64 	bl	8009f7c <CAN_OUTPUT_CLUSTER>
 	//CAN_OUTPUT_EPS();
 }
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop

080014b8 <cluster_indicators_Out>:

 void cluster_indicators_Out(void)
 {
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
	instrument_clustor_indicators-> left_indicator = Instrument_Cluster_OUT.set_left_indicator;
 80014bc:	4b34      	ldr	r3, [pc, #208]	; (8001590 <cluster_indicators_Out+0xd8>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b34      	ldr	r3, [pc, #208]	; (8001594 <cluster_indicators_Out+0xdc>)
 80014c2:	7999      	ldrb	r1, [r3, #6]
 80014c4:	78d3      	ldrb	r3, [r2, #3]
 80014c6:	f361 0300 	bfi	r3, r1, #0, #1
 80014ca:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> right_indicator = Instrument_Cluster_OUT.set_right_indicator;
 80014cc:	4b30      	ldr	r3, [pc, #192]	; (8001590 <cluster_indicators_Out+0xd8>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b30      	ldr	r3, [pc, #192]	; (8001594 <cluster_indicators_Out+0xdc>)
 80014d2:	79d9      	ldrb	r1, [r3, #7]
 80014d4:	78d3      	ldrb	r3, [r2, #3]
 80014d6:	f361 0341 	bfi	r3, r1, #1, #1
 80014da:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> low_beam = Instrument_Cluster_OUT.set_low_beam;
 80014dc:	4b2c      	ldr	r3, [pc, #176]	; (8001590 <cluster_indicators_Out+0xd8>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4b2c      	ldr	r3, [pc, #176]	; (8001594 <cluster_indicators_Out+0xdc>)
 80014e2:	7a19      	ldrb	r1, [r3, #8]
 80014e4:	78d3      	ldrb	r3, [r2, #3]
 80014e6:	f361 0382 	bfi	r3, r1, #2, #1
 80014ea:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> high_beam = Instrument_Cluster_OUT.set_high_beam;
 80014ec:	4b28      	ldr	r3, [pc, #160]	; (8001590 <cluster_indicators_Out+0xd8>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b28      	ldr	r3, [pc, #160]	; (8001594 <cluster_indicators_Out+0xdc>)
 80014f2:	7a59      	ldrb	r1, [r3, #9]
 80014f4:	78d3      	ldrb	r3, [r2, #3]
 80014f6:	f361 03c3 	bfi	r3, r1, #3, #1
 80014fa:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> brake_fluid_flow = Instrument_Cluster_OUT.set_brake_oil;
 80014fc:	4b24      	ldr	r3, [pc, #144]	; (8001590 <cluster_indicators_Out+0xd8>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4b24      	ldr	r3, [pc, #144]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001502:	7a99      	ldrb	r1, [r3, #10]
 8001504:	78d3      	ldrb	r3, [r2, #3]
 8001506:	f361 1304 	bfi	r3, r1, #4, #1
 800150a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> eps_failure = Instrument_Cluster_OUT.eps_status;///////
 800150c:	4b20      	ldr	r3, [pc, #128]	; (8001590 <cluster_indicators_Out+0xd8>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	4b20      	ldr	r3, [pc, #128]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001512:	7b19      	ldrb	r1, [r3, #12]
 8001514:	78d3      	ldrb	r3, [r2, #3]
 8001516:	f361 1345 	bfi	r3, r1, #5, #1
 800151a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> aux_battery_low = Instrument_Cluster_OUT.aux_vtg_critical;
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <cluster_indicators_Out+0xd8>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b1c      	ldr	r3, [pc, #112]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001522:	7ad9      	ldrb	r1, [r3, #11]
 8001524:	78d3      	ldrb	r3, [r2, #3]
 8001526:	f361 1386 	bfi	r3, r1, #6, #1
 800152a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> battery_high_temp = Instrument_Cluster_OUT.battery_temp_exceeded;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <cluster_indicators_Out+0xd8>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b18      	ldr	r3, [pc, #96]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001532:	7b59      	ldrb	r1, [r3, #13]
 8001534:	78d3      	ldrb	r3, [r2, #3]
 8001536:	f361 13c7 	bfi	r3, r1, #7, #1
 800153a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> charging_on = Instrument_Cluster_OUT.charging_connected;
 800153c:	4b14      	ldr	r3, [pc, #80]	; (8001590 <cluster_indicators_Out+0xd8>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b14      	ldr	r3, [pc, #80]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001542:	7b99      	ldrb	r1, [r3, #14]
 8001544:	7953      	ldrb	r3, [r2, #5]
 8001546:	f361 0300 	bfi	r3, r1, #0, #1
 800154a:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> generic_alarm;/////////
  	instrument_clustor_indicators-> regen = Instrument_Cluster_OUT.regen_enabled;///////////
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <cluster_indicators_Out+0xd8>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	4b10      	ldr	r3, [pc, #64]	; (8001594 <cluster_indicators_Out+0xdc>)
 8001552:	7bd9      	ldrb	r1, [r3, #15]
 8001554:	7953      	ldrb	r3, [r2, #5]
 8001556:	f361 0382 	bfi	r3, r1, #2, #1
 800155a:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;
 800155c:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <cluster_indicators_Out+0xd8>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	4b0d      	ldr	r3, [pc, #52]	; (8001598 <cluster_indicators_Out+0xe0>)
 8001562:	7a1b      	ldrb	r3, [r3, #8]
 8001564:	f083 0301 	eor.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	b2d9      	uxtb	r1, r3
 8001570:	7953      	ldrb	r3, [r2, #5]
 8001572:	f361 03c3 	bfi	r3, r1, #3, #1
 8001576:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> seat_belt = Seat_Belt_OUT.seat_occupied;
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <cluster_indicators_Out+0xd8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <cluster_indicators_Out+0xe4>)
 800157e:	7899      	ldrb	r1, [r3, #2]
 8001580:	7953      	ldrb	r3, [r2, #5]
 8001582:	f361 1304 	bfi	r3, r1, #4, #1
 8001586:	7153      	strb	r3, [r2, #5]
  }
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr
 8001590:	1ffe8808 	.word	0x1ffe8808
 8001594:	1fff4874 	.word	0x1fff4874
 8001598:	1fff4844 	.word	0x1fff4844
 800159c:	1fff4828 	.word	0x1fff4828

080015a0 <VcuOut_IoExp_U24>:

 void VcuOut_IoExp_U24(void)
 {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	 uart_debugg("in U24");
 80015a4:	481e      	ldr	r0, [pc, #120]	; (8001620 <VcuOut_IoExp_U24+0x80>)
 80015a6:	f00e fb29 	bl	800fbfc <uart_debugg>
	 if(Relay_Control_Switch_OUT.low_beam_OUT)
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <VcuOut_IoExp_U24+0x84>)
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <VcuOut_IoExp_U24+0x1a>
	 {
		 DIGITAL_IO_SetOutputHigh(&LOW_BEAM_OUT_D);
 80015b2:	481d      	ldr	r0, [pc, #116]	; (8001628 <VcuOut_IoExp_U24+0x88>)
 80015b4:	f7ff feb8 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 80015b8:	e002      	b.n	80015c0 <VcuOut_IoExp_U24+0x20>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 1;
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LOW_BEAM_OUT_D);
 80015ba:	481b      	ldr	r0, [pc, #108]	; (8001628 <VcuOut_IoExp_U24+0x88>)
 80015bc:	f7ff fec4 	bl	8001348 <DIGITAL_IO_SetOutputLow>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 0;
	 }

	 if(Relay_Control_Switch_OUT.high_beam_OUT)
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <VcuOut_IoExp_U24+0x84>)
 80015c2:	785b      	ldrb	r3, [r3, #1]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <VcuOut_IoExp_U24+0x30>
	 {
		 DIGITAL_IO_SetOutputHigh(&HIGH_BEAM_OUT_D);
 80015c8:	4818      	ldr	r0, [pc, #96]	; (800162c <VcuOut_IoExp_U24+0x8c>)
 80015ca:	f7ff fead 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 80015ce:	e002      	b.n	80015d6 <VcuOut_IoExp_U24+0x36>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 80015d0:	4816      	ldr	r0, [pc, #88]	; (800162c <VcuOut_IoExp_U24+0x8c>)
 80015d2:	f7ff feb9 	bl	8001348 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <VcuOut_IoExp_U24+0x84>)
 80015d8:	789b      	ldrb	r3, [r3, #2]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <VcuOut_IoExp_U24+0x46>
	 {
		 DIGITAL_IO_SetOutputHigh(&POS_OUT_D);
 80015de:	4814      	ldr	r0, [pc, #80]	; (8001630 <VcuOut_IoExp_U24+0x90>)
 80015e0:	f7ff fea2 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 80015e4:	e002      	b.n	80015ec <VcuOut_IoExp_U24+0x4c>
		 //digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&POS_OUT_D);
 80015e6:	4812      	ldr	r0, [pc, #72]	; (8001630 <VcuOut_IoExp_U24+0x90>)
 80015e8:	f7ff feae 	bl	8001348 <DIGITAL_IO_SetOutputLow>
		// digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
	 }

	 if(Relay_Control_Switch_OUT.left_indicator_OUT)
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <VcuOut_IoExp_U24+0x84>)
 80015ee:	78db      	ldrb	r3, [r3, #3]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d003      	beq.n	80015fc <VcuOut_IoExp_U24+0x5c>
	 {
		 DIGITAL_IO_SetOutputHigh(&LEFT_INDICATOR_OUT_D);
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <VcuOut_IoExp_U24+0x94>)
 80015f6:	f7ff fe97 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 80015fa:	e002      	b.n	8001602 <VcuOut_IoExp_U24+0x62>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LEFT_INDICATOR_OUT_D);
 80015fc:	480d      	ldr	r0, [pc, #52]	; (8001634 <VcuOut_IoExp_U24+0x94>)
 80015fe:	f7ff fea3 	bl	8001348 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.right_indicator_OUT)
 8001602:	4b08      	ldr	r3, [pc, #32]	; (8001624 <VcuOut_IoExp_U24+0x84>)
 8001604:	791b      	ldrb	r3, [r3, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d003      	beq.n	8001612 <VcuOut_IoExp_U24+0x72>
	 {
		 DIGITAL_IO_SetOutputHigh(&RIGHT_INDICATOR_OUT_D);
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <VcuOut_IoExp_U24+0x98>)
 800160c:	f7ff fe8c 	bl	8001328 <DIGITAL_IO_SetOutputHigh>
 8001610:	e002      	b.n	8001618 <VcuOut_IoExp_U24+0x78>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&RIGHT_INDICATOR_OUT_D);
 8001612:	4809      	ldr	r0, [pc, #36]	; (8001638 <VcuOut_IoExp_U24+0x98>)
 8001614:	f7ff fe98 	bl	8001348 <DIGITAL_IO_SetOutputLow>
	 }

	 uart_debugg("exit U24");
 8001618:	4808      	ldr	r0, [pc, #32]	; (800163c <VcuOut_IoExp_U24+0x9c>)
 800161a:	f00e faef 	bl	800fbfc <uart_debugg>
 }
 800161e:	bd80      	pop	{r7, pc}
 8001620:	08012f04 	.word	0x08012f04
 8001624:	1fff47b0 	.word	0x1fff47b0
 8001628:	0801335c 	.word	0x0801335c
 800162c:	08013348 	.word	0x08013348
 8001630:	08013244 	.word	0x08013244
 8001634:	08013460 	.word	0x08013460
 8001638:	08013334 	.word	0x08013334
 800163c:	08012f0c 	.word	0x08012f0c

08001640 <VcuOut_IoExp_U25>:

 void VcuOut_IoExp_U25(void)
  {
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
 	 else
 	 {
 		// DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 	 }

 }
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <faciaaswitches>:
 {

 }

 void faciaaswitches(void)
 {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <faciaaswitches+0x1c>)
 8001652:	789b      	ldrb	r3, [r3, #2]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <faciaaswitches+0x14>
	{
		digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <faciaaswitches+0x20>)
 800165a:	f00e fbcf 	bl	800fdfc <digital_io_setoutputhigh>
 800165e:	e002      	b.n	8001666 <faciaaswitches+0x1a>
	}
	else
	{
		digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 8001660:	4802      	ldr	r0, [pc, #8]	; (800166c <faciaaswitches+0x20>)
 8001662:	f00e fb8f 	bl	800fd84 <digital_io_setoutputlow>
	}

 }
 8001666:	bd80      	pop	{r7, pc}
 8001668:	1fff47b0 	.word	0x1fff47b0
 800166c:	1fff42bc 	.word	0x1fff42bc

08001670 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	460b      	mov	r3, r1
 800167a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800167c:	78fb      	ldrb	r3, [r7, #3]
 800167e:	2201      	movs	r2, #1
 8001680:	409a      	lsls	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	605a      	str	r2, [r3, #4]
}
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800169c:	78fb      	ldrb	r3, [r7, #3]
 800169e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016a2:	409a      	lsls	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	605a      	str	r2, [r3, #4]
}
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop

080016b4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	7c1b      	ldrb	r3, [r3, #16]
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff ffd2 	bl	8001670 <XMC_GPIO_SetOutputHigh>
}
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop

080016d4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7c1b      	ldrb	r3, [r3, #16]
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff ffd2 	bl	8001690 <XMC_GPIO_SetOutputLow>
}
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop

080016f4 <State_2>:

enum Gearchange_Sequence_forHzaard_t{not_allowed, allowed };


void State_2(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <State_2+0x38>)
 80016fa:	785b      	ldrb	r3, [r3, #1]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d006      	beq.n	800170e <State_2+0x1a>
	{

		/* ignition 2 on state */
		ignition2_d_on();
 8001700:	f000 f816 	bl	8001730 <ignition2_d_on>
		VcuOut_MotorController();
 8001704:	f000 f892 	bl	800182c <VcuOut_MotorController>

		Can_Outputs_State2();
 8001708:	f000 f888 	bl	800181c <Can_Outputs_State2>
 800170c:	e00a      	b.n	8001724 <State_2+0x30>


		//State2_Lights();

	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800170e:	4b07      	ldr	r3, [pc, #28]	; (800172c <State_2+0x38>)
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	f083 0301 	eor.w	r3, r3, #1
 8001716:	b2db      	uxtb	r3, r3
 8001718:	2b00      	cmp	r3, #0
 800171a:	d003      	beq.n	8001724 <State_2+0x30>
	{

		/* ignition 2 off state */
		ignition2_d_off();
 800171c:	f000 f840 	bl	80017a0 <ignition2_d_off>


		VcuOut_MotorController_off();
 8001720:	f000 f8f8 	bl	8001914 <VcuOut_MotorController_off>
	}

	State2_Lights();
 8001724:	f000 f9ca 	bl	8001abc <State2_Lights>
}
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	1fff48cc 	.word	0x1fff48cc

08001730 <ignition2_d_on>:


void ignition2_d_on()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	/* ignition 2 by default on */
	digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 8001734:	4810      	ldr	r0, [pc, #64]	; (8001778 <ignition2_d_on+0x48>)
 8001736:	f00e fb61 	bl	800fdfc <digital_io_setoutputhigh>
	//ignition_default_state_MC();
	DIGITAL_IO_SetOutputHigh(&PWR_STEERING_OUT_D);/// power steering// check
 800173a:	4810      	ldr	r0, [pc, #64]	; (800177c <ignition2_d_on+0x4c>)
 800173c:	f7ff ffba 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&VACUUM_PUMP_OUT_D); // check
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <ignition2_d_on+0x50>)
 8001742:	f7ff ffb7 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	//DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D); // common for everything giving 12v to mc every relay IN VCU13(IN 14 DIRCTLY GOES TO OCNTROLLER FAN)
	DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D);
 8001746:	480f      	ldr	r0, [pc, #60]	; (8001784 <ignition2_d_on+0x54>)
 8001748:	f7ff ffb4 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 800174c:	480e      	ldr	r0, [pc, #56]	; (8001788 <ignition2_d_on+0x58>)
 800174e:	f7ff ffb1 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REGEN_RELAY_OUT_D); // on relay, relay_driver_pin as output
 8001752:	480e      	ldr	r0, [pc, #56]	; (800178c <ignition2_d_on+0x5c>)
 8001754:	f7ff ffae 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_ELOCK_RELAY_OUT_D); // start relay , relay_driver_pin as output
 8001758:	480d      	ldr	r0, [pc, #52]	; (8001790 <ignition2_d_on+0x60>)
 800175a:	f7ff ffab 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_FAN_PWR_OUT_D);  // start, on, fwd, rev relay output side
 800175e:	480d      	ldr	r0, [pc, #52]	; (8001794 <ignition2_d_on+0x64>)
 8001760:	f7ff ffa8 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 8001764:	480c      	ldr	r0, [pc, #48]	; (8001798 <ignition2_d_on+0x68>)
 8001766:	f7ff ffa5 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>
	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 1;
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <ignition2_d_on+0x6c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	7813      	ldrb	r3, [r2, #0]
 8001770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001774:	7013      	strb	r3, [r2, #0]
}
 8001776:	bd80      	pop	{r7, pc}
 8001778:	1fff42c0 	.word	0x1fff42c0
 800177c:	0801344c 	.word	0x0801344c
 8001780:	08013154 	.word	0x08013154
 8001784:	080133e8 	.word	0x080133e8
 8001788:	0801326c 	.word	0x0801326c
 800178c:	0801321c 	.word	0x0801321c
 8001790:	08013230 	.word	0x08013230
 8001794:	080133fc 	.word	0x080133fc
 8001798:	080131f4 	.word	0x080131f4
 800179c:	1ffe8818 	.word	0x1ffe8818

080017a0 <ignition2_d_off>:

void ignition2_d_off()
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&PWR_STEERING_OUT_D);/// power steering
 80017a4:	4812      	ldr	r0, [pc, #72]	; (80017f0 <ignition2_d_off+0x50>)
 80017a6:	f7ff ff95 	bl	80016d4 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&VACUUM_PUMP_OUT_D);
 80017aa:	4812      	ldr	r0, [pc, #72]	; (80017f4 <ignition2_d_off+0x54>)
 80017ac:	f7ff ff92 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	//DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);

	DIGITAL_IO_SetOutputLow(&MC_ELOCK_RELAY_OUT_D);
 80017b0:	4811      	ldr	r0, [pc, #68]	; (80017f8 <ignition2_d_off+0x58>)
 80017b2:	f7ff ff8f 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REGEN_RELAY_OUT_D);
 80017b6:	4811      	ldr	r0, [pc, #68]	; (80017fc <ignition2_d_off+0x5c>)
 80017b8:	f7ff ff8c 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_FAN_PWR_OUT_D);
 80017bc:	4810      	ldr	r0, [pc, #64]	; (8001800 <ignition2_d_off+0x60>)
 80017be:	f7ff ff89 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 80017c2:	4810      	ldr	r0, [pc, #64]	; (8001804 <ignition2_d_off+0x64>)
 80017c4:	f7ff ff86 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);
 80017c8:	480f      	ldr	r0, [pc, #60]	; (8001808 <ignition2_d_off+0x68>)
 80017ca:	f7ff ff83 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 80017ce:	480f      	ldr	r0, [pc, #60]	; (800180c <ignition2_d_off+0x6c>)
 80017d0:	f7ff ff80 	bl	80016d4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 80017d4:	480e      	ldr	r0, [pc, #56]	; (8001810 <ignition2_d_off+0x70>)
 80017d6:	f7ff ff7d 	bl	80016d4 <DIGITAL_IO_SetOutputLow>
	digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply
 80017da:	480e      	ldr	r0, [pc, #56]	; (8001814 <ignition2_d_off+0x74>)
 80017dc:	f00e fad2 	bl	800fd84 <digital_io_setoutputlow>
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 80017e0:	4b0d      	ldr	r3, [pc, #52]	; (8001818 <ignition2_d_off+0x78>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	7813      	ldrb	r3, [r2, #0]
 80017e6:	f36f 13c7 	bfc	r3, #7, #1
 80017ea:	7013      	strb	r3, [r2, #0]
}
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	0801344c 	.word	0x0801344c
 80017f4:	08013154 	.word	0x08013154
 80017f8:	08013230 	.word	0x08013230
 80017fc:	0801321c 	.word	0x0801321c
 8001800:	080133fc 	.word	0x080133fc
 8001804:	0801326c 	.word	0x0801326c
 8001808:	080133e8 	.word	0x080133e8
 800180c:	08013370 	.word	0x08013370
 8001810:	080131f4 	.word	0x080131f4
 8001814:	1fff42c0 	.word	0x1fff42c0
 8001818:	1ffe8818 	.word	0x1ffe8818

0800181c <Can_Outputs_State2>:
{

}

void Can_Outputs_State2(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	CAN_OUTPUT_EPS();
 8001820:	f008 fd12 	bl	800a248 <CAN_OUTPUT_EPS>
	//Gtake_Tx_29bit();

	Irp_Tx_29bit();
 8001824:	f009 faaa 	bl	800ad7c <Irp_Tx_29bit>

	//Tx_CAN_0x121();
}
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop

0800182c <VcuOut_MotorController>:

void VcuOut_MotorController(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_Gtake();
	VcuOut_MotorController_IRP();
 8001830:	f000 f802 	bl	8001838 <VcuOut_MotorController_IRP>
}
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop

08001838 <VcuOut_MotorController_IRP>:
	//limphome_Mode();
}


void VcuOut_MotorController_IRP(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0

	static enum Gearchange_Sequence_forHzaard_t Gearchange_Sequence_forHzaard = not_allowed;

	VcuOut_MotorController_IRP_BMS_Status();
 800183c:	f000 f8a0 	bl	8001980 <VcuOut_MotorController_IRP_BMS_Status>

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
 8001840:	4b2e      	ldr	r3, [pc, #184]	; (80018fc <VcuOut_MotorController_IRP+0xc4>)
 8001842:	785b      	ldrb	r3, [r3, #1]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d053      	beq.n	80018f0 <VcuOut_MotorController_IRP+0xb8>
 8001848:	4b2d      	ldr	r3, [pc, #180]	; (8001900 <VcuOut_MotorController_IRP+0xc8>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d14f      	bne.n	80018f0 <VcuOut_MotorController_IRP+0xb8>
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001850:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <VcuOut_MotorController_IRP+0xcc>)
 8001852:	78db      	ldrb	r3, [r3, #3]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d012      	beq.n	800187e <VcuOut_MotorController_IRP+0x46>
		{
			if(Gearchange_Sequence_forHzaard)
 8001858:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00a      	beq.n	8001876 <VcuOut_MotorController_IRP+0x3e>
			{
				Irp_Mcu_drive_states_29bit->FNR = Forward_Irp;
 8001860:	4b2a      	ldr	r3, [pc, #168]	; (800190c <VcuOut_MotorController_IRP+0xd4>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	7813      	ldrb	r3, [r2, #0]
 8001866:	2101      	movs	r1, #1
 8001868:	f361 0301 	bfi	r3, r1, #0, #2
 800186c:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> forward = 0x00;
 800186e:	4b28      	ldr	r3, [pc, #160]	; (8001910 <VcuOut_MotorController_IRP+0xd8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 8001878:	2200      	movs	r2, #0
 800187a:	701a      	strb	r2, [r3, #0]
 800187c:	e037      	b.n	80018ee <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.reverse_relay)
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <VcuOut_MotorController_IRP+0xcc>)
 8001880:	785b      	ldrb	r3, [r3, #1]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d012      	beq.n	80018ac <VcuOut_MotorController_IRP+0x74>
		{
			if(Gearchange_Sequence_forHzaard)
 8001886:	4b20      	ldr	r3, [pc, #128]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00a      	beq.n	80018a4 <VcuOut_MotorController_IRP+0x6c>
			{
				Irp_Mcu_drive_states_29bit->FNR = Reverse_Irp;
 800188e:	4b1f      	ldr	r3, [pc, #124]	; (800190c <VcuOut_MotorController_IRP+0xd4>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	7813      	ldrb	r3, [r2, #0]
 8001894:	2102      	movs	r1, #2
 8001896:	f361 0301 	bfi	r3, r1, #0, #2
 800189a:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> reverse = 0x03;
 800189c:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <VcuOut_MotorController_IRP+0xd8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2203      	movs	r2, #3
 80018a2:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 80018a4:	4b18      	ldr	r3, [pc, #96]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	701a      	strb	r2, [r3, #0]
 80018aa:	e020      	b.n	80018ee <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.park_relay)
 80018ac:	4b15      	ldr	r3, [pc, #84]	; (8001904 <VcuOut_MotorController_IRP+0xcc>)
 80018ae:	789b      	ldrb	r3, [r3, #2]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d00a      	beq.n	80018ca <VcuOut_MotorController_IRP+0x92>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp; //there is no option for irp
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <VcuOut_MotorController_IRP+0xd4>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	7813      	ldrb	r3, [r2, #0]
 80018ba:	f36f 0301 	bfc	r3, #0, #2
 80018be:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> park = 0x02;
 80018c0:	4b13      	ldr	r3, [pc, #76]	; (8001910 <VcuOut_MotorController_IRP+0xd8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	2202      	movs	r2, #2
 80018c6:	701a      	strb	r2, [r3, #0]
 80018c8:	e011      	b.n	80018ee <VcuOut_MotorController_IRP+0xb6>
		}
		else if(Motor_controller_OUT.neutral)
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <VcuOut_MotorController_IRP+0xcc>)
 80018cc:	791b      	ldrb	r3, [r3, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d00d      	beq.n	80018ee <VcuOut_MotorController_IRP+0xb6>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <VcuOut_MotorController_IRP+0xd4>)
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	7813      	ldrb	r3, [r2, #0]
 80018d8:	f36f 0301 	bfc	r3, #0, #2
 80018dc:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> neutral = 0x01;
 80018de:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <VcuOut_MotorController_IRP+0xd8>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2201      	movs	r2, #1
 80018e4:	701a      	strb	r2, [r3, #0]
			Gearchange_Sequence_forHzaard = allowed;
 80018e6:	4b08      	ldr	r3, [pc, #32]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
	VcuOut_MotorController_IRP_BMS_Status();

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 80018ec:	e003      	b.n	80018f6 <VcuOut_MotorController_IRP+0xbe>
 80018ee:	e002      	b.n	80018f6 <VcuOut_MotorController_IRP+0xbe>
			Gearchange_Sequence_forHzaard = allowed;
		}
	}
	else
	{
		Gearchange_Sequence_forHzaard = not_allowed;
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <VcuOut_MotorController_IRP+0xd0>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	701a      	strb	r2, [r3, #0]
	}

	limphome_Mode_IRP();
 80018f6:	f000 f9e9 	bl	8001ccc <limphome_Mode_IRP>

}
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	1fff48ac 	.word	0x1fff48ac
 8001900:	1fff4812 	.word	0x1fff4812
 8001904:	1fff4804 	.word	0x1fff4804
 8001908:	1fff439a 	.word	0x1fff439a
 800190c:	1ffe8818 	.word	0x1ffe8818
 8001910:	1ffe8814 	.word	0x1ffe8814

08001914 <VcuOut_MotorController_off>:

void VcuOut_MotorController_off(void)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_off_gtake();
	VcuOut_MotorController_off_IRP();
 8001918:	f000 f802 	bl	8001920 <VcuOut_MotorController_off_IRP>

}
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop

08001920 <VcuOut_MotorController_off_IRP>:
	Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = 0;
	Gear_OUT-> neutral = 0x01;

}
void VcuOut_MotorController_off_IRP(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <VcuOut_MotorController_off_IRP+0x58>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	7813      	ldrb	r3, [r2, #0]
 800192a:	f36f 0301 	bfc	r3, #0, #2
 800192e:	7013      	strb	r3, [r2, #0]
	Irp_Mcu_drive_states_29bit->Throttle_Command = 1023;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <VcuOut_MotorController_off_IRP+0x58>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f04f 32ff 	mov.w	r2, #4294967295
 8001938:	705a      	strb	r2, [r3, #1]
 800193a:	789a      	ldrb	r2, [r3, #2]
 800193c:	f042 0203 	orr.w	r2, r2, #3
 8001940:	709a      	strb	r2, [r3, #2]
	Irp_Mcu_drive_states_29bit->Torque_Command = 0;
 8001942:	4b0d      	ldr	r3, [pc, #52]	; (8001978 <VcuOut_MotorController_off_IRP+0x58>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	789a      	ldrb	r2, [r3, #2]
 8001948:	f002 020f 	and.w	r2, r2, #15
 800194c:	709a      	strb	r2, [r3, #2]
 800194e:	2200      	movs	r2, #0
 8001950:	70da      	strb	r2, [r3, #3]
 8001952:	791a      	ldrb	r2, [r3, #4]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	711a      	strb	r2, [r3, #4]
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <VcuOut_MotorController_off_IRP+0x58>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	7813      	ldrb	r3, [r2, #0]
 8001960:	f36f 13c7 	bfc	r3, #7, #1
 8001964:	7013      	strb	r3, [r2, #0]

	Gear_OUT-> neutral = 0x01;
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <VcuOut_MotorController_off_IRP+0x5c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
	//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0;//(uint8_t )Relay_Control_Switch_OUT.ac_blower3_OUT;
	//Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = 0;//(uint8_t)Relay_Control_Switch_OUT.ac_blower3_OUT;


	//DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D); //in irp contactor +ve is coming from harness and -ve controlled by rev
}
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	1ffe8818 	.word	0x1ffe8818
 800197c:	1ffe8814 	.word	0x1ffe8814

08001980 <VcuOut_MotorController_IRP_BMS_Status>:

void VcuOut_MotorController_IRP_BMS_Status(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
	//Irp_Mcu_drive_states_29bit -> Driving_Profile = 3;

	Irp_Mcu_BMS_states_29bit->BMS_OperationMode = 5;
 8001984:	4b46      	ldr	r3, [pc, #280]	; (8001aa0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2205      	movs	r2, #5
 800198a:	701a      	strb	r2, [r3, #0]
	Irp_Mcu_BMS_states_29bit->BMS_Contactor_Status = 1;
 800198c:	4b44      	ldr	r3, [pc, #272]	; (8001aa0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	7853      	ldrb	r3, [r2, #1]
 8001992:	2101      	movs	r1, #1
 8001994:	f361 0301 	bfi	r3, r1, #0, #2
 8001998:	7053      	strb	r3, [r2, #1]
	Irp_Mcu_BMS_states_29bit->SOH = Bms_SOH;
 800199a:	4b41      	ldr	r3, [pc, #260]	; (8001aa0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 800199c:	681a      	ldr	r2, [r3, #0]
 800199e:	4b41      	ldr	r3, [pc, #260]	; (8001aa4 <VcuOut_MotorController_IRP_BMS_Status+0x124>)
 80019a0:	881b      	ldrh	r3, [r3, #0]
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019a8:	b2d9      	uxtb	r1, r3
 80019aa:	7893      	ldrb	r3, [r2, #2]
 80019ac:	f361 0306 	bfi	r3, r1, #0, #7
 80019b0:	7093      	strb	r3, [r2, #2]
	Irp_Mcu_BMS_states_29bit->BMS_SOC = Bms_SOC;
 80019b2:	4b3b      	ldr	r3, [pc, #236]	; (8001aa0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a3c      	ldr	r2, [pc, #240]	; (8001aa8 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 80019b8:	8812      	ldrh	r2, [r2, #0]
 80019ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80019be:	b292      	uxth	r2, r2
 80019c0:	b2d1      	uxtb	r1, r2
 80019c2:	2000      	movs	r0, #0
 80019c4:	4301      	orrs	r1, r0
 80019c6:	70d9      	strb	r1, [r3, #3]
 80019c8:	0a12      	lsrs	r2, r2, #8
 80019ca:	b292      	uxth	r2, r2
 80019cc:	f002 0203 	and.w	r2, r2, #3
 80019d0:	f002 0003 	and.w	r0, r2, #3
 80019d4:	791a      	ldrb	r2, [r3, #4]
 80019d6:	f022 0203 	bic.w	r2, r2, #3
 80019da:	4611      	mov	r1, r2
 80019dc:	4602      	mov	r2, r0
 80019de:	430a      	orrs	r2, r1
 80019e0:	711a      	strb	r2, [r3, #4]

	Irp_Mcu_BMS_Currents_29bit->Battery_Voltage = PackVoltage;//50
 80019e2:	4b32      	ldr	r3, [pc, #200]	; (8001aac <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <VcuOut_MotorController_IRP_BMS_Status+0x130>)
 80019e8:	6812      	ldr	r2, [r2, #0]
 80019ea:	b292      	uxth	r2, r2
 80019ec:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80019f0:	b292      	uxth	r2, r2
 80019f2:	b2d1      	uxtb	r1, r2
 80019f4:	2000      	movs	r0, #0
 80019f6:	4301      	orrs	r1, r0
 80019f8:	7019      	strb	r1, [r3, #0]
 80019fa:	0a12      	lsrs	r2, r2, #8
 80019fc:	b292      	uxth	r2, r2
 80019fe:	f002 021f 	and.w	r2, r2, #31
 8001a02:	f002 001f 	and.w	r0, r2, #31
 8001a06:	785a      	ldrb	r2, [r3, #1]
 8001a08:	f022 021f 	bic.w	r2, r2, #31
 8001a0c:	4611      	mov	r1, r2
 8001a0e:	4602      	mov	r2, r0
 8001a10:	430a      	orrs	r2, r1
 8001a12:	705a      	strb	r2, [r3, #1]
	Irp_Mcu_BMS_Currents_29bit->Battery_Current = PackCurrent;//20
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4a26      	ldr	r2, [pc, #152]	; (8001ab4 <VcuOut_MotorController_IRP_BMS_Status+0x134>)
 8001a1a:	6812      	ldr	r2, [r2, #0]
 8001a1c:	b292      	uxth	r2, r2
 8001a1e:	0152      	lsls	r2, r2, #5
 8001a20:	b212      	sxth	r2, r2
 8001a22:	1152      	asrs	r2, r2, #5
 8001a24:	b292      	uxth	r2, r2
 8001a26:	b2d1      	uxtb	r1, r2
 8001a28:	2000      	movs	r0, #0
 8001a2a:	4301      	orrs	r1, r0
 8001a2c:	7099      	strb	r1, [r3, #2]
 8001a2e:	0a12      	lsrs	r2, r2, #8
 8001a30:	b292      	uxth	r2, r2
 8001a32:	f002 0207 	and.w	r2, r2, #7
 8001a36:	f002 0007 	and.w	r0, r2, #7
 8001a3a:	78da      	ldrb	r2, [r3, #3]
 8001a3c:	f022 0207 	bic.w	r2, r2, #7
 8001a40:	4611      	mov	r1, r2
 8001a42:	4602      	mov	r2, r0
 8001a44:	430a      	orrs	r2, r1
 8001a46:	70da      	strb	r2, [r3, #3]
	Irp_Mcu_BMS_Currents_29bit->MaxDischargeCurrent = 450;//DischargeCurrentLimit * -1;//20;
 8001a48:	4b18      	ldr	r3, [pc, #96]	; (8001aac <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8001a52:	711a      	strb	r2, [r3, #4]
 8001a54:	795a      	ldrb	r2, [r3, #5]
 8001a56:	f022 0207 	bic.w	r2, r2, #7
 8001a5a:	f042 0201 	orr.w	r2, r2, #1
 8001a5e:	715a      	strb	r2, [r3, #5]
	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = -1 * RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
 8001a60:	4b12      	ldr	r3, [pc, #72]	; (8001aac <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a14      	ldr	r2, [pc, #80]	; (8001ab8 <VcuOut_MotorController_IRP_BMS_Status+0x138>)
 8001a66:	8812      	ldrh	r2, [r2, #0]
 8001a68:	4252      	negs	r2, r2
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	b292      	uxth	r2, r2
 8001a6e:	0152      	lsls	r2, r2, #5
 8001a70:	b212      	sxth	r2, r2
 8001a72:	1152      	asrs	r2, r2, #5
 8001a74:	b292      	uxth	r2, r2
 8001a76:	b2d1      	uxtb	r1, r2
 8001a78:	2000      	movs	r0, #0
 8001a7a:	4301      	orrs	r1, r0
 8001a7c:	7199      	strb	r1, [r3, #6]
 8001a7e:	0a12      	lsrs	r2, r2, #8
 8001a80:	b292      	uxth	r2, r2
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	f002 0007 	and.w	r0, r2, #7
 8001a8a:	79da      	ldrb	r2, [r3, #7]
 8001a8c:	f022 0207 	bic.w	r2, r2, #7
 8001a90:	4611      	mov	r1, r2
 8001a92:	4602      	mov	r2, r0
 8001a94:	430a      	orrs	r2, r1
 8001a96:	71da      	strb	r2, [r3, #7]

}
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	1ffe881c 	.word	0x1ffe881c
 8001aa4:	1fff48c8 	.word	0x1fff48c8
 8001aa8:	1fff48c0 	.word	0x1fff48c0
 8001aac:	1ffe8824 	.word	0x1ffe8824
 8001ab0:	1fff48d8 	.word	0x1fff48d8
 8001ab4:	1fff4818 	.word	0x1fff4818
 8001ab8:	1fff4820 	.word	0x1fff4820

08001abc <State2_Lights>:

void State2_Lights(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	if((Lights_OUT.brake_switch_out_d))
 8001ac0:	4b07      	ldr	r3, [pc, #28]	; (8001ae0 <State2_Lights+0x24>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <State2_Lights+0x22>
	{
		if((Lights_OUT.reverse_light_out))
 8001ac8:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <State2_Lights+0x24>)
 8001aca:	789b      	ldrb	r3, [r3, #2]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d003      	beq.n	8001ad8 <State2_Lights+0x1c>
		{
			DIGITAL_IO_SetOutputHigh(&REV_LIGHT_OUT_D);
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <State2_Lights+0x28>)
 8001ad2:	f7ff fdef 	bl	80016b4 <DIGITAL_IO_SetOutputHigh>
 8001ad6:	e002      	b.n	8001ade <State2_Lights+0x22>
		}
		else
		{
			DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <State2_Lights+0x28>)
 8001ada:	f7ff fdfb 	bl	80016d4 <DIGITAL_IO_SetOutputLow>
		}
	}
}
 8001ade:	bd80      	pop	{r7, pc}
 8001ae0:	1fff48ac 	.word	0x1fff48ac
 8001ae4:	08013370 	.word	0x08013370

08001ae8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	2201      	movs	r2, #1
 8001af8:	409a      	lsls	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	605a      	str	r2, [r3, #4]
}
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr

08001b08 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	460b      	mov	r3, r1
 8001b12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001b14:	78fb      	ldrb	r3, [r7, #3]
 8001b16:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b1a:	409a      	lsls	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	605a      	str	r2, [r3, #4]
}
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop

08001b2c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b082      	sub	sp, #8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	7c1b      	ldrb	r3, [r3, #16]
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7ff ffd2 	bl	8001ae8 <XMC_GPIO_SetOutputHigh>
}
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop

08001b4c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	7c1b      	ldrb	r3, [r3, #16]
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	f7ff ffd2 	bl	8001b08 <XMC_GPIO_SetOutputLow>
}
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop

08001b6c <OutPutAction_Update>:
#include "Vcu_Init.h"
#include "can_matrix.h"


void OutPutAction_Update(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
	ALL_CONDITION_ON();
 8001b70:	f000 f878 	bl	8001c64 <ALL_CONDITION_ON>

	SPI_ADC_ProcessModeChange(1);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f7ff f93f 	bl	8000df8 <SPI_ADC_ProcessModeChange>

	can_outputs_allState();
 8001b7a:	f000 f89f 	bl	8001cbc <can_outputs_allState>

	State_1();
 8001b7e:	f7ff fbf3 	bl	8001368 <State_1>
	State_2();
 8001b82:	f7ff fdb7 	bl	80016f4 <State_2>
	//Can_Outputs_State1();

	/* light */
	Lights_on_off();
 8001b86:	f000 f805 	bl	8001b94 <Lights_on_off>



	VcuOut_MotorController_IRPbrakes();
 8001b8a:	f000 f823 	bl	8001bd4 <VcuOut_MotorController_IRPbrakes>

	door_en_cabin_light();
 8001b8e:	f000 f845 	bl	8001c1c <door_en_cabin_light>
}
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <Lights_on_off>:
	/*  obc set v and i */
	Update_CAN_id0x1806E5F4();
}

void Lights_on_off()
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
	/* light */
	if(Lights_OUT.brake_switch_out_d)
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <Lights_on_off+0x34>)
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <Lights_on_off+0x20>
	{
		DIGITAL_IO_SetOutputHigh(&BRAKE_LIGHT_OUT_D);
 8001ba0:	480a      	ldr	r0, [pc, #40]	; (8001bcc <Lights_on_off+0x38>)
 8001ba2:	f7ff ffc3 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 1;
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <Lights_on_off+0x3c>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	7813      	ldrb	r3, [r2, #0]
 8001bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb0:	7013      	strb	r3, [r2, #0]
 8001bb2:	e008      	b.n	8001bc6 <Lights_on_off+0x32>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&BRAKE_LIGHT_OUT_D);
 8001bb4:	4805      	ldr	r0, [pc, #20]	; (8001bcc <Lights_on_off+0x38>)
 8001bb6:	f7ff ffc9 	bl	8001b4c <DIGITAL_IO_SetOutputLow>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 0;
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <Lights_on_off+0x3c>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	7813      	ldrb	r3, [r2, #0]
 8001bc0:	f36f 1386 	bfc	r3, #6, #1
 8001bc4:	7013      	strb	r3, [r2, #0]
	}
}
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	1fff48ac 	.word	0x1fff48ac
 8001bcc:	080132f8 	.word	0x080132f8
 8001bd0:	1ffe882c 	.word	0x1ffe882c

08001bd4 <VcuOut_MotorController_IRPbrakes>:

void VcuOut_MotorController_IRPbrakes(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->Brake_Command = Lights_OUT.brake_switch_out_d;
 8001bd8:	4b0d      	ldr	r3, [pc, #52]	; (8001c10 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <VcuOut_MotorController_IRPbrakes+0x40>)
 8001bde:	7859      	ldrb	r1, [r3, #1]
 8001be0:	7813      	ldrb	r3, [r2, #0]
 8001be2:	f361 1345 	bfi	r3, r1, #5, #1
 8001be6:	7013      	strb	r3, [r2, #0]

	Irp_Mcu_drive_states_29bit->Handbrake_Command = !Relay_Control_Switch_OUT.elec_handbrake_pwr_out;
 8001be8:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <VcuOut_MotorController_IRPbrakes+0x44>)
 8001bee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	f003 0301 	and.w	r3, r3, #1
 8001bfc:	b2d9      	uxtb	r1, r3
 8001bfe:	7813      	ldrb	r3, [r2, #0]
 8001c00:	f361 1386 	bfi	r3, r1, #6, #1
 8001c04:	7013      	strb	r3, [r2, #0]
}
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	1ffe8818 	.word	0x1ffe8818
 8001c14:	1fff48ac 	.word	0x1fff48ac
 8001c18:	1fff47b0 	.word	0x1fff47b0

08001c1c <door_en_cabin_light>:

void door_en_cabin_light(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
	if((!Door_Switch_OUT.passenger_door_OUT) || (!Door_Switch_OUT.driver_door_OUT) || /*(!Door_Switch_OUT.bonnet_OUT) ||*/ (!Door_Switch_OUT.hatch_OUT))
 8001c20:	4b0e      	ldr	r3, [pc, #56]	; (8001c5c <door_en_cabin_light+0x40>)
 8001c22:	789b      	ldrb	r3, [r3, #2]
 8001c24:	f083 0301 	eor.w	r3, r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d10d      	bne.n	8001c4a <door_en_cabin_light+0x2e>
 8001c2e:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <door_en_cabin_light+0x40>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	f083 0301 	eor.w	r3, r3, #1
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <door_en_cabin_light+0x2e>
 8001c3c:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <door_en_cabin_light+0x40>)
 8001c3e:	795b      	ldrb	r3, [r3, #5]
 8001c40:	f083 0301 	eor.w	r3, r3, #1
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <door_en_cabin_light+0x36>
	{
		digital_io_setoutputhigh(&AC_COMPRESSOR_OUT_D); // for cabin light on doors on/off
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <door_en_cabin_light+0x44>)
 8001c4c:	f00e f8d6 	bl	800fdfc <digital_io_setoutputhigh>
 8001c50:	e002      	b.n	8001c58 <door_en_cabin_light+0x3c>
	}
	else
	{
		digital_io_setoutputlow(&AC_COMPRESSOR_OUT_D);
 8001c52:	4803      	ldr	r0, [pc, #12]	; (8001c60 <door_en_cabin_light+0x44>)
 8001c54:	f00e f896 	bl	800fd84 <digital_io_setoutputlow>
	}

}
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	1fff4830 	.word	0x1fff4830
 8001c60:	1fff42c4 	.word	0x1fff42c4

08001c64 <ALL_CONDITION_ON>:
{
	//cluster_door_out = cluster_door_in;
}
*/
void ALL_CONDITION_ON()
 {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputHigh(&DOOR_LOCK_PWR_OUT_D);//check j4 -> f1
 8001c68:	4809      	ldr	r0, [pc, #36]	; (8001c90 <ALL_CONDITION_ON+0x2c>)
 8001c6a:	f7ff ff5f 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&LIGHTS_PWR_OUT_D); // Check j4 -> k1
 8001c6e:	4809      	ldr	r0, [pc, #36]	; (8001c94 <ALL_CONDITION_ON+0x30>)
 8001c70:	f7ff ff5c 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HORN_PWR_OUT_D);
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <ALL_CONDITION_ON+0x34>)
 8001c76:	f7ff ff59 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D);
 8001c7a:	4808      	ldr	r0, [pc, #32]	; (8001c9c <ALL_CONDITION_ON+0x38>)
 8001c7c:	f7ff ff56 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HEADLAMPS_ADJ_PWR_OUT_D);
 8001c80:	4807      	ldr	r0, [pc, #28]	; (8001ca0 <ALL_CONDITION_ON+0x3c>)
 8001c82:	f7ff ff53 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 8001c86:	4807      	ldr	r0, [pc, #28]	; (8001ca4 <ALL_CONDITION_ON+0x40>)
 8001c88:	f7ff ff50 	bl	8001b2c <DIGITAL_IO_SetOutputHigh>

	// DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D);//instrument cluster 12v as battery(constant 12v)
	 //digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D);//bms 12v
	 //digital_io_setoutputhigh(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputhigh(&AUX_EFUSE_5_OUT_D);//obc 12v
 }
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	080135c8 	.word	0x080135c8
 8001c94:	080132a8 	.word	0x080132a8
 8001c98:	0801330c 	.word	0x0801330c
 8001c9c:	08013140 	.word	0x08013140
 8001ca0:	08013168 	.word	0x08013168
 8001ca4:	080134c4 	.word	0x080134c4

08001ca8 <charger_connected_inVoff>:
	 //digital_io_setoutputlow(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputlow(&AUX_EFUSE_5_OUT_D);//obc 12v
 }

void charger_connected_inVoff(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	if(charger_on())
 8001cac:	f7fe ff7c 	bl	8000ba8 <charger_on>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <charger_connected_inVoff+0x12>
	{
		Update_CAN_0x18FFB632();
 8001cb6:	f008 f88d 	bl	8009dd4 <Update_CAN_0x18FFB632>
	}
}
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <can_outputs_allState>:

void can_outputs_allState(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	//charger_tx(); // charger can tx
	charger_connected_inVoff();
 8001cc0:	f7ff fff2 	bl	8001ca8 <charger_connected_inVoff>
	OBDII_CAN_Tx();
 8001cc4:	f007 fa72 	bl	80091ac <OBDII_CAN_Tx>
}
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop

08001ccc <limphome_Mode_IRP>:

	return 0;
}

int limphome_Mode_IRP(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
	if((Mapped_BMS_SOC < 10) /*|| (Mcu_Temp_Irp > 90)*/)
 8001cd0:	4b09      	ldr	r3, [pc, #36]	; (8001cf8 <limphome_Mode_IRP+0x2c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d808      	bhi.n	8001cea <limphome_Mode_IRP+0x1e>
	{
		Irp_Mcu_drive_states_29bit ->Driving_Profile = Limp_Crawl_irp;
 8001cd8:	4b08      	ldr	r3, [pc, #32]	; (8001cfc <limphome_Mode_IRP+0x30>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	7813      	ldrb	r3, [r2, #0]
 8001cde:	2103      	movs	r1, #3
 8001ce0:	f361 0384 	bfi	r3, r1, #2, #3
 8001ce4:	7013      	strb	r3, [r2, #0]
		return 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	e000      	b.n	8001cec <limphome_Mode_IRP+0x20>
	}
	else
	{
		return 1;
 8001cea:	2301      	movs	r3, #1
	}

	return 0;
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	1fff4800 	.word	0x1fff4800
 8001cfc:	1ffe8818 	.word	0x1ffe8818

08001d00 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001d00:	b598      	push	{r3, r4, r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001d04:	4a05      	ldr	r2, [pc, #20]	; (8001d1c <SystemInit+0x1c>)
 8001d06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d0a:	4614      	mov	r4, r2
 8001d0c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8001d12:	f006 fbef 	bl	80084f4 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001d16:	f006 fc57 	bl	80085c8 <SystemCoreClockSetup>
}
 8001d1a:	bd98      	pop	{r3, r4, r7, pc}
 8001d1c:	2003ffc4 	.word	0x2003ffc4

08001d20 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001d26:	4b2f      	ldr	r3, [pc, #188]	; (8001de4 <SystemCoreClockUpdate+0xc4>)
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d03e      	beq.n	8001db0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d002      	beq.n	8001d44 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001d3e:	4b2b      	ldr	r3, [pc, #172]	; (8001dec <SystemCoreClockUpdate+0xcc>)
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	e002      	b.n	8001d4a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001d44:	f006 fc36 	bl	80085b4 <OSCHP_GetFrequency>
 8001d48:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001d4a:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d020      	beq.n	8001d98 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001d56:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001d5e:	0e1b      	lsrs	r3, r3, #24
 8001d60:	3301      	adds	r3, #1
 8001d62:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001d64:	4b20      	ldr	r3, [pc, #128]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001d6c:	0a1b      	lsrs	r3, r3, #8
 8001d6e:	3301      	adds	r3, #1
 8001d70:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001d72:	4b1d      	ldr	r3, [pc, #116]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001d7a:	0c1b      	lsrs	r3, r3, #16
 8001d7c:	3301      	adds	r3, #1
 8001d7e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	fb02 f303 	mul.w	r3, r2, r3
 8001d88:	68fa      	ldr	r2, [r7, #12]
 8001d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	fb02 f303 	mul.w	r3, r2, r3
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e00d      	b.n	8001db4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001d98:	4b13      	ldr	r3, [pc, #76]	; (8001de8 <SystemCoreClockUpdate+0xc8>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001da0:	3301      	adds	r3, #1
 8001da2:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dac:	60fb      	str	r3, [r7, #12]
 8001dae:	e001      	b.n	8001db4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <SystemCoreClockUpdate+0xcc>)
 8001db2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001db4:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <SystemCoreClockUpdate+0xc4>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	3301      	adds	r3, #1
 8001dbc:	68fa      	ldr	r2, [r7, #12]
 8001dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001dc4:	4b07      	ldr	r3, [pc, #28]	; (8001de4 <SystemCoreClockUpdate+0xc4>)
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	3301      	adds	r3, #1
 8001dce:	68fa      	ldr	r2, [r7, #12]
 8001dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001dd6:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <SystemCoreClockUpdate+0xd0>)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6013      	str	r3, [r2, #0]
}
 8001ddc:	3710      	adds	r7, #16
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	50004600 	.word	0x50004600
 8001de8:	50004710 	.word	0x50004710
 8001dec:	016e3600 	.word	0x016e3600
 8001df0:	2003ffc0 	.word	0x2003ffc0

08001df4 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b085      	sub	sp, #20
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	460b      	mov	r3, r1
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	089b      	lsrs	r3, r3, #2
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	4618      	mov	r0, r3
 8001e0a:	7afb      	ldrb	r3, [r7, #11]
 8001e0c:	089b      	lsrs	r3, r3, #2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3204      	adds	r2, #4
 8001e16:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001e1a:	7afb      	ldrb	r3, [r7, #11]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4619      	mov	r1, r3
 8001e24:	23f8      	movs	r3, #248	; 0xf8
 8001e26:	408b      	lsls	r3, r1
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	ea02 0103 	and.w	r1, r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	1d02      	adds	r2, r0, #4
 8001e32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	4619      	mov	r1, r3
 8001e40:	2303      	movs	r3, #3
 8001e42:	408b      	lsls	r3, r1
 8001e44:	43db      	mvns	r3, r3
 8001e46:	401a      	ands	r2, r3
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	4a3a      	ldr	r2, [pc, #232]	; (8001f38 <XMC_GPIO_Init+0x144>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d003      	beq.n	8001e5c <XMC_GPIO_Init+0x68>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	4a39      	ldr	r2, [pc, #228]	; (8001f3c <XMC_GPIO_Init+0x148>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d10a      	bne.n	8001e72 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f303 	lsl.w	r3, r1, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	401a      	ands	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	661a      	str	r2, [r3, #96]	; 0x60
 8001e70:	e042      	b.n	8001ef8 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	b2db      	uxtb	r3, r3
 8001e78:	b25b      	sxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	da3c      	bge.n	8001ef8 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	7afb      	ldrb	r3, [r7, #11]
 8001e84:	409a      	lsls	r2, r3
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001e8a:	7afb      	ldrb	r3, [r7, #11]
 8001e8c:	08db      	lsrs	r3, r3, #3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	4618      	mov	r0, r3
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	08db      	lsrs	r3, r3, #3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	461a      	mov	r2, r3
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	3210      	adds	r2, #16
 8001e9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ea2:	7afb      	ldrb	r3, [r7, #11]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4619      	mov	r1, r3
 8001eac:	2307      	movs	r3, #7
 8001eae:	408b      	lsls	r3, r1
 8001eb0:	43db      	mvns	r3, r3
 8001eb2:	ea02 0103 	and.w	r1, r2, r3
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f100 0210 	add.w	r2, r0, #16
 8001ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	08db      	lsrs	r3, r3, #3
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	08db      	lsrs	r3, r3, #3
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	3210      	adds	r2, #16
 8001ed4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	7a1b      	ldrb	r3, [r3, #8]
 8001edc:	4619      	mov	r1, r3
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	ea42 0103 	orr.w	r1, r2, r3
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f100 0210 	add.w	r2, r0, #16
 8001ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8001ef8:	7afb      	ldrb	r3, [r7, #11]
 8001efa:	089b      	lsrs	r3, r3, #2
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	4618      	mov	r0, r3
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	089b      	lsrs	r3, r3, #2
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	3204      	adds	r2, #4
 8001f0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	4619      	mov	r1, r3
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	00db      	lsls	r3, r3, #3
 8001f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f22:	ea42 0103 	orr.w	r1, r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1d02      	adds	r2, r0, #4
 8001f2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8001f2e:	3714      	adds	r7, #20
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	48028e00 	.word	0x48028e00
 8001f3c:	48028f00 	.word	0x48028f00

08001f40 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8001f44:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <XMC_RTC_IsRunning+0x20>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	bf14      	ite	ne
 8001f50:	2301      	movne	r3, #1
 8001f52:	2300      	moveq	r3, #0
 8001f54:	b2db      	uxtb	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	50004a00 	.word	0x50004a00

08001f64 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8001f68:	4b03      	ldr	r3, [pc, #12]	; (8001f78 <XMC_SCU_GetMirrorStatus+0x14>)
 8001f6a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr
 8001f78:	50004000 	.word	0x50004000

08001f7c <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b082      	sub	sp, #8
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 8001f84:	f7ff ffdc 	bl	8001f40 <XMC_RTC_IsRunning>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f083 0301 	eor.w	r3, r3, #1
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d03e      	beq.n	8002012 <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 8001f94:	f000 fbd0 	bl	8002738 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	f083 0301 	eor.w	r3, r3, #1
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 8001fa4:	f000 fb9c 	bl	80026e0 <XMC_SCU_HIB_EnableHibernateDomain>
    }

    XMC_RTC_SetPrescaler(config->prescaler);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	8a1b      	ldrh	r3, [r3, #16]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f002 fa7d 	bl	80044ac <XMC_RTC_SetPrescaler>

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8001fb2:	bf00      	nop
 8001fb4:	f7ff ffd6 	bl	8001f64 <XMC_SCU_GetMirrorStatus>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d1f8      	bne.n	8001fb4 <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 8001fc2:	4a16      	ldr	r2, [pc, #88]	; (800201c <XMC_RTC_Init+0xa0>)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6213      	str	r3, [r2, #32]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8001fca:	bf00      	nop
 8001fcc:	f7ff ffca 	bl	8001f64 <XMC_SCU_GetMirrorStatus>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f8      	bne.n	8001fcc <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 8001fda:	4a10      	ldr	r2, [pc, #64]	; (800201c <XMC_RTC_Init+0xa0>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	6253      	str	r3, [r2, #36]	; 0x24

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8001fe2:	bf00      	nop
 8001fe4:	f7ff ffbe 	bl	8001f64 <XMC_SCU_GetMirrorStatus>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d1f8      	bne.n	8001fe4 <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <XMC_RTC_Init+0xa0>)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	6193      	str	r3, [r2, #24]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8001ffa:	bf00      	nop
 8001ffc:	f7ff ffb2 	bl	8001f64 <XMC_SCU_GetMirrorStatus>
 8002000:	4603      	mov	r3, r0
 8002002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f8      	bne.n	8001ffc <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;
 800200a:	4a04      	ldr	r2, [pc, #16]	; (800201c <XMC_RTC_Init+0xa0>)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61d3      	str	r3, [r2, #28]
  }
  return XMC_RTC_STATUS_OK;
 8002012:	2300      	movs	r3, #0
}
 8002014:	4618      	mov	r0, r3
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	50004a00 	.word	0x50004a00

08002020 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8002028:	bf00      	nop
 800202a:	f7ff ff9b 	bl	8001f64 <XMC_SCU_GetMirrorStatus>
 800202e:	4603      	mov	r3, r0
 8002030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1f8      	bne.n	800202a <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8002038:	4904      	ldr	r1, [pc, #16]	; (800204c <XMC_RTC_EnableEvent+0x2c>)
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <XMC_RTC_EnableEvent+0x2c>)
 800203c:	691a      	ldr	r2, [r3, #16]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4313      	orrs	r3, r2
 8002042:	610b      	str	r3, [r1, #16]
}
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	50004a00 	.word	0x50004a00

08002050 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002056:	681b      	ldr	r3, [r3, #0]
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	2003ffc0 	.word	0x2003ffc0

08002068 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <XMC_SCU_GetMirrorStatus+0x14>)
 800206e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	50004000 	.word	0x50004000

08002080 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8002088:	f7ff fe4a 	bl	8001d20 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <XMC_SCU_lDelay+0x3c>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <XMC_SCU_lDelay+0x40>)
 8002092:	fba2 2303 	umull	r2, r3, r2, r3
 8002096:	0c9a      	lsrs	r2, r3, #18
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	e003      	b.n	80020ae <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80020a6:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	3301      	adds	r3, #1
 80020ac:	60fb      	str	r3, [r7, #12]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3f7      	bcc.n	80020a6 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	2003ffc0 	.word	0x2003ffc0
 80020c0:	431bde83 	.word	0x431bde83

080020c4 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80020cc:	4905      	ldr	r1, [pc, #20]	; (80020e4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80020ce:	4b05      	ldr	r3, [pc, #20]	; (80020e4 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80020d0:	689a      	ldr	r2, [r3, #8]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	608b      	str	r3, [r1, #8]
}
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	50004074 	.word	0x50004074

080020e8 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80020ec:	4b03      	ldr	r3, [pc, #12]	; (80020fc <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80020ee:	685b      	ldr	r3, [r3, #4]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	50004074 	.word	0x50004074

08002100 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002108:	4a03      	ldr	r2, [pc, #12]	; (8002118 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	60d3      	str	r3, [r2, #12]
}
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr
 8002118:	50004074 	.word	0x50004074

0800211c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800211c:	b5b0      	push	{r4, r5, r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af02      	add	r7, sp, #8
 8002122:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f8d7 	bl	80022d8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800212a:	f000 fad9 	bl	80026e0 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	79db      	ldrb	r3, [r3, #7]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00a      	beq.n	800214c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8002136:	f000 fb2f 	bl	8002798 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800213a:	bf00      	nop
 800213c:	f000 fb1a 	bl	8002774 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8002140:	4603      	mov	r3, r0
 8002142:	f083 0301 	eor.w	r3, r3, #1
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	d1f7      	bne.n	800213c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	7a5b      	ldrb	r3, [r3, #9]
 8002150:	4618      	mov	r0, r3
 8002152:	f000 f93b 	bl	80023cc <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8002156:	bf00      	nop
 8002158:	f7ff ff86 	bl	8002068 <XMC_SCU_GetMirrorStatus>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1fa      	bne.n	8002158 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	7a1b      	ldrb	r3, [r3, #8]
 8002166:	4618      	mov	r0, r3
 8002168:	f000 fa94 	bl	8002694 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	7c1b      	ldrb	r3, [r3, #16]
 8002170:	4618      	mov	r0, r3
 8002172:	f000 f949 	bl	8002408 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	7c5b      	ldrb	r3, [r3, #17]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 f96c 	bl	8002458 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	7c9b      	ldrb	r3, [r3, #18]
 8002184:	4618      	mov	r0, r3
 8002186:	f000 f953 	bl	8002430 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	7cdb      	ldrb	r3, [r3, #19]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 f976 	bl	8002480 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	799b      	ldrb	r3, [r3, #6]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d00a      	beq.n	80021b2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 800219c:	f000 fb34 	bl	8002808 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80021a0:	bf00      	nop
 80021a2:	f000 fb59 	bl	8002858 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80021a6:	4603      	mov	r3, r0
 80021a8:	f083 0301 	eor.w	r3, r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d1f7      	bne.n	80021a2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	78db      	ldrb	r3, [r3, #3]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d109      	bne.n	80021ce <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	799b      	ldrb	r3, [r3, #6]
 80021be:	f083 0301 	eor.w	r3, r3, #1
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d017      	beq.n	80021f8 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80021c8:	f000 fb6a 	bl	80028a0 <XMC_SCU_CLOCK_DisableSystemPll>
 80021cc:	e014      	b.n	80021f8 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80021ce:	f000 fb57 	bl	8002880 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	8899      	ldrh	r1, [r3, #4]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80021de:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80021e4:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	4608      	mov	r0, r1
 80021ee:	4611      	mov	r1, r2
 80021f0:	462a      	mov	r2, r5
 80021f2:	4623      	mov	r3, r4
 80021f4:	f000 fb64 	bl	80028c0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002200:	d103      	bne.n	800220a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8002202:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002206:	f000 f867 	bl	80022d8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800220a:	f7ff fd89 	bl	8001d20 <SystemCoreClockUpdate>
}
 800220e:	3708      	adds	r7, #8
 8002210:	46bd      	mov	sp, r7
 8002212:	bdb0      	pop	{r4, r5, r7, pc}

08002214 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory;
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800221c:	4905      	ldr	r1, [pc, #20]	; (8002234 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8002220:	695a      	ldr	r2, [r3, #20]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4313      	orrs	r3, r2
 8002226:	614b      	str	r3, [r1, #20]
}
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	50004074 	.word	0x50004074

08002238 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0f1b      	lsrs	r3, r3, #28
 8002244:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800224c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	461a      	mov	r2, r3
 800225a:	4b04      	ldr	r3, [pc, #16]	; (800226c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800225c:	4413      	add	r3, r2
 800225e:	68ba      	ldr	r2, [r7, #8]
 8002260:	601a      	str	r2, [r3, #0]
}
 8002262:	3714      	adds	r7, #20
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	50004414 	.word	0x50004414

08002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002270:	b480      	push	{r7}
 8002272:	b085      	sub	sp, #20
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	0f1b      	lsrs	r3, r3, #28
 800227c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002284:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4613      	mov	r3, r2
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4413      	add	r3, r2
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	461a      	mov	r2, r3
 8002292:	4b08      	ldr	r3, [pc, #32]	; (80022b4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8002294:	4413      	add	r3, r2
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	4013      	ands	r3, r2
 800229c:	2b00      	cmp	r3, #0
 800229e:	bf14      	ite	ne
 80022a0:	2301      	movne	r3, #1
 80022a2:	2300      	moveq	r3, #0
 80022a4:	b2db      	uxtb	r3, r3
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3714      	adds	r7, #20
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
 80022b2:	bf00      	nop
 80022b4:	5000440c 	.word	0x5000440c

080022b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80022bc:	f7ff fec8 	bl	8002050 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80022c0:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80022c2:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80022c4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	50004600 	.word	0x50004600

080022d8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80022e0:	4906      	ldr	r1, [pc, #24]	; (80022fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80022e2:	4b06      	ldr	r3, [pc, #24]	; (80022fc <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80022e4:	68db      	ldr	r3, [r3, #12]
 80022e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	50004600 	.word	0x50004600

08002300 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8002308:	4906      	ldr	r1, [pc, #24]	; (8002324 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800230a:	4b06      	ldr	r3, [pc, #24]	; (8002324 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4313      	orrs	r3, r2
 8002316:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	50004600 	.word	0x50004600

08002328 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8002330:	4906      	ldr	r1, [pc, #24]	; (800234c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002332:	4b06      	ldr	r3, [pc, #24]	; (800234c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	50004600 	.word	0x50004600

08002350 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800235a:	88fb      	ldrh	r3, [r7, #6]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d108      	bne.n	8002372 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002360:	4a0a      	ldr	r2, [pc, #40]	; (800238c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800236a:	f023 0301 	bic.w	r3, r3, #1
 800236e:	60d3      	str	r3, [r2, #12]
 8002370:	e007      	b.n	8002382 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002372:	4a06      	ldr	r2, [pc, #24]	; (800238c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002374:	4b05      	ldr	r3, [pc, #20]	; (800238c <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	60d3      	str	r3, [r2, #12]
  }
}
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	50004710 	.word	0x50004710

08002390 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800239a:	bf00      	nop
 800239c:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 800239e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f8      	bne.n	800239c <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80023aa:	4907      	ldr	r1, [pc, #28]	; (80023c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80023b4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	50004000 	.word	0x50004000
 80023c8:	50004300 	.word	0x50004300

080023cc <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80023d6:	bf00      	nop
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80023da:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f8      	bne.n	80023d8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80023e6:	4907      	ldr	r1, [pc, #28]	; (8002404 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80023f0:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80023f2:	4313      	orrs	r3, r2
 80023f4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr
 8002400:	50004000 	.word	0x50004000
 8002404:	50004300 	.word	0x50004300

08002408 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002410:	4906      	ldr	r1, [pc, #24]	; (800242c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800241e:	4313      	orrs	r3, r2
 8002420:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	50004600 	.word	0x50004600

08002430 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002438:	4906      	ldr	r1, [pc, #24]	; (8002454 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002446:	4313      	orrs	r3, r2
 8002448:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800244a:	370c      	adds	r7, #12
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr
 8002454:	50004600 	.word	0x50004600

08002458 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8002458:	b480      	push	{r7}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002460:	4906      	ldr	r1, [pc, #24]	; (800247c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002464:	691b      	ldr	r3, [r3, #16]
 8002466:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800246e:	4313      	orrs	r3, r2
 8002470:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	50004600 	.word	0x50004600

08002480 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002488:	4906      	ldr	r1, [pc, #24]	; (80024a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002496:	4313      	orrs	r3, r2
 8002498:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800249a:	370c      	adds	r7, #12
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	50004600 	.word	0x50004600

080024a8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80024b0:	4906      	ldr	r1, [pc, #24]	; (80024cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80024b2:	4b06      	ldr	r3, [pc, #24]	; (80024cc <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80024be:	4313      	orrs	r3, r2
 80024c0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80024c2:	370c      	adds	r7, #12
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	50004600 	.word	0x50004600

080024d0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80024d8:	4906      	ldr	r1, [pc, #24]	; (80024f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80024da:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	50004600 	.word	0x50004600

080024f8 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002500:	4906      	ldr	r1, [pc, #24]	; (800251c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800250e:	4313      	orrs	r3, r2
 8002510:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	50004600 	.word	0x50004600

08002520 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	4603      	mov	r3, r0
 8002528:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800252a:	4a04      	ldr	r2, [pc, #16]	; (800253c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	6053      	str	r3, [r2, #4]
}
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	50004600 	.word	0x50004600

08002540 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	0f1b      	lsrs	r3, r3, #28
 800254c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002554:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	461a      	mov	r2, r3
 8002562:	4b04      	ldr	r3, [pc, #16]	; (8002574 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8002564:	4413      	add	r3, r2
 8002566:	68ba      	ldr	r2, [r7, #8]
 8002568:	601a      	str	r2, [r3, #0]
}
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	50004648 	.word	0x50004648

08002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	0f1b      	lsrs	r3, r3, #28
 8002584:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800258c:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	4613      	mov	r3, r2
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	4413      	add	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	461a      	mov	r2, r3
 800259a:	4b08      	ldr	r3, [pc, #32]	; (80025bc <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 800259c:	4413      	add	r3, r2
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	4013      	ands	r3, r2
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3714      	adds	r7, #20
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	50004640 	.word	0x50004640

080025c0 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80025c4:	4a05      	ldr	r2, [pc, #20]	; (80025dc <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025ce:	f023 0302 	bic.w	r3, r3, #2
 80025d2:	6153      	str	r3, [r2, #20]
}
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	50004710 	.word	0x50004710

080025e0 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80025ea:	4a28      	ldr	r2, [pc, #160]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80025ec:	4b27      	ldr	r3, [pc, #156]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80025ee:	695b      	ldr	r3, [r3, #20]
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80025f6:	bf00      	nop
 80025f8:	4b24      	ldr	r3, [pc, #144]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0f9      	beq.n	80025f8 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002604:	4a21      	ldr	r2, [pc, #132]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f043 0310 	orr.w	r3, r3, #16
 800260e:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002610:	491e      	ldr	r1, [pc, #120]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	3b01      	subs	r3, #1
 8002616:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800261e:	4313      	orrs	r3, r2
 8002620:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8002622:	4a1a      	ldr	r2, [pc, #104]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002624:	4b19      	ldr	r3, [pc, #100]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002626:	695b      	ldr	r3, [r3, #20]
 8002628:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800262c:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800262e:	4a17      	ldr	r2, [pc, #92]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002630:	4b16      	ldr	r3, [pc, #88]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f023 0310 	bic.w	r3, r3, #16
 8002638:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800263c:	4b13      	ldr	r3, [pc, #76]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800263e:	695b      	ldr	r3, [r3, #20]
 8002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002644:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002646:	bf00      	nop
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	f003 0304 	and.w	r3, r3, #4
 8002650:	2b00      	cmp	r3, #0
 8002652:	d0f9      	beq.n	8002648 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002654:	4a0d      	ldr	r2, [pc, #52]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002656:	4b0d      	ldr	r3, [pc, #52]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	f023 0301 	bic.w	r3, r3, #1
 800265e:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8002660:	bf00      	nop
 8002662:	4b0a      	ldr	r3, [pc, #40]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002670:	4b06      	ldr	r3, [pc, #24]	; (800268c <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002678:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 800267a:	4b05      	ldr	r3, [pc, #20]	; (8002690 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 800267c:	2208      	movs	r2, #8
 800267e:	60da      	str	r2, [r3, #12]
}
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
 800268a:	bf00      	nop
 800268c:	50004710 	.word	0x50004710
 8002690:	50004160 	.word	0x50004160

08002694 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	4603      	mov	r3, r0
 800269c:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 800269e:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026a8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d10e      	bne.n	80026ce <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026b2:	4b0a      	ldr	r3, [pc, #40]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80026ba:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80026bc:	2064      	movs	r0, #100	; 0x64
 80026be:	f7ff fcdf 	bl	8002080 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80026c2:	4a06      	ldr	r2, [pc, #24]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026c4:	4b05      	ldr	r3, [pc, #20]	; (80026dc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026cc:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80026ce:	2064      	movs	r0, #100	; 0x64
 80026d0:	f7ff fcd6 	bl	8002080 <XMC_SCU_lDelay>
}
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	50004710 	.word	0x50004710

080026e0 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80026e4:	4b12      	ldr	r3, [pc, #72]	; (8002730 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d109      	bne.n	8002704 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80026f6:	bf00      	nop
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0301 	and.w	r3, r3, #1
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f9      	beq.n	80026f8 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800270c:	2b00      	cmp	r3, #0
 800270e:	d00a      	beq.n	8002726 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002710:	4b08      	ldr	r3, [pc, #32]	; (8002734 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002716:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002718:	bf00      	nop
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f9      	bne.n	800271a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8002726:	46bd      	mov	sp, r7
 8002728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272c:	4770      	bx	lr
 800272e:	bf00      	nop
 8002730:	50004200 	.word	0x50004200
 8002734:	50004400 	.word	0x50004400

08002738 <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002748:	4b09      	ldr	r3, [pc, #36]	; (8002770 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7300 	and.w	r3, r3, #512	; 0x200
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002758:	2300      	movs	r3, #0
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8002760:	4618      	mov	r0, r3
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	50004200 	.word	0x50004200
 8002770:	50004400 	.word	0x50004400

08002774 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0308 	and.w	r3, r3, #8
 8002780:	2b00      	cmp	r3, #0
 8002782:	bf0c      	ite	eq
 8002784:	2301      	moveq	r3, #1
 8002786:	2300      	movne	r3, #0
 8002788:	b2db      	uxtb	r3, r3
}
 800278a:	4618      	mov	r0, r3
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	50004300 	.word	0x50004300

08002798 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 800279c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80027a0:	f7ff fcae 	bl	8002100 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80027a4:	4a17      	ldr	r2, [pc, #92]	; (8002804 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80027a6:	4b17      	ldr	r3, [pc, #92]	; (8002804 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80027ae:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80027b0:	bf00      	nop
 80027b2:	f7ff fc99 	bl	80020e8 <XMC_SCU_INTERUPT_GetEventStatus>
 80027b6:	4603      	mov	r3, r0
 80027b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f8      	beq.n	80027b2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80027c0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80027c4:	f7ff fc9c 	bl	8002100 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80027c8:	4b0e      	ldr	r3, [pc, #56]	; (8002804 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80027ca:	2208      	movs	r2, #8
 80027cc:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80027ce:	bf00      	nop
 80027d0:	f7ff fc8a 	bl	80020e8 <XMC_SCU_INTERUPT_GetEventStatus>
 80027d4:	4603      	mov	r3, r0
 80027d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f8      	beq.n	80027d0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80027de:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80027e2:	f7ff fc8d 	bl	8002100 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80027e6:	4a07      	ldr	r2, [pc, #28]	; (8002804 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80027e8:	4b06      	ldr	r3, [pc, #24]	; (8002804 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f043 0308 	orr.w	r3, r3, #8
 80027f0:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80027f2:	bf00      	nop
 80027f4:	f7ff fc78 	bl	80020e8 <XMC_SCU_INTERUPT_GetEventStatus>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d0f8      	beq.n	80027f4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8002802:	bd80      	pop	{r7, pc}
 8002804:	50004300 	.word	0x50004300

08002808 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002808:	b5b0      	push	{r4, r5, r7, lr}
 800280a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800280c:	4a0f      	ldr	r2, [pc, #60]	; (800284c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002816:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002818:	4d0d      	ldr	r5, [pc, #52]	; (8002850 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800281a:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002822:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002826:	f005 fec5 	bl	80085b4 <OSCHP_GetFrequency>
 800282a:	4602      	mov	r2, r0
 800282c:	4b09      	ldr	r3, [pc, #36]	; (8002854 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800282e:	fba3 2302 	umull	r2, r3, r3, r2
 8002832:	0d1b      	lsrs	r3, r3, #20
 8002834:	3b01      	subs	r3, #1
 8002836:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002838:	4323      	orrs	r3, r4
 800283a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800283c:	4a03      	ldr	r2, [pc, #12]	; (800284c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800283e:	4b03      	ldr	r3, [pc, #12]	; (800284c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002846:	6053      	str	r3, [r2, #4]
}
 8002848:	bdb0      	pop	{r4, r5, r7, pc}
 800284a:	bf00      	nop
 800284c:	50004710 	.word	0x50004710
 8002850:	50004700 	.word	0x50004700
 8002854:	6b5fca6b 	.word	0x6b5fca6b

08002858 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800285c:	4b07      	ldr	r3, [pc, #28]	; (800287c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002864:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002868:	bf0c      	ite	eq
 800286a:	2301      	moveq	r3, #1
 800286c:	2300      	movne	r3, #0
 800286e:	b2db      	uxtb	r3, r3
}
 8002870:	4618      	mov	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
 800287a:	bf00      	nop
 800287c:	50004710 	.word	0x50004710

08002880 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002884:	4a05      	ldr	r2, [pc, #20]	; (800289c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002886:	4b05      	ldr	r3, [pc, #20]	; (800289c <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800288e:	f023 0302 	bic.w	r3, r3, #2
 8002892:	6053      	str	r3, [r2, #4]
}
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	50004710 	.word	0x50004710

080028a0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80028a4:	4a05      	ldr	r2, [pc, #20]	; (80028bc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80028a6:	4b05      	ldr	r3, [pc, #20]	; (80028bc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	6053      	str	r3, [r2, #4]
}
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr
 80028bc:	50004710 	.word	0x50004710

080028c0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60ba      	str	r2, [r7, #8]
 80028c8:	607b      	str	r3, [r7, #4]
 80028ca:	4603      	mov	r3, r0
 80028cc:	81fb      	strh	r3, [r7, #14]
 80028ce:	460b      	mov	r3, r1
 80028d0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80028d2:	89fb      	ldrh	r3, [r7, #14]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff fd3b 	bl	8002350 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80028da:	7b7b      	ldrb	r3, [r7, #13]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	f040 808b 	bne.w	80029f8 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80028e2:	89fb      	ldrh	r3, [r7, #14]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80028e8:	f005 fe64 	bl	80085b4 <OSCHP_GetFrequency>
 80028ec:	4602      	mov	r2, r0
 80028ee:	4b54      	ldr	r3, [pc, #336]	; (8002a40 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 80028f0:	fba3 2302 	umull	r2, r3, r3, r2
 80028f4:	0c9b      	lsrs	r3, r3, #18
 80028f6:	059b      	lsls	r3, r3, #22
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	e002      	b.n	8002902 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 80028fc:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002900:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	fb02 f203 	mul.w	r2, r2, r3
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	4a4b      	ldr	r2, [pc, #300]	; (8002a44 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8002916:	fba2 2303 	umull	r2, r3, r2, r3
 800291a:	091b      	lsrs	r3, r3, #4
 800291c:	0d9b      	lsrs	r3, r3, #22
 800291e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002920:	4a49      	ldr	r2, [pc, #292]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002922:	4b49      	ldr	r3, [pc, #292]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 800292c:	bf00      	nop
 800292e:	4b46      	ldr	r3, [pc, #280]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d0f9      	beq.n	800292e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 800293a:	4a43      	ldr	r2, [pc, #268]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800293c:	4b42      	ldr	r3, [pc, #264]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f043 0310 	orr.w	r3, r3, #16
 8002944:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002946:	4940      	ldr	r1, [pc, #256]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002948:	4b3f      	ldr	r3, [pc, #252]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 800294e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002950:	687a      	ldr	r2, [r7, #4]
 8002952:	3a01      	subs	r2, #1
 8002954:	0212      	lsls	r2, r2, #8
 8002956:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	3b01      	subs	r3, #1
 800295c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 800295e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	3b01      	subs	r3, #1
 8002964:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002966:	4313      	orrs	r3, r2
 8002968:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 800296a:	4a37      	ldr	r2, [pc, #220]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800296c:	4b36      	ldr	r3, [pc, #216]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002974:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002976:	4a34      	ldr	r2, [pc, #208]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002978:	4b33      	ldr	r3, [pc, #204]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f023 0310 	bic.w	r3, r3, #16
 8002980:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002982:	4a31      	ldr	r2, [pc, #196]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002984:	4b30      	ldr	r3, [pc, #192]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800298c:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 800298e:	bf00      	nop
 8002990:	4b2d      	ldr	r3, [pc, #180]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0304 	and.w	r3, r3, #4
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f9      	beq.n	8002990 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 800299c:	4a2a      	ldr	r2, [pc, #168]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 800299e:	4b2a      	ldr	r3, [pc, #168]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f023 0301 	bic.w	r3, r3, #1
 80029a6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 80029a8:	bf00      	nop
 80029aa:	4b27      	ldr	r3, [pc, #156]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	4a25      	ldr	r2, [pc, #148]	; (8002a50 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 80029ba:	fba2 2303 	umull	r2, r3, r2, r3
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	0d9b      	lsrs	r3, r3, #22
 80029c2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80029c4:	6a3a      	ldr	r2, [r7, #32]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d202      	bcs.n	80029d2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80029cc:	6938      	ldr	r0, [r7, #16]
 80029ce:	f000 f845 	bl	8002a5c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	085b      	lsrs	r3, r3, #1
 80029d6:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	0d9b      	lsrs	r3, r3, #22
 80029e0:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 80029e2:	6a3a      	ldr	r2, [r7, #32]
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d202      	bcs.n	80029f0 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 80029ea:	6938      	ldr	r0, [r7, #16]
 80029ec:	f000 f836 	bl	8002a5c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 80029f0:	6a38      	ldr	r0, [r7, #32]
 80029f2:	f000 f833 	bl	8002a5c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 80029f6:	e01c      	b.n	8002a32 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 80029f8:	4913      	ldr	r1, [pc, #76]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80029fa:	4b13      	ldr	r3, [pc, #76]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002a06:	4313      	orrs	r3, r2
 8002a08:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8002a0a:	bf00      	nop
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0310 	and.w	r3, r3, #16
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d0f9      	beq.n	8002a0c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002a18:	4a0b      	ldr	r2, [pc, #44]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a1a:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f043 0301 	orr.w	r3, r3, #1
 8002a22:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002a24:	bf00      	nop
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f9      	beq.n	8002a26 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8002a34:	2205      	movs	r2, #5
 8002a36:	60da      	str	r2, [r3, #12]
}
 8002a38:	3718      	adds	r7, #24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	431bde83 	.word	0x431bde83
 8002a44:	aaaaaaab 	.word	0xaaaaaaab
 8002a48:	50004710 	.word	0x50004710
 8002a4c:	f08080ff 	.word	0xf08080ff
 8002a50:	88888889 	.word	0x88888889
 8002a54:	b60b60b7 	.word	0xb60b60b7
 8002a58:	50004160 	.word	0x50004160

08002a5c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002a64:	490b      	ldr	r1, [pc, #44]	; (8002a94 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002a66:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8002a78:	bf00      	nop
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0320 	and.w	r3, r3, #32
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0f9      	beq.n	8002a7a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8002a86:	2032      	movs	r0, #50	; 0x32
 8002a88:	f7ff fafa 	bl	8002080 <XMC_SCU_lDelay>
}
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	50004710 	.word	0x50004710

08002a98 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	bf0c      	ite	eq
 8002aae:	2301      	moveq	r3, #1
 8002ab0:	2300      	movne	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	370c      	adds	r7, #12
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr

08002ac0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	4608      	mov	r0, r1
 8002aca:	4611      	mov	r1, r2
 8002acc:	461a      	mov	r2, r3
 8002ace:	4603      	mov	r3, r0
 8002ad0:	70fb      	strb	r3, [r7, #3]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	70bb      	strb	r3, [r7, #2]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002ada:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002adc:	78bb      	ldrb	r3, [r7, #2]
 8002ade:	041b      	lsls	r3, r3, #16
 8002ae0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002ae4:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8002ae6:	787b      	ldrb	r3, [r7, #1]
 8002ae8:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002aea:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	601a      	str	r2, [r3, #0]
}
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop

08002b1c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	601a      	str	r2, [r3, #0]
}
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop

08002b3c <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	bf38      	it	cc
 8002b4e:	4613      	movcc	r3, r2
}
 8002b50:	4618      	mov	r0, r3
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bf28      	it	cs
 8002b6e:	4613      	movcs	r3, r2
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b088      	sub	sp, #32
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	6852      	ldr	r2, [r2, #4]
 8002b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b92:	fb02 f201 	mul.w	r2, r2, r1
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f040 8090 	bne.w	8002cbe <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8002bb4:	2319      	movs	r3, #25
 8002bb6:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002bc0:	e04b      	b.n	8002c5a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002bca:	6979      	ldr	r1, [r7, #20]
 8002bcc:	fb01 f202 	mul.w	r2, r1, r2
 8002bd0:	1a9b      	subs	r3, r3, r2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d13e      	bne.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d034      	beq.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bf0:	d830      	bhi.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	2b3f      	cmp	r3, #63	; 0x3f
 8002bf6:	d90a      	bls.n	8002c0e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	3b01      	subs	r3, #1
 8002c06:	617b      	str	r3, [r7, #20]
              continue;
 8002c08:	e027      	b.n	8002c5a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	8912      	ldrh	r2, [r2, #8]
 8002c16:	fb02 f303 	mul.w	r3, r2, r3
 8002c1a:	4a2b      	ldr	r2, [pc, #172]	; (8002cc8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	0b5b      	lsrs	r3, r3, #13
 8002c22:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8002c24:	697a      	ldr	r2, [r7, #20]
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	3b01      	subs	r3, #1
 8002c2c:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	2b02      	cmp	r3, #2
 8002c32:	d90f      	bls.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	2b0f      	cmp	r3, #15
 8002c38:	d80c      	bhi.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d909      	bls.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d806      	bhi.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	895b      	ldrh	r3, [r3, #10]
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d800      	bhi.n	8002c54 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8002c52:	e005      	b.n	8002c60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b07      	cmp	r3, #7
 8002c5e:	d8b0      	bhi.n	8002bc2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b07      	cmp	r3, #7
 8002c64:	d92b      	bls.n	8002cbe <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f7ff ff48 	bl	8002afc <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	3b01      	subs	r3, #1
 8002c70:	031b      	lsls	r3, r3, #12
 8002c72:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	895b      	ldrh	r3, [r3, #10]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	019b      	lsls	r3, r3, #6
 8002c7e:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002c80:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	021b      	lsls	r3, r3, #8
 8002c88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002c8c:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	4613      	mov	r3, r2
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	4413      	add	r3, r2
 8002c98:	461a      	mov	r2, r3
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	40d3      	lsrs	r3, r2
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002ca4:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	03db      	lsls	r3, r3, #15
 8002cac:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002cae:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f7ff ff31 	bl	8002b1c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	e000      	b.n	8002cc0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8002cbe:	2301      	movs	r3, #1
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	d1b71759 	.word	0xd1b71759

08002ccc <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	70fb      	strb	r3, [r7, #3]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8002cdc:	bf00      	nop
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7ff feda 	bl	8002a98 <XMC_CAN_IsPanelControlReady>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1f6      	bne.n	8002cde <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8002cf0:	78fb      	ldrb	r3, [r7, #3]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	78ba      	ldrb	r2, [r7, #2]
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	f7ff fee0 	bl	8002ac0 <XMC_CAN_PanelControl>
}
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop

08002d08 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8002d10:	480a      	ldr	r0, [pc, #40]	; (8002d3c <XMC_CAN_Enable+0x34>)
 8002d12:	f7ff fc15 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002d16:	4809      	ldr	r0, [pc, #36]	; (8002d3c <XMC_CAN_Enable+0x34>)
 8002d18:	f7ff fa8e 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f023 0201 	bic.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8002d28:	bf00      	nop
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1f9      	bne.n	8002d2a <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	10000010 	.word	0x10000010

08002d40 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d52:	f023 020f 	bic.w	r2, r3, #15
 8002d56:	78fb      	ldrb	r3, [r7, #3]
 8002d58:	431a      	orrs	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr
 8002d6a:	bf00      	nop

08002d6c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	370c      	adds	r7, #12
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop

08002d90 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b084      	sub	sp, #16
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ffe5 	bl	8002d6c <XMC_CAN_GetBaudrateClockSource>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d002      	beq.n	8002dae <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d004      	beq.n	8002db6 <XMC_CAN_GetBaudrateClockFrequency+0x26>
 8002dac:	e007      	b.n	8002dbe <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8002dae:	f7ff fa83 	bl	80022b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002db2:	60f8      	str	r0, [r7, #12]
      break;
 8002db4:	e003      	b.n	8002dbe <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 8002db6:	f005 fbfd 	bl	80085b4 <OSCHP_GetFrequency>
 8002dba:	60f8      	str	r0, [r7, #12]
      break;
 8002dbc:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3710      	adds	r7, #16
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}

08002dc8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff ff96 	bl	8002d08 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8002ddc:	7afb      	ldrb	r3, [r7, #11]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	4619      	mov	r1, r3
 8002de2:	f7ff ffad 	bl	8002d40 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8002de6:	68f8      	ldr	r0, [r7, #12]
 8002de8:	f7ff ffd2 	bl	8002d90 <XMC_CAN_GetBaudrateClockFrequency>
 8002dec:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df6:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002dfa:	2000      	movs	r0, #0
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f7ff fe9d 	bl	8002b3c <max>
 8002e02:	4603      	mov	r3, r0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002e0a:	f7ff fea7 	bl	8002b5c <min>
 8002e0e:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002e16:	69fa      	ldr	r2, [r7, #28]
 8002e18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e1c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002e26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e2a:	68fa      	ldr	r2, [r7, #12]
 8002e2c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	68da      	ldr	r2, [r3, #12]
 8002e32:	69bb      	ldr	r3, [r7, #24]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	60da      	str	r2, [r3, #12]

  return freq_n;
 8002e3e:	697b      	ldr	r3, [r7, #20]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3720      	adds	r7, #32
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8002e58:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8002e5c:	095b      	lsrs	r3, r3, #5
 8002e5e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	095b      	lsrs	r3, r3, #5
 8002e64:	035a      	lsls	r2, r3, #13
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	021b      	lsls	r3, r3, #8
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	6812      	ldr	r2, [r2, #0]
 8002e7a:	6892      	ldr	r2, [r2, #8]
 8002e7c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002e80:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	6891      	ldr	r1, [r2, #8]
 8002e8c:	693a      	ldr	r2, [r7, #16]
 8002e8e:	430a      	orrs	r2, r1
 8002e90:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	79db      	ldrb	r3, [r3, #7]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d007      	beq.n	8002eb0 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	79db      	ldrb	r3, [r3, #7]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d100      	bne.n	8002eb0 <XMC_CAN_MO_Config+0x68>
 8002eae:	e060      	b.n	8002f72 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d004      	beq.n	8002ec2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d000      	beq.n	8002ec2 <XMC_CAN_MO_Config+0x7a>
 8002ec0:	e057      	b.n	8002f72 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	79db      	ldrb	r3, [r3, #7]
 8002ece:	f003 0320 	and.w	r3, r3, #32
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d128      	bne.n	8002f2a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002ee4:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002eee:	049b      	lsls	r3, r3, #18
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	689b      	ldr	r3, [r3, #8]
 8002f04:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002f0c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	461a      	mov	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	60da      	str	r2, [r3, #12]
 8002f28:	e009      	b.n	8002f3e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6852      	ldr	r2, [r2, #4]
 8002f32:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6892      	ldr	r2, [r2, #8]
 8002f3c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7e1b      	ldrb	r3, [r3, #24]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d10c      	bne.n	8002f60 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f81a 	bl	8002f80 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002f54:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <XMC_CAN_MO_Config+0x130>)
 8002f5c:	61da      	str	r2, [r3, #28]
 8002f5e:	e008      	b.n	8002f72 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f68:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a03      	ldr	r2, [pc, #12]	; (8002f7c <XMC_CAN_MO_Config+0x134>)
 8002f70:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	062000c0 	.word	0x062000c0
 8002f7c:	00a00640 	.word	0x00a00640

08002f80 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	7e1b      	ldrb	r3, [r3, #24]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d122      	bne.n	8002fda <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	6812      	ldr	r2, [r2, #0]
 8002fa6:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	7b12      	ldrb	r2, [r2, #12]
 8002fae:	0612      	lsls	r2, r2, #24
 8002fb0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	6912      	ldr	r2, [r2, #16]
 8002fc0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	6952      	ldr	r2, [r2, #20]
 8002fca:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a06      	ldr	r2, [pc, #24]	; (8002fec <XMC_CAN_MO_UpdateData+0x6c>)
 8002fd2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	73fb      	strb	r3, [r7, #15]
 8002fd8:	e001      	b.n	8002fde <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 8002fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	00280040 	.word	0x00280040

08002ff0 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	69db      	ldr	r3, [r3, #28]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	095b      	lsrs	r3, r3, #5
 8003008:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003014:	0a1b      	lsrs	r3, r3, #8
 8003016:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d102      	bne.n	8003024 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800301e:	2304      	movs	r3, #4
 8003020:	75fb      	strb	r3, [r7, #23]
 8003022:	e00c      	b.n	800303e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d102      	bne.n	8003030 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800302a:	2302      	movs	r3, #2
 800302c:	75fb      	strb	r3, [r7, #23]
 800302e:	e006      	b.n	800303e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003038:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800303a:	2300      	movs	r3, #0
 800303c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800303e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003040:	4618      	mov	r0, r3
 8003042:	371c      	adds	r7, #28
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8003058:	2300      	movs	r3, #0
 800305a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	69db      	ldr	r3, [r3, #28]
 8003066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800306a:	0adb      	lsrs	r3, r3, #11
 800306c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	69db      	ldr	r3, [r3, #28]
 8003074:	f003 0304 	and.w	r3, r3, #4
 8003078:	089b      	lsrs	r3, r3, #2
 800307a:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8003082:	2303      	movs	r3, #3
 8003084:	75fb      	strb	r3, [r7, #23]
 8003086:	e0a7      	b.n	80031d8 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d102      	bne.n	8003094 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800308e:	2302      	movs	r3, #2
 8003090:	75fb      	strb	r3, [r7, #23]
 8003092:	e0a1      	b.n	80031d8 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2208      	movs	r2, #8
 800309a:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030a6:	0f5b      	lsrs	r3, r3, #29
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d140      	bne.n	800312e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	79d3      	ldrb	r3, [r2, #7]
 80030b0:	f36f 1345 	bfc	r3, #5, #1
 80030b4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	699a      	ldr	r2, [r3, #24]
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <XMC_CAN_MO_Receive+0x19c>)
 80030be:	4013      	ands	r3, r2
 80030c0:	0c9b      	lsrs	r3, r3, #18
 80030c2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	6853      	ldr	r3, [r2, #4]
 80030ca:	f361 031c 	bfi	r3, r1, #0, #29
 80030ce:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80030da:	0f5b      	lsrs	r3, r3, #29
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	b2d9      	uxtb	r1, r3
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	7ad3      	ldrb	r3, [r2, #11]
 80030e8:	f361 1345 	bfi	r3, r1, #5, #1
 80030ec:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	7adb      	ldrb	r3, [r3, #11]
 80030f2:	f003 0320 	and.w	r3, r3, #32
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00d      	beq.n	8003118 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <XMC_CAN_MO_Receive+0x19c>)
 8003104:	4013      	ands	r3, r2
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	6893      	ldr	r3, [r2, #8]
 8003110:	f361 031c 	bfi	r3, r1, #0, #29
 8003114:	6093      	str	r3, [r2, #8]
 8003116:	e032      	b.n	800317e <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	6893      	ldr	r3, [r2, #8]
 8003126:	f361 031c 	bfi	r3, r1, #0, #29
 800312a:	6093      	str	r3, [r2, #8]
 800312c:	e027      	b.n	800317e <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	79d3      	ldrb	r3, [r2, #7]
 8003132:	f043 0320 	orr.w	r3, r3, #32
 8003136:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6853      	ldr	r3, [r2, #4]
 8003146:	f361 031c 	bfi	r3, r1, #0, #29
 800314a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	6893      	ldr	r3, [r2, #8]
 800315a:	f361 031c 	bfi	r3, r1, #0, #29
 800315e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800316a:	0f5b      	lsrs	r3, r3, #29
 800316c:	b2db      	uxtb	r3, r3
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	b2d9      	uxtb	r1, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	7ad3      	ldrb	r3, [r2, #11]
 8003178:	f361 1345 	bfi	r3, r1, #5, #1
 800317c:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003188:	0e1b      	lsrs	r3, r3, #24
 800318a:	b2da      	uxtb	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	691a      	ldr	r2, [r3, #16]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	69db      	ldr	r3, [r3, #28]
 80031aa:	f003 0304 	and.w	r3, r3, #4
 80031ae:	089b      	lsrs	r3, r3, #2
 80031b0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	f003 0308 	and.w	r3, r3, #8
 80031bc:	08db      	lsrs	r3, r3, #3
 80031be:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 80031c0:	7dbb      	ldrb	r3, [r7, #22]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d003      	beq.n	80031ce <XMC_CAN_MO_Receive+0x182>
 80031c6:	7d7b      	ldrb	r3, [r7, #21]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f47f af63 	bne.w	8003094 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80031d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80031da:	4618      	mov	r0, r3
 80031dc:	371c      	adds	r7, #28
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	1ffc0000 	.word	0x1ffc0000

080031ec <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 80031f6:	683b      	ldr	r3, [r7, #0]
 80031f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fc:	d006      	beq.n	800320c <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e005      	b.n	8003218 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699a      	ldr	r2, [r3, #24]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	619a      	str	r2, [r3, #24]
  }
}
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop

08003224 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003224:	b480      	push	{r7}
 8003226:	b083      	sub	sp, #12
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003232:	60da      	str	r2, [r3, #12]
}
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a10      	ldr	r2, [pc, #64]	; (800328c <XMC_CCU4_lDeassertReset+0x4c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d103      	bne.n	8003258 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003250:	2004      	movs	r0, #4
 8003252:	f7fe fff1 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003256:	e016      	b.n	8003286 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a0d      	ldr	r2, [pc, #52]	; (8003290 <XMC_CCU4_lDeassertReset+0x50>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d103      	bne.n	8003268 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003260:	2008      	movs	r0, #8
 8003262:	f7fe ffe9 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003266:	e00e      	b.n	8003286 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <XMC_CCU4_lDeassertReset+0x54>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d103      	bne.n	8003278 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003270:	2010      	movs	r0, #16
 8003272:	f7fe ffe1 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003276:	e006      	b.n	8003286 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a07      	ldr	r2, [pc, #28]	; (8003298 <XMC_CCU4_lDeassertReset+0x58>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d102      	bne.n	8003286 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8003280:	4806      	ldr	r0, [pc, #24]	; (800329c <XMC_CCU4_lDeassertReset+0x5c>)
 8003282:	f7fe ffd9 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	4000c000 	.word	0x4000c000
 8003290:	40010000 	.word	0x40010000
 8003294:	40014000 	.word	0x40014000
 8003298:	48004000 	.word	0x48004000
 800329c:	10000001 	.word	0x10000001

080032a0 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a10      	ldr	r2, [pc, #64]	; (80032ec <XMC_CCU4_lUngateClock+0x4c>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d103      	bne.n	80032b8 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80032b0:	2004      	movs	r0, #4
 80032b2:	f7ff f945 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80032b6:	e016      	b.n	80032e6 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	4a0d      	ldr	r2, [pc, #52]	; (80032f0 <XMC_CCU4_lUngateClock+0x50>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80032c0:	2008      	movs	r0, #8
 80032c2:	f7ff f93d 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80032c6:	e00e      	b.n	80032e6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <XMC_CCU4_lUngateClock+0x54>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d103      	bne.n	80032d8 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80032d0:	2010      	movs	r0, #16
 80032d2:	f7ff f935 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80032d6:	e006      	b.n	80032e6 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	4a07      	ldr	r2, [pc, #28]	; (80032f8 <XMC_CCU4_lUngateClock+0x58>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d102      	bne.n	80032e6 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80032e0:	4806      	ldr	r0, [pc, #24]	; (80032fc <XMC_CCU4_lUngateClock+0x5c>)
 80032e2:	f7ff f92d 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80032e6:	3708      	adds	r7, #8
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}
 80032ec:	4000c000 	.word	0x4000c000
 80032f0:	40010000 	.word	0x40010000
 80032f4:	40014000 	.word	0x40014000
 80032f8:	48004000 	.word	0x48004000
 80032fc:	10000001 	.word	0x10000001

08003300 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003308:	2010      	movs	r0, #16
 800330a:	f7ff f909 	bl	8002520 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff ffc6 	bl	80032a0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff ff93 	bl	8003240 <XMC_CCU4_lDeassertReset>
#endif
}
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f7ff ffe7 	bl	8003300 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f7ff ff76 	bl	8003224 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003344:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8003346:	78fb      	ldrb	r3, [r7, #3]
 8003348:	039b      	lsls	r3, r3, #14
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4313      	orrs	r3, r2
 800334e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	601a      	str	r2, [r3, #0]
}
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	795b      	ldrb	r3, [r3, #5]
 8003372:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	051a      	lsls	r2, r3, #20
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	791b      	ldrb	r3, [r3, #4]
 8003382:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003386:	b2db      	uxtb	r3, r3
 8003388:	461a      	mov	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	795b      	ldrb	r3, [r3, #5]
 8003392:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	795b      	ldrb	r3, [r3, #5]
 80033a2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr

080033c8 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	460b      	mov	r3, r1
 80033d2:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d8:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80033e0:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	021b      	lsls	r3, r3, #8
 80033e6:	68fa      	ldr	r2, [r7, #12]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	625a      	str	r2, [r3, #36]	; 0x24
}
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003412:	60da      	str	r2, [r3, #12]
}
 8003414:	370c      	adds	r7, #12
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr
 800341e:	bf00      	nop

08003420 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	611a      	str	r2, [r3, #16]
}
 800342e:	370c      	adds	r7, #12
 8003430:	46bd      	mov	sp, r7
 8003432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003436:	4770      	bx	lr

08003438 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a09      	ldr	r2, [pc, #36]	; (8003468 <XMC_CCU8_lDeassertReset+0x30>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d103      	bne.n	8003450 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8003448:	2080      	movs	r0, #128	; 0x80
 800344a:	f7fe fef5 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
 800344e:	e007      	b.n	8003460 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a06      	ldr	r2, [pc, #24]	; (800346c <XMC_CCU8_lDeassertReset+0x34>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d103      	bne.n	8003460 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8003458:	f44f 7080 	mov.w	r0, #256	; 0x100
 800345c:	f7fe feec 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40020000 	.word	0x40020000
 800346c:	40024000 	.word	0x40024000

08003470 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a09      	ldr	r2, [pc, #36]	; (80034a0 <XMC_CCU8_lUngateClock+0x30>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d103      	bne.n	8003488 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8003480:	2080      	movs	r0, #128	; 0x80
 8003482:	f7ff f85d 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8003486:	e007      	b.n	8003498 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	4a06      	ldr	r2, [pc, #24]	; (80034a4 <XMC_CCU8_lUngateClock+0x34>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d103      	bne.n	8003498 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8003490:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003494:	f7ff f854 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8003498:	3708      	adds	r7, #8
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40020000 	.word	0x40020000
 80034a4:	40024000 	.word	0x40024000

080034a8 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80034b0:	2010      	movs	r0, #16
 80034b2:	f7ff f835 	bl	8002520 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7ff ffda 	bl	8003470 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 80034bc:	6878      	ldr	r0, [r7, #4]
 80034be:	f7ff ffbb 	bl	8003438 <XMC_CCU8_lDeassertReset>
#endif
}
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	460b      	mov	r3, r1
 80034d2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f7ff ffe7 	bl	80034a8 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7ff ff92 	bl	8003404 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80034ec:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	039b      	lsls	r3, r3, #14
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	601a      	str	r2, [r3, #0]
}
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ff86 	bl	8003420 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	7b5b      	ldrb	r3, [r3, #13]
 8003520:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003524:	b2db      	uxtb	r3, r3
 8003526:	051a      	lsls	r2, r3, #20
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	7b1b      	ldrb	r3, [r3, #12]
 8003530:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003534:	b2db      	uxtb	r3, r3
 8003536:	461a      	mov	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	7b1b      	ldrb	r3, [r3, #12]
 8003540:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003544:	b2db      	uxtb	r3, r3
 8003546:	461a      	mov	r2, r3
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	7b5b      	ldrb	r3, [r3, #13]
 8003550:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f083 0214 	eor.w	r2, r3, #20
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop

08003578 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	460b      	mov	r3, r1
 8003582:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003584:	887a      	ldrh	r2, [r7, #2]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	635a      	str	r2, [r3, #52]	; 0x34
}
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <XMC_CCU8_SLICE_SetPrescaler>:
  XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scaler divider  */
void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t div_val)
{
 8003594:	b480      	push	{r7}
 8003596:	b085      	sub	sp, #20
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	460b      	mov	r3, r1
 800359e:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a4:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035ac:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	021b      	lsls	r3, r3, #8
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	629a      	str	r2, [r3, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80035be:	78fa      	ldrb	r2, [r7, #3]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035c4:	3714      	adds	r7, #20
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop

080035d0 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	70fb      	strb	r3, [r7, #3]
 80035dc:	4613      	mov	r3, r2
 80035de:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d103      	bne.n	80035ee <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80035e6:	883a      	ldrh	r2, [r7, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	63da      	str	r2, [r3, #60]	; 0x3c
 80035ec:	e002      	b.n	80035f4 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80035ee:	883a      	ldrh	r2, [r7, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80035f4:	370c      	adds	r7, #12
 80035f6:	46bd      	mov	sp, r7
 80035f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop

08003600 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 800360e:	4618      	mov	r0, r3
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop

0800361c <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 800362a:	4618      	mov	r0, r3
 800362c:	370c      	adds	r7, #12
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop

08003638 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 8003646:	4618      	mov	r0, r3
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop

08003654 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 8003662:	4618      	mov	r0, r3
 8003664:	370c      	adds	r7, #12
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop

08003670 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop

0800368c <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 800368c:	b480      	push	{r7}
 800368e:	b083      	sub	sp, #12
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 800369a:	4618      	mov	r0, r3
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop

080036a8 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 f803 	bl	80036bc <XMC_DMA_Enable>
}
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a0b      	ldr	r2, [pc, #44]	; (80036f4 <XMC_DMA_Enable+0x38>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d106      	bne.n	80036da <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 80036cc:	480a      	ldr	r0, [pc, #40]	; (80036f8 <XMC_DMA_Enable+0x3c>)
 80036ce:	f7fe ff37 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80036d2:	4809      	ldr	r0, [pc, #36]	; (80036f8 <XMC_DMA_Enable+0x3c>)
 80036d4:	f7fe fdb0 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
 80036d8:	e005      	b.n	80036e6 <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 80036da:	4808      	ldr	r0, [pc, #32]	; (80036fc <XMC_DMA_Enable+0x40>)
 80036dc:	f7fe ff30 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 80036e0:	4806      	ldr	r0, [pc, #24]	; (80036fc <XMC_DMA_Enable+0x40>)
 80036e2:	f7fe fda9 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	50014000 	.word	0x50014000
 80036f8:	20000010 	.word	0x20000010
 80036fc:	20000020 	.word	0x20000020

08003700 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a33      	ldr	r2, [pc, #204]	; (80037d8 <XMC_DMA_IsEnabled+0xd8>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d125      	bne.n	800375c <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8003710:	4832      	ldr	r0, [pc, #200]	; (80037dc <XMC_DMA_IsEnabled+0xdc>)
 8003712:	f7fe fdad 	bl	8002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	bf14      	ite	ne
 800371c:	2301      	movne	r3, #1
 800371e:	2300      	moveq	r3, #0
 8003720:	b2db      	uxtb	r3, r3
 8003722:	f083 0301 	eor.w	r3, r3, #1
 8003726:	b2db      	uxtb	r3, r3
 8003728:	73fb      	strb	r3, [r7, #15]
 800372a:	7bfb      	ldrb	r3, [r7, #15]
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d00a      	beq.n	800374e <XMC_DMA_IsEnabled+0x4e>
 8003738:	4828      	ldr	r0, [pc, #160]	; (80037dc <XMC_DMA_IsEnabled+0xdc>)
 800373a:	f7fe ff1d 	bl	8002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800373e:	4603      	mov	r3, r0
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <XMC_DMA_IsEnabled+0x4e>
 800374a:	2301      	movs	r3, #1
 800374c:	e000      	b.n	8003750 <XMC_DMA_IsEnabled+0x50>
 800374e:	2300      	movs	r3, #0
 8003750:	73fb      	strb	r3, [r7, #15]
 8003752:	7bfb      	ldrb	r3, [r7, #15]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	73fb      	strb	r3, [r7, #15]
 800375a:	e024      	b.n	80037a6 <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 800375c:	4820      	ldr	r0, [pc, #128]	; (80037e0 <XMC_DMA_IsEnabled+0xe0>)
 800375e:	f7fe fd87 	bl	8002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	bf14      	ite	ne
 8003768:	2301      	movne	r3, #1
 800376a:	2300      	moveq	r3, #0
 800376c:	b2db      	uxtb	r3, r3
 800376e:	f083 0301 	eor.w	r3, r3, #1
 8003772:	b2db      	uxtb	r3, r3
 8003774:	73fb      	strb	r3, [r7, #15]
 8003776:	7bfb      	ldrb	r3, [r7, #15]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 800377e:	7bfb      	ldrb	r3, [r7, #15]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <XMC_DMA_IsEnabled+0x9a>
 8003784:	4816      	ldr	r0, [pc, #88]	; (80037e0 <XMC_DMA_IsEnabled+0xe0>)
 8003786:	f7fe fef7 	bl	8002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800378a:	4603      	mov	r3, r0
 800378c:	f083 0301 	eor.w	r3, r3, #1
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <XMC_DMA_IsEnabled+0x9a>
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <XMC_DMA_IsEnabled+0x9c>
 800379a:	2300      	movs	r3, #0
 800379c:	73fb      	strb	r3, [r7, #15]
 800379e:	7bfb      	ldrb	r3, [r7, #15]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80037a6:	7bfb      	ldrb	r3, [r7, #15]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00f      	beq.n	80037cc <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d006      	beq.n	80037c0 <XMC_DMA_IsEnabled+0xc0>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <XMC_DMA_IsEnabled+0xc0>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <XMC_DMA_IsEnabled+0xc2>
 80037c0:	2300      	movs	r3, #0
 80037c2:	73fb      	strb	r3, [r7, #15]
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80037cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	50014000 	.word	0x50014000
 80037dc:	20000010 	.word	0x20000010
 80037e0:	20000020 	.word	0x20000020

080037e4 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	460b      	mov	r3, r1
 80037ee:	70fb      	strb	r3, [r7, #3]
 80037f0:	4613      	mov	r3, r2
 80037f2:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a1f      	ldr	r2, [pc, #124]	; (8003874 <XMC_DMA_EnableRequestLine+0x90>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d11b      	bne.n	8003834 <XMC_DMA_EnableRequestLine+0x50>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 80037fc:	481e      	ldr	r0, [pc, #120]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 80037fe:	4b1e      	ldr	r3, [pc, #120]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003800:	689a      	ldr	r2, [r3, #8]
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	4619      	mov	r1, r3
 8003808:	230f      	movs	r3, #15
 800380a:	408b      	lsls	r3, r1
 800380c:	43db      	mvns	r3, r3
 800380e:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003810:	78bb      	ldrb	r3, [r7, #2]
 8003812:	78f9      	ldrb	r1, [r7, #3]
 8003814:	0089      	lsls	r1, r1, #2
 8003816:	408b      	lsls	r3, r1
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003818:	4313      	orrs	r3, r2
 800381a:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 800381c:	4916      	ldr	r1, [pc, #88]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003820:	691a      	ldr	r2, [r3, #16]
 8003822:	78fb      	ldrb	r3, [r7, #3]
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	2001      	movs	r0, #1
 800382a:	fa00 f303 	lsl.w	r3, r0, r3
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
 8003832:	e019      	b.n	8003868 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003834:	4810      	ldr	r0, [pc, #64]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003836:	4b10      	ldr	r3, [pc, #64]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003838:	68da      	ldr	r2, [r3, #12]
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4619      	mov	r1, r3
 8003840:	230f      	movs	r3, #15
 8003842:	408b      	lsls	r3, r1
 8003844:	43db      	mvns	r3, r3
 8003846:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003848:	78bb      	ldrb	r3, [r7, #2]
 800384a:	78f9      	ldrb	r1, [r7, #3]
 800384c:	0089      	lsls	r1, r1, #2
 800384e:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003850:	4313      	orrs	r3, r2
 8003852:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8003854:	4908      	ldr	r1, [pc, #32]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003856:	4b08      	ldr	r3, [pc, #32]	; (8003878 <XMC_DMA_EnableRequestLine+0x94>)
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	78fb      	ldrb	r3, [r7, #3]
 800385c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003860:	fa00 f303 	lsl.w	r3, r0, r3
 8003864:	4313      	orrs	r3, r2
 8003866:	610b      	str	r3, [r1, #16]
  }
#endif
}
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop
 8003874:	50014000 	.word	0x50014000
 8003878:	50004900 	.word	0x50004900

0800387c <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	fa22 f303 	lsr.w	r3, r2, r3
 8003894:	f003 0301 	and.w	r3, r3, #1
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf14      	ite	ne
 800389c:	2301      	movne	r3, #1
 800389e:	2300      	moveq	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop

080038b0 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	460b      	mov	r3, r1
 80038ba:	607a      	str	r2, [r7, #4]
 80038bc:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 80038be:	68f8      	ldr	r0, [r7, #12]
 80038c0:	f7ff ff1e 	bl	8003700 <XMC_DMA_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	f000 81f1 	beq.w	8003cae <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 80038cc:	7afb      	ldrb	r3, [r7, #11]
 80038ce:	68f8      	ldr	r0, [r7, #12]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7ff ffd3 	bl	800387c <XMC_DMA_CH_IsEnabled>
 80038d6:	4603      	mov	r3, r0
 80038d8:	f083 0301 	eor.w	r3, r3, #1
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 81e2 	beq.w	8003ca8 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 80038e4:	7afb      	ldrb	r3, [r7, #11]
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6852      	ldr	r2, [r2, #4]
 80038ea:	68f9      	ldr	r1, [r7, #12]
 80038ec:	2058      	movs	r0, #88	; 0x58
 80038ee:	fb00 f303 	mul.w	r3, r0, r3
 80038f2:	440b      	add	r3, r1
 80038f4:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 80038f6:	7afb      	ldrb	r3, [r7, #11]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	68f9      	ldr	r1, [r7, #12]
 80038fe:	2058      	movs	r0, #88	; 0x58
 8003900:	fb00 f303 	mul.w	r3, r0, r3
 8003904:	440b      	add	r3, r1
 8003906:	3308      	adds	r3, #8
 8003908:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	4610      	mov	r0, r2
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	2158      	movs	r1, #88	; 0x58
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3310      	adds	r3, #16
 800391e:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8003920:	7afb      	ldrb	r3, [r7, #11]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	8b12      	ldrh	r2, [r2, #24]
 8003926:	4610      	mov	r0, r2
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	2158      	movs	r1, #88	; 0x58
 800392c:	fb01 f303 	mul.w	r3, r1, r3
 8003930:	4413      	add	r3, r2
 8003932:	3318      	adds	r3, #24
 8003934:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8003936:	7afb      	ldrb	r3, [r7, #11]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	68f9      	ldr	r1, [r7, #12]
 800393e:	2058      	movs	r0, #88	; 0x58
 8003940:	fb00 f303 	mul.w	r3, r0, r3
 8003944:	440b      	add	r3, r1
 8003946:	3318      	adds	r3, #24
 8003948:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 800394a:	7afb      	ldrb	r3, [r7, #11]
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	7ed2      	ldrb	r2, [r2, #27]
 8003950:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8003954:	68f9      	ldr	r1, [r7, #12]
 8003956:	2058      	movs	r0, #88	; 0x58
 8003958:	fb00 f303 	mul.w	r3, r0, r3
 800395c:	440b      	add	r3, r1
 800395e:	3340      	adds	r3, #64	; 0x40
 8003960:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	4ab1      	ldr	r2, [pc, #708]	; (8003c2c <XMC_DMA_CH_Init+0x37c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d116      	bne.n	8003998 <XMC_DMA_CH_Init+0xe8>
 800396a:	7afb      	ldrb	r3, [r7, #11]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d813      	bhi.n	8003998 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8003970:	7afb      	ldrb	r3, [r7, #11]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	6912      	ldr	r2, [r2, #16]
 8003976:	68f9      	ldr	r1, [r7, #12]
 8003978:	2058      	movs	r0, #88	; 0x58
 800397a:	fb00 f303 	mul.w	r3, r0, r3
 800397e:	440b      	add	r3, r1
 8003980:	3348      	adds	r3, #72	; 0x48
 8003982:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 8003984:	7afb      	ldrb	r3, [r7, #11]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6952      	ldr	r2, [r2, #20]
 800398a:	68f9      	ldr	r1, [r7, #12]
 800398c:	2058      	movs	r0, #88	; 0x58
 800398e:	fb00 f303 	mul.w	r3, r0, r3
 8003992:	440b      	add	r3, r1
 8003994:	3350      	adds	r3, #80	; 0x50
 8003996:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8c1b      	ldrh	r3, [r3, #32]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d14f      	bne.n	8003a40 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	789b      	ldrb	r3, [r3, #2]
 80039a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b10      	cmp	r3, #16
 80039ac:	d006      	beq.n	80039bc <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	789b      	ldrb	r3, [r3, #2]
 80039b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80039b6:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 80039b8:	2b30      	cmp	r3, #48	; 0x30
 80039ba:	d141      	bne.n	8003a40 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a9b      	ldr	r2, [pc, #620]	; (8003c2c <XMC_DMA_CH_Init+0x37c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d106      	bne.n	80039d2 <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80039ca:	f003 0307 	and.w	r3, r3, #7
 80039ce:	75bb      	strb	r3, [r7, #22]
 80039d0:	e005      	b.n	80039de <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80039d8:	f003 0303 	and.w	r3, r3, #3
 80039dc:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 80039e8:	7afb      	ldrb	r3, [r7, #11]
 80039ea:	7afa      	ldrb	r2, [r7, #11]
 80039ec:	68f9      	ldr	r1, [r7, #12]
 80039ee:	2058      	movs	r0, #88	; 0x58
 80039f0:	fb00 f202 	mul.w	r2, r0, r2
 80039f4:	440a      	add	r2, r1
 80039f6:	3240      	adds	r2, #64	; 0x40
 80039f8:	6851      	ldr	r1, [r2, #4]
 80039fa:	7dba      	ldrb	r2, [r7, #22]
 80039fc:	02d2      	lsls	r2, r2, #11
 80039fe:	430a      	orrs	r2, r1
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	2058      	movs	r0, #88	; 0x58
 8003a04:	fb00 f303 	mul.w	r3, r0, r3
 8003a08:	440b      	add	r3, r1
 8003a0a:	3340      	adds	r3, #64	; 0x40
 8003a0c:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003a0e:	7dba      	ldrb	r2, [r7, #22]
 8003a10:	7d7b      	ldrb	r3, [r7, #21]
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	4611      	mov	r1, r2
 8003a16:	461a      	mov	r2, r3
 8003a18:	f7ff fee4 	bl	80037e4 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8003a1c:	7afb      	ldrb	r3, [r7, #11]
 8003a1e:	7afa      	ldrb	r2, [r7, #11]
 8003a20:	68f9      	ldr	r1, [r7, #12]
 8003a22:	2058      	movs	r0, #88	; 0x58
 8003a24:	fb00 f202 	mul.w	r2, r0, r2
 8003a28:	440a      	add	r2, r1
 8003a2a:	3240      	adds	r2, #64	; 0x40
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a32:	68f9      	ldr	r1, [r7, #12]
 8003a34:	2058      	movs	r0, #88	; 0x58
 8003a36:	fb00 f303 	mul.w	r3, r0, r3
 8003a3a:	440b      	add	r3, r1
 8003a3c:	3340      	adds	r3, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	8b9b      	ldrh	r3, [r3, #28]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d14c      	bne.n	8003ae2 <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	789b      	ldrb	r3, [r3, #2]
 8003a4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	2b20      	cmp	r3, #32
 8003a54:	d006      	beq.n	8003a64 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	789b      	ldrb	r3, [r3, #2]
 8003a5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a5e:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003a60:	2b30      	cmp	r3, #48	; 0x30
 8003a62:	d13e      	bne.n	8003ae2 <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4a71      	ldr	r2, [pc, #452]	; (8003c2c <XMC_DMA_CH_Init+0x37c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d105      	bne.n	8003a78 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	7f9b      	ldrb	r3, [r3, #30]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	75bb      	strb	r3, [r7, #22]
 8003a76:	e004      	b.n	8003a82 <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	7f9b      	ldrb	r3, [r3, #30]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	7f9b      	ldrb	r3, [r3, #30]
 8003a86:	091b      	lsrs	r3, r3, #4
 8003a88:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	7afa      	ldrb	r2, [r7, #11]
 8003a8e:	68f9      	ldr	r1, [r7, #12]
 8003a90:	2058      	movs	r0, #88	; 0x58
 8003a92:	fb00 f202 	mul.w	r2, r0, r2
 8003a96:	440a      	add	r2, r1
 8003a98:	3240      	adds	r2, #64	; 0x40
 8003a9a:	6851      	ldr	r1, [r2, #4]
 8003a9c:	7dba      	ldrb	r2, [r7, #22]
 8003a9e:	01d2      	lsls	r2, r2, #7
 8003aa0:	430a      	orrs	r2, r1
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	2058      	movs	r0, #88	; 0x58
 8003aa6:	fb00 f303 	mul.w	r3, r0, r3
 8003aaa:	440b      	add	r3, r1
 8003aac:	3340      	adds	r3, #64	; 0x40
 8003aae:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003ab0:	7dba      	ldrb	r2, [r7, #22]
 8003ab2:	7d7b      	ldrb	r3, [r7, #21]
 8003ab4:	68f8      	ldr	r0, [r7, #12]
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f7ff fe93 	bl	80037e4 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8003abe:	7afb      	ldrb	r3, [r7, #11]
 8003ac0:	7afa      	ldrb	r2, [r7, #11]
 8003ac2:	68f9      	ldr	r1, [r7, #12]
 8003ac4:	2058      	movs	r0, #88	; 0x58
 8003ac6:	fb00 f202 	mul.w	r2, r0, r2
 8003aca:	440a      	add	r2, r1
 8003acc:	3240      	adds	r2, #64	; 0x40
 8003ace:	6812      	ldr	r2, [r2, #0]
 8003ad0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ad4:	68f9      	ldr	r1, [r7, #12]
 8003ad6:	2058      	movs	r0, #88	; 0x58
 8003ad8:	fb00 f303 	mul.w	r3, r0, r3
 8003adc:	440b      	add	r3, r1
 8003ade:	3340      	adds	r3, #64	; 0x40
 8003ae0:	601a      	str	r2, [r3, #0]
        }
      }

      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003ae2:	7afb      	ldrb	r3, [r7, #11]
 8003ae4:	68f8      	ldr	r0, [r7, #12]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	221f      	movs	r2, #31
 8003aea:	f000 f90f 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>
                                  (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	7e9b      	ldrb	r3, [r3, #26]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	f200 80d4 	bhi.w	8003ca0 <XMC_DMA_CH_Init+0x3f0>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <XMC_DMA_CH_Init+0x250>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003ca1 	.word	0x08003ca1
 8003b04:	08003b25 	.word	0x08003b25
 8003b08:	08003b4b 	.word	0x08003b4b
 8003b0c:	08003b71 	.word	0x08003b71
 8003b10:	08003b97 	.word	0x08003b97
 8003b14:	08003bbd 	.word	0x08003bbd
 8003b18:	08003c07 	.word	0x08003c07
 8003b1c:	08003c31 	.word	0x08003c31
 8003b20:	08003c7b 	.word	0x08003c7b
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003b24:	7afb      	ldrb	r3, [r7, #11]
 8003b26:	7afa      	ldrb	r2, [r7, #11]
 8003b28:	68f9      	ldr	r1, [r7, #12]
 8003b2a:	2058      	movs	r0, #88	; 0x58
 8003b2c:	fb00 f202 	mul.w	r2, r0, r2
 8003b30:	440a      	add	r2, r1
 8003b32:	3240      	adds	r2, #64	; 0x40
 8003b34:	6812      	ldr	r2, [r2, #0]
 8003b36:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003b3a:	68f9      	ldr	r1, [r7, #12]
 8003b3c:	2058      	movs	r0, #88	; 0x58
 8003b3e:	fb00 f303 	mul.w	r3, r0, r3
 8003b42:	440b      	add	r3, r1
 8003b44:	3340      	adds	r3, #64	; 0x40
 8003b46:	601a      	str	r2, [r3, #0]
          break;
 8003b48:	e0ab      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003b4a:	7afb      	ldrb	r3, [r7, #11]
 8003b4c:	7afa      	ldrb	r2, [r7, #11]
 8003b4e:	68f9      	ldr	r1, [r7, #12]
 8003b50:	2058      	movs	r0, #88	; 0x58
 8003b52:	fb00 f202 	mul.w	r2, r0, r2
 8003b56:	440a      	add	r2, r1
 8003b58:	3240      	adds	r2, #64	; 0x40
 8003b5a:	6812      	ldr	r2, [r2, #0]
 8003b5c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003b60:	68f9      	ldr	r1, [r7, #12]
 8003b62:	2058      	movs	r0, #88	; 0x58
 8003b64:	fb00 f303 	mul.w	r3, r0, r3
 8003b68:	440b      	add	r3, r1
 8003b6a:	3340      	adds	r3, #64	; 0x40
 8003b6c:	601a      	str	r2, [r3, #0]
          break;
 8003b6e:	e098      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	7afa      	ldrb	r2, [r7, #11]
 8003b74:	68f9      	ldr	r1, [r7, #12]
 8003b76:	2058      	movs	r0, #88	; 0x58
 8003b78:	fb00 f202 	mul.w	r2, r0, r2
 8003b7c:	440a      	add	r2, r1
 8003b7e:	3240      	adds	r2, #64	; 0x40
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003b86:	68f9      	ldr	r1, [r7, #12]
 8003b88:	2058      	movs	r0, #88	; 0x58
 8003b8a:	fb00 f303 	mul.w	r3, r0, r3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3340      	adds	r3, #64	; 0x40
 8003b92:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8003b94:	e085      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003b96:	7afb      	ldrb	r3, [r7, #11]
 8003b98:	7afa      	ldrb	r2, [r7, #11]
 8003b9a:	68f9      	ldr	r1, [r7, #12]
 8003b9c:	2058      	movs	r0, #88	; 0x58
 8003b9e:	fb00 f202 	mul.w	r2, r0, r2
 8003ba2:	440a      	add	r2, r1
 8003ba4:	3218      	adds	r2, #24
 8003ba6:	6812      	ldr	r2, [r2, #0]
 8003ba8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003bac:	68f9      	ldr	r1, [r7, #12]
 8003bae:	2058      	movs	r0, #88	; 0x58
 8003bb0:	fb00 f303 	mul.w	r3, r0, r3
 8003bb4:	440b      	add	r3, r1
 8003bb6:	3318      	adds	r3, #24
 8003bb8:	601a      	str	r2, [r3, #0]
          break;
 8003bba:	e072      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003bbc:	7afb      	ldrb	r3, [r7, #11]
 8003bbe:	7afa      	ldrb	r2, [r7, #11]
 8003bc0:	68f9      	ldr	r1, [r7, #12]
 8003bc2:	2058      	movs	r0, #88	; 0x58
 8003bc4:	fb00 f202 	mul.w	r2, r0, r2
 8003bc8:	440a      	add	r2, r1
 8003bca:	3240      	adds	r2, #64	; 0x40
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bd2:	68f9      	ldr	r1, [r7, #12]
 8003bd4:	2058      	movs	r0, #88	; 0x58
 8003bd6:	fb00 f303 	mul.w	r3, r0, r3
 8003bda:	440b      	add	r3, r1
 8003bdc:	3340      	adds	r3, #64	; 0x40
 8003bde:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003be0:	7afb      	ldrb	r3, [r7, #11]
 8003be2:	7afa      	ldrb	r2, [r7, #11]
 8003be4:	68f9      	ldr	r1, [r7, #12]
 8003be6:	2058      	movs	r0, #88	; 0x58
 8003be8:	fb00 f202 	mul.w	r2, r0, r2
 8003bec:	440a      	add	r2, r1
 8003bee:	3218      	adds	r2, #24
 8003bf0:	6812      	ldr	r2, [r2, #0]
 8003bf2:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003bf6:	68f9      	ldr	r1, [r7, #12]
 8003bf8:	2058      	movs	r0, #88	; 0x58
 8003bfa:	fb00 f303 	mul.w	r3, r0, r3
 8003bfe:	440b      	add	r3, r1
 8003c00:	3318      	adds	r3, #24
 8003c02:	601a      	str	r2, [r3, #0]
          break;
 8003c04:	e04d      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003c06:	7afb      	ldrb	r3, [r7, #11]
 8003c08:	7afa      	ldrb	r2, [r7, #11]
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	2058      	movs	r0, #88	; 0x58
 8003c0e:	fb00 f202 	mul.w	r2, r0, r2
 8003c12:	440a      	add	r2, r1
 8003c14:	3218      	adds	r2, #24
 8003c16:	6812      	ldr	r2, [r2, #0]
 8003c18:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c1c:	68f9      	ldr	r1, [r7, #12]
 8003c1e:	2058      	movs	r0, #88	; 0x58
 8003c20:	fb00 f303 	mul.w	r3, r0, r3
 8003c24:	440b      	add	r3, r1
 8003c26:	3318      	adds	r3, #24
 8003c28:	601a      	str	r2, [r3, #0]
          break;
 8003c2a:	e03a      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>
 8003c2c:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003c30:	7afb      	ldrb	r3, [r7, #11]
 8003c32:	7afa      	ldrb	r2, [r7, #11]
 8003c34:	68f9      	ldr	r1, [r7, #12]
 8003c36:	2058      	movs	r0, #88	; 0x58
 8003c38:	fb00 f202 	mul.w	r2, r0, r2
 8003c3c:	440a      	add	r2, r1
 8003c3e:	3240      	adds	r2, #64	; 0x40
 8003c40:	6812      	ldr	r2, [r2, #0]
 8003c42:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	2058      	movs	r0, #88	; 0x58
 8003c4a:	fb00 f303 	mul.w	r3, r0, r3
 8003c4e:	440b      	add	r3, r1
 8003c50:	3340      	adds	r3, #64	; 0x40
 8003c52:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003c54:	7afb      	ldrb	r3, [r7, #11]
 8003c56:	7afa      	ldrb	r2, [r7, #11]
 8003c58:	68f9      	ldr	r1, [r7, #12]
 8003c5a:	2058      	movs	r0, #88	; 0x58
 8003c5c:	fb00 f202 	mul.w	r2, r0, r2
 8003c60:	440a      	add	r2, r1
 8003c62:	3218      	adds	r2, #24
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	2058      	movs	r0, #88	; 0x58
 8003c6e:	fb00 f303 	mul.w	r3, r0, r3
 8003c72:	440b      	add	r3, r1
 8003c74:	3318      	adds	r3, #24
 8003c76:	601a      	str	r2, [r3, #0]
          break;
 8003c78:	e013      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8003c7a:	7afb      	ldrb	r3, [r7, #11]
 8003c7c:	7afa      	ldrb	r2, [r7, #11]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	2058      	movs	r0, #88	; 0x58
 8003c82:	fb00 f202 	mul.w	r2, r0, r2
 8003c86:	440a      	add	r2, r1
 8003c88:	3218      	adds	r2, #24
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	2058      	movs	r0, #88	; 0x58
 8003c94:	fb00 f303 	mul.w	r3, r0, r3
 8003c98:	440b      	add	r3, r1
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 8003c9e:	e000      	b.n	8003ca2 <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 8003ca0:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	75fb      	strb	r3, [r7, #23]
 8003ca6:	e004      	b.n	8003cb2 <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8003ca8:	2302      	movs	r3, #2
 8003caa:	75fb      	strb	r3, [r7, #23]
 8003cac:	e001      	b.n	8003cb2 <XMC_DMA_CH_Init+0x402>
    }
  }
  else
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	607a      	str	r2, [r7, #4]
 8003cc8:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	e014      	b.n	8003cfa <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	005a      	lsls	r2, r3, #1
 8003ce4:	7afb      	ldrb	r3, [r7, #11]
 8003ce6:	f240 1101 	movw	r1, #257	; 0x101
 8003cea:	4099      	lsls	r1, r3
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	32c4      	adds	r2, #196	; 0xc4
 8003cf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	617b      	str	r3, [r7, #20]
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d9e7      	bls.n	8003cd0 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8003d00:	371c      	adds	r7, #28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop

08003d0c <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	60f8      	str	r0, [r7, #12]
 8003d14:	460b      	mov	r3, r1
 8003d16:	607a      	str	r2, [r7, #4]
 8003d18:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e013      	b.n	8003d48 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	fa22 f303 	lsr.w	r3, r2, r3
 8003d28:	f003 0301 	and.w	r3, r3, #1
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	005a      	lsls	r2, r3, #1
 8003d34:	7afb      	ldrb	r3, [r7, #11]
 8003d36:	2101      	movs	r1, #1
 8003d38:	4099      	lsls	r1, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	32ce      	adds	r2, #206	; 0xce
 8003d3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	3301      	adds	r3, #1
 8003d46:	617b      	str	r3, [r7, #20]
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	2b04      	cmp	r3, #4
 8003d4c:	d9e8      	bls.n	8003d20 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr

08003d58 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b085      	sub	sp, #20
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	460b      	mov	r3, r1
 8003d62:	607a      	str	r2, [r7, #4]
 8003d64:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	4a09      	ldr	r2, [pc, #36]	; (8003d90 <XMC_DMA_CH_SetEventHandler+0x38>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d105      	bne.n	8003d7a <XMC_DMA_CH_SetEventHandler+0x22>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    dma0_event_handlers[channel] = event_handler;
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	4908      	ldr	r1, [pc, #32]	; (8003d94 <XMC_DMA_CH_SetEventHandler+0x3c>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003d78:	e004      	b.n	8003d84 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 8003d7a:	7afb      	ldrb	r3, [r7, #11]
 8003d7c:	4906      	ldr	r1, [pc, #24]	; (8003d98 <XMC_DMA_CH_SetEventHandler+0x40>)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	50014000 	.word	0x50014000
 8003d94:	1fff439c 	.word	0x1fff439c
 8003d98:	1fff43bc 	.word	0x1fff43bc

08003d9c <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a82      	ldr	r2, [pc, #520]	; (8003fb0 <XMC_DMA_IRQHandler+0x214>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d102      	bne.n	8003db2 <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8003dac:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <XMC_DMA_IRQHandler+0x218>)
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	e001      	b.n	8003db6 <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 8003db2:	4b81      	ldr	r3, [pc, #516]	; (8003fb8 <XMC_DMA_IRQHandler+0x21c>)
 8003db4:	61bb      	str	r3, [r7, #24]
  }
#endif

  event = XMC_DMA_GetEventStatus(dma);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7ff fc22 	bl	8003600 <XMC_DMA_GetEventStatus>
 8003dbc:	6178      	str	r0, [r7, #20]
  channel = 0;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d02b      	beq.n	8003e24 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fc5d 	bl	800368c <XMC_DMA_GetChannelsErrorStatus>
 8003dd2:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003dd4:	e021      	b.n	8003e1a <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4013      	ands	r3, r2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d014      	beq.n	8003e14 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4619      	mov	r1, r3
 8003df2:	2210      	movs	r2, #16
 8003df4:	f7ff ff8a 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d003      	beq.n	8003e12 <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2010      	movs	r0, #16
 8003e0e:	4798      	blx	r3
        }

        break;
 8003e10:	e007      	b.n	8003e22 <XMC_DMA_IRQHandler+0x86>
 8003e12:	e006      	b.n	8003e22 <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	3301      	adds	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1da      	bne.n	8003dd6 <XMC_DMA_IRQHandler+0x3a>
 8003e20:	e0c3      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
 8003e22:	e0c2      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d02b      	beq.n	8003e86 <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff fbf4 	bl	800361c <XMC_DMA_GetChannelsTransferCompleteStatus>
 8003e34:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003e36:	e021      	b.n	8003e7c <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 8003e38:	2201      	movs	r2, #1
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4013      	ands	r3, r2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d014      	beq.n	8003e76 <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	4619      	mov	r1, r3
 8003e54:	220f      	movs	r2, #15
 8003e56:	f7ff ff59 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4413      	add	r3, r2
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2001      	movs	r0, #1
 8003e70:	4798      	blx	r3
        }

        break;
 8003e72:	e007      	b.n	8003e84 <XMC_DMA_IRQHandler+0xe8>
 8003e74:	e006      	b.n	8003e84 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d1da      	bne.n	8003e38 <XMC_DMA_IRQHandler+0x9c>
 8003e82:	e092      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
 8003e84:	e091      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d02b      	beq.n	8003ee8 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 8003e90:	6878      	ldr	r0, [r7, #4]
 8003e92:	f7ff fbd1 	bl	8003638 <XMC_DMA_GetChannelsBlockCompleteStatus>
 8003e96:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003e98:	e021      	b.n	8003ede <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea2:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d014      	beq.n	8003ed8 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	4619      	mov	r1, r3
 8003eb6:	220e      	movs	r2, #14
 8003eb8:	f7ff ff28 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d003      	beq.n	8003ed6 <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	4798      	blx	r3
        }

        break;
 8003ed4:	e007      	b.n	8003ee6 <XMC_DMA_IRQHandler+0x14a>
 8003ed6:	e006      	b.n	8003ee6 <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	3301      	adds	r3, #1
 8003edc:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d1da      	bne.n	8003e9a <XMC_DMA_IRQHandler+0xfe>
 8003ee4:	e061      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
 8003ee6:	e060      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f003 0304 	and.w	r3, r3, #4
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d02b      	beq.n	8003f4a <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff fbae 	bl	8003654 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8003ef8:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003efa:	e021      	b.n	8003f40 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 8003efc:	2201      	movs	r2, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003f06:	697a      	ldr	r2, [r7, #20]
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d014      	beq.n	8003f3a <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	4619      	mov	r1, r3
 8003f18:	2204      	movs	r2, #4
 8003f1a:	f7ff fef7 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	69ba      	ldr	r2, [r7, #24]
 8003f24:	4413      	add	r3, r2
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2004      	movs	r0, #4
 8003f34:	4798      	blx	r3
        }

        break;
 8003f36:	e007      	b.n	8003f48 <XMC_DMA_IRQHandler+0x1ac>
 8003f38:	e006      	b.n	8003f48 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1da      	bne.n	8003efc <XMC_DMA_IRQHandler+0x160>
 8003f46:	e030      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
 8003f48:	e02f      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f003 0308 	and.w	r3, r3, #8
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d02a      	beq.n	8003faa <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f7ff fb8b 	bl	8003670 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 8003f5a:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003f5c:	e021      	b.n	8003fa2 <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 8003f5e:	2201      	movs	r2, #1
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d014      	beq.n	8003f9c <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	f7ff fec6 	bl	8003d0c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	69ba      	ldr	r2, [r7, #24]
 8003f86:	4413      	add	r3, r2
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2008      	movs	r0, #8
 8003f96:	4798      	blx	r3
        }

        break;
 8003f98:	e007      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
 8003f9a:	e006      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1da      	bne.n	8003f5e <XMC_DMA_IRQHandler+0x1c2>
 8003fa8:	e7ff      	b.n	8003faa <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 8003faa:	3720      	adds	r7, #32
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	50014000 	.word	0x50014000
 8003fb4:	1fff439c 	.word	0x1fff439c
 8003fb8:	1fff43bc 	.word	0x1fff43bc

08003fbc <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8003fcc:	78fb      	ldrb	r3, [r7, #3]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3204      	adds	r2, #4
 8003fe0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003fe4:	78fb      	ldrb	r3, [r7, #3]
 8003fe6:	f003 0303 	and.w	r3, r3, #3
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4619      	mov	r1, r3
 8003fee:	23f8      	movs	r3, #248	; 0xf8
 8003ff0:	408b      	lsls	r3, r1
 8003ff2:	43db      	mvns	r3, r3
 8003ff4:	ea02 0103 	and.w	r1, r2, r3
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	1d02      	adds	r2, r0, #4
 8003ffc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8004000:	78fb      	ldrb	r3, [r7, #3]
 8004002:	089b      	lsrs	r3, r3, #2
 8004004:	b2db      	uxtb	r3, r3
 8004006:	4618      	mov	r0, r3
 8004008:	78fb      	ldrb	r3, [r7, #3]
 800400a:	089b      	lsrs	r3, r3, #2
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3204      	adds	r2, #4
 8004014:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004018:	78bb      	ldrb	r3, [r7, #2]
 800401a:	78f9      	ldrb	r1, [r7, #3]
 800401c:	f001 0103 	and.w	r1, r1, #3
 8004020:	00c9      	lsls	r1, r1, #3
 8004022:	408b      	lsls	r3, r1
 8004024:	ea42 0103 	orr.w	r1, r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	1d02      	adds	r2, r0, #4
 800402c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004030:	370c      	adds	r7, #12
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop

0800403c <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	460b      	mov	r3, r1
 8004046:	70fb      	strb	r3, [r7, #3]
 8004048:	4613      	mov	r3, r2
 800404a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	005b      	lsls	r3, r3, #1
 8004054:	4619      	mov	r1, r3
 8004056:	2303      	movs	r3, #3
 8004058:	408b      	lsls	r3, r1
 800405a:	43db      	mvns	r3, r3
 800405c:	401a      	ands	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004066:	78bb      	ldrb	r3, [r7, #2]
 8004068:	78f9      	ldrb	r1, [r7, #3]
 800406a:	0049      	lsls	r1, r1, #1
 800406c:	408b      	lsls	r3, r1
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop

08004080 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004092:	b2db      	uxtb	r3, r3
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80040b6:	370c      	adds	r7, #12
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b084      	sub	sp, #16
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	4613      	mov	r3, r2
 80040cc:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fbb0 	bl	8004834 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4a11      	ldr	r2, [pc, #68]	; (800411c <XMC_I2C_CH_InitEx+0x5c>)
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	88db      	ldrh	r3, [r3, #6]
 80040de:	68f8      	ldr	r0, [r7, #12]
 80040e0:	4619      	mov	r1, r3
 80040e2:	f000 f81d 	bl	8004120 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 80040e6:	79fb      	ldrb	r3, [r7, #7]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	791b      	ldrb	r3, [r3, #4]
 80040f4:	68f8      	ldr	r0, [r7, #12]
 80040f6:	4611      	mov	r1, r2
 80040f8:	461a      	mov	r2, r3
 80040fa:	f000 f83b 	bl	8004174 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004104:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f04f 32ff 	mov.w	r2, #4294967295
 800410c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	073f0303 	.word	0x073f0303

08004120 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8004132:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8004136:	d10e      	bne.n	8004156 <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800413c:	0c1b      	lsrs	r3, r3, #16
 800413e:	041b      	lsls	r3, r3, #16
 8004140:	887a      	ldrh	r2, [r7, #2]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 8004146:	887b      	ldrh	r3, [r7, #2]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800414e:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	63da      	str	r2, [r3, #60]	; 0x3c
 8004154:	e008      	b.n	8004168 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 800415e:	887a      	ldrh	r2, [r7, #2]
 8004160:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004162:	431a      	orrs	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8004168:	370c      	adds	r7, #12
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr
 8004172:	bf00      	nop

08004174 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	60b9      	str	r1, [r7, #8]
 800417e:	4613      	mov	r3, r2
 8004180:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	4a20      	ldr	r2, [pc, #128]	; (8004208 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d819      	bhi.n	80041be <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800418e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d008      	beq.n	80041ae <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	4619      	mov	r1, r3
 80041a2:	220a      	movs	r2, #10
 80041a4:	f000 fc04 	bl	80049b0 <XMC_USIC_CH_SetBaudrateEx>
 80041a8:	4603      	mov	r3, r0
 80041aa:	75fb      	strb	r3, [r7, #23]
 80041ac:	e027      	b.n	80041fe <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	68b9      	ldr	r1, [r7, #8]
 80041b2:	220a      	movs	r2, #10
 80041b4:	f000 fb8a 	bl	80048cc <XMC_USIC_CH_SetBaudrate>
 80041b8:	4603      	mov	r3, r0
 80041ba:	75fb      	strb	r3, [r7, #23]
 80041bc:	e01f      	b.n	80041fe <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	4a12      	ldr	r2, [pc, #72]	; (800420c <XMC_I2C_CH_SetBaudrateEx+0x98>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d819      	bhi.n	80041fa <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	4619      	mov	r1, r3
 80041de:	2219      	movs	r2, #25
 80041e0:	f000 fbe6 	bl	80049b0 <XMC_USIC_CH_SetBaudrateEx>
 80041e4:	4603      	mov	r3, r0
 80041e6:	75fb      	strb	r3, [r7, #23]
 80041e8:	e009      	b.n	80041fe <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	2219      	movs	r2, #25
 80041f0:	f000 fb6c 	bl	80048cc <XMC_USIC_CH_SetBaudrate>
 80041f4:	4603      	mov	r3, r0
 80041f6:	75fb      	strb	r3, [r7, #23]
 80041f8:	e001      	b.n	80041fe <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	000186a0 	.word	0x000186a0
 800420c:	00061a80 	.word	0x00061a80

08004210 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	807b      	strh	r3, [r7, #2]
 800421c:	4613      	mov	r3, r2
 800421e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8004220:	887b      	ldrh	r3, [r7, #2]
 8004222:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004226:	b29b      	uxth	r3, r3
 8004228:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800422a:	787b      	ldrb	r3, [r7, #1]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d103      	bne.n	8004238 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800423e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d110      	bne.n	8004268 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004246:	bf00      	nop
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff19 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 800424e:	4603      	mov	r3, r0
 8004250:	2b80      	cmp	r3, #128	; 0x80
 8004252:	d0f9      	beq.n	8004248 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800425a:	f7ff ff21 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004266:	e003      	b.n	8004270 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004270:	3710      	adds	r7, #16
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	807b      	strh	r3, [r7, #2]
 8004284:	4613      	mov	r3, r2
 8004286:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8004288:	887b      	ldrh	r3, [r7, #2]
 800428a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800428e:	b29b      	uxth	r3, r3
 8004290:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8004292:	787b      	ldrb	r3, [r7, #1]
 8004294:	2b01      	cmp	r3, #1
 8004296:	d103      	bne.n	80042a0 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f043 0301 	orr.w	r3, r3, #1
 800429e:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d110      	bne.n	80042d0 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80042ae:	bf00      	nop
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f7ff fee5 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b80      	cmp	r3, #128	; 0x80
 80042ba:	d0f9      	beq.n	80042b0 <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80042c2:	f7ff feed 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80042ce:	e003      	b.n	80042d8 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80042d8:	3710      	adds	r7, #16
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop

080042e0 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80042ee:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d111      	bne.n	800431a <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80042f6:	bf00      	nop
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fec1 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 80042fe:	4603      	mov	r3, r0
 8004300:	2b80      	cmp	r3, #128	; 0x80
 8004302:	d0f9      	beq.n	80042f8 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004304:	6878      	ldr	r0, [r7, #4]
 8004306:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800430a:	f7ff fec9 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004318:	e004      	b.n	8004324 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004320:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop

0800432c <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800433e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d110      	bne.n	8004368 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004346:	bf00      	nop
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f7ff fe99 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 800434e:	4603      	mov	r3, r0
 8004350:	2b80      	cmp	r3, #128	; 0x80
 8004352:	d0f9      	beq.n	8004348 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800435a:	f7ff fea1 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004366:	e003      	b.n	8004370 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop

08004378 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b082      	sub	sp, #8
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004386:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800438a:	2b00      	cmp	r3, #0
 800438c:	d111      	bne.n	80043b2 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800438e:	bf00      	nop
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f7ff fe75 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004396:	4603      	mov	r3, r0
 8004398:	2b80      	cmp	r3, #128	; 0x80
 800439a:	d0f9      	beq.n	8004390 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043a2:	f7ff fe7d 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80043b0:	e004      	b.n	80043bc <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043b8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop

080043c4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b082      	sub	sp, #8
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043d2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d111      	bne.n	80043fe <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80043da:	bf00      	nop
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fe4f 	bl	8004080 <XMC_USIC_CH_GetTransmitBufferStatus>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b80      	cmp	r3, #128	; 0x80
 80043e6:	d0f9      	beq.n	80043dc <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043ee:	f7ff fe57 	bl	80040a0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80043f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80043fc:	e004      	b.n	8004408 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004404:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop

08004410 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800441e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d103      	bne.n	800442e <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	73fb      	strb	r3, [r7, #15]
 800442c:	e003      	b.n	8004436 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004434:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8004436:	7bfb      	ldrb	r3, [r7, #15]
}
 8004438:	4618      	mov	r0, r3
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8004448:	4b03      	ldr	r3, [pc, #12]	; (8004458 <XMC_SCU_GetMirrorStatus+0x14>)
 800444a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800444e:	4618      	mov	r0, r3
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr
 8004458:	50004000 	.word	0x50004000

0800445c <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004460:	bf00      	nop
 8004462:	f7ff ffef 	bl	8004444 <XMC_SCU_GetMirrorStatus>
 8004466:	4603      	mov	r3, r0
 8004468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f8      	bne.n	8004462 <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8004470:	4a03      	ldr	r2, [pc, #12]	; (8004480 <XMC_RTC_Start+0x24>)
 8004472:	4b03      	ldr	r3, [pc, #12]	; (8004480 <XMC_RTC_Start+0x24>)
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	f043 0301 	orr.w	r3, r3, #1
 800447a:	6053      	str	r3, [r2, #4]
}
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	50004a00 	.word	0x50004a00

08004484 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004488:	bf00      	nop
 800448a:	f7ff ffdb 	bl	8004444 <XMC_SCU_GetMirrorStatus>
 800448e:	4603      	mov	r3, r0
 8004490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004494:	2b00      	cmp	r3, #0
 8004496:	d1f8      	bne.n	800448a <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 8004498:	4a03      	ldr	r2, [pc, #12]	; (80044a8 <XMC_RTC_Stop+0x24>)
 800449a:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <XMC_RTC_Stop+0x24>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	f023 0301 	bic.w	r3, r3, #1
 80044a2:	6053      	str	r3, [r2, #4]
}
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	50004a00 	.word	0x50004a00

080044ac <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	4603      	mov	r3, r0
 80044b4:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80044b6:	bf00      	nop
 80044b8:	f7ff ffc4 	bl	8004444 <XMC_SCU_GetMirrorStatus>
 80044bc:	4603      	mov	r3, r0
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1f8      	bne.n	80044b8 <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80044c6:	4905      	ldr	r1, [pc, #20]	; (80044dc <XMC_RTC_SetPrescaler+0x30>)
 80044c8:	4b04      	ldr	r3, [pc, #16]	; (80044dc <XMC_RTC_SetPrescaler+0x30>)
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 80044ce:	88fb      	ldrh	r3, [r7, #6]
 80044d0:	041b      	lsls	r3, r3, #16

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80044d2:	4313      	orrs	r3, r2
 80044d4:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 80044d6:	3708      	adds	r7, #8
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	50004a00 	.word	0x50004a00

080044e0 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

#if (XMC_RTC_INIT_SEQUENCE == 1U)
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80044e8:	bf00      	nop
 80044ea:	f7ff ffab 	bl	8004444 <XMC_SCU_GetMirrorStatus>
 80044ee:	4603      	mov	r3, r0
 80044f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1f8      	bne.n	80044ea <XMC_RTC_SetTime+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
 80044f8:	4a09      	ldr	r2, [pc, #36]	; (8004520 <XMC_RTC_SetTime+0x40>)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	6213      	str	r3, [r2, #32]

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8004500:	bf00      	nop
 8004502:	f7ff ff9f 	bl	8004444 <XMC_SCU_GetMirrorStatus>
 8004506:	4603      	mov	r3, r0
 8004508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d1f8      	bne.n	8004502 <XMC_RTC_SetTime+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM1 = time->raw1;
 8004510:	4a03      	ldr	r2, [pc, #12]	; (8004520 <XMC_RTC_SetTime+0x40>)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	6253      	str	r3, [r2, #36]	; 0x24
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
  RTC->TIM1 = time->raw1;	;
#endif
}
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	50004a00 	.word	0x50004a00

08004524 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 800452c:	4b06      	ldr	r3, [pc, #24]	; (8004548 <XMC_RTC_GetTime+0x24>)
 800452e:	6a1a      	ldr	r2, [r3, #32]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 8004534:	4b04      	ldr	r3, [pc, #16]	; (8004548 <XMC_RTC_GetTime+0x24>)
 8004536:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	605a      	str	r2, [r3, #4]
}
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr
 8004546:	bf00      	nop
 8004548:	50004a00 	.word	0x50004a00

0800454c <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	4613      	mov	r3, r2
 8004558:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 f96a 	bl	8004834 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	795b      	ldrb	r3, [r3, #5]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d115      	bne.n	8004594 <XMC_SPI_CH_InitEx+0x48>
 8004568:	79fb      	ldrb	r3, [r7, #7]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d012      	beq.n	8004594 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	791b      	ldrb	r3, [r3, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d007      	beq.n	8004586 <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68f8      	ldr	r0, [r7, #12]
 800457c:	4619      	mov	r1, r3
 800457e:	2202      	movs	r2, #2
 8004580:	f000 fa16 	bl	80049b0 <XMC_USIC_CH_SetBaudrateEx>
 8004584:	e006      	b.n	8004594 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	4619      	mov	r1, r3
 800458e:	2202      	movs	r2, #2
 8004590:	f000 f99c 	bl	80048cc <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4a0f      	ldr	r2, [pc, #60]	; (80045d4 <XMC_SPI_CH_InitEx+0x88>)
 8004598:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80045a0:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	795b      	ldrb	r3, [r3, #5]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d107      	bne.n	80045ba <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80045ae:	f043 030b 	orr.w	r3, r3, #11
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f04f 32ff 	mov.w	r2, #4294967295
 80045c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	891b      	ldrh	r3, [r3, #8]
 80045c6:	461a      	mov	r2, r3
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80045cc:	3710      	adds	r7, #16
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	073f0102 	.word	0x073f0102

080045d8 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	431a      	orrs	r2, r3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004612:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d103      	bne.n	8004622 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461e:	81fb      	strh	r3, [r7, #14]
 8004620:	e003      	b.n	800462a <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004628:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800462a:	89fb      	ldrh	r3, [r7, #14]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800464c:	431a      	orrs	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	035b      	lsls	r3, r3, #13
 800465a:	b29b      	uxth	r3, r3
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
 8004674:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	035b      	lsls	r3, r3, #13
 8004690:	b29b      	uxth	r3, r3
 8004692:	43db      	mvns	r3, r3
 8004694:	401a      	ands	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046b6:	b2db      	uxtb	r3, r3
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
 80046cc:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop

080046e0 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b086      	sub	sp, #24
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	4613      	mov	r3, r2
 80046ec:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 80046ee:	2310      	movs	r3, #16
 80046f0:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 80046f2:	68f8      	ldr	r0, [r7, #12]
 80046f4:	f000 f89e 	bl	8004834 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	7a1b      	ldrb	r3, [r3, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d002      	beq.n	8004706 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	7a1b      	ldrb	r3, [r3, #8]
 8004704:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d014      	beq.n	8004736 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	791b      	ldrb	r3, [r3, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d009      	beq.n	8004728 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	4611      	mov	r1, r2
 8004720:	461a      	mov	r2, r3
 8004722:	f000 f945 	bl	80049b0 <XMC_USIC_CH_SetBaudrateEx>
 8004726:	e006      	b.n	8004736 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	4619      	mov	r1, r3
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	f000 f8cb 	bl	80048cc <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	79db      	ldrb	r3, [r3, #7]
 800473a:	3b01      	subs	r3, #1
 800473c:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	085b      	lsrs	r3, r3, #1
 8004742:	3301      	adds	r3, #1
 8004744:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004746:	4313      	orrs	r3, r2
 8004748:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800474c:	f043 0301 	orr.w	r3, r3, #1
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	795b      	ldrb	r3, [r3, #5]
 8004758:	3b01      	subs	r3, #1
 800475a:	061b      	lsls	r3, r3, #24
 800475c:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	799b      	ldrb	r3, [r3, #6]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d009      	beq.n	8004780 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	799b      	ldrb	r3, [r3, #6]
 8004774:	3b01      	subs	r3, #1
 8004776:	041b      	lsls	r3, r3, #16
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	635a      	str	r2, [r3, #52]	; 0x34
 800477e:	e008      	b.n	8004792 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	795b      	ldrb	r3, [r3, #5]
 8004788:	3b01      	subs	r3, #1
 800478a:	041b      	lsls	r3, r3, #16
 800478c:	431a      	orrs	r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004798:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f04f 32ff 	mov.w	r2, #4294967295
 80047a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	895b      	ldrh	r3, [r3, #10]
 80047a6:	461a      	mov	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	641a      	str	r2, [r3, #64]	; 0x40
}
 80047ac:	3718      	adds	r7, #24
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop

080047b4 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	460b      	mov	r3, r1
 80047be:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80047c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d110      	bne.n	80047f0 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80047ce:	bf00      	nop
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7ff ff67 	bl	80046a4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b80      	cmp	r3, #128	; 0x80
 80047da:	d0f9      	beq.n	80047d0 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80047e2:	f7ff ff6f 	bl	80046c4 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 80047e6:	887a      	ldrh	r2, [r7, #2]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80047ee:	e003      	b.n	80047f8 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 80047f0:	887a      	ldrh	r2, [r7, #2]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop

08004800 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800480e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	81fb      	strh	r3, [r7, #14]
 800481c:	e003      	b.n	8004826 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004824:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8004826:	89fb      	ldrh	r3, [r7, #14]
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b082      	sub	sp, #8
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a1a      	ldr	r2, [pc, #104]	; (80048a8 <XMC_USIC_CH_Enable+0x74>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d003      	beq.n	800484c <XMC_USIC_CH_Enable+0x18>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a19      	ldr	r2, [pc, #100]	; (80048ac <XMC_USIC_CH_Enable+0x78>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d103      	bne.n	8004854 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800484c:	4818      	ldr	r0, [pc, #96]	; (80048b0 <XMC_USIC_CH_Enable+0x7c>)
 800484e:	f000 f99d 	bl	8004b8c <XMC_USIC_Enable>
 8004852:	e016      	b.n	8004882 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	4a17      	ldr	r2, [pc, #92]	; (80048b4 <XMC_USIC_CH_Enable+0x80>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d003      	beq.n	8004864 <XMC_USIC_CH_Enable+0x30>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a16      	ldr	r2, [pc, #88]	; (80048b8 <XMC_USIC_CH_Enable+0x84>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d103      	bne.n	800486c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8004864:	4815      	ldr	r0, [pc, #84]	; (80048bc <XMC_USIC_CH_Enable+0x88>)
 8004866:	f000 f991 	bl	8004b8c <XMC_USIC_Enable>
 800486a:	e00a      	b.n	8004882 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a14      	ldr	r2, [pc, #80]	; (80048c0 <XMC_USIC_CH_Enable+0x8c>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d003      	beq.n	800487c <XMC_USIC_CH_Enable+0x48>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a13      	ldr	r2, [pc, #76]	; (80048c4 <XMC_USIC_CH_Enable+0x90>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d102      	bne.n	8004882 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800487c:	4812      	ldr	r0, [pc, #72]	; (80048c8 <XMC_USIC_CH_Enable+0x94>)
 800487e:	f000 f985 	bl	8004b8c <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2203      	movs	r2, #3
 8004886:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8004888:	bf00      	nop
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d0f9      	beq.n	800488a <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f023 020f 	bic.w	r2, r3, #15
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048a2:	3708      	adds	r7, #8
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40030000 	.word	0x40030000
 80048ac:	40030200 	.word	0x40030200
 80048b0:	40030008 	.word	0x40030008
 80048b4:	48020000 	.word	0x48020000
 80048b8:	48020200 	.word	0x48020200
 80048bc:	48020008 	.word	0x48020008
 80048c0:	48024000 	.word	0x48024000
 80048c4:	48024200 	.word	0x48024200
 80048c8:	48024008 	.word	0x48024008

080048cc <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08e      	sub	sp, #56	; 0x38
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	2b63      	cmp	r3, #99	; 0x63
 80048dc:	d95a      	bls.n	8004994 <XMC_USIC_CH_SetBaudrate+0xc8>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d057      	beq.n	8004994 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 80048e4:	f7fd fce8 	bl	80022b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b2f      	ldr	r3, [pc, #188]	; (80049a8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80048ec:	fba3 2302 	umull	r2, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	4a2c      	ldr	r2, [pc, #176]	; (80049a8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 80048f8:	fba2 2303 	umull	r2, r3, r2, r3
 80048fc:	095b      	lsrs	r3, r3, #5
 80048fe:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8004900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8004906:	2301      	movs	r3, #1
 8004908:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 800490a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800490e:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004910:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004914:	633b      	str	r3, [r7, #48]	; 0x30
 8004916:	e022      	b.n	800495e <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8004918:	6a3b      	ldr	r3, [r7, #32]
 800491a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800491c:	fb02 f203 	mul.w	r2, r2, r3
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	6879      	ldr	r1, [r7, #4]
 8004924:	fb01 f303 	mul.w	r3, r1, r3
 8004928:	fbb2 f3f3 	udiv	r3, r2, r3
 800492c:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	0a9b      	lsrs	r3, r3, #10
 8004932:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800493a:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004942:	d809      	bhi.n	8004958 <XMC_USIC_CH_SetBaudrate+0x8c>
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	429a      	cmp	r2, r3
 800494a:	d205      	bcs.n	8004958 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8004954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004956:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004958:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800495a:	3b01      	subs	r3, #1
 800495c:	633b      	str	r3, [r7, #48]	; 0x30
 800495e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1d9      	bne.n	8004918 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8004964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004966:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8004968:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <XMC_USIC_CH_SetBaudrate+0xe0>)
 8004976:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	3a01      	subs	r2, #1
 800497c:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 800497e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8004980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004982:	3b01      	subs	r3, #1
 8004984:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004986:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004992:	e002      	b.n	800499a <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 800499a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3738      	adds	r7, #56	; 0x38
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	51eb851f 	.word	0x51eb851f
 80049ac:	fc0080ef 	.word	0xfc0080ef

080049b0 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b08c      	sub	sp, #48	; 0x30
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	60b9      	str	r1, [r7, #8]
 80049ba:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 80049bc:	f7fd fc7c 	bl	80022b8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 80049c0:	4603      	mov	r3, r0
 80049c2:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	fb02 f303 	mul.w	r3, r2, r3
 80049cc:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 80049ce:	2301      	movs	r3, #1
 80049d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 80049d2:	6a3a      	ldr	r2, [r7, #32]
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	dd5f      	ble.n	8004a9a <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80049da:	6a3a      	ldr	r2, [r7, #32]
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	fb92 f3f3 	sdiv	r3, r2, r3
 80049e2:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 80049e4:	e010      	b.n	8004a08 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 80049e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049e8:	3301      	adds	r3, #1
 80049ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	fb02 f303 	mul.w	r3, r2, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f8:	fb03 f302 	mul.w	r3, r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	fb92 f3f3 	sdiv	r3, r2, r3
 8004a06:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8004a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a0a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d8e9      	bhi.n	80049e6 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8004a12:	6a3a      	ldr	r2, [r7, #32]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a18:	fb01 f303 	mul.w	r3, r1, r3
 8004a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a1e:	fb01 f303 	mul.w	r3, r1, r3
 8004a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a26:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8004a28:	6a3a      	ldr	r2, [r7, #32]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	fb01 f303 	mul.w	r3, r1, r3
 8004a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a36:	fb01 f303 	mul.w	r3, r1, r3
 8004a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a3e:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004a4a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	1acb      	subs	r3, r1, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bfb8      	it	lt
 8004a58:	425b      	neglt	r3, r3
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	da02      	bge.n	8004a64 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	3301      	adds	r3, #1
 8004a62:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004a6a:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	695a      	ldr	r2, [r3, #20]
 8004a7a:	4b0c      	ldr	r3, [pc, #48]	; (8004aac <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8004a7c:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	3a01      	subs	r2, #1
 8004a82:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004a84:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8004a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004a8c:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004a98:	e002      	b.n	8004aa0 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8004aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3730      	adds	r7, #48	; 0x30
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fc0080ef 	.word	0xfc0080ef

08004ab0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b085      	sub	sp, #20
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	60f8      	str	r0, [r7, #12]
 8004ab8:	60b9      	str	r1, [r7, #8]
 8004aba:	603b      	str	r3, [r7, #0]
 8004abc:	4613      	mov	r3, r2
 8004abe:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004ac6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004ad6:	4b09      	ldr	r3, [pc, #36]	; (8004afc <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8004ad8:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	0211      	lsls	r1, r2, #8
 8004ade:	68ba      	ldr	r2, [r7, #8]
 8004ae0:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8004ae2:	79fa      	ldrb	r2, [r7, #7]
 8004ae4:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004ae6:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8004ae8:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8004af0:	3714      	adds	r7, #20
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	f8ffc0c0 	.word	0xf8ffc0c0

08004b00 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	603b      	str	r3, [r7, #0]
 8004b0c:	4613      	mov	r3, r2
 8004b0e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004b16:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004b26:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8004b28:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004b2a:	683a      	ldr	r2, [r7, #0]
 8004b2c:	0211      	lsls	r1, r2, #8
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8004b32:	79fa      	ldrb	r2, [r7, #7]
 8004b34:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8004b36:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8004b44:	3714      	adds	r7, #20
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
 8004b4e:	bf00      	nop
 8004b50:	efffc0c0 	.word	0xefffc0c0

08004b54 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b085      	sub	sp, #20
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	460b      	mov	r3, r1
 8004b5e:	607a      	str	r2, [r7, #4]
 8004b60:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	7afb      	ldrb	r3, [r7, #11]
 8004b68:	2107      	movs	r1, #7
 8004b6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b6e:	43db      	mvns	r3, r3
 8004b70:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8004b72:	7afb      	ldrb	r3, [r7, #11]
 8004b74:	6879      	ldr	r1, [r7, #4]
 8004b76:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8004b80:	3714      	adds	r7, #20
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop

08004b8c <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a28      	ldr	r2, [pc, #160]	; (8004c38 <XMC_USIC_Enable+0xac>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d118      	bne.n	8004bce <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8004b9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ba0:	f7fd fcce 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8004ba4:	bf00      	nop
 8004ba6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004baa:	f7fd fce5 	bl	8002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d1f8      	bne.n	8004ba6 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8004bb4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bb8:	f7fd fb3e 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8004bbc:	bf00      	nop
 8004bbe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bc2:	f7fd fb55 	bl	8002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1f8      	bne.n	8004bbe <XMC_USIC_Enable+0x32>
 8004bcc:	e030      	b.n	8004c30 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a1a      	ldr	r2, [pc, #104]	; (8004c3c <XMC_USIC_Enable+0xb0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d114      	bne.n	8004c00 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8004bd6:	481a      	ldr	r0, [pc, #104]	; (8004c40 <XMC_USIC_Enable+0xb4>)
 8004bd8:	f7fd fcb2 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8004bdc:	bf00      	nop
 8004bde:	4818      	ldr	r0, [pc, #96]	; (8004c40 <XMC_USIC_Enable+0xb4>)
 8004be0:	f7fd fcca 	bl	8002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f9      	bne.n	8004bde <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8004bea:	4815      	ldr	r0, [pc, #84]	; (8004c40 <XMC_USIC_Enable+0xb4>)
 8004bec:	f7fd fb24 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8004bf0:	bf00      	nop
 8004bf2:	4813      	ldr	r0, [pc, #76]	; (8004c40 <XMC_USIC_Enable+0xb4>)
 8004bf4:	f7fd fb3c 	bl	8002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1f9      	bne.n	8004bf2 <XMC_USIC_Enable+0x66>
 8004bfe:	e017      	b.n	8004c30 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a10      	ldr	r2, [pc, #64]	; (8004c44 <XMC_USIC_Enable+0xb8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d113      	bne.n	8004c30 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8004c08:	480f      	ldr	r0, [pc, #60]	; (8004c48 <XMC_USIC_Enable+0xbc>)
 8004c0a:	f7fd fc99 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8004c0e:	bf00      	nop
 8004c10:	480d      	ldr	r0, [pc, #52]	; (8004c48 <XMC_USIC_Enable+0xbc>)
 8004c12:	f7fd fcb1 	bl	8002578 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1f9      	bne.n	8004c10 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8004c1c:	480a      	ldr	r0, [pc, #40]	; (8004c48 <XMC_USIC_Enable+0xbc>)
 8004c1e:	f7fd fb0b 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8004c22:	bf00      	nop
 8004c24:	4808      	ldr	r0, [pc, #32]	; (8004c48 <XMC_USIC_Enable+0xbc>)
 8004c26:	f7fd fb23 	bl	8002270 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1f9      	bne.n	8004c24 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8004c30:	3708      	adds	r7, #8
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40030008 	.word	0x40030008
 8004c3c:	48020008 	.word	0x48020008
 8004c40:	10000080 	.word	0x10000080
 8004c44:	48024008 	.word	0x48024008
 8004c48:	10000100 	.word	0x10000100

08004c4c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8004c50:	2020      	movs	r0, #32
 8004c52:	f7fd fc65 	bl	8002520 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
 8004c56:	4803      	ldr	r0, [pc, #12]	; (8004c64 <XMC_WDT_Enable+0x18>)
 8004c58:	f7fd fc72 	bl	8002540 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8004c5c:	4801      	ldr	r0, [pc, #4]	; (8004c64 <XMC_WDT_Enable+0x18>)
 8004c5e:	f7fd faeb 	bl	8002238 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20000002 	.word	0x20000002

08004c68 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8004c70:	f7ff ffec 	bl	8004c4c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8004c74:	4a07      	ldr	r2, [pc, #28]	; (8004c94 <XMC_WDT_Init+0x2c>)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8004c7c:	4a05      	ldr	r2, [pc, #20]	; (8004c94 <XMC_WDT_Init+0x2c>)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8004c84:	4a03      	ldr	r2, [pc, #12]	; (8004c94 <XMC_WDT_Init+0x2c>)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6153      	str	r3, [r2, #20]
}
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	50008000 	.word	0x50008000

08004c98 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b084      	sub	sp, #16
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004ca0:	4b14      	ldr	r3, [pc, #80]	; (8004cf4 <_sbrk+0x5c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8004ca8:	4b12      	ldr	r3, [pc, #72]	; (8004cf4 <_sbrk+0x5c>)
 8004caa:	4a13      	ldr	r2, [pc, #76]	; (8004cf8 <_sbrk+0x60>)
 8004cac:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8004cae:	4b11      	ldr	r3, [pc, #68]	; (8004cf4 <_sbrk+0x5c>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	3303      	adds	r3, #3
 8004cb8:	f023 0303 	bic.w	r3, r3, #3
 8004cbc:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004cbe:	4b0d      	ldr	r3, [pc, #52]	; (8004cf4 <_sbrk+0x5c>)
 8004cc0:	681a      	ldr	r2, [r3, #0]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4a0d      	ldr	r2, [pc, #52]	; (8004cfc <_sbrk+0x64>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d207      	bcs.n	8004cdc <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <_sbrk+0x5c>)
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	4a07      	ldr	r2, [pc, #28]	; (8004cf4 <_sbrk+0x5c>)
 8004cd6:	6013      	str	r3, [r2, #0]
    return (base);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	e006      	b.n	8004cea <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8004cdc:	f00c fc8e 	bl	80115fc <__errno>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	230c      	movs	r3, #12
 8004ce4:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8004ce6:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3710      	adds	r7, #16
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	1fff43cc 	.word	0x1fff43cc
 8004cf8:	20000000 	.word	0x20000000
 8004cfc:	2003ffc0 	.word	0x2003ffc0

08004d00 <_init>:

/* Init */
void _init(void)
{}
 8004d00:	b480      	push	{r7}
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <IOExp_Configure>:
}

/* Configures pin input and output for corresponding ports as provided in port0 and port1 parameter */
/* IOExp_address is the device address, e.g. 0x40 */
void IOExp_Configure(I2C_MASTER_t *handle, uint8_t IOExp_address, uint8_t port0, uint8_t port1)
{
 8004d0c:	b590      	push	{r4, r7, lr}
 8004d0e:	b093      	sub	sp, #76	; 0x4c
 8004d10:	af02      	add	r7, sp, #8
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	4608      	mov	r0, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	461a      	mov	r2, r3
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	70fb      	strb	r3, [r7, #3]
 8004d1e:	460b      	mov	r3, r1
 8004d20:	70bb      	strb	r3, [r7, #2]
 8004d22:	4613      	mov	r3, r2
 8004d24:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t data_ptr[20] = {0}, data_RxPtr[20] = {0}, CMD;
 8004d32:	f107 031c 	add.w	r3, r7, #28
 8004d36:	2200      	movs	r2, #0
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	3304      	adds	r3, #4
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	3304      	adds	r3, #4
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
 8004d46:	3304      	adds	r3, #4
 8004d48:	2200      	movs	r2, #0
 8004d4a:	601a      	str	r2, [r3, #0]
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	3304      	adds	r3, #4
 8004d54:	f107 0308 	add.w	r3, r7, #8
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	2200      	movs	r2, #0
 8004d60:	601a      	str	r2, [r3, #0]
 8004d62:	3304      	adds	r3, #4
 8004d64:	2200      	movs	r2, #0
 8004d66:	601a      	str	r2, [r3, #0]
 8004d68:	3304      	adds	r3, #4
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	601a      	str	r2, [r3, #0]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]
 8004d74:	3304      	adds	r3, #4
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8004d76:	2301      	movs	r3, #1
 8004d78:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	bool test_result = false;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t pass_count=0;
 8004d82:	2300      	movs	r3, #0
 8004d84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/*********************************************TEST port 0 output, port 1 input ************************************************/
	/* Configure port 0 */
	CMD = CONFIG_REG_PORT0;
 8004d88:	2306      	movs	r3, #6
 8004d8a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	data_ptr[0] = CMD;
 8004d8e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004d92:	773b      	strb	r3, [r7, #28]
	data_ptr[1] = port0; // data to port 0
 8004d94:	78bb      	ldrb	r3, [r7, #2]
 8004d96:	777b      	strb	r3, [r7, #29]
	data_ptr[2] = port1; // data to port 1
 8004d98:	787b      	ldrb	r3, [r7, #1]
 8004d9a:	77bb      	strb	r3, [r7, #30]
	data_count = 3;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	633b      	str	r3, [r7, #48]	; 0x30

	for(int i = 0; i < 0xffff; i++);
 8004da0:	2300      	movs	r3, #0
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004da4:	e002      	b.n	8004dac <IOExp_Configure+0xa0>
 8004da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004da8:	3301      	adds	r3, #1
 8004daa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004db2:	4293      	cmp	r3, r2
 8004db4:	ddf7      	ble.n	8004da6 <IOExp_Configure+0x9a>
	/* Set Port 0 as output and port 1 as input */
	I2C_MASTER_Transmit(handle, send_start, IOExp_address/*I2C_SLAVE_ADDRESS*/, &data_ptr[0], data_count, send_stop);
 8004db6:	78fa      	ldrb	r2, [r7, #3]
 8004db8:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8004dbc:	f107 041c 	add.w	r4, r7, #28
 8004dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc2:	9300      	str	r3, [sp, #0]
 8004dc4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	4623      	mov	r3, r4
 8004dce:	f002 fe77 	bl	8007ac0 <I2C_MASTER_Transmit>
}
 8004dd2:	3744      	adds	r7, #68	; 0x44
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd90      	pop	{r4, r7, pc}

08004dd8 <IOExp_SetPIN_UPDATE>:

/* Internal function to set a pin high or low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_UPDATE(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin, bool pin_level)
{
 8004dd8:	b590      	push	{r4, r7, lr}
 8004dda:	b091      	sub	sp, #68	; 0x44
 8004ddc:	af04      	add	r7, sp, #16
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	4608      	mov	r0, r1
 8004de2:	4611      	mov	r1, r2
 8004de4:	461a      	mov	r2, r3
 8004de6:	4603      	mov	r3, r0
 8004de8:	70fb      	strb	r3, [r7, #3]
 8004dea:	460b      	mov	r3, r1
 8004dec:	70bb      	strb	r3, [r7, #2]
 8004dee:	4613      	mov	r3, r2
 8004df0:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8004df2:	2301      	movs	r3, #1
 8004df4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004df8:	2301      	movs	r3, #1
 8004dfa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, data_Rx[2] = {0}, CMD;
 8004dfe:	f107 030c 	add.w	r3, r7, #12
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
 8004e06:	3304      	adds	r3, #4
 8004e08:	2200      	movs	r2, #0
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	3304      	adds	r3, #4
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	3304      	adds	r3, #4
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	3304      	adds	r3, #4
 8004e20:	2300      	movs	r3, #0
 8004e22:	813b      	strh	r3, [r7, #8]
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8004e24:	2301      	movs	r3, #1
 8004e26:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(0 == port)
 8004e2a:	78bb      	ldrb	r3, [r7, #2]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <IOExp_SetPIN_UPDATE+0x60>
	{
		/* Read port 0 configuration */
		CMD = OUTPUT_REG_PORT0;
 8004e30:	2302      	movs	r3, #2
 8004e32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004e36:	e002      	b.n	8004e3e <IOExp_SetPIN_UPDATE+0x66>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = OUTPUT_REG_PORT1;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 8004e3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004e42:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	623b      	str	r3, [r7, #32]

	send_stop = false;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port 0 */
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8004e4e:	78fa      	ldrb	r2, [r7, #3]
 8004e50:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004e54:	f107 040c 	add.w	r4, r7, #12
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e60:	9301      	str	r3, [sp, #4]
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	4623      	mov	r3, r4
 8004e66:	f002 fe2b 	bl	8007ac0 <I2C_MASTER_Transmit>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8004e70:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d15d      	bne.n	8004f34 <IOExp_SetPIN_UPDATE+0x15c>
	{
		//send_start = true;
		send_start = true;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* Read Port 1 pins */
	//	I2C_status = I2C_MASTER_Receive(&I2C_MASTER_0, send_start, IOExp_Address, &data_Rx[0], data_count, send_stop, true);
		//data_count = 2;
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, &data_ptr[1], data_count, send_stop, true);
 8004e84:	78fa      	ldrb	r2, [r7, #3]
 8004e86:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004e8a:	f107 030c 	add.w	r3, r7, #12
 8004e8e:	1c5c      	adds	r4, r3, #1
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	9300      	str	r3, [sp, #0]
 8004e94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004e98:	9301      	str	r3, [sp, #4]
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	9302      	str	r3, [sp, #8]
 8004e9e:	6878      	ldr	r0, [r7, #4]
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	f002 fe37 	bl	8007b14 <I2C_MASTER_Receive>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8004eac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d13f      	bne.n	8004f34 <IOExp_SetPIN_UPDATE+0x15c>
		{
			if(PIN_HIGH == pin_level)
 8004eb4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00c      	beq.n	8004ed6 <IOExp_SetPIN_UPDATE+0xfe>
			{
				/* Update output register value */
				data_ptr[1] |= /*data_Rx[0] |*/ (1 << pin);
 8004ebc:	7b7b      	ldrb	r3, [r7, #13]
 8004ebe:	b2d9      	uxtb	r1, r3
 8004ec0:	787b      	ldrb	r3, [r7, #1]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	460a      	mov	r2, r1
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	737b      	strb	r3, [r7, #13]
 8004ed4:	e00d      	b.n	8004ef2 <IOExp_SetPIN_UPDATE+0x11a>
			}
			else
			{
				/* Update output register value */
				data_ptr[1] &= /*data_Rx[0] &*/ (~(1 << pin));
 8004ed6:	7b7b      	ldrb	r3, [r7, #13]
 8004ed8:	b2d9      	uxtb	r1, r3
 8004eda:	787b      	ldrb	r3, [r7, #1]
 8004edc:	2201      	movs	r2, #1
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	43db      	mvns	r3, r3
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	460a      	mov	r2, r1
 8004eea:	4013      	ands	r3, r2
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	737b      	strb	r3, [r7, #13]
			}

			data_count = 2;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	623b      	str	r3, [r7, #32]
			send_start = true;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			for(int i= 0; i < 0xffff; i++);
 8004efc:	2300      	movs	r3, #0
 8004efe:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f00:	e002      	b.n	8004f08 <IOExp_SetPIN_UPDATE+0x130>
 8004f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f04:	3301      	adds	r3, #1
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	ddf7      	ble.n	8004f02 <IOExp_SetPIN_UPDATE+0x12a>
			/* update pin */
			I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8004f12:	78fa      	ldrb	r2, [r7, #3]
 8004f14:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004f18:	f107 040c 	add.w	r4, r7, #12
 8004f1c:	6a3b      	ldr	r3, [r7, #32]
 8004f1e:	9300      	str	r3, [sp, #0]
 8004f20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f24:	9301      	str	r3, [sp, #4]
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4623      	mov	r3, r4
 8004f2a:	f002 fdc9 	bl	8007ac0 <I2C_MASTER_Transmit>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			/* data is expected to be successfully written at this point */
		}
	}

	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8004f34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d101      	bne.n	8004f40 <IOExp_SetPIN_UPDATE+0x168>
		return true;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e000      	b.n	8004f42 <IOExp_SetPIN_UPDATE+0x16a>
	else
		return false;
 8004f40:	2300      	movs	r3, #0
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3734      	adds	r7, #52	; 0x34
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd90      	pop	{r4, r7, pc}
 8004f4a:	bf00      	nop

08004f4c <IOExp_SetPIN_HIGH>:

/* Function to set a pin high for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_HIGH(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 8004f4c:	b590      	push	{r4, r7, lr}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	4608      	mov	r0, r1
 8004f56:	4611      	mov	r1, r2
 8004f58:	461a      	mov	r2, r3
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	70fb      	strb	r3, [r7, #3]
 8004f5e:	460b      	mov	r3, r1
 8004f60:	70bb      	strb	r3, [r7, #2]
 8004f62:	4613      	mov	r3, r2
 8004f64:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_HIGH);
 8004f66:	78f9      	ldrb	r1, [r7, #3]
 8004f68:	78ba      	ldrb	r2, [r7, #2]
 8004f6a:	787c      	ldrb	r4, [r7, #1]
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4623      	mov	r3, r4
 8004f74:	f7ff ff30 	bl	8004dd8 <IOExp_SetPIN_UPDATE>
 8004f78:	4603      	mov	r3, r0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd90      	pop	{r4, r7, pc}
 8004f82:	bf00      	nop

08004f84 <IOExp_SetPIN_LOW>:

/* Function to set a pin low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_LOW(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 8004f84:	b590      	push	{r4, r7, lr}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af02      	add	r7, sp, #8
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	4608      	mov	r0, r1
 8004f8e:	4611      	mov	r1, r2
 8004f90:	461a      	mov	r2, r3
 8004f92:	4603      	mov	r3, r0
 8004f94:	70fb      	strb	r3, [r7, #3]
 8004f96:	460b      	mov	r3, r1
 8004f98:	70bb      	strb	r3, [r7, #2]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_LOW);
 8004f9e:	78f9      	ldrb	r1, [r7, #3]
 8004fa0:	78ba      	ldrb	r2, [r7, #2]
 8004fa2:	787c      	ldrb	r4, [r7, #1]
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	4623      	mov	r3, r4
 8004fac:	f7ff ff14 	bl	8004dd8 <IOExp_SetPIN_UPDATE>
 8004fb0:	4603      	mov	r3, r0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}
 8004fba:	bf00      	nop

08004fbc <IOExp_ReadPIN_LEVEL>:
//	}
//}


uint8_t* IOExp_ReadPIN_LEVEL(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port)
{
 8004fbc:	b590      	push	{r4, r7, lr}
 8004fbe:	b091      	sub	sp, #68	; 0x44
 8004fc0:	af04      	add	r7, sp, #16
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	70fb      	strb	r3, [r7, #3]
 8004fc8:	4613      	mov	r3, r2
 8004fca:	70bb      	strb	r3, [r7, #2]
	bool send_start = true, send_stop = true;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, /*data_Rx[2] = {0},*/ CMD;
 8004fd8:	f107 030c 	add.w	r3, r7, #12
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]
 8004fe0:	3304      	adds	r3, #4
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	3304      	adds	r3, #4
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]
 8004fec:	3304      	adds	r3, #4
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	3304      	adds	r3, #4
	static uint8_t data_Rx[2] = {0, 0};
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(0 == port)
 8005000:	78bb      	ldrb	r3, [r7, #2]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d103      	bne.n	800500e <IOExp_ReadPIN_LEVEL+0x52>
	{
		/* Read port 0 configuration */
		CMD = INPUT_REG_PORT0;
 8005006:	2300      	movs	r3, #0
 8005008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800500c:	e002      	b.n	8005014 <IOExp_ReadPIN_LEVEL+0x58>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = INPUT_REG_PORT1;
 800500e:	2301      	movs	r3, #1
 8005010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 8005014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005018:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	623b      	str	r3, [r7, #32]

	send_stop = true;
 800501e:	2301      	movs	r3, #1
 8005020:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port */
	//for(int i = 0; i < 0xffff; i++);
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800502a:	f107 040c 	add.w	r4, r7, #12
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005036:	9301      	str	r3, [sp, #4]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4623      	mov	r3, r4
 800503c:	f002 fd40 	bl	8007ac0 <I2C_MASTER_Transmit>
 8005040:	4603      	mov	r3, r0
 8005042:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005046:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800504a:	2b00      	cmp	r3, #0
 800504c:	d127      	bne.n	800509e <IOExp_ReadPIN_LEVEL+0xe2>
	{
		send_start = true;
 800504e:	2301      	movs	r3, #1
 8005050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 8005054:	2301      	movs	r3, #1
 8005056:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i = 0; i < 0xffff; i++);
 800505a:	2300      	movs	r3, #0
 800505c:	62bb      	str	r3, [r7, #40]	; 0x28
 800505e:	e002      	b.n	8005066 <IOExp_ReadPIN_LEVEL+0xaa>
 8005060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005062:	3301      	adds	r3, #1
 8005064:	62bb      	str	r3, [r7, #40]	; 0x28
 8005066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005068:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800506c:	4293      	cmp	r3, r2
 800506e:	ddf7      	ble.n	8005060 <IOExp_ReadPIN_LEVEL+0xa4>
		/* Read Port pins */
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, data_Rx, 2/*data_count*/, send_stop, true);
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005076:	2302      	movs	r3, #2
 8005078:	9300      	str	r3, [sp, #0]
 800507a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	2301      	movs	r3, #1
 8005082:	9302      	str	r3, [sp, #8]
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4b08      	ldr	r3, [pc, #32]	; (80050a8 <IOExp_ReadPIN_LEVEL+0xec>)
 8005088:	f002 fd44 	bl	8007b14 <I2C_MASTER_Receive>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005092:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005096:	2b00      	cmp	r3, #0
 8005098:	d101      	bne.n	800509e <IOExp_ReadPIN_LEVEL+0xe2>
		{
			return (data_Rx);
 800509a:	4b03      	ldr	r3, [pc, #12]	; (80050a8 <IOExp_ReadPIN_LEVEL+0xec>)
 800509c:	e7ff      	b.n	800509e <IOExp_ReadPIN_LEVEL+0xe2>
		}
	}
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3734      	adds	r7, #52	; 0x34
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd90      	pop	{r4, r7, pc}
 80050a6:	bf00      	nop
 80050a8:	1fff43d0 	.word	0x1fff43d0

080050ac <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80050ac:	b480      	push	{r7}
 80050ae:	b083      	sub	sp, #12
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	460b      	mov	r3, r1
 80050b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	fa22 f303 	lsr.w	r3, r2, r3
 80050c2:	f003 0301 	and.w	r3, r3, #1
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop

080050d4 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	7c1b      	ldrb	r3, [r3, #16]
 80050e4:	4610      	mov	r0, r2
 80050e6:	4619      	mov	r1, r3
 80050e8:	f7ff ffe0 	bl	80050ac <XMC_GPIO_GetInput>
 80050ec:	4603      	mov	r3, r0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <Input_Capture>:
	//if(Vcu_InPuts.IGNITION_1_IN)
//#endif

Vcu_InPuts_t Vcu_InPuts;
void Input_Capture(void)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	af00      	add	r7, sp, #0

	//Vcu_InPuts.charger_connect_IN = DIGITAL_IO_GetInput(&CHARGER_CONNECTED_IN_D);

	Vcu_InPuts.IGNITION_1_IN = DIGITAL_IO_GetInput(&IGNI_POS1_IN_D);
 80050fc:	481f      	ldr	r0, [pc, #124]	; (800517c <Input_Capture+0x84>)
 80050fe:	f7ff ffe9 	bl	80050d4 <DIGITAL_IO_GetInput>
 8005102:	4603      	mov	r3, r0
 8005104:	2b00      	cmp	r3, #0
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2da      	uxtb	r2, r3
 800510e:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <Input_Capture+0x88>)
 8005110:	701a      	strb	r2, [r3, #0]

	Vcu_InPuts.IGNITION_2_IN = DIGITAL_IO_GetInput(&IGNI_POS2_IN_D);
 8005112:	481c      	ldr	r0, [pc, #112]	; (8005184 <Input_Capture+0x8c>)
 8005114:	f7ff ffde 	bl	80050d4 <DIGITAL_IO_GetInput>
 8005118:	4603      	mov	r3, r0
 800511a:	2b00      	cmp	r3, #0
 800511c:	bf14      	ite	ne
 800511e:	2301      	movne	r3, #1
 8005120:	2300      	moveq	r3, #0
 8005122:	b2da      	uxtb	r2, r3
 8005124:	4b16      	ldr	r3, [pc, #88]	; (8005180 <Input_Capture+0x88>)
 8005126:	705a      	strb	r2, [r3, #1]

	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 8005128:	4817      	ldr	r0, [pc, #92]	; (8005188 <Input_Capture+0x90>)
 800512a:	f7ff ffd3 	bl	80050d4 <DIGITAL_IO_GetInput>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	bf14      	ite	ne
 8005134:	2301      	movne	r3, #1
 8005136:	2300      	moveq	r3, #0
 8005138:	b2da      	uxtb	r2, r3
 800513a:	4b14      	ldr	r3, [pc, #80]	; (800518c <Input_Capture+0x94>)
 800513c:	749a      	strb	r2, [r3, #18]

	Switch_Ios_IN.handbrake_sw_IN = DIGITAL_IO_GetInput(&HANDBRAKE_IN_D);
 800513e:	4814      	ldr	r0, [pc, #80]	; (8005190 <Input_Capture+0x98>)
 8005140:	f7ff ffc8 	bl	80050d4 <DIGITAL_IO_GetInput>
 8005144:	4603      	mov	r3, r0
 8005146:	2b00      	cmp	r3, #0
 8005148:	bf14      	ite	ne
 800514a:	2301      	movne	r3, #1
 800514c:	2300      	moveq	r3, #0
 800514e:	b2da      	uxtb	r2, r3
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <Input_Capture+0x94>)
 8005152:	721a      	strb	r2, [r3, #8]

	Switch_Ios_IN.electronic_brake_in_d = DIGITAL_IO_GetInput(&ELEC_HANDBRAKE_IN_D);
 8005154:	480f      	ldr	r0, [pc, #60]	; (8005194 <Input_Capture+0x9c>)
 8005156:	f7ff ffbd 	bl	80050d4 <DIGITAL_IO_GetInput>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2da      	uxtb	r2, r3
 8005166:	4b09      	ldr	r3, [pc, #36]	; (800518c <Input_Capture+0x94>)
 8005168:	715a      	strb	r2, [r3, #5]

	Can_Inputs();
 800516a:	f000 f815 	bl	8005198 <Can_Inputs>

	state_1_InputCapture();
 800516e:	f000 f857 	bl	8005220 <state_1_InputCapture>
	State_2_InputCapture();
 8005172:	f000 fa3d 	bl	80055f0 <State_2_InputCapture>

	read_temp();
 8005176:	f000 f827 	bl	80051c8 <read_temp>

}
 800517a:	bd80      	pop	{r7, pc}
 800517c:	08013578 	.word	0x08013578
 8005180:	1fff5104 	.word	0x1fff5104
 8005184:	08013564 	.word	0x08013564
 8005188:	080135b4 	.word	0x080135b4
 800518c:	1fff4844 	.word	0x1fff4844
 8005190:	080135a0 	.word	0x080135a0
 8005194:	08013384 	.word	0x08013384

08005198 <Can_Inputs>:

void Can_Inputs(void)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	af00      	add	r7, sp, #0
	uart_debugg("in can_inputs");
 800519c:	4808      	ldr	r0, [pc, #32]	; (80051c0 <Can_Inputs+0x28>)
 800519e:	f00a fd2d 	bl	800fbfc <uart_debugg>
	/*charger read */
			Read_CAN_id0x18FF50E5();
 80051a2:	f005 fe67 	bl	800ae74 <Read_CAN_id0x18FF50E5>
		Gtake_Rx_29bit();

#elif IRP
//		  SuperLooptime_Start();

		Irp_Rx_29bit();
 80051a6:	f005 fdf3 	bl	800ad90 <Irp_Rx_29bit>

#endif


		//Read_CAN_BMS();//11bit
		Read_can_bms_29bit(); //29 bit
 80051aa:	f004 fdad 	bl	8009d08 <Read_can_bms_29bit>
		CAN_INPUT_HVAC();
 80051ae:	f005 fa3f 	bl	800a630 <CAN_INPUT_HVAC>
		CAN_Read_EPS();
 80051b2:	f005 f851 	bl	800a258 <CAN_Read_EPS>
		/*charger read */
		//Read_CAN_id0x18FF50E5();

		//ruff();

		uart_debugg("exit can_inputs");
 80051b6:	4803      	ldr	r0, [pc, #12]	; (80051c4 <Can_Inputs+0x2c>)
 80051b8:	f00a fd20 	bl	800fbfc <uart_debugg>
}
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	08012f18 	.word	0x08012f18
 80051c4:	08012f28 	.word	0x08012f28

080051c8 <read_temp>:

void read_temp(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0


	U18_read_temp();
 80051cc:	f000 fa80 	bl	80056d0 <U18_read_temp>



}
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop

080051d4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	fa22 f303 	lsr.w	r3, r2, r3
 80051ea:	f003 0301 	and.w	r3, r3, #1
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	370c      	adds	r7, #12
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop

080051fc <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	7c1b      	ldrb	r3, [r3, #16]
 800520c:	4610      	mov	r0, r2
 800520e:	4619      	mov	r1, r3
 8005210:	f7ff ffe0 	bl	80051d4 <XMC_GPIO_GetInput>
 8005214:	4603      	mov	r3, r0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3708      	adds	r7, #8
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop

08005220 <state_1_InputCapture>:
#include "Vcu_Config.h"
#include "IOExp_lib.h"
#include "Vcu_Init.h"

void state_1_InputCapture(void)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_1_IN)
 8005224:	4b0a      	ldr	r3, [pc, #40]	; (8005250 <state_1_InputCapture+0x30>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_1_IN))
	{
		/* do the necessary task */
	}

	Switch_Ios_IN.brake_oil_IN = DIGITAL_IO_GetInput(&BRAKE_OIL_IN_D);
 800522a:	480a      	ldr	r0, [pc, #40]	; (8005254 <state_1_InputCapture+0x34>)
 800522c:	f7ff ffe6 	bl	80051fc <DIGITAL_IO_GetInput>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	bf14      	ite	ne
 8005236:	2301      	movne	r3, #1
 8005238:	2300      	moveq	r3, #0
 800523a:	b2da      	uxtb	r2, r3
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <state_1_InputCapture+0x38>)
 800523e:	719a      	strb	r2, [r3, #6]

	/* check for io_expander */
	Io_Exp_U24();
 8005240:	f000 f80c 	bl	800525c <Io_Exp_U24>
	Io_Exp_U25();
 8005244:	f000 f8fe 	bl	8005444 <Io_Exp_U25>
	Io_Exp_U38();
 8005248:	f000 f954 	bl	80054f4 <Io_Exp_U38>
	//Io_Exp_U48();

}
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	1fff5104 	.word	0x1fff5104
 8005254:	08013528 	.word	0x08013528
 8005258:	1fff4844 	.word	0x1fff4844

0800525c <Io_Exp_U24>:

void Io_Exp_U24(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
	//uart_debugg("in U24");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 8005262:	2300      	movs	r3, #0
 8005264:	60fb      	str	r3, [r7, #12]
 8005266:	2340      	movs	r3, #64	; 0x40
 8005268:	72fb      	strb	r3, [r7, #11]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 800526a:	7afb      	ldrb	r3, [r7, #11]
 800526c:	4870      	ldr	r0, [pc, #448]	; (8005430 <Io_Exp_U24+0x1d4>)
 800526e:	4619      	mov	r1, r3
 8005270:	2200      	movs	r2, #0
 8005272:	f7ff fea3 	bl	8004fbc <IOExp_ReadPIN_LEVEL>
 8005276:	60f8      	str	r0, [r7, #12]

	/* port 0 */

	Combi_Switch_IN.low_beam_IN = (port_data[0] & (0x01));
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	f003 0301 	and.w	r3, r3, #1
 8005280:	2b00      	cmp	r3, #0
 8005282:	bf14      	ite	ne
 8005284:	2301      	movne	r3, #1
 8005286:	2300      	moveq	r3, #0
 8005288:	b2da      	uxtb	r2, r3
 800528a:	4b6a      	ldr	r3, [pc, #424]	; (8005434 <Io_Exp_U24+0x1d8>)
 800528c:	701a      	strb	r2, [r3, #0]

	Combi_Switch_IN.high_beam_IN = ((port_data[0] >> 1) & (0x01));
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	781b      	ldrb	r3, [r3, #0]
 8005292:	085b      	lsrs	r3, r3, #1
 8005294:	b2db      	uxtb	r3, r3
 8005296:	f003 0301 	and.w	r3, r3, #1
 800529a:	2b00      	cmp	r3, #0
 800529c:	bf14      	ite	ne
 800529e:	2301      	movne	r3, #1
 80052a0:	2300      	moveq	r3, #0
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	4b63      	ldr	r3, [pc, #396]	; (8005434 <Io_Exp_U24+0x1d8>)
 80052a6:	705a      	strb	r2, [r3, #1]

	Combi_Switch_IN.pos_light_IN = ((port_data[0] >> 2) & (0x01));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	781b      	ldrb	r3, [r3, #0]
 80052ac:	089b      	lsrs	r3, r3, #2
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bf14      	ite	ne
 80052b8:	2301      	movne	r3, #1
 80052ba:	2300      	moveq	r3, #0
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4b5d      	ldr	r3, [pc, #372]	; (8005434 <Io_Exp_U24+0x1d8>)
 80052c0:	709a      	strb	r2, [r3, #2]

	Combi_Switch_IN.left_indicator_IN = ((port_data[0] >> 3) & 0x01);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	08db      	lsrs	r3, r3, #3
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	f003 0301 	and.w	r3, r3, #1
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	bf14      	ite	ne
 80052d2:	2301      	movne	r3, #1
 80052d4:	2300      	moveq	r3, #0
 80052d6:	b2da      	uxtb	r2, r3
 80052d8:	4b56      	ldr	r3, [pc, #344]	; (8005434 <Io_Exp_U24+0x1d8>)
 80052da:	70da      	strb	r2, [r3, #3]

	Combi_Switch_IN.right_indicator_IN = ((port_data[0] >> 4) & 0x01);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	781b      	ldrb	r3, [r3, #0]
 80052e0:	091b      	lsrs	r3, r3, #4
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	bf14      	ite	ne
 80052ec:	2301      	movne	r3, #1
 80052ee:	2300      	moveq	r3, #0
 80052f0:	b2da      	uxtb	r2, r3
 80052f2:	4b50      	ldr	r3, [pc, #320]	; (8005434 <Io_Exp_U24+0x1d8>)
 80052f4:	711a      	strb	r2, [r3, #4]

	Combi_Switch_IN.hazzard_sw_IN = ((port_data[0] >> 5) & 0x01);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	095b      	lsrs	r3, r3, #5
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	f003 0301 	and.w	r3, r3, #1
 8005302:	2b00      	cmp	r3, #0
 8005304:	bf14      	ite	ne
 8005306:	2301      	movne	r3, #1
 8005308:	2300      	moveq	r3, #0
 800530a:	b2da      	uxtb	r2, r3
 800530c:	4b49      	ldr	r3, [pc, #292]	; (8005434 <Io_Exp_U24+0x1d8>)
 800530e:	715a      	strb	r2, [r3, #5]

	Seat_Switch_IN.seat_belt_d_IN = ((port_data[0] >> 6) & 0x01);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	099b      	lsrs	r3, r3, #6
 8005316:	b2db      	uxtb	r3, r3
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	bf14      	ite	ne
 8005320:	2301      	movne	r3, #1
 8005322:	2300      	moveq	r3, #0
 8005324:	b2da      	uxtb	r2, r3
 8005326:	4b44      	ldr	r3, [pc, #272]	; (8005438 <Io_Exp_U24+0x1dc>)
 8005328:	701a      	strb	r2, [r3, #0]

	Seat_Switch_IN.seat_belt_p_IN = ((port_data[0] >> 7) & 0x01);
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	781b      	ldrb	r3, [r3, #0]
 800532e:	09db      	lsrs	r3, r3, #7
 8005330:	b2db      	uxtb	r3, r3
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2da      	uxtb	r2, r3
 8005340:	4b3d      	ldr	r3, [pc, #244]	; (8005438 <Io_Exp_U24+0x1dc>)
 8005342:	705a      	strb	r2, [r3, #1]
	/*    ***********************************************************   */

	/* port 1 */


	Seat_Switch_IN.seat_occup_p_IN = (port_data[1] & (0x01));
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	3301      	adds	r3, #1
 8005348:	781b      	ldrb	r3, [r3, #0]
 800534a:	f003 0301 	and.w	r3, r3, #1
 800534e:	2b00      	cmp	r3, #0
 8005350:	bf14      	ite	ne
 8005352:	2301      	movne	r3, #1
 8005354:	2300      	moveq	r3, #0
 8005356:	b2da      	uxtb	r2, r3
 8005358:	4b37      	ldr	r3, [pc, #220]	; (8005438 <Io_Exp_U24+0x1dc>)
 800535a:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.door_lock_IN = ((port_data[1] >> 1) & (0x01));
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	781b      	ldrb	r3, [r3, #0]
 8005362:	085b      	lsrs	r3, r3, #1
 8005364:	b2db      	uxtb	r3, r3
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	bf14      	ite	ne
 800536e:	2301      	movne	r3, #1
 8005370:	2300      	moveq	r3, #0
 8005372:	b2da      	uxtb	r2, r3
 8005374:	4b31      	ldr	r3, [pc, #196]	; (800543c <Io_Exp_U24+0x1e0>)
 8005376:	701a      	strb	r2, [r3, #0]

	Door_Switch_IN.driver_door_IN = ((port_data[1] >> 2) & (0x01));
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	3301      	adds	r3, #1
 800537c:	781b      	ldrb	r3, [r3, #0]
 800537e:	089b      	lsrs	r3, r3, #2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	2b00      	cmp	r3, #0
 8005388:	bf14      	ite	ne
 800538a:	2301      	movne	r3, #1
 800538c:	2300      	moveq	r3, #0
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b2a      	ldr	r3, [pc, #168]	; (800543c <Io_Exp_U24+0x1e0>)
 8005392:	705a      	strb	r2, [r3, #1]

	Door_Switch_IN.passenger_door_IN = ((port_data[1] >> 3) & 0x01);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3301      	adds	r3, #1
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	08db      	lsrs	r3, r3, #3
 800539c:	b2db      	uxtb	r3, r3
 800539e:	f003 0301 	and.w	r3, r3, #1
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	bf14      	ite	ne
 80053a6:	2301      	movne	r3, #1
 80053a8:	2300      	moveq	r3, #0
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	4b23      	ldr	r3, [pc, #140]	; (800543c <Io_Exp_U24+0x1e0>)
 80053ae:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.passenger_2r_IN = ((port_data[1] >> 4) & 0x01);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	3301      	adds	r3, #1
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	091b      	lsrs	r3, r3, #4
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	4b1c      	ldr	r3, [pc, #112]	; (800543c <Io_Exp_U24+0x1e0>)
 80053ca:	711a      	strb	r2, [r3, #4]

	Door_Switch_IN.bonnet_IN = ((port_data[1] >> 5) & 0x01);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	3301      	adds	r3, #1
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	095b      	lsrs	r3, r3, #5
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	f003 0301 	and.w	r3, r3, #1
 80053da:	2b00      	cmp	r3, #0
 80053dc:	bf14      	ite	ne
 80053de:	2301      	movne	r3, #1
 80053e0:	2300      	moveq	r3, #0
 80053e2:	b2da      	uxtb	r2, r3
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <Io_Exp_U24+0x1e0>)
 80053e6:	719a      	strb	r2, [r3, #6]

	Door_Switch_IN.hatch_IN = ((port_data[1] >> 6) & 0x01);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	099b      	lsrs	r3, r3, #6
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	bf14      	ite	ne
 80053fa:	2301      	movne	r3, #1
 80053fc:	2300      	moveq	r3, #0
 80053fe:	b2da      	uxtb	r2, r3
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <Io_Exp_U24+0x1e0>)
 8005402:	715a      	strb	r2, [r3, #5]

	Door_Switch_IN.passenger_2l_IN = ((port_data[1] >> 7) & 0x01);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	3301      	adds	r3, #1
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	09db      	lsrs	r3, r3, #7
 800540c:	b2db      	uxtb	r3, r3
 800540e:	f003 0301 	and.w	r3, r3, #1
 8005412:	2b00      	cmp	r3, #0
 8005414:	bf14      	ite	ne
 8005416:	2301      	movne	r3, #1
 8005418:	2300      	moveq	r3, #0
 800541a:	b2da      	uxtb	r2, r3
 800541c:	4b07      	ldr	r3, [pc, #28]	; (800543c <Io_Exp_U24+0x1e0>)
 800541e:	70da      	strb	r2, [r3, #3]

	char str[] = "exit U24";
 8005420:	4a07      	ldr	r2, [pc, #28]	; (8005440 <Io_Exp_U24+0x1e4>)
 8005422:	463b      	mov	r3, r7
 8005424:	ca07      	ldmia	r2, {r0, r1, r2}
 8005426:	c303      	stmia	r3!, {r0, r1}
 8005428:	701a      	strb	r2, [r3, #0]
//	uart_debugg(str);

}
 800542a:	3710      	adds	r7, #16
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	1ffe8a5c 	.word	0x1ffe8a5c
 8005434:	1fff48a4 	.word	0x1fff48a4
 8005438:	1fff47e8 	.word	0x1fff47e8
 800543c:	1fff48b8 	.word	0x1fff48b8
 8005440:	08012f38 	.word	0x08012f38

08005444 <Io_Exp_U25>:

void Io_Exp_U25(void)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0

	//uart_debugg("in U25");

	uint8_t *port_data = NULL, IOExp_Address = 0x42;
 800544a:	2300      	movs	r3, #0
 800544c:	607b      	str	r3, [r7, #4]
 800544e:	2342      	movs	r3, #66	; 0x42
 8005450:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	4824      	ldr	r0, [pc, #144]	; (80054e8 <Io_Exp_U25+0xa4>)
 8005456:	4619      	mov	r1, r3
 8005458:	2200      	movs	r2, #0
 800545a:	f7ff fdaf 	bl	8004fbc <IOExp_ReadPIN_LEVEL>
 800545e:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.ac_on_in = ((port_data[0] >> 1) & (0x01));
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	085b      	lsrs	r3, r3, #1
 8005466:	b2db      	uxtb	r3, r3
 8005468:	f003 0301 	and.w	r3, r3, #1
 800546c:	2b00      	cmp	r3, #0
 800546e:	bf14      	ite	ne
 8005470:	2301      	movne	r3, #1
 8005472:	2300      	moveq	r3, #0
 8005474:	b2da      	uxtb	r2, r3
 8005476:	4b1d      	ldr	r3, [pc, #116]	; (80054ec <Io_Exp_U25+0xa8>)
 8005478:	739a      	strb	r2, [r3, #14]

	Hvac_IN.blower_speed1_IN = ((port_data[0] >> 2) & (0x01));
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	089b      	lsrs	r3, r3, #2
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	bf14      	ite	ne
 800548a:	2301      	movne	r3, #1
 800548c:	2300      	moveq	r3, #0
 800548e:	b2da      	uxtb	r2, r3
 8005490:	4b17      	ldr	r3, [pc, #92]	; (80054f0 <Io_Exp_U25+0xac>)
 8005492:	711a      	strb	r2, [r3, #4]

	Hvac_IN.blower_speed2_IN = ((port_data[0] >> 3) & 0x01);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	781b      	ldrb	r3, [r3, #0]
 8005498:	08db      	lsrs	r3, r3, #3
 800549a:	b2db      	uxtb	r3, r3
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4b11      	ldr	r3, [pc, #68]	; (80054f0 <Io_Exp_U25+0xac>)
 80054ac:	715a      	strb	r2, [r3, #5]

	Hvac_IN.blower_speed3_IN = ((port_data[0] >> 4) & 0x01);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	091b      	lsrs	r3, r3, #4
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	bf14      	ite	ne
 80054be:	2301      	movne	r3, #1
 80054c0:	2300      	moveq	r3, #0
 80054c2:	b2da      	uxtb	r2, r3
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <Io_Exp_U25+0xac>)
 80054c6:	719a      	strb	r2, [r3, #6]

	Hvac_IN.circulation_on_off = ((port_data[0] >> 5) & 0x01);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	095b      	lsrs	r3, r3, #5
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	f003 0301 	and.w	r3, r3, #1
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	bf14      	ite	ne
 80054d8:	2301      	movne	r3, #1
 80054da:	2300      	moveq	r3, #0
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	4b04      	ldr	r3, [pc, #16]	; (80054f0 <Io_Exp_U25+0xac>)
 80054e0:	721a      	strb	r2, [r3, #8]

	/* port 1 */

//
	//uart_debugg("exit U25");
}
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	1ffe8a5c 	.word	0x1ffe8a5c
 80054ec:	1fff4844 	.word	0x1fff4844
 80054f0:	1fff485c 	.word	0x1fff485c

080054f4 <Io_Exp_U38>:

void Io_Exp_U38(void)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
	//uart_debugg("in U38");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 80054fa:	2300      	movs	r3, #0
 80054fc:	607b      	str	r3, [r7, #4]
 80054fe:	2340      	movs	r3, #64	; 0x40
 8005500:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_1, IOExp_Address, 0x00);
 8005502:	78fb      	ldrb	r3, [r7, #3]
 8005504:	4824      	ldr	r0, [pc, #144]	; (8005598 <Io_Exp_U38+0xa4>)
 8005506:	4619      	mov	r1, r3
 8005508:	2200      	movs	r2, #0
 800550a:	f7ff fd57 	bl	8004fbc <IOExp_ReadPIN_LEVEL>
 800550e:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.power_window_in_d = ((port_data[0] >> 4) & 0x01);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	b2db      	uxtb	r3, r3
 8005518:	f003 0301 	and.w	r3, r3, #1
 800551c:	2b00      	cmp	r3, #0
 800551e:	bf14      	ite	ne
 8005520:	2301      	movne	r3, #1
 8005522:	2300      	moveq	r3, #0
 8005524:	b2da      	uxtb	r2, r3
 8005526:	4b1d      	ldr	r3, [pc, #116]	; (800559c <Io_Exp_U38+0xa8>)
 8005528:	741a      	strb	r2, [r3, #16]

	Aux_Inputs.AUX_IN4_D = ((port_data[0] >> 5) & 0x01);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0301 	and.w	r3, r3, #1
 8005536:	2b00      	cmp	r3, #0
 8005538:	bf14      	ite	ne
 800553a:	2301      	movne	r3, #1
 800553c:	2300      	moveq	r3, #0
 800553e:	b2da      	uxtb	r2, r3
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <Io_Exp_U38+0xac>)
 8005542:	709a      	strb	r2, [r3, #2]

	Aux_Inputs.AUX_IN5_D = ((port_data[0] >> 6) & 0x01);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	099b      	lsrs	r3, r3, #6
 800554a:	b2db      	uxtb	r3, r3
 800554c:	f003 0301 	and.w	r3, r3, #1
 8005550:	2b00      	cmp	r3, #0
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2da      	uxtb	r2, r3
 800555a:	4b11      	ldr	r3, [pc, #68]	; (80055a0 <Io_Exp_U38+0xac>)
 800555c:	70da      	strb	r2, [r3, #3]

	Switch_Ios_IN.orvm_fold_IN = ((port_data[0] >> 7) & 0x01);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	09db      	lsrs	r3, r3, #7
 8005564:	b2db      	uxtb	r3, r3
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2da      	uxtb	r2, r3
 8005574:	4b09      	ldr	r3, [pc, #36]	; (800559c <Io_Exp_U38+0xa8>)
 8005576:	709a      	strb	r2, [r3, #2]

	/*    ***********************************************************   */

	/* port 1 */

	Switch_Ios_IN.orvm_open_IN = (port_data[1] & (0x01));
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	3301      	adds	r3, #1
 800557c:	781b      	ldrb	r3, [r3, #0]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2da      	uxtb	r2, r3
 800558c:	4b03      	ldr	r3, [pc, #12]	; (800559c <Io_Exp_U38+0xa8>)
 800558e:	70da      	strb	r2, [r3, #3]

	//uart_debugg("exit U38");

}
 8005590:	3708      	adds	r7, #8
 8005592:	46bd      	mov	sp, r7
 8005594:	bd80      	pop	{r7, pc}
 8005596:	bf00      	nop
 8005598:	1ffe8a68 	.word	0x1ffe8a68
 800559c:	1fff4844 	.word	0x1fff4844
 80055a0:	1fff47e0 	.word	0x1fff47e0

080055a4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	460b      	mov	r3, r1
 80055ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80055b4:	78fb      	ldrb	r3, [r7, #3]
 80055b6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ba:	f003 0301 	and.w	r3, r3, #1
}
 80055be:	4618      	mov	r0, r3
 80055c0:	370c      	adds	r7, #12
 80055c2:	46bd      	mov	sp, r7
 80055c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c8:	4770      	bx	lr
 80055ca:	bf00      	nop

080055cc <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	7c1b      	ldrb	r3, [r3, #16]
 80055dc:	4610      	mov	r0, r2
 80055de:	4619      	mov	r1, r3
 80055e0:	f7ff ffe0 	bl	80055a4 <XMC_GPIO_GetInput>
 80055e4:	4603      	mov	r3, r0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3708      	adds	r7, #8
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop

080055f0 <State_2_InputCapture>:
 */
#include "InputCapture.h"
#include "Vcu_Config.h"

void State_2_InputCapture(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_2_IN)
 80055f4:	4b02      	ldr	r3, [pc, #8]	; (8005600 <State_2_InputCapture+0x10>)
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_2_IN))
	{

	}

	Read_State2_inputs();
 80055fa:	f000 f803 	bl	8005604 <Read_State2_inputs>

}
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	1fff5104 	.word	0x1fff5104

08005604 <Read_State2_inputs>:
void Read_State2_inputs(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 8005608:	481b      	ldr	r0, [pc, #108]	; (8005678 <Read_State2_inputs+0x74>)
 800560a:	f7ff ffdf 	bl	80055cc <DIGITAL_IO_GetInput>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	bf14      	ite	ne
 8005614:	2301      	movne	r3, #1
 8005616:	2300      	moveq	r3, #0
 8005618:	b2da      	uxtb	r2, r3
 800561a:	4b18      	ldr	r3, [pc, #96]	; (800567c <Read_State2_inputs+0x78>)
 800561c:	749a      	strb	r2, [r3, #18]

	/* gear inputs */
	Switch_Ios_IN.gear_sw1_IN = DIGITAL_IO_GetInput(&GEAR_SW1_IN_D); //Neutral
 800561e:	4818      	ldr	r0, [pc, #96]	; (8005680 <Read_State2_inputs+0x7c>)
 8005620:	f7ff ffd4 	bl	80055cc <DIGITAL_IO_GetInput>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2da      	uxtb	r2, r3
 8005630:	4b12      	ldr	r3, [pc, #72]	; (800567c <Read_State2_inputs+0x78>)
 8005632:	725a      	strb	r2, [r3, #9]
	Switch_Ios_IN.gear_sw2_IN = DIGITAL_IO_GetInput(&GEAR_SW2_IN_D); //forward
 8005634:	4813      	ldr	r0, [pc, #76]	; (8005684 <Read_State2_inputs+0x80>)
 8005636:	f7ff ffc9 	bl	80055cc <DIGITAL_IO_GetInput>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4b0d      	ldr	r3, [pc, #52]	; (800567c <Read_State2_inputs+0x78>)
 8005648:	729a      	strb	r2, [r3, #10]
	Switch_Ios_IN.gear_sw3_IN = DIGITAL_IO_GetInput(&GEAR_SW3_IN_D); //reverse
 800564a:	480f      	ldr	r0, [pc, #60]	; (8005688 <Read_State2_inputs+0x84>)
 800564c:	f7ff ffbe 	bl	80055cc <DIGITAL_IO_GetInput>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	bf14      	ite	ne
 8005656:	2301      	movne	r3, #1
 8005658:	2300      	moveq	r3, #0
 800565a:	b2da      	uxtb	r2, r3
 800565c:	4b07      	ldr	r3, [pc, #28]	; (800567c <Read_State2_inputs+0x78>)
 800565e:	72da      	strb	r2, [r3, #11]
	Switch_Ios_IN.gear_sw4_IN = DIGITAL_IO_GetInput(&GEAR_SW4_IN_D); //parking
 8005660:	480a      	ldr	r0, [pc, #40]	; (800568c <Read_State2_inputs+0x88>)
 8005662:	f7ff ffb3 	bl	80055cc <DIGITAL_IO_GetInput>
 8005666:	4603      	mov	r3, r0
 8005668:	2b00      	cmp	r3, #0
 800566a:	bf14      	ite	ne
 800566c:	2301      	movne	r3, #1
 800566e:	2300      	moveq	r3, #0
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b02      	ldr	r3, [pc, #8]	; (800567c <Read_State2_inputs+0x78>)
 8005674:	731a      	strb	r2, [r3, #12]

	/* ig2 Lights */

}
 8005676:	bd80      	pop	{r7, pc}
 8005678:	080135b4 	.word	0x080135b4
 800567c:	1fff4844 	.word	0x1fff4844
 8005680:	080135dc 	.word	0x080135dc
 8005684:	080135f0 	.word	0x080135f0
 8005688:	08013604 	.word	0x08013604
 800568c:	08013618 	.word	0x08013618

08005690 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80056a0:	b2db      	uxtb	r3, r3
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop

080056b0 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80056c0:	b2db      	uxtb	r3, r3
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	370c      	adds	r7, #12
 80056c6:	46bd      	mov	sp, r7
 80056c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056cc:	4770      	bx	lr
 80056ce:	bf00      	nop

080056d0 <U18_read_temp>:
#define U6_address 0x90
#define U9_address 0x92


void U18_read_temp(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
	uart_debugg("in temp");
 80056d4:	4805      	ldr	r0, [pc, #20]	; (80056ec <U18_read_temp+0x1c>)
 80056d6:	f00a fa91 	bl	800fbfc <uart_debugg>
	U18_MotorTemp_read();
 80056da:	f000 f80b 	bl	80056f4 <U18_MotorTemp_read>
	U18_CabinTemp_read();
 80056de:	f000 f8e7 	bl	80058b0 <U18_CabinTemp_read>
	//U18_McTemp_read();
	//U18_BatteryTemp_read();
	//U18_throttle_read();
	uart_debugg("exit temp");
 80056e2:	4803      	ldr	r0, [pc, #12]	; (80056f0 <U18_read_temp+0x20>)
 80056e4:	f00a fa8a 	bl	800fbfc <uart_debugg>
}
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	08012f44 	.word	0x08012f44
 80056f0:	08012f4c 	.word	0x08012f4c

080056f4 <U18_MotorTemp_read>:
	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);

	//rx_buff &= 0x0fff;
}
void U18_MotorTemp_read(void)
{
 80056f4:	b590      	push	{r4, r7, lr}
 80056f6:	b091      	sub	sp, #68	; 0x44
 80056f8:	af04      	add	r7, sp, #16
	uint8_t command_byte= 0x1f;
	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U38_address, &command_byte, 1, stop);
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));*/


	bool start = true, stop = 0, ack = true;
 80056fa:	2301      	movs	r3, #1
 80056fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005700:	2300      	movs	r3, #0
 8005702:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005706:	2301      	movs	r3, #1
 8005708:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	float ans = 0, Resistance = 0;
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
 8005712:	f04f 0300 	mov.w	r3, #0
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 8005718:	f242 7310 	movw	r3, #10000	; 0x2710
 800571c:	623b      	str	r3, [r7, #32]
 800571e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005728:	61bb      	str	r3, [r7, #24]
 800572a:	2319      	movs	r3, #25
 800572c:	617b      	str	r3, [r7, #20]
	uint8_t command_byte= 0x9f, rx_buff[2] = {0};
 800572e:	239f      	movs	r3, #159	; 0x9f
 8005730:	72fb      	strb	r3, [r7, #11]
 8005732:	2300      	movs	r3, #0
 8005734:	813b      	strh	r3, [r7, #8]
	uint16_t rx = 0;
 8005736:	2300      	movs	r3, #0
 8005738:	827b      	strh	r3, [r7, #18]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 800573a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800573e:	f107 040b 	add.w	r4, r7, #11
 8005742:	2301      	movs	r3, #1
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800574a:	9301      	str	r3, [sp, #4]
 800574c:	4852      	ldr	r0, [pc, #328]	; (8005898 <U18_MotorTemp_read+0x1a4>)
 800574e:	4611      	mov	r1, r2
 8005750:	2294      	movs	r2, #148	; 0x94
 8005752:	4623      	mov	r3, r4
 8005754:	f002 f9b4 	bl	8007ac0 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005758:	bf00      	nop
 800575a:	484f      	ldr	r0, [pc, #316]	; (8005898 <U18_MotorTemp_read+0x1a4>)
 800575c:	f7ff ff98 	bl	8005690 <I2C_MASTER_IsTxBusy>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d1f9      	bne.n	800575a <U18_MotorTemp_read+0x66>

	stop = true;
 8005766:	2301      	movs	r3, #1
 8005768:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 800576c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005770:	f107 0408 	add.w	r4, r7, #8
 8005774:	2302      	movs	r3, #2
 8005776:	9300      	str	r3, [sp, #0]
 8005778:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800577c:	9301      	str	r3, [sp, #4]
 800577e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005782:	9302      	str	r3, [sp, #8]
 8005784:	4844      	ldr	r0, [pc, #272]	; (8005898 <U18_MotorTemp_read+0x1a4>)
 8005786:	4611      	mov	r1, r2
 8005788:	2294      	movs	r2, #148	; 0x94
 800578a:	4623      	mov	r3, r4
 800578c:	f002 f9c2 	bl	8007b14 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005790:	bf00      	nop
 8005792:	4841      	ldr	r0, [pc, #260]	; (8005898 <U18_MotorTemp_read+0x1a4>)
 8005794:	f7ff ff8c 	bl	80056b0 <I2C_MASTER_IsRxBusy>
 8005798:	4603      	mov	r3, r0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d1f9      	bne.n	8005792 <U18_MotorTemp_read+0x9e>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 800579e:	7a3b      	ldrb	r3, [r7, #8]
 80057a0:	021b      	lsls	r3, r3, #8
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	7a7b      	ldrb	r3, [r7, #9]
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	4313      	orrs	r3, r2
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	827b      	strh	r3, [r7, #18]
	rx &= 0x0fff;
 80057ae:	8a7b      	ldrh	r3, [r7, #18]
 80057b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057b4:	827b      	strh	r3, [r7, #18]

	Resistance = ((float)4095.0/(float)rx) - 1;
 80057b6:	8a7b      	ldrh	r3, [r7, #18]
 80057b8:	ee07 3a90 	vmov	s15, r3
 80057bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057c0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800589c <U18_MotorTemp_read+0x1a8>
 80057c4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80057c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80057cc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Resistance = ((float)10000.0/(float)Resistance);
 80057d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80058a0 <U18_MotorTemp_read+0x1ac>
 80057d8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057dc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80057e0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	Resistance /= (float)2;
 80057e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057e8:	eeb0 7a00 	vmov.f32	s14, #0
 80057ec:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80057f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 80057f4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80057f8:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80058a0 <U18_MotorTemp_read+0x1ac>
 80057fc:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005800:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f00b f8a3 	bl	8010950 <__aeabi_f2d>
 800580a:	4602      	mov	r2, r0
 800580c:	460b      	mov	r3, r1
 800580e:	4610      	mov	r0, r2
 8005810:	4619      	mov	r1, r3
 8005812:	f00a fc9b 	bl	801014c <log>
 8005816:	4602      	mov	r2, r0
 8005818:	460b      	mov	r3, r1
 800581a:	4610      	mov	r0, r2
 800581c:	4619      	mov	r1, r3
 800581e:	f00b fbcd 	bl	8010fbc <__aeabi_d2f>
 8005822:	4603      	mov	r3, r0
 8005824:	60fb      	str	r3, [r7, #12]
	steinhart /= (float)3950.0;
 8005826:	edd7 7a03 	vldr	s15, [r7, #12]
 800582a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80058a4 <U18_MotorTemp_read+0x1b0>
 800582e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005832:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	ee07 3a90 	vmov	s15, r3
 800583c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005840:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80058a8 <U18_MotorTemp_read+0x1b4>
 8005844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800584c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005850:	ed97 7a03 	vldr	s14, [r7, #12]
 8005854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005858:	edc7 7a03 	vstr	s15, [r7, #12]

	steinhart = (float)1.0 / steinhart;
 800585c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005860:	edd7 7a03 	vldr	s15, [r7, #12]
 8005864:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005868:	edc7 7a03 	vstr	s15, [r7, #12]
	ambient_temp =	steinhart -= (float)273.15;
 800586c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005870:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80058a8 <U18_MotorTemp_read+0x1b4>
 8005874:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005878:	edc7 7a03 	vstr	s15, [r7, #12]
 800587c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005880:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005884:	edc7 7a01 	vstr	s15, [r7, #4]
 8005888:	793b      	ldrb	r3, [r7, #4]
 800588a:	b2da      	uxtb	r2, r3
 800588c:	4b07      	ldr	r3, [pc, #28]	; (80058ac <U18_MotorTemp_read+0x1b8>)
 800588e:	701a      	strb	r2, [r3, #0]

}
 8005890:	3734      	adds	r7, #52	; 0x34
 8005892:	46bd      	mov	sp, r7
 8005894:	bd90      	pop	{r4, r7, pc}
 8005896:	bf00      	nop
 8005898:	1ffe8a68 	.word	0x1ffe8a68
 800589c:	457ff000 	.word	0x457ff000
 80058a0:	461c4000 	.word	0x461c4000
 80058a4:	4576e000 	.word	0x4576e000
 80058a8:	43889333 	.word	0x43889333
 80058ac:	1fff48d2 	.word	0x1fff48d2

080058b0 <U18_CabinTemp_read>:

void U18_CabinTemp_read(void)
{
 80058b0:	b590      	push	{r4, r7, lr}
 80058b2:	b08f      	sub	sp, #60	; 0x3c
 80058b4:	af04      	add	r7, sp, #16

	bool start = true, stop = 0, ack = true;
 80058b6:	2301      	movs	r3, #1
 80058b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80058bc:	2300      	movs	r3, #0
 80058be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80058c2:	2301      	movs	r3, #1
 80058c4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float ans = 0, Resistance = 0;
 80058c8:	f04f 0300 	mov.w	r3, #0
 80058cc:	623b      	str	r3, [r7, #32]
 80058ce:	f04f 0300 	mov.w	r3, #0
 80058d2:	61fb      	str	r3, [r7, #28]
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 80058d4:	f242 7310 	movw	r3, #10000	; 0x2710
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	f242 7310 	movw	r3, #10000	; 0x2710
 80058de:	617b      	str	r3, [r7, #20]
 80058e0:	f640 736e 	movw	r3, #3950	; 0xf6e
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	2319      	movs	r3, #25
 80058e8:	60fb      	str	r3, [r7, #12]
	uint8_t command_byte= 0xdc, rx_buff[2] = {0};
 80058ea:	23dc      	movs	r3, #220	; 0xdc
 80058ec:	70fb      	strb	r3, [r7, #3]
 80058ee:	2300      	movs	r3, #0
 80058f0:	803b      	strh	r3, [r7, #0]
	uint16_t rx = 0;
 80058f2:	2300      	movs	r3, #0
 80058f4:	817b      	strh	r3, [r7, #10]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 80058f6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80058fa:	1cfc      	adds	r4, r7, #3
 80058fc:	2301      	movs	r3, #1
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005904:	9301      	str	r3, [sp, #4]
 8005906:	484d      	ldr	r0, [pc, #308]	; (8005a3c <U18_CabinTemp_read+0x18c>)
 8005908:	4611      	mov	r1, r2
 800590a:	2294      	movs	r2, #148	; 0x94
 800590c:	4623      	mov	r3, r4
 800590e:	f002 f8d7 	bl	8007ac0 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005912:	bf00      	nop
 8005914:	4849      	ldr	r0, [pc, #292]	; (8005a3c <U18_CabinTemp_read+0x18c>)
 8005916:	f7ff febb 	bl	8005690 <I2C_MASTER_IsTxBusy>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d1f9      	bne.n	8005914 <U18_CabinTemp_read+0x64>

	stop = true;
 8005920:	2301      	movs	r3, #1
 8005922:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005926:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800592a:	463c      	mov	r4, r7
 800592c:	2302      	movs	r3, #2
 800592e:	9300      	str	r3, [sp, #0]
 8005930:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005934:	9301      	str	r3, [sp, #4]
 8005936:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800593a:	9302      	str	r3, [sp, #8]
 800593c:	483f      	ldr	r0, [pc, #252]	; (8005a3c <U18_CabinTemp_read+0x18c>)
 800593e:	4611      	mov	r1, r2
 8005940:	2294      	movs	r2, #148	; 0x94
 8005942:	4623      	mov	r3, r4
 8005944:	f002 f8e6 	bl	8007b14 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005948:	bf00      	nop
 800594a:	483c      	ldr	r0, [pc, #240]	; (8005a3c <U18_CabinTemp_read+0x18c>)
 800594c:	f7ff feb0 	bl	80056b0 <I2C_MASTER_IsRxBusy>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f9      	bne.n	800594a <U18_CabinTemp_read+0x9a>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005956:	783b      	ldrb	r3, [r7, #0]
 8005958:	021b      	lsls	r3, r3, #8
 800595a:	b29a      	uxth	r2, r3
 800595c:	787b      	ldrb	r3, [r7, #1]
 800595e:	b29b      	uxth	r3, r3
 8005960:	4313      	orrs	r3, r2
 8005962:	b29b      	uxth	r3, r3
 8005964:	817b      	strh	r3, [r7, #10]
	rx &= 0x0fff;
 8005966:	897b      	ldrh	r3, [r7, #10]
 8005968:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800596c:	817b      	strh	r3, [r7, #10]

	Resistance = ((float)4095.0/(float)rx) - 1;
 800596e:	897b      	ldrh	r3, [r7, #10]
 8005970:	ee07 3a90 	vmov	s15, r3
 8005974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005978:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005a40 <U18_CabinTemp_read+0x190>
 800597c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005980:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005984:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005988:	edc7 7a07 	vstr	s15, [r7, #28]
	Resistance = ((float)10000.0/(float)Resistance);
 800598c:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005a44 <U18_CabinTemp_read+0x194>
 8005990:	edd7 7a07 	vldr	s15, [r7, #28]
 8005994:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005998:	edc7 7a07 	vstr	s15, [r7, #28]

	Resistance /= (float)2;
 800599c:	edd7 7a07 	vldr	s15, [r7, #28]
 80059a0:	eeb0 7a00 	vmov.f32	s14, #0
 80059a4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80059a8:	edc7 7a07 	vstr	s15, [r7, #28]

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 80059ac:	edd7 7a07 	vldr	s15, [r7, #28]
 80059b0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005a44 <U18_CabinTemp_read+0x194>
 80059b4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80059b8:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f00a ffc7 	bl	8010950 <__aeabi_f2d>
 80059c2:	4602      	mov	r2, r0
 80059c4:	460b      	mov	r3, r1
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	f00a fbbf 	bl	801014c <log>
 80059ce:	4602      	mov	r2, r0
 80059d0:	460b      	mov	r3, r1
 80059d2:	4610      	mov	r0, r2
 80059d4:	4619      	mov	r1, r3
 80059d6:	f00b faf1 	bl	8010fbc <__aeabi_d2f>
 80059da:	4603      	mov	r3, r0
 80059dc:	607b      	str	r3, [r7, #4]
	steinhart /= (float)3950.0;
 80059de:	edd7 7a01 	vldr	s15, [r7, #4]
 80059e2:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005a48 <U18_CabinTemp_read+0x198>
 80059e6:	eec7 7a87 	vdiv.f32	s15, s15, s14
 80059ea:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	ee07 3a90 	vmov	s15, r3
 80059f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059f8:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005a4c <U18_CabinTemp_read+0x19c>
 80059fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005a04:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005a08:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a10:	edc7 7a01 	vstr	s15, [r7, #4]

	steinhart = (float)1.0 / steinhart;
 8005a14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005a18:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a1c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005a20:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart -= (float)273.15;
 8005a24:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a28:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005a4c <U18_CabinTemp_read+0x19c>
 8005a2c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a30:	edc7 7a01 	vstr	s15, [r7, #4]

}
 8005a34:	372c      	adds	r7, #44	; 0x2c
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd90      	pop	{r4, r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	1ffe8a68 	.word	0x1ffe8a68
 8005a40:	457ff000 	.word	0x457ff000
 8005a44:	461c4000 	.word	0x461c4000
 8005a48:	4576e000 	.word	0x4576e000
 8005a4c:	43889333 	.word	0x43889333

08005a50 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b084      	sub	sp, #16
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	791b      	ldrb	r3, [r3, #4]
 8005a60:	f083 0301 	eor.w	r3, r3, #1
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00f      	beq.n	8005a8a <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f812 	bl	8005a94 <WATCHDOG_lPrewarning_Configure>
 8005a70:	4603      	mov	r3, r0
 8005a72:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d007      	beq.n	8005a8a <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff f8f2 	bl	8004c68 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8005a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3710      	adds	r7, #16
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005aa0:	2001      	movs	r0, #1
 8005aa2:	f7fc fb0f 	bl	80020c4 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005aa6:	2001      	movs	r0, #1
 8005aa8:	f7fc fbb4 	bl	8002214 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3710      	adds	r7, #16
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
 8005ab6:	bf00      	nop

08005ab8 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005ac6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	bf14      	ite	ne
 8005aea:	2301      	movne	r3, #1
 8005aec:	2300      	moveq	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	bf14      	ite	ne
 8005b12:	2301      	movne	r3, #1
 8005b14:	2300      	moveq	r3, #0
 8005b16:	b2db      	uxtb	r3, r3
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	4798      	blx	r3
 8005b38:	4603      	mov	r3, r0
 8005b3a:	73fb      	strb	r3, [r7, #15]

  return status;
 8005b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3710      	adds	r7, #16
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop

08005b48 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8005b54:	2304      	movs	r3, #4
 8005b56:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005b60:	2b02      	cmp	r3, #2
 8005b62:	d000      	beq.n	8005b66 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8005b64:	e007      	b.n	8005b76 <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	68b9      	ldr	r1, [r7, #8]
 8005b6a:	687a      	ldr	r2, [r7, #4]
 8005b6c:	f000 f808 	bl	8005b80 <UART_lStartTransmitPolling>
 8005b70:	4603      	mov	r3, r0
 8005b72:	75fb      	strb	r3, [r7, #23]
    break;
 8005b74:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8005b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d058      	beq.n	8005c48 <UART_lStartTransmitPolling+0xc8>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d055      	beq.n	8005c48 <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	7e1b      	ldrb	r3, [r3, #24]
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	f083 0301 	eor.w	r3, r3, #1
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d04a      	beq.n	8005c48 <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	689b      	ldr	r3, [r3, #8]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d004      	beq.n	8005bd0 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7ff ff74 	bl	8005ab8 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e01c      	b.n	8005c10 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d008      	beq.n	8005bf4 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8005be2:	bf00      	nop
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7ff ff73 	bl	8005ad4 <XMC_USIC_CH_TXFIFO_IsFull>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d1f7      	bne.n	8005be4 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	6819      	ldr	r1, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	4608      	mov	r0, r1
 8005c04:	4619      	mov	r1, r3
 8005c06:	f7fe fdd5 	bl	80047b4 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	613b      	str	r3, [r7, #16]
 8005c10:	693a      	ldr	r2, [r7, #16]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	429a      	cmp	r2, r3
 8005c16:	d3de      	bcc.n	8005bd6 <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d00b      	beq.n	8005c3c <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8005c24:	bf00      	nop
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7ff ff66 	bl	8005afc <XMC_USIC_CH_TXFIFO_IsEmpty>
 8005c30:	4603      	mov	r3, r0
 8005c32:	f083 0301 	eor.w	r3, r3, #1
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f4      	bne.n	8005c26 <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	2200      	movs	r2, #0
 8005c46:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop

08005c54 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	70fb      	strb	r3, [r7, #3]
 8005c60:	4613      	mov	r3, r2
 8005c62:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005c64:	78f8      	ldrb	r0, [r7, #3]
 8005c66:	78fb      	ldrb	r3, [r7, #3]
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	3306      	adds	r3, #6
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8005c76:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	6879      	ldr	r1, [r7, #4]
 8005c7c:	1d83      	adds	r3, r0, #6
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	440b      	add	r3, r1
 8005c82:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop

08005c90 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b082      	sub	sp, #8
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	6839      	ldr	r1, [r7, #0]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f7fe fd1e 	bl	80046e0 <XMC_UART_CH_InitEx>
}
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop

08005cac <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f023 030f 	bic.w	r3, r3, #15
 8005cbc:	f043 0202 	orr.w	r2, r3, #2
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 15U, &UART_0_rx_pin_config);
 8005cda:	4813      	ldr	r0, [pc, #76]	; (8005d28 <UART_0_init+0x58>)
 8005cdc:	210f      	movs	r1, #15
 8005cde:	4a13      	ldr	r2, [pc, #76]	; (8005d2c <UART_0_init+0x5c>)
 8005ce0:	f7fc f888 	bl	8001df4 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8005ce4:	4812      	ldr	r0, [pc, #72]	; (8005d30 <UART_0_init+0x60>)
 8005ce6:	4913      	ldr	r1, [pc, #76]	; (8005d34 <UART_0_init+0x64>)
 8005ce8:	f7ff ffd2 	bl	8005c90 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
 8005cec:	4810      	ldr	r0, [pc, #64]	; (8005d30 <UART_0_init+0x60>)
 8005cee:	2100      	movs	r1, #0
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	f7ff ffaf 	bl	8005c54 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 8005cf6:	480e      	ldr	r0, [pc, #56]	; (8005d30 <UART_0_init+0x60>)
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	2206      	movs	r2, #6
 8005cfc:	233f      	movs	r3, #63	; 0x3f
 8005cfe:	f7fe feff 	bl	8004b00 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_64WORDS,
        63U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8005d02:	480b      	ldr	r0, [pc, #44]	; (8005d30 <UART_0_init+0x60>)
 8005d04:	f7ff ffd2 	bl	8005cac <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 8005d08:	4807      	ldr	r0, [pc, #28]	; (8005d28 <UART_0_init+0x58>)
 8005d0a:	210e      	movs	r1, #14
 8005d0c:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <UART_0_init+0x68>)
 8005d0e:	f7fc f871 	bl	8001df4 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8005d12:	4807      	ldr	r0, [pc, #28]	; (8005d30 <UART_0_init+0x60>)
 8005d14:	2110      	movs	r1, #16
 8005d16:	2200      	movs	r2, #0
 8005d18:	f7fe ff1c 	bl	8004b54 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8005d1c:	79fb      	ldrb	r3, [r7, #7]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	48028200 	.word	0x48028200
 8005d2c:	08012fa4 	.word	0x08012fa4
 8005d30:	48020000 	.word	0x48020000
 8005d34:	08012f58 	.word	0x08012f58
 8005d38:	08012f64 	.word	0x08012f64

08005d3c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b083      	sub	sp, #12
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
 8005d44:	460b      	mov	r3, r1
 8005d46:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8005d48:	78fb      	ldrb	r3, [r7, #3]
 8005d4a:	2201      	movs	r2, #1
 8005d4c:	409a      	lsls	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60da      	str	r2, [r3, #12]
}
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	689b      	ldr	r3, [r3, #8]
 8005d68:	f003 0301 	and.w	r3, r3, #1
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	370c      	adds	r7, #12
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop

08005d84 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	60da      	str	r2, [r3, #12]
}
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	611a      	str	r2, [r3, #16]
}
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	611a      	str	r2, [r3, #16]
}
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8005dd8:	887a      	ldrh	r2, [r7, #2]
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	460b      	mov	r3, r1
 8005df2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8005df4:	887a      	ldrh	r2, [r7, #2]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
 8005e0c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	683a      	ldr	r2, [r7, #0]
 8005e12:	611a      	str	r2, [r3, #16]
}
 8005e14:	370c      	adds	r7, #12
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr
 8005e1e:	bf00      	nop

08005e20 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	409a      	lsls	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop

08005e44 <XMC_CCU4_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	460b      	mov	r3, r1
 8005e4e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  return (((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005e56:	78fb      	ldrb	r3, [r7, #3]
 8005e58:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5c:	f003 0301 	and.w	r3, r3, #1
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	bf14      	ite	ne
 8005e64:	2301      	movne	r3, #1
 8005e66:	2300      	moveq	r3, #0
 8005e68:	b2db      	uxtb	r3, r3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
 8005e76:	bf00      	nop

08005e78 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b083      	sub	sp, #12
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	460b      	mov	r3, r1
 8005e82:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8005e84:	78fb      	ldrb	r3, [r7, #3]
 8005e86:	2201      	movs	r2, #1
 8005e88:	409a      	lsls	r2, r3
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	60da      	str	r2, [r3, #12]
}
 8005e8e:	370c      	adds	r7, #12
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr

08005e98 <XMC_CCU8_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 0301 	and.w	r3, r3, #1
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	bf14      	ite	ne
 8005eac:	2301      	movne	r3, #1
 8005eae:	2300      	moveq	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	370c      	adds	r7, #12
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop

08005ec0 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	60da      	str	r2, [r3, #12]
}
 8005ece:	370c      	adds	r7, #12
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed6:	4770      	bx	lr

08005ed8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	611a      	str	r2, [r3, #16]
}
 8005ee6:	370c      	adds	r7, #12
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	611a      	str	r2, [r3, #16]
}
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	683a      	ldr	r2, [r7, #0]
 8005f16:	611a      	str	r2, [r3, #16]
}
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr
 8005f22:	bf00      	nop

08005f24 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8005f30:	78fb      	ldrb	r3, [r7, #3]
 8005f32:	2201      	movs	r2, #1
 8005f34:	409a      	lsls	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f3c:	370c      	adds	r7, #12
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f44:	4770      	bx	lr
 8005f46:	bf00      	nop

08005f48 <XMC_CCU8_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
 8005f50:	460b      	mov	r3, r1
 8005f52:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  return (((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005f5a:	78fb      	ldrb	r3, [r7, #3]
 8005f5c:	fa22 f303 	lsr.w	r3, r2, r3
 8005f60:	f003 0301 	and.w	r3, r3, #1
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	370c      	adds	r7, #12
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr
 8005f7a:	bf00      	nop

08005f7c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8005f84:	2300      	movs	r3, #0
 8005f86:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f8e:	f083 0301 	eor.w	r3, r3, #1
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d013      	beq.n	8005fc0 <TIMER_Init+0x44>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f000 f9cc 	bl	8006340 <TIMER_CCU4_lInit>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	73fb      	strb	r3, [r7, #15]
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d104      	bne.n	8005fc0 <TIMER_Init+0x44>
    {
      /* Configure CCU8 timer for the required time tick settings */
      status = TIMER_CCU8_lInit(handle_ptr);
 8005fb6:	6878      	ldr	r0, [r7, #4]
 8005fb8:	f000 fa18 	bl	80063ec <TIMER_CCU8_lInit>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return (status);
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop

08005fcc <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d016      	beq.n	800600c <TIMER_Start+0x40>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d104      	bne.n	8005ff2 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7ff fec9 	bl	8005d84 <XMC_CCU4_SLICE_StartTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	d104      	bne.n	8006006 <TIMER_Start+0x3a>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006000:	4618      	mov	r0, r3
 8006002:	f7ff ff5d 	bl	8005ec0 <XMC_CCU8_SLICE_StartTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
 800600a:	e001      	b.n	8006010 <TIMER_Start+0x44>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006010:	7bfb      	ldrb	r3, [r7, #15]
}
 8006012:	4618      	mov	r0, r3
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop

0800601c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b084      	sub	sp, #16
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 f827 	bl	8006078 <TIMER_GetTimerStatus>
 800602a:	4603      	mov	r3, r0
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01b      	beq.n	8006068 <TIMER_Stop+0x4c>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006036:	2b00      	cmp	r3, #0
 8006038:	d016      	beq.n	8006068 <TIMER_Stop+0x4c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006040:	2b00      	cmp	r3, #0
 8006042:	d104      	bne.n	800604e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff fea7 	bl	8005d9c <XMC_CCU4_SLICE_StopTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006054:	2b01      	cmp	r3, #1
 8006056:	d104      	bne.n	8006062 <TIMER_Stop+0x46>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff3b 	bl	8005ed8 <XMC_CCU8_SLICE_StopTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
 8006066:	e001      	b.n	800606c <TIMER_Stop+0x50>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8006068:	2301      	movs	r3, #1
 800606a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800606c:	7bfb      	ldrb	r3, [r7, #15]
}
 800606e:	4618      	mov	r0, r3
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop

08006078 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 8006080:	2300      	movs	r3, #0
 8006082:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800608a:	2b00      	cmp	r3, #0
 800608c:	d106      	bne.n	800609c <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	4618      	mov	r0, r3
 8006094:	f7ff fe62 	bl	8005d5c <XMC_CCU4_SLICE_IsTimerRunning>
 8006098:	4603      	mov	r3, r0
 800609a:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d106      	bne.n	80060b4 <TIMER_GetTimerStatus+0x3c>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	4618      	mov	r0, r3
 80060ac:	f7ff fef4 	bl	8005e98 <XMC_CCU8_SLICE_IsTimerRunning>
 80060b0:	4603      	mov	r3, r0
 80060b2:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 80060b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3710      	adds	r7, #16
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
 80060be:	bf00      	nop

080060c0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 80060c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80060c4:	b087      	sub	sp, #28
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
 80060ca:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 80060cc:	2301      	movs	r3, #1
 80060ce:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7ff ffd1 	bl	8006078 <TIMER_GetTimerStatus>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f083 0301 	eor.w	r3, r3, #1
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 80de 	beq.w	80062a0 <TIMER_SetTimeInterval+0x1e0>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f200 80d8 	bhi.w	80062a0 <TIMER_SetTimeInterval+0x1e0>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	f0c0 80d2 	bcc.w	80062a0 <TIMER_SetTimeInterval+0x1e0>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006100:	e002      	b.n	8006108 <TIMER_SetTimeInterval+0x48>
      {
        lprescaler++;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	3301      	adds	r3, #1
 8006106:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	f1c2 020f 	rsb	r2, r2, #15
 8006112:	fa23 f202 	lsr.w	r2, r3, r2
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d3f2      	bcc.n	8006102 <TIMER_SetTimeInterval+0x42>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006122:	2b00      	cmp	r3, #0
 8006124:	d15c      	bne.n	80061e0 <TIMER_SetTimeInterval+0x120>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	69da      	ldr	r2, [r3, #28]
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	b2db      	uxtb	r3, r3
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	b2d9      	uxtb	r1, r3
 800613c:	7913      	ldrb	r3, [r2, #4]
 800613e:	f361 0303 	bfi	r3, r1, #0, #4
 8006142:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	4618      	mov	r0, r3
 8006148:	f04f 0100 	mov.w	r1, #0
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 0300 	mov.w	r3, #0
 8006154:	fb02 fe01 	mul.w	lr, r2, r1
 8006158:	fb00 f603 	mul.w	r6, r0, r3
 800615c:	4476      	add	r6, lr
 800615e:	fba0 2302 	umull	r2, r3, r0, r2
 8006162:	18f1      	adds	r1, r6, r3
 8006164:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	69c9      	ldr	r1, [r1, #28]
 800616a:	7909      	ldrb	r1, [r1, #4]
 800616c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006170:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006172:	f1c1 0620 	rsb	r6, r1, #32
 8006176:	f1a1 0020 	sub.w	r0, r1, #32
 800617a:	fa22 f801 	lsr.w	r8, r2, r1
 800617e:	fa03 f606 	lsl.w	r6, r3, r6
 8006182:	ea48 0806 	orr.w	r8, r8, r6
 8006186:	fa23 f000 	lsr.w	r0, r3, r0
 800618a:	ea48 0800 	orr.w	r8, r8, r0
 800618e:	fa23 f901 	lsr.w	r9, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8006192:	4640      	mov	r0, r8
 8006194:	4649      	mov	r1, r9
 8006196:	a346      	add	r3, pc, #280	; (adr r3, 80062b0 <TIMER_SetTimeInterval+0x1f0>)
 8006198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800619c:	f00a ff5e 	bl	801105c <__aeabi_uldivmod>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80061a4:	b292      	uxth	r2, r2
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d905      	bls.n	80061be <TIMER_SetTimeInterval+0xfe>
        {
          (handle_ptr->period_value)--;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695a      	ldr	r2, [r3, #20]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	791b      	ldrb	r3, [r3, #4]
 80061c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	4619      	mov	r1, r3
 80061d2:	f7fd f8f9 	bl	80033c8 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f8ea 	bl	80063b0 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80061dc:	2300      	movs	r3, #0
 80061de:	75fb      	strb	r3, [r7, #23]
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d15a      	bne.n	80062a0 <TIMER_SetTimeInterval+0x1e0>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	b2db      	uxtb	r3, r3
 80061f2:	f003 030f 	and.w	r3, r3, #15
 80061f6:	b2d9      	uxtb	r1, r3
 80061f8:	7b13      	ldrb	r3, [r2, #12]
 80061fa:	f361 0303 	bfi	r3, r1, #0, #4
 80061fe:	7313      	strb	r3, [r2, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60fb      	str	r3, [r7, #12]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	4618      	mov	r0, r3
 800620c:	f04f 0100 	mov.w	r1, #0
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	461a      	mov	r2, r3
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	fb02 fe01 	mul.w	lr, r2, r1
 800621c:	fb00 f603 	mul.w	r6, r0, r3
 8006220:	4476      	add	r6, lr
 8006222:	fba0 2302 	umull	r2, r3, r0, r2
 8006226:	18f1      	adds	r1, r6, r3
 8006228:	460b      	mov	r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 800622a:	6879      	ldr	r1, [r7, #4]
 800622c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800622e:	7b09      	ldrb	r1, [r1, #12]
 8006230:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006234:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006236:	f1c1 0620 	rsb	r6, r1, #32
 800623a:	f1a1 0020 	sub.w	r0, r1, #32
 800623e:	fa22 f401 	lsr.w	r4, r2, r1
 8006242:	fa03 f606 	lsl.w	r6, r3, r6
 8006246:	4334      	orrs	r4, r6
 8006248:	fa23 f000 	lsr.w	r0, r3, r0
 800624c:	4304      	orrs	r4, r0
 800624e:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 8006252:	4620      	mov	r0, r4
 8006254:	4629      	mov	r1, r5
 8006256:	a316      	add	r3, pc, #88	; (adr r3, 80062b0 <TIMER_SetTimeInterval+0x1f0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f00a fefe 	bl	801105c <__aeabi_uldivmod>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006264:	b292      	uxth	r2, r2
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800626e:	2b01      	cmp	r3, #1
 8006270:	d905      	bls.n	800627e <TIMER_SetTimeInterval+0x1be>
        {
          (handle_ptr->period_value)--;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006276:	3b01      	subs	r3, #1
 8006278:	b29a      	uxth	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	7b1b      	ldrb	r3, [r3, #12]
 8006288:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800628c:	b2db      	uxtb	r3, r3
 800628e:	4610      	mov	r0, r2
 8006290:	4619      	mov	r1, r3
 8006292:	f7fd f97f 	bl	8003594 <XMC_CCU8_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f8e0 	bl	800645c <TIMER_CCU8_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 800629c:	2300      	movs	r3, #0
 800629e:	75fb      	strb	r3, [r7, #23]
      }
#endif
    }
  }
  return (status);
 80062a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	371c      	adds	r7, #28
 80062a6:	46bd      	mov	sp, r7
 80062a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062ac:	f3af 8000 	nop.w
 80062b0:	05f5e100 	.word	0x05f5e100
 80062b4:	00000000 	.word	0x00000000

080062b8 <TIMER_GetInterruptStatus>:

/*
 * This function reads the timer event(period match interrupt) status of the given timer
 */
bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  bool status;
  XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
  status = false;
 80062c0:	2300      	movs	r3, #0
 80062c2:	73fb      	strb	r3, [r7, #15]
#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d107      	bne.n	80062de <TIMER_GetInterruptStatus+0x26>
  {
    /* Reads the interrupt status */
    status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	695b      	ldr	r3, [r3, #20]
 80062d2:	4618      	mov	r0, r3
 80062d4:	2100      	movs	r1, #0
 80062d6:	f7ff fdb5 	bl	8005e44 <XMC_CCU4_SLICE_GetEvent>
 80062da:	4603      	mov	r3, r0
 80062dc:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d107      	bne.n	80062f8 <TIMER_GetInterruptStatus+0x40>
  {
    /* Reads the interrupt status */
    status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ec:	4618      	mov	r0, r3
 80062ee:	2100      	movs	r1, #0
 80062f0:	f7ff fe2a 	bl	8005f48 <XMC_CCU8_SLICE_GetEvent>
 80062f4:	4603      	mov	r3, r0
 80062f6:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop

08006304 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006312:	2b00      	cmp	r3, #0
 8006314:	d105      	bne.n	8006322 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	4618      	mov	r0, r3
 800631c:	2100      	movs	r1, #0
 800631e:	f7ff fd7f 	bl	8005e20 <XMC_CCU4_SLICE_ClearEvent>
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006328:	2b01      	cmp	r3, #1
 800632a:	d105      	bne.n	8006338 <TIMER_ClearEvent+0x34>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006330:	4618      	mov	r0, r3
 8006332:	2100      	movs	r1, #0
 8006334:	f7ff fdf6 	bl	8005f24 <XMC_CCU8_SLICE_ClearEvent>
  }
#endif
}
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop

08006340 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	4618      	mov	r0, r3
 800634e:	f002 f811 	bl	8008374 <GLOBAL_CCU4_Init>
 8006352:	4603      	mov	r3, r0
 8006354:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	689a      	ldr	r2, [r3, #8]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7e1b      	ldrb	r3, [r3, #24]
 8006360:	4610      	mov	r0, r2
 8006362:	4619      	mov	r1, r3
 8006364:	f7ff fcea 	bl	8005d3c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	695a      	ldr	r2, [r3, #20]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	69db      	ldr	r3, [r3, #28]
 8006370:	4610      	mov	r0, r2
 8006372:	4619      	mov	r1, r3
 8006374:	f7fc fff2 	bl	800335c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 f819 	bl	80063b0 <TIMER_CCU4_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	4618      	mov	r0, r3
 8006384:	f7ff fd16 	bl	8005db4 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006396:	2b00      	cmp	r3, #0
 8006398:	d004      	beq.n	80063a4 <TIMER_CCU4_lInit+0x64>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7ff fcf0 	bl	8005d84 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop

080063b0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b082      	sub	sp, #8
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80063c0:	4610      	mov	r0, r2
 80063c2:	4619      	mov	r1, r3
 80063c4:	f7ff fd02 	bl	8005dcc <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	695b      	ldr	r3, [r3, #20]
 80063cc:	4618      	mov	r0, r3
 80063ce:	2100      	movs	r1, #0
 80063d0:	f7ff fd0a 	bl	8005de8 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	689a      	ldr	r2, [r3, #8]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	68db      	ldr	r3, [r3, #12]
 80063de:	4610      	mov	r0, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	f7ff fd0f 	bl	8005e04 <XMC_CCU4_EnableShadowTransfer>
}
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <TIMER_CCU8_lInit>:
#ifdef TIMER_CCU8_USED
/*
 * This function configures timer ccu8 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b084      	sub	sp, #16
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 ff8d 	bl	8008318 <GLOBAL_CCU8_Init>
 80063fe:	4603      	mov	r3, r0
 8006400:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006406:	689a      	ldr	r2, [r3, #8]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800640e:	4610      	mov	r0, r2
 8006410:	4619      	mov	r1, r3
 8006412:	f7ff fd31 	bl	8005e78 <XMC_CCU8_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641e:	4610      	mov	r0, r2
 8006420:	4619      	mov	r1, r3
 8006422:	f7fd f86f 	bl	8003504 <XMC_CCU8_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 f818 	bl	800645c <TIMER_CCU8_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006430:	4618      	mov	r0, r3
 8006432:	f7ff fd5d 	bl	8005ef0 <XMC_CCU8_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006444:	2b00      	cmp	r3, #0
 8006446:	d004      	beq.n	8006452 <TIMER_CCU8_lInit+0x66>
  {
    /* Start the timer */
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644c:	4618      	mov	r0, r3
 800644e:	f7ff fd37 	bl	8005ec0 <XMC_CCU8_SLICE_StartTimer>
  }

  return (status);
 8006452:	7bfb      	ldrb	r3, [r7, #15]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <TIMER_CCU8_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800646c:	4610      	mov	r0, r2
 800646e:	4619      	mov	r1, r3
 8006470:	f7fd f882 	bl	8003578 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	4618      	mov	r0, r3
 800647a:	2100      	movs	r1, #0
 800647c:	2200      	movs	r2, #0
 800647e:	f7fd f8a7 	bl	80035d0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006486:	689a      	ldr	r2, [r3, #8]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	68db      	ldr	r3, [r3, #12]
 800648c:	4610      	mov	r0, r2
 800648e:	4619      	mov	r1, r3
 8006490:	f7ff fd3a 	bl	8005f08 <XMC_CCU8_EnableShadowTransfer>
}
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop

0800649c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800649c:	b480      	push	{r7}
 800649e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80064a0:	4b04      	ldr	r3, [pc, #16]	; (80064b4 <__NVIC_GetPriorityGrouping+0x18>)
 80064a2:	68db      	ldr	r3, [r3, #12]
 80064a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064a8:	0a1b      	lsrs	r3, r3, #8
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	e000ed00 	.word	0xe000ed00

080064b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b083      	sub	sp, #12
 80064bc:	af00      	add	r7, sp, #0
 80064be:	4603      	mov	r3, r0
 80064c0:	6039      	str	r1, [r7, #0]
 80064c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80064c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db0a      	blt.n	80064e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064cc:	490d      	ldr	r1, [pc, #52]	; (8006504 <__NVIC_SetPriority+0x4c>)
 80064ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064d2:	683a      	ldr	r2, [r7, #0]
 80064d4:	b2d2      	uxtb	r2, r2
 80064d6:	0092      	lsls	r2, r2, #2
 80064d8:	b2d2      	uxtb	r2, r2
 80064da:	440b      	add	r3, r1
 80064dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80064e0:	e00a      	b.n	80064f8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80064e2:	4909      	ldr	r1, [pc, #36]	; (8006508 <__NVIC_SetPriority+0x50>)
 80064e4:	79fb      	ldrb	r3, [r7, #7]
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	3b04      	subs	r3, #4
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	0092      	lsls	r2, r2, #2
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	440b      	add	r3, r1
 80064f6:	761a      	strb	r2, [r3, #24]
  }
}
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	e000e100 	.word	0xe000e100
 8006508:	e000ed00 	.word	0xe000ed00

0800650c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	f1c3 0307 	rsb	r3, r3, #7
 8006526:	2b06      	cmp	r3, #6
 8006528:	bf28      	it	cs
 800652a:	2306      	movcs	r3, #6
 800652c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	3306      	adds	r3, #6
 8006532:	2b06      	cmp	r3, #6
 8006534:	d902      	bls.n	800653c <NVIC_EncodePriority+0x30>
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	3b01      	subs	r3, #1
 800653a:	e000      	b.n	800653e <NVIC_EncodePriority+0x32>
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006540:	69bb      	ldr	r3, [r7, #24]
 8006542:	2201      	movs	r2, #1
 8006544:	fa02 f303 	lsl.w	r3, r2, r3
 8006548:	1e5a      	subs	r2, r3, #1
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	401a      	ands	r2, r3
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	2101      	movs	r1, #1
 8006556:	fa01 f303 	lsl.w	r3, r1, r3
 800655a:	1e59      	subs	r1, r3, #1
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006560:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006562:	4618      	mov	r0, r3
 8006564:	3724      	adds	r7, #36	; 0x24
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop

08006570 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b082      	sub	sp, #8
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3b01      	subs	r3, #1
 800657c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006580:	d301      	bcc.n	8006586 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006582:	2301      	movs	r3, #1
 8006584:	e00f      	b.n	80065a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006586:	4a0a      	ldr	r2, [pc, #40]	; (80065b0 <SysTick_Config+0x40>)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	3b01      	subs	r3, #1
 800658c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800658e:	f04f 30ff 	mov.w	r0, #4294967295
 8006592:	213f      	movs	r1, #63	; 0x3f
 8006594:	f7ff ff90 	bl	80064b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <SysTick_Config+0x40>)
 800659a:	2200      	movs	r2, #0
 800659c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800659e:	4b04      	ldr	r3, [pc, #16]	; (80065b0 <SysTick_Config+0x40>)
 80065a0:	2207      	movs	r2, #7
 80065a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3708      	adds	r7, #8
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	e000e010 	.word	0xe000e010

080065b4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80065b4:	b490      	push	{r4, r7}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80065bc:	2300      	movs	r3, #0
 80065be:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80065c0:	496b      	ldr	r1, [pc, #428]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80065c2:	687a      	ldr	r2, [r7, #4]
 80065c4:	4613      	mov	r3, r2
 80065c6:	00db      	lsls	r3, r3, #3
 80065c8:	4413      	add	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	3318      	adds	r3, #24
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80065d4:	4b67      	ldr	r3, [pc, #412]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d109      	bne.n	80065f0 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80065dc:	687a      	ldr	r2, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4a62      	ldr	r2, [pc, #392]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80065e8:	4413      	add	r3, r2
 80065ea:	4a62      	ldr	r2, [pc, #392]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	e0bb      	b.n	8006768 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 80065f0:	4b60      	ldr	r3, [pc, #384]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 80065fa:	e0ab      	b.n	8006754 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	461a      	mov	r2, r3
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	1a9b      	subs	r3, r3, r2
 8006606:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	2b00      	cmp	r3, #0
 800660c:	dc7a      	bgt.n	8006704 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d026      	beq.n	8006664 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6859      	ldr	r1, [r3, #4]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	4613      	mov	r3, r2
 800661e:	00db      	lsls	r3, r3, #3
 8006620:	4413      	add	r3, r2
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	4a52      	ldr	r2, [pc, #328]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006626:	4413      	add	r3, r2
 8006628:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	6859      	ldr	r1, [r3, #4]
 800662e:	4850      	ldr	r0, [pc, #320]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4613      	mov	r3, r2
 8006634:	00db      	lsls	r3, r3, #3
 8006636:	4413      	add	r3, r2
 8006638:	009b      	lsls	r3, r3, #2
 800663a:	4403      	add	r3, r0
 800663c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800663e:	494c      	ldr	r1, [pc, #304]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006640:	687a      	ldr	r2, [r7, #4]
 8006642:	4613      	mov	r3, r2
 8006644:	00db      	lsls	r3, r3, #3
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	697a      	ldr	r2, [r7, #20]
 800664e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	4a45      	ldr	r2, [pc, #276]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 800665c:	441a      	add	r2, r3
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	605a      	str	r2, [r3, #4]
 8006662:	e01c      	b.n	800669e <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8006664:	4b43      	ldr	r3, [pc, #268]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006666:	6819      	ldr	r1, [r3, #0]
 8006668:	4841      	ldr	r0, [pc, #260]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	4403      	add	r3, r0
 8006676:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8006678:	4b3e      	ldr	r3, [pc, #248]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 800667a:	6819      	ldr	r1, [r3, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	4613      	mov	r3, r2
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	4413      	add	r3, r2
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4a3a      	ldr	r2, [pc, #232]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006688:	4413      	add	r3, r2
 800668a:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4a36      	ldr	r2, [pc, #216]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006698:	4413      	add	r3, r2
 800669a:	4a36      	ldr	r2, [pc, #216]	; (8006774 <SYSTIMER_lInsertTimerList+0x1c0>)
 800669c:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 800669e:	4934      	ldr	r1, [pc, #208]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066a0:	687a      	ldr	r2, [r7, #4]
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	699a      	ldr	r2, [r3, #24]
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	18d1      	adds	r1, r2, r3
 80066b4:	482e      	ldr	r0, [pc, #184]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066b6:	687a      	ldr	r2, [r7, #4]
 80066b8:	4613      	mov	r3, r2
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4403      	add	r3, r0
 80066c2:	3318      	adds	r3, #24
 80066c4:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 80066c6:	492a      	ldr	r1, [pc, #168]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	4826      	ldr	r0, [pc, #152]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	00db      	lsls	r3, r3, #3
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4403      	add	r3, r0
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6998      	ldr	r0, [r3, #24]
 80066e8:	4c21      	ldr	r4, [pc, #132]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	4613      	mov	r3, r2
 80066ee:	00db      	lsls	r3, r3, #3
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4423      	add	r3, r4
 80066f6:	3318      	adds	r3, #24
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	1ac3      	subs	r3, r0, r3
 80066fc:	618b      	str	r3, [r1, #24]
        found_flag = true;
 80066fe:	2301      	movs	r3, #1
 8006700:	73fb      	strb	r3, [r7, #15]
 8006702:	e024      	b.n	800674e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	dd21      	ble.n	800674e <SYSTIMER_lInsertTimerList+0x19a>
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d11d      	bne.n	800674e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8006712:	4917      	ldr	r1, [pc, #92]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006714:	687a      	ldr	r2, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	4613      	mov	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	4413      	add	r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	4a10      	ldr	r2, [pc, #64]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006730:	441a      	add	r2, r3
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8006736:	6939      	ldr	r1, [r7, #16]
 8006738:	480d      	ldr	r0, [pc, #52]	; (8006770 <SYSTIMER_lInsertTimerList+0x1bc>)
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4403      	add	r3, r0
 8006746:	3318      	adds	r3, #24
 8006748:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d006      	beq.n	8006768 <SYSTIMER_lInsertTimerList+0x1b4>
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	f083 0301 	eor.w	r3, r3, #1
 8006760:	b2db      	uxtb	r3, r3
 8006762:	2b00      	cmp	r3, #0
 8006764:	f47f af4a 	bne.w	80065fc <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bc90      	pop	{r4, r7}
 800676e:	4770      	bx	lr
 8006770:	1fff5108 	.word	0x1fff5108
 8006774:	1fff43f8 	.word	0x1fff43f8

08006778 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4a29      	ldr	r2, [pc, #164]	; (8006830 <SYSTIMER_lRemoveTimerList+0xb8>)
 800678c:	4413      	add	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d107      	bne.n	80067a8 <SYSTIMER_lRemoveTimerList+0x30>
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d103      	bne.n	80067a8 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80067a0:	4b24      	ldr	r3, [pc, #144]	; (8006834 <SYSTIMER_lRemoveTimerList+0xbc>)
 80067a2:	2200      	movs	r2, #0
 80067a4:	601a      	str	r2, [r3, #0]
 80067a6:	e03d      	b.n	8006824 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d114      	bne.n	80067da <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a1f      	ldr	r2, [pc, #124]	; (8006834 <SYSTIMER_lRemoveTimerList+0xbc>)
 80067b6:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80067b8:	4b1e      	ldr	r3, [pc, #120]	; (8006834 <SYSTIMER_lRemoveTimerList+0xbc>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2200      	movs	r2, #0
 80067be:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80067c0:	4b1c      	ldr	r3, [pc, #112]	; (8006834 <SYSTIMER_lRemoveTimerList+0xbc>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a1b      	ldr	r2, [pc, #108]	; (8006834 <SYSTIMER_lRemoveTimerList+0xbc>)
 80067c6:	6812      	ldr	r2, [r2, #0]
 80067c8:	6991      	ldr	r1, [r2, #24]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	6992      	ldr	r2, [r2, #24]
 80067ce:	440a      	add	r2, r1
 80067d0:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	2200      	movs	r2, #0
 80067d6:	601a      	str	r2, [r3, #0]
 80067d8:	e024      	b.n	8006824 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d107      	bne.n	80067f2 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	605a      	str	r2, [r3, #4]
 80067f0:	e018      	b.n	8006824 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	6812      	ldr	r2, [r2, #0]
 80067fa:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	6852      	ldr	r2, [r2, #4]
 8006804:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68fa      	ldr	r2, [r7, #12]
 800680c:	6812      	ldr	r2, [r2, #0]
 800680e:	6991      	ldr	r1, [r2, #24]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	6992      	ldr	r2, [r2, #24]
 8006814:	440a      	add	r2, r1
 8006816:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	605a      	str	r2, [r3, #4]
  }
}
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	1fff5108 	.word	0x1fff5108
 8006834:	1fff43f8 	.word	0x1fff43f8

08006838 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800683e:	4b2f      	ldr	r3, [pc, #188]	; (80068fc <SYSTIMER_lTimerHandler+0xc4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006844:	e050      	b.n	80068e8 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d013      	beq.n	8006878 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	695b      	ldr	r3, [r3, #20]
 8006854:	4618      	mov	r0, r3
 8006856:	f7ff ff8f 	bl	8006778 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	461a      	mov	r2, r3
 8006866:	2301      	movs	r3, #1
 8006868:	4093      	lsls	r3, r2
 800686a:	43da      	mvns	r2, r3
 800686c:	4b24      	ldr	r3, [pc, #144]	; (8006900 <SYSTIMER_lTimerHandler+0xc8>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4013      	ands	r3, r2
 8006872:	4a23      	ldr	r2, [pc, #140]	; (8006900 <SYSTIMER_lTimerHandler+0xc8>)
 8006874:	6013      	str	r3, [r2, #0]
 8006876:	e034      	b.n	80068e2 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	7b1b      	ldrb	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d112      	bne.n	80068a6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	7b5b      	ldrb	r3, [r3, #13]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d12c      	bne.n	80068e2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	695b      	ldr	r3, [r3, #20]
 800688c:	4618      	mov	r0, r3
 800688e:	f7ff ff73 	bl	8006778 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2202      	movs	r2, #2
 8006896:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6912      	ldr	r2, [r2, #16]
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	e01d      	b.n	80068e2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	7b1b      	ldrb	r3, [r3, #12]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d118      	bne.n	80068e0 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	7b5b      	ldrb	r3, [r3, #13]
 80068b2:	2b01      	cmp	r3, #1
 80068b4:	d115      	bne.n	80068e2 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ff5c 	bl	8006778 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	69da      	ldr	r2, [r3, #28]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695b      	ldr	r3, [r3, #20]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f7ff fe71 	bl	80065b4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6912      	ldr	r2, [r2, #16]
 80068da:	4610      	mov	r0, r2
 80068dc:	4798      	blx	r3
 80068de:	e000      	b.n	80068e2 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 80068e0:	e009      	b.n	80068f6 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <SYSTIMER_lTimerHandler+0xc4>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <SYSTIMER_lTimerHandler+0xbe>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d0a7      	beq.n	8006846 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	1fff43f8 	.word	0x1fff43f8
 8006900:	1fff43fc 	.word	0x1fff43fc

08006904 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 800690a:	4b0e      	ldr	r3, [pc, #56]	; (8006944 <SysTick_Handler+0x40>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8006910:	4b0d      	ldr	r3, [pc, #52]	; (8006948 <SysTick_Handler+0x44>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	3301      	adds	r3, #1
 8006916:	4a0c      	ldr	r2, [pc, #48]	; (8006948 <SysTick_Handler+0x44>)
 8006918:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00e      	beq.n	800693e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	699b      	ldr	r3, [r3, #24]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d905      	bls.n	8006934 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	619a      	str	r2, [r3, #24]
 8006932:	e004      	b.n	800693e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	2200      	movs	r2, #0
 8006938:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 800693a:	f7ff ff7d 	bl	8006838 <SYSTIMER_lTimerHandler>
    }
  }
}
 800693e:	3708      	adds	r7, #8
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	1fff43f8 	.word	0x1fff43f8
 8006948:	1fff4400 	.word	0x1fff4400

0800694c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8006954:	2300      	movs	r3, #0
 8006956:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	f083 0301 	eor.w	r3, r3, #1
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8006966:	4b13      	ldr	r3, [pc, #76]	; (80069b4 <SYSTIMER_Init+0x68>)
 8006968:	2200      	movs	r2, #0
 800696a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 800696c:	4812      	ldr	r0, [pc, #72]	; (80069b8 <SYSTIMER_Init+0x6c>)
 800696e:	f7ff fdff 	bl	8006570 <SysTick_Config>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8006976:	7bfb      	ldrb	r3, [r7, #15]
 8006978:	2b01      	cmp	r3, #1
 800697a:	d015      	beq.n	80069a8 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 800697c:	f7ff fd8e 	bl	800649c <__NVIC_GetPriorityGrouping>
 8006980:	4603      	mov	r3, r0
 8006982:	4618      	mov	r0, r3
 8006984:	213f      	movs	r1, #63	; 0x3f
 8006986:	2200      	movs	r2, #0
 8006988:	f7ff fdc0 	bl	800650c <NVIC_EncodePriority>
 800698c:	4603      	mov	r3, r0
 800698e:	f04f 30ff 	mov.w	r0, #4294967295
 8006992:	4619      	mov	r1, r3
 8006994:	f7ff fd90 	bl	80064b8 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8006998:	4b08      	ldr	r3, [pc, #32]	; (80069bc <SYSTIMER_Init+0x70>)
 800699a:	2200      	movs	r2, #0
 800699c:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2201      	movs	r2, #1
 80069a2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 80069a4:	2300      	movs	r3, #0
 80069a6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 80069a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	1fff43f8 	.word	0x1fff43f8
 80069b8:	00023280 	.word	0x00023280
 80069bc:	1fff43fc 	.word	0x1fff43fc

080069c0 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 80069c0:	b480      	push	{r7}
 80069c2:	b089      	sub	sp, #36	; 0x24
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	60f8      	str	r0, [r7, #12]
 80069c8:	607a      	str	r2, [r7, #4]
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	460b      	mov	r3, r1
 80069ce:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 80069d0:	2300      	movs	r3, #0
 80069d2:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 80069d4:	2300      	movs	r3, #0
 80069d6:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 80069d8:	2300      	movs	r3, #0
 80069da:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069e2:	d202      	bcs.n	80069ea <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 80069e4:	2300      	movs	r3, #0
 80069e6:	61fb      	str	r3, [r7, #28]
 80069e8:	e07b      	b.n	8006ae2 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 80069ea:	2300      	movs	r3, #0
 80069ec:	61bb      	str	r3, [r7, #24]
 80069ee:	e075      	b.n	8006adc <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 80069f0:	69bb      	ldr	r3, [r7, #24]
 80069f2:	2201      	movs	r2, #1
 80069f4:	409a      	lsls	r2, r3
 80069f6:	4b3e      	ldr	r3, [pc, #248]	; (8006af0 <SYSTIMER_CreateTimer+0x130>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d16a      	bne.n	8006ad6 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	2201      	movs	r2, #1
 8006a04:	409a      	lsls	r2, r3
 8006a06:	4b3a      	ldr	r3, [pc, #232]	; (8006af0 <SYSTIMER_CreateTimer+0x130>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4313      	orrs	r3, r2
 8006a0c:	4a38      	ldr	r2, [pc, #224]	; (8006af0 <SYSTIMER_CreateTimer+0x130>)
 8006a0e:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8006a10:	4938      	ldr	r1, [pc, #224]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4613      	mov	r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	4413      	add	r3, r2
 8006a1a:	009b      	lsls	r3, r3, #2
 8006a1c:	440b      	add	r3, r1
 8006a1e:	3310      	adds	r3, #16
 8006a20:	69ba      	ldr	r2, [r7, #24]
 8006a22:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8006a24:	4933      	ldr	r1, [pc, #204]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a26:	69ba      	ldr	r2, [r7, #24]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	440b      	add	r3, r1
 8006a32:	3308      	adds	r3, #8
 8006a34:	7afa      	ldrb	r2, [r7, #11]
 8006a36:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8006a38:	492e      	ldr	r1, [pc, #184]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a3a:	69ba      	ldr	r2, [r7, #24]
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	440b      	add	r3, r1
 8006a46:	3308      	adds	r3, #8
 8006a48:	2202      	movs	r2, #2
 8006a4a:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	4a2a      	ldr	r2, [pc, #168]	; (8006af8 <SYSTIMER_CreateTimer+0x138>)
 8006a50:	fba2 2303 	umull	r2, r3, r2, r3
 8006a54:	099b      	lsrs	r3, r3, #6
 8006a56:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	1c59      	adds	r1, r3, #1
 8006a5c:	4825      	ldr	r0, [pc, #148]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a5e:	69ba      	ldr	r2, [r7, #24]
 8006a60:	4613      	mov	r3, r2
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	4413      	add	r3, r2
 8006a66:	009b      	lsls	r3, r3, #2
 8006a68:	4403      	add	r3, r0
 8006a6a:	3318      	adds	r3, #24
 8006a6c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8006a6e:	4921      	ldr	r1, [pc, #132]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	4613      	mov	r3, r2
 8006a74:	00db      	lsls	r3, r3, #3
 8006a76:	4413      	add	r3, r2
 8006a78:	009b      	lsls	r3, r3, #2
 8006a7a:	440b      	add	r3, r1
 8006a7c:	3318      	adds	r3, #24
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8006a82:	491c      	ldr	r1, [pc, #112]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a84:	69ba      	ldr	r2, [r7, #24]
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	3308      	adds	r3, #8
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8006a96:	4917      	ldr	r1, [pc, #92]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006a98:	69ba      	ldr	r2, [r7, #24]
 8006a9a:	4613      	mov	r3, r2
 8006a9c:	00db      	lsls	r3, r3, #3
 8006a9e:	4413      	add	r3, r2
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3310      	adds	r3, #16
 8006aa6:	683a      	ldr	r2, [r7, #0]
 8006aa8:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8006aaa:	4912      	ldr	r1, [pc, #72]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006aac:	69ba      	ldr	r2, [r7, #24]
 8006aae:	4613      	mov	r3, r2
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	009b      	lsls	r3, r3, #2
 8006ab6:	440b      	add	r3, r1
 8006ab8:	2200      	movs	r2, #0
 8006aba:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8006abc:	490d      	ldr	r1, [pc, #52]	; (8006af4 <SYSTIMER_CreateTimer+0x134>)
 8006abe:	69ba      	ldr	r2, [r7, #24]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	4413      	add	r3, r2
 8006ac6:	009b      	lsls	r3, r3, #2
 8006ac8:	440b      	add	r3, r1
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61fb      	str	r3, [r7, #28]
        break;
 8006ad4:	e005      	b.n	8006ae2 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61bb      	str	r3, [r7, #24]
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	2b07      	cmp	r3, #7
 8006ae0:	d986      	bls.n	80069f0 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
}  
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3724      	adds	r7, #36	; 0x24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	1fff43fc 	.word	0x1fff43fc
 8006af4:	1fff5108 	.word	0x1fff5108
 8006af8:	10624dd3 	.word	0x10624dd3

08006afc <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8006b04:	2301      	movs	r3, #1
 8006b06:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	1e5a      	subs	r2, r3, #1
 8006b0c:	491a      	ldr	r1, [pc, #104]	; (8006b78 <SYSTIMER_StartTimer+0x7c>)
 8006b0e:	4613      	mov	r3, r2
 8006b10:	00db      	lsls	r3, r3, #3
 8006b12:	4413      	add	r3, r2
 8006b14:	009b      	lsls	r3, r3, #2
 8006b16:	440b      	add	r3, r1
 8006b18:	3308      	adds	r3, #8
 8006b1a:	795b      	ldrb	r3, [r3, #5]
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d126      	bne.n	8006b6e <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	1e5a      	subs	r2, r3, #1
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	1e59      	subs	r1, r3, #1
 8006b28:	4813      	ldr	r0, [pc, #76]	; (8006b78 <SYSTIMER_StartTimer+0x7c>)
 8006b2a:	460b      	mov	r3, r1
 8006b2c:	00db      	lsls	r3, r3, #3
 8006b2e:	440b      	add	r3, r1
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4403      	add	r3, r0
 8006b34:	3318      	adds	r3, #24
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	1c59      	adds	r1, r3, #1
 8006b3a:	480f      	ldr	r0, [pc, #60]	; (8006b78 <SYSTIMER_StartTimer+0x7c>)
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	00db      	lsls	r3, r3, #3
 8006b40:	4413      	add	r3, r2
 8006b42:	009b      	lsls	r3, r3, #2
 8006b44:	4403      	add	r3, r0
 8006b46:	3318      	adds	r3, #24
 8006b48:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	1e5a      	subs	r2, r3, #1
 8006b4e:	490a      	ldr	r1, [pc, #40]	; (8006b78 <SYSTIMER_StartTimer+0x7c>)
 8006b50:	4613      	mov	r3, r2
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	4413      	add	r3, r2
 8006b56:	009b      	lsls	r3, r3, #2
 8006b58:	440b      	add	r3, r1
 8006b5a:	3308      	adds	r3, #8
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff fd25 	bl	80065b4 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3710      	adds	r7, #16
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	1fff5108 	.word	0x1fff5108

08006b7c <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8006b90:	78fb      	ldrb	r3, [r7, #3]
 8006b92:	019b      	lsls	r3, r3, #6
 8006b94:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006b96:	431a      	orrs	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop

08006ba8 <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 8006bb4:	78fb      	ldrb	r3, [r7, #3]
 8006bb6:	f240 1201 	movw	r2, #257	; 0x101
 8006bba:	409a      	lsls	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	60f8      	str	r0, [r7, #12]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	607a      	str	r2, [r7, #4]
 8006bd8:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8006bda:	7afb      	ldrb	r3, [r7, #11]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	2158      	movs	r1, #88	; 0x58
 8006be0:	fb01 f303 	mul.w	r3, r1, r3
 8006be4:	4413      	add	r3, r2
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	601a      	str	r2, [r3, #0]
}
 8006bea:	3714      	adds	r7, #20
 8006bec:	46bd      	mov	sp, r7
 8006bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf2:	4770      	bx	lr

08006bf4 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b085      	sub	sp, #20
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	460b      	mov	r3, r1
 8006bfe:	607a      	str	r2, [r7, #4]
 8006c00:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8006c02:	7afb      	ldrb	r3, [r7, #11]
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	2158      	movs	r1, #88	; 0x58
 8006c08:	fb01 f303 	mul.w	r3, r1, r3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	3308      	adds	r3, #8
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	601a      	str	r2, [r3, #0]
}
 8006c14:	3714      	adds	r7, #20
 8006c16:	46bd      	mov	sp, r7
 8006c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1c:	4770      	bx	lr
 8006c1e:	bf00      	nop

08006c20 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b085      	sub	sp, #20
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8006c2e:	7afb      	ldrb	r3, [r7, #11]
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	2158      	movs	r1, #88	; 0x58
 8006c34:	fb01 f303 	mul.w	r3, r1, r3
 8006c38:	4413      	add	r3, r2
 8006c3a:	3318      	adds	r3, #24
 8006c3c:	687a      	ldr	r2, [r7, #4]
 8006c3e:	605a      	str	r2, [r3, #4]
}
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop

08006c4c <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b084      	sub	sp, #16
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	4798      	blx	r3
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]

  return status;
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop

08006c6c <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	685b      	ldr	r3, [r3, #4]
 8006c80:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d106      	bne.n	8006c96 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 8006c88:	68f8      	ldr	r0, [r7, #12]
 8006c8a:	68b9      	ldr	r1, [r7, #8]
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	f000 f821 	bl	8006cd4 <SPI_MASTER_StartTransmitDMA>
 8006c92:	4603      	mov	r3, r0
 8006c94:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3718      	adds	r7, #24
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b086      	sub	sp, #24
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8006cac:	2301      	movs	r3, #1
 8006cae:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d106      	bne.n	8006cca <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	68b9      	ldr	r1, [r7, #8]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	f000 f8db 	bl	8006e7c <SPI_MASTER_StartReceiveDMA>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 8006cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3718      	adds	r7, #24
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b088      	sub	sp, #32
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8006ce0:	2304      	movs	r3, #4
 8006ce2:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	f040 80bc 	bne.w	8006e70 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 8006cf8:	697b      	ldr	r3, [r7, #20]
 8006cfa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	f083 0301 	eor.w	r3, r3, #1
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	f000 80b0 	beq.w	8006e6c <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 80a9 	beq.w	8006e66 <SPI_MASTER_StartTransmitDMA+0x192>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80a5 	beq.w	8006e66 <SPI_MASTER_StartTransmitDMA+0x192>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d22:	f080 80a0 	bcs.w	8006e66 <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8006d32:	697b      	ldr	r3, [r7, #20]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d029      	beq.n	8006d9a <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	68db      	ldr	r3, [r3, #12]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	7f5b      	ldrb	r3, [r3, #29]
 8006d50:	4619      	mov	r1, r3
 8006d52:	2358      	movs	r3, #88	; 0x58
 8006d54:	fb03 f301 	mul.w	r3, r3, r1
 8006d58:	4413      	add	r3, r2
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d6a:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68db      	ldr	r3, [r3, #12]
 8006d70:	681a      	ldr	r2, [r3, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	7f5b      	ldrb	r3, [r3, #29]
 8006d76:	4619      	mov	r1, r3
 8006d78:	2358      	movs	r3, #88	; 0x58
 8006d7a:	fb03 f301 	mul.w	r3, r3, r1
 8006d7e:	4413      	add	r3, r2
 8006d80:	3318      	adds	r3, #24
 8006d82:	693a      	ldr	r2, [r7, #16]
 8006d84:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	689b      	ldr	r3, [r3, #8]
 8006d8a:	7f1b      	ldrb	r3, [r3, #28]
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006d94:	4013      	ands	r3, r2
 8006d96:	61bb      	str	r3, [r7, #24]
 8006d98:	e025      	b.n	8006de6 <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	68ba      	ldr	r2, [r7, #8]
 8006d9e:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	68db      	ldr	r3, [r3, #12]
 8006da4:	681a      	ldr	r2, [r3, #0]
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	7f5b      	ldrb	r3, [r3, #29]
 8006daa:	4619      	mov	r1, r3
 8006dac:	2358      	movs	r3, #88	; 0x58
 8006dae:	fb03 f301 	mul.w	r3, r3, r1
 8006db2:	4413      	add	r3, r2
 8006db4:	3318      	adds	r3, #24
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006dc0:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68db      	ldr	r3, [r3, #12]
 8006dc6:	681a      	ldr	r2, [r3, #0]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	7f5b      	ldrb	r3, [r3, #29]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	2358      	movs	r3, #88	; 0x58
 8006dd0:	fb03 f301 	mul.w	r3, r3, r1
 8006dd4:	4413      	add	r3, r2
 8006dd6:	3318      	adds	r3, #24
 8006dd8:	693a      	ldr	r2, [r7, #16]
 8006dda:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	689b      	ldr	r3, [r3, #8]
 8006de0:	7f1b      	ldrb	r3, [r3, #28]
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4618      	mov	r0, r3
 8006dec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006df0:	f7fd fc22 	bl	8004638 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	68db      	ldr	r3, [r3, #12]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	7f5b      	ldrb	r3, [r3, #29]
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	f7ff ff0c 	bl	8006c20 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	6819      	ldr	r1, [r3, #0]
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	7f5a      	ldrb	r2, [r3, #29]
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	4608      	mov	r0, r1
 8006e18:	4611      	mov	r1, r2
 8006e1a:	461a      	mov	r2, r3
 8006e1c:	f7ff fed6 	bl	8006bcc <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	7f1b      	ldrb	r3, [r3, #28]
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	4610      	mov	r0, r2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	f7ff fea5 	bl	8006b7c <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	6818      	ldr	r0, [r3, #0]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681a      	ldr	r2, [r3, #0]
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	3320      	adds	r3, #32
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8006e48:	461a      	mov	r2, r3
 8006e4a:	f7ff fed3 	bl	8006bf4 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	7f5b      	ldrb	r3, [r3, #29]
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	f7ff fea2 	bl	8006ba8 <XMC_DMA_CH_Enable>
 8006e64:	e004      	b.n	8006e70 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8006e66:	2303      	movs	r3, #3
 8006e68:	77fb      	strb	r3, [r7, #31]
 8006e6a:	e001      	b.n	8006e70 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8006e70:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e72:	4618      	mov	r0, r3
 8006e74:	3720      	adds	r7, #32
 8006e76:	46bd      	mov	sp, r7
 8006e78:	bd80      	pop	{r7, pc}
 8006e7a:	bf00      	nop

08006e7c <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b086      	sub	sp, #24
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8006e88:	2304      	movs	r3, #4
 8006e8a:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d13c      	bne.n	8006f18 <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 8006e9e:	2302      	movs	r3, #2
 8006ea0:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	7fdb      	ldrb	r3, [r3, #31]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	f083 0301 	eor.w	r3, r3, #1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d030      	beq.n	8006f14 <SPI_MASTER_StartReceiveDMA+0x98>
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	f083 0301 	eor.w	r3, r3, #1
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d027      	beq.n	8006f14 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d021      	beq.n	8006f0e <SPI_MASTER_StartReceiveDMA+0x92>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d01e      	beq.n	8006f0e <SPI_MASTER_StartReceiveDMA+0x92>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d21a      	bcs.n	8006f0e <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	2201      	movs	r2, #1
 8006edc:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	4a0f      	ldr	r2, [pc, #60]	; (8006f24 <SPI_MASTER_StartReceiveDMA+0xa8>)
 8006ee8:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	687a      	ldr	r2, [r7, #4]
 8006eee:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	6879      	ldr	r1, [r7, #4]
 8006f04:	f000 f810 	bl	8006f28 <SPI_MASTER_lReceiveDMA>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006f0c:	e004      	b.n	8006f18 <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006f12:	e001      	b.n	8006f18 <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8006f14:	2302      	movs	r3, #2
 8006f16:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3718      	adds	r7, #24
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	1ffe891c 	.word	0x1ffe891c

08006f28 <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	683a      	ldr	r2, [r7, #0]
 8006f42:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f847 	bl	8006fdc <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8006f58:	f7fd fb6e 	bl	8004638 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	6819      	ldr	r1, [r3, #0]
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7f1a      	ldrb	r2, [r3, #28]
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	4608      	mov	r0, r1
 8006f6c:	4611      	mov	r1, r2
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7ff fe56 	bl	8006c20 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	f7ff fe1f 	bl	8006bcc <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	6819      	ldr	r1, [r3, #0]
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	7f1a      	ldrb	r2, [r3, #28]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	695b      	ldr	r3, [r3, #20]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	f7ff fe27 	bl	8006bf4 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	68db      	ldr	r3, [r3, #12]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7f1b      	ldrb	r3, [r3, #28]
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4619      	mov	r1, r3
 8006fb8:	f7ff fdf6 	bl	8006ba8 <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	699a      	ldr	r2, [r3, #24]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	f7ff fe4f 	bl	8006c6c <SPI_MASTER_Transmit>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8006fd2:	7afb      	ldrb	r3, [r7, #11]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b082      	sub	sp, #8
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f7fd fb0d 	bl	8004604 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f7fd fb0a 	bl	8004604 <XMC_SPI_CH_GetReceivedData>
}
 8006ff0:	3708      	adds	r7, #8
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}
 8006ff6:	bf00      	nop

08006ff8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
 8007004:	4613      	mov	r3, r2
 8007006:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007008:	78f8      	ldrb	r0, [r7, #3]
 800700a:	78fb      	ldrb	r3, [r7, #3]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	3306      	adds	r3, #6
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800701a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800701c:	431a      	orrs	r2, r3
 800701e:	6879      	ldr	r1, [r7, #4]
 8007020:	1d83      	adds	r3, r0, #6
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	440b      	add	r3, r1
 8007026:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop

08007034 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007044:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8007048:	78fb      	ldrb	r3, [r7, #3]
 800704a:	3b01      	subs	r3, #1
 800704c:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800704e:	431a      	orrs	r2, r3
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8007054:	370c      	adds	r7, #12
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop

08007060 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	460b      	mov	r3, r1
 800706a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007070:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8007074:	78fb      	ldrb	r3, [r7, #3]
 8007076:	3b01      	subs	r3, #1
 8007078:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800707a:	431a      	orrs	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8007080:	370c      	adds	r7, #12
 8007082:	46bd      	mov	sp, r7
 8007084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007088:	4770      	bx	lr
 800708a:	bf00      	nop

0800708c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007098:	b2db      	uxtb	r3, r3
 800709a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800709e:	b2db      	uxtb	r3, r3
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b083      	sub	sp, #12
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80070bc:	409a      	lsls	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b085      	sub	sp, #20
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	60f8      	str	r0, [r7, #12]
 80070d4:	60b9      	str	r1, [r7, #8]
 80070d6:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 80070e0:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 80070e2:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 80070ec:	3714      	adds	r7, #20
 80070ee:	46bd      	mov	sp, r7
 80070f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b083      	sub	sp, #12
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	460b      	mov	r3, r1
 8007102:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007108:	f023 020f 	bic.w	r2, r3, #15
 800710c:	78fb      	ldrb	r3, [r7, #3]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007114:	370c      	adds	r7, #12
 8007116:	46bd      	mov	sp, r7
 8007118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b082      	sub	sp, #8
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	2201      	movs	r2, #1
 8007130:	f7fd fa0c 	bl	800454c <XMC_SPI_CH_InitEx>
}
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop

0800713c <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	2101      	movs	r1, #1
 8007148:	f7ff ffd6 	bl	80070f8 <XMC_USIC_CH_SetMode>
}
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop

08007154 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007160:	f043 0201 	orr.w	r2, r3, #1
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop

08007174 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	3b01      	subs	r3, #1
 800718a:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 800718c:	4313      	orrs	r3, r2
 800718e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 8007196:	370c      	adds	r7, #12
 8007198:	46bd      	mov	sp, r7
 800719a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719e:	4770      	bx	lr

080071a0 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80071a0:	b480      	push	{r7}
 80071a2:	b083      	sub	sp, #12
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071ac:	f023 0208 	bic.w	r2, r3, #8
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80071b4:	370c      	adds	r7, #12
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
 80071be:	bf00      	nop

080071c0 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80071cc:	68f8      	ldr	r0, [r7, #12]
 80071ce:	68b9      	ldr	r1, [r7, #8]
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	f7ff ff7b 	bl	80070cc <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 80071d6:	3710      	adds	r7, #16
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}

080071dc <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b082      	sub	sp, #8
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	460b      	mov	r3, r1
 80071e6:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 80071e8:	78fb      	ldrb	r3, [r7, #3]
 80071ea:	6878      	ldr	r0, [r7, #4]
 80071ec:	4619      	mov	r1, r3
 80071ee:	f7ff ff21 	bl	8007034 <XMC_USIC_CH_SetWordLength>
}
 80071f2:	3708      	adds	r7, #8
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}

080071f8 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b082      	sub	sp, #8
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	4619      	mov	r1, r3
 800720a:	f7ff ff29 	bl	8007060 <XMC_USIC_CH_SetFrameLength>
}
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	460b      	mov	r3, r1
 800721e:	70fb      	strb	r3, [r7, #3]
 8007220:	4613      	mov	r3, r2
 8007222:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8007224:	78f8      	ldrb	r0, [r7, #3]
 8007226:	78fb      	ldrb	r3, [r7, #3]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	3306      	adds	r3, #6
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	4413      	add	r3, r2
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8007236:	f043 0210 	orr.w	r2, r3, #16
 800723a:	6879      	ldr	r1, [r7, #4]
 800723c:	1d83      	adds	r3, r0, #6
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	440b      	add	r3, r1
 8007242:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8007244:	78fa      	ldrb	r2, [r7, #3]
 8007246:	78bb      	ldrb	r3, [r7, #2]
 8007248:	6878      	ldr	r0, [r7, #4]
 800724a:	4611      	mov	r1, r2
 800724c:	461a      	mov	r2, r3
 800724e:	f7ff fed3 	bl	8006ff8 <XMC_USIC_CH_SetInputSource>
}
 8007252:	3708      	adds	r7, #8
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 800725e:	2300      	movs	r3, #0
 8007260:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 8007262:	4840      	ldr	r0, [pc, #256]	; (8007364 <SPI_MASTER_0_lInit+0x10c>)
 8007264:	f001 f804 	bl	8008270 <GLOBAL_DMA_Init>
 8007268:	4603      	mov	r3, r0
 800726a:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d172      	bne.n	8007358 <SPI_MASTER_0_lInit+0x100>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_0_dma_ch_tx_config);
 8007272:	483d      	ldr	r0, [pc, #244]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 8007274:	2101      	movs	r1, #1
 8007276:	4a3d      	ldr	r2, [pc, #244]	; (800736c <SPI_MASTER_0_lInit+0x114>)
 8007278:	f7fc fb1a 	bl	80038b0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 800727c:	483a      	ldr	r0, [pc, #232]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 800727e:	2101      	movs	r1, #1
 8007280:	2201      	movs	r2, #1
 8007282:	f7fc fd1b 	bl	8003cbc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_0_DMA_tx_handler);
 8007286:	4838      	ldr	r0, [pc, #224]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 8007288:	2101      	movs	r1, #1
 800728a:	4a39      	ldr	r2, [pc, #228]	; (8007370 <SPI_MASTER_0_lInit+0x118>)
 800728c:	f7fc fd64 	bl	8003d58 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_0_dma_ch_rx_config);
 8007290:	4835      	ldr	r0, [pc, #212]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 8007292:	2100      	movs	r1, #0
 8007294:	4a37      	ldr	r2, [pc, #220]	; (8007374 <SPI_MASTER_0_lInit+0x11c>)
 8007296:	f7fc fb0b 	bl	80038b0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 800729a:	4833      	ldr	r0, [pc, #204]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 800729c:	2100      	movs	r1, #0
 800729e:	2201      	movs	r2, #1
 80072a0:	f7fc fd0c 	bl	8003cbc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_0_DMA_rx_handler);
 80072a4:	4830      	ldr	r0, [pc, #192]	; (8007368 <SPI_MASTER_0_lInit+0x110>)
 80072a6:	2100      	movs	r1, #0
 80072a8:	4a33      	ldr	r2, [pc, #204]	; (8007378 <SPI_MASTER_0_lInit+0x120>)
 80072aa:	f7fc fd55 	bl	8003d58 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 80072ae:	4833      	ldr	r0, [pc, #204]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072b0:	4933      	ldr	r1, [pc, #204]	; (8007380 <SPI_MASTER_0_lInit+0x128>)
 80072b2:	f7ff ff35 	bl	8007120 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 80072b6:	4831      	ldr	r0, [pc, #196]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072b8:	f7ff ff72 	bl	80071a0 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 80072bc:	482f      	ldr	r0, [pc, #188]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072be:	f7ff ff49 	bl	8007154 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 80072c2:	482e      	ldr	r0, [pc, #184]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072c4:	2108      	movs	r1, #8
 80072c6:	f7ff ff89 	bl	80071dc <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
 80072ca:	482c      	ldr	r0, [pc, #176]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072cc:	2140      	movs	r1, #64	; 0x40
 80072ce:	f7ff ff93 	bl	80071f8 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 80072d2:	482a      	ldr	r0, [pc, #168]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80072d8:	2200      	movs	r2, #0
 80072da:	f7ff ff71 	bl	80071c0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 80072de:	4827      	ldr	r0, [pc, #156]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072e0:	2102      	movs	r1, #2
 80072e2:	f7ff ff47 	bl	8007174 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_0_MISO_Config.port_config);
 80072e6:	4827      	ldr	r0, [pc, #156]	; (8007384 <SPI_MASTER_0_lInit+0x12c>)
 80072e8:	2104      	movs	r1, #4
 80072ea:	4a27      	ldr	r2, [pc, #156]	; (8007388 <SPI_MASTER_0_lInit+0x130>)
 80072ec:	f7fa fd82 	bl	8001df4 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 80072f0:	4822      	ldr	r0, [pc, #136]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072f2:	2100      	movs	r1, #0
 80072f4:	2201      	movs	r2, #1
 80072f6:	f7ff ff8d 	bl	8007214 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 80072fa:	4820      	ldr	r0, [pc, #128]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 80072fc:	f7ff ff1e 	bl	800713c <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_0_MOSI_Config.port_config);
 8007300:	4820      	ldr	r0, [pc, #128]	; (8007384 <SPI_MASTER_0_lInit+0x12c>)
 8007302:	2105      	movs	r1, #5
 8007304:	4a21      	ldr	r2, [pc, #132]	; (800738c <SPI_MASTER_0_lInit+0x134>)
 8007306:	f7fa fd75 	bl	8001df4 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 800730a:	481e      	ldr	r0, [pc, #120]	; (8007384 <SPI_MASTER_0_lInit+0x12c>)
 800730c:	2106      	movs	r1, #6
 800730e:	4a20      	ldr	r2, [pc, #128]	; (8007390 <SPI_MASTER_0_lInit+0x138>)
 8007310:	f7fa fd70 	bl	8001df4 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_MASTER_0_SS_0_Config.port_config);
 8007314:	481b      	ldr	r0, [pc, #108]	; (8007384 <SPI_MASTER_0_lInit+0x12c>)
 8007316:	210b      	movs	r1, #11
 8007318:	4a1e      	ldr	r2, [pc, #120]	; (8007394 <SPI_MASTER_0_lInit+0x13c>)
 800731a:	f7fa fd6b 	bl	8001df4 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 800731e:	4817      	ldr	r0, [pc, #92]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 8007320:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007324:	f7fd f958 	bl	80045d8 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007328:	4814      	ldr	r0, [pc, #80]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 800732a:	2104      	movs	r1, #4
 800732c:	2200      	movs	r2, #0
 800732e:	f7fd fc11 	bl	8004b54 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007332:	4812      	ldr	r0, [pc, #72]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 8007334:	2108      	movs	r1, #8
 8007336:	2201      	movs	r2, #1
 8007338:	f7fd fc0c 	bl	8004b54 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 800733c:	480f      	ldr	r0, [pc, #60]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 800733e:	210c      	movs	r1, #12
 8007340:	2201      	movs	r2, #1
 8007342:	f7fd fc07 	bl	8004b54 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007346:	480d      	ldr	r0, [pc, #52]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 8007348:	2110      	movs	r1, #16
 800734a:	2202      	movs	r2, #2
 800734c:	f7fd fc02 	bl	8004b54 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI0_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 8007350:	480a      	ldr	r0, [pc, #40]	; (800737c <SPI_MASTER_0_lInit+0x124>)
 8007352:	2100      	movs	r1, #0
 8007354:	f7ff feaa 	bl	80070ac <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8007358:	79fb      	ldrb	r3, [r7, #7]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3708      	adds	r7, #8
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	1ffe8a78 	.word	0x1ffe8a78
 8007368:	50014000 	.word	0x50014000
 800736c:	1ffe8940 	.word	0x1ffe8940
 8007370:	08007399 	.word	0x08007399
 8007374:	1ffe8964 	.word	0x1ffe8964
 8007378:	080073d1 	.word	0x080073d1
 800737c:	40030000 	.word	0x40030000
 8007380:	1ffe8934 	.word	0x1ffe8934
 8007384:	48028100 	.word	0x48028100
 8007388:	1fff4408 	.word	0x1fff4408
 800738c:	1ffe8920 	.word	0x1ffe8920
 8007390:	08012fc8 	.word	0x08012fc8
 8007394:	08012fe4 	.word	0x08012fe4

08007398 <SPI_MASTER_0_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_0_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	4603      	mov	r3, r0
 80073a0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d10b      	bne.n	80073c0 <SPI_MASTER_0_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80073a8:	bf00      	nop
 80073aa:	4807      	ldr	r0, [pc, #28]	; (80073c8 <SPI_MASTER_0_DMA_tx_handler+0x30>)
 80073ac:	f7ff fe6e 	bl	800708c <XMC_USIC_CH_GetTransmitBufferStatus>
 80073b0:	4603      	mov	r3, r0
 80073b2:	2b80      	cmp	r3, #128	; 0x80
 80073b4:	d0f9      	beq.n	80073aa <SPI_MASTER_0_DMA_tx_handler+0x12>
    SPI_MASTER_0.runtime->tx_busy = false;
 80073b6:	4b05      	ldr	r3, [pc, #20]	; (80073cc <SPI_MASTER_0_DMA_tx_handler+0x34>)
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	2200      	movs	r2, #0
 80073bc:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80073c0:	3708      	adds	r7, #8
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	40030000 	.word	0x40030000
 80073cc:	1ffe89ac 	.word	0x1ffe89ac

080073d0 <SPI_MASTER_0_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_0_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80073da:	79fb      	ldrb	r3, [r7, #7]
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d112      	bne.n	8007406 <SPI_MASTER_0_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI0_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 80073e0:	480a      	ldr	r0, [pc, #40]	; (800740c <SPI_MASTER_0_DMA_rx_handler+0x3c>)
 80073e2:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80073e6:	f7fd f941 	bl	800466c <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_0.runtime->tx_data_dummy = false;
 80073ea:	4b09      	ldr	r3, [pc, #36]	; (8007410 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_0.runtime->rx_data_dummy = true;
 80073f4:	4b06      	ldr	r3, [pc, #24]	; (8007410 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_0.runtime->rx_busy = false;
 80073fe:	4b04      	ldr	r3, [pc, #16]	; (8007410 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	2200      	movs	r2, #0
 8007404:	77da      	strb	r2, [r3, #31]
  }
}
 8007406:	3708      	adds	r7, #8
 8007408:	46bd      	mov	sp, r7
 800740a:	bd80      	pop	{r7, pc}
 800740c:	40030000 	.word	0x40030000
 8007410:	1ffe89ac 	.word	0x1ffe89ac

08007414 <SDMMC_BLOCK_Init>:
  return version;
}

/* SDMMC_BLOCK initialization function */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 800741c:	2300      	movs	r3, #0
 800741e:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8007420:	2300      	movs	r3, #0
 8007422:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL));

  if (obj->init_flag == 1U)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	7b5b      	ldrb	r3, [r3, #13]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <SDMMC_BLOCK_Init+0x1e>
  {
    status = SDMMC_BLOCK_STATUS_SUCCESS;
 800742c:	2300      	movs	r3, #0
 800742e:	73fb      	strb	r3, [r7, #15]
 8007430:	e01b      	b.n	800746a <SDMMC_BLOCK_Init+0x56>
  }
  else
  {
    /* Setup pins */
    if (obj->init_pins != NULL)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	685b      	ldr	r3, [r3, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d002      	beq.n	8007440 <SDMMC_BLOCK_Init+0x2c>
    {
      obj->init_pins();
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	4798      	blx	r3
    }

#ifdef SDMMC_BLOCK_SPI
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	7b1b      	ldrb	r3, [r3, #12]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d104      	bne.n	8007452 <SDMMC_BLOCK_Init+0x3e>
    {
      mode_status = SDMMC_BLOCK_SPI_Init(obj);
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f000 f813 	bl	8007474 <SDMMC_BLOCK_SPI_Init>
 800744e:	4603      	mov	r3, r0
 8007450:	73bb      	strb	r3, [r7, #14]
    {
      mode_status = SDMMC_BLOCK_SD_Init(obj);
    }
#endif

    if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8007452:	7bbb      	ldrb	r3, [r7, #14]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d005      	beq.n	8007464 <SDMMC_BLOCK_Init+0x50>
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 8007458:	2301      	movs	r3, #1
 800745a:	73fb      	strb	r3, [r7, #15]
      obj->init_flag = 0U;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	735a      	strb	r2, [r3, #13]
 8007462:	e002      	b.n	800746a <SDMMC_BLOCK_Init+0x56>
    }
    else
    {
      obj->init_flag = 1U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	735a      	strb	r2, [r3, #13]
    }
  }

  return status;
 800746a:	7bfb      	ldrb	r3, [r7, #15]
}
 800746c:	4618      	mov	r0, r3
 800746e:	3710      	adds	r7, #16
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <SDMMC_BLOCK_SPI_Init>:

/**********************************************************************************************************************
  * API IMPLEMENTATION
**********************************************************************************************************************/
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t spi_status;
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800747c:	2300      	movs	r3, #0
 800747e:	73fb      	strb	r3, [r7, #15]

  spi_status = SPI_MASTER_Init(obj->sdmmc_spi->spi_master_handle);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f7ff fbe0 	bl	8006c4c <SPI_MASTER_Init>
 800748c:	4603      	mov	r3, r0
 800748e:	73bb      	strb	r3, [r7, #14]

  if (spi_status != SPI_MASTER_STATUS_SUCCESS)
 8007490:	7bbb      	ldrb	r3, [r7, #14]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <SDMMC_BLOCK_SPI_Init+0x26>
  {
    status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8007496:	2301      	movs	r3, #1
 8007498:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800749a:	7bfb      	ldrb	r3, [r7, #15]
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 80074a8:	f7fc ffd8 	bl	800445c <XMC_RTC_Start>
}
 80074ac:	bd80      	pop	{r7, pc}
 80074ae:	bf00      	nop

080074b0 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b084      	sub	sp, #16
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 80074bc:	2301      	movs	r3, #1
 80074be:	73bb      	strb	r3, [r7, #14]
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
  {
#endif
      if (handler->initialized == false)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	7a1b      	ldrb	r3, [r3, #8]
 80074c4:	f083 0301 	eor.w	r3, r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d029      	beq.n	8007522 <RTC_Init+0x72>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	4618      	mov	r0, r3
 80074d4:	f7fa fd52 	bl	8001f7c <XMC_RTC_Init>
 80074d8:	4603      	mov	r3, r0
 80074da:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d11c      	bne.n	800751c <RTC_Init+0x6c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 f824 	bl	8007530 <RTC_lConfigureInterrupts>
 80074e8:	4603      	mov	r3, r0
 80074ea:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 80074ec:	7b7b      	ldrb	r3, [r7, #13]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d004      	beq.n	80074fc <RTC_Init+0x4c>
          {
            status = RTC_lRegister_Callbacks(handler);
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f000 f858 	bl	80075a8 <RTC_lRegister_Callbacks>
 80074f8:	4603      	mov	r3, r0
 80074fa:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 80074fc:	7bfb      	ldrb	r3, [r7, #15]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d111      	bne.n	8007526 <RTC_Init+0x76>
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d101      	bne.n	8007510 <RTC_Init+0x60>
            {
              RTC_Start();
 800750c:	f7ff ffca 	bl	80074a4 <RTC_Start>
            }
            handler->initialized = true;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2201      	movs	r2, #1
 8007514:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 8007516:	2300      	movs	r3, #0
 8007518:	73bb      	strb	r3, [r7, #14]
 800751a:	e004      	b.n	8007526 <RTC_Init+0x76>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 800751c:	2301      	movs	r3, #1
 800751e:	73bb      	strb	r3, [r7, #14]
 8007520:	e001      	b.n	8007526 <RTC_Init+0x76>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8007522:	2300      	movs	r3, #0
 8007524:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 8007526:	7bbb      	ldrb	r3, [r7, #14]
}
 8007528:	4618      	mov	r0, r3
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 8007538:	2300      	movs	r3, #0
 800753a:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	789b      	ldrb	r3, [r3, #2]
 800754a:	005b      	lsls	r3, r3, #1
 800754c:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	78db      	ldrb	r3, [r3, #3]
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	791b      	ldrb	r3, [r3, #4]
 800755e:	00db      	lsls	r3, r3, #3
 8007560:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	685b      	ldr	r3, [r3, #4]
 8007566:	795b      	ldrb	r3, [r3, #5]
 8007568:	015b      	lsls	r3, r3, #5
 800756a:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	685b      	ldr	r3, [r3, #4]
 8007570:	799b      	ldrb	r3, [r3, #6]
 8007572:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8007574:	4313      	orrs	r3, r2
 8007576:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d004      	beq.n	8007588 <RTC_lConfigureInterrupts+0x58>
  {
    XMC_RTC_EnableEvent(regval);
 800757e:	68b8      	ldr	r0, [r7, #8]
 8007580:	f7fa fd4e 	bl	8002020 <XMC_RTC_EnableEvent>
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
 8007584:	2301      	movs	r3, #1
 8007586:	73fb      	strb	r3, [r7, #15]
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	79db      	ldrb	r3, [r3, #7]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d105      	bne.n	800759e <RTC_lConfigureInterrupts+0x6e>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
 8007592:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007596:	f7fa fd43 	bl	8002020 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
 800759a:	2301      	movs	r3, #1
 800759c:	73fb      	strb	r3, [r7, #15]
	}


  return (interrupt_configured);
 800759e:	7bfb      	ldrb	r3, [r7, #15]
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]
  ai_status = XMC_RTC_STATUS_OK;
 80075b4:	2300      	movs	r3, #0
 80075b6:	73bb      	strb	r3, [r7, #14]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	4013      	ands	r3, r2
 80075be:	b2db      	uxtb	r3, r3
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3714      	adds	r7, #20
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <RTC_SetTime>:

/*
 *  This function is used to set RTC time.
 */
RTC_STATUS_t RTC_SetTime(XMC_RTC_TIME_t *current_time)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t status = RTC_STATUS_SUCCESS;
 80075d4:	2300      	movs	r3, #0
 80075d6:	75fb      	strb	r3, [r7, #23]
  XMC_RTC_TIME_t time_val;

  XMC_ASSERT("RTC_SetTime: NULL pointer", current_time != NULL);

  /* copy to local structure to keep data safe */
  time_val.year = current_time->year;
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	88db      	ldrh	r3, [r3, #6]
 80075dc:	827b      	strh	r3, [r7, #18]
  time_val.month = current_time->month;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	795b      	ldrb	r3, [r3, #5]
 80075e2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80075e6:	b2da      	uxtb	r2, r3
 80075e8:	7c7b      	ldrb	r3, [r7, #17]
 80075ea:	f362 0303 	bfi	r3, r2, #0, #4
 80075ee:	747b      	strb	r3, [r7, #17]
  time_val.days = current_time->days;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	78db      	ldrb	r3, [r3, #3]
 80075f4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	f362 0304 	bfi	r3, r2, #0, #5
 8007600:	73fb      	strb	r3, [r7, #15]
  time_val.hours = current_time->hours;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	789b      	ldrb	r3, [r3, #2]
 8007606:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800760a:	b2da      	uxtb	r2, r3
 800760c:	7bbb      	ldrb	r3, [r7, #14]
 800760e:	f362 0304 	bfi	r3, r2, #0, #5
 8007612:	73bb      	strb	r3, [r7, #14]
  time_val.minutes = current_time->minutes;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800761c:	b2da      	uxtb	r2, r3
 800761e:	7b7b      	ldrb	r3, [r7, #13]
 8007620:	f362 0305 	bfi	r3, r2, #0, #6
 8007624:	737b      	strb	r3, [r7, #13]
  time_val.seconds = current_time->seconds;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	781b      	ldrb	r3, [r3, #0]
 800762a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800762e:	b2da      	uxtb	r2, r3
 8007630:	7b3b      	ldrb	r3, [r7, #12]
 8007632:	f362 0305 	bfi	r3, r2, #0, #6
 8007636:	733b      	strb	r3, [r7, #12]
  time_val.daysofweek = current_time->daysofweek;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	791b      	ldrb	r3, [r3, #4]
 800763c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007640:	b2da      	uxtb	r2, r3
 8007642:	7c3b      	ldrb	r3, [r7, #16]
 8007644:	f362 0302 	bfi	r3, r2, #0, #3
 8007648:	743b      	strb	r3, [r7, #16]

  if ((time_val.days != 0U) && (time_val.month != 0U))
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	f003 031f 	and.w	r3, r3, #31
 8007650:	b2db      	uxtb	r3, r3
 8007652:	2b00      	cmp	r3, #0
 8007654:	d025      	beq.n	80076a2 <RTC_SetTime+0xd6>
 8007656:	7c7b      	ldrb	r3, [r7, #17]
 8007658:	f003 030f 	and.w	r3, r3, #15
 800765c:	b2db      	uxtb	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d01f      	beq.n	80076a2 <RTC_SetTime+0xd6>
  {
    time_val.days = time_val.days - 1U;
 8007662:	7bfb      	ldrb	r3, [r7, #15]
 8007664:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007668:	b2db      	uxtb	r3, r3
 800766a:	3b01      	subs	r3, #1
 800766c:	b2db      	uxtb	r3, r3
 800766e:	f003 031f 	and.w	r3, r3, #31
 8007672:	b2da      	uxtb	r2, r3
 8007674:	7bfb      	ldrb	r3, [r7, #15]
 8007676:	f362 0304 	bfi	r3, r2, #0, #5
 800767a:	73fb      	strb	r3, [r7, #15]
    time_val.month = time_val.month - 1U;
 800767c:	7c7b      	ldrb	r3, [r7, #17]
 800767e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007682:	b2db      	uxtb	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b2db      	uxtb	r3, r3
 8007688:	f003 030f 	and.w	r3, r3, #15
 800768c:	b2da      	uxtb	r2, r3
 800768e:	7c7b      	ldrb	r3, [r7, #17]
 8007690:	f362 0303 	bfi	r3, r2, #0, #4
 8007694:	747b      	strb	r3, [r7, #17]

    XMC_RTC_SetTime(&time_val);
 8007696:	f107 030c 	add.w	r3, r7, #12
 800769a:	4618      	mov	r0, r3
 800769c:	f7fc ff20 	bl	80044e0 <XMC_RTC_SetTime>
 80076a0:	e001      	b.n	80076a6 <RTC_SetTime+0xda>
  }
  else
  {
    status = RTC_STATUS_FAILURE;
 80076a2:	2301      	movs	r3, #1
 80076a4:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80076a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3718      	adds	r7, #24
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <RTC_GetTime>:
}
/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f7fc ff33 	bl	8004524 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80076c6:	b2db      	uxtb	r3, r3
 80076c8:	3301      	adds	r3, #1
 80076ca:	b2db      	uxtb	r3, r3
 80076cc:	f003 031f 	and.w	r3, r3, #31
 80076d0:	b2d9      	uxtb	r1, r3
 80076d2:	687a      	ldr	r2, [r7, #4]
 80076d4:	78d3      	ldrb	r3, [r2, #3]
 80076d6:	f361 0304 	bfi	r3, r1, #0, #5
 80076da:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	795b      	ldrb	r3, [r3, #5]
 80076e0:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80076e4:	b2db      	uxtb	r3, r3
 80076e6:	3301      	adds	r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	b2d9      	uxtb	r1, r3
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	7953      	ldrb	r3, [r2, #5]
 80076f4:	f361 0303 	bfi	r3, r1, #0, #4
 80076f8:	7153      	strb	r3, [r2, #5]
}
 80076fa:	3708      	adds	r7, #8
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}

08007700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007700:	b480      	push	{r7}
 8007702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007704:	4b04      	ldr	r3, [pc, #16]	; (8007718 <__NVIC_GetPriorityGrouping+0x18>)
 8007706:	68db      	ldr	r3, [r3, #12]
 8007708:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800770c:	0a1b      	lsrs	r3, r3, #8
}
 800770e:	4618      	mov	r0, r3
 8007710:	46bd      	mov	sp, r7
 8007712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007716:	4770      	bx	lr
 8007718:	e000ed00 	.word	0xe000ed00

0800771c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800771c:	b480      	push	{r7}
 800771e:	b083      	sub	sp, #12
 8007720:	af00      	add	r7, sp, #0
 8007722:	4603      	mov	r3, r0
 8007724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800772a:	2b00      	cmp	r3, #0
 800772c:	db0b      	blt.n	8007746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800772e:	4908      	ldr	r1, [pc, #32]	; (8007750 <__NVIC_EnableIRQ+0x34>)
 8007730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007734:	095b      	lsrs	r3, r3, #5
 8007736:	79fa      	ldrb	r2, [r7, #7]
 8007738:	f002 021f 	and.w	r2, r2, #31
 800773c:	2001      	movs	r0, #1
 800773e:	fa00 f202 	lsl.w	r2, r0, r2
 8007742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr
 8007750:	e000e100 	.word	0xe000e100

08007754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	4603      	mov	r3, r0
 800775c:	6039      	str	r1, [r7, #0]
 800775e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007764:	2b00      	cmp	r3, #0
 8007766:	db0a      	blt.n	800777e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007768:	490d      	ldr	r1, [pc, #52]	; (80077a0 <__NVIC_SetPriority+0x4c>)
 800776a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	b2d2      	uxtb	r2, r2
 8007772:	0092      	lsls	r2, r2, #2
 8007774:	b2d2      	uxtb	r2, r2
 8007776:	440b      	add	r3, r1
 8007778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800777c:	e00a      	b.n	8007794 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800777e:	4909      	ldr	r1, [pc, #36]	; (80077a4 <__NVIC_SetPriority+0x50>)
 8007780:	79fb      	ldrb	r3, [r7, #7]
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	3b04      	subs	r3, #4
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	b2d2      	uxtb	r2, r2
 800778c:	0092      	lsls	r2, r2, #2
 800778e:	b2d2      	uxtb	r2, r2
 8007790:	440b      	add	r3, r1
 8007792:	761a      	strb	r2, [r3, #24]
  }
}
 8007794:	370c      	adds	r7, #12
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr
 800779e:	bf00      	nop
 80077a0:	e000e100 	.word	0xe000e100
 80077a4:	e000ed00 	.word	0xe000ed00

080077a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b089      	sub	sp, #36	; 0x24
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	60f8      	str	r0, [r7, #12]
 80077b0:	60b9      	str	r1, [r7, #8]
 80077b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	f1c3 0307 	rsb	r3, r3, #7
 80077c2:	2b06      	cmp	r3, #6
 80077c4:	bf28      	it	cs
 80077c6:	2306      	movcs	r3, #6
 80077c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	3306      	adds	r3, #6
 80077ce:	2b06      	cmp	r3, #6
 80077d0:	d902      	bls.n	80077d8 <NVIC_EncodePriority+0x30>
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	e000      	b.n	80077da <NVIC_EncodePriority+0x32>
 80077d8:	2300      	movs	r3, #0
 80077da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2201      	movs	r2, #1
 80077e0:	fa02 f303 	lsl.w	r3, r2, r3
 80077e4:	1e5a      	subs	r2, r3, #1
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	401a      	ands	r2, r3
 80077ea:	697b      	ldr	r3, [r7, #20]
 80077ec:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2101      	movs	r1, #1
 80077f2:	fa01 f303 	lsl.w	r3, r1, r3
 80077f6:	1e59      	subs	r1, r3, #1
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80077fc:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3724      	adds	r7, #36	; 0x24
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
 800780a:	bf00      	nop

0800780c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	b25b      	sxtb	r3, r3
 800781a:	4618      	mov	r0, r3
 800781c:	f7ff ff7e 	bl	800771c <__NVIC_EnableIRQ>
}
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop

08007828 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8007828:	b590      	push	{r4, r7, lr}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	781c      	ldrb	r4, [r3, #0]
 8007834:	f7ff ff64 	bl	8007700 <__NVIC_GetPriorityGrouping>
 8007838:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800783e:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007844:	4608      	mov	r0, r1
 8007846:	4611      	mov	r1, r2
 8007848:	461a      	mov	r2, r3
 800784a:	f7ff ffad 	bl	80077a8 <NVIC_EncodePriority>
 800784e:	4602      	mov	r2, r0
 8007850:	b263      	sxtb	r3, r4
 8007852:	4618      	mov	r0, r3
 8007854:	4611      	mov	r1, r2
 8007856:	f7ff ff7d 	bl	8007754 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	78db      	ldrb	r3, [r3, #3]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d002      	beq.n	8007868 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f7ff ffd2 	bl	800780c <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8007868:	2300      	movs	r3, #0
}
 800786a:	4618      	mov	r0, r3
 800786c:	370c      	adds	r7, #12
 800786e:	46bd      	mov	sp, r7
 8007870:	bd90      	pop	{r4, r7, pc}
 8007872:	bf00      	nop

08007874 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007882:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007886:	2b00      	cmp	r3, #0
 8007888:	bf14      	ite	ne
 800788a:	2301      	movne	r3, #1
 800788c:	2300      	moveq	r3, #0
 800788e:	b2db      	uxtb	r3, r3
}
 8007890:	4618      	mov	r0, r3
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800789c:	b480      	push	{r7}
 800789e:	b083      	sub	sp, #12
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80078aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	bf14      	ite	ne
 80078b2:	2301      	movne	r3, #1
 80078b4:	2300      	moveq	r3, #0
 80078b6:	b2db      	uxtb	r3, r3
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	370c      	adds	r7, #12
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80078d2:	f003 0308 	and.w	r3, r3, #8
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	bf14      	ite	ne
 80078da:	2301      	movne	r3, #1
 80078dc:	2300      	moveq	r3, #0
 80078de:	b2db      	uxtb	r3, r3
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007904:	b480      	push	{r7}
 8007906:	b083      	sub	sp, #12
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	431a      	orrs	r2, r3
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800791a:	370c      	adds	r7, #12
 800791c:	46bd      	mov	sp, r7
 800791e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007922:	4770      	bx	lr

08007924 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	4618      	mov	r0, r3
 8007932:	f7ff ff9f 	bl	8007874 <XMC_USIC_CH_TXFIFO_IsFull>
 8007936:	4603      	mov	r3, r0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4618      	mov	r0, r3
 800794e:	f7ff ffb9 	bl	80078c4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8007952:	4603      	mov	r3, r0
}
 8007954:	4618      	mov	r0, r3
 8007956:	3708      	adds	r7, #8
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}

0800795c <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4618      	mov	r0, r3
 800796a:	f7fc fd51 	bl	8004410 <XMC_I2C_CH_GetReceivedData>
 800796e:	4603      	mov	r3, r0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3708      	adds	r7, #8
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681a      	ldr	r2, [r3, #0]
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	4610      	mov	r0, r2
 800798c:	4619      	mov	r1, r3
 800798e:	f7fc fccd 	bl	800432c <XMC_I2C_CH_MasterTransmit>
}
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fc fce7 	bl	8004378 <XMC_I2C_CH_MasterReceiveAck>
}
 80079aa:	3708      	adds	r7, #8
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fc fd01 	bl	80043c4 <XMC_I2C_CH_MasterReceiveNack>
}
 80079c2:	3708      	adds	r7, #8
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4618      	mov	r0, r3
 80079d6:	2110      	movs	r1, #16
 80079d8:	f7ff ff94 	bl	8007904 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4618      	mov	r0, r3
 80079e2:	f7fc fc7d 	bl	80042e0 <XMC_I2C_CH_MasterStop>
}
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b084      	sub	sp, #16
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	60f8      	str	r0, [r7, #12]
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	4613      	mov	r3, r2
 80079f8:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4618      	mov	r0, r3
 8007a00:	2104      	movs	r1, #4
 8007a02:	f7ff ff7f 	bl	8007904 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	6819      	ldr	r1, [r3, #0]
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	79fb      	ldrb	r3, [r7, #7]
 8007a10:	4608      	mov	r0, r1
 8007a12:	4611      	mov	r1, r2
 8007a14:	461a      	mov	r2, r3
 8007a16:	f7fc fbfb 	bl	8004210 <XMC_I2C_CH_MasterStart>
}
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	4613      	mov	r3, r2
 8007a2c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4618      	mov	r0, r3
 8007a34:	2108      	movs	r1, #8
 8007a36:	f7ff ff65 	bl	8007904 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	6819      	ldr	r1, [r3, #0]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	b29a      	uxth	r2, r3
 8007a42:	79fb      	ldrb	r3, [r7, #7]
 8007a44:	4608      	mov	r0, r1
 8007a46:	4611      	mov	r1, r2
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f7fc fc15 	bl	8004278 <XMC_I2C_CH_MasterRepeatedStart>
}
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b084      	sub	sp, #16
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d006      	beq.n	8007a70 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	73fb      	strb	r3, [r7, #15]
 8007a6e:	e001      	b.n	8007a74 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8007a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bd80      	pop	{r7, pc}
 8007a7e:	bf00      	nop

08007a80 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7ff ff2c 	bl	80078ec <XMC_I2C_CH_GetStatusFlag>
 8007a94:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 8007a96:	68fa      	ldr	r2, [r7, #12]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	4013      	ands	r3, r2
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}

08007aa4 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007aa4:	b580      	push	{r7, lr}
 8007aa6:	b082      	sub	sp, #8
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	6078      	str	r0, [r7, #4]
 8007aac:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	6839      	ldr	r1, [r7, #0]
 8007ab6:	f7ff ff25 	bl	8007904 <XMC_I2C_CH_ClearStatusFlag>
}
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b088      	sub	sp, #32
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	607a      	str	r2, [r7, #4]
 8007aca:	603b      	str	r3, [r7, #0]
 8007acc:	460b      	mov	r3, r1
 8007ace:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d013      	beq.n	8007b08 <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007ae8:	2b01      	cmp	r3, #1
 8007aea:	d00d      	beq.n	8007b08 <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 8007aec:	7afa      	ldrb	r2, [r7, #11]
 8007aee:	6a3b      	ldr	r3, [r7, #32]
 8007af0:	9300      	str	r3, [sp, #0]
 8007af2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007af6:	9301      	str	r3, [sp, #4]
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	4611      	mov	r1, r2
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	f000 f88c 	bl	8007c1c <I2C_MASTER_lStartTransmitPolling>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007b08:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3718      	adds	r7, #24
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop

08007b14 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08a      	sub	sp, #40	; 0x28
 8007b18:	af04      	add	r7, sp, #16
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	607a      	str	r2, [r7, #4]
 8007b1e:	603b      	str	r3, [r7, #0]
 8007b20:	460b      	mov	r3, r1
 8007b22:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007b24:	2302      	movs	r3, #2
 8007b26:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d016      	beq.n	8007b62 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	685b      	ldr	r3, [r3, #4]
 8007b38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d010      	beq.n	8007b62 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 8007b40:	7afa      	ldrb	r2, [r7, #11]
 8007b42:	6a3b      	ldr	r3, [r7, #32]
 8007b44:	9300      	str	r3, [sp, #0]
 8007b46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007b4a:	9301      	str	r3, [sp, #4]
 8007b4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007b50:	9302      	str	r3, [sp, #8]
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	4611      	mov	r1, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	f000 f929 	bl	8007db0 <I2C_MASTER_lStartReceivePolling>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	4613      	mov	r3, r2
 8007b78:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4618      	mov	r0, r3
 8007b80:	210c      	movs	r1, #12
 8007b82:	f7ff febf 	bl	8007904 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	689b      	ldr	r3, [r3, #8]
 8007b8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d009      	beq.n	8007ba8 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	461a      	mov	r2, r3
 8007b9a:	79fb      	ldrb	r3, [r7, #7]
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	4611      	mov	r1, r2
 8007ba0:	461a      	mov	r2, r3
 8007ba2:	f7ff ff3d 	bl	8007a20 <I2C_MASTER_SendRepeatedStart>
 8007ba6:	e00d      	b.n	8007bc4 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	79fb      	ldrb	r3, [r7, #7]
 8007bba:	68f8      	ldr	r0, [r7, #12]
 8007bbc:	4611      	mov	r1, r2
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	f7ff ff14 	bl	80079ec <I2C_MASTER_SendStart>
  }
}
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
 8007bca:	bf00      	nop

08007bcc <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8007bcc:	b480      	push	{r7}
 8007bce:	b085      	sub	sp, #20
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d007      	beq.n	8007bf4 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d001      	beq.n	8007bf4 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6812      	ldr	r2, [r2, #0]
 8007bfc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007bfe:	f042 0202 	orr.w	r2, r2, #2
 8007c02:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2202      	movs	r2, #2
 8007c0a:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0e:	4618      	mov	r0, r3
 8007c10:	3714      	adds	r7, #20
 8007c12:	46bd      	mov	sp, r7
 8007c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c18:	4770      	bx	lr
 8007c1a:	bf00      	nop

08007c1c <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	603b      	str	r3, [r7, #0]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8007c34:	7afb      	ldrb	r3, [r7, #11]
 8007c36:	f083 0301 	eor.w	r3, r3, #1
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d009      	beq.n	8007c54 <I2C_MASTER_lStartTransmitPolling+0x38>
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c48:	b2db      	uxtb	r3, r3
 8007c4a:	f083 0301 	eor.w	r3, r3, #1
 8007c4e:	b2db      	uxtb	r3, r3
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d105      	bne.n	8007c60 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d002      	beq.n	8007c60 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007c60:	2301      	movs	r3, #1
 8007c62:	74fb      	strb	r3, [r7, #19]
 8007c64:	e09e      	b.n	8007da4 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 8007c66:	7afb      	ldrb	r3, [r7, #11]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d02c      	beq.n	8007cc6 <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	f083 0301 	eor.w	r3, r3, #1
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d022      	beq.n	8007cc6 <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8007c80:	68f8      	ldr	r0, [r7, #12]
 8007c82:	6879      	ldr	r1, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	f7ff ff71 	bl	8007b6c <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007c8a:	bf00      	nop
 8007c8c:	68f8      	ldr	r0, [r7, #12]
 8007c8e:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007c92:	f7ff fef5 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007c96:	4603      	mov	r3, r0
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f7      	beq.n	8007c8c <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	2120      	movs	r1, #32
 8007ca0:	f7ff feee 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d008      	beq.n	8007cbc <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007caa:	68f8      	ldr	r0, [r7, #12]
 8007cac:	2120      	movs	r1, #32
 8007cae:	f7ff fef9 	bl	8007aa4 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f7ff ff8a 	bl	8007bcc <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	e074      	b.n	8007da6 <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007cc2:	f7ff feef 	bl	8007aa4 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d12e      	bne.n	8007d30 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8007cd2:	e028      	b.n	8007d26 <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8007cd4:	683a      	ldr	r2, [r7, #0]
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	4413      	add	r3, r2
 8007cda:	781b      	ldrb	r3, [r3, #0]
 8007cdc:	68f8      	ldr	r0, [r7, #12]
 8007cde:	4619      	mov	r1, r3
 8007ce0:	f7ff fe4a 	bl	8007978 <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007ce4:	bf00      	nop
 8007ce6:	68f8      	ldr	r0, [r7, #12]
 8007ce8:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007cec:	f7ff fec8 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0f7      	beq.n	8007ce6 <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007cf6:	68f8      	ldr	r0, [r7, #12]
 8007cf8:	2120      	movs	r1, #32
 8007cfa:	f7ff fec1 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d008      	beq.n	8007d16 <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007d04:	68f8      	ldr	r0, [r7, #12]
 8007d06:	2120      	movs	r1, #32
 8007d08:	f7ff fecc 	bl	8007aa4 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f7ff ff5d 	bl	8007bcc <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e047      	b.n	8007da6 <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007d16:	68f8      	ldr	r0, [r7, #12]
 8007d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d1c:	f7ff fec2 	bl	8007aa4 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3301      	adds	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8007d26:	697a      	ldr	r2, [r7, #20]
 8007d28:	6a3b      	ldr	r3, [r7, #32]
 8007d2a:	429a      	cmp	r2, r3
 8007d2c:	d3d2      	bcc.n	8007cd4 <I2C_MASTER_lStartTransmitPolling+0xb8>
 8007d2e:	e02b      	b.n	8007d88 <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8007d30:	e01a      	b.n	8007d68 <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007d32:	e010      	b.n	8007d56 <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	6a3b      	ldr	r3, [r7, #32]
 8007d38:	429a      	cmp	r2, r3
 8007d3a:	d20b      	bcs.n	8007d54 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	4413      	add	r3, r2
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	4619      	mov	r1, r3
 8007d48:	f7ff fe16 	bl	8007978 <I2C_MASTER_TransmitByte>
            buffer_index++;
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	3301      	adds	r3, #1
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	e000      	b.n	8007d56 <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 8007d54:	e008      	b.n	8007d68 <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007d56:	68f8      	ldr	r0, [r7, #12]
 8007d58:	f7ff fde4 	bl	8007924 <I2C_MASTER_IsTXFIFOFull>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	f083 0301 	eor.w	r3, r3, #1
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8007d68:	697a      	ldr	r2, [r7, #20]
 8007d6a:	6a3b      	ldr	r3, [r7, #32]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d3e0      	bcc.n	8007d32 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8007d70:	bf00      	nop
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4618      	mov	r0, r3
 8007d78:	f7ff fd90 	bl	800789c <XMC_USIC_CH_TXFIFO_IsEmpty>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	f083 0301 	eor.w	r3, r3, #1
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d1f4      	bne.n	8007d72 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 8007d88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d007      	beq.n	8007da0 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	689b      	ldr	r3, [r3, #8]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8007d9a:	68f8      	ldr	r0, [r7, #12]
 8007d9c:	f7ff fe14 	bl	80079c8 <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8007da0:	2300      	movs	r3, #0
 8007da2:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 8007da4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007da6:	4618      	mov	r0, r3
 8007da8:	3718      	adds	r7, #24
 8007daa:	46bd      	mov	sp, r7
 8007dac:	bd80      	pop	{r7, pc}
 8007dae:	bf00      	nop

08007db0 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8007db0:	b590      	push	{r4, r7, lr}
 8007db2:	b089      	sub	sp, #36	; 0x24
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	60f8      	str	r0, [r7, #12]
 8007db8:	607a      	str	r2, [r7, #4]
 8007dba:	603b      	str	r3, [r7, #0]
 8007dbc:	460b      	mov	r3, r1
 8007dbe:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 8007dc4:	7afb      	ldrb	r3, [r7, #11]
 8007dc6:	f083 0301 	eor.w	r3, r3, #1
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <I2C_MASTER_lStartReceivePolling+0x34>
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd8:	b2db      	uxtb	r3, r3
 8007dda:	f083 0301 	eor.w	r3, r3, #1
 8007dde:	b2db      	uxtb	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d105      	bne.n	8007df0 <I2C_MASTER_lStartReceivePolling+0x40>
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d002      	beq.n	8007df0 <I2C_MASTER_lStartReceivePolling+0x40>
 8007dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d102      	bne.n	8007df6 <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007df0:	2301      	movs	r3, #1
 8007df2:	77fb      	strb	r3, [r7, #31]
 8007df4:	e0b8      	b.n	8007f68 <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 8007dfe:	7afb      	ldrb	r3, [r7, #11]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d022      	beq.n	8007e4a <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 8007e04:	68f8      	ldr	r0, [r7, #12]
 8007e06:	6879      	ldr	r1, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f7ff feaf 	bl	8007b6c <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007e0e:	bf00      	nop
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007e16:	f7ff fe33 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d0f7      	beq.n	8007e10 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	2120      	movs	r1, #32
 8007e24:	f7ff fe2c 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d008      	beq.n	8007e40 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	2120      	movs	r1, #32
 8007e32:	f7ff fe37 	bl	8007aa4 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f7ff fec8 	bl	8007bcc <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e094      	b.n	8007f6a <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e46:	f7ff fe2d 	bl	8007aa4 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	685b      	ldr	r3, [r3, #4]
 8007e4e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d13a      	bne.n	8007ecc <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 8007e56:	e034      	b.n	8007ec2 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 8007e58:	69bb      	ldr	r3, [r7, #24]
 8007e5a:	1c5a      	adds	r2, r3, #1
 8007e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d107      	bne.n	8007e72 <I2C_MASTER_lStartReceivePolling+0xc2>
 8007e62:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d003      	beq.n	8007e72 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 8007e6a:	68f8      	ldr	r0, [r7, #12]
 8007e6c:	f7ff fda0 	bl	80079b0 <I2C_MASTER_ReceiveNACK>
 8007e70:	e002      	b.n	8007e78 <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f7ff fd90 	bl	8007998 <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8007e78:	bf00      	nop
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007e80:	f7ff fdfe 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d107      	bne.n	8007e9a <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007e90:	f7ff fdf6 	bl	8007a80 <I2C_MASTER_GetFlagStatus>
 8007e94:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0ef      	beq.n	8007e7a <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8007e9a:	68f8      	ldr	r0, [r7, #12]
 8007e9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ea0:	f7ff fe00 	bl	8007aa4 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8007ea4:	68f8      	ldr	r0, [r7, #12]
 8007ea6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007eaa:	f7ff fdfb 	bl	8007aa4 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8007eae:	69bb      	ldr	r3, [r7, #24]
 8007eb0:	1c5a      	adds	r2, r3, #1
 8007eb2:	61ba      	str	r2, [r7, #24]
 8007eb4:	683a      	ldr	r2, [r7, #0]
 8007eb6:	18d4      	adds	r4, r2, r3
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7ff fd4f 	bl	800795c <I2C_MASTER_GetReceivedByte>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d3c6      	bcc.n	8007e58 <I2C_MASTER_lStartReceivePolling+0xa8>
 8007eca:	e03f      	b.n	8007f4c <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 8007ed0:	e038      	b.n	8007f44 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007ed2:	e018      	b.n	8007f06 <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d213      	bcs.n	8007f04 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	1c5a      	adds	r2, r3, #1
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d107      	bne.n	8007ef6 <I2C_MASTER_lStartReceivePolling+0x146>
 8007ee6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	f7ff fd5e 	bl	80079b0 <I2C_MASTER_ReceiveNACK>
 8007ef4:	e002      	b.n	8007efc <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 8007ef6:	68f8      	ldr	r0, [r7, #12]
 8007ef8:	f7ff fd4e 	bl	8007998 <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	3301      	adds	r3, #1
 8007f00:	617b      	str	r3, [r7, #20]
 8007f02:	e000      	b.n	8007f06 <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 8007f04:	e008      	b.n	8007f18 <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fd0c 	bl	8007924 <I2C_MASTER_IsTXFIFOFull>
 8007f0c:	4603      	mov	r3, r0
 8007f0e:	f083 0301 	eor.w	r3, r3, #1
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d1dd      	bne.n	8007ed4 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8007f18:	e010      	b.n	8007f3c <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 8007f1a:	bf00      	nop
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f7ff fd0f 	bl	8007940 <I2C_MASTER_IsRXFIFOEmpty>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f9      	bne.n	8007f1c <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	1c5a      	adds	r2, r3, #1
 8007f2c:	61ba      	str	r2, [r7, #24]
 8007f2e:	683a      	ldr	r2, [r7, #0]
 8007f30:	18d4      	adds	r4, r2, r3
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff fd12 	bl	800795c <I2C_MASTER_GetReceivedByte>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8007f3c:	69ba      	ldr	r2, [r7, #24]
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d3ea      	bcc.n	8007f1a <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 8007f44:	697a      	ldr	r2, [r7, #20]
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	d3c2      	bcc.n	8007ed2 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 8007f4c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d007      	beq.n	8007f64 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8007f5e:	68f8      	ldr	r0, [r7, #12]
 8007f60:	f7ff fd32 	bl	80079c8 <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8007f64:	2300      	movs	r3, #0
 8007f66:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 8007f68:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3724      	adds	r7, #36	; 0x24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd90      	pop	{r4, r7, pc}
 8007f72:	bf00      	nop

08007f74 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8007f74:	b480      	push	{r7}
 8007f76:	b083      	sub	sp, #12
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	70fb      	strb	r3, [r7, #3]
 8007f80:	4613      	mov	r3, r2
 8007f82:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007f84:	78f8      	ldrb	r0, [r7, #3]
 8007f86:	78fb      	ldrb	r3, [r7, #3]
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	3306      	adds	r3, #6
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8007f96:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	6879      	ldr	r1, [r7, #4]
 8007f9c:	1d83      	adds	r3, r0, #6
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	440b      	add	r3, r1
 8007fa2:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8007fa4:	370c      	adds	r7, #12
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop

08007fb0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	f023 020f 	bic.w	r2, r3, #15
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	431a      	orrs	r2, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007fcc:	370c      	adds	r7, #12
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd4:	4770      	bx	lr
 8007fd6:	bf00      	nop

08007fd8 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	6839      	ldr	r1, [r7, #0]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f7fc f86a 	bl	80040c0 <XMC_I2C_CH_InitEx>
}
 8007fec:	3708      	adds	r7, #8
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
 8007ff2:	bf00      	nop

08007ff4 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b082      	sub	sp, #8
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	2104      	movs	r1, #4
 8008000:	f7ff ffd6 	bl	8007fb0 <XMC_USIC_CH_SetMode>
}
 8008004:	3708      	adds	r7, #8
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop

0800800c <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008010:	4805      	ldr	r0, [pc, #20]	; (8008028 <I2C_MASTER_0_disable_io+0x1c>)
 8008012:	2105      	movs	r1, #5
 8008014:	2200      	movs	r2, #0
 8008016:	f7fb ffd1 	bl	8003fbc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 800801a:	4803      	ldr	r0, [pc, #12]	; (8008028 <I2C_MASTER_0_disable_io+0x1c>)
 800801c:	2104      	movs	r1, #4
 800801e:	2200      	movs	r2, #0
 8008020:	f7fb ffcc 	bl	8003fbc <XMC_GPIO_SetMode>
}
 8008024:	bd80      	pop	{r7, pc}
 8008026:	bf00      	nop
 8008028:	48028200 	.word	0x48028200

0800802c <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8008030:	23d0      	movs	r3, #208	; 0xd0
 8008032:	4806      	ldr	r0, [pc, #24]	; (800804c <I2C_MASTER_0_enable_io+0x20>)
 8008034:	2105      	movs	r1, #5
 8008036:	461a      	mov	r2, r3
 8008038:	f7fb ffc0 	bl	8003fbc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 800803c:	23d0      	movs	r3, #208	; 0xd0
 800803e:	4803      	ldr	r0, [pc, #12]	; (800804c <I2C_MASTER_0_enable_io+0x20>)
 8008040:	2104      	movs	r1, #4
 8008042:	461a      	mov	r2, r3
 8008044:	f7fb ffba 	bl	8003fbc <XMC_GPIO_SetMode>
}
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	48028200 	.word	0x48028200

08008050 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8008054:	4813      	ldr	r0, [pc, #76]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 8008056:	4914      	ldr	r1, [pc, #80]	; (80080a8 <I2C_MASTER_0_init+0x58>)
 8008058:	f7ff ffbe 	bl	8007fd8 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 800805c:	4811      	ldr	r0, [pc, #68]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 800805e:	2100      	movs	r1, #0
 8008060:	2201      	movs	r2, #1
 8008062:	f7ff ff87 	bl	8007f74 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 8008066:	480f      	ldr	r0, [pc, #60]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 8008068:	2101      	movs	r1, #1
 800806a:	2200      	movs	r2, #0
 800806c:	f7ff ff82 	bl	8007f74 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8008070:	480c      	ldr	r0, [pc, #48]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 8008072:	2110      	movs	r1, #16
 8008074:	2204      	movs	r2, #4
 8008076:	2301      	movs	r3, #1
 8008078:	f7fc fd1a 	bl	8004ab0 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 800807c:	4809      	ldr	r0, [pc, #36]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 800807e:	2100      	movs	r1, #0
 8008080:	2204      	movs	r2, #4
 8008082:	230f      	movs	r3, #15
 8008084:	f7fc fd3c 	bl	8004b00 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 8008088:	4806      	ldr	r0, [pc, #24]	; (80080a4 <I2C_MASTER_0_init+0x54>)
 800808a:	f7ff ffb3 	bl	8007ff4 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 800808e:	4807      	ldr	r0, [pc, #28]	; (80080ac <I2C_MASTER_0_init+0x5c>)
 8008090:	2105      	movs	r1, #5
 8008092:	4a07      	ldr	r2, [pc, #28]	; (80080b0 <I2C_MASTER_0_init+0x60>)
 8008094:	f7f9 feae 	bl	8001df4 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 8008098:	4804      	ldr	r0, [pc, #16]	; (80080ac <I2C_MASTER_0_init+0x5c>)
 800809a:	2104      	movs	r1, #4
 800809c:	4a05      	ldr	r2, [pc, #20]	; (80080b4 <I2C_MASTER_0_init+0x64>)
 800809e:	f7f9 fea9 	bl	8001df4 <XMC_GPIO_Init>
}
 80080a2:	bd80      	pop	{r7, pc}
 80080a4:	40030200 	.word	0x40030200
 80080a8:	080130bc 	.word	0x080130bc
 80080ac:	48028200 	.word	0x48028200
 80080b0:	080130a4 	.word	0x080130a4
 80080b4:	080130b0 	.word	0x080130b0

080080b8 <I2C_MASTER_1_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_1_disable_io(void)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 80080bc:	4805      	ldr	r0, [pc, #20]	; (80080d4 <I2C_MASTER_1_disable_io+0x1c>)
 80080be:	2105      	movs	r1, #5
 80080c0:	2200      	movs	r2, #0
 80080c2:	f7fb ff7b 	bl	8003fbc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, XMC_GPIO_MODE_INPUT_TRISTATE);
 80080c6:	4803      	ldr	r0, [pc, #12]	; (80080d4 <I2C_MASTER_1_disable_io+0x1c>)
 80080c8:	2106      	movs	r1, #6
 80080ca:	2200      	movs	r2, #0
 80080cc:	f7fb ff76 	bl	8003fbc <XMC_GPIO_SetMode>
}
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	48028300 	.word	0x48028300

080080d8 <I2C_MASTER_1_enable_io>:

static void I2C_MASTER_1_enable_io(void)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, I2C_MASTER_1_sda_pin_config.mode);
 80080dc:	23c8      	movs	r3, #200	; 0xc8
 80080de:	4806      	ldr	r0, [pc, #24]	; (80080f8 <I2C_MASTER_1_enable_io+0x20>)
 80080e0:	2105      	movs	r1, #5
 80080e2:	461a      	mov	r2, r3
 80080e4:	f7fb ff6a 	bl	8003fbc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, I2C_MASTER_1_scl_pin_config.mode);
 80080e8:	23c8      	movs	r3, #200	; 0xc8
 80080ea:	4803      	ldr	r0, [pc, #12]	; (80080f8 <I2C_MASTER_1_enable_io+0x20>)
 80080ec:	2106      	movs	r1, #6
 80080ee:	461a      	mov	r2, r3
 80080f0:	f7fb ff64 	bl	8003fbc <XMC_GPIO_SetMode>
}
 80080f4:	bd80      	pop	{r7, pc}
 80080f6:	bf00      	nop
 80080f8:	48028300 	.word	0x48028300

080080fc <I2C_MASTER_1_init>:
  .config = &I2C_MASTER_1_config,
  .runtime = &I2C_MASTER_1_runtime,
};

void I2C_MASTER_1_init(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C2_CH1, &I2C_MASTER_1_channel_config);
 8008100:	4813      	ldr	r0, [pc, #76]	; (8008150 <I2C_MASTER_1_init+0x54>)
 8008102:	4914      	ldr	r1, [pc, #80]	; (8008154 <I2C_MASTER_1_init+0x58>)
 8008104:	f7ff ff68 	bl	8007fd8 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX0, 0);
 8008108:	4811      	ldr	r0, [pc, #68]	; (8008150 <I2C_MASTER_1_init+0x54>)
 800810a:	2100      	movs	r1, #0
 800810c:	2200      	movs	r2, #0
 800810e:	f7ff ff31 	bl	8007f74 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 8008112:	480f      	ldr	r0, [pc, #60]	; (8008150 <I2C_MASTER_1_init+0x54>)
 8008114:	2101      	movs	r1, #1
 8008116:	2201      	movs	r2, #1
 8008118:	f7ff ff2c 	bl	8007f74 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH1,
 800811c:	480c      	ldr	r0, [pc, #48]	; (8008150 <I2C_MASTER_1_init+0x54>)
 800811e:	2110      	movs	r1, #16
 8008120:	2204      	movs	r2, #4
 8008122:	2301      	movs	r3, #1
 8008124:	f7fc fcc4 	bl	8004ab0 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH1,
 8008128:	4809      	ldr	r0, [pc, #36]	; (8008150 <I2C_MASTER_1_init+0x54>)
 800812a:	2100      	movs	r1, #0
 800812c:	2204      	movs	r2, #4
 800812e:	230f      	movs	r3, #15
 8008130:	f7fc fce6 	bl	8004b00 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C2_CH1);
 8008134:	4806      	ldr	r0, [pc, #24]	; (8008150 <I2C_MASTER_1_init+0x54>)
 8008136:	f7ff ff5d 	bl	8007ff4 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, &I2C_MASTER_1_sda_pin_config);
 800813a:	4807      	ldr	r0, [pc, #28]	; (8008158 <I2C_MASTER_1_init+0x5c>)
 800813c:	2105      	movs	r1, #5
 800813e:	4a07      	ldr	r2, [pc, #28]	; (800815c <I2C_MASTER_1_init+0x60>)
 8008140:	f7f9 fe58 	bl	8001df4 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, &I2C_MASTER_1_scl_pin_config);
 8008144:	4804      	ldr	r0, [pc, #16]	; (8008158 <I2C_MASTER_1_init+0x5c>)
 8008146:	2106      	movs	r1, #6
 8008148:	4a05      	ldr	r2, [pc, #20]	; (8008160 <I2C_MASTER_1_init+0x64>)
 800814a:	f7f9 fe53 	bl	8001df4 <XMC_GPIO_Init>
}
 800814e:	bd80      	pop	{r7, pc}
 8008150:	48024200 	.word	0x48024200
 8008154:	08013108 	.word	0x08013108
 8008158:	48028300 	.word	0x48028300
 800815c:	080130f0 	.word	0x080130f0
 8008160:	080130fc 	.word	0x080130fc

08008164 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008164:	b480      	push	{r7}
 8008166:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008168:	4b04      	ldr	r3, [pc, #16]	; (800817c <__NVIC_GetPriorityGrouping+0x18>)
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008170:	0a1b      	lsrs	r3, r3, #8
}
 8008172:	4618      	mov	r0, r3
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr
 800817c:	e000ed00 	.word	0xe000ed00

08008180 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008180:	b480      	push	{r7}
 8008182:	b083      	sub	sp, #12
 8008184:	af00      	add	r7, sp, #0
 8008186:	4603      	mov	r3, r0
 8008188:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800818a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800818e:	2b00      	cmp	r3, #0
 8008190:	db0b      	blt.n	80081aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008192:	4908      	ldr	r1, [pc, #32]	; (80081b4 <__NVIC_EnableIRQ+0x34>)
 8008194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008198:	095b      	lsrs	r3, r3, #5
 800819a:	79fa      	ldrb	r2, [r7, #7]
 800819c:	f002 021f 	and.w	r2, r2, #31
 80081a0:	2001      	movs	r0, #1
 80081a2:	fa00 f202 	lsl.w	r2, r0, r2
 80081a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80081aa:	370c      	adds	r7, #12
 80081ac:	46bd      	mov	sp, r7
 80081ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b2:	4770      	bx	lr
 80081b4:	e000e100 	.word	0xe000e100

080081b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	4603      	mov	r3, r0
 80081c0:	6039      	str	r1, [r7, #0]
 80081c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80081c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	db0a      	blt.n	80081e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081cc:	490d      	ldr	r1, [pc, #52]	; (8008204 <__NVIC_SetPriority+0x4c>)
 80081ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	b2d2      	uxtb	r2, r2
 80081d6:	0092      	lsls	r2, r2, #2
 80081d8:	b2d2      	uxtb	r2, r2
 80081da:	440b      	add	r3, r1
 80081dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80081e0:	e00a      	b.n	80081f8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80081e2:	4909      	ldr	r1, [pc, #36]	; (8008208 <__NVIC_SetPriority+0x50>)
 80081e4:	79fb      	ldrb	r3, [r7, #7]
 80081e6:	f003 030f 	and.w	r3, r3, #15
 80081ea:	3b04      	subs	r3, #4
 80081ec:	683a      	ldr	r2, [r7, #0]
 80081ee:	b2d2      	uxtb	r2, r2
 80081f0:	0092      	lsls	r2, r2, #2
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	440b      	add	r3, r1
 80081f6:	761a      	strb	r2, [r3, #24]
  }
}
 80081f8:	370c      	adds	r7, #12
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	e000e100 	.word	0xe000e100
 8008208:	e000ed00 	.word	0xe000ed00

0800820c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800820c:	b480      	push	{r7}
 800820e:	b089      	sub	sp, #36	; 0x24
 8008210:	af00      	add	r7, sp, #0
 8008212:	60f8      	str	r0, [r7, #12]
 8008214:	60b9      	str	r1, [r7, #8]
 8008216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	f003 0307 	and.w	r3, r3, #7
 800821e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	f1c3 0307 	rsb	r3, r3, #7
 8008226:	2b06      	cmp	r3, #6
 8008228:	bf28      	it	cs
 800822a:	2306      	movcs	r3, #6
 800822c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800822e:	69fb      	ldr	r3, [r7, #28]
 8008230:	3306      	adds	r3, #6
 8008232:	2b06      	cmp	r3, #6
 8008234:	d902      	bls.n	800823c <NVIC_EncodePriority+0x30>
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	3b01      	subs	r3, #1
 800823a:	e000      	b.n	800823e <NVIC_EncodePriority+0x32>
 800823c:	2300      	movs	r3, #0
 800823e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2201      	movs	r2, #1
 8008244:	fa02 f303 	lsl.w	r3, r2, r3
 8008248:	1e5a      	subs	r2, r3, #1
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	401a      	ands	r2, r3
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2101      	movs	r1, #1
 8008256:	fa01 f303 	lsl.w	r3, r1, r3
 800825a:	1e59      	subs	r1, r3, #1
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008260:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008262:	4618      	mov	r0, r3
 8008264:	3724      	adds	r7, #36	; 0x24
 8008266:	46bd      	mov	sp, r7
 8008268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop

08008270 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8008270:	b590      	push	{r4, r7, lr}
 8008272:	b083      	sub	sp, #12
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	7a1b      	ldrb	r3, [r3, #8]
 800827c:	f083 0301 	eor.w	r3, r3, #1
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d024      	beq.n	80082d0 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4618      	mov	r0, r3
 800828c:	f7fb fa0c 	bl	80036a8 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	7a5c      	ldrb	r4, [r3, #9]
 8008294:	f7ff ff66 	bl	8008164 <__NVIC_GetPriorityGrouping>
 8008298:	4601      	mov	r1, r0
                                                        obj->config->priority,
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80082a0:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80082a8:	4608      	mov	r0, r1
 80082aa:	4611      	mov	r1, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	f7ff ffad 	bl	800820c <NVIC_EncodePriority>
 80082b2:	4602      	mov	r2, r0
 80082b4:	b263      	sxtb	r3, r4
 80082b6:	4618      	mov	r0, r3
 80082b8:	4611      	mov	r1, r2
 80082ba:	f7ff ff7d 	bl	80081b8 <__NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	7a5b      	ldrb	r3, [r3, #9]
 80082c2:	b25b      	sxtb	r3, r3
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7ff ff5b 	bl	8008180 <__NVIC_EnableIRQ>
    obj->initialized = true;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 80082d0:	2300      	movs	r3, #0
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	370c      	adds	r7, #12
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd90      	pop	{r4, r7, pc}
 80082da:	bf00      	nop

080082dc <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 80082e0:	4801      	ldr	r0, [pc, #4]	; (80082e8 <GPDMA0_0_IRQHandler+0xc>)
 80082e2:	f7fb fd5b 	bl	8003d9c <XMC_DMA_IRQHandler>
}
 80082e6:	bd80      	pop	{r7, pc}
 80082e8:	50014000 	.word	0x50014000

080082ec <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 80082f0:	4801      	ldr	r0, [pc, #4]	; (80082f8 <GPDMA1_0_IRQHandler+0xc>)
 80082f2:	f7fb fd53 	bl	8003d9c <XMC_DMA_IRQHandler>
}
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	50018000 	.word	0x50018000

080082fc <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f44f 7280 	mov.w	r2, #256	; 0x100
 800830a:	60da      	str	r2, [r3, #12]
}
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop

08008318 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	7b5b      	ldrb	r3, [r3, #13]
 8008324:	f083 0301 	eor.w	r3, r3, #1
 8008328:	b2db      	uxtb	r3, r3
 800832a:	2b00      	cmp	r3, #0
 800832c:	d00f      	beq.n	800834e <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	689a      	ldr	r2, [r3, #8]
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	7b1b      	ldrb	r3, [r3, #12]
 8008336:	4610      	mov	r0, r2
 8008338:	4619      	mov	r1, r3
 800833a:	f7fb f8c5 	bl	80034c8 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	689b      	ldr	r3, [r3, #8]
 8008342:	4618      	mov	r0, r3
 8008344:	f7ff ffda 	bl	80082fc <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008366:	60da      	str	r2, [r3, #12]
}
 8008368:	370c      	adds	r7, #12
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop

08008374 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b082      	sub	sp, #8
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7b5b      	ldrb	r3, [r3, #13]
 8008380:	f083 0301 	eor.w	r3, r3, #1
 8008384:	b2db      	uxtb	r3, r3
 8008386:	2b00      	cmp	r3, #0
 8008388:	d00f      	beq.n	80083aa <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	689a      	ldr	r2, [r3, #8]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	7b1b      	ldrb	r3, [r3, #12]
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	f7fa ffc3 	bl	8003320 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff ffda 	bl	8008358 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80083aa:	2300      	movs	r3, #0
}
 80083ac:	4618      	mov	r0, r3
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	b084      	sub	sp, #16
 80083b8:	af00      	add	r7, sp, #0
 80083ba:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80083bc:	2300      	movs	r3, #0
 80083be:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	7a5b      	ldrb	r3, [r3, #9]
 80083c4:	f083 0301 	eor.w	r3, r3, #1
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00f      	beq.n	80083ee <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6859      	ldr	r1, [r3, #4]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	7a1a      	ldrb	r2, [r3, #8]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	461a      	mov	r2, r3
 80083e0:	f7fa fcf2 	bl	8002dc8 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80083ee:	7bfb      	ldrb	r3, [r7, #15]

}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <FATFS_Init>:

/*
 * API to initialize the FATFS APP
 */
FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 8008400:	2300      	movs	r3, #0
 8008402:	73fb      	strb	r3, [r7, #15]
  if (handle->initialized == false)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	791b      	ldrb	r3, [r3, #4]
 8008408:	f083 0301 	eor.w	r3, r3, #1
 800840c:	b2db      	uxtb	r3, r3
 800840e:	2b00      	cmp	r3, #0
 8008410:	d022      	beq.n	8008458 <FATFS_Init+0x60>
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008412:	2300      	movs	r3, #0
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	e00e      	b.n	8008436 <FATFS_Init+0x3e>
  {
    status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 8008418:	4a13      	ldr	r2, [pc, #76]	; (8008468 <FATFS_Init+0x70>)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe fff7 	bl	8007414 <SDMMC_BLOCK_Init>
 8008426:	4603      	mov	r3, r0
 8008428:	461a      	mov	r2, r3
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	4313      	orrs	r3, r2
 800842e:	73fb      	strb	r3, [r7, #15]
{
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
  if (handle->initialized == false)
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008430:	68bb      	ldr	r3, [r7, #8]
 8008432:	3301      	adds	r3, #1
 8008434:	60bb      	str	r3, [r7, #8]
 8008436:	68bb      	ldr	r3, [r7, #8]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d0ed      	beq.n	8008418 <FATFS_Init+0x20>
#if (FATFS_STANDARDLIBRARY == 1U)
  SLTHA_Init();
#endif

#if (FF_FS_NORTC == 0U)
  if (status == FATFS_STATUS_SUCCESS)
 800843c:	7bfb      	ldrb	r3, [r7, #15]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d106      	bne.n	8008450 <FATFS_Init+0x58>
  {
    status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	4618      	mov	r0, r3
 8008448:	f7ff f832 	bl	80074b0 <RTC_Init>
 800844c:	4603      	mov	r3, r0
 800844e:	73fb      	strb	r3, [r7, #15]
  }
#endif
    handle->initialized = true;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2201      	movs	r2, #1
 8008454:	711a      	strb	r2, [r3, #4]
 8008456:	e001      	b.n	800845c <FATFS_Init+0x64>
  }
  else
  {
    status = FATFS_STATUS_FAILURE;
 8008458:	2301      	movs	r3, #1
 800845a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800845c:	7bfb      	ldrb	r3, [r7, #15]
}
 800845e:	4618      	mov	r0, r3
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}
 8008466:	bf00      	nop
 8008468:	0801313c 	.word	0x0801313c

0800846c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	6819      	ldr	r1, [r3, #0]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	7c1a      	ldrb	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3304      	adds	r3, #4
 8008480:	4608      	mov	r0, r1
 8008482:	4611      	mov	r1, r2
 8008484:	461a      	mov	r2, r3
 8008486:	f7f9 fcb5 	bl	8001df4 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6819      	ldr	r1, [r3, #0]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	7c1a      	ldrb	r2, [r3, #16]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	7c5b      	ldrb	r3, [r3, #17]
 8008496:	4608      	mov	r0, r1
 8008498:	4611      	mov	r1, r2
 800849a:	461a      	mov	r2, r3
 800849c:	f7fb fdce 	bl	800403c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80084a0:	2300      	movs	r3, #0
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3708      	adds	r7, #8
 80084a6:	46bd      	mov	sp, r7
 80084a8:	bd80      	pop	{r7, pc}
 80084aa:	bf00      	nop

080084ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80084ac:	b480      	push	{r7}
 80084ae:	b085      	sub	sp, #20
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f003 0307 	and.w	r3, r3, #7
 80084ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80084bc:	4b0c      	ldr	r3, [pc, #48]	; (80084f0 <__NVIC_SetPriorityGrouping+0x44>)
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80084c8:	4013      	ands	r3, r2
 80084ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80084d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80084d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084dc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80084de:	4a04      	ldr	r2, [pc, #16]	; (80084f0 <__NVIC_SetPriorityGrouping+0x44>)
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	60d3      	str	r3, [r2, #12]
}
 80084e4:	3714      	adds	r7, #20
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr
 80084ee:	bf00      	nop
 80084f0:	e000ed00 	.word	0xe000ed00

080084f4 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b082      	sub	sp, #8
 80084f8:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 80084fa:	2001      	movs	r0, #1
 80084fc:	f7ff ffd6 	bl	80084ac <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008500:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8008502:	4b21      	ldr	r3, [pc, #132]	; (8008588 <SystemCoreSetup+0x94>)
 8008504:	4a21      	ldr	r2, [pc, #132]	; (800858c <SystemCoreSetup+0x98>)
 8008506:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008508:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800850c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800850e:	4a1e      	ldr	r2, [pc, #120]	; (8008588 <SystemCoreSetup+0x94>)
 8008510:	4b1d      	ldr	r3, [pc, #116]	; (8008588 <SystemCoreSetup+0x94>)
 8008512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008516:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800851a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800851e:	4b1c      	ldr	r3, [pc, #112]	; (8008590 <SystemCoreSetup+0x9c>)
 8008520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008524:	3314      	adds	r3, #20
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f023 030f 	bic.w	r3, r3, #15
 8008530:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f043 0304 	orr.w	r3, r3, #4
 8008538:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800853a:	4b15      	ldr	r3, [pc, #84]	; (8008590 <SystemCoreSetup+0x9c>)
 800853c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008540:	3314      	adds	r3, #20
 8008542:	687a      	ldr	r2, [r7, #4]
 8008544:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8008546:	4a10      	ldr	r2, [pc, #64]	; (8008588 <SystemCoreSetup+0x94>)
 8008548:	4b0f      	ldr	r3, [pc, #60]	; (8008588 <SystemCoreSetup+0x94>)
 800854a:	695b      	ldr	r3, [r3, #20]
 800854c:	f023 0310 	bic.w	r3, r3, #16
 8008550:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8008552:	4a0d      	ldr	r2, [pc, #52]	; (8008588 <SystemCoreSetup+0x94>)
 8008554:	4b0c      	ldr	r3, [pc, #48]	; (8008588 <SystemCoreSetup+0x94>)
 8008556:	695b      	ldr	r3, [r3, #20]
 8008558:	f023 0308 	bic.w	r3, r3, #8
 800855c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800855e:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <SystemCoreSetup+0x94>)
 8008560:	4b09      	ldr	r3, [pc, #36]	; (8008588 <SystemCoreSetup+0x94>)
 8008562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008568:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800856a:	4a07      	ldr	r2, [pc, #28]	; (8008588 <SystemCoreSetup+0x94>)
 800856c:	4b06      	ldr	r3, [pc, #24]	; (8008588 <SystemCoreSetup+0x94>)
 800856e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008570:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008574:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8008576:	4a04      	ldr	r2, [pc, #16]	; (8008588 <SystemCoreSetup+0x94>)
 8008578:	4b03      	ldr	r3, [pc, #12]	; (8008588 <SystemCoreSetup+0x94>)
 800857a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008580:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008582:	3708      	adds	r7, #8
 8008584:	46bd      	mov	sp, r7
 8008586:	bd80      	pop	{r7, pc}
 8008588:	e000ed00 	.word	0xe000ed00
 800858c:	08000000 	.word	0x08000000
 8008590:	58001000 	.word	0x58001000

08008594 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 800859c:	2300      	movs	r3, #0
 800859e:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2201      	movs	r2, #1
 80085a4:	701a      	strb	r2, [r3, #0]

  return (status);
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3714      	adds	r7, #20
 80085ac:	46bd      	mov	sp, r7
 80085ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b2:	4770      	bx	lr

080085b4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80085b4:	b480      	push	{r7}
 80085b6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80085b8:	4b02      	ldr	r3, [pc, #8]	; (80085c4 <OSCHP_GetFrequency+0x10>)
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	46bd      	mov	sp, r7
 80085be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c2:	4770      	bx	lr
 80085c4:	00b71b00 	.word	0x00b71b00

080085c8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80085c8:	b5b0      	push	{r4, r5, r7, lr}
 80085ca:	b086      	sub	sp, #24
 80085cc:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80085ce:	4b13      	ldr	r3, [pc, #76]	; (800861c <SystemCoreClockSetup+0x54>)
 80085d0:	1d3c      	adds	r4, r7, #4
 80085d2:	461d      	mov	r5, r3
 80085d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80085d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80085d8:	682b      	ldr	r3, [r5, #0]
 80085da:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80085dc:	1d3b      	adds	r3, r7, #4
 80085de:	4618      	mov	r0, r3
 80085e0:	f7f9 fd9c 	bl	800211c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 80085e4:	2000      	movs	r0, #0
 80085e6:	f7f9 fed3 	bl	8002390 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 80085ea:	2000      	movs	r0, #0
 80085ec:	f7f9 fe88 	bl	8002300 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 80085f0:	2004      	movs	r0, #4
 80085f2:	f7f9 ff59 	bl	80024a8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 80085f6:	f7f9 ffe3 	bl	80025c0 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 80085fa:	2001      	movs	r0, #1
 80085fc:	2120      	movs	r1, #32
 80085fe:	f7f9 ffef 	bl	80025e0 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8008602:	2000      	movs	r0, #0
 8008604:	f7f9 fe90 	bl	8002328 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8008608:	2001      	movs	r0, #1
 800860a:	f7f9 ff75 	bl	80024f8 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800860e:	2001      	movs	r0, #1
 8008610:	f7f9 ff5e 	bl	80024d0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8008614:	3718      	adds	r7, #24
 8008616:	46bd      	mov	sp, r7
 8008618:	bdb0      	pop	{r4, r5, r7, pc}
 800861a:	bf00      	nop
 800861c:	080136a4 	.word	0x080136a4

08008620 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8008620:	b480      	push	{r7}
 8008622:	b085      	sub	sp, #20
 8008624:	af00      	add	r7, sp, #0
 8008626:	60f8      	str	r0, [r7, #12]
 8008628:	460b      	mov	r3, r1
 800862a:	607a      	str	r2, [r7, #4]
 800862c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	7afb      	ldrb	r3, [r7, #11]
 8008634:	2107      	movs	r1, #7
 8008636:	fa01 f303 	lsl.w	r3, r1, r3
 800863a:	43db      	mvns	r3, r3
 800863c:	401a      	ands	r2, r3
 800863e:	7afb      	ldrb	r3, [r7, #11]
 8008640:	6879      	ldr	r1, [r7, #4]
 8008642:	fa01 f303 	lsl.w	r3, r1, r3
 8008646:	431a      	orrs	r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	609a      	str	r2, [r3, #8]
}
 800864c:	3714      	adds	r7, #20
 800864e:	46bd      	mov	sp, r7
 8008650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008654:	4770      	bx	lr
 8008656:	bf00      	nop

08008658 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8008658:	b480      	push	{r7}
 800865a:	b083      	sub	sp, #12
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	68db      	ldr	r3, [r3, #12]
 8008668:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800866c:	78fb      	ldrb	r3, [r7, #3]
 800866e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008672:	431a      	orrs	r2, r3
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8008678:	370c      	adds	r7, #12
 800867a:	46bd      	mov	sp, r7
 800867c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008680:	4770      	bx	lr
 8008682:	bf00      	nop

08008684 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	68db      	ldr	r3, [r3, #12]
 8008690:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	60da      	str	r2, [r3, #12]
}
 8008698:	370c      	adds	r7, #12
 800869a:	46bd      	mov	sp, r7
 800869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a0:	4770      	bx	lr
 80086a2:	bf00      	nop

080086a4 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	601a      	str	r2, [r3, #0]
}
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr
 80086c2:	bf00      	nop

080086c4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b083      	sub	sp, #12
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	601a      	str	r2, [r3, #0]
}
 80086d8:	370c      	adds	r7, #12
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop

080086e4 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f043 0201 	orr.w	r2, r3, #1
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	601a      	str	r2, [r3, #0]
}
 80086f8:	370c      	adds	r7, #12
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr
 8008702:	bf00      	nop

08008704 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008704:	b480      	push	{r7}
 8008706:	b083      	sub	sp, #12
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	f023 0201 	bic.w	r2, r3, #1
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	601a      	str	r2, [r3, #0]
}
 8008718:	370c      	adds	r7, #12
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop

08008724 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8008724:	b480      	push	{r7}
 8008726:	b083      	sub	sp, #12
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	601a      	str	r2, [r3, #0]
}
 8008738:	370c      	adds	r7, #12
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop

08008744 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8008744:	b480      	push	{r7}
 8008746:	b085      	sub	sp, #20
 8008748:	af00      	add	r7, sp, #0
 800874a:	60f8      	str	r0, [r7, #12]
 800874c:	460b      	mov	r3, r1
 800874e:	607a      	str	r2, [r7, #4]
 8008750:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	6812      	ldr	r2, [r2, #0]
 800875a:	6891      	ldr	r1, [r2, #8]
 800875c:	7afa      	ldrb	r2, [r7, #11]
 800875e:	2007      	movs	r0, #7
 8008760:	fa00 f202 	lsl.w	r2, r0, r2
 8008764:	43d2      	mvns	r2, r2
 8008766:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8008768:	7afa      	ldrb	r2, [r7, #11]
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008770:	430a      	orrs	r2, r1
 8008772:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8008774:	3714      	adds	r7, #20
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop

08008780 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8008780:	b480      	push	{r7}
 8008782:	b083      	sub	sp, #12
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
}
 800878e:	4618      	mov	r0, r3
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr
 800879a:	bf00      	nop

0800879c <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
 80087a4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	687a      	ldr	r2, [r7, #4]
 80087ac:	6812      	ldr	r2, [r2, #0]
 80087ae:	6811      	ldr	r1, [r2, #0]
 80087b0:	683a      	ldr	r2, [r7, #0]
 80087b2:	430a      	orrs	r2, r1
 80087b4:	601a      	str	r2, [r3, #0]
}
 80087b6:	370c      	adds	r7, #12
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr

080087c0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4618      	mov	r0, r3
 80087ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80087d2:	f7ff ffe3 	bl	800879c <XMC_CAN_MO_EnableEvent>
}
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80087ee:	f7ff ffd5 	bl	800879c <XMC_CAN_MO_EnableEvent>
}
 80087f2:	3708      	adds	r7, #8
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b084      	sub	sp, #16
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8008800:	2300      	movs	r3, #0
 8008802:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 f831 	bl	800886c <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f043 0302 	orr.w	r3, r3, #2
 800881a:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d003      	beq.n	800882e <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f043 0304 	orr.w	r3, r3, #4
 800882c:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f043 0308 	orr.w	r3, r3, #8
 800883e:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	4618      	mov	r0, r3
 8008846:	68f9      	ldr	r1, [r7, #12]
 8008848:	f7fa fcd0 	bl	80031ec <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008852:	2b00      	cmp	r3, #0
 8008854:	d006      	beq.n	8008864 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	4618      	mov	r0, r3
 800885c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008860:	f7fa fcc4 	bl	80031ec <XMC_CAN_NODE_EnableEvent>
  }

}
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop

0800886c <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800887e:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008880:	4610      	mov	r0, r2
 8008882:	2100      	movs	r1, #0
 8008884:	461a      	mov	r2, r3
 8008886:	f7ff fecb 	bl	8008620 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008894:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8008896:	4610      	mov	r0, r2
 8008898:	2104      	movs	r1, #4
 800889a:	461a      	mov	r2, r3
 800889c:	f7ff fec0 	bl	8008620 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088aa:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80088ac:	4610      	mov	r0, r2
 80088ae:	2108      	movs	r1, #8
 80088b0:	461a      	mov	r2, r3
 80088b2:	f7ff feb5 	bl	8008620 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088c0:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80088c2:	4610      	mov	r0, r2
 80088c4:	210c      	movs	r1, #12
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7ff feaa 	bl	8008620 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 80088cc:	3708      	adds	r7, #8
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop

080088d4 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b082      	sub	sp, #8
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4618      	mov	r0, r3
 80088e2:	f7fa fab1 	bl	8002e48 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	79db      	ldrb	r3, [r3, #7]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	795b      	ldrb	r3, [r3, #5]
 80088f6:	4610      	mov	r0, r2
 80088f8:	2104      	movs	r1, #4
 80088fa:	461a      	mov	r2, r3
 80088fc:	f7ff ff22 	bl	8008744 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f7ff ff5d 	bl	80087c0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	7a1b      	ldrb	r3, [r3, #8]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d00b      	beq.n	8008926 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	799b      	ldrb	r3, [r3, #6]
 8008916:	4610      	mov	r0, r2
 8008918:	2100      	movs	r1, #0
 800891a:	461a      	mov	r2, r3
 800891c:	f7ff ff12 	bl	8008744 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ff5b 	bl	80087dc <CAN_NODE_MO_EnableRxEvent>
  }

}
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b084      	sub	sp, #16
 8008930:	af00      	add	r7, sp, #0
 8008932:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4618      	mov	r0, r3
 800893e:	f7fa fb57 	bl	8002ff0 <XMC_CAN_MO_Transmit>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
}
 8008948:	4618      	mov	r0, r3
 800894a:	3710      	adds	r7, #16
 800894c:	46bd      	mov	sp, r7
 800894e:	bd80      	pop	{r7, pc}

08008950 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008958:	2300      	movs	r3, #0
 800895a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4618      	mov	r0, r3
 8008962:	f7fa fb73 	bl	800304c <XMC_CAN_MO_Receive>
 8008966:	4603      	mov	r3, r0
 8008968:	73fb      	strb	r3, [r7, #15]
  return (status);
 800896a:	7bfb      	ldrb	r3, [r7, #15]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	6812      	ldr	r2, [r2, #0]
 800898e:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68ba      	ldr	r2, [r7, #8]
 8008996:	6852      	ldr	r2, [r2, #4]
 8008998:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fa faee 	bl	8002f80 <XMC_CAN_MO_UpdateData>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
  return (status);
 80089a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3710      	adds	r7, #16
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	bf00      	nop

080089b4 <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f7ff fedd 	bl	8008780 <XMC_CAN_MO_GetStatus>
 80089c6:	60f8      	str	r0, [r7, #12]

  return (status);
 80089c8:	68fb      	ldr	r3, [r7, #12]
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3710      	adds	r7, #16
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}
 80089d2:	bf00      	nop

080089d4 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b086      	sub	sp, #24
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 80089dc:	2300      	movs	r3, #0
 80089de:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7ff fce1 	bl	80083b4 <GLOBAL_CAN_Init>
 80089f2:	4603      	mov	r3, r0
 80089f4:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	f040 8087 	bne.w	8008b0c <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	685a      	ldr	r2, [r3, #4]
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	4610      	mov	r0, r2
 8008a08:	4619      	mov	r1, r3
 8008a0a:	f7fa f8b7 	bl	8002b7c <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d178      	bne.n	8008b06 <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f7ff fe43 	bl	80086a4 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	685b      	ldr	r3, [r3, #4]
 8008a22:	4618      	mov	r0, r3
 8008a24:	f7ff fe5e 	bl	80086e4 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	4618      	mov	r0, r3
 8008a2e:	f7ff fe79 	bl	8008724 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d005      	beq.n	8008a48 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	4618      	mov	r0, r3
 8008a42:	f7ff fe1f 	bl	8008684 <XMC_CAN_NODE_EnableLoopBack>
 8008a46:	e018      	b.n	8008a7a <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a4e:	6819      	ldr	r1, [r3, #0]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008a56:	791a      	ldrb	r2, [r3, #4]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008a5e:	4608      	mov	r0, r1
 8008a60:	4611      	mov	r1, r2
 8008a62:	461a      	mov	r2, r3
 8008a64:	f7f9 f9c6 	bl	8001df4 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685a      	ldr	r2, [r3, #4]
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008a72:	4610      	mov	r0, r2
 8008a74:	4619      	mov	r1, r3
 8008a76:	f7ff fdef 	bl	8008658 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8008a7a:	6878      	ldr	r0, [r7, #4]
 8008a7c:	f7ff febc 	bl	80087f8 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008a80:	2300      	movs	r3, #0
 8008a82:	613b      	str	r3, [r7, #16]
 8008a84:	e019      	b.n	8008aba <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8008a86:	687a      	ldr	r2, [r7, #4]
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	3302      	adds	r3, #2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	685b      	ldr	r3, [r3, #4]
 8008a92:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	6859      	ldr	r1, [r3, #4]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	791b      	ldrb	r3, [r3, #4]
 8008aa4:	4608      	mov	r0, r1
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	f7fa f90f 	bl	8002ccc <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8008aae:	68b8      	ldr	r0, [r7, #8]
 8008ab0:	f7ff ff10 	bl	80088d4 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008ab4:	693b      	ldr	r3, [r7, #16]
 8008ab6:	3301      	adds	r3, #1
 8008ab8:	613b      	str	r3, [r7, #16]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d8de      	bhi.n	8008a86 <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	685b      	ldr	r3, [r3, #4]
 8008acc:	4618      	mov	r0, r3
 8008ace:	f7ff fdf9 	bl	80086c4 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fe14 	bl	8008704 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008ae2:	f083 0301 	eor.w	r3, r3, #1
 8008ae6:	b2db      	uxtb	r3, r3
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	6819      	ldr	r1, [r3, #0]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	791a      	ldrb	r2, [r3, #4]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	461a      	mov	r2, r3
 8008b00:	f7f9 f978 	bl	8001df4 <XMC_GPIO_Init>
 8008b04:	e004      	b.n	8008b10 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8008b06:	2301      	movs	r3, #1
 8008b08:	75fb      	strb	r3, [r7, #23]
 8008b0a:	e001      	b.n	8008b10 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8008b10:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3718      	adds	r7, #24
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}
 8008b1a:	bf00      	nop

08008b1c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b082      	sub	sp, #8
 8008b20:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8008b22:	2300      	movs	r3, #0
 8008b24:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8008b26:	48b7      	ldr	r0, [pc, #732]	; (8008e04 <DAVE_Init+0x2e8>)
 8008b28:	f7ff fd34 	bl	8008594 <CLOCK_XMC4_Init>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8008b30:	79fb      	ldrb	r3, [r7, #7]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_DC_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_DC_EN_OUT_D); 
 8008b36:	48b4      	ldr	r0, [pc, #720]	; (8008e08 <DAVE_Init+0x2ec>)
 8008b38:	f7ff fc98 	bl	800846c <DIGITAL_IO_Init>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b40:	79fb      	ldrb	r3, [r7, #7]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d104      	bne.n	8008b50 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_PUMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_PUMP_OUT_D); 
 8008b46:	48b1      	ldr	r0, [pc, #708]	; (8008e0c <DAVE_Init+0x2f0>)
 8008b48:	f7ff fc90 	bl	800846c <DIGITAL_IO_Init>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b50:	79fb      	ldrb	r3, [r7, #7]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d104      	bne.n	8008b60 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance HEADLAMPS_ADJ_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HEADLAMPS_ADJ_PWR_OUT_D); 
 8008b56:	48ae      	ldr	r0, [pc, #696]	; (8008e10 <DAVE_Init+0x2f4>)
 8008b58:	f7ff fc88 	bl	800846c <DIGITAL_IO_Init>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b60:	79fb      	ldrb	r3, [r7, #7]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d104      	bne.n	8008b70 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance AC_RADIATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AC_RADIATOR_OUT_D); 
 8008b66:	48ab      	ldr	r0, [pc, #684]	; (8008e14 <DAVE_Init+0x2f8>)
 8008b68:	f7ff fc80 	bl	800846c <DIGITAL_IO_Init>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b70:	79fb      	ldrb	r3, [r7, #7]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d104      	bne.n	8008b80 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance INSTRUMENT_CON_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INSTRUMENT_CON_PWR_OUT_D); 
 8008b76:	48a8      	ldr	r0, [pc, #672]	; (8008e18 <DAVE_Init+0x2fc>)
 8008b78:	f7ff fc78 	bl	800846c <DIGITAL_IO_Init>
 8008b7c:	4603      	mov	r3, r0
 8008b7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d104      	bne.n	8008b90 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACCEL_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACCEL_CS_OUT); 
 8008b86:	48a5      	ldr	r0, [pc, #660]	; (8008e1c <DAVE_Init+0x300>)
 8008b88:	f7ff fc70 	bl	800846c <DIGITAL_IO_Init>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008b90:	79fb      	ldrb	r3, [r7, #7]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d104      	bne.n	8008ba0 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELECT_HANDBRAKE_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELECT_HANDBRAKE_EN_OUT_D); 
 8008b96:	48a2      	ldr	r0, [pc, #648]	; (8008e20 <DAVE_Init+0x304>)
 8008b98:	f7ff fc68 	bl	800846c <DIGITAL_IO_Init>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d104      	bne.n	8008bb0 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_CONTACTOR_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_CONTACTOR_RELAY_OUT_D); 
 8008ba6:	489f      	ldr	r0, [pc, #636]	; (8008e24 <DAVE_Init+0x308>)
 8008ba8:	f7ff fc60 	bl	800846c <DIGITAL_IO_Init>
 8008bac:	4603      	mov	r3, r0
 8008bae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008bb0:	79fb      	ldrb	r3, [r7, #7]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d104      	bne.n	8008bc0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_PARK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_PARK_RELAY_OUT_D); 
 8008bb6:	489c      	ldr	r0, [pc, #624]	; (8008e28 <DAVE_Init+0x30c>)
 8008bb8:	f7ff fc58 	bl	800846c <DIGITAL_IO_Init>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008bc0:	79fb      	ldrb	r3, [r7, #7]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d104      	bne.n	8008bd0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REV_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REV_RELAY_OUT_D); 
 8008bc6:	4899      	ldr	r0, [pc, #612]	; (8008e2c <DAVE_Init+0x310>)
 8008bc8:	f7ff fc50 	bl	800846c <DIGITAL_IO_Init>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008bd0:	79fb      	ldrb	r3, [r7, #7]
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d104      	bne.n	8008be0 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FWD_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FWD_RELAY_OUT_D); 
 8008bd6:	4896      	ldr	r0, [pc, #600]	; (8008e30 <DAVE_Init+0x314>)
 8008bd8:	f7ff fc48 	bl	800846c <DIGITAL_IO_Init>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008be0:	79fb      	ldrb	r3, [r7, #7]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d104      	bne.n	8008bf0 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REGEN_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REGEN_RELAY_OUT_D); 
 8008be6:	4893      	ldr	r0, [pc, #588]	; (8008e34 <DAVE_Init+0x318>)
 8008be8:	f7ff fc40 	bl	800846c <DIGITAL_IO_Init>
 8008bec:	4603      	mov	r3, r0
 8008bee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008bf0:	79fb      	ldrb	r3, [r7, #7]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d104      	bne.n	8008c00 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_ELOCK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_ELOCK_RELAY_OUT_D); 
 8008bf6:	4890      	ldr	r0, [pc, #576]	; (8008e38 <DAVE_Init+0x31c>)
 8008bf8:	f7ff fc38 	bl	800846c <DIGITAL_IO_Init>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d104      	bne.n	8008c10 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance POS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&POS_OUT_D); 
 8008c06:	488d      	ldr	r0, [pc, #564]	; (8008e3c <DAVE_Init+0x320>)
 8008c08:	f7ff fc30 	bl	800846c <DIGITAL_IO_Init>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c10:	79fb      	ldrb	r3, [r7, #7]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d104      	bne.n	8008c20 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance VCU_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VCU_FAN_PWR_OUT_D); 
 8008c16:	488a      	ldr	r0, [pc, #552]	; (8008e40 <DAVE_Init+0x324>)
 8008c18:	f7ff fc28 	bl	800846c <DIGITAL_IO_Init>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c20:	79fb      	ldrb	r3, [r7, #7]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d104      	bne.n	8008c30 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_EFUSE_1_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_EFUSE_1_OUT_D); 
 8008c26:	4887      	ldr	r0, [pc, #540]	; (8008e44 <DAVE_Init+0x328>)
 8008c28:	f7ff fc20 	bl	800846c <DIGITAL_IO_Init>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c30:	79fb      	ldrb	r3, [r7, #7]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d104      	bne.n	8008c40 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance WIPER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WIPER_PWR_OUT_D); 
 8008c36:	4884      	ldr	r0, [pc, #528]	; (8008e48 <DAVE_Init+0x32c>)
 8008c38:	f7ff fc18 	bl	800846c <DIGITAL_IO_Init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d104      	bne.n	8008c50 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance THROTTLE_POT_CS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&THROTTLE_POT_CS_OUT_D); 
 8008c46:	4881      	ldr	r0, [pc, #516]	; (8008e4c <DAVE_Init+0x330>)
 8008c48:	f7ff fc10 	bl	800846c <DIGITAL_IO_Init>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIGHTS_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIGHTS_PWR_OUT_D); 
 8008c56:	487e      	ldr	r0, [pc, #504]	; (8008e50 <DAVE_Init+0x334>)
 8008c58:	f7ff fc08 	bl	800846c <DIGITAL_IO_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d104      	bne.n	8008c70 <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance INFOTAINMENT_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INFOTAINMENT_PWR_OUT_D); 
 8008c66:	487b      	ldr	r0, [pc, #492]	; (8008e54 <DAVE_Init+0x338>)
 8008c68:	f7ff fc00 	bl	800846c <DIGITAL_IO_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUDIO_AMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUDIO_AMP_OUT_D); 
 8008c76:	4878      	ldr	r0, [pc, #480]	; (8008e58 <DAVE_Init+0x33c>)
 8008c78:	f7ff fbf8 	bl	800846c <DIGITAL_IO_Init>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_PWR_OUT_D); 
 8008c86:	4875      	ldr	r0, [pc, #468]	; (8008e5c <DAVE_Init+0x340>)
 8008c88:	f7ff fbf0 	bl	800846c <DIGITAL_IO_Init>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_LIGHT_OUT_D); 
 8008c96:	4872      	ldr	r0, [pc, #456]	; (8008e60 <DAVE_Init+0x344>)
 8008c98:	f7ff fbe8 	bl	800846c <DIGITAL_IO_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance HORN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HORN_PWR_OUT_D); 
 8008ca6:	486f      	ldr	r0, [pc, #444]	; (8008e64 <DAVE_Init+0x348>)
 8008ca8:	f7ff fbe0 	bl	800846c <DIGITAL_IO_Init>
 8008cac:	4603      	mov	r3, r0
 8008cae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_OUT_D); 
 8008cb6:	486c      	ldr	r0, [pc, #432]	; (8008e68 <DAVE_Init+0x34c>)
 8008cb8:	f7ff fbd8 	bl	800846c <DIGITAL_IO_Init>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance RIGHT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RIGHT_INDICATOR_OUT_D); 
 8008cc6:	4869      	ldr	r0, [pc, #420]	; (8008e6c <DAVE_Init+0x350>)
 8008cc8:	f7ff fbd0 	bl	800846c <DIGITAL_IO_Init>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance HIGH_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HIGH_BEAM_OUT_D); 
 8008cd6:	4866      	ldr	r0, [pc, #408]	; (8008e70 <DAVE_Init+0x354>)
 8008cd8:	f7ff fbc8 	bl	800846c <DIGITAL_IO_Init>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LOW_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LOW_BEAM_OUT_D); 
 8008ce6:	4863      	ldr	r0, [pc, #396]	; (8008e74 <DAVE_Init+0x358>)
 8008ce8:	f7ff fbc0 	bl	800846c <DIGITAL_IO_Init>
 8008cec:	4603      	mov	r3, r0
 8008cee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance REV_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REV_LIGHT_OUT_D); 
 8008cf6:	4860      	ldr	r0, [pc, #384]	; (8008e78 <DAVE_Init+0x35c>)
 8008cf8:	f7ff fbb8 	bl	800846c <DIGITAL_IO_Init>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELEC_HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELEC_HANDBRAKE_IN_D); 
 8008d06:	485d      	ldr	r0, [pc, #372]	; (8008e7c <DAVE_Init+0x360>)
 8008d08:	f7ff fbb0 	bl	800846c <DIGITAL_IO_Init>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_ANALOG1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_ANALOG1_IN_D); 
 8008d16:	485a      	ldr	r0, [pc, #360]	; (8008e80 <DAVE_Init+0x364>)
 8008d18:	f7ff fba8 	bl	800846c <DIGITAL_IO_Init>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d104      	bne.n	8008d30 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance INT_ACCEL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INT_ACCEL_IN_D); 
 8008d26:	4857      	ldr	r0, [pc, #348]	; (8008e84 <DAVE_Init+0x368>)
 8008d28:	f7ff fba0 	bl	800846c <DIGITAL_IO_Init>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <DAVE_Init+0x224>
  {
	 /**  Initialization of DIGITAL_IO APP instance CIGARETTE_LIGHTER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CIGARETTE_LIGHTER_PWR_OUT_D); 
 8008d36:	4854      	ldr	r0, [pc, #336]	; (8008e88 <DAVE_Init+0x36c>)
 8008d38:	f7ff fb98 	bl	800846c <DIGITAL_IO_Init>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <DAVE_Init+0x234>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUZZER_EN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUZZER_EN_D); 
 8008d46:	4851      	ldr	r0, [pc, #324]	; (8008e8c <DAVE_Init+0x370>)
 8008d48:	f7ff fb90 	bl	800846c <DIGITAL_IO_Init>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <DAVE_Init+0x244>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_RELAY_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_RELAY_PWR_OUT_D); 
 8008d56:	484e      	ldr	r0, [pc, #312]	; (8008e90 <DAVE_Init+0x374>)
 8008d58:	f7ff fb88 	bl	800846c <DIGITAL_IO_Init>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <DAVE_Init+0x254>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FAN_PWR_OUT_D); 
 8008d66:	484b      	ldr	r0, [pc, #300]	; (8008e94 <DAVE_Init+0x378>)
 8008d68:	f7ff fb80 	bl	800846c <DIGITAL_IO_Init>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <DAVE_Init+0x264>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_SPEED_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_SPEED_PWM_OUT); 
 8008d76:	4848      	ldr	r0, [pc, #288]	; (8008e98 <DAVE_Init+0x37c>)
 8008d78:	f7ff fb78 	bl	800846c <DIGITAL_IO_Init>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d104      	bne.n	8008d90 <DAVE_Init+0x274>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_RPM_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_RPM_PWM_OUT); 
 8008d86:	4845      	ldr	r0, [pc, #276]	; (8008e9c <DAVE_Init+0x380>)
 8008d88:	f7ff fb70 	bl	800846c <DIGITAL_IO_Init>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <DAVE_Init+0x284>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_WINDOW_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_WINDOW_OUT_D); 
 8008d96:	4842      	ldr	r0, [pc, #264]	; (8008ea0 <DAVE_Init+0x384>)
 8008d98:	f7ff fb68 	bl	800846c <DIGITAL_IO_Init>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <DAVE_Init+0x294>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_STEERING_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_STEERING_OUT_D); 
 8008da6:	483f      	ldr	r0, [pc, #252]	; (8008ea4 <DAVE_Init+0x388>)
 8008da8:	f7ff fb60 	bl	800846c <DIGITAL_IO_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <DAVE_Init+0x2a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LEFT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LEFT_INDICATOR_OUT_D); 
 8008db6:	483c      	ldr	r0, [pc, #240]	; (8008ea8 <DAVE_Init+0x38c>)
 8008db8:	f7ff fb58 	bl	800846c <DIGITAL_IO_Init>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <DAVE_Init+0x2b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC3_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC3_CS_OUT); 
 8008dc6:	4839      	ldr	r0, [pc, #228]	; (8008eac <DAVE_Init+0x390>)
 8008dc8:	f7ff fb50 	bl	800846c <DIGITAL_IO_Init>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <DAVE_Init+0x2c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance INPUTS_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INPUTS_3V3_PWR_EN); 
 8008dd6:	4836      	ldr	r0, [pc, #216]	; (8008eb0 <DAVE_Init+0x394>)
 8008dd8:	f7ff fb48 	bl	800846c <DIGITAL_IO_Init>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <DAVE_Init+0x2d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance COMM_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&COMM_3V3_PWR_EN); 
 8008de6:	4833      	ldr	r0, [pc, #204]	; (8008eb4 <DAVE_Init+0x398>)
 8008de8:	f7ff fb40 	bl	800846c <DIGITAL_IO_Init>
 8008dec:	4603      	mov	r3, r0
 8008dee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d162      	bne.n	8008ebc <DAVE_Init+0x3a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SENSOR_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SENSOR_3V3_PWR_EN); 
 8008df6:	4830      	ldr	r0, [pc, #192]	; (8008eb8 <DAVE_Init+0x39c>)
 8008df8:	f7ff fb38 	bl	800846c <DIGITAL_IO_Init>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	71fb      	strb	r3, [r7, #7]
 8008e00:	e05c      	b.n	8008ebc <DAVE_Init+0x3a0>
 8008e02:	bf00      	nop
 8008e04:	1fff4474 	.word	0x1fff4474
 8008e08:	08013140 	.word	0x08013140
 8008e0c:	08013154 	.word	0x08013154
 8008e10:	08013168 	.word	0x08013168
 8008e14:	0801317c 	.word	0x0801317c
 8008e18:	08013190 	.word	0x08013190
 8008e1c:	080131a4 	.word	0x080131a4
 8008e20:	080131b8 	.word	0x080131b8
 8008e24:	080131cc 	.word	0x080131cc
 8008e28:	080131e0 	.word	0x080131e0
 8008e2c:	080131f4 	.word	0x080131f4
 8008e30:	08013208 	.word	0x08013208
 8008e34:	0801321c 	.word	0x0801321c
 8008e38:	08013230 	.word	0x08013230
 8008e3c:	08013244 	.word	0x08013244
 8008e40:	08013258 	.word	0x08013258
 8008e44:	0801326c 	.word	0x0801326c
 8008e48:	08013280 	.word	0x08013280
 8008e4c:	08013294 	.word	0x08013294
 8008e50:	080132a8 	.word	0x080132a8
 8008e54:	080132bc 	.word	0x080132bc
 8008e58:	080132d0 	.word	0x080132d0
 8008e5c:	080132e4 	.word	0x080132e4
 8008e60:	080132f8 	.word	0x080132f8
 8008e64:	0801330c 	.word	0x0801330c
 8008e68:	08013320 	.word	0x08013320
 8008e6c:	08013334 	.word	0x08013334
 8008e70:	08013348 	.word	0x08013348
 8008e74:	0801335c 	.word	0x0801335c
 8008e78:	08013370 	.word	0x08013370
 8008e7c:	08013384 	.word	0x08013384
 8008e80:	08013398 	.word	0x08013398
 8008e84:	080133ac 	.word	0x080133ac
 8008e88:	080133c0 	.word	0x080133c0
 8008e8c:	080133d4 	.word	0x080133d4
 8008e90:	080133e8 	.word	0x080133e8
 8008e94:	080133fc 	.word	0x080133fc
 8008e98:	08013410 	.word	0x08013410
 8008e9c:	08013424 	.word	0x08013424
 8008ea0:	08013438 	.word	0x08013438
 8008ea4:	0801344c 	.word	0x0801344c
 8008ea8:	08013460 	.word	0x08013460
 8008eac:	08013474 	.word	0x08013474
 8008eb0:	08013488 	.word	0x08013488
 8008eb4:	0801349c 	.word	0x0801349c
 8008eb8:	080134b0 	.word	0x080134b0
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ebc:	79fb      	ldrb	r3, [r7, #7]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d104      	bne.n	8008ecc <DAVE_Init+0x3b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CABIN_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CABIN_LIGHT_OUT_D); 
 8008ec2:	4895      	ldr	r0, [pc, #596]	; (8009118 <DAVE_Init+0x5fc>)
 8008ec4:	f7ff fad2 	bl	800846c <DIGITAL_IO_Init>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d104      	bne.n	8008edc <DAVE_Init+0x3c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC2_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC2_CS_OUT); 
 8008ed2:	4892      	ldr	r0, [pc, #584]	; (800911c <DAVE_Init+0x600>)
 8008ed4:	f7ff faca 	bl	800846c <DIGITAL_IO_Init>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008edc:	79fb      	ldrb	r3, [r7, #7]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d104      	bne.n	8008eec <DAVE_Init+0x3d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC1_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC1_CS_OUT); 
 8008ee2:	488f      	ldr	r0, [pc, #572]	; (8009120 <DAVE_Init+0x604>)
 8008ee4:	f7ff fac2 	bl	800846c <DIGITAL_IO_Init>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008eec:	79fb      	ldrb	r3, [r7, #7]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d104      	bne.n	8008efc <DAVE_Init+0x3e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPEED_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPEED_SENSOR_IN_D); 
 8008ef2:	488c      	ldr	r0, [pc, #560]	; (8009124 <DAVE_Init+0x608>)
 8008ef4:	f7ff faba 	bl	800846c <DIGITAL_IO_Init>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008efc:	79fb      	ldrb	r3, [r7, #7]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d104      	bne.n	8008f0c <DAVE_Init+0x3f0>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_IN_D); 
 8008f02:	4889      	ldr	r0, [pc, #548]	; (8009128 <DAVE_Init+0x60c>)
 8008f04:	f7ff fab2 	bl	800846c <DIGITAL_IO_Init>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f0c:	79fb      	ldrb	r3, [r7, #7]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d104      	bne.n	8008f1c <DAVE_Init+0x400>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_OIL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_OIL_IN_D); 
 8008f12:	4886      	ldr	r0, [pc, #536]	; (800912c <DAVE_Init+0x610>)
 8008f14:	f7ff faaa 	bl	800846c <DIGITAL_IO_Init>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f1c:	79fb      	ldrb	r3, [r7, #7]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d104      	bne.n	8008f2c <DAVE_Init+0x410>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGING_STARTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGING_STARTED_IN_D); 
 8008f22:	4883      	ldr	r0, [pc, #524]	; (8009130 <DAVE_Init+0x614>)
 8008f24:	f7ff faa2 	bl	800846c <DIGITAL_IO_Init>
 8008f28:	4603      	mov	r3, r0
 8008f2a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <DAVE_Init+0x420>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGER_CONNECTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGER_CONNECTED_IN_D); 
 8008f32:	4880      	ldr	r0, [pc, #512]	; (8009134 <DAVE_Init+0x618>)
 8008f34:	f7ff fa9a 	bl	800846c <DIGITAL_IO_Init>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f3c:	79fb      	ldrb	r3, [r7, #7]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <DAVE_Init+0x430>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS2_IN_D); 
 8008f42:	487d      	ldr	r0, [pc, #500]	; (8009138 <DAVE_Init+0x61c>)
 8008f44:	f7ff fa92 	bl	800846c <DIGITAL_IO_Init>
 8008f48:	4603      	mov	r3, r0
 8008f4a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d104      	bne.n	8008f5c <DAVE_Init+0x440>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS1_IN_D); 
 8008f52:	487a      	ldr	r0, [pc, #488]	; (800913c <DAVE_Init+0x620>)
 8008f54:	f7ff fa8a 	bl	800846c <DIGITAL_IO_Init>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f5c:	79fb      	ldrb	r3, [r7, #7]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d104      	bne.n	8008f6c <DAVE_Init+0x450>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACC_PEDAL_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACC_PEDAL_SW_IN_D); 
 8008f62:	4877      	ldr	r0, [pc, #476]	; (8009140 <DAVE_Init+0x624>)
 8008f64:	f7ff fa82 	bl	800846c <DIGITAL_IO_Init>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d104      	bne.n	8008f7c <DAVE_Init+0x460>
  {
	 /**  Initialization of DIGITAL_IO APP instance HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HANDBRAKE_IN_D); 
 8008f72:	4874      	ldr	r0, [pc, #464]	; (8009144 <DAVE_Init+0x628>)
 8008f74:	f7ff fa7a 	bl	800846c <DIGITAL_IO_Init>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f7c:	79fb      	ldrb	r3, [r7, #7]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d104      	bne.n	8008f8c <DAVE_Init+0x470>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_SW_IN_D); 
 8008f82:	4871      	ldr	r0, [pc, #452]	; (8009148 <DAVE_Init+0x62c>)
 8008f84:	f7ff fa72 	bl	800846c <DIGITAL_IO_Init>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f8c:	79fb      	ldrb	r3, [r7, #7]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d104      	bne.n	8008f9c <DAVE_Init+0x480>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_PWR_OUT_D); 
 8008f92:	486e      	ldr	r0, [pc, #440]	; (800914c <DAVE_Init+0x630>)
 8008f94:	f7ff fa6a 	bl	800846c <DIGITAL_IO_Init>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f9c:	79fb      	ldrb	r3, [r7, #7]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d104      	bne.n	8008fac <DAVE_Init+0x490>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW1_IN_D); 
 8008fa2:	486b      	ldr	r0, [pc, #428]	; (8009150 <DAVE_Init+0x634>)
 8008fa4:	f7ff fa62 	bl	800846c <DIGITAL_IO_Init>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fac:	79fb      	ldrb	r3, [r7, #7]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d104      	bne.n	8008fbc <DAVE_Init+0x4a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW2_IN_D); 
 8008fb2:	4868      	ldr	r0, [pc, #416]	; (8009154 <DAVE_Init+0x638>)
 8008fb4:	f7ff fa5a 	bl	800846c <DIGITAL_IO_Init>
 8008fb8:	4603      	mov	r3, r0
 8008fba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d104      	bne.n	8008fcc <DAVE_Init+0x4b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW3_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW3_IN_D); 
 8008fc2:	4865      	ldr	r0, [pc, #404]	; (8009158 <DAVE_Init+0x63c>)
 8008fc4:	f7ff fa52 	bl	800846c <DIGITAL_IO_Init>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fcc:	79fb      	ldrb	r3, [r7, #7]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d104      	bne.n	8008fdc <DAVE_Init+0x4c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW4_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW4_IN_D); 
 8008fd2:	4862      	ldr	r0, [pc, #392]	; (800915c <DAVE_Init+0x640>)
 8008fd4:	f7ff fa4a 	bl	800846c <DIGITAL_IO_Init>
 8008fd8:	4603      	mov	r3, r0
 8008fda:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <DAVE_Init+0x4d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8008fe2:	485f      	ldr	r0, [pc, #380]	; (8009160 <DAVE_Init+0x644>)
 8008fe4:	f7ff fa42 	bl	800846c <DIGITAL_IO_Init>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d104      	bne.n	8008ffc <DAVE_Init+0x4e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 8008ff2:	485c      	ldr	r0, [pc, #368]	; (8009164 <DAVE_Init+0x648>)
 8008ff4:	f7ff fa3a 	bl	800846c <DIGITAL_IO_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <DAVE_Init+0x4f0>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8009002:	4859      	ldr	r0, [pc, #356]	; (8009168 <DAVE_Init+0x64c>)
 8009004:	f7fe fd26 	bl	8007a54 <I2C_MASTER_Init>
 8009008:	4603      	mov	r3, r0
 800900a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <DAVE_Init+0x500>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_1 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_1); 
 8009012:	4856      	ldr	r0, [pc, #344]	; (800916c <DAVE_Init+0x650>)
 8009014:	f7fe fd1e 	bl	8007a54 <I2C_MASTER_Init>
 8009018:	4603      	mov	r3, r0
 800901a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <DAVE_Init+0x510>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8009022:	4853      	ldr	r0, [pc, #332]	; (8009170 <DAVE_Init+0x654>)
 8009024:	f7ff fcd6 	bl	80089d4 <CAN_NODE_Init>
 8009028:	4603      	mov	r3, r0
 800902a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <DAVE_Init+0x520>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1); 
 8009032:	4850      	ldr	r0, [pc, #320]	; (8009174 <DAVE_Init+0x658>)
 8009034:	f7ff fcce 	bl	80089d4 <CAN_NODE_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <DAVE_Init+0x530>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8009042:	484d      	ldr	r0, [pc, #308]	; (8009178 <DAVE_Init+0x65c>)
 8009044:	f7fc ff9a 	bl	8005f7c <TIMER_Init>
 8009048:	4603      	mov	r3, r0
 800904a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <DAVE_Init+0x540>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
 8009052:	484a      	ldr	r0, [pc, #296]	; (800917c <DAVE_Init+0x660>)
 8009054:	f7fc fcfc 	bl	8005a50 <WATCHDOG_Init>
 8009058:	4603      	mov	r3, r0
 800905a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <DAVE_Init+0x550>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 8009062:	4847      	ldr	r0, [pc, #284]	; (8009180 <DAVE_Init+0x664>)
 8009064:	f7fc ff8a 	bl	8005f7c <TIMER_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <DAVE_Init+0x560>
  {
	 /**  Initialization of TIMER APP instance TIMER_2 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_2); 
 8009072:	4844      	ldr	r0, [pc, #272]	; (8009184 <DAVE_Init+0x668>)
 8009074:	f7fc ff82 	bl	8005f7c <TIMER_Init>
 8009078:	4603      	mov	r3, r0
 800907a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <DAVE_Init+0x570>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8009082:	4841      	ldr	r0, [pc, #260]	; (8009188 <DAVE_Init+0x66c>)
 8009084:	f7fe fbd0 	bl	8007828 <INTERRUPT_Init>
 8009088:	4603      	mov	r3, r0
 800908a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <DAVE_Init+0x580>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8009092:	483e      	ldr	r0, [pc, #248]	; (800918c <DAVE_Init+0x670>)
 8009094:	f7fc fd46 	bl	8005b24 <UART_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <DAVE_Init+0x590>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_2); 
 80090a2:	483b      	ldr	r0, [pc, #236]	; (8009190 <DAVE_Init+0x674>)
 80090a4:	f7ff fc96 	bl	80089d4 <CAN_NODE_Init>
 80090a8:	4603      	mov	r3, r0
 80090aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <DAVE_Init+0x5a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CTS); 
 80090b2:	4838      	ldr	r0, [pc, #224]	; (8009194 <DAVE_Init+0x678>)
 80090b4:	f7ff f9da 	bl	800846c <DIGITAL_IO_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <DAVE_Init+0x5b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance RTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RTS); 
 80090c2:	4835      	ldr	r0, [pc, #212]	; (8009198 <DAVE_Init+0x67c>)
 80090c4:	f7ff f9d2 	bl	800846c <DIGITAL_IO_Init>
 80090c8:	4603      	mov	r3, r0
 80090ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <DAVE_Init+0x5c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PWRKEY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PWRKEY); 
 80090d2:	4832      	ldr	r0, [pc, #200]	; (800919c <DAVE_Init+0x680>)
 80090d4:	f7ff f9ca 	bl	800846c <DIGITAL_IO_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <DAVE_Init+0x5d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODULE_4G_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODULE_4G_EN_OUT_D); 
 80090e2:	482f      	ldr	r0, [pc, #188]	; (80091a0 <DAVE_Init+0x684>)
 80090e4:	f7ff f9c2 	bl	800846c <DIGITAL_IO_Init>
 80090e8:	4603      	mov	r3, r0
 80090ea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <DAVE_Init+0x5e0>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80090f2:	482c      	ldr	r0, [pc, #176]	; (80091a4 <DAVE_Init+0x688>)
 80090f4:	f7fd fc2a 	bl	800694c <SYSTIMER_Init>
 80090f8:	4603      	mov	r3, r0
 80090fa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <DAVE_Init+0x5f0>
  {
	 /**  Initialization of FATFS APP instance FATFS_0 */
	 init_status = (DAVE_STATUS_t)FATFS_Init(&FATFS_0); 
 8009102:	4829      	ldr	r0, [pc, #164]	; (80091a8 <DAVE_Init+0x68c>)
 8009104:	f7ff f978 	bl	80083f8 <FATFS_Init>
 8009108:	4603      	mov	r3, r0
 800910a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800910c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800910e:	4618      	mov	r0, r3
 8009110:	3708      	adds	r7, #8
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	080134c4 	.word	0x080134c4
 800911c:	080134d8 	.word	0x080134d8
 8009120:	080134ec 	.word	0x080134ec
 8009124:	08013500 	.word	0x08013500
 8009128:	08013514 	.word	0x08013514
 800912c:	08013528 	.word	0x08013528
 8009130:	0801353c 	.word	0x0801353c
 8009134:	08013550 	.word	0x08013550
 8009138:	08013564 	.word	0x08013564
 800913c:	08013578 	.word	0x08013578
 8009140:	0801358c 	.word	0x0801358c
 8009144:	080135a0 	.word	0x080135a0
 8009148:	080135b4 	.word	0x080135b4
 800914c:	080135c8 	.word	0x080135c8
 8009150:	080135dc 	.word	0x080135dc
 8009154:	080135f0 	.word	0x080135f0
 8009158:	08013604 	.word	0x08013604
 800915c:	08013618 	.word	0x08013618
 8009160:	0801362c 	.word	0x0801362c
 8009164:	08013640 	.word	0x08013640
 8009168:	1ffe8a5c 	.word	0x1ffe8a5c
 800916c:	1ffe8a68 	.word	0x1ffe8a68
 8009170:	08013870 	.word	0x08013870
 8009174:	08013a58 	.word	0x08013a58
 8009178:	1ffe8850 	.word	0x1ffe8850
 800917c:	1ffe883c 	.word	0x1ffe883c
 8009180:	1ffe889c 	.word	0x1ffe889c
 8009184:	1ffe88e0 	.word	0x1ffe88e0
 8009188:	080130a0 	.word	0x080130a0
 800918c:	1ffe8844 	.word	0x1ffe8844
 8009190:	08013b74 	.word	0x08013b74
 8009194:	08013654 	.word	0x08013654
 8009198:	08013668 	.word	0x08013668
 800919c:	0801367c 	.word	0x0801367c
 80091a0:	08013690 	.word	0x08013690
 80091a4:	1fff4404 	.word	0x1fff4404
 80091a8:	1ffe8ab0 	.word	0x1ffe8ab0

080091ac <OBDII_CAN_Tx>:
		{0x5E4, {0x00}},
		{0x5E5, {0x00}}
};

void OBDII_CAN_Tx(void)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b084      	sub	sp, #16
 80091b0:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_2;
 80091b2:	4b49      	ldr	r3, [pc, #292]	; (80092d8 <OBDII_CAN_Tx+0x12c>)
 80091b4:	60bb      	str	r3, [r7, #8]
	uint8_t *array_data;

/*******************************************bms 0x01******************************************/
	OBDII_CAN[can_0x01].CAN_Data[0] = BMS_SOC; // soc
 80091b6:	4b49      	ldr	r3, [pc, #292]	; (80092dc <OBDII_CAN_Tx+0x130>)
 80091b8:	781b      	ldrb	r3, [r3, #0]
 80091ba:	b2da      	uxtb	r2, r3
 80091bc:	4b48      	ldr	r3, [pc, #288]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091be:	711a      	strb	r2, [r3, #4]

	OBDII_CAN[can_0x01].CAN_Data[1] = Bms_maxTemp; // temp;
 80091c0:	4b48      	ldr	r3, [pc, #288]	; (80092e4 <OBDII_CAN_Tx+0x138>)
 80091c2:	881b      	ldrh	r3, [r3, #0]
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	4b46      	ldr	r3, [pc, #280]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091c8:	715a      	strb	r2, [r3, #5]

	//OBDII_CAN[can_0x01].CAN_Data[2];//packcurrent H;
	//OBDII_CAN[can_0x01].CAN_Data[3];//packcurrent L;

	OBDII_CAN[can_0x01].CAN_Data[4] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7]; //packvoltage H
 80091ca:	4b47      	ldr	r3, [pc, #284]	; (80092e8 <OBDII_CAN_Tx+0x13c>)
 80091cc:	7ddb      	ldrb	r3, [r3, #23]
 80091ce:	b2da      	uxtb	r2, r3
 80091d0:	4b43      	ldr	r3, [pc, #268]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091d2:	721a      	strb	r2, [r3, #8]
	OBDII_CAN[can_0x01].CAN_Data[5] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]; //packvoltage L
 80091d4:	4b44      	ldr	r3, [pc, #272]	; (80092e8 <OBDII_CAN_Tx+0x13c>)
 80091d6:	7d9b      	ldrb	r3, [r3, #22]
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	4b41      	ldr	r3, [pc, #260]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091dc:	725a      	strb	r2, [r3, #9]

/*******************************************eps 0x02******************************************/


/*******************************************hvac 0x03******************************************/
	 OBDII_CAN[can_0x03].CAN_Data[0] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0]; //TempdegreeC
 80091de:	4b43      	ldr	r3, [pc, #268]	; (80092ec <OBDII_CAN_Tx+0x140>)
 80091e0:	7c1b      	ldrb	r3, [r3, #16]
 80091e2:	b2da      	uxtb	r2, r3
 80091e4:	4b3e      	ldr	r3, [pc, #248]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091e6:	771a      	strb	r2, [r3, #28]
	 OBDII_CAN[can_0x03].CAN_Data[1] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1]; //Pressure
 80091e8:	4b40      	ldr	r3, [pc, #256]	; (80092ec <OBDII_CAN_Tx+0x140>)
 80091ea:	7c5b      	ldrb	r3, [r3, #17]
 80091ec:	b2da      	uxtb	r2, r3
 80091ee:	4b3c      	ldr	r3, [pc, #240]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091f0:	775a      	strb	r2, [r3, #29]

	 OBDII_CAN[can_0x03].CAN_Data[2] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2]; //1: AC switch on,  0: AC switch off,
 80091f2:	4b3e      	ldr	r3, [pc, #248]	; (80092ec <OBDII_CAN_Tx+0x140>)
 80091f4:	7c9b      	ldrb	r3, [r3, #18]
 80091f6:	b2da      	uxtb	r2, r3
 80091f8:	4b39      	ldr	r3, [pc, #228]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 80091fa:	779a      	strb	r2, [r3, #30]

	 OBDII_CAN[can_0x03].CAN_Data[3] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1]; //AC rpm H
 80091fc:	4b3b      	ldr	r3, [pc, #236]	; (80092ec <OBDII_CAN_Tx+0x140>)
 80091fe:	795b      	ldrb	r3, [r3, #5]
 8009200:	b2da      	uxtb	r2, r3
 8009202:	4b37      	ldr	r3, [pc, #220]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009204:	77da      	strb	r2, [r3, #31]
	 OBDII_CAN[can_0x03].CAN_Data[4] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[0]; //AC rpm L
 8009206:	4b39      	ldr	r3, [pc, #228]	; (80092ec <OBDII_CAN_Tx+0x140>)
 8009208:	791b      	ldrb	r3, [r3, #4]
 800920a:	b2da      	uxtb	r2, r3
 800920c:	4b34      	ldr	r3, [pc, #208]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800920e:	f883 2020 	strb.w	r2, [r3, #32]

	 OBDII_CAN[can_0x03].CAN_Data[5] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3]; //AC ON -> compressor enable bit
 8009212:	4b36      	ldr	r3, [pc, #216]	; (80092ec <OBDII_CAN_Tx+0x140>)
 8009214:	79db      	ldrb	r3, [r3, #7]
 8009216:	b2da      	uxtb	r2, r3
 8009218:	4b31      	ldr	r3, [pc, #196]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800921a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	 //OBDII_CAN[can_0x04].CAN_Data[3]; //throttle percentage L

	//OBDII_CAN[can_0x04].CAN_Data[4]; //speed H
	 //OBDII_CAN[can_0x04].CAN_Data[5]; //speed L

	 OBDII_CAN[can_0x04].CAN_Data[6] = Mcu_Temp;
 800921e:	4b34      	ldr	r3, [pc, #208]	; (80092f0 <OBDII_CAN_Tx+0x144>)
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	4b2e      	ldr	r3, [pc, #184]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009226:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 OBDII_CAN[can_0x04].CAN_Data[7] = Motor_Temp;
 800922a:	4b32      	ldr	r3, [pc, #200]	; (80092f4 <OBDII_CAN_Tx+0x148>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	b2da      	uxtb	r2, r3
 8009230:	4b2b      	ldr	r3, [pc, #172]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009232:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

/*******************************************madhura 0x05******************************************/

	 OBDII_CAN[can_0x05].CAN_Data[0] = obc_madhura[can_0x18FF50E5].CAN_Data[0]; // voltage H
 8009236:	4b30      	ldr	r3, [pc, #192]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	b2da      	uxtb	r2, r3
 800923c:	4b28      	ldr	r3, [pc, #160]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800923e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 OBDII_CAN[can_0x05].CAN_Data[1] = obc_madhura[can_0x18FF50E5].CAN_Data[1]; // voltage L
 8009242:	4b2d      	ldr	r3, [pc, #180]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 8009244:	7c5b      	ldrb	r3, [r3, #17]
 8009246:	b2da      	uxtb	r2, r3
 8009248:	4b25      	ldr	r3, [pc, #148]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800924a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	 OBDII_CAN[can_0x05].CAN_Data[2] = obc_madhura[can_0x18FF50E5].CAN_Data[2]; // current H
 800924e:	4b2a      	ldr	r3, [pc, #168]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 8009250:	7c9b      	ldrb	r3, [r3, #18]
 8009252:	b2da      	uxtb	r2, r3
 8009254:	4b22      	ldr	r3, [pc, #136]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009256:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 OBDII_CAN[can_0x05].CAN_Data[3] = obc_madhura[can_0x18FF50E5].CAN_Data[3]; // current L
 800925a:	4b27      	ldr	r3, [pc, #156]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 800925c:	7cdb      	ldrb	r3, [r3, #19]
 800925e:	b2da      	uxtb	r2, r3
 8009260:	4b1f      	ldr	r3, [pc, #124]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009262:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
 8009266:	4b24      	ldr	r3, [pc, #144]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 8009268:	7d1b      	ldrb	r3, [r3, #20]
 800926a:	b2da      	uxtb	r2, r3
 800926c:	4b1c      	ldr	r3, [pc, #112]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800926e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode
 8009272:	4b21      	ldr	r3, [pc, #132]	; (80092f8 <OBDII_CAN_Tx+0x14c>)
 8009274:	7d5b      	ldrb	r3, [r3, #21]
 8009276:	b2da      	uxtb	r2, r3
 8009278:	4b19      	ldr	r3, [pc, #100]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 800927a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39


	 for(int i = 0; i < can_OBD_max; i++)
 800927e:	2300      	movs	r3, #0
 8009280:	60fb      	str	r3, [r7, #12]
 8009282:	e023      	b.n	80092cc <OBDII_CAN_Tx+0x120>
	 {
		 array_data = &OBDII_CAN[i].CAN_Data[0];
 8009284:	68fa      	ldr	r2, [r7, #12]
 8009286:	4613      	mov	r3, r2
 8009288:	005b      	lsls	r3, r3, #1
 800928a:	4413      	add	r3, r2
 800928c:	009b      	lsls	r3, r3, #2
 800928e:	4a14      	ldr	r2, [pc, #80]	; (80092e0 <OBDII_CAN_Tx+0x134>)
 8009290:	4413      	add	r3, r2
 8009292:	3304      	adds	r3, #4
 8009294:	607b      	str	r3, [r7, #4]

		 //  update data for the MO to transmit
		 status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[i],array_data);
 8009296:	68ba      	ldr	r2, [r7, #8]
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	3302      	adds	r3, #2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	4413      	add	r3, r2
 80092a0:	685b      	ldr	r3, [r3, #4]
 80092a2:	4618      	mov	r0, r3
 80092a4:	6879      	ldr	r1, [r7, #4]
 80092a6:	f7ff fb65 	bl	8008974 <CAN_NODE_MO_UpdateData>
 80092aa:	4603      	mov	r3, r0
 80092ac:	70fb      	strb	r3, [r7, #3]

		 if (status == CAN_NODE_STATUS_SUCCESS)
 80092ae:	78fb      	ldrb	r3, [r7, #3]
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d108      	bne.n	80092c6 <OBDII_CAN_Tx+0x11a>
		 {
		    // message object data updated.

		    // transmit the data
		    CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[i]);
 80092b4:	68ba      	ldr	r2, [r7, #8]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3302      	adds	r3, #2
 80092ba:	009b      	lsls	r3, r3, #2
 80092bc:	4413      	add	r3, r2
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fb33 	bl	800892c <CAN_NODE_MO_Transmit>

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode


	 for(int i = 0; i < can_OBD_max; i++)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	3301      	adds	r3, #1
 80092ca:	60fb      	str	r3, [r7, #12]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	ddd8      	ble.n	8009284 <OBDII_CAN_Tx+0xd8>
		 else
		 {
		     // message object failed to update.
		 }
	 }
}
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}
 80092d8:	08013b74 	.word	0x08013b74
 80092dc:	1fff47fc 	.word	0x1fff47fc
 80092e0:	1ffe9218 	.word	0x1ffe9218
 80092e4:	1fff47f8 	.word	0x1fff47f8
 80092e8:	1ffe9254 	.word	0x1ffe9254
 80092ec:	1ffe93a4 	.word	0x1ffe93a4
 80092f0:	1fff48b4 	.word	0x1fff48b4
 80092f4:	1fff480c 	.word	0x1fff480c
 80092f8:	1ffe94c4 	.word	0x1ffe94c4

080092fc <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	683a      	ldr	r2, [r7, #0]
 800930c:	61da      	str	r2, [r3, #28]
}
 800930e:	370c      	adds	r7, #12
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <CAN_Rx_0x1808A7F3>:
		{0X180BA7F3, {0x00}}
};


void CAN_Rx_0x1808A7F3(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800931e:	4b1c      	ldr	r3, [pc, #112]	; (8009390 <CAN_Rx_0x1808A7F3+0x78>)
 8009320:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009322:	230c      	movs	r3, #12
 8009324:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	3302      	adds	r3, #2
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	4413      	add	r3, r2
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009336:	7afb      	ldrb	r3, [r7, #11]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	3302      	adds	r3, #2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	4413      	add	r3, r2
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	4618      	mov	r0, r3
 8009344:	f7ff fb36 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009348:	4603      	mov	r3, r0
 800934a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	f003 0301 	and.w	r3, r3, #1
 8009352:	2b00      	cmp	r3, #0
 8009354:	d016      	beq.n	8009384 <CAN_Rx_0x1808A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	2101      	movs	r1, #1
 800935a:	f7ff ffcf 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	3302      	adds	r3, #2
 8009364:	009b      	lsls	r3, r3, #2
 8009366:	4413      	add	r3, r2
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff faf0 	bl	8008950 <CAN_NODE_MO_Receive>
 8009370:	4603      	mov	r3, r0
 8009372:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009374:	78bb      	ldrb	r3, [r7, #2]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d102      	bne.n	8009380 <CAN_Rx_0x1808A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800937a:	2301      	movs	r3, #1
 800937c:	707b      	strb	r3, [r7, #1]
 800937e:	e001      	b.n	8009384 <CAN_Rx_0x1808A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009380:	2300      	movs	r3, #0
 8009382:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1808A7F3();
 8009384:	f000 fbac 	bl	8009ae0 <process_Rx_CAN_0X1808A7F3>
}
 8009388:	3710      	adds	r7, #16
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	08013870 	.word	0x08013870

08009394 <CAN_Rx_0x180AA7F3>:


void CAN_Rx_0x180AA7F3(void)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800939a:	4b1c      	ldr	r3, [pc, #112]	; (800940c <CAN_Rx_0x180AA7F3+0x78>)
 800939c:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800939e:	230d      	movs	r3, #13
 80093a0:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	3302      	adds	r3, #2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80093b2:	7afb      	ldrb	r3, [r7, #11]
 80093b4:	68fa      	ldr	r2, [r7, #12]
 80093b6:	3302      	adds	r3, #2
 80093b8:	009b      	lsls	r3, r3, #2
 80093ba:	4413      	add	r3, r2
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff faf8 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 80093c4:	4603      	mov	r3, r0
 80093c6:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80093c8:	78fb      	ldrb	r3, [r7, #3]
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d016      	beq.n	8009400 <CAN_Rx_0x180AA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80093d2:	6878      	ldr	r0, [r7, #4]
 80093d4:	2101      	movs	r1, #1
 80093d6:	f7ff ff91 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80093da:	7afb      	ldrb	r3, [r7, #11]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	3302      	adds	r3, #2
 80093e0:	009b      	lsls	r3, r3, #2
 80093e2:	4413      	add	r3, r2
 80093e4:	685b      	ldr	r3, [r3, #4]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff fab2 	bl	8008950 <CAN_NODE_MO_Receive>
 80093ec:	4603      	mov	r3, r0
 80093ee:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80093f0:	78bb      	ldrb	r3, [r7, #2]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d102      	bne.n	80093fc <CAN_Rx_0x180AA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80093f6:	2301      	movs	r3, #1
 80093f8:	707b      	strb	r3, [r7, #1]
 80093fa:	e001      	b.n	8009400 <CAN_Rx_0x180AA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80093fc:	2300      	movs	r3, #0
 80093fe:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180AA7F3();
 8009400:	f000 fb88 	bl	8009b14 <process_Rx_CAN_0X180AA7F3>
}
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	08013870 	.word	0x08013870

08009410 <CAN_Rx_0x180BA7F3>:


void CAN_Rx_0x180BA7F3(void)
{
 8009410:	b580      	push	{r7, lr}
 8009412:	b084      	sub	sp, #16
 8009414:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009416:	4b1c      	ldr	r3, [pc, #112]	; (8009488 <CAN_Rx_0x180BA7F3+0x78>)
 8009418:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800941a:	230e      	movs	r3, #14
 800941c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800941e:	7afb      	ldrb	r3, [r7, #11]
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	3302      	adds	r3, #2
 8009424:	009b      	lsls	r3, r3, #2
 8009426:	4413      	add	r3, r2
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800942e:	7afb      	ldrb	r3, [r7, #11]
 8009430:	68fa      	ldr	r2, [r7, #12]
 8009432:	3302      	adds	r3, #2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	4618      	mov	r0, r3
 800943c:	f7ff faba 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009440:	4603      	mov	r3, r0
 8009442:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	f003 0301 	and.w	r3, r3, #1
 800944a:	2b00      	cmp	r3, #0
 800944c:	d016      	beq.n	800947c <CAN_Rx_0x180BA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800944e:	6878      	ldr	r0, [r7, #4]
 8009450:	2101      	movs	r1, #1
 8009452:	f7ff ff53 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	3302      	adds	r3, #2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fa74 	bl	8008950 <CAN_NODE_MO_Receive>
 8009468:	4603      	mov	r3, r0
 800946a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800946c:	78bb      	ldrb	r3, [r7, #2]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d102      	bne.n	8009478 <CAN_Rx_0x180BA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009472:	2301      	movs	r3, #1
 8009474:	707b      	strb	r3, [r7, #1]
 8009476:	e001      	b.n	800947c <CAN_Rx_0x180BA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009478:	2300      	movs	r3, #0
 800947a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180BA7F3();
 800947c:	f000 fb9a 	bl	8009bb4 <process_Rx_CAN_0X180BA7F3>
}
 8009480:	3710      	adds	r7, #16
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	08013870 	.word	0x08013870

0800948c <CAN_Rx_0x180EA7F3>:


void CAN_Rx_0x180EA7F3(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	b084      	sub	sp, #16
 8009490:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009492:	4b1c      	ldr	r3, [pc, #112]	; (8009504 <CAN_Rx_0x180EA7F3+0x78>)
 8009494:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009496:	2314      	movs	r3, #20
 8009498:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800949a:	7afb      	ldrb	r3, [r7, #11]
 800949c:	68fa      	ldr	r2, [r7, #12]
 800949e:	3302      	adds	r3, #2
 80094a0:	009b      	lsls	r3, r3, #2
 80094a2:	4413      	add	r3, r2
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80094aa:	7afb      	ldrb	r3, [r7, #11]
 80094ac:	68fa      	ldr	r2, [r7, #12]
 80094ae:	3302      	adds	r3, #2
 80094b0:	009b      	lsls	r3, r3, #2
 80094b2:	4413      	add	r3, r2
 80094b4:	685b      	ldr	r3, [r3, #4]
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7ff fa7c 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 80094bc:	4603      	mov	r3, r0
 80094be:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80094c0:	78fb      	ldrb	r3, [r7, #3]
 80094c2:	f003 0301 	and.w	r3, r3, #1
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d016      	beq.n	80094f8 <CAN_Rx_0x180EA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80094ca:	6878      	ldr	r0, [r7, #4]
 80094cc:	2101      	movs	r1, #1
 80094ce:	f7ff ff15 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	3302      	adds	r3, #2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff fa36 	bl	8008950 <CAN_NODE_MO_Receive>
 80094e4:	4603      	mov	r3, r0
 80094e6:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80094e8:	78bb      	ldrb	r3, [r7, #2]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <CAN_Rx_0x180EA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80094ee:	2301      	movs	r3, #1
 80094f0:	707b      	strb	r3, [r7, #1]
 80094f2:	e001      	b.n	80094f8 <CAN_Rx_0x180EA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80094f4:	2300      	movs	r3, #0
 80094f6:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180EA7F3();
 80094f8:	f000 f968 	bl	80097cc <process_Rx_CAN_0X180EA7F3>
}
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}
 8009502:	bf00      	nop
 8009504:	08013870 	.word	0x08013870

08009508 <CAN_Rx_0x180FA7F3>:

void CAN_Rx_0x180FA7F3(void)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800950e:	4b1c      	ldr	r3, [pc, #112]	; (8009580 <CAN_Rx_0x180FA7F3+0x78>)
 8009510:	60fb      	str	r3, [r7, #12]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009512:	2315      	movs	r3, #21
 8009514:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009516:	7afb      	ldrb	r3, [r7, #11]
 8009518:	68fa      	ldr	r2, [r7, #12]
 800951a:	3302      	adds	r3, #2
 800951c:	009b      	lsls	r3, r3, #2
 800951e:	4413      	add	r3, r2
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009526:	7afb      	ldrb	r3, [r7, #11]
 8009528:	68fa      	ldr	r2, [r7, #12]
 800952a:	3302      	adds	r3, #2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	685b      	ldr	r3, [r3, #4]
 8009532:	4618      	mov	r0, r3
 8009534:	f7ff fa3e 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009538:	4603      	mov	r3, r0
 800953a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800953c:	78fb      	ldrb	r3, [r7, #3]
 800953e:	f003 0301 	and.w	r3, r3, #1
 8009542:	2b00      	cmp	r3, #0
 8009544:	d016      	beq.n	8009574 <CAN_Rx_0x180FA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	2101      	movs	r1, #1
 800954a:	f7ff fed7 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	3302      	adds	r3, #2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff f9f8 	bl	8008950 <CAN_NODE_MO_Receive>
 8009560:	4603      	mov	r3, r0
 8009562:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009564:	78bb      	ldrb	r3, [r7, #2]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d102      	bne.n	8009570 <CAN_Rx_0x180FA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800956a:	2301      	movs	r3, #1
 800956c:	707b      	strb	r3, [r7, #1]
 800956e:	e001      	b.n	8009574 <CAN_Rx_0x180FA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180FA7F3();
 8009574:	f000 fa2e 	bl	80099d4 <process_Rx_CAN_0X180FA7F3>
}
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
 800957e:	bf00      	nop
 8009580:	08013870 	.word	0x08013870

08009584 <CAN_Rx_0x1810A7F3>:

void CAN_Rx_0x1810A7F3(void)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800958a:	4b1c      	ldr	r3, [pc, #112]	; (80095fc <CAN_Rx_0x1810A7F3+0x78>)
 800958c:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800958e:	2316      	movs	r3, #22
 8009590:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	68fa      	ldr	r2, [r7, #12]
 8009596:	3302      	adds	r3, #2
 8009598:	009b      	lsls	r3, r3, #2
 800959a:	4413      	add	r3, r2
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80095a2:	7afb      	ldrb	r3, [r7, #11]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	3302      	adds	r3, #2
 80095a8:	009b      	lsls	r3, r3, #2
 80095aa:	4413      	add	r3, r2
 80095ac:	685b      	ldr	r3, [r3, #4]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f7ff fa00 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 80095b4:	4603      	mov	r3, r0
 80095b6:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80095b8:	78fb      	ldrb	r3, [r7, #3]
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d016      	beq.n	80095f0 <CAN_Rx_0x1810A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80095c2:	6878      	ldr	r0, [r7, #4]
 80095c4:	2101      	movs	r1, #1
 80095c6:	f7ff fe99 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	3302      	adds	r3, #2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff f9ba 	bl	8008950 <CAN_NODE_MO_Receive>
 80095dc:	4603      	mov	r3, r0
 80095de:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80095e0:	78bb      	ldrb	r3, [r7, #2]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d102      	bne.n	80095ec <CAN_Rx_0x1810A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80095e6:	2301      	movs	r3, #1
 80095e8:	707b      	strb	r3, [r7, #1]
 80095ea:	e001      	b.n	80095f0 <CAN_Rx_0x1810A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1810A7F3();
 80095f0:	f000 f8c0 	bl	8009774 <process_Rx_CAN_0X1810A7F3>
}
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	08013870 	.word	0x08013870

08009600 <CAN_Rx_0x1814A7F3>:
	}
	process_Rx_CAN_0X1813A7F3();
}

void CAN_Rx_0x1814A7F3(void)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <CAN_Rx_0x1814A7F3+0x78>)
 8009608:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800960a:	2314      	movs	r3, #20
 800960c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800960e:	7afb      	ldrb	r3, [r7, #11]
 8009610:	68fa      	ldr	r2, [r7, #12]
 8009612:	3302      	adds	r3, #2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	685b      	ldr	r3, [r3, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800961e:	7afb      	ldrb	r3, [r7, #11]
 8009620:	68fa      	ldr	r2, [r7, #12]
 8009622:	3302      	adds	r3, #2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	4413      	add	r3, r2
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	4618      	mov	r0, r3
 800962c:	f7ff f9c2 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009630:	4603      	mov	r3, r0
 8009632:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	f003 0301 	and.w	r3, r3, #1
 800963a:	2b00      	cmp	r3, #0
 800963c:	d016      	beq.n	800966c <CAN_Rx_0x1814A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	2101      	movs	r1, #1
 8009642:	f7ff fe5b 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	3302      	adds	r3, #2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff f97c 	bl	8008950 <CAN_NODE_MO_Receive>
 8009658:	4603      	mov	r3, r0
 800965a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800965c:	78bb      	ldrb	r3, [r7, #2]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <CAN_Rx_0x1814A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009662:	2301      	movs	r3, #1
 8009664:	707b      	strb	r3, [r7, #1]
 8009666:	e001      	b.n	800966c <CAN_Rx_0x1814A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009668:	2300      	movs	r3, #0
 800966a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1814A7F3();
 800966c:	f000 fa04 	bl	8009a78 <process_Rx_CAN_0X1814A7F3>
}
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	08013870 	.word	0x08013870

0800967c <CAN_Rx_0x1815A7F3>:

void CAN_Rx_0x1815A7F3(void)
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b084      	sub	sp, #16
 8009680:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009682:	4b1c      	ldr	r3, [pc, #112]	; (80096f4 <CAN_Rx_0x1815A7F3+0x78>)
 8009684:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009686:	2314      	movs	r3, #20
 8009688:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800968a:	7afb      	ldrb	r3, [r7, #11]
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	3302      	adds	r3, #2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	4413      	add	r3, r2
 8009694:	685b      	ldr	r3, [r3, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800969a:	7afb      	ldrb	r3, [r7, #11]
 800969c:	68fa      	ldr	r2, [r7, #12]
 800969e:	3302      	adds	r3, #2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4413      	add	r3, r2
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	4618      	mov	r0, r3
 80096a8:	f7ff f984 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 80096ac:	4603      	mov	r3, r0
 80096ae:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	f003 0301 	and.w	r3, r3, #1
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d016      	beq.n	80096e8 <CAN_Rx_0x1815A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	2101      	movs	r1, #1
 80096be:	f7ff fe1d 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80096c2:	7afb      	ldrb	r3, [r7, #11]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	3302      	adds	r3, #2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff f93e 	bl	8008950 <CAN_NODE_MO_Receive>
 80096d4:	4603      	mov	r3, r0
 80096d6:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80096d8:	78bb      	ldrb	r3, [r7, #2]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <CAN_Rx_0x1815A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80096de:	2301      	movs	r3, #1
 80096e0:	707b      	strb	r3, [r7, #1]
 80096e2:	e001      	b.n	80096e8 <CAN_Rx_0x1815A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80096e4:	2300      	movs	r3, #0
 80096e6:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1815A7F3();
 80096e8:	f000 f9e0 	bl	8009aac <process_Rx_CAN_0X1815A7F3>
}
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
 80096f2:	bf00      	nop
 80096f4:	08013870 	.word	0x08013870

080096f8 <CAN_Rx_0x180CA7F3>:


void CAN_Rx_0x180CA7F3(void)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80096fe:	4b1c      	ldr	r3, [pc, #112]	; (8009770 <CAN_Rx_0x180CA7F3+0x78>)
 8009700:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009702:	2318      	movs	r3, #24
 8009704:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009706:	7afb      	ldrb	r3, [r7, #11]
 8009708:	68fa      	ldr	r2, [r7, #12]
 800970a:	3302      	adds	r3, #2
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	4413      	add	r3, r2
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009716:	7afb      	ldrb	r3, [r7, #11]
 8009718:	68fa      	ldr	r2, [r7, #12]
 800971a:	3302      	adds	r3, #2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	4413      	add	r3, r2
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	4618      	mov	r0, r3
 8009724:	f7ff f946 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009728:	4603      	mov	r3, r0
 800972a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800972c:	78fb      	ldrb	r3, [r7, #3]
 800972e:	f003 0301 	and.w	r3, r3, #1
 8009732:	2b00      	cmp	r3, #0
 8009734:	d016      	beq.n	8009764 <CAN_Rx_0x180CA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	2101      	movs	r1, #1
 800973a:	f7ff fddf 	bl	80092fc <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	3302      	adds	r3, #2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff f900 	bl	8008950 <CAN_NODE_MO_Receive>
 8009750:	4603      	mov	r3, r0
 8009752:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009754:	78bb      	ldrb	r3, [r7, #2]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d102      	bne.n	8009760 <CAN_Rx_0x180CA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800975a:	2301      	movs	r3, #1
 800975c:	707b      	strb	r3, [r7, #1]
 800975e:	e001      	b.n	8009764 <CAN_Rx_0x180CA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009760:	2300      	movs	r3, #0
 8009762:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180CA7F3();
 8009764:	f000 fa7e 	bl	8009c64 <process_Rx_CAN_0X180CA7F3>
}
 8009768:	3710      	adds	r7, #16
 800976a:	46bd      	mov	sp, r7
 800976c:	bd80      	pop	{r7, pc}
 800976e:	bf00      	nop
 8009770:	08013870 	.word	0x08013870

08009774 <process_Rx_CAN_0X1810A7F3>:


void process_Rx_CAN_0X1810A7F3(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800977a:	4b11      	ldr	r3, [pc, #68]	; (80097c0 <process_Rx_CAN_0X1810A7F3+0x4c>)
 800977c:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800977e:	2316      	movs	r3, #22
 8009780:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1810A7F3].CAN_Data[0];
 8009782:	4b10      	ldr	r3, [pc, #64]	; (80097c4 <process_Rx_CAN_0X1810A7F3+0x50>)
 8009784:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	3302      	adds	r3, #2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	4618      	mov	r0, r3
 8009794:	6879      	ldr	r1, [r7, #4]
 8009796:	f000 ff9f 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	//charging_started = ((tempData[0]) & 2);

	charge_complete = 0x00;
 800979a:	4b0b      	ldr	r3, [pc, #44]	; (80097c8 <process_Rx_CAN_0X1810A7F3+0x54>)
 800979c:	2200      	movs	r2, #0
 800979e:	701a      	strb	r2, [r3, #0]
	if(((tempData[6] >> 4) & 0x01))
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	3306      	adds	r3, #6
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	091b      	lsrs	r3, r3, #4
 80097a8:	b2db      	uxtb	r3, r3
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	2b00      	cmp	r3, #0
 80097b0:	d002      	beq.n	80097b8 <process_Rx_CAN_0X1810A7F3+0x44>
		charge_complete = 0x10;
 80097b2:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <process_Rx_CAN_0X1810A7F3+0x54>)
 80097b4:	2210      	movs	r2, #16
 80097b6:	701a      	strb	r2, [r3, #0]
}
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	bf00      	nop
 80097c0:	08013870 	.word	0x08013870
 80097c4:	1ffe9270 	.word	0x1ffe9270
 80097c8:	1fff4859 	.word	0x1fff4859

080097cc <process_Rx_CAN_0X180EA7F3>:

void process_Rx_CAN_0X180EA7F3(void)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
	int8_t *tempData, mo_index;
	static unsigned int charge_count = 0, c4;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80097d2:	4b70      	ldr	r3, [pc, #448]	; (8009994 <process_Rx_CAN_0X180EA7F3+0x1c8>)
 80097d4:	617b      	str	r3, [r7, #20]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80097d6:	2314      	movs	r3, #20
 80097d8:	74fb      	strb	r3, [r7, #19]

	tempData = &CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0];
 80097da:	4b6f      	ldr	r3, [pc, #444]	; (8009998 <process_Rx_CAN_0X180EA7F3+0x1cc>)
 80097dc:	60fb      	str	r3, [r7, #12]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 80097de:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80097e2:	697a      	ldr	r2, [r7, #20]
 80097e4:	3302      	adds	r3, #2
 80097e6:	009b      	lsls	r3, r3, #2
 80097e8:	4413      	add	r3, r2
 80097ea:	685b      	ldr	r3, [r3, #4]
 80097ec:	4618      	mov	r0, r3
 80097ee:	68f9      	ldr	r1, [r7, #12]
 80097f0:	f000 ff72 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	ChargeCurrentLimit = ((uint16_t)(((uint16_t)tempData[3] << 8) | (uint8_t)tempData[2]))/10;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3303      	adds	r3, #3
 80097f8:	781b      	ldrb	r3, [r3, #0]
 80097fa:	b25b      	sxtb	r3, r3
 80097fc:	b29b      	uxth	r3, r3
 80097fe:	021b      	lsls	r3, r3, #8
 8009800:	b29a      	uxth	r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3302      	adds	r3, #2
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	b29b      	uxth	r3, r3
 800980c:	4313      	orrs	r3, r2
 800980e:	b29b      	uxth	r3, r3
 8009810:	b29b      	uxth	r3, r3
 8009812:	4a62      	ldr	r2, [pc, #392]	; (800999c <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009814:	fba2 2303 	umull	r2, r3, r2, r3
 8009818:	08db      	lsrs	r3, r3, #3
 800981a:	b29a      	uxth	r2, r3
 800981c:	4b60      	ldr	r3, [pc, #384]	; (80099a0 <process_Rx_CAN_0X180EA7F3+0x1d4>)
 800981e:	801a      	strh	r2, [r3, #0]
	DischargeCurrentLimit = ((int)(((int)tempData[5] << 8) | (int)tempData[4]))/10;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3305      	adds	r3, #5
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	b25b      	sxtb	r3, r3
 8009828:	021a      	lsls	r2, r3, #8
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3304      	adds	r3, #4
 800982e:	781b      	ldrb	r3, [r3, #0]
 8009830:	b25b      	sxtb	r3, r3
 8009832:	4313      	orrs	r3, r2
 8009834:	4a5b      	ldr	r2, [pc, #364]	; (80099a4 <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009836:	fb82 1203 	smull	r1, r2, r2, r3
 800983a:	1092      	asrs	r2, r2, #2
 800983c:	17db      	asrs	r3, r3, #31
 800983e:	1ad3      	subs	r3, r2, r3
 8009840:	b29a      	uxth	r2, r3
 8009842:	4b59      	ldr	r3, [pc, #356]	; (80099a8 <process_Rx_CAN_0X180EA7F3+0x1dc>)
 8009844:	801a      	strh	r2, [r3, #0]
	RegenerativeCurrentLimit = ((uint16_t)(((uint16_t)tempData[7] << 8) | (uint8_t)tempData[6]))/10;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	3307      	adds	r3, #7
 800984a:	781b      	ldrb	r3, [r3, #0]
 800984c:	b25b      	sxtb	r3, r3
 800984e:	b29b      	uxth	r3, r3
 8009850:	021b      	lsls	r3, r3, #8
 8009852:	b29a      	uxth	r2, r3
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	3306      	adds	r3, #6
 8009858:	781b      	ldrb	r3, [r3, #0]
 800985a:	b2db      	uxtb	r3, r3
 800985c:	b29b      	uxth	r3, r3
 800985e:	4313      	orrs	r3, r2
 8009860:	b29b      	uxth	r3, r3
 8009862:	b29b      	uxth	r3, r3
 8009864:	4a4d      	ldr	r2, [pc, #308]	; (800999c <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009866:	fba2 2303 	umull	r2, r3, r2, r3
 800986a:	08db      	lsrs	r3, r3, #3
 800986c:	b29a      	uxth	r2, r3
 800986e:	4b4f      	ldr	r3, [pc, #316]	; (80099ac <process_Rx_CAN_0X180EA7F3+0x1e0>)
 8009870:	801a      	strh	r2, [r3, #0]
//	int d =((uint16_t)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
	PackCurrent =  ((int)(((int)tempData[1] << 8) | (int8_t)tempData[0]))/10;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	3301      	adds	r3, #1
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	b25b      	sxtb	r3, r3
 800987a:	021a      	lsls	r2, r3, #8
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	781b      	ldrb	r3, [r3, #0]
 8009880:	b25b      	sxtb	r3, r3
 8009882:	4313      	orrs	r3, r2
 8009884:	4a47      	ldr	r2, [pc, #284]	; (80099a4 <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009886:	fb82 1203 	smull	r1, r2, r2, r3
 800988a:	1092      	asrs	r2, r2, #2
 800988c:	17db      	asrs	r3, r3, #31
 800988e:	1ad3      	subs	r3, r2, r3
 8009890:	4a47      	ldr	r2, [pc, #284]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009892:	6013      	str	r3, [r2, #0]

	static int c = 0;// hv_count = 0;
	if((PackCurrent > 1))
 8009894:	4b46      	ldr	r3, [pc, #280]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	2b01      	cmp	r3, #1
 800989a:	dd37      	ble.n	800990c <process_Rx_CAN_0X180EA7F3+0x140>
	{
		if(charge_count++ > 20)
 800989c:	4b45      	ldr	r3, [pc, #276]	; (80099b4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	1c5a      	adds	r2, r3, #1
 80098a2:	4944      	ldr	r1, [pc, #272]	; (80099b4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80098a4:	600a      	str	r2, [r1, #0]
 80098a6:	2b14      	cmp	r3, #20
 80098a8:	d905      	bls.n	80098b6 <process_Rx_CAN_0X180EA7F3+0xea>
		{
			charging_started = 1;
 80098aa:	4b43      	ldr	r3, [pc, #268]	; (80099b8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 80098ac:	2201      	movs	r2, #1
 80098ae:	701a      	strb	r2, [r3, #0]
			charge_count = 0;
 80098b0:	4b40      	ldr	r3, [pc, #256]	; (80099b4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
		}

		if(Regenration_flag || RPM)
 80098b6:	4b41      	ldr	r3, [pc, #260]	; (80099bc <process_Rx_CAN_0X180EA7F3+0x1f0>)
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <process_Rx_CAN_0X180EA7F3+0xfa>
 80098be:	4b40      	ldr	r3, [pc, #256]	; (80099c0 <process_Rx_CAN_0X180EA7F3+0x1f4>)
 80098c0:	881b      	ldrh	r3, [r3, #0]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d01e      	beq.n	8009904 <process_Rx_CAN_0X180EA7F3+0x138>
		{

			//HvBatteryPower = 10 * 58;PackVoltage;
			charge_count = charging_started = 0;
 80098c6:	4b3c      	ldr	r3, [pc, #240]	; (80099b8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 80098c8:	2200      	movs	r2, #0
 80098ca:	701a      	strb	r2, [r3, #0]
 80098cc:	4b39      	ldr	r3, [pc, #228]	; (80099b4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80098ce:	2200      	movs	r2, #0
 80098d0:	601a      	str	r2, [r3, #0]
			HvBatteryPower = PackCurrent;
 80098d2:	4b37      	ldr	r3, [pc, #220]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	4a3b      	ldr	r2, [pc, #236]	; (80099c4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 80098d8:	6013      	str	r3, [r2, #0]
			hv_count = 1;
 80098da:	4b3b      	ldr	r3, [pc, #236]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 80098dc:	2201      	movs	r2, #1
 80098de:	801a      	strh	r2, [r3, #0]
			if(PackCurrent > c)
 80098e0:	4b33      	ldr	r3, [pc, #204]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80098e2:	681a      	ldr	r2, [r3, #0]
 80098e4:	4b39      	ldr	r3, [pc, #228]	; (80099cc <process_Rx_CAN_0X180EA7F3+0x200>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	429a      	cmp	r2, r3
 80098ea:	dd0b      	ble.n	8009904 <process_Rx_CAN_0X180EA7F3+0x138>
				{
				if((hv_count++ < 2))
 80098ec:	4b36      	ldr	r3, [pc, #216]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 80098ee:	881b      	ldrh	r3, [r3, #0]
 80098f0:	1c5a      	adds	r2, r3, #1
 80098f2:	b291      	uxth	r1, r2
 80098f4:	4a34      	ldr	r2, [pc, #208]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 80098f6:	8011      	strh	r1, [r2, #0]
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	d803      	bhi.n	8009904 <process_Rx_CAN_0X180EA7F3+0x138>
					c = PackCurrent;
 80098fc:	4b2c      	ldr	r3, [pc, #176]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a32      	ldr	r2, [pc, #200]	; (80099cc <process_Rx_CAN_0X180EA7F3+0x200>)
 8009902:	6013      	str	r3, [r2, #0]
				else if(PackCurrent < HvBatteryPower)
				{
					//HvBatteryPower = c * 58;PackVoltage;
				}
		}
		c4 = 0;
 8009904:	4b32      	ldr	r3, [pc, #200]	; (80099d0 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009906:	2200      	movs	r2, #0
 8009908:	601a      	str	r2, [r3, #0]
 800990a:	e010      	b.n	800992e <process_Rx_CAN_0X180EA7F3+0x162>

		//charge_count++;
	}
	else if((PackCurrent <= 0))
 800990c:	4b28      	ldr	r3, [pc, #160]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	dc0c      	bgt.n	800992e <process_Rx_CAN_0X180EA7F3+0x162>
	{
		charge_count = charging_started = 0;
 8009914:	4b28      	ldr	r3, [pc, #160]	; (80099b8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
 800991a:	4b26      	ldr	r3, [pc, #152]	; (80099b4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 800991c:	2200      	movs	r2, #0
 800991e:	601a      	str	r2, [r3, #0]
		HvBatteryPower = c = 0;
 8009920:	4b2a      	ldr	r3, [pc, #168]	; (80099cc <process_Rx_CAN_0X180EA7F3+0x200>)
 8009922:	2200      	movs	r2, #0
 8009924:	601a      	str	r2, [r3, #0]
 8009926:	4b29      	ldr	r3, [pc, #164]	; (80099cc <process_Rx_CAN_0X180EA7F3+0x200>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a26      	ldr	r2, [pc, #152]	; (80099c4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 800992c:	6013      	str	r3, [r2, #0]
	}

if( (hv_count == 1) )
 800992e:	4b26      	ldr	r3, [pc, #152]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009930:	881b      	ldrh	r3, [r3, #0]
 8009932:	2b01      	cmp	r3, #1
 8009934:	d10d      	bne.n	8009952 <process_Rx_CAN_0X180EA7F3+0x186>
{
	HvBatteryPower = HvBatteryPower * 58;PackVoltage;
 8009936:	4b23      	ldr	r3, [pc, #140]	; (80099c4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	223a      	movs	r2, #58	; 0x3a
 800993c:	fb02 f303 	mul.w	r3, r2, r3
 8009940:	4a20      	ldr	r2, [pc, #128]	; (80099c4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009942:	6013      	str	r3, [r2, #0]
	hv_count++;
 8009944:	4b20      	ldr	r3, [pc, #128]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009946:	881b      	ldrh	r3, [r3, #0]
 8009948:	3301      	adds	r3, #1
 800994a:	b29a      	uxth	r2, r3
 800994c:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 800994e:	801a      	strh	r2, [r3, #0]
 8009950:	e006      	b.n	8009960 <process_Rx_CAN_0X180EA7F3+0x194>

}
else if(hv_count > 10)
 8009952:	4b1d      	ldr	r3, [pc, #116]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009954:	881b      	ldrh	r3, [r3, #0]
 8009956:	2b0a      	cmp	r3, #10
 8009958:	d902      	bls.n	8009960 <process_Rx_CAN_0X180EA7F3+0x194>
	hv_count = 0;
 800995a:	4b1b      	ldr	r3, [pc, #108]	; (80099c8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 800995c:	2200      	movs	r2, #0
 800995e:	801a      	strh	r2, [r3, #0]

	//OBDII_CAN[can_0x01].CAN_Data[2] = tempData[1];
	//OBDII_CAN[can_0x01].CAN_Data[3] = tempData[0];
if(PackCurrent < c4)
 8009960:	4b13      	ldr	r3, [pc, #76]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	461a      	mov	r2, r3
 8009966:	4b1a      	ldr	r3, [pc, #104]	; (80099d0 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	429a      	cmp	r2, r3
 800996c:	d207      	bcs.n	800997e <process_Rx_CAN_0X180EA7F3+0x1b2>
{
	int a;
	a++;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3301      	adds	r3, #1
 8009972:	60bb      	str	r3, [r7, #8]
	c4 = PackCurrent;
 8009974:	4b0e      	ldr	r3, [pc, #56]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	461a      	mov	r2, r3
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <process_Rx_CAN_0X180EA7F3+0x204>)
 800997c:	601a      	str	r2, [r3, #0]
}
if(PackCurrent < -10)
 800997e:	4b0c      	ldr	r3, [pc, #48]	; (80099b0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f113 0f0a 	cmn.w	r3, #10
 8009986:	da02      	bge.n	800998e <process_Rx_CAN_0X180EA7F3+0x1c2>
{
	int a;
	a++;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	3301      	adds	r3, #1
 800998c:	607b      	str	r3, [r7, #4]
}
}
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	08013870 	.word	0x08013870
 8009998:	1ffe9258 	.word	0x1ffe9258
 800999c:	cccccccd 	.word	0xcccccccd
 80099a0:	1fff48d4 	.word	0x1fff48d4
 80099a4:	66666667 	.word	0x66666667
 80099a8:	1fff47fa 	.word	0x1fff47fa
 80099ac:	1fff4820 	.word	0x1fff4820
 80099b0:	1fff4818 	.word	0x1fff4818
 80099b4:	1fff4478 	.word	0x1fff4478
 80099b8:	1fff4858 	.word	0x1fff4858
 80099bc:	1fff48d6 	.word	0x1fff48d6
 80099c0:	1fff4814 	.word	0x1fff4814
 80099c4:	1fff481c 	.word	0x1fff481c
 80099c8:	1fff4838 	.word	0x1fff4838
 80099cc:	1fff447c 	.word	0x1fff447c
 80099d0:	1fff4480 	.word	0x1fff4480

080099d4 <process_Rx_CAN_0X180FA7F3>:

void process_Rx_CAN_0X180FA7F3(void)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b084      	sub	sp, #16
 80099d8:	af00      	add	r7, sp, #0
	int PackCurent = 0;
 80099da:	2300      	movs	r3, #0
 80099dc:	60fb      	str	r3, [r7, #12]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80099de:	4b20      	ldr	r3, [pc, #128]	; (8009a60 <process_Rx_CAN_0X180FA7F3+0x8c>)
 80099e0:	60bb      	str	r3, [r7, #8]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80099e2:	2315      	movs	r3, #21
 80099e4:	71fb      	strb	r3, [r7, #7]

	tempData = &CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0];
 80099e6:	4b1f      	ldr	r3, [pc, #124]	; (8009a64 <process_Rx_CAN_0X180FA7F3+0x90>)
 80099e8:	603b      	str	r3, [r7, #0]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 80099ea:	79fb      	ldrb	r3, [r7, #7]
 80099ec:	68ba      	ldr	r2, [r7, #8]
 80099ee:	3302      	adds	r3, #2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	4413      	add	r3, r2
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	4618      	mov	r0, r3
 80099f8:	6839      	ldr	r1, [r7, #0]
 80099fa:	f000 fe6d 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	Bms_SOC = ((uint16_t)tempData[1] << 8) | tempData[0];
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	3301      	adds	r3, #1
 8009a02:	781b      	ldrb	r3, [r3, #0]
 8009a04:	021b      	lsls	r3, r3, #8
 8009a06:	b29a      	uxth	r2, r3
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	781b      	ldrb	r3, [r3, #0]
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	b29a      	uxth	r2, r3
 8009a14:	4b14      	ldr	r3, [pc, #80]	; (8009a68 <process_Rx_CAN_0X180FA7F3+0x94>)
 8009a16:	801a      	strh	r2, [r3, #0]

	Bms_SOH = (((uint16_t)tempData[3] << 8) | tempData[2]) / 10;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	3303      	adds	r3, #3
 8009a1c:	781b      	ldrb	r3, [r3, #0]
 8009a1e:	021b      	lsls	r3, r3, #8
 8009a20:	683a      	ldr	r2, [r7, #0]
 8009a22:	3202      	adds	r2, #2
 8009a24:	7812      	ldrb	r2, [r2, #0]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	4a10      	ldr	r2, [pc, #64]	; (8009a6c <process_Rx_CAN_0X180FA7F3+0x98>)
 8009a2a:	fb82 1203 	smull	r1, r2, r2, r3
 8009a2e:	1092      	asrs	r2, r2, #2
 8009a30:	17db      	asrs	r3, r3, #31
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	b29a      	uxth	r2, r3
 8009a36:	4b0e      	ldr	r3, [pc, #56]	; (8009a70 <process_Rx_CAN_0X180FA7F3+0x9c>)
 8009a38:	801a      	strh	r2, [r3, #0]

	PackVoltage = (((uint16_t)tempData[7] << 8) | tempData[6])/10;
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	3307      	adds	r3, #7
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	021b      	lsls	r3, r3, #8
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	3206      	adds	r2, #6
 8009a46:	7812      	ldrb	r2, [r2, #0]
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	4a08      	ldr	r2, [pc, #32]	; (8009a6c <process_Rx_CAN_0X180FA7F3+0x98>)
 8009a4c:	fb82 1203 	smull	r1, r2, r2, r3
 8009a50:	1092      	asrs	r2, r2, #2
 8009a52:	17db      	asrs	r3, r3, #31
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	4a07      	ldr	r2, [pc, #28]	; (8009a74 <process_Rx_CAN_0X180FA7F3+0xa0>)
 8009a58:	6013      	str	r3, [r2, #0]

}
 8009a5a:	3710      	adds	r7, #16
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}
 8009a60:	08013870 	.word	0x08013870
 8009a64:	1ffe9264 	.word	0x1ffe9264
 8009a68:	1fff48c0 	.word	0x1fff48c0
 8009a6c:	66666667 	.word	0x66666667
 8009a70:	1fff48c8 	.word	0x1fff48c8
 8009a74:	1fff48d8 	.word	0x1fff48d8

08009a78 <process_Rx_CAN_0X1814A7F3>:
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);

}

void process_Rx_CAN_0X1814A7F3(void)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b084      	sub	sp, #16
 8009a7c:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009a7e:	4b09      	ldr	r3, [pc, #36]	; (8009aa4 <process_Rx_CAN_0X1814A7F3+0x2c>)
 8009a80:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009a82:	2317      	movs	r3, #23
 8009a84:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1814A7F3].CAN_Data[0];
 8009a86:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <process_Rx_CAN_0X1814A7F3+0x30>)
 8009a88:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	3302      	adds	r3, #2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	4413      	add	r3, r2
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	4618      	mov	r0, r3
 8009a98:	6879      	ldr	r1, [r7, #4]
 8009a9a:	f000 fe1d 	bl	800a6d8 <CAN_NODE_MO_ReadData>

}
 8009a9e:	3710      	adds	r7, #16
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	08013870 	.word	0x08013870
 8009aa8:	1ffe9294 	.word	0x1ffe9294

08009aac <process_Rx_CAN_0X1815A7F3>:

void process_Rx_CAN_0X1815A7F3(void)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b084      	sub	sp, #16
 8009ab0:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ab2:	4b09      	ldr	r3, [pc, #36]	; (8009ad8 <process_Rx_CAN_0X1815A7F3+0x2c>)
 8009ab4:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009ab6:	2317      	movs	r3, #23
 8009ab8:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1815A7F3].CAN_Data[0];
 8009aba:	4b08      	ldr	r3, [pc, #32]	; (8009adc <process_Rx_CAN_0X1815A7F3+0x30>)
 8009abc:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009abe:	7afb      	ldrb	r3, [r7, #11]
 8009ac0:	68fa      	ldr	r2, [r7, #12]
 8009ac2:	3302      	adds	r3, #2
 8009ac4:	009b      	lsls	r3, r3, #2
 8009ac6:	4413      	add	r3, r2
 8009ac8:	685b      	ldr	r3, [r3, #4]
 8009aca:	4618      	mov	r0, r3
 8009acc:	6879      	ldr	r1, [r7, #4]
 8009ace:	f000 fe03 	bl	800a6d8 <CAN_NODE_MO_ReadData>

}
 8009ad2:	3710      	adds	r7, #16
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	bd80      	pop	{r7, pc}
 8009ad8:	08013870 	.word	0x08013870
 8009adc:	1ffe92a0 	.word	0x1ffe92a0

08009ae0 <process_Rx_CAN_0X1808A7F3>:


void process_Rx_CAN_0X1808A7F3(void)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <process_Rx_CAN_0X1808A7F3+0x2c>)
 8009ae8:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009aea:	230c      	movs	r3, #12
 8009aec:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0];
 8009aee:	4b08      	ldr	r3, [pc, #32]	; (8009b10 <process_Rx_CAN_0X1808A7F3+0x30>)
 8009af0:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009af2:	7afb      	ldrb	r3, [r7, #11]
 8009af4:	68fa      	ldr	r2, [r7, #12]
 8009af6:	3302      	adds	r3, #2
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	4618      	mov	r0, r3
 8009b00:	6879      	ldr	r1, [r7, #4]
 8009b02:	f000 fde9 	bl	800a6d8 <CAN_NODE_MO_ReadData>

}
 8009b06:	3710      	adds	r7, #16
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bd80      	pop	{r7, pc}
 8009b0c:	08013870 	.word	0x08013870
 8009b10:	1ffe92b8 	.word	0x1ffe92b8

08009b14 <process_Rx_CAN_0X180AA7F3>:


void process_Rx_CAN_0X180AA7F3(void)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
	BMS_Avg_temp=0;
 8009b1a:	4b23      	ldr	r3, [pc, #140]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b1c:	2200      	movs	r2, #0
 8009b1e:	601a      	str	r2, [r3, #0]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009b20:	4b22      	ldr	r3, [pc, #136]	; (8009bac <process_Rx_CAN_0X180AA7F3+0x98>)
 8009b22:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009b24:	230d      	movs	r3, #13
 8009b26:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180AA7F3].CAN_Data[0];
 8009b28:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <process_Rx_CAN_0X180AA7F3+0x9c>)
 8009b2a:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009b2c:	7afb      	ldrb	r3, [r7, #11]
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	3302      	adds	r3, #2
 8009b32:	009b      	lsls	r3, r3, #2
 8009b34:	4413      	add	r3, r2
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	4618      	mov	r0, r3
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	f000 fdcc 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	3301      	adds	r3, #1
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	021b      	lsls	r3, r3, #8
 8009b48:	687a      	ldr	r2, [r7, #4]
 8009b4a:	7812      	ldrb	r2, [r2, #0]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	4a16      	ldr	r2, [pc, #88]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b50:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	3303      	adds	r3, #3
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	021b      	lsls	r3, r3, #8
 8009b5a:	687a      	ldr	r2, [r7, #4]
 8009b5c:	3202      	adds	r2, #2
 8009b5e:	7812      	ldrb	r2, [r2, #0]
 8009b60:	431a      	orrs	r2, r3
 8009b62:	4b11      	ldr	r3, [pc, #68]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	4413      	add	r3, r2
 8009b68:	4a0f      	ldr	r2, [pc, #60]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b6a:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	3305      	adds	r3, #5
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	021b      	lsls	r3, r3, #8
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	3204      	adds	r2, #4
 8009b78:	7812      	ldrb	r2, [r2, #0]
 8009b7a:	431a      	orrs	r2, r3
 8009b7c:	4b0a      	ldr	r3, [pc, #40]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	4413      	add	r3, r2
 8009b82:	4a09      	ldr	r2, [pc, #36]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b84:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	3307      	adds	r3, #7
 8009b8a:	781b      	ldrb	r3, [r3, #0]
 8009b8c:	021b      	lsls	r3, r3, #8
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	3206      	adds	r2, #6
 8009b92:	7812      	ldrb	r2, [r2, #0]
 8009b94:	431a      	orrs	r2, r3
 8009b96:	4b04      	ldr	r3, [pc, #16]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	4a02      	ldr	r2, [pc, #8]	; (8009ba8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009b9e:	6013      	str	r3, [r2, #0]

}
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	1fff48c4 	.word	0x1fff48c4
 8009bac:	08013870 	.word	0x08013870
 8009bb0:	1ffe92c4 	.word	0x1ffe92c4

08009bb4 <process_Rx_CAN_0X180BA7F3>:


void process_Rx_CAN_0X180BA7F3(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b084      	sub	sp, #16
 8009bb8:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009bba:	4b27      	ldr	r3, [pc, #156]	; (8009c58 <process_Rx_CAN_0X180BA7F3+0xa4>)
 8009bbc:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009bbe:	230e      	movs	r3, #14
 8009bc0:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180BA7F3].CAN_Data[0];
 8009bc2:	4b26      	ldr	r3, [pc, #152]	; (8009c5c <process_Rx_CAN_0X180BA7F3+0xa8>)
 8009bc4:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009bc6:	7afb      	ldrb	r3, [r7, #11]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	3302      	adds	r3, #2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	4413      	add	r3, r2
 8009bd0:	685b      	ldr	r3, [r3, #4]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	f000 fd7f 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp +=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	021b      	lsls	r3, r3, #8
 8009be2:	687a      	ldr	r2, [r7, #4]
 8009be4:	7812      	ldrb	r2, [r2, #0]
 8009be6:	431a      	orrs	r2, r3
 8009be8:	4b1d      	ldr	r3, [pc, #116]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	4a1c      	ldr	r2, [pc, #112]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009bf0:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	3303      	adds	r3, #3
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	021b      	lsls	r3, r3, #8
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	3202      	adds	r2, #2
 8009bfe:	7812      	ldrb	r2, [r2, #0]
 8009c00:	431a      	orrs	r2, r3
 8009c02:	4b17      	ldr	r3, [pc, #92]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4413      	add	r3, r2
 8009c08:	4a15      	ldr	r2, [pc, #84]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c0a:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3305      	adds	r3, #5
 8009c10:	781b      	ldrb	r3, [r3, #0]
 8009c12:	021b      	lsls	r3, r3, #8
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	3204      	adds	r2, #4
 8009c18:	7812      	ldrb	r2, [r2, #0]
 8009c1a:	431a      	orrs	r2, r3
 8009c1c:	4b10      	ldr	r3, [pc, #64]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4413      	add	r3, r2
 8009c22:	4a0f      	ldr	r2, [pc, #60]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c24:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	3307      	adds	r3, #7
 8009c2a:	781b      	ldrb	r3, [r3, #0]
 8009c2c:	021b      	lsls	r3, r3, #8
 8009c2e:	687a      	ldr	r2, [r7, #4]
 8009c30:	3206      	adds	r2, #6
 8009c32:	7812      	ldrb	r2, [r2, #0]
 8009c34:	431a      	orrs	r2, r3
 8009c36:	4b0a      	ldr	r3, [pc, #40]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	4a08      	ldr	r2, [pc, #32]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c3e:	6013      	str	r3, [r2, #0]

	BMS_Avg_temp=BMS_Avg_temp/8;
 8009c40:	4b07      	ldr	r3, [pc, #28]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	da00      	bge.n	8009c4a <process_Rx_CAN_0X180BA7F3+0x96>
 8009c48:	3307      	adds	r3, #7
 8009c4a:	10db      	asrs	r3, r3, #3
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b04      	ldr	r3, [pc, #16]	; (8009c60 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009c50:	601a      	str	r2, [r3, #0]

}
 8009c52:	3710      	adds	r7, #16
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}
 8009c58:	08013870 	.word	0x08013870
 8009c5c:	1ffe92d0 	.word	0x1ffe92d0
 8009c60:	1fff48c4 	.word	0x1fff48c4

08009c64 <process_Rx_CAN_0X180CA7F3>:



void process_Rx_CAN_0X180CA7F3(void)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009c6a:	4b22      	ldr	r3, [pc, #136]	; (8009cf4 <process_Rx_CAN_0X180CA7F3+0x90>)
 8009c6c:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009c6e:	2318      	movs	r3, #24
 8009c70:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[0];
 8009c72:	4b21      	ldr	r3, [pc, #132]	; (8009cf8 <process_Rx_CAN_0X180CA7F3+0x94>)
 8009c74:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009c76:	7afb      	ldrb	r3, [r7, #11]
 8009c78:	68fa      	ldr	r2, [r7, #12]
 8009c7a:	3302      	adds	r3, #2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	4413      	add	r3, r2
 8009c80:	685b      	ldr	r3, [r3, #4]
 8009c82:	4618      	mov	r0, r3
 8009c84:	6879      	ldr	r1, [r7, #4]
 8009c86:	f000 fd27 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	Bms_minTemp = ((int16_t)tempData[1] << 8) | tempData[0];
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	021b      	lsls	r3, r3, #8
 8009c92:	b29a      	uxth	r2, r3
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	781b      	ldrb	r3, [r3, #0]
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	4b17      	ldr	r3, [pc, #92]	; (8009cfc <process_Rx_CAN_0X180CA7F3+0x98>)
 8009ca0:	801a      	strh	r2, [r3, #0]
	Bms_minTemp = Bms_minTemp / 10;
 8009ca2:	4b16      	ldr	r3, [pc, #88]	; (8009cfc <process_Rx_CAN_0X180CA7F3+0x98>)
 8009ca4:	881b      	ldrh	r3, [r3, #0]
 8009ca6:	b21b      	sxth	r3, r3
 8009ca8:	4a15      	ldr	r2, [pc, #84]	; (8009d00 <process_Rx_CAN_0X180CA7F3+0x9c>)
 8009caa:	fb82 1203 	smull	r1, r2, r2, r3
 8009cae:	1092      	asrs	r2, r2, #2
 8009cb0:	17db      	asrs	r3, r3, #31
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	b29a      	uxth	r2, r3
 8009cb6:	4b11      	ldr	r3, [pc, #68]	; (8009cfc <process_Rx_CAN_0X180CA7F3+0x98>)
 8009cb8:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = ((int16_t)tempData[3] << 8) | tempData[2];
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	3303      	adds	r3, #3
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b29a      	uxth	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	3302      	adds	r3, #2
 8009cc8:	781b      	ldrb	r3, [r3, #0]
 8009cca:	b29b      	uxth	r3, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b29a      	uxth	r2, r3
 8009cd0:	4b0c      	ldr	r3, [pc, #48]	; (8009d04 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009cd2:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = Bms_maxTemp / 10;
 8009cd4:	4b0b      	ldr	r3, [pc, #44]	; (8009d04 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009cd6:	881b      	ldrh	r3, [r3, #0]
 8009cd8:	b21b      	sxth	r3, r3
 8009cda:	4a09      	ldr	r2, [pc, #36]	; (8009d00 <process_Rx_CAN_0X180CA7F3+0x9c>)
 8009cdc:	fb82 1203 	smull	r1, r2, r2, r3
 8009ce0:	1092      	asrs	r2, r2, #2
 8009ce2:	17db      	asrs	r3, r3, #31
 8009ce4:	1ad3      	subs	r3, r2, r3
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	4b06      	ldr	r3, [pc, #24]	; (8009d04 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009cea:	801a      	strh	r2, [r3, #0]

}
 8009cec:	3710      	adds	r7, #16
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	08013870 	.word	0x08013870
 8009cf8:	1ffe92ac 	.word	0x1ffe92ac
 8009cfc:	1fff4840 	.word	0x1fff4840
 8009d00:	66666667 	.word	0x66666667
 8009d04:	1fff47f8 	.word	0x1fff47f8

08009d08 <Read_can_bms_29bit>:

void Read_can_bms_29bit(void)
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	af00      	add	r7, sp, #0
	CAN_Rx_0x1810A7F3();
 8009d0c:	f7ff fc3a 	bl	8009584 <CAN_Rx_0x1810A7F3>
	CAN_Rx_0x180EA7F3();
 8009d10:	f7ff fbbc 	bl	800948c <CAN_Rx_0x180EA7F3>
	CAN_Rx_0x180FA7F3();
 8009d14:	f7ff fbf8 	bl	8009508 <CAN_Rx_0x180FA7F3>
	CAN_Rx_0x1814A7F3();
 8009d18:	f7ff fc72 	bl	8009600 <CAN_Rx_0x1814A7F3>
	CAN_Rx_0x1815A7F3();
 8009d1c:	f7ff fcae 	bl	800967c <CAN_Rx_0x1815A7F3>
	CAN_Rx_0x180CA7F3();
 8009d20:	f7ff fcea 	bl	80096f8 <CAN_Rx_0x180CA7F3>
	CAN_Rx_0x1808A7F3();
 8009d24:	f7ff faf8 	bl	8009318 <CAN_Rx_0x1808A7F3>
    CAN_Rx_0x180AA7F3();
 8009d28:	f7ff fb34 	bl	8009394 <CAN_Rx_0x180AA7F3>
    CAN_Rx_0x180BA7F3();
 8009d2c:	f7ff fb70 	bl	8009410 <CAN_Rx_0x180BA7F3>
}
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop

08009d34 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b083      	sub	sp, #12
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	683a      	ldr	r2, [r7, #0]
 8009d44:	61da      	str	r2, [r3, #28]
}
 8009d46:	370c      	adds	r7, #12
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <Update_CAN_0x18FF0921>:
	{0x18FF2121, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{0x18FED911, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
};

void Update_CAN_0x18FF0921(void)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b084      	sub	sp, #16
 8009d54:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d56:	4b07      	ldr	r3, [pc, #28]	; (8009d74 <Update_CAN_0x18FF0921+0x24>)
 8009d58:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF0921].CAN_Data[ZERO_BYTE];
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <Update_CAN_0x18FF0921+0x28>)
 8009d5c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF0921], tempData);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	68db      	ldr	r3, [r3, #12]
 8009d62:	4618      	mov	r0, r3
 8009d64:	68b9      	ldr	r1, [r7, #8]
 8009d66:	f7fe fe05 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009d6e:	3710      	adds	r7, #16
 8009d70:	46bd      	mov	sp, r7
 8009d72:	bd80      	pop	{r7, pc}
 8009d74:	08013870 	.word	0x08013870
 8009d78:	1ffe92dc 	.word	0x1ffe92dc

08009d7c <Update_CAN_0x0CF00400>:

void Update_CAN_0x0CF00400(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d82:	4b07      	ldr	r3, [pc, #28]	; (8009da0 <Update_CAN_0x0CF00400+0x24>)
 8009d84:	60fb      	str	r3, [r7, #12]
	//to update battery temperature
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer;
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer >> 8;


	tempData = &CAN_MSG_DB[CAN_0CF00400].CAN_Data[ZERO_BYTE];
 8009d86:	4b07      	ldr	r3, [pc, #28]	; (8009da4 <Update_CAN_0x0CF00400+0x28>)
 8009d88:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF00400], tempData);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	4618      	mov	r0, r3
 8009d90:	68b9      	ldr	r1, [r7, #8]
 8009d92:	f7fe fdef 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009d96:	4603      	mov	r3, r0
 8009d98:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009d9a:	3710      	adds	r7, #16
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	08013870 	.word	0x08013870
 8009da4:	1ffe92e8 	.word	0x1ffe92e8

08009da8 <Update_CAN_0x18FFC621>:

void Update_CAN_0x18FFC621(void)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b084      	sub	sp, #16
 8009dac:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009dae:	4b07      	ldr	r3, [pc, #28]	; (8009dcc <Update_CAN_0x18FFC621+0x24>)
 8009db0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FFC621].CAN_Data[ZERO_BYTE];
 8009db2:	4b07      	ldr	r3, [pc, #28]	; (8009dd0 <Update_CAN_0x18FFC621+0x28>)
 8009db4:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFC621], tempData);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	695b      	ldr	r3, [r3, #20]
 8009dba:	4618      	mov	r0, r3
 8009dbc:	68b9      	ldr	r1, [r7, #8]
 8009dbe:	f7fe fdd9 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009dc6:	3710      	adds	r7, #16
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	bd80      	pop	{r7, pc}
 8009dcc:	08013870 	.word	0x08013870
 8009dd0:	1ffe92f4 	.word	0x1ffe92f4

08009dd4 <Update_CAN_0x18FFB632>:

void Update_CAN_0x18FFB632(void)
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b086      	sub	sp, #24
 8009dd8:	af02      	add	r7, sp, #8
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009dda:	4b17      	ldr	r3, [pc, #92]	; (8009e38 <Update_CAN_0x18FFB632+0x64>)
 8009ddc:	60fb      	str	r3, [r7, #12]
	//to update SOC percentage byte         (0 to 100) to (10 to 100)
		//BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE], 10, 100, 0, 100);

	//to update SOC percentage byte         (0 to 100) to (10 to 100)
//	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = Bms_SOC;
	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(Bms_SOC, 10, 100, 0, 100);
 8009dde:	4b17      	ldr	r3, [pc, #92]	; (8009e3c <Update_CAN_0x18FFB632+0x68>)
 8009de0:	881b      	ldrh	r3, [r3, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	2364      	movs	r3, #100	; 0x64
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	4610      	mov	r0, r2
 8009dea:	210a      	movs	r1, #10
 8009dec:	2264      	movs	r2, #100	; 0x64
 8009dee:	2300      	movs	r3, #0
 8009df0:	f000 f988 	bl	800a104 <map>
 8009df4:	4603      	mov	r3, r0
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	4b11      	ldr	r3, [pc, #68]	; (8009e40 <Update_CAN_0x18FFB632+0x6c>)
 8009dfa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009dfe:	4b10      	ldr	r3, [pc, #64]	; (8009e40 <Update_CAN_0x18FFB632+0x6c>)
 8009e00:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8009e04:	4b0f      	ldr	r3, [pc, #60]	; (8009e44 <Update_CAN_0x18FFB632+0x70>)
 8009e06:	701a      	strb	r2, [r3, #0]
 8009e08:	4b0e      	ldr	r3, [pc, #56]	; (8009e44 <Update_CAN_0x18FFB632+0x70>)
 8009e0a:	781a      	ldrb	r2, [r3, #0]
 8009e0c:	4b0e      	ldr	r3, [pc, #56]	; (8009e48 <Update_CAN_0x18FFB632+0x74>)
 8009e0e:	701a      	strb	r2, [r3, #0]

	//to update battery temperature
	CAN_MSG_DB[CAN_18FFB632].CAN_Data[SECOND_BYTE] = Bms_maxTemp;
 8009e10:	4b0e      	ldr	r3, [pc, #56]	; (8009e4c <Update_CAN_0x18FFB632+0x78>)
 8009e12:	881b      	ldrh	r3, [r3, #0]
 8009e14:	b2da      	uxtb	r2, r3
 8009e16:	4b0a      	ldr	r3, [pc, #40]	; (8009e40 <Update_CAN_0x18FFB632+0x6c>)
 8009e18:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//to update drive mode information
	//CAN_MSG_DB[CAN_18FFB632].CAN_Data[FOURTH_BYTE] = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];


	tempData = &CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE];
 8009e1c:	4b0c      	ldr	r3, [pc, #48]	; (8009e50 <Update_CAN_0x18FFB632+0x7c>)
 8009e1e:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFB632], tempData);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	4618      	mov	r0, r3
 8009e26:	68b9      	ldr	r1, [r7, #8]
 8009e28:	f7fe fda4 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009e30:	3710      	adds	r7, #16
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}
 8009e36:	bf00      	nop
 8009e38:	08013870 	.word	0x08013870
 8009e3c:	1fff48c0 	.word	0x1fff48c0
 8009e40:	1ffe92d8 	.word	0x1ffe92d8
 8009e44:	1fff47fc 	.word	0x1fff47fc
 8009e48:	1fff4800 	.word	0x1fff4800
 8009e4c:	1fff47f8 	.word	0x1fff47f8
 8009e50:	1ffe9300 	.word	0x1ffe9300

08009e54 <Update_CAN_0x0CF10121>:

void Update_CAN_0x0CF10121(void)
{
 8009e54:	b580      	push	{r7, lr}
 8009e56:	b084      	sub	sp, #16
 8009e58:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009e5a:	4b0f      	ldr	r3, [pc, #60]	; (8009e98 <Update_CAN_0x0CF10121+0x44>)
 8009e5c:	60fb      	str	r3, [r7, #12]

	// TO get the SOC percentage
	//Soc_perc = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];
	//calculate DTE
	//Dte = Soc_perc * 2U;
 	Dte = Bms_SOC * 2;
 8009e5e:	4b0f      	ldr	r3, [pc, #60]	; (8009e9c <Update_CAN_0x0CF10121+0x48>)
 8009e60:	881b      	ldrh	r3, [r3, #0]
 8009e62:	005b      	lsls	r3, r3, #1
 8009e64:	817b      	strh	r3, [r7, #10]
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FOURTH_BYTE] = Dte;
 8009e66:	897b      	ldrh	r3, [r7, #10]
 8009e68:	b2da      	uxtb	r2, r3
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	; (8009ea0 <Update_CAN_0x0CF10121+0x4c>)
 8009e6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FIFTH_BYTE] = (Dte >> 8);
 8009e70:	897b      	ldrh	r3, [r7, #10]
 8009e72:	0a1b      	lsrs	r3, r3, #8
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	b2da      	uxtb	r2, r3
 8009e78:	4b09      	ldr	r3, [pc, #36]	; (8009ea0 <Update_CAN_0x0CF10121+0x4c>)
 8009e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	tempData = &CAN_MSG_DB[CAN_0CF10121].CAN_Data[ZERO_BYTE];
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <Update_CAN_0x0CF10121+0x50>)
 8009e80:	607b      	str	r3, [r7, #4]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF10121], tempData);
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	69db      	ldr	r3, [r3, #28]
 8009e86:	4618      	mov	r0, r3
 8009e88:	6879      	ldr	r1, [r7, #4]
 8009e8a:	f7fe fd73 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	70fb      	strb	r3, [r7, #3]
	}
	else
	{
		// message object failed to update.
	}
}
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	08013870 	.word	0x08013870
 8009e9c:	1fff48c0 	.word	0x1fff48c0
 8009ea0:	1ffe92d8 	.word	0x1ffe92d8
 8009ea4:	1ffe930c 	.word	0x1ffe930c

08009ea8 <Update_CAN_0x18FEEE00>:

void Update_CAN_0x18FEEE00(void)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b084      	sub	sp, #16
 8009eac:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009eae:	4b07      	ldr	r3, [pc, #28]	; (8009ecc <Update_CAN_0x18FEEE00+0x24>)
 8009eb0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FEEE00].CAN_Data[ZERO_BYTE];
 8009eb2:	4b07      	ldr	r3, [pc, #28]	; (8009ed0 <Update_CAN_0x18FEEE00+0x28>)
 8009eb4:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FEEE00], tempData);
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	6a1b      	ldr	r3, [r3, #32]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	68b9      	ldr	r1, [r7, #8]
 8009ebe:	f7fe fd59 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009ec6:	3710      	adds	r7, #16
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	bd80      	pop	{r7, pc}
 8009ecc:	08013870 	.word	0x08013870
 8009ed0:	1ffe9318 	.word	0x1ffe9318

08009ed4 <Update_CAN_0x18FF2021>:

void Update_CAN_0x18FF2021(void)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009eda:	4b07      	ldr	r3, [pc, #28]	; (8009ef8 <Update_CAN_0x18FF2021+0x24>)
 8009edc:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2021].CAN_Data[ZERO_BYTE];
 8009ede:	4b07      	ldr	r3, [pc, #28]	; (8009efc <Update_CAN_0x18FF2021+0x28>)
 8009ee0:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF2021], tempData);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	68b9      	ldr	r1, [r7, #8]
 8009eea:	f7fe fd43 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009ef2:	3710      	adds	r7, #16
 8009ef4:	46bd      	mov	sp, r7
 8009ef6:	bd80      	pop	{r7, pc}
 8009ef8:	08013870 	.word	0x08013870
 8009efc:	1ffe9324 	.word	0x1ffe9324

08009f00 <Update_CAN_0x18FF2121>:

void Update_CAN_0x18FF2121(void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009f06:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <Update_CAN_0x18FF2121+0x38>)
 8009f08:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[ZERO_BYTE];
 8009f0a:	4b0c      	ldr	r3, [pc, #48]	; (8009f3c <Update_CAN_0x18FF2121+0x3c>)
 8009f0c:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[29],tempData);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f14:	4618      	mov	r0, r3
 8009f16:	68b9      	ldr	r1, [r7, #8]
 8009f18:	f7fe fd2c 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 8009f20:	79fb      	ldrb	r3, [r7, #7]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d105      	bne.n	8009f32 <Update_CAN_0x18FF2121+0x32>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[29]);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe fcfd 	bl	800892c <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}
 8009f38:	08013870 	.word	0x08013870
 8009f3c:	1ffe9330 	.word	0x1ffe9330

08009f40 <Update_CAN_0x18FED911>:

void Update_CAN_0x18FED911(void)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <Update_CAN_0x18FED911+0x34>)
 8009f48:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FED911].CAN_Data[ZERO_BYTE];
 8009f4a:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <Update_CAN_0x18FED911+0x38>)
 8009f4c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[15],tempData);
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f52:	4618      	mov	r0, r3
 8009f54:	68b9      	ldr	r1, [r7, #8]
 8009f56:	f7fe fd0d 	bl	8008974 <CAN_NODE_MO_UpdateData>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 8009f5e:	79fb      	ldrb	r3, [r7, #7]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <Update_CAN_0x18FED911+0x2e>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[15]);
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f7fe fcdf 	bl	800892c <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	08013870 	.word	0x08013870
 8009f78:	1ffe933c 	.word	0x1ffe933c

08009f7c <CAN_OUTPUT_CLUSTER>:


void CAN_OUTPUT_CLUSTER()
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009f82:	4b25      	ldr	r3, [pc, #148]	; (800a018 <CAN_OUTPUT_CLUSTER+0x9c>)
 8009f84:	60bb      	str	r3, [r7, #8]
	CAN_NODE_STATUS_t mo_tranmit_status;
	CAN_NODE_STATUS_t status;
	uint16_t msg_count;

	/* update all message's data */
	Update_CAN_0x18FF0921();
 8009f86:	f7ff fee3 	bl	8009d50 <Update_CAN_0x18FF0921>
	Update_CAN_0x0CF00400();
 8009f8a:	f7ff fef7 	bl	8009d7c <Update_CAN_0x0CF00400>
	Update_CAN_0x18FFC621();
 8009f8e:	f7ff ff0b 	bl	8009da8 <Update_CAN_0x18FFC621>
	Update_CAN_0x18FFB632();
 8009f92:	f7ff ff1f 	bl	8009dd4 <Update_CAN_0x18FFB632>
	Update_CAN_0x0CF10121();
 8009f96:	f7ff ff5d 	bl	8009e54 <Update_CAN_0x0CF10121>
	Update_CAN_0x18FEEE00();
 8009f9a:	f7ff ff85 	bl	8009ea8 <Update_CAN_0x18FEEE00>
	Update_CAN_0x18FF2021();
 8009f9e:	f7ff ff99 	bl	8009ed4 <Update_CAN_0x18FF2021>

/* will update separately */
	Update_CAN_0x18FF2121();
 8009fa2:	f7ff ffad 	bl	8009f00 <Update_CAN_0x18FF2121>
	Update_CAN_0x18FED911();
 8009fa6:	f7ff ffcb 	bl	8009f40 <Update_CAN_0x18FED911>
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 8009faa:	2300      	movs	r3, #0
 8009fac:	81fb      	strh	r3, [r7, #14]
 8009fae:	e02c      	b.n	800a00a <CAN_OUTPUT_CLUSTER+0x8e>
	{
		MO_Ptr = HandlePtr1->lmobj_ptr[msg_count]->mo_ptr;
 8009fb0:	89fb      	ldrh	r3, [r7, #14]
 8009fb2:	68ba      	ldr	r2, [r7, #8]
 8009fb4:	3302      	adds	r3, #2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	607b      	str	r3, [r7, #4]

		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[msg_count]);
 8009fc0:	89fb      	ldrh	r3, [r7, #14]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	3302      	adds	r3, #2
 8009fc6:	009b      	lsls	r3, r3, #2
 8009fc8:	4413      	add	r3, r2
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	4618      	mov	r0, r3
 8009fce:	f7fe fcad 	bl	800892c <CAN_NODE_MO_Transmit>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	70fb      	strb	r3, [r7, #3]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 8009fd6:	78fb      	ldrb	r3, [r7, #3]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d113      	bne.n	800a004 <CAN_OUTPUT_CLUSTER+0x88>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[msg_count]);	//msg_count, earlier it was 0 and working
 8009fdc:	89fb      	ldrh	r3, [r7, #14]
 8009fde:	68ba      	ldr	r2, [r7, #8]
 8009fe0:	3302      	adds	r3, #2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f7fe fce3 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 8009fee:	4603      	mov	r3, r0
 8009ff0:	70bb      	strb	r3, [r7, #2]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 8009ff2:	78bb      	ldrb	r3, [r7, #2]
 8009ff4:	f003 0302 	and.w	r3, r3, #2
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <CAN_OUTPUT_CLUSTER+0x88>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	2102      	movs	r1, #2
 800a000:	f7ff fe98 	bl	8009d34 <XMC_CAN_MO_ResetStatus>
	Update_CAN_0x18FF2121();
	Update_CAN_0x18FED911();
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a004:	89fb      	ldrh	r3, [r7, #14]
 800a006:	3301      	adds	r3, #1
 800a008:	81fb      	strh	r3, [r7, #14]
 800a00a:	89fb      	ldrh	r3, [r7, #14]
 800a00c:	2b06      	cmp	r3, #6
 800a00e:	d9cf      	bls.n	8009fb0 <CAN_OUTPUT_CLUSTER+0x34>
		else
		{
			// message object failed to transmit.
		}
	}
}
 800a010:	3710      	adds	r7, #16
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	08013870 	.word	0x08013870

0800a01c <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b083      	sub	sp, #12
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
 800a024:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	61da      	str	r2, [r3, #28]
}
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <Read_CAN_0x1E5>:

};


void Read_CAN_0x1E5(void)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b084      	sub	sp, #16
 800a03c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a03e:	4b1c      	ldr	r3, [pc, #112]	; (800a0b0 <Read_CAN_0x1E5+0x78>)
 800a040:	60fb      	str	r3, [r7, #12]

	mo_index = 15;//CAN_RX_MO_HVAC_BASE + CAN_0x248;
 800a042:	230f      	movs	r3, #15
 800a044:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a046:	7afb      	ldrb	r3, [r7, #11]
 800a048:	68fa      	ldr	r2, [r7, #12]
 800a04a:	3302      	adds	r3, #2
 800a04c:	009b      	lsls	r3, r3, #2
 800a04e:	4413      	add	r3, r2
 800a050:	685b      	ldr	r3, [r3, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a056:	7afb      	ldrb	r3, [r7, #11]
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	3302      	adds	r3, #2
 800a05c:	009b      	lsls	r3, r3, #2
 800a05e:	4413      	add	r3, r2
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fca6 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a068:	4603      	mov	r3, r0
 800a06a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a06c:	78fb      	ldrb	r3, [r7, #3]
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d016      	beq.n	800a0a4 <Read_CAN_0x1E5+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	2101      	movs	r1, #1
 800a07a:	f7ff ffcf 	bl	800a01c <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	3302      	adds	r3, #2
 800a084:	009b      	lsls	r3, r3, #2
 800a086:	4413      	add	r3, r2
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	4618      	mov	r0, r3
 800a08c:	f7fe fc60 	bl	8008950 <CAN_NODE_MO_Receive>
 800a090:	4603      	mov	r3, r0
 800a092:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a094:	78bb      	ldrb	r3, [r7, #2]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d102      	bne.n	800a0a0 <Read_CAN_0x1E5+0x68>
		{
			// message object receive success.
			test = 1;
 800a09a:	2301      	movs	r3, #1
 800a09c:	707b      	strb	r3, [r7, #1]
 800a09e:	e001      	b.n	800a0a4 <Read_CAN_0x1E5+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x1E5();
 800a0a4:	f000 f8b6 	bl	800a214 <Process_Read_CAN_0x1E5>
}
 800a0a8:	3710      	adds	r7, #16
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bd80      	pop	{r7, pc}
 800a0ae:	bf00      	nop
 800a0b0:	08013a58 	.word	0x08013a58

0800a0b4 <update_id0x4c5>:


void update_id0x4c5()
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b084      	sub	sp, #16
 800a0b8:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a0ba:	4b0f      	ldr	r3, [pc, #60]	; (800a0f8 <update_id0x4c5+0x44>)
 800a0bc:	60fb      	str	r3, [r7, #12]
	   // uint8_t can_data_arr[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
	    uint8_t *array_data;

	    eps_n[can_0x4c5].can_matrix[0] = 0x01;
 800a0be:	4b0f      	ldr	r3, [pc, #60]	; (800a0fc <update_id0x4c5+0x48>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	    eps_n[can_0x4c5].can_matrix[1] = 0x28;
 800a0c6:	4b0d      	ldr	r3, [pc, #52]	; (800a0fc <update_id0x4c5+0x48>)
 800a0c8:	2228      	movs	r2, #40	; 0x28
 800a0ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	    array_data = &eps_n[can_0x4c5].can_matrix[0];
 800a0ce:	4b0c      	ldr	r3, [pc, #48]	; (800a100 <update_id0x4c5+0x4c>)
 800a0d0:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[10],array_data);
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	68b9      	ldr	r1, [r7, #8]
 800a0da:	f7fe fc4b 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	71fb      	strb	r3, [r7, #7]

	       if (status == CAN_NODE_STATUS_SUCCESS)
 800a0e2:	79fb      	ldrb	r3, [r7, #7]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d104      	bne.n	800a0f2 <update_id0x4c5+0x3e>
	       {
	         // message object data updated.

	         // transmit the data
	         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[10]);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f7fe fc1d 	bl	800892c <CAN_NODE_MO_Transmit>
	       }
	       else
	       {
	         // message object failed to update.
	       }
}
 800a0f2:	3710      	adds	r7, #16
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	bd80      	pop	{r7, pc}
 800a0f8:	08013a58 	.word	0x08013a58
 800a0fc:	1ffe9344 	.word	0x1ffe9344
 800a100:	1ffe9384 	.word	0x1ffe9384

0800a104 <map>:
	       }
}


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800a104:	b480      	push	{r7}
 800a106:	b087      	sub	sp, #28
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
 800a110:	603b      	str	r3, [r7, #0]
	long ans;

  ans = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	1ad3      	subs	r3, r2, r3
 800a118:	6a39      	ldr	r1, [r7, #32]
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	1a8a      	subs	r2, r1, r2
 800a11e:	fb02 f203 	mul.w	r2, r2, r3
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	1acb      	subs	r3, r1, r3
 800a128:	fb92 f2f3 	sdiv	r2, r2, r3
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	4413      	add	r3, r2
 800a130:	617b      	str	r3, [r7, #20]

  if(ans > out_max)
 800a132:	697a      	ldr	r2, [r7, #20]
 800a134:	6a3b      	ldr	r3, [r7, #32]
 800a136:	429a      	cmp	r2, r3
 800a138:	dd02      	ble.n	800a140 <map+0x3c>
	  ans = out_max;
 800a13a:	6a3b      	ldr	r3, [r7, #32]
 800a13c:	617b      	str	r3, [r7, #20]
 800a13e:	e005      	b.n	800a14c <map+0x48>

  else if(ans < out_min)
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	429a      	cmp	r2, r3
 800a146:	da01      	bge.n	800a14c <map+0x48>
	  ans = out_min;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	617b      	str	r3, [r7, #20]

  return ans;
 800a14c:	697b      	ldr	r3, [r7, #20]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	371c      	adds	r7, #28
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr
 800a15a:	bf00      	nop

0800a15c <update_id0x36a>:
  return ans;
}


void update_id0x36a()
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af02      	add	r7, sp, #8
	CAN_NODE_STATUS_t status;
		    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a162:	4b27      	ldr	r3, [pc, #156]	; (800a200 <update_id0x36a+0xa4>)
 800a164:	60fb      	str	r3, [r7, #12]




		   // current_rpm = 10000;
		    current_rpm = current_rpm * 1 - 16384U;
 800a166:	4b27      	ldr	r3, [pc, #156]	; (800a204 <update_id0x36a+0xa8>)
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a16e:	b29a      	uxth	r2, r3
 800a170:	4b24      	ldr	r3, [pc, #144]	; (800a204 <update_id0x36a+0xa8>)
 800a172:	801a      	strh	r2, [r3, #0]

		    vspeed = vspeed * 0.015625;*/

		   // map(x, 0, 100, 0, 0x19);

		    eps_n[can_0x36a].can_matrix[1] = 0x5f;
 800a174:	4b24      	ldr	r3, [pc, #144]	; (800a208 <update_id0x36a+0xac>)
 800a176:	225f      	movs	r2, #95	; 0x5f
 800a178:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


		   /* eps_n[can_0x36a].can_matrix[2] =(0x00 | ((vspeed & 0x00ff) >> 1));
		    eps_n[can_0x36a].can_matrix[3] =(vspeed >> 8);*/
		    eps_n[can_0x36a].can_matrix[2] = map(vspeed, 0, 80, 0, 0x19);
 800a17c:	4b23      	ldr	r3, [pc, #140]	; (800a20c <update_id0x36a+0xb0>)
 800a17e:	881b      	ldrh	r3, [r3, #0]
 800a180:	461a      	mov	r2, r3
 800a182:	2319      	movs	r3, #25
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	4610      	mov	r0, r2
 800a188:	2100      	movs	r1, #0
 800a18a:	2250      	movs	r2, #80	; 0x50
 800a18c:	2300      	movs	r3, #0
 800a18e:	f7ff ffb9 	bl	800a104 <map>
 800a192:	4603      	mov	r3, r0
 800a194:	b2da      	uxtb	r2, r3
 800a196:	4b1c      	ldr	r3, [pc, #112]	; (800a208 <update_id0x36a+0xac>)
 800a198:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		    eps_n[can_0x36a].can_matrix[3] = 0x00;//(vspeed >> 8);
 800a19c:	4b1a      	ldr	r3, [pc, #104]	; (800a208 <update_id0x36a+0xac>)
 800a19e:	2200      	movs	r2, #0
 800a1a0:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f


		    eps_n[can_0x36a].can_matrix[4] = (0x00 | ((current_rpm & 0x00ff) >> 1));
 800a1a4:	4b17      	ldr	r3, [pc, #92]	; (800a204 <update_id0x36a+0xa8>)
 800a1a6:	881b      	ldrh	r3, [r3, #0]
 800a1a8:	b2db      	uxtb	r3, r3
 800a1aa:	105b      	asrs	r3, r3, #1
 800a1ac:	b2da      	uxtb	r2, r3
 800a1ae:	4b16      	ldr	r3, [pc, #88]	; (800a208 <update_id0x36a+0xac>)
 800a1b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			eps_n[can_0x36a].can_matrix[5] = (current_rpm >> 8);
 800a1b4:	4b13      	ldr	r3, [pc, #76]	; (800a204 <update_id0x36a+0xa8>)
 800a1b6:	881b      	ldrh	r3, [r3, #0]
 800a1b8:	0a1b      	lsrs	r3, r3, #8
 800a1ba:	b29b      	uxth	r3, r3
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	4b12      	ldr	r3, [pc, #72]	; (800a208 <update_id0x36a+0xac>)
 800a1c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51



			eps_n[can_0x36a].can_matrix[6] = 0x40;
 800a1c4:	4b10      	ldr	r3, [pc, #64]	; (800a208 <update_id0x36a+0xac>)
 800a1c6:	2240      	movs	r2, #64	; 0x40
 800a1c8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			eps_n[can_0x36a].can_matrix[7] = 0x80;
 800a1cc:	4b0e      	ldr	r3, [pc, #56]	; (800a208 <update_id0x36a+0xac>)
 800a1ce:	2280      	movs	r2, #128	; 0x80
 800a1d0:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		    array_data = &eps_n[can_0x36a].can_matrix[0];
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <update_id0x36a+0xb4>)
 800a1d6:	60bb      	str	r3, [r7, #8]

		 //  update data for the MO to transmit
		       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[11],array_data);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1dc:	4618      	mov	r0, r3
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	f7fe fbc8 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	71fb      	strb	r3, [r7, #7]

		       if (status == CAN_NODE_STATUS_SUCCESS)
 800a1e8:	79fb      	ldrb	r3, [r7, #7]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d104      	bne.n	800a1f8 <update_id0x36a+0x9c>
		       {
		         // message object data updated.

		         // transmit the data
		         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[11]);
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7fe fb9a 	bl	800892c <CAN_NODE_MO_Transmit>
		       }
		       else
		       {
		         // message object failed to update.
		       }
}
 800a1f8:	3710      	adds	r7, #16
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	08013a58 	.word	0x08013a58
 800a204:	1fff522c 	.word	0x1fff522c
 800a208:	1ffe9344 	.word	0x1ffe9344
 800a20c:	1fff522a 	.word	0x1fff522a
 800a210:	1ffe9390 	.word	0x1ffe9390

0800a214 <Process_Read_CAN_0x1E5>:

void Process_Read_CAN_0x1E5(void)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b084      	sub	sp, #16
 800a218:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a21a:	4b09      	ldr	r3, [pc, #36]	; (800a240 <Process_Read_CAN_0x1E5+0x2c>)
 800a21c:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a21e:	2318      	movs	r3, #24
 800a220:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[can_0x1E5].CAN_Data[0];
 800a222:	4b08      	ldr	r3, [pc, #32]	; (800a244 <Process_Read_CAN_0x1E5+0x30>)
 800a224:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a226:	7afb      	ldrb	r3, [r7, #11]
 800a228:	68fa      	ldr	r2, [r7, #12]
 800a22a:	3302      	adds	r3, #2
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	4618      	mov	r0, r3
 800a234:	6879      	ldr	r1, [r7, #4]
 800a236:	f000 fa4f 	bl	800a6d8 <CAN_NODE_MO_ReadData>
}
 800a23a:	3710      	adds	r7, #16
 800a23c:	46bd      	mov	sp, r7
 800a23e:	bd80      	pop	{r7, pc}
 800a240:	08013a58 	.word	0x08013a58
 800a244:	1ffe9258 	.word	0x1ffe9258

0800a248 <CAN_OUTPUT_EPS>:

void CAN_OUTPUT_EPS(void)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	af00      	add	r7, sp, #0
	update_id0x4c5();
 800a24c:	f7ff ff32 	bl	800a0b4 <update_id0x4c5>
	//update_id0x17d();
	update_id0x36a();
 800a250:	f7ff ff84 	bl	800a15c <update_id0x36a>
}
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop

0800a258 <CAN_Read_EPS>:

void CAN_Read_EPS(void)
{
 800a258:	b580      	push	{r7, lr}
 800a25a:	af00      	add	r7, sp, #0
	Read_CAN_0x1E5();
 800a25c:	f7ff feec 	bl	800a038 <Read_CAN_0x1E5>
}
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop

0800a264 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	2201      	movs	r2, #1
 800a274:	409a      	lsls	r2, r3
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	605a      	str	r2, [r3, #4]
}
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a284:	b480      	push	{r7}
 800a286:	b083      	sub	sp, #12
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	460b      	mov	r3, r1
 800a28e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800a290:	78fb      	ldrb	r3, [r7, #3]
 800a292:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a296:	409a      	lsls	r2, r3
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	605a      	str	r2, [r3, #4]
}
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop

0800a2a8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b082      	sub	sp, #8
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681a      	ldr	r2, [r3, #0]
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	7c1b      	ldrb	r3, [r3, #16]
 800a2b8:	4610      	mov	r0, r2
 800a2ba:	4619      	mov	r1, r3
 800a2bc:	f7ff ffd2 	bl	800a264 <XMC_GPIO_SetOutputHigh>
}
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop

0800a2c8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b082      	sub	sp, #8
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681a      	ldr	r2, [r3, #0]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	7c1b      	ldrb	r3, [r3, #16]
 800a2d8:	4610      	mov	r0, r2
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f7ff ffd2 	bl	800a284 <XMC_GPIO_SetOutputLow>
}
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}
 800a2e6:	bf00      	nop

0800a2e8 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b083      	sub	sp, #12
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	61da      	str	r2, [r3, #28]
}
 800a2fa:	370c      	adds	r7, #12
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <Process_Read_CAN_0x100>:
		{0x8000530, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0} //Tx
};


void Process_Read_CAN_0x100(void)
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b084      	sub	sp, #16
 800a308:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a30a:	4b09      	ldr	r3, [pc, #36]	; (800a330 <Process_Read_CAN_0x100+0x2c>)
 800a30c:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a30e:	2301      	movs	r3, #1
 800a310:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[ZERO_BYTE];
 800a312:	4b08      	ldr	r3, [pc, #32]	; (800a334 <Process_Read_CAN_0x100+0x30>)
 800a314:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a316:	7afb      	ldrb	r3, [r7, #11]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	3302      	adds	r3, #2
 800a31c:	009b      	lsls	r3, r3, #2
 800a31e:	4413      	add	r3, r2
 800a320:	685b      	ldr	r3, [r3, #4]
 800a322:	4618      	mov	r0, r3
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	f000 f9d7 	bl	800a6d8 <CAN_NODE_MO_ReadData>
}
 800a32a:	3710      	adds	r7, #16
 800a32c:	46bd      	mov	sp, r7
 800a32e:	bd80      	pop	{r7, pc}
 800a330:	08013a58 	.word	0x08013a58
 800a334:	1ffe93b4 	.word	0x1ffe93b4

0800a338 <Read_CAN_0x100>:

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
}
void Read_CAN_0x100(void)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a33e:	4b1c      	ldr	r3, [pc, #112]	; (800a3b0 <Read_CAN_0x100+0x78>)
 800a340:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a342:	2301      	movs	r3, #1
 800a344:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a346:	7afb      	ldrb	r3, [r7, #11]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	3302      	adds	r3, #2
 800a34c:	009b      	lsls	r3, r3, #2
 800a34e:	4413      	add	r3, r2
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a356:	7afb      	ldrb	r3, [r7, #11]
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	3302      	adds	r3, #2
 800a35c:	009b      	lsls	r3, r3, #2
 800a35e:	4413      	add	r3, r2
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	4618      	mov	r0, r3
 800a364:	f7fe fb26 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a368:	4603      	mov	r3, r0
 800a36a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a36c:	78fb      	ldrb	r3, [r7, #3]
 800a36e:	f003 0301 	and.w	r3, r3, #1
 800a372:	2b00      	cmp	r3, #0
 800a374:	d016      	beq.n	800a3a4 <Read_CAN_0x100+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a376:	6878      	ldr	r0, [r7, #4]
 800a378:	2101      	movs	r1, #1
 800a37a:	f7ff ffb5 	bl	800a2e8 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a37e:	7afb      	ldrb	r3, [r7, #11]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	3302      	adds	r3, #2
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4413      	add	r3, r2
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	4618      	mov	r0, r3
 800a38c:	f7fe fae0 	bl	8008950 <CAN_NODE_MO_Receive>
 800a390:	4603      	mov	r3, r0
 800a392:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a394:	78bb      	ldrb	r3, [r7, #2]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d102      	bne.n	800a3a0 <Read_CAN_0x100+0x68>
		{
			// message object receive success.
			test = 1;
 800a39a:	2301      	movs	r3, #1
 800a39c:	707b      	strb	r3, [r7, #1]
 800a39e:	e001      	b.n	800a3a4 <Read_CAN_0x100+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x100();
 800a3a4:	f7ff ffae 	bl	800a304 <Process_Read_CAN_0x100>
}
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
 800a3ae:	bf00      	nop
 800a3b0:	08013a58 	.word	0x08013a58

0800a3b4 <Read_CAN_Hifire_0x8000250>:
	Process_Read_CAN_0x248();
}

//hifire
void Read_CAN_Hifire_0x8000250(void)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b084      	sub	sp, #16
 800a3b8:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a3ba:	4b1c      	ldr	r3, [pc, #112]	; (800a42c <Read_CAN_Hifire_0x8000250+0x78>)
 800a3bc:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a3be:	2308      	movs	r3, #8
 800a3c0:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a3c2:	7afb      	ldrb	r3, [r7, #11]
 800a3c4:	68fa      	ldr	r2, [r7, #12]
 800a3c6:	3302      	adds	r3, #2
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4413      	add	r3, r2
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a3d2:	7afb      	ldrb	r3, [r7, #11]
 800a3d4:	68fa      	ldr	r2, [r7, #12]
 800a3d6:	3302      	adds	r3, #2
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	4413      	add	r3, r2
 800a3dc:	685b      	ldr	r3, [r3, #4]
 800a3de:	4618      	mov	r0, r3
 800a3e0:	f7fe fae8 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a3e8:	78fb      	ldrb	r3, [r7, #3]
 800a3ea:	f003 0301 	and.w	r3, r3, #1
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d016      	beq.n	800a420 <Read_CAN_Hifire_0x8000250+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	2101      	movs	r1, #1
 800a3f6:	f7ff ff77 	bl	800a2e8 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	68fa      	ldr	r2, [r7, #12]
 800a3fe:	3302      	adds	r3, #2
 800a400:	009b      	lsls	r3, r3, #2
 800a402:	4413      	add	r3, r2
 800a404:	685b      	ldr	r3, [r3, #4]
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe faa2 	bl	8008950 <CAN_NODE_MO_Receive>
 800a40c:	4603      	mov	r3, r0
 800a40e:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a410:	78bb      	ldrb	r3, [r7, #2]
 800a412:	2b00      	cmp	r3, #0
 800a414:	d102      	bne.n	800a41c <Read_CAN_Hifire_0x8000250+0x68>
		{
			// message object receive success.
			test = 1;
 800a416:	2301      	movs	r3, #1
 800a418:	707b      	strb	r3, [r7, #1]
 800a41a:	e001      	b.n	800a420 <Read_CAN_Hifire_0x8000250+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a41c:	2300      	movs	r3, #0
 800a41e:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_CAN_Hifire_0x8000250();
 800a420:	f000 f806 	bl	800a430 <Process_CAN_Hifire_0x8000250>
}
 800a424:	3710      	adds	r7, #16
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	08013870 	.word	0x08013870

0800a430 <Process_CAN_Hifire_0x8000250>:

//hifire
void Process_CAN_Hifire_0x8000250(void)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a436:	4b11      	ldr	r3, [pc, #68]	; (800a47c <Process_CAN_Hifire_0x8000250+0x4c>)
 800a438:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a43a:	2308      	movs	r3, #8
 800a43c:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[ZERO_BYTE];
 800a43e:	4b10      	ldr	r3, [pc, #64]	; (800a480 <Process_CAN_Hifire_0x8000250+0x50>)
 800a440:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a442:	7afb      	ldrb	r3, [r7, #11]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	3302      	adds	r3, #2
 800a448:	009b      	lsls	r3, r3, #2
 800a44a:	4413      	add	r3, r2
 800a44c:	685b      	ldr	r3, [r3, #4]
 800a44e:	4618      	mov	r0, r3
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	f000 f941 	bl	800a6d8 <CAN_NODE_MO_ReadData>

	//get the error code
	 uint8_t error_code = (0x0F & (CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[4]));
 800a456:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <Process_CAN_Hifire_0x8000250+0x54>)
 800a458:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a45c:	f003 030f 	and.w	r3, r3, #15
 800a460:	70fb      	strb	r3, [r7, #3]

	if(0x00 != error_code)
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d003      	beq.n	800a470 <Process_CAN_Hifire_0x8000250+0x40>
	{
		error_compressor = 0x1;
 800a468:	4b07      	ldr	r3, [pc, #28]	; (800a488 <Process_CAN_Hifire_0x8000250+0x58>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	701a      	strb	r2, [r3, #0]
 800a46e:	e002      	b.n	800a476 <Process_CAN_Hifire_0x8000250+0x46>
	}
	else
	{
		error_compressor = 0x0;
 800a470:	4b05      	ldr	r3, [pc, #20]	; (800a488 <Process_CAN_Hifire_0x8000250+0x58>)
 800a472:	2200      	movs	r2, #0
 800a474:	701a      	strb	r2, [r3, #0]
	}
}
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	08013870 	.word	0x08013870
 800a480:	1ffe93cc 	.word	0x1ffe93cc
 800a484:	1ffe93a4 	.word	0x1ffe93a4
 800a488:	1fff5228 	.word	0x1fff5228
 800a48c:	00000000 	.word	0x00000000

0800a490 <Process_CAN_0x100>:

void Process_CAN_0x100(void)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b084      	sub	sp, #16
 800a494:	af00      	add	r7, sp, #0
	float pressure_in, voltage_psi;
	float pressure_value;
	uint8_t TempDegreeC;
	uint8_t AC_ON=1;
 800a496:	2301      	movs	r3, #1
 800a498:	73fb      	strb	r3, [r7, #15]
	static uint8_t condenser_on = 0x00;

	//get the temperature
	TempDegreeC = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0];
 800a49a:	4b5f      	ldr	r3, [pc, #380]	; (800a618 <Process_CAN_0x100+0x188>)
 800a49c:	7c1b      	ldrb	r3, [r3, #16]
 800a49e:	73bb      	strb	r3, [r7, #14]
	//get the pressure
	pressure_in = (float) CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1];
 800a4a0:	4b5d      	ldr	r3, [pc, #372]	; (800a618 <Process_CAN_0x100+0x188>)
 800a4a2:	7c5b      	ldrb	r3, [r3, #17]
 800a4a4:	ee07 3a90 	vmov	s15, r3
 800a4a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4ac:	edc7 7a02 	vstr	s15, [r7, #8]
	//get the AC switch input
	AC_ON_4g = AC_ON = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800a4b0:	4b59      	ldr	r3, [pc, #356]	; (800a618 <Process_CAN_0x100+0x188>)
 800a4b2:	7c9b      	ldrb	r3, [r3, #18]
 800a4b4:	73fb      	strb	r3, [r7, #15]
 800a4b6:	7bfb      	ldrb	r3, [r7, #15]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	bf14      	ite	ne
 800a4bc:	2301      	movne	r3, #1
 800a4be:	2300      	moveq	r3, #0
 800a4c0:	b2da      	uxtb	r2, r3
 800a4c2:	4b56      	ldr	r3, [pc, #344]	; (800a61c <Process_CAN_0x100+0x18c>)
 800a4c4:	701a      	strb	r2, [r3, #0]

	//AC is ON when AC_ON == 0
	//now ac is on when == 1
	//AC_ON = 1;
	if(0x01 == AC_ON)
 800a4c6:	7bfb      	ldrb	r3, [r7, #15]
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	d15f      	bne.n	800a58c <Process_CAN_0x100+0xfc>
	{
		//convert the temperature to rpm
		if(TempDegreeC <= 28)
 800a4cc:	7bbb      	ldrb	r3, [r7, #14]
 800a4ce:	2b1c      	cmp	r3, #28
 800a4d0:	d813      	bhi.n	800a4fa <Process_CAN_0x100+0x6a>
		{
//			rpm = (uint16_t)(((-200) * (int32_t)TempDegreeC) + 9100);        //from line eqn relating temperature to rpm

			//hifire
			rpm = (uint16_t)(((-170) * (int32_t)TempDegreeC) + 8220);        //from line eqn relating temperature to rpm
 800a4d2:	7bbb      	ldrb	r3, [r7, #14]
 800a4d4:	b29b      	uxth	r3, r3
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	0092      	lsls	r2, r2, #2
 800a4da:	4413      	add	r3, r2
 800a4dc:	461a      	mov	r2, r3
 800a4de:	0111      	lsls	r1, r2, #4
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	4413      	add	r3, r2
 800a4e6:	005b      	lsls	r3, r3, #1
 800a4e8:	425b      	negs	r3, r3
 800a4ea:	b29b      	uxth	r3, r3
 800a4ec:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a4f0:	331c      	adds	r3, #28
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	4b4a      	ldr	r3, [pc, #296]	; (800a620 <Process_CAN_0x100+0x190>)
 800a4f6:	801a      	strh	r2, [r3, #0]
 800a4f8:	e006      	b.n	800a508 <Process_CAN_0x100+0x78>
			if(Vcu_InPuts.IGNITION_1_IN)
			{//ptc turn off//
				//DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}
		else if (TempDegreeC > 28)
 800a4fa:	7bbb      	ldrb	r3, [r7, #14]
 800a4fc:	2b1c      	cmp	r3, #28
 800a4fe:	d903      	bls.n	800a508 <Process_CAN_0x100+0x78>
		{
			rpm = 2500;
 800a500:	4b47      	ldr	r3, [pc, #284]	; (800a620 <Process_CAN_0x100+0x190>)
 800a502:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a506:	801a      	strh	r2, [r3, #0]
			//DIGITAL_IO_SetOutputHigh(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}

		//calculate pressure value in megaPascal
		voltage_psi = pressure_in * (5.0/1023.0);
 800a508:	68b8      	ldr	r0, [r7, #8]
 800a50a:	f006 fa21 	bl	8010950 <__aeabi_f2d>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4610      	mov	r0, r2
 800a514:	4619      	mov	r1, r3
 800a516:	a338      	add	r3, pc, #224	; (adr r3, 800a5f8 <Process_CAN_0x100+0x168>)
 800a518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a51c:	f006 fa6c 	bl	80109f8 <__aeabi_dmul>
 800a520:	4602      	mov	r2, r0
 800a522:	460b      	mov	r3, r1
 800a524:	4610      	mov	r0, r2
 800a526:	4619      	mov	r1, r3
 800a528:	f006 fd48 	bl	8010fbc <__aeabi_d2f>
 800a52c:	4603      	mov	r3, r0
 800a52e:	607b      	str	r3, [r7, #4]
		pressure_value = (voltage_psi - (0.02*5)) / (5*0.29665);
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f006 fa0d 	bl	8010950 <__aeabi_f2d>
 800a536:	4602      	mov	r2, r0
 800a538:	460b      	mov	r3, r1
 800a53a:	4610      	mov	r0, r2
 800a53c:	4619      	mov	r1, r3
 800a53e:	a330      	add	r3, pc, #192	; (adr r3, 800a600 <Process_CAN_0x100+0x170>)
 800a540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a544:	f006 f8a4 	bl	8010690 <__aeabi_dsub>
 800a548:	4602      	mov	r2, r0
 800a54a:	460b      	mov	r3, r1
 800a54c:	4610      	mov	r0, r2
 800a54e:	4619      	mov	r1, r3
 800a550:	a32d      	add	r3, pc, #180	; (adr r3, 800a608 <Process_CAN_0x100+0x178>)
 800a552:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a556:	f006 fb79 	bl	8010c4c <__aeabi_ddiv>
 800a55a:	4602      	mov	r2, r0
 800a55c:	460b      	mov	r3, r1
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	f006 fd2b 	bl	8010fbc <__aeabi_d2f>
 800a566:	4603      	mov	r3, r0
 800a568:	603b      	str	r3, [r7, #0]

		if(pressure_value >= HIGH_PRESSURE_mP)
 800a56a:	6838      	ldr	r0, [r7, #0]
 800a56c:	f006 f9f0 	bl	8010950 <__aeabi_f2d>
 800a570:	4602      	mov	r2, r0
 800a572:	460b      	mov	r3, r1
 800a574:	4610      	mov	r0, r2
 800a576:	4619      	mov	r1, r3
 800a578:	a325      	add	r3, pc, #148	; (adr r3, 800a610 <Process_CAN_0x100+0x180>)
 800a57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57e:	f006 fcc1 	bl	8010f04 <__aeabi_dcmpge>
 800a582:	4603      	mov	r3, r0
 800a584:	2b00      	cmp	r3, #0
 800a586:	d001      	beq.n	800a58c <Process_CAN_0x100+0xfc>
		{
			//AC_ON = 0x01; S
			AC_ON = 0x00; //make hole system off
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
//	CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1] = (rpm >> 8);

	//update CAN_MSG_DB_HVAC for 0x8000530 //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = 0x0b;        //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = 0xb8; //hifire
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = (rpm >> 8);//0x0b;        //hifire
 800a58c:	4b24      	ldr	r3, [pc, #144]	; (800a620 <Process_CAN_0x100+0x190>)
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	b29b      	uxth	r3, r3
 800a594:	b2da      	uxtb	r2, r3
 800a596:	4b20      	ldr	r3, [pc, #128]	; (800a618 <Process_CAN_0x100+0x188>)
 800a598:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = rpm;//0xb8; //hifire
 800a59c:	4b20      	ldr	r3, [pc, #128]	; (800a620 <Process_CAN_0x100+0x190>)
 800a59e:	881b      	ldrh	r3, [r3, #0]
 800a5a0:	b2da      	uxtb	r2, r3
 800a5a2:	4b1d      	ldr	r3, [pc, #116]	; (800a618 <Process_CAN_0x100+0x188>)
 800a5a4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[5] = 0x0F;       //hifire
 800a5a8:	4b1b      	ldr	r3, [pc, #108]	; (800a618 <Process_CAN_0x100+0x188>)
 800a5aa:	220f      	movs	r2, #15
 800a5ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	//error_compressor from 0x8000250
	if((0x01 == AC_ON) && (0x01 != error_compressor))
 800a5b0:	7bfb      	ldrb	r3, [r7, #15]
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d113      	bne.n	800a5de <Process_CAN_0x100+0x14e>
 800a5b6:	4b1b      	ldr	r3, [pc, #108]	; (800a624 <Process_CAN_0x100+0x194>)
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d00e      	beq.n	800a5de <Process_CAN_0x100+0x14e>
	{
		if(0x0 == condenser_on)
 800a5c0:	4b19      	ldr	r3, [pc, #100]	; (800a628 <Process_CAN_0x100+0x198>)
 800a5c2:	781b      	ldrb	r3, [r3, #0]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <Process_CAN_0x100+0x144>
//			DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
			//DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_1); // for
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			//	DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_2); // for compressor to on X
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
					   DIGITAL_IO_SetOutputHigh(&AC_RADIATOR_OUT_D); // for compressor to on
 800a5c8:	4818      	ldr	r0, [pc, #96]	; (800a62c <Process_CAN_0x100+0x19c>)
 800a5ca:	f7ff fe6d 	bl	800a2a8 <DIGITAL_IO_SetOutputHigh>

			condenser_on = 0x1;
 800a5ce:	4b16      	ldr	r3, [pc, #88]	; (800a628 <Process_CAN_0x100+0x198>)
 800a5d0:	2201      	movs	r2, #1
 800a5d2:	701a      	strb	r2, [r3, #0]
		}

		//turn AC ON
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x01;	//setting 24th bit of CAN_0x238
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x80;	//setting 7th bit of CAN_0x8000530 //hifire
 800a5d4:	4b10      	ldr	r3, [pc, #64]	; (800a618 <Process_CAN_0x100+0x188>)
 800a5d6:	2280      	movs	r2, #128	; 0x80
 800a5d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a5dc:	e009      	b.n	800a5f2 <Process_CAN_0x100+0x162>
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_1); // for
			//for(volatile int i = 0; i < 0xffff*4; i++);
		//if(DIGITAL_IO_GetInput(&IGNI_POS2_IN_D))
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_2);
		//if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			  DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);/// for compressor to turn off
 800a5de:	4813      	ldr	r0, [pc, #76]	; (800a62c <Process_CAN_0x100+0x19c>)
 800a5e0:	f7ff fe72 	bl	800a2c8 <DIGITAL_IO_SetOutputLow>
		condenser_on = 0x0;
 800a5e4:	4b10      	ldr	r3, [pc, #64]	; (800a628 <Process_CAN_0x100+0x198>)
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	701a      	strb	r2, [r3, #0]
		//}
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x00;
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x00; //hifire
 800a5ea:	4b0b      	ldr	r3, [pc, #44]	; (800a618 <Process_CAN_0x100+0x188>)
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
}
 800a5f2:	3710      	adds	r7, #16
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	40501405 	.word	0x40501405
 800a5fc:	3f740501 	.word	0x3f740501
 800a600:	9999999a 	.word	0x9999999a
 800a604:	3fb99999 	.word	0x3fb99999
 800a608:	5a1cac09 	.word	0x5a1cac09
 800a60c:	3ff7bb64 	.word	0x3ff7bb64
 800a610:	b851eb85 	.word	0xb851eb85
 800a614:	3ff7851e 	.word	0x3ff7851e
 800a618:	1ffe93a4 	.word	0x1ffe93a4
 800a61c:	1fff4810 	.word	0x1fff4810
 800a620:	1fff4484 	.word	0x1fff4484
 800a624:	1fff5228 	.word	0x1fff5228
 800a628:	1fff4486 	.word	0x1fff4486
 800a62c:	0801317c 	.word	0x0801317c

0800a630 <CAN_INPUT_HVAC>:
		// message object failed to update.
	}
}

void CAN_INPUT_HVAC(void)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	af00      	add	r7, sp, #0
	//read compressor to check error
	Read_CAN_Hifire_0x8000250();
 800a634:	f7ff febe 	bl	800a3b4 <Read_CAN_Hifire_0x8000250>
	Read_CAN_0x100();
 800a638:	f7ff fe7e 	bl	800a338 <Read_CAN_0x100>
	Process_CAN_0x100();
 800a63c:	f7ff ff28 	bl	800a490 <Process_CAN_0x100>
}
 800a640:	bd80      	pop	{r7, pc}
 800a642:	bf00      	nop

0800a644 <CAN_OUTPUT_COMPRESSOR>:

//for hifire
void CAN_OUTPUT_COMPRESSOR(void)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t mo_tranmit_status, status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a64a:	4b21      	ldr	r3, [pc, #132]	; (800a6d0 <CAN_OUTPUT_COMPRESSOR+0x8c>)
 800a64c:	617b      	str	r3, [r7, #20]
	uint8_t mo_index = 9;
 800a64e:	2309      	movs	r3, #9
 800a650:	74fb      	strb	r3, [r7, #19]
	XMC_CAN_MO_t *MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a652:	7cfb      	ldrb	r3, [r7, #19]
 800a654:	697a      	ldr	r2, [r7, #20]
 800a656:	3302      	adds	r3, #2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	4413      	add	r3, r2
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

	/* update message's data */
	uint8_t *tempData = &CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[ZERO_BYTE];
 800a662:	4b1c      	ldr	r3, [pc, #112]	; (800a6d4 <CAN_OUTPUT_COMPRESSOR+0x90>)
 800a664:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a666:	7cfb      	ldrb	r3, [r7, #19]
 800a668:	697a      	ldr	r2, [r7, #20]
 800a66a:	3302      	adds	r3, #2
 800a66c:	009b      	lsls	r3, r3, #2
 800a66e:	4413      	add	r3, r2
 800a670:	685b      	ldr	r3, [r3, #4]
 800a672:	4618      	mov	r0, r3
 800a674:	68b9      	ldr	r1, [r7, #8]
 800a676:	f7fe f97d 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a67a:	4603      	mov	r3, r0
 800a67c:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a67e:	79fb      	ldrb	r3, [r7, #7]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d121      	bne.n	800a6c8 <CAN_OUTPUT_COMPRESSOR+0x84>
	{
		// message object data updated.
		// transmit the data
		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[mo_index]);
 800a684:	7cfb      	ldrb	r3, [r7, #19]
 800a686:	697a      	ldr	r2, [r7, #20]
 800a688:	3302      	adds	r3, #2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	4413      	add	r3, r2
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	4618      	mov	r0, r3
 800a692:	f7fe f94b 	bl	800892c <CAN_NODE_MO_Transmit>
 800a696:	4603      	mov	r3, r0
 800a698:	71bb      	strb	r3, [r7, #6]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800a69a:	79bb      	ldrb	r3, [r7, #6]
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d113      	bne.n	800a6c8 <CAN_OUTPUT_COMPRESSOR+0x84>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);	//msg_count, earlier it was 0 and working
 800a6a0:	7cfb      	ldrb	r3, [r7, #19]
 800a6a2:	697a      	ldr	r2, [r7, #20]
 800a6a4:	3302      	adds	r3, #2
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	4413      	add	r3, r2
 800a6aa:	685b      	ldr	r3, [r3, #4]
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	f7fe f981 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	71fb      	strb	r3, [r7, #7]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800a6b6:	79fb      	ldrb	r3, [r7, #7]
 800a6b8:	f003 0302 	and.w	r3, r3, #2
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d003      	beq.n	800a6c8 <CAN_OUTPUT_COMPRESSOR+0x84>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	2102      	movs	r1, #2
 800a6c4:	f7ff fe10 	bl	800a2e8 <XMC_CAN_MO_ResetStatus>
	}
	else
	{
		// message object failed to update.
	}
}
 800a6c8:	3718      	adds	r7, #24
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	08013870 	.word	0x08013870
 800a6d4:	1ffe93d8 	.word	0x1ffe93d8

0800a6d8 <CAN_NODE_MO_ReadData>:
	  }
	}
}

void CAN_NODE_MO_ReadData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b085      	sub	sp, #20
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	73fb      	strb	r3, [r7, #15]
 800a6e6:	e00b      	b.n	800a700 <CAN_NODE_MO_ReadData+0x28>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
 800a6e8:	7bfb      	ldrb	r3, [r7, #15]
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	4413      	add	r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	6811      	ldr	r1, [r2, #0]
 800a6f2:	7bfa      	ldrb	r2, [r7, #15]
 800a6f4:	440a      	add	r2, r1
 800a6f6:	7c12      	ldrb	r2, [r2, #16]
 800a6f8:	701a      	strb	r2, [r3, #0]
{
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800a6fa:	7bfb      	ldrb	r3, [r7, #15]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	73fb      	strb	r3, [r7, #15]
 800a700:	7bfb      	ldrb	r3, [r7, #15]
 800a702:	2b07      	cmp	r3, #7
 800a704:	d9f0      	bls.n	800a6e8 <CAN_NODE_MO_ReadData+0x10>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
  }
}
 800a706:	3714      	adds	r7, #20
 800a708:	46bd      	mov	sp, r7
 800a70a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70e:	4770      	bx	lr

0800a710 <calculate_speed>:
	//perform the conversion and then store
	process_CAN_0xA6();
}

uint8_t calculate_speed(int16_t motor_rpm)
{
 800a710:	b5b0      	push	{r4, r5, r7, lr}
 800a712:	b086      	sub	sp, #24
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	80fb      	strh	r3, [r7, #6]
	const float PI = 3.14;
 800a71a:	4b2b      	ldr	r3, [pc, #172]	; (800a7c8 <calculate_speed+0xb8>)
 800a71c:	617b      	str	r3, [r7, #20]
	float kmph;
	uint8_t TempSpeed;
	float wheel_rpm;
	float MPS;

	float final_drive_ratio = 9.887;    //drive train ration 9.916 , 9.89109;
 800a71e:	4b2b      	ldr	r3, [pc, #172]	; (800a7cc <calculate_speed+0xbc>)
 800a720:	613b      	str	r3, [r7, #16]
	float SLR = 0.267; //static load radius
 800a722:	4b2b      	ldr	r3, [pc, #172]	; (800a7d0 <calculate_speed+0xc0>)
 800a724:	60fb      	str	r3, [r7, #12]

//	float wheel_dia_meters = 0.55;// for tyre under load
//	float wheel_circumference_meters = wheel_dia_meters * PI; // 0.001727-> wheel diameter = 0.55 meters
//	float wheel_circumference_km = wheel_circumference_meters / 1000.0;

	motor_rpm = abs(motor_rpm);
 800a726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	bfb8      	it	lt
 800a72e:	425b      	neglt	r3, r3
 800a730:	80fb      	strh	r3, [r7, #6]
		MPS = (2 * (PI) * wheel_rpm * SLR)/60;
		kmph = MPS * 3.6;

		TempSpeed = (uint8_t) kmph;*/

	motor_rpm = motor_rpm + (motor_rpm * (0.05));
 800a732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a736:	4618      	mov	r0, r3
 800a738:	f006 f8f8 	bl	801092c <__aeabi_i2d>
 800a73c:	4604      	mov	r4, r0
 800a73e:	460d      	mov	r5, r1
 800a740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a744:	4618      	mov	r0, r3
 800a746:	f006 f8f1 	bl	801092c <__aeabi_i2d>
 800a74a:	4602      	mov	r2, r0
 800a74c:	460b      	mov	r3, r1
 800a74e:	4610      	mov	r0, r2
 800a750:	4619      	mov	r1, r3
 800a752:	a319      	add	r3, pc, #100	; (adr r3, 800a7b8 <calculate_speed+0xa8>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f006 f94e 	bl	80109f8 <__aeabi_dmul>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4620      	mov	r0, r4
 800a762:	4629      	mov	r1, r5
 800a764:	f005 ff96 	bl	8010694 <__adddf3>
 800a768:	4602      	mov	r2, r0
 800a76a:	460b      	mov	r3, r1
 800a76c:	4610      	mov	r0, r2
 800a76e:	4619      	mov	r1, r3
 800a770:	f006 fbdc 	bl	8010f2c <__aeabi_d2iz>
 800a774:	4603      	mov	r3, r0
 800a776:	80fb      	strh	r3, [r7, #6]
	motor_rpm *= 0.010988;/* constant given by mukul*/
 800a778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a77c:	4618      	mov	r0, r3
 800a77e:	f006 f8d5 	bl	801092c <__aeabi_i2d>
 800a782:	4602      	mov	r2, r0
 800a784:	460b      	mov	r3, r1
 800a786:	4610      	mov	r0, r2
 800a788:	4619      	mov	r1, r3
 800a78a:	a30d      	add	r3, pc, #52	; (adr r3, 800a7c0 <calculate_speed+0xb0>)
 800a78c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a790:	f006 f932 	bl	80109f8 <__aeabi_dmul>
 800a794:	4602      	mov	r2, r0
 800a796:	460b      	mov	r3, r1
 800a798:	4610      	mov	r0, r2
 800a79a:	4619      	mov	r1, r3
 800a79c:	f006 fbc6 	bl	8010f2c <__aeabi_d2iz>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	80fb      	strh	r3, [r7, #6]
	TempSpeed = motor_rpm;
 800a7a4:	88fb      	ldrh	r3, [r7, #6]
 800a7a6:	72fb      	strb	r3, [r7, #11]

		return TempSpeed;
 800a7a8:	7afb      	ldrb	r3, [r7, #11]
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bdb0      	pop	{r4, r5, r7, pc}
 800a7b2:	bf00      	nop
 800a7b4:	f3af 8000 	nop.w
 800a7b8:	9999999a 	.word	0x9999999a
 800a7bc:	3fa99999 	.word	0x3fa99999
 800a7c0:	65300581 	.word	0x65300581
 800a7c4:	3f8680e0 	.word	0x3f8680e0
 800a7c8:	4048f5c3 	.word	0x4048f5c3
 800a7cc:	411e3127 	.word	0x411e3127
 800a7d0:	3e88b439 	.word	0x3e88b439
 800a7d4:	f3af 8000 	nop.w

0800a7d8 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b083      	sub	sp, #12
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	683a      	ldr	r2, [r7, #0]
 800a7e8:	61da      	str	r2, [r3, #28]
}
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <CAN_Tx_id0x10>:
		{0x33,{0x00}},
		{0x55,{0x00}}
};

void CAN_Tx_id0x10(void)
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a7fa:	4b0b      	ldr	r3, [pc, #44]	; (800a828 <CAN_Tx_id0x10+0x34>)
 800a7fc:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x10].CAN_Data[0];
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <CAN_Tx_id0x10+0x38>)
 800a800:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[16],array_data);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a806:	4618      	mov	r0, r3
 800a808:	68b9      	ldr	r1, [r7, #8]
 800a80a:	f7fe f8b3 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a80e:	4603      	mov	r3, r0
 800a810:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d104      	bne.n	800a822 <CAN_Tx_id0x10+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[16]);
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a81c:	4618      	mov	r0, r3
 800a81e:	f7fe f885 	bl	800892c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a822:	3710      	adds	r7, #16
 800a824:	46bd      	mov	sp, r7
 800a826:	bd80      	pop	{r7, pc}
 800a828:	08013a58 	.word	0x08013a58
 800a82c:	1ffe9444 	.word	0x1ffe9444

0800a830 <CAN_Tx_id0x20>:

void CAN_Tx_id0x20(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b084      	sub	sp, #16
 800a834:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <CAN_Tx_id0x20+0x34>)
 800a838:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x20].CAN_Data[0];
 800a83a:	4b0b      	ldr	r3, [pc, #44]	; (800a868 <CAN_Tx_id0x20+0x38>)
 800a83c:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[17],array_data);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a842:	4618      	mov	r0, r3
 800a844:	68b9      	ldr	r1, [r7, #8]
 800a846:	f7fe f895 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a84a:	4603      	mov	r3, r0
 800a84c:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a84e:	79fb      	ldrb	r3, [r7, #7]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d104      	bne.n	800a85e <CAN_Tx_id0x20+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[17]);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fe f867 	bl	800892c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a85e:	3710      	adds	r7, #16
 800a860:	46bd      	mov	sp, r7
 800a862:	bd80      	pop	{r7, pc}
 800a864:	08013a58 	.word	0x08013a58
 800a868:	1ffe9474 	.word	0x1ffe9474

0800a86c <CAN_Tx_id0x21>:

void CAN_Tx_id0x21(void)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a872:	4b0b      	ldr	r3, [pc, #44]	; (800a8a0 <CAN_Tx_id0x21+0x34>)
 800a874:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x21].CAN_Data[0];
 800a876:	4b0b      	ldr	r3, [pc, #44]	; (800a8a4 <CAN_Tx_id0x21+0x38>)
 800a878:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[18],array_data);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a87e:	4618      	mov	r0, r3
 800a880:	68b9      	ldr	r1, [r7, #8]
 800a882:	f7fe f877 	bl	8008974 <CAN_NODE_MO_UpdateData>
 800a886:	4603      	mov	r3, r0
 800a888:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a88a:	79fb      	ldrb	r3, [r7, #7]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d104      	bne.n	800a89a <CAN_Tx_id0x21+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[18]);
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a894:	4618      	mov	r0, r3
 800a896:	f7fe f849 	bl	800892c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}
 800a8a0:	08013a58 	.word	0x08013a58
 800a8a4:	1ffe9480 	.word	0x1ffe9480

0800a8a8 <CAN_Rx_id0x13>:

void CAN_Rx_id0x13(void)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b084      	sub	sp, #16
 800a8ac:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a8ae:	4b1c      	ldr	r3, [pc, #112]	; (800a920 <CAN_Rx_id0x13+0x78>)
 800a8b0:	60fb      	str	r3, [r7, #12]

    mo_index = 19;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800a8b2:	2313      	movs	r3, #19
 800a8b4:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a8b6:	7afb      	ldrb	r3, [r7, #11]
 800a8b8:	68fa      	ldr	r2, [r7, #12]
 800a8ba:	3302      	adds	r3, #2
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a8c6:	7afb      	ldrb	r3, [r7, #11]
 800a8c8:	68fa      	ldr	r2, [r7, #12]
 800a8ca:	3302      	adds	r3, #2
 800a8cc:	009b      	lsls	r3, r3, #2
 800a8ce:	4413      	add	r3, r2
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fe f86e 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a8d8:	4603      	mov	r3, r0
 800a8da:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a8dc:	78fb      	ldrb	r3, [r7, #3]
 800a8de:	f003 0301 	and.w	r3, r3, #1
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d016      	beq.n	800a914 <CAN_Rx_id0x13+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	2101      	movs	r1, #1
 800a8ea:	f7ff ff75 	bl	800a7d8 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a8ee:	7afb      	ldrb	r3, [r7, #11]
 800a8f0:	68fa      	ldr	r2, [r7, #12]
 800a8f2:	3302      	adds	r3, #2
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	4413      	add	r3, r2
 800a8f8:	685b      	ldr	r3, [r3, #4]
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	f7fe f828 	bl	8008950 <CAN_NODE_MO_Receive>
 800a900:	4603      	mov	r3, r0
 800a902:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a904:	78bb      	ldrb	r3, [r7, #2]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d102      	bne.n	800a910 <CAN_Rx_id0x13+0x68>
      {
        // message object receive success.
          test = 1;
 800a90a:	2301      	movs	r3, #1
 800a90c:	707b      	strb	r3, [r7, #1]
 800a90e:	e001      	b.n	800a914 <CAN_Rx_id0x13+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800a910:	2300      	movs	r3, #0
 800a912:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x13();
 800a914:	f000 f884 	bl	800aa20 <process_Rx_CAN_0x13>
}
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	08013a58 	.word	0x08013a58

0800a924 <CAN_Rx_id0x12>:


void CAN_Rx_id0x12(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a92a:	4b1c      	ldr	r3, [pc, #112]	; (800a99c <CAN_Rx_id0x12+0x78>)
 800a92c:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800a92e:	2314      	movs	r3, #20
 800a930:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a932:	7afb      	ldrb	r3, [r7, #11]
 800a934:	68fa      	ldr	r2, [r7, #12]
 800a936:	3302      	adds	r3, #2
 800a938:	009b      	lsls	r3, r3, #2
 800a93a:	4413      	add	r3, r2
 800a93c:	685b      	ldr	r3, [r3, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a942:	7afb      	ldrb	r3, [r7, #11]
 800a944:	68fa      	ldr	r2, [r7, #12]
 800a946:	3302      	adds	r3, #2
 800a948:	009b      	lsls	r3, r3, #2
 800a94a:	4413      	add	r3, r2
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	4618      	mov	r0, r3
 800a950:	f7fe f830 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a954:	4603      	mov	r3, r0
 800a956:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a958:	78fb      	ldrb	r3, [r7, #3]
 800a95a:	f003 0301 	and.w	r3, r3, #1
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d016      	beq.n	800a990 <CAN_Rx_id0x12+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	2101      	movs	r1, #1
 800a966:	f7ff ff37 	bl	800a7d8 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a96a:	7afb      	ldrb	r3, [r7, #11]
 800a96c:	68fa      	ldr	r2, [r7, #12]
 800a96e:	3302      	adds	r3, #2
 800a970:	009b      	lsls	r3, r3, #2
 800a972:	4413      	add	r3, r2
 800a974:	685b      	ldr	r3, [r3, #4]
 800a976:	4618      	mov	r0, r3
 800a978:	f7fd ffea 	bl	8008950 <CAN_NODE_MO_Receive>
 800a97c:	4603      	mov	r3, r0
 800a97e:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a980:	78bb      	ldrb	r3, [r7, #2]
 800a982:	2b00      	cmp	r3, #0
 800a984:	d102      	bne.n	800a98c <CAN_Rx_id0x12+0x68>
      {
        // message object receive success.
          test = 1;
 800a986:	2301      	movs	r3, #1
 800a988:	707b      	strb	r3, [r7, #1]
 800a98a:	e001      	b.n	800a990 <CAN_Rx_id0x12+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800a98c:	2300      	movs	r3, #0
 800a98e:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x12();
 800a990:	f000 f9ae 	bl	800acf0 <process_Rx_CAN_0x12>
}
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	bd80      	pop	{r7, pc}
 800a99a:	bf00      	nop
 800a99c:	08013a58 	.word	0x08013a58

0800a9a0 <CAN_Rx_id0x30>:


void CAN_Rx_id0x30(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a9a6:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <CAN_Rx_id0x30+0x78>)
 800a9a8:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800a9aa:	2315      	movs	r3, #21
 800a9ac:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a9be:	7afb      	ldrb	r3, [r7, #11]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fd fff2 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d016      	beq.n	800aa0c <CAN_Rx_id0x30+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	f7ff fef9 	bl	800a7d8 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	3302      	adds	r3, #2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fd ffac 	bl	8008950 <CAN_NODE_MO_Receive>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a9fc:	78bb      	ldrb	r3, [r7, #2]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <CAN_Rx_id0x30+0x68>
      {
        // message object receive success.
          test = 1;
 800aa02:	2301      	movs	r3, #1
 800aa04:	707b      	strb	r3, [r7, #1]
 800aa06:	e001      	b.n	800aa0c <CAN_Rx_id0x30+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x30();
 800aa0c:	f000 f99c 	bl	800ad48 <process_Rx_CAN_0x30>
}
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08013a58 	.word	0x08013a58
 800aa1c:	00000000 	.word	0x00000000

0800aa20 <process_Rx_CAN_0x13>:


void process_Rx_CAN_0x13(void)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b090      	sub	sp, #64	; 0x40
 800aa24:	af02      	add	r7, sp, #8
    int8_t mo_index, *tempData;
    uint8_t CAN_rawData[8];
    uint16_t ThrottlePercentage = 6;
 800aa26:	2306      	movs	r3, #6
 800aa28:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t VehSpeed;
    int16_t c = 0, c2 = 0;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	867b      	strh	r3, [r7, #50]	; 0x32
 800aa2e:	2300      	movs	r3, #0
 800aa30:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t c1 = 0, c3 = 0;
 800aa32:	2300      	movs	r3, #0
 800aa34:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800aa36:	2300      	movs	r3, #0
 800aa38:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800aa3a:	4b9f      	ldr	r3, [pc, #636]	; (800acb8 <process_Rx_CAN_0x13+0x298>)
 800aa3c:	62bb      	str	r3, [r7, #40]	; 0x28

    mo_index = 19;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800aa3e:	2313      	movs	r3, #19
 800aa40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x13].CAN_Data[ZERO_BYTE];
 800aa44:	4b9d      	ldr	r3, [pc, #628]	; (800acbc <process_Rx_CAN_0x13+0x29c>)
 800aa46:	623b      	str	r3, [r7, #32]
    Irp_Mcu_Torques_29bit->Speed_rpm = 0;
 800aa48:	4b9d      	ldr	r3, [pc, #628]	; (800acc0 <process_Rx_CAN_0x13+0x2a0>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	701a      	strb	r2, [r3, #0]
 800aa50:	785a      	ldrb	r2, [r3, #1]
 800aa52:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800aa56:	705a      	strb	r2, [r3, #1]
   // Irp_Mcu_Torques_29bit->DC_Current = 0;
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800aa58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800aa5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa5e:	3302      	adds	r3, #2
 800aa60:	009b      	lsls	r3, r3, #2
 800aa62:	4413      	add	r3, r2
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	4618      	mov	r0, r3
 800aa68:	6a39      	ldr	r1, [r7, #32]
 800aa6a:	f7ff fe35 	bl	800a6d8 <CAN_NODE_MO_ReadData>

    RPM = Irp_Mcu_Torques_29bit->Speed_rpm;
 800aa6e:	4b94      	ldr	r3, [pc, #592]	; (800acc0 <process_Rx_CAN_0x13+0x2a0>)
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	781a      	ldrb	r2, [r3, #0]
 800aa74:	785b      	ldrb	r3, [r3, #1]
 800aa76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa7a:	021b      	lsls	r3, r3, #8
 800aa7c:	4313      	orrs	r3, r2
 800aa7e:	045b      	lsls	r3, r3, #17
 800aa80:	145b      	asrs	r3, r3, #17
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	4b8f      	ldr	r3, [pc, #572]	; (800acc4 <process_Rx_CAN_0x13+0x2a4>)
 800aa88:	801a      	strh	r2, [r3, #0]
    Torque_Estimation = Irp_Mcu_Torques_29bit ->Torque_Estimation;
 800aa8a:	4b8d      	ldr	r3, [pc, #564]	; (800acc0 <process_Rx_CAN_0x13+0x2a0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	785a      	ldrb	r2, [r3, #1]
 800aa90:	09d2      	lsrs	r2, r2, #7
 800aa92:	b2d2      	uxtb	r2, r2
 800aa94:	7899      	ldrb	r1, [r3, #2]
 800aa96:	0049      	lsls	r1, r1, #1
 800aa98:	430a      	orrs	r2, r1
 800aa9a:	78db      	ldrb	r3, [r3, #3]
 800aa9c:	f003 030f 	and.w	r3, r3, #15
 800aaa0:	025b      	lsls	r3, r3, #9
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	04db      	lsls	r3, r3, #19
 800aaa6:	14db      	asrs	r3, r3, #19
 800aaa8:	b29b      	uxth	r3, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	4b86      	ldr	r3, [pc, #536]	; (800acc8 <process_Rx_CAN_0x13+0x2a8>)
 800aaae:	801a      	strh	r2, [r3, #0]
    //DC_Current_irp = (int)Irp_Mcu_Torques_29bit->DC_Current;
   // c = (int)Irp_Mcu_Torques_29bit->DC_Voltage;
   // c1 = (uint16_t)Irp_Mcu_Torques_29bit->DC_Voltage;
    //DC_Voltage_irp = Irp_Mcu_Torques_29bit->DC_Voltage;
   // DC_Current_irp = ((((uint8_t)tempData[3]) >> 4) | ((int)(tempData[4] & 0x7f) << 4));
    DC_Current_irp = (int)(((int16_t)(tempData[4] & 0x7f) << 4) | (((int16_t)tempData[3] >> 4)) & 0x0f);
 800aab0:	6a3b      	ldr	r3, [r7, #32]
 800aab2:	3304      	adds	r3, #4
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	b2db      	uxtb	r3, r3
 800aab8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aabc:	011b      	lsls	r3, r3, #4
 800aabe:	b29a      	uxth	r2, r3
 800aac0:	6a3b      	ldr	r3, [r7, #32]
 800aac2:	3303      	adds	r3, #3
 800aac4:	781b      	ldrb	r3, [r3, #0]
 800aac6:	b25b      	sxtb	r3, r3
 800aac8:	111b      	asrs	r3, r3, #4
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	b2db      	uxtb	r3, r3
 800aace:	b29b      	uxth	r3, r3
 800aad0:	f003 030f 	and.w	r3, r3, #15
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	4313      	orrs	r3, r2
 800aad8:	b29a      	uxth	r2, r3
 800aada:	4b7c      	ldr	r3, [pc, #496]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800aadc:	801a      	strh	r2, [r3, #0]
    c2 = DC_Current_irp;//(tempData[3] >> 4);
 800aade:	4b7b      	ldr	r3, [pc, #492]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800aae0:	881b      	ldrh	r3, [r3, #0]
 800aae2:	863b      	strh	r3, [r7, #48]	; 0x30
    c3 = ((uint16_t)((uint8_t)tempData[4] & 0x7f) << 4);
 800aae4:	6a3b      	ldr	r3, [r7, #32]
 800aae6:	3304      	adds	r3, #4
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaf0:	011b      	lsls	r3, r3, #4
 800aaf2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(c2 < 0)
 800aaf4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	da02      	bge.n	800ab02 <process_Rx_CAN_0x13+0xe2>
    {
    	int a;
    	a++;
 800aafc:	69fb      	ldr	r3, [r7, #28]
 800aafe:	3301      	adds	r3, #1
 800ab00:	61fb      	str	r3, [r7, #28]
        //c3 = ((int16_t)((int16_t)tempData[4] & 0x7f) << 4) | 0xffffffff;
    }

    c = c3 | c2;
 800ab02:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800ab04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800ab06:	4313      	orrs	r3, r2
 800ab08:	867b      	strh	r3, [r7, #50]	; 0x32
    DC_Voltage_irp = ((((uint16_t)tempData[6] & 0x0f) << 9) | (((uint16_t)tempData[5] << 1) | 0/*((uint16_t)tempData[4] >> 7) & 0x01*/))/10;
 800ab0a:	6a3b      	ldr	r3, [r7, #32]
 800ab0c:	3306      	adds	r3, #6
 800ab0e:	781b      	ldrb	r3, [r3, #0]
 800ab10:	b25b      	sxtb	r3, r3
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	f003 030f 	and.w	r3, r3, #15
 800ab18:	025a      	lsls	r2, r3, #9
 800ab1a:	6a3b      	ldr	r3, [r7, #32]
 800ab1c:	3305      	adds	r3, #5
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	b25b      	sxtb	r3, r3
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	4313      	orrs	r3, r2
 800ab28:	4a69      	ldr	r2, [pc, #420]	; (800acd0 <process_Rx_CAN_0x13+0x2b0>)
 800ab2a:	fb82 1203 	smull	r1, r2, r2, r3
 800ab2e:	1092      	asrs	r2, r2, #2
 800ab30:	17db      	asrs	r3, r3, #31
 800ab32:	1ad3      	subs	r3, r2, r3
 800ab34:	b29a      	uxth	r2, r3
 800ab36:	4b67      	ldr	r3, [pc, #412]	; (800acd4 <process_Rx_CAN_0x13+0x2b4>)
 800ab38:	801a      	strh	r2, [r3, #0]

    MotorPower_Irp = DC_Current_irp * DC_Voltage_irp;
 800ab3a:	4b64      	ldr	r3, [pc, #400]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	b29a      	uxth	r2, r3
 800ab40:	4b64      	ldr	r3, [pc, #400]	; (800acd4 <process_Rx_CAN_0x13+0x2b4>)
 800ab42:	881b      	ldrh	r3, [r3, #0]
 800ab44:	fb12 f303 	smulbb	r3, r2, r3
 800ab48:	b29b      	uxth	r3, r3
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	4b62      	ldr	r3, [pc, #392]	; (800acd8 <process_Rx_CAN_0x13+0x2b8>)
 800ab4e:	801a      	strh	r2, [r3, #0]
    if(c < -1)
 800ab50:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ab54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab58:	da02      	bge.n	800ab60 <process_Rx_CAN_0x13+0x140>
    {
    	int a;
    	   a++;
 800ab5a:	69bb      	ldr	r3, [r7, #24]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	61bb      	str	r3, [r7, #24]

    }
    if(Torque_Estimation > 1)
 800ab60:	4b59      	ldr	r3, [pc, #356]	; (800acc8 <process_Rx_CAN_0x13+0x2a8>)
 800ab62:	881b      	ldrh	r3, [r3, #0]
 800ab64:	b21b      	sxth	r3, r3
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	dd02      	ble.n	800ab70 <process_Rx_CAN_0x13+0x150>
    {
    	int a;
    	a++;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	3301      	adds	r3, #1
 800ab6e:	617b      	str	r3, [r7, #20]
    }
    if(Torque_Estimation < -5)
 800ab70:	4b55      	ldr	r3, [pc, #340]	; (800acc8 <process_Rx_CAN_0x13+0x2a8>)
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b21b      	sxth	r3, r3
 800ab76:	f113 0f05 	cmn.w	r3, #5
 800ab7a:	da02      	bge.n	800ab82 <process_Rx_CAN_0x13+0x162>
    {
    	int a;
    	a++;
 800ab7c:	693b      	ldr	r3, [r7, #16]
 800ab7e:	3301      	adds	r3, #1
 800ab80:	613b      	str	r3, [r7, #16]

    }
    Regenration_flag = 0;
 800ab82:	4b56      	ldr	r3, [pc, #344]	; (800acdc <process_Rx_CAN_0x13+0x2bc>)
 800ab84:	2200      	movs	r2, #0
 800ab86:	701a      	strb	r2, [r3, #0]
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
 800ab88:	4b50      	ldr	r3, [pc, #320]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800ab8a:	881b      	ldrh	r3, [r3, #0]
 800ab8c:	b21b      	sxth	r3, r3
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dd08      	ble.n	800aba4 <process_Rx_CAN_0x13+0x184>
 800ab92:	4b4e      	ldr	r3, [pc, #312]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800ab94:	881b      	ldrh	r3, [r3, #0]
 800ab96:	b21b      	sxth	r3, r3
 800ab98:	2b32      	cmp	r3, #50	; 0x32
 800ab9a:	dc03      	bgt.n	800aba4 <process_Rx_CAN_0x13+0x184>
{
	int a;
	a++;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	3301      	adds	r3, #1
 800aba0:	60fb      	str	r3, [r7, #12]
    	a++;

    }
    Regenration_flag = 0;
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
{
 800aba2:	e00f      	b.n	800abc4 <process_Rx_CAN_0x13+0x1a4>
	int a;
	a++;
}
else if(DC_Current_irp == 0)
 800aba4:	4b49      	ldr	r3, [pc, #292]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800aba6:	881b      	ldrh	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00b      	beq.n	800abc4 <process_Rx_CAN_0x13+0x1a4>
{
//Regenration_flag = 1;
}
else if(DC_Current_irp > 2000)
 800abac:	4b47      	ldr	r3, [pc, #284]	; (800accc <process_Rx_CAN_0x13+0x2ac>)
 800abae:	881b      	ldrh	r3, [r3, #0]
 800abb0:	b21b      	sxth	r3, r3
 800abb2:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800abb6:	dd05      	ble.n	800abc4 <process_Rx_CAN_0x13+0x1a4>
{
	int a;
	a++;
 800abb8:	68bb      	ldr	r3, [r7, #8]
 800abba:	3301      	adds	r3, #1
 800abbc:	60bb      	str	r3, [r7, #8]
	Regenration_flag = 1;
 800abbe:	4b47      	ldr	r3, [pc, #284]	; (800acdc <process_Rx_CAN_0x13+0x2bc>)
 800abc0:	2201      	movs	r2, #1
 800abc2:	701a      	strb	r2, [r3, #0]
}
    VehSpeed = calculate_speed(RPM);
 800abc4:	4b3f      	ldr	r3, [pc, #252]	; (800acc4 <process_Rx_CAN_0x13+0x2a4>)
 800abc6:	881b      	ldrh	r3, [r3, #0]
 800abc8:	b29b      	uxth	r3, r3
 800abca:	b21b      	sxth	r3, r3
 800abcc:	4618      	mov	r0, r3
 800abce:	f7ff fd9f 	bl	800a710 <calculate_speed>
 800abd2:	4603      	mov	r3, r0
 800abd4:	86fb      	strh	r3, [r7, #54]	; 0x36

    speed_4g=VehSpeed;
 800abd6:	4a42      	ldr	r2, [pc, #264]	; (800ace0 <process_Rx_CAN_0x13+0x2c0>)
 800abd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800abda:	8013      	strh	r3, [r2, #0]

    if(VehSpeed > 100)
 800abdc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800abde:	2b64      	cmp	r3, #100	; 0x64
 800abe0:	d901      	bls.n	800abe6 <process_Rx_CAN_0x13+0x1c6>
        VehSpeed = 100;
 800abe2:	2364      	movs	r3, #100	; 0x64
 800abe4:	86fb      	strh	r3, [r7, #54]	; 0x36

    ThrottlePercentage =  map(VehSpeed, 0, 100, 6200, 64000);
 800abe6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800abe8:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800abec:	9300      	str	r3, [sp, #0]
 800abee:	4610      	mov	r0, r2
 800abf0:	2100      	movs	r1, #0
 800abf2:	2264      	movs	r2, #100	; 0x64
 800abf4:	f641 0338 	movw	r3, #6200	; 0x1838
 800abf8:	f7ff fa84 	bl	800a104 <map>
 800abfc:	4603      	mov	r3, r0
 800abfe:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBDII_CAN[can_0x04].CAN_Data[3] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[THIRD_BYTE] = ThrottlePercentage;
 800ac00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac02:	b2da      	uxtb	r2, r3
 800ac04:	4b37      	ldr	r3, [pc, #220]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac06:	74da      	strb	r2, [r3, #19]
 800ac08:	4b36      	ldr	r3, [pc, #216]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac0a:	7cdb      	ldrb	r3, [r3, #19]
 800ac0c:	b2da      	uxtb	r2, r3
 800ac0e:	4b36      	ldr	r3, [pc, #216]	; (800ace8 <process_Rx_CAN_0x13+0x2c8>)
 800ac10:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    OBDII_CAN[can_0x04].CAN_Data[2] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[FOURTH_BYTE] = (ThrottlePercentage >> 8);
 800ac14:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b29b      	uxth	r3, r3
 800ac1a:	b2da      	uxtb	r2, r3
 800ac1c:	4b31      	ldr	r3, [pc, #196]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac1e:	751a      	strb	r2, [r3, #20]
 800ac20:	4b30      	ldr	r3, [pc, #192]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac22:	7d1b      	ldrb	r3, [r3, #20]
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	4b30      	ldr	r3, [pc, #192]	; (800ace8 <process_Rx_CAN_0x13+0x2c8>)
 800ac28:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    VehicleSpeedglb = VehSpeed;
 800ac2c:	4a2f      	ldr	r2, [pc, #188]	; (800acec <process_Rx_CAN_0x13+0x2cc>)
 800ac2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac30:	8013      	strh	r3, [r2, #0]

    if(VehSpeed)
 800ac32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d01d      	beq.n	800ac74 <process_Rx_CAN_0x13+0x254>
    	VehSpeed = 104.11* VehSpeed + 226.99;
 800ac38:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f005 fe76 	bl	801092c <__aeabi_i2d>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4610      	mov	r0, r2
 800ac46:	4619      	mov	r1, r3
 800ac48:	a317      	add	r3, pc, #92	; (adr r3, 800aca8 <process_Rx_CAN_0x13+0x288>)
 800ac4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac4e:	f005 fed3 	bl	80109f8 <__aeabi_dmul>
 800ac52:	4602      	mov	r2, r0
 800ac54:	460b      	mov	r3, r1
 800ac56:	4610      	mov	r0, r2
 800ac58:	4619      	mov	r1, r3
 800ac5a:	a315      	add	r3, pc, #84	; (adr r3, 800acb0 <process_Rx_CAN_0x13+0x290>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	f005 fd18 	bl	8010694 <__adddf3>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4610      	mov	r0, r2
 800ac6a:	4619      	mov	r1, r3
 800ac6c:	f006 f986 	bl	8010f7c <__aeabi_d2uiz>
 800ac70:	4603      	mov	r3, r0
 800ac72:	86fb      	strh	r3, [r7, #54]	; 0x36

    OBDII_CAN[can_0x04].CAN_Data[5] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[FIFTH_BYTE] = (VehSpeed);
 800ac74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	4b1a      	ldr	r3, [pc, #104]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac7a:	725a      	strb	r2, [r3, #9]
 800ac7c:	4b19      	ldr	r3, [pc, #100]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac7e:	7a5b      	ldrb	r3, [r3, #9]
 800ac80:	b2da      	uxtb	r2, r3
 800ac82:	4b19      	ldr	r3, [pc, #100]	; (800ace8 <process_Rx_CAN_0x13+0x2c8>)
 800ac84:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OBDII_CAN[can_0x04].CAN_Data[4] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[SIXTH_BYTE] = (VehSpeed >> 8U);
 800ac88:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ac8a:	0a1b      	lsrs	r3, r3, #8
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	b2da      	uxtb	r2, r3
 800ac90:	4b14      	ldr	r3, [pc, #80]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac92:	729a      	strb	r2, [r3, #10]
 800ac94:	4b13      	ldr	r3, [pc, #76]	; (800ace4 <process_Rx_CAN_0x13+0x2c4>)
 800ac96:	7a9b      	ldrb	r3, [r3, #10]
 800ac98:	b2da      	uxtb	r2, r3
 800ac9a:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <process_Rx_CAN_0x13+0x2c8>)
 800ac9c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    //VehicleSpeedglb = VehSpeed;
}
 800aca0:	3738      	adds	r7, #56	; 0x38
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bd80      	pop	{r7, pc}
 800aca6:	bf00      	nop
 800aca8:	3d70a3d7 	.word	0x3d70a3d7
 800acac:	405a070a 	.word	0x405a070a
 800acb0:	147ae148 	.word	0x147ae148
 800acb4:	406c5fae 	.word	0x406c5fae
 800acb8:	08013a58 	.word	0x08013a58
 800acbc:	1ffe9468 	.word	0x1ffe9468
 800acc0:	1ffe8820 	.word	0x1ffe8820
 800acc4:	1fff4814 	.word	0x1fff4814
 800acc8:	1fff483a 	.word	0x1fff483a
 800accc:	1fff47fe 	.word	0x1fff47fe
 800acd0:	66666667 	.word	0x66666667
 800acd4:	1fff48a0 	.word	0x1fff48a0
 800acd8:	1fff4886 	.word	0x1fff4886
 800acdc:	1fff48d6 	.word	0x1fff48d6
 800ace0:	1fff482c 	.word	0x1fff482c
 800ace4:	1ffe92d8 	.word	0x1ffe92d8
 800ace8:	1ffe9218 	.word	0x1ffe9218
 800acec:	1fff4812 	.word	0x1fff4812

0800acf0 <process_Rx_CAN_0x12>:

void process_Rx_CAN_0x12(void)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800acf6:	4b0f      	ldr	r3, [pc, #60]	; (800ad34 <process_Rx_CAN_0x12+0x44>)
 800acf8:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800acfa:	2314      	movs	r3, #20
 800acfc:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x12].CAN_Data[ZERO_BYTE];
 800acfe:	4b0e      	ldr	r3, [pc, #56]	; (800ad38 <process_Rx_CAN_0x12+0x48>)
 800ad00:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ad02:	7afb      	ldrb	r3, [r7, #11]
 800ad04:	68fa      	ldr	r2, [r7, #12]
 800ad06:	3302      	adds	r3, #2
 800ad08:	009b      	lsls	r3, r3, #2
 800ad0a:	4413      	add	r3, r2
 800ad0c:	685b      	ldr	r3, [r3, #4]
 800ad0e:	4618      	mov	r0, r3
 800ad10:	6879      	ldr	r1, [r7, #4]
 800ad12:	f7ff fce1 	bl	800a6d8 <CAN_NODE_MO_ReadData>

    Mcu_Temp_Irp = Irp_MCU_Status_29bit->MCU_temp;
 800ad16:	4b09      	ldr	r3, [pc, #36]	; (800ad3c <process_Rx_CAN_0x12+0x4c>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	78db      	ldrb	r3, [r3, #3]
 800ad1c:	b29a      	uxth	r2, r3
 800ad1e:	4b08      	ldr	r3, [pc, #32]	; (800ad40 <process_Rx_CAN_0x12+0x50>)
 800ad20:	801a      	strh	r2, [r3, #0]
    Motor_Temp_Irp = Irp_MCU_Status_29bit->Motor_temp;
 800ad22:	4b06      	ldr	r3, [pc, #24]	; (800ad3c <process_Rx_CAN_0x12+0x4c>)
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	789b      	ldrb	r3, [r3, #2]
 800ad28:	b29a      	uxth	r2, r3
 800ad2a:	4b06      	ldr	r3, [pc, #24]	; (800ad44 <process_Rx_CAN_0x12+0x54>)
 800ad2c:	801a      	strh	r2, [r3, #0]
}
 800ad2e:	3710      	adds	r7, #16
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	08013a58 	.word	0x08013a58
 800ad38:	1ffe945c 	.word	0x1ffe945c
 800ad3c:	1ffe8828 	.word	0x1ffe8828
 800ad40:	1fff4822 	.word	0x1fff4822
 800ad44:	1fff48d0 	.word	0x1fff48d0

0800ad48 <process_Rx_CAN_0x30>:

void process_Rx_CAN_0x30(void)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b084      	sub	sp, #16
 800ad4c:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ad4e:	4b09      	ldr	r3, [pc, #36]	; (800ad74 <process_Rx_CAN_0x30+0x2c>)
 800ad50:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800ad52:	2315      	movs	r3, #21
 800ad54:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x30].CAN_Data[ZERO_BYTE];
 800ad56:	4b08      	ldr	r3, [pc, #32]	; (800ad78 <process_Rx_CAN_0x30+0x30>)
 800ad58:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
 800ad5c:	68fa      	ldr	r2, [r7, #12]
 800ad5e:	3302      	adds	r3, #2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	4413      	add	r3, r2
 800ad64:	685b      	ldr	r3, [r3, #4]
 800ad66:	4618      	mov	r0, r3
 800ad68:	6879      	ldr	r1, [r7, #4]
 800ad6a:	f7ff fcb5 	bl	800a6d8 <CAN_NODE_MO_ReadData>
}
 800ad6e:	3710      	adds	r7, #16
 800ad70:	46bd      	mov	sp, r7
 800ad72:	bd80      	pop	{r7, pc}
 800ad74:	08013a58 	.word	0x08013a58
 800ad78:	1ffe948c 	.word	0x1ffe948c

0800ad7c <Irp_Tx_29bit>:


void Irp_Tx_29bit(void)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	af00      	add	r7, sp, #0
	CAN_Tx_id0x10();
 800ad80:	f7ff fd38 	bl	800a7f4 <CAN_Tx_id0x10>
	CAN_Tx_id0x20();
 800ad84:	f7ff fd54 	bl	800a830 <CAN_Tx_id0x20>
	CAN_Tx_id0x21();
 800ad88:	f7ff fd70 	bl	800a86c <CAN_Tx_id0x21>
}
 800ad8c:	bd80      	pop	{r7, pc}
 800ad8e:	bf00      	nop

0800ad90 <Irp_Rx_29bit>:

void Irp_Rx_29bit(void)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	af00      	add	r7, sp, #0
	CAN_Rx_id0x13();
 800ad94:	f7ff fd88 	bl	800a8a8 <CAN_Rx_id0x13>
	CAN_Rx_id0x12();
 800ad98:	f7ff fdc4 	bl	800a924 <CAN_Rx_id0x12>
	CAN_Rx_id0x30();
 800ad9c:	f7ff fe00 	bl	800a9a0 <CAN_Rx_id0x30>
}
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop

0800ada4 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	683a      	ldr	r2, [r7, #0]
 800adb4:	61da      	str	r2, [r3, #28]
}
 800adb6:	370c      	adds	r7, #12
 800adb8:	46bd      	mov	sp, r7
 800adba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbe:	4770      	bx	lr

0800adc0 <Process_CAN_id0x18FF50E5>:
			       }
}


void Process_CAN_id0x18FF50E5(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b084      	sub	sp, #16
 800adc4:	af00      	add	r7, sp, #0
	static once = 0, ccount = 200;
	int test = 0;
 800adc6:	2300      	movs	r3, #0
 800adc8:	60fb      	str	r3, [r7, #12]
uint8_t *tempData, mo_index;
		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800adca:	4b23      	ldr	r3, [pc, #140]	; (800ae58 <Process_CAN_id0x18FF50E5+0x98>)
 800adcc:	60bb      	str	r3, [r7, #8]

		mo_index = 28;
 800adce:	231c      	movs	r3, #28
 800add0:	71fb      	strb	r3, [r7, #7]

		tempData = &obc_madhura[can_0x18FF50E5].CAN_Data[0];
 800add2:	4b22      	ldr	r3, [pc, #136]	; (800ae5c <Process_CAN_id0x18FF50E5+0x9c>)
 800add4:	603b      	str	r3, [r7, #0]

		//read data to external buffer
		CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800add6:	79fb      	ldrb	r3, [r7, #7]
 800add8:	68ba      	ldr	r2, [r7, #8]
 800adda:	3302      	adds	r3, #2
 800addc:	009b      	lsls	r3, r3, #2
 800adde:	4413      	add	r3, r2
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	4618      	mov	r0, r3
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	f7ff fc77 	bl	800a6d8 <CAN_NODE_MO_ReadData>

		//if(((obc_madhura[can_0x18FF50E5].CAN_Data[4] & 0x1f) == 0x00) && (obc_madhura[can_0x18FF50E5].CAN_Data[2]))
		if(charging_started && (!VehicleSpeedglb))
 800adea:	4b1d      	ldr	r3, [pc, #116]	; (800ae60 <Process_CAN_id0x18FF50E5+0xa0>)
 800adec:	781b      	ldrb	r3, [r3, #0]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d01a      	beq.n	800ae28 <Process_CAN_id0x18FF50E5+0x68>
 800adf2:	4b1c      	ldr	r3, [pc, #112]	; (800ae64 <Process_CAN_id0x18FF50E5+0xa4>)
 800adf4:	881b      	ldrh	r3, [r3, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d116      	bne.n	800ae28 <Process_CAN_id0x18FF50E5+0x68>
		{
			//if( obc_madhura[can_0x18FF50E5].CAN_Data[2])
			{
				//Vcu_InPuts.charger_connect_IN = 1;
				if(once == 0)
 800adfa:	4b1b      	ldr	r3, [pc, #108]	; (800ae68 <Process_CAN_id0x18FF50E5+0xa8>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d10b      	bne.n	800ae1a <Process_CAN_id0x18FF50E5+0x5a>
				{
					digital_io_setoutputhigh(&ORVM_PWR_OUT_D);
 800ae02:	481a      	ldr	r0, [pc, #104]	; (800ae6c <Process_CAN_id0x18FF50E5+0xac>)
 800ae04:	f004 fffa 	bl	800fdfc <digital_io_setoutputhigh>
					Delay(200);
 800ae08:	20c8      	movs	r0, #200	; 0xc8
 800ae0a:	f005 f833 	bl	800fe74 <Delay>
					//Vcu_InPuts.charger_connect_IN = 1;// changed this and added below
					test = 1;
 800ae0e:	2301      	movs	r3, #1
 800ae10:	60fb      	str	r3, [r7, #12]
					once = 1;
 800ae12:	4b15      	ldr	r3, [pc, #84]	; (800ae68 <Process_CAN_id0x18FF50E5+0xa8>)
 800ae14:	2201      	movs	r2, #1
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e002      	b.n	800ae20 <Process_CAN_id0x18FF50E5+0x60>
				}
				else
				{
					digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800ae1a:	4814      	ldr	r0, [pc, #80]	; (800ae6c <Process_CAN_id0x18FF50E5+0xac>)
 800ae1c:	f004 ffb2 	bl	800fd84 <digital_io_setoutputlow>
					//Vcu_InPuts.charger_connect_IN = 0;
				}
			}
			ccount = 200;
 800ae20:	4b13      	ldr	r3, [pc, #76]	; (800ae70 <Process_CAN_id0x18FF50E5+0xb0>)
 800ae22:	22c8      	movs	r2, #200	; 0xc8
 800ae24:	601a      	str	r2, [r3, #0]
 800ae26:	e013      	b.n	800ae50 <Process_CAN_id0x18FF50E5+0x90>
		}
		else if((--ccount) <= 0)
 800ae28:	4b11      	ldr	r3, [pc, #68]	; (800ae70 <Process_CAN_id0x18FF50E5+0xb0>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	4a10      	ldr	r2, [pc, #64]	; (800ae70 <Process_CAN_id0x18FF50E5+0xb0>)
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	4b0f      	ldr	r3, [pc, #60]	; (800ae70 <Process_CAN_id0x18FF50E5+0xb0>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	dc0a      	bgt.n	800ae50 <Process_CAN_id0x18FF50E5+0x90>
		{
			test = 0;
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	60fb      	str	r3, [r7, #12]
			once = 0;
 800ae3e:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <Process_CAN_id0x18FF50E5+0xa8>)
 800ae40:	2200      	movs	r2, #0
 800ae42:	601a      	str	r2, [r3, #0]
			digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800ae44:	4809      	ldr	r0, [pc, #36]	; (800ae6c <Process_CAN_id0x18FF50E5+0xac>)
 800ae46:	f004 ff9d 	bl	800fd84 <digital_io_setoutputlow>
			//Vcu_InPuts.charger_connect_IN = 0; // change this and add below
			ccount = 200;
 800ae4a:	4b09      	ldr	r3, [pc, #36]	; (800ae70 <Process_CAN_id0x18FF50E5+0xb0>)
 800ae4c:	22c8      	movs	r2, #200	; 0xc8
 800ae4e:	601a      	str	r2, [r3, #0]
		}

	//7.0,7.1
}
 800ae50:	3710      	adds	r7, #16
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}
 800ae56:	bf00      	nop
 800ae58:	08013870 	.word	0x08013870
 800ae5c:	1ffe94d4 	.word	0x1ffe94d4
 800ae60:	1fff4858 	.word	0x1fff4858
 800ae64:	1fff4812 	.word	0x1fff4812
 800ae68:	1fff4488 	.word	0x1fff4488
 800ae6c:	1fff42b0 	.word	0x1fff42b0
 800ae70:	1ffe94dc 	.word	0x1ffe94dc

0800ae74 <Read_CAN_id0x18FF50E5>:

void Read_CAN_id0x18FF50E5(void)
{
 800ae74:	b590      	push	{r4, r7, lr}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
	static uint64_t count_in = 0;
	uint8_t test;
			CAN_NODE_STATUS_t status, receive_status;
			XMC_CAN_MO_t *MO_Ptr;
			uint8_t mo_index;
			const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800ae7a:	4b32      	ldr	r3, [pc, #200]	; (800af44 <Read_CAN_id0x18FF50E5+0xd0>)
 800ae7c:	60fb      	str	r3, [r7, #12]

			mo_index = 28;
 800ae7e:	231c      	movs	r3, #28
 800ae80:	72fb      	strb	r3, [r7, #11]

			MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ae82:	7afb      	ldrb	r3, [r7, #11]
 800ae84:	68fa      	ldr	r2, [r7, #12]
 800ae86:	3302      	adds	r3, #2
 800ae88:	009b      	lsls	r3, r3, #2
 800ae8a:	4413      	add	r3, r2
 800ae8c:	685b      	ldr	r3, [r3, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	607b      	str	r3, [r7, #4]

			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800ae92:	7afb      	ldrb	r3, [r7, #11]
 800ae94:	68fa      	ldr	r2, [r7, #12]
 800ae96:	3302      	adds	r3, #2
 800ae98:	009b      	lsls	r3, r3, #2
 800ae9a:	4413      	add	r3, r2
 800ae9c:	685b      	ldr	r3, [r3, #4]
 800ae9e:	4618      	mov	r0, r3
 800aea0:	f7fd fd88 	bl	80089b4 <CAN_NODE_MO_GetStatus>
 800aea4:	4603      	mov	r3, r0
 800aea6:	70fb      	strb	r3, [r7, #3]

			//Vcu_InPuts.charger_connect_IN = 0;
			//Check receive pending status
			if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800aea8:	78fb      	ldrb	r3, [r7, #3]
 800aeaa:	f003 0301 	and.w	r3, r3, #1
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d02b      	beq.n	800af0a <Read_CAN_id0x18FF50E5+0x96>
			{
			  // Clear the flag
			  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	f7ff ff75 	bl	800ada4 <XMC_CAN_MO_ResetStatus>
			  // Read the received Message object
			  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800aeba:	7afb      	ldrb	r3, [r7, #11]
 800aebc:	68fa      	ldr	r2, [r7, #12]
 800aebe:	3302      	adds	r3, #2
 800aec0:	009b      	lsls	r3, r3, #2
 800aec2:	4413      	add	r3, r2
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7fd fd42 	bl	8008950 <CAN_NODE_MO_Receive>
 800aecc:	4603      	mov	r3, r0
 800aece:	70bb      	strb	r3, [r7, #2]

			  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aed0:	78bb      	ldrb	r3, [r7, #2]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d10c      	bne.n	800aef0 <Read_CAN_id0x18FF50E5+0x7c>
			  {
			    // message object receive success.
				  test = 1;
 800aed6:	2301      	movs	r3, #1
 800aed8:	707b      	strb	r3, [r7, #1]
				  //Process_CAN_id0x18FF50E5();
				  count_in = 0;
 800aeda:	491b      	ldr	r1, [pc, #108]	; (800af48 <Read_CAN_id0x18FF50E5+0xd4>)
 800aedc:	f04f 0200 	mov.w	r2, #0
 800aee0:	f04f 0300 	mov.w	r3, #0
 800aee4:	e9c1 2300 	strd	r2, r3, [r1]
				  charging_detect = 1; // here added
 800aee8:	4b18      	ldr	r3, [pc, #96]	; (800af4c <Read_CAN_id0x18FF50E5+0xd8>)
 800aeea:	2201      	movs	r2, #1
 800aeec:	701a      	strb	r2, [r3, #0]
 800aeee:	e001      	b.n	800aef4 <Read_CAN_id0x18FF50E5+0x80>
			  }
			  else
			  {
			    // message object failed to receive.
				  test = 0;
 800aef0:	2300      	movs	r3, #0
 800aef2:	707b      	strb	r3, [r7, #1]
			  }
			  count_in = 0;
 800aef4:	4914      	ldr	r1, [pc, #80]	; (800af48 <Read_CAN_id0x18FF50E5+0xd4>)
 800aef6:	f04f 0200 	mov.w	r2, #0
 800aefa:	f04f 0300 	mov.w	r3, #0
 800aefe:	e9c1 2300 	strd	r2, r3, [r1]
			  Vcu_InPuts.charger_connect_IN = 1; // here added
 800af02:	4b13      	ldr	r3, [pc, #76]	; (800af50 <Read_CAN_id0x18FF50E5+0xdc>)
 800af04:	2201      	movs	r2, #1
 800af06:	709a      	strb	r2, [r3, #2]
 800af08:	e016      	b.n	800af38 <Read_CAN_id0x18FF50E5+0xc4>
			}
			else
			{
				if(count_in++ > 30)
 800af0a:	4b0f      	ldr	r3, [pc, #60]	; (800af48 <Read_CAN_id0x18FF50E5+0xd4>)
 800af0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af10:	1c50      	adds	r0, r2, #1
 800af12:	f143 0100 	adc.w	r1, r3, #0
 800af16:	4c0c      	ldr	r4, [pc, #48]	; (800af48 <Read_CAN_id0x18FF50E5+0xd4>)
 800af18:	e9c4 0100 	strd	r0, r1, [r4]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bf08      	it	eq
 800af20:	2a1f      	cmpeq	r2, #31
 800af22:	d309      	bcc.n	800af38 <Read_CAN_id0x18FF50E5+0xc4>
				{
					Vcu_InPuts.charger_connect_IN = 0; // here added
 800af24:	4b0a      	ldr	r3, [pc, #40]	; (800af50 <Read_CAN_id0x18FF50E5+0xdc>)
 800af26:	2200      	movs	r2, #0
 800af28:	709a      	strb	r2, [r3, #2]
					count_in = 0;
 800af2a:	4907      	ldr	r1, [pc, #28]	; (800af48 <Read_CAN_id0x18FF50E5+0xd4>)
 800af2c:	f04f 0200 	mov.w	r2, #0
 800af30:	f04f 0300 	mov.w	r3, #0
 800af34:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

			Process_CAN_id0x18FF50E5();
 800af38:	f7ff ff42 	bl	800adc0 <Process_CAN_id0x18FF50E5>
}
 800af3c:	3714      	adds	r7, #20
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd90      	pop	{r4, r7, pc}
 800af42:	bf00      	nop
 800af44:	08013870 	.word	0x08013870
 800af48:	1fff4490 	.word	0x1fff4490
 800af4c:	1fff522e 	.word	0x1fff522e
 800af50:	1fff5104 	.word	0x1fff5104

0800af54 <Process_4G_Event_Data>:

vcu_fleet_fleet_10_sec TD1;
uint8_t Eventbuffer_4Gcomm[512]={0};

void Process_4G_Event_Data(void)
{
 800af54:	b580      	push	{r7, lr}
 800af56:	af00      	add	r7, sp, #0

	memset(&TD1,0,sizeof(TD1));
 800af58:	485f      	ldr	r0, [pc, #380]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800af5a:	2100      	movs	r1, #0
 800af5c:	2264      	movs	r2, #100	; 0x64
 800af5e:	f006 fb84 	bl	801166a <memset>
	TD1.car_id = 6;
 800af62:	4b5d      	ldr	r3, [pc, #372]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800af64:	2200      	movs	r2, #0
 800af66:	f042 0206 	orr.w	r2, r2, #6
 800af6a:	701a      	strb	r2, [r3, #0]
 800af6c:	2200      	movs	r2, #0
 800af6e:	705a      	strb	r2, [r3, #1]
 800af70:	2200      	movs	r2, #0
 800af72:	709a      	strb	r2, [r3, #2]
 800af74:	2200      	movs	r2, #0
 800af76:	70da      	strb	r2, [r3, #3]
	TD1.trip_id = 81050;
 800af78:	4b57      	ldr	r3, [pc, #348]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800af7a:	2200      	movs	r2, #0
 800af7c:	f062 0265 	orn	r2, r2, #101	; 0x65
 800af80:	711a      	strb	r2, [r3, #4]
 800af82:	2200      	movs	r2, #0
 800af84:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800af88:	715a      	strb	r2, [r3, #5]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f042 0201 	orr.w	r2, r2, #1
 800af90:	719a      	strb	r2, [r3, #6]
 800af92:	2200      	movs	r2, #0
 800af94:	71da      	strb	r2, [r3, #7]
	TD1.identifier = 318;
 800af96:	4b50      	ldr	r3, [pc, #320]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800af98:	2200      	movs	r2, #0
 800af9a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 800af9e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800afa2:	2200      	movs	r2, #0
 800afa4:	f042 0201 	orr.w	r2, r2, #1
 800afa8:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800afac:	2200      	movs	r2, #0
 800afae:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
//	TD1.rtc.days = current_time.days;
//	TD1.rtc.day_of_week = current_time.daysofweek;
//	TD1.rtc.hours = current_time.hours;
//	TD1.rtc.minutes = current_time.minutes;
//	TD1.rtc.seconds = current_time.seconds;
	TD1.hv_soc_calculated =Mapped_BMS_SOC;
 800afb8:	4b48      	ldr	r3, [pc, #288]	; (800b0dc <Process_4G_Event_Data+0x188>)
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	461a      	mov	r2, r3
 800afbe:	4b46      	ldr	r3, [pc, #280]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800afc0:	619a      	str	r2, [r3, #24]
	TD1.soc = ((int)(CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0]);
 800afc2:	4b47      	ldr	r3, [pc, #284]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800afc4:	7c5b      	ldrb	r3, [r3, #17]
 800afc6:	021b      	lsls	r3, r3, #8
 800afc8:	4a45      	ldr	r2, [pc, #276]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800afca:	7c12      	ldrb	r2, [r2, #16]
 800afcc:	4313      	orrs	r3, r2
 800afce:	461a      	mov	r2, r3
 800afd0:	4b41      	ldr	r3, [pc, #260]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800afd2:	615a      	str	r2, [r3, #20]
	TD1.battery_temp=BMS_Avg_temp;
 800afd4:	4b43      	ldr	r3, [pc, #268]	; (800b0e4 <Process_4G_Event_Data+0x190>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	461a      	mov	r2, r3
 800afda:	4b3f      	ldr	r3, [pc, #252]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800afdc:	61da      	str	r2, [r3, #28]
	TD1.odometer = CalOdometer();//52;//will get from cluster
 800afde:	f000 f985 	bl	800b2ec <CalOdometer>
 800afe2:	4602      	mov	r2, r0
 800afe4:	4b3c      	ldr	r3, [pc, #240]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800afe6:	629a      	str	r2, [r3, #40]	; 0x28
	TD1.charging_indicator = Vcu_InPuts.charger_connect_IN;
 800afe8:	4b3f      	ldr	r3, [pc, #252]	; (800b0e8 <Process_4G_Event_Data+0x194>)
 800afea:	789b      	ldrb	r3, [r3, #2]
 800afec:	461a      	mov	r2, r3
 800afee:	4b3a      	ldr	r3, [pc, #232]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800aff0:	639a      	str	r2, [r3, #56]	; 0x38
	TD1.dte = ((TD1.soc)*2);
 800aff2:	4b39      	ldr	r3, [pc, #228]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800aff4:	695b      	ldr	r3, [r3, #20]
 800aff6:	005b      	lsls	r3, r3, #1
 800aff8:	4a37      	ldr	r2, [pc, #220]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800affa:	63d3      	str	r3, [r2, #60]	; 0x3c
	TD1.mcu_temp_1=Mcu_Temp_Irp;
 800affc:	4b3b      	ldr	r3, [pc, #236]	; (800b0ec <Process_4G_Event_Data+0x198>)
 800affe:	881b      	ldrh	r3, [r3, #0]
 800b000:	461a      	mov	r2, r3
 800b002:	4b35      	ldr	r3, [pc, #212]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b004:	621a      	str	r2, [r3, #32]
	TD1.ac_status = AC_ON_4g;//CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800b006:	4b3a      	ldr	r3, [pc, #232]	; (800b0f0 <Process_4G_Event_Data+0x19c>)
 800b008:	781b      	ldrb	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	4b32      	ldr	r3, [pc, #200]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b00e:	641a      	str	r2, [r3, #64]	; 0x40
	TD1.min_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b010:	4b33      	ldr	r3, [pc, #204]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b012:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b016:	021b      	lsls	r3, r3, #8
 800b018:	4a31      	ldr	r2, [pc, #196]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b01a:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b01e:	4313      	orrs	r3, r2
 800b020:	461a      	mov	r2, r3
 800b022:	4b2d      	ldr	r3, [pc, #180]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b024:	645a      	str	r2, [r3, #68]	; 0x44
	TD1.max_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b026:	4b2e      	ldr	r3, [pc, #184]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b028:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b02c:	021b      	lsls	r3, r3, #8
 800b02e:	4a2c      	ldr	r2, [pc, #176]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b030:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b034:	4313      	orrs	r3, r2
 800b036:	461a      	mov	r2, r3
 800b038:	4b27      	ldr	r3, [pc, #156]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b03a:	649a      	str	r2, [r3, #72]	; 0x48
	TD1.min_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[2]));
 800b03c:	4b28      	ldr	r3, [pc, #160]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b03e:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b042:	021b      	lsls	r3, r3, #8
 800b044:	4a26      	ldr	r2, [pc, #152]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b046:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800b04a:	4313      	orrs	r3, r2
 800b04c:	461a      	mov	r2, r3
 800b04e:	4b22      	ldr	r3, [pc, #136]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b050:	64da      	str	r2, [r3, #76]	; 0x4c
	TD1.max_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0]));
 800b052:	4b23      	ldr	r3, [pc, #140]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b054:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b058:	021b      	lsls	r3, r3, #8
 800b05a:	4a21      	ldr	r2, [pc, #132]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b05c:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800b060:	4313      	orrs	r3, r2
 800b062:	461a      	mov	r2, r3
 800b064:	4b1c      	ldr	r3, [pc, #112]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b066:	651a      	str	r2, [r3, #80]	; 0x50
	TD1.pack_voltage = ((int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]));
 800b068:	4b1d      	ldr	r3, [pc, #116]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b06a:	7ddb      	ldrb	r3, [r3, #23]
 800b06c:	021b      	lsls	r3, r3, #8
 800b06e:	4a1c      	ldr	r2, [pc, #112]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b070:	7d92      	ldrb	r2, [r2, #22]
 800b072:	4313      	orrs	r3, r2
 800b074:	461a      	mov	r2, r3
 800b076:	4b18      	ldr	r3, [pc, #96]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b078:	631a      	str	r2, [r3, #48]	; 0x30
	TD1.pack_current = PackCurrent;//((int)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
 800b07a:	4b1e      	ldr	r3, [pc, #120]	; (800b0f4 <Process_4G_Event_Data+0x1a0>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4a16      	ldr	r2, [pc, #88]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b080:	6353      	str	r3, [r2, #52]	; 0x34
	TD1.longitude = GPS_data_val.longitude;
 800b082:	4b1d      	ldr	r3, [pc, #116]	; (800b0f8 <Process_4G_Event_Data+0x1a4>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	4a14      	ldr	r2, [pc, #80]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b088:	6113      	str	r3, [r2, #16]
	TD1.latitude = GPS_data_val.latitude ;
 800b08a:	4b1b      	ldr	r3, [pc, #108]	; (800b0f8 <Process_4G_Event_Data+0x1a4>)
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	4a12      	ldr	r2, [pc, #72]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b090:	60d3      	str	r3, [r2, #12]
	TD1.altitude = GPS_data_val.altitude ;
 800b092:	4b19      	ldr	r3, [pc, #100]	; (800b0f8 <Process_4G_Event_Data+0x1a4>)
 800b094:	689b      	ldr	r3, [r3, #8]
 800b096:	461a      	mov	r2, r3
 800b098:	4b0f      	ldr	r3, [pc, #60]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b09a:	655a      	str	r2, [r3, #84]	; 0x54
	TD1.direction = GPS_data_val.direction;
 800b09c:	4b16      	ldr	r3, [pc, #88]	; (800b0f8 <Process_4G_Event_Data+0x1a4>)
 800b09e:	68db      	ldr	r3, [r3, #12]
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b0a4:	659a      	str	r2, [r3, #88]	; 0x58
	TD1.speed = speed_4g;
 800b0a6:	4b15      	ldr	r3, [pc, #84]	; (800b0fc <Process_4G_Event_Data+0x1a8>)
 800b0a8:	881b      	ldrh	r3, [r3, #0]
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	4b0a      	ldr	r3, [pc, #40]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b0ae:	625a      	str	r2, [r3, #36]	; 0x24
	TD1.soh = (int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[2]);
 800b0b0:	4b0b      	ldr	r3, [pc, #44]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b0b2:	7cdb      	ldrb	r3, [r3, #19]
 800b0b4:	021b      	lsls	r3, r3, #8
 800b0b6:	4a0a      	ldr	r2, [pc, #40]	; (800b0e0 <Process_4G_Event_Data+0x18c>)
 800b0b8:	7c92      	ldrb	r2, [r2, #18]
 800b0ba:	4313      	orrs	r3, r2
 800b0bc:	461a      	mov	r2, r3
 800b0be:	4b06      	ldr	r3, [pc, #24]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b0c0:	65da      	str	r2, [r3, #92]	; 0x5c
    TD1.timestamp = epoch;
 800b0c2:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <Process_4G_Event_Data+0x1ac>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a04      	ldr	r2, [pc, #16]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b0c8:	6093      	str	r3, [r2, #8]
    TD1.ambient_temp=  ambient_temp;
 800b0ca:	4b0e      	ldr	r3, [pc, #56]	; (800b104 <Process_4G_Event_Data+0x1b0>)
 800b0cc:	781b      	ldrb	r3, [r3, #0]
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	4b01      	ldr	r3, [pc, #4]	; (800b0d8 <Process_4G_Event_Data+0x184>)
 800b0d2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b0d4:	bd80      	pop	{r7, pc}
 800b0d6:	bf00      	nop
 800b0d8:	1fff5234 	.word	0x1fff5234
 800b0dc:	1fff4800 	.word	0x1fff4800
 800b0e0:	1ffe9254 	.word	0x1ffe9254
 800b0e4:	1fff48c4 	.word	0x1fff48c4
 800b0e8:	1fff5104 	.word	0x1fff5104
 800b0ec:	1fff4822 	.word	0x1fff4822
 800b0f0:	1fff4810 	.word	0x1fff4810
 800b0f4:	1fff4818 	.word	0x1fff4818
 800b0f8:	1fff4890 	.word	0x1fff4890
 800b0fc:	1fff482c 	.word	0x1fff482c
 800b100:	1fff47ec 	.word	0x1fff47ec
 800b104:	1fff48d2 	.word	0x1fff48d2

0800b108 <set_RTC>:
	//pb_ostream_t stream1;

	//stream1 =  pb_ostream_from_buffer(Eventbuffer_4Gcomm,sizeof(Eventbuffer_4Gcomm));
	//pb_encode(&stream1,vcu_fleet_fleet_10_sec_fields, &TD1);
void set_RTC(void)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b08a      	sub	sp, #40	; 0x28
 800b10c:	af00      	add	r7, sp, #0
	uint8_t Timebuf[35]={0};
 800b10e:	1d3b      	adds	r3, r7, #4
 800b110:	2200      	movs	r2, #0
 800b112:	601a      	str	r2, [r3, #0]
 800b114:	3304      	adds	r3, #4
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
 800b11a:	3304      	adds	r3, #4
 800b11c:	2200      	movs	r2, #0
 800b11e:	601a      	str	r2, [r3, #0]
 800b120:	3304      	adds	r3, #4
 800b122:	2200      	movs	r2, #0
 800b124:	601a      	str	r2, [r3, #0]
 800b126:	3304      	adds	r3, #4
 800b128:	2200      	movs	r2, #0
 800b12a:	601a      	str	r2, [r3, #0]
 800b12c:	3304      	adds	r3, #4
 800b12e:	2200      	movs	r2, #0
 800b130:	601a      	str	r2, [r3, #0]
 800b132:	3304      	adds	r3, #4
 800b134:	2200      	movs	r2, #0
 800b136:	601a      	str	r2, [r3, #0]
 800b138:	3304      	adds	r3, #4
 800b13a:	2200      	movs	r2, #0
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	3304      	adds	r3, #4
 800b140:	2200      	movs	r2, #0
 800b142:	801a      	strh	r2, [r3, #0]
 800b144:	3302      	adds	r3, #2
 800b146:	2200      	movs	r2, #0
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	3301      	adds	r3, #1
	mod_getCurrentTime(Timebuf);
 800b14c:	1d3b      	adds	r3, r7, #4
 800b14e:	4618      	mov	r0, r3
 800b150:	f002 fa32 	bl	800d5b8 <mod_getCurrentTime>
	timeval.year = (((Timebuf[0]-'0')*10)+(Timebuf[1]-'0'));
 800b154:	793b      	ldrb	r3, [r7, #4]
 800b156:	3b30      	subs	r3, #48	; 0x30
 800b158:	b29b      	uxth	r3, r3
 800b15a:	461a      	mov	r2, r3
 800b15c:	0092      	lsls	r2, r2, #2
 800b15e:	4413      	add	r3, r2
 800b160:	005b      	lsls	r3, r3, #1
 800b162:	b29a      	uxth	r2, r3
 800b164:	797b      	ldrb	r3, [r7, #5]
 800b166:	b29b      	uxth	r3, r3
 800b168:	4413      	add	r3, r2
 800b16a:	b29b      	uxth	r3, r3
 800b16c:	3b30      	subs	r3, #48	; 0x30
 800b16e:	b29a      	uxth	r2, r3
 800b170:	4b3b      	ldr	r3, [pc, #236]	; (800b260 <set_RTC+0x158>)
 800b172:	80da      	strh	r2, [r3, #6]
	timeval.month = (((Timebuf[3]-'0')*10)+(Timebuf[4]-'0'));
 800b174:	79fb      	ldrb	r3, [r7, #7]
 800b176:	3b30      	subs	r3, #48	; 0x30
 800b178:	b2db      	uxtb	r3, r3
 800b17a:	461a      	mov	r2, r3
 800b17c:	0092      	lsls	r2, r2, #2
 800b17e:	4413      	add	r3, r2
 800b180:	005b      	lsls	r3, r3, #1
 800b182:	b2da      	uxtb	r2, r3
 800b184:	7a3b      	ldrb	r3, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	b2db      	uxtb	r3, r3
 800b18a:	3b30      	subs	r3, #48	; 0x30
 800b18c:	b2db      	uxtb	r3, r3
 800b18e:	f003 030f 	and.w	r3, r3, #15
 800b192:	b2d9      	uxtb	r1, r3
 800b194:	4a32      	ldr	r2, [pc, #200]	; (800b260 <set_RTC+0x158>)
 800b196:	7953      	ldrb	r3, [r2, #5]
 800b198:	f361 0303 	bfi	r3, r1, #0, #4
 800b19c:	7153      	strb	r3, [r2, #5]
	timeval.days = (((Timebuf[6]-'0')*10)+(Timebuf[7]-'0'));
 800b19e:	7abb      	ldrb	r3, [r7, #10]
 800b1a0:	3b30      	subs	r3, #48	; 0x30
 800b1a2:	b2db      	uxtb	r3, r3
 800b1a4:	461a      	mov	r2, r3
 800b1a6:	0092      	lsls	r2, r2, #2
 800b1a8:	4413      	add	r3, r2
 800b1aa:	005b      	lsls	r3, r3, #1
 800b1ac:	b2da      	uxtb	r2, r3
 800b1ae:	7afb      	ldrb	r3, [r7, #11]
 800b1b0:	4413      	add	r3, r2
 800b1b2:	b2db      	uxtb	r3, r3
 800b1b4:	3b30      	subs	r3, #48	; 0x30
 800b1b6:	b2db      	uxtb	r3, r3
 800b1b8:	f003 031f 	and.w	r3, r3, #31
 800b1bc:	b2d9      	uxtb	r1, r3
 800b1be:	4a28      	ldr	r2, [pc, #160]	; (800b260 <set_RTC+0x158>)
 800b1c0:	78d3      	ldrb	r3, [r2, #3]
 800b1c2:	f361 0304 	bfi	r3, r1, #0, #5
 800b1c6:	70d3      	strb	r3, [r2, #3]
	timeval.hours = (((Timebuf[9]-'0')*10)+(Timebuf[10]-'0'));
 800b1c8:	7b7b      	ldrb	r3, [r7, #13]
 800b1ca:	3b30      	subs	r3, #48	; 0x30
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	461a      	mov	r2, r3
 800b1d0:	0092      	lsls	r2, r2, #2
 800b1d2:	4413      	add	r3, r2
 800b1d4:	005b      	lsls	r3, r3, #1
 800b1d6:	b2da      	uxtb	r2, r3
 800b1d8:	7bbb      	ldrb	r3, [r7, #14]
 800b1da:	4413      	add	r3, r2
 800b1dc:	b2db      	uxtb	r3, r3
 800b1de:	3b30      	subs	r3, #48	; 0x30
 800b1e0:	b2db      	uxtb	r3, r3
 800b1e2:	f003 031f 	and.w	r3, r3, #31
 800b1e6:	b2d9      	uxtb	r1, r3
 800b1e8:	4a1d      	ldr	r2, [pc, #116]	; (800b260 <set_RTC+0x158>)
 800b1ea:	7893      	ldrb	r3, [r2, #2]
 800b1ec:	f361 0304 	bfi	r3, r1, #0, #5
 800b1f0:	7093      	strb	r3, [r2, #2]
	timeval.minutes = (((Timebuf[12]-'0')*10)+(Timebuf[13]-'0'));
 800b1f2:	7c3b      	ldrb	r3, [r7, #16]
 800b1f4:	3b30      	subs	r3, #48	; 0x30
 800b1f6:	b2db      	uxtb	r3, r3
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	0092      	lsls	r2, r2, #2
 800b1fc:	4413      	add	r3, r2
 800b1fe:	005b      	lsls	r3, r3, #1
 800b200:	b2da      	uxtb	r2, r3
 800b202:	7c7b      	ldrb	r3, [r7, #17]
 800b204:	4413      	add	r3, r2
 800b206:	b2db      	uxtb	r3, r3
 800b208:	3b30      	subs	r3, #48	; 0x30
 800b20a:	b2db      	uxtb	r3, r3
 800b20c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b210:	b2d9      	uxtb	r1, r3
 800b212:	4a13      	ldr	r2, [pc, #76]	; (800b260 <set_RTC+0x158>)
 800b214:	7853      	ldrb	r3, [r2, #1]
 800b216:	f361 0305 	bfi	r3, r1, #0, #6
 800b21a:	7053      	strb	r3, [r2, #1]
	timeval.seconds = (((Timebuf[15]-'0')*10)+(Timebuf[16]-'0'));
 800b21c:	7cfb      	ldrb	r3, [r7, #19]
 800b21e:	3b30      	subs	r3, #48	; 0x30
 800b220:	b2db      	uxtb	r3, r3
 800b222:	461a      	mov	r2, r3
 800b224:	0092      	lsls	r2, r2, #2
 800b226:	4413      	add	r3, r2
 800b228:	005b      	lsls	r3, r3, #1
 800b22a:	b2da      	uxtb	r2, r3
 800b22c:	7d3b      	ldrb	r3, [r7, #20]
 800b22e:	4413      	add	r3, r2
 800b230:	b2db      	uxtb	r3, r3
 800b232:	3b30      	subs	r3, #48	; 0x30
 800b234:	b2db      	uxtb	r3, r3
 800b236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b23a:	b2d9      	uxtb	r1, r3
 800b23c:	4a08      	ldr	r2, [pc, #32]	; (800b260 <set_RTC+0x158>)
 800b23e:	7813      	ldrb	r3, [r2, #0]
 800b240:	f361 0305 	bfi	r3, r1, #0, #6
 800b244:	7013      	strb	r3, [r2, #0]
	RTC_Day = timeval.days;
 800b246:	4b06      	ldr	r3, [pc, #24]	; (800b260 <set_RTC+0x158>)
 800b248:	78db      	ldrb	r3, [r3, #3]
 800b24a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b24e:	b2db      	uxtb	r3, r3
 800b250:	461a      	mov	r2, r3
 800b252:	4b04      	ldr	r3, [pc, #16]	; (800b264 <set_RTC+0x15c>)
 800b254:	701a      	strb	r2, [r3, #0]
	RTC_init();
 800b256:	f7f5 f911 	bl	800047c <RTC_init>
}
 800b25a:	3728      	adds	r7, #40	; 0x28
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}
 800b260:	1fff47a8 	.word	0x1fff47a8
 800b264:	1fff449c 	.word	0x1fff449c

0800b268 <epoch_time>:

void epoch_time(void)
{	struct tm my_tm;
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	; 0x28
 800b26c:	af00      	add	r7, sp, #0
	memset(&my_tm, 0, sizeof(my_tm));
 800b26e:	1d3b      	adds	r3, r7, #4
 800b270:	4618      	mov	r0, r3
 800b272:	2100      	movs	r1, #0
 800b274:	2224      	movs	r2, #36	; 0x24
 800b276:	f006 f9f8 	bl	801166a <memset>
	RTC_GetTime(&current_time);
 800b27a:	481a      	ldr	r0, [pc, #104]	; (800b2e4 <epoch_time+0x7c>)
 800b27c:	f7fc fa18 	bl	80076b0 <RTC_GetTime>
	my_tm.tm_year =(2000 + current_time.year)-1900;
 800b280:	4b18      	ldr	r3, [pc, #96]	; (800b2e4 <epoch_time+0x7c>)
 800b282:	88db      	ldrh	r3, [r3, #6]
 800b284:	3364      	adds	r3, #100	; 0x64
 800b286:	61bb      	str	r3, [r7, #24]
	my_tm.tm_mon = current_time.month;
 800b288:	4b16      	ldr	r3, [pc, #88]	; (800b2e4 <epoch_time+0x7c>)
 800b28a:	795b      	ldrb	r3, [r3, #5]
 800b28c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b290:	b2db      	uxtb	r3, r3
 800b292:	617b      	str	r3, [r7, #20]
	my_tm.tm_mday = current_time.days;
 800b294:	4b13      	ldr	r3, [pc, #76]	; (800b2e4 <epoch_time+0x7c>)
 800b296:	78db      	ldrb	r3, [r3, #3]
 800b298:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b29c:	b2db      	uxtb	r3, r3
 800b29e:	613b      	str	r3, [r7, #16]
	my_tm.tm_hour = current_time.hours;
 800b2a0:	4b10      	ldr	r3, [pc, #64]	; (800b2e4 <epoch_time+0x7c>)
 800b2a2:	789b      	ldrb	r3, [r3, #2]
 800b2a4:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b2a8:	b2db      	uxtb	r3, r3
 800b2aa:	60fb      	str	r3, [r7, #12]
	my_tm.tm_min = current_time.minutes;
 800b2ac:	4b0d      	ldr	r3, [pc, #52]	; (800b2e4 <epoch_time+0x7c>)
 800b2ae:	785b      	ldrb	r3, [r3, #1]
 800b2b0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2b4:	b2db      	uxtb	r3, r3
 800b2b6:	60bb      	str	r3, [r7, #8]
	my_tm.tm_sec = current_time.seconds;
 800b2b8:	4b0a      	ldr	r3, [pc, #40]	; (800b2e4 <epoch_time+0x7c>)
 800b2ba:	781b      	ldrb	r3, [r3, #0]
 800b2bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	607b      	str	r3, [r7, #4]
	my_tm.tm_isdst = -1;
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
	my_tm.tm_mon -= 1;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	3b01      	subs	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]

	epoch = mktime(&my_tm);
 800b2d0:	1d3b      	adds	r3, r7, #4
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f006 faa8 	bl	8011828 <mktime>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	4b03      	ldr	r3, [pc, #12]	; (800b2e8 <epoch_time+0x80>)
 800b2dc:	601a      	str	r2, [r3, #0]
}
 800b2de:	3728      	adds	r7, #40	; 0x28
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	bd80      	pop	{r7, pc}
 800b2e4:	1fff47f0 	.word	0x1fff47f0
 800b2e8:	1fff47ec 	.word	0x1fff47ec

0800b2ec <CalOdometer>:

uint32_t CalOdometer()//For testing only
	{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
		float pi = 3.14;
 800b2f2:	4b18      	ldr	r3, [pc, #96]	; (800b354 <CalOdometer+0x68>)
 800b2f4:	617b      	str	r3, [r7, #20]
		float rad = 0.279;
 800b2f6:	4b18      	ldr	r3, [pc, #96]	; (800b358 <CalOdometer+0x6c>)
 800b2f8:	613b      	str	r3, [r7, #16]
		float GRatio = 0.10084; //  1/9.916;
 800b2fa:	4b18      	ldr	r3, [pc, #96]	; (800b35c <CalOdometer+0x70>)
 800b2fc:	60fb      	str	r3, [r7, #12]
		float mintosec = 0.0166;
 800b2fe:	4b18      	ldr	r3, [pc, #96]	; (800b360 <CalOdometer+0x74>)
 800b300:	60bb      	str	r3, [r7, #8]
		uint16_t DistanceM = 1;
 800b302:	2301      	movs	r3, #1
 800b304:	80fb      	strh	r3, [r7, #6]

		uint16_t timeDiff = epoch - starttime;
 800b306:	4b17      	ldr	r3, [pc, #92]	; (800b364 <CalOdometer+0x78>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	b29a      	uxth	r2, r3
 800b30c:	4b16      	ldr	r3, [pc, #88]	; (800b368 <CalOdometer+0x7c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	b29b      	uxth	r3, r3
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	80bb      	strh	r3, [r7, #4]
		uint8_t rotations = 3;
 800b316:	2303      	movs	r3, #3
 800b318:	70fb      	strb	r3, [r7, #3]

		//Distance = (2 * pi * rad * rotations);
		//Distance += (2 * pi * rad * N/(rpm) * GRatio * mintosec * TimeSec);
		DistanceM = (vspeed * (timeDiff/3600));// KM/hr
 800b31a:	88bb      	ldrh	r3, [r7, #4]
 800b31c:	4a13      	ldr	r2, [pc, #76]	; (800b36c <CalOdometer+0x80>)
 800b31e:	fba2 2303 	umull	r2, r3, r2, r3
 800b322:	0adb      	lsrs	r3, r3, #11
 800b324:	b29a      	uxth	r2, r3
 800b326:	4b12      	ldr	r3, [pc, #72]	; (800b370 <CalOdometer+0x84>)
 800b328:	881b      	ldrh	r3, [r3, #0]
 800b32a:	fb12 f303 	smulbb	r3, r2, r3
 800b32e:	80fb      	strh	r3, [r7, #6]
		Distance += (DistanceM/8);//3600
 800b330:	88fb      	ldrh	r3, [r7, #6]
 800b332:	08db      	lsrs	r3, r3, #3
 800b334:	b29a      	uxth	r2, r3
 800b336:	4b0f      	ldr	r3, [pc, #60]	; (800b374 <CalOdometer+0x88>)
 800b338:	881b      	ldrh	r3, [r3, #0]
 800b33a:	4413      	add	r3, r2
 800b33c:	b29a      	uxth	r2, r3
 800b33e:	4b0d      	ldr	r3, [pc, #52]	; (800b374 <CalOdometer+0x88>)
 800b340:	801a      	strh	r2, [r3, #0]

		return Distance;
 800b342:	4b0c      	ldr	r3, [pc, #48]	; (800b374 <CalOdometer+0x88>)
 800b344:	881b      	ldrh	r3, [r3, #0]
	}
 800b346:	4618      	mov	r0, r3
 800b348:	371c      	adds	r7, #28
 800b34a:	46bd      	mov	sp, r7
 800b34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b350:	4770      	bx	lr
 800b352:	bf00      	nop
 800b354:	4048f5c3 	.word	0x4048f5c3
 800b358:	3e8ed917 	.word	0x3e8ed917
 800b35c:	3dce8534 	.word	0x3dce8534
 800b360:	3c87fcb9 	.word	0x3c87fcb9
 800b364:	1fff47ec 	.word	0x1fff47ec
 800b368:	1fff4498 	.word	0x1fff4498
 800b36c:	91a2b3c5 	.word	0x91a2b3c5
 800b370:	1fff522a 	.word	0x1fff522a
 800b374:	1ffe94e0 	.word	0x1ffe94e0

0800b378 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b384:	78fb      	ldrb	r3, [r7, #3]
 800b386:	2201      	movs	r2, #1
 800b388:	409a      	lsls	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	605a      	str	r2, [r3, #4]
}
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b398:	b480      	push	{r7}
 800b39a:	b083      	sub	sp, #12
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
 800b3a0:	460b      	mov	r3, r1
 800b3a2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b3a8:	78fb      	ldrb	r3, [r7, #3]
 800b3aa:	fa22 f303 	lsr.w	r3, r2, r3
 800b3ae:	f003 0301 	and.w	r3, r3, #1
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	370c      	adds	r7, #12
 800b3b6:	46bd      	mov	sp, r7
 800b3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3bc:	4770      	bx	lr
 800b3be:	bf00      	nop

0800b3c0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b082      	sub	sp, #8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	7c1b      	ldrb	r3, [r3, #16]
 800b3d0:	4610      	mov	r0, r2
 800b3d2:	4619      	mov	r1, r3
 800b3d4:	f7ff ffd0 	bl	800b378 <XMC_GPIO_SetOutputHigh>
}
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop

0800b3e0 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800b3e0:	b580      	push	{r7, lr}
 800b3e2:	b082      	sub	sp, #8
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	7c1b      	ldrb	r3, [r3, #16]
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	f7ff ffd0 	bl	800b398 <XMC_GPIO_GetInput>
 800b3f8:	4603      	mov	r3, r0
}
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop

0800b404 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b082      	sub	sp, #8
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	4618      	mov	r0, r3
 800b412:	f7f9 f9f5 	bl	8004800 <XMC_UART_CH_GetReceivedData>
 800b416:	4603      	mov	r3, r0
 800b418:	b2db      	uxtb	r3, r3
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop

0800b424 <clear_readbuff>:
#include "Vcu_Config.h"

uint32_t getout;

void clear_readbuff(char string[])
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 65; i++)
 800b42c:	2300      	movs	r3, #0
 800b42e:	60fb      	str	r3, [r7, #12]
 800b430:	e007      	b.n	800b442 <clear_readbuff+0x1e>
		string[i] = '\0';
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	687a      	ldr	r2, [r7, #4]
 800b436:	4413      	add	r3, r2
 800b438:	2200      	movs	r2, #0
 800b43a:	701a      	strb	r2, [r3, #0]

uint32_t getout;

void clear_readbuff(char string[])
{
	for(int i = 0; i < 65; i++)
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	3301      	adds	r3, #1
 800b440:	60fb      	str	r3, [r7, #12]
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	2b40      	cmp	r3, #64	; 0x40
 800b446:	ddf4      	ble.n	800b432 <clear_readbuff+0xe>
		string[i] = '\0';
}
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop

0800b454 <data_tx4g>:

void data_tx4g(char tx_cmd[])//uint8_t
{
 800b454:	b580      	push	{r7, lr}
 800b456:	b082      	sub	sp, #8
 800b458:	af00      	add	r7, sp, #0
 800b45a:	6078      	str	r0, [r7, #4]
	UART_Transmit(&UART_0, (uint8_t*)tx_cmd, (uint32_t)strlen(tx_cmd));
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f006 fc0c 	bl	8011c7a <strlen>
 800b462:	4603      	mov	r3, r0
 800b464:	4803      	ldr	r0, [pc, #12]	; (800b474 <data_tx4g+0x20>)
 800b466:	6879      	ldr	r1, [r7, #4]
 800b468:	461a      	mov	r2, r3
 800b46a:	f7fa fb6d 	bl	8005b48 <UART_Transmit>

	//Delay(5);
}
 800b46e:	3708      	adds	r7, #8
 800b470:	46bd      	mov	sp, r7
 800b472:	bd80      	pop	{r7, pc}
 800b474:	1ffe8844 	.word	0x1ffe8844

0800b478 <Get_CurrentLocation>:
	data_rx4g();
	data_tx4g(SendGPSData21);
	data_rx4g();
}

void Get_CurrentLocation() {
 800b478:	b590      	push	{r4, r7, lr}
 800b47a:	b0f3      	sub	sp, #460	; 0x1cc
 800b47c:	af00      	add	r7, sp, #0
    DIGITAL_IO_SetOutputHigh(&RTS);
 800b47e:	4880      	ldr	r0, [pc, #512]	; (800b680 <Get_CurrentLocation+0x208>)
 800b480:	f7ff ff9e 	bl	800b3c0 <DIGITAL_IO_SetOutputHigh>
    //delay(5000);
    bool cts_in = DIGITAL_IO_GetInput(&CTS);
 800b484:	487f      	ldr	r0, [pc, #508]	; (800b684 <Get_CurrentLocation+0x20c>)
 800b486:	f7ff ffab 	bl	800b3e0 <DIGITAL_IO_GetInput>
 800b48a:	4603      	mov	r3, r0
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bf14      	ite	ne
 800b490:	2301      	movne	r3, #1
 800b492:	2300      	moveq	r3, #0
 800b494:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
    char SendGPSData5[] = "AT+QGPSLOC=1\r\n";
 800b498:	4b7b      	ldr	r3, [pc, #492]	; (800b688 <Get_CurrentLocation+0x210>)
 800b49a:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800b49e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b4a0:	c407      	stmia	r4!, {r0, r1, r2}
 800b4a2:	8023      	strh	r3, [r4, #0]
 800b4a4:	3402      	adds	r4, #2
 800b4a6:	0c1b      	lsrs	r3, r3, #16
 800b4a8:	7023      	strb	r3, [r4, #0]
    //SuperLooptime_Start();
    data_tx4g(SendGPSData5);
 800b4aa:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7ff ffd0 	bl	800b454 <data_tx4g>
    //SuperLooptime_End();

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
 800b4b4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	701a      	strb	r2, [r3, #0]
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b4c2:	e00d      	b.n	800b4e0 <Get_CurrentLocation+0x68>
        strcat(receivedData, data_rx4gps());
 800b4c4:	f000 f8ec 	bl	800b6a0 <data_rx4gps>
 800b4c8:	4602      	mov	r2, r0
 800b4ca:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	4611      	mov	r1, r2
 800b4d2:	f006 fbad 	bl	8011c30 <strcat>

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b4d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b4da:	3301      	adds	r3, #1
 800b4dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b4e0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b4e4:	2b03      	cmp	r3, #3
 800b4e6:	dded      	ble.n	800b4c4 <Get_CurrentLocation+0x4c>
        strcat(receivedData, data_rx4gps());
    }
    //SuperLooptime_End();
    char* startToken = strstr(receivedData, "+QGPSLOC:");
 800b4e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	4967      	ldr	r1, [pc, #412]	; (800b68c <Get_CurrentLocation+0x214>)
 800b4f0:	f006 fbdd 	bl	8011cae <strstr>
 800b4f4:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
    if (startToken != NULL) {
 800b4f8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f000 80b2 	beq.w	800b666 <Get_CurrentLocation+0x1ee>
        char *token;
        token = strtok(startToken, ",");
 800b502:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800b506:	4962      	ldr	r1, [pc, #392]	; (800b690 <Get_CurrentLocation+0x218>)
 800b508:	f006 fbea 	bl	8011ce0 <strtok>
 800b50c:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
        int field_count = 0;
 800b510:	2300      	movs	r3, #0
 800b512:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b516:	e0a1      	b.n	800b65c <Get_CurrentLocation+0x1e4>
            if (field_count == 1) { // Latitude
 800b518:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d124      	bne.n	800b56a <Get_CurrentLocation+0xf2>
                strncpy(latitude, token, 10);
 800b520:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b524:	4618      	mov	r0, r3
 800b526:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b52a:	220a      	movs	r2, #10
 800b52c:	f006 fbad 	bl	8011c8a <strncpy>
                latitude[10] = '\0';
 800b530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b534:	2200      	movs	r2, #0
 800b536:	729a      	strb	r2, [r3, #10]
                GPS_data_val.latitude = ((atoi(latitude))*100000);
 800b538:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b53c:	4618      	mov	r0, r3
 800b53e:	f006 f859 	bl	80115f4 <atoi>
 800b542:	4602      	mov	r2, r0
 800b544:	4b53      	ldr	r3, [pc, #332]	; (800b694 <Get_CurrentLocation+0x21c>)
 800b546:	fb03 f302 	mul.w	r3, r3, r2
 800b54a:	461a      	mov	r2, r3
 800b54c:	4b52      	ldr	r3, [pc, #328]	; (800b698 <Get_CurrentLocation+0x220>)
 800b54e:	605a      	str	r2, [r3, #4]
                GPS_data_val.latitude += (atoi(latitude+5));
 800b550:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b554:	3305      	adds	r3, #5
 800b556:	4618      	mov	r0, r3
 800b558:	f006 f84c 	bl	80115f4 <atoi>
 800b55c:	4602      	mov	r2, r0
 800b55e:	4b4e      	ldr	r3, [pc, #312]	; (800b698 <Get_CurrentLocation+0x220>)
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	4413      	add	r3, r2
 800b564:	4a4c      	ldr	r2, [pc, #304]	; (800b698 <Get_CurrentLocation+0x220>)
 800b566:	6053      	str	r3, [r2, #4]
 800b568:	e06d      	b.n	800b646 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 3) { // Longitude
 800b56a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b56e:	2b03      	cmp	r3, #3
 800b570:	d124      	bne.n	800b5bc <Get_CurrentLocation+0x144>
                strncpy(longitude, token, 11);
 800b572:	f107 031c 	add.w	r3, r7, #28
 800b576:	4618      	mov	r0, r3
 800b578:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b57c:	220b      	movs	r2, #11
 800b57e:	f006 fb84 	bl	8011c8a <strncpy>
                longitude[11] = '\0';
 800b582:	f107 031c 	add.w	r3, r7, #28
 800b586:	2200      	movs	r2, #0
 800b588:	72da      	strb	r2, [r3, #11]
                GPS_data_val.longitude = ((atoi(longitude))*100000);
 800b58a:	f107 031c 	add.w	r3, r7, #28
 800b58e:	4618      	mov	r0, r3
 800b590:	f006 f830 	bl	80115f4 <atoi>
 800b594:	4602      	mov	r2, r0
 800b596:	4b3f      	ldr	r3, [pc, #252]	; (800b694 <Get_CurrentLocation+0x21c>)
 800b598:	fb03 f302 	mul.w	r3, r3, r2
 800b59c:	461a      	mov	r2, r3
 800b59e:	4b3e      	ldr	r3, [pc, #248]	; (800b698 <Get_CurrentLocation+0x220>)
 800b5a0:	601a      	str	r2, [r3, #0]
                GPS_data_val.longitude += (atoi(longitude+6));
 800b5a2:	f107 031c 	add.w	r3, r7, #28
 800b5a6:	3306      	adds	r3, #6
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	f006 f823 	bl	80115f4 <atoi>
 800b5ae:	4602      	mov	r2, r0
 800b5b0:	4b39      	ldr	r3, [pc, #228]	; (800b698 <Get_CurrentLocation+0x220>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	4a38      	ldr	r2, [pc, #224]	; (800b698 <Get_CurrentLocation+0x220>)
 800b5b8:	6013      	str	r3, [r2, #0]
 800b5ba:	e044      	b.n	800b646 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 6) { // Altitude
 800b5bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b5c0:	2b06      	cmp	r3, #6
 800b5c2:	d125      	bne.n	800b610 <Get_CurrentLocation+0x198>
                strncpy(altitude, token, 5);
 800b5c4:	f107 030c 	add.w	r3, r7, #12
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b5ce:	2205      	movs	r2, #5
 800b5d0:	f006 fb5b 	bl	8011c8a <strncpy>
                altitude[5] = '\0';
 800b5d4:	f107 030c 	add.w	r3, r7, #12
 800b5d8:	2200      	movs	r2, #0
 800b5da:	715a      	strb	r2, [r3, #5]
                GPS_data_val.altitude =  ((atoi(altitude))*10);
 800b5dc:	f107 030c 	add.w	r3, r7, #12
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	f006 f807 	bl	80115f4 <atoi>
 800b5e6:	4602      	mov	r2, r0
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	009b      	lsls	r3, r3, #2
 800b5ec:	4413      	add	r3, r2
 800b5ee:	005b      	lsls	r3, r3, #1
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4b29      	ldr	r3, [pc, #164]	; (800b698 <Get_CurrentLocation+0x220>)
 800b5f4:	609a      	str	r2, [r3, #8]
                GPS_data_val.altitude +=( atoi(altitude+4));
 800b5f6:	f107 030c 	add.w	r3, r7, #12
 800b5fa:	3304      	adds	r3, #4
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f005 fff9 	bl	80115f4 <atoi>
 800b602:	4602      	mov	r2, r0
 800b604:	4b24      	ldr	r3, [pc, #144]	; (800b698 <Get_CurrentLocation+0x220>)
 800b606:	689b      	ldr	r3, [r3, #8]
 800b608:	4413      	add	r3, r2
 800b60a:	4a23      	ldr	r2, [pc, #140]	; (800b698 <Get_CurrentLocation+0x220>)
 800b60c:	6093      	str	r3, [r2, #8]
 800b60e:	e01a      	b.n	800b646 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 8) { // COG as direction
 800b610:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b614:	2b08      	cmp	r3, #8
 800b616:	d116      	bne.n	800b646 <Get_CurrentLocation+0x1ce>
                strncpy(direction, token, 6);
 800b618:	1d3b      	adds	r3, r7, #4
 800b61a:	4618      	mov	r0, r3
 800b61c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b620:	2206      	movs	r2, #6
 800b622:	f006 fb32 	bl	8011c8a <strncpy>
                direction[6] = '\0';
 800b626:	1d3b      	adds	r3, r7, #4
 800b628:	2200      	movs	r2, #0
 800b62a:	719a      	strb	r2, [r3, #6]
                GPS_data_val.direction = atoi(direction) * 10;
 800b62c:	1d3b      	adds	r3, r7, #4
 800b62e:	4618      	mov	r0, r3
 800b630:	f005 ffe0 	bl	80115f4 <atoi>
 800b634:	4602      	mov	r2, r0
 800b636:	4613      	mov	r3, r2
 800b638:	009b      	lsls	r3, r3, #2
 800b63a:	4413      	add	r3, r2
 800b63c:	005b      	lsls	r3, r3, #1
 800b63e:	461a      	mov	r2, r3
 800b640:	4b15      	ldr	r3, [pc, #84]	; (800b698 <Get_CurrentLocation+0x220>)
 800b642:	60da      	str	r2, [r3, #12]
                break; // Stop parsing after direction field
 800b644:	e00f      	b.n	800b666 <Get_CurrentLocation+0x1ee>
            }
            field_count++;
 800b646:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b64a:	3301      	adds	r3, #1
 800b64c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            token = strtok(NULL, ",");
 800b650:	2000      	movs	r0, #0
 800b652:	490f      	ldr	r1, [pc, #60]	; (800b690 <Get_CurrentLocation+0x218>)
 800b654:	f006 fb44 	bl	8011ce0 <strtok>
 800b658:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
    if (startToken != NULL) {
        char *token;
        token = strtok(startToken, ",");
        int field_count = 0;
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b65c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b660:	2b00      	cmp	r3, #0
 800b662:	f47f af59 	bne.w	800b518 <Get_CurrentLocation+0xa0>
            token = strtok(NULL, ",");
        }
    }

    // Clear read buffer
    clear_readbuff(receivedData);
 800b666:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b66a:	4618      	mov	r0, r3
 800b66c:	f7ff feda 	bl	800b424 <clear_readbuff>

    getout = 0;
 800b670:	4b0a      	ldr	r3, [pc, #40]	; (800b69c <Get_CurrentLocation+0x224>)
 800b672:	2200      	movs	r2, #0
 800b674:	601a      	str	r2, [r3, #0]
}
 800b676:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 800b67a:	46bd      	mov	sp, r7
 800b67c:	bd90      	pop	{r4, r7, pc}
 800b67e:	bf00      	nop
 800b680:	08013668 	.word	0x08013668
 800b684:	08013654 	.word	0x08013654
 800b688:	08013c58 	.word	0x08013c58
 800b68c:	08013c48 	.word	0x08013c48
 800b690:	08013c54 	.word	0x08013c54
 800b694:	000186a0 	.word	0x000186a0
 800b698:	1fff4890 	.word	0x1fff4890
 800b69c:	1fff5298 	.word	0x1fff5298

0800b6a0 <data_rx4gps>:


char* data_rx4gps() {
 800b6a0:	b580      	push	{r7, lr}
 800b6a2:	b082      	sub	sp, #8
 800b6a4:	af00      	add	r7, sp, #0
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);
 800b6a6:	4817      	ldr	r0, [pc, #92]	; (800b704 <data_rx4gps+0x64>)
 800b6a8:	f7ff febc 	bl	800b424 <clear_readbuff>

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	607b      	str	r3, [r7, #4]
 800b6b0:	e01c      	b.n	800b6ec <data_rx4gps+0x4c>

        ReadData[i] = UART_GetReceivedWord(&UART_0);
 800b6b2:	4815      	ldr	r0, [pc, #84]	; (800b708 <data_rx4gps+0x68>)
 800b6b4:	f7ff fea6 	bl	800b404 <UART_GetReceivedWord>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	4a11      	ldr	r2, [pc, #68]	; (800b704 <data_rx4gps+0x64>)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	460a      	mov	r2, r1
 800b6c4:	701a      	strb	r2, [r3, #0]
#if EN_SERIAL
        UART_Transmit(&UART_0, &ReadData[i], 1);
#endif


        if (i > 0 && ReadData[i] == '\n' && ReadData[i - 1] == '\n') {
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	dd0c      	ble.n	800b6e6 <data_rx4gps+0x46>
 800b6cc:	4a0d      	ldr	r2, [pc, #52]	; (800b704 <data_rx4gps+0x64>)
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	4413      	add	r3, r2
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	2b0a      	cmp	r3, #10
 800b6d6:	d106      	bne.n	800b6e6 <data_rx4gps+0x46>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	3b01      	subs	r3, #1
 800b6dc:	4a09      	ldr	r2, [pc, #36]	; (800b704 <data_rx4gps+0x64>)
 800b6de:	5cd3      	ldrb	r3, [r2, r3]
 800b6e0:	2b0a      	cmp	r3, #10
 800b6e2:	d100      	bne.n	800b6e6 <data_rx4gps+0x46>
            break;
 800b6e4:	e005      	b.n	800b6f2 <data_rx4gps+0x52>

char* data_rx4gps() {
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	3301      	adds	r3, #1
 800b6ea:	607b      	str	r3, [r7, #4]
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2b1d      	cmp	r3, #29
 800b6f0:	dddf      	ble.n	800b6b2 <data_rx4gps+0x12>
            break;
        }
    }


    Delay(5);
 800b6f2:	2005      	movs	r0, #5
 800b6f4:	f004 fbbe 	bl	800fe74 <Delay>

    return ReadData;
 800b6f8:	4b02      	ldr	r3, [pc, #8]	; (800b704 <data_rx4gps+0x64>)
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3708      	adds	r7, #8
 800b6fe:	46bd      	mov	sp, r7
 800b700:	bd80      	pop	{r7, pc}
 800b702:	bf00      	nop
 800b704:	1fff46a0 	.word	0x1fff46a0
 800b708:	1ffe8844 	.word	0x1ffe8844

0800b70c <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800b70c:	b480      	push	{r7}
 800b70e:	b083      	sub	sp, #12
 800b710:	af00      	add	r7, sp, #0
 800b712:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b71a:	f003 0308 	and.w	r3, r3, #8
 800b71e:	2b00      	cmp	r3, #0
 800b720:	bf14      	ite	ne
 800b722:	2301      	movne	r3, #1
 800b724:	2300      	moveq	r3, #0
 800b726:	b2db      	uxtb	r3, r3
}
 800b728:	4618      	mov	r0, r3
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b082      	sub	sp, #8
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4618      	mov	r0, r3
 800b742:	f7f9 f85d 	bl	8004800 <XMC_UART_CH_GetReceivedData>
 800b746:	4603      	mov	r3, r0
 800b748:	b2db      	uxtb	r3, r3
}
 800b74a:	4618      	mov	r0, r3
 800b74c:	3708      	adds	r7, #8
 800b74e:	46bd      	mov	sp, r7
 800b750:	bd80      	pop	{r7, pc}
 800b752:	bf00      	nop

0800b754 <at_initInterface>:
 *
 * Return values 	:	en_responseRetCodes_t - Return status
 *
 ****************************************************************************/
en_responseRetCodes_t at_initInterface(void)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800b75a:	2304      	movs	r3, #4
 800b75c:	71fb      	strb	r3, [r7, #7]

	/**  Initialization of UART APP instance UART_0 */
	init_status = (DAVE_STATUS_t) UART_Init(&UART_0);
 800b75e:	4809      	ldr	r0, [pc, #36]	; (800b784 <at_initInterface+0x30>)
 800b760:	f7fa f9e0 	bl	8005b24 <UART_Init>
 800b764:	4603      	mov	r3, r0
 800b766:	71bb      	strb	r3, [r7, #6]
	if (DAVE_STATUS_SUCCESS == init_status)
 800b768:	79bb      	ldrb	r3, [r7, #6]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d102      	bne.n	800b774 <at_initInterface+0x20>
	{
		len_retStatus = E_RET_SUCCESS;
 800b76e:	2300      	movs	r3, #0
 800b770:	71fb      	strb	r3, [r7, #7]
 800b772:	e001      	b.n	800b778 <at_initInterface+0x24>
	}
	else
	{
		len_retStatus = E_RET_FAILED;
 800b774:	2302      	movs	r3, #2
 800b776:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 800b778:	79fb      	ldrb	r3, [r7, #7]
}
 800b77a:	4618      	mov	r0, r3
 800b77c:	3708      	adds	r7, #8
 800b77e:	46bd      	mov	sp, r7
 800b780:	bd80      	pop	{r7, pc}
 800b782:	bf00      	nop
 800b784:	1ffe8844 	.word	0x1ffe8844

0800b788 <at_readPort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_readPort()
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	af00      	add	r7, sp, #0
	return UART_GetReceivedWord(&UART_0);
 800b78c:	4802      	ldr	r0, [pc, #8]	; (800b798 <at_readPort+0x10>)
 800b78e:	f7ff ffd1 	bl	800b734 <UART_GetReceivedWord>
 800b792:	4603      	mov	r3, r0
}
 800b794:	4618      	mov	r0, r3
 800b796:	bd80      	pop	{r7, pc}
 800b798:	1ffe8844 	.word	0x1ffe8844

0800b79c <at_isRxBuffEmpty>:
 *
 * Return values 	:	bool
 *
 ****************************************************************************/
bool at_isRxBuffEmpty()
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	af00      	add	r7, sp, #0
	return XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel);
 800b7a0:	4b03      	ldr	r3, [pc, #12]	; (800b7b0 <at_isRxBuffEmpty+0x14>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	f7ff ffb1 	bl	800b70c <XMC_USIC_CH_RXFIFO_IsEmpty>
 800b7aa:	4603      	mov	r3, r0
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	bd80      	pop	{r7, pc}
 800b7b0:	1ffe8844 	.word	0x1ffe8844

0800b7b4 <at_writePort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_writePort(uint8_t *lu8_data, uint16_t lu16_buffLen)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b084      	sub	sp, #16
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	460b      	mov	r3, r1
 800b7be:	807b      	strh	r3, [r7, #2]
	UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 800b7c0:	2302      	movs	r3, #2
 800b7c2:	73bb      	strb	r3, [r7, #14]
	ret_stat = UART_Transmit(&UART_0, lu8_data, lu16_buffLen);
 800b7c4:	887b      	ldrh	r3, [r7, #2]
 800b7c6:	480c      	ldr	r0, [pc, #48]	; (800b7f8 <at_writePort+0x44>)
 800b7c8:	6879      	ldr	r1, [r7, #4]
 800b7ca:	461a      	mov	r2, r3
 800b7cc:	f7fa f9bc 	bl	8005b48 <UART_Transmit>
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73bb      	strb	r3, [r7, #14]
	uint8_t lu8_ret = 0;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	73fb      	strb	r3, [r7, #15]
	if (UART_STATUS_SUCCESS == ret_stat)
 800b7d8:	7bbb      	ldrb	r3, [r7, #14]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <at_writePort+0x30>
	{
		lu8_ret = E_SUCCESS;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]
 800b7e2:	e004      	b.n	800b7ee <at_writePort+0x3a>
	}
	else if (UART_STATUS_FAILURE == ret_stat)
 800b7e4:	7bbb      	ldrb	r3, [r7, #14]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d101      	bne.n	800b7ee <at_writePort+0x3a>
	{
		lu8_ret = E_FAIL;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	73fb      	strb	r3, [r7, #15]
	}
	return lu8_ret;
 800b7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3710      	adds	r7, #16
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}
 800b7f8:	1ffe8844 	.word	0x1ffe8844

0800b7fc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b083      	sub	sp, #12
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
 800b804:	460b      	mov	r3, r1
 800b806:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b808:	78fb      	ldrb	r3, [r7, #3]
 800b80a:	2201      	movs	r2, #1
 800b80c:	409a      	lsls	r2, r3
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	605a      	str	r2, [r3, #4]
}
 800b812:	370c      	adds	r7, #12
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b083      	sub	sp, #12
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	460b      	mov	r3, r1
 800b826:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800b828:	78fb      	ldrb	r3, [r7, #3]
 800b82a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b82e:	409a      	lsls	r2, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	605a      	str	r2, [r3, #4]
}
 800b834:	370c      	adds	r7, #12
 800b836:	46bd      	mov	sp, r7
 800b838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83c:	4770      	bx	lr
 800b83e:	bf00      	nop

0800b840 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681a      	ldr	r2, [r3, #0]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	7c1b      	ldrb	r3, [r3, #16]
 800b850:	4610      	mov	r0, r2
 800b852:	4619      	mov	r1, r3
 800b854:	f7ff ffd2 	bl	800b7fc <XMC_GPIO_SetOutputHigh>
}
 800b858:	3708      	adds	r7, #8
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop

0800b860 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b082      	sub	sp, #8
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7c1b      	ldrb	r3, [r3, #16]
 800b870:	4610      	mov	r0, r2
 800b872:	4619      	mov	r1, r3
 800b874:	f7ff ffd2 	bl	800b81c <XMC_GPIO_SetOutputLow>
}
 800b878:	3708      	adds	r7, #8
 800b87a:	46bd      	mov	sp, r7
 800b87c:	bd80      	pop	{r7, pc}
 800b87e:	bf00      	nop

0800b880 <delay>:
		{ 	"AT+QGPSLOC=1", 			OK_RSP, 			"+QGPSLOC:", 			CME_ERROR, 		TIMEOUT_300MS 	} 	// 	E_IDX_GET_GPS_DATA
};

/* Blocking delay function */
static void delay(uint32_t delay_ms)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b084      	sub	sp, #16
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800b888:	480f      	ldr	r0, [pc, #60]	; (800b8c8 <delay+0x48>)
 800b88a:	f7fa fd3b 	bl	8006304 <TIMER_ClearEvent>

	delay_cnt = delay_ms * 100000;	//TIMER_DELAY_MUL_FACTOR;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	4a0e      	ldr	r2, [pc, #56]	; (800b8cc <delay+0x4c>)
 800b892:	fb02 f303 	mul.w	r3, r2, r3
 800b896:	60fb      	str	r3, [r7, #12]

	TIMER_SetTimeInterval(&TIMER_0, delay_cnt);
 800b898:	480b      	ldr	r0, [pc, #44]	; (800b8c8 <delay+0x48>)
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	f7fa fc10 	bl	80060c0 <TIMER_SetTimeInterval>

	TIMER_Start(&TIMER_0);
 800b8a0:	4809      	ldr	r0, [pc, #36]	; (800b8c8 <delay+0x48>)
 800b8a2:	f7fa fb93 	bl	8005fcc <TIMER_Start>

	while (!TIMER_GetInterruptStatus(&TIMER_0))
 800b8a6:	bf00      	nop
 800b8a8:	4807      	ldr	r0, [pc, #28]	; (800b8c8 <delay+0x48>)
 800b8aa:	f7fa fd05 	bl	80062b8 <TIMER_GetInterruptStatus>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f083 0301 	eor.w	r3, r3, #1
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d1f6      	bne.n	800b8a8 <delay+0x28>
		;

	TIMER_Stop(&TIMER_0);
 800b8ba:	4803      	ldr	r0, [pc, #12]	; (800b8c8 <delay+0x48>)
 800b8bc:	f7fa fbae 	bl	800601c <TIMER_Stop>
}
 800b8c0:	3710      	adds	r7, #16
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	bd80      	pop	{r7, pc}
 800b8c6:	bf00      	nop
 800b8c8:	1ffe8850 	.word	0x1ffe8850
 800b8cc:	000186a0 	.word	0x000186a0

0800b8d0 <mod_enable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_enable4gModule(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&MODULE_4G_EN_OUT_D);
 800b8d4:	480a      	ldr	r0, [pc, #40]	; (800b900 <mod_enable4gModule+0x30>)
 800b8d6:	f7ff ffb3 	bl	800b840 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800b8da:	480a      	ldr	r0, [pc, #40]	; (800b904 <mod_enable4gModule+0x34>)
 800b8dc:	f7ff ffc0 	bl	800b860 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800b8e0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b8e4:	f7ff ffcc 	bl	800b880 <delay>

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800b8e8:	4806      	ldr	r0, [pc, #24]	; (800b904 <mod_enable4gModule+0x34>)
 800b8ea:	f7ff ffa9 	bl	800b840 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800b8ee:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b8f2:	f7ff ffc5 	bl	800b880 <delay>

	gb_isMqttConnected = false;
 800b8f6:	4b04      	ldr	r3, [pc, #16]	; (800b908 <mod_enable4gModule+0x38>)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	08013690 	.word	0x08013690
 800b904:	0801367c 	.word	0x0801367c
 800b908:	1fff5230 	.word	0x1fff5230

0800b90c <mod_disable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_disable4gModule(void)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&MODULE_4G_EN_OUT_D);
 800b910:	4808      	ldr	r0, [pc, #32]	; (800b934 <mod_disable4gModule+0x28>)
 800b912:	f7ff ffa5 	bl	800b860 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800b916:	4808      	ldr	r0, [pc, #32]	; (800b938 <mod_disable4gModule+0x2c>)
 800b918:	f7ff ff92 	bl	800b840 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800b91c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b920:	f7ff ffae 	bl	800b880 <delay>

	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800b924:	4804      	ldr	r0, [pc, #16]	; (800b938 <mod_disable4gModule+0x2c>)
 800b926:	f7ff ff9b 	bl	800b860 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800b92a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b92e:	f7ff ffa7 	bl	800b880 <delay>

//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800b932:	bd80      	pop	{r7, pc}
 800b934:	08013690 	.word	0x08013690
 800b938:	0801367c 	.word	0x0801367c

0800b93c <mod_open4gModPort>:
 *
 * Return values 	:	en_responseRetCodes_t
 *
 ****************************************************************************/
en_responseRetCodes_t mod_open4gModPort(void)
{
 800b93c:	b580      	push	{r7, lr}
 800b93e:	b082      	sub	sp, #8
 800b940:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800b942:	2304      	movs	r3, #4
 800b944:	71fb      	strb	r3, [r7, #7]

	/* Initialize the UART port */
	len_retStatus = at_initInterface();
 800b946:	f7ff ff05 	bl	800b754 <at_initInterface>
 800b94a:	4603      	mov	r3, r0
 800b94c:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
	{
		/* Do something after successful initialization */
	}

	return len_retStatus;
 800b94e:	79fb      	ldrb	r3, [r7, #7]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3708      	adds	r7, #8
 800b954:	46bd      	mov	sp, r7
 800b956:	bd80      	pop	{r7, pc}

0800b958 <mod_receiveRsp>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_receiveRsp(void)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b084      	sub	sp, #16
 800b95c:	af00      	add	r7, sp, #0
	if (at_isRxBuffEmpty() != true)
 800b95e:	f7ff ff1d 	bl	800b79c <at_isRxBuffEmpty>
 800b962:	4603      	mov	r3, r0
 800b964:	f083 0301 	eor.w	r3, r3, #1
 800b968:	b2db      	uxtb	r3, r3
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	f000 80e8 	beq.w	800bb40 <mod_receiveRsp+0x1e8>
	{
		uint8_t lu8_rcvdByte = 0;
 800b970:	2300      	movs	r3, #0
 800b972:	73fb      	strb	r3, [r7, #15]

		lu8_rcvdByte = at_readPort();
 800b974:	f7ff ff08 	bl	800b788 <at_readPort>
 800b978:	4603      	mov	r3, r0
 800b97a:	73fb      	strb	r3, [r7, #15]
		if (lu8_rcvdByte != 0)
 800b97c:	7bfb      	ldrb	r3, [r7, #15]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	f000 80de 	beq.w	800bb40 <mod_receiveRsp+0x1e8>
		{
			gu8arr_respBuffer[sgu8_respCount++] = lu8_rcvdByte;
 800b984:	4b70      	ldr	r3, [pc, #448]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	1c5a      	adds	r2, r3, #1
 800b98a:	b2d1      	uxtb	r1, r2
 800b98c:	4a6e      	ldr	r2, [pc, #440]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800b98e:	7011      	strb	r1, [r2, #0]
 800b990:	4619      	mov	r1, r3
 800b992:	4a6e      	ldr	r2, [pc, #440]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	5453      	strb	r3, [r2, r1]
			lu8_rcvdByte = 0;
 800b998:	2300      	movs	r3, #0
 800b99a:	73fb      	strb	r3, [r7, #15]

			if (NULL != strstr((const char*) gu8arr_respBuffer, (const char*) QMTSTAT))
 800b99c:	486b      	ldr	r0, [pc, #428]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800b99e:	496c      	ldr	r1, [pc, #432]	; (800bb50 <mod_receiveRsp+0x1f8>)
 800b9a0:	f006 f985 	bl	8011cae <strstr>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d04a      	beq.n	800ba40 <mod_receiveRsp+0xe8>
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800b9aa:	4868      	ldr	r0, [pc, #416]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800b9ac:	213a      	movs	r1, #58	; 0x3a
 800b9ae:	f006 f94e 	bl	8011c4e <strchr>
 800b9b2:	60b8      	str	r0, [r7, #8]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800b9b4:	68b8      	ldr	r0, [r7, #8]
 800b9b6:	210a      	movs	r1, #10
 800b9b8:	f006 f949 	bl	8011c4e <strchr>
 800b9bc:	4603      	mov	r3, r0
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d03d      	beq.n	800ba3e <mod_receiveRsp+0xe6>
				{
					lu8p_saveptr += 2;
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	3302      	adds	r3, #2
 800b9c6:	60bb      	str	r3, [r7, #8]

					uint8_t lu8_result = atoi((char *) lu8p_saveptr);
 800b9c8:	68b8      	ldr	r0, [r7, #8]
 800b9ca:	f005 fe13 	bl	80115f4 <atoi>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	71fb      	strb	r3, [r7, #7]
					if (sgu8_mqttClientId == lu8_result)	//check client Idx
 800b9d2:	4b60      	ldr	r3, [pc, #384]	; (800bb54 <mod_receiveRsp+0x1fc>)
 800b9d4:	781b      	ldrb	r3, [r3, #0]
 800b9d6:	79fa      	ldrb	r2, [r7, #7]
 800b9d8:	429a      	cmp	r2, r3
 800b9da:	d130      	bne.n	800ba3e <mod_receiveRsp+0xe6>
					{
						lu8p_saveptr += 2;
 800b9dc:	68bb      	ldr	r3, [r7, #8]
 800b9de:	3302      	adds	r3, #2
 800b9e0:	60bb      	str	r3, [r7, #8]
						lu8_result = atoi((char *) lu8p_saveptr);	//check error code
 800b9e2:	68b8      	ldr	r0, [r7, #8]
 800b9e4:	f005 fe06 	bl	80115f4 <atoi>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	71fb      	strb	r3, [r7, #7]
						 * 2 --> Sending PINGREQ packet timed out or failed
						 * 3 --> Sending CONNECT packet timed out or failed
						 * 4 --> Receiving CONNACK packet timed out or failed
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
 800b9ec:	79fb      	ldrb	r3, [r7, #7]
 800b9ee:	2b01      	cmp	r3, #1
 800b9f0:	d00b      	beq.n	800ba0a <mod_receiveRsp+0xb2>
 800b9f2:	79fb      	ldrb	r3, [r7, #7]
 800b9f4:	2b02      	cmp	r3, #2
 800b9f6:	d008      	beq.n	800ba0a <mod_receiveRsp+0xb2>
 800b9f8:	79fb      	ldrb	r3, [r7, #7]
 800b9fa:	2b03      	cmp	r3, #3
 800b9fc:	d005      	beq.n	800ba0a <mod_receiveRsp+0xb2>
								|| (4 == lu8_result) || (6 == lu8_result))
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	2b04      	cmp	r3, #4
 800ba02:	d002      	beq.n	800ba0a <mod_receiveRsp+0xb2>
 800ba04:	79fb      	ldrb	r3, [r7, #7]
 800ba06:	2b06      	cmp	r3, #6
 800ba08:	d10b      	bne.n	800ba22 <mod_receiveRsp+0xca>
						{
							if (gb_isMqttConnected == true)
 800ba0a:	4b53      	ldr	r3, [pc, #332]	; (800bb58 <mod_receiveRsp+0x200>)
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d006      	beq.n	800ba20 <mod_receiveRsp+0xc8>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
 800ba12:	4b52      	ldr	r3, [pc, #328]	; (800bb5c <mod_receiveRsp+0x204>)
 800ba14:	2209      	movs	r2, #9
 800ba16:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800ba18:	4b4f      	ldr	r3, [pc, #316]	; (800bb58 <mod_receiveRsp+0x200>)
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	701a      	strb	r2, [r3, #0]
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
								|| (4 == lu8_result) || (6 == lu8_result))
						{
							if (gb_isMqttConnected == true)
 800ba1e:	e00e      	b.n	800ba3e <mod_receiveRsp+0xe6>
 800ba20:	e00d      	b.n	800ba3e <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
								gb_isMqttConnected = false;
							}
						}
						else if (8 == lu8_result)//The client closes the MQTT connection
 800ba22:	79fb      	ldrb	r3, [r7, #7]
 800ba24:	2b08      	cmp	r3, #8
 800ba26:	d10a      	bne.n	800ba3e <mod_receiveRsp+0xe6>
						{
							if (gb_isMqttConnected == true)
 800ba28:	4b4b      	ldr	r3, [pc, #300]	; (800bb58 <mod_receiveRsp+0x200>)
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d006      	beq.n	800ba3e <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_CONNECT_STATE;
 800ba30:	4b4a      	ldr	r3, [pc, #296]	; (800bb5c <mod_receiveRsp+0x204>)
 800ba32:	220b      	movs	r2, #11
 800ba34:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800ba36:	4b48      	ldr	r3, [pc, #288]	; (800bb58 <mod_receiveRsp+0x200>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	701a      	strb	r2, [r3, #0]
 800ba3c:	e080      	b.n	800bb40 <mod_receiveRsp+0x1e8>
 800ba3e:	e07f      	b.n	800bb40 <mod_receiveRsp+0x1e8>
						}
					}
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800ba40:	4842      	ldr	r0, [pc, #264]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba42:	4947      	ldr	r1, [pc, #284]	; (800bb60 <mod_receiveRsp+0x208>)
 800ba44:	f006 f933 	bl	8011cae <strstr>
 800ba48:	4603      	mov	r3, r0
							}
						}
					}
				}
			}
			else if ((NULL
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d015      	beq.n	800ba7a <mod_receiveRsp+0x122>
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800ba4e:	483f      	ldr	r0, [pc, #252]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba50:	213a      	movs	r1, #58	; 0x3a
 800ba52:	f006 f8fc 	bl	8011c4e <strchr>
 800ba56:	6038      	str	r0, [r7, #0]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800ba58:	6838      	ldr	r0, [r7, #0]
 800ba5a:	210a      	movs	r1, #10
 800ba5c:	f006 f8f7 	bl	8011c4e <strchr>
 800ba60:	4603      	mov	r3, r0
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d008      	beq.n	800ba78 <mod_receiveRsp+0x120>
				{
					sgu8_respCount = 0;
 800ba66:	4b38      	ldr	r3, [pc, #224]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800ba68:	2200      	movs	r2, #0
 800ba6a:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800ba6c:	4837      	ldr	r0, [pc, #220]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba6e:	2100      	movs	r1, #0
 800ba70:	2240      	movs	r2, #64	; 0x40
 800ba72:	f005 fdfa 	bl	801166a <memset>
 800ba76:	e063      	b.n	800bb40 <mod_receiveRsp+0x1e8>
 800ba78:	e062      	b.n	800bb40 <mod_receiveRsp+0x1e8>
				}
			}
			else if (sgu8_respCount == 1)
 800ba7a:	4b33      	ldr	r3, [pc, #204]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800ba7c:	781b      	ldrb	r3, [r3, #0]
 800ba7e:	2b01      	cmp	r3, #1
 800ba80:	d110      	bne.n	800baa4 <mod_receiveRsp+0x14c>
			{
				if ((gu8arr_respBuffer[0] == 0xFF) || (gu8arr_respBuffer[0] == '\n'))
 800ba82:	4b32      	ldr	r3, [pc, #200]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba84:	781b      	ldrb	r3, [r3, #0]
 800ba86:	2bff      	cmp	r3, #255	; 0xff
 800ba88:	d003      	beq.n	800ba92 <mod_receiveRsp+0x13a>
 800ba8a:	4b30      	ldr	r3, [pc, #192]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	2b0a      	cmp	r3, #10
 800ba90:	d156      	bne.n	800bb40 <mod_receiveRsp+0x1e8>
				{
					sgu8_respCount = 0;
 800ba92:	4b2d      	ldr	r3, [pc, #180]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800ba98:	482c      	ldr	r0, [pc, #176]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	2240      	movs	r2, #64	; 0x40
 800ba9e:	f005 fde4 	bl	801166a <memset>
 800baa2:	e04d      	b.n	800bb40 <mod_receiveRsp+0x1e8>
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer,
 800baa4:	4829      	ldr	r0, [pc, #164]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800baa6:	492f      	ldr	r1, [pc, #188]	; (800bb64 <mod_receiveRsp+0x20c>)
 800baa8:	f006 f901 	bl	8011cae <strstr>
 800baac:	4603      	mov	r3, r0
				{
					sgu8_respCount = 0;
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
				}
			}
			else if ((NULL
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d012      	beq.n	800bad8 <mod_receiveRsp+0x180>
					!= strstr((const char*) gu8arr_respBuffer,
							(const char*) "QIND: SMS DONE\r\n")))
			{
				gst_deviceStatus.mb_ismodemPwrDwn = false;
 800bab2:	4b2d      	ldr	r3, [pc, #180]	; (800bb68 <mod_receiveRsp+0x210>)
 800bab4:	2200      	movs	r2, #0
 800bab6:	701a      	strb	r2, [r3, #0]
				sgu8_respCount = 0;
 800bab8:	4b23      	ldr	r3, [pc, #140]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800baba:	2200      	movs	r2, #0
 800babc:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800babe:	4823      	ldr	r0, [pc, #140]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800bac0:	2100      	movs	r1, #0
 800bac2:	2240      	movs	r2, #64	; 0x40
 800bac4:	f005 fdd1 	bl	801166a <memset>
				sen_4gRunState = E_SET_URC_PORT_STATE;
 800bac8:	4b24      	ldr	r3, [pc, #144]	; (800bb5c <mod_receiveRsp+0x204>)
 800baca:	2201      	movs	r2, #1
 800bacc:	701a      	strb	r2, [r3, #0]
				delay(2000);
 800bace:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bad2:	f7ff fed5 	bl	800b880 <delay>
 800bad6:	e033      	b.n	800bb40 <mod_receiveRsp+0x1e8>
			}
			else if (RDY_SIZE == sgu8_respCount)
 800bad8:	4b1b      	ldr	r3, [pc, #108]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800bada:	781b      	ldrb	r3, [r3, #0]
 800badc:	2b07      	cmp	r3, #7
 800bade:	d119      	bne.n	800bb14 <mod_receiveRsp+0x1bc>
			{
				if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) READY)))
 800bae0:	481a      	ldr	r0, [pc, #104]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800bae2:	4922      	ldr	r1, [pc, #136]	; (800bb6c <mod_receiveRsp+0x214>)
 800bae4:	f006 f8e3 	bl	8011cae <strstr>
 800bae8:	4603      	mov	r3, r0
 800baea:	2b00      	cmp	r3, #0
 800baec:	d028      	beq.n	800bb40 <mod_receiveRsp+0x1e8>
				{
					gst_deviceStatus.mb_ismodemPwrDwn = false;
 800baee:	4b1e      	ldr	r3, [pc, #120]	; (800bb68 <mod_receiveRsp+0x210>)
 800baf0:	2200      	movs	r2, #0
 800baf2:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800baf4:	4b14      	ldr	r3, [pc, #80]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800baf6:	2200      	movs	r2, #0
 800baf8:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bafa:	4814      	ldr	r0, [pc, #80]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800bafc:	2100      	movs	r1, #0
 800bafe:	2240      	movs	r2, #64	; 0x40
 800bb00:	f005 fdb3 	bl	801166a <memset>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800bb04:	4b15      	ldr	r3, [pc, #84]	; (800bb5c <mod_receiveRsp+0x204>)
 800bb06:	2202      	movs	r2, #2
 800bb08:	701a      	strb	r2, [r3, #0]
					delay(2000);
 800bb0a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bb0e:	f7ff feb7 	bl	800b880 <delay>
 800bb12:	e015      	b.n	800bb40 <mod_receiveRsp+0x1e8>
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
 800bb14:	4b0c      	ldr	r3, [pc, #48]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800bb16:	781b      	ldrb	r3, [r3, #0]
 800bb18:	2b10      	cmp	r3, #16
 800bb1a:	d111      	bne.n	800bb40 <mod_receiveRsp+0x1e8>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 800bb1c:	480b      	ldr	r0, [pc, #44]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800bb1e:	4914      	ldr	r1, [pc, #80]	; (800bb70 <mod_receiveRsp+0x218>)
 800bb20:	f006 f8c5 	bl	8011cae <strstr>
 800bb24:	4603      	mov	r3, r0
					delay(2000);
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
			{
				if ((NULL
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d00a      	beq.n	800bb40 <mod_receiveRsp+0x1e8>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
				{
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800bb2a:	4b0f      	ldr	r3, [pc, #60]	; (800bb68 <mod_receiveRsp+0x210>)
 800bb2c:	2201      	movs	r2, #1
 800bb2e:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <mod_receiveRsp+0x1f0>)
 800bb32:	2200      	movs	r2, #0
 800bb34:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bb36:	4805      	ldr	r0, [pc, #20]	; (800bb4c <mod_receiveRsp+0x1f4>)
 800bb38:	2100      	movs	r1, #0
 800bb3a:	2240      	movs	r2, #64	; 0x40
 800bb3c:	f005 fd95 	bl	801166a <memset>
				}
			}
		}
	}
}
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	1fff4764 	.word	0x1fff4764
 800bb4c:	1fff46c4 	.word	0x1fff46c4
 800bb50:	08013cec 	.word	0x08013cec
 800bb54:	1fff4765 	.word	0x1fff4765
 800bb58:	1fff5230 	.word	0x1fff5230
 800bb5c:	1ffea4d8 	.word	0x1ffea4d8
 800bb60:	08013cf8 	.word	0x08013cf8
 800bb64:	08013d04 	.word	0x08013d04
 800bb68:	1ffea4dc 	.word	0x1ffea4dc
 800bb6c:	08013d18 	.word	0x08013d18
 800bb70:	08013d20 	.word	0x08013d20

0800bb74 <mod_sendCmd>:
 *
 * Return values 	: 	en_responseRetCodes_t
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_sendCmd(uint8_t *lu8p_data, uint16_t lu16_len)
{
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b084      	sub	sp, #16
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	6078      	str	r0, [r7, #4]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	807b      	strh	r3, [r7, #2]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bb80:	2304      	movs	r3, #4
 800bb82:	73fb      	strb	r3, [r7, #15]
	uint8_t lu8_ret = 0;
 800bb84:	2300      	movs	r3, #0
 800bb86:	73bb      	strb	r3, [r7, #14]

	lu8_ret = at_writePort(lu8p_data, lu16_len);
 800bb88:	887b      	ldrh	r3, [r7, #2]
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	f7ff fe11 	bl	800b7b4 <at_writePort>
 800bb92:	4603      	mov	r3, r0
 800bb94:	73bb      	strb	r3, [r7, #14]
	if (E_SUCCESS == lu8_ret)
 800bb96:	7bbb      	ldrb	r3, [r7, #14]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d102      	bne.n	800bba2 <mod_sendCmd+0x2e>
	{
		len_retStatus = E_RET_SUCCESS;
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	73fb      	strb	r3, [r7, #15]
 800bba0:	e001      	b.n	800bba6 <mod_sendCmd+0x32>
	}
	else
	{
		len_retStatus = E_RET_WRITE_ERROR;
 800bba2:	2305      	movs	r3, #5
 800bba4:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 800bba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3710      	adds	r7, #16
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <mod_sendCmdGetRsp>:
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ***************************************************************************/
static en_responseRetCodes_t mod_sendCmdGetRsp(en_ATCommandIdx_t len_ATCmdIdx,
		uint8_t *lu8p_cmdParam)
{
 800bbb0:	b590      	push	{r4, r7, lr}
 800bbb2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 800bbb6:	af00      	add	r7, sp, #0
 800bbb8:	4602      	mov	r2, r0
 800bbba:	463b      	mov	r3, r7
 800bbbc:	6019      	str	r1, [r3, #0]
 800bbbe:	1dfb      	adds	r3, r7, #7
 800bbc0:	701a      	strb	r2, [r3, #0]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bbc2:	2304      	movs	r3, #4
 800bbc4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint8_t lu8arr_sendCmdBuff[SEND_AT_CMD_BUFF];
	uint16_t lu16_BufferSize = 0;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
	uint8_t *lu8p_Ptr = NULL;
 800bbce:	2300      	movs	r3, #0
 800bbd0:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	uint8_t *lu8p_saveptr = NULL;
 800bbd4:	f107 030c 	add.w	r3, r7, #12
 800bbd8:	2200      	movs	r2, #0
 800bbda:	601a      	str	r2, [r3, #0]

	switch (sen_sendCmdGetRespState)
 800bbdc:	4bbe      	ldr	r3, [pc, #760]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d010      	beq.n	800bc06 <mod_sendCmdGetRsp+0x56>
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d070      	beq.n	800bcca <mod_sendCmdGetRsp+0x11a>
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f040 8267 	bne.w	800c0bc <mod_sendCmdGetRsp+0x50c>
	{
		case E_AT_CMD_IDLE_STATE:
			sgu8_respCount = 0;
 800bbee:	4bbb      	ldr	r3, [pc, #748]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	701a      	strb	r2, [r3, #0]
			memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bbf4:	48ba      	ldr	r0, [pc, #744]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bbf6:	2100      	movs	r1, #0
 800bbf8:	2240      	movs	r2, #64	; 0x40
 800bbfa:	f005 fd36 	bl	801166a <memset>
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bbfe:	4bb6      	ldr	r3, [pc, #728]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bc00:	2201      	movs	r2, #1
 800bc02:	701a      	strb	r2, [r3, #0]
		break;
 800bc04:	e261      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));
 800bc06:	f107 0310 	add.w	r3, r7, #16
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bc12:	f005 fd2a 	bl	801166a <memset>

			strncpy((char *) lu8arr_sendCmdBuff,
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 800bc16:	1dfb      	adds	r3, r7, #7
 800bc18:	781b      	ldrb	r3, [r3, #0]
 800bc1a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bc1e:	fb02 f303 	mul.w	r3, r2, r3
 800bc22:	4ab0      	ldr	r2, [pc, #704]	; (800bee4 <mod_sendCmdGetRsp+0x334>)
 800bc24:	189c      	adds	r4, r3, r2
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));
 800bc26:	1dfb      	adds	r3, r7, #7
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bc2e:	fb02 f303 	mul.w	r3, r2, r3
 800bc32:	4aac      	ldr	r2, [pc, #688]	; (800bee4 <mod_sendCmdGetRsp+0x334>)
 800bc34:	4413      	add	r3, r2
		break;

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));

			strncpy((char *) lu8arr_sendCmdBuff,
 800bc36:	4618      	mov	r0, r3
 800bc38:	f006 f81f 	bl	8011c7a <strlen>
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	f107 0310 	add.w	r3, r7, #16
 800bc42:	4618      	mov	r0, r3
 800bc44:	4621      	mov	r1, r4
 800bc46:	f006 f820 	bl	8011c8a <strncpy>
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));

			if (NULL != lu8p_cmdParam)
 800bc4a:	463b      	mov	r3, r7
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d006      	beq.n	800bc60 <mod_sendCmdGetRsp+0xb0>
			{
				strcat((char *) lu8arr_sendCmdBuff, (char *) lu8p_cmdParam);
 800bc52:	f107 0210 	add.w	r2, r7, #16
 800bc56:	463b      	mov	r3, r7
 800bc58:	4610      	mov	r0, r2
 800bc5a:	6819      	ldr	r1, [r3, #0]
 800bc5c:	f005 ffe8 	bl	8011c30 <strcat>
			}

			lu16_BufferSize = strlen((char *) lu8arr_sendCmdBuff);
 800bc60:	f107 0310 	add.w	r3, r7, #16
 800bc64:	4618      	mov	r0, r3
 800bc66:	f006 f808 	bl	8011c7a <strlen>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
			len_retStatus = mod_sendCmd(lu8arr_sendCmdBuff, lu16_BufferSize);
 800bc70:	f107 0210 	add.w	r2, r7, #16
 800bc74:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 800bc78:	4610      	mov	r0, r2
 800bc7a:	4619      	mov	r1, r3
 800bc7c:	f7ff ff7a 	bl	800bb74 <mod_sendCmd>
 800bc80:	4603      	mov	r3, r0
 800bc82:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			if (E_RET_SUCCESS == len_retStatus)
 800bc86:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d11c      	bne.n	800bcc8 <mod_sendCmdGetRsp+0x118>
			{
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bc8e:	4894      	ldr	r0, [pc, #592]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bc90:	2100      	movs	r1, #0
 800bc92:	2240      	movs	r2, #64	; 0x40
 800bc94:	f005 fce9 	bl	801166a <memset>
				sgu8_respCount = 0;
 800bc98:	4b90      	ldr	r3, [pc, #576]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	701a      	strb	r2, [r3, #0]
				tm_setResponseTime(gcst_ATCmdTable[len_ATCmdIdx].mu32_respTimeoutInMs);
 800bc9e:	1dfb      	adds	r3, r7, #7
 800bca0:	781b      	ldrb	r3, [r3, #0]
 800bca2:	4a90      	ldr	r2, [pc, #576]	; (800bee4 <mod_sendCmdGetRsp+0x334>)
 800bca4:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800bca8:	fb01 f303 	mul.w	r3, r1, r3
 800bcac:	4413      	add	r3, r2
 800bcae:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	f7f4 fba9 	bl	800040c <tm_setResponseTime>
				len_retStatus = E_RET_INPROGRESS;
 800bcba:	2304      	movs	r3, #4
 800bcbc:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
				sen_sendCmdGetRespState = E_AT_CMD_RECV_INPROG_STATE;
 800bcc0:	4b85      	ldr	r3, [pc, #532]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bcc2:	2202      	movs	r2, #2
 800bcc4:	701a      	strb	r2, [r3, #0]
			}
		break;
 800bcc6:	e200      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>
 800bcc8:	e1ff      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
 800bcca:	4b84      	ldr	r3, [pc, #528]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	f000 81dd 	beq.w	800c08e <mod_sendCmdGetRsp+0x4de>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 800bcd4:	1dfb      	adds	r3, r7, #7
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bcdc:	fb02 f303 	mul.w	r3, r2, r3
 800bce0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800bce4:	4a7f      	ldr	r2, [pc, #508]	; (800bee4 <mod_sendCmdGetRsp+0x334>)
 800bce6:	4413      	add	r3, r2

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800bce8:	487d      	ldr	r0, [pc, #500]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bcea:	4619      	mov	r1, r3
 800bcec:	f005 ffdf 	bl	8011cae <strstr>
 800bcf0:	4603      	mov	r3, r0
		break;

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d00b      	beq.n	800bd0e <mod_sendCmdGetRsp+0x15e>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
				{
					sgu8_respCount = 0;
 800bcf6:	4b79      	ldr	r3, [pc, #484]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
 800bcfc:	f7f4 fba0 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_SUCCESS;
 800bd00:	2300      	movs	r3, #0
 800bd02:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bd06:	4b74      	ldr	r3, [pc, #464]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bd08:	2201      	movs	r2, #1
 800bd0a:	701a      	strb	r2, [r3, #0]
 800bd0c:	e1d5      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
				}

				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 800bd0e:	4874      	ldr	r0, [pc, #464]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bd10:	4975      	ldr	r1, [pc, #468]	; (800bee8 <mod_sendCmdGetRsp+0x338>)
 800bd12:	f005 ffcc 	bl	8011cae <strstr>
 800bd16:	4603      	mov	r3, r0
					tm_clearResponseTime();
					len_retStatus = E_RET_SUCCESS;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}

				else if ((NULL
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d01e      	beq.n	800bd5a <mod_sendCmdGetRsp+0x1aa>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bd1c:	4870      	ldr	r0, [pc, #448]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bd1e:	213a      	movs	r1, #58	; 0x3a
 800bd20:	f005 ff95 	bl	8011c4e <strchr>
 800bd24:	4602      	mov	r2, r0
 800bd26:	f107 030c 	add.w	r3, r7, #12
 800bd2a:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bd2c:	f107 030c 	add.w	r3, r7, #12
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	4618      	mov	r0, r3
 800bd34:	210a      	movs	r1, #10
 800bd36:	f005 ff8a 	bl	8011c4e <strchr>
 800bd3a:	4603      	mov	r3, r0
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f000 81bc 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bd42:	4b66      	ldr	r3, [pc, #408]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bd48:	f7f4 fb7a 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bd52:	4b61      	ldr	r3, [pc, #388]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bd54:	2201      	movs	r2, #1
 800bd56:	701a      	strb	r2, [r3, #0]
 800bd58:	e1af      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 800bd5a:	4861      	ldr	r0, [pc, #388]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bd5c:	4963      	ldr	r1, [pc, #396]	; (800beec <mod_sendCmdGetRsp+0x33c>)
 800bd5e:	f005 ffa6 	bl	8011cae <strstr>
 800bd62:	4603      	mov	r3, r0
//						sgu8_respCount = 0;
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d01e      	beq.n	800bda6 <mod_sendCmdGetRsp+0x1f6>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bd68:	485d      	ldr	r0, [pc, #372]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bd6a:	213a      	movs	r1, #58	; 0x3a
 800bd6c:	f005 ff6f 	bl	8011c4e <strchr>
 800bd70:	4602      	mov	r2, r0
 800bd72:	f107 030c 	add.w	r3, r7, #12
 800bd76:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bd78:	f107 030c 	add.w	r3, r7, #12
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	4618      	mov	r0, r3
 800bd80:	210a      	movs	r1, #10
 800bd82:	f005 ff64 	bl	8011c4e <strchr>
 800bd86:	4603      	mov	r3, r0
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f000 8196 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bd8e:	4b53      	ldr	r3, [pc, #332]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bd90:	2200      	movs	r2, #0
 800bd92:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bd94:	f7f4 fb54 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bd98:	2300      	movs	r3, #0
 800bd9a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bd9e:	4b4e      	ldr	r3, [pc, #312]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bda0:	2201      	movs	r2, #1
 800bda2:	701a      	strb	r2, [r3, #0]
 800bda4:	e189      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 800bda6:	484e      	ldr	r0, [pc, #312]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bda8:	4951      	ldr	r1, [pc, #324]	; (800bef0 <mod_sendCmdGetRsp+0x340>)
 800bdaa:	f005 ff80 	bl	8011cae <strstr>
 800bdae:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d01e      	beq.n	800bdf2 <mod_sendCmdGetRsp+0x242>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bdb4:	484a      	ldr	r0, [pc, #296]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bdb6:	213a      	movs	r1, #58	; 0x3a
 800bdb8:	f005 ff49 	bl	8011c4e <strchr>
 800bdbc:	4602      	mov	r2, r0
 800bdbe:	f107 030c 	add.w	r3, r7, #12
 800bdc2:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bdc4:	f107 030c 	add.w	r3, r7, #12
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4618      	mov	r0, r3
 800bdcc:	210a      	movs	r1, #10
 800bdce:	f005 ff3e 	bl	8011c4e <strchr>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	f000 8170 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bdda:	4b40      	ldr	r3, [pc, #256]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bddc:	2200      	movs	r2, #0
 800bdde:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bde0:	f7f4 fb2e 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bde4:	2300      	movs	r3, #0
 800bde6:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bdea:	4b3b      	ldr	r3, [pc, #236]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bdec:	2201      	movs	r2, #1
 800bdee:	701a      	strb	r2, [r3, #0]
 800bdf0:	e163      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 800bdf2:	483b      	ldr	r0, [pc, #236]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800bdf4:	493f      	ldr	r1, [pc, #252]	; (800bef4 <mod_sendCmdGetRsp+0x344>)
 800bdf6:	f005 ff5a 	bl	8011cae <strstr>
 800bdfa:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d01e      	beq.n	800be3e <mod_sendCmdGetRsp+0x28e>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800be00:	4837      	ldr	r0, [pc, #220]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800be02:	213a      	movs	r1, #58	; 0x3a
 800be04:	f005 ff23 	bl	8011c4e <strchr>
 800be08:	4602      	mov	r2, r0
 800be0a:	f107 030c 	add.w	r3, r7, #12
 800be0e:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800be10:	f107 030c 	add.w	r3, r7, #12
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	4618      	mov	r0, r3
 800be18:	210a      	movs	r1, #10
 800be1a:	f005 ff18 	bl	8011c4e <strchr>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	f000 814a 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800be26:	4b2d      	ldr	r3, [pc, #180]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800be28:	2200      	movs	r2, #0
 800be2a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800be2c:	f7f4 fb08 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800be30:	2300      	movs	r3, #0
 800be32:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800be36:	4b28      	ldr	r3, [pc, #160]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800be38:	2201      	movs	r2, #1
 800be3a:	701a      	strb	r2, [r3, #0]
 800be3c:	e13d      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 800be3e:	4828      	ldr	r0, [pc, #160]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800be40:	492d      	ldr	r1, [pc, #180]	; (800bef8 <mod_sendCmdGetRsp+0x348>)
 800be42:	f005 ff34 	bl	8011cae <strstr>
 800be46:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d01e      	beq.n	800be8a <mod_sendCmdGetRsp+0x2da>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800be4c:	4824      	ldr	r0, [pc, #144]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800be4e:	213a      	movs	r1, #58	; 0x3a
 800be50:	f005 fefd 	bl	8011c4e <strchr>
 800be54:	4602      	mov	r2, r0
 800be56:	f107 030c 	add.w	r3, r7, #12
 800be5a:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800be5c:	f107 030c 	add.w	r3, r7, #12
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	4618      	mov	r0, r3
 800be64:	210a      	movs	r1, #10
 800be66:	f005 fef2 	bl	8011c4e <strchr>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	f000 8124 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800be72:	4b1a      	ldr	r3, [pc, #104]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800be74:	2200      	movs	r2, #0
 800be76:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800be78:	f7f4 fae2 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800be7c:	2300      	movs	r3, #0
 800be7e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800be82:	4b15      	ldr	r3, [pc, #84]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800be84:	2201      	movs	r2, #1
 800be86:	701a      	strb	r2, [r3, #0]
 800be88:	e117      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800be8a:	4815      	ldr	r0, [pc, #84]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800be8c:	491b      	ldr	r1, [pc, #108]	; (800befc <mod_sendCmdGetRsp+0x34c>)
 800be8e:	f005 ff0e 	bl	8011cae <strstr>
 800be92:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800be94:	2b00      	cmp	r3, #0
 800be96:	d033      	beq.n	800bf00 <mod_sendCmdGetRsp+0x350>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800be98:	4811      	ldr	r0, [pc, #68]	; (800bee0 <mod_sendCmdGetRsp+0x330>)
 800be9a:	213a      	movs	r1, #58	; 0x3a
 800be9c:	f005 fed7 	bl	8011c4e <strchr>
 800bea0:	4602      	mov	r2, r0
 800bea2:	f107 030c 	add.w	r3, r7, #12
 800bea6:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bea8:	f107 030c 	add.w	r3, r7, #12
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4618      	mov	r0, r3
 800beb0:	210a      	movs	r1, #10
 800beb2:	f005 fecc 	bl	8011c4e <strchr>
 800beb6:	4603      	mov	r3, r0
 800beb8:	2b00      	cmp	r3, #0
 800beba:	f000 80fe 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bebe:	4b07      	ldr	r3, [pc, #28]	; (800bedc <mod_sendCmdGetRsp+0x32c>)
 800bec0:	2200      	movs	r2, #0
 800bec2:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bec4:	f7f4 fabc 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bec8:	2300      	movs	r3, #0
 800beca:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bece:	4b02      	ldr	r3, [pc, #8]	; (800bed8 <mod_sendCmdGetRsp+0x328>)
 800bed0:	2201      	movs	r2, #1
 800bed2:	701a      	strb	r2, [r3, #0]
 800bed4:	e0f1      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
 800bed6:	bf00      	nop
 800bed8:	1ffea4d9 	.word	0x1ffea4d9
 800bedc:	1fff4764 	.word	0x1fff4764
 800bee0:	1fff46c4 	.word	0x1fff46c4
 800bee4:	1ffea4e8 	.word	0x1ffea4e8
 800bee8:	08013d30 	.word	0x08013d30
 800beec:	08013d3c 	.word	0x08013d3c
 800bef0:	08013d48 	.word	0x08013d48
 800bef4:	08013d54 	.word	0x08013d54
 800bef8:	08013d60 	.word	0x08013d60
 800befc:	08013cf8 	.word	0x08013cf8
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800bf00:	4875      	ldr	r0, [pc, #468]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bf02:	4976      	ldr	r1, [pc, #472]	; (800c0dc <mod_sendCmdGetRsp+0x52c>)
 800bf04:	f005 fed3 	bl	8011cae <strstr>
 800bf08:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d038      	beq.n	800bf80 <mod_sendCmdGetRsp+0x3d0>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CME_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bf0e:	4872      	ldr	r0, [pc, #456]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bf10:	213a      	movs	r1, #58	; 0x3a
 800bf12:	f005 fe9c 	bl	8011c4e <strchr>
 800bf16:	4602      	mov	r2, r0
 800bf18:	f107 030c 	add.w	r3, r7, #12
 800bf1c:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bf1e:	f107 030c 	add.w	r3, r7, #12
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4618      	mov	r0, r3
 800bf26:	210a      	movs	r1, #10
 800bf28:	f005 fe91 	bl	8011c4e <strchr>
 800bf2c:	4603      	mov	r3, r0
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	f000 80c3 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800bf34:	f107 030c 	add.w	r3, r7, #12
 800bf38:	4867      	ldr	r0, [pc, #412]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bf3a:	4969      	ldr	r1, [pc, #420]	; (800c0e0 <mod_sendCmdGetRsp+0x530>)
 800bf3c:	461a      	mov	r2, r3
 800bf3e:	f005 ff2c 	bl	8011d9a <strtok_r>
 800bf42:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800bf46:	f107 030c 	add.w	r3, r7, #12
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	1c5a      	adds	r2, r3, #1
 800bf4e:	f107 030c 	add.w	r3, r7, #12
 800bf52:	601a      	str	r2, [r3, #0]

						sgu16_cmeError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800bf54:	f107 030c 	add.w	r3, r7, #12
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f005 fb4a 	bl	80115f4 <atoi>
 800bf60:	4603      	mov	r3, r0
 800bf62:	b29a      	uxth	r2, r3
 800bf64:	4b5f      	ldr	r3, [pc, #380]	; (800c0e4 <mod_sendCmdGetRsp+0x534>)
 800bf66:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800bf68:	4b5f      	ldr	r3, [pc, #380]	; (800c0e8 <mod_sendCmdGetRsp+0x538>)
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bf6e:	f7f4 fa67 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CME_ERROR;
 800bf72:	230b      	movs	r3, #11
 800bf74:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bf78:	4b5c      	ldr	r3, [pc, #368]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800bf7a:	2201      	movs	r2, #1
 800bf7c:	701a      	strb	r2, [r3, #0]
 800bf7e:	e09c      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800bf80:	4855      	ldr	r0, [pc, #340]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bf82:	495b      	ldr	r1, [pc, #364]	; (800c0f0 <mod_sendCmdGetRsp+0x540>)
 800bf84:	f005 fe93 	bl	8011cae <strstr>
 800bf88:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_CME_ERROR;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d038      	beq.n	800c000 <mod_sendCmdGetRsp+0x450>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CMS_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bf8e:	4852      	ldr	r0, [pc, #328]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bf90:	213a      	movs	r1, #58	; 0x3a
 800bf92:	f005 fe5c 	bl	8011c4e <strchr>
 800bf96:	4602      	mov	r2, r0
 800bf98:	f107 030c 	add.w	r3, r7, #12
 800bf9c:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bf9e:	f107 030c 	add.w	r3, r7, #12
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	210a      	movs	r1, #10
 800bfa8:	f005 fe51 	bl	8011c4e <strchr>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 8083 	beq.w	800c0ba <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800bfb4:	f107 030c 	add.w	r3, r7, #12
 800bfb8:	4847      	ldr	r0, [pc, #284]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800bfba:	4949      	ldr	r1, [pc, #292]	; (800c0e0 <mod_sendCmdGetRsp+0x530>)
 800bfbc:	461a      	mov	r2, r3
 800bfbe:	f005 feec 	bl	8011d9a <strtok_r>
 800bfc2:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800bfc6:	f107 030c 	add.w	r3, r7, #12
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	1c5a      	adds	r2, r3, #1
 800bfce:	f107 030c 	add.w	r3, r7, #12
 800bfd2:	601a      	str	r2, [r3, #0]

						sgu16_cmsError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800bfd4:	f107 030c 	add.w	r3, r7, #12
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	4618      	mov	r0, r3
 800bfdc:	f005 fb0a 	bl	80115f4 <atoi>
 800bfe0:	4603      	mov	r3, r0
 800bfe2:	b29a      	uxth	r2, r3
 800bfe4:	4b43      	ldr	r3, [pc, #268]	; (800c0f4 <mod_sendCmdGetRsp+0x544>)
 800bfe6:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800bfe8:	4b3f      	ldr	r3, [pc, #252]	; (800c0e8 <mod_sendCmdGetRsp+0x538>)
 800bfea:	2200      	movs	r2, #0
 800bfec:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bfee:	f7f4 fa27 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CMS_ERROR;
 800bff2:	230c      	movs	r3, #12
 800bff4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bff8:	4b3c      	ldr	r3, [pc, #240]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800bffa:	2201      	movs	r2, #1
 800bffc:	701a      	strb	r2, [r3, #0]
 800bffe:	e05c      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
 800c000:	1dfb      	adds	r3, r7, #7
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	2b1b      	cmp	r3, #27
 800c006:	d112      	bne.n	800c02e <mod_sendCmdGetRsp+0x47e>
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c008:	4833      	ldr	r0, [pc, #204]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800c00a:	2141      	movs	r1, #65	; 0x41
 800c00c:	f005 fe1f 	bl	8011c4e <strchr>
 800c010:	4603      	mov	r3, r0
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
				{
					if ((NULL
 800c012:	2b00      	cmp	r3, #0
 800c014:	d051      	beq.n	800c0ba <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) "A")))
					{
						sgu8_respCount = 0;
 800c016:	4b34      	ldr	r3, [pc, #208]	; (800c0e8 <mod_sendCmdGetRsp+0x538>)
 800c018:	2200      	movs	r2, #0
 800c01a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c01c:	f7f4 fa10 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c020:	2300      	movs	r3, #0
 800c022:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c026:	4b31      	ldr	r3, [pc, #196]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800c028:	2201      	movs	r2, #1
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	e045      	b.n	800c0ba <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c02e:	1dfb      	adds	r3, r7, #7
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c036:	fb02 f303 	mul.w	r3, r2, r3
 800c03a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c03e:	4a2e      	ldr	r2, [pc, #184]	; (800c0f8 <mod_sendCmdGetRsp+0x548>)
 800c040:	4413      	add	r3, r2
 800c042:	3304      	adds	r3, #4
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
 800c044:	482d      	ldr	r0, [pc, #180]	; (800c0fc <mod_sendCmdGetRsp+0x54c>)
 800c046:	4619      	mov	r1, r3
 800c048:	f005 fe31 	bl	8011cae <strstr>
 800c04c:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d133      	bne.n	800c0ba <mod_sendCmdGetRsp+0x50a>
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c052:	1dfb      	adds	r3, r7, #7
 800c054:	781b      	ldrb	r3, [r3, #0]
 800c056:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c05a:	fb02 f303 	mul.w	r3, r2, r3
 800c05e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c062:	4a25      	ldr	r2, [pc, #148]	; (800c0f8 <mod_sendCmdGetRsp+0x548>)
 800c064:	4413      	add	r3, r2
 800c066:	3304      	adds	r3, #4
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c068:	481b      	ldr	r0, [pc, #108]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800c06a:	4619      	mov	r1, r3
 800c06c:	f005 fe1f 	bl	8011cae <strstr>
 800c070:	4603      	mov	r3, r0
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
 800c072:	2b00      	cmp	r3, #0
 800c074:	d021      	beq.n	800c0ba <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
					{
						sgu8_respCount = 0;
 800c076:	4b1c      	ldr	r3, [pc, #112]	; (800c0e8 <mod_sendCmdGetRsp+0x538>)
 800c078:	2200      	movs	r2, #0
 800c07a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c07c:	f7f4 f9e0 	bl	8000440 <tm_clearResponseTime>
//						tm_stopTimer();
						len_retStatus = E_RET_RSP_ERROR;
 800c080:	2303      	movs	r3, #3
 800c082:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c086:	4b19      	ldr	r3, [pc, #100]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800c088:	2201      	movs	r2, #1
 800c08a:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
					len_retStatus = E_RET_TIMEOUT_ERROR;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}
			}
		break;
 800c08c:	e01d      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>

				}
			}
			else
			{
				if (tm_getResponseTimeValue() == 0)
 800c08e:	f7f4 f9cb 	bl	8000428 <tm_getResponseTimeValue>
 800c092:	4603      	mov	r3, r0
 800c094:	2b00      	cmp	r3, #0
 800c096:	d110      	bne.n	800c0ba <mod_sendCmdGetRsp+0x50a>
				{
					sgu8_respCount = 0;
 800c098:	4b13      	ldr	r3, [pc, #76]	; (800c0e8 <mod_sendCmdGetRsp+0x538>)
 800c09a:	2200      	movs	r2, #0
 800c09c:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c09e:	480e      	ldr	r0, [pc, #56]	; (800c0d8 <mod_sendCmdGetRsp+0x528>)
 800c0a0:	2100      	movs	r1, #0
 800c0a2:	2240      	movs	r2, #64	; 0x40
 800c0a4:	f005 fae1 	bl	801166a <memset>
					tm_clearResponseTime();
 800c0a8:	f7f4 f9ca 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800c0ac:	2306      	movs	r3, #6
 800c0ae:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c0b2:	4b0e      	ldr	r3, [pc, #56]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800c0b4:	2201      	movs	r2, #1
 800c0b6:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 800c0b8:	e007      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>
 800c0ba:	e006      	b.n	800c0ca <mod_sendCmdGetRsp+0x51a>

		default:
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c0bc:	4b0b      	ldr	r3, [pc, #44]	; (800c0ec <mod_sendCmdGetRsp+0x53c>)
 800c0be:	2201      	movs	r2, #1
 800c0c0:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_INPROGRESS;
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		break;
 800c0c8:	bf00      	nop
	}

	return len_retStatus;
 800c0ca:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f207 4724 	addw	r7, r7, #1060	; 0x424
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	bd90      	pop	{r4, r7, pc}
 800c0d8:	1fff46c4 	.word	0x1fff46c4
 800c0dc:	08013d6c 	.word	0x08013d6c
 800c0e0:	08013d78 	.word	0x08013d78
 800c0e4:	1fff4766 	.word	0x1fff4766
 800c0e8:	1fff4764 	.word	0x1fff4764
 800c0ec:	1ffea4d9 	.word	0x1ffea4d9
 800c0f0:	08013d7c 	.word	0x08013d7c
 800c0f4:	1fff4768 	.word	0x1fff4768
 800c0f8:	1ffea4e8 	.word	0x1ffea4e8
 800c0fc:	08013d88 	.word	0x08013d88

0800c100 <mod_echoOff>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_echoOff(void)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b082      	sub	sp, #8
 800c104:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c106:	2304      	movs	r3, #4
 800c108:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ECHO_OFF, (uint8_t *) NEW_LINE);
 800c10a:	2003      	movs	r0, #3
 800c10c:	4913      	ldr	r1, [pc, #76]	; (800c15c <mod_echoOff+0x5c>)
 800c10e:	f7ff fd4f 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c112:	4603      	mov	r3, r0
 800c114:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c116:	79fb      	ldrb	r3, [r7, #7]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d103      	bne.n	800c124 <mod_echoOff+0x24>
	{
		lsu8_retryCnt = 0;
 800c11c:	4b10      	ldr	r3, [pc, #64]	; (800c160 <mod_echoOff+0x60>)
 800c11e:	2200      	movs	r2, #0
 800c120:	701a      	strb	r2, [r3, #0]
 800c122:	e016      	b.n	800c152 <mod_echoOff+0x52>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c124:	79fb      	ldrb	r3, [r7, #7]
 800c126:	2b04      	cmp	r3, #4
 800c128:	d013      	beq.n	800c152 <mod_echoOff+0x52>
	{
		lsu8_retryCnt++;
 800c12a:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <mod_echoOff+0x60>)
 800c12c:	781b      	ldrb	r3, [r3, #0]
 800c12e:	3301      	adds	r3, #1
 800c130:	b2da      	uxtb	r2, r3
 800c132:	4b0b      	ldr	r3, [pc, #44]	; (800c160 <mod_echoOff+0x60>)
 800c134:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c136:	4b0a      	ldr	r3, [pc, #40]	; (800c160 <mod_echoOff+0x60>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	2b02      	cmp	r3, #2
 800c13c:	d802      	bhi.n	800c144 <mod_echoOff+0x44>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c13e:	2304      	movs	r3, #4
 800c140:	71fb      	strb	r3, [r7, #7]
 800c142:	e006      	b.n	800c152 <mod_echoOff+0x52>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c144:	4b06      	ldr	r3, [pc, #24]	; (800c160 <mod_echoOff+0x60>)
 800c146:	781b      	ldrb	r3, [r3, #0]
 800c148:	2b03      	cmp	r3, #3
 800c14a:	d902      	bls.n	800c152 <mod_echoOff+0x52>
		{
			lsu8_retryCnt = 0;
 800c14c:	4b04      	ldr	r3, [pc, #16]	; (800c160 <mod_echoOff+0x60>)
 800c14e:	2200      	movs	r2, #0
 800c150:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c152:	79fb      	ldrb	r3, [r7, #7]
}
 800c154:	4618      	mov	r0, r3
 800c156:	3708      	adds	r7, #8
 800c158:	46bd      	mov	sp, r7
 800c15a:	bd80      	pop	{r7, pc}
 800c15c:	08013d8c 	.word	0x08013d8c
 800c160:	1fff4772 	.word	0x1fff4772

0800c164 <mod_setUrcPort>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setUrcPort(void)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c16a:	2304      	movs	r3, #4
 800c16c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "\"usbat\"\r\n";
 800c16e:	4a17      	ldr	r2, [pc, #92]	; (800c1cc <mod_setUrcPort+0x68>)
 800c170:	1d3b      	adds	r3, r7, #4
 800c172:	ca07      	ldmia	r2, {r0, r1, r2}
 800c174:	c303      	stmia	r3!, {r0, r1}
 800c176:	801a      	strh	r2, [r3, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SET_URC_PRT, lu8arr_param);
 800c178:	1d3b      	adds	r3, r7, #4
 800c17a:	2002      	movs	r0, #2
 800c17c:	4619      	mov	r1, r3
 800c17e:	f7ff fd17 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c186:	7bfb      	ldrb	r3, [r7, #15]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d103      	bne.n	800c194 <mod_setUrcPort+0x30>
	{
		lsu8_retryCnt = 0;
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c18e:	2200      	movs	r2, #0
 800c190:	701a      	strb	r2, [r3, #0]
 800c192:	e016      	b.n	800c1c2 <mod_setUrcPort+0x5e>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c194:	7bfb      	ldrb	r3, [r7, #15]
 800c196:	2b04      	cmp	r3, #4
 800c198:	d013      	beq.n	800c1c2 <mod_setUrcPort+0x5e>
	{
		lsu8_retryCnt++;
 800c19a:	4b0d      	ldr	r3, [pc, #52]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	3301      	adds	r3, #1
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	4b0b      	ldr	r3, [pc, #44]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c1a4:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c1a6:	4b0a      	ldr	r3, [pc, #40]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	2b02      	cmp	r3, #2
 800c1ac:	d802      	bhi.n	800c1b4 <mod_setUrcPort+0x50>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c1ae:	2304      	movs	r3, #4
 800c1b0:	73fb      	strb	r3, [r7, #15]
 800c1b2:	e006      	b.n	800c1c2 <mod_setUrcPort+0x5e>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c1b4:	4b06      	ldr	r3, [pc, #24]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c1b6:	781b      	ldrb	r3, [r3, #0]
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d902      	bls.n	800c1c2 <mod_setUrcPort+0x5e>
		{
			lsu8_retryCnt = 0;
 800c1bc:	4b04      	ldr	r3, [pc, #16]	; (800c1d0 <mod_setUrcPort+0x6c>)
 800c1be:	2200      	movs	r2, #0
 800c1c0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}
 800c1cc:	08013d90 	.word	0x08013d90
 800c1d0:	1fff4773 	.word	0x1fff4773

0800c1d4 <mod_setFlowCtrl>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setFlowCtrl(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c1da:	2304      	movs	r3, #4
 800c1dc:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "0,0\r\n";	//0,0 ---> none, none
 800c1de:	4a1a      	ldr	r2, [pc, #104]	; (800c248 <mod_setFlowCtrl+0x74>)
 800c1e0:	1d3b      	adds	r3, r7, #4
 800c1e2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c1e6:	6018      	str	r0, [r3, #0]
 800c1e8:	3304      	adds	r3, #4
 800c1ea:	8019      	strh	r1, [r3, #0]
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	817b      	strh	r3, [r7, #10]
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	81bb      	strh	r3, [r7, #12]
	//uint8_t lu8arr_param[10] = "2,2\r\n";	//0,0 ---> RTS, CTS

	len_retStatus = mod_sendCmdGetRsp(E_IDX_HW_FLWCTRL, lu8arr_param);
 800c1f4:	1d3b      	adds	r3, r7, #4
 800c1f6:	2004      	movs	r0, #4
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	f7ff fcd9 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c1fe:	4603      	mov	r3, r0
 800c200:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c202:	7bfb      	ldrb	r3, [r7, #15]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d103      	bne.n	800c210 <mod_setFlowCtrl+0x3c>
	{
		lsu8_retryCnt = 0;
 800c208:	4b10      	ldr	r3, [pc, #64]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c20a:	2200      	movs	r2, #0
 800c20c:	701a      	strb	r2, [r3, #0]
 800c20e:	e016      	b.n	800c23e <mod_setFlowCtrl+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c210:	7bfb      	ldrb	r3, [r7, #15]
 800c212:	2b04      	cmp	r3, #4
 800c214:	d013      	beq.n	800c23e <mod_setFlowCtrl+0x6a>
	{
		lsu8_retryCnt++;
 800c216:	4b0d      	ldr	r3, [pc, #52]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	3301      	adds	r3, #1
 800c21c:	b2da      	uxtb	r2, r3
 800c21e:	4b0b      	ldr	r3, [pc, #44]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c220:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c222:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	2b02      	cmp	r3, #2
 800c228:	d802      	bhi.n	800c230 <mod_setFlowCtrl+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c22a:	2304      	movs	r3, #4
 800c22c:	73fb      	strb	r3, [r7, #15]
 800c22e:	e006      	b.n	800c23e <mod_setFlowCtrl+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c230:	4b06      	ldr	r3, [pc, #24]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	2b03      	cmp	r3, #3
 800c236:	d902      	bls.n	800c23e <mod_setFlowCtrl+0x6a>
		{
			lsu8_retryCnt = 0;
 800c238:	4b04      	ldr	r3, [pc, #16]	; (800c24c <mod_setFlowCtrl+0x78>)
 800c23a:	2200      	movs	r2, #0
 800c23c:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c240:	4618      	mov	r0, r3
 800c242:	3710      	adds	r7, #16
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}
 800c248:	08013d9c 	.word	0x08013d9c
 800c24c:	1fff4774 	.word	0x1fff4774

0800c250 <mod_extractModInfo>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractModInfo(void)
{
 800c250:	b5b0      	push	{r4, r5, r7, lr}
 800c252:	b084      	sub	sp, #16
 800c254:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c256:	2304      	movs	r3, #4
 800c258:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c25a:	2300      	movs	r3, #0
 800c25c:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c25e:	2300      	movs	r3, #0
 800c260:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FEATCH_MOD_INFO, (uint8_t *) NEW_LINE);
 800c262:	2005      	movs	r0, #5
 800c264:	4927      	ldr	r1, [pc, #156]	; (800c304 <mod_extractModInfo+0xb4>)
 800c266:	f7ff fca3 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c26a:	4603      	mov	r3, r0
 800c26c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c26e:	7bfb      	ldrb	r3, [r7, #15]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d12b      	bne.n	800c2cc <mod_extractModInfo+0x7c>
	{
		lsu8_retryCnt = 0;
 800c274:	4b24      	ldr	r3, [pc, #144]	; (800c308 <mod_extractModInfo+0xb8>)
 800c276:	2200      	movs	r2, #0
 800c278:	701a      	strb	r2, [r3, #0]
		if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) PRODCUT_NAME)))
 800c27a:	4824      	ldr	r0, [pc, #144]	; (800c30c <mod_extractModInfo+0xbc>)
 800c27c:	4924      	ldr	r1, [pc, #144]	; (800c310 <mod_extractModInfo+0xc0>)
 800c27e:	f005 fd16 	bl	8011cae <strstr>
 800c282:	4603      	mov	r3, r0
 800c284:	2b00      	cmp	r3, #0
 800c286:	d01e      	beq.n	800c2c6 <mod_extractModInfo+0x76>
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c288:	1d3b      	adds	r3, r7, #4
 800c28a:	4820      	ldr	r0, [pc, #128]	; (800c30c <mod_extractModInfo+0xbc>)
 800c28c:	4921      	ldr	r1, [pc, #132]	; (800c314 <mod_extractModInfo+0xc4>)
 800c28e:	461a      	mov	r2, r3
 800c290:	f005 fd83 	bl	8011d9a <strtok_r>
 800c294:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3301      	adds	r3, #1
 800c29a:	607b      	str	r3, [r7, #4]
			if (NULL != lu8p_temp)
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d00e      	beq.n	800c2c0 <mod_extractModInfo+0x70>
			{
				memcpy(gu8arr_productRevision, lu8p_saveptr, PRO_REVISION_SIZE);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	4a1c      	ldr	r2, [pc, #112]	; (800c318 <mod_extractModInfo+0xc8>)
 800c2a6:	4614      	mov	r4, r2
 800c2a8:	461d      	mov	r5, r3
 800c2aa:	6828      	ldr	r0, [r5, #0]
 800c2ac:	6869      	ldr	r1, [r5, #4]
 800c2ae:	68aa      	ldr	r2, [r5, #8]
 800c2b0:	68eb      	ldr	r3, [r5, #12]
 800c2b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c2b4:	8a2b      	ldrh	r3, [r5, #16]
 800c2b6:	7caa      	ldrb	r2, [r5, #18]
 800c2b8:	8023      	strh	r3, [r4, #0]
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	70a3      	strb	r3, [r4, #2]
 800c2be:	e01c      	b.n	800c2fa <mod_extractModInfo+0xaa>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c2c0:	2302      	movs	r3, #2
 800c2c2:	73fb      	strb	r3, [r7, #15]
 800c2c4:	e019      	b.n	800c2fa <mod_extractModInfo+0xaa>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c2c6:	2302      	movs	r3, #2
 800c2c8:	73fb      	strb	r3, [r7, #15]
 800c2ca:	e016      	b.n	800c2fa <mod_extractModInfo+0xaa>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c2cc:	7bfb      	ldrb	r3, [r7, #15]
 800c2ce:	2b04      	cmp	r3, #4
 800c2d0:	d013      	beq.n	800c2fa <mod_extractModInfo+0xaa>
	{
		lsu8_retryCnt++;
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	; (800c308 <mod_extractModInfo+0xb8>)
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	3301      	adds	r3, #1
 800c2d8:	b2da      	uxtb	r2, r3
 800c2da:	4b0b      	ldr	r3, [pc, #44]	; (800c308 <mod_extractModInfo+0xb8>)
 800c2dc:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c2de:	4b0a      	ldr	r3, [pc, #40]	; (800c308 <mod_extractModInfo+0xb8>)
 800c2e0:	781b      	ldrb	r3, [r3, #0]
 800c2e2:	2b02      	cmp	r3, #2
 800c2e4:	d802      	bhi.n	800c2ec <mod_extractModInfo+0x9c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c2e6:	2304      	movs	r3, #4
 800c2e8:	73fb      	strb	r3, [r7, #15]
 800c2ea:	e006      	b.n	800c2fa <mod_extractModInfo+0xaa>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <mod_extractModInfo+0xb8>)
 800c2ee:	781b      	ldrb	r3, [r3, #0]
 800c2f0:	2b03      	cmp	r3, #3
 800c2f2:	d902      	bls.n	800c2fa <mod_extractModInfo+0xaa>
		{
			lsu8_retryCnt = 0;
 800c2f4:	4b04      	ldr	r3, [pc, #16]	; (800c308 <mod_extractModInfo+0xb8>)
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3710      	adds	r7, #16
 800c300:	46bd      	mov	sp, r7
 800c302:	bdb0      	pop	{r4, r5, r7, pc}
 800c304:	08013d8c 	.word	0x08013d8c
 800c308:	1fff4775 	.word	0x1fff4775
 800c30c:	1fff46c4 	.word	0x1fff46c4
 800c310:	08013da8 	.word	0x08013da8
 800c314:	08013d78 	.word	0x08013d78
 800c318:	1fff4704 	.word	0x1fff4704

0800c31c <mod_enableSimDetection>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimDetection(void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c322:	2304      	movs	r3, #4
 800c324:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1,0\r\n";
 800c326:	4a1a      	ldr	r2, [pc, #104]	; (800c390 <mod_enableSimDetection+0x74>)
 800c328:	1d3b      	adds	r3, r7, #4
 800c32a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c32e:	6018      	str	r0, [r3, #0]
 800c330:	3304      	adds	r3, #4
 800c332:	8019      	strh	r1, [r3, #0]
 800c334:	2300      	movs	r3, #0
 800c336:	817b      	strh	r3, [r7, #10]
 800c338:	2300      	movs	r3, #0
 800c33a:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_DETECTION, lu8arr_param);
 800c33c:	1d3b      	adds	r3, r7, #4
 800c33e:	2006      	movs	r0, #6
 800c340:	4619      	mov	r1, r3
 800c342:	f7ff fc35 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c346:	4603      	mov	r3, r0
 800c348:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c34a:	7bfb      	ldrb	r3, [r7, #15]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d103      	bne.n	800c358 <mod_enableSimDetection+0x3c>
	{
		lsu8_retryCnt = 0;
 800c350:	4b10      	ldr	r3, [pc, #64]	; (800c394 <mod_enableSimDetection+0x78>)
 800c352:	2200      	movs	r2, #0
 800c354:	701a      	strb	r2, [r3, #0]
 800c356:	e016      	b.n	800c386 <mod_enableSimDetection+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c358:	7bfb      	ldrb	r3, [r7, #15]
 800c35a:	2b04      	cmp	r3, #4
 800c35c:	d013      	beq.n	800c386 <mod_enableSimDetection+0x6a>
	{
		lsu8_retryCnt++;
 800c35e:	4b0d      	ldr	r3, [pc, #52]	; (800c394 <mod_enableSimDetection+0x78>)
 800c360:	781b      	ldrb	r3, [r3, #0]
 800c362:	3301      	adds	r3, #1
 800c364:	b2da      	uxtb	r2, r3
 800c366:	4b0b      	ldr	r3, [pc, #44]	; (800c394 <mod_enableSimDetection+0x78>)
 800c368:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c36a:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <mod_enableSimDetection+0x78>)
 800c36c:	781b      	ldrb	r3, [r3, #0]
 800c36e:	2b02      	cmp	r3, #2
 800c370:	d802      	bhi.n	800c378 <mod_enableSimDetection+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c372:	2304      	movs	r3, #4
 800c374:	73fb      	strb	r3, [r7, #15]
 800c376:	e006      	b.n	800c386 <mod_enableSimDetection+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c378:	4b06      	ldr	r3, [pc, #24]	; (800c394 <mod_enableSimDetection+0x78>)
 800c37a:	781b      	ldrb	r3, [r3, #0]
 800c37c:	2b03      	cmp	r3, #3
 800c37e:	d902      	bls.n	800c386 <mod_enableSimDetection+0x6a>
		{
			lsu8_retryCnt = 0;
 800c380:	4b04      	ldr	r3, [pc, #16]	; (800c394 <mod_enableSimDetection+0x78>)
 800c382:	2200      	movs	r2, #0
 800c384:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c386:	7bfb      	ldrb	r3, [r7, #15]
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3710      	adds	r7, #16
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	08013db4 	.word	0x08013db4
 800c394:	1fff4776 	.word	0x1fff4776

0800c398 <mod_enableSimStatusReport>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimStatusReport(void)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c39e:	2304      	movs	r3, #4
 800c3a0:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1\r\n";
 800c3a2:	4b18      	ldr	r3, [pc, #96]	; (800c404 <mod_enableSimStatusReport+0x6c>)
 800c3a4:	607b      	str	r3, [r7, #4]
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	60bb      	str	r3, [r7, #8]
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_STATUS, lu8arr_param);
 800c3ae:	1d3b      	adds	r3, r7, #4
 800c3b0:	2007      	movs	r0, #7
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	f7ff fbfc 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c3bc:	7bfb      	ldrb	r3, [r7, #15]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d103      	bne.n	800c3ca <mod_enableSimStatusReport+0x32>
	{
		lsu8_retryCnt = 0;
 800c3c2:	4b11      	ldr	r3, [pc, #68]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	701a      	strb	r2, [r3, #0]
 800c3c8:	e016      	b.n	800c3f8 <mod_enableSimStatusReport+0x60>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c3ca:	7bfb      	ldrb	r3, [r7, #15]
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	d013      	beq.n	800c3f8 <mod_enableSimStatusReport+0x60>
	{
		lsu8_retryCnt++;
 800c3d0:	4b0d      	ldr	r3, [pc, #52]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3d2:	781b      	ldrb	r3, [r3, #0]
 800c3d4:	3301      	adds	r3, #1
 800c3d6:	b2da      	uxtb	r2, r3
 800c3d8:	4b0b      	ldr	r3, [pc, #44]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3da:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c3dc:	4b0a      	ldr	r3, [pc, #40]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3de:	781b      	ldrb	r3, [r3, #0]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d802      	bhi.n	800c3ea <mod_enableSimStatusReport+0x52>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c3e4:	2304      	movs	r3, #4
 800c3e6:	73fb      	strb	r3, [r7, #15]
 800c3e8:	e006      	b.n	800c3f8 <mod_enableSimStatusReport+0x60>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c3ea:	4b07      	ldr	r3, [pc, #28]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3ec:	781b      	ldrb	r3, [r3, #0]
 800c3ee:	2b03      	cmp	r3, #3
 800c3f0:	d902      	bls.n	800c3f8 <mod_enableSimStatusReport+0x60>
		{
			lsu8_retryCnt = 0;
 800c3f2:	4b05      	ldr	r3, [pc, #20]	; (800c408 <mod_enableSimStatusReport+0x70>)
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c3f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	000a0d31 	.word	0x000a0d31
 800c408:	1fff4777 	.word	0x1fff4777

0800c40c <mod_checkSimStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_checkSimStatus(void)
{
 800c40c:	b580      	push	{r7, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c412:	2304      	movs	r3, #4
 800c414:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c416:	2300      	movs	r3, #0
 800c418:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
 800c41e:	2008      	movs	r0, #8
 800c420:	4933      	ldr	r1, [pc, #204]	; (800c4f0 <mod_checkSimStatus+0xe4>)
 800c422:	f7ff fbc5 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c426:	4603      	mov	r3, r0
 800c428:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c42a:	7bfb      	ldrb	r3, [r7, #15]
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	d143      	bne.n	800c4b8 <mod_checkSimStatus+0xac>
	{
		lsu8_retryCnt = 0;
 800c430:	4b30      	ldr	r3, [pc, #192]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c432:	2200      	movs	r2, #0
 800c434:	701a      	strb	r2, [r3, #0]
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c436:	4830      	ldr	r0, [pc, #192]	; (800c4f8 <mod_checkSimStatus+0xec>)
 800c438:	4930      	ldr	r1, [pc, #192]	; (800c4fc <mod_checkSimStatus+0xf0>)
 800c43a:	f005 fc38 	bl	8011cae <strstr>
 800c43e:	4603      	mov	r3, r0

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		if ((NULL
 800c440:	2b00      	cmp	r3, #0
 800c442:	d036      	beq.n	800c4b2 <mod_checkSimStatus+0xa6>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_CHECK_SIM_STATUS].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c444:	1d3b      	adds	r3, r7, #4
 800c446:	482c      	ldr	r0, [pc, #176]	; (800c4f8 <mod_checkSimStatus+0xec>)
 800c448:	492d      	ldr	r1, [pc, #180]	; (800c500 <mod_checkSimStatus+0xf4>)
 800c44a:	461a      	mov	r2, r3
 800c44c:	f005 fca5 	bl	8011d9a <strtok_r>
 800c450:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			if (NULL != lu8p_temp)
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	2b00      	cmp	r3, #0
 800c456:	d029      	beq.n	800c4ac <mod_checkSimStatus+0xa0>
			{
				lu8p_temp = (uint8_t *) strchr((const char*) lu8p_saveptr, ',');
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	4618      	mov	r0, r3
 800c45c:	212c      	movs	r1, #44	; 0x2c
 800c45e:	f005 fbf6 	bl	8011c4e <strchr>
 800c462:	60b8      	str	r0, [r7, #8]
				if (NULL != lu8p_temp)
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d01d      	beq.n	800c4a6 <mod_checkSimStatus+0x9a>
				{
					lu8p_temp = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c46a:	1d3b      	adds	r3, r7, #4
 800c46c:	2000      	movs	r0, #0
 800c46e:	4925      	ldr	r1, [pc, #148]	; (800c504 <mod_checkSimStatus+0xf8>)
 800c470:	461a      	mov	r2, r3
 800c472:	f005 fc92 	bl	8011d9a <strtok_r>
 800c476:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_saveptr);

					gst_deviceStatus.mb_isSimInserted = (uint8_t) atoi(
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	4618      	mov	r0, r3
 800c47c:	f005 f8ba 	bl	80115f4 <atoi>
 800c480:	4603      	mov	r3, r0
 800c482:	b2db      	uxtb	r3, r3
 800c484:	2b00      	cmp	r3, #0
 800c486:	bf14      	ite	ne
 800c488:	2301      	movne	r3, #1
 800c48a:	2300      	moveq	r3, #0
 800c48c:	b2da      	uxtb	r2, r3
 800c48e:	4b1e      	ldr	r3, [pc, #120]	; (800c508 <mod_checkSimStatus+0xfc>)
 800c490:	705a      	strb	r2, [r3, #1]
							(const char*) lu8p_saveptr);

					if (true == gst_deviceStatus.mb_isSimInserted)
 800c492:	4b1d      	ldr	r3, [pc, #116]	; (800c508 <mod_checkSimStatus+0xfc>)
 800c494:	785b      	ldrb	r3, [r3, #1]
 800c496:	2b00      	cmp	r3, #0
 800c498:	d002      	beq.n	800c4a0 <mod_checkSimStatus+0x94>
					{
						len_retStatus = E_RET_SUCCESS;
 800c49a:	2300      	movs	r3, #0
 800c49c:	73fb      	strb	r3, [r7, #15]
 800c49e:	e022      	b.n	800c4e6 <mod_checkSimStatus+0xda>
					}
					else
					{
						len_retStatus = E_RET_INPROGRESS;
 800c4a0:	2304      	movs	r3, #4
 800c4a2:	73fb      	strb	r3, [r7, #15]
 800c4a4:	e01f      	b.n	800c4e6 <mod_checkSimStatus+0xda>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800c4a6:	2302      	movs	r3, #2
 800c4a8:	73fb      	strb	r3, [r7, #15]
 800c4aa:	e01c      	b.n	800c4e6 <mod_checkSimStatus+0xda>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c4ac:	2302      	movs	r3, #2
 800c4ae:	73fb      	strb	r3, [r7, #15]
 800c4b0:	e019      	b.n	800c4e6 <mod_checkSimStatus+0xda>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c4b2:	2302      	movs	r3, #2
 800c4b4:	73fb      	strb	r3, [r7, #15]
 800c4b6:	e016      	b.n	800c4e6 <mod_checkSimStatus+0xda>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b04      	cmp	r3, #4
 800c4bc:	d013      	beq.n	800c4e6 <mod_checkSimStatus+0xda>
	{
		lsu8_retryCnt++;
 800c4be:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	b2da      	uxtb	r2, r3
 800c4c6:	4b0b      	ldr	r3, [pc, #44]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c4c8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c4ca:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d802      	bhi.n	800c4d8 <mod_checkSimStatus+0xcc>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c4d2:	2304      	movs	r3, #4
 800c4d4:	73fb      	strb	r3, [r7, #15]
 800c4d6:	e006      	b.n	800c4e6 <mod_checkSimStatus+0xda>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c4d8:	4b06      	ldr	r3, [pc, #24]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	2b03      	cmp	r3, #3
 800c4de:	d902      	bls.n	800c4e6 <mod_checkSimStatus+0xda>
		{
			lsu8_retryCnt = 0;
 800c4e0:	4b04      	ldr	r3, [pc, #16]	; (800c4f4 <mod_checkSimStatus+0xe8>)
 800c4e2:	2200      	movs	r2, #0
 800c4e4:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	3710      	adds	r7, #16
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}
 800c4f0:	08013d8c 	.word	0x08013d8c
 800c4f4:	1fff4778 	.word	0x1fff4778
 800c4f8:	1fff46c4 	.word	0x1fff46c4
 800c4fc:	1ffece42 	.word	0x1ffece42
 800c500:	08013d78 	.word	0x08013d78
 800c504:	08013dc0 	.word	0x08013dc0
 800c508:	1ffea4dc 	.word	0x1ffea4dc

0800c50c <mod_cpinCheck>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_cpinCheck(void)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b082      	sub	sp, #8
 800c510:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c512:	2304      	movs	r3, #4
 800c514:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800c516:	2300      	movs	r3, #0
 800c518:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CPIN_CHECK, (uint8_t *) NEW_LINE);
 800c51a:	2009      	movs	r0, #9
 800c51c:	491a      	ldr	r1, [pc, #104]	; (800c588 <mod_cpinCheck+0x7c>)
 800c51e:	f7ff fb47 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c522:	4603      	mov	r3, r0
 800c524:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c526:	79fb      	ldrb	r3, [r7, #7]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d110      	bne.n	800c54e <mod_cpinCheck+0x42>
	{
		lsu8_retryCnt = 0;
 800c52c:	4b17      	ldr	r3, [pc, #92]	; (800c58c <mod_cpinCheck+0x80>)
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "READY");
 800c532:	4817      	ldr	r0, [pc, #92]	; (800c590 <mod_cpinCheck+0x84>)
 800c534:	4917      	ldr	r1, [pc, #92]	; (800c594 <mod_cpinCheck+0x88>)
 800c536:	f005 fbba 	bl	8011cae <strstr>
 800c53a:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d002      	beq.n	800c548 <mod_cpinCheck+0x3c>
		{
			len_retStatus = E_RET_SUCCESS;
 800c542:	2300      	movs	r3, #0
 800c544:	71fb      	strb	r3, [r7, #7]
 800c546:	e019      	b.n	800c57c <mod_cpinCheck+0x70>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c548:	2302      	movs	r3, #2
 800c54a:	71fb      	strb	r3, [r7, #7]
 800c54c:	e016      	b.n	800c57c <mod_cpinCheck+0x70>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c54e:	79fb      	ldrb	r3, [r7, #7]
 800c550:	2b04      	cmp	r3, #4
 800c552:	d013      	beq.n	800c57c <mod_cpinCheck+0x70>
	{
		lsu8_retryCnt++;
 800c554:	4b0d      	ldr	r3, [pc, #52]	; (800c58c <mod_cpinCheck+0x80>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	3301      	adds	r3, #1
 800c55a:	b2da      	uxtb	r2, r3
 800c55c:	4b0b      	ldr	r3, [pc, #44]	; (800c58c <mod_cpinCheck+0x80>)
 800c55e:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c560:	4b0a      	ldr	r3, [pc, #40]	; (800c58c <mod_cpinCheck+0x80>)
 800c562:	781b      	ldrb	r3, [r3, #0]
 800c564:	2b02      	cmp	r3, #2
 800c566:	d802      	bhi.n	800c56e <mod_cpinCheck+0x62>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c568:	2304      	movs	r3, #4
 800c56a:	71fb      	strb	r3, [r7, #7]
 800c56c:	e006      	b.n	800c57c <mod_cpinCheck+0x70>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c56e:	4b07      	ldr	r3, [pc, #28]	; (800c58c <mod_cpinCheck+0x80>)
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	2b03      	cmp	r3, #3
 800c574:	d902      	bls.n	800c57c <mod_cpinCheck+0x70>
		{
			lsu8_retryCnt = 0;
 800c576:	4b05      	ldr	r3, [pc, #20]	; (800c58c <mod_cpinCheck+0x80>)
 800c578:	2200      	movs	r2, #0
 800c57a:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c57c:	79fb      	ldrb	r3, [r7, #7]
}
 800c57e:	4618      	mov	r0, r3
 800c580:	3708      	adds	r7, #8
 800c582:	46bd      	mov	sp, r7
 800c584:	bd80      	pop	{r7, pc}
 800c586:	bf00      	nop
 800c588:	08013d8c 	.word	0x08013d8c
 800c58c:	1fff4779 	.word	0x1fff4779
 800c590:	1fff46c4 	.word	0x1fff46c4
 800c594:	08013dc4 	.word	0x08013dc4

0800c598 <mod_extractIMEI>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractIMEI(void)
{
 800c598:	b590      	push	{r4, r7, lr}
 800c59a:	b087      	sub	sp, #28
 800c59c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c59e:	2304      	movs	r3, #4
 800c5a0:	75fb      	strb	r3, [r7, #23]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8_index = 0;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	75bb      	strb	r3, [r7, #22]
	uint8_t lu8ar_TempIMEI[IMEI_SIZE] = { 0 };
 800c5a6:	1d3b      	adds	r3, r7, #4
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	3304      	adds	r3, #4
 800c5ae:	2200      	movs	r2, #0
 800c5b0:	601a      	str	r2, [r3, #0]
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	601a      	str	r2, [r3, #0]
 800c5b8:	3304      	adds	r3, #4
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	801a      	strh	r2, [r3, #0]
 800c5be:	3302      	adds	r3, #2
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	701a      	strb	r2, [r3, #0]
 800c5c4:	3301      	adds	r3, #1

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_IMEI, (uint8_t *) NEW_LINE);
 800c5c6:	200a      	movs	r0, #10
 800c5c8:	492c      	ldr	r1, [pc, #176]	; (800c67c <mod_extractIMEI+0xe4>)
 800c5ca:	f7ff faf1 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	75fb      	strb	r3, [r7, #23]
	if (E_RET_SUCCESS == len_retStatus)
 800c5d2:	7dfb      	ldrb	r3, [r7, #23]
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d134      	bne.n	800c642 <mod_extractIMEI+0xaa>
	{
		lsu8_retryCnt = 0;
 800c5d8:	4b29      	ldr	r3, [pc, #164]	; (800c680 <mod_extractIMEI+0xe8>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
 800c5de:	1d3b      	adds	r3, r7, #4
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	4928      	ldr	r1, [pc, #160]	; (800c684 <mod_extractIMEI+0xec>)
 800c5e4:	220f      	movs	r2, #15
 800c5e6:	f005 f835 	bl	8011654 <memcpy>
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	75bb      	strb	r3, [r7, #22]
 800c5ee:	e015      	b.n	800c61c <mod_extractIMEI+0x84>
		{
			if (!('0' <= lu8ar_TempIMEI[lu8_index] && '9' >= lu8ar_TempIMEI[lu8_index]))
 800c5f0:	7dbb      	ldrb	r3, [r7, #22]
 800c5f2:	f107 0218 	add.w	r2, r7, #24
 800c5f6:	4413      	add	r3, r2
 800c5f8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c5fc:	2b2f      	cmp	r3, #47	; 0x2f
 800c5fe:	d907      	bls.n	800c610 <mod_extractIMEI+0x78>
 800c600:	7dbb      	ldrb	r3, [r7, #22]
 800c602:	f107 0218 	add.w	r2, r7, #24
 800c606:	4413      	add	r3, r2
 800c608:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c60c:	2b39      	cmp	r3, #57	; 0x39
 800c60e:	d902      	bls.n	800c616 <mod_extractIMEI+0x7e>
			{
				len_retStatus = E_RET_FAILED;
 800c610:	2302      	movs	r3, #2
 800c612:	75fb      	strb	r3, [r7, #23]
				break;
 800c614:	e005      	b.n	800c622 <mod_extractIMEI+0x8a>
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c616:	7dbb      	ldrb	r3, [r7, #22]
 800c618:	3301      	adds	r3, #1
 800c61a:	75bb      	strb	r3, [r7, #22]
 800c61c:	7dbb      	ldrb	r3, [r7, #22]
 800c61e:	2b0e      	cmp	r3, #14
 800c620:	d9e6      	bls.n	800c5f0 <mod_extractIMEI+0x58>
			{
				len_retStatus = E_RET_FAILED;
				break;
			}
		}
		if (lu8_index >= IMEI_SIZE)
 800c622:	7dbb      	ldrb	r3, [r7, #22]
 800c624:	2b0e      	cmp	r3, #14
 800c626:	d923      	bls.n	800c670 <mod_extractIMEI+0xd8>
		{
			memcpy((char *) &gu8arr_IMEINum, (const char *) &gu8arr_respBuffer[2],
 800c628:	4b17      	ldr	r3, [pc, #92]	; (800c688 <mod_extractIMEI+0xf0>)
 800c62a:	4a18      	ldr	r2, [pc, #96]	; (800c68c <mod_extractIMEI+0xf4>)
 800c62c:	1c94      	adds	r4, r2, #2
 800c62e:	6820      	ldr	r0, [r4, #0]
 800c630:	6861      	ldr	r1, [r4, #4]
 800c632:	68a2      	ldr	r2, [r4, #8]
 800c634:	c307      	stmia	r3!, {r0, r1, r2}
 800c636:	89a2      	ldrh	r2, [r4, #12]
 800c638:	7ba1      	ldrb	r1, [r4, #14]
 800c63a:	801a      	strh	r2, [r3, #0]
 800c63c:	460a      	mov	r2, r1
 800c63e:	709a      	strb	r2, [r3, #2]
 800c640:	e016      	b.n	800c670 <mod_extractIMEI+0xd8>
			IMEI_SIZE);	//\r\n skipped
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	2b04      	cmp	r3, #4
 800c646:	d013      	beq.n	800c670 <mod_extractIMEI+0xd8>
	{
		lsu8_retryCnt++;
 800c648:	4b0d      	ldr	r3, [pc, #52]	; (800c680 <mod_extractIMEI+0xe8>)
 800c64a:	781b      	ldrb	r3, [r3, #0]
 800c64c:	3301      	adds	r3, #1
 800c64e:	b2da      	uxtb	r2, r3
 800c650:	4b0b      	ldr	r3, [pc, #44]	; (800c680 <mod_extractIMEI+0xe8>)
 800c652:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c654:	4b0a      	ldr	r3, [pc, #40]	; (800c680 <mod_extractIMEI+0xe8>)
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	2b02      	cmp	r3, #2
 800c65a:	d802      	bhi.n	800c662 <mod_extractIMEI+0xca>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c65c:	2304      	movs	r3, #4
 800c65e:	75fb      	strb	r3, [r7, #23]
 800c660:	e006      	b.n	800c670 <mod_extractIMEI+0xd8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c662:	4b07      	ldr	r3, [pc, #28]	; (800c680 <mod_extractIMEI+0xe8>)
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	2b03      	cmp	r3, #3
 800c668:	d902      	bls.n	800c670 <mod_extractIMEI+0xd8>
		{
			lsu8_retryCnt = 0;
 800c66a:	4b05      	ldr	r3, [pc, #20]	; (800c680 <mod_extractIMEI+0xe8>)
 800c66c:	2200      	movs	r2, #0
 800c66e:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c670:	7dfb      	ldrb	r3, [r7, #23]
}
 800c672:	4618      	mov	r0, r3
 800c674:	371c      	adds	r7, #28
 800c676:	46bd      	mov	sp, r7
 800c678:	bd90      	pop	{r4, r7, pc}
 800c67a:	bf00      	nop
 800c67c:	08013d8c 	.word	0x08013d8c
 800c680:	1fff477a 	.word	0x1fff477a
 800c684:	1fff46c6 	.word	0x1fff46c6
 800c688:	1fff4718 	.word	0x1fff4718
 800c68c:	1fff46c4 	.word	0x1fff46c4

0800c690 <mod_extractCCID>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractCCID(void)
{
 800c690:	b5b0      	push	{r4, r5, r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c696:	2304      	movs	r3, #4
 800c698:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c69a:	2300      	movs	r3, #0
 800c69c:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
 800c6a2:	200b      	movs	r0, #11
 800c6a4:	4927      	ldr	r1, [pc, #156]	; (800c744 <mod_extractCCID+0xb4>)
 800c6a6:	f7ff fa83 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c6ae:	7bfb      	ldrb	r3, [r7, #15]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d12a      	bne.n	800c70a <mod_extractCCID+0x7a>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c6b4:	4824      	ldr	r0, [pc, #144]	; (800c748 <mod_extractCCID+0xb8>)
 800c6b6:	4925      	ldr	r1, [pc, #148]	; (800c74c <mod_extractCCID+0xbc>)
 800c6b8:	f005 faf9 	bl	8011cae <strstr>
 800c6bc:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d020      	beq.n	800c704 <mod_extractCCID+0x74>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_CCID].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c6c2:	1d3b      	adds	r3, r7, #4
 800c6c4:	4820      	ldr	r0, [pc, #128]	; (800c748 <mod_extractCCID+0xb8>)
 800c6c6:	4922      	ldr	r1, [pc, #136]	; (800c750 <mod_extractCCID+0xc0>)
 800c6c8:	461a      	mov	r2, r3
 800c6ca:	f005 fb66 	bl	8011d9a <strtok_r>
 800c6ce:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	3301      	adds	r3, #1
 800c6d4:	607b      	str	r3, [r7, #4]

			if (NULL != lu8p_saveptr)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d010      	beq.n	800c6fe <mod_extractCCID+0x6e>
			{
				memset(gu8arr_CCIDNum, 0, sizeof(gu8arr_CCIDNum));
 800c6dc:	481d      	ldr	r0, [pc, #116]	; (800c754 <mod_extractCCID+0xc4>)
 800c6de:	2100      	movs	r1, #0
 800c6e0:	2214      	movs	r2, #20
 800c6e2:	f004 ffc2 	bl	801166a <memset>
				memcpy((char *) &gu8arr_CCIDNum, (const char *) lu8p_saveptr, CCID_SIZE);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	4a1a      	ldr	r2, [pc, #104]	; (800c754 <mod_extractCCID+0xc4>)
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	461d      	mov	r5, r3
 800c6ee:	6828      	ldr	r0, [r5, #0]
 800c6f0:	6869      	ldr	r1, [r5, #4]
 800c6f2:	68aa      	ldr	r2, [r5, #8]
 800c6f4:	68eb      	ldr	r3, [r5, #12]
 800c6f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6f8:	6928      	ldr	r0, [r5, #16]
 800c6fa:	6020      	str	r0, [r4, #0]
 800c6fc:	e01c      	b.n	800c738 <mod_extractCCID+0xa8>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c6fe:	2302      	movs	r3, #2
 800c700:	73fb      	strb	r3, [r7, #15]
 800c702:	e019      	b.n	800c738 <mod_extractCCID+0xa8>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c704:	2302      	movs	r3, #2
 800c706:	73fb      	strb	r3, [r7, #15]
 800c708:	e016      	b.n	800c738 <mod_extractCCID+0xa8>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c70a:	7bfb      	ldrb	r3, [r7, #15]
 800c70c:	2b04      	cmp	r3, #4
 800c70e:	d013      	beq.n	800c738 <mod_extractCCID+0xa8>
	{
		lsu8_retryCnt++;
 800c710:	4b11      	ldr	r3, [pc, #68]	; (800c758 <mod_extractCCID+0xc8>)
 800c712:	781b      	ldrb	r3, [r3, #0]
 800c714:	3301      	adds	r3, #1
 800c716:	b2da      	uxtb	r2, r3
 800c718:	4b0f      	ldr	r3, [pc, #60]	; (800c758 <mod_extractCCID+0xc8>)
 800c71a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c71c:	4b0e      	ldr	r3, [pc, #56]	; (800c758 <mod_extractCCID+0xc8>)
 800c71e:	781b      	ldrb	r3, [r3, #0]
 800c720:	2b02      	cmp	r3, #2
 800c722:	d802      	bhi.n	800c72a <mod_extractCCID+0x9a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c724:	2304      	movs	r3, #4
 800c726:	73fb      	strb	r3, [r7, #15]
 800c728:	e006      	b.n	800c738 <mod_extractCCID+0xa8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c72a:	4b0b      	ldr	r3, [pc, #44]	; (800c758 <mod_extractCCID+0xc8>)
 800c72c:	781b      	ldrb	r3, [r3, #0]
 800c72e:	2b03      	cmp	r3, #3
 800c730:	d902      	bls.n	800c738 <mod_extractCCID+0xa8>
		{
			lsu8_retryCnt = 0;
 800c732:	4b09      	ldr	r3, [pc, #36]	; (800c758 <mod_extractCCID+0xc8>)
 800c734:	2200      	movs	r2, #0
 800c736:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c738:	7bfb      	ldrb	r3, [r7, #15]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3710      	adds	r7, #16
 800c73e:	46bd      	mov	sp, r7
 800c740:	bdb0      	pop	{r4, r5, r7, pc}
 800c742:	bf00      	nop
 800c744:	08013d8c 	.word	0x08013d8c
 800c748:	1fff46c4 	.word	0x1fff46c4
 800c74c:	1ffedc2e 	.word	0x1ffedc2e
 800c750:	08013d78 	.word	0x08013d78
 800c754:	1fff4728 	.word	0x1fff4728
 800c758:	1fff477b 	.word	0x1fff477b

0800c75c <mod_extractNUM>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractNUM(void)
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b084      	sub	sp, #16
 800c760:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c762:	2304      	movs	r3, #4
 800c764:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c766:	2300      	movs	r3, #0
 800c768:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c76a:	2300      	movs	r3, #0
 800c76c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
 800c76e:	200c      	movs	r0, #12
 800c770:	491c      	ldr	r1, [pc, #112]	; (800c7e4 <mod_extractNUM+0x88>)
 800c772:	f7ff fa1d 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c776:	4603      	mov	r3, r0
 800c778:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c77a:	7bfb      	ldrb	r3, [r7, #15]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d114      	bne.n	800c7aa <mod_extractNUM+0x4e>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c780:	4819      	ldr	r0, [pc, #100]	; (800c7e8 <mod_extractNUM+0x8c>)
 800c782:	491a      	ldr	r1, [pc, #104]	; (800c7ec <mod_extractNUM+0x90>)
 800c784:	f005 fa93 	bl	8011cae <strstr>
 800c788:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00a      	beq.n	800c7a4 <mod_extractNUM+0x48>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_NUM].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c78e:	1d3b      	adds	r3, r7, #4
 800c790:	4815      	ldr	r0, [pc, #84]	; (800c7e8 <mod_extractNUM+0x8c>)
 800c792:	4917      	ldr	r1, [pc, #92]	; (800c7f0 <mod_extractNUM+0x94>)
 800c794:	461a      	mov	r2, r3
 800c796:	f005 fb00 	bl	8011d9a <strtok_r>
 800c79a:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);

			lu8p_saveptr++;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	607b      	str	r3, [r7, #4]
 800c7a2:	e019      	b.n	800c7d8 <mod_extractNUM+0x7c>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c7a4:	2302      	movs	r3, #2
 800c7a6:	73fb      	strb	r3, [r7, #15]
 800c7a8:	e016      	b.n	800c7d8 <mod_extractNUM+0x7c>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c7aa:	7bfb      	ldrb	r3, [r7, #15]
 800c7ac:	2b04      	cmp	r3, #4
 800c7ae:	d013      	beq.n	800c7d8 <mod_extractNUM+0x7c>
	{
		lsu8_retryCnt++;
 800c7b0:	4b10      	ldr	r3, [pc, #64]	; (800c7f4 <mod_extractNUM+0x98>)
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	3301      	adds	r3, #1
 800c7b6:	b2da      	uxtb	r2, r3
 800c7b8:	4b0e      	ldr	r3, [pc, #56]	; (800c7f4 <mod_extractNUM+0x98>)
 800c7ba:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c7bc:	4b0d      	ldr	r3, [pc, #52]	; (800c7f4 <mod_extractNUM+0x98>)
 800c7be:	781b      	ldrb	r3, [r3, #0]
 800c7c0:	2b02      	cmp	r3, #2
 800c7c2:	d802      	bhi.n	800c7ca <mod_extractNUM+0x6e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c7c4:	2304      	movs	r3, #4
 800c7c6:	73fb      	strb	r3, [r7, #15]
 800c7c8:	e006      	b.n	800c7d8 <mod_extractNUM+0x7c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c7ca:	4b0a      	ldr	r3, [pc, #40]	; (800c7f4 <mod_extractNUM+0x98>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d902      	bls.n	800c7d8 <mod_extractNUM+0x7c>
		{
			lsu8_retryCnt = 0;
 800c7d2:	4b08      	ldr	r3, [pc, #32]	; (800c7f4 <mod_extractNUM+0x98>)
 800c7d4:	2200      	movs	r2, #0
 800c7d6:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c7d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	08013d8c 	.word	0x08013d8c
 800c7e8:	1fff46c4 	.word	0x1fff46c4
 800c7ec:	1ffee0d2 	.word	0x1ffee0d2
 800c7f0:	08013d78 	.word	0x08013d78
 800c7f4:	1fff477c 	.word	0x1fff477c

0800c7f8 <mod_extractOperator>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractOperator(void)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b084      	sub	sp, #16
 800c7fc:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c7fe:	2304      	movs	r3, #4
 800c800:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800c802:	2300      	movs	r3, #0
 800c804:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_savePtr = NULL;
 800c806:	2300      	movs	r3, #0
 800c808:	603b      	str	r3, [r7, #0]
	uint8_t *lu8p_dataPtr = NULL;
 800c80a:	2300      	movs	r3, #0
 800c80c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
 800c80e:	200d      	movs	r0, #13
 800c810:	4937      	ldr	r1, [pc, #220]	; (800c8f0 <mod_extractOperator+0xf8>)
 800c812:	f7ff f9cd 	bl	800bbb0 <mod_sendCmdGetRsp>
 800c816:	4603      	mov	r3, r0
 800c818:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c81a:	7bfb      	ldrb	r3, [r7, #15]
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d14b      	bne.n	800c8b8 <mod_extractOperator+0xc0>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c820:	4834      	ldr	r0, [pc, #208]	; (800c8f4 <mod_extractOperator+0xfc>)
 800c822:	4935      	ldr	r1, [pc, #212]	; (800c8f8 <mod_extractOperator+0x100>)
 800c824:	f005 fa43 	bl	8011cae <strstr>
 800c828:	4603      	mov	r3, r0
	uint8_t *lu8p_dataPtr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d041      	beq.n	800c8b2 <mod_extractOperator+0xba>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_OPERATOR].mu8arr_otherRspString)))
		{
			lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c82e:	463b      	mov	r3, r7
 800c830:	4830      	ldr	r0, [pc, #192]	; (800c8f4 <mod_extractOperator+0xfc>)
 800c832:	4932      	ldr	r1, [pc, #200]	; (800c8fc <mod_extractOperator+0x104>)
 800c834:	461a      	mov	r2, r3
 800c836:	f005 fab0 	bl	8011d9a <strtok_r>
 800c83a:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_savePtr);

			if (NULL != lu8p_Ptr)
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d034      	beq.n	800c8ac <mod_extractOperator+0xb4>
			{
				lu8p_dataPtr = lu8p_savePtr;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	607b      	str	r3, [r7, #4]
				lu8p_dataPtr = (uint8_t *) strchr((const char*) lu8p_dataPtr, ',');
 800c846:	6878      	ldr	r0, [r7, #4]
 800c848:	212c      	movs	r1, #44	; 0x2c
 800c84a:	f005 fa00 	bl	8011c4e <strchr>
 800c84e:	6078      	str	r0, [r7, #4]

				if (NULL != lu8p_dataPtr)
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d027      	beq.n	800c8a6 <mod_extractOperator+0xae>
				{
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c856:	463b      	mov	r3, r7
 800c858:	2000      	movs	r0, #0
 800c85a:	4929      	ldr	r1, [pc, #164]	; (800c900 <mod_extractOperator+0x108>)
 800c85c:	461a      	mov	r2, r3
 800c85e:	f005 fa9c 	bl	8011d9a <strtok_r>
 800c862:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c864:	463b      	mov	r3, r7
 800c866:	2000      	movs	r0, #0
 800c868:	4925      	ldr	r1, [pc, #148]	; (800c900 <mod_extractOperator+0x108>)
 800c86a:	461a      	mov	r2, r3
 800c86c:	f005 fa95 	bl	8011d9a <strtok_r>
 800c870:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_savePtr++;
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	3301      	adds	r3, #1
 800c876:	603b      	str	r3, [r7, #0]
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) "\"",
 800c878:	463b      	mov	r3, r7
 800c87a:	2000      	movs	r0, #0
 800c87c:	4921      	ldr	r1, [pc, #132]	; (800c904 <mod_extractOperator+0x10c>)
 800c87e:	461a      	mov	r2, r3
 800c880:	f005 fa8b 	bl	8011d9a <strtok_r>
 800c884:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					if (lu8p_Ptr != NULL)
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d009      	beq.n	800c8a0 <mod_extractOperator+0xa8>
					{
						memset(gu8_operatorName, 0, sizeof(gu8_operatorName));
 800c88c:	481e      	ldr	r0, [pc, #120]	; (800c908 <mod_extractOperator+0x110>)
 800c88e:	2100      	movs	r1, #0
 800c890:	2214      	movs	r2, #20
 800c892:	f004 feea 	bl	801166a <memset>
						strcpy((char *) &gu8_operatorName, (const char *) lu8p_Ptr);
 800c896:	481c      	ldr	r0, [pc, #112]	; (800c908 <mod_extractOperator+0x110>)
 800c898:	68b9      	ldr	r1, [r7, #8]
 800c89a:	f005 f9e6 	bl	8011c6a <strcpy>
 800c89e:	e022      	b.n	800c8e6 <mod_extractOperator+0xee>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800c8a0:	2302      	movs	r3, #2
 800c8a2:	73fb      	strb	r3, [r7, #15]
 800c8a4:	e01f      	b.n	800c8e6 <mod_extractOperator+0xee>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800c8a6:	2302      	movs	r3, #2
 800c8a8:	73fb      	strb	r3, [r7, #15]
 800c8aa:	e01c      	b.n	800c8e6 <mod_extractOperator+0xee>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c8ac:	2302      	movs	r3, #2
 800c8ae:	73fb      	strb	r3, [r7, #15]
 800c8b0:	e019      	b.n	800c8e6 <mod_extractOperator+0xee>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c8b2:	2302      	movs	r3, #2
 800c8b4:	73fb      	strb	r3, [r7, #15]
 800c8b6:	e016      	b.n	800c8e6 <mod_extractOperator+0xee>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c8b8:	7bfb      	ldrb	r3, [r7, #15]
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d013      	beq.n	800c8e6 <mod_extractOperator+0xee>
	{
		lsu8_retryCnt++;
 800c8be:	4b13      	ldr	r3, [pc, #76]	; (800c90c <mod_extractOperator+0x114>)
 800c8c0:	781b      	ldrb	r3, [r3, #0]
 800c8c2:	3301      	adds	r3, #1
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	4b11      	ldr	r3, [pc, #68]	; (800c90c <mod_extractOperator+0x114>)
 800c8c8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c8ca:	4b10      	ldr	r3, [pc, #64]	; (800c90c <mod_extractOperator+0x114>)
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	2b02      	cmp	r3, #2
 800c8d0:	d802      	bhi.n	800c8d8 <mod_extractOperator+0xe0>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c8d2:	2304      	movs	r3, #4
 800c8d4:	73fb      	strb	r3, [r7, #15]
 800c8d6:	e006      	b.n	800c8e6 <mod_extractOperator+0xee>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c8d8:	4b0c      	ldr	r3, [pc, #48]	; (800c90c <mod_extractOperator+0x114>)
 800c8da:	781b      	ldrb	r3, [r3, #0]
 800c8dc:	2b03      	cmp	r3, #3
 800c8de:	d902      	bls.n	800c8e6 <mod_extractOperator+0xee>
		{
			lsu8_retryCnt = 0;
 800c8e0:	4b0a      	ldr	r3, [pc, #40]	; (800c90c <mod_extractOperator+0x114>)
 800c8e2:	2200      	movs	r2, #0
 800c8e4:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	3710      	adds	r7, #16
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	08013d8c 	.word	0x08013d8c
 800c8f4:	1fff46c4 	.word	0x1fff46c4
 800c8f8:	1ffee576 	.word	0x1ffee576
 800c8fc:	08013d78 	.word	0x08013d78
 800c900:	08013dc0 	.word	0x08013dc0
 800c904:	08013dcc 	.word	0x08013dcc
 800c908:	1fff473c 	.word	0x1fff473c
 800c90c:	1fff477d 	.word	0x1fff477d

0800c910 <mod_simStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t mod_simStatus(void)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c916:	2304      	movs	r3, #4
 800c918:	71fb      	strb	r3, [r7, #7]

	switch (sen_simStatusState)
 800c91a:	4b4f      	ldr	r3, [pc, #316]	; (800ca58 <mod_simStatus+0x148>)
 800c91c:	781b      	ldrb	r3, [r3, #0]
 800c91e:	2b07      	cmp	r3, #7
 800c920:	f200 8090 	bhi.w	800ca44 <mod_simStatus+0x134>
 800c924:	a201      	add	r2, pc, #4	; (adr r2, 800c92c <mod_simStatus+0x1c>)
 800c926:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c92a:	bf00      	nop
 800c92c:	0800c94d 	.word	0x0800c94d
 800c930:	0800c969 	.word	0x0800c969
 800c934:	0800c985 	.word	0x0800c985
 800c938:	0800c9a1 	.word	0x0800c9a1
 800c93c:	0800c9bd 	.word	0x0800c9bd
 800c940:	0800c9df 	.word	0x0800c9df
 800c944:	0800ca01 	.word	0x0800ca01
 800c948:	0800ca23 	.word	0x0800ca23
	{
		case E_SIM_ENABLE_SIM_DETECTION_STATE:
			len_retStatus = mod_enableSimDetection();
 800c94c:	f7ff fce6 	bl	800c31c <mod_enableSimDetection>
 800c950:	4603      	mov	r3, r0
 800c952:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800c954:	79fb      	ldrb	r3, [r7, #7]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d105      	bne.n	800c966 <mod_simStatus+0x56>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c95a:	2304      	movs	r3, #4
 800c95c:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_STATUS_STATE;
 800c95e:	4b3e      	ldr	r3, [pc, #248]	; (800ca58 <mod_simStatus+0x148>)
 800c960:	2201      	movs	r2, #1
 800c962:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c964:	e072      	b.n	800ca4c <mod_simStatus+0x13c>
 800c966:	e071      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_ENABLE_SIM_STATUS_STATE:
			len_retStatus = mod_enableSimStatusReport();
 800c968:	f7ff fd16 	bl	800c398 <mod_enableSimStatusReport>
 800c96c:	4603      	mov	r3, r0
 800c96e:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800c970:	79fb      	ldrb	r3, [r7, #7]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d105      	bne.n	800c982 <mod_simStatus+0x72>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c976:	2304      	movs	r3, #4
 800c978:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CHECK_SIM_STATUS_STATE;
 800c97a:	4b37      	ldr	r3, [pc, #220]	; (800ca58 <mod_simStatus+0x148>)
 800c97c:	2202      	movs	r2, #2
 800c97e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c980:	e064      	b.n	800ca4c <mod_simStatus+0x13c>
 800c982:	e063      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_CHECK_SIM_STATUS_STATE:
			len_retStatus = mod_checkSimStatus();
 800c984:	f7ff fd42 	bl	800c40c <mod_checkSimStatus>
 800c988:	4603      	mov	r3, r0
 800c98a:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800c98c:	79fb      	ldrb	r3, [r7, #7]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d105      	bne.n	800c99e <mod_simStatus+0x8e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c992:	2304      	movs	r3, #4
 800c994:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CPIN_CHECK_STATE;
 800c996:	4b30      	ldr	r3, [pc, #192]	; (800ca58 <mod_simStatus+0x148>)
 800c998:	2203      	movs	r2, #3
 800c99a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c99c:	e056      	b.n	800ca4c <mod_simStatus+0x13c>
 800c99e:	e055      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_CPIN_CHECK_STATE:
			len_retStatus = mod_cpinCheck();
 800c9a0:	f7ff fdb4 	bl	800c50c <mod_cpinCheck>
 800c9a4:	4603      	mov	r3, r0
 800c9a6:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d105      	bne.n	800c9ba <mod_simStatus+0xaa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c9ae:	2304      	movs	r3, #4
 800c9b0:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_IMEI_STATE;
 800c9b2:	4b29      	ldr	r3, [pc, #164]	; (800ca58 <mod_simStatus+0x148>)
 800c9b4:	2204      	movs	r2, #4
 800c9b6:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c9b8:	e048      	b.n	800ca4c <mod_simStatus+0x13c>
 800c9ba:	e047      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_IMEI_STATE:
			len_retStatus = mod_extractIMEI();
 800c9bc:	f7ff fdec 	bl	800c598 <mod_extractIMEI>
 800c9c0:	4603      	mov	r3, r0
 800c9c2:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800c9c4:	79fb      	ldrb	r3, [r7, #7]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d002      	beq.n	800c9d0 <mod_simStatus+0xc0>
 800c9ca:	79fb      	ldrb	r3, [r7, #7]
 800c9cc:	2b04      	cmp	r3, #4
 800c9ce:	d005      	beq.n	800c9dc <mod_simStatus+0xcc>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c9d0:	2304      	movs	r3, #4
 800c9d2:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_CCID_STATE;
 800c9d4:	4b20      	ldr	r3, [pc, #128]	; (800ca58 <mod_simStatus+0x148>)
 800c9d6:	2205      	movs	r2, #5
 800c9d8:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c9da:	e037      	b.n	800ca4c <mod_simStatus+0x13c>
 800c9dc:	e036      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_CCID_STATE:
			len_retStatus = mod_extractCCID();
 800c9de:	f7ff fe57 	bl	800c690 <mod_extractCCID>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800c9e6:	79fb      	ldrb	r3, [r7, #7]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d002      	beq.n	800c9f2 <mod_simStatus+0xe2>
 800c9ec:	79fb      	ldrb	r3, [r7, #7]
 800c9ee:	2b04      	cmp	r3, #4
 800c9f0:	d005      	beq.n	800c9fe <mod_simStatus+0xee>
			{
				len_retStatus = E_RET_INPROGRESS;
 800c9f2:	2304      	movs	r3, #4
 800c9f4:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_NUM_STATE;
 800c9f6:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <mod_simStatus+0x148>)
 800c9f8:	2206      	movs	r2, #6
 800c9fa:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c9fc:	e026      	b.n	800ca4c <mod_simStatus+0x13c>
 800c9fe:	e025      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_NUM_STATE:
			len_retStatus = mod_extractNUM();
 800ca00:	f7ff feac 	bl	800c75c <mod_extractNUM>
 800ca04:	4603      	mov	r3, r0
 800ca06:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800ca08:	79fb      	ldrb	r3, [r7, #7]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <mod_simStatus+0x104>
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	2b04      	cmp	r3, #4
 800ca12:	d005      	beq.n	800ca20 <mod_simStatus+0x110>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ca14:	2304      	movs	r3, #4
 800ca16:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_OPERATOR_STATE;
 800ca18:	4b0f      	ldr	r3, [pc, #60]	; (800ca58 <mod_simStatus+0x148>)
 800ca1a:	2207      	movs	r2, #7
 800ca1c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ca1e:	e015      	b.n	800ca4c <mod_simStatus+0x13c>
 800ca20:	e014      	b.n	800ca4c <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_OPERATOR_STATE:
			len_retStatus = mod_extractOperator();
 800ca22:	f7ff fee9 	bl	800c7f8 <mod_extractOperator>
 800ca26:	4603      	mov	r3, r0
 800ca28:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800ca2a:	79fb      	ldrb	r3, [r7, #7]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d002      	beq.n	800ca36 <mod_simStatus+0x126>
 800ca30:	79fb      	ldrb	r3, [r7, #7]
 800ca32:	2b04      	cmp	r3, #4
 800ca34:	d005      	beq.n	800ca42 <mod_simStatus+0x132>
			{
				len_retStatus = E_RET_SUCCESS;
 800ca36:	2300      	movs	r3, #0
 800ca38:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800ca3a:	4b07      	ldr	r3, [pc, #28]	; (800ca58 <mod_simStatus+0x148>)
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ca40:	e004      	b.n	800ca4c <mod_simStatus+0x13c>
 800ca42:	e003      	b.n	800ca4c <mod_simStatus+0x13c>

		default:
			sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800ca44:	4b04      	ldr	r3, [pc, #16]	; (800ca58 <mod_simStatus+0x148>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	701a      	strb	r2, [r3, #0]
		break;
 800ca4a:	bf00      	nop
	}
	return len_retStatus;
 800ca4c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3708      	adds	r7, #8
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	1fff476a 	.word	0x1fff476a

0800ca5c <mod_networkStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_networkStatus(void)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b082      	sub	sp, #8
 800ca60:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ca62:	2304      	movs	r3, #4
 800ca64:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800ca66:	2300      	movs	r3, #0
 800ca68:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CREG, (uint8_t *) NEW_LINE);
 800ca6a:	200e      	movs	r0, #14
 800ca6c:	4941      	ldr	r1, [pc, #260]	; (800cb74 <mod_networkStatus+0x118>)
 800ca6e:	f7ff f89f 	bl	800bbb0 <mod_sendCmdGetRsp>
 800ca72:	4603      	mov	r3, r0
 800ca74:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800ca76:	79fb      	ldrb	r3, [r7, #7]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d15e      	bne.n	800cb3a <mod_networkStatus+0xde>
	{
		lsu8_retryCnt = 0;
 800ca7c:	4b3e      	ldr	r3, [pc, #248]	; (800cb78 <mod_networkStatus+0x11c>)
 800ca7e:	2200      	movs	r2, #0
 800ca80:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_INPROGRESS;
 800ca82:	2304      	movs	r3, #4
 800ca84:	71fb      	strb	r3, [r7, #7]

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,0");
 800ca86:	483d      	ldr	r0, [pc, #244]	; (800cb7c <mod_networkStatus+0x120>)
 800ca88:	493d      	ldr	r1, [pc, #244]	; (800cb80 <mod_networkStatus+0x124>)
 800ca8a:	f005 f910 	bl	8011cae <strstr>
 800ca8e:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d006      	beq.n	800caa4 <mod_networkStatus+0x48>
		{
			//Not registered
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_NONE;
 800ca96:	4b3b      	ldr	r3, [pc, #236]	; (800cb84 <mod_networkStatus+0x128>)
 800ca98:	2201      	movs	r2, #1
 800ca9a:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	e062      	b.n	800cb6a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,1");
 800caa4:	4835      	ldr	r0, [pc, #212]	; (800cb7c <mod_networkStatus+0x120>)
 800caa6:	4938      	ldr	r1, [pc, #224]	; (800cb88 <mod_networkStatus+0x12c>)
 800caa8:	f005 f901 	bl	8011cae <strstr>
 800caac:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d006      	beq.n	800cac2 <mod_networkStatus+0x66>
		{
			//home network
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_HOME;
 800cab4:	4b33      	ldr	r3, [pc, #204]	; (800cb84 <mod_networkStatus+0x128>)
 800cab6:	2202      	movs	r2, #2
 800cab8:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800caba:	2300      	movs	r3, #0
 800cabc:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cabe:	79fb      	ldrb	r3, [r7, #7]
 800cac0:	e053      	b.n	800cb6a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,2");
 800cac2:	482e      	ldr	r0, [pc, #184]	; (800cb7c <mod_networkStatus+0x120>)
 800cac4:	4931      	ldr	r1, [pc, #196]	; (800cb8c <mod_networkStatus+0x130>)
 800cac6:	f005 f8f2 	bl	8011cae <strstr>
 800caca:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d006      	beq.n	800cae0 <mod_networkStatus+0x84>
		{
			//Not Registered
			gst_deviceStatus.men_networkRegStatus = E_NOT_REGISTERED;
 800cad2:	4b2c      	ldr	r3, [pc, #176]	; (800cb84 <mod_networkStatus+0x128>)
 800cad4:	2203      	movs	r2, #3
 800cad6:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cad8:	2302      	movs	r3, #2
 800cada:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cadc:	79fb      	ldrb	r3, [r7, #7]
 800cade:	e044      	b.n	800cb6a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,3");
 800cae0:	4826      	ldr	r0, [pc, #152]	; (800cb7c <mod_networkStatus+0x120>)
 800cae2:	492b      	ldr	r1, [pc, #172]	; (800cb90 <mod_networkStatus+0x134>)
 800cae4:	f005 f8e3 	bl	8011cae <strstr>
 800cae8:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d006      	beq.n	800cafe <mod_networkStatus+0xa2>
		{
			//Registration denied
			gst_deviceStatus.men_networkRegStatus = E_REGISTER_DENIED;
 800caf0:	4b24      	ldr	r3, [pc, #144]	; (800cb84 <mod_networkStatus+0x128>)
 800caf2:	2204      	movs	r2, #4
 800caf4:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800caf6:	2302      	movs	r3, #2
 800caf8:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cafa:	79fb      	ldrb	r3, [r7, #7]
 800cafc:	e035      	b.n	800cb6a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,4");
 800cafe:	481f      	ldr	r0, [pc, #124]	; (800cb7c <mod_networkStatus+0x120>)
 800cb00:	4924      	ldr	r1, [pc, #144]	; (800cb94 <mod_networkStatus+0x138>)
 800cb02:	f005 f8d4 	bl	8011cae <strstr>
 800cb06:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d006      	beq.n	800cb1c <mod_networkStatus+0xc0>
		{
			//Unknown
			gst_deviceStatus.men_networkRegStatus = E_UNKNOWN;
 800cb0e:	4b1d      	ldr	r3, [pc, #116]	; (800cb84 <mod_networkStatus+0x128>)
 800cb10:	2205      	movs	r2, #5
 800cb12:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cb14:	2302      	movs	r3, #2
 800cb16:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cb18:	79fb      	ldrb	r3, [r7, #7]
 800cb1a:	e026      	b.n	800cb6a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,5");
 800cb1c:	4817      	ldr	r0, [pc, #92]	; (800cb7c <mod_networkStatus+0x120>)
 800cb1e:	491e      	ldr	r1, [pc, #120]	; (800cb98 <mod_networkStatus+0x13c>)
 800cb20:	f005 f8c5 	bl	8011cae <strstr>
 800cb24:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d01d      	beq.n	800cb68 <mod_networkStatus+0x10c>
		{
			//Registered, roaming
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_ROAMING;
 800cb2c:	4b15      	ldr	r3, [pc, #84]	; (800cb84 <mod_networkStatus+0x128>)
 800cb2e:	2206      	movs	r2, #6
 800cb30:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800cb32:	2300      	movs	r3, #0
 800cb34:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cb36:	79fb      	ldrb	r3, [r7, #7]
 800cb38:	e017      	b.n	800cb6a <mod_networkStatus+0x10e>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cb3a:	79fb      	ldrb	r3, [r7, #7]
 800cb3c:	2b04      	cmp	r3, #4
 800cb3e:	d013      	beq.n	800cb68 <mod_networkStatus+0x10c>
	{
		lsu8_retryCnt++;
 800cb40:	4b0d      	ldr	r3, [pc, #52]	; (800cb78 <mod_networkStatus+0x11c>)
 800cb42:	781b      	ldrb	r3, [r3, #0]
 800cb44:	3301      	adds	r3, #1
 800cb46:	b2da      	uxtb	r2, r3
 800cb48:	4b0b      	ldr	r3, [pc, #44]	; (800cb78 <mod_networkStatus+0x11c>)
 800cb4a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cb4c:	4b0a      	ldr	r3, [pc, #40]	; (800cb78 <mod_networkStatus+0x11c>)
 800cb4e:	781b      	ldrb	r3, [r3, #0]
 800cb50:	2b02      	cmp	r3, #2
 800cb52:	d802      	bhi.n	800cb5a <mod_networkStatus+0xfe>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cb54:	2304      	movs	r3, #4
 800cb56:	71fb      	strb	r3, [r7, #7]
 800cb58:	e006      	b.n	800cb68 <mod_networkStatus+0x10c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cb5a:	4b07      	ldr	r3, [pc, #28]	; (800cb78 <mod_networkStatus+0x11c>)
 800cb5c:	781b      	ldrb	r3, [r3, #0]
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d902      	bls.n	800cb68 <mod_networkStatus+0x10c>
		{
			lsu8_retryCnt = 0;
 800cb62:	4b05      	ldr	r3, [pc, #20]	; (800cb78 <mod_networkStatus+0x11c>)
 800cb64:	2200      	movs	r2, #0
 800cb66:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cb68:	79fb      	ldrb	r3, [r7, #7]
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3708      	adds	r7, #8
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
 800cb72:	bf00      	nop
 800cb74:	08013d8c 	.word	0x08013d8c
 800cb78:	1fff477e 	.word	0x1fff477e
 800cb7c:	1fff46c4 	.word	0x1fff46c4
 800cb80:	08013dd0 	.word	0x08013dd0
 800cb84:	1ffea4dc 	.word	0x1ffea4dc
 800cb88:	08013dd4 	.word	0x08013dd4
 800cb8c:	08013dd8 	.word	0x08013dd8
 800cb90:	08013ddc 	.word	0x08013ddc
 800cb94:	08013de0 	.word	0x08013de0
 800cb98:	08013de4 	.word	0x08013de4

0800cb9c <mod_signalQuality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_signalQuality(void)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b082      	sub	sp, #8
 800cba0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cba2:	2304      	movs	r3, #4
 800cba4:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SIGNAL_QLTY, (uint8_t *) NEW_LINE);
 800cbaa:	200f      	movs	r0, #15
 800cbac:	4920      	ldr	r1, [pc, #128]	; (800cc30 <mod_signalQuality+0x94>)
 800cbae:	f7fe ffff 	bl	800bbb0 <mod_sendCmdGetRsp>
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d11d      	bne.n	800cbf8 <mod_signalQuality+0x5c>
	{

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800cbbc:	481d      	ldr	r0, [pc, #116]	; (800cc34 <mod_signalQuality+0x98>)
 800cbbe:	491e      	ldr	r1, [pc, #120]	; (800cc38 <mod_signalQuality+0x9c>)
 800cbc0:	f005 f875 	bl	8011cae <strstr>
 800cbc4:	6038      	str	r0, [r7, #0]
				(const char *) gcst_ATCmdTable[E_IDX_SIGNAL_QLTY].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d012      	beq.n	800cbf2 <mod_signalQuality+0x56>
		{
			lu8p_Ptr += 6;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	3306      	adds	r3, #6
 800cbd0:	603b      	str	r3, [r7, #0]
			gu8_signalQuality = atoi((char *) lu8p_Ptr++);
 800cbd2:	683b      	ldr	r3, [r7, #0]
 800cbd4:	1c5a      	adds	r2, r3, #1
 800cbd6:	603a      	str	r2, [r7, #0]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f004 fd0b 	bl	80115f4 <atoi>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	b2da      	uxtb	r2, r3
 800cbe2:	4b16      	ldr	r3, [pc, #88]	; (800cc3c <mod_signalQuality+0xa0>)
 800cbe4:	701a      	strb	r2, [r3, #0]
			lsu8_retryCnt = 0;
 800cbe6:	4b16      	ldr	r3, [pc, #88]	; (800cc40 <mod_signalQuality+0xa4>)
 800cbe8:	2200      	movs	r2, #0
 800cbea:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_SUCCESS;
 800cbec:	2300      	movs	r3, #0
 800cbee:	71fb      	strb	r3, [r7, #7]
 800cbf0:	e019      	b.n	800cc26 <mod_signalQuality+0x8a>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cbf2:	2302      	movs	r3, #2
 800cbf4:	71fb      	strb	r3, [r7, #7]
 800cbf6:	e016      	b.n	800cc26 <mod_signalQuality+0x8a>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	2b04      	cmp	r3, #4
 800cbfc:	d013      	beq.n	800cc26 <mod_signalQuality+0x8a>
	{
		lsu8_retryCnt++;
 800cbfe:	4b10      	ldr	r3, [pc, #64]	; (800cc40 <mod_signalQuality+0xa4>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	3301      	adds	r3, #1
 800cc04:	b2da      	uxtb	r2, r3
 800cc06:	4b0e      	ldr	r3, [pc, #56]	; (800cc40 <mod_signalQuality+0xa4>)
 800cc08:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cc0a:	4b0d      	ldr	r3, [pc, #52]	; (800cc40 <mod_signalQuality+0xa4>)
 800cc0c:	781b      	ldrb	r3, [r3, #0]
 800cc0e:	2b02      	cmp	r3, #2
 800cc10:	d802      	bhi.n	800cc18 <mod_signalQuality+0x7c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cc12:	2304      	movs	r3, #4
 800cc14:	71fb      	strb	r3, [r7, #7]
 800cc16:	e006      	b.n	800cc26 <mod_signalQuality+0x8a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cc18:	4b09      	ldr	r3, [pc, #36]	; (800cc40 <mod_signalQuality+0xa4>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	2b03      	cmp	r3, #3
 800cc1e:	d902      	bls.n	800cc26 <mod_signalQuality+0x8a>
		{
			lsu8_retryCnt = 0;
 800cc20:	4b07      	ldr	r3, [pc, #28]	; (800cc40 <mod_signalQuality+0xa4>)
 800cc22:	2200      	movs	r2, #0
 800cc24:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cc26:	79fb      	ldrb	r3, [r7, #7]
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}
 800cc30:	08013d8c 	.word	0x08013d8c
 800cc34:	1fff46c4 	.word	0x1fff46c4
 800cc38:	1ffeeebe 	.word	0x1ffeeebe
 800cc3c:	1fff46c0 	.word	0x1fff46c0
 800cc40:	1fff477f 	.word	0x1fff477f

0800cc44 <mod_extractDateTime>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractDateTime(void)
{
 800cc44:	b5b0      	push	{r4, r5, r7, lr}
 800cc46:	b090      	sub	sp, #64	; 0x40
 800cc48:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cc4a:	2304      	movs	r3, #4
 800cc4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cc50:	2300      	movs	r3, #0
 800cc52:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *lu8p_savePtr = NULL;
 800cc54:	2300      	movs	r3, #0
 800cc56:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t lu8arr_tempBuff[50] = { 0 };
 800cc58:	463b      	mov	r3, r7
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	601a      	str	r2, [r3, #0]
 800cc5e:	3304      	adds	r3, #4
 800cc60:	2200      	movs	r2, #0
 800cc62:	601a      	str	r2, [r3, #0]
 800cc64:	3304      	adds	r3, #4
 800cc66:	2200      	movs	r2, #0
 800cc68:	601a      	str	r2, [r3, #0]
 800cc6a:	3304      	adds	r3, #4
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	601a      	str	r2, [r3, #0]
 800cc70:	3304      	adds	r3, #4
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]
 800cc76:	3304      	adds	r3, #4
 800cc78:	2200      	movs	r2, #0
 800cc7a:	601a      	str	r2, [r3, #0]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	2200      	movs	r2, #0
 800cc80:	601a      	str	r2, [r3, #0]
 800cc82:	3304      	adds	r3, #4
 800cc84:	2200      	movs	r2, #0
 800cc86:	601a      	str	r2, [r3, #0]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	2200      	movs	r2, #0
 800cc8c:	601a      	str	r2, [r3, #0]
 800cc8e:	3304      	adds	r3, #4
 800cc90:	2200      	movs	r2, #0
 800cc92:	601a      	str	r2, [r3, #0]
 800cc94:	3304      	adds	r3, #4
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	3304      	adds	r3, #4
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	601a      	str	r2, [r3, #0]
 800cca0:	3304      	adds	r3, #4
 800cca2:	2200      	movs	r2, #0
 800cca4:	801a      	strh	r2, [r3, #0]
 800cca6:	3302      	adds	r3, #2

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CCLK, (uint8_t *) NEW_LINE);
 800cca8:	2010      	movs	r0, #16
 800ccaa:	492e      	ldr	r1, [pc, #184]	; (800cd64 <mod_extractDateTime+0x120>)
 800ccac:	f7fe ff80 	bl	800bbb0 <mod_sendCmdGetRsp>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800ccb6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d133      	bne.n	800cd26 <mod_extractDateTime+0xe2>
	{
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800ccbe:	482a      	ldr	r0, [pc, #168]	; (800cd68 <mod_extractDateTime+0x124>)
 800ccc0:	492a      	ldr	r1, [pc, #168]	; (800cd6c <mod_extractDateTime+0x128>)
 800ccc2:	f004 fff4 	bl	8011cae <strstr>
 800ccc6:	63b8      	str	r0, [r7, #56]	; 0x38
				(const char *) gcst_ATCmdTable[E_IDX_CCLK].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800ccc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d044      	beq.n	800cd58 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800ccce:	4b28      	ldr	r3, [pc, #160]	; (800cd70 <mod_extractDateTime+0x12c>)
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	701a      	strb	r2, [r3, #0]

			memcpy(lu8arr_tempBuff, gu8arr_respBuffer, 50);
 800ccd4:	4b24      	ldr	r3, [pc, #144]	; (800cd68 <mod_extractDateTime+0x124>)
 800ccd6:	463c      	mov	r4, r7
 800ccd8:	461d      	mov	r5, r3
 800ccda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ccdc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ccde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cce0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cce6:	682b      	ldr	r3, [r5, #0]
 800cce8:	8023      	strh	r3, [r4, #0]
			lu8p_Ptr = (uint8_t *) strtok_r((char *) lu8arr_tempBuff, (const char *) ":",
 800ccea:	463a      	mov	r2, r7
 800ccec:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ccf0:	4610      	mov	r0, r2
 800ccf2:	4920      	ldr	r1, [pc, #128]	; (800cd74 <mod_extractDateTime+0x130>)
 800ccf4:	461a      	mov	r2, r3
 800ccf6:	f005 f850 	bl	8011d9a <strtok_r>
 800ccfa:	63b8      	str	r0, [r7, #56]	; 0x38
					(char **) &lu8p_savePtr);
			lu8p_savePtr += 2;
 800ccfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccfe:	3302      	adds	r3, #2
 800cd00:	637b      	str	r3, [r7, #52]	; 0x34
			if (NULL != lu8p_savePtr)
 800cd02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d00a      	beq.n	800cd1e <mod_extractDateTime+0xda>
			{
				memset(gu8_dataTime, 0, sizeof(gu8_dataTime));
 800cd08:	481b      	ldr	r0, [pc, #108]	; (800cd78 <mod_extractDateTime+0x134>)
 800cd0a:	2100      	movs	r1, #0
 800cd0c:	2214      	movs	r2, #20
 800cd0e:	f004 fcac 	bl	801166a <memset>
				strncpy((char *) gu8_dataTime, (const char *) lu8p_savePtr,
 800cd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd14:	4818      	ldr	r0, [pc, #96]	; (800cd78 <mod_extractDateTime+0x134>)
 800cd16:	4619      	mov	r1, r3
 800cd18:	2214      	movs	r2, #20
 800cd1a:	f004 ffb6 	bl	8011c8a <strncpy>
				TIME_SIZE);
			}
			len_retStatus = E_RET_SUCCESS;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd24:	e018      	b.n	800cd58 <mod_extractDateTime+0x114>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cd26:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cd2a:	2b04      	cmp	r3, #4
 800cd2c:	d014      	beq.n	800cd58 <mod_extractDateTime+0x114>
	{
		lsu8_retryCnt++;
 800cd2e:	4b10      	ldr	r3, [pc, #64]	; (800cd70 <mod_extractDateTime+0x12c>)
 800cd30:	781b      	ldrb	r3, [r3, #0]
 800cd32:	3301      	adds	r3, #1
 800cd34:	b2da      	uxtb	r2, r3
 800cd36:	4b0e      	ldr	r3, [pc, #56]	; (800cd70 <mod_extractDateTime+0x12c>)
 800cd38:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cd3a:	4b0d      	ldr	r3, [pc, #52]	; (800cd70 <mod_extractDateTime+0x12c>)
 800cd3c:	781b      	ldrb	r3, [r3, #0]
 800cd3e:	2b02      	cmp	r3, #2
 800cd40:	d803      	bhi.n	800cd4a <mod_extractDateTime+0x106>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cd42:	2304      	movs	r3, #4
 800cd44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cd48:	e006      	b.n	800cd58 <mod_extractDateTime+0x114>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cd4a:	4b09      	ldr	r3, [pc, #36]	; (800cd70 <mod_extractDateTime+0x12c>)
 800cd4c:	781b      	ldrb	r3, [r3, #0]
 800cd4e:	2b03      	cmp	r3, #3
 800cd50:	d902      	bls.n	800cd58 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800cd52:	4b07      	ldr	r3, [pc, #28]	; (800cd70 <mod_extractDateTime+0x12c>)
 800cd54:	2200      	movs	r2, #0
 800cd56:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800cd58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3740      	adds	r7, #64	; 0x40
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bdb0      	pop	{r4, r5, r7, pc}
 800cd64:	08013d8c 	.word	0x08013d8c
 800cd68:	1fff46c4 	.word	0x1fff46c4
 800cd6c:	1ffef362 	.word	0x1ffef362
 800cd70:	1fff4780 	.word	0x1fff4780
 800cd74:	08013d78 	.word	0x08013d78
 800cd78:	1fff4750 	.word	0x1fff4750

0800cd7c <mod_mqttConnect>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttConnect(void)
{
 800cd7c:	b590      	push	{r4, r7, lr}
 800cd7e:	b08f      	sub	sp, #60	; 0x3c
 800cd80:	af02      	add	r7, sp, #8
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cd82:	2304      	movs	r3, #4
 800cd84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[35] = { 0 };
 800cd88:	463b      	mov	r3, r7
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	3304      	adds	r3, #4
 800cd90:	2200      	movs	r2, #0
 800cd92:	601a      	str	r2, [r3, #0]
 800cd94:	3304      	adds	r3, #4
 800cd96:	2200      	movs	r2, #0
 800cd98:	601a      	str	r2, [r3, #0]
 800cd9a:	3304      	adds	r3, #4
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	601a      	str	r2, [r3, #0]
 800cda0:	3304      	adds	r3, #4
 800cda2:	2200      	movs	r2, #0
 800cda4:	601a      	str	r2, [r3, #0]
 800cda6:	3304      	adds	r3, #4
 800cda8:	2200      	movs	r2, #0
 800cdaa:	601a      	str	r2, [r3, #0]
 800cdac:	3304      	adds	r3, #4
 800cdae:	2200      	movs	r2, #0
 800cdb0:	601a      	str	r2, [r3, #0]
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	601a      	str	r2, [r3, #0]
 800cdb8:	3304      	adds	r3, #4
 800cdba:	2200      	movs	r2, #0
 800cdbc:	801a      	strh	r2, [r3, #0]
 800cdbe:	3302      	adds	r3, #2
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	701a      	strb	r2, [r3, #0]
 800cdc4:	3301      	adds	r3, #1
	uint8_t *lu8p_Ptr = NULL;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	62bb      	str	r3, [r7, #40]	; 0x28
	short ls_result = E_MQTT_CON_NONE;
 800cdca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cdce:	84fb      	strh	r3, [r7, #38]	; 0x26

	sprintf((char *) lu8arr_param, (const char*) "%d,\"%s_%s\"\r\n",
 800cdd0:	4b87      	ldr	r3, [pc, #540]	; (800cff0 <mod_mqttConnect+0x274>)
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	461c      	mov	r4, r3
 800cdd6:	463a      	mov	r2, r7
 800cdd8:	4b86      	ldr	r3, [pc, #536]	; (800cff4 <mod_mqttConnect+0x278>)
 800cdda:	9300      	str	r3, [sp, #0]
 800cddc:	4610      	mov	r0, r2
 800cdde:	4986      	ldr	r1, [pc, #536]	; (800cff8 <mod_mqttConnect+0x27c>)
 800cde0:	4622      	mov	r2, r4
 800cde2:	4b86      	ldr	r3, [pc, #536]	; (800cffc <mod_mqttConnect+0x280>)
 800cde4:	f004 ff00 	bl	8011be8 <siprintf>
			sgu8_mqttClientId, MQTT_CONNECT_CLINT_ID, &gu8arr_IMEINum[5]);	//using last 10 digits of IMEI for unique client ID for every VCU

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CONNECT, (uint8_t *) lu8arr_param);
 800cde8:	463b      	mov	r3, r7
 800cdea:	2014      	movs	r0, #20
 800cdec:	4619      	mov	r1, r3
 800cdee:	f7fe fedf 	bl	800bbb0 <mod_sendCmdGetRsp>
 800cdf2:	4603      	mov	r3, r0
 800cdf4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (E_RET_SUCCESS == len_retStatus)
 800cdf8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	f040 8096 	bne.w	800cf2e <mod_mqttConnect+0x1b2>
	{
		lsu8_retryCnt = 0;
 800ce02:	4b7f      	ldr	r3, [pc, #508]	; (800d000 <mod_mqttConnect+0x284>)
 800ce04:	2200      	movs	r2, #0
 800ce06:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800ce08:	487e      	ldr	r0, [pc, #504]	; (800d004 <mod_mqttConnect+0x288>)
 800ce0a:	497f      	ldr	r1, [pc, #508]	; (800d008 <mod_mqttConnect+0x28c>)
 800ce0c:	f004 ff4f 	bl	8011cae <strstr>
 800ce10:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CONNECT].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f000 8086 	beq.w	800cf26 <mod_mqttConnect+0x1aa>
		{
			lu8p_Ptr += 10;
 800ce1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce1c:	330a      	adds	r3, #10
 800ce1e:	62bb      	str	r3, [r7, #40]	; 0x28
			ls_result = atoi((char *) lu8p_Ptr);
 800ce20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce22:	f004 fbe7 	bl	80115f4 <atoi>
 800ce26:	4603      	mov	r3, r0
 800ce28:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (sgu8_mqttClientId == ls_result)	//check client Idx
 800ce2a:	4b71      	ldr	r3, [pc, #452]	; (800cff0 <mod_mqttConnect+0x274>)
 800ce2c:	781b      	ldrb	r3, [r3, #0]
 800ce2e:	461a      	mov	r2, r3
 800ce30:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d172      	bne.n	800cf1e <mod_mqttConnect+0x1a2>
			{
				lu8p_Ptr += 2;
 800ce38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce3a:	3302      	adds	r3, #2
 800ce3c:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800ce3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce40:	f004 fbd8 	bl	80115f4 <atoi>
 800ce44:	4603      	mov	r3, r0
 800ce46:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (0 == ls_result)	//Packet sent successfully and ACK received from server
 800ce48:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d119      	bne.n	800ce84 <mod_mqttConnect+0x108>
				{
					lu8p_Ptr += 2;
 800ce50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce52:	3302      	adds	r3, #2
 800ce54:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800ce56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ce58:	f004 fbcc 	bl	80115f4 <atoi>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (0 == ls_result)	//Connection Accepted
 800ce60:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d106      	bne.n	800ce76 <mod_mqttConnect+0xfa>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800ce68:	4b68      	ldr	r3, [pc, #416]	; (800d00c <mod_mqttConnect+0x290>)
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	715a      	strb	r2, [r3, #5]
								E_ACK_RCVD_CONNECT_ACCEPT;

						len_retStatus = E_RET_SUCCESS;
 800ce6e:	2300      	movs	r3, #0
 800ce70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ce74:	e0b5      	b.n	800cfe2 <mod_mqttConnect+0x266>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800ce76:	4b65      	ldr	r3, [pc, #404]	; (800d00c <mod_mqttConnect+0x290>)
 800ce78:	2208      	movs	r2, #8
 800ce7a:	715a      	strb	r2, [r3, #5]
						len_retStatus = E_RET_FAILED;
 800ce7c:	2302      	movs	r3, #2
 800ce7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ce82:	e0ae      	b.n	800cfe2 <mod_mqttConnect+0x266>
					}
				}
				else if (1 == ls_result)	//Packet retransmission
 800ce84:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d106      	bne.n	800ce9a <mod_mqttConnect+0x11e>
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_PACKET_RETRANSMISSION;
 800ce8c:	4b5f      	ldr	r3, [pc, #380]	; (800d00c <mod_mqttConnect+0x290>)
 800ce8e:	2201      	movs	r2, #1
 800ce90:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_INPROGRESS;
 800ce92:	2304      	movs	r3, #4
 800ce94:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ce98:	e0a3      	b.n	800cfe2 <mod_mqttConnect+0x266>
				}
				else if (2 == ls_result)	//Failed to send packet
 800ce9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d136      	bne.n	800cf10 <mod_mqttConnect+0x194>
				{
					lu8p_Ptr += 2;
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea4:	3302      	adds	r3, #2
 800cea6:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800cea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ceaa:	f004 fba3 	bl	80115f4 <atoi>
 800ceae:	4603      	mov	r3, r0
 800ceb0:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)	//Connection Refused: Unacceptable Protocol Version
 800ceb2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ceb6:	2b01      	cmp	r3, #1
 800ceb8:	d103      	bne.n	800cec2 <mod_mqttConnect+0x146>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800ceba:	4b54      	ldr	r3, [pc, #336]	; (800d00c <mod_mqttConnect+0x290>)
 800cebc:	2203      	movs	r2, #3
 800cebe:	715a      	strb	r2, [r3, #5]
 800cec0:	e022      	b.n	800cf08 <mod_mqttConnect+0x18c>
								E_CON_REF_UNACC_PRO_VER;
					}
					else if (2 == ls_result)	//Connection Refused: Identifier Rejected
 800cec2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cec6:	2b02      	cmp	r3, #2
 800cec8:	d103      	bne.n	800ced2 <mod_mqttConnect+0x156>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_ID_REJECT;
 800ceca:	4b50      	ldr	r3, [pc, #320]	; (800d00c <mod_mqttConnect+0x290>)
 800cecc:	2204      	movs	r2, #4
 800cece:	715a      	strb	r2, [r3, #5]
 800ced0:	e01a      	b.n	800cf08 <mod_mqttConnect+0x18c>
					}
					else if (3 == ls_result)	//Connection Refused: Server Unavailable
 800ced2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800ced6:	2b03      	cmp	r3, #3
 800ced8:	d103      	bne.n	800cee2 <mod_mqttConnect+0x166>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800ceda:	4b4c      	ldr	r3, [pc, #304]	; (800d00c <mod_mqttConnect+0x290>)
 800cedc:	2205      	movs	r2, #5
 800cede:	715a      	strb	r2, [r3, #5]
 800cee0:	e012      	b.n	800cf08 <mod_mqttConnect+0x18c>
								E_CON_REF_SERVER_UNAVAIL;
					}
					else if (4 == ls_result)//Connection Refused: Bad User Name or Password
 800cee2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cee6:	2b04      	cmp	r3, #4
 800cee8:	d103      	bne.n	800cef2 <mod_mqttConnect+0x176>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800ceea:	4b48      	ldr	r3, [pc, #288]	; (800d00c <mod_mqttConnect+0x290>)
 800ceec:	2206      	movs	r2, #6
 800ceee:	715a      	strb	r2, [r3, #5]
 800cef0:	e00a      	b.n	800cf08 <mod_mqttConnect+0x18c>
								E_CON_REF_BAD_USR_PASS;
					}
					else if (5 == ls_result) //Connection Refused: Not Authorized
 800cef2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d103      	bne.n	800cf02 <mod_mqttConnect+0x186>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_NOT_AUTH;
 800cefa:	4b44      	ldr	r3, [pc, #272]	; (800d00c <mod_mqttConnect+0x290>)
 800cefc:	2207      	movs	r2, #7
 800cefe:	715a      	strb	r2, [r3, #5]
 800cf00:	e002      	b.n	800cf08 <mod_mqttConnect+0x18c>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800cf02:	4b42      	ldr	r3, [pc, #264]	; (800d00c <mod_mqttConnect+0x290>)
 800cf04:	2208      	movs	r2, #8
 800cf06:	715a      	strb	r2, [r3, #5]
					}

					len_retStatus = E_RET_FAILED;
 800cf08:	2302      	movs	r3, #2
 800cf0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf0e:	e068      	b.n	800cfe2 <mod_mqttConnect+0x266>
				}
				else
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800cf10:	4b3e      	ldr	r3, [pc, #248]	; (800d00c <mod_mqttConnect+0x290>)
 800cf12:	2208      	movs	r2, #8
 800cf14:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_FAILED;
 800cf16:	2302      	movs	r3, #2
 800cf18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf1c:	e061      	b.n	800cfe2 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800cf1e:	2302      	movs	r3, #2
 800cf20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf24:	e05d      	b.n	800cfe2 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cf26:	2302      	movs	r3, #2
 800cf28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf2c:	e059      	b.n	800cfe2 <mod_mqttConnect+0x266>
		}
	}
	else if (E_RET_RSP_ERROR == len_retStatus)
 800cf2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	d13c      	bne.n	800cfb0 <mod_mqttConnect+0x234>
	{
		lsu8_retryCnt = 0;
 800cf36:	4b32      	ldr	r3, [pc, #200]	; (800d000 <mod_mqttConnect+0x284>)
 800cf38:	2200      	movs	r2, #0
 800cf3a:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800cf3c:	4831      	ldr	r0, [pc, #196]	; (800d004 <mod_mqttConnect+0x288>)
 800cf3e:	4934      	ldr	r1, [pc, #208]	; (800d010 <mod_mqttConnect+0x294>)
 800cf40:	f004 feb5 	bl	8011cae <strstr>
 800cf44:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) QMTSTAT);
		if (lu8p_Ptr != NULL)
 800cf46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02d      	beq.n	800cfa8 <mod_mqttConnect+0x22c>
		{
			if (lu8p_Ptr != NULL)
 800cf4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d026      	beq.n	800cfa0 <mod_mqttConnect+0x224>
			{
				lu8p_Ptr += 10;
 800cf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf54:	330a      	adds	r3, #10
 800cf56:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800cf58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf5a:	f004 fb4b 	bl	80115f4 <atoi>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (sgu8_mqttClientId == ls_result)	//check client Idx
 800cf62:	4b23      	ldr	r3, [pc, #140]	; (800cff0 <mod_mqttConnect+0x274>)
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	461a      	mov	r2, r3
 800cf68:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf6c:	429a      	cmp	r2, r3
 800cf6e:	d113      	bne.n	800cf98 <mod_mqttConnect+0x21c>
				{
					lu8p_Ptr += 2;
 800cf70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf72:	3302      	adds	r3, #2
 800cf74:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800cf76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf78:	f004 fb3c 	bl	80115f4 <atoi>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)
 800cf80:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf84:	2b01      	cmp	r3, #1
 800cf86:	d103      	bne.n	800cf90 <mod_mqttConnect+0x214>
					{
						len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800cf88:	230a      	movs	r3, #10
 800cf8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf8e:	e028      	b.n	800cfe2 <mod_mqttConnect+0x266>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800cf90:	2302      	movs	r3, #2
 800cf92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf96:	e024      	b.n	800cfe2 <mod_mqttConnect+0x266>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800cf98:	2302      	movs	r3, #2
 800cf9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf9e:	e020      	b.n	800cfe2 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800cfa0:	2302      	movs	r3, #2
 800cfa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfa6:	e01c      	b.n	800cfe2 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cfa8:	2302      	movs	r3, #2
 800cfaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfae:	e018      	b.n	800cfe2 <mod_mqttConnect+0x266>
		}

	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cfb0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cfb4:	2b04      	cmp	r3, #4
 800cfb6:	d014      	beq.n	800cfe2 <mod_mqttConnect+0x266>
	{
		lsu8_retryCnt++;
 800cfb8:	4b11      	ldr	r3, [pc, #68]	; (800d000 <mod_mqttConnect+0x284>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	4b0f      	ldr	r3, [pc, #60]	; (800d000 <mod_mqttConnect+0x284>)
 800cfc2:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cfc4:	4b0e      	ldr	r3, [pc, #56]	; (800d000 <mod_mqttConnect+0x284>)
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	2b02      	cmp	r3, #2
 800cfca:	d803      	bhi.n	800cfd4 <mod_mqttConnect+0x258>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cfcc:	2304      	movs	r3, #4
 800cfce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cfd2:	e006      	b.n	800cfe2 <mod_mqttConnect+0x266>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cfd4:	4b0a      	ldr	r3, [pc, #40]	; (800d000 <mod_mqttConnect+0x284>)
 800cfd6:	781b      	ldrb	r3, [r3, #0]
 800cfd8:	2b03      	cmp	r3, #3
 800cfda:	d902      	bls.n	800cfe2 <mod_mqttConnect+0x266>
		{
			lsu8_retryCnt = 0;
 800cfdc:	4b08      	ldr	r3, [pc, #32]	; (800d000 <mod_mqttConnect+0x284>)
 800cfde:	2200      	movs	r2, #0
 800cfe0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800cfe2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3734      	adds	r7, #52	; 0x34
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd90      	pop	{r4, r7, pc}
 800cfee:	bf00      	nop
 800cff0:	1fff4765 	.word	0x1fff4765
 800cff4:	1fff471d 	.word	0x1fff471d
 800cff8:	08013de8 	.word	0x08013de8
 800cffc:	08013df8 	.word	0x08013df8
 800d000:	1fff4781 	.word	0x1fff4781
 800d004:	1fff46c4 	.word	0x1fff46c4
 800d008:	1fff05f2 	.word	0x1fff05f2
 800d00c:	1ffea4dc 	.word	0x1ffea4dc
 800d010:	08013cec 	.word	0x08013cec

0800d014 <mod_mqttEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttEnableFunctionality(void)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d01a:	2304      	movs	r3, #4
 800d01c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d01e:	2300      	movs	r3, #0
 800d020:	80bb      	strh	r3, [r7, #4]
 800d022:	2300      	movs	r3, #0
 800d024:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "1\r\n");
 800d026:	1d3b      	adds	r3, r7, #4
 800d028:	4a16      	ldr	r2, [pc, #88]	; (800d084 <mod_mqttEnableFunctionality+0x70>)
 800d02a:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d02c:	1d3b      	adds	r3, r7, #4
 800d02e:	2017      	movs	r0, #23
 800d030:	4619      	mov	r1, r3
 800d032:	f7fe fdbd 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d036:	4603      	mov	r3, r0
 800d038:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d03a:	79fb      	ldrb	r3, [r7, #7]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d105      	bne.n	800d04c <mod_mqttEnableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d040:	4b11      	ldr	r3, [pc, #68]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d042:	2200      	movs	r2, #0
 800d044:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d046:	2300      	movs	r3, #0
 800d048:	71fb      	strb	r3, [r7, #7]
 800d04a:	e016      	b.n	800d07a <mod_mqttEnableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d04c:	79fb      	ldrb	r3, [r7, #7]
 800d04e:	2b04      	cmp	r3, #4
 800d050:	d013      	beq.n	800d07a <mod_mqttEnableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d052:	4b0d      	ldr	r3, [pc, #52]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	3301      	adds	r3, #1
 800d058:	b2da      	uxtb	r2, r3
 800d05a:	4b0b      	ldr	r3, [pc, #44]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d05c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d05e:	4b0a      	ldr	r3, [pc, #40]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d060:	781b      	ldrb	r3, [r3, #0]
 800d062:	2b02      	cmp	r3, #2
 800d064:	d802      	bhi.n	800d06c <mod_mqttEnableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d066:	2304      	movs	r3, #4
 800d068:	71fb      	strb	r3, [r7, #7]
 800d06a:	e006      	b.n	800d07a <mod_mqttEnableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d06c:	4b06      	ldr	r3, [pc, #24]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d06e:	781b      	ldrb	r3, [r3, #0]
 800d070:	2b03      	cmp	r3, #3
 800d072:	d902      	bls.n	800d07a <mod_mqttEnableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d074:	4b04      	ldr	r3, [pc, #16]	; (800d088 <mod_mqttEnableFunctionality+0x74>)
 800d076:	2200      	movs	r2, #0
 800d078:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d07a:	79fb      	ldrb	r3, [r7, #7]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3708      	adds	r7, #8
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	000a0d31 	.word	0x000a0d31
 800d088:	1fff4782 	.word	0x1fff4782

0800d08c <mod_mqttDisableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableFunctionality(void)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d092:	2304      	movs	r3, #4
 800d094:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d096:	2300      	movs	r3, #0
 800d098:	80bb      	strh	r3, [r7, #4]
 800d09a:	2300      	movs	r3, #0
 800d09c:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "4\r\n");
 800d09e:	1d3b      	adds	r3, r7, #4
 800d0a0:	4a16      	ldr	r2, [pc, #88]	; (800d0fc <mod_mqttDisableFunctionality+0x70>)
 800d0a2:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d0a4:	1d3b      	adds	r3, r7, #4
 800d0a6:	2017      	movs	r0, #23
 800d0a8:	4619      	mov	r1, r3
 800d0aa:	f7fe fd81 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d0b2:	79fb      	ldrb	r3, [r7, #7]
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d105      	bne.n	800d0c4 <mod_mqttDisableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d0b8:	4b11      	ldr	r3, [pc, #68]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0ba:	2200      	movs	r2, #0
 800d0bc:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	71fb      	strb	r3, [r7, #7]
 800d0c2:	e016      	b.n	800d0f2 <mod_mqttDisableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d0c4:	79fb      	ldrb	r3, [r7, #7]
 800d0c6:	2b04      	cmp	r3, #4
 800d0c8:	d013      	beq.n	800d0f2 <mod_mqttDisableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d0ca:	4b0d      	ldr	r3, [pc, #52]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	3301      	adds	r3, #1
 800d0d0:	b2da      	uxtb	r2, r3
 800d0d2:	4b0b      	ldr	r3, [pc, #44]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0d4:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d0d6:	4b0a      	ldr	r3, [pc, #40]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d802      	bhi.n	800d0e4 <mod_mqttDisableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d0de:	2304      	movs	r3, #4
 800d0e0:	71fb      	strb	r3, [r7, #7]
 800d0e2:	e006      	b.n	800d0f2 <mod_mqttDisableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d0e4:	4b06      	ldr	r3, [pc, #24]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d902      	bls.n	800d0f2 <mod_mqttDisableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d0ec:	4b04      	ldr	r3, [pc, #16]	; (800d100 <mod_mqttDisableFunctionality+0x74>)
 800d0ee:	2200      	movs	r2, #0
 800d0f0:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d0f2:	79fb      	ldrb	r3, [r7, #7]
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3708      	adds	r7, #8
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}
 800d0fc:	000a0d34 	.word	0x000a0d34
 800d100:	1fff4783 	.word	0x1fff4783

0800d104 <mod_mqttDisableEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableEnableFunctionality(void)
{
 800d104:	b580      	push	{r7, lr}
 800d106:	b082      	sub	sp, #8
 800d108:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d10a:	2304      	movs	r3, #4
 800d10c:	71fb      	strb	r3, [r7, #7]

	switch (sen_modemResetState)
 800d10e:	4b21      	ldr	r3, [pc, #132]	; (800d194 <mod_mqttDisableEnableFunctionality+0x90>)
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	2b01      	cmp	r3, #1
 800d114:	d016      	beq.n	800d144 <mod_mqttDisableEnableFunctionality+0x40>
 800d116:	2b02      	cmp	r3, #2
 800d118:	d02b      	beq.n	800d172 <mod_mqttDisableEnableFunctionality+0x6e>
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d000      	beq.n	800d120 <mod_mqttDisableEnableFunctionality+0x1c>
				len_retStatus = E_RET_SUCCESS;
			}
		break;

		default:
		break;
 800d11e:	e034      	b.n	800d18a <mod_mqttDisableEnableFunctionality+0x86>
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;

	switch (sen_modemResetState)
	{
		case E_RST_DISABLE_FUNCTION:
			len_retStatus = mod_mqttDisableFunctionality();
 800d120:	f7ff ffb4 	bl	800d08c <mod_mqttDisableFunctionality>
 800d124:	4603      	mov	r3, r0
 800d126:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800d128:	79fb      	ldrb	r3, [r7, #7]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d109      	bne.n	800d142 <mod_mqttDisableEnableFunctionality+0x3e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800d12e:	2304      	movs	r3, #4
 800d130:	71fb      	strb	r3, [r7, #7]
				sen_modemResetState = E_RST_ENALBE_FUNCTION;
 800d132:	4b18      	ldr	r3, [pc, #96]	; (800d194 <mod_mqttDisableEnableFunctionality+0x90>)
 800d134:	2201      	movs	r2, #1
 800d136:	701a      	strb	r2, [r3, #0]
				tm_setResetTimer(5000);
 800d138:	f241 3088 	movw	r0, #5000	; 0x1388
 800d13c:	f7f3 f932 	bl	80003a4 <tm_setResetTimer>
			}
		break;
 800d140:	e023      	b.n	800d18a <mod_mqttDisableEnableFunctionality+0x86>
 800d142:	e022      	b.n	800d18a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_ENALBE_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d144:	f7f3 f93c 	bl	80003c0 <tm_getResetTimerValue>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d110      	bne.n	800d170 <mod_mqttDisableEnableFunctionality+0x6c>
			{
				len_retStatus = mod_mqttEnableFunctionality();
 800d14e:	f7ff ff61 	bl	800d014 <mod_mqttEnableFunctionality>
 800d152:	4603      	mov	r3, r0
 800d154:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d109      	bne.n	800d170 <mod_mqttDisableEnableFunctionality+0x6c>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d15c:	2304      	movs	r3, #4
 800d15e:	71fb      	strb	r3, [r7, #7]
					sen_modemResetState = E_RST_WAIT_FUNCTION;
 800d160:	4b0c      	ldr	r3, [pc, #48]	; (800d194 <mod_mqttDisableEnableFunctionality+0x90>)
 800d162:	2202      	movs	r2, #2
 800d164:	701a      	strb	r2, [r3, #0]
					tm_setResetTimer(5000);
 800d166:	f241 3088 	movw	r0, #5000	; 0x1388
 800d16a:	f7f3 f91b 	bl	80003a4 <tm_setResetTimer>
				}
			}
		break;
 800d16e:	e00c      	b.n	800d18a <mod_mqttDisableEnableFunctionality+0x86>
 800d170:	e00b      	b.n	800d18a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_WAIT_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d172:	f7f3 f925 	bl	80003c0 <tm_getResetTimerValue>
 800d176:	4603      	mov	r3, r0
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d105      	bne.n	800d188 <mod_mqttDisableEnableFunctionality+0x84>
			{
				sen_modemResetState = E_RST_DISABLE_FUNCTION;
 800d17c:	4b05      	ldr	r3, [pc, #20]	; (800d194 <mod_mqttDisableEnableFunctionality+0x90>)
 800d17e:	2200      	movs	r2, #0
 800d180:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_SUCCESS;
 800d182:	2300      	movs	r3, #0
 800d184:	71fb      	strb	r3, [r7, #7]
			}
		break;
 800d186:	e7ff      	b.n	800d188 <mod_mqttDisableEnableFunctionality+0x84>
 800d188:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d18a:	79fb      	ldrb	r3, [r7, #7]
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3708      	adds	r7, #8
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}
 800d194:	1fff476d 	.word	0x1fff476d

0800d198 <mod_mqttPublishData>:
*
* Return values 	:	en_responseRetCodes_t - return status
*
****************************************************************************/
static en_responseRetCodes_t mod_mqttPublishData(uint8_t * lu8p_data, uint16_t lu16_len, uint8_t* lu8p_topic)
{
 800d198:	b590      	push	{r4, r7, lr}
 800d19a:	b09b      	sub	sp, #108	; 0x6c
 800d19c:	af02      	add	r7, sp, #8
 800d19e:	60f8      	str	r0, [r7, #12]
 800d1a0:	460b      	mov	r3, r1
 800d1a2:	607a      	str	r2, [r7, #4]
 800d1a4:	817b      	strh	r3, [r7, #10]
	static uint8_t lsu8_retryCnt = 0;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d1a6:	2304      	movs	r3, #4
 800d1a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t *lu8p_Ptr = NULL;
 800d1ac:	2300      	movs	r3, #0
 800d1ae:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t lu8arr_param[50] = { 0 };
 800d1b0:	f107 0314 	add.w	r3, r7, #20
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	601a      	str	r2, [r3, #0]
 800d1b8:	3304      	adds	r3, #4
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	601a      	str	r2, [r3, #0]
 800d1be:	3304      	adds	r3, #4
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]
 800d1c4:	3304      	adds	r3, #4
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	601a      	str	r2, [r3, #0]
 800d1d0:	3304      	adds	r3, #4
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
 800d1d6:	3304      	adds	r3, #4
 800d1d8:	2200      	movs	r2, #0
 800d1da:	601a      	str	r2, [r3, #0]
 800d1dc:	3304      	adds	r3, #4
 800d1de:	2200      	movs	r2, #0
 800d1e0:	601a      	str	r2, [r3, #0]
 800d1e2:	3304      	adds	r3, #4
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
 800d1e8:	3304      	adds	r3, #4
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	601a      	str	r2, [r3, #0]
 800d1ee:	3304      	adds	r3, #4
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	601a      	str	r2, [r3, #0]
 800d1f4:	3304      	adds	r3, #4
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	601a      	str	r2, [r3, #0]
 800d1fa:	3304      	adds	r3, #4
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	801a      	strh	r2, [r3, #0]
 800d200:	3302      	adds	r3, #2
	short ls_result = 0;
 800d202:	2300      	movs	r3, #0
 800d204:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint64_t lu64_totalTime = 0;
 800d208:	f04f 0200 	mov.w	r2, #0
 800d20c:	f04f 0300 	mov.w	r3, #0
 800d210:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 
	switch (sen_publishDataState)
 800d214:	4bba      	ldr	r3, [pc, #744]	; (800d500 <mod_mqttPublishData+0x368>)
 800d216:	781b      	ldrb	r3, [r3, #0]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d003      	beq.n	800d224 <mod_mqttPublishData+0x8c>
 800d21c:	2b01      	cmp	r3, #1
 800d21e:	f000 80c3 	beq.w	800d3a8 <mod_mqttPublishData+0x210>
 800d222:	e1b7      	b.n	800d594 <mod_mqttPublishData+0x3fc>
	{
		case E_PUBLISH_CMD_STATE:
 
			sprintf((char *) lu8arr_param, (const char*) "%d,1,%d,0,%s,%d\r\n",
 800d224:	4bb7      	ldr	r3, [pc, #732]	; (800d504 <mod_mqttPublishData+0x36c>)
 800d226:	781b      	ldrb	r3, [r3, #0]
 800d228:	461c      	mov	r4, r3
 800d22a:	897b      	ldrh	r3, [r7, #10]
 800d22c:	f107 0114 	add.w	r1, r7, #20
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	9200      	str	r2, [sp, #0]
 800d234:	9301      	str	r3, [sp, #4]
 800d236:	4608      	mov	r0, r1
 800d238:	49b3      	ldr	r1, [pc, #716]	; (800d508 <mod_mqttPublishData+0x370>)
 800d23a:	4622      	mov	r2, r4
 800d23c:	2300      	movs	r3, #0
 800d23e:	f004 fcd3 	bl	8011be8 <siprintf>
					sgu8_mqttClientId, MQTT_PUBLISH_QOS, lu8p_topic, lu16_len);
 
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH,
 800d242:	f107 0314 	add.w	r3, r7, #20
 800d246:	2015      	movs	r0, #21
 800d248:	4619      	mov	r1, r3
 800d24a:	f7fe fcb1 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d24e:	4603      	mov	r3, r0
 800d250:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					(uint8_t *) lu8arr_param);
			if (E_RET_SUCCESS == len_retStatus)
 800d254:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d130      	bne.n	800d2be <mod_mqttPublishData+0x126>
			{
				lu8p_Ptr =
 800d25c:	48ab      	ldr	r0, [pc, #684]	; (800d50c <mod_mqttPublishData+0x374>)
 800d25e:	49ac      	ldr	r1, [pc, #688]	; (800d510 <mod_mqttPublishData+0x378>)
 800d260:	f004 fd25 	bl	8011cae <strstr>
 800d264:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH].mu8arr_respString);
				if (NULL != lu8p_Ptr)
 800d266:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d01f      	beq.n	800d2ac <mod_mqttPublishData+0x114>
				{
					lsu8_retryCnt = 0;
 800d26c:	4ba9      	ldr	r3, [pc, #676]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d26e:	2200      	movs	r2, #0
 800d270:	701a      	strb	r2, [r3, #0]
 
					memset(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString, 0,
 800d272:	48a9      	ldr	r0, [pc, #676]	; (800d518 <mod_mqttPublishData+0x380>)
 800d274:	2100      	movs	r1, #0
 800d276:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d27a:	f004 f9f6 	bl	801166a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString));
 
					strncpy(
 800d27e:	897b      	ldrh	r3, [r7, #10]
 800d280:	48a5      	ldr	r0, [pc, #660]	; (800d518 <mod_mqttPublishData+0x380>)
 800d282:	68f9      	ldr	r1, [r7, #12]
 800d284:	461a      	mov	r2, r3
 800d286:	f004 fd00 	bl	8011c8a <strncpy>
							(char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString,
							(char *) lu8p_data, lu16_len);
 
					gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString[lu16_len++] =
 800d28a:	897b      	ldrh	r3, [r7, #10]
 800d28c:	1c5a      	adds	r2, r3, #1
 800d28e:	817a      	strh	r2, [r7, #10]
 800d290:	461a      	mov	r2, r3
 800d292:	4ba2      	ldr	r3, [pc, #648]	; (800d51c <mod_mqttPublishData+0x384>)
 800d294:	4413      	add	r3, r2
 800d296:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800d29a:	3318      	adds	r3, #24
 800d29c:	2200      	movs	r2, #0
 800d29e:	701a      	strb	r2, [r3, #0]
							'\0';
 
					sen_publishDataState = E_PUBLISH_DATA_STATE;
 800d2a0:	4b97      	ldr	r3, [pc, #604]	; (800d500 <mod_mqttPublishData+0x368>)
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d2a6:	2304      	movs	r3, #4
 800d2a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d2ac:	4b9c      	ldr	r3, [pc, #624]	; (800d520 <mod_mqttPublishData+0x388>)
 800d2ae:	2200      	movs	r2, #0
 800d2b0:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d2b2:	4896      	ldr	r0, [pc, #600]	; (800d50c <mod_mqttPublishData+0x374>)
 800d2b4:	2100      	movs	r1, #0
 800d2b6:	2240      	movs	r2, #64	; 0x40
 800d2b8:	f004 f9d7 	bl	801166a <memset>
 800d2bc:	e073      	b.n	800d3a6 <mod_mqttPublishData+0x20e>
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d2be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2c2:	2b0b      	cmp	r3, #11
 800d2c4:	d107      	bne.n	800d2d6 <mod_mqttPublishData+0x13e>
			{
				if(sgu16_cmeError == 58)
 800d2c6:	4b97      	ldr	r3, [pc, #604]	; (800d524 <mod_mqttPublishData+0x38c>)
 800d2c8:	881b      	ldrh	r3, [r3, #0]
 800d2ca:	2b3a      	cmp	r3, #58	; 0x3a
 800d2cc:	d16b      	bne.n	800d3a6 <mod_mqttPublishData+0x20e>
				{
					len_retStatus = E_RET_CME_ERROR;
 800d2ce:	230b      	movs	r3, #11
 800d2d0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				{
					lsu8_retryCnt = 0;
					len_retStatus = E_RET_TIMEOUT_ERROR;
				}
			}
		break;
 800d2d4:	e162      	b.n	800d59c <mod_mqttPublishData+0x404>
				if(sgu16_cmeError == 58)
				{
					len_retStatus = E_RET_CME_ERROR;
				}
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d2d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d2da:	2b03      	cmp	r3, #3
 800d2dc:	d146      	bne.n	800d36c <mod_mqttPublishData+0x1d4>
			{
				lsu8_retryCnt = 0;
 800d2de:	4b8d      	ldr	r3, [pc, #564]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d2e0:	2200      	movs	r2, #0
 800d2e2:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d2e4:	4889      	ldr	r0, [pc, #548]	; (800d50c <mod_mqttPublishData+0x374>)
 800d2e6:	4990      	ldr	r1, [pc, #576]	; (800d528 <mod_mqttPublishData+0x390>)
 800d2e8:	f004 fce1 	bl	8011cae <strstr>
 800d2ec:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d2ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d02f      	beq.n	800d354 <mod_mqttPublishData+0x1bc>
				{
					if (lu8p_Ptr != NULL)
 800d2f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d028      	beq.n	800d34c <mod_mqttPublishData+0x1b4>
					{
						lu8p_Ptr += 10;
 800d2fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2fc:	330a      	adds	r3, #10
 800d2fe:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d300:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d302:	f004 f977 	bl	80115f4 <atoi>
 800d306:	4603      	mov	r3, r0
 800d308:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d30c:	4b7d      	ldr	r3, [pc, #500]	; (800d504 <mod_mqttPublishData+0x36c>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	461a      	mov	r2, r3
 800d312:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d316:	429a      	cmp	r2, r3
 800d318:	d114      	bne.n	800d344 <mod_mqttPublishData+0x1ac>
						{
							lu8p_Ptr += 2;
 800d31a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d31c:	3302      	adds	r3, #2
 800d31e:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d320:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d322:	f004 f967 	bl	80115f4 <atoi>
 800d326:	4603      	mov	r3, r0
 800d328:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d32c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d330:	2b01      	cmp	r3, #1
 800d332:	d103      	bne.n	800d33c <mod_mqttPublishData+0x1a4>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d334:	230a      	movs	r3, #10
 800d336:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d33a:	e00e      	b.n	800d35a <mod_mqttPublishData+0x1c2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d33c:	2302      	movs	r3, #2
 800d33e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d342:	e00a      	b.n	800d35a <mod_mqttPublishData+0x1c2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d344:	2302      	movs	r3, #2
 800d346:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d34a:	e006      	b.n	800d35a <mod_mqttPublishData+0x1c2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d34c:	2302      	movs	r3, #2
 800d34e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d352:	e002      	b.n	800d35a <mod_mqttPublishData+0x1c2>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d354:	2302      	movs	r3, #2
 800d356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d35a:	4b71      	ldr	r3, [pc, #452]	; (800d520 <mod_mqttPublishData+0x388>)
 800d35c:	2200      	movs	r2, #0
 800d35e:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d360:	486a      	ldr	r0, [pc, #424]	; (800d50c <mod_mqttPublishData+0x374>)
 800d362:	2100      	movs	r1, #0
 800d364:	2240      	movs	r2, #64	; 0x40
 800d366:	f004 f980 	bl	801166a <memset>
 800d36a:	e01c      	b.n	800d3a6 <mod_mqttPublishData+0x20e>
 
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d36c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d370:	2b04      	cmp	r3, #4
 800d372:	d018      	beq.n	800d3a6 <mod_mqttPublishData+0x20e>
			{
				lsu8_retryCnt++;
 800d374:	4b67      	ldr	r3, [pc, #412]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	3301      	adds	r3, #1
 800d37a:	b2da      	uxtb	r2, r3
 800d37c:	4b65      	ldr	r3, [pc, #404]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d37e:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d380:	4b64      	ldr	r3, [pc, #400]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d382:	781b      	ldrb	r3, [r3, #0]
 800d384:	2b02      	cmp	r3, #2
 800d386:	d803      	bhi.n	800d390 <mod_mqttPublishData+0x1f8>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d388:	2304      	movs	r3, #4
 800d38a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d38e:	e00a      	b.n	800d3a6 <mod_mqttPublishData+0x20e>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d390:	4b60      	ldr	r3, [pc, #384]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	2b03      	cmp	r3, #3
 800d396:	d906      	bls.n	800d3a6 <mod_mqttPublishData+0x20e>
				{
					lsu8_retryCnt = 0;
 800d398:	4b5e      	ldr	r3, [pc, #376]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d39a:	2200      	movs	r2, #0
 800d39c:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d39e:	2306      	movs	r3, #6
 800d3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		break;
 800d3a4:	e0fa      	b.n	800d59c <mod_mqttPublishData+0x404>
 800d3a6:	e0f9      	b.n	800d59c <mod_mqttPublishData+0x404>
 
		case E_PUBLISH_DATA_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH_DATA, NULL);
 800d3a8:	2016      	movs	r0, #22
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	f7fe fc00 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (E_RET_SUCCESS == len_retStatus)
 800d3b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d160      	bne.n	800d480 <mod_mqttPublishData+0x2e8>
			{
				lu8p_Ptr =
 800d3be:	4853      	ldr	r0, [pc, #332]	; (800d50c <mod_mqttPublishData+0x374>)
 800d3c0:	495a      	ldr	r1, [pc, #360]	; (800d52c <mod_mqttPublishData+0x394>)
 800d3c2:	f004 fc74 	bl	8011cae <strstr>
 800d3c6:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_otherRspString);
				if (NULL != lu8p_Ptr)
 800d3c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d04f      	beq.n	800d46e <mod_mqttPublishData+0x2d6>
				{
					lu8p_Ptr += 11;
 800d3ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3d0:	330b      	adds	r3, #11
 800d3d2:	65bb      	str	r3, [r7, #88]	; 0x58
					ls_result = atoi((const char *) lu8p_Ptr);
 800d3d4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3d6:	f004 f90d 	bl	80115f4 <atoi>
 800d3da:	4603      	mov	r3, r0
 800d3dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					if (sgu8_mqttClientId == ls_result)
 800d3e0:	4b48      	ldr	r3, [pc, #288]	; (800d504 <mod_mqttPublishData+0x36c>)
 800d3e2:	781b      	ldrb	r3, [r3, #0]
 800d3e4:	461a      	mov	r2, r3
 800d3e6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d3ea:	429a      	cmp	r2, r3
 800d3ec:	d13f      	bne.n	800d46e <mod_mqttPublishData+0x2d6>
					{
						lu8p_Ptr += 2;
 800d3ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3f0:	3302      	adds	r3, #2
 800d3f2:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((const char *) lu8p_Ptr);
 800d3f4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3f6:	f004 f8fd 	bl	80115f4 <atoi>
 800d3fa:	4603      	mov	r3, r0
 800d3fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (1 == ls_result)	//msg id
 800d400:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d404:	2b01      	cmp	r3, #1
 800d406:	d132      	bne.n	800d46e <mod_mqttPublishData+0x2d6>
						{
							lu8p_Ptr += 2;
 800d408:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d40a:	3302      	adds	r3, #2
 800d40c:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((const char *) lu8p_Ptr);
 800d40e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d410:	f004 f8f0 	bl	80115f4 <atoi>
 800d414:	4603      	mov	r3, r0
 800d416:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (E_PUB_SUCCESS == ls_result)	//Packet sent successfully and ACK received
 800d41a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d109      	bne.n	800d436 <mod_mqttPublishData+0x29e>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_SUCCESS;
 800d422:	4b43      	ldr	r3, [pc, #268]	; (800d530 <mod_mqttPublishData+0x398>)
 800d424:	2200      	movs	r2, #0
 800d426:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_SUCCESS;
 800d428:	2300      	movs	r3, #0
 800d42a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
								sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d42e:	4b34      	ldr	r3, [pc, #208]	; (800d500 <mod_mqttPublishData+0x368>)
 800d430:	2200      	movs	r2, #0
 800d432:	701a      	strb	r2, [r3, #0]
 800d434:	e01b      	b.n	800d46e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_PACK_RETRAN == ls_result)	//Packet retransmission
 800d436:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d106      	bne.n	800d44c <mod_mqttPublishData+0x2b4>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_PACK_RETRAN;
 800d43e:	4b3c      	ldr	r3, [pc, #240]	; (800d530 <mod_mqttPublishData+0x398>)
 800d440:	2201      	movs	r2, #1
 800d442:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_INPROGRESS;
 800d444:	2304      	movs	r3, #4
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d44a:	e010      	b.n	800d46e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_FAILED_SEND_PACK == ls_result)	//Failed to send packet
 800d44c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d450:	2b02      	cmp	r3, #2
 800d452:	d106      	bne.n	800d462 <mod_mqttPublishData+0x2ca>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_FAILED_SEND_PACK;
 800d454:	4b36      	ldr	r3, [pc, #216]	; (800d530 <mod_mqttPublishData+0x398>)
 800d456:	2202      	movs	r2, #2
 800d458:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d45a:	2302      	movs	r3, #2
 800d45c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d460:	e005      	b.n	800d46e <mod_mqttPublishData+0x2d6>
							}
							else
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_UNKNOWN_ERROR;
 800d462:	4b33      	ldr	r3, [pc, #204]	; (800d530 <mod_mqttPublishData+0x398>)
 800d464:	2203      	movs	r2, #3
 800d466:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d468:	2302      	movs	r3, #2
 800d46a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							}
						}
					}
				}
 
				sgu8_respCount = 0;
 800d46e:	4b2c      	ldr	r3, [pc, #176]	; (800d520 <mod_mqttPublishData+0x388>)
 800d470:	2200      	movs	r2, #0
 800d472:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d474:	4825      	ldr	r0, [pc, #148]	; (800d50c <mod_mqttPublishData+0x374>)
 800d476:	2100      	movs	r1, #0
 800d478:	2240      	movs	r2, #64	; 0x40
 800d47a:	f004 f8f6 	bl	801166a <memset>
 800d47e:	e088      	b.n	800d592 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d480:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d484:	2b03      	cmp	r3, #3
 800d486:	d164      	bne.n	800d552 <mod_mqttPublishData+0x3ba>
			{
				lsu8_retryCnt = 0;
 800d488:	4b22      	ldr	r3, [pc, #136]	; (800d514 <mod_mqttPublishData+0x37c>)
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d48e:	481f      	ldr	r0, [pc, #124]	; (800d50c <mod_mqttPublishData+0x374>)
 800d490:	4925      	ldr	r1, [pc, #148]	; (800d528 <mod_mqttPublishData+0x390>)
 800d492:	f004 fc0c 	bl	8011cae <strstr>
 800d496:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d498:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d04a      	beq.n	800d534 <mod_mqttPublishData+0x39c>
				{
					if (lu8p_Ptr != NULL)
 800d49e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d028      	beq.n	800d4f6 <mod_mqttPublishData+0x35e>
					{
						lu8p_Ptr += 10;
 800d4a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4a6:	330a      	adds	r3, #10
 800d4a8:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d4aa:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4ac:	f004 f8a2 	bl	80115f4 <atoi>
 800d4b0:	4603      	mov	r3, r0
 800d4b2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d4b6:	4b13      	ldr	r3, [pc, #76]	; (800d504 <mod_mqttPublishData+0x36c>)
 800d4b8:	781b      	ldrb	r3, [r3, #0]
 800d4ba:	461a      	mov	r2, r3
 800d4bc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d114      	bne.n	800d4ee <mod_mqttPublishData+0x356>
						{
							lu8p_Ptr += 2;
 800d4c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4c6:	3302      	adds	r3, #2
 800d4c8:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d4ca:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4cc:	f004 f892 	bl	80115f4 <atoi>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d4d6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d4da:	2b01      	cmp	r3, #1
 800d4dc:	d103      	bne.n	800d4e6 <mod_mqttPublishData+0x34e>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d4de:	230a      	movs	r3, #10
 800d4e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4e4:	e029      	b.n	800d53a <mod_mqttPublishData+0x3a2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d4e6:	2302      	movs	r3, #2
 800d4e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4ec:	e025      	b.n	800d53a <mod_mqttPublishData+0x3a2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4f4:	e021      	b.n	800d53a <mod_mqttPublishData+0x3a2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d4f6:	2302      	movs	r3, #2
 800d4f8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d4fc:	e01d      	b.n	800d53a <mod_mqttPublishData+0x3a2>
 800d4fe:	bf00      	nop
 800d500:	1fff476c 	.word	0x1fff476c
 800d504:	1fff4765 	.word	0x1fff4765
 800d508:	08013e0c 	.word	0x08013e0c
 800d50c:	1fff46c4 	.word	0x1fff46c4
 800d510:	1fff0a64 	.word	0x1fff0a64
 800d514:	1fff4784 	.word	0x1fff4784
 800d518:	1fff0b00 	.word	0x1fff0b00
 800d51c:	1ffea4e8 	.word	0x1ffea4e8
 800d520:	1fff4764 	.word	0x1fff4764
 800d524:	1fff4766 	.word	0x1fff4766
 800d528:	08013cec 	.word	0x08013cec
 800d52c:	1fff0f3a 	.word	0x1fff0f3a
 800d530:	1ffea4dc 	.word	0x1ffea4dc
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d534:	2302      	movs	r3, #2
 800d536:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d53a:	4b1b      	ldr	r3, [pc, #108]	; (800d5a8 <mod_mqttPublishData+0x410>)
 800d53c:	2200      	movs	r2, #0
 800d53e:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d540:	481a      	ldr	r0, [pc, #104]	; (800d5ac <mod_mqttPublishData+0x414>)
 800d542:	2100      	movs	r1, #0
 800d544:	2240      	movs	r2, #64	; 0x40
 800d546:	f004 f890 	bl	801166a <memset>
 
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d54a:	4b19      	ldr	r3, [pc, #100]	; (800d5b0 <mod_mqttPublishData+0x418>)
 800d54c:	2200      	movs	r2, #0
 800d54e:	701a      	strb	r2, [r3, #0]
 800d550:	e01f      	b.n	800d592 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d552:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d556:	2b04      	cmp	r3, #4
 800d558:	d01b      	beq.n	800d592 <mod_mqttPublishData+0x3fa>
			{
				lsu8_retryCnt++;
 800d55a:	4b16      	ldr	r3, [pc, #88]	; (800d5b4 <mod_mqttPublishData+0x41c>)
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	3301      	adds	r3, #1
 800d560:	b2da      	uxtb	r2, r3
 800d562:	4b14      	ldr	r3, [pc, #80]	; (800d5b4 <mod_mqttPublishData+0x41c>)
 800d564:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d566:	4b13      	ldr	r3, [pc, #76]	; (800d5b4 <mod_mqttPublishData+0x41c>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b02      	cmp	r3, #2
 800d56c:	d803      	bhi.n	800d576 <mod_mqttPublishData+0x3de>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d56e:	2304      	movs	r3, #4
 800d570:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d574:	e009      	b.n	800d58a <mod_mqttPublishData+0x3f2>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d576:	4b0f      	ldr	r3, [pc, #60]	; (800d5b4 <mod_mqttPublishData+0x41c>)
 800d578:	781b      	ldrb	r3, [r3, #0]
 800d57a:	2b03      	cmp	r3, #3
 800d57c:	d905      	bls.n	800d58a <mod_mqttPublishData+0x3f2>
				{
					lsu8_retryCnt = 0;
 800d57e:	4b0d      	ldr	r3, [pc, #52]	; (800d5b4 <mod_mqttPublishData+0x41c>)
 800d580:	2200      	movs	r2, #0
 800d582:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d584:	2306      	movs	r3, #6
 800d586:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d58a:	4b09      	ldr	r3, [pc, #36]	; (800d5b0 <mod_mqttPublishData+0x418>)
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800d590:	e004      	b.n	800d59c <mod_mqttPublishData+0x404>
 800d592:	e003      	b.n	800d59c <mod_mqttPublishData+0x404>
 
		default:
			len_retStatus = E_RET_SUCCESS;
 800d594:	2300      	movs	r3, #0
 800d596:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 800d59a:	bf00      	nop
	}
 
	return len_retStatus;
 800d59c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3764      	adds	r7, #100	; 0x64
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd90      	pop	{r4, r7, pc}
 800d5a8:	1fff4764 	.word	0x1fff4764
 800d5ac:	1fff46c4 	.word	0x1fff46c4
 800d5b0:	1fff476c 	.word	0x1fff476c
 800d5b4:	1fff4784 	.word	0x1fff4784

0800d5b8 <mod_getCurrentTime>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t mod_getCurrentTime(uint8_t *lu8p_data)
{
 800d5b8:	b4b0      	push	{r4, r5, r7}
 800d5ba:	b085      	sub	sp, #20
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	uint8_t lu8_ret = 0;
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	73fb      	strb	r3, [r7, #15]

	if (NULL != lu8p_data)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d00c      	beq.n	800d5e4 <mod_getCurrentTime+0x2c>
	{
		memcpy(lu8p_data, gu8_dataTime, TIME_SIZE);
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	4a08      	ldr	r2, [pc, #32]	; (800d5f0 <mod_getCurrentTime+0x38>)
 800d5ce:	461d      	mov	r5, r3
 800d5d0:	4614      	mov	r4, r2
 800d5d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5d4:	6028      	str	r0, [r5, #0]
 800d5d6:	6069      	str	r1, [r5, #4]
 800d5d8:	60aa      	str	r2, [r5, #8]
 800d5da:	60eb      	str	r3, [r5, #12]
 800d5dc:	6820      	ldr	r0, [r4, #0]
 800d5de:	6128      	str	r0, [r5, #16]
		lu8_ret = TIME_SIZE;
 800d5e0:	2314      	movs	r3, #20
 800d5e2:	73fb      	strb	r3, [r7, #15]
	}

	return lu8_ret;
 800d5e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e6:	4618      	mov	r0, r3
 800d5e8:	3714      	adds	r7, #20
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	bcb0      	pop	{r4, r5, r7}
 800d5ee:	4770      	bx	lr
 800d5f0:	1fff4750 	.word	0x1fff4750

0800d5f4 <mod_mqttSslMode>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslMode(uint8_t *lu8p_param)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b084      	sub	sp, #16
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d5fc:	2304      	movs	r3, #4
 800d5fe:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CFG, lu8p_param);
 800d600:	2011      	movs	r0, #17
 800d602:	6879      	ldr	r1, [r7, #4]
 800d604:	f7fe fad4 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d608:	4603      	mov	r3, r0
 800d60a:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800d60c:	7bfb      	ldrb	r3, [r7, #15]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d105      	bne.n	800d61e <mod_mqttSslMode+0x2a>
	{
		lsu8_retryCnt = 0;
 800d612:	4b11      	ldr	r3, [pc, #68]	; (800d658 <mod_mqttSslMode+0x64>)
 800d614:	2200      	movs	r2, #0
 800d616:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d618:	2300      	movs	r3, #0
 800d61a:	73fb      	strb	r3, [r7, #15]
 800d61c:	e016      	b.n	800d64c <mod_mqttSslMode+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
 800d620:	2b04      	cmp	r3, #4
 800d622:	d013      	beq.n	800d64c <mod_mqttSslMode+0x58>
	{
		lsu8_retryCnt++;
 800d624:	4b0c      	ldr	r3, [pc, #48]	; (800d658 <mod_mqttSslMode+0x64>)
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	3301      	adds	r3, #1
 800d62a:	b2da      	uxtb	r2, r3
 800d62c:	4b0a      	ldr	r3, [pc, #40]	; (800d658 <mod_mqttSslMode+0x64>)
 800d62e:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d630:	4b09      	ldr	r3, [pc, #36]	; (800d658 <mod_mqttSslMode+0x64>)
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2b02      	cmp	r3, #2
 800d636:	d802      	bhi.n	800d63e <mod_mqttSslMode+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d638:	2304      	movs	r3, #4
 800d63a:	73fb      	strb	r3, [r7, #15]
 800d63c:	e006      	b.n	800d64c <mod_mqttSslMode+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d63e:	4b06      	ldr	r3, [pc, #24]	; (800d658 <mod_mqttSslMode+0x64>)
 800d640:	781b      	ldrb	r3, [r3, #0]
 800d642:	2b03      	cmp	r3, #3
 800d644:	d902      	bls.n	800d64c <mod_mqttSslMode+0x58>
		{
			lsu8_retryCnt = 0;
 800d646:	4b04      	ldr	r3, [pc, #16]	; (800d658 <mod_mqttSslMode+0x64>)
 800d648:	2200      	movs	r2, #0
 800d64a:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d64c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d64e:	4618      	mov	r0, r3
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	1fff4785 	.word	0x1fff4785

0800d65c <mod_mqttSslConfgi>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslConfgi(uint8_t *lu8p_param)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b084      	sub	sp, #16
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d664:	2304      	movs	r3, #4
 800d666:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SSL_CFG, lu8p_param);
 800d668:	2012      	movs	r0, #18
 800d66a:	6879      	ldr	r1, [r7, #4]
 800d66c:	f7fe faa0 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d670:	4603      	mov	r3, r0
 800d672:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d105      	bne.n	800d686 <mod_mqttSslConfgi+0x2a>
	{
		lsu8_retryCnt = 0;
 800d67a:	4b11      	ldr	r3, [pc, #68]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d67c:	2200      	movs	r2, #0
 800d67e:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d680:	2300      	movs	r3, #0
 800d682:	73fb      	strb	r3, [r7, #15]
 800d684:	e016      	b.n	800d6b4 <mod_mqttSslConfgi+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d686:	7bfb      	ldrb	r3, [r7, #15]
 800d688:	2b04      	cmp	r3, #4
 800d68a:	d013      	beq.n	800d6b4 <mod_mqttSslConfgi+0x58>
	{
		lsu8_retryCnt++;
 800d68c:	4b0c      	ldr	r3, [pc, #48]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d68e:	781b      	ldrb	r3, [r3, #0]
 800d690:	3301      	adds	r3, #1
 800d692:	b2da      	uxtb	r2, r3
 800d694:	4b0a      	ldr	r3, [pc, #40]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d696:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d698:	4b09      	ldr	r3, [pc, #36]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b02      	cmp	r3, #2
 800d69e:	d802      	bhi.n	800d6a6 <mod_mqttSslConfgi+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d6a0:	2304      	movs	r3, #4
 800d6a2:	73fb      	strb	r3, [r7, #15]
 800d6a4:	e006      	b.n	800d6b4 <mod_mqttSslConfgi+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d6a6:	4b06      	ldr	r3, [pc, #24]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d6a8:	781b      	ldrb	r3, [r3, #0]
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d902      	bls.n	800d6b4 <mod_mqttSslConfgi+0x58>
		{
			lsu8_retryCnt = 0;
 800d6ae:	4b04      	ldr	r3, [pc, #16]	; (800d6c0 <mod_mqttSslConfgi+0x64>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d6b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	1fff4786 	.word	0x1fff4786

0800d6c4 <mod_mqttSslCertUpload>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertUpload(en_sslFile_t len_sslFile)
{
 800d6c4:	b590      	push	{r4, r7, lr}
 800d6c6:	b093      	sub	sp, #76	; 0x4c
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	4603      	mov	r3, r0
 800d6cc:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d6ce:	2304      	movs	r3, #4
 800d6d0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[50] = { 0 };
 800d6d4:	f107 0308 	add.w	r3, r7, #8
 800d6d8:	2200      	movs	r2, #0
 800d6da:	601a      	str	r2, [r3, #0]
 800d6dc:	3304      	adds	r3, #4
 800d6de:	2200      	movs	r2, #0
 800d6e0:	601a      	str	r2, [r3, #0]
 800d6e2:	3304      	adds	r3, #4
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	601a      	str	r2, [r3, #0]
 800d6e8:	3304      	adds	r3, #4
 800d6ea:	2200      	movs	r2, #0
 800d6ec:	601a      	str	r2, [r3, #0]
 800d6ee:	3304      	adds	r3, #4
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	601a      	str	r2, [r3, #0]
 800d6f4:	3304      	adds	r3, #4
 800d6f6:	2200      	movs	r2, #0
 800d6f8:	601a      	str	r2, [r3, #0]
 800d6fa:	3304      	adds	r3, #4
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	3304      	adds	r3, #4
 800d702:	2200      	movs	r2, #0
 800d704:	601a      	str	r2, [r3, #0]
 800d706:	3304      	adds	r3, #4
 800d708:	2200      	movs	r2, #0
 800d70a:	601a      	str	r2, [r3, #0]
 800d70c:	3304      	adds	r3, #4
 800d70e:	2200      	movs	r2, #0
 800d710:	601a      	str	r2, [r3, #0]
 800d712:	3304      	adds	r3, #4
 800d714:	2200      	movs	r2, #0
 800d716:	601a      	str	r2, [r3, #0]
 800d718:	3304      	adds	r3, #4
 800d71a:	2200      	movs	r2, #0
 800d71c:	601a      	str	r2, [r3, #0]
 800d71e:	3304      	adds	r3, #4
 800d720:	2200      	movs	r2, #0
 800d722:	801a      	strh	r2, [r3, #0]
 800d724:	3302      	adds	r3, #2
	static uint8_t *slu32_pos = NULL;
	static uint16_t lu16_totalFileSize = 0;
	uint8_t *lu8p_Ptr = NULL;
 800d726:	2300      	movs	r3, #0
 800d728:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *lu8p_saveptr = NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (sen_sslFileUpldState)
 800d72e:	4b77      	ldr	r3, [pc, #476]	; (800d90c <mod_mqttSslCertUpload+0x248>)
 800d730:	781b      	ldrb	r3, [r3, #0]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d003      	beq.n	800d73e <mod_mqttSslCertUpload+0x7a>
 800d736:	2b01      	cmp	r3, #1
 800d738:	f000 808d 	beq.w	800d856 <mod_mqttSslCertUpload+0x192>
				}
			}
		break;

		default:
		break;
 800d73c:	e0e0      	b.n	800d900 <mod_mqttSslCertUpload+0x23c>

	switch (sen_sslFileUpldState)
	{
		case E_SSL_UPLD_CMD_STATE:

			if(E_CA_CERT_FILE == len_sslFile)
 800d73e:	79fb      	ldrb	r3, [r7, #7]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d112      	bne.n	800d76a <mod_mqttSslCertUpload+0xa6>
			{
				slu32_pos = sgu8arr_caCert;
 800d744:	4b72      	ldr	r3, [pc, #456]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d746:	4a73      	ldr	r2, [pc, #460]	; (800d914 <mod_mqttSslCertUpload+0x250>)
 800d748:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_caCert);
 800d74a:	4b73      	ldr	r3, [pc, #460]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d74c:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800d750:	801a      	strh	r2, [r3, #0]
				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
 800d752:	4b71      	ldr	r3, [pc, #452]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d754:	881b      	ldrh	r3, [r3, #0]
 800d756:	461c      	mov	r4, r3
 800d758:	f107 0308 	add.w	r3, r7, #8
 800d75c:	4618      	mov	r0, r3
 800d75e:	496f      	ldr	r1, [pc, #444]	; (800d91c <mod_mqttSslCertUpload+0x258>)
 800d760:	4a6f      	ldr	r2, [pc, #444]	; (800d920 <mod_mqttSslCertUpload+0x25c>)
 800d762:	4623      	mov	r3, r4
 800d764:	f004 fa40 	bl	8011be8 <siprintf>
 800d768:	e02a      	b.n	800d7c0 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CC_CERT_FILE == len_sslFile)
 800d76a:	79fb      	ldrb	r3, [r7, #7]
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d112      	bne.n	800d796 <mod_mqttSslCertUpload+0xd2>
			{
				slu32_pos = sgu8arr_ccCert;
 800d770:	4b67      	ldr	r3, [pc, #412]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d772:	4a6c      	ldr	r2, [pc, #432]	; (800d924 <mod_mqttSslCertUpload+0x260>)
 800d774:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
 800d776:	4b68      	ldr	r3, [pc, #416]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d778:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800d77c:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CC_FILENAME,
 800d77e:	4b66      	ldr	r3, [pc, #408]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d780:	881b      	ldrh	r3, [r3, #0]
 800d782:	461c      	mov	r4, r3
 800d784:	f107 0308 	add.w	r3, r7, #8
 800d788:	4618      	mov	r0, r3
 800d78a:	4964      	ldr	r1, [pc, #400]	; (800d91c <mod_mqttSslCertUpload+0x258>)
 800d78c:	4a66      	ldr	r2, [pc, #408]	; (800d928 <mod_mqttSslCertUpload+0x264>)
 800d78e:	4623      	mov	r3, r4
 800d790:	f004 fa2a 	bl	8011be8 <siprintf>
 800d794:	e014      	b.n	800d7c0 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CK_CERT_FILE == len_sslFile)
 800d796:	79fb      	ldrb	r3, [r7, #7]
 800d798:	2b02      	cmp	r3, #2
 800d79a:	d111      	bne.n	800d7c0 <mod_mqttSslCertUpload+0xfc>
			{
				slu32_pos = sgu8arr_ckCert;
 800d79c:	4b5c      	ldr	r3, [pc, #368]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d79e:	4a63      	ldr	r2, [pc, #396]	; (800d92c <mod_mqttSslCertUpload+0x268>)
 800d7a0:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
 800d7a2:	4b5d      	ldr	r3, [pc, #372]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d7a4:	f240 628b 	movw	r2, #1675	; 0x68b
 800d7a8:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CK_FILENAME,
 800d7aa:	4b5b      	ldr	r3, [pc, #364]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d7ac:	881b      	ldrh	r3, [r3, #0]
 800d7ae:	461c      	mov	r4, r3
 800d7b0:	f107 0308 	add.w	r3, r7, #8
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	4959      	ldr	r1, [pc, #356]	; (800d91c <mod_mqttSslCertUpload+0x258>)
 800d7b8:	4a5d      	ldr	r2, [pc, #372]	; (800d930 <mod_mqttSslCertUpload+0x26c>)
 800d7ba:	4623      	mov	r3, r4
 800d7bc:	f004 fa14 	bl	8011be8 <siprintf>
						lu16_totalFileSize);
			}

			len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_UPLOAD_CMD,
 800d7c0:	f107 0308 	add.w	r3, r7, #8
 800d7c4:	201a      	movs	r0, #26
 800d7c6:	4619      	mov	r1, r3
 800d7c8:	f7fe f9f2 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					(uint8_t *) lu8arr_param);

			if (E_RET_SUCCESS == len_retStatus)
 800d7d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d12e      	bne.n	800d838 <mod_mqttSslCertUpload+0x174>
			{
				lu8p_Ptr =
 800d7da:	4856      	ldr	r0, [pc, #344]	; (800d934 <mod_mqttSslCertUpload+0x270>)
 800d7dc:	4956      	ldr	r1, [pc, #344]	; (800d938 <mod_mqttSslCertUpload+0x274>)
 800d7de:	f004 fa66 	bl	8011cae <strstr>
 800d7e2:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_FILE_UPLOAD_CMD].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800d7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d022      	beq.n	800d830 <mod_mqttSslCertUpload+0x16c>
				{
					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800d7ea:	4854      	ldr	r0, [pc, #336]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d7ec:	2100      	movs	r1, #0
 800d7ee:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d7f2:	f003 ff3a 	bl	801166a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if (lu16_totalFileSize > 1024)
 800d7f6:	4b48      	ldr	r3, [pc, #288]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d7f8:	881b      	ldrh	r3, [r3, #0]
 800d7fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d7fe:	d908      	bls.n	800d812 <mod_mqttSslCertUpload+0x14e>
					{
						strncpy(
 800d800:	4b43      	ldr	r3, [pc, #268]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	484d      	ldr	r0, [pc, #308]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d806:	4619      	mov	r1, r3
 800d808:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d80c:	f004 fa3d 	bl	8011c8a <strncpy>
 800d810:	e007      	b.n	800d822 <mod_mqttSslCertUpload+0x15e>
								(char *) slu32_pos, 1024);
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[1024] = '\0';
					}
					else
					{
						strncpy(
 800d812:	4b3f      	ldr	r3, [pc, #252]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	4849      	ldr	r0, [pc, #292]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d818:	4619      	mov	r1, r3
 800d81a:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800d81e:	f004 fa34 	bl	8011c8a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, sizeof(sgu8arr_caCert));
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[sizeof(sgu8arr_caCert)+1] = '\0';
					}

					sen_sslFileUpldState = E_SSL_UPLD_FILE_CONTENT_STATE;
 800d822:	4b3a      	ldr	r3, [pc, #232]	; (800d90c <mod_mqttSslCertUpload+0x248>)
 800d824:	2201      	movs	r2, #1
 800d826:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d828:	2304      	movs	r3, #4
 800d82a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d82e:	e011      	b.n	800d854 <mod_mqttSslCertUpload+0x190>
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d830:	2302      	movs	r3, #2
 800d832:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800d836:	e063      	b.n	800d900 <mod_mqttSslCertUpload+0x23c>
				else
				{
					len_retStatus = E_RET_FAILED;
				}
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d838:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d83c:	2b0b      	cmp	r3, #11
 800d83e:	d109      	bne.n	800d854 <mod_mqttSslCertUpload+0x190>
			{
				if(407 == sgu16_cmeError)	//File already exists
 800d840:	4b3f      	ldr	r3, [pc, #252]	; (800d940 <mod_mqttSslCertUpload+0x27c>)
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	f240 1297 	movw	r2, #407	; 0x197
 800d848:	4293      	cmp	r3, r2
 800d84a:	d103      	bne.n	800d854 <mod_mqttSslCertUpload+0x190>
				{
					len_retStatus = E_RET_SUCCESS;
 800d84c:	2300      	movs	r3, #0
 800d84e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800d852:	e055      	b.n	800d900 <mod_mqttSslCertUpload+0x23c>
 800d854:	e054      	b.n	800d900 <mod_mqttSslCertUpload+0x23c>

		case E_SSL_UPLD_FILE_CONTENT_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_UPLOAD_FILE_CONTENT, NULL);
 800d856:	201b      	movs	r0, #27
 800d858:	2100      	movs	r1, #0
 800d85a:	f7fe f9a9 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d85e:	4603      	mov	r3, r0
 800d860:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (E_RET_SUCCESS == len_retStatus)
 800d864:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d148      	bne.n	800d8fe <mod_mqttSslCertUpload+0x23a>
			{
				lu8p_Ptr =
 800d86c:	4831      	ldr	r0, [pc, #196]	; (800d934 <mod_mqttSslCertUpload+0x270>)
 800d86e:	4935      	ldr	r1, [pc, #212]	; (800d944 <mod_mqttSslCertUpload+0x280>)
 800d870:	f004 fa1d 	bl	8011cae <strstr>
 800d874:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_otherRspString);

				if (NULL != lu8p_Ptr)
 800d876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d031      	beq.n	800d8e0 <mod_mqttSslCertUpload+0x21c>
				{
					lu16_totalFileSize -= 1024;
 800d87c:	4b26      	ldr	r3, [pc, #152]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d884:	b29a      	uxth	r2, r3
 800d886:	4b24      	ldr	r3, [pc, #144]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d888:	801a      	strh	r2, [r3, #0]
					slu32_pos += 1024;
 800d88a:	4b21      	ldr	r3, [pc, #132]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d892:	4a1f      	ldr	r2, [pc, #124]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d894:	6013      	str	r3, [r2, #0]

					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800d896:	4829      	ldr	r0, [pc, #164]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d898:	2100      	movs	r1, #0
 800d89a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d89e:	f003 fee4 	bl	801166a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if(lu16_totalFileSize > 1024)
 800d8a2:	4b1d      	ldr	r3, [pc, #116]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8aa:	d908      	bls.n	800d8be <mod_mqttSslCertUpload+0x1fa>
					{
						strncpy(
 800d8ac:	4b18      	ldr	r3, [pc, #96]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4822      	ldr	r0, [pc, #136]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d8b2:	4619      	mov	r1, r3
 800d8b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d8b8:	f004 f9e7 	bl	8011c8a <strncpy>
 800d8bc:	e008      	b.n	800d8d0 <mod_mqttSslCertUpload+0x20c>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, 1024);
					}
					else
					{
						strncpy(
 800d8be:	4b14      	ldr	r3, [pc, #80]	; (800d910 <mod_mqttSslCertUpload+0x24c>)
 800d8c0:	681a      	ldr	r2, [r3, #0]
 800d8c2:	4b15      	ldr	r3, [pc, #84]	; (800d918 <mod_mqttSslCertUpload+0x254>)
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	481d      	ldr	r0, [pc, #116]	; (800d93c <mod_mqttSslCertUpload+0x278>)
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	f004 f9dd 	bl	8011c8a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, lu16_totalFileSize);
					}
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d8d0:	4818      	ldr	r0, [pc, #96]	; (800d934 <mod_mqttSslCertUpload+0x270>)
 800d8d2:	2100      	movs	r1, #0
 800d8d4:	2240      	movs	r2, #64	; 0x40
 800d8d6:	f003 fec8 	bl	801166a <memset>
					len_retStatus = E_RET_INPROGRESS;
 800d8da:	2304      	movs	r3, #4
 800d8dc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}

				lu8p_Ptr =
 800d8e0:	4814      	ldr	r0, [pc, #80]	; (800d934 <mod_mqttSslCertUpload+0x270>)
 800d8e2:	4919      	ldr	r1, [pc, #100]	; (800d948 <mod_mqttSslCertUpload+0x284>)
 800d8e4:	f004 f9e3 	bl	8011cae <strstr>
 800d8e8:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800d8ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d006      	beq.n	800d8fe <mod_mqttSslCertUpload+0x23a>
				{
					sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
 800d8f0:	4b06      	ldr	r3, [pc, #24]	; (800d90c <mod_mqttSslCertUpload+0x248>)
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_SUCCESS;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		break;
 800d8fc:	e7ff      	b.n	800d8fe <mod_mqttSslCertUpload+0x23a>
 800d8fe:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d900:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d904:	4618      	mov	r0, r3
 800d906:	374c      	adds	r7, #76	; 0x4c
 800d908:	46bd      	mov	sp, r7
 800d90a:	bd90      	pop	{r4, r7, pc}
 800d90c:	1fff476e 	.word	0x1fff476e
 800d910:	1fff4788 	.word	0x1fff4788
 800d914:	1ffe94e4 	.word	0x1ffe94e4
 800d918:	1fff478c 	.word	0x1fff478c
 800d91c:	08013e30 	.word	0x08013e30
 800d920:	08013e40 	.word	0x08013e40
 800d924:	1ffe9988 	.word	0x1ffe9988
 800d928:	08013e50 	.word	0x08013e50
 800d92c:	1ffe9e4c 	.word	0x1ffe9e4c
 800d930:	08013e64 	.word	0x08013e64
 800d934:	1fff46c4 	.word	0x1fff46c4
 800d938:	1fff2198 	.word	0x1fff2198
 800d93c:	1fff2234 	.word	0x1fff2234
 800d940:	1fff4766 	.word	0x1fff4766
 800d944:	1fff266e 	.word	0x1fff266e
 800d948:	1fff263c 	.word	0x1fff263c

0800d94c <mod_mqttSslCertDelete>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertDelete(en_sslFile_t len_sslFile)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b090      	sub	sp, #64	; 0x40
 800d950:	af00      	add	r7, sp, #0
 800d952:	4603      	mov	r3, r0
 800d954:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d956:	2304      	movs	r3, #4
 800d958:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t lu8arr_param[50] = { 0 };
 800d95c:	f107 030c 	add.w	r3, r7, #12
 800d960:	2200      	movs	r2, #0
 800d962:	601a      	str	r2, [r3, #0]
 800d964:	3304      	adds	r3, #4
 800d966:	2200      	movs	r2, #0
 800d968:	601a      	str	r2, [r3, #0]
 800d96a:	3304      	adds	r3, #4
 800d96c:	2200      	movs	r2, #0
 800d96e:	601a      	str	r2, [r3, #0]
 800d970:	3304      	adds	r3, #4
 800d972:	2200      	movs	r2, #0
 800d974:	601a      	str	r2, [r3, #0]
 800d976:	3304      	adds	r3, #4
 800d978:	2200      	movs	r2, #0
 800d97a:	601a      	str	r2, [r3, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	2200      	movs	r2, #0
 800d980:	601a      	str	r2, [r3, #0]
 800d982:	3304      	adds	r3, #4
 800d984:	2200      	movs	r2, #0
 800d986:	601a      	str	r2, [r3, #0]
 800d988:	3304      	adds	r3, #4
 800d98a:	2200      	movs	r2, #0
 800d98c:	601a      	str	r2, [r3, #0]
 800d98e:	3304      	adds	r3, #4
 800d990:	2200      	movs	r2, #0
 800d992:	601a      	str	r2, [r3, #0]
 800d994:	3304      	adds	r3, #4
 800d996:	2200      	movs	r2, #0
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	3304      	adds	r3, #4
 800d99c:	2200      	movs	r2, #0
 800d99e:	601a      	str	r2, [r3, #0]
 800d9a0:	3304      	adds	r3, #4
 800d9a2:	2200      	movs	r2, #0
 800d9a4:	601a      	str	r2, [r3, #0]
 800d9a6:	3304      	adds	r3, #4
 800d9a8:	2200      	movs	r2, #0
 800d9aa:	801a      	strh	r2, [r3, #0]
 800d9ac:	3302      	adds	r3, #2

	if (E_CA_CERT_FILE == len_sslFile)
 800d9ae:	79fb      	ldrb	r3, [r7, #7]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d107      	bne.n	800d9c4 <mod_mqttSslCertDelete+0x78>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CA_FILENAME);
 800d9b4:	f107 030c 	add.w	r3, r7, #12
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	491c      	ldr	r1, [pc, #112]	; (800da2c <mod_mqttSslCertDelete+0xe0>)
 800d9bc:	4a1c      	ldr	r2, [pc, #112]	; (800da30 <mod_mqttSslCertDelete+0xe4>)
 800d9be:	f004 f913 	bl	8011be8 <siprintf>
 800d9c2:	e014      	b.n	800d9ee <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CC_CERT_FILE == len_sslFile)
 800d9c4:	79fb      	ldrb	r3, [r7, #7]
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d107      	bne.n	800d9da <mod_mqttSslCertDelete+0x8e>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CC_FILENAME);
 800d9ca:	f107 030c 	add.w	r3, r7, #12
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	4916      	ldr	r1, [pc, #88]	; (800da2c <mod_mqttSslCertDelete+0xe0>)
 800d9d2:	4a18      	ldr	r2, [pc, #96]	; (800da34 <mod_mqttSslCertDelete+0xe8>)
 800d9d4:	f004 f908 	bl	8011be8 <siprintf>
 800d9d8:	e009      	b.n	800d9ee <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CK_CERT_FILE == len_sslFile)
 800d9da:	79fb      	ldrb	r3, [r7, #7]
 800d9dc:	2b02      	cmp	r3, #2
 800d9de:	d106      	bne.n	800d9ee <mod_mqttSslCertDelete+0xa2>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CK_FILENAME);
 800d9e0:	f107 030c 	add.w	r3, r7, #12
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	4911      	ldr	r1, [pc, #68]	; (800da2c <mod_mqttSslCertDelete+0xe0>)
 800d9e8:	4a13      	ldr	r2, [pc, #76]	; (800da38 <mod_mqttSslCertDelete+0xec>)
 800d9ea:	f004 f8fd 	bl	8011be8 <siprintf>
	}

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_DELETE, (uint8_t *) lu8arr_param);
 800d9ee:	f107 030c 	add.w	r3, r7, #12
 800d9f2:	201c      	movs	r0, #28
 800d9f4:	4619      	mov	r1, r3
 800d9f6:	f7fe f8db 	bl	800bbb0 <mod_sendCmdGetRsp>
 800d9fa:	4603      	mov	r3, r0
 800d9fc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800da00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da04:	2b00      	cmp	r3, #0
 800da06:	d103      	bne.n	800da10 <mod_mqttSslCertDelete+0xc4>
	{
		len_retStatus = E_RET_SUCCESS;
 800da08:	2300      	movs	r3, #0
 800da0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800da0e:	e006      	b.n	800da1e <mod_mqttSslCertDelete+0xd2>
	}
	else if(E_RET_INPROGRESS != len_retStatus)
 800da10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800da14:	2b04      	cmp	r3, #4
 800da16:	d002      	beq.n	800da1e <mod_mqttSslCertDelete+0xd2>
	{
		len_retStatus = E_RET_FAILED;
 800da18:	2302      	movs	r3, #2
 800da1a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	return len_retStatus;
 800da1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800da22:	4618      	mov	r0, r3
 800da24:	3740      	adds	r7, #64	; 0x40
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	08013e74 	.word	0x08013e74
 800da30:	08013e40 	.word	0x08013e40
 800da34:	08013e50 	.word	0x08013e50
 800da38:	08013e64 	.word	0x08013e64

0800da3c <mod_mqttOpen>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpen(void)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b092      	sub	sp, #72	; 0x48
 800da40:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800da42:	2304      	movs	r3, #4
 800da44:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[57] = { 0 };
 800da48:	1d3b      	adds	r3, r7, #4
 800da4a:	2239      	movs	r2, #57	; 0x39
 800da4c:	4618      	mov	r0, r3
 800da4e:	2100      	movs	r1, #0
 800da50:	f003 fe0b 	bl	801166a <memset>
	uint8_t *lu8p_Ptr = NULL;
 800da54:	2300      	movs	r3, #0
 800da56:	643b      	str	r3, [r7, #64]	; 0x40
	short ls_result = E_MQTT_OPN_NONE;
 800da58:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800da5c:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	for(lu8_clientIdx = 0; lu8_clientIdx < 6; lu8_clientIdx++)
//	{
	sprintf((char *) lu8arr_param, "%d,%s", sgu8_mqttClientId, MQTT_OPEN_HOST_PORT);
 800da5e:	4b55      	ldr	r3, [pc, #340]	; (800dbb4 <mod_mqttOpen+0x178>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	1d3b      	adds	r3, r7, #4
 800da66:	4618      	mov	r0, r3
 800da68:	4953      	ldr	r1, [pc, #332]	; (800dbb8 <mod_mqttOpen+0x17c>)
 800da6a:	4b54      	ldr	r3, [pc, #336]	; (800dbbc <mod_mqttOpen+0x180>)
 800da6c:	f004 f8bc 	bl	8011be8 <siprintf>
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_OPEN, lu8arr_param);
 800da70:	1d3b      	adds	r3, r7, #4
 800da72:	2013      	movs	r0, #19
 800da74:	4619      	mov	r1, r3
 800da76:	f7fe f89b 	bl	800bbb0 <mod_sendCmdGetRsp>
 800da7a:	4603      	mov	r3, r0
 800da7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (E_RET_SUCCESS == len_retStatus)
 800da80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800da84:	2b00      	cmp	r3, #0
 800da86:	d176      	bne.n	800db76 <mod_mqttOpen+0x13a>
	{
		lsu8_retryCnt = 0;
 800da88:	4b4d      	ldr	r3, [pc, #308]	; (800dbc0 <mod_mqttOpen+0x184>)
 800da8a:	2200      	movs	r2, #0
 800da8c:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800da8e:	484d      	ldr	r0, [pc, #308]	; (800dbc4 <mod_mqttOpen+0x188>)
 800da90:	494d      	ldr	r1, [pc, #308]	; (800dbc8 <mod_mqttOpen+0x18c>)
 800da92:	f004 f90c 	bl	8011cae <strstr>
 800da96:	6438      	str	r0, [r7, #64]	; 0x40
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_OPEN].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800da98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	f000 8084 	beq.w	800dba8 <mod_mqttOpen+0x16c>
		{
			lu8p_Ptr += 12;
 800daa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daa2:	330c      	adds	r3, #12
 800daa4:	643b      	str	r3, [r7, #64]	; 0x40
			ls_result = atoi((char *) lu8p_Ptr);
 800daa6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800daa8:	f003 fda4 	bl	80115f4 <atoi>
 800daac:	4603      	mov	r3, r0
 800daae:	87fb      	strh	r3, [r7, #62]	; 0x3e

			if (E_NW_OPENED_SUCCESSFULLY == ls_result)	//Network opened successfully
 800dab0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d106      	bne.n	800dac6 <mod_mqttOpen+0x8a>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_OPENED_SUCCESSFULLY;
 800dab8:	4b44      	ldr	r3, [pc, #272]	; (800dbcc <mod_mqttOpen+0x190>)
 800daba:	2200      	movs	r2, #0
 800dabc:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_SUCCESS;
 800dabe:	2300      	movs	r3, #0
 800dac0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dac4:	e070      	b.n	800dba8 <mod_mqttOpen+0x16c>
				//break;
			}
			else if(E_WRONG_PARAMETER == ls_result)	//Wrong parameter
 800dac6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d106      	bne.n	800dadc <mod_mqttOpen+0xa0>
			{
				/* set VCU DTC and change the return status */
				gst_deviceStatus.men_mqttOpenErrorCodes = E_WRONG_PARAMETER;
 800dace:	4b3f      	ldr	r3, [pc, #252]	; (800dbcc <mod_mqttOpen+0x190>)
 800dad0:	2201      	movs	r2, #1
 800dad2:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800dad4:	2302      	movs	r3, #2
 800dad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dada:	e065      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
			else if(E_MQTT_ID_OCCUPIED == ls_result)	//MQTT identifier is occupied
 800dadc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dae0:	2b02      	cmp	r3, #2
 800dae2:	d117      	bne.n	800db14 <mod_mqttOpen+0xd8>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_MQTT_ID_OCCUPIED;
 800dae4:	4b39      	ldr	r3, [pc, #228]	; (800dbcc <mod_mqttOpen+0x190>)
 800dae6:	2202      	movs	r2, #2
 800dae8:	70da      	strb	r2, [r3, #3]
				sgu8_mqttClientId++;
 800daea:	4b32      	ldr	r3, [pc, #200]	; (800dbb4 <mod_mqttOpen+0x178>)
 800daec:	781b      	ldrb	r3, [r3, #0]
 800daee:	3301      	adds	r3, #1
 800daf0:	b2da      	uxtb	r2, r3
 800daf2:	4b30      	ldr	r3, [pc, #192]	; (800dbb4 <mod_mqttOpen+0x178>)
 800daf4:	701a      	strb	r2, [r3, #0]
				if (sgu8_mqttClientId > 5)
 800daf6:	4b2f      	ldr	r3, [pc, #188]	; (800dbb4 <mod_mqttOpen+0x178>)
 800daf8:	781b      	ldrb	r3, [r3, #0]
 800dafa:	2b05      	cmp	r3, #5
 800dafc:	d906      	bls.n	800db0c <mod_mqttOpen+0xd0>
				{
					len_retStatus = E_RET_FAILED;
 800dafe:	2302      	movs	r3, #2
 800db00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sgu8_mqttClientId = 0;
 800db04:	4b2b      	ldr	r3, [pc, #172]	; (800dbb4 <mod_mqttOpen+0x178>)
 800db06:	2200      	movs	r2, #0
 800db08:	701a      	strb	r2, [r3, #0]
 800db0a:	e04d      	b.n	800dba8 <mod_mqttOpen+0x16c>
				}
				else
				{
					len_retStatus = E_RET_FAILED_TRY_DIFF_ID;
 800db0c:	2301      	movs	r3, #1
 800db0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db12:	e049      	b.n	800dba8 <mod_mqttOpen+0x16c>
				}
			}
			else if(E_FAILED_TO_OPEN_NW == ls_result)	//-1 -> Failed to open network
 800db14:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800db18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db1c:	d106      	bne.n	800db2c <mod_mqttOpen+0xf0>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_OPEN_NW;
 800db1e:	4b2b      	ldr	r3, [pc, #172]	; (800dbcc <mod_mqttOpen+0x190>)
 800db20:	22ff      	movs	r2, #255	; 0xff
 800db22:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800db24:	2302      	movs	r3, #2
 800db26:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db2a:	e03d      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_ACTIVATE_PDP == ls_result)	//3  -> Failed to activate PDP
 800db2c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800db30:	2b03      	cmp	r3, #3
 800db32:	d106      	bne.n	800db42 <mod_mqttOpen+0x106>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_ACTIVATE_PDP;
 800db34:	4b25      	ldr	r3, [pc, #148]	; (800dbcc <mod_mqttOpen+0x190>)
 800db36:	2203      	movs	r2, #3
 800db38:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800db3a:	2302      	movs	r3, #2
 800db3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db40:	e032      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_PARSE_DOMAIN_NAME == ls_result)	//Failed to parse domain name
 800db42:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800db46:	2b04      	cmp	r3, #4
 800db48:	d106      	bne.n	800db58 <mod_mqttOpen+0x11c>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_PARSE_DOMAIN_NAME;
 800db4a:	4b20      	ldr	r3, [pc, #128]	; (800dbcc <mod_mqttOpen+0x190>)
 800db4c:	2204      	movs	r2, #4
 800db4e:	70da      	strb	r2, [r3, #3]
				/* set VCU DTC and change the return status */
				len_retStatus = E_RET_FAILED;
 800db50:	2302      	movs	r3, #2
 800db52:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db56:	e027      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
			else if(E_NW_CONNECTION_ERROR == ls_result)	//5  -> Network connection error
 800db58:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800db5c:	2b05      	cmp	r3, #5
 800db5e:	d106      	bne.n	800db6e <mod_mqttOpen+0x132>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_CONNECTION_ERROR;
 800db60:	4b1a      	ldr	r3, [pc, #104]	; (800dbcc <mod_mqttOpen+0x190>)
 800db62:	2205      	movs	r2, #5
 800db64:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_CONN_ERROR;
 800db66:	230d      	movs	r3, #13
 800db68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db6c:	e01c      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
			else	//other return values
			{
				len_retStatus = E_RET_INPROGRESS;
 800db6e:	2304      	movs	r3, #4
 800db70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db74:	e018      	b.n	800dba8 <mod_mqttOpen+0x16c>
			}
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800db76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db7a:	2b04      	cmp	r3, #4
 800db7c:	d014      	beq.n	800dba8 <mod_mqttOpen+0x16c>
	{
		lsu8_retryCnt++;
 800db7e:	4b10      	ldr	r3, [pc, #64]	; (800dbc0 <mod_mqttOpen+0x184>)
 800db80:	781b      	ldrb	r3, [r3, #0]
 800db82:	3301      	adds	r3, #1
 800db84:	b2da      	uxtb	r2, r3
 800db86:	4b0e      	ldr	r3, [pc, #56]	; (800dbc0 <mod_mqttOpen+0x184>)
 800db88:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800db8a:	4b0d      	ldr	r3, [pc, #52]	; (800dbc0 <mod_mqttOpen+0x184>)
 800db8c:	781b      	ldrb	r3, [r3, #0]
 800db8e:	2b02      	cmp	r3, #2
 800db90:	d803      	bhi.n	800db9a <mod_mqttOpen+0x15e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800db92:	2304      	movs	r3, #4
 800db94:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800db98:	e006      	b.n	800dba8 <mod_mqttOpen+0x16c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800db9a:	4b09      	ldr	r3, [pc, #36]	; (800dbc0 <mod_mqttOpen+0x184>)
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d902      	bls.n	800dba8 <mod_mqttOpen+0x16c>
		{
			lsu8_retryCnt = 0;
 800dba2:	4b07      	ldr	r3, [pc, #28]	; (800dbc0 <mod_mqttOpen+0x184>)
 800dba4:	2200      	movs	r2, #0
 800dba6:	701a      	strb	r2, [r3, #0]
		}
	}
//	}
	return len_retStatus;
 800dba8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dbac:	4618      	mov	r0, r3
 800dbae:	3748      	adds	r7, #72	; 0x48
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	bd80      	pop	{r7, pc}
 800dbb4:	1fff4765 	.word	0x1fff4765
 800dbb8:	08013e7c 	.word	0x08013e7c
 800dbbc:	08013e84 	.word	0x08013e84
 800dbc0:	1fff478e 	.word	0x1fff478e
 800dbc4:	1fff46c4 	.word	0x1fff46c4
 800dbc8:	1fff014e 	.word	0x1fff014e
 800dbcc:	1ffea4dc 	.word	0x1ffea4dc

0800dbd0 <mod_mqttOpenConfig>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpenConfig()
{
 800dbd0:	b5b0      	push	{r4, r5, r7, lr}
 800dbd2:	b08a      	sub	sp, #40	; 0x28
 800dbd4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dbd6:	2304      	movs	r3, #4
 800dbd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lu8arr_param[34] = { 0 };
 800dbdc:	1d3b      	adds	r3, r7, #4
 800dbde:	2200      	movs	r2, #0
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	3304      	adds	r3, #4
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	601a      	str	r2, [r3, #0]
 800dbe8:	3304      	adds	r3, #4
 800dbea:	2200      	movs	r2, #0
 800dbec:	601a      	str	r2, [r3, #0]
 800dbee:	3304      	adds	r3, #4
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	601a      	str	r2, [r3, #0]
 800dbf4:	3304      	adds	r3, #4
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	601a      	str	r2, [r3, #0]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	601a      	str	r2, [r3, #0]
 800dc00:	3304      	adds	r3, #4
 800dc02:	2200      	movs	r2, #0
 800dc04:	601a      	str	r2, [r3, #0]
 800dc06:	3304      	adds	r3, #4
 800dc08:	2200      	movs	r2, #0
 800dc0a:	601a      	str	r2, [r3, #0]
 800dc0c:	3304      	adds	r3, #4
 800dc0e:	2200      	movs	r2, #0
 800dc10:	801a      	strh	r2, [r3, #0]
 800dc12:	3302      	adds	r3, #2
	switch (sen_openMqttState)
 800dc14:	4bc8      	ldr	r3, [pc, #800]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	2b0e      	cmp	r3, #14
 800dc1a:	f200 81b5 	bhi.w	800df88 <mod_mqttOpenConfig+0x3b8>
 800dc1e:	a201      	add	r2, pc, #4	; (adr r2, 800dc24 <mod_mqttOpenConfig+0x54>)
 800dc20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc24:	0800dc61 	.word	0x0800dc61
 800dc28:	0800dc85 	.word	0x0800dc85
 800dc2c:	0800dca9 	.word	0x0800dca9
 800dc30:	0800dccd 	.word	0x0800dccd
 800dc34:	0800dcf1 	.word	0x0800dcf1
 800dc38:	0800dd15 	.word	0x0800dd15
 800dc3c:	0800dd39 	.word	0x0800dd39
 800dc40:	0800dd73 	.word	0x0800dd73
 800dc44:	0800ddab 	.word	0x0800ddab
 800dc48:	0800dde5 	.word	0x0800dde5
 800dc4c:	0800de1b 	.word	0x0800de1b
 800dc50:	0800de59 	.word	0x0800de59
 800dc54:	0800de93 	.word	0x0800de93
 800dc58:	0800ded3 	.word	0x0800ded3
 800dc5c:	0800df09 	.word	0x0800df09
	{
		case E_MQTT_SSL_UPLD_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CA_CERT_FILE);
 800dc60:	2000      	movs	r0, #0
 800dc62:	f7ff fd2f 	bl	800d6c4 <mod_mqttSslCertUpload>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dc6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d106      	bne.n	800dc82 <mod_mqttOpenConfig+0xb2>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dc74:	2304      	movs	r3, #4
 800dc76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CC_CERT_STATE;
 800dc7a:	4baf      	ldr	r3, [pc, #700]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dc7c:	2201      	movs	r2, #1
 800dc7e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dc80:	e183      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dc82:	e182      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CC_CERT_FILE);
 800dc84:	2001      	movs	r0, #1
 800dc86:	f7ff fd1d 	bl	800d6c4 <mod_mqttSslCertUpload>
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dc90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d106      	bne.n	800dca6 <mod_mqttOpenConfig+0xd6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dc98:	2304      	movs	r3, #4
 800dc9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CK_CERT_STATE;
 800dc9e:	4ba6      	ldr	r3, [pc, #664]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dca0:	2202      	movs	r2, #2
 800dca2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dca4:	e171      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dca6:	e170      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CK_CERT_FILE);
 800dca8:	2002      	movs	r0, #2
 800dcaa:	f7ff fd0b 	bl	800d6c4 <mod_mqttSslCertUpload>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dcb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d106      	bne.n	800dcca <mod_mqttOpenConfig+0xfa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dcbc:	2304      	movs	r3, #4
 800dcbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800dcc2:	4b9d      	ldr	r3, [pc, #628]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dcc4:	2206      	movs	r2, #6
 800dcc6:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dcc8:	e15f      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dcca:	e15e      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CA_CERT_FILE);
 800dccc:	2000      	movs	r0, #0
 800dcce:	f7ff fe3d 	bl	800d94c <mod_mqttSslCertDelete>
 800dcd2:	4603      	mov	r3, r0
 800dcd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dcd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d106      	bne.n	800dcee <mod_mqttOpenConfig+0x11e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dce0:	2304      	movs	r3, #4
 800dce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CC_CERT_STATE;
 800dce6:	4b94      	ldr	r3, [pc, #592]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dce8:	2204      	movs	r2, #4
 800dcea:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dcec:	e14d      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dcee:	e14c      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CC_CERT_FILE);
 800dcf0:	2001      	movs	r0, #1
 800dcf2:	f7ff fe2b 	bl	800d94c <mod_mqttSslCertDelete>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dcfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d106      	bne.n	800dd12 <mod_mqttOpenConfig+0x142>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd04:	2304      	movs	r3, #4
 800dd06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CK_CERT_STATE;
 800dd0a:	4b8b      	ldr	r3, [pc, #556]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dd0c:	2205      	movs	r2, #5
 800dd0e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dd10:	e13b      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dd12:	e13a      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CK_CERT_FILE);
 800dd14:	2002      	movs	r0, #2
 800dd16:	f7ff fe19 	bl	800d94c <mod_mqttSslCertDelete>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dd20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d106      	bne.n	800dd36 <mod_mqttOpenConfig+0x166>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd28:	2304      	movs	r3, #4
 800dd2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 800dd2e:	4b82      	ldr	r3, [pc, #520]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dd30:	2200      	movs	r2, #0
 800dd32:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dd34:	e129      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dd36:	e128      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CA_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CA_CERT_PATH);
 800dd38:	1d3b      	adds	r3, r7, #4
 800dd3a:	4a80      	ldr	r2, [pc, #512]	; (800df3c <mod_mqttOpenConfig+0x36c>)
 800dd3c:	461c      	mov	r4, r3
 800dd3e:	4615      	mov	r5, r2
 800dd40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd44:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800dd48:	c403      	stmia	r4!, {r0, r1}
 800dd4a:	8022      	strh	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800dd4c:	1d3b      	adds	r3, r7, #4
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7ff fc84 	bl	800d65c <mod_mqttSslConfgi>
 800dd54:	4603      	mov	r3, r0
 800dd56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dd5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d106      	bne.n	800dd70 <mod_mqttOpenConfig+0x1a0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd62:	2304      	movs	r3, #4
 800dd64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CC_CERT_STATE;
 800dd68:	4b73      	ldr	r3, [pc, #460]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dd6a:	2207      	movs	r2, #7
 800dd6c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dd6e:	e10c      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dd70:	e10b      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CC_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CC_CERT_PATH);
 800dd72:	4b73      	ldr	r3, [pc, #460]	; (800df40 <mod_mqttOpenConfig+0x370>)
 800dd74:	1d3c      	adds	r4, r7, #4
 800dd76:	461d      	mov	r5, r3
 800dd78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dd7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dd80:	682b      	ldr	r3, [r5, #0]
 800dd82:	8023      	strh	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800dd84:	1d3b      	adds	r3, r7, #4
 800dd86:	4618      	mov	r0, r3
 800dd88:	f7ff fc68 	bl	800d65c <mod_mqttSslConfgi>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dd92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d106      	bne.n	800dda8 <mod_mqttOpenConfig+0x1d8>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd9a:	2304      	movs	r3, #4
 800dd9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CK_CERT_STATE;
 800dda0:	4b65      	ldr	r3, [pc, #404]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dda2:	2208      	movs	r2, #8
 800dda4:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dda6:	e0f0      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dda8:	e0ef      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CK_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CK_CERT_PATH);
 800ddaa:	1d3b      	adds	r3, r7, #4
 800ddac:	4a65      	ldr	r2, [pc, #404]	; (800df44 <mod_mqttOpenConfig+0x374>)
 800ddae:	461c      	mov	r4, r3
 800ddb0:	4615      	mov	r5, r2
 800ddb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddb6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ddba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800ddbe:	1d3b      	adds	r3, r7, #4
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7ff fc4b 	bl	800d65c <mod_mqttSslConfgi>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800ddcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d106      	bne.n	800dde2 <mod_mqttOpenConfig+0x212>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ddd4:	2304      	movs	r3, #4
 800ddd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_AUTH_STATE;
 800ddda:	4b57      	ldr	r3, [pc, #348]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800dddc:	2209      	movs	r2, #9
 800ddde:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dde0:	e0d3      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800dde2:	e0d2      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_AUTH);
 800dde4:	1d3b      	adds	r3, r7, #4
 800dde6:	4a58      	ldr	r2, [pc, #352]	; (800df48 <mod_mqttOpenConfig+0x378>)
 800dde8:	461c      	mov	r4, r3
 800ddea:	4615      	mov	r5, r2
 800ddec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ddee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ddf0:	682b      	ldr	r3, [r5, #0]
 800ddf2:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800ddf4:	1d3b      	adds	r3, r7, #4
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f7ff fc30 	bl	800d65c <mod_mqttSslConfgi>
 800ddfc:	4603      	mov	r3, r0
 800ddfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de06:	2b00      	cmp	r3, #0
 800de08:	d106      	bne.n	800de18 <mod_mqttOpenConfig+0x248>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de0a:	2304      	movs	r3, #4
 800de0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_VER_STATE;
 800de10:	4b49      	ldr	r3, [pc, #292]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800de12:	220a      	movs	r2, #10
 800de14:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de16:	e0b8      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800de18:	e0b7      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_VER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_VERSION);
 800de1a:	1d3b      	adds	r3, r7, #4
 800de1c:	4a4b      	ldr	r2, [pc, #300]	; (800df4c <mod_mqttOpenConfig+0x37c>)
 800de1e:	461c      	mov	r4, r3
 800de20:	4615      	mov	r5, r2
 800de22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de24:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de26:	682b      	ldr	r3, [r5, #0]
 800de28:	461a      	mov	r2, r3
 800de2a:	8022      	strh	r2, [r4, #0]
 800de2c:	3402      	adds	r4, #2
 800de2e:	0c1b      	lsrs	r3, r3, #16
 800de30:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800de32:	1d3b      	adds	r3, r7, #4
 800de34:	4618      	mov	r0, r3
 800de36:	f7ff fc11 	bl	800d65c <mod_mqttSslConfgi>
 800de3a:	4603      	mov	r3, r0
 800de3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de44:	2b00      	cmp	r3, #0
 800de46:	d106      	bne.n	800de56 <mod_mqttOpenConfig+0x286>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de48:	2304      	movs	r3, #4
 800de4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CIPHER_STATE;
 800de4e:	4b3a      	ldr	r3, [pc, #232]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800de50:	220b      	movs	r2, #11
 800de52:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de54:	e099      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800de56:	e098      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CIPHER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_CIPHER_SUITE);
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	4a3d      	ldr	r2, [pc, #244]	; (800df50 <mod_mqttOpenConfig+0x380>)
 800de5c:	461c      	mov	r4, r3
 800de5e:	4615      	mov	r5, r2
 800de60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de68:	c403      	stmia	r4!, {r0, r1}
 800de6a:	7022      	strb	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800de6c:	1d3b      	adds	r3, r7, #4
 800de6e:	4618      	mov	r0, r3
 800de70:	f7ff fbf4 	bl	800d65c <mod_mqttSslConfgi>
 800de74:	4603      	mov	r3, r0
 800de76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d106      	bne.n	800de90 <mod_mqttOpenConfig+0x2c0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de82:	2304      	movs	r3, #4
 800de84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_IGR_AUTH_STATE;
 800de88:	4b2b      	ldr	r3, [pc, #172]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800de8a:	220c      	movs	r2, #12
 800de8c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de8e:	e07c      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800de90:	e07b      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_IGR_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_IGNORE_LOCAL_TIME);
 800de92:	1d3b      	adds	r3, r7, #4
 800de94:	4a2f      	ldr	r2, [pc, #188]	; (800df54 <mod_mqttOpenConfig+0x384>)
 800de96:	461c      	mov	r4, r3
 800de98:	4615      	mov	r5, r2
 800de9a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de9e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dea2:	e884 0003 	stmia.w	r4, {r0, r1}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800dea6:	1d3b      	adds	r3, r7, #4
 800dea8:	4618      	mov	r0, r3
 800deaa:	f7ff fbd7 	bl	800d65c <mod_mqttSslConfgi>
 800deae:	4603      	mov	r3, r0
 800deb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800deb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d109      	bne.n	800ded0 <mod_mqttOpenConfig+0x300>
			{
				sgu8_mqttClientId = 0;
 800debc:	4b26      	ldr	r3, [pc, #152]	; (800df58 <mod_mqttOpenConfig+0x388>)
 800debe:	2200      	movs	r2, #0
 800dec0:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_INPROGRESS;
 800dec2:	2304      	movs	r3, #4
 800dec4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800dec8:	4b1b      	ldr	r3, [pc, #108]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800deca:	220d      	movs	r2, #13
 800decc:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dece:	e05c      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800ded0:	e05b      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_SSL_CFG_STATE:
			sprintf((char *) lu8arr_param, (const char *) "\"SSL\",%d,1,2\r\n",
 800ded2:	4b21      	ldr	r3, [pc, #132]	; (800df58 <mod_mqttOpenConfig+0x388>)
 800ded4:	781b      	ldrb	r3, [r3, #0]
 800ded6:	461a      	mov	r2, r3
 800ded8:	1d3b      	adds	r3, r7, #4
 800deda:	4618      	mov	r0, r3
 800dedc:	491f      	ldr	r1, [pc, #124]	; (800df5c <mod_mqttOpenConfig+0x38c>)
 800dede:	f003 fe83 	bl	8011be8 <siprintf>
					sgu8_mqttClientId);
			len_retStatus = mod_mqttSslMode(lu8arr_param);
 800dee2:	1d3b      	adds	r3, r7, #4
 800dee4:	4618      	mov	r0, r3
 800dee6:	f7ff fb85 	bl	800d5f4 <mod_mqttSslMode>
 800deea:	4603      	mov	r3, r0
 800deec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800def0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800def4:	2b00      	cmp	r3, #0
 800def6:	d106      	bne.n	800df06 <mod_mqttOpenConfig+0x336>
			{
				len_retStatus = E_RET_INPROGRESS;
 800def8:	2304      	movs	r3, #4
 800defa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_STATE;
 800defe:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800df00:	220e      	movs	r2, #14
 800df02:	701a      	strb	r2, [r3, #0]
			}
		break;
 800df04:	e041      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800df06:	e040      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_STATE:
			len_retStatus = mod_mqttOpen();
 800df08:	f7ff fd98 	bl	800da3c <mod_mqttOpen>
 800df0c:	4603      	mov	r3, r0
 800df0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800df12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df16:	2b00      	cmp	r3, #0
 800df18:	d106      	bne.n	800df28 <mod_mqttOpenConfig+0x358>
			{
				len_retStatus = E_RET_SUCCESS;
 800df1a:	2300      	movs	r3, #0
 800df1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800df20:	4b05      	ldr	r3, [pc, #20]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800df22:	2206      	movs	r2, #6
 800df24:	701a      	strb	r2, [r3, #0]
 800df26:	e02e      	b.n	800df86 <mod_mqttOpenConfig+0x3b6>
			}
			else if (E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800df28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d117      	bne.n	800df60 <mod_mqttOpenConfig+0x390>
			{
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800df30:	4b01      	ldr	r3, [pc, #4]	; (800df38 <mod_mqttOpenConfig+0x368>)
 800df32:	220d      	movs	r2, #13
 800df34:	701a      	strb	r2, [r3, #0]
 800df36:	e026      	b.n	800df86 <mod_mqttOpenConfig+0x3b6>
 800df38:	1fff476b 	.word	0x1fff476b
 800df3c:	08013ebc 	.word	0x08013ebc
 800df40:	08013f64 	.word	0x08013f64
 800df44:	08013ed8 	.word	0x08013ed8
 800df48:	08013ef8 	.word	0x08013ef8
 800df4c:	08013f0c 	.word	0x08013f0c
 800df50:	08013f20 	.word	0x08013f20
 800df54:	08013f3c 	.word	0x08013f3c
 800df58:	1fff4765 	.word	0x1fff4765
 800df5c:	08013f54 	.word	0x08013f54
			}
			else if (E_RET_FAILED == len_retStatus)
 800df60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df64:	2b02      	cmp	r3, #2
 800df66:	d103      	bne.n	800df70 <mod_mqttOpenConfig+0x3a0>
			{
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800df68:	4b0b      	ldr	r3, [pc, #44]	; (800df98 <mod_mqttOpenConfig+0x3c8>)
 800df6a:	2206      	movs	r2, #6
 800df6c:	701a      	strb	r2, [r3, #0]
 800df6e:	e00a      	b.n	800df86 <mod_mqttOpenConfig+0x3b6>
			}
			else if(E_RET_CONN_ERROR == len_retStatus)
 800df70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df74:	2b0d      	cmp	r3, #13
 800df76:	d106      	bne.n	800df86 <mod_mqttOpenConfig+0x3b6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800df78:	2304      	movs	r3, #4
 800df7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CA_CERT_STATE;
 800df7e:	4b06      	ldr	r3, [pc, #24]	; (800df98 <mod_mqttOpenConfig+0x3c8>)
 800df80:	2203      	movs	r2, #3
 800df82:	701a      	strb	r2, [r3, #0]
			}
		break;
 800df84:	e001      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>
 800df86:	e000      	b.n	800df8a <mod_mqttOpenConfig+0x3ba>

		default:
		break;
 800df88:	bf00      	nop
	}

	return len_retStatus;
 800df8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3728      	adds	r7, #40	; 0x28
 800df92:	46bd      	mov	sp, r7
 800df94:	bdb0      	pop	{r4, r5, r7, pc}
 800df96:	bf00      	nop
 800df98:	1fff476b 	.word	0x1fff476b

0800df9c <mod_gpsCfg>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsCfg(void)
{
 800df9c:	b5b0      	push	{r4, r5, r7, lr}
 800df9e:	b088      	sub	sp, #32
 800dfa0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dfa2:	2304      	movs	r3, #4
 800dfa4:	77fb      	strb	r3, [r7, #31]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	61bb      	str	r3, [r7, #24]
	uint8_t lu8arr_param[] = "\"outport\",\"none\"\r\n";
 800dfaa:	4b21      	ldr	r3, [pc, #132]	; (800e030 <mod_gpsCfg+0x94>)
 800dfac:	1d3c      	adds	r4, r7, #4
 800dfae:	461d      	mov	r5, r3
 800dfb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb4:	682b      	ldr	r3, [r5, #0]
 800dfb6:	461a      	mov	r2, r3
 800dfb8:	8022      	strh	r2, [r4, #0]
 800dfba:	3402      	adds	r4, #2
 800dfbc:	0c1b      	lsrs	r3, r3, #16
 800dfbe:	7023      	strb	r3, [r4, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GPS_CFG, (uint8_t *) lu8arr_param);
 800dfc0:	1d3b      	adds	r3, r7, #4
 800dfc2:	201f      	movs	r0, #31
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f7fd fdf3 	bl	800bbb0 <mod_sendCmdGetRsp>
 800dfca:	4603      	mov	r3, r0
 800dfcc:	77fb      	strb	r3, [r7, #31]
	if (E_RET_SUCCESS == len_retStatus)
 800dfce:	7ffb      	ldrb	r3, [r7, #31]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d110      	bne.n	800dff6 <mod_gpsCfg+0x5a>
	{
		lsu8_retryCnt = 0;
 800dfd4:	4b17      	ldr	r3, [pc, #92]	; (800e034 <mod_gpsCfg+0x98>)
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800dfda:	4817      	ldr	r0, [pc, #92]	; (800e038 <mod_gpsCfg+0x9c>)
 800dfdc:	4917      	ldr	r1, [pc, #92]	; (800e03c <mod_gpsCfg+0xa0>)
 800dfde:	f003 fe66 	bl	8011cae <strstr>
 800dfe2:	61b8      	str	r0, [r7, #24]
				(const char *) gcst_ATCmdTable[E_IDX_GPS_CFG].mu8arr_respString);
		if(NULL != lu8p_Ptr)
 800dfe4:	69bb      	ldr	r3, [r7, #24]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d002      	beq.n	800dff0 <mod_gpsCfg+0x54>
		{

			len_retStatus = E_RET_SUCCESS;
 800dfea:	2300      	movs	r3, #0
 800dfec:	77fb      	strb	r3, [r7, #31]
 800dfee:	e019      	b.n	800e024 <mod_gpsCfg+0x88>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800dff0:	2302      	movs	r3, #2
 800dff2:	77fb      	strb	r3, [r7, #31]
 800dff4:	e016      	b.n	800e024 <mod_gpsCfg+0x88>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800dff6:	7ffb      	ldrb	r3, [r7, #31]
 800dff8:	2b04      	cmp	r3, #4
 800dffa:	d013      	beq.n	800e024 <mod_gpsCfg+0x88>
	{
		lsu8_retryCnt++;
 800dffc:	4b0d      	ldr	r3, [pc, #52]	; (800e034 <mod_gpsCfg+0x98>)
 800dffe:	781b      	ldrb	r3, [r3, #0]
 800e000:	3301      	adds	r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	4b0b      	ldr	r3, [pc, #44]	; (800e034 <mod_gpsCfg+0x98>)
 800e006:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e008:	4b0a      	ldr	r3, [pc, #40]	; (800e034 <mod_gpsCfg+0x98>)
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	2b02      	cmp	r3, #2
 800e00e:	d802      	bhi.n	800e016 <mod_gpsCfg+0x7a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e010:	2304      	movs	r3, #4
 800e012:	77fb      	strb	r3, [r7, #31]
 800e014:	e006      	b.n	800e024 <mod_gpsCfg+0x88>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e016:	4b07      	ldr	r3, [pc, #28]	; (800e034 <mod_gpsCfg+0x98>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	2b03      	cmp	r3, #3
 800e01c:	d902      	bls.n	800e024 <mod_gpsCfg+0x88>
		{
			lsu8_retryCnt = 0;
 800e01e:	4b05      	ldr	r3, [pc, #20]	; (800e034 <mod_gpsCfg+0x98>)
 800e020:	2200      	movs	r2, #0
 800e022:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e024:	7ffb      	ldrb	r3, [r7, #31]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3720      	adds	r7, #32
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bdb0      	pop	{r4, r5, r7, pc}
 800e02e:	bf00      	nop
 800e030:	08013f88 	.word	0x08013f88
 800e034:	1fff478f 	.word	0x1fff478f
 800e038:	1fff46c4 	.word	0x1fff46c4
 800e03c:	1fff38cc 	.word	0x1fff38cc

0800e040 <mod_gpsEnable>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsEnable(void)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e046:	2304      	movs	r3, #4
 800e048:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e04a:	2300      	movs	r3, #0
 800e04c:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_GNSS, (uint8_t *) NEW_LINE);
 800e04e:	2020      	movs	r0, #32
 800e050:	4914      	ldr	r1, [pc, #80]	; (800e0a4 <mod_gpsEnable+0x64>)
 800e052:	f7fd fdad 	bl	800bbb0 <mod_sendCmdGetRsp>
 800e056:	4603      	mov	r3, r0
 800e058:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800e05a:	79fb      	ldrb	r3, [r7, #7]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d105      	bne.n	800e06c <mod_gpsEnable+0x2c>
	{
		lsu8_retryCnt = 0;
 800e060:	4b11      	ldr	r3, [pc, #68]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e062:	2200      	movs	r2, #0
 800e064:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800e066:	2300      	movs	r3, #0
 800e068:	71fb      	strb	r3, [r7, #7]
 800e06a:	e016      	b.n	800e09a <mod_gpsEnable+0x5a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e06c:	79fb      	ldrb	r3, [r7, #7]
 800e06e:	2b04      	cmp	r3, #4
 800e070:	d013      	beq.n	800e09a <mod_gpsEnable+0x5a>
	{
		lsu8_retryCnt++;
 800e072:	4b0d      	ldr	r3, [pc, #52]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	3301      	adds	r3, #1
 800e078:	b2da      	uxtb	r2, r3
 800e07a:	4b0b      	ldr	r3, [pc, #44]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e07c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e07e:	4b0a      	ldr	r3, [pc, #40]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e080:	781b      	ldrb	r3, [r3, #0]
 800e082:	2b02      	cmp	r3, #2
 800e084:	d802      	bhi.n	800e08c <mod_gpsEnable+0x4c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e086:	2304      	movs	r3, #4
 800e088:	71fb      	strb	r3, [r7, #7]
 800e08a:	e006      	b.n	800e09a <mod_gpsEnable+0x5a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e08c:	4b06      	ldr	r3, [pc, #24]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e08e:	781b      	ldrb	r3, [r3, #0]
 800e090:	2b03      	cmp	r3, #3
 800e092:	d902      	bls.n	800e09a <mod_gpsEnable+0x5a>
		{
			lsu8_retryCnt = 0;
 800e094:	4b04      	ldr	r3, [pc, #16]	; (800e0a8 <mod_gpsEnable+0x68>)
 800e096:	2200      	movs	r2, #0
 800e098:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e09a:	79fb      	ldrb	r3, [r7, #7]
}
 800e09c:	4618      	mov	r0, r3
 800e09e:	3708      	adds	r7, #8
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	08013d8c 	.word	0x08013d8c
 800e0a8:	1fff4790 	.word	0x1fff4790

0800e0ac <mod_4gHandler>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_4gHandler(void)
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e0b2:	2304      	movs	r3, #4
 800e0b4:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCount = 0;
//	mod_receiveRsp();	//read and saved received byte in global buffer

	if (gst_deviceStatus.mb_ismodemPwrDwn != true)
 800e0b6:	4ba3      	ldr	r3, [pc, #652]	; (800e344 <mod_4gHandler+0x298>)
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f083 0301 	eor.w	r3, r3, #1
 800e0be:	b2db      	uxtb	r3, r3
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f000 813b 	beq.w	800e33c <mod_4gHandler+0x290>
	{
		switch (sen_4gRunState)
 800e0c6:	4ba0      	ldr	r3, [pc, #640]	; (800e348 <mod_4gHandler+0x29c>)
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	2b10      	cmp	r3, #16
 800e0cc:	f200 8135 	bhi.w	800e33a <mod_4gHandler+0x28e>
 800e0d0:	a201      	add	r2, pc, #4	; (adr r2, 800e0d8 <mod_4gHandler+0x2c>)
 800e0d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0d6:	bf00      	nop
 800e0d8:	0800e33b 	.word	0x0800e33b
 800e0dc:	0800e11d 	.word	0x0800e11d
 800e0e0:	0800e149 	.word	0x0800e149
 800e0e4:	0800e167 	.word	0x0800e167
 800e0e8:	0800e185 	.word	0x0800e185
 800e0ec:	0800e1a3 	.word	0x0800e1a3
 800e0f0:	0800e1c1 	.word	0x0800e1c1
 800e0f4:	0800e217 	.word	0x0800e217
 800e0f8:	0800e22f 	.word	0x0800e22f
 800e0fc:	0800e24b 	.word	0x0800e24b
 800e100:	0800e33b 	.word	0x0800e33b
 800e104:	0800e271 	.word	0x0800e271
 800e108:	0800e309 	.word	0x0800e309
 800e10c:	0800e2d3 	.word	0x0800e2d3
 800e110:	0800e2eb 	.word	0x0800e2eb
 800e114:	0800e33b 	.word	0x0800e33b
 800e118:	0800e327 	.word	0x0800e327
		{
			case E_MOD_IDLE_STATE:
			break;

			case E_SET_URC_PORT_STATE:
				len_retStatus = mod_setUrcPort();
 800e11c:	f7fe f822 	bl	800c164 <mod_setUrcPort>
 800e120:	4603      	mov	r3, r0
 800e122:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e124:	79fb      	ldrb	r3, [r7, #7]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d002      	beq.n	800e130 <mod_4gHandler+0x84>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e12a:	79fb      	ldrb	r3, [r7, #7]
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d00a      	beq.n	800e146 <mod_4gHandler+0x9a>
				{
					mod_disable4gModule();
 800e130:	f7fd fbec 	bl	800b90c <mod_disable4gModule>
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800e134:	4b83      	ldr	r3, [pc, #524]	; (800e344 <mod_4gHandler+0x298>)
 800e136:	2201      	movs	r2, #1
 800e138:	701a      	strb	r2, [r3, #0]
					mod_enable4gModule();
 800e13a:	f7fd fbc9 	bl	800b8d0 <mod_enable4gModule>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800e13e:	4b82      	ldr	r3, [pc, #520]	; (800e348 <mod_4gHandler+0x29c>)
 800e140:	2202      	movs	r2, #2
 800e142:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e144:	e0fa      	b.n	800e33c <mod_4gHandler+0x290>
 800e146:	e0f9      	b.n	800e33c <mod_4gHandler+0x290>

			case E_ECHO_OFF_STATE:
				len_retStatus = mod_echoOff();
 800e148:	f7fd ffda 	bl	800c100 <mod_echoOff>
 800e14c:	4603      	mov	r3, r0
 800e14e:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e150:	79fb      	ldrb	r3, [r7, #7]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d002      	beq.n	800e15c <mod_4gHandler+0xb0>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e156:	79fb      	ldrb	r3, [r7, #7]
 800e158:	2b04      	cmp	r3, #4
 800e15a:	d003      	beq.n	800e164 <mod_4gHandler+0xb8>
				{
					sen_4gRunState = E_SET_FLOW_CTRL_STATE;
 800e15c:	4b7a      	ldr	r3, [pc, #488]	; (800e348 <mod_4gHandler+0x29c>)
 800e15e:	2203      	movs	r2, #3
 800e160:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e162:	e0eb      	b.n	800e33c <mod_4gHandler+0x290>
 800e164:	e0ea      	b.n	800e33c <mod_4gHandler+0x290>

			case E_SET_FLOW_CTRL_STATE:
				len_retStatus = mod_setFlowCtrl();
 800e166:	f7fe f835 	bl	800c1d4 <mod_setFlowCtrl>
 800e16a:	4603      	mov	r3, r0
 800e16c:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d002      	beq.n	800e17a <mod_4gHandler+0xce>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e174:	79fb      	ldrb	r3, [r7, #7]
 800e176:	2b04      	cmp	r3, #4
 800e178:	d003      	beq.n	800e182 <mod_4gHandler+0xd6>
				{
					sen_4gRunState = E_EXTRACT_MODULE_INFO_STATE;
 800e17a:	4b73      	ldr	r3, [pc, #460]	; (800e348 <mod_4gHandler+0x29c>)
 800e17c:	2204      	movs	r2, #4
 800e17e:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e180:	e0dc      	b.n	800e33c <mod_4gHandler+0x290>
 800e182:	e0db      	b.n	800e33c <mod_4gHandler+0x290>

			case E_EXTRACT_MODULE_INFO_STATE:
				len_retStatus = mod_extractModInfo();
 800e184:	f7fe f864 	bl	800c250 <mod_extractModInfo>
 800e188:	4603      	mov	r3, r0
 800e18a:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e18c:	79fb      	ldrb	r3, [r7, #7]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d002      	beq.n	800e198 <mod_4gHandler+0xec>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e192:	79fb      	ldrb	r3, [r7, #7]
 800e194:	2b04      	cmp	r3, #4
 800e196:	d003      	beq.n	800e1a0 <mod_4gHandler+0xf4>
				{
					sen_4gRunState = E_SIM_STATUS_STATE;
 800e198:	4b6b      	ldr	r3, [pc, #428]	; (800e348 <mod_4gHandler+0x29c>)
 800e19a:	2205      	movs	r2, #5
 800e19c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e19e:	e0cd      	b.n	800e33c <mod_4gHandler+0x290>
 800e1a0:	e0cc      	b.n	800e33c <mod_4gHandler+0x290>

			case E_SIM_STATUS_STATE:
				len_retStatus = mod_simStatus();
 800e1a2:	f7fe fbb5 	bl	800c910 <mod_simStatus>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d002      	beq.n	800e1b6 <mod_4gHandler+0x10a>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e1b0:	79fb      	ldrb	r3, [r7, #7]
 800e1b2:	2b04      	cmp	r3, #4
 800e1b4:	d003      	beq.n	800e1be <mod_4gHandler+0x112>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e1b6:	4b64      	ldr	r3, [pc, #400]	; (800e348 <mod_4gHandler+0x29c>)
 800e1b8:	2206      	movs	r2, #6
 800e1ba:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e1bc:	e0be      	b.n	800e33c <mod_4gHandler+0x290>
 800e1be:	e0bd      	b.n	800e33c <mod_4gHandler+0x290>

			case E_NETWORK_STATUS_STATE:
				len_retStatus = mod_networkStatus();
 800e1c0:	f7fe fc4c 	bl	800ca5c <mod_networkStatus>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e1c8:	79fb      	ldrb	r3, [r7, #7]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d103      	bne.n	800e1d6 <mod_4gHandler+0x12a>
				{
					sen_4gRunState = E_SIGNAL_QUALITY_STATE;
 800e1ce:	4b5e      	ldr	r3, [pc, #376]	; (800e348 <mod_4gHandler+0x29c>)
 800e1d0:	2207      	movs	r2, #7
 800e1d2:	701a      	strb	r2, [r3, #0]
 800e1d4:	e01e      	b.n	800e214 <mod_4gHandler+0x168>
				}
				else if (E_RET_FAILED == len_retStatus)
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	2b02      	cmp	r3, #2
 800e1da:	d11b      	bne.n	800e214 <mod_4gHandler+0x168>
				{
					lsu8_retryCount++;
 800e1dc:	4b5b      	ldr	r3, [pc, #364]	; (800e34c <mod_4gHandler+0x2a0>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	b2da      	uxtb	r2, r3
 800e1e4:	4b59      	ldr	r3, [pc, #356]	; (800e34c <mod_4gHandler+0x2a0>)
 800e1e6:	701a      	strb	r2, [r3, #0]
					gb_isMqttConnected = false;
 800e1e8:	4b59      	ldr	r3, [pc, #356]	; (800e350 <mod_4gHandler+0x2a4>)
 800e1ea:	2200      	movs	r2, #0
 800e1ec:	701a      	strb	r2, [r3, #0]
					if (lsu8_retryCount >= 6)
 800e1ee:	4b57      	ldr	r3, [pc, #348]	; (800e34c <mod_4gHandler+0x2a0>)
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	2b05      	cmp	r3, #5
 800e1f4:	d906      	bls.n	800e204 <mod_4gHandler+0x158>
					{
						lsu8_retryCount = 0;
 800e1f6:	4b55      	ldr	r3, [pc, #340]	; (800e34c <mod_4gHandler+0x2a0>)
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	701a      	strb	r2, [r3, #0]
						sen_4gRunState = E_MOD_RESET_STATE;
 800e1fc:	4b52      	ldr	r3, [pc, #328]	; (800e348 <mod_4gHandler+0x29c>)
 800e1fe:	220c      	movs	r2, #12
 800e200:	701a      	strb	r2, [r3, #0]
 800e202:	e007      	b.n	800e214 <mod_4gHandler+0x168>
					}
					else
					{
						tm_set4gRunTimer(TIMER_5S);
 800e204:	f241 3088 	movw	r0, #5000	; 0x1388
 800e208:	f7f2 f8e6 	bl	80003d8 <tm_set4gRunTimer>
						sen_4gRunState = E_MOD_WAIT_STATE;
 800e20c:	4b4e      	ldr	r3, [pc, #312]	; (800e348 <mod_4gHandler+0x29c>)
 800e20e:	2210      	movs	r2, #16
 800e210:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800e212:	e093      	b.n	800e33c <mod_4gHandler+0x290>
 800e214:	e092      	b.n	800e33c <mod_4gHandler+0x290>

			case E_SIGNAL_QUALITY_STATE:
				len_retStatus = mod_signalQuality();
 800e216:	f7fe fcc1 	bl	800cb9c <mod_signalQuality>
 800e21a:	4603      	mov	r3, r0
 800e21c:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e21e:	79fb      	ldrb	r3, [r7, #7]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d103      	bne.n	800e22c <mod_4gHandler+0x180>
				{
					sen_4gRunState = E_EXTRACT_TIME_DATE_STATE;
 800e224:	4b48      	ldr	r3, [pc, #288]	; (800e348 <mod_4gHandler+0x29c>)
 800e226:	2208      	movs	r2, #8
 800e228:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e22a:	e087      	b.n	800e33c <mod_4gHandler+0x290>
 800e22c:	e086      	b.n	800e33c <mod_4gHandler+0x290>

			case E_EXTRACT_TIME_DATE_STATE:
				len_retStatus = mod_extractDateTime();
 800e22e:	f7fe fd09 	bl	800cc44 <mod_extractDateTime>
 800e232:	4603      	mov	r3, r0
 800e234:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d105      	bne.n	800e248 <mod_4gHandler+0x19c>
				{
					//SuperLooptime_End();
					//SuperLooptime_Start();
					set_RTC();
 800e23c:	f7fc ff64 	bl	800b108 <set_RTC>
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e240:	4b41      	ldr	r3, [pc, #260]	; (800e348 <mod_4gHandler+0x29c>)
 800e242:	2209      	movs	r2, #9
 800e244:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e246:	e079      	b.n	800e33c <mod_4gHandler+0x290>
 800e248:	e078      	b.n	800e33c <mod_4gHandler+0x290>

			case E_MQTT_OPEN_STATE:
				len_retStatus = mod_mqttOpenConfig();
 800e24a:	f7ff fcc1 	bl	800dbd0 <mod_mqttOpenConfig>
 800e24e:	4603      	mov	r3, r0
 800e250:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e252:	79fb      	ldrb	r3, [r7, #7]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d103      	bne.n	800e260 <mod_4gHandler+0x1b4>
				{
					sen_4gRunState = E_MQTT_CONNECT_STATE;
 800e258:	4b3b      	ldr	r3, [pc, #236]	; (800e348 <mod_4gHandler+0x29c>)
 800e25a:	220b      	movs	r2, #11
 800e25c:	701a      	strb	r2, [r3, #0]
 800e25e:	e006      	b.n	800e26e <mod_4gHandler+0x1c2>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e260:	79fb      	ldrb	r3, [r7, #7]
 800e262:	2b04      	cmp	r3, #4
 800e264:	d003      	beq.n	800e26e <mod_4gHandler+0x1c2>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e266:	4b38      	ldr	r3, [pc, #224]	; (800e348 <mod_4gHandler+0x29c>)
 800e268:	220c      	movs	r2, #12
 800e26a:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e26c:	e066      	b.n	800e33c <mod_4gHandler+0x290>
 800e26e:	e065      	b.n	800e33c <mod_4gHandler+0x290>

			case E_MQTT_CONNECT_STATE:
				len_retStatus = mod_mqttConnect();
 800e270:	f7fe fd84 	bl	800cd7c <mod_mqttConnect>
 800e274:	4603      	mov	r3, r0
 800e276:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d103      	bne.n	800e286 <mod_4gHandler+0x1da>
				{
//					gb_isMqttConnected = true;
//					sen_4gRunState = E_MOD_IDLE_STATE;
					sen_4gRunState = E_GPS_CFG_STATE;
 800e27e:	4b32      	ldr	r3, [pc, #200]	; (800e348 <mod_4gHandler+0x29c>)
 800e280:	220d      	movs	r2, #13
 800e282:	701a      	strb	r2, [r3, #0]
 800e284:	e024      	b.n	800e2d0 <mod_4gHandler+0x224>
				}
				else if(E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e286:	79fb      	ldrb	r3, [r7, #7]
 800e288:	2b01      	cmp	r3, #1
 800e28a:	d113      	bne.n	800e2b4 <mod_4gHandler+0x208>
				{
					sgu8_mqttClientId++;
 800e28c:	4b31      	ldr	r3, [pc, #196]	; (800e354 <mod_4gHandler+0x2a8>)
 800e28e:	781b      	ldrb	r3, [r3, #0]
 800e290:	3301      	adds	r3, #1
 800e292:	b2da      	uxtb	r2, r3
 800e294:	4b2f      	ldr	r3, [pc, #188]	; (800e354 <mod_4gHandler+0x2a8>)
 800e296:	701a      	strb	r2, [r3, #0]
					if (sgu8_mqttClientId > 5)
 800e298:	4b2e      	ldr	r3, [pc, #184]	; (800e354 <mod_4gHandler+0x2a8>)
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	2b05      	cmp	r3, #5
 800e29e:	d902      	bls.n	800e2a6 <mod_4gHandler+0x1fa>
					{
						sgu8_mqttClientId = 0;
 800e2a0:	4b2c      	ldr	r3, [pc, #176]	; (800e354 <mod_4gHandler+0x2a8>)
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	701a      	strb	r2, [r3, #0]
					}
					sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e2a6:	4b2c      	ldr	r3, [pc, #176]	; (800e358 <mod_4gHandler+0x2ac>)
 800e2a8:	220d      	movs	r2, #13
 800e2aa:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e2ac:	4b26      	ldr	r3, [pc, #152]	; (800e348 <mod_4gHandler+0x29c>)
 800e2ae:	2209      	movs	r2, #9
 800e2b0:	701a      	strb	r2, [r3, #0]
 800e2b2:	e00d      	b.n	800e2d0 <mod_4gHandler+0x224>
				}
				else if (E_RET_CONN_CLOSED_ERROR == len_retStatus)
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	2b0a      	cmp	r3, #10
 800e2b8:	d103      	bne.n	800e2c2 <mod_4gHandler+0x216>
				{
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e2ba:	4b23      	ldr	r3, [pc, #140]	; (800e348 <mod_4gHandler+0x29c>)
 800e2bc:	2209      	movs	r2, #9
 800e2be:	701a      	strb	r2, [r3, #0]
 800e2c0:	e006      	b.n	800e2d0 <mod_4gHandler+0x224>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e2c2:	79fb      	ldrb	r3, [r7, #7]
 800e2c4:	2b04      	cmp	r3, #4
 800e2c6:	d003      	beq.n	800e2d0 <mod_4gHandler+0x224>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e2c8:	4b1f      	ldr	r3, [pc, #124]	; (800e348 <mod_4gHandler+0x29c>)
 800e2ca:	220c      	movs	r2, #12
 800e2cc:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e2ce:	e035      	b.n	800e33c <mod_4gHandler+0x290>
 800e2d0:	e034      	b.n	800e33c <mod_4gHandler+0x290>

			case E_GPS_CFG_STATE:
				len_retStatus = mod_gpsCfg();
 800e2d2:	f7ff fe63 	bl	800df9c <mod_gpsCfg>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e2da:	79fb      	ldrb	r3, [r7, #7]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d103      	bne.n	800e2e8 <mod_4gHandler+0x23c>
				{
					sen_4gRunState = E_GPS_ENABLE_STATE;
 800e2e0:	4b19      	ldr	r3, [pc, #100]	; (800e348 <mod_4gHandler+0x29c>)
 800e2e2:	220e      	movs	r2, #14
 800e2e4:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e2e6:	e029      	b.n	800e33c <mod_4gHandler+0x290>
 800e2e8:	e028      	b.n	800e33c <mod_4gHandler+0x290>

			case E_GPS_ENABLE_STATE:
				len_retStatus = mod_gpsEnable();
 800e2ea:	f7ff fea9 	bl	800e040 <mod_gpsEnable>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e2f2:	79fb      	ldrb	r3, [r7, #7]
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d106      	bne.n	800e306 <mod_4gHandler+0x25a>
				{
					gb_isMqttConnected = true;
 800e2f8:	4b15      	ldr	r3, [pc, #84]	; (800e350 <mod_4gHandler+0x2a4>)
 800e2fa:	2201      	movs	r2, #1
 800e2fc:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_SET_URC_PORT_STATE;
 800e2fe:	4b12      	ldr	r3, [pc, #72]	; (800e348 <mod_4gHandler+0x29c>)
 800e300:	2201      	movs	r2, #1
 800e302:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e304:	e01a      	b.n	800e33c <mod_4gHandler+0x290>
 800e306:	e019      	b.n	800e33c <mod_4gHandler+0x290>
			case E_GET_GPS_DATA_STATE:

			break;

			case E_MOD_RESET_STATE:
				len_retStatus = mod_mqttDisableEnableFunctionality();
 800e308:	f7fe fefc 	bl	800d104 <mod_mqttDisableEnableFunctionality>
 800e30c:	4603      	mov	r3, r0
 800e30e:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	2b00      	cmp	r3, #0
 800e314:	d002      	beq.n	800e31c <mod_4gHandler+0x270>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b04      	cmp	r3, #4
 800e31a:	d003      	beq.n	800e324 <mod_4gHandler+0x278>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e31c:	4b0a      	ldr	r3, [pc, #40]	; (800e348 <mod_4gHandler+0x29c>)
 800e31e:	2206      	movs	r2, #6
 800e320:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e322:	e00b      	b.n	800e33c <mod_4gHandler+0x290>
 800e324:	e00a      	b.n	800e33c <mod_4gHandler+0x290>

			case E_MOD_WAIT_STATE:
				if (tm_get4gRunTimerValue() == 0)
 800e326:	f7f2 f865 	bl	80003f4 <tm_get4gRunTimerValue>
 800e32a:	4603      	mov	r3, r0
 800e32c:	2b00      	cmp	r3, #0
 800e32e:	d103      	bne.n	800e338 <mod_4gHandler+0x28c>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e330:	4b05      	ldr	r3, [pc, #20]	; (800e348 <mod_4gHandler+0x29c>)
 800e332:	2206      	movs	r2, #6
 800e334:	701a      	strb	r2, [r3, #0]
				}

			break;
 800e336:	e001      	b.n	800e33c <mod_4gHandler+0x290>
 800e338:	e000      	b.n	800e33c <mod_4gHandler+0x290>

			default:
			break;
 800e33a:	bf00      	nop
		}
	}
}
 800e33c:	3708      	adds	r7, #8
 800e33e:	46bd      	mov	sp, r7
 800e340:	bd80      	pop	{r7, pc}
 800e342:	bf00      	nop
 800e344:	1ffea4dc 	.word	0x1ffea4dc
 800e348:	1ffea4d8 	.word	0x1ffea4d8
 800e34c:	1fff4791 	.word	0x1fff4791
 800e350:	1fff5230 	.word	0x1fff5230
 800e354:	1fff4765 	.word	0x1fff4765
 800e358:	1fff476b 	.word	0x1fff476b

0800e35c <mod_pub10sPackExtractGps>:

	return len_retStatus;
}*/

en_responseRetCodes_t mod_pub10sPackExtractGps(void)
{
 800e35c:	b5b0      	push	{r4, r5, r7, lr}
 800e35e:	b08c      	sub	sp, #48	; 0x30
 800e360:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e362:	2304      	movs	r3, #4
 800e364:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lu8_retryCont = 0;

	RTC_GetTime(&current_time);
 800e368:	486a      	ldr	r0, [pc, #424]	; (800e514 <mod_pub10sPackExtractGps+0x1b8>)
 800e36a:	f7f9 f9a1 	bl	80076b0 <RTC_GetTime>

	if ((current_time.seconds % 3 == 0U) && (sgb_flagGps == false) && (sgb_packetFlag == false))
 800e36e:	4b69      	ldr	r3, [pc, #420]	; (800e514 <mod_pub10sPackExtractGps+0x1b8>)
 800e370:	781b      	ldrb	r3, [r3, #0]
 800e372:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e376:	b2db      	uxtb	r3, r3
 800e378:	4619      	mov	r1, r3
 800e37a:	4b67      	ldr	r3, [pc, #412]	; (800e518 <mod_pub10sPackExtractGps+0x1bc>)
 800e37c:	fb83 3201 	smull	r3, r2, r3, r1
 800e380:	17cb      	asrs	r3, r1, #31
 800e382:	1ad2      	subs	r2, r2, r3
 800e384:	4613      	mov	r3, r2
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	4413      	add	r3, r2
 800e38a:	1aca      	subs	r2, r1, r3
 800e38c:	2a00      	cmp	r2, #0
 800e38e:	d113      	bne.n	800e3b8 <mod_pub10sPackExtractGps+0x5c>
 800e390:	4b62      	ldr	r3, [pc, #392]	; (800e51c <mod_pub10sPackExtractGps+0x1c0>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	f083 0301 	eor.w	r3, r3, #1
 800e398:	b2db      	uxtb	r3, r3
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d00c      	beq.n	800e3b8 <mod_pub10sPackExtractGps+0x5c>
 800e39e:	4b60      	ldr	r3, [pc, #384]	; (800e520 <mod_pub10sPackExtractGps+0x1c4>)
 800e3a0:	781b      	ldrb	r3, [r3, #0]
 800e3a2:	f083 0301 	eor.w	r3, r3, #1
 800e3a6:	b2db      	uxtb	r3, r3
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d005      	beq.n	800e3b8 <mod_pub10sPackExtractGps+0x5c>
	{
		Get_CurrentLocation();
 800e3ac:	f7fd f864 	bl	800b478 <Get_CurrentLocation>
		sgb_flagGps = true;
 800e3b0:	4b5a      	ldr	r3, [pc, #360]	; (800e51c <mod_pub10sPackExtractGps+0x1c0>)
 800e3b2:	2201      	movs	r2, #1
 800e3b4:	701a      	strb	r2, [r3, #0]
 800e3b6:	e017      	b.n	800e3e8 <mod_pub10sPackExtractGps+0x8c>
	}
	else if ((sgb_flagGps == true) && (current_time.seconds % 3) != 0U)
 800e3b8:	4b58      	ldr	r3, [pc, #352]	; (800e51c <mod_pub10sPackExtractGps+0x1c0>)
 800e3ba:	781b      	ldrb	r3, [r3, #0]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d013      	beq.n	800e3e8 <mod_pub10sPackExtractGps+0x8c>
 800e3c0:	4b54      	ldr	r3, [pc, #336]	; (800e514 <mod_pub10sPackExtractGps+0x1b8>)
 800e3c2:	781b      	ldrb	r3, [r3, #0]
 800e3c4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e3c8:	b2db      	uxtb	r3, r3
 800e3ca:	4619      	mov	r1, r3
 800e3cc:	4b52      	ldr	r3, [pc, #328]	; (800e518 <mod_pub10sPackExtractGps+0x1bc>)
 800e3ce:	fb83 3201 	smull	r3, r2, r3, r1
 800e3d2:	17cb      	asrs	r3, r1, #31
 800e3d4:	1ad2      	subs	r2, r2, r3
 800e3d6:	4613      	mov	r3, r2
 800e3d8:	005b      	lsls	r3, r3, #1
 800e3da:	4413      	add	r3, r2
 800e3dc:	1aca      	subs	r2, r1, r3
 800e3de:	2a00      	cmp	r2, #0
 800e3e0:	d002      	beq.n	800e3e8 <mod_pub10sPackExtractGps+0x8c>
	{
		sgb_flagGps = false;
 800e3e2:	4b4e      	ldr	r3, [pc, #312]	; (800e51c <mod_pub10sPackExtractGps+0x1c0>)
 800e3e4:	2200      	movs	r2, #0
 800e3e6:	701a      	strb	r2, [r3, #0]
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
 800e3e8:	4b4a      	ldr	r3, [pc, #296]	; (800e514 <mod_pub10sPackExtractGps+0x1b8>)
 800e3ea:	781b      	ldrb	r3, [r3, #0]
 800e3ec:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e3f0:	b2db      	uxtb	r3, r3
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4b4b      	ldr	r3, [pc, #300]	; (800e524 <mod_pub10sPackExtractGps+0x1c8>)
 800e3f6:	fb83 2301 	smull	r2, r3, r3, r1
 800e3fa:	109a      	asrs	r2, r3, #2
 800e3fc:	17cb      	asrs	r3, r1, #31
 800e3fe:	1ad2      	subs	r2, r2, r3
 800e400:	4613      	mov	r3, r2
 800e402:	009b      	lsls	r3, r3, #2
 800e404:	4413      	add	r3, r2
 800e406:	005b      	lsls	r3, r3, #1
 800e408:	1aca      	subs	r2, r1, r3
 800e40a:	2a00      	cmp	r2, #0
 800e40c:	d12c      	bne.n	800e468 <mod_pub10sPackExtractGps+0x10c>
 800e40e:	4b46      	ldr	r3, [pc, #280]	; (800e528 <mod_pub10sPackExtractGps+0x1cc>)
 800e410:	781b      	ldrb	r3, [r3, #0]
 800e412:	f083 0301 	eor.w	r3, r3, #1
 800e416:	b2db      	uxtb	r3, r3
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d025      	beq.n	800e468 <mod_pub10sPackExtractGps+0x10c>
	{
		epoch_time();
 800e41c:	f7fc ff24 	bl	800b268 <epoch_time>
		Process_4G_Event_Data();
 800e420:	f7fc fd98 	bl	800af54 <Process_4G_Event_Data>
		memset(Eventbuffer_4Gcomm, 0, 512);
 800e424:	4841      	ldr	r0, [pc, #260]	; (800e52c <mod_pub10sPackExtractGps+0x1d0>)
 800e426:	2100      	movs	r1, #0
 800e428:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e42c:	f003 f91d 	bl	801166a <memset>
		pb_ostream_t stream1;
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
 800e430:	463b      	mov	r3, r7
 800e432:	4618      	mov	r0, r3
 800e434:	493d      	ldr	r1, [pc, #244]	; (800e52c <mod_pub10sPackExtractGps+0x1d0>)
 800e436:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e43a:	f000 fb31 	bl	800eaa0 <pb_ostream_from_buffer>
 800e43e:	f107 0418 	add.w	r4, r7, #24
 800e442:	463d      	mov	r5, r7
 800e444:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e448:	682b      	ldr	r3, [r5, #0]
 800e44a:	6023      	str	r3, [r4, #0]
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
 800e44c:	f107 0318 	add.w	r3, r7, #24
 800e450:	4618      	mov	r0, r3
 800e452:	4937      	ldr	r1, [pc, #220]	; (800e530 <mod_pub10sPackExtractGps+0x1d4>)
 800e454:	4a37      	ldr	r2, [pc, #220]	; (800e534 <mod_pub10sPackExtractGps+0x1d8>)
 800e456:	f000 ff95 	bl	800f384 <pb_encode>
		sgb_packetFlag = true;
 800e45a:	4b31      	ldr	r3, [pc, #196]	; (800e520 <mod_pub10sPackExtractGps+0x1c4>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	701a      	strb	r2, [r3, #0]
		sgb_flag4g = true;
 800e460:	4b31      	ldr	r3, [pc, #196]	; (800e528 <mod_pub10sPackExtractGps+0x1cc>)
 800e462:	2201      	movs	r2, #1
 800e464:	701a      	strb	r2, [r3, #0]
	{
		sgb_flagGps = false;
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
	{
 800e466:	e019      	b.n	800e49c <mod_pub10sPackExtractGps+0x140>
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
		sgb_packetFlag = true;
		sgb_flag4g = true;
	}
	else if ((sgb_flag4g == true) && (current_time.seconds % 10 != 0U))
 800e468:	4b2f      	ldr	r3, [pc, #188]	; (800e528 <mod_pub10sPackExtractGps+0x1cc>)
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d015      	beq.n	800e49c <mod_pub10sPackExtractGps+0x140>
 800e470:	4b28      	ldr	r3, [pc, #160]	; (800e514 <mod_pub10sPackExtractGps+0x1b8>)
 800e472:	781b      	ldrb	r3, [r3, #0]
 800e474:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	4619      	mov	r1, r3
 800e47c:	4b29      	ldr	r3, [pc, #164]	; (800e524 <mod_pub10sPackExtractGps+0x1c8>)
 800e47e:	fb83 2301 	smull	r2, r3, r3, r1
 800e482:	109a      	asrs	r2, r3, #2
 800e484:	17cb      	asrs	r3, r1, #31
 800e486:	1ad2      	subs	r2, r2, r3
 800e488:	4613      	mov	r3, r2
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	4413      	add	r3, r2
 800e48e:	005b      	lsls	r3, r3, #1
 800e490:	1aca      	subs	r2, r1, r3
 800e492:	2a00      	cmp	r2, #0
 800e494:	d002      	beq.n	800e49c <mod_pub10sPackExtractGps+0x140>
	{
		sgb_flag4g = false;
 800e496:	4b24      	ldr	r3, [pc, #144]	; (800e528 <mod_pub10sPackExtractGps+0x1cc>)
 800e498:	2200      	movs	r2, #0
 800e49a:	701a      	strb	r2, [r3, #0]
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
 800e49c:	4b20      	ldr	r3, [pc, #128]	; (800e520 <mod_pub10sPackExtractGps+0x1c4>)
 800e49e:	781b      	ldrb	r3, [r3, #0]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d032      	beq.n	800e50a <mod_pub10sPackExtractGps+0x1ae>
 800e4a4:	4b24      	ldr	r3, [pc, #144]	; (800e538 <mod_pub10sPackExtractGps+0x1dc>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d02e      	beq.n	800e50a <mod_pub10sPackExtractGps+0x1ae>
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 800e4ac:	481f      	ldr	r0, [pc, #124]	; (800e52c <mod_pub10sPackExtractGps+0x1d0>)
 800e4ae:	f003 fbe4 	bl	8011c7a <strlen>
 800e4b2:	4603      	mov	r3, r0
		sgb_flag4g = false;
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	481d      	ldr	r0, [pc, #116]	; (800e52c <mod_pub10sPackExtractGps+0x1d0>)
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4a20      	ldr	r2, [pc, #128]	; (800e53c <mod_pub10sPackExtractGps+0x1e0>)
 800e4bc:	f7fe fe6c 	bl	800d198 <mod_mqttPublishData>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);

		if (E_RET_SUCCESS == len_retStatus)
 800e4c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d103      	bne.n	800e4d6 <mod_pub10sPackExtractGps+0x17a>
		{
			sgb_packetFlag = false;
 800e4ce:	4b14      	ldr	r3, [pc, #80]	; (800e520 <mod_pub10sPackExtractGps+0x1c4>)
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	701a      	strb	r2, [r3, #0]
 800e4d4:	e019      	b.n	800e50a <mod_pub10sPackExtractGps+0x1ae>
		}
		else if (E_RET_INPROGRESS != len_retStatus)
 800e4d6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e4da:	2b04      	cmp	r3, #4
 800e4dc:	d015      	beq.n	800e50a <mod_pub10sPackExtractGps+0x1ae>
		{
			lu8_retryCont++;
 800e4de:	4b18      	ldr	r3, [pc, #96]	; (800e540 <mod_pub10sPackExtractGps+0x1e4>)
 800e4e0:	781b      	ldrb	r3, [r3, #0]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	b2da      	uxtb	r2, r3
 800e4e6:	4b16      	ldr	r3, [pc, #88]	; (800e540 <mod_pub10sPackExtractGps+0x1e4>)
 800e4e8:	701a      	strb	r2, [r3, #0]
			if (3 > lu8_retryCont)
 800e4ea:	4b15      	ldr	r3, [pc, #84]	; (800e540 <mod_pub10sPackExtractGps+0x1e4>)
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	2b02      	cmp	r3, #2
 800e4f0:	d80b      	bhi.n	800e50a <mod_pub10sPackExtractGps+0x1ae>
			{
				lu8_retryCont = 0;
 800e4f2:	4b13      	ldr	r3, [pc, #76]	; (800e540 <mod_pub10sPackExtractGps+0x1e4>)
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	701a      	strb	r2, [r3, #0]

				//write to SD card

				sgb_packetFlag = false;
 800e4f8:	4b09      	ldr	r3, [pc, #36]	; (800e520 <mod_pub10sPackExtractGps+0x1c4>)
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	701a      	strb	r2, [r3, #0]
				gb_isMqttConnected = false;
 800e4fe:	4b11      	ldr	r3, [pc, #68]	; (800e544 <mod_pub10sPackExtractGps+0x1e8>)
 800e500:	2200      	movs	r2, #0
 800e502:	701a      	strb	r2, [r3, #0]
				sen_4gRunState = E_MQTT_OPEN_STATE;
 800e504:	4b10      	ldr	r3, [pc, #64]	; (800e548 <mod_pub10sPackExtractGps+0x1ec>)
 800e506:	2209      	movs	r2, #9
 800e508:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800e50a:	4618      	mov	r0, r3
 800e50c:	3730      	adds	r7, #48	; 0x30
 800e50e:	46bd      	mov	sp, r7
 800e510:	bdb0      	pop	{r4, r5, r7, pc}
 800e512:	bf00      	nop
 800e514:	1fff47f0 	.word	0x1fff47f0
 800e518:	55555556 	.word	0x55555556
 800e51c:	1fff4771 	.word	0x1fff4771
 800e520:	1fff476f 	.word	0x1fff476f
 800e524:	66666667 	.word	0x66666667
 800e528:	1fff4770 	.word	0x1fff4770
 800e52c:	1fff44a0 	.word	0x1fff44a0
 800e530:	08013cd4 	.word	0x08013cd4
 800e534:	1fff5234 	.word	0x1fff5234
 800e538:	1fff4794 	.word	0x1fff4794
 800e53c:	08013f9c 	.word	0x08013f9c
 800e540:	1fff4792 	.word	0x1fff4792
 800e544:	1fff5230 	.word	0x1fff5230
 800e548:	1ffea4d8 	.word	0x1ffea4d8

0800e54c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800e54c:	b480      	push	{r7}
 800e54e:	b08f      	sub	sp, #60	; 0x3c
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	891a      	ldrh	r2, [r3, #8]
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	8a1b      	ldrh	r3, [r3, #16]
 800e55e:	429a      	cmp	r2, r3
 800e560:	d301      	bcc.n	800e566 <load_descriptor_values+0x1a>
        return false;
 800e562:	2300      	movs	r3, #0
 800e564:	e153      	b.n	800e80e <load_descriptor_values+0x2c2>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	895b      	ldrh	r3, [r3, #10]
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	4413      	add	r3, r2
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	0a1b      	lsrs	r3, r3, #8
 800e57c:	b2da      	uxtb	r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800e582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e584:	f003 0303 	and.w	r3, r3, #3
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d023      	beq.n	800e5d4 <load_descriptor_values+0x88>
 800e58c:	2b01      	cmp	r3, #1
 800e58e:	d302      	bcc.n	800e596 <load_descriptor_values+0x4a>
 800e590:	2b02      	cmp	r3, #2
 800e592:	d053      	beq.n	800e63c <load_descriptor_values+0xf0>
 800e594:	e08e      	b.n	800e6b4 <load_descriptor_values+0x168>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2201      	movs	r2, #1
 800e59a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800e59c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59e:	089b      	lsrs	r3, r3, #2
 800e5a0:	b29b      	uxth	r3, r3
 800e5a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5a6:	b29a      	uxth	r2, r3
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800e5ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ae:	0e1b      	lsrs	r3, r3, #24
 800e5b0:	b2db      	uxtb	r3, r3
 800e5b2:	f003 030f 	and.w	r3, r3, #15
 800e5b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800e5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5bc:	0c1b      	lsrs	r3, r3, #16
 800e5be:	b2db      	uxtb	r3, r3
 800e5c0:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 800e5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c4:	0f1b      	lsrs	r3, r3, #28
 800e5c6:	b29b      	uxth	r3, r3
 800e5c8:	f003 030f 	and.w	r3, r3, #15
 800e5cc:	b29a      	uxth	r2, r3
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	825a      	strh	r2, [r3, #18]
            break;
 800e5d2:	e0b4      	b.n	800e73e <load_descriptor_values+0x1f2>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	895b      	ldrh	r3, [r3, #10]
 800e5de:	3301      	adds	r3, #1
 800e5e0:	009b      	lsls	r3, r3, #2
 800e5e2:	4413      	add	r3, r2
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	62bb      	str	r3, [r7, #40]	; 0x28

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800e5e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ea:	0c1b      	lsrs	r3, r3, #16
 800e5ec:	b29b      	uxth	r3, r3
 800e5ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e5f2:	b29a      	uxth	r2, r3
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800e5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5fa:	089b      	lsrs	r3, r3, #2
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e602:	b29a      	uxth	r2, r3
 800e604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e606:	0f1b      	lsrs	r3, r3, #28
 800e608:	b29b      	uxth	r3, r3
 800e60a:	019b      	lsls	r3, r3, #6
 800e60c:	b29b      	uxth	r3, r3
 800e60e:	4313      	orrs	r3, r2
 800e610:	b29a      	uxth	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800e616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e618:	0f1b      	lsrs	r3, r3, #28
 800e61a:	b2db      	uxtb	r3, r3
 800e61c:	f003 030f 	and.w	r3, r3, #15
 800e620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800e624:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e626:	b29b      	uxth	r3, r3
 800e628:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800e62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e62c:	0c1b      	lsrs	r3, r3, #16
 800e62e:	b29b      	uxth	r3, r3
 800e630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e634:	b29a      	uxth	r2, r3
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	825a      	strh	r2, [r3, #18]
            break;
 800e63a:	e080      	b.n	800e73e <load_descriptor_values+0x1f2>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681a      	ldr	r2, [r3, #0]
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	895b      	ldrh	r3, [r3, #10]
 800e646:	3301      	adds	r3, #1
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	895b      	ldrh	r3, [r3, #10]
 800e65a:	3302      	adds	r3, #2
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	623b      	str	r3, [r7, #32]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	681a      	ldr	r2, [r3, #0]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	895b      	ldrh	r3, [r3, #10]
 800e66e:	3303      	adds	r3, #3
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	4413      	add	r3, r2
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800e678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67a:	0c1b      	lsrs	r3, r3, #16
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	089b      	lsrs	r3, r3, #2
 800e686:	b29b      	uxth	r3, r3
 800e688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e68c:	b29a      	uxth	r2, r3
 800e68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e690:	0a1b      	lsrs	r3, r3, #8
 800e692:	b29b      	uxth	r3, r3
 800e694:	019b      	lsls	r3, r3, #6
 800e696:	b29b      	uxth	r3, r3
 800e698:	4313      	orrs	r3, r2
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800e6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800e6aa:	69fb      	ldr	r3, [r7, #28]
 800e6ac:	b29a      	uxth	r2, r3
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	825a      	strh	r2, [r3, #18]
            break;
 800e6b2:	e044      	b.n	800e73e <load_descriptor_values+0x1f2>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	895b      	ldrh	r3, [r3, #10]
 800e6be:	3301      	adds	r3, #1
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	4413      	add	r3, r2
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	681b      	ldr	r3, [r3, #0]
 800e6cc:	681a      	ldr	r2, [r3, #0]
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	3302      	adds	r3, #2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	4413      	add	r3, r2
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	681a      	ldr	r2, [r3, #0]
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	895b      	ldrh	r3, [r3, #10]
 800e6e6:	3303      	adds	r3, #3
 800e6e8:	009b      	lsls	r3, r3, #2
 800e6ea:	4413      	add	r3, r2
 800e6ec:	681b      	ldr	r3, [r3, #0]
 800e6ee:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	681b      	ldr	r3, [r3, #0]
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	895b      	ldrh	r3, [r3, #10]
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	009b      	lsls	r3, r3, #2
 800e6fe:	4413      	add	r3, r2
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	b29a      	uxth	r2, r3
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800e70c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70e:	089b      	lsrs	r3, r3, #2
 800e710:	b29b      	uxth	r3, r3
 800e712:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e716:	b29a      	uxth	r2, r3
 800e718:	69bb      	ldr	r3, [r7, #24]
 800e71a:	0a1b      	lsrs	r3, r3, #8
 800e71c:	b29b      	uxth	r3, r3
 800e71e:	019b      	lsls	r3, r3, #6
 800e720:	b29b      	uxth	r3, r3
 800e722:	4313      	orrs	r3, r2
 800e724:	b29a      	uxth	r2, r3
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800e72a:	69bb      	ldr	r3, [r7, #24]
 800e72c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800e730:	697b      	ldr	r3, [r7, #20]
 800e732:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	b29a      	uxth	r2, r3
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	825a      	strh	r2, [r3, #18]
            break;
 800e73c:	bf00      	nop
        }
    }

    if (!iter->message)
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	685b      	ldr	r3, [r3, #4]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d106      	bne.n	800e754 <load_descriptor_values+0x208>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2200      	movs	r2, #0
 800e74a:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2200      	movs	r2, #0
 800e750:	621a      	str	r2, [r3, #32]
 800e752:	e041      	b.n	800e7d8 <load_descriptor_values+0x28c>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	685a      	ldr	r2, [r3, #4]
 800e758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e75a:	441a      	add	r2, r3
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800e760:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e764:	2b00      	cmp	r3, #0
 800e766:	d008      	beq.n	800e77a <load_descriptor_values+0x22e>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	699a      	ldr	r2, [r3, #24]
 800e76c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e770:	425b      	negs	r3, r3
 800e772:	441a      	add	r2, r3
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	621a      	str	r2, [r3, #32]
 800e778:	e01a      	b.n	800e7b0 <load_descriptor_values+0x264>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	7d9b      	ldrb	r3, [r3, #22]
 800e77e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e782:	2b20      	cmp	r3, #32
 800e784:	d111      	bne.n	800e7aa <load_descriptor_values+0x25e>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	7d9b      	ldrb	r3, [r3, #22]
 800e78a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0

        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d005      	beq.n	800e79e <load_descriptor_values+0x252>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	7d9b      	ldrb	r3, [r3, #22]
 800e796:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800e79a:	2b80      	cmp	r3, #128	; 0x80
 800e79c:	d105      	bne.n	800e7aa <load_descriptor_values+0x25e>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	f103 0214 	add.w	r2, r3, #20
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	621a      	str	r2, [r3, #32]
 800e7a8:	e002      	b.n	800e7b0 <load_descriptor_values+0x264>
        }
        else
        {
            iter->pSize = NULL;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	2200      	movs	r2, #0
 800e7ae:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	7d9b      	ldrb	r3, [r3, #22]
 800e7b4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e7b8:	2b80      	cmp	r3, #128	; 0x80
 800e7ba:	d109      	bne.n	800e7d0 <load_descriptor_values+0x284>
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	699b      	ldr	r3, [r3, #24]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d005      	beq.n	800e7d0 <load_descriptor_values+0x284>
        {
            iter->pData = *(void**)iter->pField;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	699b      	ldr	r3, [r3, #24]
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	61da      	str	r2, [r3, #28]
 800e7ce:	e003      	b.n	800e7d8 <load_descriptor_values+0x28c>
        }
        else
        {
            iter->pData = iter->pField;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	699a      	ldr	r2, [r3, #24]
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	7d9b      	ldrb	r3, [r3, #22]
 800e7dc:	f003 030f 	and.w	r3, r3, #15
 800e7e0:	2b08      	cmp	r3, #8
 800e7e2:	d005      	beq.n	800e7f0 <load_descriptor_values+0x2a4>
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	7d9b      	ldrb	r3, [r3, #22]
 800e7e8:	f003 030f 	and.w	r3, r3, #15
 800e7ec:	2b09      	cmp	r3, #9
 800e7ee:	d10a      	bne.n	800e806 <load_descriptor_values+0x2ba>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	685a      	ldr	r2, [r3, #4]
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	89db      	ldrh	r3, [r3, #14]
 800e7fa:	009b      	lsls	r3, r3, #2
 800e7fc:	4413      	add	r3, r2
 800e7fe:	681a      	ldr	r2, [r3, #0]
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	625a      	str	r2, [r3, #36]	; 0x24
 800e804:	e002      	b.n	800e80c <load_descriptor_values+0x2c0>
    }
    else
    {
        iter->submsg_desc = NULL;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 800e80c:	2301      	movs	r3, #1
}
 800e80e:	4618      	mov	r0, r3
 800e810:	373c      	adds	r7, #60	; 0x3c
 800e812:	46bd      	mov	sp, r7
 800e814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e818:	4770      	bx	lr
 800e81a:	bf00      	nop

0800e81c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800e81c:	b480      	push	{r7}
 800e81e:	b085      	sub	sp, #20
 800e820:	af00      	add	r7, sp, #0
 800e822:	6078      	str	r0, [r7, #4]
    iter->index++;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	891b      	ldrh	r3, [r3, #8]
 800e828:	3301      	adds	r3, #1
 800e82a:	b29a      	uxth	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	891a      	ldrh	r2, [r3, #8]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	8a1b      	ldrh	r3, [r3, #16]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d30c      	bcc.n	800e858 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2200      	movs	r2, #0
 800e842:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2200      	movs	r2, #0
 800e848:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2200      	movs	r2, #0
 800e84e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	2200      	movs	r2, #0
 800e854:	819a      	strh	r2, [r3, #12]
 800e856:	e03c      	b.n	800e8d2 <advance_iterator+0xb6>
         * All field info formats have the following fields:
         * - lowest 2 bits tell the amount of words in the descriptor (2^n words)
         * - bits 2..7 give the lowest bits of tag number.
         * - bits 8..15 give the field type.
         */
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	681a      	ldr	r2, [r3, #0]
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	895b      	ldrh	r3, [r3, #10]
 800e862:	009b      	lsls	r3, r3, #2
 800e864:	4413      	add	r3, r2
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800e86a:	68fb      	ldr	r3, [r7, #12]
 800e86c:	0a1b      	lsrs	r3, r3, #8
 800e86e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	2201      	movs	r2, #1
 800e878:	fa02 f303 	lsl.w	r3, r2, r3
 800e87c:	813b      	strh	r3, [r7, #8]

        /* Add to fields.
         * The cast to pb_size_t is needed to avoid -Wconversion warning.
         * Because the data is is constants from generator, there is no danger of overflow.
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	895a      	ldrh	r2, [r3, #10]
 800e882:	893b      	ldrh	r3, [r7, #8]
 800e884:	4413      	add	r3, r2
 800e886:	b29a      	uxth	r2, r3
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	899a      	ldrh	r2, [r3, #12]
 800e890:	7afb      	ldrb	r3, [r7, #11]
 800e892:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e896:	2b00      	cmp	r3, #0
 800e898:	bf0c      	ite	eq
 800e89a:	2301      	moveq	r3, #1
 800e89c:	2300      	movne	r3, #0
 800e89e:	b2db      	uxtb	r3, r3
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	4413      	add	r3, r2
 800e8a4:	b29a      	uxth	r2, r3
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	89da      	ldrh	r2, [r3, #14]
 800e8ae:	7afb      	ldrb	r3, [r7, #11]
 800e8b0:	f003 030f 	and.w	r3, r3, #15
 800e8b4:	2b08      	cmp	r3, #8
 800e8b6:	d004      	beq.n	800e8c2 <advance_iterator+0xa6>
 800e8b8:	7afb      	ldrb	r3, [r7, #11]
 800e8ba:	f003 030f 	and.w	r3, r3, #15
 800e8be:	2b09      	cmp	r3, #9
 800e8c0:	d101      	bne.n	800e8c6 <advance_iterator+0xaa>
 800e8c2:	2301      	movs	r3, #1
 800e8c4:	e000      	b.n	800e8c8 <advance_iterator+0xac>
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	b29b      	uxth	r3, r3
 800e8ca:	4413      	add	r3, r2
 800e8cc:	b29a      	uxth	r2, r3
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	81da      	strh	r2, [r3, #14]
    }
}
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	60f8      	str	r0, [r7, #12]
 800e8e4:	60b9      	str	r1, [r7, #8]
 800e8e6:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	2228      	movs	r2, #40	; 0x28
 800e8ee:	f002 febc 	bl	801166a <memset>

    iter->descriptor = desc;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	68ba      	ldr	r2, [r7, #8]
 800e8f6:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	687a      	ldr	r2, [r7, #4]
 800e8fc:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800e8fe:	68f8      	ldr	r0, [r7, #12]
 800e900:	f7ff fe24 	bl	800e54c <load_descriptor_values>
 800e904:	4603      	mov	r3, r0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop

0800e910 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b086      	sub	sp, #24
 800e914:	af00      	add	r7, sp, #0
 800e916:	6078      	str	r0, [r7, #4]
 800e918:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800e91a:	683b      	ldr	r3, [r7, #0]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	689b      	ldr	r3, [r3, #8]
 800e920:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	681b      	ldr	r3, [r3, #0]
 800e928:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	0a1b      	lsrs	r3, r3, #8
 800e92e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e932:	2b80      	cmp	r3, #128	; 0x80
 800e934:	d109      	bne.n	800e94a <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	3304      	adds	r3, #4
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	6939      	ldr	r1, [r7, #16]
 800e93e:	461a      	mov	r2, r3
 800e940:	f7ff ffcc 	bl	800e8dc <pb_field_iter_begin>
 800e944:	4603      	mov	r3, r0
 800e946:	75fb      	strb	r3, [r7, #23]
 800e948:	e008      	b.n	800e95c <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	685b      	ldr	r3, [r3, #4]
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	6939      	ldr	r1, [r7, #16]
 800e952:	461a      	mov	r2, r3
 800e954:	f7ff ffc2 	bl	800e8dc <pb_field_iter_begin>
 800e958:	4603      	mov	r3, r0
 800e95a:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	f103 020c 	add.w	r2, r3, #12
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	621a      	str	r2, [r3, #32]
    return status;
 800e966:	7dfb      	ldrb	r3, [r7, #23]
}
 800e968:	4618      	mov	r0, r3
 800e96a:	3718      	adds	r7, #24
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b082      	sub	sp, #8
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff ff4f 	bl	800e81c <advance_iterator>
    (void)load_descriptor_values(iter);
 800e97e:	6878      	ldr	r0, [r7, #4]
 800e980:	f7ff fde4 	bl	800e54c <load_descriptor_values>
    return iter->index != 0;
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	891b      	ldrh	r3, [r3, #8]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	bf14      	ite	ne
 800e98c:	2301      	movne	r3, #1
 800e98e:	2300      	moveq	r3, #0
 800e990:	b2db      	uxtb	r3, r3
}
 800e992:	4618      	mov	r0, r3
 800e994:	3708      	adds	r7, #8
 800e996:	46bd      	mov	sp, r7
 800e998:	bd80      	pop	{r7, pc}
 800e99a:	bf00      	nop

0800e99c <pb_const_cast>:
        return false;
    }
}

static void *pb_const_cast(const void *p)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b085      	sub	sp, #20
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800e9a8:	68fb      	ldr	r3, [r7, #12]
}
 800e9aa:	4618      	mov	r0, r3
 800e9ac:	3714      	adds	r7, #20
 800e9ae:	46bd      	mov	sp, r7
 800e9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b4:	4770      	bx	lr
 800e9b6:	bf00      	nop

0800e9b8 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b084      	sub	sp, #16
 800e9bc:	af00      	add	r7, sp, #0
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f7ff ffe9 	bl	800e99c <pb_const_cast>
 800e9ca:	4603      	mov	r3, r0
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	68b9      	ldr	r1, [r7, #8]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	f7ff ff83 	bl	800e8dc <pb_field_iter_begin>
 800e9d6:	4603      	mov	r3, r0
}
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3710      	adds	r7, #16
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}

0800e9e0 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 800e9e0:	b580      	push	{r7, lr}
 800e9e2:	b082      	sub	sp, #8
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
 800e9e8:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800e9ea:	6838      	ldr	r0, [r7, #0]
 800e9ec:	f7ff ffd6 	bl	800e99c <pb_const_cast>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	f7ff ff8b 	bl	800e910 <pb_field_iter_begin_extension>
 800e9fa:	4603      	mov	r3, r0
}
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b086      	sub	sp, #24
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	60f8      	str	r0, [r7, #12]
 800ea0c:	60b9      	str	r1, [r7, #8]
 800ea0e:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	8a5b      	ldrh	r3, [r3, #18]
 800ea14:	2b08      	cmp	r3, #8
 800ea16:	d125      	bne.n	800ea64 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d01f      	beq.n	800ea64 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	d00c      	beq.n	800ea44 <pb_default_field_callback+0x40>
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d008      	beq.n	800ea44 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 800ea32:	697b      	ldr	r3, [r7, #20]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	3204      	adds	r2, #4
 800ea3a:	68f8      	ldr	r0, [r7, #12]
 800ea3c:	6879      	ldr	r1, [r7, #4]
 800ea3e:	4798      	blx	r3
 800ea40:	4603      	mov	r3, r0
 800ea42:	e010      	b.n	800ea66 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800ea44:	68bb      	ldr	r3, [r7, #8]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d00c      	beq.n	800ea64 <pb_default_field_callback+0x60>
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d008      	beq.n	800ea64 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 800ea52:	697b      	ldr	r3, [r7, #20]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	697a      	ldr	r2, [r7, #20]
 800ea58:	3204      	adds	r2, #4
 800ea5a:	68b8      	ldr	r0, [r7, #8]
 800ea5c:	6879      	ldr	r1, [r7, #4]
 800ea5e:	4798      	blx	r3
 800ea60:	4603      	mov	r3, r0
 800ea62:	e000      	b.n	800ea66 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800ea64:	2301      	movs	r3, #1

}
 800ea66:	4618      	mov	r0, r3
 800ea68:	3718      	adds	r7, #24
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}
 800ea6e:	bf00      	nop

0800ea70 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b086      	sub	sp, #24
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	60f8      	str	r0, [r7, #12]
 800ea78:	60b9      	str	r1, [r7, #8]
 800ea7a:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800ea82:	697a      	ldr	r2, [r7, #20]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	441a      	add	r2, r3
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800ea8c:	6978      	ldr	r0, [r7, #20]
 800ea8e:	68b9      	ldr	r1, [r7, #8]
 800ea90:	687a      	ldr	r2, [r7, #4]
 800ea92:	f002 fddf 	bl	8011654 <memcpy>
    
    return true;
 800ea96:	2301      	movs	r3, #1
}
 800ea98:	4618      	mov	r0, r3
 800ea9a:	3718      	adds	r7, #24
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}

0800eaa0 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800eaa0:	b4b0      	push	{r4, r5, r7}
 800eaa2:	b08b      	sub	sp, #44	; 0x2c
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800eaac:	4b0b      	ldr	r3, [pc, #44]	; (800eadc <pb_ostream_from_buffer+0x3c>)
 800eaae:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800eab0:	68bb      	ldr	r3, [r7, #8]
 800eab2:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800eab8:	2300      	movs	r3, #0
 800eaba:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800eabc:	2300      	movs	r3, #0
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	461d      	mov	r5, r3
 800eac4:	f107 0414 	add.w	r4, r7, #20
 800eac8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800eaca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800eacc:	6823      	ldr	r3, [r4, #0]
 800eace:	602b      	str	r3, [r5, #0]
}
 800ead0:	68f8      	ldr	r0, [r7, #12]
 800ead2:	372c      	adds	r7, #44	; 0x2c
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bcb0      	pop	{r4, r5, r7}
 800ead8:	4770      	bx	lr
 800eada:	bf00      	nop
 800eadc:	0800ea71 	.word	0x0800ea71

0800eae0 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800eae0:	b580      	push	{r7, lr}
 800eae2:	b084      	sub	sp, #16
 800eae4:	af00      	add	r7, sp, #0
 800eae6:	60f8      	str	r0, [r7, #12]
 800eae8:	60b9      	str	r1, [r7, #8]
 800eaea:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d037      	beq.n	800eb62 <pb_write+0x82>
 800eaf2:	68fb      	ldr	r3, [r7, #12]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d033      	beq.n	800eb62 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800eafa:	68fb      	ldr	r3, [r7, #12]
 800eafc:	68da      	ldr	r2, [r3, #12]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	441a      	add	r2, r3
 800eb02:	68fb      	ldr	r3, [r7, #12]
 800eb04:	68db      	ldr	r3, [r3, #12]
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d307      	bcc.n	800eb1a <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	68da      	ldr	r2, [r3, #12]
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	441a      	add	r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	689b      	ldr	r3, [r3, #8]

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
    if (count > 0 && stream->callback != NULL)
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d90b      	bls.n	800eb32 <pb_write+0x52>
            stream->bytes_written + count > stream->max_size)
        {
            PB_RETURN_ERROR(stream, "stream full");
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	691b      	ldr	r3, [r3, #16]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d002      	beq.n	800eb28 <pb_write+0x48>
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	691b      	ldr	r3, [r3, #16]
 800eb26:	e000      	b.n	800eb2a <pb_write+0x4a>
 800eb28:	4b13      	ldr	r3, [pc, #76]	; (800eb78 <pb_write+0x98>)
 800eb2a:	68fa      	ldr	r2, [r7, #12]
 800eb2c:	6113      	str	r3, [r2, #16]
 800eb2e:	2300      	movs	r3, #0
 800eb30:	e01e      	b.n	800eb70 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	68f8      	ldr	r0, [r7, #12]
 800eb38:	68b9      	ldr	r1, [r7, #8]
 800eb3a:	687a      	ldr	r2, [r7, #4]
 800eb3c:	4798      	blx	r3
 800eb3e:	4603      	mov	r3, r0
 800eb40:	f083 0301 	eor.w	r3, r3, #1
 800eb44:	b2db      	uxtb	r3, r3
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d00b      	beq.n	800eb62 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	691b      	ldr	r3, [r3, #16]
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d002      	beq.n	800eb58 <pb_write+0x78>
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	691b      	ldr	r3, [r3, #16]
 800eb56:	e000      	b.n	800eb5a <pb_write+0x7a>
 800eb58:	4b08      	ldr	r3, [pc, #32]	; (800eb7c <pb_write+0x9c>)
 800eb5a:	68fa      	ldr	r2, [r7, #12]
 800eb5c:	6113      	str	r3, [r2, #16]
 800eb5e:	2300      	movs	r3, #0
 800eb60:	e006      	b.n	800eb70 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800eb62:	68fb      	ldr	r3, [r7, #12]
 800eb64:	68da      	ldr	r2, [r3, #12]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	441a      	add	r2, r3
 800eb6a:	68fb      	ldr	r3, [r7, #12]
 800eb6c:	60da      	str	r2, [r3, #12]
    return true;
 800eb6e:	2301      	movs	r3, #1
}
 800eb70:	4618      	mov	r0, r3
 800eb72:	3710      	adds	r7, #16
 800eb74:	46bd      	mov	sp, r7
 800eb76:	bd80      	pop	{r7, pc}
 800eb78:	08013fac 	.word	0x08013fac
 800eb7c:	08013fb8 	.word	0x08013fb8

0800eb80 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
 800eb90:	e00a      	b.n	800eba8 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800eb92:	68ba      	ldr	r2, [r7, #8]
 800eb94:	68fb      	ldr	r3, [r7, #12]
 800eb96:	4413      	add	r3, r2
 800eb98:	781b      	ldrb	r3, [r3, #0]
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d001      	beq.n	800eba2 <safe_read_bool+0x22>
            return true;
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e006      	b.n	800ebb0 <safe_read_bool+0x30>
 */
static bool safe_read_bool(const void *pSize)
{
    const char *p = (const char *)pSize;
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	3301      	adds	r3, #1
 800eba6:	60fb      	str	r3, [r7, #12]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d0f1      	beq.n	800eb92 <safe_read_bool+0x12>
    {
        if (p[i] != 0)
            return true;
    }
    return false;
 800ebae:	2300      	movs	r3, #0
}
 800ebb0:	4618      	mov	r0, r3
 800ebb2:	3714      	adds	r7, #20
 800ebb4:	46bd      	mov	sp, r7
 800ebb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebba:	4770      	bx	lr

0800ebbc <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b08c      	sub	sp, #48	; 0x30
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	6a1b      	ldr	r3, [r3, #32]
 800ebca:	881b      	ldrh	r3, [r3, #0]
 800ebcc:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 800ebce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ebd0:	2b00      	cmp	r3, #0
 800ebd2:	d101      	bne.n	800ebd8 <encode_array+0x1c>
        return true;
 800ebd4:	2301      	movs	r3, #1
 800ebd6:	e13e      	b.n	800ee56 <encode_array+0x29a>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	7d9b      	ldrb	r3, [r3, #22]
 800ebdc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ebe0:	2b80      	cmp	r3, #128	; 0x80
 800ebe2:	d010      	beq.n	800ec06 <encode_array+0x4a>
 800ebe4:	683b      	ldr	r3, [r7, #0]
 800ebe6:	8a9b      	ldrh	r3, [r3, #20]
 800ebe8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d90b      	bls.n	800ec06 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	691b      	ldr	r3, [r3, #16]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d002      	beq.n	800ebfc <encode_array+0x40>
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	691b      	ldr	r3, [r3, #16]
 800ebfa:	e000      	b.n	800ebfe <encode_array+0x42>
 800ebfc:	4b98      	ldr	r3, [pc, #608]	; (800ee60 <encode_array+0x2a4>)
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	6113      	str	r3, [r2, #16]
 800ec02:	2300      	movs	r3, #0
 800ec04:	e127      	b.n	800ee56 <encode_array+0x29a>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	7d9b      	ldrb	r3, [r3, #22]
 800ec0a:	f003 030f 	and.w	r3, r3, #15
 800ec0e:	2b05      	cmp	r3, #5
 800ec10:	f200 80b4 	bhi.w	800ed7c <encode_array+0x1c0>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800ec14:	683b      	ldr	r3, [r7, #0]
 800ec16:	8a1b      	ldrh	r3, [r3, #16]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	2102      	movs	r1, #2
 800ec1c:	461a      	mov	r2, r3
 800ec1e:	f000 fcdf 	bl	800f5e0 <pb_encode_tag>
 800ec22:	4603      	mov	r3, r0
 800ec24:	f083 0301 	eor.w	r3, r3, #1
 800ec28:	b2db      	uxtb	r3, r3
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d001      	beq.n	800ec32 <encode_array+0x76>
            return false;
 800ec2e:	2300      	movs	r3, #0
 800ec30:	e111      	b.n	800ee56 <encode_array+0x29a>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800ec32:	683b      	ldr	r3, [r7, #0]
 800ec34:	7d9b      	ldrb	r3, [r3, #22]
 800ec36:	f003 030f 	and.w	r3, r3, #15
 800ec3a:	2b04      	cmp	r3, #4
 800ec3c:	d103      	bne.n	800ec46 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800ec3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec44:	e049      	b.n	800ecda <encode_array+0x11e>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	7d9b      	ldrb	r3, [r3, #22]
 800ec4a:	f003 030f 	and.w	r3, r3, #15
 800ec4e:	2b05      	cmp	r3, #5
 800ec50:	d103      	bne.n	800ec5a <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800ec52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ec54:	00db      	lsls	r3, r3, #3
 800ec56:	62bb      	str	r3, [r7, #40]	; 0x28
 800ec58:	e03f      	b.n	800ecda <encode_array+0x11e>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	60bb      	str	r3, [r7, #8]
 800ec5e:	2300      	movs	r3, #0
 800ec60:	60fb      	str	r3, [r7, #12]
 800ec62:	2300      	movs	r3, #0
 800ec64:	613b      	str	r3, [r7, #16]
 800ec66:	2300      	movs	r3, #0
 800ec68:	617b      	str	r3, [r7, #20]
 800ec6a:	2300      	movs	r3, #0
 800ec6c:	61bb      	str	r3, [r7, #24]
            void *pData_orig = field->pData;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	69db      	ldr	r3, [r3, #28]
 800ec72:	623b      	str	r3, [r7, #32]
            for (i = 0; i < count; i++)
 800ec74:	2300      	movs	r3, #0
 800ec76:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ec78:	e026      	b.n	800ecc8 <encode_array+0x10c>
            {
                if (!pb_enc_varint(&sizestream, field))
 800ec7a:	f107 0308 	add.w	r3, r7, #8
 800ec7e:	4618      	mov	r0, r3
 800ec80:	6839      	ldr	r1, [r7, #0]
 800ec82:	f000 fde3 	bl	800f84c <pb_enc_varint>
 800ec86:	4603      	mov	r3, r0
 800ec88:	f083 0301 	eor.w	r3, r3, #1
 800ec8c:	b2db      	uxtb	r3, r3
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d010      	beq.n	800ecb4 <encode_array+0xf8>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	691b      	ldr	r3, [r3, #16]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d002      	beq.n	800eca0 <encode_array+0xe4>
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	691b      	ldr	r3, [r3, #16]
 800ec9e:	e005      	b.n	800ecac <encode_array+0xf0>
 800eca0:	69bb      	ldr	r3, [r7, #24]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d001      	beq.n	800ecaa <encode_array+0xee>
 800eca6:	69bb      	ldr	r3, [r7, #24]
 800eca8:	e000      	b.n	800ecac <encode_array+0xf0>
 800ecaa:	4b6e      	ldr	r3, [pc, #440]	; (800ee64 <encode_array+0x2a8>)
 800ecac:	687a      	ldr	r2, [r7, #4]
 800ecae:	6113      	str	r3, [r2, #16]
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	e0d0      	b.n	800ee56 <encode_array+0x29a>
                field->pData = (char*)field->pData + field->data_size;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	69db      	ldr	r3, [r3, #28]
 800ecb8:	683a      	ldr	r2, [r7, #0]
 800ecba:	8a52      	ldrh	r2, [r2, #18]
 800ecbc:	441a      	add	r2, r3
 800ecbe:	683b      	ldr	r3, [r7, #0]
 800ecc0:	61da      	str	r2, [r3, #28]
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
            void *pData_orig = field->pData;
            for (i = 0; i < count; i++)
 800ecc2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ecc4:	3301      	adds	r3, #1
 800ecc6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ecc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ecca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eccc:	429a      	cmp	r2, r3
 800ecce:	d3d4      	bcc.n	800ec7a <encode_array+0xbe>
            {
                if (!pb_enc_varint(&sizestream, field))
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
                field->pData = (char*)field->pData + field->data_size;
            }
            field->pData = pData_orig;
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	6a3a      	ldr	r2, [r7, #32]
 800ecd4:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800ecda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecdc:	461a      	mov	r2, r3
 800ecde:	f04f 0300 	mov.w	r3, #0
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f000 fc00 	bl	800f4e8 <pb_encode_varint>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f083 0301 	eor.w	r3, r3, #1
 800ecee:	b2db      	uxtb	r3, r3
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d001      	beq.n	800ecf8 <encode_array+0x13c>
            return false;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	e0ae      	b.n	800ee56 <encode_array+0x29a>
        
        if (stream->callback == NULL)
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d106      	bne.n	800ed0e <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800ed00:	6878      	ldr	r0, [r7, #4]
 800ed02:	2100      	movs	r1, #0
 800ed04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed06:	f7ff feeb 	bl	800eae0 <pb_write>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	e0a3      	b.n	800ee56 <encode_array+0x29a>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800ed0e:	2300      	movs	r3, #0
 800ed10:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed12:	e02e      	b.n	800ed72 <encode_array+0x1b6>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	7d9b      	ldrb	r3, [r3, #22]
 800ed18:	f003 030f 	and.w	r3, r3, #15
 800ed1c:	2b04      	cmp	r3, #4
 800ed1e:	d005      	beq.n	800ed2c <encode_array+0x170>
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	7d9b      	ldrb	r3, [r3, #22]
 800ed24:	f003 030f 	and.w	r3, r3, #15
 800ed28:	2b05      	cmp	r3, #5
 800ed2a:	d10c      	bne.n	800ed46 <encode_array+0x18a>
            {
                if (!pb_enc_fixed(stream, field))
 800ed2c:	6878      	ldr	r0, [r7, #4]
 800ed2e:	6839      	ldr	r1, [r7, #0]
 800ed30:	f000 fe40 	bl	800f9b4 <pb_enc_fixed>
 800ed34:	4603      	mov	r3, r0
 800ed36:	f083 0301 	eor.w	r3, r3, #1
 800ed3a:	b2db      	uxtb	r3, r3
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d001      	beq.n	800ed44 <encode_array+0x188>
                    return false;
 800ed40:	2300      	movs	r3, #0
 800ed42:	e088      	b.n	800ee56 <encode_array+0x29a>
        /* Write the data */
        for (i = 0; i < count; i++)
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
            {
                if (!pb_enc_fixed(stream, field))
 800ed44:	e00b      	b.n	800ed5e <encode_array+0x1a2>
                    return false;
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	6839      	ldr	r1, [r7, #0]
 800ed4a:	f000 fd7f 	bl	800f84c <pb_enc_varint>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	f083 0301 	eor.w	r3, r3, #1
 800ed54:	b2db      	uxtb	r3, r3
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d001      	beq.n	800ed5e <encode_array+0x1a2>
                    return false;
 800ed5a:	2300      	movs	r3, #0
 800ed5c:	e07b      	b.n	800ee56 <encode_array+0x29a>
            }

            field->pData = (char*)field->pData + field->data_size;
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	69db      	ldr	r3, [r3, #28]
 800ed62:	683a      	ldr	r2, [r7, #0]
 800ed64:	8a52      	ldrh	r2, [r2, #18]
 800ed66:	441a      	add	r2, r3
 800ed68:	683b      	ldr	r3, [r7, #0]
 800ed6a:	61da      	str	r2, [r3, #28]
        
        if (stream->callback == NULL)
            return pb_write(stream, NULL, size); /* Just sizing.. */
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800ed6c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ed6e:	3301      	adds	r3, #1
 800ed70:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed72:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ed74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d3cc      	bcc.n	800ed14 <encode_array+0x158>
 800ed7a:	e06b      	b.n	800ee54 <encode_array+0x298>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed80:	e064      	b.n	800ee4c <encode_array+0x290>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	7d9b      	ldrb	r3, [r3, #22]
 800ed86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ed8a:	2b80      	cmp	r3, #128	; 0x80
 800ed8c:	d148      	bne.n	800ee20 <encode_array+0x264>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ed8e:	683b      	ldr	r3, [r7, #0]
 800ed90:	7d9b      	ldrb	r3, [r3, #22]
 800ed92:	f003 030f 	and.w	r3, r3, #15
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ed96:	2b07      	cmp	r3, #7
 800ed98:	d005      	beq.n	800eda6 <encode_array+0x1ea>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800ed9a:	683b      	ldr	r3, [r7, #0]
 800ed9c:	7d9b      	ldrb	r3, [r3, #22]
 800ed9e:	f003 030f 	and.w	r3, r3, #15
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800eda2:	2b06      	cmp	r3, #6
 800eda4:	d13c      	bne.n	800ee20 <encode_array+0x264>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
                bool status;
                void *pData_orig = field->pData;
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	69db      	ldr	r3, [r3, #28]
 800edaa:	61fb      	str	r3, [r7, #28]
                field->pData = *(void* const*)field->pData;
 800edac:	683b      	ldr	r3, [r7, #0]
 800edae:	69db      	ldr	r3, [r3, #28]
 800edb0:	681a      	ldr	r2, [r3, #0]
 800edb2:	683b      	ldr	r3, [r7, #0]
 800edb4:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800edb6:	683b      	ldr	r3, [r7, #0]
 800edb8:	69db      	ldr	r3, [r3, #28]
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d11c      	bne.n	800edf8 <encode_array+0x23c>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800edbe:	6878      	ldr	r0, [r7, #4]
 800edc0:	6839      	ldr	r1, [r7, #0]
 800edc2:	f000 fc2f 	bl	800f624 <pb_encode_tag_for_field>
 800edc6:	4603      	mov	r3, r0
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d00b      	beq.n	800ede4 <encode_array+0x228>
                             pb_encode_varint(stream, 0);
 800edcc:	6878      	ldr	r0, [r7, #4]
 800edce:	f04f 0200 	mov.w	r2, #0
 800edd2:	f04f 0300 	mov.w	r3, #0
 800edd6:	f000 fb87 	bl	800f4e8 <pb_encode_varint>
 800edda:	4603      	mov	r3, r0
                field->pData = *(void* const*)field->pData;

                if (!field->pData)
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <encode_array+0x228>
 800ede0:	2301      	movs	r3, #1
 800ede2:	e000      	b.n	800ede6 <encode_array+0x22a>
 800ede4:	2300      	movs	r3, #0
 800ede6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800edee:	f003 0301 	and.w	r3, r3, #1
 800edf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800edf6:	e006      	b.n	800ee06 <encode_array+0x24a>
                             pb_encode_varint(stream, 0);
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	6839      	ldr	r1, [r7, #0]
 800edfc:	f000 f954 	bl	800f0a8 <encode_basic_field>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800ee06:	683b      	ldr	r3, [r7, #0]
 800ee08:	69fa      	ldr	r2, [r7, #28]
 800ee0a:	61da      	str	r2, [r3, #28]

                if (!status)
 800ee0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee10:	f083 0301 	eor.w	r3, r3, #1
 800ee14:	b2db      	uxtb	r3, r3
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d001      	beq.n	800ee1e <encode_array+0x262>
                    return false;
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	e01b      	b.n	800ee56 <encode_array+0x29a>
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
 800ee1e:	e00b      	b.n	800ee38 <encode_array+0x27c>
                if (!status)
                    return false;
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800ee20:	6878      	ldr	r0, [r7, #4]
 800ee22:	6839      	ldr	r1, [r7, #0]
 800ee24:	f000 f940 	bl	800f0a8 <encode_basic_field>
 800ee28:	4603      	mov	r3, r0
 800ee2a:	f083 0301 	eor.w	r3, r3, #1
 800ee2e:	b2db      	uxtb	r3, r3
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d001      	beq.n	800ee38 <encode_array+0x27c>
                    return false;
 800ee34:	2300      	movs	r3, #0
 800ee36:	e00e      	b.n	800ee56 <encode_array+0x29a>
            }
            field->pData = (char*)field->pData + field->data_size;
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	69db      	ldr	r3, [r3, #28]
 800ee3c:	683a      	ldr	r2, [r7, #0]
 800ee3e:	8a52      	ldrh	r2, [r2, #18]
 800ee40:	441a      	add	r2, r3
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	61da      	str	r2, [r3, #28]
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800ee46:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee48:	3301      	adds	r3, #1
 800ee4a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ee4c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee50:	429a      	cmp	r2, r3
 800ee52:	d396      	bcc.n	800ed82 <encode_array+0x1c6>
            }
            field->pData = (char*)field->pData + field->data_size;
        }
    }
    
    return true;
 800ee54:	2301      	movs	r3, #1
}
 800ee56:	4618      	mov	r0, r3
 800ee58:	3730      	adds	r7, #48	; 0x30
 800ee5a:	46bd      	mov	sp, r7
 800ee5c:	bd80      	pop	{r7, pc}
 800ee5e:	bf00      	nop
 800ee60:	08013fc4 	.word	0x08013fc4
 800ee64:	08013fdc 	.word	0x08013fdc

0800ee68 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b092      	sub	sp, #72	; 0x48
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	7d9b      	ldrb	r3, [r3, #22]
 800ee74:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800ee78:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ee7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	f040 80cb 	bne.w	800f01c <pb_check_proto3_default_value+0x1b4>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800ee86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ee8a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d101      	bne.n	800ee96 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800ee92:	2300      	movs	r3, #0
 800ee94:	e102      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800ee96:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ee9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee9e:	2b20      	cmp	r3, #32
 800eea0:	d108      	bne.n	800eeb4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	6a1b      	ldr	r3, [r3, #32]
 800eea6:	881b      	ldrh	r3, [r3, #0]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	bf0c      	ite	eq
 800eeac:	2301      	moveq	r3, #1
 800eeae:	2300      	movne	r3, #0
 800eeb0:	b2db      	uxtb	r3, r3
 800eeb2:	e0f3      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800eeb4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800eeb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eebc:	2b30      	cmp	r3, #48	; 0x30
 800eebe:	d108      	bne.n	800eed2 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	6a1b      	ldr	r3, [r3, #32]
 800eec4:	881b      	ldrh	r3, [r3, #0]
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	bf0c      	ite	eq
 800eeca:	2301      	moveq	r3, #1
 800eecc:	2300      	movne	r3, #0
 800eece:	b2db      	uxtb	r3, r3
 800eed0:	e0e4      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800eed2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800eed6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eeda:	2b10      	cmp	r3, #16
 800eedc:	d115      	bne.n	800ef0a <pb_check_proto3_default_value+0xa2>
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6a1b      	ldr	r3, [r3, #32]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d011      	beq.n	800ef0a <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	6a1b      	ldr	r3, [r3, #32]
 800eeea:	4618      	mov	r0, r3
 800eeec:	f7ff fe48 	bl	800eb80 <safe_read_bool>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	bf14      	ite	ne
 800eef6:	2301      	movne	r3, #1
 800eef8:	2300      	moveq	r3, #0
 800eefa:	b2db      	uxtb	r3, r3
 800eefc:	f083 0301 	eor.w	r3, r3, #1
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	f003 0301 	and.w	r3, r3, #1
 800ef06:	b2db      	uxtb	r3, r3
 800ef08:	e0c8      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->default_value)
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	d001      	beq.n	800ef18 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800ef14:	2300      	movs	r3, #0
 800ef16:	e0c1      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800ef18:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef1c:	f003 030f 	and.w	r3, r3, #15
 800ef20:	2b05      	cmp	r3, #5
 800ef22:	d81c      	bhi.n	800ef5e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	643b      	str	r3, [r7, #64]	; 0x40
            for (i = 0; i < field->data_size; i++)
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef30:	e00d      	b.n	800ef4e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 800ef32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ef38:	4413      	add	r3, r2
 800ef3a:	781b      	ldrb	r3, [r3, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d001      	beq.n	800ef44 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 800ef40:	2300      	movs	r3, #0
 800ef42:	e0ab      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
            for (i = 0; i < field->data_size; i++)
 800ef44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800ef48:	3301      	adds	r3, #1
 800ef4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8a5b      	ldrh	r3, [r3, #18]
 800ef52:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800ef56:	429a      	cmp	r2, r3
 800ef58:	d3eb      	bcc.n	800ef32 <pb_check_proto3_default_value+0xca>
                {
                    return false;
                }
            }

            return true;
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e09e      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800ef5e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef62:	f003 030f 	and.w	r3, r3, #15
 800ef66:	2b06      	cmp	r3, #6
 800ef68:	d10a      	bne.n	800ef80 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	69db      	ldr	r3, [r3, #28]
 800ef6e:	63fb      	str	r3, [r7, #60]	; 0x3c
            return bytes->size == 0;
 800ef70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef72:	881b      	ldrh	r3, [r3, #0]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	bf0c      	ite	eq
 800ef78:	2301      	moveq	r3, #1
 800ef7a:	2300      	movne	r3, #0
 800ef7c:	b2db      	uxtb	r3, r3
 800ef7e:	e08d      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800ef80:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef84:	f003 030f 	and.w	r3, r3, #15
 800ef88:	2b07      	cmp	r3, #7
 800ef8a:	d108      	bne.n	800ef9e <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	69db      	ldr	r3, [r3, #28]
 800ef90:	781b      	ldrb	r3, [r3, #0]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	bf0c      	ite	eq
 800ef96:	2301      	moveq	r3, #1
 800ef98:	2300      	movne	r3, #0
 800ef9a:	b2db      	uxtb	r3, r3
 800ef9c:	e07e      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800ef9e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800efa2:	f003 030f 	and.w	r3, r3, #15
 800efa6:	2b0b      	cmp	r3, #11
 800efa8:	d107      	bne.n	800efba <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	8a5b      	ldrh	r3, [r3, #18]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf0c      	ite	eq
 800efb2:	2301      	moveq	r3, #1
 800efb4:	2300      	movne	r3, #0
 800efb6:	b2db      	uxtb	r3, r3
 800efb8:	e070      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800efba:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800efbe:	f003 030f 	and.w	r3, r3, #15
 800efc2:	2b08      	cmp	r3, #8
 800efc4:	d005      	beq.n	800efd2 <pb_check_proto3_default_value+0x16a>
 800efc6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800efca:	f003 030f 	and.w	r3, r3, #15
 800efce:	2b09      	cmp	r3, #9
 800efd0:	d163      	bne.n	800f09a <pb_check_proto3_default_value+0x232>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	69db      	ldr	r3, [r3, #28]
 800efda:	f107 010c 	add.w	r1, r7, #12
 800efde:	4608      	mov	r0, r1
 800efe0:	4611      	mov	r1, r2
 800efe2:	461a      	mov	r2, r3
 800efe4:	f7ff fc7a 	bl	800e8dc <pb_field_iter_begin>
 800efe8:	4603      	mov	r3, r0
 800efea:	2b00      	cmp	r3, #0
 800efec:	d014      	beq.n	800f018 <pb_check_proto3_default_value+0x1b0>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800efee:	f107 030c 	add.w	r3, r7, #12
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff ff38 	bl	800ee68 <pb_check_proto3_default_value>
 800eff8:	4603      	mov	r3, r0
 800effa:	f083 0301 	eor.w	r3, r3, #1
 800effe:	b2db      	uxtb	r3, r3
 800f000:	2b00      	cmp	r3, #0
 800f002:	d001      	beq.n	800f008 <pb_check_proto3_default_value+0x1a0>
                    {
                        return false;
 800f004:	2300      	movs	r3, #0
 800f006:	e049      	b.n	800f09c <pb_check_proto3_default_value+0x234>
                    }
                } while (pb_field_iter_next(&iter));
 800f008:	f107 030c 	add.w	r3, r7, #12
 800f00c:	4618      	mov	r0, r3
 800f00e:	f7ff fcaf 	bl	800e970 <pb_field_iter_next>
 800f012:	4603      	mov	r3, r0
 800f014:	2b00      	cmp	r3, #0
 800f016:	d1ea      	bne.n	800efee <pb_check_proto3_default_value+0x186>
            }
            return true;
 800f018:	2301      	movs	r3, #1
 800f01a:	e03f      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800f01c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f020:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f024:	2b80      	cmp	r3, #128	; 0x80
 800f026:	d107      	bne.n	800f038 <pb_check_proto3_default_value+0x1d0>
    {
        return field->pData == NULL;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	bf0c      	ite	eq
 800f030:	2301      	moveq	r3, #1
 800f032:	2300      	movne	r3, #0
 800f034:	b2db      	uxtb	r3, r3
 800f036:	e031      	b.n	800f09c <pb_check_proto3_default_value+0x234>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800f038:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f03c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f040:	2b40      	cmp	r3, #64	; 0x40
 800f042:	d12a      	bne.n	800f09a <pb_check_proto3_default_value+0x232>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800f044:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f048:	f003 030f 	and.w	r3, r3, #15
 800f04c:	2b0a      	cmp	r3, #10
 800f04e:	d10a      	bne.n	800f066 <pb_check_proto3_default_value+0x1fe>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	69db      	ldr	r3, [r3, #28]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	63bb      	str	r3, [r7, #56]	; 0x38
            return extension == NULL;
 800f058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	bf0c      	ite	eq
 800f05e:	2301      	moveq	r3, #1
 800f060:	2300      	movne	r3, #0
 800f062:	b2db      	uxtb	r3, r3
 800f064:	e01a      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	68db      	ldr	r3, [r3, #12]
 800f06c:	4a0d      	ldr	r2, [pc, #52]	; (800f0a4 <pb_check_proto3_default_value+0x23c>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d10a      	bne.n	800f088 <pb_check_proto3_default_value+0x220>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	69db      	ldr	r3, [r3, #28]
 800f076:	637b      	str	r3, [r7, #52]	; 0x34
            return pCallback->funcs.encode == NULL;
 800f078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	bf0c      	ite	eq
 800f080:	2301      	moveq	r3, #1
 800f082:	2300      	movne	r3, #0
 800f084:	b2db      	uxtb	r3, r3
 800f086:	e009      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	bf0c      	ite	eq
 800f092:	2301      	moveq	r3, #1
 800f094:	2300      	movne	r3, #0
 800f096:	b2db      	uxtb	r3, r3
 800f098:	e000      	b.n	800f09c <pb_check_proto3_default_value+0x234>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800f09a:	2300      	movs	r3, #0
}
 800f09c:	4618      	mov	r0, r3
 800f09e:	3748      	adds	r7, #72	; 0x48
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	bd80      	pop	{r7, pc}
 800f0a4:	0800ea05 	.word	0x0800ea05

0800f0a8 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	69db      	ldr	r3, [r3, #28]
 800f0b6:	2b00      	cmp	r3, #0
 800f0b8:	d101      	bne.n	800f0be <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800f0ba:	2301      	movs	r3, #1
 800f0bc:	e061      	b.n	800f182 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800f0be:	6878      	ldr	r0, [r7, #4]
 800f0c0:	6839      	ldr	r1, [r7, #0]
 800f0c2:	f000 faaf 	bl	800f624 <pb_encode_tag_for_field>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	f083 0301 	eor.w	r3, r3, #1
 800f0cc:	b2db      	uxtb	r3, r3
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d001      	beq.n	800f0d6 <encode_basic_field+0x2e>
        return false;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	e055      	b.n	800f182 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	7d9b      	ldrb	r3, [r3, #22]
 800f0da:	f003 030f 	and.w	r3, r3, #15
 800f0de:	2b0b      	cmp	r3, #11
 800f0e0:	d844      	bhi.n	800f16c <encode_basic_field+0xc4>
 800f0e2:	a201      	add	r2, pc, #4	; (adr r2, 800f0e8 <encode_basic_field+0x40>)
 800f0e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e8:	0800f119 	.word	0x0800f119
 800f0ec:	0800f125 	.word	0x0800f125
 800f0f0:	0800f125 	.word	0x0800f125
 800f0f4:	0800f125 	.word	0x0800f125
 800f0f8:	0800f131 	.word	0x0800f131
 800f0fc:	0800f131 	.word	0x0800f131
 800f100:	0800f13d 	.word	0x0800f13d
 800f104:	0800f149 	.word	0x0800f149
 800f108:	0800f155 	.word	0x0800f155
 800f10c:	0800f155 	.word	0x0800f155
 800f110:	0800f16d 	.word	0x0800f16d
 800f114:	0800f161 	.word	0x0800f161
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800f118:	6878      	ldr	r0, [r7, #4]
 800f11a:	6839      	ldr	r1, [r7, #0]
 800f11c:	f000 fb7e 	bl	800f81c <pb_enc_bool>
 800f120:	4603      	mov	r3, r0
 800f122:	e02e      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800f124:	6878      	ldr	r0, [r7, #4]
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	f000 fb90 	bl	800f84c <pb_enc_varint>
 800f12c:	4603      	mov	r3, r0
 800f12e:	e028      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800f130:	6878      	ldr	r0, [r7, #4]
 800f132:	6839      	ldr	r1, [r7, #0]
 800f134:	f000 fc3e 	bl	800f9b4 <pb_enc_fixed>
 800f138:	4603      	mov	r3, r0
 800f13a:	e022      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800f13c:	6878      	ldr	r0, [r7, #4]
 800f13e:	6839      	ldr	r1, [r7, #0]
 800f140:	f000 fc66 	bl	800fa10 <pb_enc_bytes>
 800f144:	4603      	mov	r3, r0
 800f146:	e01c      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800f148:	6878      	ldr	r0, [r7, #4]
 800f14a:	6839      	ldr	r1, [r7, #0]
 800f14c:	f000 fc9e 	bl	800fa8c <pb_enc_string>
 800f150:	4603      	mov	r3, r0
 800f152:	e016      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	6839      	ldr	r1, [r7, #0]
 800f158:	f000 fcf6 	bl	800fb48 <pb_enc_submessage>
 800f15c:	4603      	mov	r3, r0
 800f15e:	e010      	b.n	800f182 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800f160:	6878      	ldr	r0, [r7, #4]
 800f162:	6839      	ldr	r1, [r7, #0]
 800f164:	f000 fd36 	bl	800fbd4 <pb_enc_fixed_length_bytes>
 800f168:	4603      	mov	r3, r0
 800f16a:	e00a      	b.n	800f182 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	691b      	ldr	r3, [r3, #16]
 800f170:	2b00      	cmp	r3, #0
 800f172:	d002      	beq.n	800f17a <encode_basic_field+0xd2>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	691b      	ldr	r3, [r3, #16]
 800f178:	e000      	b.n	800f17c <encode_basic_field+0xd4>
 800f17a:	4b04      	ldr	r3, [pc, #16]	; (800f18c <encode_basic_field+0xe4>)
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	6113      	str	r3, [r2, #16]
 800f180:	2300      	movs	r3, #0
    }
}
 800f182:	4618      	mov	r0, r3
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
 800f18a:	bf00      	nop
 800f18c:	08013fe4 	.word	0x08013fe4

0800f190 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b082      	sub	sp, #8
 800f194:	af00      	add	r7, sp, #0
 800f196:	6078      	str	r0, [r7, #4]
 800f198:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800f19a:	683b      	ldr	r3, [r7, #0]
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d018      	beq.n	800f1d6 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800f1a4:	683b      	ldr	r3, [r7, #0]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	68db      	ldr	r3, [r3, #12]
 800f1aa:	2000      	movs	r0, #0
 800f1ac:	6879      	ldr	r1, [r7, #4]
 800f1ae:	683a      	ldr	r2, [r7, #0]
 800f1b0:	4798      	blx	r3
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f083 0301 	eor.w	r3, r3, #1
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d00b      	beq.n	800f1d6 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d002      	beq.n	800f1cc <encode_callback_field+0x3c>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	691b      	ldr	r3, [r3, #16]
 800f1ca:	e000      	b.n	800f1ce <encode_callback_field+0x3e>
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <encode_callback_field+0x50>)
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	6113      	str	r3, [r2, #16]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	e000      	b.n	800f1d8 <encode_callback_field+0x48>
    }
    return true;
 800f1d6:	2301      	movs	r3, #1
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	3708      	adds	r7, #8
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	bd80      	pop	{r7, pc}
 800f1e0:	08013ff8 	.word	0x08013ff8

0800f1e4 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b082      	sub	sp, #8
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	7d9b      	ldrb	r3, [r3, #22]
 800f1f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f1f6:	2b30      	cmp	r3, #48	; 0x30
 800f1f8:	d108      	bne.n	800f20c <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	6a1b      	ldr	r3, [r3, #32]
 800f1fe:	881a      	ldrh	r2, [r3, #0]
 800f200:	683b      	ldr	r3, [r7, #0]
 800f202:	8a1b      	ldrh	r3, [r3, #16]
 800f204:	429a      	cmp	r2, r3
 800f206:	d026      	beq.n	800f256 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800f208:	2301      	movs	r3, #1
 800f20a:	e059      	b.n	800f2c0 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f20c:	683b      	ldr	r3, [r7, #0]
 800f20e:	7d9b      	ldrb	r3, [r3, #22]
 800f210:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f214:	2b10      	cmp	r3, #16
 800f216:	d11e      	bne.n	800f256 <encode_field+0x72>
    {
        if (field->pSize)
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	6a1b      	ldr	r3, [r3, #32]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d00c      	beq.n	800f23a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	6a1b      	ldr	r3, [r3, #32]
 800f224:	4618      	mov	r0, r3
 800f226:	f7ff fcab 	bl	800eb80 <safe_read_bool>
 800f22a:	4603      	mov	r3, r0
 800f22c:	f083 0301 	eor.w	r3, r3, #1
 800f230:	b2db      	uxtb	r3, r3
 800f232:	2b00      	cmp	r3, #0
 800f234:	d00f      	beq.n	800f256 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800f236:	2301      	movs	r3, #1
 800f238:	e042      	b.n	800f2c0 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800f23a:	683b      	ldr	r3, [r7, #0]
 800f23c:	7d9b      	ldrb	r3, [r3, #22]
 800f23e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f242:	2b00      	cmp	r3, #0
 800f244:	d107      	bne.n	800f256 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800f246:	6838      	ldr	r0, [r7, #0]
 800f248:	f7ff fe0e 	bl	800ee68 <pb_check_proto3_default_value>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d001      	beq.n	800f256 <encode_field+0x72>
                return true;
 800f252:	2301      	movs	r3, #1
 800f254:	e034      	b.n	800f2c0 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800f256:	683b      	ldr	r3, [r7, #0]
 800f258:	69db      	ldr	r3, [r3, #28]
 800f25a:	2b00      	cmp	r3, #0
 800f25c:	d113      	bne.n	800f286 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	7d9b      	ldrb	r3, [r3, #22]
 800f262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f266:	2b00      	cmp	r3, #0
 800f268:	d10b      	bne.n	800f282 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d002      	beq.n	800f278 <encode_field+0x94>
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	691b      	ldr	r3, [r3, #16]
 800f276:	e000      	b.n	800f27a <encode_field+0x96>
 800f278:	4b13      	ldr	r3, [pc, #76]	; (800f2c8 <encode_field+0xe4>)
 800f27a:	687a      	ldr	r2, [r7, #4]
 800f27c:	6113      	str	r3, [r2, #16]
 800f27e:	2300      	movs	r3, #0
 800f280:	e01e      	b.n	800f2c0 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800f282:	2301      	movs	r3, #1
 800f284:	e01c      	b.n	800f2c0 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	7d9b      	ldrb	r3, [r3, #22]
 800f28a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f28e:	2b40      	cmp	r3, #64	; 0x40
 800f290:	d105      	bne.n	800f29e <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800f292:	6878      	ldr	r0, [r7, #4]
 800f294:	6839      	ldr	r1, [r7, #0]
 800f296:	f7ff ff7b 	bl	800f190 <encode_callback_field>
 800f29a:	4603      	mov	r3, r0
 800f29c:	e010      	b.n	800f2c0 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800f29e:	683b      	ldr	r3, [r7, #0]
 800f2a0:	7d9b      	ldrb	r3, [r3, #22]
 800f2a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f2a6:	2b20      	cmp	r3, #32
 800f2a8:	d105      	bne.n	800f2b6 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	6839      	ldr	r1, [r7, #0]
 800f2ae:	f7ff fc85 	bl	800ebbc <encode_array>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	e004      	b.n	800f2c0 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	6839      	ldr	r1, [r7, #0]
 800f2ba:	f7ff fef5 	bl	800f0a8 <encode_basic_field>
 800f2be:	4603      	mov	r3, r0
    }
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}
 800f2c8:	08014008 	.word	0x08014008

0800f2cc <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800f2cc:	b580      	push	{r7, lr}
 800f2ce:	b08c      	sub	sp, #48	; 0x30
 800f2d0:	af00      	add	r7, sp, #0
 800f2d2:	6078      	str	r0, [r7, #4]
 800f2d4:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800f2d6:	f107 0308 	add.w	r3, r7, #8
 800f2da:	4618      	mov	r0, r3
 800f2dc:	6839      	ldr	r1, [r7, #0]
 800f2de:	f7ff fb7f 	bl	800e9e0 <pb_field_iter_begin_extension_const>
 800f2e2:	4603      	mov	r3, r0
 800f2e4:	f083 0301 	eor.w	r3, r3, #1
 800f2e8:	b2db      	uxtb	r3, r3
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00b      	beq.n	800f306 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	691b      	ldr	r3, [r3, #16]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d002      	beq.n	800f2fc <default_extension_encoder+0x30>
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	e000      	b.n	800f2fe <default_extension_encoder+0x32>
 800f2fc:	4b07      	ldr	r3, [pc, #28]	; (800f31c <default_extension_encoder+0x50>)
 800f2fe:	687a      	ldr	r2, [r7, #4]
 800f300:	6113      	str	r3, [r2, #16]
 800f302:	2300      	movs	r3, #0
 800f304:	e006      	b.n	800f314 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800f306:	f107 0308 	add.w	r3, r7, #8
 800f30a:	6878      	ldr	r0, [r7, #4]
 800f30c:	4619      	mov	r1, r3
 800f30e:	f7ff ff69 	bl	800f1e4 <encode_field>
 800f312:	4603      	mov	r3, r0
}
 800f314:	4618      	mov	r0, r3
 800f316:	3730      	adds	r7, #48	; 0x30
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}
 800f31c:	08014020 	.word	0x08014020

0800f320 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f32a:	683b      	ldr	r3, [r7, #0]
 800f32c:	69db      	ldr	r3, [r3, #28]
 800f32e:	681b      	ldr	r3, [r3, #0]
 800f330:	60fb      	str	r3, [r7, #12]

    while (extension)
 800f332:	e01e      	b.n	800f372 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	685b      	ldr	r3, [r3, #4]
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d008      	beq.n	800f350 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	685b      	ldr	r3, [r3, #4]
 800f344:	6878      	ldr	r0, [r7, #4]
 800f346:	68f9      	ldr	r1, [r7, #12]
 800f348:	4798      	blx	r3
 800f34a:	4603      	mov	r3, r0
 800f34c:	72fb      	strb	r3, [r7, #11]
 800f34e:	e005      	b.n	800f35c <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800f350:	6878      	ldr	r0, [r7, #4]
 800f352:	68f9      	ldr	r1, [r7, #12]
 800f354:	f7ff ffba 	bl	800f2cc <default_extension_encoder>
 800f358:	4603      	mov	r3, r0
 800f35a:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800f35c:	7afb      	ldrb	r3, [r7, #11]
 800f35e:	f083 0301 	eor.w	r3, r3, #1
 800f362:	b2db      	uxtb	r3, r3
 800f364:	2b00      	cmp	r3, #0
 800f366:	d001      	beq.n	800f36c <encode_extension_field+0x4c>
            return false;
 800f368:	2300      	movs	r3, #0
 800f36a:	e006      	b.n	800f37a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	689b      	ldr	r3, [r3, #8]
 800f370:	60fb      	str	r3, [r7, #12]
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;

    while (extension)
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	2b00      	cmp	r3, #0
 800f376:	d1dd      	bne.n	800f334 <encode_extension_field+0x14>
            return false;
        
        extension = extension->next;
    }
    
    return true;
 800f378:	2301      	movs	r3, #1
}
 800f37a:	4618      	mov	r0, r3
 800f37c:	3710      	adds	r7, #16
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}
 800f382:	bf00      	nop

0800f384 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b08e      	sub	sp, #56	; 0x38
 800f388:	af00      	add	r7, sp, #0
 800f38a:	60f8      	str	r0, [r7, #12]
 800f38c:	60b9      	str	r1, [r7, #8]
 800f38e:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800f390:	f107 0310 	add.w	r3, r7, #16
 800f394:	4618      	mov	r0, r3
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	687a      	ldr	r2, [r7, #4]
 800f39a:	f7ff fb0d 	bl	800e9b8 <pb_field_iter_begin_const>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	f083 0301 	eor.w	r3, r3, #1
 800f3a4:	b2db      	uxtb	r3, r3
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d001      	beq.n	800f3ae <pb_encode+0x2a>
        return true; /* Empty message type */
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e02a      	b.n	800f404 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800f3ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f3b2:	f003 030f 	and.w	r3, r3, #15
 800f3b6:	2b0a      	cmp	r3, #10
 800f3b8:	d10d      	bne.n	800f3d6 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800f3ba:	f107 0310 	add.w	r3, r7, #16
 800f3be:	68f8      	ldr	r0, [r7, #12]
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	f7ff ffad 	bl	800f320 <encode_extension_field>
 800f3c6:	4603      	mov	r3, r0
 800f3c8:	f083 0301 	eor.w	r3, r3, #1
 800f3cc:	b2db      	uxtb	r3, r3
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00f      	beq.n	800f3f2 <pb_encode+0x6e>
                return false;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	e016      	b.n	800f404 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800f3d6:	f107 0310 	add.w	r3, r7, #16
 800f3da:	68f8      	ldr	r0, [r7, #12]
 800f3dc:	4619      	mov	r1, r3
 800f3de:	f7ff ff01 	bl	800f1e4 <encode_field>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	f083 0301 	eor.w	r3, r3, #1
 800f3e8:	b2db      	uxtb	r3, r3
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d001      	beq.n	800f3f2 <pb_encode+0x6e>
                return false;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e008      	b.n	800f404 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800f3f2:	f107 0310 	add.w	r3, r7, #16
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7ff faba 	bl	800e970 <pb_field_iter_next>
 800f3fc:	4603      	mov	r3, r0
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d1d5      	bne.n	800f3ae <pb_encode+0x2a>
    
    return true;
 800f402:	2301      	movs	r3, #1
}
 800f404:	4618      	mov	r0, r3
 800f406:	3738      	adds	r7, #56	; 0x38
 800f408:	46bd      	mov	sp, r7
 800f40a:	bd80      	pop	{r7, pc}

0800f40c <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b088      	sub	sp, #32
 800f410:	af00      	add	r7, sp, #0
 800f412:	60f8      	str	r0, [r7, #12]
 800f414:	60b9      	str	r1, [r7, #8]
 800f416:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800f418:	2300      	movs	r3, #0
 800f41a:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f424:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800f426:	68bb      	ldr	r3, [r7, #8]
 800f428:	09db      	lsrs	r3, r3, #7
 800f42a:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800f42c:	e014      	b.n	800f458 <pb_encode_varint_32+0x4c>
    {
        byte |= 0x80;
 800f42e:	7efb      	ldrb	r3, [r7, #27]
 800f430:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f434:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	1c5a      	adds	r2, r3, #1
 800f43a:	61fa      	str	r2, [r7, #28]
 800f43c:	f107 0220 	add.w	r2, r7, #32
 800f440:	4413      	add	r3, r2
 800f442:	7efa      	ldrb	r2, [r7, #27]
 800f444:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 800f448:	68bb      	ldr	r3, [r7, #8]
 800f44a:	b2db      	uxtb	r3, r3
 800f44c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f450:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800f452:	68bb      	ldr	r3, [r7, #8]
 800f454:	09db      	lsrs	r3, r3, #7
 800f456:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
    low >>= 7;

    while (i < 4 && (low != 0 || high != 0))
 800f458:	69fb      	ldr	r3, [r7, #28]
 800f45a:	2b03      	cmp	r3, #3
 800f45c:	d805      	bhi.n	800f46a <pb_encode_varint_32+0x5e>
 800f45e:	68bb      	ldr	r3, [r7, #8]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1e4      	bne.n	800f42e <pb_encode_varint_32+0x22>
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d1e1      	bne.n	800f42e <pb_encode_varint_32+0x22>
        buffer[i++] = byte;
        byte = (pb_byte_t)(low & 0x7F);
        low >>= 7;
    }

    if (high)
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d025      	beq.n	800f4bc <pb_encode_varint_32+0xb0>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	b2db      	uxtb	r3, r3
 800f474:	f003 0307 	and.w	r3, r3, #7
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	011b      	lsls	r3, r3, #4
 800f47c:	b2da      	uxtb	r2, r3
 800f47e:	7efb      	ldrb	r3, [r7, #27]
 800f480:	4313      	orrs	r3, r2
 800f482:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	08db      	lsrs	r3, r3, #3
 800f488:	607b      	str	r3, [r7, #4]

        while (high)
 800f48a:	e014      	b.n	800f4b6 <pb_encode_varint_32+0xaa>
        {
            byte |= 0x80;
 800f48c:	7efb      	ldrb	r3, [r7, #27]
 800f48e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f492:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 800f494:	69fb      	ldr	r3, [r7, #28]
 800f496:	1c5a      	adds	r2, r3, #1
 800f498:	61fa      	str	r2, [r7, #28]
 800f49a:	f107 0220 	add.w	r2, r7, #32
 800f49e:	4413      	add	r3, r2
 800f4a0:	7efa      	ldrb	r2, [r7, #27]
 800f4a2:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	b2db      	uxtb	r3, r3
 800f4aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f4ae:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	09db      	lsrs	r3, r3, #7
 800f4b4:	607b      	str	r3, [r7, #4]
    if (high)
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
        high >>= 3;

        while (high)
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d1e7      	bne.n	800f48c <pb_encode_varint_32+0x80>
            byte = (pb_byte_t)(high & 0x7F);
            high >>= 7;
        }
    }

    buffer[i++] = byte;
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	1c5a      	adds	r2, r3, #1
 800f4c0:	61fa      	str	r2, [r7, #28]
 800f4c2:	f107 0220 	add.w	r2, r7, #32
 800f4c6:	4413      	add	r3, r2
 800f4c8:	7efa      	ldrb	r2, [r7, #27]
 800f4ca:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800f4ce:	f107 0310 	add.w	r3, r7, #16
 800f4d2:	68f8      	ldr	r0, [r7, #12]
 800f4d4:	4619      	mov	r1, r3
 800f4d6:	69fa      	ldr	r2, [r7, #28]
 800f4d8:	f7ff fb02 	bl	800eae0 <pb_write>
 800f4dc:	4603      	mov	r3, r0
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3720      	adds	r7, #32
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop

0800f4e8 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800f4e8:	b5b0      	push	{r4, r5, r7, lr}
 800f4ea:	b086      	sub	sp, #24
 800f4ec:	af00      	add	r7, sp, #0
 800f4ee:	60f8      	str	r0, [r7, #12]
 800f4f0:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800f4f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	bf08      	it	eq
 800f4fc:	2a80      	cmpeq	r2, #128	; 0x80
 800f4fe:	d20a      	bcs.n	800f516 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800f500:	783b      	ldrb	r3, [r7, #0]
 800f502:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800f504:	f107 0317 	add.w	r3, r7, #23
 800f508:	68f8      	ldr	r0, [r7, #12]
 800f50a:	4619      	mov	r1, r3
 800f50c:	2201      	movs	r2, #1
 800f50e:	f7ff fae7 	bl	800eae0 <pb_write>
 800f512:	4603      	mov	r3, r0
 800f514:	e00a      	b.n	800f52c <pb_encode_varint+0x44>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800f516:	6839      	ldr	r1, [r7, #0]
 800f518:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f51c:	001c      	movs	r4, r3
 800f51e:	2500      	movs	r5, #0
 800f520:	4623      	mov	r3, r4
 800f522:	68f8      	ldr	r0, [r7, #12]
 800f524:	461a      	mov	r2, r3
 800f526:	f7ff ff71 	bl	800f40c <pb_encode_varint_32>
 800f52a:	4603      	mov	r3, r0
#endif
    }
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3718      	adds	r7, #24
 800f530:	46bd      	mov	sp, r7
 800f532:	bdb0      	pop	{r4, r5, r7, pc}

0800f534 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b088      	sub	sp, #32
 800f538:	af00      	add	r7, sp, #0
 800f53a:	60f8      	str	r0, [r7, #12]
 800f53c:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800f540:	f04f 32ff 	mov.w	r2, #4294967295
 800f544:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (value < 0)
 800f54c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f550:	2a00      	cmp	r2, #0
 800f552:	f173 0300 	sbcs.w	r3, r3, #0
 800f556:	da11      	bge.n	800f57c <pb_encode_svarint+0x48>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800f558:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f55c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f560:	ea02 0200 	and.w	r2, r2, r0
 800f564:	ea03 0301 	and.w	r3, r3, r1
 800f568:	1892      	adds	r2, r2, r2
 800f56a:	eb43 0303 	adc.w	r3, r3, r3
 800f56e:	ea6f 0202 	mvn.w	r2, r2
 800f572:	ea6f 0303 	mvn.w	r3, r3
 800f576:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800f57a:	e006      	b.n	800f58a <pb_encode_svarint+0x56>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800f57c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f580:	1892      	adds	r2, r2, r2
 800f582:	eb43 0303 	adc.w	r3, r3, r3
 800f586:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    return pb_encode_varint(stream, zigzagged);
 800f58a:	68f8      	ldr	r0, [r7, #12]
 800f58c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f590:	f7ff ffaa 	bl	800f4e8 <pb_encode_varint>
 800f594:	4603      	mov	r3, r0
}
 800f596:	4618      	mov	r0, r3
 800f598:	3720      	adds	r7, #32
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop

0800f5a0 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800f5a0:	b580      	push	{r7, lr}
 800f5a2:	b082      	sub	sp, #8
 800f5a4:	af00      	add	r7, sp, #0
 800f5a6:	6078      	str	r0, [r7, #4]
 800f5a8:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800f5aa:	6878      	ldr	r0, [r7, #4]
 800f5ac:	6839      	ldr	r1, [r7, #0]
 800f5ae:	2204      	movs	r2, #4
 800f5b0:	f7ff fa96 	bl	800eae0 <pb_write>
 800f5b4:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3708      	adds	r7, #8
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}
 800f5be:	bf00      	nop

0800f5c0 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800f5c0:	b580      	push	{r7, lr}
 800f5c2:	b082      	sub	sp, #8
 800f5c4:	af00      	add	r7, sp, #0
 800f5c6:	6078      	str	r0, [r7, #4]
 800f5c8:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	6839      	ldr	r1, [r7, #0]
 800f5ce:	2208      	movs	r2, #8
 800f5d0:	f7ff fa86 	bl	800eae0 <pb_write>
 800f5d4:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	3708      	adds	r7, #8
 800f5da:	46bd      	mov	sp, r7
 800f5dc:	bd80      	pop	{r7, pc}
 800f5de:	bf00      	nop

0800f5e0 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800f5e0:	b5b0      	push	{r4, r5, r7, lr}
 800f5e2:	b086      	sub	sp, #24
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	607a      	str	r2, [r7, #4]
 800f5ec:	72fb      	strb	r3, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	461a      	mov	r2, r3
 800f5f2:	f04f 0300 	mov.w	r3, #0
 800f5f6:	00dd      	lsls	r5, r3, #3
 800f5f8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f5fc:	00d4      	lsls	r4, r2, #3
 800f5fe:	7afa      	ldrb	r2, [r7, #11]
 800f600:	f04f 0300 	mov.w	r3, #0
 800f604:	ea42 0204 	orr.w	r2, r2, r4
 800f608:	ea43 0305 	orr.w	r3, r3, r5
 800f60c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return pb_encode_varint(stream, tag);
 800f610:	68f8      	ldr	r0, [r7, #12]
 800f612:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f616:	f7ff ff67 	bl	800f4e8 <pb_encode_varint>
 800f61a:	4603      	mov	r3, r0
}
 800f61c:	4618      	mov	r0, r3
 800f61e:	3718      	adds	r7, #24
 800f620:	46bd      	mov	sp, r7
 800f622:	bdb0      	pop	{r4, r5, r7, pc}

0800f624 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800f624:	b580      	push	{r7, lr}
 800f626:	b084      	sub	sp, #16
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	7d9b      	ldrb	r3, [r3, #22]
 800f632:	f003 030f 	and.w	r3, r3, #15
 800f636:	2b0b      	cmp	r3, #11
 800f638:	d826      	bhi.n	800f688 <pb_encode_tag_for_field+0x64>
 800f63a:	a201      	add	r2, pc, #4	; (adr r2, 800f640 <pb_encode_tag_for_field+0x1c>)
 800f63c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f640:	0800f671 	.word	0x0800f671
 800f644:	0800f671 	.word	0x0800f671
 800f648:	0800f671 	.word	0x0800f671
 800f64c:	0800f671 	.word	0x0800f671
 800f650:	0800f677 	.word	0x0800f677
 800f654:	0800f67d 	.word	0x0800f67d
 800f658:	0800f683 	.word	0x0800f683
 800f65c:	0800f683 	.word	0x0800f683
 800f660:	0800f683 	.word	0x0800f683
 800f664:	0800f683 	.word	0x0800f683
 800f668:	0800f689 	.word	0x0800f689
 800f66c:	0800f683 	.word	0x0800f683
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800f670:	2300      	movs	r3, #0
 800f672:	73fb      	strb	r3, [r7, #15]
            break;
 800f674:	e014      	b.n	800f6a0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800f676:	2305      	movs	r3, #5
 800f678:	73fb      	strb	r3, [r7, #15]
            break;
 800f67a:	e011      	b.n	800f6a0 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800f67c:	2301      	movs	r3, #1
 800f67e:	73fb      	strb	r3, [r7, #15]
            break;
 800f680:	e00e      	b.n	800f6a0 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800f682:	2302      	movs	r3, #2
 800f684:	73fb      	strb	r3, [r7, #15]
            break;
 800f686:	e00b      	b.n	800f6a0 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	691b      	ldr	r3, [r3, #16]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d002      	beq.n	800f696 <pb_encode_tag_for_field+0x72>
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	691b      	ldr	r3, [r3, #16]
 800f694:	e000      	b.n	800f698 <pb_encode_tag_for_field+0x74>
 800f696:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <pb_encode_tag_for_field+0x98>)
 800f698:	687a      	ldr	r2, [r7, #4]
 800f69a:	6113      	str	r3, [r2, #16]
 800f69c:	2300      	movs	r3, #0
 800f69e:	e008      	b.n	800f6b2 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800f6a0:	683b      	ldr	r3, [r7, #0]
 800f6a2:	8a1b      	ldrh	r3, [r3, #16]
 800f6a4:	461a      	mov	r2, r3
 800f6a6:	7bfb      	ldrb	r3, [r7, #15]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	4619      	mov	r1, r3
 800f6ac:	f7ff ff98 	bl	800f5e0 <pb_encode_tag>
 800f6b0:	4603      	mov	r3, r0
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3710      	adds	r7, #16
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	08013fe4 	.word	0x08013fe4

0800f6c0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	60b9      	str	r1, [r7, #8]
 800f6ca:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	f04f 0300 	mov.w	r3, #0
 800f6d4:	68f8      	ldr	r0, [r7, #12]
 800f6d6:	f7ff ff07 	bl	800f4e8 <pb_encode_varint>
 800f6da:	4603      	mov	r3, r0
 800f6dc:	f083 0301 	eor.w	r3, r3, #1
 800f6e0:	b2db      	uxtb	r3, r3
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d001      	beq.n	800f6ea <pb_encode_string+0x2a>
        return false;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	e005      	b.n	800f6f6 <pb_encode_string+0x36>
    
    return pb_write(stream, buffer, size);
 800f6ea:	68f8      	ldr	r0, [r7, #12]
 800f6ec:	68b9      	ldr	r1, [r7, #8]
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	f7ff f9f6 	bl	800eae0 <pb_write>
 800f6f4:	4603      	mov	r3, r0
}
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3710      	adds	r7, #16
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop

0800f700 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f700:	b580      	push	{r7, lr}
 800f702:	b08c      	sub	sp, #48	; 0x30
 800f704:	af00      	add	r7, sp, #0
 800f706:	60f8      	str	r0, [r7, #12]
 800f708:	60b9      	str	r1, [r7, #8]
 800f70a:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800f70c:	2300      	movs	r3, #0
 800f70e:	617b      	str	r3, [r7, #20]
 800f710:	2300      	movs	r3, #0
 800f712:	61bb      	str	r3, [r7, #24]
 800f714:	2300      	movs	r3, #0
 800f716:	61fb      	str	r3, [r7, #28]
 800f718:	2300      	movs	r3, #0
 800f71a:	623b      	str	r3, [r7, #32]
 800f71c:	2300      	movs	r3, #0
 800f71e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800f720:	f107 0314 	add.w	r3, r7, #20
 800f724:	4618      	mov	r0, r3
 800f726:	68b9      	ldr	r1, [r7, #8]
 800f728:	687a      	ldr	r2, [r7, #4]
 800f72a:	f7ff fe2b 	bl	800f384 <pb_encode>
 800f72e:	4603      	mov	r3, r0
 800f730:	f083 0301 	eor.w	r3, r3, #1
 800f734:	b2db      	uxtb	r3, r3
 800f736:	2b00      	cmp	r3, #0
 800f738:	d004      	beq.n	800f744 <pb_encode_submessage+0x44>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800f73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800f740:	2300      	movs	r3, #0
 800f742:	e063      	b.n	800f80c <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800f744:	6a3b      	ldr	r3, [r7, #32]
 800f746:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f74a:	461a      	mov	r2, r3
 800f74c:	f04f 0300 	mov.w	r3, #0
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fec9 	bl	800f4e8 <pb_encode_varint>
 800f756:	4603      	mov	r3, r0
 800f758:	f083 0301 	eor.w	r3, r3, #1
 800f75c:	b2db      	uxtb	r3, r3
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d001      	beq.n	800f766 <pb_encode_submessage+0x66>
        return false;
 800f762:	2300      	movs	r3, #0
 800f764:	e052      	b.n	800f80c <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800f766:	68fb      	ldr	r3, [r7, #12]
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d106      	bne.n	800f77c <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800f76e:	68f8      	ldr	r0, [r7, #12]
 800f770:	2100      	movs	r1, #0
 800f772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f774:	f7ff f9b4 	bl	800eae0 <pb_write>
 800f778:	4603      	mov	r3, r0
 800f77a:	e047      	b.n	800f80c <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800f77c:	68fb      	ldr	r3, [r7, #12]
 800f77e:	68da      	ldr	r2, [r3, #12]
 800f780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f782:	441a      	add	r2, r3
 800f784:	68fb      	ldr	r3, [r7, #12]
 800f786:	689b      	ldr	r3, [r3, #8]
 800f788:	429a      	cmp	r2, r3
 800f78a:	d90b      	bls.n	800f7a4 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800f78c:	68fb      	ldr	r3, [r7, #12]
 800f78e:	691b      	ldr	r3, [r3, #16]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d002      	beq.n	800f79a <pb_encode_submessage+0x9a>
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	691b      	ldr	r3, [r3, #16]
 800f798:	e000      	b.n	800f79c <pb_encode_submessage+0x9c>
 800f79a:	4b1e      	ldr	r3, [pc, #120]	; (800f814 <pb_encode_submessage+0x114>)
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	6113      	str	r3, [r2, #16]
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	e033      	b.n	800f80c <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800f7b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7b2:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800f7bc:	f107 0314 	add.w	r3, r7, #20
 800f7c0:	4618      	mov	r0, r3
 800f7c2:	68b9      	ldr	r1, [r7, #8]
 800f7c4:	687a      	ldr	r2, [r7, #4]
 800f7c6:	f7ff fddd 	bl	800f384 <pb_encode>
 800f7ca:	4603      	mov	r3, r0
 800f7cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	68da      	ldr	r2, [r3, #12]
 800f7d4:	6a3b      	ldr	r3, [r7, #32]
 800f7d6:	441a      	add	r2, r3
 800f7d8:	68fb      	ldr	r3, [r7, #12]
 800f7da:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800f7dc:	69ba      	ldr	r2, [r7, #24]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800f7e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800f7e8:	6a3a      	ldr	r2, [r7, #32]
 800f7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d00b      	beq.n	800f808 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	691b      	ldr	r3, [r3, #16]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d002      	beq.n	800f7fe <pb_encode_submessage+0xfe>
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	691b      	ldr	r3, [r3, #16]
 800f7fc:	e000      	b.n	800f800 <pb_encode_submessage+0x100>
 800f7fe:	4b06      	ldr	r3, [pc, #24]	; (800f818 <pb_encode_submessage+0x118>)
 800f800:	68fa      	ldr	r2, [r7, #12]
 800f802:	6113      	str	r3, [r2, #16]
 800f804:	2300      	movs	r3, #0
 800f806:	e001      	b.n	800f80c <pb_encode_submessage+0x10c>
    
    return status;
 800f808:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3730      	adds	r7, #48	; 0x30
 800f810:	46bd      	mov	sp, r7
 800f812:	bd80      	pop	{r7, pc}
 800f814:	08013fac 	.word	0x08013fac
 800f818:	08014034 	.word	0x08014034

0800f81c <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f81c:	b580      	push	{r7, lr}
 800f81e:	b084      	sub	sp, #16
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
 800f824:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800f826:	683b      	ldr	r3, [r7, #0]
 800f828:	69db      	ldr	r3, [r3, #28]
 800f82a:	4618      	mov	r0, r3
 800f82c:	f7ff f9a8 	bl	800eb80 <safe_read_bool>
 800f830:	4603      	mov	r3, r0
 800f832:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	461a      	mov	r2, r3
 800f838:	f04f 0300 	mov.w	r3, #0
 800f83c:	6878      	ldr	r0, [r7, #4]
 800f83e:	f7ff fe53 	bl	800f4e8 <pb_encode_varint>
 800f842:	4603      	mov	r3, r0
}
 800f844:	4618      	mov	r0, r3
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b086      	sub	sp, #24
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
 800f854:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800f856:	683b      	ldr	r3, [r7, #0]
 800f858:	7d9b      	ldrb	r3, [r3, #22]
 800f85a:	f003 030f 	and.w	r3, r3, #15
 800f85e:	2b02      	cmp	r3, #2
 800f860:	d14a      	bne.n	800f8f8 <pb_enc_varint+0xac>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 800f862:	f04f 0200 	mov.w	r2, #0
 800f866:	f04f 0300 	mov.w	r3, #0
 800f86a:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (field->data_size == sizeof(uint_least8_t))
 800f86e:	683b      	ldr	r3, [r7, #0]
 800f870:	8a5b      	ldrh	r3, [r3, #18]
 800f872:	2b01      	cmp	r3, #1
 800f874:	d108      	bne.n	800f888 <pb_enc_varint+0x3c>
            value = *(const uint_least8_t*)field->pData;
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	69db      	ldr	r3, [r3, #28]
 800f87a:	781b      	ldrb	r3, [r3, #0]
 800f87c:	b2da      	uxtb	r2, r3
 800f87e:	f04f 0300 	mov.w	r3, #0
 800f882:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f886:	e030      	b.n	800f8ea <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint_least16_t))
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	8a5b      	ldrh	r3, [r3, #18]
 800f88c:	2b02      	cmp	r3, #2
 800f88e:	d108      	bne.n	800f8a2 <pb_enc_varint+0x56>
            value = *(const uint_least16_t*)field->pData;
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	69db      	ldr	r3, [r3, #28]
 800f894:	881b      	ldrh	r3, [r3, #0]
 800f896:	b29a      	uxth	r2, r3
 800f898:	f04f 0300 	mov.w	r3, #0
 800f89c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f8a0:	e023      	b.n	800f8ea <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint32_t))
 800f8a2:	683b      	ldr	r3, [r7, #0]
 800f8a4:	8a5b      	ldrh	r3, [r3, #18]
 800f8a6:	2b04      	cmp	r3, #4
 800f8a8:	d108      	bne.n	800f8bc <pb_enc_varint+0x70>
            value = *(const uint32_t*)field->pData;
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	69db      	ldr	r3, [r3, #28]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	f04f 0300 	mov.w	r3, #0
 800f8b6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f8ba:	e016      	b.n	800f8ea <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(pb_uint64_t))
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	8a5b      	ldrh	r3, [r3, #18]
 800f8c0:	2b08      	cmp	r3, #8
 800f8c2:	d106      	bne.n	800f8d2 <pb_enc_varint+0x86>
            value = *(const pb_uint64_t*)field->pData;
 800f8c4:	683b      	ldr	r3, [r7, #0]
 800f8c6:	69db      	ldr	r3, [r3, #28]
 800f8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f8d0:	e00b      	b.n	800f8ea <pb_enc_varint+0x9e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	691b      	ldr	r3, [r3, #16]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d002      	beq.n	800f8e0 <pb_enc_varint+0x94>
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	691b      	ldr	r3, [r3, #16]
 800f8de:	e000      	b.n	800f8e2 <pb_enc_varint+0x96>
 800f8e0:	4b33      	ldr	r3, [pc, #204]	; (800f9b0 <pb_enc_varint+0x164>)
 800f8e2:	687a      	ldr	r2, [r7, #4]
 800f8e4:	6113      	str	r3, [r2, #16]
 800f8e6:	2300      	movs	r3, #0
 800f8e8:	e05d      	b.n	800f9a6 <pb_enc_varint+0x15a>

        return pb_encode_varint(stream, value);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f8f0:	f7ff fdfa 	bl	800f4e8 <pb_encode_varint>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	e056      	b.n	800f9a6 <pb_enc_varint+0x15a>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800f8f8:	f04f 0200 	mov.w	r2, #0
 800f8fc:	f04f 0300 	mov.w	r3, #0
 800f900:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (field->data_size == sizeof(int_least8_t))
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	8a5b      	ldrh	r3, [r3, #18]
 800f908:	2b01      	cmp	r3, #1
 800f90a:	d108      	bne.n	800f91e <pb_enc_varint+0xd2>
            value = *(const int_least8_t*)field->pData;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	69db      	ldr	r3, [r3, #28]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	b25a      	sxtb	r2, r3
 800f914:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f918:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f91c:	e030      	b.n	800f980 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int_least16_t))
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	8a5b      	ldrh	r3, [r3, #18]
 800f922:	2b02      	cmp	r3, #2
 800f924:	d108      	bne.n	800f938 <pb_enc_varint+0xec>
            value = *(const int_least16_t*)field->pData;
 800f926:	683b      	ldr	r3, [r7, #0]
 800f928:	69db      	ldr	r3, [r3, #28]
 800f92a:	881b      	ldrh	r3, [r3, #0]
 800f92c:	b21a      	sxth	r2, r3
 800f92e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f932:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f936:	e023      	b.n	800f980 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int32_t))
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	8a5b      	ldrh	r3, [r3, #18]
 800f93c:	2b04      	cmp	r3, #4
 800f93e:	d108      	bne.n	800f952 <pb_enc_varint+0x106>
            value = *(const int32_t*)field->pData;
 800f940:	683b      	ldr	r3, [r7, #0]
 800f942:	69db      	ldr	r3, [r3, #28]
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	461a      	mov	r2, r3
 800f948:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f94c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f950:	e016      	b.n	800f980 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(pb_int64_t))
 800f952:	683b      	ldr	r3, [r7, #0]
 800f954:	8a5b      	ldrh	r3, [r3, #18]
 800f956:	2b08      	cmp	r3, #8
 800f958:	d106      	bne.n	800f968 <pb_enc_varint+0x11c>
            value = *(const pb_int64_t*)field->pData;
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	69db      	ldr	r3, [r3, #28]
 800f95e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f962:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800f966:	e00b      	b.n	800f980 <pb_enc_varint+0x134>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	691b      	ldr	r3, [r3, #16]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d002      	beq.n	800f976 <pb_enc_varint+0x12a>
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	691b      	ldr	r3, [r3, #16]
 800f974:	e000      	b.n	800f978 <pb_enc_varint+0x12c>
 800f976:	4b0e      	ldr	r3, [pc, #56]	; (800f9b0 <pb_enc_varint+0x164>)
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	6113      	str	r3, [r2, #16]
 800f97c:	2300      	movs	r3, #0
 800f97e:	e012      	b.n	800f9a6 <pb_enc_varint+0x15a>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800f980:	683b      	ldr	r3, [r7, #0]
 800f982:	7d9b      	ldrb	r3, [r3, #22]
 800f984:	f003 030f 	and.w	r3, r3, #15
 800f988:	2b03      	cmp	r3, #3
 800f98a:	d106      	bne.n	800f99a <pb_enc_varint+0x14e>
            return pb_encode_svarint(stream, value);
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f992:	f7ff fdcf 	bl	800f534 <pb_encode_svarint>
 800f996:	4603      	mov	r3, r0
 800f998:	e005      	b.n	800f9a6 <pb_enc_varint+0x15a>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800f99a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800f99e:	6878      	ldr	r0, [r7, #4]
 800f9a0:	f7ff fda2 	bl	800f4e8 <pb_encode_varint>
 800f9a4:	4603      	mov	r3, r0

    }
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	08014048 	.word	0x08014048

0800f9b4 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b082      	sub	sp, #8
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	8a5b      	ldrh	r3, [r3, #18]
 800f9c2:	2b04      	cmp	r3, #4
 800f9c4:	d107      	bne.n	800f9d6 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800f9c6:	683b      	ldr	r3, [r7, #0]
 800f9c8:	69db      	ldr	r3, [r3, #28]
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	f7ff fde7 	bl	800f5a0 <pb_encode_fixed32>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	e016      	b.n	800fa04 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800f9d6:	683b      	ldr	r3, [r7, #0]
 800f9d8:	8a5b      	ldrh	r3, [r3, #18]
 800f9da:	2b08      	cmp	r3, #8
 800f9dc:	d107      	bne.n	800f9ee <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800f9de:	683b      	ldr	r3, [r7, #0]
 800f9e0:	69db      	ldr	r3, [r3, #28]
 800f9e2:	6878      	ldr	r0, [r7, #4]
 800f9e4:	4619      	mov	r1, r3
 800f9e6:	f7ff fdeb 	bl	800f5c0 <pb_encode_fixed64>
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	e00a      	b.n	800fa04 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800f9ee:	687b      	ldr	r3, [r7, #4]
 800f9f0:	691b      	ldr	r3, [r3, #16]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d002      	beq.n	800f9fc <pb_enc_fixed+0x48>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	691b      	ldr	r3, [r3, #16]
 800f9fa:	e000      	b.n	800f9fe <pb_enc_fixed+0x4a>
 800f9fc:	4b03      	ldr	r3, [pc, #12]	; (800fa0c <pb_enc_fixed+0x58>)
 800f9fe:	687a      	ldr	r2, [r7, #4]
 800fa00:	6113      	str	r3, [r2, #16]
 800fa02:	2300      	movs	r3, #0
    }
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	08014048 	.word	0x08014048

0800fa10 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b084      	sub	sp, #16
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 800fa1a:	2300      	movs	r3, #0
 800fa1c:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	69db      	ldr	r3, [r3, #28]
 800fa22:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d106      	bne.n	800fa38 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800fa2a:	6878      	ldr	r0, [r7, #4]
 800fa2c:	2100      	movs	r1, #0
 800fa2e:	2200      	movs	r2, #0
 800fa30:	f7ff fe46 	bl	800f6c0 <pb_encode_string>
 800fa34:	4603      	mov	r3, r0
 800fa36:	e023      	b.n	800fa80 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fa38:	683b      	ldr	r3, [r7, #0]
 800fa3a:	7d9b      	ldrb	r3, [r3, #22]
 800fa3c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d113      	bne.n	800fa6c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	881b      	ldrh	r3, [r3, #0]
 800fa48:	461a      	mov	r2, r3
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	8a5b      	ldrh	r3, [r3, #18]
 800fa4e:	3b02      	subs	r3, #2
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fa50:	429a      	cmp	r2, r3
 800fa52:	d90b      	bls.n	800fa6c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <pb_enc_bytes+0x52>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	e000      	b.n	800fa64 <pb_enc_bytes+0x54>
 800fa62:	4b09      	ldr	r3, [pc, #36]	; (800fa88 <pb_enc_bytes+0x78>)
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	6113      	str	r3, [r2, #16]
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e009      	b.n	800fa80 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	1c9a      	adds	r2, r3, #2
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	881b      	ldrh	r3, [r3, #0]
 800fa74:	6878      	ldr	r0, [r7, #4]
 800fa76:	4611      	mov	r1, r2
 800fa78:	461a      	mov	r2, r3
 800fa7a:	f7ff fe21 	bl	800f6c0 <pb_encode_string>
 800fa7e:	4603      	mov	r3, r0
}
 800fa80:	4618      	mov	r0, r3
 800fa82:	3710      	adds	r7, #16
 800fa84:	46bd      	mov	sp, r7
 800fa86:	bd80      	pop	{r7, pc}
 800fa88:	0801405c 	.word	0x0801405c

0800fa8c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
 800fa94:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800fa96:	2300      	movs	r3, #0
 800fa98:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	8a5b      	ldrh	r3, [r3, #18]
 800fa9e:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800faa0:	683b      	ldr	r3, [r7, #0]
 800faa2:	69db      	ldr	r3, [r3, #28]
 800faa4:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800faa6:	683b      	ldr	r3, [r7, #0]
 800faa8:	7d9b      	ldrb	r3, [r3, #22]
 800faaa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800faae:	2b80      	cmp	r3, #128	; 0x80
 800fab0:	d103      	bne.n	800faba <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800fab2:	f04f 33ff 	mov.w	r3, #4294967295
 800fab6:	613b      	str	r3, [r7, #16]
 800fab8:	e011      	b.n	800fade <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d10b      	bne.n	800fad8 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	691b      	ldr	r3, [r3, #16]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d002      	beq.n	800face <pb_enc_string+0x42>
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	691b      	ldr	r3, [r3, #16]
 800facc:	e000      	b.n	800fad0 <pb_enc_string+0x44>
 800face:	4b1c      	ldr	r3, [pc, #112]	; (800fb40 <pb_enc_string+0xb4>)
 800fad0:	687a      	ldr	r2, [r7, #4]
 800fad2:	6113      	str	r3, [r2, #16]
 800fad4:	2300      	movs	r3, #0
 800fad6:	e02f      	b.n	800fb38 <pb_enc_string+0xac>

        max_size -= 1;
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	3b01      	subs	r3, #1
 800fadc:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 800fade:	68bb      	ldr	r3, [r7, #8]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d102      	bne.n	800faea <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 800fae4:	2300      	movs	r3, #0
 800fae6:	617b      	str	r3, [r7, #20]
 800fae8:	e020      	b.n	800fb2c <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800faea:	68bb      	ldr	r3, [r7, #8]
 800faec:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800faee:	e005      	b.n	800fafc <pb_enc_string+0x70>
        {
            size++;
 800faf0:	697b      	ldr	r3, [r7, #20]
 800faf2:	3301      	adds	r3, #1
 800faf4:	617b      	str	r3, [r7, #20]
            p++;
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	3301      	adds	r3, #1
 800fafa:	60fb      	str	r3, [r7, #12]
    else
    {
        const char *p = str;

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800fafc:	697a      	ldr	r2, [r7, #20]
 800fafe:	693b      	ldr	r3, [r7, #16]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d203      	bcs.n	800fb0c <pb_enc_string+0x80>
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	781b      	ldrb	r3, [r3, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d1f1      	bne.n	800faf0 <pb_enc_string+0x64>
        {
            size++;
            p++;
        }

        if (*p != '\0')
 800fb0c:	68fb      	ldr	r3, [r7, #12]
 800fb0e:	781b      	ldrb	r3, [r3, #0]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d00b      	beq.n	800fb2c <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	691b      	ldr	r3, [r3, #16]
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d002      	beq.n	800fb22 <pb_enc_string+0x96>
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	691b      	ldr	r3, [r3, #16]
 800fb20:	e000      	b.n	800fb24 <pb_enc_string+0x98>
 800fb22:	4b08      	ldr	r3, [pc, #32]	; (800fb44 <pb_enc_string+0xb8>)
 800fb24:	687a      	ldr	r2, [r7, #4]
 800fb26:	6113      	str	r3, [r2, #16]
 800fb28:	2300      	movs	r3, #0
 800fb2a:	e005      	b.n	800fb38 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 800fb2c:	6878      	ldr	r0, [r7, #4]
 800fb2e:	68b9      	ldr	r1, [r7, #8]
 800fb30:	697a      	ldr	r2, [r7, #20]
 800fb32:	f7ff fdc5 	bl	800f6c0 <pb_encode_string>
 800fb36:	4603      	mov	r3, r0
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	3718      	adds	r7, #24
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	bd80      	pop	{r7, pc}
 800fb40:	08014070 	.word	0x08014070
 800fb44:	08014084 	.word	0x08014084

0800fb48 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b084      	sub	sp, #16
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d10b      	bne.n	800fb72 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	691b      	ldr	r3, [r3, #16]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d002      	beq.n	800fb68 <pb_enc_submessage+0x20>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	e000      	b.n	800fb6a <pb_enc_submessage+0x22>
 800fb68:	4b19      	ldr	r3, [pc, #100]	; (800fbd0 <pb_enc_submessage+0x88>)
 800fb6a:	687a      	ldr	r2, [r7, #4]
 800fb6c:	6113      	str	r3, [r2, #16]
 800fb6e:	2300      	movs	r3, #0
 800fb70:	e02a      	b.n	800fbc8 <pb_enc_submessage+0x80>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800fb72:	683b      	ldr	r3, [r7, #0]
 800fb74:	7d9b      	ldrb	r3, [r3, #22]
 800fb76:	f003 030f 	and.w	r3, r3, #15
 800fb7a:	2b09      	cmp	r3, #9
 800fb7c:	d11a      	bne.n	800fbb4 <pb_enc_submessage+0x6c>
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d016      	beq.n	800fbb4 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	6a1b      	ldr	r3, [r3, #32]
 800fb8a:	3b08      	subs	r3, #8
 800fb8c:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800fb8e:	68fb      	ldr	r3, [r7, #12]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d00e      	beq.n	800fbb4 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	3204      	adds	r2, #4
 800fb9e:	6878      	ldr	r0, [r7, #4]
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	4798      	blx	r3
 800fba4:	4603      	mov	r3, r0
 800fba6:	f083 0301 	eor.w	r3, r3, #1
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d001      	beq.n	800fbb4 <pb_enc_submessage+0x6c>
                return false;
 800fbb0:	2300      	movs	r3, #0
 800fbb2:	e009      	b.n	800fbc8 <pb_enc_submessage+0x80>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 800fbb4:	683b      	ldr	r3, [r7, #0]
 800fbb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	69db      	ldr	r3, [r3, #28]
 800fbbc:	6878      	ldr	r0, [r7, #4]
 800fbbe:	4611      	mov	r1, r2
 800fbc0:	461a      	mov	r2, r3
 800fbc2:	f7ff fd9d 	bl	800f700 <pb_encode_submessage>
 800fbc6:	4603      	mov	r3, r0
}
 800fbc8:	4618      	mov	r0, r3
 800fbca:	3710      	adds	r7, #16
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd80      	pop	{r7, pc}
 800fbd0:	08014098 	.word	0x08014098

0800fbd4 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fbd4:	b580      	push	{r7, lr}
 800fbd6:	b082      	sub	sp, #8
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
 800fbdc:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	69da      	ldr	r2, [r3, #28]
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	8a5b      	ldrh	r3, [r3, #18]
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	4611      	mov	r1, r2
 800fbea:	461a      	mov	r2, r3
 800fbec:	f7ff fd68 	bl	800f6c0 <pb_encode_string>
 800fbf0:	4603      	mov	r3, r0
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3708      	adds	r7, #8
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
 800fbfa:	bf00      	nop

0800fbfc <uart_debugg>:
Io_Exp_PinMap_t ELEC_HANDBRAKE_PWR_OUT_D = {IO_EXP_IC_48, PORT0, PIN2};


//#if UART_DEBUG
void uart_debugg(uint8_t uart_buff[])
{
 800fbfc:	b480      	push	{r7}
 800fbfe:	b083      	sub	sp, #12
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
	            //Wait for transmit buffer interrupt to fill it again with remaining data
	            while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
	            UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
	   }*/
#endif
}
 800fc04:	370c      	adds	r7, #12
 800fc06:	46bd      	mov	sp, r7
 800fc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc0c:	4770      	bx	lr
 800fc0e:	bf00      	nop

0800fc10 <Io_Exp_Init>:
}
//#endif


void Io_Exp_Init(void)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b082      	sub	sp, #8
 800fc14:	af00      	add	r7, sp, #0
	/* 0 set as output, 1 as input */
	/* Initially output is high hence make 0 */

	uint8_t Io_Exp_address = 0x42, set_port0_pin_as_out_or_input = 0xbf, set_port1_pin_as_out_or_input = 0x27, port0 = 0x00, port1 = 0x01, pin_value = 0x06;
 800fc16:	2342      	movs	r3, #66	; 0x42
 800fc18:	71fb      	strb	r3, [r7, #7]
 800fc1a:	23bf      	movs	r3, #191	; 0xbf
 800fc1c:	71bb      	strb	r3, [r7, #6]
 800fc1e:	2327      	movs	r3, #39	; 0x27
 800fc20:	717b      	strb	r3, [r7, #5]
 800fc22:	2300      	movs	r3, #0
 800fc24:	713b      	strb	r3, [r7, #4]
 800fc26:	2301      	movs	r3, #1
 800fc28:	70fb      	strb	r3, [r7, #3]
 800fc2a:	2306      	movs	r3, #6
 800fc2c:	70bb      	strb	r3, [r7, #2]

	/* U25 I2C_0*/
	IOExp_Configure(&I2C_MASTER_0, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fc2e:	79f9      	ldrb	r1, [r7, #7]
 800fc30:	79ba      	ldrb	r2, [r7, #6]
 800fc32:	797b      	ldrb	r3, [r7, #5]
 800fc34:	4851      	ldr	r0, [pc, #324]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc36:	f7f5 f869 	bl	8004d0c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);
 800fc3a:	79f9      	ldrb	r1, [r7, #7]
 800fc3c:	793a      	ldrb	r2, [r7, #4]
 800fc3e:	78bb      	ldrb	r3, [r7, #2]
 800fc40:	484e      	ldr	r0, [pc, #312]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc42:	f7f5 f99f 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x03);
 800fc46:	79fa      	ldrb	r2, [r7, #7]
 800fc48:	78fb      	ldrb	r3, [r7, #3]
 800fc4a:	484c      	ldr	r0, [pc, #304]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc4c:	4611      	mov	r1, r2
 800fc4e:	461a      	mov	r2, r3
 800fc50:	2303      	movs	r3, #3
 800fc52:	f7f5 f997 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x04);
 800fc56:	79fa      	ldrb	r2, [r7, #7]
 800fc58:	78fb      	ldrb	r3, [r7, #3]
 800fc5a:	4848      	ldr	r0, [pc, #288]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc5c:	4611      	mov	r1, r2
 800fc5e:	461a      	mov	r2, r3
 800fc60:	2304      	movs	r3, #4
 800fc62:	f7f5 f98f 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x06);
 800fc66:	79fa      	ldrb	r2, [r7, #7]
 800fc68:	78fb      	ldrb	r3, [r7, #3]
 800fc6a:	4844      	ldr	r0, [pc, #272]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc6c:	4611      	mov	r1, r2
 800fc6e:	461a      	mov	r2, r3
 800fc70:	2306      	movs	r3, #6
 800fc72:	f7f5 f987 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x07);
 800fc76:	79fa      	ldrb	r2, [r7, #7]
 800fc78:	78fb      	ldrb	r3, [r7, #3]
 800fc7a:	4840      	ldr	r0, [pc, #256]	; (800fd7c <Io_Exp_Init+0x16c>)
 800fc7c:	4611      	mov	r1, r2
 800fc7e:	461a      	mov	r2, r3
 800fc80:	2307      	movs	r3, #7
 800fc82:	f7f5 f97f 	bl	8004f84 <IOExp_SetPIN_LOW>
	//IOExp_SetPIN_HIGH(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);

	/* U38 I2C_1 */
	Io_Exp_address = 0x40;
 800fc86:	2340      	movs	r3, #64	; 0x40
 800fc88:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input = 0xf0;
 800fc8a:	23f0      	movs	r3, #240	; 0xf0
 800fc8c:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0x01;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fc92:	79f9      	ldrb	r1, [r7, #7]
 800fc94:	79ba      	ldrb	r2, [r7, #6]
 800fc96:	797b      	ldrb	r3, [r7, #5]
 800fc98:	4839      	ldr	r0, [pc, #228]	; (800fd80 <Io_Exp_Init+0x170>)
 800fc9a:	f7f5 f837 	bl	8004d0c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 0);
 800fc9e:	79fa      	ldrb	r2, [r7, #7]
 800fca0:	793b      	ldrb	r3, [r7, #4]
 800fca2:	4837      	ldr	r0, [pc, #220]	; (800fd80 <Io_Exp_Init+0x170>)
 800fca4:	4611      	mov	r1, r2
 800fca6:	461a      	mov	r2, r3
 800fca8:	2300      	movs	r3, #0
 800fcaa:	f7f5 f96b 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 1);
 800fcae:	79fa      	ldrb	r2, [r7, #7]
 800fcb0:	793b      	ldrb	r3, [r7, #4]
 800fcb2:	4833      	ldr	r0, [pc, #204]	; (800fd80 <Io_Exp_Init+0x170>)
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	2301      	movs	r3, #1
 800fcba:	f7f5 f963 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 2);
 800fcbe:	79fa      	ldrb	r2, [r7, #7]
 800fcc0:	793b      	ldrb	r3, [r7, #4]
 800fcc2:	482f      	ldr	r0, [pc, #188]	; (800fd80 <Io_Exp_Init+0x170>)
 800fcc4:	4611      	mov	r1, r2
 800fcc6:	461a      	mov	r2, r3
 800fcc8:	2302      	movs	r3, #2
 800fcca:	f7f5 f95b 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 800fcce:	79fa      	ldrb	r2, [r7, #7]
 800fcd0:	793b      	ldrb	r3, [r7, #4]
 800fcd2:	482b      	ldr	r0, [pc, #172]	; (800fd80 <Io_Exp_Init+0x170>)
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	2303      	movs	r3, #3
 800fcda:	f7f5 f953 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x01);
 800fcde:	79fa      	ldrb	r2, [r7, #7]
 800fce0:	78fb      	ldrb	r3, [r7, #3]
 800fce2:	4827      	ldr	r0, [pc, #156]	; (800fd80 <Io_Exp_Init+0x170>)
 800fce4:	4611      	mov	r1, r2
 800fce6:	461a      	mov	r2, r3
 800fce8:	2301      	movs	r3, #1
 800fcea:	f7f5 f94b 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x02);
 800fcee:	79fa      	ldrb	r2, [r7, #7]
 800fcf0:	78fb      	ldrb	r3, [r7, #3]
 800fcf2:	4823      	ldr	r0, [pc, #140]	; (800fd80 <Io_Exp_Init+0x170>)
 800fcf4:	4611      	mov	r1, r2
 800fcf6:	461a      	mov	r2, r3
 800fcf8:	2302      	movs	r3, #2
 800fcfa:	f7f5 f943 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x03);
 800fcfe:	79fa      	ldrb	r2, [r7, #7]
 800fd00:	78fb      	ldrb	r3, [r7, #3]
 800fd02:	481f      	ldr	r0, [pc, #124]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd04:	4611      	mov	r1, r2
 800fd06:	461a      	mov	r2, r3
 800fd08:	2303      	movs	r3, #3
 800fd0a:	f7f5 f93b 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x04);
 800fd0e:	79fa      	ldrb	r2, [r7, #7]
 800fd10:	78fb      	ldrb	r3, [r7, #3]
 800fd12:	481b      	ldr	r0, [pc, #108]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd14:	4611      	mov	r1, r2
 800fd16:	461a      	mov	r2, r3
 800fd18:	2304      	movs	r3, #4
 800fd1a:	f7f5 f933 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x05);
 800fd1e:	79fa      	ldrb	r2, [r7, #7]
 800fd20:	78fb      	ldrb	r3, [r7, #3]
 800fd22:	4817      	ldr	r0, [pc, #92]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd24:	4611      	mov	r1, r2
 800fd26:	461a      	mov	r2, r3
 800fd28:	2305      	movs	r3, #5
 800fd2a:	f7f5 f92b 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x06);
 800fd2e:	79fa      	ldrb	r2, [r7, #7]
 800fd30:	78fb      	ldrb	r3, [r7, #3]
 800fd32:	4813      	ldr	r0, [pc, #76]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd34:	4611      	mov	r1, r2
 800fd36:	461a      	mov	r2, r3
 800fd38:	2306      	movs	r3, #6
 800fd3a:	f7f5 f923 	bl	8004f84 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x07);
 800fd3e:	79fa      	ldrb	r2, [r7, #7]
 800fd40:	78fb      	ldrb	r3, [r7, #3]
 800fd42:	480f      	ldr	r0, [pc, #60]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd44:	4611      	mov	r1, r2
 800fd46:	461a      	mov	r2, r3
 800fd48:	2307      	movs	r3, #7
 800fd4a:	f7f5 f91b 	bl	8004f84 <IOExp_SetPIN_LOW>

	/* U48 I2C_1 */
	Io_Exp_address = 0x42;
 800fd4e:	2342      	movs	r3, #66	; 0x42
 800fd50:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input =0XF7;
 800fd52:	23f7      	movs	r3, #247	; 0xf7
 800fd54:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0xFF;
 800fd56:	23ff      	movs	r3, #255	; 0xff
 800fd58:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fd5a:	79f9      	ldrb	r1, [r7, #7]
 800fd5c:	79ba      	ldrb	r2, [r7, #6]
 800fd5e:	797b      	ldrb	r3, [r7, #5]
 800fd60:	4807      	ldr	r0, [pc, #28]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd62:	f7f4 ffd3 	bl	8004d0c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 800fd66:	79fa      	ldrb	r2, [r7, #7]
 800fd68:	793b      	ldrb	r3, [r7, #4]
 800fd6a:	4805      	ldr	r0, [pc, #20]	; (800fd80 <Io_Exp_Init+0x170>)
 800fd6c:	4611      	mov	r1, r2
 800fd6e:	461a      	mov	r2, r3
 800fd70:	2303      	movs	r3, #3
 800fd72:	f7f5 f907 	bl	8004f84 <IOExp_SetPIN_LOW>

}
 800fd76:	3708      	adds	r7, #8
 800fd78:	46bd      	mov	sp, r7
 800fd7a:	bd80      	pop	{r7, pc}
 800fd7c:	1ffe8a5c 	.word	0x1ffe8a5c
 800fd80:	1ffe8a68 	.word	0x1ffe8a68

0800fd84 <digital_io_setoutputlow>:


void digital_io_setoutputlow(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b084      	sub	sp, #16
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address;

	if((IO_EXP_PINName_handler ->IC_no == 24) || (IO_EXP_PINName_handler ->IC_no == 25))
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	781b      	ldrb	r3, [r3, #0]
 800fd90:	2b18      	cmp	r3, #24
 800fd92:	d003      	beq.n	800fd9c <digital_io_setoutputlow+0x18>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	781b      	ldrb	r3, [r3, #0]
 800fd98:	2b19      	cmp	r3, #25
 800fd9a:	d110      	bne.n	800fdbe <digital_io_setoutputlow+0x3a>
	{
		Io_Exp_address = 0x40;
 800fd9c:	2340      	movs	r3, #64	; 0x40
 800fd9e:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 25)
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	2b19      	cmp	r3, #25
 800fda6:	d101      	bne.n	800fdac <digital_io_setoutputlow+0x28>
			Io_Exp_address = 0x42;
 800fda8:	2342      	movs	r3, #66	; 0x42
 800fdaa:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_LOW(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	785a      	ldrb	r2, [r3, #1]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	789b      	ldrb	r3, [r3, #2]
 800fdb4:	7bf9      	ldrb	r1, [r7, #15]
 800fdb6:	480f      	ldr	r0, [pc, #60]	; (800fdf4 <digital_io_setoutputlow+0x70>)
 800fdb8:	f7f5 f8e4 	bl	8004f84 <IOExp_SetPIN_LOW>
 800fdbc:	e017      	b.n	800fdee <digital_io_setoutputlow+0x6a>
	}
	else if((IO_EXP_PINName_handler ->IC_no == 38) || (IO_EXP_PINName_handler ->IC_no == 48))
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b26      	cmp	r3, #38	; 0x26
 800fdc4:	d003      	beq.n	800fdce <digital_io_setoutputlow+0x4a>
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	781b      	ldrb	r3, [r3, #0]
 800fdca:	2b30      	cmp	r3, #48	; 0x30
 800fdcc:	d10f      	bne.n	800fdee <digital_io_setoutputlow+0x6a>
	{
		Io_Exp_address = 0x40;
 800fdce:	2340      	movs	r3, #64	; 0x40
 800fdd0:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 48)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	781b      	ldrb	r3, [r3, #0]
 800fdd6:	2b30      	cmp	r3, #48	; 0x30
 800fdd8:	d101      	bne.n	800fdde <digital_io_setoutputlow+0x5a>
			Io_Exp_address = 0x42;
 800fdda:	2342      	movs	r3, #66	; 0x42
 800fddc:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	785a      	ldrb	r2, [r3, #1]
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	789b      	ldrb	r3, [r3, #2]
 800fde6:	7bf9      	ldrb	r1, [r7, #15]
 800fde8:	4803      	ldr	r0, [pc, #12]	; (800fdf8 <digital_io_setoutputlow+0x74>)
 800fdea:	f7f5 f8cb 	bl	8004f84 <IOExp_SetPIN_LOW>
	}

}
 800fdee:	3710      	adds	r7, #16
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	1ffe8a5c 	.word	0x1ffe8a5c
 800fdf8:	1ffe8a68 	.word	0x1ffe8a68

0800fdfc <digital_io_setoutputhigh>:


void digital_io_setoutputhigh(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 800fdfc:	b580      	push	{r7, lr}
 800fdfe:	b084      	sub	sp, #16
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address;

	if((IO_EXP_PINName_handler ->IC_no == 24) || (IO_EXP_PINName_handler ->IC_no == 25))
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	781b      	ldrb	r3, [r3, #0]
 800fe08:	2b18      	cmp	r3, #24
 800fe0a:	d003      	beq.n	800fe14 <digital_io_setoutputhigh+0x18>
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	781b      	ldrb	r3, [r3, #0]
 800fe10:	2b19      	cmp	r3, #25
 800fe12:	d110      	bne.n	800fe36 <digital_io_setoutputhigh+0x3a>
	{
		Io_Exp_address = 0x40;
 800fe14:	2340      	movs	r3, #64	; 0x40
 800fe16:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 25)
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	781b      	ldrb	r3, [r3, #0]
 800fe1c:	2b19      	cmp	r3, #25
 800fe1e:	d101      	bne.n	800fe24 <digital_io_setoutputhigh+0x28>
			Io_Exp_address = 0x42;
 800fe20:	2342      	movs	r3, #66	; 0x42
 800fe22:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_HIGH(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	785a      	ldrb	r2, [r3, #1]
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	789b      	ldrb	r3, [r3, #2]
 800fe2c:	7bf9      	ldrb	r1, [r7, #15]
 800fe2e:	480f      	ldr	r0, [pc, #60]	; (800fe6c <digital_io_setoutputhigh+0x70>)
 800fe30:	f7f5 f88c 	bl	8004f4c <IOExp_SetPIN_HIGH>
 800fe34:	e017      	b.n	800fe66 <digital_io_setoutputhigh+0x6a>
	}
	else if((IO_EXP_PINName_handler ->IC_no == 38) || (IO_EXP_PINName_handler ->IC_no == 48))
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b26      	cmp	r3, #38	; 0x26
 800fe3c:	d003      	beq.n	800fe46 <digital_io_setoutputhigh+0x4a>
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	2b30      	cmp	r3, #48	; 0x30
 800fe44:	d10f      	bne.n	800fe66 <digital_io_setoutputhigh+0x6a>
	{
		Io_Exp_address = 0x40;
 800fe46:	2340      	movs	r3, #64	; 0x40
 800fe48:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 48)
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	781b      	ldrb	r3, [r3, #0]
 800fe4e:	2b30      	cmp	r3, #48	; 0x30
 800fe50:	d101      	bne.n	800fe56 <digital_io_setoutputhigh+0x5a>
			Io_Exp_address = 0x42;
 800fe52:	2342      	movs	r3, #66	; 0x42
 800fe54:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_HIGH(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	785a      	ldrb	r2, [r3, #1]
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	789b      	ldrb	r3, [r3, #2]
 800fe5e:	7bf9      	ldrb	r1, [r7, #15]
 800fe60:	4803      	ldr	r0, [pc, #12]	; (800fe70 <digital_io_setoutputhigh+0x74>)
 800fe62:	f7f5 f873 	bl	8004f4c <IOExp_SetPIN_HIGH>
	}

}
 800fe66:	3710      	adds	r7, #16
 800fe68:	46bd      	mov	sp, r7
 800fe6a:	bd80      	pop	{r7, pc}
 800fe6c:	1ffe8a5c 	.word	0x1ffe8a5c
 800fe70:	1ffe8a68 	.word	0x1ffe8a68

0800fe74 <Delay>:

void Delay(uint32_t delay_ms)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b084      	sub	sp, #16
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800fe7c:	480f      	ldr	r0, [pc, #60]	; (800febc <Delay+0x48>)
 800fe7e:	f7f6 fa41 	bl	8006304 <TIMER_ClearEvent>

   delay_cnt = delay_ms * 100000;//TIMER_DELAY_MUL_FACTOR;
 800fe82:	687b      	ldr	r3, [r7, #4]
 800fe84:	4a0e      	ldr	r2, [pc, #56]	; (800fec0 <Delay+0x4c>)
 800fe86:	fb02 f303 	mul.w	r3, r2, r3
 800fe8a:	60fb      	str	r3, [r7, #12]

   TIMER_SetTimeInterval(&TIMER_0,delay_cnt);
 800fe8c:	480b      	ldr	r0, [pc, #44]	; (800febc <Delay+0x48>)
 800fe8e:	68f9      	ldr	r1, [r7, #12]
 800fe90:	f7f6 f916 	bl	80060c0 <TIMER_SetTimeInterval>

   TIMER_Start(&TIMER_0);
 800fe94:	4809      	ldr	r0, [pc, #36]	; (800febc <Delay+0x48>)
 800fe96:	f7f6 f899 	bl	8005fcc <TIMER_Start>

   while(!TIMER_GetInterruptStatus(&TIMER_0));
 800fe9a:	bf00      	nop
 800fe9c:	4807      	ldr	r0, [pc, #28]	; (800febc <Delay+0x48>)
 800fe9e:	f7f6 fa0b 	bl	80062b8 <TIMER_GetInterruptStatus>
 800fea2:	4603      	mov	r3, r0
 800fea4:	f083 0301 	eor.w	r3, r3, #1
 800fea8:	b2db      	uxtb	r3, r3
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d1f6      	bne.n	800fe9c <Delay+0x28>

   TIMER_Stop(&TIMER_0);
 800feae:	4803      	ldr	r0, [pc, #12]	; (800febc <Delay+0x48>)
 800feb0:	f7f6 f8b4 	bl	800601c <TIMER_Stop>

}
 800feb4:	3710      	adds	r7, #16
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	1ffe8850 	.word	0x1ffe8850
 800fec0:	000186a0 	.word	0x000186a0

0800fec4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800fec4:	b480      	push	{r7}
 800fec6:	b083      	sub	sp, #12
 800fec8:	af00      	add	r7, sp, #0
 800feca:	4603      	mov	r3, r0
 800fecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800fece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	db10      	blt.n	800fef8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800fed6:	490b      	ldr	r1, [pc, #44]	; (800ff04 <__NVIC_DisableIRQ+0x40>)
 800fed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800fedc:	095b      	lsrs	r3, r3, #5
 800fede:	79fa      	ldrb	r2, [r7, #7]
 800fee0:	f002 021f 	and.w	r2, r2, #31
 800fee4:	2001      	movs	r0, #1
 800fee6:	fa00 f202 	lsl.w	r2, r0, r2
 800feea:	3320      	adds	r3, #32
 800feec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800fef0:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800fef4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800fef8:	370c      	adds	r7, #12
 800fefa:	46bd      	mov	sp, r7
 800fefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff00:	4770      	bx	lr
 800ff02:	bf00      	nop
 800ff04:	e000e100 	.word	0xe000e100

0800ff08 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800ff08:	b480      	push	{r7}
 800ff0a:	b083      	sub	sp, #12
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
 800ff10:	460b      	mov	r3, r1
 800ff12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800ff14:	78fb      	ldrb	r3, [r7, #3]
 800ff16:	2201      	movs	r2, #1
 800ff18:	409a      	lsls	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	605a      	str	r2, [r3, #4]
}
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681a      	ldr	r2, [r3, #0]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	7c1b      	ldrb	r3, [r3, #16]
 800ff38:	4610      	mov	r0, r2
 800ff3a:	4619      	mov	r1, r3
 800ff3c:	f7ff ffe4 	bl	800ff08 <XMC_GPIO_SetOutputHigh>
}
 800ff40:	3708      	adds	r7, #8
 800ff42:	46bd      	mov	sp, r7
 800ff44:	bd80      	pop	{r7, pc}
 800ff46:	bf00      	nop

0800ff48 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 800ff48:	b480      	push	{r7}
 800ff4a:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 800ff4c:	4a04      	ldr	r2, [pc, #16]	; (800ff60 <XMC_WDT_Start+0x18>)
 800ff4e:	4b04      	ldr	r3, [pc, #16]	; (800ff60 <XMC_WDT_Start+0x18>)
 800ff50:	685b      	ldr	r3, [r3, #4]
 800ff52:	f043 0301 	orr.w	r3, r3, #1
 800ff56:	6053      	str	r3, [r2, #4]
}
 800ff58:	46bd      	mov	sp, r7
 800ff5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff5e:	4770      	bx	lr
 800ff60:	50008000 	.word	0x50008000

0800ff64 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 800ff68:	4b03      	ldr	r3, [pc, #12]	; (800ff78 <XMC_WDT_Service+0x14>)
 800ff6a:	4a04      	ldr	r2, [pc, #16]	; (800ff7c <XMC_WDT_Service+0x18>)
 800ff6c:	609a      	str	r2, [r3, #8]
}
 800ff6e:	46bd      	mov	sp, r7
 800ff70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	50008000 	.word	0x50008000
 800ff7c:	abadcafe 	.word	0xabadcafe

0800ff80 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 800ff80:	b480      	push	{r7}
 800ff82:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 800ff84:	4b03      	ldr	r3, [pc, #12]	; (800ff94 <XMC_WDT_ClearAlarm+0x14>)
 800ff86:	2201      	movs	r2, #1
 800ff88:	61da      	str	r2, [r3, #28]
}
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	50008000 	.word	0x50008000

0800ff98 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 800ff9c:	f7ff ffd4 	bl	800ff48 <XMC_WDT_Start>
}
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop

0800ffa4 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 800ffa8:	f7ff ffdc 	bl	800ff64 <XMC_WDT_Service>
}
 800ffac:	bd80      	pop	{r7, pc}
 800ffae:	bf00      	nop

0800ffb0 <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 800ffb4:	f7ff ffe4 	bl	800ff80 <XMC_WDT_ClearAlarm>
}
 800ffb8:	bd80      	pop	{r7, pc}
 800ffba:	bf00      	nop

0800ffbc <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 800ffbc:	b580      	push	{r7, lr}
 800ffbe:	b082      	sub	sp, #8
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	b25b      	sxtb	r3, r3
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7ff ff7a 	bl	800fec4 <__NVIC_DisableIRQ>
}
 800ffd0:	3708      	adds	r7, #8
 800ffd2:	46bd      	mov	sp, r7
 800ffd4:	bd80      	pop	{r7, pc}
 800ffd6:	bf00      	nop

0800ffd8 <main>:
uint8_t CState = 4, PreState = 0;
int testv = 0;
bool is_drive_mode = false;

int main(void)
{
 800ffd8:	b580      	push	{r7, lr}
 800ffda:	b082      	sub	sp, #8
 800ffdc:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ffde:	2304      	movs	r3, #4
 800ffe0:	71fb      	strb	r3, [r7, #7]
	uint8_t super_count = 0;
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	71bb      	strb	r3, [r7, #6]
	//jump :;
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 800ffe6:	f7f8 fd99 	bl	8008b1c <DAVE_Init>
 800ffea:	4603      	mov	r3, r0
 800ffec:	717b      	strb	r3, [r7, #5]

  if (status != DAVE_STATUS_SUCCESS)
 800ffee:	797b      	ldrb	r3, [r7, #5]
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d003      	beq.n	800fffc <main+0x24>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 800fff4:	481c      	ldr	r0, [pc, #112]	; (8010068 <main+0x90>)
 800fff6:	f001 fdef 	bl	8011bd8 <puts>

    while(1U)
    {

    }
 800fffa:	e7fe      	b.n	800fffa <main+0x22>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */

	/*  enable here all the relays need to be HIGH at startup  */
	INTERRUPT_Disable(&INTERRUPT_0);
 800fffc:	481b      	ldr	r0, [pc, #108]	; (801006c <main+0x94>)
 800fffe:	f7ff ffdd 	bl	800ffbc <INTERRUPT_Disable>
	VCU_init_on();
 8010002:	f000 f837 	bl	8010074 <VCU_init_on>
	reset_on();
 8010006:	f000 f88f 	bl	8010128 <reset_on>
	//initialize_sd_card_and_transmit_cid();
	len_retStatus = mod_open4gModPort();
 801000a:	f7fb fc97 	bl	800b93c <mod_open4gModPort>
 801000e:	4603      	mov	r3, r0
 8010010:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus) {
 8010012:	79fb      	ldrb	r3, [r7, #7]
 8010014:	2b00      	cmp	r3, #0
 8010016:	d10c      	bne.n	8010032 <main+0x5a>
		len_retStatus = tm_setTimerCount(TM_1MS_TIMER_VAL);
 8010018:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801001c:	f7f0 f982 	bl	8000324 <tm_setTimerCount>
 8010020:	4603      	mov	r3, r0
 8010022:	71fb      	strb	r3, [r7, #7]
		if (E_RET_SUCCESS == len_retStatus) {
 8010024:	79fb      	ldrb	r3, [r7, #7]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d103      	bne.n	8010032 <main+0x5a>
			len_retStatus = tm_startTimer();
 801002a:	f7f0 f99b 	bl	8000364 <tm_startTimer>
 801002e:	4603      	mov	r3, r0
 8010030:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus) {
			}
		}
	}

	mod_enable4gModule();
 8010032:	f7fb fc4d 	bl	800b8d0 <mod_enable4gModule>

	while (1U) {
		//SuperLooptime_Start();

	  /* Updating the inputs*/
	  InputCapture();
 8010036:	f000 f831 	bl	801009c <InputCapture>


	  /* processing all inputs */
	  Process_Inputs();
 801003a:	f000 f84d 	bl	80100d8 <Process_Inputs>

		/* action loop , taking the action */
	  Vcu_OutPut();
 801003e:	f000 f85f 	bl	8010100 <Vcu_OutPut>

		//SuperLooptime_End();

		//SuperLooptime_Start();

		mod_receiveRsp();
 8010042:	f7fb fc89 	bl	800b958 <mod_receiveRsp>
		if(false == gb_isMqttConnected)
 8010046:	4b0a      	ldr	r3, [pc, #40]	; (8010070 <main+0x98>)
 8010048:	781b      	ldrb	r3, [r3, #0]
 801004a:	f083 0301 	eor.w	r3, r3, #1
 801004e:	b2db      	uxtb	r3, r3
 8010050:	2b00      	cmp	r3, #0
 8010052:	d002      	beq.n	801005a <main+0x82>
		{
			mod_4gHandler();
 8010054:	f7fe f82a 	bl	800e0ac <mod_4gHandler>
 8010058:	e005      	b.n	8010066 <main+0x8e>
		}
		else if(true == gb_isMqttConnected)
 801005a:	4b05      	ldr	r3, [pc, #20]	; (8010070 <main+0x98>)
 801005c:	781b      	ldrb	r3, [r3, #0]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <main+0x8e>
		{
//			mod_4gProcess();
			mod_pub10sPackExtractGps();
 8010062:	f7fe f97b 	bl	800e35c <mod_pub10sPackExtractGps>
	 }
	  else if((!DIGITAL_IO_GetInput(&IGNI_POS1_IN_D)))
	  {
		  super_count = 0;
	  }*/
  }
 8010066:	e7e6      	b.n	8010036 <main+0x5e>
 8010068:	080140b4 	.word	0x080140b4
 801006c:	080130a0 	.word	0x080130a0
 8010070:	1fff5230 	.word	0x1fff5230

08010074 <VCU_init_on>:
}

void VCU_init_on(void) {
 8010074:	b580      	push	{r7, lr}
 8010076:	af00      	add	r7, sp, #0
	/* enable here all the relays need to be HIGH at startup */

		//set_PIN(&COMM_PWR_ENB_D, HIGH);

		/* enable common power to IO */
		DIGITAL_IO_SetOutputHigh(&COMM_3V3_PWR_EN);
 8010078:	4805      	ldr	r0, [pc, #20]	; (8010090 <VCU_init_on+0x1c>)
 801007a:	f7ff ff55 	bl	800ff28 <DIGITAL_IO_SetOutputHigh>

		/* 3v3 enable */
		DIGITAL_IO_SetOutputHigh(&INPUTS_3V3_PWR_EN);
 801007e:	4805      	ldr	r0, [pc, #20]	; (8010094 <VCU_init_on+0x20>)
 8010080:	f7ff ff52 	bl	800ff28 <DIGITAL_IO_SetOutputHigh>


		DIGITAL_IO_SetOutputHigh(&SENSOR_3V3_PWR_EN);
 8010084:	4804      	ldr	r0, [pc, #16]	; (8010098 <VCU_init_on+0x24>)
 8010086:	f7ff ff4f 	bl	800ff28 <DIGITAL_IO_SetOutputHigh>

	/* comm initialization */
	Io_Exp_Init();
 801008a:	f7ff fdc1 	bl	800fc10 <Io_Exp_Init>

}
 801008e:	bd80      	pop	{r7, pc}
 8010090:	0801349c 	.word	0x0801349c
 8010094:	08013488 	.word	0x08013488
 8010098:	080134b0 	.word	0x080134b0

0801009c <InputCapture>:

void InputCapture(void) {
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
	uart_debugg(
 80100a0:	4809      	ldr	r0, [pc, #36]	; (80100c8 <InputCapture+0x2c>)
 80100a2:	f7ff fdab 	bl	800fbfc <uart_debugg>
			"************************in input capture************************\n");
	CState = PreState = 1;
 80100a6:	4b09      	ldr	r3, [pc, #36]	; (80100cc <InputCapture+0x30>)
 80100a8:	2201      	movs	r2, #1
 80100aa:	701a      	strb	r2, [r3, #0]
 80100ac:	4b07      	ldr	r3, [pc, #28]	; (80100cc <InputCapture+0x30>)
 80100ae:	781a      	ldrb	r2, [r3, #0]
 80100b0:	4b07      	ldr	r3, [pc, #28]	; (80100d0 <InputCapture+0x34>)
 80100b2:	701a      	strb	r2, [r3, #0]
	/* Updating the inputs */
	Input_Capture();
 80100b4:	f7f5 f820 	bl	80050f8 <Input_Capture>
	PreState = 0;
 80100b8:	4b04      	ldr	r3, [pc, #16]	; (80100cc <InputCapture+0x30>)
 80100ba:	2200      	movs	r2, #0
 80100bc:	701a      	strb	r2, [r3, #0]
	uart_debugg("************************exit input capture************************\n");
 80100be:	4805      	ldr	r0, [pc, #20]	; (80100d4 <InputCapture+0x38>)
 80100c0:	f7ff fd9c 	bl	800fbfc <uart_debugg>
}
 80100c4:	bd80      	pop	{r7, pc}
 80100c6:	bf00      	nop
 80100c8:	080140d4 	.word	0x080140d4
 80100cc:	1fff4793 	.word	0x1fff4793
 80100d0:	1fff42c8 	.word	0x1fff42c8
 80100d4:	08014118 	.word	0x08014118

080100d8 <Process_Inputs>:

void Process_Inputs(void)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	af00      	add	r7, sp, #0
	uart_debugg("************************in process input************************\n");
 80100dc:	4805      	ldr	r0, [pc, #20]	; (80100f4 <Process_Inputs+0x1c>)
 80100de:	f7ff fd8d 	bl	800fbfc <uart_debugg>
	CState = 2;
 80100e2:	4b05      	ldr	r3, [pc, #20]	; (80100f8 <Process_Inputs+0x20>)
 80100e4:	2202      	movs	r2, #2
 80100e6:	701a      	strb	r2, [r3, #0]
	/* Updating the outputs */
	Process_VcuOutputs_Update();
 80100e8:	f7f0 fc7c 	bl	80009e4 <Process_VcuOutputs_Update>
	uart_debugg("***********************exit process input**************************\n");
 80100ec:	4803      	ldr	r0, [pc, #12]	; (80100fc <Process_Inputs+0x24>)
 80100ee:	f7ff fd85 	bl	800fbfc <uart_debugg>
}
 80100f2:	bd80      	pop	{r7, pc}
 80100f4:	0801415c 	.word	0x0801415c
 80100f8:	1fff42c8 	.word	0x1fff42c8
 80100fc:	080141a0 	.word	0x080141a0

08010100 <Vcu_OutPut>:

void Vcu_OutPut(void)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	af00      	add	r7, sp, #0
	uart_debugg("***********************in vcu output*****************************\n");
 8010104:	4805      	ldr	r0, [pc, #20]	; (801011c <Vcu_OutPut+0x1c>)
 8010106:	f7ff fd79 	bl	800fbfc <uart_debugg>
	CState = 3;
 801010a:	4b05      	ldr	r3, [pc, #20]	; (8010120 <Vcu_OutPut+0x20>)
 801010c:	2203      	movs	r2, #3
 801010e:	701a      	strb	r2, [r3, #0]
	/* Taking the action */
	OutPutAction_Update();
 8010110:	f7f1 fd2c 	bl	8001b6c <OutPutAction_Update>
	uart_debugg("************************exit vcu output******************************\n");
 8010114:	4803      	ldr	r0, [pc, #12]	; (8010124 <Vcu_OutPut+0x24>)
 8010116:	f7ff fd71 	bl	800fbfc <uart_debugg>
}
 801011a:	bd80      	pop	{r7, pc}
 801011c:	080141e8 	.word	0x080141e8
 8010120:	1fff42c8 	.word	0x1fff42c8
 8010124:	0801422c 	.word	0x0801422c

08010128 <reset_on>:

void reset_on(void)
{
 8010128:	b580      	push	{r7, lr}
 801012a:	af00      	add	r7, sp, #0
	//WATCHDOG_Stop();
	Delay(100);
 801012c:	2064      	movs	r0, #100	; 0x64
 801012e:	f7ff fea1 	bl	800fe74 <Delay>
	WATCHDOG_Start();
 8010132:	f7ff ff31 	bl	800ff98 <WATCHDOG_Start>
}
 8010136:	bd80      	pop	{r7, pc}

08010138 <NMI_Handler>:

void NMI_Handler(void)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	af00      	add	r7, sp, #0
	//if(!PreState)
	{
		//PreState = CState;
	//uart_debugg("in watchdog");
	WATCHDOG_ClearAlarm();
 801013c:	f7ff ff38 	bl	800ffb0 <WATCHDOG_ClearAlarm>
	//XMC_SCU_cle
	XMC_SCU_INTERRUPT_ClearEventStatus((XMC_SCU_INTERRUPT_EVENT_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8010140:	2001      	movs	r0, #1
 8010142:	f7f1 ffdd 	bl	8002100 <XMC_SCU_INTERRUPT_ClearEventStatus>
	WATCHDOG_Service();
 8010146:	f7ff ff2d 	bl	800ffa4 <WATCHDOG_Service>
	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
	//uart_debugg("exit watchdog");
	}
}
 801014a:	bd80      	pop	{r7, pc}

0801014c <log>:
 801014c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010150:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8010244 <log+0xf8>
 8010154:	b08b      	sub	sp, #44	; 0x2c
 8010156:	4606      	mov	r6, r0
 8010158:	460f      	mov	r7, r1
 801015a:	f000 f879 	bl	8010250 <__ieee754_log>
 801015e:	f998 3000 	ldrsb.w	r3, [r8]
 8010162:	3301      	adds	r3, #1
 8010164:	4604      	mov	r4, r0
 8010166:	460d      	mov	r5, r1
 8010168:	d00b      	beq.n	8010182 <log+0x36>
 801016a:	4630      	mov	r0, r6
 801016c:	4639      	mov	r1, r7
 801016e:	f000 fa57 	bl	8010620 <__fpclassifyd>
 8010172:	b130      	cbz	r0, 8010182 <log+0x36>
 8010174:	4630      	mov	r0, r6
 8010176:	4639      	mov	r1, r7
 8010178:	2200      	movs	r2, #0
 801017a:	2300      	movs	r3, #0
 801017c:	f000 fecc 	bl	8010f18 <__aeabi_dcmpgt>
 8010180:	b120      	cbz	r0, 801018c <log+0x40>
 8010182:	4620      	mov	r0, r4
 8010184:	4629      	mov	r1, r5
 8010186:	b00b      	add	sp, #44	; 0x2c
 8010188:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801018c:	f898 4000 	ldrb.w	r4, [r8]
 8010190:	4b29      	ldr	r3, [pc, #164]	; (8010238 <log+0xec>)
 8010192:	9008      	str	r0, [sp, #32]
 8010194:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010198:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801019c:	9301      	str	r3, [sp, #4]
 801019e:	b99c      	cbnz	r4, 80101c8 <log+0x7c>
 80101a0:	4d26      	ldr	r5, [pc, #152]	; (801023c <log+0xf0>)
 80101a2:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 80101a6:	4630      	mov	r0, r6
 80101a8:	4639      	mov	r1, r7
 80101aa:	2200      	movs	r2, #0
 80101ac:	2300      	movs	r3, #0
 80101ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80101b2:	f000 fe89 	bl	8010ec8 <__aeabi_dcmpeq>
 80101b6:	2800      	cmp	r0, #0
 80101b8:	d135      	bne.n	8010226 <log+0xda>
 80101ba:	2301      	movs	r3, #1
 80101bc:	9300      	str	r3, [sp, #0]
 80101be:	4668      	mov	r0, sp
 80101c0:	f000 fa5a 	bl	8010678 <matherr>
 80101c4:	b9a8      	cbnz	r0, 80101f2 <log+0xa6>
 80101c6:	e010      	b.n	80101ea <log+0x9e>
 80101c8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8010248 <log+0xfc>
 80101cc:	f04f 0800 	mov.w	r8, #0
 80101d0:	4630      	mov	r0, r6
 80101d2:	4639      	mov	r1, r7
 80101d4:	2200      	movs	r2, #0
 80101d6:	2300      	movs	r3, #0
 80101d8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80101dc:	f000 fe74 	bl	8010ec8 <__aeabi_dcmpeq>
 80101e0:	b998      	cbnz	r0, 801020a <log+0xbe>
 80101e2:	2301      	movs	r3, #1
 80101e4:	2c02      	cmp	r4, #2
 80101e6:	9300      	str	r3, [sp, #0]
 80101e8:	d1e9      	bne.n	80101be <log+0x72>
 80101ea:	f001 fa07 	bl	80115fc <__errno>
 80101ee:	2321      	movs	r3, #33	; 0x21
 80101f0:	6003      	str	r3, [r0, #0]
 80101f2:	4813      	ldr	r0, [pc, #76]	; (8010240 <log+0xf4>)
 80101f4:	f000 fa42 	bl	801067c <nan>
 80101f8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80101fc:	9b08      	ldr	r3, [sp, #32]
 80101fe:	b9ab      	cbnz	r3, 801022c <log+0xe0>
 8010200:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010204:	b00b      	add	sp, #44	; 0x2c
 8010206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801020a:	2302      	movs	r3, #2
 801020c:	429c      	cmp	r4, r3
 801020e:	9300      	str	r3, [sp, #0]
 8010210:	d004      	beq.n	801021c <log+0xd0>
 8010212:	4668      	mov	r0, sp
 8010214:	f000 fa30 	bl	8010678 <matherr>
 8010218:	2800      	cmp	r0, #0
 801021a:	d1ef      	bne.n	80101fc <log+0xb0>
 801021c:	f001 f9ee 	bl	80115fc <__errno>
 8010220:	2322      	movs	r3, #34	; 0x22
 8010222:	6003      	str	r3, [r0, #0]
 8010224:	e7ea      	b.n	80101fc <log+0xb0>
 8010226:	2302      	movs	r3, #2
 8010228:	9300      	str	r3, [sp, #0]
 801022a:	e7f2      	b.n	8010212 <log+0xc6>
 801022c:	f001 f9e6 	bl	80115fc <__errno>
 8010230:	9b08      	ldr	r3, [sp, #32]
 8010232:	6003      	str	r3, [r0, #0]
 8010234:	e7e4      	b.n	8010200 <log+0xb4>
 8010236:	bf00      	nop
 8010238:	08014274 	.word	0x08014274
 801023c:	c7efffff 	.word	0xc7efffff
 8010240:	08014278 	.word	0x08014278
 8010244:	1fff42c9 	.word	0x1fff42c9
 8010248:	fff00000 	.word	0xfff00000
 801024c:	00000000 	.word	0x00000000

08010250 <__ieee754_log>:
 8010250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010254:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010258:	b085      	sub	sp, #20
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	460b      	mov	r3, r1
 8010260:	da5a      	bge.n	8010318 <__ieee754_log+0xc8>
 8010262:	4602      	mov	r2, r0
 8010264:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010268:	4322      	orrs	r2, r4
 801026a:	f000 80f6 	beq.w	801045a <__ieee754_log+0x20a>
 801026e:	2900      	cmp	r1, #0
 8010270:	f2c0 8172 	blt.w	8010558 <__ieee754_log+0x308>
 8010274:	2200      	movs	r2, #0
 8010276:	4bde      	ldr	r3, [pc, #888]	; (80105f0 <__ieee754_log+0x3a0>)
 8010278:	f000 fbbe 	bl	80109f8 <__aeabi_dmul>
 801027c:	460b      	mov	r3, r1
 801027e:	460f      	mov	r7, r1
 8010280:	49dc      	ldr	r1, [pc, #880]	; (80105f4 <__ieee754_log+0x3a4>)
 8010282:	428b      	cmp	r3, r1
 8010284:	4606      	mov	r6, r0
 8010286:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801028a:	dc4a      	bgt.n	8010322 <__ieee754_log+0xd2>
 801028c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010290:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 8010294:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8010298:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 801029c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 80102a0:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 80102a4:	151b      	asrs	r3, r3, #20
 80102a6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80102aa:	ea41 0705 	orr.w	r7, r1, r5
 80102ae:	189c      	adds	r4, r3, r2
 80102b0:	4630      	mov	r0, r6
 80102b2:	2200      	movs	r2, #0
 80102b4:	4bd0      	ldr	r3, [pc, #832]	; (80105f8 <__ieee754_log+0x3a8>)
 80102b6:	4639      	mov	r1, r7
 80102b8:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80102bc:	f000 f9e8 	bl	8010690 <__aeabi_dsub>
 80102c0:	1cab      	adds	r3, r5, #2
 80102c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80102c6:	2b02      	cmp	r3, #2
 80102c8:	4682      	mov	sl, r0
 80102ca:	468b      	mov	fp, r1
 80102cc:	f04f 0200 	mov.w	r2, #0
 80102d0:	dc30      	bgt.n	8010334 <__ieee754_log+0xe4>
 80102d2:	2300      	movs	r3, #0
 80102d4:	f000 fdf8 	bl	8010ec8 <__aeabi_dcmpeq>
 80102d8:	2800      	cmp	r0, #0
 80102da:	f000 80c7 	beq.w	801046c <__ieee754_log+0x21c>
 80102de:	2c00      	cmp	r4, #0
 80102e0:	f000 8143 	beq.w	801056a <__ieee754_log+0x31a>
 80102e4:	4620      	mov	r0, r4
 80102e6:	f000 fb21 	bl	801092c <__aeabi_i2d>
 80102ea:	a3ad      	add	r3, pc, #692	; (adr r3, 80105a0 <__ieee754_log+0x350>)
 80102ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102f0:	4606      	mov	r6, r0
 80102f2:	460f      	mov	r7, r1
 80102f4:	f000 fb80 	bl	80109f8 <__aeabi_dmul>
 80102f8:	a3ab      	add	r3, pc, #684	; (adr r3, 80105a8 <__ieee754_log+0x358>)
 80102fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102fe:	4604      	mov	r4, r0
 8010300:	460d      	mov	r5, r1
 8010302:	4630      	mov	r0, r6
 8010304:	4639      	mov	r1, r7
 8010306:	f000 fb77 	bl	80109f8 <__aeabi_dmul>
 801030a:	4602      	mov	r2, r0
 801030c:	460b      	mov	r3, r1
 801030e:	4620      	mov	r0, r4
 8010310:	4629      	mov	r1, r5
 8010312:	f000 f9bf 	bl	8010694 <__adddf3>
 8010316:	e00a      	b.n	801032e <__ieee754_log+0xde>
 8010318:	49b6      	ldr	r1, [pc, #728]	; (80105f4 <__ieee754_log+0x3a4>)
 801031a:	428b      	cmp	r3, r1
 801031c:	f04f 0200 	mov.w	r2, #0
 8010320:	ddb4      	ble.n	801028c <__ieee754_log+0x3c>
 8010322:	4630      	mov	r0, r6
 8010324:	4639      	mov	r1, r7
 8010326:	4632      	mov	r2, r6
 8010328:	463b      	mov	r3, r7
 801032a:	f000 f9b3 	bl	8010694 <__adddf3>
 801032e:	b005      	add	sp, #20
 8010330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010338:	f000 f9ac 	bl	8010694 <__adddf3>
 801033c:	4602      	mov	r2, r0
 801033e:	460b      	mov	r3, r1
 8010340:	4650      	mov	r0, sl
 8010342:	4659      	mov	r1, fp
 8010344:	f000 fc82 	bl	8010c4c <__aeabi_ddiv>
 8010348:	4606      	mov	r6, r0
 801034a:	460f      	mov	r7, r1
 801034c:	4620      	mov	r0, r4
 801034e:	e9cd 6700 	strd	r6, r7, [sp]
 8010352:	f000 faeb 	bl	801092c <__aeabi_i2d>
 8010356:	4632      	mov	r2, r6
 8010358:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801035c:	463b      	mov	r3, r7
 801035e:	4630      	mov	r0, r6
 8010360:	4639      	mov	r1, r7
 8010362:	f000 fb49 	bl	80109f8 <__aeabi_dmul>
 8010366:	4602      	mov	r2, r0
 8010368:	460b      	mov	r3, r1
 801036a:	4680      	mov	r8, r0
 801036c:	4689      	mov	r9, r1
 801036e:	f000 fb43 	bl	80109f8 <__aeabi_dmul>
 8010372:	a38f      	add	r3, pc, #572	; (adr r3, 80105b0 <__ieee754_log+0x360>)
 8010374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010378:	4606      	mov	r6, r0
 801037a:	460f      	mov	r7, r1
 801037c:	f000 fb3c 	bl	80109f8 <__aeabi_dmul>
 8010380:	a38d      	add	r3, pc, #564	; (adr r3, 80105b8 <__ieee754_log+0x368>)
 8010382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010386:	f000 f985 	bl	8010694 <__adddf3>
 801038a:	4632      	mov	r2, r6
 801038c:	463b      	mov	r3, r7
 801038e:	f000 fb33 	bl	80109f8 <__aeabi_dmul>
 8010392:	a38b      	add	r3, pc, #556	; (adr r3, 80105c0 <__ieee754_log+0x370>)
 8010394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010398:	f000 f97c 	bl	8010694 <__adddf3>
 801039c:	4632      	mov	r2, r6
 801039e:	463b      	mov	r3, r7
 80103a0:	f000 fb2a 	bl	80109f8 <__aeabi_dmul>
 80103a4:	a388      	add	r3, pc, #544	; (adr r3, 80105c8 <__ieee754_log+0x378>)
 80103a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103aa:	f000 f973 	bl	8010694 <__adddf3>
 80103ae:	4642      	mov	r2, r8
 80103b0:	464b      	mov	r3, r9
 80103b2:	f000 fb21 	bl	80109f8 <__aeabi_dmul>
 80103b6:	a386      	add	r3, pc, #536	; (adr r3, 80105d0 <__ieee754_log+0x380>)
 80103b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103bc:	4680      	mov	r8, r0
 80103be:	4689      	mov	r9, r1
 80103c0:	4630      	mov	r0, r6
 80103c2:	4639      	mov	r1, r7
 80103c4:	f000 fb18 	bl	80109f8 <__aeabi_dmul>
 80103c8:	a383      	add	r3, pc, #524	; (adr r3, 80105d8 <__ieee754_log+0x388>)
 80103ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ce:	f000 f961 	bl	8010694 <__adddf3>
 80103d2:	4632      	mov	r2, r6
 80103d4:	463b      	mov	r3, r7
 80103d6:	f000 fb0f 	bl	80109f8 <__aeabi_dmul>
 80103da:	a381      	add	r3, pc, #516	; (adr r3, 80105e0 <__ieee754_log+0x390>)
 80103dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e0:	f000 f958 	bl	8010694 <__adddf3>
 80103e4:	4632      	mov	r2, r6
 80103e6:	463b      	mov	r3, r7
 80103e8:	f000 fb06 	bl	80109f8 <__aeabi_dmul>
 80103ec:	460b      	mov	r3, r1
 80103ee:	4602      	mov	r2, r0
 80103f0:	4649      	mov	r1, r9
 80103f2:	4640      	mov	r0, r8
 80103f4:	f000 f94e 	bl	8010694 <__adddf3>
 80103f8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80103fc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010400:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010404:	3551      	adds	r5, #81	; 0x51
 8010406:	431d      	orrs	r5, r3
 8010408:	2d00      	cmp	r5, #0
 801040a:	4606      	mov	r6, r0
 801040c:	460f      	mov	r7, r1
 801040e:	dd53      	ble.n	80104b8 <__ieee754_log+0x268>
 8010410:	2200      	movs	r2, #0
 8010412:	4b7a      	ldr	r3, [pc, #488]	; (80105fc <__ieee754_log+0x3ac>)
 8010414:	4650      	mov	r0, sl
 8010416:	4659      	mov	r1, fp
 8010418:	f000 faee 	bl	80109f8 <__aeabi_dmul>
 801041c:	4652      	mov	r2, sl
 801041e:	465b      	mov	r3, fp
 8010420:	f000 faea 	bl	80109f8 <__aeabi_dmul>
 8010424:	4680      	mov	r8, r0
 8010426:	4689      	mov	r9, r1
 8010428:	2c00      	cmp	r4, #0
 801042a:	d160      	bne.n	80104ee <__ieee754_log+0x29e>
 801042c:	4632      	mov	r2, r6
 801042e:	463b      	mov	r3, r7
 8010430:	f000 f930 	bl	8010694 <__adddf3>
 8010434:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010438:	f000 fade 	bl	80109f8 <__aeabi_dmul>
 801043c:	4602      	mov	r2, r0
 801043e:	460b      	mov	r3, r1
 8010440:	4640      	mov	r0, r8
 8010442:	4649      	mov	r1, r9
 8010444:	f000 f924 	bl	8010690 <__aeabi_dsub>
 8010448:	4602      	mov	r2, r0
 801044a:	460b      	mov	r3, r1
 801044c:	4650      	mov	r0, sl
 801044e:	4659      	mov	r1, fp
 8010450:	f000 f91e 	bl	8010690 <__aeabi_dsub>
 8010454:	b005      	add	sp, #20
 8010456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801045a:	2200      	movs	r2, #0
 801045c:	2300      	movs	r3, #0
 801045e:	2000      	movs	r0, #0
 8010460:	4967      	ldr	r1, [pc, #412]	; (8010600 <__ieee754_log+0x3b0>)
 8010462:	f000 fbf3 	bl	8010c4c <__aeabi_ddiv>
 8010466:	b005      	add	sp, #20
 8010468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801046c:	4652      	mov	r2, sl
 801046e:	465b      	mov	r3, fp
 8010470:	4650      	mov	r0, sl
 8010472:	4659      	mov	r1, fp
 8010474:	f000 fac0 	bl	80109f8 <__aeabi_dmul>
 8010478:	a35b      	add	r3, pc, #364	; (adr r3, 80105e8 <__ieee754_log+0x398>)
 801047a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801047e:	4606      	mov	r6, r0
 8010480:	460f      	mov	r7, r1
 8010482:	4650      	mov	r0, sl
 8010484:	4659      	mov	r1, fp
 8010486:	f000 fab7 	bl	80109f8 <__aeabi_dmul>
 801048a:	4602      	mov	r2, r0
 801048c:	460b      	mov	r3, r1
 801048e:	2000      	movs	r0, #0
 8010490:	495a      	ldr	r1, [pc, #360]	; (80105fc <__ieee754_log+0x3ac>)
 8010492:	f000 f8fd 	bl	8010690 <__aeabi_dsub>
 8010496:	4602      	mov	r2, r0
 8010498:	460b      	mov	r3, r1
 801049a:	4630      	mov	r0, r6
 801049c:	4639      	mov	r1, r7
 801049e:	f000 faab 	bl	80109f8 <__aeabi_dmul>
 80104a2:	4606      	mov	r6, r0
 80104a4:	460f      	mov	r7, r1
 80104a6:	2c00      	cmp	r4, #0
 80104a8:	d162      	bne.n	8010570 <__ieee754_log+0x320>
 80104aa:	4650      	mov	r0, sl
 80104ac:	4659      	mov	r1, fp
 80104ae:	4632      	mov	r2, r6
 80104b0:	463b      	mov	r3, r7
 80104b2:	f000 f8ed 	bl	8010690 <__aeabi_dsub>
 80104b6:	e73a      	b.n	801032e <__ieee754_log+0xde>
 80104b8:	2c00      	cmp	r4, #0
 80104ba:	f000 80a3 	beq.w	8010604 <__ieee754_log+0x3b4>
 80104be:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80104c2:	a337      	add	r3, pc, #220	; (adr r3, 80105a0 <__ieee754_log+0x350>)
 80104c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c8:	4640      	mov	r0, r8
 80104ca:	4649      	mov	r1, r9
 80104cc:	f000 fa94 	bl	80109f8 <__aeabi_dmul>
 80104d0:	4632      	mov	r2, r6
 80104d2:	463b      	mov	r3, r7
 80104d4:	4604      	mov	r4, r0
 80104d6:	460d      	mov	r5, r1
 80104d8:	4650      	mov	r0, sl
 80104da:	4659      	mov	r1, fp
 80104dc:	f000 f8d8 	bl	8010690 <__aeabi_dsub>
 80104e0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80104e4:	f000 fa88 	bl	80109f8 <__aeabi_dmul>
 80104e8:	4606      	mov	r6, r0
 80104ea:	460f      	mov	r7, r1
 80104ec:	e04c      	b.n	8010588 <__ieee754_log+0x338>
 80104ee:	a32c      	add	r3, pc, #176	; (adr r3, 80105a0 <__ieee754_log+0x350>)
 80104f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80104f8:	f000 fa7e 	bl	80109f8 <__aeabi_dmul>
 80104fc:	4632      	mov	r2, r6
 80104fe:	463b      	mov	r3, r7
 8010500:	4604      	mov	r4, r0
 8010502:	460d      	mov	r5, r1
 8010504:	4640      	mov	r0, r8
 8010506:	4649      	mov	r1, r9
 8010508:	f000 f8c4 	bl	8010694 <__adddf3>
 801050c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010510:	f000 fa72 	bl	80109f8 <__aeabi_dmul>
 8010514:	a324      	add	r3, pc, #144	; (adr r3, 80105a8 <__ieee754_log+0x358>)
 8010516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801051a:	4606      	mov	r6, r0
 801051c:	460f      	mov	r7, r1
 801051e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010522:	f000 fa69 	bl	80109f8 <__aeabi_dmul>
 8010526:	4602      	mov	r2, r0
 8010528:	460b      	mov	r3, r1
 801052a:	4630      	mov	r0, r6
 801052c:	4639      	mov	r1, r7
 801052e:	f000 f8b1 	bl	8010694 <__adddf3>
 8010532:	4602      	mov	r2, r0
 8010534:	460b      	mov	r3, r1
 8010536:	4640      	mov	r0, r8
 8010538:	4649      	mov	r1, r9
 801053a:	f000 f8a9 	bl	8010690 <__aeabi_dsub>
 801053e:	4652      	mov	r2, sl
 8010540:	465b      	mov	r3, fp
 8010542:	f000 f8a5 	bl	8010690 <__aeabi_dsub>
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	4620      	mov	r0, r4
 801054c:	4629      	mov	r1, r5
 801054e:	f000 f89f 	bl	8010690 <__aeabi_dsub>
 8010552:	b005      	add	sp, #20
 8010554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010558:	4602      	mov	r2, r0
 801055a:	460b      	mov	r3, r1
 801055c:	f000 f898 	bl	8010690 <__aeabi_dsub>
 8010560:	2200      	movs	r2, #0
 8010562:	2300      	movs	r3, #0
 8010564:	f000 fb72 	bl	8010c4c <__aeabi_ddiv>
 8010568:	e6e1      	b.n	801032e <__ieee754_log+0xde>
 801056a:	2000      	movs	r0, #0
 801056c:	2100      	movs	r1, #0
 801056e:	e6de      	b.n	801032e <__ieee754_log+0xde>
 8010570:	4620      	mov	r0, r4
 8010572:	f000 f9db 	bl	801092c <__aeabi_i2d>
 8010576:	a30a      	add	r3, pc, #40	; (adr r3, 80105a0 <__ieee754_log+0x350>)
 8010578:	e9d3 2300 	ldrd	r2, r3, [r3]
 801057c:	4680      	mov	r8, r0
 801057e:	4689      	mov	r9, r1
 8010580:	f000 fa3a 	bl	80109f8 <__aeabi_dmul>
 8010584:	4604      	mov	r4, r0
 8010586:	460d      	mov	r5, r1
 8010588:	a307      	add	r3, pc, #28	; (adr r3, 80105a8 <__ieee754_log+0x358>)
 801058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058e:	4640      	mov	r0, r8
 8010590:	4649      	mov	r1, r9
 8010592:	f000 fa31 	bl	80109f8 <__aeabi_dmul>
 8010596:	4602      	mov	r2, r0
 8010598:	460b      	mov	r3, r1
 801059a:	4630      	mov	r0, r6
 801059c:	4639      	mov	r1, r7
 801059e:	e7cc      	b.n	801053a <__ieee754_log+0x2ea>
 80105a0:	fee00000 	.word	0xfee00000
 80105a4:	3fe62e42 	.word	0x3fe62e42
 80105a8:	35793c76 	.word	0x35793c76
 80105ac:	3dea39ef 	.word	0x3dea39ef
 80105b0:	df3e5244 	.word	0xdf3e5244
 80105b4:	3fc2f112 	.word	0x3fc2f112
 80105b8:	96cb03de 	.word	0x96cb03de
 80105bc:	3fc74664 	.word	0x3fc74664
 80105c0:	94229359 	.word	0x94229359
 80105c4:	3fd24924 	.word	0x3fd24924
 80105c8:	55555593 	.word	0x55555593
 80105cc:	3fe55555 	.word	0x3fe55555
 80105d0:	d078c69f 	.word	0xd078c69f
 80105d4:	3fc39a09 	.word	0x3fc39a09
 80105d8:	1d8e78af 	.word	0x1d8e78af
 80105dc:	3fcc71c5 	.word	0x3fcc71c5
 80105e0:	9997fa04 	.word	0x9997fa04
 80105e4:	3fd99999 	.word	0x3fd99999
 80105e8:	55555555 	.word	0x55555555
 80105ec:	3fd55555 	.word	0x3fd55555
 80105f0:	43500000 	.word	0x43500000
 80105f4:	7fefffff 	.word	0x7fefffff
 80105f8:	3ff00000 	.word	0x3ff00000
 80105fc:	3fe00000 	.word	0x3fe00000
 8010600:	c3500000 	.word	0xc3500000
 8010604:	4602      	mov	r2, r0
 8010606:	460b      	mov	r3, r1
 8010608:	4650      	mov	r0, sl
 801060a:	4659      	mov	r1, fp
 801060c:	f000 f840 	bl	8010690 <__aeabi_dsub>
 8010610:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010614:	f000 f9f0 	bl	80109f8 <__aeabi_dmul>
 8010618:	e716      	b.n	8010448 <__ieee754_log+0x1f8>
 801061a:	bf00      	nop
 801061c:	f3af 8000 	nop.w

08010620 <__fpclassifyd>:
 8010620:	b410      	push	{r4}
 8010622:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8010626:	460b      	mov	r3, r1
 8010628:	d008      	beq.n	801063c <__fpclassifyd+0x1c>
 801062a:	4a11      	ldr	r2, [pc, #68]	; (8010670 <__fpclassifyd+0x50>)
 801062c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010630:	4291      	cmp	r1, r2
 8010632:	d808      	bhi.n	8010646 <__fpclassifyd+0x26>
 8010634:	2004      	movs	r0, #4
 8010636:	f85d 4b04 	ldr.w	r4, [sp], #4
 801063a:	4770      	bx	lr
 801063c:	b918      	cbnz	r0, 8010646 <__fpclassifyd+0x26>
 801063e:	2002      	movs	r0, #2
 8010640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010644:	4770      	bx	lr
 8010646:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 801064a:	4a09      	ldr	r2, [pc, #36]	; (8010670 <__fpclassifyd+0x50>)
 801064c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010650:	4293      	cmp	r3, r2
 8010652:	d9ef      	bls.n	8010634 <__fpclassifyd+0x14>
 8010654:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010658:	d201      	bcs.n	801065e <__fpclassifyd+0x3e>
 801065a:	2003      	movs	r0, #3
 801065c:	e7eb      	b.n	8010636 <__fpclassifyd+0x16>
 801065e:	4b05      	ldr	r3, [pc, #20]	; (8010674 <__fpclassifyd+0x54>)
 8010660:	429c      	cmp	r4, r3
 8010662:	d001      	beq.n	8010668 <__fpclassifyd+0x48>
 8010664:	2000      	movs	r0, #0
 8010666:	e7e6      	b.n	8010636 <__fpclassifyd+0x16>
 8010668:	fab0 f080 	clz	r0, r0
 801066c:	0940      	lsrs	r0, r0, #5
 801066e:	e7e2      	b.n	8010636 <__fpclassifyd+0x16>
 8010670:	7fdfffff 	.word	0x7fdfffff
 8010674:	7ff00000 	.word	0x7ff00000

08010678 <matherr>:
 8010678:	2000      	movs	r0, #0
 801067a:	4770      	bx	lr

0801067c <nan>:
 801067c:	2000      	movs	r0, #0
 801067e:	4901      	ldr	r1, [pc, #4]	; (8010684 <nan+0x8>)
 8010680:	4770      	bx	lr
 8010682:	bf00      	nop
 8010684:	7ff80000 	.word	0x7ff80000

08010688 <__aeabi_drsub>:
 8010688:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 801068c:	e002      	b.n	8010694 <__adddf3>
 801068e:	bf00      	nop

08010690 <__aeabi_dsub>:
 8010690:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08010694 <__adddf3>:
 8010694:	b530      	push	{r4, r5, lr}
 8010696:	ea4f 0441 	mov.w	r4, r1, lsl #1
 801069a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 801069e:	ea94 0f05 	teq	r4, r5
 80106a2:	bf08      	it	eq
 80106a4:	ea90 0f02 	teqeq	r0, r2
 80106a8:	bf1f      	itttt	ne
 80106aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80106ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80106b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80106b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80106ba:	f000 80e2 	beq.w	8010882 <__adddf3+0x1ee>
 80106be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80106c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80106c6:	bfb8      	it	lt
 80106c8:	426d      	neglt	r5, r5
 80106ca:	dd0c      	ble.n	80106e6 <__adddf3+0x52>
 80106cc:	442c      	add	r4, r5
 80106ce:	ea80 0202 	eor.w	r2, r0, r2
 80106d2:	ea81 0303 	eor.w	r3, r1, r3
 80106d6:	ea82 0000 	eor.w	r0, r2, r0
 80106da:	ea83 0101 	eor.w	r1, r3, r1
 80106de:	ea80 0202 	eor.w	r2, r0, r2
 80106e2:	ea81 0303 	eor.w	r3, r1, r3
 80106e6:	2d36      	cmp	r5, #54	; 0x36
 80106e8:	bf88      	it	hi
 80106ea:	bd30      	pophi	{r4, r5, pc}
 80106ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80106f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80106f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80106f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80106fc:	d002      	beq.n	8010704 <__adddf3+0x70>
 80106fe:	4240      	negs	r0, r0
 8010700:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010704:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010708:	ea4f 3303 	mov.w	r3, r3, lsl #12
 801070c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010710:	d002      	beq.n	8010718 <__adddf3+0x84>
 8010712:	4252      	negs	r2, r2
 8010714:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010718:	ea94 0f05 	teq	r4, r5
 801071c:	f000 80a7 	beq.w	801086e <__adddf3+0x1da>
 8010720:	f1a4 0401 	sub.w	r4, r4, #1
 8010724:	f1d5 0e20 	rsbs	lr, r5, #32
 8010728:	db0d      	blt.n	8010746 <__adddf3+0xb2>
 801072a:	fa02 fc0e 	lsl.w	ip, r2, lr
 801072e:	fa22 f205 	lsr.w	r2, r2, r5
 8010732:	1880      	adds	r0, r0, r2
 8010734:	f141 0100 	adc.w	r1, r1, #0
 8010738:	fa03 f20e 	lsl.w	r2, r3, lr
 801073c:	1880      	adds	r0, r0, r2
 801073e:	fa43 f305 	asr.w	r3, r3, r5
 8010742:	4159      	adcs	r1, r3
 8010744:	e00e      	b.n	8010764 <__adddf3+0xd0>
 8010746:	f1a5 0520 	sub.w	r5, r5, #32
 801074a:	f10e 0e20 	add.w	lr, lr, #32
 801074e:	2a01      	cmp	r2, #1
 8010750:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010754:	bf28      	it	cs
 8010756:	f04c 0c02 	orrcs.w	ip, ip, #2
 801075a:	fa43 f305 	asr.w	r3, r3, r5
 801075e:	18c0      	adds	r0, r0, r3
 8010760:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010764:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010768:	d507      	bpl.n	801077a <__adddf3+0xe6>
 801076a:	f04f 0e00 	mov.w	lr, #0
 801076e:	f1dc 0c00 	rsbs	ip, ip, #0
 8010772:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010776:	eb6e 0101 	sbc.w	r1, lr, r1
 801077a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801077e:	d31b      	bcc.n	80107b8 <__adddf3+0x124>
 8010780:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010784:	d30c      	bcc.n	80107a0 <__adddf3+0x10c>
 8010786:	0849      	lsrs	r1, r1, #1
 8010788:	ea5f 0030 	movs.w	r0, r0, rrx
 801078c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010790:	f104 0401 	add.w	r4, r4, #1
 8010794:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010798:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 801079c:	f080 809a 	bcs.w	80108d4 <__adddf3+0x240>
 80107a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80107a4:	bf08      	it	eq
 80107a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80107aa:	f150 0000 	adcs.w	r0, r0, #0
 80107ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80107b2:	ea41 0105 	orr.w	r1, r1, r5
 80107b6:	bd30      	pop	{r4, r5, pc}
 80107b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80107bc:	4140      	adcs	r0, r0
 80107be:	eb41 0101 	adc.w	r1, r1, r1
 80107c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80107c6:	f1a4 0401 	sub.w	r4, r4, #1
 80107ca:	d1e9      	bne.n	80107a0 <__adddf3+0x10c>
 80107cc:	f091 0f00 	teq	r1, #0
 80107d0:	bf04      	itt	eq
 80107d2:	4601      	moveq	r1, r0
 80107d4:	2000      	moveq	r0, #0
 80107d6:	fab1 f381 	clz	r3, r1
 80107da:	bf08      	it	eq
 80107dc:	3320      	addeq	r3, #32
 80107de:	f1a3 030b 	sub.w	r3, r3, #11
 80107e2:	f1b3 0220 	subs.w	r2, r3, #32
 80107e6:	da0c      	bge.n	8010802 <__adddf3+0x16e>
 80107e8:	320c      	adds	r2, #12
 80107ea:	dd08      	ble.n	80107fe <__adddf3+0x16a>
 80107ec:	f102 0c14 	add.w	ip, r2, #20
 80107f0:	f1c2 020c 	rsb	r2, r2, #12
 80107f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80107f8:	fa21 f102 	lsr.w	r1, r1, r2
 80107fc:	e00c      	b.n	8010818 <__adddf3+0x184>
 80107fe:	f102 0214 	add.w	r2, r2, #20
 8010802:	bfd8      	it	le
 8010804:	f1c2 0c20 	rsble	ip, r2, #32
 8010808:	fa01 f102 	lsl.w	r1, r1, r2
 801080c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010810:	bfdc      	itt	le
 8010812:	ea41 010c 	orrle.w	r1, r1, ip
 8010816:	4090      	lslle	r0, r2
 8010818:	1ae4      	subs	r4, r4, r3
 801081a:	bfa2      	ittt	ge
 801081c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010820:	4329      	orrge	r1, r5
 8010822:	bd30      	popge	{r4, r5, pc}
 8010824:	ea6f 0404 	mvn.w	r4, r4
 8010828:	3c1f      	subs	r4, #31
 801082a:	da1c      	bge.n	8010866 <__adddf3+0x1d2>
 801082c:	340c      	adds	r4, #12
 801082e:	dc0e      	bgt.n	801084e <__adddf3+0x1ba>
 8010830:	f104 0414 	add.w	r4, r4, #20
 8010834:	f1c4 0220 	rsb	r2, r4, #32
 8010838:	fa20 f004 	lsr.w	r0, r0, r4
 801083c:	fa01 f302 	lsl.w	r3, r1, r2
 8010840:	ea40 0003 	orr.w	r0, r0, r3
 8010844:	fa21 f304 	lsr.w	r3, r1, r4
 8010848:	ea45 0103 	orr.w	r1, r5, r3
 801084c:	bd30      	pop	{r4, r5, pc}
 801084e:	f1c4 040c 	rsb	r4, r4, #12
 8010852:	f1c4 0220 	rsb	r2, r4, #32
 8010856:	fa20 f002 	lsr.w	r0, r0, r2
 801085a:	fa01 f304 	lsl.w	r3, r1, r4
 801085e:	ea40 0003 	orr.w	r0, r0, r3
 8010862:	4629      	mov	r1, r5
 8010864:	bd30      	pop	{r4, r5, pc}
 8010866:	fa21 f004 	lsr.w	r0, r1, r4
 801086a:	4629      	mov	r1, r5
 801086c:	bd30      	pop	{r4, r5, pc}
 801086e:	f094 0f00 	teq	r4, #0
 8010872:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010876:	bf06      	itte	eq
 8010878:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 801087c:	3401      	addeq	r4, #1
 801087e:	3d01      	subne	r5, #1
 8010880:	e74e      	b.n	8010720 <__adddf3+0x8c>
 8010882:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010886:	bf18      	it	ne
 8010888:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 801088c:	d029      	beq.n	80108e2 <__adddf3+0x24e>
 801088e:	ea94 0f05 	teq	r4, r5
 8010892:	bf08      	it	eq
 8010894:	ea90 0f02 	teqeq	r0, r2
 8010898:	d005      	beq.n	80108a6 <__adddf3+0x212>
 801089a:	ea54 0c00 	orrs.w	ip, r4, r0
 801089e:	bf04      	itt	eq
 80108a0:	4619      	moveq	r1, r3
 80108a2:	4610      	moveq	r0, r2
 80108a4:	bd30      	pop	{r4, r5, pc}
 80108a6:	ea91 0f03 	teq	r1, r3
 80108aa:	bf1e      	ittt	ne
 80108ac:	2100      	movne	r1, #0
 80108ae:	2000      	movne	r0, #0
 80108b0:	bd30      	popne	{r4, r5, pc}
 80108b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80108b6:	d105      	bne.n	80108c4 <__adddf3+0x230>
 80108b8:	0040      	lsls	r0, r0, #1
 80108ba:	4149      	adcs	r1, r1
 80108bc:	bf28      	it	cs
 80108be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80108c2:	bd30      	pop	{r4, r5, pc}
 80108c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80108c8:	bf3c      	itt	cc
 80108ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80108ce:	bd30      	popcc	{r4, r5, pc}
 80108d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80108d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80108d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80108dc:	f04f 0000 	mov.w	r0, #0
 80108e0:	bd30      	pop	{r4, r5, pc}
 80108e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80108e6:	bf1a      	itte	ne
 80108e8:	4619      	movne	r1, r3
 80108ea:	4610      	movne	r0, r2
 80108ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80108f0:	bf1c      	itt	ne
 80108f2:	460b      	movne	r3, r1
 80108f4:	4602      	movne	r2, r0
 80108f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80108fa:	bf06      	itte	eq
 80108fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010900:	ea91 0f03 	teqeq	r1, r3
 8010904:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010908:	bd30      	pop	{r4, r5, pc}
 801090a:	bf00      	nop

0801090c <__aeabi_ui2d>:
 801090c:	f090 0f00 	teq	r0, #0
 8010910:	bf04      	itt	eq
 8010912:	2100      	moveq	r1, #0
 8010914:	4770      	bxeq	lr
 8010916:	b530      	push	{r4, r5, lr}
 8010918:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801091c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010920:	f04f 0500 	mov.w	r5, #0
 8010924:	f04f 0100 	mov.w	r1, #0
 8010928:	e750      	b.n	80107cc <__adddf3+0x138>
 801092a:	bf00      	nop

0801092c <__aeabi_i2d>:
 801092c:	f090 0f00 	teq	r0, #0
 8010930:	bf04      	itt	eq
 8010932:	2100      	moveq	r1, #0
 8010934:	4770      	bxeq	lr
 8010936:	b530      	push	{r4, r5, lr}
 8010938:	f44f 6480 	mov.w	r4, #1024	; 0x400
 801093c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010940:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010944:	bf48      	it	mi
 8010946:	4240      	negmi	r0, r0
 8010948:	f04f 0100 	mov.w	r1, #0
 801094c:	e73e      	b.n	80107cc <__adddf3+0x138>
 801094e:	bf00      	nop

08010950 <__aeabi_f2d>:
 8010950:	0042      	lsls	r2, r0, #1
 8010952:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010956:	ea4f 0131 	mov.w	r1, r1, rrx
 801095a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 801095e:	bf1f      	itttt	ne
 8010960:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010964:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010968:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 801096c:	4770      	bxne	lr
 801096e:	f092 0f00 	teq	r2, #0
 8010972:	bf14      	ite	ne
 8010974:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010978:	4770      	bxeq	lr
 801097a:	b530      	push	{r4, r5, lr}
 801097c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010980:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010984:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010988:	e720      	b.n	80107cc <__adddf3+0x138>
 801098a:	bf00      	nop

0801098c <__aeabi_ul2d>:
 801098c:	ea50 0201 	orrs.w	r2, r0, r1
 8010990:	bf08      	it	eq
 8010992:	4770      	bxeq	lr
 8010994:	b530      	push	{r4, r5, lr}
 8010996:	f04f 0500 	mov.w	r5, #0
 801099a:	e00a      	b.n	80109b2 <__aeabi_l2d+0x16>

0801099c <__aeabi_l2d>:
 801099c:	ea50 0201 	orrs.w	r2, r0, r1
 80109a0:	bf08      	it	eq
 80109a2:	4770      	bxeq	lr
 80109a4:	b530      	push	{r4, r5, lr}
 80109a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80109aa:	d502      	bpl.n	80109b2 <__aeabi_l2d+0x16>
 80109ac:	4240      	negs	r0, r0
 80109ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80109b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80109b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80109ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80109be:	f43f aedc 	beq.w	801077a <__adddf3+0xe6>
 80109c2:	f04f 0203 	mov.w	r2, #3
 80109c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80109ca:	bf18      	it	ne
 80109cc:	3203      	addne	r2, #3
 80109ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80109d2:	bf18      	it	ne
 80109d4:	3203      	addne	r2, #3
 80109d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80109da:	f1c2 0320 	rsb	r3, r2, #32
 80109de:	fa00 fc03 	lsl.w	ip, r0, r3
 80109e2:	fa20 f002 	lsr.w	r0, r0, r2
 80109e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80109ea:	ea40 000e 	orr.w	r0, r0, lr
 80109ee:	fa21 f102 	lsr.w	r1, r1, r2
 80109f2:	4414      	add	r4, r2
 80109f4:	e6c1      	b.n	801077a <__adddf3+0xe6>
 80109f6:	bf00      	nop

080109f8 <__aeabi_dmul>:
 80109f8:	b570      	push	{r4, r5, r6, lr}
 80109fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80109fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010a02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010a06:	bf1d      	ittte	ne
 8010a08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010a0c:	ea94 0f0c 	teqne	r4, ip
 8010a10:	ea95 0f0c 	teqne	r5, ip
 8010a14:	f000 f8de 	bleq	8010bd4 <__aeabi_dmul+0x1dc>
 8010a18:	442c      	add	r4, r5
 8010a1a:	ea81 0603 	eor.w	r6, r1, r3
 8010a1e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010a22:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010a26:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010a2a:	bf18      	it	ne
 8010a2c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010a30:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010a34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010a38:	d038      	beq.n	8010aac <__aeabi_dmul+0xb4>
 8010a3a:	fba0 ce02 	umull	ip, lr, r0, r2
 8010a3e:	f04f 0500 	mov.w	r5, #0
 8010a42:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010a46:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010a4a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010a4e:	f04f 0600 	mov.w	r6, #0
 8010a52:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010a56:	f09c 0f00 	teq	ip, #0
 8010a5a:	bf18      	it	ne
 8010a5c:	f04e 0e01 	orrne.w	lr, lr, #1
 8010a60:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010a64:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010a68:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010a6c:	d204      	bcs.n	8010a78 <__aeabi_dmul+0x80>
 8010a6e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010a72:	416d      	adcs	r5, r5
 8010a74:	eb46 0606 	adc.w	r6, r6, r6
 8010a78:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010a7c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010a80:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010a84:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010a88:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010a8c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010a90:	bf88      	it	hi
 8010a92:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010a96:	d81e      	bhi.n	8010ad6 <__aeabi_dmul+0xde>
 8010a98:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010a9c:	bf08      	it	eq
 8010a9e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010aa2:	f150 0000 	adcs.w	r0, r0, #0
 8010aa6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010aaa:	bd70      	pop	{r4, r5, r6, pc}
 8010aac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010ab0:	ea46 0101 	orr.w	r1, r6, r1
 8010ab4:	ea40 0002 	orr.w	r0, r0, r2
 8010ab8:	ea81 0103 	eor.w	r1, r1, r3
 8010abc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010ac0:	bfc2      	ittt	gt
 8010ac2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010ac6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010aca:	bd70      	popgt	{r4, r5, r6, pc}
 8010acc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010ad0:	f04f 0e00 	mov.w	lr, #0
 8010ad4:	3c01      	subs	r4, #1
 8010ad6:	f300 80ab 	bgt.w	8010c30 <__aeabi_dmul+0x238>
 8010ada:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010ade:	bfde      	ittt	le
 8010ae0:	2000      	movle	r0, #0
 8010ae2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010ae6:	bd70      	pople	{r4, r5, r6, pc}
 8010ae8:	f1c4 0400 	rsb	r4, r4, #0
 8010aec:	3c20      	subs	r4, #32
 8010aee:	da35      	bge.n	8010b5c <__aeabi_dmul+0x164>
 8010af0:	340c      	adds	r4, #12
 8010af2:	dc1b      	bgt.n	8010b2c <__aeabi_dmul+0x134>
 8010af4:	f104 0414 	add.w	r4, r4, #20
 8010af8:	f1c4 0520 	rsb	r5, r4, #32
 8010afc:	fa00 f305 	lsl.w	r3, r0, r5
 8010b00:	fa20 f004 	lsr.w	r0, r0, r4
 8010b04:	fa01 f205 	lsl.w	r2, r1, r5
 8010b08:	ea40 0002 	orr.w	r0, r0, r2
 8010b0c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010b10:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010b14:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010b18:	fa21 f604 	lsr.w	r6, r1, r4
 8010b1c:	eb42 0106 	adc.w	r1, r2, r6
 8010b20:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010b24:	bf08      	it	eq
 8010b26:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}
 8010b2c:	f1c4 040c 	rsb	r4, r4, #12
 8010b30:	f1c4 0520 	rsb	r5, r4, #32
 8010b34:	fa00 f304 	lsl.w	r3, r0, r4
 8010b38:	fa20 f005 	lsr.w	r0, r0, r5
 8010b3c:	fa01 f204 	lsl.w	r2, r1, r4
 8010b40:	ea40 0002 	orr.w	r0, r0, r2
 8010b44:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010b48:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010b4c:	f141 0100 	adc.w	r1, r1, #0
 8010b50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010b54:	bf08      	it	eq
 8010b56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010b5a:	bd70      	pop	{r4, r5, r6, pc}
 8010b5c:	f1c4 0520 	rsb	r5, r4, #32
 8010b60:	fa00 f205 	lsl.w	r2, r0, r5
 8010b64:	ea4e 0e02 	orr.w	lr, lr, r2
 8010b68:	fa20 f304 	lsr.w	r3, r0, r4
 8010b6c:	fa01 f205 	lsl.w	r2, r1, r5
 8010b70:	ea43 0302 	orr.w	r3, r3, r2
 8010b74:	fa21 f004 	lsr.w	r0, r1, r4
 8010b78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010b7c:	fa21 f204 	lsr.w	r2, r1, r4
 8010b80:	ea20 0002 	bic.w	r0, r0, r2
 8010b84:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010b88:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010b8c:	bf08      	it	eq
 8010b8e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010b92:	bd70      	pop	{r4, r5, r6, pc}
 8010b94:	f094 0f00 	teq	r4, #0
 8010b98:	d10f      	bne.n	8010bba <__aeabi_dmul+0x1c2>
 8010b9a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010b9e:	0040      	lsls	r0, r0, #1
 8010ba0:	eb41 0101 	adc.w	r1, r1, r1
 8010ba4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010ba8:	bf08      	it	eq
 8010baa:	3c01      	subeq	r4, #1
 8010bac:	d0f7      	beq.n	8010b9e <__aeabi_dmul+0x1a6>
 8010bae:	ea41 0106 	orr.w	r1, r1, r6
 8010bb2:	f095 0f00 	teq	r5, #0
 8010bb6:	bf18      	it	ne
 8010bb8:	4770      	bxne	lr
 8010bba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010bbe:	0052      	lsls	r2, r2, #1
 8010bc0:	eb43 0303 	adc.w	r3, r3, r3
 8010bc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010bc8:	bf08      	it	eq
 8010bca:	3d01      	subeq	r5, #1
 8010bcc:	d0f7      	beq.n	8010bbe <__aeabi_dmul+0x1c6>
 8010bce:	ea43 0306 	orr.w	r3, r3, r6
 8010bd2:	4770      	bx	lr
 8010bd4:	ea94 0f0c 	teq	r4, ip
 8010bd8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010bdc:	bf18      	it	ne
 8010bde:	ea95 0f0c 	teqne	r5, ip
 8010be2:	d00c      	beq.n	8010bfe <__aeabi_dmul+0x206>
 8010be4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010be8:	bf18      	it	ne
 8010bea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010bee:	d1d1      	bne.n	8010b94 <__aeabi_dmul+0x19c>
 8010bf0:	ea81 0103 	eor.w	r1, r1, r3
 8010bf4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010bf8:	f04f 0000 	mov.w	r0, #0
 8010bfc:	bd70      	pop	{r4, r5, r6, pc}
 8010bfe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010c02:	bf06      	itte	eq
 8010c04:	4610      	moveq	r0, r2
 8010c06:	4619      	moveq	r1, r3
 8010c08:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010c0c:	d019      	beq.n	8010c42 <__aeabi_dmul+0x24a>
 8010c0e:	ea94 0f0c 	teq	r4, ip
 8010c12:	d102      	bne.n	8010c1a <__aeabi_dmul+0x222>
 8010c14:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010c18:	d113      	bne.n	8010c42 <__aeabi_dmul+0x24a>
 8010c1a:	ea95 0f0c 	teq	r5, ip
 8010c1e:	d105      	bne.n	8010c2c <__aeabi_dmul+0x234>
 8010c20:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010c24:	bf1c      	itt	ne
 8010c26:	4610      	movne	r0, r2
 8010c28:	4619      	movne	r1, r3
 8010c2a:	d10a      	bne.n	8010c42 <__aeabi_dmul+0x24a>
 8010c2c:	ea81 0103 	eor.w	r1, r1, r3
 8010c30:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010c34:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010c38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c3c:	f04f 0000 	mov.w	r0, #0
 8010c40:	bd70      	pop	{r4, r5, r6, pc}
 8010c42:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010c46:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010c4a:	bd70      	pop	{r4, r5, r6, pc}

08010c4c <__aeabi_ddiv>:
 8010c4c:	b570      	push	{r4, r5, r6, lr}
 8010c4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010c52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010c56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010c5a:	bf1d      	ittte	ne
 8010c5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010c60:	ea94 0f0c 	teqne	r4, ip
 8010c64:	ea95 0f0c 	teqne	r5, ip
 8010c68:	f000 f8a7 	bleq	8010dba <__aeabi_ddiv+0x16e>
 8010c6c:	eba4 0405 	sub.w	r4, r4, r5
 8010c70:	ea81 0e03 	eor.w	lr, r1, r3
 8010c74:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010c78:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010c7c:	f000 8088 	beq.w	8010d90 <__aeabi_ddiv+0x144>
 8010c80:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010c84:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010c88:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010c8c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010c90:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010c94:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010c98:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010c9c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010ca0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010ca4:	429d      	cmp	r5, r3
 8010ca6:	bf08      	it	eq
 8010ca8:	4296      	cmpeq	r6, r2
 8010caa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010cae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010cb2:	d202      	bcs.n	8010cba <__aeabi_ddiv+0x6e>
 8010cb4:	085b      	lsrs	r3, r3, #1
 8010cb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8010cba:	1ab6      	subs	r6, r6, r2
 8010cbc:	eb65 0503 	sbc.w	r5, r5, r3
 8010cc0:	085b      	lsrs	r3, r3, #1
 8010cc2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010cc6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010cca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010cce:	ebb6 0e02 	subs.w	lr, r6, r2
 8010cd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010cd6:	bf22      	ittt	cs
 8010cd8:	1ab6      	subcs	r6, r6, r2
 8010cda:	4675      	movcs	r5, lr
 8010cdc:	ea40 000c 	orrcs.w	r0, r0, ip
 8010ce0:	085b      	lsrs	r3, r3, #1
 8010ce2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010ce6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010cea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010cee:	bf22      	ittt	cs
 8010cf0:	1ab6      	subcs	r6, r6, r2
 8010cf2:	4675      	movcs	r5, lr
 8010cf4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010cf8:	085b      	lsrs	r3, r3, #1
 8010cfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8010cfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010d02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010d06:	bf22      	ittt	cs
 8010d08:	1ab6      	subcs	r6, r6, r2
 8010d0a:	4675      	movcs	r5, lr
 8010d0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010d10:	085b      	lsrs	r3, r3, #1
 8010d12:	ea4f 0232 	mov.w	r2, r2, rrx
 8010d16:	ebb6 0e02 	subs.w	lr, r6, r2
 8010d1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010d1e:	bf22      	ittt	cs
 8010d20:	1ab6      	subcs	r6, r6, r2
 8010d22:	4675      	movcs	r5, lr
 8010d24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010d28:	ea55 0e06 	orrs.w	lr, r5, r6
 8010d2c:	d018      	beq.n	8010d60 <__aeabi_ddiv+0x114>
 8010d2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010d32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010d36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8010d3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010d3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010d42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010d46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8010d4a:	d1c0      	bne.n	8010cce <__aeabi_ddiv+0x82>
 8010d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010d50:	d10b      	bne.n	8010d6a <__aeabi_ddiv+0x11e>
 8010d52:	ea41 0100 	orr.w	r1, r1, r0
 8010d56:	f04f 0000 	mov.w	r0, #0
 8010d5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010d5e:	e7b6      	b.n	8010cce <__aeabi_ddiv+0x82>
 8010d60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010d64:	bf04      	itt	eq
 8010d66:	4301      	orreq	r1, r0
 8010d68:	2000      	moveq	r0, #0
 8010d6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010d6e:	bf88      	it	hi
 8010d70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010d74:	f63f aeaf 	bhi.w	8010ad6 <__aeabi_dmul+0xde>
 8010d78:	ebb5 0c03 	subs.w	ip, r5, r3
 8010d7c:	bf04      	itt	eq
 8010d7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010d82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010d86:	f150 0000 	adcs.w	r0, r0, #0
 8010d8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010d8e:	bd70      	pop	{r4, r5, r6, pc}
 8010d90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010d94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010d98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8010d9c:	bfc2      	ittt	gt
 8010d9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010da2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010da6:	bd70      	popgt	{r4, r5, r6, pc}
 8010da8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010dac:	f04f 0e00 	mov.w	lr, #0
 8010db0:	3c01      	subs	r4, #1
 8010db2:	e690      	b.n	8010ad6 <__aeabi_dmul+0xde>
 8010db4:	ea45 0e06 	orr.w	lr, r5, r6
 8010db8:	e68d      	b.n	8010ad6 <__aeabi_dmul+0xde>
 8010dba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010dbe:	ea94 0f0c 	teq	r4, ip
 8010dc2:	bf08      	it	eq
 8010dc4:	ea95 0f0c 	teqeq	r5, ip
 8010dc8:	f43f af3b 	beq.w	8010c42 <__aeabi_dmul+0x24a>
 8010dcc:	ea94 0f0c 	teq	r4, ip
 8010dd0:	d10a      	bne.n	8010de8 <__aeabi_ddiv+0x19c>
 8010dd2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010dd6:	f47f af34 	bne.w	8010c42 <__aeabi_dmul+0x24a>
 8010dda:	ea95 0f0c 	teq	r5, ip
 8010dde:	f47f af25 	bne.w	8010c2c <__aeabi_dmul+0x234>
 8010de2:	4610      	mov	r0, r2
 8010de4:	4619      	mov	r1, r3
 8010de6:	e72c      	b.n	8010c42 <__aeabi_dmul+0x24a>
 8010de8:	ea95 0f0c 	teq	r5, ip
 8010dec:	d106      	bne.n	8010dfc <__aeabi_ddiv+0x1b0>
 8010dee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010df2:	f43f aefd 	beq.w	8010bf0 <__aeabi_dmul+0x1f8>
 8010df6:	4610      	mov	r0, r2
 8010df8:	4619      	mov	r1, r3
 8010dfa:	e722      	b.n	8010c42 <__aeabi_dmul+0x24a>
 8010dfc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010e00:	bf18      	it	ne
 8010e02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010e06:	f47f aec5 	bne.w	8010b94 <__aeabi_dmul+0x19c>
 8010e0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010e0e:	f47f af0d 	bne.w	8010c2c <__aeabi_dmul+0x234>
 8010e12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010e16:	f47f aeeb 	bne.w	8010bf0 <__aeabi_dmul+0x1f8>
 8010e1a:	e712      	b.n	8010c42 <__aeabi_dmul+0x24a>

08010e1c <__gedf2>:
 8010e1c:	f04f 3cff 	mov.w	ip, #4294967295
 8010e20:	e006      	b.n	8010e30 <__cmpdf2+0x4>
 8010e22:	bf00      	nop

08010e24 <__ledf2>:
 8010e24:	f04f 0c01 	mov.w	ip, #1
 8010e28:	e002      	b.n	8010e30 <__cmpdf2+0x4>
 8010e2a:	bf00      	nop

08010e2c <__cmpdf2>:
 8010e2c:	f04f 0c01 	mov.w	ip, #1
 8010e30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010e34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010e38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010e3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010e40:	bf18      	it	ne
 8010e42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010e46:	d01b      	beq.n	8010e80 <__cmpdf2+0x54>
 8010e48:	b001      	add	sp, #4
 8010e4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010e4e:	bf0c      	ite	eq
 8010e50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010e54:	ea91 0f03 	teqne	r1, r3
 8010e58:	bf02      	ittt	eq
 8010e5a:	ea90 0f02 	teqeq	r0, r2
 8010e5e:	2000      	moveq	r0, #0
 8010e60:	4770      	bxeq	lr
 8010e62:	f110 0f00 	cmn.w	r0, #0
 8010e66:	ea91 0f03 	teq	r1, r3
 8010e6a:	bf58      	it	pl
 8010e6c:	4299      	cmppl	r1, r3
 8010e6e:	bf08      	it	eq
 8010e70:	4290      	cmpeq	r0, r2
 8010e72:	bf2c      	ite	cs
 8010e74:	17d8      	asrcs	r0, r3, #31
 8010e76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010e7a:	f040 0001 	orr.w	r0, r0, #1
 8010e7e:	4770      	bx	lr
 8010e80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010e84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010e88:	d102      	bne.n	8010e90 <__cmpdf2+0x64>
 8010e8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010e8e:	d107      	bne.n	8010ea0 <__cmpdf2+0x74>
 8010e90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010e94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010e98:	d1d6      	bne.n	8010e48 <__cmpdf2+0x1c>
 8010e9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010e9e:	d0d3      	beq.n	8010e48 <__cmpdf2+0x1c>
 8010ea0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010ea4:	4770      	bx	lr
 8010ea6:	bf00      	nop

08010ea8 <__aeabi_cdrcmple>:
 8010ea8:	4684      	mov	ip, r0
 8010eaa:	4610      	mov	r0, r2
 8010eac:	4662      	mov	r2, ip
 8010eae:	468c      	mov	ip, r1
 8010eb0:	4619      	mov	r1, r3
 8010eb2:	4663      	mov	r3, ip
 8010eb4:	e000      	b.n	8010eb8 <__aeabi_cdcmpeq>
 8010eb6:	bf00      	nop

08010eb8 <__aeabi_cdcmpeq>:
 8010eb8:	b501      	push	{r0, lr}
 8010eba:	f7ff ffb7 	bl	8010e2c <__cmpdf2>
 8010ebe:	2800      	cmp	r0, #0
 8010ec0:	bf48      	it	mi
 8010ec2:	f110 0f00 	cmnmi.w	r0, #0
 8010ec6:	bd01      	pop	{r0, pc}

08010ec8 <__aeabi_dcmpeq>:
 8010ec8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ecc:	f7ff fff4 	bl	8010eb8 <__aeabi_cdcmpeq>
 8010ed0:	bf0c      	ite	eq
 8010ed2:	2001      	moveq	r0, #1
 8010ed4:	2000      	movne	r0, #0
 8010ed6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010eda:	bf00      	nop

08010edc <__aeabi_dcmplt>:
 8010edc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ee0:	f7ff ffea 	bl	8010eb8 <__aeabi_cdcmpeq>
 8010ee4:	bf34      	ite	cc
 8010ee6:	2001      	movcc	r0, #1
 8010ee8:	2000      	movcs	r0, #0
 8010eea:	f85d fb08 	ldr.w	pc, [sp], #8
 8010eee:	bf00      	nop

08010ef0 <__aeabi_dcmple>:
 8010ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ef4:	f7ff ffe0 	bl	8010eb8 <__aeabi_cdcmpeq>
 8010ef8:	bf94      	ite	ls
 8010efa:	2001      	movls	r0, #1
 8010efc:	2000      	movhi	r0, #0
 8010efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010f02:	bf00      	nop

08010f04 <__aeabi_dcmpge>:
 8010f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010f08:	f7ff ffce 	bl	8010ea8 <__aeabi_cdrcmple>
 8010f0c:	bf94      	ite	ls
 8010f0e:	2001      	movls	r0, #1
 8010f10:	2000      	movhi	r0, #0
 8010f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8010f16:	bf00      	nop

08010f18 <__aeabi_dcmpgt>:
 8010f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010f1c:	f7ff ffc4 	bl	8010ea8 <__aeabi_cdrcmple>
 8010f20:	bf34      	ite	cc
 8010f22:	2001      	movcc	r0, #1
 8010f24:	2000      	movcs	r0, #0
 8010f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8010f2a:	bf00      	nop

08010f2c <__aeabi_d2iz>:
 8010f2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010f30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010f34:	d215      	bcs.n	8010f62 <__aeabi_d2iz+0x36>
 8010f36:	d511      	bpl.n	8010f5c <__aeabi_d2iz+0x30>
 8010f38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010f3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010f40:	d912      	bls.n	8010f68 <__aeabi_d2iz+0x3c>
 8010f42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010f4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010f4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010f52:	fa23 f002 	lsr.w	r0, r3, r2
 8010f56:	bf18      	it	ne
 8010f58:	4240      	negne	r0, r0
 8010f5a:	4770      	bx	lr
 8010f5c:	f04f 0000 	mov.w	r0, #0
 8010f60:	4770      	bx	lr
 8010f62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010f66:	d105      	bne.n	8010f74 <__aeabi_d2iz+0x48>
 8010f68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8010f6c:	bf08      	it	eq
 8010f6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8010f72:	4770      	bx	lr
 8010f74:	f04f 0000 	mov.w	r0, #0
 8010f78:	4770      	bx	lr
 8010f7a:	bf00      	nop

08010f7c <__aeabi_d2uiz>:
 8010f7c:	004a      	lsls	r2, r1, #1
 8010f7e:	d211      	bcs.n	8010fa4 <__aeabi_d2uiz+0x28>
 8010f80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8010f84:	d211      	bcs.n	8010faa <__aeabi_d2uiz+0x2e>
 8010f86:	d50d      	bpl.n	8010fa4 <__aeabi_d2uiz+0x28>
 8010f88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8010f8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8010f90:	d40e      	bmi.n	8010fb0 <__aeabi_d2uiz+0x34>
 8010f92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8010f96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8010f9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8010f9e:	fa23 f002 	lsr.w	r0, r3, r2
 8010fa2:	4770      	bx	lr
 8010fa4:	f04f 0000 	mov.w	r0, #0
 8010fa8:	4770      	bx	lr
 8010faa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8010fae:	d102      	bne.n	8010fb6 <__aeabi_d2uiz+0x3a>
 8010fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8010fb4:	4770      	bx	lr
 8010fb6:	f04f 0000 	mov.w	r0, #0
 8010fba:	4770      	bx	lr

08010fbc <__aeabi_d2f>:
 8010fbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8010fc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8010fc4:	bf24      	itt	cs
 8010fc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8010fca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8010fce:	d90d      	bls.n	8010fec <__aeabi_d2f+0x30>
 8010fd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8010fd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8010fd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8010fdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8010fe0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8010fe4:	bf08      	it	eq
 8010fe6:	f020 0001 	biceq.w	r0, r0, #1
 8010fea:	4770      	bx	lr
 8010fec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8010ff0:	d121      	bne.n	8011036 <__aeabi_d2f+0x7a>
 8010ff2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8010ff6:	bfbc      	itt	lt
 8010ff8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8010ffc:	4770      	bxlt	lr
 8010ffe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011002:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8011006:	f1c2 0218 	rsb	r2, r2, #24
 801100a:	f1c2 0c20 	rsb	ip, r2, #32
 801100e:	fa10 f30c 	lsls.w	r3, r0, ip
 8011012:	fa20 f002 	lsr.w	r0, r0, r2
 8011016:	bf18      	it	ne
 8011018:	f040 0001 	orrne.w	r0, r0, #1
 801101c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011020:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011024:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011028:	ea40 000c 	orr.w	r0, r0, ip
 801102c:	fa23 f302 	lsr.w	r3, r3, r2
 8011030:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011034:	e7cc      	b.n	8010fd0 <__aeabi_d2f+0x14>
 8011036:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801103a:	d107      	bne.n	801104c <__aeabi_d2f+0x90>
 801103c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8011040:	bf1e      	ittt	ne
 8011042:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8011046:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801104a:	4770      	bxne	lr
 801104c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8011050:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8011054:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011058:	4770      	bx	lr
 801105a:	bf00      	nop

0801105c <__aeabi_uldivmod>:
 801105c:	b94b      	cbnz	r3, 8011072 <__aeabi_uldivmod+0x16>
 801105e:	b942      	cbnz	r2, 8011072 <__aeabi_uldivmod+0x16>
 8011060:	2900      	cmp	r1, #0
 8011062:	bf08      	it	eq
 8011064:	2800      	cmpeq	r0, #0
 8011066:	d002      	beq.n	801106e <__aeabi_uldivmod+0x12>
 8011068:	f04f 31ff 	mov.w	r1, #4294967295
 801106c:	4608      	mov	r0, r1
 801106e:	f000 b83b 	b.w	80110e8 <__aeabi_idiv0>
 8011072:	b082      	sub	sp, #8
 8011074:	46ec      	mov	ip, sp
 8011076:	e92d 5000 	stmdb	sp!, {ip, lr}
 801107a:	f000 f81d 	bl	80110b8 <__gnu_uldivmod_helper>
 801107e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011082:	b002      	add	sp, #8
 8011084:	bc0c      	pop	{r2, r3}
 8011086:	4770      	bx	lr

08011088 <__gnu_ldivmod_helper>:
 8011088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801108c:	9c06      	ldr	r4, [sp, #24]
 801108e:	4615      	mov	r5, r2
 8011090:	4606      	mov	r6, r0
 8011092:	460f      	mov	r7, r1
 8011094:	4698      	mov	r8, r3
 8011096:	f000 f829 	bl	80110ec <__divdi3>
 801109a:	fb05 f301 	mul.w	r3, r5, r1
 801109e:	fb00 3808 	mla	r8, r0, r8, r3
 80110a2:	fba5 2300 	umull	r2, r3, r5, r0
 80110a6:	1ab2      	subs	r2, r6, r2
 80110a8:	4443      	add	r3, r8
 80110aa:	eb67 0303 	sbc.w	r3, r7, r3
 80110ae:	e9c4 2300 	strd	r2, r3, [r4]
 80110b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110b6:	bf00      	nop

080110b8 <__gnu_uldivmod_helper>:
 80110b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110bc:	9c06      	ldr	r4, [sp, #24]
 80110be:	4690      	mov	r8, r2
 80110c0:	4606      	mov	r6, r0
 80110c2:	460f      	mov	r7, r1
 80110c4:	461d      	mov	r5, r3
 80110c6:	f000 f95f 	bl	8011388 <__udivdi3>
 80110ca:	fb00 f505 	mul.w	r5, r0, r5
 80110ce:	fba0 2308 	umull	r2, r3, r0, r8
 80110d2:	fb08 5501 	mla	r5, r8, r1, r5
 80110d6:	1ab2      	subs	r2, r6, r2
 80110d8:	442b      	add	r3, r5
 80110da:	eb67 0303 	sbc.w	r3, r7, r3
 80110de:	e9c4 2300 	strd	r2, r3, [r4]
 80110e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80110e6:	bf00      	nop

080110e8 <__aeabi_idiv0>:
 80110e8:	4770      	bx	lr
 80110ea:	bf00      	nop

080110ec <__divdi3>:
 80110ec:	2900      	cmp	r1, #0
 80110ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80110f2:	f2c0 80a6 	blt.w	8011242 <__divdi3+0x156>
 80110f6:	2600      	movs	r6, #0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	f2c0 809c 	blt.w	8011236 <__divdi3+0x14a>
 80110fe:	4688      	mov	r8, r1
 8011100:	4694      	mov	ip, r2
 8011102:	469e      	mov	lr, r3
 8011104:	4615      	mov	r5, r2
 8011106:	4604      	mov	r4, r0
 8011108:	460f      	mov	r7, r1
 801110a:	2b00      	cmp	r3, #0
 801110c:	d13d      	bne.n	801118a <__divdi3+0x9e>
 801110e:	428a      	cmp	r2, r1
 8011110:	d959      	bls.n	80111c6 <__divdi3+0xda>
 8011112:	fab2 f382 	clz	r3, r2
 8011116:	b13b      	cbz	r3, 8011128 <__divdi3+0x3c>
 8011118:	f1c3 0220 	rsb	r2, r3, #32
 801111c:	409f      	lsls	r7, r3
 801111e:	fa20 f202 	lsr.w	r2, r0, r2
 8011122:	409d      	lsls	r5, r3
 8011124:	4317      	orrs	r7, r2
 8011126:	409c      	lsls	r4, r3
 8011128:	0c29      	lsrs	r1, r5, #16
 801112a:	0c22      	lsrs	r2, r4, #16
 801112c:	fbb7 fef1 	udiv	lr, r7, r1
 8011130:	b2a8      	uxth	r0, r5
 8011132:	fb01 771e 	mls	r7, r1, lr, r7
 8011136:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 801113a:	fb00 f30e 	mul.w	r3, r0, lr
 801113e:	42bb      	cmp	r3, r7
 8011140:	d90a      	bls.n	8011158 <__divdi3+0x6c>
 8011142:	197f      	adds	r7, r7, r5
 8011144:	f10e 32ff 	add.w	r2, lr, #4294967295
 8011148:	f080 8105 	bcs.w	8011356 <__divdi3+0x26a>
 801114c:	42bb      	cmp	r3, r7
 801114e:	f240 8102 	bls.w	8011356 <__divdi3+0x26a>
 8011152:	f1ae 0e02 	sub.w	lr, lr, #2
 8011156:	442f      	add	r7, r5
 8011158:	1aff      	subs	r7, r7, r3
 801115a:	b2a4      	uxth	r4, r4
 801115c:	fbb7 f3f1 	udiv	r3, r7, r1
 8011160:	fb01 7713 	mls	r7, r1, r3, r7
 8011164:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011168:	fb00 f003 	mul.w	r0, r0, r3
 801116c:	42b8      	cmp	r0, r7
 801116e:	d908      	bls.n	8011182 <__divdi3+0x96>
 8011170:	197f      	adds	r7, r7, r5
 8011172:	f103 32ff 	add.w	r2, r3, #4294967295
 8011176:	f080 80f0 	bcs.w	801135a <__divdi3+0x26e>
 801117a:	42b8      	cmp	r0, r7
 801117c:	f240 80ed 	bls.w	801135a <__divdi3+0x26e>
 8011180:	3b02      	subs	r3, #2
 8011182:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8011186:	2200      	movs	r2, #0
 8011188:	e003      	b.n	8011192 <__divdi3+0xa6>
 801118a:	428b      	cmp	r3, r1
 801118c:	d90f      	bls.n	80111ae <__divdi3+0xc2>
 801118e:	2200      	movs	r2, #0
 8011190:	4613      	mov	r3, r2
 8011192:	1c34      	adds	r4, r6, #0
 8011194:	bf18      	it	ne
 8011196:	2401      	movne	r4, #1
 8011198:	4260      	negs	r0, r4
 801119a:	f04f 0500 	mov.w	r5, #0
 801119e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 80111a2:	4058      	eors	r0, r3
 80111a4:	4051      	eors	r1, r2
 80111a6:	1900      	adds	r0, r0, r4
 80111a8:	4169      	adcs	r1, r5
 80111aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80111ae:	fab3 f283 	clz	r2, r3
 80111b2:	2a00      	cmp	r2, #0
 80111b4:	f040 8086 	bne.w	80112c4 <__divdi3+0x1d8>
 80111b8:	428b      	cmp	r3, r1
 80111ba:	d302      	bcc.n	80111c2 <__divdi3+0xd6>
 80111bc:	4584      	cmp	ip, r0
 80111be:	f200 80db 	bhi.w	8011378 <__divdi3+0x28c>
 80111c2:	2301      	movs	r3, #1
 80111c4:	e7e5      	b.n	8011192 <__divdi3+0xa6>
 80111c6:	b912      	cbnz	r2, 80111ce <__divdi3+0xe2>
 80111c8:	2301      	movs	r3, #1
 80111ca:	fbb3 f5f2 	udiv	r5, r3, r2
 80111ce:	fab5 f085 	clz	r0, r5
 80111d2:	2800      	cmp	r0, #0
 80111d4:	d13b      	bne.n	801124e <__divdi3+0x162>
 80111d6:	1b78      	subs	r0, r7, r5
 80111d8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80111dc:	fa1f fc85 	uxth.w	ip, r5
 80111e0:	2201      	movs	r2, #1
 80111e2:	fbb0 f8fe 	udiv	r8, r0, lr
 80111e6:	0c21      	lsrs	r1, r4, #16
 80111e8:	fb0e 0718 	mls	r7, lr, r8, r0
 80111ec:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80111f0:	fb0c f308 	mul.w	r3, ip, r8
 80111f4:	42bb      	cmp	r3, r7
 80111f6:	d907      	bls.n	8011208 <__divdi3+0x11c>
 80111f8:	197f      	adds	r7, r7, r5
 80111fa:	f108 31ff 	add.w	r1, r8, #4294967295
 80111fe:	d202      	bcs.n	8011206 <__divdi3+0x11a>
 8011200:	42bb      	cmp	r3, r7
 8011202:	f200 80bd 	bhi.w	8011380 <__divdi3+0x294>
 8011206:	4688      	mov	r8, r1
 8011208:	1aff      	subs	r7, r7, r3
 801120a:	b2a4      	uxth	r4, r4
 801120c:	fbb7 f3fe 	udiv	r3, r7, lr
 8011210:	fb0e 7713 	mls	r7, lr, r3, r7
 8011214:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011218:	fb0c fc03 	mul.w	ip, ip, r3
 801121c:	45bc      	cmp	ip, r7
 801121e:	d907      	bls.n	8011230 <__divdi3+0x144>
 8011220:	197f      	adds	r7, r7, r5
 8011222:	f103 31ff 	add.w	r1, r3, #4294967295
 8011226:	d202      	bcs.n	801122e <__divdi3+0x142>
 8011228:	45bc      	cmp	ip, r7
 801122a:	f200 80a7 	bhi.w	801137c <__divdi3+0x290>
 801122e:	460b      	mov	r3, r1
 8011230:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011234:	e7ad      	b.n	8011192 <__divdi3+0xa6>
 8011236:	4252      	negs	r2, r2
 8011238:	ea6f 0606 	mvn.w	r6, r6
 801123c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011240:	e75d      	b.n	80110fe <__divdi3+0x12>
 8011242:	4240      	negs	r0, r0
 8011244:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8011248:	f04f 36ff 	mov.w	r6, #4294967295
 801124c:	e754      	b.n	80110f8 <__divdi3+0xc>
 801124e:	f1c0 0220 	rsb	r2, r0, #32
 8011252:	fa24 f102 	lsr.w	r1, r4, r2
 8011256:	fa07 f300 	lsl.w	r3, r7, r0
 801125a:	4085      	lsls	r5, r0
 801125c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011260:	40d7      	lsrs	r7, r2
 8011262:	4319      	orrs	r1, r3
 8011264:	fbb7 f2fe 	udiv	r2, r7, lr
 8011268:	0c0b      	lsrs	r3, r1, #16
 801126a:	fb0e 7712 	mls	r7, lr, r2, r7
 801126e:	fa1f fc85 	uxth.w	ip, r5
 8011272:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011276:	fb0c f702 	mul.w	r7, ip, r2
 801127a:	429f      	cmp	r7, r3
 801127c:	fa04 f400 	lsl.w	r4, r4, r0
 8011280:	d907      	bls.n	8011292 <__divdi3+0x1a6>
 8011282:	195b      	adds	r3, r3, r5
 8011284:	f102 30ff 	add.w	r0, r2, #4294967295
 8011288:	d274      	bcs.n	8011374 <__divdi3+0x288>
 801128a:	429f      	cmp	r7, r3
 801128c:	d972      	bls.n	8011374 <__divdi3+0x288>
 801128e:	3a02      	subs	r2, #2
 8011290:	442b      	add	r3, r5
 8011292:	1bdf      	subs	r7, r3, r7
 8011294:	b289      	uxth	r1, r1
 8011296:	fbb7 f8fe 	udiv	r8, r7, lr
 801129a:	fb0e 7318 	mls	r3, lr, r8, r7
 801129e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80112a2:	fb0c f708 	mul.w	r7, ip, r8
 80112a6:	429f      	cmp	r7, r3
 80112a8:	d908      	bls.n	80112bc <__divdi3+0x1d0>
 80112aa:	195b      	adds	r3, r3, r5
 80112ac:	f108 31ff 	add.w	r1, r8, #4294967295
 80112b0:	d25c      	bcs.n	801136c <__divdi3+0x280>
 80112b2:	429f      	cmp	r7, r3
 80112b4:	d95a      	bls.n	801136c <__divdi3+0x280>
 80112b6:	f1a8 0802 	sub.w	r8, r8, #2
 80112ba:	442b      	add	r3, r5
 80112bc:	1bd8      	subs	r0, r3, r7
 80112be:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80112c2:	e78e      	b.n	80111e2 <__divdi3+0xf6>
 80112c4:	f1c2 0320 	rsb	r3, r2, #32
 80112c8:	fa2c f103 	lsr.w	r1, ip, r3
 80112cc:	fa0e fe02 	lsl.w	lr, lr, r2
 80112d0:	fa20 f703 	lsr.w	r7, r0, r3
 80112d4:	ea41 0e0e 	orr.w	lr, r1, lr
 80112d8:	fa08 f002 	lsl.w	r0, r8, r2
 80112dc:	fa28 f103 	lsr.w	r1, r8, r3
 80112e0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 80112e4:	4338      	orrs	r0, r7
 80112e6:	fbb1 f8f5 	udiv	r8, r1, r5
 80112ea:	0c03      	lsrs	r3, r0, #16
 80112ec:	fb05 1118 	mls	r1, r5, r8, r1
 80112f0:	fa1f f78e 	uxth.w	r7, lr
 80112f4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80112f8:	fb07 f308 	mul.w	r3, r7, r8
 80112fc:	428b      	cmp	r3, r1
 80112fe:	fa0c fc02 	lsl.w	ip, ip, r2
 8011302:	d909      	bls.n	8011318 <__divdi3+0x22c>
 8011304:	eb11 010e 	adds.w	r1, r1, lr
 8011308:	f108 39ff 	add.w	r9, r8, #4294967295
 801130c:	d230      	bcs.n	8011370 <__divdi3+0x284>
 801130e:	428b      	cmp	r3, r1
 8011310:	d92e      	bls.n	8011370 <__divdi3+0x284>
 8011312:	f1a8 0802 	sub.w	r8, r8, #2
 8011316:	4471      	add	r1, lr
 8011318:	1ac9      	subs	r1, r1, r3
 801131a:	b280      	uxth	r0, r0
 801131c:	fbb1 f3f5 	udiv	r3, r1, r5
 8011320:	fb05 1113 	mls	r1, r5, r3, r1
 8011324:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011328:	fb07 f703 	mul.w	r7, r7, r3
 801132c:	428f      	cmp	r7, r1
 801132e:	d908      	bls.n	8011342 <__divdi3+0x256>
 8011330:	eb11 010e 	adds.w	r1, r1, lr
 8011334:	f103 30ff 	add.w	r0, r3, #4294967295
 8011338:	d216      	bcs.n	8011368 <__divdi3+0x27c>
 801133a:	428f      	cmp	r7, r1
 801133c:	d914      	bls.n	8011368 <__divdi3+0x27c>
 801133e:	3b02      	subs	r3, #2
 8011340:	4471      	add	r1, lr
 8011342:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011346:	1bc9      	subs	r1, r1, r7
 8011348:	fba3 890c 	umull	r8, r9, r3, ip
 801134c:	4549      	cmp	r1, r9
 801134e:	d309      	bcc.n	8011364 <__divdi3+0x278>
 8011350:	d005      	beq.n	801135e <__divdi3+0x272>
 8011352:	2200      	movs	r2, #0
 8011354:	e71d      	b.n	8011192 <__divdi3+0xa6>
 8011356:	4696      	mov	lr, r2
 8011358:	e6fe      	b.n	8011158 <__divdi3+0x6c>
 801135a:	4613      	mov	r3, r2
 801135c:	e711      	b.n	8011182 <__divdi3+0x96>
 801135e:	4094      	lsls	r4, r2
 8011360:	4544      	cmp	r4, r8
 8011362:	d2f6      	bcs.n	8011352 <__divdi3+0x266>
 8011364:	3b01      	subs	r3, #1
 8011366:	e7f4      	b.n	8011352 <__divdi3+0x266>
 8011368:	4603      	mov	r3, r0
 801136a:	e7ea      	b.n	8011342 <__divdi3+0x256>
 801136c:	4688      	mov	r8, r1
 801136e:	e7a5      	b.n	80112bc <__divdi3+0x1d0>
 8011370:	46c8      	mov	r8, r9
 8011372:	e7d1      	b.n	8011318 <__divdi3+0x22c>
 8011374:	4602      	mov	r2, r0
 8011376:	e78c      	b.n	8011292 <__divdi3+0x1a6>
 8011378:	4613      	mov	r3, r2
 801137a:	e70a      	b.n	8011192 <__divdi3+0xa6>
 801137c:	3b02      	subs	r3, #2
 801137e:	e757      	b.n	8011230 <__divdi3+0x144>
 8011380:	f1a8 0802 	sub.w	r8, r8, #2
 8011384:	442f      	add	r7, r5
 8011386:	e73f      	b.n	8011208 <__divdi3+0x11c>

08011388 <__udivdi3>:
 8011388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801138c:	2b00      	cmp	r3, #0
 801138e:	d144      	bne.n	801141a <__udivdi3+0x92>
 8011390:	428a      	cmp	r2, r1
 8011392:	4615      	mov	r5, r2
 8011394:	4604      	mov	r4, r0
 8011396:	d94f      	bls.n	8011438 <__udivdi3+0xb0>
 8011398:	fab2 f782 	clz	r7, r2
 801139c:	460e      	mov	r6, r1
 801139e:	b14f      	cbz	r7, 80113b4 <__udivdi3+0x2c>
 80113a0:	f1c7 0320 	rsb	r3, r7, #32
 80113a4:	40b9      	lsls	r1, r7
 80113a6:	fa20 f603 	lsr.w	r6, r0, r3
 80113aa:	fa02 f507 	lsl.w	r5, r2, r7
 80113ae:	430e      	orrs	r6, r1
 80113b0:	fa00 f407 	lsl.w	r4, r0, r7
 80113b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80113b8:	0c23      	lsrs	r3, r4, #16
 80113ba:	fbb6 f0fe 	udiv	r0, r6, lr
 80113be:	b2af      	uxth	r7, r5
 80113c0:	fb0e 6110 	mls	r1, lr, r0, r6
 80113c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80113c8:	fb07 f100 	mul.w	r1, r7, r0
 80113cc:	4299      	cmp	r1, r3
 80113ce:	d909      	bls.n	80113e4 <__udivdi3+0x5c>
 80113d0:	195b      	adds	r3, r3, r5
 80113d2:	f100 32ff 	add.w	r2, r0, #4294967295
 80113d6:	f080 80ec 	bcs.w	80115b2 <__udivdi3+0x22a>
 80113da:	4299      	cmp	r1, r3
 80113dc:	f240 80e9 	bls.w	80115b2 <__udivdi3+0x22a>
 80113e0:	3802      	subs	r0, #2
 80113e2:	442b      	add	r3, r5
 80113e4:	1a5a      	subs	r2, r3, r1
 80113e6:	b2a4      	uxth	r4, r4
 80113e8:	fbb2 f3fe 	udiv	r3, r2, lr
 80113ec:	fb0e 2213 	mls	r2, lr, r3, r2
 80113f0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80113f4:	fb07 f703 	mul.w	r7, r7, r3
 80113f8:	4297      	cmp	r7, r2
 80113fa:	d908      	bls.n	801140e <__udivdi3+0x86>
 80113fc:	1952      	adds	r2, r2, r5
 80113fe:	f103 31ff 	add.w	r1, r3, #4294967295
 8011402:	f080 80d8 	bcs.w	80115b6 <__udivdi3+0x22e>
 8011406:	4297      	cmp	r7, r2
 8011408:	f240 80d5 	bls.w	80115b6 <__udivdi3+0x22e>
 801140c:	3b02      	subs	r3, #2
 801140e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011412:	2600      	movs	r6, #0
 8011414:	4631      	mov	r1, r6
 8011416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801141a:	428b      	cmp	r3, r1
 801141c:	d847      	bhi.n	80114ae <__udivdi3+0x126>
 801141e:	fab3 f683 	clz	r6, r3
 8011422:	2e00      	cmp	r6, #0
 8011424:	d148      	bne.n	80114b8 <__udivdi3+0x130>
 8011426:	428b      	cmp	r3, r1
 8011428:	d302      	bcc.n	8011430 <__udivdi3+0xa8>
 801142a:	4282      	cmp	r2, r0
 801142c:	f200 80cd 	bhi.w	80115ca <__udivdi3+0x242>
 8011430:	2001      	movs	r0, #1
 8011432:	4631      	mov	r1, r6
 8011434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011438:	b912      	cbnz	r2, 8011440 <__udivdi3+0xb8>
 801143a:	2501      	movs	r5, #1
 801143c:	fbb5 f5f2 	udiv	r5, r5, r2
 8011440:	fab5 f885 	clz	r8, r5
 8011444:	f1b8 0f00 	cmp.w	r8, #0
 8011448:	d177      	bne.n	801153a <__udivdi3+0x1b2>
 801144a:	1b4a      	subs	r2, r1, r5
 801144c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011450:	b2af      	uxth	r7, r5
 8011452:	2601      	movs	r6, #1
 8011454:	fbb2 f0fe 	udiv	r0, r2, lr
 8011458:	0c23      	lsrs	r3, r4, #16
 801145a:	fb0e 2110 	mls	r1, lr, r0, r2
 801145e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011462:	fb07 f300 	mul.w	r3, r7, r0
 8011466:	428b      	cmp	r3, r1
 8011468:	d907      	bls.n	801147a <__udivdi3+0xf2>
 801146a:	1949      	adds	r1, r1, r5
 801146c:	f100 32ff 	add.w	r2, r0, #4294967295
 8011470:	d202      	bcs.n	8011478 <__udivdi3+0xf0>
 8011472:	428b      	cmp	r3, r1
 8011474:	f200 80ba 	bhi.w	80115ec <__udivdi3+0x264>
 8011478:	4610      	mov	r0, r2
 801147a:	1ac9      	subs	r1, r1, r3
 801147c:	b2a4      	uxth	r4, r4
 801147e:	fbb1 f3fe 	udiv	r3, r1, lr
 8011482:	fb0e 1113 	mls	r1, lr, r3, r1
 8011486:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801148a:	fb07 f703 	mul.w	r7, r7, r3
 801148e:	42a7      	cmp	r7, r4
 8011490:	d908      	bls.n	80114a4 <__udivdi3+0x11c>
 8011492:	1964      	adds	r4, r4, r5
 8011494:	f103 32ff 	add.w	r2, r3, #4294967295
 8011498:	f080 808f 	bcs.w	80115ba <__udivdi3+0x232>
 801149c:	42a7      	cmp	r7, r4
 801149e:	f240 808c 	bls.w	80115ba <__udivdi3+0x232>
 80114a2:	3b02      	subs	r3, #2
 80114a4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80114a8:	4631      	mov	r1, r6
 80114aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114ae:	2600      	movs	r6, #0
 80114b0:	4630      	mov	r0, r6
 80114b2:	4631      	mov	r1, r6
 80114b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80114b8:	f1c6 0420 	rsb	r4, r6, #32
 80114bc:	fa22 f504 	lsr.w	r5, r2, r4
 80114c0:	40b3      	lsls	r3, r6
 80114c2:	432b      	orrs	r3, r5
 80114c4:	fa20 fc04 	lsr.w	ip, r0, r4
 80114c8:	fa01 f706 	lsl.w	r7, r1, r6
 80114cc:	fa21 f504 	lsr.w	r5, r1, r4
 80114d0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80114d4:	ea4c 0707 	orr.w	r7, ip, r7
 80114d8:	fbb5 f8fe 	udiv	r8, r5, lr
 80114dc:	0c39      	lsrs	r1, r7, #16
 80114de:	fb0e 5518 	mls	r5, lr, r8, r5
 80114e2:	fa1f fc83 	uxth.w	ip, r3
 80114e6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80114ea:	fb0c f108 	mul.w	r1, ip, r8
 80114ee:	42a9      	cmp	r1, r5
 80114f0:	fa02 f206 	lsl.w	r2, r2, r6
 80114f4:	d904      	bls.n	8011500 <__udivdi3+0x178>
 80114f6:	18ed      	adds	r5, r5, r3
 80114f8:	f108 34ff 	add.w	r4, r8, #4294967295
 80114fc:	d367      	bcc.n	80115ce <__udivdi3+0x246>
 80114fe:	46a0      	mov	r8, r4
 8011500:	1a6d      	subs	r5, r5, r1
 8011502:	b2bf      	uxth	r7, r7
 8011504:	fbb5 f4fe 	udiv	r4, r5, lr
 8011508:	fb0e 5514 	mls	r5, lr, r4, r5
 801150c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8011510:	fb0c fc04 	mul.w	ip, ip, r4
 8011514:	458c      	cmp	ip, r1
 8011516:	d904      	bls.n	8011522 <__udivdi3+0x19a>
 8011518:	18c9      	adds	r1, r1, r3
 801151a:	f104 35ff 	add.w	r5, r4, #4294967295
 801151e:	d35c      	bcc.n	80115da <__udivdi3+0x252>
 8011520:	462c      	mov	r4, r5
 8011522:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8011526:	ebcc 0101 	rsb	r1, ip, r1
 801152a:	fba4 2302 	umull	r2, r3, r4, r2
 801152e:	4299      	cmp	r1, r3
 8011530:	d348      	bcc.n	80115c4 <__udivdi3+0x23c>
 8011532:	d044      	beq.n	80115be <__udivdi3+0x236>
 8011534:	4620      	mov	r0, r4
 8011536:	2600      	movs	r6, #0
 8011538:	e76c      	b.n	8011414 <__udivdi3+0x8c>
 801153a:	f1c8 0420 	rsb	r4, r8, #32
 801153e:	fa01 f308 	lsl.w	r3, r1, r8
 8011542:	fa05 f508 	lsl.w	r5, r5, r8
 8011546:	fa20 f704 	lsr.w	r7, r0, r4
 801154a:	40e1      	lsrs	r1, r4
 801154c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011550:	431f      	orrs	r7, r3
 8011552:	fbb1 f6fe 	udiv	r6, r1, lr
 8011556:	0c3a      	lsrs	r2, r7, #16
 8011558:	fb0e 1116 	mls	r1, lr, r6, r1
 801155c:	fa1f fc85 	uxth.w	ip, r5
 8011560:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8011564:	fb0c f206 	mul.w	r2, ip, r6
 8011568:	429a      	cmp	r2, r3
 801156a:	fa00 f408 	lsl.w	r4, r0, r8
 801156e:	d907      	bls.n	8011580 <__udivdi3+0x1f8>
 8011570:	195b      	adds	r3, r3, r5
 8011572:	f106 31ff 	add.w	r1, r6, #4294967295
 8011576:	d237      	bcs.n	80115e8 <__udivdi3+0x260>
 8011578:	429a      	cmp	r2, r3
 801157a:	d935      	bls.n	80115e8 <__udivdi3+0x260>
 801157c:	3e02      	subs	r6, #2
 801157e:	442b      	add	r3, r5
 8011580:	1a9b      	subs	r3, r3, r2
 8011582:	b2bf      	uxth	r7, r7
 8011584:	fbb3 f0fe 	udiv	r0, r3, lr
 8011588:	fb0e 3310 	mls	r3, lr, r0, r3
 801158c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8011590:	fb0c f100 	mul.w	r1, ip, r0
 8011594:	4299      	cmp	r1, r3
 8011596:	d907      	bls.n	80115a8 <__udivdi3+0x220>
 8011598:	195b      	adds	r3, r3, r5
 801159a:	f100 32ff 	add.w	r2, r0, #4294967295
 801159e:	d221      	bcs.n	80115e4 <__udivdi3+0x25c>
 80115a0:	4299      	cmp	r1, r3
 80115a2:	d91f      	bls.n	80115e4 <__udivdi3+0x25c>
 80115a4:	3802      	subs	r0, #2
 80115a6:	442b      	add	r3, r5
 80115a8:	1a5a      	subs	r2, r3, r1
 80115aa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80115ae:	4667      	mov	r7, ip
 80115b0:	e750      	b.n	8011454 <__udivdi3+0xcc>
 80115b2:	4610      	mov	r0, r2
 80115b4:	e716      	b.n	80113e4 <__udivdi3+0x5c>
 80115b6:	460b      	mov	r3, r1
 80115b8:	e729      	b.n	801140e <__udivdi3+0x86>
 80115ba:	4613      	mov	r3, r2
 80115bc:	e772      	b.n	80114a4 <__udivdi3+0x11c>
 80115be:	40b0      	lsls	r0, r6
 80115c0:	4290      	cmp	r0, r2
 80115c2:	d2b7      	bcs.n	8011534 <__udivdi3+0x1ac>
 80115c4:	1e60      	subs	r0, r4, #1
 80115c6:	2600      	movs	r6, #0
 80115c8:	e724      	b.n	8011414 <__udivdi3+0x8c>
 80115ca:	4630      	mov	r0, r6
 80115cc:	e722      	b.n	8011414 <__udivdi3+0x8c>
 80115ce:	42a9      	cmp	r1, r5
 80115d0:	d995      	bls.n	80114fe <__udivdi3+0x176>
 80115d2:	f1a8 0802 	sub.w	r8, r8, #2
 80115d6:	441d      	add	r5, r3
 80115d8:	e792      	b.n	8011500 <__udivdi3+0x178>
 80115da:	458c      	cmp	ip, r1
 80115dc:	d9a0      	bls.n	8011520 <__udivdi3+0x198>
 80115de:	3c02      	subs	r4, #2
 80115e0:	4419      	add	r1, r3
 80115e2:	e79e      	b.n	8011522 <__udivdi3+0x19a>
 80115e4:	4610      	mov	r0, r2
 80115e6:	e7df      	b.n	80115a8 <__udivdi3+0x220>
 80115e8:	460e      	mov	r6, r1
 80115ea:	e7c9      	b.n	8011580 <__udivdi3+0x1f8>
 80115ec:	3802      	subs	r0, #2
 80115ee:	4429      	add	r1, r5
 80115f0:	e743      	b.n	801147a <__udivdi3+0xf2>
 80115f2:	bf00      	nop

080115f4 <atoi>:
 80115f4:	2100      	movs	r1, #0
 80115f6:	220a      	movs	r2, #10
 80115f8:	f000 bc58 	b.w	8011eac <strtol>

080115fc <__errno>:
 80115fc:	4b01      	ldr	r3, [pc, #4]	; (8011604 <__errno+0x8>)
 80115fe:	6818      	ldr	r0, [r3, #0]
 8011600:	4770      	bx	lr
 8011602:	bf00      	nop
 8011604:	1fff432c 	.word	0x1fff432c

08011608 <__libc_init_array>:
 8011608:	b570      	push	{r4, r5, r6, lr}
 801160a:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <__libc_init_array+0x3c>)
 801160c:	4c0e      	ldr	r4, [pc, #56]	; (8011648 <__libc_init_array+0x40>)
 801160e:	1ae4      	subs	r4, r4, r3
 8011610:	10a4      	asrs	r4, r4, #2
 8011612:	2500      	movs	r5, #0
 8011614:	461e      	mov	r6, r3
 8011616:	42a5      	cmp	r5, r4
 8011618:	d004      	beq.n	8011624 <__libc_init_array+0x1c>
 801161a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801161e:	4798      	blx	r3
 8011620:	3501      	adds	r5, #1
 8011622:	e7f8      	b.n	8011616 <__libc_init_array+0xe>
 8011624:	f7f3 fb6c 	bl	8004d00 <_init>
 8011628:	4c08      	ldr	r4, [pc, #32]	; (801164c <__libc_init_array+0x44>)
 801162a:	4b09      	ldr	r3, [pc, #36]	; (8011650 <__libc_init_array+0x48>)
 801162c:	1ae4      	subs	r4, r4, r3
 801162e:	10a4      	asrs	r4, r4, #2
 8011630:	2500      	movs	r5, #0
 8011632:	461e      	mov	r6, r3
 8011634:	42a5      	cmp	r5, r4
 8011636:	d004      	beq.n	8011642 <__libc_init_array+0x3a>
 8011638:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801163c:	4798      	blx	r3
 801163e:	3501      	adds	r5, #1
 8011640:	e7f8      	b.n	8011634 <__libc_init_array+0x2c>
 8011642:	bd70      	pop	{r4, r5, r6, pc}
 8011644:	1fff4374 	.word	0x1fff4374
 8011648:	1fff4374 	.word	0x1fff4374
 801164c:	1fff4374 	.word	0x1fff4374
 8011650:	1fff4374 	.word	0x1fff4374

08011654 <memcpy>:
 8011654:	b510      	push	{r4, lr}
 8011656:	1e43      	subs	r3, r0, #1
 8011658:	440a      	add	r2, r1
 801165a:	4291      	cmp	r1, r2
 801165c:	d004      	beq.n	8011668 <memcpy+0x14>
 801165e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011662:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011666:	e7f8      	b.n	801165a <memcpy+0x6>
 8011668:	bd10      	pop	{r4, pc}

0801166a <memset>:
 801166a:	4402      	add	r2, r0
 801166c:	4603      	mov	r3, r0
 801166e:	4293      	cmp	r3, r2
 8011670:	d002      	beq.n	8011678 <memset+0xe>
 8011672:	f803 1b01 	strb.w	r1, [r3], #1
 8011676:	e7fa      	b.n	801166e <memset+0x4>
 8011678:	4770      	bx	lr
	...

0801167c <validate_structure>:
 801167c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801167e:	6801      	ldr	r1, [r0, #0]
 8011680:	293b      	cmp	r1, #59	; 0x3b
 8011682:	4604      	mov	r4, r0
 8011684:	d911      	bls.n	80116aa <validate_structure+0x2e>
 8011686:	223c      	movs	r2, #60	; 0x3c
 8011688:	4668      	mov	r0, sp
 801168a:	f000 fd85 	bl	8012198 <div>
 801168e:	9a01      	ldr	r2, [sp, #4]
 8011690:	6861      	ldr	r1, [r4, #4]
 8011692:	9b00      	ldr	r3, [sp, #0]
 8011694:	2a00      	cmp	r2, #0
 8011696:	440b      	add	r3, r1
 8011698:	6063      	str	r3, [r4, #4]
 801169a:	bfbb      	ittet	lt
 801169c:	323c      	addlt	r2, #60	; 0x3c
 801169e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80116a2:	6022      	strge	r2, [r4, #0]
 80116a4:	6022      	strlt	r2, [r4, #0]
 80116a6:	bfb8      	it	lt
 80116a8:	6063      	strlt	r3, [r4, #4]
 80116aa:	6861      	ldr	r1, [r4, #4]
 80116ac:	293b      	cmp	r1, #59	; 0x3b
 80116ae:	d911      	bls.n	80116d4 <validate_structure+0x58>
 80116b0:	223c      	movs	r2, #60	; 0x3c
 80116b2:	4668      	mov	r0, sp
 80116b4:	f000 fd70 	bl	8012198 <div>
 80116b8:	9a01      	ldr	r2, [sp, #4]
 80116ba:	68a1      	ldr	r1, [r4, #8]
 80116bc:	9b00      	ldr	r3, [sp, #0]
 80116be:	2a00      	cmp	r2, #0
 80116c0:	440b      	add	r3, r1
 80116c2:	60a3      	str	r3, [r4, #8]
 80116c4:	bfbb      	ittet	lt
 80116c6:	323c      	addlt	r2, #60	; 0x3c
 80116c8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80116cc:	6062      	strge	r2, [r4, #4]
 80116ce:	6062      	strlt	r2, [r4, #4]
 80116d0:	bfb8      	it	lt
 80116d2:	60a3      	strlt	r3, [r4, #8]
 80116d4:	68a1      	ldr	r1, [r4, #8]
 80116d6:	2917      	cmp	r1, #23
 80116d8:	d911      	bls.n	80116fe <validate_structure+0x82>
 80116da:	2218      	movs	r2, #24
 80116dc:	4668      	mov	r0, sp
 80116de:	f000 fd5b 	bl	8012198 <div>
 80116e2:	9a01      	ldr	r2, [sp, #4]
 80116e4:	68e1      	ldr	r1, [r4, #12]
 80116e6:	9b00      	ldr	r3, [sp, #0]
 80116e8:	2a00      	cmp	r2, #0
 80116ea:	440b      	add	r3, r1
 80116ec:	60e3      	str	r3, [r4, #12]
 80116ee:	bfbb      	ittet	lt
 80116f0:	3218      	addlt	r2, #24
 80116f2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80116f6:	60a2      	strge	r2, [r4, #8]
 80116f8:	60a2      	strlt	r2, [r4, #8]
 80116fa:	bfb8      	it	lt
 80116fc:	60e3      	strlt	r3, [r4, #12]
 80116fe:	6921      	ldr	r1, [r4, #16]
 8011700:	290b      	cmp	r1, #11
 8011702:	d911      	bls.n	8011728 <validate_structure+0xac>
 8011704:	220c      	movs	r2, #12
 8011706:	4668      	mov	r0, sp
 8011708:	f000 fd46 	bl	8012198 <div>
 801170c:	9a01      	ldr	r2, [sp, #4]
 801170e:	6961      	ldr	r1, [r4, #20]
 8011710:	9b00      	ldr	r3, [sp, #0]
 8011712:	2a00      	cmp	r2, #0
 8011714:	440b      	add	r3, r1
 8011716:	6163      	str	r3, [r4, #20]
 8011718:	bfbb      	ittet	lt
 801171a:	320c      	addlt	r2, #12
 801171c:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011720:	6122      	strge	r2, [r4, #16]
 8011722:	6122      	strlt	r2, [r4, #16]
 8011724:	bfb8      	it	lt
 8011726:	6163      	strlt	r3, [r4, #20]
 8011728:	6963      	ldr	r3, [r4, #20]
 801172a:	079d      	lsls	r5, r3, #30
 801172c:	d112      	bne.n	8011754 <validate_structure+0xd8>
 801172e:	2164      	movs	r1, #100	; 0x64
 8011730:	fb93 f2f1 	sdiv	r2, r3, r1
 8011734:	fb01 3212 	mls	r2, r1, r2, r3
 8011738:	b972      	cbnz	r2, 8011758 <validate_structure+0xdc>
 801173a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 801173e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011742:	fb93 f2f1 	sdiv	r2, r3, r1
 8011746:	fb01 3312 	mls	r3, r1, r2, r3
 801174a:	2b00      	cmp	r3, #0
 801174c:	bf14      	ite	ne
 801174e:	231c      	movne	r3, #28
 8011750:	231d      	moveq	r3, #29
 8011752:	e002      	b.n	801175a <validate_structure+0xde>
 8011754:	231c      	movs	r3, #28
 8011756:	e000      	b.n	801175a <validate_structure+0xde>
 8011758:	231d      	movs	r3, #29
 801175a:	68e2      	ldr	r2, [r4, #12]
 801175c:	2a00      	cmp	r2, #0
 801175e:	dc37      	bgt.n	80117d0 <validate_structure+0x154>
 8011760:	68e5      	ldr	r5, [r4, #12]
 8011762:	2d00      	cmp	r5, #0
 8011764:	dc5c      	bgt.n	8011820 <validate_structure+0x1a4>
 8011766:	6921      	ldr	r1, [r4, #16]
 8011768:	3901      	subs	r1, #1
 801176a:	6121      	str	r1, [r4, #16]
 801176c:	3101      	adds	r1, #1
 801176e:	d11c      	bne.n	80117aa <validate_structure+0x12e>
 8011770:	6963      	ldr	r3, [r4, #20]
 8011772:	1e59      	subs	r1, r3, #1
 8011774:	220b      	movs	r2, #11
 8011776:	0788      	lsls	r0, r1, #30
 8011778:	6161      	str	r1, [r4, #20]
 801177a:	6122      	str	r2, [r4, #16]
 801177c:	d112      	bne.n	80117a4 <validate_structure+0x128>
 801177e:	2264      	movs	r2, #100	; 0x64
 8011780:	fb91 f0f2 	sdiv	r0, r1, r2
 8011784:	fb02 1110 	mls	r1, r2, r0, r1
 8011788:	b971      	cbnz	r1, 80117a8 <validate_structure+0x12c>
 801178a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 801178e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011792:	fb93 f1f2 	sdiv	r1, r3, r2
 8011796:	fb02 3311 	mls	r3, r2, r1, r3
 801179a:	2b00      	cmp	r3, #0
 801179c:	bf14      	ite	ne
 801179e:	231c      	movne	r3, #28
 80117a0:	231d      	moveq	r3, #29
 80117a2:	e002      	b.n	80117aa <validate_structure+0x12e>
 80117a4:	231c      	movs	r3, #28
 80117a6:	e000      	b.n	80117aa <validate_structure+0x12e>
 80117a8:	231d      	movs	r3, #29
 80117aa:	6922      	ldr	r2, [r4, #16]
 80117ac:	2a01      	cmp	r2, #1
 80117ae:	bf1a      	itte	ne
 80117b0:	491c      	ldrne	r1, [pc, #112]	; (8011824 <validate_structure+0x1a8>)
 80117b2:	f851 2022 	ldrne.w	r2, [r1, r2, lsl #2]
 80117b6:	461a      	moveq	r2, r3
 80117b8:	442a      	add	r2, r5
 80117ba:	60e2      	str	r2, [r4, #12]
 80117bc:	e7d0      	b.n	8011760 <validate_structure+0xe4>
 80117be:	4299      	cmp	r1, r3
 80117c0:	dd2e      	ble.n	8011820 <validate_structure+0x1a4>
 80117c2:	4618      	mov	r0, r3
 80117c4:	3201      	adds	r2, #1
 80117c6:	1a09      	subs	r1, r1, r0
 80117c8:	2a0c      	cmp	r2, #12
 80117ca:	60e1      	str	r1, [r4, #12]
 80117cc:	6122      	str	r2, [r4, #16]
 80117ce:	d009      	beq.n	80117e4 <validate_structure+0x168>
 80117d0:	6922      	ldr	r2, [r4, #16]
 80117d2:	68e1      	ldr	r1, [r4, #12]
 80117d4:	2a01      	cmp	r2, #1
 80117d6:	d0f2      	beq.n	80117be <validate_structure+0x142>
 80117d8:	4812      	ldr	r0, [pc, #72]	; (8011824 <validate_structure+0x1a8>)
 80117da:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80117de:	4281      	cmp	r1, r0
 80117e0:	dcf0      	bgt.n	80117c4 <validate_structure+0x148>
 80117e2:	e01d      	b.n	8011820 <validate_structure+0x1a4>
 80117e4:	6963      	ldr	r3, [r4, #20]
 80117e6:	2100      	movs	r1, #0
 80117e8:	1c5a      	adds	r2, r3, #1
 80117ea:	6121      	str	r1, [r4, #16]
 80117ec:	0791      	lsls	r1, r2, #30
 80117ee:	6162      	str	r2, [r4, #20]
 80117f0:	d112      	bne.n	8011818 <validate_structure+0x19c>
 80117f2:	2064      	movs	r0, #100	; 0x64
 80117f4:	fb92 f1f0 	sdiv	r1, r2, r0
 80117f8:	fb00 2211 	mls	r2, r0, r1, r2
 80117fc:	b972      	cbnz	r2, 801181c <validate_structure+0x1a0>
 80117fe:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8011802:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011806:	fb93 f2f1 	sdiv	r2, r3, r1
 801180a:	fb01 3312 	mls	r3, r1, r2, r3
 801180e:	2b00      	cmp	r3, #0
 8011810:	bf14      	ite	ne
 8011812:	231c      	movne	r3, #28
 8011814:	231d      	moveq	r3, #29
 8011816:	e7db      	b.n	80117d0 <validate_structure+0x154>
 8011818:	231c      	movs	r3, #28
 801181a:	e7d9      	b.n	80117d0 <validate_structure+0x154>
 801181c:	231d      	movs	r3, #29
 801181e:	e7d7      	b.n	80117d0 <validate_structure+0x154>
 8011820:	b003      	add	sp, #12
 8011822:	bd30      	pop	{r4, r5, pc}
 8011824:	080142b4 	.word	0x080142b4

08011828 <mktime>:
 8011828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801182c:	4680      	mov	r8, r0
 801182e:	f000 fe3d 	bl	80124ac <__gettzinfo>
 8011832:	4681      	mov	r9, r0
 8011834:	4640      	mov	r0, r8
 8011836:	f7ff ff21 	bl	801167c <validate_structure>
 801183a:	e898 000c 	ldmia.w	r8, {r2, r3}
 801183e:	203c      	movs	r0, #60	; 0x3c
 8011840:	fb00 2303 	mla	r3, r0, r3, r2
 8011844:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011848:	f8d8 400c 	ldr.w	r4, [r8, #12]
 801184c:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 8011850:	fb07 3002 	mla	r0, r7, r2, r3
 8011854:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011858:	4aad      	ldr	r2, [pc, #692]	; (8011b10 <mktime+0x2e8>)
 801185a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 801185e:	3c01      	subs	r4, #1
 8011860:	2b01      	cmp	r3, #1
 8011862:	4414      	add	r4, r2
 8011864:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011868:	dd11      	ble.n	801188e <mktime+0x66>
 801186a:	079a      	lsls	r2, r3, #30
 801186c:	d10f      	bne.n	801188e <mktime+0x66>
 801186e:	2164      	movs	r1, #100	; 0x64
 8011870:	fb93 f2f1 	sdiv	r2, r3, r1
 8011874:	fb01 3212 	mls	r2, r1, r2, r3
 8011878:	b942      	cbnz	r2, 801188c <mktime+0x64>
 801187a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 801187e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011882:	fb95 f1f2 	sdiv	r1, r5, r2
 8011886:	fb02 5211 	mls	r2, r2, r1, r5
 801188a:	b902      	cbnz	r2, 801188e <mktime+0x66>
 801188c:	3401      	adds	r4, #1
 801188e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8011892:	3210      	adds	r2, #16
 8011894:	f644 6120 	movw	r1, #20000	; 0x4e20
 8011898:	428a      	cmp	r2, r1
 801189a:	f8c8 401c 	str.w	r4, [r8, #28]
 801189e:	461e      	mov	r6, r3
 80118a0:	f200 8131 	bhi.w	8011b06 <mktime+0x2de>
 80118a4:	2b46      	cmp	r3, #70	; 0x46
 80118a6:	dd21      	ble.n	80118ec <mktime+0xc4>
 80118a8:	2146      	movs	r1, #70	; 0x46
 80118aa:	078f      	lsls	r7, r1, #30
 80118ac:	d114      	bne.n	80118d8 <mktime+0xb0>
 80118ae:	2564      	movs	r5, #100	; 0x64
 80118b0:	fb91 f2f5 	sdiv	r2, r1, r5
 80118b4:	fb05 1212 	mls	r2, r5, r2, r1
 80118b8:	b98a      	cbnz	r2, 80118de <mktime+0xb6>
 80118ba:	f201 776c 	addw	r7, r1, #1900	; 0x76c
 80118be:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80118c2:	fb97 f5f2 	sdiv	r5, r7, r2
 80118c6:	fb02 7215 	mls	r2, r2, r5, r7
 80118ca:	2a00      	cmp	r2, #0
 80118cc:	f240 126d 	movw	r2, #365	; 0x16d
 80118d0:	bf08      	it	eq
 80118d2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80118d6:	e004      	b.n	80118e2 <mktime+0xba>
 80118d8:	f240 126d 	movw	r2, #365	; 0x16d
 80118dc:	e001      	b.n	80118e2 <mktime+0xba>
 80118de:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80118e2:	3101      	adds	r1, #1
 80118e4:	4299      	cmp	r1, r3
 80118e6:	4414      	add	r4, r2
 80118e8:	d1df      	bne.n	80118aa <mktime+0x82>
 80118ea:	e043      	b.n	8011974 <mktime+0x14c>
 80118ec:	d042      	beq.n	8011974 <mktime+0x14c>
 80118ee:	2145      	movs	r1, #69	; 0x45
 80118f0:	4299      	cmp	r1, r3
 80118f2:	dd1e      	ble.n	8011932 <mktime+0x10a>
 80118f4:	078e      	lsls	r6, r1, #30
 80118f6:	d114      	bne.n	8011922 <mktime+0xfa>
 80118f8:	2564      	movs	r5, #100	; 0x64
 80118fa:	fb91 f2f5 	sdiv	r2, r1, r5
 80118fe:	fb05 1212 	mls	r2, r5, r2, r1
 8011902:	b98a      	cbnz	r2, 8011928 <mktime+0x100>
 8011904:	f201 766c 	addw	r6, r1, #1900	; 0x76c
 8011908:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801190c:	fb96 f5f2 	sdiv	r5, r6, r2
 8011910:	fb02 6215 	mls	r2, r2, r5, r6
 8011914:	2a00      	cmp	r2, #0
 8011916:	f240 126d 	movw	r2, #365	; 0x16d
 801191a:	bf08      	it	eq
 801191c:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011920:	e004      	b.n	801192c <mktime+0x104>
 8011922:	f240 126d 	movw	r2, #365	; 0x16d
 8011926:	e001      	b.n	801192c <mktime+0x104>
 8011928:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 801192c:	1aa4      	subs	r4, r4, r2
 801192e:	3901      	subs	r1, #1
 8011930:	e7de      	b.n	80118f0 <mktime+0xc8>
 8011932:	2b45      	cmp	r3, #69	; 0x45
 8011934:	bfa8      	it	ge
 8011936:	2345      	movge	r3, #69	; 0x45
 8011938:	079d      	lsls	r5, r3, #30
 801193a:	461e      	mov	r6, r3
 801193c:	d114      	bne.n	8011968 <mktime+0x140>
 801193e:	2264      	movs	r2, #100	; 0x64
 8011940:	fb93 f3f2 	sdiv	r3, r3, r2
 8011944:	fb02 6313 	mls	r3, r2, r3, r6
 8011948:	b98b      	cbnz	r3, 801196e <mktime+0x146>
 801194a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 801194e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011952:	fb91 f2f3 	sdiv	r2, r1, r3
 8011956:	fb03 1312 	mls	r3, r3, r2, r1
 801195a:	2b00      	cmp	r3, #0
 801195c:	f240 136d 	movw	r3, #365	; 0x16d
 8011960:	bf08      	it	eq
 8011962:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8011966:	e004      	b.n	8011972 <mktime+0x14a>
 8011968:	f240 136d 	movw	r3, #365	; 0x16d
 801196c:	e001      	b.n	8011972 <mktime+0x14a>
 801196e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011972:	1ae4      	subs	r4, r4, r3
 8011974:	4f67      	ldr	r7, [pc, #412]	; (8011b14 <mktime+0x2ec>)
 8011976:	fb07 0704 	mla	r7, r7, r4, r0
 801197a:	f000 fb4b 	bl	8012014 <__tz_lock>
 801197e:	4b66      	ldr	r3, [pc, #408]	; (8011b18 <mktime+0x2f0>)
 8011980:	681d      	ldr	r5, [r3, #0]
 8011982:	2d00      	cmp	r5, #0
 8011984:	f000 80aa 	beq.w	8011adc <mktime+0x2b4>
 8011988:	f8d8 3020 	ldr.w	r3, [r8, #32]
 801198c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011990:	2b01      	cmp	r3, #1
 8011992:	bfa8      	it	ge
 8011994:	2301      	movge	r3, #1
 8011996:	469a      	mov	sl, r3
 8011998:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801199c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 80119a0:	4298      	cmp	r0, r3
 80119a2:	d10d      	bne.n	80119c0 <mktime+0x198>
 80119a4:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 80119a8:	f8d9 3020 	ldr.w	r3, [r9, #32]
 80119ac:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 80119b0:	f8d9 101c 	ldr.w	r1, [r9, #28]
 80119b4:	1ad5      	subs	r5, r2, r3
 80119b6:	42af      	cmp	r7, r5
 80119b8:	eba1 0100 	sub.w	r1, r1, r0
 80119bc:	da05      	bge.n	80119ca <mktime+0x1a2>
 80119be:	e007      	b.n	80119d0 <mktime+0x1a8>
 80119c0:	f000 fa82 	bl	8011ec8 <__tzcalc_limits>
 80119c4:	2800      	cmp	r0, #0
 80119c6:	d1ed      	bne.n	80119a4 <mktime+0x17c>
 80119c8:	e07b      	b.n	8011ac2 <mktime+0x29a>
 80119ca:	1a12      	subs	r2, r2, r0
 80119cc:	4297      	cmp	r7, r2
 80119ce:	db78      	blt.n	8011ac2 <mktime+0x29a>
 80119d0:	f8d9 2000 	ldr.w	r2, [r9]
 80119d4:	b112      	cbz	r2, 80119dc <mktime+0x1b4>
 80119d6:	428f      	cmp	r7, r1
 80119d8:	db7b      	blt.n	8011ad2 <mktime+0x2aa>
 80119da:	e001      	b.n	80119e0 <mktime+0x1b8>
 80119dc:	428f      	cmp	r7, r1
 80119de:	da07      	bge.n	80119f0 <mktime+0x1c8>
 80119e0:	42af      	cmp	r7, r5
 80119e2:	bfac      	ite	ge
 80119e4:	2500      	movge	r5, #0
 80119e6:	2501      	movlt	r5, #1
 80119e8:	f1ba 0f00 	cmp.w	sl, #0
 80119ec:	da04      	bge.n	80119f8 <mktime+0x1d0>
 80119ee:	e069      	b.n	8011ac4 <mktime+0x29c>
 80119f0:	f1ba 0f00 	cmp.w	sl, #0
 80119f4:	db68      	blt.n	8011ac8 <mktime+0x2a0>
 80119f6:	2501      	movs	r5, #1
 80119f8:	ea85 0a0a 	eor.w	sl, r5, sl
 80119fc:	f1ba 0f01 	cmp.w	sl, #1
 8011a00:	d160      	bne.n	8011ac4 <mktime+0x29c>
 8011a02:	1a1b      	subs	r3, r3, r0
 8011a04:	b905      	cbnz	r5, 8011a08 <mktime+0x1e0>
 8011a06:	425b      	negs	r3, r3
 8011a08:	f8d8 2000 	ldr.w	r2, [r8]
 8011a0c:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011a10:	441a      	add	r2, r3
 8011a12:	f8c8 2000 	str.w	r2, [r8]
 8011a16:	4640      	mov	r0, r8
 8011a18:	441f      	add	r7, r3
 8011a1a:	f7ff fe2f 	bl	801167c <validate_structure>
 8011a1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011a22:	ebb3 030a 	subs.w	r3, r3, sl
 8011a26:	d04d      	beq.n	8011ac4 <mktime+0x29c>
 8011a28:	2b01      	cmp	r3, #1
 8011a2a:	dc03      	bgt.n	8011a34 <mktime+0x20c>
 8011a2c:	1c98      	adds	r0, r3, #2
 8011a2e:	bfd8      	it	le
 8011a30:	2301      	movle	r3, #1
 8011a32:	e001      	b.n	8011a38 <mktime+0x210>
 8011a34:	f04f 33ff 	mov.w	r3, #4294967295
 8011a38:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8011a3c:	441c      	add	r4, r3
 8011a3e:	189b      	adds	r3, r3, r2
 8011a40:	d51d      	bpl.n	8011a7e <mktime+0x256>
 8011a42:	1e73      	subs	r3, r6, #1
 8011a44:	0799      	lsls	r1, r3, #30
 8011a46:	d114      	bne.n	8011a72 <mktime+0x24a>
 8011a48:	2164      	movs	r1, #100	; 0x64
 8011a4a:	fb93 f2f1 	sdiv	r2, r3, r1
 8011a4e:	fb01 3312 	mls	r3, r1, r2, r3
 8011a52:	b98b      	cbnz	r3, 8011a78 <mktime+0x250>
 8011a54:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8011a58:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011a5c:	fb96 f3f2 	sdiv	r3, r6, r2
 8011a60:	fb02 6613 	mls	r6, r2, r3, r6
 8011a64:	2e00      	cmp	r6, #0
 8011a66:	f240 136d 	movw	r3, #365	; 0x16d
 8011a6a:	bf18      	it	ne
 8011a6c:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8011a70:	e024      	b.n	8011abc <mktime+0x294>
 8011a72:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8011a76:	e021      	b.n	8011abc <mktime+0x294>
 8011a78:	f240 136d 	movw	r3, #365	; 0x16d
 8011a7c:	e01e      	b.n	8011abc <mktime+0x294>
 8011a7e:	07b2      	lsls	r2, r6, #30
 8011a80:	d114      	bne.n	8011aac <mktime+0x284>
 8011a82:	2164      	movs	r1, #100	; 0x64
 8011a84:	fb96 f2f1 	sdiv	r2, r6, r1
 8011a88:	fb01 6212 	mls	r2, r1, r2, r6
 8011a8c:	b98a      	cbnz	r2, 8011ab2 <mktime+0x28a>
 8011a8e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8011a92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011a96:	fb96 f2f1 	sdiv	r2, r6, r1
 8011a9a:	fb01 6612 	mls	r6, r1, r2, r6
 8011a9e:	2e00      	cmp	r6, #0
 8011aa0:	f240 126d 	movw	r2, #365	; 0x16d
 8011aa4:	bf08      	it	eq
 8011aa6:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011aaa:	e004      	b.n	8011ab6 <mktime+0x28e>
 8011aac:	f240 126d 	movw	r2, #365	; 0x16d
 8011ab0:	e001      	b.n	8011ab6 <mktime+0x28e>
 8011ab2:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011ab6:	429a      	cmp	r2, r3
 8011ab8:	bfd8      	it	le
 8011aba:	1a9b      	suble	r3, r3, r2
 8011abc:	f8c8 301c 	str.w	r3, [r8, #28]
 8011ac0:	e000      	b.n	8011ac4 <mktime+0x29c>
 8011ac2:	4655      	mov	r5, sl
 8011ac4:	2d01      	cmp	r5, #1
 8011ac6:	d109      	bne.n	8011adc <mktime+0x2b4>
 8011ac8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011acc:	2501      	movs	r5, #1
 8011ace:	183e      	adds	r6, r7, r0
 8011ad0:	e007      	b.n	8011ae2 <mktime+0x2ba>
 8011ad2:	f1ba 0f00 	cmp.w	sl, #0
 8011ad6:	f04f 0500 	mov.w	r5, #0
 8011ada:	da8d      	bge.n	80119f8 <mktime+0x1d0>
 8011adc:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8011ae0:	183e      	adds	r6, r7, r0
 8011ae2:	f000 fa98 	bl	8012016 <__tz_unlock>
 8011ae6:	3404      	adds	r4, #4
 8011ae8:	2307      	movs	r3, #7
 8011aea:	fb94 f3f3 	sdiv	r3, r4, r3
 8011aee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011af2:	1ae4      	subs	r4, r4, r3
 8011af4:	bf48      	it	mi
 8011af6:	3407      	addmi	r4, #7
 8011af8:	f8c8 5020 	str.w	r5, [r8, #32]
 8011afc:	f8c8 4018 	str.w	r4, [r8, #24]
 8011b00:	4630      	mov	r0, r6
 8011b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b06:	f04f 30ff 	mov.w	r0, #4294967295
 8011b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b0e:	bf00      	nop
 8011b10:	08014284 	.word	0x08014284
 8011b14:	00015180 	.word	0x00015180
 8011b18:	1fff4798 	.word	0x1fff4798

08011b1c <_puts_r>:
 8011b1c:	b570      	push	{r4, r5, r6, lr}
 8011b1e:	460e      	mov	r6, r1
 8011b20:	4605      	mov	r5, r0
 8011b22:	b118      	cbz	r0, 8011b2c <_puts_r+0x10>
 8011b24:	6983      	ldr	r3, [r0, #24]
 8011b26:	b90b      	cbnz	r3, 8011b2c <_puts_r+0x10>
 8011b28:	f000 fc38 	bl	801239c <__sinit>
 8011b2c:	68ac      	ldr	r4, [r5, #8]
 8011b2e:	89a3      	ldrh	r3, [r4, #12]
 8011b30:	0719      	lsls	r1, r3, #28
 8011b32:	d501      	bpl.n	8011b38 <_puts_r+0x1c>
 8011b34:	6923      	ldr	r3, [r4, #16]
 8011b36:	b983      	cbnz	r3, 8011b5a <_puts_r+0x3e>
 8011b38:	4628      	mov	r0, r5
 8011b3a:	4621      	mov	r1, r4
 8011b3c:	f000 fac0 	bl	80120c0 <__swsetup_r>
 8011b40:	b158      	cbz	r0, 8011b5a <_puts_r+0x3e>
 8011b42:	f04f 30ff 	mov.w	r0, #4294967295
 8011b46:	bd70      	pop	{r4, r5, r6, pc}
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	db0e      	blt.n	8011b6a <_puts_r+0x4e>
 8011b4c:	6823      	ldr	r3, [r4, #0]
 8011b4e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011b52:	701a      	strb	r2, [r3, #0]
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	3301      	adds	r3, #1
 8011b58:	6023      	str	r3, [r4, #0]
 8011b5a:	68a3      	ldr	r3, [r4, #8]
 8011b5c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8011b60:	3b01      	subs	r3, #1
 8011b62:	60a3      	str	r3, [r4, #8]
 8011b64:	2a00      	cmp	r2, #0
 8011b66:	d1ef      	bne.n	8011b48 <_puts_r+0x2c>
 8011b68:	e016      	b.n	8011b98 <_puts_r+0x7c>
 8011b6a:	69a2      	ldr	r2, [r4, #24]
 8011b6c:	4293      	cmp	r3, r2
 8011b6e:	db09      	blt.n	8011b84 <_puts_r+0x68>
 8011b70:	6823      	ldr	r3, [r4, #0]
 8011b72:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011b76:	701a      	strb	r2, [r3, #0]
 8011b78:	6823      	ldr	r3, [r4, #0]
 8011b7a:	7819      	ldrb	r1, [r3, #0]
 8011b7c:	290a      	cmp	r1, #10
 8011b7e:	d1ea      	bne.n	8011b56 <_puts_r+0x3a>
 8011b80:	4628      	mov	r0, r5
 8011b82:	e002      	b.n	8011b8a <_puts_r+0x6e>
 8011b84:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011b88:	4628      	mov	r0, r5
 8011b8a:	4622      	mov	r2, r4
 8011b8c:	f000 fa44 	bl	8012018 <__swbuf_r>
 8011b90:	1c42      	adds	r2, r0, #1
 8011b92:	4250      	negs	r0, r2
 8011b94:	4150      	adcs	r0, r2
 8011b96:	e7d3      	b.n	8011b40 <_puts_r+0x24>
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	da15      	bge.n	8011bc8 <_puts_r+0xac>
 8011b9c:	69a2      	ldr	r2, [r4, #24]
 8011b9e:	4293      	cmp	r3, r2
 8011ba0:	db08      	blt.n	8011bb4 <_puts_r+0x98>
 8011ba2:	6823      	ldr	r3, [r4, #0]
 8011ba4:	220a      	movs	r2, #10
 8011ba6:	701a      	strb	r2, [r3, #0]
 8011ba8:	6823      	ldr	r3, [r4, #0]
 8011baa:	7819      	ldrb	r1, [r3, #0]
 8011bac:	4291      	cmp	r1, r2
 8011bae:	d10f      	bne.n	8011bd0 <_puts_r+0xb4>
 8011bb0:	4628      	mov	r0, r5
 8011bb2:	e001      	b.n	8011bb8 <_puts_r+0x9c>
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	210a      	movs	r1, #10
 8011bb8:	4622      	mov	r2, r4
 8011bba:	f000 fa2d 	bl	8012018 <__swbuf_r>
 8011bbe:	1c43      	adds	r3, r0, #1
 8011bc0:	4258      	negs	r0, r3
 8011bc2:	4158      	adcs	r0, r3
 8011bc4:	b130      	cbz	r0, 8011bd4 <_puts_r+0xb8>
 8011bc6:	e7bc      	b.n	8011b42 <_puts_r+0x26>
 8011bc8:	6823      	ldr	r3, [r4, #0]
 8011bca:	220a      	movs	r2, #10
 8011bcc:	701a      	strb	r2, [r3, #0]
 8011bce:	6823      	ldr	r3, [r4, #0]
 8011bd0:	3301      	adds	r3, #1
 8011bd2:	6023      	str	r3, [r4, #0]
 8011bd4:	200a      	movs	r0, #10
 8011bd6:	bd70      	pop	{r4, r5, r6, pc}

08011bd8 <puts>:
 8011bd8:	4b02      	ldr	r3, [pc, #8]	; (8011be4 <puts+0xc>)
 8011bda:	4601      	mov	r1, r0
 8011bdc:	6818      	ldr	r0, [r3, #0]
 8011bde:	f7ff bf9d 	b.w	8011b1c <_puts_r>
 8011be2:	bf00      	nop
 8011be4:	1fff432c 	.word	0x1fff432c

08011be8 <siprintf>:
 8011be8:	b40e      	push	{r1, r2, r3}
 8011bea:	b500      	push	{lr}
 8011bec:	b09c      	sub	sp, #112	; 0x70
 8011bee:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011bf2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011bf6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011bfa:	9104      	str	r1, [sp, #16]
 8011bfc:	9107      	str	r1, [sp, #28]
 8011bfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011c02:	ab1d      	add	r3, sp, #116	; 0x74
 8011c04:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011c08:	4908      	ldr	r1, [pc, #32]	; (8011c2c <siprintf+0x44>)
 8011c0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011c0e:	9002      	str	r0, [sp, #8]
 8011c10:	9006      	str	r0, [sp, #24]
 8011c12:	6808      	ldr	r0, [r1, #0]
 8011c14:	9301      	str	r3, [sp, #4]
 8011c16:	a902      	add	r1, sp, #8
 8011c18:	f000 fd96 	bl	8012748 <_svfiprintf_r>
 8011c1c:	9b02      	ldr	r3, [sp, #8]
 8011c1e:	2200      	movs	r2, #0
 8011c20:	701a      	strb	r2, [r3, #0]
 8011c22:	b01c      	add	sp, #112	; 0x70
 8011c24:	f85d eb04 	ldr.w	lr, [sp], #4
 8011c28:	b003      	add	sp, #12
 8011c2a:	4770      	bx	lr
 8011c2c:	1fff432c 	.word	0x1fff432c

08011c30 <strcat>:
 8011c30:	b510      	push	{r4, lr}
 8011c32:	4602      	mov	r2, r0
 8011c34:	4613      	mov	r3, r2
 8011c36:	3201      	adds	r2, #1
 8011c38:	781c      	ldrb	r4, [r3, #0]
 8011c3a:	2c00      	cmp	r4, #0
 8011c3c:	d1fa      	bne.n	8011c34 <strcat+0x4>
 8011c3e:	3b01      	subs	r3, #1
 8011c40:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c44:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c48:	2a00      	cmp	r2, #0
 8011c4a:	d1f9      	bne.n	8011c40 <strcat+0x10>
 8011c4c:	bd10      	pop	{r4, pc}

08011c4e <strchr>:
 8011c4e:	b2c9      	uxtb	r1, r1
 8011c50:	4603      	mov	r3, r0
 8011c52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c56:	b11a      	cbz	r2, 8011c60 <strchr+0x12>
 8011c58:	428a      	cmp	r2, r1
 8011c5a:	d1f9      	bne.n	8011c50 <strchr+0x2>
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	4770      	bx	lr
 8011c60:	2900      	cmp	r1, #0
 8011c62:	bf0c      	ite	eq
 8011c64:	4618      	moveq	r0, r3
 8011c66:	2000      	movne	r0, #0
 8011c68:	4770      	bx	lr

08011c6a <strcpy>:
 8011c6a:	4603      	mov	r3, r0
 8011c6c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c70:	f803 2b01 	strb.w	r2, [r3], #1
 8011c74:	2a00      	cmp	r2, #0
 8011c76:	d1f9      	bne.n	8011c6c <strcpy+0x2>
 8011c78:	4770      	bx	lr

08011c7a <strlen>:
 8011c7a:	4603      	mov	r3, r0
 8011c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011c80:	2a00      	cmp	r2, #0
 8011c82:	d1fb      	bne.n	8011c7c <strlen+0x2>
 8011c84:	1a18      	subs	r0, r3, r0
 8011c86:	3801      	subs	r0, #1
 8011c88:	4770      	bx	lr

08011c8a <strncpy>:
 8011c8a:	b510      	push	{r4, lr}
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	b132      	cbz	r2, 8011c9e <strncpy+0x14>
 8011c90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c94:	f803 4b01 	strb.w	r4, [r3], #1
 8011c98:	3a01      	subs	r2, #1
 8011c9a:	2c00      	cmp	r4, #0
 8011c9c:	d1f7      	bne.n	8011c8e <strncpy+0x4>
 8011c9e:	441a      	add	r2, r3
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d003      	beq.n	8011cac <strncpy+0x22>
 8011ca4:	2100      	movs	r1, #0
 8011ca6:	f803 1b01 	strb.w	r1, [r3], #1
 8011caa:	e7f9      	b.n	8011ca0 <strncpy+0x16>
 8011cac:	bd10      	pop	{r4, pc}

08011cae <strstr>:
 8011cae:	b530      	push	{r4, r5, lr}
 8011cb0:	7803      	ldrb	r3, [r0, #0]
 8011cb2:	b923      	cbnz	r3, 8011cbe <strstr+0x10>
 8011cb4:	780b      	ldrb	r3, [r1, #0]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	bf18      	it	ne
 8011cba:	2000      	movne	r0, #0
 8011cbc:	bd30      	pop	{r4, r5, pc}
 8011cbe:	4603      	mov	r3, r0
 8011cc0:	3001      	adds	r0, #1
 8011cc2:	781a      	ldrb	r2, [r3, #0]
 8011cc4:	b13a      	cbz	r2, 8011cd6 <strstr+0x28>
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	5c8c      	ldrb	r4, [r1, r2]
 8011cca:	b134      	cbz	r4, 8011cda <strstr+0x2c>
 8011ccc:	5c9d      	ldrb	r5, [r3, r2]
 8011cce:	42a5      	cmp	r5, r4
 8011cd0:	d1f5      	bne.n	8011cbe <strstr+0x10>
 8011cd2:	3201      	adds	r2, #1
 8011cd4:	e7f8      	b.n	8011cc8 <strstr+0x1a>
 8011cd6:	4610      	mov	r0, r2
 8011cd8:	bd30      	pop	{r4, r5, pc}
 8011cda:	4618      	mov	r0, r3
 8011cdc:	bd30      	pop	{r4, r5, pc}
	...

08011ce0 <strtok>:
 8011ce0:	4b17      	ldr	r3, [pc, #92]	; (8011d40 <strtok+0x60>)
 8011ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ce6:	681d      	ldr	r5, [r3, #0]
 8011ce8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8011cea:	4606      	mov	r6, r0
 8011cec:	460f      	mov	r7, r1
 8011cee:	b9fc      	cbnz	r4, 8011d30 <strtok+0x50>
 8011cf0:	2050      	movs	r0, #80	; 0x50
 8011cf2:	f000 fc2d 	bl	8012550 <malloc>
 8011cf6:	65a8      	str	r0, [r5, #88]	; 0x58
 8011cf8:	6084      	str	r4, [r0, #8]
 8011cfa:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011cfc:	6004      	str	r4, [r0, #0]
 8011cfe:	6044      	str	r4, [r0, #4]
 8011d00:	611c      	str	r4, [r3, #16]
 8011d02:	60dc      	str	r4, [r3, #12]
 8011d04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d06:	619c      	str	r4, [r3, #24]
 8011d08:	615c      	str	r4, [r3, #20]
 8011d0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d0c:	62dc      	str	r4, [r3, #44]	; 0x2c
 8011d0e:	629c      	str	r4, [r3, #40]	; 0x28
 8011d10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d12:	635c      	str	r4, [r3, #52]	; 0x34
 8011d14:	631c      	str	r4, [r3, #48]	; 0x30
 8011d16:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d18:	63dc      	str	r4, [r3, #60]	; 0x3c
 8011d1a:	639c      	str	r4, [r3, #56]	; 0x38
 8011d1c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d1e:	645c      	str	r4, [r3, #68]	; 0x44
 8011d20:	641c      	str	r4, [r3, #64]	; 0x40
 8011d22:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d24:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011d26:	649c      	str	r4, [r3, #72]	; 0x48
 8011d28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d2a:	771c      	strb	r4, [r3, #28]
 8011d2c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011d2e:	625c      	str	r4, [r3, #36]	; 0x24
 8011d30:	4630      	mov	r0, r6
 8011d32:	4639      	mov	r1, r7
 8011d34:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8011d36:	2301      	movs	r3, #1
 8011d38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011d3c:	f000 b802 	b.w	8011d44 <__strtok_r>
 8011d40:	1fff432c 	.word	0x1fff432c

08011d44 <__strtok_r>:
 8011d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d46:	b948      	cbnz	r0, 8011d5c <__strtok_r+0x18>
 8011d48:	6810      	ldr	r0, [r2, #0]
 8011d4a:	b938      	cbnz	r0, 8011d5c <__strtok_r+0x18>
 8011d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d4e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011d52:	b15e      	cbz	r6, 8011d6c <__strtok_r+0x28>
 8011d54:	42b5      	cmp	r5, r6
 8011d56:	d1fa      	bne.n	8011d4e <__strtok_r+0xa>
 8011d58:	b12b      	cbz	r3, 8011d66 <__strtok_r+0x22>
 8011d5a:	4620      	mov	r0, r4
 8011d5c:	4604      	mov	r4, r0
 8011d5e:	460f      	mov	r7, r1
 8011d60:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011d64:	e7f3      	b.n	8011d4e <__strtok_r+0xa>
 8011d66:	6014      	str	r4, [r2, #0]
 8011d68:	7003      	strb	r3, [r0, #0]
 8011d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d6c:	b94d      	cbnz	r5, 8011d82 <__strtok_r+0x3e>
 8011d6e:	6015      	str	r5, [r2, #0]
 8011d70:	4628      	mov	r0, r5
 8011d72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011d74:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011d78:	42ae      	cmp	r6, r5
 8011d7a:	d007      	beq.n	8011d8c <__strtok_r+0x48>
 8011d7c:	2e00      	cmp	r6, #0
 8011d7e:	d1f9      	bne.n	8011d74 <__strtok_r+0x30>
 8011d80:	461c      	mov	r4, r3
 8011d82:	4623      	mov	r3, r4
 8011d84:	460f      	mov	r7, r1
 8011d86:	f813 5b01 	ldrb.w	r5, [r3], #1
 8011d8a:	e7f3      	b.n	8011d74 <__strtok_r+0x30>
 8011d8c:	b115      	cbz	r5, 8011d94 <__strtok_r+0x50>
 8011d8e:	2100      	movs	r1, #0
 8011d90:	7021      	strb	r1, [r4, #0]
 8011d92:	e000      	b.n	8011d96 <__strtok_r+0x52>
 8011d94:	462b      	mov	r3, r5
 8011d96:	6013      	str	r3, [r2, #0]
 8011d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011d9a <strtok_r>:
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	f7ff bfd2 	b.w	8011d44 <__strtok_r>

08011da0 <_strtol_r>:
 8011da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011da4:	4c40      	ldr	r4, [pc, #256]	; (8011ea8 <_strtol_r+0x108>)
 8011da6:	f8d4 9000 	ldr.w	r9, [r4]
 8011daa:	460f      	mov	r7, r1
 8011dac:	463d      	mov	r5, r7
 8011dae:	f815 eb01 	ldrb.w	lr, [r5], #1
 8011db2:	eb09 040e 	add.w	r4, r9, lr
 8011db6:	7866      	ldrb	r6, [r4, #1]
 8011db8:	f006 0408 	and.w	r4, r6, #8
 8011dbc:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8011dc0:	b10c      	cbz	r4, 8011dc6 <_strtol_r+0x26>
 8011dc2:	462f      	mov	r7, r5
 8011dc4:	e7f2      	b.n	8011dac <_strtol_r+0xc>
 8011dc6:	4674      	mov	r4, lr
 8011dc8:	2c2d      	cmp	r4, #45	; 0x2d
 8011dca:	d103      	bne.n	8011dd4 <_strtol_r+0x34>
 8011dcc:	1cbd      	adds	r5, r7, #2
 8011dce:	787c      	ldrb	r4, [r7, #1]
 8011dd0:	2601      	movs	r6, #1
 8011dd2:	e003      	b.n	8011ddc <_strtol_r+0x3c>
 8011dd4:	2c2b      	cmp	r4, #43	; 0x2b
 8011dd6:	bf04      	itt	eq
 8011dd8:	787c      	ldrbeq	r4, [r7, #1]
 8011dda:	1cbd      	addeq	r5, r7, #2
 8011ddc:	b113      	cbz	r3, 8011de4 <_strtol_r+0x44>
 8011dde:	2b10      	cmp	r3, #16
 8011de0:	d10a      	bne.n	8011df8 <_strtol_r+0x58>
 8011de2:	e05a      	b.n	8011e9a <_strtol_r+0xfa>
 8011de4:	2c30      	cmp	r4, #48	; 0x30
 8011de6:	d156      	bne.n	8011e96 <_strtol_r+0xf6>
 8011de8:	782c      	ldrb	r4, [r5, #0]
 8011dea:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011dee:	2c58      	cmp	r4, #88	; 0x58
 8011df0:	d14c      	bne.n	8011e8c <_strtol_r+0xec>
 8011df2:	786c      	ldrb	r4, [r5, #1]
 8011df4:	2310      	movs	r3, #16
 8011df6:	3502      	adds	r5, #2
 8011df8:	2e00      	cmp	r6, #0
 8011dfa:	bf14      	ite	ne
 8011dfc:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8011e00:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8011e04:	2700      	movs	r7, #0
 8011e06:	fbb8 faf3 	udiv	sl, r8, r3
 8011e0a:	46be      	mov	lr, r7
 8011e0c:	fb03 881a 	mls	r8, r3, sl, r8
 8011e10:	eb09 0c04 	add.w	ip, r9, r4
 8011e14:	f89c c001 	ldrb.w	ip, [ip, #1]
 8011e18:	f01c 0f04 	tst.w	ip, #4
 8011e1c:	d001      	beq.n	8011e22 <_strtol_r+0x82>
 8011e1e:	3c30      	subs	r4, #48	; 0x30
 8011e20:	e00b      	b.n	8011e3a <_strtol_r+0x9a>
 8011e22:	f01c 0c03 	ands.w	ip, ip, #3
 8011e26:	d01b      	beq.n	8011e60 <_strtol_r+0xc0>
 8011e28:	f1bc 0f01 	cmp.w	ip, #1
 8011e2c:	bf0c      	ite	eq
 8011e2e:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8011e32:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8011e36:	ebcc 0404 	rsb	r4, ip, r4
 8011e3a:	429c      	cmp	r4, r3
 8011e3c:	da10      	bge.n	8011e60 <_strtol_r+0xc0>
 8011e3e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011e42:	d00a      	beq.n	8011e5a <_strtol_r+0xba>
 8011e44:	45d6      	cmp	lr, sl
 8011e46:	d806      	bhi.n	8011e56 <_strtol_r+0xb6>
 8011e48:	d101      	bne.n	8011e4e <_strtol_r+0xae>
 8011e4a:	4544      	cmp	r4, r8
 8011e4c:	dc03      	bgt.n	8011e56 <_strtol_r+0xb6>
 8011e4e:	fb03 4e0e 	mla	lr, r3, lr, r4
 8011e52:	2701      	movs	r7, #1
 8011e54:	e001      	b.n	8011e5a <_strtol_r+0xba>
 8011e56:	f04f 37ff 	mov.w	r7, #4294967295
 8011e5a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011e5e:	e7d7      	b.n	8011e10 <_strtol_r+0x70>
 8011e60:	1c7c      	adds	r4, r7, #1
 8011e62:	4673      	mov	r3, lr
 8011e64:	d10a      	bne.n	8011e7c <_strtol_r+0xdc>
 8011e66:	2e00      	cmp	r6, #0
 8011e68:	f04f 0122 	mov.w	r1, #34	; 0x22
 8011e6c:	bf14      	ite	ne
 8011e6e:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8011e72:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8011e76:	6001      	str	r1, [r0, #0]
 8011e78:	b92a      	cbnz	r2, 8011e86 <_strtol_r+0xe6>
 8011e7a:	e011      	b.n	8011ea0 <_strtol_r+0x100>
 8011e7c:	b10e      	cbz	r6, 8011e82 <_strtol_r+0xe2>
 8011e7e:	f1ce 0300 	rsb	r3, lr, #0
 8011e82:	b16a      	cbz	r2, 8011ea0 <_strtol_r+0x100>
 8011e84:	b107      	cbz	r7, 8011e88 <_strtol_r+0xe8>
 8011e86:	1e69      	subs	r1, r5, #1
 8011e88:	6011      	str	r1, [r2, #0]
 8011e8a:	e009      	b.n	8011ea0 <_strtol_r+0x100>
 8011e8c:	2430      	movs	r4, #48	; 0x30
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d1b2      	bne.n	8011df8 <_strtol_r+0x58>
 8011e92:	2308      	movs	r3, #8
 8011e94:	e7b0      	b.n	8011df8 <_strtol_r+0x58>
 8011e96:	230a      	movs	r3, #10
 8011e98:	e7ae      	b.n	8011df8 <_strtol_r+0x58>
 8011e9a:	2c30      	cmp	r4, #48	; 0x30
 8011e9c:	d1ac      	bne.n	8011df8 <_strtol_r+0x58>
 8011e9e:	e7a3      	b.n	8011de8 <_strtol_r+0x48>
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011ea6:	bf00      	nop
 8011ea8:	1fff4330 	.word	0x1fff4330

08011eac <strtol>:
 8011eac:	b530      	push	{r4, r5, lr}
 8011eae:	4613      	mov	r3, r2
 8011eb0:	4a04      	ldr	r2, [pc, #16]	; (8011ec4 <strtol+0x18>)
 8011eb2:	4605      	mov	r5, r0
 8011eb4:	460c      	mov	r4, r1
 8011eb6:	6810      	ldr	r0, [r2, #0]
 8011eb8:	4629      	mov	r1, r5
 8011eba:	4622      	mov	r2, r4
 8011ebc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011ec0:	f7ff bf6e 	b.w	8011da0 <_strtol_r>
 8011ec4:	1fff432c 	.word	0x1fff432c

08011ec8 <__tzcalc_limits>:
 8011ec8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ecc:	4604      	mov	r4, r0
 8011ece:	f000 faed 	bl	80124ac <__gettzinfo>
 8011ed2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8011ed6:	429c      	cmp	r4, r3
 8011ed8:	f340 8094 	ble.w	8012004 <__tzcalc_limits+0x13c>
 8011edc:	f46f 6ef6 	mvn.w	lr, #1968	; 0x7b0
 8011ee0:	eb04 030e 	add.w	r3, r4, lr
 8011ee4:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8011ee8:	109b      	asrs	r3, r3, #2
 8011eea:	f240 166d 	movw	r6, #365	; 0x16d
 8011eee:	fb06 3602 	mla	r6, r6, r2, r3
 8011ef2:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 8011ef6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011efa:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8011efe:	fb92 f2f3 	sdiv	r2, r2, r3
 8011f02:	18b3      	adds	r3, r6, r2
 8011f04:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8011f08:	eb04 060c 	add.w	r6, r4, ip
 8011f0c:	fb96 f6f5 	sdiv	r6, r6, r5
 8011f10:	441e      	add	r6, r3
 8011f12:	2364      	movs	r3, #100	; 0x64
 8011f14:	6044      	str	r4, [r0, #4]
 8011f16:	fb94 fef3 	sdiv	lr, r4, r3
 8011f1a:	4601      	mov	r1, r0
 8011f1c:	fb03 4e1e 	mls	lr, r3, lr, r4
 8011f20:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 8011f24:	fb94 f3f5 	sdiv	r3, r4, r5
 8011f28:	fb05 4513 	mls	r5, r5, r3, r4
 8011f2c:	fab5 f585 	clz	r5, r5
 8011f30:	096d      	lsrs	r5, r5, #5
 8011f32:	7a0b      	ldrb	r3, [r1, #8]
 8011f34:	2b4a      	cmp	r3, #74	; 0x4a
 8011f36:	d111      	bne.n	8011f5c <__tzcalc_limits+0x94>
 8011f38:	694b      	ldr	r3, [r1, #20]
 8011f3a:	07a7      	lsls	r7, r4, #30
 8011f3c:	eb06 0203 	add.w	r2, r6, r3
 8011f40:	d102      	bne.n	8011f48 <__tzcalc_limits+0x80>
 8011f42:	f1be 0f00 	cmp.w	lr, #0
 8011f46:	d100      	bne.n	8011f4a <__tzcalc_limits+0x82>
 8011f48:	b125      	cbz	r5, 8011f54 <__tzcalc_limits+0x8c>
 8011f4a:	2b3b      	cmp	r3, #59	; 0x3b
 8011f4c:	bfd4      	ite	le
 8011f4e:	2300      	movle	r3, #0
 8011f50:	2301      	movgt	r3, #1
 8011f52:	e000      	b.n	8011f56 <__tzcalc_limits+0x8e>
 8011f54:	462b      	mov	r3, r5
 8011f56:	4413      	add	r3, r2
 8011f58:	3b01      	subs	r3, #1
 8011f5a:	e03f      	b.n	8011fdc <__tzcalc_limits+0x114>
 8011f5c:	2b44      	cmp	r3, #68	; 0x44
 8011f5e:	d102      	bne.n	8011f66 <__tzcalc_limits+0x9e>
 8011f60:	694b      	ldr	r3, [r1, #20]
 8011f62:	4433      	add	r3, r6
 8011f64:	e03a      	b.n	8011fdc <__tzcalc_limits+0x114>
 8011f66:	07a2      	lsls	r2, r4, #30
 8011f68:	d105      	bne.n	8011f76 <__tzcalc_limits+0xae>
 8011f6a:	f1be 0f00 	cmp.w	lr, #0
 8011f6e:	bf0c      	ite	eq
 8011f70:	462b      	moveq	r3, r5
 8011f72:	2301      	movne	r3, #1
 8011f74:	e000      	b.n	8011f78 <__tzcalc_limits+0xb0>
 8011f76:	462b      	mov	r3, r5
 8011f78:	4a24      	ldr	r2, [pc, #144]	; (801200c <__tzcalc_limits+0x144>)
 8011f7a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8011f7e:	fb09 2903 	mla	r9, r9, r3, r2
 8011f82:	68ca      	ldr	r2, [r1, #12]
 8011f84:	f1a9 0704 	sub.w	r7, r9, #4
 8011f88:	46b2      	mov	sl, r6
 8011f8a:	2301      	movs	r3, #1
 8011f8c:	4293      	cmp	r3, r2
 8011f8e:	da04      	bge.n	8011f9a <__tzcalc_limits+0xd2>
 8011f90:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8011f94:	3301      	adds	r3, #1
 8011f96:	44c2      	add	sl, r8
 8011f98:	e7f8      	b.n	8011f8c <__tzcalc_limits+0xc4>
 8011f9a:	2a01      	cmp	r2, #1
 8011f9c:	bfb8      	it	lt
 8011f9e:	2201      	movlt	r2, #1
 8011fa0:	4690      	mov	r8, r2
 8011fa2:	2707      	movs	r7, #7
 8011fa4:	f10a 0204 	add.w	r2, sl, #4
 8011fa8:	fb92 f7f7 	sdiv	r7, r2, r7
 8011fac:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8011fb0:	1bd7      	subs	r7, r2, r7
 8011fb2:	694a      	ldr	r2, [r1, #20]
 8011fb4:	1bd2      	subs	r2, r2, r7
 8011fb6:	690f      	ldr	r7, [r1, #16]
 8011fb8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8011fbc:	f107 37ff 	add.w	r7, r7, #4294967295
 8011fc0:	f108 38ff 	add.w	r8, r8, #4294967295
 8011fc4:	bf48      	it	mi
 8011fc6:	3207      	addmi	r2, #7
 8011fc8:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8011fcc:	18bb      	adds	r3, r7, r2
 8011fce:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 8011fd2:	4293      	cmp	r3, r2
 8011fd4:	db01      	blt.n	8011fda <__tzcalc_limits+0x112>
 8011fd6:	3b07      	subs	r3, #7
 8011fd8:	e7fb      	b.n	8011fd2 <__tzcalc_limits+0x10a>
 8011fda:	4453      	add	r3, sl
 8011fdc:	698a      	ldr	r2, [r1, #24]
 8011fde:	4f0c      	ldr	r7, [pc, #48]	; (8012010 <__tzcalc_limits+0x148>)
 8011fe0:	fb07 2303 	mla	r3, r7, r3, r2
 8011fe4:	6a0f      	ldr	r7, [r1, #32]
 8011fe6:	443b      	add	r3, r7
 8011fe8:	f841 3f1c 	str.w	r3, [r1, #28]!
 8011fec:	4561      	cmp	r1, ip
 8011fee:	d1a0      	bne.n	8011f32 <__tzcalc_limits+0x6a>
 8011ff0:	69c3      	ldr	r3, [r0, #28]
 8011ff2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	bfac      	ite	ge
 8011ff8:	2300      	movge	r3, #0
 8011ffa:	2301      	movlt	r3, #1
 8011ffc:	6003      	str	r3, [r0, #0]
 8011ffe:	2001      	movs	r0, #1
 8012000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012004:	2000      	movs	r0, #0
 8012006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801200a:	bf00      	nop
 801200c:	08014448 	.word	0x08014448
 8012010:	00015180 	.word	0x00015180

08012014 <__tz_lock>:
 8012014:	4770      	bx	lr

08012016 <__tz_unlock>:
 8012016:	4770      	bx	lr

08012018 <__swbuf_r>:
 8012018:	b570      	push	{r4, r5, r6, lr}
 801201a:	460d      	mov	r5, r1
 801201c:	4614      	mov	r4, r2
 801201e:	4606      	mov	r6, r0
 8012020:	b118      	cbz	r0, 801202a <__swbuf_r+0x12>
 8012022:	6983      	ldr	r3, [r0, #24]
 8012024:	b90b      	cbnz	r3, 801202a <__swbuf_r+0x12>
 8012026:	f000 f9b9 	bl	801239c <__sinit>
 801202a:	4b22      	ldr	r3, [pc, #136]	; (80120b4 <__swbuf_r+0x9c>)
 801202c:	429c      	cmp	r4, r3
 801202e:	d101      	bne.n	8012034 <__swbuf_r+0x1c>
 8012030:	6874      	ldr	r4, [r6, #4]
 8012032:	e008      	b.n	8012046 <__swbuf_r+0x2e>
 8012034:	4b20      	ldr	r3, [pc, #128]	; (80120b8 <__swbuf_r+0xa0>)
 8012036:	429c      	cmp	r4, r3
 8012038:	d101      	bne.n	801203e <__swbuf_r+0x26>
 801203a:	68b4      	ldr	r4, [r6, #8]
 801203c:	e003      	b.n	8012046 <__swbuf_r+0x2e>
 801203e:	4b1f      	ldr	r3, [pc, #124]	; (80120bc <__swbuf_r+0xa4>)
 8012040:	429c      	cmp	r4, r3
 8012042:	bf08      	it	eq
 8012044:	68f4      	ldreq	r4, [r6, #12]
 8012046:	69a3      	ldr	r3, [r4, #24]
 8012048:	60a3      	str	r3, [r4, #8]
 801204a:	89a3      	ldrh	r3, [r4, #12]
 801204c:	071a      	lsls	r2, r3, #28
 801204e:	d509      	bpl.n	8012064 <__swbuf_r+0x4c>
 8012050:	6923      	ldr	r3, [r4, #16]
 8012052:	b13b      	cbz	r3, 8012064 <__swbuf_r+0x4c>
 8012054:	6823      	ldr	r3, [r4, #0]
 8012056:	6920      	ldr	r0, [r4, #16]
 8012058:	1a18      	subs	r0, r3, r0
 801205a:	6963      	ldr	r3, [r4, #20]
 801205c:	4298      	cmp	r0, r3
 801205e:	b2ed      	uxtb	r5, r5
 8012060:	db0f      	blt.n	8012082 <__swbuf_r+0x6a>
 8012062:	e008      	b.n	8012076 <__swbuf_r+0x5e>
 8012064:	4630      	mov	r0, r6
 8012066:	4621      	mov	r1, r4
 8012068:	f000 f82a 	bl	80120c0 <__swsetup_r>
 801206c:	2800      	cmp	r0, #0
 801206e:	d0f1      	beq.n	8012054 <__swbuf_r+0x3c>
 8012070:	f04f 30ff 	mov.w	r0, #4294967295
 8012074:	bd70      	pop	{r4, r5, r6, pc}
 8012076:	4630      	mov	r0, r6
 8012078:	4621      	mov	r1, r4
 801207a:	f000 f925 	bl	80122c8 <_fflush_r>
 801207e:	2800      	cmp	r0, #0
 8012080:	d1f6      	bne.n	8012070 <__swbuf_r+0x58>
 8012082:	68a3      	ldr	r3, [r4, #8]
 8012084:	3b01      	subs	r3, #1
 8012086:	60a3      	str	r3, [r4, #8]
 8012088:	6823      	ldr	r3, [r4, #0]
 801208a:	1c5a      	adds	r2, r3, #1
 801208c:	6022      	str	r2, [r4, #0]
 801208e:	701d      	strb	r5, [r3, #0]
 8012090:	6963      	ldr	r3, [r4, #20]
 8012092:	3001      	adds	r0, #1
 8012094:	4298      	cmp	r0, r3
 8012096:	d004      	beq.n	80120a2 <__swbuf_r+0x8a>
 8012098:	89a3      	ldrh	r3, [r4, #12]
 801209a:	07db      	lsls	r3, r3, #31
 801209c:	d507      	bpl.n	80120ae <__swbuf_r+0x96>
 801209e:	2d0a      	cmp	r5, #10
 80120a0:	d105      	bne.n	80120ae <__swbuf_r+0x96>
 80120a2:	4630      	mov	r0, r6
 80120a4:	4621      	mov	r1, r4
 80120a6:	f000 f90f 	bl	80122c8 <_fflush_r>
 80120aa:	2800      	cmp	r0, #0
 80120ac:	d1e0      	bne.n	8012070 <__swbuf_r+0x58>
 80120ae:	4628      	mov	r0, r5
 80120b0:	bd70      	pop	{r4, r5, r6, pc}
 80120b2:	bf00      	nop
 80120b4:	080143e8 	.word	0x080143e8
 80120b8:	08014408 	.word	0x08014408
 80120bc:	08014428 	.word	0x08014428

080120c0 <__swsetup_r>:
 80120c0:	4b31      	ldr	r3, [pc, #196]	; (8012188 <__swsetup_r+0xc8>)
 80120c2:	b570      	push	{r4, r5, r6, lr}
 80120c4:	681d      	ldr	r5, [r3, #0]
 80120c6:	4606      	mov	r6, r0
 80120c8:	460c      	mov	r4, r1
 80120ca:	b125      	cbz	r5, 80120d6 <__swsetup_r+0x16>
 80120cc:	69ab      	ldr	r3, [r5, #24]
 80120ce:	b913      	cbnz	r3, 80120d6 <__swsetup_r+0x16>
 80120d0:	4628      	mov	r0, r5
 80120d2:	f000 f963 	bl	801239c <__sinit>
 80120d6:	4b2d      	ldr	r3, [pc, #180]	; (801218c <__swsetup_r+0xcc>)
 80120d8:	429c      	cmp	r4, r3
 80120da:	d101      	bne.n	80120e0 <__swsetup_r+0x20>
 80120dc:	686c      	ldr	r4, [r5, #4]
 80120de:	e008      	b.n	80120f2 <__swsetup_r+0x32>
 80120e0:	4b2b      	ldr	r3, [pc, #172]	; (8012190 <__swsetup_r+0xd0>)
 80120e2:	429c      	cmp	r4, r3
 80120e4:	d101      	bne.n	80120ea <__swsetup_r+0x2a>
 80120e6:	68ac      	ldr	r4, [r5, #8]
 80120e8:	e003      	b.n	80120f2 <__swsetup_r+0x32>
 80120ea:	4b2a      	ldr	r3, [pc, #168]	; (8012194 <__swsetup_r+0xd4>)
 80120ec:	429c      	cmp	r4, r3
 80120ee:	bf08      	it	eq
 80120f0:	68ec      	ldreq	r4, [r5, #12]
 80120f2:	89a3      	ldrh	r3, [r4, #12]
 80120f4:	b29a      	uxth	r2, r3
 80120f6:	0711      	lsls	r1, r2, #28
 80120f8:	d41d      	bmi.n	8012136 <__swsetup_r+0x76>
 80120fa:	06d5      	lsls	r5, r2, #27
 80120fc:	d402      	bmi.n	8012104 <__swsetup_r+0x44>
 80120fe:	2209      	movs	r2, #9
 8012100:	6032      	str	r2, [r6, #0]
 8012102:	e038      	b.n	8012176 <__swsetup_r+0xb6>
 8012104:	0750      	lsls	r0, r2, #29
 8012106:	d512      	bpl.n	801212e <__swsetup_r+0x6e>
 8012108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801210a:	b141      	cbz	r1, 801211e <__swsetup_r+0x5e>
 801210c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012110:	4299      	cmp	r1, r3
 8012112:	d002      	beq.n	801211a <__swsetup_r+0x5a>
 8012114:	4630      	mov	r0, r6
 8012116:	f000 fa23 	bl	8012560 <_free_r>
 801211a:	2300      	movs	r3, #0
 801211c:	6363      	str	r3, [r4, #52]	; 0x34
 801211e:	89a3      	ldrh	r3, [r4, #12]
 8012120:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012124:	81a3      	strh	r3, [r4, #12]
 8012126:	2300      	movs	r3, #0
 8012128:	6063      	str	r3, [r4, #4]
 801212a:	6923      	ldr	r3, [r4, #16]
 801212c:	6023      	str	r3, [r4, #0]
 801212e:	89a3      	ldrh	r3, [r4, #12]
 8012130:	f043 0308 	orr.w	r3, r3, #8
 8012134:	81a3      	strh	r3, [r4, #12]
 8012136:	6923      	ldr	r3, [r4, #16]
 8012138:	b94b      	cbnz	r3, 801214e <__swsetup_r+0x8e>
 801213a:	89a3      	ldrh	r3, [r4, #12]
 801213c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012140:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012144:	d003      	beq.n	801214e <__swsetup_r+0x8e>
 8012146:	4630      	mov	r0, r6
 8012148:	4621      	mov	r1, r4
 801214a:	f000 f9b3 	bl	80124b4 <__smakebuf_r>
 801214e:	89a3      	ldrh	r3, [r4, #12]
 8012150:	f013 0201 	ands.w	r2, r3, #1
 8012154:	d005      	beq.n	8012162 <__swsetup_r+0xa2>
 8012156:	2200      	movs	r2, #0
 8012158:	60a2      	str	r2, [r4, #8]
 801215a:	6962      	ldr	r2, [r4, #20]
 801215c:	4252      	negs	r2, r2
 801215e:	61a2      	str	r2, [r4, #24]
 8012160:	e003      	b.n	801216a <__swsetup_r+0xaa>
 8012162:	0799      	lsls	r1, r3, #30
 8012164:	bf58      	it	pl
 8012166:	6962      	ldrpl	r2, [r4, #20]
 8012168:	60a2      	str	r2, [r4, #8]
 801216a:	6922      	ldr	r2, [r4, #16]
 801216c:	b94a      	cbnz	r2, 8012182 <__swsetup_r+0xc2>
 801216e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8012172:	b280      	uxth	r0, r0
 8012174:	b130      	cbz	r0, 8012184 <__swsetup_r+0xc4>
 8012176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801217a:	81a3      	strh	r3, [r4, #12]
 801217c:	f04f 30ff 	mov.w	r0, #4294967295
 8012180:	bd70      	pop	{r4, r5, r6, pc}
 8012182:	2000      	movs	r0, #0
 8012184:	bd70      	pop	{r4, r5, r6, pc}
 8012186:	bf00      	nop
 8012188:	1fff432c 	.word	0x1fff432c
 801218c:	080143e8 	.word	0x080143e8
 8012190:	08014408 	.word	0x08014408
 8012194:	08014428 	.word	0x08014428

08012198 <div>:
 8012198:	2900      	cmp	r1, #0
 801219a:	b510      	push	{r4, lr}
 801219c:	fb91 f4f2 	sdiv	r4, r1, r2
 80121a0:	fb02 1314 	mls	r3, r2, r4, r1
 80121a4:	db04      	blt.n	80121b0 <div+0x18>
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	da07      	bge.n	80121ba <div+0x22>
 80121aa:	3401      	adds	r4, #1
 80121ac:	1a9b      	subs	r3, r3, r2
 80121ae:	e004      	b.n	80121ba <div+0x22>
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfc4      	itt	gt
 80121b4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80121b8:	189b      	addgt	r3, r3, r2
 80121ba:	6004      	str	r4, [r0, #0]
 80121bc:	6043      	str	r3, [r0, #4]
 80121be:	bd10      	pop	{r4, pc}

080121c0 <__sflush_r>:
 80121c0:	898a      	ldrh	r2, [r1, #12]
 80121c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80121c6:	4605      	mov	r5, r0
 80121c8:	0710      	lsls	r0, r2, #28
 80121ca:	460c      	mov	r4, r1
 80121cc:	d457      	bmi.n	801227e <__sflush_r+0xbe>
 80121ce:	684b      	ldr	r3, [r1, #4]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	dc02      	bgt.n	80121da <__sflush_r+0x1a>
 80121d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	dd18      	ble.n	801220c <__sflush_r+0x4c>
 80121da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80121dc:	b1b6      	cbz	r6, 801220c <__sflush_r+0x4c>
 80121de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80121e2:	2300      	movs	r3, #0
 80121e4:	b292      	uxth	r2, r2
 80121e6:	682f      	ldr	r7, [r5, #0]
 80121e8:	602b      	str	r3, [r5, #0]
 80121ea:	b10a      	cbz	r2, 80121f0 <__sflush_r+0x30>
 80121ec:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80121ee:	e010      	b.n	8012212 <__sflush_r+0x52>
 80121f0:	6a21      	ldr	r1, [r4, #32]
 80121f2:	4628      	mov	r0, r5
 80121f4:	2301      	movs	r3, #1
 80121f6:	47b0      	blx	r6
 80121f8:	1c41      	adds	r1, r0, #1
 80121fa:	4602      	mov	r2, r0
 80121fc:	d109      	bne.n	8012212 <__sflush_r+0x52>
 80121fe:	682b      	ldr	r3, [r5, #0]
 8012200:	b13b      	cbz	r3, 8012212 <__sflush_r+0x52>
 8012202:	2b1d      	cmp	r3, #29
 8012204:	d001      	beq.n	801220a <__sflush_r+0x4a>
 8012206:	2b16      	cmp	r3, #22
 8012208:	d147      	bne.n	801229a <__sflush_r+0xda>
 801220a:	602f      	str	r7, [r5, #0]
 801220c:	2000      	movs	r0, #0
 801220e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012212:	89a3      	ldrh	r3, [r4, #12]
 8012214:	075b      	lsls	r3, r3, #29
 8012216:	d505      	bpl.n	8012224 <__sflush_r+0x64>
 8012218:	6863      	ldr	r3, [r4, #4]
 801221a:	1ad2      	subs	r2, r2, r3
 801221c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801221e:	b10b      	cbz	r3, 8012224 <__sflush_r+0x64>
 8012220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012222:	1ad2      	subs	r2, r2, r3
 8012224:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012226:	6a21      	ldr	r1, [r4, #32]
 8012228:	2300      	movs	r3, #0
 801222a:	4628      	mov	r0, r5
 801222c:	47b0      	blx	r6
 801222e:	1c46      	adds	r6, r0, #1
 8012230:	89a3      	ldrh	r3, [r4, #12]
 8012232:	d105      	bne.n	8012240 <__sflush_r+0x80>
 8012234:	682a      	ldr	r2, [r5, #0]
 8012236:	b11a      	cbz	r2, 8012240 <__sflush_r+0x80>
 8012238:	2a1d      	cmp	r2, #29
 801223a:	d001      	beq.n	8012240 <__sflush_r+0x80>
 801223c:	2a16      	cmp	r2, #22
 801223e:	d119      	bne.n	8012274 <__sflush_r+0xb4>
 8012240:	2200      	movs	r2, #0
 8012242:	6062      	str	r2, [r4, #4]
 8012244:	04d9      	lsls	r1, r3, #19
 8012246:	6922      	ldr	r2, [r4, #16]
 8012248:	6022      	str	r2, [r4, #0]
 801224a:	d504      	bpl.n	8012256 <__sflush_r+0x96>
 801224c:	1c42      	adds	r2, r0, #1
 801224e:	d101      	bne.n	8012254 <__sflush_r+0x94>
 8012250:	682b      	ldr	r3, [r5, #0]
 8012252:	b903      	cbnz	r3, 8012256 <__sflush_r+0x96>
 8012254:	6560      	str	r0, [r4, #84]	; 0x54
 8012256:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012258:	602f      	str	r7, [r5, #0]
 801225a:	2900      	cmp	r1, #0
 801225c:	d0d6      	beq.n	801220c <__sflush_r+0x4c>
 801225e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012262:	4299      	cmp	r1, r3
 8012264:	d002      	beq.n	801226c <__sflush_r+0xac>
 8012266:	4628      	mov	r0, r5
 8012268:	f000 f97a 	bl	8012560 <_free_r>
 801226c:	2000      	movs	r0, #0
 801226e:	6360      	str	r0, [r4, #52]	; 0x34
 8012270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012278:	81a3      	strh	r3, [r4, #12]
 801227a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801227e:	690f      	ldr	r7, [r1, #16]
 8012280:	2f00      	cmp	r7, #0
 8012282:	d0c3      	beq.n	801220c <__sflush_r+0x4c>
 8012284:	0793      	lsls	r3, r2, #30
 8012286:	680e      	ldr	r6, [r1, #0]
 8012288:	bf08      	it	eq
 801228a:	694b      	ldreq	r3, [r1, #20]
 801228c:	600f      	str	r7, [r1, #0]
 801228e:	bf18      	it	ne
 8012290:	2300      	movne	r3, #0
 8012292:	ebc7 0806 	rsb	r8, r7, r6
 8012296:	608b      	str	r3, [r1, #8]
 8012298:	e012      	b.n	80122c0 <__sflush_r+0x100>
 801229a:	89a3      	ldrh	r3, [r4, #12]
 801229c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80122a0:	81a3      	strh	r3, [r4, #12]
 80122a2:	f04f 30ff 	mov.w	r0, #4294967295
 80122a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122aa:	4628      	mov	r0, r5
 80122ac:	6a21      	ldr	r1, [r4, #32]
 80122ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80122b0:	463a      	mov	r2, r7
 80122b2:	4643      	mov	r3, r8
 80122b4:	47b0      	blx	r6
 80122b6:	2800      	cmp	r0, #0
 80122b8:	ddef      	ble.n	801229a <__sflush_r+0xda>
 80122ba:	4407      	add	r7, r0
 80122bc:	ebc0 0808 	rsb	r8, r0, r8
 80122c0:	f1b8 0f00 	cmp.w	r8, #0
 80122c4:	dcf1      	bgt.n	80122aa <__sflush_r+0xea>
 80122c6:	e7a1      	b.n	801220c <__sflush_r+0x4c>

080122c8 <_fflush_r>:
 80122c8:	b538      	push	{r3, r4, r5, lr}
 80122ca:	690b      	ldr	r3, [r1, #16]
 80122cc:	4605      	mov	r5, r0
 80122ce:	460c      	mov	r4, r1
 80122d0:	b1db      	cbz	r3, 801230a <_fflush_r+0x42>
 80122d2:	b118      	cbz	r0, 80122dc <_fflush_r+0x14>
 80122d4:	6983      	ldr	r3, [r0, #24]
 80122d6:	b90b      	cbnz	r3, 80122dc <_fflush_r+0x14>
 80122d8:	f000 f860 	bl	801239c <__sinit>
 80122dc:	4b0c      	ldr	r3, [pc, #48]	; (8012310 <_fflush_r+0x48>)
 80122de:	429c      	cmp	r4, r3
 80122e0:	d101      	bne.n	80122e6 <_fflush_r+0x1e>
 80122e2:	686c      	ldr	r4, [r5, #4]
 80122e4:	e008      	b.n	80122f8 <_fflush_r+0x30>
 80122e6:	4b0b      	ldr	r3, [pc, #44]	; (8012314 <_fflush_r+0x4c>)
 80122e8:	429c      	cmp	r4, r3
 80122ea:	d101      	bne.n	80122f0 <_fflush_r+0x28>
 80122ec:	68ac      	ldr	r4, [r5, #8]
 80122ee:	e003      	b.n	80122f8 <_fflush_r+0x30>
 80122f0:	4b09      	ldr	r3, [pc, #36]	; (8012318 <_fflush_r+0x50>)
 80122f2:	429c      	cmp	r4, r3
 80122f4:	bf08      	it	eq
 80122f6:	68ec      	ldreq	r4, [r5, #12]
 80122f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80122fc:	b12b      	cbz	r3, 801230a <_fflush_r+0x42>
 80122fe:	4628      	mov	r0, r5
 8012300:	4621      	mov	r1, r4
 8012302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012306:	f7ff bf5b 	b.w	80121c0 <__sflush_r>
 801230a:	2000      	movs	r0, #0
 801230c:	bd38      	pop	{r3, r4, r5, pc}
 801230e:	bf00      	nop
 8012310:	080143e8 	.word	0x080143e8
 8012314:	08014408 	.word	0x08014408
 8012318:	08014428 	.word	0x08014428

0801231c <_cleanup_r>:
 801231c:	4901      	ldr	r1, [pc, #4]	; (8012324 <_cleanup_r+0x8>)
 801231e:	f000 b8a7 	b.w	8012470 <_fwalk_reent>
 8012322:	bf00      	nop
 8012324:	080122c9 	.word	0x080122c9

08012328 <std.isra.0>:
 8012328:	2300      	movs	r3, #0
 801232a:	b510      	push	{r4, lr}
 801232c:	4604      	mov	r4, r0
 801232e:	6003      	str	r3, [r0, #0]
 8012330:	6043      	str	r3, [r0, #4]
 8012332:	6083      	str	r3, [r0, #8]
 8012334:	8181      	strh	r1, [r0, #12]
 8012336:	6643      	str	r3, [r0, #100]	; 0x64
 8012338:	81c2      	strh	r2, [r0, #14]
 801233a:	6103      	str	r3, [r0, #16]
 801233c:	6143      	str	r3, [r0, #20]
 801233e:	6183      	str	r3, [r0, #24]
 8012340:	4619      	mov	r1, r3
 8012342:	305c      	adds	r0, #92	; 0x5c
 8012344:	2208      	movs	r2, #8
 8012346:	f7ff f990 	bl	801166a <memset>
 801234a:	4b05      	ldr	r3, [pc, #20]	; (8012360 <std.isra.0+0x38>)
 801234c:	6263      	str	r3, [r4, #36]	; 0x24
 801234e:	4b05      	ldr	r3, [pc, #20]	; (8012364 <std.isra.0+0x3c>)
 8012350:	62a3      	str	r3, [r4, #40]	; 0x28
 8012352:	4b05      	ldr	r3, [pc, #20]	; (8012368 <std.isra.0+0x40>)
 8012354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012356:	4b05      	ldr	r3, [pc, #20]	; (801236c <std.isra.0+0x44>)
 8012358:	6224      	str	r4, [r4, #32]
 801235a:	6323      	str	r3, [r4, #48]	; 0x30
 801235c:	bd10      	pop	{r4, pc}
 801235e:	bf00      	nop
 8012360:	08012c6d 	.word	0x08012c6d
 8012364:	08012c8f 	.word	0x08012c8f
 8012368:	08012cc7 	.word	0x08012cc7
 801236c:	08012ceb 	.word	0x08012ceb

08012370 <__sfmoreglue>:
 8012370:	b570      	push	{r4, r5, r6, lr}
 8012372:	2368      	movs	r3, #104	; 0x68
 8012374:	1e4d      	subs	r5, r1, #1
 8012376:	435d      	muls	r5, r3
 8012378:	460e      	mov	r6, r1
 801237a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801237e:	f000 f933 	bl	80125e8 <_malloc_r>
 8012382:	4604      	mov	r4, r0
 8012384:	b140      	cbz	r0, 8012398 <__sfmoreglue+0x28>
 8012386:	2100      	movs	r1, #0
 8012388:	e880 0042 	stmia.w	r0, {r1, r6}
 801238c:	300c      	adds	r0, #12
 801238e:	60a0      	str	r0, [r4, #8]
 8012390:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012394:	f7ff f969 	bl	801166a <memset>
 8012398:	4620      	mov	r0, r4
 801239a:	bd70      	pop	{r4, r5, r6, pc}

0801239c <__sinit>:
 801239c:	6983      	ldr	r3, [r0, #24]
 801239e:	b510      	push	{r4, lr}
 80123a0:	4604      	mov	r4, r0
 80123a2:	bb33      	cbnz	r3, 80123f2 <__sinit+0x56>
 80123a4:	6483      	str	r3, [r0, #72]	; 0x48
 80123a6:	64c3      	str	r3, [r0, #76]	; 0x4c
 80123a8:	6503      	str	r3, [r0, #80]	; 0x50
 80123aa:	4b12      	ldr	r3, [pc, #72]	; (80123f4 <__sinit+0x58>)
 80123ac:	4a12      	ldr	r2, [pc, #72]	; (80123f8 <__sinit+0x5c>)
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	6282      	str	r2, [r0, #40]	; 0x28
 80123b2:	4298      	cmp	r0, r3
 80123b4:	bf04      	itt	eq
 80123b6:	2301      	moveq	r3, #1
 80123b8:	6183      	streq	r3, [r0, #24]
 80123ba:	f000 f81f 	bl	80123fc <__sfp>
 80123be:	6060      	str	r0, [r4, #4]
 80123c0:	4620      	mov	r0, r4
 80123c2:	f000 f81b 	bl	80123fc <__sfp>
 80123c6:	60a0      	str	r0, [r4, #8]
 80123c8:	4620      	mov	r0, r4
 80123ca:	f000 f817 	bl	80123fc <__sfp>
 80123ce:	2104      	movs	r1, #4
 80123d0:	60e0      	str	r0, [r4, #12]
 80123d2:	2200      	movs	r2, #0
 80123d4:	6860      	ldr	r0, [r4, #4]
 80123d6:	f7ff ffa7 	bl	8012328 <std.isra.0>
 80123da:	68a0      	ldr	r0, [r4, #8]
 80123dc:	2109      	movs	r1, #9
 80123de:	2201      	movs	r2, #1
 80123e0:	f7ff ffa2 	bl	8012328 <std.isra.0>
 80123e4:	68e0      	ldr	r0, [r4, #12]
 80123e6:	2112      	movs	r1, #18
 80123e8:	2202      	movs	r2, #2
 80123ea:	f7ff ff9d 	bl	8012328 <std.isra.0>
 80123ee:	2301      	movs	r3, #1
 80123f0:	61a3      	str	r3, [r4, #24]
 80123f2:	bd10      	pop	{r4, pc}
 80123f4:	08014280 	.word	0x08014280
 80123f8:	0801231d 	.word	0x0801231d

080123fc <__sfp>:
 80123fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123fe:	4b1b      	ldr	r3, [pc, #108]	; (801246c <__sfp+0x70>)
 8012400:	681e      	ldr	r6, [r3, #0]
 8012402:	69b3      	ldr	r3, [r6, #24]
 8012404:	4607      	mov	r7, r0
 8012406:	b913      	cbnz	r3, 801240e <__sfp+0x12>
 8012408:	4630      	mov	r0, r6
 801240a:	f7ff ffc7 	bl	801239c <__sinit>
 801240e:	3648      	adds	r6, #72	; 0x48
 8012410:	68b4      	ldr	r4, [r6, #8]
 8012412:	6873      	ldr	r3, [r6, #4]
 8012414:	3b01      	subs	r3, #1
 8012416:	d404      	bmi.n	8012422 <__sfp+0x26>
 8012418:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801241c:	b175      	cbz	r5, 801243c <__sfp+0x40>
 801241e:	3468      	adds	r4, #104	; 0x68
 8012420:	e7f8      	b.n	8012414 <__sfp+0x18>
 8012422:	6833      	ldr	r3, [r6, #0]
 8012424:	b92b      	cbnz	r3, 8012432 <__sfp+0x36>
 8012426:	4638      	mov	r0, r7
 8012428:	2104      	movs	r1, #4
 801242a:	f7ff ffa1 	bl	8012370 <__sfmoreglue>
 801242e:	6030      	str	r0, [r6, #0]
 8012430:	b108      	cbz	r0, 8012436 <__sfp+0x3a>
 8012432:	6836      	ldr	r6, [r6, #0]
 8012434:	e7ec      	b.n	8012410 <__sfp+0x14>
 8012436:	230c      	movs	r3, #12
 8012438:	603b      	str	r3, [r7, #0]
 801243a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012440:	81e3      	strh	r3, [r4, #14]
 8012442:	2301      	movs	r3, #1
 8012444:	81a3      	strh	r3, [r4, #12]
 8012446:	6665      	str	r5, [r4, #100]	; 0x64
 8012448:	6025      	str	r5, [r4, #0]
 801244a:	60a5      	str	r5, [r4, #8]
 801244c:	6065      	str	r5, [r4, #4]
 801244e:	6125      	str	r5, [r4, #16]
 8012450:	6165      	str	r5, [r4, #20]
 8012452:	61a5      	str	r5, [r4, #24]
 8012454:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012458:	4629      	mov	r1, r5
 801245a:	2208      	movs	r2, #8
 801245c:	f7ff f905 	bl	801166a <memset>
 8012460:	6365      	str	r5, [r4, #52]	; 0x34
 8012462:	63a5      	str	r5, [r4, #56]	; 0x38
 8012464:	64a5      	str	r5, [r4, #72]	; 0x48
 8012466:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012468:	4620      	mov	r0, r4
 801246a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801246c:	08014280 	.word	0x08014280

08012470 <_fwalk_reent>:
 8012470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012474:	4680      	mov	r8, r0
 8012476:	4689      	mov	r9, r1
 8012478:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801247c:	2600      	movs	r6, #0
 801247e:	b194      	cbz	r4, 80124a6 <_fwalk_reent+0x36>
 8012480:	68a5      	ldr	r5, [r4, #8]
 8012482:	6867      	ldr	r7, [r4, #4]
 8012484:	3f01      	subs	r7, #1
 8012486:	d40c      	bmi.n	80124a2 <_fwalk_reent+0x32>
 8012488:	89ab      	ldrh	r3, [r5, #12]
 801248a:	2b01      	cmp	r3, #1
 801248c:	d907      	bls.n	801249e <_fwalk_reent+0x2e>
 801248e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012492:	3301      	adds	r3, #1
 8012494:	d003      	beq.n	801249e <_fwalk_reent+0x2e>
 8012496:	4640      	mov	r0, r8
 8012498:	4629      	mov	r1, r5
 801249a:	47c8      	blx	r9
 801249c:	4306      	orrs	r6, r0
 801249e:	3568      	adds	r5, #104	; 0x68
 80124a0:	e7f0      	b.n	8012484 <_fwalk_reent+0x14>
 80124a2:	6824      	ldr	r4, [r4, #0]
 80124a4:	e7eb      	b.n	801247e <_fwalk_reent+0xe>
 80124a6:	4630      	mov	r0, r6
 80124a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080124ac <__gettzinfo>:
 80124ac:	4800      	ldr	r0, [pc, #0]	; (80124b0 <__gettzinfo+0x4>)
 80124ae:	4770      	bx	lr
 80124b0:	1fff4334 	.word	0x1fff4334

080124b4 <__smakebuf_r>:
 80124b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80124b6:	898b      	ldrh	r3, [r1, #12]
 80124b8:	079d      	lsls	r5, r3, #30
 80124ba:	b091      	sub	sp, #68	; 0x44
 80124bc:	4606      	mov	r6, r0
 80124be:	460c      	mov	r4, r1
 80124c0:	d426      	bmi.n	8012510 <__smakebuf_r+0x5c>
 80124c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124c6:	2900      	cmp	r1, #0
 80124c8:	da09      	bge.n	80124de <__smakebuf_r+0x2a>
 80124ca:	89a3      	ldrh	r3, [r4, #12]
 80124cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80124d0:	f04f 0500 	mov.w	r5, #0
 80124d4:	bf14      	ite	ne
 80124d6:	2740      	movne	r7, #64	; 0x40
 80124d8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80124dc:	e00d      	b.n	80124fa <__smakebuf_r+0x46>
 80124de:	aa01      	add	r2, sp, #4
 80124e0:	f000 fc2a 	bl	8012d38 <_fstat_r>
 80124e4:	2800      	cmp	r0, #0
 80124e6:	dbf0      	blt.n	80124ca <__smakebuf_r+0x16>
 80124e8:	9d02      	ldr	r5, [sp, #8]
 80124ea:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80124ee:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 80124f2:	424d      	negs	r5, r1
 80124f4:	414d      	adcs	r5, r1
 80124f6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80124fa:	4630      	mov	r0, r6
 80124fc:	4639      	mov	r1, r7
 80124fe:	f000 f873 	bl	80125e8 <_malloc_r>
 8012502:	b960      	cbnz	r0, 801251e <__smakebuf_r+0x6a>
 8012504:	89a3      	ldrh	r3, [r4, #12]
 8012506:	059a      	lsls	r2, r3, #22
 8012508:	d41d      	bmi.n	8012546 <__smakebuf_r+0x92>
 801250a:	f043 0302 	orr.w	r3, r3, #2
 801250e:	81a3      	strh	r3, [r4, #12]
 8012510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012514:	6023      	str	r3, [r4, #0]
 8012516:	6123      	str	r3, [r4, #16]
 8012518:	2301      	movs	r3, #1
 801251a:	6163      	str	r3, [r4, #20]
 801251c:	e013      	b.n	8012546 <__smakebuf_r+0x92>
 801251e:	4b0b      	ldr	r3, [pc, #44]	; (801254c <__smakebuf_r+0x98>)
 8012520:	62b3      	str	r3, [r6, #40]	; 0x28
 8012522:	89a3      	ldrh	r3, [r4, #12]
 8012524:	6020      	str	r0, [r4, #0]
 8012526:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801252a:	81a3      	strh	r3, [r4, #12]
 801252c:	6120      	str	r0, [r4, #16]
 801252e:	6167      	str	r7, [r4, #20]
 8012530:	b14d      	cbz	r5, 8012546 <__smakebuf_r+0x92>
 8012532:	4630      	mov	r0, r6
 8012534:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012538:	f000 fc10 	bl	8012d5c <_isatty_r>
 801253c:	b118      	cbz	r0, 8012546 <__smakebuf_r+0x92>
 801253e:	89a3      	ldrh	r3, [r4, #12]
 8012540:	f043 0301 	orr.w	r3, r3, #1
 8012544:	81a3      	strh	r3, [r4, #12]
 8012546:	b011      	add	sp, #68	; 0x44
 8012548:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801254a:	bf00      	nop
 801254c:	0801231d 	.word	0x0801231d

08012550 <malloc>:
 8012550:	4b02      	ldr	r3, [pc, #8]	; (801255c <malloc+0xc>)
 8012552:	4601      	mov	r1, r0
 8012554:	6818      	ldr	r0, [r3, #0]
 8012556:	f000 b847 	b.w	80125e8 <_malloc_r>
 801255a:	bf00      	nop
 801255c:	1fff432c 	.word	0x1fff432c

08012560 <_free_r>:
 8012560:	b530      	push	{r4, r5, lr}
 8012562:	2900      	cmp	r1, #0
 8012564:	d03d      	beq.n	80125e2 <_free_r+0x82>
 8012566:	f851 2c04 	ldr.w	r2, [r1, #-4]
 801256a:	1f0b      	subs	r3, r1, #4
 801256c:	491d      	ldr	r1, [pc, #116]	; (80125e4 <_free_r+0x84>)
 801256e:	2a00      	cmp	r2, #0
 8012570:	bfb8      	it	lt
 8012572:	189b      	addlt	r3, r3, r2
 8012574:	680a      	ldr	r2, [r1, #0]
 8012576:	460c      	mov	r4, r1
 8012578:	b912      	cbnz	r2, 8012580 <_free_r+0x20>
 801257a:	605a      	str	r2, [r3, #4]
 801257c:	600b      	str	r3, [r1, #0]
 801257e:	bd30      	pop	{r4, r5, pc}
 8012580:	4293      	cmp	r3, r2
 8012582:	d20d      	bcs.n	80125a0 <_free_r+0x40>
 8012584:	6819      	ldr	r1, [r3, #0]
 8012586:	1858      	adds	r0, r3, r1
 8012588:	4290      	cmp	r0, r2
 801258a:	bf01      	itttt	eq
 801258c:	585a      	ldreq	r2, [r3, r1]
 801258e:	1852      	addeq	r2, r2, r1
 8012590:	601a      	streq	r2, [r3, #0]
 8012592:	6842      	ldreq	r2, [r0, #4]
 8012594:	605a      	str	r2, [r3, #4]
 8012596:	6023      	str	r3, [r4, #0]
 8012598:	bd30      	pop	{r4, r5, pc}
 801259a:	4299      	cmp	r1, r3
 801259c:	d803      	bhi.n	80125a6 <_free_r+0x46>
 801259e:	460a      	mov	r2, r1
 80125a0:	6851      	ldr	r1, [r2, #4]
 80125a2:	2900      	cmp	r1, #0
 80125a4:	d1f9      	bne.n	801259a <_free_r+0x3a>
 80125a6:	6814      	ldr	r4, [r2, #0]
 80125a8:	1915      	adds	r5, r2, r4
 80125aa:	429d      	cmp	r5, r3
 80125ac:	d10a      	bne.n	80125c4 <_free_r+0x64>
 80125ae:	681b      	ldr	r3, [r3, #0]
 80125b0:	4423      	add	r3, r4
 80125b2:	18d0      	adds	r0, r2, r3
 80125b4:	4288      	cmp	r0, r1
 80125b6:	6013      	str	r3, [r2, #0]
 80125b8:	d113      	bne.n	80125e2 <_free_r+0x82>
 80125ba:	6808      	ldr	r0, [r1, #0]
 80125bc:	4403      	add	r3, r0
 80125be:	6013      	str	r3, [r2, #0]
 80125c0:	684b      	ldr	r3, [r1, #4]
 80125c2:	e00d      	b.n	80125e0 <_free_r+0x80>
 80125c4:	d902      	bls.n	80125cc <_free_r+0x6c>
 80125c6:	230c      	movs	r3, #12
 80125c8:	6003      	str	r3, [r0, #0]
 80125ca:	bd30      	pop	{r4, r5, pc}
 80125cc:	681c      	ldr	r4, [r3, #0]
 80125ce:	1918      	adds	r0, r3, r4
 80125d0:	4288      	cmp	r0, r1
 80125d2:	bf04      	itt	eq
 80125d4:	6808      	ldreq	r0, [r1, #0]
 80125d6:	6849      	ldreq	r1, [r1, #4]
 80125d8:	6059      	str	r1, [r3, #4]
 80125da:	bf04      	itt	eq
 80125dc:	1900      	addeq	r0, r0, r4
 80125de:	6018      	streq	r0, [r3, #0]
 80125e0:	6053      	str	r3, [r2, #4]
 80125e2:	bd30      	pop	{r4, r5, pc}
 80125e4:	1fff47a0 	.word	0x1fff47a0

080125e8 <_malloc_r>:
 80125e8:	b570      	push	{r4, r5, r6, lr}
 80125ea:	1ccc      	adds	r4, r1, #3
 80125ec:	f024 0403 	bic.w	r4, r4, #3
 80125f0:	3408      	adds	r4, #8
 80125f2:	2c0c      	cmp	r4, #12
 80125f4:	bf38      	it	cc
 80125f6:	240c      	movcc	r4, #12
 80125f8:	2c00      	cmp	r4, #0
 80125fa:	4606      	mov	r6, r0
 80125fc:	da03      	bge.n	8012606 <_malloc_r+0x1e>
 80125fe:	230c      	movs	r3, #12
 8012600:	6033      	str	r3, [r6, #0]
 8012602:	2000      	movs	r0, #0
 8012604:	bd70      	pop	{r4, r5, r6, pc}
 8012606:	428c      	cmp	r4, r1
 8012608:	d3f9      	bcc.n	80125fe <_malloc_r+0x16>
 801260a:	4a20      	ldr	r2, [pc, #128]	; (801268c <_malloc_r+0xa4>)
 801260c:	6813      	ldr	r3, [r2, #0]
 801260e:	4610      	mov	r0, r2
 8012610:	4619      	mov	r1, r3
 8012612:	b1a1      	cbz	r1, 801263e <_malloc_r+0x56>
 8012614:	680a      	ldr	r2, [r1, #0]
 8012616:	1b12      	subs	r2, r2, r4
 8012618:	d40e      	bmi.n	8012638 <_malloc_r+0x50>
 801261a:	2a0b      	cmp	r2, #11
 801261c:	d903      	bls.n	8012626 <_malloc_r+0x3e>
 801261e:	600a      	str	r2, [r1, #0]
 8012620:	188b      	adds	r3, r1, r2
 8012622:	508c      	str	r4, [r1, r2]
 8012624:	e01f      	b.n	8012666 <_malloc_r+0x7e>
 8012626:	428b      	cmp	r3, r1
 8012628:	bf0d      	iteet	eq
 801262a:	685a      	ldreq	r2, [r3, #4]
 801262c:	684a      	ldrne	r2, [r1, #4]
 801262e:	605a      	strne	r2, [r3, #4]
 8012630:	6002      	streq	r2, [r0, #0]
 8012632:	bf18      	it	ne
 8012634:	460b      	movne	r3, r1
 8012636:	e016      	b.n	8012666 <_malloc_r+0x7e>
 8012638:	460b      	mov	r3, r1
 801263a:	6849      	ldr	r1, [r1, #4]
 801263c:	e7e9      	b.n	8012612 <_malloc_r+0x2a>
 801263e:	4d14      	ldr	r5, [pc, #80]	; (8012690 <_malloc_r+0xa8>)
 8012640:	682b      	ldr	r3, [r5, #0]
 8012642:	b91b      	cbnz	r3, 801264c <_malloc_r+0x64>
 8012644:	4630      	mov	r0, r6
 8012646:	f000 fb01 	bl	8012c4c <_sbrk_r>
 801264a:	6028      	str	r0, [r5, #0]
 801264c:	4630      	mov	r0, r6
 801264e:	4621      	mov	r1, r4
 8012650:	f000 fafc 	bl	8012c4c <_sbrk_r>
 8012654:	1c42      	adds	r2, r0, #1
 8012656:	4603      	mov	r3, r0
 8012658:	d0d1      	beq.n	80125fe <_malloc_r+0x16>
 801265a:	1cc5      	adds	r5, r0, #3
 801265c:	f025 0503 	bic.w	r5, r5, #3
 8012660:	4285      	cmp	r5, r0
 8012662:	d10a      	bne.n	801267a <_malloc_r+0x92>
 8012664:	601c      	str	r4, [r3, #0]
 8012666:	f103 000b 	add.w	r0, r3, #11
 801266a:	1d1a      	adds	r2, r3, #4
 801266c:	f020 0007 	bic.w	r0, r0, #7
 8012670:	1a82      	subs	r2, r0, r2
 8012672:	d00a      	beq.n	801268a <_malloc_r+0xa2>
 8012674:	4251      	negs	r1, r2
 8012676:	5099      	str	r1, [r3, r2]
 8012678:	bd70      	pop	{r4, r5, r6, pc}
 801267a:	4630      	mov	r0, r6
 801267c:	1ae9      	subs	r1, r5, r3
 801267e:	f000 fae5 	bl	8012c4c <_sbrk_r>
 8012682:	3001      	adds	r0, #1
 8012684:	d0bb      	beq.n	80125fe <_malloc_r+0x16>
 8012686:	462b      	mov	r3, r5
 8012688:	e7ec      	b.n	8012664 <_malloc_r+0x7c>
 801268a:	bd70      	pop	{r4, r5, r6, pc}
 801268c:	1fff47a0 	.word	0x1fff47a0
 8012690:	1fff479c 	.word	0x1fff479c

08012694 <__ssputs_r>:
 8012694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012698:	688e      	ldr	r6, [r1, #8]
 801269a:	42b3      	cmp	r3, r6
 801269c:	4682      	mov	sl, r0
 801269e:	460c      	mov	r4, r1
 80126a0:	4690      	mov	r8, r2
 80126a2:	4699      	mov	r9, r3
 80126a4:	d340      	bcc.n	8012728 <__ssputs_r+0x94>
 80126a6:	898a      	ldrh	r2, [r1, #12]
 80126a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80126ac:	d03a      	beq.n	8012724 <__ssputs_r+0x90>
 80126ae:	6825      	ldr	r5, [r4, #0]
 80126b0:	6909      	ldr	r1, [r1, #16]
 80126b2:	1a6f      	subs	r7, r5, r1
 80126b4:	6965      	ldr	r5, [r4, #20]
 80126b6:	2302      	movs	r3, #2
 80126b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80126bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80126c0:	1c7b      	adds	r3, r7, #1
 80126c2:	444b      	add	r3, r9
 80126c4:	429d      	cmp	r5, r3
 80126c6:	bf38      	it	cc
 80126c8:	461d      	movcc	r5, r3
 80126ca:	0553      	lsls	r3, r2, #21
 80126cc:	d50f      	bpl.n	80126ee <__ssputs_r+0x5a>
 80126ce:	4629      	mov	r1, r5
 80126d0:	f7ff ff8a 	bl	80125e8 <_malloc_r>
 80126d4:	4606      	mov	r6, r0
 80126d6:	b198      	cbz	r0, 8012700 <__ssputs_r+0x6c>
 80126d8:	6921      	ldr	r1, [r4, #16]
 80126da:	463a      	mov	r2, r7
 80126dc:	f7fe ffba 	bl	8011654 <memcpy>
 80126e0:	89a3      	ldrh	r3, [r4, #12]
 80126e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80126e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80126ea:	81a3      	strh	r3, [r4, #12]
 80126ec:	e013      	b.n	8012716 <__ssputs_r+0x82>
 80126ee:	462a      	mov	r2, r5
 80126f0:	f000 fb80 	bl	8012df4 <_realloc_r>
 80126f4:	4606      	mov	r6, r0
 80126f6:	b970      	cbnz	r0, 8012716 <__ssputs_r+0x82>
 80126f8:	4650      	mov	r0, sl
 80126fa:	6921      	ldr	r1, [r4, #16]
 80126fc:	f7ff ff30 	bl	8012560 <_free_r>
 8012700:	230c      	movs	r3, #12
 8012702:	f8ca 3000 	str.w	r3, [sl]
 8012706:	89a3      	ldrh	r3, [r4, #12]
 8012708:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801270c:	81a3      	strh	r3, [r4, #12]
 801270e:	f04f 30ff 	mov.w	r0, #4294967295
 8012712:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012716:	6126      	str	r6, [r4, #16]
 8012718:	6165      	str	r5, [r4, #20]
 801271a:	443e      	add	r6, r7
 801271c:	1bed      	subs	r5, r5, r7
 801271e:	6026      	str	r6, [r4, #0]
 8012720:	60a5      	str	r5, [r4, #8]
 8012722:	464e      	mov	r6, r9
 8012724:	45b1      	cmp	r9, r6
 8012726:	d200      	bcs.n	801272a <__ssputs_r+0x96>
 8012728:	464e      	mov	r6, r9
 801272a:	4632      	mov	r2, r6
 801272c:	6820      	ldr	r0, [r4, #0]
 801272e:	4641      	mov	r1, r8
 8012730:	f000 fb45 	bl	8012dbe <memmove>
 8012734:	68a3      	ldr	r3, [r4, #8]
 8012736:	1b9b      	subs	r3, r3, r6
 8012738:	60a3      	str	r3, [r4, #8]
 801273a:	6823      	ldr	r3, [r4, #0]
 801273c:	441e      	add	r6, r3
 801273e:	6026      	str	r6, [r4, #0]
 8012740:	2000      	movs	r0, #0
 8012742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012748 <_svfiprintf_r>:
 8012748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801274c:	b09d      	sub	sp, #116	; 0x74
 801274e:	4606      	mov	r6, r0
 8012750:	9303      	str	r3, [sp, #12]
 8012752:	898b      	ldrh	r3, [r1, #12]
 8012754:	061c      	lsls	r4, r3, #24
 8012756:	460d      	mov	r5, r1
 8012758:	4690      	mov	r8, r2
 801275a:	d50c      	bpl.n	8012776 <_svfiprintf_r+0x2e>
 801275c:	690b      	ldr	r3, [r1, #16]
 801275e:	b953      	cbnz	r3, 8012776 <_svfiprintf_r+0x2e>
 8012760:	2140      	movs	r1, #64	; 0x40
 8012762:	f7ff ff41 	bl	80125e8 <_malloc_r>
 8012766:	6028      	str	r0, [r5, #0]
 8012768:	6128      	str	r0, [r5, #16]
 801276a:	b910      	cbnz	r0, 8012772 <_svfiprintf_r+0x2a>
 801276c:	230c      	movs	r3, #12
 801276e:	6033      	str	r3, [r6, #0]
 8012770:	e0cc      	b.n	801290c <_svfiprintf_r+0x1c4>
 8012772:	2340      	movs	r3, #64	; 0x40
 8012774:	616b      	str	r3, [r5, #20]
 8012776:	2300      	movs	r3, #0
 8012778:	9309      	str	r3, [sp, #36]	; 0x24
 801277a:	2320      	movs	r3, #32
 801277c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012780:	2330      	movs	r3, #48	; 0x30
 8012782:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012786:	4643      	mov	r3, r8
 8012788:	461c      	mov	r4, r3
 801278a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801278e:	b91a      	cbnz	r2, 8012798 <_svfiprintf_r+0x50>
 8012790:	ebb4 0908 	subs.w	r9, r4, r8
 8012794:	d00f      	beq.n	80127b6 <_svfiprintf_r+0x6e>
 8012796:	e002      	b.n	801279e <_svfiprintf_r+0x56>
 8012798:	2a25      	cmp	r2, #37	; 0x25
 801279a:	d1f5      	bne.n	8012788 <_svfiprintf_r+0x40>
 801279c:	e7f8      	b.n	8012790 <_svfiprintf_r+0x48>
 801279e:	4630      	mov	r0, r6
 80127a0:	4629      	mov	r1, r5
 80127a2:	4642      	mov	r2, r8
 80127a4:	464b      	mov	r3, r9
 80127a6:	f7ff ff75 	bl	8012694 <__ssputs_r>
 80127aa:	3001      	adds	r0, #1
 80127ac:	f000 80a9 	beq.w	8012902 <_svfiprintf_r+0x1ba>
 80127b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80127b2:	444b      	add	r3, r9
 80127b4:	9309      	str	r3, [sp, #36]	; 0x24
 80127b6:	7823      	ldrb	r3, [r4, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	f000 80a2 	beq.w	8012902 <_svfiprintf_r+0x1ba>
 80127be:	2300      	movs	r3, #0
 80127c0:	f04f 32ff 	mov.w	r2, #4294967295
 80127c4:	9304      	str	r3, [sp, #16]
 80127c6:	9307      	str	r3, [sp, #28]
 80127c8:	9205      	str	r2, [sp, #20]
 80127ca:	9306      	str	r3, [sp, #24]
 80127cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80127d0:	931a      	str	r3, [sp, #104]	; 0x68
 80127d2:	f104 0801 	add.w	r8, r4, #1
 80127d6:	4644      	mov	r4, r8
 80127d8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012924 <_svfiprintf_r+0x1dc>
 80127dc:	7821      	ldrb	r1, [r4, #0]
 80127de:	4648      	mov	r0, r9
 80127e0:	2205      	movs	r2, #5
 80127e2:	f000 fadd 	bl	8012da0 <memchr>
 80127e6:	f108 0801 	add.w	r8, r8, #1
 80127ea:	9b04      	ldr	r3, [sp, #16]
 80127ec:	b130      	cbz	r0, 80127fc <_svfiprintf_r+0xb4>
 80127ee:	ebc9 0000 	rsb	r0, r9, r0
 80127f2:	2201      	movs	r2, #1
 80127f4:	4082      	lsls	r2, r0
 80127f6:	4313      	orrs	r3, r2
 80127f8:	9304      	str	r3, [sp, #16]
 80127fa:	e7ec      	b.n	80127d6 <_svfiprintf_r+0x8e>
 80127fc:	06d8      	lsls	r0, r3, #27
 80127fe:	bf44      	itt	mi
 8012800:	2220      	movmi	r2, #32
 8012802:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012806:	0719      	lsls	r1, r3, #28
 8012808:	bf44      	itt	mi
 801280a:	222b      	movmi	r2, #43	; 0x2b
 801280c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012810:	7822      	ldrb	r2, [r4, #0]
 8012812:	2a2a      	cmp	r2, #42	; 0x2a
 8012814:	d002      	beq.n	801281c <_svfiprintf_r+0xd4>
 8012816:	9907      	ldr	r1, [sp, #28]
 8012818:	4623      	mov	r3, r4
 801281a:	e00e      	b.n	801283a <_svfiprintf_r+0xf2>
 801281c:	9a03      	ldr	r2, [sp, #12]
 801281e:	1d11      	adds	r1, r2, #4
 8012820:	6812      	ldr	r2, [r2, #0]
 8012822:	9103      	str	r1, [sp, #12]
 8012824:	2a00      	cmp	r2, #0
 8012826:	bfbb      	ittet	lt
 8012828:	4252      	neglt	r2, r2
 801282a:	f043 0302 	orrlt.w	r3, r3, #2
 801282e:	9207      	strge	r2, [sp, #28]
 8012830:	9207      	strlt	r2, [sp, #28]
 8012832:	bfb8      	it	lt
 8012834:	9304      	strlt	r3, [sp, #16]
 8012836:	3401      	adds	r4, #1
 8012838:	e00a      	b.n	8012850 <_svfiprintf_r+0x108>
 801283a:	461c      	mov	r4, r3
 801283c:	3301      	adds	r3, #1
 801283e:	7822      	ldrb	r2, [r4, #0]
 8012840:	3a30      	subs	r2, #48	; 0x30
 8012842:	2a09      	cmp	r2, #9
 8012844:	d803      	bhi.n	801284e <_svfiprintf_r+0x106>
 8012846:	200a      	movs	r0, #10
 8012848:	fb00 2101 	mla	r1, r0, r1, r2
 801284c:	e7f5      	b.n	801283a <_svfiprintf_r+0xf2>
 801284e:	9107      	str	r1, [sp, #28]
 8012850:	7823      	ldrb	r3, [r4, #0]
 8012852:	2b2e      	cmp	r3, #46	; 0x2e
 8012854:	d11a      	bne.n	801288c <_svfiprintf_r+0x144>
 8012856:	7863      	ldrb	r3, [r4, #1]
 8012858:	2b2a      	cmp	r3, #42	; 0x2a
 801285a:	d10a      	bne.n	8012872 <_svfiprintf_r+0x12a>
 801285c:	9b03      	ldr	r3, [sp, #12]
 801285e:	1d1a      	adds	r2, r3, #4
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	9203      	str	r2, [sp, #12]
 8012864:	2b00      	cmp	r3, #0
 8012866:	bfb8      	it	lt
 8012868:	f04f 33ff 	movlt.w	r3, #4294967295
 801286c:	3402      	adds	r4, #2
 801286e:	9305      	str	r3, [sp, #20]
 8012870:	e00c      	b.n	801288c <_svfiprintf_r+0x144>
 8012872:	1c61      	adds	r1, r4, #1
 8012874:	2200      	movs	r2, #0
 8012876:	460c      	mov	r4, r1
 8012878:	3101      	adds	r1, #1
 801287a:	7823      	ldrb	r3, [r4, #0]
 801287c:	3b30      	subs	r3, #48	; 0x30
 801287e:	2b09      	cmp	r3, #9
 8012880:	d803      	bhi.n	801288a <_svfiprintf_r+0x142>
 8012882:	200a      	movs	r0, #10
 8012884:	fb00 3202 	mla	r2, r0, r2, r3
 8012888:	e7f5      	b.n	8012876 <_svfiprintf_r+0x12e>
 801288a:	9205      	str	r2, [sp, #20]
 801288c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012928 <_svfiprintf_r+0x1e0>
 8012890:	7821      	ldrb	r1, [r4, #0]
 8012892:	4640      	mov	r0, r8
 8012894:	2203      	movs	r2, #3
 8012896:	f000 fa83 	bl	8012da0 <memchr>
 801289a:	b138      	cbz	r0, 80128ac <_svfiprintf_r+0x164>
 801289c:	9a04      	ldr	r2, [sp, #16]
 801289e:	ebc8 0000 	rsb	r0, r8, r0
 80128a2:	2340      	movs	r3, #64	; 0x40
 80128a4:	4083      	lsls	r3, r0
 80128a6:	4313      	orrs	r3, r2
 80128a8:	9304      	str	r3, [sp, #16]
 80128aa:	3401      	adds	r4, #1
 80128ac:	7821      	ldrb	r1, [r4, #0]
 80128ae:	481a      	ldr	r0, [pc, #104]	; (8012918 <_svfiprintf_r+0x1d0>)
 80128b0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80128b4:	2206      	movs	r2, #6
 80128b6:	f104 0801 	add.w	r8, r4, #1
 80128ba:	f000 fa71 	bl	8012da0 <memchr>
 80128be:	b188      	cbz	r0, 80128e4 <_svfiprintf_r+0x19c>
 80128c0:	4b16      	ldr	r3, [pc, #88]	; (801291c <_svfiprintf_r+0x1d4>)
 80128c2:	b933      	cbnz	r3, 80128d2 <_svfiprintf_r+0x18a>
 80128c4:	9b03      	ldr	r3, [sp, #12]
 80128c6:	3307      	adds	r3, #7
 80128c8:	f023 0307 	bic.w	r3, r3, #7
 80128cc:	3308      	adds	r3, #8
 80128ce:	9303      	str	r3, [sp, #12]
 80128d0:	e013      	b.n	80128fa <_svfiprintf_r+0x1b2>
 80128d2:	ab03      	add	r3, sp, #12
 80128d4:	9300      	str	r3, [sp, #0]
 80128d6:	4630      	mov	r0, r6
 80128d8:	a904      	add	r1, sp, #16
 80128da:	462a      	mov	r2, r5
 80128dc:	4b10      	ldr	r3, [pc, #64]	; (8012920 <_svfiprintf_r+0x1d8>)
 80128de:	f3af 8000 	nop.w
 80128e2:	e007      	b.n	80128f4 <_svfiprintf_r+0x1ac>
 80128e4:	ab03      	add	r3, sp, #12
 80128e6:	9300      	str	r3, [sp, #0]
 80128e8:	4630      	mov	r0, r6
 80128ea:	a904      	add	r1, sp, #16
 80128ec:	462a      	mov	r2, r5
 80128ee:	4b0c      	ldr	r3, [pc, #48]	; (8012920 <_svfiprintf_r+0x1d8>)
 80128f0:	f000 f892 	bl	8012a18 <_printf_i>
 80128f4:	1c42      	adds	r2, r0, #1
 80128f6:	4607      	mov	r7, r0
 80128f8:	d003      	beq.n	8012902 <_svfiprintf_r+0x1ba>
 80128fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128fc:	443b      	add	r3, r7
 80128fe:	9309      	str	r3, [sp, #36]	; 0x24
 8012900:	e741      	b.n	8012786 <_svfiprintf_r+0x3e>
 8012902:	89ab      	ldrh	r3, [r5, #12]
 8012904:	065b      	lsls	r3, r3, #25
 8012906:	d401      	bmi.n	801290c <_svfiprintf_r+0x1c4>
 8012908:	9809      	ldr	r0, [sp, #36]	; 0x24
 801290a:	e001      	b.n	8012910 <_svfiprintf_r+0x1c8>
 801290c:	f04f 30ff 	mov.w	r0, #4294967295
 8012910:	b01d      	add	sp, #116	; 0x74
 8012912:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012916:	bf00      	nop
 8012918:	080144b2 	.word	0x080144b2
 801291c:	00000000 	.word	0x00000000
 8012920:	08012695 	.word	0x08012695
 8012924:	080144a8 	.word	0x080144a8
 8012928:	080144ae 	.word	0x080144ae

0801292c <_printf_common>:
 801292c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012930:	4691      	mov	r9, r2
 8012932:	461f      	mov	r7, r3
 8012934:	688a      	ldr	r2, [r1, #8]
 8012936:	690b      	ldr	r3, [r1, #16]
 8012938:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801293c:	4293      	cmp	r3, r2
 801293e:	bfb8      	it	lt
 8012940:	4613      	movlt	r3, r2
 8012942:	f8c9 3000 	str.w	r3, [r9]
 8012946:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801294a:	4606      	mov	r6, r0
 801294c:	460c      	mov	r4, r1
 801294e:	b112      	cbz	r2, 8012956 <_printf_common+0x2a>
 8012950:	3301      	adds	r3, #1
 8012952:	f8c9 3000 	str.w	r3, [r9]
 8012956:	6823      	ldr	r3, [r4, #0]
 8012958:	0699      	lsls	r1, r3, #26
 801295a:	bf42      	ittt	mi
 801295c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012960:	3302      	addmi	r3, #2
 8012962:	f8c9 3000 	strmi.w	r3, [r9]
 8012966:	6825      	ldr	r5, [r4, #0]
 8012968:	f015 0506 	ands.w	r5, r5, #6
 801296c:	d01c      	beq.n	80129a8 <_printf_common+0x7c>
 801296e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012972:	6822      	ldr	r2, [r4, #0]
 8012974:	3300      	adds	r3, #0
 8012976:	bf18      	it	ne
 8012978:	2301      	movne	r3, #1
 801297a:	0692      	lsls	r2, r2, #26
 801297c:	d51f      	bpl.n	80129be <_printf_common+0x92>
 801297e:	18e1      	adds	r1, r4, r3
 8012980:	1c5a      	adds	r2, r3, #1
 8012982:	2030      	movs	r0, #48	; 0x30
 8012984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012988:	4422      	add	r2, r4
 801298a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801298e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012992:	3302      	adds	r3, #2
 8012994:	e013      	b.n	80129be <_printf_common+0x92>
 8012996:	4630      	mov	r0, r6
 8012998:	4639      	mov	r1, r7
 801299a:	f104 0219 	add.w	r2, r4, #25
 801299e:	2301      	movs	r3, #1
 80129a0:	47c0      	blx	r8
 80129a2:	3001      	adds	r0, #1
 80129a4:	d007      	beq.n	80129b6 <_printf_common+0x8a>
 80129a6:	3501      	adds	r5, #1
 80129a8:	68e3      	ldr	r3, [r4, #12]
 80129aa:	f8d9 2000 	ldr.w	r2, [r9]
 80129ae:	1a9b      	subs	r3, r3, r2
 80129b0:	429d      	cmp	r5, r3
 80129b2:	dbf0      	blt.n	8012996 <_printf_common+0x6a>
 80129b4:	e7db      	b.n	801296e <_printf_common+0x42>
 80129b6:	f04f 30ff 	mov.w	r0, #4294967295
 80129ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80129be:	4630      	mov	r0, r6
 80129c0:	4639      	mov	r1, r7
 80129c2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80129c6:	47c0      	blx	r8
 80129c8:	3001      	adds	r0, #1
 80129ca:	d0f4      	beq.n	80129b6 <_printf_common+0x8a>
 80129cc:	6822      	ldr	r2, [r4, #0]
 80129ce:	f8d9 5000 	ldr.w	r5, [r9]
 80129d2:	68e3      	ldr	r3, [r4, #12]
 80129d4:	f002 0206 	and.w	r2, r2, #6
 80129d8:	2a04      	cmp	r2, #4
 80129da:	bf08      	it	eq
 80129dc:	1b5d      	subeq	r5, r3, r5
 80129de:	6922      	ldr	r2, [r4, #16]
 80129e0:	68a3      	ldr	r3, [r4, #8]
 80129e2:	bf0c      	ite	eq
 80129e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80129e8:	2500      	movne	r5, #0
 80129ea:	4293      	cmp	r3, r2
 80129ec:	bfc4      	itt	gt
 80129ee:	1a9b      	subgt	r3, r3, r2
 80129f0:	18ed      	addgt	r5, r5, r3
 80129f2:	f04f 0900 	mov.w	r9, #0
 80129f6:	45a9      	cmp	r9, r5
 80129f8:	da0a      	bge.n	8012a10 <_printf_common+0xe4>
 80129fa:	4630      	mov	r0, r6
 80129fc:	4639      	mov	r1, r7
 80129fe:	f104 021a 	add.w	r2, r4, #26
 8012a02:	2301      	movs	r3, #1
 8012a04:	47c0      	blx	r8
 8012a06:	3001      	adds	r0, #1
 8012a08:	d0d5      	beq.n	80129b6 <_printf_common+0x8a>
 8012a0a:	f109 0901 	add.w	r9, r9, #1
 8012a0e:	e7f2      	b.n	80129f6 <_printf_common+0xca>
 8012a10:	2000      	movs	r0, #0
 8012a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012a18 <_printf_i>:
 8012a18:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012a1c:	460c      	mov	r4, r1
 8012a1e:	4617      	mov	r7, r2
 8012a20:	7e22      	ldrb	r2, [r4, #24]
 8012a22:	2a6e      	cmp	r2, #110	; 0x6e
 8012a24:	4698      	mov	r8, r3
 8012a26:	4606      	mov	r6, r0
 8012a28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a2a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8012a2e:	f000 80a9 	beq.w	8012b84 <_printf_i+0x16c>
 8012a32:	d812      	bhi.n	8012a5a <_printf_i+0x42>
 8012a34:	2a63      	cmp	r2, #99	; 0x63
 8012a36:	d023      	beq.n	8012a80 <_printf_i+0x68>
 8012a38:	d80a      	bhi.n	8012a50 <_printf_i+0x38>
 8012a3a:	2a00      	cmp	r2, #0
 8012a3c:	f000 80b6 	beq.w	8012bac <_printf_i+0x194>
 8012a40:	2a58      	cmp	r2, #88	; 0x58
 8012a42:	f040 80c5 	bne.w	8012bd0 <_printf_i+0x1b8>
 8012a46:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012a4a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8012c44 <_printf_i+0x22c>
 8012a4e:	e051      	b.n	8012af4 <_printf_i+0xdc>
 8012a50:	2a64      	cmp	r2, #100	; 0x64
 8012a52:	d01e      	beq.n	8012a92 <_printf_i+0x7a>
 8012a54:	2a69      	cmp	r2, #105	; 0x69
 8012a56:	d01c      	beq.n	8012a92 <_printf_i+0x7a>
 8012a58:	e0ba      	b.n	8012bd0 <_printf_i+0x1b8>
 8012a5a:	2a73      	cmp	r2, #115	; 0x73
 8012a5c:	f000 80aa 	beq.w	8012bb4 <_printf_i+0x19c>
 8012a60:	d809      	bhi.n	8012a76 <_printf_i+0x5e>
 8012a62:	2a6f      	cmp	r2, #111	; 0x6f
 8012a64:	d02b      	beq.n	8012abe <_printf_i+0xa6>
 8012a66:	2a70      	cmp	r2, #112	; 0x70
 8012a68:	f040 80b2 	bne.w	8012bd0 <_printf_i+0x1b8>
 8012a6c:	6822      	ldr	r2, [r4, #0]
 8012a6e:	f042 0220 	orr.w	r2, r2, #32
 8012a72:	6022      	str	r2, [r4, #0]
 8012a74:	e039      	b.n	8012aea <_printf_i+0xd2>
 8012a76:	2a75      	cmp	r2, #117	; 0x75
 8012a78:	d021      	beq.n	8012abe <_printf_i+0xa6>
 8012a7a:	2a78      	cmp	r2, #120	; 0x78
 8012a7c:	d035      	beq.n	8012aea <_printf_i+0xd2>
 8012a7e:	e0a7      	b.n	8012bd0 <_printf_i+0x1b8>
 8012a80:	681a      	ldr	r2, [r3, #0]
 8012a82:	1d11      	adds	r1, r2, #4
 8012a84:	6019      	str	r1, [r3, #0]
 8012a86:	6813      	ldr	r3, [r2, #0]
 8012a88:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012a8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012a90:	e0a2      	b.n	8012bd8 <_printf_i+0x1c0>
 8012a92:	6820      	ldr	r0, [r4, #0]
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012a9a:	d003      	beq.n	8012aa4 <_printf_i+0x8c>
 8012a9c:	1d10      	adds	r0, r2, #4
 8012a9e:	6018      	str	r0, [r3, #0]
 8012aa0:	6813      	ldr	r3, [r2, #0]
 8012aa2:	e005      	b.n	8012ab0 <_printf_i+0x98>
 8012aa4:	0645      	lsls	r5, r0, #25
 8012aa6:	d5f9      	bpl.n	8012a9c <_printf_i+0x84>
 8012aa8:	1d10      	adds	r0, r2, #4
 8012aaa:	6018      	str	r0, [r3, #0]
 8012aac:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	da3b      	bge.n	8012b2c <_printf_i+0x114>
 8012ab4:	222d      	movs	r2, #45	; 0x2d
 8012ab6:	425b      	negs	r3, r3
 8012ab8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012abc:	e036      	b.n	8012b2c <_printf_i+0x114>
 8012abe:	6820      	ldr	r0, [r4, #0]
 8012ac0:	681a      	ldr	r2, [r3, #0]
 8012ac2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012ac6:	d003      	beq.n	8012ad0 <_printf_i+0xb8>
 8012ac8:	1d10      	adds	r0, r2, #4
 8012aca:	6018      	str	r0, [r3, #0]
 8012acc:	6813      	ldr	r3, [r2, #0]
 8012ace:	e004      	b.n	8012ada <_printf_i+0xc2>
 8012ad0:	0640      	lsls	r0, r0, #25
 8012ad2:	d5f9      	bpl.n	8012ac8 <_printf_i+0xb0>
 8012ad4:	1d10      	adds	r0, r2, #4
 8012ad6:	6018      	str	r0, [r3, #0]
 8012ad8:	8813      	ldrh	r3, [r2, #0]
 8012ada:	7e22      	ldrb	r2, [r4, #24]
 8012adc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8012c44 <_printf_i+0x22c>
 8012ae0:	2a6f      	cmp	r2, #111	; 0x6f
 8012ae2:	bf0c      	ite	eq
 8012ae4:	2208      	moveq	r2, #8
 8012ae6:	220a      	movne	r2, #10
 8012ae8:	e01c      	b.n	8012b24 <_printf_i+0x10c>
 8012aea:	2278      	movs	r2, #120	; 0x78
 8012aec:	f8df e158 	ldr.w	lr, [pc, #344]	; 8012c48 <_printf_i+0x230>
 8012af0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012af4:	6822      	ldr	r2, [r4, #0]
 8012af6:	6818      	ldr	r0, [r3, #0]
 8012af8:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012afc:	f100 0504 	add.w	r5, r0, #4
 8012b00:	601d      	str	r5, [r3, #0]
 8012b02:	d001      	beq.n	8012b08 <_printf_i+0xf0>
 8012b04:	6803      	ldr	r3, [r0, #0]
 8012b06:	e002      	b.n	8012b0e <_printf_i+0xf6>
 8012b08:	0655      	lsls	r5, r2, #25
 8012b0a:	d5fb      	bpl.n	8012b04 <_printf_i+0xec>
 8012b0c:	8803      	ldrh	r3, [r0, #0]
 8012b0e:	07d0      	lsls	r0, r2, #31
 8012b10:	bf44      	itt	mi
 8012b12:	f042 0220 	orrmi.w	r2, r2, #32
 8012b16:	6022      	strmi	r2, [r4, #0]
 8012b18:	b91b      	cbnz	r3, 8012b22 <_printf_i+0x10a>
 8012b1a:	6822      	ldr	r2, [r4, #0]
 8012b1c:	f022 0220 	bic.w	r2, r2, #32
 8012b20:	6022      	str	r2, [r4, #0]
 8012b22:	2210      	movs	r2, #16
 8012b24:	2000      	movs	r0, #0
 8012b26:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012b2a:	e002      	b.n	8012b32 <_printf_i+0x11a>
 8012b2c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8012c44 <_printf_i+0x22c>
 8012b30:	220a      	movs	r2, #10
 8012b32:	6865      	ldr	r5, [r4, #4]
 8012b34:	60a5      	str	r5, [r4, #8]
 8012b36:	2d00      	cmp	r5, #0
 8012b38:	bfa2      	ittt	ge
 8012b3a:	6820      	ldrge	r0, [r4, #0]
 8012b3c:	f020 0004 	bicge.w	r0, r0, #4
 8012b40:	6020      	strge	r0, [r4, #0]
 8012b42:	b903      	cbnz	r3, 8012b46 <_printf_i+0x12e>
 8012b44:	b165      	cbz	r5, 8012b60 <_printf_i+0x148>
 8012b46:	460d      	mov	r5, r1
 8012b48:	fbb3 f0f2 	udiv	r0, r3, r2
 8012b4c:	fb02 3310 	mls	r3, r2, r0, r3
 8012b50:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8012b54:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012b58:	4603      	mov	r3, r0
 8012b5a:	2800      	cmp	r0, #0
 8012b5c:	d1f4      	bne.n	8012b48 <_printf_i+0x130>
 8012b5e:	e000      	b.n	8012b62 <_printf_i+0x14a>
 8012b60:	460d      	mov	r5, r1
 8012b62:	2a08      	cmp	r2, #8
 8012b64:	d10b      	bne.n	8012b7e <_printf_i+0x166>
 8012b66:	6823      	ldr	r3, [r4, #0]
 8012b68:	07da      	lsls	r2, r3, #31
 8012b6a:	d508      	bpl.n	8012b7e <_printf_i+0x166>
 8012b6c:	6923      	ldr	r3, [r4, #16]
 8012b6e:	6862      	ldr	r2, [r4, #4]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	bfde      	ittt	le
 8012b74:	2330      	movle	r3, #48	; 0x30
 8012b76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012b7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012b7e:	1b49      	subs	r1, r1, r5
 8012b80:	6121      	str	r1, [r4, #16]
 8012b82:	e02e      	b.n	8012be2 <_printf_i+0x1ca>
 8012b84:	6825      	ldr	r5, [r4, #0]
 8012b86:	681a      	ldr	r2, [r3, #0]
 8012b88:	6960      	ldr	r0, [r4, #20]
 8012b8a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8012b8e:	d003      	beq.n	8012b98 <_printf_i+0x180>
 8012b90:	1d15      	adds	r5, r2, #4
 8012b92:	601d      	str	r5, [r3, #0]
 8012b94:	6813      	ldr	r3, [r2, #0]
 8012b96:	e008      	b.n	8012baa <_printf_i+0x192>
 8012b98:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012b9c:	f102 0504 	add.w	r5, r2, #4
 8012ba0:	601d      	str	r5, [r3, #0]
 8012ba2:	6813      	ldr	r3, [r2, #0]
 8012ba4:	d001      	beq.n	8012baa <_printf_i+0x192>
 8012ba6:	8018      	strh	r0, [r3, #0]
 8012ba8:	e000      	b.n	8012bac <_printf_i+0x194>
 8012baa:	6018      	str	r0, [r3, #0]
 8012bac:	2300      	movs	r3, #0
 8012bae:	6123      	str	r3, [r4, #16]
 8012bb0:	460d      	mov	r5, r1
 8012bb2:	e016      	b.n	8012be2 <_printf_i+0x1ca>
 8012bb4:	681a      	ldr	r2, [r3, #0]
 8012bb6:	1d11      	adds	r1, r2, #4
 8012bb8:	6019      	str	r1, [r3, #0]
 8012bba:	6815      	ldr	r5, [r2, #0]
 8012bbc:	6862      	ldr	r2, [r4, #4]
 8012bbe:	4628      	mov	r0, r5
 8012bc0:	2100      	movs	r1, #0
 8012bc2:	f000 f8ed 	bl	8012da0 <memchr>
 8012bc6:	b108      	cbz	r0, 8012bcc <_printf_i+0x1b4>
 8012bc8:	1b40      	subs	r0, r0, r5
 8012bca:	6060      	str	r0, [r4, #4]
 8012bcc:	6863      	ldr	r3, [r4, #4]
 8012bce:	e004      	b.n	8012bda <_printf_i+0x1c2>
 8012bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bd4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012bd8:	2301      	movs	r3, #1
 8012bda:	6123      	str	r3, [r4, #16]
 8012bdc:	2300      	movs	r3, #0
 8012bde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012be2:	f8cd 8000 	str.w	r8, [sp]
 8012be6:	4630      	mov	r0, r6
 8012be8:	4621      	mov	r1, r4
 8012bea:	aa03      	add	r2, sp, #12
 8012bec:	463b      	mov	r3, r7
 8012bee:	f7ff fe9d 	bl	801292c <_printf_common>
 8012bf2:	3001      	adds	r0, #1
 8012bf4:	d102      	bne.n	8012bfc <_printf_i+0x1e4>
 8012bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8012bfa:	e01f      	b.n	8012c3c <_printf_i+0x224>
 8012bfc:	4630      	mov	r0, r6
 8012bfe:	4639      	mov	r1, r7
 8012c00:	462a      	mov	r2, r5
 8012c02:	6923      	ldr	r3, [r4, #16]
 8012c04:	47c0      	blx	r8
 8012c06:	3001      	adds	r0, #1
 8012c08:	d0f5      	beq.n	8012bf6 <_printf_i+0x1de>
 8012c0a:	6823      	ldr	r3, [r4, #0]
 8012c0c:	079b      	lsls	r3, r3, #30
 8012c0e:	d405      	bmi.n	8012c1c <_printf_i+0x204>
 8012c10:	68e0      	ldr	r0, [r4, #12]
 8012c12:	9b03      	ldr	r3, [sp, #12]
 8012c14:	4298      	cmp	r0, r3
 8012c16:	bfb8      	it	lt
 8012c18:	4618      	movlt	r0, r3
 8012c1a:	e00f      	b.n	8012c3c <_printf_i+0x224>
 8012c1c:	2500      	movs	r5, #0
 8012c1e:	68e3      	ldr	r3, [r4, #12]
 8012c20:	9a03      	ldr	r2, [sp, #12]
 8012c22:	1a9b      	subs	r3, r3, r2
 8012c24:	429d      	cmp	r5, r3
 8012c26:	daf3      	bge.n	8012c10 <_printf_i+0x1f8>
 8012c28:	4630      	mov	r0, r6
 8012c2a:	4639      	mov	r1, r7
 8012c2c:	f104 0219 	add.w	r2, r4, #25
 8012c30:	2301      	movs	r3, #1
 8012c32:	47c0      	blx	r8
 8012c34:	3001      	adds	r0, #1
 8012c36:	d0de      	beq.n	8012bf6 <_printf_i+0x1de>
 8012c38:	3501      	adds	r5, #1
 8012c3a:	e7f0      	b.n	8012c1e <_printf_i+0x206>
 8012c3c:	b004      	add	sp, #16
 8012c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012c42:	bf00      	nop
 8012c44:	080144b9 	.word	0x080144b9
 8012c48:	080144ca 	.word	0x080144ca

08012c4c <_sbrk_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4c06      	ldr	r4, [pc, #24]	; (8012c68 <_sbrk_r+0x1c>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4605      	mov	r5, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	6023      	str	r3, [r4, #0]
 8012c58:	f7f2 f81e 	bl	8004c98 <_sbrk>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_sbrk_r+0x1a>
 8012c60:	6823      	ldr	r3, [r4, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_sbrk_r+0x1a>
 8012c64:	602b      	str	r3, [r5, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	1fff529c 	.word	0x1fff529c

08012c6c <__sread>:
 8012c6c:	b510      	push	{r4, lr}
 8012c6e:	460c      	mov	r4, r1
 8012c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c74:	f000 f8e4 	bl	8012e40 <_read_r>
 8012c78:	2800      	cmp	r0, #0
 8012c7a:	bfab      	itete	ge
 8012c7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012c7e:	89a3      	ldrhlt	r3, [r4, #12]
 8012c80:	181b      	addge	r3, r3, r0
 8012c82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012c86:	bfac      	ite	ge
 8012c88:	6563      	strge	r3, [r4, #84]	; 0x54
 8012c8a:	81a3      	strhlt	r3, [r4, #12]
 8012c8c:	bd10      	pop	{r4, pc}

08012c8e <__swrite>:
 8012c8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c92:	461d      	mov	r5, r3
 8012c94:	898b      	ldrh	r3, [r1, #12]
 8012c96:	05db      	lsls	r3, r3, #23
 8012c98:	4607      	mov	r7, r0
 8012c9a:	460c      	mov	r4, r1
 8012c9c:	4616      	mov	r6, r2
 8012c9e:	d505      	bpl.n	8012cac <__swrite+0x1e>
 8012ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	2302      	movs	r3, #2
 8012ca8:	f000 f868 	bl	8012d7c <_lseek_r>
 8012cac:	89a3      	ldrh	r3, [r4, #12]
 8012cae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012cb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012cb6:	81a3      	strh	r3, [r4, #12]
 8012cb8:	4638      	mov	r0, r7
 8012cba:	4632      	mov	r2, r6
 8012cbc:	462b      	mov	r3, r5
 8012cbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cc2:	f000 b817 	b.w	8012cf4 <_write_r>

08012cc6 <__sseek>:
 8012cc6:	b510      	push	{r4, lr}
 8012cc8:	460c      	mov	r4, r1
 8012cca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cce:	f000 f855 	bl	8012d7c <_lseek_r>
 8012cd2:	1c43      	adds	r3, r0, #1
 8012cd4:	89a3      	ldrh	r3, [r4, #12]
 8012cd6:	bf15      	itete	ne
 8012cd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8012cda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012cde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012ce2:	81a3      	strheq	r3, [r4, #12]
 8012ce4:	bf18      	it	ne
 8012ce6:	81a3      	strhne	r3, [r4, #12]
 8012ce8:	bd10      	pop	{r4, pc}

08012cea <__sclose>:
 8012cea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012cee:	f000 b813 	b.w	8012d18 <_close_r>
	...

08012cf4 <_write_r>:
 8012cf4:	b538      	push	{r3, r4, r5, lr}
 8012cf6:	4c07      	ldr	r4, [pc, #28]	; (8012d14 <_write_r+0x20>)
 8012cf8:	4605      	mov	r5, r0
 8012cfa:	2000      	movs	r0, #0
 8012cfc:	6020      	str	r0, [r4, #0]
 8012cfe:	4608      	mov	r0, r1
 8012d00:	4611      	mov	r1, r2
 8012d02:	461a      	mov	r2, r3
 8012d04:	f000 f8e0 	bl	8012ec8 <_write>
 8012d08:	1c43      	adds	r3, r0, #1
 8012d0a:	d102      	bne.n	8012d12 <_write_r+0x1e>
 8012d0c:	6823      	ldr	r3, [r4, #0]
 8012d0e:	b103      	cbz	r3, 8012d12 <_write_r+0x1e>
 8012d10:	602b      	str	r3, [r5, #0]
 8012d12:	bd38      	pop	{r3, r4, r5, pc}
 8012d14:	1fff529c 	.word	0x1fff529c

08012d18 <_close_r>:
 8012d18:	b538      	push	{r3, r4, r5, lr}
 8012d1a:	4c06      	ldr	r4, [pc, #24]	; (8012d34 <_close_r+0x1c>)
 8012d1c:	2300      	movs	r3, #0
 8012d1e:	4605      	mov	r5, r0
 8012d20:	4608      	mov	r0, r1
 8012d22:	6023      	str	r3, [r4, #0]
 8012d24:	f000 f8a8 	bl	8012e78 <_close>
 8012d28:	1c43      	adds	r3, r0, #1
 8012d2a:	d102      	bne.n	8012d32 <_close_r+0x1a>
 8012d2c:	6823      	ldr	r3, [r4, #0]
 8012d2e:	b103      	cbz	r3, 8012d32 <_close_r+0x1a>
 8012d30:	602b      	str	r3, [r5, #0]
 8012d32:	bd38      	pop	{r3, r4, r5, pc}
 8012d34:	1fff529c 	.word	0x1fff529c

08012d38 <_fstat_r>:
 8012d38:	b538      	push	{r3, r4, r5, lr}
 8012d3a:	4c07      	ldr	r4, [pc, #28]	; (8012d58 <_fstat_r+0x20>)
 8012d3c:	2300      	movs	r3, #0
 8012d3e:	4605      	mov	r5, r0
 8012d40:	4608      	mov	r0, r1
 8012d42:	4611      	mov	r1, r2
 8012d44:	6023      	str	r3, [r4, #0]
 8012d46:	f000 f89f 	bl	8012e88 <_fstat>
 8012d4a:	1c43      	adds	r3, r0, #1
 8012d4c:	d102      	bne.n	8012d54 <_fstat_r+0x1c>
 8012d4e:	6823      	ldr	r3, [r4, #0]
 8012d50:	b103      	cbz	r3, 8012d54 <_fstat_r+0x1c>
 8012d52:	602b      	str	r3, [r5, #0]
 8012d54:	bd38      	pop	{r3, r4, r5, pc}
 8012d56:	bf00      	nop
 8012d58:	1fff529c 	.word	0x1fff529c

08012d5c <_isatty_r>:
 8012d5c:	b538      	push	{r3, r4, r5, lr}
 8012d5e:	4c06      	ldr	r4, [pc, #24]	; (8012d78 <_isatty_r+0x1c>)
 8012d60:	2300      	movs	r3, #0
 8012d62:	4605      	mov	r5, r0
 8012d64:	4608      	mov	r0, r1
 8012d66:	6023      	str	r3, [r4, #0]
 8012d68:	f000 f896 	bl	8012e98 <_isatty>
 8012d6c:	1c43      	adds	r3, r0, #1
 8012d6e:	d102      	bne.n	8012d76 <_isatty_r+0x1a>
 8012d70:	6823      	ldr	r3, [r4, #0]
 8012d72:	b103      	cbz	r3, 8012d76 <_isatty_r+0x1a>
 8012d74:	602b      	str	r3, [r5, #0]
 8012d76:	bd38      	pop	{r3, r4, r5, pc}
 8012d78:	1fff529c 	.word	0x1fff529c

08012d7c <_lseek_r>:
 8012d7c:	b538      	push	{r3, r4, r5, lr}
 8012d7e:	4c07      	ldr	r4, [pc, #28]	; (8012d9c <_lseek_r+0x20>)
 8012d80:	4605      	mov	r5, r0
 8012d82:	2000      	movs	r0, #0
 8012d84:	6020      	str	r0, [r4, #0]
 8012d86:	4608      	mov	r0, r1
 8012d88:	4611      	mov	r1, r2
 8012d8a:	461a      	mov	r2, r3
 8012d8c:	f000 f88c 	bl	8012ea8 <_lseek>
 8012d90:	1c43      	adds	r3, r0, #1
 8012d92:	d102      	bne.n	8012d9a <_lseek_r+0x1e>
 8012d94:	6823      	ldr	r3, [r4, #0]
 8012d96:	b103      	cbz	r3, 8012d9a <_lseek_r+0x1e>
 8012d98:	602b      	str	r3, [r5, #0]
 8012d9a:	bd38      	pop	{r3, r4, r5, pc}
 8012d9c:	1fff529c 	.word	0x1fff529c

08012da0 <memchr>:
 8012da0:	b510      	push	{r4, lr}
 8012da2:	b2c9      	uxtb	r1, r1
 8012da4:	4402      	add	r2, r0
 8012da6:	4290      	cmp	r0, r2
 8012da8:	4603      	mov	r3, r0
 8012daa:	d006      	beq.n	8012dba <memchr+0x1a>
 8012dac:	781c      	ldrb	r4, [r3, #0]
 8012dae:	428c      	cmp	r4, r1
 8012db0:	f100 0001 	add.w	r0, r0, #1
 8012db4:	d1f7      	bne.n	8012da6 <memchr+0x6>
 8012db6:	4618      	mov	r0, r3
 8012db8:	bd10      	pop	{r4, pc}
 8012dba:	2000      	movs	r0, #0
 8012dbc:	bd10      	pop	{r4, pc}

08012dbe <memmove>:
 8012dbe:	4281      	cmp	r1, r0
 8012dc0:	b510      	push	{r4, lr}
 8012dc2:	eb01 0302 	add.w	r3, r1, r2
 8012dc6:	d301      	bcc.n	8012dcc <memmove+0xe>
 8012dc8:	1e42      	subs	r2, r0, #1
 8012dca:	e00b      	b.n	8012de4 <memmove+0x26>
 8012dcc:	4298      	cmp	r0, r3
 8012dce:	d2fb      	bcs.n	8012dc8 <memmove+0xa>
 8012dd0:	1881      	adds	r1, r0, r2
 8012dd2:	1ad2      	subs	r2, r2, r3
 8012dd4:	42d3      	cmn	r3, r2
 8012dd6:	d004      	beq.n	8012de2 <memmove+0x24>
 8012dd8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ddc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012de0:	e7f8      	b.n	8012dd4 <memmove+0x16>
 8012de2:	bd10      	pop	{r4, pc}
 8012de4:	4299      	cmp	r1, r3
 8012de6:	d004      	beq.n	8012df2 <memmove+0x34>
 8012de8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012dec:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012df0:	e7f8      	b.n	8012de4 <memmove+0x26>
 8012df2:	bd10      	pop	{r4, pc}

08012df4 <_realloc_r>:
 8012df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012df6:	4607      	mov	r7, r0
 8012df8:	4615      	mov	r5, r2
 8012dfa:	460e      	mov	r6, r1
 8012dfc:	b921      	cbnz	r1, 8012e08 <_realloc_r+0x14>
 8012dfe:	4611      	mov	r1, r2
 8012e00:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012e04:	f7ff bbf0 	b.w	80125e8 <_malloc_r>
 8012e08:	b91a      	cbnz	r2, 8012e12 <_realloc_r+0x1e>
 8012e0a:	f7ff fba9 	bl	8012560 <_free_r>
 8012e0e:	4628      	mov	r0, r5
 8012e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e12:	f000 f827 	bl	8012e64 <_malloc_usable_size_r>
 8012e16:	42a8      	cmp	r0, r5
 8012e18:	d20e      	bcs.n	8012e38 <_realloc_r+0x44>
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	4629      	mov	r1, r5
 8012e1e:	f7ff fbe3 	bl	80125e8 <_malloc_r>
 8012e22:	4604      	mov	r4, r0
 8012e24:	b150      	cbz	r0, 8012e3c <_realloc_r+0x48>
 8012e26:	4631      	mov	r1, r6
 8012e28:	462a      	mov	r2, r5
 8012e2a:	f7fe fc13 	bl	8011654 <memcpy>
 8012e2e:	4638      	mov	r0, r7
 8012e30:	4631      	mov	r1, r6
 8012e32:	f7ff fb95 	bl	8012560 <_free_r>
 8012e36:	e001      	b.n	8012e3c <_realloc_r+0x48>
 8012e38:	4630      	mov	r0, r6
 8012e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012e3c:	4620      	mov	r0, r4
 8012e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012e40 <_read_r>:
 8012e40:	b538      	push	{r3, r4, r5, lr}
 8012e42:	4c07      	ldr	r4, [pc, #28]	; (8012e60 <_read_r+0x20>)
 8012e44:	4605      	mov	r5, r0
 8012e46:	2000      	movs	r0, #0
 8012e48:	6020      	str	r0, [r4, #0]
 8012e4a:	4608      	mov	r0, r1
 8012e4c:	4611      	mov	r1, r2
 8012e4e:	461a      	mov	r2, r3
 8012e50:	f000 f832 	bl	8012eb8 <_read>
 8012e54:	1c43      	adds	r3, r0, #1
 8012e56:	d102      	bne.n	8012e5e <_read_r+0x1e>
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	b103      	cbz	r3, 8012e5e <_read_r+0x1e>
 8012e5c:	602b      	str	r3, [r5, #0]
 8012e5e:	bd38      	pop	{r3, r4, r5, pc}
 8012e60:	1fff529c 	.word	0x1fff529c

08012e64 <_malloc_usable_size_r>:
 8012e64:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012e68:	2800      	cmp	r0, #0
 8012e6a:	bfbe      	ittt	lt
 8012e6c:	1809      	addlt	r1, r1, r0
 8012e6e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8012e72:	18c0      	addlt	r0, r0, r3
 8012e74:	3804      	subs	r0, #4
 8012e76:	4770      	bx	lr

08012e78 <_close>:
 8012e78:	4b02      	ldr	r3, [pc, #8]	; (8012e84 <_close+0xc>)
 8012e7a:	2258      	movs	r2, #88	; 0x58
 8012e7c:	601a      	str	r2, [r3, #0]
 8012e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e82:	4770      	bx	lr
 8012e84:	1fff529c 	.word	0x1fff529c

08012e88 <_fstat>:
 8012e88:	4b02      	ldr	r3, [pc, #8]	; (8012e94 <_fstat+0xc>)
 8012e8a:	2258      	movs	r2, #88	; 0x58
 8012e8c:	601a      	str	r2, [r3, #0]
 8012e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8012e92:	4770      	bx	lr
 8012e94:	1fff529c 	.word	0x1fff529c

08012e98 <_isatty>:
 8012e98:	4b02      	ldr	r3, [pc, #8]	; (8012ea4 <_isatty+0xc>)
 8012e9a:	2258      	movs	r2, #88	; 0x58
 8012e9c:	601a      	str	r2, [r3, #0]
 8012e9e:	2000      	movs	r0, #0
 8012ea0:	4770      	bx	lr
 8012ea2:	bf00      	nop
 8012ea4:	1fff529c 	.word	0x1fff529c

08012ea8 <_lseek>:
 8012ea8:	4b02      	ldr	r3, [pc, #8]	; (8012eb4 <_lseek+0xc>)
 8012eaa:	2258      	movs	r2, #88	; 0x58
 8012eac:	601a      	str	r2, [r3, #0]
 8012eae:	f04f 30ff 	mov.w	r0, #4294967295
 8012eb2:	4770      	bx	lr
 8012eb4:	1fff529c 	.word	0x1fff529c

08012eb8 <_read>:
 8012eb8:	4b02      	ldr	r3, [pc, #8]	; (8012ec4 <_read+0xc>)
 8012eba:	2258      	movs	r2, #88	; 0x58
 8012ebc:	601a      	str	r2, [r3, #0]
 8012ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8012ec2:	4770      	bx	lr
 8012ec4:	1fff529c 	.word	0x1fff529c

08012ec8 <_write>:
 8012ec8:	4b02      	ldr	r3, [pc, #8]	; (8012ed4 <_write+0xc>)
 8012eca:	2258      	movs	r2, #88	; 0x58
 8012ecc:	601a      	str	r2, [r3, #0]
 8012ece:	f04f 30ff 	mov.w	r0, #4294967295
 8012ed2:	4770      	bx	lr
 8012ed4:	1fff529c 	.word	0x1fff529c
 8012ed8:	69206e69 	.word	0x69206e69
 8012edc:	645f3167 	.word	0x645f3167
 8012ee0:	006e6f5f 	.word	0x006e6f5f
 8012ee4:	74697865 	.word	0x74697865
 8012ee8:	31676920 	.word	0x31676920
 8012eec:	6f5f645f 	.word	0x6f5f645f
 8012ef0:	0000006e 	.word	0x0000006e
 8012ef4:	69206e69 	.word	0x69206e69
 8012ef8:	645f3167 	.word	0x645f3167
 8012efc:	66666f5f 	.word	0x66666f5f
 8012f00:	00000000 	.word	0x00000000
 8012f04:	55206e69 	.word	0x55206e69
 8012f08:	00003432 	.word	0x00003432
 8012f0c:	74697865 	.word	0x74697865
 8012f10:	34325520 	.word	0x34325520
 8012f14:	00000000 	.word	0x00000000
 8012f18:	63206e69 	.word	0x63206e69
 8012f1c:	695f6e61 	.word	0x695f6e61
 8012f20:	7475706e 	.word	0x7475706e
 8012f24:	00000073 	.word	0x00000073
 8012f28:	74697865 	.word	0x74697865
 8012f2c:	6e616320 	.word	0x6e616320
 8012f30:	706e695f 	.word	0x706e695f
 8012f34:	00737475 	.word	0x00737475
 8012f38:	74697865 	.word	0x74697865
 8012f3c:	34325520 	.word	0x34325520
 8012f40:	00000000 	.word	0x00000000
 8012f44:	74206e69 	.word	0x74206e69
 8012f48:	00706d65 	.word	0x00706d65
 8012f4c:	74697865 	.word	0x74697865
 8012f50:	6d657420 	.word	0x6d657420
 8012f54:	00000070 	.word	0x00000070

08012f58 <UART_0_channel_config>:
 8012f58:	0001c200 01080800 00000010              ............

08012f64 <UART_0_tx_pin_config>:
 8012f64:	00000090 00000001 00000002              ............

08012f70 <UART_0_tx_pin>:
 8012f70:	48028200 0000000e 08012f64              ...H....d/..

08012f7c <UART_0_config>:
 8012f7c:	08012f58 08005cd1 00000000 00000000     X/...\..........
	...
 8012f98:	08012f70 00020200 00000006              p/..........

08012fa4 <UART_0_rx_pin_config>:
 8012fa4:	00000000 00000001 00000002              ............

08012fb0 <SPI_MASTER_0_MOSI>:
 8012fb0:	48028100 00000005                       ...H....

08012fb8 <SPI_MASTER_0_MISO>:
 8012fb8:	48028100 00000004                       ...H....

08012fc0 <SPI_MASTER_0_SCLKOUT>:
 8012fc0:	48028100 00000006                       ...H....

08012fc8 <SPI_MASTER_0_SCLKOUT_Config>:
 8012fc8:	00000090 00000001 00000001 00000000     ................
 8012fd8:	00000000                                ....

08012fdc <SPI_MASTER_0_SS_0>:
 8012fdc:	48028100 0000000b                       ...H....

08012fe4 <SPI_MASTER_0_SS_0_Config>:
 8012fe4:	00000090 00000001 00000001 00000000     ................
 8012ff4:	00010000                                ....

08012ff8 <SPI_MASTER_0_Config>:
 8012ff8:	1ffe8934 08007259 08012fb0 1ffe8920     4...Yr.../.. ...
 8013008:	08012fb8 1fff4408 00000000 00000000     ./...D..........
	...
 8013020:	08012fc0 08012fc8 08012fdc 00000000     ./.../.../......
	...
 8013048:	08012fe4 00000000 00000000 00000000     ./..............
	...
 8013078:	40000000 01000101 00010002              ...@........

08013084 <RTC_0_config>:
 8013084:	00000001 00000000                       ........

0801308c <RTC_0_time_alarm_config>:
 801308c:	00000000 07b20004 00000100 07b20000     ................
 801309c:	00007fff                                ....

080130a0 <INTERRUPT_0>:
 80130a0:	00003f40                                @?..

080130a4 <I2C_MASTER_0_sda_pin_config>:
 80130a4:	000000d0 00000001 00000000              ............

080130b0 <I2C_MASTER_0_scl_pin_config>:
 80130b0:	000000d0 00000001 00000000              ............

080130bc <I2C_MASTER_0_channel_config>:
 80130bc:	000186a0 00000000                       ........

080130c4 <I2C_MASTER_0_config>:
 80130c4:	080130bc 08008051 0800802d 0800800d     .0..Q...-.......
	...
 80130e8:	04040202 0000ffff                       ........

080130f0 <I2C_MASTER_1_sda_pin_config>:
 80130f0:	000000c8 00000001 00000000              ............

080130fc <I2C_MASTER_1_scl_pin_config>:
 80130fc:	000000c8 00000001 00000000              ............

08013108 <I2C_MASTER_1_channel_config>:
 8013108:	00061a80 00000000                       ........

08013110 <I2C_MASTER_1_config>:
 8013110:	08013108 080080fd 080080d9 080080b9     .1..............
	...
 8013134:	04040202 0000ffff                       ........

0801313c <sdmmc_block>:
 801313c:	1ffe8a40                                @...

08013140 <DC_DC_EN_OUT_D>:
 8013140:	48028000 00000080 00010000 00000000     ...H............
 8013150:	0000000f                                ....

08013154 <VACUUM_PUMP_OUT_D>:
 8013154:	48028000 00000080 00010000 00000000     ...H............
 8013164:	0000000e                                ....

08013168 <HEADLAMPS_ADJ_PWR_OUT_D>:
 8013168:	48028000 00000080 00010000 00000000     ...H............
 8013178:	0000000d                                ....

0801317c <AC_RADIATOR_OUT_D>:
 801317c:	48028000 00000080 00010000 00000000     ...H............
 801318c:	0000000c                                ....

08013190 <INSTRUMENT_CON_PWR_OUT_D>:
 8013190:	48028000 00000080 00010000 00000000     ...H............
 80131a0:	0000000b                                ....

080131a4 <ACCEL_CS_OUT>:
 80131a4:	48028000 00000000 00000000 00000000     ...H............
 80131b4:	0000000a                                ....

080131b8 <ELECT_HANDBRAKE_EN_OUT_D>:
 80131b8:	48028000 00000000 00000000 00000000     ...H............
 80131c8:	00000008                                ....

080131cc <MC_CONTACTOR_RELAY_OUT_D>:
 80131cc:	48028000 00000080 00010000 00000000     ...H............
 80131dc:	00000007                                ....

080131e0 <MC_PARK_RELAY_OUT_D>:
 80131e0:	48028000 00000080 00010000 00000000     ...H............
 80131f0:	00000006                                ....

080131f4 <MC_REV_RELAY_OUT_D>:
 80131f4:	48028000 00000080 00010000 00000000     ...H............
 8013204:	00000005                                ....

08013208 <MC_FWD_RELAY_OUT_D>:
 8013208:	48028000 00000080 00010000 00000000     ...H............
 8013218:	00000004                                ....

0801321c <MC_REGEN_RELAY_OUT_D>:
 801321c:	48028000 00000080 00010000 00000000     ...H............
 801322c:	00000003                                ....

08013230 <MC_ELOCK_RELAY_OUT_D>:
 8013230:	48028000 00000080 00010000 00000000     ...H............
 8013240:	00000002                                ....

08013244 <POS_OUT_D>:
 8013244:	48028100 00000080 00010000 00000000     ...H............
 8013254:	0000000f                                ....

08013258 <VCU_FAN_PWR_OUT_D>:
 8013258:	48028100 00000000 00000000 00000000     ...H............
 8013268:	0000000e                                ....

0801326c <AUX_EFUSE_1_OUT_D>:
 801326c:	48028100 00000080 00010000 00000000     ...H............
 801327c:	0000000a                                ....

08013280 <WIPER_PWR_OUT_D>:
 8013280:	48028100 00000080 00010000 00000000     ...H............
 8013290:	00000009                                ....

08013294 <THROTTLE_POT_CS_OUT_D>:
 8013294:	48028100 00000000 00000000 00000000     ...H............
 80132a4:	00000008                                ....

080132a8 <LIGHTS_PWR_OUT_D>:
 80132a8:	48028100 00000080 00010000 00000000     ...H............
 80132b8:	00000007                                ....

080132bc <INFOTAINMENT_PWR_OUT_D>:
 80132bc:	48028100 00000080 00010000 00000000     ...H............
 80132cc:	00000003                                ....

080132d0 <AUDIO_AMP_OUT_D>:
 80132d0:	48028100 00000000 00000000 00000000     ...H............
 80132e0:	00000002                                ....

080132e4 <VACUUM_SENSOR_PWR_OUT_D>:
 80132e4:	48028100 00000080 00010000 00000000     ...H............
 80132f4:	00000001                                ....

080132f8 <BRAKE_LIGHT_OUT_D>:
 80132f8:	48028100 00000080 00010000 00000000     ...H............
 8013308:	00000000                                ....

0801330c <HORN_PWR_OUT_D>:
 801330c:	48028400 00000080 00010000 00000000     ...H............
 801331c:	00000001                                ....

08013320 <DOOR_LOCK_OUT_D>:
 8013320:	48028200 00000080 00010000 00000000     ...H............
 8013330:	0000000d                                ....

08013334 <RIGHT_INDICATOR_OUT_D>:
 8013334:	48028600 00000080 00010000 00000000     ...H............
 8013344:	00000003                                ....

08013348 <HIGH_BEAM_OUT_D>:
 8013348:	48028600 00000080 00010000 00000000     ...H............
 8013358:	00000002                                ....

0801335c <LOW_BEAM_OUT_D>:
 801335c:	48028600 00000080 00010000 00000000     ...H............
 801336c:	00000001                                ....

08013370 <REV_LIGHT_OUT_D>:
 8013370:	48028600 00000080 00010000 00000000     ...H............
 8013380:	00000000                                ....

08013384 <ELEC_HANDBRAKE_IN_D>:
 8013384:	48028e00 00000000 00000000 00000000     ...H............
 8013394:	00000009                                ....

08013398 <AUX_ANALOG1_IN_D>:
 8013398:	48028e00 00000000 00000000 00000000     ...H............
 80133a8:	00000002                                ....

080133ac <INT_ACCEL_IN_D>:
 80133ac:	48028e00 00000000 00000000 00000000     ...H............
 80133bc:	00000000                                ....

080133c0 <CIGARETTE_LIGHTER_PWR_OUT_D>:
 80133c0:	48028300 00000080 00010000 00000000     ...H............
 80133d0:	0000000d                                ....

080133d4 <BUZZER_EN_D>:
 80133d4:	48028300 00000000 00000000 00000000     ...H............
 80133e4:	0000000b                                ....

080133e8 <MC_RELAY_PWR_OUT_D>:
 80133e8:	48028300 00000080 00010000 00000000     ...H............
 80133f8:	00000004                                ....

080133fc <MC_FAN_PWR_OUT_D>:
 80133fc:	48028300 00000080 00010000 00000000     ...H............
 801340c:	00000003                                ....

08013410 <VEHICLE_SPEED_PWM_OUT>:
 8013410:	48028200 00000000 00000000 00000000     ...H............
 8013420:	0000000c                                ....

08013424 <VEHICLE_RPM_PWM_OUT>:
 8013424:	48028200 00000000 00000000 00000000     ...H............
 8013434:	0000000b                                ....

08013438 <PWR_WINDOW_OUT_D>:
 8013438:	48028200 00000080 00010000 00000000     ...H............
 8013448:	00000009                                ....

0801344c <PWR_STEERING_OUT_D>:
 801344c:	48028200 00000080 00010000 00000000     ...H............
 801345c:	00000008                                ....

08013460 <LEFT_INDICATOR_OUT_D>:
 8013460:	48028200 00000080 00010000 00000000     ...H............
 8013470:	00000007                                ....

08013474 <ADC3_CS_OUT>:
 8013474:	48028200 00000000 00000000 00000000     ...H............
 8013484:	00000006                                ....

08013488 <INPUTS_3V3_PWR_EN>:
 8013488:	48028200 00000080 00010000 00000000     ...H............
 8013498:	00000003                                ....

0801349c <COMM_3V3_PWR_EN>:
 801349c:	48028200 00000080 00010000 00000000     ...H............
 80134ac:	00000002                                ....

080134b0 <SENSOR_3V3_PWR_EN>:
 80134b0:	48028200 00000080 00010000 00000000     ...H............
 80134c0:	00000000                                ....

080134c4 <CABIN_LIGHT_OUT_D>:
 80134c4:	48028500 00000080 00010000 00000000     ...H............
 80134d4:	00000009                                ....

080134d8 <ADC2_CS_OUT>:
 80134d8:	48028500 00000000 00000000 00000000     ...H............
 80134e8:	00000006                                ....

080134ec <ADC1_CS_OUT>:
 80134ec:	48028500 00000000 00000000 00000000     ...H............
 80134fc:	00000005                                ....

08013500 <SPEED_SENSOR_IN_D>:
 8013500:	48028f00 00000000 00000000 00000000     ...H............
 8013510:	0000000d                                ....

08013514 <VACUUM_SENSOR_IN_D>:
 8013514:	48028f00 00000000 00000000 00000000     ...H............
 8013524:	0000000c                                ....

08013528 <BRAKE_OIL_IN_D>:
 8013528:	48028f00 00000000 00000000 00000000     ...H............
 8013538:	00000009                                ....

0801353c <CHARGING_STARTED_IN_D>:
 801353c:	48028f00 00000000 00000000 00000000     ...H............
 801354c:	00000008                                ....

08013550 <CHARGER_CONNECTED_IN_D>:
 8013550:	48028f00 00000000 00000000 00000000     ...H............
 8013560:	00000007                                ....

08013564 <IGNI_POS2_IN_D>:
 8013564:	48028f00 00000000 00000000 00000000     ...H............
 8013574:	00000006                                ....

08013578 <IGNI_POS1_IN_D>:
 8013578:	48028f00 00000000 00000000 00000000     ...H............
 8013588:	00000005                                ....

0801358c <ACC_PEDAL_SW_IN_D>:
 801358c:	48028f00 00000000 00000000 00000000     ...H............
 801359c:	00000004                                ....

080135a0 <HANDBRAKE_IN_D>:
 80135a0:	48028f00 00000010 00000000 00000000     ...H............
 80135b0:	00000003                                ....

080135b4 <BRAKE_SW_IN_D>:
 80135b4:	48028f00 00000008 00000000 00000000     ...H............
 80135c4:	00000002                                ....

080135c8 <DOOR_LOCK_PWR_OUT_D>:
 80135c8:	48028400 00000080 00010000 00000000     ...H............
 80135d8:	00000000                                ....

080135dc <GEAR_SW1_IN_D>:
 80135dc:	48028e00 00000000 00000000 00000000     ...H............
 80135ec:	0000000c                                ....

080135f0 <GEAR_SW2_IN_D>:
 80135f0:	48028e00 00000000 00000000 00000000     ...H............
 8013600:	0000000d                                ....

08013604 <GEAR_SW3_IN_D>:
 8013604:	48028e00 00000000 00000000 00000000     ...H............
 8013614:	0000000e                                ....

08013618 <GEAR_SW4_IN_D>:
 8013618:	48028e00 00000000 00000000 00000000     ...H............
 8013628:	0000000f                                ....

0801362c <DIGITAL_IO_5>:
 801362c:	48028500 00000000 00000000 00000000     ...H............
 801363c:	00000007                                ....

08013640 <DIGITAL_IO_6>:
 8013640:	48028500 00000000 00000000 00000000     ...H............
 8013650:	00000008                                ....

08013654 <CTS>:
 8013654:	48028400 00000000 00000000 00000000     ...H............
 8013664:	00000004                                ....

08013668 <RTS>:
 8013668:	48028400 00000080 00010000 00000000     ...H............
 8013678:	00000005                                ....

0801367c <DIGITAL_IO_PWRKEY>:
 801367c:	48028400 00000080 00010000 00000000     ...H............
 801368c:	00000007                                ....

08013690 <MODULE_4G_EN_OUT_D>:
 8013690:	48028400 00000080 00010000 00000000     ...H............
 80136a0:	00000002 01010230 00010000 00000000     ....0...........
 80136b0:	00010000 01010102                       ........

080136b8 <CAN_NODE_0_gpio_out>:
 80136b8:	48028100 0000000c                       ...H....

080136c0 <CAN_NODE_0_gpio_out_config>:
 80136c0:	00000090 00000001 00000002              ............

080136cc <CAN_NODE_0_gpio_in>:
 80136cc:	48028100 0000000d                       ...H....

080136d4 <CAN_NODE_0_gpio_in_config>:
	...

080136e0 <CAN_NODE_0_BitTimeConfig>:
 80136e0:	08954400 0003d090 00011f40              .D......@...

080136ec <CAN_NODE_0_sr>:
 80136ec:	00000000                                ....

080136f0 <CAN_NODE_0_LMO_01_Config>:
 80136f0:	1ffe8ab8 01000036 00000000              ....6.......

080136fc <CAN_NODE_0_LMO_02_Config>:
 80136fc:	1ffe8ad8 01000013 00000000              ............

08013708 <CAN_NODE_0_LMO_03_Config>:
 8013708:	1ffe8af8 01000012 00000000              ............

08013714 <CAN_NODE_0_LMO_04_Config>:
 8013714:	1ffe8b18 01000037 00000000              ....7.......

08013720 <CAN_NODE_0_LMO_05_Config>:
 8013720:	1ffe8b38 0100002f 00000000              8.../.......

0801372c <CAN_NODE_0_LMO_06_Config>:
 801372c:	1ffe8b58 01000030 00000000              X...0.......

08013738 <CAN_NODE_0_LMO_07_Config>:
 8013738:	1ffe8b78 01000031 00000000              x...1.......

08013744 <CAN_NODE_0_LMO_08_Config>:
 8013744:	1ffe8b98 01000028 00000000              ....(.......

08013750 <CAN_NODE_0_LMO_09_Config>:
 8013750:	1ffe8bb8 00000029 00000000              ....).......

0801375c <CAN_NODE_0_LMO_10_Config>:
 801375c:	1ffe8bd8 00000032 00000000              ....2.......

08013768 <CAN_NODE_0_LMO_11_Config>:
 8013768:	1ffe8bf8 00000035 00000000              ....5.......

08013774 <CAN_NODE_0_LMO_12_Config>:
 8013774:	1ffe8c18 00000010 00000000              ............

08013780 <CAN_NODE_0_LMO_13_Config>:
 8013780:	1ffe8c38 00000034 00000001              8...4.......

0801378c <CAN_NODE_0_LMO_14_Config>:
 801378c:	1ffe8c58 00000011 00000001              X...........

08013798 <CAN_NODE_0_LMO_15_Config>:
 8013798:	1ffe8c78 0000000a 00000001              x...........

080137a4 <CAN_NODE_0_LMO_16_Config>:
 80137a4:	1ffe8c98 01000004 00000000              ............

080137b0 <CAN_NODE_0_LMO_17_Config>:
 80137b0:	1ffe8cb8 0000000b 00000001              ............

080137bc <CAN_NODE_0_LMO_18_Config>:
 80137bc:	1ffe8cd8 00000003 00000001              ............

080137c8 <CAN_NODE_0_LMO_19_Config>:
 80137c8:	1ffe8cf8 0000000c 00000001              ............

080137d4 <CAN_NODE_0_LMO_20_Config>:
 80137d4:	1ffe8d18 00000002 00000001              ............

080137e0 <CAN_NODE_0_LMO_21_Config>:
 80137e0:	1ffe8d38 00000001 00000000              8...........

080137ec <CAN_NODE_0_LMO_22_Config>:
 80137ec:	1ffe8d58 0000000d 00000000              X...........

080137f8 <CAN_NODE_0_LMO_23_Config>:
 80137f8:	1ffe8d78 00000000 00000000              x...........

08013804 <CAN_NODE_0_LMO_24_Config>:
 8013804:	1ffe8d98 0000003b 00000000              ....;.......

08013810 <CAN_NODE_0_LMO_25_Config>:
 8013810:	1ffe8db8 0000003a 00000000              ....:.......

0801381c <CAN_NODE_0_LMO_26_Config>:
 801381c:	1ffe8dd8 0000001b 00000000              ............

08013828 <CAN_NODE_0_LMO_27_Config>:
 8013828:	1ffe8df8 0000003f 00000000              ....?.......

08013834 <CAN_NODE_0_LMO_28_Config>:
 8013834:	1ffe8e18 0000001c 00000000              ............

08013840 <CAN_NODE_0_LMO_29_Config>:
 8013840:	1ffe8e38 0000003e 00000000              8...>.......

0801384c <CAN_NODE_0_LMO_30_Config>:
 801384c:	1ffe8e58 00000019 00000000              X...........

08013858 <CAN_NODE_0_LMO_31_Config>:
 8013858:	1ffe8e78 0100001a 00000000              x...........

08013864 <CAN_NODE_0_LMO_32_Config>:
 8013864:	1ffe8e98 0100003d 00000000              ....=.......

08013870 <CAN_NODE_0>:
 8013870:	1ffe8aa4 48014300 080136e0 080136f0     .....C.H.6...6..
 8013880:	080136fc 08013708 08013714 08013720     .6...7...7.. 7..
 8013890:	0801372c 08013738 08013744 08013750     ,7..87..D7..P7..
 80138a0:	0801375c 08013768 08013774 08013780     \7..h7..t7...7..
 80138b0:	0801378c 08013798 080137a4 080137b0     .7...7...7...7..
 80138c0:	080137bc 080137c8 080137d4 080137e0     .7...7...7...7..
 80138d0:	080137ec 080137f8 08013804 08013810     .7...7...8...8..
 80138e0:	0801381c 08013828 08013834 08013840     .8..(8..48..@8..
 80138f0:	0801384c 08013858 08013864 080136ec     L8..X8..d8...6..
 8013900:	080136b8 080136c0 080136cc 080136d4     .6...6...6...6..
 8013910:	00200102 00000000                       .. .....

08013918 <CAN_NODE_1_gpio_out>:
 8013918:	48028300 00000007                       ...H....

08013920 <CAN_NODE_1_gpio_out_config>:
 8013920:	00000090 00000001 00000002              ............

0801392c <CAN_NODE_1_gpio_in>:
 801392c:	48028300 00000008                       ...H....

08013934 <CAN_NODE_1_gpio_in_config>:
	...

08013940 <CAN_NODE_1_BitTimeConfig>:
 8013940:	08954400 0007a120 00011f40              .D.. ...@...

0801394c <CAN_NODE_1_sr>:
 801394c:	00000000                                ....

08013950 <CAN_NODE_1_LMO_01_Config>:
 8013950:	1ffe8eb8 0100001d 00000000              ............

0801395c <CAN_NODE_1_LMO_02_Config>:
 801395c:	1ffe8ed8 00000014 00000001              ............

08013968 <CAN_NODE_1_LMO_03_Config>:
 8013968:	1ffe8ef8 00000017 00000001              ............

08013974 <CAN_NODE_1_LMO_04_Config>:
 8013974:	1ffe8f18 00000018 00000001              ............

08013980 <CAN_NODE_1_LMO_05_Config>:
 8013980:	1ffe8f38 00000015 00000001              8...........

0801398c <CAN_NODE_1_LMO_06_Config>:
 801398c:	1ffe8f58 00000016 00000001              X...........

08013998 <CAN_NODE_1_LMO_07_Config>:
 8013998:	1ffe8f78 00000006 00000000              x...........

080139a4 <CAN_NODE_1_LMO_08_Config>:
 80139a4:	1ffe8f98 00000005 00000000              ............

080139b0 <CAN_NODE_1_LMO_09_Config>:
 80139b0:	1ffe8fb8 00000008 00000001              ............

080139bc <CAN_NODE_1_LMO_10_Config>:
 80139bc:	1ffe8fd8 00000007 00000001              ............

080139c8 <CAN_NODE_1_LMO_11_Config>:
 80139c8:	1ffe8ff8 0100003c 00000000              ....<.......

080139d4 <CAN_NODE_1_LMO_12_Config>:
 80139d4:	1ffe9018 01000009 00000000              ............

080139e0 <CAN_NODE_1_LMO_13_Config>:
 80139e0:	1ffe9038 01000024 00000000              8...$.......

080139ec <CAN_NODE_1_LMO_14_Config>:
 80139ec:	1ffe9058 00000025 00000001              X...%.......

080139f8 <CAN_NODE_1_LMO_15_Config>:
 80139f8:	1ffe9078 01000026 00000000              x...&.......

08013a04 <CAN_NODE_1_LMO_16_Config>:
 8013a04:	1ffe9098 00000027 00000000              ....'.......

08013a10 <CAN_NODE_1_LMO_17_Config>:
 8013a10:	1ffe90b8 0000001e 00000000              ............

08013a1c <CAN_NODE_1_LMO_18_Config>:
 8013a1c:	1ffe90d8 0000001f 00000000              ............

08013a28 <CAN_NODE_1_LMO_19_Config>:
 8013a28:	1ffe90f8 00000020 00000000              .... .......

08013a34 <CAN_NODE_1_LMO_20_Config>:
 8013a34:	1ffe9118 00000021 00000001              ....!.......

08013a40 <CAN_NODE_1_LMO_21_Config>:
 8013a40:	1ffe9138 00000022 00000000              8...".......

08013a4c <CAN_NODE_1_LMO_22_Config>:
 8013a4c:	1ffe9158 00000023 00000000              X...#.......

08013a58 <CAN_NODE_1>:
 8013a58:	1ffe8aa4 48014400 08013940 08013950     .....D.H@9..P9..
 8013a68:	0801395c 08013968 08013974 08013980     \9..h9..t9...9..
 8013a78:	0801398c 08013998 080139a4 080139b0     .9...9...9...9..
 8013a88:	080139bc 080139c8 080139d4 080139e0     .9...9...9...9..
 8013a98:	080139ec 080139f8 08013a04 08013a10     .9...9...:...:..
 8013aa8:	08013a1c 08013a28 08013a34 08013a40     .:..(:..4:..@:..
 8013ab8:	08013a4c 00000000 00000000 00000000     L:..............
	...
 8013ae4:	0801394c 08013918 08013920 0801392c     L9...9.. 9..,9..
 8013af4:	08013934 00160201 00000000              49..........

08013b00 <CAN_NODE_2_gpio_out>:
 8013b00:	48028500 0000000b                       ...H....

08013b08 <CAN_NODE_2_gpio_out_config>:
 8013b08:	000000a0 00000001 00000002              ............

08013b14 <CAN_NODE_2_gpio_in>:
 8013b14:	48028500 0000000a                       ...H....

08013b1c <CAN_NODE_2_gpio_in_config>:
	...

08013b28 <CAN_NODE_2_BitTimeConfig>:
 8013b28:	08954400 0007a120 00011f40              .D.. ...@...

08013b34 <CAN_NODE_2_sr>:
 8013b34:	00000000                                ....

08013b38 <CAN_NODE_2_LMO_01_Config>:
 8013b38:	1ffe9178 00000039 00000000              x...9.......

08013b44 <CAN_NODE_2_LMO_02_Config>:
 8013b44:	1ffe9198 00000038 00000000              ....8.......

08013b50 <CAN_NODE_2_LMO_03_Config>:
 8013b50:	1ffe91b8 0000000e 00000000              ............

08013b5c <CAN_NODE_2_LMO_04_Config>:
 8013b5c:	1ffe91d8 00000033 00000000              ....3.......

08013b68 <CAN_NODE_2_LMO_05_Config>:
 8013b68:	1ffe91f8 0000000f 00000000              ............

08013b74 <CAN_NODE_2>:
 8013b74:	1ffe8aa4 48014700 08013b28 08013b38     .....G.H(;..8;..
 8013b84:	08013b44 08013b50 08013b5c 08013b68     D;..P;..\;..h;..
	...
 8013c00:	08013b34 08013b00 08013b08 08013b14     4;...;...;...;..
 8013c10:	08013b1c 00050500 00000000 512b5441     .;..........AT+Q
 8013c20:	43535047 223d4746 7074756f 2274726f     GPSCFG="outport"
 8013c30:	6f6e222c 0d22656e 0000000a 512b5441     ,"none".....AT+Q
 8013c40:	3d535047 000a0d31 5047512b 434f4c53     GPS=1...+QGPSLOC
 8013c50:	0000003a 0000002c 512b5441 4c535047     :...,...AT+QGPSL
 8013c60:	313d434f 00000a0d                       OC=1....

08013c68 <vcu_fleet_fleet_10_sec_field_info>:
 8013c68:	40001204 40041208 4008110c 400c1210     ...@...@...@...@
 8013c78:	40101214 40141218 4018121c 401c1220     ...@...@...@ ..@
 8013c88:	40201124 40241228 4028122c 402c1230     $. @(.$@,.(@0.,@
 8013c98:	40301234 40341138 4038123c 403c1240     4.0@8.4@<.8@@.<@
 8013ca8:	40401244 40441248 4048124c 404c1250     D.@@H.D@L.H@P.L@
 8013cb8:	40501254 40541258 4058125c 405c1260     T.P@X.T@\.X@`.\@
 8013cc8:	40601164 00000000                       d.`@....

08013cd0 <vcu_fleet_fleet_10_sec_submsg_info>:
 8013cd0:	00000000                                ....

08013cd4 <vcu_fleet_fleet_10_sec_msg>:
 8013cd4:	08013c68 08013cd0 00000000 00000000     h<...<..........
 8013ce4:	00000019 00000019 544d512b 54415453     ........+QMTSTAT
 8013cf4:	0000003a 544d512b 56434552 0000003a     :...+QMTRECV:...
 8013d04:	444e4951 4d53203a 4f442053 0a0d454e     QIND: SMS DONE..
 8013d14:	00000000 0d594452 0000000a 45574f50     ....RDY.....POWE
 8013d24:	20444552 4e574f44 00000a0d 544d512b     RED DOWN....+QMT
 8013d34:	4e45504f 0000003a 544d512b 45425550     OPEN:...+QMTPUBE
 8013d44:	00003a58 544d512b 4e4e4f43 0000003a     X:..+QMTCONN:...
 8013d54:	544d512b 43534944 0000003a 544d512b     +QMTDISC:...+QMT
 8013d64:	3a425553 00000000 454d432b 52524520     SUB:....+CME ERR
 8013d74:	0000524f 0000003a 534d432b 52524520     OR..:...+CMS ERR
 8013d84:	0000524f 00000000 00000a0d 62737522     OR.........."usb
 8013d94:	0d227461 0000000a 0d302c30 0000000a     at".....0,0.....
 8013da4:	00000000 63657551 0d6c6574 0000000a     ....Quectel.....
 8013db4:	0d302c31 0000000a 00000000 0000002c     1,0.........,...
 8013dc4:	44414552 00000059 00000022 00302c30     READY..."...0,0.
 8013dd4:	00312c30 00322c30 00332c30 00342c30     0,1.0,2.0,3.0,4.
 8013de4:	00352c30 222c6425 255f7325 0a0d2273     0,5.%d,"%s_%s"..
 8013df4:	00000000 72616d73 74694b74 00000000     ....smartKit....
 8013e04:	0a0d6425 00000000 312c6425 2c64252c     %d......%d,1,%d,
 8013e14:	73252c30 0d64252c 0000000a 312c6425     0,%s,%d.....%d,1
 8013e24:	2c73252c 0a0d6425 00000000 252c7325     ,%s,%d......%s,%
 8013e34:	30362c64 0a0d312c 00000000 63616322     d,60,1......"cac
 8013e44:	2e747265 226d6570 00000000 696c6322     ert.pem"...."cli
 8013e54:	63746e65 2e747265 226d6570 00000000     entcert.pem"....
 8013e64:	696c6322 6b746e65 702e7965 00226d65     "clientkey.pem".
 8013e74:	0a0d7325 00000000 252c6425 00000073     %s......%d,%s...
 8013e84:	37796122 7865716f 35326b62 612d6c73     "ay7oqexbk25sl-a
 8013e94:	692e7374 612e746f 6f732d70 2d687475     ts.iot.ap-south-
 8013ea4:	6d612e31 6e6f7a61 2e737761 226d6f63     1.amazonaws.com"
 8013eb4:	3838382c 000a0d33 63616322 22747265     ,8883..."cacert"
 8013ec4:	222c322c 65636163 702e7472 0d226d65     ,2,"cacert.pem".
 8013ed4:	0000000a 696c6322 6b746e65 2c227965     ...."clientkey",
 8013ee4:	63222c32 6e65696c 79656b74 6d65702e     2,"clientkey.pem
 8013ef4:	000a0d22 63657322 6576656c 322c226c     "..."seclevel",2
 8013f04:	0a0d322c 00000000 6c737322 73726576     ,2......"sslvers
 8013f14:	226e6f69 342c322c 00000a0d 70696322     ion",2,4...."cip
 8013f24:	73726568 65746975 2c322c22 46467830     hersuite",2,0xFF
 8013f34:	0a0d4646 00000000 6e676922 6c65726f     FF......"ignorel
 8013f44:	6c61636f 656d6974 2c322c22 000a0d31     ocaltime",2,1...
 8013f54:	4c535322 64252c22 322c312c 00000a0d     "SSL",%d,1,2....
 8013f64:	696c6322 63746e65 22747265 222c322c     "clientcert",2,"
 8013f74:	65696c63 6563746e 702e7472 0d226d65     clientcert.pem".
 8013f84:	0000000a 74756f22 74726f70 6e222c22     ...."outport","n
 8013f94:	22656e6f 00000a0d 65472f22 662f3376     one"...."/Gev3/f
 8013fa4:	7465656c 00000022 65727473 66206d61     leet"...stream f
 8013fb4:	006c6c75 65206f69 726f7272 00000000     ull.io error....
 8013fc4:	61727261 616d2079 69732078 6520657a     array max size e
 8013fd4:	65656378 00646564 6e6f6e28 00002965     xceeded.(none)..
 8013fe4:	61766e69 2064696c 6c656966 79742064     invalid field ty
 8013ff4:	00006570 6c6c6163 6b636162 72726520     pe..callback err
 8014004:	0000726f 7373696d 20676e69 75716572     or..missing requ
 8014014:	64657269 65696620 0000646c 61766e69     ired field..inva
 8014024:	2064696c 65747865 6f69736e 0000006e     lid extension...
 8014034:	6d627573 73206773 20657a69 6e616863     submsg size chan
 8014044:	00646567 61766e69 2064696c 61746164     ged.invalid data
 8014054:	7a69735f 00000065 65747962 69732073     _size...bytes si
 8014064:	6520657a 65656378 00646564 6f72657a     ze exceeded.zero
 8014074:	6e656c2d 20687467 69727473 0000676e     -length string..
 8014084:	65746e75 6e696d72 64657461 72747320     unterminated str
 8014094:	00676e69 61766e69 2064696c 6c656966     ing.invalid fiel
 80140a4:	65642064 69726373 726f7470 00000000     d descriptor....
 80140b4:	45564144 50504120 6e692073 61697469     DAVE APPs initia
 80140c4:	617a696c 6e6f6974 69616620 0064656c     lization failed.
 80140d4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80140e4:	2a2a2a2a 2a2a2a2a 69206e69 7475706e     ********in input
 80140f4:	70616320 65727574 2a2a2a2a 2a2a2a2a      capture********
 8014104:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014114:	0000000a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 8014124:	2a2a2a2a 2a2a2a2a 2a2a2a2a 74697865     ************exit
 8014134:	706e6920 63207475 75747061 2a2a6572      input capture**
 8014144:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014154:	2a2a2a2a 000a2a2a 2a2a2a2a 2a2a2a2a     ******..********
 8014164:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014174:	70206e69 65636f72 69207373 7475706e     in process input
 8014184:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014194:	2a2a2a2a 2a2a2a2a 0000000a 2a2a2a2a     ********....****
 80141a4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80141b4:	652a2a2a 20746978 636f7270 20737365     ***exit process 
 80141c4:	75706e69 2a2a2a74 2a2a2a2a 2a2a2a2a     input***********
 80141d4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
 80141e4:	00000000 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 80141f4:	2a2a2a2a 2a2a2a2a 692a2a2a 6376206e     ***********in vc
 8014204:	756f2075 74757074 2a2a2a2a 2a2a2a2a     u output********
 8014214:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014224:	2a2a2a2a 00000a2a 2a2a2a2a 2a2a2a2a     *****...********
 8014234:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014244:	74697865 75637620 74756f20 2a747570     exit vcu output*
 8014254:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014264:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000a2a     *************...
 8014274:	00676f6c 00000000 00000043              log.....C...

08014280 <_global_impure_ptr>:
 8014280:	1fff42cc                                .B..

08014284 <_DAYS_BEFORE_MONTH>:
 8014284:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 8014294:	00000078 00000097 000000b5 000000d4     x...............
 80142a4:	000000f3 00000111 00000130 0000014e     ........0...N...

080142b4 <DAYS_IN_MONTH>:
 80142b4:	0000001f 0000001c 0000001f 0000001e     ................
 80142c4:	0000001f 0000001e 0000001f 0000001f     ................
 80142d4:	0000001e 0000001f 0000001e 0000001f     ................

080142e4 <_ctype_>:
 80142e4:	20202000 20202020 28282020 20282828     .         ((((( 
 80142f4:	20202020 20202020 20202020 20202020                     
 8014304:	10108820 10101010 10101010 10101010      ...............
 8014314:	04040410 04040404 10040404 10101010     ................
 8014324:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8014334:	01010101 01010101 01010101 10101010     ................
 8014344:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8014354:	02020202 02020202 02020202 10101010     ................
 8014364:	00000020 00000000 00000000 00000000      ...............
	...

080143e8 <__sf_fake_stdin>:
	...

08014408 <__sf_fake_stdout>:
	...

08014428 <__sf_fake_stderr>:
	...

08014448 <__month_lengths>:
 8014448:	0000001f 0000001c 0000001f 0000001e     ................
 8014458:	0000001f 0000001e 0000001f 0000001f     ................
 8014468:	0000001e 0000001f 0000001e 0000001f     ................
 8014478:	0000001f 0000001d 0000001f 0000001e     ................
 8014488:	0000001f 0000001e 0000001f 0000001f     ................
 8014498:	0000001e 0000001f 0000001e 0000001f     ................
 80144a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 80144b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 80144c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
 80144d8:	00006665                                ef..
