
VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014870  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08014870  0c014870  0001c870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00030000  2**0
                  ALLOC
  3 .data         0000bb78  1ffe8800  0c014878  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000f28  1fff4378  0c0203f0  0002c378  2**3
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0002ffc0  2**2
                  ALLOC
  6 .stab         0000009c  00000000  00000000  0002c378  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      0000014d  00000000  00000000  0002c414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00002ab8  00000000  00000000  0002c568  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0007ed2a  00000000  00000000  0002f020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c040  00000000  00000000  000add4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001dc58  00000000  00000000  000b9d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000b918  00000000  00000000  000d79e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00018eb4  00000000  00000000  000e32fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015939  00000000  00000000  000fc1b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024b0  00000000  00000000  00111ae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000209d  00000000  00000000  00113f99  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 a9 04 01 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	59 6c 00 08 99 02 00 08 99 02 00 08 99 02 00 08     Yl..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 bd 04 01 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 0d 09 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 31 86 00 08 99 02 00 08     ........1.......
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 41 86 00 08     ............A...
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c014878 	.word	0x0c014878
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000bb78 	.word	0x0000bb78
 8000254:	0c014878 	.word	0x0c014878
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fff4378 	.word	0x1fff4378
 8000264:	00000f28 	.word	0x00000f28
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08001e0d 	.word	0x08001e0d
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08011999 	.word	0x08011999
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08010349 	.word	0x08010349

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <tm_sysTickCallback>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void tm_sysTickCallback(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	timerCount++;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <tm_sysTickCallback+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <tm_sysTickCallback+0x70>)
 80002a8:	6013      	str	r3, [r2, #0]

	if(gu32_responseCount > 0)
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <tm_sysTickCallback+0x20>
	{
		gu32_responseCount--;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <tm_sysTickCallback+0x74>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ba:	6013      	str	r3, [r2, #0]
	}
	if(gu32_resetCounter > 0)
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <tm_sysTickCallback+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d004      	beq.n	80002ce <tm_sysTickCallback+0x32>
	{
		gu32_resetCounter--;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <tm_sysTickCallback+0x78>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <tm_sysTickCallback+0x78>)
 80002cc:	6013      	str	r3, [r2, #0]
	}

	if(gu32_4gCounter > 0)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d004      	beq.n	80002e0 <tm_sysTickCallback+0x44>
	{
		gu32_4gCounter--;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002de:	6013      	str	r3, [r2, #0]
	}

	if(gu32_10s4gCounter > 0)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <tm_sysTickCallback+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d004      	beq.n	80002f2 <tm_sysTickCallback+0x56>
	{
		gu32_10s4gCounter--;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <tm_sysTickCallback+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <tm_sysTickCallback+0x80>)
 80002f0:	6013      	str	r3, [r2, #0]
	}

	if(gu32_3s4gCounter > 0)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <tm_sysTickCallback+0x84>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <tm_sysTickCallback+0x68>
	{
		gu32_3s4gCounter--;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <tm_sysTickCallback+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <tm_sysTickCallback+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	}
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	1fff4378 	.word	0x1fff4378
 8000310:	1fff438c 	.word	0x1fff438c
 8000314:	1fff437c 	.word	0x1fff437c
 8000318:	1fff4380 	.word	0x1fff4380
 800031c:	1fff4384 	.word	0x1fff4384
 8000320:	1fff4388 	.word	0x1fff4388

08000324 <tm_setTimerCount>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_setTimerCount(uint32_t timerValue)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus;
	//uint32_t tempTimerValue = timerValue * TM_1MS_TIMER_VAL;

	timerId = (uint32_t) SYSTIMER_CreateTimer(timerValue,
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <tm_setTimerCount+0x38>)
 8000332:	2300      	movs	r3, #0
 8000334:	f006 fcee 	bl	8006d14 <SYSTIMER_CreateTimer>
 8000338:	4602      	mov	r2, r0
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <tm_setTimerCount+0x3c>)
 800033c:	601a      	str	r2, [r3, #0]
			SYSTIMER_MODE_PERIODIC, (void*) tm_sysTickCallback, NULL);

	if (0U != timerId)
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <tm_setTimerCount+0x3c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <tm_setTimerCount+0x28>
	{
		len_retStatus = E_RET_SUCCESS;
 8000346:	2300      	movs	r3, #0
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e001      	b.n	8000350 <tm_setTimerCount+0x2c>
	}
	else
	{
		len_retStatus = E_RET_TIMER_ERROR;
 800034c:	2307      	movs	r3, #7
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	0800029d 	.word	0x0800029d
 8000360:	1fff4390 	.word	0x1fff4390

08000364 <tm_startTimer>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_startTimer()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus;
	SYSTIMER_STATUS_t timerStatus;

	if (timerId != 0)
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <tm_startTimer+0x3c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00f      	beq.n	8000392 <tm_startTimer+0x2e>
	{
		timerStatus = SYSTIMER_StartTimer(timerId);
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <tm_startTimer+0x3c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f006 fd6a 	bl	8006e50 <SYSTIMER_StartTimer>
 800037c:	4603      	mov	r3, r0
 800037e:	71bb      	strb	r3, [r7, #6]
		if (SYSTIMER_STATUS_SUCCESS == timerStatus)
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <tm_startTimer+0x28>
		{
			len_retStatus = E_RET_SUCCESS;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e004      	b.n	8000396 <tm_startTimer+0x32>
		}
		else
		{
			len_retStatus = E_RET_TIMER_ERROR;
 800038c:	2307      	movs	r3, #7
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	e001      	b.n	8000396 <tm_startTimer+0x32>
		}
	}
	else
	{
		len_retStatus = E_RET_TIMER_ID_ZERO_ERROR;
 8000392:	2308      	movs	r3, #8
 8000394:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 8000396:	79fb      	ldrb	r3, [r7, #7]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	1fff4390 	.word	0x1fff4390

080003a4 <tm_setResetTimer>:
{
	timerCount = 0;
}

void tm_setResetTimer(uint32_t lu32_timeInMs)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	gu32_resetCounter = lu32_timeInMs;
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <tm_setResetTimer+0x18>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	1fff437c 	.word	0x1fff437c

080003c0 <tm_getResetTimerValue>:

uint32_t tm_getResetTimerValue()
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return gu32_resetCounter;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <tm_getResetTimerValue+0x14>)
 80003c6:	681b      	ldr	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	1fff437c 	.word	0x1fff437c

080003d8 <tm_set4gRunTimer>:
{
	return gu32_3s4gCounter;
}

void tm_set4gRunTimer(uint32_t lu32_timeInMs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	gu32_3s4gCounter = lu32_timeInMs;
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <tm_set4gRunTimer+0x18>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	1fff4388 	.word	0x1fff4388

080003f4 <tm_get4gRunTimerValue>:

uint32_t tm_get4gRunTimerValue()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	return gu32_3s4gCounter;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <tm_get4gRunTimerValue+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	1fff4388 	.word	0x1fff4388

0800040c <tm_setResponseTime>:

void tm_setResponseTime(uint32_t lu32_timeInMs)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	gu32_responseCount = lu32_timeInMs;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <tm_setResponseTime+0x18>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	1fff438c 	.word	0x1fff438c

08000428 <tm_getResponseTimeValue>:

uint32_t tm_getResponseTimeValue()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	return gu32_responseCount;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <tm_getResponseTimeValue+0x14>)
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	1fff438c 	.word	0x1fff438c

08000440 <tm_clearResponseTime>:
void tm_clearResponseTime()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	gu32_responseCount = 0;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <tm_clearResponseTime+0x14>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	1fff438c 	.word	0x1fff438c

08000458 <allFaults_Process>:
	//Gtake_FaultIndicator();
	Irp_FaultIndicator();
}

void allFaults_Process(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
//	HighVoltBattery_FaultIndicator();
//	Mcu_FaultIndicator();
//	clusterFault_Indicator();
}
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8000468:	f004 f94a 	bl	8004700 <XMC_RTC_Start>
}
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop

08000470 <RTC_Stop>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	XMC_RTC_Stop();
 8000474:	f004 f958 	bl	8004728 <XMC_RTC_Stop>
}
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop

0800047c <RTC_init>:
#include "Vcu_Config.h"

#include "xmc_rtc.h"
#include <time.h>
void RTC_init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	RTC_STATUS_t status_r = RTC_STATUS_FAILURE;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
	RTC_Stop();
 8000486:	f7ff fff3 	bl	8000470 <RTC_Stop>

    status_r =  RTC_SetTime(&timeval);
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <RTC_init+0x28>)
 800048c:	f007 fa48 	bl	8007920 <RTC_SetTime>
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]

    if(status_r == RTC_STATUS_SUCCESS)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <RTC_init+0x22>
    {
 	 RTC_Start();
 800049a:	f7ff ffe3 	bl	8000464 <RTC_Start>
    }
}
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	1fff47a8 	.word	0x1fff47a8

080004a8 <Process_State1_Inputs>:
instrument_clustor_buzzer_t *instrument_clustor_buzzer = &(CAN_MSG_DB[CAN_18FF2021].CAN_Data[0]);
Instrumetcluster_DriveMode_OUT_t *Instrumetcluster_DriveMode_OUT = &(CAN_MSG_DB[CAN_18FFB632].CAN_Data[4]);
eps_status_t *eps_status = &eps_n[can_0x1E5].can_matrix[0];

void Process_State1_Inputs(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	static bool init_once = 1;
	Process_Io_exp_U24();
 80004ac:	f000 f86c 	bl	8000588 <Process_Io_exp_U24>

	if(Vcu_OutPuts.IGNITION_1_OUT)
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d010      	beq.n	80004da <Process_State1_Inputs+0x32>
	{
		//Process_Io_exp_U25();
		Process_cluster_indicators();
 80004b8:	f000 f87c 	bl	80005b4 <Process_cluster_indicators>
		Process_drive_mode();
 80004bc:	f000 f938 	bl	8000730 <Process_drive_mode>
		Process_faciaaswitches();
 80004c0:	f000 fa1e 	bl	8000900 <Process_faciaaswitches>
		if(init_once)
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <Process_State1_Inputs+0x54>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <Process_State1_Inputs+0x30>
		{
			init_hw();
 80004cc:	f000 fb78 	bl	8000bc0 <init_hw>
			init_once = 0;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <Process_State1_Inputs+0x54>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e00e      	b.n	80004f6 <Process_State1_Inputs+0x4e>
 80004d8:	e00d      	b.n	80004f6 <Process_State1_Inputs+0x4e>
		}
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f083 0301 	eor.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d006      	beq.n	80004f6 <Process_State1_Inputs+0x4e>
	{
		all_Ig1_Inputs_off();
 80004e8:	f000 f91c 	bl	8000724 <all_Ig1_Inputs_off>
		cluster_indicators_off();
 80004ec:	f000 f8ee 	bl	80006cc <cluster_indicators_off>
		init_once = 1;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <Process_State1_Inputs+0x54>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
	}
}
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	1fff48cc 	.word	0x1fff48cc
 80004fc:	1ffe8810 	.word	0x1ffe8810

08000500 <hazzard>:

void hazzard(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	/* for hazzard */
	if((Vcu_OutPuts.IGNITION_1_OUT == 0) && (Combi_Switch_IN.left_indicator_IN && Combi_Switch_IN.right_indicator_IN))
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <hazzard+0x7c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	f083 0301 	eor.w	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00e      	beq.n	8000530 <hazzard+0x30>
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <hazzard+0x80>)
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00a      	beq.n	8000530 <hazzard+0x30>
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <hazzard+0x80>)
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <hazzard+0x30>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = true;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <hazzard+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = true;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <hazzard+0x84>)
 800052a:	2201      	movs	r2, #1
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	e020      	b.n	8000572 <hazzard+0x72>
	}

	else if(((Combi_Switch_IN.left_indicator_IN == 0) && (Combi_Switch_IN.right_indicator_IN == 0)))
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <hazzard+0x80>)
 8000532:	78db      	ldrb	r3, [r3, #3]
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00d      	beq.n	800055a <hazzard+0x5a>
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <hazzard+0x80>)
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d006      	beq.n	800055a <hazzard+0x5a>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = false;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <hazzard+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = false;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <hazzard+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
 8000558:	e00b      	b.n	8000572 <hazzard+0x72>
	}
	/* end */

	else if(Vcu_OutPuts.IGNITION_1_OUT)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <hazzard+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <hazzard+0x72>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = Combi_Switch_IN.left_indicator_IN;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <hazzard+0x80>)
 8000564:	78da      	ldrb	r2, [r3, #3]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <hazzard+0x84>)
 8000568:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = Combi_Switch_IN.right_indicator_IN;
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <hazzard+0x80>)
 800056c:	791a      	ldrb	r2, [r3, #4]
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <hazzard+0x84>)
 8000570:	711a      	strb	r2, [r3, #4]
	}

}
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	1fff48cc 	.word	0x1fff48cc
 8000580:	1fff48a4 	.word	0x1fff48a4
 8000584:	1fff47b0 	.word	0x1fff47b0

08000588 <Process_Io_exp_U24>:

void Process_Io_exp_U24(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	Relay_Control_Switch_OUT.low_beam_OUT = Combi_Switch_IN.low_beam_IN;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <Process_Io_exp_U24+0x24>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Process_Io_exp_U24+0x28>)
 8000592:	701a      	strb	r2, [r3, #0]
	Relay_Control_Switch_OUT.high_beam_OUT = Combi_Switch_IN.high_beam_IN;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <Process_Io_exp_U24+0x24>)
 8000596:	785a      	ldrb	r2, [r3, #1]
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Process_Io_exp_U24+0x28>)
 800059a:	705a      	strb	r2, [r3, #1]
	Relay_Control_Switch_OUT.pos_light_OUT = Combi_Switch_IN.pos_light_IN;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Process_Io_exp_U24+0x24>)
 800059e:	789a      	ldrb	r2, [r3, #2]
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <Process_Io_exp_U24+0x28>)
 80005a2:	709a      	strb	r2, [r3, #2]

	hazzard();
 80005a4:	f7ff ffac 	bl	8000500 <hazzard>
}
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	1fff48a4 	.word	0x1fff48a4
 80005b0:	1fff47b0 	.word	0x1fff47b0

080005b4 <Process_cluster_indicators>:
	//Relay_Control_Switch_OUT.ac_blower3_OUT = Hvac_IN.blower_speed3_IN;

}

void Process_cluster_indicators(void)
 {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_right_indicator = 0;//Combi_Switch_IN.right_indicator_IN;

	i_counter = 0;
}
*/
	Instrument_Cluster_OUT.set_left_indicator = Combi_Switch_IN.left_indicator_IN;
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005be:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = Combi_Switch_IN.right_indicator_IN;
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005c2:	791a      	ldrb	r2, [r3, #4]
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005c6:	71da      	strb	r2, [r3, #7]
	 //Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.low_beam_OUT;
	 Instrument_Cluster_OUT.set_high_beam = Relay_Control_Switch_OUT.high_beam_OUT;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005ca:	785a      	ldrb	r2, [r3, #1]
 80005cc:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005ce:	725a      	strb	r2, [r3, #9]
	 Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.pos_light_OUT;//There is no indicator for low beam there is for position
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005d2:	789a      	ldrb	r2, [r3, #2]
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005d6:	721a      	strb	r2, [r3, #8]
	 Instrument_Cluster_OUT.set_brake_oil = Switch_Ios_IN.brake_oil_IN;
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <Process_cluster_indicators+0xf8>)
 80005da:	799a      	ldrb	r2, [r3, #6]
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005de:	729a      	strb	r2, [r3, #10]

	// Instrument_Cluster_OUT.eps_status = 1;//default value to show eps failure
	 Instrument_Cluster_OUT.eps_status = eps_status-> Power_Steering_Fault_Indication_On_EPS;///////eps failure
 80005e0:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <Process_cluster_indicators+0xfc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005f8:	731a      	strb	r2, [r3, #12]

	 Instrument_Cluster_OUT.aux_vtg_critical;////////
	 Instrument_Cluster_OUT.battery_temp_exceeded;/////////
	 /*instrument_clustor_buzzer-> charging_connected = */Instrument_Cluster_OUT.charging_connected = charger_on();//Vcu_InPuts.charger_connect_IN;
 80005fa:	f000 fad5 	bl	8000ba8 <charger_on>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800060c:	739a      	strb	r2, [r3, #14]
	 /*instrument_clustor_indicators-> generic_alarm;////////*/
	 Instrument_Cluster_OUT.regen_enabled = Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese || Irp_Mcu_drive_states_29bit-> Regen_On_Brake;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d107      	bne.n	800062e <Process_cluster_indicators+0x7a>
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <Process_cluster_indicators+0x7e>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <Process_cluster_indicators+0x80>
 8000632:	2300      	movs	r3, #0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800063c:	73da      	strb	r2, [r3, #15]
	 instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;////////
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Process_cluster_indicators+0x104>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <Process_cluster_indicators+0xf8>)
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2d9      	uxtb	r1, r3
 8000652:	7953      	ldrb	r3, [r2, #5]
 8000654:	f361 03c3 	bfi	r3, r1, #3, #1
 8000658:	7153      	strb	r3, [r2, #5]
	 Seat_Belt_OUT.seat_occupied = (!(/*Seat_Switch_IN.seat_belt_d_IN &&*/ Seat_Switch_IN.seat_belt_p_IN));
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <Process_cluster_indicators+0x108>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000676:	709a      	strb	r2, [r3, #2]

	 if(vspeed >=10)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Process_cluster_indicators+0x110>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d908      	bls.n	8000692 <Process_cluster_indicators+0xde>
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = Seat_Belt_OUT.seat_occupied;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000686:	7899      	ldrb	r1, [r3, #2]
 8000688:	7813      	ldrb	r3, [r2, #0]
 800068a:	f361 0341 	bfi	r3, r1, #1, #1
 800068e:	7013      	strb	r3, [r2, #0]
 8000690:	e005      	b.n	800069e <Process_cluster_indicators+0xea>
	 }
	 else
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = false;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f36f 0341 	bfc	r3, #1, #1
 800069c:	7013      	strb	r3, [r2, #0]
	 }
	 // instrument_clustor_indicators-> overspeed = 1;
 }
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	1fff48a4 	.word	0x1fff48a4
 80006a4:	1fff4874 	.word	0x1fff4874
 80006a8:	1fff47b0 	.word	0x1fff47b0
 80006ac:	1fff4844 	.word	0x1fff4844
 80006b0:	1ffe8804 	.word	0x1ffe8804
 80006b4:	1ffe8818 	.word	0x1ffe8818
 80006b8:	1ffe8808 	.word	0x1ffe8808
 80006bc:	1fff47e8 	.word	0x1fff47e8
 80006c0:	1fff4828 	.word	0x1fff4828
 80006c4:	1fff522a 	.word	0x1fff522a
 80006c8:	1ffe880c 	.word	0x1ffe880c

080006cc <cluster_indicators_off>:

void cluster_indicators_off(void)
 {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_left_indicator = false;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <cluster_indicators_off+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = false;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <cluster_indicators_off+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	71da      	strb	r2, [r3, #7]
	Instrument_Cluster_OUT.set_low_beam = false;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <cluster_indicators_off+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	721a      	strb	r2, [r3, #8]
	Instrument_Cluster_OUT.set_high_beam = false;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <cluster_indicators_off+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	725a      	strb	r2, [r3, #9]
	Instrument_Cluster_OUT.set_brake_oil = false;//////
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <cluster_indicators_off+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	729a      	strb	r2, [r3, #10]
	//Instrument_Cluster_OUT.;///////eps failure
	Instrument_Cluster_OUT.aux_vtg_critical = false;////////
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <cluster_indicators_off+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	72da      	strb	r2, [r3, #11]
	Instrument_Cluster_OUT.battery_temp_exceeded = false;/////////
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <cluster_indicators_off+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	735a      	strb	r2, [r3, #13]
	Instrument_Cluster_OUT.charging_connected = false;/////////////
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <cluster_indicators_off+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	739a      	strb	r2, [r3, #14]
	/*instrument_clustor_indicators-> generic_alarm;////////*/
	Instrument_Cluster_OUT.regen_enabled = false;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <cluster_indicators_off+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	73da      	strb	r2, [r3, #15]
	/*instrument_clustor_indicators-> parking_brake_light;////////*/
	instrument_clustor_indicators-> seat_belt = false;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <cluster_indicators_off+0x54>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7953      	ldrb	r3, [r2, #5]
 800070c:	f36f 1304 	bfc	r3, #4, #1
 8000710:	7153      	strb	r3, [r2, #5]
 }
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	1fff4874 	.word	0x1fff4874
 8000720:	1ffe8808 	.word	0x1ffe8808

08000724 <all_Ig1_Inputs_off>:
{

}

void all_Ig1_Inputs_off(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

	//Relay_Control_Switch_OUT.left_indicator_OUT = false;
	//Relay_Control_Switch_OUT.right_indicator_OUT = false;

	/* IO EXP U25 */
}
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <Process_drive_mode>:

void Process_drive_mode(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	static bool prev_input = 0;
	static uint8_t ModeCounter_MCU = eco_mode_mcu, ModeCounter_Cluster = eco_mode_cluster, counter = 1;

	switch (Switch_Ios_IN.gear_sw2_IN )
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <Process_drive_mode+0xa4>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d127      	bne.n	800078c <Process_drive_mode+0x5c>
	{
		case 1:
				if((prev_input == 0 ) && (Hvac_IN.blower_speed2_IN)) // mode switch is connected to Hvac_IN.blower_speed2_IN
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <Process_drive_mode+0xa8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d014      	beq.n	8000774 <Process_drive_mode+0x44>
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <Process_drive_mode+0xac>)
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d010      	beq.n	8000774 <Process_drive_mode+0x44>
				{
					ModeCounter_Cluster++;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <Process_drive_mode+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <Process_drive_mode+0xb0>)
 800075c:	701a      	strb	r2, [r3, #0]
					if(ModeCounter_Cluster == invalid_data_cluster)
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <Process_drive_mode+0xb0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d102      	bne.n	800076c <Process_drive_mode+0x3c>
						ModeCounter_Cluster = eco_mode_cluster;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <Process_drive_mode+0xb0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

					prev_input = 1;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <Process_drive_mode+0xa8>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e00a      	b.n	800078a <Process_drive_mode+0x5a>
				}
				else if(Hvac_IN.blower_speed2_IN == 0)
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <Process_drive_mode+0xac>)
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <Process_drive_mode+0x5a>
				{
					prev_input = 0;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <Process_drive_mode+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
				}
		break;
 8000788:	e007      	b.n	800079a <Process_drive_mode+0x6a>
 800078a:	e006      	b.n	800079a <Process_drive_mode+0x6a>

		default:
				ModeCounter_MCU = eco_mode_mcu;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <Process_drive_mode+0xb4>)
 800078e:	2203      	movs	r2, #3
 8000790:	701a      	strb	r2, [r3, #0]
				ModeCounter_Cluster = eco_mode_cluster;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Process_drive_mode+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	bf00      	nop
	}
/* this is for gtake */
	if(Switch_Ios_IN.gear_sw2_IN)
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <Process_drive_mode+0xa4>)
 800079c:	7a9b      	ldrb	r3, [r3, #10]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <Process_drive_mode+0x82>
	{
		ModeCounter_MCU = 3 - ModeCounter_Cluster;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <Process_drive_mode+0xb0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f1c3 0303 	rsb	r3, r3, #3
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <Process_drive_mode+0xb4>)
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e005      	b.n	80007be <Process_drive_mode+0x8e>
	}
	else
	{
		ModeCounter_MCU = eco_mode_mcu;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Process_drive_mode+0xb4>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	701a      	strb	r2, [r3, #0]
		ModeCounter_Cluster = eco_mode_cluster;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	}
/***** for gtake end  **********/

	Process_cluster_drivemode(ModeCounter_Cluster);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Process_drive_mode+0xb0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f810 	bl	80007e8 <Process_cluster_drivemode>
	Process_motordrive_mode(ModeCounter_Cluster); //for gtake pass ModeCounter_MCU, and for irp pass ModeCounter_Cluster
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f825 	bl	800081c <Process_motordrive_mode>

}
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	1fff4844 	.word	0x1fff4844
 80007d8:	1fff4394 	.word	0x1fff4394
 80007dc:	1fff485c 	.word	0x1fff485c
 80007e0:	1fff4395 	.word	0x1fff4395
 80007e4:	1ffe8811 	.word	0x1ffe8811

080007e8 <Process_cluster_drivemode>:

void Process_cluster_drivemode(uint8_t mode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <Process_cluster_drivemode+0x2c>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <Process_cluster_drivemode+0x20>
		Instrumetcluster_DriveMode_OUT ->DriveMode = mode;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <Process_cluster_drivemode+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	1fff48ac 	.word	0x1fff48ac
 8000818:	1ffe8800 	.word	0x1ffe8800

0800081c <Process_motordrive_mode>:
void Process_motordrive_mode(uint8_t mode)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	//motordrive_mode_Gtake(uint8_t mode);
	motordrive_mode_irp(mode);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f803 	bl	8000834 <motordrive_mode_irp>
}
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <motordrive_mode_irp>:
	if(!Lights_OUT.brake_switch_out_d)
		Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = mode;
}

void motordrive_mode_irp(uint8_t mode)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <motordrive_mode_irp+0x38>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <motordrive_mode_irp+0x2c>
		Irp_Mcu_drive_states_29bit->Driving_Profile = mode;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <motordrive_mode_irp+0x3c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	7813      	ldrb	r3, [r2, #0]
 800085a:	f361 0384 	bfi	r3, r1, #2, #3
 800085e:	7013      	strb	r3, [r2, #0]
}
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	1fff48ac 	.word	0x1fff48ac
 8000870:	1ffe8818 	.word	0x1ffe8818

08000874 <Process_Regen_Control>:

void Process_Regen_Control(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	static bool prev_input = 0;

	if((prev_input == 0 ) && (Hvac_IN.blower_speed3_IN)) // regen switch is connected to Hvac_IN.blower_speed3_IN
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <Process_Regen_Control+0x7c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d026      	beq.n	80008d4 <Process_Regen_Control+0x60>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <Process_Regen_Control+0x80>)
 8000888:	799b      	ldrb	r3, [r3, #6]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d022      	beq.n	80008d4 <Process_Regen_Control+0x60>
	{
		Relay_Control_Switch_OUT.ac_blower3_OUT = !Relay_Control_Switch_OUT.ac_blower3_OUT;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <Process_Regen_Control+0x84>)
 8000890:	7a9b      	ldrb	r3, [r3, #10]
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Process_Regen_Control+0x84>)
 80008aa:	729a      	strb	r2, [r3, #10]
		prev_input = 1;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
		//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0x0;
		//if(Relay_Control_Switch_OUT.ac_blower3_OUT)
		{
			//enable region cmd
			Irp_Mcu_drive_states_29bit-> Regen_On_Brake = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <Process_Regen_Control+0x88>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <Process_Regen_Control+0x84>)
 80008b8:	7a99      	ldrb	r1, [r3, #10]
 80008ba:	7893      	ldrb	r3, [r2, #2]
 80008bc:	f361 0382 	bfi	r3, r1, #2, #1
 80008c0:	7093      	strb	r3, [r2, #2]
			Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <Process_Regen_Control+0x88>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <Process_Regen_Control+0x84>)
 80008c8:	7a99      	ldrb	r1, [r3, #10]
 80008ca:	7893      	ldrb	r3, [r2, #2]
 80008cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d0:	7093      	strb	r3, [r2, #2]
 80008d2:	e009      	b.n	80008e8 <Process_Regen_Control+0x74>
		}
	}
	else if(Hvac_IN.blower_speed3_IN == 0)
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Process_Regen_Control+0x80>)
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <Process_Regen_Control+0x74>
	{
		prev_input = 0;
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	}

}
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	1fff4396 	.word	0x1fff4396
 80008f4:	1fff485c 	.word	0x1fff485c
 80008f8:	1fff47b0 	.word	0x1fff47b0
 80008fc:	1ffe8818 	.word	0x1ffe8818

08000900 <Process_faciaaswitches>:

}


void Process_faciaaswitches(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	Process_Regen_Control();
 8000904:	f7ff ffb6 	bl	8000874 <Process_Regen_Control>
	//Process_RearDefogger();
	//Process_FogLamp();
	//Process_PowerLatch();
}
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop

0800090c <CCU81_0_IRQHandler>:

void Flasher(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
		else if(Combi_Switch_IN.right_indicator_IN)
		{
			Instrument_Cluster_OUT.set_right_indicator = !Instrument_Cluster_OUT.set_right_indicator;
		}*/
	//INTERRUPT_Disable(&INTERRUPT_0);
}
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <Process_State2_Inputs>:

#include "Vcu_Config.h"
#include "Vcu_Process.h"

void Process_State2_Inputs(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <Process_State2_Inputs+0x30>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <Process_State2_Inputs+0x16>
	{
		Process_vehicleDrive_Inputs();
 8000924:	f000 f812 	bl	800094c <Process_vehicleDrive_Inputs>
		Process_ig2_lights();
 8000928:	f000 f842 	bl	80009b0 <Process_ig2_lights>
 800092c:	e00a      	b.n	8000944 <Process_State2_Inputs+0x2c>
	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <Process_State2_Inputs+0x30>)
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <Process_State2_Inputs+0x2c>
	{
		Process_vehicleDrive_Inputs_off();
 800093c:	f000 f820 	bl	8000980 <Process_vehicleDrive_Inputs_off>
		Process_ig2_lights_off();
 8000940:	f000 f844 	bl	80009cc <Process_ig2_lights_off>
	}

}
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	1fff48cc 	.word	0x1fff48cc

0800094c <Process_vehicleDrive_Inputs>:

void Process_vehicleDrive_Inputs(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = Switch_Ios_IN.gear_sw1_IN;//neutral
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000952:	7a5a      	ldrb	r2, [r3, #9]
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000956:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = Switch_Ios_IN.gear_sw2_IN;//forward
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800095a:	7a9a      	ldrb	r2, [r3, #10]
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800095e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = Switch_Ios_IN.gear_sw3_IN;//reverse
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000962:	7ada      	ldrb	r2, [r3, #11]
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000966:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = Switch_Ios_IN.gear_sw4_IN;//park
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800096a:	7b1a      	ldrb	r2, [r3, #12]
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800096e:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay;
}
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	1fff4844 	.word	0x1fff4844
 800097c:	1fff4804 	.word	0x1fff4804

08000980 <Process_vehicleDrive_Inputs_off>:
void Process_vehicleDrive_Inputs_off(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = HIGH;// neutral
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000986:	2201      	movs	r2, #1
 8000988:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = LOW;//forward
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = LOW;//reverse
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000992:	2200      	movs	r2, #0
 8000994:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = LOW;//park
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000998:	2200      	movs	r2, #0
 800099a:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay = LOW;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

}
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	1fff4804 	.word	0x1fff4804

080009b0 <Process_ig2_lights>:

void Process_ig2_lights(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = Switch_Ios_IN.gear_sw3_IN;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <Process_ig2_lights+0x14>)
 80009b6:	7ada      	ldrb	r2, [r3, #11]
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <Process_ig2_lights+0x18>)
 80009ba:	709a      	strb	r2, [r3, #2]
}
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	1fff4844 	.word	0x1fff4844
 80009c8:	1fff48ac 	.word	0x1fff48ac

080009cc <Process_ig2_lights_off>:

void Process_ig2_lights_off(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = LOW;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <Process_ig2_lights_off+0x14>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
}
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	1fff48ac 	.word	0x1fff48ac

080009e4 <Process_VcuOutputs_Update>:


int *cluster_door_in = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[0];

void Process_VcuOutputs_Update(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	allFaults_Process();
 80009e8:	f7ff fd36 	bl	8000458 <allFaults_Process>

	Vcu_OutPuts.charger_connect_OUT = charger_on();
 80009ec:	f000 f8dc 	bl	8000ba8 <charger_on>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf14      	ite	ne
 80009f6:	2301      	movne	r3, #1
 80009f8:	2300      	moveq	r3, #0
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 80009fe:	709a      	strb	r2, [r3, #2]
	Vcu_OutPuts.IGNITION_1_OUT = Vcu_InPuts.IGNITION_1_IN;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a06:	701a      	strb	r2, [r3, #0]

	Relay_Control_Switch_OUT.elec_handbrake_pwr_out = (Switch_Ios_IN.handbrake_sw_IN || Switch_Ios_IN.electronic_brake_in_d);
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d103      	bne.n	8000a18 <Process_VcuOutputs_Update+0x34>
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <Process_VcuOutputs_Update+0x38>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <Process_VcuOutputs_Update+0x3a>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <Process_VcuOutputs_Update+0xd0>)
 8000a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	if(!Vcu_OutPuts.charger_connect_OUT)
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d004      	beq.n	8000a42 <Process_VcuOutputs_Update+0x5e>
		Vcu_OutPuts.IGNITION_2_OUT = Vcu_InPuts.IGNITION_2_IN;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a3a:	785a      	ldrb	r2, [r3, #1]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a3e:	705a      	strb	r2, [r3, #1]
 8000a40:	e002      	b.n	8000a48 <Process_VcuOutputs_Update+0x64>
	else
		Vcu_OutPuts.IGNITION_2_OUT = false;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]

	if(Vcu_OutPuts.IGNITION_1_OUT || Vcu_OutPuts.IGNITION_2_OUT)
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <Process_VcuOutputs_Update+0x74>
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00f      	beq.n	8000a78 <Process_VcuOutputs_Update+0x94>
	{
		Lights_OUT.brake_switch_out_d = !Switch_Ios_IN.brake_sw_in_d;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a5a:	7c9b      	ldrb	r3, [r3, #18]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f083 0301 	eor.w	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a74:	705a      	strb	r2, [r3, #1]
 8000a76:	e002      	b.n	8000a7e <Process_VcuOutputs_Update+0x9a>
	}
	else
	{
		Lights_OUT.brake_switch_out_d = false;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	705a      	strb	r2, [r3, #1]
	}

	if(Vcu_OutPuts.IGNITION_2_OUT && (Vcu_OutPuts.IGNITION_1_OUT == 0))
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d009      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
	{
		Vcu_OutPuts.IGNITION_1_OUT = 1;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
	}

	all_doors();
 8000a9a:	f000 f80f 	bl	8000abc <all_doors>

	Process_State1_Inputs();
 8000a9e:	f7ff fd03 	bl	80004a8 <Process_State1_Inputs>
	Process_State2_Inputs();
 8000aa2:	f7ff ff39 	bl	8000918 <Process_State2_Inputs>
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	1fff48cc 	.word	0x1fff48cc
 8000aac:	1fff5104 	.word	0x1fff5104
 8000ab0:	1fff4844 	.word	0x1fff4844
 8000ab4:	1fff47b0 	.word	0x1fff47b0
 8000ab8:	1fff48ac 	.word	0x1fff48ac

08000abc <all_doors>:

void all_doors(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	int charging = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
	Door_Switch_OUT.driver_door_OUT = Door_Switch_IN.driver_door_IN;
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <all_doors+0xdc>)
 8000ac8:	785a      	ldrb	r2, [r3, #1]
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <all_doors+0xe0>)
 8000acc:	705a      	strb	r2, [r3, #1]
	Door_Switch_OUT.passenger_door_OUT = Door_Switch_IN.passenger_door_IN;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <all_doors+0xdc>)
 8000ad0:	789a      	ldrb	r2, [r3, #2]
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <all_doors+0xe0>)
 8000ad4:	709a      	strb	r2, [r3, #2]
	Door_Switch_OUT.bonnet_OUT = 0;//Door_Switch_IN.bonnet_IN;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <all_doors+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	719a      	strb	r2, [r3, #6]
	Door_Switch_OUT.hatch_OUT = Door_Switch_IN.hatch_IN;
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <all_doors+0xdc>)
 8000ade:	795a      	ldrb	r2, [r3, #5]
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <all_doors+0xe0>)
 8000ae2:	715a      	strb	r2, [r3, #5]

	if(!Door_Switch_IN.driver_door_IN)
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <all_doors+0xdc>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <all_doors+0x3e>
		instrument_cluster_doorsvar.driver_door_OUT = (uint8_t)right_door;
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <all_doors+0xe4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	705a      	strb	r2, [r3, #1]
 8000af8:	e002      	b.n	8000b00 <all_doors+0x44>
	else
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <all_doors+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	705a      	strb	r2, [r3, #1]

	if(!Door_Switch_IN.passenger_door_IN)
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <all_doors+0xdc>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <all_doors+0x5a>
		instrument_cluster_doorsvar.passenger_door_OUT = (uint8_t)left_door;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <all_doors+0xe4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	709a      	strb	r2, [r3, #2]
 8000b14:	e002      	b.n	8000b1c <all_doors+0x60>
	else
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <all_doors+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	709a      	strb	r2, [r3, #2]

	if(!Door_Switch_IN.bonnet_IN)
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <all_doors+0xdc>)
 8000b1e:	799b      	ldrb	r3, [r3, #6]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <all_doors+0x76>
		instrument_cluster_doorsvar.bonnet_OUT = 0;//(uint8_t)hood;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <all_doors+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e002      	b.n	8000b38 <all_doors+0x7c>
	else
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <all_doors+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	719a      	strb	r2, [r3, #6]

	if(!Door_Switch_IN.hatch_IN)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <all_doors+0xdc>)
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <all_doors+0x92>
		instrument_cluster_doorsvar.hatch_OUT = (uint8_t)tailgate;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <all_doors+0xe4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	715a      	strb	r2, [r3, #5]
 8000b4c:	e002      	b.n	8000b54 <all_doors+0x98>
	else
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <all_doors+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	715a      	strb	r2, [r3, #5]

	charging = 0x20;
 8000b54:	2320      	movs	r3, #32
 8000b56:	607b      	str	r3, [r7, #4]

	if(charger_on())
 8000b58:	f000 f826 	bl	8000ba8 <charger_on>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00c      	beq.n	8000b7c <all_doors+0xc0>
	{
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <all_doors+0xe4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	705a      	strb	r2, [r3, #1]
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <all_doors+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	709a      	strb	r2, [r3, #2]
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <all_doors+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	719a      	strb	r2, [r3, #6]
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <all_doors+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
 8000b7a:	e004      	b.n	8000b86 <all_doors+0xca>
	}
	else
	{
		charging = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
		charge_complete = 0x00;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <all_doors+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	}

	if(charge_complete)
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <all_doors+0xe8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <all_doors+0xd6>
		charging = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]

	//*cluster_door_in = instrument_cluster_doorsvar.driver_door_OUT + instrument_cluster_doorsvar.passenger_door_OUT + instrument_cluster_doorsvar.bonnet_OUT + instrument_cluster_doorsvar.hatch_OUT + charge_complete + charging;
}
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	1fff48b8 	.word	0x1fff48b8
 8000b9c:	1fff4830 	.word	0x1fff4830
 8000ba0:	1fff48dc 	.word	0x1fff48dc
 8000ba4:	1fff4859 	.word	0x1fff4859

08000ba8 <charger_on>:


int charger_on(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	return Vcu_InPuts.charger_connect_IN;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <charger_on+0x14>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
	//return charging_connected ;
	return 0;
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	1fff5104 	.word	0x1fff5104

08000bc0 <init_hw>:
 */

#include "DAVE.h"

void init_hw(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status = DAVE_STATUS_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]

	if (init_status == DAVE_STATUS_SUCCESS)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <init_hw+0x1a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0);
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <init_hw+0x30>)
 8000bd2:	f008 f8a9 	bl	8008d28 <CAN_NODE_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	}
	if (init_status == DAVE_STATUS_SUCCESS)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <init_hw+0x2a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1);
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <init_hw+0x34>)
 8000be2:	f008 f8a1 	bl	8008d28 <CAN_NODE_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
   }

}
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08013c04 	.word	0x08013c04
 8000bf4:	08013dec 	.word	0x08013dec

08000bf8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2201      	movs	r2, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
}
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	605a      	str	r2, [r3, #4]
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <DROPPED_IN_12_volt>:
uint8_t adc3_array_counter = 0;

///**************************** THINGS TO UPDATE FIRST *********************************

void DROPPED_IN_12_volt(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	e00b      	b.n	8000c68 <DROPPED_IN_12_volt+0x28>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <DROPPED_IN_12_volt+0x98>)
 8000c54:	4413      	add	r3, r2
 8000c56:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

void DROPPED_IN_12_volt(void)
{
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	3301      	adds	r3, #1
 8000c66:	72fb      	strb	r3, [r7, #11]
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	2b31      	cmp	r3, #49	; 0x31
 8000c6c:	d9f0      	bls.n	8000c50 <DROPPED_IN_12_volt+0x10>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
	}
	float adc_vout = (avg_receive_data / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <DROPPED_IN_12_volt+0x9c>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f010 f80f 	bl	8010c9c <__aeabi_ui2d>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <DROPPED_IN_12_volt+0xa0>)
 8000c8c:	f010 f87c 	bl	8010d88 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f010 fb58 	bl	801134c <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	607b      	str	r3, [r7, #4]
	DROPPED_IN_12V = adc_vout / ATTENUATION;
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f010 f81d 	bl	8010ce0 <__aeabi_f2d>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	a308      	add	r3, pc, #32	; (adr r3, 8000cd0 <DROPPED_IN_12_volt+0x90>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f010 f992 	bl	8010fdc <__aeabi_ddiv>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f010 fb44 	bl	801134c <__aeabi_d2f>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <DROPPED_IN_12_volt+0xa4>)
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	e147ae14 	.word	0xe147ae14
 8000cd4:	3fbe147a 	.word	0x3fbe147a
 8000cd8:	1fff49ac 	.word	0x1fff49ac
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	3f840000 	.word	0x3f840000
 8000ce4:	1fff4398 	.word	0x1fff4398

08000ce8 <convert_raw_data_into_current>:

void convert_raw_data_into_current(void)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000cee:	4864      	ldr	r0, [pc, #400]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2240      	movs	r2, #64	; 0x40
 8000cf4:	f010 fe81 	bl	80119fa <memset>
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000cf8:	4862      	ldr	r0, [pc, #392]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	f010 fe7c 	bl	80119fa <memset>

	for(int i = 0; i < 16; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e0ac      	b.n	8000e62 <convert_raw_data_into_current+0x17a>
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	72fb      	strb	r3, [r7, #11]
 8000d0c:	e026      	b.n	8000d5c <convert_raw_data_into_current+0x74>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
 8000d0e:	4a5c      	ldr	r2, [pc, #368]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	7afa      	ldrb	r2, [r7, #11]
 8000d18:	485b      	ldr	r0, [pc, #364]	; (8000e88 <convert_raw_data_into_current+0x1a0>)
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	2432      	movs	r4, #50	; 0x32
 8000d1e:	fb04 f101 	mul.w	r1, r4, r1
 8000d22:	440a      	add	r2, r1
 8000d24:	4402      	add	r2, r0
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	441a      	add	r2, r3
 8000d2a:	4955      	ldr	r1, [pc, #340]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
 8000d32:	4a54      	ldr	r2, [pc, #336]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	7afa      	ldrb	r2, [r7, #11]
 8000d3c:	4853      	ldr	r0, [pc, #332]	; (8000e8c <convert_raw_data_into_current+0x1a4>)
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	2432      	movs	r4, #50	; 0x32
 8000d42:	fb04 f101 	mul.w	r1, r4, r1
 8000d46:	440a      	add	r2, r1
 8000d48:	4402      	add	r2, r0
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	494d      	ldr	r1, [pc, #308]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	72fb      	strb	r3, [r7, #11]
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	2b31      	cmp	r3, #49	; 0x31
 8000d60:	d9d5      	bls.n	8000d0e <convert_raw_data_into_current+0x26>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
		}

		float adc_vout = (ADS2_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000d62:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <convert_raw_data_into_current+0x1a8>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00f ff92 	bl	8010c9c <__aeabi_ui2d>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <convert_raw_data_into_current+0x1ac>)
 8000d86:	f00f ffff 	bl	8010d88 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f010 fadb 	bl	801134c <__aeabi_d2f>
 8000d96:	4603      	mov	r3, r0
 8000d98:	607b      	str	r3, [r7, #4]
		adc2_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f00f ffa0 	bl	8010ce0 <__aeabi_f2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	a331      	add	r3, pc, #196	; (adr r3, 8000e70 <convert_raw_data_into_current+0x188>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	f010 f915 	bl	8010fdc <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	a32f      	add	r3, pc, #188	; (adr r3, 8000e78 <convert_raw_data_into_current+0x190>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f010 f90c 	bl	8010fdc <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f010 fabe 	bl	801134c <__aeabi_d2f>
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <convert_raw_data_into_current+0x1b0>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	6019      	str	r1, [r3, #0]

		adc_vout = 0;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <convert_raw_data_into_current+0x1a8>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00f ff52 	bl	8010c9c <__aeabi_ui2d>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <convert_raw_data_into_current+0x1ac>)
 8000e06:	f00f ffbf 	bl	8010d88 <__aeabi_dmul>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f010 fa9b 	bl	801134c <__aeabi_d2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	607b      	str	r3, [r7, #4]
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f00f ff60 	bl	8010ce0 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	a311      	add	r3, pc, #68	; (adr r3, 8000e70 <convert_raw_data_into_current+0x188>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f010 f8d5 	bl	8010fdc <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	a30f      	add	r3, pc, #60	; (adr r3, 8000e78 <convert_raw_data_into_current+0x190>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f010 f8cc 	bl	8010fdc <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f010 fa7e 	bl	801134c <__aeabi_d2f>
 8000e50:	4601      	mov	r1, r0
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <convert_raw_data_into_current+0x1b4>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	6019      	str	r1, [r3, #0]
void convert_raw_data_into_current(void)
{
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	f77f af4f 	ble.w	8000d08 <convert_raw_data_into_current+0x20>

		adc_vout = 0;
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
	}
}
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	33333333 	.word	0x33333333
 8000e74:	4062e333 	.word	0x4062e333
 8000e78:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e7c:	3f40624d 	.word	0x3f40624d
 8000e80:	1fff4ccc 	.word	0x1fff4ccc
 8000e84:	1fff4d0c 	.word	0x1fff4d0c
 8000e88:	1fff4de0 	.word	0x1fff4de0
 8000e8c:	1fff49ac 	.word	0x1fff49ac
 8000e90:	51eb851f 	.word	0x51eb851f
 8000e94:	3f840000 	.word	0x3f840000
 8000e98:	1fff4d50 	.word	0x1fff4d50
 8000e9c:	1fff48e4 	.word	0x1fff48e4

08000ea0 <SPI_ADC_ReadAllData>:

void SPI_ADC_ReadAllData(uint8_t ADCMode)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	if(ADC_AUTO1 == ADCMode)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00d      	beq.n	8000ecc <SPI_ADC_ReadAllData+0x2c>
	{
		//change operating mode to AUTO1
	}
	else if(ADC_AUTO2 == ADCMode)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <SPI_ADC_ReadAllData+0x28>
	{
		//Add ADC1 after hardware changes
		SPI_ADS7961_AUTO2_MODE(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	2106      	movs	r1, #6
 8000eba:	f000 f8e9 	bl	8001090 <SPI_ADS7961_AUTO2_MODE>
		SPI_ADS7961_AUTO2_MODE(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	2106      	movs	r1, #6
 8000ec2:	f000 f8e5 	bl	8001090 <SPI_ADS7961_AUTO2_MODE>
 8000ec6:	e001      	b.n	8000ecc <SPI_ADC_ReadAllData+0x2c>
	}
	else //manual mode
	{
		//configure manual mode
		SPI_ADC_MANUAL_MODE();
 8000ec8:	f000 f806 	bl	8000ed8 <SPI_ADC_MANUAL_MODE>
	}

	//do not call this right now you can call this when it is in use.
	convert_raw_data_into_current();
 8000ecc:	f7ff ff0c 	bl	8000ce8 <convert_raw_data_into_current>
}
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <SPI_ADC_MANUAL_MODE>:

void SPI_ADC_MANUAL_MODE(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	//ADC_Read_AllChannel(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
	//ADC_Read_AllChannel(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
	ADC_Read_by_Channel(ADS3_Port2,ADS3_Pin,12);//pass Ads cs port , pin and channel
 8000edc:	2002      	movs	r0, #2
 8000ede:	2106      	movs	r1, #6
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	f000 f99b 	bl	800121c <ADC_Read_by_Channel>
}
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ADS7861_MANUAL_MODE_PKT>:

uint16_t ADS7861_MANUAL_MODE_PKT(uint16_t channel) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]

	ADS7961Frame_t transmitPkt;
	transmitPkt.Bit.operating_mode=1;
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f362 1307 	bfi	r3, r2, #4, #4
 8000efa:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.enable_D0_to_D6=0;
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	f36f 03c3 	bfc	r3, #3, #1
 8000f02:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.channel_selection=channel;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	f362 13ca 	bfi	r3, r2, #7, #4
 8000f14:	81bb      	strh	r3, [r7, #12]
	transmitPkt.Bit.input_range=0;
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	f36f 1386 	bfc	r3, #6, #1
 8000f1c:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.device_operation=0;
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
 8000f20:	f36f 1345 	bfc	r3, #5, #1
 8000f24:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.output_mode=0;
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	f36f 1304 	bfc	r3, #4, #1
 8000f2c:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.GPIO_Output=0;
 8000f2e:	7b3b      	ldrb	r3, [r7, #12]
 8000f30:	f36f 0303 	bfc	r3, #0, #4
 8000f34:	733b      	strb	r3, [r7, #12]
	return  transmitPkt.F_Data;
 8000f36:	89bb      	ldrh	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SPI_ADS7961_AUTO2_Init>:
		}
	}
}

void SPI_ADS7961_AUTO2_Init(uint8_t temp_port_num ,uint8_t pin_number)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	XMC_GPIO_PORT_t * temp_ptr;

	if(temp_port_num == 5)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d107      	bne.n	8000f6a <SPI_ADS7961_AUTO2_Init+0x26>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <SPI_ADS7961_AUTO2_Init+0x138>)
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000f5e:	4848      	ldr	r0, [pc, #288]	; (8001080 <SPI_ADS7961_AUTO2_Init+0x13c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	f010 fd49 	bl	80119fa <memset>
 8000f68:	e009      	b.n	8000f7e <SPI_ADS7961_AUTO2_Init+0x3a>
	}
	else if(temp_port_num == 2)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d106      	bne.n	8000f7e <SPI_ADS7961_AUTO2_Init+0x3a>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8000f70:	4b44      	ldr	r3, [pc, #272]	; (8001084 <SPI_ADS7961_AUTO2_Init+0x140>)
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000f74:	4844      	ldr	r0, [pc, #272]	; (8001088 <SPI_ADS7961_AUTO2_Init+0x144>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	f010 fd3e 	bl	80119fa <memset>
	}

	uint8_t SendData[2] = { 0x3C, 0x00 }; //{MODE_CONTROL_AUTO2 >> 8, MODE_CONTROL_AUTO2 && 0xFF};
 8000f7e:	233c      	movs	r3, #60	; 0x3c
 8000f80:	753b      	strb	r3, [r7, #20]
 8000f82:	2300      	movs	r3, #0
 8000f84:	757b      	strb	r3, [r7, #21]
	uint8_t SendData1[2];

	if(temp_port_num == 5)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d104      	bne.n	8000f96 <SPI_ADS7961_AUTO2_Init+0x52>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000f8c:	2393      	movs	r3, #147	; 0x93
 8000f8e:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0xC0;
 8000f90:	23c0      	movs	r3, #192	; 0xc0
 8000f92:	747b      	strb	r3, [r7, #17]
 8000f94:	e006      	b.n	8000fa4 <SPI_ADS7961_AUTO2_Init+0x60>
	}
	else if(temp_port_num == 2)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d103      	bne.n	8000fa4 <SPI_ADS7961_AUTO2_Init+0x60>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000f9c:	2393      	movs	r3, #147	; 0x93
 8000f9e:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	747b      	strb	r3, [r7, #17]
	}
	uint8_t SendData2[2] = {0x00,0x00} ; //{CONTINUE_MODE_PREVIOUS >>8, CONTINUE_MODE_PREVIOUS && 0xFF};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	733b      	strb	r3, [r7, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	737b      	strb	r3, [r7, #13]

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fe21 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fe2c 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc4:	e002      	b.n	8000fcc <SPI_ADS7961_AUTO2_Init+0x88>
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	3301      	adds	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	dcf9      	bgt.n	8000fc6 <SPI_ADS7961_AUTO2_Init+0x82>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 2);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	482d      	ldr	r0, [pc, #180]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f005 fff0 	bl	8006fc0 <SPI_MASTER_Transmit>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fe07 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

    XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fe12 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	e002      	b.n	8001000 <SPI_ADS7961_AUTO2_Init+0xbc>
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	2b09      	cmp	r3, #9
 8001004:	dcf9      	bgt.n	8000ffa <SPI_ADS7961_AUTO2_Init+0xb6>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4820      	ldr	r0, [pc, #128]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 800100c:	4619      	mov	r1, r3
 800100e:	2202      	movs	r2, #2
 8001010:	f005 ffd6 	bl	8006fc0 <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	e002      	b.n	8001020 <SPI_ADS7961_AUTO2_Init+0xdc>
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	3301      	adds	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b09      	cmp	r3, #9
 8001024:	dcf9      	bgt.n	800101a <SPI_ADS7961_AUTO2_Init+0xd6>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fde4 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fdef 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e002      	b.n	8001046 <SPI_ADS7961_AUTO2_Init+0x102>
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	3301      	adds	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	2b09      	cmp	r3, #9
 800104a:	dcf9      	bgt.n	8001040 <SPI_ADS7961_AUTO2_Init+0xfc>
	// for CONTINUE MODE PREVIOUS
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData2, 2);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 8001052:	4619      	mov	r1, r3
 8001054:	2202      	movs	r2, #2
 8001056:	f005 ffb3 	bl	8006fc0 <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	e002      	b.n	8001066 <SPI_ADS7961_AUTO2_Init+0x122>
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3301      	adds	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b09      	cmp	r3, #9
 800106a:	dcf9      	bgt.n	8001060 <SPI_ADS7961_AUTO2_Init+0x11c>

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fdc1 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
}
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	48028500 	.word	0x48028500
 8001080:	1fff4ccc 	.word	0x1fff4ccc
 8001084:	48028200 	.word	0x48028200
 8001088:	1fff4d0c 	.word	0x1fff4d0c
 800108c:	1ffe89ac 	.word	0x1ffe89ac

08001090 <SPI_ADS7961_AUTO2_MODE>:

//
void SPI_ADS7961_AUTO2_MODE(uint8_t temp_port_num, uint8_t pin_number)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t loop = 16;
 80010a0:	2310      	movs	r3, #16
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ReadData[2];
//	if(flag==false)
//	{
	SPI_ADS7961_AUTO2_Init(temp_port_num, pin_number);
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff ff49 	bl	8000f44 <SPI_ADS7961_AUTO2_Init>
	flag = true;
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <SPI_ADS7961_AUTO2_MODE+0x16c>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
//	}

	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d102      	bne.n	80010c4 <SPI_ADS7961_AUTO2_MODE+0x34>
	{
		temp_ptr = XMC_GPIO_PORT5;
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <SPI_ADS7961_AUTO2_MODE+0x170>)
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	e007      	b.n	80010d4 <SPI_ADS7961_AUTO2_MODE+0x44>
	}
	else if (temp_port_num == 2)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d104      	bne.n	80010d4 <SPI_ADS7961_AUTO2_MODE+0x44>
	{
		temp_ptr = XMC_GPIO_PORT2;
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <SPI_ADS7961_AUTO2_MODE+0x174>)
 80010cc:	623b      	str	r3, [r7, #32]
		loop = 13;
 80010ce:	230d      	movs	r3, #13
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(adc2_array_counter > 49)
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <SPI_ADS7961_AUTO2_MODE+0x178>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b31      	cmp	r3, #49	; 0x31
 80010da:	d902      	bls.n	80010e2 <SPI_ADS7961_AUTO2_MODE+0x52>
	{
		adc2_array_counter = 0;
 80010dc:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <SPI_ADS7961_AUTO2_MODE+0x178>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	}

	if(adc3_array_counter > 49)
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <SPI_ADS7961_AUTO2_MODE+0x17c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b31      	cmp	r3, #49	; 0x31
 80010e8:	d902      	bls.n	80010f0 <SPI_ADS7961_AUTO2_MODE+0x60>
	{
		adc3_array_counter = 0;
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <SPI_ADS7961_AUTO2_MODE+0x17c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	e07b      	b.n	80011ee <SPI_ADS7961_AUTO2_MODE+0x15e>
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	76fb      	strb	r3, [r7, #27]
 80010fa:	e05d      	b.n	80011b8 <SPI_ADS7961_AUTO2_MODE+0x128>
		{
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	6a38      	ldr	r0, [r7, #32]
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd79 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
			//for (int i = 0; i > 9; i++);

			XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd84 	bl	8000c18 <XMC_GPIO_SetOutputLow>
			for (int i = 0; i > 2; i++);
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e002      	b.n	800111c <SPI_ADS7961_AUTO2_MODE+0x8c>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b02      	cmp	r3, #2
 8001120:	dcf9      	bgt.n	8001116 <SPI_ADS7961_AUTO2_MODE+0x86>
			SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	483a      	ldr	r0, [pc, #232]	; (8001210 <SPI_ADS7961_AUTO2_MODE+0x180>)
 8001128:	4619      	mov	r1, r3
 800112a:	2202      	movs	r2, #2
 800112c:	f005 ff62 	bl	8006ff4 <SPI_MASTER_Receive>
			for (int i = 0; i > 2; i++);
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e002      	b.n	800113c <SPI_ADS7961_AUTO2_MODE+0xac>
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b02      	cmp	r3, #2
 8001140:	dcf9      	bgt.n	8001136 <SPI_ADS7961_AUTO2_MODE+0xa6>
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd56 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

			if (temp_port_num == 5)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d116      	bne.n	8001180 <SPI_ADS7961_AUTO2_MODE+0xf0>
			{
				ADS2_receive_data[channel_count][adc2_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <SPI_ADS7961_AUTO2_MODE+0x178>)
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	4614      	mov	r4, r2
 800115a:	7b3a      	ldrb	r2, [r7, #12]
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	7b7a      	ldrb	r2, [r7, #13]
 8001162:	0912      	lsrs	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	430a      	orrs	r2, r1
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	b2d0      	uxtb	r0, r2
 800116e:	4a29      	ldr	r2, [pc, #164]	; (8001214 <SPI_ADS7961_AUTO2_MODE+0x184>)
 8001170:	2132      	movs	r1, #50	; 0x32
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4423      	add	r3, r4
 8001178:	4413      	add	r3, r2
 800117a:	4602      	mov	r2, r0
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e018      	b.n	80011b2 <SPI_ADS7961_AUTO2_MODE+0x122>
//				ADS2_recive_channel[channel_count] = ((ReadData[0] & 0xF0) >> 4); //uncomment channel for debugging

//				ADS2_avg_receive_data[channel_count] += ADS2_receive_data[channel_count];
			}
			else if (temp_port_num == 2)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d115      	bne.n	80011b2 <SPI_ADS7961_AUTO2_MODE+0x122>
			{
				ADS3_receive_data[channel_count][adc3_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 8001186:	7efb      	ldrb	r3, [r7, #27]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SPI_ADS7961_AUTO2_MODE+0x17c>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4614      	mov	r4, r2
 800118e:	7b3a      	ldrb	r2, [r7, #12]
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	7b7a      	ldrb	r2, [r7, #13]
 8001196:	0912      	lsrs	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	430a      	orrs	r2, r1
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	b2d0      	uxtb	r0, r2
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <SPI_ADS7961_AUTO2_MODE+0x188>)
 80011a4:	2132      	movs	r1, #50	; 0x32
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	4423      	add	r3, r4
 80011ac:	4413      	add	r3, r2
 80011ae:	4602      	mov	r2, r0
 80011b0:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80011b2:	7efb      	ldrb	r3, [r7, #27]
 80011b4:	3301      	adds	r3, #1
 80011b6:	76fb      	strb	r3, [r7, #27]
 80011b8:	7efa      	ldrb	r2, [r7, #27]
 80011ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011be:	429a      	cmp	r2, r3
 80011c0:	d39c      	bcc.n	80010fc <SPI_ADS7961_AUTO2_MODE+0x6c>

//				ADS3_avg_receive_data[channel_count] += ADS3_receive_data[channel_count];
			}
		}

		if (temp_port_num == 5)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d106      	bne.n	80011d6 <SPI_ADS7961_AUTO2_MODE+0x146>
		{
			adc2_array_counter++;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SPI_ADS7961_AUTO2_MODE+0x178>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <SPI_ADS7961_AUTO2_MODE+0x178>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e008      	b.n	80011e8 <SPI_ADS7961_AUTO2_MODE+0x158>
		}
		else if (temp_port_num == 2)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d105      	bne.n	80011e8 <SPI_ADS7961_AUTO2_MODE+0x158>
		{
			adc3_array_counter++;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <SPI_ADS7961_AUTO2_MODE+0x17c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <SPI_ADS7961_AUTO2_MODE+0x17c>)
 80011e6:	701a      	strb	r2, [r3, #0]
	{
		adc3_array_counter = 0;
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	dd80      	ble.n	80010f6 <SPI_ADS7961_AUTO2_MODE+0x66>
		else if (temp_port_num == 2)
		{
			adc3_array_counter++;
		}
	}
}
 80011f4:	372c      	adds	r7, #44	; 0x2c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	1fff439c 	.word	0x1fff439c
 8001200:	48028500 	.word	0x48028500
 8001204:	48028200 	.word	0x48028200
 8001208:	1fff439d 	.word	0x1fff439d
 800120c:	1fff439e 	.word	0x1fff439e
 8001210:	1ffe89ac 	.word	0x1ffe89ac
 8001214:	1fff4de0 	.word	0x1fff4de0
 8001218:	1fff49ac 	.word	0x1fff49ac

0800121c <ADC_Read_by_Channel>:

void ADC_Read_by_Channel(uint8_t temp_port_num, uint8_t pin_number, uint8_t channel)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	460b      	mov	r3, r1
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d107      	bne.n	8001244 <ADC_Read_by_Channel+0x28>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8001234:	4b51      	ldr	r3, [pc, #324]	; (800137c <ADC_Read_by_Channel+0x160>)
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
		ADS2_avg_receive_data[channel] = 0;
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	4a51      	ldr	r2, [pc, #324]	; (8001380 <ADC_Read_by_Channel+0x164>)
 800123c:	2100      	movs	r1, #0
 800123e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001242:	e009      	b.n	8001258 <ADC_Read_by_Channel+0x3c>
	}
	else if (temp_port_num == 2)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d106      	bne.n	8001258 <ADC_Read_by_Channel+0x3c>
	{
		temp_ptr = XMC_GPIO_PORT2;
 800124a:	4b4c      	ldr	r3, [pc, #304]	; (800137c <ADC_Read_by_Channel+0x160>)
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
		ADS3_avg_receive_data[channel] = 0;
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <ADC_Read_by_Channel+0x168>)
 8001252:	2100      	movs	r1, #0
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
 800125c:	e087      	b.n	800136e <ADC_Read_by_Channel+0x152>
	{
		int pkt = ADS7861_MANUAL_MODE_PKT(channel);
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe40 	bl	8000ee8 <ADS7861_MANUAL_MODE_PKT>
 8001268:	4603      	mov	r3, r0
 800126a:	613b      	str	r3, [r7, #16]
		uint8_t SendData[2] = { (pkt >> 8), (pkt & 0xFF) };
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	121b      	asrs	r3, r3, #8
 8001270:	b2db      	uxtb	r3, r3
 8001272:	733b      	strb	r3, [r7, #12]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	737b      	strb	r3, [r7, #13]
		uint8_t ReadData[2];
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fcba 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fcc5 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 16; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001292:	e002      	b.n	800129a <ADC_Read_by_Channel+0x7e>
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	3301      	adds	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b10      	cmp	r3, #16
 800129e:	dcf9      	bgt.n	8001294 <ADC_Read_by_Channel+0x78>
			;
		SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4838      	ldr	r0, [pc, #224]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 80012a6:	4619      	mov	r1, r3
 80012a8:	2202      	movs	r2, #2
 80012aa:	f005 fe89 	bl	8006fc0 <SPI_MASTER_Transmit>
		for (int i = 0; i > 9; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b2:	e002      	b.n	80012ba <ADC_Read_by_Channel+0x9e>
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	3301      	adds	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2b09      	cmp	r3, #9
 80012be:	dcf9      	bgt.n	80012b4 <ADC_Read_by_Channel+0x98>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc97 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 2; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	e002      	b.n	80012d6 <ADC_Read_by_Channel+0xba>
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dcf9      	bgt.n	80012d0 <ADC_Read_by_Channel+0xb4>
			;
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc99 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	e002      	b.n	80012f2 <ADC_Read_by_Channel+0xd6>
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	3301      	adds	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	dcf9      	bgt.n	80012ec <ADC_Read_by_Channel+0xd0>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 80012fe:	4619      	mov	r1, r3
 8001300:	2202      	movs	r2, #2
 8001302:	f005 fe77 	bl	8006ff4 <SPI_MASTER_Receive>
		for (int i = 0; i > 2; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e002      	b.n	8001312 <ADC_Read_by_Channel+0xf6>
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	3301      	adds	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	dcf9      	bgt.n	800130c <ADC_Read_by_Channel+0xf0>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc6b 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 9; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	e002      	b.n	800132e <ADC_Read_by_Channel+0x112>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b09      	cmp	r3, #9
 8001332:	dcf9      	bgt.n	8001328 <ADC_Read_by_Channel+0x10c>
			;

		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc6d 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e002      	b.n	800134a <ADC_Read_by_Channel+0x12e>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b09      	cmp	r3, #9
 800134e:	dcf9      	bgt.n	8001344 <ADC_Read_by_Channel+0x128>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 8001356:	4619      	mov	r1, r3
 8001358:	2202      	movs	r2, #2
 800135a:	f005 fe4b 	bl	8006ff4 <SPI_MASTER_Receive>

		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc48 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
	{
		temp_ptr = XMC_GPIO_PORT2;
		ADS3_avg_receive_data[channel] = 0;
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	3301      	adds	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	2b31      	cmp	r3, #49	; 0x31
 8001372:	f77f af74 	ble.w	800125e <ADC_Read_by_Channel+0x42>
//			ADS3_recive_channel[channel] = ((ReadData[0] & 0xF0) >> 4);

//			ADS3_avg_receive_data[channel] += ADS3_receive_data[channel];
		}
	}
}
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	48028200 	.word	0x48028200
 8001380:	1fff4ccc 	.word	0x1fff4ccc
 8001384:	1fff4d0c 	.word	0x1fff4d0c
 8001388:	1ffe89ac 	.word	0x1ffe89ac

0800138c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2201      	movs	r2, #1
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013be:	409a      	lsls	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
}
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff ffd2 	bl	800138c <XMC_GPIO_SetOutputHigh>
}
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop

080013f0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7c1b      	ldrb	r3, [r3, #16]
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff ffd2 	bl	80013ac <XMC_GPIO_SetOutputLow>
}
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop

08001410 <State_1>:

/*instrument_clustor_indicators_t *instrument_clustor_indicators = &CAN_MSG_DB[CAN_18FFB632];*/


void State_1(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_1_OUT)
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <State_1+0x50>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d00b      	beq.n	8001434 <State_1+0x24>
	{
		/* ignition 1 on state */
		is_drive_mode = true;
 800141c:	4b11      	ldr	r3, [pc, #68]	; (8001464 <State_1+0x54>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]

		ignition1_d_on();
 8001422:	f000 f821 	bl	8001468 <ignition1_d_on>
		faciaaswitches();
 8001426:	f000 f971 	bl	800170c <faciaaswitches>
		Can_Outputs_State1();
 800142a:	f000 f89d 	bl	8001568 <Can_Outputs_State1>
		cluster_indicators_Out();
 800142e:	f000 f8a3 	bl	8001578 <cluster_indicators_Out>
 8001432:	e00d      	b.n	8001450 <State_1+0x40>
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 8001434:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <State_1+0x50>)
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	f083 0301 	eor.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <State_1+0x40>
	{
		is_drive_mode = false;
 8001442:	4b08      	ldr	r3, [pc, #32]	; (8001464 <State_1+0x54>)
 8001444:	2200      	movs	r2, #0
 8001446:	701a      	strb	r2, [r3, #0]

		/* ignition 1 off state */
		ignition1_d_off();
 8001448:	f000 f84e 	bl	80014e8 <ignition1_d_off>
		all_direct_controlled_relay_off();
 800144c:	f000 f884 	bl	8001558 <all_direct_controlled_relay_off>
	}

	//check battery voltage and turn on/off DC to DC converter
	dc_dc_state_update();
 8001450:	f000 f96e 	bl	8001730 <dc_dc_state_update>

	VcuOut_IoExp_U24();
 8001454:	f000 f904 	bl	8001660 <VcuOut_IoExp_U24>
	VcuOut_IoExp_U25();
 8001458:	f000 f952 	bl	8001700 <VcuOut_IoExp_U25>

}
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	1fff48cc 	.word	0x1fff48cc
 8001464:	1fff4796 	.word	0x1fff4796

08001468 <ignition1_d_on>:
void ignition1_d_on()
 {
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
	uart_debugg("in ig1_d_on");
 800146c:	4812      	ldr	r0, [pc, #72]	; (80014b8 <ignition1_d_on+0x50>)
 800146e:	f00e fd95 	bl	800ff9c <uart_debugg>
	CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x0c;

	CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x48;
	CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x71;*/

 	DIGITAL_IO_SetOutputHigh(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 8001472:	4812      	ldr	r0, [pc, #72]	; (80014bc <ignition1_d_on+0x54>)
 8001474:	f7ff ffac 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INFOTAINMENT_PWR_OUT_D); // check infotainment port & pin
 8001478:	4811      	ldr	r0, [pc, #68]	; (80014c0 <ignition1_d_on+0x58>)
 800147a:	f7ff ffa9 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INSTRUMENT_CON_PWR_OUT_D);
 800147e:	4811      	ldr	r0, [pc, #68]	; (80014c4 <ignition1_d_on+0x5c>)
 8001480:	f7ff ffa6 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&WIPER_PWR_OUT_D);
 8001484:	4810      	ldr	r0, [pc, #64]	; (80014c8 <ignition1_d_on+0x60>)
 8001486:	f7ff ffa3 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D);
 800148a:	4810      	ldr	r0, [pc, #64]	; (80014cc <ignition1_d_on+0x64>)
 800148c:	f7ff ffa0 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&PWR_WINDOW_OUT_D);
 8001490:	480f      	ldr	r0, [pc, #60]	; (80014d0 <ignition1_d_on+0x68>)
 8001492:	f7ff ff9d 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 8001496:	480f      	ldr	r0, [pc, #60]	; (80014d4 <ignition1_d_on+0x6c>)
 8001498:	f7ff ff9a 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>

 	//IOExp_SetPIN_LOW(&I2C_MASTER_1, 0x40, 0, 0);
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED1_OUT_D); /// turn on HVAC(CPIS)
 800149c:	480e      	ldr	r0, [pc, #56]	; (80014d8 <ignition1_d_on+0x70>)
 800149e:	f00e fe71 	bl	8010184 <digital_io_setoutputhigh>
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED2_OUT_D); /// turn on COMPRESSOR PWR.
 80014a2:	480e      	ldr	r0, [pc, #56]	; (80014dc <ignition1_d_on+0x74>)
 80014a4:	f00e fe6e 	bl	8010184 <digital_io_setoutputhigh>

 	//AUX_EFUSE_3_OUT_D output is connected to 48V battery input
 	digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D); //48V battery
 80014a8:	480d      	ldr	r0, [pc, #52]	; (80014e0 <ignition1_d_on+0x78>)
 80014aa:	f00e fe6b 	bl	8010184 <digital_io_setoutputhigh>

 	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 	/*  active low */
 	//digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);

 	uart_debugg("exit ig1_d_on");
 80014ae:	480d      	ldr	r0, [pc, #52]	; (80014e4 <ignition1_d_on+0x7c>)
 80014b0:	f00e fd74 	bl	800ff9c <uart_debugg>
 }
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	08013268 	.word	0x08013268
 80014bc:	08013754 	.word	0x08013754
 80014c0:	08013650 	.word	0x08013650
 80014c4:	08013524 	.word	0x08013524
 80014c8:	08013614 	.word	0x08013614
 80014cc:	080134d4 	.word	0x080134d4
 80014d0:	080137cc 	.word	0x080137cc
 80014d4:	08013858 	.word	0x08013858
 80014d8:	1fff42b4 	.word	0x1fff42b4
 80014dc:	1fff42b8 	.word	0x1fff42b8
 80014e0:	1fff42bc 	.word	0x1fff42bc
 80014e4:	08013274 	.word	0x08013274

080014e8 <ignition1_d_off>:

 void ignition1_d_off()
 {
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
	 /*CAN_MSG_DB[CAN_18FF0921].CAN_Data[5] = 0x00;
	  CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x00;*/
//for(volatile int i = 0; i<0xffff*80; i++);
	  /*CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x38;
	  CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x18;*/
	 uart_debugg("in ig1_d_off");
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <ignition1_d_off+0x48>)
 80014ee:	f00e fd55 	bl	800ff9c <uart_debugg>
 	DIGITAL_IO_SetOutputLow(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 80014f2:	4810      	ldr	r0, [pc, #64]	; (8001534 <ignition1_d_off+0x4c>)
 80014f4:	f7ff ff7c 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INFOTAINMENT_PWR_OUT_D);
 80014f8:	480f      	ldr	r0, [pc, #60]	; (8001538 <ignition1_d_off+0x50>)
 80014fa:	f7ff ff79 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INSTRUMENT_CON_PWR_OUT_D);
 80014fe:	480f      	ldr	r0, [pc, #60]	; (800153c <ignition1_d_off+0x54>)
 8001500:	f7ff ff76 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&WIPER_PWR_OUT_D);
 8001504:	480e      	ldr	r0, [pc, #56]	; (8001540 <ignition1_d_off+0x58>)
 8001506:	f7ff ff73 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);
 800150a:	480e      	ldr	r0, [pc, #56]	; (8001544 <ignition1_d_off+0x5c>)
 800150c:	f7ff ff70 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
 	DIGITAL_IO_SetOutputLow(&PWR_WINDOW_OUT_D);
 8001510:	480d      	ldr	r0, [pc, #52]	; (8001548 <ignition1_d_off+0x60>)
 8001512:	f7ff ff6d 	bl	80013f0 <DIGITAL_IO_SetOutputLow>

 	digital_io_setoutputlow(&AC_BLOWER_SPEED1_OUT_D); /// turn off HVAC(CPIS)
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <ignition1_d_off+0x64>)
 8001518:	f00e fe04 	bl	8010124 <digital_io_setoutputlow>
 	digital_io_setoutputlow(&AC_BLOWER_SPEED2_OUT_D); /// turn off COMPRESSOR PWR.
 800151c:	480c      	ldr	r0, [pc, #48]	; (8001550 <ignition1_d_off+0x68>)
 800151e:	f00e fe01 	bl	8010124 <digital_io_setoutputlow>


 	/* active low */
 	digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 8001522:	480c      	ldr	r0, [pc, #48]	; (8001554 <ignition1_d_off+0x6c>)
 8001524:	f00e fdfe 	bl	8010124 <digital_io_setoutputlow>

 	//digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply

 	uart_debugg("in ig1_d_off");
 8001528:	4801      	ldr	r0, [pc, #4]	; (8001530 <ignition1_d_off+0x48>)
 800152a:	f00e fd37 	bl	800ff9c <uart_debugg>

 }
 800152e:	bd80      	pop	{r7, pc}
 8001530:	08013284 	.word	0x08013284
 8001534:	08013754 	.word	0x08013754
 8001538:	08013650 	.word	0x08013650
 800153c:	08013524 	.word	0x08013524
 8001540:	08013614 	.word	0x08013614
 8001544:	08013510 	.word	0x08013510
 8001548:	080137cc 	.word	0x080137cc
 800154c:	1fff42b4 	.word	0x1fff42b4
 8001550:	1fff42b8 	.word	0x1fff42b8
 8001554:	1fff42c0 	.word	0x1fff42c0

08001558 <all_direct_controlled_relay_off>:

 void all_direct_controlled_relay_off(void)
 {
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
 800155c:	4801      	ldr	r0, [pc, #4]	; (8001564 <all_direct_controlled_relay_off+0xc>)
 800155e:	f7ff ff47 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 }
 8001562:	bd80      	pop	{r7, pc}
 8001564:	08013560 	.word	0x08013560

08001568 <Can_Outputs_State1>:

  void Can_Outputs_State1(void)
 {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
 	CAN_OUTPUT_COMPRESSOR();
 800156c:	f009 fa1e 	bl	800a9ac <CAN_OUTPUT_COMPRESSOR>
 	CAN_OUTPUT_CLUSTER();
 8001570:	f008 feb8 	bl	800a2e4 <CAN_OUTPUT_CLUSTER>
 	//CAN_OUTPUT_EPS();
 }
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop

08001578 <cluster_indicators_Out>:

 void cluster_indicators_Out(void)
 {
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
	instrument_clustor_indicators-> left_indicator = Instrument_Cluster_OUT.set_left_indicator;
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <cluster_indicators_Out+0xd8>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b34      	ldr	r3, [pc, #208]	; (8001654 <cluster_indicators_Out+0xdc>)
 8001582:	7999      	ldrb	r1, [r3, #6]
 8001584:	78d3      	ldrb	r3, [r2, #3]
 8001586:	f361 0300 	bfi	r3, r1, #0, #1
 800158a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> right_indicator = Instrument_Cluster_OUT.set_right_indicator;
 800158c:	4b30      	ldr	r3, [pc, #192]	; (8001650 <cluster_indicators_Out+0xd8>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b30      	ldr	r3, [pc, #192]	; (8001654 <cluster_indicators_Out+0xdc>)
 8001592:	79d9      	ldrb	r1, [r3, #7]
 8001594:	78d3      	ldrb	r3, [r2, #3]
 8001596:	f361 0341 	bfi	r3, r1, #1, #1
 800159a:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> low_beam = Instrument_Cluster_OUT.set_low_beam;
 800159c:	4b2c      	ldr	r3, [pc, #176]	; (8001650 <cluster_indicators_Out+0xd8>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015a2:	7a19      	ldrb	r1, [r3, #8]
 80015a4:	78d3      	ldrb	r3, [r2, #3]
 80015a6:	f361 0382 	bfi	r3, r1, #2, #1
 80015aa:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> high_beam = Instrument_Cluster_OUT.set_high_beam;
 80015ac:	4b28      	ldr	r3, [pc, #160]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	4b28      	ldr	r3, [pc, #160]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015b2:	7a59      	ldrb	r1, [r3, #9]
 80015b4:	78d3      	ldrb	r3, [r2, #3]
 80015b6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015ba:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> brake_fluid_flow = Instrument_Cluster_OUT.set_brake_oil;
 80015bc:	4b24      	ldr	r3, [pc, #144]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b24      	ldr	r3, [pc, #144]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015c2:	7a99      	ldrb	r1, [r3, #10]
 80015c4:	78d3      	ldrb	r3, [r2, #3]
 80015c6:	f361 1304 	bfi	r3, r1, #4, #1
 80015ca:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> eps_failure = Instrument_Cluster_OUT.eps_status;///////
 80015cc:	4b20      	ldr	r3, [pc, #128]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	4b20      	ldr	r3, [pc, #128]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015d2:	7b19      	ldrb	r1, [r3, #12]
 80015d4:	78d3      	ldrb	r3, [r2, #3]
 80015d6:	f361 1345 	bfi	r3, r1, #5, #1
 80015da:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> aux_battery_low = Instrument_Cluster_OUT.aux_vtg_critical;
 80015dc:	4b1c      	ldr	r3, [pc, #112]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4b1c      	ldr	r3, [pc, #112]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015e2:	7ad9      	ldrb	r1, [r3, #11]
 80015e4:	78d3      	ldrb	r3, [r2, #3]
 80015e6:	f361 1386 	bfi	r3, r1, #6, #1
 80015ea:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> battery_high_temp = Instrument_Cluster_OUT.battery_temp_exceeded;
 80015ec:	4b18      	ldr	r3, [pc, #96]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <cluster_indicators_Out+0xdc>)
 80015f2:	7b59      	ldrb	r1, [r3, #13]
 80015f4:	78d3      	ldrb	r3, [r2, #3]
 80015f6:	f361 13c7 	bfi	r3, r1, #7, #1
 80015fa:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> charging_on = Instrument_Cluster_OUT.charging_connected;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <cluster_indicators_Out+0xd8>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b14      	ldr	r3, [pc, #80]	; (8001654 <cluster_indicators_Out+0xdc>)
 8001602:	7b99      	ldrb	r1, [r3, #14]
 8001604:	7953      	ldrb	r3, [r2, #5]
 8001606:	f361 0300 	bfi	r3, r1, #0, #1
 800160a:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> generic_alarm;/////////
  	instrument_clustor_indicators-> regen = Instrument_Cluster_OUT.regen_enabled;///////////
 800160c:	4b10      	ldr	r3, [pc, #64]	; (8001650 <cluster_indicators_Out+0xd8>)
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <cluster_indicators_Out+0xdc>)
 8001612:	7bd9      	ldrb	r1, [r3, #15]
 8001614:	7953      	ldrb	r3, [r2, #5]
 8001616:	f361 0382 	bfi	r3, r1, #2, #1
 800161a:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;
 800161c:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <cluster_indicators_Out+0xd8>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <cluster_indicators_Out+0xe0>)
 8001622:	7a1b      	ldrb	r3, [r3, #8]
 8001624:	f083 0301 	eor.w	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	b2d9      	uxtb	r1, r3
 8001630:	7953      	ldrb	r3, [r2, #5]
 8001632:	f361 03c3 	bfi	r3, r1, #3, #1
 8001636:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> seat_belt = Seat_Belt_OUT.seat_occupied;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <cluster_indicators_Out+0xd8>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b07      	ldr	r3, [pc, #28]	; (800165c <cluster_indicators_Out+0xe4>)
 800163e:	7899      	ldrb	r1, [r3, #2]
 8001640:	7953      	ldrb	r3, [r2, #5]
 8001642:	f361 1304 	bfi	r3, r1, #4, #1
 8001646:	7153      	strb	r3, [r2, #5]
  }
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	1ffe8808 	.word	0x1ffe8808
 8001654:	1fff4874 	.word	0x1fff4874
 8001658:	1fff4844 	.word	0x1fff4844
 800165c:	1fff4828 	.word	0x1fff4828

08001660 <VcuOut_IoExp_U24>:

 void VcuOut_IoExp_U24(void)
 {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
	 uart_debugg("in U24");
 8001664:	481e      	ldr	r0, [pc, #120]	; (80016e0 <VcuOut_IoExp_U24+0x80>)
 8001666:	f00e fc99 	bl	800ff9c <uart_debugg>
	 if(Relay_Control_Switch_OUT.low_beam_OUT)
 800166a:	4b1e      	ldr	r3, [pc, #120]	; (80016e4 <VcuOut_IoExp_U24+0x84>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d003      	beq.n	800167a <VcuOut_IoExp_U24+0x1a>
	 {
		 DIGITAL_IO_SetOutputHigh(&LOW_BEAM_OUT_D);
 8001672:	481d      	ldr	r0, [pc, #116]	; (80016e8 <VcuOut_IoExp_U24+0x88>)
 8001674:	f7ff feac 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 8001678:	e002      	b.n	8001680 <VcuOut_IoExp_U24+0x20>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 1;
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LOW_BEAM_OUT_D);
 800167a:	481b      	ldr	r0, [pc, #108]	; (80016e8 <VcuOut_IoExp_U24+0x88>)
 800167c:	f7ff feb8 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 0;
	 }

	 if(Relay_Control_Switch_OUT.high_beam_OUT)
 8001680:	4b18      	ldr	r3, [pc, #96]	; (80016e4 <VcuOut_IoExp_U24+0x84>)
 8001682:	785b      	ldrb	r3, [r3, #1]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d003      	beq.n	8001690 <VcuOut_IoExp_U24+0x30>
	 {
		 DIGITAL_IO_SetOutputHigh(&HIGH_BEAM_OUT_D);
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <VcuOut_IoExp_U24+0x8c>)
 800168a:	f7ff fea1 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 800168e:	e002      	b.n	8001696 <VcuOut_IoExp_U24+0x36>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 8001690:	4816      	ldr	r0, [pc, #88]	; (80016ec <VcuOut_IoExp_U24+0x8c>)
 8001692:	f7ff fead 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 8001696:	4b13      	ldr	r3, [pc, #76]	; (80016e4 <VcuOut_IoExp_U24+0x84>)
 8001698:	789b      	ldrb	r3, [r3, #2]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d003      	beq.n	80016a6 <VcuOut_IoExp_U24+0x46>
	 {
		 DIGITAL_IO_SetOutputHigh(&POS_OUT_D);
 800169e:	4814      	ldr	r0, [pc, #80]	; (80016f0 <VcuOut_IoExp_U24+0x90>)
 80016a0:	f7ff fe96 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 80016a4:	e002      	b.n	80016ac <VcuOut_IoExp_U24+0x4c>
		 //digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&POS_OUT_D);
 80016a6:	4812      	ldr	r0, [pc, #72]	; (80016f0 <VcuOut_IoExp_U24+0x90>)
 80016a8:	f7ff fea2 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
		// digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
	 }

	 if(Relay_Control_Switch_OUT.left_indicator_OUT)
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <VcuOut_IoExp_U24+0x84>)
 80016ae:	78db      	ldrb	r3, [r3, #3]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <VcuOut_IoExp_U24+0x5c>
	 {
		 DIGITAL_IO_SetOutputHigh(&LEFT_INDICATOR_OUT_D);
 80016b4:	480f      	ldr	r0, [pc, #60]	; (80016f4 <VcuOut_IoExp_U24+0x94>)
 80016b6:	f7ff fe8b 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 80016ba:	e002      	b.n	80016c2 <VcuOut_IoExp_U24+0x62>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LEFT_INDICATOR_OUT_D);
 80016bc:	480d      	ldr	r0, [pc, #52]	; (80016f4 <VcuOut_IoExp_U24+0x94>)
 80016be:	f7ff fe97 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.right_indicator_OUT)
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <VcuOut_IoExp_U24+0x84>)
 80016c4:	791b      	ldrb	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <VcuOut_IoExp_U24+0x72>
	 {
		 DIGITAL_IO_SetOutputHigh(&RIGHT_INDICATOR_OUT_D);
 80016ca:	480b      	ldr	r0, [pc, #44]	; (80016f8 <VcuOut_IoExp_U24+0x98>)
 80016cc:	f7ff fe80 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 80016d0:	e002      	b.n	80016d8 <VcuOut_IoExp_U24+0x78>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&RIGHT_INDICATOR_OUT_D);
 80016d2:	4809      	ldr	r0, [pc, #36]	; (80016f8 <VcuOut_IoExp_U24+0x98>)
 80016d4:	f7ff fe8c 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 uart_debugg("exit U24");
 80016d8:	4808      	ldr	r0, [pc, #32]	; (80016fc <VcuOut_IoExp_U24+0x9c>)
 80016da:	f00e fc5f 	bl	800ff9c <uart_debugg>
 }
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	08013294 	.word	0x08013294
 80016e4:	1fff47b0 	.word	0x1fff47b0
 80016e8:	080136f0 	.word	0x080136f0
 80016ec:	080136dc 	.word	0x080136dc
 80016f0:	080135d8 	.word	0x080135d8
 80016f4:	080137f4 	.word	0x080137f4
 80016f8:	080136c8 	.word	0x080136c8
 80016fc:	0801329c 	.word	0x0801329c

08001700 <VcuOut_IoExp_U25>:

 void VcuOut_IoExp_U25(void)
  {
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
 	 else
 	 {
 		// DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 	 }

 }
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <faciaaswitches>:
 {

 }

 void faciaaswitches(void)
 {
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <faciaaswitches+0x1c>)
 8001712:	789b      	ldrb	r3, [r3, #2]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <faciaaswitches+0x14>
	{
		digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <faciaaswitches+0x20>)
 800171a:	f00e fd33 	bl	8010184 <digital_io_setoutputhigh>
 800171e:	e002      	b.n	8001726 <faciaaswitches+0x1a>
	}
	else
	{
		digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <faciaaswitches+0x20>)
 8001722:	f00e fcff 	bl	8010124 <digital_io_setoutputlow>
	}

 }
 8001726:	bd80      	pop	{r7, pc}
 8001728:	1fff47b0 	.word	0x1fff47b0
 800172c:	1fff42c0 	.word	0x1fff42c0

08001730 <dc_dc_state_update>:

//check 12V battery voltage, if less than 12.5V then start DC to DC converter and 48V battery and if greater than 13.5 then turn off DC to DC converter and 48V battery
//only in ignition off mode as in ignition on mode DC to DC and 48V battery is always ON.
//dc_dc_started : to check if DC to DC converter is already on or not
void dc_dc_state_update(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	static bool dc_dc_started = false;

	DROPPED_IN_12_volt(); //update voltage value
 8001734:	f7ff fa84 	bl	8000c40 <DROPPED_IN_12_volt>

	//if ignition 1 is on
	if (Vcu_OutPuts.IGNITION_1_OUT)
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <dc_dc_state_update+0x48>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d00c      	beq.n	800175a <dc_dc_state_update+0x2a>
	{
		seconds_elapsed = 0;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <dc_dc_state_update+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	801a      	strh	r2, [r3, #0]
		//if timer is on then stop the timer
		if (TIMER_GetTimerStatus(&TIMER_2))
 8001746:	480e      	ldr	r0, [pc, #56]	; (8001780 <dc_dc_state_update+0x50>)
 8001748:	f004 fe14 	bl	8006374 <TIMER_GetTimerStatus>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d010      	beq.n	8001774 <dc_dc_state_update+0x44>
		{
			TIMER_Stop(&TIMER_2);
 8001752:	480b      	ldr	r0, [pc, #44]	; (8001780 <dc_dc_state_update+0x50>)
 8001754:	f004 fde0 	bl	8006318 <TIMER_Stop>
 8001758:	e00c      	b.n	8001774 <dc_dc_state_update+0x44>
		}
	}
	//if ignition 1 is off
	else if (!(Vcu_OutPuts.IGNITION_1_OUT))
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <dc_dc_state_update+0x48>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	f083 0301 	eor.w	r3, r3, #1
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <dc_dc_state_update+0x44>
//			DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D);
//		}

		/*---------------ADDED FOR TESTING----------------*/
//		AUX_EFUSE_3_OUT_D output is connected to 48V battery input
		digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D); //48V battery
 8001768:	4806      	ldr	r0, [pc, #24]	; (8001784 <dc_dc_state_update+0x54>)
 800176a:	f00e fd0b 	bl	8010184 <digital_io_setoutputhigh>
		//		DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D); //FOR TRIPHASE DC TO DC converter
		DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D); //for Madhura-MPT DC TO DC converter
 800176e:	4806      	ldr	r0, [pc, #24]	; (8001788 <dc_dc_state_update+0x58>)
 8001770:	f7ff fe2e 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
//		dc_dc_started = true;
	}
}
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	1fff48cc 	.word	0x1fff48cc
 800177c:	1fff4794 	.word	0x1fff4794
 8001780:	1ffe88e0 	.word	0x1ffe88e0
 8001784:	1fff42bc 	.word	0x1fff42bc
 8001788:	080134d4 	.word	0x080134d4

0800178c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	2201      	movs	r2, #1
 800179c:	409a      	lsls	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	605a      	str	r2, [r3, #4]
}
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	460b      	mov	r3, r1
 80017b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017be:	409a      	lsls	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	605a      	str	r2, [r3, #4]
}
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop

080017d0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	7c1b      	ldrb	r3, [r3, #16]
 80017e0:	4610      	mov	r0, r2
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff ffd2 	bl	800178c <XMC_GPIO_SetOutputHigh>
}
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop

080017f0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7c1b      	ldrb	r3, [r3, #16]
 8001800:	4610      	mov	r0, r2
 8001802:	4619      	mov	r1, r3
 8001804:	f7ff ffd2 	bl	80017ac <XMC_GPIO_SetOutputLow>
}
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop

08001810 <State_2>:

enum Gearchange_Sequence_forHzaard_t{not_allowed, allowed };


void State_2(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 8001814:	4b0c      	ldr	r3, [pc, #48]	; (8001848 <State_2+0x38>)
 8001816:	785b      	ldrb	r3, [r3, #1]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d006      	beq.n	800182a <State_2+0x1a>
	{

		/* ignition 2 on state */
		ignition2_d_on();
 800181c:	f000 f816 	bl	800184c <ignition2_d_on>
		VcuOut_MotorController();
 8001820:	f000 f892 	bl	8001948 <VcuOut_MotorController>

		Can_Outputs_State2();
 8001824:	f000 f888 	bl	8001938 <Can_Outputs_State2>
 8001828:	e00a      	b.n	8001840 <State_2+0x30>


		//State2_Lights();

	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <State_2+0x38>)
 800182c:	785b      	ldrb	r3, [r3, #1]
 800182e:	f083 0301 	eor.w	r3, r3, #1
 8001832:	b2db      	uxtb	r3, r3
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <State_2+0x30>
	{

		/* ignition 2 off state */
		ignition2_d_off();
 8001838:	f000 f840 	bl	80018bc <ignition2_d_off>


		VcuOut_MotorController_off();
 800183c:	f000 f8f8 	bl	8001a30 <VcuOut_MotorController_off>
	}

	State2_Lights();
 8001840:	f000 f9c8 	bl	8001bd4 <State2_Lights>
}
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	1fff48cc 	.word	0x1fff48cc

0800184c <ignition2_d_on>:


void ignition2_d_on()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
	/* ignition 2 by default on */
	digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 8001850:	4810      	ldr	r0, [pc, #64]	; (8001894 <ignition2_d_on+0x48>)
 8001852:	f00e fc97 	bl	8010184 <digital_io_setoutputhigh>
	//ignition_default_state_MC();
	DIGITAL_IO_SetOutputHigh(&PWR_STEERING_OUT_D);/// power steering// check
 8001856:	4810      	ldr	r0, [pc, #64]	; (8001898 <ignition2_d_on+0x4c>)
 8001858:	f7ff ffba 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&VACUUM_PUMP_OUT_D); // check
 800185c:	480f      	ldr	r0, [pc, #60]	; (800189c <ignition2_d_on+0x50>)
 800185e:	f7ff ffb7 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	//DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D); // common for everything giving 12v to mc every relay IN VCU13(IN 14 DIRCTLY GOES TO OCNTROLLER FAN)
	DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D);
 8001862:	480f      	ldr	r0, [pc, #60]	; (80018a0 <ignition2_d_on+0x54>)
 8001864:	f7ff ffb4 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 8001868:	480e      	ldr	r0, [pc, #56]	; (80018a4 <ignition2_d_on+0x58>)
 800186a:	f7ff ffb1 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REGEN_RELAY_OUT_D); // on relay, relay_driver_pin as output
 800186e:	480e      	ldr	r0, [pc, #56]	; (80018a8 <ignition2_d_on+0x5c>)
 8001870:	f7ff ffae 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_ELOCK_RELAY_OUT_D); // start relay , relay_driver_pin as output
 8001874:	480d      	ldr	r0, [pc, #52]	; (80018ac <ignition2_d_on+0x60>)
 8001876:	f7ff ffab 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_FAN_PWR_OUT_D);  // start, on, fwd, rev relay output side
 800187a:	480d      	ldr	r0, [pc, #52]	; (80018b0 <ignition2_d_on+0x64>)
 800187c:	f7ff ffa8 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 8001880:	480c      	ldr	r0, [pc, #48]	; (80018b4 <ignition2_d_on+0x68>)
 8001882:	f7ff ffa5 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>
	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 1;
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <ignition2_d_on+0x6c>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	7813      	ldrb	r3, [r2, #0]
 800188c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001890:	7013      	strb	r3, [r2, #0]
}
 8001892:	bd80      	pop	{r7, pc}
 8001894:	1fff42c4 	.word	0x1fff42c4
 8001898:	080137e0 	.word	0x080137e0
 800189c:	080134e8 	.word	0x080134e8
 80018a0:	0801377c 	.word	0x0801377c
 80018a4:	08013600 	.word	0x08013600
 80018a8:	080135b0 	.word	0x080135b0
 80018ac:	080135c4 	.word	0x080135c4
 80018b0:	08013790 	.word	0x08013790
 80018b4:	08013588 	.word	0x08013588
 80018b8:	1ffe8818 	.word	0x1ffe8818

080018bc <ignition2_d_off>:

void ignition2_d_off()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&PWR_STEERING_OUT_D);/// power steering
 80018c0:	4812      	ldr	r0, [pc, #72]	; (800190c <ignition2_d_off+0x50>)
 80018c2:	f7ff ff95 	bl	80017f0 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&VACUUM_PUMP_OUT_D);
 80018c6:	4812      	ldr	r0, [pc, #72]	; (8001910 <ignition2_d_off+0x54>)
 80018c8:	f7ff ff92 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	//DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);

	DIGITAL_IO_SetOutputLow(&MC_ELOCK_RELAY_OUT_D);
 80018cc:	4811      	ldr	r0, [pc, #68]	; (8001914 <ignition2_d_off+0x58>)
 80018ce:	f7ff ff8f 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REGEN_RELAY_OUT_D);
 80018d2:	4811      	ldr	r0, [pc, #68]	; (8001918 <ignition2_d_off+0x5c>)
 80018d4:	f7ff ff8c 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_FAN_PWR_OUT_D);
 80018d8:	4810      	ldr	r0, [pc, #64]	; (800191c <ignition2_d_off+0x60>)
 80018da:	f7ff ff89 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 80018de:	4810      	ldr	r0, [pc, #64]	; (8001920 <ignition2_d_off+0x64>)
 80018e0:	f7ff ff86 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <ignition2_d_off+0x68>)
 80018e6:	f7ff ff83 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 80018ea:	480f      	ldr	r0, [pc, #60]	; (8001928 <ignition2_d_off+0x6c>)
 80018ec:	f7ff ff80 	bl	80017f0 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 80018f0:	480e      	ldr	r0, [pc, #56]	; (800192c <ignition2_d_off+0x70>)
 80018f2:	f7ff ff7d 	bl	80017f0 <DIGITAL_IO_SetOutputLow>
	digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply
 80018f6:	480e      	ldr	r0, [pc, #56]	; (8001930 <ignition2_d_off+0x74>)
 80018f8:	f00e fc14 	bl	8010124 <digital_io_setoutputlow>
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <ignition2_d_off+0x78>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	7813      	ldrb	r3, [r2, #0]
 8001902:	f36f 13c7 	bfc	r3, #7, #1
 8001906:	7013      	strb	r3, [r2, #0]
}
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	080137e0 	.word	0x080137e0
 8001910:	080134e8 	.word	0x080134e8
 8001914:	080135c4 	.word	0x080135c4
 8001918:	080135b0 	.word	0x080135b0
 800191c:	08013790 	.word	0x08013790
 8001920:	08013600 	.word	0x08013600
 8001924:	0801377c 	.word	0x0801377c
 8001928:	08013704 	.word	0x08013704
 800192c:	08013588 	.word	0x08013588
 8001930:	1fff42c4 	.word	0x1fff42c4
 8001934:	1ffe8818 	.word	0x1ffe8818

08001938 <Can_Outputs_State2>:
{

}

void Can_Outputs_State2(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
	CAN_OUTPUT_EPS();
 800193c:	f008 fe38 	bl	800a5b0 <CAN_OUTPUT_EPS>
	//Gtake_Tx_29bit();

	Irp_Tx_29bit();
 8001940:	f009 fbec 	bl	800b11c <Irp_Tx_29bit>

	//Tx_CAN_0x121();
}
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop

08001948 <VcuOut_MotorController>:

void VcuOut_MotorController(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_Gtake();
	VcuOut_MotorController_IRP();
 800194c:	f000 f802 	bl	8001954 <VcuOut_MotorController_IRP>
}
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop

08001954 <VcuOut_MotorController_IRP>:
	//limphome_Mode();
}


void VcuOut_MotorController_IRP(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0

	static enum Gearchange_Sequence_forHzaard_t Gearchange_Sequence_forHzaard = not_allowed;

	VcuOut_MotorController_IRP_BMS_Status();
 8001958:	f000 f8a0 	bl	8001a9c <VcuOut_MotorController_IRP_BMS_Status>

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
 800195c:	4b2e      	ldr	r3, [pc, #184]	; (8001a18 <VcuOut_MotorController_IRP+0xc4>)
 800195e:	785b      	ldrb	r3, [r3, #1]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d053      	beq.n	8001a0c <VcuOut_MotorController_IRP+0xb8>
 8001964:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <VcuOut_MotorController_IRP+0xc8>)
 8001966:	881b      	ldrh	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d14f      	bne.n	8001a0c <VcuOut_MotorController_IRP+0xb8>
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 800196c:	4b2c      	ldr	r3, [pc, #176]	; (8001a20 <VcuOut_MotorController_IRP+0xcc>)
 800196e:	78db      	ldrb	r3, [r3, #3]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <VcuOut_MotorController_IRP+0x46>
		{
			if(Gearchange_Sequence_forHzaard)
 8001974:	4b2b      	ldr	r3, [pc, #172]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d00a      	beq.n	8001992 <VcuOut_MotorController_IRP+0x3e>
			{
				Irp_Mcu_drive_states_29bit->FNR = Forward_Irp;
 800197c:	4b2a      	ldr	r3, [pc, #168]	; (8001a28 <VcuOut_MotorController_IRP+0xd4>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	7813      	ldrb	r3, [r2, #0]
 8001982:	2101      	movs	r1, #1
 8001984:	f361 0301 	bfi	r3, r1, #0, #2
 8001988:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> forward = 0x00;
 800198a:	4b28      	ldr	r3, [pc, #160]	; (8001a2c <VcuOut_MotorController_IRP+0xd8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 8001992:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 8001994:	2200      	movs	r2, #0
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	e037      	b.n	8001a0a <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.reverse_relay)
 800199a:	4b21      	ldr	r3, [pc, #132]	; (8001a20 <VcuOut_MotorController_IRP+0xcc>)
 800199c:	785b      	ldrb	r3, [r3, #1]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d012      	beq.n	80019c8 <VcuOut_MotorController_IRP+0x74>
		{
			if(Gearchange_Sequence_forHzaard)
 80019a2:	4b20      	ldr	r3, [pc, #128]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00a      	beq.n	80019c0 <VcuOut_MotorController_IRP+0x6c>
			{
				Irp_Mcu_drive_states_29bit->FNR = Reverse_Irp;
 80019aa:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <VcuOut_MotorController_IRP+0xd4>)
 80019ac:	681a      	ldr	r2, [r3, #0]
 80019ae:	7813      	ldrb	r3, [r2, #0]
 80019b0:	2102      	movs	r1, #2
 80019b2:	f361 0301 	bfi	r3, r1, #0, #2
 80019b6:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> reverse = 0x03;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <VcuOut_MotorController_IRP+0xd8>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	2203      	movs	r2, #3
 80019be:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	e020      	b.n	8001a0a <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.park_relay)
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <VcuOut_MotorController_IRP+0xcc>)
 80019ca:	789b      	ldrb	r3, [r3, #2]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00a      	beq.n	80019e6 <VcuOut_MotorController_IRP+0x92>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp; //there is no option for irp
 80019d0:	4b15      	ldr	r3, [pc, #84]	; (8001a28 <VcuOut_MotorController_IRP+0xd4>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	7813      	ldrb	r3, [r2, #0]
 80019d6:	f36f 0301 	bfc	r3, #0, #2
 80019da:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> park = 0x02;
 80019dc:	4b13      	ldr	r3, [pc, #76]	; (8001a2c <VcuOut_MotorController_IRP+0xd8>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2202      	movs	r2, #2
 80019e2:	701a      	strb	r2, [r3, #0]
 80019e4:	e011      	b.n	8001a0a <VcuOut_MotorController_IRP+0xb6>
		}
		else if(Motor_controller_OUT.neutral)
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <VcuOut_MotorController_IRP+0xcc>)
 80019e8:	791b      	ldrb	r3, [r3, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00d      	beq.n	8001a0a <VcuOut_MotorController_IRP+0xb6>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 80019ee:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <VcuOut_MotorController_IRP+0xd4>)
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	7813      	ldrb	r3, [r2, #0]
 80019f4:	f36f 0301 	bfc	r3, #0, #2
 80019f8:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> neutral = 0x01;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <VcuOut_MotorController_IRP+0xd8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2201      	movs	r2, #1
 8001a00:	701a      	strb	r2, [r3, #0]
			Gearchange_Sequence_forHzaard = allowed;
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]
	VcuOut_MotorController_IRP_BMS_Status();

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001a08:	e003      	b.n	8001a12 <VcuOut_MotorController_IRP+0xbe>
 8001a0a:	e002      	b.n	8001a12 <VcuOut_MotorController_IRP+0xbe>
			Gearchange_Sequence_forHzaard = allowed;
		}
	}
	else
	{
		Gearchange_Sequence_forHzaard = not_allowed;
 8001a0c:	4b05      	ldr	r3, [pc, #20]	; (8001a24 <VcuOut_MotorController_IRP+0xd0>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	701a      	strb	r2, [r3, #0]
	}

	limphome_Mode_IRP();
 8001a12:	f000 f9e1 	bl	8001dd8 <limphome_Mode_IRP>

}
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	1fff48ac 	.word	0x1fff48ac
 8001a1c:	1fff4812 	.word	0x1fff4812
 8001a20:	1fff4804 	.word	0x1fff4804
 8001a24:	1fff439f 	.word	0x1fff439f
 8001a28:	1ffe8818 	.word	0x1ffe8818
 8001a2c:	1ffe8814 	.word	0x1ffe8814

08001a30 <VcuOut_MotorController_off>:

void VcuOut_MotorController_off(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_off_gtake();
	VcuOut_MotorController_off_IRP();
 8001a34:	f000 f802 	bl	8001a3c <VcuOut_MotorController_off_IRP>

}
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop

08001a3c <VcuOut_MotorController_off_IRP>:
	Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = 0;
	Gear_OUT-> neutral = 0x01;

}
void VcuOut_MotorController_off_IRP(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 8001a40:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <VcuOut_MotorController_off_IRP+0x58>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	7813      	ldrb	r3, [r2, #0]
 8001a46:	f36f 0301 	bfc	r3, #0, #2
 8001a4a:	7013      	strb	r3, [r2, #0]
	Irp_Mcu_drive_states_29bit->Throttle_Command = 1023;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <VcuOut_MotorController_off_IRP+0x58>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295
 8001a54:	705a      	strb	r2, [r3, #1]
 8001a56:	789a      	ldrb	r2, [r3, #2]
 8001a58:	f042 0203 	orr.w	r2, r2, #3
 8001a5c:	709a      	strb	r2, [r3, #2]
	Irp_Mcu_drive_states_29bit->Torque_Command = 0;
 8001a5e:	4b0d      	ldr	r3, [pc, #52]	; (8001a94 <VcuOut_MotorController_off_IRP+0x58>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	789a      	ldrb	r2, [r3, #2]
 8001a64:	f002 020f 	and.w	r2, r2, #15
 8001a68:	709a      	strb	r2, [r3, #2]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	70da      	strb	r2, [r3, #3]
 8001a6e:	791a      	ldrb	r2, [r3, #4]
 8001a70:	f022 0201 	bic.w	r2, r2, #1
 8001a74:	711a      	strb	r2, [r3, #4]
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <VcuOut_MotorController_off_IRP+0x58>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	7813      	ldrb	r3, [r2, #0]
 8001a7c:	f36f 13c7 	bfc	r3, #7, #1
 8001a80:	7013      	strb	r3, [r2, #0]

	Gear_OUT-> neutral = 0x01;
 8001a82:	4b05      	ldr	r3, [pc, #20]	; (8001a98 <VcuOut_MotorController_off_IRP+0x5c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2201      	movs	r2, #1
 8001a88:	701a      	strb	r2, [r3, #0]
	//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0;//(uint8_t )Relay_Control_Switch_OUT.ac_blower3_OUT;
	//Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = 0;//(uint8_t)Relay_Control_Switch_OUT.ac_blower3_OUT;


	//DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D); //in irp contactor +ve is coming from harness and -ve controlled by rev
}
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	1ffe8818 	.word	0x1ffe8818
 8001a98:	1ffe8814 	.word	0x1ffe8814

08001a9c <VcuOut_MotorController_IRP_BMS_Status>:

void VcuOut_MotorController_IRP_BMS_Status(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
	//Irp_Mcu_drive_states_29bit -> Driving_Profile = 3;

	Irp_Mcu_BMS_states_29bit->BMS_OperationMode = 5;
 8001aa0:	4b45      	ldr	r3, [pc, #276]	; (8001bb8 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2205      	movs	r2, #5
 8001aa6:	701a      	strb	r2, [r3, #0]
	Irp_Mcu_BMS_states_29bit->BMS_Contactor_Status = 1;
 8001aa8:	4b43      	ldr	r3, [pc, #268]	; (8001bb8 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	7853      	ldrb	r3, [r2, #1]
 8001aae:	2101      	movs	r1, #1
 8001ab0:	f361 0301 	bfi	r3, r1, #0, #2
 8001ab4:	7053      	strb	r3, [r2, #1]
	Irp_Mcu_BMS_states_29bit->SOH = Bms_SOH;
 8001ab6:	4b40      	ldr	r3, [pc, #256]	; (8001bb8 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001abc:	881b      	ldrh	r3, [r3, #0]
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac4:	b2d9      	uxtb	r1, r3
 8001ac6:	7893      	ldrb	r3, [r2, #2]
 8001ac8:	f361 0306 	bfi	r3, r1, #0, #7
 8001acc:	7093      	strb	r3, [r2, #2]
	Irp_Mcu_BMS_states_29bit->BMS_SOC = Bms_SOC;
 8001ace:	4b3a      	ldr	r3, [pc, #232]	; (8001bb8 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a3b      	ldr	r2, [pc, #236]	; (8001bc0 <VcuOut_MotorController_IRP_BMS_Status+0x124>)
 8001ad4:	8812      	ldrh	r2, [r2, #0]
 8001ad6:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ada:	b292      	uxth	r2, r2
 8001adc:	b2d1      	uxtb	r1, r2
 8001ade:	2000      	movs	r0, #0
 8001ae0:	4301      	orrs	r1, r0
 8001ae2:	70d9      	strb	r1, [r3, #3]
 8001ae4:	0a12      	lsrs	r2, r2, #8
 8001ae6:	b292      	uxth	r2, r2
 8001ae8:	f002 0203 	and.w	r2, r2, #3
 8001aec:	f002 0003 	and.w	r0, r2, #3
 8001af0:	791a      	ldrb	r2, [r3, #4]
 8001af2:	f022 0203 	bic.w	r2, r2, #3
 8001af6:	4611      	mov	r1, r2
 8001af8:	4602      	mov	r2, r0
 8001afa:	430a      	orrs	r2, r1
 8001afc:	711a      	strb	r2, [r3, #4]

	Irp_Mcu_BMS_Currents_29bit->Battery_Voltage = PackVoltage;//50
 8001afe:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a31      	ldr	r2, [pc, #196]	; (8001bc8 <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001b04:	6812      	ldr	r2, [r2, #0]
 8001b06:	b292      	uxth	r2, r2
 8001b08:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b0c:	b292      	uxth	r2, r2
 8001b0e:	b2d1      	uxtb	r1, r2
 8001b10:	2000      	movs	r0, #0
 8001b12:	4301      	orrs	r1, r0
 8001b14:	7019      	strb	r1, [r3, #0]
 8001b16:	0a12      	lsrs	r2, r2, #8
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	f002 021f 	and.w	r2, r2, #31
 8001b1e:	f002 001f 	and.w	r0, r2, #31
 8001b22:	785a      	ldrb	r2, [r3, #1]
 8001b24:	f022 021f 	bic.w	r2, r2, #31
 8001b28:	4611      	mov	r1, r2
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	430a      	orrs	r2, r1
 8001b2e:	705a      	strb	r2, [r3, #1]
	Irp_Mcu_BMS_Currents_29bit->Battery_Current = PackCurrent;//20
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a25      	ldr	r2, [pc, #148]	; (8001bcc <VcuOut_MotorController_IRP_BMS_Status+0x130>)
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	b292      	uxth	r2, r2
 8001b3a:	0152      	lsls	r2, r2, #5
 8001b3c:	b212      	sxth	r2, r2
 8001b3e:	1152      	asrs	r2, r2, #5
 8001b40:	b292      	uxth	r2, r2
 8001b42:	b2d1      	uxtb	r1, r2
 8001b44:	2000      	movs	r0, #0
 8001b46:	4301      	orrs	r1, r0
 8001b48:	7099      	strb	r1, [r3, #2]
 8001b4a:	0a12      	lsrs	r2, r2, #8
 8001b4c:	b292      	uxth	r2, r2
 8001b4e:	f002 0207 	and.w	r2, r2, #7
 8001b52:	f002 0007 	and.w	r0, r2, #7
 8001b56:	78da      	ldrb	r2, [r3, #3]
 8001b58:	f022 0207 	bic.w	r2, r2, #7
 8001b5c:	4611      	mov	r1, r2
 8001b5e:	4602      	mov	r2, r0
 8001b60:	430a      	orrs	r2, r1
 8001b62:	70da      	strb	r2, [r3, #3]
	Irp_Mcu_BMS_Currents_29bit->MaxDischargeCurrent = 450;//DischargeCurrentLimit * -1;//20;
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2200      	movs	r2, #0
 8001b6a:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8001b6e:	711a      	strb	r2, [r3, #4]
 8001b70:	795a      	ldrb	r2, [r3, #5]
 8001b72:	f022 0207 	bic.w	r2, r2, #7
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	715a      	strb	r2, [r3, #5]

	//-1 commented because RegenerativeCurrentLimit from BMS was 90 and when you multiply it with -1, it gives -90 which does not start regen function of mcu.
//	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = -1 * RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
 8001b7c:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a13      	ldr	r2, [pc, #76]	; (8001bd0 <VcuOut_MotorController_IRP_BMS_Status+0x134>)
 8001b82:	8812      	ldrh	r2, [r2, #0]
 8001b84:	b292      	uxth	r2, r2
 8001b86:	0152      	lsls	r2, r2, #5
 8001b88:	b212      	sxth	r2, r2
 8001b8a:	1152      	asrs	r2, r2, #5
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	b2d1      	uxtb	r1, r2
 8001b90:	2000      	movs	r0, #0
 8001b92:	4301      	orrs	r1, r0
 8001b94:	7199      	strb	r1, [r3, #6]
 8001b96:	0a12      	lsrs	r2, r2, #8
 8001b98:	b292      	uxth	r2, r2
 8001b9a:	f002 0207 	and.w	r2, r2, #7
 8001b9e:	f002 0007 	and.w	r0, r2, #7
 8001ba2:	79da      	ldrb	r2, [r3, #7]
 8001ba4:	f022 0207 	bic.w	r2, r2, #7
 8001ba8:	4611      	mov	r1, r2
 8001baa:	4602      	mov	r2, r0
 8001bac:	430a      	orrs	r2, r1
 8001bae:	71da      	strb	r2, [r3, #7]

}
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	1ffe881c 	.word	0x1ffe881c
 8001bbc:	1fff48c8 	.word	0x1fff48c8
 8001bc0:	1fff48c0 	.word	0x1fff48c0
 8001bc4:	1ffe8824 	.word	0x1ffe8824
 8001bc8:	1fff48d8 	.word	0x1fff48d8
 8001bcc:	1fff4818 	.word	0x1fff4818
 8001bd0:	1fff4820 	.word	0x1fff4820

08001bd4 <State2_Lights>:

void State2_Lights(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	if((Lights_OUT.brake_switch_out_d))
 8001bd8:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <State2_Lights+0x24>)
 8001bda:	785b      	ldrb	r3, [r3, #1]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00a      	beq.n	8001bf6 <State2_Lights+0x22>
	{
		if((Lights_OUT.reverse_light_out))
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <State2_Lights+0x24>)
 8001be2:	789b      	ldrb	r3, [r3, #2]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <State2_Lights+0x1c>
		{
			DIGITAL_IO_SetOutputHigh(&REV_LIGHT_OUT_D);
 8001be8:	4804      	ldr	r0, [pc, #16]	; (8001bfc <State2_Lights+0x28>)
 8001bea:	f7ff fdf1 	bl	80017d0 <DIGITAL_IO_SetOutputHigh>
 8001bee:	e002      	b.n	8001bf6 <State2_Lights+0x22>
		}
		else
		{
			DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 8001bf0:	4802      	ldr	r0, [pc, #8]	; (8001bfc <State2_Lights+0x28>)
 8001bf2:	f7ff fdfd 	bl	80017f0 <DIGITAL_IO_SetOutputLow>
		}
	}
}
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	1fff48ac 	.word	0x1fff48ac
 8001bfc:	08013704 	.word	0x08013704

08001c00 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001c0c:	78fb      	ldrb	r3, [r7, #3]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]
}
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001c2c:	78fb      	ldrb	r3, [r7, #3]
 8001c2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c32:	409a      	lsls	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	605a      	str	r2, [r3, #4]
}
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop

08001c44 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	7c1b      	ldrb	r3, [r3, #16]
 8001c54:	4610      	mov	r0, r2
 8001c56:	4619      	mov	r1, r3
 8001c58:	f7ff ffd2 	bl	8001c00 <XMC_GPIO_SetOutputHigh>
}
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop

08001c64 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	7c1b      	ldrb	r3, [r3, #16]
 8001c74:	4610      	mov	r0, r2
 8001c76:	4619      	mov	r1, r3
 8001c78:	f7ff ffd2 	bl	8001c20 <XMC_GPIO_SetOutputLow>
}
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop

08001c84 <OutPutAction_Update>:
#include "Vcu_Init.h"
#include "can_matrix.h"
#include "ADS7961_LIB_2.h"

void OutPutAction_Update(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
	ALL_CONDITION_ON();
 8001c88:	f000 f878 	bl	8001d7c <ALL_CONDITION_ON>

	SPI_ADC_ReadAllData(1);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f7ff f907 	bl	8000ea0 <SPI_ADC_ReadAllData>

	can_outputs_allState();
 8001c92:	f000 f899 	bl	8001dc8 <can_outputs_allState>

	State_1();
 8001c96:	f7ff fbbb 	bl	8001410 <State_1>
	State_2();
 8001c9a:	f7ff fdb9 	bl	8001810 <State_2>
	//Can_Outputs_State1();

	/* light */
	Lights_on_off();
 8001c9e:	f000 f805 	bl	8001cac <Lights_on_off>



	VcuOut_MotorController_IRPbrakes();
 8001ca2:	f000 f823 	bl	8001cec <VcuOut_MotorController_IRPbrakes>

	door_en_cabin_light();
 8001ca6:	f000 f845 	bl	8001d34 <door_en_cabin_light>
}
 8001caa:	bd80      	pop	{r7, pc}

08001cac <Lights_on_off>:
	/*  obc set v and i */
	Update_CAN_id0x1806E5F4();
}

void Lights_on_off()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
	/* light */
	if(Lights_OUT.brake_switch_out_d)
 8001cb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ce0 <Lights_on_off+0x34>)
 8001cb2:	785b      	ldrb	r3, [r3, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d009      	beq.n	8001ccc <Lights_on_off+0x20>
	{
		DIGITAL_IO_SetOutputHigh(&BRAKE_LIGHT_OUT_D);
 8001cb8:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <Lights_on_off+0x38>)
 8001cba:	f7ff ffc3 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 1;
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <Lights_on_off+0x3c>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	7813      	ldrb	r3, [r2, #0]
 8001cc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cc8:	7013      	strb	r3, [r2, #0]
 8001cca:	e008      	b.n	8001cde <Lights_on_off+0x32>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&BRAKE_LIGHT_OUT_D);
 8001ccc:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <Lights_on_off+0x38>)
 8001cce:	f7ff ffc9 	bl	8001c64 <DIGITAL_IO_SetOutputLow>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 0;
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <Lights_on_off+0x3c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	7813      	ldrb	r3, [r2, #0]
 8001cd8:	f36f 1386 	bfc	r3, #6, #1
 8001cdc:	7013      	strb	r3, [r2, #0]
	}
}
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	1fff48ac 	.word	0x1fff48ac
 8001ce4:	0801368c 	.word	0x0801368c
 8001ce8:	1ffe882c 	.word	0x1ffe882c

08001cec <VcuOut_MotorController_IRPbrakes>:

void VcuOut_MotorController_IRPbrakes(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->Brake_Command = Lights_OUT.brake_switch_out_d;
 8001cf0:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <VcuOut_MotorController_IRPbrakes+0x40>)
 8001cf6:	7859      	ldrb	r1, [r3, #1]
 8001cf8:	7813      	ldrb	r3, [r2, #0]
 8001cfa:	f361 1345 	bfi	r3, r1, #5, #1
 8001cfe:	7013      	strb	r3, [r2, #0]

	Irp_Mcu_drive_states_29bit->Handbrake_Command = !Relay_Control_Switch_OUT.elec_handbrake_pwr_out;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <VcuOut_MotorController_IRPbrakes+0x44>)
 8001d06:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d0a:	f083 0301 	eor.w	r3, r3, #1
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	b2d9      	uxtb	r1, r3
 8001d16:	7813      	ldrb	r3, [r2, #0]
 8001d18:	f361 1386 	bfi	r3, r1, #6, #1
 8001d1c:	7013      	strb	r3, [r2, #0]
}
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	1ffe8818 	.word	0x1ffe8818
 8001d2c:	1fff48ac 	.word	0x1fff48ac
 8001d30:	1fff47b0 	.word	0x1fff47b0

08001d34 <door_en_cabin_light>:

void door_en_cabin_light(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	if((!Door_Switch_OUT.passenger_door_OUT) || (!Door_Switch_OUT.driver_door_OUT) || /*(!Door_Switch_OUT.bonnet_OUT) ||*/ (!Door_Switch_OUT.hatch_OUT))
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <door_en_cabin_light+0x40>)
 8001d3a:	789b      	ldrb	r3, [r3, #2]
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10d      	bne.n	8001d62 <door_en_cabin_light+0x2e>
 8001d46:	4b0b      	ldr	r3, [pc, #44]	; (8001d74 <door_en_cabin_light+0x40>)
 8001d48:	785b      	ldrb	r3, [r3, #1]
 8001d4a:	f083 0301 	eor.w	r3, r3, #1
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d106      	bne.n	8001d62 <door_en_cabin_light+0x2e>
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <door_en_cabin_light+0x40>)
 8001d56:	795b      	ldrb	r3, [r3, #5]
 8001d58:	f083 0301 	eor.w	r3, r3, #1
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <door_en_cabin_light+0x36>
	{
		digital_io_setoutputhigh(&AC_COMPRESSOR_OUT_D); // for cabin light on doors on/off
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <door_en_cabin_light+0x44>)
 8001d64:	f00e fa0e 	bl	8010184 <digital_io_setoutputhigh>
 8001d68:	e002      	b.n	8001d70 <door_en_cabin_light+0x3c>
	}
	else
	{
		digital_io_setoutputlow(&AC_COMPRESSOR_OUT_D);
 8001d6a:	4803      	ldr	r0, [pc, #12]	; (8001d78 <door_en_cabin_light+0x44>)
 8001d6c:	f00e f9da 	bl	8010124 <digital_io_setoutputlow>
	}

}
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	1fff4830 	.word	0x1fff4830
 8001d78:	1fff42c8 	.word	0x1fff42c8

08001d7c <ALL_CONDITION_ON>:
{
	//cluster_door_out = cluster_door_in;
}
*/
void ALL_CONDITION_ON()
 {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputHigh(&DOOR_LOCK_PWR_OUT_D);//check j4 -> f1
 8001d80:	4807      	ldr	r0, [pc, #28]	; (8001da0 <ALL_CONDITION_ON+0x24>)
 8001d82:	f7ff ff5f 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&LIGHTS_PWR_OUT_D); // Check j4 -> k1
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <ALL_CONDITION_ON+0x28>)
 8001d88:	f7ff ff5c 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HORN_PWR_OUT_D);
 8001d8c:	4806      	ldr	r0, [pc, #24]	; (8001da8 <ALL_CONDITION_ON+0x2c>)
 8001d8e:	f7ff ff59 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>
//	 DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D); not set here
	 DIGITAL_IO_SetOutputHigh(&HEADLAMPS_ADJ_PWR_OUT_D);
 8001d92:	4806      	ldr	r0, [pc, #24]	; (8001dac <ALL_CONDITION_ON+0x30>)
 8001d94:	f7ff ff56 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 8001d98:	4805      	ldr	r0, [pc, #20]	; (8001db0 <ALL_CONDITION_ON+0x34>)
 8001d9a:	f7ff ff53 	bl	8001c44 <DIGITAL_IO_SetOutputHigh>

	// DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D);//instrument cluster 12v as battery(constant 12v)
	 //digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D);//bms 12v
	 //digital_io_setoutputhigh(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputhigh(&AUX_EFUSE_5_OUT_D);//obc 12v
 }
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	0801395c 	.word	0x0801395c
 8001da4:	0801363c 	.word	0x0801363c
 8001da8:	080136a0 	.word	0x080136a0
 8001dac:	080134fc 	.word	0x080134fc
 8001db0:	08013858 	.word	0x08013858

08001db4 <charger_connected_inVoff>:
	 //digital_io_setoutputlow(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputlow(&AUX_EFUSE_5_OUT_D);//obc 12v
 }

void charger_connected_inVoff(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	if(charger_on())
 8001db8:	f7fe fef6 	bl	8000ba8 <charger_on>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <charger_connected_inVoff+0x12>
	{
		Update_CAN_0x18FFB632();
 8001dc2:	f008 f9bb 	bl	800a13c <Update_CAN_0x18FFB632>
	}
}
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <can_outputs_allState>:

void can_outputs_allState(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	//charger_tx(); // charger can tx
	charger_connected_inVoff();
 8001dcc:	f7ff fff2 	bl	8001db4 <charger_connected_inVoff>
	OBDII_CAN_Tx();
 8001dd0:	f007 fba0 	bl	8009514 <OBDII_CAN_Tx>
}
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop

08001dd8 <limphome_Mode_IRP>:

	return 0;
}

int limphome_Mode_IRP(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
	if((Mapped_BMS_SOC < 10) /*|| (Mcu_Temp_Irp > 90)*/)
 8001ddc:	4b09      	ldr	r3, [pc, #36]	; (8001e04 <limphome_Mode_IRP+0x2c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b09      	cmp	r3, #9
 8001de2:	d808      	bhi.n	8001df6 <limphome_Mode_IRP+0x1e>
	{
		Irp_Mcu_drive_states_29bit ->Driving_Profile = Limp_Crawl_irp;
 8001de4:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <limphome_Mode_IRP+0x30>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	7813      	ldrb	r3, [r2, #0]
 8001dea:	2103      	movs	r1, #3
 8001dec:	f361 0384 	bfi	r3, r1, #2, #3
 8001df0:	7013      	strb	r3, [r2, #0]
		return 0;
 8001df2:	2300      	movs	r3, #0
 8001df4:	e000      	b.n	8001df8 <limphome_Mode_IRP+0x20>
	}
	else
	{
		return 1;
 8001df6:	2301      	movs	r3, #1
	}

	return 0;
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	1fff4800 	.word	0x1fff4800
 8001e08:	1ffe8818 	.word	0x1ffe8818

08001e0c <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001e0c:	b598      	push	{r3, r4, r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001e10:	4a05      	ldr	r2, [pc, #20]	; (8001e28 <SystemInit+0x1c>)
 8001e12:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e16:	4614      	mov	r4, r2
 8001e18:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e1a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8001e1e:	f006 fd13 	bl	8008848 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001e22:	f006 fd7b 	bl	800891c <SystemCoreClockSetup>
}
 8001e26:	bd98      	pop	{r3, r4, r7, pc}
 8001e28:	2003ffc4 	.word	0x2003ffc4

08001e2c <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <SystemCoreClockUpdate+0xc4>)
 8001e34:	68db      	ldr	r3, [r3, #12]
 8001e36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d03e      	beq.n	8001ebc <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001e3e:	4b2d      	ldr	r3, [pc, #180]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d002      	beq.n	8001e50 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001e4a:	4b2b      	ldr	r3, [pc, #172]	; (8001ef8 <SystemCoreClockUpdate+0xcc>)
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	e002      	b.n	8001e56 <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001e50:	f006 fd5a 	bl	8008908 <OSCHP_GetFrequency>
 8001e54:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001e56:	4b27      	ldr	r3, [pc, #156]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d020      	beq.n	8001ea4 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001e62:	4b24      	ldr	r3, [pc, #144]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e6a:	0e1b      	lsrs	r3, r3, #24
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001e70:	4b20      	ldr	r3, [pc, #128]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001e78:	0a1b      	lsrs	r3, r3, #8
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001e7e:	4b1d      	ldr	r3, [pc, #116]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e86:	0c1b      	lsrs	r3, r3, #16
 8001e88:	3301      	adds	r3, #1
 8001e8a:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	68fa      	ldr	r2, [r7, #12]
 8001e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	e00d      	b.n	8001ec0 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001ea4:	4b13      	ldr	r3, [pc, #76]	; (8001ef4 <SystemCoreClockUpdate+0xc8>)
 8001ea6:	689b      	ldr	r3, [r3, #8]
 8001ea8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001eac:	3301      	adds	r3, #1
 8001eae:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001eb0:	68fa      	ldr	r2, [r7, #12]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb8:	60fb      	str	r3, [r7, #12]
 8001eba:	e001      	b.n	8001ec0 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <SystemCoreClockUpdate+0xcc>)
 8001ebe:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001ec0:	4b0b      	ldr	r3, [pc, #44]	; (8001ef0 <SystemCoreClockUpdate+0xc4>)
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ece:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <SystemCoreClockUpdate+0xc4>)
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	3301      	adds	r3, #1
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee0:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001ee2:	4a06      	ldr	r2, [pc, #24]	; (8001efc <SystemCoreClockUpdate+0xd0>)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6013      	str	r3, [r2, #0]
}
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	50004600 	.word	0x50004600
 8001ef4:	50004710 	.word	0x50004710
 8001ef8:	016e3600 	.word	0x016e3600
 8001efc:	2003ffc0 	.word	0x2003ffc0

08001f00 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	607a      	str	r2, [r7, #4]
 8001f0c:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8001f0e:	7afb      	ldrb	r3, [r7, #11]
 8001f10:	089b      	lsrs	r3, r3, #2
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	4618      	mov	r0, r3
 8001f16:	7afb      	ldrb	r3, [r7, #11]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	3204      	adds	r2, #4
 8001f22:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f26:	7afb      	ldrb	r3, [r7, #11]
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4619      	mov	r1, r3
 8001f30:	23f8      	movs	r3, #248	; 0xf8
 8001f32:	408b      	lsls	r3, r1
 8001f34:	43db      	mvns	r3, r3
 8001f36:	ea02 0103 	and.w	r1, r2, r3
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	1d02      	adds	r2, r0, #4
 8001f3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f46:	7afb      	ldrb	r3, [r7, #11]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	408b      	lsls	r3, r1
 8001f50:	43db      	mvns	r3, r3
 8001f52:	401a      	ands	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <XMC_GPIO_Init+0x144>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d003      	beq.n	8001f68 <XMC_GPIO_Init+0x68>
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a39      	ldr	r2, [pc, #228]	; (8002048 <XMC_GPIO_Init+0x148>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d10a      	bne.n	8001f7e <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f6c:	7afb      	ldrb	r3, [r7, #11]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f303 	lsl.w	r3, r1, r3
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	661a      	str	r2, [r3, #96]	; 0x60
 8001f7c:	e042      	b.n	8002004 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	b25b      	sxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	da3c      	bge.n	8002004 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685a      	ldr	r2, [r3, #4]
 8001f8e:	7afb      	ldrb	r3, [r7, #11]
 8001f90:	409a      	lsls	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001f96:	7afb      	ldrb	r3, [r7, #11]
 8001f98:	08db      	lsrs	r3, r3, #3
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	08db      	lsrs	r3, r3, #3
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3210      	adds	r2, #16
 8001faa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fae:	7afb      	ldrb	r3, [r7, #11]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	2307      	movs	r3, #7
 8001fba:	408b      	lsls	r3, r1
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	ea02 0103 	and.w	r1, r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f100 0210 	add.w	r2, r0, #16
 8001fc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	08db      	lsrs	r3, r3, #3
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	461a      	mov	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	3210      	adds	r2, #16
 8001fe0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7a1b      	ldrb	r3, [r3, #8]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	7afb      	ldrb	r3, [r7, #11]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ff6:	ea42 0103 	orr.w	r1, r2, r3
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	f100 0210 	add.w	r2, r0, #16
 8002000:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002004:	7afb      	ldrb	r3, [r7, #11]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4618      	mov	r0, r3
 800200c:	7afb      	ldrb	r3, [r7, #11]
 800200e:	089b      	lsrs	r3, r3, #2
 8002010:	b2db      	uxtb	r3, r3
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	3204      	adds	r2, #4
 8002018:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	7afb      	ldrb	r3, [r7, #11]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	fa01 f303 	lsl.w	r3, r1, r3
 800202e:	ea42 0103 	orr.w	r1, r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1d02      	adds	r2, r0, #4
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800203a:	3714      	adds	r7, #20
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr
 8002044:	48028e00 	.word	0x48028e00
 8002048:	48028f00 	.word	0x48028f00

0800204c <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8002050:	4b06      	ldr	r3, [pc, #24]	; (800206c <XMC_RTC_IsRunning+0x20>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f003 0301 	and.w	r3, r3, #1
 8002058:	2b00      	cmp	r3, #0
 800205a:	bf14      	ite	ne
 800205c:	2301      	movne	r3, #1
 800205e:	2300      	moveq	r3, #0
 8002060:	b2db      	uxtb	r3, r3
}
 8002062:	4618      	mov	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr
 800206c:	50004a00 	.word	0x50004a00

08002070 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8002074:	4b03      	ldr	r3, [pc, #12]	; (8002084 <XMC_SCU_GetMirrorStatus+0x14>)
 8002076:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800207a:	4618      	mov	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr
 8002084:	50004000 	.word	0x50004000

08002088 <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 8002090:	f7ff ffdc 	bl	800204c <XMC_RTC_IsRunning>
 8002094:	4603      	mov	r3, r0
 8002096:	f083 0301 	eor.w	r3, r3, #1
 800209a:	b2db      	uxtb	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	d03e      	beq.n	800211e <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 80020a0:	f000 fbd0 	bl	8002844 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 80020a4:	4603      	mov	r3, r0
 80020a6:	f083 0301 	eor.w	r3, r3, #1
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 80020b0:	f000 fb9c 	bl	80027ec <XMC_SCU_HIB_EnableHibernateDomain>
    }

    XMC_RTC_SetPrescaler(config->prescaler);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	8a1b      	ldrh	r3, [r3, #16]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f002 fb49 	bl	8004750 <XMC_RTC_SetPrescaler>

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80020be:	bf00      	nop
 80020c0:	f7ff ffd6 	bl	8002070 <XMC_SCU_GetMirrorStatus>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f8      	bne.n	80020c0 <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 80020ce:	4a16      	ldr	r2, [pc, #88]	; (8002128 <XMC_RTC_Init+0xa0>)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	6213      	str	r3, [r2, #32]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80020d6:	bf00      	nop
 80020d8:	f7ff ffca 	bl	8002070 <XMC_SCU_GetMirrorStatus>
 80020dc:	4603      	mov	r3, r0
 80020de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d1f8      	bne.n	80020d8 <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 80020e6:	4a10      	ldr	r2, [pc, #64]	; (8002128 <XMC_RTC_Init+0xa0>)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	6253      	str	r3, [r2, #36]	; 0x24

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 80020ee:	bf00      	nop
 80020f0:	f7ff ffbe 	bl	8002070 <XMC_SCU_GetMirrorStatus>
 80020f4:	4603      	mov	r3, r0
 80020f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f8      	bne.n	80020f0 <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 80020fe:	4a0a      	ldr	r2, [pc, #40]	; (8002128 <XMC_RTC_Init+0xa0>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	6193      	str	r3, [r2, #24]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 8002106:	bf00      	nop
 8002108:	f7ff ffb2 	bl	8002070 <XMC_SCU_GetMirrorStatus>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f8      	bne.n	8002108 <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;
 8002116:	4a04      	ldr	r2, [pc, #16]	; (8002128 <XMC_RTC_Init+0xa0>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61d3      	str	r3, [r2, #28]
  }
  return XMC_RTC_STATUS_OK;
 800211e:	2300      	movs	r3, #0
}
 8002120:	4618      	mov	r0, r3
 8002122:	3708      	adds	r7, #8
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	50004a00 	.word	0x50004a00

0800212c <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */
void XMC_RTC_EnableEvent(const uint32_t event)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8002134:	bf00      	nop
 8002136:	f7ff ff9b 	bl	8002070 <XMC_SCU_GetMirrorStatus>
 800213a:	4603      	mov	r3, r0
 800213c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f8      	bne.n	8002136 <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8002144:	4904      	ldr	r1, [pc, #16]	; (8002158 <XMC_RTC_EnableEvent+0x2c>)
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <XMC_RTC_EnableEvent+0x2c>)
 8002148:	691a      	ldr	r2, [r3, #16]
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4313      	orrs	r3, r2
 800214e:	610b      	str	r3, [r1, #16]
}
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	50004a00 	.word	0x50004a00

0800215c <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002162:	681b      	ldr	r3, [r3, #0]
}
 8002164:	4618      	mov	r0, r3
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	2003ffc0 	.word	0x2003ffc0

08002174 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <XMC_SCU_GetMirrorStatus+0x14>)
 800217a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	50004000 	.word	0x50004000

0800218c <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b084      	sub	sp, #16
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 8002194:	f7ff fe4a 	bl	8001e2c <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002198:	4b0b      	ldr	r3, [pc, #44]	; (80021c8 <XMC_SCU_lDelay+0x3c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a0b      	ldr	r2, [pc, #44]	; (80021cc <XMC_SCU_lDelay+0x40>)
 800219e:	fba2 2303 	umull	r2, r3, r2, r3
 80021a2:	0c9a      	lsrs	r2, r3, #18
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	fb02 f303 	mul.w	r3, r2, r3
 80021aa:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	e003      	b.n	80021ba <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80021b2:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	3301      	adds	r3, #1
 80021b8:	60fb      	str	r3, [r7, #12]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d3f7      	bcc.n	80021b2 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80021c2:	3710      	adds	r7, #16
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	2003ffc0 	.word	0x2003ffc0
 80021cc:	431bde83 	.word	0x431bde83

080021d0 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80021d8:	4905      	ldr	r1, [pc, #20]	; (80021f0 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80021da:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80021dc:	689a      	ldr	r2, [r3, #8]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	608b      	str	r3, [r1, #8]
}
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	50004074 	.word	0x50004074

080021f4 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80021f8:	4b03      	ldr	r3, [pc, #12]	; (8002208 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80021fa:	685b      	ldr	r3, [r3, #4]
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	50004074 	.word	0x50004074

0800220c <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002214:	4a03      	ldr	r2, [pc, #12]	; (8002224 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	60d3      	str	r3, [r2, #12]
}
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	50004074 	.word	0x50004074

08002228 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8002228:	b5b0      	push	{r4, r5, r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af02      	add	r7, sp, #8
 800222e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8002230:	2000      	movs	r0, #0
 8002232:	f000 f8d7 	bl	80023e4 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 8002236:	f000 fad9 	bl	80027ec <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	79db      	ldrb	r3, [r3, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00a      	beq.n	8002258 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8002242:	f000 fb2f 	bl	80028a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 8002246:	bf00      	nop
 8002248:	f000 fb1a 	bl	8002880 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 800224c:	4603      	mov	r3, r0
 800224e:	f083 0301 	eor.w	r3, r3, #1
 8002252:	b2db      	uxtb	r3, r3
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f7      	bne.n	8002248 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	7a5b      	ldrb	r3, [r3, #9]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 f93b 	bl	80024d8 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8002262:	bf00      	nop
 8002264:	f7ff ff86 	bl	8002174 <XMC_SCU_GetMirrorStatus>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1fa      	bne.n	8002264 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	7a1b      	ldrb	r3, [r3, #8]
 8002272:	4618      	mov	r0, r3
 8002274:	f000 fa94 	bl	80027a0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	7c1b      	ldrb	r3, [r3, #16]
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f949 	bl	8002514 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7c5b      	ldrb	r3, [r3, #17]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 f96c 	bl	8002564 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c9b      	ldrb	r3, [r3, #18]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f953 	bl	800253c <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7cdb      	ldrb	r3, [r3, #19]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f976 	bl	800258c <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	799b      	ldrb	r3, [r3, #6]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80022a8:	f000 fb34 	bl	8002914 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80022ac:	bf00      	nop
 80022ae:	f000 fb59 	bl	8002964 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80022b2:	4603      	mov	r3, r0
 80022b4:	f083 0301 	eor.w	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f7      	bne.n	80022ae <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	78db      	ldrb	r3, [r3, #3]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d109      	bne.n	80022da <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	799b      	ldrb	r3, [r3, #6]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d017      	beq.n	8002304 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80022d4:	f000 fb6a 	bl	80029ac <XMC_SCU_CLOCK_DisableSystemPll>
 80022d8:	e014      	b.n	8002304 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80022da:	f000 fb57 	bl	800298c <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	8899      	ldrh	r1, [r3, #4]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022ea:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022f0:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	4608      	mov	r0, r1
 80022fa:	4611      	mov	r1, r2
 80022fc:	462a      	mov	r2, r5
 80022fe:	4623      	mov	r3, r4
 8002300:	f000 fb64 	bl	80029cc <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	68db      	ldr	r3, [r3, #12]
 8002308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230c:	d103      	bne.n	8002316 <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 800230e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002312:	f000 f867 	bl	80023e4 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 8002316:	f7ff fd89 	bl	8001e2c <SystemCoreClockUpdate>
}
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bdb0      	pop	{r4, r5, r7, pc}

08002320 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory;
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002328:	4905      	ldr	r1, [pc, #20]	; (8002340 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800232c:	695a      	ldr	r2, [r3, #20]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4313      	orrs	r3, r2
 8002332:	614b      	str	r3, [r1, #20]
}
 8002334:	370c      	adds	r7, #12
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	50004074 	.word	0x50004074

08002344 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0f1b      	lsrs	r3, r3, #28
 8002350:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002358:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800235a:	68fa      	ldr	r2, [r7, #12]
 800235c:	4613      	mov	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	4413      	add	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	461a      	mov	r2, r3
 8002366:	4b04      	ldr	r3, [pc, #16]	; (8002378 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8002368:	4413      	add	r3, r2
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	601a      	str	r2, [r3, #0]
}
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	50004414 	.word	0x50004414

0800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0f1b      	lsrs	r3, r3, #28
 8002388:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002390:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	4613      	mov	r3, r2
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	4413      	add	r3, r2
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	461a      	mov	r2, r3
 800239e:	4b08      	ldr	r3, [pc, #32]	; (80023c0 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80023a0:	4413      	add	r3, r2
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	bf14      	ite	ne
 80023ac:	2301      	movne	r3, #1
 80023ae:	2300      	moveq	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	5000440c 	.word	0x5000440c

080023c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80023c8:	f7ff fec8 	bl	800215c <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80023cc:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80023d0:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80023da:	4618      	mov	r0, r3
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	50004600 	.word	0x50004600

080023e4 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80023ec:	4906      	ldr	r1, [pc, #24]	; (8002408 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	50004600 	.word	0x50004600

0800240c <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8002414:	4906      	ldr	r1, [pc, #24]	; (8002430 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8002416:	4b06      	ldr	r3, [pc, #24]	; (8002430 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	4313      	orrs	r3, r2
 8002422:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	50004600 	.word	0x50004600

08002434 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 800243c:	4906      	ldr	r1, [pc, #24]	; (8002458 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002442:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4313      	orrs	r3, r2
 800244a:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	50004600 	.word	0x50004600

0800245c <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	4603      	mov	r3, r0
 8002464:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800246c:	4a0a      	ldr	r2, [pc, #40]	; (8002498 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002476:	f023 0301 	bic.w	r3, r3, #1
 800247a:	60d3      	str	r3, [r2, #12]
 800247c:	e007      	b.n	800248e <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 800247e:	4a06      	ldr	r2, [pc, #24]	; (8002498 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002480:	4b05      	ldr	r3, [pc, #20]	; (8002498 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	f043 0301 	orr.w	r3, r3, #1
 800248c:	60d3      	str	r3, [r2, #12]
  }
}
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	50004710 	.word	0x50004710

0800249c <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	4603      	mov	r3, r0
 80024a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80024a6:	bf00      	nop
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80024aa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f8      	bne.n	80024a8 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80024b6:	4907      	ldr	r1, [pc, #28]	; (80024d4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80024b8:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80024c0:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80024c2:	4313      	orrs	r3, r2
 80024c4:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80024c6:	370c      	adds	r7, #12
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	50004000 	.word	0x50004000
 80024d4:	50004300 	.word	0x50004300

080024d8 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80024e2:	bf00      	nop
 80024e4:	4b09      	ldr	r3, [pc, #36]	; (800250c <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80024e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f8      	bne.n	80024e4 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80024f2:	4907      	ldr	r1, [pc, #28]	; (8002510 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80024fe:	4313      	orrs	r3, r2
 8002500:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	50004000 	.word	0x50004000
 8002510:	50004300 	.word	0x50004300

08002514 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800251c:	4906      	ldr	r1, [pc, #24]	; (8002538 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr
 8002538:	50004600 	.word	0x50004600

0800253c <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002544:	4906      	ldr	r1, [pc, #24]	; (8002560 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002552:	4313      	orrs	r3, r2
 8002554:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	50004600 	.word	0x50004600

08002564 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800256c:	4906      	ldr	r1, [pc, #24]	; (8002588 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 800256e:	4b06      	ldr	r3, [pc, #24]	; (8002588 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800257a:	4313      	orrs	r3, r2
 800257c:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 800257e:	370c      	adds	r7, #12
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	50004600 	.word	0x50004600

0800258c <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 8002594:	4906      	ldr	r1, [pc, #24]	; (80025b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8002596:	4b06      	ldr	r3, [pc, #24]	; (80025b0 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80025a2:	4313      	orrs	r3, r2
 80025a4:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	50004600 	.word	0x50004600

080025b4 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80025bc:	4906      	ldr	r1, [pc, #24]	; (80025d8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80025be:	4b06      	ldr	r3, [pc, #24]	; (80025d8 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80025c0:	699b      	ldr	r3, [r3, #24]
 80025c2:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80025ca:	4313      	orrs	r3, r2
 80025cc:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	50004600 	.word	0x50004600

080025dc <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80025e4:	4906      	ldr	r1, [pc, #24]	; (8002600 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80025f6:	370c      	adds	r7, #12
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr
 8002600:	50004600 	.word	0x50004600

08002604 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800260c:	4906      	ldr	r1, [pc, #24]	; (8002628 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800261a:	4313      	orrs	r3, r2
 800261c:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	50004600 	.word	0x50004600

0800262c <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 8002636:	4a04      	ldr	r2, [pc, #16]	; (8002648 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	6053      	str	r3, [r2, #4]
}
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	50004600 	.word	0x50004600

0800264c <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	0f1b      	lsrs	r3, r3, #28
 8002658:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002660:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4613      	mov	r3, r2
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	461a      	mov	r2, r3
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8002670:	4413      	add	r3, r2
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	601a      	str	r2, [r3, #0]
}
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	50004648 	.word	0x50004648

08002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	0f1b      	lsrs	r3, r3, #28
 8002690:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002698:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 800269a:	68fa      	ldr	r2, [r7, #12]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	461a      	mov	r2, r3
 80026a6:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80026a8:	4413      	add	r3, r2
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4013      	ands	r3, r2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	bf14      	ite	ne
 80026b4:	2301      	movne	r3, #1
 80026b6:	2300      	moveq	r3, #0
 80026b8:	b2db      	uxtb	r3, r3
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	50004640 	.word	0x50004640

080026cc <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80026d2:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026da:	f023 0302 	bic.w	r3, r3, #2
 80026de:	6153      	str	r3, [r2, #20]
}
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr
 80026e8:	50004710 	.word	0x50004710

080026ec <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80026f6:	4a28      	ldr	r2, [pc, #160]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8002702:	bf00      	nop
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002706:	691b      	ldr	r3, [r3, #16]
 8002708:	f003 0301 	and.w	r3, r3, #1
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f9      	beq.n	8002704 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002710:	4a21      	ldr	r2, [pc, #132]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002712:	4b21      	ldr	r3, [pc, #132]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	f043 0310 	orr.w	r3, r3, #16
 800271a:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800271c:	491e      	ldr	r1, [pc, #120]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	3b01      	subs	r3, #1
 8002722:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3b01      	subs	r3, #1
 8002728:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800272a:	4313      	orrs	r3, r2
 800272c:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800272e:	4a1a      	ldr	r2, [pc, #104]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002730:	4b19      	ldr	r3, [pc, #100]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800273a:	4a17      	ldr	r2, [pc, #92]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800273e:	695b      	ldr	r3, [r3, #20]
 8002740:	f023 0310 	bic.w	r3, r3, #16
 8002744:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002748:	4b13      	ldr	r3, [pc, #76]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002750:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002752:	bf00      	nop
 8002754:	4b10      	ldr	r3, [pc, #64]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0f9      	beq.n	8002754 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002760:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002762:	4b0d      	ldr	r3, [pc, #52]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f023 0301 	bic.w	r3, r3, #1
 800276a:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 800276c:	bf00      	nop
 800276e:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	f003 0301 	and.w	r3, r3, #1
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f9      	bne.n	800276e <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800277a:	4a07      	ldr	r2, [pc, #28]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800277e:	695b      	ldr	r3, [r3, #20]
 8002780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002784:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8002788:	2208      	movs	r2, #8
 800278a:	60da      	str	r2, [r3, #12]
}
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	50004710 	.word	0x50004710
 800279c:	50004160 	.word	0x50004160

080027a0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	4603      	mov	r3, r0
 80027a8:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80027aa:	4a0f      	ldr	r2, [pc, #60]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027b4:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80027b6:	79fb      	ldrb	r3, [r7, #7]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d10e      	bne.n	80027da <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80027bc:	4a0a      	ldr	r2, [pc, #40]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027be:	4b0a      	ldr	r3, [pc, #40]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027c6:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80027c8:	2064      	movs	r0, #100	; 0x64
 80027ca:	f7ff fcdf 	bl	800218c <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80027ce:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027d0:	4b05      	ldr	r3, [pc, #20]	; (80027e8 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027d8:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80027da:	2064      	movs	r0, #100	; 0x64
 80027dc:	f7ff fcd6 	bl	800218c <XMC_SCU_lDelay>
}
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	50004710 	.word	0x50004710

080027ec <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80027f0:	4b12      	ldr	r3, [pc, #72]	; (800283c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d109      	bne.n	8002810 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80027fe:	2201      	movs	r2, #1
 8002800:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002802:	bf00      	nop
 8002804:	4b0d      	ldr	r3, [pc, #52]	; (800283c <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0f9      	beq.n	8002804 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002810:	4b0b      	ldr	r3, [pc, #44]	; (8002840 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00a      	beq.n	8002832 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800281e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002822:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002824:	bf00      	nop
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282e:	2b00      	cmp	r3, #0
 8002830:	d1f9      	bne.n	8002826 <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	50004200 	.word	0x50004200
 8002840:	50004400 	.word	0x50004400

08002844 <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8002844:	b480      	push	{r7}
 8002846:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d007      	beq.n	8002864 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f403 7300 	and.w	r3, r3, #512	; 0x200
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 800285c:	2b00      	cmp	r3, #0
 800285e:	d101      	bne.n	8002864 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002860:	2301      	movs	r3, #1
 8002862:	e000      	b.n	8002866 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002864:	2300      	movs	r3, #0
 8002866:	f003 0301 	and.w	r3, r3, #1
 800286a:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	50004200 	.word	0x50004200
 800287c:	50004400 	.word	0x50004400

08002880 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	bf0c      	ite	eq
 8002890:	2301      	moveq	r3, #1
 8002892:	2300      	movne	r3, #0
 8002894:	b2db      	uxtb	r3, r3
}
 8002896:	4618      	mov	r0, r3
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	50004300 	.word	0x50004300

080028a4 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 80028a8:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80028ac:	f7ff fcae 	bl	800220c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80028b0:	4a17      	ldr	r2, [pc, #92]	; (8002910 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028b2:	4b17      	ldr	r3, [pc, #92]	; (8002910 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028b4:	69db      	ldr	r3, [r3, #28]
 80028b6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ba:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80028bc:	bf00      	nop
 80028be:	f7ff fc99 	bl	80021f4 <XMC_SCU_INTERUPT_GetEventStatus>
 80028c2:	4603      	mov	r3, r0
 80028c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f8      	beq.n	80028be <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80028cc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028d0:	f7ff fc9c 	bl	800220c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80028d4:	4b0e      	ldr	r3, [pc, #56]	; (8002910 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028d6:	2208      	movs	r2, #8
 80028d8:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80028da:	bf00      	nop
 80028dc:	f7ff fc8a 	bl	80021f4 <XMC_SCU_INTERUPT_GetEventStatus>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f8      	beq.n	80028dc <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80028ea:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80028ee:	f7ff fc8d 	bl	800220c <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80028f2:	4a07      	ldr	r2, [pc, #28]	; (8002910 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	f043 0308 	orr.w	r3, r3, #8
 80028fc:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80028fe:	bf00      	nop
 8002900:	f7ff fc78 	bl	80021f4 <XMC_SCU_INTERUPT_GetEventStatus>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d0f8      	beq.n	8002900 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 800290e:	bd80      	pop	{r7, pc}
 8002910:	50004300 	.word	0x50004300

08002914 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002918:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800291a:	4b0f      	ldr	r3, [pc, #60]	; (8002958 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002922:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002924:	4d0d      	ldr	r5, [pc, #52]	; (800295c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002926:	4b0d      	ldr	r3, [pc, #52]	; (800295c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 800292e:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002932:	f005 ffe9 	bl	8008908 <OSCHP_GetFrequency>
 8002936:	4602      	mov	r2, r0
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800293a:	fba3 2302 	umull	r2, r3, r3, r2
 800293e:	0d1b      	lsrs	r3, r3, #20
 8002940:	3b01      	subs	r3, #1
 8002942:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002944:	4323      	orrs	r3, r4
 8002946:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002948:	4a03      	ldr	r2, [pc, #12]	; (8002958 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800294a:	4b03      	ldr	r3, [pc, #12]	; (8002958 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002952:	6053      	str	r3, [r2, #4]
}
 8002954:	bdb0      	pop	{r4, r5, r7, pc}
 8002956:	bf00      	nop
 8002958:	50004710 	.word	0x50004710
 800295c:	50004700 	.word	0x50004700
 8002960:	6b5fca6b 	.word	0x6b5fca6b

08002964 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002968:	4b07      	ldr	r3, [pc, #28]	; (8002988 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002970:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002974:	bf0c      	ite	eq
 8002976:	2301      	moveq	r3, #1
 8002978:	2300      	movne	r3, #0
 800297a:	b2db      	uxtb	r3, r3
}
 800297c:	4618      	mov	r0, r3
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	50004710 	.word	0x50004710

0800298c <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002990:	4a05      	ldr	r2, [pc, #20]	; (80029a8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800299a:	f023 0302 	bic.w	r3, r3, #2
 800299e:	6053      	str	r3, [r2, #4]
}
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	50004710 	.word	0x50004710

080029ac <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80029b0:	4a05      	ldr	r2, [pc, #20]	; (80029c8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80029b2:	4b05      	ldr	r3, [pc, #20]	; (80029c8 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ba:	f043 0302 	orr.w	r3, r3, #2
 80029be:	6053      	str	r3, [r2, #4]
}
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	50004710 	.word	0x50004710

080029cc <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b086      	sub	sp, #24
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60ba      	str	r2, [r7, #8]
 80029d4:	607b      	str	r3, [r7, #4]
 80029d6:	4603      	mov	r3, r0
 80029d8:	81fb      	strh	r3, [r7, #14]
 80029da:	460b      	mov	r3, r1
 80029dc:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80029de:	89fb      	ldrh	r3, [r7, #14]
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff fd3b 	bl	800245c <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80029e6:	7b7b      	ldrb	r3, [r7, #13]
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	f040 808b 	bne.w	8002b04 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 80029ee:	89fb      	ldrh	r3, [r7, #14]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d109      	bne.n	8002a08 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 80029f4:	f005 ff88 	bl	8008908 <OSCHP_GetFrequency>
 80029f8:	4602      	mov	r2, r0
 80029fa:	4b54      	ldr	r3, [pc, #336]	; (8002b4c <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 80029fc:	fba3 2302 	umull	r2, r3, r3, r2
 8002a00:	0c9b      	lsrs	r3, r3, #18
 8002a02:	059b      	lsls	r3, r3, #22
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	e002      	b.n	8002a0e <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002a08:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002a0c:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	fb02 f203 	mul.w	r2, r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8002a22:	fba2 2303 	umull	r2, r3, r2, r3
 8002a26:	091b      	lsrs	r3, r3, #4
 8002a28:	0d9b      	lsrs	r3, r3, #22
 8002a2a:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002a2c:	4a49      	ldr	r2, [pc, #292]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a2e:	4b49      	ldr	r3, [pc, #292]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f043 0301 	orr.w	r3, r3, #1
 8002a36:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002a38:	bf00      	nop
 8002a3a:	4b46      	ldr	r3, [pc, #280]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d0f9      	beq.n	8002a3a <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a46:	4a43      	ldr	r2, [pc, #268]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a48:	4b42      	ldr	r3, [pc, #264]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f043 0310 	orr.w	r3, r3, #16
 8002a50:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a52:	4940      	ldr	r1, [pc, #256]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a54:	4b3f      	ldr	r3, [pc, #252]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8002a5a:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	3a01      	subs	r2, #1
 8002a60:	0212      	lsls	r2, r2, #8
 8002a62:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	3b01      	subs	r3, #1
 8002a68:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a6a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002a76:	4a37      	ldr	r2, [pc, #220]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a78:	4b36      	ldr	r3, [pc, #216]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a80:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a82:	4a34      	ldr	r2, [pc, #208]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a84:	4b33      	ldr	r3, [pc, #204]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 0310 	bic.w	r3, r3, #16
 8002a8c:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002a8e:	4a31      	ldr	r2, [pc, #196]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a90:	4b30      	ldr	r3, [pc, #192]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a98:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002a9a:	bf00      	nop
 8002a9c:	4b2d      	ldr	r3, [pc, #180]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d0f9      	beq.n	8002a9c <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002aa8:	4a2a      	ldr	r2, [pc, #168]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002aaa:	4b2a      	ldr	r3, [pc, #168]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f023 0301 	bic.w	r3, r3, #1
 8002ab2:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002ab4:	bf00      	nop
 8002ab6:	4b27      	ldr	r3, [pc, #156]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0301 	and.w	r3, r3, #1
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d1f9      	bne.n	8002ab6 <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	4a25      	ldr	r2, [pc, #148]	; (8002b5c <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002ac6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	0d9b      	lsrs	r3, r3, #22
 8002ace:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002ad0:	6a3a      	ldr	r2, [r7, #32]
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d202      	bcs.n	8002ade <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002ad8:	6938      	ldr	r0, [r7, #16]
 8002ada:	f000 f845 	bl	8002b68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	085b      	lsrs	r3, r3, #1
 8002ae2:	4a1f      	ldr	r2, [pc, #124]	; (8002b60 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8002ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	0d9b      	lsrs	r3, r3, #22
 8002aec:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002aee:	6a3a      	ldr	r2, [r7, #32]
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d202      	bcs.n	8002afc <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002af6:	6938      	ldr	r0, [r7, #16]
 8002af8:	f000 f836 	bl	8002b68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002afc:	6a38      	ldr	r0, [r7, #32]
 8002afe:	f000 f833 	bl	8002b68 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8002b02:	e01c      	b.n	8002b3e <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b04:	4913      	ldr	r1, [pc, #76]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b06:	4b13      	ldr	r3, [pc, #76]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8002b16:	bf00      	nop
 8002b18:	4b0e      	ldr	r3, [pc, #56]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0310 	and.w	r3, r3, #16
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d0f9      	beq.n	8002b18 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002b24:	4a0b      	ldr	r2, [pc, #44]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b26:	4b0b      	ldr	r3, [pc, #44]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002b30:	bf00      	nop
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f9      	beq.n	8002b32 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002b3e:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8002b40:	2205      	movs	r2, #5
 8002b42:	60da      	str	r2, [r3, #12]
}
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	431bde83 	.word	0x431bde83
 8002b50:	aaaaaaab 	.word	0xaaaaaaab
 8002b54:	50004710 	.word	0x50004710
 8002b58:	f08080ff 	.word	0xf08080ff
 8002b5c:	88888889 	.word	0x88888889
 8002b60:	b60b60b7 	.word	0xb60b60b7
 8002b64:	50004160 	.word	0x50004160

08002b68 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b70:	490b      	ldr	r1, [pc, #44]	; (8002ba0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b72:	4b0b      	ldr	r3, [pc, #44]	; (8002ba0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8002b84:	bf00      	nop
 8002b86:	4b06      	ldr	r3, [pc, #24]	; (8002ba0 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0320 	and.w	r3, r3, #32
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0f9      	beq.n	8002b86 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8002b92:	2032      	movs	r0, #50	; 0x32
 8002b94:	f7ff fafa 	bl	800218c <XMC_SCU_lDelay>
}
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	50004710 	.word	0x50004710

08002ba4 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	bf0c      	ite	eq
 8002bba:	2301      	moveq	r3, #1
 8002bbc:	2300      	movne	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70bb      	strb	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002be6:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002be8:	78bb      	ldrb	r3, [r7, #2]
 8002bea:	041b      	lsls	r3, r3, #16
 8002bec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002bf0:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8002bf2:	787b      	ldrb	r3, [r7, #1]
 8002bf4:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002bf6:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
}
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop

08002c28 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	601a      	str	r2, [r3, #0]
}
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop

08002c48 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4293      	cmp	r3, r2
 8002c58:	bf38      	it	cc
 8002c5a:	4613      	movcc	r3, r2
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b083      	sub	sp, #12
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	4293      	cmp	r3, r2
 8002c78:	bf28      	it	cs
 8002c7a:	4613      	movcs	r3, r2
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	6852      	ldr	r2, [r2, #4]
 8002c9a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c9e:	fb02 f201 	mul.w	r2, r2, r1
 8002ca2:	1a9b      	subs	r3, r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f040 8090 	bne.w	8002dca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbe:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002ccc:	e04b      	b.n	8002d66 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	697a      	ldr	r2, [r7, #20]
 8002cd2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cd6:	6979      	ldr	r1, [r7, #20]
 8002cd8:	fb01 f202 	mul.w	r2, r1, r2
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d13e      	bne.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8002ce6:	68ba      	ldr	r2, [r7, #8]
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cee:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d034      	beq.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cfc:	d830      	bhi.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	2b3f      	cmp	r3, #63	; 0x3f
 8002d02:	d90a      	bls.n	8002d1a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	3b01      	subs	r3, #1
 8002d12:	617b      	str	r3, [r7, #20]
              continue;
 8002d14:	e027      	b.n	8002d66 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	8912      	ldrh	r2, [r2, #8]
 8002d22:	fb02 f303 	mul.w	r3, r2, r3
 8002d26:	4a2b      	ldr	r2, [pc, #172]	; (8002dd4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8002d28:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2c:	0b5b      	lsrs	r3, r3, #13
 8002d2e:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	3b01      	subs	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d90f      	bls.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d40:	693b      	ldr	r3, [r7, #16]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	d80c      	bhi.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d909      	bls.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d806      	bhi.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	895b      	ldrh	r3, [r3, #10]
 8002d56:	461a      	mov	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d800      	bhi.n	8002d60 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8002d5e:	e005      	b.n	8002d6c <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	d8b0      	bhi.n	8002cce <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b07      	cmp	r3, #7
 8002d70:	d92b      	bls.n	8002dca <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff ff48 	bl	8002c08 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	031b      	lsls	r3, r3, #12
 8002d7e:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	895b      	ldrh	r3, [r3, #10]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	019b      	lsls	r3, r3, #6
 8002d8a:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002d8c:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	021b      	lsls	r3, r3, #8
 8002d94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002d98:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	005b      	lsls	r3, r3, #1
 8002da2:	4413      	add	r3, r2
 8002da4:	461a      	mov	r2, r3
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	40d3      	lsrs	r3, r2
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002db0:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	03db      	lsls	r3, r3, #15
 8002db8:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002dba:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff ff31 	bl	8002c28 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	e000      	b.n	8002dcc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8002dca:	2301      	movs	r3, #1
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	d1b71759 	.word	0xd1b71759

08002dd8 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70fb      	strb	r3, [r7, #3]
 8002de4:	4613      	mov	r3, r2
 8002de6:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8002de8:	bf00      	nop
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f7ff feda 	bl	8002ba4 <XMC_CAN_IsPanelControlReady>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f083 0301 	eor.w	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f6      	bne.n	8002dea <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8002dfc:	78fb      	ldrb	r3, [r7, #3]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	78ba      	ldrb	r2, [r7, #2]
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	2102      	movs	r1, #2
 8002e08:	f7ff fee0 	bl	8002bcc <XMC_CAN_PanelControl>
}
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop

08002e14 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8002e1c:	480a      	ldr	r0, [pc, #40]	; (8002e48 <XMC_CAN_Enable+0x34>)
 8002e1e:	f7ff fc15 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002e22:	4809      	ldr	r0, [pc, #36]	; (8002e48 <XMC_CAN_Enable+0x34>)
 8002e24:	f7ff fa8e 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 0201 	bic.w	r2, r3, #1
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8002e34:	bf00      	nop
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f9      	bne.n	8002e36 <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8002e42:	3708      	adds	r7, #8
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	10000010 	.word	0x10000010

08002e4c <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
 8002e54:	460b      	mov	r3, r1
 8002e56:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002e5e:	f023 020f 	bic.w	r2, r3, #15
 8002e62:	78fb      	ldrb	r3, [r7, #3]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop

08002e78 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	370c      	adds	r7, #12
 8002e92:	46bd      	mov	sp, r7
 8002e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e98:	4770      	bx	lr
 8002e9a:	bf00      	nop

08002e9c <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b084      	sub	sp, #16
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ffe5 	bl	8002e78 <XMC_CAN_GetBaudrateClockSource>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d004      	beq.n	8002ec2 <XMC_CAN_GetBaudrateClockFrequency+0x26>
 8002eb8:	e007      	b.n	8002eca <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8002eba:	f7ff fa83 	bl	80023c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002ebe:	60f8      	str	r0, [r7, #12]
      break;
 8002ec0:	e003      	b.n	8002eca <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 8002ec2:	f005 fd21 	bl	8008908 <OSCHP_GetFrequency>
 8002ec6:	60f8      	str	r0, [r7, #12]
      break;
 8002ec8:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	460b      	mov	r3, r1
 8002ede:	607a      	str	r2, [r7, #4]
 8002ee0:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8002ee2:	68f8      	ldr	r0, [r7, #12]
 8002ee4:	f7ff ff96 	bl	8002e14 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	4619      	mov	r1, r3
 8002eee:	f7ff ffad 	bl	8002e4c <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff ffd2 	bl	8002e9c <XMC_CAN_GetBaudrateClockFrequency>
 8002ef8:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8002efa:	69fa      	ldr	r2, [r7, #28]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002f06:	2000      	movs	r0, #0
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7ff fe9d 	bl	8002c48 <max>
 8002f0e:	4603      	mov	r3, r0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f16:	f7ff fea7 	bl	8002c68 <min>
 8002f1a:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002f22:	69fa      	ldr	r2, [r7, #28]
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	68da      	ldr	r2, [r3, #12]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	4313      	orrs	r3, r2
 8002f42:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	60da      	str	r2, [r3, #12]

  return freq_n;
 8002f4a:	697b      	ldr	r3, [r7, #20]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3720      	adds	r7, #32
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8002f64:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8002f68:	095b      	lsrs	r3, r3, #5
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	035a      	lsls	r2, r3, #13
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	f003 031f 	and.w	r3, r3, #31
 8002f78:	021b      	lsls	r3, r3, #8
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6812      	ldr	r2, [r2, #0]
 8002f86:	6892      	ldr	r2, [r2, #8]
 8002f88:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002f8c:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	687a      	ldr	r2, [r7, #4]
 8002f94:	6812      	ldr	r2, [r2, #0]
 8002f96:	6891      	ldr	r1, [r2, #8]
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	79db      	ldrb	r3, [r3, #7]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d007      	beq.n	8002fbc <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	79db      	ldrb	r3, [r3, #7]
 8002fb0:	f003 0320 	and.w	r3, r3, #32
 8002fb4:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d100      	bne.n	8002fbc <XMC_CAN_MO_Config+0x68>
 8002fba:	e060      	b.n	800307e <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d000      	beq.n	8002fce <XMC_CAN_MO_Config+0x7a>
 8002fcc:	e057      	b.n	800307e <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	79db      	ldrb	r3, [r3, #7]
 8002fda:	f003 0320 	and.w	r3, r3, #32
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d128      	bne.n	8003036 <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8002ff0:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8002ffa:	049b      	lsls	r3, r3, #18
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4313      	orrs	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003018:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8003022:	049b      	lsls	r3, r3, #18
 8003024:	461a      	mov	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	60da      	str	r2, [r3, #12]
 8003034:	e009      	b.n	800304a <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6852      	ldr	r2, [r2, #4]
 800303e:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	6892      	ldr	r2, [r2, #8]
 8003048:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	7e1b      	ldrb	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10c      	bne.n	800306c <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f81a 	bl	800308c <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003060:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <XMC_CAN_MO_Config+0x130>)
 8003068:	61da      	str	r2, [r3, #28]
 800306a:	e008      	b.n	800307e <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003074:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a03      	ldr	r2, [pc, #12]	; (8003088 <XMC_CAN_MO_Config+0x134>)
 800307c:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 800307e:	3718      	adds	r7, #24
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	062000c0 	.word	0x062000c0
 8003088:	00a00640 	.word	0x00a00640

0800308c <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 800308c:	b480      	push	{r7}
 800308e:	b085      	sub	sp, #20
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8003094:	2303      	movs	r3, #3
 8003096:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	7e1b      	ldrb	r3, [r3, #24]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d122      	bne.n	80030e6 <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2220      	movs	r2, #32
 80030a6:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	6812      	ldr	r2, [r2, #0]
 80030b2:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	7b12      	ldrb	r2, [r2, #12]
 80030ba:	0612      	lsls	r2, r2, #24
 80030bc:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80030c0:	430a      	orrs	r2, r1
 80030c2:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	6912      	ldr	r2, [r2, #16]
 80030cc:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6952      	ldr	r2, [r2, #20]
 80030d6:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a06      	ldr	r2, [pc, #24]	; (80030f8 <XMC_CAN_MO_UpdateData+0x6c>)
 80030de:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80030e0:	2300      	movs	r3, #0
 80030e2:	73fb      	strb	r3, [r7, #15]
 80030e4:	e001      	b.n	80030ea <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80030e6:	2303      	movs	r3, #3
 80030e8:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	00280040 	.word	0x00280040

080030fc <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	69db      	ldr	r3, [r3, #28]
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	095b      	lsrs	r3, r3, #5
 8003114:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d102      	bne.n	8003130 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800312a:	2304      	movs	r3, #4
 800312c:	75fb      	strb	r3, [r7, #23]
 800312e:	e00c      	b.n	800314a <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2b01      	cmp	r3, #1
 8003134:	d102      	bne.n	800313c <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 8003136:	2302      	movs	r3, #2
 8003138:	75fb      	strb	r3, [r7, #23]
 800313a:	e006      	b.n	800314a <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003144:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 8003146:	2300      	movs	r3, #0
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	371c      	adds	r7, #28
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8003164:	2300      	movs	r3, #0
 8003166:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8003168:	2300      	movs	r3, #0
 800316a:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003176:	0adb      	lsrs	r3, r3, #11
 8003178:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f003 0304 	and.w	r3, r3, #4
 8003184:	089b      	lsrs	r3, r3, #2
 8003186:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800318e:	2303      	movs	r3, #3
 8003190:	75fb      	strb	r3, [r7, #23]
 8003192:	e0a7      	b.n	80032e4 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d102      	bne.n	80031a0 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 800319a:	2302      	movs	r3, #2
 800319c:	75fb      	strb	r3, [r7, #23]
 800319e:	e0a1      	b.n	80032e4 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2208      	movs	r2, #8
 80031a6:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b2:	0f5b      	lsrs	r3, r3, #29
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d140      	bne.n	800323a <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	79d3      	ldrb	r3, [r2, #7]
 80031bc:	f36f 1345 	bfc	r3, #5, #1
 80031c0:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699a      	ldr	r2, [r3, #24]
 80031c8:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <XMC_CAN_MO_Receive+0x19c>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	0c9b      	lsrs	r3, r3, #18
 80031ce:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	6853      	ldr	r3, [r2, #4]
 80031d6:	f361 031c 	bfi	r3, r1, #0, #29
 80031da:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e6:	0f5b      	lsrs	r3, r3, #29
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2d9      	uxtb	r1, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	7ad3      	ldrb	r3, [r2, #11]
 80031f4:	f361 1345 	bfi	r3, r1, #5, #1
 80031f8:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	7adb      	ldrb	r3, [r3, #11]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00d      	beq.n	8003224 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	4b39      	ldr	r3, [pc, #228]	; (80032f4 <XMC_CAN_MO_Receive+0x19c>)
 8003210:	4013      	ands	r3, r2
 8003212:	0c9b      	lsrs	r3, r3, #18
 8003214:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6893      	ldr	r3, [r2, #8]
 800321c:	f361 031c 	bfi	r3, r1, #0, #29
 8003220:	6093      	str	r3, [r2, #8]
 8003222:	e032      	b.n	800328a <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	6893      	ldr	r3, [r2, #8]
 8003232:	f361 031c 	bfi	r3, r1, #0, #29
 8003236:	6093      	str	r3, [r2, #8]
 8003238:	e027      	b.n	800328a <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	79d3      	ldrb	r3, [r2, #7]
 800323e:	f043 0320 	orr.w	r3, r3, #32
 8003242:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6853      	ldr	r3, [r2, #4]
 8003252:	f361 031c 	bfi	r3, r1, #0, #29
 8003256:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6893      	ldr	r3, [r2, #8]
 8003266:	f361 031c 	bfi	r3, r1, #0, #29
 800326a:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003276:	0f5b      	lsrs	r3, r3, #29
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	b2d9      	uxtb	r1, r3
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	7ad3      	ldrb	r3, [r2, #11]
 8003284:	f361 1345 	bfi	r3, r1, #5, #1
 8003288:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8003294:	0e1b      	lsrs	r3, r3, #24
 8003296:	b2da      	uxtb	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	691a      	ldr	r2, [r3, #16]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	695a      	ldr	r2, [r3, #20]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	f003 0304 	and.w	r3, r3, #4
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69db      	ldr	r3, [r3, #28]
 80032c4:	f003 0308 	and.w	r3, r3, #8
 80032c8:	08db      	lsrs	r3, r3, #3
 80032ca:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 80032cc:	7dbb      	ldrb	r3, [r7, #22]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <XMC_CAN_MO_Receive+0x182>
 80032d2:	7d7b      	ldrb	r3, [r7, #21]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f af63 	bne.w	80031a0 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80032e0:	2300      	movs	r3, #0
 80032e2:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	371c      	adds	r7, #28
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	1ffc0000 	.word	0x1ffc0000

080032f8 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003308:	d006      	beq.n	8003318 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e005      	b.n	8003324 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699a      	ldr	r2, [r3, #24]
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
}
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800333e:	60da      	str	r2, [r3, #12]
}
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop

0800334c <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <XMC_CCU4_lDeassertReset+0x4c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d103      	bne.n	8003364 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 800335c:	2004      	movs	r0, #4
 800335e:	f7fe fff1 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003362:	e016      	b.n	8003392 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	4a0d      	ldr	r2, [pc, #52]	; (800339c <XMC_CCU4_lDeassertReset+0x50>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d103      	bne.n	8003374 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 800336c:	2008      	movs	r0, #8
 800336e:	f7fe ffe9 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003372:	e00e      	b.n	8003392 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a0a      	ldr	r2, [pc, #40]	; (80033a0 <XMC_CCU4_lDeassertReset+0x54>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d103      	bne.n	8003384 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 800337c:	2010      	movs	r0, #16
 800337e:	f7fe ffe1 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003382:	e006      	b.n	8003392 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a07      	ldr	r2, [pc, #28]	; (80033a4 <XMC_CCU4_lDeassertReset+0x58>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d102      	bne.n	8003392 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 800338c:	4806      	ldr	r0, [pc, #24]	; (80033a8 <XMC_CCU4_lDeassertReset+0x5c>)
 800338e:	f7fe ffd9 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8003392:	3708      	adds	r7, #8
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	4000c000 	.word	0x4000c000
 800339c:	40010000 	.word	0x40010000
 80033a0:	40014000 	.word	0x40014000
 80033a4:	48004000 	.word	0x48004000
 80033a8:	10000001 	.word	0x10000001

080033ac <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a10      	ldr	r2, [pc, #64]	; (80033f8 <XMC_CCU4_lUngateClock+0x4c>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d103      	bne.n	80033c4 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80033bc:	2004      	movs	r0, #4
 80033be:	f7ff f945 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033c2:	e016      	b.n	80033f2 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a0d      	ldr	r2, [pc, #52]	; (80033fc <XMC_CCU4_lUngateClock+0x50>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d103      	bne.n	80033d4 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80033cc:	2008      	movs	r0, #8
 80033ce:	f7ff f93d 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033d2:	e00e      	b.n	80033f2 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a0a      	ldr	r2, [pc, #40]	; (8003400 <XMC_CCU4_lUngateClock+0x54>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d103      	bne.n	80033e4 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80033dc:	2010      	movs	r0, #16
 80033de:	f7ff f935 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033e2:	e006      	b.n	80033f2 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a07      	ldr	r2, [pc, #28]	; (8003404 <XMC_CCU4_lUngateClock+0x58>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d102      	bne.n	80033f2 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80033ec:	4806      	ldr	r0, [pc, #24]	; (8003408 <XMC_CCU4_lUngateClock+0x5c>)
 80033ee:	f7ff f92d 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	4000c000 	.word	0x4000c000
 80033fc:	40010000 	.word	0x40010000
 8003400:	40014000 	.word	0x40014000
 8003404:	48004000 	.word	0x48004000
 8003408:	10000001 	.word	0x10000001

0800340c <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003414:	2010      	movs	r0, #16
 8003416:	f7ff f909 	bl	800262c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffc6 	bl	80033ac <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff93 	bl	800334c <XMC_CCU4_lDeassertReset>
#endif
}
 8003426:	3708      	adds	r7, #8
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	460b      	mov	r3, r1
 8003436:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ffe7 	bl	800340c <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ff76 	bl	8003330 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003450:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8003452:	78fb      	ldrb	r3, [r7, #3]
 8003454:	039b      	lsls	r3, r3, #14
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4313      	orrs	r3, r2
 800345a:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	601a      	str	r2, [r3, #0]
}
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	681a      	ldr	r2, [r3, #0]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	795b      	ldrb	r3, [r3, #5]
 800347e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	051a      	lsls	r2, r3, #20
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	791b      	ldrb	r3, [r3, #4]
 800348e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003492:	b2db      	uxtb	r3, r3
 8003494:	461a      	mov	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	795b      	ldrb	r3, [r3, #5]
 800349e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	795b      	ldrb	r3, [r3, #5]
 80034ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	791b      	ldrb	r3, [r3, #4]
 80034be:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b085      	sub	sp, #20
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034ec:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	021b      	lsls	r3, r3, #8
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68fa      	ldr	r2, [r7, #12]
 80034fc:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop

08003510 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8003510:	b480      	push	{r7}
 8003512:	b087      	sub	sp, #28
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	70fb      	strb	r3, [r7, #3]
 800351c:	4613      	mov	r3, r2
 800351e:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	2b0b      	cmp	r3, #11
 8003524:	d836      	bhi.n	8003594 <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 8003526:	a201      	add	r2, pc, #4	; (adr r2, 800352c <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8003528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800352c:	0800355d 	.word	0x0800355d
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003567 	.word	0x08003567
 8003538:	08003567 	.word	0x08003567
 800353c:	08003595 	.word	0x08003595
 8003540:	08003595 	.word	0x08003595
 8003544:	08003595 	.word	0x08003595
 8003548:	08003595 	.word	0x08003595
 800354c:	08003571 	.word	0x08003571
 8003550:	0800357d 	.word	0x0800357d
 8003554:	08003589 	.word	0x08003589
 8003558:	08003589 	.word	0x08003589
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 800355c:	2303      	movs	r3, #3
 800355e:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
      break;
 8003564:	e01b      	b.n	800359e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 8003566:	230c      	movs	r3, #12
 8003568:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 800356a:	2302      	movs	r3, #2
 800356c:	617b      	str	r3, [r7, #20]
      break;
 800356e:	e016      	b.n	800359e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8003570:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003574:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 8003576:	2308      	movs	r3, #8
 8003578:	617b      	str	r3, [r7, #20]
      break;
 800357a:	e010      	b.n	800359e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 800357c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003580:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 8003582:	230a      	movs	r3, #10
 8003584:	617b      	str	r3, [r7, #20]
      break;
 8003586:	e00a      	b.n	800359e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8003588:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800358c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 800358e:	230c      	movs	r3, #12
 8003590:	617b      	str	r3, [r7, #20]
      break;
 8003592:	e004      	b.n	800359e <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]
	  break;
 800359c:	bf00      	nop
  }

  if (mask != 0)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d013      	beq.n	80035cc <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80035aa:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	43db      	mvns	r3, r3
 80035b0:	68fa      	ldr	r2, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 80035b6:	78ba      	ldrb	r2, [r7, #2]
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 80035cc:	371c      	adds	r7, #28
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop

080035d8 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035e6:	60da      	str	r2, [r3, #12]
}
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop

080035f4 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	611a      	str	r2, [r3, #16]
}
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a09      	ldr	r2, [pc, #36]	; (800363c <XMC_CCU8_lDeassertReset+0x30>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d103      	bne.n	8003624 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 800361c:	2080      	movs	r0, #128	; 0x80
 800361e:	f7fe fe91 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003622:	e007      	b.n	8003634 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a06      	ldr	r2, [pc, #24]	; (8003640 <XMC_CCU8_lDeassertReset+0x34>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d103      	bne.n	8003634 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 800362c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003630:	f7fe fe88 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40020000 	.word	0x40020000
 8003640:	40024000 	.word	0x40024000

08003644 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	4a09      	ldr	r2, [pc, #36]	; (8003674 <XMC_CCU8_lUngateClock+0x30>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d103      	bne.n	800365c <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 8003654:	2080      	movs	r0, #128	; 0x80
 8003656:	f7fe fff9 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
 800365a:	e007      	b.n	800366c <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	4a06      	ldr	r2, [pc, #24]	; (8003678 <XMC_CCU8_lUngateClock+0x34>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d103      	bne.n	800366c <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 8003664:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003668:	f7fe fff0 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop
 8003674:	40020000 	.word	0x40020000
 8003678:	40024000 	.word	0x40024000

0800367c <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b082      	sub	sp, #8
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003684:	2010      	movs	r0, #16
 8003686:	f7fe ffd1 	bl	800262c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7ff ffda 	bl	8003644 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8003690:	6878      	ldr	r0, [r7, #4]
 8003692:	f7ff ffbb 	bl	800360c <XMC_CCU8_lDeassertReset>
#endif
}
 8003696:	3708      	adds	r7, #8
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	460b      	mov	r3, r1
 80036a6:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f7ff ffe7 	bl	800367c <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f7ff ff92 	bl	80035d8 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80036c0:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80036c2:	78fb      	ldrb	r3, [r7, #3]
 80036c4:	039b      	lsls	r3, r3, #14
 80036c6:	68fa      	ldr	r2, [r7, #12]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68fa      	ldr	r2, [r7, #12]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7ff ff86 	bl	80035f4 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	7b5b      	ldrb	r3, [r3, #13]
 80036f4:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	051a      	lsls	r2, r3, #20
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	7b1b      	ldrb	r3, [r3, #12]
 8003704:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003708:	b2db      	uxtb	r3, r3
 800370a:	461a      	mov	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	7b1b      	ldrb	r3, [r3, #12]
 8003714:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003718:	b2db      	uxtb	r3, r3
 800371a:	461a      	mov	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	7b5b      	ldrb	r3, [r3, #13]
 8003724:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461a      	mov	r2, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f083 0214 	eor.w	r2, r3, #20
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop

0800374c <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	460b      	mov	r3, r1
 8003756:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003758:	887a      	ldrh	r2, [r7, #2]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <XMC_CCU8_SLICE_SetPrescaler>:
  XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scaler divider  */
void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t div_val)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003778:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003780:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68fa      	ldr	r2, [r7, #12]
 8003790:	629a      	str	r2, [r3, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003798:	3714      	adds	r7, #20
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop

080037a4 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
 80037b0:	4613      	mov	r3, r2
 80037b2:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80037ba:	883a      	ldrh	r2, [r7, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	63da      	str	r2, [r3, #60]	; 0x3c
 80037c0:	e002      	b.n	80037c8 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80037c2:	883a      	ldrh	r2, [r7, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop

080037d4 <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b087      	sub	sp, #28
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	460b      	mov	r3, r1
 80037de:	70fb      	strb	r3, [r7, #3]
 80037e0:	4613      	mov	r3, r2
 80037e2:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d83b      	bhi.n	8003862 <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <XMC_CCU8_SLICE_SetInterruptNode+0x1c>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003821 	.word	0x08003821
 80037f4:	08003821 	.word	0x08003821
 80037f8:	0800382b 	.word	0x0800382b
 80037fc:	0800382b 	.word	0x0800382b
 8003800:	08003835 	.word	0x08003835
 8003804:	08003835 	.word	0x08003835
 8003808:	08003863 	.word	0x08003863
 800380c:	08003863 	.word	0x08003863
 8003810:	0800383f 	.word	0x0800383f
 8003814:	0800384b 	.word	0x0800384b
 8003818:	08003857 	.word	0x08003857
 800381c:	08003857 	.word	0x08003857
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8003820:	2303      	movs	r3, #3
 8003822:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 8003824:	2300      	movs	r3, #0
 8003826:	613b      	str	r3, [r7, #16]
      break;
 8003828:	e020      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 800382a:	230c      	movs	r3, #12
 800382c:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 800382e:	2302      	movs	r3, #2
 8003830:	613b      	str	r3, [r7, #16]
      break;
 8003832:	e01b      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 8003834:	2330      	movs	r3, #48	; 0x30
 8003836:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8003838:	2304      	movs	r3, #4
 800383a:	613b      	str	r3, [r7, #16]
      break;
 800383c:	e016      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 800383e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003842:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 8003844:	2308      	movs	r3, #8
 8003846:	613b      	str	r3, [r7, #16]
      break;
 8003848:	e010      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 800384a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800384e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8003850:	230a      	movs	r3, #10
 8003852:	613b      	str	r3, [r7, #16]
      break;
 8003854:	e00a      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 8003856:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800385a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 800385c:	230c      	movs	r3, #12
 800385e:	613b      	str	r3, [r7, #16]
      break;
 8003860:	e004      	b.n	800386c <XMC_CCU8_SLICE_SetInterruptNode+0x98>
	  
	default:
	  mask = 0;
 8003862:	2300      	movs	r3, #0
 8003864:	617b      	str	r3, [r7, #20]
	  pos = 0;
 8003866:	2300      	movs	r3, #0
 8003868:	613b      	str	r3, [r7, #16]
	  break;
 800386a:	bf00      	nop
  }

  if (mask != 0)
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d013      	beq.n	800389a <XMC_CCU8_SLICE_SetInterruptNode+0xc6>
  {
    srs = slice->SRS;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003878:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	43db      	mvns	r3, r3
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 8003884:	78ba      	ldrb	r2, [r7, #2]
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	68fa      	ldr	r2, [r7, #12]
 800388e:	4313      	orrs	r3, r2
 8003890:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	68fa      	ldr	r2, [r7, #12]
 8003896:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop

080038c0 <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b083      	sub	sp, #12
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop

080038dc <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	370c      	adds	r7, #12
 80038ee:	46bd      	mov	sp, r7
 80038f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f4:	4770      	bx	lr
 80038f6:	bf00      	nop

080038f8 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop

08003914 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003914:	b480      	push	{r7}
 8003916:	b083      	sub	sp, #12
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 8003922:	4618      	mov	r0, r3
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop

08003930 <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
 800394a:	bf00      	nop

0800394c <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f803 	bl	8003960 <XMC_DMA_Enable>
}
 800395a:	3708      	adds	r7, #8
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a0b      	ldr	r2, [pc, #44]	; (8003998 <XMC_DMA_Enable+0x38>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d106      	bne.n	800397e <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8003970:	480a      	ldr	r0, [pc, #40]	; (800399c <XMC_DMA_Enable+0x3c>)
 8003972:	f7fe fe6b 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8003976:	4809      	ldr	r0, [pc, #36]	; (800399c <XMC_DMA_Enable+0x3c>)
 8003978:	f7fe fce4 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
 800397c:	e005      	b.n	800398a <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 800397e:	4808      	ldr	r0, [pc, #32]	; (80039a0 <XMC_DMA_Enable+0x40>)
 8003980:	f7fe fe64 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8003984:	4806      	ldr	r0, [pc, #24]	; (80039a0 <XMC_DMA_Enable+0x40>)
 8003986:	f7fe fcdd 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	50014000 	.word	0x50014000
 800399c:	20000010 	.word	0x20000010
 80039a0:	20000020 	.word	0x20000020

080039a4 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	4a33      	ldr	r2, [pc, #204]	; (8003a7c <XMC_DMA_IsEnabled+0xd8>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d125      	bne.n	8003a00 <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80039b4:	4832      	ldr	r0, [pc, #200]	; (8003a80 <XMC_DMA_IsEnabled+0xdc>)
 80039b6:	f7fe fce1 	bl	800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f083 0301 	eor.w	r3, r3, #1
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	7bfb      	ldrb	r3, [r7, #15]
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d00a      	beq.n	80039f2 <XMC_DMA_IsEnabled+0x4e>
 80039dc:	4828      	ldr	r0, [pc, #160]	; (8003a80 <XMC_DMA_IsEnabled+0xdc>)
 80039de:	f7fe fe51 	bl	8002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <XMC_DMA_IsEnabled+0x4e>
 80039ee:	2301      	movs	r3, #1
 80039f0:	e000      	b.n	80039f4 <XMC_DMA_IsEnabled+0x50>
 80039f2:	2300      	movs	r3, #0
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	7bfb      	ldrb	r3, [r7, #15]
 80039f8:	f003 0301 	and.w	r3, r3, #1
 80039fc:	73fb      	strb	r3, [r7, #15]
 80039fe:	e024      	b.n	8003a4a <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8003a00:	4820      	ldr	r0, [pc, #128]	; (8003a84 <XMC_DMA_IsEnabled+0xe0>)
 8003a02:	f7fe fcbb 	bl	800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003a06:	4603      	mov	r3, r0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	bf14      	ite	ne
 8003a0c:	2301      	movne	r3, #1
 8003a0e:	2300      	moveq	r3, #0
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f083 0301 	eor.w	r3, r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfb      	ldrb	r3, [r7, #15]
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00a      	beq.n	8003a3e <XMC_DMA_IsEnabled+0x9a>
 8003a28:	4816      	ldr	r0, [pc, #88]	; (8003a84 <XMC_DMA_IsEnabled+0xe0>)
 8003a2a:	f7fe fe2b 	bl	8002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	f083 0301 	eor.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <XMC_DMA_IsEnabled+0x9a>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <XMC_DMA_IsEnabled+0x9c>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]
 8003a42:	7bfb      	ldrb	r3, [r7, #15]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00f      	beq.n	8003a70 <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 8003a50:	7bfb      	ldrb	r3, [r7, #15]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d006      	beq.n	8003a64 <XMC_DMA_IsEnabled+0xc0>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d001      	beq.n	8003a64 <XMC_DMA_IsEnabled+0xc0>
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <XMC_DMA_IsEnabled+0xc2>
 8003a64:	2300      	movs	r3, #0
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3710      	adds	r7, #16
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	50014000 	.word	0x50014000
 8003a80:	20000010 	.word	0x20000010
 8003a84:	20000020 	.word	0x20000020

08003a88 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	460b      	mov	r3, r1
 8003a92:	70fb      	strb	r3, [r7, #3]
 8003a94:	4613      	mov	r3, r2
 8003a96:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a1f      	ldr	r2, [pc, #124]	; (8003b18 <XMC_DMA_EnableRequestLine+0x90>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d11b      	bne.n	8003ad8 <XMC_DMA_EnableRequestLine+0x50>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003aa0:	481e      	ldr	r0, [pc, #120]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003aa2:	4b1e      	ldr	r3, [pc, #120]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	230f      	movs	r3, #15
 8003aae:	408b      	lsls	r3, r1
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003ab4:	78bb      	ldrb	r3, [r7, #2]
 8003ab6:	78f9      	ldrb	r1, [r7, #3]
 8003ab8:	0089      	lsls	r1, r1, #2
 8003aba:	408b      	lsls	r3, r1
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003abc:	4313      	orrs	r3, r2
 8003abe:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 8003ac0:	4916      	ldr	r1, [pc, #88]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003ac2:	4b16      	ldr	r3, [pc, #88]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003ac4:	691a      	ldr	r2, [r3, #16]
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 0307 	and.w	r3, r3, #7
 8003acc:	2001      	movs	r0, #1
 8003ace:	fa00 f303 	lsl.w	r3, r0, r3
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]
 8003ad6:	e019      	b.n	8003b0c <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003ad8:	4810      	ldr	r0, [pc, #64]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	78fb      	ldrb	r3, [r7, #3]
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	230f      	movs	r3, #15
 8003ae6:	408b      	lsls	r3, r1
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003aec:	78bb      	ldrb	r3, [r7, #2]
 8003aee:	78f9      	ldrb	r1, [r7, #3]
 8003af0:	0089      	lsls	r1, r1, #2
 8003af2:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8003af8:	4908      	ldr	r1, [pc, #32]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <XMC_DMA_EnableRequestLine+0x94>)
 8003afc:	691a      	ldr	r2, [r3, #16]
 8003afe:	78fb      	ldrb	r3, [r7, #3]
 8003b00:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003b04:	fa00 f303 	lsl.w	r3, r0, r3
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	610b      	str	r3, [r1, #16]
  }
#endif
}
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	50014000 	.word	0x50014000
 8003b1c:	50004900 	.word	0x50004900

08003b20 <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	bf14      	ite	ne
 8003b40:	2301      	movne	r3, #1
 8003b42:	2300      	moveq	r3, #0
 8003b44:	b2db      	uxtb	r3, r3
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	370c      	adds	r7, #12
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop

08003b54 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	607a      	str	r2, [r7, #4]
 8003b60:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff ff1e 	bl	80039a4 <XMC_DMA_IsEnabled>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 81f1 	beq.w	8003f52 <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 8003b70:	7afb      	ldrb	r3, [r7, #11]
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	4619      	mov	r1, r3
 8003b76:	f7ff ffd3 	bl	8003b20 <XMC_DMA_CH_IsEnabled>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	f083 0301 	eor.w	r3, r3, #1
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	f000 81e2 	beq.w	8003f4c <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 8003b88:	7afb      	ldrb	r3, [r7, #11]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6852      	ldr	r2, [r2, #4]
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	2058      	movs	r0, #88	; 0x58
 8003b92:	fb00 f303 	mul.w	r3, r0, r3
 8003b96:	440b      	add	r3, r1
 8003b98:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8003b9a:	7afb      	ldrb	r3, [r7, #11]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6892      	ldr	r2, [r2, #8]
 8003ba0:	68f9      	ldr	r1, [r7, #12]
 8003ba2:	2058      	movs	r0, #88	; 0x58
 8003ba4:	fb00 f303 	mul.w	r3, r0, r3
 8003ba8:	440b      	add	r3, r1
 8003baa:	3308      	adds	r3, #8
 8003bac:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 8003bae:	7afb      	ldrb	r3, [r7, #11]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	68d2      	ldr	r2, [r2, #12]
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	2158      	movs	r1, #88	; 0x58
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	3310      	adds	r3, #16
 8003bc2:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8003bc4:	7afb      	ldrb	r3, [r7, #11]
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	8b12      	ldrh	r2, [r2, #24]
 8003bca:	4610      	mov	r0, r2
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	2158      	movs	r1, #88	; 0x58
 8003bd0:	fb01 f303 	mul.w	r3, r1, r3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	3318      	adds	r3, #24
 8003bd8:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8003bda:	7afb      	ldrb	r3, [r7, #11]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	6812      	ldr	r2, [r2, #0]
 8003be0:	68f9      	ldr	r1, [r7, #12]
 8003be2:	2058      	movs	r0, #88	; 0x58
 8003be4:	fb00 f303 	mul.w	r3, r0, r3
 8003be8:	440b      	add	r3, r1
 8003bea:	3318      	adds	r3, #24
 8003bec:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 8003bee:	7afb      	ldrb	r3, [r7, #11]
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	7ed2      	ldrb	r2, [r2, #27]
 8003bf4:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8003bf8:	68f9      	ldr	r1, [r7, #12]
 8003bfa:	2058      	movs	r0, #88	; 0x58
 8003bfc:	fb00 f303 	mul.w	r3, r0, r3
 8003c00:	440b      	add	r3, r1
 8003c02:	3340      	adds	r3, #64	; 0x40
 8003c04:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	4ab1      	ldr	r2, [pc, #708]	; (8003ed0 <XMC_DMA_CH_Init+0x37c>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d116      	bne.n	8003c3c <XMC_DMA_CH_Init+0xe8>
 8003c0e:	7afb      	ldrb	r3, [r7, #11]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d813      	bhi.n	8003c3c <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8003c14:	7afb      	ldrb	r3, [r7, #11]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	6912      	ldr	r2, [r2, #16]
 8003c1a:	68f9      	ldr	r1, [r7, #12]
 8003c1c:	2058      	movs	r0, #88	; 0x58
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	440b      	add	r3, r1
 8003c24:	3348      	adds	r3, #72	; 0x48
 8003c26:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 8003c28:	7afb      	ldrb	r3, [r7, #11]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	6952      	ldr	r2, [r2, #20]
 8003c2e:	68f9      	ldr	r1, [r7, #12]
 8003c30:	2058      	movs	r0, #88	; 0x58
 8003c32:	fb00 f303 	mul.w	r3, r0, r3
 8003c36:	440b      	add	r3, r1
 8003c38:	3350      	adds	r3, #80	; 0x50
 8003c3a:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8c1b      	ldrh	r3, [r3, #32]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14f      	bne.n	8003ce4 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	789b      	ldrb	r3, [r3, #2]
 8003c48:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d006      	beq.n	8003c60 <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	789b      	ldrb	r3, [r3, #2]
 8003c56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003c5a:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003c5c:	2b30      	cmp	r3, #48	; 0x30
 8003c5e:	d141      	bne.n	8003ce4 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4a9b      	ldr	r2, [pc, #620]	; (8003ed0 <XMC_DMA_CH_Init+0x37c>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d106      	bne.n	8003c76 <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c6e:	f003 0307 	and.w	r3, r3, #7
 8003c72:	75bb      	strb	r3, [r7, #22]
 8003c74:	e005      	b.n	8003c82 <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c7c:	f003 0303 	and.w	r3, r3, #3
 8003c80:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003c88:	091b      	lsrs	r3, r3, #4
 8003c8a:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8003c8c:	7afb      	ldrb	r3, [r7, #11]
 8003c8e:	7afa      	ldrb	r2, [r7, #11]
 8003c90:	68f9      	ldr	r1, [r7, #12]
 8003c92:	2058      	movs	r0, #88	; 0x58
 8003c94:	fb00 f202 	mul.w	r2, r0, r2
 8003c98:	440a      	add	r2, r1
 8003c9a:	3240      	adds	r2, #64	; 0x40
 8003c9c:	6851      	ldr	r1, [r2, #4]
 8003c9e:	7dba      	ldrb	r2, [r7, #22]
 8003ca0:	02d2      	lsls	r2, r2, #11
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	68f9      	ldr	r1, [r7, #12]
 8003ca6:	2058      	movs	r0, #88	; 0x58
 8003ca8:	fb00 f303 	mul.w	r3, r0, r3
 8003cac:	440b      	add	r3, r1
 8003cae:	3340      	adds	r3, #64	; 0x40
 8003cb0:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003cb2:	7dba      	ldrb	r2, [r7, #22]
 8003cb4:	7d7b      	ldrb	r3, [r7, #21]
 8003cb6:	68f8      	ldr	r0, [r7, #12]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	f7ff fee4 	bl	8003a88 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8003cc0:	7afb      	ldrb	r3, [r7, #11]
 8003cc2:	7afa      	ldrb	r2, [r7, #11]
 8003cc4:	68f9      	ldr	r1, [r7, #12]
 8003cc6:	2058      	movs	r0, #88	; 0x58
 8003cc8:	fb00 f202 	mul.w	r2, r0, r2
 8003ccc:	440a      	add	r2, r1
 8003cce:	3240      	adds	r2, #64	; 0x40
 8003cd0:	6812      	ldr	r2, [r2, #0]
 8003cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cd6:	68f9      	ldr	r1, [r7, #12]
 8003cd8:	2058      	movs	r0, #88	; 0x58
 8003cda:	fb00 f303 	mul.w	r3, r0, r3
 8003cde:	440b      	add	r3, r1
 8003ce0:	3340      	adds	r3, #64	; 0x40
 8003ce2:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8b9b      	ldrh	r3, [r3, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d14c      	bne.n	8003d86 <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	789b      	ldrb	r3, [r3, #2]
 8003cf0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b20      	cmp	r3, #32
 8003cf8:	d006      	beq.n	8003d08 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d02:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003d04:	2b30      	cmp	r3, #48	; 0x30
 8003d06:	d13e      	bne.n	8003d86 <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4a71      	ldr	r2, [pc, #452]	; (8003ed0 <XMC_DMA_CH_Init+0x37c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d105      	bne.n	8003d1c <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	7f9b      	ldrb	r3, [r3, #30]
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	75bb      	strb	r3, [r7, #22]
 8003d1a:	e004      	b.n	8003d26 <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	7f9b      	ldrb	r3, [r3, #30]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	7f9b      	ldrb	r3, [r3, #30]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	7afa      	ldrb	r2, [r7, #11]
 8003d32:	68f9      	ldr	r1, [r7, #12]
 8003d34:	2058      	movs	r0, #88	; 0x58
 8003d36:	fb00 f202 	mul.w	r2, r0, r2
 8003d3a:	440a      	add	r2, r1
 8003d3c:	3240      	adds	r2, #64	; 0x40
 8003d3e:	6851      	ldr	r1, [r2, #4]
 8003d40:	7dba      	ldrb	r2, [r7, #22]
 8003d42:	01d2      	lsls	r2, r2, #7
 8003d44:	430a      	orrs	r2, r1
 8003d46:	68f9      	ldr	r1, [r7, #12]
 8003d48:	2058      	movs	r0, #88	; 0x58
 8003d4a:	fb00 f303 	mul.w	r3, r0, r3
 8003d4e:	440b      	add	r3, r1
 8003d50:	3340      	adds	r3, #64	; 0x40
 8003d52:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003d54:	7dba      	ldrb	r2, [r7, #22]
 8003d56:	7d7b      	ldrb	r3, [r7, #21]
 8003d58:	68f8      	ldr	r0, [r7, #12]
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f7ff fe93 	bl	8003a88 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8003d62:	7afb      	ldrb	r3, [r7, #11]
 8003d64:	7afa      	ldrb	r2, [r7, #11]
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	2058      	movs	r0, #88	; 0x58
 8003d6a:	fb00 f202 	mul.w	r2, r0, r2
 8003d6e:	440a      	add	r2, r1
 8003d70:	3240      	adds	r2, #64	; 0x40
 8003d72:	6812      	ldr	r2, [r2, #0]
 8003d74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	2058      	movs	r0, #88	; 0x58
 8003d7c:	fb00 f303 	mul.w	r3, r0, r3
 8003d80:	440b      	add	r3, r1
 8003d82:	3340      	adds	r3, #64	; 0x40
 8003d84:	601a      	str	r2, [r3, #0]
        }
      }

      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003d86:	7afb      	ldrb	r3, [r7, #11]
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	221f      	movs	r2, #31
 8003d8e:	f000 f90f 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>
                                  (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	7e9b      	ldrb	r3, [r3, #26]
 8003d96:	2b08      	cmp	r3, #8
 8003d98:	f200 80d4 	bhi.w	8003f44 <XMC_DMA_CH_Init+0x3f0>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <XMC_DMA_CH_Init+0x250>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003f45 	.word	0x08003f45
 8003da8:	08003dc9 	.word	0x08003dc9
 8003dac:	08003def 	.word	0x08003def
 8003db0:	08003e15 	.word	0x08003e15
 8003db4:	08003e3b 	.word	0x08003e3b
 8003db8:	08003e61 	.word	0x08003e61
 8003dbc:	08003eab 	.word	0x08003eab
 8003dc0:	08003ed5 	.word	0x08003ed5
 8003dc4:	08003f1f 	.word	0x08003f1f
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003dc8:	7afb      	ldrb	r3, [r7, #11]
 8003dca:	7afa      	ldrb	r2, [r7, #11]
 8003dcc:	68f9      	ldr	r1, [r7, #12]
 8003dce:	2058      	movs	r0, #88	; 0x58
 8003dd0:	fb00 f202 	mul.w	r2, r0, r2
 8003dd4:	440a      	add	r2, r1
 8003dd6:	3240      	adds	r2, #64	; 0x40
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	2058      	movs	r0, #88	; 0x58
 8003de2:	fb00 f303 	mul.w	r3, r0, r3
 8003de6:	440b      	add	r3, r1
 8003de8:	3340      	adds	r3, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
          break;
 8003dec:	e0ab      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003dee:	7afb      	ldrb	r3, [r7, #11]
 8003df0:	7afa      	ldrb	r2, [r7, #11]
 8003df2:	68f9      	ldr	r1, [r7, #12]
 8003df4:	2058      	movs	r0, #88	; 0x58
 8003df6:	fb00 f202 	mul.w	r2, r0, r2
 8003dfa:	440a      	add	r2, r1
 8003dfc:	3240      	adds	r2, #64	; 0x40
 8003dfe:	6812      	ldr	r2, [r2, #0]
 8003e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	2058      	movs	r0, #88	; 0x58
 8003e08:	fb00 f303 	mul.w	r3, r0, r3
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3340      	adds	r3, #64	; 0x40
 8003e10:	601a      	str	r2, [r3, #0]
          break;
 8003e12:	e098      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8003e14:	7afb      	ldrb	r3, [r7, #11]
 8003e16:	7afa      	ldrb	r2, [r7, #11]
 8003e18:	68f9      	ldr	r1, [r7, #12]
 8003e1a:	2058      	movs	r0, #88	; 0x58
 8003e1c:	fb00 f202 	mul.w	r2, r0, r2
 8003e20:	440a      	add	r2, r1
 8003e22:	3240      	adds	r2, #64	; 0x40
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	2058      	movs	r0, #88	; 0x58
 8003e2e:	fb00 f303 	mul.w	r3, r0, r3
 8003e32:	440b      	add	r3, r1
 8003e34:	3340      	adds	r3, #64	; 0x40
 8003e36:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8003e38:	e085      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003e3a:	7afb      	ldrb	r3, [r7, #11]
 8003e3c:	7afa      	ldrb	r2, [r7, #11]
 8003e3e:	68f9      	ldr	r1, [r7, #12]
 8003e40:	2058      	movs	r0, #88	; 0x58
 8003e42:	fb00 f202 	mul.w	r2, r0, r2
 8003e46:	440a      	add	r2, r1
 8003e48:	3218      	adds	r2, #24
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003e50:	68f9      	ldr	r1, [r7, #12]
 8003e52:	2058      	movs	r0, #88	; 0x58
 8003e54:	fb00 f303 	mul.w	r3, r0, r3
 8003e58:	440b      	add	r3, r1
 8003e5a:	3318      	adds	r3, #24
 8003e5c:	601a      	str	r2, [r3, #0]
          break;
 8003e5e:	e072      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003e60:	7afb      	ldrb	r3, [r7, #11]
 8003e62:	7afa      	ldrb	r2, [r7, #11]
 8003e64:	68f9      	ldr	r1, [r7, #12]
 8003e66:	2058      	movs	r0, #88	; 0x58
 8003e68:	fb00 f202 	mul.w	r2, r0, r2
 8003e6c:	440a      	add	r2, r1
 8003e6e:	3240      	adds	r2, #64	; 0x40
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e76:	68f9      	ldr	r1, [r7, #12]
 8003e78:	2058      	movs	r0, #88	; 0x58
 8003e7a:	fb00 f303 	mul.w	r3, r0, r3
 8003e7e:	440b      	add	r3, r1
 8003e80:	3340      	adds	r3, #64	; 0x40
 8003e82:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003e84:	7afb      	ldrb	r3, [r7, #11]
 8003e86:	7afa      	ldrb	r2, [r7, #11]
 8003e88:	68f9      	ldr	r1, [r7, #12]
 8003e8a:	2058      	movs	r0, #88	; 0x58
 8003e8c:	fb00 f202 	mul.w	r2, r0, r2
 8003e90:	440a      	add	r2, r1
 8003e92:	3218      	adds	r2, #24
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003e9a:	68f9      	ldr	r1, [r7, #12]
 8003e9c:	2058      	movs	r0, #88	; 0x58
 8003e9e:	fb00 f303 	mul.w	r3, r0, r3
 8003ea2:	440b      	add	r3, r1
 8003ea4:	3318      	adds	r3, #24
 8003ea6:	601a      	str	r2, [r3, #0]
          break;
 8003ea8:	e04d      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003eaa:	7afb      	ldrb	r3, [r7, #11]
 8003eac:	7afa      	ldrb	r2, [r7, #11]
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	2058      	movs	r0, #88	; 0x58
 8003eb2:	fb00 f202 	mul.w	r2, r0, r2
 8003eb6:	440a      	add	r2, r1
 8003eb8:	3218      	adds	r2, #24
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ec0:	68f9      	ldr	r1, [r7, #12]
 8003ec2:	2058      	movs	r0, #88	; 0x58
 8003ec4:	fb00 f303 	mul.w	r3, r0, r3
 8003ec8:	440b      	add	r3, r1
 8003eca:	3318      	adds	r3, #24
 8003ecc:	601a      	str	r2, [r3, #0]
          break;
 8003ece:	e03a      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>
 8003ed0:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003ed4:	7afb      	ldrb	r3, [r7, #11]
 8003ed6:	7afa      	ldrb	r2, [r7, #11]
 8003ed8:	68f9      	ldr	r1, [r7, #12]
 8003eda:	2058      	movs	r0, #88	; 0x58
 8003edc:	fb00 f202 	mul.w	r2, r0, r2
 8003ee0:	440a      	add	r2, r1
 8003ee2:	3240      	adds	r2, #64	; 0x40
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	2058      	movs	r0, #88	; 0x58
 8003eee:	fb00 f303 	mul.w	r3, r0, r3
 8003ef2:	440b      	add	r3, r1
 8003ef4:	3340      	adds	r3, #64	; 0x40
 8003ef6:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003ef8:	7afb      	ldrb	r3, [r7, #11]
 8003efa:	7afa      	ldrb	r2, [r7, #11]
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	2058      	movs	r0, #88	; 0x58
 8003f00:	fb00 f202 	mul.w	r2, r0, r2
 8003f04:	440a      	add	r2, r1
 8003f06:	3218      	adds	r2, #24
 8003f08:	6812      	ldr	r2, [r2, #0]
 8003f0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f0e:	68f9      	ldr	r1, [r7, #12]
 8003f10:	2058      	movs	r0, #88	; 0x58
 8003f12:	fb00 f303 	mul.w	r3, r0, r3
 8003f16:	440b      	add	r3, r1
 8003f18:	3318      	adds	r3, #24
 8003f1a:	601a      	str	r2, [r3, #0]
          break;
 8003f1c:	e013      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8003f1e:	7afb      	ldrb	r3, [r7, #11]
 8003f20:	7afa      	ldrb	r2, [r7, #11]
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	2058      	movs	r0, #88	; 0x58
 8003f26:	fb00 f202 	mul.w	r2, r0, r2
 8003f2a:	440a      	add	r2, r1
 8003f2c:	3218      	adds	r2, #24
 8003f2e:	6812      	ldr	r2, [r2, #0]
 8003f30:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8003f34:	68f9      	ldr	r1, [r7, #12]
 8003f36:	2058      	movs	r0, #88	; 0x58
 8003f38:	fb00 f303 	mul.w	r3, r0, r3
 8003f3c:	440b      	add	r3, r1
 8003f3e:	3318      	adds	r3, #24
 8003f40:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 8003f42:	e000      	b.n	8003f46 <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 8003f44:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 8003f46:	2300      	movs	r3, #0
 8003f48:	75fb      	strb	r3, [r7, #23]
 8003f4a:	e004      	b.n	8003f56 <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	75fb      	strb	r3, [r7, #23]
 8003f50:	e001      	b.n	8003f56 <XMC_DMA_CH_Init+0x402>
    }
  }
  else
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003f56:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	3718      	adds	r7, #24
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b087      	sub	sp, #28
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	60f8      	str	r0, [r7, #12]
 8003f68:	460b      	mov	r3, r1
 8003f6a:	607a      	str	r2, [r7, #4]
 8003f6c:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	e014      	b.n	8003f9e <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	fa22 f303 	lsr.w	r3, r2, r3
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d009      	beq.n	8003f98 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	005a      	lsls	r2, r3, #1
 8003f88:	7afb      	ldrb	r3, [r7, #11]
 8003f8a:	f240 1101 	movw	r1, #257	; 0x101
 8003f8e:	4099      	lsls	r1, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	32c4      	adds	r2, #196	; 0xc4
 8003f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	697b      	ldr	r3, [r7, #20]
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d9e7      	bls.n	8003f74 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop

08003fb0 <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b087      	sub	sp, #28
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	607a      	str	r2, [r7, #4]
 8003fbc:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	e013      	b.n	8003fec <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	005a      	lsls	r2, r3, #1
 8003fd8:	7afb      	ldrb	r3, [r7, #11]
 8003fda:	2101      	movs	r1, #1
 8003fdc:	4099      	lsls	r1, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	32ce      	adds	r2, #206	; 0xce
 8003fe2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	617b      	str	r3, [r7, #20]
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b04      	cmp	r3, #4
 8003ff0:	d9e8      	bls.n	8003fc4 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8003ff2:	371c      	adds	r7, #28
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	60f8      	str	r0, [r7, #12]
 8004004:	460b      	mov	r3, r1
 8004006:	607a      	str	r2, [r7, #4]
 8004008:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a09      	ldr	r2, [pc, #36]	; (8004034 <XMC_DMA_CH_SetEventHandler+0x38>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d105      	bne.n	800401e <XMC_DMA_CH_SetEventHandler+0x22>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    dma0_event_handlers[channel] = event_handler;
 8004012:	7afb      	ldrb	r3, [r7, #11]
 8004014:	4908      	ldr	r1, [pc, #32]	; (8004038 <XMC_DMA_CH_SetEventHandler+0x3c>)
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800401c:	e004      	b.n	8004028 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 800401e:	7afb      	ldrb	r3, [r7, #11]
 8004020:	4906      	ldr	r1, [pc, #24]	; (800403c <XMC_DMA_CH_SetEventHandler+0x40>)
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 8004028:	3714      	adds	r7, #20
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	50014000 	.word	0x50014000
 8004038:	1fff43a0 	.word	0x1fff43a0
 800403c:	1fff43c0 	.word	0x1fff43c0

08004040 <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a82      	ldr	r2, [pc, #520]	; (8004254 <XMC_DMA_IRQHandler+0x214>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d102      	bne.n	8004056 <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8004050:	4b81      	ldr	r3, [pc, #516]	; (8004258 <XMC_DMA_IRQHandler+0x218>)
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	e001      	b.n	800405a <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 8004056:	4b81      	ldr	r3, [pc, #516]	; (800425c <XMC_DMA_IRQHandler+0x21c>)
 8004058:	61bb      	str	r3, [r7, #24]
  }
#endif

  event = XMC_DMA_GetEventStatus(dma);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fc22 	bl	80038a4 <XMC_DMA_GetEventStatus>
 8004060:	6178      	str	r0, [r7, #20]
  channel = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	f003 0310 	and.w	r3, r3, #16
 800406c:	2b00      	cmp	r3, #0
 800406e:	d02b      	beq.n	80040c8 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8004070:	6878      	ldr	r0, [r7, #4]
 8004072:	f7ff fc5d 	bl	8003930 <XMC_DMA_GetChannelsErrorStatus>
 8004076:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8004078:	e021      	b.n	80040be <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 800407a:	2201      	movs	r2, #1
 800407c:	69fb      	ldr	r3, [r7, #28]
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	4013      	ands	r3, r2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d014      	beq.n	80040b8 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	b2db      	uxtb	r3, r3
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4619      	mov	r1, r3
 8004096:	2210      	movs	r2, #16
 8004098:	f7ff ff8a 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	69ba      	ldr	r2, [r7, #24]
 80040a2:	4413      	add	r3, r2
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2010      	movs	r0, #16
 80040b2:	4798      	blx	r3
        }

        break;
 80040b4:	e007      	b.n	80040c6 <XMC_DMA_IRQHandler+0x86>
 80040b6:	e006      	b.n	80040c6 <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	3301      	adds	r3, #1
 80040bc:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d1da      	bne.n	800407a <XMC_DMA_IRQHandler+0x3a>
 80040c4:	e0c3      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
 80040c6:	e0c2      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d02b      	beq.n	800412a <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7ff fbf4 	bl	80038c0 <XMC_DMA_GetChannelsTransferCompleteStatus>
 80040d8:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80040da:	e021      	b.n	8004120 <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 80040dc:	2201      	movs	r2, #1
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	fa02 f303 	lsl.w	r3, r2, r3
 80040e4:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d014      	beq.n	800411a <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4619      	mov	r1, r3
 80040f8:	220f      	movs	r2, #15
 80040fa:	f7ff ff59 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	69ba      	ldr	r2, [r7, #24]
 8004104:	4413      	add	r3, r2
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2001      	movs	r0, #1
 8004114:	4798      	blx	r3
        }

        break;
 8004116:	e007      	b.n	8004128 <XMC_DMA_IRQHandler+0xe8>
 8004118:	e006      	b.n	8004128 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	3301      	adds	r3, #1
 800411e:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8004120:	697b      	ldr	r3, [r7, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1da      	bne.n	80040dc <XMC_DMA_IRQHandler+0x9c>
 8004126:	e092      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
 8004128:	e091      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d02b      	beq.n	800418c <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f7ff fbd1 	bl	80038dc <XMC_DMA_GetChannelsBlockCompleteStatus>
 800413a:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800413c:	e021      	b.n	8004182 <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 800413e:	2201      	movs	r2, #1
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	fa02 f303 	lsl.w	r3, r2, r3
 8004146:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d014      	beq.n	800417c <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	b2db      	uxtb	r3, r3
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	4619      	mov	r1, r3
 800415a:	220e      	movs	r2, #14
 800415c:	f7ff ff28 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	4413      	add	r3, r2
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2002      	movs	r0, #2
 8004176:	4798      	blx	r3
        }

        break;
 8004178:	e007      	b.n	800418a <XMC_DMA_IRQHandler+0x14a>
 800417a:	e006      	b.n	800418a <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	3301      	adds	r3, #1
 8004180:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1da      	bne.n	800413e <XMC_DMA_IRQHandler+0xfe>
 8004188:	e061      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
 800418a:	e060      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f003 0304 	and.w	r3, r3, #4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d02b      	beq.n	80041ee <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fbae 	bl	80038f8 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 800419c:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800419e:	e021      	b.n	80041e4 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d014      	beq.n	80041de <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4619      	mov	r1, r3
 80041bc:	2204      	movs	r2, #4
 80041be:	f7ff fef7 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d003      	beq.n	80041dc <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2004      	movs	r0, #4
 80041d8:	4798      	blx	r3
        }

        break;
 80041da:	e007      	b.n	80041ec <XMC_DMA_IRQHandler+0x1ac>
 80041dc:	e006      	b.n	80041ec <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	3301      	adds	r3, #1
 80041e2:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1da      	bne.n	80041a0 <XMC_DMA_IRQHandler+0x160>
 80041ea:	e030      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
 80041ec:	e02f      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d02a      	beq.n	800424e <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff fb8b 	bl	8003914 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 80041fe:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8004200:	e021      	b.n	8004246 <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 8004202:	2201      	movs	r2, #1
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	fa02 f303 	lsl.w	r3, r2, r3
 800420a:	613b      	str	r3, [r7, #16]
      if (event & mask)
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	4013      	ands	r3, r2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d014      	beq.n	8004240 <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	b2db      	uxtb	r3, r3
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	4619      	mov	r1, r3
 800421e:	2208      	movs	r2, #8
 8004220:	f7ff fec6 	bl	8003fb0 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	4413      	add	r3, r2
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2008      	movs	r0, #8
 800423a:	4798      	blx	r3
        }

        break;
 800423c:	e007      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
 800423e:	e006      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	3301      	adds	r3, #1
 8004244:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1da      	bne.n	8004202 <XMC_DMA_IRQHandler+0x1c2>
 800424c:	e7ff      	b.n	800424e <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 800424e:	3720      	adds	r7, #32
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}
 8004254:	50014000 	.word	0x50014000
 8004258:	1fff43a0 	.word	0x1fff43a0
 800425c:	1fff43c0 	.word	0x1fff43c0

08004260 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8004260:	b480      	push	{r7}
 8004262:	b083      	sub	sp, #12
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	460b      	mov	r3, r1
 800426a:	70fb      	strb	r3, [r7, #3]
 800426c:	4613      	mov	r3, r2
 800426e:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	089b      	lsrs	r3, r3, #2
 8004274:	b2db      	uxtb	r3, r3
 8004276:	4618      	mov	r0, r3
 8004278:	78fb      	ldrb	r3, [r7, #3]
 800427a:	089b      	lsrs	r3, r3, #2
 800427c:	b2db      	uxtb	r3, r3
 800427e:	461a      	mov	r2, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	3204      	adds	r2, #4
 8004284:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	4619      	mov	r1, r3
 8004292:	23f8      	movs	r3, #248	; 0xf8
 8004294:	408b      	lsls	r3, r1
 8004296:	43db      	mvns	r3, r3
 8004298:	ea02 0103 	and.w	r1, r2, r3
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	1d02      	adds	r2, r0, #4
 80042a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80042a4:	78fb      	ldrb	r3, [r7, #3]
 80042a6:	089b      	lsrs	r3, r3, #2
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	4618      	mov	r0, r3
 80042ac:	78fb      	ldrb	r3, [r7, #3]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	3204      	adds	r2, #4
 80042b8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80042bc:	78bb      	ldrb	r3, [r7, #2]
 80042be:	78f9      	ldrb	r1, [r7, #3]
 80042c0:	f001 0103 	and.w	r1, r1, #3
 80042c4:	00c9      	lsls	r1, r1, #3
 80042c6:	408b      	lsls	r3, r1
 80042c8:	ea42 0103 	orr.w	r1, r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	1d02      	adds	r2, r0, #4
 80042d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop

080042e0 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	460b      	mov	r3, r1
 80042ea:	70fb      	strb	r3, [r7, #3]
 80042ec:	4613      	mov	r3, r2
 80042ee:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	4619      	mov	r1, r3
 80042fa:	2303      	movs	r3, #3
 80042fc:	408b      	lsls	r3, r1
 80042fe:	43db      	mvns	r3, r3
 8004300:	401a      	ands	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800430a:	78bb      	ldrb	r3, [r7, #2]
 800430c:	78f9      	ldrb	r1, [r7, #3]
 800430e:	0049      	lsls	r1, r1, #1
 8004310:	408b      	lsls	r3, r1
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
 8004322:	bf00      	nop

08004324 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004336:	b2db      	uxtb	r3, r3
}
 8004338:	4618      	mov	r0, r3
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	431a      	orrs	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800435a:	370c      	adds	r7, #12
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	60f8      	str	r0, [r7, #12]
 800436c:	60b9      	str	r1, [r7, #8]
 800436e:	4613      	mov	r3, r2
 8004370:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fbb0 	bl	8004ad8 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <XMC_I2C_CH_InitEx+0x5c>)
 800437c:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	88db      	ldrh	r3, [r3, #6]
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	4619      	mov	r1, r3
 8004386:	f000 f81d 	bl	80043c4 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 800438a:	79fb      	ldrb	r3, [r7, #7]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	791b      	ldrb	r3, [r3, #4]
 8004398:	68f8      	ldr	r0, [r7, #12]
 800439a:	4611      	mov	r1, r2
 800439c:	461a      	mov	r2, r3
 800439e:	f000 f83b 	bl	8004418 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80043a8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	073f0303 	.word	0x073f0303

080043c4 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80043d0:	887b      	ldrh	r3, [r7, #2]
 80043d2:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80043d6:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80043da:	d10e      	bne.n	80043fa <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e0:	0c1b      	lsrs	r3, r3, #16
 80043e2:	041b      	lsls	r3, r3, #16
 80043e4:	887a      	ldrh	r2, [r7, #2]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 80043ea:	887b      	ldrh	r3, [r7, #2]
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80043f2:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80043f8:	e008      	b.n	800440c <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fe:	0c1b      	lsrs	r3, r3, #16
 8004400:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 8004402:	887a      	ldrh	r2, [r7, #2]
 8004404:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004406:	431a      	orrs	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop

08004418 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	4a20      	ldr	r2, [pc, #128]	; (80044ac <XMC_I2C_CH_SetBaudrateEx+0x94>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d819      	bhi.n	8004462 <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004432:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d008      	beq.n	8004452 <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	4619      	mov	r1, r3
 8004446:	220a      	movs	r2, #10
 8004448:	f000 fc04 	bl	8004c54 <XMC_USIC_CH_SetBaudrateEx>
 800444c:	4603      	mov	r3, r0
 800444e:	75fb      	strb	r3, [r7, #23]
 8004450:	e027      	b.n	80044a2 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	220a      	movs	r2, #10
 8004458:	f000 fb8a 	bl	8004b70 <XMC_USIC_CH_SetBaudrate>
 800445c:	4603      	mov	r3, r0
 800445e:	75fb      	strb	r3, [r7, #23]
 8004460:	e01f      	b.n	80044a2 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	4a12      	ldr	r2, [pc, #72]	; (80044b0 <XMC_I2C_CH_SetBaudrateEx+0x98>)
 8004466:	4293      	cmp	r3, r2
 8004468:	d819      	bhi.n	800449e <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800446e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8004476:	79fb      	ldrb	r3, [r7, #7]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	68f8      	ldr	r0, [r7, #12]
 8004480:	4619      	mov	r1, r3
 8004482:	2219      	movs	r2, #25
 8004484:	f000 fbe6 	bl	8004c54 <XMC_USIC_CH_SetBaudrateEx>
 8004488:	4603      	mov	r3, r0
 800448a:	75fb      	strb	r3, [r7, #23]
 800448c:	e009      	b.n	80044a2 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	2219      	movs	r2, #25
 8004494:	f000 fb6c 	bl	8004b70 <XMC_USIC_CH_SetBaudrate>
 8004498:	4603      	mov	r3, r0
 800449a:	75fb      	strb	r3, [r7, #23]
 800449c:	e001      	b.n	80044a2 <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 80044a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3718      	adds	r7, #24
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	000186a0 	.word	0x000186a0
 80044b0:	00061a80 	.word	0x00061a80

080044b4 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b084      	sub	sp, #16
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	460b      	mov	r3, r1
 80044be:	807b      	strh	r3, [r7, #2]
 80044c0:	4613      	mov	r3, r2
 80044c2:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80044c4:	887b      	ldrh	r3, [r7, #2]
 80044c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80044ce:	787b      	ldrb	r3, [r7, #1]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d103      	bne.n	80044dc <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d110      	bne.n	800450c <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80044ea:	bf00      	nop
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f7ff ff19 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b80      	cmp	r3, #128	; 0x80
 80044f6:	d0f9      	beq.n	80044ec <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044fe:	f7ff ff21 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800450a:	e003      	b.n	8004514 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004514:	3710      	adds	r7, #16
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop

0800451c <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	460b      	mov	r3, r1
 8004526:	807b      	strh	r3, [r7, #2]
 8004528:	4613      	mov	r3, r2
 800452a:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 800452c:	887b      	ldrh	r3, [r7, #2]
 800452e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8004532:	b29b      	uxth	r3, r3
 8004534:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 8004536:	787b      	ldrb	r3, [r7, #1]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d103      	bne.n	8004544 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f043 0301 	orr.w	r3, r3, #1
 8004542:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800454a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d110      	bne.n	8004574 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004552:	bf00      	nop
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff fee5 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 800455a:	4603      	mov	r3, r0
 800455c:	2b80      	cmp	r3, #128	; 0x80
 800455e:	d0f9      	beq.n	8004554 <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004566:	f7ff feed 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004572:	e003      	b.n	800457c <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800457c:	3710      	adds	r7, #16
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop

08004584 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004592:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d111      	bne.n	80045be <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800459a:	bf00      	nop
 800459c:	6878      	ldr	r0, [r7, #4]
 800459e:	f7ff fec1 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b80      	cmp	r3, #128	; 0x80
 80045a6:	d0f9      	beq.n	800459c <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045ae:	f7ff fec9 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80045b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80045bc:	e004      	b.n	80045c8 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80045c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80045c8:	3708      	adds	r7, #8
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop

080045d0 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	460b      	mov	r3, r1
 80045da:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045e2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d110      	bne.n	800460c <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80045ea:	bf00      	nop
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f7ff fe99 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d0f9      	beq.n	80045ec <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045fe:	f7ff fea1 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004602:	78fa      	ldrb	r2, [r7, #3]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800460a:	e003      	b.n	8004614 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004614:	3708      	adds	r7, #8
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop

0800461c <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800462a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d111      	bne.n	8004656 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004632:	bf00      	nop
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f7ff fe75 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 800463a:	4603      	mov	r3, r0
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d0f9      	beq.n	8004634 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004646:	f7ff fe7d 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004654:	e004      	b.n	8004660 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800465c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop

08004668 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004676:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800467a:	2b00      	cmp	r3, #0
 800467c:	d111      	bne.n	80046a2 <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800467e:	bf00      	nop
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff fe4f 	bl	8004324 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004686:	4603      	mov	r3, r0
 8004688:	2b80      	cmp	r3, #128	; 0x80
 800468a:	d0f9      	beq.n	8004680 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004692:	f7ff fe57 	bl	8004344 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f44f 7240 	mov.w	r2, #768	; 0x300
 800469c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80046a0:	e004      	b.n	80046ac <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80046a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop

080046b4 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80046c2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d103      	bne.n	80046d2 <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ce:	73fb      	strb	r3, [r7, #15]
 80046d0:	e003      	b.n	80046da <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80046d8:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80046da:	7bfb      	ldrb	r3, [r7, #15]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80046e8:	b480      	push	{r7}
 80046ea:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80046ec:	4b03      	ldr	r3, [pc, #12]	; (80046fc <XMC_SCU_GetMirrorStatus+0x14>)
 80046ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	50004000 	.word	0x50004000

08004700 <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004704:	bf00      	nop
 8004706:	f7ff ffef 	bl	80046e8 <XMC_SCU_GetMirrorStatus>
 800470a:	4603      	mov	r3, r0
 800470c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1f8      	bne.n	8004706 <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8004714:	4a03      	ldr	r2, [pc, #12]	; (8004724 <XMC_RTC_Start+0x24>)
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <XMC_RTC_Start+0x24>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f043 0301 	orr.w	r3, r3, #1
 800471e:	6053      	str	r3, [r2, #4]
}
 8004720:	bd80      	pop	{r7, pc}
 8004722:	bf00      	nop
 8004724:	50004a00 	.word	0x50004a00

08004728 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 800472c:	bf00      	nop
 800472e:	f7ff ffdb 	bl	80046e8 <XMC_SCU_GetMirrorStatus>
 8004732:	4603      	mov	r3, r0
 8004734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1f8      	bne.n	800472e <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 800473c:	4a03      	ldr	r2, [pc, #12]	; (800474c <XMC_RTC_Stop+0x24>)
 800473e:	4b03      	ldr	r3, [pc, #12]	; (800474c <XMC_RTC_Stop+0x24>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f023 0301 	bic.w	r3, r3, #1
 8004746:	6053      	str	r3, [r2, #4]
}
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	50004a00 	.word	0x50004a00

08004750 <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b082      	sub	sp, #8
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 800475a:	bf00      	nop
 800475c:	f7ff ffc4 	bl	80046e8 <XMC_SCU_GetMirrorStatus>
 8004760:	4603      	mov	r3, r0
 8004762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004766:	2b00      	cmp	r3, #0
 8004768:	d1f8      	bne.n	800475c <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 800476a:	4905      	ldr	r1, [pc, #20]	; (8004780 <XMC_RTC_SetPrescaler+0x30>)
 800476c:	4b04      	ldr	r3, [pc, #16]	; (8004780 <XMC_RTC_SetPrescaler+0x30>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 8004772:	88fb      	ldrh	r3, [r7, #6]
 8004774:	041b      	lsls	r3, r3, #16

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8004776:	4313      	orrs	r3, r2
 8004778:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 800477a:	3708      	adds	r7, #8
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	50004a00 	.word	0x50004a00

08004784 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

#if (XMC_RTC_INIT_SEQUENCE == 1U)
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 800478c:	bf00      	nop
 800478e:	f7ff ffab 	bl	80046e8 <XMC_SCU_GetMirrorStatus>
 8004792:	4603      	mov	r3, r0
 8004794:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f8      	bne.n	800478e <XMC_RTC_SetTime+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
 800479c:	4a09      	ldr	r2, [pc, #36]	; (80047c4 <XMC_RTC_SetTime+0x40>)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	6213      	str	r3, [r2, #32]

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80047a4:	bf00      	nop
 80047a6:	f7ff ff9f 	bl	80046e8 <XMC_SCU_GetMirrorStatus>
 80047aa:	4603      	mov	r3, r0
 80047ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d1f8      	bne.n	80047a6 <XMC_RTC_SetTime+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM1 = time->raw1;
 80047b4:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <XMC_RTC_SetTime+0x40>)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	6253      	str	r3, [r2, #36]	; 0x24
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
  RTC->TIM1 = time->raw1;	;
#endif
}
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	50004a00 	.word	0x50004a00

080047c8 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 80047d0:	4b06      	ldr	r3, [pc, #24]	; (80047ec <XMC_RTC_GetTime+0x24>)
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 80047d8:	4b04      	ldr	r3, [pc, #16]	; (80047ec <XMC_RTC_GetTime+0x24>)
 80047da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	605a      	str	r2, [r3, #4]
}
 80047e0:	370c      	adds	r7, #12
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	50004a00 	.word	0x50004a00

080047f0 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	4613      	mov	r3, r2
 80047fc:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 f96a 	bl	8004ad8 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	795b      	ldrb	r3, [r3, #5]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d115      	bne.n	8004838 <XMC_SPI_CH_InitEx+0x48>
 800480c:	79fb      	ldrb	r3, [r7, #7]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d012      	beq.n	8004838 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	791b      	ldrb	r3, [r3, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d007      	beq.n	800482a <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	68f8      	ldr	r0, [r7, #12]
 8004820:	4619      	mov	r1, r3
 8004822:	2202      	movs	r2, #2
 8004824:	f000 fa16 	bl	8004c54 <XMC_USIC_CH_SetBaudrateEx>
 8004828:	e006      	b.n	8004838 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	4619      	mov	r1, r3
 8004832:	2202      	movs	r2, #2
 8004834:	f000 f99c 	bl	8004b70 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4a0f      	ldr	r2, [pc, #60]	; (8004878 <XMC_SPI_CH_InitEx+0x88>)
 800483c:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8004844:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	795b      	ldrb	r3, [r3, #5]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d107      	bne.n	800485e <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 8004852:	f043 030b 	orr.w	r3, r3, #11
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f04f 32ff 	mov.w	r2, #4294967295
 8004864:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	891b      	ldrh	r3, [r3, #8]
 800486a:	461a      	mov	r2, r3
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	073f0102 	.word	0x073f0102

0800487c <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488a:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	431a      	orrs	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80048b6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d103      	bne.n	80048c6 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c2:	81fb      	strh	r3, [r7, #14]
 80048c4:	e003      	b.n	80048ce <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80048cc:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80048ce:	89fb      	ldrh	r3, [r7, #14]
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3714      	adds	r7, #20
 80048d4:	46bd      	mov	sp, r7
 80048d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048da:	4770      	bx	lr

080048dc <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
 80048e4:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80048f0:	431a      	orrs	r2, r3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	035b      	lsls	r3, r3, #13
 80048fe:	b29b      	uxth	r3, r3
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8004924:	43db      	mvns	r3, r3
 8004926:	401a      	ands	r2, r3
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	035b      	lsls	r3, r3, #13
 8004934:	b29b      	uxth	r3, r3
 8004936:	43db      	mvns	r3, r3
 8004938:	401a      	ands	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800495a:	b2db      	uxtb	r3, r3
}
 800495c:	4618      	mov	r0, r3
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop

08004984 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	60f8      	str	r0, [r7, #12]
 800498c:	60b9      	str	r1, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8004992:	2310      	movs	r3, #16
 8004994:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 f89e 	bl	8004ad8 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	7a1b      	ldrb	r3, [r3, #8]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d002      	beq.n	80049aa <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	7a1b      	ldrb	r3, [r3, #8]
 80049a8:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 80049aa:	79fb      	ldrb	r3, [r7, #7]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d014      	beq.n	80049da <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	791b      	ldrb	r3, [r3, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	4611      	mov	r1, r2
 80049c4:	461a      	mov	r2, r3
 80049c6:	f000 f945 	bl	8004c54 <XMC_USIC_CH_SetBaudrateEx>
 80049ca:	e006      	b.n	80049da <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	4619      	mov	r1, r3
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	f000 f8cb 	bl	8004b70 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	79db      	ldrb	r3, [r3, #7]
 80049de:	3b01      	subs	r3, #1
 80049e0:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	085b      	lsrs	r3, r3, #1
 80049e6:	3301      	adds	r3, #1
 80049e8:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80049f0:	f043 0301 	orr.w	r3, r3, #1
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	795b      	ldrb	r3, [r3, #5]
 80049fc:	3b01      	subs	r3, #1
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	799b      	ldrb	r3, [r3, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d009      	beq.n	8004a24 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	799b      	ldrb	r3, [r3, #6]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	635a      	str	r2, [r3, #52]	; 0x34
 8004a22:	e008      	b.n	8004a36 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	795b      	ldrb	r3, [r3, #5]
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	041b      	lsls	r3, r3, #16
 8004a30:	431a      	orrs	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004a3c:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f04f 32ff 	mov.w	r2, #4294967295
 8004a44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	895b      	ldrh	r3, [r3, #10]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004a50:	3718      	adds	r7, #24
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop

08004a58 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004a6a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d110      	bne.n	8004a94 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004a72:	bf00      	nop
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7ff ff67 	bl	8004948 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b80      	cmp	r3, #128	; 0x80
 8004a7e:	d0f9      	beq.n	8004a74 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a86:	f7ff ff6f 	bl	8004968 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8004a8a:	887a      	ldrh	r2, [r7, #2]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004a92:	e003      	b.n	8004a9c <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8004a94:	887a      	ldrh	r2, [r7, #2]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004a9c:	3708      	adds	r7, #8
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}
 8004aa2:	bf00      	nop

08004aa4 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004ab2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d103      	bne.n	8004ac2 <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004abe:	81fb      	strh	r3, [r7, #14]
 8004ac0:	e003      	b.n	8004aca <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004ac8:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8004aca:	89fb      	ldrh	r3, [r7, #14]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <XMC_USIC_CH_Enable+0x74>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d003      	beq.n	8004af0 <XMC_USIC_CH_Enable+0x18>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4a19      	ldr	r2, [pc, #100]	; (8004b50 <XMC_USIC_CH_Enable+0x78>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d103      	bne.n	8004af8 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8004af0:	4818      	ldr	r0, [pc, #96]	; (8004b54 <XMC_USIC_CH_Enable+0x7c>)
 8004af2:	f000 f99d 	bl	8004e30 <XMC_USIC_Enable>
 8004af6:	e016      	b.n	8004b26 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	4a17      	ldr	r2, [pc, #92]	; (8004b58 <XMC_USIC_CH_Enable+0x80>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d003      	beq.n	8004b08 <XMC_USIC_CH_Enable+0x30>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a16      	ldr	r2, [pc, #88]	; (8004b5c <XMC_USIC_CH_Enable+0x84>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d103      	bne.n	8004b10 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8004b08:	4815      	ldr	r0, [pc, #84]	; (8004b60 <XMC_USIC_CH_Enable+0x88>)
 8004b0a:	f000 f991 	bl	8004e30 <XMC_USIC_Enable>
 8004b0e:	e00a      	b.n	8004b26 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	4a14      	ldr	r2, [pc, #80]	; (8004b64 <XMC_USIC_CH_Enable+0x8c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d003      	beq.n	8004b20 <XMC_USIC_CH_Enable+0x48>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <XMC_USIC_CH_Enable+0x90>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d102      	bne.n	8004b26 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8004b20:	4812      	ldr	r0, [pc, #72]	; (8004b6c <XMC_USIC_CH_Enable+0x94>)
 8004b22:	f000 f985 	bl	8004e30 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2203      	movs	r2, #3
 8004b2a:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8004b2c:	bf00      	nop
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0301 	and.w	r3, r3, #1
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0f9      	beq.n	8004b2e <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f023 020f 	bic.w	r2, r3, #15
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40030000 	.word	0x40030000
 8004b50:	40030200 	.word	0x40030200
 8004b54:	40030008 	.word	0x40030008
 8004b58:	48020000 	.word	0x48020000
 8004b5c:	48020200 	.word	0x48020200
 8004b60:	48020008 	.word	0x48020008
 8004b64:	48024000 	.word	0x48024000
 8004b68:	48024200 	.word	0x48024200
 8004b6c:	48024008 	.word	0x48024008

08004b70 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b08e      	sub	sp, #56	; 0x38
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	2b63      	cmp	r3, #99	; 0x63
 8004b80:	d95a      	bls.n	8004c38 <XMC_USIC_CH_SetBaudrate+0xc8>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d057      	beq.n	8004c38 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8004b88:	f7fd fc1c 	bl	80023c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b2f      	ldr	r3, [pc, #188]	; (8004c4c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004b90:	fba3 2302 	umull	r2, r3, r3, r2
 8004b94:	095b      	lsrs	r3, r3, #5
 8004b96:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	4a2c      	ldr	r2, [pc, #176]	; (8004c4c <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	095b      	lsrs	r3, r3, #5
 8004ba2:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8004ba4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8004baa:	2301      	movs	r3, #1
 8004bac:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8004bae:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004bb2:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004bb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bb8:	633b      	str	r3, [r7, #48]	; 0x30
 8004bba:	e022      	b.n	8004c02 <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc0:	fb02 f203 	mul.w	r2, r2, r3
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	6879      	ldr	r1, [r7, #4]
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd0:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	0a9b      	lsrs	r3, r3, #10
 8004bd6:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bde:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8004be0:	69bb      	ldr	r3, [r7, #24]
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004be6:	d809      	bhi.n	8004bfc <XMC_USIC_CH_SetBaudrate+0x8c>
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d205      	bcs.n	8004bfc <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8004bf4:	69bb      	ldr	r3, [r7, #24]
 8004bf6:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8004bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	633b      	str	r3, [r7, #48]	; 0x30
 8004c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1d9      	bne.n	8004bbc <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8004c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c0a:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8004c0c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	695a      	ldr	r2, [r3, #20]
 8004c18:	4b0d      	ldr	r3, [pc, #52]	; (8004c50 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8004c1a:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	3a01      	subs	r2, #1
 8004c20:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004c22:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	3b01      	subs	r3, #1
 8004c28:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004c2a:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004c36:	e002      	b.n	8004c3e <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8004c3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3738      	adds	r7, #56	; 0x38
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	51eb851f 	.word	0x51eb851f
 8004c50:	fc0080ef 	.word	0xfc0080ef

08004c54 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08c      	sub	sp, #48	; 0x30
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8004c60:	f7fd fbb0 	bl	80023c4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004c64:	4603      	mov	r3, r0
 8004c66:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8004c72:	2301      	movs	r3, #1
 8004c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8004c76:	6a3a      	ldr	r2, [r7, #32]
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	dd5f      	ble.n	8004d3e <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004c7e:	6a3a      	ldr	r2, [r7, #32]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	fb92 f3f3 	sdiv	r3, r2, r3
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8004c88:	e010      	b.n	8004cac <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8004c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	687a      	ldr	r2, [r7, #4]
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	461a      	mov	r2, r3
 8004c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c9c:	fb03 f302 	mul.w	r3, r3, r2
 8004ca0:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	fb92 f3f3 	sdiv	r3, r2, r3
 8004caa:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d8e9      	bhi.n	8004c8a <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8004cb6:	6a3a      	ldr	r2, [r7, #32]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc2:	fb01 f303 	mul.w	r3, r1, r3
 8004cc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cca:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8004ccc:	6a3a      	ldr	r2, [r7, #32]
 8004cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	6879      	ldr	r1, [r7, #4]
 8004cd4:	fb01 f303 	mul.w	r3, r1, r3
 8004cd8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce2:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8004ce4:	68ba      	ldr	r2, [r7, #8]
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004cee:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	69bb      	ldr	r3, [r7, #24]
 8004cf6:	1acb      	subs	r3, r1, r3
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	bfb8      	it	lt
 8004cfc:	425b      	neglt	r3, r3
 8004cfe:	429a      	cmp	r2, r3
 8004d00:	da02      	bge.n	8004d08 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8004d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d04:	3301      	adds	r3, #1
 8004d06:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8004d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	695a      	ldr	r2, [r3, #20]
 8004d1e:	4b0c      	ldr	r3, [pc, #48]	; (8004d50 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8004d20:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	3a01      	subs	r2, #1
 8004d26:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004d28:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004d30:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d3c:	e002      	b.n	8004d44 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8004d44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3730      	adds	r7, #48	; 0x30
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}
 8004d50:	fc0080ef 	.word	0xfc0080ef

08004d54 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b085      	sub	sp, #20
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	4613      	mov	r3, r2
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004d6a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004d7a:	4b09      	ldr	r3, [pc, #36]	; (8004da0 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8004d7c:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	0211      	lsls	r1, r2, #8
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8004d86:	79fa      	ldrb	r2, [r7, #7]
 8004d88:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004d8a:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8004d8c:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	f8ffc0c0 	.word	0xf8ffc0c0

08004da4 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b085      	sub	sp, #20
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	60f8      	str	r0, [r7, #12]
 8004dac:	60b9      	str	r1, [r7, #8]
 8004dae:	603b      	str	r3, [r7, #0]
 8004db0:	4613      	mov	r3, r2
 8004db2:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004dba:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004dca:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8004dcc:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	0211      	lsls	r1, r2, #8
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8004dd6:	79fa      	ldrb	r2, [r7, #7]
 8004dd8:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8004dda:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	efffc0c0 	.word	0xefffc0c0

08004df8 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b085      	sub	sp, #20
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	460b      	mov	r3, r1
 8004e02:	607a      	str	r2, [r7, #4]
 8004e04:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	699a      	ldr	r2, [r3, #24]
 8004e0a:	7afb      	ldrb	r3, [r7, #11]
 8004e0c:	2107      	movs	r1, #7
 8004e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e12:	43db      	mvns	r3, r3
 8004e14:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8004e16:	7afb      	ldrb	r3, [r7, #11]
 8004e18:	6879      	ldr	r1, [r7, #4]
 8004e1a:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8004e24:	3714      	adds	r7, #20
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop

08004e30 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4a28      	ldr	r2, [pc, #160]	; (8004edc <XMC_USIC_Enable+0xac>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d118      	bne.n	8004e72 <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8004e40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e44:	f7fd fc02 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8004e48:	bf00      	nop
 8004e4a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e4e:	f7fd fc19 	bl	8002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004e52:	4603      	mov	r3, r0
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1f8      	bne.n	8004e4a <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8004e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e5c:	f7fd fa72 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8004e60:	bf00      	nop
 8004e62:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004e66:	f7fd fa89 	bl	800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1f8      	bne.n	8004e62 <XMC_USIC_Enable+0x32>
 8004e70:	e030      	b.n	8004ed4 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <XMC_USIC_Enable+0xb0>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d114      	bne.n	8004ea4 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8004e7a:	481a      	ldr	r0, [pc, #104]	; (8004ee4 <XMC_USIC_Enable+0xb4>)
 8004e7c:	f7fd fbe6 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8004e80:	bf00      	nop
 8004e82:	4818      	ldr	r0, [pc, #96]	; (8004ee4 <XMC_USIC_Enable+0xb4>)
 8004e84:	f7fd fbfe 	bl	8002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d1f9      	bne.n	8004e82 <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8004e8e:	4815      	ldr	r0, [pc, #84]	; (8004ee4 <XMC_USIC_Enable+0xb4>)
 8004e90:	f7fd fa58 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8004e94:	bf00      	nop
 8004e96:	4813      	ldr	r0, [pc, #76]	; (8004ee4 <XMC_USIC_Enable+0xb4>)
 8004e98:	f7fd fa70 	bl	800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1f9      	bne.n	8004e96 <XMC_USIC_Enable+0x66>
 8004ea2:	e017      	b.n	8004ed4 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	4a10      	ldr	r2, [pc, #64]	; (8004ee8 <XMC_USIC_Enable+0xb8>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d113      	bne.n	8004ed4 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8004eac:	480f      	ldr	r0, [pc, #60]	; (8004eec <XMC_USIC_Enable+0xbc>)
 8004eae:	f7fd fbcd 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8004eb2:	bf00      	nop
 8004eb4:	480d      	ldr	r0, [pc, #52]	; (8004eec <XMC_USIC_Enable+0xbc>)
 8004eb6:	f7fd fbe5 	bl	8002684 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1f9      	bne.n	8004eb4 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8004ec0:	480a      	ldr	r0, [pc, #40]	; (8004eec <XMC_USIC_Enable+0xbc>)
 8004ec2:	f7fd fa3f 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8004ec6:	bf00      	nop
 8004ec8:	4808      	ldr	r0, [pc, #32]	; (8004eec <XMC_USIC_Enable+0xbc>)
 8004eca:	f7fd fa57 	bl	800237c <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f9      	bne.n	8004ec8 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40030008 	.word	0x40030008
 8004ee0:	48020008 	.word	0x48020008
 8004ee4:	10000080 	.word	0x10000080
 8004ee8:	48024008 	.word	0x48024008
 8004eec:	10000100 	.word	0x10000100

08004ef0 <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8004ef4:	2020      	movs	r0, #32
 8004ef6:	f7fd fb99 	bl	800262c <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
 8004efa:	4803      	ldr	r0, [pc, #12]	; (8004f08 <XMC_WDT_Enable+0x18>)
 8004efc:	f7fd fba6 	bl	800264c <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8004f00:	4801      	ldr	r0, [pc, #4]	; (8004f08 <XMC_WDT_Enable+0x18>)
 8004f02:	f7fd fa1f 	bl	8002344 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	20000002 	.word	0x20000002

08004f0c <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8004f14:	f7ff ffec 	bl	8004ef0 <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8004f18:	4a07      	ldr	r2, [pc, #28]	; (8004f38 <XMC_WDT_Init+0x2c>)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8004f20:	4a05      	ldr	r2, [pc, #20]	; (8004f38 <XMC_WDT_Init+0x2c>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8004f28:	4a03      	ldr	r2, [pc, #12]	; (8004f38 <XMC_WDT_Init+0x2c>)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	6153      	str	r3, [r2, #20]
}
 8004f30:	3708      	adds	r7, #8
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop
 8004f38:	50008000 	.word	0x50008000

08004f3c <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004f44:	4b14      	ldr	r3, [pc, #80]	; (8004f98 <_sbrk+0x5c>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8004f4c:	4b12      	ldr	r3, [pc, #72]	; (8004f98 <_sbrk+0x5c>)
 8004f4e:	4a13      	ldr	r2, [pc, #76]	; (8004f9c <_sbrk+0x60>)
 8004f50:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8004f52:	4b11      	ldr	r3, [pc, #68]	; (8004f98 <_sbrk+0x5c>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3303      	adds	r3, #3
 8004f5c:	f023 0303 	bic.w	r3, r3, #3
 8004f60:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004f62:	4b0d      	ldr	r3, [pc, #52]	; (8004f98 <_sbrk+0x5c>)
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4413      	add	r3, r2
 8004f6a:	4a0d      	ldr	r2, [pc, #52]	; (8004fa0 <_sbrk+0x64>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d207      	bcs.n	8004f80 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8004f70:	4b09      	ldr	r3, [pc, #36]	; (8004f98 <_sbrk+0x5c>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4413      	add	r3, r2
 8004f78:	4a07      	ldr	r2, [pc, #28]	; (8004f98 <_sbrk+0x5c>)
 8004f7a:	6013      	str	r3, [r2, #0]
    return (base);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	e006      	b.n	8004f8e <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8004f80:	f00c fd04 	bl	801198c <__errno>
 8004f84:	4602      	mov	r2, r0
 8004f86:	230c      	movs	r3, #12
 8004f88:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8004f8a:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	1fff43d0 	.word	0x1fff43d0
 8004f9c:	20000000 	.word	0x20000000
 8004fa0:	2003ffc0 	.word	0x2003ffc0

08004fa4 <_init>:

/* Init */
void _init(void)
{}
 8004fa4:	b480      	push	{r7}
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <IOExp_Configure>:
}

/* Configures pin input and output for corresponding ports as provided in port0 and port1 parameter */
/* IOExp_address is the device address, e.g. 0x40 */
void IOExp_Configure(I2C_MASTER_t *handle, uint8_t IOExp_address, uint8_t port0, uint8_t port1)
{
 8004fb0:	b590      	push	{r4, r7, lr}
 8004fb2:	b093      	sub	sp, #76	; 0x4c
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	70fb      	strb	r3, [r7, #3]
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	70bb      	strb	r3, [r7, #2]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t data_ptr[20] = {0}, data_RxPtr[20] = {0}, CMD;
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
 8004fde:	3304      	adds	r3, #4
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	601a      	str	r2, [r3, #0]
 8004fea:	3304      	adds	r3, #4
 8004fec:	2200      	movs	r2, #0
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	3304      	adds	r3, #4
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	3304      	adds	r3, #4
 8004ff8:	f107 0308 	add.w	r3, r7, #8
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]
 8005000:	3304      	adds	r3, #4
 8005002:	2200      	movs	r2, #0
 8005004:	601a      	str	r2, [r3, #0]
 8005006:	3304      	adds	r3, #4
 8005008:	2200      	movs	r2, #0
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	3304      	adds	r3, #4
 800500e:	2200      	movs	r2, #0
 8005010:	601a      	str	r2, [r3, #0]
 8005012:	3304      	adds	r3, #4
 8005014:	2200      	movs	r2, #0
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	3304      	adds	r3, #4
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 800501a:	2301      	movs	r3, #1
 800501c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	bool test_result = false;
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t pass_count=0;
 8005026:	2300      	movs	r3, #0
 8005028:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/*********************************************TEST port 0 output, port 1 input ************************************************/
	/* Configure port 0 */
	CMD = CONFIG_REG_PORT0;
 800502c:	2306      	movs	r3, #6
 800502e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	data_ptr[0] = CMD;
 8005032:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005036:	773b      	strb	r3, [r7, #28]
	data_ptr[1] = port0; // data to port 0
 8005038:	78bb      	ldrb	r3, [r7, #2]
 800503a:	777b      	strb	r3, [r7, #29]
	data_ptr[2] = port1; // data to port 1
 800503c:	787b      	ldrb	r3, [r7, #1]
 800503e:	77bb      	strb	r3, [r7, #30]
	data_count = 3;
 8005040:	2303      	movs	r3, #3
 8005042:	633b      	str	r3, [r7, #48]	; 0x30

	for(int i = 0; i < 0xffff; i++);
 8005044:	2300      	movs	r3, #0
 8005046:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005048:	e002      	b.n	8005050 <IOExp_Configure+0xa0>
 800504a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800504c:	3301      	adds	r3, #1
 800504e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005052:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005056:	4293      	cmp	r3, r2
 8005058:	ddf7      	ble.n	800504a <IOExp_Configure+0x9a>
	/* Set Port 0 as output and port 1 as input */
	I2C_MASTER_Transmit(handle, send_start, IOExp_address/*I2C_SLAVE_ADDRESS*/, &data_ptr[0], data_count, send_stop);
 800505a:	78fa      	ldrb	r2, [r7, #3]
 800505c:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8005060:	f107 041c 	add.w	r4, r7, #28
 8005064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005066:	9300      	str	r3, [sp, #0]
 8005068:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 800506c:	9301      	str	r3, [sp, #4]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	4623      	mov	r3, r4
 8005072:	f002 fecf 	bl	8007e14 <I2C_MASTER_Transmit>
}
 8005076:	3744      	adds	r7, #68	; 0x44
 8005078:	46bd      	mov	sp, r7
 800507a:	bd90      	pop	{r4, r7, pc}

0800507c <IOExp_SetPIN_UPDATE>:

/* Internal function to set a pin high or low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_UPDATE(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin, bool pin_level)
{
 800507c:	b590      	push	{r4, r7, lr}
 800507e:	b091      	sub	sp, #68	; 0x44
 8005080:	af04      	add	r7, sp, #16
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	4608      	mov	r0, r1
 8005086:	4611      	mov	r1, r2
 8005088:	461a      	mov	r2, r3
 800508a:	4603      	mov	r3, r0
 800508c:	70fb      	strb	r3, [r7, #3]
 800508e:	460b      	mov	r3, r1
 8005090:	70bb      	strb	r3, [r7, #2]
 8005092:	4613      	mov	r3, r2
 8005094:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8005096:	2301      	movs	r3, #1
 8005098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800509c:	2301      	movs	r3, #1
 800509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, data_Rx[2] = {0}, CMD;
 80050a2:	f107 030c 	add.w	r3, r7, #12
 80050a6:	2200      	movs	r2, #0
 80050a8:	601a      	str	r2, [r3, #0]
 80050aa:	3304      	adds	r3, #4
 80050ac:	2200      	movs	r2, #0
 80050ae:	601a      	str	r2, [r3, #0]
 80050b0:	3304      	adds	r3, #4
 80050b2:	2200      	movs	r2, #0
 80050b4:	601a      	str	r2, [r3, #0]
 80050b6:	3304      	adds	r3, #4
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	3304      	adds	r3, #4
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	3304      	adds	r3, #4
 80050c4:	2300      	movs	r3, #0
 80050c6:	813b      	strh	r3, [r7, #8]
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(0 == port)
 80050ce:	78bb      	ldrb	r3, [r7, #2]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d103      	bne.n	80050dc <IOExp_SetPIN_UPDATE+0x60>
	{
		/* Read port 0 configuration */
		CMD = OUTPUT_REG_PORT0;
 80050d4:	2302      	movs	r3, #2
 80050d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80050da:	e002      	b.n	80050e2 <IOExp_SetPIN_UPDATE+0x66>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = OUTPUT_REG_PORT1;
 80050dc:	2303      	movs	r3, #3
 80050de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 80050e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80050e6:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 80050e8:	2301      	movs	r3, #1
 80050ea:	623b      	str	r3, [r7, #32]

	send_stop = false;
 80050ec:	2300      	movs	r3, #0
 80050ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port 0 */
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80050f2:	78fa      	ldrb	r2, [r7, #3]
 80050f4:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80050f8:	f107 040c 	add.w	r4, r7, #12
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	9300      	str	r3, [sp, #0]
 8005100:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	4623      	mov	r3, r4
 800510a:	f002 fe83 	bl	8007e14 <I2C_MASTER_Transmit>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005114:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005118:	2b00      	cmp	r3, #0
 800511a:	d15d      	bne.n	80051d8 <IOExp_SetPIN_UPDATE+0x15c>
	{
		//send_start = true;
		send_start = true;
 800511c:	2301      	movs	r3, #1
 800511e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 8005122:	2301      	movs	r3, #1
 8005124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* Read Port 1 pins */
	//	I2C_status = I2C_MASTER_Receive(&I2C_MASTER_0, send_start, IOExp_Address, &data_Rx[0], data_count, send_stop, true);
		//data_count = 2;
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, &data_ptr[1], data_count, send_stop, true);
 8005128:	78fa      	ldrb	r2, [r7, #3]
 800512a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800512e:	f107 030c 	add.w	r3, r7, #12
 8005132:	1c5c      	adds	r4, r3, #1
 8005134:	6a3b      	ldr	r3, [r7, #32]
 8005136:	9300      	str	r3, [sp, #0]
 8005138:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800513c:	9301      	str	r3, [sp, #4]
 800513e:	2301      	movs	r3, #1
 8005140:	9302      	str	r3, [sp, #8]
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4623      	mov	r3, r4
 8005146:	f002 fe8f 	bl	8007e68 <I2C_MASTER_Receive>
 800514a:	4603      	mov	r3, r0
 800514c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005150:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005154:	2b00      	cmp	r3, #0
 8005156:	d13f      	bne.n	80051d8 <IOExp_SetPIN_UPDATE+0x15c>
		{
			if(PIN_HIGH == pin_level)
 8005158:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800515c:	2b00      	cmp	r3, #0
 800515e:	d00c      	beq.n	800517a <IOExp_SetPIN_UPDATE+0xfe>
			{
				/* Update output register value */
				data_ptr[1] |= /*data_Rx[0] |*/ (1 << pin);
 8005160:	7b7b      	ldrb	r3, [r7, #13]
 8005162:	b2d9      	uxtb	r1, r3
 8005164:	787b      	ldrb	r3, [r7, #1]
 8005166:	2201      	movs	r2, #1
 8005168:	fa02 f303 	lsl.w	r3, r2, r3
 800516c:	b2db      	uxtb	r3, r3
 800516e:	460a      	mov	r2, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	b2db      	uxtb	r3, r3
 8005174:	b2db      	uxtb	r3, r3
 8005176:	737b      	strb	r3, [r7, #13]
 8005178:	e00d      	b.n	8005196 <IOExp_SetPIN_UPDATE+0x11a>
			}
			else
			{
				/* Update output register value */
				data_ptr[1] &= /*data_Rx[0] &*/ (~(1 << pin));
 800517a:	7b7b      	ldrb	r3, [r7, #13]
 800517c:	b2d9      	uxtb	r1, r3
 800517e:	787b      	ldrb	r3, [r7, #1]
 8005180:	2201      	movs	r2, #1
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	b2db      	uxtb	r3, r3
 8005188:	43db      	mvns	r3, r3
 800518a:	b2db      	uxtb	r3, r3
 800518c:	460a      	mov	r2, r1
 800518e:	4013      	ands	r3, r2
 8005190:	b2db      	uxtb	r3, r3
 8005192:	b2db      	uxtb	r3, r3
 8005194:	737b      	strb	r3, [r7, #13]
			}

			data_count = 2;
 8005196:	2302      	movs	r3, #2
 8005198:	623b      	str	r3, [r7, #32]
			send_start = true;
 800519a:	2301      	movs	r3, #1
 800519c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			for(int i= 0; i < 0xffff; i++);
 80051a0:	2300      	movs	r3, #0
 80051a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80051a4:	e002      	b.n	80051ac <IOExp_SetPIN_UPDATE+0x130>
 80051a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a8:	3301      	adds	r3, #1
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80051ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051ae:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80051b2:	4293      	cmp	r3, r2
 80051b4:	ddf7      	ble.n	80051a6 <IOExp_SetPIN_UPDATE+0x12a>
			/* update pin */
			I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80051bc:	f107 040c 	add.w	r4, r7, #12
 80051c0:	6a3b      	ldr	r3, [r7, #32]
 80051c2:	9300      	str	r3, [sp, #0]
 80051c4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051c8:	9301      	str	r3, [sp, #4]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	4623      	mov	r3, r4
 80051ce:	f002 fe21 	bl	8007e14 <I2C_MASTER_Transmit>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			/* data is expected to be successfully written at this point */
		}
	}

	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 80051d8:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d101      	bne.n	80051e4 <IOExp_SetPIN_UPDATE+0x168>
		return true;
 80051e0:	2301      	movs	r3, #1
 80051e2:	e000      	b.n	80051e6 <IOExp_SetPIN_UPDATE+0x16a>
	else
		return false;
 80051e4:	2300      	movs	r3, #0
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3734      	adds	r7, #52	; 0x34
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd90      	pop	{r4, r7, pc}
 80051ee:	bf00      	nop

080051f0 <IOExp_SetPIN_HIGH>:

/* Function to set a pin high for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_HIGH(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b085      	sub	sp, #20
 80051f4:	af02      	add	r7, sp, #8
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	4608      	mov	r0, r1
 80051fa:	4611      	mov	r1, r2
 80051fc:	461a      	mov	r2, r3
 80051fe:	4603      	mov	r3, r0
 8005200:	70fb      	strb	r3, [r7, #3]
 8005202:	460b      	mov	r3, r1
 8005204:	70bb      	strb	r3, [r7, #2]
 8005206:	4613      	mov	r3, r2
 8005208:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_HIGH);
 800520a:	78f9      	ldrb	r1, [r7, #3]
 800520c:	78ba      	ldrb	r2, [r7, #2]
 800520e:	787c      	ldrb	r4, [r7, #1]
 8005210:	2301      	movs	r3, #1
 8005212:	9300      	str	r3, [sp, #0]
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	4623      	mov	r3, r4
 8005218:	f7ff ff30 	bl	800507c <IOExp_SetPIN_UPDATE>
 800521c:	4603      	mov	r3, r0
}
 800521e:	4618      	mov	r0, r3
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	bd90      	pop	{r4, r7, pc}
 8005226:	bf00      	nop

08005228 <IOExp_SetPIN_LOW>:

/* Function to set a pin low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_LOW(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 8005228:	b590      	push	{r4, r7, lr}
 800522a:	b085      	sub	sp, #20
 800522c:	af02      	add	r7, sp, #8
 800522e:	6078      	str	r0, [r7, #4]
 8005230:	4608      	mov	r0, r1
 8005232:	4611      	mov	r1, r2
 8005234:	461a      	mov	r2, r3
 8005236:	4603      	mov	r3, r0
 8005238:	70fb      	strb	r3, [r7, #3]
 800523a:	460b      	mov	r3, r1
 800523c:	70bb      	strb	r3, [r7, #2]
 800523e:	4613      	mov	r3, r2
 8005240:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_LOW);
 8005242:	78f9      	ldrb	r1, [r7, #3]
 8005244:	78ba      	ldrb	r2, [r7, #2]
 8005246:	787c      	ldrb	r4, [r7, #1]
 8005248:	2300      	movs	r3, #0
 800524a:	9300      	str	r3, [sp, #0]
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	4623      	mov	r3, r4
 8005250:	f7ff ff14 	bl	800507c <IOExp_SetPIN_UPDATE>
 8005254:	4603      	mov	r3, r0
}
 8005256:	4618      	mov	r0, r3
 8005258:	370c      	adds	r7, #12
 800525a:	46bd      	mov	sp, r7
 800525c:	bd90      	pop	{r4, r7, pc}
 800525e:	bf00      	nop

08005260 <IOExp_ReadPIN_LEVEL>:
//	}
//}


uint8_t* IOExp_ReadPIN_LEVEL(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b091      	sub	sp, #68	; 0x44
 8005264:	af04      	add	r7, sp, #16
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	70fb      	strb	r3, [r7, #3]
 800526c:	4613      	mov	r3, r2
 800526e:	70bb      	strb	r3, [r7, #2]
	bool send_start = true, send_stop = true;
 8005270:	2301      	movs	r3, #1
 8005272:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005276:	2301      	movs	r3, #1
 8005278:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, /*data_Rx[2] = {0},*/ CMD;
 800527c:	f107 030c 	add.w	r3, r7, #12
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	3304      	adds	r3, #4
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	3304      	adds	r3, #4
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	3304      	adds	r3, #4
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
 8005296:	3304      	adds	r3, #4
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	3304      	adds	r3, #4
	static uint8_t data_Rx[2] = {0, 0};
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(0 == port)
 80052a4:	78bb      	ldrb	r3, [r7, #2]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d103      	bne.n	80052b2 <IOExp_ReadPIN_LEVEL+0x52>
	{
		/* Read port 0 configuration */
		CMD = INPUT_REG_PORT0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80052b0:	e002      	b.n	80052b8 <IOExp_ReadPIN_LEVEL+0x58>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = INPUT_REG_PORT1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 80052b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052bc:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 80052be:	2301      	movs	r3, #1
 80052c0:	623b      	str	r3, [r7, #32]

	send_stop = true;
 80052c2:	2301      	movs	r3, #1
 80052c4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port */
	//for(int i = 0; i < 0xffff; i++);
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80052c8:	78fa      	ldrb	r2, [r7, #3]
 80052ca:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80052ce:	f107 040c 	add.w	r4, r7, #12
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	9300      	str	r3, [sp, #0]
 80052d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052da:	9301      	str	r3, [sp, #4]
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	4623      	mov	r3, r4
 80052e0:	f002 fd98 	bl	8007e14 <I2C_MASTER_Transmit>
 80052e4:	4603      	mov	r3, r0
 80052e6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 80052ea:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d127      	bne.n	8005342 <IOExp_ReadPIN_LEVEL+0xe2>
	{
		send_start = true;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 80052f8:	2301      	movs	r3, #1
 80052fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i = 0; i < 0xffff; i++);
 80052fe:	2300      	movs	r3, #0
 8005300:	62bb      	str	r3, [r7, #40]	; 0x28
 8005302:	e002      	b.n	800530a <IOExp_ReadPIN_LEVEL+0xaa>
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	3301      	adds	r3, #1
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
 800530a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800530c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005310:	4293      	cmp	r3, r2
 8005312:	ddf7      	ble.n	8005304 <IOExp_ReadPIN_LEVEL+0xa4>
		/* Read Port pins */
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, data_Rx, 2/*data_count*/, send_stop, true);
 8005314:	78fa      	ldrb	r2, [r7, #3]
 8005316:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800531a:	2302      	movs	r3, #2
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	2301      	movs	r3, #1
 8005326:	9302      	str	r3, [sp, #8]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	4b08      	ldr	r3, [pc, #32]	; (800534c <IOExp_ReadPIN_LEVEL+0xec>)
 800532c:	f002 fd9c 	bl	8007e68 <I2C_MASTER_Receive>
 8005330:	4603      	mov	r3, r0
 8005332:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005336:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800533a:	2b00      	cmp	r3, #0
 800533c:	d101      	bne.n	8005342 <IOExp_ReadPIN_LEVEL+0xe2>
		{
			return (data_Rx);
 800533e:	4b03      	ldr	r3, [pc, #12]	; (800534c <IOExp_ReadPIN_LEVEL+0xec>)
 8005340:	e7ff      	b.n	8005342 <IOExp_ReadPIN_LEVEL+0xe2>
		}
	}
}
 8005342:	4618      	mov	r0, r3
 8005344:	3734      	adds	r7, #52	; 0x34
 8005346:	46bd      	mov	sp, r7
 8005348:	bd90      	pop	{r4, r7, pc}
 800534a:	bf00      	nop
 800534c:	1fff43d4 	.word	0x1fff43d4

08005350 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
 8005358:	460b      	mov	r3, r1
 800535a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	fa22 f303 	lsr.w	r3, r2, r3
 8005366:	f003 0301 	and.w	r3, r3, #1
}
 800536a:	4618      	mov	r0, r3
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop

08005378 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b082      	sub	sp, #8
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681a      	ldr	r2, [r3, #0]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	7c1b      	ldrb	r3, [r3, #16]
 8005388:	4610      	mov	r0, r2
 800538a:	4619      	mov	r1, r3
 800538c:	f7ff ffe0 	bl	8005350 <XMC_GPIO_GetInput>
 8005390:	4603      	mov	r3, r0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3708      	adds	r7, #8
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop

0800539c <Input_Capture>:
	//if(Vcu_InPuts.IGNITION_1_IN)
//#endif

Vcu_InPuts_t Vcu_InPuts;
void Input_Capture(void)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	af00      	add	r7, sp, #0

	//Vcu_InPuts.charger_connect_IN = DIGITAL_IO_GetInput(&CHARGER_CONNECTED_IN_D);

	Vcu_InPuts.IGNITION_1_IN = DIGITAL_IO_GetInput(&IGNI_POS1_IN_D);
 80053a0:	481f      	ldr	r0, [pc, #124]	; (8005420 <Input_Capture+0x84>)
 80053a2:	f7ff ffe9 	bl	8005378 <DIGITAL_IO_GetInput>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	bf14      	ite	ne
 80053ac:	2301      	movne	r3, #1
 80053ae:	2300      	moveq	r3, #0
 80053b0:	b2da      	uxtb	r2, r3
 80053b2:	4b1c      	ldr	r3, [pc, #112]	; (8005424 <Input_Capture+0x88>)
 80053b4:	701a      	strb	r2, [r3, #0]

	Vcu_InPuts.IGNITION_2_IN = DIGITAL_IO_GetInput(&IGNI_POS2_IN_D);
 80053b6:	481c      	ldr	r0, [pc, #112]	; (8005428 <Input_Capture+0x8c>)
 80053b8:	f7ff ffde 	bl	8005378 <DIGITAL_IO_GetInput>
 80053bc:	4603      	mov	r3, r0
 80053be:	2b00      	cmp	r3, #0
 80053c0:	bf14      	ite	ne
 80053c2:	2301      	movne	r3, #1
 80053c4:	2300      	moveq	r3, #0
 80053c6:	b2da      	uxtb	r2, r3
 80053c8:	4b16      	ldr	r3, [pc, #88]	; (8005424 <Input_Capture+0x88>)
 80053ca:	705a      	strb	r2, [r3, #1]

	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 80053cc:	4817      	ldr	r0, [pc, #92]	; (800542c <Input_Capture+0x90>)
 80053ce:	f7ff ffd3 	bl	8005378 <DIGITAL_IO_GetInput>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b14      	ldr	r3, [pc, #80]	; (8005430 <Input_Capture+0x94>)
 80053e0:	749a      	strb	r2, [r3, #18]

	Switch_Ios_IN.handbrake_sw_IN = DIGITAL_IO_GetInput(&HANDBRAKE_IN_D);
 80053e2:	4814      	ldr	r0, [pc, #80]	; (8005434 <Input_Capture+0x98>)
 80053e4:	f7ff ffc8 	bl	8005378 <DIGITAL_IO_GetInput>
 80053e8:	4603      	mov	r3, r0
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	bf14      	ite	ne
 80053ee:	2301      	movne	r3, #1
 80053f0:	2300      	moveq	r3, #0
 80053f2:	b2da      	uxtb	r2, r3
 80053f4:	4b0e      	ldr	r3, [pc, #56]	; (8005430 <Input_Capture+0x94>)
 80053f6:	721a      	strb	r2, [r3, #8]

	Switch_Ios_IN.electronic_brake_in_d = DIGITAL_IO_GetInput(&ELEC_HANDBRAKE_IN_D);
 80053f8:	480f      	ldr	r0, [pc, #60]	; (8005438 <Input_Capture+0x9c>)
 80053fa:	f7ff ffbd 	bl	8005378 <DIGITAL_IO_GetInput>
 80053fe:	4603      	mov	r3, r0
 8005400:	2b00      	cmp	r3, #0
 8005402:	bf14      	ite	ne
 8005404:	2301      	movne	r3, #1
 8005406:	2300      	moveq	r3, #0
 8005408:	b2da      	uxtb	r2, r3
 800540a:	4b09      	ldr	r3, [pc, #36]	; (8005430 <Input_Capture+0x94>)
 800540c:	715a      	strb	r2, [r3, #5]

	Can_Inputs();
 800540e:	f000 f815 	bl	800543c <Can_Inputs>

	state_1_InputCapture();
 8005412:	f000 f857 	bl	80054c4 <state_1_InputCapture>
	State_2_InputCapture();
 8005416:	f000 fa3d 	bl	8005894 <State_2_InputCapture>

	read_temp();
 800541a:	f000 f827 	bl	800546c <read_temp>

}
 800541e:	bd80      	pop	{r7, pc}
 8005420:	0801390c 	.word	0x0801390c
 8005424:	1fff5104 	.word	0x1fff5104
 8005428:	080138f8 	.word	0x080138f8
 800542c:	08013948 	.word	0x08013948
 8005430:	1fff4844 	.word	0x1fff4844
 8005434:	08013934 	.word	0x08013934
 8005438:	08013718 	.word	0x08013718

0800543c <Can_Inputs>:

void Can_Inputs(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
	uart_debugg("in can_inputs");
 8005440:	4808      	ldr	r0, [pc, #32]	; (8005464 <Can_Inputs+0x28>)
 8005442:	f00a fdab 	bl	800ff9c <uart_debugg>
	/*charger read */
			Read_CAN_id0x18FF50E5();
 8005446:	f005 fee5 	bl	800b214 <Read_CAN_id0x18FF50E5>
		Gtake_Rx_29bit();

#elif IRP
//		  SuperLooptime_Start();

		Irp_Rx_29bit();
 800544a:	f005 fe71 	bl	800b130 <Irp_Rx_29bit>

#endif


		//Read_CAN_BMS();//11bit
		Read_can_bms_29bit(); //29 bit
 800544e:	f004 fe0f 	bl	800a070 <Read_can_bms_29bit>
		CAN_INPUT_HVAC();
 8005452:	f005 faa1 	bl	800a998 <CAN_INPUT_HVAC>
		CAN_Read_EPS();
 8005456:	f005 f8b3 	bl	800a5c0 <CAN_Read_EPS>
		/*charger read */
		//Read_CAN_id0x18FF50E5();

		//ruff();

		uart_debugg("exit can_inputs");
 800545a:	4803      	ldr	r0, [pc, #12]	; (8005468 <Can_Inputs+0x2c>)
 800545c:	f00a fd9e 	bl	800ff9c <uart_debugg>
}
 8005460:	bd80      	pop	{r7, pc}
 8005462:	bf00      	nop
 8005464:	080132a8 	.word	0x080132a8
 8005468:	080132b8 	.word	0x080132b8

0800546c <read_temp>:

void read_temp(void)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0


	U18_read_temp();
 8005470:	f000 fa80 	bl	8005974 <U18_read_temp>



}
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop

08005478 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	460b      	mov	r3, r1
 8005482:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	fa22 f303 	lsr.w	r3, r2, r3
 800548e:	f003 0301 	and.w	r3, r3, #1
}
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop

080054a0 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	7c1b      	ldrb	r3, [r3, #16]
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	f7ff ffe0 	bl	8005478 <XMC_GPIO_GetInput>
 80054b8:	4603      	mov	r3, r0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop

080054c4 <state_1_InputCapture>:
#include "Vcu_Config.h"
#include "IOExp_lib.h"
#include "Vcu_Init.h"

void state_1_InputCapture(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_1_IN)
 80054c8:	4b0a      	ldr	r3, [pc, #40]	; (80054f4 <state_1_InputCapture+0x30>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_1_IN))
	{
		/* do the necessary task */
	}

	Switch_Ios_IN.brake_oil_IN = DIGITAL_IO_GetInput(&BRAKE_OIL_IN_D);
 80054ce:	480a      	ldr	r0, [pc, #40]	; (80054f8 <state_1_InputCapture+0x34>)
 80054d0:	f7ff ffe6 	bl	80054a0 <DIGITAL_IO_GetInput>
 80054d4:	4603      	mov	r3, r0
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	bf14      	ite	ne
 80054da:	2301      	movne	r3, #1
 80054dc:	2300      	moveq	r3, #0
 80054de:	b2da      	uxtb	r2, r3
 80054e0:	4b06      	ldr	r3, [pc, #24]	; (80054fc <state_1_InputCapture+0x38>)
 80054e2:	719a      	strb	r2, [r3, #6]

	/* check for io_expander */
	Io_Exp_U24();
 80054e4:	f000 f80c 	bl	8005500 <Io_Exp_U24>
	Io_Exp_U25();
 80054e8:	f000 f8fe 	bl	80056e8 <Io_Exp_U25>
	Io_Exp_U38();
 80054ec:	f000 f954 	bl	8005798 <Io_Exp_U38>
	//Io_Exp_U48();

}
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	1fff5104 	.word	0x1fff5104
 80054f8:	080138bc 	.word	0x080138bc
 80054fc:	1fff4844 	.word	0x1fff4844

08005500 <Io_Exp_U24>:

void Io_Exp_U24(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b084      	sub	sp, #16
 8005504:	af00      	add	r7, sp, #0
	//uart_debugg("in U24");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 8005506:	2300      	movs	r3, #0
 8005508:	60fb      	str	r3, [r7, #12]
 800550a:	2340      	movs	r3, #64	; 0x40
 800550c:	72fb      	strb	r3, [r7, #11]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 800550e:	7afb      	ldrb	r3, [r7, #11]
 8005510:	4870      	ldr	r0, [pc, #448]	; (80056d4 <Io_Exp_U24+0x1d4>)
 8005512:	4619      	mov	r1, r3
 8005514:	2200      	movs	r2, #0
 8005516:	f7ff fea3 	bl	8005260 <IOExp_ReadPIN_LEVEL>
 800551a:	60f8      	str	r0, [r7, #12]

	/* port 0 */

	Combi_Switch_IN.low_beam_IN = (port_data[0] & (0x01));
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	bf14      	ite	ne
 8005528:	2301      	movne	r3, #1
 800552a:	2300      	moveq	r3, #0
 800552c:	b2da      	uxtb	r2, r3
 800552e:	4b6a      	ldr	r3, [pc, #424]	; (80056d8 <Io_Exp_U24+0x1d8>)
 8005530:	701a      	strb	r2, [r3, #0]

	Combi_Switch_IN.high_beam_IN = ((port_data[0] >> 1) & (0x01));
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	085b      	lsrs	r3, r3, #1
 8005538:	b2db      	uxtb	r3, r3
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf14      	ite	ne
 8005542:	2301      	movne	r3, #1
 8005544:	2300      	moveq	r3, #0
 8005546:	b2da      	uxtb	r2, r3
 8005548:	4b63      	ldr	r3, [pc, #396]	; (80056d8 <Io_Exp_U24+0x1d8>)
 800554a:	705a      	strb	r2, [r3, #1]

	Combi_Switch_IN.pos_light_IN = ((port_data[0] >> 2) & (0x01));
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	089b      	lsrs	r3, r3, #2
 8005552:	b2db      	uxtb	r3, r3
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	bf14      	ite	ne
 800555c:	2301      	movne	r3, #1
 800555e:	2300      	moveq	r3, #0
 8005560:	b2da      	uxtb	r2, r3
 8005562:	4b5d      	ldr	r3, [pc, #372]	; (80056d8 <Io_Exp_U24+0x1d8>)
 8005564:	709a      	strb	r2, [r3, #2]

	Combi_Switch_IN.left_indicator_IN = ((port_data[0] >> 3) & 0x01);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	08db      	lsrs	r3, r3, #3
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	bf14      	ite	ne
 8005576:	2301      	movne	r3, #1
 8005578:	2300      	moveq	r3, #0
 800557a:	b2da      	uxtb	r2, r3
 800557c:	4b56      	ldr	r3, [pc, #344]	; (80056d8 <Io_Exp_U24+0x1d8>)
 800557e:	70da      	strb	r2, [r3, #3]

	Combi_Switch_IN.right_indicator_IN = ((port_data[0] >> 4) & 0x01);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	091b      	lsrs	r3, r3, #4
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b50      	ldr	r3, [pc, #320]	; (80056d8 <Io_Exp_U24+0x1d8>)
 8005598:	711a      	strb	r2, [r3, #4]

	Combi_Switch_IN.hazzard_sw_IN = ((port_data[0] >> 5) & 0x01);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	095b      	lsrs	r3, r3, #5
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b49      	ldr	r3, [pc, #292]	; (80056d8 <Io_Exp_U24+0x1d8>)
 80055b2:	715a      	strb	r2, [r3, #5]

	Seat_Switch_IN.seat_belt_d_IN = ((port_data[0] >> 6) & 0x01);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	099b      	lsrs	r3, r3, #6
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4b44      	ldr	r3, [pc, #272]	; (80056dc <Io_Exp_U24+0x1dc>)
 80055cc:	701a      	strb	r2, [r3, #0]

	Seat_Switch_IN.seat_belt_p_IN = ((port_data[0] >> 7) & 0x01);
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	09db      	lsrs	r3, r3, #7
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b3d      	ldr	r3, [pc, #244]	; (80056dc <Io_Exp_U24+0x1dc>)
 80055e6:	705a      	strb	r2, [r3, #1]
	/*    ***********************************************************   */

	/* port 1 */


	Seat_Switch_IN.seat_occup_p_IN = (port_data[1] & (0x01));
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	3301      	adds	r3, #1
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	bf14      	ite	ne
 80055f6:	2301      	movne	r3, #1
 80055f8:	2300      	moveq	r3, #0
 80055fa:	b2da      	uxtb	r2, r3
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <Io_Exp_U24+0x1dc>)
 80055fe:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.door_lock_IN = ((port_data[1] >> 1) & (0x01));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	3301      	adds	r3, #1
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	085b      	lsrs	r3, r3, #1
 8005608:	b2db      	uxtb	r3, r3
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	bf14      	ite	ne
 8005612:	2301      	movne	r3, #1
 8005614:	2300      	moveq	r3, #0
 8005616:	b2da      	uxtb	r2, r3
 8005618:	4b31      	ldr	r3, [pc, #196]	; (80056e0 <Io_Exp_U24+0x1e0>)
 800561a:	701a      	strb	r2, [r3, #0]

	Door_Switch_IN.driver_door_IN = ((port_data[1] >> 2) & (0x01));
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	781b      	ldrb	r3, [r3, #0]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	bf14      	ite	ne
 800562e:	2301      	movne	r3, #1
 8005630:	2300      	moveq	r3, #0
 8005632:	b2da      	uxtb	r2, r3
 8005634:	4b2a      	ldr	r3, [pc, #168]	; (80056e0 <Io_Exp_U24+0x1e0>)
 8005636:	705a      	strb	r2, [r3, #1]

	Door_Switch_IN.passenger_door_IN = ((port_data[1] >> 3) & 0x01);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	3301      	adds	r3, #1
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	08db      	lsrs	r3, r3, #3
 8005640:	b2db      	uxtb	r3, r3
 8005642:	f003 0301 	and.w	r3, r3, #1
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf14      	ite	ne
 800564a:	2301      	movne	r3, #1
 800564c:	2300      	moveq	r3, #0
 800564e:	b2da      	uxtb	r2, r3
 8005650:	4b23      	ldr	r3, [pc, #140]	; (80056e0 <Io_Exp_U24+0x1e0>)
 8005652:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.passenger_2r_IN = ((port_data[1] >> 4) & 0x01);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	3301      	adds	r3, #1
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	091b      	lsrs	r3, r3, #4
 800565c:	b2db      	uxtb	r3, r3
 800565e:	f003 0301 	and.w	r3, r3, #1
 8005662:	2b00      	cmp	r3, #0
 8005664:	bf14      	ite	ne
 8005666:	2301      	movne	r3, #1
 8005668:	2300      	moveq	r3, #0
 800566a:	b2da      	uxtb	r2, r3
 800566c:	4b1c      	ldr	r3, [pc, #112]	; (80056e0 <Io_Exp_U24+0x1e0>)
 800566e:	711a      	strb	r2, [r3, #4]

	Door_Switch_IN.bonnet_IN = ((port_data[1] >> 5) & 0x01);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	3301      	adds	r3, #1
 8005674:	781b      	ldrb	r3, [r3, #0]
 8005676:	095b      	lsrs	r3, r3, #5
 8005678:	b2db      	uxtb	r3, r3
 800567a:	f003 0301 	and.w	r3, r3, #1
 800567e:	2b00      	cmp	r3, #0
 8005680:	bf14      	ite	ne
 8005682:	2301      	movne	r3, #1
 8005684:	2300      	moveq	r3, #0
 8005686:	b2da      	uxtb	r2, r3
 8005688:	4b15      	ldr	r3, [pc, #84]	; (80056e0 <Io_Exp_U24+0x1e0>)
 800568a:	719a      	strb	r2, [r3, #6]

	Door_Switch_IN.hatch_IN = ((port_data[1] >> 6) & 0x01);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	3301      	adds	r3, #1
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	099b      	lsrs	r3, r3, #6
 8005694:	b2db      	uxtb	r3, r3
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	bf14      	ite	ne
 800569e:	2301      	movne	r3, #1
 80056a0:	2300      	moveq	r3, #0
 80056a2:	b2da      	uxtb	r2, r3
 80056a4:	4b0e      	ldr	r3, [pc, #56]	; (80056e0 <Io_Exp_U24+0x1e0>)
 80056a6:	715a      	strb	r2, [r3, #5]

	Door_Switch_IN.passenger_2l_IN = ((port_data[1] >> 7) & 0x01);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	3301      	adds	r3, #1
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	09db      	lsrs	r3, r3, #7
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	f003 0301 	and.w	r3, r3, #1
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2da      	uxtb	r2, r3
 80056c0:	4b07      	ldr	r3, [pc, #28]	; (80056e0 <Io_Exp_U24+0x1e0>)
 80056c2:	70da      	strb	r2, [r3, #3]

	char str[] = "exit U24";
 80056c4:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <Io_Exp_U24+0x1e4>)
 80056c6:	463b      	mov	r3, r7
 80056c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80056ca:	c303      	stmia	r3!, {r0, r1}
 80056cc:	701a      	strb	r2, [r3, #0]
//	uart_debugg(str);

}
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	1ffe8a5c 	.word	0x1ffe8a5c
 80056d8:	1fff48a4 	.word	0x1fff48a4
 80056dc:	1fff47e8 	.word	0x1fff47e8
 80056e0:	1fff48b8 	.word	0x1fff48b8
 80056e4:	080132c8 	.word	0x080132c8

080056e8 <Io_Exp_U25>:

void Io_Exp_U25(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b082      	sub	sp, #8
 80056ec:	af00      	add	r7, sp, #0

	//uart_debugg("in U25");

	uint8_t *port_data = NULL, IOExp_Address = 0x42;
 80056ee:	2300      	movs	r3, #0
 80056f0:	607b      	str	r3, [r7, #4]
 80056f2:	2342      	movs	r3, #66	; 0x42
 80056f4:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	4824      	ldr	r0, [pc, #144]	; (800578c <Io_Exp_U25+0xa4>)
 80056fa:	4619      	mov	r1, r3
 80056fc:	2200      	movs	r2, #0
 80056fe:	f7ff fdaf 	bl	8005260 <IOExp_ReadPIN_LEVEL>
 8005702:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.ac_on_in = ((port_data[0] >> 1) & (0x01));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	085b      	lsrs	r3, r3, #1
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 0301 	and.w	r3, r3, #1
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf14      	ite	ne
 8005714:	2301      	movne	r3, #1
 8005716:	2300      	moveq	r3, #0
 8005718:	b2da      	uxtb	r2, r3
 800571a:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <Io_Exp_U25+0xa8>)
 800571c:	739a      	strb	r2, [r3, #14]

	Hvac_IN.blower_speed1_IN = ((port_data[0] >> 2) & (0x01));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	089b      	lsrs	r3, r3, #2
 8005724:	b2db      	uxtb	r3, r3
 8005726:	f003 0301 	and.w	r3, r3, #1
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2da      	uxtb	r2, r3
 8005734:	4b17      	ldr	r3, [pc, #92]	; (8005794 <Io_Exp_U25+0xac>)
 8005736:	711a      	strb	r2, [r3, #4]

	Hvac_IN.blower_speed2_IN = ((port_data[0] >> 3) & 0x01);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	08db      	lsrs	r3, r3, #3
 800573e:	b2db      	uxtb	r3, r3
 8005740:	f003 0301 	and.w	r3, r3, #1
 8005744:	2b00      	cmp	r3, #0
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2da      	uxtb	r2, r3
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <Io_Exp_U25+0xac>)
 8005750:	715a      	strb	r2, [r3, #5]

	Hvac_IN.blower_speed3_IN = ((port_data[0] >> 4) & 0x01);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	091b      	lsrs	r3, r3, #4
 8005758:	b2db      	uxtb	r3, r3
 800575a:	f003 0301 	and.w	r3, r3, #1
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2da      	uxtb	r2, r3
 8005768:	4b0a      	ldr	r3, [pc, #40]	; (8005794 <Io_Exp_U25+0xac>)
 800576a:	719a      	strb	r2, [r3, #6]

	Hvac_IN.circulation_on_off = ((port_data[0] >> 5) & 0x01);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	781b      	ldrb	r3, [r3, #0]
 8005770:	095b      	lsrs	r3, r3, #5
 8005772:	b2db      	uxtb	r3, r3
 8005774:	f003 0301 	and.w	r3, r3, #1
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2da      	uxtb	r2, r3
 8005782:	4b04      	ldr	r3, [pc, #16]	; (8005794 <Io_Exp_U25+0xac>)
 8005784:	721a      	strb	r2, [r3, #8]

	/* port 1 */

//
	//uart_debugg("exit U25");
}
 8005786:	3708      	adds	r7, #8
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}
 800578c:	1ffe8a5c 	.word	0x1ffe8a5c
 8005790:	1fff4844 	.word	0x1fff4844
 8005794:	1fff485c 	.word	0x1fff485c

08005798 <Io_Exp_U38>:

void Io_Exp_U38(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
	//uart_debugg("in U38");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 800579e:	2300      	movs	r3, #0
 80057a0:	607b      	str	r3, [r7, #4]
 80057a2:	2340      	movs	r3, #64	; 0x40
 80057a4:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_1, IOExp_Address, 0x00);
 80057a6:	78fb      	ldrb	r3, [r7, #3]
 80057a8:	4824      	ldr	r0, [pc, #144]	; (800583c <Io_Exp_U38+0xa4>)
 80057aa:	4619      	mov	r1, r3
 80057ac:	2200      	movs	r2, #0
 80057ae:	f7ff fd57 	bl	8005260 <IOExp_ReadPIN_LEVEL>
 80057b2:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.power_window_in_d = ((port_data[0] >> 4) & 0x01);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	781b      	ldrb	r3, [r3, #0]
 80057b8:	091b      	lsrs	r3, r3, #4
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <Io_Exp_U38+0xa8>)
 80057cc:	741a      	strb	r2, [r3, #16]

	Aux_Inputs.AUX_IN4_D = ((port_data[0] >> 5) & 0x01);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	095b      	lsrs	r3, r3, #5
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 0301 	and.w	r3, r3, #1
 80057da:	2b00      	cmp	r3, #0
 80057dc:	bf14      	ite	ne
 80057de:	2301      	movne	r3, #1
 80057e0:	2300      	moveq	r3, #0
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	4b17      	ldr	r3, [pc, #92]	; (8005844 <Io_Exp_U38+0xac>)
 80057e6:	709a      	strb	r2, [r3, #2]

	Aux_Inputs.AUX_IN5_D = ((port_data[0] >> 6) & 0x01);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	781b      	ldrb	r3, [r3, #0]
 80057ec:	099b      	lsrs	r3, r3, #6
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	f003 0301 	and.w	r3, r3, #1
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bf14      	ite	ne
 80057f8:	2301      	movne	r3, #1
 80057fa:	2300      	moveq	r3, #0
 80057fc:	b2da      	uxtb	r2, r3
 80057fe:	4b11      	ldr	r3, [pc, #68]	; (8005844 <Io_Exp_U38+0xac>)
 8005800:	70da      	strb	r2, [r3, #3]

	Switch_Ios_IN.orvm_fold_IN = ((port_data[0] >> 7) & 0x01);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	09db      	lsrs	r3, r3, #7
 8005808:	b2db      	uxtb	r3, r3
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	bf14      	ite	ne
 8005812:	2301      	movne	r3, #1
 8005814:	2300      	moveq	r3, #0
 8005816:	b2da      	uxtb	r2, r3
 8005818:	4b09      	ldr	r3, [pc, #36]	; (8005840 <Io_Exp_U38+0xa8>)
 800581a:	709a      	strb	r2, [r3, #2]

	/*    ***********************************************************   */

	/* port 1 */

	Switch_Ios_IN.orvm_open_IN = (port_data[1] & (0x01));
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3301      	adds	r3, #1
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	f003 0301 	and.w	r3, r3, #1
 8005826:	2b00      	cmp	r3, #0
 8005828:	bf14      	ite	ne
 800582a:	2301      	movne	r3, #1
 800582c:	2300      	moveq	r3, #0
 800582e:	b2da      	uxtb	r2, r3
 8005830:	4b03      	ldr	r3, [pc, #12]	; (8005840 <Io_Exp_U38+0xa8>)
 8005832:	70da      	strb	r2, [r3, #3]

	//uart_debugg("exit U38");

}
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	1ffe8a68 	.word	0x1ffe8a68
 8005840:	1fff4844 	.word	0x1fff4844
 8005844:	1fff47e0 	.word	0x1fff47e0

08005848 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	460b      	mov	r3, r1
 8005852:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	fa22 f303 	lsr.w	r3, r2, r3
 800585e:	f003 0301 	and.w	r3, r3, #1
}
 8005862:	4618      	mov	r0, r3
 8005864:	370c      	adds	r7, #12
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop

08005870 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681a      	ldr	r2, [r3, #0]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	7c1b      	ldrb	r3, [r3, #16]
 8005880:	4610      	mov	r0, r2
 8005882:	4619      	mov	r1, r3
 8005884:	f7ff ffe0 	bl	8005848 <XMC_GPIO_GetInput>
 8005888:	4603      	mov	r3, r0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3708      	adds	r7, #8
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop

08005894 <State_2_InputCapture>:
 */
#include "InputCapture.h"
#include "Vcu_Config.h"

void State_2_InputCapture(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_2_IN)
 8005898:	4b02      	ldr	r3, [pc, #8]	; (80058a4 <State_2_InputCapture+0x10>)
 800589a:	785b      	ldrb	r3, [r3, #1]
 800589c:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_2_IN))
	{

	}

	Read_State2_inputs();
 800589e:	f000 f803 	bl	80058a8 <Read_State2_inputs>

}
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	1fff5104 	.word	0x1fff5104

080058a8 <Read_State2_inputs>:
void Read_State2_inputs(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 80058ac:	481b      	ldr	r0, [pc, #108]	; (800591c <Read_State2_inputs+0x74>)
 80058ae:	f7ff ffdf 	bl	8005870 <DIGITAL_IO_GetInput>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	bf14      	ite	ne
 80058b8:	2301      	movne	r3, #1
 80058ba:	2300      	moveq	r3, #0
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b18      	ldr	r3, [pc, #96]	; (8005920 <Read_State2_inputs+0x78>)
 80058c0:	749a      	strb	r2, [r3, #18]

	/* gear inputs */
	Switch_Ios_IN.gear_sw1_IN = DIGITAL_IO_GetInput(&GEAR_SW1_IN_D); //Neutral
 80058c2:	4818      	ldr	r0, [pc, #96]	; (8005924 <Read_State2_inputs+0x7c>)
 80058c4:	f7ff ffd4 	bl	8005870 <DIGITAL_IO_GetInput>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	4b12      	ldr	r3, [pc, #72]	; (8005920 <Read_State2_inputs+0x78>)
 80058d6:	725a      	strb	r2, [r3, #9]
	Switch_Ios_IN.gear_sw2_IN = DIGITAL_IO_GetInput(&GEAR_SW2_IN_D); //forward
 80058d8:	4813      	ldr	r0, [pc, #76]	; (8005928 <Read_State2_inputs+0x80>)
 80058da:	f7ff ffc9 	bl	8005870 <DIGITAL_IO_GetInput>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	bf14      	ite	ne
 80058e4:	2301      	movne	r3, #1
 80058e6:	2300      	moveq	r3, #0
 80058e8:	b2da      	uxtb	r2, r3
 80058ea:	4b0d      	ldr	r3, [pc, #52]	; (8005920 <Read_State2_inputs+0x78>)
 80058ec:	729a      	strb	r2, [r3, #10]
	Switch_Ios_IN.gear_sw3_IN = DIGITAL_IO_GetInput(&GEAR_SW3_IN_D); //reverse
 80058ee:	480f      	ldr	r0, [pc, #60]	; (800592c <Read_State2_inputs+0x84>)
 80058f0:	f7ff ffbe 	bl	8005870 <DIGITAL_IO_GetInput>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bf14      	ite	ne
 80058fa:	2301      	movne	r3, #1
 80058fc:	2300      	moveq	r3, #0
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	4b07      	ldr	r3, [pc, #28]	; (8005920 <Read_State2_inputs+0x78>)
 8005902:	72da      	strb	r2, [r3, #11]
	Switch_Ios_IN.gear_sw4_IN = DIGITAL_IO_GetInput(&GEAR_SW4_IN_D); //parking
 8005904:	480a      	ldr	r0, [pc, #40]	; (8005930 <Read_State2_inputs+0x88>)
 8005906:	f7ff ffb3 	bl	8005870 <DIGITAL_IO_GetInput>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	bf14      	ite	ne
 8005910:	2301      	movne	r3, #1
 8005912:	2300      	moveq	r3, #0
 8005914:	b2da      	uxtb	r2, r3
 8005916:	4b02      	ldr	r3, [pc, #8]	; (8005920 <Read_State2_inputs+0x78>)
 8005918:	731a      	strb	r2, [r3, #12]

	/* ig2 Lights */

}
 800591a:	bd80      	pop	{r7, pc}
 800591c:	08013948 	.word	0x08013948
 8005920:	1fff4844 	.word	0x1fff4844
 8005924:	08013970 	.word	0x08013970
 8005928:	08013984 	.word	0x08013984
 800592c:	08013998 	.word	0x08013998
 8005930:	080139ac 	.word	0x080139ac

08005934 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005944:	b2db      	uxtb	r3, r3
}
 8005946:	4618      	mov	r0, r3
 8005948:	370c      	adds	r7, #12
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005964:	b2db      	uxtb	r3, r3
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop

08005974 <U18_read_temp>:
#define U6_address 0x90
#define U9_address 0x92


void U18_read_temp(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
	uart_debugg("in temp");
 8005978:	4805      	ldr	r0, [pc, #20]	; (8005990 <U18_read_temp+0x1c>)
 800597a:	f00a fb0f 	bl	800ff9c <uart_debugg>
	U18_MotorTemp_read();
 800597e:	f000 f80b 	bl	8005998 <U18_MotorTemp_read>
	U18_CabinTemp_read();
 8005982:	f000 f8e7 	bl	8005b54 <U18_CabinTemp_read>
	//U18_McTemp_read();
	//U18_BatteryTemp_read();
	//U18_throttle_read();
	uart_debugg("exit temp");
 8005986:	4803      	ldr	r0, [pc, #12]	; (8005994 <U18_read_temp+0x20>)
 8005988:	f00a fb08 	bl	800ff9c <uart_debugg>
}
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	080132d4 	.word	0x080132d4
 8005994:	080132dc 	.word	0x080132dc

08005998 <U18_MotorTemp_read>:
	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);

	//rx_buff &= 0x0fff;
}
void U18_MotorTemp_read(void)
{
 8005998:	b590      	push	{r4, r7, lr}
 800599a:	b091      	sub	sp, #68	; 0x44
 800599c:	af04      	add	r7, sp, #16
	uint8_t command_byte= 0x1f;
	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U38_address, &command_byte, 1, stop);
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));*/


	bool start = true, stop = 0, ack = true;
 800599e:	2301      	movs	r3, #1
 80059a0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80059a4:	2300      	movs	r3, #0
 80059a6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80059aa:	2301      	movs	r3, #1
 80059ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	float ans = 0, Resistance = 0;
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 80059bc:	f242 7310 	movw	r3, #10000	; 0x2710
 80059c0:	623b      	str	r3, [r7, #32]
 80059c2:	f242 7310 	movw	r3, #10000	; 0x2710
 80059c6:	61fb      	str	r3, [r7, #28]
 80059c8:	f640 736e 	movw	r3, #3950	; 0xf6e
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	2319      	movs	r3, #25
 80059d0:	617b      	str	r3, [r7, #20]
	uint8_t command_byte= 0x9f, rx_buff[2] = {0};
 80059d2:	239f      	movs	r3, #159	; 0x9f
 80059d4:	72fb      	strb	r3, [r7, #11]
 80059d6:	2300      	movs	r3, #0
 80059d8:	813b      	strh	r3, [r7, #8]
	uint16_t rx = 0;
 80059da:	2300      	movs	r3, #0
 80059dc:	827b      	strh	r3, [r7, #18]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 80059de:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80059e2:	f107 040b 	add.w	r4, r7, #11
 80059e6:	2301      	movs	r3, #1
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80059ee:	9301      	str	r3, [sp, #4]
 80059f0:	4852      	ldr	r0, [pc, #328]	; (8005b3c <U18_MotorTemp_read+0x1a4>)
 80059f2:	4611      	mov	r1, r2
 80059f4:	2294      	movs	r2, #148	; 0x94
 80059f6:	4623      	mov	r3, r4
 80059f8:	f002 fa0c 	bl	8007e14 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 80059fc:	bf00      	nop
 80059fe:	484f      	ldr	r0, [pc, #316]	; (8005b3c <U18_MotorTemp_read+0x1a4>)
 8005a00:	f7ff ff98 	bl	8005934 <I2C_MASTER_IsTxBusy>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1f9      	bne.n	80059fe <U18_MotorTemp_read+0x66>

	stop = true;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005a10:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005a14:	f107 0408 	add.w	r4, r7, #8
 8005a18:	2302      	movs	r3, #2
 8005a1a:	9300      	str	r3, [sp, #0]
 8005a1c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005a20:	9301      	str	r3, [sp, #4]
 8005a22:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005a26:	9302      	str	r3, [sp, #8]
 8005a28:	4844      	ldr	r0, [pc, #272]	; (8005b3c <U18_MotorTemp_read+0x1a4>)
 8005a2a:	4611      	mov	r1, r2
 8005a2c:	2294      	movs	r2, #148	; 0x94
 8005a2e:	4623      	mov	r3, r4
 8005a30:	f002 fa1a 	bl	8007e68 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005a34:	bf00      	nop
 8005a36:	4841      	ldr	r0, [pc, #260]	; (8005b3c <U18_MotorTemp_read+0x1a4>)
 8005a38:	f7ff ff8c 	bl	8005954 <I2C_MASTER_IsRxBusy>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1f9      	bne.n	8005a36 <U18_MotorTemp_read+0x9e>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005a42:	7a3b      	ldrb	r3, [r7, #8]
 8005a44:	021b      	lsls	r3, r3, #8
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	7a7b      	ldrb	r3, [r7, #9]
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	827b      	strh	r3, [r7, #18]
	rx &= 0x0fff;
 8005a52:	8a7b      	ldrh	r3, [r7, #18]
 8005a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a58:	827b      	strh	r3, [r7, #18]

	Resistance = ((float)4095.0/(float)rx) - 1;
 8005a5a:	8a7b      	ldrh	r3, [r7, #18]
 8005a5c:	ee07 3a90 	vmov	s15, r3
 8005a60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a64:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005b40 <U18_MotorTemp_read+0x1a8>
 8005a68:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005a70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a74:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Resistance = ((float)10000.0/(float)Resistance);
 8005a78:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005b44 <U18_MotorTemp_read+0x1ac>
 8005a7c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a80:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005a84:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	Resistance /= (float)2;
 8005a88:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a8c:	eeb0 7a00 	vmov.f32	s14, #0
 8005a90:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005a94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005a98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005a9c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8005b44 <U18_MotorTemp_read+0x1ac>
 8005aa0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005aa4:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f00b f919 	bl	8010ce0 <__aeabi_f2d>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	460b      	mov	r3, r1
 8005ab2:	4610      	mov	r0, r2
 8005ab4:	4619      	mov	r1, r3
 8005ab6:	f00a fd11 	bl	80104dc <log>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4610      	mov	r0, r2
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	f00b fc43 	bl	801134c <__aeabi_d2f>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	60fb      	str	r3, [r7, #12]
	steinhart /= (float)3950.0;
 8005aca:	edd7 7a03 	vldr	s15, [r7, #12]
 8005ace:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8005b48 <U18_MotorTemp_read+0x1b0>
 8005ad2:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005ad6:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ae4:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b4c <U18_MotorTemp_read+0x1b4>
 8005ae8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005aec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005af0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005af4:	ed97 7a03 	vldr	s14, [r7, #12]
 8005af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005afc:	edc7 7a03 	vstr	s15, [r7, #12]

	steinhart = (float)1.0 / steinhart;
 8005b00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005b04:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b08:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b0c:	edc7 7a03 	vstr	s15, [r7, #12]
	ambient_temp =	steinhart -= (float)273.15;
 8005b10:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b14:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b4c <U18_MotorTemp_read+0x1b4>
 8005b18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b1c:	edc7 7a03 	vstr	s15, [r7, #12]
 8005b20:	edd7 7a03 	vldr	s15, [r7, #12]
 8005b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b28:	edc7 7a01 	vstr	s15, [r7, #4]
 8005b2c:	793b      	ldrb	r3, [r7, #4]
 8005b2e:	b2da      	uxtb	r2, r3
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <U18_MotorTemp_read+0x1b8>)
 8005b32:	701a      	strb	r2, [r3, #0]

}
 8005b34:	3734      	adds	r7, #52	; 0x34
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd90      	pop	{r4, r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	1ffe8a68 	.word	0x1ffe8a68
 8005b40:	457ff000 	.word	0x457ff000
 8005b44:	461c4000 	.word	0x461c4000
 8005b48:	4576e000 	.word	0x4576e000
 8005b4c:	43889333 	.word	0x43889333
 8005b50:	1fff48d2 	.word	0x1fff48d2

08005b54 <U18_CabinTemp_read>:

void U18_CabinTemp_read(void)
{
 8005b54:	b590      	push	{r4, r7, lr}
 8005b56:	b08f      	sub	sp, #60	; 0x3c
 8005b58:	af04      	add	r7, sp, #16

	bool start = true, stop = 0, ack = true;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005b66:	2301      	movs	r3, #1
 8005b68:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float ans = 0, Resistance = 0;
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	623b      	str	r3, [r7, #32]
 8005b72:	f04f 0300 	mov.w	r3, #0
 8005b76:	61fb      	str	r3, [r7, #28]
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 8005b78:	f242 7310 	movw	r3, #10000	; 0x2710
 8005b7c:	61bb      	str	r3, [r7, #24]
 8005b7e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005b82:	617b      	str	r3, [r7, #20]
 8005b84:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005b88:	613b      	str	r3, [r7, #16]
 8005b8a:	2319      	movs	r3, #25
 8005b8c:	60fb      	str	r3, [r7, #12]
	uint8_t command_byte= 0xdc, rx_buff[2] = {0};
 8005b8e:	23dc      	movs	r3, #220	; 0xdc
 8005b90:	70fb      	strb	r3, [r7, #3]
 8005b92:	2300      	movs	r3, #0
 8005b94:	803b      	strh	r3, [r7, #0]
	uint16_t rx = 0;
 8005b96:	2300      	movs	r3, #0
 8005b98:	817b      	strh	r3, [r7, #10]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 8005b9a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005b9e:	1cfc      	adds	r4, r7, #3
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005ba8:	9301      	str	r3, [sp, #4]
 8005baa:	484d      	ldr	r0, [pc, #308]	; (8005ce0 <U18_CabinTemp_read+0x18c>)
 8005bac:	4611      	mov	r1, r2
 8005bae:	2294      	movs	r2, #148	; 0x94
 8005bb0:	4623      	mov	r3, r4
 8005bb2:	f002 f92f 	bl	8007e14 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005bb6:	bf00      	nop
 8005bb8:	4849      	ldr	r0, [pc, #292]	; (8005ce0 <U18_CabinTemp_read+0x18c>)
 8005bba:	f7ff febb 	bl	8005934 <I2C_MASTER_IsTxBusy>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f9      	bne.n	8005bb8 <U18_CabinTemp_read+0x64>

	stop = true;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005bca:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005bce:	463c      	mov	r4, r7
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	9300      	str	r3, [sp, #0]
 8005bd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005bd8:	9301      	str	r3, [sp, #4]
 8005bda:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005bde:	9302      	str	r3, [sp, #8]
 8005be0:	483f      	ldr	r0, [pc, #252]	; (8005ce0 <U18_CabinTemp_read+0x18c>)
 8005be2:	4611      	mov	r1, r2
 8005be4:	2294      	movs	r2, #148	; 0x94
 8005be6:	4623      	mov	r3, r4
 8005be8:	f002 f93e 	bl	8007e68 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005bec:	bf00      	nop
 8005bee:	483c      	ldr	r0, [pc, #240]	; (8005ce0 <U18_CabinTemp_read+0x18c>)
 8005bf0:	f7ff feb0 	bl	8005954 <I2C_MASTER_IsRxBusy>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f9      	bne.n	8005bee <U18_CabinTemp_read+0x9a>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005bfa:	783b      	ldrb	r3, [r7, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	787b      	ldrb	r3, [r7, #1]
 8005c02:	b29b      	uxth	r3, r3
 8005c04:	4313      	orrs	r3, r2
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	817b      	strh	r3, [r7, #10]
	rx &= 0x0fff;
 8005c0a:	897b      	ldrh	r3, [r7, #10]
 8005c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c10:	817b      	strh	r3, [r7, #10]

	Resistance = ((float)4095.0/(float)rx) - 1;
 8005c12:	897b      	ldrh	r3, [r7, #10]
 8005c14:	ee07 3a90 	vmov	s15, r3
 8005c18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c1c:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005ce4 <U18_CabinTemp_read+0x190>
 8005c20:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005c24:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005c28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c2c:	edc7 7a07 	vstr	s15, [r7, #28]
	Resistance = ((float)10000.0/(float)Resistance);
 8005c30:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005ce8 <U18_CabinTemp_read+0x194>
 8005c34:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c38:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005c3c:	edc7 7a07 	vstr	s15, [r7, #28]

	Resistance /= (float)2;
 8005c40:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c44:	eeb0 7a00 	vmov.f32	s14, #0
 8005c48:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005c4c:	edc7 7a07 	vstr	s15, [r7, #28]

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8005c54:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005ce8 <U18_CabinTemp_read+0x194>
 8005c58:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005c5c:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f00b f83d 	bl	8010ce0 <__aeabi_f2d>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4610      	mov	r0, r2
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	f00a fc35 	bl	80104dc <log>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	4610      	mov	r0, r2
 8005c78:	4619      	mov	r1, r3
 8005c7a:	f00b fb67 	bl	801134c <__aeabi_d2f>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	607b      	str	r3, [r7, #4]
	steinhart /= (float)3950.0;
 8005c82:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c86:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005cec <U18_CabinTemp_read+0x198>
 8005c8a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005c8e:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	ee07 3a90 	vmov	s15, r3
 8005c98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c9c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005cf0 <U18_CabinTemp_read+0x19c>
 8005ca0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005ca4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005ca8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005cac:	ed97 7a01 	vldr	s14, [r7, #4]
 8005cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005cb4:	edc7 7a01 	vstr	s15, [r7, #4]

	steinhart = (float)1.0 / steinhart;
 8005cb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005cbc:	edd7 7a01 	vldr	s15, [r7, #4]
 8005cc0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005cc4:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart -= (float)273.15;
 8005cc8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ccc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005cf0 <U18_CabinTemp_read+0x19c>
 8005cd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cd4:	edc7 7a01 	vstr	s15, [r7, #4]

}
 8005cd8:	372c      	adds	r7, #44	; 0x2c
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd90      	pop	{r4, r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	1ffe8a68 	.word	0x1ffe8a68
 8005ce4:	457ff000 	.word	0x457ff000
 8005ce8:	461c4000 	.word	0x461c4000
 8005cec:	4576e000 	.word	0x4576e000
 8005cf0:	43889333 	.word	0x43889333

08005cf4 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b084      	sub	sp, #16
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	791b      	ldrb	r3, [r3, #4]
 8005d04:	f083 0301 	eor.w	r3, r3, #1
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d00f      	beq.n	8005d2e <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 f812 	bl	8005d38 <WATCHDOG_lPrewarning_Configure>
 8005d14:	4603      	mov	r3, r0
 8005d16:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d007      	beq.n	8005d2e <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7ff f8f2 	bl	8004f0c <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8005d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8005d40:	2300      	movs	r3, #0
 8005d42:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005d44:	2001      	movs	r0, #1
 8005d46:	f7fc fa43 	bl	80021d0 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005d4a:	2001      	movs	r0, #1
 8005d4c:	f7fc fae8 	bl	8002320 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop

08005d5c <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005d6a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr

08005d78 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005d86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	bf14      	ite	ne
 8005d8e:	2301      	movne	r3, #1
 8005d90:	2300      	moveq	r3, #0
 8005d92:	b2db      	uxtb	r3, r3
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	370c      	adds	r7, #12
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr

08005da0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	bf14      	ite	ne
 8005db6:	2301      	movne	r3, #1
 8005db8:	2300      	moveq	r3, #0
 8005dba:	b2db      	uxtb	r3, r3
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	4798      	blx	r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	73fb      	strb	r3, [r7, #15]

  return status;
 8005de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop

08005dec <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8005df8:	2304      	movs	r3, #4
 8005dfa:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d000      	beq.n	8005e0a <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8005e08:	e007      	b.n	8005e1a <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	68b9      	ldr	r1, [r7, #8]
 8005e0e:	687a      	ldr	r2, [r7, #4]
 8005e10:	f000 f808 	bl	8005e24 <UART_lStartTransmitPolling>
 8005e14:	4603      	mov	r3, r0
 8005e16:	75fb      	strb	r3, [r7, #23]
    break;
 8005e18:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8005e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3718      	adds	r7, #24
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}

08005e24 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b086      	sub	sp, #24
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8005e30:	2303      	movs	r3, #3
 8005e32:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d058      	beq.n	8005eec <UART_lStartTransmitPolling+0xc8>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d055      	beq.n	8005eec <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 8005e40:	2302      	movs	r3, #2
 8005e42:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	7e1b      	ldrb	r3, [r3, #24]
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	f083 0301 	eor.w	r3, r3, #1
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d04a      	beq.n	8005eec <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d004      	beq.n	8005e74 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff ff74 	bl	8005d5c <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005e74:	2300      	movs	r3, #0
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	e01c      	b.n	8005eb4 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d008      	beq.n	8005e98 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8005e86:	bf00      	nop
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f7ff ff73 	bl	8005d78 <XMC_USIC_CH_TXFIFO_IsFull>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d1f7      	bne.n	8005e88 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6819      	ldr	r1, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	4608      	mov	r0, r1
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	f7fe fdd5 	bl	8004a58 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	613b      	str	r3, [r7, #16]
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d3de      	bcc.n	8005e7a <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d00b      	beq.n	8005ee0 <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8005ec8:	bf00      	nop
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f7ff ff66 	bl	8005da0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	f083 0301 	eor.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f4      	bne.n	8005eca <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 8005eec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3718      	adds	r7, #24
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop

08005ef8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	460b      	mov	r3, r1
 8005f02:	70fb      	strb	r3, [r7, #3]
 8005f04:	4613      	mov	r3, r2
 8005f06:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005f08:	78f8      	ldrb	r0, [r7, #3]
 8005f0a:	78fb      	ldrb	r3, [r7, #3]
 8005f0c:	687a      	ldr	r2, [r7, #4]
 8005f0e:	3306      	adds	r3, #6
 8005f10:	009b      	lsls	r3, r3, #2
 8005f12:	4413      	add	r3, r2
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8005f1a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005f1c:	431a      	orrs	r2, r3
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	1d83      	adds	r3, r0, #6
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	440b      	add	r3, r1
 8005f26:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8005f28:	370c      	adds	r7, #12
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr
 8005f32:	bf00      	nop

08005f34 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b082      	sub	sp, #8
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
 8005f3c:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f7fe fd1e 	bl	8004984 <XMC_UART_CH_InitEx>
}
 8005f48:	3708      	adds	r7, #8
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop

08005f50 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5c:	f023 030f 	bic.w	r3, r3, #15
 8005f60:	f043 0202 	orr.w	r2, r3, #2
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop

08005f74 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b082      	sub	sp, #8
 8005f78:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 15U, &UART_0_rx_pin_config);
 8005f7e:	4813      	ldr	r0, [pc, #76]	; (8005fcc <UART_0_init+0x58>)
 8005f80:	210f      	movs	r1, #15
 8005f82:	4a13      	ldr	r2, [pc, #76]	; (8005fd0 <UART_0_init+0x5c>)
 8005f84:	f7fb ffbc 	bl	8001f00 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8005f88:	4812      	ldr	r0, [pc, #72]	; (8005fd4 <UART_0_init+0x60>)
 8005f8a:	4913      	ldr	r1, [pc, #76]	; (8005fd8 <UART_0_init+0x64>)
 8005f8c:	f7ff ffd2 	bl	8005f34 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
 8005f90:	4810      	ldr	r0, [pc, #64]	; (8005fd4 <UART_0_init+0x60>)
 8005f92:	2100      	movs	r1, #0
 8005f94:	2202      	movs	r2, #2
 8005f96:	f7ff ffaf 	bl	8005ef8 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 8005f9a:	480e      	ldr	r0, [pc, #56]	; (8005fd4 <UART_0_init+0x60>)
 8005f9c:	2100      	movs	r1, #0
 8005f9e:	2206      	movs	r2, #6
 8005fa0:	233f      	movs	r3, #63	; 0x3f
 8005fa2:	f7fe feff 	bl	8004da4 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_64WORDS,
        63U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8005fa6:	480b      	ldr	r0, [pc, #44]	; (8005fd4 <UART_0_init+0x60>)
 8005fa8:	f7ff ffd2 	bl	8005f50 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 8005fac:	4807      	ldr	r0, [pc, #28]	; (8005fcc <UART_0_init+0x58>)
 8005fae:	210e      	movs	r1, #14
 8005fb0:	4a0a      	ldr	r2, [pc, #40]	; (8005fdc <UART_0_init+0x68>)
 8005fb2:	f7fb ffa5 	bl	8001f00 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8005fb6:	4807      	ldr	r0, [pc, #28]	; (8005fd4 <UART_0_init+0x60>)
 8005fb8:	2110      	movs	r1, #16
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f7fe ff1c 	bl	8004df8 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8005fc0:	79fb      	ldrb	r3, [r7, #7]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3708      	adds	r7, #8
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	48028200 	.word	0x48028200
 8005fd0:	08013334 	.word	0x08013334
 8005fd4:	48020000 	.word	0x48020000
 8005fd8:	080132e8 	.word	0x080132e8
 8005fdc:	080132f4 	.word	0x080132f4

08005fe0 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	460b      	mov	r3, r1
 8005fea:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8005fec:	78fb      	ldrb	r3, [r7, #3]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	409a      	lsls	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60da      	str	r2, [r3, #12]
}
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0301 	and.w	r3, r3, #1
 8006010:	2b00      	cmp	r3, #0
 8006012:	bf14      	ite	ne
 8006014:	2301      	movne	r3, #1
 8006016:	2300      	moveq	r3, #0
 8006018:	b2db      	uxtb	r3, r3
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop

08006028 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	60da      	str	r2, [r3, #12]
}
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	611a      	str	r2, [r3, #16]
}
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2202      	movs	r2, #2
 8006064:	611a      	str	r2, [r3, #16]
}
 8006066:	370c      	adds	r7, #12
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	460b      	mov	r3, r1
 800607a:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 800607c:	887a      	ldrh	r2, [r7, #2]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	635a      	str	r2, [r3, #52]	; 0x34
}
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 800608c:	b480      	push	{r7}
 800608e:	b083      	sub	sp, #12
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	460b      	mov	r3, r1
 8006096:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8006098:	887a      	ldrh	r2, [r7, #2]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	683a      	ldr	r2, [r7, #0]
 80060b6:	611a      	str	r2, [r3, #16]
}
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop

080060c4 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80060c4:	b480      	push	{r7}
 80060c6:	b083      	sub	sp, #12
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
 80060cc:	460b      	mov	r3, r1
 80060ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80060d6:	78fb      	ldrb	r3, [r7, #3]
 80060d8:	2101      	movs	r1, #1
 80060da:	fa01 f303 	lsl.w	r3, r1, r3
 80060de:	431a      	orrs	r2, r3
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	460b      	mov	r3, r1
 80060fa:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 80060fc:	78fb      	ldrb	r3, [r7, #3]
 80060fe:	2201      	movs	r2, #1
 8006100:	409a      	lsls	r2, r3
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006108:	370c      	adds	r7, #12
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop

08006114 <XMC_CCU4_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  return (((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	fa22 f303 	lsr.w	r3, r2, r3
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	bf14      	ite	ne
 8006134:	2301      	movne	r3, #1
 8006136:	2300      	moveq	r3, #0
 8006138:	b2db      	uxtb	r3, r3
}
 800613a:	4618      	mov	r0, r3
 800613c:	370c      	adds	r7, #12
 800613e:	46bd      	mov	sp, r7
 8006140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	2201      	movs	r2, #1
 8006158:	409a      	lsls	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]
}
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <XMC_CCU8_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	bf14      	ite	ne
 800617c:	2301      	movne	r3, #1
 800617e:	2300      	moveq	r3, #0
 8006180:	b2db      	uxtb	r3, r3
}
 8006182:	4618      	mov	r0, r3
 8006184:	370c      	adds	r7, #12
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop

08006190 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	60da      	str	r2, [r3, #12]
}
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	611a      	str	r2, [r3, #16]
}
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr

080061c0 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 80061c0:	b480      	push	{r7}
 80061c2:	b083      	sub	sp, #12
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	611a      	str	r2, [r3, #16]
}
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	611a      	str	r2, [r3, #16]
}
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop

080061f4 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	460b      	mov	r3, r1
 80061fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006206:	78fb      	ldrb	r3, [r7, #3]
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f303 	lsl.w	r3, r1, r3
 800620e:	431a      	orrs	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006220:	b480      	push	{r7}
 8006222:	b083      	sub	sp, #12
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 800622c:	78fb      	ldrb	r3, [r7, #3]
 800622e:	2201      	movs	r2, #1
 8006230:	409a      	lsls	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop

08006244 <XMC_CCU8_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
 800624c:	460b      	mov	r3, r1
 800624e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  return (((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006256:	78fb      	ldrb	r3, [r7, #3]
 8006258:	fa22 f303 	lsr.w	r3, r2, r3
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b00      	cmp	r3, #0
 8006262:	bf14      	ite	ne
 8006264:	2301      	movne	r3, #1
 8006266:	2300      	moveq	r3, #0
 8006268:	b2db      	uxtb	r3, r3
}
 800626a:	4618      	mov	r0, r3
 800626c:	370c      	adds	r7, #12
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop

08006278 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800628a:	f083 0301 	eor.w	r3, r3, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	d013      	beq.n	80062bc <TIMER_Init+0x44>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800629a:	2b00      	cmp	r3, #0
 800629c:	d104      	bne.n	80062a8 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 f9ce 	bl	8006640 <TIMER_CCU4_lInit>
 80062a4:	4603      	mov	r3, r0
 80062a6:	73fb      	strb	r3, [r7, #15]
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d104      	bne.n	80062bc <TIMER_Init+0x44>
    {
      /* Configure CCU8 timer for the required time tick settings */
      status = TIMER_CCU8_lInit(handle_ptr);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 fa2e 	bl	8006714 <TIMER_CCU8_lInit>
 80062b8:	4603      	mov	r3, r0
 80062ba:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return (status);
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3710      	adds	r7, #16
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop

080062c8 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d016      	beq.n	8006308 <TIMER_Start+0x40>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d104      	bne.n	80062ee <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7ff fe9d 	bl	8006028 <XMC_CCU4_SLICE_StartTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d104      	bne.n	8006302 <TIMER_Start+0x3a>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7ff ff47 	bl	8006190 <XMC_CCU8_SLICE_StartTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006302:	2300      	movs	r3, #0
 8006304:	73fb      	strb	r3, [r7, #15]
 8006306:	e001      	b.n	800630c <TIMER_Start+0x44>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800630c:	7bfb      	ldrb	r3, [r7, #15]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3710      	adds	r7, #16
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop

08006318 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f827 	bl	8006374 <TIMER_GetTimerStatus>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d01b      	beq.n	8006364 <TIMER_Stop+0x4c>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006332:	2b00      	cmp	r3, #0
 8006334:	d016      	beq.n	8006364 <TIMER_Stop+0x4c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800633c:	2b00      	cmp	r3, #0
 800633e:	d104      	bne.n	800634a <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	4618      	mov	r0, r3
 8006346:	f7ff fe7b 	bl	8006040 <XMC_CCU4_SLICE_StopTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006350:	2b01      	cmp	r3, #1
 8006352:	d104      	bne.n	800635e <TIMER_Stop+0x46>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006358:	4618      	mov	r0, r3
 800635a:	f7ff ff25 	bl	80061a8 <XMC_CCU8_SLICE_StopTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 800635e:	2300      	movs	r3, #0
 8006360:	73fb      	strb	r3, [r7, #15]
 8006362:	e001      	b.n	8006368 <TIMER_Stop+0x50>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8006364:	2301      	movs	r3, #1
 8006366:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop

08006374 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 800637c:	2300      	movs	r3, #0
 800637e:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006386:	2b00      	cmp	r3, #0
 8006388:	d106      	bne.n	8006398 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	4618      	mov	r0, r3
 8006390:	f7ff fe36 	bl	8006000 <XMC_CCU4_SLICE_IsTimerRunning>
 8006394:	4603      	mov	r3, r0
 8006396:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d106      	bne.n	80063b0 <TIMER_GetTimerStatus+0x3c>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fede 	bl	8006168 <XMC_CCU8_SLICE_IsTimerRunning>
 80063ac:	4603      	mov	r3, r0
 80063ae:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	0000      	movs	r0, r0
	...

080063c0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 80063c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c4:	b087      	sub	sp, #28
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f7ff ffcf 	bl	8006374 <TIMER_GetTimerStatus>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f083 0301 	eor.w	r3, r3, #1
 80063dc:	b2db      	uxtb	r3, r3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	f000 80de 	beq.w	80065a0 <TIMER_SetTimeInterval+0x1e0>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	f200 80d8 	bhi.w	80065a0 <TIMER_SetTimeInterval+0x1e0>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	685a      	ldr	r2, [r3, #4]
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	429a      	cmp	r2, r3
 80063f8:	f0c0 80d2 	bcc.w	80065a0 <TIMER_SetTimeInterval+0x1e0>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 80063fc:	2300      	movs	r3, #0
 80063fe:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006400:	e002      	b.n	8006408 <TIMER_SetTimeInterval+0x48>
      {
        lprescaler++;
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	3301      	adds	r3, #1
 8006406:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	693a      	ldr	r2, [r7, #16]
 800640e:	f1c2 020f 	rsb	r2, r2, #15
 8006412:	fa23 f202 	lsr.w	r2, r3, r2
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	d3f2      	bcc.n	8006402 <TIMER_SetTimeInterval+0x42>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006422:	2b00      	cmp	r3, #0
 8006424:	d15c      	bne.n	80064e0 <TIMER_SetTimeInterval+0x120>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	69da      	ldr	r2, [r3, #28]
 8006432:	693b      	ldr	r3, [r7, #16]
 8006434:	b2db      	uxtb	r3, r3
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	b2d9      	uxtb	r1, r3
 800643c:	7913      	ldrb	r3, [r2, #4]
 800643e:	f361 0303 	bfi	r3, r1, #0, #4
 8006442:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f04f 0100 	mov.w	r1, #0
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	461a      	mov	r2, r3
 8006450:	f04f 0300 	mov.w	r3, #0
 8006454:	fb02 fe01 	mul.w	lr, r2, r1
 8006458:	fb00 f603 	mul.w	r6, r0, r3
 800645c:	4476      	add	r6, lr
 800645e:	fba0 2302 	umull	r2, r3, r0, r2
 8006462:	18f1      	adds	r1, r6, r3
 8006464:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8006466:	6879      	ldr	r1, [r7, #4]
 8006468:	69c9      	ldr	r1, [r1, #28]
 800646a:	7909      	ldrb	r1, [r1, #4]
 800646c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006470:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006472:	f1c1 0620 	rsb	r6, r1, #32
 8006476:	f1a1 0020 	sub.w	r0, r1, #32
 800647a:	fa22 f801 	lsr.w	r8, r2, r1
 800647e:	fa03 f606 	lsl.w	r6, r3, r6
 8006482:	ea48 0806 	orr.w	r8, r8, r6
 8006486:	fa23 f000 	lsr.w	r0, r3, r0
 800648a:	ea48 0800 	orr.w	r8, r8, r0
 800648e:	fa23 f901 	lsr.w	r9, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8006492:	4640      	mov	r0, r8
 8006494:	4649      	mov	r1, r9
 8006496:	a346      	add	r3, pc, #280	; (adr r3, 80065b0 <TIMER_SetTimeInterval+0x1f0>)
 8006498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800649c:	f00a ffa6 	bl	80113ec <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80064a4:	b292      	uxth	r2, r2
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d905      	bls.n	80064be <TIMER_SetTimeInterval+0xfe>
        {
          (handle_ptr->period_value)--;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064b6:	3b01      	subs	r3, #1
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695a      	ldr	r2, [r3, #20]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	69db      	ldr	r3, [r3, #28]
 80064c6:	791b      	ldrb	r3, [r3, #4]
 80064c8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	4619      	mov	r1, r3
 80064d2:	f7fc ffff 	bl	80034d4 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f8fe 	bl	80066d8 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80064dc:	2300      	movs	r3, #0
 80064de:	75fb      	strb	r3, [r7, #23]
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d15a      	bne.n	80065a0 <TIMER_SetTimeInterval+0x1e0>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	f003 030f 	and.w	r3, r3, #15
 80064f6:	b2d9      	uxtb	r1, r3
 80064f8:	7b13      	ldrb	r3, [r2, #12]
 80064fa:	f361 0303 	bfi	r3, r1, #0, #4
 80064fe:	7313      	strb	r3, [r2, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	60fb      	str	r3, [r7, #12]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	4618      	mov	r0, r3
 800650c:	f04f 0100 	mov.w	r1, #0
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	461a      	mov	r2, r3
 8006514:	f04f 0300 	mov.w	r3, #0
 8006518:	fb02 fe01 	mul.w	lr, r2, r1
 800651c:	fb00 f603 	mul.w	r6, r0, r3
 8006520:	4476      	add	r6, lr
 8006522:	fba0 2302 	umull	r2, r3, r0, r2
 8006526:	18f1      	adds	r1, r6, r3
 8006528:	460b      	mov	r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 800652a:	6879      	ldr	r1, [r7, #4]
 800652c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800652e:	7b09      	ldrb	r1, [r1, #12]
 8006530:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006534:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006536:	f1c1 0620 	rsb	r6, r1, #32
 800653a:	f1a1 0020 	sub.w	r0, r1, #32
 800653e:	fa22 f401 	lsr.w	r4, r2, r1
 8006542:	fa03 f606 	lsl.w	r6, r3, r6
 8006546:	4334      	orrs	r4, r6
 8006548:	fa23 f000 	lsr.w	r0, r3, r0
 800654c:	4304      	orrs	r4, r0
 800654e:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 8006552:	4620      	mov	r0, r4
 8006554:	4629      	mov	r1, r5
 8006556:	a316      	add	r3, pc, #88	; (adr r3, 80065b0 <TIMER_SetTimeInterval+0x1f0>)
 8006558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800655c:	f00a ff46 	bl	80113ec <__aeabi_uldivmod>
 8006560:	4602      	mov	r2, r0
 8006562:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006564:	b292      	uxth	r2, r2
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800656e:	2b01      	cmp	r3, #1
 8006570:	d905      	bls.n	800657e <TIMER_SetTimeInterval+0x1be>
        {
          (handle_ptr->period_value)--;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006576:	3b01      	subs	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006586:	7b1b      	ldrb	r3, [r3, #12]
 8006588:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800658c:	b2db      	uxtb	r3, r3
 800658e:	4610      	mov	r0, r2
 8006590:	4619      	mov	r1, r3
 8006592:	f7fd f8e9 	bl	8003768 <XMC_CCU8_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f90a 	bl	80067b0 <TIMER_CCU8_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 800659c:	2300      	movs	r3, #0
 800659e:	75fb      	strb	r3, [r7, #23]
      }
#endif
    }
  }
  return (status);
 80065a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065ac:	f3af 8000 	nop.w
 80065b0:	05f5e100 	.word	0x05f5e100
 80065b4:	00000000 	.word	0x00000000

080065b8 <TIMER_GetInterruptStatus>:

/*
 * This function reads the timer event(period match interrupt) status of the given timer
 */
bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b084      	sub	sp, #16
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  bool status;
  XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
  status = false;
 80065c0:	2300      	movs	r3, #0
 80065c2:	73fb      	strb	r3, [r7, #15]
#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d107      	bne.n	80065de <TIMER_GetInterruptStatus+0x26>
  {
    /* Reads the interrupt status */
    status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	4618      	mov	r0, r3
 80065d4:	2100      	movs	r1, #0
 80065d6:	f7ff fd9d 	bl	8006114 <XMC_CCU4_SLICE_GetEvent>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d107      	bne.n	80065f8 <TIMER_GetInterruptStatus+0x40>
  {
    /* Reads the interrupt status */
    status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ec:	4618      	mov	r0, r3
 80065ee:	2100      	movs	r1, #0
 80065f0:	f7ff fe28 	bl	8006244 <XMC_CCU8_SLICE_GetEvent>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3710      	adds	r7, #16
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}
 8006602:	bf00      	nop

08006604 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	4618      	mov	r0, r3
 800661c:	2100      	movs	r1, #0
 800661e:	f7ff fd67 	bl	80060f0 <XMC_CCU4_SLICE_ClearEvent>
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006628:	2b01      	cmp	r3, #1
 800662a:	d105      	bne.n	8006638 <TIMER_ClearEvent+0x34>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006630:	4618      	mov	r0, r3
 8006632:	2100      	movs	r1, #0
 8006634:	f7ff fdf4 	bl	8006220 <XMC_CCU8_SLICE_ClearEvent>
  }
#endif
}
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop

08006640 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b084      	sub	sp, #16
 8006644:	af00      	add	r7, sp, #0
 8006646:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	4618      	mov	r0, r3
 800664e:	f002 f83b 	bl	80086c8 <GLOBAL_CCU4_Init>
 8006652:	4603      	mov	r3, r0
 8006654:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	689a      	ldr	r2, [r3, #8]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7e1b      	ldrb	r3, [r3, #24]
 8006660:	4610      	mov	r0, r2
 8006662:	4619      	mov	r1, r3
 8006664:	f7ff fcbc 	bl	8005fe0 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	695a      	ldr	r2, [r3, #20]
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	69db      	ldr	r3, [r3, #28]
 8006670:	4610      	mov	r0, r2
 8006672:	4619      	mov	r1, r3
 8006674:	f7fc fef8 	bl	8003468 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 f82d 	bl	80066d8 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00f      	beq.n	80066a8 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	695a      	ldr	r2, [r3, #20]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006692:	4610      	mov	r0, r2
 8006694:	2100      	movs	r1, #0
 8006696:	461a      	mov	r2, r3
 8006698:	f7fc ff3a 	bl	8003510 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	695b      	ldr	r3, [r3, #20]
 80066a0:	4618      	mov	r0, r3
 80066a2:	2100      	movs	r1, #0
 80066a4:	f7ff fd0e 	bl	80060c4 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	695b      	ldr	r3, [r3, #20]
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7ff fcd3 	bl	8006058 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2201      	movs	r2, #1
 80066b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff fcad 	bl	8006028 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80066ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3710      	adds	r7, #16
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}

080066d8 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	695a      	ldr	r2, [r3, #20]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80066e8:	4610      	mov	r0, r2
 80066ea:	4619      	mov	r1, r3
 80066ec:	f7ff fcc0 	bl	8006070 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	4618      	mov	r0, r3
 80066f6:	2100      	movs	r1, #0
 80066f8:	f7ff fcc8 	bl	800608c <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	689a      	ldr	r2, [r3, #8]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	4610      	mov	r0, r2
 8006708:	4619      	mov	r1, r3
 800670a:	f7ff fccd 	bl	80060a8 <XMC_CCU4_EnableShadowTransfer>
}
 800670e:	3708      	adds	r7, #8
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}

08006714 <TIMER_CCU8_lInit>:
#ifdef TIMER_CCU8_USED
/*
 * This function configures timer ccu8 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006720:	4618      	mov	r0, r3
 8006722:	f001 ffa3 	bl	800866c <GLOBAL_CCU8_Init>
 8006726:	4603      	mov	r3, r0
 8006728:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006736:	4610      	mov	r0, r2
 8006738:	4619      	mov	r1, r3
 800673a:	f7ff fd05 	bl	8006148 <XMC_CCU8_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006746:	4610      	mov	r0, r2
 8006748:	4619      	mov	r1, r3
 800674a:	f7fc ffc5 	bl	80036d8 <XMC_CCU8_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f82e 	bl	80067b0 <TIMER_CCU8_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00f      	beq.n	800677e <TIMER_CCU8_lInit+0x6a>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006768:	4610      	mov	r0, r2
 800676a:	2100      	movs	r1, #0
 800676c:	461a      	mov	r2, r3
 800676e:	f7fd f831 	bl	80037d4 <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	4618      	mov	r0, r3
 8006778:	2100      	movs	r1, #0
 800677a:	f7ff fd3b 	bl	80061f4 <XMC_CCU8_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006782:	4618      	mov	r0, r3
 8006784:	f7ff fd1c 	bl	80061c0 <XMC_CCU8_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006796:	2b00      	cmp	r3, #0
 8006798:	d004      	beq.n	80067a4 <TIMER_CCU8_lInit+0x90>
  {
    /* Start the timer */
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fcf6 	bl	8006190 <XMC_CCU8_SLICE_StartTimer>
  }

  return (status);
 80067a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3710      	adds	r7, #16
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop

080067b0 <TIMER_CCU8_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067c0:	4610      	mov	r0, r2
 80067c2:	4619      	mov	r1, r3
 80067c4:	f7fc ffc2 	bl	800374c <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067cc:	4618      	mov	r0, r3
 80067ce:	2100      	movs	r1, #0
 80067d0:	2200      	movs	r2, #0
 80067d2:	f7fc ffe7 	bl	80037a4 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067da:	689a      	ldr	r2, [r3, #8]
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	4610      	mov	r0, r2
 80067e2:	4619      	mov	r1, r3
 80067e4:	f7ff fcf8 	bl	80061d8 <XMC_CCU8_EnableShadowTransfer>
}
 80067e8:	3708      	adds	r7, #8
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop

080067f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067f4:	4b04      	ldr	r3, [pc, #16]	; (8006808 <__NVIC_GetPriorityGrouping+0x18>)
 80067f6:	68db      	ldr	r3, [r3, #12]
 80067f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067fc:	0a1b      	lsrs	r3, r3, #8
}
 80067fe:	4618      	mov	r0, r3
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	e000ed00 	.word	0xe000ed00

0800680c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800680c:	b480      	push	{r7}
 800680e:	b083      	sub	sp, #12
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	6039      	str	r1, [r7, #0]
 8006816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681c:	2b00      	cmp	r3, #0
 800681e:	db0a      	blt.n	8006836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006820:	490d      	ldr	r1, [pc, #52]	; (8006858 <__NVIC_SetPriority+0x4c>)
 8006822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	b2d2      	uxtb	r2, r2
 800682a:	0092      	lsls	r2, r2, #2
 800682c:	b2d2      	uxtb	r2, r2
 800682e:	440b      	add	r3, r1
 8006830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006834:	e00a      	b.n	800684c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006836:	4909      	ldr	r1, [pc, #36]	; (800685c <__NVIC_SetPriority+0x50>)
 8006838:	79fb      	ldrb	r3, [r7, #7]
 800683a:	f003 030f 	and.w	r3, r3, #15
 800683e:	3b04      	subs	r3, #4
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	b2d2      	uxtb	r2, r2
 8006844:	0092      	lsls	r2, r2, #2
 8006846:	b2d2      	uxtb	r2, r2
 8006848:	440b      	add	r3, r1
 800684a:	761a      	strb	r2, [r3, #24]
  }
}
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	e000e100 	.word	0xe000e100
 800685c:	e000ed00 	.word	0xe000ed00

08006860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006860:	b480      	push	{r7}
 8006862:	b089      	sub	sp, #36	; 0x24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f003 0307 	and.w	r3, r3, #7
 8006872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	f1c3 0307 	rsb	r3, r3, #7
 800687a:	2b06      	cmp	r3, #6
 800687c:	bf28      	it	cs
 800687e:	2306      	movcs	r3, #6
 8006880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	3306      	adds	r3, #6
 8006886:	2b06      	cmp	r3, #6
 8006888:	d902      	bls.n	8006890 <NVIC_EncodePriority+0x30>
 800688a:	69fb      	ldr	r3, [r7, #28]
 800688c:	3b01      	subs	r3, #1
 800688e:	e000      	b.n	8006892 <NVIC_EncodePriority+0x32>
 8006890:	2300      	movs	r3, #0
 8006892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	2201      	movs	r2, #1
 8006898:	fa02 f303 	lsl.w	r3, r2, r3
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	401a      	ands	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	2101      	movs	r1, #1
 80068aa:	fa01 f303 	lsl.w	r3, r1, r3
 80068ae:	1e59      	subs	r1, r3, #1
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80068b4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3724      	adds	r7, #36	; 0x24
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop

080068c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	3b01      	subs	r3, #1
 80068d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068d4:	d301      	bcc.n	80068da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80068d6:	2301      	movs	r3, #1
 80068d8:	e00f      	b.n	80068fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80068da:	4a0a      	ldr	r2, [pc, #40]	; (8006904 <SysTick_Config+0x40>)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3b01      	subs	r3, #1
 80068e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	213f      	movs	r1, #63	; 0x3f
 80068e8:	f7ff ff90 	bl	800680c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80068ec:	4b05      	ldr	r3, [pc, #20]	; (8006904 <SysTick_Config+0x40>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80068f2:	4b04      	ldr	r3, [pc, #16]	; (8006904 <SysTick_Config+0x40>)
 80068f4:	2207      	movs	r2, #7
 80068f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80068f8:	2300      	movs	r3, #0
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	e000e010 	.word	0xe000e010

08006908 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8006908:	b490      	push	{r4, r7}
 800690a:	b086      	sub	sp, #24
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8006910:	2300      	movs	r3, #0
 8006912:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8006914:	496b      	ldr	r1, [pc, #428]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006916:	687a      	ldr	r2, [r7, #4]
 8006918:	4613      	mov	r3, r2
 800691a:	00db      	lsls	r3, r3, #3
 800691c:	4413      	add	r3, r2
 800691e:	009b      	lsls	r3, r3, #2
 8006920:	440b      	add	r3, r1
 8006922:	3318      	adds	r3, #24
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8006928:	4b67      	ldr	r3, [pc, #412]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d109      	bne.n	8006944 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	4613      	mov	r3, r2
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4413      	add	r3, r2
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	4a62      	ldr	r2, [pc, #392]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 800693c:	4413      	add	r3, r2
 800693e:	4a62      	ldr	r2, [pc, #392]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e0bb      	b.n	8006abc <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8006944:	4b60      	ldr	r3, [pc, #384]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800694e:	e0ab      	b.n	8006aa8 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	699b      	ldr	r3, [r3, #24]
 8006954:	461a      	mov	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	1a9b      	subs	r3, r3, r2
 800695a:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	dc7a      	bgt.n	8006a58 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d026      	beq.n	80069b8 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	6859      	ldr	r1, [r3, #4]
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	4613      	mov	r3, r2
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	4413      	add	r3, r2
 8006976:	009b      	lsls	r3, r3, #2
 8006978:	4a52      	ldr	r2, [pc, #328]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 800697a:	4413      	add	r3, r2
 800697c:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	6859      	ldr	r1, [r3, #4]
 8006982:	4850      	ldr	r0, [pc, #320]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	4613      	mov	r3, r2
 8006988:	00db      	lsls	r3, r3, #3
 800698a:	4413      	add	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4403      	add	r3, r0
 8006990:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8006992:	494c      	ldr	r1, [pc, #304]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4613      	mov	r3, r2
 8006998:	00db      	lsls	r3, r3, #3
 800699a:	4413      	add	r3, r2
 800699c:	009b      	lsls	r3, r3, #2
 800699e:	440b      	add	r3, r1
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	4613      	mov	r3, r2
 80069a8:	00db      	lsls	r3, r3, #3
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4a45      	ldr	r2, [pc, #276]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80069b0:	441a      	add	r2, r3
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	605a      	str	r2, [r3, #4]
 80069b6:	e01c      	b.n	80069f2 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 80069b8:	4b43      	ldr	r3, [pc, #268]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	4841      	ldr	r0, [pc, #260]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80069be:	687a      	ldr	r2, [r7, #4]
 80069c0:	4613      	mov	r3, r2
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	4413      	add	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4403      	add	r3, r0
 80069ca:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 80069cc:	4b3e      	ldr	r3, [pc, #248]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 80069ce:	6819      	ldr	r1, [r3, #0]
 80069d0:	687a      	ldr	r2, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	00db      	lsls	r3, r3, #3
 80069d6:	4413      	add	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4a3a      	ldr	r2, [pc, #232]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80069dc:	4413      	add	r3, r2
 80069de:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	4613      	mov	r3, r2
 80069e4:	00db      	lsls	r3, r3, #3
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a36      	ldr	r2, [pc, #216]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80069ec:	4413      	add	r3, r2
 80069ee:	4a36      	ldr	r2, [pc, #216]	; (8006ac8 <SYSTIMER_lInsertTimerList+0x1c0>)
 80069f0:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80069f2:	4934      	ldr	r1, [pc, #208]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	4613      	mov	r3, r2
 80069f8:	00db      	lsls	r3, r3, #3
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	440b      	add	r3, r1
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	699a      	ldr	r2, [r3, #24]
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	18d1      	adds	r1, r2, r3
 8006a08:	482e      	ldr	r0, [pc, #184]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	00db      	lsls	r3, r3, #3
 8006a10:	4413      	add	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	4403      	add	r3, r0
 8006a16:	3318      	adds	r3, #24
 8006a18:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8006a1a:	492a      	ldr	r1, [pc, #168]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	440b      	add	r3, r1
 8006a28:	6819      	ldr	r1, [r3, #0]
 8006a2a:	4826      	ldr	r0, [pc, #152]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a2c:	687a      	ldr	r2, [r7, #4]
 8006a2e:	4613      	mov	r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	4413      	add	r3, r2
 8006a34:	009b      	lsls	r3, r3, #2
 8006a36:	4403      	add	r3, r0
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6998      	ldr	r0, [r3, #24]
 8006a3c:	4c21      	ldr	r4, [pc, #132]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	4613      	mov	r3, r2
 8006a42:	00db      	lsls	r3, r3, #3
 8006a44:	4413      	add	r3, r2
 8006a46:	009b      	lsls	r3, r3, #2
 8006a48:	4423      	add	r3, r4
 8006a4a:	3318      	adds	r3, #24
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	1ac3      	subs	r3, r0, r3
 8006a50:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8006a52:	2301      	movs	r3, #1
 8006a54:	73fb      	strb	r3, [r7, #15]
 8006a56:	e024      	b.n	8006aa2 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	dd21      	ble.n	8006aa2 <SYSTIMER_lInsertTimerList+0x19a>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11d      	bne.n	8006aa2 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8006a66:	4917      	ldr	r1, [pc, #92]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a68:	687a      	ldr	r2, [r7, #4]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	00db      	lsls	r3, r3, #3
 8006a6e:	4413      	add	r3, r2
 8006a70:	009b      	lsls	r3, r3, #2
 8006a72:	440b      	add	r3, r1
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8006a78:	687a      	ldr	r2, [r7, #4]
 8006a7a:	4613      	mov	r3, r2
 8006a7c:	00db      	lsls	r3, r3, #3
 8006a7e:	4413      	add	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4a10      	ldr	r2, [pc, #64]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a84:	441a      	add	r2, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8006a8a:	6939      	ldr	r1, [r7, #16]
 8006a8c:	480d      	ldr	r0, [pc, #52]	; (8006ac4 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4613      	mov	r3, r2
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4403      	add	r3, r0
 8006a9a:	3318      	adds	r3, #24
 8006a9c:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d006      	beq.n	8006abc <SYSTIMER_lInsertTimerList+0x1b4>
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	f083 0301 	eor.w	r3, r3, #1
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f47f af4a 	bne.w	8006950 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8006abc:	3718      	adds	r7, #24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bc90      	pop	{r4, r7}
 8006ac2:	4770      	bx	lr
 8006ac4:	1fff5108 	.word	0x1fff5108
 8006ac8:	1fff43fc 	.word	0x1fff43fc

08006acc <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8006ad4:	687a      	ldr	r2, [r7, #4]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	00db      	lsls	r3, r3, #3
 8006ada:	4413      	add	r3, r2
 8006adc:	009b      	lsls	r3, r3, #2
 8006ade:	4a29      	ldr	r2, [pc, #164]	; (8006b84 <SYSTIMER_lRemoveTimerList+0xb8>)
 8006ae0:	4413      	add	r3, r2
 8006ae2:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d107      	bne.n	8006afc <SYSTIMER_lRemoveTimerList+0x30>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d103      	bne.n	8006afc <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8006af4:	4b24      	ldr	r3, [pc, #144]	; (8006b88 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006af6:	2200      	movs	r2, #0
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e03d      	b.n	8006b78 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d114      	bne.n	8006b2e <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a1f      	ldr	r2, [pc, #124]	; (8006b88 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006b0a:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8006b0c:	4b1e      	ldr	r3, [pc, #120]	; (8006b88 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8006b14:	4b1c      	ldr	r3, [pc, #112]	; (8006b88 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1b      	ldr	r2, [pc, #108]	; (8006b88 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006b1a:	6812      	ldr	r2, [r2, #0]
 8006b1c:	6991      	ldr	r1, [r2, #24]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	6992      	ldr	r2, [r2, #24]
 8006b22:	440a      	add	r2, r1
 8006b24:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	601a      	str	r2, [r3, #0]
 8006b2c:	e024      	b.n	8006b78 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d107      	bne.n	8006b46 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	605a      	str	r2, [r3, #4]
 8006b44:	e018      	b.n	8006b78 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	6812      	ldr	r2, [r2, #0]
 8006b4e:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	6852      	ldr	r2, [r2, #4]
 8006b58:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	6812      	ldr	r2, [r2, #0]
 8006b62:	6991      	ldr	r1, [r2, #24]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	6992      	ldr	r2, [r2, #24]
 8006b68:	440a      	add	r2, r1
 8006b6a:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	605a      	str	r2, [r3, #4]
  }
}
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
 8006b82:	bf00      	nop
 8006b84:	1fff5108 	.word	0x1fff5108
 8006b88:	1fff43fc 	.word	0x1fff43fc

08006b8c <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8006b92:	4b2f      	ldr	r3, [pc, #188]	; (8006c50 <SYSTIMER_lTimerHandler+0xc4>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006b98:	e050      	b.n	8006c3c <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d013      	beq.n	8006bcc <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f7ff ff8f 	bl	8006acc <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	695b      	ldr	r3, [r3, #20]
 8006bb8:	461a      	mov	r2, r3
 8006bba:	2301      	movs	r3, #1
 8006bbc:	4093      	lsls	r3, r2
 8006bbe:	43da      	mvns	r2, r3
 8006bc0:	4b24      	ldr	r3, [pc, #144]	; (8006c54 <SYSTIMER_lTimerHandler+0xc8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4013      	ands	r3, r2
 8006bc6:	4a23      	ldr	r2, [pc, #140]	; (8006c54 <SYSTIMER_lTimerHandler+0xc8>)
 8006bc8:	6013      	str	r3, [r2, #0]
 8006bca:	e034      	b.n	8006c36 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7b1b      	ldrb	r3, [r3, #12]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d112      	bne.n	8006bfa <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	7b5b      	ldrb	r3, [r3, #13]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d12c      	bne.n	8006c36 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	695b      	ldr	r3, [r3, #20]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ff73 	bl	8006acc <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6912      	ldr	r2, [r2, #16]
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	4798      	blx	r3
 8006bf8:	e01d      	b.n	8006c36 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	7b1b      	ldrb	r3, [r3, #12]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d118      	bne.n	8006c34 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	7b5b      	ldrb	r3, [r3, #13]
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d115      	bne.n	8006c36 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	695b      	ldr	r3, [r3, #20]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff ff5c 	bl	8006acc <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	69da      	ldr	r2, [r3, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	695b      	ldr	r3, [r3, #20]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7ff fe71 	bl	8006908 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	689b      	ldr	r3, [r3, #8]
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	6912      	ldr	r2, [r2, #16]
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4798      	blx	r3
 8006c32:	e000      	b.n	8006c36 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8006c34:	e009      	b.n	8006c4a <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8006c36:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <SYSTIMER_lTimerHandler+0xc4>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d003      	beq.n	8006c4a <SYSTIMER_lTimerHandler+0xbe>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d0a7      	beq.n	8006b9a <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}
 8006c50:	1fff43fc 	.word	0x1fff43fc
 8006c54:	1fff4400 	.word	0x1fff4400

08006c58 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b082      	sub	sp, #8
 8006c5c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8006c5e:	4b0e      	ldr	r3, [pc, #56]	; (8006c98 <SysTick_Handler+0x40>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8006c64:	4b0d      	ldr	r3, [pc, #52]	; (8006c9c <SysTick_Handler+0x44>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3301      	adds	r3, #1
 8006c6a:	4a0c      	ldr	r2, [pc, #48]	; (8006c9c <SysTick_Handler+0x44>)
 8006c6c:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00e      	beq.n	8006c92 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d905      	bls.n	8006c88 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	699b      	ldr	r3, [r3, #24]
 8006c80:	1e5a      	subs	r2, r3, #1
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	619a      	str	r2, [r3, #24]
 8006c86:	e004      	b.n	8006c92 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8006c8e:	f7ff ff7d 	bl	8006b8c <SYSTIMER_lTimerHandler>
    }
  }
}
 8006c92:	3708      	adds	r7, #8
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	1fff43fc 	.word	0x1fff43fc
 8006c9c:	1fff4404 	.word	0x1fff4404

08006ca0 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	781b      	ldrb	r3, [r3, #0]
 8006cb0:	f083 0301 	eor.w	r3, r3, #1
 8006cb4:	b2db      	uxtb	r3, r3
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d020      	beq.n	8006cfc <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8006cba:	4b13      	ldr	r3, [pc, #76]	; (8006d08 <SYSTIMER_Init+0x68>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8006cc0:	4812      	ldr	r0, [pc, #72]	; (8006d0c <SYSTIMER_Init+0x6c>)
 8006cc2:	f7ff fdff 	bl	80068c4 <SysTick_Config>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d015      	beq.n	8006cfc <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8006cd0:	f7ff fd8e 	bl	80067f0 <__NVIC_GetPriorityGrouping>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	213f      	movs	r1, #63	; 0x3f
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f7ff fdc0 	bl	8006860 <NVIC_EncodePriority>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f7ff fd90 	bl	800680c <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8006cec:	4b08      	ldr	r3, [pc, #32]	; (8006d10 <SYSTIMER_Init+0x70>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8006cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3710      	adds	r7, #16
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}
 8006d06:	bf00      	nop
 8006d08:	1fff43fc 	.word	0x1fff43fc
 8006d0c:	00023280 	.word	0x00023280
 8006d10:	1fff4400 	.word	0x1fff4400

08006d14 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b089      	sub	sp, #36	; 0x24
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	603b      	str	r3, [r7, #0]
 8006d20:	460b      	mov	r3, r1
 8006d22:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d36:	d202      	bcs.n	8006d3e <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
 8006d3c:	e07b      	b.n	8006e36 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006d3e:	2300      	movs	r3, #0
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	e075      	b.n	8006e30 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2201      	movs	r2, #1
 8006d48:	409a      	lsls	r2, r3
 8006d4a:	4b3e      	ldr	r3, [pc, #248]	; (8006e44 <SYSTIMER_CreateTimer+0x130>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d16a      	bne.n	8006e2a <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	2201      	movs	r2, #1
 8006d58:	409a      	lsls	r2, r3
 8006d5a:	4b3a      	ldr	r3, [pc, #232]	; (8006e44 <SYSTIMER_CreateTimer+0x130>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	4a38      	ldr	r2, [pc, #224]	; (8006e44 <SYSTIMER_CreateTimer+0x130>)
 8006d62:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8006d64:	4938      	ldr	r1, [pc, #224]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006d66:	69ba      	ldr	r2, [r7, #24]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	4413      	add	r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	3310      	adds	r3, #16
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8006d78:	4933      	ldr	r1, [pc, #204]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006d7a:	69ba      	ldr	r2, [r7, #24]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	3308      	adds	r3, #8
 8006d88:	7afa      	ldrb	r2, [r7, #11]
 8006d8a:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8006d8c:	492e      	ldr	r1, [pc, #184]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4613      	mov	r3, r2
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	4a2a      	ldr	r2, [pc, #168]	; (8006e4c <SYSTIMER_CreateTimer+0x138>)
 8006da4:	fba2 2303 	umull	r2, r3, r2, r3
 8006da8:	099b      	lsrs	r3, r3, #6
 8006daa:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	1c59      	adds	r1, r3, #1
 8006db0:	4825      	ldr	r0, [pc, #148]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	4613      	mov	r3, r2
 8006db6:	00db      	lsls	r3, r3, #3
 8006db8:	4413      	add	r3, r2
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	4403      	add	r3, r0
 8006dbe:	3318      	adds	r3, #24
 8006dc0:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8006dc2:	4921      	ldr	r1, [pc, #132]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	4413      	add	r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	3318      	adds	r3, #24
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8006dd6:	491c      	ldr	r1, [pc, #112]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	00db      	lsls	r3, r3, #3
 8006dde:	4413      	add	r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	3308      	adds	r3, #8
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8006dea:	4917      	ldr	r1, [pc, #92]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006dec:	69ba      	ldr	r2, [r7, #24]
 8006dee:	4613      	mov	r3, r2
 8006df0:	00db      	lsls	r3, r3, #3
 8006df2:	4413      	add	r3, r2
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	440b      	add	r3, r1
 8006df8:	3310      	adds	r3, #16
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8006dfe:	4912      	ldr	r1, [pc, #72]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4613      	mov	r3, r2
 8006e04:	00db      	lsls	r3, r3, #3
 8006e06:	4413      	add	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	440b      	add	r3, r1
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8006e10:	490d      	ldr	r1, [pc, #52]	; (8006e48 <SYSTIMER_CreateTimer+0x134>)
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	4613      	mov	r3, r2
 8006e16:	00db      	lsls	r3, r3, #3
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	2200      	movs	r2, #0
 8006e20:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	3301      	adds	r3, #1
 8006e26:	61fb      	str	r3, [r7, #28]
        break;
 8006e28:	e005      	b.n	8006e36 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	61bb      	str	r3, [r7, #24]
 8006e30:	69bb      	ldr	r3, [r7, #24]
 8006e32:	2b07      	cmp	r3, #7
 8006e34:	d986      	bls.n	8006d44 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8006e36:	69fb      	ldr	r3, [r7, #28]
}  
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3724      	adds	r7, #36	; 0x24
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr
 8006e44:	1fff4400 	.word	0x1fff4400
 8006e48:	1fff5108 	.word	0x1fff5108
 8006e4c:	10624dd3 	.word	0x10624dd3

08006e50 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	1e5a      	subs	r2, r3, #1
 8006e60:	491a      	ldr	r1, [pc, #104]	; (8006ecc <SYSTIMER_StartTimer+0x7c>)
 8006e62:	4613      	mov	r3, r2
 8006e64:	00db      	lsls	r3, r3, #3
 8006e66:	4413      	add	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	440b      	add	r3, r1
 8006e6c:	3308      	adds	r3, #8
 8006e6e:	795b      	ldrb	r3, [r3, #5]
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d126      	bne.n	8006ec2 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	1e59      	subs	r1, r3, #1
 8006e7c:	4813      	ldr	r0, [pc, #76]	; (8006ecc <SYSTIMER_StartTimer+0x7c>)
 8006e7e:	460b      	mov	r3, r1
 8006e80:	00db      	lsls	r3, r3, #3
 8006e82:	440b      	add	r3, r1
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	4403      	add	r3, r0
 8006e88:	3318      	adds	r3, #24
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	1c59      	adds	r1, r3, #1
 8006e8e:	480f      	ldr	r0, [pc, #60]	; (8006ecc <SYSTIMER_StartTimer+0x7c>)
 8006e90:	4613      	mov	r3, r2
 8006e92:	00db      	lsls	r3, r3, #3
 8006e94:	4413      	add	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4403      	add	r3, r0
 8006e9a:	3318      	adds	r3, #24
 8006e9c:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	1e5a      	subs	r2, r3, #1
 8006ea2:	490a      	ldr	r1, [pc, #40]	; (8006ecc <SYSTIMER_StartTimer+0x7c>)
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	440b      	add	r3, r1
 8006eae:	3308      	adds	r3, #8
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fd25 	bl	8006908 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3710      	adds	r7, #16
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}
 8006ecc:	1fff5108 	.word	0x1fff5108

08006ed0 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b083      	sub	sp, #12
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	019b      	lsls	r3, r3, #6
 8006ee8:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8006ef0:	370c      	adds	r7, #12
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 8006f08:	78fb      	ldrb	r3, [r7, #3]
 8006f0a:	f240 1201 	movw	r2, #257	; 0x101
 8006f0e:	409a      	lsls	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006f16:	370c      	adds	r7, #12
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr

08006f20 <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b085      	sub	sp, #20
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	460b      	mov	r3, r1
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	2158      	movs	r1, #88	; 0x58
 8006f34:	fb01 f303 	mul.w	r3, r1, r3
 8006f38:	4413      	add	r3, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	601a      	str	r2, [r3, #0]
}
 8006f3e:	3714      	adds	r7, #20
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr

08006f48 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006f48:	b480      	push	{r7}
 8006f4a:	b085      	sub	sp, #20
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	460b      	mov	r3, r1
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8006f56:	7afb      	ldrb	r3, [r7, #11]
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	2158      	movs	r1, #88	; 0x58
 8006f5c:	fb01 f303 	mul.w	r3, r1, r3
 8006f60:	4413      	add	r3, r2
 8006f62:	3308      	adds	r3, #8
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
}
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop

08006f74 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	607a      	str	r2, [r7, #4]
 8006f80:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8006f82:	7afb      	ldrb	r3, [r7, #11]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	2158      	movs	r1, #88	; 0x58
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	3318      	adds	r3, #24
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	605a      	str	r2, [r3, #4]
}
 8006f94:	3714      	adds	r7, #20
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
 8006f9e:	bf00      	nop

08006fa0 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b084      	sub	sp, #16
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	4798      	blx	r3
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	73fb      	strb	r3, [r7, #15]

  return status;
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3710      	adds	r7, #16
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop

08006fc0 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006fd8:	2b01      	cmp	r3, #1
 8006fda:	d106      	bne.n	8006fea <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	68b9      	ldr	r1, [r7, #8]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	f000 f821 	bl	8007028 <SPI_MASTER_StartTransmitDMA>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8006fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3718      	adds	r7, #24
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b086      	sub	sp, #24
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8007000:	2301      	movs	r3, #1
 8007002:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800700c:	2b01      	cmp	r3, #1
 800700e:	d106      	bne.n	800701e <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8007010:	68f8      	ldr	r0, [r7, #12]
 8007012:	68b9      	ldr	r1, [r7, #8]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	f000 f8db 	bl	80071d0 <SPI_MASTER_StartReceiveDMA>
 800701a:	4603      	mov	r3, r0
 800701c:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 800701e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3718      	adds	r7, #24
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b088      	sub	sp, #32
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8007034:	2304      	movs	r3, #4
 8007036:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007046:	2b01      	cmp	r3, #1
 8007048:	f040 80bc 	bne.w	80071c4 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	f083 0301 	eor.w	r3, r3, #1
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	f000 80b0 	beq.w	80071c0 <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 80a9 	beq.w	80071ba <SPI_MASTER_StartTransmitDMA+0x192>
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b00      	cmp	r3, #0
 800706c:	f000 80a5 	beq.w	80071ba <SPI_MASTER_StartTransmitDMA+0x192>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007076:	f080 80a0 	bcs.w	80071ba <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	2200      	movs	r2, #0
 8007084:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2201      	movs	r2, #1
 800708a:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8007094:	b2db      	uxtb	r3, r3
 8007096:	2b00      	cmp	r3, #0
 8007098:	d029      	beq.n	80070ee <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	68db      	ldr	r3, [r3, #12]
 800709e:	681a      	ldr	r2, [r3, #0]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	7f5b      	ldrb	r3, [r3, #29]
 80070a4:	4619      	mov	r1, r3
 80070a6:	2358      	movs	r3, #88	; 0x58
 80070a8:	fb03 f301 	mul.w	r3, r3, r1
 80070ac:	4413      	add	r3, r2
 80070ae:	3318      	adds	r3, #24
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80070ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80070be:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	7f5b      	ldrb	r3, [r3, #29]
 80070ca:	4619      	mov	r1, r3
 80070cc:	2358      	movs	r3, #88	; 0x58
 80070ce:	fb03 f301 	mul.w	r3, r3, r1
 80070d2:	4413      	add	r3, r2
 80070d4:	3318      	adds	r3, #24
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	7f1b      	ldrb	r3, [r3, #28]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	461a      	mov	r2, r3
 80070e4:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 80070e8:	4013      	ands	r3, r2
 80070ea:	61bb      	str	r3, [r7, #24]
 80070ec:	e025      	b.n	800713a <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	68ba      	ldr	r2, [r7, #8]
 80070f2:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	7f5b      	ldrb	r3, [r3, #29]
 80070fe:	4619      	mov	r1, r3
 8007100:	2358      	movs	r3, #88	; 0x58
 8007102:	fb03 f301 	mul.w	r3, r3, r1
 8007106:	4413      	add	r3, r2
 8007108:	3318      	adds	r3, #24
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007114:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	68db      	ldr	r3, [r3, #12]
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	7f5b      	ldrb	r3, [r3, #29]
 8007120:	4619      	mov	r1, r3
 8007122:	2358      	movs	r3, #88	; 0x58
 8007124:	fb03 f301 	mul.w	r3, r3, r1
 8007128:	4413      	add	r3, r2
 800712a:	3318      	adds	r3, #24
 800712c:	693a      	ldr	r2, [r7, #16]
 800712e:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	689b      	ldr	r3, [r3, #8]
 8007134:	7f1b      	ldrb	r3, [r3, #28]
 8007136:	b2db      	uxtb	r3, r3
 8007138:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4618      	mov	r0, r3
 8007140:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007144:	f7fd fbca 	bl	80048dc <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	681a      	ldr	r2, [r3, #0]
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	7f5b      	ldrb	r3, [r3, #29]
 8007152:	4610      	mov	r0, r2
 8007154:	4619      	mov	r1, r3
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	f7ff ff0c 	bl	8006f74 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	6819      	ldr	r1, [r3, #0]
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	7f5a      	ldrb	r2, [r3, #29]
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	699b      	ldr	r3, [r3, #24]
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	461a      	mov	r2, r3
 8007170:	f7ff fed6 	bl	8006f20 <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	681a      	ldr	r2, [r3, #0]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	7f1b      	ldrb	r3, [r3, #28]
 800717c:	b2db      	uxtb	r3, r3
 800717e:	4610      	mov	r0, r2
 8007180:	4619      	mov	r1, r3
 8007182:	f7ff fea5 	bl	8006ed0 <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	6818      	ldr	r0, [r3, #0]
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	3320      	adds	r3, #32
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 800719c:	461a      	mov	r2, r3
 800719e:	f7ff fed3 	bl	8006f48 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 80071a2:	2300      	movs	r3, #0
 80071a4:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	7f5b      	ldrb	r3, [r3, #29]
 80071b0:	4610      	mov	r0, r2
 80071b2:	4619      	mov	r1, r3
 80071b4:	f7ff fea2 	bl	8006efc <XMC_DMA_CH_Enable>
 80071b8:	e004      	b.n	80071c4 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80071ba:	2303      	movs	r3, #3
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e001      	b.n	80071c4 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 80071c0:	2302      	movs	r3, #2
 80071c2:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 80071c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3720      	adds	r7, #32
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop

080071d0 <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b086      	sub	sp, #24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 80071dc:	2304      	movs	r3, #4
 80071de:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	689b      	ldr	r3, [r3, #8]
 80071e4:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	685b      	ldr	r3, [r3, #4]
 80071ea:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d13c      	bne.n	800726c <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 80071f2:	2302      	movs	r3, #2
 80071f4:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	7fdb      	ldrb	r3, [r3, #31]
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	f083 0301 	eor.w	r3, r3, #1
 8007200:	b2db      	uxtb	r3, r3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d030      	beq.n	8007268 <SPI_MASTER_StartReceiveDMA+0x98>
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f893 3020 	ldrb.w	r3, [r3, #32]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	f083 0301 	eor.w	r3, r3, #1
 8007212:	b2db      	uxtb	r3, r3
 8007214:	2b00      	cmp	r3, #0
 8007216:	d027      	beq.n	8007268 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d021      	beq.n	8007262 <SPI_MASTER_StartReceiveDMA+0x92>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d01e      	beq.n	8007262 <SPI_MASTER_StartReceiveDMA+0x92>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722a:	d21a      	bcs.n	8007262 <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	2201      	movs	r2, #1
 8007230:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	68ba      	ldr	r2, [r7, #8]
 8007236:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	4a0f      	ldr	r2, [pc, #60]	; (8007278 <SPI_MASTER_StartReceiveDMA+0xa8>)
 800723c:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 800723e:	693b      	ldr	r3, [r7, #16]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	2201      	movs	r2, #1
 8007248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 8007254:	68f8      	ldr	r0, [r7, #12]
 8007256:	6879      	ldr	r1, [r7, #4]
 8007258:	f000 f810 	bl	800727c <SPI_MASTER_lReceiveDMA>
 800725c:	4603      	mov	r3, r0
 800725e:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007260:	e004      	b.n	800726c <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8007262:	2303      	movs	r3, #3
 8007264:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007266:	e001      	b.n	800726c <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8007268:	2302      	movs	r3, #2
 800726a:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
}
 800726e:	4618      	mov	r0, r3
 8007270:	3718      	adds	r7, #24
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	1ffe891c 	.word	0x1ffe891c

0800727c <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2200      	movs	r2, #0
 8007290:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	683a      	ldr	r2, [r7, #0]
 8007296:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4618      	mov	r0, r3
 800729e:	f000 f847 	bl	8007330 <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	4618      	mov	r0, r3
 80072a8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 80072ac:	f7fd fb16 	bl	80048dc <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68db      	ldr	r3, [r3, #12]
 80072b4:	6819      	ldr	r1, [r3, #0]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	7f1a      	ldrb	r2, [r3, #28]
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7ff fe56 	bl	8006f74 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	6819      	ldr	r1, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80072d8:	4608      	mov	r0, r1
 80072da:	4611      	mov	r1, r2
 80072dc:	461a      	mov	r2, r3
 80072de:	f7ff fe1f 	bl	8006f20 <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	6819      	ldr	r1, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	7f1a      	ldrb	r2, [r3, #28]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	695b      	ldr	r3, [r3, #20]
 80072f0:	4608      	mov	r0, r1
 80072f2:	4611      	mov	r1, r2
 80072f4:	461a      	mov	r2, r3
 80072f6:	f7ff fe27 	bl	8006f48 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 80072fa:	2300      	movs	r3, #0
 80072fc:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	7f1b      	ldrb	r3, [r3, #28]
 8007308:	4610      	mov	r0, r2
 800730a:	4619      	mov	r1, r3
 800730c:	f7ff fdf6 	bl	8006efc <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699a      	ldr	r2, [r3, #24]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	f7ff fe4f 	bl	8006fc0 <SPI_MASTER_Transmit>
 8007322:	4603      	mov	r3, r0
 8007324:	72fb      	strb	r3, [r7, #11]

  return status;
 8007326:	7afb      	ldrb	r3, [r7, #11]
}
 8007328:	4618      	mov	r0, r3
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fd fab5 	bl	80048a8 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7fd fab2 	bl	80048a8 <XMC_SPI_CH_GetReceivedData>
}
 8007344:	3708      	adds	r7, #8
 8007346:	46bd      	mov	sp, r7
 8007348:	bd80      	pop	{r7, pc}
 800734a:	bf00      	nop

0800734c <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	460b      	mov	r3, r1
 8007356:	70fb      	strb	r3, [r7, #3]
 8007358:	4613      	mov	r3, r2
 800735a:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800735c:	78f8      	ldrb	r0, [r7, #3]
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	687a      	ldr	r2, [r7, #4]
 8007362:	3306      	adds	r3, #6
 8007364:	009b      	lsls	r3, r3, #2
 8007366:	4413      	add	r3, r2
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800736e:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007370:	431a      	orrs	r2, r3
 8007372:	6879      	ldr	r1, [r7, #4]
 8007374:	1d83      	adds	r3, r0, #6
 8007376:	009b      	lsls	r3, r3, #2
 8007378:	440b      	add	r3, r1
 800737a:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 800737c:	370c      	adds	r7, #12
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop

08007388 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8007388:	b480      	push	{r7}
 800738a:	b083      	sub	sp, #12
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	460b      	mov	r3, r1
 8007392:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007398:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 800739c:	78fb      	ldrb	r3, [r7, #3]
 800739e:	3b01      	subs	r3, #1
 80073a0:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80073a2:	431a      	orrs	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop

080073b4 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	460b      	mov	r3, r1
 80073be:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	3b01      	subs	r3, #1
 80073cc:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80073d4:	370c      	adds	r7, #12
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
 80073de:	bf00      	nop

080073e0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b083      	sub	sp, #12
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073f2:	b2db      	uxtb	r3, r3
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8007400:	b480      	push	{r7}
 8007402:	b083      	sub	sp, #12
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007410:	409a      	lsls	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007416:	370c      	adds	r7, #12
 8007418:	46bd      	mov	sp, r7
 800741a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741e:	4770      	bx	lr

08007420 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8007420:	b480      	push	{r7}
 8007422:	b085      	sub	sp, #20
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	695b      	ldr	r3, [r3, #20]
 8007430:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8007434:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8007436:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop

0800744c <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800745c:	f023 020f 	bic.w	r2, r3, #15
 8007460:	78fb      	ldrb	r3, [r7, #3]
 8007462:	431a      	orrs	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	6839      	ldr	r1, [r7, #0]
 8007482:	2201      	movs	r2, #1
 8007484:	f7fd f9b4 	bl	80047f0 <XMC_SPI_CH_InitEx>
}
 8007488:	3708      	adds	r7, #8
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop

08007490 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b082      	sub	sp, #8
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	2101      	movs	r1, #1
 800749c:	f7ff ffd6 	bl	800744c <XMC_USIC_CH_SetMode>
}
 80074a0:	3708      	adds	r7, #8
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop

080074a8 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
 80074c6:	bf00      	nop

080074c8 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	695b      	ldr	r3, [r3, #20]
 80074d6:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	3b01      	subs	r3, #1
 80074de:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 80074e0:	4313      	orrs	r3, r2
 80074e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80074ea:	370c      	adds	r7, #12
 80074ec:	46bd      	mov	sp, r7
 80074ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f2:	4770      	bx	lr

080074f4 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80074f4:	b480      	push	{r7}
 80074f6:	b083      	sub	sp, #12
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007500:	f023 0208 	bic.w	r2, r3, #8
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007508:	370c      	adds	r7, #12
 800750a:	46bd      	mov	sp, r7
 800750c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007510:	4770      	bx	lr
 8007512:	bf00      	nop

08007514 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8007520:	68f8      	ldr	r0, [r7, #12]
 8007522:	68b9      	ldr	r1, [r7, #8]
 8007524:	687a      	ldr	r2, [r7, #4]
 8007526:	f7ff ff7b 	bl	8007420 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800752a:	3710      	adds	r7, #16
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
 8007538:	460b      	mov	r3, r1
 800753a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 800753c:	78fb      	ldrb	r3, [r7, #3]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	4619      	mov	r1, r3
 8007542:	f7ff ff21 	bl	8007388 <XMC_USIC_CH_SetWordLength>
}
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b082      	sub	sp, #8
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	4619      	mov	r1, r3
 800755e:	f7ff ff29 	bl	80073b4 <XMC_USIC_CH_SetFrameLength>
}
 8007562:	3708      	adds	r7, #8
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b082      	sub	sp, #8
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	70fb      	strb	r3, [r7, #3]
 8007574:	4613      	mov	r3, r2
 8007576:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8007578:	78f8      	ldrb	r0, [r7, #3]
 800757a:	78fb      	ldrb	r3, [r7, #3]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	3306      	adds	r3, #6
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	4413      	add	r3, r2
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 800758a:	f043 0210 	orr.w	r2, r3, #16
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	1d83      	adds	r3, r0, #6
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	440b      	add	r3, r1
 8007596:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8007598:	78fa      	ldrb	r2, [r7, #3]
 800759a:	78bb      	ldrb	r3, [r7, #2]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	4611      	mov	r1, r2
 80075a0:	461a      	mov	r2, r3
 80075a2:	f7ff fed3 	bl	800734c <XMC_USIC_CH_SetInputSource>
}
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 80075b2:	2300      	movs	r3, #0
 80075b4:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 80075b6:	4840      	ldr	r0, [pc, #256]	; (80076b8 <SPI_MASTER_0_lInit+0x10c>)
 80075b8:	f001 f804 	bl	80085c4 <GLOBAL_DMA_Init>
 80075bc:	4603      	mov	r3, r0
 80075be:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 80075c0:	79fb      	ldrb	r3, [r7, #7]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d172      	bne.n	80076ac <SPI_MASTER_0_lInit+0x100>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_0_dma_ch_tx_config);
 80075c6:	483d      	ldr	r0, [pc, #244]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075c8:	2101      	movs	r1, #1
 80075ca:	4a3d      	ldr	r2, [pc, #244]	; (80076c0 <SPI_MASTER_0_lInit+0x114>)
 80075cc:	f7fc fac2 	bl	8003b54 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80075d0:	483a      	ldr	r0, [pc, #232]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075d2:	2101      	movs	r1, #1
 80075d4:	2201      	movs	r2, #1
 80075d6:	f7fc fcc3 	bl	8003f60 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_0_DMA_tx_handler);
 80075da:	4838      	ldr	r0, [pc, #224]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075dc:	2101      	movs	r1, #1
 80075de:	4a39      	ldr	r2, [pc, #228]	; (80076c4 <SPI_MASTER_0_lInit+0x118>)
 80075e0:	f7fc fd0c 	bl	8003ffc <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_0_dma_ch_rx_config);
 80075e4:	4835      	ldr	r0, [pc, #212]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075e6:	2100      	movs	r1, #0
 80075e8:	4a37      	ldr	r2, [pc, #220]	; (80076c8 <SPI_MASTER_0_lInit+0x11c>)
 80075ea:	f7fc fab3 	bl	8003b54 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80075ee:	4833      	ldr	r0, [pc, #204]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075f0:	2100      	movs	r1, #0
 80075f2:	2201      	movs	r2, #1
 80075f4:	f7fc fcb4 	bl	8003f60 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_0_DMA_rx_handler);
 80075f8:	4830      	ldr	r0, [pc, #192]	; (80076bc <SPI_MASTER_0_lInit+0x110>)
 80075fa:	2100      	movs	r1, #0
 80075fc:	4a33      	ldr	r2, [pc, #204]	; (80076cc <SPI_MASTER_0_lInit+0x120>)
 80075fe:	f7fc fcfd 	bl	8003ffc <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 8007602:	4833      	ldr	r0, [pc, #204]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007604:	4933      	ldr	r1, [pc, #204]	; (80076d4 <SPI_MASTER_0_lInit+0x128>)
 8007606:	f7ff ff35 	bl	8007474 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 800760a:	4831      	ldr	r0, [pc, #196]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 800760c:	f7ff ff72 	bl	80074f4 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 8007610:	482f      	ldr	r0, [pc, #188]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007612:	f7ff ff49 	bl	80074a8 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 8007616:	482e      	ldr	r0, [pc, #184]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007618:	2108      	movs	r1, #8
 800761a:	f7ff ff89 	bl	8007530 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
 800761e:	482c      	ldr	r0, [pc, #176]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007620:	2140      	movs	r1, #64	; 0x40
 8007622:	f7ff ff93 	bl	800754c <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 8007626:	482a      	ldr	r0, [pc, #168]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007628:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800762c:	2200      	movs	r2, #0
 800762e:	f7ff ff71 	bl	8007514 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 8007632:	4827      	ldr	r0, [pc, #156]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007634:	2102      	movs	r1, #2
 8007636:	f7ff ff47 	bl	80074c8 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_0_MISO_Config.port_config);
 800763a:	4827      	ldr	r0, [pc, #156]	; (80076d8 <SPI_MASTER_0_lInit+0x12c>)
 800763c:	2104      	movs	r1, #4
 800763e:	4a27      	ldr	r2, [pc, #156]	; (80076dc <SPI_MASTER_0_lInit+0x130>)
 8007640:	f7fa fc5e 	bl	8001f00 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 8007644:	4822      	ldr	r0, [pc, #136]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007646:	2100      	movs	r1, #0
 8007648:	2201      	movs	r2, #1
 800764a:	f7ff ff8d 	bl	8007568 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 800764e:	4820      	ldr	r0, [pc, #128]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007650:	f7ff ff1e 	bl	8007490 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_0_MOSI_Config.port_config);
 8007654:	4820      	ldr	r0, [pc, #128]	; (80076d8 <SPI_MASTER_0_lInit+0x12c>)
 8007656:	2105      	movs	r1, #5
 8007658:	4a21      	ldr	r2, [pc, #132]	; (80076e0 <SPI_MASTER_0_lInit+0x134>)
 800765a:	f7fa fc51 	bl	8001f00 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 800765e:	481e      	ldr	r0, [pc, #120]	; (80076d8 <SPI_MASTER_0_lInit+0x12c>)
 8007660:	2106      	movs	r1, #6
 8007662:	4a20      	ldr	r2, [pc, #128]	; (80076e4 <SPI_MASTER_0_lInit+0x138>)
 8007664:	f7fa fc4c 	bl	8001f00 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_MASTER_0_SS_0_Config.port_config);
 8007668:	481b      	ldr	r0, [pc, #108]	; (80076d8 <SPI_MASTER_0_lInit+0x12c>)
 800766a:	210b      	movs	r1, #11
 800766c:	4a1e      	ldr	r2, [pc, #120]	; (80076e8 <SPI_MASTER_0_lInit+0x13c>)
 800766e:	f7fa fc47 	bl	8001f00 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 8007672:	4817      	ldr	r0, [pc, #92]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007674:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007678:	f7fd f900 	bl	800487c <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 800767c:	4814      	ldr	r0, [pc, #80]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 800767e:	2104      	movs	r1, #4
 8007680:	2200      	movs	r2, #0
 8007682:	f7fd fbb9 	bl	8004df8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007686:	4812      	ldr	r0, [pc, #72]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007688:	2108      	movs	r1, #8
 800768a:	2201      	movs	r2, #1
 800768c:	f7fd fbb4 	bl	8004df8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007690:	480f      	ldr	r0, [pc, #60]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 8007692:	210c      	movs	r1, #12
 8007694:	2201      	movs	r2, #1
 8007696:	f7fd fbaf 	bl	8004df8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 800769a:	480d      	ldr	r0, [pc, #52]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 800769c:	2110      	movs	r1, #16
 800769e:	2202      	movs	r2, #2
 80076a0:	f7fd fbaa 	bl	8004df8 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI0_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 80076a4:	480a      	ldr	r0, [pc, #40]	; (80076d0 <SPI_MASTER_0_lInit+0x124>)
 80076a6:	2100      	movs	r1, #0
 80076a8:	f7ff feaa 	bl	8007400 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 80076ac:	79fb      	ldrb	r3, [r7, #7]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3708      	adds	r7, #8
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	1ffe8a78 	.word	0x1ffe8a78
 80076bc:	50014000 	.word	0x50014000
 80076c0:	1ffe8940 	.word	0x1ffe8940
 80076c4:	080076ed 	.word	0x080076ed
 80076c8:	1ffe8964 	.word	0x1ffe8964
 80076cc:	08007725 	.word	0x08007725
 80076d0:	40030000 	.word	0x40030000
 80076d4:	1ffe8934 	.word	0x1ffe8934
 80076d8:	48028100 	.word	0x48028100
 80076dc:	1fff440c 	.word	0x1fff440c
 80076e0:	1ffe8920 	.word	0x1ffe8920
 80076e4:	08013358 	.word	0x08013358
 80076e8:	08013374 	.word	0x08013374

080076ec <SPI_MASTER_0_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_0_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80076f6:	79fb      	ldrb	r3, [r7, #7]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d10b      	bne.n	8007714 <SPI_MASTER_0_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80076fc:	bf00      	nop
 80076fe:	4807      	ldr	r0, [pc, #28]	; (800771c <SPI_MASTER_0_DMA_tx_handler+0x30>)
 8007700:	f7ff fe6e 	bl	80073e0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007704:	4603      	mov	r3, r0
 8007706:	2b80      	cmp	r3, #128	; 0x80
 8007708:	d0f9      	beq.n	80076fe <SPI_MASTER_0_DMA_tx_handler+0x12>
    SPI_MASTER_0.runtime->tx_busy = false;
 800770a:	4b05      	ldr	r3, [pc, #20]	; (8007720 <SPI_MASTER_0_DMA_tx_handler+0x34>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2200      	movs	r2, #0
 8007710:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	40030000 	.word	0x40030000
 8007720:	1ffe89ac 	.word	0x1ffe89ac

08007724 <SPI_MASTER_0_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_0_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b082      	sub	sp, #8
 8007728:	af00      	add	r7, sp, #0
 800772a:	4603      	mov	r3, r0
 800772c:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 800772e:	79fb      	ldrb	r3, [r7, #7]
 8007730:	2b01      	cmp	r3, #1
 8007732:	d112      	bne.n	800775a <SPI_MASTER_0_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI0_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8007734:	480a      	ldr	r0, [pc, #40]	; (8007760 <SPI_MASTER_0_DMA_rx_handler+0x3c>)
 8007736:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800773a:	f7fd f8e9 	bl	8004910 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_0.runtime->tx_data_dummy = false;
 800773e:	4b09      	ldr	r3, [pc, #36]	; (8007764 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	2200      	movs	r2, #0
 8007744:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_0.runtime->rx_data_dummy = true;
 8007748:	4b06      	ldr	r3, [pc, #24]	; (8007764 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 800774a:	689b      	ldr	r3, [r3, #8]
 800774c:	2201      	movs	r2, #1
 800774e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_0.runtime->rx_busy = false;
 8007752:	4b04      	ldr	r3, [pc, #16]	; (8007764 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	2200      	movs	r2, #0
 8007758:	77da      	strb	r2, [r3, #31]
  }
}
 800775a:	3708      	adds	r7, #8
 800775c:	46bd      	mov	sp, r7
 800775e:	bd80      	pop	{r7, pc}
 8007760:	40030000 	.word	0x40030000
 8007764:	1ffe89ac 	.word	0x1ffe89ac

08007768 <SDMMC_BLOCK_Init>:
  return version;
}

/* SDMMC_BLOCK initialization function */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 8007770:	2300      	movs	r3, #0
 8007772:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8007774:	2300      	movs	r3, #0
 8007776:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL));

  if (obj->init_flag == 1U)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	7b5b      	ldrb	r3, [r3, #13]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d002      	beq.n	8007786 <SDMMC_BLOCK_Init+0x1e>
  {
    status = SDMMC_BLOCK_STATUS_SUCCESS;
 8007780:	2300      	movs	r3, #0
 8007782:	73fb      	strb	r3, [r7, #15]
 8007784:	e01b      	b.n	80077be <SDMMC_BLOCK_Init+0x56>
  }
  else
  {
    /* Setup pins */
    if (obj->init_pins != NULL)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d002      	beq.n	8007794 <SDMMC_BLOCK_Init+0x2c>
    {
      obj->init_pins();
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	685b      	ldr	r3, [r3, #4]
 8007792:	4798      	blx	r3
    }

#ifdef SDMMC_BLOCK_SPI
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	7b1b      	ldrb	r3, [r3, #12]
 8007798:	2b01      	cmp	r3, #1
 800779a:	d104      	bne.n	80077a6 <SDMMC_BLOCK_Init+0x3e>
    {
      mode_status = SDMMC_BLOCK_SPI_Init(obj);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 f813 	bl	80077c8 <SDMMC_BLOCK_SPI_Init>
 80077a2:	4603      	mov	r3, r0
 80077a4:	73bb      	strb	r3, [r7, #14]
    {
      mode_status = SDMMC_BLOCK_SD_Init(obj);
    }
#endif

    if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 80077a6:	7bbb      	ldrb	r3, [r7, #14]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <SDMMC_BLOCK_Init+0x50>
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 80077ac:	2301      	movs	r3, #1
 80077ae:	73fb      	strb	r3, [r7, #15]
      obj->init_flag = 0U;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	735a      	strb	r2, [r3, #13]
 80077b6:	e002      	b.n	80077be <SDMMC_BLOCK_Init+0x56>
    }
    else
    {
      obj->init_flag = 1U;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	735a      	strb	r2, [r3, #13]
    }
  }

  return status;
 80077be:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3710      	adds	r7, #16
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <SDMMC_BLOCK_SPI_Init>:

/**********************************************************************************************************************
  * API IMPLEMENTATION
**********************************************************************************************************************/
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b084      	sub	sp, #16
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t spi_status;
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80077d0:	2300      	movs	r3, #0
 80077d2:	73fb      	strb	r3, [r7, #15]

  spi_status = SPI_MASTER_Init(obj->sdmmc_spi->spi_master_handle);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	4618      	mov	r0, r3
 80077dc:	f7ff fbe0 	bl	8006fa0 <SPI_MASTER_Init>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73bb      	strb	r3, [r7, #14]

  if (spi_status != SPI_MASTER_STATUS_SUCCESS)
 80077e4:	7bbb      	ldrb	r3, [r7, #14]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <SDMMC_BLOCK_SPI_Init+0x26>
  {
    status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80077ea:	2301      	movs	r3, #1
 80077ec:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80077ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3710      	adds	r7, #16
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 80077fc:	f7fc ff80 	bl	8004700 <XMC_RTC_Start>
}
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop

08007804 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b084      	sub	sp, #16
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 800780c:	2300      	movs	r3, #0
 800780e:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 8007810:	2301      	movs	r3, #1
 8007812:	73bb      	strb	r3, [r7, #14]
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
  {
#endif
      if (handler->initialized == false)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	7a1b      	ldrb	r3, [r3, #8]
 8007818:	f083 0301 	eor.w	r3, r3, #1
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d029      	beq.n	8007876 <RTC_Init+0x72>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	4618      	mov	r0, r3
 8007828:	f7fa fc2e 	bl	8002088 <XMC_RTC_Init>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 8007830:	7bfb      	ldrb	r3, [r7, #15]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d11c      	bne.n	8007870 <RTC_Init+0x6c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f824 	bl	8007884 <RTC_lConfigureInterrupts>
 800783c:	4603      	mov	r3, r0
 800783e:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 8007840:	7b7b      	ldrb	r3, [r7, #13]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d004      	beq.n	8007850 <RTC_Init+0x4c>
          {
            status = RTC_lRegister_Callbacks(handler);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f858 	bl	80078fc <RTC_lRegister_Callbacks>
 800784c:	4603      	mov	r3, r0
 800784e:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 8007850:	7bfb      	ldrb	r3, [r7, #15]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d111      	bne.n	800787a <RTC_Init+0x76>
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	781b      	ldrb	r3, [r3, #0]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d101      	bne.n	8007864 <RTC_Init+0x60>
            {
              RTC_Start();
 8007860:	f7ff ffca 	bl	80077f8 <RTC_Start>
            }
            handler->initialized = true;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2201      	movs	r2, #1
 8007868:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 800786a:	2300      	movs	r3, #0
 800786c:	73bb      	strb	r3, [r7, #14]
 800786e:	e004      	b.n	800787a <RTC_Init+0x76>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 8007870:	2301      	movs	r3, #1
 8007872:	73bb      	strb	r3, [r7, #14]
 8007874:	e001      	b.n	800787a <RTC_Init+0x76>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8007876:	2300      	movs	r3, #0
 8007878:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 800787a:	7bbb      	ldrb	r3, [r7, #14]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 800788c:	2300      	movs	r3, #0
 800788e:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	785b      	ldrb	r3, [r3, #1]
 8007896:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	685b      	ldr	r3, [r3, #4]
 800789c:	789b      	ldrb	r3, [r3, #2]
 800789e:	005b      	lsls	r3, r3, #1
 80078a0:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	685b      	ldr	r3, [r3, #4]
 80078a6:	78db      	ldrb	r3, [r3, #3]
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	685b      	ldr	r3, [r3, #4]
 80078b0:	791b      	ldrb	r3, [r3, #4]
 80078b2:	00db      	lsls	r3, r3, #3
 80078b4:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	795b      	ldrb	r3, [r3, #5]
 80078bc:	015b      	lsls	r3, r3, #5
 80078be:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	799b      	ldrb	r3, [r3, #6]
 80078c6:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 80078c8:	4313      	orrs	r3, r2
 80078ca:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d004      	beq.n	80078dc <RTC_lConfigureInterrupts+0x58>
  {
    XMC_RTC_EnableEvent(regval);
 80078d2:	68b8      	ldr	r0, [r7, #8]
 80078d4:	f7fa fc2a 	bl	800212c <XMC_RTC_EnableEvent>
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
 80078d8:	2301      	movs	r3, #1
 80078da:	73fb      	strb	r3, [r7, #15]
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	79db      	ldrb	r3, [r3, #7]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d105      	bne.n	80078f2 <RTC_lConfigureInterrupts+0x6e>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
 80078e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80078ea:	f7fa fc1f 	bl	800212c <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
 80078ee:	2301      	movs	r3, #1
 80078f0:	73fb      	strb	r3, [r7, #15]
	}


  return (interrupt_configured);
 80078f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	73fb      	strb	r3, [r7, #15]
  ai_status = XMC_RTC_STATUS_OK;
 8007908:	2300      	movs	r3, #0
 800790a:	73bb      	strb	r3, [r7, #14]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
 800790c:	7bfa      	ldrb	r2, [r7, #15]
 800790e:	7bbb      	ldrb	r3, [r7, #14]
 8007910:	4013      	ands	r3, r2
 8007912:	b2db      	uxtb	r3, r3
}
 8007914:	4618      	mov	r0, r3
 8007916:	3714      	adds	r7, #20
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <RTC_SetTime>:

/*
 *  This function is used to set RTC time.
 */
RTC_STATUS_t RTC_SetTime(XMC_RTC_TIME_t *current_time)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b086      	sub	sp, #24
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t status = RTC_STATUS_SUCCESS;
 8007928:	2300      	movs	r3, #0
 800792a:	75fb      	strb	r3, [r7, #23]
  XMC_RTC_TIME_t time_val;

  XMC_ASSERT("RTC_SetTime: NULL pointer", current_time != NULL);

  /* copy to local structure to keep data safe */
  time_val.year = current_time->year;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	88db      	ldrh	r3, [r3, #6]
 8007930:	827b      	strh	r3, [r7, #18]
  time_val.month = current_time->month;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	795b      	ldrb	r3, [r3, #5]
 8007936:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800793a:	b2da      	uxtb	r2, r3
 800793c:	7c7b      	ldrb	r3, [r7, #17]
 800793e:	f362 0303 	bfi	r3, r2, #0, #4
 8007942:	747b      	strb	r3, [r7, #17]
  time_val.days = current_time->days;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	78db      	ldrb	r3, [r3, #3]
 8007948:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800794c:	b2da      	uxtb	r2, r3
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	f362 0304 	bfi	r3, r2, #0, #5
 8007954:	73fb      	strb	r3, [r7, #15]
  time_val.hours = current_time->hours;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	789b      	ldrb	r3, [r3, #2]
 800795a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800795e:	b2da      	uxtb	r2, r3
 8007960:	7bbb      	ldrb	r3, [r7, #14]
 8007962:	f362 0304 	bfi	r3, r2, #0, #5
 8007966:	73bb      	strb	r3, [r7, #14]
  time_val.minutes = current_time->minutes;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	785b      	ldrb	r3, [r3, #1]
 800796c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007970:	b2da      	uxtb	r2, r3
 8007972:	7b7b      	ldrb	r3, [r7, #13]
 8007974:	f362 0305 	bfi	r3, r2, #0, #6
 8007978:	737b      	strb	r3, [r7, #13]
  time_val.seconds = current_time->seconds;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007982:	b2da      	uxtb	r2, r3
 8007984:	7b3b      	ldrb	r3, [r7, #12]
 8007986:	f362 0305 	bfi	r3, r2, #0, #6
 800798a:	733b      	strb	r3, [r7, #12]
  time_val.daysofweek = current_time->daysofweek;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	791b      	ldrb	r3, [r3, #4]
 8007990:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007994:	b2da      	uxtb	r2, r3
 8007996:	7c3b      	ldrb	r3, [r7, #16]
 8007998:	f362 0302 	bfi	r3, r2, #0, #3
 800799c:	743b      	strb	r3, [r7, #16]

  if ((time_val.days != 0U) && (time_val.month != 0U))
 800799e:	7bfb      	ldrb	r3, [r7, #15]
 80079a0:	f003 031f 	and.w	r3, r3, #31
 80079a4:	b2db      	uxtb	r3, r3
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d025      	beq.n	80079f6 <RTC_SetTime+0xd6>
 80079aa:	7c7b      	ldrb	r3, [r7, #17]
 80079ac:	f003 030f 	and.w	r3, r3, #15
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d01f      	beq.n	80079f6 <RTC_SetTime+0xd6>
  {
    time_val.days = time_val.days - 1U;
 80079b6:	7bfb      	ldrb	r3, [r7, #15]
 80079b8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	f003 031f 	and.w	r3, r3, #31
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	f362 0304 	bfi	r3, r2, #0, #5
 80079ce:	73fb      	strb	r3, [r7, #15]
    time_val.month = time_val.month - 1U;
 80079d0:	7c7b      	ldrb	r3, [r7, #17]
 80079d2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	3b01      	subs	r3, #1
 80079da:	b2db      	uxtb	r3, r3
 80079dc:	f003 030f 	and.w	r3, r3, #15
 80079e0:	b2da      	uxtb	r2, r3
 80079e2:	7c7b      	ldrb	r3, [r7, #17]
 80079e4:	f362 0303 	bfi	r3, r2, #0, #4
 80079e8:	747b      	strb	r3, [r7, #17]

    XMC_RTC_SetTime(&time_val);
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4618      	mov	r0, r3
 80079f0:	f7fc fec8 	bl	8004784 <XMC_RTC_SetTime>
 80079f4:	e001      	b.n	80079fa <RTC_SetTime+0xda>
  }
  else
  {
    status = RTC_STATUS_FAILURE;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3718      	adds	r7, #24
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <RTC_GetTime>:
}
/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f7fc fedb 	bl	80047c8 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	78db      	ldrb	r3, [r3, #3]
 8007a16:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007a1a:	b2db      	uxtb	r3, r3
 8007a1c:	3301      	adds	r3, #1
 8007a1e:	b2db      	uxtb	r3, r3
 8007a20:	f003 031f 	and.w	r3, r3, #31
 8007a24:	b2d9      	uxtb	r1, r3
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	78d3      	ldrb	r3, [r2, #3]
 8007a2a:	f361 0304 	bfi	r3, r1, #0, #5
 8007a2e:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	795b      	ldrb	r3, [r3, #5]
 8007a34:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007a38:	b2db      	uxtb	r3, r3
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	f003 030f 	and.w	r3, r3, #15
 8007a42:	b2d9      	uxtb	r1, r3
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	7953      	ldrb	r3, [r2, #5]
 8007a48:	f361 0303 	bfi	r3, r1, #0, #4
 8007a4c:	7153      	strb	r3, [r2, #5]
}
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a58:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <__NVIC_GetPriorityGrouping+0x18>)
 8007a5a:	68db      	ldr	r3, [r3, #12]
 8007a5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007a60:	0a1b      	lsrs	r3, r3, #8
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	e000ed00 	.word	0xe000ed00

08007a70 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	4603      	mov	r3, r0
 8007a78:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	db0b      	blt.n	8007a9a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a82:	4908      	ldr	r1, [pc, #32]	; (8007aa4 <__NVIC_EnableIRQ+0x34>)
 8007a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a88:	095b      	lsrs	r3, r3, #5
 8007a8a:	79fa      	ldrb	r2, [r7, #7]
 8007a8c:	f002 021f 	and.w	r2, r2, #31
 8007a90:	2001      	movs	r0, #1
 8007a92:	fa00 f202 	lsl.w	r2, r0, r2
 8007a96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007a9a:	370c      	adds	r7, #12
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa2:	4770      	bx	lr
 8007aa4:	e000e100 	.word	0xe000e100

08007aa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b083      	sub	sp, #12
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	4603      	mov	r3, r0
 8007ab0:	6039      	str	r1, [r7, #0]
 8007ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	db0a      	blt.n	8007ad2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007abc:	490d      	ldr	r1, [pc, #52]	; (8007af4 <__NVIC_SetPriority+0x4c>)
 8007abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac2:	683a      	ldr	r2, [r7, #0]
 8007ac4:	b2d2      	uxtb	r2, r2
 8007ac6:	0092      	lsls	r2, r2, #2
 8007ac8:	b2d2      	uxtb	r2, r2
 8007aca:	440b      	add	r3, r1
 8007acc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8007ad0:	e00a      	b.n	8007ae8 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ad2:	4909      	ldr	r1, [pc, #36]	; (8007af8 <__NVIC_SetPriority+0x50>)
 8007ad4:	79fb      	ldrb	r3, [r7, #7]
 8007ad6:	f003 030f 	and.w	r3, r3, #15
 8007ada:	3b04      	subs	r3, #4
 8007adc:	683a      	ldr	r2, [r7, #0]
 8007ade:	b2d2      	uxtb	r2, r2
 8007ae0:	0092      	lsls	r2, r2, #2
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	440b      	add	r3, r1
 8007ae6:	761a      	strb	r2, [r3, #24]
  }
}
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	e000e100 	.word	0xe000e100
 8007af8:	e000ed00 	.word	0xe000ed00

08007afc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007afc:	b480      	push	{r7}
 8007afe:	b089      	sub	sp, #36	; 0x24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	60f8      	str	r0, [r7, #12]
 8007b04:	60b9      	str	r1, [r7, #8]
 8007b06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	f1c3 0307 	rsb	r3, r3, #7
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	bf28      	it	cs
 8007b1a:	2306      	movcs	r3, #6
 8007b1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	3306      	adds	r3, #6
 8007b22:	2b06      	cmp	r3, #6
 8007b24:	d902      	bls.n	8007b2c <NVIC_EncodePriority+0x30>
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	3b01      	subs	r3, #1
 8007b2a:	e000      	b.n	8007b2e <NVIC_EncodePriority+0x32>
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b30:	69bb      	ldr	r3, [r7, #24]
 8007b32:	2201      	movs	r2, #1
 8007b34:	fa02 f303 	lsl.w	r3, r2, r3
 8007b38:	1e5a      	subs	r2, r3, #1
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	401a      	ands	r2, r3
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2101      	movs	r1, #1
 8007b46:	fa01 f303 	lsl.w	r3, r1, r3
 8007b4a:	1e59      	subs	r1, r3, #1
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8007b50:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3724      	adds	r7, #36	; 0x24
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr
 8007b5e:	bf00      	nop

08007b60 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	781b      	ldrb	r3, [r3, #0]
 8007b6c:	b25b      	sxtb	r3, r3
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7ff ff7e 	bl	8007a70 <__NVIC_EnableIRQ>
}
 8007b74:	3708      	adds	r7, #8
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}
 8007b7a:	bf00      	nop

08007b7c <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8007b7c:	b590      	push	{r4, r7, lr}
 8007b7e:	b083      	sub	sp, #12
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	781c      	ldrb	r4, [r3, #0]
 8007b88:	f7ff ff64 	bl	8007a54 <__NVIC_GetPriorityGrouping>
 8007b8c:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007b92:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	f7ff ffad 	bl	8007afc <NVIC_EncodePriority>
 8007ba2:	4602      	mov	r2, r0
 8007ba4:	b263      	sxtb	r3, r4
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	4611      	mov	r1, r2
 8007baa:	f7ff ff7d 	bl	8007aa8 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	78db      	ldrb	r3, [r3, #3]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d002      	beq.n	8007bbc <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f7ff ffd2 	bl	8007b60 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8007bbc:	2300      	movs	r3, #0
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	370c      	adds	r7, #12
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd90      	pop	{r4, r7, pc}
 8007bc6:	bf00      	nop

08007bc8 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007bd6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	bf14      	ite	ne
 8007bde:	2301      	movne	r3, #1
 8007be0:	2300      	moveq	r3, #0
 8007be2:	b2db      	uxtb	r3, r3
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	370c      	adds	r7, #12
 8007be8:	46bd      	mov	sp, r7
 8007bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bee:	4770      	bx	lr

08007bf0 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b083      	sub	sp, #12
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007bfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	bf14      	ite	ne
 8007c06:	2301      	movne	r3, #1
 8007c08:	2300      	moveq	r3, #0
 8007c0a:	b2db      	uxtb	r3, r3
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	370c      	adds	r7, #12
 8007c10:	46bd      	mov	sp, r7
 8007c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c16:	4770      	bx	lr

08007c18 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8007c18:	b480      	push	{r7}
 8007c1a:	b083      	sub	sp, #12
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	bf14      	ite	ne
 8007c2e:	2301      	movne	r3, #1
 8007c30:	2300      	moveq	r3, #0
 8007c32:	b2db      	uxtb	r3, r3
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
 8007c60:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007c66:	683b      	ldr	r3, [r7, #0]
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b082      	sub	sp, #8
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7ff ff9f 	bl	8007bc8 <XMC_USIC_CH_TXFIFO_IsFull>
 8007c8a:	4603      	mov	r3, r0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3708      	adds	r7, #8
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7ff ffb9 	bl	8007c18 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8007ca6:	4603      	mov	r3, r0
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f7fc fcf9 	bl	80046b4 <XMC_I2C_CH_GetReceivedData>
 8007cc2:	4603      	mov	r3, r0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	460b      	mov	r3, r1
 8007cd6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681a      	ldr	r2, [r3, #0]
 8007cdc:	78fb      	ldrb	r3, [r7, #3]
 8007cde:	4610      	mov	r0, r2
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	f7fc fc75 	bl	80045d0 <XMC_I2C_CH_MasterTransmit>
}
 8007ce6:	3708      	adds	r7, #8
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	bd80      	pop	{r7, pc}

08007cec <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b082      	sub	sp, #8
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	f7fc fc8f 	bl	800461c <XMC_I2C_CH_MasterReceiveAck>
}
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fc fca9 	bl	8004668 <XMC_I2C_CH_MasterReceiveNack>
}
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	2110      	movs	r1, #16
 8007d2c:	f7ff ff94 	bl	8007c58 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7fc fc25 	bl	8004584 <XMC_I2C_CH_MasterStop>
}
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b084      	sub	sp, #16
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	60f8      	str	r0, [r7, #12]
 8007d48:	60b9      	str	r1, [r7, #8]
 8007d4a:	4613      	mov	r3, r2
 8007d4c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4618      	mov	r0, r3
 8007d54:	2104      	movs	r1, #4
 8007d56:	f7ff ff7f 	bl	8007c58 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	6819      	ldr	r1, [r3, #0]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	4608      	mov	r0, r1
 8007d66:	4611      	mov	r1, r2
 8007d68:	461a      	mov	r2, r3
 8007d6a:	f7fc fba3 	bl	80044b4 <XMC_I2C_CH_MasterStart>
}
 8007d6e:	3710      	adds	r7, #16
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b084      	sub	sp, #16
 8007d78:	af00      	add	r7, sp, #0
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	4613      	mov	r3, r2
 8007d80:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	2108      	movs	r1, #8
 8007d8a:	f7ff ff65 	bl	8007c58 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6819      	ldr	r1, [r3, #0]
 8007d92:	68bb      	ldr	r3, [r7, #8]
 8007d94:	b29a      	uxth	r2, r3
 8007d96:	79fb      	ldrb	r3, [r7, #7]
 8007d98:	4608      	mov	r0, r1
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	f7fc fbbd 	bl	800451c <XMC_I2C_CH_MasterRepeatedStart>
}
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b084      	sub	sp, #16
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d006      	beq.n	8007dc4 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8007dbe:	2300      	movs	r3, #0
 8007dc0:	73fb      	strb	r3, [r7, #15]
 8007dc2:	e001      	b.n	8007dc8 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
 8007dd2:	bf00      	nop

08007dd4 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4618      	mov	r0, r3
 8007de4:	f7ff ff2c 	bl	8007c40 <XMC_I2C_CH_GetStatusFlag>
 8007de8:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	4013      	ands	r3, r2
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b082      	sub	sp, #8
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4618      	mov	r0, r3
 8007e08:	6839      	ldr	r1, [r7, #0]
 8007e0a:	f7ff ff25 	bl	8007c58 <XMC_I2C_CH_ClearStatusFlag>
}
 8007e0e:	3708      	adds	r7, #8
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b088      	sub	sp, #32
 8007e18:	af02      	add	r7, sp, #8
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	607a      	str	r2, [r7, #4]
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007e24:	2302      	movs	r3, #2
 8007e26:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d013      	beq.n	8007e5c <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d00d      	beq.n	8007e5c <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 8007e40:	7afa      	ldrb	r2, [r7, #11]
 8007e42:	6a3b      	ldr	r3, [r7, #32]
 8007e44:	9300      	str	r3, [sp, #0]
 8007e46:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	4611      	mov	r1, r2
 8007e50:	687a      	ldr	r2, [r7, #4]
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	f000 f88c 	bl	8007f70 <I2C_MASTER_lStartTransmitPolling>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007e5c:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3718      	adds	r7, #24
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop

08007e68 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08a      	sub	sp, #40	; 0x28
 8007e6c:	af04      	add	r7, sp, #16
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	607a      	str	r2, [r7, #4]
 8007e72:	603b      	str	r3, [r7, #0]
 8007e74:	460b      	mov	r3, r1
 8007e76:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007e78:	2302      	movs	r3, #2
 8007e7a:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d016      	beq.n	8007eb6 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007e90:	2b01      	cmp	r3, #1
 8007e92:	d010      	beq.n	8007eb6 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 8007e94:	7afa      	ldrb	r2, [r7, #11]
 8007e96:	6a3b      	ldr	r3, [r7, #32]
 8007e98:	9300      	str	r3, [sp, #0]
 8007e9a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e9e:	9301      	str	r3, [sp, #4]
 8007ea0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007ea4:	9302      	str	r3, [sp, #8]
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	4611      	mov	r1, r2
 8007eaa:	687a      	ldr	r2, [r7, #4]
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	f000 f929 	bl	8008104 <I2C_MASTER_lStartReceivePolling>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eb8:	4618      	mov	r0, r3
 8007eba:	3718      	adds	r7, #24
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	bd80      	pop	{r7, pc}

08007ec0 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	60f8      	str	r0, [r7, #12]
 8007ec8:	60b9      	str	r1, [r7, #8]
 8007eca:	4613      	mov	r3, r2
 8007ecc:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	210c      	movs	r1, #12
 8007ed6:	f7ff febf 	bl	8007c58 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d009      	beq.n	8007efc <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	461a      	mov	r2, r3
 8007eee:	79fb      	ldrb	r3, [r7, #7]
 8007ef0:	68f8      	ldr	r0, [r7, #12]
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	f7ff ff3d 	bl	8007d74 <I2C_MASTER_SendRepeatedStart>
 8007efa:	e00d      	b.n	8007f18 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	2201      	movs	r2, #1
 8007f02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	b29b      	uxth	r3, r3
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	79fb      	ldrb	r3, [r7, #7]
 8007f0e:	68f8      	ldr	r0, [r7, #12]
 8007f10:	4611      	mov	r1, r2
 8007f12:	461a      	mov	r2, r3
 8007f14:	f7ff ff14 	bl	8007d40 <I2C_MASTER_SendStart>
  }
}
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d007      	beq.n	8007f48 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d001      	beq.n	8007f48 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007f52:	f042 0202 	orr.w	r2, r2, #2
 8007f56:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	2202      	movs	r2, #2
 8007f5e:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop

08007f70 <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b086      	sub	sp, #24
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	607a      	str	r2, [r7, #4]
 8007f7a:	603b      	str	r3, [r7, #0]
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007f80:	2302      	movs	r3, #2
 8007f82:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8007f84:	2300      	movs	r3, #0
 8007f86:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8007f88:	7afb      	ldrb	r3, [r7, #11]
 8007f8a:	f083 0301 	eor.w	r3, r3, #1
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d009      	beq.n	8007fa8 <I2C_MASTER_lStartTransmitPolling+0x38>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007f9c:	b2db      	uxtb	r3, r3
 8007f9e:	f083 0301 	eor.w	r3, r3, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007fae:	6a3b      	ldr	r3, [r7, #32]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d102      	bne.n	8007fba <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	74fb      	strb	r3, [r7, #19]
 8007fb8:	e09e      	b.n	80080f8 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 8007fba:	7afb      	ldrb	r3, [r7, #11]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d02c      	beq.n	800801a <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f083 0301 	eor.w	r3, r3, #1
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d022      	beq.n	800801a <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8007fd4:	68f8      	ldr	r0, [r7, #12]
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f7ff ff71 	bl	8007ec0 <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007fde:	bf00      	nop
 8007fe0:	68f8      	ldr	r0, [r7, #12]
 8007fe2:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007fe6:	f7ff fef5 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 8007fea:	4603      	mov	r3, r0
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d0f7      	beq.n	8007fe0 <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007ff0:	68f8      	ldr	r0, [r7, #12]
 8007ff2:	2120      	movs	r1, #32
 8007ff4:	f7ff feee 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 8007ff8:	4603      	mov	r3, r0
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d008      	beq.n	8008010 <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007ffe:	68f8      	ldr	r0, [r7, #12]
 8008000:	2120      	movs	r1, #32
 8008002:	f7ff fef9 	bl	8007df8 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8008006:	68f8      	ldr	r0, [r7, #12]
 8008008:	f7ff ff8a 	bl	8007f20 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 800800c:	2301      	movs	r3, #1
 800800e:	e074      	b.n	80080fa <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8008010:	68f8      	ldr	r0, [r7, #12]
 8008012:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008016:	f7ff feef 	bl	8007df8 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008022:	2b00      	cmp	r3, #0
 8008024:	d12e      	bne.n	8008084 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8008026:	e028      	b.n	800807a <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8008028:	683a      	ldr	r2, [r7, #0]
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	4413      	add	r3, r2
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	4619      	mov	r1, r3
 8008034:	f7ff fe4a 	bl	8007ccc <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8008038:	bf00      	nop
 800803a:	68f8      	ldr	r0, [r7, #12]
 800803c:	f44f 7108 	mov.w	r1, #544	; 0x220
 8008040:	f7ff fec8 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 8008044:	4603      	mov	r3, r0
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0f7      	beq.n	800803a <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 800804a:	68f8      	ldr	r0, [r7, #12]
 800804c:	2120      	movs	r1, #32
 800804e:	f7ff fec1 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 8008052:	4603      	mov	r3, r0
 8008054:	2b00      	cmp	r3, #0
 8008056:	d008      	beq.n	800806a <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8008058:	68f8      	ldr	r0, [r7, #12]
 800805a:	2120      	movs	r1, #32
 800805c:	f7ff fecc 	bl	8007df8 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8008060:	68f8      	ldr	r0, [r7, #12]
 8008062:	f7ff ff5d 	bl	8007f20 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8008066:	2301      	movs	r3, #1
 8008068:	e047      	b.n	80080fa <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008070:	f7ff fec2 	bl	8007df8 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 8008074:	697b      	ldr	r3, [r7, #20]
 8008076:	3301      	adds	r3, #1
 8008078:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 800807a:	697a      	ldr	r2, [r7, #20]
 800807c:	6a3b      	ldr	r3, [r7, #32]
 800807e:	429a      	cmp	r2, r3
 8008080:	d3d2      	bcc.n	8008028 <I2C_MASTER_lStartTransmitPolling+0xb8>
 8008082:	e02b      	b.n	80080dc <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8008084:	e01a      	b.n	80080bc <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8008086:	e010      	b.n	80080aa <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 8008088:	697a      	ldr	r2, [r7, #20]
 800808a:	6a3b      	ldr	r3, [r7, #32]
 800808c:	429a      	cmp	r2, r3
 800808e:	d20b      	bcs.n	80080a8 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8008090:	683a      	ldr	r2, [r7, #0]
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	4413      	add	r3, r2
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	68f8      	ldr	r0, [r7, #12]
 800809a:	4619      	mov	r1, r3
 800809c:	f7ff fe16 	bl	8007ccc <I2C_MASTER_TransmitByte>
            buffer_index++;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	3301      	adds	r3, #1
 80080a4:	617b      	str	r3, [r7, #20]
 80080a6:	e000      	b.n	80080aa <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 80080a8:	e008      	b.n	80080bc <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7ff fde4 	bl	8007c78 <I2C_MASTER_IsTXFIFOFull>
 80080b0:	4603      	mov	r3, r0
 80080b2:	f083 0301 	eor.w	r3, r3, #1
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e5      	bne.n	8008088 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 80080bc:	697a      	ldr	r2, [r7, #20]
 80080be:	6a3b      	ldr	r3, [r7, #32]
 80080c0:	429a      	cmp	r2, r3
 80080c2:	d3e0      	bcc.n	8008086 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 80080c4:	bf00      	nop
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7ff fd90 	bl	8007bf0 <XMC_USIC_CH_TXFIFO_IsEmpty>
 80080d0:	4603      	mov	r3, r0
 80080d2:	f083 0301 	eor.w	r3, r3, #1
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1f4      	bne.n	80080c6 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 80080dc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d007      	beq.n	80080f4 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	689b      	ldr	r3, [r3, #8]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 80080ee:	68f8      	ldr	r0, [r7, #12]
 80080f0:	f7ff fe14 	bl	8007d1c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 80080f4:	2300      	movs	r3, #0
 80080f6:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 80080f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80080fa:	4618      	mov	r0, r3
 80080fc:	3718      	adds	r7, #24
 80080fe:	46bd      	mov	sp, r7
 8008100:	bd80      	pop	{r7, pc}
 8008102:	bf00      	nop

08008104 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8008104:	b590      	push	{r4, r7, lr}
 8008106:	b089      	sub	sp, #36	; 0x24
 8008108:	af00      	add	r7, sp, #0
 800810a:	60f8      	str	r0, [r7, #12]
 800810c:	607a      	str	r2, [r7, #4]
 800810e:	603b      	str	r3, [r7, #0]
 8008110:	460b      	mov	r3, r1
 8008112:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 8008114:	2302      	movs	r3, #2
 8008116:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d009      	beq.n	8008138 <I2C_MASTER_lStartReceivePolling+0x34>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800812c:	b2db      	uxtb	r3, r3
 800812e:	f083 0301 	eor.w	r3, r3, #1
 8008132:	b2db      	uxtb	r3, r3
 8008134:	2b00      	cmp	r3, #0
 8008136:	d105      	bne.n	8008144 <I2C_MASTER_lStartReceivePolling+0x40>
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d002      	beq.n	8008144 <I2C_MASTER_lStartReceivePolling+0x40>
 800813e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008140:	2b00      	cmp	r3, #0
 8008142:	d102      	bne.n	800814a <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8008144:	2301      	movs	r3, #1
 8008146:	77fb      	strb	r3, [r7, #31]
 8008148:	e0b8      	b.n	80082bc <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 800814a:	2300      	movs	r3, #0
 800814c:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 800814e:	2300      	movs	r3, #0
 8008150:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 8008152:	7afb      	ldrb	r3, [r7, #11]
 8008154:	2b00      	cmp	r3, #0
 8008156:	d022      	beq.n	800819e <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 8008158:	68f8      	ldr	r0, [r7, #12]
 800815a:	6879      	ldr	r1, [r7, #4]
 800815c:	2201      	movs	r2, #1
 800815e:	f7ff feaf 	bl	8007ec0 <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8008162:	bf00      	nop
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f44f 7108 	mov.w	r1, #544	; 0x220
 800816a:	f7ff fe33 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d0f7      	beq.n	8008164 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8008174:	68f8      	ldr	r0, [r7, #12]
 8008176:	2120      	movs	r1, #32
 8008178:	f7ff fe2c 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 800817c:	4603      	mov	r3, r0
 800817e:	2b00      	cmp	r3, #0
 8008180:	d008      	beq.n	8008194 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8008182:	68f8      	ldr	r0, [r7, #12]
 8008184:	2120      	movs	r1, #32
 8008186:	f7ff fe37 	bl	8007df8 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 800818a:	68f8      	ldr	r0, [r7, #12]
 800818c:	f7ff fec8 	bl	8007f20 <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 8008190:	2301      	movs	r3, #1
 8008192:	e094      	b.n	80082be <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8008194:	68f8      	ldr	r0, [r7, #12]
 8008196:	f44f 7100 	mov.w	r1, #512	; 0x200
 800819a:	f7ff fe2d 	bl	8007df8 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d13a      	bne.n	8008220 <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 80081aa:	e034      	b.n	8008216 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d107      	bne.n	80081c6 <I2C_MASTER_lStartReceivePolling+0xc2>
 80081b6:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d003      	beq.n	80081c6 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f7ff fda0 	bl	8007d04 <I2C_MASTER_ReceiveNACK>
 80081c4:	e002      	b.n	80081cc <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 80081c6:	68f8      	ldr	r0, [r7, #12]
 80081c8:	f7ff fd90 	bl	8007cec <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 80081cc:	bf00      	nop
 80081ce:	68f8      	ldr	r0, [r7, #12]
 80081d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081d4:	f7ff fdfe 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d107      	bne.n	80081ee <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80081e4:	f7ff fdf6 	bl	8007dd4 <I2C_MASTER_GetFlagStatus>
 80081e8:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d0ef      	beq.n	80081ce <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80081f4:	f7ff fe00 	bl	8007df8 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80081fe:	f7ff fdfb 	bl	8007df8 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	1c5a      	adds	r2, r3, #1
 8008206:	61ba      	str	r2, [r7, #24]
 8008208:	683a      	ldr	r2, [r7, #0]
 800820a:	18d4      	adds	r4, r2, r3
 800820c:	68f8      	ldr	r0, [r7, #12]
 800820e:	f7ff fd4f 	bl	8007cb0 <I2C_MASTER_GetReceivedByte>
 8008212:	4603      	mov	r3, r0
 8008214:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 8008216:	69ba      	ldr	r2, [r7, #24]
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	429a      	cmp	r2, r3
 800821c:	d3c6      	bcc.n	80081ac <I2C_MASTER_lStartReceivePolling+0xa8>
 800821e:	e03f      	b.n	80082a0 <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 8008224:	e038      	b.n	8008298 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8008226:	e018      	b.n	800825a <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800822c:	429a      	cmp	r2, r3
 800822e:	d213      	bcs.n	8008258 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	429a      	cmp	r2, r3
 8008238:	d107      	bne.n	800824a <I2C_MASTER_lStartReceivePolling+0x146>
 800823a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800823e:	2b00      	cmp	r3, #0
 8008240:	d003      	beq.n	800824a <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 8008242:	68f8      	ldr	r0, [r7, #12]
 8008244:	f7ff fd5e 	bl	8007d04 <I2C_MASTER_ReceiveNACK>
 8008248:	e002      	b.n	8008250 <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 800824a:	68f8      	ldr	r0, [r7, #12]
 800824c:	f7ff fd4e 	bl	8007cec <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	3301      	adds	r3, #1
 8008254:	617b      	str	r3, [r7, #20]
 8008256:	e000      	b.n	800825a <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 8008258:	e008      	b.n	800826c <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f7ff fd0c 	bl	8007c78 <I2C_MASTER_IsTXFIFOFull>
 8008260:	4603      	mov	r3, r0
 8008262:	f083 0301 	eor.w	r3, r3, #1
 8008266:	b2db      	uxtb	r3, r3
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1dd      	bne.n	8008228 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 800826c:	e010      	b.n	8008290 <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 800826e:	bf00      	nop
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f7ff fd0f 	bl	8007c94 <I2C_MASTER_IsRXFIFOEmpty>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1f9      	bne.n	8008270 <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 800827c:	69bb      	ldr	r3, [r7, #24]
 800827e:	1c5a      	adds	r2, r3, #1
 8008280:	61ba      	str	r2, [r7, #24]
 8008282:	683a      	ldr	r2, [r7, #0]
 8008284:	18d4      	adds	r4, r2, r3
 8008286:	68f8      	ldr	r0, [r7, #12]
 8008288:	f7ff fd12 	bl	8007cb0 <I2C_MASTER_GetReceivedByte>
 800828c:	4603      	mov	r3, r0
 800828e:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	429a      	cmp	r2, r3
 8008296:	d3ea      	bcc.n	800826e <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 8008298:	697a      	ldr	r2, [r7, #20]
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	429a      	cmp	r2, r3
 800829e:	d3c2      	bcc.n	8008226 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 80082a0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f7ff fd32 	bl	8007d1c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 80082b8:	2300      	movs	r3, #0
 80082ba:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 80082bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3724      	adds	r7, #36	; 0x24
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd90      	pop	{r4, r7, pc}
 80082c6:	bf00      	nop

080082c8 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
 80082d4:	4613      	mov	r3, r2
 80082d6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80082d8:	78f8      	ldrb	r0, [r7, #3]
 80082da:	78fb      	ldrb	r3, [r7, #3]
 80082dc:	687a      	ldr	r2, [r7, #4]
 80082de:	3306      	adds	r3, #6
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80082ea:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80082ec:	431a      	orrs	r2, r3
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	1d83      	adds	r3, r0, #6
 80082f2:	009b      	lsls	r3, r3, #2
 80082f4:	440b      	add	r3, r1
 80082f6:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80082f8:	370c      	adds	r7, #12
 80082fa:	46bd      	mov	sp, r7
 80082fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008300:	4770      	bx	lr
 8008302:	bf00      	nop

08008304 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	460b      	mov	r3, r1
 800830e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008314:	f023 020f 	bic.w	r2, r3, #15
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	431a      	orrs	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008320:	370c      	adds	r7, #12
 8008322:	46bd      	mov	sp, r7
 8008324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b082      	sub	sp, #8
 8008330:	af00      	add	r7, sp, #0
 8008332:	6078      	str	r0, [r7, #4]
 8008334:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	2201      	movs	r2, #1
 800833c:	f7fc f812 	bl	8004364 <XMC_I2C_CH_InitEx>
}
 8008340:	3708      	adds	r7, #8
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop

08008348 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	2104      	movs	r1, #4
 8008354:	f7ff ffd6 	bl	8008304 <XMC_USIC_CH_SetMode>
}
 8008358:	3708      	adds	r7, #8
 800835a:	46bd      	mov	sp, r7
 800835c:	bd80      	pop	{r7, pc}
 800835e:	bf00      	nop

08008360 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008364:	4805      	ldr	r0, [pc, #20]	; (800837c <I2C_MASTER_0_disable_io+0x1c>)
 8008366:	2105      	movs	r1, #5
 8008368:	2200      	movs	r2, #0
 800836a:	f7fb ff79 	bl	8004260 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 800836e:	4803      	ldr	r0, [pc, #12]	; (800837c <I2C_MASTER_0_disable_io+0x1c>)
 8008370:	2104      	movs	r1, #4
 8008372:	2200      	movs	r2, #0
 8008374:	f7fb ff74 	bl	8004260 <XMC_GPIO_SetMode>
}
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	48028200 	.word	0x48028200

08008380 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8008384:	23d0      	movs	r3, #208	; 0xd0
 8008386:	4806      	ldr	r0, [pc, #24]	; (80083a0 <I2C_MASTER_0_enable_io+0x20>)
 8008388:	2105      	movs	r1, #5
 800838a:	461a      	mov	r2, r3
 800838c:	f7fb ff68 	bl	8004260 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 8008390:	23d0      	movs	r3, #208	; 0xd0
 8008392:	4803      	ldr	r0, [pc, #12]	; (80083a0 <I2C_MASTER_0_enable_io+0x20>)
 8008394:	2104      	movs	r1, #4
 8008396:	461a      	mov	r2, r3
 8008398:	f7fb ff62 	bl	8004260 <XMC_GPIO_SetMode>
}
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	48028200 	.word	0x48028200

080083a4 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 80083a8:	4813      	ldr	r0, [pc, #76]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083aa:	4914      	ldr	r1, [pc, #80]	; (80083fc <I2C_MASTER_0_init+0x58>)
 80083ac:	f7ff ffbe 	bl	800832c <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 80083b0:	4811      	ldr	r0, [pc, #68]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083b2:	2100      	movs	r1, #0
 80083b4:	2201      	movs	r2, #1
 80083b6:	f7ff ff87 	bl	80082c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 80083ba:	480f      	ldr	r0, [pc, #60]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083bc:	2101      	movs	r1, #1
 80083be:	2200      	movs	r2, #0
 80083c0:	f7ff ff82 	bl	80082c8 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 80083c4:	480c      	ldr	r0, [pc, #48]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083c6:	2110      	movs	r1, #16
 80083c8:	2204      	movs	r2, #4
 80083ca:	2301      	movs	r3, #1
 80083cc:	f7fc fcc2 	bl	8004d54 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 80083d0:	4809      	ldr	r0, [pc, #36]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083d2:	2100      	movs	r1, #0
 80083d4:	2204      	movs	r2, #4
 80083d6:	230f      	movs	r3, #15
 80083d8:	f7fc fce4 	bl	8004da4 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 80083dc:	4806      	ldr	r0, [pc, #24]	; (80083f8 <I2C_MASTER_0_init+0x54>)
 80083de:	f7ff ffb3 	bl	8008348 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 80083e2:	4807      	ldr	r0, [pc, #28]	; (8008400 <I2C_MASTER_0_init+0x5c>)
 80083e4:	2105      	movs	r1, #5
 80083e6:	4a07      	ldr	r2, [pc, #28]	; (8008404 <I2C_MASTER_0_init+0x60>)
 80083e8:	f7f9 fd8a 	bl	8001f00 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 80083ec:	4804      	ldr	r0, [pc, #16]	; (8008400 <I2C_MASTER_0_init+0x5c>)
 80083ee:	2104      	movs	r1, #4
 80083f0:	4a05      	ldr	r2, [pc, #20]	; (8008408 <I2C_MASTER_0_init+0x64>)
 80083f2:	f7f9 fd85 	bl	8001f00 <XMC_GPIO_Init>
}
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	40030200 	.word	0x40030200
 80083fc:	08013450 	.word	0x08013450
 8008400:	48028200 	.word	0x48028200
 8008404:	08013438 	.word	0x08013438
 8008408:	08013444 	.word	0x08013444

0800840c <I2C_MASTER_1_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_1_disable_io(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008410:	4805      	ldr	r0, [pc, #20]	; (8008428 <I2C_MASTER_1_disable_io+0x1c>)
 8008412:	2105      	movs	r1, #5
 8008414:	2200      	movs	r2, #0
 8008416:	f7fb ff23 	bl	8004260 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, XMC_GPIO_MODE_INPUT_TRISTATE);
 800841a:	4803      	ldr	r0, [pc, #12]	; (8008428 <I2C_MASTER_1_disable_io+0x1c>)
 800841c:	2106      	movs	r1, #6
 800841e:	2200      	movs	r2, #0
 8008420:	f7fb ff1e 	bl	8004260 <XMC_GPIO_SetMode>
}
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	48028300 	.word	0x48028300

0800842c <I2C_MASTER_1_enable_io>:

static void I2C_MASTER_1_enable_io(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, I2C_MASTER_1_sda_pin_config.mode);
 8008430:	23c8      	movs	r3, #200	; 0xc8
 8008432:	4806      	ldr	r0, [pc, #24]	; (800844c <I2C_MASTER_1_enable_io+0x20>)
 8008434:	2105      	movs	r1, #5
 8008436:	461a      	mov	r2, r3
 8008438:	f7fb ff12 	bl	8004260 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, I2C_MASTER_1_scl_pin_config.mode);
 800843c:	23c8      	movs	r3, #200	; 0xc8
 800843e:	4803      	ldr	r0, [pc, #12]	; (800844c <I2C_MASTER_1_enable_io+0x20>)
 8008440:	2106      	movs	r1, #6
 8008442:	461a      	mov	r2, r3
 8008444:	f7fb ff0c 	bl	8004260 <XMC_GPIO_SetMode>
}
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	48028300 	.word	0x48028300

08008450 <I2C_MASTER_1_init>:
  .config = &I2C_MASTER_1_config,
  .runtime = &I2C_MASTER_1_runtime,
};

void I2C_MASTER_1_init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C2_CH1, &I2C_MASTER_1_channel_config);
 8008454:	4813      	ldr	r0, [pc, #76]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 8008456:	4914      	ldr	r1, [pc, #80]	; (80084a8 <I2C_MASTER_1_init+0x58>)
 8008458:	f7ff ff68 	bl	800832c <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX0, 0);
 800845c:	4811      	ldr	r0, [pc, #68]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 800845e:	2100      	movs	r1, #0
 8008460:	2200      	movs	r2, #0
 8008462:	f7ff ff31 	bl	80082c8 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 8008466:	480f      	ldr	r0, [pc, #60]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 8008468:	2101      	movs	r1, #1
 800846a:	2201      	movs	r2, #1
 800846c:	f7ff ff2c 	bl	80082c8 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH1,
 8008470:	480c      	ldr	r0, [pc, #48]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 8008472:	2110      	movs	r1, #16
 8008474:	2204      	movs	r2, #4
 8008476:	2301      	movs	r3, #1
 8008478:	f7fc fc6c 	bl	8004d54 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH1,
 800847c:	4809      	ldr	r0, [pc, #36]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 800847e:	2100      	movs	r1, #0
 8008480:	2204      	movs	r2, #4
 8008482:	230f      	movs	r3, #15
 8008484:	f7fc fc8e 	bl	8004da4 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C2_CH1);
 8008488:	4806      	ldr	r0, [pc, #24]	; (80084a4 <I2C_MASTER_1_init+0x54>)
 800848a:	f7ff ff5d 	bl	8008348 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, &I2C_MASTER_1_sda_pin_config);
 800848e:	4807      	ldr	r0, [pc, #28]	; (80084ac <I2C_MASTER_1_init+0x5c>)
 8008490:	2105      	movs	r1, #5
 8008492:	4a07      	ldr	r2, [pc, #28]	; (80084b0 <I2C_MASTER_1_init+0x60>)
 8008494:	f7f9 fd34 	bl	8001f00 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, &I2C_MASTER_1_scl_pin_config);
 8008498:	4804      	ldr	r0, [pc, #16]	; (80084ac <I2C_MASTER_1_init+0x5c>)
 800849a:	2106      	movs	r1, #6
 800849c:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <I2C_MASTER_1_init+0x64>)
 800849e:	f7f9 fd2f 	bl	8001f00 <XMC_GPIO_Init>
}
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	48024200 	.word	0x48024200
 80084a8:	0801349c 	.word	0x0801349c
 80084ac:	48028300 	.word	0x48028300
 80084b0:	08013484 	.word	0x08013484
 80084b4:	08013490 	.word	0x08013490

080084b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80084b8:	b480      	push	{r7}
 80084ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80084bc:	4b04      	ldr	r3, [pc, #16]	; (80084d0 <__NVIC_GetPriorityGrouping+0x18>)
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084c4:	0a1b      	lsrs	r3, r3, #8
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	46bd      	mov	sp, r7
 80084ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ce:	4770      	bx	lr
 80084d0:	e000ed00 	.word	0xe000ed00

080084d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80084d4:	b480      	push	{r7}
 80084d6:	b083      	sub	sp, #12
 80084d8:	af00      	add	r7, sp, #0
 80084da:	4603      	mov	r3, r0
 80084dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80084de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	db0b      	blt.n	80084fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80084e6:	4908      	ldr	r1, [pc, #32]	; (8008508 <__NVIC_EnableIRQ+0x34>)
 80084e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80084ec:	095b      	lsrs	r3, r3, #5
 80084ee:	79fa      	ldrb	r2, [r7, #7]
 80084f0:	f002 021f 	and.w	r2, r2, #31
 80084f4:	2001      	movs	r0, #1
 80084f6:	fa00 f202 	lsl.w	r2, r0, r2
 80084fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80084fe:	370c      	adds	r7, #12
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr
 8008508:	e000e100 	.word	0xe000e100

0800850c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	4603      	mov	r3, r0
 8008514:	6039      	str	r1, [r7, #0]
 8008516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800851c:	2b00      	cmp	r3, #0
 800851e:	db0a      	blt.n	8008536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008520:	490d      	ldr	r1, [pc, #52]	; (8008558 <__NVIC_SetPriority+0x4c>)
 8008522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008526:	683a      	ldr	r2, [r7, #0]
 8008528:	b2d2      	uxtb	r2, r2
 800852a:	0092      	lsls	r2, r2, #2
 800852c:	b2d2      	uxtb	r2, r2
 800852e:	440b      	add	r3, r1
 8008530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008534:	e00a      	b.n	800854c <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008536:	4909      	ldr	r1, [pc, #36]	; (800855c <__NVIC_SetPriority+0x50>)
 8008538:	79fb      	ldrb	r3, [r7, #7]
 800853a:	f003 030f 	and.w	r3, r3, #15
 800853e:	3b04      	subs	r3, #4
 8008540:	683a      	ldr	r2, [r7, #0]
 8008542:	b2d2      	uxtb	r2, r2
 8008544:	0092      	lsls	r2, r2, #2
 8008546:	b2d2      	uxtb	r2, r2
 8008548:	440b      	add	r3, r1
 800854a:	761a      	strb	r2, [r3, #24]
  }
}
 800854c:	370c      	adds	r7, #12
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	e000e100 	.word	0xe000e100
 800855c:	e000ed00 	.word	0xe000ed00

08008560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008560:	b480      	push	{r7}
 8008562:	b089      	sub	sp, #36	; 0x24
 8008564:	af00      	add	r7, sp, #0
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f003 0307 	and.w	r3, r3, #7
 8008572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008574:	69fb      	ldr	r3, [r7, #28]
 8008576:	f1c3 0307 	rsb	r3, r3, #7
 800857a:	2b06      	cmp	r3, #6
 800857c:	bf28      	it	cs
 800857e:	2306      	movcs	r3, #6
 8008580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008582:	69fb      	ldr	r3, [r7, #28]
 8008584:	3306      	adds	r3, #6
 8008586:	2b06      	cmp	r3, #6
 8008588:	d902      	bls.n	8008590 <NVIC_EncodePriority+0x30>
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	3b01      	subs	r3, #1
 800858e:	e000      	b.n	8008592 <NVIC_EncodePriority+0x32>
 8008590:	2300      	movs	r3, #0
 8008592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008594:	69bb      	ldr	r3, [r7, #24]
 8008596:	2201      	movs	r2, #1
 8008598:	fa02 f303 	lsl.w	r3, r2, r3
 800859c:	1e5a      	subs	r2, r3, #1
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	401a      	ands	r2, r3
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2101      	movs	r1, #1
 80085aa:	fa01 f303 	lsl.w	r3, r1, r3
 80085ae:	1e59      	subs	r1, r3, #1
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 80085b4:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3724      	adds	r7, #36	; 0x24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c0:	4770      	bx	lr
 80085c2:	bf00      	nop

080085c4 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 80085c4:	b590      	push	{r4, r7, lr}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	7a1b      	ldrb	r3, [r3, #8]
 80085d0:	f083 0301 	eor.w	r3, r3, #1
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d024      	beq.n	8008624 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f7fb f9b4 	bl	800394c <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	7a5c      	ldrb	r4, [r3, #9]
 80085e8:	f7ff ff66 	bl	80084b8 <__NVIC_GetPriorityGrouping>
 80085ec:	4601      	mov	r1, r0
                                                        obj->config->priority,
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80085f4:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685b      	ldr	r3, [r3, #4]
 80085fa:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80085fc:	4608      	mov	r0, r1
 80085fe:	4611      	mov	r1, r2
 8008600:	461a      	mov	r2, r3
 8008602:	f7ff ffad 	bl	8008560 <NVIC_EncodePriority>
 8008606:	4602      	mov	r2, r0
 8008608:	b263      	sxtb	r3, r4
 800860a:	4618      	mov	r0, r3
 800860c:	4611      	mov	r1, r2
 800860e:	f7ff ff7d 	bl	800850c <__NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7a5b      	ldrb	r3, [r3, #9]
 8008616:	b25b      	sxtb	r3, r3
 8008618:	4618      	mov	r0, r3
 800861a:	f7ff ff5b 	bl	80084d4 <__NVIC_EnableIRQ>
    obj->initialized = true;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 8008624:	2300      	movs	r3, #0
}
 8008626:	4618      	mov	r0, r3
 8008628:	370c      	adds	r7, #12
 800862a:	46bd      	mov	sp, r7
 800862c:	bd90      	pop	{r4, r7, pc}
 800862e:	bf00      	nop

08008630 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8008634:	4801      	ldr	r0, [pc, #4]	; (800863c <GPDMA0_0_IRQHandler+0xc>)
 8008636:	f7fb fd03 	bl	8004040 <XMC_DMA_IRQHandler>
}
 800863a:	bd80      	pop	{r7, pc}
 800863c:	50014000 	.word	0x50014000

08008640 <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 8008644:	4801      	ldr	r0, [pc, #4]	; (800864c <GPDMA1_0_IRQHandler+0xc>)
 8008646:	f7fb fcfb 	bl	8004040 <XMC_DMA_IRQHandler>
}
 800864a:	bd80      	pop	{r7, pc}
 800864c:	50018000 	.word	0x50018000

08008650 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800865e:	60da      	str	r2, [r3, #12]
}
 8008660:	370c      	adds	r7, #12
 8008662:	46bd      	mov	sp, r7
 8008664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008668:	4770      	bx	lr
 800866a:	bf00      	nop

0800866c <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	7b5b      	ldrb	r3, [r3, #13]
 8008678:	f083 0301 	eor.w	r3, r3, #1
 800867c:	b2db      	uxtb	r3, r3
 800867e:	2b00      	cmp	r3, #0
 8008680:	d00f      	beq.n	80086a2 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	689a      	ldr	r2, [r3, #8]
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	7b1b      	ldrb	r3, [r3, #12]
 800868a:	4610      	mov	r0, r2
 800868c:	4619      	mov	r1, r3
 800868e:	f7fb f805 	bl	800369c <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	4618      	mov	r0, r3
 8008698:	f7ff ffda 	bl	8008650 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b083      	sub	sp, #12
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80086ba:	60da      	str	r2, [r3, #12]
}
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr
 80086c6:	bf00      	nop

080086c8 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	7b5b      	ldrb	r3, [r3, #13]
 80086d4:	f083 0301 	eor.w	r3, r3, #1
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d00f      	beq.n	80086fe <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	689a      	ldr	r2, [r3, #8]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	7b1b      	ldrb	r3, [r3, #12]
 80086e6:	4610      	mov	r0, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f7fa fe9f 	bl	800342c <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7ff ffda 	bl	80086ac <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80086fe:	2300      	movs	r3, #0
}
 8008700:	4618      	mov	r0, r3
 8008702:	3708      	adds	r7, #8
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8008710:	2300      	movs	r3, #0
 8008712:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7a5b      	ldrb	r3, [r3, #9]
 8008718:	f083 0301 	eor.w	r3, r3, #1
 800871c:	b2db      	uxtb	r3, r3
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00f      	beq.n	8008742 <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6859      	ldr	r1, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	7a1a      	ldrb	r2, [r3, #8]
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4608      	mov	r0, r1
 8008730:	4611      	mov	r1, r2
 8008732:	461a      	mov	r2, r3
 8008734:	f7fa fbce 	bl	8002ed4 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800873e:	2300      	movs	r3, #0
 8008740:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8008742:	7bfb      	ldrb	r3, [r7, #15]

}
 8008744:	4618      	mov	r0, r3
 8008746:	3710      	adds	r7, #16
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <FATFS_Init>:

/*
 * API to initialize the FATFS APP
 */
FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 8008754:	2300      	movs	r3, #0
 8008756:	73fb      	strb	r3, [r7, #15]
  if (handle->initialized == false)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	791b      	ldrb	r3, [r3, #4]
 800875c:	f083 0301 	eor.w	r3, r3, #1
 8008760:	b2db      	uxtb	r3, r3
 8008762:	2b00      	cmp	r3, #0
 8008764:	d022      	beq.n	80087ac <FATFS_Init+0x60>
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008766:	2300      	movs	r3, #0
 8008768:	60bb      	str	r3, [r7, #8]
 800876a:	e00e      	b.n	800878a <FATFS_Init+0x3e>
  {
    status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 800876c:	4a13      	ldr	r2, [pc, #76]	; (80087bc <FATFS_Init+0x70>)
 800876e:	68bb      	ldr	r3, [r7, #8]
 8008770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008774:	4618      	mov	r0, r3
 8008776:	f7fe fff7 	bl	8007768 <SDMMC_BLOCK_Init>
 800877a:	4603      	mov	r3, r0
 800877c:	461a      	mov	r2, r3
 800877e:	7bfb      	ldrb	r3, [r7, #15]
 8008780:	4313      	orrs	r3, r2
 8008782:	73fb      	strb	r3, [r7, #15]
{
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
  if (handle->initialized == false)
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	3301      	adds	r3, #1
 8008788:	60bb      	str	r3, [r7, #8]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d0ed      	beq.n	800876c <FATFS_Init+0x20>
#if (FATFS_STANDARDLIBRARY == 1U)
  SLTHA_Init();
#endif

#if (FF_FS_NORTC == 0U)
  if (status == FATFS_STATUS_SUCCESS)
 8008790:	7bfb      	ldrb	r3, [r7, #15]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d106      	bne.n	80087a4 <FATFS_Init+0x58>
  {
    status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff f832 	bl	8007804 <RTC_Init>
 80087a0:	4603      	mov	r3, r0
 80087a2:	73fb      	strb	r3, [r7, #15]
  }
#endif
    handle->initialized = true;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	711a      	strb	r2, [r3, #4]
 80087aa:	e001      	b.n	80087b0 <FATFS_Init+0x64>
  }
  else
  {
    status = FATFS_STATUS_FAILURE;
 80087ac:	2301      	movs	r3, #1
 80087ae:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80087b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3710      	adds	r7, #16
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	080134d0 	.word	0x080134d0

080087c0 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6819      	ldr	r1, [r3, #0]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	7c1a      	ldrb	r2, [r3, #16]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	3304      	adds	r3, #4
 80087d4:	4608      	mov	r0, r1
 80087d6:	4611      	mov	r1, r2
 80087d8:	461a      	mov	r2, r3
 80087da:	f7f9 fb91 	bl	8001f00 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6819      	ldr	r1, [r3, #0]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	7c1a      	ldrb	r2, [r3, #16]
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	7c5b      	ldrb	r3, [r3, #17]
 80087ea:	4608      	mov	r0, r1
 80087ec:	4611      	mov	r1, r2
 80087ee:	461a      	mov	r2, r3
 80087f0:	f7fb fd76 	bl	80042e0 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3708      	adds	r7, #8
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}
 80087fe:	bf00      	nop

08008800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008800:	b480      	push	{r7}
 8008802:	b085      	sub	sp, #20
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f003 0307 	and.w	r3, r3, #7
 800880e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008810:	4b0c      	ldr	r3, [pc, #48]	; (8008844 <__NVIC_SetPriorityGrouping+0x44>)
 8008812:	68db      	ldr	r3, [r3, #12]
 8008814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800881c:	4013      	ands	r3, r2
 800881e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008824:	68bb      	ldr	r3, [r7, #8]
 8008826:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8008828:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800882c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008830:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8008832:	4a04      	ldr	r2, [pc, #16]	; (8008844 <__NVIC_SetPriorityGrouping+0x44>)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	60d3      	str	r3, [r2, #12]
}
 8008838:	3714      	adds	r7, #20
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	e000ed00 	.word	0xe000ed00

08008848 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800884e:	2001      	movs	r0, #1
 8008850:	f7ff ffd6 	bl	8008800 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008854:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8008856:	4b21      	ldr	r3, [pc, #132]	; (80088dc <SystemCoreSetup+0x94>)
 8008858:	4a21      	ldr	r2, [pc, #132]	; (80088e0 <SystemCoreSetup+0x98>)
 800885a:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800885c:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008860:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8008862:	4a1e      	ldr	r2, [pc, #120]	; (80088dc <SystemCoreSetup+0x94>)
 8008864:	4b1d      	ldr	r3, [pc, #116]	; (80088dc <SystemCoreSetup+0x94>)
 8008866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800886e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8008872:	4b1c      	ldr	r3, [pc, #112]	; (80088e4 <SystemCoreSetup+0x9c>)
 8008874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008878:	3314      	adds	r3, #20
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f023 030f 	bic.w	r3, r3, #15
 8008884:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f043 0304 	orr.w	r3, r3, #4
 800888c:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800888e:	4b15      	ldr	r3, [pc, #84]	; (80088e4 <SystemCoreSetup+0x9c>)
 8008890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008894:	3314      	adds	r3, #20
 8008896:	687a      	ldr	r2, [r7, #4]
 8008898:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 800889a:	4a10      	ldr	r2, [pc, #64]	; (80088dc <SystemCoreSetup+0x94>)
 800889c:	4b0f      	ldr	r3, [pc, #60]	; (80088dc <SystemCoreSetup+0x94>)
 800889e:	695b      	ldr	r3, [r3, #20]
 80088a0:	f023 0310 	bic.w	r3, r3, #16
 80088a4:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 80088a6:	4a0d      	ldr	r2, [pc, #52]	; (80088dc <SystemCoreSetup+0x94>)
 80088a8:	4b0c      	ldr	r3, [pc, #48]	; (80088dc <SystemCoreSetup+0x94>)
 80088aa:	695b      	ldr	r3, [r3, #20]
 80088ac:	f023 0308 	bic.w	r3, r3, #8
 80088b0:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80088b2:	4a0a      	ldr	r2, [pc, #40]	; (80088dc <SystemCoreSetup+0x94>)
 80088b4:	4b09      	ldr	r3, [pc, #36]	; (80088dc <SystemCoreSetup+0x94>)
 80088b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088bc:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 80088be:	4a07      	ldr	r2, [pc, #28]	; (80088dc <SystemCoreSetup+0x94>)
 80088c0:	4b06      	ldr	r3, [pc, #24]	; (80088dc <SystemCoreSetup+0x94>)
 80088c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80088c8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 80088ca:	4a04      	ldr	r2, [pc, #16]	; (80088dc <SystemCoreSetup+0x94>)
 80088cc:	4b03      	ldr	r3, [pc, #12]	; (80088dc <SystemCoreSetup+0x94>)
 80088ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d4:	6253      	str	r3, [r2, #36]	; 0x24
}
 80088d6:	3708      	adds	r7, #8
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}
 80088dc:	e000ed00 	.word	0xe000ed00
 80088e0:	08000000 	.word	0x08000000
 80088e4:	58001000 	.word	0x58001000

080088e8 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80088f0:	2300      	movs	r3, #0
 80088f2:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	701a      	strb	r2, [r3, #0]

  return (status);
 80088fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8008908:	b480      	push	{r7}
 800890a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 800890c:	4b02      	ldr	r3, [pc, #8]	; (8008918 <OSCHP_GetFrequency+0x10>)
}
 800890e:	4618      	mov	r0, r3
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	00b71b00 	.word	0x00b71b00

0800891c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 800891c:	b5b0      	push	{r4, r5, r7, lr}
 800891e:	b086      	sub	sp, #24
 8008920:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8008922:	4b13      	ldr	r3, [pc, #76]	; (8008970 <SystemCoreClockSetup+0x54>)
 8008924:	1d3c      	adds	r4, r7, #4
 8008926:	461d      	mov	r5, r3
 8008928:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800892a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8008930:	1d3b      	adds	r3, r7, #4
 8008932:	4618      	mov	r0, r3
 8008934:	f7f9 fc78 	bl	8002228 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8008938:	2000      	movs	r0, #0
 800893a:	f7f9 fdaf 	bl	800249c <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800893e:	2000      	movs	r0, #0
 8008940:	f7f9 fd64 	bl	800240c <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8008944:	2004      	movs	r0, #4
 8008946:	f7f9 fe35 	bl	80025b4 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 800894a:	f7f9 febf 	bl	80026cc <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800894e:	2001      	movs	r0, #1
 8008950:	2120      	movs	r1, #32
 8008952:	f7f9 fecb 	bl	80026ec <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8008956:	2000      	movs	r0, #0
 8008958:	f7f9 fd6c 	bl	8002434 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 800895c:	2001      	movs	r0, #1
 800895e:	f7f9 fe51 	bl	8002604 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8008962:	2001      	movs	r0, #1
 8008964:	f7f9 fe3a 	bl	80025dc <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bdb0      	pop	{r4, r5, r7, pc}
 800896e:	bf00      	nop
 8008970:	08013a38 	.word	0x08013a38

08008974 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	460b      	mov	r3, r1
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	689a      	ldr	r2, [r3, #8]
 8008986:	7afb      	ldrb	r3, [r7, #11]
 8008988:	2107      	movs	r1, #7
 800898a:	fa01 f303 	lsl.w	r3, r1, r3
 800898e:	43db      	mvns	r3, r3
 8008990:	401a      	ands	r2, r3
 8008992:	7afb      	ldrb	r3, [r7, #11]
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	431a      	orrs	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	609a      	str	r2, [r3, #8]
}
 80089a0:	3714      	adds	r7, #20
 80089a2:	46bd      	mov	sp, r7
 80089a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a8:	4770      	bx	lr
 80089aa:	bf00      	nop

080089ac <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	460b      	mov	r3, r1
 80089b6:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 80089c0:	78fb      	ldrb	r3, [r7, #3]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 80089c6:	431a      	orrs	r2, r3
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 80089cc:	370c      	adds	r7, #12
 80089ce:	46bd      	mov	sp, r7
 80089d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d4:	4770      	bx	lr
 80089d6:	bf00      	nop

080089d8 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	60da      	str	r2, [r3, #12]
}
 80089ec:	370c      	adds	r7, #12
 80089ee:	46bd      	mov	sp, r7
 80089f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop

080089f8 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	601a      	str	r2, [r3, #0]
}
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop

08008a18 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	601a      	str	r2, [r3, #0]
}
 8008a2c:	370c      	adds	r7, #12
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop

08008a38 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008a38:	b480      	push	{r7}
 8008a3a:	b083      	sub	sp, #12
 8008a3c:	af00      	add	r7, sp, #0
 8008a3e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f043 0201 	orr.w	r2, r3, #1
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	601a      	str	r2, [r3, #0]
}
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop

08008a58 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f023 0201 	bic.w	r2, r3, #1
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
}
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop

08008a78 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	601a      	str	r2, [r3, #0]
}
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop

08008a98 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b085      	sub	sp, #20
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	460b      	mov	r3, r1
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	6891      	ldr	r1, [r2, #8]
 8008ab0:	7afa      	ldrb	r2, [r7, #11]
 8008ab2:	2007      	movs	r0, #7
 8008ab4:	fa00 f202 	lsl.w	r2, r0, r2
 8008ab8:	43d2      	mvns	r2, r2
 8008aba:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8008abc:	7afa      	ldrb	r2, [r7, #11]
 8008abe:	6878      	ldr	r0, [r7, #4]
 8008ac0:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop

08008ad4 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	69db      	ldr	r3, [r3, #28]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	370c      	adds	r7, #12
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop

08008af0 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b083      	sub	sp, #12
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	687a      	ldr	r2, [r7, #4]
 8008b00:	6812      	ldr	r2, [r2, #0]
 8008b02:	6811      	ldr	r1, [r2, #0]
 8008b04:	683a      	ldr	r2, [r7, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	601a      	str	r2, [r3, #0]
}
 8008b0a:	370c      	adds	r7, #12
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b12:	4770      	bx	lr

08008b14 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008b26:	f7ff ffe3 	bl	8008af0 <XMC_CAN_MO_EnableEvent>
}
 8008b2a:	3708      	adds	r7, #8
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	bd80      	pop	{r7, pc}

08008b30 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008b42:	f7ff ffd5 	bl	8008af0 <XMC_CAN_MO_EnableEvent>
}
 8008b46:	3708      	adds	r7, #8
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b084      	sub	sp, #16
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8008b54:	2300      	movs	r3, #0
 8008b56:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8008b58:	6878      	ldr	r0, [r7, #4]
 8008b5a:	f000 f831 	bl	8008bc0 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d003      	beq.n	8008b70 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f043 0302 	orr.w	r3, r3, #2
 8008b6e:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	f043 0304 	orr.w	r3, r3, #4
 8008b80:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f043 0308 	orr.w	r3, r3, #8
 8008b92:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	68f9      	ldr	r1, [r7, #12]
 8008b9c:	f7fa fbac 	bl	80032f8 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d006      	beq.n	8008bb8 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	685b      	ldr	r3, [r3, #4]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bb4:	f7fa fba0 	bl	80032f8 <XMC_CAN_NODE_EnableEvent>
  }

}
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop

08008bc0 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b082      	sub	sp, #8
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bd2:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008bd4:	4610      	mov	r0, r2
 8008bd6:	2100      	movs	r1, #0
 8008bd8:	461a      	mov	r2, r3
 8008bda:	f7ff fecb 	bl	8008974 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be8:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8008bea:	4610      	mov	r0, r2
 8008bec:	2104      	movs	r1, #4
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7ff fec0 	bl	8008974 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008bfe:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8008c00:	4610      	mov	r0, r2
 8008c02:	2108      	movs	r1, #8
 8008c04:	461a      	mov	r2, r3
 8008c06:	f7ff feb5 	bl	8008974 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c14:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8008c16:	4610      	mov	r0, r2
 8008c18:	210c      	movs	r1, #12
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	f7ff feaa 	bl	8008974 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop

08008c28 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fa f98d 	bl	8002f54 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	79db      	ldrb	r3, [r3, #7]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d00b      	beq.n	8008c5a <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681a      	ldr	r2, [r3, #0]
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	795b      	ldrb	r3, [r3, #5]
 8008c4a:	4610      	mov	r0, r2
 8008c4c:	2104      	movs	r1, #4
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f7ff ff22 	bl	8008a98 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f7ff ff5d 	bl	8008b14 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7a1b      	ldrb	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00b      	beq.n	8008c7a <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681a      	ldr	r2, [r3, #0]
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	799b      	ldrb	r3, [r3, #6]
 8008c6a:	4610      	mov	r0, r2
 8008c6c:	2100      	movs	r1, #0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f7ff ff12 	bl	8008a98 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f7ff ff5b 	bl	8008b30 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8008c7a:	3708      	adds	r7, #8
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}

08008c80 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b084      	sub	sp, #16
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f7fa fa33 	bl	80030fc <XMC_CAN_MO_Transmit>
 8008c96:	4603      	mov	r3, r0
 8008c98:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3710      	adds	r7, #16
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7fa fa4f 	bl	8003158 <XMC_CAN_MO_Receive>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3710      	adds	r7, #16
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	6812      	ldr	r2, [r2, #0]
 8008ce2:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	68ba      	ldr	r2, [r7, #8]
 8008cea:	6852      	ldr	r2, [r2, #4]
 8008cec:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f7fa f9ca 	bl	800308c <XMC_CAN_MO_UpdateData>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	3710      	adds	r7, #16
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}
 8008d06:	bf00      	nop

08008d08 <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	b084      	sub	sp, #16
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fedd 	bl	8008ad4 <XMC_CAN_MO_GetStatus>
 8008d1a:	60f8      	str	r0, [r7, #12]

  return (status);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3710      	adds	r7, #16
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop

08008d28 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7ff fce1 	bl	8008708 <GLOBAL_CAN_Init>
 8008d46:	4603      	mov	r3, r0
 8008d48:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8008d4a:	7dfb      	ldrb	r3, [r7, #23]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	f040 8087 	bne.w	8008e60 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	685a      	ldr	r2, [r3, #4]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	689b      	ldr	r3, [r3, #8]
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	f7f9 ff93 	bl	8002c88 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8008d62:	4603      	mov	r3, r0
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d178      	bne.n	8008e5a <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	f7ff fe43 	bl	80089f8 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	685b      	ldr	r3, [r3, #4]
 8008d76:	4618      	mov	r0, r3
 8008d78:	f7ff fe5e 	bl	8008a38 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f7ff fe79 	bl	8008a78 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d005      	beq.n	8008d9c <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7ff fe1f 	bl	80089d8 <XMC_CAN_NODE_EnableLoopBack>
 8008d9a:	e018      	b.n	8008dce <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008da2:	6819      	ldr	r1, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008daa:	791a      	ldrb	r2, [r3, #4]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008db2:	4608      	mov	r0, r1
 8008db4:	4611      	mov	r1, r2
 8008db6:	461a      	mov	r2, r3
 8008db8:	f7f9 f8a2 	bl	8001f00 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008dc6:	4610      	mov	r0, r2
 8008dc8:	4619      	mov	r1, r3
 8008dca:	f7ff fdef 	bl	80089ac <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff febc 	bl	8008b4c <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	613b      	str	r3, [r7, #16]
 8008dd8:	e019      	b.n	8008e0e <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	3302      	adds	r3, #2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	4413      	add	r3, r2
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6859      	ldr	r1, [r3, #4]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	791b      	ldrb	r3, [r3, #4]
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	461a      	mov	r2, r3
 8008dfe:	f7f9 ffeb 	bl	8002dd8 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8008e02:	68b8      	ldr	r0, [r7, #8]
 8008e04:	f7ff ff10 	bl	8008c28 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008e08:	693b      	ldr	r3, [r7, #16]
 8008e0a:	3301      	adds	r3, #1
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8008e14:	461a      	mov	r2, r3
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	429a      	cmp	r2, r3
 8008e1a:	d8de      	bhi.n	8008dda <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	4618      	mov	r0, r3
 8008e22:	f7ff fdf9 	bl	8008a18 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fe14 	bl	8008a58 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008e36:	f083 0301 	eor.w	r3, r3, #1
 8008e3a:	b2db      	uxtb	r3, r3
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d011      	beq.n	8008e64 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	6819      	ldr	r1, [r3, #0]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	791a      	ldrb	r2, [r3, #4]
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e4e:	4608      	mov	r0, r1
 8008e50:	4611      	mov	r1, r2
 8008e52:	461a      	mov	r2, r3
 8008e54:	f7f9 f854 	bl	8001f00 <XMC_GPIO_Init>
 8008e58:	e004      	b.n	8008e64 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	75fb      	strb	r3, [r7, #23]
 8008e5e:	e001      	b.n	8008e64 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8008e60:	2301      	movs	r3, #1
 8008e62:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3718      	adds	r7, #24
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop

08008e70 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b082      	sub	sp, #8
 8008e74:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8008e76:	2300      	movs	r3, #0
 8008e78:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8008e7a:	48b7      	ldr	r0, [pc, #732]	; (8009158 <DAVE_Init+0x2e8>)
 8008e7c:	f7ff fd34 	bl	80088e8 <CLOCK_XMC4_Init>
 8008e80:	4603      	mov	r3, r0
 8008e82:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8008e84:	79fb      	ldrb	r3, [r7, #7]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d104      	bne.n	8008e94 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_DC_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_DC_EN_OUT_D); 
 8008e8a:	48b4      	ldr	r0, [pc, #720]	; (800915c <DAVE_Init+0x2ec>)
 8008e8c:	f7ff fc98 	bl	80087c0 <DIGITAL_IO_Init>
 8008e90:	4603      	mov	r3, r0
 8008e92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e94:	79fb      	ldrb	r3, [r7, #7]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_PUMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_PUMP_OUT_D); 
 8008e9a:	48b1      	ldr	r0, [pc, #708]	; (8009160 <DAVE_Init+0x2f0>)
 8008e9c:	f7ff fc90 	bl	80087c0 <DIGITAL_IO_Init>
 8008ea0:	4603      	mov	r3, r0
 8008ea2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ea4:	79fb      	ldrb	r3, [r7, #7]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance HEADLAMPS_ADJ_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HEADLAMPS_ADJ_PWR_OUT_D); 
 8008eaa:	48ae      	ldr	r0, [pc, #696]	; (8009164 <DAVE_Init+0x2f4>)
 8008eac:	f7ff fc88 	bl	80087c0 <DIGITAL_IO_Init>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008eb4:	79fb      	ldrb	r3, [r7, #7]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d104      	bne.n	8008ec4 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance AC_RADIATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AC_RADIATOR_OUT_D); 
 8008eba:	48ab      	ldr	r0, [pc, #684]	; (8009168 <DAVE_Init+0x2f8>)
 8008ebc:	f7ff fc80 	bl	80087c0 <DIGITAL_IO_Init>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ec4:	79fb      	ldrb	r3, [r7, #7]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d104      	bne.n	8008ed4 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance INSTRUMENT_CON_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INSTRUMENT_CON_PWR_OUT_D); 
 8008eca:	48a8      	ldr	r0, [pc, #672]	; (800916c <DAVE_Init+0x2fc>)
 8008ecc:	f7ff fc78 	bl	80087c0 <DIGITAL_IO_Init>
 8008ed0:	4603      	mov	r3, r0
 8008ed2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ed4:	79fb      	ldrb	r3, [r7, #7]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d104      	bne.n	8008ee4 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACCEL_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACCEL_CS_OUT); 
 8008eda:	48a5      	ldr	r0, [pc, #660]	; (8009170 <DAVE_Init+0x300>)
 8008edc:	f7ff fc70 	bl	80087c0 <DIGITAL_IO_Init>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ee4:	79fb      	ldrb	r3, [r7, #7]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d104      	bne.n	8008ef4 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELECT_HANDBRAKE_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELECT_HANDBRAKE_EN_OUT_D); 
 8008eea:	48a2      	ldr	r0, [pc, #648]	; (8009174 <DAVE_Init+0x304>)
 8008eec:	f7ff fc68 	bl	80087c0 <DIGITAL_IO_Init>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d104      	bne.n	8008f04 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_CONTACTOR_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_CONTACTOR_RELAY_OUT_D); 
 8008efa:	489f      	ldr	r0, [pc, #636]	; (8009178 <DAVE_Init+0x308>)
 8008efc:	f7ff fc60 	bl	80087c0 <DIGITAL_IO_Init>
 8008f00:	4603      	mov	r3, r0
 8008f02:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f04:	79fb      	ldrb	r3, [r7, #7]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d104      	bne.n	8008f14 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_PARK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_PARK_RELAY_OUT_D); 
 8008f0a:	489c      	ldr	r0, [pc, #624]	; (800917c <DAVE_Init+0x30c>)
 8008f0c:	f7ff fc58 	bl	80087c0 <DIGITAL_IO_Init>
 8008f10:	4603      	mov	r3, r0
 8008f12:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f14:	79fb      	ldrb	r3, [r7, #7]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d104      	bne.n	8008f24 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REV_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REV_RELAY_OUT_D); 
 8008f1a:	4899      	ldr	r0, [pc, #612]	; (8009180 <DAVE_Init+0x310>)
 8008f1c:	f7ff fc50 	bl	80087c0 <DIGITAL_IO_Init>
 8008f20:	4603      	mov	r3, r0
 8008f22:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f24:	79fb      	ldrb	r3, [r7, #7]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d104      	bne.n	8008f34 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FWD_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FWD_RELAY_OUT_D); 
 8008f2a:	4896      	ldr	r0, [pc, #600]	; (8009184 <DAVE_Init+0x314>)
 8008f2c:	f7ff fc48 	bl	80087c0 <DIGITAL_IO_Init>
 8008f30:	4603      	mov	r3, r0
 8008f32:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f34:	79fb      	ldrb	r3, [r7, #7]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d104      	bne.n	8008f44 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REGEN_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REGEN_RELAY_OUT_D); 
 8008f3a:	4893      	ldr	r0, [pc, #588]	; (8009188 <DAVE_Init+0x318>)
 8008f3c:	f7ff fc40 	bl	80087c0 <DIGITAL_IO_Init>
 8008f40:	4603      	mov	r3, r0
 8008f42:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f44:	79fb      	ldrb	r3, [r7, #7]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_ELOCK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_ELOCK_RELAY_OUT_D); 
 8008f4a:	4890      	ldr	r0, [pc, #576]	; (800918c <DAVE_Init+0x31c>)
 8008f4c:	f7ff fc38 	bl	80087c0 <DIGITAL_IO_Init>
 8008f50:	4603      	mov	r3, r0
 8008f52:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f54:	79fb      	ldrb	r3, [r7, #7]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d104      	bne.n	8008f64 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance POS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&POS_OUT_D); 
 8008f5a:	488d      	ldr	r0, [pc, #564]	; (8009190 <DAVE_Init+0x320>)
 8008f5c:	f7ff fc30 	bl	80087c0 <DIGITAL_IO_Init>
 8008f60:	4603      	mov	r3, r0
 8008f62:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f64:	79fb      	ldrb	r3, [r7, #7]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d104      	bne.n	8008f74 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance VCU_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VCU_FAN_PWR_OUT_D); 
 8008f6a:	488a      	ldr	r0, [pc, #552]	; (8009194 <DAVE_Init+0x324>)
 8008f6c:	f7ff fc28 	bl	80087c0 <DIGITAL_IO_Init>
 8008f70:	4603      	mov	r3, r0
 8008f72:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f74:	79fb      	ldrb	r3, [r7, #7]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d104      	bne.n	8008f84 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_EFUSE_1_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_EFUSE_1_OUT_D); 
 8008f7a:	4887      	ldr	r0, [pc, #540]	; (8009198 <DAVE_Init+0x328>)
 8008f7c:	f7ff fc20 	bl	80087c0 <DIGITAL_IO_Init>
 8008f80:	4603      	mov	r3, r0
 8008f82:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f84:	79fb      	ldrb	r3, [r7, #7]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d104      	bne.n	8008f94 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance WIPER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WIPER_PWR_OUT_D); 
 8008f8a:	4884      	ldr	r0, [pc, #528]	; (800919c <DAVE_Init+0x32c>)
 8008f8c:	f7ff fc18 	bl	80087c0 <DIGITAL_IO_Init>
 8008f90:	4603      	mov	r3, r0
 8008f92:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f94:	79fb      	ldrb	r3, [r7, #7]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d104      	bne.n	8008fa4 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance THROTTLE_POT_CS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&THROTTLE_POT_CS_OUT_D); 
 8008f9a:	4881      	ldr	r0, [pc, #516]	; (80091a0 <DAVE_Init+0x330>)
 8008f9c:	f7ff fc10 	bl	80087c0 <DIGITAL_IO_Init>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d104      	bne.n	8008fb4 <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIGHTS_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIGHTS_PWR_OUT_D); 
 8008faa:	487e      	ldr	r0, [pc, #504]	; (80091a4 <DAVE_Init+0x334>)
 8008fac:	f7ff fc08 	bl	80087c0 <DIGITAL_IO_Init>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fb4:	79fb      	ldrb	r3, [r7, #7]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d104      	bne.n	8008fc4 <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance INFOTAINMENT_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INFOTAINMENT_PWR_OUT_D); 
 8008fba:	487b      	ldr	r0, [pc, #492]	; (80091a8 <DAVE_Init+0x338>)
 8008fbc:	f7ff fc00 	bl	80087c0 <DIGITAL_IO_Init>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fc4:	79fb      	ldrb	r3, [r7, #7]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d104      	bne.n	8008fd4 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUDIO_AMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUDIO_AMP_OUT_D); 
 8008fca:	4878      	ldr	r0, [pc, #480]	; (80091ac <DAVE_Init+0x33c>)
 8008fcc:	f7ff fbf8 	bl	80087c0 <DIGITAL_IO_Init>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fd4:	79fb      	ldrb	r3, [r7, #7]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d104      	bne.n	8008fe4 <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_PWR_OUT_D); 
 8008fda:	4875      	ldr	r0, [pc, #468]	; (80091b0 <DAVE_Init+0x340>)
 8008fdc:	f7ff fbf0 	bl	80087c0 <DIGITAL_IO_Init>
 8008fe0:	4603      	mov	r3, r0
 8008fe2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fe4:	79fb      	ldrb	r3, [r7, #7]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d104      	bne.n	8008ff4 <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_LIGHT_OUT_D); 
 8008fea:	4872      	ldr	r0, [pc, #456]	; (80091b4 <DAVE_Init+0x344>)
 8008fec:	f7ff fbe8 	bl	80087c0 <DIGITAL_IO_Init>
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ff4:	79fb      	ldrb	r3, [r7, #7]
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d104      	bne.n	8009004 <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance HORN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HORN_PWR_OUT_D); 
 8008ffa:	486f      	ldr	r0, [pc, #444]	; (80091b8 <DAVE_Init+0x348>)
 8008ffc:	f7ff fbe0 	bl	80087c0 <DIGITAL_IO_Init>
 8009000:	4603      	mov	r3, r0
 8009002:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009004:	79fb      	ldrb	r3, [r7, #7]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d104      	bne.n	8009014 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_OUT_D); 
 800900a:	486c      	ldr	r0, [pc, #432]	; (80091bc <DAVE_Init+0x34c>)
 800900c:	f7ff fbd8 	bl	80087c0 <DIGITAL_IO_Init>
 8009010:	4603      	mov	r3, r0
 8009012:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009014:	79fb      	ldrb	r3, [r7, #7]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d104      	bne.n	8009024 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance RIGHT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RIGHT_INDICATOR_OUT_D); 
 800901a:	4869      	ldr	r0, [pc, #420]	; (80091c0 <DAVE_Init+0x350>)
 800901c:	f7ff fbd0 	bl	80087c0 <DIGITAL_IO_Init>
 8009020:	4603      	mov	r3, r0
 8009022:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009024:	79fb      	ldrb	r3, [r7, #7]
 8009026:	2b00      	cmp	r3, #0
 8009028:	d104      	bne.n	8009034 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance HIGH_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HIGH_BEAM_OUT_D); 
 800902a:	4866      	ldr	r0, [pc, #408]	; (80091c4 <DAVE_Init+0x354>)
 800902c:	f7ff fbc8 	bl	80087c0 <DIGITAL_IO_Init>
 8009030:	4603      	mov	r3, r0
 8009032:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009034:	79fb      	ldrb	r3, [r7, #7]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d104      	bne.n	8009044 <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LOW_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LOW_BEAM_OUT_D); 
 800903a:	4863      	ldr	r0, [pc, #396]	; (80091c8 <DAVE_Init+0x358>)
 800903c:	f7ff fbc0 	bl	80087c0 <DIGITAL_IO_Init>
 8009040:	4603      	mov	r3, r0
 8009042:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009044:	79fb      	ldrb	r3, [r7, #7]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d104      	bne.n	8009054 <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance REV_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REV_LIGHT_OUT_D); 
 800904a:	4860      	ldr	r0, [pc, #384]	; (80091cc <DAVE_Init+0x35c>)
 800904c:	f7ff fbb8 	bl	80087c0 <DIGITAL_IO_Init>
 8009050:	4603      	mov	r3, r0
 8009052:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009054:	79fb      	ldrb	r3, [r7, #7]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d104      	bne.n	8009064 <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELEC_HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELEC_HANDBRAKE_IN_D); 
 800905a:	485d      	ldr	r0, [pc, #372]	; (80091d0 <DAVE_Init+0x360>)
 800905c:	f7ff fbb0 	bl	80087c0 <DIGITAL_IO_Init>
 8009060:	4603      	mov	r3, r0
 8009062:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d104      	bne.n	8009074 <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_ANALOG1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_ANALOG1_IN_D); 
 800906a:	485a      	ldr	r0, [pc, #360]	; (80091d4 <DAVE_Init+0x364>)
 800906c:	f7ff fba8 	bl	80087c0 <DIGITAL_IO_Init>
 8009070:	4603      	mov	r3, r0
 8009072:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009074:	79fb      	ldrb	r3, [r7, #7]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d104      	bne.n	8009084 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance INT_ACCEL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INT_ACCEL_IN_D); 
 800907a:	4857      	ldr	r0, [pc, #348]	; (80091d8 <DAVE_Init+0x368>)
 800907c:	f7ff fba0 	bl	80087c0 <DIGITAL_IO_Init>
 8009080:	4603      	mov	r3, r0
 8009082:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009084:	79fb      	ldrb	r3, [r7, #7]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d104      	bne.n	8009094 <DAVE_Init+0x224>
  {
	 /**  Initialization of DIGITAL_IO APP instance CIGARETTE_LIGHTER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CIGARETTE_LIGHTER_PWR_OUT_D); 
 800908a:	4854      	ldr	r0, [pc, #336]	; (80091dc <DAVE_Init+0x36c>)
 800908c:	f7ff fb98 	bl	80087c0 <DIGITAL_IO_Init>
 8009090:	4603      	mov	r3, r0
 8009092:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009094:	79fb      	ldrb	r3, [r7, #7]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d104      	bne.n	80090a4 <DAVE_Init+0x234>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUZZER_EN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUZZER_EN_D); 
 800909a:	4851      	ldr	r0, [pc, #324]	; (80091e0 <DAVE_Init+0x370>)
 800909c:	f7ff fb90 	bl	80087c0 <DIGITAL_IO_Init>
 80090a0:	4603      	mov	r3, r0
 80090a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090a4:	79fb      	ldrb	r3, [r7, #7]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d104      	bne.n	80090b4 <DAVE_Init+0x244>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_RELAY_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_RELAY_PWR_OUT_D); 
 80090aa:	484e      	ldr	r0, [pc, #312]	; (80091e4 <DAVE_Init+0x374>)
 80090ac:	f7ff fb88 	bl	80087c0 <DIGITAL_IO_Init>
 80090b0:	4603      	mov	r3, r0
 80090b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090b4:	79fb      	ldrb	r3, [r7, #7]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d104      	bne.n	80090c4 <DAVE_Init+0x254>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FAN_PWR_OUT_D); 
 80090ba:	484b      	ldr	r0, [pc, #300]	; (80091e8 <DAVE_Init+0x378>)
 80090bc:	f7ff fb80 	bl	80087c0 <DIGITAL_IO_Init>
 80090c0:	4603      	mov	r3, r0
 80090c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090c4:	79fb      	ldrb	r3, [r7, #7]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d104      	bne.n	80090d4 <DAVE_Init+0x264>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_SPEED_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_SPEED_PWM_OUT); 
 80090ca:	4848      	ldr	r0, [pc, #288]	; (80091ec <DAVE_Init+0x37c>)
 80090cc:	f7ff fb78 	bl	80087c0 <DIGITAL_IO_Init>
 80090d0:	4603      	mov	r3, r0
 80090d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090d4:	79fb      	ldrb	r3, [r7, #7]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d104      	bne.n	80090e4 <DAVE_Init+0x274>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_RPM_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_RPM_PWM_OUT); 
 80090da:	4845      	ldr	r0, [pc, #276]	; (80091f0 <DAVE_Init+0x380>)
 80090dc:	f7ff fb70 	bl	80087c0 <DIGITAL_IO_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <DAVE_Init+0x284>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_WINDOW_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_WINDOW_OUT_D); 
 80090ea:	4842      	ldr	r0, [pc, #264]	; (80091f4 <DAVE_Init+0x384>)
 80090ec:	f7ff fb68 	bl	80087c0 <DIGITAL_IO_Init>
 80090f0:	4603      	mov	r3, r0
 80090f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <DAVE_Init+0x294>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_STEERING_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_STEERING_OUT_D); 
 80090fa:	483f      	ldr	r0, [pc, #252]	; (80091f8 <DAVE_Init+0x388>)
 80090fc:	f7ff fb60 	bl	80087c0 <DIGITAL_IO_Init>
 8009100:	4603      	mov	r3, r0
 8009102:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <DAVE_Init+0x2a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LEFT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LEFT_INDICATOR_OUT_D); 
 800910a:	483c      	ldr	r0, [pc, #240]	; (80091fc <DAVE_Init+0x38c>)
 800910c:	f7ff fb58 	bl	80087c0 <DIGITAL_IO_Init>
 8009110:	4603      	mov	r3, r0
 8009112:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <DAVE_Init+0x2b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC3_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC3_CS_OUT); 
 800911a:	4839      	ldr	r0, [pc, #228]	; (8009200 <DAVE_Init+0x390>)
 800911c:	f7ff fb50 	bl	80087c0 <DIGITAL_IO_Init>
 8009120:	4603      	mov	r3, r0
 8009122:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d104      	bne.n	8009134 <DAVE_Init+0x2c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance INPUTS_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INPUTS_3V3_PWR_EN); 
 800912a:	4836      	ldr	r0, [pc, #216]	; (8009204 <DAVE_Init+0x394>)
 800912c:	f7ff fb48 	bl	80087c0 <DIGITAL_IO_Init>
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <DAVE_Init+0x2d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance COMM_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&COMM_3V3_PWR_EN); 
 800913a:	4833      	ldr	r0, [pc, #204]	; (8009208 <DAVE_Init+0x398>)
 800913c:	f7ff fb40 	bl	80087c0 <DIGITAL_IO_Init>
 8009140:	4603      	mov	r3, r0
 8009142:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d162      	bne.n	8009210 <DAVE_Init+0x3a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SENSOR_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SENSOR_3V3_PWR_EN); 
 800914a:	4830      	ldr	r0, [pc, #192]	; (800920c <DAVE_Init+0x39c>)
 800914c:	f7ff fb38 	bl	80087c0 <DIGITAL_IO_Init>
 8009150:	4603      	mov	r3, r0
 8009152:	71fb      	strb	r3, [r7, #7]
 8009154:	e05c      	b.n	8009210 <DAVE_Init+0x3a0>
 8009156:	bf00      	nop
 8009158:	1fff4478 	.word	0x1fff4478
 800915c:	080134d4 	.word	0x080134d4
 8009160:	080134e8 	.word	0x080134e8
 8009164:	080134fc 	.word	0x080134fc
 8009168:	08013510 	.word	0x08013510
 800916c:	08013524 	.word	0x08013524
 8009170:	08013538 	.word	0x08013538
 8009174:	0801354c 	.word	0x0801354c
 8009178:	08013560 	.word	0x08013560
 800917c:	08013574 	.word	0x08013574
 8009180:	08013588 	.word	0x08013588
 8009184:	0801359c 	.word	0x0801359c
 8009188:	080135b0 	.word	0x080135b0
 800918c:	080135c4 	.word	0x080135c4
 8009190:	080135d8 	.word	0x080135d8
 8009194:	080135ec 	.word	0x080135ec
 8009198:	08013600 	.word	0x08013600
 800919c:	08013614 	.word	0x08013614
 80091a0:	08013628 	.word	0x08013628
 80091a4:	0801363c 	.word	0x0801363c
 80091a8:	08013650 	.word	0x08013650
 80091ac:	08013664 	.word	0x08013664
 80091b0:	08013678 	.word	0x08013678
 80091b4:	0801368c 	.word	0x0801368c
 80091b8:	080136a0 	.word	0x080136a0
 80091bc:	080136b4 	.word	0x080136b4
 80091c0:	080136c8 	.word	0x080136c8
 80091c4:	080136dc 	.word	0x080136dc
 80091c8:	080136f0 	.word	0x080136f0
 80091cc:	08013704 	.word	0x08013704
 80091d0:	08013718 	.word	0x08013718
 80091d4:	0801372c 	.word	0x0801372c
 80091d8:	08013740 	.word	0x08013740
 80091dc:	08013754 	.word	0x08013754
 80091e0:	08013768 	.word	0x08013768
 80091e4:	0801377c 	.word	0x0801377c
 80091e8:	08013790 	.word	0x08013790
 80091ec:	080137a4 	.word	0x080137a4
 80091f0:	080137b8 	.word	0x080137b8
 80091f4:	080137cc 	.word	0x080137cc
 80091f8:	080137e0 	.word	0x080137e0
 80091fc:	080137f4 	.word	0x080137f4
 8009200:	08013808 	.word	0x08013808
 8009204:	0801381c 	.word	0x0801381c
 8009208:	08013830 	.word	0x08013830
 800920c:	08013844 	.word	0x08013844
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	2b00      	cmp	r3, #0
 8009214:	d104      	bne.n	8009220 <DAVE_Init+0x3b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CABIN_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CABIN_LIGHT_OUT_D); 
 8009216:	4899      	ldr	r0, [pc, #612]	; (800947c <DAVE_Init+0x60c>)
 8009218:	f7ff fad2 	bl	80087c0 <DIGITAL_IO_Init>
 800921c:	4603      	mov	r3, r0
 800921e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009220:	79fb      	ldrb	r3, [r7, #7]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d104      	bne.n	8009230 <DAVE_Init+0x3c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC2_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC2_CS_OUT); 
 8009226:	4896      	ldr	r0, [pc, #600]	; (8009480 <DAVE_Init+0x610>)
 8009228:	f7ff faca 	bl	80087c0 <DIGITAL_IO_Init>
 800922c:	4603      	mov	r3, r0
 800922e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009230:	79fb      	ldrb	r3, [r7, #7]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d104      	bne.n	8009240 <DAVE_Init+0x3d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC1_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC1_CS_OUT); 
 8009236:	4893      	ldr	r0, [pc, #588]	; (8009484 <DAVE_Init+0x614>)
 8009238:	f7ff fac2 	bl	80087c0 <DIGITAL_IO_Init>
 800923c:	4603      	mov	r3, r0
 800923e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009240:	79fb      	ldrb	r3, [r7, #7]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d104      	bne.n	8009250 <DAVE_Init+0x3e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPEED_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPEED_SENSOR_IN_D); 
 8009246:	4890      	ldr	r0, [pc, #576]	; (8009488 <DAVE_Init+0x618>)
 8009248:	f7ff faba 	bl	80087c0 <DIGITAL_IO_Init>
 800924c:	4603      	mov	r3, r0
 800924e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009250:	79fb      	ldrb	r3, [r7, #7]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d104      	bne.n	8009260 <DAVE_Init+0x3f0>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_IN_D); 
 8009256:	488d      	ldr	r0, [pc, #564]	; (800948c <DAVE_Init+0x61c>)
 8009258:	f7ff fab2 	bl	80087c0 <DIGITAL_IO_Init>
 800925c:	4603      	mov	r3, r0
 800925e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009260:	79fb      	ldrb	r3, [r7, #7]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d104      	bne.n	8009270 <DAVE_Init+0x400>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_OIL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_OIL_IN_D); 
 8009266:	488a      	ldr	r0, [pc, #552]	; (8009490 <DAVE_Init+0x620>)
 8009268:	f7ff faaa 	bl	80087c0 <DIGITAL_IO_Init>
 800926c:	4603      	mov	r3, r0
 800926e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009270:	79fb      	ldrb	r3, [r7, #7]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d104      	bne.n	8009280 <DAVE_Init+0x410>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGING_STARTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGING_STARTED_IN_D); 
 8009276:	4887      	ldr	r0, [pc, #540]	; (8009494 <DAVE_Init+0x624>)
 8009278:	f7ff faa2 	bl	80087c0 <DIGITAL_IO_Init>
 800927c:	4603      	mov	r3, r0
 800927e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009280:	79fb      	ldrb	r3, [r7, #7]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d104      	bne.n	8009290 <DAVE_Init+0x420>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGER_CONNECTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGER_CONNECTED_IN_D); 
 8009286:	4884      	ldr	r0, [pc, #528]	; (8009498 <DAVE_Init+0x628>)
 8009288:	f7ff fa9a 	bl	80087c0 <DIGITAL_IO_Init>
 800928c:	4603      	mov	r3, r0
 800928e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009290:	79fb      	ldrb	r3, [r7, #7]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d104      	bne.n	80092a0 <DAVE_Init+0x430>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS2_IN_D); 
 8009296:	4881      	ldr	r0, [pc, #516]	; (800949c <DAVE_Init+0x62c>)
 8009298:	f7ff fa92 	bl	80087c0 <DIGITAL_IO_Init>
 800929c:	4603      	mov	r3, r0
 800929e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d104      	bne.n	80092b0 <DAVE_Init+0x440>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS1_IN_D); 
 80092a6:	487e      	ldr	r0, [pc, #504]	; (80094a0 <DAVE_Init+0x630>)
 80092a8:	f7ff fa8a 	bl	80087c0 <DIGITAL_IO_Init>
 80092ac:	4603      	mov	r3, r0
 80092ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d104      	bne.n	80092c0 <DAVE_Init+0x450>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACC_PEDAL_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACC_PEDAL_SW_IN_D); 
 80092b6:	487b      	ldr	r0, [pc, #492]	; (80094a4 <DAVE_Init+0x634>)
 80092b8:	f7ff fa82 	bl	80087c0 <DIGITAL_IO_Init>
 80092bc:	4603      	mov	r3, r0
 80092be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092c0:	79fb      	ldrb	r3, [r7, #7]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d104      	bne.n	80092d0 <DAVE_Init+0x460>
  {
	 /**  Initialization of DIGITAL_IO APP instance HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HANDBRAKE_IN_D); 
 80092c6:	4878      	ldr	r0, [pc, #480]	; (80094a8 <DAVE_Init+0x638>)
 80092c8:	f7ff fa7a 	bl	80087c0 <DIGITAL_IO_Init>
 80092cc:	4603      	mov	r3, r0
 80092ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092d0:	79fb      	ldrb	r3, [r7, #7]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <DAVE_Init+0x470>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_SW_IN_D); 
 80092d6:	4875      	ldr	r0, [pc, #468]	; (80094ac <DAVE_Init+0x63c>)
 80092d8:	f7ff fa72 	bl	80087c0 <DIGITAL_IO_Init>
 80092dc:	4603      	mov	r3, r0
 80092de:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092e0:	79fb      	ldrb	r3, [r7, #7]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <DAVE_Init+0x480>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_PWR_OUT_D); 
 80092e6:	4872      	ldr	r0, [pc, #456]	; (80094b0 <DAVE_Init+0x640>)
 80092e8:	f7ff fa6a 	bl	80087c0 <DIGITAL_IO_Init>
 80092ec:	4603      	mov	r3, r0
 80092ee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d104      	bne.n	8009300 <DAVE_Init+0x490>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW1_IN_D); 
 80092f6:	486f      	ldr	r0, [pc, #444]	; (80094b4 <DAVE_Init+0x644>)
 80092f8:	f7ff fa62 	bl	80087c0 <DIGITAL_IO_Init>
 80092fc:	4603      	mov	r3, r0
 80092fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009300:	79fb      	ldrb	r3, [r7, #7]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d104      	bne.n	8009310 <DAVE_Init+0x4a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW2_IN_D); 
 8009306:	486c      	ldr	r0, [pc, #432]	; (80094b8 <DAVE_Init+0x648>)
 8009308:	f7ff fa5a 	bl	80087c0 <DIGITAL_IO_Init>
 800930c:	4603      	mov	r3, r0
 800930e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d104      	bne.n	8009320 <DAVE_Init+0x4b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW3_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW3_IN_D); 
 8009316:	4869      	ldr	r0, [pc, #420]	; (80094bc <DAVE_Init+0x64c>)
 8009318:	f7ff fa52 	bl	80087c0 <DIGITAL_IO_Init>
 800931c:	4603      	mov	r3, r0
 800931e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009320:	79fb      	ldrb	r3, [r7, #7]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d104      	bne.n	8009330 <DAVE_Init+0x4c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW4_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW4_IN_D); 
 8009326:	4866      	ldr	r0, [pc, #408]	; (80094c0 <DAVE_Init+0x650>)
 8009328:	f7ff fa4a 	bl	80087c0 <DIGITAL_IO_Init>
 800932c:	4603      	mov	r3, r0
 800932e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009330:	79fb      	ldrb	r3, [r7, #7]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d104      	bne.n	8009340 <DAVE_Init+0x4d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8009336:	4863      	ldr	r0, [pc, #396]	; (80094c4 <DAVE_Init+0x654>)
 8009338:	f7ff fa42 	bl	80087c0 <DIGITAL_IO_Init>
 800933c:	4603      	mov	r3, r0
 800933e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009340:	79fb      	ldrb	r3, [r7, #7]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d104      	bne.n	8009350 <DAVE_Init+0x4e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 8009346:	4860      	ldr	r0, [pc, #384]	; (80094c8 <DAVE_Init+0x658>)
 8009348:	f7ff fa3a 	bl	80087c0 <DIGITAL_IO_Init>
 800934c:	4603      	mov	r3, r0
 800934e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009350:	79fb      	ldrb	r3, [r7, #7]
 8009352:	2b00      	cmp	r3, #0
 8009354:	d104      	bne.n	8009360 <DAVE_Init+0x4f0>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8009356:	485d      	ldr	r0, [pc, #372]	; (80094cc <DAVE_Init+0x65c>)
 8009358:	f7fe fd26 	bl	8007da8 <I2C_MASTER_Init>
 800935c:	4603      	mov	r3, r0
 800935e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009360:	79fb      	ldrb	r3, [r7, #7]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d104      	bne.n	8009370 <DAVE_Init+0x500>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_1 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_1); 
 8009366:	485a      	ldr	r0, [pc, #360]	; (80094d0 <DAVE_Init+0x660>)
 8009368:	f7fe fd1e 	bl	8007da8 <I2C_MASTER_Init>
 800936c:	4603      	mov	r3, r0
 800936e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d104      	bne.n	8009380 <DAVE_Init+0x510>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8009376:	4857      	ldr	r0, [pc, #348]	; (80094d4 <DAVE_Init+0x664>)
 8009378:	f7ff fcd6 	bl	8008d28 <CAN_NODE_Init>
 800937c:	4603      	mov	r3, r0
 800937e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009380:	79fb      	ldrb	r3, [r7, #7]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d104      	bne.n	8009390 <DAVE_Init+0x520>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1); 
 8009386:	4854      	ldr	r0, [pc, #336]	; (80094d8 <DAVE_Init+0x668>)
 8009388:	f7ff fcce 	bl	8008d28 <CAN_NODE_Init>
 800938c:	4603      	mov	r3, r0
 800938e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009390:	79fb      	ldrb	r3, [r7, #7]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d104      	bne.n	80093a0 <DAVE_Init+0x530>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8009396:	4851      	ldr	r0, [pc, #324]	; (80094dc <DAVE_Init+0x66c>)
 8009398:	f7fc ff6e 	bl	8006278 <TIMER_Init>
 800939c:	4603      	mov	r3, r0
 800939e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093a0:	79fb      	ldrb	r3, [r7, #7]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d104      	bne.n	80093b0 <DAVE_Init+0x540>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
 80093a6:	484e      	ldr	r0, [pc, #312]	; (80094e0 <DAVE_Init+0x670>)
 80093a8:	f7fc fca4 	bl	8005cf4 <WATCHDOG_Init>
 80093ac:	4603      	mov	r3, r0
 80093ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d104      	bne.n	80093c0 <DAVE_Init+0x550>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 80093b6:	484b      	ldr	r0, [pc, #300]	; (80094e4 <DAVE_Init+0x674>)
 80093b8:	f7fc ff5e 	bl	8006278 <TIMER_Init>
 80093bc:	4603      	mov	r3, r0
 80093be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093c0:	79fb      	ldrb	r3, [r7, #7]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d104      	bne.n	80093d0 <DAVE_Init+0x560>
  {
	 /**  Initialization of TIMER APP instance TIMER_2 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_2); 
 80093c6:	4848      	ldr	r0, [pc, #288]	; (80094e8 <DAVE_Init+0x678>)
 80093c8:	f7fc ff56 	bl	8006278 <TIMER_Init>
 80093cc:	4603      	mov	r3, r0
 80093ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d104      	bne.n	80093e0 <DAVE_Init+0x570>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 80093d6:	4845      	ldr	r0, [pc, #276]	; (80094ec <DAVE_Init+0x67c>)
 80093d8:	f7fe fbd0 	bl	8007b7c <INTERRUPT_Init>
 80093dc:	4603      	mov	r3, r0
 80093de:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d104      	bne.n	80093f0 <DAVE_Init+0x580>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80093e6:	4842      	ldr	r0, [pc, #264]	; (80094f0 <DAVE_Init+0x680>)
 80093e8:	f7fc fcee 	bl	8005dc8 <UART_Init>
 80093ec:	4603      	mov	r3, r0
 80093ee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093f0:	79fb      	ldrb	r3, [r7, #7]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d104      	bne.n	8009400 <DAVE_Init+0x590>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_2); 
 80093f6:	483f      	ldr	r0, [pc, #252]	; (80094f4 <DAVE_Init+0x684>)
 80093f8:	f7ff fc96 	bl	8008d28 <CAN_NODE_Init>
 80093fc:	4603      	mov	r3, r0
 80093fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009400:	79fb      	ldrb	r3, [r7, #7]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d104      	bne.n	8009410 <DAVE_Init+0x5a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CTS); 
 8009406:	483c      	ldr	r0, [pc, #240]	; (80094f8 <DAVE_Init+0x688>)
 8009408:	f7ff f9da 	bl	80087c0 <DIGITAL_IO_Init>
 800940c:	4603      	mov	r3, r0
 800940e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009410:	79fb      	ldrb	r3, [r7, #7]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d104      	bne.n	8009420 <DAVE_Init+0x5b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance RTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RTS); 
 8009416:	4839      	ldr	r0, [pc, #228]	; (80094fc <DAVE_Init+0x68c>)
 8009418:	f7ff f9d2 	bl	80087c0 <DIGITAL_IO_Init>
 800941c:	4603      	mov	r3, r0
 800941e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009420:	79fb      	ldrb	r3, [r7, #7]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d104      	bne.n	8009430 <DAVE_Init+0x5c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PWRKEY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PWRKEY); 
 8009426:	4836      	ldr	r0, [pc, #216]	; (8009500 <DAVE_Init+0x690>)
 8009428:	f7ff f9ca 	bl	80087c0 <DIGITAL_IO_Init>
 800942c:	4603      	mov	r3, r0
 800942e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009430:	79fb      	ldrb	r3, [r7, #7]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d104      	bne.n	8009440 <DAVE_Init+0x5d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODULE_4G_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODULE_4G_EN_OUT_D); 
 8009436:	4833      	ldr	r0, [pc, #204]	; (8009504 <DAVE_Init+0x694>)
 8009438:	f7ff f9c2 	bl	80087c0 <DIGITAL_IO_Init>
 800943c:	4603      	mov	r3, r0
 800943e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009440:	79fb      	ldrb	r3, [r7, #7]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d104      	bne.n	8009450 <DAVE_Init+0x5e0>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8009446:	4830      	ldr	r0, [pc, #192]	; (8009508 <DAVE_Init+0x698>)
 8009448:	f7fd fc2a 	bl	8006ca0 <SYSTIMER_Init>
 800944c:	4603      	mov	r3, r0
 800944e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009450:	79fb      	ldrb	r3, [r7, #7]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d104      	bne.n	8009460 <DAVE_Init+0x5f0>
  {
	 /**  Initialization of FATFS APP instance FATFS_0 */
	 init_status = (DAVE_STATUS_t)FATFS_Init(&FATFS_0); 
 8009456:	482d      	ldr	r0, [pc, #180]	; (800950c <DAVE_Init+0x69c>)
 8009458:	f7ff f978 	bl	800874c <FATFS_Init>
 800945c:	4603      	mov	r3, r0
 800945e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d104      	bne.n	8009470 <DAVE_Init+0x600>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1); 
 8009466:	482a      	ldr	r0, [pc, #168]	; (8009510 <DAVE_Init+0x6a0>)
 8009468:	f7fe fb88 	bl	8007b7c <INTERRUPT_Init>
 800946c:	4603      	mov	r3, r0
 800946e:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 8009470:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 8009472:	4618      	mov	r0, r3
 8009474:	3708      	adds	r7, #8
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}
 800947a:	bf00      	nop
 800947c:	08013858 	.word	0x08013858
 8009480:	0801386c 	.word	0x0801386c
 8009484:	08013880 	.word	0x08013880
 8009488:	08013894 	.word	0x08013894
 800948c:	080138a8 	.word	0x080138a8
 8009490:	080138bc 	.word	0x080138bc
 8009494:	080138d0 	.word	0x080138d0
 8009498:	080138e4 	.word	0x080138e4
 800949c:	080138f8 	.word	0x080138f8
 80094a0:	0801390c 	.word	0x0801390c
 80094a4:	08013920 	.word	0x08013920
 80094a8:	08013934 	.word	0x08013934
 80094ac:	08013948 	.word	0x08013948
 80094b0:	0801395c 	.word	0x0801395c
 80094b4:	08013970 	.word	0x08013970
 80094b8:	08013984 	.word	0x08013984
 80094bc:	08013998 	.word	0x08013998
 80094c0:	080139ac 	.word	0x080139ac
 80094c4:	080139c0 	.word	0x080139c0
 80094c8:	080139d4 	.word	0x080139d4
 80094cc:	1ffe8a5c 	.word	0x1ffe8a5c
 80094d0:	1ffe8a68 	.word	0x1ffe8a68
 80094d4:	08013c04 	.word	0x08013c04
 80094d8:	08013dec 	.word	0x08013dec
 80094dc:	1ffe8850 	.word	0x1ffe8850
 80094e0:	1ffe883c 	.word	0x1ffe883c
 80094e4:	1ffe889c 	.word	0x1ffe889c
 80094e8:	1ffe88e0 	.word	0x1ffe88e0
 80094ec:	08013430 	.word	0x08013430
 80094f0:	1ffe8844 	.word	0x1ffe8844
 80094f4:	08013f08 	.word	0x08013f08
 80094f8:	080139e8 	.word	0x080139e8
 80094fc:	080139fc 	.word	0x080139fc
 8009500:	08013a10 	.word	0x08013a10
 8009504:	08013a24 	.word	0x08013a24
 8009508:	1fff4408 	.word	0x1fff4408
 800950c:	1ffe8ab0 	.word	0x1ffe8ab0
 8009510:	08013434 	.word	0x08013434

08009514 <OBDII_CAN_Tx>:
		{0x5E4, {0x00}},
		{0x5E5, {0x00}}
};

void OBDII_CAN_Tx(void)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b084      	sub	sp, #16
 8009518:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_2;
 800951a:	4b49      	ldr	r3, [pc, #292]	; (8009640 <OBDII_CAN_Tx+0x12c>)
 800951c:	60bb      	str	r3, [r7, #8]
	uint8_t *array_data;

/*******************************************bms 0x01******************************************/
	OBDII_CAN[can_0x01].CAN_Data[0] = BMS_SOC; // soc
 800951e:	4b49      	ldr	r3, [pc, #292]	; (8009644 <OBDII_CAN_Tx+0x130>)
 8009520:	781b      	ldrb	r3, [r3, #0]
 8009522:	b2da      	uxtb	r2, r3
 8009524:	4b48      	ldr	r3, [pc, #288]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009526:	711a      	strb	r2, [r3, #4]

	OBDII_CAN[can_0x01].CAN_Data[1] = Bms_maxTemp; // temp;
 8009528:	4b48      	ldr	r3, [pc, #288]	; (800964c <OBDII_CAN_Tx+0x138>)
 800952a:	881b      	ldrh	r3, [r3, #0]
 800952c:	b2da      	uxtb	r2, r3
 800952e:	4b46      	ldr	r3, [pc, #280]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009530:	715a      	strb	r2, [r3, #5]

	//OBDII_CAN[can_0x01].CAN_Data[2];//packcurrent H;
	//OBDII_CAN[can_0x01].CAN_Data[3];//packcurrent L;

	OBDII_CAN[can_0x01].CAN_Data[4] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7]; //packvoltage H
 8009532:	4b47      	ldr	r3, [pc, #284]	; (8009650 <OBDII_CAN_Tx+0x13c>)
 8009534:	7ddb      	ldrb	r3, [r3, #23]
 8009536:	b2da      	uxtb	r2, r3
 8009538:	4b43      	ldr	r3, [pc, #268]	; (8009648 <OBDII_CAN_Tx+0x134>)
 800953a:	721a      	strb	r2, [r3, #8]
	OBDII_CAN[can_0x01].CAN_Data[5] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]; //packvoltage L
 800953c:	4b44      	ldr	r3, [pc, #272]	; (8009650 <OBDII_CAN_Tx+0x13c>)
 800953e:	7d9b      	ldrb	r3, [r3, #22]
 8009540:	b2da      	uxtb	r2, r3
 8009542:	4b41      	ldr	r3, [pc, #260]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009544:	725a      	strb	r2, [r3, #9]

/*******************************************eps 0x02******************************************/


/*******************************************hvac 0x03******************************************/
	 OBDII_CAN[can_0x03].CAN_Data[0] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0]; //TempdegreeC
 8009546:	4b43      	ldr	r3, [pc, #268]	; (8009654 <OBDII_CAN_Tx+0x140>)
 8009548:	7c1b      	ldrb	r3, [r3, #16]
 800954a:	b2da      	uxtb	r2, r3
 800954c:	4b3e      	ldr	r3, [pc, #248]	; (8009648 <OBDII_CAN_Tx+0x134>)
 800954e:	771a      	strb	r2, [r3, #28]
	 OBDII_CAN[can_0x03].CAN_Data[1] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1]; //Pressure
 8009550:	4b40      	ldr	r3, [pc, #256]	; (8009654 <OBDII_CAN_Tx+0x140>)
 8009552:	7c5b      	ldrb	r3, [r3, #17]
 8009554:	b2da      	uxtb	r2, r3
 8009556:	4b3c      	ldr	r3, [pc, #240]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009558:	775a      	strb	r2, [r3, #29]

	 OBDII_CAN[can_0x03].CAN_Data[2] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2]; //1: AC switch on,  0: AC switch off,
 800955a:	4b3e      	ldr	r3, [pc, #248]	; (8009654 <OBDII_CAN_Tx+0x140>)
 800955c:	7c9b      	ldrb	r3, [r3, #18]
 800955e:	b2da      	uxtb	r2, r3
 8009560:	4b39      	ldr	r3, [pc, #228]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009562:	779a      	strb	r2, [r3, #30]

	 OBDII_CAN[can_0x03].CAN_Data[3] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1]; //AC rpm H
 8009564:	4b3b      	ldr	r3, [pc, #236]	; (8009654 <OBDII_CAN_Tx+0x140>)
 8009566:	795b      	ldrb	r3, [r3, #5]
 8009568:	b2da      	uxtb	r2, r3
 800956a:	4b37      	ldr	r3, [pc, #220]	; (8009648 <OBDII_CAN_Tx+0x134>)
 800956c:	77da      	strb	r2, [r3, #31]
	 OBDII_CAN[can_0x03].CAN_Data[4] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[0]; //AC rpm L
 800956e:	4b39      	ldr	r3, [pc, #228]	; (8009654 <OBDII_CAN_Tx+0x140>)
 8009570:	791b      	ldrb	r3, [r3, #4]
 8009572:	b2da      	uxtb	r2, r3
 8009574:	4b34      	ldr	r3, [pc, #208]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009576:	f883 2020 	strb.w	r2, [r3, #32]

	 OBDII_CAN[can_0x03].CAN_Data[5] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3]; //AC ON -> compressor enable bit
 800957a:	4b36      	ldr	r3, [pc, #216]	; (8009654 <OBDII_CAN_Tx+0x140>)
 800957c:	79db      	ldrb	r3, [r3, #7]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	4b31      	ldr	r3, [pc, #196]	; (8009648 <OBDII_CAN_Tx+0x134>)
 8009582:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	 //OBDII_CAN[can_0x04].CAN_Data[3]; //throttle percentage L

	//OBDII_CAN[can_0x04].CAN_Data[4]; //speed H
	 //OBDII_CAN[can_0x04].CAN_Data[5]; //speed L

	 OBDII_CAN[can_0x04].CAN_Data[6] = Mcu_Temp;
 8009586:	4b34      	ldr	r3, [pc, #208]	; (8009658 <OBDII_CAN_Tx+0x144>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	b2da      	uxtb	r2, r3
 800958c:	4b2e      	ldr	r3, [pc, #184]	; (8009648 <OBDII_CAN_Tx+0x134>)
 800958e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 OBDII_CAN[can_0x04].CAN_Data[7] = Motor_Temp;
 8009592:	4b32      	ldr	r3, [pc, #200]	; (800965c <OBDII_CAN_Tx+0x148>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	b2da      	uxtb	r2, r3
 8009598:	4b2b      	ldr	r3, [pc, #172]	; (8009648 <OBDII_CAN_Tx+0x134>)
 800959a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

/*******************************************madhura 0x05******************************************/

	 OBDII_CAN[can_0x05].CAN_Data[0] = obc_madhura[can_0x18FF50E5].CAN_Data[0]; // voltage H
 800959e:	4b30      	ldr	r3, [pc, #192]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095a0:	7c1b      	ldrb	r3, [r3, #16]
 80095a2:	b2da      	uxtb	r2, r3
 80095a4:	4b28      	ldr	r3, [pc, #160]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 OBDII_CAN[can_0x05].CAN_Data[1] = obc_madhura[can_0x18FF50E5].CAN_Data[1]; // voltage L
 80095aa:	4b2d      	ldr	r3, [pc, #180]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095ac:	7c5b      	ldrb	r3, [r3, #17]
 80095ae:	b2da      	uxtb	r2, r3
 80095b0:	4b25      	ldr	r3, [pc, #148]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	 OBDII_CAN[can_0x05].CAN_Data[2] = obc_madhura[can_0x18FF50E5].CAN_Data[2]; // current H
 80095b6:	4b2a      	ldr	r3, [pc, #168]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095b8:	7c9b      	ldrb	r3, [r3, #18]
 80095ba:	b2da      	uxtb	r2, r3
 80095bc:	4b22      	ldr	r3, [pc, #136]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095be:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 OBDII_CAN[can_0x05].CAN_Data[3] = obc_madhura[can_0x18FF50E5].CAN_Data[3]; // current L
 80095c2:	4b27      	ldr	r3, [pc, #156]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095c4:	7cdb      	ldrb	r3, [r3, #19]
 80095c6:	b2da      	uxtb	r2, r3
 80095c8:	4b1f      	ldr	r3, [pc, #124]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095ca:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
 80095ce:	4b24      	ldr	r3, [pc, #144]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095d0:	7d1b      	ldrb	r3, [r3, #20]
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	4b1c      	ldr	r3, [pc, #112]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode
 80095da:	4b21      	ldr	r3, [pc, #132]	; (8009660 <OBDII_CAN_Tx+0x14c>)
 80095dc:	7d5b      	ldrb	r3, [r3, #21]
 80095de:	b2da      	uxtb	r2, r3
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39


	 for(int i = 0; i < can_OBD_max; i++)
 80095e6:	2300      	movs	r3, #0
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	e023      	b.n	8009634 <OBDII_CAN_Tx+0x120>
	 {
		 array_data = &OBDII_CAN[i].CAN_Data[0];
 80095ec:	68fa      	ldr	r2, [r7, #12]
 80095ee:	4613      	mov	r3, r2
 80095f0:	005b      	lsls	r3, r3, #1
 80095f2:	4413      	add	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4a14      	ldr	r2, [pc, #80]	; (8009648 <OBDII_CAN_Tx+0x134>)
 80095f8:	4413      	add	r3, r2
 80095fa:	3304      	adds	r3, #4
 80095fc:	607b      	str	r3, [r7, #4]

		 //  update data for the MO to transmit
		 status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[i],array_data);
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3302      	adds	r3, #2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4413      	add	r3, r2
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	4618      	mov	r0, r3
 800960c:	6879      	ldr	r1, [r7, #4]
 800960e:	f7ff fb5b 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 8009612:	4603      	mov	r3, r0
 8009614:	70fb      	strb	r3, [r7, #3]

		 if (status == CAN_NODE_STATUS_SUCCESS)
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d108      	bne.n	800962e <OBDII_CAN_Tx+0x11a>
		 {
		    // message object data updated.

		    // transmit the data
		    CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[i]);
 800961c:	68ba      	ldr	r2, [r7, #8]
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3302      	adds	r3, #2
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	4618      	mov	r0, r3
 800962a:	f7ff fb29 	bl	8008c80 <CAN_NODE_MO_Transmit>

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode


	 for(int i = 0; i < can_OBD_max; i++)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	3301      	adds	r3, #1
 8009632:	60fb      	str	r3, [r7, #12]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2b04      	cmp	r3, #4
 8009638:	ddd8      	ble.n	80095ec <OBDII_CAN_Tx+0xd8>
		 else
		 {
		     // message object failed to update.
		 }
	 }
}
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}
 8009640:	08013f08 	.word	0x08013f08
 8009644:	1fff47fc 	.word	0x1fff47fc
 8009648:	1ffe9218 	.word	0x1ffe9218
 800964c:	1fff47f8 	.word	0x1fff47f8
 8009650:	1ffe9254 	.word	0x1ffe9254
 8009654:	1ffe93a4 	.word	0x1ffe93a4
 8009658:	1fff48b4 	.word	0x1fff48b4
 800965c:	1fff480c 	.word	0x1fff480c
 8009660:	1ffe94c4 	.word	0x1ffe94c4

08009664 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
 800966c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	683a      	ldr	r2, [r7, #0]
 8009674:	61da      	str	r2, [r3, #28]
}
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <CAN_Rx_0x1808A7F3>:
		{0X180BA7F3, {0x00}}
};


void CAN_Rx_0x1808A7F3(void)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009686:	4b1c      	ldr	r3, [pc, #112]	; (80096f8 <CAN_Rx_0x1808A7F3+0x78>)
 8009688:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800968a:	230c      	movs	r3, #12
 800968c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800968e:	7afb      	ldrb	r3, [r7, #11]
 8009690:	68fa      	ldr	r2, [r7, #12]
 8009692:	3302      	adds	r3, #2
 8009694:	009b      	lsls	r3, r3, #2
 8009696:	4413      	add	r3, r2
 8009698:	685b      	ldr	r3, [r3, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800969e:	7afb      	ldrb	r3, [r7, #11]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	3302      	adds	r3, #2
 80096a4:	009b      	lsls	r3, r3, #2
 80096a6:	4413      	add	r3, r2
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	4618      	mov	r0, r3
 80096ac:	f7ff fb2c 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 80096b0:	4603      	mov	r3, r0
 80096b2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80096b4:	78fb      	ldrb	r3, [r7, #3]
 80096b6:	f003 0301 	and.w	r3, r3, #1
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d016      	beq.n	80096ec <CAN_Rx_0x1808A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	2101      	movs	r1, #1
 80096c2:	f7ff ffcf 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80096c6:	7afb      	ldrb	r3, [r7, #11]
 80096c8:	68fa      	ldr	r2, [r7, #12]
 80096ca:	3302      	adds	r3, #2
 80096cc:	009b      	lsls	r3, r3, #2
 80096ce:	4413      	add	r3, r2
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	4618      	mov	r0, r3
 80096d4:	f7ff fae6 	bl	8008ca4 <CAN_NODE_MO_Receive>
 80096d8:	4603      	mov	r3, r0
 80096da:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80096dc:	78bb      	ldrb	r3, [r7, #2]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d102      	bne.n	80096e8 <CAN_Rx_0x1808A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80096e2:	2301      	movs	r3, #1
 80096e4:	707b      	strb	r3, [r7, #1]
 80096e6:	e001      	b.n	80096ec <CAN_Rx_0x1808A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80096e8:	2300      	movs	r3, #0
 80096ea:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1808A7F3();
 80096ec:	f000 fbac 	bl	8009e48 <process_Rx_CAN_0X1808A7F3>
}
 80096f0:	3710      	adds	r7, #16
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}
 80096f6:	bf00      	nop
 80096f8:	08013c04 	.word	0x08013c04

080096fc <CAN_Rx_0x180AA7F3>:


void CAN_Rx_0x180AA7F3(void)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009702:	4b1c      	ldr	r3, [pc, #112]	; (8009774 <CAN_Rx_0x180AA7F3+0x78>)
 8009704:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009706:	230d      	movs	r3, #13
 8009708:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800970a:	7afb      	ldrb	r3, [r7, #11]
 800970c:	68fa      	ldr	r2, [r7, #12]
 800970e:	3302      	adds	r3, #2
 8009710:	009b      	lsls	r3, r3, #2
 8009712:	4413      	add	r3, r2
 8009714:	685b      	ldr	r3, [r3, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	3302      	adds	r3, #2
 8009720:	009b      	lsls	r3, r3, #2
 8009722:	4413      	add	r3, r2
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	4618      	mov	r0, r3
 8009728:	f7ff faee 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800972c:	4603      	mov	r3, r0
 800972e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009730:	78fb      	ldrb	r3, [r7, #3]
 8009732:	f003 0301 	and.w	r3, r3, #1
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <CAN_Rx_0x180AA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	2101      	movs	r1, #1
 800973e:	f7ff ff91 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009742:	7afb      	ldrb	r3, [r7, #11]
 8009744:	68fa      	ldr	r2, [r7, #12]
 8009746:	3302      	adds	r3, #2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4413      	add	r3, r2
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	4618      	mov	r0, r3
 8009750:	f7ff faa8 	bl	8008ca4 <CAN_NODE_MO_Receive>
 8009754:	4603      	mov	r3, r0
 8009756:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009758:	78bb      	ldrb	r3, [r7, #2]
 800975a:	2b00      	cmp	r3, #0
 800975c:	d102      	bne.n	8009764 <CAN_Rx_0x180AA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800975e:	2301      	movs	r3, #1
 8009760:	707b      	strb	r3, [r7, #1]
 8009762:	e001      	b.n	8009768 <CAN_Rx_0x180AA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009764:	2300      	movs	r3, #0
 8009766:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180AA7F3();
 8009768:	f000 fb88 	bl	8009e7c <process_Rx_CAN_0X180AA7F3>
}
 800976c:	3710      	adds	r7, #16
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
 8009772:	bf00      	nop
 8009774:	08013c04 	.word	0x08013c04

08009778 <CAN_Rx_0x180BA7F3>:


void CAN_Rx_0x180BA7F3(void)
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800977e:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <CAN_Rx_0x180BA7F3+0x78>)
 8009780:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009782:	230e      	movs	r3, #14
 8009784:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009786:	7afb      	ldrb	r3, [r7, #11]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	3302      	adds	r3, #2
 800978c:	009b      	lsls	r3, r3, #2
 800978e:	4413      	add	r3, r2
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009796:	7afb      	ldrb	r3, [r7, #11]
 8009798:	68fa      	ldr	r2, [r7, #12]
 800979a:	3302      	adds	r3, #2
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	4413      	add	r3, r2
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff fab0 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 80097a8:	4603      	mov	r3, r0
 80097aa:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80097ac:	78fb      	ldrb	r3, [r7, #3]
 80097ae:	f003 0301 	and.w	r3, r3, #1
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d016      	beq.n	80097e4 <CAN_Rx_0x180BA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80097b6:	6878      	ldr	r0, [r7, #4]
 80097b8:	2101      	movs	r1, #1
 80097ba:	f7ff ff53 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80097be:	7afb      	ldrb	r3, [r7, #11]
 80097c0:	68fa      	ldr	r2, [r7, #12]
 80097c2:	3302      	adds	r3, #2
 80097c4:	009b      	lsls	r3, r3, #2
 80097c6:	4413      	add	r3, r2
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	4618      	mov	r0, r3
 80097cc:	f7ff fa6a 	bl	8008ca4 <CAN_NODE_MO_Receive>
 80097d0:	4603      	mov	r3, r0
 80097d2:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80097d4:	78bb      	ldrb	r3, [r7, #2]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <CAN_Rx_0x180BA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80097da:	2301      	movs	r3, #1
 80097dc:	707b      	strb	r3, [r7, #1]
 80097de:	e001      	b.n	80097e4 <CAN_Rx_0x180BA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80097e0:	2300      	movs	r3, #0
 80097e2:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180BA7F3();
 80097e4:	f000 fb9a 	bl	8009f1c <process_Rx_CAN_0X180BA7F3>
}
 80097e8:	3710      	adds	r7, #16
 80097ea:	46bd      	mov	sp, r7
 80097ec:	bd80      	pop	{r7, pc}
 80097ee:	bf00      	nop
 80097f0:	08013c04 	.word	0x08013c04

080097f4 <CAN_Rx_0x180EA7F3>:


void CAN_Rx_0x180EA7F3(void)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80097fa:	4b1c      	ldr	r3, [pc, #112]	; (800986c <CAN_Rx_0x180EA7F3+0x78>)
 80097fc:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80097fe:	2314      	movs	r3, #20
 8009800:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009802:	7afb      	ldrb	r3, [r7, #11]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	3302      	adds	r3, #2
 8009808:	009b      	lsls	r3, r3, #2
 800980a:	4413      	add	r3, r2
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009812:	7afb      	ldrb	r3, [r7, #11]
 8009814:	68fa      	ldr	r2, [r7, #12]
 8009816:	3302      	adds	r3, #2
 8009818:	009b      	lsls	r3, r3, #2
 800981a:	4413      	add	r3, r2
 800981c:	685b      	ldr	r3, [r3, #4]
 800981e:	4618      	mov	r0, r3
 8009820:	f7ff fa72 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 8009824:	4603      	mov	r3, r0
 8009826:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009828:	78fb      	ldrb	r3, [r7, #3]
 800982a:	f003 0301 	and.w	r3, r3, #1
 800982e:	2b00      	cmp	r3, #0
 8009830:	d016      	beq.n	8009860 <CAN_Rx_0x180EA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	2101      	movs	r1, #1
 8009836:	f7ff ff15 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800983a:	7afb      	ldrb	r3, [r7, #11]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	3302      	adds	r3, #2
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	4618      	mov	r0, r3
 8009848:	f7ff fa2c 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800984c:	4603      	mov	r3, r0
 800984e:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009850:	78bb      	ldrb	r3, [r7, #2]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d102      	bne.n	800985c <CAN_Rx_0x180EA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009856:	2301      	movs	r3, #1
 8009858:	707b      	strb	r3, [r7, #1]
 800985a:	e001      	b.n	8009860 <CAN_Rx_0x180EA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180EA7F3();
 8009860:	f000 f968 	bl	8009b34 <process_Rx_CAN_0X180EA7F3>
}
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	08013c04 	.word	0x08013c04

08009870 <CAN_Rx_0x180FA7F3>:

void CAN_Rx_0x180FA7F3(void)
{
 8009870:	b580      	push	{r7, lr}
 8009872:	b084      	sub	sp, #16
 8009874:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009876:	4b1c      	ldr	r3, [pc, #112]	; (80098e8 <CAN_Rx_0x180FA7F3+0x78>)
 8009878:	60fb      	str	r3, [r7, #12]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800987a:	2315      	movs	r3, #21
 800987c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800987e:	7afb      	ldrb	r3, [r7, #11]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	3302      	adds	r3, #2
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	4413      	add	r3, r2
 8009888:	685b      	ldr	r3, [r3, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800988e:	7afb      	ldrb	r3, [r7, #11]
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	3302      	adds	r3, #2
 8009894:	009b      	lsls	r3, r3, #2
 8009896:	4413      	add	r3, r2
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	4618      	mov	r0, r3
 800989c:	f7ff fa34 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 80098a0:	4603      	mov	r3, r0
 80098a2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80098a4:	78fb      	ldrb	r3, [r7, #3]
 80098a6:	f003 0301 	and.w	r3, r3, #1
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d016      	beq.n	80098dc <CAN_Rx_0x180FA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	2101      	movs	r1, #1
 80098b2:	f7ff fed7 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80098b6:	7afb      	ldrb	r3, [r7, #11]
 80098b8:	68fa      	ldr	r2, [r7, #12]
 80098ba:	3302      	adds	r3, #2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	4618      	mov	r0, r3
 80098c4:	f7ff f9ee 	bl	8008ca4 <CAN_NODE_MO_Receive>
 80098c8:	4603      	mov	r3, r0
 80098ca:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80098cc:	78bb      	ldrb	r3, [r7, #2]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d102      	bne.n	80098d8 <CAN_Rx_0x180FA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80098d2:	2301      	movs	r3, #1
 80098d4:	707b      	strb	r3, [r7, #1]
 80098d6:	e001      	b.n	80098dc <CAN_Rx_0x180FA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180FA7F3();
 80098dc:	f000 fa2e 	bl	8009d3c <process_Rx_CAN_0X180FA7F3>
}
 80098e0:	3710      	adds	r7, #16
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	08013c04 	.word	0x08013c04

080098ec <CAN_Rx_0x1810A7F3>:

void CAN_Rx_0x1810A7F3(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80098f2:	4b1c      	ldr	r3, [pc, #112]	; (8009964 <CAN_Rx_0x1810A7F3+0x78>)
 80098f4:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80098f6:	2316      	movs	r3, #22
 80098f8:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80098fa:	7afb      	ldrb	r3, [r7, #11]
 80098fc:	68fa      	ldr	r2, [r7, #12]
 80098fe:	3302      	adds	r3, #2
 8009900:	009b      	lsls	r3, r3, #2
 8009902:	4413      	add	r3, r2
 8009904:	685b      	ldr	r3, [r3, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800990a:	7afb      	ldrb	r3, [r7, #11]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	3302      	adds	r3, #2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	4618      	mov	r0, r3
 8009918:	f7ff f9f6 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800991c:	4603      	mov	r3, r0
 800991e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d016      	beq.n	8009958 <CAN_Rx_0x1810A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	2101      	movs	r1, #1
 800992e:	f7ff fe99 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009932:	7afb      	ldrb	r3, [r7, #11]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	3302      	adds	r3, #2
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	4413      	add	r3, r2
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	4618      	mov	r0, r3
 8009940:	f7ff f9b0 	bl	8008ca4 <CAN_NODE_MO_Receive>
 8009944:	4603      	mov	r3, r0
 8009946:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009948:	78bb      	ldrb	r3, [r7, #2]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d102      	bne.n	8009954 <CAN_Rx_0x1810A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800994e:	2301      	movs	r3, #1
 8009950:	707b      	strb	r3, [r7, #1]
 8009952:	e001      	b.n	8009958 <CAN_Rx_0x1810A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009954:	2300      	movs	r3, #0
 8009956:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1810A7F3();
 8009958:	f000 f8c0 	bl	8009adc <process_Rx_CAN_0X1810A7F3>
}
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}
 8009962:	bf00      	nop
 8009964:	08013c04 	.word	0x08013c04

08009968 <CAN_Rx_0x1814A7F3>:
	}
	process_Rx_CAN_0X1813A7F3();
}

void CAN_Rx_0x1814A7F3(void)
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b084      	sub	sp, #16
 800996c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800996e:	4b1c      	ldr	r3, [pc, #112]	; (80099e0 <CAN_Rx_0x1814A7F3+0x78>)
 8009970:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009972:	2314      	movs	r3, #20
 8009974:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009976:	7afb      	ldrb	r3, [r7, #11]
 8009978:	68fa      	ldr	r2, [r7, #12]
 800997a:	3302      	adds	r3, #2
 800997c:	009b      	lsls	r3, r3, #2
 800997e:	4413      	add	r3, r2
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009986:	7afb      	ldrb	r3, [r7, #11]
 8009988:	68fa      	ldr	r2, [r7, #12]
 800998a:	3302      	adds	r3, #2
 800998c:	009b      	lsls	r3, r3, #2
 800998e:	4413      	add	r3, r2
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff f9b8 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 8009998:	4603      	mov	r3, r0
 800999a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800999c:	78fb      	ldrb	r3, [r7, #3]
 800999e:	f003 0301 	and.w	r3, r3, #1
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d016      	beq.n	80099d4 <CAN_Rx_0x1814A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80099a6:	6878      	ldr	r0, [r7, #4]
 80099a8:	2101      	movs	r1, #1
 80099aa:	f7ff fe5b 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80099ae:	7afb      	ldrb	r3, [r7, #11]
 80099b0:	68fa      	ldr	r2, [r7, #12]
 80099b2:	3302      	adds	r3, #2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	4413      	add	r3, r2
 80099b8:	685b      	ldr	r3, [r3, #4]
 80099ba:	4618      	mov	r0, r3
 80099bc:	f7ff f972 	bl	8008ca4 <CAN_NODE_MO_Receive>
 80099c0:	4603      	mov	r3, r0
 80099c2:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80099c4:	78bb      	ldrb	r3, [r7, #2]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d102      	bne.n	80099d0 <CAN_Rx_0x1814A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80099ca:	2301      	movs	r3, #1
 80099cc:	707b      	strb	r3, [r7, #1]
 80099ce:	e001      	b.n	80099d4 <CAN_Rx_0x1814A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80099d0:	2300      	movs	r3, #0
 80099d2:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1814A7F3();
 80099d4:	f000 fa04 	bl	8009de0 <process_Rx_CAN_0X1814A7F3>
}
 80099d8:	3710      	adds	r7, #16
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
 80099de:	bf00      	nop
 80099e0:	08013c04 	.word	0x08013c04

080099e4 <CAN_Rx_0x1815A7F3>:

void CAN_Rx_0x1815A7F3(void)
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80099ea:	4b1c      	ldr	r3, [pc, #112]	; (8009a5c <CAN_Rx_0x1815A7F3+0x78>)
 80099ec:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80099ee:	2314      	movs	r3, #20
 80099f0:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80099f2:	7afb      	ldrb	r3, [r7, #11]
 80099f4:	68fa      	ldr	r2, [r7, #12]
 80099f6:	3302      	adds	r3, #2
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	4413      	add	r3, r2
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	68fa      	ldr	r2, [r7, #12]
 8009a06:	3302      	adds	r3, #2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	4618      	mov	r0, r3
 8009a10:	f7ff f97a 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 8009a14:	4603      	mov	r3, r0
 8009a16:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	f003 0301 	and.w	r3, r3, #1
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d016      	beq.n	8009a50 <CAN_Rx_0x1815A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	2101      	movs	r1, #1
 8009a26:	f7ff fe1d 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009a2a:	7afb      	ldrb	r3, [r7, #11]
 8009a2c:	68fa      	ldr	r2, [r7, #12]
 8009a2e:	3302      	adds	r3, #2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	4618      	mov	r0, r3
 8009a38:	f7ff f934 	bl	8008ca4 <CAN_NODE_MO_Receive>
 8009a3c:	4603      	mov	r3, r0
 8009a3e:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009a40:	78bb      	ldrb	r3, [r7, #2]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d102      	bne.n	8009a4c <CAN_Rx_0x1815A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009a46:	2301      	movs	r3, #1
 8009a48:	707b      	strb	r3, [r7, #1]
 8009a4a:	e001      	b.n	8009a50 <CAN_Rx_0x1815A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1815A7F3();
 8009a50:	f000 f9e0 	bl	8009e14 <process_Rx_CAN_0X1815A7F3>
}
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	08013c04 	.word	0x08013c04

08009a60 <CAN_Rx_0x180CA7F3>:


void CAN_Rx_0x180CA7F3(void)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b084      	sub	sp, #16
 8009a64:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009a66:	4b1c      	ldr	r3, [pc, #112]	; (8009ad8 <CAN_Rx_0x180CA7F3+0x78>)
 8009a68:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009a6a:	2318      	movs	r3, #24
 8009a6c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009a6e:	7afb      	ldrb	r3, [r7, #11]
 8009a70:	68fa      	ldr	r2, [r7, #12]
 8009a72:	3302      	adds	r3, #2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009a7e:	7afb      	ldrb	r3, [r7, #11]
 8009a80:	68fa      	ldr	r2, [r7, #12]
 8009a82:	3302      	adds	r3, #2
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	f7ff f93c 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 8009a90:	4603      	mov	r3, r0
 8009a92:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009a94:	78fb      	ldrb	r3, [r7, #3]
 8009a96:	f003 0301 	and.w	r3, r3, #1
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d016      	beq.n	8009acc <CAN_Rx_0x180CA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	2101      	movs	r1, #1
 8009aa2:	f7ff fddf 	bl	8009664 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009aa6:	7afb      	ldrb	r3, [r7, #11]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	3302      	adds	r3, #2
 8009aac:	009b      	lsls	r3, r3, #2
 8009aae:	4413      	add	r3, r2
 8009ab0:	685b      	ldr	r3, [r3, #4]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f7ff f8f6 	bl	8008ca4 <CAN_NODE_MO_Receive>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009abc:	78bb      	ldrb	r3, [r7, #2]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d102      	bne.n	8009ac8 <CAN_Rx_0x180CA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009ac2:	2301      	movs	r3, #1
 8009ac4:	707b      	strb	r3, [r7, #1]
 8009ac6:	e001      	b.n	8009acc <CAN_Rx_0x180CA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180CA7F3();
 8009acc:	f000 fa7e 	bl	8009fcc <process_Rx_CAN_0X180CA7F3>
}
 8009ad0:	3710      	adds	r7, #16
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
 8009ad6:	bf00      	nop
 8009ad8:	08013c04 	.word	0x08013c04

08009adc <process_Rx_CAN_0X1810A7F3>:


void process_Rx_CAN_0X1810A7F3(void)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ae2:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <process_Rx_CAN_0X1810A7F3+0x4c>)
 8009ae4:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009ae6:	2316      	movs	r3, #22
 8009ae8:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1810A7F3].CAN_Data[0];
 8009aea:	4b10      	ldr	r3, [pc, #64]	; (8009b2c <process_Rx_CAN_0X1810A7F3+0x50>)
 8009aec:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	3302      	adds	r3, #2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	6879      	ldr	r1, [r7, #4]
 8009afe:	f000 ff9f 	bl	800aa40 <CAN_NODE_MO_ReadData>

	//charging_started = ((tempData[0]) & 2);

	charge_complete = 0x00;
 8009b02:	4b0b      	ldr	r3, [pc, #44]	; (8009b30 <process_Rx_CAN_0X1810A7F3+0x54>)
 8009b04:	2200      	movs	r2, #0
 8009b06:	701a      	strb	r2, [r3, #0]
	if(((tempData[6] >> 4) & 0x01))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3306      	adds	r3, #6
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	091b      	lsrs	r3, r3, #4
 8009b10:	b2db      	uxtb	r3, r3
 8009b12:	f003 0301 	and.w	r3, r3, #1
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d002      	beq.n	8009b20 <process_Rx_CAN_0X1810A7F3+0x44>
		charge_complete = 0x10;
 8009b1a:	4b05      	ldr	r3, [pc, #20]	; (8009b30 <process_Rx_CAN_0X1810A7F3+0x54>)
 8009b1c:	2210      	movs	r2, #16
 8009b1e:	701a      	strb	r2, [r3, #0]
}
 8009b20:	3710      	adds	r7, #16
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	08013c04 	.word	0x08013c04
 8009b2c:	1ffe9270 	.word	0x1ffe9270
 8009b30:	1fff4859 	.word	0x1fff4859

08009b34 <process_Rx_CAN_0X180EA7F3>:

void process_Rx_CAN_0X180EA7F3(void)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
	int8_t *tempData, mo_index;
	static unsigned int charge_count = 0, c4;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009b3a:	4b70      	ldr	r3, [pc, #448]	; (8009cfc <process_Rx_CAN_0X180EA7F3+0x1c8>)
 8009b3c:	617b      	str	r3, [r7, #20]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009b3e:	2314      	movs	r3, #20
 8009b40:	74fb      	strb	r3, [r7, #19]

	tempData = &CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0];
 8009b42:	4b6f      	ldr	r3, [pc, #444]	; (8009d00 <process_Rx_CAN_0X180EA7F3+0x1cc>)
 8009b44:	60fb      	str	r3, [r7, #12]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009b46:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009b4a:	697a      	ldr	r2, [r7, #20]
 8009b4c:	3302      	adds	r3, #2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	685b      	ldr	r3, [r3, #4]
 8009b54:	4618      	mov	r0, r3
 8009b56:	68f9      	ldr	r1, [r7, #12]
 8009b58:	f000 ff72 	bl	800aa40 <CAN_NODE_MO_ReadData>

	ChargeCurrentLimit = ((uint16_t)(((uint16_t)tempData[3] << 8) | (uint8_t)tempData[2]))/10;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	3303      	adds	r3, #3
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	b25b      	sxtb	r3, r3
 8009b64:	b29b      	uxth	r3, r3
 8009b66:	021b      	lsls	r3, r3, #8
 8009b68:	b29a      	uxth	r2, r3
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	3302      	adds	r3, #2
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	b2db      	uxtb	r3, r3
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	4313      	orrs	r3, r2
 8009b76:	b29b      	uxth	r3, r3
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	4a62      	ldr	r2, [pc, #392]	; (8009d04 <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b80:	08db      	lsrs	r3, r3, #3
 8009b82:	b29a      	uxth	r2, r3
 8009b84:	4b60      	ldr	r3, [pc, #384]	; (8009d08 <process_Rx_CAN_0X180EA7F3+0x1d4>)
 8009b86:	801a      	strh	r2, [r3, #0]
	DischargeCurrentLimit = ((int)(((int)tempData[5] << 8) | (int)tempData[4]))/10;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	3305      	adds	r3, #5
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	b25b      	sxtb	r3, r3
 8009b90:	021a      	lsls	r2, r3, #8
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	3304      	adds	r3, #4
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	b25b      	sxtb	r3, r3
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	4a5b      	ldr	r2, [pc, #364]	; (8009d0c <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009b9e:	fb82 1203 	smull	r1, r2, r2, r3
 8009ba2:	1092      	asrs	r2, r2, #2
 8009ba4:	17db      	asrs	r3, r3, #31
 8009ba6:	1ad3      	subs	r3, r2, r3
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	4b59      	ldr	r3, [pc, #356]	; (8009d10 <process_Rx_CAN_0X180EA7F3+0x1dc>)
 8009bac:	801a      	strh	r2, [r3, #0]
	RegenerativeCurrentLimit = ((uint16_t)(((uint16_t)tempData[7] << 8) | (uint8_t)tempData[6]))/10;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	3307      	adds	r3, #7
 8009bb2:	781b      	ldrb	r3, [r3, #0]
 8009bb4:	b25b      	sxtb	r3, r3
 8009bb6:	b29b      	uxth	r3, r3
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	b29a      	uxth	r2, r3
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3306      	adds	r3, #6
 8009bc0:	781b      	ldrb	r3, [r3, #0]
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	b29b      	uxth	r3, r3
 8009bcc:	4a4d      	ldr	r2, [pc, #308]	; (8009d04 <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009bce:	fba2 2303 	umull	r2, r3, r2, r3
 8009bd2:	08db      	lsrs	r3, r3, #3
 8009bd4:	b29a      	uxth	r2, r3
 8009bd6:	4b4f      	ldr	r3, [pc, #316]	; (8009d14 <process_Rx_CAN_0X180EA7F3+0x1e0>)
 8009bd8:	801a      	strh	r2, [r3, #0]
//	int d =((uint16_t)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
	PackCurrent =  ((int)(((int)tempData[1] << 8) | (int8_t)tempData[0]))/10;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	3301      	adds	r3, #1
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b25b      	sxtb	r3, r3
 8009be2:	021a      	lsls	r2, r3, #8
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	b25b      	sxtb	r3, r3
 8009bea:	4313      	orrs	r3, r2
 8009bec:	4a47      	ldr	r2, [pc, #284]	; (8009d0c <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009bee:	fb82 1203 	smull	r1, r2, r2, r3
 8009bf2:	1092      	asrs	r2, r2, #2
 8009bf4:	17db      	asrs	r3, r3, #31
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	4a47      	ldr	r2, [pc, #284]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009bfa:	6013      	str	r3, [r2, #0]

	static int c = 0;// hv_count = 0;
	if((PackCurrent > 1))
 8009bfc:	4b46      	ldr	r3, [pc, #280]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	2b01      	cmp	r3, #1
 8009c02:	dd37      	ble.n	8009c74 <process_Rx_CAN_0X180EA7F3+0x140>
	{
		if(charge_count++ > 20)
 8009c04:	4b45      	ldr	r3, [pc, #276]	; (8009d1c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	1c5a      	adds	r2, r3, #1
 8009c0a:	4944      	ldr	r1, [pc, #272]	; (8009d1c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009c0c:	600a      	str	r2, [r1, #0]
 8009c0e:	2b14      	cmp	r3, #20
 8009c10:	d905      	bls.n	8009c1e <process_Rx_CAN_0X180EA7F3+0xea>
		{
			charging_started = 1;
 8009c12:	4b43      	ldr	r3, [pc, #268]	; (8009d20 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009c14:	2201      	movs	r2, #1
 8009c16:	701a      	strb	r2, [r3, #0]
			charge_count = 0;
 8009c18:	4b40      	ldr	r3, [pc, #256]	; (8009d1c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	601a      	str	r2, [r3, #0]
		}

		if(Regenration_flag || RPM)
 8009c1e:	4b41      	ldr	r3, [pc, #260]	; (8009d24 <process_Rx_CAN_0X180EA7F3+0x1f0>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d103      	bne.n	8009c2e <process_Rx_CAN_0X180EA7F3+0xfa>
 8009c26:	4b40      	ldr	r3, [pc, #256]	; (8009d28 <process_Rx_CAN_0X180EA7F3+0x1f4>)
 8009c28:	881b      	ldrh	r3, [r3, #0]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d01e      	beq.n	8009c6c <process_Rx_CAN_0X180EA7F3+0x138>
		{

			//HvBatteryPower = 10 * 58;PackVoltage;
			charge_count = charging_started = 0;
 8009c2e:	4b3c      	ldr	r3, [pc, #240]	; (8009d20 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	701a      	strb	r2, [r3, #0]
 8009c34:	4b39      	ldr	r3, [pc, #228]	; (8009d1c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	601a      	str	r2, [r3, #0]
			HvBatteryPower = PackCurrent;
 8009c3a:	4b37      	ldr	r3, [pc, #220]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a3b      	ldr	r2, [pc, #236]	; (8009d2c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009c40:	6013      	str	r3, [r2, #0]
			hv_count = 1;
 8009c42:	4b3b      	ldr	r3, [pc, #236]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009c44:	2201      	movs	r2, #1
 8009c46:	801a      	strh	r2, [r3, #0]
			if(PackCurrent > c)
 8009c48:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	4b39      	ldr	r3, [pc, #228]	; (8009d34 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	dd0b      	ble.n	8009c6c <process_Rx_CAN_0X180EA7F3+0x138>
				{
				if((hv_count++ < 2))
 8009c54:	4b36      	ldr	r3, [pc, #216]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009c56:	881b      	ldrh	r3, [r3, #0]
 8009c58:	1c5a      	adds	r2, r3, #1
 8009c5a:	b291      	uxth	r1, r2
 8009c5c:	4a34      	ldr	r2, [pc, #208]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009c5e:	8011      	strh	r1, [r2, #0]
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d803      	bhi.n	8009c6c <process_Rx_CAN_0X180EA7F3+0x138>
					c = PackCurrent;
 8009c64:	4b2c      	ldr	r3, [pc, #176]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	4a32      	ldr	r2, [pc, #200]	; (8009d34 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009c6a:	6013      	str	r3, [r2, #0]
				else if(PackCurrent < HvBatteryPower)
				{
					//HvBatteryPower = c * 58;PackVoltage;
				}
		}
		c4 = 0;
 8009c6c:	4b32      	ldr	r3, [pc, #200]	; (8009d38 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009c6e:	2200      	movs	r2, #0
 8009c70:	601a      	str	r2, [r3, #0]
 8009c72:	e010      	b.n	8009c96 <process_Rx_CAN_0X180EA7F3+0x162>

		//charge_count++;
	}
	else if((PackCurrent <= 0))
 8009c74:	4b28      	ldr	r3, [pc, #160]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc0c      	bgt.n	8009c96 <process_Rx_CAN_0X180EA7F3+0x162>
	{
		charge_count = charging_started = 0;
 8009c7c:	4b28      	ldr	r3, [pc, #160]	; (8009d20 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009c7e:	2200      	movs	r2, #0
 8009c80:	701a      	strb	r2, [r3, #0]
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009c84:	2200      	movs	r2, #0
 8009c86:	601a      	str	r2, [r3, #0]
		HvBatteryPower = c = 0;
 8009c88:	4b2a      	ldr	r3, [pc, #168]	; (8009d34 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	601a      	str	r2, [r3, #0]
 8009c8e:	4b29      	ldr	r3, [pc, #164]	; (8009d34 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a26      	ldr	r2, [pc, #152]	; (8009d2c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009c94:	6013      	str	r3, [r2, #0]
	}

if( (hv_count == 1) )
 8009c96:	4b26      	ldr	r3, [pc, #152]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009c98:	881b      	ldrh	r3, [r3, #0]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10d      	bne.n	8009cba <process_Rx_CAN_0X180EA7F3+0x186>
{
	HvBatteryPower = HvBatteryPower * 58;PackVoltage;
 8009c9e:	4b23      	ldr	r3, [pc, #140]	; (8009d2c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	223a      	movs	r2, #58	; 0x3a
 8009ca4:	fb02 f303 	mul.w	r3, r2, r3
 8009ca8:	4a20      	ldr	r2, [pc, #128]	; (8009d2c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009caa:	6013      	str	r3, [r2, #0]
	hv_count++;
 8009cac:	4b20      	ldr	r3, [pc, #128]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009cae:	881b      	ldrh	r3, [r3, #0]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	b29a      	uxth	r2, r3
 8009cb4:	4b1e      	ldr	r3, [pc, #120]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009cb6:	801a      	strh	r2, [r3, #0]
 8009cb8:	e006      	b.n	8009cc8 <process_Rx_CAN_0X180EA7F3+0x194>

}
else if(hv_count > 10)
 8009cba:	4b1d      	ldr	r3, [pc, #116]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009cbc:	881b      	ldrh	r3, [r3, #0]
 8009cbe:	2b0a      	cmp	r3, #10
 8009cc0:	d902      	bls.n	8009cc8 <process_Rx_CAN_0X180EA7F3+0x194>
	hv_count = 0;
 8009cc2:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	801a      	strh	r2, [r3, #0]

	//OBDII_CAN[can_0x01].CAN_Data[2] = tempData[1];
	//OBDII_CAN[can_0x01].CAN_Data[3] = tempData[0];
if(PackCurrent < c4)
 8009cc8:	4b13      	ldr	r3, [pc, #76]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	461a      	mov	r2, r3
 8009cce:	4b1a      	ldr	r3, [pc, #104]	; (8009d38 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d207      	bcs.n	8009ce6 <process_Rx_CAN_0X180EA7F3+0x1b2>
{
	int a;
	a++;
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	3301      	adds	r3, #1
 8009cda:	60bb      	str	r3, [r7, #8]
	c4 = PackCurrent;
 8009cdc:	4b0e      	ldr	r3, [pc, #56]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	461a      	mov	r2, r3
 8009ce2:	4b15      	ldr	r3, [pc, #84]	; (8009d38 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009ce4:	601a      	str	r2, [r3, #0]
}
if(PackCurrent < -10)
 8009ce6:	4b0c      	ldr	r3, [pc, #48]	; (8009d18 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f113 0f0a 	cmn.w	r3, #10
 8009cee:	da02      	bge.n	8009cf6 <process_Rx_CAN_0X180EA7F3+0x1c2>
{
	int a;
	a++;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	607b      	str	r3, [r7, #4]
}
}
 8009cf6:	3718      	adds	r7, #24
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	08013c04 	.word	0x08013c04
 8009d00:	1ffe9258 	.word	0x1ffe9258
 8009d04:	cccccccd 	.word	0xcccccccd
 8009d08:	1fff48d4 	.word	0x1fff48d4
 8009d0c:	66666667 	.word	0x66666667
 8009d10:	1fff47fa 	.word	0x1fff47fa
 8009d14:	1fff4820 	.word	0x1fff4820
 8009d18:	1fff4818 	.word	0x1fff4818
 8009d1c:	1fff447c 	.word	0x1fff447c
 8009d20:	1fff4858 	.word	0x1fff4858
 8009d24:	1fff48d6 	.word	0x1fff48d6
 8009d28:	1fff4814 	.word	0x1fff4814
 8009d2c:	1fff481c 	.word	0x1fff481c
 8009d30:	1fff4838 	.word	0x1fff4838
 8009d34:	1fff4480 	.word	0x1fff4480
 8009d38:	1fff4484 	.word	0x1fff4484

08009d3c <process_Rx_CAN_0X180FA7F3>:

void process_Rx_CAN_0X180FA7F3(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
	int PackCurent = 0;
 8009d42:	2300      	movs	r3, #0
 8009d44:	60fb      	str	r3, [r7, #12]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d46:	4b20      	ldr	r3, [pc, #128]	; (8009dc8 <process_Rx_CAN_0X180FA7F3+0x8c>)
 8009d48:	60bb      	str	r3, [r7, #8]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009d4a:	2315      	movs	r3, #21
 8009d4c:	71fb      	strb	r3, [r7, #7]

	tempData = &CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0];
 8009d4e:	4b1f      	ldr	r3, [pc, #124]	; (8009dcc <process_Rx_CAN_0X180FA7F3+0x90>)
 8009d50:	603b      	str	r3, [r7, #0]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009d52:	79fb      	ldrb	r3, [r7, #7]
 8009d54:	68ba      	ldr	r2, [r7, #8]
 8009d56:	3302      	adds	r3, #2
 8009d58:	009b      	lsls	r3, r3, #2
 8009d5a:	4413      	add	r3, r2
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	4618      	mov	r0, r3
 8009d60:	6839      	ldr	r1, [r7, #0]
 8009d62:	f000 fe6d 	bl	800aa40 <CAN_NODE_MO_ReadData>

	Bms_SOC = ((uint16_t)tempData[1] << 8) | tempData[0];
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	021b      	lsls	r3, r3, #8
 8009d6e:	b29a      	uxth	r2, r3
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	b29b      	uxth	r3, r3
 8009d76:	4313      	orrs	r3, r2
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	b29a      	uxth	r2, r3
 8009d7c:	4b14      	ldr	r3, [pc, #80]	; (8009dd0 <process_Rx_CAN_0X180FA7F3+0x94>)
 8009d7e:	801a      	strh	r2, [r3, #0]

	Bms_SOH = (((uint16_t)tempData[3] << 8) | tempData[2]) / 10;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	3303      	adds	r3, #3
 8009d84:	781b      	ldrb	r3, [r3, #0]
 8009d86:	021b      	lsls	r3, r3, #8
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	3202      	adds	r2, #2
 8009d8c:	7812      	ldrb	r2, [r2, #0]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	4a10      	ldr	r2, [pc, #64]	; (8009dd4 <process_Rx_CAN_0X180FA7F3+0x98>)
 8009d92:	fb82 1203 	smull	r1, r2, r2, r3
 8009d96:	1092      	asrs	r2, r2, #2
 8009d98:	17db      	asrs	r3, r3, #31
 8009d9a:	1ad3      	subs	r3, r2, r3
 8009d9c:	b29a      	uxth	r2, r3
 8009d9e:	4b0e      	ldr	r3, [pc, #56]	; (8009dd8 <process_Rx_CAN_0X180FA7F3+0x9c>)
 8009da0:	801a      	strh	r2, [r3, #0]

	PackVoltage = (((uint16_t)tempData[7] << 8) | tempData[6])/10;
 8009da2:	683b      	ldr	r3, [r7, #0]
 8009da4:	3307      	adds	r3, #7
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	021b      	lsls	r3, r3, #8
 8009daa:	683a      	ldr	r2, [r7, #0]
 8009dac:	3206      	adds	r2, #6
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	4a08      	ldr	r2, [pc, #32]	; (8009dd4 <process_Rx_CAN_0X180FA7F3+0x98>)
 8009db4:	fb82 1203 	smull	r1, r2, r2, r3
 8009db8:	1092      	asrs	r2, r2, #2
 8009dba:	17db      	asrs	r3, r3, #31
 8009dbc:	1ad3      	subs	r3, r2, r3
 8009dbe:	4a07      	ldr	r2, [pc, #28]	; (8009ddc <process_Rx_CAN_0X180FA7F3+0xa0>)
 8009dc0:	6013      	str	r3, [r2, #0]

}
 8009dc2:	3710      	adds	r7, #16
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}
 8009dc8:	08013c04 	.word	0x08013c04
 8009dcc:	1ffe9264 	.word	0x1ffe9264
 8009dd0:	1fff48c0 	.word	0x1fff48c0
 8009dd4:	66666667 	.word	0x66666667
 8009dd8:	1fff48c8 	.word	0x1fff48c8
 8009ddc:	1fff48d8 	.word	0x1fff48d8

08009de0 <process_Rx_CAN_0X1814A7F3>:
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);

}

void process_Rx_CAN_0X1814A7F3(void)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <process_Rx_CAN_0X1814A7F3+0x2c>)
 8009de8:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009dea:	2317      	movs	r3, #23
 8009dec:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1814A7F3].CAN_Data[0];
 8009dee:	4b08      	ldr	r3, [pc, #32]	; (8009e10 <process_Rx_CAN_0X1814A7F3+0x30>)
 8009df0:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009df2:	7afb      	ldrb	r3, [r7, #11]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	3302      	adds	r3, #2
 8009df8:	009b      	lsls	r3, r3, #2
 8009dfa:	4413      	add	r3, r2
 8009dfc:	685b      	ldr	r3, [r3, #4]
 8009dfe:	4618      	mov	r0, r3
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	f000 fe1d 	bl	800aa40 <CAN_NODE_MO_ReadData>

}
 8009e06:	3710      	adds	r7, #16
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}
 8009e0c:	08013c04 	.word	0x08013c04
 8009e10:	1ffe9294 	.word	0x1ffe9294

08009e14 <process_Rx_CAN_0X1815A7F3>:

void process_Rx_CAN_0X1815A7F3(void)
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b084      	sub	sp, #16
 8009e18:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009e1a:	4b09      	ldr	r3, [pc, #36]	; (8009e40 <process_Rx_CAN_0X1815A7F3+0x2c>)
 8009e1c:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009e1e:	2317      	movs	r3, #23
 8009e20:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1815A7F3].CAN_Data[0];
 8009e22:	4b08      	ldr	r3, [pc, #32]	; (8009e44 <process_Rx_CAN_0X1815A7F3+0x30>)
 8009e24:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009e26:	7afb      	ldrb	r3, [r7, #11]
 8009e28:	68fa      	ldr	r2, [r7, #12]
 8009e2a:	3302      	adds	r3, #2
 8009e2c:	009b      	lsls	r3, r3, #2
 8009e2e:	4413      	add	r3, r2
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	4618      	mov	r0, r3
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	f000 fe03 	bl	800aa40 <CAN_NODE_MO_ReadData>

}
 8009e3a:	3710      	adds	r7, #16
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	bd80      	pop	{r7, pc}
 8009e40:	08013c04 	.word	0x08013c04
 8009e44:	1ffe92a0 	.word	0x1ffe92a0

08009e48 <process_Rx_CAN_0X1808A7F3>:


void process_Rx_CAN_0X1808A7F3(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b084      	sub	sp, #16
 8009e4c:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009e4e:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <process_Rx_CAN_0X1808A7F3+0x2c>)
 8009e50:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009e52:	230c      	movs	r3, #12
 8009e54:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0];
 8009e56:	4b08      	ldr	r3, [pc, #32]	; (8009e78 <process_Rx_CAN_0X1808A7F3+0x30>)
 8009e58:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009e5a:	7afb      	ldrb	r3, [r7, #11]
 8009e5c:	68fa      	ldr	r2, [r7, #12]
 8009e5e:	3302      	adds	r3, #2
 8009e60:	009b      	lsls	r3, r3, #2
 8009e62:	4413      	add	r3, r2
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	4618      	mov	r0, r3
 8009e68:	6879      	ldr	r1, [r7, #4]
 8009e6a:	f000 fde9 	bl	800aa40 <CAN_NODE_MO_ReadData>

}
 8009e6e:	3710      	adds	r7, #16
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	08013c04 	.word	0x08013c04
 8009e78:	1ffe92b8 	.word	0x1ffe92b8

08009e7c <process_Rx_CAN_0X180AA7F3>:


void process_Rx_CAN_0X180AA7F3(void)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
	BMS_Avg_temp=0;
 8009e82:	4b23      	ldr	r3, [pc, #140]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	601a      	str	r2, [r3, #0]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009e88:	4b22      	ldr	r3, [pc, #136]	; (8009f14 <process_Rx_CAN_0X180AA7F3+0x98>)
 8009e8a:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009e8c:	230d      	movs	r3, #13
 8009e8e:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180AA7F3].CAN_Data[0];
 8009e90:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <process_Rx_CAN_0X180AA7F3+0x9c>)
 8009e92:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009e94:	7afb      	ldrb	r3, [r7, #11]
 8009e96:	68fa      	ldr	r2, [r7, #12]
 8009e98:	3302      	adds	r3, #2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4413      	add	r3, r2
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	6879      	ldr	r1, [r7, #4]
 8009ea4:	f000 fdcc 	bl	800aa40 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	781b      	ldrb	r3, [r3, #0]
 8009eae:	021b      	lsls	r3, r3, #8
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	7812      	ldrb	r2, [r2, #0]
 8009eb4:	4313      	orrs	r3, r2
 8009eb6:	4a16      	ldr	r2, [pc, #88]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009eb8:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	3303      	adds	r3, #3
 8009ebe:	781b      	ldrb	r3, [r3, #0]
 8009ec0:	021b      	lsls	r3, r3, #8
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	3202      	adds	r2, #2
 8009ec6:	7812      	ldrb	r2, [r2, #0]
 8009ec8:	431a      	orrs	r2, r3
 8009eca:	4b11      	ldr	r3, [pc, #68]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4413      	add	r3, r2
 8009ed0:	4a0f      	ldr	r2, [pc, #60]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009ed2:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	3305      	adds	r3, #5
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	021b      	lsls	r3, r3, #8
 8009edc:	687a      	ldr	r2, [r7, #4]
 8009ede:	3204      	adds	r2, #4
 8009ee0:	7812      	ldrb	r2, [r2, #0]
 8009ee2:	431a      	orrs	r2, r3
 8009ee4:	4b0a      	ldr	r3, [pc, #40]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	4413      	add	r3, r2
 8009eea:	4a09      	ldr	r2, [pc, #36]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009eec:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	3307      	adds	r3, #7
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	021b      	lsls	r3, r3, #8
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	3206      	adds	r2, #6
 8009efa:	7812      	ldrb	r2, [r2, #0]
 8009efc:	431a      	orrs	r2, r3
 8009efe:	4b04      	ldr	r3, [pc, #16]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4413      	add	r3, r2
 8009f04:	4a02      	ldr	r2, [pc, #8]	; (8009f10 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009f06:	6013      	str	r3, [r2, #0]

}
 8009f08:	3710      	adds	r7, #16
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	1fff48c4 	.word	0x1fff48c4
 8009f14:	08013c04 	.word	0x08013c04
 8009f18:	1ffe92c4 	.word	0x1ffe92c4

08009f1c <process_Rx_CAN_0X180BA7F3>:


void process_Rx_CAN_0X180BA7F3(void)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009f22:	4b27      	ldr	r3, [pc, #156]	; (8009fc0 <process_Rx_CAN_0X180BA7F3+0xa4>)
 8009f24:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009f26:	230e      	movs	r3, #14
 8009f28:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180BA7F3].CAN_Data[0];
 8009f2a:	4b26      	ldr	r3, [pc, #152]	; (8009fc4 <process_Rx_CAN_0X180BA7F3+0xa8>)
 8009f2c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009f2e:	7afb      	ldrb	r3, [r7, #11]
 8009f30:	68fa      	ldr	r2, [r7, #12]
 8009f32:	3302      	adds	r3, #2
 8009f34:	009b      	lsls	r3, r3, #2
 8009f36:	4413      	add	r3, r2
 8009f38:	685b      	ldr	r3, [r3, #4]
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	6879      	ldr	r1, [r7, #4]
 8009f3e:	f000 fd7f 	bl	800aa40 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp +=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	3301      	adds	r3, #1
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	687a      	ldr	r2, [r7, #4]
 8009f4c:	7812      	ldrb	r2, [r2, #0]
 8009f4e:	431a      	orrs	r2, r3
 8009f50:	4b1d      	ldr	r3, [pc, #116]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4413      	add	r3, r2
 8009f56:	4a1c      	ldr	r2, [pc, #112]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f58:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	3303      	adds	r3, #3
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	021b      	lsls	r3, r3, #8
 8009f62:	687a      	ldr	r2, [r7, #4]
 8009f64:	3202      	adds	r2, #2
 8009f66:	7812      	ldrb	r2, [r2, #0]
 8009f68:	431a      	orrs	r2, r3
 8009f6a:	4b17      	ldr	r3, [pc, #92]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4413      	add	r3, r2
 8009f70:	4a15      	ldr	r2, [pc, #84]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f72:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	3305      	adds	r3, #5
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	021b      	lsls	r3, r3, #8
 8009f7c:	687a      	ldr	r2, [r7, #4]
 8009f7e:	3204      	adds	r2, #4
 8009f80:	7812      	ldrb	r2, [r2, #0]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	4b10      	ldr	r3, [pc, #64]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4413      	add	r3, r2
 8009f8a:	4a0f      	ldr	r2, [pc, #60]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009f8c:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	3307      	adds	r3, #7
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	021b      	lsls	r3, r3, #8
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	3206      	adds	r2, #6
 8009f9a:	7812      	ldrb	r2, [r2, #0]
 8009f9c:	431a      	orrs	r2, r3
 8009f9e:	4b0a      	ldr	r3, [pc, #40]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	4413      	add	r3, r2
 8009fa4:	4a08      	ldr	r2, [pc, #32]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009fa6:	6013      	str	r3, [r2, #0]

	BMS_Avg_temp=BMS_Avg_temp/8;
 8009fa8:	4b07      	ldr	r3, [pc, #28]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	da00      	bge.n	8009fb2 <process_Rx_CAN_0X180BA7F3+0x96>
 8009fb0:	3307      	adds	r3, #7
 8009fb2:	10db      	asrs	r3, r3, #3
 8009fb4:	461a      	mov	r2, r3
 8009fb6:	4b04      	ldr	r3, [pc, #16]	; (8009fc8 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009fb8:	601a      	str	r2, [r3, #0]

}
 8009fba:	3710      	adds	r7, #16
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	08013c04 	.word	0x08013c04
 8009fc4:	1ffe92d0 	.word	0x1ffe92d0
 8009fc8:	1fff48c4 	.word	0x1fff48c4

08009fcc <process_Rx_CAN_0X180CA7F3>:



void process_Rx_CAN_0X180CA7F3(void)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b084      	sub	sp, #16
 8009fd0:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009fd2:	4b22      	ldr	r3, [pc, #136]	; (800a05c <process_Rx_CAN_0X180CA7F3+0x90>)
 8009fd4:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009fd6:	2318      	movs	r3, #24
 8009fd8:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[0];
 8009fda:	4b21      	ldr	r3, [pc, #132]	; (800a060 <process_Rx_CAN_0X180CA7F3+0x94>)
 8009fdc:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009fde:	7afb      	ldrb	r3, [r7, #11]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	3302      	adds	r3, #2
 8009fe4:	009b      	lsls	r3, r3, #2
 8009fe6:	4413      	add	r3, r2
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	4618      	mov	r0, r3
 8009fec:	6879      	ldr	r1, [r7, #4]
 8009fee:	f000 fd27 	bl	800aa40 <CAN_NODE_MO_ReadData>

	Bms_minTemp = ((int16_t)tempData[1] << 8) | tempData[0];
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	3301      	adds	r3, #1
 8009ff6:	781b      	ldrb	r3, [r3, #0]
 8009ff8:	021b      	lsls	r3, r3, #8
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	b29b      	uxth	r3, r3
 800a002:	4313      	orrs	r3, r2
 800a004:	b29a      	uxth	r2, r3
 800a006:	4b17      	ldr	r3, [pc, #92]	; (800a064 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a008:	801a      	strh	r2, [r3, #0]
	Bms_minTemp = Bms_minTemp / 10;
 800a00a:	4b16      	ldr	r3, [pc, #88]	; (800a064 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a00c:	881b      	ldrh	r3, [r3, #0]
 800a00e:	b21b      	sxth	r3, r3
 800a010:	4a15      	ldr	r2, [pc, #84]	; (800a068 <process_Rx_CAN_0X180CA7F3+0x9c>)
 800a012:	fb82 1203 	smull	r1, r2, r2, r3
 800a016:	1092      	asrs	r2, r2, #2
 800a018:	17db      	asrs	r3, r3, #31
 800a01a:	1ad3      	subs	r3, r2, r3
 800a01c:	b29a      	uxth	r2, r3
 800a01e:	4b11      	ldr	r3, [pc, #68]	; (800a064 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a020:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = ((int16_t)tempData[3] << 8) | tempData[2];
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	3303      	adds	r3, #3
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	021b      	lsls	r3, r3, #8
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	3302      	adds	r3, #2
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	b29b      	uxth	r3, r3
 800a034:	4313      	orrs	r3, r2
 800a036:	b29a      	uxth	r2, r3
 800a038:	4b0c      	ldr	r3, [pc, #48]	; (800a06c <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a03a:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = Bms_maxTemp / 10;
 800a03c:	4b0b      	ldr	r3, [pc, #44]	; (800a06c <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b21b      	sxth	r3, r3
 800a042:	4a09      	ldr	r2, [pc, #36]	; (800a068 <process_Rx_CAN_0X180CA7F3+0x9c>)
 800a044:	fb82 1203 	smull	r1, r2, r2, r3
 800a048:	1092      	asrs	r2, r2, #2
 800a04a:	17db      	asrs	r3, r3, #31
 800a04c:	1ad3      	subs	r3, r2, r3
 800a04e:	b29a      	uxth	r2, r3
 800a050:	4b06      	ldr	r3, [pc, #24]	; (800a06c <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a052:	801a      	strh	r2, [r3, #0]

}
 800a054:	3710      	adds	r7, #16
 800a056:	46bd      	mov	sp, r7
 800a058:	bd80      	pop	{r7, pc}
 800a05a:	bf00      	nop
 800a05c:	08013c04 	.word	0x08013c04
 800a060:	1ffe92ac 	.word	0x1ffe92ac
 800a064:	1fff4840 	.word	0x1fff4840
 800a068:	66666667 	.word	0x66666667
 800a06c:	1fff47f8 	.word	0x1fff47f8

0800a070 <Read_can_bms_29bit>:

void Read_can_bms_29bit(void)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	af00      	add	r7, sp, #0
	CAN_Rx_0x1810A7F3();
 800a074:	f7ff fc3a 	bl	80098ec <CAN_Rx_0x1810A7F3>
	CAN_Rx_0x180EA7F3();
 800a078:	f7ff fbbc 	bl	80097f4 <CAN_Rx_0x180EA7F3>
	CAN_Rx_0x180FA7F3();
 800a07c:	f7ff fbf8 	bl	8009870 <CAN_Rx_0x180FA7F3>
	CAN_Rx_0x1814A7F3();
 800a080:	f7ff fc72 	bl	8009968 <CAN_Rx_0x1814A7F3>
	CAN_Rx_0x1815A7F3();
 800a084:	f7ff fcae 	bl	80099e4 <CAN_Rx_0x1815A7F3>
	CAN_Rx_0x180CA7F3();
 800a088:	f7ff fcea 	bl	8009a60 <CAN_Rx_0x180CA7F3>
	CAN_Rx_0x1808A7F3();
 800a08c:	f7ff faf8 	bl	8009680 <CAN_Rx_0x1808A7F3>
    CAN_Rx_0x180AA7F3();
 800a090:	f7ff fb34 	bl	80096fc <CAN_Rx_0x180AA7F3>
    CAN_Rx_0x180BA7F3();
 800a094:	f7ff fb70 	bl	8009778 <CAN_Rx_0x180BA7F3>
}
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop

0800a09c <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a09c:	b480      	push	{r7}
 800a09e:	b083      	sub	sp, #12
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	6078      	str	r0, [r7, #4]
 800a0a4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	683a      	ldr	r2, [r7, #0]
 800a0ac:	61da      	str	r2, [r3, #28]
}
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <Update_CAN_0x18FF0921>:
	{0x18FF2121, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{0x18FED911, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
};

void Update_CAN_0x18FF0921(void)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b084      	sub	sp, #16
 800a0bc:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a0be:	4b07      	ldr	r3, [pc, #28]	; (800a0dc <Update_CAN_0x18FF0921+0x24>)
 800a0c0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF0921].CAN_Data[ZERO_BYTE];
 800a0c2:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <Update_CAN_0x18FF0921+0x28>)
 800a0c4:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF0921], tempData);
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	68b9      	ldr	r1, [r7, #8]
 800a0ce:	f7fe fdfb 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a0d6:	3710      	adds	r7, #16
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}
 800a0dc:	08013c04 	.word	0x08013c04
 800a0e0:	1ffe92dc 	.word	0x1ffe92dc

0800a0e4 <Update_CAN_0x0CF00400>:

void Update_CAN_0x0CF00400(void)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a0ea:	4b07      	ldr	r3, [pc, #28]	; (800a108 <Update_CAN_0x0CF00400+0x24>)
 800a0ec:	60fb      	str	r3, [r7, #12]
	//to update battery temperature
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer;
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer >> 8;


	tempData = &CAN_MSG_DB[CAN_0CF00400].CAN_Data[ZERO_BYTE];
 800a0ee:	4b07      	ldr	r3, [pc, #28]	; (800a10c <Update_CAN_0x0CF00400+0x28>)
 800a0f0:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF00400], tempData);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	691b      	ldr	r3, [r3, #16]
 800a0f6:	4618      	mov	r0, r3
 800a0f8:	68b9      	ldr	r1, [r7, #8]
 800a0fa:	f7fe fde5 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a0fe:	4603      	mov	r3, r0
 800a100:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a102:	3710      	adds	r7, #16
 800a104:	46bd      	mov	sp, r7
 800a106:	bd80      	pop	{r7, pc}
 800a108:	08013c04 	.word	0x08013c04
 800a10c:	1ffe92e8 	.word	0x1ffe92e8

0800a110 <Update_CAN_0x18FFC621>:

void Update_CAN_0x18FFC621(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b084      	sub	sp, #16
 800a114:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a116:	4b07      	ldr	r3, [pc, #28]	; (800a134 <Update_CAN_0x18FFC621+0x24>)
 800a118:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FFC621].CAN_Data[ZERO_BYTE];
 800a11a:	4b07      	ldr	r3, [pc, #28]	; (800a138 <Update_CAN_0x18FFC621+0x28>)
 800a11c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFC621], tempData);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	4618      	mov	r0, r3
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	f7fe fdcf 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a12a:	4603      	mov	r3, r0
 800a12c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a12e:	3710      	adds	r7, #16
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	08013c04 	.word	0x08013c04
 800a138:	1ffe92f4 	.word	0x1ffe92f4

0800a13c <Update_CAN_0x18FFB632>:

void Update_CAN_0x18FFB632(void)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b086      	sub	sp, #24
 800a140:	af02      	add	r7, sp, #8
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a142:	4b17      	ldr	r3, [pc, #92]	; (800a1a0 <Update_CAN_0x18FFB632+0x64>)
 800a144:	60fb      	str	r3, [r7, #12]
	//to update SOC percentage byte         (0 to 100) to (10 to 100)
		//BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE], 10, 100, 0, 100);

	//to update SOC percentage byte         (0 to 100) to (10 to 100)
//	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = Bms_SOC;
	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(Bms_SOC, 10, 100, 0, 100);
 800a146:	4b17      	ldr	r3, [pc, #92]	; (800a1a4 <Update_CAN_0x18FFB632+0x68>)
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	461a      	mov	r2, r3
 800a14c:	2364      	movs	r3, #100	; 0x64
 800a14e:	9300      	str	r3, [sp, #0]
 800a150:	4610      	mov	r0, r2
 800a152:	210a      	movs	r1, #10
 800a154:	2264      	movs	r2, #100	; 0x64
 800a156:	2300      	movs	r3, #0
 800a158:	f000 f988 	bl	800a46c <map>
 800a15c:	4603      	mov	r3, r0
 800a15e:	b2da      	uxtb	r2, r3
 800a160:	4b11      	ldr	r3, [pc, #68]	; (800a1a8 <Update_CAN_0x18FFB632+0x6c>)
 800a162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a166:	4b10      	ldr	r3, [pc, #64]	; (800a1a8 <Update_CAN_0x18FFB632+0x6c>)
 800a168:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800a16c:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <Update_CAN_0x18FFB632+0x70>)
 800a16e:	701a      	strb	r2, [r3, #0]
 800a170:	4b0e      	ldr	r3, [pc, #56]	; (800a1ac <Update_CAN_0x18FFB632+0x70>)
 800a172:	781a      	ldrb	r2, [r3, #0]
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <Update_CAN_0x18FFB632+0x74>)
 800a176:	701a      	strb	r2, [r3, #0]

	//to update battery temperature
	CAN_MSG_DB[CAN_18FFB632].CAN_Data[SECOND_BYTE] = Bms_maxTemp;
 800a178:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <Update_CAN_0x18FFB632+0x78>)
 800a17a:	881b      	ldrh	r3, [r3, #0]
 800a17c:	b2da      	uxtb	r2, r3
 800a17e:	4b0a      	ldr	r3, [pc, #40]	; (800a1a8 <Update_CAN_0x18FFB632+0x6c>)
 800a180:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//to update drive mode information
	//CAN_MSG_DB[CAN_18FFB632].CAN_Data[FOURTH_BYTE] = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];


	tempData = &CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE];
 800a184:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <Update_CAN_0x18FFB632+0x7c>)
 800a186:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFB632], tempData);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	699b      	ldr	r3, [r3, #24]
 800a18c:	4618      	mov	r0, r3
 800a18e:	68b9      	ldr	r1, [r7, #8]
 800a190:	f7fe fd9a 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a194:	4603      	mov	r3, r0
 800a196:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a198:	3710      	adds	r7, #16
 800a19a:	46bd      	mov	sp, r7
 800a19c:	bd80      	pop	{r7, pc}
 800a19e:	bf00      	nop
 800a1a0:	08013c04 	.word	0x08013c04
 800a1a4:	1fff48c0 	.word	0x1fff48c0
 800a1a8:	1ffe92d8 	.word	0x1ffe92d8
 800a1ac:	1fff47fc 	.word	0x1fff47fc
 800a1b0:	1fff4800 	.word	0x1fff4800
 800a1b4:	1fff47f8 	.word	0x1fff47f8
 800a1b8:	1ffe9300 	.word	0x1ffe9300

0800a1bc <Update_CAN_0x0CF10121>:

void Update_CAN_0x0CF10121(void)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b084      	sub	sp, #16
 800a1c0:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	; (800a200 <Update_CAN_0x0CF10121+0x44>)
 800a1c4:	60fb      	str	r3, [r7, #12]

	// TO get the SOC percentage
	//Soc_perc = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];
	//calculate DTE
	//Dte = Soc_perc * 2U;
 	Dte = Bms_SOC * 2;
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <Update_CAN_0x0CF10121+0x48>)
 800a1c8:	881b      	ldrh	r3, [r3, #0]
 800a1ca:	005b      	lsls	r3, r3, #1
 800a1cc:	817b      	strh	r3, [r7, #10]
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FOURTH_BYTE] = Dte;
 800a1ce:	897b      	ldrh	r3, [r7, #10]
 800a1d0:	b2da      	uxtb	r2, r3
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <Update_CAN_0x0CF10121+0x4c>)
 800a1d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FIFTH_BYTE] = (Dte >> 8);
 800a1d8:	897b      	ldrh	r3, [r7, #10]
 800a1da:	0a1b      	lsrs	r3, r3, #8
 800a1dc:	b29b      	uxth	r3, r3
 800a1de:	b2da      	uxtb	r2, r3
 800a1e0:	4b09      	ldr	r3, [pc, #36]	; (800a208 <Update_CAN_0x0CF10121+0x4c>)
 800a1e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	tempData = &CAN_MSG_DB[CAN_0CF10121].CAN_Data[ZERO_BYTE];
 800a1e6:	4b09      	ldr	r3, [pc, #36]	; (800a20c <Update_CAN_0x0CF10121+0x50>)
 800a1e8:	607b      	str	r3, [r7, #4]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF10121], tempData);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	69db      	ldr	r3, [r3, #28]
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	6879      	ldr	r1, [r7, #4]
 800a1f2:	f7fe fd69 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	70fb      	strb	r3, [r7, #3]
	}
	else
	{
		// message object failed to update.
	}
}
 800a1fa:	3710      	adds	r7, #16
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}
 800a200:	08013c04 	.word	0x08013c04
 800a204:	1fff48c0 	.word	0x1fff48c0
 800a208:	1ffe92d8 	.word	0x1ffe92d8
 800a20c:	1ffe930c 	.word	0x1ffe930c

0800a210 <Update_CAN_0x18FEEE00>:

void Update_CAN_0x18FEEE00(void)
{
 800a210:	b580      	push	{r7, lr}
 800a212:	b084      	sub	sp, #16
 800a214:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a216:	4b07      	ldr	r3, [pc, #28]	; (800a234 <Update_CAN_0x18FEEE00+0x24>)
 800a218:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FEEE00].CAN_Data[ZERO_BYTE];
 800a21a:	4b07      	ldr	r3, [pc, #28]	; (800a238 <Update_CAN_0x18FEEE00+0x28>)
 800a21c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FEEE00], tempData);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	6a1b      	ldr	r3, [r3, #32]
 800a222:	4618      	mov	r0, r3
 800a224:	68b9      	ldr	r1, [r7, #8]
 800a226:	f7fe fd4f 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a22a:	4603      	mov	r3, r0
 800a22c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a22e:	3710      	adds	r7, #16
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	08013c04 	.word	0x08013c04
 800a238:	1ffe9318 	.word	0x1ffe9318

0800a23c <Update_CAN_0x18FF2021>:

void Update_CAN_0x18FF2021(void)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a242:	4b07      	ldr	r3, [pc, #28]	; (800a260 <Update_CAN_0x18FF2021+0x24>)
 800a244:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2021].CAN_Data[ZERO_BYTE];
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <Update_CAN_0x18FF2021+0x28>)
 800a248:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF2021], tempData);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a24e:	4618      	mov	r0, r3
 800a250:	68b9      	ldr	r1, [r7, #8]
 800a252:	f7fe fd39 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a256:	4603      	mov	r3, r0
 800a258:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}
 800a260:	08013c04 	.word	0x08013c04
 800a264:	1ffe9324 	.word	0x1ffe9324

0800a268 <Update_CAN_0x18FF2121>:

void Update_CAN_0x18FF2121(void)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a26e:	4b0c      	ldr	r3, [pc, #48]	; (800a2a0 <Update_CAN_0x18FF2121+0x38>)
 800a270:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[ZERO_BYTE];
 800a272:	4b0c      	ldr	r3, [pc, #48]	; (800a2a4 <Update_CAN_0x18FF2121+0x3c>)
 800a274:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[29],tempData);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a27c:	4618      	mov	r0, r3
 800a27e:	68b9      	ldr	r1, [r7, #8]
 800a280:	f7fe fd22 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a284:	4603      	mov	r3, r0
 800a286:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a288:	79fb      	ldrb	r3, [r7, #7]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d105      	bne.n	800a29a <Update_CAN_0x18FF2121+0x32>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[29]);
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a294:	4618      	mov	r0, r3
 800a296:	f7fe fcf3 	bl	8008c80 <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a29a:	3710      	adds	r7, #16
 800a29c:	46bd      	mov	sp, r7
 800a29e:	bd80      	pop	{r7, pc}
 800a2a0:	08013c04 	.word	0x08013c04
 800a2a4:	1ffe9330 	.word	0x1ffe9330

0800a2a8 <Update_CAN_0x18FED911>:

void Update_CAN_0x18FED911(void)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a2ae:	4b0b      	ldr	r3, [pc, #44]	; (800a2dc <Update_CAN_0x18FED911+0x34>)
 800a2b0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FED911].CAN_Data[ZERO_BYTE];
 800a2b2:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <Update_CAN_0x18FED911+0x38>)
 800a2b4:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[15],tempData);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	68b9      	ldr	r1, [r7, #8]
 800a2be:	f7fe fd03 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a2c6:	79fb      	ldrb	r3, [r7, #7]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d104      	bne.n	800a2d6 <Update_CAN_0x18FED911+0x2e>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[15]);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f7fe fcd5 	bl	8008c80 <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a2d6:	3710      	adds	r7, #16
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	08013c04 	.word	0x08013c04
 800a2e0:	1ffe933c 	.word	0x1ffe933c

0800a2e4 <CAN_OUTPUT_CLUSTER>:


void CAN_OUTPUT_CLUSTER()
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a2ea:	4b25      	ldr	r3, [pc, #148]	; (800a380 <CAN_OUTPUT_CLUSTER+0x9c>)
 800a2ec:	60bb      	str	r3, [r7, #8]
	CAN_NODE_STATUS_t mo_tranmit_status;
	CAN_NODE_STATUS_t status;
	uint16_t msg_count;

	/* update all message's data */
	Update_CAN_0x18FF0921();
 800a2ee:	f7ff fee3 	bl	800a0b8 <Update_CAN_0x18FF0921>
	Update_CAN_0x0CF00400();
 800a2f2:	f7ff fef7 	bl	800a0e4 <Update_CAN_0x0CF00400>
	Update_CAN_0x18FFC621();
 800a2f6:	f7ff ff0b 	bl	800a110 <Update_CAN_0x18FFC621>
	Update_CAN_0x18FFB632();
 800a2fa:	f7ff ff1f 	bl	800a13c <Update_CAN_0x18FFB632>
	Update_CAN_0x0CF10121();
 800a2fe:	f7ff ff5d 	bl	800a1bc <Update_CAN_0x0CF10121>
	Update_CAN_0x18FEEE00();
 800a302:	f7ff ff85 	bl	800a210 <Update_CAN_0x18FEEE00>
	Update_CAN_0x18FF2021();
 800a306:	f7ff ff99 	bl	800a23c <Update_CAN_0x18FF2021>

/* will update separately */
	Update_CAN_0x18FF2121();
 800a30a:	f7ff ffad 	bl	800a268 <Update_CAN_0x18FF2121>
	Update_CAN_0x18FED911();
 800a30e:	f7ff ffcb 	bl	800a2a8 <Update_CAN_0x18FED911>
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a312:	2300      	movs	r3, #0
 800a314:	81fb      	strh	r3, [r7, #14]
 800a316:	e02c      	b.n	800a372 <CAN_OUTPUT_CLUSTER+0x8e>
	{
		MO_Ptr = HandlePtr1->lmobj_ptr[msg_count]->mo_ptr;
 800a318:	89fb      	ldrh	r3, [r7, #14]
 800a31a:	68ba      	ldr	r2, [r7, #8]
 800a31c:	3302      	adds	r3, #2
 800a31e:	009b      	lsls	r3, r3, #2
 800a320:	4413      	add	r3, r2
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	607b      	str	r3, [r7, #4]

		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[msg_count]);
 800a328:	89fb      	ldrh	r3, [r7, #14]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	3302      	adds	r3, #2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4413      	add	r3, r2
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4618      	mov	r0, r3
 800a336:	f7fe fca3 	bl	8008c80 <CAN_NODE_MO_Transmit>
 800a33a:	4603      	mov	r3, r0
 800a33c:	70fb      	strb	r3, [r7, #3]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d113      	bne.n	800a36c <CAN_OUTPUT_CLUSTER+0x88>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[msg_count]);	//msg_count, earlier it was 0 and working
 800a344:	89fb      	ldrh	r3, [r7, #14]
 800a346:	68ba      	ldr	r2, [r7, #8]
 800a348:	3302      	adds	r3, #2
 800a34a:	009b      	lsls	r3, r3, #2
 800a34c:	4413      	add	r3, r2
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe fcd9 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800a356:	4603      	mov	r3, r0
 800a358:	70bb      	strb	r3, [r7, #2]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800a35a:	78bb      	ldrb	r3, [r7, #2]
 800a35c:	f003 0302 	and.w	r3, r3, #2
 800a360:	2b00      	cmp	r3, #0
 800a362:	d003      	beq.n	800a36c <CAN_OUTPUT_CLUSTER+0x88>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800a364:	6878      	ldr	r0, [r7, #4]
 800a366:	2102      	movs	r1, #2
 800a368:	f7ff fe98 	bl	800a09c <XMC_CAN_MO_ResetStatus>
	Update_CAN_0x18FF2121();
	Update_CAN_0x18FED911();
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a36c:	89fb      	ldrh	r3, [r7, #14]
 800a36e:	3301      	adds	r3, #1
 800a370:	81fb      	strh	r3, [r7, #14]
 800a372:	89fb      	ldrh	r3, [r7, #14]
 800a374:	2b06      	cmp	r3, #6
 800a376:	d9cf      	bls.n	800a318 <CAN_OUTPUT_CLUSTER+0x34>
		else
		{
			// message object failed to transmit.
		}
	}
}
 800a378:	3710      	adds	r7, #16
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}
 800a37e:	bf00      	nop
 800a380:	08013c04 	.word	0x08013c04

0800a384 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a384:	b480      	push	{r7}
 800a386:	b083      	sub	sp, #12
 800a388:	af00      	add	r7, sp, #0
 800a38a:	6078      	str	r0, [r7, #4]
 800a38c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	61da      	str	r2, [r3, #28]
}
 800a396:	370c      	adds	r7, #12
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr

0800a3a0 <Read_CAN_0x1E5>:

};


void Read_CAN_0x1E5(void)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b084      	sub	sp, #16
 800a3a4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a3a6:	4b1c      	ldr	r3, [pc, #112]	; (800a418 <Read_CAN_0x1E5+0x78>)
 800a3a8:	60fb      	str	r3, [r7, #12]

	mo_index = 15;//CAN_RX_MO_HVAC_BASE + CAN_0x248;
 800a3aa:	230f      	movs	r3, #15
 800a3ac:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a3ae:	7afb      	ldrb	r3, [r7, #11]
 800a3b0:	68fa      	ldr	r2, [r7, #12]
 800a3b2:	3302      	adds	r3, #2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	4413      	add	r3, r2
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a3be:	7afb      	ldrb	r3, [r7, #11]
 800a3c0:	68fa      	ldr	r2, [r7, #12]
 800a3c2:	3302      	adds	r3, #2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4413      	add	r3, r2
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7fe fc9c 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a3d4:	78fb      	ldrb	r3, [r7, #3]
 800a3d6:	f003 0301 	and.w	r3, r3, #1
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d016      	beq.n	800a40c <Read_CAN_0x1E5+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	2101      	movs	r1, #1
 800a3e2:	f7ff ffcf 	bl	800a384 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a3e6:	7afb      	ldrb	r3, [r7, #11]
 800a3e8:	68fa      	ldr	r2, [r7, #12]
 800a3ea:	3302      	adds	r3, #2
 800a3ec:	009b      	lsls	r3, r3, #2
 800a3ee:	4413      	add	r3, r2
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fc56 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a3fc:	78bb      	ldrb	r3, [r7, #2]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d102      	bne.n	800a408 <Read_CAN_0x1E5+0x68>
		{
			// message object receive success.
			test = 1;
 800a402:	2301      	movs	r3, #1
 800a404:	707b      	strb	r3, [r7, #1]
 800a406:	e001      	b.n	800a40c <Read_CAN_0x1E5+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a408:	2300      	movs	r3, #0
 800a40a:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x1E5();
 800a40c:	f000 f8b6 	bl	800a57c <Process_Read_CAN_0x1E5>
}
 800a410:	3710      	adds	r7, #16
 800a412:	46bd      	mov	sp, r7
 800a414:	bd80      	pop	{r7, pc}
 800a416:	bf00      	nop
 800a418:	08013dec 	.word	0x08013dec

0800a41c <update_id0x4c5>:


void update_id0x4c5()
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <update_id0x4c5+0x44>)
 800a424:	60fb      	str	r3, [r7, #12]
	   // uint8_t can_data_arr[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
	    uint8_t *array_data;

	    eps_n[can_0x4c5].can_matrix[0] = 0x01;
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <update_id0x4c5+0x48>)
 800a428:	2201      	movs	r2, #1
 800a42a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	    eps_n[can_0x4c5].can_matrix[1] = 0x28;
 800a42e:	4b0d      	ldr	r3, [pc, #52]	; (800a464 <update_id0x4c5+0x48>)
 800a430:	2228      	movs	r2, #40	; 0x28
 800a432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	    array_data = &eps_n[can_0x4c5].can_matrix[0];
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <update_id0x4c5+0x4c>)
 800a438:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[10],array_data);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a43e:	4618      	mov	r0, r3
 800a440:	68b9      	ldr	r1, [r7, #8]
 800a442:	f7fe fc41 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a446:	4603      	mov	r3, r0
 800a448:	71fb      	strb	r3, [r7, #7]

	       if (status == CAN_NODE_STATUS_SUCCESS)
 800a44a:	79fb      	ldrb	r3, [r7, #7]
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d104      	bne.n	800a45a <update_id0x4c5+0x3e>
	       {
	         // message object data updated.

	         // transmit the data
	         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[10]);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a454:	4618      	mov	r0, r3
 800a456:	f7fe fc13 	bl	8008c80 <CAN_NODE_MO_Transmit>
	       }
	       else
	       {
	         // message object failed to update.
	       }
}
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	08013dec 	.word	0x08013dec
 800a464:	1ffe9344 	.word	0x1ffe9344
 800a468:	1ffe9384 	.word	0x1ffe9384

0800a46c <map>:
	       }
}


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
	long ans;

  ans = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a47a:	68fa      	ldr	r2, [r7, #12]
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	1ad3      	subs	r3, r2, r3
 800a480:	6a39      	ldr	r1, [r7, #32]
 800a482:	683a      	ldr	r2, [r7, #0]
 800a484:	1a8a      	subs	r2, r1, r2
 800a486:	fb02 f203 	mul.w	r2, r2, r3
 800a48a:	6879      	ldr	r1, [r7, #4]
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	1acb      	subs	r3, r1, r3
 800a490:	fb92 f2f3 	sdiv	r2, r2, r3
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	4413      	add	r3, r2
 800a498:	617b      	str	r3, [r7, #20]

  if(ans > out_max)
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	6a3b      	ldr	r3, [r7, #32]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	dd02      	ble.n	800a4a8 <map+0x3c>
	  ans = out_max;
 800a4a2:	6a3b      	ldr	r3, [r7, #32]
 800a4a4:	617b      	str	r3, [r7, #20]
 800a4a6:	e005      	b.n	800a4b4 <map+0x48>

  else if(ans < out_min)
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	429a      	cmp	r2, r3
 800a4ae:	da01      	bge.n	800a4b4 <map+0x48>
	  ans = out_min;
 800a4b0:	683b      	ldr	r3, [r7, #0]
 800a4b2:	617b      	str	r3, [r7, #20]

  return ans;
 800a4b4:	697b      	ldr	r3, [r7, #20]
}
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	371c      	adds	r7, #28
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr
 800a4c2:	bf00      	nop

0800a4c4 <update_id0x36a>:
  return ans;
}


void update_id0x36a()
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af02      	add	r7, sp, #8
	CAN_NODE_STATUS_t status;
		    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a4ca:	4b27      	ldr	r3, [pc, #156]	; (800a568 <update_id0x36a+0xa4>)
 800a4cc:	60fb      	str	r3, [r7, #12]




		   // current_rpm = 10000;
		    current_rpm = current_rpm * 1 - 16384U;
 800a4ce:	4b27      	ldr	r3, [pc, #156]	; (800a56c <update_id0x36a+0xa8>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a4d6:	b29a      	uxth	r2, r3
 800a4d8:	4b24      	ldr	r3, [pc, #144]	; (800a56c <update_id0x36a+0xa8>)
 800a4da:	801a      	strh	r2, [r3, #0]

		    vspeed = vspeed * 0.015625;*/

		   // map(x, 0, 100, 0, 0x19);

		    eps_n[can_0x36a].can_matrix[1] = 0x5f;
 800a4dc:	4b24      	ldr	r3, [pc, #144]	; (800a570 <update_id0x36a+0xac>)
 800a4de:	225f      	movs	r2, #95	; 0x5f
 800a4e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


		   /* eps_n[can_0x36a].can_matrix[2] =(0x00 | ((vspeed & 0x00ff) >> 1));
		    eps_n[can_0x36a].can_matrix[3] =(vspeed >> 8);*/
		    eps_n[can_0x36a].can_matrix[2] = map(vspeed, 0, 80, 0, 0x19);
 800a4e4:	4b23      	ldr	r3, [pc, #140]	; (800a574 <update_id0x36a+0xb0>)
 800a4e6:	881b      	ldrh	r3, [r3, #0]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	2319      	movs	r3, #25
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	4610      	mov	r0, r2
 800a4f0:	2100      	movs	r1, #0
 800a4f2:	2250      	movs	r2, #80	; 0x50
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	f7ff ffb9 	bl	800a46c <map>
 800a4fa:	4603      	mov	r3, r0
 800a4fc:	b2da      	uxtb	r2, r3
 800a4fe:	4b1c      	ldr	r3, [pc, #112]	; (800a570 <update_id0x36a+0xac>)
 800a500:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		    eps_n[can_0x36a].can_matrix[3] = 0x00;//(vspeed >> 8);
 800a504:	4b1a      	ldr	r3, [pc, #104]	; (800a570 <update_id0x36a+0xac>)
 800a506:	2200      	movs	r2, #0
 800a508:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f


		    eps_n[can_0x36a].can_matrix[4] = (0x00 | ((current_rpm & 0x00ff) >> 1));
 800a50c:	4b17      	ldr	r3, [pc, #92]	; (800a56c <update_id0x36a+0xa8>)
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	b2db      	uxtb	r3, r3
 800a512:	105b      	asrs	r3, r3, #1
 800a514:	b2da      	uxtb	r2, r3
 800a516:	4b16      	ldr	r3, [pc, #88]	; (800a570 <update_id0x36a+0xac>)
 800a518:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			eps_n[can_0x36a].can_matrix[5] = (current_rpm >> 8);
 800a51c:	4b13      	ldr	r3, [pc, #76]	; (800a56c <update_id0x36a+0xa8>)
 800a51e:	881b      	ldrh	r3, [r3, #0]
 800a520:	0a1b      	lsrs	r3, r3, #8
 800a522:	b29b      	uxth	r3, r3
 800a524:	b2da      	uxtb	r2, r3
 800a526:	4b12      	ldr	r3, [pc, #72]	; (800a570 <update_id0x36a+0xac>)
 800a528:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51



			eps_n[can_0x36a].can_matrix[6] = 0x40;
 800a52c:	4b10      	ldr	r3, [pc, #64]	; (800a570 <update_id0x36a+0xac>)
 800a52e:	2240      	movs	r2, #64	; 0x40
 800a530:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			eps_n[can_0x36a].can_matrix[7] = 0x80;
 800a534:	4b0e      	ldr	r3, [pc, #56]	; (800a570 <update_id0x36a+0xac>)
 800a536:	2280      	movs	r2, #128	; 0x80
 800a538:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		    array_data = &eps_n[can_0x36a].can_matrix[0];
 800a53c:	4b0e      	ldr	r3, [pc, #56]	; (800a578 <update_id0x36a+0xb4>)
 800a53e:	60bb      	str	r3, [r7, #8]

		 //  update data for the MO to transmit
		       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[11],array_data);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a544:	4618      	mov	r0, r3
 800a546:	68b9      	ldr	r1, [r7, #8]
 800a548:	f7fe fbbe 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a54c:	4603      	mov	r3, r0
 800a54e:	71fb      	strb	r3, [r7, #7]

		       if (status == CAN_NODE_STATUS_SUCCESS)
 800a550:	79fb      	ldrb	r3, [r7, #7]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d104      	bne.n	800a560 <update_id0x36a+0x9c>
		       {
		         // message object data updated.

		         // transmit the data
		         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[11]);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fb90 	bl	8008c80 <CAN_NODE_MO_Transmit>
		       }
		       else
		       {
		         // message object failed to update.
		       }
}
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	08013dec 	.word	0x08013dec
 800a56c:	1fff522c 	.word	0x1fff522c
 800a570:	1ffe9344 	.word	0x1ffe9344
 800a574:	1fff522a 	.word	0x1fff522a
 800a578:	1ffe9390 	.word	0x1ffe9390

0800a57c <Process_Read_CAN_0x1E5>:

void Process_Read_CAN_0x1E5(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a582:	4b09      	ldr	r3, [pc, #36]	; (800a5a8 <Process_Read_CAN_0x1E5+0x2c>)
 800a584:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a586:	2318      	movs	r3, #24
 800a588:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[can_0x1E5].CAN_Data[0];
 800a58a:	4b08      	ldr	r3, [pc, #32]	; (800a5ac <Process_Read_CAN_0x1E5+0x30>)
 800a58c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a58e:	7afb      	ldrb	r3, [r7, #11]
 800a590:	68fa      	ldr	r2, [r7, #12]
 800a592:	3302      	adds	r3, #2
 800a594:	009b      	lsls	r3, r3, #2
 800a596:	4413      	add	r3, r2
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	4618      	mov	r0, r3
 800a59c:	6879      	ldr	r1, [r7, #4]
 800a59e:	f000 fa4f 	bl	800aa40 <CAN_NODE_MO_ReadData>
}
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	08013dec 	.word	0x08013dec
 800a5ac:	1ffe9258 	.word	0x1ffe9258

0800a5b0 <CAN_OUTPUT_EPS>:

void CAN_OUTPUT_EPS(void)
{
 800a5b0:	b580      	push	{r7, lr}
 800a5b2:	af00      	add	r7, sp, #0
	update_id0x4c5();
 800a5b4:	f7ff ff32 	bl	800a41c <update_id0x4c5>
	//update_id0x17d();
	update_id0x36a();
 800a5b8:	f7ff ff84 	bl	800a4c4 <update_id0x36a>
}
 800a5bc:	bd80      	pop	{r7, pc}
 800a5be:	bf00      	nop

0800a5c0 <CAN_Read_EPS>:

void CAN_Read_EPS(void)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	af00      	add	r7, sp, #0
	Read_CAN_0x1E5();
 800a5c4:	f7ff feec 	bl	800a3a0 <Read_CAN_0x1E5>
}
 800a5c8:	bd80      	pop	{r7, pc}
 800a5ca:	bf00      	nop

0800a5cc <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a5cc:	b480      	push	{r7}
 800a5ce:	b083      	sub	sp, #12
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	460b      	mov	r3, r1
 800a5d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800a5d8:	78fb      	ldrb	r3, [r7, #3]
 800a5da:	2201      	movs	r2, #1
 800a5dc:	409a      	lsls	r2, r3
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	605a      	str	r2, [r3, #4]
}
 800a5e2:	370c      	adds	r7, #12
 800a5e4:	46bd      	mov	sp, r7
 800a5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ea:	4770      	bx	lr

0800a5ec <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a5ec:	b480      	push	{r7}
 800a5ee:	b083      	sub	sp, #12
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
 800a5f4:	460b      	mov	r3, r1
 800a5f6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800a5f8:	78fb      	ldrb	r3, [r7, #3]
 800a5fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a5fe:	409a      	lsls	r2, r3
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	605a      	str	r2, [r3, #4]
}
 800a604:	370c      	adds	r7, #12
 800a606:	46bd      	mov	sp, r7
 800a608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop

0800a610 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b082      	sub	sp, #8
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	7c1b      	ldrb	r3, [r3, #16]
 800a620:	4610      	mov	r0, r2
 800a622:	4619      	mov	r1, r3
 800a624:	f7ff ffd2 	bl	800a5cc <XMC_GPIO_SetOutputHigh>
}
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
 800a62e:	bf00      	nop

0800a630 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b082      	sub	sp, #8
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681a      	ldr	r2, [r3, #0]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	7c1b      	ldrb	r3, [r3, #16]
 800a640:	4610      	mov	r0, r2
 800a642:	4619      	mov	r1, r3
 800a644:	f7ff ffd2 	bl	800a5ec <XMC_GPIO_SetOutputLow>
}
 800a648:	3708      	adds	r7, #8
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop

0800a650 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	683a      	ldr	r2, [r7, #0]
 800a660:	61da      	str	r2, [r3, #28]
}
 800a662:	370c      	adds	r7, #12
 800a664:	46bd      	mov	sp, r7
 800a666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a66a:	4770      	bx	lr

0800a66c <Process_Read_CAN_0x100>:
		{0x8000530, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0} //Tx
};


void Process_Read_CAN_0x100(void)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a672:	4b09      	ldr	r3, [pc, #36]	; (800a698 <Process_Read_CAN_0x100+0x2c>)
 800a674:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a676:	2301      	movs	r3, #1
 800a678:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[ZERO_BYTE];
 800a67a:	4b08      	ldr	r3, [pc, #32]	; (800a69c <Process_Read_CAN_0x100+0x30>)
 800a67c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a67e:	7afb      	ldrb	r3, [r7, #11]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	3302      	adds	r3, #2
 800a684:	009b      	lsls	r3, r3, #2
 800a686:	4413      	add	r3, r2
 800a688:	685b      	ldr	r3, [r3, #4]
 800a68a:	4618      	mov	r0, r3
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	f000 f9d7 	bl	800aa40 <CAN_NODE_MO_ReadData>
}
 800a692:	3710      	adds	r7, #16
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}
 800a698:	08013dec 	.word	0x08013dec
 800a69c:	1ffe93b4 	.word	0x1ffe93b4

0800a6a0 <Read_CAN_0x100>:

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
}
void Read_CAN_0x100(void)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a6a6:	4b1c      	ldr	r3, [pc, #112]	; (800a718 <Read_CAN_0x100+0x78>)
 800a6a8:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a6ae:	7afb      	ldrb	r3, [r7, #11]
 800a6b0:	68fa      	ldr	r2, [r7, #12]
 800a6b2:	3302      	adds	r3, #2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	685b      	ldr	r3, [r3, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a6be:	7afb      	ldrb	r3, [r7, #11]
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	3302      	adds	r3, #2
 800a6c4:	009b      	lsls	r3, r3, #2
 800a6c6:	4413      	add	r3, r2
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7fe fb1c 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d016      	beq.n	800a70c <Read_CAN_0x100+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	2101      	movs	r1, #1
 800a6e2:	f7ff ffb5 	bl	800a650 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a6e6:	7afb      	ldrb	r3, [r7, #11]
 800a6e8:	68fa      	ldr	r2, [r7, #12]
 800a6ea:	3302      	adds	r3, #2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	4413      	add	r3, r2
 800a6f0:	685b      	ldr	r3, [r3, #4]
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7fe fad6 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a6fc:	78bb      	ldrb	r3, [r7, #2]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d102      	bne.n	800a708 <Read_CAN_0x100+0x68>
		{
			// message object receive success.
			test = 1;
 800a702:	2301      	movs	r3, #1
 800a704:	707b      	strb	r3, [r7, #1]
 800a706:	e001      	b.n	800a70c <Read_CAN_0x100+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a708:	2300      	movs	r3, #0
 800a70a:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x100();
 800a70c:	f7ff ffae 	bl	800a66c <Process_Read_CAN_0x100>
}
 800a710:	3710      	adds	r7, #16
 800a712:	46bd      	mov	sp, r7
 800a714:	bd80      	pop	{r7, pc}
 800a716:	bf00      	nop
 800a718:	08013dec 	.word	0x08013dec

0800a71c <Read_CAN_Hifire_0x8000250>:
	Process_Read_CAN_0x248();
}

//hifire
void Read_CAN_Hifire_0x8000250(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a722:	4b1c      	ldr	r3, [pc, #112]	; (800a794 <Read_CAN_Hifire_0x8000250+0x78>)
 800a724:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a726:	2308      	movs	r3, #8
 800a728:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a72a:	7afb      	ldrb	r3, [r7, #11]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	3302      	adds	r3, #2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a73a:	7afb      	ldrb	r3, [r7, #11]
 800a73c:	68fa      	ldr	r2, [r7, #12]
 800a73e:	3302      	adds	r3, #2
 800a740:	009b      	lsls	r3, r3, #2
 800a742:	4413      	add	r3, r2
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	4618      	mov	r0, r3
 800a748:	f7fe fade 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800a74c:	4603      	mov	r3, r0
 800a74e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a750:	78fb      	ldrb	r3, [r7, #3]
 800a752:	f003 0301 	and.w	r3, r3, #1
 800a756:	2b00      	cmp	r3, #0
 800a758:	d016      	beq.n	800a788 <Read_CAN_Hifire_0x8000250+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	2101      	movs	r1, #1
 800a75e:	f7ff ff77 	bl	800a650 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a762:	7afb      	ldrb	r3, [r7, #11]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	3302      	adds	r3, #2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	4618      	mov	r0, r3
 800a770:	f7fe fa98 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800a774:	4603      	mov	r3, r0
 800a776:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a778:	78bb      	ldrb	r3, [r7, #2]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d102      	bne.n	800a784 <Read_CAN_Hifire_0x8000250+0x68>
		{
			// message object receive success.
			test = 1;
 800a77e:	2301      	movs	r3, #1
 800a780:	707b      	strb	r3, [r7, #1]
 800a782:	e001      	b.n	800a788 <Read_CAN_Hifire_0x8000250+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_CAN_Hifire_0x8000250();
 800a788:	f000 f806 	bl	800a798 <Process_CAN_Hifire_0x8000250>
}
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	08013c04 	.word	0x08013c04

0800a798 <Process_CAN_Hifire_0x8000250>:

//hifire
void Process_CAN_Hifire_0x8000250(void)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a79e:	4b11      	ldr	r3, [pc, #68]	; (800a7e4 <Process_CAN_Hifire_0x8000250+0x4c>)
 800a7a0:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a7a2:	2308      	movs	r3, #8
 800a7a4:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[ZERO_BYTE];
 800a7a6:	4b10      	ldr	r3, [pc, #64]	; (800a7e8 <Process_CAN_Hifire_0x8000250+0x50>)
 800a7a8:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a7aa:	7afb      	ldrb	r3, [r7, #11]
 800a7ac:	68fa      	ldr	r2, [r7, #12]
 800a7ae:	3302      	adds	r3, #2
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	6879      	ldr	r1, [r7, #4]
 800a7ba:	f000 f941 	bl	800aa40 <CAN_NODE_MO_ReadData>

	//get the error code
	 uint8_t error_code = (0x0F & (CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[4]));
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <Process_CAN_Hifire_0x8000250+0x54>)
 800a7c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a7c4:	f003 030f 	and.w	r3, r3, #15
 800a7c8:	70fb      	strb	r3, [r7, #3]

	if(0x00 != error_code)
 800a7ca:	78fb      	ldrb	r3, [r7, #3]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d003      	beq.n	800a7d8 <Process_CAN_Hifire_0x8000250+0x40>
	{
		error_compressor = 0x1;
 800a7d0:	4b07      	ldr	r3, [pc, #28]	; (800a7f0 <Process_CAN_Hifire_0x8000250+0x58>)
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	701a      	strb	r2, [r3, #0]
 800a7d6:	e002      	b.n	800a7de <Process_CAN_Hifire_0x8000250+0x46>
	}
	else
	{
		error_compressor = 0x0;
 800a7d8:	4b05      	ldr	r3, [pc, #20]	; (800a7f0 <Process_CAN_Hifire_0x8000250+0x58>)
 800a7da:	2200      	movs	r2, #0
 800a7dc:	701a      	strb	r2, [r3, #0]
	}
}
 800a7de:	3710      	adds	r7, #16
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	08013c04 	.word	0x08013c04
 800a7e8:	1ffe93cc 	.word	0x1ffe93cc
 800a7ec:	1ffe93a4 	.word	0x1ffe93a4
 800a7f0:	1fff5228 	.word	0x1fff5228
 800a7f4:	00000000 	.word	0x00000000

0800a7f8 <Process_CAN_0x100>:

void Process_CAN_0x100(void)
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b084      	sub	sp, #16
 800a7fc:	af00      	add	r7, sp, #0
	float pressure_in, voltage_psi;
	float pressure_value;
	uint8_t TempDegreeC;
	uint8_t AC_ON=1;
 800a7fe:	2301      	movs	r3, #1
 800a800:	73fb      	strb	r3, [r7, #15]
	static uint8_t condenser_on = 0x00;

	//get the temperature
	TempDegreeC = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0];
 800a802:	4b5f      	ldr	r3, [pc, #380]	; (800a980 <Process_CAN_0x100+0x188>)
 800a804:	7c1b      	ldrb	r3, [r3, #16]
 800a806:	73bb      	strb	r3, [r7, #14]
	//get the pressure
	pressure_in = (float) CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1];
 800a808:	4b5d      	ldr	r3, [pc, #372]	; (800a980 <Process_CAN_0x100+0x188>)
 800a80a:	7c5b      	ldrb	r3, [r3, #17]
 800a80c:	ee07 3a90 	vmov	s15, r3
 800a810:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a814:	edc7 7a02 	vstr	s15, [r7, #8]
	//get the AC switch input
	AC_ON_4g = AC_ON = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800a818:	4b59      	ldr	r3, [pc, #356]	; (800a980 <Process_CAN_0x100+0x188>)
 800a81a:	7c9b      	ldrb	r3, [r3, #18]
 800a81c:	73fb      	strb	r3, [r7, #15]
 800a81e:	7bfb      	ldrb	r3, [r7, #15]
 800a820:	2b00      	cmp	r3, #0
 800a822:	bf14      	ite	ne
 800a824:	2301      	movne	r3, #1
 800a826:	2300      	moveq	r3, #0
 800a828:	b2da      	uxtb	r2, r3
 800a82a:	4b56      	ldr	r3, [pc, #344]	; (800a984 <Process_CAN_0x100+0x18c>)
 800a82c:	701a      	strb	r2, [r3, #0]

	//AC is ON when AC_ON == 0
	//now ac is on when == 1
	//AC_ON = 1;
	if(0x01 == AC_ON)
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	2b01      	cmp	r3, #1
 800a832:	d15f      	bne.n	800a8f4 <Process_CAN_0x100+0xfc>
	{
		//convert the temperature to rpm
		if(TempDegreeC <= 28)
 800a834:	7bbb      	ldrb	r3, [r7, #14]
 800a836:	2b1c      	cmp	r3, #28
 800a838:	d813      	bhi.n	800a862 <Process_CAN_0x100+0x6a>
		{
//			rpm = (uint16_t)(((-200) * (int32_t)TempDegreeC) + 9100);        //from line eqn relating temperature to rpm

			//hifire
			rpm = (uint16_t)(((-170) * (int32_t)TempDegreeC) + 8220);        //from line eqn relating temperature to rpm
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
 800a83c:	b29b      	uxth	r3, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	0092      	lsls	r2, r2, #2
 800a842:	4413      	add	r3, r2
 800a844:	461a      	mov	r2, r3
 800a846:	0111      	lsls	r1, r2, #4
 800a848:	461a      	mov	r2, r3
 800a84a:	460b      	mov	r3, r1
 800a84c:	4413      	add	r3, r2
 800a84e:	005b      	lsls	r3, r3, #1
 800a850:	425b      	negs	r3, r3
 800a852:	b29b      	uxth	r3, r3
 800a854:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a858:	331c      	adds	r3, #28
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	4b4a      	ldr	r3, [pc, #296]	; (800a988 <Process_CAN_0x100+0x190>)
 800a85e:	801a      	strh	r2, [r3, #0]
 800a860:	e006      	b.n	800a870 <Process_CAN_0x100+0x78>
			if(Vcu_InPuts.IGNITION_1_IN)
			{//ptc turn off//
				//DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}
		else if (TempDegreeC > 28)
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	2b1c      	cmp	r3, #28
 800a866:	d903      	bls.n	800a870 <Process_CAN_0x100+0x78>
		{
			rpm = 2500;
 800a868:	4b47      	ldr	r3, [pc, #284]	; (800a988 <Process_CAN_0x100+0x190>)
 800a86a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a86e:	801a      	strh	r2, [r3, #0]
			//DIGITAL_IO_SetOutputHigh(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}

		//calculate pressure value in megaPascal
		voltage_psi = pressure_in * (5.0/1023.0);
 800a870:	68b8      	ldr	r0, [r7, #8]
 800a872:	f006 fa35 	bl	8010ce0 <__aeabi_f2d>
 800a876:	4602      	mov	r2, r0
 800a878:	460b      	mov	r3, r1
 800a87a:	4610      	mov	r0, r2
 800a87c:	4619      	mov	r1, r3
 800a87e:	a338      	add	r3, pc, #224	; (adr r3, 800a960 <Process_CAN_0x100+0x168>)
 800a880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a884:	f006 fa80 	bl	8010d88 <__aeabi_dmul>
 800a888:	4602      	mov	r2, r0
 800a88a:	460b      	mov	r3, r1
 800a88c:	4610      	mov	r0, r2
 800a88e:	4619      	mov	r1, r3
 800a890:	f006 fd5c 	bl	801134c <__aeabi_d2f>
 800a894:	4603      	mov	r3, r0
 800a896:	607b      	str	r3, [r7, #4]
		pressure_value = (voltage_psi - (0.02*5)) / (5*0.29665);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f006 fa21 	bl	8010ce0 <__aeabi_f2d>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	460b      	mov	r3, r1
 800a8a2:	4610      	mov	r0, r2
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	a330      	add	r3, pc, #192	; (adr r3, 800a968 <Process_CAN_0x100+0x170>)
 800a8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ac:	f006 f8b8 	bl	8010a20 <__aeabi_dsub>
 800a8b0:	4602      	mov	r2, r0
 800a8b2:	460b      	mov	r3, r1
 800a8b4:	4610      	mov	r0, r2
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	a32d      	add	r3, pc, #180	; (adr r3, 800a970 <Process_CAN_0x100+0x178>)
 800a8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8be:	f006 fb8d 	bl	8010fdc <__aeabi_ddiv>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	460b      	mov	r3, r1
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	4619      	mov	r1, r3
 800a8ca:	f006 fd3f 	bl	801134c <__aeabi_d2f>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	603b      	str	r3, [r7, #0]

		if(pressure_value >= HIGH_PRESSURE_mP)
 800a8d2:	6838      	ldr	r0, [r7, #0]
 800a8d4:	f006 fa04 	bl	8010ce0 <__aeabi_f2d>
 800a8d8:	4602      	mov	r2, r0
 800a8da:	460b      	mov	r3, r1
 800a8dc:	4610      	mov	r0, r2
 800a8de:	4619      	mov	r1, r3
 800a8e0:	a325      	add	r3, pc, #148	; (adr r3, 800a978 <Process_CAN_0x100+0x180>)
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f006 fcd5 	bl	8011294 <__aeabi_dcmpge>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d001      	beq.n	800a8f4 <Process_CAN_0x100+0xfc>
		{
			//AC_ON = 0x01; S
			AC_ON = 0x00; //make hole system off
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73fb      	strb	r3, [r7, #15]
//	CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1] = (rpm >> 8);

	//update CAN_MSG_DB_HVAC for 0x8000530 //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = 0x0b;        //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = 0xb8; //hifire
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = (rpm >> 8);//0x0b;        //hifire
 800a8f4:	4b24      	ldr	r3, [pc, #144]	; (800a988 <Process_CAN_0x100+0x190>)
 800a8f6:	881b      	ldrh	r3, [r3, #0]
 800a8f8:	0a1b      	lsrs	r3, r3, #8
 800a8fa:	b29b      	uxth	r3, r3
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	4b20      	ldr	r3, [pc, #128]	; (800a980 <Process_CAN_0x100+0x188>)
 800a900:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = rpm;//0xb8; //hifire
 800a904:	4b20      	ldr	r3, [pc, #128]	; (800a988 <Process_CAN_0x100+0x190>)
 800a906:	881b      	ldrh	r3, [r3, #0]
 800a908:	b2da      	uxtb	r2, r3
 800a90a:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <Process_CAN_0x100+0x188>)
 800a90c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[5] = 0x0F;       //hifire
 800a910:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <Process_CAN_0x100+0x188>)
 800a912:	220f      	movs	r2, #15
 800a914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	//error_compressor from 0x8000250
	if((0x01 == AC_ON) && (0x01 != error_compressor))
 800a918:	7bfb      	ldrb	r3, [r7, #15]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d113      	bne.n	800a946 <Process_CAN_0x100+0x14e>
 800a91e:	4b1b      	ldr	r3, [pc, #108]	; (800a98c <Process_CAN_0x100+0x194>)
 800a920:	781b      	ldrb	r3, [r3, #0]
 800a922:	b2db      	uxtb	r3, r3
 800a924:	2b01      	cmp	r3, #1
 800a926:	d00e      	beq.n	800a946 <Process_CAN_0x100+0x14e>
	{
		if(0x0 == condenser_on)
 800a928:	4b19      	ldr	r3, [pc, #100]	; (800a990 <Process_CAN_0x100+0x198>)
 800a92a:	781b      	ldrb	r3, [r3, #0]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d105      	bne.n	800a93c <Process_CAN_0x100+0x144>
//			DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
			//DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_1); // for
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			//	DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_2); // for compressor to on X
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
					   DIGITAL_IO_SetOutputHigh(&AC_RADIATOR_OUT_D); // for compressor to on
 800a930:	4818      	ldr	r0, [pc, #96]	; (800a994 <Process_CAN_0x100+0x19c>)
 800a932:	f7ff fe6d 	bl	800a610 <DIGITAL_IO_SetOutputHigh>

			condenser_on = 0x1;
 800a936:	4b16      	ldr	r3, [pc, #88]	; (800a990 <Process_CAN_0x100+0x198>)
 800a938:	2201      	movs	r2, #1
 800a93a:	701a      	strb	r2, [r3, #0]
		}

		//turn AC ON
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x01;	//setting 24th bit of CAN_0x238
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x80;	//setting 7th bit of CAN_0x8000530 //hifire
 800a93c:	4b10      	ldr	r3, [pc, #64]	; (800a980 <Process_CAN_0x100+0x188>)
 800a93e:	2280      	movs	r2, #128	; 0x80
 800a940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a944:	e009      	b.n	800a95a <Process_CAN_0x100+0x162>
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_1); // for
			//for(volatile int i = 0; i < 0xffff*4; i++);
		//if(DIGITAL_IO_GetInput(&IGNI_POS2_IN_D))
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_2);
		//if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			  DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);/// for compressor to turn off
 800a946:	4813      	ldr	r0, [pc, #76]	; (800a994 <Process_CAN_0x100+0x19c>)
 800a948:	f7ff fe72 	bl	800a630 <DIGITAL_IO_SetOutputLow>
		condenser_on = 0x0;
 800a94c:	4b10      	ldr	r3, [pc, #64]	; (800a990 <Process_CAN_0x100+0x198>)
 800a94e:	2200      	movs	r2, #0
 800a950:	701a      	strb	r2, [r3, #0]
		//}
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x00;
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x00; //hifire
 800a952:	4b0b      	ldr	r3, [pc, #44]	; (800a980 <Process_CAN_0x100+0x188>)
 800a954:	2200      	movs	r2, #0
 800a956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
}
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	40501405 	.word	0x40501405
 800a964:	3f740501 	.word	0x3f740501
 800a968:	9999999a 	.word	0x9999999a
 800a96c:	3fb99999 	.word	0x3fb99999
 800a970:	5a1cac09 	.word	0x5a1cac09
 800a974:	3ff7bb64 	.word	0x3ff7bb64
 800a978:	b851eb85 	.word	0xb851eb85
 800a97c:	3ff7851e 	.word	0x3ff7851e
 800a980:	1ffe93a4 	.word	0x1ffe93a4
 800a984:	1fff4810 	.word	0x1fff4810
 800a988:	1fff4488 	.word	0x1fff4488
 800a98c:	1fff5228 	.word	0x1fff5228
 800a990:	1fff448a 	.word	0x1fff448a
 800a994:	08013510 	.word	0x08013510

0800a998 <CAN_INPUT_HVAC>:
		// message object failed to update.
	}
}

void CAN_INPUT_HVAC(void)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	af00      	add	r7, sp, #0
	//read compressor to check error
	Read_CAN_Hifire_0x8000250();
 800a99c:	f7ff febe 	bl	800a71c <Read_CAN_Hifire_0x8000250>
	Read_CAN_0x100();
 800a9a0:	f7ff fe7e 	bl	800a6a0 <Read_CAN_0x100>
	Process_CAN_0x100();
 800a9a4:	f7ff ff28 	bl	800a7f8 <Process_CAN_0x100>
}
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop

0800a9ac <CAN_OUTPUT_COMPRESSOR>:

//for hifire
void CAN_OUTPUT_COMPRESSOR(void)
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t mo_tranmit_status, status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a9b2:	4b21      	ldr	r3, [pc, #132]	; (800aa38 <CAN_OUTPUT_COMPRESSOR+0x8c>)
 800a9b4:	617b      	str	r3, [r7, #20]
	uint8_t mo_index = 9;
 800a9b6:	2309      	movs	r3, #9
 800a9b8:	74fb      	strb	r3, [r7, #19]
	XMC_CAN_MO_t *MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a9ba:	7cfb      	ldrb	r3, [r7, #19]
 800a9bc:	697a      	ldr	r2, [r7, #20]
 800a9be:	3302      	adds	r3, #2
 800a9c0:	009b      	lsls	r3, r3, #2
 800a9c2:	4413      	add	r3, r2
 800a9c4:	685b      	ldr	r3, [r3, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	60fb      	str	r3, [r7, #12]

	/* update message's data */
	uint8_t *tempData = &CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[ZERO_BYTE];
 800a9ca:	4b1c      	ldr	r3, [pc, #112]	; (800aa3c <CAN_OUTPUT_COMPRESSOR+0x90>)
 800a9cc:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a9ce:	7cfb      	ldrb	r3, [r7, #19]
 800a9d0:	697a      	ldr	r2, [r7, #20]
 800a9d2:	3302      	adds	r3, #2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	4413      	add	r3, r2
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	68b9      	ldr	r1, [r7, #8]
 800a9de:	f7fe f973 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a9e6:	79fb      	ldrb	r3, [r7, #7]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d121      	bne.n	800aa30 <CAN_OUTPUT_COMPRESSOR+0x84>
	{
		// message object data updated.
		// transmit the data
		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[mo_index]);
 800a9ec:	7cfb      	ldrb	r3, [r7, #19]
 800a9ee:	697a      	ldr	r2, [r7, #20]
 800a9f0:	3302      	adds	r3, #2
 800a9f2:	009b      	lsls	r3, r3, #2
 800a9f4:	4413      	add	r3, r2
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	f7fe f941 	bl	8008c80 <CAN_NODE_MO_Transmit>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	71bb      	strb	r3, [r7, #6]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800aa02:	79bb      	ldrb	r3, [r7, #6]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d113      	bne.n	800aa30 <CAN_OUTPUT_COMPRESSOR+0x84>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);	//msg_count, earlier it was 0 and working
 800aa08:	7cfb      	ldrb	r3, [r7, #19]
 800aa0a:	697a      	ldr	r2, [r7, #20]
 800aa0c:	3302      	adds	r3, #2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	685b      	ldr	r3, [r3, #4]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f7fe f977 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800aa1a:	4603      	mov	r3, r0
 800aa1c:	71fb      	strb	r3, [r7, #7]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800aa1e:	79fb      	ldrb	r3, [r7, #7]
 800aa20:	f003 0302 	and.w	r3, r3, #2
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d003      	beq.n	800aa30 <CAN_OUTPUT_COMPRESSOR+0x84>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800aa28:	68f8      	ldr	r0, [r7, #12]
 800aa2a:	2102      	movs	r1, #2
 800aa2c:	f7ff fe10 	bl	800a650 <XMC_CAN_MO_ResetStatus>
	}
	else
	{
		// message object failed to update.
	}
}
 800aa30:	3718      	adds	r7, #24
 800aa32:	46bd      	mov	sp, r7
 800aa34:	bd80      	pop	{r7, pc}
 800aa36:	bf00      	nop
 800aa38:	08013c04 	.word	0x08013c04
 800aa3c:	1ffe93d8 	.word	0x1ffe93d8

0800aa40 <CAN_NODE_MO_ReadData>:
	  }
	}
}

void CAN_NODE_MO_ReadData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800aa40:	b480      	push	{r7}
 800aa42:	b085      	sub	sp, #20
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	6078      	str	r0, [r7, #4]
 800aa48:	6039      	str	r1, [r7, #0]
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	73fb      	strb	r3, [r7, #15]
 800aa4e:	e00b      	b.n	800aa68 <CAN_NODE_MO_ReadData+0x28>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
 800aa50:	7bfb      	ldrb	r3, [r7, #15]
 800aa52:	683a      	ldr	r2, [r7, #0]
 800aa54:	4413      	add	r3, r2
 800aa56:	687a      	ldr	r2, [r7, #4]
 800aa58:	6811      	ldr	r1, [r2, #0]
 800aa5a:	7bfa      	ldrb	r2, [r7, #15]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	7c12      	ldrb	r2, [r2, #16]
 800aa60:	701a      	strb	r2, [r3, #0]
{
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	3301      	adds	r3, #1
 800aa66:	73fb      	strb	r3, [r7, #15]
 800aa68:	7bfb      	ldrb	r3, [r7, #15]
 800aa6a:	2b07      	cmp	r3, #7
 800aa6c:	d9f0      	bls.n	800aa50 <CAN_NODE_MO_ReadData+0x10>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
  }
}
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <calculate_speed>:
	//perform the conversion and then store
	process_CAN_0xA6();
}

uint8_t calculate_speed(int16_t motor_rpm)
{
 800aa78:	b5b0      	push	{r4, r5, r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	80fb      	strh	r3, [r7, #6]
	const float PI = 3.14;
 800aa82:	4b2b      	ldr	r3, [pc, #172]	; (800ab30 <calculate_speed+0xb8>)
 800aa84:	617b      	str	r3, [r7, #20]
	float kmph;
	uint8_t TempSpeed;
	float wheel_rpm;
	float MPS;

	float final_drive_ratio = 9.887;    //drive train ration 9.916 , 9.89109;
 800aa86:	4b2b      	ldr	r3, [pc, #172]	; (800ab34 <calculate_speed+0xbc>)
 800aa88:	613b      	str	r3, [r7, #16]
	float SLR = 0.267; //static load radius
 800aa8a:	4b2b      	ldr	r3, [pc, #172]	; (800ab38 <calculate_speed+0xc0>)
 800aa8c:	60fb      	str	r3, [r7, #12]

//	float wheel_dia_meters = 0.55;// for tyre under load
//	float wheel_circumference_meters = wheel_dia_meters * PI; // 0.001727-> wheel diameter = 0.55 meters
//	float wheel_circumference_km = wheel_circumference_meters / 1000.0;

	motor_rpm = abs(motor_rpm);
 800aa8e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	bfb8      	it	lt
 800aa96:	425b      	neglt	r3, r3
 800aa98:	80fb      	strh	r3, [r7, #6]
		MPS = (2 * (PI) * wheel_rpm * SLR)/60;
		kmph = MPS * 3.6;

		TempSpeed = (uint8_t) kmph;*/

	motor_rpm = motor_rpm + (motor_rpm * (0.05));
 800aa9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f006 f90c 	bl	8010cbc <__aeabi_i2d>
 800aaa4:	4604      	mov	r4, r0
 800aaa6:	460d      	mov	r5, r1
 800aaa8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aaac:	4618      	mov	r0, r3
 800aaae:	f006 f905 	bl	8010cbc <__aeabi_i2d>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	4610      	mov	r0, r2
 800aab8:	4619      	mov	r1, r3
 800aaba:	a319      	add	r3, pc, #100	; (adr r3, 800ab20 <calculate_speed+0xa8>)
 800aabc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aac0:	f006 f962 	bl	8010d88 <__aeabi_dmul>
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	4620      	mov	r0, r4
 800aaca:	4629      	mov	r1, r5
 800aacc:	f005 ffaa 	bl	8010a24 <__adddf3>
 800aad0:	4602      	mov	r2, r0
 800aad2:	460b      	mov	r3, r1
 800aad4:	4610      	mov	r0, r2
 800aad6:	4619      	mov	r1, r3
 800aad8:	f006 fbf0 	bl	80112bc <__aeabi_d2iz>
 800aadc:	4603      	mov	r3, r0
 800aade:	80fb      	strh	r3, [r7, #6]
	motor_rpm *= 0.010988;/* constant given by mukul*/
 800aae0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800aae4:	4618      	mov	r0, r3
 800aae6:	f006 f8e9 	bl	8010cbc <__aeabi_i2d>
 800aaea:	4602      	mov	r2, r0
 800aaec:	460b      	mov	r3, r1
 800aaee:	4610      	mov	r0, r2
 800aaf0:	4619      	mov	r1, r3
 800aaf2:	a30d      	add	r3, pc, #52	; (adr r3, 800ab28 <calculate_speed+0xb0>)
 800aaf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf8:	f006 f946 	bl	8010d88 <__aeabi_dmul>
 800aafc:	4602      	mov	r2, r0
 800aafe:	460b      	mov	r3, r1
 800ab00:	4610      	mov	r0, r2
 800ab02:	4619      	mov	r1, r3
 800ab04:	f006 fbda 	bl	80112bc <__aeabi_d2iz>
 800ab08:	4603      	mov	r3, r0
 800ab0a:	80fb      	strh	r3, [r7, #6]
	TempSpeed = motor_rpm;
 800ab0c:	88fb      	ldrh	r3, [r7, #6]
 800ab0e:	72fb      	strb	r3, [r7, #11]

		return TempSpeed;
 800ab10:	7afb      	ldrb	r3, [r7, #11]
}
 800ab12:	4618      	mov	r0, r3
 800ab14:	3718      	adds	r7, #24
 800ab16:	46bd      	mov	sp, r7
 800ab18:	bdb0      	pop	{r4, r5, r7, pc}
 800ab1a:	bf00      	nop
 800ab1c:	f3af 8000 	nop.w
 800ab20:	9999999a 	.word	0x9999999a
 800ab24:	3fa99999 	.word	0x3fa99999
 800ab28:	65300581 	.word	0x65300581
 800ab2c:	3f8680e0 	.word	0x3f8680e0
 800ab30:	4048f5c3 	.word	0x4048f5c3
 800ab34:	411e3127 	.word	0x411e3127
 800ab38:	3e88b439 	.word	0x3e88b439
 800ab3c:	f3af 8000 	nop.w

0800ab40 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	683a      	ldr	r2, [r7, #0]
 800ab50:	61da      	str	r2, [r3, #28]
}
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <CAN_Tx_id0x10>:
		{0x33,{0x00}},
		{0x55,{0x00}}
};

void CAN_Tx_id0x10(void)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    XMC_CAN_MO_t *MO_Ptr;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ab62:	4b18      	ldr	r3, [pc, #96]	; (800abc4 <CAN_Tx_id0x10+0x68>)
 800ab64:	60fb      	str	r3, [r7, #12]
	    MO_Ptr = HandlePtr1->lmobj_ptr[16]->mo_ptr;
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	60bb      	str	r3, [r7, #8]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x10].CAN_Data[0];
 800ab6e:	4b16      	ldr	r3, [pc, #88]	; (800abc8 <CAN_Tx_id0x10+0x6c>)
 800ab70:	607b      	str	r3, [r7, #4]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[16],array_data);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab76:	4618      	mov	r0, r3
 800ab78:	6879      	ldr	r1, [r7, #4]
 800ab7a:	f7fe f8a5 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	70fb      	strb	r3, [r7, #3]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800ab82:	78fb      	ldrb	r3, [r7, #3]
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d119      	bne.n	800abbc <CAN_Tx_id0x10+0x60>
	      {
	        // message object data updated.

	        // transmit the data
	    	  status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[16]);
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe f877 	bl	8008c80 <CAN_NODE_MO_Transmit>
 800ab92:	4603      	mov	r3, r0
 800ab94:	70fb      	strb	r3, [r7, #3]
	    	  if (status == CAN_NODE_STATUS_SUCCESS)
 800ab96:	78fb      	ldrb	r3, [r7, #3]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d10f      	bne.n	800abbc <CAN_Tx_id0x10+0x60>
	    	  {
	    	       status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[16]);
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aba0:	4618      	mov	r0, r3
 800aba2:	f7fe f8b1 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800aba6:	4603      	mov	r3, r0
 800aba8:	70fb      	strb	r3, [r7, #3]

	    	        if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	f003 0302 	and.w	r3, r3, #2
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d003      	beq.n	800abbc <CAN_Tx_id0x10+0x60>
	    	        {
	    	          //Clear the transmit OK flag
	    	          XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800abb4:	68b8      	ldr	r0, [r7, #8]
 800abb6:	2102      	movs	r1, #2
 800abb8:	f7ff ffc2 	bl	800ab40 <XMC_CAN_MO_ResetStatus>
	      else
	      {
	        // message object failed to update.
	      }

}
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	bf00      	nop
 800abc4:	08013dec 	.word	0x08013dec
 800abc8:	1ffe9444 	.word	0x1ffe9444

0800abcc <CAN_Tx_id0x20>:

void CAN_Tx_id0x20(void)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b084      	sub	sp, #16
 800abd0:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800abd2:	4b0b      	ldr	r3, [pc, #44]	; (800ac00 <CAN_Tx_id0x20+0x34>)
 800abd4:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x20].CAN_Data[0];
 800abd6:	4b0b      	ldr	r3, [pc, #44]	; (800ac04 <CAN_Tx_id0x20+0x38>)
 800abd8:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[17],array_data);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abde:	4618      	mov	r0, r3
 800abe0:	68b9      	ldr	r1, [r7, #8]
 800abe2:	f7fe f871 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800abe6:	4603      	mov	r3, r0
 800abe8:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800abea:	79fb      	ldrb	r3, [r7, #7]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d104      	bne.n	800abfa <CAN_Tx_id0x20+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[17]);
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe f843 	bl	8008c80 <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}
 800ac00:	08013dec 	.word	0x08013dec
 800ac04:	1ffe9474 	.word	0x1ffe9474

0800ac08 <CAN_Tx_id0x21>:

void CAN_Tx_id0x21(void)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ac0e:	4b0c      	ldr	r3, [pc, #48]	; (800ac40 <CAN_Tx_id0x21+0x38>)
 800ac10:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x21].CAN_Data[0];
 800ac12:	4b0c      	ldr	r3, [pc, #48]	; (800ac44 <CAN_Tx_id0x21+0x3c>)
 800ac14:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[18],array_data);
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	68b9      	ldr	r1, [r7, #8]
 800ac1e:	f7fe f853 	bl	8008cc8 <CAN_NODE_MO_UpdateData>
 800ac22:	4603      	mov	r3, r0
 800ac24:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800ac26:	79fb      	ldrb	r3, [r7, #7]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d106      	bne.n	800ac3a <CAN_Tx_id0x21+0x32>
	      {
	        // message object data updated.

	        // transmit the data
	    	  status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[18]);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac30:	4618      	mov	r0, r3
 800ac32:	f7fe f825 	bl	8008c80 <CAN_NODE_MO_Transmit>
 800ac36:	4603      	mov	r3, r0
 800ac38:	71fb      	strb	r3, [r7, #7]
	      else
	      {
	        // message object failed to update.
	      }

}
 800ac3a:	3710      	adds	r7, #16
 800ac3c:	46bd      	mov	sp, r7
 800ac3e:	bd80      	pop	{r7, pc}
 800ac40:	08013dec 	.word	0x08013dec
 800ac44:	1ffe9480 	.word	0x1ffe9480

0800ac48 <CAN_Rx_id0x13>:

void CAN_Rx_id0x13(void)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ac4e:	4b1c      	ldr	r3, [pc, #112]	; (800acc0 <CAN_Rx_id0x13+0x78>)
 800ac50:	60fb      	str	r3, [r7, #12]

    mo_index = 19;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800ac52:	2313      	movs	r3, #19
 800ac54:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ac56:	7afb      	ldrb	r3, [r7, #11]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	3302      	adds	r3, #2
 800ac5c:	009b      	lsls	r3, r3, #2
 800ac5e:	4413      	add	r3, r2
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	3302      	adds	r3, #2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	4413      	add	r3, r2
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f7fe f848 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800ac7c:	78fb      	ldrb	r3, [r7, #3]
 800ac7e:	f003 0301 	and.w	r3, r3, #1
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d016      	beq.n	800acb4 <CAN_Rx_id0x13+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	2101      	movs	r1, #1
 800ac8a:	f7ff ff59 	bl	800ab40 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	68fa      	ldr	r2, [r7, #12]
 800ac92:	3302      	adds	r3, #2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe f802 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800aca0:	4603      	mov	r3, r0
 800aca2:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aca4:	78bb      	ldrb	r3, [r7, #2]
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d102      	bne.n	800acb0 <CAN_Rx_id0x13+0x68>
      {
        // message object receive success.
          test = 1;
 800acaa:	2301      	movs	r3, #1
 800acac:	707b      	strb	r3, [r7, #1]
 800acae:	e001      	b.n	800acb4 <CAN_Rx_id0x13+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800acb0:	2300      	movs	r3, #0
 800acb2:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x13();
 800acb4:	f000 f884 	bl	800adc0 <process_Rx_CAN_0x13>
}
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	08013dec 	.word	0x08013dec

0800acc4 <CAN_Rx_id0x12>:


void CAN_Rx_id0x12(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b084      	sub	sp, #16
 800acc8:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800acca:	4b1c      	ldr	r3, [pc, #112]	; (800ad3c <CAN_Rx_id0x12+0x78>)
 800accc:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800acce:	2314      	movs	r3, #20
 800acd0:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800acd2:	7afb      	ldrb	r3, [r7, #11]
 800acd4:	68fa      	ldr	r2, [r7, #12]
 800acd6:	3302      	adds	r3, #2
 800acd8:	009b      	lsls	r3, r3, #2
 800acda:	4413      	add	r3, r2
 800acdc:	685b      	ldr	r3, [r3, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800ace2:	7afb      	ldrb	r3, [r7, #11]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	3302      	adds	r3, #2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	4413      	add	r3, r2
 800acec:	685b      	ldr	r3, [r3, #4]
 800acee:	4618      	mov	r0, r3
 800acf0:	f7fe f80a 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800acf4:	4603      	mov	r3, r0
 800acf6:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800acf8:	78fb      	ldrb	r3, [r7, #3]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d016      	beq.n	800ad30 <CAN_Rx_id0x12+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	2101      	movs	r1, #1
 800ad06:	f7ff ff1b 	bl	800ab40 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800ad0a:	7afb      	ldrb	r3, [r7, #11]
 800ad0c:	68fa      	ldr	r2, [r7, #12]
 800ad0e:	3302      	adds	r3, #2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	4618      	mov	r0, r3
 800ad18:	f7fd ffc4 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800ad20:	78bb      	ldrb	r3, [r7, #2]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d102      	bne.n	800ad2c <CAN_Rx_id0x12+0x68>
      {
        // message object receive success.
          test = 1;
 800ad26:	2301      	movs	r3, #1
 800ad28:	707b      	strb	r3, [r7, #1]
 800ad2a:	e001      	b.n	800ad30 <CAN_Rx_id0x12+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x12();
 800ad30:	f000 f9ae 	bl	800b090 <process_Rx_CAN_0x12>
}
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	08013dec 	.word	0x08013dec

0800ad40 <CAN_Rx_id0x30>:


void CAN_Rx_id0x30(void)
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ad46:	4b1c      	ldr	r3, [pc, #112]	; (800adb8 <CAN_Rx_id0x30+0x78>)
 800ad48:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800ad4a:	2315      	movs	r3, #21
 800ad4c:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ad4e:	7afb      	ldrb	r3, [r7, #11]
 800ad50:	68fa      	ldr	r2, [r7, #12]
 800ad52:	3302      	adds	r3, #2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	4413      	add	r3, r2
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800ad5e:	7afb      	ldrb	r3, [r7, #11]
 800ad60:	68fa      	ldr	r2, [r7, #12]
 800ad62:	3302      	adds	r3, #2
 800ad64:	009b      	lsls	r3, r3, #2
 800ad66:	4413      	add	r3, r2
 800ad68:	685b      	ldr	r3, [r3, #4]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	f7fd ffcc 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800ad70:	4603      	mov	r3, r0
 800ad72:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800ad74:	78fb      	ldrb	r3, [r7, #3]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d016      	beq.n	800adac <CAN_Rx_id0x30+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	2101      	movs	r1, #1
 800ad82:	f7ff fedd 	bl	800ab40 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800ad86:	7afb      	ldrb	r3, [r7, #11]
 800ad88:	68fa      	ldr	r2, [r7, #12]
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	009b      	lsls	r3, r3, #2
 800ad8e:	4413      	add	r3, r2
 800ad90:	685b      	ldr	r3, [r3, #4]
 800ad92:	4618      	mov	r0, r3
 800ad94:	f7fd ff86 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800ad98:	4603      	mov	r3, r0
 800ad9a:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800ad9c:	78bb      	ldrb	r3, [r7, #2]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d102      	bne.n	800ada8 <CAN_Rx_id0x30+0x68>
      {
        // message object receive success.
          test = 1;
 800ada2:	2301      	movs	r3, #1
 800ada4:	707b      	strb	r3, [r7, #1]
 800ada6:	e001      	b.n	800adac <CAN_Rx_id0x30+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800ada8:	2300      	movs	r3, #0
 800adaa:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x30();
 800adac:	f000 f99c 	bl	800b0e8 <process_Rx_CAN_0x30>
}
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}
 800adb6:	bf00      	nop
 800adb8:	08013dec 	.word	0x08013dec
 800adbc:	00000000 	.word	0x00000000

0800adc0 <process_Rx_CAN_0x13>:


void process_Rx_CAN_0x13(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b090      	sub	sp, #64	; 0x40
 800adc4:	af02      	add	r7, sp, #8
    int8_t mo_index, *tempData;
    uint8_t CAN_rawData[8];
    uint16_t ThrottlePercentage = 6;
 800adc6:	2306      	movs	r3, #6
 800adc8:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t VehSpeed;
    int16_t c = 0, c2 = 0;
 800adca:	2300      	movs	r3, #0
 800adcc:	867b      	strh	r3, [r7, #50]	; 0x32
 800adce:	2300      	movs	r3, #0
 800add0:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t c1 = 0, c3 = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800add6:	2300      	movs	r3, #0
 800add8:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800adda:	4b9f      	ldr	r3, [pc, #636]	; (800b058 <process_Rx_CAN_0x13+0x298>)
 800addc:	62bb      	str	r3, [r7, #40]	; 0x28

    mo_index = 19;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800adde:	2313      	movs	r3, #19
 800ade0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x13].CAN_Data[ZERO_BYTE];
 800ade4:	4b9d      	ldr	r3, [pc, #628]	; (800b05c <process_Rx_CAN_0x13+0x29c>)
 800ade6:	623b      	str	r3, [r7, #32]
    Irp_Mcu_Torques_29bit->Speed_rpm = 0;
 800ade8:	4b9d      	ldr	r3, [pc, #628]	; (800b060 <process_Rx_CAN_0x13+0x2a0>)
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2200      	movs	r2, #0
 800adee:	701a      	strb	r2, [r3, #0]
 800adf0:	785a      	ldrb	r2, [r3, #1]
 800adf2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800adf6:	705a      	strb	r2, [r3, #1]
   // Irp_Mcu_Torques_29bit->DC_Current = 0;
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800adf8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800adfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800adfe:	3302      	adds	r3, #2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	6a39      	ldr	r1, [r7, #32]
 800ae0a:	f7ff fe19 	bl	800aa40 <CAN_NODE_MO_ReadData>

    RPM = Irp_Mcu_Torques_29bit->Speed_rpm;
 800ae0e:	4b94      	ldr	r3, [pc, #592]	; (800b060 <process_Rx_CAN_0x13+0x2a0>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	785b      	ldrb	r3, [r3, #1]
 800ae16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae1a:	021b      	lsls	r3, r3, #8
 800ae1c:	4313      	orrs	r3, r2
 800ae1e:	045b      	lsls	r3, r3, #17
 800ae20:	145b      	asrs	r3, r3, #17
 800ae22:	b29b      	uxth	r3, r3
 800ae24:	b29a      	uxth	r2, r3
 800ae26:	4b8f      	ldr	r3, [pc, #572]	; (800b064 <process_Rx_CAN_0x13+0x2a4>)
 800ae28:	801a      	strh	r2, [r3, #0]
    Torque_Estimation = Irp_Mcu_Torques_29bit ->Torque_Estimation;
 800ae2a:	4b8d      	ldr	r3, [pc, #564]	; (800b060 <process_Rx_CAN_0x13+0x2a0>)
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	785a      	ldrb	r2, [r3, #1]
 800ae30:	09d2      	lsrs	r2, r2, #7
 800ae32:	b2d2      	uxtb	r2, r2
 800ae34:	7899      	ldrb	r1, [r3, #2]
 800ae36:	0049      	lsls	r1, r1, #1
 800ae38:	430a      	orrs	r2, r1
 800ae3a:	78db      	ldrb	r3, [r3, #3]
 800ae3c:	f003 030f 	and.w	r3, r3, #15
 800ae40:	025b      	lsls	r3, r3, #9
 800ae42:	4313      	orrs	r3, r2
 800ae44:	04db      	lsls	r3, r3, #19
 800ae46:	14db      	asrs	r3, r3, #19
 800ae48:	b29b      	uxth	r3, r3
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	4b86      	ldr	r3, [pc, #536]	; (800b068 <process_Rx_CAN_0x13+0x2a8>)
 800ae4e:	801a      	strh	r2, [r3, #0]
    //DC_Current_irp = (int)Irp_Mcu_Torques_29bit->DC_Current;
   // c = (int)Irp_Mcu_Torques_29bit->DC_Voltage;
   // c1 = (uint16_t)Irp_Mcu_Torques_29bit->DC_Voltage;
    //DC_Voltage_irp = Irp_Mcu_Torques_29bit->DC_Voltage;
   // DC_Current_irp = ((((uint8_t)tempData[3]) >> 4) | ((int)(tempData[4] & 0x7f) << 4));
    DC_Current_irp = (int)(((int16_t)(tempData[4] & 0x7f) << 4) | (((int16_t)tempData[3] >> 4)) & 0x0f);
 800ae50:	6a3b      	ldr	r3, [r7, #32]
 800ae52:	3304      	adds	r3, #4
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	b29a      	uxth	r2, r3
 800ae60:	6a3b      	ldr	r3, [r7, #32]
 800ae62:	3303      	adds	r3, #3
 800ae64:	781b      	ldrb	r3, [r3, #0]
 800ae66:	b25b      	sxtb	r3, r3
 800ae68:	111b      	asrs	r3, r3, #4
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	b29b      	uxth	r3, r3
 800ae70:	f003 030f 	and.w	r3, r3, #15
 800ae74:	b29b      	uxth	r3, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	b29a      	uxth	r2, r3
 800ae7a:	4b7c      	ldr	r3, [pc, #496]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800ae7c:	801a      	strh	r2, [r3, #0]
    c2 = DC_Current_irp;//(tempData[3] >> 4);
 800ae7e:	4b7b      	ldr	r3, [pc, #492]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800ae80:	881b      	ldrh	r3, [r3, #0]
 800ae82:	863b      	strh	r3, [r7, #48]	; 0x30
    c3 = ((uint16_t)((uint8_t)tempData[4] & 0x7f) << 4);
 800ae84:	6a3b      	ldr	r3, [r7, #32]
 800ae86:	3304      	adds	r3, #4
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae90:	011b      	lsls	r3, r3, #4
 800ae92:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(c2 < 0)
 800ae94:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	da02      	bge.n	800aea2 <process_Rx_CAN_0x13+0xe2>
    {
    	int a;
    	a++;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	3301      	adds	r3, #1
 800aea0:	61fb      	str	r3, [r7, #28]
        //c3 = ((int16_t)((int16_t)tempData[4] & 0x7f) << 4) | 0xffffffff;
    }

    c = c3 | c2;
 800aea2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800aea4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800aea6:	4313      	orrs	r3, r2
 800aea8:	867b      	strh	r3, [r7, #50]	; 0x32
    DC_Voltage_irp = ((((uint16_t)tempData[6] & 0x0f) << 9) | (((uint16_t)tempData[5] << 1) | 0/*((uint16_t)tempData[4] >> 7) & 0x01*/))/10;
 800aeaa:	6a3b      	ldr	r3, [r7, #32]
 800aeac:	3306      	adds	r3, #6
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	b25b      	sxtb	r3, r3
 800aeb2:	b29b      	uxth	r3, r3
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	025a      	lsls	r2, r3, #9
 800aeba:	6a3b      	ldr	r3, [r7, #32]
 800aebc:	3305      	adds	r3, #5
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	b25b      	sxtb	r3, r3
 800aec2:	b29b      	uxth	r3, r3
 800aec4:	005b      	lsls	r3, r3, #1
 800aec6:	4313      	orrs	r3, r2
 800aec8:	4a69      	ldr	r2, [pc, #420]	; (800b070 <process_Rx_CAN_0x13+0x2b0>)
 800aeca:	fb82 1203 	smull	r1, r2, r2, r3
 800aece:	1092      	asrs	r2, r2, #2
 800aed0:	17db      	asrs	r3, r3, #31
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	b29a      	uxth	r2, r3
 800aed6:	4b67      	ldr	r3, [pc, #412]	; (800b074 <process_Rx_CAN_0x13+0x2b4>)
 800aed8:	801a      	strh	r2, [r3, #0]

    MotorPower_Irp = DC_Current_irp * DC_Voltage_irp;
 800aeda:	4b64      	ldr	r3, [pc, #400]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800aedc:	881b      	ldrh	r3, [r3, #0]
 800aede:	b29a      	uxth	r2, r3
 800aee0:	4b64      	ldr	r3, [pc, #400]	; (800b074 <process_Rx_CAN_0x13+0x2b4>)
 800aee2:	881b      	ldrh	r3, [r3, #0]
 800aee4:	fb12 f303 	smulbb	r3, r2, r3
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	b29a      	uxth	r2, r3
 800aeec:	4b62      	ldr	r3, [pc, #392]	; (800b078 <process_Rx_CAN_0x13+0x2b8>)
 800aeee:	801a      	strh	r2, [r3, #0]
    if(c < -1)
 800aef0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800aef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aef8:	da02      	bge.n	800af00 <process_Rx_CAN_0x13+0x140>
    {
    	int a;
    	   a++;
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	3301      	adds	r3, #1
 800aefe:	61bb      	str	r3, [r7, #24]

    }
    if(Torque_Estimation > 1)
 800af00:	4b59      	ldr	r3, [pc, #356]	; (800b068 <process_Rx_CAN_0x13+0x2a8>)
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b21b      	sxth	r3, r3
 800af06:	2b01      	cmp	r3, #1
 800af08:	dd02      	ble.n	800af10 <process_Rx_CAN_0x13+0x150>
    {
    	int a;
    	a++;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	3301      	adds	r3, #1
 800af0e:	617b      	str	r3, [r7, #20]
    }
    if(Torque_Estimation < -5)
 800af10:	4b55      	ldr	r3, [pc, #340]	; (800b068 <process_Rx_CAN_0x13+0x2a8>)
 800af12:	881b      	ldrh	r3, [r3, #0]
 800af14:	b21b      	sxth	r3, r3
 800af16:	f113 0f05 	cmn.w	r3, #5
 800af1a:	da02      	bge.n	800af22 <process_Rx_CAN_0x13+0x162>
    {
    	int a;
    	a++;
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	3301      	adds	r3, #1
 800af20:	613b      	str	r3, [r7, #16]

    }
    Regenration_flag = 0;
 800af22:	4b56      	ldr	r3, [pc, #344]	; (800b07c <process_Rx_CAN_0x13+0x2bc>)
 800af24:	2200      	movs	r2, #0
 800af26:	701a      	strb	r2, [r3, #0]
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
 800af28:	4b50      	ldr	r3, [pc, #320]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800af2a:	881b      	ldrh	r3, [r3, #0]
 800af2c:	b21b      	sxth	r3, r3
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dd08      	ble.n	800af44 <process_Rx_CAN_0x13+0x184>
 800af32:	4b4e      	ldr	r3, [pc, #312]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800af34:	881b      	ldrh	r3, [r3, #0]
 800af36:	b21b      	sxth	r3, r3
 800af38:	2b32      	cmp	r3, #50	; 0x32
 800af3a:	dc03      	bgt.n	800af44 <process_Rx_CAN_0x13+0x184>
{
	int a;
	a++;
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	3301      	adds	r3, #1
 800af40:	60fb      	str	r3, [r7, #12]
    	a++;

    }
    Regenration_flag = 0;
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
{
 800af42:	e00f      	b.n	800af64 <process_Rx_CAN_0x13+0x1a4>
	int a;
	a++;
}
else if(DC_Current_irp == 0)
 800af44:	4b49      	ldr	r3, [pc, #292]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800af46:	881b      	ldrh	r3, [r3, #0]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00b      	beq.n	800af64 <process_Rx_CAN_0x13+0x1a4>
{
//Regenration_flag = 1;
}
else if(DC_Current_irp > 2000)
 800af4c:	4b47      	ldr	r3, [pc, #284]	; (800b06c <process_Rx_CAN_0x13+0x2ac>)
 800af4e:	881b      	ldrh	r3, [r3, #0]
 800af50:	b21b      	sxth	r3, r3
 800af52:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800af56:	dd05      	ble.n	800af64 <process_Rx_CAN_0x13+0x1a4>
{
	int a;
	a++;
 800af58:	68bb      	ldr	r3, [r7, #8]
 800af5a:	3301      	adds	r3, #1
 800af5c:	60bb      	str	r3, [r7, #8]
	Regenration_flag = 1;
 800af5e:	4b47      	ldr	r3, [pc, #284]	; (800b07c <process_Rx_CAN_0x13+0x2bc>)
 800af60:	2201      	movs	r2, #1
 800af62:	701a      	strb	r2, [r3, #0]
}
    VehSpeed = calculate_speed(RPM);
 800af64:	4b3f      	ldr	r3, [pc, #252]	; (800b064 <process_Rx_CAN_0x13+0x2a4>)
 800af66:	881b      	ldrh	r3, [r3, #0]
 800af68:	b29b      	uxth	r3, r3
 800af6a:	b21b      	sxth	r3, r3
 800af6c:	4618      	mov	r0, r3
 800af6e:	f7ff fd83 	bl	800aa78 <calculate_speed>
 800af72:	4603      	mov	r3, r0
 800af74:	86fb      	strh	r3, [r7, #54]	; 0x36

    speed_4g=VehSpeed;
 800af76:	4a42      	ldr	r2, [pc, #264]	; (800b080 <process_Rx_CAN_0x13+0x2c0>)
 800af78:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af7a:	8013      	strh	r3, [r2, #0]

    if(VehSpeed > 100)
 800af7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800af7e:	2b64      	cmp	r3, #100	; 0x64
 800af80:	d901      	bls.n	800af86 <process_Rx_CAN_0x13+0x1c6>
        VehSpeed = 100;
 800af82:	2364      	movs	r3, #100	; 0x64
 800af84:	86fb      	strh	r3, [r7, #54]	; 0x36

    ThrottlePercentage =  map(VehSpeed, 0, 100, 6200, 64000);
 800af86:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800af88:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800af8c:	9300      	str	r3, [sp, #0]
 800af8e:	4610      	mov	r0, r2
 800af90:	2100      	movs	r1, #0
 800af92:	2264      	movs	r2, #100	; 0x64
 800af94:	f641 0338 	movw	r3, #6200	; 0x1838
 800af98:	f7ff fa68 	bl	800a46c <map>
 800af9c:	4603      	mov	r3, r0
 800af9e:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBDII_CAN[can_0x04].CAN_Data[3] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[THIRD_BYTE] = ThrottlePercentage;
 800afa0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afa2:	b2da      	uxtb	r2, r3
 800afa4:	4b37      	ldr	r3, [pc, #220]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800afa6:	74da      	strb	r2, [r3, #19]
 800afa8:	4b36      	ldr	r3, [pc, #216]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800afaa:	7cdb      	ldrb	r3, [r3, #19]
 800afac:	b2da      	uxtb	r2, r3
 800afae:	4b36      	ldr	r3, [pc, #216]	; (800b088 <process_Rx_CAN_0x13+0x2c8>)
 800afb0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    OBDII_CAN[can_0x04].CAN_Data[2] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[FOURTH_BYTE] = (ThrottlePercentage >> 8);
 800afb4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800afb6:	0a1b      	lsrs	r3, r3, #8
 800afb8:	b29b      	uxth	r3, r3
 800afba:	b2da      	uxtb	r2, r3
 800afbc:	4b31      	ldr	r3, [pc, #196]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800afbe:	751a      	strb	r2, [r3, #20]
 800afc0:	4b30      	ldr	r3, [pc, #192]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800afc2:	7d1b      	ldrb	r3, [r3, #20]
 800afc4:	b2da      	uxtb	r2, r3
 800afc6:	4b30      	ldr	r3, [pc, #192]	; (800b088 <process_Rx_CAN_0x13+0x2c8>)
 800afc8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    VehicleSpeedglb = VehSpeed;
 800afcc:	4a2f      	ldr	r2, [pc, #188]	; (800b08c <process_Rx_CAN_0x13+0x2cc>)
 800afce:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800afd0:	8013      	strh	r3, [r2, #0]

    if(VehSpeed)
 800afd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d01d      	beq.n	800b014 <process_Rx_CAN_0x13+0x254>
    	VehSpeed = 104.11* VehSpeed + 226.99;
 800afd8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800afda:	4618      	mov	r0, r3
 800afdc:	f005 fe6e 	bl	8010cbc <__aeabi_i2d>
 800afe0:	4602      	mov	r2, r0
 800afe2:	460b      	mov	r3, r1
 800afe4:	4610      	mov	r0, r2
 800afe6:	4619      	mov	r1, r3
 800afe8:	a317      	add	r3, pc, #92	; (adr r3, 800b048 <process_Rx_CAN_0x13+0x288>)
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f005 fecb 	bl	8010d88 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	4610      	mov	r0, r2
 800aff8:	4619      	mov	r1, r3
 800affa:	a315      	add	r3, pc, #84	; (adr r3, 800b050 <process_Rx_CAN_0x13+0x290>)
 800affc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b000:	f005 fd10 	bl	8010a24 <__adddf3>
 800b004:	4602      	mov	r2, r0
 800b006:	460b      	mov	r3, r1
 800b008:	4610      	mov	r0, r2
 800b00a:	4619      	mov	r1, r3
 800b00c:	f006 f97e 	bl	801130c <__aeabi_d2uiz>
 800b010:	4603      	mov	r3, r0
 800b012:	86fb      	strh	r3, [r7, #54]	; 0x36

    OBDII_CAN[can_0x04].CAN_Data[5] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[FIFTH_BYTE] = (VehSpeed);
 800b014:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b016:	b2da      	uxtb	r2, r3
 800b018:	4b1a      	ldr	r3, [pc, #104]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800b01a:	725a      	strb	r2, [r3, #9]
 800b01c:	4b19      	ldr	r3, [pc, #100]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800b01e:	7a5b      	ldrb	r3, [r3, #9]
 800b020:	b2da      	uxtb	r2, r3
 800b022:	4b19      	ldr	r3, [pc, #100]	; (800b088 <process_Rx_CAN_0x13+0x2c8>)
 800b024:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OBDII_CAN[can_0x04].CAN_Data[4] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[SIXTH_BYTE] = (VehSpeed >> 8U);
 800b028:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b02a:	0a1b      	lsrs	r3, r3, #8
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	b2da      	uxtb	r2, r3
 800b030:	4b14      	ldr	r3, [pc, #80]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800b032:	729a      	strb	r2, [r3, #10]
 800b034:	4b13      	ldr	r3, [pc, #76]	; (800b084 <process_Rx_CAN_0x13+0x2c4>)
 800b036:	7a9b      	ldrb	r3, [r3, #10]
 800b038:	b2da      	uxtb	r2, r3
 800b03a:	4b13      	ldr	r3, [pc, #76]	; (800b088 <process_Rx_CAN_0x13+0x2c8>)
 800b03c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    //VehicleSpeedglb = VehSpeed;
}
 800b040:	3738      	adds	r7, #56	; 0x38
 800b042:	46bd      	mov	sp, r7
 800b044:	bd80      	pop	{r7, pc}
 800b046:	bf00      	nop
 800b048:	3d70a3d7 	.word	0x3d70a3d7
 800b04c:	405a070a 	.word	0x405a070a
 800b050:	147ae148 	.word	0x147ae148
 800b054:	406c5fae 	.word	0x406c5fae
 800b058:	08013dec 	.word	0x08013dec
 800b05c:	1ffe9468 	.word	0x1ffe9468
 800b060:	1ffe8820 	.word	0x1ffe8820
 800b064:	1fff4814 	.word	0x1fff4814
 800b068:	1fff483a 	.word	0x1fff483a
 800b06c:	1fff47fe 	.word	0x1fff47fe
 800b070:	66666667 	.word	0x66666667
 800b074:	1fff48a0 	.word	0x1fff48a0
 800b078:	1fff4886 	.word	0x1fff4886
 800b07c:	1fff48d6 	.word	0x1fff48d6
 800b080:	1fff482c 	.word	0x1fff482c
 800b084:	1ffe92d8 	.word	0x1ffe92d8
 800b088:	1ffe9218 	.word	0x1ffe9218
 800b08c:	1fff4812 	.word	0x1fff4812

0800b090 <process_Rx_CAN_0x12>:

void process_Rx_CAN_0x12(void)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b084      	sub	sp, #16
 800b094:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800b096:	4b0f      	ldr	r3, [pc, #60]	; (800b0d4 <process_Rx_CAN_0x12+0x44>)
 800b098:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800b09a:	2314      	movs	r3, #20
 800b09c:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x12].CAN_Data[ZERO_BYTE];
 800b09e:	4b0e      	ldr	r3, [pc, #56]	; (800b0d8 <process_Rx_CAN_0x12+0x48>)
 800b0a0:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b0a2:	7afb      	ldrb	r3, [r7, #11]
 800b0a4:	68fa      	ldr	r2, [r7, #12]
 800b0a6:	3302      	adds	r3, #2
 800b0a8:	009b      	lsls	r3, r3, #2
 800b0aa:	4413      	add	r3, r2
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	6879      	ldr	r1, [r7, #4]
 800b0b2:	f7ff fcc5 	bl	800aa40 <CAN_NODE_MO_ReadData>

    Mcu_Temp_Irp = Irp_MCU_Status_29bit->MCU_temp;
 800b0b6:	4b09      	ldr	r3, [pc, #36]	; (800b0dc <process_Rx_CAN_0x12+0x4c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	78db      	ldrb	r3, [r3, #3]
 800b0bc:	b29a      	uxth	r2, r3
 800b0be:	4b08      	ldr	r3, [pc, #32]	; (800b0e0 <process_Rx_CAN_0x12+0x50>)
 800b0c0:	801a      	strh	r2, [r3, #0]
    Motor_Temp_Irp = Irp_MCU_Status_29bit->Motor_temp;
 800b0c2:	4b06      	ldr	r3, [pc, #24]	; (800b0dc <process_Rx_CAN_0x12+0x4c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	789b      	ldrb	r3, [r3, #2]
 800b0c8:	b29a      	uxth	r2, r3
 800b0ca:	4b06      	ldr	r3, [pc, #24]	; (800b0e4 <process_Rx_CAN_0x12+0x54>)
 800b0cc:	801a      	strh	r2, [r3, #0]
}
 800b0ce:	3710      	adds	r7, #16
 800b0d0:	46bd      	mov	sp, r7
 800b0d2:	bd80      	pop	{r7, pc}
 800b0d4:	08013dec 	.word	0x08013dec
 800b0d8:	1ffe945c 	.word	0x1ffe945c
 800b0dc:	1ffe8828 	.word	0x1ffe8828
 800b0e0:	1fff4822 	.word	0x1fff4822
 800b0e4:	1fff48d0 	.word	0x1fff48d0

0800b0e8 <process_Rx_CAN_0x30>:

void process_Rx_CAN_0x30(void)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b084      	sub	sp, #16
 800b0ec:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800b0ee:	4b09      	ldr	r3, [pc, #36]	; (800b114 <process_Rx_CAN_0x30+0x2c>)
 800b0f0:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800b0f2:	2315      	movs	r3, #21
 800b0f4:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x30].CAN_Data[ZERO_BYTE];
 800b0f6:	4b08      	ldr	r3, [pc, #32]	; (800b118 <process_Rx_CAN_0x30+0x30>)
 800b0f8:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b0fa:	7afb      	ldrb	r3, [r7, #11]
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	3302      	adds	r3, #2
 800b100:	009b      	lsls	r3, r3, #2
 800b102:	4413      	add	r3, r2
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	4618      	mov	r0, r3
 800b108:	6879      	ldr	r1, [r7, #4]
 800b10a:	f7ff fc99 	bl	800aa40 <CAN_NODE_MO_ReadData>
}
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}
 800b114:	08013dec 	.word	0x08013dec
 800b118:	1ffe948c 	.word	0x1ffe948c

0800b11c <Irp_Tx_29bit>:


void Irp_Tx_29bit(void)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	af00      	add	r7, sp, #0
	CAN_Tx_id0x10();
 800b120:	f7ff fd1c 	bl	800ab5c <CAN_Tx_id0x10>
	CAN_Tx_id0x20();
 800b124:	f7ff fd52 	bl	800abcc <CAN_Tx_id0x20>
	CAN_Tx_id0x21();
 800b128:	f7ff fd6e 	bl	800ac08 <CAN_Tx_id0x21>
}
 800b12c:	bd80      	pop	{r7, pc}
 800b12e:	bf00      	nop

0800b130 <Irp_Rx_29bit>:

void Irp_Rx_29bit(void)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	af00      	add	r7, sp, #0
	CAN_Rx_id0x13();
 800b134:	f7ff fd88 	bl	800ac48 <CAN_Rx_id0x13>
	CAN_Rx_id0x12();
 800b138:	f7ff fdc4 	bl	800acc4 <CAN_Rx_id0x12>
	CAN_Rx_id0x30();
 800b13c:	f7ff fe00 	bl	800ad40 <CAN_Rx_id0x30>
}
 800b140:	bd80      	pop	{r7, pc}
 800b142:	bf00      	nop

0800b144 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800b144:	b480      	push	{r7}
 800b146:	b083      	sub	sp, #12
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	61da      	str	r2, [r3, #28]
}
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <Process_CAN_id0x18FF50E5>:
			       }
}


void Process_CAN_id0x18FF50E5(void)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
	static once = 0, ccount = 200;
	int test = 0;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
uint8_t *tempData, mo_index;
		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800b16a:	4b23      	ldr	r3, [pc, #140]	; (800b1f8 <Process_CAN_id0x18FF50E5+0x98>)
 800b16c:	60bb      	str	r3, [r7, #8]

		mo_index = 28;
 800b16e:	231c      	movs	r3, #28
 800b170:	71fb      	strb	r3, [r7, #7]

		tempData = &obc_madhura[can_0x18FF50E5].CAN_Data[0];
 800b172:	4b22      	ldr	r3, [pc, #136]	; (800b1fc <Process_CAN_id0x18FF50E5+0x9c>)
 800b174:	603b      	str	r3, [r7, #0]

		//read data to external buffer
		CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	68ba      	ldr	r2, [r7, #8]
 800b17a:	3302      	adds	r3, #2
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	4618      	mov	r0, r3
 800b184:	6839      	ldr	r1, [r7, #0]
 800b186:	f7ff fc5b 	bl	800aa40 <CAN_NODE_MO_ReadData>

		//if(((obc_madhura[can_0x18FF50E5].CAN_Data[4] & 0x1f) == 0x00) && (obc_madhura[can_0x18FF50E5].CAN_Data[2]))
		if(charging_started && (!VehicleSpeedglb))
 800b18a:	4b1d      	ldr	r3, [pc, #116]	; (800b200 <Process_CAN_id0x18FF50E5+0xa0>)
 800b18c:	781b      	ldrb	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d01a      	beq.n	800b1c8 <Process_CAN_id0x18FF50E5+0x68>
 800b192:	4b1c      	ldr	r3, [pc, #112]	; (800b204 <Process_CAN_id0x18FF50E5+0xa4>)
 800b194:	881b      	ldrh	r3, [r3, #0]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d116      	bne.n	800b1c8 <Process_CAN_id0x18FF50E5+0x68>
		{
			//if( obc_madhura[can_0x18FF50E5].CAN_Data[2])
			{
				//Vcu_InPuts.charger_connect_IN = 1;
				if(once == 0)
 800b19a:	4b1b      	ldr	r3, [pc, #108]	; (800b208 <Process_CAN_id0x18FF50E5+0xa8>)
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d10b      	bne.n	800b1ba <Process_CAN_id0x18FF50E5+0x5a>
				{
					digital_io_setoutputhigh(&ORVM_PWR_OUT_D);
 800b1a2:	481a      	ldr	r0, [pc, #104]	; (800b20c <Process_CAN_id0x18FF50E5+0xac>)
 800b1a4:	f004 ffee 	bl	8010184 <digital_io_setoutputhigh>
					Delay(200);
 800b1a8:	20c8      	movs	r0, #200	; 0xc8
 800b1aa:	f005 f81b 	bl	80101e4 <Delay>
					//Vcu_InPuts.charger_connect_IN = 1;// changed this and added below
					test = 1;
 800b1ae:	2301      	movs	r3, #1
 800b1b0:	60fb      	str	r3, [r7, #12]
					once = 1;
 800b1b2:	4b15      	ldr	r3, [pc, #84]	; (800b208 <Process_CAN_id0x18FF50E5+0xa8>)
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	601a      	str	r2, [r3, #0]
 800b1b8:	e002      	b.n	800b1c0 <Process_CAN_id0x18FF50E5+0x60>
				}
				else
				{
					digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800b1ba:	4814      	ldr	r0, [pc, #80]	; (800b20c <Process_CAN_id0x18FF50E5+0xac>)
 800b1bc:	f004 ffb2 	bl	8010124 <digital_io_setoutputlow>
					//Vcu_InPuts.charger_connect_IN = 0;
				}
			}
			ccount = 200;
 800b1c0:	4b13      	ldr	r3, [pc, #76]	; (800b210 <Process_CAN_id0x18FF50E5+0xb0>)
 800b1c2:	22c8      	movs	r2, #200	; 0xc8
 800b1c4:	601a      	str	r2, [r3, #0]
 800b1c6:	e013      	b.n	800b1f0 <Process_CAN_id0x18FF50E5+0x90>
		}
		else if((--ccount) <= 0)
 800b1c8:	4b11      	ldr	r3, [pc, #68]	; (800b210 <Process_CAN_id0x18FF50E5+0xb0>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	4a10      	ldr	r2, [pc, #64]	; (800b210 <Process_CAN_id0x18FF50E5+0xb0>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	4b0f      	ldr	r3, [pc, #60]	; (800b210 <Process_CAN_id0x18FF50E5+0xb0>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	dc0a      	bgt.n	800b1f0 <Process_CAN_id0x18FF50E5+0x90>
		{
			test = 0;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	60fb      	str	r3, [r7, #12]
			once = 0;
 800b1de:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <Process_CAN_id0x18FF50E5+0xa8>)
 800b1e0:	2200      	movs	r2, #0
 800b1e2:	601a      	str	r2, [r3, #0]
			digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800b1e4:	4809      	ldr	r0, [pc, #36]	; (800b20c <Process_CAN_id0x18FF50E5+0xac>)
 800b1e6:	f004 ff9d 	bl	8010124 <digital_io_setoutputlow>
			//Vcu_InPuts.charger_connect_IN = 0; // change this and add below
			ccount = 200;
 800b1ea:	4b09      	ldr	r3, [pc, #36]	; (800b210 <Process_CAN_id0x18FF50E5+0xb0>)
 800b1ec:	22c8      	movs	r2, #200	; 0xc8
 800b1ee:	601a      	str	r2, [r3, #0]
		}

	//7.0,7.1
}
 800b1f0:	3710      	adds	r7, #16
 800b1f2:	46bd      	mov	sp, r7
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	bf00      	nop
 800b1f8:	08013c04 	.word	0x08013c04
 800b1fc:	1ffe94d4 	.word	0x1ffe94d4
 800b200:	1fff4858 	.word	0x1fff4858
 800b204:	1fff4812 	.word	0x1fff4812
 800b208:	1fff448c 	.word	0x1fff448c
 800b20c:	1fff42b0 	.word	0x1fff42b0
 800b210:	1ffe94dc 	.word	0x1ffe94dc

0800b214 <Read_CAN_id0x18FF50E5>:

void Read_CAN_id0x18FF50E5(void)
{
 800b214:	b590      	push	{r4, r7, lr}
 800b216:	b085      	sub	sp, #20
 800b218:	af00      	add	r7, sp, #0
	static uint64_t count_in = 0;
	uint8_t test;
			CAN_NODE_STATUS_t status, receive_status;
			XMC_CAN_MO_t *MO_Ptr;
			uint8_t mo_index;
			const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800b21a:	4b32      	ldr	r3, [pc, #200]	; (800b2e4 <Read_CAN_id0x18FF50E5+0xd0>)
 800b21c:	60fb      	str	r3, [r7, #12]

			mo_index = 28;
 800b21e:	231c      	movs	r3, #28
 800b220:	72fb      	strb	r3, [r7, #11]

			MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800b222:	7afb      	ldrb	r3, [r7, #11]
 800b224:	68fa      	ldr	r2, [r7, #12]
 800b226:	3302      	adds	r3, #2
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	4413      	add	r3, r2
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	607b      	str	r3, [r7, #4]

			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800b232:	7afb      	ldrb	r3, [r7, #11]
 800b234:	68fa      	ldr	r2, [r7, #12]
 800b236:	3302      	adds	r3, #2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	4413      	add	r3, r2
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7fd fd62 	bl	8008d08 <CAN_NODE_MO_GetStatus>
 800b244:	4603      	mov	r3, r0
 800b246:	70fb      	strb	r3, [r7, #3]

			//Vcu_InPuts.charger_connect_IN = 0;
			//Check receive pending status
			if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800b248:	78fb      	ldrb	r3, [r7, #3]
 800b24a:	f003 0301 	and.w	r3, r3, #1
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d02b      	beq.n	800b2aa <Read_CAN_id0x18FF50E5+0x96>
			{
			  // Clear the flag
			  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	2101      	movs	r1, #1
 800b256:	f7ff ff75 	bl	800b144 <XMC_CAN_MO_ResetStatus>
			  // Read the received Message object
			  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800b25a:	7afb      	ldrb	r3, [r7, #11]
 800b25c:	68fa      	ldr	r2, [r7, #12]
 800b25e:	3302      	adds	r3, #2
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	4413      	add	r3, r2
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	4618      	mov	r0, r3
 800b268:	f7fd fd1c 	bl	8008ca4 <CAN_NODE_MO_Receive>
 800b26c:	4603      	mov	r3, r0
 800b26e:	70bb      	strb	r3, [r7, #2]

			  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800b270:	78bb      	ldrb	r3, [r7, #2]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d10c      	bne.n	800b290 <Read_CAN_id0x18FF50E5+0x7c>
			  {
			    // message object receive success.
				  test = 1;
 800b276:	2301      	movs	r3, #1
 800b278:	707b      	strb	r3, [r7, #1]
				  //Process_CAN_id0x18FF50E5();
				  count_in = 0;
 800b27a:	491b      	ldr	r1, [pc, #108]	; (800b2e8 <Read_CAN_id0x18FF50E5+0xd4>)
 800b27c:	f04f 0200 	mov.w	r2, #0
 800b280:	f04f 0300 	mov.w	r3, #0
 800b284:	e9c1 2300 	strd	r2, r3, [r1]
				  charging_detect = 1; // here added
 800b288:	4b18      	ldr	r3, [pc, #96]	; (800b2ec <Read_CAN_id0x18FF50E5+0xd8>)
 800b28a:	2201      	movs	r2, #1
 800b28c:	701a      	strb	r2, [r3, #0]
 800b28e:	e001      	b.n	800b294 <Read_CAN_id0x18FF50E5+0x80>
			  }
			  else
			  {
			    // message object failed to receive.
				  test = 0;
 800b290:	2300      	movs	r3, #0
 800b292:	707b      	strb	r3, [r7, #1]
			  }
			  count_in = 0;
 800b294:	4914      	ldr	r1, [pc, #80]	; (800b2e8 <Read_CAN_id0x18FF50E5+0xd4>)
 800b296:	f04f 0200 	mov.w	r2, #0
 800b29a:	f04f 0300 	mov.w	r3, #0
 800b29e:	e9c1 2300 	strd	r2, r3, [r1]
			  Vcu_InPuts.charger_connect_IN = 1; // here added
 800b2a2:	4b13      	ldr	r3, [pc, #76]	; (800b2f0 <Read_CAN_id0x18FF50E5+0xdc>)
 800b2a4:	2201      	movs	r2, #1
 800b2a6:	709a      	strb	r2, [r3, #2]
 800b2a8:	e016      	b.n	800b2d8 <Read_CAN_id0x18FF50E5+0xc4>
			}
			else
			{
				if(count_in++ > 30)
 800b2aa:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <Read_CAN_id0x18FF50E5+0xd4>)
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	1c50      	adds	r0, r2, #1
 800b2b2:	f143 0100 	adc.w	r1, r3, #0
 800b2b6:	4c0c      	ldr	r4, [pc, #48]	; (800b2e8 <Read_CAN_id0x18FF50E5+0xd4>)
 800b2b8:	e9c4 0100 	strd	r0, r1, [r4]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	bf08      	it	eq
 800b2c0:	2a1f      	cmpeq	r2, #31
 800b2c2:	d309      	bcc.n	800b2d8 <Read_CAN_id0x18FF50E5+0xc4>
				{
					Vcu_InPuts.charger_connect_IN = 0; // here added
 800b2c4:	4b0a      	ldr	r3, [pc, #40]	; (800b2f0 <Read_CAN_id0x18FF50E5+0xdc>)
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	709a      	strb	r2, [r3, #2]
					count_in = 0;
 800b2ca:	4907      	ldr	r1, [pc, #28]	; (800b2e8 <Read_CAN_id0x18FF50E5+0xd4>)
 800b2cc:	f04f 0200 	mov.w	r2, #0
 800b2d0:	f04f 0300 	mov.w	r3, #0
 800b2d4:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

			Process_CAN_id0x18FF50E5();
 800b2d8:	f7ff ff42 	bl	800b160 <Process_CAN_id0x18FF50E5>
}
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd90      	pop	{r4, r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	08013c04 	.word	0x08013c04
 800b2e8:	1fff4490 	.word	0x1fff4490
 800b2ec:	1fff522e 	.word	0x1fff522e
 800b2f0:	1fff5104 	.word	0x1fff5104

0800b2f4 <Process_4G_Event_Data>:

vcu_fleet_fleet_10_sec TD1;
uint8_t Eventbuffer_4Gcomm[512]={0};

void Process_4G_Event_Data(void)
{
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	af00      	add	r7, sp, #0

	memset(&TD1,0,sizeof(TD1));
 800b2f8:	485f      	ldr	r0, [pc, #380]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	2264      	movs	r2, #100	; 0x64
 800b2fe:	f006 fb7c 	bl	80119fa <memset>
	TD1.car_id = 6;
 800b302:	4b5d      	ldr	r3, [pc, #372]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b304:	2200      	movs	r2, #0
 800b306:	f042 0206 	orr.w	r2, r2, #6
 800b30a:	701a      	strb	r2, [r3, #0]
 800b30c:	2200      	movs	r2, #0
 800b30e:	705a      	strb	r2, [r3, #1]
 800b310:	2200      	movs	r2, #0
 800b312:	709a      	strb	r2, [r3, #2]
 800b314:	2200      	movs	r2, #0
 800b316:	70da      	strb	r2, [r3, #3]
	TD1.trip_id = 81050;
 800b318:	4b57      	ldr	r3, [pc, #348]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b31a:	2200      	movs	r2, #0
 800b31c:	f062 0265 	orn	r2, r2, #101	; 0x65
 800b320:	711a      	strb	r2, [r3, #4]
 800b322:	2200      	movs	r2, #0
 800b324:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800b328:	715a      	strb	r2, [r3, #5]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f042 0201 	orr.w	r2, r2, #1
 800b330:	719a      	strb	r2, [r3, #6]
 800b332:	2200      	movs	r2, #0
 800b334:	71da      	strb	r2, [r3, #7]
	TD1.identifier = 318;
 800b336:	4b50      	ldr	r3, [pc, #320]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b338:	2200      	movs	r2, #0
 800b33a:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 800b33e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800b342:	2200      	movs	r2, #0
 800b344:	f042 0201 	orr.w	r2, r2, #1
 800b348:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
//	TD1.rtc.days = current_time.days;
//	TD1.rtc.day_of_week = current_time.daysofweek;
//	TD1.rtc.hours = current_time.hours;
//	TD1.rtc.minutes = current_time.minutes;
//	TD1.rtc.seconds = current_time.seconds;
	TD1.hv_soc_calculated =Mapped_BMS_SOC;
 800b358:	4b48      	ldr	r3, [pc, #288]	; (800b47c <Process_4G_Event_Data+0x188>)
 800b35a:	781b      	ldrb	r3, [r3, #0]
 800b35c:	461a      	mov	r2, r3
 800b35e:	4b46      	ldr	r3, [pc, #280]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b360:	619a      	str	r2, [r3, #24]
	TD1.soc = ((int)(CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0]);
 800b362:	4b47      	ldr	r3, [pc, #284]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b364:	7c5b      	ldrb	r3, [r3, #17]
 800b366:	021b      	lsls	r3, r3, #8
 800b368:	4a45      	ldr	r2, [pc, #276]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b36a:	7c12      	ldrb	r2, [r2, #16]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	461a      	mov	r2, r3
 800b370:	4b41      	ldr	r3, [pc, #260]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b372:	615a      	str	r2, [r3, #20]
	TD1.battery_temp=BMS_Avg_temp;
 800b374:	4b43      	ldr	r3, [pc, #268]	; (800b484 <Process_4G_Event_Data+0x190>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	4b3f      	ldr	r3, [pc, #252]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b37c:	61da      	str	r2, [r3, #28]
	TD1.odometer = CalOdometer();//52;//will get from cluster
 800b37e:	f000 f985 	bl	800b68c <CalOdometer>
 800b382:	4602      	mov	r2, r0
 800b384:	4b3c      	ldr	r3, [pc, #240]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b386:	629a      	str	r2, [r3, #40]	; 0x28
	TD1.charging_indicator = Vcu_InPuts.charger_connect_IN;
 800b388:	4b3f      	ldr	r3, [pc, #252]	; (800b488 <Process_4G_Event_Data+0x194>)
 800b38a:	789b      	ldrb	r3, [r3, #2]
 800b38c:	461a      	mov	r2, r3
 800b38e:	4b3a      	ldr	r3, [pc, #232]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b390:	639a      	str	r2, [r3, #56]	; 0x38
	TD1.dte = ((TD1.soc)*2);
 800b392:	4b39      	ldr	r3, [pc, #228]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b394:	695b      	ldr	r3, [r3, #20]
 800b396:	005b      	lsls	r3, r3, #1
 800b398:	4a37      	ldr	r2, [pc, #220]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b39a:	63d3      	str	r3, [r2, #60]	; 0x3c
	TD1.mcu_temp_1=Mcu_Temp_Irp;
 800b39c:	4b3b      	ldr	r3, [pc, #236]	; (800b48c <Process_4G_Event_Data+0x198>)
 800b39e:	881b      	ldrh	r3, [r3, #0]
 800b3a0:	461a      	mov	r2, r3
 800b3a2:	4b35      	ldr	r3, [pc, #212]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b3a4:	621a      	str	r2, [r3, #32]
	TD1.ac_status = AC_ON_4g;//CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800b3a6:	4b3a      	ldr	r3, [pc, #232]	; (800b490 <Process_4G_Event_Data+0x19c>)
 800b3a8:	781b      	ldrb	r3, [r3, #0]
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	4b32      	ldr	r3, [pc, #200]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b3ae:	641a      	str	r2, [r3, #64]	; 0x40
	TD1.min_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b3b0:	4b33      	ldr	r3, [pc, #204]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3b2:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b3b6:	021b      	lsls	r3, r3, #8
 800b3b8:	4a31      	ldr	r2, [pc, #196]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3ba:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b3be:	4313      	orrs	r3, r2
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	4b2d      	ldr	r3, [pc, #180]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b3c4:	645a      	str	r2, [r3, #68]	; 0x44
	TD1.max_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b3c6:	4b2e      	ldr	r3, [pc, #184]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3c8:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b3cc:	021b      	lsls	r3, r3, #8
 800b3ce:	4a2c      	ldr	r2, [pc, #176]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3d0:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	4b27      	ldr	r3, [pc, #156]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b3da:	649a      	str	r2, [r3, #72]	; 0x48
	TD1.min_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[2]));
 800b3dc:	4b28      	ldr	r3, [pc, #160]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3de:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b3e2:	021b      	lsls	r3, r3, #8
 800b3e4:	4a26      	ldr	r2, [pc, #152]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3e6:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	4b22      	ldr	r3, [pc, #136]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b3f0:	64da      	str	r2, [r3, #76]	; 0x4c
	TD1.max_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0]));
 800b3f2:	4b23      	ldr	r3, [pc, #140]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3f4:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b3f8:	021b      	lsls	r3, r3, #8
 800b3fa:	4a21      	ldr	r2, [pc, #132]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b3fc:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800b400:	4313      	orrs	r3, r2
 800b402:	461a      	mov	r2, r3
 800b404:	4b1c      	ldr	r3, [pc, #112]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b406:	651a      	str	r2, [r3, #80]	; 0x50
	TD1.pack_voltage = ((int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]));
 800b408:	4b1d      	ldr	r3, [pc, #116]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b40a:	7ddb      	ldrb	r3, [r3, #23]
 800b40c:	021b      	lsls	r3, r3, #8
 800b40e:	4a1c      	ldr	r2, [pc, #112]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b410:	7d92      	ldrb	r2, [r2, #22]
 800b412:	4313      	orrs	r3, r2
 800b414:	461a      	mov	r2, r3
 800b416:	4b18      	ldr	r3, [pc, #96]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b418:	631a      	str	r2, [r3, #48]	; 0x30
	TD1.pack_current = PackCurrent;//((int)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
 800b41a:	4b1e      	ldr	r3, [pc, #120]	; (800b494 <Process_4G_Event_Data+0x1a0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	4a16      	ldr	r2, [pc, #88]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b420:	6353      	str	r3, [r2, #52]	; 0x34
	TD1.longitude = GPS_data_val.longitude;
 800b422:	4b1d      	ldr	r3, [pc, #116]	; (800b498 <Process_4G_Event_Data+0x1a4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b428:	6113      	str	r3, [r2, #16]
	TD1.latitude = GPS_data_val.latitude ;
 800b42a:	4b1b      	ldr	r3, [pc, #108]	; (800b498 <Process_4G_Event_Data+0x1a4>)
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	4a12      	ldr	r2, [pc, #72]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b430:	60d3      	str	r3, [r2, #12]
	TD1.altitude = GPS_data_val.altitude ;
 800b432:	4b19      	ldr	r3, [pc, #100]	; (800b498 <Process_4G_Event_Data+0x1a4>)
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	461a      	mov	r2, r3
 800b438:	4b0f      	ldr	r3, [pc, #60]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b43a:	655a      	str	r2, [r3, #84]	; 0x54
	TD1.direction = GPS_data_val.direction;
 800b43c:	4b16      	ldr	r3, [pc, #88]	; (800b498 <Process_4G_Event_Data+0x1a4>)
 800b43e:	68db      	ldr	r3, [r3, #12]
 800b440:	461a      	mov	r2, r3
 800b442:	4b0d      	ldr	r3, [pc, #52]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b444:	659a      	str	r2, [r3, #88]	; 0x58
	TD1.speed = speed_4g;
 800b446:	4b15      	ldr	r3, [pc, #84]	; (800b49c <Process_4G_Event_Data+0x1a8>)
 800b448:	881b      	ldrh	r3, [r3, #0]
 800b44a:	461a      	mov	r2, r3
 800b44c:	4b0a      	ldr	r3, [pc, #40]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b44e:	625a      	str	r2, [r3, #36]	; 0x24
	TD1.soh = (int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[2]);
 800b450:	4b0b      	ldr	r3, [pc, #44]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b452:	7cdb      	ldrb	r3, [r3, #19]
 800b454:	021b      	lsls	r3, r3, #8
 800b456:	4a0a      	ldr	r2, [pc, #40]	; (800b480 <Process_4G_Event_Data+0x18c>)
 800b458:	7c92      	ldrb	r2, [r2, #18]
 800b45a:	4313      	orrs	r3, r2
 800b45c:	461a      	mov	r2, r3
 800b45e:	4b06      	ldr	r3, [pc, #24]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b460:	65da      	str	r2, [r3, #92]	; 0x5c
    TD1.timestamp = epoch;
 800b462:	4b0f      	ldr	r3, [pc, #60]	; (800b4a0 <Process_4G_Event_Data+0x1ac>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a04      	ldr	r2, [pc, #16]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b468:	6093      	str	r3, [r2, #8]
    TD1.ambient_temp=  ambient_temp;
 800b46a:	4b0e      	ldr	r3, [pc, #56]	; (800b4a4 <Process_4G_Event_Data+0x1b0>)
 800b46c:	781b      	ldrb	r3, [r3, #0]
 800b46e:	461a      	mov	r2, r3
 800b470:	4b01      	ldr	r3, [pc, #4]	; (800b478 <Process_4G_Event_Data+0x184>)
 800b472:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	1fff5234 	.word	0x1fff5234
 800b47c:	1fff4800 	.word	0x1fff4800
 800b480:	1ffe9254 	.word	0x1ffe9254
 800b484:	1fff48c4 	.word	0x1fff48c4
 800b488:	1fff5104 	.word	0x1fff5104
 800b48c:	1fff4822 	.word	0x1fff4822
 800b490:	1fff4810 	.word	0x1fff4810
 800b494:	1fff4818 	.word	0x1fff4818
 800b498:	1fff4890 	.word	0x1fff4890
 800b49c:	1fff482c 	.word	0x1fff482c
 800b4a0:	1fff47ec 	.word	0x1fff47ec
 800b4a4:	1fff48d2 	.word	0x1fff48d2

0800b4a8 <set_RTC>:
	//pb_ostream_t stream1;

	//stream1 =  pb_ostream_from_buffer(Eventbuffer_4Gcomm,sizeof(Eventbuffer_4Gcomm));
	//pb_encode(&stream1,vcu_fleet_fleet_10_sec_fields, &TD1);
void set_RTC(void)
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b08a      	sub	sp, #40	; 0x28
 800b4ac:	af00      	add	r7, sp, #0
	uint8_t Timebuf[35]={0};
 800b4ae:	1d3b      	adds	r3, r7, #4
 800b4b0:	2200      	movs	r2, #0
 800b4b2:	601a      	str	r2, [r3, #0]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	601a      	str	r2, [r3, #0]
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	2200      	movs	r2, #0
 800b4be:	601a      	str	r2, [r3, #0]
 800b4c0:	3304      	adds	r3, #4
 800b4c2:	2200      	movs	r2, #0
 800b4c4:	601a      	str	r2, [r3, #0]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	601a      	str	r2, [r3, #0]
 800b4cc:	3304      	adds	r3, #4
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	2200      	movs	r2, #0
 800b4d6:	601a      	str	r2, [r3, #0]
 800b4d8:	3304      	adds	r3, #4
 800b4da:	2200      	movs	r2, #0
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	3304      	adds	r3, #4
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	801a      	strh	r2, [r3, #0]
 800b4e4:	3302      	adds	r3, #2
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	701a      	strb	r2, [r3, #0]
 800b4ea:	3301      	adds	r3, #1
	mod_getCurrentTime(Timebuf);
 800b4ec:	1d3b      	adds	r3, r7, #4
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	f002 fa32 	bl	800d958 <mod_getCurrentTime>
	timeval.year = (((Timebuf[0]-'0')*10)+(Timebuf[1]-'0'));
 800b4f4:	793b      	ldrb	r3, [r7, #4]
 800b4f6:	3b30      	subs	r3, #48	; 0x30
 800b4f8:	b29b      	uxth	r3, r3
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	0092      	lsls	r2, r2, #2
 800b4fe:	4413      	add	r3, r2
 800b500:	005b      	lsls	r3, r3, #1
 800b502:	b29a      	uxth	r2, r3
 800b504:	797b      	ldrb	r3, [r7, #5]
 800b506:	b29b      	uxth	r3, r3
 800b508:	4413      	add	r3, r2
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	3b30      	subs	r3, #48	; 0x30
 800b50e:	b29a      	uxth	r2, r3
 800b510:	4b3b      	ldr	r3, [pc, #236]	; (800b600 <set_RTC+0x158>)
 800b512:	80da      	strh	r2, [r3, #6]
	timeval.month = (((Timebuf[3]-'0')*10)+(Timebuf[4]-'0'));
 800b514:	79fb      	ldrb	r3, [r7, #7]
 800b516:	3b30      	subs	r3, #48	; 0x30
 800b518:	b2db      	uxtb	r3, r3
 800b51a:	461a      	mov	r2, r3
 800b51c:	0092      	lsls	r2, r2, #2
 800b51e:	4413      	add	r3, r2
 800b520:	005b      	lsls	r3, r3, #1
 800b522:	b2da      	uxtb	r2, r3
 800b524:	7a3b      	ldrb	r3, [r7, #8]
 800b526:	4413      	add	r3, r2
 800b528:	b2db      	uxtb	r3, r3
 800b52a:	3b30      	subs	r3, #48	; 0x30
 800b52c:	b2db      	uxtb	r3, r3
 800b52e:	f003 030f 	and.w	r3, r3, #15
 800b532:	b2d9      	uxtb	r1, r3
 800b534:	4a32      	ldr	r2, [pc, #200]	; (800b600 <set_RTC+0x158>)
 800b536:	7953      	ldrb	r3, [r2, #5]
 800b538:	f361 0303 	bfi	r3, r1, #0, #4
 800b53c:	7153      	strb	r3, [r2, #5]
	timeval.days = (((Timebuf[6]-'0')*10)+(Timebuf[7]-'0'));
 800b53e:	7abb      	ldrb	r3, [r7, #10]
 800b540:	3b30      	subs	r3, #48	; 0x30
 800b542:	b2db      	uxtb	r3, r3
 800b544:	461a      	mov	r2, r3
 800b546:	0092      	lsls	r2, r2, #2
 800b548:	4413      	add	r3, r2
 800b54a:	005b      	lsls	r3, r3, #1
 800b54c:	b2da      	uxtb	r2, r3
 800b54e:	7afb      	ldrb	r3, [r7, #11]
 800b550:	4413      	add	r3, r2
 800b552:	b2db      	uxtb	r3, r3
 800b554:	3b30      	subs	r3, #48	; 0x30
 800b556:	b2db      	uxtb	r3, r3
 800b558:	f003 031f 	and.w	r3, r3, #31
 800b55c:	b2d9      	uxtb	r1, r3
 800b55e:	4a28      	ldr	r2, [pc, #160]	; (800b600 <set_RTC+0x158>)
 800b560:	78d3      	ldrb	r3, [r2, #3]
 800b562:	f361 0304 	bfi	r3, r1, #0, #5
 800b566:	70d3      	strb	r3, [r2, #3]
	timeval.hours = (((Timebuf[9]-'0')*10)+(Timebuf[10]-'0'));
 800b568:	7b7b      	ldrb	r3, [r7, #13]
 800b56a:	3b30      	subs	r3, #48	; 0x30
 800b56c:	b2db      	uxtb	r3, r3
 800b56e:	461a      	mov	r2, r3
 800b570:	0092      	lsls	r2, r2, #2
 800b572:	4413      	add	r3, r2
 800b574:	005b      	lsls	r3, r3, #1
 800b576:	b2da      	uxtb	r2, r3
 800b578:	7bbb      	ldrb	r3, [r7, #14]
 800b57a:	4413      	add	r3, r2
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	3b30      	subs	r3, #48	; 0x30
 800b580:	b2db      	uxtb	r3, r3
 800b582:	f003 031f 	and.w	r3, r3, #31
 800b586:	b2d9      	uxtb	r1, r3
 800b588:	4a1d      	ldr	r2, [pc, #116]	; (800b600 <set_RTC+0x158>)
 800b58a:	7893      	ldrb	r3, [r2, #2]
 800b58c:	f361 0304 	bfi	r3, r1, #0, #5
 800b590:	7093      	strb	r3, [r2, #2]
	timeval.minutes = (((Timebuf[12]-'0')*10)+(Timebuf[13]-'0'));
 800b592:	7c3b      	ldrb	r3, [r7, #16]
 800b594:	3b30      	subs	r3, #48	; 0x30
 800b596:	b2db      	uxtb	r3, r3
 800b598:	461a      	mov	r2, r3
 800b59a:	0092      	lsls	r2, r2, #2
 800b59c:	4413      	add	r3, r2
 800b59e:	005b      	lsls	r3, r3, #1
 800b5a0:	b2da      	uxtb	r2, r3
 800b5a2:	7c7b      	ldrb	r3, [r7, #17]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	b2db      	uxtb	r3, r3
 800b5a8:	3b30      	subs	r3, #48	; 0x30
 800b5aa:	b2db      	uxtb	r3, r3
 800b5ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5b0:	b2d9      	uxtb	r1, r3
 800b5b2:	4a13      	ldr	r2, [pc, #76]	; (800b600 <set_RTC+0x158>)
 800b5b4:	7853      	ldrb	r3, [r2, #1]
 800b5b6:	f361 0305 	bfi	r3, r1, #0, #6
 800b5ba:	7053      	strb	r3, [r2, #1]
	timeval.seconds = (((Timebuf[15]-'0')*10)+(Timebuf[16]-'0'));
 800b5bc:	7cfb      	ldrb	r3, [r7, #19]
 800b5be:	3b30      	subs	r3, #48	; 0x30
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	461a      	mov	r2, r3
 800b5c4:	0092      	lsls	r2, r2, #2
 800b5c6:	4413      	add	r3, r2
 800b5c8:	005b      	lsls	r3, r3, #1
 800b5ca:	b2da      	uxtb	r2, r3
 800b5cc:	7d3b      	ldrb	r3, [r7, #20]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	b2db      	uxtb	r3, r3
 800b5d2:	3b30      	subs	r3, #48	; 0x30
 800b5d4:	b2db      	uxtb	r3, r3
 800b5d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5da:	b2d9      	uxtb	r1, r3
 800b5dc:	4a08      	ldr	r2, [pc, #32]	; (800b600 <set_RTC+0x158>)
 800b5de:	7813      	ldrb	r3, [r2, #0]
 800b5e0:	f361 0305 	bfi	r3, r1, #0, #6
 800b5e4:	7013      	strb	r3, [r2, #0]
	RTC_Day = timeval.days;
 800b5e6:	4b06      	ldr	r3, [pc, #24]	; (800b600 <set_RTC+0x158>)
 800b5e8:	78db      	ldrb	r3, [r3, #3]
 800b5ea:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b5ee:	b2db      	uxtb	r3, r3
 800b5f0:	461a      	mov	r2, r3
 800b5f2:	4b04      	ldr	r3, [pc, #16]	; (800b604 <set_RTC+0x15c>)
 800b5f4:	701a      	strb	r2, [r3, #0]
	RTC_init();
 800b5f6:	f7f4 ff41 	bl	800047c <RTC_init>
}
 800b5fa:	3728      	adds	r7, #40	; 0x28
 800b5fc:	46bd      	mov	sp, r7
 800b5fe:	bd80      	pop	{r7, pc}
 800b600:	1fff47a8 	.word	0x1fff47a8
 800b604:	1fff449c 	.word	0x1fff449c

0800b608 <epoch_time>:

void epoch_time(void)
{	struct tm my_tm;
 800b608:	b580      	push	{r7, lr}
 800b60a:	b08a      	sub	sp, #40	; 0x28
 800b60c:	af00      	add	r7, sp, #0
	memset(&my_tm, 0, sizeof(my_tm));
 800b60e:	1d3b      	adds	r3, r7, #4
 800b610:	4618      	mov	r0, r3
 800b612:	2100      	movs	r1, #0
 800b614:	2224      	movs	r2, #36	; 0x24
 800b616:	f006 f9f0 	bl	80119fa <memset>
	RTC_GetTime(&current_time);
 800b61a:	481a      	ldr	r0, [pc, #104]	; (800b684 <epoch_time+0x7c>)
 800b61c:	f7fc f9f2 	bl	8007a04 <RTC_GetTime>
	my_tm.tm_year =(2000 + current_time.year)-1900;
 800b620:	4b18      	ldr	r3, [pc, #96]	; (800b684 <epoch_time+0x7c>)
 800b622:	88db      	ldrh	r3, [r3, #6]
 800b624:	3364      	adds	r3, #100	; 0x64
 800b626:	61bb      	str	r3, [r7, #24]
	my_tm.tm_mon = current_time.month;
 800b628:	4b16      	ldr	r3, [pc, #88]	; (800b684 <epoch_time+0x7c>)
 800b62a:	795b      	ldrb	r3, [r3, #5]
 800b62c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b630:	b2db      	uxtb	r3, r3
 800b632:	617b      	str	r3, [r7, #20]
	my_tm.tm_mday = current_time.days;
 800b634:	4b13      	ldr	r3, [pc, #76]	; (800b684 <epoch_time+0x7c>)
 800b636:	78db      	ldrb	r3, [r3, #3]
 800b638:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b63c:	b2db      	uxtb	r3, r3
 800b63e:	613b      	str	r3, [r7, #16]
	my_tm.tm_hour = current_time.hours;
 800b640:	4b10      	ldr	r3, [pc, #64]	; (800b684 <epoch_time+0x7c>)
 800b642:	789b      	ldrb	r3, [r3, #2]
 800b644:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	60fb      	str	r3, [r7, #12]
	my_tm.tm_min = current_time.minutes;
 800b64c:	4b0d      	ldr	r3, [pc, #52]	; (800b684 <epoch_time+0x7c>)
 800b64e:	785b      	ldrb	r3, [r3, #1]
 800b650:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b654:	b2db      	uxtb	r3, r3
 800b656:	60bb      	str	r3, [r7, #8]
	my_tm.tm_sec = current_time.seconds;
 800b658:	4b0a      	ldr	r3, [pc, #40]	; (800b684 <epoch_time+0x7c>)
 800b65a:	781b      	ldrb	r3, [r3, #0]
 800b65c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b660:	b2db      	uxtb	r3, r3
 800b662:	607b      	str	r3, [r7, #4]
	my_tm.tm_isdst = -1;
 800b664:	f04f 33ff 	mov.w	r3, #4294967295
 800b668:	627b      	str	r3, [r7, #36]	; 0x24
	my_tm.tm_mon -= 1;
 800b66a:	697b      	ldr	r3, [r7, #20]
 800b66c:	3b01      	subs	r3, #1
 800b66e:	617b      	str	r3, [r7, #20]

	epoch = mktime(&my_tm);
 800b670:	1d3b      	adds	r3, r7, #4
 800b672:	4618      	mov	r0, r3
 800b674:	f006 faa0 	bl	8011bb8 <mktime>
 800b678:	4602      	mov	r2, r0
 800b67a:	4b03      	ldr	r3, [pc, #12]	; (800b688 <epoch_time+0x80>)
 800b67c:	601a      	str	r2, [r3, #0]
}
 800b67e:	3728      	adds	r7, #40	; 0x28
 800b680:	46bd      	mov	sp, r7
 800b682:	bd80      	pop	{r7, pc}
 800b684:	1fff47f0 	.word	0x1fff47f0
 800b688:	1fff47ec 	.word	0x1fff47ec

0800b68c <CalOdometer>:

uint32_t CalOdometer()//For testing only
	{
 800b68c:	b480      	push	{r7}
 800b68e:	b087      	sub	sp, #28
 800b690:	af00      	add	r7, sp, #0
		float pi = 3.14;
 800b692:	4b18      	ldr	r3, [pc, #96]	; (800b6f4 <CalOdometer+0x68>)
 800b694:	617b      	str	r3, [r7, #20]
		float rad = 0.279;
 800b696:	4b18      	ldr	r3, [pc, #96]	; (800b6f8 <CalOdometer+0x6c>)
 800b698:	613b      	str	r3, [r7, #16]
		float GRatio = 0.10084; //  1/9.916;
 800b69a:	4b18      	ldr	r3, [pc, #96]	; (800b6fc <CalOdometer+0x70>)
 800b69c:	60fb      	str	r3, [r7, #12]
		float mintosec = 0.0166;
 800b69e:	4b18      	ldr	r3, [pc, #96]	; (800b700 <CalOdometer+0x74>)
 800b6a0:	60bb      	str	r3, [r7, #8]
		uint16_t DistanceM = 1;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	80fb      	strh	r3, [r7, #6]

		uint16_t timeDiff = epoch - starttime;
 800b6a6:	4b17      	ldr	r3, [pc, #92]	; (800b704 <CalOdometer+0x78>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	b29a      	uxth	r2, r3
 800b6ac:	4b16      	ldr	r3, [pc, #88]	; (800b708 <CalOdometer+0x7c>)
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	80bb      	strh	r3, [r7, #4]
		uint8_t rotations = 3;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	70fb      	strb	r3, [r7, #3]

		//Distance = (2 * pi * rad * rotations);
		//Distance += (2 * pi * rad * N/(rpm) * GRatio * mintosec * TimeSec);
		DistanceM = (vspeed * (timeDiff/3600));// KM/hr
 800b6ba:	88bb      	ldrh	r3, [r7, #4]
 800b6bc:	4a13      	ldr	r2, [pc, #76]	; (800b70c <CalOdometer+0x80>)
 800b6be:	fba2 2303 	umull	r2, r3, r2, r3
 800b6c2:	0adb      	lsrs	r3, r3, #11
 800b6c4:	b29a      	uxth	r2, r3
 800b6c6:	4b12      	ldr	r3, [pc, #72]	; (800b710 <CalOdometer+0x84>)
 800b6c8:	881b      	ldrh	r3, [r3, #0]
 800b6ca:	fb12 f303 	smulbb	r3, r2, r3
 800b6ce:	80fb      	strh	r3, [r7, #6]
		Distance += (DistanceM/8);//3600
 800b6d0:	88fb      	ldrh	r3, [r7, #6]
 800b6d2:	08db      	lsrs	r3, r3, #3
 800b6d4:	b29a      	uxth	r2, r3
 800b6d6:	4b0f      	ldr	r3, [pc, #60]	; (800b714 <CalOdometer+0x88>)
 800b6d8:	881b      	ldrh	r3, [r3, #0]
 800b6da:	4413      	add	r3, r2
 800b6dc:	b29a      	uxth	r2, r3
 800b6de:	4b0d      	ldr	r3, [pc, #52]	; (800b714 <CalOdometer+0x88>)
 800b6e0:	801a      	strh	r2, [r3, #0]

		return Distance;
 800b6e2:	4b0c      	ldr	r3, [pc, #48]	; (800b714 <CalOdometer+0x88>)
 800b6e4:	881b      	ldrh	r3, [r3, #0]
	}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	371c      	adds	r7, #28
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	4048f5c3 	.word	0x4048f5c3
 800b6f8:	3e8ed917 	.word	0x3e8ed917
 800b6fc:	3dce8534 	.word	0x3dce8534
 800b700:	3c87fcb9 	.word	0x3c87fcb9
 800b704:	1fff47ec 	.word	0x1fff47ec
 800b708:	1fff4498 	.word	0x1fff4498
 800b70c:	91a2b3c5 	.word	0x91a2b3c5
 800b710:	1fff522a 	.word	0x1fff522a
 800b714:	1ffe94e0 	.word	0x1ffe94e0

0800b718 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
 800b720:	460b      	mov	r3, r1
 800b722:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b724:	78fb      	ldrb	r3, [r7, #3]
 800b726:	2201      	movs	r2, #1
 800b728:	409a      	lsls	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	605a      	str	r2, [r3, #4]
}
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b748:	78fb      	ldrb	r3, [r7, #3]
 800b74a:	fa22 f303 	lsr.w	r3, r2, r3
 800b74e:	f003 0301 	and.w	r3, r3, #1
}
 800b752:	4618      	mov	r0, r3
 800b754:	370c      	adds	r7, #12
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr
 800b75e:	bf00      	nop

0800b760 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b082      	sub	sp, #8
 800b764:	af00      	add	r7, sp, #0
 800b766:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681a      	ldr	r2, [r3, #0]
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	7c1b      	ldrb	r3, [r3, #16]
 800b770:	4610      	mov	r0, r2
 800b772:	4619      	mov	r1, r3
 800b774:	f7ff ffd0 	bl	800b718 <XMC_GPIO_SetOutputHigh>
}
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}
 800b77e:	bf00      	nop

0800b780 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	7c1b      	ldrb	r3, [r3, #16]
 800b790:	4610      	mov	r0, r2
 800b792:	4619      	mov	r1, r3
 800b794:	f7ff ffd0 	bl	800b738 <XMC_GPIO_GetInput>
 800b798:	4603      	mov	r3, r0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3708      	adds	r7, #8
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop

0800b7a4 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f7f9 f977 	bl	8004aa4 <XMC_UART_CH_GetReceivedData>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	b2db      	uxtb	r3, r3
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3708      	adds	r7, #8
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop

0800b7c4 <clear_readbuff>:
#include "Vcu_Config.h"

uint32_t getout;

void clear_readbuff(char string[])
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b085      	sub	sp, #20
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 65; i++)
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	60fb      	str	r3, [r7, #12]
 800b7d0:	e007      	b.n	800b7e2 <clear_readbuff+0x1e>
		string[i] = '\0';
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	687a      	ldr	r2, [r7, #4]
 800b7d6:	4413      	add	r3, r2
 800b7d8:	2200      	movs	r2, #0
 800b7da:	701a      	strb	r2, [r3, #0]

uint32_t getout;

void clear_readbuff(char string[])
{
	for(int i = 0; i < 65; i++)
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	3301      	adds	r3, #1
 800b7e0:	60fb      	str	r3, [r7, #12]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2b40      	cmp	r3, #64	; 0x40
 800b7e6:	ddf4      	ble.n	800b7d2 <clear_readbuff+0xe>
		string[i] = '\0';
}
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr
 800b7f2:	bf00      	nop

0800b7f4 <data_tx4g>:

void data_tx4g(char tx_cmd[])//uint8_t
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b082      	sub	sp, #8
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
	UART_Transmit(&UART_0, (uint8_t*)tx_cmd, (uint32_t)strlen(tx_cmd));
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f006 fc04 	bl	801200a <strlen>
 800b802:	4603      	mov	r3, r0
 800b804:	4803      	ldr	r0, [pc, #12]	; (800b814 <data_tx4g+0x20>)
 800b806:	6879      	ldr	r1, [r7, #4]
 800b808:	461a      	mov	r2, r3
 800b80a:	f7fa faef 	bl	8005dec <UART_Transmit>

	//Delay(5);
}
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}
 800b814:	1ffe8844 	.word	0x1ffe8844

0800b818 <Get_CurrentLocation>:
	data_rx4g();
	data_tx4g(SendGPSData21);
	data_rx4g();
}

void Get_CurrentLocation() {
 800b818:	b590      	push	{r4, r7, lr}
 800b81a:	b0f3      	sub	sp, #460	; 0x1cc
 800b81c:	af00      	add	r7, sp, #0
    DIGITAL_IO_SetOutputHigh(&RTS);
 800b81e:	4880      	ldr	r0, [pc, #512]	; (800ba20 <Get_CurrentLocation+0x208>)
 800b820:	f7ff ff9e 	bl	800b760 <DIGITAL_IO_SetOutputHigh>
    //delay(5000);
    bool cts_in = DIGITAL_IO_GetInput(&CTS);
 800b824:	487f      	ldr	r0, [pc, #508]	; (800ba24 <Get_CurrentLocation+0x20c>)
 800b826:	f7ff ffab 	bl	800b780 <DIGITAL_IO_GetInput>
 800b82a:	4603      	mov	r3, r0
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	bf14      	ite	ne
 800b830:	2301      	movne	r3, #1
 800b832:	2300      	moveq	r3, #0
 800b834:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
    char SendGPSData5[] = "AT+QGPSLOC=1\r\n";
 800b838:	4b7b      	ldr	r3, [pc, #492]	; (800ba28 <Get_CurrentLocation+0x210>)
 800b83a:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800b83e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b840:	c407      	stmia	r4!, {r0, r1, r2}
 800b842:	8023      	strh	r3, [r4, #0]
 800b844:	3402      	adds	r4, #2
 800b846:	0c1b      	lsrs	r3, r3, #16
 800b848:	7023      	strb	r3, [r4, #0]
    //SuperLooptime_Start();
    data_tx4g(SendGPSData5);
 800b84a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b84e:	4618      	mov	r0, r3
 800b850:	f7ff ffd0 	bl	800b7f4 <data_tx4g>
    //SuperLooptime_End();

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
 800b854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b858:	2200      	movs	r2, #0
 800b85a:	701a      	strb	r2, [r3, #0]
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b85c:	2300      	movs	r3, #0
 800b85e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b862:	e00d      	b.n	800b880 <Get_CurrentLocation+0x68>
        strcat(receivedData, data_rx4gps());
 800b864:	f000 f8ec 	bl	800ba40 <data_rx4gps>
 800b868:	4602      	mov	r2, r0
 800b86a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b86e:	4618      	mov	r0, r3
 800b870:	4611      	mov	r1, r2
 800b872:	f006 fba5 	bl	8011fc0 <strcat>

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b876:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b87a:	3301      	adds	r3, #1
 800b87c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b880:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b884:	2b03      	cmp	r3, #3
 800b886:	dded      	ble.n	800b864 <Get_CurrentLocation+0x4c>
        strcat(receivedData, data_rx4gps());
    }
    //SuperLooptime_End();
    char* startToken = strstr(receivedData, "+QGPSLOC:");
 800b888:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b88c:	4618      	mov	r0, r3
 800b88e:	4967      	ldr	r1, [pc, #412]	; (800ba2c <Get_CurrentLocation+0x214>)
 800b890:	f006 fbd5 	bl	801203e <strstr>
 800b894:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
    if (startToken != NULL) {
 800b898:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	f000 80b2 	beq.w	800ba06 <Get_CurrentLocation+0x1ee>
        char *token;
        token = strtok(startToken, ",");
 800b8a2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800b8a6:	4962      	ldr	r1, [pc, #392]	; (800ba30 <Get_CurrentLocation+0x218>)
 800b8a8:	f006 fbe2 	bl	8012070 <strtok>
 800b8ac:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
        int field_count = 0;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b8b6:	e0a1      	b.n	800b9fc <Get_CurrentLocation+0x1e4>
            if (field_count == 1) { // Latitude
 800b8b8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d124      	bne.n	800b90a <Get_CurrentLocation+0xf2>
                strncpy(latitude, token, 10);
 800b8c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b8ca:	220a      	movs	r2, #10
 800b8cc:	f006 fba5 	bl	801201a <strncpy>
                latitude[10] = '\0';
 800b8d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	729a      	strb	r2, [r3, #10]
                GPS_data_val.latitude = ((atoi(latitude))*100000);
 800b8d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8dc:	4618      	mov	r0, r3
 800b8de:	f006 f851 	bl	8011984 <atoi>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	4b53      	ldr	r3, [pc, #332]	; (800ba34 <Get_CurrentLocation+0x21c>)
 800b8e6:	fb03 f302 	mul.w	r3, r3, r2
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	4b52      	ldr	r3, [pc, #328]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b8ee:	605a      	str	r2, [r3, #4]
                GPS_data_val.latitude += (atoi(latitude+5));
 800b8f0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b8f4:	3305      	adds	r3, #5
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f006 f844 	bl	8011984 <atoi>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	4b4e      	ldr	r3, [pc, #312]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	4413      	add	r3, r2
 800b904:	4a4c      	ldr	r2, [pc, #304]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b906:	6053      	str	r3, [r2, #4]
 800b908:	e06d      	b.n	800b9e6 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 3) { // Longitude
 800b90a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b90e:	2b03      	cmp	r3, #3
 800b910:	d124      	bne.n	800b95c <Get_CurrentLocation+0x144>
                strncpy(longitude, token, 11);
 800b912:	f107 031c 	add.w	r3, r7, #28
 800b916:	4618      	mov	r0, r3
 800b918:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b91c:	220b      	movs	r2, #11
 800b91e:	f006 fb7c 	bl	801201a <strncpy>
                longitude[11] = '\0';
 800b922:	f107 031c 	add.w	r3, r7, #28
 800b926:	2200      	movs	r2, #0
 800b928:	72da      	strb	r2, [r3, #11]
                GPS_data_val.longitude = ((atoi(longitude))*100000);
 800b92a:	f107 031c 	add.w	r3, r7, #28
 800b92e:	4618      	mov	r0, r3
 800b930:	f006 f828 	bl	8011984 <atoi>
 800b934:	4602      	mov	r2, r0
 800b936:	4b3f      	ldr	r3, [pc, #252]	; (800ba34 <Get_CurrentLocation+0x21c>)
 800b938:	fb03 f302 	mul.w	r3, r3, r2
 800b93c:	461a      	mov	r2, r3
 800b93e:	4b3e      	ldr	r3, [pc, #248]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b940:	601a      	str	r2, [r3, #0]
                GPS_data_val.longitude += (atoi(longitude+6));
 800b942:	f107 031c 	add.w	r3, r7, #28
 800b946:	3306      	adds	r3, #6
 800b948:	4618      	mov	r0, r3
 800b94a:	f006 f81b 	bl	8011984 <atoi>
 800b94e:	4602      	mov	r2, r0
 800b950:	4b39      	ldr	r3, [pc, #228]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4413      	add	r3, r2
 800b956:	4a38      	ldr	r2, [pc, #224]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b958:	6013      	str	r3, [r2, #0]
 800b95a:	e044      	b.n	800b9e6 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 6) { // Altitude
 800b95c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b960:	2b06      	cmp	r3, #6
 800b962:	d125      	bne.n	800b9b0 <Get_CurrentLocation+0x198>
                strncpy(altitude, token, 5);
 800b964:	f107 030c 	add.w	r3, r7, #12
 800b968:	4618      	mov	r0, r3
 800b96a:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b96e:	2205      	movs	r2, #5
 800b970:	f006 fb53 	bl	801201a <strncpy>
                altitude[5] = '\0';
 800b974:	f107 030c 	add.w	r3, r7, #12
 800b978:	2200      	movs	r2, #0
 800b97a:	715a      	strb	r2, [r3, #5]
                GPS_data_val.altitude =  ((atoi(altitude))*10);
 800b97c:	f107 030c 	add.w	r3, r7, #12
 800b980:	4618      	mov	r0, r3
 800b982:	f005 ffff 	bl	8011984 <atoi>
 800b986:	4602      	mov	r2, r0
 800b988:	4613      	mov	r3, r2
 800b98a:	009b      	lsls	r3, r3, #2
 800b98c:	4413      	add	r3, r2
 800b98e:	005b      	lsls	r3, r3, #1
 800b990:	461a      	mov	r2, r3
 800b992:	4b29      	ldr	r3, [pc, #164]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b994:	609a      	str	r2, [r3, #8]
                GPS_data_val.altitude +=( atoi(altitude+4));
 800b996:	f107 030c 	add.w	r3, r7, #12
 800b99a:	3304      	adds	r3, #4
 800b99c:	4618      	mov	r0, r3
 800b99e:	f005 fff1 	bl	8011984 <atoi>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	4b24      	ldr	r3, [pc, #144]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b9a6:	689b      	ldr	r3, [r3, #8]
 800b9a8:	4413      	add	r3, r2
 800b9aa:	4a23      	ldr	r2, [pc, #140]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b9ac:	6093      	str	r3, [r2, #8]
 800b9ae:	e01a      	b.n	800b9e6 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 8) { // COG as direction
 800b9b0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b9b4:	2b08      	cmp	r3, #8
 800b9b6:	d116      	bne.n	800b9e6 <Get_CurrentLocation+0x1ce>
                strncpy(direction, token, 6);
 800b9b8:	1d3b      	adds	r3, r7, #4
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b9c0:	2206      	movs	r2, #6
 800b9c2:	f006 fb2a 	bl	801201a <strncpy>
                direction[6] = '\0';
 800b9c6:	1d3b      	adds	r3, r7, #4
 800b9c8:	2200      	movs	r2, #0
 800b9ca:	719a      	strb	r2, [r3, #6]
                GPS_data_val.direction = atoi(direction) * 10;
 800b9cc:	1d3b      	adds	r3, r7, #4
 800b9ce:	4618      	mov	r0, r3
 800b9d0:	f005 ffd8 	bl	8011984 <atoi>
 800b9d4:	4602      	mov	r2, r0
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	009b      	lsls	r3, r3, #2
 800b9da:	4413      	add	r3, r2
 800b9dc:	005b      	lsls	r3, r3, #1
 800b9de:	461a      	mov	r2, r3
 800b9e0:	4b15      	ldr	r3, [pc, #84]	; (800ba38 <Get_CurrentLocation+0x220>)
 800b9e2:	60da      	str	r2, [r3, #12]
                break; // Stop parsing after direction field
 800b9e4:	e00f      	b.n	800ba06 <Get_CurrentLocation+0x1ee>
            }
            field_count++;
 800b9e6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            token = strtok(NULL, ",");
 800b9f0:	2000      	movs	r0, #0
 800b9f2:	490f      	ldr	r1, [pc, #60]	; (800ba30 <Get_CurrentLocation+0x218>)
 800b9f4:	f006 fb3c 	bl	8012070 <strtok>
 800b9f8:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
    if (startToken != NULL) {
        char *token;
        token = strtok(startToken, ",");
        int field_count = 0;
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b9fc:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	f47f af59 	bne.w	800b8b8 <Get_CurrentLocation+0xa0>
            token = strtok(NULL, ",");
        }
    }

    // Clear read buffer
    clear_readbuff(receivedData);
 800ba06:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	f7ff feda 	bl	800b7c4 <clear_readbuff>

    getout = 0;
 800ba10:	4b0a      	ldr	r3, [pc, #40]	; (800ba3c <Get_CurrentLocation+0x224>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
}
 800ba16:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd90      	pop	{r4, r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	080139fc 	.word	0x080139fc
 800ba24:	080139e8 	.word	0x080139e8
 800ba28:	08013fec 	.word	0x08013fec
 800ba2c:	08013fdc 	.word	0x08013fdc
 800ba30:	08013fe8 	.word	0x08013fe8
 800ba34:	000186a0 	.word	0x000186a0
 800ba38:	1fff4890 	.word	0x1fff4890
 800ba3c:	1fff5298 	.word	0x1fff5298

0800ba40 <data_rx4gps>:


char* data_rx4gps() {
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b082      	sub	sp, #8
 800ba44:	af00      	add	r7, sp, #0
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);
 800ba46:	4817      	ldr	r0, [pc, #92]	; (800baa4 <data_rx4gps+0x64>)
 800ba48:	f7ff febc 	bl	800b7c4 <clear_readbuff>

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	607b      	str	r3, [r7, #4]
 800ba50:	e01c      	b.n	800ba8c <data_rx4gps+0x4c>

        ReadData[i] = UART_GetReceivedWord(&UART_0);
 800ba52:	4815      	ldr	r0, [pc, #84]	; (800baa8 <data_rx4gps+0x68>)
 800ba54:	f7ff fea6 	bl	800b7a4 <UART_GetReceivedWord>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	4619      	mov	r1, r3
 800ba5c:	4a11      	ldr	r2, [pc, #68]	; (800baa4 <data_rx4gps+0x64>)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	4413      	add	r3, r2
 800ba62:	460a      	mov	r2, r1
 800ba64:	701a      	strb	r2, [r3, #0]
#if EN_SERIAL
        UART_Transmit(&UART_0, &ReadData[i], 1);
#endif


        if (i > 0 && ReadData[i] == '\n' && ReadData[i - 1] == '\n') {
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	dd0c      	ble.n	800ba86 <data_rx4gps+0x46>
 800ba6c:	4a0d      	ldr	r2, [pc, #52]	; (800baa4 <data_rx4gps+0x64>)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	4413      	add	r3, r2
 800ba72:	781b      	ldrb	r3, [r3, #0]
 800ba74:	2b0a      	cmp	r3, #10
 800ba76:	d106      	bne.n	800ba86 <data_rx4gps+0x46>
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	4a09      	ldr	r2, [pc, #36]	; (800baa4 <data_rx4gps+0x64>)
 800ba7e:	5cd3      	ldrb	r3, [r2, r3]
 800ba80:	2b0a      	cmp	r3, #10
 800ba82:	d100      	bne.n	800ba86 <data_rx4gps+0x46>
            break;
 800ba84:	e005      	b.n	800ba92 <data_rx4gps+0x52>

char* data_rx4gps() {
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	3301      	adds	r3, #1
 800ba8a:	607b      	str	r3, [r7, #4]
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b1d      	cmp	r3, #29
 800ba90:	dddf      	ble.n	800ba52 <data_rx4gps+0x12>
            break;
        }
    }


    Delay(5);
 800ba92:	2005      	movs	r0, #5
 800ba94:	f004 fba6 	bl	80101e4 <Delay>

    return ReadData;
 800ba98:	4b02      	ldr	r3, [pc, #8]	; (800baa4 <data_rx4gps+0x64>)
}
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	3708      	adds	r7, #8
 800ba9e:	46bd      	mov	sp, r7
 800baa0:	bd80      	pop	{r7, pc}
 800baa2:	bf00      	nop
 800baa4:	1fff46a0 	.word	0x1fff46a0
 800baa8:	1ffe8844 	.word	0x1ffe8844

0800baac <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800baba:	f003 0308 	and.w	r3, r3, #8
 800babe:	2b00      	cmp	r3, #0
 800bac0:	bf14      	ite	ne
 800bac2:	2301      	movne	r3, #1
 800bac4:	2300      	moveq	r3, #0
 800bac6:	b2db      	uxtb	r3, r3
}
 800bac8:	4618      	mov	r0, r3
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr

0800bad4 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7f8 ffdf 	bl	8004aa4 <XMC_UART_CH_GetReceivedData>
 800bae6:	4603      	mov	r3, r0
 800bae8:	b2db      	uxtb	r3, r3
}
 800baea:	4618      	mov	r0, r3
 800baec:	3708      	adds	r7, #8
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop

0800baf4 <at_initInterface>:
 *
 * Return values 	:	en_responseRetCodes_t - Return status
 *
 ****************************************************************************/
en_responseRetCodes_t at_initInterface(void)
{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b082      	sub	sp, #8
 800baf8:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bafa:	2304      	movs	r3, #4
 800bafc:	71fb      	strb	r3, [r7, #7]

	/**  Initialization of UART APP instance UART_0 */
	init_status = (DAVE_STATUS_t) UART_Init(&UART_0);
 800bafe:	4809      	ldr	r0, [pc, #36]	; (800bb24 <at_initInterface+0x30>)
 800bb00:	f7fa f962 	bl	8005dc8 <UART_Init>
 800bb04:	4603      	mov	r3, r0
 800bb06:	71bb      	strb	r3, [r7, #6]
	if (DAVE_STATUS_SUCCESS == init_status)
 800bb08:	79bb      	ldrb	r3, [r7, #6]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <at_initInterface+0x20>
	{
		len_retStatus = E_RET_SUCCESS;
 800bb0e:	2300      	movs	r3, #0
 800bb10:	71fb      	strb	r3, [r7, #7]
 800bb12:	e001      	b.n	800bb18 <at_initInterface+0x24>
	}
	else
	{
		len_retStatus = E_RET_FAILED;
 800bb14:	2302      	movs	r3, #2
 800bb16:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 800bb18:	79fb      	ldrb	r3, [r7, #7]
}
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	3708      	adds	r7, #8
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
 800bb22:	bf00      	nop
 800bb24:	1ffe8844 	.word	0x1ffe8844

0800bb28 <at_readPort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_readPort()
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	af00      	add	r7, sp, #0
	return UART_GetReceivedWord(&UART_0);
 800bb2c:	4802      	ldr	r0, [pc, #8]	; (800bb38 <at_readPort+0x10>)
 800bb2e:	f7ff ffd1 	bl	800bad4 <UART_GetReceivedWord>
 800bb32:	4603      	mov	r3, r0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	bd80      	pop	{r7, pc}
 800bb38:	1ffe8844 	.word	0x1ffe8844

0800bb3c <at_isRxBuffEmpty>:
 *
 * Return values 	:	bool
 *
 ****************************************************************************/
bool at_isRxBuffEmpty()
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
	return XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel);
 800bb40:	4b03      	ldr	r3, [pc, #12]	; (800bb50 <at_isRxBuffEmpty+0x14>)
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	4618      	mov	r0, r3
 800bb46:	f7ff ffb1 	bl	800baac <XMC_USIC_CH_RXFIFO_IsEmpty>
 800bb4a:	4603      	mov	r3, r0
}
 800bb4c:	4618      	mov	r0, r3
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	1ffe8844 	.word	0x1ffe8844

0800bb54 <at_writePort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_writePort(uint8_t *lu8_data, uint16_t lu16_buffLen)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	807b      	strh	r3, [r7, #2]
	UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 800bb60:	2302      	movs	r3, #2
 800bb62:	73bb      	strb	r3, [r7, #14]
	ret_stat = UART_Transmit(&UART_0, lu8_data, lu16_buffLen);
 800bb64:	887b      	ldrh	r3, [r7, #2]
 800bb66:	480c      	ldr	r0, [pc, #48]	; (800bb98 <at_writePort+0x44>)
 800bb68:	6879      	ldr	r1, [r7, #4]
 800bb6a:	461a      	mov	r2, r3
 800bb6c:	f7fa f93e 	bl	8005dec <UART_Transmit>
 800bb70:	4603      	mov	r3, r0
 800bb72:	73bb      	strb	r3, [r7, #14]
	uint8_t lu8_ret = 0;
 800bb74:	2300      	movs	r3, #0
 800bb76:	73fb      	strb	r3, [r7, #15]
	if (UART_STATUS_SUCCESS == ret_stat)
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d102      	bne.n	800bb84 <at_writePort+0x30>
	{
		lu8_ret = E_SUCCESS;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
 800bb82:	e004      	b.n	800bb8e <at_writePort+0x3a>
	}
	else if (UART_STATUS_FAILURE == ret_stat)
 800bb84:	7bbb      	ldrb	r3, [r7, #14]
 800bb86:	2b01      	cmp	r3, #1
 800bb88:	d101      	bne.n	800bb8e <at_writePort+0x3a>
	{
		lu8_ret = E_FAIL;
 800bb8a:	2301      	movs	r3, #1
 800bb8c:	73fb      	strb	r3, [r7, #15]
	}
	return lu8_ret;
 800bb8e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb90:	4618      	mov	r0, r3
 800bb92:	3710      	adds	r7, #16
 800bb94:	46bd      	mov	sp, r7
 800bb96:	bd80      	pop	{r7, pc}
 800bb98:	1ffe8844 	.word	0x1ffe8844

0800bb9c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
 800bba4:	460b      	mov	r3, r1
 800bba6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800bba8:	78fb      	ldrb	r3, [r7, #3]
 800bbaa:	2201      	movs	r2, #1
 800bbac:	409a      	lsls	r2, r3
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	605a      	str	r2, [r3, #4]
}
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b083      	sub	sp, #12
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800bbc8:	78fb      	ldrb	r3, [r7, #3]
 800bbca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bbce:	409a      	lsls	r2, r3
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	605a      	str	r2, [r3, #4]
}
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr
 800bbde:	bf00      	nop

0800bbe0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b082      	sub	sp, #8
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681a      	ldr	r2, [r3, #0]
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	7c1b      	ldrb	r3, [r3, #16]
 800bbf0:	4610      	mov	r0, r2
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f7ff ffd2 	bl	800bb9c <XMC_GPIO_SetOutputHigh>
}
 800bbf8:	3708      	adds	r7, #8
 800bbfa:	46bd      	mov	sp, r7
 800bbfc:	bd80      	pop	{r7, pc}
 800bbfe:	bf00      	nop

0800bc00 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b082      	sub	sp, #8
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	681a      	ldr	r2, [r3, #0]
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	7c1b      	ldrb	r3, [r3, #16]
 800bc10:	4610      	mov	r0, r2
 800bc12:	4619      	mov	r1, r3
 800bc14:	f7ff ffd2 	bl	800bbbc <XMC_GPIO_SetOutputLow>
}
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop

0800bc20 <delay>:
		{ 	"AT+QGPSLOC=1", 			OK_RSP, 			"+QGPSLOC:", 			CME_ERROR, 		TIMEOUT_300MS 	} 	// 	E_IDX_GET_GPS_DATA
};

/* Blocking delay function */
static void delay(uint32_t delay_ms)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	b084      	sub	sp, #16
 800bc24:	af00      	add	r7, sp, #0
 800bc26:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800bc28:	480f      	ldr	r0, [pc, #60]	; (800bc68 <delay+0x48>)
 800bc2a:	f7fa fceb 	bl	8006604 <TIMER_ClearEvent>

	delay_cnt = delay_ms * 100000;	//TIMER_DELAY_MUL_FACTOR;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a0e      	ldr	r2, [pc, #56]	; (800bc6c <delay+0x4c>)
 800bc32:	fb02 f303 	mul.w	r3, r2, r3
 800bc36:	60fb      	str	r3, [r7, #12]

	TIMER_SetTimeInterval(&TIMER_0, delay_cnt);
 800bc38:	480b      	ldr	r0, [pc, #44]	; (800bc68 <delay+0x48>)
 800bc3a:	68f9      	ldr	r1, [r7, #12]
 800bc3c:	f7fa fbc0 	bl	80063c0 <TIMER_SetTimeInterval>

	TIMER_Start(&TIMER_0);
 800bc40:	4809      	ldr	r0, [pc, #36]	; (800bc68 <delay+0x48>)
 800bc42:	f7fa fb41 	bl	80062c8 <TIMER_Start>

	while (!TIMER_GetInterruptStatus(&TIMER_0))
 800bc46:	bf00      	nop
 800bc48:	4807      	ldr	r0, [pc, #28]	; (800bc68 <delay+0x48>)
 800bc4a:	f7fa fcb5 	bl	80065b8 <TIMER_GetInterruptStatus>
 800bc4e:	4603      	mov	r3, r0
 800bc50:	f083 0301 	eor.w	r3, r3, #1
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d1f6      	bne.n	800bc48 <delay+0x28>
		;

	TIMER_Stop(&TIMER_0);
 800bc5a:	4803      	ldr	r0, [pc, #12]	; (800bc68 <delay+0x48>)
 800bc5c:	f7fa fb5c 	bl	8006318 <TIMER_Stop>
}
 800bc60:	3710      	adds	r7, #16
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	1ffe8850 	.word	0x1ffe8850
 800bc6c:	000186a0 	.word	0x000186a0

0800bc70 <mod_enable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_enable4gModule(void)
{
 800bc70:	b580      	push	{r7, lr}
 800bc72:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&MODULE_4G_EN_OUT_D);
 800bc74:	480a      	ldr	r0, [pc, #40]	; (800bca0 <mod_enable4gModule+0x30>)
 800bc76:	f7ff ffb3 	bl	800bbe0 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800bc7a:	480a      	ldr	r0, [pc, #40]	; (800bca4 <mod_enable4gModule+0x34>)
 800bc7c:	f7ff ffc0 	bl	800bc00 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800bc80:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc84:	f7ff ffcc 	bl	800bc20 <delay>

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800bc88:	4806      	ldr	r0, [pc, #24]	; (800bca4 <mod_enable4gModule+0x34>)
 800bc8a:	f7ff ffa9 	bl	800bbe0 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800bc8e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bc92:	f7ff ffc5 	bl	800bc20 <delay>

	gb_isMqttConnected = false;
 800bc96:	4b04      	ldr	r3, [pc, #16]	; (800bca8 <mod_enable4gModule+0x38>)
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	08013a24 	.word	0x08013a24
 800bca4:	08013a10 	.word	0x08013a10
 800bca8:	1fff5230 	.word	0x1fff5230

0800bcac <mod_disable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_disable4gModule(void)
{
 800bcac:	b580      	push	{r7, lr}
 800bcae:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&MODULE_4G_EN_OUT_D);
 800bcb0:	4808      	ldr	r0, [pc, #32]	; (800bcd4 <mod_disable4gModule+0x28>)
 800bcb2:	f7ff ffa5 	bl	800bc00 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800bcb6:	4808      	ldr	r0, [pc, #32]	; (800bcd8 <mod_disable4gModule+0x2c>)
 800bcb8:	f7ff ff92 	bl	800bbe0 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800bcbc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bcc0:	f7ff ffae 	bl	800bc20 <delay>

	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800bcc4:	4804      	ldr	r0, [pc, #16]	; (800bcd8 <mod_disable4gModule+0x2c>)
 800bcc6:	f7ff ff9b 	bl	800bc00 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800bcca:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bcce:	f7ff ffa7 	bl	800bc20 <delay>

//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800bcd2:	bd80      	pop	{r7, pc}
 800bcd4:	08013a24 	.word	0x08013a24
 800bcd8:	08013a10 	.word	0x08013a10

0800bcdc <mod_open4gModPort>:
 *
 * Return values 	:	en_responseRetCodes_t
 *
 ****************************************************************************/
en_responseRetCodes_t mod_open4gModPort(void)
{
 800bcdc:	b580      	push	{r7, lr}
 800bcde:	b082      	sub	sp, #8
 800bce0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bce2:	2304      	movs	r3, #4
 800bce4:	71fb      	strb	r3, [r7, #7]

	/* Initialize the UART port */
	len_retStatus = at_initInterface();
 800bce6:	f7ff ff05 	bl	800baf4 <at_initInterface>
 800bcea:	4603      	mov	r3, r0
 800bcec:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
	{
		/* Do something after successful initialization */
	}

	return len_retStatus;
 800bcee:	79fb      	ldrb	r3, [r7, #7]
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3708      	adds	r7, #8
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <mod_receiveRsp>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_receiveRsp(void)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
	if (at_isRxBuffEmpty() != true)
 800bcfe:	f7ff ff1d 	bl	800bb3c <at_isRxBuffEmpty>
 800bd02:	4603      	mov	r3, r0
 800bd04:	f083 0301 	eor.w	r3, r3, #1
 800bd08:	b2db      	uxtb	r3, r3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	f000 80e8 	beq.w	800bee0 <mod_receiveRsp+0x1e8>
	{
		uint8_t lu8_rcvdByte = 0;
 800bd10:	2300      	movs	r3, #0
 800bd12:	73fb      	strb	r3, [r7, #15]

		lu8_rcvdByte = at_readPort();
 800bd14:	f7ff ff08 	bl	800bb28 <at_readPort>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	73fb      	strb	r3, [r7, #15]
		if (lu8_rcvdByte != 0)
 800bd1c:	7bfb      	ldrb	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f000 80de 	beq.w	800bee0 <mod_receiveRsp+0x1e8>
		{
			gu8arr_respBuffer[sgu8_respCount++] = lu8_rcvdByte;
 800bd24:	4b70      	ldr	r3, [pc, #448]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800bd26:	781b      	ldrb	r3, [r3, #0]
 800bd28:	1c5a      	adds	r2, r3, #1
 800bd2a:	b2d1      	uxtb	r1, r2
 800bd2c:	4a6e      	ldr	r2, [pc, #440]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800bd2e:	7011      	strb	r1, [r2, #0]
 800bd30:	4619      	mov	r1, r3
 800bd32:	4a6e      	ldr	r2, [pc, #440]	; (800beec <mod_receiveRsp+0x1f4>)
 800bd34:	7bfb      	ldrb	r3, [r7, #15]
 800bd36:	5453      	strb	r3, [r2, r1]
			lu8_rcvdByte = 0;
 800bd38:	2300      	movs	r3, #0
 800bd3a:	73fb      	strb	r3, [r7, #15]

			if (NULL != strstr((const char*) gu8arr_respBuffer, (const char*) QMTSTAT))
 800bd3c:	486b      	ldr	r0, [pc, #428]	; (800beec <mod_receiveRsp+0x1f4>)
 800bd3e:	496c      	ldr	r1, [pc, #432]	; (800bef0 <mod_receiveRsp+0x1f8>)
 800bd40:	f006 f97d 	bl	801203e <strstr>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d04a      	beq.n	800bde0 <mod_receiveRsp+0xe8>
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800bd4a:	4868      	ldr	r0, [pc, #416]	; (800beec <mod_receiveRsp+0x1f4>)
 800bd4c:	213a      	movs	r1, #58	; 0x3a
 800bd4e:	f006 f946 	bl	8011fde <strchr>
 800bd52:	60b8      	str	r0, [r7, #8]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bd54:	68b8      	ldr	r0, [r7, #8]
 800bd56:	210a      	movs	r1, #10
 800bd58:	f006 f941 	bl	8011fde <strchr>
 800bd5c:	4603      	mov	r3, r0
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d03d      	beq.n	800bdde <mod_receiveRsp+0xe6>
				{
					lu8p_saveptr += 2;
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	3302      	adds	r3, #2
 800bd66:	60bb      	str	r3, [r7, #8]

					uint8_t lu8_result = atoi((char *) lu8p_saveptr);
 800bd68:	68b8      	ldr	r0, [r7, #8]
 800bd6a:	f005 fe0b 	bl	8011984 <atoi>
 800bd6e:	4603      	mov	r3, r0
 800bd70:	71fb      	strb	r3, [r7, #7]
					if (sgu8_mqttClientId == lu8_result)	//check client Idx
 800bd72:	4b60      	ldr	r3, [pc, #384]	; (800bef4 <mod_receiveRsp+0x1fc>)
 800bd74:	781b      	ldrb	r3, [r3, #0]
 800bd76:	79fa      	ldrb	r2, [r7, #7]
 800bd78:	429a      	cmp	r2, r3
 800bd7a:	d130      	bne.n	800bdde <mod_receiveRsp+0xe6>
					{
						lu8p_saveptr += 2;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
 800bd7e:	3302      	adds	r3, #2
 800bd80:	60bb      	str	r3, [r7, #8]
						lu8_result = atoi((char *) lu8p_saveptr);	//check error code
 800bd82:	68b8      	ldr	r0, [r7, #8]
 800bd84:	f005 fdfe 	bl	8011984 <atoi>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	71fb      	strb	r3, [r7, #7]
						 * 2 --> Sending PINGREQ packet timed out or failed
						 * 3 --> Sending CONNECT packet timed out or failed
						 * 4 --> Receiving CONNACK packet timed out or failed
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
 800bd8c:	79fb      	ldrb	r3, [r7, #7]
 800bd8e:	2b01      	cmp	r3, #1
 800bd90:	d00b      	beq.n	800bdaa <mod_receiveRsp+0xb2>
 800bd92:	79fb      	ldrb	r3, [r7, #7]
 800bd94:	2b02      	cmp	r3, #2
 800bd96:	d008      	beq.n	800bdaa <mod_receiveRsp+0xb2>
 800bd98:	79fb      	ldrb	r3, [r7, #7]
 800bd9a:	2b03      	cmp	r3, #3
 800bd9c:	d005      	beq.n	800bdaa <mod_receiveRsp+0xb2>
								|| (4 == lu8_result) || (6 == lu8_result))
 800bd9e:	79fb      	ldrb	r3, [r7, #7]
 800bda0:	2b04      	cmp	r3, #4
 800bda2:	d002      	beq.n	800bdaa <mod_receiveRsp+0xb2>
 800bda4:	79fb      	ldrb	r3, [r7, #7]
 800bda6:	2b06      	cmp	r3, #6
 800bda8:	d10b      	bne.n	800bdc2 <mod_receiveRsp+0xca>
						{
							if (gb_isMqttConnected == true)
 800bdaa:	4b53      	ldr	r3, [pc, #332]	; (800bef8 <mod_receiveRsp+0x200>)
 800bdac:	781b      	ldrb	r3, [r3, #0]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d006      	beq.n	800bdc0 <mod_receiveRsp+0xc8>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
 800bdb2:	4b52      	ldr	r3, [pc, #328]	; (800befc <mod_receiveRsp+0x204>)
 800bdb4:	2209      	movs	r2, #9
 800bdb6:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800bdb8:	4b4f      	ldr	r3, [pc, #316]	; (800bef8 <mod_receiveRsp+0x200>)
 800bdba:	2200      	movs	r2, #0
 800bdbc:	701a      	strb	r2, [r3, #0]
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
								|| (4 == lu8_result) || (6 == lu8_result))
						{
							if (gb_isMqttConnected == true)
 800bdbe:	e00e      	b.n	800bdde <mod_receiveRsp+0xe6>
 800bdc0:	e00d      	b.n	800bdde <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
								gb_isMqttConnected = false;
							}
						}
						else if (8 == lu8_result)//The client closes the MQTT connection
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	2b08      	cmp	r3, #8
 800bdc6:	d10a      	bne.n	800bdde <mod_receiveRsp+0xe6>
						{
							if (gb_isMqttConnected == true)
 800bdc8:	4b4b      	ldr	r3, [pc, #300]	; (800bef8 <mod_receiveRsp+0x200>)
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d006      	beq.n	800bdde <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_CONNECT_STATE;
 800bdd0:	4b4a      	ldr	r3, [pc, #296]	; (800befc <mod_receiveRsp+0x204>)
 800bdd2:	220b      	movs	r2, #11
 800bdd4:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800bdd6:	4b48      	ldr	r3, [pc, #288]	; (800bef8 <mod_receiveRsp+0x200>)
 800bdd8:	2200      	movs	r2, #0
 800bdda:	701a      	strb	r2, [r3, #0]
 800bddc:	e080      	b.n	800bee0 <mod_receiveRsp+0x1e8>
 800bdde:	e07f      	b.n	800bee0 <mod_receiveRsp+0x1e8>
						}
					}
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800bde0:	4842      	ldr	r0, [pc, #264]	; (800beec <mod_receiveRsp+0x1f4>)
 800bde2:	4947      	ldr	r1, [pc, #284]	; (800bf00 <mod_receiveRsp+0x208>)
 800bde4:	f006 f92b 	bl	801203e <strstr>
 800bde8:	4603      	mov	r3, r0
							}
						}
					}
				}
			}
			else if ((NULL
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d015      	beq.n	800be1a <mod_receiveRsp+0x122>
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800bdee:	483f      	ldr	r0, [pc, #252]	; (800beec <mod_receiveRsp+0x1f4>)
 800bdf0:	213a      	movs	r1, #58	; 0x3a
 800bdf2:	f006 f8f4 	bl	8011fde <strchr>
 800bdf6:	6038      	str	r0, [r7, #0]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bdf8:	6838      	ldr	r0, [r7, #0]
 800bdfa:	210a      	movs	r1, #10
 800bdfc:	f006 f8ef 	bl	8011fde <strchr>
 800be00:	4603      	mov	r3, r0
 800be02:	2b00      	cmp	r3, #0
 800be04:	d008      	beq.n	800be18 <mod_receiveRsp+0x120>
				{
					sgu8_respCount = 0;
 800be06:	4b38      	ldr	r3, [pc, #224]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be08:	2200      	movs	r2, #0
 800be0a:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800be0c:	4837      	ldr	r0, [pc, #220]	; (800beec <mod_receiveRsp+0x1f4>)
 800be0e:	2100      	movs	r1, #0
 800be10:	2240      	movs	r2, #64	; 0x40
 800be12:	f005 fdf2 	bl	80119fa <memset>
 800be16:	e063      	b.n	800bee0 <mod_receiveRsp+0x1e8>
 800be18:	e062      	b.n	800bee0 <mod_receiveRsp+0x1e8>
				}
			}
			else if (sgu8_respCount == 1)
 800be1a:	4b33      	ldr	r3, [pc, #204]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be1c:	781b      	ldrb	r3, [r3, #0]
 800be1e:	2b01      	cmp	r3, #1
 800be20:	d110      	bne.n	800be44 <mod_receiveRsp+0x14c>
			{
				if ((gu8arr_respBuffer[0] == 0xFF) || (gu8arr_respBuffer[0] == '\n'))
 800be22:	4b32      	ldr	r3, [pc, #200]	; (800beec <mod_receiveRsp+0x1f4>)
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	2bff      	cmp	r3, #255	; 0xff
 800be28:	d003      	beq.n	800be32 <mod_receiveRsp+0x13a>
 800be2a:	4b30      	ldr	r3, [pc, #192]	; (800beec <mod_receiveRsp+0x1f4>)
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	2b0a      	cmp	r3, #10
 800be30:	d156      	bne.n	800bee0 <mod_receiveRsp+0x1e8>
				{
					sgu8_respCount = 0;
 800be32:	4b2d      	ldr	r3, [pc, #180]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be34:	2200      	movs	r2, #0
 800be36:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800be38:	482c      	ldr	r0, [pc, #176]	; (800beec <mod_receiveRsp+0x1f4>)
 800be3a:	2100      	movs	r1, #0
 800be3c:	2240      	movs	r2, #64	; 0x40
 800be3e:	f005 fddc 	bl	80119fa <memset>
 800be42:	e04d      	b.n	800bee0 <mod_receiveRsp+0x1e8>
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer,
 800be44:	4829      	ldr	r0, [pc, #164]	; (800beec <mod_receiveRsp+0x1f4>)
 800be46:	492f      	ldr	r1, [pc, #188]	; (800bf04 <mod_receiveRsp+0x20c>)
 800be48:	f006 f8f9 	bl	801203e <strstr>
 800be4c:	4603      	mov	r3, r0
				{
					sgu8_respCount = 0;
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
				}
			}
			else if ((NULL
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d012      	beq.n	800be78 <mod_receiveRsp+0x180>
					!= strstr((const char*) gu8arr_respBuffer,
							(const char*) "QIND: SMS DONE\r\n")))
			{
				gst_deviceStatus.mb_ismodemPwrDwn = false;
 800be52:	4b2d      	ldr	r3, [pc, #180]	; (800bf08 <mod_receiveRsp+0x210>)
 800be54:	2200      	movs	r2, #0
 800be56:	701a      	strb	r2, [r3, #0]
				sgu8_respCount = 0;
 800be58:	4b23      	ldr	r3, [pc, #140]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800be5e:	4823      	ldr	r0, [pc, #140]	; (800beec <mod_receiveRsp+0x1f4>)
 800be60:	2100      	movs	r1, #0
 800be62:	2240      	movs	r2, #64	; 0x40
 800be64:	f005 fdc9 	bl	80119fa <memset>
				sen_4gRunState = E_SET_URC_PORT_STATE;
 800be68:	4b24      	ldr	r3, [pc, #144]	; (800befc <mod_receiveRsp+0x204>)
 800be6a:	2201      	movs	r2, #1
 800be6c:	701a      	strb	r2, [r3, #0]
				delay(2000);
 800be6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800be72:	f7ff fed5 	bl	800bc20 <delay>
 800be76:	e033      	b.n	800bee0 <mod_receiveRsp+0x1e8>
			}
			else if (RDY_SIZE == sgu8_respCount)
 800be78:	4b1b      	ldr	r3, [pc, #108]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be7a:	781b      	ldrb	r3, [r3, #0]
 800be7c:	2b07      	cmp	r3, #7
 800be7e:	d119      	bne.n	800beb4 <mod_receiveRsp+0x1bc>
			{
				if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) READY)))
 800be80:	481a      	ldr	r0, [pc, #104]	; (800beec <mod_receiveRsp+0x1f4>)
 800be82:	4922      	ldr	r1, [pc, #136]	; (800bf0c <mod_receiveRsp+0x214>)
 800be84:	f006 f8db 	bl	801203e <strstr>
 800be88:	4603      	mov	r3, r0
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d028      	beq.n	800bee0 <mod_receiveRsp+0x1e8>
				{
					gst_deviceStatus.mb_ismodemPwrDwn = false;
 800be8e:	4b1e      	ldr	r3, [pc, #120]	; (800bf08 <mod_receiveRsp+0x210>)
 800be90:	2200      	movs	r2, #0
 800be92:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800be94:	4b14      	ldr	r3, [pc, #80]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800be96:	2200      	movs	r2, #0
 800be98:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800be9a:	4814      	ldr	r0, [pc, #80]	; (800beec <mod_receiveRsp+0x1f4>)
 800be9c:	2100      	movs	r1, #0
 800be9e:	2240      	movs	r2, #64	; 0x40
 800bea0:	f005 fdab 	bl	80119fa <memset>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800bea4:	4b15      	ldr	r3, [pc, #84]	; (800befc <mod_receiveRsp+0x204>)
 800bea6:	2202      	movs	r2, #2
 800bea8:	701a      	strb	r2, [r3, #0]
					delay(2000);
 800beaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800beae:	f7ff feb7 	bl	800bc20 <delay>
 800beb2:	e015      	b.n	800bee0 <mod_receiveRsp+0x1e8>
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
 800beb4:	4b0c      	ldr	r3, [pc, #48]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800beb6:	781b      	ldrb	r3, [r3, #0]
 800beb8:	2b10      	cmp	r3, #16
 800beba:	d111      	bne.n	800bee0 <mod_receiveRsp+0x1e8>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 800bebc:	480b      	ldr	r0, [pc, #44]	; (800beec <mod_receiveRsp+0x1f4>)
 800bebe:	4914      	ldr	r1, [pc, #80]	; (800bf10 <mod_receiveRsp+0x218>)
 800bec0:	f006 f8bd 	bl	801203e <strstr>
 800bec4:	4603      	mov	r3, r0
					delay(2000);
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
			{
				if ((NULL
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d00a      	beq.n	800bee0 <mod_receiveRsp+0x1e8>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
				{
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800beca:	4b0f      	ldr	r3, [pc, #60]	; (800bf08 <mod_receiveRsp+0x210>)
 800becc:	2201      	movs	r2, #1
 800bece:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800bed0:	4b05      	ldr	r3, [pc, #20]	; (800bee8 <mod_receiveRsp+0x1f0>)
 800bed2:	2200      	movs	r2, #0
 800bed4:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bed6:	4805      	ldr	r0, [pc, #20]	; (800beec <mod_receiveRsp+0x1f4>)
 800bed8:	2100      	movs	r1, #0
 800beda:	2240      	movs	r2, #64	; 0x40
 800bedc:	f005 fd8d 	bl	80119fa <memset>
				}
			}
		}
	}
}
 800bee0:	3710      	adds	r7, #16
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	bf00      	nop
 800bee8:	1fff4764 	.word	0x1fff4764
 800beec:	1fff46c4 	.word	0x1fff46c4
 800bef0:	08014080 	.word	0x08014080
 800bef4:	1fff4765 	.word	0x1fff4765
 800bef8:	1fff5230 	.word	0x1fff5230
 800befc:	1ffea4d8 	.word	0x1ffea4d8
 800bf00:	0801408c 	.word	0x0801408c
 800bf04:	08014098 	.word	0x08014098
 800bf08:	1ffea4dc 	.word	0x1ffea4dc
 800bf0c:	080140ac 	.word	0x080140ac
 800bf10:	080140b4 	.word	0x080140b4

0800bf14 <mod_sendCmd>:
 *
 * Return values 	: 	en_responseRetCodes_t
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_sendCmd(uint8_t *lu8p_data, uint16_t lu16_len)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
 800bf1c:	460b      	mov	r3, r1
 800bf1e:	807b      	strh	r3, [r7, #2]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bf20:	2304      	movs	r3, #4
 800bf22:	73fb      	strb	r3, [r7, #15]
	uint8_t lu8_ret = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	73bb      	strb	r3, [r7, #14]

	lu8_ret = at_writePort(lu8p_data, lu16_len);
 800bf28:	887b      	ldrh	r3, [r7, #2]
 800bf2a:	6878      	ldr	r0, [r7, #4]
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	f7ff fe11 	bl	800bb54 <at_writePort>
 800bf32:	4603      	mov	r3, r0
 800bf34:	73bb      	strb	r3, [r7, #14]
	if (E_SUCCESS == lu8_ret)
 800bf36:	7bbb      	ldrb	r3, [r7, #14]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d102      	bne.n	800bf42 <mod_sendCmd+0x2e>
	{
		len_retStatus = E_RET_SUCCESS;
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	73fb      	strb	r3, [r7, #15]
 800bf40:	e001      	b.n	800bf46 <mod_sendCmd+0x32>
	}
	else
	{
		len_retStatus = E_RET_WRITE_ERROR;
 800bf42:	2305      	movs	r3, #5
 800bf44:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 800bf46:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf48:	4618      	mov	r0, r3
 800bf4a:	3710      	adds	r7, #16
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	bd80      	pop	{r7, pc}

0800bf50 <mod_sendCmdGetRsp>:
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ***************************************************************************/
static en_responseRetCodes_t mod_sendCmdGetRsp(en_ATCommandIdx_t len_ATCmdIdx,
		uint8_t *lu8p_cmdParam)
{
 800bf50:	b590      	push	{r4, r7, lr}
 800bf52:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 800bf56:	af00      	add	r7, sp, #0
 800bf58:	4602      	mov	r2, r0
 800bf5a:	463b      	mov	r3, r7
 800bf5c:	6019      	str	r1, [r3, #0]
 800bf5e:	1dfb      	adds	r3, r7, #7
 800bf60:	701a      	strb	r2, [r3, #0]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bf62:	2304      	movs	r3, #4
 800bf64:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint8_t lu8arr_sendCmdBuff[SEND_AT_CMD_BUFF];
	uint16_t lu16_BufferSize = 0;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
	uint8_t *lu8p_Ptr = NULL;
 800bf6e:	2300      	movs	r3, #0
 800bf70:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	uint8_t *lu8p_saveptr = NULL;
 800bf74:	f107 030c 	add.w	r3, r7, #12
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

	switch (sen_sendCmdGetRespState)
 800bf7c:	4bbe      	ldr	r3, [pc, #760]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800bf7e:	781b      	ldrb	r3, [r3, #0]
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d010      	beq.n	800bfa6 <mod_sendCmdGetRsp+0x56>
 800bf84:	2b02      	cmp	r3, #2
 800bf86:	d070      	beq.n	800c06a <mod_sendCmdGetRsp+0x11a>
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	f040 8267 	bne.w	800c45c <mod_sendCmdGetRsp+0x50c>
	{
		case E_AT_CMD_IDLE_STATE:
			sgu8_respCount = 0;
 800bf8e:	4bbb      	ldr	r3, [pc, #748]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800bf90:	2200      	movs	r2, #0
 800bf92:	701a      	strb	r2, [r3, #0]
			memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bf94:	48ba      	ldr	r0, [pc, #744]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800bf96:	2100      	movs	r1, #0
 800bf98:	2240      	movs	r2, #64	; 0x40
 800bf9a:	f005 fd2e 	bl	80119fa <memset>
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bf9e:	4bb6      	ldr	r3, [pc, #728]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	701a      	strb	r2, [r3, #0]
		break;
 800bfa4:	e261      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));
 800bfa6:	f107 0310 	add.w	r3, r7, #16
 800bfaa:	4618      	mov	r0, r3
 800bfac:	2100      	movs	r1, #0
 800bfae:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bfb2:	f005 fd22 	bl	80119fa <memset>

			strncpy((char *) lu8arr_sendCmdBuff,
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 800bfb6:	1dfb      	adds	r3, r7, #7
 800bfb8:	781b      	ldrb	r3, [r3, #0]
 800bfba:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bfbe:	fb02 f303 	mul.w	r3, r2, r3
 800bfc2:	4ab0      	ldr	r2, [pc, #704]	; (800c284 <mod_sendCmdGetRsp+0x334>)
 800bfc4:	189c      	adds	r4, r3, r2
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));
 800bfc6:	1dfb      	adds	r3, r7, #7
 800bfc8:	781b      	ldrb	r3, [r3, #0]
 800bfca:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bfce:	fb02 f303 	mul.w	r3, r2, r3
 800bfd2:	4aac      	ldr	r2, [pc, #688]	; (800c284 <mod_sendCmdGetRsp+0x334>)
 800bfd4:	4413      	add	r3, r2
		break;

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));

			strncpy((char *) lu8arr_sendCmdBuff,
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f006 f817 	bl	801200a <strlen>
 800bfdc:	4602      	mov	r2, r0
 800bfde:	f107 0310 	add.w	r3, r7, #16
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	4621      	mov	r1, r4
 800bfe6:	f006 f818 	bl	801201a <strncpy>
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));

			if (NULL != lu8p_cmdParam)
 800bfea:	463b      	mov	r3, r7
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d006      	beq.n	800c000 <mod_sendCmdGetRsp+0xb0>
			{
				strcat((char *) lu8arr_sendCmdBuff, (char *) lu8p_cmdParam);
 800bff2:	f107 0210 	add.w	r2, r7, #16
 800bff6:	463b      	mov	r3, r7
 800bff8:	4610      	mov	r0, r2
 800bffa:	6819      	ldr	r1, [r3, #0]
 800bffc:	f005 ffe0 	bl	8011fc0 <strcat>
			}

			lu16_BufferSize = strlen((char *) lu8arr_sendCmdBuff);
 800c000:	f107 0310 	add.w	r3, r7, #16
 800c004:	4618      	mov	r0, r3
 800c006:	f006 f800 	bl	801200a <strlen>
 800c00a:	4603      	mov	r3, r0
 800c00c:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
			len_retStatus = mod_sendCmd(lu8arr_sendCmdBuff, lu16_BufferSize);
 800c010:	f107 0210 	add.w	r2, r7, #16
 800c014:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 800c018:	4610      	mov	r0, r2
 800c01a:	4619      	mov	r1, r3
 800c01c:	f7ff ff7a 	bl	800bf14 <mod_sendCmd>
 800c020:	4603      	mov	r3, r0
 800c022:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			if (E_RET_SUCCESS == len_retStatus)
 800c026:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d11c      	bne.n	800c068 <mod_sendCmdGetRsp+0x118>
			{
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c02e:	4894      	ldr	r0, [pc, #592]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c030:	2100      	movs	r1, #0
 800c032:	2240      	movs	r2, #64	; 0x40
 800c034:	f005 fce1 	bl	80119fa <memset>
				sgu8_respCount = 0;
 800c038:	4b90      	ldr	r3, [pc, #576]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c03a:	2200      	movs	r2, #0
 800c03c:	701a      	strb	r2, [r3, #0]
				tm_setResponseTime(gcst_ATCmdTable[len_ATCmdIdx].mu32_respTimeoutInMs);
 800c03e:	1dfb      	adds	r3, r7, #7
 800c040:	781b      	ldrb	r3, [r3, #0]
 800c042:	4a90      	ldr	r2, [pc, #576]	; (800c284 <mod_sendCmdGetRsp+0x334>)
 800c044:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800c048:	fb01 f303 	mul.w	r3, r1, r3
 800c04c:	4413      	add	r3, r2
 800c04e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4618      	mov	r0, r3
 800c056:	f7f4 f9d9 	bl	800040c <tm_setResponseTime>
				len_retStatus = E_RET_INPROGRESS;
 800c05a:	2304      	movs	r3, #4
 800c05c:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
				sen_sendCmdGetRespState = E_AT_CMD_RECV_INPROG_STATE;
 800c060:	4b85      	ldr	r3, [pc, #532]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c062:	2202      	movs	r2, #2
 800c064:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c066:	e200      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>
 800c068:	e1ff      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
 800c06a:	4b84      	ldr	r3, [pc, #528]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b00      	cmp	r3, #0
 800c070:	f000 81dd 	beq.w	800c42e <mod_sendCmdGetRsp+0x4de>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 800c074:	1dfb      	adds	r3, r7, #7
 800c076:	781b      	ldrb	r3, [r3, #0]
 800c078:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c07c:	fb02 f303 	mul.w	r3, r2, r3
 800c080:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c084:	4a7f      	ldr	r2, [pc, #508]	; (800c284 <mod_sendCmdGetRsp+0x334>)
 800c086:	4413      	add	r3, r2

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c088:	487d      	ldr	r0, [pc, #500]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c08a:	4619      	mov	r1, r3
 800c08c:	f005 ffd7 	bl	801203e <strstr>
 800c090:	4603      	mov	r3, r0
		break;

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00b      	beq.n	800c0ae <mod_sendCmdGetRsp+0x15e>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
				{
					sgu8_respCount = 0;
 800c096:	4b79      	ldr	r3, [pc, #484]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c098:	2200      	movs	r2, #0
 800c09a:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
 800c09c:	f7f4 f9d0 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_SUCCESS;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c0a6:	4b74      	ldr	r3, [pc, #464]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c0a8:	2201      	movs	r2, #1
 800c0aa:	701a      	strb	r2, [r3, #0]
 800c0ac:	e1d5      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
				}

				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 800c0ae:	4874      	ldr	r0, [pc, #464]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c0b0:	4975      	ldr	r1, [pc, #468]	; (800c288 <mod_sendCmdGetRsp+0x338>)
 800c0b2:	f005 ffc4 	bl	801203e <strstr>
 800c0b6:	4603      	mov	r3, r0
					tm_clearResponseTime();
					len_retStatus = E_RET_SUCCESS;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}

				else if ((NULL
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d01e      	beq.n	800c0fa <mod_sendCmdGetRsp+0x1aa>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c0bc:	4870      	ldr	r0, [pc, #448]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c0be:	213a      	movs	r1, #58	; 0x3a
 800c0c0:	f005 ff8d 	bl	8011fde <strchr>
 800c0c4:	4602      	mov	r2, r0
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c0cc:	f107 030c 	add.w	r3, r7, #12
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	210a      	movs	r1, #10
 800c0d6:	f005 ff82 	bl	8011fde <strchr>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	f000 81bc 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c0e2:	4b66      	ldr	r3, [pc, #408]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c0e8:	f7f4 f9aa 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c0f2:	4b61      	ldr	r3, [pc, #388]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c0f4:	2201      	movs	r2, #1
 800c0f6:	701a      	strb	r2, [r3, #0]
 800c0f8:	e1af      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 800c0fa:	4861      	ldr	r0, [pc, #388]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c0fc:	4963      	ldr	r1, [pc, #396]	; (800c28c <mod_sendCmdGetRsp+0x33c>)
 800c0fe:	f005 ff9e 	bl	801203e <strstr>
 800c102:	4603      	mov	r3, r0
//						sgu8_respCount = 0;
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
 800c104:	2b00      	cmp	r3, #0
 800c106:	d01e      	beq.n	800c146 <mod_sendCmdGetRsp+0x1f6>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c108:	485d      	ldr	r0, [pc, #372]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c10a:	213a      	movs	r1, #58	; 0x3a
 800c10c:	f005 ff67 	bl	8011fde <strchr>
 800c110:	4602      	mov	r2, r0
 800c112:	f107 030c 	add.w	r3, r7, #12
 800c116:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c118:	f107 030c 	add.w	r3, r7, #12
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	4618      	mov	r0, r3
 800c120:	210a      	movs	r1, #10
 800c122:	f005 ff5c 	bl	8011fde <strchr>
 800c126:	4603      	mov	r3, r0
 800c128:	2b00      	cmp	r3, #0
 800c12a:	f000 8196 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c12e:	4b53      	ldr	r3, [pc, #332]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c130:	2200      	movs	r2, #0
 800c132:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c134:	f7f4 f984 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c138:	2300      	movs	r3, #0
 800c13a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c13e:	4b4e      	ldr	r3, [pc, #312]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c140:	2201      	movs	r2, #1
 800c142:	701a      	strb	r2, [r3, #0]
 800c144:	e189      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 800c146:	484e      	ldr	r0, [pc, #312]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c148:	4951      	ldr	r1, [pc, #324]	; (800c290 <mod_sendCmdGetRsp+0x340>)
 800c14a:	f005 ff78 	bl	801203e <strstr>
 800c14e:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c150:	2b00      	cmp	r3, #0
 800c152:	d01e      	beq.n	800c192 <mod_sendCmdGetRsp+0x242>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c154:	484a      	ldr	r0, [pc, #296]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c156:	213a      	movs	r1, #58	; 0x3a
 800c158:	f005 ff41 	bl	8011fde <strchr>
 800c15c:	4602      	mov	r2, r0
 800c15e:	f107 030c 	add.w	r3, r7, #12
 800c162:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c164:	f107 030c 	add.w	r3, r7, #12
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4618      	mov	r0, r3
 800c16c:	210a      	movs	r1, #10
 800c16e:	f005 ff36 	bl	8011fde <strchr>
 800c172:	4603      	mov	r3, r0
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8170 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c17a:	4b40      	ldr	r3, [pc, #256]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c180:	f7f4 f95e 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c184:	2300      	movs	r3, #0
 800c186:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c18a:	4b3b      	ldr	r3, [pc, #236]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c18c:	2201      	movs	r2, #1
 800c18e:	701a      	strb	r2, [r3, #0]
 800c190:	e163      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 800c192:	483b      	ldr	r0, [pc, #236]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c194:	493f      	ldr	r1, [pc, #252]	; (800c294 <mod_sendCmdGetRsp+0x344>)
 800c196:	f005 ff52 	bl	801203e <strstr>
 800c19a:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d01e      	beq.n	800c1de <mod_sendCmdGetRsp+0x28e>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c1a0:	4837      	ldr	r0, [pc, #220]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c1a2:	213a      	movs	r1, #58	; 0x3a
 800c1a4:	f005 ff1b 	bl	8011fde <strchr>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	f107 030c 	add.w	r3, r7, #12
 800c1ae:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c1b0:	f107 030c 	add.w	r3, r7, #12
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	210a      	movs	r1, #10
 800c1ba:	f005 ff10 	bl	8011fde <strchr>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	f000 814a 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c1c6:	4b2d      	ldr	r3, [pc, #180]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c1cc:	f7f4 f938 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c1d6:	4b28      	ldr	r3, [pc, #160]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c1d8:	2201      	movs	r2, #1
 800c1da:	701a      	strb	r2, [r3, #0]
 800c1dc:	e13d      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 800c1de:	4828      	ldr	r0, [pc, #160]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c1e0:	492d      	ldr	r1, [pc, #180]	; (800c298 <mod_sendCmdGetRsp+0x348>)
 800c1e2:	f005 ff2c 	bl	801203e <strstr>
 800c1e6:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d01e      	beq.n	800c22a <mod_sendCmdGetRsp+0x2da>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c1ec:	4824      	ldr	r0, [pc, #144]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c1ee:	213a      	movs	r1, #58	; 0x3a
 800c1f0:	f005 fef5 	bl	8011fde <strchr>
 800c1f4:	4602      	mov	r2, r0
 800c1f6:	f107 030c 	add.w	r3, r7, #12
 800c1fa:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c1fc:	f107 030c 	add.w	r3, r7, #12
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4618      	mov	r0, r3
 800c204:	210a      	movs	r1, #10
 800c206:	f005 feea 	bl	8011fde <strchr>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	f000 8124 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c212:	4b1a      	ldr	r3, [pc, #104]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c214:	2200      	movs	r2, #0
 800c216:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c218:	f7f4 f912 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c21c:	2300      	movs	r3, #0
 800c21e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c222:	4b15      	ldr	r3, [pc, #84]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c224:	2201      	movs	r2, #1
 800c226:	701a      	strb	r2, [r3, #0]
 800c228:	e117      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800c22a:	4815      	ldr	r0, [pc, #84]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c22c:	491b      	ldr	r1, [pc, #108]	; (800c29c <mod_sendCmdGetRsp+0x34c>)
 800c22e:	f005 ff06 	bl	801203e <strstr>
 800c232:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c234:	2b00      	cmp	r3, #0
 800c236:	d033      	beq.n	800c2a0 <mod_sendCmdGetRsp+0x350>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c238:	4811      	ldr	r0, [pc, #68]	; (800c280 <mod_sendCmdGetRsp+0x330>)
 800c23a:	213a      	movs	r1, #58	; 0x3a
 800c23c:	f005 fecf 	bl	8011fde <strchr>
 800c240:	4602      	mov	r2, r0
 800c242:	f107 030c 	add.w	r3, r7, #12
 800c246:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c248:	f107 030c 	add.w	r3, r7, #12
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	4618      	mov	r0, r3
 800c250:	210a      	movs	r1, #10
 800c252:	f005 fec4 	bl	8011fde <strchr>
 800c256:	4603      	mov	r3, r0
 800c258:	2b00      	cmp	r3, #0
 800c25a:	f000 80fe 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c25e:	4b07      	ldr	r3, [pc, #28]	; (800c27c <mod_sendCmdGetRsp+0x32c>)
 800c260:	2200      	movs	r2, #0
 800c262:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c264:	f7f4 f8ec 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c268:	2300      	movs	r3, #0
 800c26a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c26e:	4b02      	ldr	r3, [pc, #8]	; (800c278 <mod_sendCmdGetRsp+0x328>)
 800c270:	2201      	movs	r2, #1
 800c272:	701a      	strb	r2, [r3, #0]
 800c274:	e0f1      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
 800c276:	bf00      	nop
 800c278:	1ffea4d9 	.word	0x1ffea4d9
 800c27c:	1fff4764 	.word	0x1fff4764
 800c280:	1fff46c4 	.word	0x1fff46c4
 800c284:	1ffea4e8 	.word	0x1ffea4e8
 800c288:	080140c4 	.word	0x080140c4
 800c28c:	080140d0 	.word	0x080140d0
 800c290:	080140dc 	.word	0x080140dc
 800c294:	080140e8 	.word	0x080140e8
 800c298:	080140f4 	.word	0x080140f4
 800c29c:	0801408c 	.word	0x0801408c
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c2a0:	4875      	ldr	r0, [pc, #468]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c2a2:	4976      	ldr	r1, [pc, #472]	; (800c47c <mod_sendCmdGetRsp+0x52c>)
 800c2a4:	f005 fecb 	bl	801203e <strstr>
 800c2a8:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d038      	beq.n	800c320 <mod_sendCmdGetRsp+0x3d0>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CME_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c2ae:	4872      	ldr	r0, [pc, #456]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c2b0:	213a      	movs	r1, #58	; 0x3a
 800c2b2:	f005 fe94 	bl	8011fde <strchr>
 800c2b6:	4602      	mov	r2, r0
 800c2b8:	f107 030c 	add.w	r3, r7, #12
 800c2bc:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c2be:	f107 030c 	add.w	r3, r7, #12
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	210a      	movs	r1, #10
 800c2c8:	f005 fe89 	bl	8011fde <strchr>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80c3 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c2d4:	f107 030c 	add.w	r3, r7, #12
 800c2d8:	4867      	ldr	r0, [pc, #412]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c2da:	4969      	ldr	r1, [pc, #420]	; (800c480 <mod_sendCmdGetRsp+0x530>)
 800c2dc:	461a      	mov	r2, r3
 800c2de:	f005 ff24 	bl	801212a <strtok_r>
 800c2e2:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c2e6:	f107 030c 	add.w	r3, r7, #12
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	1c5a      	adds	r2, r3, #1
 800c2ee:	f107 030c 	add.w	r3, r7, #12
 800c2f2:	601a      	str	r2, [r3, #0]

						sgu16_cmeError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c2f4:	f107 030c 	add.w	r3, r7, #12
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f005 fb42 	bl	8011984 <atoi>
 800c300:	4603      	mov	r3, r0
 800c302:	b29a      	uxth	r2, r3
 800c304:	4b5f      	ldr	r3, [pc, #380]	; (800c484 <mod_sendCmdGetRsp+0x534>)
 800c306:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c308:	4b5f      	ldr	r3, [pc, #380]	; (800c488 <mod_sendCmdGetRsp+0x538>)
 800c30a:	2200      	movs	r2, #0
 800c30c:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c30e:	f7f4 f897 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CME_ERROR;
 800c312:	230b      	movs	r3, #11
 800c314:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c318:	4b5c      	ldr	r3, [pc, #368]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c31a:	2201      	movs	r2, #1
 800c31c:	701a      	strb	r2, [r3, #0]
 800c31e:	e09c      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c320:	4855      	ldr	r0, [pc, #340]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c322:	495b      	ldr	r1, [pc, #364]	; (800c490 <mod_sendCmdGetRsp+0x540>)
 800c324:	f005 fe8b 	bl	801203e <strstr>
 800c328:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_CME_ERROR;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d038      	beq.n	800c3a0 <mod_sendCmdGetRsp+0x450>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CMS_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c32e:	4852      	ldr	r0, [pc, #328]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c330:	213a      	movs	r1, #58	; 0x3a
 800c332:	f005 fe54 	bl	8011fde <strchr>
 800c336:	4602      	mov	r2, r0
 800c338:	f107 030c 	add.w	r3, r7, #12
 800c33c:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c33e:	f107 030c 	add.w	r3, r7, #12
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	4618      	mov	r0, r3
 800c346:	210a      	movs	r1, #10
 800c348:	f005 fe49 	bl	8011fde <strchr>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	f000 8083 	beq.w	800c45a <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c354:	f107 030c 	add.w	r3, r7, #12
 800c358:	4847      	ldr	r0, [pc, #284]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c35a:	4949      	ldr	r1, [pc, #292]	; (800c480 <mod_sendCmdGetRsp+0x530>)
 800c35c:	461a      	mov	r2, r3
 800c35e:	f005 fee4 	bl	801212a <strtok_r>
 800c362:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c366:	f107 030c 	add.w	r3, r7, #12
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	1c5a      	adds	r2, r3, #1
 800c36e:	f107 030c 	add.w	r3, r7, #12
 800c372:	601a      	str	r2, [r3, #0]

						sgu16_cmsError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c374:	f107 030c 	add.w	r3, r7, #12
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	4618      	mov	r0, r3
 800c37c:	f005 fb02 	bl	8011984 <atoi>
 800c380:	4603      	mov	r3, r0
 800c382:	b29a      	uxth	r2, r3
 800c384:	4b43      	ldr	r3, [pc, #268]	; (800c494 <mod_sendCmdGetRsp+0x544>)
 800c386:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c388:	4b3f      	ldr	r3, [pc, #252]	; (800c488 <mod_sendCmdGetRsp+0x538>)
 800c38a:	2200      	movs	r2, #0
 800c38c:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c38e:	f7f4 f857 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CMS_ERROR;
 800c392:	230c      	movs	r3, #12
 800c394:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c398:	4b3c      	ldr	r3, [pc, #240]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c39a:	2201      	movs	r2, #1
 800c39c:	701a      	strb	r2, [r3, #0]
 800c39e:	e05c      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
 800c3a0:	1dfb      	adds	r3, r7, #7
 800c3a2:	781b      	ldrb	r3, [r3, #0]
 800c3a4:	2b1b      	cmp	r3, #27
 800c3a6:	d112      	bne.n	800c3ce <mod_sendCmdGetRsp+0x47e>
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c3a8:	4833      	ldr	r0, [pc, #204]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c3aa:	2141      	movs	r1, #65	; 0x41
 800c3ac:	f005 fe17 	bl	8011fde <strchr>
 800c3b0:	4603      	mov	r3, r0
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
				{
					if ((NULL
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d051      	beq.n	800c45a <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) "A")))
					{
						sgu8_respCount = 0;
 800c3b6:	4b34      	ldr	r3, [pc, #208]	; (800c488 <mod_sendCmdGetRsp+0x538>)
 800c3b8:	2200      	movs	r2, #0
 800c3ba:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c3bc:	f7f4 f840 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c3c6:	4b31      	ldr	r3, [pc, #196]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	701a      	strb	r2, [r3, #0]
 800c3cc:	e045      	b.n	800c45a <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c3ce:	1dfb      	adds	r3, r7, #7
 800c3d0:	781b      	ldrb	r3, [r3, #0]
 800c3d2:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c3d6:	fb02 f303 	mul.w	r3, r2, r3
 800c3da:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c3de:	4a2e      	ldr	r2, [pc, #184]	; (800c498 <mod_sendCmdGetRsp+0x548>)
 800c3e0:	4413      	add	r3, r2
 800c3e2:	3304      	adds	r3, #4
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
 800c3e4:	482d      	ldr	r0, [pc, #180]	; (800c49c <mod_sendCmdGetRsp+0x54c>)
 800c3e6:	4619      	mov	r1, r3
 800c3e8:	f005 fe29 	bl	801203e <strstr>
 800c3ec:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d133      	bne.n	800c45a <mod_sendCmdGetRsp+0x50a>
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c3f2:	1dfb      	adds	r3, r7, #7
 800c3f4:	781b      	ldrb	r3, [r3, #0]
 800c3f6:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c3fa:	fb02 f303 	mul.w	r3, r2, r3
 800c3fe:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c402:	4a25      	ldr	r2, [pc, #148]	; (800c498 <mod_sendCmdGetRsp+0x548>)
 800c404:	4413      	add	r3, r2
 800c406:	3304      	adds	r3, #4
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c408:	481b      	ldr	r0, [pc, #108]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c40a:	4619      	mov	r1, r3
 800c40c:	f005 fe17 	bl	801203e <strstr>
 800c410:	4603      	mov	r3, r0
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
 800c412:	2b00      	cmp	r3, #0
 800c414:	d021      	beq.n	800c45a <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
					{
						sgu8_respCount = 0;
 800c416:	4b1c      	ldr	r3, [pc, #112]	; (800c488 <mod_sendCmdGetRsp+0x538>)
 800c418:	2200      	movs	r2, #0
 800c41a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c41c:	f7f4 f810 	bl	8000440 <tm_clearResponseTime>
//						tm_stopTimer();
						len_retStatus = E_RET_RSP_ERROR;
 800c420:	2303      	movs	r3, #3
 800c422:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c426:	4b19      	ldr	r3, [pc, #100]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c428:	2201      	movs	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
					len_retStatus = E_RET_TIMEOUT_ERROR;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}
			}
		break;
 800c42c:	e01d      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>

				}
			}
			else
			{
				if (tm_getResponseTimeValue() == 0)
 800c42e:	f7f3 fffb 	bl	8000428 <tm_getResponseTimeValue>
 800c432:	4603      	mov	r3, r0
 800c434:	2b00      	cmp	r3, #0
 800c436:	d110      	bne.n	800c45a <mod_sendCmdGetRsp+0x50a>
				{
					sgu8_respCount = 0;
 800c438:	4b13      	ldr	r3, [pc, #76]	; (800c488 <mod_sendCmdGetRsp+0x538>)
 800c43a:	2200      	movs	r2, #0
 800c43c:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c43e:	480e      	ldr	r0, [pc, #56]	; (800c478 <mod_sendCmdGetRsp+0x528>)
 800c440:	2100      	movs	r1, #0
 800c442:	2240      	movs	r2, #64	; 0x40
 800c444:	f005 fad9 	bl	80119fa <memset>
					tm_clearResponseTime();
 800c448:	f7f3 fffa 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800c44c:	2306      	movs	r3, #6
 800c44e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c452:	4b0e      	ldr	r3, [pc, #56]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c454:	2201      	movs	r2, #1
 800c456:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 800c458:	e007      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>
 800c45a:	e006      	b.n	800c46a <mod_sendCmdGetRsp+0x51a>

		default:
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c45c:	4b0b      	ldr	r3, [pc, #44]	; (800c48c <mod_sendCmdGetRsp+0x53c>)
 800c45e:	2201      	movs	r2, #1
 800c460:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_INPROGRESS;
 800c462:	2304      	movs	r3, #4
 800c464:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		break;
 800c468:	bf00      	nop
	}

	return len_retStatus;
 800c46a:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
}
 800c46e:	4618      	mov	r0, r3
 800c470:	f207 4724 	addw	r7, r7, #1060	; 0x424
 800c474:	46bd      	mov	sp, r7
 800c476:	bd90      	pop	{r4, r7, pc}
 800c478:	1fff46c4 	.word	0x1fff46c4
 800c47c:	08014100 	.word	0x08014100
 800c480:	0801410c 	.word	0x0801410c
 800c484:	1fff4766 	.word	0x1fff4766
 800c488:	1fff4764 	.word	0x1fff4764
 800c48c:	1ffea4d9 	.word	0x1ffea4d9
 800c490:	08014110 	.word	0x08014110
 800c494:	1fff4768 	.word	0x1fff4768
 800c498:	1ffea4e8 	.word	0x1ffea4e8
 800c49c:	0801411c 	.word	0x0801411c

0800c4a0 <mod_echoOff>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_echoOff(void)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c4a6:	2304      	movs	r3, #4
 800c4a8:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ECHO_OFF, (uint8_t *) NEW_LINE);
 800c4aa:	2003      	movs	r0, #3
 800c4ac:	4913      	ldr	r1, [pc, #76]	; (800c4fc <mod_echoOff+0x5c>)
 800c4ae:	f7ff fd4f 	bl	800bf50 <mod_sendCmdGetRsp>
 800c4b2:	4603      	mov	r3, r0
 800c4b4:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c4b6:	79fb      	ldrb	r3, [r7, #7]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d103      	bne.n	800c4c4 <mod_echoOff+0x24>
	{
		lsu8_retryCnt = 0;
 800c4bc:	4b10      	ldr	r3, [pc, #64]	; (800c500 <mod_echoOff+0x60>)
 800c4be:	2200      	movs	r2, #0
 800c4c0:	701a      	strb	r2, [r3, #0]
 800c4c2:	e016      	b.n	800c4f2 <mod_echoOff+0x52>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c4c4:	79fb      	ldrb	r3, [r7, #7]
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d013      	beq.n	800c4f2 <mod_echoOff+0x52>
	{
		lsu8_retryCnt++;
 800c4ca:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <mod_echoOff+0x60>)
 800c4cc:	781b      	ldrb	r3, [r3, #0]
 800c4ce:	3301      	adds	r3, #1
 800c4d0:	b2da      	uxtb	r2, r3
 800c4d2:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <mod_echoOff+0x60>)
 800c4d4:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <mod_echoOff+0x60>)
 800c4d8:	781b      	ldrb	r3, [r3, #0]
 800c4da:	2b02      	cmp	r3, #2
 800c4dc:	d802      	bhi.n	800c4e4 <mod_echoOff+0x44>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c4de:	2304      	movs	r3, #4
 800c4e0:	71fb      	strb	r3, [r7, #7]
 800c4e2:	e006      	b.n	800c4f2 <mod_echoOff+0x52>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c4e4:	4b06      	ldr	r3, [pc, #24]	; (800c500 <mod_echoOff+0x60>)
 800c4e6:	781b      	ldrb	r3, [r3, #0]
 800c4e8:	2b03      	cmp	r3, #3
 800c4ea:	d902      	bls.n	800c4f2 <mod_echoOff+0x52>
		{
			lsu8_retryCnt = 0;
 800c4ec:	4b04      	ldr	r3, [pc, #16]	; (800c500 <mod_echoOff+0x60>)
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c4f2:	79fb      	ldrb	r3, [r7, #7]
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}
 800c4fc:	08014120 	.word	0x08014120
 800c500:	1fff4772 	.word	0x1fff4772

0800c504 <mod_setUrcPort>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setUrcPort(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c50a:	2304      	movs	r3, #4
 800c50c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "\"usbat\"\r\n";
 800c50e:	4a17      	ldr	r2, [pc, #92]	; (800c56c <mod_setUrcPort+0x68>)
 800c510:	1d3b      	adds	r3, r7, #4
 800c512:	ca07      	ldmia	r2, {r0, r1, r2}
 800c514:	c303      	stmia	r3!, {r0, r1}
 800c516:	801a      	strh	r2, [r3, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SET_URC_PRT, lu8arr_param);
 800c518:	1d3b      	adds	r3, r7, #4
 800c51a:	2002      	movs	r0, #2
 800c51c:	4619      	mov	r1, r3
 800c51e:	f7ff fd17 	bl	800bf50 <mod_sendCmdGetRsp>
 800c522:	4603      	mov	r3, r0
 800c524:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c526:	7bfb      	ldrb	r3, [r7, #15]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d103      	bne.n	800c534 <mod_setUrcPort+0x30>
	{
		lsu8_retryCnt = 0;
 800c52c:	4b10      	ldr	r3, [pc, #64]	; (800c570 <mod_setUrcPort+0x6c>)
 800c52e:	2200      	movs	r2, #0
 800c530:	701a      	strb	r2, [r3, #0]
 800c532:	e016      	b.n	800c562 <mod_setUrcPort+0x5e>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c534:	7bfb      	ldrb	r3, [r7, #15]
 800c536:	2b04      	cmp	r3, #4
 800c538:	d013      	beq.n	800c562 <mod_setUrcPort+0x5e>
	{
		lsu8_retryCnt++;
 800c53a:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <mod_setUrcPort+0x6c>)
 800c53c:	781b      	ldrb	r3, [r3, #0]
 800c53e:	3301      	adds	r3, #1
 800c540:	b2da      	uxtb	r2, r3
 800c542:	4b0b      	ldr	r3, [pc, #44]	; (800c570 <mod_setUrcPort+0x6c>)
 800c544:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c546:	4b0a      	ldr	r3, [pc, #40]	; (800c570 <mod_setUrcPort+0x6c>)
 800c548:	781b      	ldrb	r3, [r3, #0]
 800c54a:	2b02      	cmp	r3, #2
 800c54c:	d802      	bhi.n	800c554 <mod_setUrcPort+0x50>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c54e:	2304      	movs	r3, #4
 800c550:	73fb      	strb	r3, [r7, #15]
 800c552:	e006      	b.n	800c562 <mod_setUrcPort+0x5e>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c554:	4b06      	ldr	r3, [pc, #24]	; (800c570 <mod_setUrcPort+0x6c>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	2b03      	cmp	r3, #3
 800c55a:	d902      	bls.n	800c562 <mod_setUrcPort+0x5e>
		{
			lsu8_retryCnt = 0;
 800c55c:	4b04      	ldr	r3, [pc, #16]	; (800c570 <mod_setUrcPort+0x6c>)
 800c55e:	2200      	movs	r2, #0
 800c560:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c562:	7bfb      	ldrb	r3, [r7, #15]
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	08014124 	.word	0x08014124
 800c570:	1fff4773 	.word	0x1fff4773

0800c574 <mod_setFlowCtrl>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setFlowCtrl(void)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c57a:	2304      	movs	r3, #4
 800c57c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "0,0\r\n";	//0,0 ---> none, none
 800c57e:	4a1a      	ldr	r2, [pc, #104]	; (800c5e8 <mod_setFlowCtrl+0x74>)
 800c580:	1d3b      	adds	r3, r7, #4
 800c582:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c586:	6018      	str	r0, [r3, #0]
 800c588:	3304      	adds	r3, #4
 800c58a:	8019      	strh	r1, [r3, #0]
 800c58c:	2300      	movs	r3, #0
 800c58e:	817b      	strh	r3, [r7, #10]
 800c590:	2300      	movs	r3, #0
 800c592:	81bb      	strh	r3, [r7, #12]
	//uint8_t lu8arr_param[10] = "2,2\r\n";	//0,0 ---> RTS, CTS

	len_retStatus = mod_sendCmdGetRsp(E_IDX_HW_FLWCTRL, lu8arr_param);
 800c594:	1d3b      	adds	r3, r7, #4
 800c596:	2004      	movs	r0, #4
 800c598:	4619      	mov	r1, r3
 800c59a:	f7ff fcd9 	bl	800bf50 <mod_sendCmdGetRsp>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c5a2:	7bfb      	ldrb	r3, [r7, #15]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d103      	bne.n	800c5b0 <mod_setFlowCtrl+0x3c>
	{
		lsu8_retryCnt = 0;
 800c5a8:	4b10      	ldr	r3, [pc, #64]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	701a      	strb	r2, [r3, #0]
 800c5ae:	e016      	b.n	800c5de <mod_setFlowCtrl+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d013      	beq.n	800c5de <mod_setFlowCtrl+0x6a>
	{
		lsu8_retryCnt++;
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5c0:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c5c2:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d802      	bhi.n	800c5d0 <mod_setFlowCtrl+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	e006      	b.n	800c5de <mod_setFlowCtrl+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c5d0:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d902      	bls.n	800c5de <mod_setFlowCtrl+0x6a>
		{
			lsu8_retryCnt = 0;
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <mod_setFlowCtrl+0x78>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08014130 	.word	0x08014130
 800c5ec:	1fff4774 	.word	0x1fff4774

0800c5f0 <mod_extractModInfo>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractModInfo(void)
{
 800c5f0:	b5b0      	push	{r4, r5, r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c5f6:	2304      	movs	r3, #4
 800c5f8:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c5fe:	2300      	movs	r3, #0
 800c600:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FEATCH_MOD_INFO, (uint8_t *) NEW_LINE);
 800c602:	2005      	movs	r0, #5
 800c604:	4927      	ldr	r1, [pc, #156]	; (800c6a4 <mod_extractModInfo+0xb4>)
 800c606:	f7ff fca3 	bl	800bf50 <mod_sendCmdGetRsp>
 800c60a:	4603      	mov	r3, r0
 800c60c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d12b      	bne.n	800c66c <mod_extractModInfo+0x7c>
	{
		lsu8_retryCnt = 0;
 800c614:	4b24      	ldr	r3, [pc, #144]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c616:	2200      	movs	r2, #0
 800c618:	701a      	strb	r2, [r3, #0]
		if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) PRODCUT_NAME)))
 800c61a:	4824      	ldr	r0, [pc, #144]	; (800c6ac <mod_extractModInfo+0xbc>)
 800c61c:	4924      	ldr	r1, [pc, #144]	; (800c6b0 <mod_extractModInfo+0xc0>)
 800c61e:	f005 fd0e 	bl	801203e <strstr>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d01e      	beq.n	800c666 <mod_extractModInfo+0x76>
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c628:	1d3b      	adds	r3, r7, #4
 800c62a:	4820      	ldr	r0, [pc, #128]	; (800c6ac <mod_extractModInfo+0xbc>)
 800c62c:	4921      	ldr	r1, [pc, #132]	; (800c6b4 <mod_extractModInfo+0xc4>)
 800c62e:	461a      	mov	r2, r3
 800c630:	f005 fd7b 	bl	801212a <strtok_r>
 800c634:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	3301      	adds	r3, #1
 800c63a:	607b      	str	r3, [r7, #4]
			if (NULL != lu8p_temp)
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d00e      	beq.n	800c660 <mod_extractModInfo+0x70>
			{
				memcpy(gu8arr_productRevision, lu8p_saveptr, PRO_REVISION_SIZE);
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	4a1c      	ldr	r2, [pc, #112]	; (800c6b8 <mod_extractModInfo+0xc8>)
 800c646:	4614      	mov	r4, r2
 800c648:	461d      	mov	r5, r3
 800c64a:	6828      	ldr	r0, [r5, #0]
 800c64c:	6869      	ldr	r1, [r5, #4]
 800c64e:	68aa      	ldr	r2, [r5, #8]
 800c650:	68eb      	ldr	r3, [r5, #12]
 800c652:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c654:	8a2b      	ldrh	r3, [r5, #16]
 800c656:	7caa      	ldrb	r2, [r5, #18]
 800c658:	8023      	strh	r3, [r4, #0]
 800c65a:	4613      	mov	r3, r2
 800c65c:	70a3      	strb	r3, [r4, #2]
 800c65e:	e01c      	b.n	800c69a <mod_extractModInfo+0xaa>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c660:	2302      	movs	r3, #2
 800c662:	73fb      	strb	r3, [r7, #15]
 800c664:	e019      	b.n	800c69a <mod_extractModInfo+0xaa>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c666:	2302      	movs	r3, #2
 800c668:	73fb      	strb	r3, [r7, #15]
 800c66a:	e016      	b.n	800c69a <mod_extractModInfo+0xaa>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
 800c66e:	2b04      	cmp	r3, #4
 800c670:	d013      	beq.n	800c69a <mod_extractModInfo+0xaa>
	{
		lsu8_retryCnt++;
 800c672:	4b0d      	ldr	r3, [pc, #52]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	3301      	adds	r3, #1
 800c678:	b2da      	uxtb	r2, r3
 800c67a:	4b0b      	ldr	r3, [pc, #44]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c67c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c67e:	4b0a      	ldr	r3, [pc, #40]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	2b02      	cmp	r3, #2
 800c684:	d802      	bhi.n	800c68c <mod_extractModInfo+0x9c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c686:	2304      	movs	r3, #4
 800c688:	73fb      	strb	r3, [r7, #15]
 800c68a:	e006      	b.n	800c69a <mod_extractModInfo+0xaa>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c68c:	4b06      	ldr	r3, [pc, #24]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	2b03      	cmp	r3, #3
 800c692:	d902      	bls.n	800c69a <mod_extractModInfo+0xaa>
		{
			lsu8_retryCnt = 0;
 800c694:	4b04      	ldr	r3, [pc, #16]	; (800c6a8 <mod_extractModInfo+0xb8>)
 800c696:	2200      	movs	r2, #0
 800c698:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c69a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c69c:	4618      	mov	r0, r3
 800c69e:	3710      	adds	r7, #16
 800c6a0:	46bd      	mov	sp, r7
 800c6a2:	bdb0      	pop	{r4, r5, r7, pc}
 800c6a4:	08014120 	.word	0x08014120
 800c6a8:	1fff4775 	.word	0x1fff4775
 800c6ac:	1fff46c4 	.word	0x1fff46c4
 800c6b0:	0801413c 	.word	0x0801413c
 800c6b4:	0801410c 	.word	0x0801410c
 800c6b8:	1fff4704 	.word	0x1fff4704

0800c6bc <mod_enableSimDetection>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimDetection(void)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c6c2:	2304      	movs	r3, #4
 800c6c4:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1,0\r\n";
 800c6c6:	4a1a      	ldr	r2, [pc, #104]	; (800c730 <mod_enableSimDetection+0x74>)
 800c6c8:	1d3b      	adds	r3, r7, #4
 800c6ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c6ce:	6018      	str	r0, [r3, #0]
 800c6d0:	3304      	adds	r3, #4
 800c6d2:	8019      	strh	r1, [r3, #0]
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	817b      	strh	r3, [r7, #10]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_DETECTION, lu8arr_param);
 800c6dc:	1d3b      	adds	r3, r7, #4
 800c6de:	2006      	movs	r0, #6
 800c6e0:	4619      	mov	r1, r3
 800c6e2:	f7ff fc35 	bl	800bf50 <mod_sendCmdGetRsp>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d103      	bne.n	800c6f8 <mod_enableSimDetection+0x3c>
	{
		lsu8_retryCnt = 0;
 800c6f0:	4b10      	ldr	r3, [pc, #64]	; (800c734 <mod_enableSimDetection+0x78>)
 800c6f2:	2200      	movs	r2, #0
 800c6f4:	701a      	strb	r2, [r3, #0]
 800c6f6:	e016      	b.n	800c726 <mod_enableSimDetection+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c6f8:	7bfb      	ldrb	r3, [r7, #15]
 800c6fa:	2b04      	cmp	r3, #4
 800c6fc:	d013      	beq.n	800c726 <mod_enableSimDetection+0x6a>
	{
		lsu8_retryCnt++;
 800c6fe:	4b0d      	ldr	r3, [pc, #52]	; (800c734 <mod_enableSimDetection+0x78>)
 800c700:	781b      	ldrb	r3, [r3, #0]
 800c702:	3301      	adds	r3, #1
 800c704:	b2da      	uxtb	r2, r3
 800c706:	4b0b      	ldr	r3, [pc, #44]	; (800c734 <mod_enableSimDetection+0x78>)
 800c708:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c70a:	4b0a      	ldr	r3, [pc, #40]	; (800c734 <mod_enableSimDetection+0x78>)
 800c70c:	781b      	ldrb	r3, [r3, #0]
 800c70e:	2b02      	cmp	r3, #2
 800c710:	d802      	bhi.n	800c718 <mod_enableSimDetection+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c712:	2304      	movs	r3, #4
 800c714:	73fb      	strb	r3, [r7, #15]
 800c716:	e006      	b.n	800c726 <mod_enableSimDetection+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c718:	4b06      	ldr	r3, [pc, #24]	; (800c734 <mod_enableSimDetection+0x78>)
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d902      	bls.n	800c726 <mod_enableSimDetection+0x6a>
		{
			lsu8_retryCnt = 0;
 800c720:	4b04      	ldr	r3, [pc, #16]	; (800c734 <mod_enableSimDetection+0x78>)
 800c722:	2200      	movs	r2, #0
 800c724:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c726:	7bfb      	ldrb	r3, [r7, #15]
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	08014148 	.word	0x08014148
 800c734:	1fff4776 	.word	0x1fff4776

0800c738 <mod_enableSimStatusReport>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimStatusReport(void)
{
 800c738:	b580      	push	{r7, lr}
 800c73a:	b084      	sub	sp, #16
 800c73c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c73e:	2304      	movs	r3, #4
 800c740:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1\r\n";
 800c742:	4b18      	ldr	r3, [pc, #96]	; (800c7a4 <mod_enableSimStatusReport+0x6c>)
 800c744:	607b      	str	r3, [r7, #4]
 800c746:	2300      	movs	r3, #0
 800c748:	60bb      	str	r3, [r7, #8]
 800c74a:	2300      	movs	r3, #0
 800c74c:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_STATUS, lu8arr_param);
 800c74e:	1d3b      	adds	r3, r7, #4
 800c750:	2007      	movs	r0, #7
 800c752:	4619      	mov	r1, r3
 800c754:	f7ff fbfc 	bl	800bf50 <mod_sendCmdGetRsp>
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c75c:	7bfb      	ldrb	r3, [r7, #15]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d103      	bne.n	800c76a <mod_enableSimStatusReport+0x32>
	{
		lsu8_retryCnt = 0;
 800c762:	4b11      	ldr	r3, [pc, #68]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
 800c768:	e016      	b.n	800c798 <mod_enableSimStatusReport+0x60>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c76a:	7bfb      	ldrb	r3, [r7, #15]
 800c76c:	2b04      	cmp	r3, #4
 800c76e:	d013      	beq.n	800c798 <mod_enableSimStatusReport+0x60>
	{
		lsu8_retryCnt++;
 800c770:	4b0d      	ldr	r3, [pc, #52]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c772:	781b      	ldrb	r3, [r3, #0]
 800c774:	3301      	adds	r3, #1
 800c776:	b2da      	uxtb	r2, r3
 800c778:	4b0b      	ldr	r3, [pc, #44]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c77a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c77c:	4b0a      	ldr	r3, [pc, #40]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d802      	bhi.n	800c78a <mod_enableSimStatusReport+0x52>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c784:	2304      	movs	r3, #4
 800c786:	73fb      	strb	r3, [r7, #15]
 800c788:	e006      	b.n	800c798 <mod_enableSimStatusReport+0x60>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c78a:	4b07      	ldr	r3, [pc, #28]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d902      	bls.n	800c798 <mod_enableSimStatusReport+0x60>
		{
			lsu8_retryCnt = 0;
 800c792:	4b05      	ldr	r3, [pc, #20]	; (800c7a8 <mod_enableSimStatusReport+0x70>)
 800c794:	2200      	movs	r2, #0
 800c796:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c798:	7bfb      	ldrb	r3, [r7, #15]
}
 800c79a:	4618      	mov	r0, r3
 800c79c:	3710      	adds	r7, #16
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	bf00      	nop
 800c7a4:	000a0d31 	.word	0x000a0d31
 800c7a8:	1fff4777 	.word	0x1fff4777

0800c7ac <mod_checkSimStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_checkSimStatus(void)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b084      	sub	sp, #16
 800c7b0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c7b2:	2304      	movs	r3, #4
 800c7b4:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
 800c7be:	2008      	movs	r0, #8
 800c7c0:	4933      	ldr	r1, [pc, #204]	; (800c890 <mod_checkSimStatus+0xe4>)
 800c7c2:	f7ff fbc5 	bl	800bf50 <mod_sendCmdGetRsp>
 800c7c6:	4603      	mov	r3, r0
 800c7c8:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c7ca:	7bfb      	ldrb	r3, [r7, #15]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d143      	bne.n	800c858 <mod_checkSimStatus+0xac>
	{
		lsu8_retryCnt = 0;
 800c7d0:	4b30      	ldr	r3, [pc, #192]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	701a      	strb	r2, [r3, #0]
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c7d6:	4830      	ldr	r0, [pc, #192]	; (800c898 <mod_checkSimStatus+0xec>)
 800c7d8:	4930      	ldr	r1, [pc, #192]	; (800c89c <mod_checkSimStatus+0xf0>)
 800c7da:	f005 fc30 	bl	801203e <strstr>
 800c7de:	4603      	mov	r3, r0

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		if ((NULL
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d036      	beq.n	800c852 <mod_checkSimStatus+0xa6>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_CHECK_SIM_STATUS].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c7e4:	1d3b      	adds	r3, r7, #4
 800c7e6:	482c      	ldr	r0, [pc, #176]	; (800c898 <mod_checkSimStatus+0xec>)
 800c7e8:	492d      	ldr	r1, [pc, #180]	; (800c8a0 <mod_checkSimStatus+0xf4>)
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	f005 fc9d 	bl	801212a <strtok_r>
 800c7f0:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			if (NULL != lu8p_temp)
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d029      	beq.n	800c84c <mod_checkSimStatus+0xa0>
			{
				lu8p_temp = (uint8_t *) strchr((const char*) lu8p_saveptr, ',');
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	212c      	movs	r1, #44	; 0x2c
 800c7fe:	f005 fbee 	bl	8011fde <strchr>
 800c802:	60b8      	str	r0, [r7, #8]
				if (NULL != lu8p_temp)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d01d      	beq.n	800c846 <mod_checkSimStatus+0x9a>
				{
					lu8p_temp = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c80a:	1d3b      	adds	r3, r7, #4
 800c80c:	2000      	movs	r0, #0
 800c80e:	4925      	ldr	r1, [pc, #148]	; (800c8a4 <mod_checkSimStatus+0xf8>)
 800c810:	461a      	mov	r2, r3
 800c812:	f005 fc8a 	bl	801212a <strtok_r>
 800c816:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_saveptr);

					gst_deviceStatus.mb_isSimInserted = (uint8_t) atoi(
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	4618      	mov	r0, r3
 800c81c:	f005 f8b2 	bl	8011984 <atoi>
 800c820:	4603      	mov	r3, r0
 800c822:	b2db      	uxtb	r3, r3
 800c824:	2b00      	cmp	r3, #0
 800c826:	bf14      	ite	ne
 800c828:	2301      	movne	r3, #1
 800c82a:	2300      	moveq	r3, #0
 800c82c:	b2da      	uxtb	r2, r3
 800c82e:	4b1e      	ldr	r3, [pc, #120]	; (800c8a8 <mod_checkSimStatus+0xfc>)
 800c830:	705a      	strb	r2, [r3, #1]
							(const char*) lu8p_saveptr);

					if (true == gst_deviceStatus.mb_isSimInserted)
 800c832:	4b1d      	ldr	r3, [pc, #116]	; (800c8a8 <mod_checkSimStatus+0xfc>)
 800c834:	785b      	ldrb	r3, [r3, #1]
 800c836:	2b00      	cmp	r3, #0
 800c838:	d002      	beq.n	800c840 <mod_checkSimStatus+0x94>
					{
						len_retStatus = E_RET_SUCCESS;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73fb      	strb	r3, [r7, #15]
 800c83e:	e022      	b.n	800c886 <mod_checkSimStatus+0xda>
					}
					else
					{
						len_retStatus = E_RET_INPROGRESS;
 800c840:	2304      	movs	r3, #4
 800c842:	73fb      	strb	r3, [r7, #15]
 800c844:	e01f      	b.n	800c886 <mod_checkSimStatus+0xda>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800c846:	2302      	movs	r3, #2
 800c848:	73fb      	strb	r3, [r7, #15]
 800c84a:	e01c      	b.n	800c886 <mod_checkSimStatus+0xda>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c84c:	2302      	movs	r3, #2
 800c84e:	73fb      	strb	r3, [r7, #15]
 800c850:	e019      	b.n	800c886 <mod_checkSimStatus+0xda>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c852:	2302      	movs	r3, #2
 800c854:	73fb      	strb	r3, [r7, #15]
 800c856:	e016      	b.n	800c886 <mod_checkSimStatus+0xda>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c858:	7bfb      	ldrb	r3, [r7, #15]
 800c85a:	2b04      	cmp	r3, #4
 800c85c:	d013      	beq.n	800c886 <mod_checkSimStatus+0xda>
	{
		lsu8_retryCnt++;
 800c85e:	4b0d      	ldr	r3, [pc, #52]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	3301      	adds	r3, #1
 800c864:	b2da      	uxtb	r2, r3
 800c866:	4b0b      	ldr	r3, [pc, #44]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c868:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c86a:	4b0a      	ldr	r3, [pc, #40]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c86c:	781b      	ldrb	r3, [r3, #0]
 800c86e:	2b02      	cmp	r3, #2
 800c870:	d802      	bhi.n	800c878 <mod_checkSimStatus+0xcc>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c872:	2304      	movs	r3, #4
 800c874:	73fb      	strb	r3, [r7, #15]
 800c876:	e006      	b.n	800c886 <mod_checkSimStatus+0xda>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c878:	4b06      	ldr	r3, [pc, #24]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d902      	bls.n	800c886 <mod_checkSimStatus+0xda>
		{
			lsu8_retryCnt = 0;
 800c880:	4b04      	ldr	r3, [pc, #16]	; (800c894 <mod_checkSimStatus+0xe8>)
 800c882:	2200      	movs	r2, #0
 800c884:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c886:	7bfb      	ldrb	r3, [r7, #15]
}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	08014120 	.word	0x08014120
 800c894:	1fff4778 	.word	0x1fff4778
 800c898:	1fff46c4 	.word	0x1fff46c4
 800c89c:	1ffece42 	.word	0x1ffece42
 800c8a0:	0801410c 	.word	0x0801410c
 800c8a4:	08014154 	.word	0x08014154
 800c8a8:	1ffea4dc 	.word	0x1ffea4dc

0800c8ac <mod_cpinCheck>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_cpinCheck(void)
{
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b082      	sub	sp, #8
 800c8b0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c8b2:	2304      	movs	r3, #4
 800c8b4:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CPIN_CHECK, (uint8_t *) NEW_LINE);
 800c8ba:	2009      	movs	r0, #9
 800c8bc:	491a      	ldr	r1, [pc, #104]	; (800c928 <mod_cpinCheck+0x7c>)
 800c8be:	f7ff fb47 	bl	800bf50 <mod_sendCmdGetRsp>
 800c8c2:	4603      	mov	r3, r0
 800c8c4:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c8c6:	79fb      	ldrb	r3, [r7, #7]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d110      	bne.n	800c8ee <mod_cpinCheck+0x42>
	{
		lsu8_retryCnt = 0;
 800c8cc:	4b17      	ldr	r3, [pc, #92]	; (800c92c <mod_cpinCheck+0x80>)
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "READY");
 800c8d2:	4817      	ldr	r0, [pc, #92]	; (800c930 <mod_cpinCheck+0x84>)
 800c8d4:	4917      	ldr	r1, [pc, #92]	; (800c934 <mod_cpinCheck+0x88>)
 800c8d6:	f005 fbb2 	bl	801203e <strstr>
 800c8da:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d002      	beq.n	800c8e8 <mod_cpinCheck+0x3c>
		{
			len_retStatus = E_RET_SUCCESS;
 800c8e2:	2300      	movs	r3, #0
 800c8e4:	71fb      	strb	r3, [r7, #7]
 800c8e6:	e019      	b.n	800c91c <mod_cpinCheck+0x70>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c8e8:	2302      	movs	r3, #2
 800c8ea:	71fb      	strb	r3, [r7, #7]
 800c8ec:	e016      	b.n	800c91c <mod_cpinCheck+0x70>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c8ee:	79fb      	ldrb	r3, [r7, #7]
 800c8f0:	2b04      	cmp	r3, #4
 800c8f2:	d013      	beq.n	800c91c <mod_cpinCheck+0x70>
	{
		lsu8_retryCnt++;
 800c8f4:	4b0d      	ldr	r3, [pc, #52]	; (800c92c <mod_cpinCheck+0x80>)
 800c8f6:	781b      	ldrb	r3, [r3, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	b2da      	uxtb	r2, r3
 800c8fc:	4b0b      	ldr	r3, [pc, #44]	; (800c92c <mod_cpinCheck+0x80>)
 800c8fe:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c900:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <mod_cpinCheck+0x80>)
 800c902:	781b      	ldrb	r3, [r3, #0]
 800c904:	2b02      	cmp	r3, #2
 800c906:	d802      	bhi.n	800c90e <mod_cpinCheck+0x62>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c908:	2304      	movs	r3, #4
 800c90a:	71fb      	strb	r3, [r7, #7]
 800c90c:	e006      	b.n	800c91c <mod_cpinCheck+0x70>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c90e:	4b07      	ldr	r3, [pc, #28]	; (800c92c <mod_cpinCheck+0x80>)
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	2b03      	cmp	r3, #3
 800c914:	d902      	bls.n	800c91c <mod_cpinCheck+0x70>
		{
			lsu8_retryCnt = 0;
 800c916:	4b05      	ldr	r3, [pc, #20]	; (800c92c <mod_cpinCheck+0x80>)
 800c918:	2200      	movs	r2, #0
 800c91a:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c91c:	79fb      	ldrb	r3, [r7, #7]
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}
 800c926:	bf00      	nop
 800c928:	08014120 	.word	0x08014120
 800c92c:	1fff4779 	.word	0x1fff4779
 800c930:	1fff46c4 	.word	0x1fff46c4
 800c934:	08014158 	.word	0x08014158

0800c938 <mod_extractIMEI>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractIMEI(void)
{
 800c938:	b590      	push	{r4, r7, lr}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c93e:	2304      	movs	r3, #4
 800c940:	75fb      	strb	r3, [r7, #23]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8_index = 0;
 800c942:	2300      	movs	r3, #0
 800c944:	75bb      	strb	r3, [r7, #22]
	uint8_t lu8ar_TempIMEI[IMEI_SIZE] = { 0 };
 800c946:	1d3b      	adds	r3, r7, #4
 800c948:	2200      	movs	r2, #0
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	3304      	adds	r3, #4
 800c94e:	2200      	movs	r2, #0
 800c950:	601a      	str	r2, [r3, #0]
 800c952:	3304      	adds	r3, #4
 800c954:	2200      	movs	r2, #0
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	3304      	adds	r3, #4
 800c95a:	2200      	movs	r2, #0
 800c95c:	801a      	strh	r2, [r3, #0]
 800c95e:	3302      	adds	r3, #2
 800c960:	2200      	movs	r2, #0
 800c962:	701a      	strb	r2, [r3, #0]
 800c964:	3301      	adds	r3, #1

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_IMEI, (uint8_t *) NEW_LINE);
 800c966:	200a      	movs	r0, #10
 800c968:	492c      	ldr	r1, [pc, #176]	; (800ca1c <mod_extractIMEI+0xe4>)
 800c96a:	f7ff faf1 	bl	800bf50 <mod_sendCmdGetRsp>
 800c96e:	4603      	mov	r3, r0
 800c970:	75fb      	strb	r3, [r7, #23]
	if (E_RET_SUCCESS == len_retStatus)
 800c972:	7dfb      	ldrb	r3, [r7, #23]
 800c974:	2b00      	cmp	r3, #0
 800c976:	d134      	bne.n	800c9e2 <mod_extractIMEI+0xaa>
	{
		lsu8_retryCnt = 0;
 800c978:	4b29      	ldr	r3, [pc, #164]	; (800ca20 <mod_extractIMEI+0xe8>)
 800c97a:	2200      	movs	r2, #0
 800c97c:	701a      	strb	r2, [r3, #0]
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
 800c97e:	1d3b      	adds	r3, r7, #4
 800c980:	4618      	mov	r0, r3
 800c982:	4928      	ldr	r1, [pc, #160]	; (800ca24 <mod_extractIMEI+0xec>)
 800c984:	220f      	movs	r2, #15
 800c986:	f005 f82d 	bl	80119e4 <memcpy>
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c98a:	2300      	movs	r3, #0
 800c98c:	75bb      	strb	r3, [r7, #22]
 800c98e:	e015      	b.n	800c9bc <mod_extractIMEI+0x84>
		{
			if (!('0' <= lu8ar_TempIMEI[lu8_index] && '9' >= lu8ar_TempIMEI[lu8_index]))
 800c990:	7dbb      	ldrb	r3, [r7, #22]
 800c992:	f107 0218 	add.w	r2, r7, #24
 800c996:	4413      	add	r3, r2
 800c998:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c99c:	2b2f      	cmp	r3, #47	; 0x2f
 800c99e:	d907      	bls.n	800c9b0 <mod_extractIMEI+0x78>
 800c9a0:	7dbb      	ldrb	r3, [r7, #22]
 800c9a2:	f107 0218 	add.w	r2, r7, #24
 800c9a6:	4413      	add	r3, r2
 800c9a8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c9ac:	2b39      	cmp	r3, #57	; 0x39
 800c9ae:	d902      	bls.n	800c9b6 <mod_extractIMEI+0x7e>
			{
				len_retStatus = E_RET_FAILED;
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	75fb      	strb	r3, [r7, #23]
				break;
 800c9b4:	e005      	b.n	800c9c2 <mod_extractIMEI+0x8a>
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c9b6:	7dbb      	ldrb	r3, [r7, #22]
 800c9b8:	3301      	adds	r3, #1
 800c9ba:	75bb      	strb	r3, [r7, #22]
 800c9bc:	7dbb      	ldrb	r3, [r7, #22]
 800c9be:	2b0e      	cmp	r3, #14
 800c9c0:	d9e6      	bls.n	800c990 <mod_extractIMEI+0x58>
			{
				len_retStatus = E_RET_FAILED;
				break;
			}
		}
		if (lu8_index >= IMEI_SIZE)
 800c9c2:	7dbb      	ldrb	r3, [r7, #22]
 800c9c4:	2b0e      	cmp	r3, #14
 800c9c6:	d923      	bls.n	800ca10 <mod_extractIMEI+0xd8>
		{
			memcpy((char *) &gu8arr_IMEINum, (const char *) &gu8arr_respBuffer[2],
 800c9c8:	4b17      	ldr	r3, [pc, #92]	; (800ca28 <mod_extractIMEI+0xf0>)
 800c9ca:	4a18      	ldr	r2, [pc, #96]	; (800ca2c <mod_extractIMEI+0xf4>)
 800c9cc:	1c94      	adds	r4, r2, #2
 800c9ce:	6820      	ldr	r0, [r4, #0]
 800c9d0:	6861      	ldr	r1, [r4, #4]
 800c9d2:	68a2      	ldr	r2, [r4, #8]
 800c9d4:	c307      	stmia	r3!, {r0, r1, r2}
 800c9d6:	89a2      	ldrh	r2, [r4, #12]
 800c9d8:	7ba1      	ldrb	r1, [r4, #14]
 800c9da:	801a      	strh	r2, [r3, #0]
 800c9dc:	460a      	mov	r2, r1
 800c9de:	709a      	strb	r2, [r3, #2]
 800c9e0:	e016      	b.n	800ca10 <mod_extractIMEI+0xd8>
			IMEI_SIZE);	//\r\n skipped
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c9e2:	7dfb      	ldrb	r3, [r7, #23]
 800c9e4:	2b04      	cmp	r3, #4
 800c9e6:	d013      	beq.n	800ca10 <mod_extractIMEI+0xd8>
	{
		lsu8_retryCnt++;
 800c9e8:	4b0d      	ldr	r3, [pc, #52]	; (800ca20 <mod_extractIMEI+0xe8>)
 800c9ea:	781b      	ldrb	r3, [r3, #0]
 800c9ec:	3301      	adds	r3, #1
 800c9ee:	b2da      	uxtb	r2, r3
 800c9f0:	4b0b      	ldr	r3, [pc, #44]	; (800ca20 <mod_extractIMEI+0xe8>)
 800c9f2:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c9f4:	4b0a      	ldr	r3, [pc, #40]	; (800ca20 <mod_extractIMEI+0xe8>)
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d802      	bhi.n	800ca02 <mod_extractIMEI+0xca>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c9fc:	2304      	movs	r3, #4
 800c9fe:	75fb      	strb	r3, [r7, #23]
 800ca00:	e006      	b.n	800ca10 <mod_extractIMEI+0xd8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800ca02:	4b07      	ldr	r3, [pc, #28]	; (800ca20 <mod_extractIMEI+0xe8>)
 800ca04:	781b      	ldrb	r3, [r3, #0]
 800ca06:	2b03      	cmp	r3, #3
 800ca08:	d902      	bls.n	800ca10 <mod_extractIMEI+0xd8>
		{
			lsu8_retryCnt = 0;
 800ca0a:	4b05      	ldr	r3, [pc, #20]	; (800ca20 <mod_extractIMEI+0xe8>)
 800ca0c:	2200      	movs	r2, #0
 800ca0e:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800ca10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	371c      	adds	r7, #28
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd90      	pop	{r4, r7, pc}
 800ca1a:	bf00      	nop
 800ca1c:	08014120 	.word	0x08014120
 800ca20:	1fff477a 	.word	0x1fff477a
 800ca24:	1fff46c6 	.word	0x1fff46c6
 800ca28:	1fff4718 	.word	0x1fff4718
 800ca2c:	1fff46c4 	.word	0x1fff46c4

0800ca30 <mod_extractCCID>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractCCID(void)
{
 800ca30:	b5b0      	push	{r4, r5, r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ca36:	2304      	movs	r3, #4
 800ca38:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800ca3e:	2300      	movs	r3, #0
 800ca40:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
 800ca42:	200b      	movs	r0, #11
 800ca44:	4927      	ldr	r1, [pc, #156]	; (800cae4 <mod_extractCCID+0xb4>)
 800ca46:	f7ff fa83 	bl	800bf50 <mod_sendCmdGetRsp>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800ca4e:	7bfb      	ldrb	r3, [r7, #15]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d12a      	bne.n	800caaa <mod_extractCCID+0x7a>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800ca54:	4824      	ldr	r0, [pc, #144]	; (800cae8 <mod_extractCCID+0xb8>)
 800ca56:	4925      	ldr	r1, [pc, #148]	; (800caec <mod_extractCCID+0xbc>)
 800ca58:	f005 faf1 	bl	801203e <strstr>
 800ca5c:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d020      	beq.n	800caa4 <mod_extractCCID+0x74>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_CCID].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800ca62:	1d3b      	adds	r3, r7, #4
 800ca64:	4820      	ldr	r0, [pc, #128]	; (800cae8 <mod_extractCCID+0xb8>)
 800ca66:	4922      	ldr	r1, [pc, #136]	; (800caf0 <mod_extractCCID+0xc0>)
 800ca68:	461a      	mov	r2, r3
 800ca6a:	f005 fb5e 	bl	801212a <strtok_r>
 800ca6e:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	3301      	adds	r3, #1
 800ca74:	607b      	str	r3, [r7, #4]

			if (NULL != lu8p_saveptr)
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d010      	beq.n	800ca9e <mod_extractCCID+0x6e>
			{
				memset(gu8arr_CCIDNum, 0, sizeof(gu8arr_CCIDNum));
 800ca7c:	481d      	ldr	r0, [pc, #116]	; (800caf4 <mod_extractCCID+0xc4>)
 800ca7e:	2100      	movs	r1, #0
 800ca80:	2214      	movs	r2, #20
 800ca82:	f004 ffba 	bl	80119fa <memset>
				memcpy((char *) &gu8arr_CCIDNum, (const char *) lu8p_saveptr, CCID_SIZE);
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	4a1a      	ldr	r2, [pc, #104]	; (800caf4 <mod_extractCCID+0xc4>)
 800ca8a:	4614      	mov	r4, r2
 800ca8c:	461d      	mov	r5, r3
 800ca8e:	6828      	ldr	r0, [r5, #0]
 800ca90:	6869      	ldr	r1, [r5, #4]
 800ca92:	68aa      	ldr	r2, [r5, #8]
 800ca94:	68eb      	ldr	r3, [r5, #12]
 800ca96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ca98:	6928      	ldr	r0, [r5, #16]
 800ca9a:	6020      	str	r0, [r4, #0]
 800ca9c:	e01c      	b.n	800cad8 <mod_extractCCID+0xa8>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800ca9e:	2302      	movs	r3, #2
 800caa0:	73fb      	strb	r3, [r7, #15]
 800caa2:	e019      	b.n	800cad8 <mod_extractCCID+0xa8>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800caa4:	2302      	movs	r3, #2
 800caa6:	73fb      	strb	r3, [r7, #15]
 800caa8:	e016      	b.n	800cad8 <mod_extractCCID+0xa8>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800caaa:	7bfb      	ldrb	r3, [r7, #15]
 800caac:	2b04      	cmp	r3, #4
 800caae:	d013      	beq.n	800cad8 <mod_extractCCID+0xa8>
	{
		lsu8_retryCnt++;
 800cab0:	4b11      	ldr	r3, [pc, #68]	; (800caf8 <mod_extractCCID+0xc8>)
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	3301      	adds	r3, #1
 800cab6:	b2da      	uxtb	r2, r3
 800cab8:	4b0f      	ldr	r3, [pc, #60]	; (800caf8 <mod_extractCCID+0xc8>)
 800caba:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cabc:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <mod_extractCCID+0xc8>)
 800cabe:	781b      	ldrb	r3, [r3, #0]
 800cac0:	2b02      	cmp	r3, #2
 800cac2:	d802      	bhi.n	800caca <mod_extractCCID+0x9a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cac4:	2304      	movs	r3, #4
 800cac6:	73fb      	strb	r3, [r7, #15]
 800cac8:	e006      	b.n	800cad8 <mod_extractCCID+0xa8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800caca:	4b0b      	ldr	r3, [pc, #44]	; (800caf8 <mod_extractCCID+0xc8>)
 800cacc:	781b      	ldrb	r3, [r3, #0]
 800cace:	2b03      	cmp	r3, #3
 800cad0:	d902      	bls.n	800cad8 <mod_extractCCID+0xa8>
		{
			lsu8_retryCnt = 0;
 800cad2:	4b09      	ldr	r3, [pc, #36]	; (800caf8 <mod_extractCCID+0xc8>)
 800cad4:	2200      	movs	r2, #0
 800cad6:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800cad8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bdb0      	pop	{r4, r5, r7, pc}
 800cae2:	bf00      	nop
 800cae4:	08014120 	.word	0x08014120
 800cae8:	1fff46c4 	.word	0x1fff46c4
 800caec:	1ffedc2e 	.word	0x1ffedc2e
 800caf0:	0801410c 	.word	0x0801410c
 800caf4:	1fff4728 	.word	0x1fff4728
 800caf8:	1fff477b 	.word	0x1fff477b

0800cafc <mod_extractNUM>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractNUM(void)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b084      	sub	sp, #16
 800cb00:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cb02:	2304      	movs	r3, #4
 800cb04:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
 800cb0e:	200c      	movs	r0, #12
 800cb10:	491c      	ldr	r1, [pc, #112]	; (800cb84 <mod_extractNUM+0x88>)
 800cb12:	f7ff fa1d 	bl	800bf50 <mod_sendCmdGetRsp>
 800cb16:	4603      	mov	r3, r0
 800cb18:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d114      	bne.n	800cb4a <mod_extractNUM+0x4e>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800cb20:	4819      	ldr	r0, [pc, #100]	; (800cb88 <mod_extractNUM+0x8c>)
 800cb22:	491a      	ldr	r1, [pc, #104]	; (800cb8c <mod_extractNUM+0x90>)
 800cb24:	f005 fa8b 	bl	801203e <strstr>
 800cb28:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d00a      	beq.n	800cb44 <mod_extractNUM+0x48>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_NUM].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800cb2e:	1d3b      	adds	r3, r7, #4
 800cb30:	4815      	ldr	r0, [pc, #84]	; (800cb88 <mod_extractNUM+0x8c>)
 800cb32:	4917      	ldr	r1, [pc, #92]	; (800cb90 <mod_extractNUM+0x94>)
 800cb34:	461a      	mov	r2, r3
 800cb36:	f005 faf8 	bl	801212a <strtok_r>
 800cb3a:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);

			lu8p_saveptr++;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	607b      	str	r3, [r7, #4]
 800cb42:	e019      	b.n	800cb78 <mod_extractNUM+0x7c>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cb44:	2302      	movs	r3, #2
 800cb46:	73fb      	strb	r3, [r7, #15]
 800cb48:	e016      	b.n	800cb78 <mod_extractNUM+0x7c>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	2b04      	cmp	r3, #4
 800cb4e:	d013      	beq.n	800cb78 <mod_extractNUM+0x7c>
	{
		lsu8_retryCnt++;
 800cb50:	4b10      	ldr	r3, [pc, #64]	; (800cb94 <mod_extractNUM+0x98>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	3301      	adds	r3, #1
 800cb56:	b2da      	uxtb	r2, r3
 800cb58:	4b0e      	ldr	r3, [pc, #56]	; (800cb94 <mod_extractNUM+0x98>)
 800cb5a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cb5c:	4b0d      	ldr	r3, [pc, #52]	; (800cb94 <mod_extractNUM+0x98>)
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	2b02      	cmp	r3, #2
 800cb62:	d802      	bhi.n	800cb6a <mod_extractNUM+0x6e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cb64:	2304      	movs	r3, #4
 800cb66:	73fb      	strb	r3, [r7, #15]
 800cb68:	e006      	b.n	800cb78 <mod_extractNUM+0x7c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cb6a:	4b0a      	ldr	r3, [pc, #40]	; (800cb94 <mod_extractNUM+0x98>)
 800cb6c:	781b      	ldrb	r3, [r3, #0]
 800cb6e:	2b03      	cmp	r3, #3
 800cb70:	d902      	bls.n	800cb78 <mod_extractNUM+0x7c>
		{
			lsu8_retryCnt = 0;
 800cb72:	4b08      	ldr	r3, [pc, #32]	; (800cb94 <mod_extractNUM+0x98>)
 800cb74:	2200      	movs	r2, #0
 800cb76:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3710      	adds	r7, #16
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}
 800cb82:	bf00      	nop
 800cb84:	08014120 	.word	0x08014120
 800cb88:	1fff46c4 	.word	0x1fff46c4
 800cb8c:	1ffee0d2 	.word	0x1ffee0d2
 800cb90:	0801410c 	.word	0x0801410c
 800cb94:	1fff477c 	.word	0x1fff477c

0800cb98 <mod_extractOperator>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractOperator(void)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b084      	sub	sp, #16
 800cb9c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cb9e:	2304      	movs	r3, #4
 800cba0:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cba2:	2300      	movs	r3, #0
 800cba4:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_savePtr = NULL;
 800cba6:	2300      	movs	r3, #0
 800cba8:	603b      	str	r3, [r7, #0]
	uint8_t *lu8p_dataPtr = NULL;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
 800cbae:	200d      	movs	r0, #13
 800cbb0:	4937      	ldr	r1, [pc, #220]	; (800cc90 <mod_extractOperator+0xf8>)
 800cbb2:	f7ff f9cd 	bl	800bf50 <mod_sendCmdGetRsp>
 800cbb6:	4603      	mov	r3, r0
 800cbb8:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d14b      	bne.n	800cc58 <mod_extractOperator+0xc0>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800cbc0:	4834      	ldr	r0, [pc, #208]	; (800cc94 <mod_extractOperator+0xfc>)
 800cbc2:	4935      	ldr	r1, [pc, #212]	; (800cc98 <mod_extractOperator+0x100>)
 800cbc4:	f005 fa3b 	bl	801203e <strstr>
 800cbc8:	4603      	mov	r3, r0
	uint8_t *lu8p_dataPtr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d041      	beq.n	800cc52 <mod_extractOperator+0xba>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_OPERATOR].mu8arr_otherRspString)))
		{
			lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800cbce:	463b      	mov	r3, r7
 800cbd0:	4830      	ldr	r0, [pc, #192]	; (800cc94 <mod_extractOperator+0xfc>)
 800cbd2:	4932      	ldr	r1, [pc, #200]	; (800cc9c <mod_extractOperator+0x104>)
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	f005 faa8 	bl	801212a <strtok_r>
 800cbda:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_savePtr);

			if (NULL != lu8p_Ptr)
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d034      	beq.n	800cc4c <mod_extractOperator+0xb4>
			{
				lu8p_dataPtr = lu8p_savePtr;
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	607b      	str	r3, [r7, #4]
				lu8p_dataPtr = (uint8_t *) strchr((const char*) lu8p_dataPtr, ',');
 800cbe6:	6878      	ldr	r0, [r7, #4]
 800cbe8:	212c      	movs	r1, #44	; 0x2c
 800cbea:	f005 f9f8 	bl	8011fde <strchr>
 800cbee:	6078      	str	r0, [r7, #4]

				if (NULL != lu8p_dataPtr)
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d027      	beq.n	800cc46 <mod_extractOperator+0xae>
				{
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800cbf6:	463b      	mov	r3, r7
 800cbf8:	2000      	movs	r0, #0
 800cbfa:	4929      	ldr	r1, [pc, #164]	; (800cca0 <mod_extractOperator+0x108>)
 800cbfc:	461a      	mov	r2, r3
 800cbfe:	f005 fa94 	bl	801212a <strtok_r>
 800cc02:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800cc04:	463b      	mov	r3, r7
 800cc06:	2000      	movs	r0, #0
 800cc08:	4925      	ldr	r1, [pc, #148]	; (800cca0 <mod_extractOperator+0x108>)
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	f005 fa8d 	bl	801212a <strtok_r>
 800cc10:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_savePtr++;
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	3301      	adds	r3, #1
 800cc16:	603b      	str	r3, [r7, #0]
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) "\"",
 800cc18:	463b      	mov	r3, r7
 800cc1a:	2000      	movs	r0, #0
 800cc1c:	4921      	ldr	r1, [pc, #132]	; (800cca4 <mod_extractOperator+0x10c>)
 800cc1e:	461a      	mov	r2, r3
 800cc20:	f005 fa83 	bl	801212a <strtok_r>
 800cc24:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					if (lu8p_Ptr != NULL)
 800cc26:	68bb      	ldr	r3, [r7, #8]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <mod_extractOperator+0xa8>
					{
						memset(gu8_operatorName, 0, sizeof(gu8_operatorName));
 800cc2c:	481e      	ldr	r0, [pc, #120]	; (800cca8 <mod_extractOperator+0x110>)
 800cc2e:	2100      	movs	r1, #0
 800cc30:	2214      	movs	r2, #20
 800cc32:	f004 fee2 	bl	80119fa <memset>
						strcpy((char *) &gu8_operatorName, (const char *) lu8p_Ptr);
 800cc36:	481c      	ldr	r0, [pc, #112]	; (800cca8 <mod_extractOperator+0x110>)
 800cc38:	68b9      	ldr	r1, [r7, #8]
 800cc3a:	f005 f9de 	bl	8011ffa <strcpy>
 800cc3e:	e022      	b.n	800cc86 <mod_extractOperator+0xee>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800cc40:	2302      	movs	r3, #2
 800cc42:	73fb      	strb	r3, [r7, #15]
 800cc44:	e01f      	b.n	800cc86 <mod_extractOperator+0xee>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800cc46:	2302      	movs	r3, #2
 800cc48:	73fb      	strb	r3, [r7, #15]
 800cc4a:	e01c      	b.n	800cc86 <mod_extractOperator+0xee>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800cc4c:	2302      	movs	r3, #2
 800cc4e:	73fb      	strb	r3, [r7, #15]
 800cc50:	e019      	b.n	800cc86 <mod_extractOperator+0xee>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cc52:	2302      	movs	r3, #2
 800cc54:	73fb      	strb	r3, [r7, #15]
 800cc56:	e016      	b.n	800cc86 <mod_extractOperator+0xee>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cc58:	7bfb      	ldrb	r3, [r7, #15]
 800cc5a:	2b04      	cmp	r3, #4
 800cc5c:	d013      	beq.n	800cc86 <mod_extractOperator+0xee>
	{
		lsu8_retryCnt++;
 800cc5e:	4b13      	ldr	r3, [pc, #76]	; (800ccac <mod_extractOperator+0x114>)
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	3301      	adds	r3, #1
 800cc64:	b2da      	uxtb	r2, r3
 800cc66:	4b11      	ldr	r3, [pc, #68]	; (800ccac <mod_extractOperator+0x114>)
 800cc68:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cc6a:	4b10      	ldr	r3, [pc, #64]	; (800ccac <mod_extractOperator+0x114>)
 800cc6c:	781b      	ldrb	r3, [r3, #0]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d802      	bhi.n	800cc78 <mod_extractOperator+0xe0>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cc72:	2304      	movs	r3, #4
 800cc74:	73fb      	strb	r3, [r7, #15]
 800cc76:	e006      	b.n	800cc86 <mod_extractOperator+0xee>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cc78:	4b0c      	ldr	r3, [pc, #48]	; (800ccac <mod_extractOperator+0x114>)
 800cc7a:	781b      	ldrb	r3, [r3, #0]
 800cc7c:	2b03      	cmp	r3, #3
 800cc7e:	d902      	bls.n	800cc86 <mod_extractOperator+0xee>
		{
			lsu8_retryCnt = 0;
 800cc80:	4b0a      	ldr	r3, [pc, #40]	; (800ccac <mod_extractOperator+0x114>)
 800cc82:	2200      	movs	r2, #0
 800cc84:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cc86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc88:	4618      	mov	r0, r3
 800cc8a:	3710      	adds	r7, #16
 800cc8c:	46bd      	mov	sp, r7
 800cc8e:	bd80      	pop	{r7, pc}
 800cc90:	08014120 	.word	0x08014120
 800cc94:	1fff46c4 	.word	0x1fff46c4
 800cc98:	1ffee576 	.word	0x1ffee576
 800cc9c:	0801410c 	.word	0x0801410c
 800cca0:	08014154 	.word	0x08014154
 800cca4:	08014160 	.word	0x08014160
 800cca8:	1fff473c 	.word	0x1fff473c
 800ccac:	1fff477d 	.word	0x1fff477d

0800ccb0 <mod_simStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t mod_simStatus(void)
{
 800ccb0:	b580      	push	{r7, lr}
 800ccb2:	b082      	sub	sp, #8
 800ccb4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ccb6:	2304      	movs	r3, #4
 800ccb8:	71fb      	strb	r3, [r7, #7]

	switch (sen_simStatusState)
 800ccba:	4b4f      	ldr	r3, [pc, #316]	; (800cdf8 <mod_simStatus+0x148>)
 800ccbc:	781b      	ldrb	r3, [r3, #0]
 800ccbe:	2b07      	cmp	r3, #7
 800ccc0:	f200 8090 	bhi.w	800cde4 <mod_simStatus+0x134>
 800ccc4:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <mod_simStatus+0x1c>)
 800ccc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccca:	bf00      	nop
 800cccc:	0800cced 	.word	0x0800cced
 800ccd0:	0800cd09 	.word	0x0800cd09
 800ccd4:	0800cd25 	.word	0x0800cd25
 800ccd8:	0800cd41 	.word	0x0800cd41
 800ccdc:	0800cd5d 	.word	0x0800cd5d
 800cce0:	0800cd7f 	.word	0x0800cd7f
 800cce4:	0800cda1 	.word	0x0800cda1
 800cce8:	0800cdc3 	.word	0x0800cdc3
	{
		case E_SIM_ENABLE_SIM_DETECTION_STATE:
			len_retStatus = mod_enableSimDetection();
 800ccec:	f7ff fce6 	bl	800c6bc <mod_enableSimDetection>
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800ccf4:	79fb      	ldrb	r3, [r7, #7]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d105      	bne.n	800cd06 <mod_simStatus+0x56>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ccfa:	2304      	movs	r3, #4
 800ccfc:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_STATUS_STATE;
 800ccfe:	4b3e      	ldr	r3, [pc, #248]	; (800cdf8 <mod_simStatus+0x148>)
 800cd00:	2201      	movs	r2, #1
 800cd02:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd04:	e072      	b.n	800cdec <mod_simStatus+0x13c>
 800cd06:	e071      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_ENABLE_SIM_STATUS_STATE:
			len_retStatus = mod_enableSimStatusReport();
 800cd08:	f7ff fd16 	bl	800c738 <mod_enableSimStatusReport>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cd10:	79fb      	ldrb	r3, [r7, #7]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d105      	bne.n	800cd22 <mod_simStatus+0x72>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cd16:	2304      	movs	r3, #4
 800cd18:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CHECK_SIM_STATUS_STATE;
 800cd1a:	4b37      	ldr	r3, [pc, #220]	; (800cdf8 <mod_simStatus+0x148>)
 800cd1c:	2202      	movs	r2, #2
 800cd1e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd20:	e064      	b.n	800cdec <mod_simStatus+0x13c>
 800cd22:	e063      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_CHECK_SIM_STATUS_STATE:
			len_retStatus = mod_checkSimStatus();
 800cd24:	f7ff fd42 	bl	800c7ac <mod_checkSimStatus>
 800cd28:	4603      	mov	r3, r0
 800cd2a:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cd2c:	79fb      	ldrb	r3, [r7, #7]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d105      	bne.n	800cd3e <mod_simStatus+0x8e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cd32:	2304      	movs	r3, #4
 800cd34:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CPIN_CHECK_STATE;
 800cd36:	4b30      	ldr	r3, [pc, #192]	; (800cdf8 <mod_simStatus+0x148>)
 800cd38:	2203      	movs	r2, #3
 800cd3a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd3c:	e056      	b.n	800cdec <mod_simStatus+0x13c>
 800cd3e:	e055      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_CPIN_CHECK_STATE:
			len_retStatus = mod_cpinCheck();
 800cd40:	f7ff fdb4 	bl	800c8ac <mod_cpinCheck>
 800cd44:	4603      	mov	r3, r0
 800cd46:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cd48:	79fb      	ldrb	r3, [r7, #7]
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d105      	bne.n	800cd5a <mod_simStatus+0xaa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cd4e:	2304      	movs	r3, #4
 800cd50:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_IMEI_STATE;
 800cd52:	4b29      	ldr	r3, [pc, #164]	; (800cdf8 <mod_simStatus+0x148>)
 800cd54:	2204      	movs	r2, #4
 800cd56:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd58:	e048      	b.n	800cdec <mod_simStatus+0x13c>
 800cd5a:	e047      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_IMEI_STATE:
			len_retStatus = mod_extractIMEI();
 800cd5c:	f7ff fdec 	bl	800c938 <mod_extractIMEI>
 800cd60:	4603      	mov	r3, r0
 800cd62:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cd64:	79fb      	ldrb	r3, [r7, #7]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d002      	beq.n	800cd70 <mod_simStatus+0xc0>
 800cd6a:	79fb      	ldrb	r3, [r7, #7]
 800cd6c:	2b04      	cmp	r3, #4
 800cd6e:	d005      	beq.n	800cd7c <mod_simStatus+0xcc>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cd70:	2304      	movs	r3, #4
 800cd72:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_CCID_STATE;
 800cd74:	4b20      	ldr	r3, [pc, #128]	; (800cdf8 <mod_simStatus+0x148>)
 800cd76:	2205      	movs	r2, #5
 800cd78:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd7a:	e037      	b.n	800cdec <mod_simStatus+0x13c>
 800cd7c:	e036      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_CCID_STATE:
			len_retStatus = mod_extractCCID();
 800cd7e:	f7ff fe57 	bl	800ca30 <mod_extractCCID>
 800cd82:	4603      	mov	r3, r0
 800cd84:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cd86:	79fb      	ldrb	r3, [r7, #7]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d002      	beq.n	800cd92 <mod_simStatus+0xe2>
 800cd8c:	79fb      	ldrb	r3, [r7, #7]
 800cd8e:	2b04      	cmp	r3, #4
 800cd90:	d005      	beq.n	800cd9e <mod_simStatus+0xee>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cd92:	2304      	movs	r3, #4
 800cd94:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_NUM_STATE;
 800cd96:	4b18      	ldr	r3, [pc, #96]	; (800cdf8 <mod_simStatus+0x148>)
 800cd98:	2206      	movs	r2, #6
 800cd9a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cd9c:	e026      	b.n	800cdec <mod_simStatus+0x13c>
 800cd9e:	e025      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_NUM_STATE:
			len_retStatus = mod_extractNUM();
 800cda0:	f7ff feac 	bl	800cafc <mod_extractNUM>
 800cda4:	4603      	mov	r3, r0
 800cda6:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cda8:	79fb      	ldrb	r3, [r7, #7]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <mod_simStatus+0x104>
 800cdae:	79fb      	ldrb	r3, [r7, #7]
 800cdb0:	2b04      	cmp	r3, #4
 800cdb2:	d005      	beq.n	800cdc0 <mod_simStatus+0x110>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_OPERATOR_STATE;
 800cdb8:	4b0f      	ldr	r3, [pc, #60]	; (800cdf8 <mod_simStatus+0x148>)
 800cdba:	2207      	movs	r2, #7
 800cdbc:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cdbe:	e015      	b.n	800cdec <mod_simStatus+0x13c>
 800cdc0:	e014      	b.n	800cdec <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_OPERATOR_STATE:
			len_retStatus = mod_extractOperator();
 800cdc2:	f7ff fee9 	bl	800cb98 <mod_extractOperator>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d002      	beq.n	800cdd6 <mod_simStatus+0x126>
 800cdd0:	79fb      	ldrb	r3, [r7, #7]
 800cdd2:	2b04      	cmp	r3, #4
 800cdd4:	d005      	beq.n	800cde2 <mod_simStatus+0x132>
			{
				len_retStatus = E_RET_SUCCESS;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800cdda:	4b07      	ldr	r3, [pc, #28]	; (800cdf8 <mod_simStatus+0x148>)
 800cddc:	2200      	movs	r2, #0
 800cdde:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cde0:	e004      	b.n	800cdec <mod_simStatus+0x13c>
 800cde2:	e003      	b.n	800cdec <mod_simStatus+0x13c>

		default:
			sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800cde4:	4b04      	ldr	r3, [pc, #16]	; (800cdf8 <mod_simStatus+0x148>)
 800cde6:	2200      	movs	r2, #0
 800cde8:	701a      	strb	r2, [r3, #0]
		break;
 800cdea:	bf00      	nop
	}
	return len_retStatus;
 800cdec:	79fb      	ldrb	r3, [r7, #7]
}
 800cdee:	4618      	mov	r0, r3
 800cdf0:	3708      	adds	r7, #8
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	1fff476a 	.word	0x1fff476a

0800cdfc <mod_networkStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_networkStatus(void)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ce02:	2304      	movs	r3, #4
 800ce04:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800ce06:	2300      	movs	r3, #0
 800ce08:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CREG, (uint8_t *) NEW_LINE);
 800ce0a:	200e      	movs	r0, #14
 800ce0c:	4941      	ldr	r1, [pc, #260]	; (800cf14 <mod_networkStatus+0x118>)
 800ce0e:	f7ff f89f 	bl	800bf50 <mod_sendCmdGetRsp>
 800ce12:	4603      	mov	r3, r0
 800ce14:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800ce16:	79fb      	ldrb	r3, [r7, #7]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d15e      	bne.n	800ceda <mod_networkStatus+0xde>
	{
		lsu8_retryCnt = 0;
 800ce1c:	4b3e      	ldr	r3, [pc, #248]	; (800cf18 <mod_networkStatus+0x11c>)
 800ce1e:	2200      	movs	r2, #0
 800ce20:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_INPROGRESS;
 800ce22:	2304      	movs	r3, #4
 800ce24:	71fb      	strb	r3, [r7, #7]

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,0");
 800ce26:	483d      	ldr	r0, [pc, #244]	; (800cf1c <mod_networkStatus+0x120>)
 800ce28:	493d      	ldr	r1, [pc, #244]	; (800cf20 <mod_networkStatus+0x124>)
 800ce2a:	f005 f908 	bl	801203e <strstr>
 800ce2e:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d006      	beq.n	800ce44 <mod_networkStatus+0x48>
		{
			//Not registered
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_NONE;
 800ce36:	4b3b      	ldr	r3, [pc, #236]	; (800cf24 <mod_networkStatus+0x128>)
 800ce38:	2201      	movs	r2, #1
 800ce3a:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800ce3c:	2302      	movs	r3, #2
 800ce3e:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ce40:	79fb      	ldrb	r3, [r7, #7]
 800ce42:	e062      	b.n	800cf0a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,1");
 800ce44:	4835      	ldr	r0, [pc, #212]	; (800cf1c <mod_networkStatus+0x120>)
 800ce46:	4938      	ldr	r1, [pc, #224]	; (800cf28 <mod_networkStatus+0x12c>)
 800ce48:	f005 f8f9 	bl	801203e <strstr>
 800ce4c:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800ce4e:	683b      	ldr	r3, [r7, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d006      	beq.n	800ce62 <mod_networkStatus+0x66>
		{
			//home network
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_HOME;
 800ce54:	4b33      	ldr	r3, [pc, #204]	; (800cf24 <mod_networkStatus+0x128>)
 800ce56:	2202      	movs	r2, #2
 800ce58:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ce5e:	79fb      	ldrb	r3, [r7, #7]
 800ce60:	e053      	b.n	800cf0a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,2");
 800ce62:	482e      	ldr	r0, [pc, #184]	; (800cf1c <mod_networkStatus+0x120>)
 800ce64:	4931      	ldr	r1, [pc, #196]	; (800cf2c <mod_networkStatus+0x130>)
 800ce66:	f005 f8ea 	bl	801203e <strstr>
 800ce6a:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d006      	beq.n	800ce80 <mod_networkStatus+0x84>
		{
			//Not Registered
			gst_deviceStatus.men_networkRegStatus = E_NOT_REGISTERED;
 800ce72:	4b2c      	ldr	r3, [pc, #176]	; (800cf24 <mod_networkStatus+0x128>)
 800ce74:	2203      	movs	r2, #3
 800ce76:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800ce78:	2302      	movs	r3, #2
 800ce7a:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ce7c:	79fb      	ldrb	r3, [r7, #7]
 800ce7e:	e044      	b.n	800cf0a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,3");
 800ce80:	4826      	ldr	r0, [pc, #152]	; (800cf1c <mod_networkStatus+0x120>)
 800ce82:	492b      	ldr	r1, [pc, #172]	; (800cf30 <mod_networkStatus+0x134>)
 800ce84:	f005 f8db 	bl	801203e <strstr>
 800ce88:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800ce8a:	683b      	ldr	r3, [r7, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d006      	beq.n	800ce9e <mod_networkStatus+0xa2>
		{
			//Registration denied
			gst_deviceStatus.men_networkRegStatus = E_REGISTER_DENIED;
 800ce90:	4b24      	ldr	r3, [pc, #144]	; (800cf24 <mod_networkStatus+0x128>)
 800ce92:	2204      	movs	r2, #4
 800ce94:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800ce96:	2302      	movs	r3, #2
 800ce98:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ce9a:	79fb      	ldrb	r3, [r7, #7]
 800ce9c:	e035      	b.n	800cf0a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,4");
 800ce9e:	481f      	ldr	r0, [pc, #124]	; (800cf1c <mod_networkStatus+0x120>)
 800cea0:	4924      	ldr	r1, [pc, #144]	; (800cf34 <mod_networkStatus+0x138>)
 800cea2:	f005 f8cc 	bl	801203e <strstr>
 800cea6:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cea8:	683b      	ldr	r3, [r7, #0]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d006      	beq.n	800cebc <mod_networkStatus+0xc0>
		{
			//Unknown
			gst_deviceStatus.men_networkRegStatus = E_UNKNOWN;
 800ceae:	4b1d      	ldr	r3, [pc, #116]	; (800cf24 <mod_networkStatus+0x128>)
 800ceb0:	2205      	movs	r2, #5
 800ceb2:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800ceb4:	2302      	movs	r3, #2
 800ceb6:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ceb8:	79fb      	ldrb	r3, [r7, #7]
 800ceba:	e026      	b.n	800cf0a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,5");
 800cebc:	4817      	ldr	r0, [pc, #92]	; (800cf1c <mod_networkStatus+0x120>)
 800cebe:	491e      	ldr	r1, [pc, #120]	; (800cf38 <mod_networkStatus+0x13c>)
 800cec0:	f005 f8bd 	bl	801203e <strstr>
 800cec4:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d01d      	beq.n	800cf08 <mod_networkStatus+0x10c>
		{
			//Registered, roaming
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_ROAMING;
 800cecc:	4b15      	ldr	r3, [pc, #84]	; (800cf24 <mod_networkStatus+0x128>)
 800cece:	2206      	movs	r2, #6
 800ced0:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800ced2:	2300      	movs	r3, #0
 800ced4:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800ced6:	79fb      	ldrb	r3, [r7, #7]
 800ced8:	e017      	b.n	800cf0a <mod_networkStatus+0x10e>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800ceda:	79fb      	ldrb	r3, [r7, #7]
 800cedc:	2b04      	cmp	r3, #4
 800cede:	d013      	beq.n	800cf08 <mod_networkStatus+0x10c>
	{
		lsu8_retryCnt++;
 800cee0:	4b0d      	ldr	r3, [pc, #52]	; (800cf18 <mod_networkStatus+0x11c>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	4b0b      	ldr	r3, [pc, #44]	; (800cf18 <mod_networkStatus+0x11c>)
 800ceea:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800ceec:	4b0a      	ldr	r3, [pc, #40]	; (800cf18 <mod_networkStatus+0x11c>)
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	2b02      	cmp	r3, #2
 800cef2:	d802      	bhi.n	800cefa <mod_networkStatus+0xfe>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cef4:	2304      	movs	r3, #4
 800cef6:	71fb      	strb	r3, [r7, #7]
 800cef8:	e006      	b.n	800cf08 <mod_networkStatus+0x10c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cefa:	4b07      	ldr	r3, [pc, #28]	; (800cf18 <mod_networkStatus+0x11c>)
 800cefc:	781b      	ldrb	r3, [r3, #0]
 800cefe:	2b03      	cmp	r3, #3
 800cf00:	d902      	bls.n	800cf08 <mod_networkStatus+0x10c>
		{
			lsu8_retryCnt = 0;
 800cf02:	4b05      	ldr	r3, [pc, #20]	; (800cf18 <mod_networkStatus+0x11c>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cf08:	79fb      	ldrb	r3, [r7, #7]
}
 800cf0a:	4618      	mov	r0, r3
 800cf0c:	3708      	adds	r7, #8
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	bd80      	pop	{r7, pc}
 800cf12:	bf00      	nop
 800cf14:	08014120 	.word	0x08014120
 800cf18:	1fff477e 	.word	0x1fff477e
 800cf1c:	1fff46c4 	.word	0x1fff46c4
 800cf20:	08014164 	.word	0x08014164
 800cf24:	1ffea4dc 	.word	0x1ffea4dc
 800cf28:	08014168 	.word	0x08014168
 800cf2c:	0801416c 	.word	0x0801416c
 800cf30:	08014170 	.word	0x08014170
 800cf34:	08014174 	.word	0x08014174
 800cf38:	08014178 	.word	0x08014178

0800cf3c <mod_signalQuality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_signalQuality(void)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b082      	sub	sp, #8
 800cf40:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cf42:	2304      	movs	r3, #4
 800cf44:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cf46:	2300      	movs	r3, #0
 800cf48:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SIGNAL_QLTY, (uint8_t *) NEW_LINE);
 800cf4a:	200f      	movs	r0, #15
 800cf4c:	4920      	ldr	r1, [pc, #128]	; (800cfd0 <mod_signalQuality+0x94>)
 800cf4e:	f7fe ffff 	bl	800bf50 <mod_sendCmdGetRsp>
 800cf52:	4603      	mov	r3, r0
 800cf54:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800cf56:	79fb      	ldrb	r3, [r7, #7]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d11d      	bne.n	800cf98 <mod_signalQuality+0x5c>
	{

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800cf5c:	481d      	ldr	r0, [pc, #116]	; (800cfd4 <mod_signalQuality+0x98>)
 800cf5e:	491e      	ldr	r1, [pc, #120]	; (800cfd8 <mod_signalQuality+0x9c>)
 800cf60:	f005 f86d 	bl	801203e <strstr>
 800cf64:	6038      	str	r0, [r7, #0]
				(const char *) gcst_ATCmdTable[E_IDX_SIGNAL_QLTY].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800cf66:	683b      	ldr	r3, [r7, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d012      	beq.n	800cf92 <mod_signalQuality+0x56>
		{
			lu8p_Ptr += 6;
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	3306      	adds	r3, #6
 800cf70:	603b      	str	r3, [r7, #0]
			gu8_signalQuality = atoi((char *) lu8p_Ptr++);
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	1c5a      	adds	r2, r3, #1
 800cf76:	603a      	str	r2, [r7, #0]
 800cf78:	4618      	mov	r0, r3
 800cf7a:	f004 fd03 	bl	8011984 <atoi>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	b2da      	uxtb	r2, r3
 800cf82:	4b16      	ldr	r3, [pc, #88]	; (800cfdc <mod_signalQuality+0xa0>)
 800cf84:	701a      	strb	r2, [r3, #0]
			lsu8_retryCnt = 0;
 800cf86:	4b16      	ldr	r3, [pc, #88]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cf88:	2200      	movs	r2, #0
 800cf8a:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_SUCCESS;
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	71fb      	strb	r3, [r7, #7]
 800cf90:	e019      	b.n	800cfc6 <mod_signalQuality+0x8a>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cf92:	2302      	movs	r3, #2
 800cf94:	71fb      	strb	r3, [r7, #7]
 800cf96:	e016      	b.n	800cfc6 <mod_signalQuality+0x8a>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	2b04      	cmp	r3, #4
 800cf9c:	d013      	beq.n	800cfc6 <mod_signalQuality+0x8a>
	{
		lsu8_retryCnt++;
 800cf9e:	4b10      	ldr	r3, [pc, #64]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cfa0:	781b      	ldrb	r3, [r3, #0]
 800cfa2:	3301      	adds	r3, #1
 800cfa4:	b2da      	uxtb	r2, r3
 800cfa6:	4b0e      	ldr	r3, [pc, #56]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cfa8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cfaa:	4b0d      	ldr	r3, [pc, #52]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cfac:	781b      	ldrb	r3, [r3, #0]
 800cfae:	2b02      	cmp	r3, #2
 800cfb0:	d802      	bhi.n	800cfb8 <mod_signalQuality+0x7c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cfb2:	2304      	movs	r3, #4
 800cfb4:	71fb      	strb	r3, [r7, #7]
 800cfb6:	e006      	b.n	800cfc6 <mod_signalQuality+0x8a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cfb8:	4b09      	ldr	r3, [pc, #36]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	2b03      	cmp	r3, #3
 800cfbe:	d902      	bls.n	800cfc6 <mod_signalQuality+0x8a>
		{
			lsu8_retryCnt = 0;
 800cfc0:	4b07      	ldr	r3, [pc, #28]	; (800cfe0 <mod_signalQuality+0xa4>)
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cfc6:	79fb      	ldrb	r3, [r7, #7]
}
 800cfc8:	4618      	mov	r0, r3
 800cfca:	3708      	adds	r7, #8
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	08014120 	.word	0x08014120
 800cfd4:	1fff46c4 	.word	0x1fff46c4
 800cfd8:	1ffeeebe 	.word	0x1ffeeebe
 800cfdc:	1fff46c0 	.word	0x1fff46c0
 800cfe0:	1fff477f 	.word	0x1fff477f

0800cfe4 <mod_extractDateTime>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractDateTime(void)
{
 800cfe4:	b5b0      	push	{r4, r5, r7, lr}
 800cfe6:	b090      	sub	sp, #64	; 0x40
 800cfe8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cfea:	2304      	movs	r3, #4
 800cfec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *lu8p_savePtr = NULL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t lu8arr_tempBuff[50] = { 0 };
 800cff8:	463b      	mov	r3, r7
 800cffa:	2200      	movs	r2, #0
 800cffc:	601a      	str	r2, [r3, #0]
 800cffe:	3304      	adds	r3, #4
 800d000:	2200      	movs	r2, #0
 800d002:	601a      	str	r2, [r3, #0]
 800d004:	3304      	adds	r3, #4
 800d006:	2200      	movs	r2, #0
 800d008:	601a      	str	r2, [r3, #0]
 800d00a:	3304      	adds	r3, #4
 800d00c:	2200      	movs	r2, #0
 800d00e:	601a      	str	r2, [r3, #0]
 800d010:	3304      	adds	r3, #4
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
 800d016:	3304      	adds	r3, #4
 800d018:	2200      	movs	r2, #0
 800d01a:	601a      	str	r2, [r3, #0]
 800d01c:	3304      	adds	r3, #4
 800d01e:	2200      	movs	r2, #0
 800d020:	601a      	str	r2, [r3, #0]
 800d022:	3304      	adds	r3, #4
 800d024:	2200      	movs	r2, #0
 800d026:	601a      	str	r2, [r3, #0]
 800d028:	3304      	adds	r3, #4
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	3304      	adds	r3, #4
 800d030:	2200      	movs	r2, #0
 800d032:	601a      	str	r2, [r3, #0]
 800d034:	3304      	adds	r3, #4
 800d036:	2200      	movs	r2, #0
 800d038:	601a      	str	r2, [r3, #0]
 800d03a:	3304      	adds	r3, #4
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]
 800d040:	3304      	adds	r3, #4
 800d042:	2200      	movs	r2, #0
 800d044:	801a      	strh	r2, [r3, #0]
 800d046:	3302      	adds	r3, #2

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CCLK, (uint8_t *) NEW_LINE);
 800d048:	2010      	movs	r0, #16
 800d04a:	492e      	ldr	r1, [pc, #184]	; (800d104 <mod_extractDateTime+0x120>)
 800d04c:	f7fe ff80 	bl	800bf50 <mod_sendCmdGetRsp>
 800d050:	4603      	mov	r3, r0
 800d052:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800d056:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d133      	bne.n	800d0c6 <mod_extractDateTime+0xe2>
	{
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d05e:	482a      	ldr	r0, [pc, #168]	; (800d108 <mod_extractDateTime+0x124>)
 800d060:	492a      	ldr	r1, [pc, #168]	; (800d10c <mod_extractDateTime+0x128>)
 800d062:	f004 ffec 	bl	801203e <strstr>
 800d066:	63b8      	str	r0, [r7, #56]	; 0x38
				(const char *) gcst_ATCmdTable[E_IDX_CCLK].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800d068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d044      	beq.n	800d0f8 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800d06e:	4b28      	ldr	r3, [pc, #160]	; (800d110 <mod_extractDateTime+0x12c>)
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]

			memcpy(lu8arr_tempBuff, gu8arr_respBuffer, 50);
 800d074:	4b24      	ldr	r3, [pc, #144]	; (800d108 <mod_extractDateTime+0x124>)
 800d076:	463c      	mov	r4, r7
 800d078:	461d      	mov	r5, r3
 800d07a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d07c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d07e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d080:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d082:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d084:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d086:	682b      	ldr	r3, [r5, #0]
 800d088:	8023      	strh	r3, [r4, #0]
			lu8p_Ptr = (uint8_t *) strtok_r((char *) lu8arr_tempBuff, (const char *) ":",
 800d08a:	463a      	mov	r2, r7
 800d08c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d090:	4610      	mov	r0, r2
 800d092:	4920      	ldr	r1, [pc, #128]	; (800d114 <mod_extractDateTime+0x130>)
 800d094:	461a      	mov	r2, r3
 800d096:	f005 f848 	bl	801212a <strtok_r>
 800d09a:	63b8      	str	r0, [r7, #56]	; 0x38
					(char **) &lu8p_savePtr);
			lu8p_savePtr += 2;
 800d09c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d09e:	3302      	adds	r3, #2
 800d0a0:	637b      	str	r3, [r7, #52]	; 0x34
			if (NULL != lu8p_savePtr)
 800d0a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d00a      	beq.n	800d0be <mod_extractDateTime+0xda>
			{
				memset(gu8_dataTime, 0, sizeof(gu8_dataTime));
 800d0a8:	481b      	ldr	r0, [pc, #108]	; (800d118 <mod_extractDateTime+0x134>)
 800d0aa:	2100      	movs	r1, #0
 800d0ac:	2214      	movs	r2, #20
 800d0ae:	f004 fca4 	bl	80119fa <memset>
				strncpy((char *) gu8_dataTime, (const char *) lu8p_savePtr,
 800d0b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0b4:	4818      	ldr	r0, [pc, #96]	; (800d118 <mod_extractDateTime+0x134>)
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	2214      	movs	r2, #20
 800d0ba:	f004 ffae 	bl	801201a <strncpy>
				TIME_SIZE);
			}
			len_retStatus = E_RET_SUCCESS;
 800d0be:	2300      	movs	r3, #0
 800d0c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d0c4:	e018      	b.n	800d0f8 <mod_extractDateTime+0x114>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d0c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d0ca:	2b04      	cmp	r3, #4
 800d0cc:	d014      	beq.n	800d0f8 <mod_extractDateTime+0x114>
	{
		lsu8_retryCnt++;
 800d0ce:	4b10      	ldr	r3, [pc, #64]	; (800d110 <mod_extractDateTime+0x12c>)
 800d0d0:	781b      	ldrb	r3, [r3, #0]
 800d0d2:	3301      	adds	r3, #1
 800d0d4:	b2da      	uxtb	r2, r3
 800d0d6:	4b0e      	ldr	r3, [pc, #56]	; (800d110 <mod_extractDateTime+0x12c>)
 800d0d8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d0da:	4b0d      	ldr	r3, [pc, #52]	; (800d110 <mod_extractDateTime+0x12c>)
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d803      	bhi.n	800d0ea <mod_extractDateTime+0x106>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d0e2:	2304      	movs	r3, #4
 800d0e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d0e8:	e006      	b.n	800d0f8 <mod_extractDateTime+0x114>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d0ea:	4b09      	ldr	r3, [pc, #36]	; (800d110 <mod_extractDateTime+0x12c>)
 800d0ec:	781b      	ldrb	r3, [r3, #0]
 800d0ee:	2b03      	cmp	r3, #3
 800d0f0:	d902      	bls.n	800d0f8 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800d0f2:	4b07      	ldr	r3, [pc, #28]	; (800d110 <mod_extractDateTime+0x12c>)
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d0f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3740      	adds	r7, #64	; 0x40
 800d100:	46bd      	mov	sp, r7
 800d102:	bdb0      	pop	{r4, r5, r7, pc}
 800d104:	08014120 	.word	0x08014120
 800d108:	1fff46c4 	.word	0x1fff46c4
 800d10c:	1ffef362 	.word	0x1ffef362
 800d110:	1fff4780 	.word	0x1fff4780
 800d114:	0801410c 	.word	0x0801410c
 800d118:	1fff4750 	.word	0x1fff4750

0800d11c <mod_mqttConnect>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttConnect(void)
{
 800d11c:	b590      	push	{r4, r7, lr}
 800d11e:	b08f      	sub	sp, #60	; 0x3c
 800d120:	af02      	add	r7, sp, #8
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d122:	2304      	movs	r3, #4
 800d124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[35] = { 0 };
 800d128:	463b      	mov	r3, r7
 800d12a:	2200      	movs	r2, #0
 800d12c:	601a      	str	r2, [r3, #0]
 800d12e:	3304      	adds	r3, #4
 800d130:	2200      	movs	r2, #0
 800d132:	601a      	str	r2, [r3, #0]
 800d134:	3304      	adds	r3, #4
 800d136:	2200      	movs	r2, #0
 800d138:	601a      	str	r2, [r3, #0]
 800d13a:	3304      	adds	r3, #4
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]
 800d140:	3304      	adds	r3, #4
 800d142:	2200      	movs	r2, #0
 800d144:	601a      	str	r2, [r3, #0]
 800d146:	3304      	adds	r3, #4
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]
 800d14c:	3304      	adds	r3, #4
 800d14e:	2200      	movs	r2, #0
 800d150:	601a      	str	r2, [r3, #0]
 800d152:	3304      	adds	r3, #4
 800d154:	2200      	movs	r2, #0
 800d156:	601a      	str	r2, [r3, #0]
 800d158:	3304      	adds	r3, #4
 800d15a:	2200      	movs	r2, #0
 800d15c:	801a      	strh	r2, [r3, #0]
 800d15e:	3302      	adds	r3, #2
 800d160:	2200      	movs	r2, #0
 800d162:	701a      	strb	r2, [r3, #0]
 800d164:	3301      	adds	r3, #1
	uint8_t *lu8p_Ptr = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	62bb      	str	r3, [r7, #40]	; 0x28
	short ls_result = E_MQTT_CON_NONE;
 800d16a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d16e:	84fb      	strh	r3, [r7, #38]	; 0x26

	sprintf((char *) lu8arr_param, (const char*) "%d,\"%s_%s\"\r\n",
 800d170:	4b87      	ldr	r3, [pc, #540]	; (800d390 <mod_mqttConnect+0x274>)
 800d172:	781b      	ldrb	r3, [r3, #0]
 800d174:	461c      	mov	r4, r3
 800d176:	463a      	mov	r2, r7
 800d178:	4b86      	ldr	r3, [pc, #536]	; (800d394 <mod_mqttConnect+0x278>)
 800d17a:	9300      	str	r3, [sp, #0]
 800d17c:	4610      	mov	r0, r2
 800d17e:	4986      	ldr	r1, [pc, #536]	; (800d398 <mod_mqttConnect+0x27c>)
 800d180:	4622      	mov	r2, r4
 800d182:	4b86      	ldr	r3, [pc, #536]	; (800d39c <mod_mqttConnect+0x280>)
 800d184:	f004 fef8 	bl	8011f78 <siprintf>
			sgu8_mqttClientId, MQTT_CONNECT_CLINT_ID, &gu8arr_IMEINum[5]);	//using last 10 digits of IMEI for unique client ID for every VCU

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CONNECT, (uint8_t *) lu8arr_param);
 800d188:	463b      	mov	r3, r7
 800d18a:	2014      	movs	r0, #20
 800d18c:	4619      	mov	r1, r3
 800d18e:	f7fe fedf 	bl	800bf50 <mod_sendCmdGetRsp>
 800d192:	4603      	mov	r3, r0
 800d194:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (E_RET_SUCCESS == len_retStatus)
 800d198:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d19c:	2b00      	cmp	r3, #0
 800d19e:	f040 8096 	bne.w	800d2ce <mod_mqttConnect+0x1b2>
	{
		lsu8_retryCnt = 0;
 800d1a2:	4b7f      	ldr	r3, [pc, #508]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d1a8:	487e      	ldr	r0, [pc, #504]	; (800d3a4 <mod_mqttConnect+0x288>)
 800d1aa:	497f      	ldr	r1, [pc, #508]	; (800d3a8 <mod_mqttConnect+0x28c>)
 800d1ac:	f004 ff47 	bl	801203e <strstr>
 800d1b0:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CONNECT].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800d1b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	f000 8086 	beq.w	800d2c6 <mod_mqttConnect+0x1aa>
		{
			lu8p_Ptr += 10;
 800d1ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1bc:	330a      	adds	r3, #10
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
			ls_result = atoi((char *) lu8p_Ptr);
 800d1c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1c2:	f004 fbdf 	bl	8011984 <atoi>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d1ca:	4b71      	ldr	r3, [pc, #452]	; (800d390 <mod_mqttConnect+0x274>)
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d172      	bne.n	800d2be <mod_mqttConnect+0x1a2>
			{
				lu8p_Ptr += 2;
 800d1d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1da:	3302      	adds	r3, #2
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800d1de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1e0:	f004 fbd0 	bl	8011984 <atoi>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (0 == ls_result)	//Packet sent successfully and ACK received from server
 800d1e8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d119      	bne.n	800d224 <mod_mqttConnect+0x108>
				{
					lu8p_Ptr += 2;
 800d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1f2:	3302      	adds	r3, #2
 800d1f4:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800d1f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d1f8:	f004 fbc4 	bl	8011984 <atoi>
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (0 == ls_result)	//Connection Accepted
 800d200:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d204:	2b00      	cmp	r3, #0
 800d206:	d106      	bne.n	800d216 <mod_mqttConnect+0xfa>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d208:	4b68      	ldr	r3, [pc, #416]	; (800d3ac <mod_mqttConnect+0x290>)
 800d20a:	2200      	movs	r2, #0
 800d20c:	715a      	strb	r2, [r3, #5]
								E_ACK_RCVD_CONNECT_ACCEPT;

						len_retStatus = E_RET_SUCCESS;
 800d20e:	2300      	movs	r3, #0
 800d210:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d214:	e0b5      	b.n	800d382 <mod_mqttConnect+0x266>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d216:	4b65      	ldr	r3, [pc, #404]	; (800d3ac <mod_mqttConnect+0x290>)
 800d218:	2208      	movs	r2, #8
 800d21a:	715a      	strb	r2, [r3, #5]
						len_retStatus = E_RET_FAILED;
 800d21c:	2302      	movs	r3, #2
 800d21e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d222:	e0ae      	b.n	800d382 <mod_mqttConnect+0x266>
					}
				}
				else if (1 == ls_result)	//Packet retransmission
 800d224:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d228:	2b01      	cmp	r3, #1
 800d22a:	d106      	bne.n	800d23a <mod_mqttConnect+0x11e>
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_PACKET_RETRANSMISSION;
 800d22c:	4b5f      	ldr	r3, [pc, #380]	; (800d3ac <mod_mqttConnect+0x290>)
 800d22e:	2201      	movs	r2, #1
 800d230:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_INPROGRESS;
 800d232:	2304      	movs	r3, #4
 800d234:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d238:	e0a3      	b.n	800d382 <mod_mqttConnect+0x266>
				}
				else if (2 == ls_result)	//Failed to send packet
 800d23a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d23e:	2b02      	cmp	r3, #2
 800d240:	d136      	bne.n	800d2b0 <mod_mqttConnect+0x194>
				{
					lu8p_Ptr += 2;
 800d242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d244:	3302      	adds	r3, #2
 800d246:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800d248:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d24a:	f004 fb9b 	bl	8011984 <atoi>
 800d24e:	4603      	mov	r3, r0
 800d250:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)	//Connection Refused: Unacceptable Protocol Version
 800d252:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d256:	2b01      	cmp	r3, #1
 800d258:	d103      	bne.n	800d262 <mod_mqttConnect+0x146>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d25a:	4b54      	ldr	r3, [pc, #336]	; (800d3ac <mod_mqttConnect+0x290>)
 800d25c:	2203      	movs	r2, #3
 800d25e:	715a      	strb	r2, [r3, #5]
 800d260:	e022      	b.n	800d2a8 <mod_mqttConnect+0x18c>
								E_CON_REF_UNACC_PRO_VER;
					}
					else if (2 == ls_result)	//Connection Refused: Identifier Rejected
 800d262:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d266:	2b02      	cmp	r3, #2
 800d268:	d103      	bne.n	800d272 <mod_mqttConnect+0x156>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_ID_REJECT;
 800d26a:	4b50      	ldr	r3, [pc, #320]	; (800d3ac <mod_mqttConnect+0x290>)
 800d26c:	2204      	movs	r2, #4
 800d26e:	715a      	strb	r2, [r3, #5]
 800d270:	e01a      	b.n	800d2a8 <mod_mqttConnect+0x18c>
					}
					else if (3 == ls_result)	//Connection Refused: Server Unavailable
 800d272:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d276:	2b03      	cmp	r3, #3
 800d278:	d103      	bne.n	800d282 <mod_mqttConnect+0x166>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d27a:	4b4c      	ldr	r3, [pc, #304]	; (800d3ac <mod_mqttConnect+0x290>)
 800d27c:	2205      	movs	r2, #5
 800d27e:	715a      	strb	r2, [r3, #5]
 800d280:	e012      	b.n	800d2a8 <mod_mqttConnect+0x18c>
								E_CON_REF_SERVER_UNAVAIL;
					}
					else if (4 == ls_result)//Connection Refused: Bad User Name or Password
 800d282:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d286:	2b04      	cmp	r3, #4
 800d288:	d103      	bne.n	800d292 <mod_mqttConnect+0x176>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d28a:	4b48      	ldr	r3, [pc, #288]	; (800d3ac <mod_mqttConnect+0x290>)
 800d28c:	2206      	movs	r2, #6
 800d28e:	715a      	strb	r2, [r3, #5]
 800d290:	e00a      	b.n	800d2a8 <mod_mqttConnect+0x18c>
								E_CON_REF_BAD_USR_PASS;
					}
					else if (5 == ls_result) //Connection Refused: Not Authorized
 800d292:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d296:	2b05      	cmp	r3, #5
 800d298:	d103      	bne.n	800d2a2 <mod_mqttConnect+0x186>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_NOT_AUTH;
 800d29a:	4b44      	ldr	r3, [pc, #272]	; (800d3ac <mod_mqttConnect+0x290>)
 800d29c:	2207      	movs	r2, #7
 800d29e:	715a      	strb	r2, [r3, #5]
 800d2a0:	e002      	b.n	800d2a8 <mod_mqttConnect+0x18c>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d2a2:	4b42      	ldr	r3, [pc, #264]	; (800d3ac <mod_mqttConnect+0x290>)
 800d2a4:	2208      	movs	r2, #8
 800d2a6:	715a      	strb	r2, [r3, #5]
					}

					len_retStatus = E_RET_FAILED;
 800d2a8:	2302      	movs	r3, #2
 800d2aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2ae:	e068      	b.n	800d382 <mod_mqttConnect+0x266>
				}
				else
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d2b0:	4b3e      	ldr	r3, [pc, #248]	; (800d3ac <mod_mqttConnect+0x290>)
 800d2b2:	2208      	movs	r2, #8
 800d2b4:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_FAILED;
 800d2b6:	2302      	movs	r3, #2
 800d2b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2bc:	e061      	b.n	800d382 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d2be:	2302      	movs	r3, #2
 800d2c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2c4:	e05d      	b.n	800d382 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d2cc:	e059      	b.n	800d382 <mod_mqttConnect+0x266>
		}
	}
	else if (E_RET_RSP_ERROR == len_retStatus)
 800d2ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d2d2:	2b03      	cmp	r3, #3
 800d2d4:	d13c      	bne.n	800d350 <mod_mqttConnect+0x234>
	{
		lsu8_retryCnt = 0;
 800d2d6:	4b32      	ldr	r3, [pc, #200]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d2d8:	2200      	movs	r2, #0
 800d2da:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d2dc:	4831      	ldr	r0, [pc, #196]	; (800d3a4 <mod_mqttConnect+0x288>)
 800d2de:	4934      	ldr	r1, [pc, #208]	; (800d3b0 <mod_mqttConnect+0x294>)
 800d2e0:	f004 fead 	bl	801203e <strstr>
 800d2e4:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) QMTSTAT);
		if (lu8p_Ptr != NULL)
 800d2e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d02d      	beq.n	800d348 <mod_mqttConnect+0x22c>
		{
			if (lu8p_Ptr != NULL)
 800d2ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d026      	beq.n	800d340 <mod_mqttConnect+0x224>
			{
				lu8p_Ptr += 10;
 800d2f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2f4:	330a      	adds	r3, #10
 800d2f6:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800d2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d2fa:	f004 fb43 	bl	8011984 <atoi>
 800d2fe:	4603      	mov	r3, r0
 800d300:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d302:	4b23      	ldr	r3, [pc, #140]	; (800d390 <mod_mqttConnect+0x274>)
 800d304:	781b      	ldrb	r3, [r3, #0]
 800d306:	461a      	mov	r2, r3
 800d308:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d113      	bne.n	800d338 <mod_mqttConnect+0x21c>
				{
					lu8p_Ptr += 2;
 800d310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d312:	3302      	adds	r3, #2
 800d314:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d318:	f004 fb34 	bl	8011984 <atoi>
 800d31c:	4603      	mov	r3, r0
 800d31e:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)
 800d320:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d324:	2b01      	cmp	r3, #1
 800d326:	d103      	bne.n	800d330 <mod_mqttConnect+0x214>
					{
						len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d328:	230a      	movs	r3, #10
 800d32a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d32e:	e028      	b.n	800d382 <mod_mqttConnect+0x266>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d330:	2302      	movs	r3, #2
 800d332:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d336:	e024      	b.n	800d382 <mod_mqttConnect+0x266>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d338:	2302      	movs	r3, #2
 800d33a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d33e:	e020      	b.n	800d382 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d340:	2302      	movs	r3, #2
 800d342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d346:	e01c      	b.n	800d382 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d348:	2302      	movs	r3, #2
 800d34a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d34e:	e018      	b.n	800d382 <mod_mqttConnect+0x266>
		}

	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d350:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d354:	2b04      	cmp	r3, #4
 800d356:	d014      	beq.n	800d382 <mod_mqttConnect+0x266>
	{
		lsu8_retryCnt++;
 800d358:	4b11      	ldr	r3, [pc, #68]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	3301      	adds	r3, #1
 800d35e:	b2da      	uxtb	r2, r3
 800d360:	4b0f      	ldr	r3, [pc, #60]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d362:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d364:	4b0e      	ldr	r3, [pc, #56]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d366:	781b      	ldrb	r3, [r3, #0]
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d803      	bhi.n	800d374 <mod_mqttConnect+0x258>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d36c:	2304      	movs	r3, #4
 800d36e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d372:	e006      	b.n	800d382 <mod_mqttConnect+0x266>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d374:	4b0a      	ldr	r3, [pc, #40]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b03      	cmp	r3, #3
 800d37a:	d902      	bls.n	800d382 <mod_mqttConnect+0x266>
		{
			lsu8_retryCnt = 0;
 800d37c:	4b08      	ldr	r3, [pc, #32]	; (800d3a0 <mod_mqttConnect+0x284>)
 800d37e:	2200      	movs	r2, #0
 800d380:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d386:	4618      	mov	r0, r3
 800d388:	3734      	adds	r7, #52	; 0x34
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd90      	pop	{r4, r7, pc}
 800d38e:	bf00      	nop
 800d390:	1fff4765 	.word	0x1fff4765
 800d394:	1fff471d 	.word	0x1fff471d
 800d398:	0801417c 	.word	0x0801417c
 800d39c:	0801418c 	.word	0x0801418c
 800d3a0:	1fff4781 	.word	0x1fff4781
 800d3a4:	1fff46c4 	.word	0x1fff46c4
 800d3a8:	1fff05f2 	.word	0x1fff05f2
 800d3ac:	1ffea4dc 	.word	0x1ffea4dc
 800d3b0:	08014080 	.word	0x08014080

0800d3b4 <mod_mqttEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttEnableFunctionality(void)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b082      	sub	sp, #8
 800d3b8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d3ba:	2304      	movs	r3, #4
 800d3bc:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d3be:	2300      	movs	r3, #0
 800d3c0:	80bb      	strh	r3, [r7, #4]
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "1\r\n");
 800d3c6:	1d3b      	adds	r3, r7, #4
 800d3c8:	4a16      	ldr	r2, [pc, #88]	; (800d424 <mod_mqttEnableFunctionality+0x70>)
 800d3ca:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d3cc:	1d3b      	adds	r3, r7, #4
 800d3ce:	2017      	movs	r0, #23
 800d3d0:	4619      	mov	r1, r3
 800d3d2:	f7fe fdbd 	bl	800bf50 <mod_sendCmdGetRsp>
 800d3d6:	4603      	mov	r3, r0
 800d3d8:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d3da:	79fb      	ldrb	r3, [r7, #7]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d105      	bne.n	800d3ec <mod_mqttEnableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d3e0:	4b11      	ldr	r3, [pc, #68]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d3e6:	2300      	movs	r3, #0
 800d3e8:	71fb      	strb	r3, [r7, #7]
 800d3ea:	e016      	b.n	800d41a <mod_mqttEnableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d3ec:	79fb      	ldrb	r3, [r7, #7]
 800d3ee:	2b04      	cmp	r3, #4
 800d3f0:	d013      	beq.n	800d41a <mod_mqttEnableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d3f2:	4b0d      	ldr	r3, [pc, #52]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d3f4:	781b      	ldrb	r3, [r3, #0]
 800d3f6:	3301      	adds	r3, #1
 800d3f8:	b2da      	uxtb	r2, r3
 800d3fa:	4b0b      	ldr	r3, [pc, #44]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d3fc:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d3fe:	4b0a      	ldr	r3, [pc, #40]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	2b02      	cmp	r3, #2
 800d404:	d802      	bhi.n	800d40c <mod_mqttEnableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d406:	2304      	movs	r3, #4
 800d408:	71fb      	strb	r3, [r7, #7]
 800d40a:	e006      	b.n	800d41a <mod_mqttEnableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d40c:	4b06      	ldr	r3, [pc, #24]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d40e:	781b      	ldrb	r3, [r3, #0]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d902      	bls.n	800d41a <mod_mqttEnableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d414:	4b04      	ldr	r3, [pc, #16]	; (800d428 <mod_mqttEnableFunctionality+0x74>)
 800d416:	2200      	movs	r2, #0
 800d418:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d41a:	79fb      	ldrb	r3, [r7, #7]
}
 800d41c:	4618      	mov	r0, r3
 800d41e:	3708      	adds	r7, #8
 800d420:	46bd      	mov	sp, r7
 800d422:	bd80      	pop	{r7, pc}
 800d424:	000a0d31 	.word	0x000a0d31
 800d428:	1fff4782 	.word	0x1fff4782

0800d42c <mod_mqttDisableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableFunctionality(void)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d432:	2304      	movs	r3, #4
 800d434:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d436:	2300      	movs	r3, #0
 800d438:	80bb      	strh	r3, [r7, #4]
 800d43a:	2300      	movs	r3, #0
 800d43c:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "4\r\n");
 800d43e:	1d3b      	adds	r3, r7, #4
 800d440:	4a16      	ldr	r2, [pc, #88]	; (800d49c <mod_mqttDisableFunctionality+0x70>)
 800d442:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d444:	1d3b      	adds	r3, r7, #4
 800d446:	2017      	movs	r0, #23
 800d448:	4619      	mov	r1, r3
 800d44a:	f7fe fd81 	bl	800bf50 <mod_sendCmdGetRsp>
 800d44e:	4603      	mov	r3, r0
 800d450:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d452:	79fb      	ldrb	r3, [r7, #7]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d105      	bne.n	800d464 <mod_mqttDisableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d458:	4b11      	ldr	r3, [pc, #68]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d45e:	2300      	movs	r3, #0
 800d460:	71fb      	strb	r3, [r7, #7]
 800d462:	e016      	b.n	800d492 <mod_mqttDisableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d464:	79fb      	ldrb	r3, [r7, #7]
 800d466:	2b04      	cmp	r3, #4
 800d468:	d013      	beq.n	800d492 <mod_mqttDisableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d46a:	4b0d      	ldr	r3, [pc, #52]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d46c:	781b      	ldrb	r3, [r3, #0]
 800d46e:	3301      	adds	r3, #1
 800d470:	b2da      	uxtb	r2, r3
 800d472:	4b0b      	ldr	r3, [pc, #44]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d474:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d476:	4b0a      	ldr	r3, [pc, #40]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	d802      	bhi.n	800d484 <mod_mqttDisableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d47e:	2304      	movs	r3, #4
 800d480:	71fb      	strb	r3, [r7, #7]
 800d482:	e006      	b.n	800d492 <mod_mqttDisableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d484:	4b06      	ldr	r3, [pc, #24]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d486:	781b      	ldrb	r3, [r3, #0]
 800d488:	2b03      	cmp	r3, #3
 800d48a:	d902      	bls.n	800d492 <mod_mqttDisableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d48c:	4b04      	ldr	r3, [pc, #16]	; (800d4a0 <mod_mqttDisableFunctionality+0x74>)
 800d48e:	2200      	movs	r2, #0
 800d490:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d492:	79fb      	ldrb	r3, [r7, #7]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	000a0d34 	.word	0x000a0d34
 800d4a0:	1fff4783 	.word	0x1fff4783

0800d4a4 <mod_mqttDisableEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableEnableFunctionality(void)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d4aa:	2304      	movs	r3, #4
 800d4ac:	71fb      	strb	r3, [r7, #7]

	switch (sen_modemResetState)
 800d4ae:	4b21      	ldr	r3, [pc, #132]	; (800d534 <mod_mqttDisableEnableFunctionality+0x90>)
 800d4b0:	781b      	ldrb	r3, [r3, #0]
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d016      	beq.n	800d4e4 <mod_mqttDisableEnableFunctionality+0x40>
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d02b      	beq.n	800d512 <mod_mqttDisableEnableFunctionality+0x6e>
 800d4ba:	2b00      	cmp	r3, #0
 800d4bc:	d000      	beq.n	800d4c0 <mod_mqttDisableEnableFunctionality+0x1c>
				len_retStatus = E_RET_SUCCESS;
			}
		break;

		default:
		break;
 800d4be:	e034      	b.n	800d52a <mod_mqttDisableEnableFunctionality+0x86>
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;

	switch (sen_modemResetState)
	{
		case E_RST_DISABLE_FUNCTION:
			len_retStatus = mod_mqttDisableFunctionality();
 800d4c0:	f7ff ffb4 	bl	800d42c <mod_mqttDisableFunctionality>
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800d4c8:	79fb      	ldrb	r3, [r7, #7]
 800d4ca:	2b00      	cmp	r3, #0
 800d4cc:	d109      	bne.n	800d4e2 <mod_mqttDisableEnableFunctionality+0x3e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800d4ce:	2304      	movs	r3, #4
 800d4d0:	71fb      	strb	r3, [r7, #7]
				sen_modemResetState = E_RST_ENALBE_FUNCTION;
 800d4d2:	4b18      	ldr	r3, [pc, #96]	; (800d534 <mod_mqttDisableEnableFunctionality+0x90>)
 800d4d4:	2201      	movs	r2, #1
 800d4d6:	701a      	strb	r2, [r3, #0]
				tm_setResetTimer(5000);
 800d4d8:	f241 3088 	movw	r0, #5000	; 0x1388
 800d4dc:	f7f2 ff62 	bl	80003a4 <tm_setResetTimer>
			}
		break;
 800d4e0:	e023      	b.n	800d52a <mod_mqttDisableEnableFunctionality+0x86>
 800d4e2:	e022      	b.n	800d52a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_ENALBE_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d4e4:	f7f2 ff6c 	bl	80003c0 <tm_getResetTimerValue>
 800d4e8:	4603      	mov	r3, r0
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d110      	bne.n	800d510 <mod_mqttDisableEnableFunctionality+0x6c>
			{
				len_retStatus = mod_mqttEnableFunctionality();
 800d4ee:	f7ff ff61 	bl	800d3b4 <mod_mqttEnableFunctionality>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800d4f6:	79fb      	ldrb	r3, [r7, #7]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d109      	bne.n	800d510 <mod_mqttDisableEnableFunctionality+0x6c>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d4fc:	2304      	movs	r3, #4
 800d4fe:	71fb      	strb	r3, [r7, #7]
					sen_modemResetState = E_RST_WAIT_FUNCTION;
 800d500:	4b0c      	ldr	r3, [pc, #48]	; (800d534 <mod_mqttDisableEnableFunctionality+0x90>)
 800d502:	2202      	movs	r2, #2
 800d504:	701a      	strb	r2, [r3, #0]
					tm_setResetTimer(5000);
 800d506:	f241 3088 	movw	r0, #5000	; 0x1388
 800d50a:	f7f2 ff4b 	bl	80003a4 <tm_setResetTimer>
				}
			}
		break;
 800d50e:	e00c      	b.n	800d52a <mod_mqttDisableEnableFunctionality+0x86>
 800d510:	e00b      	b.n	800d52a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_WAIT_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d512:	f7f2 ff55 	bl	80003c0 <tm_getResetTimerValue>
 800d516:	4603      	mov	r3, r0
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d105      	bne.n	800d528 <mod_mqttDisableEnableFunctionality+0x84>
			{
				sen_modemResetState = E_RST_DISABLE_FUNCTION;
 800d51c:	4b05      	ldr	r3, [pc, #20]	; (800d534 <mod_mqttDisableEnableFunctionality+0x90>)
 800d51e:	2200      	movs	r2, #0
 800d520:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_SUCCESS;
 800d522:	2300      	movs	r3, #0
 800d524:	71fb      	strb	r3, [r7, #7]
			}
		break;
 800d526:	e7ff      	b.n	800d528 <mod_mqttDisableEnableFunctionality+0x84>
 800d528:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d52a:	79fb      	ldrb	r3, [r7, #7]
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3708      	adds	r7, #8
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}
 800d534:	1fff476d 	.word	0x1fff476d

0800d538 <mod_mqttPublishData>:
*
* Return values 	:	en_responseRetCodes_t - return status
*
****************************************************************************/
static en_responseRetCodes_t mod_mqttPublishData(uint8_t * lu8p_data, uint16_t lu16_len, uint8_t* lu8p_topic)
{
 800d538:	b590      	push	{r4, r7, lr}
 800d53a:	b09b      	sub	sp, #108	; 0x6c
 800d53c:	af02      	add	r7, sp, #8
 800d53e:	60f8      	str	r0, [r7, #12]
 800d540:	460b      	mov	r3, r1
 800d542:	607a      	str	r2, [r7, #4]
 800d544:	817b      	strh	r3, [r7, #10]
	static uint8_t lsu8_retryCnt = 0;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d546:	2304      	movs	r3, #4
 800d548:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t *lu8p_Ptr = NULL;
 800d54c:	2300      	movs	r3, #0
 800d54e:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t lu8arr_param[50] = { 0 };
 800d550:	f107 0314 	add.w	r3, r7, #20
 800d554:	2200      	movs	r2, #0
 800d556:	601a      	str	r2, [r3, #0]
 800d558:	3304      	adds	r3, #4
 800d55a:	2200      	movs	r2, #0
 800d55c:	601a      	str	r2, [r3, #0]
 800d55e:	3304      	adds	r3, #4
 800d560:	2200      	movs	r2, #0
 800d562:	601a      	str	r2, [r3, #0]
 800d564:	3304      	adds	r3, #4
 800d566:	2200      	movs	r2, #0
 800d568:	601a      	str	r2, [r3, #0]
 800d56a:	3304      	adds	r3, #4
 800d56c:	2200      	movs	r2, #0
 800d56e:	601a      	str	r2, [r3, #0]
 800d570:	3304      	adds	r3, #4
 800d572:	2200      	movs	r2, #0
 800d574:	601a      	str	r2, [r3, #0]
 800d576:	3304      	adds	r3, #4
 800d578:	2200      	movs	r2, #0
 800d57a:	601a      	str	r2, [r3, #0]
 800d57c:	3304      	adds	r3, #4
 800d57e:	2200      	movs	r2, #0
 800d580:	601a      	str	r2, [r3, #0]
 800d582:	3304      	adds	r3, #4
 800d584:	2200      	movs	r2, #0
 800d586:	601a      	str	r2, [r3, #0]
 800d588:	3304      	adds	r3, #4
 800d58a:	2200      	movs	r2, #0
 800d58c:	601a      	str	r2, [r3, #0]
 800d58e:	3304      	adds	r3, #4
 800d590:	2200      	movs	r2, #0
 800d592:	601a      	str	r2, [r3, #0]
 800d594:	3304      	adds	r3, #4
 800d596:	2200      	movs	r2, #0
 800d598:	601a      	str	r2, [r3, #0]
 800d59a:	3304      	adds	r3, #4
 800d59c:	2200      	movs	r2, #0
 800d59e:	801a      	strh	r2, [r3, #0]
 800d5a0:	3302      	adds	r3, #2
	short ls_result = 0;
 800d5a2:	2300      	movs	r3, #0
 800d5a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint64_t lu64_totalTime = 0;
 800d5a8:	f04f 0200 	mov.w	r2, #0
 800d5ac:	f04f 0300 	mov.w	r3, #0
 800d5b0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 
	switch (sen_publishDataState)
 800d5b4:	4bba      	ldr	r3, [pc, #744]	; (800d8a0 <mod_mqttPublishData+0x368>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d003      	beq.n	800d5c4 <mod_mqttPublishData+0x8c>
 800d5bc:	2b01      	cmp	r3, #1
 800d5be:	f000 80c3 	beq.w	800d748 <mod_mqttPublishData+0x210>
 800d5c2:	e1b7      	b.n	800d934 <mod_mqttPublishData+0x3fc>
	{
		case E_PUBLISH_CMD_STATE:
 
			sprintf((char *) lu8arr_param, (const char*) "%d,1,%d,0,%s,%d\r\n",
 800d5c4:	4bb7      	ldr	r3, [pc, #732]	; (800d8a4 <mod_mqttPublishData+0x36c>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	461c      	mov	r4, r3
 800d5ca:	897b      	ldrh	r3, [r7, #10]
 800d5cc:	f107 0114 	add.w	r1, r7, #20
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	9200      	str	r2, [sp, #0]
 800d5d4:	9301      	str	r3, [sp, #4]
 800d5d6:	4608      	mov	r0, r1
 800d5d8:	49b3      	ldr	r1, [pc, #716]	; (800d8a8 <mod_mqttPublishData+0x370>)
 800d5da:	4622      	mov	r2, r4
 800d5dc:	2300      	movs	r3, #0
 800d5de:	f004 fccb 	bl	8011f78 <siprintf>
					sgu8_mqttClientId, MQTT_PUBLISH_QOS, lu8p_topic, lu16_len);
 
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH,
 800d5e2:	f107 0314 	add.w	r3, r7, #20
 800d5e6:	2015      	movs	r0, #21
 800d5e8:	4619      	mov	r1, r3
 800d5ea:	f7fe fcb1 	bl	800bf50 <mod_sendCmdGetRsp>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					(uint8_t *) lu8arr_param);
			if (E_RET_SUCCESS == len_retStatus)
 800d5f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d130      	bne.n	800d65e <mod_mqttPublishData+0x126>
			{
				lu8p_Ptr =
 800d5fc:	48ab      	ldr	r0, [pc, #684]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d5fe:	49ac      	ldr	r1, [pc, #688]	; (800d8b0 <mod_mqttPublishData+0x378>)
 800d600:	f004 fd1d 	bl	801203e <strstr>
 800d604:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH].mu8arr_respString);
				if (NULL != lu8p_Ptr)
 800d606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d608:	2b00      	cmp	r3, #0
 800d60a:	d01f      	beq.n	800d64c <mod_mqttPublishData+0x114>
				{
					lsu8_retryCnt = 0;
 800d60c:	4ba9      	ldr	r3, [pc, #676]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d60e:	2200      	movs	r2, #0
 800d610:	701a      	strb	r2, [r3, #0]
 
					memset(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString, 0,
 800d612:	48a9      	ldr	r0, [pc, #676]	; (800d8b8 <mod_mqttPublishData+0x380>)
 800d614:	2100      	movs	r1, #0
 800d616:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d61a:	f004 f9ee 	bl	80119fa <memset>
							sizeof(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString));
 
					strncpy(
 800d61e:	897b      	ldrh	r3, [r7, #10]
 800d620:	48a5      	ldr	r0, [pc, #660]	; (800d8b8 <mod_mqttPublishData+0x380>)
 800d622:	68f9      	ldr	r1, [r7, #12]
 800d624:	461a      	mov	r2, r3
 800d626:	f004 fcf8 	bl	801201a <strncpy>
							(char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString,
							(char *) lu8p_data, lu16_len);
 
					gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString[lu16_len++] =
 800d62a:	897b      	ldrh	r3, [r7, #10]
 800d62c:	1c5a      	adds	r2, r3, #1
 800d62e:	817a      	strh	r2, [r7, #10]
 800d630:	461a      	mov	r2, r3
 800d632:	4ba2      	ldr	r3, [pc, #648]	; (800d8bc <mod_mqttPublishData+0x384>)
 800d634:	4413      	add	r3, r2
 800d636:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800d63a:	3318      	adds	r3, #24
 800d63c:	2200      	movs	r2, #0
 800d63e:	701a      	strb	r2, [r3, #0]
							'\0';
 
					sen_publishDataState = E_PUBLISH_DATA_STATE;
 800d640:	4b97      	ldr	r3, [pc, #604]	; (800d8a0 <mod_mqttPublishData+0x368>)
 800d642:	2201      	movs	r2, #1
 800d644:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d646:	2304      	movs	r3, #4
 800d648:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d64c:	4b9c      	ldr	r3, [pc, #624]	; (800d8c0 <mod_mqttPublishData+0x388>)
 800d64e:	2200      	movs	r2, #0
 800d650:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d652:	4896      	ldr	r0, [pc, #600]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d654:	2100      	movs	r1, #0
 800d656:	2240      	movs	r2, #64	; 0x40
 800d658:	f004 f9cf 	bl	80119fa <memset>
 800d65c:	e073      	b.n	800d746 <mod_mqttPublishData+0x20e>
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d65e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d662:	2b0b      	cmp	r3, #11
 800d664:	d107      	bne.n	800d676 <mod_mqttPublishData+0x13e>
			{
				if(sgu16_cmeError == 58)
 800d666:	4b97      	ldr	r3, [pc, #604]	; (800d8c4 <mod_mqttPublishData+0x38c>)
 800d668:	881b      	ldrh	r3, [r3, #0]
 800d66a:	2b3a      	cmp	r3, #58	; 0x3a
 800d66c:	d16b      	bne.n	800d746 <mod_mqttPublishData+0x20e>
				{
					len_retStatus = E_RET_CME_ERROR;
 800d66e:	230b      	movs	r3, #11
 800d670:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				{
					lsu8_retryCnt = 0;
					len_retStatus = E_RET_TIMEOUT_ERROR;
				}
			}
		break;
 800d674:	e162      	b.n	800d93c <mod_mqttPublishData+0x404>
				if(sgu16_cmeError == 58)
				{
					len_retStatus = E_RET_CME_ERROR;
				}
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d676:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d67a:	2b03      	cmp	r3, #3
 800d67c:	d146      	bne.n	800d70c <mod_mqttPublishData+0x1d4>
			{
				lsu8_retryCnt = 0;
 800d67e:	4b8d      	ldr	r3, [pc, #564]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d680:	2200      	movs	r2, #0
 800d682:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d684:	4889      	ldr	r0, [pc, #548]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d686:	4990      	ldr	r1, [pc, #576]	; (800d8c8 <mod_mqttPublishData+0x390>)
 800d688:	f004 fcd9 	bl	801203e <strstr>
 800d68c:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d68e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d690:	2b00      	cmp	r3, #0
 800d692:	d02f      	beq.n	800d6f4 <mod_mqttPublishData+0x1bc>
				{
					if (lu8p_Ptr != NULL)
 800d694:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d696:	2b00      	cmp	r3, #0
 800d698:	d028      	beq.n	800d6ec <mod_mqttPublishData+0x1b4>
					{
						lu8p_Ptr += 10;
 800d69a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d69c:	330a      	adds	r3, #10
 800d69e:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d6a0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d6a2:	f004 f96f 	bl	8011984 <atoi>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d6ac:	4b7d      	ldr	r3, [pc, #500]	; (800d8a4 <mod_mqttPublishData+0x36c>)
 800d6ae:	781b      	ldrb	r3, [r3, #0]
 800d6b0:	461a      	mov	r2, r3
 800d6b2:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d6b6:	429a      	cmp	r2, r3
 800d6b8:	d114      	bne.n	800d6e4 <mod_mqttPublishData+0x1ac>
						{
							lu8p_Ptr += 2;
 800d6ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d6bc:	3302      	adds	r3, #2
 800d6be:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d6c0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d6c2:	f004 f95f 	bl	8011984 <atoi>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d6cc:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d6d0:	2b01      	cmp	r3, #1
 800d6d2:	d103      	bne.n	800d6dc <mod_mqttPublishData+0x1a4>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d6d4:	230a      	movs	r3, #10
 800d6d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6da:	e00e      	b.n	800d6fa <mod_mqttPublishData+0x1c2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d6dc:	2302      	movs	r3, #2
 800d6de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6e2:	e00a      	b.n	800d6fa <mod_mqttPublishData+0x1c2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d6e4:	2302      	movs	r3, #2
 800d6e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6ea:	e006      	b.n	800d6fa <mod_mqttPublishData+0x1c2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d6ec:	2302      	movs	r3, #2
 800d6ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d6f2:	e002      	b.n	800d6fa <mod_mqttPublishData+0x1c2>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d6f4:	2302      	movs	r3, #2
 800d6f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d6fa:	4b71      	ldr	r3, [pc, #452]	; (800d8c0 <mod_mqttPublishData+0x388>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d700:	486a      	ldr	r0, [pc, #424]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d702:	2100      	movs	r1, #0
 800d704:	2240      	movs	r2, #64	; 0x40
 800d706:	f004 f978 	bl	80119fa <memset>
 800d70a:	e01c      	b.n	800d746 <mod_mqttPublishData+0x20e>
 
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d70c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d710:	2b04      	cmp	r3, #4
 800d712:	d018      	beq.n	800d746 <mod_mqttPublishData+0x20e>
			{
				lsu8_retryCnt++;
 800d714:	4b67      	ldr	r3, [pc, #412]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d716:	781b      	ldrb	r3, [r3, #0]
 800d718:	3301      	adds	r3, #1
 800d71a:	b2da      	uxtb	r2, r3
 800d71c:	4b65      	ldr	r3, [pc, #404]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d71e:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d720:	4b64      	ldr	r3, [pc, #400]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	2b02      	cmp	r3, #2
 800d726:	d803      	bhi.n	800d730 <mod_mqttPublishData+0x1f8>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d728:	2304      	movs	r3, #4
 800d72a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d72e:	e00a      	b.n	800d746 <mod_mqttPublishData+0x20e>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d730:	4b60      	ldr	r3, [pc, #384]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	2b03      	cmp	r3, #3
 800d736:	d906      	bls.n	800d746 <mod_mqttPublishData+0x20e>
				{
					lsu8_retryCnt = 0;
 800d738:	4b5e      	ldr	r3, [pc, #376]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d73a:	2200      	movs	r2, #0
 800d73c:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d73e:	2306      	movs	r3, #6
 800d740:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		break;
 800d744:	e0fa      	b.n	800d93c <mod_mqttPublishData+0x404>
 800d746:	e0f9      	b.n	800d93c <mod_mqttPublishData+0x404>
 
		case E_PUBLISH_DATA_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH_DATA, NULL);
 800d748:	2016      	movs	r0, #22
 800d74a:	2100      	movs	r1, #0
 800d74c:	f7fe fc00 	bl	800bf50 <mod_sendCmdGetRsp>
 800d750:	4603      	mov	r3, r0
 800d752:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (E_RET_SUCCESS == len_retStatus)
 800d756:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d160      	bne.n	800d820 <mod_mqttPublishData+0x2e8>
			{
				lu8p_Ptr =
 800d75e:	4853      	ldr	r0, [pc, #332]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d760:	495a      	ldr	r1, [pc, #360]	; (800d8cc <mod_mqttPublishData+0x394>)
 800d762:	f004 fc6c 	bl	801203e <strstr>
 800d766:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_otherRspString);
				if (NULL != lu8p_Ptr)
 800d768:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d04f      	beq.n	800d80e <mod_mqttPublishData+0x2d6>
				{
					lu8p_Ptr += 11;
 800d76e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d770:	330b      	adds	r3, #11
 800d772:	65bb      	str	r3, [r7, #88]	; 0x58
					ls_result = atoi((const char *) lu8p_Ptr);
 800d774:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d776:	f004 f905 	bl	8011984 <atoi>
 800d77a:	4603      	mov	r3, r0
 800d77c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					if (sgu8_mqttClientId == ls_result)
 800d780:	4b48      	ldr	r3, [pc, #288]	; (800d8a4 <mod_mqttPublishData+0x36c>)
 800d782:	781b      	ldrb	r3, [r3, #0]
 800d784:	461a      	mov	r2, r3
 800d786:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d78a:	429a      	cmp	r2, r3
 800d78c:	d13f      	bne.n	800d80e <mod_mqttPublishData+0x2d6>
					{
						lu8p_Ptr += 2;
 800d78e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d790:	3302      	adds	r3, #2
 800d792:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((const char *) lu8p_Ptr);
 800d794:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d796:	f004 f8f5 	bl	8011984 <atoi>
 800d79a:	4603      	mov	r3, r0
 800d79c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (1 == ls_result)	//msg id
 800d7a0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d7a4:	2b01      	cmp	r3, #1
 800d7a6:	d132      	bne.n	800d80e <mod_mqttPublishData+0x2d6>
						{
							lu8p_Ptr += 2;
 800d7a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d7aa:	3302      	adds	r3, #2
 800d7ac:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((const char *) lu8p_Ptr);
 800d7ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d7b0:	f004 f8e8 	bl	8011984 <atoi>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (E_PUB_SUCCESS == ls_result)	//Packet sent successfully and ACK received
 800d7ba:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d109      	bne.n	800d7d6 <mod_mqttPublishData+0x29e>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_SUCCESS;
 800d7c2:	4b43      	ldr	r3, [pc, #268]	; (800d8d0 <mod_mqttPublishData+0x398>)
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_SUCCESS;
 800d7c8:	2300      	movs	r3, #0
 800d7ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
								sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d7ce:	4b34      	ldr	r3, [pc, #208]	; (800d8a0 <mod_mqttPublishData+0x368>)
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	701a      	strb	r2, [r3, #0]
 800d7d4:	e01b      	b.n	800d80e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_PACK_RETRAN == ls_result)	//Packet retransmission
 800d7d6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d7da:	2b01      	cmp	r3, #1
 800d7dc:	d106      	bne.n	800d7ec <mod_mqttPublishData+0x2b4>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_PACK_RETRAN;
 800d7de:	4b3c      	ldr	r3, [pc, #240]	; (800d8d0 <mod_mqttPublishData+0x398>)
 800d7e0:	2201      	movs	r2, #1
 800d7e2:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_INPROGRESS;
 800d7e4:	2304      	movs	r3, #4
 800d7e6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d7ea:	e010      	b.n	800d80e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_FAILED_SEND_PACK == ls_result)	//Failed to send packet
 800d7ec:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d7f0:	2b02      	cmp	r3, #2
 800d7f2:	d106      	bne.n	800d802 <mod_mqttPublishData+0x2ca>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_FAILED_SEND_PACK;
 800d7f4:	4b36      	ldr	r3, [pc, #216]	; (800d8d0 <mod_mqttPublishData+0x398>)
 800d7f6:	2202      	movs	r2, #2
 800d7f8:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d800:	e005      	b.n	800d80e <mod_mqttPublishData+0x2d6>
							}
							else
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_UNKNOWN_ERROR;
 800d802:	4b33      	ldr	r3, [pc, #204]	; (800d8d0 <mod_mqttPublishData+0x398>)
 800d804:	2203      	movs	r2, #3
 800d806:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d808:	2302      	movs	r3, #2
 800d80a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							}
						}
					}
				}
 
				sgu8_respCount = 0;
 800d80e:	4b2c      	ldr	r3, [pc, #176]	; (800d8c0 <mod_mqttPublishData+0x388>)
 800d810:	2200      	movs	r2, #0
 800d812:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d814:	4825      	ldr	r0, [pc, #148]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d816:	2100      	movs	r1, #0
 800d818:	2240      	movs	r2, #64	; 0x40
 800d81a:	f004 f8ee 	bl	80119fa <memset>
 800d81e:	e088      	b.n	800d932 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d820:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d824:	2b03      	cmp	r3, #3
 800d826:	d164      	bne.n	800d8f2 <mod_mqttPublishData+0x3ba>
			{
				lsu8_retryCnt = 0;
 800d828:	4b22      	ldr	r3, [pc, #136]	; (800d8b4 <mod_mqttPublishData+0x37c>)
 800d82a:	2200      	movs	r2, #0
 800d82c:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d82e:	481f      	ldr	r0, [pc, #124]	; (800d8ac <mod_mqttPublishData+0x374>)
 800d830:	4925      	ldr	r1, [pc, #148]	; (800d8c8 <mod_mqttPublishData+0x390>)
 800d832:	f004 fc04 	bl	801203e <strstr>
 800d836:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d838:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d04a      	beq.n	800d8d4 <mod_mqttPublishData+0x39c>
				{
					if (lu8p_Ptr != NULL)
 800d83e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d840:	2b00      	cmp	r3, #0
 800d842:	d028      	beq.n	800d896 <mod_mqttPublishData+0x35e>
					{
						lu8p_Ptr += 10;
 800d844:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d846:	330a      	adds	r3, #10
 800d848:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d84a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d84c:	f004 f89a 	bl	8011984 <atoi>
 800d850:	4603      	mov	r3, r0
 800d852:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d856:	4b13      	ldr	r3, [pc, #76]	; (800d8a4 <mod_mqttPublishData+0x36c>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	461a      	mov	r2, r3
 800d85c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d860:	429a      	cmp	r2, r3
 800d862:	d114      	bne.n	800d88e <mod_mqttPublishData+0x356>
						{
							lu8p_Ptr += 2;
 800d864:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d866:	3302      	adds	r3, #2
 800d868:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d86a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d86c:	f004 f88a 	bl	8011984 <atoi>
 800d870:	4603      	mov	r3, r0
 800d872:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d876:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d103      	bne.n	800d886 <mod_mqttPublishData+0x34e>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d87e:	230a      	movs	r3, #10
 800d880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d884:	e029      	b.n	800d8da <mod_mqttPublishData+0x3a2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d886:	2302      	movs	r3, #2
 800d888:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d88c:	e025      	b.n	800d8da <mod_mqttPublishData+0x3a2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d88e:	2302      	movs	r3, #2
 800d890:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d894:	e021      	b.n	800d8da <mod_mqttPublishData+0x3a2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d896:	2302      	movs	r3, #2
 800d898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d89c:	e01d      	b.n	800d8da <mod_mqttPublishData+0x3a2>
 800d89e:	bf00      	nop
 800d8a0:	1fff476c 	.word	0x1fff476c
 800d8a4:	1fff4765 	.word	0x1fff4765
 800d8a8:	080141a0 	.word	0x080141a0
 800d8ac:	1fff46c4 	.word	0x1fff46c4
 800d8b0:	1fff0a64 	.word	0x1fff0a64
 800d8b4:	1fff4784 	.word	0x1fff4784
 800d8b8:	1fff0b00 	.word	0x1fff0b00
 800d8bc:	1ffea4e8 	.word	0x1ffea4e8
 800d8c0:	1fff4764 	.word	0x1fff4764
 800d8c4:	1fff4766 	.word	0x1fff4766
 800d8c8:	08014080 	.word	0x08014080
 800d8cc:	1fff0f3a 	.word	0x1fff0f3a
 800d8d0:	1ffea4dc 	.word	0x1ffea4dc
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d8d4:	2302      	movs	r3, #2
 800d8d6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d8da:	4b1b      	ldr	r3, [pc, #108]	; (800d948 <mod_mqttPublishData+0x410>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d8e0:	481a      	ldr	r0, [pc, #104]	; (800d94c <mod_mqttPublishData+0x414>)
 800d8e2:	2100      	movs	r1, #0
 800d8e4:	2240      	movs	r2, #64	; 0x40
 800d8e6:	f004 f888 	bl	80119fa <memset>
 
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d8ea:	4b19      	ldr	r3, [pc, #100]	; (800d950 <mod_mqttPublishData+0x418>)
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	701a      	strb	r2, [r3, #0]
 800d8f0:	e01f      	b.n	800d932 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d8f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8f6:	2b04      	cmp	r3, #4
 800d8f8:	d01b      	beq.n	800d932 <mod_mqttPublishData+0x3fa>
			{
				lsu8_retryCnt++;
 800d8fa:	4b16      	ldr	r3, [pc, #88]	; (800d954 <mod_mqttPublishData+0x41c>)
 800d8fc:	781b      	ldrb	r3, [r3, #0]
 800d8fe:	3301      	adds	r3, #1
 800d900:	b2da      	uxtb	r2, r3
 800d902:	4b14      	ldr	r3, [pc, #80]	; (800d954 <mod_mqttPublishData+0x41c>)
 800d904:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d906:	4b13      	ldr	r3, [pc, #76]	; (800d954 <mod_mqttPublishData+0x41c>)
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	2b02      	cmp	r3, #2
 800d90c:	d803      	bhi.n	800d916 <mod_mqttPublishData+0x3de>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d90e:	2304      	movs	r3, #4
 800d910:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d914:	e009      	b.n	800d92a <mod_mqttPublishData+0x3f2>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d916:	4b0f      	ldr	r3, [pc, #60]	; (800d954 <mod_mqttPublishData+0x41c>)
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b03      	cmp	r3, #3
 800d91c:	d905      	bls.n	800d92a <mod_mqttPublishData+0x3f2>
				{
					lsu8_retryCnt = 0;
 800d91e:	4b0d      	ldr	r3, [pc, #52]	; (800d954 <mod_mqttPublishData+0x41c>)
 800d920:	2200      	movs	r2, #0
 800d922:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d924:	2306      	movs	r3, #6
 800d926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d92a:	4b09      	ldr	r3, [pc, #36]	; (800d950 <mod_mqttPublishData+0x418>)
 800d92c:	2200      	movs	r2, #0
 800d92e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800d930:	e004      	b.n	800d93c <mod_mqttPublishData+0x404>
 800d932:	e003      	b.n	800d93c <mod_mqttPublishData+0x404>
 
		default:
			len_retStatus = E_RET_SUCCESS;
 800d934:	2300      	movs	r3, #0
 800d936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 800d93a:	bf00      	nop
	}
 
	return len_retStatus;
 800d93c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d940:	4618      	mov	r0, r3
 800d942:	3764      	adds	r7, #100	; 0x64
 800d944:	46bd      	mov	sp, r7
 800d946:	bd90      	pop	{r4, r7, pc}
 800d948:	1fff4764 	.word	0x1fff4764
 800d94c:	1fff46c4 	.word	0x1fff46c4
 800d950:	1fff476c 	.word	0x1fff476c
 800d954:	1fff4784 	.word	0x1fff4784

0800d958 <mod_getCurrentTime>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t mod_getCurrentTime(uint8_t *lu8p_data)
{
 800d958:	b4b0      	push	{r4, r5, r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
	uint8_t lu8_ret = 0;
 800d960:	2300      	movs	r3, #0
 800d962:	73fb      	strb	r3, [r7, #15]

	if (NULL != lu8p_data)
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d00c      	beq.n	800d984 <mod_getCurrentTime+0x2c>
	{
		memcpy(lu8p_data, gu8_dataTime, TIME_SIZE);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	4a08      	ldr	r2, [pc, #32]	; (800d990 <mod_getCurrentTime+0x38>)
 800d96e:	461d      	mov	r5, r3
 800d970:	4614      	mov	r4, r2
 800d972:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d974:	6028      	str	r0, [r5, #0]
 800d976:	6069      	str	r1, [r5, #4]
 800d978:	60aa      	str	r2, [r5, #8]
 800d97a:	60eb      	str	r3, [r5, #12]
 800d97c:	6820      	ldr	r0, [r4, #0]
 800d97e:	6128      	str	r0, [r5, #16]
		lu8_ret = TIME_SIZE;
 800d980:	2314      	movs	r3, #20
 800d982:	73fb      	strb	r3, [r7, #15]
	}

	return lu8_ret;
 800d984:	7bfb      	ldrb	r3, [r7, #15]
}
 800d986:	4618      	mov	r0, r3
 800d988:	3714      	adds	r7, #20
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bcb0      	pop	{r4, r5, r7}
 800d98e:	4770      	bx	lr
 800d990:	1fff4750 	.word	0x1fff4750

0800d994 <mod_mqttSslMode>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslMode(uint8_t *lu8p_param)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b084      	sub	sp, #16
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d99c:	2304      	movs	r3, #4
 800d99e:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CFG, lu8p_param);
 800d9a0:	2011      	movs	r0, #17
 800d9a2:	6879      	ldr	r1, [r7, #4]
 800d9a4:	f7fe fad4 	bl	800bf50 <mod_sendCmdGetRsp>
 800d9a8:	4603      	mov	r3, r0
 800d9aa:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800d9ac:	7bfb      	ldrb	r3, [r7, #15]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d105      	bne.n	800d9be <mod_mqttSslMode+0x2a>
	{
		lsu8_retryCnt = 0;
 800d9b2:	4b11      	ldr	r3, [pc, #68]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9b4:	2200      	movs	r2, #0
 800d9b6:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	73fb      	strb	r3, [r7, #15]
 800d9bc:	e016      	b.n	800d9ec <mod_mqttSslMode+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d9be:	7bfb      	ldrb	r3, [r7, #15]
 800d9c0:	2b04      	cmp	r3, #4
 800d9c2:	d013      	beq.n	800d9ec <mod_mqttSslMode+0x58>
	{
		lsu8_retryCnt++;
 800d9c4:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9c6:	781b      	ldrb	r3, [r3, #0]
 800d9c8:	3301      	adds	r3, #1
 800d9ca:	b2da      	uxtb	r2, r3
 800d9cc:	4b0a      	ldr	r3, [pc, #40]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9ce:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d9d0:	4b09      	ldr	r3, [pc, #36]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	2b02      	cmp	r3, #2
 800d9d6:	d802      	bhi.n	800d9de <mod_mqttSslMode+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d9d8:	2304      	movs	r3, #4
 800d9da:	73fb      	strb	r3, [r7, #15]
 800d9dc:	e006      	b.n	800d9ec <mod_mqttSslMode+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d9de:	4b06      	ldr	r3, [pc, #24]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d902      	bls.n	800d9ec <mod_mqttSslMode+0x58>
		{
			lsu8_retryCnt = 0;
 800d9e6:	4b04      	ldr	r3, [pc, #16]	; (800d9f8 <mod_mqttSslMode+0x64>)
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3710      	adds	r7, #16
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}
 800d9f6:	bf00      	nop
 800d9f8:	1fff4785 	.word	0x1fff4785

0800d9fc <mod_mqttSslConfgi>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslConfgi(uint8_t *lu8p_param)
{
 800d9fc:	b580      	push	{r7, lr}
 800d9fe:	b084      	sub	sp, #16
 800da00:	af00      	add	r7, sp, #0
 800da02:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800da04:	2304      	movs	r3, #4
 800da06:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SSL_CFG, lu8p_param);
 800da08:	2012      	movs	r0, #18
 800da0a:	6879      	ldr	r1, [r7, #4]
 800da0c:	f7fe faa0 	bl	800bf50 <mod_sendCmdGetRsp>
 800da10:	4603      	mov	r3, r0
 800da12:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800da14:	7bfb      	ldrb	r3, [r7, #15]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d105      	bne.n	800da26 <mod_mqttSslConfgi+0x2a>
	{
		lsu8_retryCnt = 0;
 800da1a:	4b11      	ldr	r3, [pc, #68]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da1c:	2200      	movs	r2, #0
 800da1e:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800da20:	2300      	movs	r3, #0
 800da22:	73fb      	strb	r3, [r7, #15]
 800da24:	e016      	b.n	800da54 <mod_mqttSslConfgi+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800da26:	7bfb      	ldrb	r3, [r7, #15]
 800da28:	2b04      	cmp	r3, #4
 800da2a:	d013      	beq.n	800da54 <mod_mqttSslConfgi+0x58>
	{
		lsu8_retryCnt++;
 800da2c:	4b0c      	ldr	r3, [pc, #48]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da2e:	781b      	ldrb	r3, [r3, #0]
 800da30:	3301      	adds	r3, #1
 800da32:	b2da      	uxtb	r2, r3
 800da34:	4b0a      	ldr	r3, [pc, #40]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da36:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800da38:	4b09      	ldr	r3, [pc, #36]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d802      	bhi.n	800da46 <mod_mqttSslConfgi+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800da40:	2304      	movs	r3, #4
 800da42:	73fb      	strb	r3, [r7, #15]
 800da44:	e006      	b.n	800da54 <mod_mqttSslConfgi+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800da46:	4b06      	ldr	r3, [pc, #24]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da48:	781b      	ldrb	r3, [r3, #0]
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d902      	bls.n	800da54 <mod_mqttSslConfgi+0x58>
		{
			lsu8_retryCnt = 0;
 800da4e:	4b04      	ldr	r3, [pc, #16]	; (800da60 <mod_mqttSslConfgi+0x64>)
 800da50:	2200      	movs	r2, #0
 800da52:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800da54:	7bfb      	ldrb	r3, [r7, #15]
}
 800da56:	4618      	mov	r0, r3
 800da58:	3710      	adds	r7, #16
 800da5a:	46bd      	mov	sp, r7
 800da5c:	bd80      	pop	{r7, pc}
 800da5e:	bf00      	nop
 800da60:	1fff4786 	.word	0x1fff4786

0800da64 <mod_mqttSslCertUpload>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertUpload(en_sslFile_t len_sslFile)
{
 800da64:	b590      	push	{r4, r7, lr}
 800da66:	b093      	sub	sp, #76	; 0x4c
 800da68:	af00      	add	r7, sp, #0
 800da6a:	4603      	mov	r3, r0
 800da6c:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800da6e:	2304      	movs	r3, #4
 800da70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[50] = { 0 };
 800da74:	f107 0308 	add.w	r3, r7, #8
 800da78:	2200      	movs	r2, #0
 800da7a:	601a      	str	r2, [r3, #0]
 800da7c:	3304      	adds	r3, #4
 800da7e:	2200      	movs	r2, #0
 800da80:	601a      	str	r2, [r3, #0]
 800da82:	3304      	adds	r3, #4
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
 800da88:	3304      	adds	r3, #4
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]
 800da8e:	3304      	adds	r3, #4
 800da90:	2200      	movs	r2, #0
 800da92:	601a      	str	r2, [r3, #0]
 800da94:	3304      	adds	r3, #4
 800da96:	2200      	movs	r2, #0
 800da98:	601a      	str	r2, [r3, #0]
 800da9a:	3304      	adds	r3, #4
 800da9c:	2200      	movs	r2, #0
 800da9e:	601a      	str	r2, [r3, #0]
 800daa0:	3304      	adds	r3, #4
 800daa2:	2200      	movs	r2, #0
 800daa4:	601a      	str	r2, [r3, #0]
 800daa6:	3304      	adds	r3, #4
 800daa8:	2200      	movs	r2, #0
 800daaa:	601a      	str	r2, [r3, #0]
 800daac:	3304      	adds	r3, #4
 800daae:	2200      	movs	r2, #0
 800dab0:	601a      	str	r2, [r3, #0]
 800dab2:	3304      	adds	r3, #4
 800dab4:	2200      	movs	r2, #0
 800dab6:	601a      	str	r2, [r3, #0]
 800dab8:	3304      	adds	r3, #4
 800daba:	2200      	movs	r2, #0
 800dabc:	601a      	str	r2, [r3, #0]
 800dabe:	3304      	adds	r3, #4
 800dac0:	2200      	movs	r2, #0
 800dac2:	801a      	strh	r2, [r3, #0]
 800dac4:	3302      	adds	r3, #2
	static uint8_t *slu32_pos = NULL;
	static uint16_t lu16_totalFileSize = 0;
	uint8_t *lu8p_Ptr = NULL;
 800dac6:	2300      	movs	r3, #0
 800dac8:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *lu8p_saveptr = NULL;
 800daca:	2300      	movs	r3, #0
 800dacc:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (sen_sslFileUpldState)
 800dace:	4b77      	ldr	r3, [pc, #476]	; (800dcac <mod_mqttSslCertUpload+0x248>)
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d003      	beq.n	800dade <mod_mqttSslCertUpload+0x7a>
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	f000 808d 	beq.w	800dbf6 <mod_mqttSslCertUpload+0x192>
				}
			}
		break;

		default:
		break;
 800dadc:	e0e0      	b.n	800dca0 <mod_mqttSslCertUpload+0x23c>

	switch (sen_sslFileUpldState)
	{
		case E_SSL_UPLD_CMD_STATE:

			if(E_CA_CERT_FILE == len_sslFile)
 800dade:	79fb      	ldrb	r3, [r7, #7]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d112      	bne.n	800db0a <mod_mqttSslCertUpload+0xa6>
			{
				slu32_pos = sgu8arr_caCert;
 800dae4:	4b72      	ldr	r3, [pc, #456]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dae6:	4a73      	ldr	r2, [pc, #460]	; (800dcb4 <mod_mqttSslCertUpload+0x250>)
 800dae8:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_caCert);
 800daea:	4b73      	ldr	r3, [pc, #460]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800daec:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800daf0:	801a      	strh	r2, [r3, #0]
				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
 800daf2:	4b71      	ldr	r3, [pc, #452]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	461c      	mov	r4, r3
 800daf8:	f107 0308 	add.w	r3, r7, #8
 800dafc:	4618      	mov	r0, r3
 800dafe:	496f      	ldr	r1, [pc, #444]	; (800dcbc <mod_mqttSslCertUpload+0x258>)
 800db00:	4a6f      	ldr	r2, [pc, #444]	; (800dcc0 <mod_mqttSslCertUpload+0x25c>)
 800db02:	4623      	mov	r3, r4
 800db04:	f004 fa38 	bl	8011f78 <siprintf>
 800db08:	e02a      	b.n	800db60 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CC_CERT_FILE == len_sslFile)
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d112      	bne.n	800db36 <mod_mqttSslCertUpload+0xd2>
			{
				slu32_pos = sgu8arr_ccCert;
 800db10:	4b67      	ldr	r3, [pc, #412]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800db12:	4a6c      	ldr	r2, [pc, #432]	; (800dcc4 <mod_mqttSslCertUpload+0x260>)
 800db14:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
 800db16:	4b68      	ldr	r3, [pc, #416]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800db18:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800db1c:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CC_FILENAME,
 800db1e:	4b66      	ldr	r3, [pc, #408]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800db20:	881b      	ldrh	r3, [r3, #0]
 800db22:	461c      	mov	r4, r3
 800db24:	f107 0308 	add.w	r3, r7, #8
 800db28:	4618      	mov	r0, r3
 800db2a:	4964      	ldr	r1, [pc, #400]	; (800dcbc <mod_mqttSslCertUpload+0x258>)
 800db2c:	4a66      	ldr	r2, [pc, #408]	; (800dcc8 <mod_mqttSslCertUpload+0x264>)
 800db2e:	4623      	mov	r3, r4
 800db30:	f004 fa22 	bl	8011f78 <siprintf>
 800db34:	e014      	b.n	800db60 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CK_CERT_FILE == len_sslFile)
 800db36:	79fb      	ldrb	r3, [r7, #7]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d111      	bne.n	800db60 <mod_mqttSslCertUpload+0xfc>
			{
				slu32_pos = sgu8arr_ckCert;
 800db3c:	4b5c      	ldr	r3, [pc, #368]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800db3e:	4a63      	ldr	r2, [pc, #396]	; (800dccc <mod_mqttSslCertUpload+0x268>)
 800db40:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
 800db42:	4b5d      	ldr	r3, [pc, #372]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800db44:	f240 628b 	movw	r2, #1675	; 0x68b
 800db48:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CK_FILENAME,
 800db4a:	4b5b      	ldr	r3, [pc, #364]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800db4c:	881b      	ldrh	r3, [r3, #0]
 800db4e:	461c      	mov	r4, r3
 800db50:	f107 0308 	add.w	r3, r7, #8
 800db54:	4618      	mov	r0, r3
 800db56:	4959      	ldr	r1, [pc, #356]	; (800dcbc <mod_mqttSslCertUpload+0x258>)
 800db58:	4a5d      	ldr	r2, [pc, #372]	; (800dcd0 <mod_mqttSslCertUpload+0x26c>)
 800db5a:	4623      	mov	r3, r4
 800db5c:	f004 fa0c 	bl	8011f78 <siprintf>
						lu16_totalFileSize);
			}

			len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_UPLOAD_CMD,
 800db60:	f107 0308 	add.w	r3, r7, #8
 800db64:	201a      	movs	r0, #26
 800db66:	4619      	mov	r1, r3
 800db68:	f7fe f9f2 	bl	800bf50 <mod_sendCmdGetRsp>
 800db6c:	4603      	mov	r3, r0
 800db6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					(uint8_t *) lu8arr_param);

			if (E_RET_SUCCESS == len_retStatus)
 800db72:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db76:	2b00      	cmp	r3, #0
 800db78:	d12e      	bne.n	800dbd8 <mod_mqttSslCertUpload+0x174>
			{
				lu8p_Ptr =
 800db7a:	4856      	ldr	r0, [pc, #344]	; (800dcd4 <mod_mqttSslCertUpload+0x270>)
 800db7c:	4956      	ldr	r1, [pc, #344]	; (800dcd8 <mod_mqttSslCertUpload+0x274>)
 800db7e:	f004 fa5e 	bl	801203e <strstr>
 800db82:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_FILE_UPLOAD_CMD].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800db84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db86:	2b00      	cmp	r3, #0
 800db88:	d022      	beq.n	800dbd0 <mod_mqttSslCertUpload+0x16c>
				{
					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800db8a:	4854      	ldr	r0, [pc, #336]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800db8c:	2100      	movs	r1, #0
 800db8e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800db92:	f003 ff32 	bl	80119fa <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if (lu16_totalFileSize > 1024)
 800db96:	4b48      	ldr	r3, [pc, #288]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800db98:	881b      	ldrh	r3, [r3, #0]
 800db9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800db9e:	d908      	bls.n	800dbb2 <mod_mqttSslCertUpload+0x14e>
					{
						strncpy(
 800dba0:	4b43      	ldr	r3, [pc, #268]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	484d      	ldr	r0, [pc, #308]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800dba6:	4619      	mov	r1, r3
 800dba8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dbac:	f004 fa35 	bl	801201a <strncpy>
 800dbb0:	e007      	b.n	800dbc2 <mod_mqttSslCertUpload+0x15e>
								(char *) slu32_pos, 1024);
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[1024] = '\0';
					}
					else
					{
						strncpy(
 800dbb2:	4b3f      	ldr	r3, [pc, #252]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dbb4:	681b      	ldr	r3, [r3, #0]
 800dbb6:	4849      	ldr	r0, [pc, #292]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800dbb8:	4619      	mov	r1, r3
 800dbba:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800dbbe:	f004 fa2c 	bl	801201a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, sizeof(sgu8arr_caCert));
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[sizeof(sgu8arr_caCert)+1] = '\0';
					}

					sen_sslFileUpldState = E_SSL_UPLD_FILE_CONTENT_STATE;
 800dbc2:	4b3a      	ldr	r3, [pc, #232]	; (800dcac <mod_mqttSslCertUpload+0x248>)
 800dbc4:	2201      	movs	r2, #1
 800dbc6:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800dbc8:	2304      	movs	r3, #4
 800dbca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbce:	e011      	b.n	800dbf4 <mod_mqttSslCertUpload+0x190>
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800dbd0:	2302      	movs	r3, #2
 800dbd2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800dbd6:	e063      	b.n	800dca0 <mod_mqttSslCertUpload+0x23c>
				else
				{
					len_retStatus = E_RET_FAILED;
				}
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800dbd8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dbdc:	2b0b      	cmp	r3, #11
 800dbde:	d109      	bne.n	800dbf4 <mod_mqttSslCertUpload+0x190>
			{
				if(407 == sgu16_cmeError)	//File already exists
 800dbe0:	4b3f      	ldr	r3, [pc, #252]	; (800dce0 <mod_mqttSslCertUpload+0x27c>)
 800dbe2:	881b      	ldrh	r3, [r3, #0]
 800dbe4:	f240 1297 	movw	r2, #407	; 0x197
 800dbe8:	4293      	cmp	r3, r2
 800dbea:	d103      	bne.n	800dbf4 <mod_mqttSslCertUpload+0x190>
				{
					len_retStatus = E_RET_SUCCESS;
 800dbec:	2300      	movs	r3, #0
 800dbee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800dbf2:	e055      	b.n	800dca0 <mod_mqttSslCertUpload+0x23c>
 800dbf4:	e054      	b.n	800dca0 <mod_mqttSslCertUpload+0x23c>

		case E_SSL_UPLD_FILE_CONTENT_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_UPLOAD_FILE_CONTENT, NULL);
 800dbf6:	201b      	movs	r0, #27
 800dbf8:	2100      	movs	r1, #0
 800dbfa:	f7fe f9a9 	bl	800bf50 <mod_sendCmdGetRsp>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (E_RET_SUCCESS == len_retStatus)
 800dc04:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d148      	bne.n	800dc9e <mod_mqttSslCertUpload+0x23a>
			{
				lu8p_Ptr =
 800dc0c:	4831      	ldr	r0, [pc, #196]	; (800dcd4 <mod_mqttSslCertUpload+0x270>)
 800dc0e:	4935      	ldr	r1, [pc, #212]	; (800dce4 <mod_mqttSslCertUpload+0x280>)
 800dc10:	f004 fa15 	bl	801203e <strstr>
 800dc14:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_otherRspString);

				if (NULL != lu8p_Ptr)
 800dc16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d031      	beq.n	800dc80 <mod_mqttSslCertUpload+0x21c>
				{
					lu16_totalFileSize -= 1024;
 800dc1c:	4b26      	ldr	r3, [pc, #152]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800dc24:	b29a      	uxth	r2, r3
 800dc26:	4b24      	ldr	r3, [pc, #144]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800dc28:	801a      	strh	r2, [r3, #0]
					slu32_pos += 1024;
 800dc2a:	4b21      	ldr	r3, [pc, #132]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800dc32:	4a1f      	ldr	r2, [pc, #124]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dc34:	6013      	str	r3, [r2, #0]

					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800dc36:	4829      	ldr	r0, [pc, #164]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800dc38:	2100      	movs	r1, #0
 800dc3a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800dc3e:	f003 fedc 	bl	80119fa <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if(lu16_totalFileSize > 1024)
 800dc42:	4b1d      	ldr	r3, [pc, #116]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dc4a:	d908      	bls.n	800dc5e <mod_mqttSslCertUpload+0x1fa>
					{
						strncpy(
 800dc4c:	4b18      	ldr	r3, [pc, #96]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	4822      	ldr	r0, [pc, #136]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800dc52:	4619      	mov	r1, r3
 800dc54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dc58:	f004 f9df 	bl	801201a <strncpy>
 800dc5c:	e008      	b.n	800dc70 <mod_mqttSslCertUpload+0x20c>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, 1024);
					}
					else
					{
						strncpy(
 800dc5e:	4b14      	ldr	r3, [pc, #80]	; (800dcb0 <mod_mqttSslCertUpload+0x24c>)
 800dc60:	681a      	ldr	r2, [r3, #0]
 800dc62:	4b15      	ldr	r3, [pc, #84]	; (800dcb8 <mod_mqttSslCertUpload+0x254>)
 800dc64:	881b      	ldrh	r3, [r3, #0]
 800dc66:	481d      	ldr	r0, [pc, #116]	; (800dcdc <mod_mqttSslCertUpload+0x278>)
 800dc68:	4611      	mov	r1, r2
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	f004 f9d5 	bl	801201a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, lu16_totalFileSize);
					}
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800dc70:	4818      	ldr	r0, [pc, #96]	; (800dcd4 <mod_mqttSslCertUpload+0x270>)
 800dc72:	2100      	movs	r1, #0
 800dc74:	2240      	movs	r2, #64	; 0x40
 800dc76:	f003 fec0 	bl	80119fa <memset>
					len_retStatus = E_RET_INPROGRESS;
 800dc7a:	2304      	movs	r3, #4
 800dc7c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}

				lu8p_Ptr =
 800dc80:	4814      	ldr	r0, [pc, #80]	; (800dcd4 <mod_mqttSslCertUpload+0x270>)
 800dc82:	4919      	ldr	r1, [pc, #100]	; (800dce8 <mod_mqttSslCertUpload+0x284>)
 800dc84:	f004 f9db 	bl	801203e <strstr>
 800dc88:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800dc8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d006      	beq.n	800dc9e <mod_mqttSslCertUpload+0x23a>
				{
					sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
 800dc90:	4b06      	ldr	r3, [pc, #24]	; (800dcac <mod_mqttSslCertUpload+0x248>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_SUCCESS;
 800dc96:	2300      	movs	r3, #0
 800dc98:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		break;
 800dc9c:	e7ff      	b.n	800dc9e <mod_mqttSslCertUpload+0x23a>
 800dc9e:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800dca0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	374c      	adds	r7, #76	; 0x4c
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd90      	pop	{r4, r7, pc}
 800dcac:	1fff476e 	.word	0x1fff476e
 800dcb0:	1fff4788 	.word	0x1fff4788
 800dcb4:	1ffe94e4 	.word	0x1ffe94e4
 800dcb8:	1fff478c 	.word	0x1fff478c
 800dcbc:	080141c4 	.word	0x080141c4
 800dcc0:	080141d4 	.word	0x080141d4
 800dcc4:	1ffe9988 	.word	0x1ffe9988
 800dcc8:	080141e4 	.word	0x080141e4
 800dccc:	1ffe9e4c 	.word	0x1ffe9e4c
 800dcd0:	080141f8 	.word	0x080141f8
 800dcd4:	1fff46c4 	.word	0x1fff46c4
 800dcd8:	1fff2198 	.word	0x1fff2198
 800dcdc:	1fff2234 	.word	0x1fff2234
 800dce0:	1fff4766 	.word	0x1fff4766
 800dce4:	1fff266e 	.word	0x1fff266e
 800dce8:	1fff263c 	.word	0x1fff263c

0800dcec <mod_mqttSslCertDelete>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertDelete(en_sslFile_t len_sslFile)
{
 800dcec:	b580      	push	{r7, lr}
 800dcee:	b090      	sub	sp, #64	; 0x40
 800dcf0:	af00      	add	r7, sp, #0
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dcf6:	2304      	movs	r3, #4
 800dcf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t lu8arr_param[50] = { 0 };
 800dcfc:	f107 030c 	add.w	r3, r7, #12
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	3304      	adds	r3, #4
 800dd06:	2200      	movs	r2, #0
 800dd08:	601a      	str	r2, [r3, #0]
 800dd0a:	3304      	adds	r3, #4
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	601a      	str	r2, [r3, #0]
 800dd10:	3304      	adds	r3, #4
 800dd12:	2200      	movs	r2, #0
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	3304      	adds	r3, #4
 800dd18:	2200      	movs	r2, #0
 800dd1a:	601a      	str	r2, [r3, #0]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	2200      	movs	r2, #0
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	3304      	adds	r3, #4
 800dd24:	2200      	movs	r2, #0
 800dd26:	601a      	str	r2, [r3, #0]
 800dd28:	3304      	adds	r3, #4
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	601a      	str	r2, [r3, #0]
 800dd2e:	3304      	adds	r3, #4
 800dd30:	2200      	movs	r2, #0
 800dd32:	601a      	str	r2, [r3, #0]
 800dd34:	3304      	adds	r3, #4
 800dd36:	2200      	movs	r2, #0
 800dd38:	601a      	str	r2, [r3, #0]
 800dd3a:	3304      	adds	r3, #4
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	601a      	str	r2, [r3, #0]
 800dd40:	3304      	adds	r3, #4
 800dd42:	2200      	movs	r2, #0
 800dd44:	601a      	str	r2, [r3, #0]
 800dd46:	3304      	adds	r3, #4
 800dd48:	2200      	movs	r2, #0
 800dd4a:	801a      	strh	r2, [r3, #0]
 800dd4c:	3302      	adds	r3, #2

	if (E_CA_CERT_FILE == len_sslFile)
 800dd4e:	79fb      	ldrb	r3, [r7, #7]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d107      	bne.n	800dd64 <mod_mqttSslCertDelete+0x78>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CA_FILENAME);
 800dd54:	f107 030c 	add.w	r3, r7, #12
 800dd58:	4618      	mov	r0, r3
 800dd5a:	491c      	ldr	r1, [pc, #112]	; (800ddcc <mod_mqttSslCertDelete+0xe0>)
 800dd5c:	4a1c      	ldr	r2, [pc, #112]	; (800ddd0 <mod_mqttSslCertDelete+0xe4>)
 800dd5e:	f004 f90b 	bl	8011f78 <siprintf>
 800dd62:	e014      	b.n	800dd8e <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CC_CERT_FILE == len_sslFile)
 800dd64:	79fb      	ldrb	r3, [r7, #7]
 800dd66:	2b01      	cmp	r3, #1
 800dd68:	d107      	bne.n	800dd7a <mod_mqttSslCertDelete+0x8e>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CC_FILENAME);
 800dd6a:	f107 030c 	add.w	r3, r7, #12
 800dd6e:	4618      	mov	r0, r3
 800dd70:	4916      	ldr	r1, [pc, #88]	; (800ddcc <mod_mqttSslCertDelete+0xe0>)
 800dd72:	4a18      	ldr	r2, [pc, #96]	; (800ddd4 <mod_mqttSslCertDelete+0xe8>)
 800dd74:	f004 f900 	bl	8011f78 <siprintf>
 800dd78:	e009      	b.n	800dd8e <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CK_CERT_FILE == len_sslFile)
 800dd7a:	79fb      	ldrb	r3, [r7, #7]
 800dd7c:	2b02      	cmp	r3, #2
 800dd7e:	d106      	bne.n	800dd8e <mod_mqttSslCertDelete+0xa2>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CK_FILENAME);
 800dd80:	f107 030c 	add.w	r3, r7, #12
 800dd84:	4618      	mov	r0, r3
 800dd86:	4911      	ldr	r1, [pc, #68]	; (800ddcc <mod_mqttSslCertDelete+0xe0>)
 800dd88:	4a13      	ldr	r2, [pc, #76]	; (800ddd8 <mod_mqttSslCertDelete+0xec>)
 800dd8a:	f004 f8f5 	bl	8011f78 <siprintf>
	}

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_DELETE, (uint8_t *) lu8arr_param);
 800dd8e:	f107 030c 	add.w	r3, r7, #12
 800dd92:	201c      	movs	r0, #28
 800dd94:	4619      	mov	r1, r3
 800dd96:	f7fe f8db 	bl	800bf50 <mod_sendCmdGetRsp>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800dda0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d103      	bne.n	800ddb0 <mod_mqttSslCertDelete+0xc4>
	{
		len_retStatus = E_RET_SUCCESS;
 800dda8:	2300      	movs	r3, #0
 800ddaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ddae:	e006      	b.n	800ddbe <mod_mqttSslCertDelete+0xd2>
	}
	else if(E_RET_INPROGRESS != len_retStatus)
 800ddb0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ddb4:	2b04      	cmp	r3, #4
 800ddb6:	d002      	beq.n	800ddbe <mod_mqttSslCertDelete+0xd2>
	{
		len_retStatus = E_RET_FAILED;
 800ddb8:	2302      	movs	r3, #2
 800ddba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	return len_retStatus;
 800ddbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ddc2:	4618      	mov	r0, r3
 800ddc4:	3740      	adds	r7, #64	; 0x40
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	08014208 	.word	0x08014208
 800ddd0:	080141d4 	.word	0x080141d4
 800ddd4:	080141e4 	.word	0x080141e4
 800ddd8:	080141f8 	.word	0x080141f8

0800dddc <mod_mqttOpen>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpen(void)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b092      	sub	sp, #72	; 0x48
 800dde0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dde2:	2304      	movs	r3, #4
 800dde4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[57] = { 0 };
 800dde8:	1d3b      	adds	r3, r7, #4
 800ddea:	2239      	movs	r2, #57	; 0x39
 800ddec:	4618      	mov	r0, r3
 800ddee:	2100      	movs	r1, #0
 800ddf0:	f003 fe03 	bl	80119fa <memset>
	uint8_t *lu8p_Ptr = NULL;
 800ddf4:	2300      	movs	r3, #0
 800ddf6:	643b      	str	r3, [r7, #64]	; 0x40
	short ls_result = E_MQTT_OPN_NONE;
 800ddf8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ddfc:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	for(lu8_clientIdx = 0; lu8_clientIdx < 6; lu8_clientIdx++)
//	{
	sprintf((char *) lu8arr_param, "%d,%s", sgu8_mqttClientId, MQTT_OPEN_HOST_PORT);
 800ddfe:	4b55      	ldr	r3, [pc, #340]	; (800df54 <mod_mqttOpen+0x178>)
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	461a      	mov	r2, r3
 800de04:	1d3b      	adds	r3, r7, #4
 800de06:	4618      	mov	r0, r3
 800de08:	4953      	ldr	r1, [pc, #332]	; (800df58 <mod_mqttOpen+0x17c>)
 800de0a:	4b54      	ldr	r3, [pc, #336]	; (800df5c <mod_mqttOpen+0x180>)
 800de0c:	f004 f8b4 	bl	8011f78 <siprintf>
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_OPEN, lu8arr_param);
 800de10:	1d3b      	adds	r3, r7, #4
 800de12:	2013      	movs	r0, #19
 800de14:	4619      	mov	r1, r3
 800de16:	f7fe f89b 	bl	800bf50 <mod_sendCmdGetRsp>
 800de1a:	4603      	mov	r3, r0
 800de1c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (E_RET_SUCCESS == len_retStatus)
 800de20:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de24:	2b00      	cmp	r3, #0
 800de26:	d176      	bne.n	800df16 <mod_mqttOpen+0x13a>
	{
		lsu8_retryCnt = 0;
 800de28:	4b4d      	ldr	r3, [pc, #308]	; (800df60 <mod_mqttOpen+0x184>)
 800de2a:	2200      	movs	r2, #0
 800de2c:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800de2e:	484d      	ldr	r0, [pc, #308]	; (800df64 <mod_mqttOpen+0x188>)
 800de30:	494d      	ldr	r1, [pc, #308]	; (800df68 <mod_mqttOpen+0x18c>)
 800de32:	f004 f904 	bl	801203e <strstr>
 800de36:	6438      	str	r0, [r7, #64]	; 0x40
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_OPEN].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800de38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 8084 	beq.w	800df48 <mod_mqttOpen+0x16c>
		{
			lu8p_Ptr += 12;
 800de40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de42:	330c      	adds	r3, #12
 800de44:	643b      	str	r3, [r7, #64]	; 0x40
			ls_result = atoi((char *) lu8p_Ptr);
 800de46:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800de48:	f003 fd9c 	bl	8011984 <atoi>
 800de4c:	4603      	mov	r3, r0
 800de4e:	87fb      	strh	r3, [r7, #62]	; 0x3e

			if (E_NW_OPENED_SUCCESSFULLY == ls_result)	//Network opened successfully
 800de50:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800de54:	2b00      	cmp	r3, #0
 800de56:	d106      	bne.n	800de66 <mod_mqttOpen+0x8a>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_OPENED_SUCCESSFULLY;
 800de58:	4b44      	ldr	r3, [pc, #272]	; (800df6c <mod_mqttOpen+0x190>)
 800de5a:	2200      	movs	r2, #0
 800de5c:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_SUCCESS;
 800de5e:	2300      	movs	r3, #0
 800de60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800de64:	e070      	b.n	800df48 <mod_mqttOpen+0x16c>
				//break;
			}
			else if(E_WRONG_PARAMETER == ls_result)	//Wrong parameter
 800de66:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800de6a:	2b01      	cmp	r3, #1
 800de6c:	d106      	bne.n	800de7c <mod_mqttOpen+0xa0>
			{
				/* set VCU DTC and change the return status */
				gst_deviceStatus.men_mqttOpenErrorCodes = E_WRONG_PARAMETER;
 800de6e:	4b3f      	ldr	r3, [pc, #252]	; (800df6c <mod_mqttOpen+0x190>)
 800de70:	2201      	movs	r2, #1
 800de72:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800de74:	2302      	movs	r3, #2
 800de76:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800de7a:	e065      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
			else if(E_MQTT_ID_OCCUPIED == ls_result)	//MQTT identifier is occupied
 800de7c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800de80:	2b02      	cmp	r3, #2
 800de82:	d117      	bne.n	800deb4 <mod_mqttOpen+0xd8>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_MQTT_ID_OCCUPIED;
 800de84:	4b39      	ldr	r3, [pc, #228]	; (800df6c <mod_mqttOpen+0x190>)
 800de86:	2202      	movs	r2, #2
 800de88:	70da      	strb	r2, [r3, #3]
				sgu8_mqttClientId++;
 800de8a:	4b32      	ldr	r3, [pc, #200]	; (800df54 <mod_mqttOpen+0x178>)
 800de8c:	781b      	ldrb	r3, [r3, #0]
 800de8e:	3301      	adds	r3, #1
 800de90:	b2da      	uxtb	r2, r3
 800de92:	4b30      	ldr	r3, [pc, #192]	; (800df54 <mod_mqttOpen+0x178>)
 800de94:	701a      	strb	r2, [r3, #0]
				if (sgu8_mqttClientId > 5)
 800de96:	4b2f      	ldr	r3, [pc, #188]	; (800df54 <mod_mqttOpen+0x178>)
 800de98:	781b      	ldrb	r3, [r3, #0]
 800de9a:	2b05      	cmp	r3, #5
 800de9c:	d906      	bls.n	800deac <mod_mqttOpen+0xd0>
				{
					len_retStatus = E_RET_FAILED;
 800de9e:	2302      	movs	r3, #2
 800dea0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sgu8_mqttClientId = 0;
 800dea4:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <mod_mqttOpen+0x178>)
 800dea6:	2200      	movs	r2, #0
 800dea8:	701a      	strb	r2, [r3, #0]
 800deaa:	e04d      	b.n	800df48 <mod_mqttOpen+0x16c>
				}
				else
				{
					len_retStatus = E_RET_FAILED_TRY_DIFF_ID;
 800deac:	2301      	movs	r3, #1
 800deae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800deb2:	e049      	b.n	800df48 <mod_mqttOpen+0x16c>
				}
			}
			else if(E_FAILED_TO_OPEN_NW == ls_result)	//-1 -> Failed to open network
 800deb4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800deb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800debc:	d106      	bne.n	800decc <mod_mqttOpen+0xf0>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_OPEN_NW;
 800debe:	4b2b      	ldr	r3, [pc, #172]	; (800df6c <mod_mqttOpen+0x190>)
 800dec0:	22ff      	movs	r2, #255	; 0xff
 800dec2:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800dec4:	2302      	movs	r3, #2
 800dec6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800deca:	e03d      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_ACTIVATE_PDP == ls_result)	//3  -> Failed to activate PDP
 800decc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800ded0:	2b03      	cmp	r3, #3
 800ded2:	d106      	bne.n	800dee2 <mod_mqttOpen+0x106>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_ACTIVATE_PDP;
 800ded4:	4b25      	ldr	r3, [pc, #148]	; (800df6c <mod_mqttOpen+0x190>)
 800ded6:	2203      	movs	r2, #3
 800ded8:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800deda:	2302      	movs	r3, #2
 800dedc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dee0:	e032      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_PARSE_DOMAIN_NAME == ls_result)	//Failed to parse domain name
 800dee2:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dee6:	2b04      	cmp	r3, #4
 800dee8:	d106      	bne.n	800def8 <mod_mqttOpen+0x11c>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_PARSE_DOMAIN_NAME;
 800deea:	4b20      	ldr	r3, [pc, #128]	; (800df6c <mod_mqttOpen+0x190>)
 800deec:	2204      	movs	r2, #4
 800deee:	70da      	strb	r2, [r3, #3]
				/* set VCU DTC and change the return status */
				len_retStatus = E_RET_FAILED;
 800def0:	2302      	movs	r3, #2
 800def2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800def6:	e027      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
			else if(E_NW_CONNECTION_ERROR == ls_result)	//5  -> Network connection error
 800def8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800defc:	2b05      	cmp	r3, #5
 800defe:	d106      	bne.n	800df0e <mod_mqttOpen+0x132>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_CONNECTION_ERROR;
 800df00:	4b1a      	ldr	r3, [pc, #104]	; (800df6c <mod_mqttOpen+0x190>)
 800df02:	2205      	movs	r2, #5
 800df04:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_CONN_ERROR;
 800df06:	230d      	movs	r3, #13
 800df08:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800df0c:	e01c      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
			else	//other return values
			{
				len_retStatus = E_RET_INPROGRESS;
 800df0e:	2304      	movs	r3, #4
 800df10:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800df14:	e018      	b.n	800df48 <mod_mqttOpen+0x16c>
			}
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800df16:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800df1a:	2b04      	cmp	r3, #4
 800df1c:	d014      	beq.n	800df48 <mod_mqttOpen+0x16c>
	{
		lsu8_retryCnt++;
 800df1e:	4b10      	ldr	r3, [pc, #64]	; (800df60 <mod_mqttOpen+0x184>)
 800df20:	781b      	ldrb	r3, [r3, #0]
 800df22:	3301      	adds	r3, #1
 800df24:	b2da      	uxtb	r2, r3
 800df26:	4b0e      	ldr	r3, [pc, #56]	; (800df60 <mod_mqttOpen+0x184>)
 800df28:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800df2a:	4b0d      	ldr	r3, [pc, #52]	; (800df60 <mod_mqttOpen+0x184>)
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b02      	cmp	r3, #2
 800df30:	d803      	bhi.n	800df3a <mod_mqttOpen+0x15e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800df32:	2304      	movs	r3, #4
 800df34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800df38:	e006      	b.n	800df48 <mod_mqttOpen+0x16c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800df3a:	4b09      	ldr	r3, [pc, #36]	; (800df60 <mod_mqttOpen+0x184>)
 800df3c:	781b      	ldrb	r3, [r3, #0]
 800df3e:	2b03      	cmp	r3, #3
 800df40:	d902      	bls.n	800df48 <mod_mqttOpen+0x16c>
		{
			lsu8_retryCnt = 0;
 800df42:	4b07      	ldr	r3, [pc, #28]	; (800df60 <mod_mqttOpen+0x184>)
 800df44:	2200      	movs	r2, #0
 800df46:	701a      	strb	r2, [r3, #0]
		}
	}
//	}
	return len_retStatus;
 800df48:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3748      	adds	r7, #72	; 0x48
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	1fff4765 	.word	0x1fff4765
 800df58:	08014210 	.word	0x08014210
 800df5c:	08014218 	.word	0x08014218
 800df60:	1fff478e 	.word	0x1fff478e
 800df64:	1fff46c4 	.word	0x1fff46c4
 800df68:	1fff014e 	.word	0x1fff014e
 800df6c:	1ffea4dc 	.word	0x1ffea4dc

0800df70 <mod_mqttOpenConfig>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpenConfig()
{
 800df70:	b5b0      	push	{r4, r5, r7, lr}
 800df72:	b08a      	sub	sp, #40	; 0x28
 800df74:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800df76:	2304      	movs	r3, #4
 800df78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lu8arr_param[34] = { 0 };
 800df7c:	1d3b      	adds	r3, r7, #4
 800df7e:	2200      	movs	r2, #0
 800df80:	601a      	str	r2, [r3, #0]
 800df82:	3304      	adds	r3, #4
 800df84:	2200      	movs	r2, #0
 800df86:	601a      	str	r2, [r3, #0]
 800df88:	3304      	adds	r3, #4
 800df8a:	2200      	movs	r2, #0
 800df8c:	601a      	str	r2, [r3, #0]
 800df8e:	3304      	adds	r3, #4
 800df90:	2200      	movs	r2, #0
 800df92:	601a      	str	r2, [r3, #0]
 800df94:	3304      	adds	r3, #4
 800df96:	2200      	movs	r2, #0
 800df98:	601a      	str	r2, [r3, #0]
 800df9a:	3304      	adds	r3, #4
 800df9c:	2200      	movs	r2, #0
 800df9e:	601a      	str	r2, [r3, #0]
 800dfa0:	3304      	adds	r3, #4
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	3304      	adds	r3, #4
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	601a      	str	r2, [r3, #0]
 800dfac:	3304      	adds	r3, #4
 800dfae:	2200      	movs	r2, #0
 800dfb0:	801a      	strh	r2, [r3, #0]
 800dfb2:	3302      	adds	r3, #2
	switch (sen_openMqttState)
 800dfb4:	4bc8      	ldr	r3, [pc, #800]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	2b0e      	cmp	r3, #14
 800dfba:	f200 81b5 	bhi.w	800e328 <mod_mqttOpenConfig+0x3b8>
 800dfbe:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <mod_mqttOpenConfig+0x54>)
 800dfc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc4:	0800e001 	.word	0x0800e001
 800dfc8:	0800e025 	.word	0x0800e025
 800dfcc:	0800e049 	.word	0x0800e049
 800dfd0:	0800e06d 	.word	0x0800e06d
 800dfd4:	0800e091 	.word	0x0800e091
 800dfd8:	0800e0b5 	.word	0x0800e0b5
 800dfdc:	0800e0d9 	.word	0x0800e0d9
 800dfe0:	0800e113 	.word	0x0800e113
 800dfe4:	0800e14b 	.word	0x0800e14b
 800dfe8:	0800e185 	.word	0x0800e185
 800dfec:	0800e1bb 	.word	0x0800e1bb
 800dff0:	0800e1f9 	.word	0x0800e1f9
 800dff4:	0800e233 	.word	0x0800e233
 800dff8:	0800e273 	.word	0x0800e273
 800dffc:	0800e2a9 	.word	0x0800e2a9
	{
		case E_MQTT_SSL_UPLD_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CA_CERT_FILE);
 800e000:	2000      	movs	r0, #0
 800e002:	f7ff fd2f 	bl	800da64 <mod_mqttSslCertUpload>
 800e006:	4603      	mov	r3, r0
 800e008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e00c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e010:	2b00      	cmp	r3, #0
 800e012:	d106      	bne.n	800e022 <mod_mqttOpenConfig+0xb2>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e014:	2304      	movs	r3, #4
 800e016:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CC_CERT_STATE;
 800e01a:	4baf      	ldr	r3, [pc, #700]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e01c:	2201      	movs	r2, #1
 800e01e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e020:	e183      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e022:	e182      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CC_CERT_FILE);
 800e024:	2001      	movs	r0, #1
 800e026:	f7ff fd1d 	bl	800da64 <mod_mqttSslCertUpload>
 800e02a:	4603      	mov	r3, r0
 800e02c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e034:	2b00      	cmp	r3, #0
 800e036:	d106      	bne.n	800e046 <mod_mqttOpenConfig+0xd6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e038:	2304      	movs	r3, #4
 800e03a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CK_CERT_STATE;
 800e03e:	4ba6      	ldr	r3, [pc, #664]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e040:	2202      	movs	r2, #2
 800e042:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e044:	e171      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e046:	e170      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CK_CERT_FILE);
 800e048:	2002      	movs	r0, #2
 800e04a:	f7ff fd0b 	bl	800da64 <mod_mqttSslCertUpload>
 800e04e:	4603      	mov	r3, r0
 800e050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e054:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e058:	2b00      	cmp	r3, #0
 800e05a:	d106      	bne.n	800e06a <mod_mqttOpenConfig+0xfa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e05c:	2304      	movs	r3, #4
 800e05e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e062:	4b9d      	ldr	r3, [pc, #628]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e064:	2206      	movs	r2, #6
 800e066:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e068:	e15f      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e06a:	e15e      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CA_CERT_FILE);
 800e06c:	2000      	movs	r0, #0
 800e06e:	f7ff fe3d 	bl	800dcec <mod_mqttSslCertDelete>
 800e072:	4603      	mov	r3, r0
 800e074:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e078:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d106      	bne.n	800e08e <mod_mqttOpenConfig+0x11e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e080:	2304      	movs	r3, #4
 800e082:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CC_CERT_STATE;
 800e086:	4b94      	ldr	r3, [pc, #592]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e088:	2204      	movs	r2, #4
 800e08a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e08c:	e14d      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e08e:	e14c      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CC_CERT_FILE);
 800e090:	2001      	movs	r0, #1
 800e092:	f7ff fe2b 	bl	800dcec <mod_mqttSslCertDelete>
 800e096:	4603      	mov	r3, r0
 800e098:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e09c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d106      	bne.n	800e0b2 <mod_mqttOpenConfig+0x142>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e0a4:	2304      	movs	r3, #4
 800e0a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CK_CERT_STATE;
 800e0aa:	4b8b      	ldr	r3, [pc, #556]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e0ac:	2205      	movs	r2, #5
 800e0ae:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e0b0:	e13b      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e0b2:	e13a      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CK_CERT_FILE);
 800e0b4:	2002      	movs	r0, #2
 800e0b6:	f7ff fe19 	bl	800dcec <mod_mqttSslCertDelete>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e0c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d106      	bne.n	800e0d6 <mod_mqttOpenConfig+0x166>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e0c8:	2304      	movs	r3, #4
 800e0ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 800e0ce:	4b82      	ldr	r3, [pc, #520]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e0d0:	2200      	movs	r2, #0
 800e0d2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e0d4:	e129      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e0d6:	e128      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CA_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CA_CERT_PATH);
 800e0d8:	1d3b      	adds	r3, r7, #4
 800e0da:	4a80      	ldr	r2, [pc, #512]	; (800e2dc <mod_mqttOpenConfig+0x36c>)
 800e0dc:	461c      	mov	r4, r3
 800e0de:	4615      	mov	r5, r2
 800e0e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e0e8:	c403      	stmia	r4!, {r0, r1}
 800e0ea:	8022      	strh	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e0ec:	1d3b      	adds	r3, r7, #4
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	f7ff fc84 	bl	800d9fc <mod_mqttSslConfgi>
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e0fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <mod_mqttOpenConfig+0x1a0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e102:	2304      	movs	r3, #4
 800e104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CC_CERT_STATE;
 800e108:	4b73      	ldr	r3, [pc, #460]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e10a:	2207      	movs	r2, #7
 800e10c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e10e:	e10c      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e110:	e10b      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CC_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CC_CERT_PATH);
 800e112:	4b73      	ldr	r3, [pc, #460]	; (800e2e0 <mod_mqttOpenConfig+0x370>)
 800e114:	1d3c      	adds	r4, r7, #4
 800e116:	461d      	mov	r5, r3
 800e118:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e11a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e11c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e11e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e120:	682b      	ldr	r3, [r5, #0]
 800e122:	8023      	strh	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e124:	1d3b      	adds	r3, r7, #4
 800e126:	4618      	mov	r0, r3
 800e128:	f7ff fc68 	bl	800d9fc <mod_mqttSslConfgi>
 800e12c:	4603      	mov	r3, r0
 800e12e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e132:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e136:	2b00      	cmp	r3, #0
 800e138:	d106      	bne.n	800e148 <mod_mqttOpenConfig+0x1d8>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e13a:	2304      	movs	r3, #4
 800e13c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CK_CERT_STATE;
 800e140:	4b65      	ldr	r3, [pc, #404]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e142:	2208      	movs	r2, #8
 800e144:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e146:	e0f0      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e148:	e0ef      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CK_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CK_CERT_PATH);
 800e14a:	1d3b      	adds	r3, r7, #4
 800e14c:	4a65      	ldr	r2, [pc, #404]	; (800e2e4 <mod_mqttOpenConfig+0x374>)
 800e14e:	461c      	mov	r4, r3
 800e150:	4615      	mov	r5, r2
 800e152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e156:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e15a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e15e:	1d3b      	adds	r3, r7, #4
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff fc4b 	bl	800d9fc <mod_mqttSslConfgi>
 800e166:	4603      	mov	r3, r0
 800e168:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e16c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e170:	2b00      	cmp	r3, #0
 800e172:	d106      	bne.n	800e182 <mod_mqttOpenConfig+0x212>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e174:	2304      	movs	r3, #4
 800e176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_AUTH_STATE;
 800e17a:	4b57      	ldr	r3, [pc, #348]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e17c:	2209      	movs	r2, #9
 800e17e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e180:	e0d3      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e182:	e0d2      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_AUTH);
 800e184:	1d3b      	adds	r3, r7, #4
 800e186:	4a58      	ldr	r2, [pc, #352]	; (800e2e8 <mod_mqttOpenConfig+0x378>)
 800e188:	461c      	mov	r4, r3
 800e18a:	4615      	mov	r5, r2
 800e18c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e18e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e190:	682b      	ldr	r3, [r5, #0]
 800e192:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e194:	1d3b      	adds	r3, r7, #4
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff fc30 	bl	800d9fc <mod_mqttSslConfgi>
 800e19c:	4603      	mov	r3, r0
 800e19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e1a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d106      	bne.n	800e1b8 <mod_mqttOpenConfig+0x248>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_VER_STATE;
 800e1b0:	4b49      	ldr	r3, [pc, #292]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e1b2:	220a      	movs	r2, #10
 800e1b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e1b6:	e0b8      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e1b8:	e0b7      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_VER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_VERSION);
 800e1ba:	1d3b      	adds	r3, r7, #4
 800e1bc:	4a4b      	ldr	r2, [pc, #300]	; (800e2ec <mod_mqttOpenConfig+0x37c>)
 800e1be:	461c      	mov	r4, r3
 800e1c0:	4615      	mov	r5, r2
 800e1c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1c6:	682b      	ldr	r3, [r5, #0]
 800e1c8:	461a      	mov	r2, r3
 800e1ca:	8022      	strh	r2, [r4, #0]
 800e1cc:	3402      	adds	r4, #2
 800e1ce:	0c1b      	lsrs	r3, r3, #16
 800e1d0:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e1d2:	1d3b      	adds	r3, r7, #4
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f7ff fc11 	bl	800d9fc <mod_mqttSslConfgi>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e1e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d106      	bne.n	800e1f6 <mod_mqttOpenConfig+0x286>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e1e8:	2304      	movs	r3, #4
 800e1ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CIPHER_STATE;
 800e1ee:	4b3a      	ldr	r3, [pc, #232]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e1f0:	220b      	movs	r2, #11
 800e1f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e1f4:	e099      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e1f6:	e098      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CIPHER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_CIPHER_SUITE);
 800e1f8:	1d3b      	adds	r3, r7, #4
 800e1fa:	4a3d      	ldr	r2, [pc, #244]	; (800e2f0 <mod_mqttOpenConfig+0x380>)
 800e1fc:	461c      	mov	r4, r3
 800e1fe:	4615      	mov	r5, r2
 800e200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e204:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e208:	c403      	stmia	r4!, {r0, r1}
 800e20a:	7022      	strb	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e20c:	1d3b      	adds	r3, r7, #4
 800e20e:	4618      	mov	r0, r3
 800e210:	f7ff fbf4 	bl	800d9fc <mod_mqttSslConfgi>
 800e214:	4603      	mov	r3, r0
 800e216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e21a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d106      	bne.n	800e230 <mod_mqttOpenConfig+0x2c0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e222:	2304      	movs	r3, #4
 800e224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_IGR_AUTH_STATE;
 800e228:	4b2b      	ldr	r3, [pc, #172]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e22a:	220c      	movs	r2, #12
 800e22c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e22e:	e07c      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e230:	e07b      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_IGR_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_IGNORE_LOCAL_TIME);
 800e232:	1d3b      	adds	r3, r7, #4
 800e234:	4a2f      	ldr	r2, [pc, #188]	; (800e2f4 <mod_mqttOpenConfig+0x384>)
 800e236:	461c      	mov	r4, r3
 800e238:	4615      	mov	r5, r2
 800e23a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e23c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e23e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e242:	e884 0003 	stmia.w	r4, {r0, r1}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e246:	1d3b      	adds	r3, r7, #4
 800e248:	4618      	mov	r0, r3
 800e24a:	f7ff fbd7 	bl	800d9fc <mod_mqttSslConfgi>
 800e24e:	4603      	mov	r3, r0
 800e250:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e254:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e258:	2b00      	cmp	r3, #0
 800e25a:	d109      	bne.n	800e270 <mod_mqttOpenConfig+0x300>
			{
				sgu8_mqttClientId = 0;
 800e25c:	4b26      	ldr	r3, [pc, #152]	; (800e2f8 <mod_mqttOpenConfig+0x388>)
 800e25e:	2200      	movs	r2, #0
 800e260:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_INPROGRESS;
 800e262:	2304      	movs	r3, #4
 800e264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e268:	4b1b      	ldr	r3, [pc, #108]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e26a:	220d      	movs	r2, #13
 800e26c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e26e:	e05c      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e270:	e05b      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_SSL_CFG_STATE:
			sprintf((char *) lu8arr_param, (const char *) "\"SSL\",%d,1,2\r\n",
 800e272:	4b21      	ldr	r3, [pc, #132]	; (800e2f8 <mod_mqttOpenConfig+0x388>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	1d3b      	adds	r3, r7, #4
 800e27a:	4618      	mov	r0, r3
 800e27c:	491f      	ldr	r1, [pc, #124]	; (800e2fc <mod_mqttOpenConfig+0x38c>)
 800e27e:	f003 fe7b 	bl	8011f78 <siprintf>
					sgu8_mqttClientId);
			len_retStatus = mod_mqttSslMode(lu8arr_param);
 800e282:	1d3b      	adds	r3, r7, #4
 800e284:	4618      	mov	r0, r3
 800e286:	f7ff fb85 	bl	800d994 <mod_mqttSslMode>
 800e28a:	4603      	mov	r3, r0
 800e28c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e290:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e294:	2b00      	cmp	r3, #0
 800e296:	d106      	bne.n	800e2a6 <mod_mqttOpenConfig+0x336>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e298:	2304      	movs	r3, #4
 800e29a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_STATE;
 800e29e:	4b0e      	ldr	r3, [pc, #56]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e2a0:	220e      	movs	r2, #14
 800e2a2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e2a4:	e041      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e2a6:	e040      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_STATE:
			len_retStatus = mod_mqttOpen();
 800e2a8:	f7ff fd98 	bl	800dddc <mod_mqttOpen>
 800e2ac:	4603      	mov	r3, r0
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e2b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d106      	bne.n	800e2c8 <mod_mqttOpenConfig+0x358>
			{
				len_retStatus = E_RET_SUCCESS;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e2c0:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e2c2:	2206      	movs	r2, #6
 800e2c4:	701a      	strb	r2, [r3, #0]
 800e2c6:	e02e      	b.n	800e326 <mod_mqttOpenConfig+0x3b6>
			}
			else if (E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2cc:	2b01      	cmp	r3, #1
 800e2ce:	d117      	bne.n	800e300 <mod_mqttOpenConfig+0x390>
			{
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e2d0:	4b01      	ldr	r3, [pc, #4]	; (800e2d8 <mod_mqttOpenConfig+0x368>)
 800e2d2:	220d      	movs	r2, #13
 800e2d4:	701a      	strb	r2, [r3, #0]
 800e2d6:	e026      	b.n	800e326 <mod_mqttOpenConfig+0x3b6>
 800e2d8:	1fff476b 	.word	0x1fff476b
 800e2dc:	08014250 	.word	0x08014250
 800e2e0:	080142f8 	.word	0x080142f8
 800e2e4:	0801426c 	.word	0x0801426c
 800e2e8:	0801428c 	.word	0x0801428c
 800e2ec:	080142a0 	.word	0x080142a0
 800e2f0:	080142b4 	.word	0x080142b4
 800e2f4:	080142d0 	.word	0x080142d0
 800e2f8:	1fff4765 	.word	0x1fff4765
 800e2fc:	080142e8 	.word	0x080142e8
			}
			else if (E_RET_FAILED == len_retStatus)
 800e300:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e304:	2b02      	cmp	r3, #2
 800e306:	d103      	bne.n	800e310 <mod_mqttOpenConfig+0x3a0>
			{
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e308:	4b0b      	ldr	r3, [pc, #44]	; (800e338 <mod_mqttOpenConfig+0x3c8>)
 800e30a:	2206      	movs	r2, #6
 800e30c:	701a      	strb	r2, [r3, #0]
 800e30e:	e00a      	b.n	800e326 <mod_mqttOpenConfig+0x3b6>
			}
			else if(E_RET_CONN_ERROR == len_retStatus)
 800e310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e314:	2b0d      	cmp	r3, #13
 800e316:	d106      	bne.n	800e326 <mod_mqttOpenConfig+0x3b6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e318:	2304      	movs	r3, #4
 800e31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CA_CERT_STATE;
 800e31e:	4b06      	ldr	r3, [pc, #24]	; (800e338 <mod_mqttOpenConfig+0x3c8>)
 800e320:	2203      	movs	r2, #3
 800e322:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e324:	e001      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>
 800e326:	e000      	b.n	800e32a <mod_mqttOpenConfig+0x3ba>

		default:
		break;
 800e328:	bf00      	nop
	}

	return len_retStatus;
 800e32a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3728      	adds	r7, #40	; 0x28
 800e332:	46bd      	mov	sp, r7
 800e334:	bdb0      	pop	{r4, r5, r7, pc}
 800e336:	bf00      	nop
 800e338:	1fff476b 	.word	0x1fff476b

0800e33c <mod_gpsCfg>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsCfg(void)
{
 800e33c:	b5b0      	push	{r4, r5, r7, lr}
 800e33e:	b088      	sub	sp, #32
 800e340:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e342:	2304      	movs	r3, #4
 800e344:	77fb      	strb	r3, [r7, #31]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e346:	2300      	movs	r3, #0
 800e348:	61bb      	str	r3, [r7, #24]
	uint8_t lu8arr_param[] = "\"outport\",\"none\"\r\n";
 800e34a:	4b21      	ldr	r3, [pc, #132]	; (800e3d0 <mod_gpsCfg+0x94>)
 800e34c:	1d3c      	adds	r4, r7, #4
 800e34e:	461d      	mov	r5, r3
 800e350:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e352:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e354:	682b      	ldr	r3, [r5, #0]
 800e356:	461a      	mov	r2, r3
 800e358:	8022      	strh	r2, [r4, #0]
 800e35a:	3402      	adds	r4, #2
 800e35c:	0c1b      	lsrs	r3, r3, #16
 800e35e:	7023      	strb	r3, [r4, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GPS_CFG, (uint8_t *) lu8arr_param);
 800e360:	1d3b      	adds	r3, r7, #4
 800e362:	201f      	movs	r0, #31
 800e364:	4619      	mov	r1, r3
 800e366:	f7fd fdf3 	bl	800bf50 <mod_sendCmdGetRsp>
 800e36a:	4603      	mov	r3, r0
 800e36c:	77fb      	strb	r3, [r7, #31]
	if (E_RET_SUCCESS == len_retStatus)
 800e36e:	7ffb      	ldrb	r3, [r7, #31]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d110      	bne.n	800e396 <mod_gpsCfg+0x5a>
	{
		lsu8_retryCnt = 0;
 800e374:	4b17      	ldr	r3, [pc, #92]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e376:	2200      	movs	r2, #0
 800e378:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800e37a:	4817      	ldr	r0, [pc, #92]	; (800e3d8 <mod_gpsCfg+0x9c>)
 800e37c:	4917      	ldr	r1, [pc, #92]	; (800e3dc <mod_gpsCfg+0xa0>)
 800e37e:	f003 fe5e 	bl	801203e <strstr>
 800e382:	61b8      	str	r0, [r7, #24]
				(const char *) gcst_ATCmdTable[E_IDX_GPS_CFG].mu8arr_respString);
		if(NULL != lu8p_Ptr)
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d002      	beq.n	800e390 <mod_gpsCfg+0x54>
		{

			len_retStatus = E_RET_SUCCESS;
 800e38a:	2300      	movs	r3, #0
 800e38c:	77fb      	strb	r3, [r7, #31]
 800e38e:	e019      	b.n	800e3c4 <mod_gpsCfg+0x88>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800e390:	2302      	movs	r3, #2
 800e392:	77fb      	strb	r3, [r7, #31]
 800e394:	e016      	b.n	800e3c4 <mod_gpsCfg+0x88>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e396:	7ffb      	ldrb	r3, [r7, #31]
 800e398:	2b04      	cmp	r3, #4
 800e39a:	d013      	beq.n	800e3c4 <mod_gpsCfg+0x88>
	{
		lsu8_retryCnt++;
 800e39c:	4b0d      	ldr	r3, [pc, #52]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e39e:	781b      	ldrb	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	4b0b      	ldr	r3, [pc, #44]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e3a6:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e3a8:	4b0a      	ldr	r3, [pc, #40]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e3aa:	781b      	ldrb	r3, [r3, #0]
 800e3ac:	2b02      	cmp	r3, #2
 800e3ae:	d802      	bhi.n	800e3b6 <mod_gpsCfg+0x7a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e3b0:	2304      	movs	r3, #4
 800e3b2:	77fb      	strb	r3, [r7, #31]
 800e3b4:	e006      	b.n	800e3c4 <mod_gpsCfg+0x88>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e3b6:	4b07      	ldr	r3, [pc, #28]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e3b8:	781b      	ldrb	r3, [r3, #0]
 800e3ba:	2b03      	cmp	r3, #3
 800e3bc:	d902      	bls.n	800e3c4 <mod_gpsCfg+0x88>
		{
			lsu8_retryCnt = 0;
 800e3be:	4b05      	ldr	r3, [pc, #20]	; (800e3d4 <mod_gpsCfg+0x98>)
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e3c4:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3720      	adds	r7, #32
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bdb0      	pop	{r4, r5, r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	0801431c 	.word	0x0801431c
 800e3d4:	1fff478f 	.word	0x1fff478f
 800e3d8:	1fff46c4 	.word	0x1fff46c4
 800e3dc:	1fff38cc 	.word	0x1fff38cc

0800e3e0 <mod_gpsEnable>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsEnable(void)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b082      	sub	sp, #8
 800e3e4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e3e6:	2304      	movs	r3, #4
 800e3e8:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_GNSS, (uint8_t *) NEW_LINE);
 800e3ee:	2020      	movs	r0, #32
 800e3f0:	4914      	ldr	r1, [pc, #80]	; (800e444 <mod_gpsEnable+0x64>)
 800e3f2:	f7fd fdad 	bl	800bf50 <mod_sendCmdGetRsp>
 800e3f6:	4603      	mov	r3, r0
 800e3f8:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800e3fa:	79fb      	ldrb	r3, [r7, #7]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d105      	bne.n	800e40c <mod_gpsEnable+0x2c>
	{
		lsu8_retryCnt = 0;
 800e400:	4b11      	ldr	r3, [pc, #68]	; (800e448 <mod_gpsEnable+0x68>)
 800e402:	2200      	movs	r2, #0
 800e404:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800e406:	2300      	movs	r3, #0
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	e016      	b.n	800e43a <mod_gpsEnable+0x5a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	2b04      	cmp	r3, #4
 800e410:	d013      	beq.n	800e43a <mod_gpsEnable+0x5a>
	{
		lsu8_retryCnt++;
 800e412:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <mod_gpsEnable+0x68>)
 800e414:	781b      	ldrb	r3, [r3, #0]
 800e416:	3301      	adds	r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	4b0b      	ldr	r3, [pc, #44]	; (800e448 <mod_gpsEnable+0x68>)
 800e41c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e41e:	4b0a      	ldr	r3, [pc, #40]	; (800e448 <mod_gpsEnable+0x68>)
 800e420:	781b      	ldrb	r3, [r3, #0]
 800e422:	2b02      	cmp	r3, #2
 800e424:	d802      	bhi.n	800e42c <mod_gpsEnable+0x4c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e426:	2304      	movs	r3, #4
 800e428:	71fb      	strb	r3, [r7, #7]
 800e42a:	e006      	b.n	800e43a <mod_gpsEnable+0x5a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e42c:	4b06      	ldr	r3, [pc, #24]	; (800e448 <mod_gpsEnable+0x68>)
 800e42e:	781b      	ldrb	r3, [r3, #0]
 800e430:	2b03      	cmp	r3, #3
 800e432:	d902      	bls.n	800e43a <mod_gpsEnable+0x5a>
		{
			lsu8_retryCnt = 0;
 800e434:	4b04      	ldr	r3, [pc, #16]	; (800e448 <mod_gpsEnable+0x68>)
 800e436:	2200      	movs	r2, #0
 800e438:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e43a:	79fb      	ldrb	r3, [r7, #7]
}
 800e43c:	4618      	mov	r0, r3
 800e43e:	3708      	adds	r7, #8
 800e440:	46bd      	mov	sp, r7
 800e442:	bd80      	pop	{r7, pc}
 800e444:	08014120 	.word	0x08014120
 800e448:	1fff4790 	.word	0x1fff4790

0800e44c <mod_4gHandler>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_4gHandler(void)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b082      	sub	sp, #8
 800e450:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e452:	2304      	movs	r3, #4
 800e454:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCount = 0;
//	mod_receiveRsp();	//read and saved received byte in global buffer

	if (gst_deviceStatus.mb_ismodemPwrDwn != true)
 800e456:	4ba3      	ldr	r3, [pc, #652]	; (800e6e4 <mod_4gHandler+0x298>)
 800e458:	781b      	ldrb	r3, [r3, #0]
 800e45a:	f083 0301 	eor.w	r3, r3, #1
 800e45e:	b2db      	uxtb	r3, r3
 800e460:	2b00      	cmp	r3, #0
 800e462:	f000 813b 	beq.w	800e6dc <mod_4gHandler+0x290>
	{
		switch (sen_4gRunState)
 800e466:	4ba0      	ldr	r3, [pc, #640]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	2b10      	cmp	r3, #16
 800e46c:	f200 8135 	bhi.w	800e6da <mod_4gHandler+0x28e>
 800e470:	a201      	add	r2, pc, #4	; (adr r2, 800e478 <mod_4gHandler+0x2c>)
 800e472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e476:	bf00      	nop
 800e478:	0800e6db 	.word	0x0800e6db
 800e47c:	0800e4bd 	.word	0x0800e4bd
 800e480:	0800e4e9 	.word	0x0800e4e9
 800e484:	0800e507 	.word	0x0800e507
 800e488:	0800e525 	.word	0x0800e525
 800e48c:	0800e543 	.word	0x0800e543
 800e490:	0800e561 	.word	0x0800e561
 800e494:	0800e5b7 	.word	0x0800e5b7
 800e498:	0800e5cf 	.word	0x0800e5cf
 800e49c:	0800e5eb 	.word	0x0800e5eb
 800e4a0:	0800e6db 	.word	0x0800e6db
 800e4a4:	0800e611 	.word	0x0800e611
 800e4a8:	0800e6a9 	.word	0x0800e6a9
 800e4ac:	0800e673 	.word	0x0800e673
 800e4b0:	0800e68b 	.word	0x0800e68b
 800e4b4:	0800e6db 	.word	0x0800e6db
 800e4b8:	0800e6c7 	.word	0x0800e6c7
		{
			case E_MOD_IDLE_STATE:
			break;

			case E_SET_URC_PORT_STATE:
				len_retStatus = mod_setUrcPort();
 800e4bc:	f7fe f822 	bl	800c504 <mod_setUrcPort>
 800e4c0:	4603      	mov	r3, r0
 800e4c2:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e4c4:	79fb      	ldrb	r3, [r7, #7]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d002      	beq.n	800e4d0 <mod_4gHandler+0x84>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e4ca:	79fb      	ldrb	r3, [r7, #7]
 800e4cc:	2b04      	cmp	r3, #4
 800e4ce:	d00a      	beq.n	800e4e6 <mod_4gHandler+0x9a>
				{
					mod_disable4gModule();
 800e4d0:	f7fd fbec 	bl	800bcac <mod_disable4gModule>
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800e4d4:	4b83      	ldr	r3, [pc, #524]	; (800e6e4 <mod_4gHandler+0x298>)
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	701a      	strb	r2, [r3, #0]
					mod_enable4gModule();
 800e4da:	f7fd fbc9 	bl	800bc70 <mod_enable4gModule>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800e4de:	4b82      	ldr	r3, [pc, #520]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e4e4:	e0fa      	b.n	800e6dc <mod_4gHandler+0x290>
 800e4e6:	e0f9      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_ECHO_OFF_STATE:
				len_retStatus = mod_echoOff();
 800e4e8:	f7fd ffda 	bl	800c4a0 <mod_echoOff>
 800e4ec:	4603      	mov	r3, r0
 800e4ee:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e4f0:	79fb      	ldrb	r3, [r7, #7]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d002      	beq.n	800e4fc <mod_4gHandler+0xb0>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	2b04      	cmp	r3, #4
 800e4fa:	d003      	beq.n	800e504 <mod_4gHandler+0xb8>
				{
					sen_4gRunState = E_SET_FLOW_CTRL_STATE;
 800e4fc:	4b7a      	ldr	r3, [pc, #488]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e4fe:	2203      	movs	r2, #3
 800e500:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e502:	e0eb      	b.n	800e6dc <mod_4gHandler+0x290>
 800e504:	e0ea      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_SET_FLOW_CTRL_STATE:
				len_retStatus = mod_setFlowCtrl();
 800e506:	f7fe f835 	bl	800c574 <mod_setFlowCtrl>
 800e50a:	4603      	mov	r3, r0
 800e50c:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e50e:	79fb      	ldrb	r3, [r7, #7]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d002      	beq.n	800e51a <mod_4gHandler+0xce>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e514:	79fb      	ldrb	r3, [r7, #7]
 800e516:	2b04      	cmp	r3, #4
 800e518:	d003      	beq.n	800e522 <mod_4gHandler+0xd6>
				{
					sen_4gRunState = E_EXTRACT_MODULE_INFO_STATE;
 800e51a:	4b73      	ldr	r3, [pc, #460]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e51c:	2204      	movs	r2, #4
 800e51e:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e520:	e0dc      	b.n	800e6dc <mod_4gHandler+0x290>
 800e522:	e0db      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_EXTRACT_MODULE_INFO_STATE:
				len_retStatus = mod_extractModInfo();
 800e524:	f7fe f864 	bl	800c5f0 <mod_extractModInfo>
 800e528:	4603      	mov	r3, r0
 800e52a:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e52c:	79fb      	ldrb	r3, [r7, #7]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	d002      	beq.n	800e538 <mod_4gHandler+0xec>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e532:	79fb      	ldrb	r3, [r7, #7]
 800e534:	2b04      	cmp	r3, #4
 800e536:	d003      	beq.n	800e540 <mod_4gHandler+0xf4>
				{
					sen_4gRunState = E_SIM_STATUS_STATE;
 800e538:	4b6b      	ldr	r3, [pc, #428]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e53a:	2205      	movs	r2, #5
 800e53c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e53e:	e0cd      	b.n	800e6dc <mod_4gHandler+0x290>
 800e540:	e0cc      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_SIM_STATUS_STATE:
				len_retStatus = mod_simStatus();
 800e542:	f7fe fbb5 	bl	800ccb0 <mod_simStatus>
 800e546:	4603      	mov	r3, r0
 800e548:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e54a:	79fb      	ldrb	r3, [r7, #7]
 800e54c:	2b00      	cmp	r3, #0
 800e54e:	d002      	beq.n	800e556 <mod_4gHandler+0x10a>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e550:	79fb      	ldrb	r3, [r7, #7]
 800e552:	2b04      	cmp	r3, #4
 800e554:	d003      	beq.n	800e55e <mod_4gHandler+0x112>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e556:	4b64      	ldr	r3, [pc, #400]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e558:	2206      	movs	r2, #6
 800e55a:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e55c:	e0be      	b.n	800e6dc <mod_4gHandler+0x290>
 800e55e:	e0bd      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_NETWORK_STATUS_STATE:
				len_retStatus = mod_networkStatus();
 800e560:	f7fe fc4c 	bl	800cdfc <mod_networkStatus>
 800e564:	4603      	mov	r3, r0
 800e566:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e568:	79fb      	ldrb	r3, [r7, #7]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d103      	bne.n	800e576 <mod_4gHandler+0x12a>
				{
					sen_4gRunState = E_SIGNAL_QUALITY_STATE;
 800e56e:	4b5e      	ldr	r3, [pc, #376]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e570:	2207      	movs	r2, #7
 800e572:	701a      	strb	r2, [r3, #0]
 800e574:	e01e      	b.n	800e5b4 <mod_4gHandler+0x168>
				}
				else if (E_RET_FAILED == len_retStatus)
 800e576:	79fb      	ldrb	r3, [r7, #7]
 800e578:	2b02      	cmp	r3, #2
 800e57a:	d11b      	bne.n	800e5b4 <mod_4gHandler+0x168>
				{
					lsu8_retryCount++;
 800e57c:	4b5b      	ldr	r3, [pc, #364]	; (800e6ec <mod_4gHandler+0x2a0>)
 800e57e:	781b      	ldrb	r3, [r3, #0]
 800e580:	3301      	adds	r3, #1
 800e582:	b2da      	uxtb	r2, r3
 800e584:	4b59      	ldr	r3, [pc, #356]	; (800e6ec <mod_4gHandler+0x2a0>)
 800e586:	701a      	strb	r2, [r3, #0]
					gb_isMqttConnected = false;
 800e588:	4b59      	ldr	r3, [pc, #356]	; (800e6f0 <mod_4gHandler+0x2a4>)
 800e58a:	2200      	movs	r2, #0
 800e58c:	701a      	strb	r2, [r3, #0]
					if (lsu8_retryCount >= 6)
 800e58e:	4b57      	ldr	r3, [pc, #348]	; (800e6ec <mod_4gHandler+0x2a0>)
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	2b05      	cmp	r3, #5
 800e594:	d906      	bls.n	800e5a4 <mod_4gHandler+0x158>
					{
						lsu8_retryCount = 0;
 800e596:	4b55      	ldr	r3, [pc, #340]	; (800e6ec <mod_4gHandler+0x2a0>)
 800e598:	2200      	movs	r2, #0
 800e59a:	701a      	strb	r2, [r3, #0]
						sen_4gRunState = E_MOD_RESET_STATE;
 800e59c:	4b52      	ldr	r3, [pc, #328]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e59e:	220c      	movs	r2, #12
 800e5a0:	701a      	strb	r2, [r3, #0]
 800e5a2:	e007      	b.n	800e5b4 <mod_4gHandler+0x168>
					}
					else
					{
						tm_set4gRunTimer(TIMER_5S);
 800e5a4:	f241 3088 	movw	r0, #5000	; 0x1388
 800e5a8:	f7f1 ff16 	bl	80003d8 <tm_set4gRunTimer>
						sen_4gRunState = E_MOD_WAIT_STATE;
 800e5ac:	4b4e      	ldr	r3, [pc, #312]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e5ae:	2210      	movs	r2, #16
 800e5b0:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800e5b2:	e093      	b.n	800e6dc <mod_4gHandler+0x290>
 800e5b4:	e092      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_SIGNAL_QUALITY_STATE:
				len_retStatus = mod_signalQuality();
 800e5b6:	f7fe fcc1 	bl	800cf3c <mod_signalQuality>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e5be:	79fb      	ldrb	r3, [r7, #7]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d103      	bne.n	800e5cc <mod_4gHandler+0x180>
				{
					sen_4gRunState = E_EXTRACT_TIME_DATE_STATE;
 800e5c4:	4b48      	ldr	r3, [pc, #288]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e5c6:	2208      	movs	r2, #8
 800e5c8:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e5ca:	e087      	b.n	800e6dc <mod_4gHandler+0x290>
 800e5cc:	e086      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_EXTRACT_TIME_DATE_STATE:
				len_retStatus = mod_extractDateTime();
 800e5ce:	f7fe fd09 	bl	800cfe4 <mod_extractDateTime>
 800e5d2:	4603      	mov	r3, r0
 800e5d4:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e5d6:	79fb      	ldrb	r3, [r7, #7]
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d105      	bne.n	800e5e8 <mod_4gHandler+0x19c>
				{
					//SuperLooptime_End();
					//SuperLooptime_Start();
					set_RTC();
 800e5dc:	f7fc ff64 	bl	800b4a8 <set_RTC>
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e5e0:	4b41      	ldr	r3, [pc, #260]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e5e2:	2209      	movs	r2, #9
 800e5e4:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e5e6:	e079      	b.n	800e6dc <mod_4gHandler+0x290>
 800e5e8:	e078      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_MQTT_OPEN_STATE:
				len_retStatus = mod_mqttOpenConfig();
 800e5ea:	f7ff fcc1 	bl	800df70 <mod_mqttOpenConfig>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e5f2:	79fb      	ldrb	r3, [r7, #7]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d103      	bne.n	800e600 <mod_4gHandler+0x1b4>
				{
					sen_4gRunState = E_MQTT_CONNECT_STATE;
 800e5f8:	4b3b      	ldr	r3, [pc, #236]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e5fa:	220b      	movs	r2, #11
 800e5fc:	701a      	strb	r2, [r3, #0]
 800e5fe:	e006      	b.n	800e60e <mod_4gHandler+0x1c2>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	2b04      	cmp	r3, #4
 800e604:	d003      	beq.n	800e60e <mod_4gHandler+0x1c2>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e606:	4b38      	ldr	r3, [pc, #224]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e608:	220c      	movs	r2, #12
 800e60a:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e60c:	e066      	b.n	800e6dc <mod_4gHandler+0x290>
 800e60e:	e065      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_MQTT_CONNECT_STATE:
				len_retStatus = mod_mqttConnect();
 800e610:	f7fe fd84 	bl	800d11c <mod_mqttConnect>
 800e614:	4603      	mov	r3, r0
 800e616:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e618:	79fb      	ldrb	r3, [r7, #7]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d103      	bne.n	800e626 <mod_4gHandler+0x1da>
				{
//					gb_isMqttConnected = true;
//					sen_4gRunState = E_MOD_IDLE_STATE;
					sen_4gRunState = E_GPS_CFG_STATE;
 800e61e:	4b32      	ldr	r3, [pc, #200]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e620:	220d      	movs	r2, #13
 800e622:	701a      	strb	r2, [r3, #0]
 800e624:	e024      	b.n	800e670 <mod_4gHandler+0x224>
				}
				else if(E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e626:	79fb      	ldrb	r3, [r7, #7]
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d113      	bne.n	800e654 <mod_4gHandler+0x208>
				{
					sgu8_mqttClientId++;
 800e62c:	4b31      	ldr	r3, [pc, #196]	; (800e6f4 <mod_4gHandler+0x2a8>)
 800e62e:	781b      	ldrb	r3, [r3, #0]
 800e630:	3301      	adds	r3, #1
 800e632:	b2da      	uxtb	r2, r3
 800e634:	4b2f      	ldr	r3, [pc, #188]	; (800e6f4 <mod_4gHandler+0x2a8>)
 800e636:	701a      	strb	r2, [r3, #0]
					if (sgu8_mqttClientId > 5)
 800e638:	4b2e      	ldr	r3, [pc, #184]	; (800e6f4 <mod_4gHandler+0x2a8>)
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	2b05      	cmp	r3, #5
 800e63e:	d902      	bls.n	800e646 <mod_4gHandler+0x1fa>
					{
						sgu8_mqttClientId = 0;
 800e640:	4b2c      	ldr	r3, [pc, #176]	; (800e6f4 <mod_4gHandler+0x2a8>)
 800e642:	2200      	movs	r2, #0
 800e644:	701a      	strb	r2, [r3, #0]
					}
					sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e646:	4b2c      	ldr	r3, [pc, #176]	; (800e6f8 <mod_4gHandler+0x2ac>)
 800e648:	220d      	movs	r2, #13
 800e64a:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e64c:	4b26      	ldr	r3, [pc, #152]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e64e:	2209      	movs	r2, #9
 800e650:	701a      	strb	r2, [r3, #0]
 800e652:	e00d      	b.n	800e670 <mod_4gHandler+0x224>
				}
				else if (E_RET_CONN_CLOSED_ERROR == len_retStatus)
 800e654:	79fb      	ldrb	r3, [r7, #7]
 800e656:	2b0a      	cmp	r3, #10
 800e658:	d103      	bne.n	800e662 <mod_4gHandler+0x216>
				{
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e65a:	4b23      	ldr	r3, [pc, #140]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e65c:	2209      	movs	r2, #9
 800e65e:	701a      	strb	r2, [r3, #0]
 800e660:	e006      	b.n	800e670 <mod_4gHandler+0x224>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e662:	79fb      	ldrb	r3, [r7, #7]
 800e664:	2b04      	cmp	r3, #4
 800e666:	d003      	beq.n	800e670 <mod_4gHandler+0x224>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e668:	4b1f      	ldr	r3, [pc, #124]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e66a:	220c      	movs	r2, #12
 800e66c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e66e:	e035      	b.n	800e6dc <mod_4gHandler+0x290>
 800e670:	e034      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_GPS_CFG_STATE:
				len_retStatus = mod_gpsCfg();
 800e672:	f7ff fe63 	bl	800e33c <mod_gpsCfg>
 800e676:	4603      	mov	r3, r0
 800e678:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e67a:	79fb      	ldrb	r3, [r7, #7]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d103      	bne.n	800e688 <mod_4gHandler+0x23c>
				{
					sen_4gRunState = E_GPS_ENABLE_STATE;
 800e680:	4b19      	ldr	r3, [pc, #100]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e682:	220e      	movs	r2, #14
 800e684:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e686:	e029      	b.n	800e6dc <mod_4gHandler+0x290>
 800e688:	e028      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_GPS_ENABLE_STATE:
				len_retStatus = mod_gpsEnable();
 800e68a:	f7ff fea9 	bl	800e3e0 <mod_gpsEnable>
 800e68e:	4603      	mov	r3, r0
 800e690:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d106      	bne.n	800e6a6 <mod_4gHandler+0x25a>
				{
					gb_isMqttConnected = true;
 800e698:	4b15      	ldr	r3, [pc, #84]	; (800e6f0 <mod_4gHandler+0x2a4>)
 800e69a:	2201      	movs	r2, #1
 800e69c:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_SET_URC_PORT_STATE;
 800e69e:	4b12      	ldr	r3, [pc, #72]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e6a0:	2201      	movs	r2, #1
 800e6a2:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e6a4:	e01a      	b.n	800e6dc <mod_4gHandler+0x290>
 800e6a6:	e019      	b.n	800e6dc <mod_4gHandler+0x290>
			case E_GET_GPS_DATA_STATE:

			break;

			case E_MOD_RESET_STATE:
				len_retStatus = mod_mqttDisableEnableFunctionality();
 800e6a8:	f7fe fefc 	bl	800d4a4 <mod_mqttDisableEnableFunctionality>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e6b0:	79fb      	ldrb	r3, [r7, #7]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d002      	beq.n	800e6bc <mod_4gHandler+0x270>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	2b04      	cmp	r3, #4
 800e6ba:	d003      	beq.n	800e6c4 <mod_4gHandler+0x278>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e6bc:	4b0a      	ldr	r3, [pc, #40]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e6be:	2206      	movs	r2, #6
 800e6c0:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e6c2:	e00b      	b.n	800e6dc <mod_4gHandler+0x290>
 800e6c4:	e00a      	b.n	800e6dc <mod_4gHandler+0x290>

			case E_MOD_WAIT_STATE:
				if (tm_get4gRunTimerValue() == 0)
 800e6c6:	f7f1 fe95 	bl	80003f4 <tm_get4gRunTimerValue>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d103      	bne.n	800e6d8 <mod_4gHandler+0x28c>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e6d0:	4b05      	ldr	r3, [pc, #20]	; (800e6e8 <mod_4gHandler+0x29c>)
 800e6d2:	2206      	movs	r2, #6
 800e6d4:	701a      	strb	r2, [r3, #0]
				}

			break;
 800e6d6:	e001      	b.n	800e6dc <mod_4gHandler+0x290>
 800e6d8:	e000      	b.n	800e6dc <mod_4gHandler+0x290>

			default:
			break;
 800e6da:	bf00      	nop
		}
	}
}
 800e6dc:	3708      	adds	r7, #8
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	bd80      	pop	{r7, pc}
 800e6e2:	bf00      	nop
 800e6e4:	1ffea4dc 	.word	0x1ffea4dc
 800e6e8:	1ffea4d8 	.word	0x1ffea4d8
 800e6ec:	1fff4791 	.word	0x1fff4791
 800e6f0:	1fff5230 	.word	0x1fff5230
 800e6f4:	1fff4765 	.word	0x1fff4765
 800e6f8:	1fff476b 	.word	0x1fff476b

0800e6fc <mod_pub10sPackExtractGps>:

	return len_retStatus;
}*/

en_responseRetCodes_t mod_pub10sPackExtractGps(void)
{
 800e6fc:	b5b0      	push	{r4, r5, r7, lr}
 800e6fe:	b08c      	sub	sp, #48	; 0x30
 800e700:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e702:	2304      	movs	r3, #4
 800e704:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lu8_retryCont = 0;

	RTC_GetTime(&current_time);
 800e708:	486a      	ldr	r0, [pc, #424]	; (800e8b4 <mod_pub10sPackExtractGps+0x1b8>)
 800e70a:	f7f9 f97b 	bl	8007a04 <RTC_GetTime>

	if ((current_time.seconds % 3 == 0U) && (sgb_flagGps == false) && (sgb_packetFlag == false))
 800e70e:	4b69      	ldr	r3, [pc, #420]	; (800e8b4 <mod_pub10sPackExtractGps+0x1b8>)
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e716:	b2db      	uxtb	r3, r3
 800e718:	4619      	mov	r1, r3
 800e71a:	4b67      	ldr	r3, [pc, #412]	; (800e8b8 <mod_pub10sPackExtractGps+0x1bc>)
 800e71c:	fb83 3201 	smull	r3, r2, r3, r1
 800e720:	17cb      	asrs	r3, r1, #31
 800e722:	1ad2      	subs	r2, r2, r3
 800e724:	4613      	mov	r3, r2
 800e726:	005b      	lsls	r3, r3, #1
 800e728:	4413      	add	r3, r2
 800e72a:	1aca      	subs	r2, r1, r3
 800e72c:	2a00      	cmp	r2, #0
 800e72e:	d113      	bne.n	800e758 <mod_pub10sPackExtractGps+0x5c>
 800e730:	4b62      	ldr	r3, [pc, #392]	; (800e8bc <mod_pub10sPackExtractGps+0x1c0>)
 800e732:	781b      	ldrb	r3, [r3, #0]
 800e734:	f083 0301 	eor.w	r3, r3, #1
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00c      	beq.n	800e758 <mod_pub10sPackExtractGps+0x5c>
 800e73e:	4b60      	ldr	r3, [pc, #384]	; (800e8c0 <mod_pub10sPackExtractGps+0x1c4>)
 800e740:	781b      	ldrb	r3, [r3, #0]
 800e742:	f083 0301 	eor.w	r3, r3, #1
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d005      	beq.n	800e758 <mod_pub10sPackExtractGps+0x5c>
	{
		Get_CurrentLocation();
 800e74c:	f7fd f864 	bl	800b818 <Get_CurrentLocation>
		sgb_flagGps = true;
 800e750:	4b5a      	ldr	r3, [pc, #360]	; (800e8bc <mod_pub10sPackExtractGps+0x1c0>)
 800e752:	2201      	movs	r2, #1
 800e754:	701a      	strb	r2, [r3, #0]
 800e756:	e017      	b.n	800e788 <mod_pub10sPackExtractGps+0x8c>
	}
	else if ((sgb_flagGps == true) && (current_time.seconds % 3) != 0U)
 800e758:	4b58      	ldr	r3, [pc, #352]	; (800e8bc <mod_pub10sPackExtractGps+0x1c0>)
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d013      	beq.n	800e788 <mod_pub10sPackExtractGps+0x8c>
 800e760:	4b54      	ldr	r3, [pc, #336]	; (800e8b4 <mod_pub10sPackExtractGps+0x1b8>)
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e768:	b2db      	uxtb	r3, r3
 800e76a:	4619      	mov	r1, r3
 800e76c:	4b52      	ldr	r3, [pc, #328]	; (800e8b8 <mod_pub10sPackExtractGps+0x1bc>)
 800e76e:	fb83 3201 	smull	r3, r2, r3, r1
 800e772:	17cb      	asrs	r3, r1, #31
 800e774:	1ad2      	subs	r2, r2, r3
 800e776:	4613      	mov	r3, r2
 800e778:	005b      	lsls	r3, r3, #1
 800e77a:	4413      	add	r3, r2
 800e77c:	1aca      	subs	r2, r1, r3
 800e77e:	2a00      	cmp	r2, #0
 800e780:	d002      	beq.n	800e788 <mod_pub10sPackExtractGps+0x8c>
	{
		sgb_flagGps = false;
 800e782:	4b4e      	ldr	r3, [pc, #312]	; (800e8bc <mod_pub10sPackExtractGps+0x1c0>)
 800e784:	2200      	movs	r2, #0
 800e786:	701a      	strb	r2, [r3, #0]
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
 800e788:	4b4a      	ldr	r3, [pc, #296]	; (800e8b4 <mod_pub10sPackExtractGps+0x1b8>)
 800e78a:	781b      	ldrb	r3, [r3, #0]
 800e78c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e790:	b2db      	uxtb	r3, r3
 800e792:	4619      	mov	r1, r3
 800e794:	4b4b      	ldr	r3, [pc, #300]	; (800e8c4 <mod_pub10sPackExtractGps+0x1c8>)
 800e796:	fb83 2301 	smull	r2, r3, r3, r1
 800e79a:	109a      	asrs	r2, r3, #2
 800e79c:	17cb      	asrs	r3, r1, #31
 800e79e:	1ad2      	subs	r2, r2, r3
 800e7a0:	4613      	mov	r3, r2
 800e7a2:	009b      	lsls	r3, r3, #2
 800e7a4:	4413      	add	r3, r2
 800e7a6:	005b      	lsls	r3, r3, #1
 800e7a8:	1aca      	subs	r2, r1, r3
 800e7aa:	2a00      	cmp	r2, #0
 800e7ac:	d12c      	bne.n	800e808 <mod_pub10sPackExtractGps+0x10c>
 800e7ae:	4b46      	ldr	r3, [pc, #280]	; (800e8c8 <mod_pub10sPackExtractGps+0x1cc>)
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	f083 0301 	eor.w	r3, r3, #1
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d025      	beq.n	800e808 <mod_pub10sPackExtractGps+0x10c>
	{
		epoch_time();
 800e7bc:	f7fc ff24 	bl	800b608 <epoch_time>
		Process_4G_Event_Data();
 800e7c0:	f7fc fd98 	bl	800b2f4 <Process_4G_Event_Data>
		memset(Eventbuffer_4Gcomm, 0, 512);
 800e7c4:	4841      	ldr	r0, [pc, #260]	; (800e8cc <mod_pub10sPackExtractGps+0x1d0>)
 800e7c6:	2100      	movs	r1, #0
 800e7c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7cc:	f003 f915 	bl	80119fa <memset>
		pb_ostream_t stream1;
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
 800e7d0:	463b      	mov	r3, r7
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	493d      	ldr	r1, [pc, #244]	; (800e8cc <mod_pub10sPackExtractGps+0x1d0>)
 800e7d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7da:	f000 fb31 	bl	800ee40 <pb_ostream_from_buffer>
 800e7de:	f107 0418 	add.w	r4, r7, #24
 800e7e2:	463d      	mov	r5, r7
 800e7e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e7e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e7e8:	682b      	ldr	r3, [r5, #0]
 800e7ea:	6023      	str	r3, [r4, #0]
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
 800e7ec:	f107 0318 	add.w	r3, r7, #24
 800e7f0:	4618      	mov	r0, r3
 800e7f2:	4937      	ldr	r1, [pc, #220]	; (800e8d0 <mod_pub10sPackExtractGps+0x1d4>)
 800e7f4:	4a37      	ldr	r2, [pc, #220]	; (800e8d4 <mod_pub10sPackExtractGps+0x1d8>)
 800e7f6:	f000 ff95 	bl	800f724 <pb_encode>
		sgb_packetFlag = true;
 800e7fa:	4b31      	ldr	r3, [pc, #196]	; (800e8c0 <mod_pub10sPackExtractGps+0x1c4>)
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	701a      	strb	r2, [r3, #0]
		sgb_flag4g = true;
 800e800:	4b31      	ldr	r3, [pc, #196]	; (800e8c8 <mod_pub10sPackExtractGps+0x1cc>)
 800e802:	2201      	movs	r2, #1
 800e804:	701a      	strb	r2, [r3, #0]
	{
		sgb_flagGps = false;
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
	{
 800e806:	e019      	b.n	800e83c <mod_pub10sPackExtractGps+0x140>
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
		sgb_packetFlag = true;
		sgb_flag4g = true;
	}
	else if ((sgb_flag4g == true) && (current_time.seconds % 10 != 0U))
 800e808:	4b2f      	ldr	r3, [pc, #188]	; (800e8c8 <mod_pub10sPackExtractGps+0x1cc>)
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d015      	beq.n	800e83c <mod_pub10sPackExtractGps+0x140>
 800e810:	4b28      	ldr	r3, [pc, #160]	; (800e8b4 <mod_pub10sPackExtractGps+0x1b8>)
 800e812:	781b      	ldrb	r3, [r3, #0]
 800e814:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e818:	b2db      	uxtb	r3, r3
 800e81a:	4619      	mov	r1, r3
 800e81c:	4b29      	ldr	r3, [pc, #164]	; (800e8c4 <mod_pub10sPackExtractGps+0x1c8>)
 800e81e:	fb83 2301 	smull	r2, r3, r3, r1
 800e822:	109a      	asrs	r2, r3, #2
 800e824:	17cb      	asrs	r3, r1, #31
 800e826:	1ad2      	subs	r2, r2, r3
 800e828:	4613      	mov	r3, r2
 800e82a:	009b      	lsls	r3, r3, #2
 800e82c:	4413      	add	r3, r2
 800e82e:	005b      	lsls	r3, r3, #1
 800e830:	1aca      	subs	r2, r1, r3
 800e832:	2a00      	cmp	r2, #0
 800e834:	d002      	beq.n	800e83c <mod_pub10sPackExtractGps+0x140>
	{
		sgb_flag4g = false;
 800e836:	4b24      	ldr	r3, [pc, #144]	; (800e8c8 <mod_pub10sPackExtractGps+0x1cc>)
 800e838:	2200      	movs	r2, #0
 800e83a:	701a      	strb	r2, [r3, #0]
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
 800e83c:	4b20      	ldr	r3, [pc, #128]	; (800e8c0 <mod_pub10sPackExtractGps+0x1c4>)
 800e83e:	781b      	ldrb	r3, [r3, #0]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d032      	beq.n	800e8aa <mod_pub10sPackExtractGps+0x1ae>
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <mod_pub10sPackExtractGps+0x1dc>)
 800e846:	781b      	ldrb	r3, [r3, #0]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d02e      	beq.n	800e8aa <mod_pub10sPackExtractGps+0x1ae>
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 800e84c:	481f      	ldr	r0, [pc, #124]	; (800e8cc <mod_pub10sPackExtractGps+0x1d0>)
 800e84e:	f003 fbdc 	bl	801200a <strlen>
 800e852:	4603      	mov	r3, r0
		sgb_flag4g = false;
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
 800e854:	b29b      	uxth	r3, r3
 800e856:	481d      	ldr	r0, [pc, #116]	; (800e8cc <mod_pub10sPackExtractGps+0x1d0>)
 800e858:	4619      	mov	r1, r3
 800e85a:	4a20      	ldr	r2, [pc, #128]	; (800e8dc <mod_pub10sPackExtractGps+0x1e0>)
 800e85c:	f7fe fe6c 	bl	800d538 <mod_mqttPublishData>
 800e860:	4603      	mov	r3, r0
 800e862:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);

		if (E_RET_SUCCESS == len_retStatus)
 800e866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d103      	bne.n	800e876 <mod_pub10sPackExtractGps+0x17a>
		{
			sgb_packetFlag = false;
 800e86e:	4b14      	ldr	r3, [pc, #80]	; (800e8c0 <mod_pub10sPackExtractGps+0x1c4>)
 800e870:	2200      	movs	r2, #0
 800e872:	701a      	strb	r2, [r3, #0]
 800e874:	e019      	b.n	800e8aa <mod_pub10sPackExtractGps+0x1ae>
		}
		else if (E_RET_INPROGRESS != len_retStatus)
 800e876:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e87a:	2b04      	cmp	r3, #4
 800e87c:	d015      	beq.n	800e8aa <mod_pub10sPackExtractGps+0x1ae>
		{
			lu8_retryCont++;
 800e87e:	4b18      	ldr	r3, [pc, #96]	; (800e8e0 <mod_pub10sPackExtractGps+0x1e4>)
 800e880:	781b      	ldrb	r3, [r3, #0]
 800e882:	3301      	adds	r3, #1
 800e884:	b2da      	uxtb	r2, r3
 800e886:	4b16      	ldr	r3, [pc, #88]	; (800e8e0 <mod_pub10sPackExtractGps+0x1e4>)
 800e888:	701a      	strb	r2, [r3, #0]
			if (3 > lu8_retryCont)
 800e88a:	4b15      	ldr	r3, [pc, #84]	; (800e8e0 <mod_pub10sPackExtractGps+0x1e4>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b02      	cmp	r3, #2
 800e890:	d80b      	bhi.n	800e8aa <mod_pub10sPackExtractGps+0x1ae>
			{
				lu8_retryCont = 0;
 800e892:	4b13      	ldr	r3, [pc, #76]	; (800e8e0 <mod_pub10sPackExtractGps+0x1e4>)
 800e894:	2200      	movs	r2, #0
 800e896:	701a      	strb	r2, [r3, #0]

				//write to SD card

				sgb_packetFlag = false;
 800e898:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <mod_pub10sPackExtractGps+0x1c4>)
 800e89a:	2200      	movs	r2, #0
 800e89c:	701a      	strb	r2, [r3, #0]
				gb_isMqttConnected = false;
 800e89e:	4b11      	ldr	r3, [pc, #68]	; (800e8e4 <mod_pub10sPackExtractGps+0x1e8>)
 800e8a0:	2200      	movs	r2, #0
 800e8a2:	701a      	strb	r2, [r3, #0]
				sen_4gRunState = E_MQTT_OPEN_STATE;
 800e8a4:	4b10      	ldr	r3, [pc, #64]	; (800e8e8 <mod_pub10sPackExtractGps+0x1ec>)
 800e8a6:	2209      	movs	r2, #9
 800e8a8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800e8aa:	4618      	mov	r0, r3
 800e8ac:	3730      	adds	r7, #48	; 0x30
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bdb0      	pop	{r4, r5, r7, pc}
 800e8b2:	bf00      	nop
 800e8b4:	1fff47f0 	.word	0x1fff47f0
 800e8b8:	55555556 	.word	0x55555556
 800e8bc:	1fff4771 	.word	0x1fff4771
 800e8c0:	1fff476f 	.word	0x1fff476f
 800e8c4:	66666667 	.word	0x66666667
 800e8c8:	1fff4770 	.word	0x1fff4770
 800e8cc:	1fff44a0 	.word	0x1fff44a0
 800e8d0:	08014068 	.word	0x08014068
 800e8d4:	1fff5234 	.word	0x1fff5234
 800e8d8:	1fff4796 	.word	0x1fff4796
 800e8dc:	08014330 	.word	0x08014330
 800e8e0:	1fff4792 	.word	0x1fff4792
 800e8e4:	1fff5230 	.word	0x1fff5230
 800e8e8:	1ffea4d8 	.word	0x1ffea4d8

0800e8ec <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800e8ec:	b480      	push	{r7}
 800e8ee:	b08f      	sub	sp, #60	; 0x3c
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	891a      	ldrh	r2, [r3, #8]
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	8a1b      	ldrh	r3, [r3, #16]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d301      	bcc.n	800e906 <load_descriptor_values+0x1a>
        return false;
 800e902:	2300      	movs	r3, #0
 800e904:	e153      	b.n	800ebae <load_descriptor_values+0x2c2>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	895b      	ldrh	r3, [r3, #10]
 800e910:	009b      	lsls	r3, r3, #2
 800e912:	4413      	add	r3, r2
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800e918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e91a:	0a1b      	lsrs	r3, r3, #8
 800e91c:	b2da      	uxtb	r2, r3
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800e922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e924:	f003 0303 	and.w	r3, r3, #3
 800e928:	2b01      	cmp	r3, #1
 800e92a:	d023      	beq.n	800e974 <load_descriptor_values+0x88>
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d302      	bcc.n	800e936 <load_descriptor_values+0x4a>
 800e930:	2b02      	cmp	r3, #2
 800e932:	d053      	beq.n	800e9dc <load_descriptor_values+0xf0>
 800e934:	e08e      	b.n	800ea54 <load_descriptor_values+0x168>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2201      	movs	r2, #1
 800e93a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800e93c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e93e:	089b      	lsrs	r3, r3, #2
 800e940:	b29b      	uxth	r3, r3
 800e942:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e946:	b29a      	uxth	r2, r3
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800e94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e94e:	0e1b      	lsrs	r3, r3, #24
 800e950:	b2db      	uxtb	r3, r3
 800e952:	f003 030f 	and.w	r3, r3, #15
 800e956:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800e95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e95c:	0c1b      	lsrs	r3, r3, #16
 800e95e:	b2db      	uxtb	r3, r3
 800e960:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 800e962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e964:	0f1b      	lsrs	r3, r3, #28
 800e966:	b29b      	uxth	r3, r3
 800e968:	f003 030f 	and.w	r3, r3, #15
 800e96c:	b29a      	uxth	r2, r3
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	825a      	strh	r2, [r3, #18]
            break;
 800e972:	e0b4      	b.n	800eade <load_descriptor_values+0x1f2>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	681a      	ldr	r2, [r3, #0]
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	895b      	ldrh	r3, [r3, #10]
 800e97e:	3301      	adds	r3, #1
 800e980:	009b      	lsls	r3, r3, #2
 800e982:	4413      	add	r3, r2
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	62bb      	str	r3, [r7, #40]	; 0x28

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800e988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e98a:	0c1b      	lsrs	r3, r3, #16
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e992:	b29a      	uxth	r2, r3
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800e998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e99a:	089b      	lsrs	r3, r3, #2
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9a2:	b29a      	uxth	r2, r3
 800e9a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9a6:	0f1b      	lsrs	r3, r3, #28
 800e9a8:	b29b      	uxth	r3, r3
 800e9aa:	019b      	lsls	r3, r3, #6
 800e9ac:	b29b      	uxth	r3, r3
 800e9ae:	4313      	orrs	r3, r2
 800e9b0:	b29a      	uxth	r2, r3
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800e9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b8:	0f1b      	lsrs	r3, r3, #28
 800e9ba:	b2db      	uxtb	r3, r3
 800e9bc:	f003 030f 	and.w	r3, r3, #15
 800e9c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800e9c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9c6:	b29b      	uxth	r3, r3
 800e9c8:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800e9ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9cc:	0c1b      	lsrs	r3, r3, #16
 800e9ce:	b29b      	uxth	r3, r3
 800e9d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e9d4:	b29a      	uxth	r2, r3
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	825a      	strh	r2, [r3, #18]
            break;
 800e9da:	e080      	b.n	800eade <load_descriptor_values+0x1f2>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	681a      	ldr	r2, [r3, #0]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	895b      	ldrh	r3, [r3, #10]
 800e9e6:	3301      	adds	r3, #1
 800e9e8:	009b      	lsls	r3, r3, #2
 800e9ea:	4413      	add	r3, r2
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	681a      	ldr	r2, [r3, #0]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	895b      	ldrh	r3, [r3, #10]
 800e9fa:	3302      	adds	r3, #2
 800e9fc:	009b      	lsls	r3, r3, #2
 800e9fe:	4413      	add	r3, r2
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	623b      	str	r3, [r7, #32]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681b      	ldr	r3, [r3, #0]
 800ea08:	681a      	ldr	r2, [r3, #0]
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	895b      	ldrh	r3, [r3, #10]
 800ea0e:	3303      	adds	r3, #3
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800ea18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1a:	0c1b      	lsrs	r3, r3, #16
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800ea22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea24:	089b      	lsrs	r3, r3, #2
 800ea26:	b29b      	uxth	r3, r3
 800ea28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea2c:	b29a      	uxth	r2, r3
 800ea2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea30:	0a1b      	lsrs	r3, r3, #8
 800ea32:	b29b      	uxth	r3, r3
 800ea34:	019b      	lsls	r3, r3, #6
 800ea36:	b29b      	uxth	r3, r3
 800ea38:	4313      	orrs	r3, r2
 800ea3a:	b29a      	uxth	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800ea46:	6a3b      	ldr	r3, [r7, #32]
 800ea48:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800ea4a:	69fb      	ldr	r3, [r7, #28]
 800ea4c:	b29a      	uxth	r2, r3
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	825a      	strh	r2, [r3, #18]
            break;
 800ea52:	e044      	b.n	800eade <load_descriptor_values+0x1f2>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	681a      	ldr	r2, [r3, #0]
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	895b      	ldrh	r3, [r3, #10]
 800ea5e:	3301      	adds	r3, #1
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4413      	add	r3, r2
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	681a      	ldr	r2, [r3, #0]
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	895b      	ldrh	r3, [r3, #10]
 800ea72:	3302      	adds	r3, #2
 800ea74:	009b      	lsls	r3, r3, #2
 800ea76:	4413      	add	r3, r2
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	681a      	ldr	r2, [r3, #0]
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	895b      	ldrh	r3, [r3, #10]
 800ea86:	3303      	adds	r3, #3
 800ea88:	009b      	lsls	r3, r3, #2
 800ea8a:	4413      	add	r3, r2
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	681a      	ldr	r2, [r3, #0]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	895b      	ldrh	r3, [r3, #10]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	009b      	lsls	r3, r3, #2
 800ea9e:	4413      	add	r3, r2
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	b29a      	uxth	r2, r3
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800eaac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaae:	089b      	lsrs	r3, r3, #2
 800eab0:	b29b      	uxth	r3, r3
 800eab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eab6:	b29a      	uxth	r2, r3
 800eab8:	69bb      	ldr	r3, [r7, #24]
 800eaba:	0a1b      	lsrs	r3, r3, #8
 800eabc:	b29b      	uxth	r3, r3
 800eabe:	019b      	lsls	r3, r3, #6
 800eac0:	b29b      	uxth	r3, r3
 800eac2:	4313      	orrs	r3, r2
 800eac4:	b29a      	uxth	r2, r3
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800eaca:	69bb      	ldr	r3, [r7, #24]
 800eacc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800ead0:	697b      	ldr	r3, [r7, #20]
 800ead2:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800ead4:	693b      	ldr	r3, [r7, #16]
 800ead6:	b29a      	uxth	r2, r3
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	825a      	strh	r2, [r3, #18]
            break;
 800eadc:	bf00      	nop
        }
    }

    if (!iter->message)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d106      	bne.n	800eaf4 <load_descriptor_values+0x208>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	2200      	movs	r2, #0
 800eaea:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2200      	movs	r2, #0
 800eaf0:	621a      	str	r2, [r3, #32]
 800eaf2:	e041      	b.n	800eb78 <load_descriptor_values+0x28c>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	685a      	ldr	r2, [r3, #4]
 800eaf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eafa:	441a      	add	r2, r3
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800eb00:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d008      	beq.n	800eb1a <load_descriptor_values+0x22e>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	699a      	ldr	r2, [r3, #24]
 800eb0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800eb10:	425b      	negs	r3, r3
 800eb12:	441a      	add	r2, r3
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	621a      	str	r2, [r3, #32]
 800eb18:	e01a      	b.n	800eb50 <load_descriptor_values+0x264>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	7d9b      	ldrb	r3, [r3, #22]
 800eb1e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800eb22:	2b20      	cmp	r3, #32
 800eb24:	d111      	bne.n	800eb4a <load_descriptor_values+0x25e>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	7d9b      	ldrb	r3, [r3, #22]
 800eb2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0

        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d005      	beq.n	800eb3e <load_descriptor_values+0x252>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	7d9b      	ldrb	r3, [r3, #22]
 800eb36:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800eb3a:	2b80      	cmp	r3, #128	; 0x80
 800eb3c:	d105      	bne.n	800eb4a <load_descriptor_values+0x25e>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	f103 0214 	add.w	r2, r3, #20
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	621a      	str	r2, [r3, #32]
 800eb48:	e002      	b.n	800eb50 <load_descriptor_values+0x264>
        }
        else
        {
            iter->pSize = NULL;
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7d9b      	ldrb	r3, [r3, #22]
 800eb54:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eb58:	2b80      	cmp	r3, #128	; 0x80
 800eb5a:	d109      	bne.n	800eb70 <load_descriptor_values+0x284>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	699b      	ldr	r3, [r3, #24]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d005      	beq.n	800eb70 <load_descriptor_values+0x284>
        {
            iter->pData = *(void**)iter->pField;
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	699b      	ldr	r3, [r3, #24]
 800eb68:	681a      	ldr	r2, [r3, #0]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	61da      	str	r2, [r3, #28]
 800eb6e:	e003      	b.n	800eb78 <load_descriptor_values+0x28c>
        }
        else
        {
            iter->pData = iter->pField;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	699a      	ldr	r2, [r3, #24]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	7d9b      	ldrb	r3, [r3, #22]
 800eb7c:	f003 030f 	and.w	r3, r3, #15
 800eb80:	2b08      	cmp	r3, #8
 800eb82:	d005      	beq.n	800eb90 <load_descriptor_values+0x2a4>
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	7d9b      	ldrb	r3, [r3, #22]
 800eb88:	f003 030f 	and.w	r3, r3, #15
 800eb8c:	2b09      	cmp	r3, #9
 800eb8e:	d10a      	bne.n	800eba6 <load_descriptor_values+0x2ba>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	685a      	ldr	r2, [r3, #4]
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	89db      	ldrh	r3, [r3, #14]
 800eb9a:	009b      	lsls	r3, r3, #2
 800eb9c:	4413      	add	r3, r2
 800eb9e:	681a      	ldr	r2, [r3, #0]
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	625a      	str	r2, [r3, #36]	; 0x24
 800eba4:	e002      	b.n	800ebac <load_descriptor_values+0x2c0>
    }
    else
    {
        iter->submsg_desc = NULL;
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	2200      	movs	r2, #0
 800ebaa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 800ebac:	2301      	movs	r3, #1
}
 800ebae:	4618      	mov	r0, r3
 800ebb0:	373c      	adds	r7, #60	; 0x3c
 800ebb2:	46bd      	mov	sp, r7
 800ebb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb8:	4770      	bx	lr
 800ebba:	bf00      	nop

0800ebbc <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800ebbc:	b480      	push	{r7}
 800ebbe:	b085      	sub	sp, #20
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
    iter->index++;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	891b      	ldrh	r3, [r3, #8]
 800ebc8:	3301      	adds	r3, #1
 800ebca:	b29a      	uxth	r2, r3
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	891a      	ldrh	r2, [r3, #8]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	8a1b      	ldrh	r3, [r3, #16]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d30c      	bcc.n	800ebf8 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2200      	movs	r2, #0
 800ebe8:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	2200      	movs	r2, #0
 800ebee:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2200      	movs	r2, #0
 800ebf4:	819a      	strh	r2, [r3, #12]
 800ebf6:	e03c      	b.n	800ec72 <advance_iterator+0xb6>
         * All field info formats have the following fields:
         * - lowest 2 bits tell the amount of words in the descriptor (2^n words)
         * - bits 2..7 give the lowest bits of tag number.
         * - bits 8..15 give the field type.
         */
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	681a      	ldr	r2, [r3, #0]
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	895b      	ldrh	r3, [r3, #10]
 800ec02:	009b      	lsls	r3, r3, #2
 800ec04:	4413      	add	r3, r2
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	0a1b      	lsrs	r3, r3, #8
 800ec0e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f003 0303 	and.w	r3, r3, #3
 800ec16:	2201      	movs	r2, #1
 800ec18:	fa02 f303 	lsl.w	r3, r2, r3
 800ec1c:	813b      	strh	r3, [r7, #8]

        /* Add to fields.
         * The cast to pb_size_t is needed to avoid -Wconversion warning.
         * Because the data is is constants from generator, there is no danger of overflow.
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	895a      	ldrh	r2, [r3, #10]
 800ec22:	893b      	ldrh	r3, [r7, #8]
 800ec24:	4413      	add	r3, r2
 800ec26:	b29a      	uxth	r2, r3
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	899a      	ldrh	r2, [r3, #12]
 800ec30:	7afb      	ldrb	r3, [r7, #11]
 800ec32:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	bf0c      	ite	eq
 800ec3a:	2301      	moveq	r3, #1
 800ec3c:	2300      	movne	r3, #0
 800ec3e:	b2db      	uxtb	r3, r3
 800ec40:	b29b      	uxth	r3, r3
 800ec42:	4413      	add	r3, r2
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	89da      	ldrh	r2, [r3, #14]
 800ec4e:	7afb      	ldrb	r3, [r7, #11]
 800ec50:	f003 030f 	and.w	r3, r3, #15
 800ec54:	2b08      	cmp	r3, #8
 800ec56:	d004      	beq.n	800ec62 <advance_iterator+0xa6>
 800ec58:	7afb      	ldrb	r3, [r7, #11]
 800ec5a:	f003 030f 	and.w	r3, r3, #15
 800ec5e:	2b09      	cmp	r3, #9
 800ec60:	d101      	bne.n	800ec66 <advance_iterator+0xaa>
 800ec62:	2301      	movs	r3, #1
 800ec64:	e000      	b.n	800ec68 <advance_iterator+0xac>
 800ec66:	2300      	movs	r3, #0
 800ec68:	b29b      	uxth	r3, r3
 800ec6a:	4413      	add	r3, r2
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	81da      	strh	r2, [r3, #14]
    }
}
 800ec72:	3714      	adds	r7, #20
 800ec74:	46bd      	mov	sp, r7
 800ec76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec7a:	4770      	bx	lr

0800ec7c <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b084      	sub	sp, #16
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	60f8      	str	r0, [r7, #12]
 800ec84:	60b9      	str	r1, [r7, #8]
 800ec86:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800ec88:	68f8      	ldr	r0, [r7, #12]
 800ec8a:	2100      	movs	r1, #0
 800ec8c:	2228      	movs	r2, #40	; 0x28
 800ec8e:	f002 feb4 	bl	80119fa <memset>

    iter->descriptor = desc;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	687a      	ldr	r2, [r7, #4]
 800ec9c:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800ec9e:	68f8      	ldr	r0, [r7, #12]
 800eca0:	f7ff fe24 	bl	800e8ec <load_descriptor_values>
 800eca4:	4603      	mov	r3, r0
}
 800eca6:	4618      	mov	r0, r3
 800eca8:	3710      	adds	r7, #16
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	bd80      	pop	{r7, pc}
 800ecae:	bf00      	nop

0800ecb0 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b086      	sub	sp, #24
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	689b      	ldr	r3, [r3, #8]
 800ecc0:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	0a1b      	lsrs	r3, r3, #8
 800ecce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ecd2:	2b80      	cmp	r3, #128	; 0x80
 800ecd4:	d109      	bne.n	800ecea <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800ecd6:	683b      	ldr	r3, [r7, #0]
 800ecd8:	3304      	adds	r3, #4
 800ecda:	6878      	ldr	r0, [r7, #4]
 800ecdc:	6939      	ldr	r1, [r7, #16]
 800ecde:	461a      	mov	r2, r3
 800ece0:	f7ff ffcc 	bl	800ec7c <pb_field_iter_begin>
 800ece4:	4603      	mov	r3, r0
 800ece6:	75fb      	strb	r3, [r7, #23]
 800ece8:	e008      	b.n	800ecfc <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800ecea:	683b      	ldr	r3, [r7, #0]
 800ecec:	685b      	ldr	r3, [r3, #4]
 800ecee:	6878      	ldr	r0, [r7, #4]
 800ecf0:	6939      	ldr	r1, [r7, #16]
 800ecf2:	461a      	mov	r2, r3
 800ecf4:	f7ff ffc2 	bl	800ec7c <pb_field_iter_begin>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800ecfc:	683b      	ldr	r3, [r7, #0]
 800ecfe:	f103 020c 	add.w	r2, r3, #12
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	621a      	str	r2, [r3, #32]
    return status;
 800ed06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed08:	4618      	mov	r0, r3
 800ed0a:	3718      	adds	r7, #24
 800ed0c:	46bd      	mov	sp, r7
 800ed0e:	bd80      	pop	{r7, pc}

0800ed10 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800ed10:	b580      	push	{r7, lr}
 800ed12:	b082      	sub	sp, #8
 800ed14:	af00      	add	r7, sp, #0
 800ed16:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800ed18:	6878      	ldr	r0, [r7, #4]
 800ed1a:	f7ff ff4f 	bl	800ebbc <advance_iterator>
    (void)load_descriptor_values(iter);
 800ed1e:	6878      	ldr	r0, [r7, #4]
 800ed20:	f7ff fde4 	bl	800e8ec <load_descriptor_values>
    return iter->index != 0;
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	891b      	ldrh	r3, [r3, #8]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	bf14      	ite	ne
 800ed2c:	2301      	movne	r3, #1
 800ed2e:	2300      	moveq	r3, #0
 800ed30:	b2db      	uxtb	r3, r3
}
 800ed32:	4618      	mov	r0, r3
 800ed34:	3708      	adds	r7, #8
 800ed36:	46bd      	mov	sp, r7
 800ed38:	bd80      	pop	{r7, pc}
 800ed3a:	bf00      	nop

0800ed3c <pb_const_cast>:
        return false;
    }
}

static void *pb_const_cast(const void *p)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b085      	sub	sp, #20
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800ed48:	68fb      	ldr	r3, [r7, #12]
}
 800ed4a:	4618      	mov	r0, r3
 800ed4c:	3714      	adds	r7, #20
 800ed4e:	46bd      	mov	sp, r7
 800ed50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed54:	4770      	bx	lr
 800ed56:	bf00      	nop

0800ed58 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af00      	add	r7, sp, #0
 800ed5e:	60f8      	str	r0, [r7, #12]
 800ed60:	60b9      	str	r1, [r7, #8]
 800ed62:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f7ff ffe9 	bl	800ed3c <pb_const_cast>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	68b9      	ldr	r1, [r7, #8]
 800ed70:	461a      	mov	r2, r3
 800ed72:	f7ff ff83 	bl	800ec7c <pb_field_iter_begin>
 800ed76:	4603      	mov	r3, r0
}
 800ed78:	4618      	mov	r0, r3
 800ed7a:	3710      	adds	r7, #16
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	bd80      	pop	{r7, pc}

0800ed80 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 800ed80:	b580      	push	{r7, lr}
 800ed82:	b082      	sub	sp, #8
 800ed84:	af00      	add	r7, sp, #0
 800ed86:	6078      	str	r0, [r7, #4]
 800ed88:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800ed8a:	6838      	ldr	r0, [r7, #0]
 800ed8c:	f7ff ffd6 	bl	800ed3c <pb_const_cast>
 800ed90:	4603      	mov	r3, r0
 800ed92:	6878      	ldr	r0, [r7, #4]
 800ed94:	4619      	mov	r1, r3
 800ed96:	f7ff ff8b 	bl	800ecb0 <pb_field_iter_begin_extension>
 800ed9a:	4603      	mov	r3, r0
}
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	3708      	adds	r7, #8
 800eda0:	46bd      	mov	sp, r7
 800eda2:	bd80      	pop	{r7, pc}

0800eda4 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	60f8      	str	r0, [r7, #12]
 800edac:	60b9      	str	r1, [r7, #8]
 800edae:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	8a5b      	ldrh	r3, [r3, #18]
 800edb4:	2b08      	cmp	r3, #8
 800edb6:	d125      	bne.n	800ee04 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	69db      	ldr	r3, [r3, #28]
 800edbc:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d01f      	beq.n	800ee04 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d00c      	beq.n	800ede4 <pb_default_field_callback+0x40>
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d008      	beq.n	800ede4 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 800edd2:	697b      	ldr	r3, [r7, #20]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	3204      	adds	r2, #4
 800edda:	68f8      	ldr	r0, [r7, #12]
 800eddc:	6879      	ldr	r1, [r7, #4]
 800edde:	4798      	blx	r3
 800ede0:	4603      	mov	r3, r0
 800ede2:	e010      	b.n	800ee06 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00c      	beq.n	800ee04 <pb_default_field_callback+0x60>
 800edea:	697b      	ldr	r3, [r7, #20]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d008      	beq.n	800ee04 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	697a      	ldr	r2, [r7, #20]
 800edf8:	3204      	adds	r2, #4
 800edfa:	68b8      	ldr	r0, [r7, #8]
 800edfc:	6879      	ldr	r1, [r7, #4]
 800edfe:	4798      	blx	r3
 800ee00:	4603      	mov	r3, r0
 800ee02:	e000      	b.n	800ee06 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800ee04:	2301      	movs	r3, #1

}
 800ee06:	4618      	mov	r0, r3
 800ee08:	3718      	adds	r7, #24
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}
 800ee0e:	bf00      	nop

0800ee10 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b086      	sub	sp, #24
 800ee14:	af00      	add	r7, sp, #0
 800ee16:	60f8      	str	r0, [r7, #12]
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800ee1c:	68fb      	ldr	r3, [r7, #12]
 800ee1e:	685b      	ldr	r3, [r3, #4]
 800ee20:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800ee22:	697a      	ldr	r2, [r7, #20]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	441a      	add	r2, r3
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800ee2c:	6978      	ldr	r0, [r7, #20]
 800ee2e:	68b9      	ldr	r1, [r7, #8]
 800ee30:	687a      	ldr	r2, [r7, #4]
 800ee32:	f002 fdd7 	bl	80119e4 <memcpy>
    
    return true;
 800ee36:	2301      	movs	r3, #1
}
 800ee38:	4618      	mov	r0, r3
 800ee3a:	3718      	adds	r7, #24
 800ee3c:	46bd      	mov	sp, r7
 800ee3e:	bd80      	pop	{r7, pc}

0800ee40 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800ee40:	b4b0      	push	{r4, r5, r7}
 800ee42:	b08b      	sub	sp, #44	; 0x2c
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800ee4c:	4b0b      	ldr	r3, [pc, #44]	; (800ee7c <pb_ostream_from_buffer+0x3c>)
 800ee4e:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800ee50:	68bb      	ldr	r3, [r7, #8]
 800ee52:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	461d      	mov	r5, r3
 800ee64:	f107 0414 	add.w	r4, r7, #20
 800ee68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ee6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ee6c:	6823      	ldr	r3, [r4, #0]
 800ee6e:	602b      	str	r3, [r5, #0]
}
 800ee70:	68f8      	ldr	r0, [r7, #12]
 800ee72:	372c      	adds	r7, #44	; 0x2c
 800ee74:	46bd      	mov	sp, r7
 800ee76:	bcb0      	pop	{r4, r5, r7}
 800ee78:	4770      	bx	lr
 800ee7a:	bf00      	nop
 800ee7c:	0800ee11 	.word	0x0800ee11

0800ee80 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	60f8      	str	r0, [r7, #12]
 800ee88:	60b9      	str	r1, [r7, #8]
 800ee8a:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d037      	beq.n	800ef02 <pb_write+0x82>
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d033      	beq.n	800ef02 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	68da      	ldr	r2, [r3, #12]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	441a      	add	r2, r3
 800eea2:	68fb      	ldr	r3, [r7, #12]
 800eea4:	68db      	ldr	r3, [r3, #12]
 800eea6:	429a      	cmp	r2, r3
 800eea8:	d307      	bcc.n	800eeba <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	68da      	ldr	r2, [r3, #12]
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	441a      	add	r2, r3
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	689b      	ldr	r3, [r3, #8]

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
    if (count > 0 && stream->callback != NULL)
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	d90b      	bls.n	800eed2 <pb_write+0x52>
            stream->bytes_written + count > stream->max_size)
        {
            PB_RETURN_ERROR(stream, "stream full");
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	691b      	ldr	r3, [r3, #16]
 800eebe:	2b00      	cmp	r3, #0
 800eec0:	d002      	beq.n	800eec8 <pb_write+0x48>
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	691b      	ldr	r3, [r3, #16]
 800eec6:	e000      	b.n	800eeca <pb_write+0x4a>
 800eec8:	4b13      	ldr	r3, [pc, #76]	; (800ef18 <pb_write+0x98>)
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	6113      	str	r3, [r2, #16]
 800eece:	2300      	movs	r3, #0
 800eed0:	e01e      	b.n	800ef10 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	681b      	ldr	r3, [r3, #0]
 800eed6:	68f8      	ldr	r0, [r7, #12]
 800eed8:	68b9      	ldr	r1, [r7, #8]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	4798      	blx	r3
 800eede:	4603      	mov	r3, r0
 800eee0:	f083 0301 	eor.w	r3, r3, #1
 800eee4:	b2db      	uxtb	r3, r3
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d00b      	beq.n	800ef02 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	691b      	ldr	r3, [r3, #16]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d002      	beq.n	800eef8 <pb_write+0x78>
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	691b      	ldr	r3, [r3, #16]
 800eef6:	e000      	b.n	800eefa <pb_write+0x7a>
 800eef8:	4b08      	ldr	r3, [pc, #32]	; (800ef1c <pb_write+0x9c>)
 800eefa:	68fa      	ldr	r2, [r7, #12]
 800eefc:	6113      	str	r3, [r2, #16]
 800eefe:	2300      	movs	r3, #0
 800ef00:	e006      	b.n	800ef10 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	68da      	ldr	r2, [r3, #12]
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	441a      	add	r2, r3
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	60da      	str	r2, [r3, #12]
    return true;
 800ef0e:	2301      	movs	r3, #1
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3710      	adds	r7, #16
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	08014340 	.word	0x08014340
 800ef1c:	0801434c 	.word	0x0801434c

0800ef20 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800ef20:	b480      	push	{r7}
 800ef22:	b085      	sub	sp, #20
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800ef2c:	2300      	movs	r3, #0
 800ef2e:	60fb      	str	r3, [r7, #12]
 800ef30:	e00a      	b.n	800ef48 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	4413      	add	r3, r2
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d001      	beq.n	800ef42 <safe_read_bool+0x22>
            return true;
 800ef3e:	2301      	movs	r3, #1
 800ef40:	e006      	b.n	800ef50 <safe_read_bool+0x30>
 */
static bool safe_read_bool(const void *pSize)
{
    const char *p = (const char *)pSize;
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	3301      	adds	r3, #1
 800ef46:	60fb      	str	r3, [r7, #12]
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d0f1      	beq.n	800ef32 <safe_read_bool+0x12>
    {
        if (p[i] != 0)
            return true;
    }
    return false;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	3714      	adds	r7, #20
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b08c      	sub	sp, #48	; 0x30
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
 800ef64:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	6a1b      	ldr	r3, [r3, #32]
 800ef6a:	881b      	ldrh	r3, [r3, #0]
 800ef6c:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 800ef6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d101      	bne.n	800ef78 <encode_array+0x1c>
        return true;
 800ef74:	2301      	movs	r3, #1
 800ef76:	e13e      	b.n	800f1f6 <encode_array+0x29a>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800ef78:	683b      	ldr	r3, [r7, #0]
 800ef7a:	7d9b      	ldrb	r3, [r3, #22]
 800ef7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ef80:	2b80      	cmp	r3, #128	; 0x80
 800ef82:	d010      	beq.n	800efa6 <encode_array+0x4a>
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	8a9b      	ldrh	r3, [r3, #20]
 800ef88:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	d90b      	bls.n	800efa6 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d002      	beq.n	800ef9c <encode_array+0x40>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	691b      	ldr	r3, [r3, #16]
 800ef9a:	e000      	b.n	800ef9e <encode_array+0x42>
 800ef9c:	4b98      	ldr	r3, [pc, #608]	; (800f200 <encode_array+0x2a4>)
 800ef9e:	687a      	ldr	r2, [r7, #4]
 800efa0:	6113      	str	r3, [r2, #16]
 800efa2:	2300      	movs	r3, #0
 800efa4:	e127      	b.n	800f1f6 <encode_array+0x29a>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	7d9b      	ldrb	r3, [r3, #22]
 800efaa:	f003 030f 	and.w	r3, r3, #15
 800efae:	2b05      	cmp	r3, #5
 800efb0:	f200 80b4 	bhi.w	800f11c <encode_array+0x1c0>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	8a1b      	ldrh	r3, [r3, #16]
 800efb8:	6878      	ldr	r0, [r7, #4]
 800efba:	2102      	movs	r1, #2
 800efbc:	461a      	mov	r2, r3
 800efbe:	f000 fcdf 	bl	800f980 <pb_encode_tag>
 800efc2:	4603      	mov	r3, r0
 800efc4:	f083 0301 	eor.w	r3, r3, #1
 800efc8:	b2db      	uxtb	r3, r3
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d001      	beq.n	800efd2 <encode_array+0x76>
            return false;
 800efce:	2300      	movs	r3, #0
 800efd0:	e111      	b.n	800f1f6 <encode_array+0x29a>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	7d9b      	ldrb	r3, [r3, #22]
 800efd6:	f003 030f 	and.w	r3, r3, #15
 800efda:	2b04      	cmp	r3, #4
 800efdc:	d103      	bne.n	800efe6 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800efde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800efe0:	009b      	lsls	r3, r3, #2
 800efe2:	62bb      	str	r3, [r7, #40]	; 0x28
 800efe4:	e049      	b.n	800f07a <encode_array+0x11e>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	7d9b      	ldrb	r3, [r3, #22]
 800efea:	f003 030f 	and.w	r3, r3, #15
 800efee:	2b05      	cmp	r3, #5
 800eff0:	d103      	bne.n	800effa <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800eff2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800eff4:	00db      	lsls	r3, r3, #3
 800eff6:	62bb      	str	r3, [r7, #40]	; 0x28
 800eff8:	e03f      	b.n	800f07a <encode_array+0x11e>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800effa:	2300      	movs	r3, #0
 800effc:	60bb      	str	r3, [r7, #8]
 800effe:	2300      	movs	r3, #0
 800f000:	60fb      	str	r3, [r7, #12]
 800f002:	2300      	movs	r3, #0
 800f004:	613b      	str	r3, [r7, #16]
 800f006:	2300      	movs	r3, #0
 800f008:	617b      	str	r3, [r7, #20]
 800f00a:	2300      	movs	r3, #0
 800f00c:	61bb      	str	r3, [r7, #24]
            void *pData_orig = field->pData;
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	69db      	ldr	r3, [r3, #28]
 800f012:	623b      	str	r3, [r7, #32]
            for (i = 0; i < count; i++)
 800f014:	2300      	movs	r3, #0
 800f016:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f018:	e026      	b.n	800f068 <encode_array+0x10c>
            {
                if (!pb_enc_varint(&sizestream, field))
 800f01a:	f107 0308 	add.w	r3, r7, #8
 800f01e:	4618      	mov	r0, r3
 800f020:	6839      	ldr	r1, [r7, #0]
 800f022:	f000 fde3 	bl	800fbec <pb_enc_varint>
 800f026:	4603      	mov	r3, r0
 800f028:	f083 0301 	eor.w	r3, r3, #1
 800f02c:	b2db      	uxtb	r3, r3
 800f02e:	2b00      	cmp	r3, #0
 800f030:	d010      	beq.n	800f054 <encode_array+0xf8>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	691b      	ldr	r3, [r3, #16]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d002      	beq.n	800f040 <encode_array+0xe4>
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	691b      	ldr	r3, [r3, #16]
 800f03e:	e005      	b.n	800f04c <encode_array+0xf0>
 800f040:	69bb      	ldr	r3, [r7, #24]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d001      	beq.n	800f04a <encode_array+0xee>
 800f046:	69bb      	ldr	r3, [r7, #24]
 800f048:	e000      	b.n	800f04c <encode_array+0xf0>
 800f04a:	4b6e      	ldr	r3, [pc, #440]	; (800f204 <encode_array+0x2a8>)
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	6113      	str	r3, [r2, #16]
 800f050:	2300      	movs	r3, #0
 800f052:	e0d0      	b.n	800f1f6 <encode_array+0x29a>
                field->pData = (char*)field->pData + field->data_size;
 800f054:	683b      	ldr	r3, [r7, #0]
 800f056:	69db      	ldr	r3, [r3, #28]
 800f058:	683a      	ldr	r2, [r7, #0]
 800f05a:	8a52      	ldrh	r2, [r2, #18]
 800f05c:	441a      	add	r2, r3
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	61da      	str	r2, [r3, #28]
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
            void *pData_orig = field->pData;
            for (i = 0; i < count; i++)
 800f062:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f064:	3301      	adds	r3, #1
 800f066:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f068:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f06a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f06c:	429a      	cmp	r2, r3
 800f06e:	d3d4      	bcc.n	800f01a <encode_array+0xbe>
            {
                if (!pb_enc_varint(&sizestream, field))
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
                field->pData = (char*)field->pData + field->data_size;
            }
            field->pData = pData_orig;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	6a3a      	ldr	r2, [r7, #32]
 800f074:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f07a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f07c:	461a      	mov	r2, r3
 800f07e:	f04f 0300 	mov.w	r3, #0
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	f000 fc00 	bl	800f888 <pb_encode_varint>
 800f088:	4603      	mov	r3, r0
 800f08a:	f083 0301 	eor.w	r3, r3, #1
 800f08e:	b2db      	uxtb	r3, r3
 800f090:	2b00      	cmp	r3, #0
 800f092:	d001      	beq.n	800f098 <encode_array+0x13c>
            return false;
 800f094:	2300      	movs	r3, #0
 800f096:	e0ae      	b.n	800f1f6 <encode_array+0x29a>
        
        if (stream->callback == NULL)
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d106      	bne.n	800f0ae <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	2100      	movs	r1, #0
 800f0a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0a6:	f7ff feeb 	bl	800ee80 <pb_write>
 800f0aa:	4603      	mov	r3, r0
 800f0ac:	e0a3      	b.n	800f1f6 <encode_array+0x29a>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800f0ae:	2300      	movs	r3, #0
 800f0b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f0b2:	e02e      	b.n	800f112 <encode_array+0x1b6>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800f0b4:	683b      	ldr	r3, [r7, #0]
 800f0b6:	7d9b      	ldrb	r3, [r3, #22]
 800f0b8:	f003 030f 	and.w	r3, r3, #15
 800f0bc:	2b04      	cmp	r3, #4
 800f0be:	d005      	beq.n	800f0cc <encode_array+0x170>
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	7d9b      	ldrb	r3, [r3, #22]
 800f0c4:	f003 030f 	and.w	r3, r3, #15
 800f0c8:	2b05      	cmp	r3, #5
 800f0ca:	d10c      	bne.n	800f0e6 <encode_array+0x18a>
            {
                if (!pb_enc_fixed(stream, field))
 800f0cc:	6878      	ldr	r0, [r7, #4]
 800f0ce:	6839      	ldr	r1, [r7, #0]
 800f0d0:	f000 fe40 	bl	800fd54 <pb_enc_fixed>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	f083 0301 	eor.w	r3, r3, #1
 800f0da:	b2db      	uxtb	r3, r3
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d001      	beq.n	800f0e4 <encode_array+0x188>
                    return false;
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e088      	b.n	800f1f6 <encode_array+0x29a>
        /* Write the data */
        for (i = 0; i < count; i++)
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
            {
                if (!pb_enc_fixed(stream, field))
 800f0e4:	e00b      	b.n	800f0fe <encode_array+0x1a2>
                    return false;
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	6839      	ldr	r1, [r7, #0]
 800f0ea:	f000 fd7f 	bl	800fbec <pb_enc_varint>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	f083 0301 	eor.w	r3, r3, #1
 800f0f4:	b2db      	uxtb	r3, r3
 800f0f6:	2b00      	cmp	r3, #0
 800f0f8:	d001      	beq.n	800f0fe <encode_array+0x1a2>
                    return false;
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	e07b      	b.n	800f1f6 <encode_array+0x29a>
            }

            field->pData = (char*)field->pData + field->data_size;
 800f0fe:	683b      	ldr	r3, [r7, #0]
 800f100:	69db      	ldr	r3, [r3, #28]
 800f102:	683a      	ldr	r2, [r7, #0]
 800f104:	8a52      	ldrh	r2, [r2, #18]
 800f106:	441a      	add	r2, r3
 800f108:	683b      	ldr	r3, [r7, #0]
 800f10a:	61da      	str	r2, [r3, #28]
        
        if (stream->callback == NULL)
            return pb_write(stream, NULL, size); /* Just sizing.. */
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800f10c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f10e:	3301      	adds	r3, #1
 800f110:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f112:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f114:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f116:	429a      	cmp	r2, r3
 800f118:	d3cc      	bcc.n	800f0b4 <encode_array+0x158>
 800f11a:	e06b      	b.n	800f1f4 <encode_array+0x298>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800f11c:	2300      	movs	r3, #0
 800f11e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f120:	e064      	b.n	800f1ec <encode_array+0x290>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f122:	683b      	ldr	r3, [r7, #0]
 800f124:	7d9b      	ldrb	r3, [r3, #22]
 800f126:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f12a:	2b80      	cmp	r3, #128	; 0x80
 800f12c:	d148      	bne.n	800f1c0 <encode_array+0x264>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	7d9b      	ldrb	r3, [r3, #22]
 800f132:	f003 030f 	and.w	r3, r3, #15
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f136:	2b07      	cmp	r3, #7
 800f138:	d005      	beq.n	800f146 <encode_array+0x1ea>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	7d9b      	ldrb	r3, [r3, #22]
 800f13e:	f003 030f 	and.w	r3, r3, #15
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f142:	2b06      	cmp	r3, #6
 800f144:	d13c      	bne.n	800f1c0 <encode_array+0x264>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
                bool status;
                void *pData_orig = field->pData;
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	69db      	ldr	r3, [r3, #28]
 800f14a:	61fb      	str	r3, [r7, #28]
                field->pData = *(void* const*)field->pData;
 800f14c:	683b      	ldr	r3, [r7, #0]
 800f14e:	69db      	ldr	r3, [r3, #28]
 800f150:	681a      	ldr	r2, [r3, #0]
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	69db      	ldr	r3, [r3, #28]
 800f15a:	2b00      	cmp	r3, #0
 800f15c:	d11c      	bne.n	800f198 <encode_array+0x23c>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	6839      	ldr	r1, [r7, #0]
 800f162:	f000 fc2f 	bl	800f9c4 <pb_encode_tag_for_field>
 800f166:	4603      	mov	r3, r0
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d00b      	beq.n	800f184 <encode_array+0x228>
                             pb_encode_varint(stream, 0);
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f04f 0200 	mov.w	r2, #0
 800f172:	f04f 0300 	mov.w	r3, #0
 800f176:	f000 fb87 	bl	800f888 <pb_encode_varint>
 800f17a:	4603      	mov	r3, r0
                field->pData = *(void* const*)field->pData;

                if (!field->pData)
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d001      	beq.n	800f184 <encode_array+0x228>
 800f180:	2301      	movs	r3, #1
 800f182:	e000      	b.n	800f186 <encode_array+0x22a>
 800f184:	2300      	movs	r3, #0
 800f186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f18a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f18e:	f003 0301 	and.w	r3, r3, #1
 800f192:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f196:	e006      	b.n	800f1a6 <encode_array+0x24a>
                             pb_encode_varint(stream, 0);
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800f198:	6878      	ldr	r0, [r7, #4]
 800f19a:	6839      	ldr	r1, [r7, #0]
 800f19c:	f000 f954 	bl	800f448 <encode_basic_field>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800f1a6:	683b      	ldr	r3, [r7, #0]
 800f1a8:	69fa      	ldr	r2, [r7, #28]
 800f1aa:	61da      	str	r2, [r3, #28]

                if (!status)
 800f1ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1b0:	f083 0301 	eor.w	r3, r3, #1
 800f1b4:	b2db      	uxtb	r3, r3
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d001      	beq.n	800f1be <encode_array+0x262>
                    return false;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	e01b      	b.n	800f1f6 <encode_array+0x29a>
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
 800f1be:	e00b      	b.n	800f1d8 <encode_array+0x27c>
                if (!status)
                    return false;
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800f1c0:	6878      	ldr	r0, [r7, #4]
 800f1c2:	6839      	ldr	r1, [r7, #0]
 800f1c4:	f000 f940 	bl	800f448 <encode_basic_field>
 800f1c8:	4603      	mov	r3, r0
 800f1ca:	f083 0301 	eor.w	r3, r3, #1
 800f1ce:	b2db      	uxtb	r3, r3
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d001      	beq.n	800f1d8 <encode_array+0x27c>
                    return false;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	e00e      	b.n	800f1f6 <encode_array+0x29a>
            }
            field->pData = (char*)field->pData + field->data_size;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	69db      	ldr	r3, [r3, #28]
 800f1dc:	683a      	ldr	r2, [r7, #0]
 800f1de:	8a52      	ldrh	r2, [r2, #18]
 800f1e0:	441a      	add	r2, r3
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	61da      	str	r2, [r3, #28]
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800f1e6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1e8:	3301      	adds	r3, #1
 800f1ea:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f1ec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f1ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d396      	bcc.n	800f122 <encode_array+0x1c6>
            }
            field->pData = (char*)field->pData + field->data_size;
        }
    }
    
    return true;
 800f1f4:	2301      	movs	r3, #1
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3730      	adds	r7, #48	; 0x30
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	08014358 	.word	0x08014358
 800f204:	08014370 	.word	0x08014370

0800f208 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b092      	sub	sp, #72	; 0x48
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	7d9b      	ldrb	r3, [r3, #22]
 800f214:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800f218:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f21c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f220:	2b00      	cmp	r3, #0
 800f222:	f040 80cb 	bne.w	800f3bc <pb_check_proto3_default_value+0x1b4>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800f226:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f22a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800f232:	2300      	movs	r3, #0
 800f234:	e102      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800f236:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f23a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f23e:	2b20      	cmp	r3, #32
 800f240:	d108      	bne.n	800f254 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	6a1b      	ldr	r3, [r3, #32]
 800f246:	881b      	ldrh	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	bf0c      	ite	eq
 800f24c:	2301      	moveq	r3, #1
 800f24e:	2300      	movne	r3, #0
 800f250:	b2db      	uxtb	r3, r3
 800f252:	e0f3      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800f254:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f258:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f25c:	2b30      	cmp	r3, #48	; 0x30
 800f25e:	d108      	bne.n	800f272 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	6a1b      	ldr	r3, [r3, #32]
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	bf0c      	ite	eq
 800f26a:	2301      	moveq	r3, #1
 800f26c:	2300      	movne	r3, #0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	e0e4      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800f272:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f276:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f27a:	2b10      	cmp	r3, #16
 800f27c:	d115      	bne.n	800f2aa <pb_check_proto3_default_value+0xa2>
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	6a1b      	ldr	r3, [r3, #32]
 800f282:	2b00      	cmp	r3, #0
 800f284:	d011      	beq.n	800f2aa <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a1b      	ldr	r3, [r3, #32]
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fe48 	bl	800ef20 <safe_read_bool>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	bf14      	ite	ne
 800f296:	2301      	movne	r3, #1
 800f298:	2300      	moveq	r3, #0
 800f29a:	b2db      	uxtb	r3, r3
 800f29c:	f083 0301 	eor.w	r3, r3, #1
 800f2a0:	b2db      	uxtb	r3, r3
 800f2a2:	f003 0301 	and.w	r3, r3, #1
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	e0c8      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->default_value)
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	689b      	ldr	r3, [r3, #8]
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d001      	beq.n	800f2b8 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800f2b4:	2300      	movs	r3, #0
 800f2b6:	e0c1      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800f2b8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f2bc:	f003 030f 	and.w	r3, r3, #15
 800f2c0:	2b05      	cmp	r3, #5
 800f2c2:	d81c      	bhi.n	800f2fe <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	69db      	ldr	r3, [r3, #28]
 800f2c8:	643b      	str	r3, [r7, #64]	; 0x40
            for (i = 0; i < field->data_size; i++)
 800f2ca:	2300      	movs	r3, #0
 800f2cc:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f2d0:	e00d      	b.n	800f2ee <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 800f2d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f2d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f2d8:	4413      	add	r3, r2
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d001      	beq.n	800f2e4 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	e0ab      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
            for (i = 0; i < field->data_size; i++)
 800f2e4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	8a5b      	ldrh	r3, [r3, #18]
 800f2f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d3eb      	bcc.n	800f2d2 <pb_check_proto3_default_value+0xca>
                {
                    return false;
                }
            }

            return true;
 800f2fa:	2301      	movs	r3, #1
 800f2fc:	e09e      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800f2fe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f302:	f003 030f 	and.w	r3, r3, #15
 800f306:	2b06      	cmp	r3, #6
 800f308:	d10a      	bne.n	800f320 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	69db      	ldr	r3, [r3, #28]
 800f30e:	63fb      	str	r3, [r7, #60]	; 0x3c
            return bytes->size == 0;
 800f310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f312:	881b      	ldrh	r3, [r3, #0]
 800f314:	2b00      	cmp	r3, #0
 800f316:	bf0c      	ite	eq
 800f318:	2301      	moveq	r3, #1
 800f31a:	2300      	movne	r3, #0
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	e08d      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800f320:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f324:	f003 030f 	and.w	r3, r3, #15
 800f328:	2b07      	cmp	r3, #7
 800f32a:	d108      	bne.n	800f33e <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	69db      	ldr	r3, [r3, #28]
 800f330:	781b      	ldrb	r3, [r3, #0]
 800f332:	2b00      	cmp	r3, #0
 800f334:	bf0c      	ite	eq
 800f336:	2301      	moveq	r3, #1
 800f338:	2300      	movne	r3, #0
 800f33a:	b2db      	uxtb	r3, r3
 800f33c:	e07e      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800f33e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f342:	f003 030f 	and.w	r3, r3, #15
 800f346:	2b0b      	cmp	r3, #11
 800f348:	d107      	bne.n	800f35a <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	8a5b      	ldrh	r3, [r3, #18]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	bf0c      	ite	eq
 800f352:	2301      	moveq	r3, #1
 800f354:	2300      	movne	r3, #0
 800f356:	b2db      	uxtb	r3, r3
 800f358:	e070      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800f35a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f35e:	f003 030f 	and.w	r3, r3, #15
 800f362:	2b08      	cmp	r3, #8
 800f364:	d005      	beq.n	800f372 <pb_check_proto3_default_value+0x16a>
 800f366:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f36a:	f003 030f 	and.w	r3, r3, #15
 800f36e:	2b09      	cmp	r3, #9
 800f370:	d163      	bne.n	800f43a <pb_check_proto3_default_value+0x232>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	69db      	ldr	r3, [r3, #28]
 800f37a:	f107 010c 	add.w	r1, r7, #12
 800f37e:	4608      	mov	r0, r1
 800f380:	4611      	mov	r1, r2
 800f382:	461a      	mov	r2, r3
 800f384:	f7ff fc7a 	bl	800ec7c <pb_field_iter_begin>
 800f388:	4603      	mov	r3, r0
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d014      	beq.n	800f3b8 <pb_check_proto3_default_value+0x1b0>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800f38e:	f107 030c 	add.w	r3, r7, #12
 800f392:	4618      	mov	r0, r3
 800f394:	f7ff ff38 	bl	800f208 <pb_check_proto3_default_value>
 800f398:	4603      	mov	r3, r0
 800f39a:	f083 0301 	eor.w	r3, r3, #1
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d001      	beq.n	800f3a8 <pb_check_proto3_default_value+0x1a0>
                    {
                        return false;
 800f3a4:	2300      	movs	r3, #0
 800f3a6:	e049      	b.n	800f43c <pb_check_proto3_default_value+0x234>
                    }
                } while (pb_field_iter_next(&iter));
 800f3a8:	f107 030c 	add.w	r3, r7, #12
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f7ff fcaf 	bl	800ed10 <pb_field_iter_next>
 800f3b2:	4603      	mov	r3, r0
 800f3b4:	2b00      	cmp	r3, #0
 800f3b6:	d1ea      	bne.n	800f38e <pb_check_proto3_default_value+0x186>
            }
            return true;
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	e03f      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800f3bc:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f3c0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f3c4:	2b80      	cmp	r3, #128	; 0x80
 800f3c6:	d107      	bne.n	800f3d8 <pb_check_proto3_default_value+0x1d0>
    {
        return field->pData == NULL;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	69db      	ldr	r3, [r3, #28]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	bf0c      	ite	eq
 800f3d0:	2301      	moveq	r3, #1
 800f3d2:	2300      	movne	r3, #0
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	e031      	b.n	800f43c <pb_check_proto3_default_value+0x234>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800f3d8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f3dc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f3e0:	2b40      	cmp	r3, #64	; 0x40
 800f3e2:	d12a      	bne.n	800f43a <pb_check_proto3_default_value+0x232>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800f3e4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f3e8:	f003 030f 	and.w	r3, r3, #15
 800f3ec:	2b0a      	cmp	r3, #10
 800f3ee:	d10a      	bne.n	800f406 <pb_check_proto3_default_value+0x1fe>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	69db      	ldr	r3, [r3, #28]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	63bb      	str	r3, [r7, #56]	; 0x38
            return extension == NULL;
 800f3f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	bf0c      	ite	eq
 800f3fe:	2301      	moveq	r3, #1
 800f400:	2300      	movne	r3, #0
 800f402:	b2db      	uxtb	r3, r3
 800f404:	e01a      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	68db      	ldr	r3, [r3, #12]
 800f40c:	4a0d      	ldr	r2, [pc, #52]	; (800f444 <pb_check_proto3_default_value+0x23c>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d10a      	bne.n	800f428 <pb_check_proto3_default_value+0x220>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	69db      	ldr	r3, [r3, #28]
 800f416:	637b      	str	r3, [r7, #52]	; 0x34
            return pCallback->funcs.encode == NULL;
 800f418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	bf0c      	ite	eq
 800f420:	2301      	moveq	r3, #1
 800f422:	2300      	movne	r3, #0
 800f424:	b2db      	uxtb	r3, r3
 800f426:	e009      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	bf0c      	ite	eq
 800f432:	2301      	moveq	r3, #1
 800f434:	2300      	movne	r3, #0
 800f436:	b2db      	uxtb	r3, r3
 800f438:	e000      	b.n	800f43c <pb_check_proto3_default_value+0x234>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800f43a:	2300      	movs	r3, #0
}
 800f43c:	4618      	mov	r0, r3
 800f43e:	3748      	adds	r7, #72	; 0x48
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}
 800f444:	0800eda5 	.word	0x0800eda5

0800f448 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b082      	sub	sp, #8
 800f44c:	af00      	add	r7, sp, #0
 800f44e:	6078      	str	r0, [r7, #4]
 800f450:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	69db      	ldr	r3, [r3, #28]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d101      	bne.n	800f45e <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800f45a:	2301      	movs	r3, #1
 800f45c:	e061      	b.n	800f522 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800f45e:	6878      	ldr	r0, [r7, #4]
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	f000 faaf 	bl	800f9c4 <pb_encode_tag_for_field>
 800f466:	4603      	mov	r3, r0
 800f468:	f083 0301 	eor.w	r3, r3, #1
 800f46c:	b2db      	uxtb	r3, r3
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d001      	beq.n	800f476 <encode_basic_field+0x2e>
        return false;
 800f472:	2300      	movs	r3, #0
 800f474:	e055      	b.n	800f522 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800f476:	683b      	ldr	r3, [r7, #0]
 800f478:	7d9b      	ldrb	r3, [r3, #22]
 800f47a:	f003 030f 	and.w	r3, r3, #15
 800f47e:	2b0b      	cmp	r3, #11
 800f480:	d844      	bhi.n	800f50c <encode_basic_field+0xc4>
 800f482:	a201      	add	r2, pc, #4	; (adr r2, 800f488 <encode_basic_field+0x40>)
 800f484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f488:	0800f4b9 	.word	0x0800f4b9
 800f48c:	0800f4c5 	.word	0x0800f4c5
 800f490:	0800f4c5 	.word	0x0800f4c5
 800f494:	0800f4c5 	.word	0x0800f4c5
 800f498:	0800f4d1 	.word	0x0800f4d1
 800f49c:	0800f4d1 	.word	0x0800f4d1
 800f4a0:	0800f4dd 	.word	0x0800f4dd
 800f4a4:	0800f4e9 	.word	0x0800f4e9
 800f4a8:	0800f4f5 	.word	0x0800f4f5
 800f4ac:	0800f4f5 	.word	0x0800f4f5
 800f4b0:	0800f50d 	.word	0x0800f50d
 800f4b4:	0800f501 	.word	0x0800f501
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800f4b8:	6878      	ldr	r0, [r7, #4]
 800f4ba:	6839      	ldr	r1, [r7, #0]
 800f4bc:	f000 fb7e 	bl	800fbbc <pb_enc_bool>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	e02e      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800f4c4:	6878      	ldr	r0, [r7, #4]
 800f4c6:	6839      	ldr	r1, [r7, #0]
 800f4c8:	f000 fb90 	bl	800fbec <pb_enc_varint>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	e028      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800f4d0:	6878      	ldr	r0, [r7, #4]
 800f4d2:	6839      	ldr	r1, [r7, #0]
 800f4d4:	f000 fc3e 	bl	800fd54 <pb_enc_fixed>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	e022      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	6839      	ldr	r1, [r7, #0]
 800f4e0:	f000 fc66 	bl	800fdb0 <pb_enc_bytes>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	e01c      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800f4e8:	6878      	ldr	r0, [r7, #4]
 800f4ea:	6839      	ldr	r1, [r7, #0]
 800f4ec:	f000 fc9e 	bl	800fe2c <pb_enc_string>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	e016      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	6839      	ldr	r1, [r7, #0]
 800f4f8:	f000 fcf6 	bl	800fee8 <pb_enc_submessage>
 800f4fc:	4603      	mov	r3, r0
 800f4fe:	e010      	b.n	800f522 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	f000 fd36 	bl	800ff74 <pb_enc_fixed_length_bytes>
 800f508:	4603      	mov	r3, r0
 800f50a:	e00a      	b.n	800f522 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	691b      	ldr	r3, [r3, #16]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d002      	beq.n	800f51a <encode_basic_field+0xd2>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	691b      	ldr	r3, [r3, #16]
 800f518:	e000      	b.n	800f51c <encode_basic_field+0xd4>
 800f51a:	4b04      	ldr	r3, [pc, #16]	; (800f52c <encode_basic_field+0xe4>)
 800f51c:	687a      	ldr	r2, [r7, #4]
 800f51e:	6113      	str	r3, [r2, #16]
 800f520:	2300      	movs	r3, #0
    }
}
 800f522:	4618      	mov	r0, r3
 800f524:	3708      	adds	r7, #8
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	08014378 	.word	0x08014378

0800f530 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d018      	beq.n	800f576 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	681b      	ldr	r3, [r3, #0]
 800f548:	68db      	ldr	r3, [r3, #12]
 800f54a:	2000      	movs	r0, #0
 800f54c:	6879      	ldr	r1, [r7, #4]
 800f54e:	683a      	ldr	r2, [r7, #0]
 800f550:	4798      	blx	r3
 800f552:	4603      	mov	r3, r0
 800f554:	f083 0301 	eor.w	r3, r3, #1
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d00b      	beq.n	800f576 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	691b      	ldr	r3, [r3, #16]
 800f562:	2b00      	cmp	r3, #0
 800f564:	d002      	beq.n	800f56c <encode_callback_field+0x3c>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	691b      	ldr	r3, [r3, #16]
 800f56a:	e000      	b.n	800f56e <encode_callback_field+0x3e>
 800f56c:	4b04      	ldr	r3, [pc, #16]	; (800f580 <encode_callback_field+0x50>)
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6113      	str	r3, [r2, #16]
 800f572:	2300      	movs	r3, #0
 800f574:	e000      	b.n	800f578 <encode_callback_field+0x48>
    }
    return true;
 800f576:	2301      	movs	r3, #1
}
 800f578:	4618      	mov	r0, r3
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	0801438c 	.word	0x0801438c

0800f584 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
 800f58c:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	7d9b      	ldrb	r3, [r3, #22]
 800f592:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f596:	2b30      	cmp	r3, #48	; 0x30
 800f598:	d108      	bne.n	800f5ac <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800f59a:	683b      	ldr	r3, [r7, #0]
 800f59c:	6a1b      	ldr	r3, [r3, #32]
 800f59e:	881a      	ldrh	r2, [r3, #0]
 800f5a0:	683b      	ldr	r3, [r7, #0]
 800f5a2:	8a1b      	ldrh	r3, [r3, #16]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d026      	beq.n	800f5f6 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	e059      	b.n	800f660 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f5ac:	683b      	ldr	r3, [r7, #0]
 800f5ae:	7d9b      	ldrb	r3, [r3, #22]
 800f5b0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f5b4:	2b10      	cmp	r3, #16
 800f5b6:	d11e      	bne.n	800f5f6 <encode_field+0x72>
    {
        if (field->pSize)
 800f5b8:	683b      	ldr	r3, [r7, #0]
 800f5ba:	6a1b      	ldr	r3, [r3, #32]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d00c      	beq.n	800f5da <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800f5c0:	683b      	ldr	r3, [r7, #0]
 800f5c2:	6a1b      	ldr	r3, [r3, #32]
 800f5c4:	4618      	mov	r0, r3
 800f5c6:	f7ff fcab 	bl	800ef20 <safe_read_bool>
 800f5ca:	4603      	mov	r3, r0
 800f5cc:	f083 0301 	eor.w	r3, r3, #1
 800f5d0:	b2db      	uxtb	r3, r3
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d00f      	beq.n	800f5f6 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800f5d6:	2301      	movs	r3, #1
 800f5d8:	e042      	b.n	800f660 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	7d9b      	ldrb	r3, [r3, #22]
 800f5de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d107      	bne.n	800f5f6 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800f5e6:	6838      	ldr	r0, [r7, #0]
 800f5e8:	f7ff fe0e 	bl	800f208 <pb_check_proto3_default_value>
 800f5ec:	4603      	mov	r3, r0
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d001      	beq.n	800f5f6 <encode_field+0x72>
                return true;
 800f5f2:	2301      	movs	r3, #1
 800f5f4:	e034      	b.n	800f660 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800f5f6:	683b      	ldr	r3, [r7, #0]
 800f5f8:	69db      	ldr	r3, [r3, #28]
 800f5fa:	2b00      	cmp	r3, #0
 800f5fc:	d113      	bne.n	800f626 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	7d9b      	ldrb	r3, [r3, #22]
 800f602:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f606:	2b00      	cmp	r3, #0
 800f608:	d10b      	bne.n	800f622 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	691b      	ldr	r3, [r3, #16]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d002      	beq.n	800f618 <encode_field+0x94>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	691b      	ldr	r3, [r3, #16]
 800f616:	e000      	b.n	800f61a <encode_field+0x96>
 800f618:	4b13      	ldr	r3, [pc, #76]	; (800f668 <encode_field+0xe4>)
 800f61a:	687a      	ldr	r2, [r7, #4]
 800f61c:	6113      	str	r3, [r2, #16]
 800f61e:	2300      	movs	r3, #0
 800f620:	e01e      	b.n	800f660 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800f622:	2301      	movs	r3, #1
 800f624:	e01c      	b.n	800f660 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800f626:	683b      	ldr	r3, [r7, #0]
 800f628:	7d9b      	ldrb	r3, [r3, #22]
 800f62a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f62e:	2b40      	cmp	r3, #64	; 0x40
 800f630:	d105      	bne.n	800f63e <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	6839      	ldr	r1, [r7, #0]
 800f636:	f7ff ff7b 	bl	800f530 <encode_callback_field>
 800f63a:	4603      	mov	r3, r0
 800f63c:	e010      	b.n	800f660 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	7d9b      	ldrb	r3, [r3, #22]
 800f642:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f646:	2b20      	cmp	r3, #32
 800f648:	d105      	bne.n	800f656 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800f64a:	6878      	ldr	r0, [r7, #4]
 800f64c:	6839      	ldr	r1, [r7, #0]
 800f64e:	f7ff fc85 	bl	800ef5c <encode_array>
 800f652:	4603      	mov	r3, r0
 800f654:	e004      	b.n	800f660 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	6839      	ldr	r1, [r7, #0]
 800f65a:	f7ff fef5 	bl	800f448 <encode_basic_field>
 800f65e:	4603      	mov	r3, r0
    }
}
 800f660:	4618      	mov	r0, r3
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}
 800f668:	0801439c 	.word	0x0801439c

0800f66c <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800f66c:	b580      	push	{r7, lr}
 800f66e:	b08c      	sub	sp, #48	; 0x30
 800f670:	af00      	add	r7, sp, #0
 800f672:	6078      	str	r0, [r7, #4]
 800f674:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800f676:	f107 0308 	add.w	r3, r7, #8
 800f67a:	4618      	mov	r0, r3
 800f67c:	6839      	ldr	r1, [r7, #0]
 800f67e:	f7ff fb7f 	bl	800ed80 <pb_field_iter_begin_extension_const>
 800f682:	4603      	mov	r3, r0
 800f684:	f083 0301 	eor.w	r3, r3, #1
 800f688:	b2db      	uxtb	r3, r3
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	d00b      	beq.n	800f6a6 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	691b      	ldr	r3, [r3, #16]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d002      	beq.n	800f69c <default_extension_encoder+0x30>
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	691b      	ldr	r3, [r3, #16]
 800f69a:	e000      	b.n	800f69e <default_extension_encoder+0x32>
 800f69c:	4b07      	ldr	r3, [pc, #28]	; (800f6bc <default_extension_encoder+0x50>)
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	6113      	str	r3, [r2, #16]
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	e006      	b.n	800f6b4 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800f6a6:	f107 0308 	add.w	r3, r7, #8
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	4619      	mov	r1, r3
 800f6ae:	f7ff ff69 	bl	800f584 <encode_field>
 800f6b2:	4603      	mov	r3, r0
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3730      	adds	r7, #48	; 0x30
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}
 800f6bc:	080143b4 	.word	0x080143b4

0800f6c0 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b084      	sub	sp, #16
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	6078      	str	r0, [r7, #4]
 800f6c8:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	69db      	ldr	r3, [r3, #28]
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	60fb      	str	r3, [r7, #12]

    while (extension)
 800f6d2:	e01e      	b.n	800f712 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	681b      	ldr	r3, [r3, #0]
 800f6d8:	685b      	ldr	r3, [r3, #4]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	d008      	beq.n	800f6f0 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	6878      	ldr	r0, [r7, #4]
 800f6e6:	68f9      	ldr	r1, [r7, #12]
 800f6e8:	4798      	blx	r3
 800f6ea:	4603      	mov	r3, r0
 800f6ec:	72fb      	strb	r3, [r7, #11]
 800f6ee:	e005      	b.n	800f6fc <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800f6f0:	6878      	ldr	r0, [r7, #4]
 800f6f2:	68f9      	ldr	r1, [r7, #12]
 800f6f4:	f7ff ffba 	bl	800f66c <default_extension_encoder>
 800f6f8:	4603      	mov	r3, r0
 800f6fa:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800f6fc:	7afb      	ldrb	r3, [r7, #11]
 800f6fe:	f083 0301 	eor.w	r3, r3, #1
 800f702:	b2db      	uxtb	r3, r3
 800f704:	2b00      	cmp	r3, #0
 800f706:	d001      	beq.n	800f70c <encode_extension_field+0x4c>
            return false;
 800f708:	2300      	movs	r3, #0
 800f70a:	e006      	b.n	800f71a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	689b      	ldr	r3, [r3, #8]
 800f710:	60fb      	str	r3, [r7, #12]
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;

    while (extension)
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1dd      	bne.n	800f6d4 <encode_extension_field+0x14>
            return false;
        
        extension = extension->next;
    }
    
    return true;
 800f718:	2301      	movs	r3, #1
}
 800f71a:	4618      	mov	r0, r3
 800f71c:	3710      	adds	r7, #16
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop

0800f724 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f724:	b580      	push	{r7, lr}
 800f726:	b08e      	sub	sp, #56	; 0x38
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800f730:	f107 0310 	add.w	r3, r7, #16
 800f734:	4618      	mov	r0, r3
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	687a      	ldr	r2, [r7, #4]
 800f73a:	f7ff fb0d 	bl	800ed58 <pb_field_iter_begin_const>
 800f73e:	4603      	mov	r3, r0
 800f740:	f083 0301 	eor.w	r3, r3, #1
 800f744:	b2db      	uxtb	r3, r3
 800f746:	2b00      	cmp	r3, #0
 800f748:	d001      	beq.n	800f74e <pb_encode+0x2a>
        return true; /* Empty message type */
 800f74a:	2301      	movs	r3, #1
 800f74c:	e02a      	b.n	800f7a4 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800f74e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f752:	f003 030f 	and.w	r3, r3, #15
 800f756:	2b0a      	cmp	r3, #10
 800f758:	d10d      	bne.n	800f776 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800f75a:	f107 0310 	add.w	r3, r7, #16
 800f75e:	68f8      	ldr	r0, [r7, #12]
 800f760:	4619      	mov	r1, r3
 800f762:	f7ff ffad 	bl	800f6c0 <encode_extension_field>
 800f766:	4603      	mov	r3, r0
 800f768:	f083 0301 	eor.w	r3, r3, #1
 800f76c:	b2db      	uxtb	r3, r3
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00f      	beq.n	800f792 <pb_encode+0x6e>
                return false;
 800f772:	2300      	movs	r3, #0
 800f774:	e016      	b.n	800f7a4 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800f776:	f107 0310 	add.w	r3, r7, #16
 800f77a:	68f8      	ldr	r0, [r7, #12]
 800f77c:	4619      	mov	r1, r3
 800f77e:	f7ff ff01 	bl	800f584 <encode_field>
 800f782:	4603      	mov	r3, r0
 800f784:	f083 0301 	eor.w	r3, r3, #1
 800f788:	b2db      	uxtb	r3, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	d001      	beq.n	800f792 <pb_encode+0x6e>
                return false;
 800f78e:	2300      	movs	r3, #0
 800f790:	e008      	b.n	800f7a4 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800f792:	f107 0310 	add.w	r3, r7, #16
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff faba 	bl	800ed10 <pb_field_iter_next>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	d1d5      	bne.n	800f74e <pb_encode+0x2a>
    
    return true;
 800f7a2:	2301      	movs	r3, #1
}
 800f7a4:	4618      	mov	r0, r3
 800f7a6:	3738      	adds	r7, #56	; 0x38
 800f7a8:	46bd      	mov	sp, r7
 800f7aa:	bd80      	pop	{r7, pc}

0800f7ac <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b088      	sub	sp, #32
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800f7b8:	2300      	movs	r3, #0
 800f7ba:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	b2db      	uxtb	r3, r3
 800f7c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7c4:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	09db      	lsrs	r3, r3, #7
 800f7ca:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800f7cc:	e014      	b.n	800f7f8 <pb_encode_varint_32+0x4c>
    {
        byte |= 0x80;
 800f7ce:	7efb      	ldrb	r3, [r7, #27]
 800f7d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f7d4:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 800f7d6:	69fb      	ldr	r3, [r7, #28]
 800f7d8:	1c5a      	adds	r2, r3, #1
 800f7da:	61fa      	str	r2, [r7, #28]
 800f7dc:	f107 0220 	add.w	r2, r7, #32
 800f7e0:	4413      	add	r3, r2
 800f7e2:	7efa      	ldrb	r2, [r7, #27]
 800f7e4:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 800f7e8:	68bb      	ldr	r3, [r7, #8]
 800f7ea:	b2db      	uxtb	r3, r3
 800f7ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7f0:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	09db      	lsrs	r3, r3, #7
 800f7f6:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
    low >>= 7;

    while (i < 4 && (low != 0 || high != 0))
 800f7f8:	69fb      	ldr	r3, [r7, #28]
 800f7fa:	2b03      	cmp	r3, #3
 800f7fc:	d805      	bhi.n	800f80a <pb_encode_varint_32+0x5e>
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	2b00      	cmp	r3, #0
 800f802:	d1e4      	bne.n	800f7ce <pb_encode_varint_32+0x22>
 800f804:	687b      	ldr	r3, [r7, #4]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d1e1      	bne.n	800f7ce <pb_encode_varint_32+0x22>
        buffer[i++] = byte;
        byte = (pb_byte_t)(low & 0x7F);
        low >>= 7;
    }

    if (high)
 800f80a:	687b      	ldr	r3, [r7, #4]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d025      	beq.n	800f85c <pb_encode_varint_32+0xb0>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	b2db      	uxtb	r3, r3
 800f814:	f003 0307 	and.w	r3, r3, #7
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	011b      	lsls	r3, r3, #4
 800f81c:	b2da      	uxtb	r2, r3
 800f81e:	7efb      	ldrb	r3, [r7, #27]
 800f820:	4313      	orrs	r3, r2
 800f822:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800f824:	687b      	ldr	r3, [r7, #4]
 800f826:	08db      	lsrs	r3, r3, #3
 800f828:	607b      	str	r3, [r7, #4]

        while (high)
 800f82a:	e014      	b.n	800f856 <pb_encode_varint_32+0xaa>
        {
            byte |= 0x80;
 800f82c:	7efb      	ldrb	r3, [r7, #27]
 800f82e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f832:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 800f834:	69fb      	ldr	r3, [r7, #28]
 800f836:	1c5a      	adds	r2, r3, #1
 800f838:	61fa      	str	r2, [r7, #28]
 800f83a:	f107 0220 	add.w	r2, r7, #32
 800f83e:	4413      	add	r3, r2
 800f840:	7efa      	ldrb	r2, [r7, #27]
 800f842:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f84e:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	09db      	lsrs	r3, r3, #7
 800f854:	607b      	str	r3, [r7, #4]
    if (high)
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
        high >>= 3;

        while (high)
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d1e7      	bne.n	800f82c <pb_encode_varint_32+0x80>
            byte = (pb_byte_t)(high & 0x7F);
            high >>= 7;
        }
    }

    buffer[i++] = byte;
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	1c5a      	adds	r2, r3, #1
 800f860:	61fa      	str	r2, [r7, #28]
 800f862:	f107 0220 	add.w	r2, r7, #32
 800f866:	4413      	add	r3, r2
 800f868:	7efa      	ldrb	r2, [r7, #27]
 800f86a:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800f86e:	f107 0310 	add.w	r3, r7, #16
 800f872:	68f8      	ldr	r0, [r7, #12]
 800f874:	4619      	mov	r1, r3
 800f876:	69fa      	ldr	r2, [r7, #28]
 800f878:	f7ff fb02 	bl	800ee80 <pb_write>
 800f87c:	4603      	mov	r3, r0
}
 800f87e:	4618      	mov	r0, r3
 800f880:	3720      	adds	r7, #32
 800f882:	46bd      	mov	sp, r7
 800f884:	bd80      	pop	{r7, pc}
 800f886:	bf00      	nop

0800f888 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800f888:	b5b0      	push	{r4, r5, r7, lr}
 800f88a:	b086      	sub	sp, #24
 800f88c:	af00      	add	r7, sp, #0
 800f88e:	60f8      	str	r0, [r7, #12]
 800f890:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800f894:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f898:	2b00      	cmp	r3, #0
 800f89a:	bf08      	it	eq
 800f89c:	2a80      	cmpeq	r2, #128	; 0x80
 800f89e:	d20a      	bcs.n	800f8b6 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800f8a0:	783b      	ldrb	r3, [r7, #0]
 800f8a2:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800f8a4:	f107 0317 	add.w	r3, r7, #23
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	4619      	mov	r1, r3
 800f8ac:	2201      	movs	r2, #1
 800f8ae:	f7ff fae7 	bl	800ee80 <pb_write>
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	e00a      	b.n	800f8cc <pb_encode_varint+0x44>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800f8b6:	6839      	ldr	r1, [r7, #0]
 800f8b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8bc:	001c      	movs	r4, r3
 800f8be:	2500      	movs	r5, #0
 800f8c0:	4623      	mov	r3, r4
 800f8c2:	68f8      	ldr	r0, [r7, #12]
 800f8c4:	461a      	mov	r2, r3
 800f8c6:	f7ff ff71 	bl	800f7ac <pb_encode_varint_32>
 800f8ca:	4603      	mov	r3, r0
#endif
    }
}
 800f8cc:	4618      	mov	r0, r3
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bdb0      	pop	{r4, r5, r7, pc}

0800f8d4 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b088      	sub	sp, #32
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	60f8      	str	r0, [r7, #12]
 800f8dc:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800f8e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f8e4:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f8e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (value < 0)
 800f8ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f8f0:	2a00      	cmp	r2, #0
 800f8f2:	f173 0300 	sbcs.w	r3, r3, #0
 800f8f6:	da11      	bge.n	800f91c <pb_encode_svarint+0x48>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800f8f8:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f8fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f900:	ea02 0200 	and.w	r2, r2, r0
 800f904:	ea03 0301 	and.w	r3, r3, r1
 800f908:	1892      	adds	r2, r2, r2
 800f90a:	eb43 0303 	adc.w	r3, r3, r3
 800f90e:	ea6f 0202 	mvn.w	r2, r2
 800f912:	ea6f 0303 	mvn.w	r3, r3
 800f916:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800f91a:	e006      	b.n	800f92a <pb_encode_svarint+0x56>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800f91c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f920:	1892      	adds	r2, r2, r2
 800f922:	eb43 0303 	adc.w	r3, r3, r3
 800f926:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    return pb_encode_varint(stream, zigzagged);
 800f92a:	68f8      	ldr	r0, [r7, #12]
 800f92c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f930:	f7ff ffaa 	bl	800f888 <pb_encode_varint>
 800f934:	4603      	mov	r3, r0
}
 800f936:	4618      	mov	r0, r3
 800f938:	3720      	adds	r7, #32
 800f93a:	46bd      	mov	sp, r7
 800f93c:	bd80      	pop	{r7, pc}
 800f93e:	bf00      	nop

0800f940 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800f940:	b580      	push	{r7, lr}
 800f942:	b082      	sub	sp, #8
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
 800f948:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	6839      	ldr	r1, [r7, #0]
 800f94e:	2204      	movs	r2, #4
 800f950:	f7ff fa96 	bl	800ee80 <pb_write>
 800f954:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800f956:	4618      	mov	r0, r3
 800f958:	3708      	adds	r7, #8
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}
 800f95e:	bf00      	nop

0800f960 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800f960:	b580      	push	{r7, lr}
 800f962:	b082      	sub	sp, #8
 800f964:	af00      	add	r7, sp, #0
 800f966:	6078      	str	r0, [r7, #4]
 800f968:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800f96a:	6878      	ldr	r0, [r7, #4]
 800f96c:	6839      	ldr	r1, [r7, #0]
 800f96e:	2208      	movs	r2, #8
 800f970:	f7ff fa86 	bl	800ee80 <pb_write>
 800f974:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800f976:	4618      	mov	r0, r3
 800f978:	3708      	adds	r7, #8
 800f97a:	46bd      	mov	sp, r7
 800f97c:	bd80      	pop	{r7, pc}
 800f97e:	bf00      	nop

0800f980 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800f980:	b5b0      	push	{r4, r5, r7, lr}
 800f982:	b086      	sub	sp, #24
 800f984:	af00      	add	r7, sp, #0
 800f986:	60f8      	str	r0, [r7, #12]
 800f988:	460b      	mov	r3, r1
 800f98a:	607a      	str	r2, [r7, #4]
 800f98c:	72fb      	strb	r3, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	461a      	mov	r2, r3
 800f992:	f04f 0300 	mov.w	r3, #0
 800f996:	00dd      	lsls	r5, r3, #3
 800f998:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f99c:	00d4      	lsls	r4, r2, #3
 800f99e:	7afa      	ldrb	r2, [r7, #11]
 800f9a0:	f04f 0300 	mov.w	r3, #0
 800f9a4:	ea42 0204 	orr.w	r2, r2, r4
 800f9a8:	ea43 0305 	orr.w	r3, r3, r5
 800f9ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return pb_encode_varint(stream, tag);
 800f9b0:	68f8      	ldr	r0, [r7, #12]
 800f9b2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f9b6:	f7ff ff67 	bl	800f888 <pb_encode_varint>
 800f9ba:	4603      	mov	r3, r0
}
 800f9bc:	4618      	mov	r0, r3
 800f9be:	3718      	adds	r7, #24
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bdb0      	pop	{r4, r5, r7, pc}

0800f9c4 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b084      	sub	sp, #16
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	7d9b      	ldrb	r3, [r3, #22]
 800f9d2:	f003 030f 	and.w	r3, r3, #15
 800f9d6:	2b0b      	cmp	r3, #11
 800f9d8:	d826      	bhi.n	800fa28 <pb_encode_tag_for_field+0x64>
 800f9da:	a201      	add	r2, pc, #4	; (adr r2, 800f9e0 <pb_encode_tag_for_field+0x1c>)
 800f9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e0:	0800fa11 	.word	0x0800fa11
 800f9e4:	0800fa11 	.word	0x0800fa11
 800f9e8:	0800fa11 	.word	0x0800fa11
 800f9ec:	0800fa11 	.word	0x0800fa11
 800f9f0:	0800fa17 	.word	0x0800fa17
 800f9f4:	0800fa1d 	.word	0x0800fa1d
 800f9f8:	0800fa23 	.word	0x0800fa23
 800f9fc:	0800fa23 	.word	0x0800fa23
 800fa00:	0800fa23 	.word	0x0800fa23
 800fa04:	0800fa23 	.word	0x0800fa23
 800fa08:	0800fa29 	.word	0x0800fa29
 800fa0c:	0800fa23 	.word	0x0800fa23
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800fa10:	2300      	movs	r3, #0
 800fa12:	73fb      	strb	r3, [r7, #15]
            break;
 800fa14:	e014      	b.n	800fa40 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800fa16:	2305      	movs	r3, #5
 800fa18:	73fb      	strb	r3, [r7, #15]
            break;
 800fa1a:	e011      	b.n	800fa40 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	73fb      	strb	r3, [r7, #15]
            break;
 800fa20:	e00e      	b.n	800fa40 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800fa22:	2302      	movs	r3, #2
 800fa24:	73fb      	strb	r3, [r7, #15]
            break;
 800fa26:	e00b      	b.n	800fa40 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	691b      	ldr	r3, [r3, #16]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d002      	beq.n	800fa36 <pb_encode_tag_for_field+0x72>
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	691b      	ldr	r3, [r3, #16]
 800fa34:	e000      	b.n	800fa38 <pb_encode_tag_for_field+0x74>
 800fa36:	4b09      	ldr	r3, [pc, #36]	; (800fa5c <pb_encode_tag_for_field+0x98>)
 800fa38:	687a      	ldr	r2, [r7, #4]
 800fa3a:	6113      	str	r3, [r2, #16]
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	e008      	b.n	800fa52 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800fa40:	683b      	ldr	r3, [r7, #0]
 800fa42:	8a1b      	ldrh	r3, [r3, #16]
 800fa44:	461a      	mov	r2, r3
 800fa46:	7bfb      	ldrb	r3, [r7, #15]
 800fa48:	6878      	ldr	r0, [r7, #4]
 800fa4a:	4619      	mov	r1, r3
 800fa4c:	f7ff ff98 	bl	800f980 <pb_encode_tag>
 800fa50:	4603      	mov	r3, r0
}
 800fa52:	4618      	mov	r0, r3
 800fa54:	3710      	adds	r7, #16
 800fa56:	46bd      	mov	sp, r7
 800fa58:	bd80      	pop	{r7, pc}
 800fa5a:	bf00      	nop
 800fa5c:	08014378 	.word	0x08014378

0800fa60 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800fa60:	b580      	push	{r7, lr}
 800fa62:	b084      	sub	sp, #16
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	60f8      	str	r0, [r7, #12]
 800fa68:	60b9      	str	r1, [r7, #8]
 800fa6a:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	461a      	mov	r2, r3
 800fa70:	f04f 0300 	mov.w	r3, #0
 800fa74:	68f8      	ldr	r0, [r7, #12]
 800fa76:	f7ff ff07 	bl	800f888 <pb_encode_varint>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	f083 0301 	eor.w	r3, r3, #1
 800fa80:	b2db      	uxtb	r3, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d001      	beq.n	800fa8a <pb_encode_string+0x2a>
        return false;
 800fa86:	2300      	movs	r3, #0
 800fa88:	e005      	b.n	800fa96 <pb_encode_string+0x36>
    
    return pb_write(stream, buffer, size);
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	68b9      	ldr	r1, [r7, #8]
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	f7ff f9f6 	bl	800ee80 <pb_write>
 800fa94:	4603      	mov	r3, r0
}
 800fa96:	4618      	mov	r0, r3
 800fa98:	3710      	adds	r7, #16
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop

0800faa0 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b08c      	sub	sp, #48	; 0x30
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	2300      	movs	r3, #0
 800fab2:	61bb      	str	r3, [r7, #24]
 800fab4:	2300      	movs	r3, #0
 800fab6:	61fb      	str	r3, [r7, #28]
 800fab8:	2300      	movs	r3, #0
 800faba:	623b      	str	r3, [r7, #32]
 800fabc:	2300      	movs	r3, #0
 800fabe:	627b      	str	r3, [r7, #36]	; 0x24
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800fac0:	f107 0314 	add.w	r3, r7, #20
 800fac4:	4618      	mov	r0, r3
 800fac6:	68b9      	ldr	r1, [r7, #8]
 800fac8:	687a      	ldr	r2, [r7, #4]
 800faca:	f7ff fe2b 	bl	800f724 <pb_encode>
 800face:	4603      	mov	r3, r0
 800fad0:	f083 0301 	eor.w	r3, r3, #1
 800fad4:	b2db      	uxtb	r3, r3
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d004      	beq.n	800fae4 <pb_encode_submessage+0x44>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800fada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800fae0:	2300      	movs	r3, #0
 800fae2:	e063      	b.n	800fbac <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800fae4:	6a3b      	ldr	r3, [r7, #32]
 800fae6:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	461a      	mov	r2, r3
 800faec:	f04f 0300 	mov.w	r3, #0
 800faf0:	68f8      	ldr	r0, [r7, #12]
 800faf2:	f7ff fec9 	bl	800f888 <pb_encode_varint>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f083 0301 	eor.w	r3, r3, #1
 800fafc:	b2db      	uxtb	r3, r3
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d001      	beq.n	800fb06 <pb_encode_submessage+0x66>
        return false;
 800fb02:	2300      	movs	r3, #0
 800fb04:	e052      	b.n	800fbac <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d106      	bne.n	800fb1c <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800fb0e:	68f8      	ldr	r0, [r7, #12]
 800fb10:	2100      	movs	r1, #0
 800fb12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fb14:	f7ff f9b4 	bl	800ee80 <pb_write>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	e047      	b.n	800fbac <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	68da      	ldr	r2, [r3, #12]
 800fb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb22:	441a      	add	r2, r3
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	689b      	ldr	r3, [r3, #8]
 800fb28:	429a      	cmp	r2, r3
 800fb2a:	d90b      	bls.n	800fb44 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800fb2c:	68fb      	ldr	r3, [r7, #12]
 800fb2e:	691b      	ldr	r3, [r3, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d002      	beq.n	800fb3a <pb_encode_submessage+0x9a>
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	691b      	ldr	r3, [r3, #16]
 800fb38:	e000      	b.n	800fb3c <pb_encode_submessage+0x9c>
 800fb3a:	4b1e      	ldr	r3, [pc, #120]	; (800fbb4 <pb_encode_submessage+0x114>)
 800fb3c:	68fa      	ldr	r2, [r7, #12]
 800fb3e:	6113      	str	r3, [r2, #16]
 800fb40:	2300      	movs	r3, #0
 800fb42:	e033      	b.n	800fbac <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800fb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb52:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800fb54:	2300      	movs	r3, #0
 800fb56:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800fb58:	2300      	movs	r3, #0
 800fb5a:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800fb5c:	f107 0314 	add.w	r3, r7, #20
 800fb60:	4618      	mov	r0, r3
 800fb62:	68b9      	ldr	r1, [r7, #8]
 800fb64:	687a      	ldr	r2, [r7, #4]
 800fb66:	f7ff fddd 	bl	800f724 <pb_encode>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	68da      	ldr	r2, [r3, #12]
 800fb74:	6a3b      	ldr	r3, [r7, #32]
 800fb76:	441a      	add	r2, r3
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800fb7c:	69ba      	ldr	r2, [r7, #24]
 800fb7e:	68fb      	ldr	r3, [r7, #12]
 800fb80:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800fb82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800fb88:	6a3a      	ldr	r2, [r7, #32]
 800fb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d00b      	beq.n	800fba8 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	691b      	ldr	r3, [r3, #16]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d002      	beq.n	800fb9e <pb_encode_submessage+0xfe>
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	691b      	ldr	r3, [r3, #16]
 800fb9c:	e000      	b.n	800fba0 <pb_encode_submessage+0x100>
 800fb9e:	4b06      	ldr	r3, [pc, #24]	; (800fbb8 <pb_encode_submessage+0x118>)
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	6113      	str	r3, [r2, #16]
 800fba4:	2300      	movs	r3, #0
 800fba6:	e001      	b.n	800fbac <pb_encode_submessage+0x10c>
    
    return status;
 800fba8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	3730      	adds	r7, #48	; 0x30
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	bd80      	pop	{r7, pc}
 800fbb4:	08014340 	.word	0x08014340
 800fbb8:	080143c8 	.word	0x080143c8

0800fbbc <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fbbc:	b580      	push	{r7, lr}
 800fbbe:	b084      	sub	sp, #16
 800fbc0:	af00      	add	r7, sp, #0
 800fbc2:	6078      	str	r0, [r7, #4]
 800fbc4:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	69db      	ldr	r3, [r3, #28]
 800fbca:	4618      	mov	r0, r3
 800fbcc:	f7ff f9a8 	bl	800ef20 <safe_read_bool>
 800fbd0:	4603      	mov	r3, r0
 800fbd2:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 800fbd4:	68fb      	ldr	r3, [r7, #12]
 800fbd6:	461a      	mov	r2, r3
 800fbd8:	f04f 0300 	mov.w	r3, #0
 800fbdc:	6878      	ldr	r0, [r7, #4]
 800fbde:	f7ff fe53 	bl	800f888 <pb_encode_varint>
 800fbe2:	4603      	mov	r3, r0
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3710      	adds	r7, #16
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}

0800fbec <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fbec:	b580      	push	{r7, lr}
 800fbee:	b086      	sub	sp, #24
 800fbf0:	af00      	add	r7, sp, #0
 800fbf2:	6078      	str	r0, [r7, #4]
 800fbf4:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800fbf6:	683b      	ldr	r3, [r7, #0]
 800fbf8:	7d9b      	ldrb	r3, [r3, #22]
 800fbfa:	f003 030f 	and.w	r3, r3, #15
 800fbfe:	2b02      	cmp	r3, #2
 800fc00:	d14a      	bne.n	800fc98 <pb_enc_varint+0xac>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 800fc02:	f04f 0200 	mov.w	r2, #0
 800fc06:	f04f 0300 	mov.w	r3, #0
 800fc0a:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (field->data_size == sizeof(uint_least8_t))
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	8a5b      	ldrh	r3, [r3, #18]
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d108      	bne.n	800fc28 <pb_enc_varint+0x3c>
            value = *(const uint_least8_t*)field->pData;
 800fc16:	683b      	ldr	r3, [r7, #0]
 800fc18:	69db      	ldr	r3, [r3, #28]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	b2da      	uxtb	r2, r3
 800fc1e:	f04f 0300 	mov.w	r3, #0
 800fc22:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fc26:	e030      	b.n	800fc8a <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint_least16_t))
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	8a5b      	ldrh	r3, [r3, #18]
 800fc2c:	2b02      	cmp	r3, #2
 800fc2e:	d108      	bne.n	800fc42 <pb_enc_varint+0x56>
            value = *(const uint_least16_t*)field->pData;
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	69db      	ldr	r3, [r3, #28]
 800fc34:	881b      	ldrh	r3, [r3, #0]
 800fc36:	b29a      	uxth	r2, r3
 800fc38:	f04f 0300 	mov.w	r3, #0
 800fc3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fc40:	e023      	b.n	800fc8a <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint32_t))
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	8a5b      	ldrh	r3, [r3, #18]
 800fc46:	2b04      	cmp	r3, #4
 800fc48:	d108      	bne.n	800fc5c <pb_enc_varint+0x70>
            value = *(const uint32_t*)field->pData;
 800fc4a:	683b      	ldr	r3, [r7, #0]
 800fc4c:	69db      	ldr	r3, [r3, #28]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	461a      	mov	r2, r3
 800fc52:	f04f 0300 	mov.w	r3, #0
 800fc56:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fc5a:	e016      	b.n	800fc8a <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(pb_uint64_t))
 800fc5c:	683b      	ldr	r3, [r7, #0]
 800fc5e:	8a5b      	ldrh	r3, [r3, #18]
 800fc60:	2b08      	cmp	r3, #8
 800fc62:	d106      	bne.n	800fc72 <pb_enc_varint+0x86>
            value = *(const pb_uint64_t*)field->pData;
 800fc64:	683b      	ldr	r3, [r7, #0]
 800fc66:	69db      	ldr	r3, [r3, #28]
 800fc68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc6c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fc70:	e00b      	b.n	800fc8a <pb_enc_varint+0x9e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	691b      	ldr	r3, [r3, #16]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d002      	beq.n	800fc80 <pb_enc_varint+0x94>
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	691b      	ldr	r3, [r3, #16]
 800fc7e:	e000      	b.n	800fc82 <pb_enc_varint+0x96>
 800fc80:	4b33      	ldr	r3, [pc, #204]	; (800fd50 <pb_enc_varint+0x164>)
 800fc82:	687a      	ldr	r2, [r7, #4]
 800fc84:	6113      	str	r3, [r2, #16]
 800fc86:	2300      	movs	r3, #0
 800fc88:	e05d      	b.n	800fd46 <pb_enc_varint+0x15a>

        return pb_encode_varint(stream, value);
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc90:	f7ff fdfa 	bl	800f888 <pb_encode_varint>
 800fc94:	4603      	mov	r3, r0
 800fc96:	e056      	b.n	800fd46 <pb_enc_varint+0x15a>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800fc98:	f04f 0200 	mov.w	r2, #0
 800fc9c:	f04f 0300 	mov.w	r3, #0
 800fca0:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (field->data_size == sizeof(int_least8_t))
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	8a5b      	ldrh	r3, [r3, #18]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d108      	bne.n	800fcbe <pb_enc_varint+0xd2>
            value = *(const int_least8_t*)field->pData;
 800fcac:	683b      	ldr	r3, [r7, #0]
 800fcae:	69db      	ldr	r3, [r3, #28]
 800fcb0:	781b      	ldrb	r3, [r3, #0]
 800fcb2:	b25a      	sxtb	r2, r3
 800fcb4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fcb8:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fcbc:	e030      	b.n	800fd20 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int_least16_t))
 800fcbe:	683b      	ldr	r3, [r7, #0]
 800fcc0:	8a5b      	ldrh	r3, [r3, #18]
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d108      	bne.n	800fcd8 <pb_enc_varint+0xec>
            value = *(const int_least16_t*)field->pData;
 800fcc6:	683b      	ldr	r3, [r7, #0]
 800fcc8:	69db      	ldr	r3, [r3, #28]
 800fcca:	881b      	ldrh	r3, [r3, #0]
 800fccc:	b21a      	sxth	r2, r3
 800fcce:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fcd2:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fcd6:	e023      	b.n	800fd20 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int32_t))
 800fcd8:	683b      	ldr	r3, [r7, #0]
 800fcda:	8a5b      	ldrh	r3, [r3, #18]
 800fcdc:	2b04      	cmp	r3, #4
 800fcde:	d108      	bne.n	800fcf2 <pb_enc_varint+0x106>
            value = *(const int32_t*)field->pData;
 800fce0:	683b      	ldr	r3, [r7, #0]
 800fce2:	69db      	ldr	r3, [r3, #28]
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	461a      	mov	r2, r3
 800fce8:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fcec:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fcf0:	e016      	b.n	800fd20 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(pb_int64_t))
 800fcf2:	683b      	ldr	r3, [r7, #0]
 800fcf4:	8a5b      	ldrh	r3, [r3, #18]
 800fcf6:	2b08      	cmp	r3, #8
 800fcf8:	d106      	bne.n	800fd08 <pb_enc_varint+0x11c>
            value = *(const pb_int64_t*)field->pData;
 800fcfa:	683b      	ldr	r3, [r7, #0]
 800fcfc:	69db      	ldr	r3, [r3, #28]
 800fcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd02:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fd06:	e00b      	b.n	800fd20 <pb_enc_varint+0x134>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	691b      	ldr	r3, [r3, #16]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d002      	beq.n	800fd16 <pb_enc_varint+0x12a>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	e000      	b.n	800fd18 <pb_enc_varint+0x12c>
 800fd16:	4b0e      	ldr	r3, [pc, #56]	; (800fd50 <pb_enc_varint+0x164>)
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	6113      	str	r3, [r2, #16]
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	e012      	b.n	800fd46 <pb_enc_varint+0x15a>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800fd20:	683b      	ldr	r3, [r7, #0]
 800fd22:	7d9b      	ldrb	r3, [r3, #22]
 800fd24:	f003 030f 	and.w	r3, r3, #15
 800fd28:	2b03      	cmp	r3, #3
 800fd2a:	d106      	bne.n	800fd3a <pb_enc_varint+0x14e>
            return pb_encode_svarint(stream, value);
 800fd2c:	6878      	ldr	r0, [r7, #4]
 800fd2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd32:	f7ff fdcf 	bl	800f8d4 <pb_encode_svarint>
 800fd36:	4603      	mov	r3, r0
 800fd38:	e005      	b.n	800fd46 <pb_enc_varint+0x15a>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800fd3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f7ff fda2 	bl	800f888 <pb_encode_varint>
 800fd44:	4603      	mov	r3, r0

    }
}
 800fd46:	4618      	mov	r0, r3
 800fd48:	3718      	adds	r7, #24
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	bd80      	pop	{r7, pc}
 800fd4e:	bf00      	nop
 800fd50:	080143dc 	.word	0x080143dc

0800fd54 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fd54:	b580      	push	{r7, lr}
 800fd56:	b082      	sub	sp, #8
 800fd58:	af00      	add	r7, sp, #0
 800fd5a:	6078      	str	r0, [r7, #4]
 800fd5c:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800fd5e:	683b      	ldr	r3, [r7, #0]
 800fd60:	8a5b      	ldrh	r3, [r3, #18]
 800fd62:	2b04      	cmp	r3, #4
 800fd64:	d107      	bne.n	800fd76 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800fd66:	683b      	ldr	r3, [r7, #0]
 800fd68:	69db      	ldr	r3, [r3, #28]
 800fd6a:	6878      	ldr	r0, [r7, #4]
 800fd6c:	4619      	mov	r1, r3
 800fd6e:	f7ff fde7 	bl	800f940 <pb_encode_fixed32>
 800fd72:	4603      	mov	r3, r0
 800fd74:	e016      	b.n	800fda4 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800fd76:	683b      	ldr	r3, [r7, #0]
 800fd78:	8a5b      	ldrh	r3, [r3, #18]
 800fd7a:	2b08      	cmp	r3, #8
 800fd7c:	d107      	bne.n	800fd8e <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800fd7e:	683b      	ldr	r3, [r7, #0]
 800fd80:	69db      	ldr	r3, [r3, #28]
 800fd82:	6878      	ldr	r0, [r7, #4]
 800fd84:	4619      	mov	r1, r3
 800fd86:	f7ff fdeb 	bl	800f960 <pb_encode_fixed64>
 800fd8a:	4603      	mov	r3, r0
 800fd8c:	e00a      	b.n	800fda4 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	691b      	ldr	r3, [r3, #16]
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d002      	beq.n	800fd9c <pb_enc_fixed+0x48>
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	691b      	ldr	r3, [r3, #16]
 800fd9a:	e000      	b.n	800fd9e <pb_enc_fixed+0x4a>
 800fd9c:	4b03      	ldr	r3, [pc, #12]	; (800fdac <pb_enc_fixed+0x58>)
 800fd9e:	687a      	ldr	r2, [r7, #4]
 800fda0:	6113      	str	r3, [r2, #16]
 800fda2:	2300      	movs	r3, #0
    }
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}
 800fdac:	080143dc 	.word	0x080143dc

0800fdb0 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fdb0:	b580      	push	{r7, lr}
 800fdb2:	b084      	sub	sp, #16
 800fdb4:	af00      	add	r7, sp, #0
 800fdb6:	6078      	str	r0, [r7, #4]
 800fdb8:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800fdbe:	683b      	ldr	r3, [r7, #0]
 800fdc0:	69db      	ldr	r3, [r3, #28]
 800fdc2:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d106      	bne.n	800fdd8 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800fdca:	6878      	ldr	r0, [r7, #4]
 800fdcc:	2100      	movs	r1, #0
 800fdce:	2200      	movs	r2, #0
 800fdd0:	f7ff fe46 	bl	800fa60 <pb_encode_string>
 800fdd4:	4603      	mov	r3, r0
 800fdd6:	e023      	b.n	800fe20 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fdd8:	683b      	ldr	r3, [r7, #0]
 800fdda:	7d9b      	ldrb	r3, [r3, #22]
 800fddc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d113      	bne.n	800fe0c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	881b      	ldrh	r3, [r3, #0]
 800fde8:	461a      	mov	r2, r3
 800fdea:	683b      	ldr	r3, [r7, #0]
 800fdec:	8a5b      	ldrh	r3, [r3, #18]
 800fdee:	3b02      	subs	r3, #2
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fdf0:	429a      	cmp	r2, r3
 800fdf2:	d90b      	bls.n	800fe0c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	691b      	ldr	r3, [r3, #16]
 800fdf8:	2b00      	cmp	r3, #0
 800fdfa:	d002      	beq.n	800fe02 <pb_enc_bytes+0x52>
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	691b      	ldr	r3, [r3, #16]
 800fe00:	e000      	b.n	800fe04 <pb_enc_bytes+0x54>
 800fe02:	4b09      	ldr	r3, [pc, #36]	; (800fe28 <pb_enc_bytes+0x78>)
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	6113      	str	r3, [r2, #16]
 800fe08:	2300      	movs	r3, #0
 800fe0a:	e009      	b.n	800fe20 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	1c9a      	adds	r2, r3, #2
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	881b      	ldrh	r3, [r3, #0]
 800fe14:	6878      	ldr	r0, [r7, #4]
 800fe16:	4611      	mov	r1, r2
 800fe18:	461a      	mov	r2, r3
 800fe1a:	f7ff fe21 	bl	800fa60 <pb_encode_string>
 800fe1e:	4603      	mov	r3, r0
}
 800fe20:	4618      	mov	r0, r3
 800fe22:	3710      	adds	r7, #16
 800fe24:	46bd      	mov	sp, r7
 800fe26:	bd80      	pop	{r7, pc}
 800fe28:	080143f0 	.word	0x080143f0

0800fe2c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b086      	sub	sp, #24
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800fe3a:	683b      	ldr	r3, [r7, #0]
 800fe3c:	8a5b      	ldrh	r3, [r3, #18]
 800fe3e:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800fe40:	683b      	ldr	r3, [r7, #0]
 800fe42:	69db      	ldr	r3, [r3, #28]
 800fe44:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	7d9b      	ldrb	r3, [r3, #22]
 800fe4a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fe4e:	2b80      	cmp	r3, #128	; 0x80
 800fe50:	d103      	bne.n	800fe5a <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800fe52:	f04f 33ff 	mov.w	r3, #4294967295
 800fe56:	613b      	str	r3, [r7, #16]
 800fe58:	e011      	b.n	800fe7e <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800fe5a:	693b      	ldr	r3, [r7, #16]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d10b      	bne.n	800fe78 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	691b      	ldr	r3, [r3, #16]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d002      	beq.n	800fe6e <pb_enc_string+0x42>
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	691b      	ldr	r3, [r3, #16]
 800fe6c:	e000      	b.n	800fe70 <pb_enc_string+0x44>
 800fe6e:	4b1c      	ldr	r3, [pc, #112]	; (800fee0 <pb_enc_string+0xb4>)
 800fe70:	687a      	ldr	r2, [r7, #4]
 800fe72:	6113      	str	r3, [r2, #16]
 800fe74:	2300      	movs	r3, #0
 800fe76:	e02f      	b.n	800fed8 <pb_enc_string+0xac>

        max_size -= 1;
 800fe78:	693b      	ldr	r3, [r7, #16]
 800fe7a:	3b01      	subs	r3, #1
 800fe7c:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d102      	bne.n	800fe8a <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 800fe84:	2300      	movs	r3, #0
 800fe86:	617b      	str	r3, [r7, #20]
 800fe88:	e020      	b.n	800fecc <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800fe8a:	68bb      	ldr	r3, [r7, #8]
 800fe8c:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800fe8e:	e005      	b.n	800fe9c <pb_enc_string+0x70>
        {
            size++;
 800fe90:	697b      	ldr	r3, [r7, #20]
 800fe92:	3301      	adds	r3, #1
 800fe94:	617b      	str	r3, [r7, #20]
            p++;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	60fb      	str	r3, [r7, #12]
    else
    {
        const char *p = str;

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800fe9c:	697a      	ldr	r2, [r7, #20]
 800fe9e:	693b      	ldr	r3, [r7, #16]
 800fea0:	429a      	cmp	r2, r3
 800fea2:	d203      	bcs.n	800feac <pb_enc_string+0x80>
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	781b      	ldrb	r3, [r3, #0]
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d1f1      	bne.n	800fe90 <pb_enc_string+0x64>
        {
            size++;
            p++;
        }

        if (*p != '\0')
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d00b      	beq.n	800fecc <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d002      	beq.n	800fec2 <pb_enc_string+0x96>
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	691b      	ldr	r3, [r3, #16]
 800fec0:	e000      	b.n	800fec4 <pb_enc_string+0x98>
 800fec2:	4b08      	ldr	r3, [pc, #32]	; (800fee4 <pb_enc_string+0xb8>)
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	6113      	str	r3, [r2, #16]
 800fec8:	2300      	movs	r3, #0
 800feca:	e005      	b.n	800fed8 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	68b9      	ldr	r1, [r7, #8]
 800fed0:	697a      	ldr	r2, [r7, #20]
 800fed2:	f7ff fdc5 	bl	800fa60 <pb_encode_string>
 800fed6:	4603      	mov	r3, r0
}
 800fed8:	4618      	mov	r0, r3
 800feda:	3718      	adds	r7, #24
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	08014404 	.word	0x08014404
 800fee4:	08014418 	.word	0x08014418

0800fee8 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d10b      	bne.n	800ff12 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	691b      	ldr	r3, [r3, #16]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d002      	beq.n	800ff08 <pb_enc_submessage+0x20>
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	e000      	b.n	800ff0a <pb_enc_submessage+0x22>
 800ff08:	4b19      	ldr	r3, [pc, #100]	; (800ff70 <pb_enc_submessage+0x88>)
 800ff0a:	687a      	ldr	r2, [r7, #4]
 800ff0c:	6113      	str	r3, [r2, #16]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	e02a      	b.n	800ff68 <pb_enc_submessage+0x80>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800ff12:	683b      	ldr	r3, [r7, #0]
 800ff14:	7d9b      	ldrb	r3, [r3, #22]
 800ff16:	f003 030f 	and.w	r3, r3, #15
 800ff1a:	2b09      	cmp	r3, #9
 800ff1c:	d11a      	bne.n	800ff54 <pb_enc_submessage+0x6c>
 800ff1e:	683b      	ldr	r3, [r7, #0]
 800ff20:	6a1b      	ldr	r3, [r3, #32]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d016      	beq.n	800ff54 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800ff26:	683b      	ldr	r3, [r7, #0]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	3b08      	subs	r3, #8
 800ff2c:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00e      	beq.n	800ff54 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	681b      	ldr	r3, [r3, #0]
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	3204      	adds	r2, #4
 800ff3e:	6878      	ldr	r0, [r7, #4]
 800ff40:	6839      	ldr	r1, [r7, #0]
 800ff42:	4798      	blx	r3
 800ff44:	4603      	mov	r3, r0
 800ff46:	f083 0301 	eor.w	r3, r3, #1
 800ff4a:	b2db      	uxtb	r3, r3
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d001      	beq.n	800ff54 <pb_enc_submessage+0x6c>
                return false;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e009      	b.n	800ff68 <pb_enc_submessage+0x80>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 800ff54:	683b      	ldr	r3, [r7, #0]
 800ff56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ff58:	683b      	ldr	r3, [r7, #0]
 800ff5a:	69db      	ldr	r3, [r3, #28]
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	4611      	mov	r1, r2
 800ff60:	461a      	mov	r2, r3
 800ff62:	f7ff fd9d 	bl	800faa0 <pb_encode_submessage>
 800ff66:	4603      	mov	r3, r0
}
 800ff68:	4618      	mov	r0, r3
 800ff6a:	3710      	adds	r7, #16
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}
 800ff70:	0801442c 	.word	0x0801442c

0800ff74 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800ff74:	b580      	push	{r7, lr}
 800ff76:	b082      	sub	sp, #8
 800ff78:	af00      	add	r7, sp, #0
 800ff7a:	6078      	str	r0, [r7, #4]
 800ff7c:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800ff7e:	683b      	ldr	r3, [r7, #0]
 800ff80:	69da      	ldr	r2, [r3, #28]
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	8a5b      	ldrh	r3, [r3, #18]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	4611      	mov	r1, r2
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7ff fd68 	bl	800fa60 <pb_encode_string>
 800ff90:	4603      	mov	r3, r0
}
 800ff92:	4618      	mov	r0, r3
 800ff94:	3708      	adds	r7, #8
 800ff96:	46bd      	mov	sp, r7
 800ff98:	bd80      	pop	{r7, pc}
 800ff9a:	bf00      	nop

0800ff9c <uart_debugg>:
Io_Exp_PinMap_t ELEC_HANDBRAKE_PWR_OUT_D = {IO_EXP_IC_48, PORT0, PIN2};


//#if UART_DEBUG
void uart_debugg(uint8_t uart_buff[])
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
	            //Wait for transmit buffer interrupt to fill it again with remaining data
	            while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
	            UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
	   }*/
#endif
}
 800ffa4:	370c      	adds	r7, #12
 800ffa6:	46bd      	mov	sp, r7
 800ffa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffac:	4770      	bx	lr
 800ffae:	bf00      	nop

0800ffb0 <Io_Exp_Init>:
}
//#endif


void Io_Exp_Init(void)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b082      	sub	sp, #8
 800ffb4:	af00      	add	r7, sp, #0
	/* 0 set as output, 1 as input */
	/* Initially output is high hence make 0 */

	uint8_t Io_Exp_address = 0x42, set_port0_pin_as_out_or_input = 0xbf, set_port1_pin_as_out_or_input = 0x27, port0 = 0x00, port1 = 0x01, pin_value = 0x06;
 800ffb6:	2342      	movs	r3, #66	; 0x42
 800ffb8:	71fb      	strb	r3, [r7, #7]
 800ffba:	23bf      	movs	r3, #191	; 0xbf
 800ffbc:	71bb      	strb	r3, [r7, #6]
 800ffbe:	2327      	movs	r3, #39	; 0x27
 800ffc0:	717b      	strb	r3, [r7, #5]
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	713b      	strb	r3, [r7, #4]
 800ffc6:	2301      	movs	r3, #1
 800ffc8:	70fb      	strb	r3, [r7, #3]
 800ffca:	2306      	movs	r3, #6
 800ffcc:	70bb      	strb	r3, [r7, #2]

	/* U25 I2C_0*/
	IOExp_Configure(&I2C_MASTER_0, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800ffce:	79f9      	ldrb	r1, [r7, #7]
 800ffd0:	79ba      	ldrb	r2, [r7, #6]
 800ffd2:	797b      	ldrb	r3, [r7, #5]
 800ffd4:	4851      	ldr	r0, [pc, #324]	; (801011c <Io_Exp_Init+0x16c>)
 800ffd6:	f7f4 ffeb 	bl	8004fb0 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);
 800ffda:	79f9      	ldrb	r1, [r7, #7]
 800ffdc:	793a      	ldrb	r2, [r7, #4]
 800ffde:	78bb      	ldrb	r3, [r7, #2]
 800ffe0:	484e      	ldr	r0, [pc, #312]	; (801011c <Io_Exp_Init+0x16c>)
 800ffe2:	f7f5 f921 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x03);
 800ffe6:	79fa      	ldrb	r2, [r7, #7]
 800ffe8:	78fb      	ldrb	r3, [r7, #3]
 800ffea:	484c      	ldr	r0, [pc, #304]	; (801011c <Io_Exp_Init+0x16c>)
 800ffec:	4611      	mov	r1, r2
 800ffee:	461a      	mov	r2, r3
 800fff0:	2303      	movs	r3, #3
 800fff2:	f7f5 f919 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x04);
 800fff6:	79fa      	ldrb	r2, [r7, #7]
 800fff8:	78fb      	ldrb	r3, [r7, #3]
 800fffa:	4848      	ldr	r0, [pc, #288]	; (801011c <Io_Exp_Init+0x16c>)
 800fffc:	4611      	mov	r1, r2
 800fffe:	461a      	mov	r2, r3
 8010000:	2304      	movs	r3, #4
 8010002:	f7f5 f911 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x06);
 8010006:	79fa      	ldrb	r2, [r7, #7]
 8010008:	78fb      	ldrb	r3, [r7, #3]
 801000a:	4844      	ldr	r0, [pc, #272]	; (801011c <Io_Exp_Init+0x16c>)
 801000c:	4611      	mov	r1, r2
 801000e:	461a      	mov	r2, r3
 8010010:	2306      	movs	r3, #6
 8010012:	f7f5 f909 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x07);
 8010016:	79fa      	ldrb	r2, [r7, #7]
 8010018:	78fb      	ldrb	r3, [r7, #3]
 801001a:	4840      	ldr	r0, [pc, #256]	; (801011c <Io_Exp_Init+0x16c>)
 801001c:	4611      	mov	r1, r2
 801001e:	461a      	mov	r2, r3
 8010020:	2307      	movs	r3, #7
 8010022:	f7f5 f901 	bl	8005228 <IOExp_SetPIN_LOW>
	//IOExp_SetPIN_HIGH(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);

	/* U38 I2C_1 */
	Io_Exp_address = 0x40;
 8010026:	2340      	movs	r3, #64	; 0x40
 8010028:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input = 0xf0;
 801002a:	23f0      	movs	r3, #240	; 0xf0
 801002c:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0x01;
 801002e:	2301      	movs	r3, #1
 8010030:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 8010032:	79f9      	ldrb	r1, [r7, #7]
 8010034:	79ba      	ldrb	r2, [r7, #6]
 8010036:	797b      	ldrb	r3, [r7, #5]
 8010038:	4839      	ldr	r0, [pc, #228]	; (8010120 <Io_Exp_Init+0x170>)
 801003a:	f7f4 ffb9 	bl	8004fb0 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 0);
 801003e:	79fa      	ldrb	r2, [r7, #7]
 8010040:	793b      	ldrb	r3, [r7, #4]
 8010042:	4837      	ldr	r0, [pc, #220]	; (8010120 <Io_Exp_Init+0x170>)
 8010044:	4611      	mov	r1, r2
 8010046:	461a      	mov	r2, r3
 8010048:	2300      	movs	r3, #0
 801004a:	f7f5 f8ed 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 1);
 801004e:	79fa      	ldrb	r2, [r7, #7]
 8010050:	793b      	ldrb	r3, [r7, #4]
 8010052:	4833      	ldr	r0, [pc, #204]	; (8010120 <Io_Exp_Init+0x170>)
 8010054:	4611      	mov	r1, r2
 8010056:	461a      	mov	r2, r3
 8010058:	2301      	movs	r3, #1
 801005a:	f7f5 f8e5 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 2);
 801005e:	79fa      	ldrb	r2, [r7, #7]
 8010060:	793b      	ldrb	r3, [r7, #4]
 8010062:	482f      	ldr	r0, [pc, #188]	; (8010120 <Io_Exp_Init+0x170>)
 8010064:	4611      	mov	r1, r2
 8010066:	461a      	mov	r2, r3
 8010068:	2302      	movs	r3, #2
 801006a:	f7f5 f8dd 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 801006e:	79fa      	ldrb	r2, [r7, #7]
 8010070:	793b      	ldrb	r3, [r7, #4]
 8010072:	482b      	ldr	r0, [pc, #172]	; (8010120 <Io_Exp_Init+0x170>)
 8010074:	4611      	mov	r1, r2
 8010076:	461a      	mov	r2, r3
 8010078:	2303      	movs	r3, #3
 801007a:	f7f5 f8d5 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x01);
 801007e:	79fa      	ldrb	r2, [r7, #7]
 8010080:	78fb      	ldrb	r3, [r7, #3]
 8010082:	4827      	ldr	r0, [pc, #156]	; (8010120 <Io_Exp_Init+0x170>)
 8010084:	4611      	mov	r1, r2
 8010086:	461a      	mov	r2, r3
 8010088:	2301      	movs	r3, #1
 801008a:	f7f5 f8cd 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x02);
 801008e:	79fa      	ldrb	r2, [r7, #7]
 8010090:	78fb      	ldrb	r3, [r7, #3]
 8010092:	4823      	ldr	r0, [pc, #140]	; (8010120 <Io_Exp_Init+0x170>)
 8010094:	4611      	mov	r1, r2
 8010096:	461a      	mov	r2, r3
 8010098:	2302      	movs	r3, #2
 801009a:	f7f5 f8c5 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x03);
 801009e:	79fa      	ldrb	r2, [r7, #7]
 80100a0:	78fb      	ldrb	r3, [r7, #3]
 80100a2:	481f      	ldr	r0, [pc, #124]	; (8010120 <Io_Exp_Init+0x170>)
 80100a4:	4611      	mov	r1, r2
 80100a6:	461a      	mov	r2, r3
 80100a8:	2303      	movs	r3, #3
 80100aa:	f7f5 f8bd 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x04);
 80100ae:	79fa      	ldrb	r2, [r7, #7]
 80100b0:	78fb      	ldrb	r3, [r7, #3]
 80100b2:	481b      	ldr	r0, [pc, #108]	; (8010120 <Io_Exp_Init+0x170>)
 80100b4:	4611      	mov	r1, r2
 80100b6:	461a      	mov	r2, r3
 80100b8:	2304      	movs	r3, #4
 80100ba:	f7f5 f8b5 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x05);
 80100be:	79fa      	ldrb	r2, [r7, #7]
 80100c0:	78fb      	ldrb	r3, [r7, #3]
 80100c2:	4817      	ldr	r0, [pc, #92]	; (8010120 <Io_Exp_Init+0x170>)
 80100c4:	4611      	mov	r1, r2
 80100c6:	461a      	mov	r2, r3
 80100c8:	2305      	movs	r3, #5
 80100ca:	f7f5 f8ad 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x06);
 80100ce:	79fa      	ldrb	r2, [r7, #7]
 80100d0:	78fb      	ldrb	r3, [r7, #3]
 80100d2:	4813      	ldr	r0, [pc, #76]	; (8010120 <Io_Exp_Init+0x170>)
 80100d4:	4611      	mov	r1, r2
 80100d6:	461a      	mov	r2, r3
 80100d8:	2306      	movs	r3, #6
 80100da:	f7f5 f8a5 	bl	8005228 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x07);
 80100de:	79fa      	ldrb	r2, [r7, #7]
 80100e0:	78fb      	ldrb	r3, [r7, #3]
 80100e2:	480f      	ldr	r0, [pc, #60]	; (8010120 <Io_Exp_Init+0x170>)
 80100e4:	4611      	mov	r1, r2
 80100e6:	461a      	mov	r2, r3
 80100e8:	2307      	movs	r3, #7
 80100ea:	f7f5 f89d 	bl	8005228 <IOExp_SetPIN_LOW>

	/* U48 I2C_1 */
	Io_Exp_address = 0x42;
 80100ee:	2342      	movs	r3, #66	; 0x42
 80100f0:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input =0XF7;
 80100f2:	23f7      	movs	r3, #247	; 0xf7
 80100f4:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0xFF;
 80100f6:	23ff      	movs	r3, #255	; 0xff
 80100f8:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 80100fa:	79f9      	ldrb	r1, [r7, #7]
 80100fc:	79ba      	ldrb	r2, [r7, #6]
 80100fe:	797b      	ldrb	r3, [r7, #5]
 8010100:	4807      	ldr	r0, [pc, #28]	; (8010120 <Io_Exp_Init+0x170>)
 8010102:	f7f4 ff55 	bl	8004fb0 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 8010106:	79fa      	ldrb	r2, [r7, #7]
 8010108:	793b      	ldrb	r3, [r7, #4]
 801010a:	4805      	ldr	r0, [pc, #20]	; (8010120 <Io_Exp_Init+0x170>)
 801010c:	4611      	mov	r1, r2
 801010e:	461a      	mov	r2, r3
 8010110:	2303      	movs	r3, #3
 8010112:	f7f5 f889 	bl	8005228 <IOExp_SetPIN_LOW>

}
 8010116:	3708      	adds	r7, #8
 8010118:	46bd      	mov	sp, r7
 801011a:	bd80      	pop	{r7, pc}
 801011c:	1ffe8a5c 	.word	0x1ffe8a5c
 8010120:	1ffe8a68 	.word	0x1ffe8a68

08010124 <digital_io_setoutputlow>:

void digital_io_setoutputlow(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b084      	sub	sp, #16
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address = 0x40; //for IC no 24 & 38
 801012c:	2340      	movs	r3, #64	; 0x40
 801012e:	73fb      	strb	r3, [r7, #15]

	if((IO_EXP_PINName_handler->IC_no == 25) || (IO_EXP_PINName_handler->IC_no == 48))
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	781b      	ldrb	r3, [r3, #0]
 8010134:	2b19      	cmp	r3, #25
 8010136:	d003      	beq.n	8010140 <digital_io_setoutputlow+0x1c>
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	781b      	ldrb	r3, [r3, #0]
 801013c:	2b30      	cmp	r3, #48	; 0x30
 801013e:	d101      	bne.n	8010144 <digital_io_setoutputlow+0x20>
	{
		Io_Exp_address = 0x42;
 8010140:	2342      	movs	r3, #66	; 0x42
 8010142:	73fb      	strb	r3, [r7, #15]
	}

	if((IO_EXP_PINName_handler->IC_no == 24) || (IO_EXP_PINName_handler->IC_no == 25))
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	781b      	ldrb	r3, [r3, #0]
 8010148:	2b18      	cmp	r3, #24
 801014a:	d003      	beq.n	8010154 <digital_io_setoutputlow+0x30>
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	781b      	ldrb	r3, [r3, #0]
 8010150:	2b19      	cmp	r3, #25
 8010152:	d108      	bne.n	8010166 <digital_io_setoutputlow+0x42>
	{
		IOExp_SetPIN_LOW(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	785a      	ldrb	r2, [r3, #1]
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	789b      	ldrb	r3, [r3, #2]
 801015c:	7bf9      	ldrb	r1, [r7, #15]
 801015e:	4807      	ldr	r0, [pc, #28]	; (801017c <digital_io_setoutputlow+0x58>)
 8010160:	f7f5 f862 	bl	8005228 <IOExp_SetPIN_LOW>
 8010164:	e007      	b.n	8010176 <digital_io_setoutputlow+0x52>
	}
	else
	{
		IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	785a      	ldrb	r2, [r3, #1]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	789b      	ldrb	r3, [r3, #2]
 801016e:	7bf9      	ldrb	r1, [r7, #15]
 8010170:	4803      	ldr	r0, [pc, #12]	; (8010180 <digital_io_setoutputlow+0x5c>)
 8010172:	f7f5 f859 	bl	8005228 <IOExp_SetPIN_LOW>
	}
}
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}
 801017c:	1ffe8a5c 	.word	0x1ffe8a5c
 8010180:	1ffe8a68 	.word	0x1ffe8a68

08010184 <digital_io_setoutputhigh>:

void digital_io_setoutputhigh(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address = 0x40; //for IC no 24 & 38
 801018c:	2340      	movs	r3, #64	; 0x40
 801018e:	73fb      	strb	r3, [r7, #15]

	if((IO_EXP_PINName_handler->IC_no == 25) || (IO_EXP_PINName_handler->IC_no == 48))
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b19      	cmp	r3, #25
 8010196:	d003      	beq.n	80101a0 <digital_io_setoutputhigh+0x1c>
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	781b      	ldrb	r3, [r3, #0]
 801019c:	2b30      	cmp	r3, #48	; 0x30
 801019e:	d101      	bne.n	80101a4 <digital_io_setoutputhigh+0x20>
	{
		Io_Exp_address = 0x42;
 80101a0:	2342      	movs	r3, #66	; 0x42
 80101a2:	73fb      	strb	r3, [r7, #15]
	}

	if((IO_EXP_PINName_handler->IC_no == 24) || (IO_EXP_PINName_handler->IC_no == 25))
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	2b18      	cmp	r3, #24
 80101aa:	d003      	beq.n	80101b4 <digital_io_setoutputhigh+0x30>
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	2b19      	cmp	r3, #25
 80101b2:	d108      	bne.n	80101c6 <digital_io_setoutputhigh+0x42>
	{
		IOExp_SetPIN_HIGH(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler->port, IO_EXP_PINName_handler->pin);
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	785a      	ldrb	r2, [r3, #1]
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	789b      	ldrb	r3, [r3, #2]
 80101bc:	7bf9      	ldrb	r1, [r7, #15]
 80101be:	4807      	ldr	r0, [pc, #28]	; (80101dc <digital_io_setoutputhigh+0x58>)
 80101c0:	f7f5 f816 	bl	80051f0 <IOExp_SetPIN_HIGH>
 80101c4:	e007      	b.n	80101d6 <digital_io_setoutputhigh+0x52>
	}
	else
	{
		IOExp_SetPIN_HIGH(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler->port, IO_EXP_PINName_handler->pin);
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	785a      	ldrb	r2, [r3, #1]
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	789b      	ldrb	r3, [r3, #2]
 80101ce:	7bf9      	ldrb	r1, [r7, #15]
 80101d0:	4803      	ldr	r0, [pc, #12]	; (80101e0 <digital_io_setoutputhigh+0x5c>)
 80101d2:	f7f5 f80d 	bl	80051f0 <IOExp_SetPIN_HIGH>
	}
}
 80101d6:	3710      	adds	r7, #16
 80101d8:	46bd      	mov	sp, r7
 80101da:	bd80      	pop	{r7, pc}
 80101dc:	1ffe8a5c 	.word	0x1ffe8a5c
 80101e0:	1ffe8a68 	.word	0x1ffe8a68

080101e4 <Delay>:

void Delay(uint32_t delay_ms)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b084      	sub	sp, #16
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 80101ec:	480f      	ldr	r0, [pc, #60]	; (801022c <Delay+0x48>)
 80101ee:	f7f6 fa09 	bl	8006604 <TIMER_ClearEvent>

   delay_cnt = delay_ms * 100000;//TIMER_DELAY_MUL_FACTOR;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	4a0e      	ldr	r2, [pc, #56]	; (8010230 <Delay+0x4c>)
 80101f6:	fb02 f303 	mul.w	r3, r2, r3
 80101fa:	60fb      	str	r3, [r7, #12]

   TIMER_SetTimeInterval(&TIMER_0,delay_cnt);
 80101fc:	480b      	ldr	r0, [pc, #44]	; (801022c <Delay+0x48>)
 80101fe:	68f9      	ldr	r1, [r7, #12]
 8010200:	f7f6 f8de 	bl	80063c0 <TIMER_SetTimeInterval>

   TIMER_Start(&TIMER_0);
 8010204:	4809      	ldr	r0, [pc, #36]	; (801022c <Delay+0x48>)
 8010206:	f7f6 f85f 	bl	80062c8 <TIMER_Start>

   while(!TIMER_GetInterruptStatus(&TIMER_0));
 801020a:	bf00      	nop
 801020c:	4807      	ldr	r0, [pc, #28]	; (801022c <Delay+0x48>)
 801020e:	f7f6 f9d3 	bl	80065b8 <TIMER_GetInterruptStatus>
 8010212:	4603      	mov	r3, r0
 8010214:	f083 0301 	eor.w	r3, r3, #1
 8010218:	b2db      	uxtb	r3, r3
 801021a:	2b00      	cmp	r3, #0
 801021c:	d1f6      	bne.n	801020c <Delay+0x28>

   TIMER_Stop(&TIMER_0);
 801021e:	4803      	ldr	r0, [pc, #12]	; (801022c <Delay+0x48>)
 8010220:	f7f6 f87a 	bl	8006318 <TIMER_Stop>

}
 8010224:	3710      	adds	r7, #16
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	1ffe8850 	.word	0x1ffe8850
 8010230:	000186a0 	.word	0x000186a0

08010234 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010234:	b480      	push	{r7}
 8010236:	b083      	sub	sp, #12
 8010238:	af00      	add	r7, sp, #0
 801023a:	4603      	mov	r3, r0
 801023c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010242:	2b00      	cmp	r3, #0
 8010244:	db10      	blt.n	8010268 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010246:	490b      	ldr	r1, [pc, #44]	; (8010274 <__NVIC_DisableIRQ+0x40>)
 8010248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801024c:	095b      	lsrs	r3, r3, #5
 801024e:	79fa      	ldrb	r2, [r7, #7]
 8010250:	f002 021f 	and.w	r2, r2, #31
 8010254:	2001      	movs	r0, #1
 8010256:	fa00 f202 	lsl.w	r2, r0, r2
 801025a:	3320      	adds	r3, #32
 801025c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8010260:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8010264:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8010268:	370c      	adds	r7, #12
 801026a:	46bd      	mov	sp, r7
 801026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010270:	4770      	bx	lr
 8010272:	bf00      	nop
 8010274:	e000e100 	.word	0xe000e100

08010278 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	460b      	mov	r3, r1
 8010282:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8010284:	78fb      	ldrb	r3, [r7, #3]
 8010286:	2201      	movs	r2, #1
 8010288:	409a      	lsls	r2, r3
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	605a      	str	r2, [r3, #4]
}
 801028e:	370c      	adds	r7, #12
 8010290:	46bd      	mov	sp, r7
 8010292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010296:	4770      	bx	lr

08010298 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681a      	ldr	r2, [r3, #0]
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	7c1b      	ldrb	r3, [r3, #16]
 80102a8:	4610      	mov	r0, r2
 80102aa:	4619      	mov	r1, r3
 80102ac:	f7ff ffe4 	bl	8010278 <XMC_GPIO_SetOutputHigh>
}
 80102b0:	3708      	adds	r7, #8
 80102b2:	46bd      	mov	sp, r7
 80102b4:	bd80      	pop	{r7, pc}
 80102b6:	bf00      	nop

080102b8 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 80102b8:	b480      	push	{r7}
 80102ba:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 80102bc:	4a04      	ldr	r2, [pc, #16]	; (80102d0 <XMC_WDT_Start+0x18>)
 80102be:	4b04      	ldr	r3, [pc, #16]	; (80102d0 <XMC_WDT_Start+0x18>)
 80102c0:	685b      	ldr	r3, [r3, #4]
 80102c2:	f043 0301 	orr.w	r3, r3, #1
 80102c6:	6053      	str	r3, [r2, #4]
}
 80102c8:	46bd      	mov	sp, r7
 80102ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ce:	4770      	bx	lr
 80102d0:	50008000 	.word	0x50008000

080102d4 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 80102d4:	b480      	push	{r7}
 80102d6:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 80102d8:	4b03      	ldr	r3, [pc, #12]	; (80102e8 <XMC_WDT_Service+0x14>)
 80102da:	4a04      	ldr	r2, [pc, #16]	; (80102ec <XMC_WDT_Service+0x18>)
 80102dc:	609a      	str	r2, [r3, #8]
}
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr
 80102e6:	bf00      	nop
 80102e8:	50008000 	.word	0x50008000
 80102ec:	abadcafe 	.word	0xabadcafe

080102f0 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 80102f0:	b480      	push	{r7}
 80102f2:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 80102f4:	4b03      	ldr	r3, [pc, #12]	; (8010304 <XMC_WDT_ClearAlarm+0x14>)
 80102f6:	2201      	movs	r2, #1
 80102f8:	61da      	str	r2, [r3, #28]
}
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr
 8010302:	bf00      	nop
 8010304:	50008000 	.word	0x50008000

08010308 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 8010308:	b580      	push	{r7, lr}
 801030a:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 801030c:	f7ff ffd4 	bl	80102b8 <XMC_WDT_Start>
}
 8010310:	bd80      	pop	{r7, pc}
 8010312:	bf00      	nop

08010314 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 8010318:	f7ff ffdc 	bl	80102d4 <XMC_WDT_Service>
}
 801031c:	bd80      	pop	{r7, pc}
 801031e:	bf00      	nop

08010320 <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 8010324:	f7ff ffe4 	bl	80102f0 <XMC_WDT_ClearAlarm>
}
 8010328:	bd80      	pop	{r7, pc}
 801032a:	bf00      	nop

0801032c <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 801032c:	b580      	push	{r7, lr}
 801032e:	b082      	sub	sp, #8
 8010330:	af00      	add	r7, sp, #0
 8010332:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	781b      	ldrb	r3, [r3, #0]
 8010338:	b25b      	sxtb	r3, r3
 801033a:	4618      	mov	r0, r3
 801033c:	f7ff ff7a 	bl	8010234 <__NVIC_DisableIRQ>
}
 8010340:	3708      	adds	r7, #8
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
 8010346:	bf00      	nop

08010348 <main>:
int testv = 0;
bool is_drive_mode = false;
volatile uint16_t seconds_elapsed = 0;

int main(void)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 801034e:	2304      	movs	r3, #4
 8010350:	71fb      	strb	r3, [r7, #7]
	uint8_t super_count = 0;
 8010352:	2300      	movs	r3, #0
 8010354:	71bb      	strb	r3, [r7, #6]
	//jump :;
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 8010356:	f7f8 fd8b 	bl	8008e70 <DAVE_Init>
 801035a:	4603      	mov	r3, r0
 801035c:	717b      	strb	r3, [r7, #5]

  if (status != DAVE_STATUS_SUCCESS)
 801035e:	797b      	ldrb	r3, [r7, #5]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d003      	beq.n	801036c <main+0x24>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 8010364:	481c      	ldr	r0, [pc, #112]	; (80103d8 <main+0x90>)
 8010366:	f001 fdff 	bl	8011f68 <puts>

    while(1U)
    {

    }
 801036a:	e7fe      	b.n	801036a <main+0x22>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */

	/*  enable here all the relays need to be HIGH at startup  */
	INTERRUPT_Disable(&INTERRUPT_0);
 801036c:	481b      	ldr	r0, [pc, #108]	; (80103dc <main+0x94>)
 801036e:	f7ff ffdd 	bl	801032c <INTERRUPT_Disable>
	VCU_init_on();
 8010372:	f000 f837 	bl	80103e4 <VCU_init_on>
	reset_on();
 8010376:	f000 f88f 	bl	8010498 <reset_on>
	//initialize_sd_card_and_transmit_cid();
	len_retStatus = mod_open4gModPort();
 801037a:	f7fb fcaf 	bl	800bcdc <mod_open4gModPort>
 801037e:	4603      	mov	r3, r0
 8010380:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus) {
 8010382:	79fb      	ldrb	r3, [r7, #7]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d10c      	bne.n	80103a2 <main+0x5a>
		len_retStatus = tm_setTimerCount(TM_1MS_TIMER_VAL);
 8010388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 801038c:	f7ef ffca 	bl	8000324 <tm_setTimerCount>
 8010390:	4603      	mov	r3, r0
 8010392:	71fb      	strb	r3, [r7, #7]
		if (E_RET_SUCCESS == len_retStatus) {
 8010394:	79fb      	ldrb	r3, [r7, #7]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d103      	bne.n	80103a2 <main+0x5a>
			len_retStatus = tm_startTimer();
 801039a:	f7ef ffe3 	bl	8000364 <tm_startTimer>
 801039e:	4603      	mov	r3, r0
 80103a0:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus) {
			}
		}
	}

	mod_enable4gModule();
 80103a2:	f7fb fc65 	bl	800bc70 <mod_enable4gModule>

	while (1U) {
		//SuperLooptime_Start();

	  /* Updating the inputs*/
	  InputCapture();
 80103a6:	f000 f831 	bl	801040c <InputCapture>


	  /* processing all inputs */
	  Process_Inputs();
 80103aa:	f000 f84d 	bl	8010448 <Process_Inputs>

		/* action loop , taking the action */
	  Vcu_OutPut();
 80103ae:	f000 f85f 	bl	8010470 <Vcu_OutPut>

		//SuperLooptime_End();

		//SuperLooptime_Start();

		mod_receiveRsp();
 80103b2:	f7fb fca1 	bl	800bcf8 <mod_receiveRsp>
		if(false == gb_isMqttConnected)
 80103b6:	4b0a      	ldr	r3, [pc, #40]	; (80103e0 <main+0x98>)
 80103b8:	781b      	ldrb	r3, [r3, #0]
 80103ba:	f083 0301 	eor.w	r3, r3, #1
 80103be:	b2db      	uxtb	r3, r3
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	d002      	beq.n	80103ca <main+0x82>
		{
			mod_4gHandler();
 80103c4:	f7fe f842 	bl	800e44c <mod_4gHandler>
 80103c8:	e005      	b.n	80103d6 <main+0x8e>
		}
		else if(true == gb_isMqttConnected)
 80103ca:	4b05      	ldr	r3, [pc, #20]	; (80103e0 <main+0x98>)
 80103cc:	781b      	ldrb	r3, [r3, #0]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d001      	beq.n	80103d6 <main+0x8e>
		{
//			mod_4gProcess();
			mod_pub10sPackExtractGps();
 80103d2:	f7fe f993 	bl	800e6fc <mod_pub10sPackExtractGps>
	 }
	  else if((!DIGITAL_IO_GetInput(&IGNI_POS1_IN_D)))
	  {
		  super_count = 0;
	  }*/
  }
 80103d6:	e7e6      	b.n	80103a6 <main+0x5e>
 80103d8:	08014448 	.word	0x08014448
 80103dc:	08013430 	.word	0x08013430
 80103e0:	1fff5230 	.word	0x1fff5230

080103e4 <VCU_init_on>:
}

void VCU_init_on(void) {
 80103e4:	b580      	push	{r7, lr}
 80103e6:	af00      	add	r7, sp, #0
	/* enable here all the relays need to be HIGH at startup */

		//set_PIN(&COMM_PWR_ENB_D, HIGH);

		/* enable common power to IO */
		DIGITAL_IO_SetOutputHigh(&COMM_3V3_PWR_EN);
 80103e8:	4805      	ldr	r0, [pc, #20]	; (8010400 <VCU_init_on+0x1c>)
 80103ea:	f7ff ff55 	bl	8010298 <DIGITAL_IO_SetOutputHigh>

		/* 3v3 enable */
		DIGITAL_IO_SetOutputHigh(&INPUTS_3V3_PWR_EN);
 80103ee:	4805      	ldr	r0, [pc, #20]	; (8010404 <VCU_init_on+0x20>)
 80103f0:	f7ff ff52 	bl	8010298 <DIGITAL_IO_SetOutputHigh>


		DIGITAL_IO_SetOutputHigh(&SENSOR_3V3_PWR_EN);
 80103f4:	4804      	ldr	r0, [pc, #16]	; (8010408 <VCU_init_on+0x24>)
 80103f6:	f7ff ff4f 	bl	8010298 <DIGITAL_IO_SetOutputHigh>

	/* comm initialization */
	Io_Exp_Init();
 80103fa:	f7ff fdd9 	bl	800ffb0 <Io_Exp_Init>

}
 80103fe:	bd80      	pop	{r7, pc}
 8010400:	08013830 	.word	0x08013830
 8010404:	0801381c 	.word	0x0801381c
 8010408:	08013844 	.word	0x08013844

0801040c <InputCapture>:

void InputCapture(void) {
 801040c:	b580      	push	{r7, lr}
 801040e:	af00      	add	r7, sp, #0
	uart_debugg(
 8010410:	4809      	ldr	r0, [pc, #36]	; (8010438 <InputCapture+0x2c>)
 8010412:	f7ff fdc3 	bl	800ff9c <uart_debugg>
			"************************in input capture************************\n");
	CState = PreState = 1;
 8010416:	4b09      	ldr	r3, [pc, #36]	; (801043c <InputCapture+0x30>)
 8010418:	2201      	movs	r2, #1
 801041a:	701a      	strb	r2, [r3, #0]
 801041c:	4b07      	ldr	r3, [pc, #28]	; (801043c <InputCapture+0x30>)
 801041e:	781a      	ldrb	r2, [r3, #0]
 8010420:	4b07      	ldr	r3, [pc, #28]	; (8010440 <InputCapture+0x34>)
 8010422:	701a      	strb	r2, [r3, #0]
	/* Updating the inputs */
	Input_Capture();
 8010424:	f7f4 ffba 	bl	800539c <Input_Capture>
	PreState = 0;
 8010428:	4b04      	ldr	r3, [pc, #16]	; (801043c <InputCapture+0x30>)
 801042a:	2200      	movs	r2, #0
 801042c:	701a      	strb	r2, [r3, #0]
	uart_debugg("************************exit input capture************************\n");
 801042e:	4805      	ldr	r0, [pc, #20]	; (8010444 <InputCapture+0x38>)
 8010430:	f7ff fdb4 	bl	800ff9c <uart_debugg>
}
 8010434:	bd80      	pop	{r7, pc}
 8010436:	bf00      	nop
 8010438:	08014468 	.word	0x08014468
 801043c:	1fff4793 	.word	0x1fff4793
 8010440:	1fff42cc 	.word	0x1fff42cc
 8010444:	080144ac 	.word	0x080144ac

08010448 <Process_Inputs>:

void Process_Inputs(void)
{
 8010448:	b580      	push	{r7, lr}
 801044a:	af00      	add	r7, sp, #0
	uart_debugg("************************in process input************************\n");
 801044c:	4805      	ldr	r0, [pc, #20]	; (8010464 <Process_Inputs+0x1c>)
 801044e:	f7ff fda5 	bl	800ff9c <uart_debugg>
	CState = 2;
 8010452:	4b05      	ldr	r3, [pc, #20]	; (8010468 <Process_Inputs+0x20>)
 8010454:	2202      	movs	r2, #2
 8010456:	701a      	strb	r2, [r3, #0]
	/* Updating the outputs */
	Process_VcuOutputs_Update();
 8010458:	f7f0 fac4 	bl	80009e4 <Process_VcuOutputs_Update>
	uart_debugg("***********************exit process input**************************\n");
 801045c:	4803      	ldr	r0, [pc, #12]	; (801046c <Process_Inputs+0x24>)
 801045e:	f7ff fd9d 	bl	800ff9c <uart_debugg>
}
 8010462:	bd80      	pop	{r7, pc}
 8010464:	080144f0 	.word	0x080144f0
 8010468:	1fff42cc 	.word	0x1fff42cc
 801046c:	08014534 	.word	0x08014534

08010470 <Vcu_OutPut>:

void Vcu_OutPut(void)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	af00      	add	r7, sp, #0
	uart_debugg("***********************in vcu output*****************************\n");
 8010474:	4805      	ldr	r0, [pc, #20]	; (801048c <Vcu_OutPut+0x1c>)
 8010476:	f7ff fd91 	bl	800ff9c <uart_debugg>
	CState = 3;
 801047a:	4b05      	ldr	r3, [pc, #20]	; (8010490 <Vcu_OutPut+0x20>)
 801047c:	2203      	movs	r2, #3
 801047e:	701a      	strb	r2, [r3, #0]
	/* Taking the action */
	OutPutAction_Update();
 8010480:	f7f1 fc00 	bl	8001c84 <OutPutAction_Update>
	uart_debugg("************************exit vcu output******************************\n");
 8010484:	4803      	ldr	r0, [pc, #12]	; (8010494 <Vcu_OutPut+0x24>)
 8010486:	f7ff fd89 	bl	800ff9c <uart_debugg>
}
 801048a:	bd80      	pop	{r7, pc}
 801048c:	0801457c 	.word	0x0801457c
 8010490:	1fff42cc 	.word	0x1fff42cc
 8010494:	080145c0 	.word	0x080145c0

08010498 <reset_on>:

void reset_on(void)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	af00      	add	r7, sp, #0
	//WATCHDOG_Stop();
	Delay(100);
 801049c:	2064      	movs	r0, #100	; 0x64
 801049e:	f7ff fea1 	bl	80101e4 <Delay>
	WATCHDOG_Start();
 80104a2:	f7ff ff31 	bl	8010308 <WATCHDOG_Start>
}
 80104a6:	bd80      	pop	{r7, pc}

080104a8 <NMI_Handler>:

void NMI_Handler(void)
{
 80104a8:	b580      	push	{r7, lr}
 80104aa:	af00      	add	r7, sp, #0
	//if(!PreState)
	{
		//PreState = CState;
	//uart_debugg("in watchdog");
	WATCHDOG_ClearAlarm();
 80104ac:	f7ff ff38 	bl	8010320 <WATCHDOG_ClearAlarm>
	//XMC_SCU_cle
	XMC_SCU_INTERRUPT_ClearEventStatus((XMC_SCU_INTERRUPT_EVENT_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 80104b0:	2001      	movs	r0, #1
 80104b2:	f7f1 feab 	bl	800220c <XMC_SCU_INTERRUPT_ClearEventStatus>
	WATCHDOG_Service();
 80104b6:	f7ff ff2d 	bl	8010314 <WATCHDOG_Service>
	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
	//uart_debugg("exit watchdog");
	}
}
 80104ba:	bd80      	pop	{r7, pc}

080104bc <CCU43_1_IRQHandler>:

//used for 12V battery charging during parked mode. 10 seconds timer
void timer_irq(void)
{
 80104bc:	b480      	push	{r7}
 80104be:	af00      	add	r7, sp, #0
	seconds_elapsed++;
 80104c0:	4b05      	ldr	r3, [pc, #20]	; (80104d8 <CCU43_1_IRQHandler+0x1c>)
 80104c2:	881b      	ldrh	r3, [r3, #0]
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	3301      	adds	r3, #1
 80104c8:	b29a      	uxth	r2, r3
 80104ca:	4b03      	ldr	r3, [pc, #12]	; (80104d8 <CCU43_1_IRQHandler+0x1c>)
 80104cc:	801a      	strh	r2, [r3, #0]
}
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	1fff4794 	.word	0x1fff4794

080104dc <log>:
 80104dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104e0:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80105d4 <log+0xf8>
 80104e4:	b08b      	sub	sp, #44	; 0x2c
 80104e6:	4606      	mov	r6, r0
 80104e8:	460f      	mov	r7, r1
 80104ea:	f000 f879 	bl	80105e0 <__ieee754_log>
 80104ee:	f998 3000 	ldrsb.w	r3, [r8]
 80104f2:	3301      	adds	r3, #1
 80104f4:	4604      	mov	r4, r0
 80104f6:	460d      	mov	r5, r1
 80104f8:	d00b      	beq.n	8010512 <log+0x36>
 80104fa:	4630      	mov	r0, r6
 80104fc:	4639      	mov	r1, r7
 80104fe:	f000 fa57 	bl	80109b0 <__fpclassifyd>
 8010502:	b130      	cbz	r0, 8010512 <log+0x36>
 8010504:	4630      	mov	r0, r6
 8010506:	4639      	mov	r1, r7
 8010508:	2200      	movs	r2, #0
 801050a:	2300      	movs	r3, #0
 801050c:	f000 fecc 	bl	80112a8 <__aeabi_dcmpgt>
 8010510:	b120      	cbz	r0, 801051c <log+0x40>
 8010512:	4620      	mov	r0, r4
 8010514:	4629      	mov	r1, r5
 8010516:	b00b      	add	sp, #44	; 0x2c
 8010518:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801051c:	f898 4000 	ldrb.w	r4, [r8]
 8010520:	4b29      	ldr	r3, [pc, #164]	; (80105c8 <log+0xec>)
 8010522:	9008      	str	r0, [sp, #32]
 8010524:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010528:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801052c:	9301      	str	r3, [sp, #4]
 801052e:	b99c      	cbnz	r4, 8010558 <log+0x7c>
 8010530:	4d26      	ldr	r5, [pc, #152]	; (80105cc <log+0xf0>)
 8010532:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8010536:	4630      	mov	r0, r6
 8010538:	4639      	mov	r1, r7
 801053a:	2200      	movs	r2, #0
 801053c:	2300      	movs	r3, #0
 801053e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010542:	f000 fe89 	bl	8011258 <__aeabi_dcmpeq>
 8010546:	2800      	cmp	r0, #0
 8010548:	d135      	bne.n	80105b6 <log+0xda>
 801054a:	2301      	movs	r3, #1
 801054c:	9300      	str	r3, [sp, #0]
 801054e:	4668      	mov	r0, sp
 8010550:	f000 fa5a 	bl	8010a08 <matherr>
 8010554:	b9a8      	cbnz	r0, 8010582 <log+0xa6>
 8010556:	e010      	b.n	801057a <log+0x9e>
 8010558:	f8df 907c 	ldr.w	r9, [pc, #124]	; 80105d8 <log+0xfc>
 801055c:	f04f 0800 	mov.w	r8, #0
 8010560:	4630      	mov	r0, r6
 8010562:	4639      	mov	r1, r7
 8010564:	2200      	movs	r2, #0
 8010566:	2300      	movs	r3, #0
 8010568:	e9cd 8906 	strd	r8, r9, [sp, #24]
 801056c:	f000 fe74 	bl	8011258 <__aeabi_dcmpeq>
 8010570:	b998      	cbnz	r0, 801059a <log+0xbe>
 8010572:	2301      	movs	r3, #1
 8010574:	2c02      	cmp	r4, #2
 8010576:	9300      	str	r3, [sp, #0]
 8010578:	d1e9      	bne.n	801054e <log+0x72>
 801057a:	f001 fa07 	bl	801198c <__errno>
 801057e:	2321      	movs	r3, #33	; 0x21
 8010580:	6003      	str	r3, [r0, #0]
 8010582:	4813      	ldr	r0, [pc, #76]	; (80105d0 <log+0xf4>)
 8010584:	f000 fa42 	bl	8010a0c <nan>
 8010588:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801058c:	9b08      	ldr	r3, [sp, #32]
 801058e:	b9ab      	cbnz	r3, 80105bc <log+0xe0>
 8010590:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010594:	b00b      	add	sp, #44	; 0x2c
 8010596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801059a:	2302      	movs	r3, #2
 801059c:	429c      	cmp	r4, r3
 801059e:	9300      	str	r3, [sp, #0]
 80105a0:	d004      	beq.n	80105ac <log+0xd0>
 80105a2:	4668      	mov	r0, sp
 80105a4:	f000 fa30 	bl	8010a08 <matherr>
 80105a8:	2800      	cmp	r0, #0
 80105aa:	d1ef      	bne.n	801058c <log+0xb0>
 80105ac:	f001 f9ee 	bl	801198c <__errno>
 80105b0:	2322      	movs	r3, #34	; 0x22
 80105b2:	6003      	str	r3, [r0, #0]
 80105b4:	e7ea      	b.n	801058c <log+0xb0>
 80105b6:	2302      	movs	r3, #2
 80105b8:	9300      	str	r3, [sp, #0]
 80105ba:	e7f2      	b.n	80105a2 <log+0xc6>
 80105bc:	f001 f9e6 	bl	801198c <__errno>
 80105c0:	9b08      	ldr	r3, [sp, #32]
 80105c2:	6003      	str	r3, [r0, #0]
 80105c4:	e7e4      	b.n	8010590 <log+0xb4>
 80105c6:	bf00      	nop
 80105c8:	08014608 	.word	0x08014608
 80105cc:	c7efffff 	.word	0xc7efffff
 80105d0:	0801460c 	.word	0x0801460c
 80105d4:	1fff42cd 	.word	0x1fff42cd
 80105d8:	fff00000 	.word	0xfff00000
 80105dc:	00000000 	.word	0x00000000

080105e0 <__ieee754_log>:
 80105e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80105e4:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80105e8:	b085      	sub	sp, #20
 80105ea:	4606      	mov	r6, r0
 80105ec:	460f      	mov	r7, r1
 80105ee:	460b      	mov	r3, r1
 80105f0:	da5a      	bge.n	80106a8 <__ieee754_log+0xc8>
 80105f2:	4602      	mov	r2, r0
 80105f4:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 80105f8:	4322      	orrs	r2, r4
 80105fa:	f000 80f6 	beq.w	80107ea <__ieee754_log+0x20a>
 80105fe:	2900      	cmp	r1, #0
 8010600:	f2c0 8172 	blt.w	80108e8 <__ieee754_log+0x308>
 8010604:	2200      	movs	r2, #0
 8010606:	4bde      	ldr	r3, [pc, #888]	; (8010980 <__ieee754_log+0x3a0>)
 8010608:	f000 fbbe 	bl	8010d88 <__aeabi_dmul>
 801060c:	460b      	mov	r3, r1
 801060e:	460f      	mov	r7, r1
 8010610:	49dc      	ldr	r1, [pc, #880]	; (8010984 <__ieee754_log+0x3a4>)
 8010612:	428b      	cmp	r3, r1
 8010614:	4606      	mov	r6, r0
 8010616:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801061a:	dc4a      	bgt.n	80106b2 <__ieee754_log+0xd2>
 801061c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010620:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 8010624:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8010628:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 801062c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8010630:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010634:	151b      	asrs	r3, r3, #20
 8010636:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801063a:	ea41 0705 	orr.w	r7, r1, r5
 801063e:	189c      	adds	r4, r3, r2
 8010640:	4630      	mov	r0, r6
 8010642:	2200      	movs	r2, #0
 8010644:	4bd0      	ldr	r3, [pc, #832]	; (8010988 <__ieee754_log+0x3a8>)
 8010646:	4639      	mov	r1, r7
 8010648:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 801064c:	f000 f9e8 	bl	8010a20 <__aeabi_dsub>
 8010650:	1cab      	adds	r3, r5, #2
 8010652:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010656:	2b02      	cmp	r3, #2
 8010658:	4682      	mov	sl, r0
 801065a:	468b      	mov	fp, r1
 801065c:	f04f 0200 	mov.w	r2, #0
 8010660:	dc30      	bgt.n	80106c4 <__ieee754_log+0xe4>
 8010662:	2300      	movs	r3, #0
 8010664:	f000 fdf8 	bl	8011258 <__aeabi_dcmpeq>
 8010668:	2800      	cmp	r0, #0
 801066a:	f000 80c7 	beq.w	80107fc <__ieee754_log+0x21c>
 801066e:	2c00      	cmp	r4, #0
 8010670:	f000 8143 	beq.w	80108fa <__ieee754_log+0x31a>
 8010674:	4620      	mov	r0, r4
 8010676:	f000 fb21 	bl	8010cbc <__aeabi_i2d>
 801067a:	a3ad      	add	r3, pc, #692	; (adr r3, 8010930 <__ieee754_log+0x350>)
 801067c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010680:	4606      	mov	r6, r0
 8010682:	460f      	mov	r7, r1
 8010684:	f000 fb80 	bl	8010d88 <__aeabi_dmul>
 8010688:	a3ab      	add	r3, pc, #684	; (adr r3, 8010938 <__ieee754_log+0x358>)
 801068a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801068e:	4604      	mov	r4, r0
 8010690:	460d      	mov	r5, r1
 8010692:	4630      	mov	r0, r6
 8010694:	4639      	mov	r1, r7
 8010696:	f000 fb77 	bl	8010d88 <__aeabi_dmul>
 801069a:	4602      	mov	r2, r0
 801069c:	460b      	mov	r3, r1
 801069e:	4620      	mov	r0, r4
 80106a0:	4629      	mov	r1, r5
 80106a2:	f000 f9bf 	bl	8010a24 <__adddf3>
 80106a6:	e00a      	b.n	80106be <__ieee754_log+0xde>
 80106a8:	49b6      	ldr	r1, [pc, #728]	; (8010984 <__ieee754_log+0x3a4>)
 80106aa:	428b      	cmp	r3, r1
 80106ac:	f04f 0200 	mov.w	r2, #0
 80106b0:	ddb4      	ble.n	801061c <__ieee754_log+0x3c>
 80106b2:	4630      	mov	r0, r6
 80106b4:	4639      	mov	r1, r7
 80106b6:	4632      	mov	r2, r6
 80106b8:	463b      	mov	r3, r7
 80106ba:	f000 f9b3 	bl	8010a24 <__adddf3>
 80106be:	b005      	add	sp, #20
 80106c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80106c8:	f000 f9ac 	bl	8010a24 <__adddf3>
 80106cc:	4602      	mov	r2, r0
 80106ce:	460b      	mov	r3, r1
 80106d0:	4650      	mov	r0, sl
 80106d2:	4659      	mov	r1, fp
 80106d4:	f000 fc82 	bl	8010fdc <__aeabi_ddiv>
 80106d8:	4606      	mov	r6, r0
 80106da:	460f      	mov	r7, r1
 80106dc:	4620      	mov	r0, r4
 80106de:	e9cd 6700 	strd	r6, r7, [sp]
 80106e2:	f000 faeb 	bl	8010cbc <__aeabi_i2d>
 80106e6:	4632      	mov	r2, r6
 80106e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80106ec:	463b      	mov	r3, r7
 80106ee:	4630      	mov	r0, r6
 80106f0:	4639      	mov	r1, r7
 80106f2:	f000 fb49 	bl	8010d88 <__aeabi_dmul>
 80106f6:	4602      	mov	r2, r0
 80106f8:	460b      	mov	r3, r1
 80106fa:	4680      	mov	r8, r0
 80106fc:	4689      	mov	r9, r1
 80106fe:	f000 fb43 	bl	8010d88 <__aeabi_dmul>
 8010702:	a38f      	add	r3, pc, #572	; (adr r3, 8010940 <__ieee754_log+0x360>)
 8010704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010708:	4606      	mov	r6, r0
 801070a:	460f      	mov	r7, r1
 801070c:	f000 fb3c 	bl	8010d88 <__aeabi_dmul>
 8010710:	a38d      	add	r3, pc, #564	; (adr r3, 8010948 <__ieee754_log+0x368>)
 8010712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010716:	f000 f985 	bl	8010a24 <__adddf3>
 801071a:	4632      	mov	r2, r6
 801071c:	463b      	mov	r3, r7
 801071e:	f000 fb33 	bl	8010d88 <__aeabi_dmul>
 8010722:	a38b      	add	r3, pc, #556	; (adr r3, 8010950 <__ieee754_log+0x370>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	f000 f97c 	bl	8010a24 <__adddf3>
 801072c:	4632      	mov	r2, r6
 801072e:	463b      	mov	r3, r7
 8010730:	f000 fb2a 	bl	8010d88 <__aeabi_dmul>
 8010734:	a388      	add	r3, pc, #544	; (adr r3, 8010958 <__ieee754_log+0x378>)
 8010736:	e9d3 2300 	ldrd	r2, r3, [r3]
 801073a:	f000 f973 	bl	8010a24 <__adddf3>
 801073e:	4642      	mov	r2, r8
 8010740:	464b      	mov	r3, r9
 8010742:	f000 fb21 	bl	8010d88 <__aeabi_dmul>
 8010746:	a386      	add	r3, pc, #536	; (adr r3, 8010960 <__ieee754_log+0x380>)
 8010748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801074c:	4680      	mov	r8, r0
 801074e:	4689      	mov	r9, r1
 8010750:	4630      	mov	r0, r6
 8010752:	4639      	mov	r1, r7
 8010754:	f000 fb18 	bl	8010d88 <__aeabi_dmul>
 8010758:	a383      	add	r3, pc, #524	; (adr r3, 8010968 <__ieee754_log+0x388>)
 801075a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801075e:	f000 f961 	bl	8010a24 <__adddf3>
 8010762:	4632      	mov	r2, r6
 8010764:	463b      	mov	r3, r7
 8010766:	f000 fb0f 	bl	8010d88 <__aeabi_dmul>
 801076a:	a381      	add	r3, pc, #516	; (adr r3, 8010970 <__ieee754_log+0x390>)
 801076c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010770:	f000 f958 	bl	8010a24 <__adddf3>
 8010774:	4632      	mov	r2, r6
 8010776:	463b      	mov	r3, r7
 8010778:	f000 fb06 	bl	8010d88 <__aeabi_dmul>
 801077c:	460b      	mov	r3, r1
 801077e:	4602      	mov	r2, r0
 8010780:	4649      	mov	r1, r9
 8010782:	4640      	mov	r0, r8
 8010784:	f000 f94e 	bl	8010a24 <__adddf3>
 8010788:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801078c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8010790:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8010794:	3551      	adds	r5, #81	; 0x51
 8010796:	431d      	orrs	r5, r3
 8010798:	2d00      	cmp	r5, #0
 801079a:	4606      	mov	r6, r0
 801079c:	460f      	mov	r7, r1
 801079e:	dd53      	ble.n	8010848 <__ieee754_log+0x268>
 80107a0:	2200      	movs	r2, #0
 80107a2:	4b7a      	ldr	r3, [pc, #488]	; (801098c <__ieee754_log+0x3ac>)
 80107a4:	4650      	mov	r0, sl
 80107a6:	4659      	mov	r1, fp
 80107a8:	f000 faee 	bl	8010d88 <__aeabi_dmul>
 80107ac:	4652      	mov	r2, sl
 80107ae:	465b      	mov	r3, fp
 80107b0:	f000 faea 	bl	8010d88 <__aeabi_dmul>
 80107b4:	4680      	mov	r8, r0
 80107b6:	4689      	mov	r9, r1
 80107b8:	2c00      	cmp	r4, #0
 80107ba:	d160      	bne.n	801087e <__ieee754_log+0x29e>
 80107bc:	4632      	mov	r2, r6
 80107be:	463b      	mov	r3, r7
 80107c0:	f000 f930 	bl	8010a24 <__adddf3>
 80107c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80107c8:	f000 fade 	bl	8010d88 <__aeabi_dmul>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	4640      	mov	r0, r8
 80107d2:	4649      	mov	r1, r9
 80107d4:	f000 f924 	bl	8010a20 <__aeabi_dsub>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4650      	mov	r0, sl
 80107de:	4659      	mov	r1, fp
 80107e0:	f000 f91e 	bl	8010a20 <__aeabi_dsub>
 80107e4:	b005      	add	sp, #20
 80107e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107ea:	2200      	movs	r2, #0
 80107ec:	2300      	movs	r3, #0
 80107ee:	2000      	movs	r0, #0
 80107f0:	4967      	ldr	r1, [pc, #412]	; (8010990 <__ieee754_log+0x3b0>)
 80107f2:	f000 fbf3 	bl	8010fdc <__aeabi_ddiv>
 80107f6:	b005      	add	sp, #20
 80107f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107fc:	4652      	mov	r2, sl
 80107fe:	465b      	mov	r3, fp
 8010800:	4650      	mov	r0, sl
 8010802:	4659      	mov	r1, fp
 8010804:	f000 fac0 	bl	8010d88 <__aeabi_dmul>
 8010808:	a35b      	add	r3, pc, #364	; (adr r3, 8010978 <__ieee754_log+0x398>)
 801080a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080e:	4606      	mov	r6, r0
 8010810:	460f      	mov	r7, r1
 8010812:	4650      	mov	r0, sl
 8010814:	4659      	mov	r1, fp
 8010816:	f000 fab7 	bl	8010d88 <__aeabi_dmul>
 801081a:	4602      	mov	r2, r0
 801081c:	460b      	mov	r3, r1
 801081e:	2000      	movs	r0, #0
 8010820:	495a      	ldr	r1, [pc, #360]	; (801098c <__ieee754_log+0x3ac>)
 8010822:	f000 f8fd 	bl	8010a20 <__aeabi_dsub>
 8010826:	4602      	mov	r2, r0
 8010828:	460b      	mov	r3, r1
 801082a:	4630      	mov	r0, r6
 801082c:	4639      	mov	r1, r7
 801082e:	f000 faab 	bl	8010d88 <__aeabi_dmul>
 8010832:	4606      	mov	r6, r0
 8010834:	460f      	mov	r7, r1
 8010836:	2c00      	cmp	r4, #0
 8010838:	d162      	bne.n	8010900 <__ieee754_log+0x320>
 801083a:	4650      	mov	r0, sl
 801083c:	4659      	mov	r1, fp
 801083e:	4632      	mov	r2, r6
 8010840:	463b      	mov	r3, r7
 8010842:	f000 f8ed 	bl	8010a20 <__aeabi_dsub>
 8010846:	e73a      	b.n	80106be <__ieee754_log+0xde>
 8010848:	2c00      	cmp	r4, #0
 801084a:	f000 80a3 	beq.w	8010994 <__ieee754_log+0x3b4>
 801084e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010852:	a337      	add	r3, pc, #220	; (adr r3, 8010930 <__ieee754_log+0x350>)
 8010854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010858:	4640      	mov	r0, r8
 801085a:	4649      	mov	r1, r9
 801085c:	f000 fa94 	bl	8010d88 <__aeabi_dmul>
 8010860:	4632      	mov	r2, r6
 8010862:	463b      	mov	r3, r7
 8010864:	4604      	mov	r4, r0
 8010866:	460d      	mov	r5, r1
 8010868:	4650      	mov	r0, sl
 801086a:	4659      	mov	r1, fp
 801086c:	f000 f8d8 	bl	8010a20 <__aeabi_dsub>
 8010870:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010874:	f000 fa88 	bl	8010d88 <__aeabi_dmul>
 8010878:	4606      	mov	r6, r0
 801087a:	460f      	mov	r7, r1
 801087c:	e04c      	b.n	8010918 <__ieee754_log+0x338>
 801087e:	a32c      	add	r3, pc, #176	; (adr r3, 8010930 <__ieee754_log+0x350>)
 8010880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010884:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010888:	f000 fa7e 	bl	8010d88 <__aeabi_dmul>
 801088c:	4632      	mov	r2, r6
 801088e:	463b      	mov	r3, r7
 8010890:	4604      	mov	r4, r0
 8010892:	460d      	mov	r5, r1
 8010894:	4640      	mov	r0, r8
 8010896:	4649      	mov	r1, r9
 8010898:	f000 f8c4 	bl	8010a24 <__adddf3>
 801089c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80108a0:	f000 fa72 	bl	8010d88 <__aeabi_dmul>
 80108a4:	a324      	add	r3, pc, #144	; (adr r3, 8010938 <__ieee754_log+0x358>)
 80108a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108aa:	4606      	mov	r6, r0
 80108ac:	460f      	mov	r7, r1
 80108ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80108b2:	f000 fa69 	bl	8010d88 <__aeabi_dmul>
 80108b6:	4602      	mov	r2, r0
 80108b8:	460b      	mov	r3, r1
 80108ba:	4630      	mov	r0, r6
 80108bc:	4639      	mov	r1, r7
 80108be:	f000 f8b1 	bl	8010a24 <__adddf3>
 80108c2:	4602      	mov	r2, r0
 80108c4:	460b      	mov	r3, r1
 80108c6:	4640      	mov	r0, r8
 80108c8:	4649      	mov	r1, r9
 80108ca:	f000 f8a9 	bl	8010a20 <__aeabi_dsub>
 80108ce:	4652      	mov	r2, sl
 80108d0:	465b      	mov	r3, fp
 80108d2:	f000 f8a5 	bl	8010a20 <__aeabi_dsub>
 80108d6:	4602      	mov	r2, r0
 80108d8:	460b      	mov	r3, r1
 80108da:	4620      	mov	r0, r4
 80108dc:	4629      	mov	r1, r5
 80108de:	f000 f89f 	bl	8010a20 <__aeabi_dsub>
 80108e2:	b005      	add	sp, #20
 80108e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108e8:	4602      	mov	r2, r0
 80108ea:	460b      	mov	r3, r1
 80108ec:	f000 f898 	bl	8010a20 <__aeabi_dsub>
 80108f0:	2200      	movs	r2, #0
 80108f2:	2300      	movs	r3, #0
 80108f4:	f000 fb72 	bl	8010fdc <__aeabi_ddiv>
 80108f8:	e6e1      	b.n	80106be <__ieee754_log+0xde>
 80108fa:	2000      	movs	r0, #0
 80108fc:	2100      	movs	r1, #0
 80108fe:	e6de      	b.n	80106be <__ieee754_log+0xde>
 8010900:	4620      	mov	r0, r4
 8010902:	f000 f9db 	bl	8010cbc <__aeabi_i2d>
 8010906:	a30a      	add	r3, pc, #40	; (adr r3, 8010930 <__ieee754_log+0x350>)
 8010908:	e9d3 2300 	ldrd	r2, r3, [r3]
 801090c:	4680      	mov	r8, r0
 801090e:	4689      	mov	r9, r1
 8010910:	f000 fa3a 	bl	8010d88 <__aeabi_dmul>
 8010914:	4604      	mov	r4, r0
 8010916:	460d      	mov	r5, r1
 8010918:	a307      	add	r3, pc, #28	; (adr r3, 8010938 <__ieee754_log+0x358>)
 801091a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801091e:	4640      	mov	r0, r8
 8010920:	4649      	mov	r1, r9
 8010922:	f000 fa31 	bl	8010d88 <__aeabi_dmul>
 8010926:	4602      	mov	r2, r0
 8010928:	460b      	mov	r3, r1
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	e7cc      	b.n	80108ca <__ieee754_log+0x2ea>
 8010930:	fee00000 	.word	0xfee00000
 8010934:	3fe62e42 	.word	0x3fe62e42
 8010938:	35793c76 	.word	0x35793c76
 801093c:	3dea39ef 	.word	0x3dea39ef
 8010940:	df3e5244 	.word	0xdf3e5244
 8010944:	3fc2f112 	.word	0x3fc2f112
 8010948:	96cb03de 	.word	0x96cb03de
 801094c:	3fc74664 	.word	0x3fc74664
 8010950:	94229359 	.word	0x94229359
 8010954:	3fd24924 	.word	0x3fd24924
 8010958:	55555593 	.word	0x55555593
 801095c:	3fe55555 	.word	0x3fe55555
 8010960:	d078c69f 	.word	0xd078c69f
 8010964:	3fc39a09 	.word	0x3fc39a09
 8010968:	1d8e78af 	.word	0x1d8e78af
 801096c:	3fcc71c5 	.word	0x3fcc71c5
 8010970:	9997fa04 	.word	0x9997fa04
 8010974:	3fd99999 	.word	0x3fd99999
 8010978:	55555555 	.word	0x55555555
 801097c:	3fd55555 	.word	0x3fd55555
 8010980:	43500000 	.word	0x43500000
 8010984:	7fefffff 	.word	0x7fefffff
 8010988:	3ff00000 	.word	0x3ff00000
 801098c:	3fe00000 	.word	0x3fe00000
 8010990:	c3500000 	.word	0xc3500000
 8010994:	4602      	mov	r2, r0
 8010996:	460b      	mov	r3, r1
 8010998:	4650      	mov	r0, sl
 801099a:	4659      	mov	r1, fp
 801099c:	f000 f840 	bl	8010a20 <__aeabi_dsub>
 80109a0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80109a4:	f000 f9f0 	bl	8010d88 <__aeabi_dmul>
 80109a8:	e716      	b.n	80107d8 <__ieee754_log+0x1f8>
 80109aa:	bf00      	nop
 80109ac:	f3af 8000 	nop.w

080109b0 <__fpclassifyd>:
 80109b0:	b410      	push	{r4}
 80109b2:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 80109b6:	460b      	mov	r3, r1
 80109b8:	d008      	beq.n	80109cc <__fpclassifyd+0x1c>
 80109ba:	4a11      	ldr	r2, [pc, #68]	; (8010a00 <__fpclassifyd+0x50>)
 80109bc:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80109c0:	4291      	cmp	r1, r2
 80109c2:	d808      	bhi.n	80109d6 <__fpclassifyd+0x26>
 80109c4:	2004      	movs	r0, #4
 80109c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109ca:	4770      	bx	lr
 80109cc:	b918      	cbnz	r0, 80109d6 <__fpclassifyd+0x26>
 80109ce:	2002      	movs	r0, #2
 80109d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80109d4:	4770      	bx	lr
 80109d6:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 80109da:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <__fpclassifyd+0x50>)
 80109dc:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80109e0:	4293      	cmp	r3, r2
 80109e2:	d9ef      	bls.n	80109c4 <__fpclassifyd+0x14>
 80109e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80109e8:	d201      	bcs.n	80109ee <__fpclassifyd+0x3e>
 80109ea:	2003      	movs	r0, #3
 80109ec:	e7eb      	b.n	80109c6 <__fpclassifyd+0x16>
 80109ee:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <__fpclassifyd+0x54>)
 80109f0:	429c      	cmp	r4, r3
 80109f2:	d001      	beq.n	80109f8 <__fpclassifyd+0x48>
 80109f4:	2000      	movs	r0, #0
 80109f6:	e7e6      	b.n	80109c6 <__fpclassifyd+0x16>
 80109f8:	fab0 f080 	clz	r0, r0
 80109fc:	0940      	lsrs	r0, r0, #5
 80109fe:	e7e2      	b.n	80109c6 <__fpclassifyd+0x16>
 8010a00:	7fdfffff 	.word	0x7fdfffff
 8010a04:	7ff00000 	.word	0x7ff00000

08010a08 <matherr>:
 8010a08:	2000      	movs	r0, #0
 8010a0a:	4770      	bx	lr

08010a0c <nan>:
 8010a0c:	2000      	movs	r0, #0
 8010a0e:	4901      	ldr	r1, [pc, #4]	; (8010a14 <nan+0x8>)
 8010a10:	4770      	bx	lr
 8010a12:	bf00      	nop
 8010a14:	7ff80000 	.word	0x7ff80000

08010a18 <__aeabi_drsub>:
 8010a18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010a1c:	e002      	b.n	8010a24 <__adddf3>
 8010a1e:	bf00      	nop

08010a20 <__aeabi_dsub>:
 8010a20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08010a24 <__adddf3>:
 8010a24:	b530      	push	{r4, r5, lr}
 8010a26:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010a2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010a2e:	ea94 0f05 	teq	r4, r5
 8010a32:	bf08      	it	eq
 8010a34:	ea90 0f02 	teqeq	r0, r2
 8010a38:	bf1f      	itttt	ne
 8010a3a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010a3e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8010a42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010a46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010a4a:	f000 80e2 	beq.w	8010c12 <__adddf3+0x1ee>
 8010a4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8010a52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010a56:	bfb8      	it	lt
 8010a58:	426d      	neglt	r5, r5
 8010a5a:	dd0c      	ble.n	8010a76 <__adddf3+0x52>
 8010a5c:	442c      	add	r4, r5
 8010a5e:	ea80 0202 	eor.w	r2, r0, r2
 8010a62:	ea81 0303 	eor.w	r3, r1, r3
 8010a66:	ea82 0000 	eor.w	r0, r2, r0
 8010a6a:	ea83 0101 	eor.w	r1, r3, r1
 8010a6e:	ea80 0202 	eor.w	r2, r0, r2
 8010a72:	ea81 0303 	eor.w	r3, r1, r3
 8010a76:	2d36      	cmp	r5, #54	; 0x36
 8010a78:	bf88      	it	hi
 8010a7a:	bd30      	pophi	{r4, r5, pc}
 8010a7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010a80:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010a84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010a88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010a8c:	d002      	beq.n	8010a94 <__adddf3+0x70>
 8010a8e:	4240      	negs	r0, r0
 8010a90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010a94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010a98:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010a9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010aa0:	d002      	beq.n	8010aa8 <__adddf3+0x84>
 8010aa2:	4252      	negs	r2, r2
 8010aa4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010aa8:	ea94 0f05 	teq	r4, r5
 8010aac:	f000 80a7 	beq.w	8010bfe <__adddf3+0x1da>
 8010ab0:	f1a4 0401 	sub.w	r4, r4, #1
 8010ab4:	f1d5 0e20 	rsbs	lr, r5, #32
 8010ab8:	db0d      	blt.n	8010ad6 <__adddf3+0xb2>
 8010aba:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010abe:	fa22 f205 	lsr.w	r2, r2, r5
 8010ac2:	1880      	adds	r0, r0, r2
 8010ac4:	f141 0100 	adc.w	r1, r1, #0
 8010ac8:	fa03 f20e 	lsl.w	r2, r3, lr
 8010acc:	1880      	adds	r0, r0, r2
 8010ace:	fa43 f305 	asr.w	r3, r3, r5
 8010ad2:	4159      	adcs	r1, r3
 8010ad4:	e00e      	b.n	8010af4 <__adddf3+0xd0>
 8010ad6:	f1a5 0520 	sub.w	r5, r5, #32
 8010ada:	f10e 0e20 	add.w	lr, lr, #32
 8010ade:	2a01      	cmp	r2, #1
 8010ae0:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010ae4:	bf28      	it	cs
 8010ae6:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010aea:	fa43 f305 	asr.w	r3, r3, r5
 8010aee:	18c0      	adds	r0, r0, r3
 8010af0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010af4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010af8:	d507      	bpl.n	8010b0a <__adddf3+0xe6>
 8010afa:	f04f 0e00 	mov.w	lr, #0
 8010afe:	f1dc 0c00 	rsbs	ip, ip, #0
 8010b02:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010b06:	eb6e 0101 	sbc.w	r1, lr, r1
 8010b0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010b0e:	d31b      	bcc.n	8010b48 <__adddf3+0x124>
 8010b10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010b14:	d30c      	bcc.n	8010b30 <__adddf3+0x10c>
 8010b16:	0849      	lsrs	r1, r1, #1
 8010b18:	ea5f 0030 	movs.w	r0, r0, rrx
 8010b1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010b20:	f104 0401 	add.w	r4, r4, #1
 8010b24:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010b28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010b2c:	f080 809a 	bcs.w	8010c64 <__adddf3+0x240>
 8010b30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8010b34:	bf08      	it	eq
 8010b36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010b3a:	f150 0000 	adcs.w	r0, r0, #0
 8010b3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010b42:	ea41 0105 	orr.w	r1, r1, r5
 8010b46:	bd30      	pop	{r4, r5, pc}
 8010b48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010b4c:	4140      	adcs	r0, r0
 8010b4e:	eb41 0101 	adc.w	r1, r1, r1
 8010b52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010b56:	f1a4 0401 	sub.w	r4, r4, #1
 8010b5a:	d1e9      	bne.n	8010b30 <__adddf3+0x10c>
 8010b5c:	f091 0f00 	teq	r1, #0
 8010b60:	bf04      	itt	eq
 8010b62:	4601      	moveq	r1, r0
 8010b64:	2000      	moveq	r0, #0
 8010b66:	fab1 f381 	clz	r3, r1
 8010b6a:	bf08      	it	eq
 8010b6c:	3320      	addeq	r3, #32
 8010b6e:	f1a3 030b 	sub.w	r3, r3, #11
 8010b72:	f1b3 0220 	subs.w	r2, r3, #32
 8010b76:	da0c      	bge.n	8010b92 <__adddf3+0x16e>
 8010b78:	320c      	adds	r2, #12
 8010b7a:	dd08      	ble.n	8010b8e <__adddf3+0x16a>
 8010b7c:	f102 0c14 	add.w	ip, r2, #20
 8010b80:	f1c2 020c 	rsb	r2, r2, #12
 8010b84:	fa01 f00c 	lsl.w	r0, r1, ip
 8010b88:	fa21 f102 	lsr.w	r1, r1, r2
 8010b8c:	e00c      	b.n	8010ba8 <__adddf3+0x184>
 8010b8e:	f102 0214 	add.w	r2, r2, #20
 8010b92:	bfd8      	it	le
 8010b94:	f1c2 0c20 	rsble	ip, r2, #32
 8010b98:	fa01 f102 	lsl.w	r1, r1, r2
 8010b9c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010ba0:	bfdc      	itt	le
 8010ba2:	ea41 010c 	orrle.w	r1, r1, ip
 8010ba6:	4090      	lslle	r0, r2
 8010ba8:	1ae4      	subs	r4, r4, r3
 8010baa:	bfa2      	ittt	ge
 8010bac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010bb0:	4329      	orrge	r1, r5
 8010bb2:	bd30      	popge	{r4, r5, pc}
 8010bb4:	ea6f 0404 	mvn.w	r4, r4
 8010bb8:	3c1f      	subs	r4, #31
 8010bba:	da1c      	bge.n	8010bf6 <__adddf3+0x1d2>
 8010bbc:	340c      	adds	r4, #12
 8010bbe:	dc0e      	bgt.n	8010bde <__adddf3+0x1ba>
 8010bc0:	f104 0414 	add.w	r4, r4, #20
 8010bc4:	f1c4 0220 	rsb	r2, r4, #32
 8010bc8:	fa20 f004 	lsr.w	r0, r0, r4
 8010bcc:	fa01 f302 	lsl.w	r3, r1, r2
 8010bd0:	ea40 0003 	orr.w	r0, r0, r3
 8010bd4:	fa21 f304 	lsr.w	r3, r1, r4
 8010bd8:	ea45 0103 	orr.w	r1, r5, r3
 8010bdc:	bd30      	pop	{r4, r5, pc}
 8010bde:	f1c4 040c 	rsb	r4, r4, #12
 8010be2:	f1c4 0220 	rsb	r2, r4, #32
 8010be6:	fa20 f002 	lsr.w	r0, r0, r2
 8010bea:	fa01 f304 	lsl.w	r3, r1, r4
 8010bee:	ea40 0003 	orr.w	r0, r0, r3
 8010bf2:	4629      	mov	r1, r5
 8010bf4:	bd30      	pop	{r4, r5, pc}
 8010bf6:	fa21 f004 	lsr.w	r0, r1, r4
 8010bfa:	4629      	mov	r1, r5
 8010bfc:	bd30      	pop	{r4, r5, pc}
 8010bfe:	f094 0f00 	teq	r4, #0
 8010c02:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010c06:	bf06      	itte	eq
 8010c08:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010c0c:	3401      	addeq	r4, #1
 8010c0e:	3d01      	subne	r5, #1
 8010c10:	e74e      	b.n	8010ab0 <__adddf3+0x8c>
 8010c12:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010c16:	bf18      	it	ne
 8010c18:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010c1c:	d029      	beq.n	8010c72 <__adddf3+0x24e>
 8010c1e:	ea94 0f05 	teq	r4, r5
 8010c22:	bf08      	it	eq
 8010c24:	ea90 0f02 	teqeq	r0, r2
 8010c28:	d005      	beq.n	8010c36 <__adddf3+0x212>
 8010c2a:	ea54 0c00 	orrs.w	ip, r4, r0
 8010c2e:	bf04      	itt	eq
 8010c30:	4619      	moveq	r1, r3
 8010c32:	4610      	moveq	r0, r2
 8010c34:	bd30      	pop	{r4, r5, pc}
 8010c36:	ea91 0f03 	teq	r1, r3
 8010c3a:	bf1e      	ittt	ne
 8010c3c:	2100      	movne	r1, #0
 8010c3e:	2000      	movne	r0, #0
 8010c40:	bd30      	popne	{r4, r5, pc}
 8010c42:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010c46:	d105      	bne.n	8010c54 <__adddf3+0x230>
 8010c48:	0040      	lsls	r0, r0, #1
 8010c4a:	4149      	adcs	r1, r1
 8010c4c:	bf28      	it	cs
 8010c4e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010c52:	bd30      	pop	{r4, r5, pc}
 8010c54:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010c58:	bf3c      	itt	cc
 8010c5a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010c5e:	bd30      	popcc	{r4, r5, pc}
 8010c60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010c64:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010c68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010c6c:	f04f 0000 	mov.w	r0, #0
 8010c70:	bd30      	pop	{r4, r5, pc}
 8010c72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010c76:	bf1a      	itte	ne
 8010c78:	4619      	movne	r1, r3
 8010c7a:	4610      	movne	r0, r2
 8010c7c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010c80:	bf1c      	itt	ne
 8010c82:	460b      	movne	r3, r1
 8010c84:	4602      	movne	r2, r0
 8010c86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010c8a:	bf06      	itte	eq
 8010c8c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010c90:	ea91 0f03 	teqeq	r1, r3
 8010c94:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010c98:	bd30      	pop	{r4, r5, pc}
 8010c9a:	bf00      	nop

08010c9c <__aeabi_ui2d>:
 8010c9c:	f090 0f00 	teq	r0, #0
 8010ca0:	bf04      	itt	eq
 8010ca2:	2100      	moveq	r1, #0
 8010ca4:	4770      	bxeq	lr
 8010ca6:	b530      	push	{r4, r5, lr}
 8010ca8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010cac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010cb0:	f04f 0500 	mov.w	r5, #0
 8010cb4:	f04f 0100 	mov.w	r1, #0
 8010cb8:	e750      	b.n	8010b5c <__adddf3+0x138>
 8010cba:	bf00      	nop

08010cbc <__aeabi_i2d>:
 8010cbc:	f090 0f00 	teq	r0, #0
 8010cc0:	bf04      	itt	eq
 8010cc2:	2100      	moveq	r1, #0
 8010cc4:	4770      	bxeq	lr
 8010cc6:	b530      	push	{r4, r5, lr}
 8010cc8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010ccc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010cd0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010cd4:	bf48      	it	mi
 8010cd6:	4240      	negmi	r0, r0
 8010cd8:	f04f 0100 	mov.w	r1, #0
 8010cdc:	e73e      	b.n	8010b5c <__adddf3+0x138>
 8010cde:	bf00      	nop

08010ce0 <__aeabi_f2d>:
 8010ce0:	0042      	lsls	r2, r0, #1
 8010ce2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010ce6:	ea4f 0131 	mov.w	r1, r1, rrx
 8010cea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010cee:	bf1f      	itttt	ne
 8010cf0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010cf4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010cf8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010cfc:	4770      	bxne	lr
 8010cfe:	f092 0f00 	teq	r2, #0
 8010d02:	bf14      	ite	ne
 8010d04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010d08:	4770      	bxeq	lr
 8010d0a:	b530      	push	{r4, r5, lr}
 8010d0c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010d10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010d14:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010d18:	e720      	b.n	8010b5c <__adddf3+0x138>
 8010d1a:	bf00      	nop

08010d1c <__aeabi_ul2d>:
 8010d1c:	ea50 0201 	orrs.w	r2, r0, r1
 8010d20:	bf08      	it	eq
 8010d22:	4770      	bxeq	lr
 8010d24:	b530      	push	{r4, r5, lr}
 8010d26:	f04f 0500 	mov.w	r5, #0
 8010d2a:	e00a      	b.n	8010d42 <__aeabi_l2d+0x16>

08010d2c <__aeabi_l2d>:
 8010d2c:	ea50 0201 	orrs.w	r2, r0, r1
 8010d30:	bf08      	it	eq
 8010d32:	4770      	bxeq	lr
 8010d34:	b530      	push	{r4, r5, lr}
 8010d36:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010d3a:	d502      	bpl.n	8010d42 <__aeabi_l2d+0x16>
 8010d3c:	4240      	negs	r0, r0
 8010d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010d42:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010d46:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010d4a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010d4e:	f43f aedc 	beq.w	8010b0a <__adddf3+0xe6>
 8010d52:	f04f 0203 	mov.w	r2, #3
 8010d56:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010d5a:	bf18      	it	ne
 8010d5c:	3203      	addne	r2, #3
 8010d5e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010d62:	bf18      	it	ne
 8010d64:	3203      	addne	r2, #3
 8010d66:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010d6a:	f1c2 0320 	rsb	r3, r2, #32
 8010d6e:	fa00 fc03 	lsl.w	ip, r0, r3
 8010d72:	fa20 f002 	lsr.w	r0, r0, r2
 8010d76:	fa01 fe03 	lsl.w	lr, r1, r3
 8010d7a:	ea40 000e 	orr.w	r0, r0, lr
 8010d7e:	fa21 f102 	lsr.w	r1, r1, r2
 8010d82:	4414      	add	r4, r2
 8010d84:	e6c1      	b.n	8010b0a <__adddf3+0xe6>
 8010d86:	bf00      	nop

08010d88 <__aeabi_dmul>:
 8010d88:	b570      	push	{r4, r5, r6, lr}
 8010d8a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010d8e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010d92:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010d96:	bf1d      	ittte	ne
 8010d98:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010d9c:	ea94 0f0c 	teqne	r4, ip
 8010da0:	ea95 0f0c 	teqne	r5, ip
 8010da4:	f000 f8de 	bleq	8010f64 <__aeabi_dmul+0x1dc>
 8010da8:	442c      	add	r4, r5
 8010daa:	ea81 0603 	eor.w	r6, r1, r3
 8010dae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010db2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010db6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010dba:	bf18      	it	ne
 8010dbc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010dc0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010dc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010dc8:	d038      	beq.n	8010e3c <__aeabi_dmul+0xb4>
 8010dca:	fba0 ce02 	umull	ip, lr, r0, r2
 8010dce:	f04f 0500 	mov.w	r5, #0
 8010dd2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010dd6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010dda:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010dde:	f04f 0600 	mov.w	r6, #0
 8010de2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010de6:	f09c 0f00 	teq	ip, #0
 8010dea:	bf18      	it	ne
 8010dec:	f04e 0e01 	orrne.w	lr, lr, #1
 8010df0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010df4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010df8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010dfc:	d204      	bcs.n	8010e08 <__aeabi_dmul+0x80>
 8010dfe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010e02:	416d      	adcs	r5, r5
 8010e04:	eb46 0606 	adc.w	r6, r6, r6
 8010e08:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010e0c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010e10:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010e14:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010e18:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010e1c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010e20:	bf88      	it	hi
 8010e22:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010e26:	d81e      	bhi.n	8010e66 <__aeabi_dmul+0xde>
 8010e28:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010e2c:	bf08      	it	eq
 8010e2e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010e32:	f150 0000 	adcs.w	r0, r0, #0
 8010e36:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010e3a:	bd70      	pop	{r4, r5, r6, pc}
 8010e3c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010e40:	ea46 0101 	orr.w	r1, r6, r1
 8010e44:	ea40 0002 	orr.w	r0, r0, r2
 8010e48:	ea81 0103 	eor.w	r1, r1, r3
 8010e4c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010e50:	bfc2      	ittt	gt
 8010e52:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010e56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010e5a:	bd70      	popgt	{r4, r5, r6, pc}
 8010e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010e60:	f04f 0e00 	mov.w	lr, #0
 8010e64:	3c01      	subs	r4, #1
 8010e66:	f300 80ab 	bgt.w	8010fc0 <__aeabi_dmul+0x238>
 8010e6a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010e6e:	bfde      	ittt	le
 8010e70:	2000      	movle	r0, #0
 8010e72:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010e76:	bd70      	pople	{r4, r5, r6, pc}
 8010e78:	f1c4 0400 	rsb	r4, r4, #0
 8010e7c:	3c20      	subs	r4, #32
 8010e7e:	da35      	bge.n	8010eec <__aeabi_dmul+0x164>
 8010e80:	340c      	adds	r4, #12
 8010e82:	dc1b      	bgt.n	8010ebc <__aeabi_dmul+0x134>
 8010e84:	f104 0414 	add.w	r4, r4, #20
 8010e88:	f1c4 0520 	rsb	r5, r4, #32
 8010e8c:	fa00 f305 	lsl.w	r3, r0, r5
 8010e90:	fa20 f004 	lsr.w	r0, r0, r4
 8010e94:	fa01 f205 	lsl.w	r2, r1, r5
 8010e98:	ea40 0002 	orr.w	r0, r0, r2
 8010e9c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010ea0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010ea4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010ea8:	fa21 f604 	lsr.w	r6, r1, r4
 8010eac:	eb42 0106 	adc.w	r1, r2, r6
 8010eb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010eb4:	bf08      	it	eq
 8010eb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010eba:	bd70      	pop	{r4, r5, r6, pc}
 8010ebc:	f1c4 040c 	rsb	r4, r4, #12
 8010ec0:	f1c4 0520 	rsb	r5, r4, #32
 8010ec4:	fa00 f304 	lsl.w	r3, r0, r4
 8010ec8:	fa20 f005 	lsr.w	r0, r0, r5
 8010ecc:	fa01 f204 	lsl.w	r2, r1, r4
 8010ed0:	ea40 0002 	orr.w	r0, r0, r2
 8010ed4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010ed8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010edc:	f141 0100 	adc.w	r1, r1, #0
 8010ee0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010ee4:	bf08      	it	eq
 8010ee6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010eea:	bd70      	pop	{r4, r5, r6, pc}
 8010eec:	f1c4 0520 	rsb	r5, r4, #32
 8010ef0:	fa00 f205 	lsl.w	r2, r0, r5
 8010ef4:	ea4e 0e02 	orr.w	lr, lr, r2
 8010ef8:	fa20 f304 	lsr.w	r3, r0, r4
 8010efc:	fa01 f205 	lsl.w	r2, r1, r5
 8010f00:	ea43 0302 	orr.w	r3, r3, r2
 8010f04:	fa21 f004 	lsr.w	r0, r1, r4
 8010f08:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010f0c:	fa21 f204 	lsr.w	r2, r1, r4
 8010f10:	ea20 0002 	bic.w	r0, r0, r2
 8010f14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010f18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010f1c:	bf08      	it	eq
 8010f1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010f22:	bd70      	pop	{r4, r5, r6, pc}
 8010f24:	f094 0f00 	teq	r4, #0
 8010f28:	d10f      	bne.n	8010f4a <__aeabi_dmul+0x1c2>
 8010f2a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010f2e:	0040      	lsls	r0, r0, #1
 8010f30:	eb41 0101 	adc.w	r1, r1, r1
 8010f34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010f38:	bf08      	it	eq
 8010f3a:	3c01      	subeq	r4, #1
 8010f3c:	d0f7      	beq.n	8010f2e <__aeabi_dmul+0x1a6>
 8010f3e:	ea41 0106 	orr.w	r1, r1, r6
 8010f42:	f095 0f00 	teq	r5, #0
 8010f46:	bf18      	it	ne
 8010f48:	4770      	bxne	lr
 8010f4a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010f4e:	0052      	lsls	r2, r2, #1
 8010f50:	eb43 0303 	adc.w	r3, r3, r3
 8010f54:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010f58:	bf08      	it	eq
 8010f5a:	3d01      	subeq	r5, #1
 8010f5c:	d0f7      	beq.n	8010f4e <__aeabi_dmul+0x1c6>
 8010f5e:	ea43 0306 	orr.w	r3, r3, r6
 8010f62:	4770      	bx	lr
 8010f64:	ea94 0f0c 	teq	r4, ip
 8010f68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010f6c:	bf18      	it	ne
 8010f6e:	ea95 0f0c 	teqne	r5, ip
 8010f72:	d00c      	beq.n	8010f8e <__aeabi_dmul+0x206>
 8010f74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010f78:	bf18      	it	ne
 8010f7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010f7e:	d1d1      	bne.n	8010f24 <__aeabi_dmul+0x19c>
 8010f80:	ea81 0103 	eor.w	r1, r1, r3
 8010f84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010f88:	f04f 0000 	mov.w	r0, #0
 8010f8c:	bd70      	pop	{r4, r5, r6, pc}
 8010f8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010f92:	bf06      	itte	eq
 8010f94:	4610      	moveq	r0, r2
 8010f96:	4619      	moveq	r1, r3
 8010f98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010f9c:	d019      	beq.n	8010fd2 <__aeabi_dmul+0x24a>
 8010f9e:	ea94 0f0c 	teq	r4, ip
 8010fa2:	d102      	bne.n	8010faa <__aeabi_dmul+0x222>
 8010fa4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010fa8:	d113      	bne.n	8010fd2 <__aeabi_dmul+0x24a>
 8010faa:	ea95 0f0c 	teq	r5, ip
 8010fae:	d105      	bne.n	8010fbc <__aeabi_dmul+0x234>
 8010fb0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010fb4:	bf1c      	itt	ne
 8010fb6:	4610      	movne	r0, r2
 8010fb8:	4619      	movne	r1, r3
 8010fba:	d10a      	bne.n	8010fd2 <__aeabi_dmul+0x24a>
 8010fbc:	ea81 0103 	eor.w	r1, r1, r3
 8010fc0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010fc4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010fc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010fcc:	f04f 0000 	mov.w	r0, #0
 8010fd0:	bd70      	pop	{r4, r5, r6, pc}
 8010fd2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010fd6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010fda:	bd70      	pop	{r4, r5, r6, pc}

08010fdc <__aeabi_ddiv>:
 8010fdc:	b570      	push	{r4, r5, r6, lr}
 8010fde:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010fe2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010fe6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010fea:	bf1d      	ittte	ne
 8010fec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010ff0:	ea94 0f0c 	teqne	r4, ip
 8010ff4:	ea95 0f0c 	teqne	r5, ip
 8010ff8:	f000 f8a7 	bleq	801114a <__aeabi_ddiv+0x16e>
 8010ffc:	eba4 0405 	sub.w	r4, r4, r5
 8011000:	ea81 0e03 	eor.w	lr, r1, r3
 8011004:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011008:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801100c:	f000 8088 	beq.w	8011120 <__aeabi_ddiv+0x144>
 8011010:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011014:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011018:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801101c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8011020:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011024:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8011028:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801102c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8011030:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8011034:	429d      	cmp	r5, r3
 8011036:	bf08      	it	eq
 8011038:	4296      	cmpeq	r6, r2
 801103a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801103e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8011042:	d202      	bcs.n	801104a <__aeabi_ddiv+0x6e>
 8011044:	085b      	lsrs	r3, r3, #1
 8011046:	ea4f 0232 	mov.w	r2, r2, rrx
 801104a:	1ab6      	subs	r6, r6, r2
 801104c:	eb65 0503 	sbc.w	r5, r5, r3
 8011050:	085b      	lsrs	r3, r3, #1
 8011052:	ea4f 0232 	mov.w	r2, r2, rrx
 8011056:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 801105a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 801105e:	ebb6 0e02 	subs.w	lr, r6, r2
 8011062:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011066:	bf22      	ittt	cs
 8011068:	1ab6      	subcs	r6, r6, r2
 801106a:	4675      	movcs	r5, lr
 801106c:	ea40 000c 	orrcs.w	r0, r0, ip
 8011070:	085b      	lsrs	r3, r3, #1
 8011072:	ea4f 0232 	mov.w	r2, r2, rrx
 8011076:	ebb6 0e02 	subs.w	lr, r6, r2
 801107a:	eb75 0e03 	sbcs.w	lr, r5, r3
 801107e:	bf22      	ittt	cs
 8011080:	1ab6      	subcs	r6, r6, r2
 8011082:	4675      	movcs	r5, lr
 8011084:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8011088:	085b      	lsrs	r3, r3, #1
 801108a:	ea4f 0232 	mov.w	r2, r2, rrx
 801108e:	ebb6 0e02 	subs.w	lr, r6, r2
 8011092:	eb75 0e03 	sbcs.w	lr, r5, r3
 8011096:	bf22      	ittt	cs
 8011098:	1ab6      	subcs	r6, r6, r2
 801109a:	4675      	movcs	r5, lr
 801109c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80110a0:	085b      	lsrs	r3, r3, #1
 80110a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80110a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80110aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80110ae:	bf22      	ittt	cs
 80110b0:	1ab6      	subcs	r6, r6, r2
 80110b2:	4675      	movcs	r5, lr
 80110b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80110b8:	ea55 0e06 	orrs.w	lr, r5, r6
 80110bc:	d018      	beq.n	80110f0 <__aeabi_ddiv+0x114>
 80110be:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80110c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80110c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80110ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80110ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80110d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80110d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80110da:	d1c0      	bne.n	801105e <__aeabi_ddiv+0x82>
 80110dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80110e0:	d10b      	bne.n	80110fa <__aeabi_ddiv+0x11e>
 80110e2:	ea41 0100 	orr.w	r1, r1, r0
 80110e6:	f04f 0000 	mov.w	r0, #0
 80110ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80110ee:	e7b6      	b.n	801105e <__aeabi_ddiv+0x82>
 80110f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80110f4:	bf04      	itt	eq
 80110f6:	4301      	orreq	r1, r0
 80110f8:	2000      	moveq	r0, #0
 80110fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80110fe:	bf88      	it	hi
 8011100:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011104:	f63f aeaf 	bhi.w	8010e66 <__aeabi_dmul+0xde>
 8011108:	ebb5 0c03 	subs.w	ip, r5, r3
 801110c:	bf04      	itt	eq
 801110e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011112:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011116:	f150 0000 	adcs.w	r0, r0, #0
 801111a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801111e:	bd70      	pop	{r4, r5, r6, pc}
 8011120:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8011124:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011128:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801112c:	bfc2      	ittt	gt
 801112e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011132:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011136:	bd70      	popgt	{r4, r5, r6, pc}
 8011138:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801113c:	f04f 0e00 	mov.w	lr, #0
 8011140:	3c01      	subs	r4, #1
 8011142:	e690      	b.n	8010e66 <__aeabi_dmul+0xde>
 8011144:	ea45 0e06 	orr.w	lr, r5, r6
 8011148:	e68d      	b.n	8010e66 <__aeabi_dmul+0xde>
 801114a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801114e:	ea94 0f0c 	teq	r4, ip
 8011152:	bf08      	it	eq
 8011154:	ea95 0f0c 	teqeq	r5, ip
 8011158:	f43f af3b 	beq.w	8010fd2 <__aeabi_dmul+0x24a>
 801115c:	ea94 0f0c 	teq	r4, ip
 8011160:	d10a      	bne.n	8011178 <__aeabi_ddiv+0x19c>
 8011162:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8011166:	f47f af34 	bne.w	8010fd2 <__aeabi_dmul+0x24a>
 801116a:	ea95 0f0c 	teq	r5, ip
 801116e:	f47f af25 	bne.w	8010fbc <__aeabi_dmul+0x234>
 8011172:	4610      	mov	r0, r2
 8011174:	4619      	mov	r1, r3
 8011176:	e72c      	b.n	8010fd2 <__aeabi_dmul+0x24a>
 8011178:	ea95 0f0c 	teq	r5, ip
 801117c:	d106      	bne.n	801118c <__aeabi_ddiv+0x1b0>
 801117e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011182:	f43f aefd 	beq.w	8010f80 <__aeabi_dmul+0x1f8>
 8011186:	4610      	mov	r0, r2
 8011188:	4619      	mov	r1, r3
 801118a:	e722      	b.n	8010fd2 <__aeabi_dmul+0x24a>
 801118c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8011190:	bf18      	it	ne
 8011192:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8011196:	f47f aec5 	bne.w	8010f24 <__aeabi_dmul+0x19c>
 801119a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 801119e:	f47f af0d 	bne.w	8010fbc <__aeabi_dmul+0x234>
 80111a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80111a6:	f47f aeeb 	bne.w	8010f80 <__aeabi_dmul+0x1f8>
 80111aa:	e712      	b.n	8010fd2 <__aeabi_dmul+0x24a>

080111ac <__gedf2>:
 80111ac:	f04f 3cff 	mov.w	ip, #4294967295
 80111b0:	e006      	b.n	80111c0 <__cmpdf2+0x4>
 80111b2:	bf00      	nop

080111b4 <__ledf2>:
 80111b4:	f04f 0c01 	mov.w	ip, #1
 80111b8:	e002      	b.n	80111c0 <__cmpdf2+0x4>
 80111ba:	bf00      	nop

080111bc <__cmpdf2>:
 80111bc:	f04f 0c01 	mov.w	ip, #1
 80111c0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80111c4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80111c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80111cc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80111d0:	bf18      	it	ne
 80111d2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80111d6:	d01b      	beq.n	8011210 <__cmpdf2+0x54>
 80111d8:	b001      	add	sp, #4
 80111da:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80111de:	bf0c      	ite	eq
 80111e0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80111e4:	ea91 0f03 	teqne	r1, r3
 80111e8:	bf02      	ittt	eq
 80111ea:	ea90 0f02 	teqeq	r0, r2
 80111ee:	2000      	moveq	r0, #0
 80111f0:	4770      	bxeq	lr
 80111f2:	f110 0f00 	cmn.w	r0, #0
 80111f6:	ea91 0f03 	teq	r1, r3
 80111fa:	bf58      	it	pl
 80111fc:	4299      	cmppl	r1, r3
 80111fe:	bf08      	it	eq
 8011200:	4290      	cmpeq	r0, r2
 8011202:	bf2c      	ite	cs
 8011204:	17d8      	asrcs	r0, r3, #31
 8011206:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801120a:	f040 0001 	orr.w	r0, r0, #1
 801120e:	4770      	bx	lr
 8011210:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011214:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011218:	d102      	bne.n	8011220 <__cmpdf2+0x64>
 801121a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801121e:	d107      	bne.n	8011230 <__cmpdf2+0x74>
 8011220:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011224:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011228:	d1d6      	bne.n	80111d8 <__cmpdf2+0x1c>
 801122a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801122e:	d0d3      	beq.n	80111d8 <__cmpdf2+0x1c>
 8011230:	f85d 0b04 	ldr.w	r0, [sp], #4
 8011234:	4770      	bx	lr
 8011236:	bf00      	nop

08011238 <__aeabi_cdrcmple>:
 8011238:	4684      	mov	ip, r0
 801123a:	4610      	mov	r0, r2
 801123c:	4662      	mov	r2, ip
 801123e:	468c      	mov	ip, r1
 8011240:	4619      	mov	r1, r3
 8011242:	4663      	mov	r3, ip
 8011244:	e000      	b.n	8011248 <__aeabi_cdcmpeq>
 8011246:	bf00      	nop

08011248 <__aeabi_cdcmpeq>:
 8011248:	b501      	push	{r0, lr}
 801124a:	f7ff ffb7 	bl	80111bc <__cmpdf2>
 801124e:	2800      	cmp	r0, #0
 8011250:	bf48      	it	mi
 8011252:	f110 0f00 	cmnmi.w	r0, #0
 8011256:	bd01      	pop	{r0, pc}

08011258 <__aeabi_dcmpeq>:
 8011258:	f84d ed08 	str.w	lr, [sp, #-8]!
 801125c:	f7ff fff4 	bl	8011248 <__aeabi_cdcmpeq>
 8011260:	bf0c      	ite	eq
 8011262:	2001      	moveq	r0, #1
 8011264:	2000      	movne	r0, #0
 8011266:	f85d fb08 	ldr.w	pc, [sp], #8
 801126a:	bf00      	nop

0801126c <__aeabi_dcmplt>:
 801126c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011270:	f7ff ffea 	bl	8011248 <__aeabi_cdcmpeq>
 8011274:	bf34      	ite	cc
 8011276:	2001      	movcc	r0, #1
 8011278:	2000      	movcs	r0, #0
 801127a:	f85d fb08 	ldr.w	pc, [sp], #8
 801127e:	bf00      	nop

08011280 <__aeabi_dcmple>:
 8011280:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011284:	f7ff ffe0 	bl	8011248 <__aeabi_cdcmpeq>
 8011288:	bf94      	ite	ls
 801128a:	2001      	movls	r0, #1
 801128c:	2000      	movhi	r0, #0
 801128e:	f85d fb08 	ldr.w	pc, [sp], #8
 8011292:	bf00      	nop

08011294 <__aeabi_dcmpge>:
 8011294:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011298:	f7ff ffce 	bl	8011238 <__aeabi_cdrcmple>
 801129c:	bf94      	ite	ls
 801129e:	2001      	movls	r0, #1
 80112a0:	2000      	movhi	r0, #0
 80112a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80112a6:	bf00      	nop

080112a8 <__aeabi_dcmpgt>:
 80112a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80112ac:	f7ff ffc4 	bl	8011238 <__aeabi_cdrcmple>
 80112b0:	bf34      	ite	cc
 80112b2:	2001      	movcc	r0, #1
 80112b4:	2000      	movcs	r0, #0
 80112b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80112ba:	bf00      	nop

080112bc <__aeabi_d2iz>:
 80112bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80112c0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80112c4:	d215      	bcs.n	80112f2 <__aeabi_d2iz+0x36>
 80112c6:	d511      	bpl.n	80112ec <__aeabi_d2iz+0x30>
 80112c8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80112cc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80112d0:	d912      	bls.n	80112f8 <__aeabi_d2iz+0x3c>
 80112d2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80112d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80112da:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80112de:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80112e2:	fa23 f002 	lsr.w	r0, r3, r2
 80112e6:	bf18      	it	ne
 80112e8:	4240      	negne	r0, r0
 80112ea:	4770      	bx	lr
 80112ec:	f04f 0000 	mov.w	r0, #0
 80112f0:	4770      	bx	lr
 80112f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80112f6:	d105      	bne.n	8011304 <__aeabi_d2iz+0x48>
 80112f8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80112fc:	bf08      	it	eq
 80112fe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8011302:	4770      	bx	lr
 8011304:	f04f 0000 	mov.w	r0, #0
 8011308:	4770      	bx	lr
 801130a:	bf00      	nop

0801130c <__aeabi_d2uiz>:
 801130c:	004a      	lsls	r2, r1, #1
 801130e:	d211      	bcs.n	8011334 <__aeabi_d2uiz+0x28>
 8011310:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011314:	d211      	bcs.n	801133a <__aeabi_d2uiz+0x2e>
 8011316:	d50d      	bpl.n	8011334 <__aeabi_d2uiz+0x28>
 8011318:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801131c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011320:	d40e      	bmi.n	8011340 <__aeabi_d2uiz+0x34>
 8011322:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011326:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801132a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801132e:	fa23 f002 	lsr.w	r0, r3, r2
 8011332:	4770      	bx	lr
 8011334:	f04f 0000 	mov.w	r0, #0
 8011338:	4770      	bx	lr
 801133a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801133e:	d102      	bne.n	8011346 <__aeabi_d2uiz+0x3a>
 8011340:	f04f 30ff 	mov.w	r0, #4294967295
 8011344:	4770      	bx	lr
 8011346:	f04f 0000 	mov.w	r0, #0
 801134a:	4770      	bx	lr

0801134c <__aeabi_d2f>:
 801134c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8011350:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8011354:	bf24      	itt	cs
 8011356:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 801135a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 801135e:	d90d      	bls.n	801137c <__aeabi_d2f+0x30>
 8011360:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8011364:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8011368:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 801136c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8011370:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8011374:	bf08      	it	eq
 8011376:	f020 0001 	biceq.w	r0, r0, #1
 801137a:	4770      	bx	lr
 801137c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8011380:	d121      	bne.n	80113c6 <__aeabi_d2f+0x7a>
 8011382:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8011386:	bfbc      	itt	lt
 8011388:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 801138c:	4770      	bxlt	lr
 801138e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011392:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8011396:	f1c2 0218 	rsb	r2, r2, #24
 801139a:	f1c2 0c20 	rsb	ip, r2, #32
 801139e:	fa10 f30c 	lsls.w	r3, r0, ip
 80113a2:	fa20 f002 	lsr.w	r0, r0, r2
 80113a6:	bf18      	it	ne
 80113a8:	f040 0001 	orrne.w	r0, r0, #1
 80113ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80113b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80113b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80113b8:	ea40 000c 	orr.w	r0, r0, ip
 80113bc:	fa23 f302 	lsr.w	r3, r3, r2
 80113c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80113c4:	e7cc      	b.n	8011360 <__aeabi_d2f+0x14>
 80113c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80113ca:	d107      	bne.n	80113dc <__aeabi_d2f+0x90>
 80113cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80113d0:	bf1e      	ittt	ne
 80113d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80113d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80113da:	4770      	bxne	lr
 80113dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80113e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80113e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80113e8:	4770      	bx	lr
 80113ea:	bf00      	nop

080113ec <__aeabi_uldivmod>:
 80113ec:	b94b      	cbnz	r3, 8011402 <__aeabi_uldivmod+0x16>
 80113ee:	b942      	cbnz	r2, 8011402 <__aeabi_uldivmod+0x16>
 80113f0:	2900      	cmp	r1, #0
 80113f2:	bf08      	it	eq
 80113f4:	2800      	cmpeq	r0, #0
 80113f6:	d002      	beq.n	80113fe <__aeabi_uldivmod+0x12>
 80113f8:	f04f 31ff 	mov.w	r1, #4294967295
 80113fc:	4608      	mov	r0, r1
 80113fe:	f000 b83b 	b.w	8011478 <__aeabi_idiv0>
 8011402:	b082      	sub	sp, #8
 8011404:	46ec      	mov	ip, sp
 8011406:	e92d 5000 	stmdb	sp!, {ip, lr}
 801140a:	f000 f81d 	bl	8011448 <__gnu_uldivmod_helper>
 801140e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011412:	b002      	add	sp, #8
 8011414:	bc0c      	pop	{r2, r3}
 8011416:	4770      	bx	lr

08011418 <__gnu_ldivmod_helper>:
 8011418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801141c:	9c06      	ldr	r4, [sp, #24]
 801141e:	4615      	mov	r5, r2
 8011420:	4606      	mov	r6, r0
 8011422:	460f      	mov	r7, r1
 8011424:	4698      	mov	r8, r3
 8011426:	f000 f829 	bl	801147c <__divdi3>
 801142a:	fb05 f301 	mul.w	r3, r5, r1
 801142e:	fb00 3808 	mla	r8, r0, r8, r3
 8011432:	fba5 2300 	umull	r2, r3, r5, r0
 8011436:	1ab2      	subs	r2, r6, r2
 8011438:	4443      	add	r3, r8
 801143a:	eb67 0303 	sbc.w	r3, r7, r3
 801143e:	e9c4 2300 	strd	r2, r3, [r4]
 8011442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011446:	bf00      	nop

08011448 <__gnu_uldivmod_helper>:
 8011448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801144c:	9c06      	ldr	r4, [sp, #24]
 801144e:	4690      	mov	r8, r2
 8011450:	4606      	mov	r6, r0
 8011452:	460f      	mov	r7, r1
 8011454:	461d      	mov	r5, r3
 8011456:	f000 f95f 	bl	8011718 <__udivdi3>
 801145a:	fb00 f505 	mul.w	r5, r0, r5
 801145e:	fba0 2308 	umull	r2, r3, r0, r8
 8011462:	fb08 5501 	mla	r5, r8, r1, r5
 8011466:	1ab2      	subs	r2, r6, r2
 8011468:	442b      	add	r3, r5
 801146a:	eb67 0303 	sbc.w	r3, r7, r3
 801146e:	e9c4 2300 	strd	r2, r3, [r4]
 8011472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011476:	bf00      	nop

08011478 <__aeabi_idiv0>:
 8011478:	4770      	bx	lr
 801147a:	bf00      	nop

0801147c <__divdi3>:
 801147c:	2900      	cmp	r1, #0
 801147e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011482:	f2c0 80a6 	blt.w	80115d2 <__divdi3+0x156>
 8011486:	2600      	movs	r6, #0
 8011488:	2b00      	cmp	r3, #0
 801148a:	f2c0 809c 	blt.w	80115c6 <__divdi3+0x14a>
 801148e:	4688      	mov	r8, r1
 8011490:	4694      	mov	ip, r2
 8011492:	469e      	mov	lr, r3
 8011494:	4615      	mov	r5, r2
 8011496:	4604      	mov	r4, r0
 8011498:	460f      	mov	r7, r1
 801149a:	2b00      	cmp	r3, #0
 801149c:	d13d      	bne.n	801151a <__divdi3+0x9e>
 801149e:	428a      	cmp	r2, r1
 80114a0:	d959      	bls.n	8011556 <__divdi3+0xda>
 80114a2:	fab2 f382 	clz	r3, r2
 80114a6:	b13b      	cbz	r3, 80114b8 <__divdi3+0x3c>
 80114a8:	f1c3 0220 	rsb	r2, r3, #32
 80114ac:	409f      	lsls	r7, r3
 80114ae:	fa20 f202 	lsr.w	r2, r0, r2
 80114b2:	409d      	lsls	r5, r3
 80114b4:	4317      	orrs	r7, r2
 80114b6:	409c      	lsls	r4, r3
 80114b8:	0c29      	lsrs	r1, r5, #16
 80114ba:	0c22      	lsrs	r2, r4, #16
 80114bc:	fbb7 fef1 	udiv	lr, r7, r1
 80114c0:	b2a8      	uxth	r0, r5
 80114c2:	fb01 771e 	mls	r7, r1, lr, r7
 80114c6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80114ca:	fb00 f30e 	mul.w	r3, r0, lr
 80114ce:	42bb      	cmp	r3, r7
 80114d0:	d90a      	bls.n	80114e8 <__divdi3+0x6c>
 80114d2:	197f      	adds	r7, r7, r5
 80114d4:	f10e 32ff 	add.w	r2, lr, #4294967295
 80114d8:	f080 8105 	bcs.w	80116e6 <__divdi3+0x26a>
 80114dc:	42bb      	cmp	r3, r7
 80114de:	f240 8102 	bls.w	80116e6 <__divdi3+0x26a>
 80114e2:	f1ae 0e02 	sub.w	lr, lr, #2
 80114e6:	442f      	add	r7, r5
 80114e8:	1aff      	subs	r7, r7, r3
 80114ea:	b2a4      	uxth	r4, r4
 80114ec:	fbb7 f3f1 	udiv	r3, r7, r1
 80114f0:	fb01 7713 	mls	r7, r1, r3, r7
 80114f4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80114f8:	fb00 f003 	mul.w	r0, r0, r3
 80114fc:	42b8      	cmp	r0, r7
 80114fe:	d908      	bls.n	8011512 <__divdi3+0x96>
 8011500:	197f      	adds	r7, r7, r5
 8011502:	f103 32ff 	add.w	r2, r3, #4294967295
 8011506:	f080 80f0 	bcs.w	80116ea <__divdi3+0x26e>
 801150a:	42b8      	cmp	r0, r7
 801150c:	f240 80ed 	bls.w	80116ea <__divdi3+0x26e>
 8011510:	3b02      	subs	r3, #2
 8011512:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8011516:	2200      	movs	r2, #0
 8011518:	e003      	b.n	8011522 <__divdi3+0xa6>
 801151a:	428b      	cmp	r3, r1
 801151c:	d90f      	bls.n	801153e <__divdi3+0xc2>
 801151e:	2200      	movs	r2, #0
 8011520:	4613      	mov	r3, r2
 8011522:	1c34      	adds	r4, r6, #0
 8011524:	bf18      	it	ne
 8011526:	2401      	movne	r4, #1
 8011528:	4260      	negs	r0, r4
 801152a:	f04f 0500 	mov.w	r5, #0
 801152e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8011532:	4058      	eors	r0, r3
 8011534:	4051      	eors	r1, r2
 8011536:	1900      	adds	r0, r0, r4
 8011538:	4169      	adcs	r1, r5
 801153a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801153e:	fab3 f283 	clz	r2, r3
 8011542:	2a00      	cmp	r2, #0
 8011544:	f040 8086 	bne.w	8011654 <__divdi3+0x1d8>
 8011548:	428b      	cmp	r3, r1
 801154a:	d302      	bcc.n	8011552 <__divdi3+0xd6>
 801154c:	4584      	cmp	ip, r0
 801154e:	f200 80db 	bhi.w	8011708 <__divdi3+0x28c>
 8011552:	2301      	movs	r3, #1
 8011554:	e7e5      	b.n	8011522 <__divdi3+0xa6>
 8011556:	b912      	cbnz	r2, 801155e <__divdi3+0xe2>
 8011558:	2301      	movs	r3, #1
 801155a:	fbb3 f5f2 	udiv	r5, r3, r2
 801155e:	fab5 f085 	clz	r0, r5
 8011562:	2800      	cmp	r0, #0
 8011564:	d13b      	bne.n	80115de <__divdi3+0x162>
 8011566:	1b78      	subs	r0, r7, r5
 8011568:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 801156c:	fa1f fc85 	uxth.w	ip, r5
 8011570:	2201      	movs	r2, #1
 8011572:	fbb0 f8fe 	udiv	r8, r0, lr
 8011576:	0c21      	lsrs	r1, r4, #16
 8011578:	fb0e 0718 	mls	r7, lr, r8, r0
 801157c:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 8011580:	fb0c f308 	mul.w	r3, ip, r8
 8011584:	42bb      	cmp	r3, r7
 8011586:	d907      	bls.n	8011598 <__divdi3+0x11c>
 8011588:	197f      	adds	r7, r7, r5
 801158a:	f108 31ff 	add.w	r1, r8, #4294967295
 801158e:	d202      	bcs.n	8011596 <__divdi3+0x11a>
 8011590:	42bb      	cmp	r3, r7
 8011592:	f200 80bd 	bhi.w	8011710 <__divdi3+0x294>
 8011596:	4688      	mov	r8, r1
 8011598:	1aff      	subs	r7, r7, r3
 801159a:	b2a4      	uxth	r4, r4
 801159c:	fbb7 f3fe 	udiv	r3, r7, lr
 80115a0:	fb0e 7713 	mls	r7, lr, r3, r7
 80115a4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80115a8:	fb0c fc03 	mul.w	ip, ip, r3
 80115ac:	45bc      	cmp	ip, r7
 80115ae:	d907      	bls.n	80115c0 <__divdi3+0x144>
 80115b0:	197f      	adds	r7, r7, r5
 80115b2:	f103 31ff 	add.w	r1, r3, #4294967295
 80115b6:	d202      	bcs.n	80115be <__divdi3+0x142>
 80115b8:	45bc      	cmp	ip, r7
 80115ba:	f200 80a7 	bhi.w	801170c <__divdi3+0x290>
 80115be:	460b      	mov	r3, r1
 80115c0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80115c4:	e7ad      	b.n	8011522 <__divdi3+0xa6>
 80115c6:	4252      	negs	r2, r2
 80115c8:	ea6f 0606 	mvn.w	r6, r6
 80115cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80115d0:	e75d      	b.n	801148e <__divdi3+0x12>
 80115d2:	4240      	negs	r0, r0
 80115d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80115d8:	f04f 36ff 	mov.w	r6, #4294967295
 80115dc:	e754      	b.n	8011488 <__divdi3+0xc>
 80115de:	f1c0 0220 	rsb	r2, r0, #32
 80115e2:	fa24 f102 	lsr.w	r1, r4, r2
 80115e6:	fa07 f300 	lsl.w	r3, r7, r0
 80115ea:	4085      	lsls	r5, r0
 80115ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80115f0:	40d7      	lsrs	r7, r2
 80115f2:	4319      	orrs	r1, r3
 80115f4:	fbb7 f2fe 	udiv	r2, r7, lr
 80115f8:	0c0b      	lsrs	r3, r1, #16
 80115fa:	fb0e 7712 	mls	r7, lr, r2, r7
 80115fe:	fa1f fc85 	uxth.w	ip, r5
 8011602:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011606:	fb0c f702 	mul.w	r7, ip, r2
 801160a:	429f      	cmp	r7, r3
 801160c:	fa04 f400 	lsl.w	r4, r4, r0
 8011610:	d907      	bls.n	8011622 <__divdi3+0x1a6>
 8011612:	195b      	adds	r3, r3, r5
 8011614:	f102 30ff 	add.w	r0, r2, #4294967295
 8011618:	d274      	bcs.n	8011704 <__divdi3+0x288>
 801161a:	429f      	cmp	r7, r3
 801161c:	d972      	bls.n	8011704 <__divdi3+0x288>
 801161e:	3a02      	subs	r2, #2
 8011620:	442b      	add	r3, r5
 8011622:	1bdf      	subs	r7, r3, r7
 8011624:	b289      	uxth	r1, r1
 8011626:	fbb7 f8fe 	udiv	r8, r7, lr
 801162a:	fb0e 7318 	mls	r3, lr, r8, r7
 801162e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011632:	fb0c f708 	mul.w	r7, ip, r8
 8011636:	429f      	cmp	r7, r3
 8011638:	d908      	bls.n	801164c <__divdi3+0x1d0>
 801163a:	195b      	adds	r3, r3, r5
 801163c:	f108 31ff 	add.w	r1, r8, #4294967295
 8011640:	d25c      	bcs.n	80116fc <__divdi3+0x280>
 8011642:	429f      	cmp	r7, r3
 8011644:	d95a      	bls.n	80116fc <__divdi3+0x280>
 8011646:	f1a8 0802 	sub.w	r8, r8, #2
 801164a:	442b      	add	r3, r5
 801164c:	1bd8      	subs	r0, r3, r7
 801164e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8011652:	e78e      	b.n	8011572 <__divdi3+0xf6>
 8011654:	f1c2 0320 	rsb	r3, r2, #32
 8011658:	fa2c f103 	lsr.w	r1, ip, r3
 801165c:	fa0e fe02 	lsl.w	lr, lr, r2
 8011660:	fa20 f703 	lsr.w	r7, r0, r3
 8011664:	ea41 0e0e 	orr.w	lr, r1, lr
 8011668:	fa08 f002 	lsl.w	r0, r8, r2
 801166c:	fa28 f103 	lsr.w	r1, r8, r3
 8011670:	ea4f 451e 	mov.w	r5, lr, lsr #16
 8011674:	4338      	orrs	r0, r7
 8011676:	fbb1 f8f5 	udiv	r8, r1, r5
 801167a:	0c03      	lsrs	r3, r0, #16
 801167c:	fb05 1118 	mls	r1, r5, r8, r1
 8011680:	fa1f f78e 	uxth.w	r7, lr
 8011684:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011688:	fb07 f308 	mul.w	r3, r7, r8
 801168c:	428b      	cmp	r3, r1
 801168e:	fa0c fc02 	lsl.w	ip, ip, r2
 8011692:	d909      	bls.n	80116a8 <__divdi3+0x22c>
 8011694:	eb11 010e 	adds.w	r1, r1, lr
 8011698:	f108 39ff 	add.w	r9, r8, #4294967295
 801169c:	d230      	bcs.n	8011700 <__divdi3+0x284>
 801169e:	428b      	cmp	r3, r1
 80116a0:	d92e      	bls.n	8011700 <__divdi3+0x284>
 80116a2:	f1a8 0802 	sub.w	r8, r8, #2
 80116a6:	4471      	add	r1, lr
 80116a8:	1ac9      	subs	r1, r1, r3
 80116aa:	b280      	uxth	r0, r0
 80116ac:	fbb1 f3f5 	udiv	r3, r1, r5
 80116b0:	fb05 1113 	mls	r1, r5, r3, r1
 80116b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80116b8:	fb07 f703 	mul.w	r7, r7, r3
 80116bc:	428f      	cmp	r7, r1
 80116be:	d908      	bls.n	80116d2 <__divdi3+0x256>
 80116c0:	eb11 010e 	adds.w	r1, r1, lr
 80116c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80116c8:	d216      	bcs.n	80116f8 <__divdi3+0x27c>
 80116ca:	428f      	cmp	r7, r1
 80116cc:	d914      	bls.n	80116f8 <__divdi3+0x27c>
 80116ce:	3b02      	subs	r3, #2
 80116d0:	4471      	add	r1, lr
 80116d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80116d6:	1bc9      	subs	r1, r1, r7
 80116d8:	fba3 890c 	umull	r8, r9, r3, ip
 80116dc:	4549      	cmp	r1, r9
 80116de:	d309      	bcc.n	80116f4 <__divdi3+0x278>
 80116e0:	d005      	beq.n	80116ee <__divdi3+0x272>
 80116e2:	2200      	movs	r2, #0
 80116e4:	e71d      	b.n	8011522 <__divdi3+0xa6>
 80116e6:	4696      	mov	lr, r2
 80116e8:	e6fe      	b.n	80114e8 <__divdi3+0x6c>
 80116ea:	4613      	mov	r3, r2
 80116ec:	e711      	b.n	8011512 <__divdi3+0x96>
 80116ee:	4094      	lsls	r4, r2
 80116f0:	4544      	cmp	r4, r8
 80116f2:	d2f6      	bcs.n	80116e2 <__divdi3+0x266>
 80116f4:	3b01      	subs	r3, #1
 80116f6:	e7f4      	b.n	80116e2 <__divdi3+0x266>
 80116f8:	4603      	mov	r3, r0
 80116fa:	e7ea      	b.n	80116d2 <__divdi3+0x256>
 80116fc:	4688      	mov	r8, r1
 80116fe:	e7a5      	b.n	801164c <__divdi3+0x1d0>
 8011700:	46c8      	mov	r8, r9
 8011702:	e7d1      	b.n	80116a8 <__divdi3+0x22c>
 8011704:	4602      	mov	r2, r0
 8011706:	e78c      	b.n	8011622 <__divdi3+0x1a6>
 8011708:	4613      	mov	r3, r2
 801170a:	e70a      	b.n	8011522 <__divdi3+0xa6>
 801170c:	3b02      	subs	r3, #2
 801170e:	e757      	b.n	80115c0 <__divdi3+0x144>
 8011710:	f1a8 0802 	sub.w	r8, r8, #2
 8011714:	442f      	add	r7, r5
 8011716:	e73f      	b.n	8011598 <__divdi3+0x11c>

08011718 <__udivdi3>:
 8011718:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801171c:	2b00      	cmp	r3, #0
 801171e:	d144      	bne.n	80117aa <__udivdi3+0x92>
 8011720:	428a      	cmp	r2, r1
 8011722:	4615      	mov	r5, r2
 8011724:	4604      	mov	r4, r0
 8011726:	d94f      	bls.n	80117c8 <__udivdi3+0xb0>
 8011728:	fab2 f782 	clz	r7, r2
 801172c:	460e      	mov	r6, r1
 801172e:	b14f      	cbz	r7, 8011744 <__udivdi3+0x2c>
 8011730:	f1c7 0320 	rsb	r3, r7, #32
 8011734:	40b9      	lsls	r1, r7
 8011736:	fa20 f603 	lsr.w	r6, r0, r3
 801173a:	fa02 f507 	lsl.w	r5, r2, r7
 801173e:	430e      	orrs	r6, r1
 8011740:	fa00 f407 	lsl.w	r4, r0, r7
 8011744:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011748:	0c23      	lsrs	r3, r4, #16
 801174a:	fbb6 f0fe 	udiv	r0, r6, lr
 801174e:	b2af      	uxth	r7, r5
 8011750:	fb0e 6110 	mls	r1, lr, r0, r6
 8011754:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011758:	fb07 f100 	mul.w	r1, r7, r0
 801175c:	4299      	cmp	r1, r3
 801175e:	d909      	bls.n	8011774 <__udivdi3+0x5c>
 8011760:	195b      	adds	r3, r3, r5
 8011762:	f100 32ff 	add.w	r2, r0, #4294967295
 8011766:	f080 80ec 	bcs.w	8011942 <__udivdi3+0x22a>
 801176a:	4299      	cmp	r1, r3
 801176c:	f240 80e9 	bls.w	8011942 <__udivdi3+0x22a>
 8011770:	3802      	subs	r0, #2
 8011772:	442b      	add	r3, r5
 8011774:	1a5a      	subs	r2, r3, r1
 8011776:	b2a4      	uxth	r4, r4
 8011778:	fbb2 f3fe 	udiv	r3, r2, lr
 801177c:	fb0e 2213 	mls	r2, lr, r3, r2
 8011780:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 8011784:	fb07 f703 	mul.w	r7, r7, r3
 8011788:	4297      	cmp	r7, r2
 801178a:	d908      	bls.n	801179e <__udivdi3+0x86>
 801178c:	1952      	adds	r2, r2, r5
 801178e:	f103 31ff 	add.w	r1, r3, #4294967295
 8011792:	f080 80d8 	bcs.w	8011946 <__udivdi3+0x22e>
 8011796:	4297      	cmp	r7, r2
 8011798:	f240 80d5 	bls.w	8011946 <__udivdi3+0x22e>
 801179c:	3b02      	subs	r3, #2
 801179e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80117a2:	2600      	movs	r6, #0
 80117a4:	4631      	mov	r1, r6
 80117a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117aa:	428b      	cmp	r3, r1
 80117ac:	d847      	bhi.n	801183e <__udivdi3+0x126>
 80117ae:	fab3 f683 	clz	r6, r3
 80117b2:	2e00      	cmp	r6, #0
 80117b4:	d148      	bne.n	8011848 <__udivdi3+0x130>
 80117b6:	428b      	cmp	r3, r1
 80117b8:	d302      	bcc.n	80117c0 <__udivdi3+0xa8>
 80117ba:	4282      	cmp	r2, r0
 80117bc:	f200 80cd 	bhi.w	801195a <__udivdi3+0x242>
 80117c0:	2001      	movs	r0, #1
 80117c2:	4631      	mov	r1, r6
 80117c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117c8:	b912      	cbnz	r2, 80117d0 <__udivdi3+0xb8>
 80117ca:	2501      	movs	r5, #1
 80117cc:	fbb5 f5f2 	udiv	r5, r5, r2
 80117d0:	fab5 f885 	clz	r8, r5
 80117d4:	f1b8 0f00 	cmp.w	r8, #0
 80117d8:	d177      	bne.n	80118ca <__udivdi3+0x1b2>
 80117da:	1b4a      	subs	r2, r1, r5
 80117dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80117e0:	b2af      	uxth	r7, r5
 80117e2:	2601      	movs	r6, #1
 80117e4:	fbb2 f0fe 	udiv	r0, r2, lr
 80117e8:	0c23      	lsrs	r3, r4, #16
 80117ea:	fb0e 2110 	mls	r1, lr, r0, r2
 80117ee:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80117f2:	fb07 f300 	mul.w	r3, r7, r0
 80117f6:	428b      	cmp	r3, r1
 80117f8:	d907      	bls.n	801180a <__udivdi3+0xf2>
 80117fa:	1949      	adds	r1, r1, r5
 80117fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8011800:	d202      	bcs.n	8011808 <__udivdi3+0xf0>
 8011802:	428b      	cmp	r3, r1
 8011804:	f200 80ba 	bhi.w	801197c <__udivdi3+0x264>
 8011808:	4610      	mov	r0, r2
 801180a:	1ac9      	subs	r1, r1, r3
 801180c:	b2a4      	uxth	r4, r4
 801180e:	fbb1 f3fe 	udiv	r3, r1, lr
 8011812:	fb0e 1113 	mls	r1, lr, r3, r1
 8011816:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 801181a:	fb07 f703 	mul.w	r7, r7, r3
 801181e:	42a7      	cmp	r7, r4
 8011820:	d908      	bls.n	8011834 <__udivdi3+0x11c>
 8011822:	1964      	adds	r4, r4, r5
 8011824:	f103 32ff 	add.w	r2, r3, #4294967295
 8011828:	f080 808f 	bcs.w	801194a <__udivdi3+0x232>
 801182c:	42a7      	cmp	r7, r4
 801182e:	f240 808c 	bls.w	801194a <__udivdi3+0x232>
 8011832:	3b02      	subs	r3, #2
 8011834:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011838:	4631      	mov	r1, r6
 801183a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801183e:	2600      	movs	r6, #0
 8011840:	4630      	mov	r0, r6
 8011842:	4631      	mov	r1, r6
 8011844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011848:	f1c6 0420 	rsb	r4, r6, #32
 801184c:	fa22 f504 	lsr.w	r5, r2, r4
 8011850:	40b3      	lsls	r3, r6
 8011852:	432b      	orrs	r3, r5
 8011854:	fa20 fc04 	lsr.w	ip, r0, r4
 8011858:	fa01 f706 	lsl.w	r7, r1, r6
 801185c:	fa21 f504 	lsr.w	r5, r1, r4
 8011860:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011864:	ea4c 0707 	orr.w	r7, ip, r7
 8011868:	fbb5 f8fe 	udiv	r8, r5, lr
 801186c:	0c39      	lsrs	r1, r7, #16
 801186e:	fb0e 5518 	mls	r5, lr, r8, r5
 8011872:	fa1f fc83 	uxth.w	ip, r3
 8011876:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801187a:	fb0c f108 	mul.w	r1, ip, r8
 801187e:	42a9      	cmp	r1, r5
 8011880:	fa02 f206 	lsl.w	r2, r2, r6
 8011884:	d904      	bls.n	8011890 <__udivdi3+0x178>
 8011886:	18ed      	adds	r5, r5, r3
 8011888:	f108 34ff 	add.w	r4, r8, #4294967295
 801188c:	d367      	bcc.n	801195e <__udivdi3+0x246>
 801188e:	46a0      	mov	r8, r4
 8011890:	1a6d      	subs	r5, r5, r1
 8011892:	b2bf      	uxth	r7, r7
 8011894:	fbb5 f4fe 	udiv	r4, r5, lr
 8011898:	fb0e 5514 	mls	r5, lr, r4, r5
 801189c:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80118a0:	fb0c fc04 	mul.w	ip, ip, r4
 80118a4:	458c      	cmp	ip, r1
 80118a6:	d904      	bls.n	80118b2 <__udivdi3+0x19a>
 80118a8:	18c9      	adds	r1, r1, r3
 80118aa:	f104 35ff 	add.w	r5, r4, #4294967295
 80118ae:	d35c      	bcc.n	801196a <__udivdi3+0x252>
 80118b0:	462c      	mov	r4, r5
 80118b2:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 80118b6:	ebcc 0101 	rsb	r1, ip, r1
 80118ba:	fba4 2302 	umull	r2, r3, r4, r2
 80118be:	4299      	cmp	r1, r3
 80118c0:	d348      	bcc.n	8011954 <__udivdi3+0x23c>
 80118c2:	d044      	beq.n	801194e <__udivdi3+0x236>
 80118c4:	4620      	mov	r0, r4
 80118c6:	2600      	movs	r6, #0
 80118c8:	e76c      	b.n	80117a4 <__udivdi3+0x8c>
 80118ca:	f1c8 0420 	rsb	r4, r8, #32
 80118ce:	fa01 f308 	lsl.w	r3, r1, r8
 80118d2:	fa05 f508 	lsl.w	r5, r5, r8
 80118d6:	fa20 f704 	lsr.w	r7, r0, r4
 80118da:	40e1      	lsrs	r1, r4
 80118dc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80118e0:	431f      	orrs	r7, r3
 80118e2:	fbb1 f6fe 	udiv	r6, r1, lr
 80118e6:	0c3a      	lsrs	r2, r7, #16
 80118e8:	fb0e 1116 	mls	r1, lr, r6, r1
 80118ec:	fa1f fc85 	uxth.w	ip, r5
 80118f0:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 80118f4:	fb0c f206 	mul.w	r2, ip, r6
 80118f8:	429a      	cmp	r2, r3
 80118fa:	fa00 f408 	lsl.w	r4, r0, r8
 80118fe:	d907      	bls.n	8011910 <__udivdi3+0x1f8>
 8011900:	195b      	adds	r3, r3, r5
 8011902:	f106 31ff 	add.w	r1, r6, #4294967295
 8011906:	d237      	bcs.n	8011978 <__udivdi3+0x260>
 8011908:	429a      	cmp	r2, r3
 801190a:	d935      	bls.n	8011978 <__udivdi3+0x260>
 801190c:	3e02      	subs	r6, #2
 801190e:	442b      	add	r3, r5
 8011910:	1a9b      	subs	r3, r3, r2
 8011912:	b2bf      	uxth	r7, r7
 8011914:	fbb3 f0fe 	udiv	r0, r3, lr
 8011918:	fb0e 3310 	mls	r3, lr, r0, r3
 801191c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8011920:	fb0c f100 	mul.w	r1, ip, r0
 8011924:	4299      	cmp	r1, r3
 8011926:	d907      	bls.n	8011938 <__udivdi3+0x220>
 8011928:	195b      	adds	r3, r3, r5
 801192a:	f100 32ff 	add.w	r2, r0, #4294967295
 801192e:	d221      	bcs.n	8011974 <__udivdi3+0x25c>
 8011930:	4299      	cmp	r1, r3
 8011932:	d91f      	bls.n	8011974 <__udivdi3+0x25c>
 8011934:	3802      	subs	r0, #2
 8011936:	442b      	add	r3, r5
 8011938:	1a5a      	subs	r2, r3, r1
 801193a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 801193e:	4667      	mov	r7, ip
 8011940:	e750      	b.n	80117e4 <__udivdi3+0xcc>
 8011942:	4610      	mov	r0, r2
 8011944:	e716      	b.n	8011774 <__udivdi3+0x5c>
 8011946:	460b      	mov	r3, r1
 8011948:	e729      	b.n	801179e <__udivdi3+0x86>
 801194a:	4613      	mov	r3, r2
 801194c:	e772      	b.n	8011834 <__udivdi3+0x11c>
 801194e:	40b0      	lsls	r0, r6
 8011950:	4290      	cmp	r0, r2
 8011952:	d2b7      	bcs.n	80118c4 <__udivdi3+0x1ac>
 8011954:	1e60      	subs	r0, r4, #1
 8011956:	2600      	movs	r6, #0
 8011958:	e724      	b.n	80117a4 <__udivdi3+0x8c>
 801195a:	4630      	mov	r0, r6
 801195c:	e722      	b.n	80117a4 <__udivdi3+0x8c>
 801195e:	42a9      	cmp	r1, r5
 8011960:	d995      	bls.n	801188e <__udivdi3+0x176>
 8011962:	f1a8 0802 	sub.w	r8, r8, #2
 8011966:	441d      	add	r5, r3
 8011968:	e792      	b.n	8011890 <__udivdi3+0x178>
 801196a:	458c      	cmp	ip, r1
 801196c:	d9a0      	bls.n	80118b0 <__udivdi3+0x198>
 801196e:	3c02      	subs	r4, #2
 8011970:	4419      	add	r1, r3
 8011972:	e79e      	b.n	80118b2 <__udivdi3+0x19a>
 8011974:	4610      	mov	r0, r2
 8011976:	e7df      	b.n	8011938 <__udivdi3+0x220>
 8011978:	460e      	mov	r6, r1
 801197a:	e7c9      	b.n	8011910 <__udivdi3+0x1f8>
 801197c:	3802      	subs	r0, #2
 801197e:	4429      	add	r1, r5
 8011980:	e743      	b.n	801180a <__udivdi3+0xf2>
 8011982:	bf00      	nop

08011984 <atoi>:
 8011984:	2100      	movs	r1, #0
 8011986:	220a      	movs	r2, #10
 8011988:	f000 bc58 	b.w	801223c <strtol>

0801198c <__errno>:
 801198c:	4b01      	ldr	r3, [pc, #4]	; (8011994 <__errno+0x8>)
 801198e:	6818      	ldr	r0, [r3, #0]
 8011990:	4770      	bx	lr
 8011992:	bf00      	nop
 8011994:	1fff4330 	.word	0x1fff4330

08011998 <__libc_init_array>:
 8011998:	b570      	push	{r4, r5, r6, lr}
 801199a:	4b0e      	ldr	r3, [pc, #56]	; (80119d4 <__libc_init_array+0x3c>)
 801199c:	4c0e      	ldr	r4, [pc, #56]	; (80119d8 <__libc_init_array+0x40>)
 801199e:	1ae4      	subs	r4, r4, r3
 80119a0:	10a4      	asrs	r4, r4, #2
 80119a2:	2500      	movs	r5, #0
 80119a4:	461e      	mov	r6, r3
 80119a6:	42a5      	cmp	r5, r4
 80119a8:	d004      	beq.n	80119b4 <__libc_init_array+0x1c>
 80119aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80119ae:	4798      	blx	r3
 80119b0:	3501      	adds	r5, #1
 80119b2:	e7f8      	b.n	80119a6 <__libc_init_array+0xe>
 80119b4:	f7f3 faf6 	bl	8004fa4 <_init>
 80119b8:	4c08      	ldr	r4, [pc, #32]	; (80119dc <__libc_init_array+0x44>)
 80119ba:	4b09      	ldr	r3, [pc, #36]	; (80119e0 <__libc_init_array+0x48>)
 80119bc:	1ae4      	subs	r4, r4, r3
 80119be:	10a4      	asrs	r4, r4, #2
 80119c0:	2500      	movs	r5, #0
 80119c2:	461e      	mov	r6, r3
 80119c4:	42a5      	cmp	r5, r4
 80119c6:	d004      	beq.n	80119d2 <__libc_init_array+0x3a>
 80119c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80119cc:	4798      	blx	r3
 80119ce:	3501      	adds	r5, #1
 80119d0:	e7f8      	b.n	80119c4 <__libc_init_array+0x2c>
 80119d2:	bd70      	pop	{r4, r5, r6, pc}
 80119d4:	1fff4378 	.word	0x1fff4378
 80119d8:	1fff4378 	.word	0x1fff4378
 80119dc:	1fff4378 	.word	0x1fff4378
 80119e0:	1fff4378 	.word	0x1fff4378

080119e4 <memcpy>:
 80119e4:	b510      	push	{r4, lr}
 80119e6:	1e43      	subs	r3, r0, #1
 80119e8:	440a      	add	r2, r1
 80119ea:	4291      	cmp	r1, r2
 80119ec:	d004      	beq.n	80119f8 <memcpy+0x14>
 80119ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80119f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80119f6:	e7f8      	b.n	80119ea <memcpy+0x6>
 80119f8:	bd10      	pop	{r4, pc}

080119fa <memset>:
 80119fa:	4402      	add	r2, r0
 80119fc:	4603      	mov	r3, r0
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d002      	beq.n	8011a08 <memset+0xe>
 8011a02:	f803 1b01 	strb.w	r1, [r3], #1
 8011a06:	e7fa      	b.n	80119fe <memset+0x4>
 8011a08:	4770      	bx	lr
	...

08011a0c <validate_structure>:
 8011a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011a0e:	6801      	ldr	r1, [r0, #0]
 8011a10:	293b      	cmp	r1, #59	; 0x3b
 8011a12:	4604      	mov	r4, r0
 8011a14:	d911      	bls.n	8011a3a <validate_structure+0x2e>
 8011a16:	223c      	movs	r2, #60	; 0x3c
 8011a18:	4668      	mov	r0, sp
 8011a1a:	f000 fd85 	bl	8012528 <div>
 8011a1e:	9a01      	ldr	r2, [sp, #4]
 8011a20:	6861      	ldr	r1, [r4, #4]
 8011a22:	9b00      	ldr	r3, [sp, #0]
 8011a24:	2a00      	cmp	r2, #0
 8011a26:	440b      	add	r3, r1
 8011a28:	6063      	str	r3, [r4, #4]
 8011a2a:	bfbb      	ittet	lt
 8011a2c:	323c      	addlt	r2, #60	; 0x3c
 8011a2e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011a32:	6022      	strge	r2, [r4, #0]
 8011a34:	6022      	strlt	r2, [r4, #0]
 8011a36:	bfb8      	it	lt
 8011a38:	6063      	strlt	r3, [r4, #4]
 8011a3a:	6861      	ldr	r1, [r4, #4]
 8011a3c:	293b      	cmp	r1, #59	; 0x3b
 8011a3e:	d911      	bls.n	8011a64 <validate_structure+0x58>
 8011a40:	223c      	movs	r2, #60	; 0x3c
 8011a42:	4668      	mov	r0, sp
 8011a44:	f000 fd70 	bl	8012528 <div>
 8011a48:	9a01      	ldr	r2, [sp, #4]
 8011a4a:	68a1      	ldr	r1, [r4, #8]
 8011a4c:	9b00      	ldr	r3, [sp, #0]
 8011a4e:	2a00      	cmp	r2, #0
 8011a50:	440b      	add	r3, r1
 8011a52:	60a3      	str	r3, [r4, #8]
 8011a54:	bfbb      	ittet	lt
 8011a56:	323c      	addlt	r2, #60	; 0x3c
 8011a58:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011a5c:	6062      	strge	r2, [r4, #4]
 8011a5e:	6062      	strlt	r2, [r4, #4]
 8011a60:	bfb8      	it	lt
 8011a62:	60a3      	strlt	r3, [r4, #8]
 8011a64:	68a1      	ldr	r1, [r4, #8]
 8011a66:	2917      	cmp	r1, #23
 8011a68:	d911      	bls.n	8011a8e <validate_structure+0x82>
 8011a6a:	2218      	movs	r2, #24
 8011a6c:	4668      	mov	r0, sp
 8011a6e:	f000 fd5b 	bl	8012528 <div>
 8011a72:	9a01      	ldr	r2, [sp, #4]
 8011a74:	68e1      	ldr	r1, [r4, #12]
 8011a76:	9b00      	ldr	r3, [sp, #0]
 8011a78:	2a00      	cmp	r2, #0
 8011a7a:	440b      	add	r3, r1
 8011a7c:	60e3      	str	r3, [r4, #12]
 8011a7e:	bfbb      	ittet	lt
 8011a80:	3218      	addlt	r2, #24
 8011a82:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011a86:	60a2      	strge	r2, [r4, #8]
 8011a88:	60a2      	strlt	r2, [r4, #8]
 8011a8a:	bfb8      	it	lt
 8011a8c:	60e3      	strlt	r3, [r4, #12]
 8011a8e:	6921      	ldr	r1, [r4, #16]
 8011a90:	290b      	cmp	r1, #11
 8011a92:	d911      	bls.n	8011ab8 <validate_structure+0xac>
 8011a94:	220c      	movs	r2, #12
 8011a96:	4668      	mov	r0, sp
 8011a98:	f000 fd46 	bl	8012528 <div>
 8011a9c:	9a01      	ldr	r2, [sp, #4]
 8011a9e:	6961      	ldr	r1, [r4, #20]
 8011aa0:	9b00      	ldr	r3, [sp, #0]
 8011aa2:	2a00      	cmp	r2, #0
 8011aa4:	440b      	add	r3, r1
 8011aa6:	6163      	str	r3, [r4, #20]
 8011aa8:	bfbb      	ittet	lt
 8011aaa:	320c      	addlt	r2, #12
 8011aac:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011ab0:	6122      	strge	r2, [r4, #16]
 8011ab2:	6122      	strlt	r2, [r4, #16]
 8011ab4:	bfb8      	it	lt
 8011ab6:	6163      	strlt	r3, [r4, #20]
 8011ab8:	6963      	ldr	r3, [r4, #20]
 8011aba:	079d      	lsls	r5, r3, #30
 8011abc:	d112      	bne.n	8011ae4 <validate_structure+0xd8>
 8011abe:	2164      	movs	r1, #100	; 0x64
 8011ac0:	fb93 f2f1 	sdiv	r2, r3, r1
 8011ac4:	fb01 3212 	mls	r2, r1, r2, r3
 8011ac8:	b972      	cbnz	r2, 8011ae8 <validate_structure+0xdc>
 8011aca:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8011ace:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011ad2:	fb93 f2f1 	sdiv	r2, r3, r1
 8011ad6:	fb01 3312 	mls	r3, r1, r2, r3
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	bf14      	ite	ne
 8011ade:	231c      	movne	r3, #28
 8011ae0:	231d      	moveq	r3, #29
 8011ae2:	e002      	b.n	8011aea <validate_structure+0xde>
 8011ae4:	231c      	movs	r3, #28
 8011ae6:	e000      	b.n	8011aea <validate_structure+0xde>
 8011ae8:	231d      	movs	r3, #29
 8011aea:	68e2      	ldr	r2, [r4, #12]
 8011aec:	2a00      	cmp	r2, #0
 8011aee:	dc37      	bgt.n	8011b60 <validate_structure+0x154>
 8011af0:	68e5      	ldr	r5, [r4, #12]
 8011af2:	2d00      	cmp	r5, #0
 8011af4:	dc5c      	bgt.n	8011bb0 <validate_structure+0x1a4>
 8011af6:	6921      	ldr	r1, [r4, #16]
 8011af8:	3901      	subs	r1, #1
 8011afa:	6121      	str	r1, [r4, #16]
 8011afc:	3101      	adds	r1, #1
 8011afe:	d11c      	bne.n	8011b3a <validate_structure+0x12e>
 8011b00:	6963      	ldr	r3, [r4, #20]
 8011b02:	1e59      	subs	r1, r3, #1
 8011b04:	220b      	movs	r2, #11
 8011b06:	0788      	lsls	r0, r1, #30
 8011b08:	6161      	str	r1, [r4, #20]
 8011b0a:	6122      	str	r2, [r4, #16]
 8011b0c:	d112      	bne.n	8011b34 <validate_structure+0x128>
 8011b0e:	2264      	movs	r2, #100	; 0x64
 8011b10:	fb91 f0f2 	sdiv	r0, r1, r2
 8011b14:	fb02 1110 	mls	r1, r2, r0, r1
 8011b18:	b971      	cbnz	r1, 8011b38 <validate_structure+0x12c>
 8011b1a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011b1e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011b22:	fb93 f1f2 	sdiv	r1, r3, r2
 8011b26:	fb02 3311 	mls	r3, r2, r1, r3
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	bf14      	ite	ne
 8011b2e:	231c      	movne	r3, #28
 8011b30:	231d      	moveq	r3, #29
 8011b32:	e002      	b.n	8011b3a <validate_structure+0x12e>
 8011b34:	231c      	movs	r3, #28
 8011b36:	e000      	b.n	8011b3a <validate_structure+0x12e>
 8011b38:	231d      	movs	r3, #29
 8011b3a:	6922      	ldr	r2, [r4, #16]
 8011b3c:	2a01      	cmp	r2, #1
 8011b3e:	bf1a      	itte	ne
 8011b40:	491c      	ldrne	r1, [pc, #112]	; (8011bb4 <validate_structure+0x1a8>)
 8011b42:	f851 2022 	ldrne.w	r2, [r1, r2, lsl #2]
 8011b46:	461a      	moveq	r2, r3
 8011b48:	442a      	add	r2, r5
 8011b4a:	60e2      	str	r2, [r4, #12]
 8011b4c:	e7d0      	b.n	8011af0 <validate_structure+0xe4>
 8011b4e:	4299      	cmp	r1, r3
 8011b50:	dd2e      	ble.n	8011bb0 <validate_structure+0x1a4>
 8011b52:	4618      	mov	r0, r3
 8011b54:	3201      	adds	r2, #1
 8011b56:	1a09      	subs	r1, r1, r0
 8011b58:	2a0c      	cmp	r2, #12
 8011b5a:	60e1      	str	r1, [r4, #12]
 8011b5c:	6122      	str	r2, [r4, #16]
 8011b5e:	d009      	beq.n	8011b74 <validate_structure+0x168>
 8011b60:	6922      	ldr	r2, [r4, #16]
 8011b62:	68e1      	ldr	r1, [r4, #12]
 8011b64:	2a01      	cmp	r2, #1
 8011b66:	d0f2      	beq.n	8011b4e <validate_structure+0x142>
 8011b68:	4812      	ldr	r0, [pc, #72]	; (8011bb4 <validate_structure+0x1a8>)
 8011b6a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011b6e:	4281      	cmp	r1, r0
 8011b70:	dcf0      	bgt.n	8011b54 <validate_structure+0x148>
 8011b72:	e01d      	b.n	8011bb0 <validate_structure+0x1a4>
 8011b74:	6963      	ldr	r3, [r4, #20]
 8011b76:	2100      	movs	r1, #0
 8011b78:	1c5a      	adds	r2, r3, #1
 8011b7a:	6121      	str	r1, [r4, #16]
 8011b7c:	0791      	lsls	r1, r2, #30
 8011b7e:	6162      	str	r2, [r4, #20]
 8011b80:	d112      	bne.n	8011ba8 <validate_structure+0x19c>
 8011b82:	2064      	movs	r0, #100	; 0x64
 8011b84:	fb92 f1f0 	sdiv	r1, r2, r0
 8011b88:	fb00 2211 	mls	r2, r0, r1, r2
 8011b8c:	b972      	cbnz	r2, 8011bac <validate_structure+0x1a0>
 8011b8e:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8011b92:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011b96:	fb93 f2f1 	sdiv	r2, r3, r1
 8011b9a:	fb01 3312 	mls	r3, r1, r2, r3
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	bf14      	ite	ne
 8011ba2:	231c      	movne	r3, #28
 8011ba4:	231d      	moveq	r3, #29
 8011ba6:	e7db      	b.n	8011b60 <validate_structure+0x154>
 8011ba8:	231c      	movs	r3, #28
 8011baa:	e7d9      	b.n	8011b60 <validate_structure+0x154>
 8011bac:	231d      	movs	r3, #29
 8011bae:	e7d7      	b.n	8011b60 <validate_structure+0x154>
 8011bb0:	b003      	add	sp, #12
 8011bb2:	bd30      	pop	{r4, r5, pc}
 8011bb4:	08014648 	.word	0x08014648

08011bb8 <mktime>:
 8011bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bbc:	4680      	mov	r8, r0
 8011bbe:	f000 fe3d 	bl	801283c <__gettzinfo>
 8011bc2:	4681      	mov	r9, r0
 8011bc4:	4640      	mov	r0, r8
 8011bc6:	f7ff ff21 	bl	8011a0c <validate_structure>
 8011bca:	e898 000c 	ldmia.w	r8, {r2, r3}
 8011bce:	203c      	movs	r0, #60	; 0x3c
 8011bd0:	fb00 2303 	mla	r3, r0, r3, r2
 8011bd4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011bd8:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8011bdc:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 8011be0:	fb07 3002 	mla	r0, r7, r2, r3
 8011be4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011be8:	4aad      	ldr	r2, [pc, #692]	; (8011ea0 <mktime+0x2e8>)
 8011bea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011bee:	3c01      	subs	r4, #1
 8011bf0:	2b01      	cmp	r3, #1
 8011bf2:	4414      	add	r4, r2
 8011bf4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011bf8:	dd11      	ble.n	8011c1e <mktime+0x66>
 8011bfa:	079a      	lsls	r2, r3, #30
 8011bfc:	d10f      	bne.n	8011c1e <mktime+0x66>
 8011bfe:	2164      	movs	r1, #100	; 0x64
 8011c00:	fb93 f2f1 	sdiv	r2, r3, r1
 8011c04:	fb01 3212 	mls	r2, r1, r2, r3
 8011c08:	b942      	cbnz	r2, 8011c1c <mktime+0x64>
 8011c0a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8011c0e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c12:	fb95 f1f2 	sdiv	r1, r5, r2
 8011c16:	fb02 5211 	mls	r2, r2, r1, r5
 8011c1a:	b902      	cbnz	r2, 8011c1e <mktime+0x66>
 8011c1c:	3401      	adds	r4, #1
 8011c1e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8011c22:	3210      	adds	r2, #16
 8011c24:	f644 6120 	movw	r1, #20000	; 0x4e20
 8011c28:	428a      	cmp	r2, r1
 8011c2a:	f8c8 401c 	str.w	r4, [r8, #28]
 8011c2e:	461e      	mov	r6, r3
 8011c30:	f200 8131 	bhi.w	8011e96 <mktime+0x2de>
 8011c34:	2b46      	cmp	r3, #70	; 0x46
 8011c36:	dd21      	ble.n	8011c7c <mktime+0xc4>
 8011c38:	2146      	movs	r1, #70	; 0x46
 8011c3a:	078f      	lsls	r7, r1, #30
 8011c3c:	d114      	bne.n	8011c68 <mktime+0xb0>
 8011c3e:	2564      	movs	r5, #100	; 0x64
 8011c40:	fb91 f2f5 	sdiv	r2, r1, r5
 8011c44:	fb05 1212 	mls	r2, r5, r2, r1
 8011c48:	b98a      	cbnz	r2, 8011c6e <mktime+0xb6>
 8011c4a:	f201 776c 	addw	r7, r1, #1900	; 0x76c
 8011c4e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c52:	fb97 f5f2 	sdiv	r5, r7, r2
 8011c56:	fb02 7215 	mls	r2, r2, r5, r7
 8011c5a:	2a00      	cmp	r2, #0
 8011c5c:	f240 126d 	movw	r2, #365	; 0x16d
 8011c60:	bf08      	it	eq
 8011c62:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011c66:	e004      	b.n	8011c72 <mktime+0xba>
 8011c68:	f240 126d 	movw	r2, #365	; 0x16d
 8011c6c:	e001      	b.n	8011c72 <mktime+0xba>
 8011c6e:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011c72:	3101      	adds	r1, #1
 8011c74:	4299      	cmp	r1, r3
 8011c76:	4414      	add	r4, r2
 8011c78:	d1df      	bne.n	8011c3a <mktime+0x82>
 8011c7a:	e043      	b.n	8011d04 <mktime+0x14c>
 8011c7c:	d042      	beq.n	8011d04 <mktime+0x14c>
 8011c7e:	2145      	movs	r1, #69	; 0x45
 8011c80:	4299      	cmp	r1, r3
 8011c82:	dd1e      	ble.n	8011cc2 <mktime+0x10a>
 8011c84:	078e      	lsls	r6, r1, #30
 8011c86:	d114      	bne.n	8011cb2 <mktime+0xfa>
 8011c88:	2564      	movs	r5, #100	; 0x64
 8011c8a:	fb91 f2f5 	sdiv	r2, r1, r5
 8011c8e:	fb05 1212 	mls	r2, r5, r2, r1
 8011c92:	b98a      	cbnz	r2, 8011cb8 <mktime+0x100>
 8011c94:	f201 766c 	addw	r6, r1, #1900	; 0x76c
 8011c98:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011c9c:	fb96 f5f2 	sdiv	r5, r6, r2
 8011ca0:	fb02 6215 	mls	r2, r2, r5, r6
 8011ca4:	2a00      	cmp	r2, #0
 8011ca6:	f240 126d 	movw	r2, #365	; 0x16d
 8011caa:	bf08      	it	eq
 8011cac:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011cb0:	e004      	b.n	8011cbc <mktime+0x104>
 8011cb2:	f240 126d 	movw	r2, #365	; 0x16d
 8011cb6:	e001      	b.n	8011cbc <mktime+0x104>
 8011cb8:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011cbc:	1aa4      	subs	r4, r4, r2
 8011cbe:	3901      	subs	r1, #1
 8011cc0:	e7de      	b.n	8011c80 <mktime+0xc8>
 8011cc2:	2b45      	cmp	r3, #69	; 0x45
 8011cc4:	bfa8      	it	ge
 8011cc6:	2345      	movge	r3, #69	; 0x45
 8011cc8:	079d      	lsls	r5, r3, #30
 8011cca:	461e      	mov	r6, r3
 8011ccc:	d114      	bne.n	8011cf8 <mktime+0x140>
 8011cce:	2264      	movs	r2, #100	; 0x64
 8011cd0:	fb93 f3f2 	sdiv	r3, r3, r2
 8011cd4:	fb02 6313 	mls	r3, r2, r3, r6
 8011cd8:	b98b      	cbnz	r3, 8011cfe <mktime+0x146>
 8011cda:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8011cde:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011ce2:	fb91 f2f3 	sdiv	r2, r1, r3
 8011ce6:	fb03 1312 	mls	r3, r3, r2, r1
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	f240 136d 	movw	r3, #365	; 0x16d
 8011cf0:	bf08      	it	eq
 8011cf2:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8011cf6:	e004      	b.n	8011d02 <mktime+0x14a>
 8011cf8:	f240 136d 	movw	r3, #365	; 0x16d
 8011cfc:	e001      	b.n	8011d02 <mktime+0x14a>
 8011cfe:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011d02:	1ae4      	subs	r4, r4, r3
 8011d04:	4f67      	ldr	r7, [pc, #412]	; (8011ea4 <mktime+0x2ec>)
 8011d06:	fb07 0704 	mla	r7, r7, r4, r0
 8011d0a:	f000 fb4b 	bl	80123a4 <__tz_lock>
 8011d0e:	4b66      	ldr	r3, [pc, #408]	; (8011ea8 <mktime+0x2f0>)
 8011d10:	681d      	ldr	r5, [r3, #0]
 8011d12:	2d00      	cmp	r5, #0
 8011d14:	f000 80aa 	beq.w	8011e6c <mktime+0x2b4>
 8011d18:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8011d1c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011d20:	2b01      	cmp	r3, #1
 8011d22:	bfa8      	it	ge
 8011d24:	2301      	movge	r3, #1
 8011d26:	469a      	mov	sl, r3
 8011d28:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011d2c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011d30:	4298      	cmp	r0, r3
 8011d32:	d10d      	bne.n	8011d50 <mktime+0x198>
 8011d34:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8011d38:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011d3c:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011d40:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8011d44:	1ad5      	subs	r5, r2, r3
 8011d46:	42af      	cmp	r7, r5
 8011d48:	eba1 0100 	sub.w	r1, r1, r0
 8011d4c:	da05      	bge.n	8011d5a <mktime+0x1a2>
 8011d4e:	e007      	b.n	8011d60 <mktime+0x1a8>
 8011d50:	f000 fa82 	bl	8012258 <__tzcalc_limits>
 8011d54:	2800      	cmp	r0, #0
 8011d56:	d1ed      	bne.n	8011d34 <mktime+0x17c>
 8011d58:	e07b      	b.n	8011e52 <mktime+0x29a>
 8011d5a:	1a12      	subs	r2, r2, r0
 8011d5c:	4297      	cmp	r7, r2
 8011d5e:	db78      	blt.n	8011e52 <mktime+0x29a>
 8011d60:	f8d9 2000 	ldr.w	r2, [r9]
 8011d64:	b112      	cbz	r2, 8011d6c <mktime+0x1b4>
 8011d66:	428f      	cmp	r7, r1
 8011d68:	db7b      	blt.n	8011e62 <mktime+0x2aa>
 8011d6a:	e001      	b.n	8011d70 <mktime+0x1b8>
 8011d6c:	428f      	cmp	r7, r1
 8011d6e:	da07      	bge.n	8011d80 <mktime+0x1c8>
 8011d70:	42af      	cmp	r7, r5
 8011d72:	bfac      	ite	ge
 8011d74:	2500      	movge	r5, #0
 8011d76:	2501      	movlt	r5, #1
 8011d78:	f1ba 0f00 	cmp.w	sl, #0
 8011d7c:	da04      	bge.n	8011d88 <mktime+0x1d0>
 8011d7e:	e069      	b.n	8011e54 <mktime+0x29c>
 8011d80:	f1ba 0f00 	cmp.w	sl, #0
 8011d84:	db68      	blt.n	8011e58 <mktime+0x2a0>
 8011d86:	2501      	movs	r5, #1
 8011d88:	ea85 0a0a 	eor.w	sl, r5, sl
 8011d8c:	f1ba 0f01 	cmp.w	sl, #1
 8011d90:	d160      	bne.n	8011e54 <mktime+0x29c>
 8011d92:	1a1b      	subs	r3, r3, r0
 8011d94:	b905      	cbnz	r5, 8011d98 <mktime+0x1e0>
 8011d96:	425b      	negs	r3, r3
 8011d98:	f8d8 2000 	ldr.w	r2, [r8]
 8011d9c:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011da0:	441a      	add	r2, r3
 8011da2:	f8c8 2000 	str.w	r2, [r8]
 8011da6:	4640      	mov	r0, r8
 8011da8:	441f      	add	r7, r3
 8011daa:	f7ff fe2f 	bl	8011a0c <validate_structure>
 8011dae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011db2:	ebb3 030a 	subs.w	r3, r3, sl
 8011db6:	d04d      	beq.n	8011e54 <mktime+0x29c>
 8011db8:	2b01      	cmp	r3, #1
 8011dba:	dc03      	bgt.n	8011dc4 <mktime+0x20c>
 8011dbc:	1c98      	adds	r0, r3, #2
 8011dbe:	bfd8      	it	le
 8011dc0:	2301      	movle	r3, #1
 8011dc2:	e001      	b.n	8011dc8 <mktime+0x210>
 8011dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011dc8:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8011dcc:	441c      	add	r4, r3
 8011dce:	189b      	adds	r3, r3, r2
 8011dd0:	d51d      	bpl.n	8011e0e <mktime+0x256>
 8011dd2:	1e73      	subs	r3, r6, #1
 8011dd4:	0799      	lsls	r1, r3, #30
 8011dd6:	d114      	bne.n	8011e02 <mktime+0x24a>
 8011dd8:	2164      	movs	r1, #100	; 0x64
 8011dda:	fb93 f2f1 	sdiv	r2, r3, r1
 8011dde:	fb01 3312 	mls	r3, r1, r2, r3
 8011de2:	b98b      	cbnz	r3, 8011e08 <mktime+0x250>
 8011de4:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8011de8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011dec:	fb96 f3f2 	sdiv	r3, r6, r2
 8011df0:	fb02 6613 	mls	r6, r2, r3, r6
 8011df4:	2e00      	cmp	r6, #0
 8011df6:	f240 136d 	movw	r3, #365	; 0x16d
 8011dfa:	bf18      	it	ne
 8011dfc:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8011e00:	e024      	b.n	8011e4c <mktime+0x294>
 8011e02:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8011e06:	e021      	b.n	8011e4c <mktime+0x294>
 8011e08:	f240 136d 	movw	r3, #365	; 0x16d
 8011e0c:	e01e      	b.n	8011e4c <mktime+0x294>
 8011e0e:	07b2      	lsls	r2, r6, #30
 8011e10:	d114      	bne.n	8011e3c <mktime+0x284>
 8011e12:	2164      	movs	r1, #100	; 0x64
 8011e14:	fb96 f2f1 	sdiv	r2, r6, r1
 8011e18:	fb01 6212 	mls	r2, r1, r2, r6
 8011e1c:	b98a      	cbnz	r2, 8011e42 <mktime+0x28a>
 8011e1e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8011e22:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011e26:	fb96 f2f1 	sdiv	r2, r6, r1
 8011e2a:	fb01 6612 	mls	r6, r1, r2, r6
 8011e2e:	2e00      	cmp	r6, #0
 8011e30:	f240 126d 	movw	r2, #365	; 0x16d
 8011e34:	bf08      	it	eq
 8011e36:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011e3a:	e004      	b.n	8011e46 <mktime+0x28e>
 8011e3c:	f240 126d 	movw	r2, #365	; 0x16d
 8011e40:	e001      	b.n	8011e46 <mktime+0x28e>
 8011e42:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011e46:	429a      	cmp	r2, r3
 8011e48:	bfd8      	it	le
 8011e4a:	1a9b      	suble	r3, r3, r2
 8011e4c:	f8c8 301c 	str.w	r3, [r8, #28]
 8011e50:	e000      	b.n	8011e54 <mktime+0x29c>
 8011e52:	4655      	mov	r5, sl
 8011e54:	2d01      	cmp	r5, #1
 8011e56:	d109      	bne.n	8011e6c <mktime+0x2b4>
 8011e58:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011e5c:	2501      	movs	r5, #1
 8011e5e:	183e      	adds	r6, r7, r0
 8011e60:	e007      	b.n	8011e72 <mktime+0x2ba>
 8011e62:	f1ba 0f00 	cmp.w	sl, #0
 8011e66:	f04f 0500 	mov.w	r5, #0
 8011e6a:	da8d      	bge.n	8011d88 <mktime+0x1d0>
 8011e6c:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8011e70:	183e      	adds	r6, r7, r0
 8011e72:	f000 fa98 	bl	80123a6 <__tz_unlock>
 8011e76:	3404      	adds	r4, #4
 8011e78:	2307      	movs	r3, #7
 8011e7a:	fb94 f3f3 	sdiv	r3, r4, r3
 8011e7e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011e82:	1ae4      	subs	r4, r4, r3
 8011e84:	bf48      	it	mi
 8011e86:	3407      	addmi	r4, #7
 8011e88:	f8c8 5020 	str.w	r5, [r8, #32]
 8011e8c:	f8c8 4018 	str.w	r4, [r8, #24]
 8011e90:	4630      	mov	r0, r6
 8011e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e96:	f04f 30ff 	mov.w	r0, #4294967295
 8011e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e9e:	bf00      	nop
 8011ea0:	08014618 	.word	0x08014618
 8011ea4:	00015180 	.word	0x00015180
 8011ea8:	1fff4798 	.word	0x1fff4798

08011eac <_puts_r>:
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	460e      	mov	r6, r1
 8011eb0:	4605      	mov	r5, r0
 8011eb2:	b118      	cbz	r0, 8011ebc <_puts_r+0x10>
 8011eb4:	6983      	ldr	r3, [r0, #24]
 8011eb6:	b90b      	cbnz	r3, 8011ebc <_puts_r+0x10>
 8011eb8:	f000 fc38 	bl	801272c <__sinit>
 8011ebc:	68ac      	ldr	r4, [r5, #8]
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	0719      	lsls	r1, r3, #28
 8011ec2:	d501      	bpl.n	8011ec8 <_puts_r+0x1c>
 8011ec4:	6923      	ldr	r3, [r4, #16]
 8011ec6:	b983      	cbnz	r3, 8011eea <_puts_r+0x3e>
 8011ec8:	4628      	mov	r0, r5
 8011eca:	4621      	mov	r1, r4
 8011ecc:	f000 fac0 	bl	8012450 <__swsetup_r>
 8011ed0:	b158      	cbz	r0, 8011eea <_puts_r+0x3e>
 8011ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8011ed6:	bd70      	pop	{r4, r5, r6, pc}
 8011ed8:	2b00      	cmp	r3, #0
 8011eda:	db0e      	blt.n	8011efa <_puts_r+0x4e>
 8011edc:	6823      	ldr	r3, [r4, #0]
 8011ede:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011ee2:	701a      	strb	r2, [r3, #0]
 8011ee4:	6823      	ldr	r3, [r4, #0]
 8011ee6:	3301      	adds	r3, #1
 8011ee8:	6023      	str	r3, [r4, #0]
 8011eea:	68a3      	ldr	r3, [r4, #8]
 8011eec:	f816 2b01 	ldrb.w	r2, [r6], #1
 8011ef0:	3b01      	subs	r3, #1
 8011ef2:	60a3      	str	r3, [r4, #8]
 8011ef4:	2a00      	cmp	r2, #0
 8011ef6:	d1ef      	bne.n	8011ed8 <_puts_r+0x2c>
 8011ef8:	e016      	b.n	8011f28 <_puts_r+0x7c>
 8011efa:	69a2      	ldr	r2, [r4, #24]
 8011efc:	4293      	cmp	r3, r2
 8011efe:	db09      	blt.n	8011f14 <_puts_r+0x68>
 8011f00:	6823      	ldr	r3, [r4, #0]
 8011f02:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011f06:	701a      	strb	r2, [r3, #0]
 8011f08:	6823      	ldr	r3, [r4, #0]
 8011f0a:	7819      	ldrb	r1, [r3, #0]
 8011f0c:	290a      	cmp	r1, #10
 8011f0e:	d1ea      	bne.n	8011ee6 <_puts_r+0x3a>
 8011f10:	4628      	mov	r0, r5
 8011f12:	e002      	b.n	8011f1a <_puts_r+0x6e>
 8011f14:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011f18:	4628      	mov	r0, r5
 8011f1a:	4622      	mov	r2, r4
 8011f1c:	f000 fa44 	bl	80123a8 <__swbuf_r>
 8011f20:	1c42      	adds	r2, r0, #1
 8011f22:	4250      	negs	r0, r2
 8011f24:	4150      	adcs	r0, r2
 8011f26:	e7d3      	b.n	8011ed0 <_puts_r+0x24>
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	da15      	bge.n	8011f58 <_puts_r+0xac>
 8011f2c:	69a2      	ldr	r2, [r4, #24]
 8011f2e:	4293      	cmp	r3, r2
 8011f30:	db08      	blt.n	8011f44 <_puts_r+0x98>
 8011f32:	6823      	ldr	r3, [r4, #0]
 8011f34:	220a      	movs	r2, #10
 8011f36:	701a      	strb	r2, [r3, #0]
 8011f38:	6823      	ldr	r3, [r4, #0]
 8011f3a:	7819      	ldrb	r1, [r3, #0]
 8011f3c:	4291      	cmp	r1, r2
 8011f3e:	d10f      	bne.n	8011f60 <_puts_r+0xb4>
 8011f40:	4628      	mov	r0, r5
 8011f42:	e001      	b.n	8011f48 <_puts_r+0x9c>
 8011f44:	4628      	mov	r0, r5
 8011f46:	210a      	movs	r1, #10
 8011f48:	4622      	mov	r2, r4
 8011f4a:	f000 fa2d 	bl	80123a8 <__swbuf_r>
 8011f4e:	1c43      	adds	r3, r0, #1
 8011f50:	4258      	negs	r0, r3
 8011f52:	4158      	adcs	r0, r3
 8011f54:	b130      	cbz	r0, 8011f64 <_puts_r+0xb8>
 8011f56:	e7bc      	b.n	8011ed2 <_puts_r+0x26>
 8011f58:	6823      	ldr	r3, [r4, #0]
 8011f5a:	220a      	movs	r2, #10
 8011f5c:	701a      	strb	r2, [r3, #0]
 8011f5e:	6823      	ldr	r3, [r4, #0]
 8011f60:	3301      	adds	r3, #1
 8011f62:	6023      	str	r3, [r4, #0]
 8011f64:	200a      	movs	r0, #10
 8011f66:	bd70      	pop	{r4, r5, r6, pc}

08011f68 <puts>:
 8011f68:	4b02      	ldr	r3, [pc, #8]	; (8011f74 <puts+0xc>)
 8011f6a:	4601      	mov	r1, r0
 8011f6c:	6818      	ldr	r0, [r3, #0]
 8011f6e:	f7ff bf9d 	b.w	8011eac <_puts_r>
 8011f72:	bf00      	nop
 8011f74:	1fff4330 	.word	0x1fff4330

08011f78 <siprintf>:
 8011f78:	b40e      	push	{r1, r2, r3}
 8011f7a:	b500      	push	{lr}
 8011f7c:	b09c      	sub	sp, #112	; 0x70
 8011f7e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011f82:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011f86:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011f8a:	9104      	str	r1, [sp, #16]
 8011f8c:	9107      	str	r1, [sp, #28]
 8011f8e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011f92:	ab1d      	add	r3, sp, #116	; 0x74
 8011f94:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011f98:	4908      	ldr	r1, [pc, #32]	; (8011fbc <siprintf+0x44>)
 8011f9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f9e:	9002      	str	r0, [sp, #8]
 8011fa0:	9006      	str	r0, [sp, #24]
 8011fa2:	6808      	ldr	r0, [r1, #0]
 8011fa4:	9301      	str	r3, [sp, #4]
 8011fa6:	a902      	add	r1, sp, #8
 8011fa8:	f000 fd96 	bl	8012ad8 <_svfiprintf_r>
 8011fac:	9b02      	ldr	r3, [sp, #8]
 8011fae:	2200      	movs	r2, #0
 8011fb0:	701a      	strb	r2, [r3, #0]
 8011fb2:	b01c      	add	sp, #112	; 0x70
 8011fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8011fb8:	b003      	add	sp, #12
 8011fba:	4770      	bx	lr
 8011fbc:	1fff4330 	.word	0x1fff4330

08011fc0 <strcat>:
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	4602      	mov	r2, r0
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	3201      	adds	r2, #1
 8011fc8:	781c      	ldrb	r4, [r3, #0]
 8011fca:	2c00      	cmp	r4, #0
 8011fcc:	d1fa      	bne.n	8011fc4 <strcat+0x4>
 8011fce:	3b01      	subs	r3, #1
 8011fd0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011fd4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011fd8:	2a00      	cmp	r2, #0
 8011fda:	d1f9      	bne.n	8011fd0 <strcat+0x10>
 8011fdc:	bd10      	pop	{r4, pc}

08011fde <strchr>:
 8011fde:	b2c9      	uxtb	r1, r1
 8011fe0:	4603      	mov	r3, r0
 8011fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011fe6:	b11a      	cbz	r2, 8011ff0 <strchr+0x12>
 8011fe8:	428a      	cmp	r2, r1
 8011fea:	d1f9      	bne.n	8011fe0 <strchr+0x2>
 8011fec:	4618      	mov	r0, r3
 8011fee:	4770      	bx	lr
 8011ff0:	2900      	cmp	r1, #0
 8011ff2:	bf0c      	ite	eq
 8011ff4:	4618      	moveq	r0, r3
 8011ff6:	2000      	movne	r0, #0
 8011ff8:	4770      	bx	lr

08011ffa <strcpy>:
 8011ffa:	4603      	mov	r3, r0
 8011ffc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012000:	f803 2b01 	strb.w	r2, [r3], #1
 8012004:	2a00      	cmp	r2, #0
 8012006:	d1f9      	bne.n	8011ffc <strcpy+0x2>
 8012008:	4770      	bx	lr

0801200a <strlen>:
 801200a:	4603      	mov	r3, r0
 801200c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012010:	2a00      	cmp	r2, #0
 8012012:	d1fb      	bne.n	801200c <strlen+0x2>
 8012014:	1a18      	subs	r0, r3, r0
 8012016:	3801      	subs	r0, #1
 8012018:	4770      	bx	lr

0801201a <strncpy>:
 801201a:	b510      	push	{r4, lr}
 801201c:	4603      	mov	r3, r0
 801201e:	b132      	cbz	r2, 801202e <strncpy+0x14>
 8012020:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012024:	f803 4b01 	strb.w	r4, [r3], #1
 8012028:	3a01      	subs	r2, #1
 801202a:	2c00      	cmp	r4, #0
 801202c:	d1f7      	bne.n	801201e <strncpy+0x4>
 801202e:	441a      	add	r2, r3
 8012030:	4293      	cmp	r3, r2
 8012032:	d003      	beq.n	801203c <strncpy+0x22>
 8012034:	2100      	movs	r1, #0
 8012036:	f803 1b01 	strb.w	r1, [r3], #1
 801203a:	e7f9      	b.n	8012030 <strncpy+0x16>
 801203c:	bd10      	pop	{r4, pc}

0801203e <strstr>:
 801203e:	b530      	push	{r4, r5, lr}
 8012040:	7803      	ldrb	r3, [r0, #0]
 8012042:	b923      	cbnz	r3, 801204e <strstr+0x10>
 8012044:	780b      	ldrb	r3, [r1, #0]
 8012046:	2b00      	cmp	r3, #0
 8012048:	bf18      	it	ne
 801204a:	2000      	movne	r0, #0
 801204c:	bd30      	pop	{r4, r5, pc}
 801204e:	4603      	mov	r3, r0
 8012050:	3001      	adds	r0, #1
 8012052:	781a      	ldrb	r2, [r3, #0]
 8012054:	b13a      	cbz	r2, 8012066 <strstr+0x28>
 8012056:	2200      	movs	r2, #0
 8012058:	5c8c      	ldrb	r4, [r1, r2]
 801205a:	b134      	cbz	r4, 801206a <strstr+0x2c>
 801205c:	5c9d      	ldrb	r5, [r3, r2]
 801205e:	42a5      	cmp	r5, r4
 8012060:	d1f5      	bne.n	801204e <strstr+0x10>
 8012062:	3201      	adds	r2, #1
 8012064:	e7f8      	b.n	8012058 <strstr+0x1a>
 8012066:	4610      	mov	r0, r2
 8012068:	bd30      	pop	{r4, r5, pc}
 801206a:	4618      	mov	r0, r3
 801206c:	bd30      	pop	{r4, r5, pc}
	...

08012070 <strtok>:
 8012070:	4b17      	ldr	r3, [pc, #92]	; (80120d0 <strtok+0x60>)
 8012072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012076:	681d      	ldr	r5, [r3, #0]
 8012078:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801207a:	4606      	mov	r6, r0
 801207c:	460f      	mov	r7, r1
 801207e:	b9fc      	cbnz	r4, 80120c0 <strtok+0x50>
 8012080:	2050      	movs	r0, #80	; 0x50
 8012082:	f000 fc2d 	bl	80128e0 <malloc>
 8012086:	65a8      	str	r0, [r5, #88]	; 0x58
 8012088:	6084      	str	r4, [r0, #8]
 801208a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801208c:	6004      	str	r4, [r0, #0]
 801208e:	6044      	str	r4, [r0, #4]
 8012090:	611c      	str	r4, [r3, #16]
 8012092:	60dc      	str	r4, [r3, #12]
 8012094:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8012096:	619c      	str	r4, [r3, #24]
 8012098:	615c      	str	r4, [r3, #20]
 801209a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801209c:	62dc      	str	r4, [r3, #44]	; 0x2c
 801209e:	629c      	str	r4, [r3, #40]	; 0x28
 80120a0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120a2:	635c      	str	r4, [r3, #52]	; 0x34
 80120a4:	631c      	str	r4, [r3, #48]	; 0x30
 80120a6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120a8:	63dc      	str	r4, [r3, #60]	; 0x3c
 80120aa:	639c      	str	r4, [r3, #56]	; 0x38
 80120ac:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120ae:	645c      	str	r4, [r3, #68]	; 0x44
 80120b0:	641c      	str	r4, [r3, #64]	; 0x40
 80120b2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120b4:	64dc      	str	r4, [r3, #76]	; 0x4c
 80120b6:	649c      	str	r4, [r3, #72]	; 0x48
 80120b8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120ba:	771c      	strb	r4, [r3, #28]
 80120bc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80120be:	625c      	str	r4, [r3, #36]	; 0x24
 80120c0:	4630      	mov	r0, r6
 80120c2:	4639      	mov	r1, r7
 80120c4:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80120c6:	2301      	movs	r3, #1
 80120c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80120cc:	f000 b802 	b.w	80120d4 <__strtok_r>
 80120d0:	1fff4330 	.word	0x1fff4330

080120d4 <__strtok_r>:
 80120d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120d6:	b948      	cbnz	r0, 80120ec <__strtok_r+0x18>
 80120d8:	6810      	ldr	r0, [r2, #0]
 80120da:	b938      	cbnz	r0, 80120ec <__strtok_r+0x18>
 80120dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120de:	f817 6b01 	ldrb.w	r6, [r7], #1
 80120e2:	b15e      	cbz	r6, 80120fc <__strtok_r+0x28>
 80120e4:	42b5      	cmp	r5, r6
 80120e6:	d1fa      	bne.n	80120de <__strtok_r+0xa>
 80120e8:	b12b      	cbz	r3, 80120f6 <__strtok_r+0x22>
 80120ea:	4620      	mov	r0, r4
 80120ec:	4604      	mov	r4, r0
 80120ee:	460f      	mov	r7, r1
 80120f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 80120f4:	e7f3      	b.n	80120de <__strtok_r+0xa>
 80120f6:	6014      	str	r4, [r2, #0]
 80120f8:	7003      	strb	r3, [r0, #0]
 80120fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120fc:	b94d      	cbnz	r5, 8012112 <__strtok_r+0x3e>
 80120fe:	6015      	str	r5, [r2, #0]
 8012100:	4628      	mov	r0, r5
 8012102:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012104:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012108:	42ae      	cmp	r6, r5
 801210a:	d007      	beq.n	801211c <__strtok_r+0x48>
 801210c:	2e00      	cmp	r6, #0
 801210e:	d1f9      	bne.n	8012104 <__strtok_r+0x30>
 8012110:	461c      	mov	r4, r3
 8012112:	4623      	mov	r3, r4
 8012114:	460f      	mov	r7, r1
 8012116:	f813 5b01 	ldrb.w	r5, [r3], #1
 801211a:	e7f3      	b.n	8012104 <__strtok_r+0x30>
 801211c:	b115      	cbz	r5, 8012124 <__strtok_r+0x50>
 801211e:	2100      	movs	r1, #0
 8012120:	7021      	strb	r1, [r4, #0]
 8012122:	e000      	b.n	8012126 <__strtok_r+0x52>
 8012124:	462b      	mov	r3, r5
 8012126:	6013      	str	r3, [r2, #0]
 8012128:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801212a <strtok_r>:
 801212a:	2301      	movs	r3, #1
 801212c:	f7ff bfd2 	b.w	80120d4 <__strtok_r>

08012130 <_strtol_r>:
 8012130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012134:	4c40      	ldr	r4, [pc, #256]	; (8012238 <_strtol_r+0x108>)
 8012136:	f8d4 9000 	ldr.w	r9, [r4]
 801213a:	460f      	mov	r7, r1
 801213c:	463d      	mov	r5, r7
 801213e:	f815 eb01 	ldrb.w	lr, [r5], #1
 8012142:	eb09 040e 	add.w	r4, r9, lr
 8012146:	7866      	ldrb	r6, [r4, #1]
 8012148:	f006 0408 	and.w	r4, r6, #8
 801214c:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8012150:	b10c      	cbz	r4, 8012156 <_strtol_r+0x26>
 8012152:	462f      	mov	r7, r5
 8012154:	e7f2      	b.n	801213c <_strtol_r+0xc>
 8012156:	4674      	mov	r4, lr
 8012158:	2c2d      	cmp	r4, #45	; 0x2d
 801215a:	d103      	bne.n	8012164 <_strtol_r+0x34>
 801215c:	1cbd      	adds	r5, r7, #2
 801215e:	787c      	ldrb	r4, [r7, #1]
 8012160:	2601      	movs	r6, #1
 8012162:	e003      	b.n	801216c <_strtol_r+0x3c>
 8012164:	2c2b      	cmp	r4, #43	; 0x2b
 8012166:	bf04      	itt	eq
 8012168:	787c      	ldrbeq	r4, [r7, #1]
 801216a:	1cbd      	addeq	r5, r7, #2
 801216c:	b113      	cbz	r3, 8012174 <_strtol_r+0x44>
 801216e:	2b10      	cmp	r3, #16
 8012170:	d10a      	bne.n	8012188 <_strtol_r+0x58>
 8012172:	e05a      	b.n	801222a <_strtol_r+0xfa>
 8012174:	2c30      	cmp	r4, #48	; 0x30
 8012176:	d156      	bne.n	8012226 <_strtol_r+0xf6>
 8012178:	782c      	ldrb	r4, [r5, #0]
 801217a:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 801217e:	2c58      	cmp	r4, #88	; 0x58
 8012180:	d14c      	bne.n	801221c <_strtol_r+0xec>
 8012182:	786c      	ldrb	r4, [r5, #1]
 8012184:	2310      	movs	r3, #16
 8012186:	3502      	adds	r5, #2
 8012188:	2e00      	cmp	r6, #0
 801218a:	bf14      	ite	ne
 801218c:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8012190:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8012194:	2700      	movs	r7, #0
 8012196:	fbb8 faf3 	udiv	sl, r8, r3
 801219a:	46be      	mov	lr, r7
 801219c:	fb03 881a 	mls	r8, r3, sl, r8
 80121a0:	eb09 0c04 	add.w	ip, r9, r4
 80121a4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80121a8:	f01c 0f04 	tst.w	ip, #4
 80121ac:	d001      	beq.n	80121b2 <_strtol_r+0x82>
 80121ae:	3c30      	subs	r4, #48	; 0x30
 80121b0:	e00b      	b.n	80121ca <_strtol_r+0x9a>
 80121b2:	f01c 0c03 	ands.w	ip, ip, #3
 80121b6:	d01b      	beq.n	80121f0 <_strtol_r+0xc0>
 80121b8:	f1bc 0f01 	cmp.w	ip, #1
 80121bc:	bf0c      	ite	eq
 80121be:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 80121c2:	f04f 0c57 	movne.w	ip, #87	; 0x57
 80121c6:	ebcc 0404 	rsb	r4, ip, r4
 80121ca:	429c      	cmp	r4, r3
 80121cc:	da10      	bge.n	80121f0 <_strtol_r+0xc0>
 80121ce:	f1b7 3fff 	cmp.w	r7, #4294967295
 80121d2:	d00a      	beq.n	80121ea <_strtol_r+0xba>
 80121d4:	45d6      	cmp	lr, sl
 80121d6:	d806      	bhi.n	80121e6 <_strtol_r+0xb6>
 80121d8:	d101      	bne.n	80121de <_strtol_r+0xae>
 80121da:	4544      	cmp	r4, r8
 80121dc:	dc03      	bgt.n	80121e6 <_strtol_r+0xb6>
 80121de:	fb03 4e0e 	mla	lr, r3, lr, r4
 80121e2:	2701      	movs	r7, #1
 80121e4:	e001      	b.n	80121ea <_strtol_r+0xba>
 80121e6:	f04f 37ff 	mov.w	r7, #4294967295
 80121ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80121ee:	e7d7      	b.n	80121a0 <_strtol_r+0x70>
 80121f0:	1c7c      	adds	r4, r7, #1
 80121f2:	4673      	mov	r3, lr
 80121f4:	d10a      	bne.n	801220c <_strtol_r+0xdc>
 80121f6:	2e00      	cmp	r6, #0
 80121f8:	f04f 0122 	mov.w	r1, #34	; 0x22
 80121fc:	bf14      	ite	ne
 80121fe:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8012202:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8012206:	6001      	str	r1, [r0, #0]
 8012208:	b92a      	cbnz	r2, 8012216 <_strtol_r+0xe6>
 801220a:	e011      	b.n	8012230 <_strtol_r+0x100>
 801220c:	b10e      	cbz	r6, 8012212 <_strtol_r+0xe2>
 801220e:	f1ce 0300 	rsb	r3, lr, #0
 8012212:	b16a      	cbz	r2, 8012230 <_strtol_r+0x100>
 8012214:	b107      	cbz	r7, 8012218 <_strtol_r+0xe8>
 8012216:	1e69      	subs	r1, r5, #1
 8012218:	6011      	str	r1, [r2, #0]
 801221a:	e009      	b.n	8012230 <_strtol_r+0x100>
 801221c:	2430      	movs	r4, #48	; 0x30
 801221e:	2b00      	cmp	r3, #0
 8012220:	d1b2      	bne.n	8012188 <_strtol_r+0x58>
 8012222:	2308      	movs	r3, #8
 8012224:	e7b0      	b.n	8012188 <_strtol_r+0x58>
 8012226:	230a      	movs	r3, #10
 8012228:	e7ae      	b.n	8012188 <_strtol_r+0x58>
 801222a:	2c30      	cmp	r4, #48	; 0x30
 801222c:	d1ac      	bne.n	8012188 <_strtol_r+0x58>
 801222e:	e7a3      	b.n	8012178 <_strtol_r+0x48>
 8012230:	4618      	mov	r0, r3
 8012232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012236:	bf00      	nop
 8012238:	1fff4334 	.word	0x1fff4334

0801223c <strtol>:
 801223c:	b530      	push	{r4, r5, lr}
 801223e:	4613      	mov	r3, r2
 8012240:	4a04      	ldr	r2, [pc, #16]	; (8012254 <strtol+0x18>)
 8012242:	4605      	mov	r5, r0
 8012244:	460c      	mov	r4, r1
 8012246:	6810      	ldr	r0, [r2, #0]
 8012248:	4629      	mov	r1, r5
 801224a:	4622      	mov	r2, r4
 801224c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012250:	f7ff bf6e 	b.w	8012130 <_strtol_r>
 8012254:	1fff4330 	.word	0x1fff4330

08012258 <__tzcalc_limits>:
 8012258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801225c:	4604      	mov	r4, r0
 801225e:	f000 faed 	bl	801283c <__gettzinfo>
 8012262:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8012266:	429c      	cmp	r4, r3
 8012268:	f340 8094 	ble.w	8012394 <__tzcalc_limits+0x13c>
 801226c:	f46f 6ef6 	mvn.w	lr, #1968	; 0x7b0
 8012270:	eb04 030e 	add.w	r3, r4, lr
 8012274:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8012278:	109b      	asrs	r3, r3, #2
 801227a:	f240 166d 	movw	r6, #365	; 0x16d
 801227e:	fb06 3602 	mla	r6, r6, r2, r3
 8012282:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 8012286:	f06f 0363 	mvn.w	r3, #99	; 0x63
 801228a:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 801228e:	fb92 f2f3 	sdiv	r2, r2, r3
 8012292:	18b3      	adds	r3, r6, r2
 8012294:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8012298:	eb04 060c 	add.w	r6, r4, ip
 801229c:	fb96 f6f5 	sdiv	r6, r6, r5
 80122a0:	441e      	add	r6, r3
 80122a2:	2364      	movs	r3, #100	; 0x64
 80122a4:	6044      	str	r4, [r0, #4]
 80122a6:	fb94 fef3 	sdiv	lr, r4, r3
 80122aa:	4601      	mov	r1, r0
 80122ac:	fb03 4e1e 	mls	lr, r3, lr, r4
 80122b0:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 80122b4:	fb94 f3f5 	sdiv	r3, r4, r5
 80122b8:	fb05 4513 	mls	r5, r5, r3, r4
 80122bc:	fab5 f585 	clz	r5, r5
 80122c0:	096d      	lsrs	r5, r5, #5
 80122c2:	7a0b      	ldrb	r3, [r1, #8]
 80122c4:	2b4a      	cmp	r3, #74	; 0x4a
 80122c6:	d111      	bne.n	80122ec <__tzcalc_limits+0x94>
 80122c8:	694b      	ldr	r3, [r1, #20]
 80122ca:	07a7      	lsls	r7, r4, #30
 80122cc:	eb06 0203 	add.w	r2, r6, r3
 80122d0:	d102      	bne.n	80122d8 <__tzcalc_limits+0x80>
 80122d2:	f1be 0f00 	cmp.w	lr, #0
 80122d6:	d100      	bne.n	80122da <__tzcalc_limits+0x82>
 80122d8:	b125      	cbz	r5, 80122e4 <__tzcalc_limits+0x8c>
 80122da:	2b3b      	cmp	r3, #59	; 0x3b
 80122dc:	bfd4      	ite	le
 80122de:	2300      	movle	r3, #0
 80122e0:	2301      	movgt	r3, #1
 80122e2:	e000      	b.n	80122e6 <__tzcalc_limits+0x8e>
 80122e4:	462b      	mov	r3, r5
 80122e6:	4413      	add	r3, r2
 80122e8:	3b01      	subs	r3, #1
 80122ea:	e03f      	b.n	801236c <__tzcalc_limits+0x114>
 80122ec:	2b44      	cmp	r3, #68	; 0x44
 80122ee:	d102      	bne.n	80122f6 <__tzcalc_limits+0x9e>
 80122f0:	694b      	ldr	r3, [r1, #20]
 80122f2:	4433      	add	r3, r6
 80122f4:	e03a      	b.n	801236c <__tzcalc_limits+0x114>
 80122f6:	07a2      	lsls	r2, r4, #30
 80122f8:	d105      	bne.n	8012306 <__tzcalc_limits+0xae>
 80122fa:	f1be 0f00 	cmp.w	lr, #0
 80122fe:	bf0c      	ite	eq
 8012300:	462b      	moveq	r3, r5
 8012302:	2301      	movne	r3, #1
 8012304:	e000      	b.n	8012308 <__tzcalc_limits+0xb0>
 8012306:	462b      	mov	r3, r5
 8012308:	4a24      	ldr	r2, [pc, #144]	; (801239c <__tzcalc_limits+0x144>)
 801230a:	f04f 0930 	mov.w	r9, #48	; 0x30
 801230e:	fb09 2903 	mla	r9, r9, r3, r2
 8012312:	68ca      	ldr	r2, [r1, #12]
 8012314:	f1a9 0704 	sub.w	r7, r9, #4
 8012318:	46b2      	mov	sl, r6
 801231a:	2301      	movs	r3, #1
 801231c:	4293      	cmp	r3, r2
 801231e:	da04      	bge.n	801232a <__tzcalc_limits+0xd2>
 8012320:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8012324:	3301      	adds	r3, #1
 8012326:	44c2      	add	sl, r8
 8012328:	e7f8      	b.n	801231c <__tzcalc_limits+0xc4>
 801232a:	2a01      	cmp	r2, #1
 801232c:	bfb8      	it	lt
 801232e:	2201      	movlt	r2, #1
 8012330:	4690      	mov	r8, r2
 8012332:	2707      	movs	r7, #7
 8012334:	f10a 0204 	add.w	r2, sl, #4
 8012338:	fb92 f7f7 	sdiv	r7, r2, r7
 801233c:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8012340:	1bd7      	subs	r7, r2, r7
 8012342:	694a      	ldr	r2, [r1, #20]
 8012344:	1bd2      	subs	r2, r2, r7
 8012346:	690f      	ldr	r7, [r1, #16]
 8012348:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 801234c:	f107 37ff 	add.w	r7, r7, #4294967295
 8012350:	f108 38ff 	add.w	r8, r8, #4294967295
 8012354:	bf48      	it	mi
 8012356:	3207      	addmi	r2, #7
 8012358:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 801235c:	18bb      	adds	r3, r7, r2
 801235e:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 8012362:	4293      	cmp	r3, r2
 8012364:	db01      	blt.n	801236a <__tzcalc_limits+0x112>
 8012366:	3b07      	subs	r3, #7
 8012368:	e7fb      	b.n	8012362 <__tzcalc_limits+0x10a>
 801236a:	4453      	add	r3, sl
 801236c:	698a      	ldr	r2, [r1, #24]
 801236e:	4f0c      	ldr	r7, [pc, #48]	; (80123a0 <__tzcalc_limits+0x148>)
 8012370:	fb07 2303 	mla	r3, r7, r3, r2
 8012374:	6a0f      	ldr	r7, [r1, #32]
 8012376:	443b      	add	r3, r7
 8012378:	f841 3f1c 	str.w	r3, [r1, #28]!
 801237c:	4561      	cmp	r1, ip
 801237e:	d1a0      	bne.n	80122c2 <__tzcalc_limits+0x6a>
 8012380:	69c3      	ldr	r3, [r0, #28]
 8012382:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8012384:	4293      	cmp	r3, r2
 8012386:	bfac      	ite	ge
 8012388:	2300      	movge	r3, #0
 801238a:	2301      	movlt	r3, #1
 801238c:	6003      	str	r3, [r0, #0]
 801238e:	2001      	movs	r0, #1
 8012390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012394:	2000      	movs	r0, #0
 8012396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801239a:	bf00      	nop
 801239c:	080147dc 	.word	0x080147dc
 80123a0:	00015180 	.word	0x00015180

080123a4 <__tz_lock>:
 80123a4:	4770      	bx	lr

080123a6 <__tz_unlock>:
 80123a6:	4770      	bx	lr

080123a8 <__swbuf_r>:
 80123a8:	b570      	push	{r4, r5, r6, lr}
 80123aa:	460d      	mov	r5, r1
 80123ac:	4614      	mov	r4, r2
 80123ae:	4606      	mov	r6, r0
 80123b0:	b118      	cbz	r0, 80123ba <__swbuf_r+0x12>
 80123b2:	6983      	ldr	r3, [r0, #24]
 80123b4:	b90b      	cbnz	r3, 80123ba <__swbuf_r+0x12>
 80123b6:	f000 f9b9 	bl	801272c <__sinit>
 80123ba:	4b22      	ldr	r3, [pc, #136]	; (8012444 <__swbuf_r+0x9c>)
 80123bc:	429c      	cmp	r4, r3
 80123be:	d101      	bne.n	80123c4 <__swbuf_r+0x1c>
 80123c0:	6874      	ldr	r4, [r6, #4]
 80123c2:	e008      	b.n	80123d6 <__swbuf_r+0x2e>
 80123c4:	4b20      	ldr	r3, [pc, #128]	; (8012448 <__swbuf_r+0xa0>)
 80123c6:	429c      	cmp	r4, r3
 80123c8:	d101      	bne.n	80123ce <__swbuf_r+0x26>
 80123ca:	68b4      	ldr	r4, [r6, #8]
 80123cc:	e003      	b.n	80123d6 <__swbuf_r+0x2e>
 80123ce:	4b1f      	ldr	r3, [pc, #124]	; (801244c <__swbuf_r+0xa4>)
 80123d0:	429c      	cmp	r4, r3
 80123d2:	bf08      	it	eq
 80123d4:	68f4      	ldreq	r4, [r6, #12]
 80123d6:	69a3      	ldr	r3, [r4, #24]
 80123d8:	60a3      	str	r3, [r4, #8]
 80123da:	89a3      	ldrh	r3, [r4, #12]
 80123dc:	071a      	lsls	r2, r3, #28
 80123de:	d509      	bpl.n	80123f4 <__swbuf_r+0x4c>
 80123e0:	6923      	ldr	r3, [r4, #16]
 80123e2:	b13b      	cbz	r3, 80123f4 <__swbuf_r+0x4c>
 80123e4:	6823      	ldr	r3, [r4, #0]
 80123e6:	6920      	ldr	r0, [r4, #16]
 80123e8:	1a18      	subs	r0, r3, r0
 80123ea:	6963      	ldr	r3, [r4, #20]
 80123ec:	4298      	cmp	r0, r3
 80123ee:	b2ed      	uxtb	r5, r5
 80123f0:	db0f      	blt.n	8012412 <__swbuf_r+0x6a>
 80123f2:	e008      	b.n	8012406 <__swbuf_r+0x5e>
 80123f4:	4630      	mov	r0, r6
 80123f6:	4621      	mov	r1, r4
 80123f8:	f000 f82a 	bl	8012450 <__swsetup_r>
 80123fc:	2800      	cmp	r0, #0
 80123fe:	d0f1      	beq.n	80123e4 <__swbuf_r+0x3c>
 8012400:	f04f 30ff 	mov.w	r0, #4294967295
 8012404:	bd70      	pop	{r4, r5, r6, pc}
 8012406:	4630      	mov	r0, r6
 8012408:	4621      	mov	r1, r4
 801240a:	f000 f925 	bl	8012658 <_fflush_r>
 801240e:	2800      	cmp	r0, #0
 8012410:	d1f6      	bne.n	8012400 <__swbuf_r+0x58>
 8012412:	68a3      	ldr	r3, [r4, #8]
 8012414:	3b01      	subs	r3, #1
 8012416:	60a3      	str	r3, [r4, #8]
 8012418:	6823      	ldr	r3, [r4, #0]
 801241a:	1c5a      	adds	r2, r3, #1
 801241c:	6022      	str	r2, [r4, #0]
 801241e:	701d      	strb	r5, [r3, #0]
 8012420:	6963      	ldr	r3, [r4, #20]
 8012422:	3001      	adds	r0, #1
 8012424:	4298      	cmp	r0, r3
 8012426:	d004      	beq.n	8012432 <__swbuf_r+0x8a>
 8012428:	89a3      	ldrh	r3, [r4, #12]
 801242a:	07db      	lsls	r3, r3, #31
 801242c:	d507      	bpl.n	801243e <__swbuf_r+0x96>
 801242e:	2d0a      	cmp	r5, #10
 8012430:	d105      	bne.n	801243e <__swbuf_r+0x96>
 8012432:	4630      	mov	r0, r6
 8012434:	4621      	mov	r1, r4
 8012436:	f000 f90f 	bl	8012658 <_fflush_r>
 801243a:	2800      	cmp	r0, #0
 801243c:	d1e0      	bne.n	8012400 <__swbuf_r+0x58>
 801243e:	4628      	mov	r0, r5
 8012440:	bd70      	pop	{r4, r5, r6, pc}
 8012442:	bf00      	nop
 8012444:	0801477c 	.word	0x0801477c
 8012448:	0801479c 	.word	0x0801479c
 801244c:	080147bc 	.word	0x080147bc

08012450 <__swsetup_r>:
 8012450:	4b31      	ldr	r3, [pc, #196]	; (8012518 <__swsetup_r+0xc8>)
 8012452:	b570      	push	{r4, r5, r6, lr}
 8012454:	681d      	ldr	r5, [r3, #0]
 8012456:	4606      	mov	r6, r0
 8012458:	460c      	mov	r4, r1
 801245a:	b125      	cbz	r5, 8012466 <__swsetup_r+0x16>
 801245c:	69ab      	ldr	r3, [r5, #24]
 801245e:	b913      	cbnz	r3, 8012466 <__swsetup_r+0x16>
 8012460:	4628      	mov	r0, r5
 8012462:	f000 f963 	bl	801272c <__sinit>
 8012466:	4b2d      	ldr	r3, [pc, #180]	; (801251c <__swsetup_r+0xcc>)
 8012468:	429c      	cmp	r4, r3
 801246a:	d101      	bne.n	8012470 <__swsetup_r+0x20>
 801246c:	686c      	ldr	r4, [r5, #4]
 801246e:	e008      	b.n	8012482 <__swsetup_r+0x32>
 8012470:	4b2b      	ldr	r3, [pc, #172]	; (8012520 <__swsetup_r+0xd0>)
 8012472:	429c      	cmp	r4, r3
 8012474:	d101      	bne.n	801247a <__swsetup_r+0x2a>
 8012476:	68ac      	ldr	r4, [r5, #8]
 8012478:	e003      	b.n	8012482 <__swsetup_r+0x32>
 801247a:	4b2a      	ldr	r3, [pc, #168]	; (8012524 <__swsetup_r+0xd4>)
 801247c:	429c      	cmp	r4, r3
 801247e:	bf08      	it	eq
 8012480:	68ec      	ldreq	r4, [r5, #12]
 8012482:	89a3      	ldrh	r3, [r4, #12]
 8012484:	b29a      	uxth	r2, r3
 8012486:	0711      	lsls	r1, r2, #28
 8012488:	d41d      	bmi.n	80124c6 <__swsetup_r+0x76>
 801248a:	06d5      	lsls	r5, r2, #27
 801248c:	d402      	bmi.n	8012494 <__swsetup_r+0x44>
 801248e:	2209      	movs	r2, #9
 8012490:	6032      	str	r2, [r6, #0]
 8012492:	e038      	b.n	8012506 <__swsetup_r+0xb6>
 8012494:	0750      	lsls	r0, r2, #29
 8012496:	d512      	bpl.n	80124be <__swsetup_r+0x6e>
 8012498:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801249a:	b141      	cbz	r1, 80124ae <__swsetup_r+0x5e>
 801249c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80124a0:	4299      	cmp	r1, r3
 80124a2:	d002      	beq.n	80124aa <__swsetup_r+0x5a>
 80124a4:	4630      	mov	r0, r6
 80124a6:	f000 fa23 	bl	80128f0 <_free_r>
 80124aa:	2300      	movs	r3, #0
 80124ac:	6363      	str	r3, [r4, #52]	; 0x34
 80124ae:	89a3      	ldrh	r3, [r4, #12]
 80124b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80124b4:	81a3      	strh	r3, [r4, #12]
 80124b6:	2300      	movs	r3, #0
 80124b8:	6063      	str	r3, [r4, #4]
 80124ba:	6923      	ldr	r3, [r4, #16]
 80124bc:	6023      	str	r3, [r4, #0]
 80124be:	89a3      	ldrh	r3, [r4, #12]
 80124c0:	f043 0308 	orr.w	r3, r3, #8
 80124c4:	81a3      	strh	r3, [r4, #12]
 80124c6:	6923      	ldr	r3, [r4, #16]
 80124c8:	b94b      	cbnz	r3, 80124de <__swsetup_r+0x8e>
 80124ca:	89a3      	ldrh	r3, [r4, #12]
 80124cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80124d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80124d4:	d003      	beq.n	80124de <__swsetup_r+0x8e>
 80124d6:	4630      	mov	r0, r6
 80124d8:	4621      	mov	r1, r4
 80124da:	f000 f9b3 	bl	8012844 <__smakebuf_r>
 80124de:	89a3      	ldrh	r3, [r4, #12]
 80124e0:	f013 0201 	ands.w	r2, r3, #1
 80124e4:	d005      	beq.n	80124f2 <__swsetup_r+0xa2>
 80124e6:	2200      	movs	r2, #0
 80124e8:	60a2      	str	r2, [r4, #8]
 80124ea:	6962      	ldr	r2, [r4, #20]
 80124ec:	4252      	negs	r2, r2
 80124ee:	61a2      	str	r2, [r4, #24]
 80124f0:	e003      	b.n	80124fa <__swsetup_r+0xaa>
 80124f2:	0799      	lsls	r1, r3, #30
 80124f4:	bf58      	it	pl
 80124f6:	6962      	ldrpl	r2, [r4, #20]
 80124f8:	60a2      	str	r2, [r4, #8]
 80124fa:	6922      	ldr	r2, [r4, #16]
 80124fc:	b94a      	cbnz	r2, 8012512 <__swsetup_r+0xc2>
 80124fe:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8012502:	b280      	uxth	r0, r0
 8012504:	b130      	cbz	r0, 8012514 <__swsetup_r+0xc4>
 8012506:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801250a:	81a3      	strh	r3, [r4, #12]
 801250c:	f04f 30ff 	mov.w	r0, #4294967295
 8012510:	bd70      	pop	{r4, r5, r6, pc}
 8012512:	2000      	movs	r0, #0
 8012514:	bd70      	pop	{r4, r5, r6, pc}
 8012516:	bf00      	nop
 8012518:	1fff4330 	.word	0x1fff4330
 801251c:	0801477c 	.word	0x0801477c
 8012520:	0801479c 	.word	0x0801479c
 8012524:	080147bc 	.word	0x080147bc

08012528 <div>:
 8012528:	2900      	cmp	r1, #0
 801252a:	b510      	push	{r4, lr}
 801252c:	fb91 f4f2 	sdiv	r4, r1, r2
 8012530:	fb02 1314 	mls	r3, r2, r4, r1
 8012534:	db04      	blt.n	8012540 <div+0x18>
 8012536:	2b00      	cmp	r3, #0
 8012538:	da07      	bge.n	801254a <div+0x22>
 801253a:	3401      	adds	r4, #1
 801253c:	1a9b      	subs	r3, r3, r2
 801253e:	e004      	b.n	801254a <div+0x22>
 8012540:	2b00      	cmp	r3, #0
 8012542:	bfc4      	itt	gt
 8012544:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8012548:	189b      	addgt	r3, r3, r2
 801254a:	6004      	str	r4, [r0, #0]
 801254c:	6043      	str	r3, [r0, #4]
 801254e:	bd10      	pop	{r4, pc}

08012550 <__sflush_r>:
 8012550:	898a      	ldrh	r2, [r1, #12]
 8012552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012556:	4605      	mov	r5, r0
 8012558:	0710      	lsls	r0, r2, #28
 801255a:	460c      	mov	r4, r1
 801255c:	d457      	bmi.n	801260e <__sflush_r+0xbe>
 801255e:	684b      	ldr	r3, [r1, #4]
 8012560:	2b00      	cmp	r3, #0
 8012562:	dc02      	bgt.n	801256a <__sflush_r+0x1a>
 8012564:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012566:	2b00      	cmp	r3, #0
 8012568:	dd18      	ble.n	801259c <__sflush_r+0x4c>
 801256a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801256c:	b1b6      	cbz	r6, 801259c <__sflush_r+0x4c>
 801256e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8012572:	2300      	movs	r3, #0
 8012574:	b292      	uxth	r2, r2
 8012576:	682f      	ldr	r7, [r5, #0]
 8012578:	602b      	str	r3, [r5, #0]
 801257a:	b10a      	cbz	r2, 8012580 <__sflush_r+0x30>
 801257c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801257e:	e010      	b.n	80125a2 <__sflush_r+0x52>
 8012580:	6a21      	ldr	r1, [r4, #32]
 8012582:	4628      	mov	r0, r5
 8012584:	2301      	movs	r3, #1
 8012586:	47b0      	blx	r6
 8012588:	1c41      	adds	r1, r0, #1
 801258a:	4602      	mov	r2, r0
 801258c:	d109      	bne.n	80125a2 <__sflush_r+0x52>
 801258e:	682b      	ldr	r3, [r5, #0]
 8012590:	b13b      	cbz	r3, 80125a2 <__sflush_r+0x52>
 8012592:	2b1d      	cmp	r3, #29
 8012594:	d001      	beq.n	801259a <__sflush_r+0x4a>
 8012596:	2b16      	cmp	r3, #22
 8012598:	d147      	bne.n	801262a <__sflush_r+0xda>
 801259a:	602f      	str	r7, [r5, #0]
 801259c:	2000      	movs	r0, #0
 801259e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125a2:	89a3      	ldrh	r3, [r4, #12]
 80125a4:	075b      	lsls	r3, r3, #29
 80125a6:	d505      	bpl.n	80125b4 <__sflush_r+0x64>
 80125a8:	6863      	ldr	r3, [r4, #4]
 80125aa:	1ad2      	subs	r2, r2, r3
 80125ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80125ae:	b10b      	cbz	r3, 80125b4 <__sflush_r+0x64>
 80125b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80125b2:	1ad2      	subs	r2, r2, r3
 80125b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80125b6:	6a21      	ldr	r1, [r4, #32]
 80125b8:	2300      	movs	r3, #0
 80125ba:	4628      	mov	r0, r5
 80125bc:	47b0      	blx	r6
 80125be:	1c46      	adds	r6, r0, #1
 80125c0:	89a3      	ldrh	r3, [r4, #12]
 80125c2:	d105      	bne.n	80125d0 <__sflush_r+0x80>
 80125c4:	682a      	ldr	r2, [r5, #0]
 80125c6:	b11a      	cbz	r2, 80125d0 <__sflush_r+0x80>
 80125c8:	2a1d      	cmp	r2, #29
 80125ca:	d001      	beq.n	80125d0 <__sflush_r+0x80>
 80125cc:	2a16      	cmp	r2, #22
 80125ce:	d119      	bne.n	8012604 <__sflush_r+0xb4>
 80125d0:	2200      	movs	r2, #0
 80125d2:	6062      	str	r2, [r4, #4]
 80125d4:	04d9      	lsls	r1, r3, #19
 80125d6:	6922      	ldr	r2, [r4, #16]
 80125d8:	6022      	str	r2, [r4, #0]
 80125da:	d504      	bpl.n	80125e6 <__sflush_r+0x96>
 80125dc:	1c42      	adds	r2, r0, #1
 80125de:	d101      	bne.n	80125e4 <__sflush_r+0x94>
 80125e0:	682b      	ldr	r3, [r5, #0]
 80125e2:	b903      	cbnz	r3, 80125e6 <__sflush_r+0x96>
 80125e4:	6560      	str	r0, [r4, #84]	; 0x54
 80125e6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80125e8:	602f      	str	r7, [r5, #0]
 80125ea:	2900      	cmp	r1, #0
 80125ec:	d0d6      	beq.n	801259c <__sflush_r+0x4c>
 80125ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80125f2:	4299      	cmp	r1, r3
 80125f4:	d002      	beq.n	80125fc <__sflush_r+0xac>
 80125f6:	4628      	mov	r0, r5
 80125f8:	f000 f97a 	bl	80128f0 <_free_r>
 80125fc:	2000      	movs	r0, #0
 80125fe:	6360      	str	r0, [r4, #52]	; 0x34
 8012600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012604:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012608:	81a3      	strh	r3, [r4, #12]
 801260a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801260e:	690f      	ldr	r7, [r1, #16]
 8012610:	2f00      	cmp	r7, #0
 8012612:	d0c3      	beq.n	801259c <__sflush_r+0x4c>
 8012614:	0793      	lsls	r3, r2, #30
 8012616:	680e      	ldr	r6, [r1, #0]
 8012618:	bf08      	it	eq
 801261a:	694b      	ldreq	r3, [r1, #20]
 801261c:	600f      	str	r7, [r1, #0]
 801261e:	bf18      	it	ne
 8012620:	2300      	movne	r3, #0
 8012622:	ebc7 0806 	rsb	r8, r7, r6
 8012626:	608b      	str	r3, [r1, #8]
 8012628:	e012      	b.n	8012650 <__sflush_r+0x100>
 801262a:	89a3      	ldrh	r3, [r4, #12]
 801262c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012630:	81a3      	strh	r3, [r4, #12]
 8012632:	f04f 30ff 	mov.w	r0, #4294967295
 8012636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801263a:	4628      	mov	r0, r5
 801263c:	6a21      	ldr	r1, [r4, #32]
 801263e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012640:	463a      	mov	r2, r7
 8012642:	4643      	mov	r3, r8
 8012644:	47b0      	blx	r6
 8012646:	2800      	cmp	r0, #0
 8012648:	ddef      	ble.n	801262a <__sflush_r+0xda>
 801264a:	4407      	add	r7, r0
 801264c:	ebc0 0808 	rsb	r8, r0, r8
 8012650:	f1b8 0f00 	cmp.w	r8, #0
 8012654:	dcf1      	bgt.n	801263a <__sflush_r+0xea>
 8012656:	e7a1      	b.n	801259c <__sflush_r+0x4c>

08012658 <_fflush_r>:
 8012658:	b538      	push	{r3, r4, r5, lr}
 801265a:	690b      	ldr	r3, [r1, #16]
 801265c:	4605      	mov	r5, r0
 801265e:	460c      	mov	r4, r1
 8012660:	b1db      	cbz	r3, 801269a <_fflush_r+0x42>
 8012662:	b118      	cbz	r0, 801266c <_fflush_r+0x14>
 8012664:	6983      	ldr	r3, [r0, #24]
 8012666:	b90b      	cbnz	r3, 801266c <_fflush_r+0x14>
 8012668:	f000 f860 	bl	801272c <__sinit>
 801266c:	4b0c      	ldr	r3, [pc, #48]	; (80126a0 <_fflush_r+0x48>)
 801266e:	429c      	cmp	r4, r3
 8012670:	d101      	bne.n	8012676 <_fflush_r+0x1e>
 8012672:	686c      	ldr	r4, [r5, #4]
 8012674:	e008      	b.n	8012688 <_fflush_r+0x30>
 8012676:	4b0b      	ldr	r3, [pc, #44]	; (80126a4 <_fflush_r+0x4c>)
 8012678:	429c      	cmp	r4, r3
 801267a:	d101      	bne.n	8012680 <_fflush_r+0x28>
 801267c:	68ac      	ldr	r4, [r5, #8]
 801267e:	e003      	b.n	8012688 <_fflush_r+0x30>
 8012680:	4b09      	ldr	r3, [pc, #36]	; (80126a8 <_fflush_r+0x50>)
 8012682:	429c      	cmp	r4, r3
 8012684:	bf08      	it	eq
 8012686:	68ec      	ldreq	r4, [r5, #12]
 8012688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801268c:	b12b      	cbz	r3, 801269a <_fflush_r+0x42>
 801268e:	4628      	mov	r0, r5
 8012690:	4621      	mov	r1, r4
 8012692:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012696:	f7ff bf5b 	b.w	8012550 <__sflush_r>
 801269a:	2000      	movs	r0, #0
 801269c:	bd38      	pop	{r3, r4, r5, pc}
 801269e:	bf00      	nop
 80126a0:	0801477c 	.word	0x0801477c
 80126a4:	0801479c 	.word	0x0801479c
 80126a8:	080147bc 	.word	0x080147bc

080126ac <_cleanup_r>:
 80126ac:	4901      	ldr	r1, [pc, #4]	; (80126b4 <_cleanup_r+0x8>)
 80126ae:	f000 b8a7 	b.w	8012800 <_fwalk_reent>
 80126b2:	bf00      	nop
 80126b4:	08012659 	.word	0x08012659

080126b8 <std.isra.0>:
 80126b8:	2300      	movs	r3, #0
 80126ba:	b510      	push	{r4, lr}
 80126bc:	4604      	mov	r4, r0
 80126be:	6003      	str	r3, [r0, #0]
 80126c0:	6043      	str	r3, [r0, #4]
 80126c2:	6083      	str	r3, [r0, #8]
 80126c4:	8181      	strh	r1, [r0, #12]
 80126c6:	6643      	str	r3, [r0, #100]	; 0x64
 80126c8:	81c2      	strh	r2, [r0, #14]
 80126ca:	6103      	str	r3, [r0, #16]
 80126cc:	6143      	str	r3, [r0, #20]
 80126ce:	6183      	str	r3, [r0, #24]
 80126d0:	4619      	mov	r1, r3
 80126d2:	305c      	adds	r0, #92	; 0x5c
 80126d4:	2208      	movs	r2, #8
 80126d6:	f7ff f990 	bl	80119fa <memset>
 80126da:	4b05      	ldr	r3, [pc, #20]	; (80126f0 <std.isra.0+0x38>)
 80126dc:	6263      	str	r3, [r4, #36]	; 0x24
 80126de:	4b05      	ldr	r3, [pc, #20]	; (80126f4 <std.isra.0+0x3c>)
 80126e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80126e2:	4b05      	ldr	r3, [pc, #20]	; (80126f8 <std.isra.0+0x40>)
 80126e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80126e6:	4b05      	ldr	r3, [pc, #20]	; (80126fc <std.isra.0+0x44>)
 80126e8:	6224      	str	r4, [r4, #32]
 80126ea:	6323      	str	r3, [r4, #48]	; 0x30
 80126ec:	bd10      	pop	{r4, pc}
 80126ee:	bf00      	nop
 80126f0:	08012ffd 	.word	0x08012ffd
 80126f4:	0801301f 	.word	0x0801301f
 80126f8:	08013057 	.word	0x08013057
 80126fc:	0801307b 	.word	0x0801307b

08012700 <__sfmoreglue>:
 8012700:	b570      	push	{r4, r5, r6, lr}
 8012702:	2368      	movs	r3, #104	; 0x68
 8012704:	1e4d      	subs	r5, r1, #1
 8012706:	435d      	muls	r5, r3
 8012708:	460e      	mov	r6, r1
 801270a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801270e:	f000 f933 	bl	8012978 <_malloc_r>
 8012712:	4604      	mov	r4, r0
 8012714:	b140      	cbz	r0, 8012728 <__sfmoreglue+0x28>
 8012716:	2100      	movs	r1, #0
 8012718:	e880 0042 	stmia.w	r0, {r1, r6}
 801271c:	300c      	adds	r0, #12
 801271e:	60a0      	str	r0, [r4, #8]
 8012720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012724:	f7ff f969 	bl	80119fa <memset>
 8012728:	4620      	mov	r0, r4
 801272a:	bd70      	pop	{r4, r5, r6, pc}

0801272c <__sinit>:
 801272c:	6983      	ldr	r3, [r0, #24]
 801272e:	b510      	push	{r4, lr}
 8012730:	4604      	mov	r4, r0
 8012732:	bb33      	cbnz	r3, 8012782 <__sinit+0x56>
 8012734:	6483      	str	r3, [r0, #72]	; 0x48
 8012736:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012738:	6503      	str	r3, [r0, #80]	; 0x50
 801273a:	4b12      	ldr	r3, [pc, #72]	; (8012784 <__sinit+0x58>)
 801273c:	4a12      	ldr	r2, [pc, #72]	; (8012788 <__sinit+0x5c>)
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	6282      	str	r2, [r0, #40]	; 0x28
 8012742:	4298      	cmp	r0, r3
 8012744:	bf04      	itt	eq
 8012746:	2301      	moveq	r3, #1
 8012748:	6183      	streq	r3, [r0, #24]
 801274a:	f000 f81f 	bl	801278c <__sfp>
 801274e:	6060      	str	r0, [r4, #4]
 8012750:	4620      	mov	r0, r4
 8012752:	f000 f81b 	bl	801278c <__sfp>
 8012756:	60a0      	str	r0, [r4, #8]
 8012758:	4620      	mov	r0, r4
 801275a:	f000 f817 	bl	801278c <__sfp>
 801275e:	2104      	movs	r1, #4
 8012760:	60e0      	str	r0, [r4, #12]
 8012762:	2200      	movs	r2, #0
 8012764:	6860      	ldr	r0, [r4, #4]
 8012766:	f7ff ffa7 	bl	80126b8 <std.isra.0>
 801276a:	68a0      	ldr	r0, [r4, #8]
 801276c:	2109      	movs	r1, #9
 801276e:	2201      	movs	r2, #1
 8012770:	f7ff ffa2 	bl	80126b8 <std.isra.0>
 8012774:	68e0      	ldr	r0, [r4, #12]
 8012776:	2112      	movs	r1, #18
 8012778:	2202      	movs	r2, #2
 801277a:	f7ff ff9d 	bl	80126b8 <std.isra.0>
 801277e:	2301      	movs	r3, #1
 8012780:	61a3      	str	r3, [r4, #24]
 8012782:	bd10      	pop	{r4, pc}
 8012784:	08014614 	.word	0x08014614
 8012788:	080126ad 	.word	0x080126ad

0801278c <__sfp>:
 801278c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801278e:	4b1b      	ldr	r3, [pc, #108]	; (80127fc <__sfp+0x70>)
 8012790:	681e      	ldr	r6, [r3, #0]
 8012792:	69b3      	ldr	r3, [r6, #24]
 8012794:	4607      	mov	r7, r0
 8012796:	b913      	cbnz	r3, 801279e <__sfp+0x12>
 8012798:	4630      	mov	r0, r6
 801279a:	f7ff ffc7 	bl	801272c <__sinit>
 801279e:	3648      	adds	r6, #72	; 0x48
 80127a0:	68b4      	ldr	r4, [r6, #8]
 80127a2:	6873      	ldr	r3, [r6, #4]
 80127a4:	3b01      	subs	r3, #1
 80127a6:	d404      	bmi.n	80127b2 <__sfp+0x26>
 80127a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80127ac:	b175      	cbz	r5, 80127cc <__sfp+0x40>
 80127ae:	3468      	adds	r4, #104	; 0x68
 80127b0:	e7f8      	b.n	80127a4 <__sfp+0x18>
 80127b2:	6833      	ldr	r3, [r6, #0]
 80127b4:	b92b      	cbnz	r3, 80127c2 <__sfp+0x36>
 80127b6:	4638      	mov	r0, r7
 80127b8:	2104      	movs	r1, #4
 80127ba:	f7ff ffa1 	bl	8012700 <__sfmoreglue>
 80127be:	6030      	str	r0, [r6, #0]
 80127c0:	b108      	cbz	r0, 80127c6 <__sfp+0x3a>
 80127c2:	6836      	ldr	r6, [r6, #0]
 80127c4:	e7ec      	b.n	80127a0 <__sfp+0x14>
 80127c6:	230c      	movs	r3, #12
 80127c8:	603b      	str	r3, [r7, #0]
 80127ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80127d0:	81e3      	strh	r3, [r4, #14]
 80127d2:	2301      	movs	r3, #1
 80127d4:	81a3      	strh	r3, [r4, #12]
 80127d6:	6665      	str	r5, [r4, #100]	; 0x64
 80127d8:	6025      	str	r5, [r4, #0]
 80127da:	60a5      	str	r5, [r4, #8]
 80127dc:	6065      	str	r5, [r4, #4]
 80127de:	6125      	str	r5, [r4, #16]
 80127e0:	6165      	str	r5, [r4, #20]
 80127e2:	61a5      	str	r5, [r4, #24]
 80127e4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80127e8:	4629      	mov	r1, r5
 80127ea:	2208      	movs	r2, #8
 80127ec:	f7ff f905 	bl	80119fa <memset>
 80127f0:	6365      	str	r5, [r4, #52]	; 0x34
 80127f2:	63a5      	str	r5, [r4, #56]	; 0x38
 80127f4:	64a5      	str	r5, [r4, #72]	; 0x48
 80127f6:	64e5      	str	r5, [r4, #76]	; 0x4c
 80127f8:	4620      	mov	r0, r4
 80127fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80127fc:	08014614 	.word	0x08014614

08012800 <_fwalk_reent>:
 8012800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012804:	4680      	mov	r8, r0
 8012806:	4689      	mov	r9, r1
 8012808:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801280c:	2600      	movs	r6, #0
 801280e:	b194      	cbz	r4, 8012836 <_fwalk_reent+0x36>
 8012810:	68a5      	ldr	r5, [r4, #8]
 8012812:	6867      	ldr	r7, [r4, #4]
 8012814:	3f01      	subs	r7, #1
 8012816:	d40c      	bmi.n	8012832 <_fwalk_reent+0x32>
 8012818:	89ab      	ldrh	r3, [r5, #12]
 801281a:	2b01      	cmp	r3, #1
 801281c:	d907      	bls.n	801282e <_fwalk_reent+0x2e>
 801281e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012822:	3301      	adds	r3, #1
 8012824:	d003      	beq.n	801282e <_fwalk_reent+0x2e>
 8012826:	4640      	mov	r0, r8
 8012828:	4629      	mov	r1, r5
 801282a:	47c8      	blx	r9
 801282c:	4306      	orrs	r6, r0
 801282e:	3568      	adds	r5, #104	; 0x68
 8012830:	e7f0      	b.n	8012814 <_fwalk_reent+0x14>
 8012832:	6824      	ldr	r4, [r4, #0]
 8012834:	e7eb      	b.n	801280e <_fwalk_reent+0xe>
 8012836:	4630      	mov	r0, r6
 8012838:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0801283c <__gettzinfo>:
 801283c:	4800      	ldr	r0, [pc, #0]	; (8012840 <__gettzinfo+0x4>)
 801283e:	4770      	bx	lr
 8012840:	1fff4338 	.word	0x1fff4338

08012844 <__smakebuf_r>:
 8012844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012846:	898b      	ldrh	r3, [r1, #12]
 8012848:	079d      	lsls	r5, r3, #30
 801284a:	b091      	sub	sp, #68	; 0x44
 801284c:	4606      	mov	r6, r0
 801284e:	460c      	mov	r4, r1
 8012850:	d426      	bmi.n	80128a0 <__smakebuf_r+0x5c>
 8012852:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012856:	2900      	cmp	r1, #0
 8012858:	da09      	bge.n	801286e <__smakebuf_r+0x2a>
 801285a:	89a3      	ldrh	r3, [r4, #12]
 801285c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012860:	f04f 0500 	mov.w	r5, #0
 8012864:	bf14      	ite	ne
 8012866:	2740      	movne	r7, #64	; 0x40
 8012868:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 801286c:	e00d      	b.n	801288a <__smakebuf_r+0x46>
 801286e:	aa01      	add	r2, sp, #4
 8012870:	f000 fc2a 	bl	80130c8 <_fstat_r>
 8012874:	2800      	cmp	r0, #0
 8012876:	dbf0      	blt.n	801285a <__smakebuf_r+0x16>
 8012878:	9d02      	ldr	r5, [sp, #8]
 801287a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 801287e:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8012882:	424d      	negs	r5, r1
 8012884:	414d      	adcs	r5, r1
 8012886:	f44f 6780 	mov.w	r7, #1024	; 0x400
 801288a:	4630      	mov	r0, r6
 801288c:	4639      	mov	r1, r7
 801288e:	f000 f873 	bl	8012978 <_malloc_r>
 8012892:	b960      	cbnz	r0, 80128ae <__smakebuf_r+0x6a>
 8012894:	89a3      	ldrh	r3, [r4, #12]
 8012896:	059a      	lsls	r2, r3, #22
 8012898:	d41d      	bmi.n	80128d6 <__smakebuf_r+0x92>
 801289a:	f043 0302 	orr.w	r3, r3, #2
 801289e:	81a3      	strh	r3, [r4, #12]
 80128a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80128a4:	6023      	str	r3, [r4, #0]
 80128a6:	6123      	str	r3, [r4, #16]
 80128a8:	2301      	movs	r3, #1
 80128aa:	6163      	str	r3, [r4, #20]
 80128ac:	e013      	b.n	80128d6 <__smakebuf_r+0x92>
 80128ae:	4b0b      	ldr	r3, [pc, #44]	; (80128dc <__smakebuf_r+0x98>)
 80128b0:	62b3      	str	r3, [r6, #40]	; 0x28
 80128b2:	89a3      	ldrh	r3, [r4, #12]
 80128b4:	6020      	str	r0, [r4, #0]
 80128b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128ba:	81a3      	strh	r3, [r4, #12]
 80128bc:	6120      	str	r0, [r4, #16]
 80128be:	6167      	str	r7, [r4, #20]
 80128c0:	b14d      	cbz	r5, 80128d6 <__smakebuf_r+0x92>
 80128c2:	4630      	mov	r0, r6
 80128c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80128c8:	f000 fc10 	bl	80130ec <_isatty_r>
 80128cc:	b118      	cbz	r0, 80128d6 <__smakebuf_r+0x92>
 80128ce:	89a3      	ldrh	r3, [r4, #12]
 80128d0:	f043 0301 	orr.w	r3, r3, #1
 80128d4:	81a3      	strh	r3, [r4, #12]
 80128d6:	b011      	add	sp, #68	; 0x44
 80128d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128da:	bf00      	nop
 80128dc:	080126ad 	.word	0x080126ad

080128e0 <malloc>:
 80128e0:	4b02      	ldr	r3, [pc, #8]	; (80128ec <malloc+0xc>)
 80128e2:	4601      	mov	r1, r0
 80128e4:	6818      	ldr	r0, [r3, #0]
 80128e6:	f000 b847 	b.w	8012978 <_malloc_r>
 80128ea:	bf00      	nop
 80128ec:	1fff4330 	.word	0x1fff4330

080128f0 <_free_r>:
 80128f0:	b530      	push	{r4, r5, lr}
 80128f2:	2900      	cmp	r1, #0
 80128f4:	d03d      	beq.n	8012972 <_free_r+0x82>
 80128f6:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80128fa:	1f0b      	subs	r3, r1, #4
 80128fc:	491d      	ldr	r1, [pc, #116]	; (8012974 <_free_r+0x84>)
 80128fe:	2a00      	cmp	r2, #0
 8012900:	bfb8      	it	lt
 8012902:	189b      	addlt	r3, r3, r2
 8012904:	680a      	ldr	r2, [r1, #0]
 8012906:	460c      	mov	r4, r1
 8012908:	b912      	cbnz	r2, 8012910 <_free_r+0x20>
 801290a:	605a      	str	r2, [r3, #4]
 801290c:	600b      	str	r3, [r1, #0]
 801290e:	bd30      	pop	{r4, r5, pc}
 8012910:	4293      	cmp	r3, r2
 8012912:	d20d      	bcs.n	8012930 <_free_r+0x40>
 8012914:	6819      	ldr	r1, [r3, #0]
 8012916:	1858      	adds	r0, r3, r1
 8012918:	4290      	cmp	r0, r2
 801291a:	bf01      	itttt	eq
 801291c:	585a      	ldreq	r2, [r3, r1]
 801291e:	1852      	addeq	r2, r2, r1
 8012920:	601a      	streq	r2, [r3, #0]
 8012922:	6842      	ldreq	r2, [r0, #4]
 8012924:	605a      	str	r2, [r3, #4]
 8012926:	6023      	str	r3, [r4, #0]
 8012928:	bd30      	pop	{r4, r5, pc}
 801292a:	4299      	cmp	r1, r3
 801292c:	d803      	bhi.n	8012936 <_free_r+0x46>
 801292e:	460a      	mov	r2, r1
 8012930:	6851      	ldr	r1, [r2, #4]
 8012932:	2900      	cmp	r1, #0
 8012934:	d1f9      	bne.n	801292a <_free_r+0x3a>
 8012936:	6814      	ldr	r4, [r2, #0]
 8012938:	1915      	adds	r5, r2, r4
 801293a:	429d      	cmp	r5, r3
 801293c:	d10a      	bne.n	8012954 <_free_r+0x64>
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4423      	add	r3, r4
 8012942:	18d0      	adds	r0, r2, r3
 8012944:	4288      	cmp	r0, r1
 8012946:	6013      	str	r3, [r2, #0]
 8012948:	d113      	bne.n	8012972 <_free_r+0x82>
 801294a:	6808      	ldr	r0, [r1, #0]
 801294c:	4403      	add	r3, r0
 801294e:	6013      	str	r3, [r2, #0]
 8012950:	684b      	ldr	r3, [r1, #4]
 8012952:	e00d      	b.n	8012970 <_free_r+0x80>
 8012954:	d902      	bls.n	801295c <_free_r+0x6c>
 8012956:	230c      	movs	r3, #12
 8012958:	6003      	str	r3, [r0, #0]
 801295a:	bd30      	pop	{r4, r5, pc}
 801295c:	681c      	ldr	r4, [r3, #0]
 801295e:	1918      	adds	r0, r3, r4
 8012960:	4288      	cmp	r0, r1
 8012962:	bf04      	itt	eq
 8012964:	6808      	ldreq	r0, [r1, #0]
 8012966:	6849      	ldreq	r1, [r1, #4]
 8012968:	6059      	str	r1, [r3, #4]
 801296a:	bf04      	itt	eq
 801296c:	1900      	addeq	r0, r0, r4
 801296e:	6018      	streq	r0, [r3, #0]
 8012970:	6053      	str	r3, [r2, #4]
 8012972:	bd30      	pop	{r4, r5, pc}
 8012974:	1fff47a0 	.word	0x1fff47a0

08012978 <_malloc_r>:
 8012978:	b570      	push	{r4, r5, r6, lr}
 801297a:	1ccc      	adds	r4, r1, #3
 801297c:	f024 0403 	bic.w	r4, r4, #3
 8012980:	3408      	adds	r4, #8
 8012982:	2c0c      	cmp	r4, #12
 8012984:	bf38      	it	cc
 8012986:	240c      	movcc	r4, #12
 8012988:	2c00      	cmp	r4, #0
 801298a:	4606      	mov	r6, r0
 801298c:	da03      	bge.n	8012996 <_malloc_r+0x1e>
 801298e:	230c      	movs	r3, #12
 8012990:	6033      	str	r3, [r6, #0]
 8012992:	2000      	movs	r0, #0
 8012994:	bd70      	pop	{r4, r5, r6, pc}
 8012996:	428c      	cmp	r4, r1
 8012998:	d3f9      	bcc.n	801298e <_malloc_r+0x16>
 801299a:	4a20      	ldr	r2, [pc, #128]	; (8012a1c <_malloc_r+0xa4>)
 801299c:	6813      	ldr	r3, [r2, #0]
 801299e:	4610      	mov	r0, r2
 80129a0:	4619      	mov	r1, r3
 80129a2:	b1a1      	cbz	r1, 80129ce <_malloc_r+0x56>
 80129a4:	680a      	ldr	r2, [r1, #0]
 80129a6:	1b12      	subs	r2, r2, r4
 80129a8:	d40e      	bmi.n	80129c8 <_malloc_r+0x50>
 80129aa:	2a0b      	cmp	r2, #11
 80129ac:	d903      	bls.n	80129b6 <_malloc_r+0x3e>
 80129ae:	600a      	str	r2, [r1, #0]
 80129b0:	188b      	adds	r3, r1, r2
 80129b2:	508c      	str	r4, [r1, r2]
 80129b4:	e01f      	b.n	80129f6 <_malloc_r+0x7e>
 80129b6:	428b      	cmp	r3, r1
 80129b8:	bf0d      	iteet	eq
 80129ba:	685a      	ldreq	r2, [r3, #4]
 80129bc:	684a      	ldrne	r2, [r1, #4]
 80129be:	605a      	strne	r2, [r3, #4]
 80129c0:	6002      	streq	r2, [r0, #0]
 80129c2:	bf18      	it	ne
 80129c4:	460b      	movne	r3, r1
 80129c6:	e016      	b.n	80129f6 <_malloc_r+0x7e>
 80129c8:	460b      	mov	r3, r1
 80129ca:	6849      	ldr	r1, [r1, #4]
 80129cc:	e7e9      	b.n	80129a2 <_malloc_r+0x2a>
 80129ce:	4d14      	ldr	r5, [pc, #80]	; (8012a20 <_malloc_r+0xa8>)
 80129d0:	682b      	ldr	r3, [r5, #0]
 80129d2:	b91b      	cbnz	r3, 80129dc <_malloc_r+0x64>
 80129d4:	4630      	mov	r0, r6
 80129d6:	f000 fb01 	bl	8012fdc <_sbrk_r>
 80129da:	6028      	str	r0, [r5, #0]
 80129dc:	4630      	mov	r0, r6
 80129de:	4621      	mov	r1, r4
 80129e0:	f000 fafc 	bl	8012fdc <_sbrk_r>
 80129e4:	1c42      	adds	r2, r0, #1
 80129e6:	4603      	mov	r3, r0
 80129e8:	d0d1      	beq.n	801298e <_malloc_r+0x16>
 80129ea:	1cc5      	adds	r5, r0, #3
 80129ec:	f025 0503 	bic.w	r5, r5, #3
 80129f0:	4285      	cmp	r5, r0
 80129f2:	d10a      	bne.n	8012a0a <_malloc_r+0x92>
 80129f4:	601c      	str	r4, [r3, #0]
 80129f6:	f103 000b 	add.w	r0, r3, #11
 80129fa:	1d1a      	adds	r2, r3, #4
 80129fc:	f020 0007 	bic.w	r0, r0, #7
 8012a00:	1a82      	subs	r2, r0, r2
 8012a02:	d00a      	beq.n	8012a1a <_malloc_r+0xa2>
 8012a04:	4251      	negs	r1, r2
 8012a06:	5099      	str	r1, [r3, r2]
 8012a08:	bd70      	pop	{r4, r5, r6, pc}
 8012a0a:	4630      	mov	r0, r6
 8012a0c:	1ae9      	subs	r1, r5, r3
 8012a0e:	f000 fae5 	bl	8012fdc <_sbrk_r>
 8012a12:	3001      	adds	r0, #1
 8012a14:	d0bb      	beq.n	801298e <_malloc_r+0x16>
 8012a16:	462b      	mov	r3, r5
 8012a18:	e7ec      	b.n	80129f4 <_malloc_r+0x7c>
 8012a1a:	bd70      	pop	{r4, r5, r6, pc}
 8012a1c:	1fff47a0 	.word	0x1fff47a0
 8012a20:	1fff479c 	.word	0x1fff479c

08012a24 <__ssputs_r>:
 8012a24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012a28:	688e      	ldr	r6, [r1, #8]
 8012a2a:	42b3      	cmp	r3, r6
 8012a2c:	4682      	mov	sl, r0
 8012a2e:	460c      	mov	r4, r1
 8012a30:	4690      	mov	r8, r2
 8012a32:	4699      	mov	r9, r3
 8012a34:	d340      	bcc.n	8012ab8 <__ssputs_r+0x94>
 8012a36:	898a      	ldrh	r2, [r1, #12]
 8012a38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012a3c:	d03a      	beq.n	8012ab4 <__ssputs_r+0x90>
 8012a3e:	6825      	ldr	r5, [r4, #0]
 8012a40:	6909      	ldr	r1, [r1, #16]
 8012a42:	1a6f      	subs	r7, r5, r1
 8012a44:	6965      	ldr	r5, [r4, #20]
 8012a46:	2302      	movs	r3, #2
 8012a48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012a4c:	fb95 f5f3 	sdiv	r5, r5, r3
 8012a50:	1c7b      	adds	r3, r7, #1
 8012a52:	444b      	add	r3, r9
 8012a54:	429d      	cmp	r5, r3
 8012a56:	bf38      	it	cc
 8012a58:	461d      	movcc	r5, r3
 8012a5a:	0553      	lsls	r3, r2, #21
 8012a5c:	d50f      	bpl.n	8012a7e <__ssputs_r+0x5a>
 8012a5e:	4629      	mov	r1, r5
 8012a60:	f7ff ff8a 	bl	8012978 <_malloc_r>
 8012a64:	4606      	mov	r6, r0
 8012a66:	b198      	cbz	r0, 8012a90 <__ssputs_r+0x6c>
 8012a68:	6921      	ldr	r1, [r4, #16]
 8012a6a:	463a      	mov	r2, r7
 8012a6c:	f7fe ffba 	bl	80119e4 <memcpy>
 8012a70:	89a3      	ldrh	r3, [r4, #12]
 8012a72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012a76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012a7a:	81a3      	strh	r3, [r4, #12]
 8012a7c:	e013      	b.n	8012aa6 <__ssputs_r+0x82>
 8012a7e:	462a      	mov	r2, r5
 8012a80:	f000 fb80 	bl	8013184 <_realloc_r>
 8012a84:	4606      	mov	r6, r0
 8012a86:	b970      	cbnz	r0, 8012aa6 <__ssputs_r+0x82>
 8012a88:	4650      	mov	r0, sl
 8012a8a:	6921      	ldr	r1, [r4, #16]
 8012a8c:	f7ff ff30 	bl	80128f0 <_free_r>
 8012a90:	230c      	movs	r3, #12
 8012a92:	f8ca 3000 	str.w	r3, [sl]
 8012a96:	89a3      	ldrh	r3, [r4, #12]
 8012a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a9c:	81a3      	strh	r3, [r4, #12]
 8012a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012aa6:	6126      	str	r6, [r4, #16]
 8012aa8:	6165      	str	r5, [r4, #20]
 8012aaa:	443e      	add	r6, r7
 8012aac:	1bed      	subs	r5, r5, r7
 8012aae:	6026      	str	r6, [r4, #0]
 8012ab0:	60a5      	str	r5, [r4, #8]
 8012ab2:	464e      	mov	r6, r9
 8012ab4:	45b1      	cmp	r9, r6
 8012ab6:	d200      	bcs.n	8012aba <__ssputs_r+0x96>
 8012ab8:	464e      	mov	r6, r9
 8012aba:	4632      	mov	r2, r6
 8012abc:	6820      	ldr	r0, [r4, #0]
 8012abe:	4641      	mov	r1, r8
 8012ac0:	f000 fb45 	bl	801314e <memmove>
 8012ac4:	68a3      	ldr	r3, [r4, #8]
 8012ac6:	1b9b      	subs	r3, r3, r6
 8012ac8:	60a3      	str	r3, [r4, #8]
 8012aca:	6823      	ldr	r3, [r4, #0]
 8012acc:	441e      	add	r6, r3
 8012ace:	6026      	str	r6, [r4, #0]
 8012ad0:	2000      	movs	r0, #0
 8012ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012ad8 <_svfiprintf_r>:
 8012ad8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012adc:	b09d      	sub	sp, #116	; 0x74
 8012ade:	4606      	mov	r6, r0
 8012ae0:	9303      	str	r3, [sp, #12]
 8012ae2:	898b      	ldrh	r3, [r1, #12]
 8012ae4:	061c      	lsls	r4, r3, #24
 8012ae6:	460d      	mov	r5, r1
 8012ae8:	4690      	mov	r8, r2
 8012aea:	d50c      	bpl.n	8012b06 <_svfiprintf_r+0x2e>
 8012aec:	690b      	ldr	r3, [r1, #16]
 8012aee:	b953      	cbnz	r3, 8012b06 <_svfiprintf_r+0x2e>
 8012af0:	2140      	movs	r1, #64	; 0x40
 8012af2:	f7ff ff41 	bl	8012978 <_malloc_r>
 8012af6:	6028      	str	r0, [r5, #0]
 8012af8:	6128      	str	r0, [r5, #16]
 8012afa:	b910      	cbnz	r0, 8012b02 <_svfiprintf_r+0x2a>
 8012afc:	230c      	movs	r3, #12
 8012afe:	6033      	str	r3, [r6, #0]
 8012b00:	e0cc      	b.n	8012c9c <_svfiprintf_r+0x1c4>
 8012b02:	2340      	movs	r3, #64	; 0x40
 8012b04:	616b      	str	r3, [r5, #20]
 8012b06:	2300      	movs	r3, #0
 8012b08:	9309      	str	r3, [sp, #36]	; 0x24
 8012b0a:	2320      	movs	r3, #32
 8012b0c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012b10:	2330      	movs	r3, #48	; 0x30
 8012b12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012b16:	4643      	mov	r3, r8
 8012b18:	461c      	mov	r4, r3
 8012b1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012b1e:	b91a      	cbnz	r2, 8012b28 <_svfiprintf_r+0x50>
 8012b20:	ebb4 0908 	subs.w	r9, r4, r8
 8012b24:	d00f      	beq.n	8012b46 <_svfiprintf_r+0x6e>
 8012b26:	e002      	b.n	8012b2e <_svfiprintf_r+0x56>
 8012b28:	2a25      	cmp	r2, #37	; 0x25
 8012b2a:	d1f5      	bne.n	8012b18 <_svfiprintf_r+0x40>
 8012b2c:	e7f8      	b.n	8012b20 <_svfiprintf_r+0x48>
 8012b2e:	4630      	mov	r0, r6
 8012b30:	4629      	mov	r1, r5
 8012b32:	4642      	mov	r2, r8
 8012b34:	464b      	mov	r3, r9
 8012b36:	f7ff ff75 	bl	8012a24 <__ssputs_r>
 8012b3a:	3001      	adds	r0, #1
 8012b3c:	f000 80a9 	beq.w	8012c92 <_svfiprintf_r+0x1ba>
 8012b40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b42:	444b      	add	r3, r9
 8012b44:	9309      	str	r3, [sp, #36]	; 0x24
 8012b46:	7823      	ldrb	r3, [r4, #0]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	f000 80a2 	beq.w	8012c92 <_svfiprintf_r+0x1ba>
 8012b4e:	2300      	movs	r3, #0
 8012b50:	f04f 32ff 	mov.w	r2, #4294967295
 8012b54:	9304      	str	r3, [sp, #16]
 8012b56:	9307      	str	r3, [sp, #28]
 8012b58:	9205      	str	r2, [sp, #20]
 8012b5a:	9306      	str	r3, [sp, #24]
 8012b5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012b60:	931a      	str	r3, [sp, #104]	; 0x68
 8012b62:	f104 0801 	add.w	r8, r4, #1
 8012b66:	4644      	mov	r4, r8
 8012b68:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012cb4 <_svfiprintf_r+0x1dc>
 8012b6c:	7821      	ldrb	r1, [r4, #0]
 8012b6e:	4648      	mov	r0, r9
 8012b70:	2205      	movs	r2, #5
 8012b72:	f000 fadd 	bl	8013130 <memchr>
 8012b76:	f108 0801 	add.w	r8, r8, #1
 8012b7a:	9b04      	ldr	r3, [sp, #16]
 8012b7c:	b130      	cbz	r0, 8012b8c <_svfiprintf_r+0xb4>
 8012b7e:	ebc9 0000 	rsb	r0, r9, r0
 8012b82:	2201      	movs	r2, #1
 8012b84:	4082      	lsls	r2, r0
 8012b86:	4313      	orrs	r3, r2
 8012b88:	9304      	str	r3, [sp, #16]
 8012b8a:	e7ec      	b.n	8012b66 <_svfiprintf_r+0x8e>
 8012b8c:	06d8      	lsls	r0, r3, #27
 8012b8e:	bf44      	itt	mi
 8012b90:	2220      	movmi	r2, #32
 8012b92:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012b96:	0719      	lsls	r1, r3, #28
 8012b98:	bf44      	itt	mi
 8012b9a:	222b      	movmi	r2, #43	; 0x2b
 8012b9c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012ba0:	7822      	ldrb	r2, [r4, #0]
 8012ba2:	2a2a      	cmp	r2, #42	; 0x2a
 8012ba4:	d002      	beq.n	8012bac <_svfiprintf_r+0xd4>
 8012ba6:	9907      	ldr	r1, [sp, #28]
 8012ba8:	4623      	mov	r3, r4
 8012baa:	e00e      	b.n	8012bca <_svfiprintf_r+0xf2>
 8012bac:	9a03      	ldr	r2, [sp, #12]
 8012bae:	1d11      	adds	r1, r2, #4
 8012bb0:	6812      	ldr	r2, [r2, #0]
 8012bb2:	9103      	str	r1, [sp, #12]
 8012bb4:	2a00      	cmp	r2, #0
 8012bb6:	bfbb      	ittet	lt
 8012bb8:	4252      	neglt	r2, r2
 8012bba:	f043 0302 	orrlt.w	r3, r3, #2
 8012bbe:	9207      	strge	r2, [sp, #28]
 8012bc0:	9207      	strlt	r2, [sp, #28]
 8012bc2:	bfb8      	it	lt
 8012bc4:	9304      	strlt	r3, [sp, #16]
 8012bc6:	3401      	adds	r4, #1
 8012bc8:	e00a      	b.n	8012be0 <_svfiprintf_r+0x108>
 8012bca:	461c      	mov	r4, r3
 8012bcc:	3301      	adds	r3, #1
 8012bce:	7822      	ldrb	r2, [r4, #0]
 8012bd0:	3a30      	subs	r2, #48	; 0x30
 8012bd2:	2a09      	cmp	r2, #9
 8012bd4:	d803      	bhi.n	8012bde <_svfiprintf_r+0x106>
 8012bd6:	200a      	movs	r0, #10
 8012bd8:	fb00 2101 	mla	r1, r0, r1, r2
 8012bdc:	e7f5      	b.n	8012bca <_svfiprintf_r+0xf2>
 8012bde:	9107      	str	r1, [sp, #28]
 8012be0:	7823      	ldrb	r3, [r4, #0]
 8012be2:	2b2e      	cmp	r3, #46	; 0x2e
 8012be4:	d11a      	bne.n	8012c1c <_svfiprintf_r+0x144>
 8012be6:	7863      	ldrb	r3, [r4, #1]
 8012be8:	2b2a      	cmp	r3, #42	; 0x2a
 8012bea:	d10a      	bne.n	8012c02 <_svfiprintf_r+0x12a>
 8012bec:	9b03      	ldr	r3, [sp, #12]
 8012bee:	1d1a      	adds	r2, r3, #4
 8012bf0:	681b      	ldr	r3, [r3, #0]
 8012bf2:	9203      	str	r2, [sp, #12]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	bfb8      	it	lt
 8012bf8:	f04f 33ff 	movlt.w	r3, #4294967295
 8012bfc:	3402      	adds	r4, #2
 8012bfe:	9305      	str	r3, [sp, #20]
 8012c00:	e00c      	b.n	8012c1c <_svfiprintf_r+0x144>
 8012c02:	1c61      	adds	r1, r4, #1
 8012c04:	2200      	movs	r2, #0
 8012c06:	460c      	mov	r4, r1
 8012c08:	3101      	adds	r1, #1
 8012c0a:	7823      	ldrb	r3, [r4, #0]
 8012c0c:	3b30      	subs	r3, #48	; 0x30
 8012c0e:	2b09      	cmp	r3, #9
 8012c10:	d803      	bhi.n	8012c1a <_svfiprintf_r+0x142>
 8012c12:	200a      	movs	r0, #10
 8012c14:	fb00 3202 	mla	r2, r0, r2, r3
 8012c18:	e7f5      	b.n	8012c06 <_svfiprintf_r+0x12e>
 8012c1a:	9205      	str	r2, [sp, #20]
 8012c1c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012cb8 <_svfiprintf_r+0x1e0>
 8012c20:	7821      	ldrb	r1, [r4, #0]
 8012c22:	4640      	mov	r0, r8
 8012c24:	2203      	movs	r2, #3
 8012c26:	f000 fa83 	bl	8013130 <memchr>
 8012c2a:	b138      	cbz	r0, 8012c3c <_svfiprintf_r+0x164>
 8012c2c:	9a04      	ldr	r2, [sp, #16]
 8012c2e:	ebc8 0000 	rsb	r0, r8, r0
 8012c32:	2340      	movs	r3, #64	; 0x40
 8012c34:	4083      	lsls	r3, r0
 8012c36:	4313      	orrs	r3, r2
 8012c38:	9304      	str	r3, [sp, #16]
 8012c3a:	3401      	adds	r4, #1
 8012c3c:	7821      	ldrb	r1, [r4, #0]
 8012c3e:	481a      	ldr	r0, [pc, #104]	; (8012ca8 <_svfiprintf_r+0x1d0>)
 8012c40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012c44:	2206      	movs	r2, #6
 8012c46:	f104 0801 	add.w	r8, r4, #1
 8012c4a:	f000 fa71 	bl	8013130 <memchr>
 8012c4e:	b188      	cbz	r0, 8012c74 <_svfiprintf_r+0x19c>
 8012c50:	4b16      	ldr	r3, [pc, #88]	; (8012cac <_svfiprintf_r+0x1d4>)
 8012c52:	b933      	cbnz	r3, 8012c62 <_svfiprintf_r+0x18a>
 8012c54:	9b03      	ldr	r3, [sp, #12]
 8012c56:	3307      	adds	r3, #7
 8012c58:	f023 0307 	bic.w	r3, r3, #7
 8012c5c:	3308      	adds	r3, #8
 8012c5e:	9303      	str	r3, [sp, #12]
 8012c60:	e013      	b.n	8012c8a <_svfiprintf_r+0x1b2>
 8012c62:	ab03      	add	r3, sp, #12
 8012c64:	9300      	str	r3, [sp, #0]
 8012c66:	4630      	mov	r0, r6
 8012c68:	a904      	add	r1, sp, #16
 8012c6a:	462a      	mov	r2, r5
 8012c6c:	4b10      	ldr	r3, [pc, #64]	; (8012cb0 <_svfiprintf_r+0x1d8>)
 8012c6e:	f3af 8000 	nop.w
 8012c72:	e007      	b.n	8012c84 <_svfiprintf_r+0x1ac>
 8012c74:	ab03      	add	r3, sp, #12
 8012c76:	9300      	str	r3, [sp, #0]
 8012c78:	4630      	mov	r0, r6
 8012c7a:	a904      	add	r1, sp, #16
 8012c7c:	462a      	mov	r2, r5
 8012c7e:	4b0c      	ldr	r3, [pc, #48]	; (8012cb0 <_svfiprintf_r+0x1d8>)
 8012c80:	f000 f892 	bl	8012da8 <_printf_i>
 8012c84:	1c42      	adds	r2, r0, #1
 8012c86:	4607      	mov	r7, r0
 8012c88:	d003      	beq.n	8012c92 <_svfiprintf_r+0x1ba>
 8012c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c8c:	443b      	add	r3, r7
 8012c8e:	9309      	str	r3, [sp, #36]	; 0x24
 8012c90:	e741      	b.n	8012b16 <_svfiprintf_r+0x3e>
 8012c92:	89ab      	ldrh	r3, [r5, #12]
 8012c94:	065b      	lsls	r3, r3, #25
 8012c96:	d401      	bmi.n	8012c9c <_svfiprintf_r+0x1c4>
 8012c98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012c9a:	e001      	b.n	8012ca0 <_svfiprintf_r+0x1c8>
 8012c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8012ca0:	b01d      	add	sp, #116	; 0x74
 8012ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ca6:	bf00      	nop
 8012ca8:	08014846 	.word	0x08014846
 8012cac:	00000000 	.word	0x00000000
 8012cb0:	08012a25 	.word	0x08012a25
 8012cb4:	0801483c 	.word	0x0801483c
 8012cb8:	08014842 	.word	0x08014842

08012cbc <_printf_common>:
 8012cbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012cc0:	4691      	mov	r9, r2
 8012cc2:	461f      	mov	r7, r3
 8012cc4:	688a      	ldr	r2, [r1, #8]
 8012cc6:	690b      	ldr	r3, [r1, #16]
 8012cc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ccc:	4293      	cmp	r3, r2
 8012cce:	bfb8      	it	lt
 8012cd0:	4613      	movlt	r3, r2
 8012cd2:	f8c9 3000 	str.w	r3, [r9]
 8012cd6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012cda:	4606      	mov	r6, r0
 8012cdc:	460c      	mov	r4, r1
 8012cde:	b112      	cbz	r2, 8012ce6 <_printf_common+0x2a>
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	f8c9 3000 	str.w	r3, [r9]
 8012ce6:	6823      	ldr	r3, [r4, #0]
 8012ce8:	0699      	lsls	r1, r3, #26
 8012cea:	bf42      	ittt	mi
 8012cec:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012cf0:	3302      	addmi	r3, #2
 8012cf2:	f8c9 3000 	strmi.w	r3, [r9]
 8012cf6:	6825      	ldr	r5, [r4, #0]
 8012cf8:	f015 0506 	ands.w	r5, r5, #6
 8012cfc:	d01c      	beq.n	8012d38 <_printf_common+0x7c>
 8012cfe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012d02:	6822      	ldr	r2, [r4, #0]
 8012d04:	3300      	adds	r3, #0
 8012d06:	bf18      	it	ne
 8012d08:	2301      	movne	r3, #1
 8012d0a:	0692      	lsls	r2, r2, #26
 8012d0c:	d51f      	bpl.n	8012d4e <_printf_common+0x92>
 8012d0e:	18e1      	adds	r1, r4, r3
 8012d10:	1c5a      	adds	r2, r3, #1
 8012d12:	2030      	movs	r0, #48	; 0x30
 8012d14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012d18:	4422      	add	r2, r4
 8012d1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012d1e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012d22:	3302      	adds	r3, #2
 8012d24:	e013      	b.n	8012d4e <_printf_common+0x92>
 8012d26:	4630      	mov	r0, r6
 8012d28:	4639      	mov	r1, r7
 8012d2a:	f104 0219 	add.w	r2, r4, #25
 8012d2e:	2301      	movs	r3, #1
 8012d30:	47c0      	blx	r8
 8012d32:	3001      	adds	r0, #1
 8012d34:	d007      	beq.n	8012d46 <_printf_common+0x8a>
 8012d36:	3501      	adds	r5, #1
 8012d38:	68e3      	ldr	r3, [r4, #12]
 8012d3a:	f8d9 2000 	ldr.w	r2, [r9]
 8012d3e:	1a9b      	subs	r3, r3, r2
 8012d40:	429d      	cmp	r5, r3
 8012d42:	dbf0      	blt.n	8012d26 <_printf_common+0x6a>
 8012d44:	e7db      	b.n	8012cfe <_printf_common+0x42>
 8012d46:	f04f 30ff 	mov.w	r0, #4294967295
 8012d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012d4e:	4630      	mov	r0, r6
 8012d50:	4639      	mov	r1, r7
 8012d52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012d56:	47c0      	blx	r8
 8012d58:	3001      	adds	r0, #1
 8012d5a:	d0f4      	beq.n	8012d46 <_printf_common+0x8a>
 8012d5c:	6822      	ldr	r2, [r4, #0]
 8012d5e:	f8d9 5000 	ldr.w	r5, [r9]
 8012d62:	68e3      	ldr	r3, [r4, #12]
 8012d64:	f002 0206 	and.w	r2, r2, #6
 8012d68:	2a04      	cmp	r2, #4
 8012d6a:	bf08      	it	eq
 8012d6c:	1b5d      	subeq	r5, r3, r5
 8012d6e:	6922      	ldr	r2, [r4, #16]
 8012d70:	68a3      	ldr	r3, [r4, #8]
 8012d72:	bf0c      	ite	eq
 8012d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012d78:	2500      	movne	r5, #0
 8012d7a:	4293      	cmp	r3, r2
 8012d7c:	bfc4      	itt	gt
 8012d7e:	1a9b      	subgt	r3, r3, r2
 8012d80:	18ed      	addgt	r5, r5, r3
 8012d82:	f04f 0900 	mov.w	r9, #0
 8012d86:	45a9      	cmp	r9, r5
 8012d88:	da0a      	bge.n	8012da0 <_printf_common+0xe4>
 8012d8a:	4630      	mov	r0, r6
 8012d8c:	4639      	mov	r1, r7
 8012d8e:	f104 021a 	add.w	r2, r4, #26
 8012d92:	2301      	movs	r3, #1
 8012d94:	47c0      	blx	r8
 8012d96:	3001      	adds	r0, #1
 8012d98:	d0d5      	beq.n	8012d46 <_printf_common+0x8a>
 8012d9a:	f109 0901 	add.w	r9, r9, #1
 8012d9e:	e7f2      	b.n	8012d86 <_printf_common+0xca>
 8012da0:	2000      	movs	r0, #0
 8012da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012da8 <_printf_i>:
 8012da8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012dac:	460c      	mov	r4, r1
 8012dae:	4617      	mov	r7, r2
 8012db0:	7e22      	ldrb	r2, [r4, #24]
 8012db2:	2a6e      	cmp	r2, #110	; 0x6e
 8012db4:	4698      	mov	r8, r3
 8012db6:	4606      	mov	r6, r0
 8012db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dba:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8012dbe:	f000 80a9 	beq.w	8012f14 <_printf_i+0x16c>
 8012dc2:	d812      	bhi.n	8012dea <_printf_i+0x42>
 8012dc4:	2a63      	cmp	r2, #99	; 0x63
 8012dc6:	d023      	beq.n	8012e10 <_printf_i+0x68>
 8012dc8:	d80a      	bhi.n	8012de0 <_printf_i+0x38>
 8012dca:	2a00      	cmp	r2, #0
 8012dcc:	f000 80b6 	beq.w	8012f3c <_printf_i+0x194>
 8012dd0:	2a58      	cmp	r2, #88	; 0x58
 8012dd2:	f040 80c5 	bne.w	8012f60 <_printf_i+0x1b8>
 8012dd6:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012dda:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8012fd4 <_printf_i+0x22c>
 8012dde:	e051      	b.n	8012e84 <_printf_i+0xdc>
 8012de0:	2a64      	cmp	r2, #100	; 0x64
 8012de2:	d01e      	beq.n	8012e22 <_printf_i+0x7a>
 8012de4:	2a69      	cmp	r2, #105	; 0x69
 8012de6:	d01c      	beq.n	8012e22 <_printf_i+0x7a>
 8012de8:	e0ba      	b.n	8012f60 <_printf_i+0x1b8>
 8012dea:	2a73      	cmp	r2, #115	; 0x73
 8012dec:	f000 80aa 	beq.w	8012f44 <_printf_i+0x19c>
 8012df0:	d809      	bhi.n	8012e06 <_printf_i+0x5e>
 8012df2:	2a6f      	cmp	r2, #111	; 0x6f
 8012df4:	d02b      	beq.n	8012e4e <_printf_i+0xa6>
 8012df6:	2a70      	cmp	r2, #112	; 0x70
 8012df8:	f040 80b2 	bne.w	8012f60 <_printf_i+0x1b8>
 8012dfc:	6822      	ldr	r2, [r4, #0]
 8012dfe:	f042 0220 	orr.w	r2, r2, #32
 8012e02:	6022      	str	r2, [r4, #0]
 8012e04:	e039      	b.n	8012e7a <_printf_i+0xd2>
 8012e06:	2a75      	cmp	r2, #117	; 0x75
 8012e08:	d021      	beq.n	8012e4e <_printf_i+0xa6>
 8012e0a:	2a78      	cmp	r2, #120	; 0x78
 8012e0c:	d035      	beq.n	8012e7a <_printf_i+0xd2>
 8012e0e:	e0a7      	b.n	8012f60 <_printf_i+0x1b8>
 8012e10:	681a      	ldr	r2, [r3, #0]
 8012e12:	1d11      	adds	r1, r2, #4
 8012e14:	6019      	str	r1, [r3, #0]
 8012e16:	6813      	ldr	r3, [r2, #0]
 8012e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012e20:	e0a2      	b.n	8012f68 <_printf_i+0x1c0>
 8012e22:	6820      	ldr	r0, [r4, #0]
 8012e24:	681a      	ldr	r2, [r3, #0]
 8012e26:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012e2a:	d003      	beq.n	8012e34 <_printf_i+0x8c>
 8012e2c:	1d10      	adds	r0, r2, #4
 8012e2e:	6018      	str	r0, [r3, #0]
 8012e30:	6813      	ldr	r3, [r2, #0]
 8012e32:	e005      	b.n	8012e40 <_printf_i+0x98>
 8012e34:	0645      	lsls	r5, r0, #25
 8012e36:	d5f9      	bpl.n	8012e2c <_printf_i+0x84>
 8012e38:	1d10      	adds	r0, r2, #4
 8012e3a:	6018      	str	r0, [r3, #0]
 8012e3c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	da3b      	bge.n	8012ebc <_printf_i+0x114>
 8012e44:	222d      	movs	r2, #45	; 0x2d
 8012e46:	425b      	negs	r3, r3
 8012e48:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012e4c:	e036      	b.n	8012ebc <_printf_i+0x114>
 8012e4e:	6820      	ldr	r0, [r4, #0]
 8012e50:	681a      	ldr	r2, [r3, #0]
 8012e52:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012e56:	d003      	beq.n	8012e60 <_printf_i+0xb8>
 8012e58:	1d10      	adds	r0, r2, #4
 8012e5a:	6018      	str	r0, [r3, #0]
 8012e5c:	6813      	ldr	r3, [r2, #0]
 8012e5e:	e004      	b.n	8012e6a <_printf_i+0xc2>
 8012e60:	0640      	lsls	r0, r0, #25
 8012e62:	d5f9      	bpl.n	8012e58 <_printf_i+0xb0>
 8012e64:	1d10      	adds	r0, r2, #4
 8012e66:	6018      	str	r0, [r3, #0]
 8012e68:	8813      	ldrh	r3, [r2, #0]
 8012e6a:	7e22      	ldrb	r2, [r4, #24]
 8012e6c:	f8df e164 	ldr.w	lr, [pc, #356]	; 8012fd4 <_printf_i+0x22c>
 8012e70:	2a6f      	cmp	r2, #111	; 0x6f
 8012e72:	bf0c      	ite	eq
 8012e74:	2208      	moveq	r2, #8
 8012e76:	220a      	movne	r2, #10
 8012e78:	e01c      	b.n	8012eb4 <_printf_i+0x10c>
 8012e7a:	2278      	movs	r2, #120	; 0x78
 8012e7c:	f8df e158 	ldr.w	lr, [pc, #344]	; 8012fd8 <_printf_i+0x230>
 8012e80:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012e84:	6822      	ldr	r2, [r4, #0]
 8012e86:	6818      	ldr	r0, [r3, #0]
 8012e88:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012e8c:	f100 0504 	add.w	r5, r0, #4
 8012e90:	601d      	str	r5, [r3, #0]
 8012e92:	d001      	beq.n	8012e98 <_printf_i+0xf0>
 8012e94:	6803      	ldr	r3, [r0, #0]
 8012e96:	e002      	b.n	8012e9e <_printf_i+0xf6>
 8012e98:	0655      	lsls	r5, r2, #25
 8012e9a:	d5fb      	bpl.n	8012e94 <_printf_i+0xec>
 8012e9c:	8803      	ldrh	r3, [r0, #0]
 8012e9e:	07d0      	lsls	r0, r2, #31
 8012ea0:	bf44      	itt	mi
 8012ea2:	f042 0220 	orrmi.w	r2, r2, #32
 8012ea6:	6022      	strmi	r2, [r4, #0]
 8012ea8:	b91b      	cbnz	r3, 8012eb2 <_printf_i+0x10a>
 8012eaa:	6822      	ldr	r2, [r4, #0]
 8012eac:	f022 0220 	bic.w	r2, r2, #32
 8012eb0:	6022      	str	r2, [r4, #0]
 8012eb2:	2210      	movs	r2, #16
 8012eb4:	2000      	movs	r0, #0
 8012eb6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012eba:	e002      	b.n	8012ec2 <_printf_i+0x11a>
 8012ebc:	f8df e114 	ldr.w	lr, [pc, #276]	; 8012fd4 <_printf_i+0x22c>
 8012ec0:	220a      	movs	r2, #10
 8012ec2:	6865      	ldr	r5, [r4, #4]
 8012ec4:	60a5      	str	r5, [r4, #8]
 8012ec6:	2d00      	cmp	r5, #0
 8012ec8:	bfa2      	ittt	ge
 8012eca:	6820      	ldrge	r0, [r4, #0]
 8012ecc:	f020 0004 	bicge.w	r0, r0, #4
 8012ed0:	6020      	strge	r0, [r4, #0]
 8012ed2:	b903      	cbnz	r3, 8012ed6 <_printf_i+0x12e>
 8012ed4:	b165      	cbz	r5, 8012ef0 <_printf_i+0x148>
 8012ed6:	460d      	mov	r5, r1
 8012ed8:	fbb3 f0f2 	udiv	r0, r3, r2
 8012edc:	fb02 3310 	mls	r3, r2, r0, r3
 8012ee0:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8012ee4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012ee8:	4603      	mov	r3, r0
 8012eea:	2800      	cmp	r0, #0
 8012eec:	d1f4      	bne.n	8012ed8 <_printf_i+0x130>
 8012eee:	e000      	b.n	8012ef2 <_printf_i+0x14a>
 8012ef0:	460d      	mov	r5, r1
 8012ef2:	2a08      	cmp	r2, #8
 8012ef4:	d10b      	bne.n	8012f0e <_printf_i+0x166>
 8012ef6:	6823      	ldr	r3, [r4, #0]
 8012ef8:	07da      	lsls	r2, r3, #31
 8012efa:	d508      	bpl.n	8012f0e <_printf_i+0x166>
 8012efc:	6923      	ldr	r3, [r4, #16]
 8012efe:	6862      	ldr	r2, [r4, #4]
 8012f00:	429a      	cmp	r2, r3
 8012f02:	bfde      	ittt	le
 8012f04:	2330      	movle	r3, #48	; 0x30
 8012f06:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012f0a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012f0e:	1b49      	subs	r1, r1, r5
 8012f10:	6121      	str	r1, [r4, #16]
 8012f12:	e02e      	b.n	8012f72 <_printf_i+0x1ca>
 8012f14:	6825      	ldr	r5, [r4, #0]
 8012f16:	681a      	ldr	r2, [r3, #0]
 8012f18:	6960      	ldr	r0, [r4, #20]
 8012f1a:	f015 0f80 	tst.w	r5, #128	; 0x80
 8012f1e:	d003      	beq.n	8012f28 <_printf_i+0x180>
 8012f20:	1d15      	adds	r5, r2, #4
 8012f22:	601d      	str	r5, [r3, #0]
 8012f24:	6813      	ldr	r3, [r2, #0]
 8012f26:	e008      	b.n	8012f3a <_printf_i+0x192>
 8012f28:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012f2c:	f102 0504 	add.w	r5, r2, #4
 8012f30:	601d      	str	r5, [r3, #0]
 8012f32:	6813      	ldr	r3, [r2, #0]
 8012f34:	d001      	beq.n	8012f3a <_printf_i+0x192>
 8012f36:	8018      	strh	r0, [r3, #0]
 8012f38:	e000      	b.n	8012f3c <_printf_i+0x194>
 8012f3a:	6018      	str	r0, [r3, #0]
 8012f3c:	2300      	movs	r3, #0
 8012f3e:	6123      	str	r3, [r4, #16]
 8012f40:	460d      	mov	r5, r1
 8012f42:	e016      	b.n	8012f72 <_printf_i+0x1ca>
 8012f44:	681a      	ldr	r2, [r3, #0]
 8012f46:	1d11      	adds	r1, r2, #4
 8012f48:	6019      	str	r1, [r3, #0]
 8012f4a:	6815      	ldr	r5, [r2, #0]
 8012f4c:	6862      	ldr	r2, [r4, #4]
 8012f4e:	4628      	mov	r0, r5
 8012f50:	2100      	movs	r1, #0
 8012f52:	f000 f8ed 	bl	8013130 <memchr>
 8012f56:	b108      	cbz	r0, 8012f5c <_printf_i+0x1b4>
 8012f58:	1b40      	subs	r0, r0, r5
 8012f5a:	6060      	str	r0, [r4, #4]
 8012f5c:	6863      	ldr	r3, [r4, #4]
 8012f5e:	e004      	b.n	8012f6a <_printf_i+0x1c2>
 8012f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012f64:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012f68:	2301      	movs	r3, #1
 8012f6a:	6123      	str	r3, [r4, #16]
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012f72:	f8cd 8000 	str.w	r8, [sp]
 8012f76:	4630      	mov	r0, r6
 8012f78:	4621      	mov	r1, r4
 8012f7a:	aa03      	add	r2, sp, #12
 8012f7c:	463b      	mov	r3, r7
 8012f7e:	f7ff fe9d 	bl	8012cbc <_printf_common>
 8012f82:	3001      	adds	r0, #1
 8012f84:	d102      	bne.n	8012f8c <_printf_i+0x1e4>
 8012f86:	f04f 30ff 	mov.w	r0, #4294967295
 8012f8a:	e01f      	b.n	8012fcc <_printf_i+0x224>
 8012f8c:	4630      	mov	r0, r6
 8012f8e:	4639      	mov	r1, r7
 8012f90:	462a      	mov	r2, r5
 8012f92:	6923      	ldr	r3, [r4, #16]
 8012f94:	47c0      	blx	r8
 8012f96:	3001      	adds	r0, #1
 8012f98:	d0f5      	beq.n	8012f86 <_printf_i+0x1de>
 8012f9a:	6823      	ldr	r3, [r4, #0]
 8012f9c:	079b      	lsls	r3, r3, #30
 8012f9e:	d405      	bmi.n	8012fac <_printf_i+0x204>
 8012fa0:	68e0      	ldr	r0, [r4, #12]
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	4298      	cmp	r0, r3
 8012fa6:	bfb8      	it	lt
 8012fa8:	4618      	movlt	r0, r3
 8012faa:	e00f      	b.n	8012fcc <_printf_i+0x224>
 8012fac:	2500      	movs	r5, #0
 8012fae:	68e3      	ldr	r3, [r4, #12]
 8012fb0:	9a03      	ldr	r2, [sp, #12]
 8012fb2:	1a9b      	subs	r3, r3, r2
 8012fb4:	429d      	cmp	r5, r3
 8012fb6:	daf3      	bge.n	8012fa0 <_printf_i+0x1f8>
 8012fb8:	4630      	mov	r0, r6
 8012fba:	4639      	mov	r1, r7
 8012fbc:	f104 0219 	add.w	r2, r4, #25
 8012fc0:	2301      	movs	r3, #1
 8012fc2:	47c0      	blx	r8
 8012fc4:	3001      	adds	r0, #1
 8012fc6:	d0de      	beq.n	8012f86 <_printf_i+0x1de>
 8012fc8:	3501      	adds	r5, #1
 8012fca:	e7f0      	b.n	8012fae <_printf_i+0x206>
 8012fcc:	b004      	add	sp, #16
 8012fce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012fd2:	bf00      	nop
 8012fd4:	0801484d 	.word	0x0801484d
 8012fd8:	0801485e 	.word	0x0801485e

08012fdc <_sbrk_r>:
 8012fdc:	b538      	push	{r3, r4, r5, lr}
 8012fde:	4c06      	ldr	r4, [pc, #24]	; (8012ff8 <_sbrk_r+0x1c>)
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	4605      	mov	r5, r0
 8012fe4:	4608      	mov	r0, r1
 8012fe6:	6023      	str	r3, [r4, #0]
 8012fe8:	f7f1 ffa8 	bl	8004f3c <_sbrk>
 8012fec:	1c43      	adds	r3, r0, #1
 8012fee:	d102      	bne.n	8012ff6 <_sbrk_r+0x1a>
 8012ff0:	6823      	ldr	r3, [r4, #0]
 8012ff2:	b103      	cbz	r3, 8012ff6 <_sbrk_r+0x1a>
 8012ff4:	602b      	str	r3, [r5, #0]
 8012ff6:	bd38      	pop	{r3, r4, r5, pc}
 8012ff8:	1fff529c 	.word	0x1fff529c

08012ffc <__sread>:
 8012ffc:	b510      	push	{r4, lr}
 8012ffe:	460c      	mov	r4, r1
 8013000:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013004:	f000 f8e4 	bl	80131d0 <_read_r>
 8013008:	2800      	cmp	r0, #0
 801300a:	bfab      	itete	ge
 801300c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801300e:	89a3      	ldrhlt	r3, [r4, #12]
 8013010:	181b      	addge	r3, r3, r0
 8013012:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013016:	bfac      	ite	ge
 8013018:	6563      	strge	r3, [r4, #84]	; 0x54
 801301a:	81a3      	strhlt	r3, [r4, #12]
 801301c:	bd10      	pop	{r4, pc}

0801301e <__swrite>:
 801301e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013022:	461d      	mov	r5, r3
 8013024:	898b      	ldrh	r3, [r1, #12]
 8013026:	05db      	lsls	r3, r3, #23
 8013028:	4607      	mov	r7, r0
 801302a:	460c      	mov	r4, r1
 801302c:	4616      	mov	r6, r2
 801302e:	d505      	bpl.n	801303c <__swrite+0x1e>
 8013030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013034:	2200      	movs	r2, #0
 8013036:	2302      	movs	r3, #2
 8013038:	f000 f868 	bl	801310c <_lseek_r>
 801303c:	89a3      	ldrh	r3, [r4, #12]
 801303e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013042:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013046:	81a3      	strh	r3, [r4, #12]
 8013048:	4638      	mov	r0, r7
 801304a:	4632      	mov	r2, r6
 801304c:	462b      	mov	r3, r5
 801304e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013052:	f000 b817 	b.w	8013084 <_write_r>

08013056 <__sseek>:
 8013056:	b510      	push	{r4, lr}
 8013058:	460c      	mov	r4, r1
 801305a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801305e:	f000 f855 	bl	801310c <_lseek_r>
 8013062:	1c43      	adds	r3, r0, #1
 8013064:	89a3      	ldrh	r3, [r4, #12]
 8013066:	bf15      	itete	ne
 8013068:	6560      	strne	r0, [r4, #84]	; 0x54
 801306a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801306e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013072:	81a3      	strheq	r3, [r4, #12]
 8013074:	bf18      	it	ne
 8013076:	81a3      	strhne	r3, [r4, #12]
 8013078:	bd10      	pop	{r4, pc}

0801307a <__sclose>:
 801307a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801307e:	f000 b813 	b.w	80130a8 <_close_r>
	...

08013084 <_write_r>:
 8013084:	b538      	push	{r3, r4, r5, lr}
 8013086:	4c07      	ldr	r4, [pc, #28]	; (80130a4 <_write_r+0x20>)
 8013088:	4605      	mov	r5, r0
 801308a:	2000      	movs	r0, #0
 801308c:	6020      	str	r0, [r4, #0]
 801308e:	4608      	mov	r0, r1
 8013090:	4611      	mov	r1, r2
 8013092:	461a      	mov	r2, r3
 8013094:	f000 f8e0 	bl	8013258 <_write>
 8013098:	1c43      	adds	r3, r0, #1
 801309a:	d102      	bne.n	80130a2 <_write_r+0x1e>
 801309c:	6823      	ldr	r3, [r4, #0]
 801309e:	b103      	cbz	r3, 80130a2 <_write_r+0x1e>
 80130a0:	602b      	str	r3, [r5, #0]
 80130a2:	bd38      	pop	{r3, r4, r5, pc}
 80130a4:	1fff529c 	.word	0x1fff529c

080130a8 <_close_r>:
 80130a8:	b538      	push	{r3, r4, r5, lr}
 80130aa:	4c06      	ldr	r4, [pc, #24]	; (80130c4 <_close_r+0x1c>)
 80130ac:	2300      	movs	r3, #0
 80130ae:	4605      	mov	r5, r0
 80130b0:	4608      	mov	r0, r1
 80130b2:	6023      	str	r3, [r4, #0]
 80130b4:	f000 f8a8 	bl	8013208 <_close>
 80130b8:	1c43      	adds	r3, r0, #1
 80130ba:	d102      	bne.n	80130c2 <_close_r+0x1a>
 80130bc:	6823      	ldr	r3, [r4, #0]
 80130be:	b103      	cbz	r3, 80130c2 <_close_r+0x1a>
 80130c0:	602b      	str	r3, [r5, #0]
 80130c2:	bd38      	pop	{r3, r4, r5, pc}
 80130c4:	1fff529c 	.word	0x1fff529c

080130c8 <_fstat_r>:
 80130c8:	b538      	push	{r3, r4, r5, lr}
 80130ca:	4c07      	ldr	r4, [pc, #28]	; (80130e8 <_fstat_r+0x20>)
 80130cc:	2300      	movs	r3, #0
 80130ce:	4605      	mov	r5, r0
 80130d0:	4608      	mov	r0, r1
 80130d2:	4611      	mov	r1, r2
 80130d4:	6023      	str	r3, [r4, #0]
 80130d6:	f000 f89f 	bl	8013218 <_fstat>
 80130da:	1c43      	adds	r3, r0, #1
 80130dc:	d102      	bne.n	80130e4 <_fstat_r+0x1c>
 80130de:	6823      	ldr	r3, [r4, #0]
 80130e0:	b103      	cbz	r3, 80130e4 <_fstat_r+0x1c>
 80130e2:	602b      	str	r3, [r5, #0]
 80130e4:	bd38      	pop	{r3, r4, r5, pc}
 80130e6:	bf00      	nop
 80130e8:	1fff529c 	.word	0x1fff529c

080130ec <_isatty_r>:
 80130ec:	b538      	push	{r3, r4, r5, lr}
 80130ee:	4c06      	ldr	r4, [pc, #24]	; (8013108 <_isatty_r+0x1c>)
 80130f0:	2300      	movs	r3, #0
 80130f2:	4605      	mov	r5, r0
 80130f4:	4608      	mov	r0, r1
 80130f6:	6023      	str	r3, [r4, #0]
 80130f8:	f000 f896 	bl	8013228 <_isatty>
 80130fc:	1c43      	adds	r3, r0, #1
 80130fe:	d102      	bne.n	8013106 <_isatty_r+0x1a>
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	b103      	cbz	r3, 8013106 <_isatty_r+0x1a>
 8013104:	602b      	str	r3, [r5, #0]
 8013106:	bd38      	pop	{r3, r4, r5, pc}
 8013108:	1fff529c 	.word	0x1fff529c

0801310c <_lseek_r>:
 801310c:	b538      	push	{r3, r4, r5, lr}
 801310e:	4c07      	ldr	r4, [pc, #28]	; (801312c <_lseek_r+0x20>)
 8013110:	4605      	mov	r5, r0
 8013112:	2000      	movs	r0, #0
 8013114:	6020      	str	r0, [r4, #0]
 8013116:	4608      	mov	r0, r1
 8013118:	4611      	mov	r1, r2
 801311a:	461a      	mov	r2, r3
 801311c:	f000 f88c 	bl	8013238 <_lseek>
 8013120:	1c43      	adds	r3, r0, #1
 8013122:	d102      	bne.n	801312a <_lseek_r+0x1e>
 8013124:	6823      	ldr	r3, [r4, #0]
 8013126:	b103      	cbz	r3, 801312a <_lseek_r+0x1e>
 8013128:	602b      	str	r3, [r5, #0]
 801312a:	bd38      	pop	{r3, r4, r5, pc}
 801312c:	1fff529c 	.word	0x1fff529c

08013130 <memchr>:
 8013130:	b510      	push	{r4, lr}
 8013132:	b2c9      	uxtb	r1, r1
 8013134:	4402      	add	r2, r0
 8013136:	4290      	cmp	r0, r2
 8013138:	4603      	mov	r3, r0
 801313a:	d006      	beq.n	801314a <memchr+0x1a>
 801313c:	781c      	ldrb	r4, [r3, #0]
 801313e:	428c      	cmp	r4, r1
 8013140:	f100 0001 	add.w	r0, r0, #1
 8013144:	d1f7      	bne.n	8013136 <memchr+0x6>
 8013146:	4618      	mov	r0, r3
 8013148:	bd10      	pop	{r4, pc}
 801314a:	2000      	movs	r0, #0
 801314c:	bd10      	pop	{r4, pc}

0801314e <memmove>:
 801314e:	4281      	cmp	r1, r0
 8013150:	b510      	push	{r4, lr}
 8013152:	eb01 0302 	add.w	r3, r1, r2
 8013156:	d301      	bcc.n	801315c <memmove+0xe>
 8013158:	1e42      	subs	r2, r0, #1
 801315a:	e00b      	b.n	8013174 <memmove+0x26>
 801315c:	4298      	cmp	r0, r3
 801315e:	d2fb      	bcs.n	8013158 <memmove+0xa>
 8013160:	1881      	adds	r1, r0, r2
 8013162:	1ad2      	subs	r2, r2, r3
 8013164:	42d3      	cmn	r3, r2
 8013166:	d004      	beq.n	8013172 <memmove+0x24>
 8013168:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801316c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013170:	e7f8      	b.n	8013164 <memmove+0x16>
 8013172:	bd10      	pop	{r4, pc}
 8013174:	4299      	cmp	r1, r3
 8013176:	d004      	beq.n	8013182 <memmove+0x34>
 8013178:	f811 4b01 	ldrb.w	r4, [r1], #1
 801317c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013180:	e7f8      	b.n	8013174 <memmove+0x26>
 8013182:	bd10      	pop	{r4, pc}

08013184 <_realloc_r>:
 8013184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013186:	4607      	mov	r7, r0
 8013188:	4615      	mov	r5, r2
 801318a:	460e      	mov	r6, r1
 801318c:	b921      	cbnz	r1, 8013198 <_realloc_r+0x14>
 801318e:	4611      	mov	r1, r2
 8013190:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013194:	f7ff bbf0 	b.w	8012978 <_malloc_r>
 8013198:	b91a      	cbnz	r2, 80131a2 <_realloc_r+0x1e>
 801319a:	f7ff fba9 	bl	80128f0 <_free_r>
 801319e:	4628      	mov	r0, r5
 80131a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131a2:	f000 f827 	bl	80131f4 <_malloc_usable_size_r>
 80131a6:	42a8      	cmp	r0, r5
 80131a8:	d20e      	bcs.n	80131c8 <_realloc_r+0x44>
 80131aa:	4638      	mov	r0, r7
 80131ac:	4629      	mov	r1, r5
 80131ae:	f7ff fbe3 	bl	8012978 <_malloc_r>
 80131b2:	4604      	mov	r4, r0
 80131b4:	b150      	cbz	r0, 80131cc <_realloc_r+0x48>
 80131b6:	4631      	mov	r1, r6
 80131b8:	462a      	mov	r2, r5
 80131ba:	f7fe fc13 	bl	80119e4 <memcpy>
 80131be:	4638      	mov	r0, r7
 80131c0:	4631      	mov	r1, r6
 80131c2:	f7ff fb95 	bl	80128f0 <_free_r>
 80131c6:	e001      	b.n	80131cc <_realloc_r+0x48>
 80131c8:	4630      	mov	r0, r6
 80131ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80131cc:	4620      	mov	r0, r4
 80131ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080131d0 <_read_r>:
 80131d0:	b538      	push	{r3, r4, r5, lr}
 80131d2:	4c07      	ldr	r4, [pc, #28]	; (80131f0 <_read_r+0x20>)
 80131d4:	4605      	mov	r5, r0
 80131d6:	2000      	movs	r0, #0
 80131d8:	6020      	str	r0, [r4, #0]
 80131da:	4608      	mov	r0, r1
 80131dc:	4611      	mov	r1, r2
 80131de:	461a      	mov	r2, r3
 80131e0:	f000 f832 	bl	8013248 <_read>
 80131e4:	1c43      	adds	r3, r0, #1
 80131e6:	d102      	bne.n	80131ee <_read_r+0x1e>
 80131e8:	6823      	ldr	r3, [r4, #0]
 80131ea:	b103      	cbz	r3, 80131ee <_read_r+0x1e>
 80131ec:	602b      	str	r3, [r5, #0]
 80131ee:	bd38      	pop	{r3, r4, r5, pc}
 80131f0:	1fff529c 	.word	0x1fff529c

080131f4 <_malloc_usable_size_r>:
 80131f4:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80131f8:	2800      	cmp	r0, #0
 80131fa:	bfbe      	ittt	lt
 80131fc:	1809      	addlt	r1, r1, r0
 80131fe:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8013202:	18c0      	addlt	r0, r0, r3
 8013204:	3804      	subs	r0, #4
 8013206:	4770      	bx	lr

08013208 <_close>:
 8013208:	4b02      	ldr	r3, [pc, #8]	; (8013214 <_close+0xc>)
 801320a:	2258      	movs	r2, #88	; 0x58
 801320c:	601a      	str	r2, [r3, #0]
 801320e:	f04f 30ff 	mov.w	r0, #4294967295
 8013212:	4770      	bx	lr
 8013214:	1fff529c 	.word	0x1fff529c

08013218 <_fstat>:
 8013218:	4b02      	ldr	r3, [pc, #8]	; (8013224 <_fstat+0xc>)
 801321a:	2258      	movs	r2, #88	; 0x58
 801321c:	601a      	str	r2, [r3, #0]
 801321e:	f04f 30ff 	mov.w	r0, #4294967295
 8013222:	4770      	bx	lr
 8013224:	1fff529c 	.word	0x1fff529c

08013228 <_isatty>:
 8013228:	4b02      	ldr	r3, [pc, #8]	; (8013234 <_isatty+0xc>)
 801322a:	2258      	movs	r2, #88	; 0x58
 801322c:	601a      	str	r2, [r3, #0]
 801322e:	2000      	movs	r0, #0
 8013230:	4770      	bx	lr
 8013232:	bf00      	nop
 8013234:	1fff529c 	.word	0x1fff529c

08013238 <_lseek>:
 8013238:	4b02      	ldr	r3, [pc, #8]	; (8013244 <_lseek+0xc>)
 801323a:	2258      	movs	r2, #88	; 0x58
 801323c:	601a      	str	r2, [r3, #0]
 801323e:	f04f 30ff 	mov.w	r0, #4294967295
 8013242:	4770      	bx	lr
 8013244:	1fff529c 	.word	0x1fff529c

08013248 <_read>:
 8013248:	4b02      	ldr	r3, [pc, #8]	; (8013254 <_read+0xc>)
 801324a:	2258      	movs	r2, #88	; 0x58
 801324c:	601a      	str	r2, [r3, #0]
 801324e:	f04f 30ff 	mov.w	r0, #4294967295
 8013252:	4770      	bx	lr
 8013254:	1fff529c 	.word	0x1fff529c

08013258 <_write>:
 8013258:	4b02      	ldr	r3, [pc, #8]	; (8013264 <_write+0xc>)
 801325a:	2258      	movs	r2, #88	; 0x58
 801325c:	601a      	str	r2, [r3, #0]
 801325e:	f04f 30ff 	mov.w	r0, #4294967295
 8013262:	4770      	bx	lr
 8013264:	1fff529c 	.word	0x1fff529c
 8013268:	69206e69 	.word	0x69206e69
 801326c:	645f3167 	.word	0x645f3167
 8013270:	006e6f5f 	.word	0x006e6f5f
 8013274:	74697865 	.word	0x74697865
 8013278:	31676920 	.word	0x31676920
 801327c:	6f5f645f 	.word	0x6f5f645f
 8013280:	0000006e 	.word	0x0000006e
 8013284:	69206e69 	.word	0x69206e69
 8013288:	645f3167 	.word	0x645f3167
 801328c:	66666f5f 	.word	0x66666f5f
 8013290:	00000000 	.word	0x00000000
 8013294:	55206e69 	.word	0x55206e69
 8013298:	00003432 	.word	0x00003432
 801329c:	74697865 	.word	0x74697865
 80132a0:	34325520 	.word	0x34325520
 80132a4:	00000000 	.word	0x00000000
 80132a8:	63206e69 	.word	0x63206e69
 80132ac:	695f6e61 	.word	0x695f6e61
 80132b0:	7475706e 	.word	0x7475706e
 80132b4:	00000073 	.word	0x00000073
 80132b8:	74697865 	.word	0x74697865
 80132bc:	6e616320 	.word	0x6e616320
 80132c0:	706e695f 	.word	0x706e695f
 80132c4:	00737475 	.word	0x00737475
 80132c8:	74697865 	.word	0x74697865
 80132cc:	34325520 	.word	0x34325520
 80132d0:	00000000 	.word	0x00000000
 80132d4:	74206e69 	.word	0x74206e69
 80132d8:	00706d65 	.word	0x00706d65
 80132dc:	74697865 	.word	0x74697865
 80132e0:	6d657420 	.word	0x6d657420
 80132e4:	00000070 	.word	0x00000070

080132e8 <UART_0_channel_config>:
 80132e8:	0001c200 01080800 00000010              ............

080132f4 <UART_0_tx_pin_config>:
 80132f4:	00000090 00000001 00000002              ............

08013300 <UART_0_tx_pin>:
 8013300:	48028200 0000000e 080132f4              ...H.....2..

0801330c <UART_0_config>:
 801330c:	080132e8 08005f75 00000000 00000000     .2..u_..........
	...
 8013328:	08013300 00020200 00000006              .3..........

08013334 <UART_0_rx_pin_config>:
 8013334:	00000000 00000001 00000002              ............

08013340 <SPI_MASTER_0_MOSI>:
 8013340:	48028100 00000005                       ...H....

08013348 <SPI_MASTER_0_MISO>:
 8013348:	48028100 00000004                       ...H....

08013350 <SPI_MASTER_0_SCLKOUT>:
 8013350:	48028100 00000006                       ...H....

08013358 <SPI_MASTER_0_SCLKOUT_Config>:
 8013358:	00000090 00000001 00000001 00000000     ................
 8013368:	00000000                                ....

0801336c <SPI_MASTER_0_SS_0>:
 801336c:	48028100 0000000b                       ...H....

08013374 <SPI_MASTER_0_SS_0_Config>:
 8013374:	00000090 00000001 00000001 00000000     ................
 8013384:	00010000                                ....

08013388 <SPI_MASTER_0_Config>:
 8013388:	1ffe8934 080075ad 08013340 1ffe8920     4....u..@3.. ...
 8013398:	08013348 1fff440c 00000000 00000000     H3...D..........
	...
 80133b0:	08013350 08013358 0801336c 00000000     P3..X3..l3......
	...
 80133d8:	08013374 00000000 00000000 00000000     t3..............
	...
 8013408:	40000000 01000101 00010002              ...@........

08013414 <RTC_0_config>:
 8013414:	00000001 00000000                       ........

0801341c <RTC_0_time_alarm_config>:
 801341c:	00000000 07b20004 00000100 07b20000     ................
 801342c:	00007fff                                ....

08013430 <INTERRUPT_0>:
 8013430:	00003f40                                @?..

08013434 <INTERRUPT_1>:
 8013434:	01003f39                                9?..

08013438 <I2C_MASTER_0_sda_pin_config>:
 8013438:	000000d0 00000001 00000000              ............

08013444 <I2C_MASTER_0_scl_pin_config>:
 8013444:	000000d0 00000001 00000000              ............

08013450 <I2C_MASTER_0_channel_config>:
 8013450:	000186a0 00000000                       ........

08013458 <I2C_MASTER_0_config>:
 8013458:	08013450 080083a5 08008381 08008361     P4..........a...
	...
 801347c:	04040202 0000ffff                       ........

08013484 <I2C_MASTER_1_sda_pin_config>:
 8013484:	000000c8 00000001 00000000              ............

08013490 <I2C_MASTER_1_scl_pin_config>:
 8013490:	000000c8 00000001 00000000              ............

0801349c <I2C_MASTER_1_channel_config>:
 801349c:	00061a80 00000000                       ........

080134a4 <I2C_MASTER_1_config>:
 80134a4:	0801349c 08008451 0800842d 0800840d     .4..Q...-.......
	...
 80134c8:	04040202 0000ffff                       ........

080134d0 <sdmmc_block>:
 80134d0:	1ffe8a40                                @...

080134d4 <DC_DC_EN_OUT_D>:
 80134d4:	48028000 00000080 00010000 00000000     ...H............
 80134e4:	0000000f                                ....

080134e8 <VACUUM_PUMP_OUT_D>:
 80134e8:	48028000 00000080 00010000 00000000     ...H............
 80134f8:	0000000e                                ....

080134fc <HEADLAMPS_ADJ_PWR_OUT_D>:
 80134fc:	48028000 00000080 00010000 00000000     ...H............
 801350c:	0000000d                                ....

08013510 <AC_RADIATOR_OUT_D>:
 8013510:	48028000 00000080 00010000 00000000     ...H............
 8013520:	0000000c                                ....

08013524 <INSTRUMENT_CON_PWR_OUT_D>:
 8013524:	48028000 00000080 00010000 00000000     ...H............
 8013534:	0000000b                                ....

08013538 <ACCEL_CS_OUT>:
 8013538:	48028000 00000000 00000000 00000000     ...H............
 8013548:	0000000a                                ....

0801354c <ELECT_HANDBRAKE_EN_OUT_D>:
 801354c:	48028000 00000000 00000000 00000000     ...H............
 801355c:	00000008                                ....

08013560 <MC_CONTACTOR_RELAY_OUT_D>:
 8013560:	48028000 00000080 00010000 00000000     ...H............
 8013570:	00000007                                ....

08013574 <MC_PARK_RELAY_OUT_D>:
 8013574:	48028000 00000080 00010000 00000000     ...H............
 8013584:	00000006                                ....

08013588 <MC_REV_RELAY_OUT_D>:
 8013588:	48028000 00000080 00010000 00000000     ...H............
 8013598:	00000005                                ....

0801359c <MC_FWD_RELAY_OUT_D>:
 801359c:	48028000 00000080 00010000 00000000     ...H............
 80135ac:	00000004                                ....

080135b0 <MC_REGEN_RELAY_OUT_D>:
 80135b0:	48028000 00000080 00010000 00000000     ...H............
 80135c0:	00000003                                ....

080135c4 <MC_ELOCK_RELAY_OUT_D>:
 80135c4:	48028000 00000080 00010000 00000000     ...H............
 80135d4:	00000002                                ....

080135d8 <POS_OUT_D>:
 80135d8:	48028100 00000080 00010000 00000000     ...H............
 80135e8:	0000000f                                ....

080135ec <VCU_FAN_PWR_OUT_D>:
 80135ec:	48028100 00000000 00000000 00000000     ...H............
 80135fc:	0000000e                                ....

08013600 <AUX_EFUSE_1_OUT_D>:
 8013600:	48028100 00000080 00010000 00000000     ...H............
 8013610:	0000000a                                ....

08013614 <WIPER_PWR_OUT_D>:
 8013614:	48028100 00000080 00010000 00000000     ...H............
 8013624:	00000009                                ....

08013628 <THROTTLE_POT_CS_OUT_D>:
 8013628:	48028100 00000000 00000000 00000000     ...H............
 8013638:	00000008                                ....

0801363c <LIGHTS_PWR_OUT_D>:
 801363c:	48028100 00000080 00010000 00000000     ...H............
 801364c:	00000007                                ....

08013650 <INFOTAINMENT_PWR_OUT_D>:
 8013650:	48028100 00000080 00010000 00000000     ...H............
 8013660:	00000003                                ....

08013664 <AUDIO_AMP_OUT_D>:
 8013664:	48028100 00000000 00000000 00000000     ...H............
 8013674:	00000002                                ....

08013678 <VACUUM_SENSOR_PWR_OUT_D>:
 8013678:	48028100 00000080 00010000 00000000     ...H............
 8013688:	00000001                                ....

0801368c <BRAKE_LIGHT_OUT_D>:
 801368c:	48028100 00000080 00010000 00000000     ...H............
 801369c:	00000000                                ....

080136a0 <HORN_PWR_OUT_D>:
 80136a0:	48028400 00000080 00010000 00000000     ...H............
 80136b0:	00000001                                ....

080136b4 <DOOR_LOCK_OUT_D>:
 80136b4:	48028200 00000080 00010000 00000000     ...H............
 80136c4:	0000000d                                ....

080136c8 <RIGHT_INDICATOR_OUT_D>:
 80136c8:	48028600 00000080 00010000 00000000     ...H............
 80136d8:	00000003                                ....

080136dc <HIGH_BEAM_OUT_D>:
 80136dc:	48028600 00000080 00010000 00000000     ...H............
 80136ec:	00000002                                ....

080136f0 <LOW_BEAM_OUT_D>:
 80136f0:	48028600 00000080 00010000 00000000     ...H............
 8013700:	00000001                                ....

08013704 <REV_LIGHT_OUT_D>:
 8013704:	48028600 00000080 00010000 00000000     ...H............
 8013714:	00000000                                ....

08013718 <ELEC_HANDBRAKE_IN_D>:
 8013718:	48028e00 00000000 00000000 00000000     ...H............
 8013728:	00000009                                ....

0801372c <AUX_ANALOG1_IN_D>:
 801372c:	48028e00 00000000 00000000 00000000     ...H............
 801373c:	00000002                                ....

08013740 <INT_ACCEL_IN_D>:
 8013740:	48028e00 00000000 00000000 00000000     ...H............
 8013750:	00000000                                ....

08013754 <CIGARETTE_LIGHTER_PWR_OUT_D>:
 8013754:	48028300 00000080 00010000 00000000     ...H............
 8013764:	0000000d                                ....

08013768 <BUZZER_EN_D>:
 8013768:	48028300 00000000 00000000 00000000     ...H............
 8013778:	0000000b                                ....

0801377c <MC_RELAY_PWR_OUT_D>:
 801377c:	48028300 00000080 00010000 00000000     ...H............
 801378c:	00000004                                ....

08013790 <MC_FAN_PWR_OUT_D>:
 8013790:	48028300 00000080 00010000 00000000     ...H............
 80137a0:	00000003                                ....

080137a4 <VEHICLE_SPEED_PWM_OUT>:
 80137a4:	48028200 00000000 00000000 00000000     ...H............
 80137b4:	0000000c                                ....

080137b8 <VEHICLE_RPM_PWM_OUT>:
 80137b8:	48028200 00000000 00000000 00000000     ...H............
 80137c8:	0000000b                                ....

080137cc <PWR_WINDOW_OUT_D>:
 80137cc:	48028200 00000080 00010000 00000000     ...H............
 80137dc:	00000009                                ....

080137e0 <PWR_STEERING_OUT_D>:
 80137e0:	48028200 00000080 00010000 00000000     ...H............
 80137f0:	00000008                                ....

080137f4 <LEFT_INDICATOR_OUT_D>:
 80137f4:	48028200 00000080 00010000 00000000     ...H............
 8013804:	00000007                                ....

08013808 <ADC3_CS_OUT>:
 8013808:	48028200 00000000 00000000 00000000     ...H............
 8013818:	00000006                                ....

0801381c <INPUTS_3V3_PWR_EN>:
 801381c:	48028200 00000080 00010000 00000000     ...H............
 801382c:	00000003                                ....

08013830 <COMM_3V3_PWR_EN>:
 8013830:	48028200 00000080 00010000 00000000     ...H............
 8013840:	00000002                                ....

08013844 <SENSOR_3V3_PWR_EN>:
 8013844:	48028200 00000080 00010000 00000000     ...H............
 8013854:	00000000                                ....

08013858 <CABIN_LIGHT_OUT_D>:
 8013858:	48028500 00000080 00010000 00000000     ...H............
 8013868:	00000009                                ....

0801386c <ADC2_CS_OUT>:
 801386c:	48028500 00000000 00000000 00000000     ...H............
 801387c:	00000006                                ....

08013880 <ADC1_CS_OUT>:
 8013880:	48028500 00000000 00000000 00000000     ...H............
 8013890:	00000005                                ....

08013894 <SPEED_SENSOR_IN_D>:
 8013894:	48028f00 00000000 00000000 00000000     ...H............
 80138a4:	0000000d                                ....

080138a8 <VACUUM_SENSOR_IN_D>:
 80138a8:	48028f00 00000000 00000000 00000000     ...H............
 80138b8:	0000000c                                ....

080138bc <BRAKE_OIL_IN_D>:
 80138bc:	48028f00 00000000 00000000 00000000     ...H............
 80138cc:	00000009                                ....

080138d0 <CHARGING_STARTED_IN_D>:
 80138d0:	48028f00 00000000 00000000 00000000     ...H............
 80138e0:	00000008                                ....

080138e4 <CHARGER_CONNECTED_IN_D>:
 80138e4:	48028f00 00000000 00000000 00000000     ...H............
 80138f4:	00000007                                ....

080138f8 <IGNI_POS2_IN_D>:
 80138f8:	48028f00 00000000 00000000 00000000     ...H............
 8013908:	00000006                                ....

0801390c <IGNI_POS1_IN_D>:
 801390c:	48028f00 00000000 00000000 00000000     ...H............
 801391c:	00000005                                ....

08013920 <ACC_PEDAL_SW_IN_D>:
 8013920:	48028f00 00000000 00000000 00000000     ...H............
 8013930:	00000004                                ....

08013934 <HANDBRAKE_IN_D>:
 8013934:	48028f00 00000010 00000000 00000000     ...H............
 8013944:	00000003                                ....

08013948 <BRAKE_SW_IN_D>:
 8013948:	48028f00 00000008 00000000 00000000     ...H............
 8013958:	00000002                                ....

0801395c <DOOR_LOCK_PWR_OUT_D>:
 801395c:	48028400 00000080 00010000 00000000     ...H............
 801396c:	00000000                                ....

08013970 <GEAR_SW1_IN_D>:
 8013970:	48028e00 00000000 00000000 00000000     ...H............
 8013980:	0000000c                                ....

08013984 <GEAR_SW2_IN_D>:
 8013984:	48028e00 00000000 00000000 00000000     ...H............
 8013994:	0000000d                                ....

08013998 <GEAR_SW3_IN_D>:
 8013998:	48028e00 00000000 00000000 00000000     ...H............
 80139a8:	0000000e                                ....

080139ac <GEAR_SW4_IN_D>:
 80139ac:	48028e00 00000000 00000000 00000000     ...H............
 80139bc:	0000000f                                ....

080139c0 <DIGITAL_IO_5>:
 80139c0:	48028500 00000000 00000000 00000000     ...H............
 80139d0:	00000007                                ....

080139d4 <DIGITAL_IO_6>:
 80139d4:	48028500 00000000 00000000 00000000     ...H............
 80139e4:	00000008                                ....

080139e8 <CTS>:
 80139e8:	48028400 00000000 00000000 00000000     ...H............
 80139f8:	00000004                                ....

080139fc <RTS>:
 80139fc:	48028400 00000080 00010000 00000000     ...H............
 8013a0c:	00000005                                ....

08013a10 <DIGITAL_IO_PWRKEY>:
 8013a10:	48028400 00000080 00010000 00000000     ...H............
 8013a20:	00000007                                ....

08013a24 <MODULE_4G_EN_OUT_D>:
 8013a24:	48028400 00000080 00010000 00000000     ...H............
 8013a34:	00000002 01010230 00010000 00000000     ....0...........
 8013a44:	00010000 01010102                       ........

08013a4c <CAN_NODE_0_gpio_out>:
 8013a4c:	48028100 0000000c                       ...H....

08013a54 <CAN_NODE_0_gpio_out_config>:
 8013a54:	00000090 00000001 00000002              ............

08013a60 <CAN_NODE_0_gpio_in>:
 8013a60:	48028100 0000000d                       ...H....

08013a68 <CAN_NODE_0_gpio_in_config>:
	...

08013a74 <CAN_NODE_0_BitTimeConfig>:
 8013a74:	08954400 0003d090 00011f40              .D......@...

08013a80 <CAN_NODE_0_sr>:
 8013a80:	00000000                                ....

08013a84 <CAN_NODE_0_LMO_01_Config>:
 8013a84:	1ffe8ab8 01000036 00000000              ....6.......

08013a90 <CAN_NODE_0_LMO_02_Config>:
 8013a90:	1ffe8ad8 01000013 00000000              ............

08013a9c <CAN_NODE_0_LMO_03_Config>:
 8013a9c:	1ffe8af8 01000012 00000000              ............

08013aa8 <CAN_NODE_0_LMO_04_Config>:
 8013aa8:	1ffe8b18 01000037 00000000              ....7.......

08013ab4 <CAN_NODE_0_LMO_05_Config>:
 8013ab4:	1ffe8b38 0100002f 00000000              8.../.......

08013ac0 <CAN_NODE_0_LMO_06_Config>:
 8013ac0:	1ffe8b58 01000030 00000000              X...0.......

08013acc <CAN_NODE_0_LMO_07_Config>:
 8013acc:	1ffe8b78 01000031 00000000              x...1.......

08013ad8 <CAN_NODE_0_LMO_08_Config>:
 8013ad8:	1ffe8b98 01000028 00000000              ....(.......

08013ae4 <CAN_NODE_0_LMO_09_Config>:
 8013ae4:	1ffe8bb8 00000029 00000000              ....).......

08013af0 <CAN_NODE_0_LMO_10_Config>:
 8013af0:	1ffe8bd8 00000032 00000000              ....2.......

08013afc <CAN_NODE_0_LMO_11_Config>:
 8013afc:	1ffe8bf8 00000035 00000000              ....5.......

08013b08 <CAN_NODE_0_LMO_12_Config>:
 8013b08:	1ffe8c18 00000010 00000000              ............

08013b14 <CAN_NODE_0_LMO_13_Config>:
 8013b14:	1ffe8c38 00000034 00000001              8...4.......

08013b20 <CAN_NODE_0_LMO_14_Config>:
 8013b20:	1ffe8c58 00000011 00000001              X...........

08013b2c <CAN_NODE_0_LMO_15_Config>:
 8013b2c:	1ffe8c78 0000000a 00000001              x...........

08013b38 <CAN_NODE_0_LMO_16_Config>:
 8013b38:	1ffe8c98 01000004 00000000              ............

08013b44 <CAN_NODE_0_LMO_17_Config>:
 8013b44:	1ffe8cb8 0000000b 00000001              ............

08013b50 <CAN_NODE_0_LMO_18_Config>:
 8013b50:	1ffe8cd8 00000003 00000001              ............

08013b5c <CAN_NODE_0_LMO_19_Config>:
 8013b5c:	1ffe8cf8 0000000c 00000001              ............

08013b68 <CAN_NODE_0_LMO_20_Config>:
 8013b68:	1ffe8d18 00000002 00000001              ............

08013b74 <CAN_NODE_0_LMO_21_Config>:
 8013b74:	1ffe8d38 00000001 00000000              8...........

08013b80 <CAN_NODE_0_LMO_22_Config>:
 8013b80:	1ffe8d58 0000000d 00000000              X...........

08013b8c <CAN_NODE_0_LMO_23_Config>:
 8013b8c:	1ffe8d78 00000000 00000000              x...........

08013b98 <CAN_NODE_0_LMO_24_Config>:
 8013b98:	1ffe8d98 0000003b 00000000              ....;.......

08013ba4 <CAN_NODE_0_LMO_25_Config>:
 8013ba4:	1ffe8db8 0000003a 00000000              ....:.......

08013bb0 <CAN_NODE_0_LMO_26_Config>:
 8013bb0:	1ffe8dd8 0000001b 00000000              ............

08013bbc <CAN_NODE_0_LMO_27_Config>:
 8013bbc:	1ffe8df8 0000003f 00000000              ....?.......

08013bc8 <CAN_NODE_0_LMO_28_Config>:
 8013bc8:	1ffe8e18 0000001c 00000000              ............

08013bd4 <CAN_NODE_0_LMO_29_Config>:
 8013bd4:	1ffe8e38 0000003e 00000000              8...>.......

08013be0 <CAN_NODE_0_LMO_30_Config>:
 8013be0:	1ffe8e58 00000019 00000000              X...........

08013bec <CAN_NODE_0_LMO_31_Config>:
 8013bec:	1ffe8e78 0100001a 00000000              x...........

08013bf8 <CAN_NODE_0_LMO_32_Config>:
 8013bf8:	1ffe8e98 0100003d 00000000              ....=.......

08013c04 <CAN_NODE_0>:
 8013c04:	1ffe8aa4 48014300 08013a74 08013a84     .....C.Ht:...:..
 8013c14:	08013a90 08013a9c 08013aa8 08013ab4     .:...:...:...:..
 8013c24:	08013ac0 08013acc 08013ad8 08013ae4     .:...:...:...:..
 8013c34:	08013af0 08013afc 08013b08 08013b14     .:...:...;...;..
 8013c44:	08013b20 08013b2c 08013b38 08013b44      ;..,;..8;..D;..
 8013c54:	08013b50 08013b5c 08013b68 08013b74     P;..\;..h;..t;..
 8013c64:	08013b80 08013b8c 08013b98 08013ba4     .;...;...;...;..
 8013c74:	08013bb0 08013bbc 08013bc8 08013bd4     .;...;...;...;..
 8013c84:	08013be0 08013bec 08013bf8 08013a80     .;...;...;...:..
 8013c94:	08013a4c 08013a54 08013a60 08013a68     L:..T:..`:..h:..
 8013ca4:	00200102 00000000                       .. .....

08013cac <CAN_NODE_1_gpio_out>:
 8013cac:	48028300 00000007                       ...H....

08013cb4 <CAN_NODE_1_gpio_out_config>:
 8013cb4:	00000090 00000001 00000002              ............

08013cc0 <CAN_NODE_1_gpio_in>:
 8013cc0:	48028300 00000008                       ...H....

08013cc8 <CAN_NODE_1_gpio_in_config>:
	...

08013cd4 <CAN_NODE_1_BitTimeConfig>:
 8013cd4:	08954400 0007a120 00011f40              .D.. ...@...

08013ce0 <CAN_NODE_1_sr>:
 8013ce0:	00000000                                ....

08013ce4 <CAN_NODE_1_LMO_01_Config>:
 8013ce4:	1ffe8eb8 0100001d 00000000              ............

08013cf0 <CAN_NODE_1_LMO_02_Config>:
 8013cf0:	1ffe8ed8 00000014 00000001              ............

08013cfc <CAN_NODE_1_LMO_03_Config>:
 8013cfc:	1ffe8ef8 00000017 00000001              ............

08013d08 <CAN_NODE_1_LMO_04_Config>:
 8013d08:	1ffe8f18 00000018 00000001              ............

08013d14 <CAN_NODE_1_LMO_05_Config>:
 8013d14:	1ffe8f38 00000015 00000001              8...........

08013d20 <CAN_NODE_1_LMO_06_Config>:
 8013d20:	1ffe8f58 00000016 00000001              X...........

08013d2c <CAN_NODE_1_LMO_07_Config>:
 8013d2c:	1ffe8f78 00000006 00000000              x...........

08013d38 <CAN_NODE_1_LMO_08_Config>:
 8013d38:	1ffe8f98 00000005 00000000              ............

08013d44 <CAN_NODE_1_LMO_09_Config>:
 8013d44:	1ffe8fb8 00000008 00000001              ............

08013d50 <CAN_NODE_1_LMO_10_Config>:
 8013d50:	1ffe8fd8 00000007 00000001              ............

08013d5c <CAN_NODE_1_LMO_11_Config>:
 8013d5c:	1ffe8ff8 0100003c 00000000              ....<.......

08013d68 <CAN_NODE_1_LMO_12_Config>:
 8013d68:	1ffe9018 01000009 00000000              ............

08013d74 <CAN_NODE_1_LMO_13_Config>:
 8013d74:	1ffe9038 01000024 00000000              8...$.......

08013d80 <CAN_NODE_1_LMO_14_Config>:
 8013d80:	1ffe9058 00000025 00000001              X...%.......

08013d8c <CAN_NODE_1_LMO_15_Config>:
 8013d8c:	1ffe9078 01000026 00000000              x...&.......

08013d98 <CAN_NODE_1_LMO_16_Config>:
 8013d98:	1ffe9098 00000027 00000000              ....'.......

08013da4 <CAN_NODE_1_LMO_17_Config>:
 8013da4:	1ffe90b8 0000001e 00000000              ............

08013db0 <CAN_NODE_1_LMO_18_Config>:
 8013db0:	1ffe90d8 0000001f 00000000              ............

08013dbc <CAN_NODE_1_LMO_19_Config>:
 8013dbc:	1ffe90f8 00000020 00000000              .... .......

08013dc8 <CAN_NODE_1_LMO_20_Config>:
 8013dc8:	1ffe9118 00000021 00000001              ....!.......

08013dd4 <CAN_NODE_1_LMO_21_Config>:
 8013dd4:	1ffe9138 00000022 00000000              8...".......

08013de0 <CAN_NODE_1_LMO_22_Config>:
 8013de0:	1ffe9158 00000023 00000000              X...#.......

08013dec <CAN_NODE_1>:
 8013dec:	1ffe8aa4 48014400 08013cd4 08013ce4     .....D.H.<...<..
 8013dfc:	08013cf0 08013cfc 08013d08 08013d14     .<...<...=...=..
 8013e0c:	08013d20 08013d2c 08013d38 08013d44      =..,=..8=..D=..
 8013e1c:	08013d50 08013d5c 08013d68 08013d74     P=..\=..h=..t=..
 8013e2c:	08013d80 08013d8c 08013d98 08013da4     .=...=...=...=..
 8013e3c:	08013db0 08013dbc 08013dc8 08013dd4     .=...=...=...=..
 8013e4c:	08013de0 00000000 00000000 00000000     .=..............
	...
 8013e78:	08013ce0 08013cac 08013cb4 08013cc0     .<...<...<...<..
 8013e88:	08013cc8 00160201 00000000              .<..........

08013e94 <CAN_NODE_2_gpio_out>:
 8013e94:	48028500 0000000b                       ...H....

08013e9c <CAN_NODE_2_gpio_out_config>:
 8013e9c:	000000a0 00000001 00000002              ............

08013ea8 <CAN_NODE_2_gpio_in>:
 8013ea8:	48028500 0000000a                       ...H....

08013eb0 <CAN_NODE_2_gpio_in_config>:
	...

08013ebc <CAN_NODE_2_BitTimeConfig>:
 8013ebc:	08954400 0007a120 00011f40              .D.. ...@...

08013ec8 <CAN_NODE_2_sr>:
 8013ec8:	00000000                                ....

08013ecc <CAN_NODE_2_LMO_01_Config>:
 8013ecc:	1ffe9178 00000039 00000000              x...9.......

08013ed8 <CAN_NODE_2_LMO_02_Config>:
 8013ed8:	1ffe9198 00000038 00000000              ....8.......

08013ee4 <CAN_NODE_2_LMO_03_Config>:
 8013ee4:	1ffe91b8 0000000e 00000000              ............

08013ef0 <CAN_NODE_2_LMO_04_Config>:
 8013ef0:	1ffe91d8 00000033 00000000              ....3.......

08013efc <CAN_NODE_2_LMO_05_Config>:
 8013efc:	1ffe91f8 0000000f 00000000              ............

08013f08 <CAN_NODE_2>:
 8013f08:	1ffe8aa4 48014700 08013ebc 08013ecc     .....G.H.>...>..
 8013f18:	08013ed8 08013ee4 08013ef0 08013efc     .>...>...>...>..
	...
 8013f94:	08013ec8 08013e94 08013e9c 08013ea8     .>...>...>...>..
 8013fa4:	08013eb0 00050500 00000000 512b5441     .>..........AT+Q
 8013fb4:	43535047 223d4746 7074756f 2274726f     GPSCFG="outport"
 8013fc4:	6f6e222c 0d22656e 0000000a 512b5441     ,"none".....AT+Q
 8013fd4:	3d535047 000a0d31 5047512b 434f4c53     GPS=1...+QGPSLOC
 8013fe4:	0000003a 0000002c 512b5441 4c535047     :...,...AT+QGPSL
 8013ff4:	313d434f 00000a0d                       OC=1....

08013ffc <vcu_fleet_fleet_10_sec_field_info>:
 8013ffc:	40001204 40041208 4008110c 400c1210     ...@...@...@...@
 801400c:	40101214 40141218 4018121c 401c1220     ...@...@...@ ..@
 801401c:	40201124 40241228 4028122c 402c1230     $. @(.$@,.(@0.,@
 801402c:	40301234 40341138 4038123c 403c1240     4.0@8.4@<.8@@.<@
 801403c:	40401244 40441248 4048124c 404c1250     D.@@H.D@L.H@P.L@
 801404c:	40501254 40541258 4058125c 405c1260     T.P@X.T@\.X@`.\@
 801405c:	40601164 00000000                       d.`@....

08014064 <vcu_fleet_fleet_10_sec_submsg_info>:
 8014064:	00000000                                ....

08014068 <vcu_fleet_fleet_10_sec_msg>:
 8014068:	08013ffc 08014064 00000000 00000000     .?..d@..........
 8014078:	00000019 00000019 544d512b 54415453     ........+QMTSTAT
 8014088:	0000003a 544d512b 56434552 0000003a     :...+QMTRECV:...
 8014098:	444e4951 4d53203a 4f442053 0a0d454e     QIND: SMS DONE..
 80140a8:	00000000 0d594452 0000000a 45574f50     ....RDY.....POWE
 80140b8:	20444552 4e574f44 00000a0d 544d512b     RED DOWN....+QMT
 80140c8:	4e45504f 0000003a 544d512b 45425550     OPEN:...+QMTPUBE
 80140d8:	00003a58 544d512b 4e4e4f43 0000003a     X:..+QMTCONN:...
 80140e8:	544d512b 43534944 0000003a 544d512b     +QMTDISC:...+QMT
 80140f8:	3a425553 00000000 454d432b 52524520     SUB:....+CME ERR
 8014108:	0000524f 0000003a 534d432b 52524520     OR..:...+CMS ERR
 8014118:	0000524f 00000000 00000a0d 62737522     OR.........."usb
 8014128:	0d227461 0000000a 0d302c30 0000000a     at".....0,0.....
 8014138:	00000000 63657551 0d6c6574 0000000a     ....Quectel.....
 8014148:	0d302c31 0000000a 00000000 0000002c     1,0.........,...
 8014158:	44414552 00000059 00000022 00302c30     READY..."...0,0.
 8014168:	00312c30 00322c30 00332c30 00342c30     0,1.0,2.0,3.0,4.
 8014178:	00352c30 222c6425 255f7325 0a0d2273     0,5.%d,"%s_%s"..
 8014188:	00000000 72616d73 74694b74 00000000     ....smartKit....
 8014198:	0a0d6425 00000000 312c6425 2c64252c     %d......%d,1,%d,
 80141a8:	73252c30 0d64252c 0000000a 312c6425     0,%s,%d.....%d,1
 80141b8:	2c73252c 0a0d6425 00000000 252c7325     ,%s,%d......%s,%
 80141c8:	30362c64 0a0d312c 00000000 63616322     d,60,1......"cac
 80141d8:	2e747265 226d6570 00000000 696c6322     ert.pem"...."cli
 80141e8:	63746e65 2e747265 226d6570 00000000     entcert.pem"....
 80141f8:	696c6322 6b746e65 702e7965 00226d65     "clientkey.pem".
 8014208:	0a0d7325 00000000 252c6425 00000073     %s......%d,%s...
 8014218:	37796122 7865716f 35326b62 612d6c73     "ay7oqexbk25sl-a
 8014228:	692e7374 612e746f 6f732d70 2d687475     ts.iot.ap-south-
 8014238:	6d612e31 6e6f7a61 2e737761 226d6f63     1.amazonaws.com"
 8014248:	3838382c 000a0d33 63616322 22747265     ,8883..."cacert"
 8014258:	222c322c 65636163 702e7472 0d226d65     ,2,"cacert.pem".
 8014268:	0000000a 696c6322 6b746e65 2c227965     ...."clientkey",
 8014278:	63222c32 6e65696c 79656b74 6d65702e     2,"clientkey.pem
 8014288:	000a0d22 63657322 6576656c 322c226c     "..."seclevel",2
 8014298:	0a0d322c 00000000 6c737322 73726576     ,2......"sslvers
 80142a8:	226e6f69 342c322c 00000a0d 70696322     ion",2,4...."cip
 80142b8:	73726568 65746975 2c322c22 46467830     hersuite",2,0xFF
 80142c8:	0a0d4646 00000000 6e676922 6c65726f     FF......"ignorel
 80142d8:	6c61636f 656d6974 2c322c22 000a0d31     ocaltime",2,1...
 80142e8:	4c535322 64252c22 322c312c 00000a0d     "SSL",%d,1,2....
 80142f8:	696c6322 63746e65 22747265 222c322c     "clientcert",2,"
 8014308:	65696c63 6563746e 702e7472 0d226d65     clientcert.pem".
 8014318:	0000000a 74756f22 74726f70 6e222c22     ...."outport","n
 8014328:	22656e6f 00000a0d 65472f22 662f3376     one"...."/Gev3/f
 8014338:	7465656c 00000022 65727473 66206d61     leet"...stream f
 8014348:	006c6c75 65206f69 726f7272 00000000     ull.io error....
 8014358:	61727261 616d2079 69732078 6520657a     array max size e
 8014368:	65656378 00646564 6e6f6e28 00002965     xceeded.(none)..
 8014378:	61766e69 2064696c 6c656966 79742064     invalid field ty
 8014388:	00006570 6c6c6163 6b636162 72726520     pe..callback err
 8014398:	0000726f 7373696d 20676e69 75716572     or..missing requ
 80143a8:	64657269 65696620 0000646c 61766e69     ired field..inva
 80143b8:	2064696c 65747865 6f69736e 0000006e     lid extension...
 80143c8:	6d627573 73206773 20657a69 6e616863     submsg size chan
 80143d8:	00646567 61766e69 2064696c 61746164     ged.invalid data
 80143e8:	7a69735f 00000065 65747962 69732073     _size...bytes si
 80143f8:	6520657a 65656378 00646564 6f72657a     ze exceeded.zero
 8014408:	6e656c2d 20687467 69727473 0000676e     -length string..
 8014418:	65746e75 6e696d72 64657461 72747320     unterminated str
 8014428:	00676e69 61766e69 2064696c 6c656966     ing.invalid fiel
 8014438:	65642064 69726373 726f7470 00000000     d descriptor....
 8014448:	45564144 50504120 6e692073 61697469     DAVE APPs initia
 8014458:	617a696c 6e6f6974 69616620 0064656c     lization failed.
 8014468:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014478:	2a2a2a2a 2a2a2a2a 69206e69 7475706e     ********in input
 8014488:	70616320 65727574 2a2a2a2a 2a2a2a2a      capture********
 8014498:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80144a8:	0000000a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 80144b8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 74697865     ************exit
 80144c8:	706e6920 63207475 75747061 2a2a6572      input capture**
 80144d8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80144e8:	2a2a2a2a 000a2a2a 2a2a2a2a 2a2a2a2a     ******..********
 80144f8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014508:	70206e69 65636f72 69207373 7475706e     in process input
 8014518:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014528:	2a2a2a2a 2a2a2a2a 0000000a 2a2a2a2a     ********....****
 8014538:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014548:	652a2a2a 20746978 636f7270 20737365     ***exit process 
 8014558:	75706e69 2a2a2a74 2a2a2a2a 2a2a2a2a     input***********
 8014568:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
 8014578:	00000000 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 8014588:	2a2a2a2a 2a2a2a2a 692a2a2a 6376206e     ***********in vc
 8014598:	756f2075 74757074 2a2a2a2a 2a2a2a2a     u output********
 80145a8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80145b8:	2a2a2a2a 00000a2a 2a2a2a2a 2a2a2a2a     *****...********
 80145c8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80145d8:	74697865 75637620 74756f20 2a747570     exit vcu output*
 80145e8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80145f8:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000a2a     *************...
 8014608:	00676f6c 00000000 00000043              log.....C...

08014614 <_global_impure_ptr>:
 8014614:	1fff42d0                                .B..

08014618 <_DAYS_BEFORE_MONTH>:
 8014618:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 8014628:	00000078 00000097 000000b5 000000d4     x...............
 8014638:	000000f3 00000111 00000130 0000014e     ........0...N...

08014648 <DAYS_IN_MONTH>:
 8014648:	0000001f 0000001c 0000001f 0000001e     ................
 8014658:	0000001f 0000001e 0000001f 0000001f     ................
 8014668:	0000001e 0000001f 0000001e 0000001f     ................

08014678 <_ctype_>:
 8014678:	20202000 20202020 28282020 20282828     .         ((((( 
 8014688:	20202020 20202020 20202020 20202020                     
 8014698:	10108820 10101010 10101010 10101010      ...............
 80146a8:	04040410 04040404 10040404 10101010     ................
 80146b8:	41411010 41414141 01010101 01010101     ..AAAAAA........
 80146c8:	01010101 01010101 01010101 10101010     ................
 80146d8:	42421010 42424242 02020202 02020202     ..BBBBBB........
 80146e8:	02020202 02020202 02020202 10101010     ................
 80146f8:	00000020 00000000 00000000 00000000      ...............
	...

0801477c <__sf_fake_stdin>:
	...

0801479c <__sf_fake_stdout>:
	...

080147bc <__sf_fake_stderr>:
	...

080147dc <__month_lengths>:
 80147dc:	0000001f 0000001c 0000001f 0000001e     ................
 80147ec:	0000001f 0000001e 0000001f 0000001f     ................
 80147fc:	0000001e 0000001f 0000001e 0000001f     ................
 801480c:	0000001f 0000001d 0000001f 0000001e     ................
 801481c:	0000001f 0000001e 0000001f 0000001f     ................
 801482c:	0000001e 0000001f 0000001e 0000001f     ................
 801483c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 801484c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 801485c:	31300046 35343332 39383736 64636261     F.0123456789abcd
 801486c:	00006665                                ef..
