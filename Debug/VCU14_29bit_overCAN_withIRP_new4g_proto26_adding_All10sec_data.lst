
VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00014acc  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  08014acc  0c014acc  0001cacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00030000  2**0
                  ALLOC
  3 .data         0000bba8  1ffe8800  0c014ad4  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000f5c  1fff43a8  0c02067c  0002c3a8  2**3
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0002ffc0  2**2
                  ALLOC
  6 .stab         0000009c  00000000  00000000  0002c3a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      0000014d  00000000  00000000  0002c444  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00002ad8  00000000  00000000  0002c598  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0007f6a8  00000000  00000000  0002f070  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c0ba  00000000  00000000  000ae718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001de7d  00000000  00000000  000ba7d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000b9b8  00000000  00000000  000d8650  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00018fdf  00000000  00000000  000e4008  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00015a56  00000000  00000000  000fcfe7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024d0  00000000  00000000  00112a3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000209d  00000000  00000000  00114f0d  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 f9 06 01 08 99 02 00 08     ................
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	b9 6e 00 08 99 02 00 08 99 02 00 08 99 02 00 08     .n..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 0d 07 01 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 e9 09 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 91 88 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 a1 88 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c014ad4 	.word	0x0c014ad4
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000bba8 	.word	0x0000bba8
 8000254:	0c014ad4 	.word	0x0c014ad4
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fff43a8 	.word	0x1fff43a8
 8000264:	00000f5c 	.word	0x00000f5c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08001f05 	.word	0x08001f05
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	08011be9 	.word	0x08011be9
    blx  r0
#endif

    ldr  r0, =main
 8000294:	08010599 	.word	0x08010599

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <tm_sysTickCallback>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void tm_sysTickCallback(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	timerCount++;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <tm_sysTickCallback+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <tm_sysTickCallback+0x70>)
 80002a8:	6013      	str	r3, [r2, #0]

	if(gu32_responseCount > 0)
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <tm_sysTickCallback+0x20>
	{
		gu32_responseCount--;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <tm_sysTickCallback+0x74>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ba:	6013      	str	r3, [r2, #0]
	}
	if(gu32_resetCounter > 0)
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <tm_sysTickCallback+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d004      	beq.n	80002ce <tm_sysTickCallback+0x32>
	{
		gu32_resetCounter--;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <tm_sysTickCallback+0x78>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <tm_sysTickCallback+0x78>)
 80002cc:	6013      	str	r3, [r2, #0]
	}

	if(gu32_4gCounter > 0)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d004      	beq.n	80002e0 <tm_sysTickCallback+0x44>
	{
		gu32_4gCounter--;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002de:	6013      	str	r3, [r2, #0]
	}

	if(gu32_10s4gCounter > 0)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <tm_sysTickCallback+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d004      	beq.n	80002f2 <tm_sysTickCallback+0x56>
	{
		gu32_10s4gCounter--;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <tm_sysTickCallback+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <tm_sysTickCallback+0x80>)
 80002f0:	6013      	str	r3, [r2, #0]
	}

	if(gu32_3s4gCounter > 0)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <tm_sysTickCallback+0x84>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <tm_sysTickCallback+0x68>
	{
		gu32_3s4gCounter--;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <tm_sysTickCallback+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <tm_sysTickCallback+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	}
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	1fff43a8 	.word	0x1fff43a8
 8000310:	1fff43bc 	.word	0x1fff43bc
 8000314:	1fff43ac 	.word	0x1fff43ac
 8000318:	1fff43b0 	.word	0x1fff43b0
 800031c:	1fff43b4 	.word	0x1fff43b4
 8000320:	1fff43b8 	.word	0x1fff43b8

08000324 <tm_setTimerCount>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_setTimerCount(uint32_t timerValue)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus;
	//uint32_t tempTimerValue = timerValue * TM_1MS_TIMER_VAL;

	timerId = (uint32_t) SYSTIMER_CreateTimer(timerValue,
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <tm_setTimerCount+0x38>)
 8000332:	2300      	movs	r3, #0
 8000334:	f006 fe1e 	bl	8006f74 <SYSTIMER_CreateTimer>
 8000338:	4602      	mov	r2, r0
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <tm_setTimerCount+0x3c>)
 800033c:	601a      	str	r2, [r3, #0]
			SYSTIMER_MODE_PERIODIC, (void*) tm_sysTickCallback, NULL);

	if (0U != timerId)
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <tm_setTimerCount+0x3c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <tm_setTimerCount+0x28>
	{
		len_retStatus = E_RET_SUCCESS;
 8000346:	2300      	movs	r3, #0
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e001      	b.n	8000350 <tm_setTimerCount+0x2c>
	}
	else
	{
		len_retStatus = E_RET_TIMER_ERROR;
 800034c:	2307      	movs	r3, #7
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	0800029d 	.word	0x0800029d
 8000360:	1fff43c0 	.word	0x1fff43c0

08000364 <tm_startTimer>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_startTimer()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus;
	SYSTIMER_STATUS_t timerStatus;

	if (timerId != 0)
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <tm_startTimer+0x3c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00f      	beq.n	8000392 <tm_startTimer+0x2e>
	{
		timerStatus = SYSTIMER_StartTimer(timerId);
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <tm_startTimer+0x3c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f006 fe9a 	bl	80070b0 <SYSTIMER_StartTimer>
 800037c:	4603      	mov	r3, r0
 800037e:	71bb      	strb	r3, [r7, #6]
		if (SYSTIMER_STATUS_SUCCESS == timerStatus)
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <tm_startTimer+0x28>
		{
			len_retStatus = E_RET_SUCCESS;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e004      	b.n	8000396 <tm_startTimer+0x32>
		}
		else
		{
			len_retStatus = E_RET_TIMER_ERROR;
 800038c:	2307      	movs	r3, #7
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	e001      	b.n	8000396 <tm_startTimer+0x32>
		}
	}
	else
	{
		len_retStatus = E_RET_TIMER_ID_ZERO_ERROR;
 8000392:	2308      	movs	r3, #8
 8000394:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 8000396:	79fb      	ldrb	r3, [r7, #7]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	1fff43c0 	.word	0x1fff43c0

080003a4 <tm_setResetTimer>:
{
	timerCount = 0;
}

void tm_setResetTimer(uint32_t lu32_timeInMs)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	gu32_resetCounter = lu32_timeInMs;
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <tm_setResetTimer+0x18>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	1fff43ac 	.word	0x1fff43ac

080003c0 <tm_getResetTimerValue>:

uint32_t tm_getResetTimerValue()
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return gu32_resetCounter;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <tm_getResetTimerValue+0x14>)
 80003c6:	681b      	ldr	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	1fff43ac 	.word	0x1fff43ac

080003d8 <tm_set4gRunTimer>:
{
	return gu32_3s4gCounter;
}

void tm_set4gRunTimer(uint32_t lu32_timeInMs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	gu32_3s4gCounter = lu32_timeInMs;
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <tm_set4gRunTimer+0x18>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	1fff43b8 	.word	0x1fff43b8

080003f4 <tm_get4gRunTimerValue>:

uint32_t tm_get4gRunTimerValue()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	return gu32_3s4gCounter;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <tm_get4gRunTimerValue+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	1fff43b8 	.word	0x1fff43b8

0800040c <tm_setResponseTime>:

void tm_setResponseTime(uint32_t lu32_timeInMs)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	gu32_responseCount = lu32_timeInMs;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <tm_setResponseTime+0x18>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	1fff43bc 	.word	0x1fff43bc

08000428 <tm_getResponseTimeValue>:

uint32_t tm_getResponseTimeValue()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	return gu32_responseCount;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <tm_getResponseTimeValue+0x14>)
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	1fff43bc 	.word	0x1fff43bc

08000440 <tm_clearResponseTime>:
void tm_clearResponseTime()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	gu32_responseCount = 0;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <tm_clearResponseTime+0x14>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	1fff43bc 	.word	0x1fff43bc

08000458 <allFaults_Process>:
	//Gtake_FaultIndicator();
	Irp_FaultIndicator();
}

void allFaults_Process(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
//	HighVoltBattery_FaultIndicator();
//	Mcu_FaultIndicator();
//	clusterFault_Indicator();
}
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8000468:	f004 f9c6 	bl	80047f8 <XMC_RTC_Start>
}
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop

08000470 <RTC_Stop>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	XMC_RTC_Stop();
 8000474:	f004 f9d4 	bl	8004820 <XMC_RTC_Stop>
}
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop

0800047c <RTC_init>:
#include "Vcu_Config.h"

#include "xmc_rtc.h"
#include <time.h>
void RTC_init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	RTC_STATUS_t status_r = RTC_STATUS_FAILURE;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
	RTC_Stop();
 8000486:	f7ff fff3 	bl	8000470 <RTC_Stop>

    status_r =  RTC_SetTime(&timeval);
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <RTC_init+0x28>)
 800048c:	f007 fb78 	bl	8007b80 <RTC_SetTime>
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]

    if(status_r == RTC_STATUS_SUCCESS)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <RTC_init+0x22>
    {
 	 RTC_Start();
 800049a:	f7ff ffe3 	bl	8000464 <RTC_Start>
    }
}
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	1fff47e8 	.word	0x1fff47e8

080004a8 <Process_State1_Inputs>:
instrument_clustor_buzzer_t *instrument_clustor_buzzer = &(CAN_MSG_DB[CAN_18FF2021].CAN_Data[0]);
Instrumetcluster_DriveMode_OUT_t *Instrumetcluster_DriveMode_OUT = &(CAN_MSG_DB[CAN_18FFB632].CAN_Data[4]);
eps_status_t *eps_status = &eps_n[can_0x1E5].can_matrix[0];

void Process_State1_Inputs(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	static bool init_once = 1;
	Process_Io_exp_U24();
 80004ac:	f000 f86e 	bl	800058c <Process_Io_exp_U24>

	if(Vcu_OutPuts.IGNITION_1_OUT)
 80004b0:	4b12      	ldr	r3, [pc, #72]	; (80004fc <Process_State1_Inputs+0x54>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d012      	beq.n	80004de <Process_State1_Inputs+0x36>
	{
		//Process_Io_exp_U25();
		Process_cluster_indicators();
 80004b8:	f000 f87e 	bl	80005b8 <Process_cluster_indicators>
		Process_drive_mode();
 80004bc:	f000 f93a 	bl	8000734 <Process_drive_mode>
		Process_faciaaswitches();
 80004c0:	f000 fa20 	bl	8000904 <Process_faciaaswitches>
		Process_cabin_temperature();
 80004c4:	f000 fa24 	bl	8000910 <Process_cabin_temperature>
		if(init_once)
 80004c8:	4b0d      	ldr	r3, [pc, #52]	; (8000500 <Process_State1_Inputs+0x58>)
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d005      	beq.n	80004dc <Process_State1_Inputs+0x34>
		{
			init_hw();
 80004d0:	f000 fbe4 	bl	8000c9c <init_hw>
			init_once = 0;
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <Process_State1_Inputs+0x58>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	701a      	strb	r2, [r3, #0]
 80004da:	e00e      	b.n	80004fa <Process_State1_Inputs+0x52>
 80004dc:	e00d      	b.n	80004fa <Process_State1_Inputs+0x52>
		}
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 80004de:	4b07      	ldr	r3, [pc, #28]	; (80004fc <Process_State1_Inputs+0x54>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	f083 0301 	eor.w	r3, r3, #1
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d006      	beq.n	80004fa <Process_State1_Inputs+0x52>
	{
		all_Ig1_Inputs_off();
 80004ec:	f000 f91c 	bl	8000728 <all_Ig1_Inputs_off>
		cluster_indicators_off();
 80004f0:	f000 f8ee 	bl	80006d0 <cluster_indicators_off>
		init_once = 1;
 80004f4:	4b02      	ldr	r3, [pc, #8]	; (8000500 <Process_State1_Inputs+0x58>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	701a      	strb	r2, [r3, #0]
	}
}
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	1fff4910 	.word	0x1fff4910
 8000500:	1ffe8810 	.word	0x1ffe8810

08000504 <hazzard>:

void hazzard(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	/* for hazzard */
	if((Vcu_OutPuts.IGNITION_1_OUT == 0) && (Combi_Switch_IN.left_indicator_IN && Combi_Switch_IN.right_indicator_IN))
 8000508:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <hazzard+0x7c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	f083 0301 	eor.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	d00e      	beq.n	8000534 <hazzard+0x30>
 8000516:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <hazzard+0x80>)
 8000518:	78db      	ldrb	r3, [r3, #3]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d00a      	beq.n	8000534 <hazzard+0x30>
 800051e:	4b19      	ldr	r3, [pc, #100]	; (8000584 <hazzard+0x80>)
 8000520:	791b      	ldrb	r3, [r3, #4]
 8000522:	2b00      	cmp	r3, #0
 8000524:	d006      	beq.n	8000534 <hazzard+0x30>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = true;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <hazzard+0x84>)
 8000528:	2201      	movs	r2, #1
 800052a:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = true;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <hazzard+0x84>)
 800052e:	2201      	movs	r2, #1
 8000530:	711a      	strb	r2, [r3, #4]
 8000532:	e020      	b.n	8000576 <hazzard+0x72>
	}

	else if(((Combi_Switch_IN.left_indicator_IN == 0) && (Combi_Switch_IN.right_indicator_IN == 0)))
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <hazzard+0x80>)
 8000536:	78db      	ldrb	r3, [r3, #3]
 8000538:	f083 0301 	eor.w	r3, r3, #1
 800053c:	b2db      	uxtb	r3, r3
 800053e:	2b00      	cmp	r3, #0
 8000540:	d00d      	beq.n	800055e <hazzard+0x5a>
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <hazzard+0x80>)
 8000544:	791b      	ldrb	r3, [r3, #4]
 8000546:	f083 0301 	eor.w	r3, r3, #1
 800054a:	b2db      	uxtb	r3, r3
 800054c:	2b00      	cmp	r3, #0
 800054e:	d006      	beq.n	800055e <hazzard+0x5a>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = false;
 8000550:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <hazzard+0x84>)
 8000552:	2200      	movs	r2, #0
 8000554:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = false;
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <hazzard+0x84>)
 8000558:	2200      	movs	r2, #0
 800055a:	711a      	strb	r2, [r3, #4]
 800055c:	e00b      	b.n	8000576 <hazzard+0x72>
	}
	/* end */

	else if(Vcu_OutPuts.IGNITION_1_OUT)
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <hazzard+0x7c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d007      	beq.n	8000576 <hazzard+0x72>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = Combi_Switch_IN.left_indicator_IN;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <hazzard+0x80>)
 8000568:	78da      	ldrb	r2, [r3, #3]
 800056a:	4b07      	ldr	r3, [pc, #28]	; (8000588 <hazzard+0x84>)
 800056c:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = Combi_Switch_IN.right_indicator_IN;
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <hazzard+0x80>)
 8000570:	791a      	ldrb	r2, [r3, #4]
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <hazzard+0x84>)
 8000574:	711a      	strb	r2, [r3, #4]
	}

}
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	1fff4910 	.word	0x1fff4910
 8000584:	1fff48e8 	.word	0x1fff48e8
 8000588:	1fff47f0 	.word	0x1fff47f0

0800058c <Process_Io_exp_U24>:

void Process_Io_exp_U24(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	Relay_Control_Switch_OUT.low_beam_OUT = Combi_Switch_IN.low_beam_IN;
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Process_Io_exp_U24+0x24>)
 8000592:	781a      	ldrb	r2, [r3, #0]
 8000594:	4b07      	ldr	r3, [pc, #28]	; (80005b4 <Process_Io_exp_U24+0x28>)
 8000596:	701a      	strb	r2, [r3, #0]
	Relay_Control_Switch_OUT.high_beam_OUT = Combi_Switch_IN.high_beam_IN;
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Process_Io_exp_U24+0x24>)
 800059a:	785a      	ldrb	r2, [r3, #1]
 800059c:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <Process_Io_exp_U24+0x28>)
 800059e:	705a      	strb	r2, [r3, #1]
	Relay_Control_Switch_OUT.pos_light_OUT = Combi_Switch_IN.pos_light_IN;
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <Process_Io_exp_U24+0x24>)
 80005a2:	789a      	ldrb	r2, [r3, #2]
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <Process_Io_exp_U24+0x28>)
 80005a6:	709a      	strb	r2, [r3, #2]

	hazzard();
 80005a8:	f7ff ffac 	bl	8000504 <hazzard>
}
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	1fff48e8 	.word	0x1fff48e8
 80005b4:	1fff47f0 	.word	0x1fff47f0

080005b8 <Process_cluster_indicators>:
	//Relay_Control_Switch_OUT.ac_blower3_OUT = Hvac_IN.blower_speed3_IN;

}

void Process_cluster_indicators(void)
 {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_right_indicator = 0;//Combi_Switch_IN.right_indicator_IN;

	i_counter = 0;
}
*/
	Instrument_Cluster_OUT.set_left_indicator = Combi_Switch_IN.left_indicator_IN;
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <Process_cluster_indicators+0xec>)
 80005be:	78da      	ldrb	r2, [r3, #3]
 80005c0:	4b39      	ldr	r3, [pc, #228]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005c2:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = Combi_Switch_IN.right_indicator_IN;
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <Process_cluster_indicators+0xec>)
 80005c6:	791a      	ldrb	r2, [r3, #4]
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005ca:	71da      	strb	r2, [r3, #7]
	 //Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.low_beam_OUT;
	 Instrument_Cluster_OUT.set_high_beam = Relay_Control_Switch_OUT.high_beam_OUT;
 80005cc:	4b37      	ldr	r3, [pc, #220]	; (80006ac <Process_cluster_indicators+0xf4>)
 80005ce:	785a      	ldrb	r2, [r3, #1]
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005d2:	725a      	strb	r2, [r3, #9]
	 Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.pos_light_OUT;//There is no indicator for low beam there is for position
 80005d4:	4b35      	ldr	r3, [pc, #212]	; (80006ac <Process_cluster_indicators+0xf4>)
 80005d6:	789a      	ldrb	r2, [r3, #2]
 80005d8:	4b33      	ldr	r3, [pc, #204]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005da:	721a      	strb	r2, [r3, #8]
	 Instrument_Cluster_OUT.set_brake_oil = Switch_Ios_IN.brake_oil_IN;
 80005dc:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <Process_cluster_indicators+0xf8>)
 80005de:	799a      	ldrb	r2, [r3, #6]
 80005e0:	4b31      	ldr	r3, [pc, #196]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005e2:	729a      	strb	r2, [r3, #10]

	// Instrument_Cluster_OUT.eps_status = 1;//default value to show eps failure
	 Instrument_Cluster_OUT.eps_status = eps_status-> Power_Steering_Fault_Indication_On_EPS;///////eps failure
 80005e4:	4b33      	ldr	r3, [pc, #204]	; (80006b4 <Process_cluster_indicators+0xfc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	78db      	ldrb	r3, [r3, #3]
 80005ea:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	bf14      	ite	ne
 80005f4:	2301      	movne	r3, #1
 80005f6:	2300      	moveq	r3, #0
 80005f8:	b2da      	uxtb	r2, r3
 80005fa:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <Process_cluster_indicators+0xf0>)
 80005fc:	731a      	strb	r2, [r3, #12]

	 Instrument_Cluster_OUT.aux_vtg_critical;////////
	 Instrument_Cluster_OUT.battery_temp_exceeded;/////////
	 /*instrument_clustor_buzzer-> charging_connected = */Instrument_Cluster_OUT.charging_connected = charger_on();//Vcu_InPuts.charger_connect_IN;
 80005fe:	f000 fb41 	bl	8000c84 <charger_on>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2da      	uxtb	r2, r3
 800060e:	4b26      	ldr	r3, [pc, #152]	; (80006a8 <Process_cluster_indicators+0xf0>)
 8000610:	739a      	strb	r2, [r3, #14]
	 /*instrument_clustor_indicators-> generic_alarm;////////*/
	 Instrument_Cluster_OUT.regen_enabled = Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese || Irp_Mcu_drive_states_29bit-> Regen_On_Brake;
 8000612:	4b29      	ldr	r3, [pc, #164]	; (80006b8 <Process_cluster_indicators+0x100>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	789b      	ldrb	r3, [r3, #2]
 8000618:	f003 0308 	and.w	r3, r3, #8
 800061c:	b2db      	uxtb	r3, r3
 800061e:	2b00      	cmp	r3, #0
 8000620:	d107      	bne.n	8000632 <Process_cluster_indicators+0x7a>
 8000622:	4b25      	ldr	r3, [pc, #148]	; (80006b8 <Process_cluster_indicators+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	789b      	ldrb	r3, [r3, #2]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <Process_cluster_indicators+0x7e>
 8000632:	2301      	movs	r3, #1
 8000634:	e000      	b.n	8000638 <Process_cluster_indicators+0x80>
 8000636:	2300      	movs	r3, #0
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2da      	uxtb	r2, r3
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <Process_cluster_indicators+0xf0>)
 8000640:	73da      	strb	r2, [r3, #15]
	 instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;////////
 8000642:	4b1e      	ldr	r3, [pc, #120]	; (80006bc <Process_cluster_indicators+0x104>)
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	4b1a      	ldr	r3, [pc, #104]	; (80006b0 <Process_cluster_indicators+0xf8>)
 8000648:	7a1b      	ldrb	r3, [r3, #8]
 800064a:	f083 0301 	eor.w	r3, r3, #1
 800064e:	b2db      	uxtb	r3, r3
 8000650:	f003 0301 	and.w	r3, r3, #1
 8000654:	b2d9      	uxtb	r1, r3
 8000656:	7953      	ldrb	r3, [r2, #5]
 8000658:	f361 03c3 	bfi	r3, r1, #3, #1
 800065c:	7153      	strb	r3, [r2, #5]
	 Seat_Belt_OUT.seat_occupied = (!(/*Seat_Switch_IN.seat_belt_d_IN &&*/ Seat_Switch_IN.seat_belt_p_IN));
 800065e:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <Process_cluster_indicators+0x108>)
 8000660:	785b      	ldrb	r3, [r3, #1]
 8000662:	2b00      	cmp	r3, #0
 8000664:	bf14      	ite	ne
 8000666:	2301      	movne	r3, #1
 8000668:	2300      	moveq	r3, #0
 800066a:	b2db      	uxtb	r3, r3
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	b2da      	uxtb	r2, r3
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Process_cluster_indicators+0x10c>)
 800067a:	709a      	strb	r2, [r3, #2]

	 if(vspeed >=10)
 800067c:	4b12      	ldr	r3, [pc, #72]	; (80006c8 <Process_cluster_indicators+0x110>)
 800067e:	881b      	ldrh	r3, [r3, #0]
 8000680:	2b09      	cmp	r3, #9
 8000682:	d908      	bls.n	8000696 <Process_cluster_indicators+0xde>
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = Seat_Belt_OUT.seat_occupied;
 8000684:	4b11      	ldr	r3, [pc, #68]	; (80006cc <Process_cluster_indicators+0x114>)
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <Process_cluster_indicators+0x10c>)
 800068a:	7899      	ldrb	r1, [r3, #2]
 800068c:	7813      	ldrb	r3, [r2, #0]
 800068e:	f361 0341 	bfi	r3, r1, #1, #1
 8000692:	7013      	strb	r3, [r2, #0]
 8000694:	e005      	b.n	80006a2 <Process_cluster_indicators+0xea>
	 }
	 else
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = false;
 8000696:	4b0d      	ldr	r3, [pc, #52]	; (80006cc <Process_cluster_indicators+0x114>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	7813      	ldrb	r3, [r2, #0]
 800069c:	f36f 0341 	bfc	r3, #1, #1
 80006a0:	7013      	strb	r3, [r2, #0]
	 }
	 // instrument_clustor_indicators-> overspeed = 1;
 }
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	1fff48e8 	.word	0x1fff48e8
 80006a8:	1fff48b8 	.word	0x1fff48b8
 80006ac:	1fff47f0 	.word	0x1fff47f0
 80006b0:	1fff4888 	.word	0x1fff4888
 80006b4:	1ffe8804 	.word	0x1ffe8804
 80006b8:	1ffe8818 	.word	0x1ffe8818
 80006bc:	1ffe8808 	.word	0x1ffe8808
 80006c0:	1fff4828 	.word	0x1fff4828
 80006c4:	1fff4868 	.word	0x1fff4868
 80006c8:	1fff528c 	.word	0x1fff528c
 80006cc:	1ffe880c 	.word	0x1ffe880c

080006d0 <cluster_indicators_off>:

void cluster_indicators_off(void)
 {
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_left_indicator = false;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <cluster_indicators_off+0x50>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = false;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <cluster_indicators_off+0x50>)
 80006dc:	2200      	movs	r2, #0
 80006de:	71da      	strb	r2, [r3, #7]
	Instrument_Cluster_OUT.set_low_beam = false;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <cluster_indicators_off+0x50>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	721a      	strb	r2, [r3, #8]
	Instrument_Cluster_OUT.set_high_beam = false;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <cluster_indicators_off+0x50>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	725a      	strb	r2, [r3, #9]
	Instrument_Cluster_OUT.set_brake_oil = false;//////
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <cluster_indicators_off+0x50>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	729a      	strb	r2, [r3, #10]
	//Instrument_Cluster_OUT.;///////eps failure
	Instrument_Cluster_OUT.aux_vtg_critical = false;////////
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <cluster_indicators_off+0x50>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	72da      	strb	r2, [r3, #11]
	Instrument_Cluster_OUT.battery_temp_exceeded = false;/////////
 80006f8:	4b09      	ldr	r3, [pc, #36]	; (8000720 <cluster_indicators_off+0x50>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	735a      	strb	r2, [r3, #13]
	Instrument_Cluster_OUT.charging_connected = false;/////////////
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <cluster_indicators_off+0x50>)
 8000700:	2200      	movs	r2, #0
 8000702:	739a      	strb	r2, [r3, #14]
	/*instrument_clustor_indicators-> generic_alarm;////////*/
	Instrument_Cluster_OUT.regen_enabled = false;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <cluster_indicators_off+0x50>)
 8000706:	2200      	movs	r2, #0
 8000708:	73da      	strb	r2, [r3, #15]
	/*instrument_clustor_indicators-> parking_brake_light;////////*/
	instrument_clustor_indicators-> seat_belt = false;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <cluster_indicators_off+0x54>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	7953      	ldrb	r3, [r2, #5]
 8000710:	f36f 1304 	bfc	r3, #4, #1
 8000714:	7153      	strb	r3, [r2, #5]
 }
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	1fff48b8 	.word	0x1fff48b8
 8000724:	1ffe8808 	.word	0x1ffe8808

08000728 <all_Ig1_Inputs_off>:
{

}

void all_Ig1_Inputs_off(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

	//Relay_Control_Switch_OUT.left_indicator_OUT = false;
	//Relay_Control_Switch_OUT.right_indicator_OUT = false;

	/* IO EXP U25 */
}
 800072c:	46bd      	mov	sp, r7
 800072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000732:	4770      	bx	lr

08000734 <Process_drive_mode>:

void Process_drive_mode(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
	static bool prev_input = 0;
	static uint8_t ModeCounter_MCU = eco_mode_mcu, ModeCounter_Cluster = eco_mode_cluster, counter = 1;

	switch (Switch_Ios_IN.gear_sw2_IN )
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <Process_drive_mode+0xa4>)
 800073a:	7a9b      	ldrb	r3, [r3, #10]
 800073c:	2b01      	cmp	r3, #1
 800073e:	d127      	bne.n	8000790 <Process_drive_mode+0x5c>
	{
		case 1:
				if((prev_input == 0 ) && (Hvac_IN.blower_speed2_IN)) // mode switch is connected to Hvac_IN.blower_speed2_IN
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <Process_drive_mode+0xa8>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f083 0301 	eor.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d014      	beq.n	8000778 <Process_drive_mode+0x44>
 800074e:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <Process_drive_mode+0xac>)
 8000750:	795b      	ldrb	r3, [r3, #5]
 8000752:	2b00      	cmp	r3, #0
 8000754:	d010      	beq.n	8000778 <Process_drive_mode+0x44>
				{
					ModeCounter_Cluster++;
 8000756:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <Process_drive_mode+0xb0>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	3301      	adds	r3, #1
 800075c:	b2da      	uxtb	r2, r3
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <Process_drive_mode+0xb0>)
 8000760:	701a      	strb	r2, [r3, #0]
					if(ModeCounter_Cluster == invalid_data_cluster)
 8000762:	4b20      	ldr	r3, [pc, #128]	; (80007e4 <Process_drive_mode+0xb0>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b03      	cmp	r3, #3
 8000768:	d102      	bne.n	8000770 <Process_drive_mode+0x3c>
						ModeCounter_Cluster = eco_mode_cluster;
 800076a:	4b1e      	ldr	r3, [pc, #120]	; (80007e4 <Process_drive_mode+0xb0>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]

					prev_input = 1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <Process_drive_mode+0xa8>)
 8000772:	2201      	movs	r2, #1
 8000774:	701a      	strb	r2, [r3, #0]
 8000776:	e00a      	b.n	800078e <Process_drive_mode+0x5a>
				}
				else if(Hvac_IN.blower_speed2_IN == 0)
 8000778:	4b19      	ldr	r3, [pc, #100]	; (80007e0 <Process_drive_mode+0xac>)
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	f083 0301 	eor.w	r3, r3, #1
 8000780:	b2db      	uxtb	r3, r3
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <Process_drive_mode+0x5a>
				{
					prev_input = 0;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <Process_drive_mode+0xa8>)
 8000788:	2200      	movs	r2, #0
 800078a:	701a      	strb	r2, [r3, #0]
				}
		break;
 800078c:	e007      	b.n	800079e <Process_drive_mode+0x6a>
 800078e:	e006      	b.n	800079e <Process_drive_mode+0x6a>

		default:
				ModeCounter_MCU = eco_mode_mcu;
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <Process_drive_mode+0xb4>)
 8000792:	2203      	movs	r2, #3
 8000794:	701a      	strb	r2, [r3, #0]
				ModeCounter_Cluster = eco_mode_cluster;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <Process_drive_mode+0xb0>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]
		break;
 800079c:	bf00      	nop
	}
/* this is for gtake */
	if(Switch_Ios_IN.gear_sw2_IN)
 800079e:	4b0e      	ldr	r3, [pc, #56]	; (80007d8 <Process_drive_mode+0xa4>)
 80007a0:	7a9b      	ldrb	r3, [r3, #10]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d007      	beq.n	80007b6 <Process_drive_mode+0x82>
	{
		ModeCounter_MCU = 3 - ModeCounter_Cluster;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <Process_drive_mode+0xb0>)
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	f1c3 0303 	rsb	r3, r3, #3
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	4b0d      	ldr	r3, [pc, #52]	; (80007e8 <Process_drive_mode+0xb4>)
 80007b2:	701a      	strb	r2, [r3, #0]
 80007b4:	e005      	b.n	80007c2 <Process_drive_mode+0x8e>
	}
	else
	{
		ModeCounter_MCU = eco_mode_mcu;
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <Process_drive_mode+0xb4>)
 80007b8:	2203      	movs	r2, #3
 80007ba:	701a      	strb	r2, [r3, #0]
		ModeCounter_Cluster = eco_mode_cluster;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <Process_drive_mode+0xb0>)
 80007be:	2200      	movs	r2, #0
 80007c0:	701a      	strb	r2, [r3, #0]
	}
/***** for gtake end  **********/

	Process_cluster_drivemode(ModeCounter_Cluster);
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <Process_drive_mode+0xb0>)
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f810 	bl	80007ec <Process_cluster_drivemode>
	Process_motordrive_mode(ModeCounter_Cluster); //for gtake pass ModeCounter_MCU, and for irp pass ModeCounter_Cluster
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <Process_drive_mode+0xb0>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f825 	bl	8000820 <Process_motordrive_mode>

}
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	1fff4888 	.word	0x1fff4888
 80007dc:	1fff43c5 	.word	0x1fff43c5
 80007e0:	1fff48a0 	.word	0x1fff48a0
 80007e4:	1fff43c6 	.word	0x1fff43c6
 80007e8:	1ffe8811 	.word	0x1ffe8811

080007ec <Process_cluster_drivemode>:

void Process_cluster_drivemode(uint8_t mode)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	4603      	mov	r3, r0
 80007f4:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 80007f6:	4b08      	ldr	r3, [pc, #32]	; (8000818 <Process_cluster_drivemode+0x2c>)
 80007f8:	785b      	ldrb	r3, [r3, #1]
 80007fa:	f083 0301 	eor.w	r3, r3, #1
 80007fe:	b2db      	uxtb	r3, r3
 8000800:	2b00      	cmp	r3, #0
 8000802:	d003      	beq.n	800080c <Process_cluster_drivemode+0x20>
		Instrumetcluster_DriveMode_OUT ->DriveMode = mode;
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <Process_cluster_drivemode+0x30>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	79fa      	ldrb	r2, [r7, #7]
 800080a:	701a      	strb	r2, [r3, #0]
}
 800080c:	370c      	adds	r7, #12
 800080e:	46bd      	mov	sp, r7
 8000810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000814:	4770      	bx	lr
 8000816:	bf00      	nop
 8000818:	1fff48f0 	.word	0x1fff48f0
 800081c:	1ffe8800 	.word	0x1ffe8800

08000820 <Process_motordrive_mode>:
void Process_motordrive_mode(uint8_t mode)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b082      	sub	sp, #8
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	71fb      	strb	r3, [r7, #7]
	//motordrive_mode_Gtake(uint8_t mode);
	motordrive_mode_irp(mode);
 800082a:	79fb      	ldrb	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f000 f803 	bl	8000838 <motordrive_mode_irp>
}
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}

08000838 <motordrive_mode_irp>:
	if(!Lights_OUT.brake_switch_out_d)
		Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = mode;
}

void motordrive_mode_irp(uint8_t mode)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
 800083e:	4603      	mov	r3, r0
 8000840:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <motordrive_mode_irp+0x38>)
 8000844:	785b      	ldrb	r3, [r3, #1]
 8000846:	f083 0301 	eor.w	r3, r3, #1
 800084a:	b2db      	uxtb	r3, r3
 800084c:	2b00      	cmp	r3, #0
 800084e:	d009      	beq.n	8000864 <motordrive_mode_irp+0x2c>
		Irp_Mcu_drive_states_29bit->Driving_Profile = mode;
 8000850:	4b08      	ldr	r3, [pc, #32]	; (8000874 <motordrive_mode_irp+0x3c>)
 8000852:	681a      	ldr	r2, [r3, #0]
 8000854:	79fb      	ldrb	r3, [r7, #7]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	b2d9      	uxtb	r1, r3
 800085c:	7813      	ldrb	r3, [r2, #0]
 800085e:	f361 0384 	bfi	r3, r1, #2, #3
 8000862:	7013      	strb	r3, [r2, #0]
}
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	1fff48f0 	.word	0x1fff48f0
 8000874:	1ffe8818 	.word	0x1ffe8818

08000878 <Process_Regen_Control>:

void Process_Regen_Control(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
	static bool prev_input = 0;

	if((prev_input == 0 ) && (Hvac_IN.blower_speed3_IN)) // regen switch is connected to Hvac_IN.blower_speed3_IN
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <Process_Regen_Control+0x7c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	f083 0301 	eor.w	r3, r3, #1
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d026      	beq.n	80008d8 <Process_Regen_Control+0x60>
 800088a:	4b1b      	ldr	r3, [pc, #108]	; (80008f8 <Process_Regen_Control+0x80>)
 800088c:	799b      	ldrb	r3, [r3, #6]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d022      	beq.n	80008d8 <Process_Regen_Control+0x60>
	{
		Relay_Control_Switch_OUT.ac_blower3_OUT = !Relay_Control_Switch_OUT.ac_blower3_OUT;
 8000892:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <Process_Regen_Control+0x84>)
 8000894:	7a9b      	ldrb	r3, [r3, #10]
 8000896:	2b00      	cmp	r3, #0
 8000898:	bf14      	ite	ne
 800089a:	2301      	movne	r3, #1
 800089c:	2300      	moveq	r3, #0
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	f083 0301 	eor.w	r3, r3, #1
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	4b13      	ldr	r3, [pc, #76]	; (80008fc <Process_Regen_Control+0x84>)
 80008ae:	729a      	strb	r2, [r3, #10]
		prev_input = 1;
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <Process_Regen_Control+0x7c>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	701a      	strb	r2, [r3, #0]
		//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0x0;
		//if(Relay_Control_Switch_OUT.ac_blower3_OUT)
		{
			//enable region cmd
			Irp_Mcu_drive_states_29bit-> Regen_On_Brake = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008b6:	4b12      	ldr	r3, [pc, #72]	; (8000900 <Process_Regen_Control+0x88>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <Process_Regen_Control+0x84>)
 80008bc:	7a99      	ldrb	r1, [r3, #10]
 80008be:	7893      	ldrb	r3, [r2, #2]
 80008c0:	f361 0382 	bfi	r3, r1, #2, #1
 80008c4:	7093      	strb	r3, [r2, #2]
			Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008c6:	4b0e      	ldr	r3, [pc, #56]	; (8000900 <Process_Regen_Control+0x88>)
 80008c8:	681a      	ldr	r2, [r3, #0]
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <Process_Regen_Control+0x84>)
 80008cc:	7a99      	ldrb	r1, [r3, #10]
 80008ce:	7893      	ldrb	r3, [r2, #2]
 80008d0:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d4:	7093      	strb	r3, [r2, #2]
 80008d6:	e009      	b.n	80008ec <Process_Regen_Control+0x74>
		}
	}
	else if(Hvac_IN.blower_speed3_IN == 0)
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <Process_Regen_Control+0x80>)
 80008da:	799b      	ldrb	r3, [r3, #6]
 80008dc:	f083 0301 	eor.w	r3, r3, #1
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d002      	beq.n	80008ec <Process_Regen_Control+0x74>
	{
		prev_input = 0;
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <Process_Regen_Control+0x7c>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	701a      	strb	r2, [r3, #0]
	}

}
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	1fff43c7 	.word	0x1fff43c7
 80008f8:	1fff48a0 	.word	0x1fff48a0
 80008fc:	1fff47f0 	.word	0x1fff47f0
 8000900:	1ffe8818 	.word	0x1ffe8818

08000904 <Process_faciaaswitches>:

}


void Process_faciaaswitches(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
	Process_Regen_Control();
 8000908:	f7ff ffb6 	bl	8000878 <Process_Regen_Control>
	//Process_RearDefogger();
	//Process_FogLamp();
	//Process_PowerLatch();
}
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop

08000910 <Process_cabin_temperature>:

void Process_cabin_temperature(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	if((AC_ON_4g == 1) && (error_compressor != 1))
 8000914:	4b2c      	ldr	r3, [pc, #176]	; (80009c8 <Process_cabin_temperature+0xb8>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d054      	beq.n	80009c6 <Process_cabin_temperature+0xb6>
 800091c:	4b2b      	ldr	r3, [pc, #172]	; (80009cc <Process_cabin_temperature+0xbc>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b01      	cmp	r3, #1
 8000924:	d04f      	beq.n	80009c6 <Process_cabin_temperature+0xb6>
	{
		RTC_GetTime(&current_time);
 8000926:	482a      	ldr	r0, [pc, #168]	; (80009d0 <Process_cabin_temperature+0xc0>)
 8000928:	f007 f99c 	bl	8007c64 <RTC_GetTime>
		if((current_time.seconds % 5 == 0) && (current_time.seconds != last_time))
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <Process_cabin_temperature+0xc0>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000934:	b2db      	uxtb	r3, r3
 8000936:	4619      	mov	r1, r3
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <Process_cabin_temperature+0xc4>)
 800093a:	fb83 2301 	smull	r2, r3, r3, r1
 800093e:	105a      	asrs	r2, r3, #1
 8000940:	17cb      	asrs	r3, r1, #31
 8000942:	1ad2      	subs	r2, r2, r3
 8000944:	4613      	mov	r3, r2
 8000946:	009b      	lsls	r3, r3, #2
 8000948:	4413      	add	r3, r2
 800094a:	1aca      	subs	r2, r1, r3
 800094c:	2a00      	cmp	r2, #0
 800094e:	d13a      	bne.n	80009c6 <Process_cabin_temperature+0xb6>
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <Process_cabin_temperature+0xc0>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8000958:	b2db      	uxtb	r3, r3
 800095a:	461a      	mov	r2, r3
 800095c:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <Process_cabin_temperature+0xc8>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	429a      	cmp	r2, r3
 8000962:	d030      	beq.n	80009c6 <Process_cabin_temperature+0xb6>
		{
			last_time = current_time.seconds;
 8000964:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <Process_cabin_temperature+0xc0>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800096c:	b2db      	uxtb	r3, r3
 800096e:	461a      	mov	r2, r3
 8000970:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <Process_cabin_temperature+0xc8>)
 8000972:	701a      	strb	r2, [r3, #0]
			if (prev_compressor_rpm < compressor_rpm)
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <Process_cabin_temperature+0xcc>)
 8000976:	881a      	ldrh	r2, [r3, #0]
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <Process_cabin_temperature+0xd0>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	429a      	cmp	r2, r3
 800097e:	d207      	bcs.n	8000990 <Process_cabin_temperature+0x80>
			{
				prev_compressor_rpm += 500;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <Process_cabin_temperature+0xcc>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b14      	ldr	r3, [pc, #80]	; (80009dc <Process_cabin_temperature+0xcc>)
 800098c:	801a      	strh	r2, [r3, #0]
 800098e:	e00c      	b.n	80009aa <Process_cabin_temperature+0x9a>
			}
			else if (prev_compressor_rpm > compressor_rpm)
 8000990:	4b12      	ldr	r3, [pc, #72]	; (80009dc <Process_cabin_temperature+0xcc>)
 8000992:	881a      	ldrh	r2, [r3, #0]
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <Process_cabin_temperature+0xd0>)
 8000996:	881b      	ldrh	r3, [r3, #0]
 8000998:	429a      	cmp	r2, r3
 800099a:	d906      	bls.n	80009aa <Process_cabin_temperature+0x9a>
			{
				prev_compressor_rpm -= 500;
 800099c:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <Process_cabin_temperature+0xcc>)
 800099e:	881b      	ldrh	r3, [r3, #0]
 80009a0:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b0d      	ldr	r3, [pc, #52]	; (80009dc <Process_cabin_temperature+0xcc>)
 80009a8:	801a      	strh	r2, [r3, #0]
			}

			CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = (prev_compressor_rpm >> 8);
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <Process_cabin_temperature+0xcc>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	0a1b      	lsrs	r3, r3, #8
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	b2da      	uxtb	r2, r3
 80009b4:	4b0b      	ldr	r3, [pc, #44]	; (80009e4 <Process_cabin_temperature+0xd4>)
 80009b6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = prev_compressor_rpm;
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <Process_cabin_temperature+0xcc>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b08      	ldr	r3, [pc, #32]	; (80009e4 <Process_cabin_temperature+0xd4>)
 80009c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		}
	}
}
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	1fff4850 	.word	0x1fff4850
 80009cc:	1fff487c 	.word	0x1fff487c
 80009d0:	1fff4830 	.word	0x1fff4830
 80009d4:	66666667 	.word	0x66666667
 80009d8:	1fff43c4 	.word	0x1fff43c4
 80009dc:	1ffe940c 	.word	0x1ffe940c
 80009e0:	1fff44c0 	.word	0x1fff44c0
 80009e4:	1ffe93c4 	.word	0x1ffe93c4

080009e8 <CCU81_0_IRQHandler>:
//		}
//	}
//}

void Flasher(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
		else if(Combi_Switch_IN.right_indicator_IN)
		{
			Instrument_Cluster_OUT.set_right_indicator = !Instrument_Cluster_OUT.set_right_indicator;
		}*/
	//INTERRUPT_Disable(&INTERRUPT_0);
}
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <Process_State2_Inputs>:

#include "Vcu_Config.h"
#include "Vcu_Process.h"

void Process_State2_Inputs(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 80009f8:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <Process_State2_Inputs+0x30>)
 80009fa:	785b      	ldrb	r3, [r3, #1]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d004      	beq.n	8000a0a <Process_State2_Inputs+0x16>
	{
		Process_vehicleDrive_Inputs();
 8000a00:	f000 f812 	bl	8000a28 <Process_vehicleDrive_Inputs>
		Process_ig2_lights();
 8000a04:	f000 f842 	bl	8000a8c <Process_ig2_lights>
 8000a08:	e00a      	b.n	8000a20 <Process_State2_Inputs+0x2c>
	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 8000a0a:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <Process_State2_Inputs+0x30>)
 8000a0c:	785b      	ldrb	r3, [r3, #1]
 8000a0e:	f083 0301 	eor.w	r3, r3, #1
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d003      	beq.n	8000a20 <Process_State2_Inputs+0x2c>
	{
		Process_vehicleDrive_Inputs_off();
 8000a18:	f000 f820 	bl	8000a5c <Process_vehicleDrive_Inputs_off>
		Process_ig2_lights_off();
 8000a1c:	f000 f844 	bl	8000aa8 <Process_ig2_lights_off>
	}

}
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	1fff4910 	.word	0x1fff4910

08000a28 <Process_vehicleDrive_Inputs>:

void Process_vehicleDrive_Inputs(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = Switch_Ios_IN.gear_sw1_IN;//neutral
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <Process_vehicleDrive_Inputs+0x2c>)
 8000a2e:	7a5a      	ldrb	r2, [r3, #9]
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <Process_vehicleDrive_Inputs+0x30>)
 8000a32:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = Switch_Ios_IN.gear_sw2_IN;//forward
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <Process_vehicleDrive_Inputs+0x2c>)
 8000a36:	7a9a      	ldrb	r2, [r3, #10]
 8000a38:	4b07      	ldr	r3, [pc, #28]	; (8000a58 <Process_vehicleDrive_Inputs+0x30>)
 8000a3a:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = Switch_Ios_IN.gear_sw3_IN;//reverse
 8000a3c:	4b05      	ldr	r3, [pc, #20]	; (8000a54 <Process_vehicleDrive_Inputs+0x2c>)
 8000a3e:	7ada      	ldrb	r2, [r3, #11]
 8000a40:	4b05      	ldr	r3, [pc, #20]	; (8000a58 <Process_vehicleDrive_Inputs+0x30>)
 8000a42:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = Switch_Ios_IN.gear_sw4_IN;//park
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <Process_vehicleDrive_Inputs+0x2c>)
 8000a46:	7b1a      	ldrb	r2, [r3, #12]
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <Process_vehicleDrive_Inputs+0x30>)
 8000a4a:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay;
}
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr
 8000a54:	1fff4888 	.word	0x1fff4888
 8000a58:	1fff4844 	.word	0x1fff4844

08000a5c <Process_vehicleDrive_Inputs_off>:
void Process_vehicleDrive_Inputs_off(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = HIGH;// neutral
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <Process_vehicleDrive_Inputs_off+0x2c>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = LOW;//forward
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <Process_vehicleDrive_Inputs_off+0x2c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = LOW;//reverse
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <Process_vehicleDrive_Inputs_off+0x2c>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = LOW;//park
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <Process_vehicleDrive_Inputs_off+0x2c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay = LOW;
 8000a78:	4b03      	ldr	r3, [pc, #12]	; (8000a88 <Process_vehicleDrive_Inputs_off+0x2c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	701a      	strb	r2, [r3, #0]

}
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	1fff4844 	.word	0x1fff4844

08000a8c <Process_ig2_lights>:

void Process_ig2_lights(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = Switch_Ios_IN.gear_sw3_IN;
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <Process_ig2_lights+0x14>)
 8000a92:	7ada      	ldrb	r2, [r3, #11]
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <Process_ig2_lights+0x18>)
 8000a96:	709a      	strb	r2, [r3, #2]
}
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	1fff4888 	.word	0x1fff4888
 8000aa4:	1fff48f0 	.word	0x1fff48f0

08000aa8 <Process_ig2_lights_off>:

void Process_ig2_lights_off(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = LOW;
 8000aac:	4b03      	ldr	r3, [pc, #12]	; (8000abc <Process_ig2_lights_off+0x14>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	709a      	strb	r2, [r3, #2]
}
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	1fff48f0 	.word	0x1fff48f0

08000ac0 <Process_VcuOutputs_Update>:
#include "can_matrix.h"

int *cluster_door_in = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[0];

void Process_VcuOutputs_Update(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	allFaults_Process();
 8000ac4:	f7ff fcc8 	bl	8000458 <allFaults_Process>

	Vcu_OutPuts.charger_connect_OUT = charger_on();
 8000ac8:	f000 f8dc 	bl	8000c84 <charger_on>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	bf14      	ite	ne
 8000ad2:	2301      	movne	r3, #1
 8000ad4:	2300      	moveq	r3, #0
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	4b2a      	ldr	r3, [pc, #168]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000ada:	709a      	strb	r2, [r3, #2]
	Vcu_OutPuts.IGNITION_1_OUT = Vcu_InPuts.IGNITION_1_IN;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	; (8000b88 <Process_VcuOutputs_Update+0xc8>)
 8000ade:	781a      	ldrb	r2, [r3, #0]
 8000ae0:	4b28      	ldr	r3, [pc, #160]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000ae2:	701a      	strb	r2, [r3, #0]

	Relay_Control_Switch_OUT.elec_handbrake_pwr_out = (Switch_Ios_IN.handbrake_sw_IN || Switch_Ios_IN.electronic_brake_in_d);
 8000ae4:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <Process_VcuOutputs_Update+0xcc>)
 8000ae6:	7a1b      	ldrb	r3, [r3, #8]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d103      	bne.n	8000af4 <Process_VcuOutputs_Update+0x34>
 8000aec:	4b27      	ldr	r3, [pc, #156]	; (8000b8c <Process_VcuOutputs_Update+0xcc>)
 8000aee:	795b      	ldrb	r3, [r3, #5]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <Process_VcuOutputs_Update+0x38>
 8000af4:	2301      	movs	r3, #1
 8000af6:	e000      	b.n	8000afa <Process_VcuOutputs_Update+0x3a>
 8000af8:	2300      	movs	r3, #0
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <Process_VcuOutputs_Update+0xd0>)
 8000b02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	if(!Vcu_OutPuts.charger_connect_OUT)
 8000b06:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b08:	789b      	ldrb	r3, [r3, #2]
 8000b0a:	f083 0301 	eor.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <Process_VcuOutputs_Update+0x5e>
		Vcu_OutPuts.IGNITION_2_OUT = Vcu_InPuts.IGNITION_2_IN;
 8000b14:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <Process_VcuOutputs_Update+0xc8>)
 8000b16:	785a      	ldrb	r2, [r3, #1]
 8000b18:	4b1a      	ldr	r3, [pc, #104]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b1a:	705a      	strb	r2, [r3, #1]
 8000b1c:	e002      	b.n	8000b24 <Process_VcuOutputs_Update+0x64>
	else
		Vcu_OutPuts.IGNITION_2_OUT = false;
 8000b1e:	4b19      	ldr	r3, [pc, #100]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	705a      	strb	r2, [r3, #1]

	if(Vcu_OutPuts.IGNITION_1_OUT || Vcu_OutPuts.IGNITION_2_OUT)
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d103      	bne.n	8000b34 <Process_VcuOutputs_Update+0x74>
 8000b2c:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b2e:	785b      	ldrb	r3, [r3, #1]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d00f      	beq.n	8000b54 <Process_VcuOutputs_Update+0x94>
	{
		Lights_OUT.brake_switch_out_d = !Switch_Ios_IN.brake_sw_in_d;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <Process_VcuOutputs_Update+0xcc>)
 8000b36:	7c9b      	ldrb	r3, [r3, #18]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	bf14      	ite	ne
 8000b3c:	2301      	movne	r3, #1
 8000b3e:	2300      	moveq	r3, #0
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	f083 0301 	eor.w	r3, r3, #1
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0301 	and.w	r3, r3, #1
 8000b4c:	b2da      	uxtb	r2, r3
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <Process_VcuOutputs_Update+0xd4>)
 8000b50:	705a      	strb	r2, [r3, #1]
 8000b52:	e002      	b.n	8000b5a <Process_VcuOutputs_Update+0x9a>
	}
	else
	{
		Lights_OUT.brake_switch_out_d = false;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	; (8000b94 <Process_VcuOutputs_Update+0xd4>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	705a      	strb	r2, [r3, #1]
	}

	if(Vcu_OutPuts.IGNITION_2_OUT && (Vcu_OutPuts.IGNITION_1_OUT == 0))
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d009      	beq.n	8000b76 <Process_VcuOutputs_Update+0xb6>
 8000b62:	4b08      	ldr	r3, [pc, #32]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	f083 0301 	eor.w	r3, r3, #1
 8000b6a:	b2db      	uxtb	r3, r3
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d002      	beq.n	8000b76 <Process_VcuOutputs_Update+0xb6>
	{
		Vcu_OutPuts.IGNITION_1_OUT = 1;
 8000b70:	4b04      	ldr	r3, [pc, #16]	; (8000b84 <Process_VcuOutputs_Update+0xc4>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
	}

	all_doors();
 8000b76:	f000 f80f 	bl	8000b98 <all_doors>

	Process_State1_Inputs();
 8000b7a:	f7ff fc95 	bl	80004a8 <Process_State1_Inputs>
	Process_State2_Inputs();
 8000b7e:	f7ff ff39 	bl	80009f4 <Process_State2_Inputs>
}
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	1fff4910 	.word	0x1fff4910
 8000b88:	1fff5168 	.word	0x1fff5168
 8000b8c:	1fff4888 	.word	0x1fff4888
 8000b90:	1fff47f0 	.word	0x1fff47f0
 8000b94:	1fff48f0 	.word	0x1fff48f0

08000b98 <all_doors>:

void all_doors(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
	int charging = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
	Door_Switch_OUT.driver_door_OUT = Door_Switch_IN.driver_door_IN;
 8000ba2:	4b34      	ldr	r3, [pc, #208]	; (8000c74 <all_doors+0xdc>)
 8000ba4:	785a      	ldrb	r2, [r3, #1]
 8000ba6:	4b34      	ldr	r3, [pc, #208]	; (8000c78 <all_doors+0xe0>)
 8000ba8:	705a      	strb	r2, [r3, #1]
	Door_Switch_OUT.passenger_door_OUT = Door_Switch_IN.passenger_door_IN;
 8000baa:	4b32      	ldr	r3, [pc, #200]	; (8000c74 <all_doors+0xdc>)
 8000bac:	789a      	ldrb	r2, [r3, #2]
 8000bae:	4b32      	ldr	r3, [pc, #200]	; (8000c78 <all_doors+0xe0>)
 8000bb0:	709a      	strb	r2, [r3, #2]
	Door_Switch_OUT.bonnet_OUT = 0;//Door_Switch_IN.bonnet_IN;
 8000bb2:	4b31      	ldr	r3, [pc, #196]	; (8000c78 <all_doors+0xe0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	719a      	strb	r2, [r3, #6]
	Door_Switch_OUT.hatch_OUT = Door_Switch_IN.hatch_IN;
 8000bb8:	4b2e      	ldr	r3, [pc, #184]	; (8000c74 <all_doors+0xdc>)
 8000bba:	795a      	ldrb	r2, [r3, #5]
 8000bbc:	4b2e      	ldr	r3, [pc, #184]	; (8000c78 <all_doors+0xe0>)
 8000bbe:	715a      	strb	r2, [r3, #5]

	if(!Door_Switch_IN.driver_door_IN)
 8000bc0:	4b2c      	ldr	r3, [pc, #176]	; (8000c74 <all_doors+0xdc>)
 8000bc2:	785b      	ldrb	r3, [r3, #1]
 8000bc4:	f083 0301 	eor.w	r3, r3, #1
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <all_doors+0x3e>
		instrument_cluster_doorsvar.driver_door_OUT = (uint8_t)right_door;
 8000bce:	4b2b      	ldr	r3, [pc, #172]	; (8000c7c <all_doors+0xe4>)
 8000bd0:	2202      	movs	r2, #2
 8000bd2:	705a      	strb	r2, [r3, #1]
 8000bd4:	e002      	b.n	8000bdc <all_doors+0x44>
	else
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000bd6:	4b29      	ldr	r3, [pc, #164]	; (8000c7c <all_doors+0xe4>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	705a      	strb	r2, [r3, #1]

	if(!Door_Switch_IN.passenger_door_IN)
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <all_doors+0xdc>)
 8000bde:	789b      	ldrb	r3, [r3, #2]
 8000be0:	f083 0301 	eor.w	r3, r3, #1
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d003      	beq.n	8000bf2 <all_doors+0x5a>
		instrument_cluster_doorsvar.passenger_door_OUT = (uint8_t)left_door;
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <all_doors+0xe4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	709a      	strb	r2, [r3, #2]
 8000bf0:	e002      	b.n	8000bf8 <all_doors+0x60>
	else
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000bf2:	4b22      	ldr	r3, [pc, #136]	; (8000c7c <all_doors+0xe4>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	709a      	strb	r2, [r3, #2]

	if(!Door_Switch_IN.bonnet_IN)
 8000bf8:	4b1e      	ldr	r3, [pc, #120]	; (8000c74 <all_doors+0xdc>)
 8000bfa:	799b      	ldrb	r3, [r3, #6]
 8000bfc:	f083 0301 	eor.w	r3, r3, #1
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d003      	beq.n	8000c0e <all_doors+0x76>
		instrument_cluster_doorsvar.bonnet_OUT = 0;//(uint8_t)hood;
 8000c06:	4b1d      	ldr	r3, [pc, #116]	; (8000c7c <all_doors+0xe4>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	719a      	strb	r2, [r3, #6]
 8000c0c:	e002      	b.n	8000c14 <all_doors+0x7c>
	else
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000c0e:	4b1b      	ldr	r3, [pc, #108]	; (8000c7c <all_doors+0xe4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	719a      	strb	r2, [r3, #6]

	if(!Door_Switch_IN.hatch_IN)
 8000c14:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <all_doors+0xdc>)
 8000c16:	795b      	ldrb	r3, [r3, #5]
 8000c18:	f083 0301 	eor.w	r3, r3, #1
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <all_doors+0x92>
		instrument_cluster_doorsvar.hatch_OUT = (uint8_t)tailgate;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <all_doors+0xe4>)
 8000c24:	2208      	movs	r2, #8
 8000c26:	715a      	strb	r2, [r3, #5]
 8000c28:	e002      	b.n	8000c30 <all_doors+0x98>
	else
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <all_doors+0xe4>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	715a      	strb	r2, [r3, #5]

	charging = 0x20;
 8000c30:	2320      	movs	r3, #32
 8000c32:	607b      	str	r3, [r7, #4]

	if(charger_on())
 8000c34:	f000 f826 	bl	8000c84 <charger_on>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d00c      	beq.n	8000c58 <all_doors+0xc0>
	{
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <all_doors+0xe4>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	705a      	strb	r2, [r3, #1]
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000c44:	4b0d      	ldr	r3, [pc, #52]	; (8000c7c <all_doors+0xe4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	709a      	strb	r2, [r3, #2]
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <all_doors+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	719a      	strb	r2, [r3, #6]
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <all_doors+0xe4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	715a      	strb	r2, [r3, #5]
 8000c56:	e004      	b.n	8000c62 <all_doors+0xca>
	}
	else
	{
		charging = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	607b      	str	r3, [r7, #4]
		charge_complete = 0x00;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <all_doors+0xe8>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	701a      	strb	r2, [r3, #0]
	}

	if(charge_complete)
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <all_doors+0xe8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <all_doors+0xd6>
		charging = 0;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]

	//*cluster_door_in = instrument_cluster_doorsvar.driver_door_OUT + instrument_cluster_doorsvar.passenger_door_OUT + instrument_cluster_doorsvar.bonnet_OUT + instrument_cluster_doorsvar.hatch_OUT + charge_complete + charging;
}
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	1fff48fc 	.word	0x1fff48fc
 8000c78:	1fff4870 	.word	0x1fff4870
 8000c7c:	1fff4920 	.word	0x1fff4920
 8000c80:	1fff489d 	.word	0x1fff489d

08000c84 <charger_on>:


int charger_on(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
	return Vcu_InPuts.charger_connect_IN;
 8000c88:	4b03      	ldr	r3, [pc, #12]	; (8000c98 <charger_on+0x14>)
 8000c8a:	789b      	ldrb	r3, [r3, #2]
	//return charging_connected ;
	return 0;
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	1fff5168 	.word	0x1fff5168

08000c9c <init_hw>:
 */

#include "DAVE.h"

void init_hw(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status = DAVE_STATUS_SUCCESS;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	71fb      	strb	r3, [r7, #7]

	if (init_status == DAVE_STATUS_SUCCESS)
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d104      	bne.n	8000cb6 <init_hw+0x1a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0);
 8000cac:	4807      	ldr	r0, [pc, #28]	; (8000ccc <init_hw+0x30>)
 8000cae:	f008 f96b 	bl	8008f88 <CAN_NODE_Init>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
	}
	if (init_status == DAVE_STATUS_SUCCESS)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d104      	bne.n	8000cc6 <init_hw+0x2a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1);
 8000cbc:	4804      	ldr	r0, [pc, #16]	; (8000cd0 <init_hw+0x34>)
 8000cbe:	f008 f963 	bl	8008f88 <CAN_NODE_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
   }

}
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	08013e54 	.word	0x08013e54
 8000cd0:	08014048 	.word	0x08014048

08000cd4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	460b      	mov	r3, r1
 8000cde:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000ce0:	78fb      	ldrb	r3, [r7, #3]
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	409a      	lsls	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	605a      	str	r2, [r3, #4]
}
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d06:	409a      	lsls	r2, r3
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	605a      	str	r2, [r3, #4]
}
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <DROPPED_IN_12_volt>:
uint8_t adc3_array_counter = 0;

///**************************** THINGS TO UPDATE FIRST *********************************

void DROPPED_IN_12_volt(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
 8000d26:	e00b      	b.n	8000d40 <DROPPED_IN_12_volt+0x28>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
 8000d28:	7afb      	ldrb	r3, [r7, #11]
 8000d2a:	4a21      	ldr	r2, [pc, #132]	; (8000db0 <DROPPED_IN_12_volt+0x98>)
 8000d2c:	4413      	add	r3, r2
 8000d2e:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 8000d32:	461a      	mov	r2, r3
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4413      	add	r3, r2
 8000d38:	60fb      	str	r3, [r7, #12]

void DROPPED_IN_12_volt(void)
{
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d3a:	7afb      	ldrb	r3, [r7, #11]
 8000d3c:	3301      	adds	r3, #1
 8000d3e:	72fb      	strb	r3, [r7, #11]
 8000d40:	7afb      	ldrb	r3, [r7, #11]
 8000d42:	2b31      	cmp	r3, #49	; 0x31
 8000d44:	d9f0      	bls.n	8000d28 <DROPPED_IN_12_volt+0x10>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
	}
	float adc_vout = (avg_receive_data / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	4a1a      	ldr	r2, [pc, #104]	; (8000db4 <DROPPED_IN_12_volt+0x9c>)
 8000d4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d4e:	091b      	lsrs	r3, r3, #4
 8000d50:	4618      	mov	r0, r3
 8000d52:	f010 f8cb 	bl	8010eec <__aeabi_ui2d>
 8000d56:	4602      	mov	r2, r0
 8000d58:	460b      	mov	r3, r1
 8000d5a:	4610      	mov	r0, r2
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 0200 	mov.w	r2, #0
 8000d62:	4b15      	ldr	r3, [pc, #84]	; (8000db8 <DROPPED_IN_12_volt+0xa0>)
 8000d64:	f010 f938 	bl	8010fd8 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4610      	mov	r0, r2
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f010 fc14 	bl	801159c <__aeabi_d2f>
 8000d74:	4603      	mov	r3, r0
 8000d76:	607b      	str	r3, [r7, #4]
	DROPPED_IN_12V = adc_vout / ATTENUATION;
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f010 f8d9 	bl	8010f30 <__aeabi_f2d>
 8000d7e:	4602      	mov	r2, r0
 8000d80:	460b      	mov	r3, r1
 8000d82:	4610      	mov	r0, r2
 8000d84:	4619      	mov	r1, r3
 8000d86:	a308      	add	r3, pc, #32	; (adr r3, 8000da8 <DROPPED_IN_12_volt+0x90>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f010 fa4e 	bl	801122c <__aeabi_ddiv>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f010 fc00 	bl	801159c <__aeabi_d2f>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	4b07      	ldr	r3, [pc, #28]	; (8000dbc <DROPPED_IN_12_volt+0xa4>)
 8000da0:	601a      	str	r2, [r3, #0]
}
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	e147ae14 	.word	0xe147ae14
 8000dac:	3fbe147a 	.word	0x3fbe147a
 8000db0:	1fff49f0 	.word	0x1fff49f0
 8000db4:	51eb851f 	.word	0x51eb851f
 8000db8:	3f840000 	.word	0x3f840000
 8000dbc:	1fff43c8 	.word	0x1fff43c8

08000dc0 <convert_raw_data_into_current>:

void convert_raw_data_into_current(void)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b085      	sub	sp, #20
 8000dc4:	af00      	add	r7, sp, #0
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000dc6:	4864      	ldr	r0, [pc, #400]	; (8000f58 <convert_raw_data_into_current+0x198>)
 8000dc8:	2100      	movs	r1, #0
 8000dca:	2240      	movs	r2, #64	; 0x40
 8000dcc:	f010 ff3d 	bl	8011c4a <memset>
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000dd0:	4862      	ldr	r0, [pc, #392]	; (8000f5c <convert_raw_data_into_current+0x19c>)
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	2240      	movs	r2, #64	; 0x40
 8000dd6:	f010 ff38 	bl	8011c4a <memset>

	for(int i = 0; i < 16; i++)
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	e0ac      	b.n	8000f3a <convert_raw_data_into_current+0x17a>
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	72fb      	strb	r3, [r7, #11]
 8000de4:	e026      	b.n	8000e34 <convert_raw_data_into_current+0x74>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
 8000de6:	4a5c      	ldr	r2, [pc, #368]	; (8000f58 <convert_raw_data_into_current+0x198>)
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	7afa      	ldrb	r2, [r7, #11]
 8000df0:	485b      	ldr	r0, [pc, #364]	; (8000f60 <convert_raw_data_into_current+0x1a0>)
 8000df2:	68f9      	ldr	r1, [r7, #12]
 8000df4:	2432      	movs	r4, #50	; 0x32
 8000df6:	fb04 f101 	mul.w	r1, r4, r1
 8000dfa:	440a      	add	r2, r1
 8000dfc:	4402      	add	r2, r0
 8000dfe:	7812      	ldrb	r2, [r2, #0]
 8000e00:	441a      	add	r2, r3
 8000e02:	4955      	ldr	r1, [pc, #340]	; (8000f58 <convert_raw_data_into_current+0x198>)
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
 8000e0a:	4a54      	ldr	r2, [pc, #336]	; (8000f5c <convert_raw_data_into_current+0x19c>)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e12:	7afa      	ldrb	r2, [r7, #11]
 8000e14:	4853      	ldr	r0, [pc, #332]	; (8000f64 <convert_raw_data_into_current+0x1a4>)
 8000e16:	68f9      	ldr	r1, [r7, #12]
 8000e18:	2432      	movs	r4, #50	; 0x32
 8000e1a:	fb04 f101 	mul.w	r1, r4, r1
 8000e1e:	440a      	add	r2, r1
 8000e20:	4402      	add	r2, r0
 8000e22:	7812      	ldrb	r2, [r2, #0]
 8000e24:	441a      	add	r2, r3
 8000e26:	494d      	ldr	r1, [pc, #308]	; (8000f5c <convert_raw_data_into_current+0x19c>)
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000e2e:	7afb      	ldrb	r3, [r7, #11]
 8000e30:	3301      	adds	r3, #1
 8000e32:	72fb      	strb	r3, [r7, #11]
 8000e34:	7afb      	ldrb	r3, [r7, #11]
 8000e36:	2b31      	cmp	r3, #49	; 0x31
 8000e38:	d9d5      	bls.n	8000de6 <convert_raw_data_into_current+0x26>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
		}

		float adc_vout = (ADS2_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000e3a:	4a47      	ldr	r2, [pc, #284]	; (8000f58 <convert_raw_data_into_current+0x198>)
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e42:	4a49      	ldr	r2, [pc, #292]	; (8000f68 <convert_raw_data_into_current+0x1a8>)
 8000e44:	fba2 2303 	umull	r2, r3, r2, r3
 8000e48:	091b      	lsrs	r3, r3, #4
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f010 f84e 	bl	8010eec <__aeabi_ui2d>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	4610      	mov	r0, r2
 8000e56:	4619      	mov	r1, r3
 8000e58:	f04f 0200 	mov.w	r2, #0
 8000e5c:	4b43      	ldr	r3, [pc, #268]	; (8000f6c <convert_raw_data_into_current+0x1ac>)
 8000e5e:	f010 f8bb 	bl	8010fd8 <__aeabi_dmul>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	4610      	mov	r0, r2
 8000e68:	4619      	mov	r1, r3
 8000e6a:	f010 fb97 	bl	801159c <__aeabi_d2f>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	607b      	str	r3, [r7, #4]
		adc2_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f010 f85c 	bl	8010f30 <__aeabi_f2d>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	a331      	add	r3, pc, #196	; (adr r3, 8000f48 <convert_raw_data_into_current+0x188>)
 8000e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e86:	f010 f9d1 	bl	801122c <__aeabi_ddiv>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4610      	mov	r0, r2
 8000e90:	4619      	mov	r1, r3
 8000e92:	a32f      	add	r3, pc, #188	; (adr r3, 8000f50 <convert_raw_data_into_current+0x190>)
 8000e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e98:	f010 f9c8 	bl	801122c <__aeabi_ddiv>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4610      	mov	r0, r2
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	f010 fb7a 	bl	801159c <__aeabi_d2f>
 8000ea8:	4601      	mov	r1, r0
 8000eaa:	4a31      	ldr	r2, [pc, #196]	; (8000f70 <convert_raw_data_into_current+0x1b0>)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	4413      	add	r3, r2
 8000eb2:	6019      	str	r1, [r3, #0]

		adc_vout = 0;
 8000eb4:	f04f 0300 	mov.w	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000eba:	4a28      	ldr	r2, [pc, #160]	; (8000f5c <convert_raw_data_into_current+0x19c>)
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	4a29      	ldr	r2, [pc, #164]	; (8000f68 <convert_raw_data_into_current+0x1a8>)
 8000ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec8:	091b      	lsrs	r3, r3, #4
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f010 f80e 	bl	8010eec <__aeabi_ui2d>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	460b      	mov	r3, r1
 8000ed4:	4610      	mov	r0, r2
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4b23      	ldr	r3, [pc, #140]	; (8000f6c <convert_raw_data_into_current+0x1ac>)
 8000ede:	f010 f87b 	bl	8010fd8 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4610      	mov	r0, r2
 8000ee8:	4619      	mov	r1, r3
 8000eea:	f010 fb57 	bl	801159c <__aeabi_d2f>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	607b      	str	r3, [r7, #4]
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f010 f81c 	bl	8010f30 <__aeabi_f2d>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	460b      	mov	r3, r1
 8000efc:	4610      	mov	r0, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	a311      	add	r3, pc, #68	; (adr r3, 8000f48 <convert_raw_data_into_current+0x188>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	f010 f991 	bl	801122c <__aeabi_ddiv>
 8000f0a:	4602      	mov	r2, r0
 8000f0c:	460b      	mov	r3, r1
 8000f0e:	4610      	mov	r0, r2
 8000f10:	4619      	mov	r1, r3
 8000f12:	a30f      	add	r3, pc, #60	; (adr r3, 8000f50 <convert_raw_data_into_current+0x190>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f010 f988 	bl	801122c <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f010 fb3a 	bl	801159c <__aeabi_d2f>
 8000f28:	4601      	mov	r1, r0
 8000f2a:	4a12      	ldr	r2, [pc, #72]	; (8000f74 <convert_raw_data_into_current+0x1b4>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	6019      	str	r1, [r3, #0]
void convert_raw_data_into_current(void)
{
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	3301      	adds	r3, #1
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	2b0f      	cmp	r3, #15
 8000f3e:	f77f af4f 	ble.w	8000de0 <convert_raw_data_into_current+0x20>

		adc_vout = 0;
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
	}
}
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd90      	pop	{r4, r7, pc}
 8000f48:	33333333 	.word	0x33333333
 8000f4c:	4062e333 	.word	0x4062e333
 8000f50:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f54:	3f40624d 	.word	0x3f40624d
 8000f58:	1fff4d10 	.word	0x1fff4d10
 8000f5c:	1fff4d50 	.word	0x1fff4d50
 8000f60:	1fff4e24 	.word	0x1fff4e24
 8000f64:	1fff49f0 	.word	0x1fff49f0
 8000f68:	51eb851f 	.word	0x51eb851f
 8000f6c:	3f840000 	.word	0x3f840000
 8000f70:	1fff4d94 	.word	0x1fff4d94
 8000f74:	1fff4928 	.word	0x1fff4928

08000f78 <SPI_ADC_ReadAllData>:

void SPI_ADC_ReadAllData(uint8_t ADCMode)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b082      	sub	sp, #8
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
	if(ADC_AUTO1 == ADCMode)
 8000f82:	79fb      	ldrb	r3, [r7, #7]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d00d      	beq.n	8000fa4 <SPI_ADC_ReadAllData+0x2c>
	{
		//change operating mode to AUTO1
	}
	else if(ADC_AUTO2 == ADCMode)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d108      	bne.n	8000fa0 <SPI_ADC_ReadAllData+0x28>
	{
		//Add ADC1 after hardware changes
		SPI_ADS7961_AUTO2_MODE(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
 8000f8e:	2002      	movs	r0, #2
 8000f90:	2106      	movs	r1, #6
 8000f92:	f000 f8e9 	bl	8001168 <SPI_ADS7961_AUTO2_MODE>
		SPI_ADS7961_AUTO2_MODE(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
 8000f96:	2005      	movs	r0, #5
 8000f98:	2106      	movs	r1, #6
 8000f9a:	f000 f8e5 	bl	8001168 <SPI_ADS7961_AUTO2_MODE>
 8000f9e:	e001      	b.n	8000fa4 <SPI_ADC_ReadAllData+0x2c>
	}
	else //manual mode
	{
		//configure manual mode
		SPI_ADC_MANUAL_MODE();
 8000fa0:	f000 f806 	bl	8000fb0 <SPI_ADC_MANUAL_MODE>
	}

	//do not call this right now you can call this when it is in use.
	convert_raw_data_into_current();
 8000fa4:	f7ff ff0c 	bl	8000dc0 <convert_raw_data_into_current>
}
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop

08000fb0 <SPI_ADC_MANUAL_MODE>:

void SPI_ADC_MANUAL_MODE(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
	//ADC_Read_AllChannel(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
	//ADC_Read_AllChannel(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
	ADC_Read_by_Channel(ADS3_Port2,ADS3_Pin,12);//pass Ads cs port , pin and channel
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	2106      	movs	r1, #6
 8000fb8:	220c      	movs	r2, #12
 8000fba:	f000 f9ab 	bl	8001314 <ADC_Read_by_Channel>
}
 8000fbe:	bd80      	pop	{r7, pc}

08000fc0 <ADS7861_MANUAL_MODE_PKT>:

uint16_t ADS7861_MANUAL_MODE_PKT(uint16_t channel) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]

	ADS7961Frame_t transmitPkt;
	transmitPkt.Bit.operating_mode=1;
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f362 1307 	bfi	r3, r2, #4, #4
 8000fd2:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.enable_D0_to_D6=0;
 8000fd4:	7b7b      	ldrb	r3, [r7, #13]
 8000fd6:	f36f 03c3 	bfc	r3, #3, #1
 8000fda:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.channel_selection=channel;
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	f003 030f 	and.w	r3, r3, #15
 8000fe4:	b2da      	uxtb	r2, r3
 8000fe6:	89bb      	ldrh	r3, [r7, #12]
 8000fe8:	f362 13ca 	bfi	r3, r2, #7, #4
 8000fec:	81bb      	strh	r3, [r7, #12]
	transmitPkt.Bit.input_range=0;
 8000fee:	7b3b      	ldrb	r3, [r7, #12]
 8000ff0:	f36f 1386 	bfc	r3, #6, #1
 8000ff4:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.device_operation=0;
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	f36f 1345 	bfc	r3, #5, #1
 8000ffc:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.output_mode=0;
 8000ffe:	7b3b      	ldrb	r3, [r7, #12]
 8001000:	f36f 1304 	bfc	r3, #4, #1
 8001004:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.GPIO_Output=0;
 8001006:	7b3b      	ldrb	r3, [r7, #12]
 8001008:	f36f 0303 	bfc	r3, #0, #4
 800100c:	733b      	strb	r3, [r7, #12]
	return  transmitPkt.F_Data;
 800100e:	89bb      	ldrh	r3, [r7, #12]
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <SPI_ADS7961_AUTO2_Init>:
		}
	}
}

void SPI_ADS7961_AUTO2_Init(uint8_t temp_port_num ,uint8_t pin_number)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	; 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	460a      	mov	r2, r1
 8001026:	71fb      	strb	r3, [r7, #7]
 8001028:	4613      	mov	r3, r2
 800102a:	71bb      	strb	r3, [r7, #6]
	XMC_GPIO_PORT_t * temp_ptr;

	if(temp_port_num == 5)
 800102c:	79fb      	ldrb	r3, [r7, #7]
 800102e:	2b05      	cmp	r3, #5
 8001030:	d107      	bne.n	8001042 <SPI_ADS7961_AUTO2_Init+0x26>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8001032:	4b48      	ldr	r3, [pc, #288]	; (8001154 <SPI_ADS7961_AUTO2_Init+0x138>)
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8001036:	4848      	ldr	r0, [pc, #288]	; (8001158 <SPI_ADS7961_AUTO2_Init+0x13c>)
 8001038:	2100      	movs	r1, #0
 800103a:	2240      	movs	r2, #64	; 0x40
 800103c:	f010 fe05 	bl	8011c4a <memset>
 8001040:	e009      	b.n	8001056 <SPI_ADS7961_AUTO2_Init+0x3a>
	}
	else if(temp_port_num == 2)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	2b02      	cmp	r3, #2
 8001046:	d106      	bne.n	8001056 <SPI_ADS7961_AUTO2_Init+0x3a>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8001048:	4b44      	ldr	r3, [pc, #272]	; (800115c <SPI_ADS7961_AUTO2_Init+0x140>)
 800104a:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 800104c:	4844      	ldr	r0, [pc, #272]	; (8001160 <SPI_ADS7961_AUTO2_Init+0x144>)
 800104e:	2100      	movs	r1, #0
 8001050:	2240      	movs	r2, #64	; 0x40
 8001052:	f010 fdfa 	bl	8011c4a <memset>
	}

	uint8_t SendData[2] = { 0x3C, 0x00 }; //{MODE_CONTROL_AUTO2 >> 8, MODE_CONTROL_AUTO2 && 0xFF};
 8001056:	233c      	movs	r3, #60	; 0x3c
 8001058:	753b      	strb	r3, [r7, #20]
 800105a:	2300      	movs	r3, #0
 800105c:	757b      	strb	r3, [r7, #21]
	uint8_t SendData1[2];

	if(temp_port_num == 5)
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	2b05      	cmp	r3, #5
 8001062:	d104      	bne.n	800106e <SPI_ADS7961_AUTO2_Init+0x52>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8001064:	2393      	movs	r3, #147	; 0x93
 8001066:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0xC0;
 8001068:	23c0      	movs	r3, #192	; 0xc0
 800106a:	747b      	strb	r3, [r7, #17]
 800106c:	e006      	b.n	800107c <SPI_ADS7961_AUTO2_Init+0x60>
	}
	else if(temp_port_num == 2)
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d103      	bne.n	800107c <SPI_ADS7961_AUTO2_Init+0x60>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8001074:	2393      	movs	r3, #147	; 0x93
 8001076:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0x00;
 8001078:	2300      	movs	r3, #0
 800107a:	747b      	strb	r3, [r7, #17]
	}
	uint8_t SendData2[2] = {0x00,0x00} ; //{CONTINUE_MODE_PREVIOUS >>8, CONTINUE_MODE_PREVIOUS && 0xFF};
 800107c:	2300      	movs	r3, #0
 800107e:	733b      	strb	r3, [r7, #12]
 8001080:	2300      	movs	r3, #0
 8001082:	737b      	strb	r3, [r7, #13]

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fe23 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 800108e:	79bb      	ldrb	r3, [r7, #6]
 8001090:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001092:	4619      	mov	r1, r3
 8001094:	f7ff fe2e 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
 800109c:	e002      	b.n	80010a4 <SPI_ADS7961_AUTO2_Init+0x88>
 800109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a0:	3301      	adds	r3, #1
 80010a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80010a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010a6:	2b09      	cmp	r3, #9
 80010a8:	dcf9      	bgt.n	800109e <SPI_ADS7961_AUTO2_Init+0x82>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 2);
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	482d      	ldr	r0, [pc, #180]	; (8001164 <SPI_ADS7961_AUTO2_Init+0x148>)
 80010b0:	4619      	mov	r1, r3
 80010b2:	2202      	movs	r2, #2
 80010b4:	f006 f8b4 	bl	8007220 <SPI_MASTER_Transmit>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 80010b8:	79bb      	ldrb	r3, [r7, #6]
 80010ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010bc:	4619      	mov	r1, r3
 80010be:	f7ff fe09 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>

    XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 80010c2:	79bb      	ldrb	r3, [r7, #6]
 80010c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010c6:	4619      	mov	r1, r3
 80010c8:	f7ff fe14 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 80010cc:	2300      	movs	r3, #0
 80010ce:	627b      	str	r3, [r7, #36]	; 0x24
 80010d0:	e002      	b.n	80010d8 <SPI_ADS7961_AUTO2_Init+0xbc>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d4:	3301      	adds	r3, #1
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24
 80010d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010da:	2b09      	cmp	r3, #9
 80010dc:	dcf9      	bgt.n	80010d2 <SPI_ADS7961_AUTO2_Init+0xb6>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4820      	ldr	r0, [pc, #128]	; (8001164 <SPI_ADS7961_AUTO2_Init+0x148>)
 80010e4:	4619      	mov	r1, r3
 80010e6:	2202      	movs	r2, #2
 80010e8:	f006 f89a 	bl	8007220 <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 80010ec:	2300      	movs	r3, #0
 80010ee:	623b      	str	r3, [r7, #32]
 80010f0:	e002      	b.n	80010f8 <SPI_ADS7961_AUTO2_Init+0xdc>
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	3301      	adds	r3, #1
 80010f6:	623b      	str	r3, [r7, #32]
 80010f8:	6a3b      	ldr	r3, [r7, #32]
 80010fa:	2b09      	cmp	r3, #9
 80010fc:	dcf9      	bgt.n	80010f2 <SPI_ADS7961_AUTO2_Init+0xd6>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 80010fe:	79bb      	ldrb	r3, [r7, #6]
 8001100:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001102:	4619      	mov	r1, r3
 8001104:	f7ff fde6 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001108:	79bb      	ldrb	r3, [r7, #6]
 800110a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fdf1 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
 8001116:	e002      	b.n	800111e <SPI_ADS7961_AUTO2_Init+0x102>
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	3301      	adds	r3, #1
 800111c:	61fb      	str	r3, [r7, #28]
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	2b09      	cmp	r3, #9
 8001122:	dcf9      	bgt.n	8001118 <SPI_ADS7961_AUTO2_Init+0xfc>
	// for CONTINUE MODE PREVIOUS
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData2, 2);
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	480e      	ldr	r0, [pc, #56]	; (8001164 <SPI_ADS7961_AUTO2_Init+0x148>)
 800112a:	4619      	mov	r1, r3
 800112c:	2202      	movs	r2, #2
 800112e:	f006 f877 	bl	8007220 <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
 8001136:	e002      	b.n	800113e <SPI_ADS7961_AUTO2_Init+0x122>
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	3301      	adds	r3, #1
 800113c:	61bb      	str	r3, [r7, #24]
 800113e:	69bb      	ldr	r3, [r7, #24]
 8001140:	2b09      	cmp	r3, #9
 8001142:	dcf9      	bgt.n	8001138 <SPI_ADS7961_AUTO2_Init+0x11c>

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001144:	79bb      	ldrb	r3, [r7, #6]
 8001146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fdc3 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
}
 800114e:	3730      	adds	r7, #48	; 0x30
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	48028500 	.word	0x48028500
 8001158:	1fff4d10 	.word	0x1fff4d10
 800115c:	48028200 	.word	0x48028200
 8001160:	1fff4d50 	.word	0x1fff4d50
 8001164:	1ffe89ac 	.word	0x1ffe89ac

08001168 <SPI_ADS7961_AUTO2_MODE>:

//
void SPI_ADS7961_AUTO2_MODE(uint8_t temp_port_num, uint8_t pin_number)
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b08b      	sub	sp, #44	; 0x2c
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	460a      	mov	r2, r1
 8001172:	71fb      	strb	r3, [r7, #7]
 8001174:	4613      	mov	r3, r2
 8001176:	71bb      	strb	r3, [r7, #6]
	uint8_t loop = 16;
 8001178:	2310      	movs	r3, #16
 800117a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ReadData[2];
//	if(flag==false)
//	{
	SPI_ADS7961_AUTO2_Init(temp_port_num, pin_number);
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	79bb      	ldrb	r3, [r7, #6]
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	f7ff ff49 	bl	800101c <SPI_ADS7961_AUTO2_Init>
	flag = true;
 800118a:	4b58      	ldr	r3, [pc, #352]	; (80012ec <SPI_ADS7961_AUTO2_MODE+0x184>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
//	}

	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	2b05      	cmp	r3, #5
 8001194:	d102      	bne.n	800119c <SPI_ADS7961_AUTO2_MODE+0x34>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8001196:	4b56      	ldr	r3, [pc, #344]	; (80012f0 <SPI_ADS7961_AUTO2_MODE+0x188>)
 8001198:	623b      	str	r3, [r7, #32]
 800119a:	e007      	b.n	80011ac <SPI_ADS7961_AUTO2_MODE+0x44>
	}
	else if (temp_port_num == 2)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d104      	bne.n	80011ac <SPI_ADS7961_AUTO2_MODE+0x44>
	{
		temp_ptr = XMC_GPIO_PORT2;
 80011a2:	4b54      	ldr	r3, [pc, #336]	; (80012f4 <SPI_ADS7961_AUTO2_MODE+0x18c>)
 80011a4:	623b      	str	r3, [r7, #32]
		loop = 13;
 80011a6:	230d      	movs	r3, #13
 80011a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(adc2_array_counter > 49)
 80011ac:	4b52      	ldr	r3, [pc, #328]	; (80012f8 <SPI_ADS7961_AUTO2_MODE+0x190>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b31      	cmp	r3, #49	; 0x31
 80011b2:	d902      	bls.n	80011ba <SPI_ADS7961_AUTO2_MODE+0x52>
	{
		adc2_array_counter = 0;
 80011b4:	4b50      	ldr	r3, [pc, #320]	; (80012f8 <SPI_ADS7961_AUTO2_MODE+0x190>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	}

	if(adc3_array_counter > 49)
 80011ba:	4b50      	ldr	r3, [pc, #320]	; (80012fc <SPI_ADS7961_AUTO2_MODE+0x194>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	2b31      	cmp	r3, #49	; 0x31
 80011c0:	d902      	bls.n	80011c8 <SPI_ADS7961_AUTO2_MODE+0x60>
	{
		adc3_array_counter = 0;
 80011c2:	4b4e      	ldr	r3, [pc, #312]	; (80012fc <SPI_ADS7961_AUTO2_MODE+0x194>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
 80011cc:	e087      	b.n	80012de <SPI_ADS7961_AUTO2_MODE+0x176>
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80011ce:	2300      	movs	r3, #0
 80011d0:	76fb      	strb	r3, [r7, #27]
 80011d2:	e069      	b.n	80012a8 <SPI_ADS7961_AUTO2_MODE+0x140>
		{
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80011d4:	79bb      	ldrb	r3, [r7, #6]
 80011d6:	6a38      	ldr	r0, [r7, #32]
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fd7b 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
			//for (int i = 0; i > 9; i++);

			XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	6a38      	ldr	r0, [r7, #32]
 80011e2:	4619      	mov	r1, r3
 80011e4:	f7ff fd86 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
			for (int i = 0; i > 2; i++);
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	e002      	b.n	80011f4 <SPI_ADS7961_AUTO2_MODE+0x8c>
 80011ee:	697b      	ldr	r3, [r7, #20]
 80011f0:	3301      	adds	r3, #1
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	dcf9      	bgt.n	80011ee <SPI_ADS7961_AUTO2_MODE+0x86>
			SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 80011fa:	f107 030c 	add.w	r3, r7, #12
 80011fe:	4840      	ldr	r0, [pc, #256]	; (8001300 <SPI_ADS7961_AUTO2_MODE+0x198>)
 8001200:	4619      	mov	r1, r3
 8001202:	2202      	movs	r2, #2
 8001204:	f006 f826 	bl	8007254 <SPI_MASTER_Receive>
			for (int i = 0; i > 2; i++);
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	e002      	b.n	8001214 <SPI_ADS7961_AUTO2_MODE+0xac>
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	3301      	adds	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
 8001214:	693b      	ldr	r3, [r7, #16]
 8001216:	2b02      	cmp	r3, #2
 8001218:	dcf9      	bgt.n	800120e <SPI_ADS7961_AUTO2_MODE+0xa6>
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	6a38      	ldr	r0, [r7, #32]
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fd58 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>

			if (temp_port_num == 5)
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b05      	cmp	r3, #5
 8001228:	d11c      	bne.n	8001264 <SPI_ADS7961_AUTO2_MODE+0xfc>
			{
				ADS2_receive_data[channel_count][adc2_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 800122a:	7efb      	ldrb	r3, [r7, #27]
 800122c:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <SPI_ADS7961_AUTO2_MODE+0x190>)
 800122e:	7812      	ldrb	r2, [r2, #0]
 8001230:	4614      	mov	r4, r2
 8001232:	7b3a      	ldrb	r2, [r7, #12]
 8001234:	0112      	lsls	r2, r2, #4
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	7b7a      	ldrb	r2, [r7, #13]
 800123a:	0912      	lsrs	r2, r2, #4
 800123c:	b2d2      	uxtb	r2, r2
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	430a      	orrs	r2, r1
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	b2d0      	uxtb	r0, r2
 8001246:	4a2f      	ldr	r2, [pc, #188]	; (8001304 <SPI_ADS7961_AUTO2_MODE+0x19c>)
 8001248:	2132      	movs	r1, #50	; 0x32
 800124a:	fb01 f303 	mul.w	r3, r1, r3
 800124e:	4423      	add	r3, r4
 8001250:	4413      	add	r3, r2
 8001252:	4602      	mov	r2, r0
 8001254:	701a      	strb	r2, [r3, #0]
				ADS2_recive_channel[channel_count] = ((ReadData[0] & 0xF0) >> 4); //uncomment channel for debugging
 8001256:	7efb      	ldrb	r3, [r7, #27]
 8001258:	7b3a      	ldrb	r2, [r7, #12]
 800125a:	0912      	lsrs	r2, r2, #4
 800125c:	b2d1      	uxtb	r1, r2
 800125e:	4a2a      	ldr	r2, [pc, #168]	; (8001308 <SPI_ADS7961_AUTO2_MODE+0x1a0>)
 8001260:	54d1      	strb	r1, [r2, r3]
 8001262:	e01e      	b.n	80012a2 <SPI_ADS7961_AUTO2_MODE+0x13a>

//				ADS2_avg_receive_data[channel_count] += ADS2_receive_data[channel_count];
			}
			else if (temp_port_num == 2)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	2b02      	cmp	r3, #2
 8001268:	d11b      	bne.n	80012a2 <SPI_ADS7961_AUTO2_MODE+0x13a>
			{
				ADS3_receive_data[channel_count][adc3_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 800126a:	7efb      	ldrb	r3, [r7, #27]
 800126c:	4a23      	ldr	r2, [pc, #140]	; (80012fc <SPI_ADS7961_AUTO2_MODE+0x194>)
 800126e:	7812      	ldrb	r2, [r2, #0]
 8001270:	4614      	mov	r4, r2
 8001272:	7b3a      	ldrb	r2, [r7, #12]
 8001274:	0112      	lsls	r2, r2, #4
 8001276:	b2d1      	uxtb	r1, r2
 8001278:	7b7a      	ldrb	r2, [r7, #13]
 800127a:	0912      	lsrs	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	b2d2      	uxtb	r2, r2
 8001280:	430a      	orrs	r2, r1
 8001282:	b2d2      	uxtb	r2, r2
 8001284:	b2d0      	uxtb	r0, r2
 8001286:	4a21      	ldr	r2, [pc, #132]	; (800130c <SPI_ADS7961_AUTO2_MODE+0x1a4>)
 8001288:	2132      	movs	r1, #50	; 0x32
 800128a:	fb01 f303 	mul.w	r3, r1, r3
 800128e:	4423      	add	r3, r4
 8001290:	4413      	add	r3, r2
 8001292:	4602      	mov	r2, r0
 8001294:	701a      	strb	r2, [r3, #0]
				ADS3_recive_channel[channel_count] = ((ReadData[0] & 0xF0) >> 4); //uncomment channel for debugging
 8001296:	7efb      	ldrb	r3, [r7, #27]
 8001298:	7b3a      	ldrb	r2, [r7, #12]
 800129a:	0912      	lsrs	r2, r2, #4
 800129c:	b2d1      	uxtb	r1, r2
 800129e:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <SPI_ADS7961_AUTO2_MODE+0x1a8>)
 80012a0:	54d1      	strb	r1, [r2, r3]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80012a2:	7efb      	ldrb	r3, [r7, #27]
 80012a4:	3301      	adds	r3, #1
 80012a6:	76fb      	strb	r3, [r7, #27]
 80012a8:	7efa      	ldrb	r2, [r7, #27]
 80012aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d390      	bcc.n	80011d4 <SPI_ADS7961_AUTO2_MODE+0x6c>

//				ADS3_avg_receive_data[channel_count] += ADS3_receive_data[channel_count];
			}
		}

		if (temp_port_num == 5)
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	2b05      	cmp	r3, #5
 80012b6:	d106      	bne.n	80012c6 <SPI_ADS7961_AUTO2_MODE+0x15e>
		{
			adc2_array_counter++;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <SPI_ADS7961_AUTO2_MODE+0x190>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	3301      	adds	r3, #1
 80012be:	b2da      	uxtb	r2, r3
 80012c0:	4b0d      	ldr	r3, [pc, #52]	; (80012f8 <SPI_ADS7961_AUTO2_MODE+0x190>)
 80012c2:	701a      	strb	r2, [r3, #0]
 80012c4:	e008      	b.n	80012d8 <SPI_ADS7961_AUTO2_MODE+0x170>
		}
		else if (temp_port_num == 2)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d105      	bne.n	80012d8 <SPI_ADS7961_AUTO2_MODE+0x170>
		{
			adc3_array_counter++;
 80012cc:	4b0b      	ldr	r3, [pc, #44]	; (80012fc <SPI_ADS7961_AUTO2_MODE+0x194>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	3301      	adds	r3, #1
 80012d2:	b2da      	uxtb	r2, r3
 80012d4:	4b09      	ldr	r3, [pc, #36]	; (80012fc <SPI_ADS7961_AUTO2_MODE+0x194>)
 80012d6:	701a      	strb	r2, [r3, #0]
	{
		adc3_array_counter = 0;
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3301      	adds	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	f77f af74 	ble.w	80011ce <SPI_ADS7961_AUTO2_MODE+0x66>
		else if (temp_port_num == 2)
		{
			adc3_array_counter++;
		}
	}
}
 80012e6:	372c      	adds	r7, #44	; 0x2c
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd90      	pop	{r4, r7, pc}
 80012ec:	1fff43cc 	.word	0x1fff43cc
 80012f0:	48028500 	.word	0x48028500
 80012f4:	48028200 	.word	0x48028200
 80012f8:	1fff43cd 	.word	0x1fff43cd
 80012fc:	1fff43ce 	.word	0x1fff43ce
 8001300:	1ffe89ac 	.word	0x1ffe89ac
 8001304:	1fff4e24 	.word	0x1fff4e24
 8001308:	1fff5154 	.word	0x1fff5154
 800130c:	1fff49f0 	.word	0x1fff49f0
 8001310:	1fff5144 	.word	0x1fff5144

08001314 <ADC_Read_by_Channel>:

void ADC_Read_by_Channel(uint8_t temp_port_num, uint8_t pin_number, uint8_t channel)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08e      	sub	sp, #56	; 0x38
 8001318:	af00      	add	r7, sp, #0
 800131a:	4603      	mov	r3, r0
 800131c:	71fb      	strb	r3, [r7, #7]
 800131e:	460b      	mov	r3, r1
 8001320:	71bb      	strb	r3, [r7, #6]
 8001322:	4613      	mov	r3, r2
 8001324:	717b      	strb	r3, [r7, #5]
	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b05      	cmp	r3, #5
 800132a:	d107      	bne.n	800133c <ADC_Read_by_Channel+0x28>
	{
		temp_ptr = XMC_GPIO_PORT2;
 800132c:	4b51      	ldr	r3, [pc, #324]	; (8001474 <ADC_Read_by_Channel+0x160>)
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
		ADS2_avg_receive_data[channel] = 0;
 8001330:	797b      	ldrb	r3, [r7, #5]
 8001332:	4a51      	ldr	r2, [pc, #324]	; (8001478 <ADC_Read_by_Channel+0x164>)
 8001334:	2100      	movs	r1, #0
 8001336:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 800133a:	e009      	b.n	8001350 <ADC_Read_by_Channel+0x3c>
	}
	else if (temp_port_num == 2)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d106      	bne.n	8001350 <ADC_Read_by_Channel+0x3c>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8001342:	4b4c      	ldr	r3, [pc, #304]	; (8001474 <ADC_Read_by_Channel+0x160>)
 8001344:	637b      	str	r3, [r7, #52]	; 0x34
		ADS3_avg_receive_data[channel] = 0;
 8001346:	797b      	ldrb	r3, [r7, #5]
 8001348:	4a4c      	ldr	r2, [pc, #304]	; (800147c <ADC_Read_by_Channel+0x168>)
 800134a:	2100      	movs	r1, #0
 800134c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001350:	2300      	movs	r3, #0
 8001352:	633b      	str	r3, [r7, #48]	; 0x30
 8001354:	e087      	b.n	8001466 <ADC_Read_by_Channel+0x152>
	{
		int pkt = ADS7861_MANUAL_MODE_PKT(channel);
 8001356:	797b      	ldrb	r3, [r7, #5]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fe30 	bl	8000fc0 <ADS7861_MANUAL_MODE_PKT>
 8001360:	4603      	mov	r3, r0
 8001362:	613b      	str	r3, [r7, #16]
		uint8_t SendData[2] = { (pkt >> 8), (pkt & 0xFF) };
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	121b      	asrs	r3, r3, #8
 8001368:	b2db      	uxtb	r3, r3
 800136a:	733b      	strb	r3, [r7, #12]
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	b2db      	uxtb	r3, r3
 8001370:	737b      	strb	r3, [r7, #13]
		uint8_t ReadData[2];
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001372:	79bb      	ldrb	r3, [r7, #6]
 8001374:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001376:	4619      	mov	r1, r3
 8001378:	f7ff fcac 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001380:	4619      	mov	r1, r3
 8001382:	f7ff fcb7 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 16; i++)
 8001386:	2300      	movs	r3, #0
 8001388:	62fb      	str	r3, [r7, #44]	; 0x2c
 800138a:	e002      	b.n	8001392 <ADC_Read_by_Channel+0x7e>
 800138c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138e:	3301      	adds	r3, #1
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001394:	2b10      	cmp	r3, #16
 8001396:	dcf9      	bgt.n	800138c <ADC_Read_by_Channel+0x78>
			;
		SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	4838      	ldr	r0, [pc, #224]	; (8001480 <ADC_Read_by_Channel+0x16c>)
 800139e:	4619      	mov	r1, r3
 80013a0:	2202      	movs	r2, #2
 80013a2:	f005 ff3d 	bl	8007220 <SPI_MASTER_Transmit>
		for (int i = 0; i > 9; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80013aa:	e002      	b.n	80013b2 <ADC_Read_by_Channel+0x9e>
 80013ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013ae:	3301      	adds	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80013b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	dcf9      	bgt.n	80013ac <ADC_Read_by_Channel+0x98>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013bc:	4619      	mov	r1, r3
 80013be:	f7ff fc89 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 2; i++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
 80013c6:	e002      	b.n	80013ce <ADC_Read_by_Channel+0xba>
 80013c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ca:	3301      	adds	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	dcf9      	bgt.n	80013c8 <ADC_Read_by_Channel+0xb4>
			;
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80013d8:	4619      	mov	r1, r3
 80013da:	f7ff fc8b 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 80013de:	2300      	movs	r3, #0
 80013e0:	623b      	str	r3, [r7, #32]
 80013e2:	e002      	b.n	80013ea <ADC_Read_by_Channel+0xd6>
 80013e4:	6a3b      	ldr	r3, [r7, #32]
 80013e6:	3301      	adds	r3, #1
 80013e8:	623b      	str	r3, [r7, #32]
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	2b09      	cmp	r3, #9
 80013ee:	dcf9      	bgt.n	80013e4 <ADC_Read_by_Channel+0xd0>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 80013f0:	f107 0308 	add.w	r3, r7, #8
 80013f4:	4822      	ldr	r0, [pc, #136]	; (8001480 <ADC_Read_by_Channel+0x16c>)
 80013f6:	4619      	mov	r1, r3
 80013f8:	2202      	movs	r2, #2
 80013fa:	f005 ff2b 	bl	8007254 <SPI_MASTER_Receive>
		for (int i = 0; i > 2; i++)
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]
 8001402:	e002      	b.n	800140a <ADC_Read_by_Channel+0xf6>
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	3301      	adds	r3, #1
 8001408:	61fb      	str	r3, [r7, #28]
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	2b02      	cmp	r3, #2
 800140e:	dcf9      	bgt.n	8001404 <ADC_Read_by_Channel+0xf0>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001410:	79bb      	ldrb	r3, [r7, #6]
 8001412:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fc5d 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 9; i++)
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
 800141e:	e002      	b.n	8001426 <ADC_Read_by_Channel+0x112>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	3301      	adds	r3, #1
 8001424:	61bb      	str	r3, [r7, #24]
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b09      	cmp	r3, #9
 800142a:	dcf9      	bgt.n	8001420 <ADC_Read_by_Channel+0x10c>
			;

		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800142c:	79bb      	ldrb	r3, [r7, #6]
 800142e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001430:	4619      	mov	r1, r3
 8001432:	f7ff fc5f 	bl	8000cf4 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
 800143a:	e002      	b.n	8001442 <ADC_Read_by_Channel+0x12e>
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b09      	cmp	r3, #9
 8001446:	dcf9      	bgt.n	800143c <ADC_Read_by_Channel+0x128>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001448:	f107 0308 	add.w	r3, r7, #8
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <ADC_Read_by_Channel+0x16c>)
 800144e:	4619      	mov	r1, r3
 8001450:	2202      	movs	r2, #2
 8001452:	f005 feff 	bl	8007254 <SPI_MASTER_Receive>

		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800145a:	4619      	mov	r1, r3
 800145c:	f7ff fc3a 	bl	8000cd4 <XMC_GPIO_SetOutputHigh>
	{
		temp_ptr = XMC_GPIO_PORT2;
		ADS3_avg_receive_data[channel] = 0;
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001462:	3301      	adds	r3, #1
 8001464:	633b      	str	r3, [r7, #48]	; 0x30
 8001466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001468:	2b31      	cmp	r3, #49	; 0x31
 800146a:	f77f af74 	ble.w	8001356 <ADC_Read_by_Channel+0x42>
//			ADS3_recive_channel[channel] = ((ReadData[0] & 0xF0) >> 4);

//			ADS3_avg_receive_data[channel] += ADS3_receive_data[channel];
		}
	}
}
 800146e:	3738      	adds	r7, #56	; 0x38
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	48028200 	.word	0x48028200
 8001478:	1fff4d10 	.word	0x1fff4d10
 800147c:	1fff4d50 	.word	0x1fff4d50
 8001480:	1ffe89ac 	.word	0x1ffe89ac

08001484 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	460b      	mov	r3, r1
 800148e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	2201      	movs	r2, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	605a      	str	r2, [r3, #4]
}
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	460b      	mov	r3, r1
 80014ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80014b0:	78fb      	ldrb	r3, [r7, #3]
 80014b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014b6:	409a      	lsls	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	605a      	str	r2, [r3, #4]
}
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop

080014c8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	7c1b      	ldrb	r3, [r3, #16]
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff ffd2 	bl	8001484 <XMC_GPIO_SetOutputHigh>
}
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop

080014e8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	7c1b      	ldrb	r3, [r3, #16]
 80014f8:	4610      	mov	r0, r2
 80014fa:	4619      	mov	r1, r3
 80014fc:	f7ff ffd2 	bl	80014a4 <XMC_GPIO_SetOutputLow>
}
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop

08001508 <State_1>:
#include "ADS7961_LIB_2.h"

/*instrument_clustor_indicators_t *instrument_clustor_indicators = &CAN_MSG_DB[CAN_18FFB632];*/

void State_1(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_1_OUT)
 800150c:	4b12      	ldr	r3, [pc, #72]	; (8001558 <State_1+0x50>)
 800150e:	781b      	ldrb	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00b      	beq.n	800152c <State_1+0x24>
	{
		/* ignition 1 on state */
		is_drive_mode = true;
 8001514:	4b11      	ldr	r3, [pc, #68]	; (800155c <State_1+0x54>)
 8001516:	2201      	movs	r2, #1
 8001518:	701a      	strb	r2, [r3, #0]

		ignition1_d_on();
 800151a:	f000 f821 	bl	8001560 <ignition1_d_on>
		faciaaswitches();
 800151e:	f000 f971 	bl	8001804 <faciaaswitches>
		Can_Outputs_State1();
 8001522:	f000 f89d 	bl	8001660 <Can_Outputs_State1>
		cluster_indicators_Out();
 8001526:	f000 f8a3 	bl	8001670 <cluster_indicators_Out>
 800152a:	e00d      	b.n	8001548 <State_1+0x40>
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 800152c:	4b0a      	ldr	r3, [pc, #40]	; (8001558 <State_1+0x50>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f083 0301 	eor.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d006      	beq.n	8001548 <State_1+0x40>
	{
		is_drive_mode = false;
 800153a:	4b08      	ldr	r3, [pc, #32]	; (800155c <State_1+0x54>)
 800153c:	2200      	movs	r2, #0
 800153e:	701a      	strb	r2, [r3, #0]

		/* ignition 1 off state */
		ignition1_d_off();
 8001540:	f000 f84e 	bl	80015e0 <ignition1_d_off>
		all_direct_controlled_relay_off();
 8001544:	f000 f884 	bl	8001650 <all_direct_controlled_relay_off>
	}

	//check battery voltage and turn on/off DC to DC converter
	dc_dc_state_update();
 8001548:	f000 f96e 	bl	8001828 <dc_dc_state_update>

	VcuOut_IoExp_U24();
 800154c:	f000 f904 	bl	8001758 <VcuOut_IoExp_U24>
	VcuOut_IoExp_U25();
 8001550:	f000 f952 	bl	80017f8 <VcuOut_IoExp_U25>

}
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	1fff4910 	.word	0x1fff4910
 800155c:	1fff47d6 	.word	0x1fff47d6

08001560 <ignition1_d_on>:
void ignition1_d_on()
 {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	uart_debugg("in ig1_d_on");
 8001564:	4812      	ldr	r0, [pc, #72]	; (80015b0 <ignition1_d_on+0x50>)
 8001566:	f00e fe41 	bl	80101ec <uart_debugg>
	CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x0c;

	CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x48;
	CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x71;*/

 	DIGITAL_IO_SetOutputHigh(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 800156a:	4812      	ldr	r0, [pc, #72]	; (80015b4 <ignition1_d_on+0x54>)
 800156c:	f7ff ffac 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INFOTAINMENT_PWR_OUT_D); // check infotainment port & pin
 8001570:	4811      	ldr	r0, [pc, #68]	; (80015b8 <ignition1_d_on+0x58>)
 8001572:	f7ff ffa9 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INSTRUMENT_CON_PWR_OUT_D);
 8001576:	4811      	ldr	r0, [pc, #68]	; (80015bc <ignition1_d_on+0x5c>)
 8001578:	f7ff ffa6 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&WIPER_PWR_OUT_D);
 800157c:	4810      	ldr	r0, [pc, #64]	; (80015c0 <ignition1_d_on+0x60>)
 800157e:	f7ff ffa3 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D);
 8001582:	4810      	ldr	r0, [pc, #64]	; (80015c4 <ignition1_d_on+0x64>)
 8001584:	f7ff ffa0 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&PWR_WINDOW_OUT_D);
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <ignition1_d_on+0x68>)
 800158a:	f7ff ff9d 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 800158e:	480f      	ldr	r0, [pc, #60]	; (80015cc <ignition1_d_on+0x6c>)
 8001590:	f7ff ff9a 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>

 	//IOExp_SetPIN_LOW(&I2C_MASTER_1, 0x40, 0, 0);
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED1_OUT_D); /// turn on HVAC(CPIS)
 8001594:	480e      	ldr	r0, [pc, #56]	; (80015d0 <ignition1_d_on+0x70>)
 8001596:	f00e ff1d 	bl	80103d4 <digital_io_setoutputhigh>
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED2_OUT_D); /// turn on COMPRESSOR PWR.
 800159a:	480e      	ldr	r0, [pc, #56]	; (80015d4 <ignition1_d_on+0x74>)
 800159c:	f00e ff1a 	bl	80103d4 <digital_io_setoutputhigh>

 	//AUX_EFUSE_3_OUT_D output is connected to 48V battery input
 	digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D); //48V battery
 80015a0:	480d      	ldr	r0, [pc, #52]	; (80015d8 <ignition1_d_on+0x78>)
 80015a2:	f00e ff17 	bl	80103d4 <digital_io_setoutputhigh>

 	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 	/*  active low */
 	//digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);

 	uart_debugg("exit ig1_d_on");
 80015a6:	480d      	ldr	r0, [pc, #52]	; (80015dc <ignition1_d_on+0x7c>)
 80015a8:	f00e fe20 	bl	80101ec <uart_debugg>
 }
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	080134b8 	.word	0x080134b8
 80015b4:	080139a4 	.word	0x080139a4
 80015b8:	080138a0 	.word	0x080138a0
 80015bc:	08013774 	.word	0x08013774
 80015c0:	08013864 	.word	0x08013864
 80015c4:	08013724 	.word	0x08013724
 80015c8:	08013a1c 	.word	0x08013a1c
 80015cc:	08013aa8 	.word	0x08013aa8
 80015d0:	1fff42e4 	.word	0x1fff42e4
 80015d4:	1fff42e8 	.word	0x1fff42e8
 80015d8:	1fff42ec 	.word	0x1fff42ec
 80015dc:	080134c4 	.word	0x080134c4

080015e0 <ignition1_d_off>:

 void ignition1_d_off()
 {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	 /*CAN_MSG_DB[CAN_18FF0921].CAN_Data[5] = 0x00;
	  CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x00;*/
//for(volatile int i = 0; i<0xffff*80; i++);
	  /*CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x38;
	  CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x18;*/
	 uart_debugg("in ig1_d_off");
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <ignition1_d_off+0x48>)
 80015e6:	f00e fe01 	bl	80101ec <uart_debugg>
 	DIGITAL_IO_SetOutputLow(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 80015ea:	4810      	ldr	r0, [pc, #64]	; (800162c <ignition1_d_off+0x4c>)
 80015ec:	f7ff ff7c 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INFOTAINMENT_PWR_OUT_D);
 80015f0:	480f      	ldr	r0, [pc, #60]	; (8001630 <ignition1_d_off+0x50>)
 80015f2:	f7ff ff79 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INSTRUMENT_CON_PWR_OUT_D);
 80015f6:	480f      	ldr	r0, [pc, #60]	; (8001634 <ignition1_d_off+0x54>)
 80015f8:	f7ff ff76 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&WIPER_PWR_OUT_D);
 80015fc:	480e      	ldr	r0, [pc, #56]	; (8001638 <ignition1_d_off+0x58>)
 80015fe:	f7ff ff73 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);
 8001602:	480e      	ldr	r0, [pc, #56]	; (800163c <ignition1_d_off+0x5c>)
 8001604:	f7ff ff70 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
 	DIGITAL_IO_SetOutputLow(&PWR_WINDOW_OUT_D);
 8001608:	480d      	ldr	r0, [pc, #52]	; (8001640 <ignition1_d_off+0x60>)
 800160a:	f7ff ff6d 	bl	80014e8 <DIGITAL_IO_SetOutputLow>

 	digital_io_setoutputlow(&AC_BLOWER_SPEED1_OUT_D); /// turn off HVAC(CPIS)
 800160e:	480d      	ldr	r0, [pc, #52]	; (8001644 <ignition1_d_off+0x64>)
 8001610:	f00e feb0 	bl	8010374 <digital_io_setoutputlow>
 	digital_io_setoutputlow(&AC_BLOWER_SPEED2_OUT_D); /// turn off COMPRESSOR PWR.
 8001614:	480c      	ldr	r0, [pc, #48]	; (8001648 <ignition1_d_off+0x68>)
 8001616:	f00e fead 	bl	8010374 <digital_io_setoutputlow>


 	/* active low */
 	digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 800161a:	480c      	ldr	r0, [pc, #48]	; (800164c <ignition1_d_off+0x6c>)
 800161c:	f00e feaa 	bl	8010374 <digital_io_setoutputlow>

 	//digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply

 	uart_debugg("in ig1_d_off");
 8001620:	4801      	ldr	r0, [pc, #4]	; (8001628 <ignition1_d_off+0x48>)
 8001622:	f00e fde3 	bl	80101ec <uart_debugg>

 }
 8001626:	bd80      	pop	{r7, pc}
 8001628:	080134d4 	.word	0x080134d4
 800162c:	080139a4 	.word	0x080139a4
 8001630:	080138a0 	.word	0x080138a0
 8001634:	08013774 	.word	0x08013774
 8001638:	08013864 	.word	0x08013864
 800163c:	08013760 	.word	0x08013760
 8001640:	08013a1c 	.word	0x08013a1c
 8001644:	1fff42e4 	.word	0x1fff42e4
 8001648:	1fff42e8 	.word	0x1fff42e8
 800164c:	1fff42f0 	.word	0x1fff42f0

08001650 <all_direct_controlled_relay_off>:

 void all_direct_controlled_relay_off(void)
 {
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
 8001654:	4801      	ldr	r0, [pc, #4]	; (800165c <all_direct_controlled_relay_off+0xc>)
 8001656:	f7ff ff47 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
 }
 800165a:	bd80      	pop	{r7, pc}
 800165c:	080137b0 	.word	0x080137b0

08001660 <Can_Outputs_State1>:

  void Can_Outputs_State1(void)
 {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
 	CAN_OUTPUT_COMPRESSOR();
 8001664:	f009 fac6 	bl	800abf4 <CAN_OUTPUT_COMPRESSOR>
 	CAN_OUTPUT_CLUSTER();
 8001668:	f008 ff6c 	bl	800a544 <CAN_OUTPUT_CLUSTER>
 	//CAN_OUTPUT_EPS();
 }
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop

08001670 <cluster_indicators_Out>:

 void cluster_indicators_Out(void)
 {
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	instrument_clustor_indicators-> left_indicator = Instrument_Cluster_OUT.set_left_indicator;
 8001674:	4b34      	ldr	r3, [pc, #208]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	4b34      	ldr	r3, [pc, #208]	; (800174c <cluster_indicators_Out+0xdc>)
 800167a:	7999      	ldrb	r1, [r3, #6]
 800167c:	78d3      	ldrb	r3, [r2, #3]
 800167e:	f361 0300 	bfi	r3, r1, #0, #1
 8001682:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> right_indicator = Instrument_Cluster_OUT.set_right_indicator;
 8001684:	4b30      	ldr	r3, [pc, #192]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b30      	ldr	r3, [pc, #192]	; (800174c <cluster_indicators_Out+0xdc>)
 800168a:	79d9      	ldrb	r1, [r3, #7]
 800168c:	78d3      	ldrb	r3, [r2, #3]
 800168e:	f361 0341 	bfi	r3, r1, #1, #1
 8001692:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> low_beam = Instrument_Cluster_OUT.set_low_beam;
 8001694:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	4b2c      	ldr	r3, [pc, #176]	; (800174c <cluster_indicators_Out+0xdc>)
 800169a:	7a19      	ldrb	r1, [r3, #8]
 800169c:	78d3      	ldrb	r3, [r2, #3]
 800169e:	f361 0382 	bfi	r3, r1, #2, #1
 80016a2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> high_beam = Instrument_Cluster_OUT.set_high_beam;
 80016a4:	4b28      	ldr	r3, [pc, #160]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b28      	ldr	r3, [pc, #160]	; (800174c <cluster_indicators_Out+0xdc>)
 80016aa:	7a59      	ldrb	r1, [r3, #9]
 80016ac:	78d3      	ldrb	r3, [r2, #3]
 80016ae:	f361 03c3 	bfi	r3, r1, #3, #1
 80016b2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> brake_fluid_flow = Instrument_Cluster_OUT.set_brake_oil;
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	4b24      	ldr	r3, [pc, #144]	; (800174c <cluster_indicators_Out+0xdc>)
 80016ba:	7a99      	ldrb	r1, [r3, #10]
 80016bc:	78d3      	ldrb	r3, [r2, #3]
 80016be:	f361 1304 	bfi	r3, r1, #4, #1
 80016c2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> eps_failure = Instrument_Cluster_OUT.eps_status;///////
 80016c4:	4b20      	ldr	r3, [pc, #128]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	4b20      	ldr	r3, [pc, #128]	; (800174c <cluster_indicators_Out+0xdc>)
 80016ca:	7b19      	ldrb	r1, [r3, #12]
 80016cc:	78d3      	ldrb	r3, [r2, #3]
 80016ce:	f361 1345 	bfi	r3, r1, #5, #1
 80016d2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> aux_battery_low = Instrument_Cluster_OUT.aux_vtg_critical;
 80016d4:	4b1c      	ldr	r3, [pc, #112]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b1c      	ldr	r3, [pc, #112]	; (800174c <cluster_indicators_Out+0xdc>)
 80016da:	7ad9      	ldrb	r1, [r3, #11]
 80016dc:	78d3      	ldrb	r3, [r2, #3]
 80016de:	f361 1386 	bfi	r3, r1, #6, #1
 80016e2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> battery_high_temp = Instrument_Cluster_OUT.battery_temp_exceeded;
 80016e4:	4b18      	ldr	r3, [pc, #96]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b18      	ldr	r3, [pc, #96]	; (800174c <cluster_indicators_Out+0xdc>)
 80016ea:	7b59      	ldrb	r1, [r3, #13]
 80016ec:	78d3      	ldrb	r3, [r2, #3]
 80016ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80016f2:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> charging_on = Instrument_Cluster_OUT.charging_connected;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <cluster_indicators_Out+0xd8>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b14      	ldr	r3, [pc, #80]	; (800174c <cluster_indicators_Out+0xdc>)
 80016fa:	7b99      	ldrb	r1, [r3, #14]
 80016fc:	7953      	ldrb	r3, [r2, #5]
 80016fe:	f361 0300 	bfi	r3, r1, #0, #1
 8001702:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> generic_alarm;/////////
  	instrument_clustor_indicators-> regen = Instrument_Cluster_OUT.regen_enabled;///////////
 8001704:	4b10      	ldr	r3, [pc, #64]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <cluster_indicators_Out+0xdc>)
 800170a:	7bd9      	ldrb	r1, [r3, #15]
 800170c:	7953      	ldrb	r3, [r2, #5]
 800170e:	f361 0382 	bfi	r3, r1, #2, #1
 8001712:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <cluster_indicators_Out+0xe0>)
 800171a:	7a1b      	ldrb	r3, [r3, #8]
 800171c:	f083 0301 	eor.w	r3, r3, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	b2d9      	uxtb	r1, r3
 8001728:	7953      	ldrb	r3, [r2, #5]
 800172a:	f361 03c3 	bfi	r3, r1, #3, #1
 800172e:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> seat_belt = Seat_Belt_OUT.seat_occupied;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <cluster_indicators_Out+0xd8>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b07      	ldr	r3, [pc, #28]	; (8001754 <cluster_indicators_Out+0xe4>)
 8001736:	7899      	ldrb	r1, [r3, #2]
 8001738:	7953      	ldrb	r3, [r2, #5]
 800173a:	f361 1304 	bfi	r3, r1, #4, #1
 800173e:	7153      	strb	r3, [r2, #5]
  }
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	1ffe8808 	.word	0x1ffe8808
 800174c:	1fff48b8 	.word	0x1fff48b8
 8001750:	1fff4888 	.word	0x1fff4888
 8001754:	1fff4868 	.word	0x1fff4868

08001758 <VcuOut_IoExp_U24>:

 void VcuOut_IoExp_U24(void)
 {
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	 uart_debugg("in U24");
 800175c:	481e      	ldr	r0, [pc, #120]	; (80017d8 <VcuOut_IoExp_U24+0x80>)
 800175e:	f00e fd45 	bl	80101ec <uart_debugg>
	 if(Relay_Control_Switch_OUT.low_beam_OUT)
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <VcuOut_IoExp_U24+0x84>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <VcuOut_IoExp_U24+0x1a>
	 {
		 DIGITAL_IO_SetOutputHigh(&LOW_BEAM_OUT_D);
 800176a:	481d      	ldr	r0, [pc, #116]	; (80017e0 <VcuOut_IoExp_U24+0x88>)
 800176c:	f7ff feac 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 8001770:	e002      	b.n	8001778 <VcuOut_IoExp_U24+0x20>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 1;
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LOW_BEAM_OUT_D);
 8001772:	481b      	ldr	r0, [pc, #108]	; (80017e0 <VcuOut_IoExp_U24+0x88>)
 8001774:	f7ff feb8 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 0;
	 }

	 if(Relay_Control_Switch_OUT.high_beam_OUT)
 8001778:	4b18      	ldr	r3, [pc, #96]	; (80017dc <VcuOut_IoExp_U24+0x84>)
 800177a:	785b      	ldrb	r3, [r3, #1]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <VcuOut_IoExp_U24+0x30>
	 {
		 DIGITAL_IO_SetOutputHigh(&HIGH_BEAM_OUT_D);
 8001780:	4818      	ldr	r0, [pc, #96]	; (80017e4 <VcuOut_IoExp_U24+0x8c>)
 8001782:	f7ff fea1 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 8001786:	e002      	b.n	800178e <VcuOut_IoExp_U24+0x36>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 8001788:	4816      	ldr	r0, [pc, #88]	; (80017e4 <VcuOut_IoExp_U24+0x8c>)
 800178a:	f7ff fead 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 800178e:	4b13      	ldr	r3, [pc, #76]	; (80017dc <VcuOut_IoExp_U24+0x84>)
 8001790:	789b      	ldrb	r3, [r3, #2]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d003      	beq.n	800179e <VcuOut_IoExp_U24+0x46>
	 {
		 DIGITAL_IO_SetOutputHigh(&POS_OUT_D);
 8001796:	4814      	ldr	r0, [pc, #80]	; (80017e8 <VcuOut_IoExp_U24+0x90>)
 8001798:	f7ff fe96 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 800179c:	e002      	b.n	80017a4 <VcuOut_IoExp_U24+0x4c>
		 //digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&POS_OUT_D);
 800179e:	4812      	ldr	r0, [pc, #72]	; (80017e8 <VcuOut_IoExp_U24+0x90>)
 80017a0:	f7ff fea2 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
		// digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
	 }

	 if(Relay_Control_Switch_OUT.left_indicator_OUT)
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <VcuOut_IoExp_U24+0x84>)
 80017a6:	78db      	ldrb	r3, [r3, #3]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d003      	beq.n	80017b4 <VcuOut_IoExp_U24+0x5c>
	 {
		 DIGITAL_IO_SetOutputHigh(&LEFT_INDICATOR_OUT_D);
 80017ac:	480f      	ldr	r0, [pc, #60]	; (80017ec <VcuOut_IoExp_U24+0x94>)
 80017ae:	f7ff fe8b 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 80017b2:	e002      	b.n	80017ba <VcuOut_IoExp_U24+0x62>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LEFT_INDICATOR_OUT_D);
 80017b4:	480d      	ldr	r0, [pc, #52]	; (80017ec <VcuOut_IoExp_U24+0x94>)
 80017b6:	f7ff fe97 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.right_indicator_OUT)
 80017ba:	4b08      	ldr	r3, [pc, #32]	; (80017dc <VcuOut_IoExp_U24+0x84>)
 80017bc:	791b      	ldrb	r3, [r3, #4]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d003      	beq.n	80017ca <VcuOut_IoExp_U24+0x72>
	 {
		 DIGITAL_IO_SetOutputHigh(&RIGHT_INDICATOR_OUT_D);
 80017c2:	480b      	ldr	r0, [pc, #44]	; (80017f0 <VcuOut_IoExp_U24+0x98>)
 80017c4:	f7ff fe80 	bl	80014c8 <DIGITAL_IO_SetOutputHigh>
 80017c8:	e002      	b.n	80017d0 <VcuOut_IoExp_U24+0x78>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&RIGHT_INDICATOR_OUT_D);
 80017ca:	4809      	ldr	r0, [pc, #36]	; (80017f0 <VcuOut_IoExp_U24+0x98>)
 80017cc:	f7ff fe8c 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
	 }

	 uart_debugg("exit U24");
 80017d0:	4808      	ldr	r0, [pc, #32]	; (80017f4 <VcuOut_IoExp_U24+0x9c>)
 80017d2:	f00e fd0b 	bl	80101ec <uart_debugg>
 }
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	080134e4 	.word	0x080134e4
 80017dc:	1fff47f0 	.word	0x1fff47f0
 80017e0:	08013940 	.word	0x08013940
 80017e4:	0801392c 	.word	0x0801392c
 80017e8:	08013828 	.word	0x08013828
 80017ec:	08013a44 	.word	0x08013a44
 80017f0:	08013918 	.word	0x08013918
 80017f4:	080134ec 	.word	0x080134ec

080017f8 <VcuOut_IoExp_U25>:

 void VcuOut_IoExp_U25(void)
  {
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
 	 else
 	 {
 		// DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 	 }

 }
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr

08001804 <faciaaswitches>:
 {

 }

 void faciaaswitches(void)
 {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 8001808:	4b05      	ldr	r3, [pc, #20]	; (8001820 <faciaaswitches+0x1c>)
 800180a:	789b      	ldrb	r3, [r3, #2]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d003      	beq.n	8001818 <faciaaswitches+0x14>
	{
		digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
 8001810:	4804      	ldr	r0, [pc, #16]	; (8001824 <faciaaswitches+0x20>)
 8001812:	f00e fddf 	bl	80103d4 <digital_io_setoutputhigh>
 8001816:	e002      	b.n	800181e <faciaaswitches+0x1a>
	}
	else
	{
		digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <faciaaswitches+0x20>)
 800181a:	f00e fdab 	bl	8010374 <digital_io_setoutputlow>
	}

 }
 800181e:	bd80      	pop	{r7, pc}
 8001820:	1fff47f0 	.word	0x1fff47f0
 8001824:	1fff42f0 	.word	0x1fff42f0

08001828 <dc_dc_state_update>:

//check 12V battery voltage, if less than 12.5V then start DC to DC converter and 48V battery and if greater than 13.5 then turn off DC to DC converter and 48V battery
//only in ignition off mode as in ignition on mode DC to DC and 48V battery is always ON.
//dc_dc_started : to check if DC to DC converter is already on or not
void dc_dc_state_update(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	static bool dc_dc_started = false;

	DROPPED_IN_12_volt(); //update voltage value
 800182c:	f7ff fa74 	bl	8000d18 <DROPPED_IN_12_volt>

	//if ignition 1 is on
	if (Vcu_OutPuts.IGNITION_1_OUT)
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <dc_dc_state_update+0x48>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00c      	beq.n	8001852 <dc_dc_state_update+0x2a>
	{
		seconds_elapsed = 0;
 8001838:	4b0e      	ldr	r3, [pc, #56]	; (8001874 <dc_dc_state_update+0x4c>)
 800183a:	2200      	movs	r2, #0
 800183c:	801a      	strh	r2, [r3, #0]
		//if timer is on then stop the timer
		if (TIMER_GetTimerStatus(&TIMER_2))
 800183e:	480e      	ldr	r0, [pc, #56]	; (8001878 <dc_dc_state_update+0x50>)
 8001840:	f004 fec8 	bl	80065d4 <TIMER_GetTimerStatus>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d010      	beq.n	800186c <dc_dc_state_update+0x44>
		{
			TIMER_Stop(&TIMER_2);
 800184a:	480b      	ldr	r0, [pc, #44]	; (8001878 <dc_dc_state_update+0x50>)
 800184c:	f004 fe94 	bl	8006578 <TIMER_Stop>
 8001850:	e00c      	b.n	800186c <dc_dc_state_update+0x44>
		}
	}
	//if ignition 1 is off
	else if (!(Vcu_OutPuts.IGNITION_1_OUT))
 8001852:	4b07      	ldr	r3, [pc, #28]	; (8001870 <dc_dc_state_update+0x48>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	f083 0301 	eor.w	r3, r3, #1
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b00      	cmp	r3, #0
 800185e:	d005      	beq.n	800186c <dc_dc_state_update+0x44>
//			DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D);
//		}

		/*---------------ADDED FOR TESTING----------------*/
//		AUX_EFUSE_3_OUT_D output is connected to 48V battery input
		digital_io_setoutputlow(&AUX_EFUSE_3_OUT_D); //48V battery
 8001860:	4806      	ldr	r0, [pc, #24]	; (800187c <dc_dc_state_update+0x54>)
 8001862:	f00e fd87 	bl	8010374 <digital_io_setoutputlow>
		//		DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D); //FOR TRIPHASE DC TO DC converter
		DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D); //for Madhura-MPT DC TO DC converter
 8001866:	4806      	ldr	r0, [pc, #24]	; (8001880 <dc_dc_state_update+0x58>)
 8001868:	f7ff fe3e 	bl	80014e8 <DIGITAL_IO_SetOutputLow>
//		dc_dc_started = true;
	}
}
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	1fff4910 	.word	0x1fff4910
 8001874:	1fff47d4 	.word	0x1fff47d4
 8001878:	1ffe88e0 	.word	0x1ffe88e0
 800187c:	1fff42ec 	.word	0x1fff42ec
 8001880:	08013724 	.word	0x08013724

08001884 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	460b      	mov	r3, r1
 800188e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001890:	78fb      	ldrb	r3, [r7, #3]
 8001892:	2201      	movs	r2, #1
 8001894:	409a      	lsls	r2, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	605a      	str	r2, [r3, #4]
}
 800189a:	370c      	adds	r7, #12
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr

080018a4 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
 80018ac:	460b      	mov	r3, r1
 80018ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018b6:	409a      	lsls	r2, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	605a      	str	r2, [r3, #4]
}
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop

080018c8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	7c1b      	ldrb	r3, [r3, #16]
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7ff ffd2 	bl	8001884 <XMC_GPIO_SetOutputHigh>
}
 80018e0:	3708      	adds	r7, #8
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop

080018e8 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	7c1b      	ldrb	r3, [r3, #16]
 80018f8:	4610      	mov	r0, r2
 80018fa:	4619      	mov	r1, r3
 80018fc:	f7ff ffd2 	bl	80018a4 <XMC_GPIO_SetOutputLow>
}
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop

08001908 <State_2>:

enum Gearchange_Sequence_forHzaard_t{not_allowed, allowed };


void State_2(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <State_2+0x38>)
 800190e:	785b      	ldrb	r3, [r3, #1]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d006      	beq.n	8001922 <State_2+0x1a>
	{

		/* ignition 2 on state */
		ignition2_d_on();
 8001914:	f000 f816 	bl	8001944 <ignition2_d_on>
		VcuOut_MotorController();
 8001918:	f000 f892 	bl	8001a40 <VcuOut_MotorController>

		Can_Outputs_State2();
 800191c:	f000 f888 	bl	8001a30 <Can_Outputs_State2>
 8001920:	e00a      	b.n	8001938 <State_2+0x30>


		//State2_Lights();

	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 8001922:	4b07      	ldr	r3, [pc, #28]	; (8001940 <State_2+0x38>)
 8001924:	785b      	ldrb	r3, [r3, #1]
 8001926:	f083 0301 	eor.w	r3, r3, #1
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <State_2+0x30>
	{

		/* ignition 2 off state */
		ignition2_d_off();
 8001930:	f000 f840 	bl	80019b4 <ignition2_d_off>


		VcuOut_MotorController_off();
 8001934:	f000 f8f8 	bl	8001b28 <VcuOut_MotorController_off>
	}

	State2_Lights();
 8001938:	f000 f9c8 	bl	8001ccc <State2_Lights>
}
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	1fff4910 	.word	0x1fff4910

08001944 <ignition2_d_on>:


void ignition2_d_on()
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	/* ignition 2 by default on */
	digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 8001948:	4810      	ldr	r0, [pc, #64]	; (800198c <ignition2_d_on+0x48>)
 800194a:	f00e fd43 	bl	80103d4 <digital_io_setoutputhigh>
	//ignition_default_state_MC();
	DIGITAL_IO_SetOutputHigh(&PWR_STEERING_OUT_D);/// power steering// check
 800194e:	4810      	ldr	r0, [pc, #64]	; (8001990 <ignition2_d_on+0x4c>)
 8001950:	f7ff ffba 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&VACUUM_PUMP_OUT_D); // check
 8001954:	480f      	ldr	r0, [pc, #60]	; (8001994 <ignition2_d_on+0x50>)
 8001956:	f7ff ffb7 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	//DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D); // common for everything giving 12v to mc every relay IN VCU13(IN 14 DIRCTLY GOES TO OCNTROLLER FAN)
	DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D);
 800195a:	480f      	ldr	r0, [pc, #60]	; (8001998 <ignition2_d_on+0x54>)
 800195c:	f7ff ffb4 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 8001960:	480e      	ldr	r0, [pc, #56]	; (800199c <ignition2_d_on+0x58>)
 8001962:	f7ff ffb1 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REGEN_RELAY_OUT_D); // on relay, relay_driver_pin as output
 8001966:	480e      	ldr	r0, [pc, #56]	; (80019a0 <ignition2_d_on+0x5c>)
 8001968:	f7ff ffae 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_ELOCK_RELAY_OUT_D); // start relay , relay_driver_pin as output
 800196c:	480d      	ldr	r0, [pc, #52]	; (80019a4 <ignition2_d_on+0x60>)
 800196e:	f7ff ffab 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_FAN_PWR_OUT_D);  // start, on, fwd, rev relay output side
 8001972:	480d      	ldr	r0, [pc, #52]	; (80019a8 <ignition2_d_on+0x64>)
 8001974:	f7ff ffa8 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <ignition2_d_on+0x68>)
 800197a:	f7ff ffa5 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>
	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 1;
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <ignition2_d_on+0x6c>)
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	7813      	ldrb	r3, [r2, #0]
 8001984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001988:	7013      	strb	r3, [r2, #0]
}
 800198a:	bd80      	pop	{r7, pc}
 800198c:	1fff42f4 	.word	0x1fff42f4
 8001990:	08013a30 	.word	0x08013a30
 8001994:	08013738 	.word	0x08013738
 8001998:	080139cc 	.word	0x080139cc
 800199c:	08013850 	.word	0x08013850
 80019a0:	08013800 	.word	0x08013800
 80019a4:	08013814 	.word	0x08013814
 80019a8:	080139e0 	.word	0x080139e0
 80019ac:	080137d8 	.word	0x080137d8
 80019b0:	1ffe8818 	.word	0x1ffe8818

080019b4 <ignition2_d_off>:

void ignition2_d_off()
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&PWR_STEERING_OUT_D);/// power steering
 80019b8:	4812      	ldr	r0, [pc, #72]	; (8001a04 <ignition2_d_off+0x50>)
 80019ba:	f7ff ff95 	bl	80018e8 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&VACUUM_PUMP_OUT_D);
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <ignition2_d_off+0x54>)
 80019c0:	f7ff ff92 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	//DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);

	DIGITAL_IO_SetOutputLow(&MC_ELOCK_RELAY_OUT_D);
 80019c4:	4811      	ldr	r0, [pc, #68]	; (8001a0c <ignition2_d_off+0x58>)
 80019c6:	f7ff ff8f 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REGEN_RELAY_OUT_D);
 80019ca:	4811      	ldr	r0, [pc, #68]	; (8001a10 <ignition2_d_off+0x5c>)
 80019cc:	f7ff ff8c 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_FAN_PWR_OUT_D);
 80019d0:	4810      	ldr	r0, [pc, #64]	; (8001a14 <ignition2_d_off+0x60>)
 80019d2:	f7ff ff89 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 80019d6:	4810      	ldr	r0, [pc, #64]	; (8001a18 <ignition2_d_off+0x64>)
 80019d8:	f7ff ff86 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);
 80019dc:	480f      	ldr	r0, [pc, #60]	; (8001a1c <ignition2_d_off+0x68>)
 80019de:	f7ff ff83 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 80019e2:	480f      	ldr	r0, [pc, #60]	; (8001a20 <ignition2_d_off+0x6c>)
 80019e4:	f7ff ff80 	bl	80018e8 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 80019e8:	480e      	ldr	r0, [pc, #56]	; (8001a24 <ignition2_d_off+0x70>)
 80019ea:	f7ff ff7d 	bl	80018e8 <DIGITAL_IO_SetOutputLow>
	digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply
 80019ee:	480e      	ldr	r0, [pc, #56]	; (8001a28 <ignition2_d_off+0x74>)
 80019f0:	f00e fcc0 	bl	8010374 <digital_io_setoutputlow>
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 80019f4:	4b0d      	ldr	r3, [pc, #52]	; (8001a2c <ignition2_d_off+0x78>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	7813      	ldrb	r3, [r2, #0]
 80019fa:	f36f 13c7 	bfc	r3, #7, #1
 80019fe:	7013      	strb	r3, [r2, #0]
}
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	08013a30 	.word	0x08013a30
 8001a08:	08013738 	.word	0x08013738
 8001a0c:	08013814 	.word	0x08013814
 8001a10:	08013800 	.word	0x08013800
 8001a14:	080139e0 	.word	0x080139e0
 8001a18:	08013850 	.word	0x08013850
 8001a1c:	080139cc 	.word	0x080139cc
 8001a20:	08013954 	.word	0x08013954
 8001a24:	080137d8 	.word	0x080137d8
 8001a28:	1fff42f4 	.word	0x1fff42f4
 8001a2c:	1ffe8818 	.word	0x1ffe8818

08001a30 <Can_Outputs_State2>:
{

}

void Can_Outputs_State2(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
	CAN_OUTPUT_EPS();
 8001a34:	f008 feec 	bl	800a810 <CAN_OUTPUT_EPS>
	//Gtake_Tx_29bit();

	Irp_Tx_29bit();
 8001a38:	f009 fc94 	bl	800b364 <Irp_Tx_29bit>

	//Tx_CAN_0x121();
}
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop

08001a40 <VcuOut_MotorController>:

void VcuOut_MotorController(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_Gtake();
	VcuOut_MotorController_IRP();
 8001a44:	f000 f802 	bl	8001a4c <VcuOut_MotorController_IRP>
}
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop

08001a4c <VcuOut_MotorController_IRP>:
	//limphome_Mode();
}


void VcuOut_MotorController_IRP(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0

	static enum Gearchange_Sequence_forHzaard_t Gearchange_Sequence_forHzaard = not_allowed;

	VcuOut_MotorController_IRP_BMS_Status();
 8001a50:	f000 f8a0 	bl	8001b94 <VcuOut_MotorController_IRP_BMS_Status>

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
 8001a54:	4b2e      	ldr	r3, [pc, #184]	; (8001b10 <VcuOut_MotorController_IRP+0xc4>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d053      	beq.n	8001b04 <VcuOut_MotorController_IRP+0xb8>
 8001a5c:	4b2d      	ldr	r3, [pc, #180]	; (8001b14 <VcuOut_MotorController_IRP+0xc8>)
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d14f      	bne.n	8001b04 <VcuOut_MotorController_IRP+0xb8>
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001a64:	4b2c      	ldr	r3, [pc, #176]	; (8001b18 <VcuOut_MotorController_IRP+0xcc>)
 8001a66:	78db      	ldrb	r3, [r3, #3]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d012      	beq.n	8001a92 <VcuOut_MotorController_IRP+0x46>
		{
			if(Gearchange_Sequence_forHzaard)
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <VcuOut_MotorController_IRP+0x3e>
			{
				Irp_Mcu_drive_states_29bit->FNR = Forward_Irp;
 8001a74:	4b2a      	ldr	r3, [pc, #168]	; (8001b20 <VcuOut_MotorController_IRP+0xd4>)
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	7813      	ldrb	r3, [r2, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	f361 0301 	bfi	r3, r1, #0, #2
 8001a80:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> forward = 0x00;
 8001a82:	4b28      	ldr	r3, [pc, #160]	; (8001b24 <VcuOut_MotorController_IRP+0xd8>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 8001a8a:	4b24      	ldr	r3, [pc, #144]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e037      	b.n	8001b02 <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.reverse_relay)
 8001a92:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <VcuOut_MotorController_IRP+0xcc>)
 8001a94:	785b      	ldrb	r3, [r3, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d012      	beq.n	8001ac0 <VcuOut_MotorController_IRP+0x74>
		{
			if(Gearchange_Sequence_forHzaard)
 8001a9a:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d00a      	beq.n	8001ab8 <VcuOut_MotorController_IRP+0x6c>
			{
				Irp_Mcu_drive_states_29bit->FNR = Reverse_Irp;
 8001aa2:	4b1f      	ldr	r3, [pc, #124]	; (8001b20 <VcuOut_MotorController_IRP+0xd4>)
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	7813      	ldrb	r3, [r2, #0]
 8001aa8:	2102      	movs	r1, #2
 8001aaa:	f361 0301 	bfi	r3, r1, #0, #2
 8001aae:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> reverse = 0x03;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <VcuOut_MotorController_IRP+0xd8>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	701a      	strb	r2, [r3, #0]
 8001abe:	e020      	b.n	8001b02 <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.park_relay)
 8001ac0:	4b15      	ldr	r3, [pc, #84]	; (8001b18 <VcuOut_MotorController_IRP+0xcc>)
 8001ac2:	789b      	ldrb	r3, [r3, #2]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d00a      	beq.n	8001ade <VcuOut_MotorController_IRP+0x92>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp; //there is no option for irp
 8001ac8:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <VcuOut_MotorController_IRP+0xd4>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	7813      	ldrb	r3, [r2, #0]
 8001ace:	f36f 0301 	bfc	r3, #0, #2
 8001ad2:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> park = 0x02;
 8001ad4:	4b13      	ldr	r3, [pc, #76]	; (8001b24 <VcuOut_MotorController_IRP+0xd8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2202      	movs	r2, #2
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	e011      	b.n	8001b02 <VcuOut_MotorController_IRP+0xb6>
		}
		else if(Motor_controller_OUT.neutral)
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <VcuOut_MotorController_IRP+0xcc>)
 8001ae0:	791b      	ldrb	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d00d      	beq.n	8001b02 <VcuOut_MotorController_IRP+0xb6>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <VcuOut_MotorController_IRP+0xd4>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	7813      	ldrb	r3, [r2, #0]
 8001aec:	f36f 0301 	bfc	r3, #0, #2
 8001af0:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> neutral = 0x01;
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <VcuOut_MotorController_IRP+0xd8>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
			Gearchange_Sequence_forHzaard = allowed;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	701a      	strb	r2, [r3, #0]
	VcuOut_MotorController_IRP_BMS_Status();

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001b00:	e003      	b.n	8001b0a <VcuOut_MotorController_IRP+0xbe>
 8001b02:	e002      	b.n	8001b0a <VcuOut_MotorController_IRP+0xbe>
			Gearchange_Sequence_forHzaard = allowed;
		}
	}
	else
	{
		Gearchange_Sequence_forHzaard = not_allowed;
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <VcuOut_MotorController_IRP+0xd0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
	}

	limphome_Mode_IRP();
 8001b0a:	f000 f9e1 	bl	8001ed0 <limphome_Mode_IRP>

}
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	1fff48f0 	.word	0x1fff48f0
 8001b14:	1fff4852 	.word	0x1fff4852
 8001b18:	1fff4844 	.word	0x1fff4844
 8001b1c:	1fff43cf 	.word	0x1fff43cf
 8001b20:	1ffe8818 	.word	0x1ffe8818
 8001b24:	1ffe8814 	.word	0x1ffe8814

08001b28 <VcuOut_MotorController_off>:

void VcuOut_MotorController_off(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_off_gtake();
	VcuOut_MotorController_off_IRP();
 8001b2c:	f000 f802 	bl	8001b34 <VcuOut_MotorController_off_IRP>

}
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop

08001b34 <VcuOut_MotorController_off_IRP>:
	Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = 0;
	Gear_OUT-> neutral = 0x01;

}
void VcuOut_MotorController_off_IRP(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 8001b38:	4b14      	ldr	r3, [pc, #80]	; (8001b8c <VcuOut_MotorController_off_IRP+0x58>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	7813      	ldrb	r3, [r2, #0]
 8001b3e:	f36f 0301 	bfc	r3, #0, #2
 8001b42:	7013      	strb	r3, [r2, #0]
	Irp_Mcu_drive_states_29bit->Throttle_Command = 1023;
 8001b44:	4b11      	ldr	r3, [pc, #68]	; (8001b8c <VcuOut_MotorController_off_IRP+0x58>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4c:	705a      	strb	r2, [r3, #1]
 8001b4e:	789a      	ldrb	r2, [r3, #2]
 8001b50:	f042 0203 	orr.w	r2, r2, #3
 8001b54:	709a      	strb	r2, [r3, #2]
	Irp_Mcu_drive_states_29bit->Torque_Command = 0;
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <VcuOut_MotorController_off_IRP+0x58>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	789a      	ldrb	r2, [r3, #2]
 8001b5c:	f002 020f 	and.w	r2, r2, #15
 8001b60:	709a      	strb	r2, [r3, #2]
 8001b62:	2200      	movs	r2, #0
 8001b64:	70da      	strb	r2, [r3, #3]
 8001b66:	791a      	ldrb	r2, [r3, #4]
 8001b68:	f022 0201 	bic.w	r2, r2, #1
 8001b6c:	711a      	strb	r2, [r3, #4]
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <VcuOut_MotorController_off_IRP+0x58>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	7813      	ldrb	r3, [r2, #0]
 8001b74:	f36f 13c7 	bfc	r3, #7, #1
 8001b78:	7013      	strb	r3, [r2, #0]

	Gear_OUT-> neutral = 0x01;
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <VcuOut_MotorController_off_IRP+0x5c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	701a      	strb	r2, [r3, #0]
	//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0;//(uint8_t )Relay_Control_Switch_OUT.ac_blower3_OUT;
	//Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = 0;//(uint8_t)Relay_Control_Switch_OUT.ac_blower3_OUT;


	//DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D); //in irp contactor +ve is coming from harness and -ve controlled by rev
}
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
 8001b8a:	bf00      	nop
 8001b8c:	1ffe8818 	.word	0x1ffe8818
 8001b90:	1ffe8814 	.word	0x1ffe8814

08001b94 <VcuOut_MotorController_IRP_BMS_Status>:

void VcuOut_MotorController_IRP_BMS_Status(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
	//Irp_Mcu_drive_states_29bit -> Driving_Profile = 3;

	Irp_Mcu_BMS_states_29bit->BMS_OperationMode = 5;
 8001b98:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2205      	movs	r2, #5
 8001b9e:	701a      	strb	r2, [r3, #0]
	Irp_Mcu_BMS_states_29bit->BMS_Contactor_Status = 1;
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	7853      	ldrb	r3, [r2, #1]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	f361 0301 	bfi	r3, r1, #0, #2
 8001bac:	7053      	strb	r3, [r2, #1]
	Irp_Mcu_BMS_states_29bit->SOH = Bms_SOH;
 8001bae:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	4b40      	ldr	r3, [pc, #256]	; (8001cb4 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bbc:	b2d9      	uxtb	r1, r3
 8001bbe:	7893      	ldrb	r3, [r2, #2]
 8001bc0:	f361 0306 	bfi	r3, r1, #0, #7
 8001bc4:	7093      	strb	r3, [r2, #2]
	Irp_Mcu_BMS_states_29bit->BMS_SOC = Bms_SOC;
 8001bc6:	4b3a      	ldr	r3, [pc, #232]	; (8001cb0 <VcuOut_MotorController_IRP_BMS_Status+0x11c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a3b      	ldr	r2, [pc, #236]	; (8001cb8 <VcuOut_MotorController_IRP_BMS_Status+0x124>)
 8001bcc:	8812      	ldrh	r2, [r2, #0]
 8001bce:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001bd2:	b292      	uxth	r2, r2
 8001bd4:	b2d1      	uxtb	r1, r2
 8001bd6:	2000      	movs	r0, #0
 8001bd8:	4301      	orrs	r1, r0
 8001bda:	70d9      	strb	r1, [r3, #3]
 8001bdc:	0a12      	lsrs	r2, r2, #8
 8001bde:	b292      	uxth	r2, r2
 8001be0:	f002 0203 	and.w	r2, r2, #3
 8001be4:	f002 0003 	and.w	r0, r2, #3
 8001be8:	791a      	ldrb	r2, [r3, #4]
 8001bea:	f022 0203 	bic.w	r2, r2, #3
 8001bee:	4611      	mov	r1, r2
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	711a      	strb	r2, [r3, #4]

	Irp_Mcu_BMS_Currents_29bit->Battery_Voltage = PackVoltage;//50
 8001bf6:	4b31      	ldr	r3, [pc, #196]	; (8001cbc <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001bfc:	6812      	ldr	r2, [r2, #0]
 8001bfe:	b292      	uxth	r2, r2
 8001c00:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001c04:	b292      	uxth	r2, r2
 8001c06:	b2d1      	uxtb	r1, r2
 8001c08:	2000      	movs	r0, #0
 8001c0a:	4301      	orrs	r1, r0
 8001c0c:	7019      	strb	r1, [r3, #0]
 8001c0e:	0a12      	lsrs	r2, r2, #8
 8001c10:	b292      	uxth	r2, r2
 8001c12:	f002 021f 	and.w	r2, r2, #31
 8001c16:	f002 001f 	and.w	r0, r2, #31
 8001c1a:	785a      	ldrb	r2, [r3, #1]
 8001c1c:	f022 021f 	bic.w	r2, r2, #31
 8001c20:	4611      	mov	r1, r2
 8001c22:	4602      	mov	r2, r0
 8001c24:	430a      	orrs	r2, r1
 8001c26:	705a      	strb	r2, [r3, #1]
	Irp_Mcu_BMS_Currents_29bit->Battery_Current = PackCurrent;//20
 8001c28:	4b24      	ldr	r3, [pc, #144]	; (8001cbc <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a25      	ldr	r2, [pc, #148]	; (8001cc4 <VcuOut_MotorController_IRP_BMS_Status+0x130>)
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	b292      	uxth	r2, r2
 8001c32:	0152      	lsls	r2, r2, #5
 8001c34:	b212      	sxth	r2, r2
 8001c36:	1152      	asrs	r2, r2, #5
 8001c38:	b292      	uxth	r2, r2
 8001c3a:	b2d1      	uxtb	r1, r2
 8001c3c:	2000      	movs	r0, #0
 8001c3e:	4301      	orrs	r1, r0
 8001c40:	7099      	strb	r1, [r3, #2]
 8001c42:	0a12      	lsrs	r2, r2, #8
 8001c44:	b292      	uxth	r2, r2
 8001c46:	f002 0207 	and.w	r2, r2, #7
 8001c4a:	f002 0007 	and.w	r0, r2, #7
 8001c4e:	78da      	ldrb	r2, [r3, #3]
 8001c50:	f022 0207 	bic.w	r2, r2, #7
 8001c54:	4611      	mov	r1, r2
 8001c56:	4602      	mov	r2, r0
 8001c58:	430a      	orrs	r2, r1
 8001c5a:	70da      	strb	r2, [r3, #3]
	Irp_Mcu_BMS_Currents_29bit->MaxDischargeCurrent = 450;//DischargeCurrentLimit * -1;//20;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	; (8001cbc <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8001c66:	711a      	strb	r2, [r3, #4]
 8001c68:	795a      	ldrb	r2, [r3, #5]
 8001c6a:	f022 0207 	bic.w	r2, r2, #7
 8001c6e:	f042 0201 	orr.w	r2, r2, #1
 8001c72:	715a      	strb	r2, [r3, #5]

	//-1 commented because RegenerativeCurrentLimit from BMS was 90 and when you multiply it with -1, it gives -90 which does not start regen function of mcu.
//	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = -1 * RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
 8001c74:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a13      	ldr	r2, [pc, #76]	; (8001cc8 <VcuOut_MotorController_IRP_BMS_Status+0x134>)
 8001c7a:	8812      	ldrh	r2, [r2, #0]
 8001c7c:	b292      	uxth	r2, r2
 8001c7e:	0152      	lsls	r2, r2, #5
 8001c80:	b212      	sxth	r2, r2
 8001c82:	1152      	asrs	r2, r2, #5
 8001c84:	b292      	uxth	r2, r2
 8001c86:	b2d1      	uxtb	r1, r2
 8001c88:	2000      	movs	r0, #0
 8001c8a:	4301      	orrs	r1, r0
 8001c8c:	7199      	strb	r1, [r3, #6]
 8001c8e:	0a12      	lsrs	r2, r2, #8
 8001c90:	b292      	uxth	r2, r2
 8001c92:	f002 0207 	and.w	r2, r2, #7
 8001c96:	f002 0007 	and.w	r0, r2, #7
 8001c9a:	79da      	ldrb	r2, [r3, #7]
 8001c9c:	f022 0207 	bic.w	r2, r2, #7
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	71da      	strb	r2, [r3, #7]

}
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	1ffe881c 	.word	0x1ffe881c
 8001cb4:	1fff490c 	.word	0x1fff490c
 8001cb8:	1fff4904 	.word	0x1fff4904
 8001cbc:	1ffe8824 	.word	0x1ffe8824
 8001cc0:	1fff491c 	.word	0x1fff491c
 8001cc4:	1fff4858 	.word	0x1fff4858
 8001cc8:	1fff4860 	.word	0x1fff4860

08001ccc <State2_Lights>:

void State2_Lights(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	if((Lights_OUT.brake_switch_out_d))
 8001cd0:	4b07      	ldr	r3, [pc, #28]	; (8001cf0 <State2_Lights+0x24>)
 8001cd2:	785b      	ldrb	r3, [r3, #1]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <State2_Lights+0x22>
	{
		if((Lights_OUT.reverse_light_out))
 8001cd8:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <State2_Lights+0x24>)
 8001cda:	789b      	ldrb	r3, [r3, #2]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <State2_Lights+0x1c>
		{
			DIGITAL_IO_SetOutputHigh(&REV_LIGHT_OUT_D);
 8001ce0:	4804      	ldr	r0, [pc, #16]	; (8001cf4 <State2_Lights+0x28>)
 8001ce2:	f7ff fdf1 	bl	80018c8 <DIGITAL_IO_SetOutputHigh>
 8001ce6:	e002      	b.n	8001cee <State2_Lights+0x22>
		}
		else
		{
			DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <State2_Lights+0x28>)
 8001cea:	f7ff fdfd 	bl	80018e8 <DIGITAL_IO_SetOutputLow>
		}
	}
}
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	1fff48f0 	.word	0x1fff48f0
 8001cf4:	08013954 	.word	0x08013954

08001cf8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	2201      	movs	r2, #1
 8001d08:	409a      	lsls	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	605a      	str	r2, [r3, #4]
}
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001d24:	78fb      	ldrb	r3, [r7, #3]
 8001d26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	605a      	str	r2, [r3, #4]
}
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop

08001d3c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7c1b      	ldrb	r3, [r3, #16]
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	f7ff ffd2 	bl	8001cf8 <XMC_GPIO_SetOutputHigh>
}
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop

08001d5c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	7c1b      	ldrb	r3, [r3, #16]
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7ff ffd2 	bl	8001d18 <XMC_GPIO_SetOutputLow>
}
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop

08001d7c <OutPutAction_Update>:
#include "Vcu_Init.h"
#include "can_matrix.h"
#include "ADS7961_LIB_2.h"

void OutPutAction_Update(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
	ALL_CONDITION_ON();
 8001d80:	f000 f878 	bl	8001e74 <ALL_CONDITION_ON>

	SPI_ADC_ReadAllData(1);
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff f8f7 	bl	8000f78 <SPI_ADC_ReadAllData>

	can_outputs_allState();
 8001d8a:	f000 f899 	bl	8001ec0 <can_outputs_allState>

	State_1();
 8001d8e:	f7ff fbbb 	bl	8001508 <State_1>
	State_2();
 8001d92:	f7ff fdb9 	bl	8001908 <State_2>
	//Can_Outputs_State1();

	/* light */
	Lights_on_off();
 8001d96:	f000 f805 	bl	8001da4 <Lights_on_off>

	VcuOut_MotorController_IRPbrakes();
 8001d9a:	f000 f823 	bl	8001de4 <VcuOut_MotorController_IRPbrakes>

	door_en_cabin_light();
 8001d9e:	f000 f845 	bl	8001e2c <door_en_cabin_light>
}
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <Lights_on_off>:
	/*  obc set v and i */
	Update_CAN_id0x1806E5F4();
}

void Lights_on_off()
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
	/* light */
	if(Lights_OUT.brake_switch_out_d)
 8001da8:	4b0b      	ldr	r3, [pc, #44]	; (8001dd8 <Lights_on_off+0x34>)
 8001daa:	785b      	ldrb	r3, [r3, #1]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d009      	beq.n	8001dc4 <Lights_on_off+0x20>
	{
		DIGITAL_IO_SetOutputHigh(&BRAKE_LIGHT_OUT_D);
 8001db0:	480a      	ldr	r0, [pc, #40]	; (8001ddc <Lights_on_off+0x38>)
 8001db2:	f7ff ffc3 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 1;
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <Lights_on_off+0x3c>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	7813      	ldrb	r3, [r2, #0]
 8001dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dc0:	7013      	strb	r3, [r2, #0]
 8001dc2:	e008      	b.n	8001dd6 <Lights_on_off+0x32>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&BRAKE_LIGHT_OUT_D);
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <Lights_on_off+0x38>)
 8001dc6:	f7ff ffc9 	bl	8001d5c <DIGITAL_IO_SetOutputLow>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 0;
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <Lights_on_off+0x3c>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	7813      	ldrb	r3, [r2, #0]
 8001dd0:	f36f 1386 	bfc	r3, #6, #1
 8001dd4:	7013      	strb	r3, [r2, #0]
	}
}
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	1fff48f0 	.word	0x1fff48f0
 8001ddc:	080138dc 	.word	0x080138dc
 8001de0:	1ffe882c 	.word	0x1ffe882c

08001de4 <VcuOut_MotorController_IRPbrakes>:

void VcuOut_MotorController_IRPbrakes(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->Brake_Command = Lights_OUT.brake_switch_out_d;
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <VcuOut_MotorController_IRPbrakes+0x40>)
 8001dee:	7859      	ldrb	r1, [r3, #1]
 8001df0:	7813      	ldrb	r3, [r2, #0]
 8001df2:	f361 1345 	bfi	r3, r1, #5, #1
 8001df6:	7013      	strb	r3, [r2, #0]

	Irp_Mcu_drive_states_29bit->Handbrake_Command = !Relay_Control_Switch_OUT.elec_handbrake_pwr_out;
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	4b0a      	ldr	r3, [pc, #40]	; (8001e28 <VcuOut_MotorController_IRPbrakes+0x44>)
 8001dfe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e02:	f083 0301 	eor.w	r3, r3, #1
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	f003 0301 	and.w	r3, r3, #1
 8001e0c:	b2d9      	uxtb	r1, r3
 8001e0e:	7813      	ldrb	r3, [r2, #0]
 8001e10:	f361 1386 	bfi	r3, r1, #6, #1
 8001e14:	7013      	strb	r3, [r2, #0]
}
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	1ffe8818 	.word	0x1ffe8818
 8001e24:	1fff48f0 	.word	0x1fff48f0
 8001e28:	1fff47f0 	.word	0x1fff47f0

08001e2c <door_en_cabin_light>:

void door_en_cabin_light(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
	if((!Door_Switch_OUT.passenger_door_OUT) || (!Door_Switch_OUT.driver_door_OUT) || /*(!Door_Switch_OUT.bonnet_OUT) ||*/ (!Door_Switch_OUT.hatch_OUT))
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <door_en_cabin_light+0x40>)
 8001e32:	789b      	ldrb	r3, [r3, #2]
 8001e34:	f083 0301 	eor.w	r3, r3, #1
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d10d      	bne.n	8001e5a <door_en_cabin_light+0x2e>
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <door_en_cabin_light+0x40>)
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d106      	bne.n	8001e5a <door_en_cabin_light+0x2e>
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <door_en_cabin_light+0x40>)
 8001e4e:	795b      	ldrb	r3, [r3, #5]
 8001e50:	f083 0301 	eor.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <door_en_cabin_light+0x36>
	{
		digital_io_setoutputhigh(&AC_COMPRESSOR_OUT_D); // for cabin light on doors on/off
 8001e5a:	4805      	ldr	r0, [pc, #20]	; (8001e70 <door_en_cabin_light+0x44>)
 8001e5c:	f00e faba 	bl	80103d4 <digital_io_setoutputhigh>
 8001e60:	e002      	b.n	8001e68 <door_en_cabin_light+0x3c>
	}
	else
	{
		digital_io_setoutputlow(&AC_COMPRESSOR_OUT_D);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <door_en_cabin_light+0x44>)
 8001e64:	f00e fa86 	bl	8010374 <digital_io_setoutputlow>
	}

}
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	1fff4870 	.word	0x1fff4870
 8001e70:	1fff42f8 	.word	0x1fff42f8

08001e74 <ALL_CONDITION_ON>:
{
	//cluster_door_out = cluster_door_in;
}
*/
void ALL_CONDITION_ON()
 {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputHigh(&DOOR_LOCK_PWR_OUT_D);//check j4 -> f1
 8001e78:	4807      	ldr	r0, [pc, #28]	; (8001e98 <ALL_CONDITION_ON+0x24>)
 8001e7a:	f7ff ff5f 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&LIGHTS_PWR_OUT_D); // Check j4 -> k1
 8001e7e:	4807      	ldr	r0, [pc, #28]	; (8001e9c <ALL_CONDITION_ON+0x28>)
 8001e80:	f7ff ff5c 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HORN_PWR_OUT_D);
 8001e84:	4806      	ldr	r0, [pc, #24]	; (8001ea0 <ALL_CONDITION_ON+0x2c>)
 8001e86:	f7ff ff59 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>
//	 DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D); not set here
	 DIGITAL_IO_SetOutputHigh(&HEADLAMPS_ADJ_PWR_OUT_D);
 8001e8a:	4806      	ldr	r0, [pc, #24]	; (8001ea4 <ALL_CONDITION_ON+0x30>)
 8001e8c:	f7ff ff56 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 8001e90:	4805      	ldr	r0, [pc, #20]	; (8001ea8 <ALL_CONDITION_ON+0x34>)
 8001e92:	f7ff ff53 	bl	8001d3c <DIGITAL_IO_SetOutputHigh>

	// DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D);//instrument cluster 12v as battery(constant 12v)
	 //digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D);//bms 12v
	 //digital_io_setoutputhigh(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputhigh(&AUX_EFUSE_5_OUT_D);//obc 12v
 }
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	08013bac 	.word	0x08013bac
 8001e9c:	0801388c 	.word	0x0801388c
 8001ea0:	080138f0 	.word	0x080138f0
 8001ea4:	0801374c 	.word	0x0801374c
 8001ea8:	08013aa8 	.word	0x08013aa8

08001eac <charger_connected_inVoff>:
	 //digital_io_setoutputlow(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputlow(&AUX_EFUSE_5_OUT_D);//obc 12v
 }

void charger_connected_inVoff(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
	if(charger_on())
 8001eb0:	f7fe fee8 	bl	8000c84 <charger_on>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <charger_connected_inVoff+0x12>
	{
		Update_CAN_0x18FFB632();
 8001eba:	f008 fa6f 	bl	800a39c <Update_CAN_0x18FFB632>
	}
}
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <can_outputs_allState>:

void can_outputs_allState(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
	//charger_tx(); // charger can tx
	charger_connected_inVoff();
 8001ec4:	f7ff fff2 	bl	8001eac <charger_connected_inVoff>
	OBDII_CAN_Tx();
 8001ec8:	f007 fc54 	bl	8009774 <OBDII_CAN_Tx>
}
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop

08001ed0 <limphome_Mode_IRP>:

	return 0;
}

int limphome_Mode_IRP(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
	if((Mapped_BMS_SOC < 10) /*|| (Mcu_Temp_Irp > 90)*/)
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <limphome_Mode_IRP+0x2c>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	2b09      	cmp	r3, #9
 8001eda:	d808      	bhi.n	8001eee <limphome_Mode_IRP+0x1e>
	{
		Irp_Mcu_drive_states_29bit ->Driving_Profile = Limp_Crawl_irp;
 8001edc:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <limphome_Mode_IRP+0x30>)
 8001ede:	681a      	ldr	r2, [r3, #0]
 8001ee0:	7813      	ldrb	r3, [r2, #0]
 8001ee2:	2103      	movs	r1, #3
 8001ee4:	f361 0384 	bfi	r3, r1, #2, #3
 8001ee8:	7013      	strb	r3, [r2, #0]
		return 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	e000      	b.n	8001ef0 <limphome_Mode_IRP+0x20>
	}
	else
	{
		return 1;
 8001eee:	2301      	movs	r3, #1
	}

	return 0;
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	1fff4840 	.word	0x1fff4840
 8001f00:	1ffe8818 	.word	0x1ffe8818

08001f04 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001f04:	b598      	push	{r3, r4, r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001f08:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x1c>)
 8001f0a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001f0e:	4614      	mov	r4, r2
 8001f10:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8001f16:	f006 fdc7 	bl	8008aa8 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001f1a:	f006 fe2f 	bl	8008b7c <SystemCoreClockSetup>
}
 8001f1e:	bd98      	pop	{r3, r4, r7, pc}
 8001f20:	2003ffc4 	.word	0x2003ffc4

08001f24 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	; (8001fe8 <SystemCoreClockUpdate+0xc4>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d03e      	beq.n	8001fb4 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <SystemCoreClockUpdate+0xcc>)
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	e002      	b.n	8001f4e <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001f48:	f006 fe0e 	bl	8008b68 <OSCHP_GetFrequency>
 8001f4c:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001f4e:	4b27      	ldr	r3, [pc, #156]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001f5a:	4b24      	ldr	r3, [pc, #144]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001f62:	0e1b      	lsrs	r3, r3, #24
 8001f64:	3301      	adds	r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001f68:	4b20      	ldr	r3, [pc, #128]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	3301      	adds	r3, #1
 8001f74:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001f76:	4b1d      	ldr	r3, [pc, #116]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	3301      	adds	r3, #1
 8001f82:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	683a      	ldr	r2, [r7, #0]
 8001f88:	fb02 f303 	mul.w	r3, r2, r3
 8001f8c:	68fa      	ldr	r2, [r7, #12]
 8001f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	fb02 f303 	mul.w	r3, r2, r3
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e00d      	b.n	8001fb8 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001f9c:	4b13      	ldr	r3, [pc, #76]	; (8001fec <SystemCoreClockUpdate+0xc8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e001      	b.n	8001fb8 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001fb4:	4b0e      	ldr	r3, [pc, #56]	; (8001ff0 <SystemCoreClockUpdate+0xcc>)
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <SystemCoreClockUpdate+0xc4>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc6:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001fc8:	4b07      	ldr	r3, [pc, #28]	; (8001fe8 <SystemCoreClockUpdate+0xc4>)
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd8:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001fda:	4a06      	ldr	r2, [pc, #24]	; (8001ff4 <SystemCoreClockUpdate+0xd0>)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6013      	str	r3, [r2, #0]
}
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	50004600 	.word	0x50004600
 8001fec:	50004710 	.word	0x50004710
 8001ff0:	016e3600 	.word	0x016e3600
 8001ff4:	2003ffc0 	.word	0x2003ffc0

08001ff8 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	460b      	mov	r3, r1
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8002006:	7afb      	ldrb	r3, [r7, #11]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	b2db      	uxtb	r3, r3
 800200c:	4618      	mov	r0, r3
 800200e:	7afb      	ldrb	r3, [r7, #11]
 8002010:	089b      	lsrs	r3, r3, #2
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	3204      	adds	r2, #4
 800201a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800201e:	7afb      	ldrb	r3, [r7, #11]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	00db      	lsls	r3, r3, #3
 8002026:	4619      	mov	r1, r3
 8002028:	23f8      	movs	r3, #248	; 0xf8
 800202a:	408b      	lsls	r3, r1
 800202c:	43db      	mvns	r3, r3
 800202e:	ea02 0103 	and.w	r1, r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	1d02      	adds	r2, r0, #4
 8002036:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800203e:	7afb      	ldrb	r3, [r7, #11]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4619      	mov	r1, r3
 8002044:	2303      	movs	r3, #3
 8002046:	408b      	lsls	r3, r1
 8002048:	43db      	mvns	r3, r3
 800204a:	401a      	ands	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4a3a      	ldr	r2, [pc, #232]	; (800213c <XMC_GPIO_Init+0x144>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d003      	beq.n	8002060 <XMC_GPIO_Init+0x68>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	4a39      	ldr	r2, [pc, #228]	; (8002140 <XMC_GPIO_Init+0x148>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d10a      	bne.n	8002076 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002064:	7afb      	ldrb	r3, [r7, #11]
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	401a      	ands	r2, r3
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	661a      	str	r2, [r3, #96]	; 0x60
 8002074:	e042      	b.n	80020fc <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	b2db      	uxtb	r3, r3
 800207c:	b25b      	sxtb	r3, r3
 800207e:	2b00      	cmp	r3, #0
 8002080:	da3c      	bge.n	80020fc <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	7afb      	ldrb	r3, [r7, #11]
 8002088:	409a      	lsls	r2, r3
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 800208e:	7afb      	ldrb	r3, [r7, #11]
 8002090:	08db      	lsrs	r3, r3, #3
 8002092:	b2db      	uxtb	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	7afb      	ldrb	r3, [r7, #11]
 8002098:	08db      	lsrs	r3, r3, #3
 800209a:	b2db      	uxtb	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	3210      	adds	r2, #16
 80020a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020a6:	7afb      	ldrb	r3, [r7, #11]
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4619      	mov	r1, r3
 80020b0:	2307      	movs	r3, #7
 80020b2:	408b      	lsls	r3, r1
 80020b4:	43db      	mvns	r3, r3
 80020b6:	ea02 0103 	and.w	r1, r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f100 0210 	add.w	r2, r0, #16
 80020c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 80020c4:	7afb      	ldrb	r3, [r7, #11]
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	4618      	mov	r0, r3
 80020cc:	7afb      	ldrb	r3, [r7, #11]
 80020ce:	08db      	lsrs	r3, r3, #3
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	461a      	mov	r2, r3
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	3210      	adds	r2, #16
 80020d8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	7a1b      	ldrb	r3, [r3, #8]
 80020e0:	4619      	mov	r1, r3
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	f003 0307 	and.w	r3, r3, #7
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	ea42 0103 	orr.w	r1, r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	f100 0210 	add.w	r2, r0, #16
 80020f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 80020fc:	7afb      	ldrb	r3, [r7, #11]
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	b2db      	uxtb	r3, r3
 8002102:	4618      	mov	r0, r3
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	b2db      	uxtb	r3, r3
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	3204      	adds	r2, #4
 8002110:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	4619      	mov	r1, r3
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	fa01 f303 	lsl.w	r3, r1, r3
 8002126:	ea42 0103 	orr.w	r1, r2, r3
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	1d02      	adds	r2, r0, #4
 800212e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8002132:	3714      	adds	r7, #20
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	48028e00 	.word	0x48028e00
 8002140:	48028f00 	.word	0x48028f00

08002144 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8002148:	4b06      	ldr	r3, [pc, #24]	; (8002164 <XMC_RTC_IsRunning+0x20>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	bf14      	ite	ne
 8002154:	2301      	movne	r3, #1
 8002156:	2300      	moveq	r3, #0
 8002158:	b2db      	uxtb	r3, r3
}
 800215a:	4618      	mov	r0, r3
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	50004a00 	.word	0x50004a00

08002168 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <XMC_SCU_GetMirrorStatus+0x14>)
 800216e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8002172:	4618      	mov	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	50004000 	.word	0x50004000

08002180 <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 8002188:	f7ff ffdc 	bl	8002144 <XMC_RTC_IsRunning>
 800218c:	4603      	mov	r3, r0
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	d03e      	beq.n	8002216 <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 8002198:	f000 fbd0 	bl	800293c <XMC_SCU_HIB_IsHibernateDomainEnabled>
 800219c:	4603      	mov	r3, r0
 800219e:	f083 0301 	eor.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 80021a8:	f000 fb9c 	bl	80028e4 <XMC_SCU_HIB_EnableHibernateDomain>
    }

    XMC_RTC_SetPrescaler(config->prescaler);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	8a1b      	ldrh	r3, [r3, #16]
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fb49 	bl	8004848 <XMC_RTC_SetPrescaler>

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80021b6:	bf00      	nop
 80021b8:	f7ff ffd6 	bl	8002168 <XMC_SCU_GetMirrorStatus>
 80021bc:	4603      	mov	r3, r0
 80021be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1f8      	bne.n	80021b8 <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 80021c6:	4a16      	ldr	r2, [pc, #88]	; (8002220 <XMC_RTC_Init+0xa0>)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6213      	str	r3, [r2, #32]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80021ce:	bf00      	nop
 80021d0:	f7ff ffca 	bl	8002168 <XMC_SCU_GetMirrorStatus>
 80021d4:	4603      	mov	r3, r0
 80021d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d1f8      	bne.n	80021d0 <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 80021de:	4a10      	ldr	r2, [pc, #64]	; (8002220 <XMC_RTC_Init+0xa0>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	6253      	str	r3, [r2, #36]	; 0x24

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffbe 	bl	8002168 <XMC_SCU_GetMirrorStatus>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f8      	bne.n	80021e8 <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 80021f6:	4a0a      	ldr	r2, [pc, #40]	; (8002220 <XMC_RTC_Init+0xa0>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	6193      	str	r3, [r2, #24]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 80021fe:	bf00      	nop
 8002200:	f7ff ffb2 	bl	8002168 <XMC_SCU_GetMirrorStatus>
 8002204:	4603      	mov	r3, r0
 8002206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f8      	bne.n	8002200 <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;
 800220e:	4a04      	ldr	r2, [pc, #16]	; (8002220 <XMC_RTC_Init+0xa0>)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	61d3      	str	r3, [r2, #28]
  }
  return XMC_RTC_STATUS_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3708      	adds	r7, #8
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}
 8002220:	50004a00 	.word	0x50004a00

08002224 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 800222c:	bf00      	nop
 800222e:	f7ff ff9b 	bl	8002168 <XMC_SCU_GetMirrorStatus>
 8002232:	4603      	mov	r3, r0
 8002234:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f8      	bne.n	800222e <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 800223c:	4904      	ldr	r1, [pc, #16]	; (8002250 <XMC_RTC_EnableEvent+0x2c>)
 800223e:	4b04      	ldr	r3, [pc, #16]	; (8002250 <XMC_RTC_EnableEvent+0x2c>)
 8002240:	691a      	ldr	r2, [r3, #16]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4313      	orrs	r3, r2
 8002246:	610b      	str	r3, [r1, #16]
}
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}
 800224e:	bf00      	nop
 8002250:	50004a00 	.word	0x50004a00

08002254 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 800225a:	681b      	ldr	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	2003ffc0 	.word	0x2003ffc0

0800226c <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8002270:	4b03      	ldr	r3, [pc, #12]	; (8002280 <XMC_SCU_GetMirrorStatus+0x14>)
 8002272:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8002276:	4618      	mov	r0, r3
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	50004000 	.word	0x50004000

08002284 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 800228c:	f7ff fe4a 	bl	8001f24 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 8002290:	4b0b      	ldr	r3, [pc, #44]	; (80022c0 <XMC_SCU_lDelay+0x3c>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a0b      	ldr	r2, [pc, #44]	; (80022c4 <XMC_SCU_lDelay+0x40>)
 8002296:	fba2 2303 	umull	r2, r3, r2, r3
 800229a:	0c9a      	lsrs	r2, r3, #18
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	fb02 f303 	mul.w	r3, r2, r3
 80022a2:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80022a4:	2300      	movs	r3, #0
 80022a6:	60fb      	str	r3, [r7, #12]
 80022a8:	e003      	b.n	80022b2 <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80022aa:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
 80022b2:	68fa      	ldr	r2, [r7, #12]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d3f7      	bcc.n	80022aa <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2003ffc0 	.word	0x2003ffc0
 80022c4:	431bde83 	.word	0x431bde83

080022c8 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80022d0:	4905      	ldr	r1, [pc, #20]	; (80022e8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80022d2:	4b05      	ldr	r3, [pc, #20]	; (80022e8 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]
}
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	50004074 	.word	0x50004074

080022ec <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 80022f0:	4b03      	ldr	r3, [pc, #12]	; (8002300 <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 80022f2:	685b      	ldr	r3, [r3, #4]
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	50004074 	.word	0x50004074

08002304 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 800230c:	4a03      	ldr	r2, [pc, #12]	; (800231c <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	60d3      	str	r3, [r2, #12]
}
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	50004074 	.word	0x50004074

08002320 <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af02      	add	r7, sp, #8
 8002326:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8002328:	2000      	movs	r0, #0
 800232a:	f000 f8d7 	bl	80024dc <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800232e:	f000 fad9 	bl	80028e4 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	79db      	ldrb	r3, [r3, #7]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 800233a:	f000 fb2f 	bl	800299c <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800233e:	bf00      	nop
 8002340:	f000 fb1a 	bl	8002978 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8002344:	4603      	mov	r3, r0
 8002346:	f083 0301 	eor.w	r3, r3, #1
 800234a:	b2db      	uxtb	r3, r3
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1f7      	bne.n	8002340 <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	7a5b      	ldrb	r3, [r3, #9]
 8002354:	4618      	mov	r0, r3
 8002356:	f000 f93b 	bl	80025d0 <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 800235a:	bf00      	nop
 800235c:	f7ff ff86 	bl	800226c <XMC_SCU_GetMirrorStatus>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1fa      	bne.n	800235c <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	7a1b      	ldrb	r3, [r3, #8]
 800236a:	4618      	mov	r0, r3
 800236c:	f000 fa94 	bl	8002898 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	7c1b      	ldrb	r3, [r3, #16]
 8002374:	4618      	mov	r0, r3
 8002376:	f000 f949 	bl	800260c <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	7c5b      	ldrb	r3, [r3, #17]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 f96c 	bl	800265c <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	7c9b      	ldrb	r3, [r3, #18]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 f953 	bl	8002634 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	7cdb      	ldrb	r3, [r3, #19]
 8002392:	4618      	mov	r0, r3
 8002394:	f000 f976 	bl	8002684 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	799b      	ldrb	r3, [r3, #6]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80023a0:	f000 fb34 	bl	8002a0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80023a4:	bf00      	nop
 80023a6:	f000 fb59 	bl	8002a5c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80023aa:	4603      	mov	r3, r0
 80023ac:	f083 0301 	eor.w	r3, r3, #1
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f7      	bne.n	80023a6 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	78db      	ldrb	r3, [r3, #3]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d109      	bne.n	80023d2 <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	799b      	ldrb	r3, [r3, #6]
 80023c2:	f083 0301 	eor.w	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d017      	beq.n	80023fc <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80023cc:	f000 fb6a 	bl	8002aa4 <XMC_SCU_CLOCK_DisableSystemPll>
 80023d0:	e014      	b.n	80023fc <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80023d2:	f000 fb57 	bl	8002a84 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	8899      	ldrh	r1, [r3, #4]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80023e2:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80023e8:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80023ee:	9300      	str	r3, [sp, #0]
 80023f0:	4608      	mov	r0, r1
 80023f2:	4611      	mov	r1, r2
 80023f4:	462a      	mov	r2, r5
 80023f6:	4623      	mov	r3, r4
 80023f8:	f000 fb64 	bl	8002ac4 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d103      	bne.n	800240e <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8002406:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800240a:	f000 f867 	bl	80024dc <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800240e:	f7ff fd89 	bl	8001f24 <SystemCoreClockUpdate>
}
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bdb0      	pop	{r4, r5, r7, pc}

08002418 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory;
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 8002420:	4905      	ldr	r1, [pc, #20]	; (8002438 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8002422:	4b05      	ldr	r3, [pc, #20]	; (8002438 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	4313      	orrs	r3, r2
 800242a:	614b      	str	r3, [r1, #20]
}
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	50004074 	.word	0x50004074

0800243c <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	0f1b      	lsrs	r3, r3, #28
 8002448:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002450:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	4413      	add	r3, r2
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	461a      	mov	r2, r3
 800245e:	4b04      	ldr	r3, [pc, #16]	; (8002470 <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 8002460:	4413      	add	r3, r2
 8002462:	68ba      	ldr	r2, [r7, #8]
 8002464:	601a      	str	r2, [r3, #0]
}
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	50004414 	.word	0x50004414

08002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0f1b      	lsrs	r3, r3, #28
 8002480:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002488:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	461a      	mov	r2, r3
 8002496:	4b08      	ldr	r3, [pc, #32]	; (80024b8 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 8002498:	4413      	add	r3, r2
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	4013      	ands	r3, r2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	bf14      	ite	ne
 80024a4:	2301      	movne	r3, #1
 80024a6:	2300      	moveq	r3, #0
 80024a8:	b2db      	uxtb	r3, r3
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	5000440c 	.word	0x5000440c

080024bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80024c0:	f7ff fec8 	bl	8002254 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80024c4:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80024c6:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80024c8:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	50004600 	.word	0x50004600

080024dc <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80024dc:	b480      	push	{r7}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 80024e4:	4906      	ldr	r1, [pc, #24]	; (8002500 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80024e6:	4b06      	ldr	r3, [pc, #24]	; (8002500 <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4313      	orrs	r3, r2
 80024f2:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	50004600 	.word	0x50004600

08002504 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 800250c:	4906      	ldr	r1, [pc, #24]	; (8002528 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800250e:	4b06      	ldr	r3, [pc, #24]	; (8002528 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4313      	orrs	r3, r2
 800251a:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	50004600 	.word	0x50004600

0800252c <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8002534:	4906      	ldr	r1, [pc, #24]	; (8002550 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002536:	4b06      	ldr	r3, [pc, #24]	; (8002550 <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4313      	orrs	r3, r2
 8002542:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	50004600 	.word	0x50004600

08002554 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002564:	4a0a      	ldr	r2, [pc, #40]	; (8002590 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	60d3      	str	r3, [r2, #12]
 8002574:	e007      	b.n	8002586 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002576:	4a06      	ldr	r2, [pc, #24]	; (8002590 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002578:	4b05      	ldr	r3, [pc, #20]	; (8002590 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002580:	f043 0301 	orr.w	r3, r3, #1
 8002584:	60d3      	str	r3, [r2, #12]
  }
}
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	50004710 	.word	0x50004710

08002594 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 800259e:	bf00      	nop
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80025a2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1f8      	bne.n	80025a0 <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80025ae:	4907      	ldr	r1, [pc, #28]	; (80025cc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80025b8:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80025ba:	4313      	orrs	r3, r2
 80025bc:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80025be:	370c      	adds	r7, #12
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	50004000 	.word	0x50004000
 80025cc:	50004300 	.word	0x50004300

080025d0 <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80025da:	bf00      	nop
 80025dc:	4b09      	ldr	r3, [pc, #36]	; (8002604 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80025de:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80025e2:	f003 0308 	and.w	r3, r3, #8
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f8      	bne.n	80025dc <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80025ea:	4907      	ldr	r1, [pc, #28]	; (8002608 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 80025f4:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 80025f6:	4313      	orrs	r3, r2
 80025f8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	50004000 	.word	0x50004000
 8002608:	50004300 	.word	0x50004300

0800260c <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002614:	4906      	ldr	r1, [pc, #24]	; (8002630 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	50004600 	.word	0x50004600

08002634 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800263c:	4906      	ldr	r1, [pc, #24]	; (8002658 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 800264a:	4313      	orrs	r3, r2
 800264c:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr
 8002658:	50004600 	.word	0x50004600

0800265c <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002664:	4906      	ldr	r1, [pc, #24]	; (8002680 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002666:	4b06      	ldr	r3, [pc, #24]	; (8002680 <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002668:	691b      	ldr	r3, [r3, #16]
 800266a:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002672:	4313      	orrs	r3, r2
 8002674:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	50004600 	.word	0x50004600

08002684 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800268c:	4906      	ldr	r1, [pc, #24]	; (80026a8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 8002690:	695b      	ldr	r3, [r3, #20]
 8002692:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 800269a:	4313      	orrs	r3, r2
 800269c:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 800269e:	370c      	adds	r7, #12
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	50004600 	.word	0x50004600

080026ac <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80026b4:	4906      	ldr	r1, [pc, #24]	; (80026d0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80026c2:	4313      	orrs	r3, r2
 80026c4:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ce:	4770      	bx	lr
 80026d0:	50004600 	.word	0x50004600

080026d4 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80026dc:	4906      	ldr	r1, [pc, #24]	; (80026f8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80026de:	4b06      	ldr	r3, [pc, #24]	; (80026f8 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	50004600 	.word	0x50004600

080026fc <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002704:	4906      	ldr	r1, [pc, #24]	; (8002720 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002706:	4b06      	ldr	r3, [pc, #24]	; (8002720 <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800270a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002712:	4313      	orrs	r3, r2
 8002714:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	50004600 	.word	0x50004600

08002724 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800272e:	4a04      	ldr	r2, [pc, #16]	; (8002740 <XMC_SCU_CLOCK_EnableClock+0x1c>)
 8002730:	79fb      	ldrb	r3, [r7, #7]
 8002732:	6053      	str	r3, [r2, #4]
}
 8002734:	370c      	adds	r7, #12
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	50004600 	.word	0x50004600

08002744 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	0f1b      	lsrs	r3, r3, #28
 8002750:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002758:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 800275a:	68fa      	ldr	r2, [r7, #12]
 800275c:	4613      	mov	r3, r2
 800275e:	005b      	lsls	r3, r3, #1
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	461a      	mov	r2, r3
 8002766:	4b04      	ldr	r3, [pc, #16]	; (8002778 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8002768:	4413      	add	r3, r2
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	601a      	str	r2, [r3, #0]
}
 800276e:	3714      	adds	r7, #20
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr
 8002778:	50004648 	.word	0x50004648

0800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	0f1b      	lsrs	r3, r3, #28
 8002788:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002790:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4613      	mov	r3, r2
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	461a      	mov	r2, r3
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80027a0:	4413      	add	r3, r2
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	4013      	ands	r3, r2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	bf14      	ite	ne
 80027ac:	2301      	movne	r3, #1
 80027ae:	2300      	moveq	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3714      	adds	r7, #20
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	50004640 	.word	0x50004640

080027c4 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80027c8:	4a05      	ldr	r2, [pc, #20]	; (80027e0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d2:	f023 0302 	bic.w	r3, r3, #2
 80027d6:	6153      	str	r3, [r2, #20]
}
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	50004710 	.word	0x50004710

080027e4 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 80027ee:	4a28      	ldr	r2, [pc, #160]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80027f2:	695b      	ldr	r3, [r3, #20]
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 80027fa:	bf00      	nop
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 80027fe:	691b      	ldr	r3, [r3, #16]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f9      	beq.n	80027fc <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002808:	4a21      	ldr	r2, [pc, #132]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800280a:	4b21      	ldr	r3, [pc, #132]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	f043 0310 	orr.w	r3, r3, #16
 8002812:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002814:	491e      	ldr	r1, [pc, #120]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	3b01      	subs	r3, #1
 800281a:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	3b01      	subs	r3, #1
 8002820:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002822:	4313      	orrs	r3, r2
 8002824:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002828:	4b19      	ldr	r3, [pc, #100]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002830:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002832:	4a17      	ldr	r2, [pc, #92]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002834:	4b16      	ldr	r3, [pc, #88]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f023 0310 	bic.w	r3, r3, #16
 800283c:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800283e:	4a14      	ldr	r2, [pc, #80]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002840:	4b13      	ldr	r3, [pc, #76]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002842:	695b      	ldr	r3, [r3, #20]
 8002844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002848:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 800284a:	bf00      	nop
 800284c:	4b10      	ldr	r3, [pc, #64]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800284e:	691b      	ldr	r3, [r3, #16]
 8002850:	f003 0304 	and.w	r3, r3, #4
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f9      	beq.n	800284c <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002858:	4a0d      	ldr	r2, [pc, #52]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800285a:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	f023 0301 	bic.w	r3, r3, #1
 8002862:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8002864:	bf00      	nop
 8002866:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002868:	691b      	ldr	r3, [r3, #16]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f9      	bne.n	8002866 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002876:	695b      	ldr	r3, [r3, #20]
 8002878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800287c:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 800287e:	4b05      	ldr	r3, [pc, #20]	; (8002894 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 8002880:	2208      	movs	r2, #8
 8002882:	60da      	str	r2, [r3, #12]
}
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop
 8002890:	50004710 	.word	0x50004710
 8002894:	50004160 	.word	0x50004160

08002898 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80028a2:	4a0f      	ldr	r2, [pc, #60]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028a4:	4b0e      	ldr	r3, [pc, #56]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ac:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10e      	bne.n	80028d2 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028b6:	4b0a      	ldr	r3, [pc, #40]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80028be:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80028c0:	2064      	movs	r0, #100	; 0x64
 80028c2:	f7ff fcdf 	bl	8002284 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80028c6:	4a06      	ldr	r2, [pc, #24]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80028d0:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80028d2:	2064      	movs	r0, #100	; 0x64
 80028d4:	f7ff fcd6 	bl	8002284 <XMC_SCU_lDelay>
}
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	50004710 	.word	0x50004710

080028e4 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80028e8:	4b12      	ldr	r3, [pc, #72]	; (8002934 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d109      	bne.n	8002908 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80028f6:	2201      	movs	r2, #1
 80028f8:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 80028fa:	bf00      	nop
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0301 	and.w	r3, r3, #1
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f9      	beq.n	80028fc <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002916:	f44f 7200 	mov.w	r2, #512	; 0x200
 800291a:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 800291c:	bf00      	nop
 800291e:	4b06      	ldr	r3, [pc, #24]	; (8002938 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1f9      	bne.n	800291e <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	50004200 	.word	0x50004200
 8002938:	50004400 	.word	0x50004400

0800293c <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d007      	beq.n	800295c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002958:	2301      	movs	r3, #1
 800295a:	e000      	b.n	800295e <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 800295c:	2300      	movs	r3, #0
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8002964:	4618      	mov	r0, r3
 8002966:	46bd      	mov	sp, r7
 8002968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296c:	4770      	bx	lr
 800296e:	bf00      	nop
 8002970:	50004200 	.word	0x50004200
 8002974:	50004400 	.word	0x50004400

08002978 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0308 	and.w	r3, r3, #8
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
}
 800298e:	4618      	mov	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	50004300 	.word	0x50004300

0800299c <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 80029a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80029a4:	f7ff fcae 	bl	8002304 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80029a8:	4a17      	ldr	r2, [pc, #92]	; (8002a08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80029aa:	4b17      	ldr	r3, [pc, #92]	; (8002a08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80029ac:	69db      	ldr	r3, [r3, #28]
 80029ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80029b2:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80029b4:	bf00      	nop
 80029b6:	f7ff fc99 	bl	80022ec <XMC_SCU_INTERUPT_GetEventStatus>
 80029ba:	4603      	mov	r3, r0
 80029bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d0f8      	beq.n	80029b6 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80029c4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80029c8:	f7ff fc9c 	bl	8002304 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80029cc:	4b0e      	ldr	r3, [pc, #56]	; (8002a08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80029ce:	2208      	movs	r2, #8
 80029d0:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80029d2:	bf00      	nop
 80029d4:	f7ff fc8a 	bl	80022ec <XMC_SCU_INTERUPT_GetEventStatus>
 80029d8:	4603      	mov	r3, r0
 80029da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f8      	beq.n	80029d4 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80029e2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80029e6:	f7ff fc8d 	bl	8002304 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 80029ea:	4a07      	ldr	r2, [pc, #28]	; (8002a08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80029ec:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f043 0308 	orr.w	r3, r3, #8
 80029f4:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 80029f6:	bf00      	nop
 80029f8:	f7ff fc78 	bl	80022ec <XMC_SCU_INTERUPT_GetEventStatus>
 80029fc:	4603      	mov	r3, r0
 80029fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d0f8      	beq.n	80029f8 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	50004300 	.word	0x50004300

08002a0c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002a0c:	b5b0      	push	{r4, r5, r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 8002a10:	4a0f      	ldr	r2, [pc, #60]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002a12:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a1a:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002a1c:	4d0d      	ldr	r5, [pc, #52]	; (8002a54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002a1e:	4b0d      	ldr	r3, [pc, #52]	; (8002a54 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002a26:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002a2a:	f006 f89d 	bl	8008b68 <OSCHP_GetFrequency>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 8002a32:	fba3 2302 	umull	r2, r3, r3, r2
 8002a36:	0d1b      	lsrs	r3, r3, #20
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002a3c:	4323      	orrs	r3, r4
 8002a3e:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 8002a40:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002a42:	4b03      	ldr	r3, [pc, #12]	; (8002a50 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002a4a:	6053      	str	r3, [r2, #4]
}
 8002a4c:	bdb0      	pop	{r4, r5, r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	50004710 	.word	0x50004710
 8002a54:	50004700 	.word	0x50004700
 8002a58:	6b5fca6b 	.word	0x6b5fca6b

08002a5c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 8002a60:	4b07      	ldr	r3, [pc, #28]	; (8002a80 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002a68:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002a6c:	bf0c      	ite	eq
 8002a6e:	2301      	moveq	r3, #1
 8002a70:	2300      	movne	r3, #0
 8002a72:	b2db      	uxtb	r3, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	50004710 	.word	0x50004710

08002a84 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002a88:	4a05      	ldr	r2, [pc, #20]	; (8002aa0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002a8a:	4b05      	ldr	r3, [pc, #20]	; (8002aa0 <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a92:	f023 0302 	bic.w	r3, r3, #2
 8002a96:	6053      	str	r3, [r2, #4]
}
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	50004710 	.word	0x50004710

08002aa4 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 8002aa8:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ab2:	f043 0302 	orr.w	r3, r3, #2
 8002ab6:	6053      	str	r3, [r2, #4]
}
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abe:	4770      	bx	lr
 8002ac0:	50004710 	.word	0x50004710

08002ac4 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60ba      	str	r2, [r7, #8]
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4603      	mov	r3, r0
 8002ad0:	81fb      	strh	r3, [r7, #14]
 8002ad2:	460b      	mov	r3, r1
 8002ad4:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 8002ad6:	89fb      	ldrh	r3, [r7, #14]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fd3b 	bl	8002554 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 8002ade:	7b7b      	ldrb	r3, [r7, #13]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	f040 808b 	bne.w	8002bfc <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002ae6:	89fb      	ldrh	r3, [r7, #14]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d109      	bne.n	8002b00 <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002aec:	f006 f83c 	bl	8008b68 <OSCHP_GetFrequency>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4b54      	ldr	r3, [pc, #336]	; (8002c44 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8002af4:	fba3 2302 	umull	r2, r3, r3, r2
 8002af8:	0c9b      	lsrs	r3, r3, #18
 8002afa:	059b      	lsls	r3, r3, #22
 8002afc:	617b      	str	r3, [r7, #20]
 8002afe:	e002      	b.n	8002b06 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002b00:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002b04:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	fb02 f203 	mul.w	r2, r2, r3
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	4a4b      	ldr	r2, [pc, #300]	; (8002c48 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	0d9b      	lsrs	r3, r3, #22
 8002b22:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002b24:	4a49      	ldr	r2, [pc, #292]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f043 0301 	orr.w	r3, r3, #1
 8002b2e:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002b30:	bf00      	nop
 8002b32:	4b46      	ldr	r3, [pc, #280]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d0f9      	beq.n	8002b32 <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002b3e:	4a43      	ldr	r2, [pc, #268]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b40:	4b42      	ldr	r3, [pc, #264]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f043 0310 	orr.w	r3, r3, #16
 8002b48:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002b4a:	4940      	ldr	r1, [pc, #256]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b4e:	689a      	ldr	r2, [r3, #8]
 8002b50:	4b3f      	ldr	r3, [pc, #252]	; (8002c50 <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8002b52:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	3a01      	subs	r2, #1
 8002b58:	0212      	lsls	r2, r2, #8
 8002b5a:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002b62:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002b6e:	4a37      	ldr	r2, [pc, #220]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b78:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002b7a:	4a34      	ldr	r2, [pc, #208]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b7c:	4b33      	ldr	r3, [pc, #204]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	f023 0310 	bic.w	r3, r3, #16
 8002b84:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002b86:	4a31      	ldr	r2, [pc, #196]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b88:	4b30      	ldr	r3, [pc, #192]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b90:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002b92:	bf00      	nop
 8002b94:	4b2d      	ldr	r3, [pc, #180]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0f9      	beq.n	8002b94 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002ba0:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002ba2:	4b2a      	ldr	r3, [pc, #168]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	f023 0301 	bic.w	r3, r3, #1
 8002baa:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002bac:	bf00      	nop
 8002bae:	4b27      	ldr	r3, [pc, #156]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1f9      	bne.n	8002bae <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	4a25      	ldr	r2, [pc, #148]	; (8002c54 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	0d9b      	lsrs	r3, r3, #22
 8002bc6:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002bc8:	6a3a      	ldr	r2, [r7, #32]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d202      	bcs.n	8002bd6 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002bd0:	6938      	ldr	r0, [r7, #16]
 8002bd2:	f000 f845 	bl	8002c60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	085b      	lsrs	r3, r3, #1
 8002bda:	4a1f      	ldr	r2, [pc, #124]	; (8002c58 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8002bdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002be0:	095b      	lsrs	r3, r3, #5
 8002be2:	0d9b      	lsrs	r3, r3, #22
 8002be4:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002be6:	6a3a      	ldr	r2, [r7, #32]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d202      	bcs.n	8002bf4 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002bee:	6938      	ldr	r0, [r7, #16]
 8002bf0:	f000 f836 	bl	8002c60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002bf4:	6a38      	ldr	r0, [r7, #32]
 8002bf6:	f000 f833 	bl	8002c60 <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8002bfa:	e01c      	b.n	8002c36 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002bfc:	4913      	ldr	r1, [pc, #76]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002bfe:	4b13      	ldr	r3, [pc, #76]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002c06:	6a3b      	ldr	r3, [r7, #32]
 8002c08:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8002c0e:	bf00      	nop
 8002c10:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d0f9      	beq.n	8002c10 <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002c28:	bf00      	nop
 8002c2a:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f9      	beq.n	8002c2a <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002c36:	4b09      	ldr	r3, [pc, #36]	; (8002c5c <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8002c38:	2205      	movs	r2, #5
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	431bde83 	.word	0x431bde83
 8002c48:	aaaaaaab 	.word	0xaaaaaaab
 8002c4c:	50004710 	.word	0x50004710
 8002c50:	f08080ff 	.word	0xf08080ff
 8002c54:	88888889 	.word	0x88888889
 8002c58:	b60b60b7 	.word	0xb60b60b7
 8002c5c:	50004160 	.word	0x50004160

08002c60 <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002c68:	490b      	ldr	r1, [pc, #44]	; (8002c98 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	3b01      	subs	r3, #1
 8002c76:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8002c7c:	bf00      	nop
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0320 	and.w	r3, r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f9      	beq.n	8002c7e <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8002c8a:	2032      	movs	r0, #50	; 0x32
 8002c8c:	f7ff fafa 	bl	8002284 <XMC_SCU_lDelay>
}
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	50004710 	.word	0x50004710

08002c9c <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	bf0c      	ite	eq
 8002cb2:	2301      	moveq	r3, #1
 8002cb4:	2300      	movne	r3, #0
 8002cb6:	b2db      	uxtb	r3, r3
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	4608      	mov	r0, r1
 8002cce:	4611      	mov	r1, r2
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	70fb      	strb	r3, [r7, #3]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	70bb      	strb	r3, [r7, #2]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002cde:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002ce0:	78bb      	ldrb	r3, [r7, #2]
 8002ce2:	041b      	lsls	r3, r3, #16
 8002ce4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002ce8:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8002cea:	787b      	ldrb	r3, [r7, #1]
 8002cec:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002cee:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	601a      	str	r2, [r3, #0]
}
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop

08002d20 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	601a      	str	r2, [r3, #0]
}
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop

08002d40 <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	bf38      	it	cc
 8002d52:	4613      	movcc	r3, r2
}
 8002d54:	4618      	mov	r0, r3
 8002d56:	370c      	adds	r7, #12
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr

08002d60 <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	bf28      	it	cs
 8002d72:	4613      	movcs	r3, r2
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	370c      	adds	r7, #12
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7e:	4770      	bx	lr

08002d80 <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b088      	sub	sp, #32
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	6852      	ldr	r2, [r2, #4]
 8002d92:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d96:	fb02 f201 	mul.w	r2, r2, r1
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 8090 	bne.w	8002ec2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8002da2:	2300      	movs	r3, #0
 8002da4:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db6:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8002db8:	2319      	movs	r3, #25
 8002dba:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002dc4:	e04b      	b.n	8002e5e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	697a      	ldr	r2, [r7, #20]
 8002dca:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dce:	6979      	ldr	r1, [r7, #20]
 8002dd0:	fb01 f202 	mul.w	r2, r1, r2
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d13e      	bne.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d034      	beq.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002df4:	d830      	bhi.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b3f      	cmp	r3, #63	; 0x3f
 8002dfa:	d90a      	bls.n	8002e12 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d003      	beq.n	8002e0e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	617b      	str	r3, [r7, #20]
              continue;
 8002e0c:	e027      	b.n	8002e5e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3b01      	subs	r3, #1
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	8912      	ldrh	r2, [r2, #8]
 8002e1a:	fb02 f303 	mul.w	r3, r2, r3
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8002e20:	fba2 2303 	umull	r2, r3, r2, r3
 8002e24:	0b5b      	lsrs	r3, r3, #13
 8002e26:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8002e28:	697a      	ldr	r2, [r7, #20]
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d90f      	bls.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d80c      	bhi.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d909      	bls.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b06      	cmp	r3, #6
 8002e48:	d806      	bhi.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	895b      	ldrh	r3, [r3, #10]
 8002e4e:	461a      	mov	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d800      	bhi.n	8002e58 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8002e56:	e005      	b.n	8002e64 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b07      	cmp	r3, #7
 8002e62:	d8b0      	bhi.n	8002dc6 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	2b07      	cmp	r3, #7
 8002e68:	d92b      	bls.n	8002ec2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7ff ff48 	bl	8002d00 <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	031b      	lsls	r3, r3, #12
 8002e76:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	895b      	ldrh	r3, [r3, #10]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	019b      	lsls	r3, r3, #6
 8002e82:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002e84:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	021b      	lsls	r3, r3, #8
 8002e8c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002e90:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4613      	mov	r3, r2
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	4413      	add	r3, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	40d3      	lsrs	r3, r2
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002ea8:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	03db      	lsls	r3, r3, #15
 8002eb0:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002eb2:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f7ff ff31 	bl	8002d20 <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8002ec2:	2301      	movs	r3, #1
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3720      	adds	r7, #32
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	d1b71759 	.word	0xd1b71759

08002ed0 <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
 8002edc:	4613      	mov	r3, r2
 8002ede:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8002ee0:	bf00      	nop
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff feda 	bl	8002c9c <XMC_CAN_IsPanelControlReady>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f083 0301 	eor.w	r3, r3, #1
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1f6      	bne.n	8002ee2 <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	78ba      	ldrb	r2, [r7, #2]
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	2102      	movs	r1, #2
 8002f00:	f7ff fee0 	bl	8002cc4 <XMC_CAN_PanelControl>
}
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop

08002f0c <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8002f14:	480a      	ldr	r0, [pc, #40]	; (8002f40 <XMC_CAN_Enable+0x34>)
 8002f16:	f7ff fc15 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002f1a:	4809      	ldr	r0, [pc, #36]	; (8002f40 <XMC_CAN_Enable+0x34>)
 8002f1c:	f7ff fa8e 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 0201 	bic.w	r2, r3, #1
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8002f2c:	bf00      	nop
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f9      	bne.n	8002f2e <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	10000010 	.word	0x10000010

08002f44 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002f56:	f023 020f 	bic.w	r2, r3, #15
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	431a      	orrs	r2, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8002f64:	370c      	adds	r7, #12
 8002f66:	46bd      	mov	sp, r7
 8002f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6c:	4770      	bx	lr
 8002f6e:	bf00      	nop

08002f70 <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	f003 030f 	and.w	r3, r3, #15
 8002f84:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop

08002f94 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ffe5 	bl	8002f70 <XMC_CAN_GetBaudrateClockSource>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d002      	beq.n	8002fb2 <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d004      	beq.n	8002fba <XMC_CAN_GetBaudrateClockFrequency+0x26>
 8002fb0:	e007      	b.n	8002fc2 <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8002fb2:	f7ff fa83 	bl	80024bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002fb6:	60f8      	str	r0, [r7, #12]
      break;
 8002fb8:	e003      	b.n	8002fc2 <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 8002fba:	f005 fdd5 	bl	8008b68 <OSCHP_GetFrequency>
 8002fbe:	60f8      	str	r0, [r7, #12]
      break;
 8002fc0:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b088      	sub	sp, #32
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	60f8      	str	r0, [r7, #12]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	607a      	str	r2, [r7, #4]
 8002fd8:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f7ff ff96 	bl	8002f0c <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8002fe0:	7afb      	ldrb	r3, [r7, #11]
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7ff ffad 	bl	8002f44 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8002fea:	68f8      	ldr	r0, [r7, #12]
 8002fec:	f7ff ffd2 	bl	8002f94 <XMC_CAN_GetBaudrateClockFrequency>
 8002ff0:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8002ff2:	69fa      	ldr	r2, [r7, #28]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ffa:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002ffe:	2000      	movs	r0, #0
 8003000:	4619      	mov	r1, r3
 8003002:	f7ff fe9d 	bl	8002d40 <max>
 8003006:	4603      	mov	r3, r0
 8003008:	4618      	mov	r0, r3
 800300a:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800300e:	f7ff fea7 	bl	8002d60 <min>
 8003012:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 800301a:	69fa      	ldr	r2, [r7, #28]
 800301c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800302a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800302e:	68fa      	ldr	r2, [r7, #12]
 8003030:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	4313      	orrs	r3, r2
 800303a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	60da      	str	r2, [r3, #12]

  return freq_n;
 8003042:	697b      	ldr	r3, [r7, #20]
}
 8003044:	4618      	mov	r0, r3
 8003046:	3720      	adds	r7, #32
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b086      	sub	sp, #24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 800305c:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	035a      	lsls	r2, r3, #13
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	021b      	lsls	r3, r3, #8
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6812      	ldr	r2, [r2, #0]
 800307e:	6892      	ldr	r2, [r2, #8]
 8003080:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003084:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6812      	ldr	r2, [r2, #0]
 800308e:	6891      	ldr	r1, [r2, #8]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	430a      	orrs	r2, r1
 8003094:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	79db      	ldrb	r3, [r3, #7]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d007      	beq.n	80030b4 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	79db      	ldrb	r3, [r3, #7]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d100      	bne.n	80030b4 <XMC_CAN_MO_Config+0x68>
 80030b2:	e060      	b.n	8003176 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d004      	beq.n	80030c6 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d000      	beq.n	80030c6 <XMC_CAN_MO_Config+0x7a>
 80030c4:	e057      	b.n	8003176 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2220      	movs	r2, #32
 80030cc:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	79db      	ldrb	r3, [r3, #7]
 80030d2:	f003 0320 	and.w	r3, r3, #32
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d128      	bne.n	800312e <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 80030e8:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f3c3 031c 	ubfx	r3, r3, #0, #29
 80030f2:	049b      	lsls	r3, r3, #18
 80030f4:	461a      	mov	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003110:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800311a:	049b      	lsls	r3, r3, #18
 800311c:	461a      	mov	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4313      	orrs	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	60da      	str	r2, [r3, #12]
 800312c:	e009      	b.n	8003142 <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	6852      	ldr	r2, [r2, #4]
 8003136:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	7e1b      	ldrb	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d10c      	bne.n	8003164 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f81a 	bl	8003184 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003158:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a07      	ldr	r2, [pc, #28]	; (800317c <XMC_CAN_MO_Config+0x130>)
 8003160:	61da      	str	r2, [r3, #28]
 8003162:	e008      	b.n	8003176 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800316c:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a03      	ldr	r2, [pc, #12]	; (8003180 <XMC_CAN_MO_Config+0x134>)
 8003174:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8003176:	3718      	adds	r7, #24
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	062000c0 	.word	0x062000c0
 8003180:	00a00640 	.word	0x00a00640

08003184 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 800318c:	2303      	movs	r3, #3
 800318e:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	7e1b      	ldrb	r3, [r3, #24]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d122      	bne.n	80031de <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	2220      	movs	r2, #32
 800319e:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	6812      	ldr	r2, [r2, #0]
 80031aa:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	7b12      	ldrb	r2, [r2, #12]
 80031b2:	0612      	lsls	r2, r2, #24
 80031b4:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80031b8:	430a      	orrs	r2, r1
 80031ba:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	687a      	ldr	r2, [r7, #4]
 80031c2:	6912      	ldr	r2, [r2, #16]
 80031c4:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	6952      	ldr	r2, [r2, #20]
 80031ce:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a06      	ldr	r2, [pc, #24]	; (80031f0 <XMC_CAN_MO_UpdateData+0x6c>)
 80031d6:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80031d8:	2300      	movs	r3, #0
 80031da:	73fb      	strb	r3, [r7, #15]
 80031dc:	e001      	b.n	80031e2 <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80031de:	2303      	movs	r3, #3
 80031e0:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80031e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	00280040 	.word	0x00280040

080031f4 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b087      	sub	sp, #28
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d102      	bne.n	8003228 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 8003222:	2304      	movs	r3, #4
 8003224:	75fb      	strb	r3, [r7, #23]
 8003226:	e00c      	b.n	8003242 <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800322e:	2302      	movs	r3, #2
 8003230:	75fb      	strb	r3, [r7, #23]
 8003232:	e006      	b.n	8003242 <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800323c:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 8003242:	7dfb      	ldrb	r3, [r7, #23]
}
 8003244:	4618      	mov	r0, r3
 8003246:	371c      	adds	r7, #28
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 8003250:	b480      	push	{r7}
 8003252:	b087      	sub	sp, #28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800326e:	0adb      	lsrs	r3, r3, #11
 8003270:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	69db      	ldr	r3, [r3, #28]
 8003278:	f003 0304 	and.w	r3, r3, #4
 800327c:	089b      	lsrs	r3, r3, #2
 800327e:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 8003286:	2303      	movs	r3, #3
 8003288:	75fb      	strb	r3, [r7, #23]
 800328a:	e0a7      	b.n	80033dc <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 8003292:	2302      	movs	r3, #2
 8003294:	75fb      	strb	r3, [r7, #23]
 8003296:	e0a1      	b.n	80033dc <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2208      	movs	r2, #8
 800329e:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032aa:	0f5b      	lsrs	r3, r3, #29
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d140      	bne.n	8003332 <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	79d3      	ldrb	r3, [r2, #7]
 80032b4:	f36f 1345 	bfc	r3, #5, #1
 80032b8:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699a      	ldr	r2, [r3, #24]
 80032c0:	4b4a      	ldr	r3, [pc, #296]	; (80033ec <XMC_CAN_MO_Receive+0x19c>)
 80032c2:	4013      	ands	r3, r2
 80032c4:	0c9b      	lsrs	r3, r3, #18
 80032c6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6853      	ldr	r3, [r2, #4]
 80032ce:	f361 031c 	bfi	r3, r1, #0, #29
 80032d2:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032de:	0f5b      	lsrs	r3, r3, #29
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	b2d9      	uxtb	r1, r3
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	7ad3      	ldrb	r3, [r2, #11]
 80032ec:	f361 1345 	bfi	r3, r1, #5, #1
 80032f0:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	7adb      	ldrb	r3, [r3, #11]
 80032f6:	f003 0320 	and.w	r3, r3, #32
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00d      	beq.n	800331c <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68da      	ldr	r2, [r3, #12]
 8003306:	4b39      	ldr	r3, [pc, #228]	; (80033ec <XMC_CAN_MO_Receive+0x19c>)
 8003308:	4013      	ands	r3, r2
 800330a:	0c9b      	lsrs	r3, r3, #18
 800330c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	6893      	ldr	r3, [r2, #8]
 8003314:	f361 031c 	bfi	r3, r1, #0, #29
 8003318:	6093      	str	r3, [r2, #8]
 800331a:	e032      	b.n	8003382 <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	6893      	ldr	r3, [r2, #8]
 800332a:	f361 031c 	bfi	r3, r1, #0, #29
 800332e:	6093      	str	r3, [r2, #8]
 8003330:	e027      	b.n	8003382 <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	79d3      	ldrb	r3, [r2, #7]
 8003336:	f043 0320 	orr.w	r3, r3, #32
 800333a:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6853      	ldr	r3, [r2, #4]
 800334a:	f361 031c 	bfi	r3, r1, #0, #29
 800334e:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	6893      	ldr	r3, [r2, #8]
 800335e:	f361 031c 	bfi	r3, r1, #0, #29
 8003362:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800336e:	0f5b      	lsrs	r3, r3, #29
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 0301 	and.w	r3, r3, #1
 8003376:	b2d9      	uxtb	r1, r3
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	7ad3      	ldrb	r3, [r2, #11]
 800337c:	f361 1345 	bfi	r3, r1, #5, #1
 8003380:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800338c:	0e1b      	lsrs	r3, r3, #24
 800338e:	b2da      	uxtb	r2, r3
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	691a      	ldr	r2, [r3, #16]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	695a      	ldr	r2, [r3, #20]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	089b      	lsrs	r3, r3, #2
 80033b4:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	08db      	lsrs	r3, r3, #3
 80033c2:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 80033c4:	7dbb      	ldrb	r3, [r7, #22]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d003      	beq.n	80033d2 <XMC_CAN_MO_Receive+0x182>
 80033ca:	7d7b      	ldrb	r3, [r7, #21]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	f47f af63 	bne.w	8003298 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80033d8:	2300      	movs	r3, #0
 80033da:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80033dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	371c      	adds	r7, #28
 80033e2:	46bd      	mov	sp, r7
 80033e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	1ffc0000 	.word	0x1ffc0000

080033f0 <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003400:	d006      	beq.n	8003410 <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e005      	b.n	800341c <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699a      	ldr	r2, [r3, #24]
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	431a      	orrs	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	619a      	str	r2, [r3, #24]
  }
}
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop

08003428 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003436:	60da      	str	r2, [r3, #12]
}
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop

08003444 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <XMC_CCU4_lDeassertReset+0x4c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d103      	bne.n	800345c <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003454:	2004      	movs	r0, #4
 8003456:	f7fe fff1 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
 800345a:	e016      	b.n	800348a <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a0d      	ldr	r2, [pc, #52]	; (8003494 <XMC_CCU4_lDeassertReset+0x50>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d103      	bne.n	800346c <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003464:	2008      	movs	r0, #8
 8003466:	f7fe ffe9 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
 800346a:	e00e      	b.n	800348a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <XMC_CCU4_lDeassertReset+0x54>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d103      	bne.n	800347c <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003474:	2010      	movs	r0, #16
 8003476:	f7fe ffe1 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
 800347a:	e006      	b.n	800348a <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a07      	ldr	r2, [pc, #28]	; (800349c <XMC_CCU4_lDeassertReset+0x58>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d102      	bne.n	800348a <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 8003484:	4806      	ldr	r0, [pc, #24]	; (80034a0 <XMC_CCU4_lDeassertReset+0x5c>)
 8003486:	f7fe ffd9 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	4000c000 	.word	0x4000c000
 8003494:	40010000 	.word	0x40010000
 8003498:	40014000 	.word	0x40014000
 800349c:	48004000 	.word	0x48004000
 80034a0:	10000001 	.word	0x10000001

080034a4 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b082      	sub	sp, #8
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <XMC_CCU4_lUngateClock+0x4c>)
 80034b0:	4293      	cmp	r3, r2
 80034b2:	d103      	bne.n	80034bc <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80034b4:	2004      	movs	r0, #4
 80034b6:	f7ff f945 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80034ba:	e016      	b.n	80034ea <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a0d      	ldr	r2, [pc, #52]	; (80034f4 <XMC_CCU4_lUngateClock+0x50>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d103      	bne.n	80034cc <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80034c4:	2008      	movs	r0, #8
 80034c6:	f7ff f93d 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80034ca:	e00e      	b.n	80034ea <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a0a      	ldr	r2, [pc, #40]	; (80034f8 <XMC_CCU4_lUngateClock+0x54>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d103      	bne.n	80034dc <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80034d4:	2010      	movs	r0, #16
 80034d6:	f7ff f935 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80034da:	e006      	b.n	80034ea <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a07      	ldr	r2, [pc, #28]	; (80034fc <XMC_CCU4_lUngateClock+0x58>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d102      	bne.n	80034ea <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 80034e4:	4806      	ldr	r0, [pc, #24]	; (8003500 <XMC_CCU4_lUngateClock+0x5c>)
 80034e6:	f7ff f92d 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	4000c000 	.word	0x4000c000
 80034f4:	40010000 	.word	0x40010000
 80034f8:	40014000 	.word	0x40014000
 80034fc:	48004000 	.word	0x48004000
 8003500:	10000001 	.word	0x10000001

08003504 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b082      	sub	sp, #8
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800350c:	2010      	movs	r0, #16
 800350e:	f7ff f909 	bl	8002724 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7ff ffc6 	bl	80034a4 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff93 	bl	8003444 <XMC_CCU4_lDeassertReset>
#endif
}
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b084      	sub	sp, #16
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f7ff ffe7 	bl	8003504 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7ff ff76 	bl	8003428 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003548:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	039b      	lsls	r3, r3, #14
 800354e:	68fa      	ldr	r2, [r7, #12]
 8003550:	4313      	orrs	r3, r2
 8003552:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
 8003568:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	795b      	ldrb	r3, [r3, #5]
 8003576:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800357a:	b2db      	uxtb	r3, r3
 800357c:	051a      	lsls	r2, r3, #20
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	791b      	ldrb	r3, [r3, #4]
 8003586:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	795b      	ldrb	r3, [r3, #5]
 8003596:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800359a:	b2db      	uxtb	r3, r3
 800359c:	461a      	mov	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	795b      	ldrb	r3, [r3, #5]
 80035a6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	461a      	mov	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	791b      	ldrb	r3, [r3, #4]
 80035b6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	461a      	mov	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b085      	sub	sp, #20
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035e4:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80035f6:	78fa      	ldrb	r2, [r7, #3]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035fc:	3714      	adds	r7, #20
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop

08003608 <XMC_CCU4_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU4_SLICE_SetInterruptNode(XMC_CCU4_SLICE_t *const slice,
                                     const XMC_CCU4_SLICE_IRQ_ID_t event,
                                     const XMC_CCU4_SLICE_SR_ID_t sr)
{
 8003608:	b480      	push	{r7}
 800360a:	b087      	sub	sp, #28
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	460b      	mov	r3, r1
 8003612:	70fb      	strb	r3, [r7, #3]
 8003614:	4613      	mov	r3, r2
 8003616:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU4_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU4_SLICE_SetInterruptNode:Invalid event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 8003618:	78fb      	ldrb	r3, [r7, #3]
 800361a:	2b0b      	cmp	r3, #11
 800361c:	d836      	bhi.n	800368c <XMC_CCU4_SLICE_SetInterruptNode+0x84>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <XMC_CCU4_SLICE_SetInterruptNode+0x1c>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003655 	.word	0x08003655
 8003628:	08003655 	.word	0x08003655
 800362c:	0800365f 	.word	0x0800365f
 8003630:	0800365f 	.word	0x0800365f
 8003634:	0800368d 	.word	0x0800368d
 8003638:	0800368d 	.word	0x0800368d
 800363c:	0800368d 	.word	0x0800368d
 8003640:	0800368d 	.word	0x0800368d
 8003644:	08003669 	.word	0x08003669
 8003648:	08003675 	.word	0x08003675
 800364c:	08003681 	.word	0x08003681
 8003650:	08003681 	.word	0x08003681
  {
    case XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU4_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU4_CC4_SRS_POSR_Msk);
 8003654:	2303      	movs	r3, #3
 8003656:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_POSR_Pos;
 8003658:	2300      	movs	r3, #0
 800365a:	617b      	str	r3, [r7, #20]
      break;
 800365c:	e01b      	b.n	8003696 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_UP:
    case XMC_CCU4_SLICE_IRQ_ID_COMPARE_MATCH_DOWN:
      mask = ((uint32_t) CCU4_CC4_SRS_CMSR_Msk);
 800365e:	230c      	movs	r3, #12
 8003660:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_CMSR_Pos;
 8003662:	2302      	movs	r3, #2
 8003664:	617b      	str	r3, [r7, #20]
      break;
 8003666:	e016      	b.n	8003696 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU4_CC4_SRS_E0SR_Msk);
 8003668:	f44f 7340 	mov.w	r3, #768	; 0x300
 800366c:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E0SR_Pos;
 800366e:	2308      	movs	r3, #8
 8003670:	617b      	str	r3, [r7, #20]
      break;
 8003672:	e010      	b.n	8003696 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU4_CC4_SRS_E1SR_Msk);
 8003674:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003678:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E1SR_Pos;
 800367a:	230a      	movs	r3, #10
 800367c:	617b      	str	r3, [r7, #20]
      break;
 800367e:	e00a      	b.n	8003696 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>

    case XMC_CCU4_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU4_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU4_CC4_SRS_E2SR_Msk);
 8003680:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003684:	613b      	str	r3, [r7, #16]
      pos  = CCU4_CC4_SRS_E2SR_Pos;
 8003686:	230c      	movs	r3, #12
 8003688:	617b      	str	r3, [r7, #20]
      break;
 800368a:	e004      	b.n	8003696 <XMC_CCU4_SLICE_SetInterruptNode+0x8e>
	  
	default:
	  mask = 0;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
	  pos = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]
	  break;
 8003694:	bf00      	nop
  }

  if (mask != 0)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <XMC_CCU4_SLICE_SetInterruptNode+0xbc>
  {
    srs = slice->SRS;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80036a2:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	43db      	mvns	r3, r3
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4013      	ands	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 80036ae:	78ba      	ldrb	r2, [r7, #2]
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	fa02 f303 	lsl.w	r3, r2, r3
 80036b6:	68fa      	ldr	r2, [r7, #12]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 80036c4:	371c      	adds	r7, #28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop

080036d0 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036de:	60da      	str	r2, [r3, #12]
}
 80036e0:	370c      	adds	r7, #12
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop

080036ec <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	611a      	str	r2, [r3, #16]
}
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	4a09      	ldr	r2, [pc, #36]	; (8003734 <XMC_CCU8_lDeassertReset+0x30>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d103      	bne.n	800371c <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8003714:	2080      	movs	r0, #128	; 0x80
 8003716:	f7fe fe91 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
 800371a:	e007      	b.n	800372c <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	4a06      	ldr	r2, [pc, #24]	; (8003738 <XMC_CCU8_lDeassertReset+0x34>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d103      	bne.n	800372c <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8003724:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003728:	f7fe fe88 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	40020000 	.word	0x40020000
 8003738:	40024000 	.word	0x40024000

0800373c <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	4a09      	ldr	r2, [pc, #36]	; (800376c <XMC_CCU8_lUngateClock+0x30>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d103      	bne.n	8003754 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 800374c:	2080      	movs	r0, #128	; 0x80
 800374e:	f7fe fff9 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
 8003752:	e007      	b.n	8003764 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4a06      	ldr	r2, [pc, #24]	; (8003770 <XMC_CCU8_lUngateClock+0x34>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d103      	bne.n	8003764 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 800375c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003760:	f7fe fff0 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8003764:	3708      	adds	r7, #8
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40020000 	.word	0x40020000
 8003770:	40024000 	.word	0x40024000

08003774 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 800377c:	2010      	movs	r0, #16
 800377e:	f7fe ffd1 	bl	8002724 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7ff ffda 	bl	800373c <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff ffbb 	bl	8003704 <XMC_CCU8_lDeassertReset>
#endif
}
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b084      	sub	sp, #16
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
 800379c:	460b      	mov	r3, r1
 800379e:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7ff ffe7 	bl	8003774 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f7ff ff92 	bl	80036d0 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80037b8:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 80037ba:	78fb      	ldrb	r3, [r7, #3]
 80037bc:	039b      	lsls	r3, r3, #14
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	3710      	adds	r7, #16
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}

080037d0 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff ff86 	bl	80036ec <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	7b5b      	ldrb	r3, [r3, #13]
 80037ec:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	051a      	lsls	r2, r3, #20
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	7b1b      	ldrb	r3, [r3, #12]
 80037fc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003800:	b2db      	uxtb	r3, r3
 8003802:	461a      	mov	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	7b1b      	ldrb	r3, [r3, #12]
 800380c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003810:	b2db      	uxtb	r3, r3
 8003812:	461a      	mov	r2, r3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	7b5b      	ldrb	r3, [r3, #13]
 800381c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003820:	b2db      	uxtb	r3, r3
 8003822:	461a      	mov	r2, r3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f083 0214 	eor.w	r2, r3, #20
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop

08003844 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8003850:	887a      	ldrh	r2, [r7, #2]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <XMC_CCU8_SLICE_SetPrescaler>:
  XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scaler divider  */
void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t div_val)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	460b      	mov	r3, r1
 800386a:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003878:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 800387a:	78fb      	ldrb	r3, [r7, #3]
 800387c:	021b      	lsls	r3, r3, #8
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	4313      	orrs	r3, r2
 8003882:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	629a      	str	r2, [r3, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 800388a:	78fa      	ldrb	r2, [r7, #3]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop

0800389c <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 800389c:	b480      	push	{r7}
 800389e:	b083      	sub	sp, #12
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	70fb      	strb	r3, [r7, #3]
 80038a8:	4613      	mov	r3, r2
 80038aa:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 80038ac:	78fb      	ldrb	r3, [r7, #3]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 80038b2:	883a      	ldrh	r2, [r7, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80038b8:	e002      	b.n	80038c0 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 80038ba:	883a      	ldrh	r2, [r7, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 80038c0:	370c      	adds	r7, #12
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop

080038cc <XMC_CCU8_SLICE_SetInterruptNode>:

/* Binds a capcom event to an NVIC node  */
void XMC_CCU8_SLICE_SetInterruptNode(XMC_CCU8_SLICE_t *const slice,
                                     const XMC_CCU8_SLICE_IRQ_ID_t event,
                                     const XMC_CCU8_SLICE_SR_ID_t sr)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	460b      	mov	r3, r1
 80038d6:	70fb      	strb	r3, [r7, #3]
 80038d8:	4613      	mov	r3, r2
 80038da:	70bb      	strb	r3, [r7, #2]

  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid SR ID ", XMC_CCU8_SLICE_CHECK_SR_ID(sr));
  XMC_ASSERT("XMC_CCU8_SLICE_SetInterruptNode:Invalid event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  switch (event)
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	2b0b      	cmp	r3, #11
 80038e0:	d83b      	bhi.n	800395a <XMC_CCU8_SLICE_SetInterruptNode+0x8e>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <XMC_CCU8_SLICE_SetInterruptNode+0x1c>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	08003919 	.word	0x08003919
 80038ec:	08003919 	.word	0x08003919
 80038f0:	08003923 	.word	0x08003923
 80038f4:	08003923 	.word	0x08003923
 80038f8:	0800392d 	.word	0x0800392d
 80038fc:	0800392d 	.word	0x0800392d
 8003900:	0800395b 	.word	0x0800395b
 8003904:	0800395b 	.word	0x0800395b
 8003908:	08003937 	.word	0x08003937
 800390c:	08003943 	.word	0x08003943
 8003910:	0800394f 	.word	0x0800394f
 8003914:	0800394f 	.word	0x0800394f
  {
    case XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH:
    case XMC_CCU8_SLICE_IRQ_ID_ONE_MATCH:
      mask = ((uint32_t) CCU8_CC8_SRS_POSR_Msk);
 8003918:	2303      	movs	r3, #3
 800391a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_POSR_Pos;
 800391c:	2300      	movs	r3, #0
 800391e:	613b      	str	r3, [r7, #16]
      break;
 8003920:	e020      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_1:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_1:
      mask = ((uint32_t) CCU8_CC8_SRS_CM1SR_Msk);
 8003922:	230c      	movs	r3, #12
 8003924:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM1SR_Pos;
 8003926:	2302      	movs	r3, #2
 8003928:	613b      	str	r3, [r7, #16]
      break;
 800392a:	e01b      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_UP_CH_2:
    case XMC_CCU8_SLICE_IRQ_ID_COMPARE_MATCH_DOWN_CH_2:
      mask = ((uint32_t) CCU8_CC8_SRS_CM2SR_Msk);
 800392c:	2330      	movs	r3, #48	; 0x30
 800392e:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_CM2SR_Pos;
 8003930:	2304      	movs	r3, #4
 8003932:	613b      	str	r3, [r7, #16]
      break;
 8003934:	e016      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT0:
      mask = ((uint32_t) CCU8_CC8_SRS_E0SR_Msk);
 8003936:	f44f 7340 	mov.w	r3, #768	; 0x300
 800393a:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E0SR_Pos;
 800393c:	2308      	movs	r3, #8
 800393e:	613b      	str	r3, [r7, #16]
      break;
 8003940:	e010      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT1:
      mask = ((uint32_t) CCU8_CC8_SRS_E1SR_Msk);
 8003942:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003946:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E1SR_Pos;
 8003948:	230a      	movs	r3, #10
 800394a:	613b      	str	r3, [r7, #16]
      break;
 800394c:	e00a      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>

    case XMC_CCU8_SLICE_IRQ_ID_EVENT2:
    case XMC_CCU8_SLICE_IRQ_ID_TRAP:
      mask = ((uint32_t) CCU8_CC8_SRS_E2SR_Msk);
 800394e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8003952:	617b      	str	r3, [r7, #20]
      pos  = CCU8_CC8_SRS_E2SR_Pos;
 8003954:	230c      	movs	r3, #12
 8003956:	613b      	str	r3, [r7, #16]
      break;
 8003958:	e004      	b.n	8003964 <XMC_CCU8_SLICE_SetInterruptNode+0x98>
	  
	default:
	  mask = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	617b      	str	r3, [r7, #20]
	  pos = 0;
 800395e:	2300      	movs	r3, #0
 8003960:	613b      	str	r3, [r7, #16]
	  break;
 8003962:	bf00      	nop
  }

  if (mask != 0)
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d013      	beq.n	8003992 <XMC_CCU8_SLICE_SetInterruptNode+0xc6>
  {
    srs = slice->SRS;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003970:	60fb      	str	r3, [r7, #12]
    srs &= ~mask;
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	43db      	mvns	r3, r3
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4013      	ands	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
    srs |= (uint32_t)sr << pos;
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	fa02 f303 	lsl.w	r3, r2, r3
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	4313      	orrs	r3, r2
 8003988:	60fb      	str	r3, [r7, #12]
    slice->SRS = srs;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  }
}
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop

080039b8 <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop

080039d4 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	370c      	adds	r7, #12
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop

08003a0c <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	370c      	adds	r7, #12
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop

08003a28 <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr
 8003a42:	bf00      	nop

08003a44 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f803 	bl	8003a58 <XMC_DMA_Enable>
}
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b082      	sub	sp, #8
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0b      	ldr	r2, [pc, #44]	; (8003a90 <XMC_DMA_Enable+0x38>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d106      	bne.n	8003a76 <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8003a68:	480a      	ldr	r0, [pc, #40]	; (8003a94 <XMC_DMA_Enable+0x3c>)
 8003a6a:	f7fe fe6b 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8003a6e:	4809      	ldr	r0, [pc, #36]	; (8003a94 <XMC_DMA_Enable+0x3c>)
 8003a70:	f7fe fce4 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
 8003a74:	e005      	b.n	8003a82 <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 8003a76:	4808      	ldr	r0, [pc, #32]	; (8003a98 <XMC_DMA_Enable+0x40>)
 8003a78:	f7fe fe64 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8003a7c:	4806      	ldr	r0, [pc, #24]	; (8003a98 <XMC_DMA_Enable+0x40>)
 8003a7e:	f7fe fcdd 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	50014000 	.word	0x50014000
 8003a94:	20000010 	.word	0x20000010
 8003a98:	20000020 	.word	0x20000020

08003a9c <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a33      	ldr	r2, [pc, #204]	; (8003b74 <XMC_DMA_IsEnabled+0xd8>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d125      	bne.n	8003af8 <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8003aac:	4832      	ldr	r0, [pc, #200]	; (8003b78 <XMC_DMA_IsEnabled+0xdc>)
 8003aae:	f7fe fce1 	bl	8002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bf14      	ite	ne
 8003ab8:	2301      	movne	r3, #1
 8003aba:	2300      	moveq	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f083 0301 	eor.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	73fb      	strb	r3, [r7, #15]
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8003ace:	7bfb      	ldrb	r3, [r7, #15]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00a      	beq.n	8003aea <XMC_DMA_IsEnabled+0x4e>
 8003ad4:	4828      	ldr	r0, [pc, #160]	; (8003b78 <XMC_DMA_IsEnabled+0xdc>)
 8003ad6:	f7fe fe51 	bl	800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <XMC_DMA_IsEnabled+0x4e>
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e000      	b.n	8003aec <XMC_DMA_IsEnabled+0x50>
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	73fb      	strb	r3, [r7, #15]
 8003af6:	e024      	b.n	8003b42 <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8003af8:	4820      	ldr	r0, [pc, #128]	; (8003b7c <XMC_DMA_IsEnabled+0xe0>)
 8003afa:	f7fe fcbb 	bl	8002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	bf14      	ite	ne
 8003b04:	2301      	movne	r3, #1
 8003b06:	2300      	moveq	r3, #0
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	f083 0301 	eor.w	r3, r3, #1
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73fb      	strb	r3, [r7, #15]
 8003b12:	7bfb      	ldrb	r3, [r7, #15]
 8003b14:	f003 0301 	and.w	r3, r3, #1
 8003b18:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <XMC_DMA_IsEnabled+0x9a>
 8003b20:	4816      	ldr	r0, [pc, #88]	; (8003b7c <XMC_DMA_IsEnabled+0xe0>)
 8003b22:	f7fe fe2b 	bl	800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f083 0301 	eor.w	r3, r3, #1
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <XMC_DMA_IsEnabled+0x9a>
 8003b32:	2301      	movs	r3, #1
 8003b34:	e000      	b.n	8003b38 <XMC_DMA_IsEnabled+0x9c>
 8003b36:	2300      	movs	r3, #0
 8003b38:	73fb      	strb	r3, [r7, #15]
 8003b3a:	7bfb      	ldrb	r3, [r7, #15]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 8003b42:	7bfb      	ldrb	r3, [r7, #15]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d00f      	beq.n	8003b68 <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 8003b48:	7bfb      	ldrb	r3, [r7, #15]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d006      	beq.n	8003b5c <XMC_DMA_IsEnabled+0xc0>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <XMC_DMA_IsEnabled+0xc0>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	e000      	b.n	8003b5e <XMC_DMA_IsEnabled+0xc2>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	73fb      	strb	r3, [r7, #15]
 8003b60:	7bfb      	ldrb	r3, [r7, #15]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	50014000 	.word	0x50014000
 8003b78:	20000010 	.word	0x20000010
 8003b7c:	20000020 	.word	0x20000020

08003b80 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	460b      	mov	r3, r1
 8003b8a:	70fb      	strb	r3, [r7, #3]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <XMC_DMA_EnableRequestLine+0x90>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d11b      	bne.n	8003bd0 <XMC_DMA_EnableRequestLine+0x50>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003b98:	481e      	ldr	r0, [pc, #120]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003b9a:	4b1e      	ldr	r3, [pc, #120]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003b9c:	689a      	ldr	r2, [r3, #8]
 8003b9e:	78fb      	ldrb	r3, [r7, #3]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4619      	mov	r1, r3
 8003ba4:	230f      	movs	r3, #15
 8003ba6:	408b      	lsls	r3, r1
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003bac:	78bb      	ldrb	r3, [r7, #2]
 8003bae:	78f9      	ldrb	r1, [r7, #3]
 8003bb0:	0089      	lsls	r1, r1, #2
 8003bb2:	408b      	lsls	r3, r1
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 8003bb8:	4916      	ldr	r1, [pc, #88]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bba:	4b16      	ldr	r3, [pc, #88]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bbc:	691a      	ldr	r2, [r3, #16]
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	2001      	movs	r0, #1
 8003bc6:	fa00 f303 	lsl.w	r3, r0, r3
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	610b      	str	r3, [r1, #16]
 8003bce:	e019      	b.n	8003c04 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003bd0:	4810      	ldr	r0, [pc, #64]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bd2:	4b10      	ldr	r3, [pc, #64]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bd4:	68da      	ldr	r2, [r3, #12]
 8003bd6:	78fb      	ldrb	r3, [r7, #3]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	4619      	mov	r1, r3
 8003bdc:	230f      	movs	r3, #15
 8003bde:	408b      	lsls	r3, r1
 8003be0:	43db      	mvns	r3, r3
 8003be2:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003be4:	78bb      	ldrb	r3, [r7, #2]
 8003be6:	78f9      	ldrb	r1, [r7, #3]
 8003be8:	0089      	lsls	r1, r1, #2
 8003bea:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003bec:	4313      	orrs	r3, r2
 8003bee:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8003bf0:	4908      	ldr	r1, [pc, #32]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <XMC_DMA_EnableRequestLine+0x94>)
 8003bf4:	691a      	ldr	r2, [r3, #16]
 8003bf6:	78fb      	ldrb	r3, [r7, #3]
 8003bf8:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003bfc:	fa00 f303 	lsl.w	r3, r0, r3
 8003c00:	4313      	orrs	r3, r2
 8003c02:	610b      	str	r3, [r1, #16]
  }
#endif
}
 8003c04:	370c      	adds	r7, #12
 8003c06:	46bd      	mov	sp, r7
 8003c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	50014000 	.word	0x50014000
 8003c14:	50004900 	.word	0x50004900

08003c18 <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	460b      	mov	r3, r1
 8003c22:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 8003c2a:	78fb      	ldrb	r3, [r7, #3]
 8003c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c30:	f003 0301 	and.w	r3, r3, #1
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	bf14      	ite	ne
 8003c38:	2301      	movne	r3, #1
 8003c3a:	2300      	moveq	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop

08003c4c <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	460b      	mov	r3, r1
 8003c56:	607a      	str	r2, [r7, #4]
 8003c58:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 8003c5a:	68f8      	ldr	r0, [r7, #12]
 8003c5c:	f7ff ff1e 	bl	8003a9c <XMC_DMA_IsEnabled>
 8003c60:	4603      	mov	r3, r0
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 81f1 	beq.w	800404a <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 8003c68:	7afb      	ldrb	r3, [r7, #11]
 8003c6a:	68f8      	ldr	r0, [r7, #12]
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	f7ff ffd3 	bl	8003c18 <XMC_DMA_CH_IsEnabled>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f083 0301 	eor.w	r3, r3, #1
 8003c78:	b2db      	uxtb	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	f000 81e2 	beq.w	8004044 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 8003c80:	7afb      	ldrb	r3, [r7, #11]
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	6852      	ldr	r2, [r2, #4]
 8003c86:	68f9      	ldr	r1, [r7, #12]
 8003c88:	2058      	movs	r0, #88	; 0x58
 8003c8a:	fb00 f303 	mul.w	r3, r0, r3
 8003c8e:	440b      	add	r3, r1
 8003c90:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8003c92:	7afb      	ldrb	r3, [r7, #11]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	6892      	ldr	r2, [r2, #8]
 8003c98:	68f9      	ldr	r1, [r7, #12]
 8003c9a:	2058      	movs	r0, #88	; 0x58
 8003c9c:	fb00 f303 	mul.w	r3, r0, r3
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3308      	adds	r3, #8
 8003ca4:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 8003ca6:	7afb      	ldrb	r3, [r7, #11]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68d2      	ldr	r2, [r2, #12]
 8003cac:	4610      	mov	r0, r2
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	2158      	movs	r1, #88	; 0x58
 8003cb2:	fb01 f303 	mul.w	r3, r1, r3
 8003cb6:	4413      	add	r3, r2
 8003cb8:	3310      	adds	r3, #16
 8003cba:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8003cbc:	7afb      	ldrb	r3, [r7, #11]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	8b12      	ldrh	r2, [r2, #24]
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	2158      	movs	r1, #88	; 0x58
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3318      	adds	r3, #24
 8003cd0:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8003cd2:	7afb      	ldrb	r3, [r7, #11]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6812      	ldr	r2, [r2, #0]
 8003cd8:	68f9      	ldr	r1, [r7, #12]
 8003cda:	2058      	movs	r0, #88	; 0x58
 8003cdc:	fb00 f303 	mul.w	r3, r0, r3
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3318      	adds	r3, #24
 8003ce4:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 8003ce6:	7afb      	ldrb	r3, [r7, #11]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	7ed2      	ldrb	r2, [r2, #27]
 8003cec:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8003cf0:	68f9      	ldr	r1, [r7, #12]
 8003cf2:	2058      	movs	r0, #88	; 0x58
 8003cf4:	fb00 f303 	mul.w	r3, r0, r3
 8003cf8:	440b      	add	r3, r1
 8003cfa:	3340      	adds	r3, #64	; 0x40
 8003cfc:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	4ab1      	ldr	r2, [pc, #708]	; (8003fc8 <XMC_DMA_CH_Init+0x37c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d116      	bne.n	8003d34 <XMC_DMA_CH_Init+0xe8>
 8003d06:	7afb      	ldrb	r3, [r7, #11]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d813      	bhi.n	8003d34 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8003d0c:	7afb      	ldrb	r3, [r7, #11]
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	6912      	ldr	r2, [r2, #16]
 8003d12:	68f9      	ldr	r1, [r7, #12]
 8003d14:	2058      	movs	r0, #88	; 0x58
 8003d16:	fb00 f303 	mul.w	r3, r0, r3
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3348      	adds	r3, #72	; 0x48
 8003d1e:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 8003d20:	7afb      	ldrb	r3, [r7, #11]
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	6952      	ldr	r2, [r2, #20]
 8003d26:	68f9      	ldr	r1, [r7, #12]
 8003d28:	2058      	movs	r0, #88	; 0x58
 8003d2a:	fb00 f303 	mul.w	r3, r0, r3
 8003d2e:	440b      	add	r3, r1
 8003d30:	3350      	adds	r3, #80	; 0x50
 8003d32:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	8c1b      	ldrh	r3, [r3, #32]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d14f      	bne.n	8003ddc <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	789b      	ldrb	r3, [r3, #2]
 8003d40:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d006      	beq.n	8003d58 <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	789b      	ldrb	r3, [r3, #2]
 8003d4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d52:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003d54:	2b30      	cmp	r3, #48	; 0x30
 8003d56:	d141      	bne.n	8003ddc <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a9b      	ldr	r2, [pc, #620]	; (8003fc8 <XMC_DMA_CH_Init+0x37c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d106      	bne.n	8003d6e <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	75bb      	strb	r3, [r7, #22]
 8003d6c:	e005      	b.n	8003d7a <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003d74:	f003 0303 	and.w	r3, r3, #3
 8003d78:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003d80:	091b      	lsrs	r3, r3, #4
 8003d82:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8003d84:	7afb      	ldrb	r3, [r7, #11]
 8003d86:	7afa      	ldrb	r2, [r7, #11]
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	2058      	movs	r0, #88	; 0x58
 8003d8c:	fb00 f202 	mul.w	r2, r0, r2
 8003d90:	440a      	add	r2, r1
 8003d92:	3240      	adds	r2, #64	; 0x40
 8003d94:	6851      	ldr	r1, [r2, #4]
 8003d96:	7dba      	ldrb	r2, [r7, #22]
 8003d98:	02d2      	lsls	r2, r2, #11
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	68f9      	ldr	r1, [r7, #12]
 8003d9e:	2058      	movs	r0, #88	; 0x58
 8003da0:	fb00 f303 	mul.w	r3, r0, r3
 8003da4:	440b      	add	r3, r1
 8003da6:	3340      	adds	r3, #64	; 0x40
 8003da8:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003daa:	7dba      	ldrb	r2, [r7, #22]
 8003dac:	7d7b      	ldrb	r3, [r7, #21]
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	4611      	mov	r1, r2
 8003db2:	461a      	mov	r2, r3
 8003db4:	f7ff fee4 	bl	8003b80 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8003db8:	7afb      	ldrb	r3, [r7, #11]
 8003dba:	7afa      	ldrb	r2, [r7, #11]
 8003dbc:	68f9      	ldr	r1, [r7, #12]
 8003dbe:	2058      	movs	r0, #88	; 0x58
 8003dc0:	fb00 f202 	mul.w	r2, r0, r2
 8003dc4:	440a      	add	r2, r1
 8003dc6:	3240      	adds	r2, #64	; 0x40
 8003dc8:	6812      	ldr	r2, [r2, #0]
 8003dca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dce:	68f9      	ldr	r1, [r7, #12]
 8003dd0:	2058      	movs	r0, #88	; 0x58
 8003dd2:	fb00 f303 	mul.w	r3, r0, r3
 8003dd6:	440b      	add	r3, r1
 8003dd8:	3340      	adds	r3, #64	; 0x40
 8003dda:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	8b9b      	ldrh	r3, [r3, #28]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d14c      	bne.n	8003e7e <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	789b      	ldrb	r3, [r3, #2]
 8003de8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d006      	beq.n	8003e00 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	789b      	ldrb	r3, [r3, #2]
 8003df6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003dfa:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003dfc:	2b30      	cmp	r3, #48	; 0x30
 8003dfe:	d13e      	bne.n	8003e7e <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	4a71      	ldr	r2, [pc, #452]	; (8003fc8 <XMC_DMA_CH_Init+0x37c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d105      	bne.n	8003e14 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	7f9b      	ldrb	r3, [r3, #30]
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	75bb      	strb	r3, [r7, #22]
 8003e12:	e004      	b.n	8003e1e <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	7f9b      	ldrb	r3, [r3, #30]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	7f9b      	ldrb	r3, [r3, #30]
 8003e22:	091b      	lsrs	r3, r3, #4
 8003e24:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8003e26:	7afb      	ldrb	r3, [r7, #11]
 8003e28:	7afa      	ldrb	r2, [r7, #11]
 8003e2a:	68f9      	ldr	r1, [r7, #12]
 8003e2c:	2058      	movs	r0, #88	; 0x58
 8003e2e:	fb00 f202 	mul.w	r2, r0, r2
 8003e32:	440a      	add	r2, r1
 8003e34:	3240      	adds	r2, #64	; 0x40
 8003e36:	6851      	ldr	r1, [r2, #4]
 8003e38:	7dba      	ldrb	r2, [r7, #22]
 8003e3a:	01d2      	lsls	r2, r2, #7
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	68f9      	ldr	r1, [r7, #12]
 8003e40:	2058      	movs	r0, #88	; 0x58
 8003e42:	fb00 f303 	mul.w	r3, r0, r3
 8003e46:	440b      	add	r3, r1
 8003e48:	3340      	adds	r3, #64	; 0x40
 8003e4a:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003e4c:	7dba      	ldrb	r2, [r7, #22]
 8003e4e:	7d7b      	ldrb	r3, [r7, #21]
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	4611      	mov	r1, r2
 8003e54:	461a      	mov	r2, r3
 8003e56:	f7ff fe93 	bl	8003b80 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8003e5a:	7afb      	ldrb	r3, [r7, #11]
 8003e5c:	7afa      	ldrb	r2, [r7, #11]
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	2058      	movs	r0, #88	; 0x58
 8003e62:	fb00 f202 	mul.w	r2, r0, r2
 8003e66:	440a      	add	r2, r1
 8003e68:	3240      	adds	r2, #64	; 0x40
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e70:	68f9      	ldr	r1, [r7, #12]
 8003e72:	2058      	movs	r0, #88	; 0x58
 8003e74:	fb00 f303 	mul.w	r3, r0, r3
 8003e78:	440b      	add	r3, r1
 8003e7a:	3340      	adds	r3, #64	; 0x40
 8003e7c:	601a      	str	r2, [r3, #0]
        }
      }

      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003e7e:	7afb      	ldrb	r3, [r7, #11]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	4619      	mov	r1, r3
 8003e84:	221f      	movs	r2, #31
 8003e86:	f000 f90f 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>
                                  (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	7e9b      	ldrb	r3, [r3, #26]
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	f200 80d4 	bhi.w	800403c <XMC_DMA_CH_Init+0x3f0>
 8003e94:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <XMC_DMA_CH_Init+0x250>)
 8003e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9a:	bf00      	nop
 8003e9c:	0800403d 	.word	0x0800403d
 8003ea0:	08003ec1 	.word	0x08003ec1
 8003ea4:	08003ee7 	.word	0x08003ee7
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f33 	.word	0x08003f33
 8003eb0:	08003f59 	.word	0x08003f59
 8003eb4:	08003fa3 	.word	0x08003fa3
 8003eb8:	08003fcd 	.word	0x08003fcd
 8003ebc:	08004017 	.word	0x08004017
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003ec0:	7afb      	ldrb	r3, [r7, #11]
 8003ec2:	7afa      	ldrb	r2, [r7, #11]
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	2058      	movs	r0, #88	; 0x58
 8003ec8:	fb00 f202 	mul.w	r2, r0, r2
 8003ecc:	440a      	add	r2, r1
 8003ece:	3240      	adds	r2, #64	; 0x40
 8003ed0:	6812      	ldr	r2, [r2, #0]
 8003ed2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003ed6:	68f9      	ldr	r1, [r7, #12]
 8003ed8:	2058      	movs	r0, #88	; 0x58
 8003eda:	fb00 f303 	mul.w	r3, r0, r3
 8003ede:	440b      	add	r3, r1
 8003ee0:	3340      	adds	r3, #64	; 0x40
 8003ee2:	601a      	str	r2, [r3, #0]
          break;
 8003ee4:	e0ab      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003ee6:	7afb      	ldrb	r3, [r7, #11]
 8003ee8:	7afa      	ldrb	r2, [r7, #11]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	2058      	movs	r0, #88	; 0x58
 8003eee:	fb00 f202 	mul.w	r2, r0, r2
 8003ef2:	440a      	add	r2, r1
 8003ef4:	3240      	adds	r2, #64	; 0x40
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003efc:	68f9      	ldr	r1, [r7, #12]
 8003efe:	2058      	movs	r0, #88	; 0x58
 8003f00:	fb00 f303 	mul.w	r3, r0, r3
 8003f04:	440b      	add	r3, r1
 8003f06:	3340      	adds	r3, #64	; 0x40
 8003f08:	601a      	str	r2, [r3, #0]
          break;
 8003f0a:	e098      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	7afa      	ldrb	r2, [r7, #11]
 8003f10:	68f9      	ldr	r1, [r7, #12]
 8003f12:	2058      	movs	r0, #88	; 0x58
 8003f14:	fb00 f202 	mul.w	r2, r0, r2
 8003f18:	440a      	add	r2, r1
 8003f1a:	3240      	adds	r2, #64	; 0x40
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	2058      	movs	r0, #88	; 0x58
 8003f26:	fb00 f303 	mul.w	r3, r0, r3
 8003f2a:	440b      	add	r3, r1
 8003f2c:	3340      	adds	r3, #64	; 0x40
 8003f2e:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8003f30:	e085      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003f32:	7afb      	ldrb	r3, [r7, #11]
 8003f34:	7afa      	ldrb	r2, [r7, #11]
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	2058      	movs	r0, #88	; 0x58
 8003f3a:	fb00 f202 	mul.w	r2, r0, r2
 8003f3e:	440a      	add	r2, r1
 8003f40:	3218      	adds	r2, #24
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	2058      	movs	r0, #88	; 0x58
 8003f4c:	fb00 f303 	mul.w	r3, r0, r3
 8003f50:	440b      	add	r3, r1
 8003f52:	3318      	adds	r3, #24
 8003f54:	601a      	str	r2, [r3, #0]
          break;
 8003f56:	e072      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003f58:	7afb      	ldrb	r3, [r7, #11]
 8003f5a:	7afa      	ldrb	r2, [r7, #11]
 8003f5c:	68f9      	ldr	r1, [r7, #12]
 8003f5e:	2058      	movs	r0, #88	; 0x58
 8003f60:	fb00 f202 	mul.w	r2, r0, r2
 8003f64:	440a      	add	r2, r1
 8003f66:	3240      	adds	r2, #64	; 0x40
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003f6e:	68f9      	ldr	r1, [r7, #12]
 8003f70:	2058      	movs	r0, #88	; 0x58
 8003f72:	fb00 f303 	mul.w	r3, r0, r3
 8003f76:	440b      	add	r3, r1
 8003f78:	3340      	adds	r3, #64	; 0x40
 8003f7a:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003f7c:	7afb      	ldrb	r3, [r7, #11]
 8003f7e:	7afa      	ldrb	r2, [r7, #11]
 8003f80:	68f9      	ldr	r1, [r7, #12]
 8003f82:	2058      	movs	r0, #88	; 0x58
 8003f84:	fb00 f202 	mul.w	r2, r0, r2
 8003f88:	440a      	add	r2, r1
 8003f8a:	3218      	adds	r2, #24
 8003f8c:	6812      	ldr	r2, [r2, #0]
 8003f8e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003f92:	68f9      	ldr	r1, [r7, #12]
 8003f94:	2058      	movs	r0, #88	; 0x58
 8003f96:	fb00 f303 	mul.w	r3, r0, r3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3318      	adds	r3, #24
 8003f9e:	601a      	str	r2, [r3, #0]
          break;
 8003fa0:	e04d      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003fa2:	7afb      	ldrb	r3, [r7, #11]
 8003fa4:	7afa      	ldrb	r2, [r7, #11]
 8003fa6:	68f9      	ldr	r1, [r7, #12]
 8003fa8:	2058      	movs	r0, #88	; 0x58
 8003faa:	fb00 f202 	mul.w	r2, r0, r2
 8003fae:	440a      	add	r2, r1
 8003fb0:	3218      	adds	r2, #24
 8003fb2:	6812      	ldr	r2, [r2, #0]
 8003fb4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	2058      	movs	r0, #88	; 0x58
 8003fbc:	fb00 f303 	mul.w	r3, r0, r3
 8003fc0:	440b      	add	r3, r1
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	601a      	str	r2, [r3, #0]
          break;
 8003fc6:	e03a      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>
 8003fc8:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	7afa      	ldrb	r2, [r7, #11]
 8003fd0:	68f9      	ldr	r1, [r7, #12]
 8003fd2:	2058      	movs	r0, #88	; 0x58
 8003fd4:	fb00 f202 	mul.w	r2, r0, r2
 8003fd8:	440a      	add	r2, r1
 8003fda:	3240      	adds	r2, #64	; 0x40
 8003fdc:	6812      	ldr	r2, [r2, #0]
 8003fde:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	2058      	movs	r0, #88	; 0x58
 8003fe6:	fb00 f303 	mul.w	r3, r0, r3
 8003fea:	440b      	add	r3, r1
 8003fec:	3340      	adds	r3, #64	; 0x40
 8003fee:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003ff0:	7afb      	ldrb	r3, [r7, #11]
 8003ff2:	7afa      	ldrb	r2, [r7, #11]
 8003ff4:	68f9      	ldr	r1, [r7, #12]
 8003ff6:	2058      	movs	r0, #88	; 0x58
 8003ff8:	fb00 f202 	mul.w	r2, r0, r2
 8003ffc:	440a      	add	r2, r1
 8003ffe:	3218      	adds	r2, #24
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	2058      	movs	r0, #88	; 0x58
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	440b      	add	r3, r1
 8004010:	3318      	adds	r3, #24
 8004012:	601a      	str	r2, [r3, #0]
          break;
 8004014:	e013      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	7afa      	ldrb	r2, [r7, #11]
 800401a:	68f9      	ldr	r1, [r7, #12]
 800401c:	2058      	movs	r0, #88	; 0x58
 800401e:	fb00 f202 	mul.w	r2, r0, r2
 8004022:	440a      	add	r2, r1
 8004024:	3218      	adds	r2, #24
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 800402c:	68f9      	ldr	r1, [r7, #12]
 800402e:	2058      	movs	r0, #88	; 0x58
 8004030:	fb00 f303 	mul.w	r3, r0, r3
 8004034:	440b      	add	r3, r1
 8004036:	3318      	adds	r3, #24
 8004038:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 800403a:	e000      	b.n	800403e <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 800403c:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 800403e:	2300      	movs	r3, #0
 8004040:	75fb      	strb	r3, [r7, #23]
 8004042:	e004      	b.n	800404e <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8004044:	2302      	movs	r3, #2
 8004046:	75fb      	strb	r3, [r7, #23]
 8004048:	e001      	b.n	800404e <XMC_DMA_CH_Init+0x402>
    }
  }
  else
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800404e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8004058:	b480      	push	{r7}
 800405a:	b087      	sub	sp, #28
 800405c:	af00      	add	r7, sp, #0
 800405e:	60f8      	str	r0, [r7, #12]
 8004060:	460b      	mov	r3, r1
 8004062:	607a      	str	r2, [r7, #4]
 8004064:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e014      	b.n	8004096 <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	fa22 f303 	lsr.w	r3, r2, r3
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d009      	beq.n	8004090 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	005a      	lsls	r2, r3, #1
 8004080:	7afb      	ldrb	r3, [r7, #11]
 8004082:	f240 1101 	movw	r1, #257	; 0x101
 8004086:	4099      	lsls	r1, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	32c4      	adds	r2, #196	; 0xc4
 800408c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	3301      	adds	r3, #1
 8004094:	617b      	str	r3, [r7, #20]
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b04      	cmp	r3, #4
 800409a:	d9e7      	bls.n	800406c <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 800409c:	371c      	adds	r7, #28
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop

080040a8 <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	460b      	mov	r3, r1
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 80040b6:	2300      	movs	r3, #0
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e013      	b.n	80040e4 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
 80040c4:	f003 0301 	and.w	r3, r3, #1
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d008      	beq.n	80040de <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	005a      	lsls	r2, r3, #1
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	2101      	movs	r1, #1
 80040d4:	4099      	lsls	r1, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	32ce      	adds	r2, #206	; 0xce
 80040da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d9e8      	bls.n	80040bc <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 80040ea:	371c      	adds	r7, #28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	460b      	mov	r3, r1
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4a09      	ldr	r2, [pc, #36]	; (800412c <XMC_DMA_CH_SetEventHandler+0x38>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d105      	bne.n	8004116 <XMC_DMA_CH_SetEventHandler+0x22>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    dma0_event_handlers[channel] = event_handler;
 800410a:	7afb      	ldrb	r3, [r7, #11]
 800410c:	4908      	ldr	r1, [pc, #32]	; (8004130 <XMC_DMA_CH_SetEventHandler+0x3c>)
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8004114:	e004      	b.n	8004120 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 8004116:	7afb      	ldrb	r3, [r7, #11]
 8004118:	4906      	ldr	r1, [pc, #24]	; (8004134 <XMC_DMA_CH_SetEventHandler+0x40>)
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	50014000 	.word	0x50014000
 8004130:	1fff43d0 	.word	0x1fff43d0
 8004134:	1fff43f0 	.word	0x1fff43f0

08004138 <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a82      	ldr	r2, [pc, #520]	; (800434c <XMC_DMA_IRQHandler+0x214>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d102      	bne.n	800414e <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8004148:	4b81      	ldr	r3, [pc, #516]	; (8004350 <XMC_DMA_IRQHandler+0x218>)
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e001      	b.n	8004152 <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 800414e:	4b81      	ldr	r3, [pc, #516]	; (8004354 <XMC_DMA_IRQHandler+0x21c>)
 8004150:	61bb      	str	r3, [r7, #24]
  }
#endif

  event = XMC_DMA_GetEventStatus(dma);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7ff fc22 	bl	800399c <XMC_DMA_GetEventStatus>
 8004158:	6178      	str	r0, [r7, #20]
  channel = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f003 0310 	and.w	r3, r3, #16
 8004164:	2b00      	cmp	r3, #0
 8004166:	d02b      	beq.n	80041c0 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8004168:	6878      	ldr	r0, [r7, #4]
 800416a:	f7ff fc5d 	bl	8003a28 <XMC_DMA_GetChannelsErrorStatus>
 800416e:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8004170:	e021      	b.n	80041b6 <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 8004172:	2201      	movs	r2, #1
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	4013      	ands	r3, r2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d014      	beq.n	80041b0 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	4619      	mov	r1, r3
 800418e:	2210      	movs	r2, #16
 8004190:	f7ff ff8a 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	4413      	add	r3, r2
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d003      	beq.n	80041ae <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2010      	movs	r0, #16
 80041aa:	4798      	blx	r3
        }

        break;
 80041ac:	e007      	b.n	80041be <XMC_DMA_IRQHandler+0x86>
 80041ae:	e006      	b.n	80041be <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	3301      	adds	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d1da      	bne.n	8004172 <XMC_DMA_IRQHandler+0x3a>
 80041bc:	e0c3      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
 80041be:	e0c2      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d02b      	beq.n	8004222 <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f7ff fbf4 	bl	80039b8 <XMC_DMA_GetChannelsTransferCompleteStatus>
 80041d0:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80041d2:	e021      	b.n	8004218 <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 80041d4:	2201      	movs	r2, #1
 80041d6:	69fb      	ldr	r3, [r7, #28]
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	4013      	ands	r3, r2
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d014      	beq.n	8004212 <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	4619      	mov	r1, r3
 80041f0:	220f      	movs	r2, #15
 80041f2:	f7ff ff59 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2001      	movs	r0, #1
 800420c:	4798      	blx	r3
        }

        break;
 800420e:	e007      	b.n	8004220 <XMC_DMA_IRQHandler+0xe8>
 8004210:	e006      	b.n	8004220 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	3301      	adds	r3, #1
 8004216:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1da      	bne.n	80041d4 <XMC_DMA_IRQHandler+0x9c>
 800421e:	e092      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
 8004220:	e091      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d02b      	beq.n	8004284 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fbd1 	bl	80039d4 <XMC_DMA_GetChannelsBlockCompleteStatus>
 8004232:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8004234:	e021      	b.n	800427a <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 8004236:	2201      	movs	r2, #1
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	fa02 f303 	lsl.w	r3, r2, r3
 800423e:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	4013      	ands	r3, r2
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	b2db      	uxtb	r3, r3
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	4619      	mov	r1, r3
 8004252:	220e      	movs	r2, #14
 8004254:	f7ff ff28 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	4413      	add	r3, r2
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2002      	movs	r0, #2
 800426e:	4798      	blx	r3
        }

        break;
 8004270:	e007      	b.n	8004282 <XMC_DMA_IRQHandler+0x14a>
 8004272:	e006      	b.n	8004282 <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	3301      	adds	r3, #1
 8004278:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 800427a:	697b      	ldr	r3, [r7, #20]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d1da      	bne.n	8004236 <XMC_DMA_IRQHandler+0xfe>
 8004280:	e061      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
 8004282:	e060      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	f003 0304 	and.w	r3, r3, #4
 800428a:	2b00      	cmp	r3, #0
 800428c:	d02b      	beq.n	80042e6 <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff fbae 	bl	80039f0 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8004294:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8004296:	e021      	b.n	80042dc <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 8004298:	2201      	movs	r2, #1
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	613b      	str	r3, [r7, #16]
      if (event & mask)
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	4013      	ands	r3, r2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d014      	beq.n	80042d6 <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	4619      	mov	r1, r3
 80042b4:	2204      	movs	r2, #4
 80042b6:	f7ff fef7 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	4413      	add	r3, r2
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d003      	beq.n	80042d4 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2004      	movs	r0, #4
 80042d0:	4798      	blx	r3
        }

        break;
 80042d2:	e007      	b.n	80042e4 <XMC_DMA_IRQHandler+0x1ac>
 80042d4:	e006      	b.n	80042e4 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1da      	bne.n	8004298 <XMC_DMA_IRQHandler+0x160>
 80042e2:	e030      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
 80042e4:	e02f      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 0308 	and.w	r3, r3, #8
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d02a      	beq.n	8004346 <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f7ff fb8b 	bl	8003a0c <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 80042f6:	6178      	str	r0, [r7, #20]
    while (event != 0)
 80042f8:	e021      	b.n	800433e <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 80042fa:	2201      	movs	r2, #1
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	4013      	ands	r3, r2
 800430a:	2b00      	cmp	r3, #0
 800430c:	d014      	beq.n	8004338 <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 800430e:	69fb      	ldr	r3, [r7, #28]
 8004310:	b2db      	uxtb	r3, r3
 8004312:	6878      	ldr	r0, [r7, #4]
 8004314:	4619      	mov	r1, r3
 8004316:	2208      	movs	r2, #8
 8004318:	f7ff fec6 	bl	80040a8 <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	4413      	add	r3, r2
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2008      	movs	r0, #8
 8004332:	4798      	blx	r3
        }

        break;
 8004334:	e007      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
 8004336:	e006      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	3301      	adds	r3, #1
 800433c:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d1da      	bne.n	80042fa <XMC_DMA_IRQHandler+0x1c2>
 8004344:	e7ff      	b.n	8004346 <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 8004346:	3720      	adds	r7, #32
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}
 800434c:	50014000 	.word	0x50014000
 8004350:	1fff43d0 	.word	0x1fff43d0
 8004354:	1fff43f0 	.word	0x1fff43f0

08004358 <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	460b      	mov	r3, r1
 8004362:	70fb      	strb	r3, [r7, #3]
 8004364:	4613      	mov	r3, r2
 8004366:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 8004368:	78fb      	ldrb	r3, [r7, #3]
 800436a:	089b      	lsrs	r3, r3, #2
 800436c:	b2db      	uxtb	r3, r3
 800436e:	4618      	mov	r0, r3
 8004370:	78fb      	ldrb	r3, [r7, #3]
 8004372:	089b      	lsrs	r3, r3, #2
 8004374:	b2db      	uxtb	r3, r3
 8004376:	461a      	mov	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	3204      	adds	r2, #4
 800437c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4619      	mov	r1, r3
 800438a:	23f8      	movs	r3, #248	; 0xf8
 800438c:	408b      	lsls	r3, r1
 800438e:	43db      	mvns	r3, r3
 8004390:	ea02 0103 	and.w	r1, r2, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1d02      	adds	r2, r0, #4
 8004398:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 800439c:	78fb      	ldrb	r3, [r7, #3]
 800439e:	089b      	lsrs	r3, r3, #2
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	4618      	mov	r0, r3
 80043a4:	78fb      	ldrb	r3, [r7, #3]
 80043a6:	089b      	lsrs	r3, r3, #2
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	461a      	mov	r2, r3
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	3204      	adds	r2, #4
 80043b0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80043b4:	78bb      	ldrb	r3, [r7, #2]
 80043b6:	78f9      	ldrb	r1, [r7, #3]
 80043b8:	f001 0103 	and.w	r1, r1, #3
 80043bc:	00c9      	lsls	r1, r1, #3
 80043be:	408b      	lsls	r3, r1
 80043c0:	ea42 0103 	orr.w	r1, r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	1d02      	adds	r2, r0, #4
 80043c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 80043cc:	370c      	adds	r7, #12
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop

080043d8 <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
 80043e0:	460b      	mov	r3, r1
 80043e2:	70fb      	strb	r3, [r7, #3]
 80043e4:	4613      	mov	r3, r2
 80043e6:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80043ec:	78fb      	ldrb	r3, [r7, #3]
 80043ee:	005b      	lsls	r3, r3, #1
 80043f0:	4619      	mov	r1, r3
 80043f2:	2303      	movs	r3, #3
 80043f4:	408b      	lsls	r3, r1
 80043f6:	43db      	mvns	r3, r3
 80043f8:	401a      	ands	r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004402:	78bb      	ldrb	r3, [r7, #2]
 8004404:	78f9      	ldrb	r1, [r7, #3]
 8004406:	0049      	lsls	r1, r1, #1
 8004408:	408b      	lsls	r3, r1
 800440a:	431a      	orrs	r2, r3
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004410:	370c      	adds	r7, #12
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
 800441a:	bf00      	nop

0800441c <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004428:	b2db      	uxtb	r3, r3
 800442a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800442e:	b2db      	uxtb	r3, r3
}
 8004430:	4618      	mov	r0, r3
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	4613      	mov	r3, r2
 8004468:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 fbb0 	bl	8004bd0 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <XMC_I2C_CH_InitEx+0x5c>)
 8004474:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	88db      	ldrh	r3, [r3, #6]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	4619      	mov	r1, r3
 800447e:	f000 f81d 	bl	80044bc <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	791b      	ldrb	r3, [r3, #4]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	4611      	mov	r1, r2
 8004494:	461a      	mov	r2, r3
 8004496:	f000 f83b 	bl	8004510 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80044a0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	f04f 32ff 	mov.w	r2, #4294967295
 80044a8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	641a      	str	r2, [r3, #64]	; 0x40
}
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	073f0303 	.word	0x073f0303

080044bc <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	460b      	mov	r3, r1
 80044c6:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 80044ce:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 80044d2:	d10e      	bne.n	80044f2 <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044d8:	0c1b      	lsrs	r3, r3, #16
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	887a      	ldrh	r2, [r7, #2]
 80044de:	b2d2      	uxtb	r2, r2
 80044e0:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 80044e2:	887b      	ldrh	r3, [r7, #2]
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 80044ea:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80044f0:	e008      	b.n	8004504 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f6:	0c1b      	lsrs	r3, r3, #16
 80044f8:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop

08004510 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	4613      	mov	r3, r2
 800451c:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a20      	ldr	r2, [pc, #128]	; (80045a4 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d819      	bhi.n	800455a <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800452a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 8004532:	79fb      	ldrb	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d008      	beq.n	800454a <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	4619      	mov	r1, r3
 800453e:	220a      	movs	r2, #10
 8004540:	f000 fc04 	bl	8004d4c <XMC_USIC_CH_SetBaudrateEx>
 8004544:	4603      	mov	r3, r0
 8004546:	75fb      	strb	r3, [r7, #23]
 8004548:	e027      	b.n	800459a <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	220a      	movs	r2, #10
 8004550:	f000 fb8a 	bl	8004c68 <XMC_USIC_CH_SetBaudrate>
 8004554:	4603      	mov	r3, r0
 8004556:	75fb      	strb	r3, [r7, #23]
 8004558:	e01f      	b.n	800459a <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	4a12      	ldr	r2, [pc, #72]	; (80045a8 <XMC_I2C_CH_SetBaudrateEx+0x98>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d819      	bhi.n	8004596 <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 800456e:	79fb      	ldrb	r3, [r7, #7]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	4619      	mov	r1, r3
 800457a:	2219      	movs	r2, #25
 800457c:	f000 fbe6 	bl	8004d4c <XMC_USIC_CH_SetBaudrateEx>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]
 8004584:	e009      	b.n	800459a <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	68b9      	ldr	r1, [r7, #8]
 800458a:	2219      	movs	r2, #25
 800458c:	f000 fb6c 	bl	8004c68 <XMC_USIC_CH_SetBaudrate>
 8004590:	4603      	mov	r3, r0
 8004592:	75fb      	strb	r3, [r7, #23]
 8004594:	e001      	b.n	800459a <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 800459a:	7dfb      	ldrb	r3, [r7, #23]
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	000186a0 	.word	0x000186a0
 80045a8:	00061a80 	.word	0x00061a80

080045ac <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
 80045b4:	460b      	mov	r3, r1
 80045b6:	807b      	strh	r3, [r7, #2]
 80045b8:	4613      	mov	r3, r2
 80045ba:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 80045bc:	887b      	ldrh	r3, [r7, #2]
 80045be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80045c6:	787b      	ldrb	r3, [r7, #1]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d103      	bne.n	80045d4 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80045da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d110      	bne.n	8004604 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80045e2:	bf00      	nop
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ff19 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b80      	cmp	r3, #128	; 0x80
 80045ee:	d0f9      	beq.n	80045e4 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80045f6:	f7ff ff21 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004602:	e003      	b.n	800460c <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800460c:	3710      	adds	r7, #16
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop

08004614 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	807b      	strh	r3, [r7, #2]
 8004620:	4613      	mov	r3, r2
 8004622:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 8004624:	887b      	ldrh	r3, [r7, #2]
 8004626:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 800462a:	b29b      	uxth	r3, r3
 800462c:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800462e:	787b      	ldrb	r3, [r7, #1]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d103      	bne.n	800463c <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f043 0301 	orr.w	r3, r3, #1
 800463a:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004642:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d110      	bne.n	800466c <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800464a:	bf00      	nop
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f7ff fee5 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 8004652:	4603      	mov	r3, r0
 8004654:	2b80      	cmp	r3, #128	; 0x80
 8004656:	d0f9      	beq.n	800464c <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800465e:	f7ff feed 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800466a:	e003      	b.n	8004674 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68fa      	ldr	r2, [r7, #12]
 8004670:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004674:	3710      	adds	r7, #16
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b082      	sub	sp, #8
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800468a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d111      	bne.n	80046b6 <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004692:	bf00      	nop
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fec1 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 800469a:	4603      	mov	r3, r0
 800469c:	2b80      	cmp	r3, #128	; 0x80
 800469e:	d0f9      	beq.n	8004694 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046a6:	f7ff fec9 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80046b4:	e004      	b.n	80046c0 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80046bc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop

080046c8 <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80046da:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d110      	bne.n	8004704 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80046e2:	bf00      	nop
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f7ff fe99 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 80046ea:	4603      	mov	r3, r0
 80046ec:	2b80      	cmp	r3, #128	; 0x80
 80046ee:	d0f9      	beq.n	80046e4 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80046f6:	f7ff fea1 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 80046fa:	78fa      	ldrb	r2, [r7, #3]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004702:	e003      	b.n	800470c <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004704:	78fa      	ldrb	r2, [r7, #3]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}
 8004712:	bf00      	nop

08004714 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b082      	sub	sp, #8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004722:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d111      	bne.n	800474e <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 800472a:	bf00      	nop
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f7ff fe75 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 8004732:	4603      	mov	r3, r0
 8004734:	2b80      	cmp	r3, #128	; 0x80
 8004736:	d0f9      	beq.n	800472c <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800473e:	f7ff fe7d 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800474c:	e004      	b.n	8004758 <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004754:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004758:	3708      	adds	r7, #8
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop

08004760 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800476e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d111      	bne.n	800479a <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004776:	bf00      	nop
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f7ff fe4f 	bl	800441c <XMC_USIC_CH_GetTransmitBufferStatus>
 800477e:	4603      	mov	r3, r0
 8004780:	2b80      	cmp	r3, #128	; 0x80
 8004782:	d0f9      	beq.n	8004778 <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800478a:	f7ff fe57 	bl	800443c <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004794:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004798:	e004      	b.n	80047a4 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f44f 7240 	mov.w	r2, #768	; 0x300
 80047a0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop

080047ac <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80047ba:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d103      	bne.n	80047ca <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047c6:	73fb      	strb	r3, [r7, #15]
 80047c8:	e003      	b.n	80047d2 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80047d0:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 80047d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr

080047e0 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 80047e4:	4b03      	ldr	r3, [pc, #12]	; (80047f4 <XMC_SCU_GetMirrorStatus+0x14>)
 80047e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f2:	4770      	bx	lr
 80047f4:	50004000 	.word	0x50004000

080047f8 <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80047fc:	bf00      	nop
 80047fe:	f7ff ffef 	bl	80047e0 <XMC_SCU_GetMirrorStatus>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004808:	2b00      	cmp	r3, #0
 800480a:	d1f8      	bne.n	80047fe <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 800480c:	4a03      	ldr	r2, [pc, #12]	; (800481c <XMC_RTC_Start+0x24>)
 800480e:	4b03      	ldr	r3, [pc, #12]	; (800481c <XMC_RTC_Start+0x24>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f043 0301 	orr.w	r3, r3, #1
 8004816:	6053      	str	r3, [r2, #4]
}
 8004818:	bd80      	pop	{r7, pc}
 800481a:	bf00      	nop
 800481c:	50004a00 	.word	0x50004a00

08004820 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004824:	bf00      	nop
 8004826:	f7ff ffdb 	bl	80047e0 <XMC_SCU_GetMirrorStatus>
 800482a:	4603      	mov	r3, r0
 800482c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f8      	bne.n	8004826 <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 8004834:	4a03      	ldr	r2, [pc, #12]	; (8004844 <XMC_RTC_Stop+0x24>)
 8004836:	4b03      	ldr	r3, [pc, #12]	; (8004844 <XMC_RTC_Stop+0x24>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6053      	str	r3, [r2, #4]
}
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	50004a00 	.word	0x50004a00

08004848 <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	4603      	mov	r3, r0
 8004850:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004852:	bf00      	nop
 8004854:	f7ff ffc4 	bl	80047e0 <XMC_SCU_GetMirrorStatus>
 8004858:	4603      	mov	r3, r0
 800485a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1f8      	bne.n	8004854 <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 8004862:	4905      	ldr	r1, [pc, #20]	; (8004878 <XMC_RTC_SetPrescaler+0x30>)
 8004864:	4b04      	ldr	r3, [pc, #16]	; (8004878 <XMC_RTC_SetPrescaler+0x30>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 800486a:	88fb      	ldrh	r3, [r7, #6]
 800486c:	041b      	lsls	r3, r3, #16

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 800486e:	4313      	orrs	r3, r2
 8004870:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}
 8004878:	50004a00 	.word	0x50004a00

0800487c <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

#if (XMC_RTC_INIT_SEQUENCE == 1U)
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8004884:	bf00      	nop
 8004886:	f7ff ffab 	bl	80047e0 <XMC_SCU_GetMirrorStatus>
 800488a:	4603      	mov	r3, r0
 800488c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1f8      	bne.n	8004886 <XMC_RTC_SetTime+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
 8004894:	4a09      	ldr	r2, [pc, #36]	; (80048bc <XMC_RTC_SetTime+0x40>)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	6213      	str	r3, [r2, #32]

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 800489c:	bf00      	nop
 800489e:	f7ff ff9f 	bl	80047e0 <XMC_SCU_GetMirrorStatus>
 80048a2:	4603      	mov	r3, r0
 80048a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1f8      	bne.n	800489e <XMC_RTC_SetTime+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM1 = time->raw1;
 80048ac:	4a03      	ldr	r2, [pc, #12]	; (80048bc <XMC_RTC_SetTime+0x40>)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	6253      	str	r3, [r2, #36]	; 0x24
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
  RTC->TIM1 = time->raw1;	;
#endif
}
 80048b4:	3708      	adds	r7, #8
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
 80048ba:	bf00      	nop
 80048bc:	50004a00 	.word	0x50004a00

080048c0 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 80048c8:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <XMC_RTC_GetTime+0x24>)
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 80048d0:	4b04      	ldr	r3, [pc, #16]	; (80048e4 <XMC_RTC_GetTime+0x24>)
 80048d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	605a      	str	r2, [r3, #4]
}
 80048d8:	370c      	adds	r7, #12
 80048da:	46bd      	mov	sp, r7
 80048dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	50004a00 	.word	0x50004a00

080048e8 <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f96a 	bl	8004bd0 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	795b      	ldrb	r3, [r3, #5]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d115      	bne.n	8004930 <XMC_SPI_CH_InitEx+0x48>
 8004904:	79fb      	ldrb	r3, [r7, #7]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d012      	beq.n	8004930 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	791b      	ldrb	r3, [r3, #4]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d007      	beq.n	8004922 <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68f8      	ldr	r0, [r7, #12]
 8004918:	4619      	mov	r1, r3
 800491a:	2202      	movs	r2, #2
 800491c:	f000 fa16 	bl	8004d4c <XMC_USIC_CH_SetBaudrateEx>
 8004920:	e006      	b.n	8004930 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	4619      	mov	r1, r3
 800492a:	2202      	movs	r2, #2
 800492c:	f000 f99c 	bl	8004c68 <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4a0f      	ldr	r2, [pc, #60]	; (8004970 <XMC_SPI_CH_InitEx+0x88>)
 8004934:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 800493c:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	795b      	ldrb	r3, [r3, #5]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d107      	bne.n	8004956 <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 800494a:	f043 030b 	orr.w	r3, r3, #11
 800494e:	b2db      	uxtb	r3, r3
 8004950:	461a      	mov	r2, r3
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f04f 32ff 	mov.w	r2, #4294967295
 800495c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	891b      	ldrh	r3, [r3, #8]
 8004962:	461a      	mov	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	073f0102 	.word	0x073f0102

08004974 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004982:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004996:	370c      	adds	r7, #12
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 80049a0:	b480      	push	{r7}
 80049a2:	b085      	sub	sp, #20
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80049ae:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d103      	bne.n	80049be <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ba:	81fb      	strh	r3, [r7, #14]
 80049bc:	e003      	b.n	80049c6 <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80049c4:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 80049c6:	89fb      	ldrh	r3, [r7, #14]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80049e8:	431a      	orrs	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	035b      	lsls	r3, r3, #13
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 8004a1c:	43db      	mvns	r3, r3
 8004a1e:	401a      	ands	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	035b      	lsls	r3, r3, #13
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	401a      	ands	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004a36:	370c      	adds	r7, #12
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004a52:	b2db      	uxtb	r3, r3
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004a70:	370c      	adds	r7, #12
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop

08004a7c <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b086      	sub	sp, #24
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	4613      	mov	r3, r2
 8004a88:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 8004a8a:	2310      	movs	r3, #16
 8004a8c:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8004a8e:	68f8      	ldr	r0, [r7, #12]
 8004a90:	f000 f89e 	bl	8004bd0 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	7a1b      	ldrb	r3, [r3, #8]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d002      	beq.n	8004aa2 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	7a1b      	ldrb	r3, [r3, #8]
 8004aa0:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 8004aa2:	79fb      	ldrb	r3, [r7, #7]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d014      	beq.n	8004ad2 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	791b      	ldrb	r3, [r3, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d009      	beq.n	8004ac4 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	68f8      	ldr	r0, [r7, #12]
 8004aba:	4611      	mov	r1, r2
 8004abc:	461a      	mov	r2, r3
 8004abe:	f000 f945 	bl	8004d4c <XMC_USIC_CH_SetBaudrateEx>
 8004ac2:	e006      	b.n	8004ad2 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	4619      	mov	r1, r3
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	f000 f8cb 	bl	8004c68 <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	79db      	ldrb	r3, [r3, #7]
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	085b      	lsrs	r3, r3, #1
 8004ade:	3301      	adds	r3, #1
 8004ae0:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	795b      	ldrb	r3, [r3, #5]
 8004af4:	3b01      	subs	r3, #1
 8004af6:	061b      	lsls	r3, r3, #24
 8004af8:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	799b      	ldrb	r3, [r3, #6]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d009      	beq.n	8004b1c <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	799b      	ldrb	r3, [r3, #6]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	041b      	lsls	r3, r3, #16
 8004b14:	431a      	orrs	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	635a      	str	r2, [r3, #52]	; 0x34
 8004b1a:	e008      	b.n	8004b2e <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	795b      	ldrb	r3, [r3, #5]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004b34:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295
 8004b3c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	895b      	ldrh	r3, [r3, #10]
 8004b42:	461a      	mov	r2, r3
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004b48:	3718      	adds	r7, #24
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop

08004b50 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	460b      	mov	r3, r1
 8004b5a:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004b62:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d110      	bne.n	8004b8c <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004b6a:	bf00      	nop
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ff67 	bl	8004a40 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b80      	cmp	r3, #128	; 0x80
 8004b76:	d0f9      	beq.n	8004b6c <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004b7e:	f7ff ff6f 	bl	8004a60 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8004b82:	887a      	ldrh	r2, [r7, #2]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004b8a:	e003      	b.n	8004b94 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8004b8c:	887a      	ldrh	r2, [r7, #2]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop

08004b9c <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004baa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d103      	bne.n	8004bba <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bb6:	81fb      	strh	r3, [r7, #14]
 8004bb8:	e003      	b.n	8004bc2 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004bc0:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8004bc2:	89fb      	ldrh	r3, [r7, #14]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3714      	adds	r7, #20
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	4a1a      	ldr	r2, [pc, #104]	; (8004c44 <XMC_USIC_CH_Enable+0x74>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d003      	beq.n	8004be8 <XMC_USIC_CH_Enable+0x18>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4a19      	ldr	r2, [pc, #100]	; (8004c48 <XMC_USIC_CH_Enable+0x78>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d103      	bne.n	8004bf0 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 8004be8:	4818      	ldr	r0, [pc, #96]	; (8004c4c <XMC_USIC_CH_Enable+0x7c>)
 8004bea:	f000 f99d 	bl	8004f28 <XMC_USIC_Enable>
 8004bee:	e016      	b.n	8004c1e <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <XMC_USIC_CH_Enable+0x80>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d003      	beq.n	8004c00 <XMC_USIC_CH_Enable+0x30>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a16      	ldr	r2, [pc, #88]	; (8004c54 <XMC_USIC_CH_Enable+0x84>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d103      	bne.n	8004c08 <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8004c00:	4815      	ldr	r0, [pc, #84]	; (8004c58 <XMC_USIC_CH_Enable+0x88>)
 8004c02:	f000 f991 	bl	8004f28 <XMC_USIC_Enable>
 8004c06:	e00a      	b.n	8004c1e <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <XMC_USIC_CH_Enable+0x8c>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d003      	beq.n	8004c18 <XMC_USIC_CH_Enable+0x48>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <XMC_USIC_CH_Enable+0x90>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d102      	bne.n	8004c1e <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 8004c18:	4812      	ldr	r0, [pc, #72]	; (8004c64 <XMC_USIC_CH_Enable+0x94>)
 8004c1a:	f000 f985 	bl	8004f28 <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2203      	movs	r2, #3
 8004c22:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 8004c24:	bf00      	nop
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f9      	beq.n	8004c26 <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	f023 020f 	bic.w	r2, r3, #15
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004c3e:	3708      	adds	r7, #8
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}
 8004c44:	40030000 	.word	0x40030000
 8004c48:	40030200 	.word	0x40030200
 8004c4c:	40030008 	.word	0x40030008
 8004c50:	48020000 	.word	0x48020000
 8004c54:	48020200 	.word	0x48020200
 8004c58:	48020008 	.word	0x48020008
 8004c5c:	48024000 	.word	0x48024000
 8004c60:	48024200 	.word	0x48024200
 8004c64:	48024008 	.word	0x48024008

08004c68 <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08e      	sub	sp, #56	; 0x38
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2b63      	cmp	r3, #99	; 0x63
 8004c78:	d95a      	bls.n	8004d30 <XMC_USIC_CH_SetBaudrate+0xc8>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d057      	beq.n	8004d30 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8004c80:	f7fd fc1c 	bl	80024bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004c84:	4602      	mov	r2, r0
 8004c86:	4b2f      	ldr	r3, [pc, #188]	; (8004d44 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004c88:	fba3 2302 	umull	r2, r3, r3, r2
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	4a2c      	ldr	r2, [pc, #176]	; (8004d44 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	095b      	lsrs	r3, r3, #5
 8004c9a:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8004c9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8004ca6:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004caa:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004cb2:	e022      	b.n	8004cfa <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8004cb4:	6a3b      	ldr	r3, [r7, #32]
 8004cb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cb8:	fb02 f203 	mul.w	r2, r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	fb01 f303 	mul.w	r3, r1, r3
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	0a9b      	lsrs	r3, r3, #10
 8004cce:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cd6:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cde:	d809      	bhi.n	8004cf4 <XMC_USIC_CH_SetBaudrate+0x8c>
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d205      	bcs.n	8004cf4 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8004cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1d9      	bne.n	8004cb4 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8004d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d02:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8004d04:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	695a      	ldr	r2, [r3, #20]
 8004d10:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <XMC_USIC_CH_SetBaudrate+0xe0>)
 8004d12:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	3a01      	subs	r2, #1
 8004d18:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004d1a:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004d22:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004d2e:	e002      	b.n	8004d36 <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8004d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3738      	adds	r7, #56	; 0x38
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	51eb851f 	.word	0x51eb851f
 8004d48:	fc0080ef 	.word	0xfc0080ef

08004d4c <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08c      	sub	sp, #48	; 0x30
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8004d58:	f7fd fbb0 	bl	80024bc <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8004d6e:	6a3a      	ldr	r2, [r7, #32]
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	dd5f      	ble.n	8004e36 <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004d76:	6a3a      	ldr	r2, [r7, #32]
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8004d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8004d80:	e010      	b.n	8004da4 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8004d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d84:	3301      	adds	r3, #1
 8004d86:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	461a      	mov	r2, r3
 8004d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d94:	fb03 f302 	mul.w	r3, r3, r2
 8004d98:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004d9a:	6a3a      	ldr	r2, [r7, #32]
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8004da2:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8004da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da6:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d8e9      	bhi.n	8004d82 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8004dae:	6a3a      	ldr	r2, [r7, #32]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc2:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8004dc4:	6a3a      	ldr	r2, [r7, #32]
 8004dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dc8:	3301      	adds	r3, #1
 8004dca:	6879      	ldr	r1, [r7, #4]
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004dd2:	fb01 f303 	mul.w	r3, r1, r3
 8004dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dda:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004de6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004dea:	68b9      	ldr	r1, [r7, #8]
 8004dec:	69bb      	ldr	r3, [r7, #24]
 8004dee:	1acb      	subs	r3, r1, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	bfb8      	it	lt
 8004df4:	425b      	neglt	r3, r3
 8004df6:	429a      	cmp	r2, r3
 8004df8:	da02      	bge.n	8004e00 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8004e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e02:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004e06:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8004e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e0a:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	695a      	ldr	r2, [r3, #20]
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8004e18:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004e1a:	687a      	ldr	r2, [r7, #4]
 8004e1c:	3a01      	subs	r2, #1
 8004e1e:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004e20:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	3b01      	subs	r3, #1
 8004e26:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004e28:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e34:	e002      	b.n	8004e3c <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8004e3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3730      	adds	r7, #48	; 0x30
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	fc0080ef 	.word	0xfc0080ef

08004e4c <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004e4c:	b480      	push	{r7}
 8004e4e:	b085      	sub	sp, #20
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004e62:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004e72:	4b09      	ldr	r3, [pc, #36]	; (8004e98 <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8004e74:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	0211      	lsls	r1, r2, #8
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8004e7e:	79fa      	ldrb	r2, [r7, #7]
 8004e80:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004e82:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8004e84:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	f8ffc0c0 	.word	0xf8ffc0c0

08004e9c <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004eb2:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004ec2:	4b0a      	ldr	r3, [pc, #40]	; (8004eec <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8004ec4:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	0211      	lsls	r1, r2, #8
 8004eca:	68ba      	ldr	r2, [r7, #8]
 8004ecc:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8004ece:	79fa      	ldrb	r2, [r7, #7]
 8004ed0:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8004ed2:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	efffc0c0 	.word	0xefffc0c0

08004ef0 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	460b      	mov	r3, r1
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	699a      	ldr	r2, [r3, #24]
 8004f02:	7afb      	ldrb	r3, [r7, #11]
 8004f04:	2107      	movs	r1, #7
 8004f06:	fa01 f303 	lsl.w	r3, r1, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004f16:	431a      	orrs	r2, r3
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b082      	sub	sp, #8
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a28      	ldr	r2, [pc, #160]	; (8004fd4 <XMC_USIC_Enable+0xac>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d118      	bne.n	8004f6a <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8004f38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f3c:	f7fd fc02 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8004f40:	bf00      	nop
 8004f42:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f46:	f7fd fc19 	bl	800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f8      	bne.n	8004f42 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8004f50:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f54:	f7fd fa72 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8004f58:	bf00      	nop
 8004f5a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004f5e:	f7fd fa89 	bl	8002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1f8      	bne.n	8004f5a <XMC_USIC_Enable+0x32>
 8004f68:	e030      	b.n	8004fcc <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a1a      	ldr	r2, [pc, #104]	; (8004fd8 <XMC_USIC_Enable+0xb0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d114      	bne.n	8004f9c <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8004f72:	481a      	ldr	r0, [pc, #104]	; (8004fdc <XMC_USIC_Enable+0xb4>)
 8004f74:	f7fd fbe6 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8004f78:	bf00      	nop
 8004f7a:	4818      	ldr	r0, [pc, #96]	; (8004fdc <XMC_USIC_Enable+0xb4>)
 8004f7c:	f7fd fbfe 	bl	800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d1f9      	bne.n	8004f7a <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8004f86:	4815      	ldr	r0, [pc, #84]	; (8004fdc <XMC_USIC_Enable+0xb4>)
 8004f88:	f7fd fa58 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8004f8c:	bf00      	nop
 8004f8e:	4813      	ldr	r0, [pc, #76]	; (8004fdc <XMC_USIC_Enable+0xb4>)
 8004f90:	f7fd fa70 	bl	8002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f9      	bne.n	8004f8e <XMC_USIC_Enable+0x66>
 8004f9a:	e017      	b.n	8004fcc <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a10      	ldr	r2, [pc, #64]	; (8004fe0 <XMC_USIC_Enable+0xb8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d113      	bne.n	8004fcc <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8004fa4:	480f      	ldr	r0, [pc, #60]	; (8004fe4 <XMC_USIC_Enable+0xbc>)
 8004fa6:	f7fd fbcd 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8004faa:	bf00      	nop
 8004fac:	480d      	ldr	r0, [pc, #52]	; (8004fe4 <XMC_USIC_Enable+0xbc>)
 8004fae:	f7fd fbe5 	bl	800277c <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1f9      	bne.n	8004fac <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8004fb8:	480a      	ldr	r0, [pc, #40]	; (8004fe4 <XMC_USIC_Enable+0xbc>)
 8004fba:	f7fd fa3f 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8004fbe:	bf00      	nop
 8004fc0:	4808      	ldr	r0, [pc, #32]	; (8004fe4 <XMC_USIC_Enable+0xbc>)
 8004fc2:	f7fd fa57 	bl	8002474 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f9      	bne.n	8004fc0 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	40030008 	.word	0x40030008
 8004fd8:	48020008 	.word	0x48020008
 8004fdc:	10000080 	.word	0x10000080
 8004fe0:	48024008 	.word	0x48024008
 8004fe4:	10000100 	.word	0x10000100

08004fe8 <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8004fec:	2020      	movs	r0, #32
 8004fee:	f7fd fb99 	bl	8002724 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
 8004ff2:	4803      	ldr	r0, [pc, #12]	; (8005000 <XMC_WDT_Enable+0x18>)
 8004ff4:	f7fd fba6 	bl	8002744 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8004ff8:	4801      	ldr	r0, [pc, #4]	; (8005000 <XMC_WDT_Enable+0x18>)
 8004ffa:	f7fd fa1f 	bl	800243c <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000002 	.word	0x20000002

08005004 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b082      	sub	sp, #8
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 800500c:	f7ff ffec 	bl	8004fe8 <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8005010:	4a07      	ldr	r2, [pc, #28]	; (8005030 <XMC_WDT_Init+0x2c>)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8005018:	4a05      	ldr	r2, [pc, #20]	; (8005030 <XMC_WDT_Init+0x2c>)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8005020:	4a03      	ldr	r2, [pc, #12]	; (8005030 <XMC_WDT_Init+0x2c>)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	6153      	str	r3, [r2, #20]
}
 8005028:	3708      	adds	r7, #8
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	50008000 	.word	0x50008000

08005034 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b084      	sub	sp, #16
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 800503c:	4b14      	ldr	r3, [pc, #80]	; (8005090 <_sbrk+0x5c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d102      	bne.n	800504a <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8005044:	4b12      	ldr	r3, [pc, #72]	; (8005090 <_sbrk+0x5c>)
 8005046:	4a13      	ldr	r2, [pc, #76]	; (8005094 <_sbrk+0x60>)
 8005048:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 800504a:	4b11      	ldr	r3, [pc, #68]	; (8005090 <_sbrk+0x5c>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	3303      	adds	r3, #3
 8005054:	f023 0303 	bic.w	r3, r3, #3
 8005058:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <_sbrk+0x5c>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4413      	add	r3, r2
 8005062:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <_sbrk+0x64>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d207      	bcs.n	8005078 <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <_sbrk+0x5c>)
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4413      	add	r3, r2
 8005070:	4a07      	ldr	r2, [pc, #28]	; (8005090 <_sbrk+0x5c>)
 8005072:	6013      	str	r3, [r2, #0]
    return (base);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	e006      	b.n	8005086 <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8005078:	f00c fdb0 	bl	8011bdc <__errno>
 800507c:	4602      	mov	r2, r0
 800507e:	230c      	movs	r3, #12
 8005080:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8005082:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8005086:	4618      	mov	r0, r3
 8005088:	3710      	adds	r7, #16
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	1fff4400 	.word	0x1fff4400
 8005094:	20000000 	.word	0x20000000
 8005098:	2003ffc0 	.word	0x2003ffc0

0800509c <_init>:

/* Init */
void _init(void)
{}
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <IOExp_Configure>:
}

/* Configures pin input and output for corresponding ports as provided in port0 and port1 parameter */
/* IOExp_address is the device address, e.g. 0x40 */
void IOExp_Configure(I2C_MASTER_t *handle, uint8_t IOExp_address, uint8_t port0, uint8_t port1)
{
 80050a8:	b590      	push	{r4, r7, lr}
 80050aa:	b093      	sub	sp, #76	; 0x4c
 80050ac:	af02      	add	r7, sp, #8
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	4608      	mov	r0, r1
 80050b2:	4611      	mov	r1, r2
 80050b4:	461a      	mov	r2, r3
 80050b6:	4603      	mov	r3, r0
 80050b8:	70fb      	strb	r3, [r7, #3]
 80050ba:	460b      	mov	r3, r1
 80050bc:	70bb      	strb	r3, [r7, #2]
 80050be:	4613      	mov	r3, r2
 80050c0:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 80050c2:	2301      	movs	r3, #1
 80050c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80050c8:	2301      	movs	r3, #1
 80050ca:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t data_ptr[20] = {0}, data_RxPtr[20] = {0}, CMD;
 80050ce:	f107 031c 	add.w	r3, r7, #28
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	3304      	adds	r3, #4
 80050d8:	2200      	movs	r2, #0
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	3304      	adds	r3, #4
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
 80050e2:	3304      	adds	r3, #4
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	3304      	adds	r3, #4
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
 80050ee:	3304      	adds	r3, #4
 80050f0:	f107 0308 	add.w	r3, r7, #8
 80050f4:	2200      	movs	r2, #0
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	3304      	adds	r3, #4
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	3304      	adds	r3, #4
 8005100:	2200      	movs	r2, #0
 8005102:	601a      	str	r2, [r3, #0]
 8005104:	3304      	adds	r3, #4
 8005106:	2200      	movs	r2, #0
 8005108:	601a      	str	r2, [r3, #0]
 800510a:	3304      	adds	r3, #4
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	3304      	adds	r3, #4
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8005112:	2301      	movs	r3, #1
 8005114:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	bool test_result = false;
 8005118:	2300      	movs	r3, #0
 800511a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t pass_count=0;
 800511e:	2300      	movs	r3, #0
 8005120:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/*********************************************TEST port 0 output, port 1 input ************************************************/
	/* Configure port 0 */
	CMD = CONFIG_REG_PORT0;
 8005124:	2306      	movs	r3, #6
 8005126:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	data_ptr[0] = CMD;
 800512a:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800512e:	773b      	strb	r3, [r7, #28]
	data_ptr[1] = port0; // data to port 0
 8005130:	78bb      	ldrb	r3, [r7, #2]
 8005132:	777b      	strb	r3, [r7, #29]
	data_ptr[2] = port1; // data to port 1
 8005134:	787b      	ldrb	r3, [r7, #1]
 8005136:	77bb      	strb	r3, [r7, #30]
	data_count = 3;
 8005138:	2303      	movs	r3, #3
 800513a:	633b      	str	r3, [r7, #48]	; 0x30

	for(int i = 0; i < 0xffff; i++);
 800513c:	2300      	movs	r3, #0
 800513e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005140:	e002      	b.n	8005148 <IOExp_Configure+0xa0>
 8005142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005144:	3301      	adds	r3, #1
 8005146:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005148:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800514a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800514e:	4293      	cmp	r3, r2
 8005150:	ddf7      	ble.n	8005142 <IOExp_Configure+0x9a>
	/* Set Port 0 as output and port 1 as input */
	I2C_MASTER_Transmit(handle, send_start, IOExp_address/*I2C_SLAVE_ADDRESS*/, &data_ptr[0], data_count, send_stop);
 8005152:	78fa      	ldrb	r2, [r7, #3]
 8005154:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8005158:	f107 041c 	add.w	r4, r7, #28
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8005164:	9301      	str	r3, [sp, #4]
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	4623      	mov	r3, r4
 800516a:	f002 ff83 	bl	8008074 <I2C_MASTER_Transmit>
}
 800516e:	3744      	adds	r7, #68	; 0x44
 8005170:	46bd      	mov	sp, r7
 8005172:	bd90      	pop	{r4, r7, pc}

08005174 <IOExp_SetPIN_UPDATE>:

/* Internal function to set a pin high or low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_UPDATE(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin, bool pin_level)
{
 8005174:	b590      	push	{r4, r7, lr}
 8005176:	b091      	sub	sp, #68	; 0x44
 8005178:	af04      	add	r7, sp, #16
 800517a:	6078      	str	r0, [r7, #4]
 800517c:	4608      	mov	r0, r1
 800517e:	4611      	mov	r1, r2
 8005180:	461a      	mov	r2, r3
 8005182:	4603      	mov	r3, r0
 8005184:	70fb      	strb	r3, [r7, #3]
 8005186:	460b      	mov	r3, r1
 8005188:	70bb      	strb	r3, [r7, #2]
 800518a:	4613      	mov	r3, r2
 800518c:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 800518e:	2301      	movs	r3, #1
 8005190:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005194:	2301      	movs	r3, #1
 8005196:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, data_Rx[2] = {0}, CMD;
 800519a:	f107 030c 	add.w	r3, r7, #12
 800519e:	2200      	movs	r2, #0
 80051a0:	601a      	str	r2, [r3, #0]
 80051a2:	3304      	adds	r3, #4
 80051a4:	2200      	movs	r2, #0
 80051a6:	601a      	str	r2, [r3, #0]
 80051a8:	3304      	adds	r3, #4
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
 80051ae:	3304      	adds	r3, #4
 80051b0:	2200      	movs	r2, #0
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	3304      	adds	r3, #4
 80051b6:	2200      	movs	r2, #0
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2300      	movs	r3, #0
 80051be:	813b      	strh	r3, [r7, #8]
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(0 == port)
 80051c6:	78bb      	ldrb	r3, [r7, #2]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d103      	bne.n	80051d4 <IOExp_SetPIN_UPDATE+0x60>
	{
		/* Read port 0 configuration */
		CMD = OUTPUT_REG_PORT0;
 80051cc:	2302      	movs	r3, #2
 80051ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80051d2:	e002      	b.n	80051da <IOExp_SetPIN_UPDATE+0x66>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = OUTPUT_REG_PORT1;
 80051d4:	2303      	movs	r3, #3
 80051d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 80051da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80051de:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 80051e0:	2301      	movs	r3, #1
 80051e2:	623b      	str	r3, [r7, #32]

	send_stop = false;
 80051e4:	2300      	movs	r3, #0
 80051e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port 0 */
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80051ea:	78fa      	ldrb	r2, [r7, #3]
 80051ec:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80051f0:	f107 040c 	add.w	r4, r7, #12
 80051f4:	6a3b      	ldr	r3, [r7, #32]
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80051fc:	9301      	str	r3, [sp, #4]
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	4623      	mov	r3, r4
 8005202:	f002 ff37 	bl	8008074 <I2C_MASTER_Transmit>
 8005206:	4603      	mov	r3, r0
 8005208:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 800520c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005210:	2b00      	cmp	r3, #0
 8005212:	d15d      	bne.n	80052d0 <IOExp_SetPIN_UPDATE+0x15c>
	{
		//send_start = true;
		send_start = true;
 8005214:	2301      	movs	r3, #1
 8005216:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 800521a:	2301      	movs	r3, #1
 800521c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* Read Port 1 pins */
	//	I2C_status = I2C_MASTER_Receive(&I2C_MASTER_0, send_start, IOExp_Address, &data_Rx[0], data_count, send_stop, true);
		//data_count = 2;
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, &data_ptr[1], data_count, send_stop, true);
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005226:	f107 030c 	add.w	r3, r7, #12
 800522a:	1c5c      	adds	r4, r3, #1
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005234:	9301      	str	r3, [sp, #4]
 8005236:	2301      	movs	r3, #1
 8005238:	9302      	str	r3, [sp, #8]
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	4623      	mov	r3, r4
 800523e:	f002 ff43 	bl	80080c8 <I2C_MASTER_Receive>
 8005242:	4603      	mov	r3, r0
 8005244:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005248:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800524c:	2b00      	cmp	r3, #0
 800524e:	d13f      	bne.n	80052d0 <IOExp_SetPIN_UPDATE+0x15c>
		{
			if(PIN_HIGH == pin_level)
 8005250:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <IOExp_SetPIN_UPDATE+0xfe>
			{
				/* Update output register value */
				data_ptr[1] |= /*data_Rx[0] |*/ (1 << pin);
 8005258:	7b7b      	ldrb	r3, [r7, #13]
 800525a:	b2d9      	uxtb	r1, r3
 800525c:	787b      	ldrb	r3, [r7, #1]
 800525e:	2201      	movs	r2, #1
 8005260:	fa02 f303 	lsl.w	r3, r2, r3
 8005264:	b2db      	uxtb	r3, r3
 8005266:	460a      	mov	r2, r1
 8005268:	4313      	orrs	r3, r2
 800526a:	b2db      	uxtb	r3, r3
 800526c:	b2db      	uxtb	r3, r3
 800526e:	737b      	strb	r3, [r7, #13]
 8005270:	e00d      	b.n	800528e <IOExp_SetPIN_UPDATE+0x11a>
			}
			else
			{
				/* Update output register value */
				data_ptr[1] &= /*data_Rx[0] &*/ (~(1 << pin));
 8005272:	7b7b      	ldrb	r3, [r7, #13]
 8005274:	b2d9      	uxtb	r1, r3
 8005276:	787b      	ldrb	r3, [r7, #1]
 8005278:	2201      	movs	r2, #1
 800527a:	fa02 f303 	lsl.w	r3, r2, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	b2db      	uxtb	r3, r3
 8005284:	460a      	mov	r2, r1
 8005286:	4013      	ands	r3, r2
 8005288:	b2db      	uxtb	r3, r3
 800528a:	b2db      	uxtb	r3, r3
 800528c:	737b      	strb	r3, [r7, #13]
			}

			data_count = 2;
 800528e:	2302      	movs	r3, #2
 8005290:	623b      	str	r3, [r7, #32]
			send_start = true;
 8005292:	2301      	movs	r3, #1
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			for(int i= 0; i < 0xffff; i++);
 8005298:	2300      	movs	r3, #0
 800529a:	62bb      	str	r3, [r7, #40]	; 0x28
 800529c:	e002      	b.n	80052a4 <IOExp_SetPIN_UPDATE+0x130>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	3301      	adds	r3, #1
 80052a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80052a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80052aa:	4293      	cmp	r3, r2
 80052ac:	ddf7      	ble.n	800529e <IOExp_SetPIN_UPDATE+0x12a>
			/* update pin */
			I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80052ae:	78fa      	ldrb	r2, [r7, #3]
 80052b0:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80052b4:	f107 040c 	add.w	r4, r7, #12
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80052c0:	9301      	str	r3, [sp, #4]
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	4623      	mov	r3, r4
 80052c6:	f002 fed5 	bl	8008074 <I2C_MASTER_Transmit>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			/* data is expected to be successfully written at this point */
		}
	}

	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 80052d0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <IOExp_SetPIN_UPDATE+0x168>
		return true;
 80052d8:	2301      	movs	r3, #1
 80052da:	e000      	b.n	80052de <IOExp_SetPIN_UPDATE+0x16a>
	else
		return false;
 80052dc:	2300      	movs	r3, #0
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3734      	adds	r7, #52	; 0x34
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd90      	pop	{r4, r7, pc}
 80052e6:	bf00      	nop

080052e8 <IOExp_SetPIN_HIGH>:

/* Function to set a pin high for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_HIGH(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 80052e8:	b590      	push	{r4, r7, lr}
 80052ea:	b085      	sub	sp, #20
 80052ec:	af02      	add	r7, sp, #8
 80052ee:	6078      	str	r0, [r7, #4]
 80052f0:	4608      	mov	r0, r1
 80052f2:	4611      	mov	r1, r2
 80052f4:	461a      	mov	r2, r3
 80052f6:	4603      	mov	r3, r0
 80052f8:	70fb      	strb	r3, [r7, #3]
 80052fa:	460b      	mov	r3, r1
 80052fc:	70bb      	strb	r3, [r7, #2]
 80052fe:	4613      	mov	r3, r2
 8005300:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_HIGH);
 8005302:	78f9      	ldrb	r1, [r7, #3]
 8005304:	78ba      	ldrb	r2, [r7, #2]
 8005306:	787c      	ldrb	r4, [r7, #1]
 8005308:	2301      	movs	r3, #1
 800530a:	9300      	str	r3, [sp, #0]
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	4623      	mov	r3, r4
 8005310:	f7ff ff30 	bl	8005174 <IOExp_SetPIN_UPDATE>
 8005314:	4603      	mov	r3, r0
}
 8005316:	4618      	mov	r0, r3
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	bd90      	pop	{r4, r7, pc}
 800531e:	bf00      	nop

08005320 <IOExp_SetPIN_LOW>:

/* Function to set a pin low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_LOW(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b085      	sub	sp, #20
 8005324:	af02      	add	r7, sp, #8
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	4608      	mov	r0, r1
 800532a:	4611      	mov	r1, r2
 800532c:	461a      	mov	r2, r3
 800532e:	4603      	mov	r3, r0
 8005330:	70fb      	strb	r3, [r7, #3]
 8005332:	460b      	mov	r3, r1
 8005334:	70bb      	strb	r3, [r7, #2]
 8005336:	4613      	mov	r3, r2
 8005338:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_LOW);
 800533a:	78f9      	ldrb	r1, [r7, #3]
 800533c:	78ba      	ldrb	r2, [r7, #2]
 800533e:	787c      	ldrb	r4, [r7, #1]
 8005340:	2300      	movs	r3, #0
 8005342:	9300      	str	r3, [sp, #0]
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	4623      	mov	r3, r4
 8005348:	f7ff ff14 	bl	8005174 <IOExp_SetPIN_UPDATE>
 800534c:	4603      	mov	r3, r0
}
 800534e:	4618      	mov	r0, r3
 8005350:	370c      	adds	r7, #12
 8005352:	46bd      	mov	sp, r7
 8005354:	bd90      	pop	{r4, r7, pc}
 8005356:	bf00      	nop

08005358 <IOExp_ReadPIN_LEVEL>:
//	}
//}


uint8_t* IOExp_ReadPIN_LEVEL(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port)
{
 8005358:	b590      	push	{r4, r7, lr}
 800535a:	b091      	sub	sp, #68	; 0x44
 800535c:	af04      	add	r7, sp, #16
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	460b      	mov	r3, r1
 8005362:	70fb      	strb	r3, [r7, #3]
 8005364:	4613      	mov	r3, r2
 8005366:	70bb      	strb	r3, [r7, #2]
	bool send_start = true, send_stop = true;
 8005368:	2301      	movs	r3, #1
 800536a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800536e:	2301      	movs	r3, #1
 8005370:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, /*data_Rx[2] = {0},*/ CMD;
 8005374:	f107 030c 	add.w	r3, r7, #12
 8005378:	2200      	movs	r2, #0
 800537a:	601a      	str	r2, [r3, #0]
 800537c:	3304      	adds	r3, #4
 800537e:	2200      	movs	r2, #0
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	3304      	adds	r3, #4
 8005384:	2200      	movs	r2, #0
 8005386:	601a      	str	r2, [r3, #0]
 8005388:	3304      	adds	r3, #4
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
 800538e:	3304      	adds	r3, #4
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
 8005394:	3304      	adds	r3, #4
	static uint8_t data_Rx[2] = {0, 0};
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8005396:	2301      	movs	r3, #1
 8005398:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(0 == port)
 800539c:	78bb      	ldrb	r3, [r7, #2]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d103      	bne.n	80053aa <IOExp_ReadPIN_LEVEL+0x52>
	{
		/* Read port 0 configuration */
		CMD = INPUT_REG_PORT0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80053a8:	e002      	b.n	80053b0 <IOExp_ReadPIN_LEVEL+0x58>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = INPUT_REG_PORT1;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 80053b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80053b4:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	623b      	str	r3, [r7, #32]

	send_stop = true;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port */
	//for(int i = 0; i < 0xffff; i++);
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 80053c6:	f107 040c 	add.w	r4, r7, #12
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	9300      	str	r3, [sp, #0]
 80053ce:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80053d2:	9301      	str	r3, [sp, #4]
 80053d4:	6878      	ldr	r0, [r7, #4]
 80053d6:	4623      	mov	r3, r4
 80053d8:	f002 fe4c 	bl	8008074 <I2C_MASTER_Transmit>
 80053dc:	4603      	mov	r3, r0
 80053de:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 80053e2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d127      	bne.n	800543a <IOExp_ReadPIN_LEVEL+0xe2>
	{
		send_start = true;
 80053ea:	2301      	movs	r3, #1
 80053ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 80053f0:	2301      	movs	r3, #1
 80053f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i = 0; i < 0xffff; i++);
 80053f6:	2300      	movs	r3, #0
 80053f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80053fa:	e002      	b.n	8005402 <IOExp_ReadPIN_LEVEL+0xaa>
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	3301      	adds	r3, #1
 8005400:	62bb      	str	r3, [r7, #40]	; 0x28
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8005408:	4293      	cmp	r3, r2
 800540a:	ddf7      	ble.n	80053fc <IOExp_ReadPIN_LEVEL+0xa4>
		/* Read Port pins */
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, data_Rx, 2/*data_count*/, send_stop, true);
 800540c:	78fa      	ldrb	r2, [r7, #3]
 800540e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005412:	2302      	movs	r3, #2
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800541a:	9301      	str	r3, [sp, #4]
 800541c:	2301      	movs	r3, #1
 800541e:	9302      	str	r3, [sp, #8]
 8005420:	6878      	ldr	r0, [r7, #4]
 8005422:	4b08      	ldr	r3, [pc, #32]	; (8005444 <IOExp_ReadPIN_LEVEL+0xec>)
 8005424:	f002 fe50 	bl	80080c8 <I2C_MASTER_Receive>
 8005428:	4603      	mov	r3, r0
 800542a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 800542e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <IOExp_ReadPIN_LEVEL+0xe2>
		{
			return (data_Rx);
 8005436:	4b03      	ldr	r3, [pc, #12]	; (8005444 <IOExp_ReadPIN_LEVEL+0xec>)
 8005438:	e7ff      	b.n	800543a <IOExp_ReadPIN_LEVEL+0xe2>
		}
	}
}
 800543a:	4618      	mov	r0, r3
 800543c:	3734      	adds	r7, #52	; 0x34
 800543e:	46bd      	mov	sp, r7
 8005440:	bd90      	pop	{r4, r7, pc}
 8005442:	bf00      	nop
 8005444:	1fff4404 	.word	0x1fff4404

08005448 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	460b      	mov	r3, r1
 8005452:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	fa22 f303 	lsr.w	r3, r2, r3
 800545e:	f003 0301 	and.w	r3, r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop

08005470 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	7c1b      	ldrb	r3, [r3, #16]
 8005480:	4610      	mov	r0, r2
 8005482:	4619      	mov	r1, r3
 8005484:	f7ff ffe0 	bl	8005448 <XMC_GPIO_GetInput>
 8005488:	4603      	mov	r3, r0
}
 800548a:	4618      	mov	r0, r3
 800548c:	3708      	adds	r7, #8
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop

08005494 <Input_Capture>:
	//if(Vcu_InPuts.IGNITION_1_IN)
//#endif

Vcu_InPuts_t Vcu_InPuts;
void Input_Capture(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0

	//Vcu_InPuts.charger_connect_IN = DIGITAL_IO_GetInput(&CHARGER_CONNECTED_IN_D);

	Vcu_InPuts.IGNITION_1_IN = DIGITAL_IO_GetInput(&IGNI_POS1_IN_D);
 8005498:	481f      	ldr	r0, [pc, #124]	; (8005518 <Input_Capture+0x84>)
 800549a:	f7ff ffe9 	bl	8005470 <DIGITAL_IO_GetInput>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	bf14      	ite	ne
 80054a4:	2301      	movne	r3, #1
 80054a6:	2300      	moveq	r3, #0
 80054a8:	b2da      	uxtb	r2, r3
 80054aa:	4b1c      	ldr	r3, [pc, #112]	; (800551c <Input_Capture+0x88>)
 80054ac:	701a      	strb	r2, [r3, #0]

	Vcu_InPuts.IGNITION_2_IN = DIGITAL_IO_GetInput(&IGNI_POS2_IN_D);
 80054ae:	481c      	ldr	r0, [pc, #112]	; (8005520 <Input_Capture+0x8c>)
 80054b0:	f7ff ffde 	bl	8005470 <DIGITAL_IO_GetInput>
 80054b4:	4603      	mov	r3, r0
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	bf14      	ite	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	2300      	moveq	r3, #0
 80054be:	b2da      	uxtb	r2, r3
 80054c0:	4b16      	ldr	r3, [pc, #88]	; (800551c <Input_Capture+0x88>)
 80054c2:	705a      	strb	r2, [r3, #1]

	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 80054c4:	4817      	ldr	r0, [pc, #92]	; (8005524 <Input_Capture+0x90>)
 80054c6:	f7ff ffd3 	bl	8005470 <DIGITAL_IO_GetInput>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	bf14      	ite	ne
 80054d0:	2301      	movne	r3, #1
 80054d2:	2300      	moveq	r3, #0
 80054d4:	b2da      	uxtb	r2, r3
 80054d6:	4b14      	ldr	r3, [pc, #80]	; (8005528 <Input_Capture+0x94>)
 80054d8:	749a      	strb	r2, [r3, #18]

	Switch_Ios_IN.handbrake_sw_IN = DIGITAL_IO_GetInput(&HANDBRAKE_IN_D);
 80054da:	4814      	ldr	r0, [pc, #80]	; (800552c <Input_Capture+0x98>)
 80054dc:	f7ff ffc8 	bl	8005470 <DIGITAL_IO_GetInput>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	bf14      	ite	ne
 80054e6:	2301      	movne	r3, #1
 80054e8:	2300      	moveq	r3, #0
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	4b0e      	ldr	r3, [pc, #56]	; (8005528 <Input_Capture+0x94>)
 80054ee:	721a      	strb	r2, [r3, #8]

	Switch_Ios_IN.electronic_brake_in_d = DIGITAL_IO_GetInput(&ELEC_HANDBRAKE_IN_D);
 80054f0:	480f      	ldr	r0, [pc, #60]	; (8005530 <Input_Capture+0x9c>)
 80054f2:	f7ff ffbd 	bl	8005470 <DIGITAL_IO_GetInput>
 80054f6:	4603      	mov	r3, r0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	bf14      	ite	ne
 80054fc:	2301      	movne	r3, #1
 80054fe:	2300      	moveq	r3, #0
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4b09      	ldr	r3, [pc, #36]	; (8005528 <Input_Capture+0x94>)
 8005504:	715a      	strb	r2, [r3, #5]

	Can_Inputs();
 8005506:	f000 f815 	bl	8005534 <Can_Inputs>

	state_1_InputCapture();
 800550a:	f000 f857 	bl	80055bc <state_1_InputCapture>
	State_2_InputCapture();
 800550e:	f000 fa3d 	bl	800598c <State_2_InputCapture>

	read_temp();
 8005512:	f000 f827 	bl	8005564 <read_temp>

}
 8005516:	bd80      	pop	{r7, pc}
 8005518:	08013b5c 	.word	0x08013b5c
 800551c:	1fff5168 	.word	0x1fff5168
 8005520:	08013b48 	.word	0x08013b48
 8005524:	08013b98 	.word	0x08013b98
 8005528:	1fff4888 	.word	0x1fff4888
 800552c:	08013b84 	.word	0x08013b84
 8005530:	08013968 	.word	0x08013968

08005534 <Can_Inputs>:

void Can_Inputs(void)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	af00      	add	r7, sp, #0
	uart_debugg("in can_inputs");
 8005538:	4808      	ldr	r0, [pc, #32]	; (800555c <Can_Inputs+0x28>)
 800553a:	f00a fe57 	bl	80101ec <uart_debugg>
	/*charger read */
			Read_CAN_id0x18FF50E5();
 800553e:	f005 ff8d 	bl	800b45c <Read_CAN_id0x18FF50E5>
		Gtake_Rx_29bit();

#elif IRP
//		  SuperLooptime_Start();

		Irp_Rx_29bit();
 8005542:	f005 ff19 	bl	800b378 <Irp_Rx_29bit>

#endif


		//Read_CAN_BMS();//11bit
		Read_can_bms_29bit(); //29 bit
 8005546:	f004 fec3 	bl	800a2d0 <Read_can_bms_29bit>
		CAN_INPUT_HVAC();
 800554a:	f005 fb4b 	bl	800abe4 <CAN_INPUT_HVAC>
		CAN_Read_EPS();
 800554e:	f005 f967 	bl	800a820 <CAN_Read_EPS>
		/*charger read */
		//Read_CAN_id0x18FF50E5();

		//ruff();

		uart_debugg("exit can_inputs");
 8005552:	4803      	ldr	r0, [pc, #12]	; (8005560 <Can_Inputs+0x2c>)
 8005554:	f00a fe4a 	bl	80101ec <uart_debugg>
}
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	080134f8 	.word	0x080134f8
 8005560:	08013508 	.word	0x08013508

08005564 <read_temp>:

void read_temp(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
	U18_read_temp();
 8005568:	f000 fb32 	bl	8005bd0 <U18_read_temp>
}
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop

08005570 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	460b      	mov	r3, r1
 800557a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005580:	78fb      	ldrb	r3, [r7, #3]
 8005582:	fa22 f303 	lsr.w	r3, r2, r3
 8005586:	f003 0301 	and.w	r3, r3, #1
}
 800558a:	4618      	mov	r0, r3
 800558c:	370c      	adds	r7, #12
 800558e:	46bd      	mov	sp, r7
 8005590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005594:	4770      	bx	lr
 8005596:	bf00      	nop

08005598 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	7c1b      	ldrb	r3, [r3, #16]
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	f7ff ffe0 	bl	8005570 <XMC_GPIO_GetInput>
 80055b0:	4603      	mov	r3, r0
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop

080055bc <state_1_InputCapture>:
#include "Vcu_Config.h"
#include "IOExp_lib.h"
#include "Vcu_Init.h"

void state_1_InputCapture(void)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_1_IN)
 80055c0:	4b0a      	ldr	r3, [pc, #40]	; (80055ec <state_1_InputCapture+0x30>)
 80055c2:	781b      	ldrb	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_1_IN))
	{
		/* do the necessary task */
	}

	Switch_Ios_IN.brake_oil_IN = DIGITAL_IO_GetInput(&BRAKE_OIL_IN_D);
 80055c6:	480a      	ldr	r0, [pc, #40]	; (80055f0 <state_1_InputCapture+0x34>)
 80055c8:	f7ff ffe6 	bl	8005598 <DIGITAL_IO_GetInput>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	bf14      	ite	ne
 80055d2:	2301      	movne	r3, #1
 80055d4:	2300      	moveq	r3, #0
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <state_1_InputCapture+0x38>)
 80055da:	719a      	strb	r2, [r3, #6]

	/* check for io_expander */
	Io_Exp_U24();
 80055dc:	f000 f80c 	bl	80055f8 <Io_Exp_U24>
	Io_Exp_U25();
 80055e0:	f000 f8fe 	bl	80057e0 <Io_Exp_U25>
	Io_Exp_U38();
 80055e4:	f000 f954 	bl	8005890 <Io_Exp_U38>
	//Io_Exp_U48();

}
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	1fff5168 	.word	0x1fff5168
 80055f0:	08013b0c 	.word	0x08013b0c
 80055f4:	1fff4888 	.word	0x1fff4888

080055f8 <Io_Exp_U24>:

void Io_Exp_U24(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b084      	sub	sp, #16
 80055fc:	af00      	add	r7, sp, #0
	//uart_debugg("in U24");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 80055fe:	2300      	movs	r3, #0
 8005600:	60fb      	str	r3, [r7, #12]
 8005602:	2340      	movs	r3, #64	; 0x40
 8005604:	72fb      	strb	r3, [r7, #11]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 8005606:	7afb      	ldrb	r3, [r7, #11]
 8005608:	4870      	ldr	r0, [pc, #448]	; (80057cc <Io_Exp_U24+0x1d4>)
 800560a:	4619      	mov	r1, r3
 800560c:	2200      	movs	r2, #0
 800560e:	f7ff fea3 	bl	8005358 <IOExp_ReadPIN_LEVEL>
 8005612:	60f8      	str	r0, [r7, #12]

	/* port 0 */

	Combi_Switch_IN.low_beam_IN = (port_data[0] & (0x01));
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	f003 0301 	and.w	r3, r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2301      	movne	r3, #1
 8005622:	2300      	moveq	r3, #0
 8005624:	b2da      	uxtb	r2, r3
 8005626:	4b6a      	ldr	r3, [pc, #424]	; (80057d0 <Io_Exp_U24+0x1d8>)
 8005628:	701a      	strb	r2, [r3, #0]

	Combi_Switch_IN.high_beam_IN = ((port_data[0] >> 1) & (0x01));
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	085b      	lsrs	r3, r3, #1
 8005630:	b2db      	uxtb	r3, r3
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf14      	ite	ne
 800563a:	2301      	movne	r3, #1
 800563c:	2300      	moveq	r3, #0
 800563e:	b2da      	uxtb	r2, r3
 8005640:	4b63      	ldr	r3, [pc, #396]	; (80057d0 <Io_Exp_U24+0x1d8>)
 8005642:	705a      	strb	r2, [r3, #1]

	Combi_Switch_IN.pos_light_IN = ((port_data[0] >> 2) & (0x01));
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	089b      	lsrs	r3, r3, #2
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	bf14      	ite	ne
 8005654:	2301      	movne	r3, #1
 8005656:	2300      	moveq	r3, #0
 8005658:	b2da      	uxtb	r2, r3
 800565a:	4b5d      	ldr	r3, [pc, #372]	; (80057d0 <Io_Exp_U24+0x1d8>)
 800565c:	709a      	strb	r2, [r3, #2]

	Combi_Switch_IN.left_indicator_IN = ((port_data[0] >> 3) & 0x01);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	08db      	lsrs	r3, r3, #3
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f003 0301 	and.w	r3, r3, #1
 800566a:	2b00      	cmp	r3, #0
 800566c:	bf14      	ite	ne
 800566e:	2301      	movne	r3, #1
 8005670:	2300      	moveq	r3, #0
 8005672:	b2da      	uxtb	r2, r3
 8005674:	4b56      	ldr	r3, [pc, #344]	; (80057d0 <Io_Exp_U24+0x1d8>)
 8005676:	70da      	strb	r2, [r3, #3]

	Combi_Switch_IN.right_indicator_IN = ((port_data[0] >> 4) & 0x01);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b00      	cmp	r3, #0
 8005686:	bf14      	ite	ne
 8005688:	2301      	movne	r3, #1
 800568a:	2300      	moveq	r3, #0
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b50      	ldr	r3, [pc, #320]	; (80057d0 <Io_Exp_U24+0x1d8>)
 8005690:	711a      	strb	r2, [r3, #4]

	Combi_Switch_IN.hazzard_sw_IN = ((port_data[0] >> 5) & 0x01);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	095b      	lsrs	r3, r3, #5
 8005698:	b2db      	uxtb	r3, r3
 800569a:	f003 0301 	and.w	r3, r3, #1
 800569e:	2b00      	cmp	r3, #0
 80056a0:	bf14      	ite	ne
 80056a2:	2301      	movne	r3, #1
 80056a4:	2300      	moveq	r3, #0
 80056a6:	b2da      	uxtb	r2, r3
 80056a8:	4b49      	ldr	r3, [pc, #292]	; (80057d0 <Io_Exp_U24+0x1d8>)
 80056aa:	715a      	strb	r2, [r3, #5]

	Seat_Switch_IN.seat_belt_d_IN = ((port_data[0] >> 6) & 0x01);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	781b      	ldrb	r3, [r3, #0]
 80056b0:	099b      	lsrs	r3, r3, #6
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf14      	ite	ne
 80056bc:	2301      	movne	r3, #1
 80056be:	2300      	moveq	r3, #0
 80056c0:	b2da      	uxtb	r2, r3
 80056c2:	4b44      	ldr	r3, [pc, #272]	; (80057d4 <Io_Exp_U24+0x1dc>)
 80056c4:	701a      	strb	r2, [r3, #0]

	Seat_Switch_IN.seat_belt_p_IN = ((port_data[0] >> 7) & 0x01);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	09db      	lsrs	r3, r3, #7
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	f003 0301 	and.w	r3, r3, #1
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	bf14      	ite	ne
 80056d6:	2301      	movne	r3, #1
 80056d8:	2300      	moveq	r3, #0
 80056da:	b2da      	uxtb	r2, r3
 80056dc:	4b3d      	ldr	r3, [pc, #244]	; (80057d4 <Io_Exp_U24+0x1dc>)
 80056de:	705a      	strb	r2, [r3, #1]
	/*    ***********************************************************   */

	/* port 1 */


	Seat_Switch_IN.seat_occup_p_IN = (port_data[1] & (0x01));
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	3301      	adds	r3, #1
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	f003 0301 	and.w	r3, r3, #1
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	4b37      	ldr	r3, [pc, #220]	; (80057d4 <Io_Exp_U24+0x1dc>)
 80056f6:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.door_lock_IN = ((port_data[1] >> 1) & (0x01));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	3301      	adds	r3, #1
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	085b      	lsrs	r3, r3, #1
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b00      	cmp	r3, #0
 8005708:	bf14      	ite	ne
 800570a:	2301      	movne	r3, #1
 800570c:	2300      	moveq	r3, #0
 800570e:	b2da      	uxtb	r2, r3
 8005710:	4b31      	ldr	r3, [pc, #196]	; (80057d8 <Io_Exp_U24+0x1e0>)
 8005712:	701a      	strb	r2, [r3, #0]

	Door_Switch_IN.driver_door_IN = ((port_data[1] >> 2) & (0x01));
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	3301      	adds	r3, #1
 8005718:	781b      	ldrb	r3, [r3, #0]
 800571a:	089b      	lsrs	r3, r3, #2
 800571c:	b2db      	uxtb	r3, r3
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf14      	ite	ne
 8005726:	2301      	movne	r3, #1
 8005728:	2300      	moveq	r3, #0
 800572a:	b2da      	uxtb	r2, r3
 800572c:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <Io_Exp_U24+0x1e0>)
 800572e:	705a      	strb	r2, [r3, #1]

	Door_Switch_IN.passenger_door_IN = ((port_data[1] >> 3) & 0x01);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	3301      	adds	r3, #1
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	08db      	lsrs	r3, r3, #3
 8005738:	b2db      	uxtb	r3, r3
 800573a:	f003 0301 	and.w	r3, r3, #1
 800573e:	2b00      	cmp	r3, #0
 8005740:	bf14      	ite	ne
 8005742:	2301      	movne	r3, #1
 8005744:	2300      	moveq	r3, #0
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b23      	ldr	r3, [pc, #140]	; (80057d8 <Io_Exp_U24+0x1e0>)
 800574a:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.passenger_2r_IN = ((port_data[1] >> 4) & 0x01);
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	3301      	adds	r3, #1
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	091b      	lsrs	r3, r3, #4
 8005754:	b2db      	uxtb	r3, r3
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	bf14      	ite	ne
 800575e:	2301      	movne	r3, #1
 8005760:	2300      	moveq	r3, #0
 8005762:	b2da      	uxtb	r2, r3
 8005764:	4b1c      	ldr	r3, [pc, #112]	; (80057d8 <Io_Exp_U24+0x1e0>)
 8005766:	711a      	strb	r2, [r3, #4]

	Door_Switch_IN.bonnet_IN = ((port_data[1] >> 5) & 0x01);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	3301      	adds	r3, #1
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	095b      	lsrs	r3, r3, #5
 8005770:	b2db      	uxtb	r3, r3
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	bf14      	ite	ne
 800577a:	2301      	movne	r3, #1
 800577c:	2300      	moveq	r3, #0
 800577e:	b2da      	uxtb	r2, r3
 8005780:	4b15      	ldr	r3, [pc, #84]	; (80057d8 <Io_Exp_U24+0x1e0>)
 8005782:	719a      	strb	r2, [r3, #6]

	Door_Switch_IN.hatch_IN = ((port_data[1] >> 6) & 0x01);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	3301      	adds	r3, #1
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	099b      	lsrs	r3, r3, #6
 800578c:	b2db      	uxtb	r3, r3
 800578e:	f003 0301 	and.w	r3, r3, #1
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2da      	uxtb	r2, r3
 800579c:	4b0e      	ldr	r3, [pc, #56]	; (80057d8 <Io_Exp_U24+0x1e0>)
 800579e:	715a      	strb	r2, [r3, #5]

	Door_Switch_IN.passenger_2l_IN = ((port_data[1] >> 7) & 0x01);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	09db      	lsrs	r3, r3, #7
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf14      	ite	ne
 80057b2:	2301      	movne	r3, #1
 80057b4:	2300      	moveq	r3, #0
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	4b07      	ldr	r3, [pc, #28]	; (80057d8 <Io_Exp_U24+0x1e0>)
 80057ba:	70da      	strb	r2, [r3, #3]

	char str[] = "exit U24";
 80057bc:	4a07      	ldr	r2, [pc, #28]	; (80057dc <Io_Exp_U24+0x1e4>)
 80057be:	463b      	mov	r3, r7
 80057c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80057c2:	c303      	stmia	r3!, {r0, r1}
 80057c4:	701a      	strb	r2, [r3, #0]
//	uart_debugg(str);

}
 80057c6:	3710      	adds	r7, #16
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	1ffe8a5c 	.word	0x1ffe8a5c
 80057d0:	1fff48e8 	.word	0x1fff48e8
 80057d4:	1fff4828 	.word	0x1fff4828
 80057d8:	1fff48fc 	.word	0x1fff48fc
 80057dc:	08013518 	.word	0x08013518

080057e0 <Io_Exp_U25>:

void Io_Exp_U25(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b082      	sub	sp, #8
 80057e4:	af00      	add	r7, sp, #0

	//uart_debugg("in U25");

	uint8_t *port_data = NULL, IOExp_Address = 0x42;
 80057e6:	2300      	movs	r3, #0
 80057e8:	607b      	str	r3, [r7, #4]
 80057ea:	2342      	movs	r3, #66	; 0x42
 80057ec:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	4824      	ldr	r0, [pc, #144]	; (8005884 <Io_Exp_U25+0xa4>)
 80057f2:	4619      	mov	r1, r3
 80057f4:	2200      	movs	r2, #0
 80057f6:	f7ff fdaf 	bl	8005358 <IOExp_ReadPIN_LEVEL>
 80057fa:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.ac_on_in = ((port_data[0] >> 1) & (0x01));
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	781b      	ldrb	r3, [r3, #0]
 8005800:	085b      	lsrs	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	f003 0301 	and.w	r3, r3, #1
 8005808:	2b00      	cmp	r3, #0
 800580a:	bf14      	ite	ne
 800580c:	2301      	movne	r3, #1
 800580e:	2300      	moveq	r3, #0
 8005810:	b2da      	uxtb	r2, r3
 8005812:	4b1d      	ldr	r3, [pc, #116]	; (8005888 <Io_Exp_U25+0xa8>)
 8005814:	739a      	strb	r2, [r3, #14]

	Hvac_IN.blower_speed1_IN = ((port_data[0] >> 2) & (0x01));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	089b      	lsrs	r3, r3, #2
 800581c:	b2db      	uxtb	r3, r3
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	2b00      	cmp	r3, #0
 8005824:	bf14      	ite	ne
 8005826:	2301      	movne	r3, #1
 8005828:	2300      	moveq	r3, #0
 800582a:	b2da      	uxtb	r2, r3
 800582c:	4b17      	ldr	r3, [pc, #92]	; (800588c <Io_Exp_U25+0xac>)
 800582e:	711a      	strb	r2, [r3, #4]

	Hvac_IN.blower_speed2_IN = ((port_data[0] >> 3) & 0x01);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	781b      	ldrb	r3, [r3, #0]
 8005834:	08db      	lsrs	r3, r3, #3
 8005836:	b2db      	uxtb	r3, r3
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	2b00      	cmp	r3, #0
 800583e:	bf14      	ite	ne
 8005840:	2301      	movne	r3, #1
 8005842:	2300      	moveq	r3, #0
 8005844:	b2da      	uxtb	r2, r3
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <Io_Exp_U25+0xac>)
 8005848:	715a      	strb	r2, [r3, #5]

	Hvac_IN.blower_speed3_IN = ((port_data[0] >> 4) & 0x01);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	091b      	lsrs	r3, r3, #4
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0301 	and.w	r3, r3, #1
 8005856:	2b00      	cmp	r3, #0
 8005858:	bf14      	ite	ne
 800585a:	2301      	movne	r3, #1
 800585c:	2300      	moveq	r3, #0
 800585e:	b2da      	uxtb	r2, r3
 8005860:	4b0a      	ldr	r3, [pc, #40]	; (800588c <Io_Exp_U25+0xac>)
 8005862:	719a      	strb	r2, [r3, #6]

	Hvac_IN.circulation_on_off = ((port_data[0] >> 5) & 0x01);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	781b      	ldrb	r3, [r3, #0]
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	b2db      	uxtb	r3, r3
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	bf14      	ite	ne
 8005874:	2301      	movne	r3, #1
 8005876:	2300      	moveq	r3, #0
 8005878:	b2da      	uxtb	r2, r3
 800587a:	4b04      	ldr	r3, [pc, #16]	; (800588c <Io_Exp_U25+0xac>)
 800587c:	721a      	strb	r2, [r3, #8]

	/* port 1 */

//
	//uart_debugg("exit U25");
}
 800587e:	3708      	adds	r7, #8
 8005880:	46bd      	mov	sp, r7
 8005882:	bd80      	pop	{r7, pc}
 8005884:	1ffe8a5c 	.word	0x1ffe8a5c
 8005888:	1fff4888 	.word	0x1fff4888
 800588c:	1fff48a0 	.word	0x1fff48a0

08005890 <Io_Exp_U38>:

void Io_Exp_U38(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
	//uart_debugg("in U38");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 8005896:	2300      	movs	r3, #0
 8005898:	607b      	str	r3, [r7, #4]
 800589a:	2340      	movs	r3, #64	; 0x40
 800589c:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_1, IOExp_Address, 0x00);
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	4824      	ldr	r0, [pc, #144]	; (8005934 <Io_Exp_U38+0xa4>)
 80058a2:	4619      	mov	r1, r3
 80058a4:	2200      	movs	r2, #0
 80058a6:	f7ff fd57 	bl	8005358 <IOExp_ReadPIN_LEVEL>
 80058aa:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.power_window_in_d = ((port_data[0] >> 4) & 0x01);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	091b      	lsrs	r3, r3, #4
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2301      	movne	r3, #1
 80058be:	2300      	moveq	r3, #0
 80058c0:	b2da      	uxtb	r2, r3
 80058c2:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <Io_Exp_U38+0xa8>)
 80058c4:	741a      	strb	r2, [r3, #16]

	Aux_Inputs.AUX_IN4_D = ((port_data[0] >> 5) & 0x01);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	781b      	ldrb	r3, [r3, #0]
 80058ca:	095b      	lsrs	r3, r3, #5
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 0301 	and.w	r3, r3, #1
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	bf14      	ite	ne
 80058d6:	2301      	movne	r3, #1
 80058d8:	2300      	moveq	r3, #0
 80058da:	b2da      	uxtb	r2, r3
 80058dc:	4b17      	ldr	r3, [pc, #92]	; (800593c <Io_Exp_U38+0xac>)
 80058de:	709a      	strb	r2, [r3, #2]

	Aux_Inputs.AUX_IN5_D = ((port_data[0] >> 6) & 0x01);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	099b      	lsrs	r3, r3, #6
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	f003 0301 	and.w	r3, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	bf14      	ite	ne
 80058f0:	2301      	movne	r3, #1
 80058f2:	2300      	moveq	r3, #0
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <Io_Exp_U38+0xac>)
 80058f8:	70da      	strb	r2, [r3, #3]

	Switch_Ios_IN.orvm_fold_IN = ((port_data[0] >> 7) & 0x01);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	09db      	lsrs	r3, r3, #7
 8005900:	b2db      	uxtb	r3, r3
 8005902:	f003 0301 	and.w	r3, r3, #1
 8005906:	2b00      	cmp	r3, #0
 8005908:	bf14      	ite	ne
 800590a:	2301      	movne	r3, #1
 800590c:	2300      	moveq	r3, #0
 800590e:	b2da      	uxtb	r2, r3
 8005910:	4b09      	ldr	r3, [pc, #36]	; (8005938 <Io_Exp_U38+0xa8>)
 8005912:	709a      	strb	r2, [r3, #2]

	/*    ***********************************************************   */

	/* port 1 */

	Switch_Ios_IN.orvm_open_IN = (port_data[1] & (0x01));
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3301      	adds	r3, #1
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 0301 	and.w	r3, r3, #1
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf14      	ite	ne
 8005922:	2301      	movne	r3, #1
 8005924:	2300      	moveq	r3, #0
 8005926:	b2da      	uxtb	r2, r3
 8005928:	4b03      	ldr	r3, [pc, #12]	; (8005938 <Io_Exp_U38+0xa8>)
 800592a:	70da      	strb	r2, [r3, #3]

	//uart_debugg("exit U38");

}
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	1ffe8a68 	.word	0x1ffe8a68
 8005938:	1fff4888 	.word	0x1fff4888
 800593c:	1fff4820 	.word	0x1fff4820

08005940 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005950:	78fb      	ldrb	r3, [r7, #3]
 8005952:	fa22 f303 	lsr.w	r3, r2, r3
 8005956:	f003 0301 	and.w	r3, r3, #1
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop

08005968 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	b082      	sub	sp, #8
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	7c1b      	ldrb	r3, [r3, #16]
 8005978:	4610      	mov	r0, r2
 800597a:	4619      	mov	r1, r3
 800597c:	f7ff ffe0 	bl	8005940 <XMC_GPIO_GetInput>
 8005980:	4603      	mov	r3, r0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3708      	adds	r7, #8
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	bf00      	nop

0800598c <State_2_InputCapture>:
 */
#include "InputCapture.h"
#include "Vcu_Config.h"

void State_2_InputCapture(void)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_2_IN)
 8005990:	4b02      	ldr	r3, [pc, #8]	; (800599c <State_2_InputCapture+0x10>)
 8005992:	785b      	ldrb	r3, [r3, #1]
 8005994:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_2_IN))
	{

	}

	Read_State2_inputs();
 8005996:	f000 f803 	bl	80059a0 <Read_State2_inputs>

}
 800599a:	bd80      	pop	{r7, pc}
 800599c:	1fff5168 	.word	0x1fff5168

080059a0 <Read_State2_inputs>:
void Read_State2_inputs(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 80059a4:	481b      	ldr	r0, [pc, #108]	; (8005a14 <Read_State2_inputs+0x74>)
 80059a6:	f7ff ffdf 	bl	8005968 <DIGITAL_IO_GetInput>
 80059aa:	4603      	mov	r3, r0
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	bf14      	ite	ne
 80059b0:	2301      	movne	r3, #1
 80059b2:	2300      	moveq	r3, #0
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <Read_State2_inputs+0x78>)
 80059b8:	749a      	strb	r2, [r3, #18]

	/* gear inputs */
	Switch_Ios_IN.gear_sw1_IN = DIGITAL_IO_GetInput(&GEAR_SW1_IN_D); //Neutral
 80059ba:	4818      	ldr	r0, [pc, #96]	; (8005a1c <Read_State2_inputs+0x7c>)
 80059bc:	f7ff ffd4 	bl	8005968 <DIGITAL_IO_GetInput>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	bf14      	ite	ne
 80059c6:	2301      	movne	r3, #1
 80059c8:	2300      	moveq	r3, #0
 80059ca:	b2da      	uxtb	r2, r3
 80059cc:	4b12      	ldr	r3, [pc, #72]	; (8005a18 <Read_State2_inputs+0x78>)
 80059ce:	725a      	strb	r2, [r3, #9]
	Switch_Ios_IN.gear_sw2_IN = DIGITAL_IO_GetInput(&GEAR_SW2_IN_D); //forward
 80059d0:	4813      	ldr	r0, [pc, #76]	; (8005a20 <Read_State2_inputs+0x80>)
 80059d2:	f7ff ffc9 	bl	8005968 <DIGITAL_IO_GetInput>
 80059d6:	4603      	mov	r3, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	4b0d      	ldr	r3, [pc, #52]	; (8005a18 <Read_State2_inputs+0x78>)
 80059e4:	729a      	strb	r2, [r3, #10]
	Switch_Ios_IN.gear_sw3_IN = DIGITAL_IO_GetInput(&GEAR_SW3_IN_D); //reverse
 80059e6:	480f      	ldr	r0, [pc, #60]	; (8005a24 <Read_State2_inputs+0x84>)
 80059e8:	f7ff ffbe 	bl	8005968 <DIGITAL_IO_GetInput>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	bf14      	ite	ne
 80059f2:	2301      	movne	r3, #1
 80059f4:	2300      	moveq	r3, #0
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	4b07      	ldr	r3, [pc, #28]	; (8005a18 <Read_State2_inputs+0x78>)
 80059fa:	72da      	strb	r2, [r3, #11]
	Switch_Ios_IN.gear_sw4_IN = DIGITAL_IO_GetInput(&GEAR_SW4_IN_D); //parking
 80059fc:	480a      	ldr	r0, [pc, #40]	; (8005a28 <Read_State2_inputs+0x88>)
 80059fe:	f7ff ffb3 	bl	8005968 <DIGITAL_IO_GetInput>
 8005a02:	4603      	mov	r3, r0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	bf14      	ite	ne
 8005a08:	2301      	movne	r3, #1
 8005a0a:	2300      	moveq	r3, #0
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	4b02      	ldr	r3, [pc, #8]	; (8005a18 <Read_State2_inputs+0x78>)
 8005a10:	731a      	strb	r2, [r3, #12]

	/* ig2 Lights */

}
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	08013b98 	.word	0x08013b98
 8005a18:	1fff4888 	.word	0x1fff4888
 8005a1c:	08013bc0 	.word	0x08013bc0
 8005a20:	08013bd4 	.word	0x08013bd4
 8005a24:	08013be8 	.word	0x08013be8
 8005a28:	08013bfc 	.word	0x08013bfc

08005a2c <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8005a3c:	b2db      	uxtb	r3, r3
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	370c      	adds	r7, #12
 8005a42:	46bd      	mov	sp, r7
 8005a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a48:	4770      	bx	lr
 8005a4a:	bf00      	nop

08005a4c <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8005a5c:	b2db      	uxtb	r3, r3
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	370c      	adds	r7, #12
 8005a62:	46bd      	mov	sp, r7
 8005a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	0000      	movs	r0, r0
	...

08005a70 <calculate_temperatre>:
//	CABIN_TEMP_BYTE = 0xDC,//0b11011100,
//	MC_TEMP_BYTE = 0xAC,//0b10101100,
//	BATTERY_TEMP_BYTE = 0xEC//0b11101100
//};
float calculate_temperatre(uint16_t adc_raw)
{
 8005a70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005a74:	b08c      	sub	sp, #48	; 0x30
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	4603      	mov	r3, r0
 8005a7a:	80fb      	strh	r3, [r7, #6]
	float nominal_in_k = 298.15;
 8005a7c:	4b4e      	ldr	r3, [pc, #312]	; (8005bb8 <calculate_temperatre+0x148>)
 8005a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint16_t resolution = 4096;
 8005a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a84:	857b      	strh	r3, [r7, #42]	; 0x2a
	float v_supply = 3.3;
 8005a86:	4b4d      	ldr	r3, [pc, #308]	; (8005bbc <calculate_temperatre+0x14c>)
 8005a88:	627b      	str	r3, [r7, #36]	; 0x24
	uint16_t nomial_r = 10000;
 8005a8a:	f242 7310 	movw	r3, #10000	; 0x2710
 8005a8e:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t beta = 3435;
 8005a90:	f640 536b 	movw	r3, #3435	; 0xd6b
 8005a94:	843b      	strh	r3, [r7, #32]
	float v_ref = 2.5;
 8005a96:	4b4a      	ldr	r3, [pc, #296]	; (8005bc0 <calculate_temperatre+0x150>)
 8005a98:	61fb      	str	r3, [r7, #28]

	float vout = adc_raw * (v_ref/resolution); //25 in c = 298.15 in K
 8005a9a:	88fb      	ldrh	r3, [r7, #6]
 8005a9c:	ee07 3a90 	vmov	s15, r3
 8005aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005aa6:	ee07 3a90 	vmov	s15, r3
 8005aaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005aae:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ab2:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8005ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005aba:	edc7 7a06 	vstr	s15, [r7, #24]
	float rt = nomial_r * ((v_supply / vout) - 1);
 8005abe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005ac0:	ee07 3a90 	vmov	s15, r3
 8005ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ac8:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 8005acc:	edd7 7a06 	vldr	s15, [r7, #24]
 8005ad0:	eec6 7aa7 	vdiv.f32	s15, s13, s15
 8005ad4:	eef7 6a00 	vmov.f32	s13, #112	; 0x70
 8005ad8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ae0:	edc7 7a05 	vstr	s15, [r7, #20]
	float t_in_kel = (1 / nominal_in_k) + (1 / (beta * (log(nomial_r/rt))));
 8005ae4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005ae8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8005aec:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005af0:	ee17 0a90 	vmov	r0, s15
 8005af4:	f00b fa1c 	bl	8010f30 <__aeabi_f2d>
 8005af8:	4604      	mov	r4, r0
 8005afa:	460d      	mov	r5, r1
 8005afc:	8c3b      	ldrh	r3, [r7, #32]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f00b fa04 	bl	8010f0c <__aeabi_i2d>
 8005b04:	4680      	mov	r8, r0
 8005b06:	4689      	mov	r9, r1
 8005b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b0a:	ee07 3a90 	vmov	s15, r3
 8005b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b12:	edd7 7a05 	vldr	s15, [r7, #20]
 8005b16:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b1a:	ee17 0a90 	vmov	r0, s15
 8005b1e:	f00b fa07 	bl	8010f30 <__aeabi_f2d>
 8005b22:	4602      	mov	r2, r0
 8005b24:	460b      	mov	r3, r1
 8005b26:	4610      	mov	r0, r2
 8005b28:	4619      	mov	r1, r3
 8005b2a:	f00a fdff 	bl	801072c <log>
 8005b2e:	4602      	mov	r2, r0
 8005b30:	460b      	mov	r3, r1
 8005b32:	4640      	mov	r0, r8
 8005b34:	4649      	mov	r1, r9
 8005b36:	f00b fa4f 	bl	8010fd8 <__aeabi_dmul>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	460b      	mov	r3, r1
 8005b3e:	f04f 0000 	mov.w	r0, #0
 8005b42:	4920      	ldr	r1, [pc, #128]	; (8005bc4 <calculate_temperatre+0x154>)
 8005b44:	f00b fb72 	bl	801122c <__aeabi_ddiv>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4620      	mov	r0, r4
 8005b4e:	4629      	mov	r1, r5
 8005b50:	f00b f890 	bl	8010c74 <__adddf3>
 8005b54:	4602      	mov	r2, r0
 8005b56:	460b      	mov	r3, r1
 8005b58:	4610      	mov	r0, r2
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	f00b fd1e 	bl	801159c <__aeabi_d2f>
 8005b60:	4603      	mov	r3, r0
 8005b62:	613b      	str	r3, [r7, #16]
	t_in_kel = 1 / t_in_kel;
 8005b64:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005b68:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b6c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b70:	edc7 7a04 	vstr	s15, [r7, #16]
	float t_in_cel = t_in_kel - 273.15;
 8005b74:	6938      	ldr	r0, [r7, #16]
 8005b76:	f00b f9db 	bl	8010f30 <__aeabi_f2d>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	4610      	mov	r0, r2
 8005b80:	4619      	mov	r1, r3
 8005b82:	a30b      	add	r3, pc, #44	; (adr r3, 8005bb0 <calculate_temperatre+0x140>)
 8005b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b88:	f00b f872 	bl	8010c70 <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	4610      	mov	r0, r2
 8005b92:	4619      	mov	r1, r3
 8005b94:	f00b fd02 	bl	801159c <__aeabi_d2f>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	60fb      	str	r3, [r7, #12]
	cabin_temp = t_in_cel;
 8005b9c:	4a0a      	ldr	r2, [pc, #40]	; (8005bc8 <calculate_temperatre+0x158>)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	6013      	str	r3, [r2, #0]
	return cabin_temp;
 8005ba2:	4b09      	ldr	r3, [pc, #36]	; (8005bc8 <calculate_temperatre+0x158>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3730      	adds	r7, #48	; 0x30
 8005baa:	46bd      	mov	sp, r7
 8005bac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005bb0:	66666666 	.word	0x66666666
 8005bb4:	40711266 	.word	0x40711266
 8005bb8:	43951333 	.word	0x43951333
 8005bbc:	40533333 	.word	0x40533333
 8005bc0:	40200000 	.word	0x40200000
 8005bc4:	3ff00000 	.word	0x3ff00000
 8005bc8:	1fff440c 	.word	0x1fff440c
 8005bcc:	f3af 8000 	nop.w

08005bd0 <U18_read_temp>:

void U18_read_temp(void)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
	uart_debugg("in temp");
 8005bd4:	4805      	ldr	r0, [pc, #20]	; (8005bec <U18_read_temp+0x1c>)
 8005bd6:	f00a fb09 	bl	80101ec <uart_debugg>
	U18_MotorTemp_read();
 8005bda:	f000 f80b 	bl	8005bf4 <U18_MotorTemp_read>
	U18_CabinTemp_read();
 8005bde:	f000 f8dd 	bl	8005d9c <U18_CabinTemp_read>

//	ambient_temp = U18_read_channel(MOTOR_TEMP_BYTE); //test this //not working
	//U18_McTemp_read();
	//U18_BatteryTemp_read();
	//U18_throttle_read();
	uart_debugg("exit temp");
 8005be2:	4803      	ldr	r0, [pc, #12]	; (8005bf0 <U18_read_temp+0x20>)
 8005be4:	f00a fb02 	bl	80101ec <uart_debugg>
}
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	08013524 	.word	0x08013524
 8005bf0:	0801352c 	.word	0x0801352c

08005bf4 <U18_MotorTemp_read>:
	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);

	//rx_buff &= 0x0fff;
}
void U18_MotorTemp_read(void)
{
 8005bf4:	b590      	push	{r4, r7, lr}
 8005bf6:	b08f      	sub	sp, #60	; 0x3c
 8005bf8:	af04      	add	r7, sp, #16
	/*bool start = true, stop = true;
	uint8_t command_byte= 0x1f;
	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U38_address, &command_byte, 1, stop);
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));*/

	bool start = true, stop = 0, ack = true;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c00:	2300      	movs	r3, #0
 8005c02:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005c06:	2301      	movs	r3, #1
 8005c08:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float ans = 0, Resistance = 0;
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	623b      	str	r3, [r7, #32]
 8005c12:	f04f 0300 	mov.w	r3, #0
 8005c16:	61fb      	str	r3, [r7, #28]
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 8005c18:	f242 7310 	movw	r3, #10000	; 0x2710
 8005c1c:	61bb      	str	r3, [r7, #24]
 8005c1e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005c22:	617b      	str	r3, [r7, #20]
 8005c24:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005c28:	613b      	str	r3, [r7, #16]
 8005c2a:	2319      	movs	r3, #25
 8005c2c:	60fb      	str	r3, [r7, #12]
	uint8_t command_byte= 0x9f, rx_buff[2] = {0};
 8005c2e:	239f      	movs	r3, #159	; 0x9f
 8005c30:	70fb      	strb	r3, [r7, #3]
 8005c32:	2300      	movs	r3, #0
 8005c34:	803b      	strh	r3, [r7, #0]
	uint16_t rx = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	817b      	strh	r3, [r7, #10]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 8005c3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c3e:	1cfc      	adds	r4, r7, #3
 8005c40:	2301      	movs	r3, #1
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c48:	9301      	str	r3, [sp, #4]
 8005c4a:	484e      	ldr	r0, [pc, #312]	; (8005d84 <U18_MotorTemp_read+0x190>)
 8005c4c:	4611      	mov	r1, r2
 8005c4e:	2294      	movs	r2, #148	; 0x94
 8005c50:	4623      	mov	r3, r4
 8005c52:	f002 fa0f 	bl	8008074 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005c56:	bf00      	nop
 8005c58:	484a      	ldr	r0, [pc, #296]	; (8005d84 <U18_MotorTemp_read+0x190>)
 8005c5a:	f7ff fee7 	bl	8005a2c <I2C_MASTER_IsTxBusy>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f9      	bne.n	8005c58 <U18_MotorTemp_read+0x64>

	stop = true;
 8005c64:	2301      	movs	r3, #1
 8005c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005c6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005c6e:	463c      	mov	r4, r7
 8005c70:	2302      	movs	r3, #2
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005c78:	9301      	str	r3, [sp, #4]
 8005c7a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005c7e:	9302      	str	r3, [sp, #8]
 8005c80:	4840      	ldr	r0, [pc, #256]	; (8005d84 <U18_MotorTemp_read+0x190>)
 8005c82:	4611      	mov	r1, r2
 8005c84:	2294      	movs	r2, #148	; 0x94
 8005c86:	4623      	mov	r3, r4
 8005c88:	f002 fa1e 	bl	80080c8 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005c8c:	bf00      	nop
 8005c8e:	483d      	ldr	r0, [pc, #244]	; (8005d84 <U18_MotorTemp_read+0x190>)
 8005c90:	f7ff fedc 	bl	8005a4c <I2C_MASTER_IsRxBusy>
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f9      	bne.n	8005c8e <U18_MotorTemp_read+0x9a>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005c9a:	783b      	ldrb	r3, [r7, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	787b      	ldrb	r3, [r7, #1]
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	b29b      	uxth	r3, r3
 8005ca8:	817b      	strh	r3, [r7, #10]
	rx &= 0x0fff;
 8005caa:	897b      	ldrh	r3, [r7, #10]
 8005cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cb0:	817b      	strh	r3, [r7, #10]

	Resistance = ((float)4095.0/(float)rx) - 1;
 8005cb2:	897b      	ldrh	r3, [r7, #10]
 8005cb4:	ee07 3a90 	vmov	s15, r3
 8005cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005cbc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005d88 <U18_MotorTemp_read+0x194>
 8005cc0:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005cc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005cc8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ccc:	edc7 7a07 	vstr	s15, [r7, #28]
	Resistance = ((float)10000.0/(float)Resistance);
 8005cd0:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8005d8c <U18_MotorTemp_read+0x198>
 8005cd4:	edd7 7a07 	vldr	s15, [r7, #28]
 8005cd8:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005cdc:	edc7 7a07 	vstr	s15, [r7, #28]

	Resistance /= (float)2;
 8005ce0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ce4:	eeb0 7a00 	vmov.f32	s14, #0
 8005ce8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005cec:	edc7 7a07 	vstr	s15, [r7, #28]

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005cf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005cf4:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8005d8c <U18_MotorTemp_read+0x198>
 8005cf8:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005cfc:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f00b f915 	bl	8010f30 <__aeabi_f2d>
 8005d06:	4602      	mov	r2, r0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f00a fd0d 	bl	801072c <log>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4610      	mov	r0, r2
 8005d18:	4619      	mov	r1, r3
 8005d1a:	f00b fc3f 	bl	801159c <__aeabi_d2f>
 8005d1e:	4603      	mov	r3, r0
 8005d20:	607b      	str	r3, [r7, #4]
	steinhart /= (float)3950.0;
 8005d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d26:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005d90 <U18_MotorTemp_read+0x19c>
 8005d2a:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005d2e:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	ee07 3a90 	vmov	s15, r3
 8005d38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d3c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005d94 <U18_MotorTemp_read+0x1a0>
 8005d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005d44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005d48:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005d4c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d54:	edc7 7a01 	vstr	s15, [r7, #4]

	steinhart = (float)1.0 / steinhart;
 8005d58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005d5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d60:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005d64:	edc7 7a01 	vstr	s15, [r7, #4]
	ambient_temp =	steinhart -= (float)273.15;
 8005d68:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d6c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8005d94 <U18_MotorTemp_read+0x1a0>
 8005d70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d74:	edc7 7a01 	vstr	s15, [r7, #4]
 8005d78:	4a07      	ldr	r2, [pc, #28]	; (8005d98 <U18_MotorTemp_read+0x1a4>)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6013      	str	r3, [r2, #0]
}
 8005d7e:	372c      	adds	r7, #44	; 0x2c
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd90      	pop	{r4, r7, pc}
 8005d84:	1ffe8a68 	.word	0x1ffe8a68
 8005d88:	457ff000 	.word	0x457ff000
 8005d8c:	461c4000 	.word	0x461c4000
 8005d90:	4576e000 	.word	0x4576e000
 8005d94:	43889333 	.word	0x43889333
 8005d98:	1fff4408 	.word	0x1fff4408

08005d9c <U18_CabinTemp_read>:

void U18_CabinTemp_read(void)
{
 8005d9c:	b590      	push	{r4, r7, lr}
 8005d9e:	b08f      	sub	sp, #60	; 0x3c
 8005da0:	af04      	add	r7, sp, #16
	bool start = true, stop = 0, ack = true;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float ans = 0, Resistance = 0;
 8005db4:	f04f 0300 	mov.w	r3, #0
 8005db8:	623b      	str	r3, [r7, #32]
 8005dba:	f04f 0300 	mov.w	r3, #0
 8005dbe:	61fb      	str	r3, [r7, #28]
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 8005dc0:	f242 7310 	movw	r3, #10000	; 0x2710
 8005dc4:	61bb      	str	r3, [r7, #24]
 8005dc6:	f242 7310 	movw	r3, #10000	; 0x2710
 8005dca:	617b      	str	r3, [r7, #20]
 8005dcc:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005dd0:	613b      	str	r3, [r7, #16]
 8005dd2:	2319      	movs	r3, #25
 8005dd4:	60fb      	str	r3, [r7, #12]
	uint8_t command_byte= 0xdc, rx_buff[2] = {0};
 8005dd6:	23dc      	movs	r3, #220	; 0xdc
 8005dd8:	70fb      	strb	r3, [r7, #3]
 8005dda:	2300      	movs	r3, #0
 8005ddc:	803b      	strh	r3, [r7, #0]
	uint16_t rx = 0;
 8005dde:	2300      	movs	r3, #0
 8005de0:	817b      	strh	r3, [r7, #10]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 8005de2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005de6:	1cfc      	adds	r4, r7, #3
 8005de8:	2301      	movs	r3, #1
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005df0:	9301      	str	r3, [sp, #4]
 8005df2:	4852      	ldr	r0, [pc, #328]	; (8005f3c <U18_CabinTemp_read+0x1a0>)
 8005df4:	4611      	mov	r1, r2
 8005df6:	2294      	movs	r2, #148	; 0x94
 8005df8:	4623      	mov	r3, r4
 8005dfa:	f002 f93b 	bl	8008074 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005dfe:	bf00      	nop
 8005e00:	484e      	ldr	r0, [pc, #312]	; (8005f3c <U18_CabinTemp_read+0x1a0>)
 8005e02:	f7ff fe13 	bl	8005a2c <I2C_MASTER_IsTxBusy>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f9      	bne.n	8005e00 <U18_CabinTemp_read+0x64>

	stop = true;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005e12:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005e16:	463c      	mov	r4, r7
 8005e18:	2302      	movs	r3, #2
 8005e1a:	9300      	str	r3, [sp, #0]
 8005e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e20:	9301      	str	r3, [sp, #4]
 8005e22:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005e26:	9302      	str	r3, [sp, #8]
 8005e28:	4844      	ldr	r0, [pc, #272]	; (8005f3c <U18_CabinTemp_read+0x1a0>)
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	2294      	movs	r2, #148	; 0x94
 8005e2e:	4623      	mov	r3, r4
 8005e30:	f002 f94a 	bl	80080c8 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005e34:	bf00      	nop
 8005e36:	4841      	ldr	r0, [pc, #260]	; (8005f3c <U18_CabinTemp_read+0x1a0>)
 8005e38:	f7ff fe08 	bl	8005a4c <I2C_MASTER_IsRxBusy>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1f9      	bne.n	8005e36 <U18_CabinTemp_read+0x9a>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005e42:	783b      	ldrb	r3, [r7, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	b29a      	uxth	r2, r3
 8005e48:	787b      	ldrb	r3, [r7, #1]
 8005e4a:	b29b      	uxth	r3, r3
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	817b      	strh	r3, [r7, #10]
	rx &= 0x0fff;
 8005e52:	897b      	ldrh	r3, [r7, #10]
 8005e54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e58:	817b      	strh	r3, [r7, #10]

	cabin_temp = calculate_temperatre(rx);
 8005e5a:	897b      	ldrh	r3, [r7, #10]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fe07 	bl	8005a70 <calculate_temperatre>
 8005e62:	4602      	mov	r2, r0
 8005e64:	4b36      	ldr	r3, [pc, #216]	; (8005f40 <U18_CabinTemp_read+0x1a4>)
 8005e66:	601a      	str	r2, [r3, #0]

	Resistance = ((float)4095.0/(float)rx) - 1;
 8005e68:	897b      	ldrh	r3, [r7, #10]
 8005e6a:	ee07 3a90 	vmov	s15, r3
 8005e6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e72:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005f44 <U18_CabinTemp_read+0x1a8>
 8005e76:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005e7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005e7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e82:	edc7 7a07 	vstr	s15, [r7, #28]
	Resistance = ((float)10000.0/(float)Resistance);
 8005e86:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005f48 <U18_CabinTemp_read+0x1ac>
 8005e8a:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e8e:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005e92:	edc7 7a07 	vstr	s15, [r7, #28]

	Resistance /= (float)2;
 8005e96:	edd7 7a07 	vldr	s15, [r7, #28]
 8005e9a:	eeb0 7a00 	vmov.f32	s14, #0
 8005e9e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005ea6:	edd7 7a07 	vldr	s15, [r7, #28]
 8005eaa:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8005f48 <U18_CabinTemp_read+0x1ac>
 8005eae:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005eb2:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f00b f83a 	bl	8010f30 <__aeabi_f2d>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4610      	mov	r0, r2
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	f00a fc32 	bl	801072c <log>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	460b      	mov	r3, r1
 8005ecc:	4610      	mov	r0, r2
 8005ece:	4619      	mov	r1, r3
 8005ed0:	f00b fb64 	bl	801159c <__aeabi_d2f>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	607b      	str	r3, [r7, #4]
	steinhart /= (float)3950.0;
 8005ed8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005edc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005f4c <U18_CabinTemp_read+0x1b0>
 8005ee0:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005ee4:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	ee07 3a90 	vmov	s15, r3
 8005eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ef2:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8005f50 <U18_CabinTemp_read+0x1b4>
 8005ef6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005efa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005efe:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005f02:	ed97 7a01 	vldr	s14, [r7, #4]
 8005f06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f0a:	edc7 7a01 	vstr	s15, [r7, #4]

	steinhart = (float)1.0 / steinhart;
 8005f0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005f12:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f16:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005f1a:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart -= (float)273.15;
 8005f1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005f22:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8005f50 <U18_CabinTemp_read+0x1b4>
 8005f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f2a:	edc7 7a01 	vstr	s15, [r7, #4]
	cabin_temp = steinhart;
 8005f2e:	4a04      	ldr	r2, [pc, #16]	; (8005f40 <U18_CabinTemp_read+0x1a4>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6013      	str	r3, [r2, #0]
}
 8005f34:	372c      	adds	r7, #44	; 0x2c
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd90      	pop	{r4, r7, pc}
 8005f3a:	bf00      	nop
 8005f3c:	1ffe8a68 	.word	0x1ffe8a68
 8005f40:	1fff440c 	.word	0x1fff440c
 8005f44:	457ff000 	.word	0x457ff000
 8005f48:	461c4000 	.word	0x461c4000
 8005f4c:	4576e000 	.word	0x4576e000
 8005f50:	43889333 	.word	0x43889333

08005f54 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	791b      	ldrb	r3, [r3, #4]
 8005f64:	f083 0301 	eor.w	r3, r3, #1
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00f      	beq.n	8005f8e <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f812 	bl	8005f98 <WATCHDOG_lPrewarning_Configure>
 8005f74:	4603      	mov	r3, r0
 8005f76:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8005f78:	7bfb      	ldrb	r3, [r7, #15]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d007      	beq.n	8005f8e <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4618      	mov	r0, r3
 8005f84:	f7ff f83e 	bl	8005004 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3710      	adds	r7, #16
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}

08005f98 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b084      	sub	sp, #16
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005fa4:	2001      	movs	r0, #1
 8005fa6:	f7fc f98f 	bl	80022c8 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005faa:	2001      	movs	r0, #1
 8005fac:	f7fc fa34 	bl	8002418 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop

08005fbc <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b083      	sub	sp, #12
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005fca:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8005fce:	370c      	adds	r7, #12
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005fe6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	bf14      	ite	ne
 8005fee:	2301      	movne	r3, #1
 8005ff0:	2300      	moveq	r3, #0
 8005ff2:	b2db      	uxtb	r3, r3
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	370c      	adds	r7, #12
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8006000:	b480      	push	{r7}
 8006002:	b083      	sub	sp, #12
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800600e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006012:	2b00      	cmp	r3, #0
 8006014:	bf14      	ite	ne
 8006016:	2301      	movne	r3, #1
 8006018:	2300      	moveq	r3, #0
 800601a:	b2db      	uxtb	r3, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8006030:	2300      	movs	r3, #0
 8006032:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	4798      	blx	r3
 800603c:	4603      	mov	r3, r0
 800603e:	73fb      	strb	r3, [r7, #15]

  return status;
 8006040:	7bfb      	ldrb	r3, [r7, #15]
}
 8006042:	4618      	mov	r0, r3
 8006044:	3710      	adds	r7, #16
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop

0800604c <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	60b9      	str	r1, [r7, #8]
 8006056:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8006058:	2304      	movs	r3, #4
 800605a:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006064:	2b02      	cmp	r3, #2
 8006066:	d000      	beq.n	800606a <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8006068:	e007      	b.n	800607a <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	68b9      	ldr	r1, [r7, #8]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	f000 f808 	bl	8006084 <UART_lStartTransmitPolling>
 8006074:	4603      	mov	r3, r0
 8006076:	75fb      	strb	r3, [r7, #23]
    break;
 8006078:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 800607a:	7dfb      	ldrb	r3, [r7, #23]
}
 800607c:	4618      	mov	r0, r3
 800607e:	3718      	adds	r7, #24
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}

08006084 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b086      	sub	sp, #24
 8006088:	af00      	add	r7, sp, #0
 800608a:	60f8      	str	r0, [r7, #12]
 800608c:	60b9      	str	r1, [r7, #8]
 800608e:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8006090:	2303      	movs	r3, #3
 8006092:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d058      	beq.n	800614c <UART_lStartTransmitPolling+0xc8>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d055      	beq.n	800614c <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 80060a0:	2302      	movs	r3, #2
 80060a2:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	7e1b      	ldrb	r3, [r3, #24]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f083 0301 	eor.w	r3, r3, #1
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d04a      	beq.n	800614c <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2201      	movs	r2, #1
 80060bc:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff ff74 	bl	8005fbc <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 80060d4:	2300      	movs	r3, #0
 80060d6:	613b      	str	r3, [r7, #16]
 80060d8:	e01c      	b.n	8006114 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 80060e6:	bf00      	nop
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f7ff ff73 	bl	8005fd8 <XMC_USIC_CH_TXFIFO_IsFull>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d1f7      	bne.n	80060e8 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6819      	ldr	r1, [r3, #0]
 80060fc:	68ba      	ldr	r2, [r7, #8]
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4413      	add	r3, r2
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	b29b      	uxth	r3, r3
 8006106:	4608      	mov	r0, r1
 8006108:	4619      	mov	r1, r3
 800610a:	f7fe fd21 	bl	8004b50 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	3301      	adds	r3, #1
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d3de      	bcc.n	80060da <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8006128:	bf00      	nop
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4618      	mov	r0, r3
 8006130:	f7ff ff66 	bl	8006000 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8006134:	4603      	mov	r3, r0
 8006136:	f083 0301 	eor.w	r3, r3, #1
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b00      	cmp	r3, #0
 800613e:	d1f4      	bne.n	800612a <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8006140:	2300      	movs	r3, #0
 8006142:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2200      	movs	r2, #0
 800614a:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	460b      	mov	r3, r1
 8006162:	70fb      	strb	r3, [r7, #3]
 8006164:	4613      	mov	r3, r2
 8006166:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8006168:	78f8      	ldrb	r0, [r7, #3]
 800616a:	78fb      	ldrb	r3, [r7, #3]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	3306      	adds	r3, #6
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800617a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800617c:	431a      	orrs	r2, r3
 800617e:	6879      	ldr	r1, [r7, #4]
 8006180:	1d83      	adds	r3, r0, #6
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	440b      	add	r3, r1
 8006186:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop

08006194 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b082      	sub	sp, #8
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f7fe fc6a 	bl	8004a7c <XMC_UART_CH_InitEx>
}
 80061a8:	3708      	adds	r7, #8
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop

080061b0 <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061bc:	f023 030f 	bic.w	r3, r3, #15
 80061c0:	f043 0202 	orr.w	r2, r3, #2
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80061c8:	370c      	adds	r7, #12
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr
 80061d2:	bf00      	nop

080061d4 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 80061da:	2300      	movs	r3, #0
 80061dc:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 15U, &UART_0_rx_pin_config);
 80061de:	4813      	ldr	r0, [pc, #76]	; (800622c <UART_0_init+0x58>)
 80061e0:	210f      	movs	r1, #15
 80061e2:	4a13      	ldr	r2, [pc, #76]	; (8006230 <UART_0_init+0x5c>)
 80061e4:	f7fb ff08 	bl	8001ff8 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 80061e8:	4812      	ldr	r0, [pc, #72]	; (8006234 <UART_0_init+0x60>)
 80061ea:	4913      	ldr	r1, [pc, #76]	; (8006238 <UART_0_init+0x64>)
 80061ec:	f7ff ffd2 	bl	8006194 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
 80061f0:	4810      	ldr	r0, [pc, #64]	; (8006234 <UART_0_init+0x60>)
 80061f2:	2100      	movs	r1, #0
 80061f4:	2202      	movs	r2, #2
 80061f6:	f7ff ffaf 	bl	8006158 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 80061fa:	480e      	ldr	r0, [pc, #56]	; (8006234 <UART_0_init+0x60>)
 80061fc:	2100      	movs	r1, #0
 80061fe:	2206      	movs	r2, #6
 8006200:	233f      	movs	r3, #63	; 0x3f
 8006202:	f7fe fe4b 	bl	8004e9c <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_64WORDS,
        63U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8006206:	480b      	ldr	r0, [pc, #44]	; (8006234 <UART_0_init+0x60>)
 8006208:	f7ff ffd2 	bl	80061b0 <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 800620c:	4807      	ldr	r0, [pc, #28]	; (800622c <UART_0_init+0x58>)
 800620e:	210e      	movs	r1, #14
 8006210:	4a0a      	ldr	r2, [pc, #40]	; (800623c <UART_0_init+0x68>)
 8006212:	f7fb fef1 	bl	8001ff8 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8006216:	4807      	ldr	r0, [pc, #28]	; (8006234 <UART_0_init+0x60>)
 8006218:	2110      	movs	r1, #16
 800621a:	2200      	movs	r2, #0
 800621c:	f7fe fe68 	bl	8004ef0 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8006220:	79fb      	ldrb	r3, [r7, #7]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3708      	adds	r7, #8
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	48028200 	.word	0x48028200
 8006230:	08013584 	.word	0x08013584
 8006234:	48020000 	.word	0x48020000
 8006238:	08013538 	.word	0x08013538
 800623c:	08013544 	.word	0x08013544

08006240 <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 800624c:	78fb      	ldrb	r3, [r7, #3]
 800624e:	2201      	movs	r2, #1
 8006250:	409a      	lsls	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	60da      	str	r2, [r3, #12]
}
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	689b      	ldr	r3, [r3, #8]
 800626c:	f003 0301 	and.w	r3, r3, #1
 8006270:	2b00      	cmp	r3, #0
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
}
 800627a:	4618      	mov	r0, r3
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop

08006288 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2201      	movs	r2, #1
 8006294:	60da      	str	r2, [r3, #12]
}
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	611a      	str	r2, [r3, #16]
}
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	611a      	str	r2, [r3, #16]
}
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80062dc:	887a      	ldrh	r2, [r7, #2]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	635a      	str	r2, [r3, #52]	; 0x34
}
 80062e2:	370c      	adds	r7, #12
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	460b      	mov	r3, r1
 80062f6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 80062f8:	887a      	ldrh	r2, [r7, #2]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006306:	4770      	bx	lr

08006308 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006308:	b480      	push	{r7}
 800630a:	b083      	sub	sp, #12
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	611a      	str	r2, [r3, #16]
}
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop

08006324 <XMC_CCU4_SLICE_EnableEvent>:
 *  XMC_CCU4_SLICE_SetInterruptNode()<BR> XMC_CCU4_SLICE_EnableMultipleEvents()<BR> XMC_CCU4_SLICE_DisableEvent()<BR>
 *  XMC_CCU4_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_EnableEvent(XMC_CCU4_SLICE_t *const slice,
    const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	460b      	mov	r3, r1
 800632e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_EnableEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006336:	78fb      	ldrb	r3, [r7, #3]
 8006338:	2101      	movs	r1, #1
 800633a:	fa01 f303 	lsl.w	r3, r1, r3
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006350:	b480      	push	{r7}
 8006352:	b083      	sub	sp, #12
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	460b      	mov	r3, r1
 800635a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	2201      	movs	r2, #1
 8006360:	409a      	lsls	r2, r3
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop

08006374 <XMC_CCU4_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  return (((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006386:	78fb      	ldrb	r3, [r7, #3]
 8006388:	fa22 f303 	lsr.w	r3, r2, r3
 800638c:	f003 0301 	and.w	r3, r3, #1
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
}
 800639a:	4618      	mov	r0, r3
 800639c:	370c      	adds	r7, #12
 800639e:	46bd      	mov	sp, r7
 80063a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a4:	4770      	bx	lr
 80063a6:	bf00      	nop

080063a8 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b083      	sub	sp, #12
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	460b      	mov	r3, r1
 80063b2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 80063b4:	78fb      	ldrb	r3, [r7, #3]
 80063b6:	2201      	movs	r2, #1
 80063b8:	409a      	lsls	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	60da      	str	r2, [r3, #12]
}
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <XMC_CCU8_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f003 0301 	and.w	r3, r3, #1
 80063d8:	2b00      	cmp	r3, #0
 80063da:	bf14      	ite	ne
 80063dc:	2301      	movne	r3, #1
 80063de:	2300      	moveq	r3, #0
 80063e0:	b2db      	uxtb	r3, r3
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	370c      	adds	r7, #12
 80063e6:	46bd      	mov	sp, r7
 80063e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ec:	4770      	bx	lr
 80063ee:	bf00      	nop

080063f0 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b083      	sub	sp, #12
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	60da      	str	r2, [r3, #12]
}
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	611a      	str	r2, [r3, #16]
}
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2202      	movs	r2, #2
 800642c:	611a      	str	r2, [r3, #16]
}
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	611a      	str	r2, [r3, #16]
}
 8006448:	370c      	adds	r7, #12
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop

08006454 <XMC_CCU8_SLICE_EnableEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_SetInterruptNode()<BR>  XMC_CCU8_SLICE_EnableMultipleEvents()<BR>  XMC_CCU8_SLICE_DisableEvent()<BR>
 *  XMC_CCU8_SLICE_DisableMultipleEvents().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_EnableEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006454:	b480      	push	{r7}
 8006456:	b083      	sub	sp, #12
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	460b      	mov	r3, r1
 800645e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_EnableEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));

  slice->INTE |= ((uint32_t) 1) << ((uint32_t) event);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8006466:	78fb      	ldrb	r3, [r7, #3]
 8006468:	2101      	movs	r1, #1
 800646a:	fa01 f303 	lsl.w	r3, r1, r3
 800646e:	431a      	orrs	r2, r3
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr

08006480 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	460b      	mov	r3, r1
 800648a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 800648c:	78fb      	ldrb	r3, [r7, #3]
 800648e:	2201      	movs	r2, #1
 8006490:	409a      	lsls	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8006498:	370c      	adds	r7, #12
 800649a:	46bd      	mov	sp, r7
 800649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a0:	4770      	bx	lr
 80064a2:	bf00      	nop

080064a4 <XMC_CCU8_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  return (((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80064b6:	78fb      	ldrb	r3, [r7, #3]
 80064b8:	fa22 f303 	lsr.w	r3, r2, r3
 80064bc:	f003 0301 	and.w	r3, r3, #1
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
}
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr
 80064d6:	bf00      	nop

080064d8 <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80064e0:	2300      	movs	r3, #0
 80064e2:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80064ea:	f083 0301 	eor.w	r3, r3, #1
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d013      	beq.n	800651c <TIMER_Init+0x44>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d104      	bne.n	8006508 <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f000 f9ce 	bl	80068a0 <TIMER_CCU4_lInit>
 8006504:	4603      	mov	r3, r0
 8006506:	73fb      	strb	r3, [r7, #15]
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800650e:	2b01      	cmp	r3, #1
 8006510:	d104      	bne.n	800651c <TIMER_Init+0x44>
    {
      /* Configure CCU8 timer for the required time tick settings */
      status = TIMER_CCU8_lInit(handle_ptr);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fa2e 	bl	8006974 <TIMER_CCU8_lInit>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return (status);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop

08006528 <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006536:	2b00      	cmp	r3, #0
 8006538:	d016      	beq.n	8006568 <TIMER_Start+0x40>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	695b      	ldr	r3, [r3, #20]
 8006548:	4618      	mov	r0, r3
 800654a:	f7ff fe9d 	bl	8006288 <XMC_CCU4_SLICE_StartTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006554:	2b01      	cmp	r3, #1
 8006556:	d104      	bne.n	8006562 <TIMER_Start+0x3a>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff ff47 	bl	80063f0 <XMC_CCU8_SLICE_StartTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006562:	2300      	movs	r3, #0
 8006564:	73fb      	strb	r3, [r7, #15]
 8006566:	e001      	b.n	800656c <TIMER_Start+0x44>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800656c:	7bfb      	ldrb	r3, [r7, #15]
}
 800656e:	4618      	mov	r0, r3
 8006570:	3710      	adds	r7, #16
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop

08006578 <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f000 f827 	bl	80065d4 <TIMER_GetTimerStatus>
 8006586:	4603      	mov	r3, r0
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <TIMER_Stop+0x4c>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006592:	2b00      	cmp	r3, #0
 8006594:	d016      	beq.n	80065c4 <TIMER_Stop+0x4c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800659c:	2b00      	cmp	r3, #0
 800659e:	d104      	bne.n	80065aa <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	695b      	ldr	r3, [r3, #20]
 80065a4:	4618      	mov	r0, r3
 80065a6:	f7ff fe7b 	bl	80062a0 <XMC_CCU4_SLICE_StopTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d104      	bne.n	80065be <TIMER_Stop+0x46>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065b8:	4618      	mov	r0, r3
 80065ba:	f7ff ff25 	bl	8006408 <XMC_CCU8_SLICE_StopTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 80065be:	2300      	movs	r3, #0
 80065c0:	73fb      	strb	r3, [r7, #15]
 80065c2:	e001      	b.n	80065c8 <TIMER_Stop+0x50>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 80065c4:	2301      	movs	r3, #1
 80065c6:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 80065c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	3710      	adds	r7, #16
 80065ce:	46bd      	mov	sp, r7
 80065d0:	bd80      	pop	{r7, pc}
 80065d2:	bf00      	nop

080065d4 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b084      	sub	sp, #16
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 80065dc:	2300      	movs	r3, #0
 80065de:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	695b      	ldr	r3, [r3, #20]
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff fe36 	bl	8006260 <XMC_CCU4_SLICE_IsTimerRunning>
 80065f4:	4603      	mov	r3, r0
 80065f6:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d106      	bne.n	8006610 <TIMER_GetTimerStatus+0x3c>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006606:	4618      	mov	r0, r3
 8006608:	f7ff fede 	bl	80063c8 <XMC_CCU8_SLICE_IsTimerRunning>
 800660c:	4603      	mov	r3, r0
 800660e:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 8006610:	7bfb      	ldrb	r3, [r7, #15]
}
 8006612:	4618      	mov	r0, r3
 8006614:	3710      	adds	r7, #16
 8006616:	46bd      	mov	sp, r7
 8006618:	bd80      	pop	{r7, pc}
 800661a:	bf00      	nop
 800661c:	0000      	movs	r0, r0
	...

08006620 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 8006620:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006624:	b087      	sub	sp, #28
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
 800662a:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f7ff ffcf 	bl	80065d4 <TIMER_GetTimerStatus>
 8006636:	4603      	mov	r3, r0
 8006638:	f083 0301 	eor.w	r3, r3, #1
 800663c:	b2db      	uxtb	r3, r3
 800663e:	2b00      	cmp	r3, #0
 8006640:	f000 80de 	beq.w	8006800 <TIMER_SetTimeInterval+0x1e0>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689a      	ldr	r2, [r3, #8]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	429a      	cmp	r2, r3
 800664c:	f200 80d8 	bhi.w	8006800 <TIMER_SetTimeInterval+0x1e0>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	429a      	cmp	r2, r3
 8006658:	f0c0 80d2 	bcc.w	8006800 <TIMER_SetTimeInterval+0x1e0>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 800665c:	2300      	movs	r3, #0
 800665e:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006660:	e002      	b.n	8006668 <TIMER_SetTimeInterval+0x48>
      {
        lprescaler++;
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	3301      	adds	r3, #1
 8006666:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	693a      	ldr	r2, [r7, #16]
 800666e:	f1c2 020f 	rsb	r2, r2, #15
 8006672:	fa23 f202 	lsr.w	r2, r3, r2
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	429a      	cmp	r2, r3
 800667a:	d3f2      	bcc.n	8006662 <TIMER_SetTimeInterval+0x42>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006682:	2b00      	cmp	r3, #0
 8006684:	d15c      	bne.n	8006740 <TIMER_SetTimeInterval+0x120>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69da      	ldr	r2, [r3, #28]
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	b2db      	uxtb	r3, r3
 8006696:	f003 030f 	and.w	r3, r3, #15
 800669a:	b2d9      	uxtb	r1, r3
 800669c:	7913      	ldrb	r3, [r2, #4]
 800669e:	f361 0303 	bfi	r3, r1, #0, #4
 80066a2:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	4618      	mov	r0, r3
 80066a8:	f04f 0100 	mov.w	r1, #0
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	461a      	mov	r2, r3
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	fb02 fe01 	mul.w	lr, r2, r1
 80066b8:	fb00 f603 	mul.w	r6, r0, r3
 80066bc:	4476      	add	r6, lr
 80066be:	fba0 2302 	umull	r2, r3, r0, r2
 80066c2:	18f1      	adds	r1, r6, r3
 80066c4:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 80066c6:	6879      	ldr	r1, [r7, #4]
 80066c8:	69c9      	ldr	r1, [r1, #28]
 80066ca:	7909      	ldrb	r1, [r1, #4]
 80066cc:	f3c1 0103 	ubfx	r1, r1, #0, #4
 80066d0:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80066d2:	f1c1 0620 	rsb	r6, r1, #32
 80066d6:	f1a1 0020 	sub.w	r0, r1, #32
 80066da:	fa22 f801 	lsr.w	r8, r2, r1
 80066de:	fa03 f606 	lsl.w	r6, r3, r6
 80066e2:	ea48 0806 	orr.w	r8, r8, r6
 80066e6:	fa23 f000 	lsr.w	r0, r3, r0
 80066ea:	ea48 0800 	orr.w	r8, r8, r0
 80066ee:	fa23 f901 	lsr.w	r9, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 80066f2:	4640      	mov	r0, r8
 80066f4:	4649      	mov	r1, r9
 80066f6:	a346      	add	r3, pc, #280	; (adr r3, 8006810 <TIMER_SetTimeInterval+0x1f0>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066fc:	f00a ff9e 	bl	801163c <__aeabi_uldivmod>
 8006700:	4602      	mov	r2, r0
 8006702:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006704:	b292      	uxth	r2, r2
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800670e:	2b01      	cmp	r3, #1
 8006710:	d905      	bls.n	800671e <TIMER_SetTimeInterval+0xfe>
        {
          (handle_ptr->period_value)--;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	695a      	ldr	r2, [r3, #20]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	791b      	ldrb	r3, [r3, #4]
 8006728:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800672c:	b2db      	uxtb	r3, r3
 800672e:	4610      	mov	r0, r2
 8006730:	4619      	mov	r1, r3
 8006732:	f7fc ff4b 	bl	80035cc <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	f000 f8fe 	bl	8006938 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 800673c:	2300      	movs	r3, #0
 800673e:	75fb      	strb	r3, [r7, #23]
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006746:	2b01      	cmp	r3, #1
 8006748:	d15a      	bne.n	8006800 <TIMER_SetTimeInterval+0x1e0>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	b2db      	uxtb	r3, r3
 8006752:	f003 030f 	and.w	r3, r3, #15
 8006756:	b2d9      	uxtb	r1, r3
 8006758:	7b13      	ldrb	r3, [r2, #12]
 800675a:	f361 0303 	bfi	r3, r1, #0, #4
 800675e:	7313      	strb	r3, [r2, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	60fb      	str	r3, [r7, #12]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	4618      	mov	r0, r3
 800676c:	f04f 0100 	mov.w	r1, #0
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	461a      	mov	r2, r3
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	fb02 fe01 	mul.w	lr, r2, r1
 800677c:	fb00 f603 	mul.w	r6, r0, r3
 8006780:	4476      	add	r6, lr
 8006782:	fba0 2302 	umull	r2, r3, r0, r2
 8006786:	18f1      	adds	r1, r6, r3
 8006788:	460b      	mov	r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800678e:	7b09      	ldrb	r1, [r1, #12]
 8006790:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006794:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006796:	f1c1 0620 	rsb	r6, r1, #32
 800679a:	f1a1 0020 	sub.w	r0, r1, #32
 800679e:	fa22 f401 	lsr.w	r4, r2, r1
 80067a2:	fa03 f606 	lsl.w	r6, r3, r6
 80067a6:	4334      	orrs	r4, r6
 80067a8:	fa23 f000 	lsr.w	r0, r3, r0
 80067ac:	4304      	orrs	r4, r0
 80067ae:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 80067b2:	4620      	mov	r0, r4
 80067b4:	4629      	mov	r1, r5
 80067b6:	a316      	add	r3, pc, #88	; (adr r3, 8006810 <TIMER_SetTimeInterval+0x1f0>)
 80067b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067bc:	f00a ff3e 	bl	801163c <__aeabi_uldivmod>
 80067c0:	4602      	mov	r2, r0
 80067c2:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80067c4:	b292      	uxth	r2, r2
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d905      	bls.n	80067de <TIMER_SetTimeInterval+0x1be>
        {
          (handle_ptr->period_value)--;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e6:	7b1b      	ldrb	r3, [r3, #12]
 80067e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	4619      	mov	r1, r3
 80067f2:	f7fd f835 	bl	8003860 <XMC_CCU8_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f90a 	bl	8006a10 <TIMER_CCU8_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80067fc:	2300      	movs	r3, #0
 80067fe:	75fb      	strb	r3, [r7, #23]
      }
#endif
    }
  }
  return (status);
 8006800:	7dfb      	ldrb	r3, [r7, #23]
}
 8006802:	4618      	mov	r0, r3
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800680c:	f3af 8000 	nop.w
 8006810:	05f5e100 	.word	0x05f5e100
 8006814:	00000000 	.word	0x00000000

08006818 <TIMER_GetInterruptStatus>:

/*
 * This function reads the timer event(period match interrupt) status of the given timer
 */
bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  bool status;
  XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
  status = false;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800682a:	2b00      	cmp	r3, #0
 800682c:	d107      	bne.n	800683e <TIMER_GetInterruptStatus+0x26>
  {
    /* Reads the interrupt status */
    status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	695b      	ldr	r3, [r3, #20]
 8006832:	4618      	mov	r0, r3
 8006834:	2100      	movs	r1, #0
 8006836:	f7ff fd9d 	bl	8006374 <XMC_CCU4_SLICE_GetEvent>
 800683a:	4603      	mov	r3, r0
 800683c:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006844:	2b01      	cmp	r3, #1
 8006846:	d107      	bne.n	8006858 <TIMER_GetInterruptStatus+0x40>
  {
    /* Reads the interrupt status */
    status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	4618      	mov	r0, r3
 800684e:	2100      	movs	r1, #0
 8006850:	f7ff fe28 	bl	80064a4 <XMC_CCU8_SLICE_GetEvent>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 8006858:	7bfb      	ldrb	r3, [r7, #15]
}
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
 8006862:	bf00      	nop

08006864 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006872:	2b00      	cmp	r3, #0
 8006874:	d105      	bne.n	8006882 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	4618      	mov	r0, r3
 800687c:	2100      	movs	r1, #0
 800687e:	f7ff fd67 	bl	8006350 <XMC_CCU4_SLICE_ClearEvent>
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006888:	2b01      	cmp	r3, #1
 800688a:	d105      	bne.n	8006898 <TIMER_ClearEvent+0x34>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006890:	4618      	mov	r0, r3
 8006892:	2100      	movs	r1, #0
 8006894:	f7ff fdf4 	bl	8006480 <XMC_CCU8_SLICE_ClearEvent>
  }
#endif
}
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop

080068a0 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b084      	sub	sp, #16
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f002 f83b 	bl	8008928 <GLOBAL_CCU4_Init>
 80068b2:	4603      	mov	r3, r0
 80068b4:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	691b      	ldr	r3, [r3, #16]
 80068ba:	689a      	ldr	r2, [r3, #8]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	7e1b      	ldrb	r3, [r3, #24]
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	f7ff fcbc 	bl	8006240 <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	695a      	ldr	r2, [r3, #20]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	4610      	mov	r0, r2
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fc fe44 	bl	8003560 <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f000 f82d 	bl	8006938 <TIMER_CCU4_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d00f      	beq.n	8006908 <TIMER_CCU4_lInit+0x68>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU4_SLICE_SetInterruptNode(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH,
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	695a      	ldr	r2, [r3, #20]
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068f2:	4610      	mov	r0, r2
 80068f4:	2100      	movs	r1, #0
 80068f6:	461a      	mov	r2, r3
 80068f8:	f7fc fe86 	bl	8003608 <XMC_CCU4_SLICE_SetInterruptNode>
                                    handle_ptr->ccu4_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	4618      	mov	r0, r3
 8006902:	2100      	movs	r1, #0
 8006904:	f7ff fd0e 	bl	8006324 <XMC_CCU4_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	695b      	ldr	r3, [r3, #20]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff fcd3 	bl	80062b8 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	2201      	movs	r2, #1
 8006916:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006920:	2b00      	cmp	r3, #0
 8006922:	d004      	beq.n	800692e <TIMER_CCU4_lInit+0x8e>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	4618      	mov	r0, r3
 800692a:	f7ff fcad 	bl	8006288 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 800692e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006930:	4618      	mov	r0, r3
 8006932:	3710      	adds	r7, #16
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006948:	4610      	mov	r0, r2
 800694a:	4619      	mov	r1, r3
 800694c:	f7ff fcc0 	bl	80062d0 <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	695b      	ldr	r3, [r3, #20]
 8006954:	4618      	mov	r0, r3
 8006956:	2100      	movs	r1, #0
 8006958:	f7ff fcc8 	bl	80062ec <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	689a      	ldr	r2, [r3, #8]
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	68db      	ldr	r3, [r3, #12]
 8006966:	4610      	mov	r0, r2
 8006968:	4619      	mov	r1, r3
 800696a:	f7ff fccd 	bl	8006308 <XMC_CCU4_EnableShadowTransfer>
}
 800696e:	3708      	adds	r7, #8
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <TIMER_CCU8_lInit>:
#ifdef TIMER_CCU8_USED
/*
 * This function configures timer ccu8 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006980:	4618      	mov	r0, r3
 8006982:	f001 ffa3 	bl	80088cc <GLOBAL_CCU8_Init>
 8006986:	4603      	mov	r3, r0
 8006988:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800698e:	689a      	ldr	r2, [r3, #8]
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006996:	4610      	mov	r0, r2
 8006998:	4619      	mov	r1, r3
 800699a:	f7ff fd05 	bl	80063a8 <XMC_CCU8_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069a6:	4610      	mov	r0, r2
 80069a8:	4619      	mov	r1, r3
 80069aa:	f7fc ff11 	bl	80037d0 <XMC_CCU8_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f000 f82e 	bl	8006a10 <TIMER_CCU8_lShadowTransfer>

#ifdef  TIMER_INTERRUPT
  if (true == handle_ptr->period_match_enable)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d00f      	beq.n	80069de <TIMER_CCU8_lInit+0x6a>
  {
    /* Binds a period match event to an NVIC node  */
    XMC_CCU8_SLICE_SetInterruptNode(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH,
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80069c8:	4610      	mov	r0, r2
 80069ca:	2100      	movs	r1, #0
 80069cc:	461a      	mov	r2, r3
 80069ce:	f7fc ff7d 	bl	80038cc <XMC_CCU8_SLICE_SetInterruptNode>
                                    handle_ptr->ccu8_period_match_node);
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069d6:	4618      	mov	r0, r3
 80069d8:	2100      	movs	r1, #0
 80069da:	f7ff fd3b 	bl	8006454 <XMC_CCU8_SLICE_EnableEvent>
  }
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7ff fd1c 	bl	8006420 <XMC_CCU8_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d004      	beq.n	8006a04 <TIMER_CCU8_lInit+0x90>
  {
    /* Start the timer */
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7ff fcf6 	bl	80063f0 <XMC_CCU8_SLICE_StartTimer>
  }

  return (status);
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	bf00      	nop

08006a10 <TIMER_CCU8_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b082      	sub	sp, #8
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a20:	4610      	mov	r0, r2
 8006a22:	4619      	mov	r1, r3
 8006a24:	f7fc ff0e 	bl	8003844 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	2100      	movs	r1, #0
 8006a30:	2200      	movs	r2, #0
 8006a32:	f7fc ff33 	bl	800389c <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a3a:	689a      	ldr	r2, [r3, #8]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	4610      	mov	r0, r2
 8006a42:	4619      	mov	r1, r3
 8006a44:	f7ff fcf8 	bl	8006438 <XMC_CCU8_EnableShadowTransfer>
}
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a50:	b480      	push	{r7}
 8006a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a54:	4b04      	ldr	r3, [pc, #16]	; (8006a68 <__NVIC_GetPriorityGrouping+0x18>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006a5c:	0a1b      	lsrs	r3, r3, #8
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr
 8006a68:	e000ed00 	.word	0xe000ed00

08006a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b083      	sub	sp, #12
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	4603      	mov	r3, r0
 8006a74:	6039      	str	r1, [r7, #0]
 8006a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	db0a      	blt.n	8006a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a80:	490d      	ldr	r1, [pc, #52]	; (8006ab8 <__NVIC_SetPriority+0x4c>)
 8006a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a86:	683a      	ldr	r2, [r7, #0]
 8006a88:	b2d2      	uxtb	r2, r2
 8006a8a:	0092      	lsls	r2, r2, #2
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006a94:	e00a      	b.n	8006aac <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006a96:	4909      	ldr	r1, [pc, #36]	; (8006abc <__NVIC_SetPriority+0x50>)
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	f003 030f 	and.w	r3, r3, #15
 8006a9e:	3b04      	subs	r3, #4
 8006aa0:	683a      	ldr	r2, [r7, #0]
 8006aa2:	b2d2      	uxtb	r2, r2
 8006aa4:	0092      	lsls	r2, r2, #2
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	761a      	strb	r2, [r3, #24]
  }
}
 8006aac:	370c      	adds	r7, #12
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab4:	4770      	bx	lr
 8006ab6:	bf00      	nop
 8006ab8:	e000e100 	.word	0xe000e100
 8006abc:	e000ed00 	.word	0xe000ed00

08006ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b089      	sub	sp, #36	; 0x24
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	60f8      	str	r0, [r7, #12]
 8006ac8:	60b9      	str	r1, [r7, #8]
 8006aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	f1c3 0307 	rsb	r3, r3, #7
 8006ada:	2b06      	cmp	r3, #6
 8006adc:	bf28      	it	cs
 8006ade:	2306      	movcs	r3, #6
 8006ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	3306      	adds	r3, #6
 8006ae6:	2b06      	cmp	r3, #6
 8006ae8:	d902      	bls.n	8006af0 <NVIC_EncodePriority+0x30>
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	e000      	b.n	8006af2 <NVIC_EncodePriority+0x32>
 8006af0:	2300      	movs	r3, #0
 8006af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	2201      	movs	r2, #1
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	1e5a      	subs	r2, r3, #1
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	401a      	ands	r2, r3
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2101      	movs	r1, #1
 8006b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b0e:	1e59      	subs	r1, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006b14:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3724      	adds	r7, #36	; 0x24
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr
 8006b22:	bf00      	nop

08006b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b082      	sub	sp, #8
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006b34:	d301      	bcc.n	8006b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006b36:	2301      	movs	r3, #1
 8006b38:	e00f      	b.n	8006b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006b3a:	4a0a      	ldr	r2, [pc, #40]	; (8006b64 <SysTick_Config+0x40>)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	3b01      	subs	r3, #1
 8006b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006b42:	f04f 30ff 	mov.w	r0, #4294967295
 8006b46:	213f      	movs	r1, #63	; 0x3f
 8006b48:	f7ff ff90 	bl	8006a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006b4c:	4b05      	ldr	r3, [pc, #20]	; (8006b64 <SysTick_Config+0x40>)
 8006b4e:	2200      	movs	r2, #0
 8006b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006b52:	4b04      	ldr	r3, [pc, #16]	; (8006b64 <SysTick_Config+0x40>)
 8006b54:	2207      	movs	r2, #7
 8006b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3708      	adds	r7, #8
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
 8006b62:	bf00      	nop
 8006b64:	e000e010 	.word	0xe000e010

08006b68 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 8006b68:	b490      	push	{r4, r7}
 8006b6a:	b086      	sub	sp, #24
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 8006b70:	2300      	movs	r3, #0
 8006b72:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 8006b74:	496b      	ldr	r1, [pc, #428]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3318      	adds	r3, #24
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 8006b88:	4b67      	ldr	r3, [pc, #412]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d109      	bne.n	8006ba4 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 8006b90:	687a      	ldr	r2, [r7, #4]
 8006b92:	4613      	mov	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	4a62      	ldr	r2, [pc, #392]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006b9c:	4413      	add	r3, r2
 8006b9e:	4a62      	ldr	r2, [pc, #392]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006ba0:	6013      	str	r3, [r2, #0]
 8006ba2:	e0bb      	b.n	8006d1c <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8006ba4:	4b60      	ldr	r3, [pc, #384]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8006bae:	e0ab      	b.n	8006d08 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	461a      	mov	r2, r3
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dc7a      	bgt.n	8006cb8 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	685b      	ldr	r3, [r3, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d026      	beq.n	8006c18 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	6859      	ldr	r1, [r3, #4]
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	00db      	lsls	r3, r3, #3
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a52      	ldr	r2, [pc, #328]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006bda:	4413      	add	r3, r2
 8006bdc:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	6859      	ldr	r1, [r3, #4]
 8006be2:	4850      	ldr	r0, [pc, #320]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4613      	mov	r3, r2
 8006be8:	00db      	lsls	r3, r3, #3
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4403      	add	r3, r0
 8006bf0:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 8006bf2:	494c      	ldr	r1, [pc, #304]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006bf4:	687a      	ldr	r2, [r7, #4]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	440b      	add	r3, r1
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8006c04:	687a      	ldr	r2, [r7, #4]
 8006c06:	4613      	mov	r3, r2
 8006c08:	00db      	lsls	r3, r3, #3
 8006c0a:	4413      	add	r3, r2
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	4a45      	ldr	r2, [pc, #276]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c10:	441a      	add	r2, r3
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	e01c      	b.n	8006c52 <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8006c18:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006c1a:	6819      	ldr	r1, [r3, #0]
 8006c1c:	4841      	ldr	r0, [pc, #260]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	4613      	mov	r3, r2
 8006c22:	00db      	lsls	r3, r3, #3
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	4403      	add	r3, r0
 8006c2a:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8006c2c:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006c2e:	6819      	ldr	r1, [r3, #0]
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	4613      	mov	r3, r2
 8006c34:	00db      	lsls	r3, r3, #3
 8006c36:	4413      	add	r3, r2
 8006c38:	009b      	lsls	r3, r3, #2
 8006c3a:	4a3a      	ldr	r2, [pc, #232]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c3c:	4413      	add	r3, r2
 8006c3e:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 8006c40:	687a      	ldr	r2, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	00db      	lsls	r3, r3, #3
 8006c46:	4413      	add	r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	4a36      	ldr	r2, [pc, #216]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c4c:	4413      	add	r3, r2
 8006c4e:	4a36      	ldr	r2, [pc, #216]	; (8006d28 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006c50:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 8006c52:	4934      	ldr	r1, [pc, #208]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4613      	mov	r3, r2
 8006c58:	00db      	lsls	r3, r3, #3
 8006c5a:	4413      	add	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	440b      	add	r3, r1
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	693b      	ldr	r3, [r7, #16]
 8006c66:	18d1      	adds	r1, r2, r3
 8006c68:	482e      	ldr	r0, [pc, #184]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c6a:	687a      	ldr	r2, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4403      	add	r3, r0
 8006c76:	3318      	adds	r3, #24
 8006c78:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 8006c7a:	492a      	ldr	r1, [pc, #168]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	4613      	mov	r3, r2
 8006c80:	00db      	lsls	r3, r3, #3
 8006c82:	4413      	add	r3, r2
 8006c84:	009b      	lsls	r3, r3, #2
 8006c86:	440b      	add	r3, r1
 8006c88:	6819      	ldr	r1, [r3, #0]
 8006c8a:	4826      	ldr	r0, [pc, #152]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	4613      	mov	r3, r2
 8006c90:	00db      	lsls	r3, r3, #3
 8006c92:	4413      	add	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4403      	add	r3, r0
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	6998      	ldr	r0, [r3, #24]
 8006c9c:	4c21      	ldr	r4, [pc, #132]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	4413      	add	r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	4423      	add	r3, r4
 8006caa:	3318      	adds	r3, #24
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	1ac3      	subs	r3, r0, r3
 8006cb0:	618b      	str	r3, [r1, #24]
        found_flag = true;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	73fb      	strb	r3, [r7, #15]
 8006cb6:	e024      	b.n	8006d02 <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	dd21      	ble.n	8006d02 <SYSTIMER_lInsertTimerList+0x19a>
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d11d      	bne.n	8006d02 <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8006cc6:	4917      	ldr	r1, [pc, #92]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	4613      	mov	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	4413      	add	r3, r2
 8006cd0:	009b      	lsls	r3, r3, #2
 8006cd2:	440b      	add	r3, r1
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	00db      	lsls	r3, r3, #3
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a10      	ldr	r2, [pc, #64]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006ce4:	441a      	add	r2, r3
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8006cea:	6939      	ldr	r1, [r7, #16]
 8006cec:	480d      	ldr	r0, [pc, #52]	; (8006d24 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	00db      	lsls	r3, r3, #3
 8006cf4:	4413      	add	r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	4403      	add	r3, r0
 8006cfa:	3318      	adds	r3, #24
 8006cfc:	6019      	str	r1, [r3, #0]
          found_flag = true;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d006      	beq.n	8006d1c <SYSTIMER_lInsertTimerList+0x1b4>
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	f083 0301 	eor.w	r3, r3, #1
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f47f af4a 	bne.w	8006bb0 <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8006d1c:	3718      	adds	r7, #24
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bc90      	pop	{r4, r7}
 8006d22:	4770      	bx	lr
 8006d24:	1fff516c 	.word	0x1fff516c
 8006d28:	1fff4434 	.word	0x1fff4434

08006d2c <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b085      	sub	sp, #20
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4a29      	ldr	r2, [pc, #164]	; (8006de4 <SYSTIMER_lRemoveTimerList+0xb8>)
 8006d40:	4413      	add	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d107      	bne.n	8006d5c <SYSTIMER_lRemoveTimerList+0x30>
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d103      	bne.n	8006d5c <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e03d      	b.n	8006dd8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d114      	bne.n	8006d8e <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a1f      	ldr	r2, [pc, #124]	; (8006de8 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006d6a:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 8006d6c:	4b1e      	ldr	r3, [pc, #120]	; (8006de8 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a1b      	ldr	r2, [pc, #108]	; (8006de8 <SYSTIMER_lRemoveTimerList+0xbc>)
 8006d7a:	6812      	ldr	r2, [r2, #0]
 8006d7c:	6991      	ldr	r1, [r2, #24]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	6992      	ldr	r2, [r2, #24]
 8006d82:	440a      	add	r2, r1
 8006d84:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	e024      	b.n	8006dd8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d107      	bne.n	8006da6 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	605a      	str	r2, [r3, #4]
 8006da4:	e018      	b.n	8006dd8 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	68fa      	ldr	r2, [r7, #12]
 8006dac:	6812      	ldr	r2, [r2, #0]
 8006dae:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6852      	ldr	r2, [r2, #4]
 8006db8:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	6812      	ldr	r2, [r2, #0]
 8006dc2:	6991      	ldr	r1, [r2, #24]
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	6992      	ldr	r2, [r2, #24]
 8006dc8:	440a      	add	r2, r1
 8006dca:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	605a      	str	r2, [r3, #4]
  }
}
 8006dd8:	3714      	adds	r7, #20
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	1fff516c 	.word	0x1fff516c
 8006de8:	1fff4434 	.word	0x1fff4434

08006dec <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b082      	sub	sp, #8
 8006df0:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 8006df2:	4b2f      	ldr	r3, [pc, #188]	; (8006eb0 <SYSTIMER_lTimerHandler+0xc4>)
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006df8:	e050      	b.n	8006e9c <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d013      	beq.n	8006e2c <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	695b      	ldr	r3, [r3, #20]
 8006e08:	4618      	mov	r0, r3
 8006e0a:	f7ff ff8f 	bl	8006d2c <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2200      	movs	r2, #0
 8006e12:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	695b      	ldr	r3, [r3, #20]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	4093      	lsls	r3, r2
 8006e1e:	43da      	mvns	r2, r3
 8006e20:	4b24      	ldr	r3, [pc, #144]	; (8006eb4 <SYSTIMER_lTimerHandler+0xc8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4013      	ands	r3, r2
 8006e26:	4a23      	ldr	r2, [pc, #140]	; (8006eb4 <SYSTIMER_lTimerHandler+0xc8>)
 8006e28:	6013      	str	r3, [r2, #0]
 8006e2a:	e034      	b.n	8006e96 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	7b1b      	ldrb	r3, [r3, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d112      	bne.n	8006e5a <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	7b5b      	ldrb	r3, [r3, #13]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d12c      	bne.n	8006e96 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	695b      	ldr	r3, [r3, #20]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7ff ff73 	bl	8006d2c <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2202      	movs	r2, #2
 8006e4a:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	687a      	ldr	r2, [r7, #4]
 8006e52:	6912      	ldr	r2, [r2, #16]
 8006e54:	4610      	mov	r0, r2
 8006e56:	4798      	blx	r3
 8006e58:	e01d      	b.n	8006e96 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	7b1b      	ldrb	r3, [r3, #12]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d118      	bne.n	8006e94 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	7b5b      	ldrb	r3, [r3, #13]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d115      	bne.n	8006e96 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7ff ff5c 	bl	8006d2c <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	69da      	ldr	r2, [r3, #28]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	695b      	ldr	r3, [r3, #20]
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7ff fe71 	bl	8006b68 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	6912      	ldr	r2, [r2, #16]
 8006e8e:	4610      	mov	r0, r2
 8006e90:	4798      	blx	r3
 8006e92:	e000      	b.n	8006e96 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8006e94:	e009      	b.n	8006eaa <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8006e96:	4b06      	ldr	r3, [pc, #24]	; (8006eb0 <SYSTIMER_lTimerHandler+0xc4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <SYSTIMER_lTimerHandler+0xbe>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	699b      	ldr	r3, [r3, #24]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d0a7      	beq.n	8006dfa <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8006eaa:	3708      	adds	r7, #8
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}
 8006eb0:	1fff4434 	.word	0x1fff4434
 8006eb4:	1fff4438 	.word	0x1fff4438

08006eb8 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b082      	sub	sp, #8
 8006ebc:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <SysTick_Handler+0x40>)
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8006ec4:	4b0d      	ldr	r3, [pc, #52]	; (8006efc <SysTick_Handler+0x44>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	4a0c      	ldr	r2, [pc, #48]	; (8006efc <SysTick_Handler+0x44>)
 8006ecc:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	2b01      	cmp	r3, #1
 8006eda:	d905      	bls.n	8006ee8 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	699b      	ldr	r3, [r3, #24]
 8006ee0:	1e5a      	subs	r2, r3, #1
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	619a      	str	r2, [r3, #24]
 8006ee6:	e004      	b.n	8006ef2 <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8006eee:	f7ff ff7d 	bl	8006dec <SYSTIMER_lTimerHandler>
    }
  }
}
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	1fff4434 	.word	0x1fff4434
 8006efc:	1fff443c 	.word	0x1fff443c

08006f00 <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f083 0301 	eor.w	r3, r3, #1
 8006f14:	b2db      	uxtb	r3, r3
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d020      	beq.n	8006f5c <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8006f1a:	4b13      	ldr	r3, [pc, #76]	; (8006f68 <SYSTIMER_Init+0x68>)
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8006f20:	4812      	ldr	r0, [pc, #72]	; (8006f6c <SYSTIMER_Init+0x6c>)
 8006f22:	f7ff fdff 	bl	8006b24 <SysTick_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8006f2a:	7bfb      	ldrb	r3, [r7, #15]
 8006f2c:	2b01      	cmp	r3, #1
 8006f2e:	d015      	beq.n	8006f5c <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8006f30:	f7ff fd8e 	bl	8006a50 <__NVIC_GetPriorityGrouping>
 8006f34:	4603      	mov	r3, r0
 8006f36:	4618      	mov	r0, r3
 8006f38:	213f      	movs	r1, #63	; 0x3f
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f7ff fdc0 	bl	8006ac0 <NVIC_EncodePriority>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f04f 30ff 	mov.w	r0, #4294967295
 8006f46:	4619      	mov	r1, r3
 8006f48:	f7ff fd90 	bl	8006a6c <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8006f4c:	4b08      	ldr	r3, [pc, #32]	; (8006f70 <SYSTIMER_Init+0x70>)
 8006f4e:	2200      	movs	r2, #0
 8006f50:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2201      	movs	r2, #1
 8006f56:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	1fff4434 	.word	0x1fff4434
 8006f6c:	00023280 	.word	0x00023280
 8006f70:	1fff4438 	.word	0x1fff4438

08006f74 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b089      	sub	sp, #36	; 0x24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006f96:	d202      	bcs.n	8006f9e <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	61fb      	str	r3, [r7, #28]
 8006f9c:	e07b      	b.n	8007096 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	61bb      	str	r3, [r7, #24]
 8006fa2:	e075      	b.n	8007090 <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8006fa4:	69bb      	ldr	r3, [r7, #24]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	409a      	lsls	r2, r3
 8006faa:	4b3e      	ldr	r3, [pc, #248]	; (80070a4 <SYSTIMER_CreateTimer+0x130>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4013      	ands	r3, r2
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d16a      	bne.n	800708a <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8006fb4:	69bb      	ldr	r3, [r7, #24]
 8006fb6:	2201      	movs	r2, #1
 8006fb8:	409a      	lsls	r2, r3
 8006fba:	4b3a      	ldr	r3, [pc, #232]	; (80070a4 <SYSTIMER_CreateTimer+0x130>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	4a38      	ldr	r2, [pc, #224]	; (80070a4 <SYSTIMER_CreateTimer+0x130>)
 8006fc2:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8006fc4:	4938      	ldr	r1, [pc, #224]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	3310      	adds	r3, #16
 8006fd4:	69ba      	ldr	r2, [r7, #24]
 8006fd6:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8006fd8:	4933      	ldr	r1, [pc, #204]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8006fda:	69ba      	ldr	r2, [r7, #24]
 8006fdc:	4613      	mov	r3, r2
 8006fde:	00db      	lsls	r3, r3, #3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	009b      	lsls	r3, r3, #2
 8006fe4:	440b      	add	r3, r1
 8006fe6:	3308      	adds	r3, #8
 8006fe8:	7afa      	ldrb	r2, [r7, #11]
 8006fea:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8006fec:	492e      	ldr	r1, [pc, #184]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8006fee:	69ba      	ldr	r2, [r7, #24]
 8006ff0:	4613      	mov	r3, r2
 8006ff2:	00db      	lsls	r3, r3, #3
 8006ff4:	4413      	add	r3, r2
 8006ff6:	009b      	lsls	r3, r3, #2
 8006ff8:	440b      	add	r3, r1
 8006ffa:	3308      	adds	r3, #8
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	4a2a      	ldr	r2, [pc, #168]	; (80070ac <SYSTIMER_CreateTimer+0x138>)
 8007004:	fba2 2303 	umull	r2, r3, r2, r3
 8007008:	099b      	lsrs	r3, r3, #6
 800700a:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	1c59      	adds	r1, r3, #1
 8007010:	4825      	ldr	r0, [pc, #148]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8007012:	69ba      	ldr	r2, [r7, #24]
 8007014:	4613      	mov	r3, r2
 8007016:	00db      	lsls	r3, r3, #3
 8007018:	4413      	add	r3, r2
 800701a:	009b      	lsls	r3, r3, #2
 800701c:	4403      	add	r3, r0
 800701e:	3318      	adds	r3, #24
 8007020:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8007022:	4921      	ldr	r1, [pc, #132]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8007024:	69ba      	ldr	r2, [r7, #24]
 8007026:	4613      	mov	r3, r2
 8007028:	00db      	lsls	r3, r3, #3
 800702a:	4413      	add	r3, r2
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	440b      	add	r3, r1
 8007030:	3318      	adds	r3, #24
 8007032:	697a      	ldr	r2, [r7, #20]
 8007034:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8007036:	491c      	ldr	r1, [pc, #112]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8007038:	69ba      	ldr	r2, [r7, #24]
 800703a:	4613      	mov	r3, r2
 800703c:	00db      	lsls	r3, r3, #3
 800703e:	4413      	add	r3, r2
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	440b      	add	r3, r1
 8007044:	3308      	adds	r3, #8
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 800704a:	4917      	ldr	r1, [pc, #92]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 800704c:	69ba      	ldr	r2, [r7, #24]
 800704e:	4613      	mov	r3, r2
 8007050:	00db      	lsls	r3, r3, #3
 8007052:	4413      	add	r3, r2
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	440b      	add	r3, r1
 8007058:	3310      	adds	r3, #16
 800705a:	683a      	ldr	r2, [r7, #0]
 800705c:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 800705e:	4912      	ldr	r1, [pc, #72]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	4613      	mov	r3, r2
 8007064:	00db      	lsls	r3, r3, #3
 8007066:	4413      	add	r3, r2
 8007068:	009b      	lsls	r3, r3, #2
 800706a:	440b      	add	r3, r1
 800706c:	2200      	movs	r2, #0
 800706e:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8007070:	490d      	ldr	r1, [pc, #52]	; (80070a8 <SYSTIMER_CreateTimer+0x134>)
 8007072:	69ba      	ldr	r2, [r7, #24]
 8007074:	4613      	mov	r3, r2
 8007076:	00db      	lsls	r3, r3, #3
 8007078:	4413      	add	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	440b      	add	r3, r1
 800707e:	2200      	movs	r2, #0
 8007080:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	3301      	adds	r3, #1
 8007086:	61fb      	str	r3, [r7, #28]
        break;
 8007088:	e005      	b.n	8007096 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	3301      	adds	r3, #1
 800708e:	61bb      	str	r3, [r7, #24]
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	2b07      	cmp	r3, #7
 8007094:	d986      	bls.n	8006fa4 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8007096:	69fb      	ldr	r3, [r7, #28]
}  
 8007098:	4618      	mov	r0, r3
 800709a:	3724      	adds	r7, #36	; 0x24
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	1fff4438 	.word	0x1fff4438
 80070a8:	1fff516c 	.word	0x1fff516c
 80070ac:	10624dd3 	.word	0x10624dd3

080070b0 <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b084      	sub	sp, #16
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 80070b8:	2301      	movs	r3, #1
 80070ba:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	491a      	ldr	r1, [pc, #104]	; (800712c <SYSTIMER_StartTimer+0x7c>)
 80070c2:	4613      	mov	r3, r2
 80070c4:	00db      	lsls	r3, r3, #3
 80070c6:	4413      	add	r3, r2
 80070c8:	009b      	lsls	r3, r3, #2
 80070ca:	440b      	add	r3, r1
 80070cc:	3308      	adds	r3, #8
 80070ce:	795b      	ldrb	r3, [r3, #5]
 80070d0:	2b02      	cmp	r3, #2
 80070d2:	d126      	bne.n	8007122 <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	1e5a      	subs	r2, r3, #1
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	1e59      	subs	r1, r3, #1
 80070dc:	4813      	ldr	r0, [pc, #76]	; (800712c <SYSTIMER_StartTimer+0x7c>)
 80070de:	460b      	mov	r3, r1
 80070e0:	00db      	lsls	r3, r3, #3
 80070e2:	440b      	add	r3, r1
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4403      	add	r3, r0
 80070e8:	3318      	adds	r3, #24
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	1c59      	adds	r1, r3, #1
 80070ee:	480f      	ldr	r0, [pc, #60]	; (800712c <SYSTIMER_StartTimer+0x7c>)
 80070f0:	4613      	mov	r3, r2
 80070f2:	00db      	lsls	r3, r3, #3
 80070f4:	4413      	add	r3, r2
 80070f6:	009b      	lsls	r3, r3, #2
 80070f8:	4403      	add	r3, r0
 80070fa:	3318      	adds	r3, #24
 80070fc:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	1e5a      	subs	r2, r3, #1
 8007102:	490a      	ldr	r1, [pc, #40]	; (800712c <SYSTIMER_StartTimer+0x7c>)
 8007104:	4613      	mov	r3, r2
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	3308      	adds	r3, #8
 8007110:	2201      	movs	r2, #1
 8007112:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3b01      	subs	r3, #1
 8007118:	4618      	mov	r0, r3
 800711a:	f7ff fd25 	bl	8006b68 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 800711e:	2300      	movs	r3, #0
 8007120:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8007122:	7bfb      	ldrb	r3, [r7, #15]
}
 8007124:	4618      	mov	r0, r3
 8007126:	3710      	adds	r7, #16
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	1fff516c 	.word	0x1fff516c

08007130 <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	460b      	mov	r3, r1
 800713a:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007140:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	019b      	lsls	r3, r3, #6
 8007148:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 800714a:	431a      	orrs	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop

0800715c <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	f240 1201 	movw	r2, #257	; 0x101
 800716e:	409a      	lsls	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	60f8      	str	r0, [r7, #12]
 8007188:	460b      	mov	r3, r1
 800718a:	607a      	str	r2, [r7, #4]
 800718c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 800718e:	7afb      	ldrb	r3, [r7, #11]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	2158      	movs	r1, #88	; 0x58
 8007194:	fb01 f303 	mul.w	r3, r1, r3
 8007198:	4413      	add	r3, r2
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	601a      	str	r2, [r3, #0]
}
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	460b      	mov	r3, r1
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 80071b6:	7afb      	ldrb	r3, [r7, #11]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	2158      	movs	r1, #88	; 0x58
 80071bc:	fb01 f303 	mul.w	r3, r1, r3
 80071c0:	4413      	add	r3, r2
 80071c2:	3308      	adds	r3, #8
 80071c4:	687a      	ldr	r2, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]
}
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop

080071d4 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	460b      	mov	r3, r1
 80071de:	607a      	str	r2, [r7, #4]
 80071e0:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	2158      	movs	r1, #88	; 0x58
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
 80071ec:	4413      	add	r3, r2
 80071ee:	3318      	adds	r3, #24
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	605a      	str	r2, [r3, #4]
}
 80071f4:	3714      	adds	r7, #20
 80071f6:	46bd      	mov	sp, r7
 80071f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fc:	4770      	bx	lr
 80071fe:	bf00      	nop

08007200 <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	4798      	blx	r3
 8007210:	4603      	mov	r3, r0
 8007212:	73fb      	strb	r3, [r7, #15]

  return status;
 8007214:	7bfb      	ldrb	r3, [r7, #15]
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}
 800721e:	bf00      	nop

08007220 <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	60f8      	str	r0, [r7, #12]
 8007228:	60b9      	str	r1, [r7, #8]
 800722a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 800722c:	2301      	movs	r3, #1
 800722e:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007238:	2b01      	cmp	r3, #1
 800723a:	d106      	bne.n	800724a <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 800723c:	68f8      	ldr	r0, [r7, #12]
 800723e:	68b9      	ldr	r1, [r7, #8]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	f000 f821 	bl	8007288 <SPI_MASTER_StartTransmitDMA>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b086      	sub	sp, #24
 8007258:	af00      	add	r7, sp, #0
 800725a:	60f8      	str	r0, [r7, #12]
 800725c:	60b9      	str	r1, [r7, #8]
 800725e:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8007260:	2301      	movs	r3, #1
 8007262:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800726c:	2b01      	cmp	r3, #1
 800726e:	d106      	bne.n	800727e <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8007270:	68f8      	ldr	r0, [r7, #12]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	f000 f8db 	bl	8007430 <SPI_MASTER_StartReceiveDMA>
 800727a:	4603      	mov	r3, r0
 800727c:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 800727e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007280:	4618      	mov	r0, r3
 8007282:	3718      	adds	r7, #24
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}

08007288 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b088      	sub	sp, #32
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8007294:	2304      	movs	r3, #4
 8007296:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	f040 80bc 	bne.w	8007424 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072b2:	b2db      	uxtb	r3, r3
 80072b4:	f083 0301 	eor.w	r3, r3, #1
 80072b8:	b2db      	uxtb	r3, r3
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	f000 80b0 	beq.w	8007420 <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 80a9 	beq.w	800741a <SPI_MASTER_StartTransmitDMA+0x192>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	f000 80a5 	beq.w	800741a <SPI_MASTER_StartTransmitDMA+0x192>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072d6:	f080 80a0 	bcs.w	800741a <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2200      	movs	r2, #0
 80072e4:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80072f4:	b2db      	uxtb	r3, r3
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d029      	beq.n	800734e <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	7f5b      	ldrb	r3, [r3, #29]
 8007304:	4619      	mov	r1, r3
 8007306:	2358      	movs	r3, #88	; 0x58
 8007308:	fb03 f301 	mul.w	r3, r3, r1
 800730c:	4413      	add	r3, r2
 800730e:	3318      	adds	r3, #24
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800731a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800731e:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	7f5b      	ldrb	r3, [r3, #29]
 800732a:	4619      	mov	r1, r3
 800732c:	2358      	movs	r3, #88	; 0x58
 800732e:	fb03 f301 	mul.w	r3, r3, r1
 8007332:	4413      	add	r3, r2
 8007334:	3318      	adds	r3, #24
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	7f1b      	ldrb	r3, [r3, #28]
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8007348:	4013      	ands	r3, r2
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	e025      	b.n	800739a <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68db      	ldr	r3, [r3, #12]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	7f5b      	ldrb	r3, [r3, #29]
 800735e:	4619      	mov	r1, r3
 8007360:	2358      	movs	r3, #88	; 0x58
 8007362:	fb03 f301 	mul.w	r3, r3, r1
 8007366:	4413      	add	r3, r2
 8007368:	3318      	adds	r3, #24
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007374:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	68db      	ldr	r3, [r3, #12]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	7f5b      	ldrb	r3, [r3, #29]
 8007380:	4619      	mov	r1, r3
 8007382:	2358      	movs	r3, #88	; 0x58
 8007384:	fb03 f301 	mul.w	r3, r3, r1
 8007388:	4413      	add	r3, r2
 800738a:	3318      	adds	r3, #24
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	7f1b      	ldrb	r3, [r3, #28]
 8007396:	b2db      	uxtb	r3, r3
 8007398:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4618      	mov	r0, r3
 80073a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073a4:	f7fd fb16 	bl	80049d4 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	68db      	ldr	r3, [r3, #12]
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	7f5b      	ldrb	r3, [r3, #29]
 80073b2:	4610      	mov	r0, r2
 80073b4:	4619      	mov	r1, r3
 80073b6:	687a      	ldr	r2, [r7, #4]
 80073b8:	f7ff ff0c 	bl	80071d4 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	68db      	ldr	r3, [r3, #12]
 80073c0:	6819      	ldr	r1, [r3, #0]
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	7f5a      	ldrb	r2, [r3, #29]
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	4608      	mov	r0, r1
 80073cc:	4611      	mov	r1, r2
 80073ce:	461a      	mov	r2, r3
 80073d0:	f7ff fed6 	bl	8007180 <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681a      	ldr	r2, [r3, #0]
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	7f1b      	ldrb	r3, [r3, #28]
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	4610      	mov	r0, r2
 80073e0:	4619      	mov	r1, r3
 80073e2:	f7ff fea5 	bl	8007130 <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	6818      	ldr	r0, [r3, #0]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681a      	ldr	r2, [r3, #0]
 80073f4:	69bb      	ldr	r3, [r7, #24]
 80073f6:	3320      	adds	r3, #32
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 80073fc:	461a      	mov	r2, r3
 80073fe:	f7ff fed3 	bl	80071a8 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 8007402:	2300      	movs	r3, #0
 8007404:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	681a      	ldr	r2, [r3, #0]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	7f5b      	ldrb	r3, [r3, #29]
 8007410:	4610      	mov	r0, r2
 8007412:	4619      	mov	r1, r3
 8007414:	f7ff fea2 	bl	800715c <XMC_DMA_CH_Enable>
 8007418:	e004      	b.n	8007424 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800741a:	2303      	movs	r3, #3
 800741c:	77fb      	strb	r3, [r7, #31]
 800741e:	e001      	b.n	8007424 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8007420:	2302      	movs	r3, #2
 8007422:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8007424:	7ffb      	ldrb	r3, [r7, #31]
}
 8007426:	4618      	mov	r0, r3
 8007428:	3720      	adds	r7, #32
 800742a:	46bd      	mov	sp, r7
 800742c:	bd80      	pop	{r7, pc}
 800742e:	bf00      	nop

08007430 <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b086      	sub	sp, #24
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 800743c:	2304      	movs	r3, #4
 800743e:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	689b      	ldr	r3, [r3, #8]
 8007444:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 800744e:	2b01      	cmp	r3, #1
 8007450:	d13c      	bne.n	80074cc <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 8007452:	2302      	movs	r3, #2
 8007454:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	7fdb      	ldrb	r3, [r3, #31]
 800745a:	b2db      	uxtb	r3, r3
 800745c:	f083 0301 	eor.w	r3, r3, #1
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d030      	beq.n	80074c8 <SPI_MASTER_StartReceiveDMA+0x98>
 8007466:	693b      	ldr	r3, [r7, #16]
 8007468:	f893 3020 	ldrb.w	r3, [r3, #32]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	f083 0301 	eor.w	r3, r3, #1
 8007472:	b2db      	uxtb	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d027      	beq.n	80074c8 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d021      	beq.n	80074c2 <SPI_MASTER_StartReceiveDMA+0x92>
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d01e      	beq.n	80074c2 <SPI_MASTER_StartReceiveDMA+0x92>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800748a:	d21a      	bcs.n	80074c2 <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2201      	movs	r2, #1
 8007490:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	4a0f      	ldr	r2, [pc, #60]	; (80074d8 <SPI_MASTER_StartReceiveDMA+0xa8>)
 800749c:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	f000 f810 	bl	80074dc <SPI_MASTER_lReceiveDMA>
 80074bc:	4603      	mov	r3, r0
 80074be:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80074c0:	e004      	b.n	80074cc <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 80074c2:	2303      	movs	r3, #3
 80074c4:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 80074c6:	e001      	b.n	80074cc <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 80074c8:	2302      	movs	r3, #2
 80074ca:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 80074cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3718      	adds	r7, #24
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	1ffe891c 	.word	0x1ffe891c

080074dc <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b084      	sub	sp, #16
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	2200      	movs	r2, #0
 80074f0:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4618      	mov	r0, r3
 80074fe:	f000 f847 	bl	8007590 <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4618      	mov	r0, r3
 8007508:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800750c:	f7fd fa62 	bl	80049d4 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	68db      	ldr	r3, [r3, #12]
 8007514:	6819      	ldr	r1, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	7f1a      	ldrb	r2, [r3, #28]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	68db      	ldr	r3, [r3, #12]
 800751e:	4608      	mov	r0, r1
 8007520:	4611      	mov	r1, r2
 8007522:	461a      	mov	r2, r3
 8007524:	f7ff fe56 	bl	80071d4 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	6819      	ldr	r1, [r3, #0]
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	461a      	mov	r2, r3
 800753e:	f7ff fe1f 	bl	8007180 <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	6819      	ldr	r1, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	7f1a      	ldrb	r2, [r3, #28]
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	695b      	ldr	r3, [r3, #20]
 8007550:	4608      	mov	r0, r1
 8007552:	4611      	mov	r1, r2
 8007554:	461a      	mov	r2, r3
 8007556:	f7ff fe27 	bl	80071a8 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 800755a:	2300      	movs	r3, #0
 800755c:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	7f1b      	ldrb	r3, [r3, #28]
 8007568:	4610      	mov	r0, r2
 800756a:	4619      	mov	r1, r3
 800756c:	f7ff fdf6 	bl	800715c <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	4611      	mov	r1, r2
 800757c:	461a      	mov	r2, r3
 800757e:	f7ff fe4f 	bl	8007220 <SPI_MASTER_Transmit>
 8007582:	4603      	mov	r3, r0
 8007584:	72fb      	strb	r3, [r7, #11]

  return status;
 8007586:	7afb      	ldrb	r3, [r7, #11]
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}

08007590 <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b082      	sub	sp, #8
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7fd fa01 	bl	80049a0 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f7fd f9fe 	bl	80049a0 <XMC_SPI_CH_GetReceivedData>
}
 80075a4:	3708      	adds	r7, #8
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop

080075ac <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
 80075b8:	4613      	mov	r3, r2
 80075ba:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80075bc:	78f8      	ldrb	r0, [r7, #3]
 80075be:	78fb      	ldrb	r3, [r7, #3]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	3306      	adds	r3, #6
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80075ce:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80075d0:	431a      	orrs	r2, r3
 80075d2:	6879      	ldr	r1, [r7, #4]
 80075d4:	1d83      	adds	r3, r0, #6
 80075d6:	009b      	lsls	r3, r3, #2
 80075d8:	440b      	add	r3, r1
 80075da:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80075dc:	370c      	adds	r7, #12
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop

080075e8 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
 80075f0:	460b      	mov	r3, r1
 80075f2:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f8:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 80075fc:	78fb      	ldrb	r3, [r7, #3]
 80075fe:	3b01      	subs	r3, #1
 8007600:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8007602:	431a      	orrs	r2, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop

08007614 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007624:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8007628:	78fb      	ldrb	r3, [r7, #3]
 800762a:	3b01      	subs	r3, #1
 800762c:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800762e:	431a      	orrs	r2, r3
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr
 800763e:	bf00      	nop

08007640 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764c:	b2db      	uxtb	r3, r3
 800764e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007652:	b2db      	uxtb	r3, r3
}
 8007654:	4618      	mov	r0, r3
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 8007660:	b480      	push	{r7}
 8007662:	b083      	sub	sp, #12
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
 8007668:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007670:	409a      	lsls	r2, r3
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8007680:	b480      	push	{r7}
 8007682:	b085      	sub	sp, #20
 8007684:	af00      	add	r7, sp, #0
 8007686:	60f8      	str	r0, [r7, #12]
 8007688:	60b9      	str	r1, [r7, #8]
 800768a:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	695b      	ldr	r3, [r3, #20]
 8007690:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8007694:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8007696:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop

080076ac <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b083      	sub	sp, #12
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
 80076b4:	460b      	mov	r3, r1
 80076b6:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076bc:	f023 020f 	bic.w	r2, r3, #15
 80076c0:	78fb      	ldrb	r3, [r7, #3]
 80076c2:	431a      	orrs	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop

080076d4 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 80076de:	6878      	ldr	r0, [r7, #4]
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	2201      	movs	r2, #1
 80076e4:	f7fd f900 	bl	80048e8 <XMC_SPI_CH_InitEx>
}
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop

080076f0 <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	2101      	movs	r1, #1
 80076fc:	f7ff ffd6 	bl	80076ac <XMC_USIC_CH_SetMode>
}
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop

08007708 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8007708:	b480      	push	{r7}
 800770a:	b083      	sub	sp, #12
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007714:	f043 0201 	orr.w	r2, r3, #1
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800771c:	370c      	adds	r7, #12
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop

08007728 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	695b      	ldr	r3, [r3, #20]
 8007736:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	3b01      	subs	r3, #1
 800773e:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 8007740:	4313      	orrs	r3, r2
 8007742:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 8007754:	b480      	push	{r7}
 8007756:	b083      	sub	sp, #12
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007760:	f023 0208 	bic.w	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007768:	370c      	adds	r7, #12
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop

08007774 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	60f8      	str	r0, [r7, #12]
 800777c:	60b9      	str	r1, [r7, #8]
 800777e:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 8007780:	68f8      	ldr	r0, [r7, #12]
 8007782:	68b9      	ldr	r1, [r7, #8]
 8007784:	687a      	ldr	r2, [r7, #4]
 8007786:	f7ff ff7b 	bl	8007680 <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 800778a:	3710      	adds	r7, #16
 800778c:	46bd      	mov	sp, r7
 800778e:	bd80      	pop	{r7, pc}

08007790 <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b082      	sub	sp, #8
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 800779c:	78fb      	ldrb	r3, [r7, #3]
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4619      	mov	r1, r3
 80077a2:	f7ff ff21 	bl	80075e8 <XMC_USIC_CH_SetWordLength>
}
 80077a6:	3708      	adds	r7, #8
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b082      	sub	sp, #8
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	460b      	mov	r3, r1
 80077b6:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	6878      	ldr	r0, [r7, #4]
 80077bc:	4619      	mov	r1, r3
 80077be:	f7ff ff29 	bl	8007614 <XMC_USIC_CH_SetFrameLength>
}
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	70fb      	strb	r3, [r7, #3]
 80077d4:	4613      	mov	r3, r2
 80077d6:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 80077d8:	78f8      	ldrb	r0, [r7, #3]
 80077da:	78fb      	ldrb	r3, [r7, #3]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	3306      	adds	r3, #6
 80077e0:	009b      	lsls	r3, r3, #2
 80077e2:	4413      	add	r3, r2
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 80077ea:	f043 0210 	orr.w	r2, r3, #16
 80077ee:	6879      	ldr	r1, [r7, #4]
 80077f0:	1d83      	adds	r3, r0, #6
 80077f2:	009b      	lsls	r3, r3, #2
 80077f4:	440b      	add	r3, r1
 80077f6:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	78bb      	ldrb	r3, [r7, #2]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	4611      	mov	r1, r2
 8007800:	461a      	mov	r2, r3
 8007802:	f7ff fed3 	bl	80075ac <XMC_USIC_CH_SetInputSource>
}
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 8007812:	2300      	movs	r3, #0
 8007814:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 8007816:	4840      	ldr	r0, [pc, #256]	; (8007918 <SPI_MASTER_0_lInit+0x10c>)
 8007818:	f001 f804 	bl	8008824 <GLOBAL_DMA_Init>
 800781c:	4603      	mov	r3, r0
 800781e:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 8007820:	79fb      	ldrb	r3, [r7, #7]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d172      	bne.n	800790c <SPI_MASTER_0_lInit+0x100>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_0_dma_ch_tx_config);
 8007826:	483d      	ldr	r0, [pc, #244]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 8007828:	2101      	movs	r1, #1
 800782a:	4a3d      	ldr	r2, [pc, #244]	; (8007920 <SPI_MASTER_0_lInit+0x114>)
 800782c:	f7fc fa0e 	bl	8003c4c <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8007830:	483a      	ldr	r0, [pc, #232]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 8007832:	2101      	movs	r1, #1
 8007834:	2201      	movs	r2, #1
 8007836:	f7fc fc0f 	bl	8004058 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_0_DMA_tx_handler);
 800783a:	4838      	ldr	r0, [pc, #224]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 800783c:	2101      	movs	r1, #1
 800783e:	4a39      	ldr	r2, [pc, #228]	; (8007924 <SPI_MASTER_0_lInit+0x118>)
 8007840:	f7fc fc58 	bl	80040f4 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_0_dma_ch_rx_config);
 8007844:	4835      	ldr	r0, [pc, #212]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 8007846:	2100      	movs	r1, #0
 8007848:	4a37      	ldr	r2, [pc, #220]	; (8007928 <SPI_MASTER_0_lInit+0x11c>)
 800784a:	f7fc f9ff 	bl	8003c4c <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 800784e:	4833      	ldr	r0, [pc, #204]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 8007850:	2100      	movs	r1, #0
 8007852:	2201      	movs	r2, #1
 8007854:	f7fc fc00 	bl	8004058 <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_0_DMA_rx_handler);
 8007858:	4830      	ldr	r0, [pc, #192]	; (800791c <SPI_MASTER_0_lInit+0x110>)
 800785a:	2100      	movs	r1, #0
 800785c:	4a33      	ldr	r2, [pc, #204]	; (800792c <SPI_MASTER_0_lInit+0x120>)
 800785e:	f7fc fc49 	bl	80040f4 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 8007862:	4833      	ldr	r0, [pc, #204]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007864:	4933      	ldr	r1, [pc, #204]	; (8007934 <SPI_MASTER_0_lInit+0x128>)
 8007866:	f7ff ff35 	bl	80076d4 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 800786a:	4831      	ldr	r0, [pc, #196]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 800786c:	f7ff ff72 	bl	8007754 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 8007870:	482f      	ldr	r0, [pc, #188]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007872:	f7ff ff49 	bl	8007708 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 8007876:	482e      	ldr	r0, [pc, #184]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007878:	2108      	movs	r1, #8
 800787a:	f7ff ff89 	bl	8007790 <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
 800787e:	482c      	ldr	r0, [pc, #176]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007880:	2140      	movs	r1, #64	; 0x40
 8007882:	f7ff ff93 	bl	80077ac <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 8007886:	482a      	ldr	r0, [pc, #168]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007888:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800788c:	2200      	movs	r2, #0
 800788e:	f7ff ff71 	bl	8007774 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 8007892:	4827      	ldr	r0, [pc, #156]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007894:	2102      	movs	r1, #2
 8007896:	f7ff ff47 	bl	8007728 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_0_MISO_Config.port_config);
 800789a:	4827      	ldr	r0, [pc, #156]	; (8007938 <SPI_MASTER_0_lInit+0x12c>)
 800789c:	2104      	movs	r1, #4
 800789e:	4a27      	ldr	r2, [pc, #156]	; (800793c <SPI_MASTER_0_lInit+0x130>)
 80078a0:	f7fa fbaa 	bl	8001ff8 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 80078a4:	4822      	ldr	r0, [pc, #136]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078a6:	2100      	movs	r1, #0
 80078a8:	2201      	movs	r2, #1
 80078aa:	f7ff ff8d 	bl	80077c8 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 80078ae:	4820      	ldr	r0, [pc, #128]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078b0:	f7ff ff1e 	bl	80076f0 <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_0_MOSI_Config.port_config);
 80078b4:	4820      	ldr	r0, [pc, #128]	; (8007938 <SPI_MASTER_0_lInit+0x12c>)
 80078b6:	2105      	movs	r1, #5
 80078b8:	4a21      	ldr	r2, [pc, #132]	; (8007940 <SPI_MASTER_0_lInit+0x134>)
 80078ba:	f7fa fb9d 	bl	8001ff8 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 80078be:	481e      	ldr	r0, [pc, #120]	; (8007938 <SPI_MASTER_0_lInit+0x12c>)
 80078c0:	2106      	movs	r1, #6
 80078c2:	4a20      	ldr	r2, [pc, #128]	; (8007944 <SPI_MASTER_0_lInit+0x138>)
 80078c4:	f7fa fb98 	bl	8001ff8 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_MASTER_0_SS_0_Config.port_config);
 80078c8:	481b      	ldr	r0, [pc, #108]	; (8007938 <SPI_MASTER_0_lInit+0x12c>)
 80078ca:	210b      	movs	r1, #11
 80078cc:	4a1e      	ldr	r2, [pc, #120]	; (8007948 <SPI_MASTER_0_lInit+0x13c>)
 80078ce:	f7fa fb93 	bl	8001ff8 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 80078d2:	4817      	ldr	r0, [pc, #92]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078d4:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80078d8:	f7fd f84c 	bl	8004974 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 80078dc:	4814      	ldr	r0, [pc, #80]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078de:	2104      	movs	r1, #4
 80078e0:	2200      	movs	r2, #0
 80078e2:	f7fd fb05 	bl	8004ef0 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 80078e6:	4812      	ldr	r0, [pc, #72]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078e8:	2108      	movs	r1, #8
 80078ea:	2201      	movs	r2, #1
 80078ec:	f7fd fb00 	bl	8004ef0 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 80078f0:	480f      	ldr	r0, [pc, #60]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078f2:	210c      	movs	r1, #12
 80078f4:	2201      	movs	r2, #1
 80078f6:	f7fd fafb 	bl	8004ef0 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 80078fa:	480d      	ldr	r0, [pc, #52]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 80078fc:	2110      	movs	r1, #16
 80078fe:	2202      	movs	r2, #2
 8007900:	f7fd faf6 	bl	8004ef0 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI0_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 8007904:	480a      	ldr	r0, [pc, #40]	; (8007930 <SPI_MASTER_0_lInit+0x124>)
 8007906:	2100      	movs	r1, #0
 8007908:	f7ff feaa 	bl	8007660 <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 800790c:	79fb      	ldrb	r3, [r7, #7]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	1ffe8a78 	.word	0x1ffe8a78
 800791c:	50014000 	.word	0x50014000
 8007920:	1ffe8940 	.word	0x1ffe8940
 8007924:	0800794d 	.word	0x0800794d
 8007928:	1ffe8964 	.word	0x1ffe8964
 800792c:	08007985 	.word	0x08007985
 8007930:	40030000 	.word	0x40030000
 8007934:	1ffe8934 	.word	0x1ffe8934
 8007938:	48028100 	.word	0x48028100
 800793c:	1fff4444 	.word	0x1fff4444
 8007940:	1ffe8920 	.word	0x1ffe8920
 8007944:	080135a8 	.word	0x080135a8
 8007948:	080135c4 	.word	0x080135c4

0800794c <SPI_MASTER_0_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_0_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	4603      	mov	r3, r0
 8007954:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 8007956:	79fb      	ldrb	r3, [r7, #7]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d10b      	bne.n	8007974 <SPI_MASTER_0_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 800795c:	bf00      	nop
 800795e:	4807      	ldr	r0, [pc, #28]	; (800797c <SPI_MASTER_0_DMA_tx_handler+0x30>)
 8007960:	f7ff fe6e 	bl	8007640 <XMC_USIC_CH_GetTransmitBufferStatus>
 8007964:	4603      	mov	r3, r0
 8007966:	2b80      	cmp	r3, #128	; 0x80
 8007968:	d0f9      	beq.n	800795e <SPI_MASTER_0_DMA_tx_handler+0x12>
    SPI_MASTER_0.runtime->tx_busy = false;
 800796a:	4b05      	ldr	r3, [pc, #20]	; (8007980 <SPI_MASTER_0_DMA_tx_handler+0x34>)
 800796c:	689b      	ldr	r3, [r3, #8]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	40030000 	.word	0x40030000
 8007980:	1ffe89ac 	.word	0x1ffe89ac

08007984 <SPI_MASTER_0_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_0_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b082      	sub	sp, #8
 8007988:	af00      	add	r7, sp, #0
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 800798e:	79fb      	ldrb	r3, [r7, #7]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d112      	bne.n	80079ba <SPI_MASTER_0_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI0_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8007994:	480a      	ldr	r0, [pc, #40]	; (80079c0 <SPI_MASTER_0_DMA_rx_handler+0x3c>)
 8007996:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 800799a:	f7fd f835 	bl	8004a08 <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_0.runtime->tx_data_dummy = false;
 800799e:	4b09      	ldr	r3, [pc, #36]	; (80079c4 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_0.runtime->rx_data_dummy = true;
 80079a8:	4b06      	ldr	r3, [pc, #24]	; (80079c4 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_0.runtime->rx_busy = false;
 80079b2:	4b04      	ldr	r3, [pc, #16]	; (80079c4 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 80079b4:	689b      	ldr	r3, [r3, #8]
 80079b6:	2200      	movs	r2, #0
 80079b8:	77da      	strb	r2, [r3, #31]
  }
}
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	40030000 	.word	0x40030000
 80079c4:	1ffe89ac 	.word	0x1ffe89ac

080079c8 <SDMMC_BLOCK_Init>:
  return version;
}

/* SDMMC_BLOCK initialization function */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 80079d0:	2300      	movs	r3, #0
 80079d2:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 80079d4:	2300      	movs	r3, #0
 80079d6:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL));

  if (obj->init_flag == 1U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	7b5b      	ldrb	r3, [r3, #13]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d002      	beq.n	80079e6 <SDMMC_BLOCK_Init+0x1e>
  {
    status = SDMMC_BLOCK_STATUS_SUCCESS;
 80079e0:	2300      	movs	r3, #0
 80079e2:	73fb      	strb	r3, [r7, #15]
 80079e4:	e01b      	b.n	8007a1e <SDMMC_BLOCK_Init+0x56>
  }
  else
  {
    /* Setup pins */
    if (obj->init_pins != NULL)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d002      	beq.n	80079f4 <SDMMC_BLOCK_Init+0x2c>
    {
      obj->init_pins();
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
 80079f2:	4798      	blx	r3
    }

#ifdef SDMMC_BLOCK_SPI
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	7b1b      	ldrb	r3, [r3, #12]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d104      	bne.n	8007a06 <SDMMC_BLOCK_Init+0x3e>
    {
      mode_status = SDMMC_BLOCK_SPI_Init(obj);
 80079fc:	6878      	ldr	r0, [r7, #4]
 80079fe:	f000 f813 	bl	8007a28 <SDMMC_BLOCK_SPI_Init>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73bb      	strb	r3, [r7, #14]
    {
      mode_status = SDMMC_BLOCK_SD_Init(obj);
    }
#endif

    if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d005      	beq.n	8007a18 <SDMMC_BLOCK_Init+0x50>
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
      obj->init_flag = 0U;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2200      	movs	r2, #0
 8007a14:	735a      	strb	r2, [r3, #13]
 8007a16:	e002      	b.n	8007a1e <SDMMC_BLOCK_Init+0x56>
    }
    else
    {
      obj->init_flag = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	735a      	strb	r2, [r3, #13]
    }
  }

  return status;
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3710      	adds	r7, #16
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <SDMMC_BLOCK_SPI_Init>:

/**********************************************************************************************************************
  * API IMPLEMENTATION
**********************************************************************************************************************/
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b084      	sub	sp, #16
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t spi_status;
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

  spi_status = SPI_MASTER_Init(obj->sdmmc_spi->spi_master_handle);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f7ff fbe0 	bl	8007200 <SPI_MASTER_Init>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  if (spi_status != SPI_MASTER_STATUS_SUCCESS)
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <SDMMC_BLOCK_SPI_Init+0x26>
  {
    status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8007a5c:	f7fc fecc 	bl	80047f8 <XMC_RTC_Start>
}
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop

08007a64 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 8007a70:	2301      	movs	r3, #1
 8007a72:	73bb      	strb	r3, [r7, #14]
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
  {
#endif
      if (handler->initialized == false)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	7a1b      	ldrb	r3, [r3, #8]
 8007a78:	f083 0301 	eor.w	r3, r3, #1
 8007a7c:	b2db      	uxtb	r3, r3
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d029      	beq.n	8007ad6 <RTC_Init+0x72>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7fa fb7a 	bl	8002180 <XMC_RTC_Init>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d11c      	bne.n	8007ad0 <RTC_Init+0x6c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	f000 f824 	bl	8007ae4 <RTC_lConfigureInterrupts>
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 8007aa0:	7b7b      	ldrb	r3, [r7, #13]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d004      	beq.n	8007ab0 <RTC_Init+0x4c>
          {
            status = RTC_lRegister_Callbacks(handler);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f858 	bl	8007b5c <RTC_lRegister_Callbacks>
 8007aac:	4603      	mov	r3, r0
 8007aae:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 8007ab0:	7bfb      	ldrb	r3, [r7, #15]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d111      	bne.n	8007ada <RTC_Init+0x76>
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	685b      	ldr	r3, [r3, #4]
 8007aba:	781b      	ldrb	r3, [r3, #0]
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d101      	bne.n	8007ac4 <RTC_Init+0x60>
            {
              RTC_Start();
 8007ac0:	f7ff ffca 	bl	8007a58 <RTC_Start>
            }
            handler->initialized = true;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 8007aca:	2300      	movs	r3, #0
 8007acc:	73bb      	strb	r3, [r7, #14]
 8007ace:	e004      	b.n	8007ada <RTC_Init+0x76>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	73bb      	strb	r3, [r7, #14]
 8007ad4:	e001      	b.n	8007ada <RTC_Init+0x76>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 8007ada:	7bbb      	ldrb	r3, [r7, #14]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b084      	sub	sp, #16
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 8007aec:	2300      	movs	r3, #0
 8007aee:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	785b      	ldrb	r3, [r3, #1]
 8007af6:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	789b      	ldrb	r3, [r3, #2]
 8007afe:	005b      	lsls	r3, r3, #1
 8007b00:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	78db      	ldrb	r3, [r3, #3]
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	791b      	ldrb	r3, [r3, #4]
 8007b12:	00db      	lsls	r3, r3, #3
 8007b14:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	795b      	ldrb	r3, [r3, #5]
 8007b1c:	015b      	lsls	r3, r3, #5
 8007b1e:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	799b      	ldrb	r3, [r3, #6]
 8007b26:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d004      	beq.n	8007b3c <RTC_lConfigureInterrupts+0x58>
  {
    XMC_RTC_EnableEvent(regval);
 8007b32:	68b8      	ldr	r0, [r7, #8]
 8007b34:	f7fa fb76 	bl	8002224 <XMC_RTC_EnableEvent>
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	73fb      	strb	r3, [r7, #15]
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	79db      	ldrb	r3, [r3, #7]
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d105      	bne.n	8007b52 <RTC_lConfigureInterrupts+0x6e>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
 8007b46:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007b4a:	f7fa fb6b 	bl	8002224 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	73fb      	strb	r3, [r7, #15]
	}


  return (interrupt_configured);
 8007b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b54:	4618      	mov	r0, r3
 8007b56:	3710      	adds	r7, #16
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	bd80      	pop	{r7, pc}

08007b5c <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b085      	sub	sp, #20
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	73fb      	strb	r3, [r7, #15]
  ai_status = XMC_RTC_STATUS_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73bb      	strb	r3, [r7, #14]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
 8007b6c:	7bfa      	ldrb	r2, [r7, #15]
 8007b6e:	7bbb      	ldrb	r3, [r7, #14]
 8007b70:	4013      	ands	r3, r2
 8007b72:	b2db      	uxtb	r3, r3
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <RTC_SetTime>:

/*
 *  This function is used to set RTC time.
 */
RTC_STATUS_t RTC_SetTime(XMC_RTC_TIME_t *current_time)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t status = RTC_STATUS_SUCCESS;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	75fb      	strb	r3, [r7, #23]
  XMC_RTC_TIME_t time_val;

  XMC_ASSERT("RTC_SetTime: NULL pointer", current_time != NULL);

  /* copy to local structure to keep data safe */
  time_val.year = current_time->year;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	88db      	ldrh	r3, [r3, #6]
 8007b90:	827b      	strh	r3, [r7, #18]
  time_val.month = current_time->month;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	795b      	ldrb	r3, [r3, #5]
 8007b96:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007b9a:	b2da      	uxtb	r2, r3
 8007b9c:	7c7b      	ldrb	r3, [r7, #17]
 8007b9e:	f362 0303 	bfi	r3, r2, #0, #4
 8007ba2:	747b      	strb	r3, [r7, #17]
  time_val.days = current_time->days;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	78db      	ldrb	r3, [r3, #3]
 8007ba8:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	7bfb      	ldrb	r3, [r7, #15]
 8007bb0:	f362 0304 	bfi	r3, r2, #0, #5
 8007bb4:	73fb      	strb	r3, [r7, #15]
  time_val.hours = current_time->hours;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	789b      	ldrb	r3, [r3, #2]
 8007bba:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	7bbb      	ldrb	r3, [r7, #14]
 8007bc2:	f362 0304 	bfi	r3, r2, #0, #5
 8007bc6:	73bb      	strb	r3, [r7, #14]
  time_val.minutes = current_time->minutes;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	785b      	ldrb	r3, [r3, #1]
 8007bcc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	7b7b      	ldrb	r3, [r7, #13]
 8007bd4:	f362 0305 	bfi	r3, r2, #0, #6
 8007bd8:	737b      	strb	r3, [r7, #13]
  time_val.seconds = current_time->seconds;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f3c3 0305 	ubfx	r3, r3, #0, #6
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	7b3b      	ldrb	r3, [r7, #12]
 8007be6:	f362 0305 	bfi	r3, r2, #0, #6
 8007bea:	733b      	strb	r3, [r7, #12]
  time_val.daysofweek = current_time->daysofweek;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	791b      	ldrb	r3, [r3, #4]
 8007bf0:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	7c3b      	ldrb	r3, [r7, #16]
 8007bf8:	f362 0302 	bfi	r3, r2, #0, #3
 8007bfc:	743b      	strb	r3, [r7, #16]

  if ((time_val.days != 0U) && (time_val.month != 0U))
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	f003 031f 	and.w	r3, r3, #31
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d025      	beq.n	8007c56 <RTC_SetTime+0xd6>
 8007c0a:	7c7b      	ldrb	r3, [r7, #17]
 8007c0c:	f003 030f 	and.w	r3, r3, #15
 8007c10:	b2db      	uxtb	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01f      	beq.n	8007c56 <RTC_SetTime+0xd6>
  {
    time_val.days = time_val.days - 1U;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	b2da      	uxtb	r2, r3
 8007c28:	7bfb      	ldrb	r3, [r7, #15]
 8007c2a:	f362 0304 	bfi	r3, r2, #0, #5
 8007c2e:	73fb      	strb	r3, [r7, #15]
    time_val.month = time_val.month - 1U;
 8007c30:	7c7b      	ldrb	r3, [r7, #17]
 8007c32:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	3b01      	subs	r3, #1
 8007c3a:	b2db      	uxtb	r3, r3
 8007c3c:	f003 030f 	and.w	r3, r3, #15
 8007c40:	b2da      	uxtb	r2, r3
 8007c42:	7c7b      	ldrb	r3, [r7, #17]
 8007c44:	f362 0303 	bfi	r3, r2, #0, #4
 8007c48:	747b      	strb	r3, [r7, #17]

    XMC_RTC_SetTime(&time_val);
 8007c4a:	f107 030c 	add.w	r3, r7, #12
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f7fc fe14 	bl	800487c <XMC_RTC_SetTime>
 8007c54:	e001      	b.n	8007c5a <RTC_SetTime+0xda>
  }
  else
  {
    status = RTC_STATUS_FAILURE;
 8007c56:	2301      	movs	r3, #1
 8007c58:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8007c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <RTC_GetTime>:
}
/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b082      	sub	sp, #8
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7fc fe27 	bl	80048c0 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	78db      	ldrb	r3, [r3, #3]
 8007c76:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	b2db      	uxtb	r3, r3
 8007c80:	f003 031f 	and.w	r3, r3, #31
 8007c84:	b2d9      	uxtb	r1, r3
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	78d3      	ldrb	r3, [r2, #3]
 8007c8a:	f361 0304 	bfi	r3, r1, #0, #5
 8007c8e:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	795b      	ldrb	r3, [r3, #5]
 8007c94:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	f003 030f 	and.w	r3, r3, #15
 8007ca2:	b2d9      	uxtb	r1, r3
 8007ca4:	687a      	ldr	r2, [r7, #4]
 8007ca6:	7953      	ldrb	r3, [r2, #5]
 8007ca8:	f361 0303 	bfi	r3, r1, #0, #4
 8007cac:	7153      	strb	r3, [r2, #5]
}
 8007cae:	3708      	adds	r7, #8
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007cb8:	4b04      	ldr	r3, [pc, #16]	; (8007ccc <__NVIC_GetPriorityGrouping+0x18>)
 8007cba:	68db      	ldr	r3, [r3, #12]
 8007cbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007cc0:	0a1b      	lsrs	r3, r3, #8
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cca:	4770      	bx	lr
 8007ccc:	e000ed00 	.word	0xe000ed00

08007cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	db0b      	blt.n	8007cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ce2:	4908      	ldr	r1, [pc, #32]	; (8007d04 <__NVIC_EnableIRQ+0x34>)
 8007ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ce8:	095b      	lsrs	r3, r3, #5
 8007cea:	79fa      	ldrb	r2, [r7, #7]
 8007cec:	f002 021f 	and.w	r2, r2, #31
 8007cf0:	2001      	movs	r0, #1
 8007cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8007cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr
 8007d04:	e000e100 	.word	0xe000e100

08007d08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	db0a      	blt.n	8007d32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d1c:	490d      	ldr	r1, [pc, #52]	; (8007d54 <__NVIC_SetPriority+0x4c>)
 8007d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	b2d2      	uxtb	r2, r2
 8007d26:	0092      	lsls	r2, r2, #2
 8007d28:	b2d2      	uxtb	r2, r2
 8007d2a:	440b      	add	r3, r1
 8007d2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8007d30:	e00a      	b.n	8007d48 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d32:	4909      	ldr	r1, [pc, #36]	; (8007d58 <__NVIC_SetPriority+0x50>)
 8007d34:	79fb      	ldrb	r3, [r7, #7]
 8007d36:	f003 030f 	and.w	r3, r3, #15
 8007d3a:	3b04      	subs	r3, #4
 8007d3c:	683a      	ldr	r2, [r7, #0]
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	0092      	lsls	r2, r2, #2
 8007d42:	b2d2      	uxtb	r2, r2
 8007d44:	440b      	add	r3, r1
 8007d46:	761a      	strb	r2, [r3, #24]
  }
}
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	e000e100 	.word	0xe000e100
 8007d58:	e000ed00 	.word	0xe000ed00

08007d5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b089      	sub	sp, #36	; 0x24
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	f1c3 0307 	rsb	r3, r3, #7
 8007d76:	2b06      	cmp	r3, #6
 8007d78:	bf28      	it	cs
 8007d7a:	2306      	movcs	r3, #6
 8007d7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	3306      	adds	r3, #6
 8007d82:	2b06      	cmp	r3, #6
 8007d84:	d902      	bls.n	8007d8c <NVIC_EncodePriority+0x30>
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	3b01      	subs	r3, #1
 8007d8a:	e000      	b.n	8007d8e <NVIC_EncodePriority+0x32>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007d90:	69bb      	ldr	r3, [r7, #24]
 8007d92:	2201      	movs	r2, #1
 8007d94:	fa02 f303 	lsl.w	r3, r2, r3
 8007d98:	1e5a      	subs	r2, r3, #1
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	401a      	ands	r2, r3
 8007d9e:	697b      	ldr	r3, [r7, #20]
 8007da0:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	2101      	movs	r1, #1
 8007da6:	fa01 f303 	lsl.w	r3, r1, r3
 8007daa:	1e59      	subs	r1, r3, #1
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8007db0:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3724      	adds	r7, #36	; 0x24
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr
 8007dbe:	bf00      	nop

08007dc0 <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b082      	sub	sp, #8
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	b25b      	sxtb	r3, r3
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7ff ff7e 	bl	8007cd0 <__NVIC_EnableIRQ>
}
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
 8007dda:	bf00      	nop

08007ddc <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8007ddc:	b590      	push	{r4, r7, lr}
 8007dde:	b083      	sub	sp, #12
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	781c      	ldrb	r4, [r3, #0]
 8007de8:	f7ff ff64 	bl	8007cb4 <__NVIC_GetPriorityGrouping>
 8007dec:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007df2:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007df8:	4608      	mov	r0, r1
 8007dfa:	4611      	mov	r1, r2
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	f7ff ffad 	bl	8007d5c <NVIC_EncodePriority>
 8007e02:	4602      	mov	r2, r0
 8007e04:	b263      	sxtb	r3, r4
 8007e06:	4618      	mov	r0, r3
 8007e08:	4611      	mov	r1, r2
 8007e0a:	f7ff ff7d 	bl	8007d08 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	78db      	ldrb	r3, [r3, #3]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d002      	beq.n	8007e1c <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff ffd2 	bl	8007dc0 <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	370c      	adds	r7, #12
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd90      	pop	{r4, r7, pc}
 8007e26:	bf00      	nop

08007e28 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b083      	sub	sp, #12
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007e36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	bf14      	ite	ne
 8007e3e:	2301      	movne	r3, #1
 8007e40:	2300      	moveq	r3, #0
 8007e42:	b2db      	uxtb	r3, r3
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	bf14      	ite	ne
 8007e66:	2301      	movne	r3, #1
 8007e68:	2300      	moveq	r3, #0
 8007e6a:	b2db      	uxtb	r3, r3
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8007e86:	f003 0308 	and.w	r3, r3, #8
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	bf14      	ite	ne
 8007e8e:	2301      	movne	r3, #1
 8007e90:	2300      	moveq	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b083      	sub	sp, #12
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	370c      	adds	r7, #12
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb6:	4770      	bx	lr

08007eb8 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007eb8:	b480      	push	{r7}
 8007eba:	b083      	sub	sp, #12
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
 8007ec0:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007ece:	370c      	adds	r7, #12
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed6:	4770      	bx	lr

08007ed8 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f7ff ff9f 	bl	8007e28 <XMC_USIC_CH_TXFIFO_IsFull>
 8007eea:	4603      	mov	r3, r0
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3708      	adds	r7, #8
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b082      	sub	sp, #8
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ffb9 	bl	8007e78 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8007f06:	4603      	mov	r3, r0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3708      	adds	r7, #8
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fc fc45 	bl	80047ac <XMC_I2C_CH_GetReceivedData>
 8007f22:	4603      	mov	r3, r0
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3708      	adds	r7, #8
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b082      	sub	sp, #8
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	460b      	mov	r3, r1
 8007f36:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681a      	ldr	r2, [r3, #0]
 8007f3c:	78fb      	ldrb	r3, [r7, #3]
 8007f3e:	4610      	mov	r0, r2
 8007f40:	4619      	mov	r1, r3
 8007f42:	f7fc fbc1 	bl	80046c8 <XMC_I2C_CH_MasterTransmit>
}
 8007f46:	3708      	adds	r7, #8
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f7fc fbdb 	bl	8004714 <XMC_I2C_CH_MasterReceiveAck>
}
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4618      	mov	r0, r3
 8007f72:	f7fc fbf5 	bl	8004760 <XMC_I2C_CH_MasterReceiveNack>
}
 8007f76:	3708      	adds	r7, #8
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b082      	sub	sp, #8
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4618      	mov	r0, r3
 8007f8a:	2110      	movs	r1, #16
 8007f8c:	f7ff ff94 	bl	8007eb8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4618      	mov	r0, r3
 8007f96:	f7fc fb71 	bl	800467c <XMC_I2C_CH_MasterStop>
}
 8007f9a:	3708      	adds	r7, #8
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bd80      	pop	{r7, pc}

08007fa0 <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b084      	sub	sp, #16
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	4613      	mov	r3, r2
 8007fac:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	2104      	movs	r1, #4
 8007fb6:	f7ff ff7f 	bl	8007eb8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6819      	ldr	r1, [r3, #0]
 8007fbe:	68bb      	ldr	r3, [r7, #8]
 8007fc0:	b29a      	uxth	r2, r3
 8007fc2:	79fb      	ldrb	r3, [r7, #7]
 8007fc4:	4608      	mov	r0, r1
 8007fc6:	4611      	mov	r1, r2
 8007fc8:	461a      	mov	r2, r3
 8007fca:	f7fc faef 	bl	80045ac <XMC_I2C_CH_MasterStart>
}
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	60f8      	str	r0, [r7, #12]
 8007fdc:	60b9      	str	r1, [r7, #8]
 8007fde:	4613      	mov	r3, r2
 8007fe0:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	2108      	movs	r1, #8
 8007fea:	f7ff ff65 	bl	8007eb8 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	6819      	ldr	r1, [r3, #0]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	b29a      	uxth	r2, r3
 8007ff6:	79fb      	ldrb	r3, [r7, #7]
 8007ff8:	4608      	mov	r0, r1
 8007ffa:	4611      	mov	r1, r2
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	f7fc fb09 	bl	8004614 <XMC_I2C_CH_MasterRepeatedStart>
}
 8008002:	3710      	adds	r7, #16
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b084      	sub	sp, #16
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d006      	beq.n	8008024 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 800801e:	2300      	movs	r3, #0
 8008020:	73fb      	strb	r3, [r7, #15]
 8008022:	e001      	b.n	8008028 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8008024:	2301      	movs	r3, #1
 8008026:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop

08008034 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4618      	mov	r0, r3
 8008044:	f7ff ff2c 	bl	8007ea0 <XMC_I2C_CH_GetStatusFlag>
 8008048:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 800804a:	68fa      	ldr	r2, [r7, #12]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	4013      	ands	r3, r2
}
 8008050:	4618      	mov	r0, r3
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4618      	mov	r0, r3
 8008068:	6839      	ldr	r1, [r7, #0]
 800806a:	f7ff ff25 	bl	8007eb8 <XMC_I2C_CH_ClearStatusFlag>
}
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af02      	add	r7, sp, #8
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	607a      	str	r2, [r7, #4]
 800807e:	603b      	str	r3, [r7, #0]
 8008080:	460b      	mov	r3, r1
 8008082:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8008084:	2302      	movs	r3, #2
 8008086:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008090:	2b00      	cmp	r3, #0
 8008092:	d013      	beq.n	80080bc <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	685b      	ldr	r3, [r3, #4]
 8008098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800809c:	2b01      	cmp	r3, #1
 800809e:	d00d      	beq.n	80080bc <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 80080a0:	7afa      	ldrb	r2, [r7, #11]
 80080a2:	6a3b      	ldr	r3, [r7, #32]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080aa:	9301      	str	r3, [sp, #4]
 80080ac:	68f8      	ldr	r0, [r7, #12]
 80080ae:	4611      	mov	r1, r2
 80080b0:	687a      	ldr	r2, [r7, #4]
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	f000 f88c 	bl	80081d0 <I2C_MASTER_lStartTransmitPolling>
 80080b8:	4603      	mov	r3, r0
 80080ba:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 80080bc:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 80080be:	4618      	mov	r0, r3
 80080c0:	3718      	adds	r7, #24
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
 80080c6:	bf00      	nop

080080c8 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af04      	add	r7, sp, #16
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	607a      	str	r2, [r7, #4]
 80080d2:	603b      	str	r3, [r7, #0]
 80080d4:	460b      	mov	r3, r1
 80080d6:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 80080d8:	2302      	movs	r3, #2
 80080da:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d016      	beq.n	8008116 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	d010      	beq.n	8008116 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 80080f4:	7afa      	ldrb	r2, [r7, #11]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	9300      	str	r3, [sp, #0]
 80080fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80080fe:	9301      	str	r3, [sp, #4]
 8008100:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	4611      	mov	r1, r2
 800810a:	687a      	ldr	r2, [r7, #4]
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	f000 f929 	bl	8008364 <I2C_MASTER_lStartReceivePolling>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8008116:	7dfb      	ldrb	r3, [r7, #23]
}
 8008118:	4618      	mov	r0, r3
 800811a:	3718      	adds	r7, #24
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	4613      	mov	r3, r2
 800812c:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4618      	mov	r0, r3
 8008134:	210c      	movs	r1, #12
 8008136:	f7ff febf 	bl	8007eb8 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	689b      	ldr	r3, [r3, #8]
 800813e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b00      	cmp	r3, #0
 8008146:	d009      	beq.n	800815c <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	b29b      	uxth	r3, r3
 800814c:	461a      	mov	r2, r3
 800814e:	79fb      	ldrb	r3, [r7, #7]
 8008150:	68f8      	ldr	r0, [r7, #12]
 8008152:	4611      	mov	r1, r2
 8008154:	461a      	mov	r2, r3
 8008156:	f7ff ff3d 	bl	8007fd4 <I2C_MASTER_SendRepeatedStart>
 800815a:	e00d      	b.n	8008178 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	2201      	movs	r2, #1
 8008162:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	b29b      	uxth	r3, r3
 800816a:	461a      	mov	r2, r3
 800816c:	79fb      	ldrb	r3, [r7, #7]
 800816e:	68f8      	ldr	r0, [r7, #12]
 8008170:	4611      	mov	r1, r2
 8008172:	461a      	mov	r2, r3
 8008174:	f7ff ff14 	bl	8007fa0 <I2C_MASTER_SendStart>
  }
}
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop

08008180 <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8008180:	b480      	push	{r7}
 8008182:	b085      	sub	sp, #20
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8008188:	2300      	movs	r3, #0
 800818a:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	685b      	ldr	r3, [r3, #4]
 8008190:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d007      	beq.n	80081a8 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	d001      	beq.n	80081a8 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	687a      	ldr	r2, [r7, #4]
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80081b2:	f042 0202 	orr.w	r2, r2, #2
 80081b6:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2202      	movs	r2, #2
 80081be:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3714      	adds	r7, #20
 80081c6:	46bd      	mov	sp, r7
 80081c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop

080081d0 <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b086      	sub	sp, #24
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	60f8      	str	r0, [r7, #12]
 80081d8:	607a      	str	r2, [r7, #4]
 80081da:	603b      	str	r3, [r7, #0]
 80081dc:	460b      	mov	r3, r1
 80081de:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 80081e0:	2302      	movs	r3, #2
 80081e2:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 80081e8:	7afb      	ldrb	r3, [r7, #11]
 80081ea:	f083 0301 	eor.w	r3, r3, #1
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d009      	beq.n	8008208 <I2C_MASTER_lStartTransmitPolling+0x38>
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	f083 0301 	eor.w	r3, r3, #1
 8008202:	b2db      	uxtb	r3, r3
 8008204:	2b00      	cmp	r3, #0
 8008206:	d105      	bne.n	8008214 <I2C_MASTER_lStartTransmitPolling+0x44>
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d002      	beq.n	8008214 <I2C_MASTER_lStartTransmitPolling+0x44>
 800820e:	6a3b      	ldr	r3, [r7, #32]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d102      	bne.n	800821a <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8008214:	2301      	movs	r3, #1
 8008216:	74fb      	strb	r3, [r7, #19]
 8008218:	e09e      	b.n	8008358 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 800821a:	7afb      	ldrb	r3, [r7, #11]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d02c      	beq.n	800827a <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008228:	b2db      	uxtb	r3, r3
 800822a:	f083 0301 	eor.w	r3, r3, #1
 800822e:	b2db      	uxtb	r3, r3
 8008230:	2b00      	cmp	r3, #0
 8008232:	d022      	beq.n	800827a <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8008234:	68f8      	ldr	r0, [r7, #12]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f7ff ff71 	bl	8008120 <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 800823e:	bf00      	nop
 8008240:	68f8      	ldr	r0, [r7, #12]
 8008242:	f44f 7108 	mov.w	r1, #544	; 0x220
 8008246:	f7ff fef5 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 800824a:	4603      	mov	r3, r0
 800824c:	2b00      	cmp	r3, #0
 800824e:	d0f7      	beq.n	8008240 <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	2120      	movs	r1, #32
 8008254:	f7ff feee 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d008      	beq.n	8008270 <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	2120      	movs	r1, #32
 8008262:	f7ff fef9 	bl	8008058 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f7ff ff8a 	bl	8008180 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 800826c:	2301      	movs	r3, #1
 800826e:	e074      	b.n	800835a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8008270:	68f8      	ldr	r0, [r7, #12]
 8008272:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008276:	f7ff feef 	bl	8008058 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008282:	2b00      	cmp	r3, #0
 8008284:	d12e      	bne.n	80082e4 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8008286:	e028      	b.n	80082da <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8008288:	683a      	ldr	r2, [r7, #0]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	68f8      	ldr	r0, [r7, #12]
 8008292:	4619      	mov	r1, r3
 8008294:	f7ff fe4a 	bl	8007f2c <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8008298:	bf00      	nop
 800829a:	68f8      	ldr	r0, [r7, #12]
 800829c:	f44f 7108 	mov.w	r1, #544	; 0x220
 80082a0:	f7ff fec8 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 80082a4:	4603      	mov	r3, r0
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d0f7      	beq.n	800829a <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 80082aa:	68f8      	ldr	r0, [r7, #12]
 80082ac:	2120      	movs	r1, #32
 80082ae:	f7ff fec1 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 80082b8:	68f8      	ldr	r0, [r7, #12]
 80082ba:	2120      	movs	r1, #32
 80082bc:	f7ff fecc 	bl	8008058 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 80082c0:	68f8      	ldr	r0, [r7, #12]
 80082c2:	f7ff ff5d 	bl	8008180 <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 80082c6:	2301      	movs	r3, #1
 80082c8:	e047      	b.n	800835a <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082d0:	f7ff fec2 	bl	8008058 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	3301      	adds	r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 80082da:	697a      	ldr	r2, [r7, #20]
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	429a      	cmp	r2, r3
 80082e0:	d3d2      	bcc.n	8008288 <I2C_MASTER_lStartTransmitPolling+0xb8>
 80082e2:	e02b      	b.n	800833c <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 80082e4:	e01a      	b.n	800831c <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80082e6:	e010      	b.n	800830a <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	429a      	cmp	r2, r3
 80082ee:	d20b      	bcs.n	8008308 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 80082f0:	683a      	ldr	r2, [r7, #0]
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	4413      	add	r3, r2
 80082f6:	781b      	ldrb	r3, [r3, #0]
 80082f8:	68f8      	ldr	r0, [r7, #12]
 80082fa:	4619      	mov	r1, r3
 80082fc:	f7ff fe16 	bl	8007f2c <I2C_MASTER_TransmitByte>
            buffer_index++;
 8008300:	697b      	ldr	r3, [r7, #20]
 8008302:	3301      	adds	r3, #1
 8008304:	617b      	str	r3, [r7, #20]
 8008306:	e000      	b.n	800830a <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 8008308:	e008      	b.n	800831c <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f7ff fde4 	bl	8007ed8 <I2C_MASTER_IsTXFIFOFull>
 8008310:	4603      	mov	r3, r0
 8008312:	f083 0301 	eor.w	r3, r3, #1
 8008316:	b2db      	uxtb	r3, r3
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1e5      	bne.n	80082e8 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	429a      	cmp	r2, r3
 8008322:	d3e0      	bcc.n	80082e6 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8008324:	bf00      	nop
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f7ff fd90 	bl	8007e50 <XMC_USIC_CH_TXFIFO_IsEmpty>
 8008330:	4603      	mov	r3, r0
 8008332:	f083 0301 	eor.w	r3, r3, #1
 8008336:	b2db      	uxtb	r3, r3
 8008338:	2b00      	cmp	r3, #0
 800833a:	d1f4      	bne.n	8008326 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 800833c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008340:	2b00      	cmp	r3, #0
 8008342:	d007      	beq.n	8008354 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	2200      	movs	r2, #0
 800834a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 800834e:	68f8      	ldr	r0, [r7, #12]
 8008350:	f7ff fe14 	bl	8007f7c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8008354:	2300      	movs	r3, #0
 8008356:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 8008358:	7cfb      	ldrb	r3, [r7, #19]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop

08008364 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8008364:	b590      	push	{r4, r7, lr}
 8008366:	b089      	sub	sp, #36	; 0x24
 8008368:	af00      	add	r7, sp, #0
 800836a:	60f8      	str	r0, [r7, #12]
 800836c:	607a      	str	r2, [r7, #4]
 800836e:	603b      	str	r3, [r7, #0]
 8008370:	460b      	mov	r3, r1
 8008372:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 8008374:	2302      	movs	r3, #2
 8008376:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 8008378:	7afb      	ldrb	r3, [r7, #11]
 800837a:	f083 0301 	eor.w	r3, r3, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <I2C_MASTER_lStartReceivePolling+0x34>
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800838c:	b2db      	uxtb	r3, r3
 800838e:	f083 0301 	eor.w	r3, r3, #1
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d105      	bne.n	80083a4 <I2C_MASTER_lStartReceivePolling+0x40>
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d002      	beq.n	80083a4 <I2C_MASTER_lStartReceivePolling+0x40>
 800839e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d102      	bne.n	80083aa <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 80083a4:	2301      	movs	r3, #1
 80083a6:	77fb      	strb	r3, [r7, #31]
 80083a8:	e0b8      	b.n	800851c <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 80083b2:	7afb      	ldrb	r3, [r7, #11]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d022      	beq.n	80083fe <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f7ff feaf 	bl	8008120 <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 80083c2:	bf00      	nop
 80083c4:	68f8      	ldr	r0, [r7, #12]
 80083c6:	f44f 7108 	mov.w	r1, #544	; 0x220
 80083ca:	f7ff fe33 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0f7      	beq.n	80083c4 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 80083d4:	68f8      	ldr	r0, [r7, #12]
 80083d6:	2120      	movs	r1, #32
 80083d8:	f7ff fe2c 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 80083dc:	4603      	mov	r3, r0
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d008      	beq.n	80083f4 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 80083e2:	68f8      	ldr	r0, [r7, #12]
 80083e4:	2120      	movs	r1, #32
 80083e6:	f7ff fe37 	bl	8008058 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f7ff fec8 	bl	8008180 <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 80083f0:	2301      	movs	r3, #1
 80083f2:	e094      	b.n	800851e <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 80083f4:	68f8      	ldr	r0, [r7, #12]
 80083f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80083fa:	f7ff fe2d 	bl	8008058 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8008406:	2b00      	cmp	r3, #0
 8008408:	d13a      	bne.n	8008480 <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 800840a:	e034      	b.n	8008476 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 800840c:	69bb      	ldr	r3, [r7, #24]
 800840e:	1c5a      	adds	r2, r3, #1
 8008410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008412:	429a      	cmp	r2, r3
 8008414:	d107      	bne.n	8008426 <I2C_MASTER_lStartReceivePolling+0xc2>
 8008416:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800841a:	2b00      	cmp	r3, #0
 800841c:	d003      	beq.n	8008426 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 800841e:	68f8      	ldr	r0, [r7, #12]
 8008420:	f7ff fda0 	bl	8007f64 <I2C_MASTER_ReceiveNACK>
 8008424:	e002      	b.n	800842c <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f7ff fd90 	bl	8007f4c <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 800842c:	bf00      	nop
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008434:	f7ff fdfe 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d107      	bne.n	800844e <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008444:	f7ff fdf6 	bl	8008034 <I2C_MASTER_GetFlagStatus>
 8008448:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 800844a:	2b00      	cmp	r3, #0
 800844c:	d0ef      	beq.n	800842e <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 800844e:	68f8      	ldr	r0, [r7, #12]
 8008450:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008454:	f7ff fe00 	bl	8008058 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8008458:	68f8      	ldr	r0, [r7, #12]
 800845a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800845e:	f7ff fdfb 	bl	8008058 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	1c5a      	adds	r2, r3, #1
 8008466:	61ba      	str	r2, [r7, #24]
 8008468:	683a      	ldr	r2, [r7, #0]
 800846a:	18d4      	adds	r4, r2, r3
 800846c:	68f8      	ldr	r0, [r7, #12]
 800846e:	f7ff fd4f 	bl	8007f10 <I2C_MASTER_GetReceivedByte>
 8008472:	4603      	mov	r3, r0
 8008474:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 8008476:	69ba      	ldr	r2, [r7, #24]
 8008478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800847a:	429a      	cmp	r2, r3
 800847c:	d3c6      	bcc.n	800840c <I2C_MASTER_lStartReceivePolling+0xa8>
 800847e:	e03f      	b.n	8008500 <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 8008484:	e038      	b.n	80084f8 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8008486:	e018      	b.n	80084ba <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848c:	429a      	cmp	r2, r3
 800848e:	d213      	bcs.n	80084b8 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	1c5a      	adds	r2, r3, #1
 8008494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008496:	429a      	cmp	r2, r3
 8008498:	d107      	bne.n	80084aa <I2C_MASTER_lStartReceivePolling+0x146>
 800849a:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d003      	beq.n	80084aa <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	f7ff fd5e 	bl	8007f64 <I2C_MASTER_ReceiveNACK>
 80084a8:	e002      	b.n	80084b0 <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 80084aa:	68f8      	ldr	r0, [r7, #12]
 80084ac:	f7ff fd4e 	bl	8007f4c <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	3301      	adds	r3, #1
 80084b4:	617b      	str	r3, [r7, #20]
 80084b6:	e000      	b.n	80084ba <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 80084b8:	e008      	b.n	80084cc <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 80084ba:	68f8      	ldr	r0, [r7, #12]
 80084bc:	f7ff fd0c 	bl	8007ed8 <I2C_MASTER_IsTXFIFOFull>
 80084c0:	4603      	mov	r3, r0
 80084c2:	f083 0301 	eor.w	r3, r3, #1
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1dd      	bne.n	8008488 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 80084cc:	e010      	b.n	80084f0 <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 80084ce:	bf00      	nop
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fd0f 	bl	8007ef4 <I2C_MASTER_IsRXFIFOEmpty>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f9      	bne.n	80084d0 <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	1c5a      	adds	r2, r3, #1
 80084e0:	61ba      	str	r2, [r7, #24]
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	18d4      	adds	r4, r2, r3
 80084e6:	68f8      	ldr	r0, [r7, #12]
 80084e8:	f7ff fd12 	bl	8007f10 <I2C_MASTER_GetReceivedByte>
 80084ec:	4603      	mov	r3, r0
 80084ee:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 80084f0:	69ba      	ldr	r2, [r7, #24]
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	429a      	cmp	r2, r3
 80084f6:	d3ea      	bcc.n	80084ce <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d3c2      	bcc.n	8008486 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 8008500:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	689b      	ldr	r3, [r3, #8]
 800850c:	2200      	movs	r2, #0
 800850e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8008512:	68f8      	ldr	r0, [r7, #12]
 8008514:	f7ff fd32 	bl	8007f7c <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8008518:	2300      	movs	r3, #0
 800851a:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 800851c:	7ffb      	ldrb	r3, [r7, #31]
}
 800851e:	4618      	mov	r0, r3
 8008520:	3724      	adds	r7, #36	; 0x24
 8008522:	46bd      	mov	sp, r7
 8008524:	bd90      	pop	{r4, r7, pc}
 8008526:	bf00      	nop

08008528 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8008528:	b480      	push	{r7}
 800852a:	b083      	sub	sp, #12
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
 8008530:	460b      	mov	r3, r1
 8008532:	70fb      	strb	r3, [r7, #3]
 8008534:	4613      	mov	r3, r2
 8008536:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8008538:	78f8      	ldrb	r0, [r7, #3]
 800853a:	78fb      	ldrb	r3, [r7, #3]
 800853c:	687a      	ldr	r2, [r7, #4]
 800853e:	3306      	adds	r3, #6
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	4413      	add	r3, r2
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800854a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800854c:	431a      	orrs	r2, r3
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	1d83      	adds	r3, r0, #6
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	440b      	add	r3, r1
 8008556:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr
 8008562:	bf00      	nop

08008564 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008574:	f023 020f 	bic.w	r2, r3, #15
 8008578:	78fb      	ldrb	r3, [r7, #3]
 800857a:	431a      	orrs	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop

0800858c <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	2201      	movs	r2, #1
 800859c:	f7fb ff5e 	bl	800445c <XMC_I2C_CH_InitEx>
}
 80085a0:	3708      	adds	r7, #8
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop

080085a8 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	2104      	movs	r1, #4
 80085b4:	f7ff ffd6 	bl	8008564 <XMC_USIC_CH_SetMode>
}
 80085b8:	3708      	adds	r7, #8
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop

080085c0 <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 80085c4:	4805      	ldr	r0, [pc, #20]	; (80085dc <I2C_MASTER_0_disable_io+0x1c>)
 80085c6:	2105      	movs	r1, #5
 80085c8:	2200      	movs	r2, #0
 80085ca:	f7fb fec5 	bl	8004358 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 80085ce:	4803      	ldr	r0, [pc, #12]	; (80085dc <I2C_MASTER_0_disable_io+0x1c>)
 80085d0:	2104      	movs	r1, #4
 80085d2:	2200      	movs	r2, #0
 80085d4:	f7fb fec0 	bl	8004358 <XMC_GPIO_SetMode>
}
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	48028200 	.word	0x48028200

080085e0 <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 80085e4:	23d0      	movs	r3, #208	; 0xd0
 80085e6:	4806      	ldr	r0, [pc, #24]	; (8008600 <I2C_MASTER_0_enable_io+0x20>)
 80085e8:	2105      	movs	r1, #5
 80085ea:	461a      	mov	r2, r3
 80085ec:	f7fb feb4 	bl	8004358 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 80085f0:	23d0      	movs	r3, #208	; 0xd0
 80085f2:	4803      	ldr	r0, [pc, #12]	; (8008600 <I2C_MASTER_0_enable_io+0x20>)
 80085f4:	2104      	movs	r1, #4
 80085f6:	461a      	mov	r2, r3
 80085f8:	f7fb feae 	bl	8004358 <XMC_GPIO_SetMode>
}
 80085fc:	bd80      	pop	{r7, pc}
 80085fe:	bf00      	nop
 8008600:	48028200 	.word	0x48028200

08008604 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8008608:	4813      	ldr	r0, [pc, #76]	; (8008658 <I2C_MASTER_0_init+0x54>)
 800860a:	4914      	ldr	r1, [pc, #80]	; (800865c <I2C_MASTER_0_init+0x58>)
 800860c:	f7ff ffbe 	bl	800858c <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 8008610:	4811      	ldr	r0, [pc, #68]	; (8008658 <I2C_MASTER_0_init+0x54>)
 8008612:	2100      	movs	r1, #0
 8008614:	2201      	movs	r2, #1
 8008616:	f7ff ff87 	bl	8008528 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 800861a:	480f      	ldr	r0, [pc, #60]	; (8008658 <I2C_MASTER_0_init+0x54>)
 800861c:	2101      	movs	r1, #1
 800861e:	2200      	movs	r2, #0
 8008620:	f7ff ff82 	bl	8008528 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8008624:	480c      	ldr	r0, [pc, #48]	; (8008658 <I2C_MASTER_0_init+0x54>)
 8008626:	2110      	movs	r1, #16
 8008628:	2204      	movs	r2, #4
 800862a:	2301      	movs	r3, #1
 800862c:	f7fc fc0e 	bl	8004e4c <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 8008630:	4809      	ldr	r0, [pc, #36]	; (8008658 <I2C_MASTER_0_init+0x54>)
 8008632:	2100      	movs	r1, #0
 8008634:	2204      	movs	r2, #4
 8008636:	230f      	movs	r3, #15
 8008638:	f7fc fc30 	bl	8004e9c <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 800863c:	4806      	ldr	r0, [pc, #24]	; (8008658 <I2C_MASTER_0_init+0x54>)
 800863e:	f7ff ffb3 	bl	80085a8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 8008642:	4807      	ldr	r0, [pc, #28]	; (8008660 <I2C_MASTER_0_init+0x5c>)
 8008644:	2105      	movs	r1, #5
 8008646:	4a07      	ldr	r2, [pc, #28]	; (8008664 <I2C_MASTER_0_init+0x60>)
 8008648:	f7f9 fcd6 	bl	8001ff8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 800864c:	4804      	ldr	r0, [pc, #16]	; (8008660 <I2C_MASTER_0_init+0x5c>)
 800864e:	2104      	movs	r1, #4
 8008650:	4a05      	ldr	r2, [pc, #20]	; (8008668 <I2C_MASTER_0_init+0x64>)
 8008652:	f7f9 fcd1 	bl	8001ff8 <XMC_GPIO_Init>
}
 8008656:	bd80      	pop	{r7, pc}
 8008658:	40030200 	.word	0x40030200
 800865c:	080136a0 	.word	0x080136a0
 8008660:	48028200 	.word	0x48028200
 8008664:	08013688 	.word	0x08013688
 8008668:	08013694 	.word	0x08013694

0800866c <I2C_MASTER_1_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_1_disable_io(void)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008670:	4805      	ldr	r0, [pc, #20]	; (8008688 <I2C_MASTER_1_disable_io+0x1c>)
 8008672:	2105      	movs	r1, #5
 8008674:	2200      	movs	r2, #0
 8008676:	f7fb fe6f 	bl	8004358 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, XMC_GPIO_MODE_INPUT_TRISTATE);
 800867a:	4803      	ldr	r0, [pc, #12]	; (8008688 <I2C_MASTER_1_disable_io+0x1c>)
 800867c:	2106      	movs	r1, #6
 800867e:	2200      	movs	r2, #0
 8008680:	f7fb fe6a 	bl	8004358 <XMC_GPIO_SetMode>
}
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	48028300 	.word	0x48028300

0800868c <I2C_MASTER_1_enable_io>:

static void I2C_MASTER_1_enable_io(void)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, I2C_MASTER_1_sda_pin_config.mode);
 8008690:	23c8      	movs	r3, #200	; 0xc8
 8008692:	4806      	ldr	r0, [pc, #24]	; (80086ac <I2C_MASTER_1_enable_io+0x20>)
 8008694:	2105      	movs	r1, #5
 8008696:	461a      	mov	r2, r3
 8008698:	f7fb fe5e 	bl	8004358 <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, I2C_MASTER_1_scl_pin_config.mode);
 800869c:	23c8      	movs	r3, #200	; 0xc8
 800869e:	4803      	ldr	r0, [pc, #12]	; (80086ac <I2C_MASTER_1_enable_io+0x20>)
 80086a0:	2106      	movs	r1, #6
 80086a2:	461a      	mov	r2, r3
 80086a4:	f7fb fe58 	bl	8004358 <XMC_GPIO_SetMode>
}
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	48028300 	.word	0x48028300

080086b0 <I2C_MASTER_1_init>:
  .config = &I2C_MASTER_1_config,
  .runtime = &I2C_MASTER_1_runtime,
};

void I2C_MASTER_1_init(void)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C2_CH1, &I2C_MASTER_1_channel_config);
 80086b4:	4813      	ldr	r0, [pc, #76]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086b6:	4914      	ldr	r1, [pc, #80]	; (8008708 <I2C_MASTER_1_init+0x58>)
 80086b8:	f7ff ff68 	bl	800858c <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX0, 0);
 80086bc:	4811      	ldr	r0, [pc, #68]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086be:	2100      	movs	r1, #0
 80086c0:	2200      	movs	r2, #0
 80086c2:	f7ff ff31 	bl	8008528 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 80086c6:	480f      	ldr	r0, [pc, #60]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086c8:	2101      	movs	r1, #1
 80086ca:	2201      	movs	r2, #1
 80086cc:	f7ff ff2c 	bl	8008528 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH1,
 80086d0:	480c      	ldr	r0, [pc, #48]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086d2:	2110      	movs	r1, #16
 80086d4:	2204      	movs	r2, #4
 80086d6:	2301      	movs	r3, #1
 80086d8:	f7fc fbb8 	bl	8004e4c <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH1,
 80086dc:	4809      	ldr	r0, [pc, #36]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086de:	2100      	movs	r1, #0
 80086e0:	2204      	movs	r2, #4
 80086e2:	230f      	movs	r3, #15
 80086e4:	f7fc fbda 	bl	8004e9c <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C2_CH1);
 80086e8:	4806      	ldr	r0, [pc, #24]	; (8008704 <I2C_MASTER_1_init+0x54>)
 80086ea:	f7ff ff5d 	bl	80085a8 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, &I2C_MASTER_1_sda_pin_config);
 80086ee:	4807      	ldr	r0, [pc, #28]	; (800870c <I2C_MASTER_1_init+0x5c>)
 80086f0:	2105      	movs	r1, #5
 80086f2:	4a07      	ldr	r2, [pc, #28]	; (8008710 <I2C_MASTER_1_init+0x60>)
 80086f4:	f7f9 fc80 	bl	8001ff8 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, &I2C_MASTER_1_scl_pin_config);
 80086f8:	4804      	ldr	r0, [pc, #16]	; (800870c <I2C_MASTER_1_init+0x5c>)
 80086fa:	2106      	movs	r1, #6
 80086fc:	4a05      	ldr	r2, [pc, #20]	; (8008714 <I2C_MASTER_1_init+0x64>)
 80086fe:	f7f9 fc7b 	bl	8001ff8 <XMC_GPIO_Init>
}
 8008702:	bd80      	pop	{r7, pc}
 8008704:	48024200 	.word	0x48024200
 8008708:	080136ec 	.word	0x080136ec
 800870c:	48028300 	.word	0x48028300
 8008710:	080136d4 	.word	0x080136d4
 8008714:	080136e0 	.word	0x080136e0

08008718 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008718:	b480      	push	{r7}
 800871a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800871c:	4b04      	ldr	r3, [pc, #16]	; (8008730 <__NVIC_GetPriorityGrouping+0x18>)
 800871e:	68db      	ldr	r3, [r3, #12]
 8008720:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008724:	0a1b      	lsrs	r3, r3, #8
}
 8008726:	4618      	mov	r0, r3
 8008728:	46bd      	mov	sp, r7
 800872a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872e:	4770      	bx	lr
 8008730:	e000ed00 	.word	0xe000ed00

08008734 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	4603      	mov	r3, r0
 800873c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800873e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008742:	2b00      	cmp	r3, #0
 8008744:	db0b      	blt.n	800875e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008746:	4908      	ldr	r1, [pc, #32]	; (8008768 <__NVIC_EnableIRQ+0x34>)
 8008748:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800874c:	095b      	lsrs	r3, r3, #5
 800874e:	79fa      	ldrb	r2, [r7, #7]
 8008750:	f002 021f 	and.w	r2, r2, #31
 8008754:	2001      	movs	r0, #1
 8008756:	fa00 f202 	lsl.w	r2, r0, r2
 800875a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr
 8008768:	e000e100 	.word	0xe000e100

0800876c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	4603      	mov	r3, r0
 8008774:	6039      	str	r1, [r7, #0]
 8008776:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008778:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800877c:	2b00      	cmp	r3, #0
 800877e:	db0a      	blt.n	8008796 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008780:	490d      	ldr	r1, [pc, #52]	; (80087b8 <__NVIC_SetPriority+0x4c>)
 8008782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008786:	683a      	ldr	r2, [r7, #0]
 8008788:	b2d2      	uxtb	r2, r2
 800878a:	0092      	lsls	r2, r2, #2
 800878c:	b2d2      	uxtb	r2, r2
 800878e:	440b      	add	r3, r1
 8008790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008794:	e00a      	b.n	80087ac <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008796:	4909      	ldr	r1, [pc, #36]	; (80087bc <__NVIC_SetPriority+0x50>)
 8008798:	79fb      	ldrb	r3, [r7, #7]
 800879a:	f003 030f 	and.w	r3, r3, #15
 800879e:	3b04      	subs	r3, #4
 80087a0:	683a      	ldr	r2, [r7, #0]
 80087a2:	b2d2      	uxtb	r2, r2
 80087a4:	0092      	lsls	r2, r2, #2
 80087a6:	b2d2      	uxtb	r2, r2
 80087a8:	440b      	add	r3, r1
 80087aa:	761a      	strb	r2, [r3, #24]
  }
}
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	e000e100 	.word	0xe000e100
 80087bc:	e000ed00 	.word	0xe000ed00

080087c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b089      	sub	sp, #36	; 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	f003 0307 	and.w	r3, r3, #7
 80087d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80087d4:	69fb      	ldr	r3, [r7, #28]
 80087d6:	f1c3 0307 	rsb	r3, r3, #7
 80087da:	2b06      	cmp	r3, #6
 80087dc:	bf28      	it	cs
 80087de:	2306      	movcs	r3, #6
 80087e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	3306      	adds	r3, #6
 80087e6:	2b06      	cmp	r3, #6
 80087e8:	d902      	bls.n	80087f0 <NVIC_EncodePriority+0x30>
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	3b01      	subs	r3, #1
 80087ee:	e000      	b.n	80087f2 <NVIC_EncodePriority+0x32>
 80087f0:	2300      	movs	r3, #0
 80087f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	2201      	movs	r2, #1
 80087f8:	fa02 f303 	lsl.w	r3, r2, r3
 80087fc:	1e5a      	subs	r2, r3, #1
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	401a      	ands	r2, r3
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	2101      	movs	r1, #1
 800880a:	fa01 f303 	lsl.w	r3, r1, r3
 800880e:	1e59      	subs	r1, r3, #1
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008814:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008816:	4618      	mov	r0, r3
 8008818:	3724      	adds	r7, #36	; 0x24
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8008824:	b590      	push	{r4, r7, lr}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	7a1b      	ldrb	r3, [r3, #8]
 8008830:	f083 0301 	eor.w	r3, r3, #1
 8008834:	b2db      	uxtb	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	d024      	beq.n	8008884 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	4618      	mov	r0, r3
 8008840:	f7fb f900 	bl	8003a44 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	7a5c      	ldrb	r4, [r3, #9]
 8008848:	f7ff ff66 	bl	8008718 <__NVIC_GetPriorityGrouping>
 800884c:	4601      	mov	r1, r0
                                                        obj->config->priority,
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	685b      	ldr	r3, [r3, #4]
 8008852:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 8008854:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 800885c:	4608      	mov	r0, r1
 800885e:	4611      	mov	r1, r2
 8008860:	461a      	mov	r2, r3
 8008862:	f7ff ffad 	bl	80087c0 <NVIC_EncodePriority>
 8008866:	4602      	mov	r2, r0
 8008868:	b263      	sxtb	r3, r4
 800886a:	4618      	mov	r0, r3
 800886c:	4611      	mov	r1, r2
 800886e:	f7ff ff7d 	bl	800876c <__NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	7a5b      	ldrb	r3, [r3, #9]
 8008876:	b25b      	sxtb	r3, r3
 8008878:	4618      	mov	r0, r3
 800887a:	f7ff ff5b 	bl	8008734 <__NVIC_EnableIRQ>
    obj->initialized = true;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	bd90      	pop	{r4, r7, pc}
 800888e:	bf00      	nop

08008890 <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8008894:	4801      	ldr	r0, [pc, #4]	; (800889c <GPDMA0_0_IRQHandler+0xc>)
 8008896:	f7fb fc4f 	bl	8004138 <XMC_DMA_IRQHandler>
}
 800889a:	bd80      	pop	{r7, pc}
 800889c:	50014000 	.word	0x50014000

080088a0 <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 80088a4:	4801      	ldr	r0, [pc, #4]	; (80088ac <GPDMA1_0_IRQHandler+0xc>)
 80088a6:	f7fb fc47 	bl	8004138 <XMC_DMA_IRQHandler>
}
 80088aa:	bd80      	pop	{r7, pc}
 80088ac:	50018000 	.word	0x50018000

080088b0 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80088be:	60da      	str	r2, [r3, #12]
}
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
 80088ca:	bf00      	nop

080088cc <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	7b5b      	ldrb	r3, [r3, #13]
 80088d8:	f083 0301 	eor.w	r3, r3, #1
 80088dc:	b2db      	uxtb	r3, r3
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d00f      	beq.n	8008902 <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	7b1b      	ldrb	r3, [r3, #12]
 80088ea:	4610      	mov	r0, r2
 80088ec:	4619      	mov	r1, r3
 80088ee:	f7fa ff51 	bl	8003794 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff ffda 	bl	80088b0 <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 8008902:	2300      	movs	r3, #0
}
 8008904:	4618      	mov	r0, r3
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800891a:	60da      	str	r2, [r3, #12]
}
 800891c:	370c      	adds	r7, #12
 800891e:	46bd      	mov	sp, r7
 8008920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008924:	4770      	bx	lr
 8008926:	bf00      	nop

08008928 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7b5b      	ldrb	r3, [r3, #13]
 8008934:	f083 0301 	eor.w	r3, r3, #1
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00f      	beq.n	800895e <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	689a      	ldr	r2, [r3, #8]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	7b1b      	ldrb	r3, [r3, #12]
 8008946:	4610      	mov	r0, r2
 8008948:	4619      	mov	r1, r3
 800894a:	f7fa fdeb 	bl	8003524 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	689b      	ldr	r3, [r3, #8]
 8008952:	4618      	mov	r0, r3
 8008954:	f7ff ffda 	bl	800890c <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3708      	adds	r7, #8
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 8008970:	2300      	movs	r3, #0
 8008972:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	7a5b      	ldrb	r3, [r3, #9]
 8008978:	f083 0301 	eor.w	r3, r3, #1
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d00f      	beq.n	80089a2 <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6859      	ldr	r1, [r3, #4]
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	7a1a      	ldrb	r2, [r3, #8]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4608      	mov	r0, r1
 8008990:	4611      	mov	r1, r2
 8008992:	461a      	mov	r2, r3
 8008994:	f7fa fb1a 	bl	8002fcc <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2201      	movs	r2, #1
 800899c:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800899e:	2300      	movs	r3, #0
 80089a0:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 80089a2:	7bfb      	ldrb	r3, [r7, #15]

}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <FATFS_Init>:

/*
 * API to initialize the FATFS APP
 */
FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 80089b4:	2300      	movs	r3, #0
 80089b6:	73fb      	strb	r3, [r7, #15]
  if (handle->initialized == false)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	791b      	ldrb	r3, [r3, #4]
 80089bc:	f083 0301 	eor.w	r3, r3, #1
 80089c0:	b2db      	uxtb	r3, r3
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d022      	beq.n	8008a0c <FATFS_Init+0x60>
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 80089c6:	2300      	movs	r3, #0
 80089c8:	60bb      	str	r3, [r7, #8]
 80089ca:	e00e      	b.n	80089ea <FATFS_Init+0x3e>
  {
    status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 80089cc:	4a13      	ldr	r2, [pc, #76]	; (8008a1c <FATFS_Init+0x70>)
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f7fe fff7 	bl	80079c8 <SDMMC_BLOCK_Init>
 80089da:	4603      	mov	r3, r0
 80089dc:	461a      	mov	r2, r3
 80089de:	7bfb      	ldrb	r3, [r7, #15]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	73fb      	strb	r3, [r7, #15]
{
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
  if (handle->initialized == false)
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	3301      	adds	r3, #1
 80089e8:	60bb      	str	r3, [r7, #8]
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d0ed      	beq.n	80089cc <FATFS_Init+0x20>
#if (FATFS_STANDARDLIBRARY == 1U)
  SLTHA_Init();
#endif

#if (FF_FS_NORTC == 0U)
  if (status == FATFS_STATUS_SUCCESS)
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d106      	bne.n	8008a04 <FATFS_Init+0x58>
  {
    status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f7ff f832 	bl	8007a64 <RTC_Init>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
  }
#endif
    handle->initialized = true;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2201      	movs	r2, #1
 8008a08:	711a      	strb	r2, [r3, #4]
 8008a0a:	e001      	b.n	8008a10 <FATFS_Init+0x64>
  }
  else
  {
    status = FATFS_STATUS_FAILURE;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3710      	adds	r7, #16
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
 8008a1a:	bf00      	nop
 8008a1c:	08013720 	.word	0x08013720

08008a20 <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6819      	ldr	r1, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7c1a      	ldrb	r2, [r3, #16]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	3304      	adds	r3, #4
 8008a34:	4608      	mov	r0, r1
 8008a36:	4611      	mov	r1, r2
 8008a38:	461a      	mov	r2, r3
 8008a3a:	f7f9 fadd 	bl	8001ff8 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6819      	ldr	r1, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	7c1a      	ldrb	r2, [r3, #16]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	7c5b      	ldrb	r3, [r3, #17]
 8008a4a:	4608      	mov	r0, r1
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	461a      	mov	r2, r3
 8008a50:	f7fb fcc2 	bl	80043d8 <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 8008a54:	2300      	movs	r3, #0
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3708      	adds	r7, #8
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop

08008a60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f003 0307 	and.w	r3, r3, #7
 8008a6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a70:	4b0c      	ldr	r3, [pc, #48]	; (8008aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8008a88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a90:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 8008a92:	4a04      	ldr	r2, [pc, #16]	; (8008aa4 <__NVIC_SetPriorityGrouping+0x44>)
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	60d3      	str	r3, [r2, #12]
}
 8008a98:	3714      	adds	r7, #20
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	e000ed00 	.word	0xe000ed00

08008aa8 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 8008aae:	2001      	movs	r0, #1
 8008ab0:	f7ff ffd6 	bl	8008a60 <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008ab4:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8008ab6:	4b21      	ldr	r3, [pc, #132]	; (8008b3c <SystemCoreSetup+0x94>)
 8008ab8:	4a21      	ldr	r2, [pc, #132]	; (8008b40 <SystemCoreSetup+0x98>)
 8008aba:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008abc:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8008ac0:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 8008ac2:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <SystemCoreSetup+0x94>)
 8008ac4:	4b1d      	ldr	r3, [pc, #116]	; (8008b3c <SystemCoreSetup+0x94>)
 8008ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008aca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ace:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 8008ad2:	4b1c      	ldr	r3, [pc, #112]	; (8008b44 <SystemCoreSetup+0x9c>)
 8008ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008ad8:	3314      	adds	r3, #20
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f023 030f 	bic.w	r3, r3, #15
 8008ae4:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f043 0304 	orr.w	r3, r3, #4
 8008aec:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 8008aee:	4b15      	ldr	r3, [pc, #84]	; (8008b44 <SystemCoreSetup+0x9c>)
 8008af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af4:	3314      	adds	r3, #20
 8008af6:	687a      	ldr	r2, [r7, #4]
 8008af8:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8008afa:	4a10      	ldr	r2, [pc, #64]	; (8008b3c <SystemCoreSetup+0x94>)
 8008afc:	4b0f      	ldr	r3, [pc, #60]	; (8008b3c <SystemCoreSetup+0x94>)
 8008afe:	695b      	ldr	r3, [r3, #20]
 8008b00:	f023 0310 	bic.w	r3, r3, #16
 8008b04:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8008b06:	4a0d      	ldr	r2, [pc, #52]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b08:	4b0c      	ldr	r3, [pc, #48]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b0a:	695b      	ldr	r3, [r3, #20]
 8008b0c:	f023 0308 	bic.w	r3, r3, #8
 8008b10:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8008b12:	4a0a      	ldr	r2, [pc, #40]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b14:	4b09      	ldr	r3, [pc, #36]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b1c:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 8008b1e:	4a07      	ldr	r2, [pc, #28]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b20:	4b06      	ldr	r3, [pc, #24]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b28:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8008b2a:	4a04      	ldr	r2, [pc, #16]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b2c:	4b03      	ldr	r3, [pc, #12]	; (8008b3c <SystemCoreSetup+0x94>)
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b34:	6253      	str	r3, [r2, #36]	; 0x24
}
 8008b36:	3708      	adds	r7, #8
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	e000ed00 	.word	0xe000ed00
 8008b40:	08000000 	.word	0x08000000
 8008b44:	58001000 	.word	0x58001000

08008b48 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 8008b50:	2300      	movs	r3, #0
 8008b52:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	701a      	strb	r2, [r3, #0]

  return (status);
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3714      	adds	r7, #20
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 8008b68:	b480      	push	{r7}
 8008b6a:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 8008b6c:	4b02      	ldr	r3, [pc, #8]	; (8008b78 <OSCHP_GetFrequency+0x10>)
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	00b71b00 	.word	0x00b71b00

08008b7c <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 8008b7c:	b5b0      	push	{r4, r5, r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 8008b82:	4b13      	ldr	r3, [pc, #76]	; (8008bd0 <SystemCoreClockSetup+0x54>)
 8008b84:	1d3c      	adds	r4, r7, #4
 8008b86:	461d      	mov	r5, r3
 8008b88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008b8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008b8c:	682b      	ldr	r3, [r5, #0]
 8008b8e:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 8008b90:	1d3b      	adds	r3, r7, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7f9 fbc4 	bl	8002320 <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8008b98:	2000      	movs	r0, #0
 8008b9a:	f7f9 fcfb 	bl	8002594 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 8008b9e:	2000      	movs	r0, #0
 8008ba0:	f7f9 fcb0 	bl	8002504 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8008ba4:	2004      	movs	r0, #4
 8008ba6:	f7f9 fd81 	bl	80026ac <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8008baa:	f7f9 fe0b 	bl	80027c4 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 8008bae:	2001      	movs	r0, #1
 8008bb0:	2120      	movs	r1, #32
 8008bb2:	f7f9 fe17 	bl	80027e4 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8008bb6:	2000      	movs	r0, #0
 8008bb8:	f7f9 fcb8 	bl	800252c <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8008bbc:	2001      	movs	r0, #1
 8008bbe:	f7f9 fd9d 	bl	80026fc <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	f7f9 fd86 	bl	80026d4 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bdb0      	pop	{r4, r5, r7, pc}
 8008bce:	bf00      	nop
 8008bd0:	08013c88 	.word	0x08013c88

08008bd4 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b085      	sub	sp, #20
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	460b      	mov	r3, r1
 8008bde:	607a      	str	r2, [r7, #4]
 8008be0:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	689a      	ldr	r2, [r3, #8]
 8008be6:	7afb      	ldrb	r3, [r7, #11]
 8008be8:	2107      	movs	r1, #7
 8008bea:	fa01 f303 	lsl.w	r3, r1, r3
 8008bee:	43db      	mvns	r3, r3
 8008bf0:	401a      	ands	r2, r3
 8008bf2:	7afb      	ldrb	r3, [r7, #11]
 8008bf4:	6879      	ldr	r1, [r7, #4]
 8008bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	609a      	str	r2, [r3, #8]
}
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop

08008c0c <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	460b      	mov	r3, r1
 8008c16:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	68db      	ldr	r3, [r3, #12]
 8008c1c:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008c26:	431a      	orrs	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop

08008c38 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	60da      	str	r2, [r3, #12]
}
 8008c4c:	370c      	adds	r7, #12
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop

08008c58 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	601a      	str	r2, [r3, #0]
}
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop

08008c78 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	601a      	str	r2, [r3, #0]
}
 8008c8c:	370c      	adds	r7, #12
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
 8008c96:	bf00      	nop

08008c98 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b083      	sub	sp, #12
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f043 0201 	orr.w	r2, r3, #1
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	601a      	str	r2, [r3, #0]
}
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
 8008cb6:	bf00      	nop

08008cb8 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b083      	sub	sp, #12
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	f023 0201 	bic.w	r2, r3, #1
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	601a      	str	r2, [r3, #0]
}
 8008ccc:	370c      	adds	r7, #12
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop

08008cd8 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	601a      	str	r2, [r3, #0]
}
 8008cec:	370c      	adds	r7, #12
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop

08008cf8 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8008cf8:	b480      	push	{r7}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	460b      	mov	r3, r1
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	6812      	ldr	r2, [r2, #0]
 8008d0e:	6891      	ldr	r1, [r2, #8]
 8008d10:	7afa      	ldrb	r2, [r7, #11]
 8008d12:	2007      	movs	r0, #7
 8008d14:	fa00 f202 	lsl.w	r2, r0, r2
 8008d18:	43d2      	mvns	r2, r2
 8008d1a:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8008d1c:	7afa      	ldrb	r2, [r7, #11]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008d24:	430a      	orrs	r2, r1
 8008d26:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop

08008d34 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	69db      	ldr	r3, [r3, #28]
}
 8008d42:	4618      	mov	r0, r3
 8008d44:	370c      	adds	r7, #12
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop

08008d50 <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
 8008d58:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	687a      	ldr	r2, [r7, #4]
 8008d60:	6812      	ldr	r2, [r2, #0]
 8008d62:	6811      	ldr	r1, [r2, #0]
 8008d64:	683a      	ldr	r2, [r7, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	601a      	str	r2, [r3, #0]
}
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8008d86:	f7ff ffe3 	bl	8008d50 <XMC_CAN_MO_EnableEvent>
}
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4618      	mov	r0, r3
 8008d9e:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8008da2:	f7ff ffd5 	bl	8008d50 <XMC_CAN_MO_EnableEvent>
}
 8008da6:	3708      	adds	r7, #8
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}

08008dac <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f000 f831 	bl	8008e20 <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d003      	beq.n	8008dd0 <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	f043 0302 	orr.w	r3, r3, #2
 8008dce:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d003      	beq.n	8008de2 <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	f043 0304 	orr.w	r3, r3, #4
 8008de0:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d003      	beq.n	8008df4 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	f043 0308 	orr.w	r3, r3, #8
 8008df2:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	4618      	mov	r0, r3
 8008dfa:	68f9      	ldr	r1, [r7, #12]
 8008dfc:	f7fa faf8 	bl	80033f0 <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d006      	beq.n	8008e18 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	4618      	mov	r0, r3
 8008e10:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008e14:	f7fa faec 	bl	80033f0 <XMC_CAN_NODE_EnableEvent>
  }

}
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
 8008e1e:	bf00      	nop

08008e20 <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e32:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008e34:	4610      	mov	r0, r2
 8008e36:	2100      	movs	r1, #0
 8008e38:	461a      	mov	r2, r3
 8008e3a:	f7ff fecb 	bl	8008bd4 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e48:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 8008e4a:	4610      	mov	r0, r2
 8008e4c:	2104      	movs	r1, #4
 8008e4e:	461a      	mov	r2, r3
 8008e50:	f7ff fec0 	bl	8008bd4 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e5e:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 8008e60:	4610      	mov	r0, r2
 8008e62:	2108      	movs	r1, #8
 8008e64:	461a      	mov	r2, r3
 8008e66:	f7ff feb5 	bl	8008bd4 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e74:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 8008e76:	4610      	mov	r0, r2
 8008e78:	210c      	movs	r1, #12
 8008e7a:	461a      	mov	r2, r3
 8008e7c:	f7ff feaa 	bl	8008bd4 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 8008e80:	3708      	adds	r7, #8
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop

08008e88 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fa f8d9 	bl	800304c <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	79db      	ldrb	r3, [r3, #7]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d00b      	beq.n	8008eba <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	795b      	ldrb	r3, [r3, #5]
 8008eaa:	4610      	mov	r0, r2
 8008eac:	2104      	movs	r1, #4
 8008eae:	461a      	mov	r2, r3
 8008eb0:	f7ff ff22 	bl	8008cf8 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f7ff ff5d 	bl	8008d74 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	7a1b      	ldrb	r3, [r3, #8]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681a      	ldr	r2, [r3, #0]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	799b      	ldrb	r3, [r3, #6]
 8008eca:	4610      	mov	r0, r2
 8008ecc:	2100      	movs	r1, #0
 8008ece:	461a      	mov	r2, r3
 8008ed0:	f7ff ff12 	bl	8008cf8 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f7ff ff5b 	bl	8008d90 <CAN_NODE_MO_EnableRxEvent>
  }

}
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7fa f97f 	bl	80031f4 <XMC_CAN_MO_Transmit>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3710      	adds	r7, #16
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}

08008f04 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b084      	sub	sp, #16
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fa f99b 	bl	8003250 <XMC_CAN_MO_Receive>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	6812      	ldr	r2, [r2, #0]
 8008f42:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	6852      	ldr	r2, [r2, #4]
 8008f4c:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4618      	mov	r0, r3
 8008f54:	f7fa f916 	bl	8003184 <XMC_CAN_MO_UpdateData>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
 8008f66:	bf00      	nop

08008f68 <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f7ff fedd 	bl	8008d34 <XMC_CAN_MO_GetStatus>
 8008f7a:	60f8      	str	r0, [r7, #12]

  return (status);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
}
 8008f7e:	4618      	mov	r0, r3
 8008f80:	3710      	adds	r7, #16
 8008f82:	46bd      	mov	sp, r7
 8008f84:	bd80      	pop	{r7, pc}
 8008f86:	bf00      	nop

08008f88 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b086      	sub	sp, #24
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008f90:	2300      	movs	r3, #0
 8008f92:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9a:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f7ff fce1 	bl	8008968 <GLOBAL_CAN_Init>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8008faa:	7dfb      	ldrb	r3, [r7, #23]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f040 8087 	bne.w	80090c0 <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685a      	ldr	r2, [r3, #4]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	689b      	ldr	r3, [r3, #8]
 8008fba:	4610      	mov	r0, r2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	f7f9 fedf 	bl	8002d80 <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d178      	bne.n	80090ba <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685b      	ldr	r3, [r3, #4]
 8008fcc:	4618      	mov	r0, r3
 8008fce:	f7ff fe43 	bl	8008c58 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	685b      	ldr	r3, [r3, #4]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff fe5e 	bl	8008c98 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7ff fe79 	bl	8008cd8 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7ff fe1f 	bl	8008c38 <XMC_CAN_NODE_EnableLoopBack>
 8008ffa:	e018      	b.n	800902e <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009002:	6819      	ldr	r1, [r3, #0]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800900a:	791a      	ldrb	r2, [r3, #4]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009012:	4608      	mov	r0, r1
 8009014:	4611      	mov	r1, r2
 8009016:	461a      	mov	r2, r3
 8009018:	f7f8 ffee 	bl	8001ff8 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685a      	ldr	r2, [r3, #4]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8009026:	4610      	mov	r0, r2
 8009028:	4619      	mov	r1, r3
 800902a:	f7ff fdef 	bl	8008c0c <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7ff febc 	bl	8008dac <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8009034:	2300      	movs	r3, #0
 8009036:	613b      	str	r3, [r7, #16]
 8009038:	e019      	b.n	800906e <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 800903a:	687a      	ldr	r2, [r7, #4]
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	3302      	adds	r3, #2
 8009040:	009b      	lsls	r3, r3, #2
 8009042:	4413      	add	r3, r2
 8009044:	685b      	ldr	r3, [r3, #4]
 8009046:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6859      	ldr	r1, [r3, #4]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	791b      	ldrb	r3, [r3, #4]
 8009058:	4608      	mov	r0, r1
 800905a:	4611      	mov	r1, r2
 800905c:	461a      	mov	r2, r3
 800905e:	f7f9 ff37 	bl	8002ed0 <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8009062:	68b8      	ldr	r0, [r7, #8]
 8009064:	f7ff ff10 	bl	8008e88 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	3301      	adds	r3, #1
 800906c:	613b      	str	r3, [r7, #16]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8009074:	461a      	mov	r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	429a      	cmp	r2, r3
 800907a:	d8de      	bhi.n	800903a <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	4618      	mov	r0, r3
 8009082:	f7ff fdf9 	bl	8008c78 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	4618      	mov	r0, r3
 800908c:	f7ff fe14 	bl	8008cb8 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8009096:	f083 0301 	eor.w	r3, r3, #1
 800909a:	b2db      	uxtb	r3, r3
 800909c:	2b00      	cmp	r3, #0
 800909e:	d011      	beq.n	80090c4 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6819      	ldr	r1, [r3, #0]
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	791a      	ldrb	r2, [r3, #4]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090ae:	4608      	mov	r0, r1
 80090b0:	4611      	mov	r1, r2
 80090b2:	461a      	mov	r2, r3
 80090b4:	f7f8 ffa0 	bl	8001ff8 <XMC_GPIO_Init>
 80090b8:	e004      	b.n	80090c4 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 80090ba:	2301      	movs	r3, #1
 80090bc:	75fb      	strb	r3, [r7, #23]
 80090be:	e001      	b.n	80090c4 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 80090c0:	2301      	movs	r3, #1
 80090c2:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80090c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	3718      	adds	r7, #24
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop

080090d0 <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	b082      	sub	sp, #8
 80090d4:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 80090d6:	2300      	movs	r3, #0
 80090d8:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 80090da:	48b7      	ldr	r0, [pc, #732]	; (80093b8 <DAVE_Init+0x2e8>)
 80090dc:	f7ff fd34 	bl	8008b48 <CLOCK_XMC4_Init>
 80090e0:	4603      	mov	r3, r0
 80090e2:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 80090e4:	79fb      	ldrb	r3, [r7, #7]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d104      	bne.n	80090f4 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_DC_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_DC_EN_OUT_D); 
 80090ea:	48b4      	ldr	r0, [pc, #720]	; (80093bc <DAVE_Init+0x2ec>)
 80090ec:	f7ff fc98 	bl	8008a20 <DIGITAL_IO_Init>
 80090f0:	4603      	mov	r3, r0
 80090f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090f4:	79fb      	ldrb	r3, [r7, #7]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d104      	bne.n	8009104 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_PUMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_PUMP_OUT_D); 
 80090fa:	48b1      	ldr	r0, [pc, #708]	; (80093c0 <DAVE_Init+0x2f0>)
 80090fc:	f7ff fc90 	bl	8008a20 <DIGITAL_IO_Init>
 8009100:	4603      	mov	r3, r0
 8009102:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009104:	79fb      	ldrb	r3, [r7, #7]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d104      	bne.n	8009114 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance HEADLAMPS_ADJ_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HEADLAMPS_ADJ_PWR_OUT_D); 
 800910a:	48ae      	ldr	r0, [pc, #696]	; (80093c4 <DAVE_Init+0x2f4>)
 800910c:	f7ff fc88 	bl	8008a20 <DIGITAL_IO_Init>
 8009110:	4603      	mov	r3, r0
 8009112:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	2b00      	cmp	r3, #0
 8009118:	d104      	bne.n	8009124 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance AC_RADIATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AC_RADIATOR_OUT_D); 
 800911a:	48ab      	ldr	r0, [pc, #684]	; (80093c8 <DAVE_Init+0x2f8>)
 800911c:	f7ff fc80 	bl	8008a20 <DIGITAL_IO_Init>
 8009120:	4603      	mov	r3, r0
 8009122:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009124:	79fb      	ldrb	r3, [r7, #7]
 8009126:	2b00      	cmp	r3, #0
 8009128:	d104      	bne.n	8009134 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance INSTRUMENT_CON_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INSTRUMENT_CON_PWR_OUT_D); 
 800912a:	48a8      	ldr	r0, [pc, #672]	; (80093cc <DAVE_Init+0x2fc>)
 800912c:	f7ff fc78 	bl	8008a20 <DIGITAL_IO_Init>
 8009130:	4603      	mov	r3, r0
 8009132:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009134:	79fb      	ldrb	r3, [r7, #7]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d104      	bne.n	8009144 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACCEL_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACCEL_CS_OUT); 
 800913a:	48a5      	ldr	r0, [pc, #660]	; (80093d0 <DAVE_Init+0x300>)
 800913c:	f7ff fc70 	bl	8008a20 <DIGITAL_IO_Init>
 8009140:	4603      	mov	r3, r0
 8009142:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d104      	bne.n	8009154 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELECT_HANDBRAKE_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELECT_HANDBRAKE_EN_OUT_D); 
 800914a:	48a2      	ldr	r0, [pc, #648]	; (80093d4 <DAVE_Init+0x304>)
 800914c:	f7ff fc68 	bl	8008a20 <DIGITAL_IO_Init>
 8009150:	4603      	mov	r3, r0
 8009152:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009154:	79fb      	ldrb	r3, [r7, #7]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d104      	bne.n	8009164 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_CONTACTOR_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_CONTACTOR_RELAY_OUT_D); 
 800915a:	489f      	ldr	r0, [pc, #636]	; (80093d8 <DAVE_Init+0x308>)
 800915c:	f7ff fc60 	bl	8008a20 <DIGITAL_IO_Init>
 8009160:	4603      	mov	r3, r0
 8009162:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009164:	79fb      	ldrb	r3, [r7, #7]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d104      	bne.n	8009174 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_PARK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_PARK_RELAY_OUT_D); 
 800916a:	489c      	ldr	r0, [pc, #624]	; (80093dc <DAVE_Init+0x30c>)
 800916c:	f7ff fc58 	bl	8008a20 <DIGITAL_IO_Init>
 8009170:	4603      	mov	r3, r0
 8009172:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009174:	79fb      	ldrb	r3, [r7, #7]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d104      	bne.n	8009184 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REV_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REV_RELAY_OUT_D); 
 800917a:	4899      	ldr	r0, [pc, #612]	; (80093e0 <DAVE_Init+0x310>)
 800917c:	f7ff fc50 	bl	8008a20 <DIGITAL_IO_Init>
 8009180:	4603      	mov	r3, r0
 8009182:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009184:	79fb      	ldrb	r3, [r7, #7]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d104      	bne.n	8009194 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FWD_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FWD_RELAY_OUT_D); 
 800918a:	4896      	ldr	r0, [pc, #600]	; (80093e4 <DAVE_Init+0x314>)
 800918c:	f7ff fc48 	bl	8008a20 <DIGITAL_IO_Init>
 8009190:	4603      	mov	r3, r0
 8009192:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009194:	79fb      	ldrb	r3, [r7, #7]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d104      	bne.n	80091a4 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REGEN_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REGEN_RELAY_OUT_D); 
 800919a:	4893      	ldr	r0, [pc, #588]	; (80093e8 <DAVE_Init+0x318>)
 800919c:	f7ff fc40 	bl	8008a20 <DIGITAL_IO_Init>
 80091a0:	4603      	mov	r3, r0
 80091a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091a4:	79fb      	ldrb	r3, [r7, #7]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d104      	bne.n	80091b4 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_ELOCK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_ELOCK_RELAY_OUT_D); 
 80091aa:	4890      	ldr	r0, [pc, #576]	; (80093ec <DAVE_Init+0x31c>)
 80091ac:	f7ff fc38 	bl	8008a20 <DIGITAL_IO_Init>
 80091b0:	4603      	mov	r3, r0
 80091b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091b4:	79fb      	ldrb	r3, [r7, #7]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d104      	bne.n	80091c4 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance POS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&POS_OUT_D); 
 80091ba:	488d      	ldr	r0, [pc, #564]	; (80093f0 <DAVE_Init+0x320>)
 80091bc:	f7ff fc30 	bl	8008a20 <DIGITAL_IO_Init>
 80091c0:	4603      	mov	r3, r0
 80091c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091c4:	79fb      	ldrb	r3, [r7, #7]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d104      	bne.n	80091d4 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance VCU_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VCU_FAN_PWR_OUT_D); 
 80091ca:	488a      	ldr	r0, [pc, #552]	; (80093f4 <DAVE_Init+0x324>)
 80091cc:	f7ff fc28 	bl	8008a20 <DIGITAL_IO_Init>
 80091d0:	4603      	mov	r3, r0
 80091d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091d4:	79fb      	ldrb	r3, [r7, #7]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d104      	bne.n	80091e4 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_EFUSE_1_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_EFUSE_1_OUT_D); 
 80091da:	4887      	ldr	r0, [pc, #540]	; (80093f8 <DAVE_Init+0x328>)
 80091dc:	f7ff fc20 	bl	8008a20 <DIGITAL_IO_Init>
 80091e0:	4603      	mov	r3, r0
 80091e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d104      	bne.n	80091f4 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance WIPER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WIPER_PWR_OUT_D); 
 80091ea:	4884      	ldr	r0, [pc, #528]	; (80093fc <DAVE_Init+0x32c>)
 80091ec:	f7ff fc18 	bl	8008a20 <DIGITAL_IO_Init>
 80091f0:	4603      	mov	r3, r0
 80091f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091f4:	79fb      	ldrb	r3, [r7, #7]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d104      	bne.n	8009204 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance THROTTLE_POT_CS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&THROTTLE_POT_CS_OUT_D); 
 80091fa:	4881      	ldr	r0, [pc, #516]	; (8009400 <DAVE_Init+0x330>)
 80091fc:	f7ff fc10 	bl	8008a20 <DIGITAL_IO_Init>
 8009200:	4603      	mov	r3, r0
 8009202:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009204:	79fb      	ldrb	r3, [r7, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d104      	bne.n	8009214 <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIGHTS_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIGHTS_PWR_OUT_D); 
 800920a:	487e      	ldr	r0, [pc, #504]	; (8009404 <DAVE_Init+0x334>)
 800920c:	f7ff fc08 	bl	8008a20 <DIGITAL_IO_Init>
 8009210:	4603      	mov	r3, r0
 8009212:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009214:	79fb      	ldrb	r3, [r7, #7]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d104      	bne.n	8009224 <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance INFOTAINMENT_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INFOTAINMENT_PWR_OUT_D); 
 800921a:	487b      	ldr	r0, [pc, #492]	; (8009408 <DAVE_Init+0x338>)
 800921c:	f7ff fc00 	bl	8008a20 <DIGITAL_IO_Init>
 8009220:	4603      	mov	r3, r0
 8009222:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009224:	79fb      	ldrb	r3, [r7, #7]
 8009226:	2b00      	cmp	r3, #0
 8009228:	d104      	bne.n	8009234 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUDIO_AMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUDIO_AMP_OUT_D); 
 800922a:	4878      	ldr	r0, [pc, #480]	; (800940c <DAVE_Init+0x33c>)
 800922c:	f7ff fbf8 	bl	8008a20 <DIGITAL_IO_Init>
 8009230:	4603      	mov	r3, r0
 8009232:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009234:	79fb      	ldrb	r3, [r7, #7]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d104      	bne.n	8009244 <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_PWR_OUT_D); 
 800923a:	4875      	ldr	r0, [pc, #468]	; (8009410 <DAVE_Init+0x340>)
 800923c:	f7ff fbf0 	bl	8008a20 <DIGITAL_IO_Init>
 8009240:	4603      	mov	r3, r0
 8009242:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009244:	79fb      	ldrb	r3, [r7, #7]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d104      	bne.n	8009254 <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_LIGHT_OUT_D); 
 800924a:	4872      	ldr	r0, [pc, #456]	; (8009414 <DAVE_Init+0x344>)
 800924c:	f7ff fbe8 	bl	8008a20 <DIGITAL_IO_Init>
 8009250:	4603      	mov	r3, r0
 8009252:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009254:	79fb      	ldrb	r3, [r7, #7]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d104      	bne.n	8009264 <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance HORN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HORN_PWR_OUT_D); 
 800925a:	486f      	ldr	r0, [pc, #444]	; (8009418 <DAVE_Init+0x348>)
 800925c:	f7ff fbe0 	bl	8008a20 <DIGITAL_IO_Init>
 8009260:	4603      	mov	r3, r0
 8009262:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d104      	bne.n	8009274 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_OUT_D); 
 800926a:	486c      	ldr	r0, [pc, #432]	; (800941c <DAVE_Init+0x34c>)
 800926c:	f7ff fbd8 	bl	8008a20 <DIGITAL_IO_Init>
 8009270:	4603      	mov	r3, r0
 8009272:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009274:	79fb      	ldrb	r3, [r7, #7]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d104      	bne.n	8009284 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance RIGHT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RIGHT_INDICATOR_OUT_D); 
 800927a:	4869      	ldr	r0, [pc, #420]	; (8009420 <DAVE_Init+0x350>)
 800927c:	f7ff fbd0 	bl	8008a20 <DIGITAL_IO_Init>
 8009280:	4603      	mov	r3, r0
 8009282:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d104      	bne.n	8009294 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance HIGH_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HIGH_BEAM_OUT_D); 
 800928a:	4866      	ldr	r0, [pc, #408]	; (8009424 <DAVE_Init+0x354>)
 800928c:	f7ff fbc8 	bl	8008a20 <DIGITAL_IO_Init>
 8009290:	4603      	mov	r3, r0
 8009292:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009294:	79fb      	ldrb	r3, [r7, #7]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d104      	bne.n	80092a4 <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LOW_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LOW_BEAM_OUT_D); 
 800929a:	4863      	ldr	r0, [pc, #396]	; (8009428 <DAVE_Init+0x358>)
 800929c:	f7ff fbc0 	bl	8008a20 <DIGITAL_IO_Init>
 80092a0:	4603      	mov	r3, r0
 80092a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092a4:	79fb      	ldrb	r3, [r7, #7]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d104      	bne.n	80092b4 <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance REV_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REV_LIGHT_OUT_D); 
 80092aa:	4860      	ldr	r0, [pc, #384]	; (800942c <DAVE_Init+0x35c>)
 80092ac:	f7ff fbb8 	bl	8008a20 <DIGITAL_IO_Init>
 80092b0:	4603      	mov	r3, r0
 80092b2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092b4:	79fb      	ldrb	r3, [r7, #7]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d104      	bne.n	80092c4 <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELEC_HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELEC_HANDBRAKE_IN_D); 
 80092ba:	485d      	ldr	r0, [pc, #372]	; (8009430 <DAVE_Init+0x360>)
 80092bc:	f7ff fbb0 	bl	8008a20 <DIGITAL_IO_Init>
 80092c0:	4603      	mov	r3, r0
 80092c2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092c4:	79fb      	ldrb	r3, [r7, #7]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d104      	bne.n	80092d4 <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_ANALOG1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_ANALOG1_IN_D); 
 80092ca:	485a      	ldr	r0, [pc, #360]	; (8009434 <DAVE_Init+0x364>)
 80092cc:	f7ff fba8 	bl	8008a20 <DIGITAL_IO_Init>
 80092d0:	4603      	mov	r3, r0
 80092d2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092d4:	79fb      	ldrb	r3, [r7, #7]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d104      	bne.n	80092e4 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance INT_ACCEL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INT_ACCEL_IN_D); 
 80092da:	4857      	ldr	r0, [pc, #348]	; (8009438 <DAVE_Init+0x368>)
 80092dc:	f7ff fba0 	bl	8008a20 <DIGITAL_IO_Init>
 80092e0:	4603      	mov	r3, r0
 80092e2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092e4:	79fb      	ldrb	r3, [r7, #7]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d104      	bne.n	80092f4 <DAVE_Init+0x224>
  {
	 /**  Initialization of DIGITAL_IO APP instance CIGARETTE_LIGHTER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CIGARETTE_LIGHTER_PWR_OUT_D); 
 80092ea:	4854      	ldr	r0, [pc, #336]	; (800943c <DAVE_Init+0x36c>)
 80092ec:	f7ff fb98 	bl	8008a20 <DIGITAL_IO_Init>
 80092f0:	4603      	mov	r3, r0
 80092f2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d104      	bne.n	8009304 <DAVE_Init+0x234>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUZZER_EN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUZZER_EN_D); 
 80092fa:	4851      	ldr	r0, [pc, #324]	; (8009440 <DAVE_Init+0x370>)
 80092fc:	f7ff fb90 	bl	8008a20 <DIGITAL_IO_Init>
 8009300:	4603      	mov	r3, r0
 8009302:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009304:	79fb      	ldrb	r3, [r7, #7]
 8009306:	2b00      	cmp	r3, #0
 8009308:	d104      	bne.n	8009314 <DAVE_Init+0x244>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_RELAY_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_RELAY_PWR_OUT_D); 
 800930a:	484e      	ldr	r0, [pc, #312]	; (8009444 <DAVE_Init+0x374>)
 800930c:	f7ff fb88 	bl	8008a20 <DIGITAL_IO_Init>
 8009310:	4603      	mov	r3, r0
 8009312:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009314:	79fb      	ldrb	r3, [r7, #7]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <DAVE_Init+0x254>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FAN_PWR_OUT_D); 
 800931a:	484b      	ldr	r0, [pc, #300]	; (8009448 <DAVE_Init+0x378>)
 800931c:	f7ff fb80 	bl	8008a20 <DIGITAL_IO_Init>
 8009320:	4603      	mov	r3, r0
 8009322:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d104      	bne.n	8009334 <DAVE_Init+0x264>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_SPEED_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_SPEED_PWM_OUT); 
 800932a:	4848      	ldr	r0, [pc, #288]	; (800944c <DAVE_Init+0x37c>)
 800932c:	f7ff fb78 	bl	8008a20 <DIGITAL_IO_Init>
 8009330:	4603      	mov	r3, r0
 8009332:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009334:	79fb      	ldrb	r3, [r7, #7]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d104      	bne.n	8009344 <DAVE_Init+0x274>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_RPM_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_RPM_PWM_OUT); 
 800933a:	4845      	ldr	r0, [pc, #276]	; (8009450 <DAVE_Init+0x380>)
 800933c:	f7ff fb70 	bl	8008a20 <DIGITAL_IO_Init>
 8009340:	4603      	mov	r3, r0
 8009342:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009344:	79fb      	ldrb	r3, [r7, #7]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d104      	bne.n	8009354 <DAVE_Init+0x284>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_WINDOW_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_WINDOW_OUT_D); 
 800934a:	4842      	ldr	r0, [pc, #264]	; (8009454 <DAVE_Init+0x384>)
 800934c:	f7ff fb68 	bl	8008a20 <DIGITAL_IO_Init>
 8009350:	4603      	mov	r3, r0
 8009352:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d104      	bne.n	8009364 <DAVE_Init+0x294>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_STEERING_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_STEERING_OUT_D); 
 800935a:	483f      	ldr	r0, [pc, #252]	; (8009458 <DAVE_Init+0x388>)
 800935c:	f7ff fb60 	bl	8008a20 <DIGITAL_IO_Init>
 8009360:	4603      	mov	r3, r0
 8009362:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009364:	79fb      	ldrb	r3, [r7, #7]
 8009366:	2b00      	cmp	r3, #0
 8009368:	d104      	bne.n	8009374 <DAVE_Init+0x2a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LEFT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LEFT_INDICATOR_OUT_D); 
 800936a:	483c      	ldr	r0, [pc, #240]	; (800945c <DAVE_Init+0x38c>)
 800936c:	f7ff fb58 	bl	8008a20 <DIGITAL_IO_Init>
 8009370:	4603      	mov	r3, r0
 8009372:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009374:	79fb      	ldrb	r3, [r7, #7]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d104      	bne.n	8009384 <DAVE_Init+0x2b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC3_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC3_CS_OUT); 
 800937a:	4839      	ldr	r0, [pc, #228]	; (8009460 <DAVE_Init+0x390>)
 800937c:	f7ff fb50 	bl	8008a20 <DIGITAL_IO_Init>
 8009380:	4603      	mov	r3, r0
 8009382:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009384:	79fb      	ldrb	r3, [r7, #7]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d104      	bne.n	8009394 <DAVE_Init+0x2c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance INPUTS_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INPUTS_3V3_PWR_EN); 
 800938a:	4836      	ldr	r0, [pc, #216]	; (8009464 <DAVE_Init+0x394>)
 800938c:	f7ff fb48 	bl	8008a20 <DIGITAL_IO_Init>
 8009390:	4603      	mov	r3, r0
 8009392:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d104      	bne.n	80093a4 <DAVE_Init+0x2d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance COMM_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&COMM_3V3_PWR_EN); 
 800939a:	4833      	ldr	r0, [pc, #204]	; (8009468 <DAVE_Init+0x398>)
 800939c:	f7ff fb40 	bl	8008a20 <DIGITAL_IO_Init>
 80093a0:	4603      	mov	r3, r0
 80093a2:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80093a4:	79fb      	ldrb	r3, [r7, #7]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d162      	bne.n	8009470 <DAVE_Init+0x3a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SENSOR_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SENSOR_3V3_PWR_EN); 
 80093aa:	4830      	ldr	r0, [pc, #192]	; (800946c <DAVE_Init+0x39c>)
 80093ac:	f7ff fb38 	bl	8008a20 <DIGITAL_IO_Init>
 80093b0:	4603      	mov	r3, r0
 80093b2:	71fb      	strb	r3, [r7, #7]
 80093b4:	e05c      	b.n	8009470 <DAVE_Init+0x3a0>
 80093b6:	bf00      	nop
 80093b8:	1fff44b0 	.word	0x1fff44b0
 80093bc:	08013724 	.word	0x08013724
 80093c0:	08013738 	.word	0x08013738
 80093c4:	0801374c 	.word	0x0801374c
 80093c8:	08013760 	.word	0x08013760
 80093cc:	08013774 	.word	0x08013774
 80093d0:	08013788 	.word	0x08013788
 80093d4:	0801379c 	.word	0x0801379c
 80093d8:	080137b0 	.word	0x080137b0
 80093dc:	080137c4 	.word	0x080137c4
 80093e0:	080137d8 	.word	0x080137d8
 80093e4:	080137ec 	.word	0x080137ec
 80093e8:	08013800 	.word	0x08013800
 80093ec:	08013814 	.word	0x08013814
 80093f0:	08013828 	.word	0x08013828
 80093f4:	0801383c 	.word	0x0801383c
 80093f8:	08013850 	.word	0x08013850
 80093fc:	08013864 	.word	0x08013864
 8009400:	08013878 	.word	0x08013878
 8009404:	0801388c 	.word	0x0801388c
 8009408:	080138a0 	.word	0x080138a0
 800940c:	080138b4 	.word	0x080138b4
 8009410:	080138c8 	.word	0x080138c8
 8009414:	080138dc 	.word	0x080138dc
 8009418:	080138f0 	.word	0x080138f0
 800941c:	08013904 	.word	0x08013904
 8009420:	08013918 	.word	0x08013918
 8009424:	0801392c 	.word	0x0801392c
 8009428:	08013940 	.word	0x08013940
 800942c:	08013954 	.word	0x08013954
 8009430:	08013968 	.word	0x08013968
 8009434:	0801397c 	.word	0x0801397c
 8009438:	08013990 	.word	0x08013990
 800943c:	080139a4 	.word	0x080139a4
 8009440:	080139b8 	.word	0x080139b8
 8009444:	080139cc 	.word	0x080139cc
 8009448:	080139e0 	.word	0x080139e0
 800944c:	080139f4 	.word	0x080139f4
 8009450:	08013a08 	.word	0x08013a08
 8009454:	08013a1c 	.word	0x08013a1c
 8009458:	08013a30 	.word	0x08013a30
 800945c:	08013a44 	.word	0x08013a44
 8009460:	08013a58 	.word	0x08013a58
 8009464:	08013a6c 	.word	0x08013a6c
 8009468:	08013a80 	.word	0x08013a80
 800946c:	08013a94 	.word	0x08013a94
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d104      	bne.n	8009480 <DAVE_Init+0x3b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CABIN_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CABIN_LIGHT_OUT_D); 
 8009476:	4899      	ldr	r0, [pc, #612]	; (80096dc <DAVE_Init+0x60c>)
 8009478:	f7ff fad2 	bl	8008a20 <DIGITAL_IO_Init>
 800947c:	4603      	mov	r3, r0
 800947e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009480:	79fb      	ldrb	r3, [r7, #7]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d104      	bne.n	8009490 <DAVE_Init+0x3c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC2_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC2_CS_OUT); 
 8009486:	4896      	ldr	r0, [pc, #600]	; (80096e0 <DAVE_Init+0x610>)
 8009488:	f7ff faca 	bl	8008a20 <DIGITAL_IO_Init>
 800948c:	4603      	mov	r3, r0
 800948e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009490:	79fb      	ldrb	r3, [r7, #7]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d104      	bne.n	80094a0 <DAVE_Init+0x3d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC1_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC1_CS_OUT); 
 8009496:	4893      	ldr	r0, [pc, #588]	; (80096e4 <DAVE_Init+0x614>)
 8009498:	f7ff fac2 	bl	8008a20 <DIGITAL_IO_Init>
 800949c:	4603      	mov	r3, r0
 800949e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094a0:	79fb      	ldrb	r3, [r7, #7]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d104      	bne.n	80094b0 <DAVE_Init+0x3e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPEED_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPEED_SENSOR_IN_D); 
 80094a6:	4890      	ldr	r0, [pc, #576]	; (80096e8 <DAVE_Init+0x618>)
 80094a8:	f7ff faba 	bl	8008a20 <DIGITAL_IO_Init>
 80094ac:	4603      	mov	r3, r0
 80094ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d104      	bne.n	80094c0 <DAVE_Init+0x3f0>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_IN_D); 
 80094b6:	488d      	ldr	r0, [pc, #564]	; (80096ec <DAVE_Init+0x61c>)
 80094b8:	f7ff fab2 	bl	8008a20 <DIGITAL_IO_Init>
 80094bc:	4603      	mov	r3, r0
 80094be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094c0:	79fb      	ldrb	r3, [r7, #7]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d104      	bne.n	80094d0 <DAVE_Init+0x400>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_OIL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_OIL_IN_D); 
 80094c6:	488a      	ldr	r0, [pc, #552]	; (80096f0 <DAVE_Init+0x620>)
 80094c8:	f7ff faaa 	bl	8008a20 <DIGITAL_IO_Init>
 80094cc:	4603      	mov	r3, r0
 80094ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094d0:	79fb      	ldrb	r3, [r7, #7]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d104      	bne.n	80094e0 <DAVE_Init+0x410>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGING_STARTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGING_STARTED_IN_D); 
 80094d6:	4887      	ldr	r0, [pc, #540]	; (80096f4 <DAVE_Init+0x624>)
 80094d8:	f7ff faa2 	bl	8008a20 <DIGITAL_IO_Init>
 80094dc:	4603      	mov	r3, r0
 80094de:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094e0:	79fb      	ldrb	r3, [r7, #7]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d104      	bne.n	80094f0 <DAVE_Init+0x420>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGER_CONNECTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGER_CONNECTED_IN_D); 
 80094e6:	4884      	ldr	r0, [pc, #528]	; (80096f8 <DAVE_Init+0x628>)
 80094e8:	f7ff fa9a 	bl	8008a20 <DIGITAL_IO_Init>
 80094ec:	4603      	mov	r3, r0
 80094ee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80094f0:	79fb      	ldrb	r3, [r7, #7]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d104      	bne.n	8009500 <DAVE_Init+0x430>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS2_IN_D); 
 80094f6:	4881      	ldr	r0, [pc, #516]	; (80096fc <DAVE_Init+0x62c>)
 80094f8:	f7ff fa92 	bl	8008a20 <DIGITAL_IO_Init>
 80094fc:	4603      	mov	r3, r0
 80094fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009500:	79fb      	ldrb	r3, [r7, #7]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d104      	bne.n	8009510 <DAVE_Init+0x440>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS1_IN_D); 
 8009506:	487e      	ldr	r0, [pc, #504]	; (8009700 <DAVE_Init+0x630>)
 8009508:	f7ff fa8a 	bl	8008a20 <DIGITAL_IO_Init>
 800950c:	4603      	mov	r3, r0
 800950e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d104      	bne.n	8009520 <DAVE_Init+0x450>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACC_PEDAL_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACC_PEDAL_SW_IN_D); 
 8009516:	487b      	ldr	r0, [pc, #492]	; (8009704 <DAVE_Init+0x634>)
 8009518:	f7ff fa82 	bl	8008a20 <DIGITAL_IO_Init>
 800951c:	4603      	mov	r3, r0
 800951e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009520:	79fb      	ldrb	r3, [r7, #7]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d104      	bne.n	8009530 <DAVE_Init+0x460>
  {
	 /**  Initialization of DIGITAL_IO APP instance HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HANDBRAKE_IN_D); 
 8009526:	4878      	ldr	r0, [pc, #480]	; (8009708 <DAVE_Init+0x638>)
 8009528:	f7ff fa7a 	bl	8008a20 <DIGITAL_IO_Init>
 800952c:	4603      	mov	r3, r0
 800952e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	2b00      	cmp	r3, #0
 8009534:	d104      	bne.n	8009540 <DAVE_Init+0x470>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_SW_IN_D); 
 8009536:	4875      	ldr	r0, [pc, #468]	; (800970c <DAVE_Init+0x63c>)
 8009538:	f7ff fa72 	bl	8008a20 <DIGITAL_IO_Init>
 800953c:	4603      	mov	r3, r0
 800953e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009540:	79fb      	ldrb	r3, [r7, #7]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d104      	bne.n	8009550 <DAVE_Init+0x480>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_PWR_OUT_D); 
 8009546:	4872      	ldr	r0, [pc, #456]	; (8009710 <DAVE_Init+0x640>)
 8009548:	f7ff fa6a 	bl	8008a20 <DIGITAL_IO_Init>
 800954c:	4603      	mov	r3, r0
 800954e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009550:	79fb      	ldrb	r3, [r7, #7]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d104      	bne.n	8009560 <DAVE_Init+0x490>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW1_IN_D); 
 8009556:	486f      	ldr	r0, [pc, #444]	; (8009714 <DAVE_Init+0x644>)
 8009558:	f7ff fa62 	bl	8008a20 <DIGITAL_IO_Init>
 800955c:	4603      	mov	r3, r0
 800955e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009560:	79fb      	ldrb	r3, [r7, #7]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d104      	bne.n	8009570 <DAVE_Init+0x4a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW2_IN_D); 
 8009566:	486c      	ldr	r0, [pc, #432]	; (8009718 <DAVE_Init+0x648>)
 8009568:	f7ff fa5a 	bl	8008a20 <DIGITAL_IO_Init>
 800956c:	4603      	mov	r3, r0
 800956e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009570:	79fb      	ldrb	r3, [r7, #7]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d104      	bne.n	8009580 <DAVE_Init+0x4b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW3_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW3_IN_D); 
 8009576:	4869      	ldr	r0, [pc, #420]	; (800971c <DAVE_Init+0x64c>)
 8009578:	f7ff fa52 	bl	8008a20 <DIGITAL_IO_Init>
 800957c:	4603      	mov	r3, r0
 800957e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d104      	bne.n	8009590 <DAVE_Init+0x4c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW4_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW4_IN_D); 
 8009586:	4866      	ldr	r0, [pc, #408]	; (8009720 <DAVE_Init+0x650>)
 8009588:	f7ff fa4a 	bl	8008a20 <DIGITAL_IO_Init>
 800958c:	4603      	mov	r3, r0
 800958e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009590:	79fb      	ldrb	r3, [r7, #7]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <DAVE_Init+0x4d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8009596:	4863      	ldr	r0, [pc, #396]	; (8009724 <DAVE_Init+0x654>)
 8009598:	f7ff fa42 	bl	8008a20 <DIGITAL_IO_Init>
 800959c:	4603      	mov	r3, r0
 800959e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095a0:	79fb      	ldrb	r3, [r7, #7]
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d104      	bne.n	80095b0 <DAVE_Init+0x4e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 80095a6:	4860      	ldr	r0, [pc, #384]	; (8009728 <DAVE_Init+0x658>)
 80095a8:	f7ff fa3a 	bl	8008a20 <DIGITAL_IO_Init>
 80095ac:	4603      	mov	r3, r0
 80095ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095b0:	79fb      	ldrb	r3, [r7, #7]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d104      	bne.n	80095c0 <DAVE_Init+0x4f0>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 80095b6:	485d      	ldr	r0, [pc, #372]	; (800972c <DAVE_Init+0x65c>)
 80095b8:	f7fe fd26 	bl	8008008 <I2C_MASTER_Init>
 80095bc:	4603      	mov	r3, r0
 80095be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095c0:	79fb      	ldrb	r3, [r7, #7]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d104      	bne.n	80095d0 <DAVE_Init+0x500>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_1 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_1); 
 80095c6:	485a      	ldr	r0, [pc, #360]	; (8009730 <DAVE_Init+0x660>)
 80095c8:	f7fe fd1e 	bl	8008008 <I2C_MASTER_Init>
 80095cc:	4603      	mov	r3, r0
 80095ce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095d0:	79fb      	ldrb	r3, [r7, #7]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d104      	bne.n	80095e0 <DAVE_Init+0x510>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 80095d6:	4857      	ldr	r0, [pc, #348]	; (8009734 <DAVE_Init+0x664>)
 80095d8:	f7ff fcd6 	bl	8008f88 <CAN_NODE_Init>
 80095dc:	4603      	mov	r3, r0
 80095de:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d104      	bne.n	80095f0 <DAVE_Init+0x520>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1); 
 80095e6:	4854      	ldr	r0, [pc, #336]	; (8009738 <DAVE_Init+0x668>)
 80095e8:	f7ff fcce 	bl	8008f88 <CAN_NODE_Init>
 80095ec:	4603      	mov	r3, r0
 80095ee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80095f0:	79fb      	ldrb	r3, [r7, #7]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d104      	bne.n	8009600 <DAVE_Init+0x530>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 80095f6:	4851      	ldr	r0, [pc, #324]	; (800973c <DAVE_Init+0x66c>)
 80095f8:	f7fc ff6e 	bl	80064d8 <TIMER_Init>
 80095fc:	4603      	mov	r3, r0
 80095fe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009600:	79fb      	ldrb	r3, [r7, #7]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d104      	bne.n	8009610 <DAVE_Init+0x540>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
 8009606:	484e      	ldr	r0, [pc, #312]	; (8009740 <DAVE_Init+0x670>)
 8009608:	f7fc fca4 	bl	8005f54 <WATCHDOG_Init>
 800960c:	4603      	mov	r3, r0
 800960e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009610:	79fb      	ldrb	r3, [r7, #7]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d104      	bne.n	8009620 <DAVE_Init+0x550>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 8009616:	484b      	ldr	r0, [pc, #300]	; (8009744 <DAVE_Init+0x674>)
 8009618:	f7fc ff5e 	bl	80064d8 <TIMER_Init>
 800961c:	4603      	mov	r3, r0
 800961e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009620:	79fb      	ldrb	r3, [r7, #7]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <DAVE_Init+0x560>
  {
	 /**  Initialization of TIMER APP instance TIMER_2 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_2); 
 8009626:	4848      	ldr	r0, [pc, #288]	; (8009748 <DAVE_Init+0x678>)
 8009628:	f7fc ff56 	bl	80064d8 <TIMER_Init>
 800962c:	4603      	mov	r3, r0
 800962e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009630:	79fb      	ldrb	r3, [r7, #7]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d104      	bne.n	8009640 <DAVE_Init+0x570>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 8009636:	4845      	ldr	r0, [pc, #276]	; (800974c <DAVE_Init+0x67c>)
 8009638:	f7fe fbd0 	bl	8007ddc <INTERRUPT_Init>
 800963c:	4603      	mov	r3, r0
 800963e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009640:	79fb      	ldrb	r3, [r7, #7]
 8009642:	2b00      	cmp	r3, #0
 8009644:	d104      	bne.n	8009650 <DAVE_Init+0x580>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 8009646:	4842      	ldr	r0, [pc, #264]	; (8009750 <DAVE_Init+0x680>)
 8009648:	f7fc fcee 	bl	8006028 <UART_Init>
 800964c:	4603      	mov	r3, r0
 800964e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009650:	79fb      	ldrb	r3, [r7, #7]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d104      	bne.n	8009660 <DAVE_Init+0x590>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_2); 
 8009656:	483f      	ldr	r0, [pc, #252]	; (8009754 <DAVE_Init+0x684>)
 8009658:	f7ff fc96 	bl	8008f88 <CAN_NODE_Init>
 800965c:	4603      	mov	r3, r0
 800965e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009660:	79fb      	ldrb	r3, [r7, #7]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d104      	bne.n	8009670 <DAVE_Init+0x5a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CTS); 
 8009666:	483c      	ldr	r0, [pc, #240]	; (8009758 <DAVE_Init+0x688>)
 8009668:	f7ff f9da 	bl	8008a20 <DIGITAL_IO_Init>
 800966c:	4603      	mov	r3, r0
 800966e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009670:	79fb      	ldrb	r3, [r7, #7]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d104      	bne.n	8009680 <DAVE_Init+0x5b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance RTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RTS); 
 8009676:	4839      	ldr	r0, [pc, #228]	; (800975c <DAVE_Init+0x68c>)
 8009678:	f7ff f9d2 	bl	8008a20 <DIGITAL_IO_Init>
 800967c:	4603      	mov	r3, r0
 800967e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009680:	79fb      	ldrb	r3, [r7, #7]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d104      	bne.n	8009690 <DAVE_Init+0x5c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PWRKEY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PWRKEY); 
 8009686:	4836      	ldr	r0, [pc, #216]	; (8009760 <DAVE_Init+0x690>)
 8009688:	f7ff f9ca 	bl	8008a20 <DIGITAL_IO_Init>
 800968c:	4603      	mov	r3, r0
 800968e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8009690:	79fb      	ldrb	r3, [r7, #7]
 8009692:	2b00      	cmp	r3, #0
 8009694:	d104      	bne.n	80096a0 <DAVE_Init+0x5d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODULE_4G_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODULE_4G_EN_OUT_D); 
 8009696:	4833      	ldr	r0, [pc, #204]	; (8009764 <DAVE_Init+0x694>)
 8009698:	f7ff f9c2 	bl	8008a20 <DIGITAL_IO_Init>
 800969c:	4603      	mov	r3, r0
 800969e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80096a0:	79fb      	ldrb	r3, [r7, #7]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d104      	bne.n	80096b0 <DAVE_Init+0x5e0>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 80096a6:	4830      	ldr	r0, [pc, #192]	; (8009768 <DAVE_Init+0x698>)
 80096a8:	f7fd fc2a 	bl	8006f00 <SYSTIMER_Init>
 80096ac:	4603      	mov	r3, r0
 80096ae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80096b0:	79fb      	ldrb	r3, [r7, #7]
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d104      	bne.n	80096c0 <DAVE_Init+0x5f0>
  {
	 /**  Initialization of FATFS APP instance FATFS_0 */
	 init_status = (DAVE_STATUS_t)FATFS_Init(&FATFS_0); 
 80096b6:	482d      	ldr	r0, [pc, #180]	; (800976c <DAVE_Init+0x69c>)
 80096b8:	f7ff f978 	bl	80089ac <FATFS_Init>
 80096bc:	4603      	mov	r3, r0
 80096be:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80096c0:	79fb      	ldrb	r3, [r7, #7]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <DAVE_Init+0x600>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_1 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_1); 
 80096c6:	482a      	ldr	r0, [pc, #168]	; (8009770 <DAVE_Init+0x6a0>)
 80096c8:	f7fe fb88 	bl	8007ddc <INTERRUPT_Init>
 80096cc:	4603      	mov	r3, r0
 80096ce:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 80096d0:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 80096d2:	4618      	mov	r0, r3
 80096d4:	3708      	adds	r7, #8
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	08013aa8 	.word	0x08013aa8
 80096e0:	08013abc 	.word	0x08013abc
 80096e4:	08013ad0 	.word	0x08013ad0
 80096e8:	08013ae4 	.word	0x08013ae4
 80096ec:	08013af8 	.word	0x08013af8
 80096f0:	08013b0c 	.word	0x08013b0c
 80096f4:	08013b20 	.word	0x08013b20
 80096f8:	08013b34 	.word	0x08013b34
 80096fc:	08013b48 	.word	0x08013b48
 8009700:	08013b5c 	.word	0x08013b5c
 8009704:	08013b70 	.word	0x08013b70
 8009708:	08013b84 	.word	0x08013b84
 800970c:	08013b98 	.word	0x08013b98
 8009710:	08013bac 	.word	0x08013bac
 8009714:	08013bc0 	.word	0x08013bc0
 8009718:	08013bd4 	.word	0x08013bd4
 800971c:	08013be8 	.word	0x08013be8
 8009720:	08013bfc 	.word	0x08013bfc
 8009724:	08013c10 	.word	0x08013c10
 8009728:	08013c24 	.word	0x08013c24
 800972c:	1ffe8a5c 	.word	0x1ffe8a5c
 8009730:	1ffe8a68 	.word	0x1ffe8a68
 8009734:	08013e54 	.word	0x08013e54
 8009738:	08014048 	.word	0x08014048
 800973c:	1ffe8850 	.word	0x1ffe8850
 8009740:	1ffe883c 	.word	0x1ffe883c
 8009744:	1ffe889c 	.word	0x1ffe889c
 8009748:	1ffe88e0 	.word	0x1ffe88e0
 800974c:	08013680 	.word	0x08013680
 8009750:	1ffe8844 	.word	0x1ffe8844
 8009754:	08014164 	.word	0x08014164
 8009758:	08013c38 	.word	0x08013c38
 800975c:	08013c4c 	.word	0x08013c4c
 8009760:	08013c60 	.word	0x08013c60
 8009764:	08013c74 	.word	0x08013c74
 8009768:	1fff4440 	.word	0x1fff4440
 800976c:	1ffe8ab0 	.word	0x1ffe8ab0
 8009770:	08013684 	.word	0x08013684

08009774 <OBDII_CAN_Tx>:
		{0x5E4, {0x00}},
		{0x5E5, {0x00}}
};

void OBDII_CAN_Tx(void)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_2;
 800977a:	4b49      	ldr	r3, [pc, #292]	; (80098a0 <OBDII_CAN_Tx+0x12c>)
 800977c:	60bb      	str	r3, [r7, #8]
	uint8_t *array_data;

/*******************************************bms 0x01******************************************/
	OBDII_CAN[can_0x01].CAN_Data[0] = BMS_SOC; // soc
 800977e:	4b49      	ldr	r3, [pc, #292]	; (80098a4 <OBDII_CAN_Tx+0x130>)
 8009780:	781b      	ldrb	r3, [r3, #0]
 8009782:	b2da      	uxtb	r2, r3
 8009784:	4b48      	ldr	r3, [pc, #288]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009786:	711a      	strb	r2, [r3, #4]

	OBDII_CAN[can_0x01].CAN_Data[1] = Bms_maxTemp; // temp;
 8009788:	4b48      	ldr	r3, [pc, #288]	; (80098ac <OBDII_CAN_Tx+0x138>)
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	b2da      	uxtb	r2, r3
 800978e:	4b46      	ldr	r3, [pc, #280]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009790:	715a      	strb	r2, [r3, #5]

	//OBDII_CAN[can_0x01].CAN_Data[2];//packcurrent H;
	//OBDII_CAN[can_0x01].CAN_Data[3];//packcurrent L;

	OBDII_CAN[can_0x01].CAN_Data[4] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7]; //packvoltage H
 8009792:	4b47      	ldr	r3, [pc, #284]	; (80098b0 <OBDII_CAN_Tx+0x13c>)
 8009794:	7ddb      	ldrb	r3, [r3, #23]
 8009796:	b2da      	uxtb	r2, r3
 8009798:	4b43      	ldr	r3, [pc, #268]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 800979a:	721a      	strb	r2, [r3, #8]
	OBDII_CAN[can_0x01].CAN_Data[5] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]; //packvoltage L
 800979c:	4b44      	ldr	r3, [pc, #272]	; (80098b0 <OBDII_CAN_Tx+0x13c>)
 800979e:	7d9b      	ldrb	r3, [r3, #22]
 80097a0:	b2da      	uxtb	r2, r3
 80097a2:	4b41      	ldr	r3, [pc, #260]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097a4:	725a      	strb	r2, [r3, #9]

/*******************************************eps 0x02******************************************/


/*******************************************hvac 0x03******************************************/
	 OBDII_CAN[can_0x03].CAN_Data[0] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0]; //TempdegreeC
 80097a6:	4b43      	ldr	r3, [pc, #268]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097a8:	7c1b      	ldrb	r3, [r3, #16]
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	4b3e      	ldr	r3, [pc, #248]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097ae:	771a      	strb	r2, [r3, #28]
	 OBDII_CAN[can_0x03].CAN_Data[1] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1]; //Pressure
 80097b0:	4b40      	ldr	r3, [pc, #256]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097b2:	7c5b      	ldrb	r3, [r3, #17]
 80097b4:	b2da      	uxtb	r2, r3
 80097b6:	4b3c      	ldr	r3, [pc, #240]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097b8:	775a      	strb	r2, [r3, #29]

	 OBDII_CAN[can_0x03].CAN_Data[2] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2]; //1: AC switch on,  0: AC switch off,
 80097ba:	4b3e      	ldr	r3, [pc, #248]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097bc:	7c9b      	ldrb	r3, [r3, #18]
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	4b39      	ldr	r3, [pc, #228]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097c2:	779a      	strb	r2, [r3, #30]

	 OBDII_CAN[can_0x03].CAN_Data[3] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1]; //AC rpm H
 80097c4:	4b3b      	ldr	r3, [pc, #236]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097c6:	795b      	ldrb	r3, [r3, #5]
 80097c8:	b2da      	uxtb	r2, r3
 80097ca:	4b37      	ldr	r3, [pc, #220]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097cc:	77da      	strb	r2, [r3, #31]
	 OBDII_CAN[can_0x03].CAN_Data[4] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[0]; //AC rpm L
 80097ce:	4b39      	ldr	r3, [pc, #228]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097d0:	791b      	ldrb	r3, [r3, #4]
 80097d2:	b2da      	uxtb	r2, r3
 80097d4:	4b34      	ldr	r3, [pc, #208]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097d6:	f883 2020 	strb.w	r2, [r3, #32]

	 OBDII_CAN[can_0x03].CAN_Data[5] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3]; //AC ON -> compressor enable bit
 80097da:	4b36      	ldr	r3, [pc, #216]	; (80098b4 <OBDII_CAN_Tx+0x140>)
 80097dc:	79db      	ldrb	r3, [r3, #7]
 80097de:	b2da      	uxtb	r2, r3
 80097e0:	4b31      	ldr	r3, [pc, #196]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	 //OBDII_CAN[can_0x04].CAN_Data[3]; //throttle percentage L

	//OBDII_CAN[can_0x04].CAN_Data[4]; //speed H
	 //OBDII_CAN[can_0x04].CAN_Data[5]; //speed L

	 OBDII_CAN[can_0x04].CAN_Data[6] = Mcu_Temp;
 80097e6:	4b34      	ldr	r3, [pc, #208]	; (80098b8 <OBDII_CAN_Tx+0x144>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	b2da      	uxtb	r2, r3
 80097ec:	4b2e      	ldr	r3, [pc, #184]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097ee:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 OBDII_CAN[can_0x04].CAN_Data[7] = Motor_Temp;
 80097f2:	4b32      	ldr	r3, [pc, #200]	; (80098bc <OBDII_CAN_Tx+0x148>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	4b2b      	ldr	r3, [pc, #172]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 80097fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

/*******************************************madhura 0x05******************************************/

	 OBDII_CAN[can_0x05].CAN_Data[0] = obc_madhura[can_0x18FF50E5].CAN_Data[0]; // voltage H
 80097fe:	4b30      	ldr	r3, [pc, #192]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 8009800:	7c1b      	ldrb	r3, [r3, #16]
 8009802:	b2da      	uxtb	r2, r3
 8009804:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 OBDII_CAN[can_0x05].CAN_Data[1] = obc_madhura[can_0x18FF50E5].CAN_Data[1]; // voltage L
 800980a:	4b2d      	ldr	r3, [pc, #180]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 800980c:	7c5b      	ldrb	r3, [r3, #17]
 800980e:	b2da      	uxtb	r2, r3
 8009810:	4b25      	ldr	r3, [pc, #148]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	 OBDII_CAN[can_0x05].CAN_Data[2] = obc_madhura[can_0x18FF50E5].CAN_Data[2]; // current H
 8009816:	4b2a      	ldr	r3, [pc, #168]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 8009818:	7c9b      	ldrb	r3, [r3, #18]
 800981a:	b2da      	uxtb	r2, r3
 800981c:	4b22      	ldr	r3, [pc, #136]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 800981e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 OBDII_CAN[can_0x05].CAN_Data[3] = obc_madhura[can_0x18FF50E5].CAN_Data[3]; // current L
 8009822:	4b27      	ldr	r3, [pc, #156]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 8009824:	7cdb      	ldrb	r3, [r3, #19]
 8009826:	b2da      	uxtb	r2, r3
 8009828:	4b1f      	ldr	r3, [pc, #124]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 800982a:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
 800982e:	4b24      	ldr	r3, [pc, #144]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 8009830:	7d1b      	ldrb	r3, [r3, #20]
 8009832:	b2da      	uxtb	r2, r3
 8009834:	4b1c      	ldr	r3, [pc, #112]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009836:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode
 800983a:	4b21      	ldr	r3, [pc, #132]	; (80098c0 <OBDII_CAN_Tx+0x14c>)
 800983c:	7d5b      	ldrb	r3, [r3, #21]
 800983e:	b2da      	uxtb	r2, r3
 8009840:	4b19      	ldr	r3, [pc, #100]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009842:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39


	 for(int i = 0; i < can_OBD_max; i++)
 8009846:	2300      	movs	r3, #0
 8009848:	60fb      	str	r3, [r7, #12]
 800984a:	e023      	b.n	8009894 <OBDII_CAN_Tx+0x120>
	 {
		 array_data = &OBDII_CAN[i].CAN_Data[0];
 800984c:	68fa      	ldr	r2, [r7, #12]
 800984e:	4613      	mov	r3, r2
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	4a14      	ldr	r2, [pc, #80]	; (80098a8 <OBDII_CAN_Tx+0x134>)
 8009858:	4413      	add	r3, r2
 800985a:	3304      	adds	r3, #4
 800985c:	607b      	str	r3, [r7, #4]

		 //  update data for the MO to transmit
		 status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[i],array_data);
 800985e:	68ba      	ldr	r2, [r7, #8]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	3302      	adds	r3, #2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	6879      	ldr	r1, [r7, #4]
 800986e:	f7ff fb5b 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 8009872:	4603      	mov	r3, r0
 8009874:	70fb      	strb	r3, [r7, #3]

		 if (status == CAN_NODE_STATUS_SUCCESS)
 8009876:	78fb      	ldrb	r3, [r7, #3]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d108      	bne.n	800988e <OBDII_CAN_Tx+0x11a>
		 {
		    // message object data updated.

		    // transmit the data
		    CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[i]);
 800987c:	68ba      	ldr	r2, [r7, #8]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	3302      	adds	r3, #2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	4413      	add	r3, r2
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	4618      	mov	r0, r3
 800988a:	f7ff fb29 	bl	8008ee0 <CAN_NODE_MO_Transmit>

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode


	 for(int i = 0; i < can_OBD_max; i++)
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3301      	adds	r3, #1
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	2b04      	cmp	r3, #4
 8009898:	ddd8      	ble.n	800984c <OBDII_CAN_Tx+0xd8>
		 else
		 {
		     // message object failed to update.
		 }
	 }
}
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	08014164 	.word	0x08014164
 80098a4:	1fff483c 	.word	0x1fff483c
 80098a8:	1ffe9238 	.word	0x1ffe9238
 80098ac:	1fff4838 	.word	0x1fff4838
 80098b0:	1ffe9274 	.word	0x1ffe9274
 80098b4:	1ffe93c4 	.word	0x1ffe93c4
 80098b8:	1fff48f8 	.word	0x1fff48f8
 80098bc:	1fff484c 	.word	0x1fff484c
 80098c0:	1ffe94f4 	.word	0x1ffe94f4

080098c4 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
 80098cc:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	61da      	str	r2, [r3, #28]
}
 80098d6:	370c      	adds	r7, #12
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <CAN_Rx_0x1808A7F3>:
		{0X180BA7F3, {0x00}}
};


void CAN_Rx_0x1808A7F3(void)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80098e6:	4b1c      	ldr	r3, [pc, #112]	; (8009958 <CAN_Rx_0x1808A7F3+0x78>)
 80098e8:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80098ea:	230c      	movs	r3, #12
 80098ec:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80098ee:	7afb      	ldrb	r3, [r7, #11]
 80098f0:	68fa      	ldr	r2, [r7, #12]
 80098f2:	3302      	adds	r3, #2
 80098f4:	009b      	lsls	r3, r3, #2
 80098f6:	4413      	add	r3, r2
 80098f8:	685b      	ldr	r3, [r3, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80098fe:	7afb      	ldrb	r3, [r7, #11]
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	3302      	adds	r3, #2
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	4413      	add	r3, r2
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fb2c 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009910:	4603      	mov	r3, r0
 8009912:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009914:	78fb      	ldrb	r3, [r7, #3]
 8009916:	f003 0301 	and.w	r3, r3, #1
 800991a:	2b00      	cmp	r3, #0
 800991c:	d016      	beq.n	800994c <CAN_Rx_0x1808A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	2101      	movs	r1, #1
 8009922:	f7ff ffcf 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009926:	7afb      	ldrb	r3, [r7, #11]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	3302      	adds	r3, #2
 800992c:	009b      	lsls	r3, r3, #2
 800992e:	4413      	add	r3, r2
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	4618      	mov	r0, r3
 8009934:	f7ff fae6 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009938:	4603      	mov	r3, r0
 800993a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800993c:	78bb      	ldrb	r3, [r7, #2]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <CAN_Rx_0x1808A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009942:	2301      	movs	r3, #1
 8009944:	707b      	strb	r3, [r7, #1]
 8009946:	e001      	b.n	800994c <CAN_Rx_0x1808A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1808A7F3();
 800994c:	f000 fbac 	bl	800a0a8 <process_Rx_CAN_0X1808A7F3>
}
 8009950:	3710      	adds	r7, #16
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	08013e54 	.word	0x08013e54

0800995c <CAN_Rx_0x180AA7F3>:


void CAN_Rx_0x180AA7F3(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	b084      	sub	sp, #16
 8009960:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009962:	4b1c      	ldr	r3, [pc, #112]	; (80099d4 <CAN_Rx_0x180AA7F3+0x78>)
 8009964:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009966:	230d      	movs	r3, #13
 8009968:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800996a:	7afb      	ldrb	r3, [r7, #11]
 800996c:	68fa      	ldr	r2, [r7, #12]
 800996e:	3302      	adds	r3, #2
 8009970:	009b      	lsls	r3, r3, #2
 8009972:	4413      	add	r3, r2
 8009974:	685b      	ldr	r3, [r3, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800997a:	7afb      	ldrb	r3, [r7, #11]
 800997c:	68fa      	ldr	r2, [r7, #12]
 800997e:	3302      	adds	r3, #2
 8009980:	009b      	lsls	r3, r3, #2
 8009982:	4413      	add	r3, r2
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	4618      	mov	r0, r3
 8009988:	f7ff faee 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800998c:	4603      	mov	r3, r0
 800998e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009990:	78fb      	ldrb	r3, [r7, #3]
 8009992:	f003 0301 	and.w	r3, r3, #1
 8009996:	2b00      	cmp	r3, #0
 8009998:	d016      	beq.n	80099c8 <CAN_Rx_0x180AA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	2101      	movs	r1, #1
 800999e:	f7ff ff91 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80099a2:	7afb      	ldrb	r3, [r7, #11]
 80099a4:	68fa      	ldr	r2, [r7, #12]
 80099a6:	3302      	adds	r3, #2
 80099a8:	009b      	lsls	r3, r3, #2
 80099aa:	4413      	add	r3, r2
 80099ac:	685b      	ldr	r3, [r3, #4]
 80099ae:	4618      	mov	r0, r3
 80099b0:	f7ff faa8 	bl	8008f04 <CAN_NODE_MO_Receive>
 80099b4:	4603      	mov	r3, r0
 80099b6:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80099b8:	78bb      	ldrb	r3, [r7, #2]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d102      	bne.n	80099c4 <CAN_Rx_0x180AA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80099be:	2301      	movs	r3, #1
 80099c0:	707b      	strb	r3, [r7, #1]
 80099c2:	e001      	b.n	80099c8 <CAN_Rx_0x180AA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80099c4:	2300      	movs	r3, #0
 80099c6:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180AA7F3();
 80099c8:	f000 fb88 	bl	800a0dc <process_Rx_CAN_0X180AA7F3>
}
 80099cc:	3710      	adds	r7, #16
 80099ce:	46bd      	mov	sp, r7
 80099d0:	bd80      	pop	{r7, pc}
 80099d2:	bf00      	nop
 80099d4:	08013e54 	.word	0x08013e54

080099d8 <CAN_Rx_0x180BA7F3>:


void CAN_Rx_0x180BA7F3(void)
{
 80099d8:	b580      	push	{r7, lr}
 80099da:	b084      	sub	sp, #16
 80099dc:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80099de:	4b1c      	ldr	r3, [pc, #112]	; (8009a50 <CAN_Rx_0x180BA7F3+0x78>)
 80099e0:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80099e2:	230e      	movs	r3, #14
 80099e4:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80099e6:	7afb      	ldrb	r3, [r7, #11]
 80099e8:	68fa      	ldr	r2, [r7, #12]
 80099ea:	3302      	adds	r3, #2
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	4413      	add	r3, r2
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80099f6:	7afb      	ldrb	r3, [r7, #11]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	3302      	adds	r3, #2
 80099fc:	009b      	lsls	r3, r3, #2
 80099fe:	4413      	add	r3, r2
 8009a00:	685b      	ldr	r3, [r3, #4]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f7ff fab0 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009a0c:	78fb      	ldrb	r3, [r7, #3]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d016      	beq.n	8009a44 <CAN_Rx_0x180BA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	2101      	movs	r1, #1
 8009a1a:	f7ff ff53 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009a1e:	7afb      	ldrb	r3, [r7, #11]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	3302      	adds	r3, #2
 8009a24:	009b      	lsls	r3, r3, #2
 8009a26:	4413      	add	r3, r2
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	f7ff fa6a 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009a30:	4603      	mov	r3, r0
 8009a32:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009a34:	78bb      	ldrb	r3, [r7, #2]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d102      	bne.n	8009a40 <CAN_Rx_0x180BA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	707b      	strb	r3, [r7, #1]
 8009a3e:	e001      	b.n	8009a44 <CAN_Rx_0x180BA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009a40:	2300      	movs	r3, #0
 8009a42:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180BA7F3();
 8009a44:	f000 fb9a 	bl	800a17c <process_Rx_CAN_0X180BA7F3>
}
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	08013e54 	.word	0x08013e54

08009a54 <CAN_Rx_0x180EA7F3>:


void CAN_Rx_0x180EA7F3(void)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b084      	sub	sp, #16
 8009a58:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <CAN_Rx_0x180EA7F3+0x78>)
 8009a5c:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009a5e:	2314      	movs	r3, #20
 8009a60:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009a62:	7afb      	ldrb	r3, [r7, #11]
 8009a64:	68fa      	ldr	r2, [r7, #12]
 8009a66:	3302      	adds	r3, #2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	4413      	add	r3, r2
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009a72:	7afb      	ldrb	r3, [r7, #11]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	3302      	adds	r3, #2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	4413      	add	r3, r2
 8009a7c:	685b      	ldr	r3, [r3, #4]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f7ff fa72 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009a84:	4603      	mov	r3, r0
 8009a86:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d016      	beq.n	8009ac0 <CAN_Rx_0x180EA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	2101      	movs	r1, #1
 8009a96:	f7ff ff15 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009a9a:	7afb      	ldrb	r3, [r7, #11]
 8009a9c:	68fa      	ldr	r2, [r7, #12]
 8009a9e:	3302      	adds	r3, #2
 8009aa0:	009b      	lsls	r3, r3, #2
 8009aa2:	4413      	add	r3, r2
 8009aa4:	685b      	ldr	r3, [r3, #4]
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7ff fa2c 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009aac:	4603      	mov	r3, r0
 8009aae:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009ab0:	78bb      	ldrb	r3, [r7, #2]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d102      	bne.n	8009abc <CAN_Rx_0x180EA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009ab6:	2301      	movs	r3, #1
 8009ab8:	707b      	strb	r3, [r7, #1]
 8009aba:	e001      	b.n	8009ac0 <CAN_Rx_0x180EA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009abc:	2300      	movs	r3, #0
 8009abe:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180EA7F3();
 8009ac0:	f000 f968 	bl	8009d94 <process_Rx_CAN_0X180EA7F3>
}
 8009ac4:	3710      	adds	r7, #16
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	bf00      	nop
 8009acc:	08013e54 	.word	0x08013e54

08009ad0 <CAN_Rx_0x180FA7F3>:

void CAN_Rx_0x180FA7F3(void)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b084      	sub	sp, #16
 8009ad4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ad6:	4b1c      	ldr	r3, [pc, #112]	; (8009b48 <CAN_Rx_0x180FA7F3+0x78>)
 8009ad8:	60fb      	str	r3, [r7, #12]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009ada:	2315      	movs	r3, #21
 8009adc:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009ade:	7afb      	ldrb	r3, [r7, #11]
 8009ae0:	68fa      	ldr	r2, [r7, #12]
 8009ae2:	3302      	adds	r3, #2
 8009ae4:	009b      	lsls	r3, r3, #2
 8009ae6:	4413      	add	r3, r2
 8009ae8:	685b      	ldr	r3, [r3, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009aee:	7afb      	ldrb	r3, [r7, #11]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	3302      	adds	r3, #2
 8009af4:	009b      	lsls	r3, r3, #2
 8009af6:	4413      	add	r3, r2
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	4618      	mov	r0, r3
 8009afc:	f7ff fa34 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009b00:	4603      	mov	r3, r0
 8009b02:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009b04:	78fb      	ldrb	r3, [r7, #3]
 8009b06:	f003 0301 	and.w	r3, r3, #1
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d016      	beq.n	8009b3c <CAN_Rx_0x180FA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	2101      	movs	r1, #1
 8009b12:	f7ff fed7 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009b16:	7afb      	ldrb	r3, [r7, #11]
 8009b18:	68fa      	ldr	r2, [r7, #12]
 8009b1a:	3302      	adds	r3, #2
 8009b1c:	009b      	lsls	r3, r3, #2
 8009b1e:	4413      	add	r3, r2
 8009b20:	685b      	ldr	r3, [r3, #4]
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff f9ee 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009b2c:	78bb      	ldrb	r3, [r7, #2]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d102      	bne.n	8009b38 <CAN_Rx_0x180FA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009b32:	2301      	movs	r3, #1
 8009b34:	707b      	strb	r3, [r7, #1]
 8009b36:	e001      	b.n	8009b3c <CAN_Rx_0x180FA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009b38:	2300      	movs	r3, #0
 8009b3a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180FA7F3();
 8009b3c:	f000 fa2e 	bl	8009f9c <process_Rx_CAN_0X180FA7F3>
}
 8009b40:	3710      	adds	r7, #16
 8009b42:	46bd      	mov	sp, r7
 8009b44:	bd80      	pop	{r7, pc}
 8009b46:	bf00      	nop
 8009b48:	08013e54 	.word	0x08013e54

08009b4c <CAN_Rx_0x1810A7F3>:

void CAN_Rx_0x1810A7F3(void)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b084      	sub	sp, #16
 8009b50:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009b52:	4b1c      	ldr	r3, [pc, #112]	; (8009bc4 <CAN_Rx_0x1810A7F3+0x78>)
 8009b54:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009b56:	2316      	movs	r3, #22
 8009b58:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009b5a:	7afb      	ldrb	r3, [r7, #11]
 8009b5c:	68fa      	ldr	r2, [r7, #12]
 8009b5e:	3302      	adds	r3, #2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	4413      	add	r3, r2
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009b6a:	7afb      	ldrb	r3, [r7, #11]
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	3302      	adds	r3, #2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	4413      	add	r3, r2
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7ff f9f6 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009b80:	78fb      	ldrb	r3, [r7, #3]
 8009b82:	f003 0301 	and.w	r3, r3, #1
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d016      	beq.n	8009bb8 <CAN_Rx_0x1810A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	2101      	movs	r1, #1
 8009b8e:	f7ff fe99 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009b92:	7afb      	ldrb	r3, [r7, #11]
 8009b94:	68fa      	ldr	r2, [r7, #12]
 8009b96:	3302      	adds	r3, #2
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	f7ff f9b0 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009ba8:	78bb      	ldrb	r3, [r7, #2]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d102      	bne.n	8009bb4 <CAN_Rx_0x1810A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009bae:	2301      	movs	r3, #1
 8009bb0:	707b      	strb	r3, [r7, #1]
 8009bb2:	e001      	b.n	8009bb8 <CAN_Rx_0x1810A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1810A7F3();
 8009bb8:	f000 f8c0 	bl	8009d3c <process_Rx_CAN_0X1810A7F3>
}
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	08013e54 	.word	0x08013e54

08009bc8 <CAN_Rx_0x1814A7F3>:
	}
	process_Rx_CAN_0X1813A7F3();
}

void CAN_Rx_0x1814A7F3(void)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b084      	sub	sp, #16
 8009bcc:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009bce:	4b1c      	ldr	r3, [pc, #112]	; (8009c40 <CAN_Rx_0x1814A7F3+0x78>)
 8009bd0:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009bd2:	2314      	movs	r3, #20
 8009bd4:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009bd6:	7afb      	ldrb	r3, [r7, #11]
 8009bd8:	68fa      	ldr	r2, [r7, #12]
 8009bda:	3302      	adds	r3, #2
 8009bdc:	009b      	lsls	r3, r3, #2
 8009bde:	4413      	add	r3, r2
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009be6:	7afb      	ldrb	r3, [r7, #11]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	3302      	adds	r3, #2
 8009bec:	009b      	lsls	r3, r3, #2
 8009bee:	4413      	add	r3, r2
 8009bf0:	685b      	ldr	r3, [r3, #4]
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7ff f9b8 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009bfc:	78fb      	ldrb	r3, [r7, #3]
 8009bfe:	f003 0301 	and.w	r3, r3, #1
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d016      	beq.n	8009c34 <CAN_Rx_0x1814A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	2101      	movs	r1, #1
 8009c0a:	f7ff fe5b 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009c0e:	7afb      	ldrb	r3, [r7, #11]
 8009c10:	68fa      	ldr	r2, [r7, #12]
 8009c12:	3302      	adds	r3, #2
 8009c14:	009b      	lsls	r3, r3, #2
 8009c16:	4413      	add	r3, r2
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7ff f972 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009c20:	4603      	mov	r3, r0
 8009c22:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009c24:	78bb      	ldrb	r3, [r7, #2]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d102      	bne.n	8009c30 <CAN_Rx_0x1814A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	707b      	strb	r3, [r7, #1]
 8009c2e:	e001      	b.n	8009c34 <CAN_Rx_0x1814A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1814A7F3();
 8009c34:	f000 fa04 	bl	800a040 <process_Rx_CAN_0X1814A7F3>
}
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}
 8009c3e:	bf00      	nop
 8009c40:	08013e54 	.word	0x08013e54

08009c44 <CAN_Rx_0x1815A7F3>:

void CAN_Rx_0x1815A7F3(void)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b084      	sub	sp, #16
 8009c48:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009c4a:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <CAN_Rx_0x1815A7F3+0x78>)
 8009c4c:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009c4e:	2314      	movs	r3, #20
 8009c50:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009c52:	7afb      	ldrb	r3, [r7, #11]
 8009c54:	68fa      	ldr	r2, [r7, #12]
 8009c56:	3302      	adds	r3, #2
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	4413      	add	r3, r2
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009c62:	7afb      	ldrb	r3, [r7, #11]
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	3302      	adds	r3, #2
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4413      	add	r3, r2
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	4618      	mov	r0, r3
 8009c70:	f7ff f97a 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009c74:	4603      	mov	r3, r0
 8009c76:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	f003 0301 	and.w	r3, r3, #1
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d016      	beq.n	8009cb0 <CAN_Rx_0x1815A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	2101      	movs	r1, #1
 8009c86:	f7ff fe1d 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	3302      	adds	r3, #2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	4618      	mov	r0, r3
 8009c98:	f7ff f934 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009ca0:	78bb      	ldrb	r3, [r7, #2]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d102      	bne.n	8009cac <CAN_Rx_0x1815A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	707b      	strb	r3, [r7, #1]
 8009caa:	e001      	b.n	8009cb0 <CAN_Rx_0x1815A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009cac:	2300      	movs	r3, #0
 8009cae:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1815A7F3();
 8009cb0:	f000 f9e0 	bl	800a074 <process_Rx_CAN_0X1815A7F3>
}
 8009cb4:	3710      	adds	r7, #16
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	bd80      	pop	{r7, pc}
 8009cba:	bf00      	nop
 8009cbc:	08013e54 	.word	0x08013e54

08009cc0 <CAN_Rx_0x180CA7F3>:


void CAN_Rx_0x180CA7F3(void)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009cc6:	4b1c      	ldr	r3, [pc, #112]	; (8009d38 <CAN_Rx_0x180CA7F3+0x78>)
 8009cc8:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009cca:	2318      	movs	r3, #24
 8009ccc:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009cce:	7afb      	ldrb	r3, [r7, #11]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	3302      	adds	r3, #2
 8009cd4:	009b      	lsls	r3, r3, #2
 8009cd6:	4413      	add	r3, r2
 8009cd8:	685b      	ldr	r3, [r3, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009cde:	7afb      	ldrb	r3, [r7, #11]
 8009ce0:	68fa      	ldr	r2, [r7, #12]
 8009ce2:	3302      	adds	r3, #2
 8009ce4:	009b      	lsls	r3, r3, #2
 8009ce6:	4413      	add	r3, r2
 8009ce8:	685b      	ldr	r3, [r3, #4]
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7ff f93c 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009cf4:	78fb      	ldrb	r3, [r7, #3]
 8009cf6:	f003 0301 	and.w	r3, r3, #1
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d016      	beq.n	8009d2c <CAN_Rx_0x180CA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	2101      	movs	r1, #1
 8009d02:	f7ff fddf 	bl	80098c4 <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009d06:	7afb      	ldrb	r3, [r7, #11]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	3302      	adds	r3, #2
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	4413      	add	r3, r2
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f7ff f8f6 	bl	8008f04 <CAN_NODE_MO_Receive>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009d1c:	78bb      	ldrb	r3, [r7, #2]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d102      	bne.n	8009d28 <CAN_Rx_0x180CA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009d22:	2301      	movs	r3, #1
 8009d24:	707b      	strb	r3, [r7, #1]
 8009d26:	e001      	b.n	8009d2c <CAN_Rx_0x180CA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180CA7F3();
 8009d2c:	f000 fa7e 	bl	800a22c <process_Rx_CAN_0X180CA7F3>
}
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}
 8009d36:	bf00      	nop
 8009d38:	08013e54 	.word	0x08013e54

08009d3c <process_Rx_CAN_0X1810A7F3>:


void process_Rx_CAN_0X1810A7F3(void)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d42:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <process_Rx_CAN_0X1810A7F3+0x4c>)
 8009d44:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009d46:	2316      	movs	r3, #22
 8009d48:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1810A7F3].CAN_Data[0];
 8009d4a:	4b10      	ldr	r3, [pc, #64]	; (8009d8c <process_Rx_CAN_0X1810A7F3+0x50>)
 8009d4c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009d4e:	7afb      	ldrb	r3, [r7, #11]
 8009d50:	68fa      	ldr	r2, [r7, #12]
 8009d52:	3302      	adds	r3, #2
 8009d54:	009b      	lsls	r3, r3, #2
 8009d56:	4413      	add	r3, r2
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	6879      	ldr	r1, [r7, #4]
 8009d5e:	f000 ff93 	bl	800ac88 <CAN_NODE_MO_ReadData>

	//charging_started = ((tempData[0]) & 2);

	charge_complete = 0x00;
 8009d62:	4b0b      	ldr	r3, [pc, #44]	; (8009d90 <process_Rx_CAN_0X1810A7F3+0x54>)
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
	if(((tempData[6] >> 4) & 0x01))
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	3306      	adds	r3, #6
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	091b      	lsrs	r3, r3, #4
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d002      	beq.n	8009d80 <process_Rx_CAN_0X1810A7F3+0x44>
		charge_complete = 0x10;
 8009d7a:	4b05      	ldr	r3, [pc, #20]	; (8009d90 <process_Rx_CAN_0X1810A7F3+0x54>)
 8009d7c:	2210      	movs	r2, #16
 8009d7e:	701a      	strb	r2, [r3, #0]
}
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
 8009d86:	bf00      	nop
 8009d88:	08013e54 	.word	0x08013e54
 8009d8c:	1ffe9290 	.word	0x1ffe9290
 8009d90:	1fff489d 	.word	0x1fff489d

08009d94 <process_Rx_CAN_0X180EA7F3>:

void process_Rx_CAN_0X180EA7F3(void)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b086      	sub	sp, #24
 8009d98:	af00      	add	r7, sp, #0
	int8_t *tempData, mo_index;
	static unsigned int charge_count = 0, c4;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d9a:	4b70      	ldr	r3, [pc, #448]	; (8009f5c <process_Rx_CAN_0X180EA7F3+0x1c8>)
 8009d9c:	617b      	str	r3, [r7, #20]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009d9e:	2314      	movs	r3, #20
 8009da0:	74fb      	strb	r3, [r7, #19]

	tempData = &CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0];
 8009da2:	4b6f      	ldr	r3, [pc, #444]	; (8009f60 <process_Rx_CAN_0X180EA7F3+0x1cc>)
 8009da4:	60fb      	str	r3, [r7, #12]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009da6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009daa:	697a      	ldr	r2, [r7, #20]
 8009dac:	3302      	adds	r3, #2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	4413      	add	r3, r2
 8009db2:	685b      	ldr	r3, [r3, #4]
 8009db4:	4618      	mov	r0, r3
 8009db6:	68f9      	ldr	r1, [r7, #12]
 8009db8:	f000 ff66 	bl	800ac88 <CAN_NODE_MO_ReadData>

	ChargeCurrentLimit = ((uint16_t)(((uint16_t)tempData[3] << 8) | (uint8_t)tempData[2]))/10;
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	3303      	adds	r3, #3
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	b25b      	sxtb	r3, r3
 8009dc4:	b29b      	uxth	r3, r3
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	b29a      	uxth	r2, r3
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	3302      	adds	r3, #2
 8009dce:	781b      	ldrb	r3, [r3, #0]
 8009dd0:	b2db      	uxtb	r3, r3
 8009dd2:	b29b      	uxth	r3, r3
 8009dd4:	4313      	orrs	r3, r2
 8009dd6:	b29b      	uxth	r3, r3
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	4a62      	ldr	r2, [pc, #392]	; (8009f64 <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8009de0:	08db      	lsrs	r3, r3, #3
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	4b60      	ldr	r3, [pc, #384]	; (8009f68 <process_Rx_CAN_0X180EA7F3+0x1d4>)
 8009de6:	801a      	strh	r2, [r3, #0]
	DischargeCurrentLimit = ((int)(((int)tempData[5] << 8) | (int)tempData[4]))/10;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	3305      	adds	r3, #5
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	b25b      	sxtb	r3, r3
 8009df0:	021a      	lsls	r2, r3, #8
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	3304      	adds	r3, #4
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	b25b      	sxtb	r3, r3
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	4a5b      	ldr	r2, [pc, #364]	; (8009f6c <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009dfe:	fb82 1203 	smull	r1, r2, r2, r3
 8009e02:	1092      	asrs	r2, r2, #2
 8009e04:	17db      	asrs	r3, r3, #31
 8009e06:	1ad3      	subs	r3, r2, r3
 8009e08:	b29a      	uxth	r2, r3
 8009e0a:	4b59      	ldr	r3, [pc, #356]	; (8009f70 <process_Rx_CAN_0X180EA7F3+0x1dc>)
 8009e0c:	801a      	strh	r2, [r3, #0]
	RegenerativeCurrentLimit = ((uint16_t)(((uint16_t)tempData[7] << 8) | (uint8_t)tempData[6]))/10;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3307      	adds	r3, #7
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	b25b      	sxtb	r3, r3
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	021b      	lsls	r3, r3, #8
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	3306      	adds	r3, #6
 8009e20:	781b      	ldrb	r3, [r3, #0]
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	b29b      	uxth	r3, r3
 8009e2c:	4a4d      	ldr	r2, [pc, #308]	; (8009f64 <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e32:	08db      	lsrs	r3, r3, #3
 8009e34:	b29a      	uxth	r2, r3
 8009e36:	4b4f      	ldr	r3, [pc, #316]	; (8009f74 <process_Rx_CAN_0X180EA7F3+0x1e0>)
 8009e38:	801a      	strh	r2, [r3, #0]
//	int d =((uint16_t)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
	PackCurrent =  ((int)(((int)tempData[1] << 8) | (int8_t)tempData[0]))/10;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	781b      	ldrb	r3, [r3, #0]
 8009e40:	b25b      	sxtb	r3, r3
 8009e42:	021a      	lsls	r2, r3, #8
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	b25b      	sxtb	r3, r3
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	4a47      	ldr	r2, [pc, #284]	; (8009f6c <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009e4e:	fb82 1203 	smull	r1, r2, r2, r3
 8009e52:	1092      	asrs	r2, r2, #2
 8009e54:	17db      	asrs	r3, r3, #31
 8009e56:	1ad3      	subs	r3, r2, r3
 8009e58:	4a47      	ldr	r2, [pc, #284]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009e5a:	6013      	str	r3, [r2, #0]

	static int c = 0;// hv_count = 0;
	if((PackCurrent > 1))
 8009e5c:	4b46      	ldr	r3, [pc, #280]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	dd37      	ble.n	8009ed4 <process_Rx_CAN_0X180EA7F3+0x140>
	{
		if(charge_count++ > 20)
 8009e64:	4b45      	ldr	r3, [pc, #276]	; (8009f7c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	4944      	ldr	r1, [pc, #272]	; (8009f7c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009e6c:	600a      	str	r2, [r1, #0]
 8009e6e:	2b14      	cmp	r3, #20
 8009e70:	d905      	bls.n	8009e7e <process_Rx_CAN_0X180EA7F3+0xea>
		{
			charging_started = 1;
 8009e72:	4b43      	ldr	r3, [pc, #268]	; (8009f80 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009e74:	2201      	movs	r2, #1
 8009e76:	701a      	strb	r2, [r3, #0]
			charge_count = 0;
 8009e78:	4b40      	ldr	r3, [pc, #256]	; (8009f7c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	601a      	str	r2, [r3, #0]
		}

		if(Regenration_flag || RPM)
 8009e7e:	4b41      	ldr	r3, [pc, #260]	; (8009f84 <process_Rx_CAN_0X180EA7F3+0x1f0>)
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d103      	bne.n	8009e8e <process_Rx_CAN_0X180EA7F3+0xfa>
 8009e86:	4b40      	ldr	r3, [pc, #256]	; (8009f88 <process_Rx_CAN_0X180EA7F3+0x1f4>)
 8009e88:	881b      	ldrh	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d01e      	beq.n	8009ecc <process_Rx_CAN_0X180EA7F3+0x138>
		{

			//HvBatteryPower = 10 * 58;PackVoltage;
			charge_count = charging_started = 0;
 8009e8e:	4b3c      	ldr	r3, [pc, #240]	; (8009f80 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009e90:	2200      	movs	r2, #0
 8009e92:	701a      	strb	r2, [r3, #0]
 8009e94:	4b39      	ldr	r3, [pc, #228]	; (8009f7c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009e96:	2200      	movs	r2, #0
 8009e98:	601a      	str	r2, [r3, #0]
			HvBatteryPower = PackCurrent;
 8009e9a:	4b37      	ldr	r3, [pc, #220]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	4a3b      	ldr	r2, [pc, #236]	; (8009f8c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009ea0:	6013      	str	r3, [r2, #0]
			hv_count = 1;
 8009ea2:	4b3b      	ldr	r3, [pc, #236]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009ea4:	2201      	movs	r2, #1
 8009ea6:	801a      	strh	r2, [r3, #0]
			if(PackCurrent > c)
 8009ea8:	4b33      	ldr	r3, [pc, #204]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009eaa:	681a      	ldr	r2, [r3, #0]
 8009eac:	4b39      	ldr	r3, [pc, #228]	; (8009f94 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	dd0b      	ble.n	8009ecc <process_Rx_CAN_0X180EA7F3+0x138>
				{
				if((hv_count++ < 2))
 8009eb4:	4b36      	ldr	r3, [pc, #216]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009eb6:	881b      	ldrh	r3, [r3, #0]
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	b291      	uxth	r1, r2
 8009ebc:	4a34      	ldr	r2, [pc, #208]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009ebe:	8011      	strh	r1, [r2, #0]
 8009ec0:	2b01      	cmp	r3, #1
 8009ec2:	d803      	bhi.n	8009ecc <process_Rx_CAN_0X180EA7F3+0x138>
					c = PackCurrent;
 8009ec4:	4b2c      	ldr	r3, [pc, #176]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a32      	ldr	r2, [pc, #200]	; (8009f94 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009eca:	6013      	str	r3, [r2, #0]
				else if(PackCurrent < HvBatteryPower)
				{
					//HvBatteryPower = c * 58;PackVoltage;
				}
		}
		c4 = 0;
 8009ecc:	4b32      	ldr	r3, [pc, #200]	; (8009f98 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009ece:	2200      	movs	r2, #0
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e010      	b.n	8009ef6 <process_Rx_CAN_0X180EA7F3+0x162>

		//charge_count++;
	}
	else if((PackCurrent <= 0))
 8009ed4:	4b28      	ldr	r3, [pc, #160]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dc0c      	bgt.n	8009ef6 <process_Rx_CAN_0X180EA7F3+0x162>
	{
		charge_count = charging_started = 0;
 8009edc:	4b28      	ldr	r3, [pc, #160]	; (8009f80 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009ede:	2200      	movs	r2, #0
 8009ee0:	701a      	strb	r2, [r3, #0]
 8009ee2:	4b26      	ldr	r3, [pc, #152]	; (8009f7c <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	601a      	str	r2, [r3, #0]
		HvBatteryPower = c = 0;
 8009ee8:	4b2a      	ldr	r3, [pc, #168]	; (8009f94 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009eea:	2200      	movs	r2, #0
 8009eec:	601a      	str	r2, [r3, #0]
 8009eee:	4b29      	ldr	r3, [pc, #164]	; (8009f94 <process_Rx_CAN_0X180EA7F3+0x200>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4a26      	ldr	r2, [pc, #152]	; (8009f8c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009ef4:	6013      	str	r3, [r2, #0]
	}

if( (hv_count == 1) )
 8009ef6:	4b26      	ldr	r3, [pc, #152]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009ef8:	881b      	ldrh	r3, [r3, #0]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d10d      	bne.n	8009f1a <process_Rx_CAN_0X180EA7F3+0x186>
{
	HvBatteryPower = HvBatteryPower * 58;PackVoltage;
 8009efe:	4b23      	ldr	r3, [pc, #140]	; (8009f8c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	223a      	movs	r2, #58	; 0x3a
 8009f04:	fb02 f303 	mul.w	r3, r2, r3
 8009f08:	4a20      	ldr	r2, [pc, #128]	; (8009f8c <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009f0a:	6013      	str	r3, [r2, #0]
	hv_count++;
 8009f0c:	4b20      	ldr	r3, [pc, #128]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009f0e:	881b      	ldrh	r3, [r3, #0]
 8009f10:	3301      	adds	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	4b1e      	ldr	r3, [pc, #120]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009f16:	801a      	strh	r2, [r3, #0]
 8009f18:	e006      	b.n	8009f28 <process_Rx_CAN_0X180EA7F3+0x194>

}
else if(hv_count > 10)
 8009f1a:	4b1d      	ldr	r3, [pc, #116]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009f1c:	881b      	ldrh	r3, [r3, #0]
 8009f1e:	2b0a      	cmp	r3, #10
 8009f20:	d902      	bls.n	8009f28 <process_Rx_CAN_0X180EA7F3+0x194>
	hv_count = 0;
 8009f22:	4b1b      	ldr	r3, [pc, #108]	; (8009f90 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	801a      	strh	r2, [r3, #0]

	//OBDII_CAN[can_0x01].CAN_Data[2] = tempData[1];
	//OBDII_CAN[can_0x01].CAN_Data[3] = tempData[0];
if(PackCurrent < c4)
 8009f28:	4b13      	ldr	r3, [pc, #76]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	461a      	mov	r2, r3
 8009f2e:	4b1a      	ldr	r3, [pc, #104]	; (8009f98 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d207      	bcs.n	8009f46 <process_Rx_CAN_0X180EA7F3+0x1b2>
{
	int a;
	a++;
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	60bb      	str	r3, [r7, #8]
	c4 = PackCurrent;
 8009f3c:	4b0e      	ldr	r3, [pc, #56]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	461a      	mov	r2, r3
 8009f42:	4b15      	ldr	r3, [pc, #84]	; (8009f98 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009f44:	601a      	str	r2, [r3, #0]
}
if(PackCurrent < -10)
 8009f46:	4b0c      	ldr	r3, [pc, #48]	; (8009f78 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f113 0f0a 	cmn.w	r3, #10
 8009f4e:	da02      	bge.n	8009f56 <process_Rx_CAN_0X180EA7F3+0x1c2>
{
	int a;
	a++;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	3301      	adds	r3, #1
 8009f54:	607b      	str	r3, [r7, #4]
}
}
 8009f56:	3718      	adds	r7, #24
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}
 8009f5c:	08013e54 	.word	0x08013e54
 8009f60:	1ffe9278 	.word	0x1ffe9278
 8009f64:	cccccccd 	.word	0xcccccccd
 8009f68:	1fff4916 	.word	0x1fff4916
 8009f6c:	66666667 	.word	0x66666667
 8009f70:	1fff483a 	.word	0x1fff483a
 8009f74:	1fff4860 	.word	0x1fff4860
 8009f78:	1fff4858 	.word	0x1fff4858
 8009f7c:	1fff44b4 	.word	0x1fff44b4
 8009f80:	1fff489c 	.word	0x1fff489c
 8009f84:	1fff4918 	.word	0x1fff4918
 8009f88:	1fff4854 	.word	0x1fff4854
 8009f8c:	1fff485c 	.word	0x1fff485c
 8009f90:	1fff4878 	.word	0x1fff4878
 8009f94:	1fff44b8 	.word	0x1fff44b8
 8009f98:	1fff44bc 	.word	0x1fff44bc

08009f9c <process_Rx_CAN_0X180FA7F3>:

void process_Rx_CAN_0X180FA7F3(void)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
	int PackCurent = 0;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	60fb      	str	r3, [r7, #12]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009fa6:	4b20      	ldr	r3, [pc, #128]	; (800a028 <process_Rx_CAN_0X180FA7F3+0x8c>)
 8009fa8:	60bb      	str	r3, [r7, #8]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009faa:	2315      	movs	r3, #21
 8009fac:	71fb      	strb	r3, [r7, #7]

	tempData = &CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0];
 8009fae:	4b1f      	ldr	r3, [pc, #124]	; (800a02c <process_Rx_CAN_0X180FA7F3+0x90>)
 8009fb0:	603b      	str	r3, [r7, #0]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	3302      	adds	r3, #2
 8009fb8:	009b      	lsls	r3, r3, #2
 8009fba:	4413      	add	r3, r2
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	6839      	ldr	r1, [r7, #0]
 8009fc2:	f000 fe61 	bl	800ac88 <CAN_NODE_MO_ReadData>

	Bms_SOC = ((uint16_t)tempData[1] << 8) | tempData[0];
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	021b      	lsls	r3, r3, #8
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	b29b      	uxth	r3, r3
 8009fda:	b29a      	uxth	r2, r3
 8009fdc:	4b14      	ldr	r3, [pc, #80]	; (800a030 <process_Rx_CAN_0X180FA7F3+0x94>)
 8009fde:	801a      	strh	r2, [r3, #0]

	Bms_SOH = (((uint16_t)tempData[3] << 8) | tempData[2]) / 10;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	3303      	adds	r3, #3
 8009fe4:	781b      	ldrb	r3, [r3, #0]
 8009fe6:	021b      	lsls	r3, r3, #8
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	3202      	adds	r2, #2
 8009fec:	7812      	ldrb	r2, [r2, #0]
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	4a10      	ldr	r2, [pc, #64]	; (800a034 <process_Rx_CAN_0X180FA7F3+0x98>)
 8009ff2:	fb82 1203 	smull	r1, r2, r2, r3
 8009ff6:	1092      	asrs	r2, r2, #2
 8009ff8:	17db      	asrs	r3, r3, #31
 8009ffa:	1ad3      	subs	r3, r2, r3
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	4b0e      	ldr	r3, [pc, #56]	; (800a038 <process_Rx_CAN_0X180FA7F3+0x9c>)
 800a000:	801a      	strh	r2, [r3, #0]

	PackVoltage = (((uint16_t)tempData[7] << 8) | tempData[6])/10;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	3307      	adds	r3, #7
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	021b      	lsls	r3, r3, #8
 800a00a:	683a      	ldr	r2, [r7, #0]
 800a00c:	3206      	adds	r2, #6
 800a00e:	7812      	ldrb	r2, [r2, #0]
 800a010:	4313      	orrs	r3, r2
 800a012:	4a08      	ldr	r2, [pc, #32]	; (800a034 <process_Rx_CAN_0X180FA7F3+0x98>)
 800a014:	fb82 1203 	smull	r1, r2, r2, r3
 800a018:	1092      	asrs	r2, r2, #2
 800a01a:	17db      	asrs	r3, r3, #31
 800a01c:	1ad3      	subs	r3, r2, r3
 800a01e:	4a07      	ldr	r2, [pc, #28]	; (800a03c <process_Rx_CAN_0X180FA7F3+0xa0>)
 800a020:	6013      	str	r3, [r2, #0]

}
 800a022:	3710      	adds	r7, #16
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}
 800a028:	08013e54 	.word	0x08013e54
 800a02c:	1ffe9284 	.word	0x1ffe9284
 800a030:	1fff4904 	.word	0x1fff4904
 800a034:	66666667 	.word	0x66666667
 800a038:	1fff490c 	.word	0x1fff490c
 800a03c:	1fff491c 	.word	0x1fff491c

0800a040 <process_Rx_CAN_0X1814A7F3>:
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);

}

void process_Rx_CAN_0X1814A7F3(void)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <process_Rx_CAN_0X1814A7F3+0x2c>)
 800a048:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a04a:	2317      	movs	r3, #23
 800a04c:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1814A7F3].CAN_Data[0];
 800a04e:	4b08      	ldr	r3, [pc, #32]	; (800a070 <process_Rx_CAN_0X1814A7F3+0x30>)
 800a050:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a052:	7afb      	ldrb	r3, [r7, #11]
 800a054:	68fa      	ldr	r2, [r7, #12]
 800a056:	3302      	adds	r3, #2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	4413      	add	r3, r2
 800a05c:	685b      	ldr	r3, [r3, #4]
 800a05e:	4618      	mov	r0, r3
 800a060:	6879      	ldr	r1, [r7, #4]
 800a062:	f000 fe11 	bl	800ac88 <CAN_NODE_MO_ReadData>

}
 800a066:	3710      	adds	r7, #16
 800a068:	46bd      	mov	sp, r7
 800a06a:	bd80      	pop	{r7, pc}
 800a06c:	08013e54 	.word	0x08013e54
 800a070:	1ffe92b4 	.word	0x1ffe92b4

0800a074 <process_Rx_CAN_0X1815A7F3>:

void process_Rx_CAN_0X1815A7F3(void)
{
 800a074:	b580      	push	{r7, lr}
 800a076:	b084      	sub	sp, #16
 800a078:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <process_Rx_CAN_0X1815A7F3+0x2c>)
 800a07c:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a07e:	2317      	movs	r3, #23
 800a080:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1815A7F3].CAN_Data[0];
 800a082:	4b08      	ldr	r3, [pc, #32]	; (800a0a4 <process_Rx_CAN_0X1815A7F3+0x30>)
 800a084:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a086:	7afb      	ldrb	r3, [r7, #11]
 800a088:	68fa      	ldr	r2, [r7, #12]
 800a08a:	3302      	adds	r3, #2
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	4413      	add	r3, r2
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	4618      	mov	r0, r3
 800a094:	6879      	ldr	r1, [r7, #4]
 800a096:	f000 fdf7 	bl	800ac88 <CAN_NODE_MO_ReadData>

}
 800a09a:	3710      	adds	r7, #16
 800a09c:	46bd      	mov	sp, r7
 800a09e:	bd80      	pop	{r7, pc}
 800a0a0:	08013e54 	.word	0x08013e54
 800a0a4:	1ffe92c0 	.word	0x1ffe92c0

0800a0a8 <process_Rx_CAN_0X1808A7F3>:


void process_Rx_CAN_0X1808A7F3(void)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a0ae:	4b09      	ldr	r3, [pc, #36]	; (800a0d4 <process_Rx_CAN_0X1808A7F3+0x2c>)
 800a0b0:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a0b2:	230c      	movs	r3, #12
 800a0b4:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0];
 800a0b6:	4b08      	ldr	r3, [pc, #32]	; (800a0d8 <process_Rx_CAN_0X1808A7F3+0x30>)
 800a0b8:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a0ba:	7afb      	ldrb	r3, [r7, #11]
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	3302      	adds	r3, #2
 800a0c0:	009b      	lsls	r3, r3, #2
 800a0c2:	4413      	add	r3, r2
 800a0c4:	685b      	ldr	r3, [r3, #4]
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	f000 fddd 	bl	800ac88 <CAN_NODE_MO_ReadData>

}
 800a0ce:	3710      	adds	r7, #16
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}
 800a0d4:	08013e54 	.word	0x08013e54
 800a0d8:	1ffe92d8 	.word	0x1ffe92d8

0800a0dc <process_Rx_CAN_0X180AA7F3>:


void process_Rx_CAN_0X180AA7F3(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b084      	sub	sp, #16
 800a0e0:	af00      	add	r7, sp, #0
	BMS_Avg_temp=0;
 800a0e2:	4b23      	ldr	r3, [pc, #140]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a0e8:	4b22      	ldr	r3, [pc, #136]	; (800a174 <process_Rx_CAN_0X180AA7F3+0x98>)
 800a0ea:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a0ec:	230d      	movs	r3, #13
 800a0ee:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180AA7F3].CAN_Data[0];
 800a0f0:	4b21      	ldr	r3, [pc, #132]	; (800a178 <process_Rx_CAN_0X180AA7F3+0x9c>)
 800a0f2:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a0f4:	7afb      	ldrb	r3, [r7, #11]
 800a0f6:	68fa      	ldr	r2, [r7, #12]
 800a0f8:	3302      	adds	r3, #2
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	4413      	add	r3, r2
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	4618      	mov	r0, r3
 800a102:	6879      	ldr	r1, [r7, #4]
 800a104:	f000 fdc0 	bl	800ac88 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp=((int16_t)tempData[1] << 8) | tempData[0] ;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	3301      	adds	r3, #1
 800a10c:	781b      	ldrb	r3, [r3, #0]
 800a10e:	021b      	lsls	r3, r3, #8
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	7812      	ldrb	r2, [r2, #0]
 800a114:	4313      	orrs	r3, r2
 800a116:	4a16      	ldr	r2, [pc, #88]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a118:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	3303      	adds	r3, #3
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	021b      	lsls	r3, r3, #8
 800a122:	687a      	ldr	r2, [r7, #4]
 800a124:	3202      	adds	r2, #2
 800a126:	7812      	ldrb	r2, [r2, #0]
 800a128:	431a      	orrs	r2, r3
 800a12a:	4b11      	ldr	r3, [pc, #68]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	4413      	add	r3, r2
 800a130:	4a0f      	ldr	r2, [pc, #60]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a132:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	3305      	adds	r3, #5
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	021b      	lsls	r3, r3, #8
 800a13c:	687a      	ldr	r2, [r7, #4]
 800a13e:	3204      	adds	r2, #4
 800a140:	7812      	ldrb	r2, [r2, #0]
 800a142:	431a      	orrs	r2, r3
 800a144:	4b0a      	ldr	r3, [pc, #40]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4413      	add	r3, r2
 800a14a:	4a09      	ldr	r2, [pc, #36]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a14c:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	3307      	adds	r3, #7
 800a152:	781b      	ldrb	r3, [r3, #0]
 800a154:	021b      	lsls	r3, r3, #8
 800a156:	687a      	ldr	r2, [r7, #4]
 800a158:	3206      	adds	r2, #6
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	431a      	orrs	r2, r3
 800a15e:	4b04      	ldr	r3, [pc, #16]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4413      	add	r3, r2
 800a164:	4a02      	ldr	r2, [pc, #8]	; (800a170 <process_Rx_CAN_0X180AA7F3+0x94>)
 800a166:	6013      	str	r3, [r2, #0]

}
 800a168:	3710      	adds	r7, #16
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	1fff4908 	.word	0x1fff4908
 800a174:	08013e54 	.word	0x08013e54
 800a178:	1ffe92e4 	.word	0x1ffe92e4

0800a17c <process_Rx_CAN_0X180BA7F3>:


void process_Rx_CAN_0X180BA7F3(void)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b084      	sub	sp, #16
 800a180:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a182:	4b27      	ldr	r3, [pc, #156]	; (800a220 <process_Rx_CAN_0X180BA7F3+0xa4>)
 800a184:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a186:	230e      	movs	r3, #14
 800a188:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180BA7F3].CAN_Data[0];
 800a18a:	4b26      	ldr	r3, [pc, #152]	; (800a224 <process_Rx_CAN_0X180BA7F3+0xa8>)
 800a18c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a18e:	7afb      	ldrb	r3, [r7, #11]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	3302      	adds	r3, #2
 800a194:	009b      	lsls	r3, r3, #2
 800a196:	4413      	add	r3, r2
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	4618      	mov	r0, r3
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	f000 fd73 	bl	800ac88 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp +=((int16_t)tempData[1] << 8) | tempData[0] ;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	3301      	adds	r3, #1
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	021b      	lsls	r3, r3, #8
 800a1aa:	687a      	ldr	r2, [r7, #4]
 800a1ac:	7812      	ldrb	r2, [r2, #0]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	4a1c      	ldr	r2, [pc, #112]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1b8:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	3303      	adds	r3, #3
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	021b      	lsls	r3, r3, #8
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	3202      	adds	r2, #2
 800a1c6:	7812      	ldrb	r2, [r2, #0]
 800a1c8:	431a      	orrs	r2, r3
 800a1ca:	4b17      	ldr	r3, [pc, #92]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	4a15      	ldr	r2, [pc, #84]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1d2:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	3305      	adds	r3, #5
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	021b      	lsls	r3, r3, #8
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	3204      	adds	r2, #4
 800a1e0:	7812      	ldrb	r2, [r2, #0]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	4b10      	ldr	r3, [pc, #64]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	4a0f      	ldr	r2, [pc, #60]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a1ec:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	3307      	adds	r3, #7
 800a1f2:	781b      	ldrb	r3, [r3, #0]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	3206      	adds	r2, #6
 800a1fa:	7812      	ldrb	r2, [r2, #0]
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	4b0a      	ldr	r3, [pc, #40]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	4413      	add	r3, r2
 800a204:	4a08      	ldr	r2, [pc, #32]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a206:	6013      	str	r3, [r2, #0]

	BMS_Avg_temp=BMS_Avg_temp/8;
 800a208:	4b07      	ldr	r3, [pc, #28]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	da00      	bge.n	800a212 <process_Rx_CAN_0X180BA7F3+0x96>
 800a210:	3307      	adds	r3, #7
 800a212:	10db      	asrs	r3, r3, #3
 800a214:	461a      	mov	r2, r3
 800a216:	4b04      	ldr	r3, [pc, #16]	; (800a228 <process_Rx_CAN_0X180BA7F3+0xac>)
 800a218:	601a      	str	r2, [r3, #0]

}
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	08013e54 	.word	0x08013e54
 800a224:	1ffe92f0 	.word	0x1ffe92f0
 800a228:	1fff4908 	.word	0x1fff4908

0800a22c <process_Rx_CAN_0X180CA7F3>:



void process_Rx_CAN_0X180CA7F3(void)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a232:	4b22      	ldr	r3, [pc, #136]	; (800a2bc <process_Rx_CAN_0X180CA7F3+0x90>)
 800a234:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a236:	2318      	movs	r3, #24
 800a238:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[0];
 800a23a:	4b21      	ldr	r3, [pc, #132]	; (800a2c0 <process_Rx_CAN_0X180CA7F3+0x94>)
 800a23c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a23e:	7afb      	ldrb	r3, [r7, #11]
 800a240:	68fa      	ldr	r2, [r7, #12]
 800a242:	3302      	adds	r3, #2
 800a244:	009b      	lsls	r3, r3, #2
 800a246:	4413      	add	r3, r2
 800a248:	685b      	ldr	r3, [r3, #4]
 800a24a:	4618      	mov	r0, r3
 800a24c:	6879      	ldr	r1, [r7, #4]
 800a24e:	f000 fd1b 	bl	800ac88 <CAN_NODE_MO_ReadData>

	Bms_minTemp = ((int16_t)tempData[1] << 8) | tempData[0];
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	3301      	adds	r3, #1
 800a256:	781b      	ldrb	r3, [r3, #0]
 800a258:	021b      	lsls	r3, r3, #8
 800a25a:	b29a      	uxth	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	b29b      	uxth	r3, r3
 800a262:	4313      	orrs	r3, r2
 800a264:	b29a      	uxth	r2, r3
 800a266:	4b17      	ldr	r3, [pc, #92]	; (800a2c4 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a268:	801a      	strh	r2, [r3, #0]
	Bms_minTemp = Bms_minTemp / 10;
 800a26a:	4b16      	ldr	r3, [pc, #88]	; (800a2c4 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a26c:	881b      	ldrh	r3, [r3, #0]
 800a26e:	b21b      	sxth	r3, r3
 800a270:	4a15      	ldr	r2, [pc, #84]	; (800a2c8 <process_Rx_CAN_0X180CA7F3+0x9c>)
 800a272:	fb82 1203 	smull	r1, r2, r2, r3
 800a276:	1092      	asrs	r2, r2, #2
 800a278:	17db      	asrs	r3, r3, #31
 800a27a:	1ad3      	subs	r3, r2, r3
 800a27c:	b29a      	uxth	r2, r3
 800a27e:	4b11      	ldr	r3, [pc, #68]	; (800a2c4 <process_Rx_CAN_0X180CA7F3+0x98>)
 800a280:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = ((int16_t)tempData[3] << 8) | tempData[2];
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	3303      	adds	r3, #3
 800a286:	781b      	ldrb	r3, [r3, #0]
 800a288:	021b      	lsls	r3, r3, #8
 800a28a:	b29a      	uxth	r2, r3
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	3302      	adds	r3, #2
 800a290:	781b      	ldrb	r3, [r3, #0]
 800a292:	b29b      	uxth	r3, r3
 800a294:	4313      	orrs	r3, r2
 800a296:	b29a      	uxth	r2, r3
 800a298:	4b0c      	ldr	r3, [pc, #48]	; (800a2cc <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a29a:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = Bms_maxTemp / 10;
 800a29c:	4b0b      	ldr	r3, [pc, #44]	; (800a2cc <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a29e:	881b      	ldrh	r3, [r3, #0]
 800a2a0:	b21b      	sxth	r3, r3
 800a2a2:	4a09      	ldr	r2, [pc, #36]	; (800a2c8 <process_Rx_CAN_0X180CA7F3+0x9c>)
 800a2a4:	fb82 1203 	smull	r1, r2, r2, r3
 800a2a8:	1092      	asrs	r2, r2, #2
 800a2aa:	17db      	asrs	r3, r3, #31
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	b29a      	uxth	r2, r3
 800a2b0:	4b06      	ldr	r3, [pc, #24]	; (800a2cc <process_Rx_CAN_0X180CA7F3+0xa0>)
 800a2b2:	801a      	strh	r2, [r3, #0]

}
 800a2b4:	3710      	adds	r7, #16
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	bd80      	pop	{r7, pc}
 800a2ba:	bf00      	nop
 800a2bc:	08013e54 	.word	0x08013e54
 800a2c0:	1ffe92cc 	.word	0x1ffe92cc
 800a2c4:	1fff4884 	.word	0x1fff4884
 800a2c8:	66666667 	.word	0x66666667
 800a2cc:	1fff4838 	.word	0x1fff4838

0800a2d0 <Read_can_bms_29bit>:

void Read_can_bms_29bit(void)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	af00      	add	r7, sp, #0
	CAN_Rx_0x1810A7F3();
 800a2d4:	f7ff fc3a 	bl	8009b4c <CAN_Rx_0x1810A7F3>
	CAN_Rx_0x180EA7F3();
 800a2d8:	f7ff fbbc 	bl	8009a54 <CAN_Rx_0x180EA7F3>
	CAN_Rx_0x180FA7F3();
 800a2dc:	f7ff fbf8 	bl	8009ad0 <CAN_Rx_0x180FA7F3>
	CAN_Rx_0x1814A7F3();
 800a2e0:	f7ff fc72 	bl	8009bc8 <CAN_Rx_0x1814A7F3>
	CAN_Rx_0x1815A7F3();
 800a2e4:	f7ff fcae 	bl	8009c44 <CAN_Rx_0x1815A7F3>
	CAN_Rx_0x180CA7F3();
 800a2e8:	f7ff fcea 	bl	8009cc0 <CAN_Rx_0x180CA7F3>
	CAN_Rx_0x1808A7F3();
 800a2ec:	f7ff faf8 	bl	80098e0 <CAN_Rx_0x1808A7F3>
    CAN_Rx_0x180AA7F3();
 800a2f0:	f7ff fb34 	bl	800995c <CAN_Rx_0x180AA7F3>
    CAN_Rx_0x180BA7F3();
 800a2f4:	f7ff fb70 	bl	80099d8 <CAN_Rx_0x180BA7F3>
}
 800a2f8:	bd80      	pop	{r7, pc}
 800a2fa:	bf00      	nop

0800a2fc <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
 800a304:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	61da      	str	r2, [r3, #28]
}
 800a30e:	370c      	adds	r7, #12
 800a310:	46bd      	mov	sp, r7
 800a312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a316:	4770      	bx	lr

0800a318 <Update_CAN_0x18FF0921>:
	{0x18FF2121, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{0x18FED911, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
};

void Update_CAN_0x18FF0921(void)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b084      	sub	sp, #16
 800a31c:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a31e:	4b07      	ldr	r3, [pc, #28]	; (800a33c <Update_CAN_0x18FF0921+0x24>)
 800a320:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF0921].CAN_Data[ZERO_BYTE];
 800a322:	4b07      	ldr	r3, [pc, #28]	; (800a340 <Update_CAN_0x18FF0921+0x28>)
 800a324:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF0921], tempData);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	4618      	mov	r0, r3
 800a32c:	68b9      	ldr	r1, [r7, #8]
 800a32e:	f7fe fdfb 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a332:	4603      	mov	r3, r0
 800a334:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a336:	3710      	adds	r7, #16
 800a338:	46bd      	mov	sp, r7
 800a33a:	bd80      	pop	{r7, pc}
 800a33c:	08013e54 	.word	0x08013e54
 800a340:	1ffe92fc 	.word	0x1ffe92fc

0800a344 <Update_CAN_0x0CF00400>:

void Update_CAN_0x0CF00400(void)
{
 800a344:	b580      	push	{r7, lr}
 800a346:	b084      	sub	sp, #16
 800a348:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a34a:	4b07      	ldr	r3, [pc, #28]	; (800a368 <Update_CAN_0x0CF00400+0x24>)
 800a34c:	60fb      	str	r3, [r7, #12]
	//to update battery temperature
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer;
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer >> 8;


	tempData = &CAN_MSG_DB[CAN_0CF00400].CAN_Data[ZERO_BYTE];
 800a34e:	4b07      	ldr	r3, [pc, #28]	; (800a36c <Update_CAN_0x0CF00400+0x28>)
 800a350:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF00400], tempData);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	691b      	ldr	r3, [r3, #16]
 800a356:	4618      	mov	r0, r3
 800a358:	68b9      	ldr	r1, [r7, #8]
 800a35a:	f7fe fde5 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}
 800a368:	08013e54 	.word	0x08013e54
 800a36c:	1ffe9308 	.word	0x1ffe9308

0800a370 <Update_CAN_0x18FFC621>:

void Update_CAN_0x18FFC621(void)
{
 800a370:	b580      	push	{r7, lr}
 800a372:	b084      	sub	sp, #16
 800a374:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <Update_CAN_0x18FFC621+0x24>)
 800a378:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FFC621].CAN_Data[ZERO_BYTE];
 800a37a:	4b07      	ldr	r3, [pc, #28]	; (800a398 <Update_CAN_0x18FFC621+0x28>)
 800a37c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFC621], tempData);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	4618      	mov	r0, r3
 800a384:	68b9      	ldr	r1, [r7, #8]
 800a386:	f7fe fdcf 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a38a:	4603      	mov	r3, r0
 800a38c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a38e:	3710      	adds	r7, #16
 800a390:	46bd      	mov	sp, r7
 800a392:	bd80      	pop	{r7, pc}
 800a394:	08013e54 	.word	0x08013e54
 800a398:	1ffe9314 	.word	0x1ffe9314

0800a39c <Update_CAN_0x18FFB632>:

void Update_CAN_0x18FFB632(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b086      	sub	sp, #24
 800a3a0:	af02      	add	r7, sp, #8
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a3a2:	4b17      	ldr	r3, [pc, #92]	; (800a400 <Update_CAN_0x18FFB632+0x64>)
 800a3a4:	60fb      	str	r3, [r7, #12]
	//to update SOC percentage byte         (0 to 100) to (10 to 100)
		//BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE], 10, 100, 0, 100);

	//to update SOC percentage byte         (0 to 100) to (10 to 100)
//	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = Bms_SOC;
	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(Bms_SOC, 10, 100, 0, 100);
 800a3a6:	4b17      	ldr	r3, [pc, #92]	; (800a404 <Update_CAN_0x18FFB632+0x68>)
 800a3a8:	881b      	ldrh	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	2364      	movs	r3, #100	; 0x64
 800a3ae:	9300      	str	r3, [sp, #0]
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	210a      	movs	r1, #10
 800a3b4:	2264      	movs	r2, #100	; 0x64
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	f000 f988 	bl	800a6cc <map>
 800a3bc:	4603      	mov	r3, r0
 800a3be:	b2da      	uxtb	r2, r3
 800a3c0:	4b11      	ldr	r3, [pc, #68]	; (800a408 <Update_CAN_0x18FFB632+0x6c>)
 800a3c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800a3c6:	4b10      	ldr	r3, [pc, #64]	; (800a408 <Update_CAN_0x18FFB632+0x6c>)
 800a3c8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	; (800a40c <Update_CAN_0x18FFB632+0x70>)
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	4b0e      	ldr	r3, [pc, #56]	; (800a40c <Update_CAN_0x18FFB632+0x70>)
 800a3d2:	781a      	ldrb	r2, [r3, #0]
 800a3d4:	4b0e      	ldr	r3, [pc, #56]	; (800a410 <Update_CAN_0x18FFB632+0x74>)
 800a3d6:	701a      	strb	r2, [r3, #0]

	//to update battery temperature
	CAN_MSG_DB[CAN_18FFB632].CAN_Data[SECOND_BYTE] = Bms_maxTemp;
 800a3d8:	4b0e      	ldr	r3, [pc, #56]	; (800a414 <Update_CAN_0x18FFB632+0x78>)
 800a3da:	881b      	ldrh	r3, [r3, #0]
 800a3dc:	b2da      	uxtb	r2, r3
 800a3de:	4b0a      	ldr	r3, [pc, #40]	; (800a408 <Update_CAN_0x18FFB632+0x6c>)
 800a3e0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//to update drive mode information
	//CAN_MSG_DB[CAN_18FFB632].CAN_Data[FOURTH_BYTE] = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];


	tempData = &CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE];
 800a3e4:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <Update_CAN_0x18FFB632+0x7c>)
 800a3e6:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFB632], tempData);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	699b      	ldr	r3, [r3, #24]
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	68b9      	ldr	r1, [r7, #8]
 800a3f0:	f7fe fd9a 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a3f8:	3710      	adds	r7, #16
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	bd80      	pop	{r7, pc}
 800a3fe:	bf00      	nop
 800a400:	08013e54 	.word	0x08013e54
 800a404:	1fff4904 	.word	0x1fff4904
 800a408:	1ffe92f8 	.word	0x1ffe92f8
 800a40c:	1fff483c 	.word	0x1fff483c
 800a410:	1fff4840 	.word	0x1fff4840
 800a414:	1fff4838 	.word	0x1fff4838
 800a418:	1ffe9320 	.word	0x1ffe9320

0800a41c <Update_CAN_0x0CF10121>:

void Update_CAN_0x0CF10121(void)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b084      	sub	sp, #16
 800a420:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a422:	4b0f      	ldr	r3, [pc, #60]	; (800a460 <Update_CAN_0x0CF10121+0x44>)
 800a424:	60fb      	str	r3, [r7, #12]

	// TO get the SOC percentage
	//Soc_perc = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];
	//calculate DTE
	//Dte = Soc_perc * 2U;
 	Dte = Bms_SOC * 2;
 800a426:	4b0f      	ldr	r3, [pc, #60]	; (800a464 <Update_CAN_0x0CF10121+0x48>)
 800a428:	881b      	ldrh	r3, [r3, #0]
 800a42a:	005b      	lsls	r3, r3, #1
 800a42c:	817b      	strh	r3, [r7, #10]
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FOURTH_BYTE] = Dte;
 800a42e:	897b      	ldrh	r3, [r7, #10]
 800a430:	b2da      	uxtb	r2, r3
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <Update_CAN_0x0CF10121+0x4c>)
 800a434:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FIFTH_BYTE] = (Dte >> 8);
 800a438:	897b      	ldrh	r3, [r7, #10]
 800a43a:	0a1b      	lsrs	r3, r3, #8
 800a43c:	b29b      	uxth	r3, r3
 800a43e:	b2da      	uxtb	r2, r3
 800a440:	4b09      	ldr	r3, [pc, #36]	; (800a468 <Update_CAN_0x0CF10121+0x4c>)
 800a442:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	tempData = &CAN_MSG_DB[CAN_0CF10121].CAN_Data[ZERO_BYTE];
 800a446:	4b09      	ldr	r3, [pc, #36]	; (800a46c <Update_CAN_0x0CF10121+0x50>)
 800a448:	607b      	str	r3, [r7, #4]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF10121], tempData);
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	69db      	ldr	r3, [r3, #28]
 800a44e:	4618      	mov	r0, r3
 800a450:	6879      	ldr	r1, [r7, #4]
 800a452:	f7fe fd69 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a456:	4603      	mov	r3, r0
 800a458:	70fb      	strb	r3, [r7, #3]
	}
	else
	{
		// message object failed to update.
	}
}
 800a45a:	3710      	adds	r7, #16
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}
 800a460:	08013e54 	.word	0x08013e54
 800a464:	1fff4904 	.word	0x1fff4904
 800a468:	1ffe92f8 	.word	0x1ffe92f8
 800a46c:	1ffe932c 	.word	0x1ffe932c

0800a470 <Update_CAN_0x18FEEE00>:

void Update_CAN_0x18FEEE00(void)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a476:	4b07      	ldr	r3, [pc, #28]	; (800a494 <Update_CAN_0x18FEEE00+0x24>)
 800a478:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FEEE00].CAN_Data[ZERO_BYTE];
 800a47a:	4b07      	ldr	r3, [pc, #28]	; (800a498 <Update_CAN_0x18FEEE00+0x28>)
 800a47c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FEEE00], tempData);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	6a1b      	ldr	r3, [r3, #32]
 800a482:	4618      	mov	r0, r3
 800a484:	68b9      	ldr	r1, [r7, #8]
 800a486:	f7fe fd4f 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a48a:	4603      	mov	r3, r0
 800a48c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	08013e54 	.word	0x08013e54
 800a498:	1ffe9338 	.word	0x1ffe9338

0800a49c <Update_CAN_0x18FF2021>:

void Update_CAN_0x18FF2021(void)
{
 800a49c:	b580      	push	{r7, lr}
 800a49e:	b084      	sub	sp, #16
 800a4a0:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a4a2:	4b07      	ldr	r3, [pc, #28]	; (800a4c0 <Update_CAN_0x18FF2021+0x24>)
 800a4a4:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2021].CAN_Data[ZERO_BYTE];
 800a4a6:	4b07      	ldr	r3, [pc, #28]	; (800a4c4 <Update_CAN_0x18FF2021+0x28>)
 800a4a8:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF2021], tempData);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	68b9      	ldr	r1, [r7, #8]
 800a4b2:	f7fe fd39 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a4b6:	4603      	mov	r3, r0
 800a4b8:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}
 800a4c0:	08013e54 	.word	0x08013e54
 800a4c4:	1ffe9344 	.word	0x1ffe9344

0800a4c8 <Update_CAN_0x18FF2121>:

void Update_CAN_0x18FF2121(void)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b084      	sub	sp, #16
 800a4cc:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a4ce:	4b0c      	ldr	r3, [pc, #48]	; (800a500 <Update_CAN_0x18FF2121+0x38>)
 800a4d0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[ZERO_BYTE];
 800a4d2:	4b0c      	ldr	r3, [pc, #48]	; (800a504 <Update_CAN_0x18FF2121+0x3c>)
 800a4d4:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[29],tempData);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4dc:	4618      	mov	r0, r3
 800a4de:	68b9      	ldr	r1, [r7, #8]
 800a4e0:	f7fe fd22 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a4e8:	79fb      	ldrb	r3, [r7, #7]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d105      	bne.n	800a4fa <Update_CAN_0x18FF2121+0x32>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[29]);
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fcf3 	bl	8008ee0 <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a4fa:	3710      	adds	r7, #16
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	08013e54 	.word	0x08013e54
 800a504:	1ffe9350 	.word	0x1ffe9350

0800a508 <Update_CAN_0x18FED911>:

void Update_CAN_0x18FED911(void)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b084      	sub	sp, #16
 800a50c:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a50e:	4b0b      	ldr	r3, [pc, #44]	; (800a53c <Update_CAN_0x18FED911+0x34>)
 800a510:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FED911].CAN_Data[ZERO_BYTE];
 800a512:	4b0b      	ldr	r3, [pc, #44]	; (800a540 <Update_CAN_0x18FED911+0x38>)
 800a514:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[15],tempData);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a51a:	4618      	mov	r0, r3
 800a51c:	68b9      	ldr	r1, [r7, #8]
 800a51e:	f7fe fd03 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a522:	4603      	mov	r3, r0
 800a524:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a526:	79fb      	ldrb	r3, [r7, #7]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d104      	bne.n	800a536 <Update_CAN_0x18FED911+0x2e>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[15]);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a530:	4618      	mov	r0, r3
 800a532:	f7fe fcd5 	bl	8008ee0 <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a536:	3710      	adds	r7, #16
 800a538:	46bd      	mov	sp, r7
 800a53a:	bd80      	pop	{r7, pc}
 800a53c:	08013e54 	.word	0x08013e54
 800a540:	1ffe935c 	.word	0x1ffe935c

0800a544 <CAN_OUTPUT_CLUSTER>:


void CAN_OUTPUT_CLUSTER()
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a54a:	4b25      	ldr	r3, [pc, #148]	; (800a5e0 <CAN_OUTPUT_CLUSTER+0x9c>)
 800a54c:	60bb      	str	r3, [r7, #8]
	CAN_NODE_STATUS_t mo_tranmit_status;
	CAN_NODE_STATUS_t status;
	uint16_t msg_count;

	/* update all message's data */
	Update_CAN_0x18FF0921();
 800a54e:	f7ff fee3 	bl	800a318 <Update_CAN_0x18FF0921>
	Update_CAN_0x0CF00400();
 800a552:	f7ff fef7 	bl	800a344 <Update_CAN_0x0CF00400>
	Update_CAN_0x18FFC621();
 800a556:	f7ff ff0b 	bl	800a370 <Update_CAN_0x18FFC621>
	Update_CAN_0x18FFB632();
 800a55a:	f7ff ff1f 	bl	800a39c <Update_CAN_0x18FFB632>
	Update_CAN_0x0CF10121();
 800a55e:	f7ff ff5d 	bl	800a41c <Update_CAN_0x0CF10121>
	Update_CAN_0x18FEEE00();
 800a562:	f7ff ff85 	bl	800a470 <Update_CAN_0x18FEEE00>
	Update_CAN_0x18FF2021();
 800a566:	f7ff ff99 	bl	800a49c <Update_CAN_0x18FF2021>

/* will update separately */
	Update_CAN_0x18FF2121();
 800a56a:	f7ff ffad 	bl	800a4c8 <Update_CAN_0x18FF2121>
	Update_CAN_0x18FED911();
 800a56e:	f7ff ffcb 	bl	800a508 <Update_CAN_0x18FED911>
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a572:	2300      	movs	r3, #0
 800a574:	81fb      	strh	r3, [r7, #14]
 800a576:	e02c      	b.n	800a5d2 <CAN_OUTPUT_CLUSTER+0x8e>
	{
		MO_Ptr = HandlePtr1->lmobj_ptr[msg_count]->mo_ptr;
 800a578:	89fb      	ldrh	r3, [r7, #14]
 800a57a:	68ba      	ldr	r2, [r7, #8]
 800a57c:	3302      	adds	r3, #2
 800a57e:	009b      	lsls	r3, r3, #2
 800a580:	4413      	add	r3, r2
 800a582:	685b      	ldr	r3, [r3, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	607b      	str	r3, [r7, #4]

		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[msg_count]);
 800a588:	89fb      	ldrh	r3, [r7, #14]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	3302      	adds	r3, #2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4413      	add	r3, r2
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	4618      	mov	r0, r3
 800a596:	f7fe fca3 	bl	8008ee0 <CAN_NODE_MO_Transmit>
 800a59a:	4603      	mov	r3, r0
 800a59c:	70fb      	strb	r3, [r7, #3]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800a59e:	78fb      	ldrb	r3, [r7, #3]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d113      	bne.n	800a5cc <CAN_OUTPUT_CLUSTER+0x88>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[msg_count]);	//msg_count, earlier it was 0 and working
 800a5a4:	89fb      	ldrh	r3, [r7, #14]
 800a5a6:	68ba      	ldr	r2, [r7, #8]
 800a5a8:	3302      	adds	r3, #2
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4413      	add	r3, r2
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	4618      	mov	r0, r3
 800a5b2:	f7fe fcd9 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	70bb      	strb	r3, [r7, #2]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800a5ba:	78bb      	ldrb	r3, [r7, #2]
 800a5bc:	f003 0302 	and.w	r3, r3, #2
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <CAN_OUTPUT_CLUSTER+0x88>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	2102      	movs	r1, #2
 800a5c8:	f7ff fe98 	bl	800a2fc <XMC_CAN_MO_ResetStatus>
	Update_CAN_0x18FF2121();
	Update_CAN_0x18FED911();
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a5cc:	89fb      	ldrh	r3, [r7, #14]
 800a5ce:	3301      	adds	r3, #1
 800a5d0:	81fb      	strh	r3, [r7, #14]
 800a5d2:	89fb      	ldrh	r3, [r7, #14]
 800a5d4:	2b06      	cmp	r3, #6
 800a5d6:	d9cf      	bls.n	800a578 <CAN_OUTPUT_CLUSTER+0x34>
		else
		{
			// message object failed to transmit.
		}
	}
}
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	08013e54 	.word	0x08013e54

0800a5e4 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b083      	sub	sp, #12
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	6078      	str	r0, [r7, #4]
 800a5ec:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	683a      	ldr	r2, [r7, #0]
 800a5f4:	61da      	str	r2, [r3, #28]
}
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <Read_CAN_0x1E5>:

};


void Read_CAN_0x1E5(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a606:	4b1c      	ldr	r3, [pc, #112]	; (800a678 <Read_CAN_0x1E5+0x78>)
 800a608:	60fb      	str	r3, [r7, #12]

	mo_index = 15;//CAN_RX_MO_HVAC_BASE + CAN_0x248;
 800a60a:	230f      	movs	r3, #15
 800a60c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a60e:	7afb      	ldrb	r3, [r7, #11]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	3302      	adds	r3, #2
 800a614:	009b      	lsls	r3, r3, #2
 800a616:	4413      	add	r3, r2
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a61e:	7afb      	ldrb	r3, [r7, #11]
 800a620:	68fa      	ldr	r2, [r7, #12]
 800a622:	3302      	adds	r3, #2
 800a624:	009b      	lsls	r3, r3, #2
 800a626:	4413      	add	r3, r2
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fc9c 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800a630:	4603      	mov	r3, r0
 800a632:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a634:	78fb      	ldrb	r3, [r7, #3]
 800a636:	f003 0301 	and.w	r3, r3, #1
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d016      	beq.n	800a66c <Read_CAN_0x1E5+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	2101      	movs	r1, #1
 800a642:	f7ff ffcf 	bl	800a5e4 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a646:	7afb      	ldrb	r3, [r7, #11]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	3302      	adds	r3, #2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	4618      	mov	r0, r3
 800a654:	f7fe fc56 	bl	8008f04 <CAN_NODE_MO_Receive>
 800a658:	4603      	mov	r3, r0
 800a65a:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a65c:	78bb      	ldrb	r3, [r7, #2]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <Read_CAN_0x1E5+0x68>
		{
			// message object receive success.
			test = 1;
 800a662:	2301      	movs	r3, #1
 800a664:	707b      	strb	r3, [r7, #1]
 800a666:	e001      	b.n	800a66c <Read_CAN_0x1E5+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a668:	2300      	movs	r3, #0
 800a66a:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x1E5();
 800a66c:	f000 f8b6 	bl	800a7dc <Process_Read_CAN_0x1E5>
}
 800a670:	3710      	adds	r7, #16
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	08014048 	.word	0x08014048

0800a67c <update_id0x4c5>:


void update_id0x4c5()
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a682:	4b0f      	ldr	r3, [pc, #60]	; (800a6c0 <update_id0x4c5+0x44>)
 800a684:	60fb      	str	r3, [r7, #12]
	   // uint8_t can_data_arr[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
	    uint8_t *array_data;

	    eps_n[can_0x4c5].can_matrix[0] = 0x01;
 800a686:	4b0f      	ldr	r3, [pc, #60]	; (800a6c4 <update_id0x4c5+0x48>)
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	    eps_n[can_0x4c5].can_matrix[1] = 0x28;
 800a68e:	4b0d      	ldr	r3, [pc, #52]	; (800a6c4 <update_id0x4c5+0x48>)
 800a690:	2228      	movs	r2, #40	; 0x28
 800a692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	    array_data = &eps_n[can_0x4c5].can_matrix[0];
 800a696:	4b0c      	ldr	r3, [pc, #48]	; (800a6c8 <update_id0x4c5+0x4c>)
 800a698:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[10],array_data);
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a69e:	4618      	mov	r0, r3
 800a6a0:	68b9      	ldr	r1, [r7, #8]
 800a6a2:	f7fe fc41 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	71fb      	strb	r3, [r7, #7]

	       if (status == CAN_NODE_STATUS_SUCCESS)
 800a6aa:	79fb      	ldrb	r3, [r7, #7]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d104      	bne.n	800a6ba <update_id0x4c5+0x3e>
	       {
	         // message object data updated.

	         // transmit the data
	         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[10]);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7fe fc13 	bl	8008ee0 <CAN_NODE_MO_Transmit>
	       }
	       else
	       {
	         // message object failed to update.
	       }
}
 800a6ba:	3710      	adds	r7, #16
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	08014048 	.word	0x08014048
 800a6c4:	1ffe9364 	.word	0x1ffe9364
 800a6c8:	1ffe93a4 	.word	0x1ffe93a4

0800a6cc <map>:
	       }
}


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b087      	sub	sp, #28
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	607a      	str	r2, [r7, #4]
 800a6d8:	603b      	str	r3, [r7, #0]
	long ans;

  ans = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a6da:	68fa      	ldr	r2, [r7, #12]
 800a6dc:	68bb      	ldr	r3, [r7, #8]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	6a39      	ldr	r1, [r7, #32]
 800a6e2:	683a      	ldr	r2, [r7, #0]
 800a6e4:	1a8a      	subs	r2, r1, r2
 800a6e6:	fb02 f203 	mul.w	r2, r2, r3
 800a6ea:	6879      	ldr	r1, [r7, #4]
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	fb92 f2f3 	sdiv	r2, r2, r3
 800a6f4:	683b      	ldr	r3, [r7, #0]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	617b      	str	r3, [r7, #20]

  if(ans > out_max)
 800a6fa:	697a      	ldr	r2, [r7, #20]
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	dd02      	ble.n	800a708 <map+0x3c>
	  ans = out_max;
 800a702:	6a3b      	ldr	r3, [r7, #32]
 800a704:	617b      	str	r3, [r7, #20]
 800a706:	e005      	b.n	800a714 <map+0x48>

  else if(ans < out_min)
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	da01      	bge.n	800a714 <map+0x48>
	  ans = out_min;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	617b      	str	r3, [r7, #20]

  return ans;
 800a714:	697b      	ldr	r3, [r7, #20]
}
 800a716:	4618      	mov	r0, r3
 800a718:	371c      	adds	r7, #28
 800a71a:	46bd      	mov	sp, r7
 800a71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a720:	4770      	bx	lr
 800a722:	bf00      	nop

0800a724 <update_id0x36a>:
  return ans;
}


void update_id0x36a()
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b086      	sub	sp, #24
 800a728:	af02      	add	r7, sp, #8
	CAN_NODE_STATUS_t status;
		    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a72a:	4b27      	ldr	r3, [pc, #156]	; (800a7c8 <update_id0x36a+0xa4>)
 800a72c:	60fb      	str	r3, [r7, #12]




		   // current_rpm = 10000;
		    current_rpm = current_rpm * 1 - 16384U;
 800a72e:	4b27      	ldr	r3, [pc, #156]	; (800a7cc <update_id0x36a+0xa8>)
 800a730:	881b      	ldrh	r3, [r3, #0]
 800a732:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a736:	b29a      	uxth	r2, r3
 800a738:	4b24      	ldr	r3, [pc, #144]	; (800a7cc <update_id0x36a+0xa8>)
 800a73a:	801a      	strh	r2, [r3, #0]

		    vspeed = vspeed * 0.015625;*/

		   // map(x, 0, 100, 0, 0x19);

		    eps_n[can_0x36a].can_matrix[1] = 0x5f;
 800a73c:	4b24      	ldr	r3, [pc, #144]	; (800a7d0 <update_id0x36a+0xac>)
 800a73e:	225f      	movs	r2, #95	; 0x5f
 800a740:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


		   /* eps_n[can_0x36a].can_matrix[2] =(0x00 | ((vspeed & 0x00ff) >> 1));
		    eps_n[can_0x36a].can_matrix[3] =(vspeed >> 8);*/
		    eps_n[can_0x36a].can_matrix[2] = map(vspeed, 0, 80, 0, 0x19);
 800a744:	4b23      	ldr	r3, [pc, #140]	; (800a7d4 <update_id0x36a+0xb0>)
 800a746:	881b      	ldrh	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	2319      	movs	r3, #25
 800a74c:	9300      	str	r3, [sp, #0]
 800a74e:	4610      	mov	r0, r2
 800a750:	2100      	movs	r1, #0
 800a752:	2250      	movs	r2, #80	; 0x50
 800a754:	2300      	movs	r3, #0
 800a756:	f7ff ffb9 	bl	800a6cc <map>
 800a75a:	4603      	mov	r3, r0
 800a75c:	b2da      	uxtb	r2, r3
 800a75e:	4b1c      	ldr	r3, [pc, #112]	; (800a7d0 <update_id0x36a+0xac>)
 800a760:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		    eps_n[can_0x36a].can_matrix[3] = 0x00;//(vspeed >> 8);
 800a764:	4b1a      	ldr	r3, [pc, #104]	; (800a7d0 <update_id0x36a+0xac>)
 800a766:	2200      	movs	r2, #0
 800a768:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f


		    eps_n[can_0x36a].can_matrix[4] = (0x00 | ((current_rpm & 0x00ff) >> 1));
 800a76c:	4b17      	ldr	r3, [pc, #92]	; (800a7cc <update_id0x36a+0xa8>)
 800a76e:	881b      	ldrh	r3, [r3, #0]
 800a770:	b2db      	uxtb	r3, r3
 800a772:	105b      	asrs	r3, r3, #1
 800a774:	b2da      	uxtb	r2, r3
 800a776:	4b16      	ldr	r3, [pc, #88]	; (800a7d0 <update_id0x36a+0xac>)
 800a778:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			eps_n[can_0x36a].can_matrix[5] = (current_rpm >> 8);
 800a77c:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <update_id0x36a+0xa8>)
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	0a1b      	lsrs	r3, r3, #8
 800a782:	b29b      	uxth	r3, r3
 800a784:	b2da      	uxtb	r2, r3
 800a786:	4b12      	ldr	r3, [pc, #72]	; (800a7d0 <update_id0x36a+0xac>)
 800a788:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51



			eps_n[can_0x36a].can_matrix[6] = 0x40;
 800a78c:	4b10      	ldr	r3, [pc, #64]	; (800a7d0 <update_id0x36a+0xac>)
 800a78e:	2240      	movs	r2, #64	; 0x40
 800a790:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			eps_n[can_0x36a].can_matrix[7] = 0x80;
 800a794:	4b0e      	ldr	r3, [pc, #56]	; (800a7d0 <update_id0x36a+0xac>)
 800a796:	2280      	movs	r2, #128	; 0x80
 800a798:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		    array_data = &eps_n[can_0x36a].can_matrix[0];
 800a79c:	4b0e      	ldr	r3, [pc, #56]	; (800a7d8 <update_id0x36a+0xb4>)
 800a79e:	60bb      	str	r3, [r7, #8]

		 //  update data for the MO to transmit
		       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[11],array_data);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	68b9      	ldr	r1, [r7, #8]
 800a7a8:	f7fe fbbe 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	71fb      	strb	r3, [r7, #7]

		       if (status == CAN_NODE_STATUS_SUCCESS)
 800a7b0:	79fb      	ldrb	r3, [r7, #7]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d104      	bne.n	800a7c0 <update_id0x36a+0x9c>
		       {
		         // message object data updated.

		         // transmit the data
		         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[11]);
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	f7fe fb90 	bl	8008ee0 <CAN_NODE_MO_Transmit>
		       }
		       else
		       {
		         // message object failed to update.
		       }
}
 800a7c0:	3710      	adds	r7, #16
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08014048 	.word	0x08014048
 800a7cc:	1fff528e 	.word	0x1fff528e
 800a7d0:	1ffe9364 	.word	0x1ffe9364
 800a7d4:	1fff528c 	.word	0x1fff528c
 800a7d8:	1ffe93b0 	.word	0x1ffe93b0

0800a7dc <Process_Read_CAN_0x1E5>:

void Process_Read_CAN_0x1E5(void)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b084      	sub	sp, #16
 800a7e0:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a7e2:	4b09      	ldr	r3, [pc, #36]	; (800a808 <Process_Read_CAN_0x1E5+0x2c>)
 800a7e4:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a7e6:	2318      	movs	r3, #24
 800a7e8:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[can_0x1E5].CAN_Data[0];
 800a7ea:	4b08      	ldr	r3, [pc, #32]	; (800a80c <Process_Read_CAN_0x1E5+0x30>)
 800a7ec:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a7ee:	7afb      	ldrb	r3, [r7, #11]
 800a7f0:	68fa      	ldr	r2, [r7, #12]
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	4413      	add	r3, r2
 800a7f8:	685b      	ldr	r3, [r3, #4]
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	6879      	ldr	r1, [r7, #4]
 800a7fe:	f000 fa43 	bl	800ac88 <CAN_NODE_MO_ReadData>
}
 800a802:	3710      	adds	r7, #16
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}
 800a808:	08014048 	.word	0x08014048
 800a80c:	1ffe9278 	.word	0x1ffe9278

0800a810 <CAN_OUTPUT_EPS>:

void CAN_OUTPUT_EPS(void)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	af00      	add	r7, sp, #0
	update_id0x4c5();
 800a814:	f7ff ff32 	bl	800a67c <update_id0x4c5>
	//update_id0x17d();
	update_id0x36a();
 800a818:	f7ff ff84 	bl	800a724 <update_id0x36a>
}
 800a81c:	bd80      	pop	{r7, pc}
 800a81e:	bf00      	nop

0800a820 <CAN_Read_EPS>:

void CAN_Read_EPS(void)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	af00      	add	r7, sp, #0
	Read_CAN_0x1E5();
 800a824:	f7ff feec 	bl	800a600 <Read_CAN_0x1E5>
}
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop

0800a82c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a82c:	b480      	push	{r7}
 800a82e:	b083      	sub	sp, #12
 800a830:	af00      	add	r7, sp, #0
 800a832:	6078      	str	r0, [r7, #4]
 800a834:	460b      	mov	r3, r1
 800a836:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800a838:	78fb      	ldrb	r3, [r7, #3]
 800a83a:	2201      	movs	r2, #1
 800a83c:	409a      	lsls	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	605a      	str	r2, [r3, #4]
}
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	460b      	mov	r3, r1
 800a856:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800a858:	78fb      	ldrb	r3, [r7, #3]
 800a85a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a85e:	409a      	lsls	r2, r3
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	605a      	str	r2, [r3, #4]
}
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop

0800a870 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b082      	sub	sp, #8
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681a      	ldr	r2, [r3, #0]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	7c1b      	ldrb	r3, [r3, #16]
 800a880:	4610      	mov	r0, r2
 800a882:	4619      	mov	r1, r3
 800a884:	f7ff ffd2 	bl	800a82c <XMC_GPIO_SetOutputHigh>
}
 800a888:	3708      	adds	r7, #8
 800a88a:	46bd      	mov	sp, r7
 800a88c:	bd80      	pop	{r7, pc}
 800a88e:	bf00      	nop

0800a890 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800a890:	b580      	push	{r7, lr}
 800a892:	b082      	sub	sp, #8
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	7c1b      	ldrb	r3, [r3, #16]
 800a8a0:	4610      	mov	r0, r2
 800a8a2:	4619      	mov	r1, r3
 800a8a4:	f7ff ffd2 	bl	800a84c <XMC_GPIO_SetOutputLow>
}
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}
 800a8ae:	bf00      	nop

0800a8b0 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	683a      	ldr	r2, [r7, #0]
 800a8c0:	61da      	str	r2, [r3, #28]
}
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	0000      	movs	r0, r0
	...

0800a8d0 <Process_Read_CAN_0x8000100>:
	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
}

void Process_Read_CAN_0x8000100(void)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b086      	sub	sp, #24
 800a8d4:	af00      	add	r7, sp, #0
	float pressure_in, voltage_psi;
	uint8_t TempDegreeC;
	uint8_t AC_ON=1;
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	75fb      	strb	r3, [r7, #23]
	static uint8_t condenser_on = 0x00;

	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a8da:	4b61      	ldr	r3, [pc, #388]	; (800aa60 <Process_Read_CAN_0x8000100+0x190>)
 800a8dc:	613b      	str	r3, [r7, #16]

	mo_index = 22;
 800a8de:	2316      	movs	r3, #22
 800a8e0:	73fb      	strb	r3, [r7, #15]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[ZERO_BYTE];
 800a8e2:	4b60      	ldr	r3, [pc, #384]	; (800aa64 <Process_Read_CAN_0x8000100+0x194>)
 800a8e4:	60bb      	str	r3, [r7, #8]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a8e6:	7bfb      	ldrb	r3, [r7, #15]
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	3302      	adds	r3, #2
 800a8ec:	009b      	lsls	r3, r3, #2
 800a8ee:	4413      	add	r3, r2
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	68b9      	ldr	r1, [r7, #8]
 800a8f6:	f000 f9c7 	bl	800ac88 <CAN_NODE_MO_ReadData>

	//get the temperature
	TempDegreeC = CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[0];
 800a8fa:	4b5b      	ldr	r3, [pc, #364]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a8fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a900:	71fb      	strb	r3, [r7, #7]

	//get the pressure
//	pressure_in = ((CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[1] >> 8) || (CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[2] << 8));
	pressure_in = (float)((CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[2] << 8) || (CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[1]));
 800a902:	4b59      	ldr	r3, [pc, #356]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a904:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a908:	021b      	lsls	r3, r3, #8
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d104      	bne.n	800a918 <Process_Read_CAN_0x8000100+0x48>
 800a90e:	4b56      	ldr	r3, [pc, #344]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a910:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a914:	2b00      	cmp	r3, #0
 800a916:	d001      	beq.n	800a91c <Process_Read_CAN_0x8000100+0x4c>
 800a918:	2301      	movs	r3, #1
 800a91a:	e000      	b.n	800a91e <Process_Read_CAN_0x8000100+0x4e>
 800a91c:	2300      	movs	r3, #0
 800a91e:	ee07 3a90 	vmov	s15, r3
 800a922:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a926:	edc7 7a00 	vstr	s15, [r7]

	//get the AC switch input
	AC_ON = CAN_MSG_DB_HVAC[CAN_0x8000100].CAN_Data[3];
 800a92a:	4b4f      	ldr	r3, [pc, #316]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a92c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a930:	75fb      	strb	r3, [r7, #23]
	AC_ON_4g = AC_ON;
 800a932:	7dfb      	ldrb	r3, [r7, #23]
 800a934:	2b00      	cmp	r3, #0
 800a936:	bf14      	ite	ne
 800a938:	2301      	movne	r3, #1
 800a93a:	2300      	moveq	r3, #0
 800a93c:	b2da      	uxtb	r2, r3
 800a93e:	4b4b      	ldr	r3, [pc, #300]	; (800aa6c <Process_Read_CAN_0x8000100+0x19c>)
 800a940:	701a      	strb	r2, [r3, #0]

	//AC is ON when AC_ON == 0
	//now ac is on when == 1
	//AC_ON = 1;
	if(0x01 == AC_ON)
 800a942:	7dfb      	ldrb	r3, [r7, #23]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d147      	bne.n	800a9d8 <Process_Read_CAN_0x8000100+0x108>
	{
		//convert the temperature to rpm
		if(TempDegreeC <= 28)
 800a948:	79fb      	ldrb	r3, [r7, #7]
 800a94a:	2b1c      	cmp	r3, #28
 800a94c:	d813      	bhi.n	800a976 <Process_Read_CAN_0x8000100+0xa6>
		{
			//sanden
//			rpm = (uint16_t)(((-200) * (int32_t)TempDegreeC) + 9100);        //from line eqn relating temperature to rpm

			//hifire
			rpm = (uint16_t)(((-170) * (int32_t)TempDegreeC) + 8220);        //from line eqn relating temperature to rpm
 800a94e:	79fb      	ldrb	r3, [r7, #7]
 800a950:	b29b      	uxth	r3, r3
 800a952:	461a      	mov	r2, r3
 800a954:	0092      	lsls	r2, r2, #2
 800a956:	4413      	add	r3, r2
 800a958:	461a      	mov	r2, r3
 800a95a:	0111      	lsls	r1, r2, #4
 800a95c:	461a      	mov	r2, r3
 800a95e:	460b      	mov	r3, r1
 800a960:	4413      	add	r3, r2
 800a962:	005b      	lsls	r3, r3, #1
 800a964:	425b      	negs	r3, r3
 800a966:	b29b      	uxth	r3, r3
 800a968:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800a96c:	331c      	adds	r3, #28
 800a96e:	b29a      	uxth	r2, r3
 800a970:	4b3f      	ldr	r3, [pc, #252]	; (800aa70 <Process_Read_CAN_0x8000100+0x1a0>)
 800a972:	801a      	strh	r2, [r3, #0]
 800a974:	e006      	b.n	800a984 <Process_Read_CAN_0x8000100+0xb4>
			{
				//ptc turn off//
				//DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}
		else if (TempDegreeC > 28)
 800a976:	79fb      	ldrb	r3, [r7, #7]
 800a978:	2b1c      	cmp	r3, #28
 800a97a:	d903      	bls.n	800a984 <Process_Read_CAN_0x8000100+0xb4>
		{
			rpm = 2500;
 800a97c:	4b3c      	ldr	r3, [pc, #240]	; (800aa70 <Process_Read_CAN_0x8000100+0x1a0>)
 800a97e:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800a982:	801a      	strh	r2, [r3, #0]
			//DIGITAL_IO_SetOutputHigh(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}

		//calculate pressure value in megaPascal
		pressure_value = (0.6833 * pressure_in) - 0.0935;
 800a984:	6838      	ldr	r0, [r7, #0]
 800a986:	f006 fad3 	bl	8010f30 <__aeabi_f2d>
 800a98a:	4602      	mov	r2, r0
 800a98c:	460b      	mov	r3, r1
 800a98e:	4610      	mov	r0, r2
 800a990:	4619      	mov	r1, r3
 800a992:	a32f      	add	r3, pc, #188	; (adr r3, 800aa50 <Process_Read_CAN_0x8000100+0x180>)
 800a994:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a998:	f006 fb1e 	bl	8010fd8 <__aeabi_dmul>
 800a99c:	4602      	mov	r2, r0
 800a99e:	460b      	mov	r3, r1
 800a9a0:	4610      	mov	r0, r2
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	a32c      	add	r3, pc, #176	; (adr r3, 800aa58 <Process_Read_CAN_0x8000100+0x188>)
 800a9a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9aa:	f006 f961 	bl	8010c70 <__aeabi_dsub>
 800a9ae:	4602      	mov	r2, r0
 800a9b0:	460b      	mov	r3, r1
 800a9b2:	4610      	mov	r0, r2
 800a9b4:	4619      	mov	r1, r3
 800a9b6:	f006 fdf1 	bl	801159c <__aeabi_d2f>
 800a9ba:	4602      	mov	r2, r0
 800a9bc:	4b2d      	ldr	r3, [pc, #180]	; (800aa74 <Process_Read_CAN_0x8000100+0x1a4>)
 800a9be:	601a      	str	r2, [r3, #0]

		if(pressure_value >= HIGH_PRESSURE_mP)
 800a9c0:	4b2c      	ldr	r3, [pc, #176]	; (800aa74 <Process_Read_CAN_0x8000100+0x1a4>)
 800a9c2:	edd3 7a00 	vldr	s15, [r3]
 800a9c6:	eeb0 7a02 	vmov.f32	s14, #2
 800a9ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 800a9ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9d2:	db01      	blt.n	800a9d8 <Process_Read_CAN_0x8000100+0x108>
		{
			//AC_ON = 0x01;
			AC_ON = 0x00; //make whole system off
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	75fb      	strb	r3, [r7, #23]
//	CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1] = (rpm >> 8);

	//update CAN_MSG_DB_HVAC for 0x8000530 //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = 0x0b;        //hifire
//	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = 0xb8; //hifire
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = (prev_compressor_rpm >> 8);//0x0b;        //hifire
 800a9d8:	4b27      	ldr	r3, [pc, #156]	; (800aa78 <Process_Read_CAN_0x8000100+0x1a8>)
 800a9da:	881b      	ldrh	r3, [r3, #0]
 800a9dc:	0a1b      	lsrs	r3, r3, #8
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	b2da      	uxtb	r2, r3
 800a9e2:	4b21      	ldr	r3, [pc, #132]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a9e4:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = prev_compressor_rpm;//0xb8; //hifire
 800a9e8:	4b23      	ldr	r3, [pc, #140]	; (800aa78 <Process_Read_CAN_0x8000100+0x1a8>)
 800a9ea:	881b      	ldrh	r3, [r3, #0]
 800a9ec:	b2da      	uxtb	r2, r3
 800a9ee:	4b1e      	ldr	r3, [pc, #120]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a9f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[5] = 0x0F;  //0xFE is max     //hifire
 800a9f4:	4b1c      	ldr	r3, [pc, #112]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800a9f6:	220f      	movs	r2, #15
 800a9f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	compressor_rpm = rpm;
 800a9fc:	4b1c      	ldr	r3, [pc, #112]	; (800aa70 <Process_Read_CAN_0x8000100+0x1a0>)
 800a9fe:	881a      	ldrh	r2, [r3, #0]
 800aa00:	4b1e      	ldr	r3, [pc, #120]	; (800aa7c <Process_Read_CAN_0x8000100+0x1ac>)
 800aa02:	801a      	strh	r2, [r3, #0]

	//error_compressor from 0x8000250
	if((0x01 == AC_ON) && (0x01 != error_compressor))
 800aa04:	7dfb      	ldrb	r3, [r7, #23]
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d113      	bne.n	800aa32 <Process_Read_CAN_0x8000100+0x162>
 800aa0a:	4b1d      	ldr	r3, [pc, #116]	; (800aa80 <Process_Read_CAN_0x8000100+0x1b0>)
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	b2db      	uxtb	r3, r3
 800aa10:	2b01      	cmp	r3, #1
 800aa12:	d00e      	beq.n	800aa32 <Process_Read_CAN_0x8000100+0x162>
	{
		if(0x0 == condenser_on)
 800aa14:	4b1b      	ldr	r3, [pc, #108]	; (800aa84 <Process_Read_CAN_0x8000100+0x1b4>)
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d105      	bne.n	800aa28 <Process_Read_CAN_0x8000100+0x158>
//			DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
			//DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_1); // for
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			//	DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_2); // for compressor to on X
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
					   DIGITAL_IO_SetOutputHigh(&AC_RADIATOR_OUT_D); // for compressor to on
 800aa1c:	481a      	ldr	r0, [pc, #104]	; (800aa88 <Process_Read_CAN_0x8000100+0x1b8>)
 800aa1e:	f7ff ff27 	bl	800a870 <DIGITAL_IO_SetOutputHigh>

			condenser_on = 0x1;
 800aa22:	4b18      	ldr	r3, [pc, #96]	; (800aa84 <Process_Read_CAN_0x8000100+0x1b4>)
 800aa24:	2201      	movs	r2, #1
 800aa26:	701a      	strb	r2, [r3, #0]
		}

		//turn AC ON
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x01;	//setting 24th bit of CAN_0x238
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x80;	//setting 7th bit of CAN_0x8000530 //hifire
 800aa28:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800aa2a:	2280      	movs	r2, #128	; 0x80
 800aa2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800aa30:	e009      	b.n	800aa46 <Process_Read_CAN_0x8000100+0x176>
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_1); // for
			//for(volatile int i = 0; i < 0xffff*4; i++);
		//if(DIGITAL_IO_GetInput(&IGNI_POS2_IN_D))
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_2);
		//if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			  DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);/// for compressor to turn off
 800aa32:	4815      	ldr	r0, [pc, #84]	; (800aa88 <Process_Read_CAN_0x8000100+0x1b8>)
 800aa34:	f7ff ff2c 	bl	800a890 <DIGITAL_IO_SetOutputLow>
		condenser_on = 0x0;
 800aa38:	4b12      	ldr	r3, [pc, #72]	; (800aa84 <Process_Read_CAN_0x8000100+0x1b4>)
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	701a      	strb	r2, [r3, #0]
		//}
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x00;
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x00; //hifire
 800aa3e:	4b0a      	ldr	r3, [pc, #40]	; (800aa68 <Process_Read_CAN_0x8000100+0x198>)
 800aa40:	2200      	movs	r2, #0
 800aa42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
}
 800aa46:	3718      	adds	r7, #24
 800aa48:	46bd      	mov	sp, r7
 800aa4a:	bd80      	pop	{r7, pc}
 800aa4c:	f3af 8000 	nop.w
 800aa50:	f62b6ae8 	.word	0xf62b6ae8
 800aa54:	3fe5dd97 	.word	0x3fe5dd97
 800aa58:	b22d0e56 	.word	0xb22d0e56
 800aa5c:	3fb7ef9d 	.word	0x3fb7ef9d
 800aa60:	08014048 	.word	0x08014048
 800aa64:	1ffe9404 	.word	0x1ffe9404
 800aa68:	1ffe93c4 	.word	0x1ffe93c4
 800aa6c:	1fff4850 	.word	0x1fff4850
 800aa70:	1fff44c2 	.word	0x1fff44c2
 800aa74:	1fff44c4 	.word	0x1fff44c4
 800aa78:	1ffe940c 	.word	0x1ffe940c
 800aa7c:	1fff44c0 	.word	0x1fff44c0
 800aa80:	1fff487c 	.word	0x1fff487c
 800aa84:	1fff44c8 	.word	0x1fff44c8
 800aa88:	08013760 	.word	0x08013760
 800aa8c:	f3af 8000 	nop.w

0800aa90 <Read_CAN_0x8000100>:
	Process_Read_CAN_0x100();
}


void Read_CAN_0x8000100(void)
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b084      	sub	sp, #16
 800aa94:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800aa96:	4b1c      	ldr	r3, [pc, #112]	; (800ab08 <Read_CAN_0x8000100+0x78>)
 800aa98:	60fb      	str	r3, [r7, #12]

	mo_index = 22;
 800aa9a:	2316      	movs	r3, #22
 800aa9c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800aa9e:	7afb      	ldrb	r3, [r7, #11]
 800aaa0:	68fa      	ldr	r2, [r7, #12]
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	009b      	lsls	r3, r3, #2
 800aaa6:	4413      	add	r3, r2
 800aaa8:	685b      	ldr	r3, [r3, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800aaae:	7afb      	ldrb	r3, [r7, #11]
 800aab0:	68fa      	ldr	r2, [r7, #12]
 800aab2:	3302      	adds	r3, #2
 800aab4:	009b      	lsls	r3, r3, #2
 800aab6:	4413      	add	r3, r2
 800aab8:	685b      	ldr	r3, [r3, #4]
 800aaba:	4618      	mov	r0, r3
 800aabc:	f7fe fa54 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800aac0:	4603      	mov	r3, r0
 800aac2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800aac4:	78fb      	ldrb	r3, [r7, #3]
 800aac6:	f003 0301 	and.w	r3, r3, #1
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d016      	beq.n	800aafc <Read_CAN_0x8000100+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	2101      	movs	r1, #1
 800aad2:	f7ff feed 	bl	800a8b0 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800aad6:	7afb      	ldrb	r3, [r7, #11]
 800aad8:	68fa      	ldr	r2, [r7, #12]
 800aada:	3302      	adds	r3, #2
 800aadc:	009b      	lsls	r3, r3, #2
 800aade:	4413      	add	r3, r2
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7fe fa0e 	bl	8008f04 <CAN_NODE_MO_Receive>
 800aae8:	4603      	mov	r3, r0
 800aaea:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aaec:	78bb      	ldrb	r3, [r7, #2]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d102      	bne.n	800aaf8 <Read_CAN_0x8000100+0x68>
		{
			// message object receive success.
			test = 1;
 800aaf2:	2301      	movs	r3, #1
 800aaf4:	707b      	strb	r3, [r7, #1]
 800aaf6:	e001      	b.n	800aafc <Read_CAN_0x8000100+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x8000100();
 800aafc:	f7ff fee8 	bl	800a8d0 <Process_Read_CAN_0x8000100>
}
 800ab00:	3710      	adds	r7, #16
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	08014048 	.word	0x08014048

0800ab0c <Read_CAN_Hifire_0x8000250>:
	Process_Read_CAN_0x248();
}

//hifire
void Read_CAN_Hifire_0x8000250(void)
{
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b084      	sub	sp, #16
 800ab10:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800ab12:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <Read_CAN_Hifire_0x8000250+0x78>)
 800ab14:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800ab16:	2308      	movs	r3, #8
 800ab18:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ab1a:	7afb      	ldrb	r3, [r7, #11]
 800ab1c:	68fa      	ldr	r2, [r7, #12]
 800ab1e:	3302      	adds	r3, #2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	685b      	ldr	r3, [r3, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800ab2a:	7afb      	ldrb	r3, [r7, #11]
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	3302      	adds	r3, #2
 800ab30:	009b      	lsls	r3, r3, #2
 800ab32:	4413      	add	r3, r2
 800ab34:	685b      	ldr	r3, [r3, #4]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7fe fa16 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800ab40:	78fb      	ldrb	r3, [r7, #3]
 800ab42:	f003 0301 	and.w	r3, r3, #1
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d016      	beq.n	800ab78 <Read_CAN_Hifire_0x8000250+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	2101      	movs	r1, #1
 800ab4e:	f7ff feaf 	bl	800a8b0 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800ab52:	7afb      	ldrb	r3, [r7, #11]
 800ab54:	68fa      	ldr	r2, [r7, #12]
 800ab56:	3302      	adds	r3, #2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7fe f9d0 	bl	8008f04 <CAN_NODE_MO_Receive>
 800ab64:	4603      	mov	r3, r0
 800ab66:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800ab68:	78bb      	ldrb	r3, [r7, #2]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <Read_CAN_Hifire_0x8000250+0x68>
		{
			// message object receive success.
			test = 1;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	707b      	strb	r3, [r7, #1]
 800ab72:	e001      	b.n	800ab78 <Read_CAN_Hifire_0x8000250+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800ab74:	2300      	movs	r3, #0
 800ab76:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_CAN_Hifire_0x8000250();
 800ab78:	f000 f806 	bl	800ab88 <Process_CAN_Hifire_0x8000250>
}
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}
 800ab82:	bf00      	nop
 800ab84:	08013e54 	.word	0x08013e54

0800ab88 <Process_CAN_Hifire_0x8000250>:

//hifire
void Process_CAN_Hifire_0x8000250(void)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b084      	sub	sp, #16
 800ab8c:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800ab8e:	4b11      	ldr	r3, [pc, #68]	; (800abd4 <Process_CAN_Hifire_0x8000250+0x4c>)
 800ab90:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800ab92:	2308      	movs	r3, #8
 800ab94:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[ZERO_BYTE];
 800ab96:	4b10      	ldr	r3, [pc, #64]	; (800abd8 <Process_CAN_Hifire_0x8000250+0x50>)
 800ab98:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ab9a:	7afb      	ldrb	r3, [r7, #11]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	3302      	adds	r3, #2
 800aba0:	009b      	lsls	r3, r3, #2
 800aba2:	4413      	add	r3, r2
 800aba4:	685b      	ldr	r3, [r3, #4]
 800aba6:	4618      	mov	r0, r3
 800aba8:	6879      	ldr	r1, [r7, #4]
 800abaa:	f000 f86d 	bl	800ac88 <CAN_NODE_MO_ReadData>

	//get the error code
	 uint8_t error_code = (0x0F & (CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[4]));
 800abae:	4b0b      	ldr	r3, [pc, #44]	; (800abdc <Process_CAN_Hifire_0x8000250+0x54>)
 800abb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800abb4:	f003 030f 	and.w	r3, r3, #15
 800abb8:	70fb      	strb	r3, [r7, #3]

	if(0x00 != error_code)
 800abba:	78fb      	ldrb	r3, [r7, #3]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d003      	beq.n	800abc8 <Process_CAN_Hifire_0x8000250+0x40>
	{
		error_compressor = 0x1;
 800abc0:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <Process_CAN_Hifire_0x8000250+0x58>)
 800abc2:	2201      	movs	r2, #1
 800abc4:	701a      	strb	r2, [r3, #0]
 800abc6:	e002      	b.n	800abce <Process_CAN_Hifire_0x8000250+0x46>
	}
	else
	{
		error_compressor = 0x0;
 800abc8:	4b05      	ldr	r3, [pc, #20]	; (800abe0 <Process_CAN_Hifire_0x8000250+0x58>)
 800abca:	2200      	movs	r2, #0
 800abcc:	701a      	strb	r2, [r3, #0]
	}
}
 800abce:	3710      	adds	r7, #16
 800abd0:	46bd      	mov	sp, r7
 800abd2:	bd80      	pop	{r7, pc}
 800abd4:	08013e54 	.word	0x08013e54
 800abd8:	1ffe93ec 	.word	0x1ffe93ec
 800abdc:	1ffe93c4 	.word	0x1ffe93c4
 800abe0:	1fff487c 	.word	0x1fff487c

0800abe4 <CAN_INPUT_HVAC>:
		// message object failed to update.
	}
}

void CAN_INPUT_HVAC(void)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	af00      	add	r7, sp, #0
	//read compressor to check error
	Read_CAN_Hifire_0x8000250();
 800abe8:	f7ff ff90 	bl	800ab0c <Read_CAN_Hifire_0x8000250>

#if HVAC_0x100
	Read_CAN_0x100();
	Process_CAN_0x100();
#else
	Read_CAN_0x8000100();
 800abec:	f7ff ff50 	bl	800aa90 <Read_CAN_0x8000100>
#endif

}
 800abf0:	bd80      	pop	{r7, pc}
 800abf2:	bf00      	nop

0800abf4 <CAN_OUTPUT_COMPRESSOR>:

//for hifire
void CAN_OUTPUT_COMPRESSOR(void)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b086      	sub	sp, #24
 800abf8:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t mo_tranmit_status, status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800abfa:	4b21      	ldr	r3, [pc, #132]	; (800ac80 <CAN_OUTPUT_COMPRESSOR+0x8c>)
 800abfc:	617b      	str	r3, [r7, #20]
	uint8_t mo_index = 9;
 800abfe:	2309      	movs	r3, #9
 800ac00:	74fb      	strb	r3, [r7, #19]
	XMC_CAN_MO_t *MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ac02:	7cfb      	ldrb	r3, [r7, #19]
 800ac04:	697a      	ldr	r2, [r7, #20]
 800ac06:	3302      	adds	r3, #2
 800ac08:	009b      	lsls	r3, r3, #2
 800ac0a:	4413      	add	r3, r2
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	60fb      	str	r3, [r7, #12]

	/* update message's data */
	uint8_t *tempData = &CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[ZERO_BYTE];
 800ac12:	4b1c      	ldr	r3, [pc, #112]	; (800ac84 <CAN_OUTPUT_COMPRESSOR+0x90>)
 800ac14:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ac16:	7cfb      	ldrb	r3, [r7, #19]
 800ac18:	697a      	ldr	r2, [r7, #20]
 800ac1a:	3302      	adds	r3, #2
 800ac1c:	009b      	lsls	r3, r3, #2
 800ac1e:	4413      	add	r3, r2
 800ac20:	685b      	ldr	r3, [r3, #4]
 800ac22:	4618      	mov	r0, r3
 800ac24:	68b9      	ldr	r1, [r7, #8]
 800ac26:	f7fe f97f 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800ac2e:	79fb      	ldrb	r3, [r7, #7]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d121      	bne.n	800ac78 <CAN_OUTPUT_COMPRESSOR+0x84>
	{
		// message object data updated.
		// transmit the data
		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[mo_index]);
 800ac34:	7cfb      	ldrb	r3, [r7, #19]
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	3302      	adds	r3, #2
 800ac3a:	009b      	lsls	r3, r3, #2
 800ac3c:	4413      	add	r3, r2
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7fe f94d 	bl	8008ee0 <CAN_NODE_MO_Transmit>
 800ac46:	4603      	mov	r3, r0
 800ac48:	71bb      	strb	r3, [r7, #6]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800ac4a:	79bb      	ldrb	r3, [r7, #6]
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d113      	bne.n	800ac78 <CAN_OUTPUT_COMPRESSOR+0x84>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);	//msg_count, earlier it was 0 and working
 800ac50:	7cfb      	ldrb	r3, [r7, #19]
 800ac52:	697a      	ldr	r2, [r7, #20]
 800ac54:	3302      	adds	r3, #2
 800ac56:	009b      	lsls	r3, r3, #2
 800ac58:	4413      	add	r3, r2
 800ac5a:	685b      	ldr	r3, [r3, #4]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f7fe f983 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800ac62:	4603      	mov	r3, r0
 800ac64:	71fb      	strb	r3, [r7, #7]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800ac66:	79fb      	ldrb	r3, [r7, #7]
 800ac68:	f003 0302 	and.w	r3, r3, #2
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d003      	beq.n	800ac78 <CAN_OUTPUT_COMPRESSOR+0x84>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800ac70:	68f8      	ldr	r0, [r7, #12]
 800ac72:	2102      	movs	r1, #2
 800ac74:	f7ff fe1c 	bl	800a8b0 <XMC_CAN_MO_ResetStatus>
	}
	else
	{
		// message object failed to update.
	}
}
 800ac78:	3718      	adds	r7, #24
 800ac7a:	46bd      	mov	sp, r7
 800ac7c:	bd80      	pop	{r7, pc}
 800ac7e:	bf00      	nop
 800ac80:	08013e54 	.word	0x08013e54
 800ac84:	1ffe93f8 	.word	0x1ffe93f8

0800ac88 <CAN_NODE_MO_ReadData>:
	  }
	}
}

void CAN_NODE_MO_ReadData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	6039      	str	r1, [r7, #0]
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800ac92:	2300      	movs	r3, #0
 800ac94:	73fb      	strb	r3, [r7, #15]
 800ac96:	e00b      	b.n	800acb0 <CAN_NODE_MO_ReadData+0x28>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
 800ac98:	7bfb      	ldrb	r3, [r7, #15]
 800ac9a:	683a      	ldr	r2, [r7, #0]
 800ac9c:	4413      	add	r3, r2
 800ac9e:	687a      	ldr	r2, [r7, #4]
 800aca0:	6811      	ldr	r1, [r2, #0]
 800aca2:	7bfa      	ldrb	r2, [r7, #15]
 800aca4:	440a      	add	r2, r1
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	701a      	strb	r2, [r3, #0]
{
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
 800acac:	3301      	adds	r3, #1
 800acae:	73fb      	strb	r3, [r7, #15]
 800acb0:	7bfb      	ldrb	r3, [r7, #15]
 800acb2:	2b07      	cmp	r3, #7
 800acb4:	d9f0      	bls.n	800ac98 <CAN_NODE_MO_ReadData+0x10>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
  }
}
 800acb6:	3714      	adds	r7, #20
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <calculate_speed>:
	//perform the conversion and then store
	process_CAN_0xA6();
}

uint8_t calculate_speed(int16_t motor_rpm)
{
 800acc0:	b5b0      	push	{r4, r5, r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	4603      	mov	r3, r0
 800acc8:	80fb      	strh	r3, [r7, #6]
	const float PI = 3.14;
 800acca:	4b2b      	ldr	r3, [pc, #172]	; (800ad78 <calculate_speed+0xb8>)
 800accc:	617b      	str	r3, [r7, #20]
	float kmph;
	uint8_t TempSpeed;
	float wheel_rpm;
	float MPS;

	float final_drive_ratio = 9.887;    //drive train ration 9.916 , 9.89109;
 800acce:	4b2b      	ldr	r3, [pc, #172]	; (800ad7c <calculate_speed+0xbc>)
 800acd0:	613b      	str	r3, [r7, #16]
	float SLR = 0.267; //static load radius
 800acd2:	4b2b      	ldr	r3, [pc, #172]	; (800ad80 <calculate_speed+0xc0>)
 800acd4:	60fb      	str	r3, [r7, #12]

//	float wheel_dia_meters = 0.55;// for tyre under load
//	float wheel_circumference_meters = wheel_dia_meters * PI; // 0.001727-> wheel diameter = 0.55 meters
//	float wheel_circumference_km = wheel_circumference_meters / 1000.0;

	motor_rpm = abs(motor_rpm);
 800acd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	bfb8      	it	lt
 800acde:	425b      	neglt	r3, r3
 800ace0:	80fb      	strh	r3, [r7, #6]
		MPS = (2 * (PI) * wheel_rpm * SLR)/60;
		kmph = MPS * 3.6;

		TempSpeed = (uint8_t) kmph;*/

	motor_rpm = motor_rpm + (motor_rpm * (0.05));
 800ace2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f006 f910 	bl	8010f0c <__aeabi_i2d>
 800acec:	4604      	mov	r4, r0
 800acee:	460d      	mov	r5, r1
 800acf0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800acf4:	4618      	mov	r0, r3
 800acf6:	f006 f909 	bl	8010f0c <__aeabi_i2d>
 800acfa:	4602      	mov	r2, r0
 800acfc:	460b      	mov	r3, r1
 800acfe:	4610      	mov	r0, r2
 800ad00:	4619      	mov	r1, r3
 800ad02:	a319      	add	r3, pc, #100	; (adr r3, 800ad68 <calculate_speed+0xa8>)
 800ad04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad08:	f006 f966 	bl	8010fd8 <__aeabi_dmul>
 800ad0c:	4602      	mov	r2, r0
 800ad0e:	460b      	mov	r3, r1
 800ad10:	4620      	mov	r0, r4
 800ad12:	4629      	mov	r1, r5
 800ad14:	f005 ffae 	bl	8010c74 <__adddf3>
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4610      	mov	r0, r2
 800ad1e:	4619      	mov	r1, r3
 800ad20:	f006 fbf4 	bl	801150c <__aeabi_d2iz>
 800ad24:	4603      	mov	r3, r0
 800ad26:	80fb      	strh	r3, [r7, #6]
	motor_rpm *= 0.010988;/* constant given by mukul*/
 800ad28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	f006 f8ed 	bl	8010f0c <__aeabi_i2d>
 800ad32:	4602      	mov	r2, r0
 800ad34:	460b      	mov	r3, r1
 800ad36:	4610      	mov	r0, r2
 800ad38:	4619      	mov	r1, r3
 800ad3a:	a30d      	add	r3, pc, #52	; (adr r3, 800ad70 <calculate_speed+0xb0>)
 800ad3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad40:	f006 f94a 	bl	8010fd8 <__aeabi_dmul>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4610      	mov	r0, r2
 800ad4a:	4619      	mov	r1, r3
 800ad4c:	f006 fbde 	bl	801150c <__aeabi_d2iz>
 800ad50:	4603      	mov	r3, r0
 800ad52:	80fb      	strh	r3, [r7, #6]
	TempSpeed = motor_rpm;
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	72fb      	strb	r3, [r7, #11]

		return TempSpeed;
 800ad58:	7afb      	ldrb	r3, [r7, #11]
}
 800ad5a:	4618      	mov	r0, r3
 800ad5c:	3718      	adds	r7, #24
 800ad5e:	46bd      	mov	sp, r7
 800ad60:	bdb0      	pop	{r4, r5, r7, pc}
 800ad62:	bf00      	nop
 800ad64:	f3af 8000 	nop.w
 800ad68:	9999999a 	.word	0x9999999a
 800ad6c:	3fa99999 	.word	0x3fa99999
 800ad70:	65300581 	.word	0x65300581
 800ad74:	3f8680e0 	.word	0x3f8680e0
 800ad78:	4048f5c3 	.word	0x4048f5c3
 800ad7c:	411e3127 	.word	0x411e3127
 800ad80:	3e88b439 	.word	0x3e88b439
 800ad84:	f3af 8000 	nop.w

0800ad88 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	683a      	ldr	r2, [r7, #0]
 800ad98:	61da      	str	r2, [r3, #28]
}
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr

0800ada4 <CAN_Tx_id0x10>:
		{0x33,{0x00}},
		{0x55,{0x00}}
};

void CAN_Tx_id0x10(void)
{
 800ada4:	b580      	push	{r7, lr}
 800ada6:	b084      	sub	sp, #16
 800ada8:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    XMC_CAN_MO_t *MO_Ptr;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800adaa:	4b18      	ldr	r3, [pc, #96]	; (800ae0c <CAN_Tx_id0x10+0x68>)
 800adac:	60fb      	str	r3, [r7, #12]
	    MO_Ptr = HandlePtr1->lmobj_ptr[16]->mo_ptr;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	60bb      	str	r3, [r7, #8]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x10].CAN_Data[0];
 800adb6:	4b16      	ldr	r3, [pc, #88]	; (800ae10 <CAN_Tx_id0x10+0x6c>)
 800adb8:	607b      	str	r3, [r7, #4]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[16],array_data);
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adbe:	4618      	mov	r0, r3
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	f7fe f8b1 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800adc6:	4603      	mov	r3, r0
 800adc8:	70fb      	strb	r3, [r7, #3]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d119      	bne.n	800ae04 <CAN_Tx_id0x10+0x60>
	      {
	        // message object data updated.

	        // transmit the data
	    	  status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[16]);
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add4:	4618      	mov	r0, r3
 800add6:	f7fe f883 	bl	8008ee0 <CAN_NODE_MO_Transmit>
 800adda:	4603      	mov	r3, r0
 800addc:	70fb      	strb	r3, [r7, #3]
	    	  if (status == CAN_NODE_STATUS_SUCCESS)
 800adde:	78fb      	ldrb	r3, [r7, #3]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10f      	bne.n	800ae04 <CAN_Tx_id0x10+0x60>
	    	  {
	    	       status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[16]);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ade8:	4618      	mov	r0, r3
 800adea:	f7fe f8bd 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800adee:	4603      	mov	r3, r0
 800adf0:	70fb      	strb	r3, [r7, #3]

	    	        if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	f003 0302 	and.w	r3, r3, #2
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d003      	beq.n	800ae04 <CAN_Tx_id0x10+0x60>
	    	        {
	    	          //Clear the transmit OK flag
	    	          XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800adfc:	68b8      	ldr	r0, [r7, #8]
 800adfe:	2102      	movs	r1, #2
 800ae00:	f7ff ffc2 	bl	800ad88 <XMC_CAN_MO_ResetStatus>
	      else
	      {
	        // message object failed to update.
	      }

}
 800ae04:	3710      	adds	r7, #16
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	08014048 	.word	0x08014048
 800ae10:	1ffe9474 	.word	0x1ffe9474

0800ae14 <CAN_Tx_id0x20>:

void CAN_Tx_id0x20(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ae1a:	4b0b      	ldr	r3, [pc, #44]	; (800ae48 <CAN_Tx_id0x20+0x34>)
 800ae1c:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x20].CAN_Data[0];
 800ae1e:	4b0b      	ldr	r3, [pc, #44]	; (800ae4c <CAN_Tx_id0x20+0x38>)
 800ae20:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[17],array_data);
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae26:	4618      	mov	r0, r3
 800ae28:	68b9      	ldr	r1, [r7, #8]
 800ae2a:	f7fe f87d 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800ae32:	79fb      	ldrb	r3, [r7, #7]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d104      	bne.n	800ae42 <CAN_Tx_id0x20+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[17]);
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	f7fe f84f 	bl	8008ee0 <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800ae42:	3710      	adds	r7, #16
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd80      	pop	{r7, pc}
 800ae48:	08014048 	.word	0x08014048
 800ae4c:	1ffe94a4 	.word	0x1ffe94a4

0800ae50 <CAN_Tx_id0x21>:

void CAN_Tx_id0x21(void)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b084      	sub	sp, #16
 800ae54:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ae56:	4b0c      	ldr	r3, [pc, #48]	; (800ae88 <CAN_Tx_id0x21+0x38>)
 800ae58:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x21].CAN_Data[0];
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <CAN_Tx_id0x21+0x3c>)
 800ae5c:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[18],array_data);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae62:	4618      	mov	r0, r3
 800ae64:	68b9      	ldr	r1, [r7, #8]
 800ae66:	f7fe f85f 	bl	8008f28 <CAN_NODE_MO_UpdateData>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d106      	bne.n	800ae82 <CAN_Tx_id0x21+0x32>
	      {
	        // message object data updated.

	        // transmit the data
	    	  status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[18]);
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae78:	4618      	mov	r0, r3
 800ae7a:	f7fe f831 	bl	8008ee0 <CAN_NODE_MO_Transmit>
 800ae7e:	4603      	mov	r3, r0
 800ae80:	71fb      	strb	r3, [r7, #7]
	      else
	      {
	        // message object failed to update.
	      }

}
 800ae82:	3710      	adds	r7, #16
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	08014048 	.word	0x08014048
 800ae8c:	1ffe94b0 	.word	0x1ffe94b0

0800ae90 <CAN_Rx_id0x13>:

void CAN_Rx_id0x13(void)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b084      	sub	sp, #16
 800ae94:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ae96:	4b1c      	ldr	r3, [pc, #112]	; (800af08 <CAN_Rx_id0x13+0x78>)
 800ae98:	60fb      	str	r3, [r7, #12]

    mo_index = 19;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800ae9a:	2313      	movs	r3, #19
 800ae9c:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800ae9e:	7afb      	ldrb	r3, [r7, #11]
 800aea0:	68fa      	ldr	r2, [r7, #12]
 800aea2:	3302      	adds	r3, #2
 800aea4:	009b      	lsls	r3, r3, #2
 800aea6:	4413      	add	r3, r2
 800aea8:	685b      	ldr	r3, [r3, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800aeae:	7afb      	ldrb	r3, [r7, #11]
 800aeb0:	68fa      	ldr	r2, [r7, #12]
 800aeb2:	3302      	adds	r3, #2
 800aeb4:	009b      	lsls	r3, r3, #2
 800aeb6:	4413      	add	r3, r2
 800aeb8:	685b      	ldr	r3, [r3, #4]
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe f854 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800aec0:	4603      	mov	r3, r0
 800aec2:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800aec4:	78fb      	ldrb	r3, [r7, #3]
 800aec6:	f003 0301 	and.w	r3, r3, #1
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d016      	beq.n	800aefc <CAN_Rx_id0x13+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	2101      	movs	r1, #1
 800aed2:	f7ff ff59 	bl	800ad88 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800aed6:	7afb      	ldrb	r3, [r7, #11]
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	3302      	adds	r3, #2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4413      	add	r3, r2
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	4618      	mov	r0, r3
 800aee4:	f7fe f80e 	bl	8008f04 <CAN_NODE_MO_Receive>
 800aee8:	4603      	mov	r3, r0
 800aeea:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aeec:	78bb      	ldrb	r3, [r7, #2]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d102      	bne.n	800aef8 <CAN_Rx_id0x13+0x68>
      {
        // message object receive success.
          test = 1;
 800aef2:	2301      	movs	r3, #1
 800aef4:	707b      	strb	r3, [r7, #1]
 800aef6:	e001      	b.n	800aefc <CAN_Rx_id0x13+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800aef8:	2300      	movs	r3, #0
 800aefa:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x13();
 800aefc:	f000 f884 	bl	800b008 <process_Rx_CAN_0x13>
}
 800af00:	3710      	adds	r7, #16
 800af02:	46bd      	mov	sp, r7
 800af04:	bd80      	pop	{r7, pc}
 800af06:	bf00      	nop
 800af08:	08014048 	.word	0x08014048

0800af0c <CAN_Rx_id0x12>:


void CAN_Rx_id0x12(void)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b084      	sub	sp, #16
 800af10:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800af12:	4b1c      	ldr	r3, [pc, #112]	; (800af84 <CAN_Rx_id0x12+0x78>)
 800af14:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800af16:	2314      	movs	r3, #20
 800af18:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800af1a:	7afb      	ldrb	r3, [r7, #11]
 800af1c:	68fa      	ldr	r2, [r7, #12]
 800af1e:	3302      	adds	r3, #2
 800af20:	009b      	lsls	r3, r3, #2
 800af22:	4413      	add	r3, r2
 800af24:	685b      	ldr	r3, [r3, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800af2a:	7afb      	ldrb	r3, [r7, #11]
 800af2c:	68fa      	ldr	r2, [r7, #12]
 800af2e:	3302      	adds	r3, #2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4413      	add	r3, r2
 800af34:	685b      	ldr	r3, [r3, #4]
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe f816 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800af3c:	4603      	mov	r3, r0
 800af3e:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800af40:	78fb      	ldrb	r3, [r7, #3]
 800af42:	f003 0301 	and.w	r3, r3, #1
 800af46:	2b00      	cmp	r3, #0
 800af48:	d016      	beq.n	800af78 <CAN_Rx_id0x12+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	2101      	movs	r1, #1
 800af4e:	f7ff ff1b 	bl	800ad88 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800af52:	7afb      	ldrb	r3, [r7, #11]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	3302      	adds	r3, #2
 800af58:	009b      	lsls	r3, r3, #2
 800af5a:	4413      	add	r3, r2
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	4618      	mov	r0, r3
 800af60:	f7fd ffd0 	bl	8008f04 <CAN_NODE_MO_Receive>
 800af64:	4603      	mov	r3, r0
 800af66:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800af68:	78bb      	ldrb	r3, [r7, #2]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d102      	bne.n	800af74 <CAN_Rx_id0x12+0x68>
      {
        // message object receive success.
          test = 1;
 800af6e:	2301      	movs	r3, #1
 800af70:	707b      	strb	r3, [r7, #1]
 800af72:	e001      	b.n	800af78 <CAN_Rx_id0x12+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800af74:	2300      	movs	r3, #0
 800af76:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x12();
 800af78:	f000 f9ae 	bl	800b2d8 <process_Rx_CAN_0x12>
}
 800af7c:	3710      	adds	r7, #16
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}
 800af82:	bf00      	nop
 800af84:	08014048 	.word	0x08014048

0800af88 <CAN_Rx_id0x30>:


void CAN_Rx_id0x30(void)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800af8e:	4b1c      	ldr	r3, [pc, #112]	; (800b000 <CAN_Rx_id0x30+0x78>)
 800af90:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800af92:	2315      	movs	r3, #21
 800af94:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800af96:	7afb      	ldrb	r3, [r7, #11]
 800af98:	68fa      	ldr	r2, [r7, #12]
 800af9a:	3302      	adds	r3, #2
 800af9c:	009b      	lsls	r3, r3, #2
 800af9e:	4413      	add	r3, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800afa6:	7afb      	ldrb	r3, [r7, #11]
 800afa8:	68fa      	ldr	r2, [r7, #12]
 800afaa:	3302      	adds	r3, #2
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	4413      	add	r3, r2
 800afb0:	685b      	ldr	r3, [r3, #4]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f7fd ffd8 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800afb8:	4603      	mov	r3, r0
 800afba:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800afbc:	78fb      	ldrb	r3, [r7, #3]
 800afbe:	f003 0301 	and.w	r3, r3, #1
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d016      	beq.n	800aff4 <CAN_Rx_id0x30+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	2101      	movs	r1, #1
 800afca:	f7ff fedd 	bl	800ad88 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800afce:	7afb      	ldrb	r3, [r7, #11]
 800afd0:	68fa      	ldr	r2, [r7, #12]
 800afd2:	3302      	adds	r3, #2
 800afd4:	009b      	lsls	r3, r3, #2
 800afd6:	4413      	add	r3, r2
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	4618      	mov	r0, r3
 800afdc:	f7fd ff92 	bl	8008f04 <CAN_NODE_MO_Receive>
 800afe0:	4603      	mov	r3, r0
 800afe2:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800afe4:	78bb      	ldrb	r3, [r7, #2]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d102      	bne.n	800aff0 <CAN_Rx_id0x30+0x68>
      {
        // message object receive success.
          test = 1;
 800afea:	2301      	movs	r3, #1
 800afec:	707b      	strb	r3, [r7, #1]
 800afee:	e001      	b.n	800aff4 <CAN_Rx_id0x30+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800aff0:	2300      	movs	r3, #0
 800aff2:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x30();
 800aff4:	f000 f99c 	bl	800b330 <process_Rx_CAN_0x30>
}
 800aff8:	3710      	adds	r7, #16
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	08014048 	.word	0x08014048
 800b004:	00000000 	.word	0x00000000

0800b008 <process_Rx_CAN_0x13>:


void process_Rx_CAN_0x13(void)
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	b090      	sub	sp, #64	; 0x40
 800b00c:	af02      	add	r7, sp, #8
    int8_t mo_index, *tempData;
    uint8_t CAN_rawData[8];
    uint16_t ThrottlePercentage = 6;
 800b00e:	2306      	movs	r3, #6
 800b010:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t VehSpeed;
    int16_t c = 0, c2 = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	867b      	strh	r3, [r7, #50]	; 0x32
 800b016:	2300      	movs	r3, #0
 800b018:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t c1 = 0, c3 = 0;
 800b01a:	2300      	movs	r3, #0
 800b01c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800b01e:	2300      	movs	r3, #0
 800b020:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800b022:	4b9f      	ldr	r3, [pc, #636]	; (800b2a0 <process_Rx_CAN_0x13+0x298>)
 800b024:	62bb      	str	r3, [r7, #40]	; 0x28

    mo_index = 19;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800b026:	2313      	movs	r3, #19
 800b028:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x13].CAN_Data[ZERO_BYTE];
 800b02c:	4b9d      	ldr	r3, [pc, #628]	; (800b2a4 <process_Rx_CAN_0x13+0x29c>)
 800b02e:	623b      	str	r3, [r7, #32]
    Irp_Mcu_Torques_29bit->Speed_rpm = 0;
 800b030:	4b9d      	ldr	r3, [pc, #628]	; (800b2a8 <process_Rx_CAN_0x13+0x2a0>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	2200      	movs	r2, #0
 800b036:	701a      	strb	r2, [r3, #0]
 800b038:	785a      	ldrb	r2, [r3, #1]
 800b03a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800b03e:	705a      	strb	r2, [r3, #1]
   // Irp_Mcu_Torques_29bit->DC_Current = 0;
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b040:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b044:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b046:	3302      	adds	r3, #2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	685b      	ldr	r3, [r3, #4]
 800b04e:	4618      	mov	r0, r3
 800b050:	6a39      	ldr	r1, [r7, #32]
 800b052:	f7ff fe19 	bl	800ac88 <CAN_NODE_MO_ReadData>

    RPM = Irp_Mcu_Torques_29bit->Speed_rpm;
 800b056:	4b94      	ldr	r3, [pc, #592]	; (800b2a8 <process_Rx_CAN_0x13+0x2a0>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	781a      	ldrb	r2, [r3, #0]
 800b05c:	785b      	ldrb	r3, [r3, #1]
 800b05e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b062:	021b      	lsls	r3, r3, #8
 800b064:	4313      	orrs	r3, r2
 800b066:	045b      	lsls	r3, r3, #17
 800b068:	145b      	asrs	r3, r3, #17
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	b29a      	uxth	r2, r3
 800b06e:	4b8f      	ldr	r3, [pc, #572]	; (800b2ac <process_Rx_CAN_0x13+0x2a4>)
 800b070:	801a      	strh	r2, [r3, #0]
    Torque_Estimation = Irp_Mcu_Torques_29bit ->Torque_Estimation;
 800b072:	4b8d      	ldr	r3, [pc, #564]	; (800b2a8 <process_Rx_CAN_0x13+0x2a0>)
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	785a      	ldrb	r2, [r3, #1]
 800b078:	09d2      	lsrs	r2, r2, #7
 800b07a:	b2d2      	uxtb	r2, r2
 800b07c:	7899      	ldrb	r1, [r3, #2]
 800b07e:	0049      	lsls	r1, r1, #1
 800b080:	430a      	orrs	r2, r1
 800b082:	78db      	ldrb	r3, [r3, #3]
 800b084:	f003 030f 	and.w	r3, r3, #15
 800b088:	025b      	lsls	r3, r3, #9
 800b08a:	4313      	orrs	r3, r2
 800b08c:	04db      	lsls	r3, r3, #19
 800b08e:	14db      	asrs	r3, r3, #19
 800b090:	b29b      	uxth	r3, r3
 800b092:	461a      	mov	r2, r3
 800b094:	4b86      	ldr	r3, [pc, #536]	; (800b2b0 <process_Rx_CAN_0x13+0x2a8>)
 800b096:	801a      	strh	r2, [r3, #0]
    //DC_Current_irp = (int)Irp_Mcu_Torques_29bit->DC_Current;
   // c = (int)Irp_Mcu_Torques_29bit->DC_Voltage;
   // c1 = (uint16_t)Irp_Mcu_Torques_29bit->DC_Voltage;
    //DC_Voltage_irp = Irp_Mcu_Torques_29bit->DC_Voltage;
   // DC_Current_irp = ((((uint8_t)tempData[3]) >> 4) | ((int)(tempData[4] & 0x7f) << 4));
    DC_Current_irp = (int)(((int16_t)(tempData[4] & 0x7f) << 4) | (((int16_t)tempData[3] >> 4)) & 0x0f);
 800b098:	6a3b      	ldr	r3, [r7, #32]
 800b09a:	3304      	adds	r3, #4
 800b09c:	781b      	ldrb	r3, [r3, #0]
 800b09e:	b2db      	uxtb	r3, r3
 800b0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0a4:	011b      	lsls	r3, r3, #4
 800b0a6:	b29a      	uxth	r2, r3
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	3303      	adds	r3, #3
 800b0ac:	781b      	ldrb	r3, [r3, #0]
 800b0ae:	b25b      	sxtb	r3, r3
 800b0b0:	111b      	asrs	r3, r3, #4
 800b0b2:	b2db      	uxtb	r3, r3
 800b0b4:	b2db      	uxtb	r3, r3
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f003 030f 	and.w	r3, r3, #15
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	4b7c      	ldr	r3, [pc, #496]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b0c4:	801a      	strh	r2, [r3, #0]
    c2 = DC_Current_irp;//(tempData[3] >> 4);
 800b0c6:	4b7b      	ldr	r3, [pc, #492]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b0c8:	881b      	ldrh	r3, [r3, #0]
 800b0ca:	863b      	strh	r3, [r7, #48]	; 0x30
    c3 = ((uint16_t)((uint8_t)tempData[4] & 0x7f) << 4);
 800b0cc:	6a3b      	ldr	r3, [r7, #32]
 800b0ce:	3304      	adds	r3, #4
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	b2db      	uxtb	r3, r3
 800b0d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b0d8:	011b      	lsls	r3, r3, #4
 800b0da:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(c2 < 0)
 800b0dc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	da02      	bge.n	800b0ea <process_Rx_CAN_0x13+0xe2>
    {
    	int a;
    	a++;
 800b0e4:	69fb      	ldr	r3, [r7, #28]
 800b0e6:	3301      	adds	r3, #1
 800b0e8:	61fb      	str	r3, [r7, #28]
        //c3 = ((int16_t)((int16_t)tempData[4] & 0x7f) << 4) | 0xffffffff;
    }

    c = c3 | c2;
 800b0ea:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b0ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	867b      	strh	r3, [r7, #50]	; 0x32
    DC_Voltage_irp = ((((uint16_t)tempData[6] & 0x0f) << 9) | (((uint16_t)tempData[5] << 1) | 0/*((uint16_t)tempData[4] >> 7) & 0x01*/))/10;
 800b0f2:	6a3b      	ldr	r3, [r7, #32]
 800b0f4:	3306      	adds	r3, #6
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	b25b      	sxtb	r3, r3
 800b0fa:	b29b      	uxth	r3, r3
 800b0fc:	f003 030f 	and.w	r3, r3, #15
 800b100:	025a      	lsls	r2, r3, #9
 800b102:	6a3b      	ldr	r3, [r7, #32]
 800b104:	3305      	adds	r3, #5
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	b25b      	sxtb	r3, r3
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	005b      	lsls	r3, r3, #1
 800b10e:	4313      	orrs	r3, r2
 800b110:	4a69      	ldr	r2, [pc, #420]	; (800b2b8 <process_Rx_CAN_0x13+0x2b0>)
 800b112:	fb82 1203 	smull	r1, r2, r2, r3
 800b116:	1092      	asrs	r2, r2, #2
 800b118:	17db      	asrs	r3, r3, #31
 800b11a:	1ad3      	subs	r3, r2, r3
 800b11c:	b29a      	uxth	r2, r3
 800b11e:	4b67      	ldr	r3, [pc, #412]	; (800b2bc <process_Rx_CAN_0x13+0x2b4>)
 800b120:	801a      	strh	r2, [r3, #0]

    MotorPower_Irp = DC_Current_irp * DC_Voltage_irp;
 800b122:	4b64      	ldr	r3, [pc, #400]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b124:	881b      	ldrh	r3, [r3, #0]
 800b126:	b29a      	uxth	r2, r3
 800b128:	4b64      	ldr	r3, [pc, #400]	; (800b2bc <process_Rx_CAN_0x13+0x2b4>)
 800b12a:	881b      	ldrh	r3, [r3, #0]
 800b12c:	fb12 f303 	smulbb	r3, r2, r3
 800b130:	b29b      	uxth	r3, r3
 800b132:	b29a      	uxth	r2, r3
 800b134:	4b62      	ldr	r3, [pc, #392]	; (800b2c0 <process_Rx_CAN_0x13+0x2b8>)
 800b136:	801a      	strh	r2, [r3, #0]
    if(c < -1)
 800b138:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800b13c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b140:	da02      	bge.n	800b148 <process_Rx_CAN_0x13+0x140>
    {
    	int a;
    	   a++;
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	3301      	adds	r3, #1
 800b146:	61bb      	str	r3, [r7, #24]

    }
    if(Torque_Estimation > 1)
 800b148:	4b59      	ldr	r3, [pc, #356]	; (800b2b0 <process_Rx_CAN_0x13+0x2a8>)
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	b21b      	sxth	r3, r3
 800b14e:	2b01      	cmp	r3, #1
 800b150:	dd02      	ble.n	800b158 <process_Rx_CAN_0x13+0x150>
    {
    	int a;
    	a++;
 800b152:	697b      	ldr	r3, [r7, #20]
 800b154:	3301      	adds	r3, #1
 800b156:	617b      	str	r3, [r7, #20]
    }
    if(Torque_Estimation < -5)
 800b158:	4b55      	ldr	r3, [pc, #340]	; (800b2b0 <process_Rx_CAN_0x13+0x2a8>)
 800b15a:	881b      	ldrh	r3, [r3, #0]
 800b15c:	b21b      	sxth	r3, r3
 800b15e:	f113 0f05 	cmn.w	r3, #5
 800b162:	da02      	bge.n	800b16a <process_Rx_CAN_0x13+0x162>
    {
    	int a;
    	a++;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	3301      	adds	r3, #1
 800b168:	613b      	str	r3, [r7, #16]

    }
    Regenration_flag = 0;
 800b16a:	4b56      	ldr	r3, [pc, #344]	; (800b2c4 <process_Rx_CAN_0x13+0x2bc>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	701a      	strb	r2, [r3, #0]
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
 800b170:	4b50      	ldr	r3, [pc, #320]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b172:	881b      	ldrh	r3, [r3, #0]
 800b174:	b21b      	sxth	r3, r3
 800b176:	2b00      	cmp	r3, #0
 800b178:	dd08      	ble.n	800b18c <process_Rx_CAN_0x13+0x184>
 800b17a:	4b4e      	ldr	r3, [pc, #312]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	b21b      	sxth	r3, r3
 800b180:	2b32      	cmp	r3, #50	; 0x32
 800b182:	dc03      	bgt.n	800b18c <process_Rx_CAN_0x13+0x184>
{
	int a;
	a++;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
    	a++;

    }
    Regenration_flag = 0;
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
{
 800b18a:	e00f      	b.n	800b1ac <process_Rx_CAN_0x13+0x1a4>
	int a;
	a++;
}
else if(DC_Current_irp == 0)
 800b18c:	4b49      	ldr	r3, [pc, #292]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b18e:	881b      	ldrh	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d00b      	beq.n	800b1ac <process_Rx_CAN_0x13+0x1a4>
{
//Regenration_flag = 1;
}
else if(DC_Current_irp > 2000)
 800b194:	4b47      	ldr	r3, [pc, #284]	; (800b2b4 <process_Rx_CAN_0x13+0x2ac>)
 800b196:	881b      	ldrh	r3, [r3, #0]
 800b198:	b21b      	sxth	r3, r3
 800b19a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b19e:	dd05      	ble.n	800b1ac <process_Rx_CAN_0x13+0x1a4>
{
	int a;
	a++;
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	3301      	adds	r3, #1
 800b1a4:	60bb      	str	r3, [r7, #8]
	Regenration_flag = 1;
 800b1a6:	4b47      	ldr	r3, [pc, #284]	; (800b2c4 <process_Rx_CAN_0x13+0x2bc>)
 800b1a8:	2201      	movs	r2, #1
 800b1aa:	701a      	strb	r2, [r3, #0]
}
    VehSpeed = calculate_speed(RPM);
 800b1ac:	4b3f      	ldr	r3, [pc, #252]	; (800b2ac <process_Rx_CAN_0x13+0x2a4>)
 800b1ae:	881b      	ldrh	r3, [r3, #0]
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	b21b      	sxth	r3, r3
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	f7ff fd83 	bl	800acc0 <calculate_speed>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	86fb      	strh	r3, [r7, #54]	; 0x36

    speed_4g=VehSpeed;
 800b1be:	4a42      	ldr	r2, [pc, #264]	; (800b2c8 <process_Rx_CAN_0x13+0x2c0>)
 800b1c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1c2:	8013      	strh	r3, [r2, #0]

    if(VehSpeed > 100)
 800b1c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1c6:	2b64      	cmp	r3, #100	; 0x64
 800b1c8:	d901      	bls.n	800b1ce <process_Rx_CAN_0x13+0x1c6>
        VehSpeed = 100;
 800b1ca:	2364      	movs	r3, #100	; 0x64
 800b1cc:	86fb      	strh	r3, [r7, #54]	; 0x36

    ThrottlePercentage =  map(VehSpeed, 0, 100, 6200, 64000);
 800b1ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b1d0:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800b1d4:	9300      	str	r3, [sp, #0]
 800b1d6:	4610      	mov	r0, r2
 800b1d8:	2100      	movs	r1, #0
 800b1da:	2264      	movs	r2, #100	; 0x64
 800b1dc:	f641 0338 	movw	r3, #6200	; 0x1838
 800b1e0:	f7ff fa74 	bl	800a6cc <map>
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBDII_CAN[can_0x04].CAN_Data[3] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[THIRD_BYTE] = ThrottlePercentage;
 800b1e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	4b37      	ldr	r3, [pc, #220]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b1ee:	74da      	strb	r2, [r3, #19]
 800b1f0:	4b36      	ldr	r3, [pc, #216]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b1f2:	7cdb      	ldrb	r3, [r3, #19]
 800b1f4:	b2da      	uxtb	r2, r3
 800b1f6:	4b36      	ldr	r3, [pc, #216]	; (800b2d0 <process_Rx_CAN_0x13+0x2c8>)
 800b1f8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    OBDII_CAN[can_0x04].CAN_Data[2] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[FOURTH_BYTE] = (ThrottlePercentage >> 8);
 800b1fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b1fe:	0a1b      	lsrs	r3, r3, #8
 800b200:	b29b      	uxth	r3, r3
 800b202:	b2da      	uxtb	r2, r3
 800b204:	4b31      	ldr	r3, [pc, #196]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b206:	751a      	strb	r2, [r3, #20]
 800b208:	4b30      	ldr	r3, [pc, #192]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b20a:	7d1b      	ldrb	r3, [r3, #20]
 800b20c:	b2da      	uxtb	r2, r3
 800b20e:	4b30      	ldr	r3, [pc, #192]	; (800b2d0 <process_Rx_CAN_0x13+0x2c8>)
 800b210:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    VehicleSpeedglb = VehSpeed;
 800b214:	4a2f      	ldr	r2, [pc, #188]	; (800b2d4 <process_Rx_CAN_0x13+0x2cc>)
 800b216:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b218:	8013      	strh	r3, [r2, #0]

    if(VehSpeed)
 800b21a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01d      	beq.n	800b25c <process_Rx_CAN_0x13+0x254>
    	VehSpeed = 104.11* VehSpeed + 226.99;
 800b220:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b222:	4618      	mov	r0, r3
 800b224:	f005 fe72 	bl	8010f0c <__aeabi_i2d>
 800b228:	4602      	mov	r2, r0
 800b22a:	460b      	mov	r3, r1
 800b22c:	4610      	mov	r0, r2
 800b22e:	4619      	mov	r1, r3
 800b230:	a317      	add	r3, pc, #92	; (adr r3, 800b290 <process_Rx_CAN_0x13+0x288>)
 800b232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b236:	f005 fecf 	bl	8010fd8 <__aeabi_dmul>
 800b23a:	4602      	mov	r2, r0
 800b23c:	460b      	mov	r3, r1
 800b23e:	4610      	mov	r0, r2
 800b240:	4619      	mov	r1, r3
 800b242:	a315      	add	r3, pc, #84	; (adr r3, 800b298 <process_Rx_CAN_0x13+0x290>)
 800b244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b248:	f005 fd14 	bl	8010c74 <__adddf3>
 800b24c:	4602      	mov	r2, r0
 800b24e:	460b      	mov	r3, r1
 800b250:	4610      	mov	r0, r2
 800b252:	4619      	mov	r1, r3
 800b254:	f006 f982 	bl	801155c <__aeabi_d2uiz>
 800b258:	4603      	mov	r3, r0
 800b25a:	86fb      	strh	r3, [r7, #54]	; 0x36

    OBDII_CAN[can_0x04].CAN_Data[5] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[FIFTH_BYTE] = (VehSpeed);
 800b25c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b25e:	b2da      	uxtb	r2, r3
 800b260:	4b1a      	ldr	r3, [pc, #104]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b262:	725a      	strb	r2, [r3, #9]
 800b264:	4b19      	ldr	r3, [pc, #100]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b266:	7a5b      	ldrb	r3, [r3, #9]
 800b268:	b2da      	uxtb	r2, r3
 800b26a:	4b19      	ldr	r3, [pc, #100]	; (800b2d0 <process_Rx_CAN_0x13+0x2c8>)
 800b26c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OBDII_CAN[can_0x04].CAN_Data[4] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[SIXTH_BYTE] = (VehSpeed >> 8U);
 800b270:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b272:	0a1b      	lsrs	r3, r3, #8
 800b274:	b29b      	uxth	r3, r3
 800b276:	b2da      	uxtb	r2, r3
 800b278:	4b14      	ldr	r3, [pc, #80]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b27a:	729a      	strb	r2, [r3, #10]
 800b27c:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <process_Rx_CAN_0x13+0x2c4>)
 800b27e:	7a9b      	ldrb	r3, [r3, #10]
 800b280:	b2da      	uxtb	r2, r3
 800b282:	4b13      	ldr	r3, [pc, #76]	; (800b2d0 <process_Rx_CAN_0x13+0x2c8>)
 800b284:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    //VehicleSpeedglb = VehSpeed;
}
 800b288:	3738      	adds	r7, #56	; 0x38
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	3d70a3d7 	.word	0x3d70a3d7
 800b294:	405a070a 	.word	0x405a070a
 800b298:	147ae148 	.word	0x147ae148
 800b29c:	406c5fae 	.word	0x406c5fae
 800b2a0:	08014048 	.word	0x08014048
 800b2a4:	1ffe9498 	.word	0x1ffe9498
 800b2a8:	1ffe8820 	.word	0x1ffe8820
 800b2ac:	1fff4854 	.word	0x1fff4854
 800b2b0:	1fff487a 	.word	0x1fff487a
 800b2b4:	1fff483e 	.word	0x1fff483e
 800b2b8:	66666667 	.word	0x66666667
 800b2bc:	1fff48e4 	.word	0x1fff48e4
 800b2c0:	1fff48ca 	.word	0x1fff48ca
 800b2c4:	1fff4918 	.word	0x1fff4918
 800b2c8:	1fff486c 	.word	0x1fff486c
 800b2cc:	1ffe92f8 	.word	0x1ffe92f8
 800b2d0:	1ffe9238 	.word	0x1ffe9238
 800b2d4:	1fff4852 	.word	0x1fff4852

0800b2d8 <process_Rx_CAN_0x12>:

void process_Rx_CAN_0x12(void)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b084      	sub	sp, #16
 800b2dc:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800b2de:	4b0f      	ldr	r3, [pc, #60]	; (800b31c <process_Rx_CAN_0x12+0x44>)
 800b2e0:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800b2e2:	2314      	movs	r3, #20
 800b2e4:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x12].CAN_Data[ZERO_BYTE];
 800b2e6:	4b0e      	ldr	r3, [pc, #56]	; (800b320 <process_Rx_CAN_0x12+0x48>)
 800b2e8:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b2ea:	7afb      	ldrb	r3, [r7, #11]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	3302      	adds	r3, #2
 800b2f0:	009b      	lsls	r3, r3, #2
 800b2f2:	4413      	add	r3, r2
 800b2f4:	685b      	ldr	r3, [r3, #4]
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	6879      	ldr	r1, [r7, #4]
 800b2fa:	f7ff fcc5 	bl	800ac88 <CAN_NODE_MO_ReadData>

    Mcu_Temp_Irp = Irp_MCU_Status_29bit->MCU_temp;
 800b2fe:	4b09      	ldr	r3, [pc, #36]	; (800b324 <process_Rx_CAN_0x12+0x4c>)
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	78db      	ldrb	r3, [r3, #3]
 800b304:	b29a      	uxth	r2, r3
 800b306:	4b08      	ldr	r3, [pc, #32]	; (800b328 <process_Rx_CAN_0x12+0x50>)
 800b308:	801a      	strh	r2, [r3, #0]
    Motor_Temp_Irp = Irp_MCU_Status_29bit->Motor_temp;
 800b30a:	4b06      	ldr	r3, [pc, #24]	; (800b324 <process_Rx_CAN_0x12+0x4c>)
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	789b      	ldrb	r3, [r3, #2]
 800b310:	b29a      	uxth	r2, r3
 800b312:	4b06      	ldr	r3, [pc, #24]	; (800b32c <process_Rx_CAN_0x12+0x54>)
 800b314:	801a      	strh	r2, [r3, #0]
}
 800b316:	3710      	adds	r7, #16
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}
 800b31c:	08014048 	.word	0x08014048
 800b320:	1ffe948c 	.word	0x1ffe948c
 800b324:	1ffe8828 	.word	0x1ffe8828
 800b328:	1fff4862 	.word	0x1fff4862
 800b32c:	1fff4914 	.word	0x1fff4914

0800b330 <process_Rx_CAN_0x30>:

void process_Rx_CAN_0x30(void)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800b336:	4b09      	ldr	r3, [pc, #36]	; (800b35c <process_Rx_CAN_0x30+0x2c>)
 800b338:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800b33a:	2315      	movs	r3, #21
 800b33c:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x30].CAN_Data[ZERO_BYTE];
 800b33e:	4b08      	ldr	r3, [pc, #32]	; (800b360 <process_Rx_CAN_0x30+0x30>)
 800b340:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b342:	7afb      	ldrb	r3, [r7, #11]
 800b344:	68fa      	ldr	r2, [r7, #12]
 800b346:	3302      	adds	r3, #2
 800b348:	009b      	lsls	r3, r3, #2
 800b34a:	4413      	add	r3, r2
 800b34c:	685b      	ldr	r3, [r3, #4]
 800b34e:	4618      	mov	r0, r3
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	f7ff fc99 	bl	800ac88 <CAN_NODE_MO_ReadData>
}
 800b356:	3710      	adds	r7, #16
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	08014048 	.word	0x08014048
 800b360:	1ffe94bc 	.word	0x1ffe94bc

0800b364 <Irp_Tx_29bit>:


void Irp_Tx_29bit(void)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	af00      	add	r7, sp, #0
	CAN_Tx_id0x10();
 800b368:	f7ff fd1c 	bl	800ada4 <CAN_Tx_id0x10>
	CAN_Tx_id0x20();
 800b36c:	f7ff fd52 	bl	800ae14 <CAN_Tx_id0x20>
	CAN_Tx_id0x21();
 800b370:	f7ff fd6e 	bl	800ae50 <CAN_Tx_id0x21>
}
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop

0800b378 <Irp_Rx_29bit>:

void Irp_Rx_29bit(void)
{
 800b378:	b580      	push	{r7, lr}
 800b37a:	af00      	add	r7, sp, #0
	CAN_Rx_id0x13();
 800b37c:	f7ff fd88 	bl	800ae90 <CAN_Rx_id0x13>
	CAN_Rx_id0x12();
 800b380:	f7ff fdc4 	bl	800af0c <CAN_Rx_id0x12>
	CAN_Rx_id0x30();
 800b384:	f7ff fe00 	bl	800af88 <CAN_Rx_id0x30>
}
 800b388:	bd80      	pop	{r7, pc}
 800b38a:	bf00      	nop

0800b38c <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	683a      	ldr	r2, [r7, #0]
 800b39c:	61da      	str	r2, [r3, #28]
}
 800b39e:	370c      	adds	r7, #12
 800b3a0:	46bd      	mov	sp, r7
 800b3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a6:	4770      	bx	lr

0800b3a8 <Process_CAN_id0x18FF50E5>:
			       }
}


void Process_CAN_id0x18FF50E5(void)
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
	static once = 0, ccount = 200;
	int test = 0;
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	60fb      	str	r3, [r7, #12]
uint8_t *tempData, mo_index;
		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800b3b2:	4b23      	ldr	r3, [pc, #140]	; (800b440 <Process_CAN_id0x18FF50E5+0x98>)
 800b3b4:	60bb      	str	r3, [r7, #8]

		mo_index = 28;
 800b3b6:	231c      	movs	r3, #28
 800b3b8:	71fb      	strb	r3, [r7, #7]

		tempData = &obc_madhura[can_0x18FF50E5].CAN_Data[0];
 800b3ba:	4b22      	ldr	r3, [pc, #136]	; (800b444 <Process_CAN_id0x18FF50E5+0x9c>)
 800b3bc:	603b      	str	r3, [r7, #0]

		//read data to external buffer
		CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800b3be:	79fb      	ldrb	r3, [r7, #7]
 800b3c0:	68ba      	ldr	r2, [r7, #8]
 800b3c2:	3302      	adds	r3, #2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	6839      	ldr	r1, [r7, #0]
 800b3ce:	f7ff fc5b 	bl	800ac88 <CAN_NODE_MO_ReadData>

		//if(((obc_madhura[can_0x18FF50E5].CAN_Data[4] & 0x1f) == 0x00) && (obc_madhura[can_0x18FF50E5].CAN_Data[2]))
		if(charging_started && (!VehicleSpeedglb))
 800b3d2:	4b1d      	ldr	r3, [pc, #116]	; (800b448 <Process_CAN_id0x18FF50E5+0xa0>)
 800b3d4:	781b      	ldrb	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d01a      	beq.n	800b410 <Process_CAN_id0x18FF50E5+0x68>
 800b3da:	4b1c      	ldr	r3, [pc, #112]	; (800b44c <Process_CAN_id0x18FF50E5+0xa4>)
 800b3dc:	881b      	ldrh	r3, [r3, #0]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d116      	bne.n	800b410 <Process_CAN_id0x18FF50E5+0x68>
		{
			//if( obc_madhura[can_0x18FF50E5].CAN_Data[2])
			{
				//Vcu_InPuts.charger_connect_IN = 1;
				if(once == 0)
 800b3e2:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <Process_CAN_id0x18FF50E5+0xa8>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d10b      	bne.n	800b402 <Process_CAN_id0x18FF50E5+0x5a>
				{
					digital_io_setoutputhigh(&ORVM_PWR_OUT_D);
 800b3ea:	481a      	ldr	r0, [pc, #104]	; (800b454 <Process_CAN_id0x18FF50E5+0xac>)
 800b3ec:	f004 fff2 	bl	80103d4 <digital_io_setoutputhigh>
					Delay(200);
 800b3f0:	20c8      	movs	r0, #200	; 0xc8
 800b3f2:	f005 f81f 	bl	8010434 <Delay>
					//Vcu_InPuts.charger_connect_IN = 1;// changed this and added below
					test = 1;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	60fb      	str	r3, [r7, #12]
					once = 1;
 800b3fa:	4b15      	ldr	r3, [pc, #84]	; (800b450 <Process_CAN_id0x18FF50E5+0xa8>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	601a      	str	r2, [r3, #0]
 800b400:	e002      	b.n	800b408 <Process_CAN_id0x18FF50E5+0x60>
				}
				else
				{
					digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800b402:	4814      	ldr	r0, [pc, #80]	; (800b454 <Process_CAN_id0x18FF50E5+0xac>)
 800b404:	f004 ffb6 	bl	8010374 <digital_io_setoutputlow>
					//Vcu_InPuts.charger_connect_IN = 0;
				}
			}
			ccount = 200;
 800b408:	4b13      	ldr	r3, [pc, #76]	; (800b458 <Process_CAN_id0x18FF50E5+0xb0>)
 800b40a:	22c8      	movs	r2, #200	; 0xc8
 800b40c:	601a      	str	r2, [r3, #0]
 800b40e:	e013      	b.n	800b438 <Process_CAN_id0x18FF50E5+0x90>
		}
		else if((--ccount) <= 0)
 800b410:	4b11      	ldr	r3, [pc, #68]	; (800b458 <Process_CAN_id0x18FF50E5+0xb0>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3b01      	subs	r3, #1
 800b416:	4a10      	ldr	r2, [pc, #64]	; (800b458 <Process_CAN_id0x18FF50E5+0xb0>)
 800b418:	6013      	str	r3, [r2, #0]
 800b41a:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <Process_CAN_id0x18FF50E5+0xb0>)
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	dc0a      	bgt.n	800b438 <Process_CAN_id0x18FF50E5+0x90>
		{
			test = 0;
 800b422:	2300      	movs	r3, #0
 800b424:	60fb      	str	r3, [r7, #12]
			once = 0;
 800b426:	4b0a      	ldr	r3, [pc, #40]	; (800b450 <Process_CAN_id0x18FF50E5+0xa8>)
 800b428:	2200      	movs	r2, #0
 800b42a:	601a      	str	r2, [r3, #0]
			digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800b42c:	4809      	ldr	r0, [pc, #36]	; (800b454 <Process_CAN_id0x18FF50E5+0xac>)
 800b42e:	f004 ffa1 	bl	8010374 <digital_io_setoutputlow>
			//Vcu_InPuts.charger_connect_IN = 0; // change this and add below
			ccount = 200;
 800b432:	4b09      	ldr	r3, [pc, #36]	; (800b458 <Process_CAN_id0x18FF50E5+0xb0>)
 800b434:	22c8      	movs	r2, #200	; 0xc8
 800b436:	601a      	str	r2, [r3, #0]
		}

	//7.0,7.1
}
 800b438:	3710      	adds	r7, #16
 800b43a:	46bd      	mov	sp, r7
 800b43c:	bd80      	pop	{r7, pc}
 800b43e:	bf00      	nop
 800b440:	08013e54 	.word	0x08013e54
 800b444:	1ffe9504 	.word	0x1ffe9504
 800b448:	1fff489c 	.word	0x1fff489c
 800b44c:	1fff4852 	.word	0x1fff4852
 800b450:	1fff44cc 	.word	0x1fff44cc
 800b454:	1fff42e0 	.word	0x1fff42e0
 800b458:	1ffe950c 	.word	0x1ffe950c

0800b45c <Read_CAN_id0x18FF50E5>:

void Read_CAN_id0x18FF50E5(void)
{
 800b45c:	b590      	push	{r4, r7, lr}
 800b45e:	b085      	sub	sp, #20
 800b460:	af00      	add	r7, sp, #0
	static uint64_t count_in = 0;
	uint8_t test;
			CAN_NODE_STATUS_t status, receive_status;
			XMC_CAN_MO_t *MO_Ptr;
			uint8_t mo_index;
			const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800b462:	4b32      	ldr	r3, [pc, #200]	; (800b52c <Read_CAN_id0x18FF50E5+0xd0>)
 800b464:	60fb      	str	r3, [r7, #12]

			mo_index = 28;
 800b466:	231c      	movs	r3, #28
 800b468:	72fb      	strb	r3, [r7, #11]

			MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800b46a:	7afb      	ldrb	r3, [r7, #11]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	3302      	adds	r3, #2
 800b470:	009b      	lsls	r3, r3, #2
 800b472:	4413      	add	r3, r2
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	607b      	str	r3, [r7, #4]

			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800b47a:	7afb      	ldrb	r3, [r7, #11]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	3302      	adds	r3, #2
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	4413      	add	r3, r2
 800b484:	685b      	ldr	r3, [r3, #4]
 800b486:	4618      	mov	r0, r3
 800b488:	f7fd fd6e 	bl	8008f68 <CAN_NODE_MO_GetStatus>
 800b48c:	4603      	mov	r3, r0
 800b48e:	70fb      	strb	r3, [r7, #3]

			//Vcu_InPuts.charger_connect_IN = 0;
			//Check receive pending status
			if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800b490:	78fb      	ldrb	r3, [r7, #3]
 800b492:	f003 0301 	and.w	r3, r3, #1
 800b496:	2b00      	cmp	r3, #0
 800b498:	d02b      	beq.n	800b4f2 <Read_CAN_id0x18FF50E5+0x96>
			{
			  // Clear the flag
			  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800b49a:	6878      	ldr	r0, [r7, #4]
 800b49c:	2101      	movs	r1, #1
 800b49e:	f7ff ff75 	bl	800b38c <XMC_CAN_MO_ResetStatus>
			  // Read the received Message object
			  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800b4a2:	7afb      	ldrb	r3, [r7, #11]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	3302      	adds	r3, #2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4413      	add	r3, r2
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fd fd28 	bl	8008f04 <CAN_NODE_MO_Receive>
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	70bb      	strb	r3, [r7, #2]

			  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800b4b8:	78bb      	ldrb	r3, [r7, #2]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10c      	bne.n	800b4d8 <Read_CAN_id0x18FF50E5+0x7c>
			  {
			    // message object receive success.
				  test = 1;
 800b4be:	2301      	movs	r3, #1
 800b4c0:	707b      	strb	r3, [r7, #1]
				  //Process_CAN_id0x18FF50E5();
				  count_in = 0;
 800b4c2:	491b      	ldr	r1, [pc, #108]	; (800b530 <Read_CAN_id0x18FF50E5+0xd4>)
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	f04f 0300 	mov.w	r3, #0
 800b4cc:	e9c1 2300 	strd	r2, r3, [r1]
				  charging_detect = 1; // here added
 800b4d0:	4b18      	ldr	r3, [pc, #96]	; (800b534 <Read_CAN_id0x18FF50E5+0xd8>)
 800b4d2:	2201      	movs	r2, #1
 800b4d4:	701a      	strb	r2, [r3, #0]
 800b4d6:	e001      	b.n	800b4dc <Read_CAN_id0x18FF50E5+0x80>
			  }
			  else
			  {
			    // message object failed to receive.
				  test = 0;
 800b4d8:	2300      	movs	r3, #0
 800b4da:	707b      	strb	r3, [r7, #1]
			  }
			  count_in = 0;
 800b4dc:	4914      	ldr	r1, [pc, #80]	; (800b530 <Read_CAN_id0x18FF50E5+0xd4>)
 800b4de:	f04f 0200 	mov.w	r2, #0
 800b4e2:	f04f 0300 	mov.w	r3, #0
 800b4e6:	e9c1 2300 	strd	r2, r3, [r1]
			  Vcu_InPuts.charger_connect_IN = 1; // here added
 800b4ea:	4b13      	ldr	r3, [pc, #76]	; (800b538 <Read_CAN_id0x18FF50E5+0xdc>)
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	709a      	strb	r2, [r3, #2]
 800b4f0:	e016      	b.n	800b520 <Read_CAN_id0x18FF50E5+0xc4>
			}
			else
			{
				if(count_in++ > 30)
 800b4f2:	4b0f      	ldr	r3, [pc, #60]	; (800b530 <Read_CAN_id0x18FF50E5+0xd4>)
 800b4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4f8:	1c50      	adds	r0, r2, #1
 800b4fa:	f143 0100 	adc.w	r1, r3, #0
 800b4fe:	4c0c      	ldr	r4, [pc, #48]	; (800b530 <Read_CAN_id0x18FF50E5+0xd4>)
 800b500:	e9c4 0100 	strd	r0, r1, [r4]
 800b504:	2b00      	cmp	r3, #0
 800b506:	bf08      	it	eq
 800b508:	2a1f      	cmpeq	r2, #31
 800b50a:	d309      	bcc.n	800b520 <Read_CAN_id0x18FF50E5+0xc4>
				{
					Vcu_InPuts.charger_connect_IN = 0; // here added
 800b50c:	4b0a      	ldr	r3, [pc, #40]	; (800b538 <Read_CAN_id0x18FF50E5+0xdc>)
 800b50e:	2200      	movs	r2, #0
 800b510:	709a      	strb	r2, [r3, #2]
					count_in = 0;
 800b512:	4907      	ldr	r1, [pc, #28]	; (800b530 <Read_CAN_id0x18FF50E5+0xd4>)
 800b514:	f04f 0200 	mov.w	r2, #0
 800b518:	f04f 0300 	mov.w	r3, #0
 800b51c:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

			Process_CAN_id0x18FF50E5();
 800b520:	f7ff ff42 	bl	800b3a8 <Process_CAN_id0x18FF50E5>
}
 800b524:	3714      	adds	r7, #20
 800b526:	46bd      	mov	sp, r7
 800b528:	bd90      	pop	{r4, r7, pc}
 800b52a:	bf00      	nop
 800b52c:	08013e54 	.word	0x08013e54
 800b530:	1fff44d0 	.word	0x1fff44d0
 800b534:	1fff5290 	.word	0x1fff5290
 800b538:	1fff5168 	.word	0x1fff5168

0800b53c <Process_4G_Event_Data>:

vcu_fleet_fleet_10_sec TD1;
uint8_t Eventbuffer_4Gcomm[512]={0};

void Process_4G_Event_Data(void)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	af00      	add	r7, sp, #0

	memset(&TD1,0,sizeof(TD1));
 800b540:	4861      	ldr	r0, [pc, #388]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b542:	2100      	movs	r1, #0
 800b544:	2264      	movs	r2, #100	; 0x64
 800b546:	f006 fb80 	bl	8011c4a <memset>
	TD1.car_id = 10;
 800b54a:	4b5f      	ldr	r3, [pc, #380]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	f042 020a 	orr.w	r2, r2, #10
 800b552:	701a      	strb	r2, [r3, #0]
 800b554:	2200      	movs	r2, #0
 800b556:	705a      	strb	r2, [r3, #1]
 800b558:	2200      	movs	r2, #0
 800b55a:	709a      	strb	r2, [r3, #2]
 800b55c:	2200      	movs	r2, #0
 800b55e:	70da      	strb	r2, [r3, #3]
	TD1.trip_id = 81050;
 800b560:	4b59      	ldr	r3, [pc, #356]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b562:	2200      	movs	r2, #0
 800b564:	f062 0265 	orn	r2, r2, #101	; 0x65
 800b568:	711a      	strb	r2, [r3, #4]
 800b56a:	2200      	movs	r2, #0
 800b56c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800b570:	715a      	strb	r2, [r3, #5]
 800b572:	2200      	movs	r2, #0
 800b574:	f042 0201 	orr.w	r2, r2, #1
 800b578:	719a      	strb	r2, [r3, #6]
 800b57a:	2200      	movs	r2, #0
 800b57c:	71da      	strb	r2, [r3, #7]
	TD1.identifier = 318;
 800b57e:	4b52      	ldr	r3, [pc, #328]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b580:	2200      	movs	r2, #0
 800b582:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 800b586:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800b58a:	2200      	movs	r2, #0
 800b58c:	f042 0201 	orr.w	r2, r2, #1
 800b590:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b594:	2200      	movs	r2, #0
 800b596:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800b59a:	2200      	movs	r2, #0
 800b59c:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
//	TD1.rtc.days = current_time.days;
//	TD1.rtc.day_of_week = current_time.daysofweek;
//	TD1.rtc.hours = current_time.hours;
//	TD1.rtc.minutes = current_time.minutes;
//	TD1.rtc.seconds = current_time.seconds;
	TD1.hv_soc_calculated =Mapped_BMS_SOC;
 800b5a0:	4b4a      	ldr	r3, [pc, #296]	; (800b6cc <Process_4G_Event_Data+0x190>)
 800b5a2:	781b      	ldrb	r3, [r3, #0]
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	4b48      	ldr	r3, [pc, #288]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5a8:	619a      	str	r2, [r3, #24]
	TD1.soc = ((int)(CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0]);
 800b5aa:	4b49      	ldr	r3, [pc, #292]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b5ac:	7c5b      	ldrb	r3, [r3, #17]
 800b5ae:	021b      	lsls	r3, r3, #8
 800b5b0:	4a47      	ldr	r2, [pc, #284]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b5b2:	7c12      	ldrb	r2, [r2, #16]
 800b5b4:	4313      	orrs	r3, r2
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	4b43      	ldr	r3, [pc, #268]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5ba:	615a      	str	r2, [r3, #20]
	TD1.battery_temp=BMS_Avg_temp;
 800b5bc:	4b45      	ldr	r3, [pc, #276]	; (800b6d4 <Process_4G_Event_Data+0x198>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	461a      	mov	r2, r3
 800b5c2:	4b41      	ldr	r3, [pc, #260]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5c4:	61da      	str	r2, [r3, #28]
	TD1.odometer = CalOdometer();//52;//will get from cluster
 800b5c6:	f000 f989 	bl	800b8dc <CalOdometer>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b3e      	ldr	r3, [pc, #248]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5ce:	629a      	str	r2, [r3, #40]	; 0x28
	TD1.charging_indicator = Vcu_InPuts.charger_connect_IN;
 800b5d0:	4b41      	ldr	r3, [pc, #260]	; (800b6d8 <Process_4G_Event_Data+0x19c>)
 800b5d2:	789b      	ldrb	r3, [r3, #2]
 800b5d4:	461a      	mov	r2, r3
 800b5d6:	4b3c      	ldr	r3, [pc, #240]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5d8:	639a      	str	r2, [r3, #56]	; 0x38
	TD1.dte = ((TD1.soc)*2);
 800b5da:	4b3b      	ldr	r3, [pc, #236]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	005b      	lsls	r3, r3, #1
 800b5e0:	4a39      	ldr	r2, [pc, #228]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5e2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TD1.mcu_temp_1=Mcu_Temp_Irp;
 800b5e4:	4b3d      	ldr	r3, [pc, #244]	; (800b6dc <Process_4G_Event_Data+0x1a0>)
 800b5e6:	881b      	ldrh	r3, [r3, #0]
 800b5e8:	461a      	mov	r2, r3
 800b5ea:	4b37      	ldr	r3, [pc, #220]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5ec:	621a      	str	r2, [r3, #32]
	TD1.ac_status = AC_ON_4g;//CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800b5ee:	4b3c      	ldr	r3, [pc, #240]	; (800b6e0 <Process_4G_Event_Data+0x1a4>)
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4b34      	ldr	r3, [pc, #208]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b5f6:	641a      	str	r2, [r3, #64]	; 0x40
	TD1.min_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b5f8:	4b35      	ldr	r3, [pc, #212]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b5fa:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b5fe:	021b      	lsls	r3, r3, #8
 800b600:	4a33      	ldr	r2, [pc, #204]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b602:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b606:	4313      	orrs	r3, r2
 800b608:	461a      	mov	r2, r3
 800b60a:	4b2f      	ldr	r3, [pc, #188]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b60c:	645a      	str	r2, [r3, #68]	; 0x44
	TD1.max_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b60e:	4b30      	ldr	r3, [pc, #192]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b610:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	4a2e      	ldr	r2, [pc, #184]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b618:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b61c:	4313      	orrs	r3, r2
 800b61e:	461a      	mov	r2, r3
 800b620:	4b29      	ldr	r3, [pc, #164]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b622:	649a      	str	r2, [r3, #72]	; 0x48
	TD1.min_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[2]));
 800b624:	4b2a      	ldr	r3, [pc, #168]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b626:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b62a:	021b      	lsls	r3, r3, #8
 800b62c:	4a28      	ldr	r2, [pc, #160]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b62e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800b632:	4313      	orrs	r3, r2
 800b634:	461a      	mov	r2, r3
 800b636:	4b24      	ldr	r3, [pc, #144]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b638:	64da      	str	r2, [r3, #76]	; 0x4c
	TD1.max_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0]));
 800b63a:	4b25      	ldr	r3, [pc, #148]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b63c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b640:	021b      	lsls	r3, r3, #8
 800b642:	4a23      	ldr	r2, [pc, #140]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b644:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800b648:	4313      	orrs	r3, r2
 800b64a:	461a      	mov	r2, r3
 800b64c:	4b1e      	ldr	r3, [pc, #120]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b64e:	651a      	str	r2, [r3, #80]	; 0x50
	TD1.pack_voltage = ((int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]));
 800b650:	4b1f      	ldr	r3, [pc, #124]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b652:	7ddb      	ldrb	r3, [r3, #23]
 800b654:	021b      	lsls	r3, r3, #8
 800b656:	4a1e      	ldr	r2, [pc, #120]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b658:	7d92      	ldrb	r2, [r2, #22]
 800b65a:	4313      	orrs	r3, r2
 800b65c:	461a      	mov	r2, r3
 800b65e:	4b1a      	ldr	r3, [pc, #104]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b660:	631a      	str	r2, [r3, #48]	; 0x30
	TD1.pack_current = PackCurrent;//((int)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
 800b662:	4b20      	ldr	r3, [pc, #128]	; (800b6e4 <Process_4G_Event_Data+0x1a8>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a18      	ldr	r2, [pc, #96]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b668:	6353      	str	r3, [r2, #52]	; 0x34
	TD1.longitude = GPS_data_val.longitude;
 800b66a:	4b1f      	ldr	r3, [pc, #124]	; (800b6e8 <Process_4G_Event_Data+0x1ac>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	4a16      	ldr	r2, [pc, #88]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b670:	6113      	str	r3, [r2, #16]
	TD1.latitude = GPS_data_val.latitude ;
 800b672:	4b1d      	ldr	r3, [pc, #116]	; (800b6e8 <Process_4G_Event_Data+0x1ac>)
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	4a14      	ldr	r2, [pc, #80]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b678:	60d3      	str	r3, [r2, #12]
	TD1.altitude = GPS_data_val.altitude ;
 800b67a:	4b1b      	ldr	r3, [pc, #108]	; (800b6e8 <Process_4G_Event_Data+0x1ac>)
 800b67c:	689b      	ldr	r3, [r3, #8]
 800b67e:	461a      	mov	r2, r3
 800b680:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b682:	655a      	str	r2, [r3, #84]	; 0x54
	TD1.direction = GPS_data_val.direction;
 800b684:	4b18      	ldr	r3, [pc, #96]	; (800b6e8 <Process_4G_Event_Data+0x1ac>)
 800b686:	68db      	ldr	r3, [r3, #12]
 800b688:	461a      	mov	r2, r3
 800b68a:	4b0f      	ldr	r3, [pc, #60]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b68c:	659a      	str	r2, [r3, #88]	; 0x58
	TD1.speed = speed_4g;
 800b68e:	4b17      	ldr	r3, [pc, #92]	; (800b6ec <Process_4G_Event_Data+0x1b0>)
 800b690:	881b      	ldrh	r3, [r3, #0]
 800b692:	461a      	mov	r2, r3
 800b694:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b696:	625a      	str	r2, [r3, #36]	; 0x24
	TD1.soh = (int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[2]);
 800b698:	4b0d      	ldr	r3, [pc, #52]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b69a:	7cdb      	ldrb	r3, [r3, #19]
 800b69c:	021b      	lsls	r3, r3, #8
 800b69e:	4a0c      	ldr	r2, [pc, #48]	; (800b6d0 <Process_4G_Event_Data+0x194>)
 800b6a0:	7c92      	ldrb	r2, [r2, #18]
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	461a      	mov	r2, r3
 800b6a6:	4b08      	ldr	r3, [pc, #32]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b6a8:	65da      	str	r2, [r3, #92]	; 0x5c
    TD1.timestamp = epoch;
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <Process_4G_Event_Data+0x1b4>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	4a06      	ldr	r2, [pc, #24]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b6b0:	6093      	str	r3, [r2, #8]
    TD1.ambient_temp=  ambient_temp;
 800b6b2:	4b10      	ldr	r3, [pc, #64]	; (800b6f4 <Process_4G_Event_Data+0x1b8>)
 800b6b4:	edd3 7a00 	vldr	s15, [r3]
 800b6b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b6bc:	ee17 2a90 	vmov	r2, s15
 800b6c0:	4b01      	ldr	r3, [pc, #4]	; (800b6c8 <Process_4G_Event_Data+0x18c>)
 800b6c2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b6c4:	bd80      	pop	{r7, pc}
 800b6c6:	bf00      	nop
 800b6c8:	1fff5298 	.word	0x1fff5298
 800b6cc:	1fff4840 	.word	0x1fff4840
 800b6d0:	1ffe9274 	.word	0x1ffe9274
 800b6d4:	1fff4908 	.word	0x1fff4908
 800b6d8:	1fff5168 	.word	0x1fff5168
 800b6dc:	1fff4862 	.word	0x1fff4862
 800b6e0:	1fff4850 	.word	0x1fff4850
 800b6e4:	1fff4858 	.word	0x1fff4858
 800b6e8:	1fff48d4 	.word	0x1fff48d4
 800b6ec:	1fff486c 	.word	0x1fff486c
 800b6f0:	1fff482c 	.word	0x1fff482c
 800b6f4:	1fff4408 	.word	0x1fff4408

0800b6f8 <set_RTC>:
	//pb_ostream_t stream1;

	//stream1 =  pb_ostream_from_buffer(Eventbuffer_4Gcomm,sizeof(Eventbuffer_4Gcomm));
	//pb_encode(&stream1,vcu_fleet_fleet_10_sec_fields, &TD1);
void set_RTC(void)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b08a      	sub	sp, #40	; 0x28
 800b6fc:	af00      	add	r7, sp, #0
	uint8_t Timebuf[35]={0};
 800b6fe:	1d3b      	adds	r3, r7, #4
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
 800b704:	3304      	adds	r3, #4
 800b706:	2200      	movs	r2, #0
 800b708:	601a      	str	r2, [r3, #0]
 800b70a:	3304      	adds	r3, #4
 800b70c:	2200      	movs	r2, #0
 800b70e:	601a      	str	r2, [r3, #0]
 800b710:	3304      	adds	r3, #4
 800b712:	2200      	movs	r2, #0
 800b714:	601a      	str	r2, [r3, #0]
 800b716:	3304      	adds	r3, #4
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
 800b71c:	3304      	adds	r3, #4
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]
 800b722:	3304      	adds	r3, #4
 800b724:	2200      	movs	r2, #0
 800b726:	601a      	str	r2, [r3, #0]
 800b728:	3304      	adds	r3, #4
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	3304      	adds	r3, #4
 800b730:	2200      	movs	r2, #0
 800b732:	801a      	strh	r2, [r3, #0]
 800b734:	3302      	adds	r3, #2
 800b736:	2200      	movs	r2, #0
 800b738:	701a      	strb	r2, [r3, #0]
 800b73a:	3301      	adds	r3, #1
	mod_getCurrentTime(Timebuf);
 800b73c:	1d3b      	adds	r3, r7, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f002 fa32 	bl	800dba8 <mod_getCurrentTime>
	timeval.year = (((Timebuf[0]-'0')*10)+(Timebuf[1]-'0'));
 800b744:	793b      	ldrb	r3, [r7, #4]
 800b746:	3b30      	subs	r3, #48	; 0x30
 800b748:	b29b      	uxth	r3, r3
 800b74a:	461a      	mov	r2, r3
 800b74c:	0092      	lsls	r2, r2, #2
 800b74e:	4413      	add	r3, r2
 800b750:	005b      	lsls	r3, r3, #1
 800b752:	b29a      	uxth	r2, r3
 800b754:	797b      	ldrb	r3, [r7, #5]
 800b756:	b29b      	uxth	r3, r3
 800b758:	4413      	add	r3, r2
 800b75a:	b29b      	uxth	r3, r3
 800b75c:	3b30      	subs	r3, #48	; 0x30
 800b75e:	b29a      	uxth	r2, r3
 800b760:	4b3b      	ldr	r3, [pc, #236]	; (800b850 <set_RTC+0x158>)
 800b762:	80da      	strh	r2, [r3, #6]
	timeval.month = (((Timebuf[3]-'0')*10)+(Timebuf[4]-'0'));
 800b764:	79fb      	ldrb	r3, [r7, #7]
 800b766:	3b30      	subs	r3, #48	; 0x30
 800b768:	b2db      	uxtb	r3, r3
 800b76a:	461a      	mov	r2, r3
 800b76c:	0092      	lsls	r2, r2, #2
 800b76e:	4413      	add	r3, r2
 800b770:	005b      	lsls	r3, r3, #1
 800b772:	b2da      	uxtb	r2, r3
 800b774:	7a3b      	ldrb	r3, [r7, #8]
 800b776:	4413      	add	r3, r2
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	3b30      	subs	r3, #48	; 0x30
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	f003 030f 	and.w	r3, r3, #15
 800b782:	b2d9      	uxtb	r1, r3
 800b784:	4a32      	ldr	r2, [pc, #200]	; (800b850 <set_RTC+0x158>)
 800b786:	7953      	ldrb	r3, [r2, #5]
 800b788:	f361 0303 	bfi	r3, r1, #0, #4
 800b78c:	7153      	strb	r3, [r2, #5]
	timeval.days = (((Timebuf[6]-'0')*10)+(Timebuf[7]-'0'));
 800b78e:	7abb      	ldrb	r3, [r7, #10]
 800b790:	3b30      	subs	r3, #48	; 0x30
 800b792:	b2db      	uxtb	r3, r3
 800b794:	461a      	mov	r2, r3
 800b796:	0092      	lsls	r2, r2, #2
 800b798:	4413      	add	r3, r2
 800b79a:	005b      	lsls	r3, r3, #1
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	7afb      	ldrb	r3, [r7, #11]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b2db      	uxtb	r3, r3
 800b7a4:	3b30      	subs	r3, #48	; 0x30
 800b7a6:	b2db      	uxtb	r3, r3
 800b7a8:	f003 031f 	and.w	r3, r3, #31
 800b7ac:	b2d9      	uxtb	r1, r3
 800b7ae:	4a28      	ldr	r2, [pc, #160]	; (800b850 <set_RTC+0x158>)
 800b7b0:	78d3      	ldrb	r3, [r2, #3]
 800b7b2:	f361 0304 	bfi	r3, r1, #0, #5
 800b7b6:	70d3      	strb	r3, [r2, #3]
	timeval.hours = (((Timebuf[9]-'0')*10)+(Timebuf[10]-'0'));
 800b7b8:	7b7b      	ldrb	r3, [r7, #13]
 800b7ba:	3b30      	subs	r3, #48	; 0x30
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	461a      	mov	r2, r3
 800b7c0:	0092      	lsls	r2, r2, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	005b      	lsls	r3, r3, #1
 800b7c6:	b2da      	uxtb	r2, r3
 800b7c8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ca:	4413      	add	r3, r2
 800b7cc:	b2db      	uxtb	r3, r3
 800b7ce:	3b30      	subs	r3, #48	; 0x30
 800b7d0:	b2db      	uxtb	r3, r3
 800b7d2:	f003 031f 	and.w	r3, r3, #31
 800b7d6:	b2d9      	uxtb	r1, r3
 800b7d8:	4a1d      	ldr	r2, [pc, #116]	; (800b850 <set_RTC+0x158>)
 800b7da:	7893      	ldrb	r3, [r2, #2]
 800b7dc:	f361 0304 	bfi	r3, r1, #0, #5
 800b7e0:	7093      	strb	r3, [r2, #2]
	timeval.minutes = (((Timebuf[12]-'0')*10)+(Timebuf[13]-'0'));
 800b7e2:	7c3b      	ldrb	r3, [r7, #16]
 800b7e4:	3b30      	subs	r3, #48	; 0x30
 800b7e6:	b2db      	uxtb	r3, r3
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	0092      	lsls	r2, r2, #2
 800b7ec:	4413      	add	r3, r2
 800b7ee:	005b      	lsls	r3, r3, #1
 800b7f0:	b2da      	uxtb	r2, r3
 800b7f2:	7c7b      	ldrb	r3, [r7, #17]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b2db      	uxtb	r3, r3
 800b7f8:	3b30      	subs	r3, #48	; 0x30
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b800:	b2d9      	uxtb	r1, r3
 800b802:	4a13      	ldr	r2, [pc, #76]	; (800b850 <set_RTC+0x158>)
 800b804:	7853      	ldrb	r3, [r2, #1]
 800b806:	f361 0305 	bfi	r3, r1, #0, #6
 800b80a:	7053      	strb	r3, [r2, #1]
	timeval.seconds = (((Timebuf[15]-'0')*10)+(Timebuf[16]-'0'));
 800b80c:	7cfb      	ldrb	r3, [r7, #19]
 800b80e:	3b30      	subs	r3, #48	; 0x30
 800b810:	b2db      	uxtb	r3, r3
 800b812:	461a      	mov	r2, r3
 800b814:	0092      	lsls	r2, r2, #2
 800b816:	4413      	add	r3, r2
 800b818:	005b      	lsls	r3, r3, #1
 800b81a:	b2da      	uxtb	r2, r3
 800b81c:	7d3b      	ldrb	r3, [r7, #20]
 800b81e:	4413      	add	r3, r2
 800b820:	b2db      	uxtb	r3, r3
 800b822:	3b30      	subs	r3, #48	; 0x30
 800b824:	b2db      	uxtb	r3, r3
 800b826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b82a:	b2d9      	uxtb	r1, r3
 800b82c:	4a08      	ldr	r2, [pc, #32]	; (800b850 <set_RTC+0x158>)
 800b82e:	7813      	ldrb	r3, [r2, #0]
 800b830:	f361 0305 	bfi	r3, r1, #0, #6
 800b834:	7013      	strb	r3, [r2, #0]
	RTC_Day = timeval.days;
 800b836:	4b06      	ldr	r3, [pc, #24]	; (800b850 <set_RTC+0x158>)
 800b838:	78db      	ldrb	r3, [r3, #3]
 800b83a:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b83e:	b2db      	uxtb	r3, r3
 800b840:	461a      	mov	r2, r3
 800b842:	4b04      	ldr	r3, [pc, #16]	; (800b854 <set_RTC+0x15c>)
 800b844:	701a      	strb	r2, [r3, #0]
	RTC_init();
 800b846:	f7f4 fe19 	bl	800047c <RTC_init>
}
 800b84a:	3728      	adds	r7, #40	; 0x28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	1fff47e8 	.word	0x1fff47e8
 800b854:	1fff44dc 	.word	0x1fff44dc

0800b858 <epoch_time>:

void epoch_time(void)
{	struct tm my_tm;
 800b858:	b580      	push	{r7, lr}
 800b85a:	b08a      	sub	sp, #40	; 0x28
 800b85c:	af00      	add	r7, sp, #0
	memset(&my_tm, 0, sizeof(my_tm));
 800b85e:	1d3b      	adds	r3, r7, #4
 800b860:	4618      	mov	r0, r3
 800b862:	2100      	movs	r1, #0
 800b864:	2224      	movs	r2, #36	; 0x24
 800b866:	f006 f9f0 	bl	8011c4a <memset>
	RTC_GetTime(&current_time);
 800b86a:	481a      	ldr	r0, [pc, #104]	; (800b8d4 <epoch_time+0x7c>)
 800b86c:	f7fc f9fa 	bl	8007c64 <RTC_GetTime>
	my_tm.tm_year =(2000 + current_time.year)-1900;
 800b870:	4b18      	ldr	r3, [pc, #96]	; (800b8d4 <epoch_time+0x7c>)
 800b872:	88db      	ldrh	r3, [r3, #6]
 800b874:	3364      	adds	r3, #100	; 0x64
 800b876:	61bb      	str	r3, [r7, #24]
	my_tm.tm_mon = current_time.month;
 800b878:	4b16      	ldr	r3, [pc, #88]	; (800b8d4 <epoch_time+0x7c>)
 800b87a:	795b      	ldrb	r3, [r3, #5]
 800b87c:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b880:	b2db      	uxtb	r3, r3
 800b882:	617b      	str	r3, [r7, #20]
	my_tm.tm_mday = current_time.days;
 800b884:	4b13      	ldr	r3, [pc, #76]	; (800b8d4 <epoch_time+0x7c>)
 800b886:	78db      	ldrb	r3, [r3, #3]
 800b888:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	613b      	str	r3, [r7, #16]
	my_tm.tm_hour = current_time.hours;
 800b890:	4b10      	ldr	r3, [pc, #64]	; (800b8d4 <epoch_time+0x7c>)
 800b892:	789b      	ldrb	r3, [r3, #2]
 800b894:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	60fb      	str	r3, [r7, #12]
	my_tm.tm_min = current_time.minutes;
 800b89c:	4b0d      	ldr	r3, [pc, #52]	; (800b8d4 <epoch_time+0x7c>)
 800b89e:	785b      	ldrb	r3, [r3, #1]
 800b8a0:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	60bb      	str	r3, [r7, #8]
	my_tm.tm_sec = current_time.seconds;
 800b8a8:	4b0a      	ldr	r3, [pc, #40]	; (800b8d4 <epoch_time+0x7c>)
 800b8aa:	781b      	ldrb	r3, [r3, #0]
 800b8ac:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	607b      	str	r3, [r7, #4]
	my_tm.tm_isdst = -1;
 800b8b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b8:	627b      	str	r3, [r7, #36]	; 0x24
	my_tm.tm_mon -= 1;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	3b01      	subs	r3, #1
 800b8be:	617b      	str	r3, [r7, #20]

	epoch = mktime(&my_tm);
 800b8c0:	1d3b      	adds	r3, r7, #4
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f006 faa0 	bl	8011e08 <mktime>
 800b8c8:	4602      	mov	r2, r0
 800b8ca:	4b03      	ldr	r3, [pc, #12]	; (800b8d8 <epoch_time+0x80>)
 800b8cc:	601a      	str	r2, [r3, #0]
}
 800b8ce:	3728      	adds	r7, #40	; 0x28
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	1fff4830 	.word	0x1fff4830
 800b8d8:	1fff482c 	.word	0x1fff482c

0800b8dc <CalOdometer>:

uint32_t CalOdometer()//For testing only
	{
 800b8dc:	b480      	push	{r7}
 800b8de:	b087      	sub	sp, #28
 800b8e0:	af00      	add	r7, sp, #0
		float pi = 3.14;
 800b8e2:	4b18      	ldr	r3, [pc, #96]	; (800b944 <CalOdometer+0x68>)
 800b8e4:	617b      	str	r3, [r7, #20]
		float rad = 0.279;
 800b8e6:	4b18      	ldr	r3, [pc, #96]	; (800b948 <CalOdometer+0x6c>)
 800b8e8:	613b      	str	r3, [r7, #16]
		float GRatio = 0.10084; //  1/9.916;
 800b8ea:	4b18      	ldr	r3, [pc, #96]	; (800b94c <CalOdometer+0x70>)
 800b8ec:	60fb      	str	r3, [r7, #12]
		float mintosec = 0.0166;
 800b8ee:	4b18      	ldr	r3, [pc, #96]	; (800b950 <CalOdometer+0x74>)
 800b8f0:	60bb      	str	r3, [r7, #8]
		uint16_t DistanceM = 1;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	80fb      	strh	r3, [r7, #6]

		uint16_t timeDiff = epoch - starttime;
 800b8f6:	4b17      	ldr	r3, [pc, #92]	; (800b954 <CalOdometer+0x78>)
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	4b16      	ldr	r3, [pc, #88]	; (800b958 <CalOdometer+0x7c>)
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	b29b      	uxth	r3, r3
 800b902:	1ad3      	subs	r3, r2, r3
 800b904:	80bb      	strh	r3, [r7, #4]
		uint8_t rotations = 3;
 800b906:	2303      	movs	r3, #3
 800b908:	70fb      	strb	r3, [r7, #3]

		//Distance = (2 * pi * rad * rotations);
		//Distance += (2 * pi * rad * N/(rpm) * GRatio * mintosec * TimeSec);
		DistanceM = (vspeed * (timeDiff/3600));// KM/hr
 800b90a:	88bb      	ldrh	r3, [r7, #4]
 800b90c:	4a13      	ldr	r2, [pc, #76]	; (800b95c <CalOdometer+0x80>)
 800b90e:	fba2 2303 	umull	r2, r3, r2, r3
 800b912:	0adb      	lsrs	r3, r3, #11
 800b914:	b29a      	uxth	r2, r3
 800b916:	4b12      	ldr	r3, [pc, #72]	; (800b960 <CalOdometer+0x84>)
 800b918:	881b      	ldrh	r3, [r3, #0]
 800b91a:	fb12 f303 	smulbb	r3, r2, r3
 800b91e:	80fb      	strh	r3, [r7, #6]
		Distance += (DistanceM/8);//3600
 800b920:	88fb      	ldrh	r3, [r7, #6]
 800b922:	08db      	lsrs	r3, r3, #3
 800b924:	b29a      	uxth	r2, r3
 800b926:	4b0f      	ldr	r3, [pc, #60]	; (800b964 <CalOdometer+0x88>)
 800b928:	881b      	ldrh	r3, [r3, #0]
 800b92a:	4413      	add	r3, r2
 800b92c:	b29a      	uxth	r2, r3
 800b92e:	4b0d      	ldr	r3, [pc, #52]	; (800b964 <CalOdometer+0x88>)
 800b930:	801a      	strh	r2, [r3, #0]

		return Distance;
 800b932:	4b0c      	ldr	r3, [pc, #48]	; (800b964 <CalOdometer+0x88>)
 800b934:	881b      	ldrh	r3, [r3, #0]
	}
 800b936:	4618      	mov	r0, r3
 800b938:	371c      	adds	r7, #28
 800b93a:	46bd      	mov	sp, r7
 800b93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b940:	4770      	bx	lr
 800b942:	bf00      	nop
 800b944:	4048f5c3 	.word	0x4048f5c3
 800b948:	3e8ed917 	.word	0x3e8ed917
 800b94c:	3dce8534 	.word	0x3dce8534
 800b950:	3c87fcb9 	.word	0x3c87fcb9
 800b954:	1fff482c 	.word	0x1fff482c
 800b958:	1fff44d8 	.word	0x1fff44d8
 800b95c:	91a2b3c5 	.word	0x91a2b3c5
 800b960:	1fff528c 	.word	0x1fff528c
 800b964:	1ffe9510 	.word	0x1ffe9510

0800b968 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b968:	b480      	push	{r7}
 800b96a:	b083      	sub	sp, #12
 800b96c:	af00      	add	r7, sp, #0
 800b96e:	6078      	str	r0, [r7, #4]
 800b970:	460b      	mov	r3, r1
 800b972:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b974:	78fb      	ldrb	r3, [r7, #3]
 800b976:	2201      	movs	r2, #1
 800b978:	409a      	lsls	r2, r3
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	605a      	str	r2, [r3, #4]
}
 800b97e:	370c      	adds	r7, #12
 800b980:	46bd      	mov	sp, r7
 800b982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b986:	4770      	bx	lr

0800b988 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b988:	b480      	push	{r7}
 800b98a:	b083      	sub	sp, #12
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	fa22 f303 	lsr.w	r3, r2, r3
 800b99e:	f003 0301 	and.w	r3, r3, #1
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	370c      	adds	r7, #12
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop

0800b9b0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681a      	ldr	r2, [r3, #0]
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	7c1b      	ldrb	r3, [r3, #16]
 800b9c0:	4610      	mov	r0, r2
 800b9c2:	4619      	mov	r1, r3
 800b9c4:	f7ff ffd0 	bl	800b968 <XMC_GPIO_SetOutputHigh>
}
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop

0800b9d0 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b082      	sub	sp, #8
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7c1b      	ldrb	r3, [r3, #16]
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	f7ff ffd0 	bl	800b988 <XMC_GPIO_GetInput>
 800b9e8:	4603      	mov	r3, r0
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3708      	adds	r7, #8
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop

0800b9f4 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b082      	sub	sp, #8
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	4618      	mov	r0, r3
 800ba02:	f7f9 f8cb 	bl	8004b9c <XMC_UART_CH_GetReceivedData>
 800ba06:	4603      	mov	r3, r0
 800ba08:	b2db      	uxtb	r3, r3
}
 800ba0a:	4618      	mov	r0, r3
 800ba0c:	3708      	adds	r7, #8
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	bd80      	pop	{r7, pc}
 800ba12:	bf00      	nop

0800ba14 <clear_readbuff>:
#include "Vcu_Config.h"

uint32_t getout;

void clear_readbuff(char string[])
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 65; i++)
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	60fb      	str	r3, [r7, #12]
 800ba20:	e007      	b.n	800ba32 <clear_readbuff+0x1e>
		string[i] = '\0';
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	687a      	ldr	r2, [r7, #4]
 800ba26:	4413      	add	r3, r2
 800ba28:	2200      	movs	r2, #0
 800ba2a:	701a      	strb	r2, [r3, #0]

uint32_t getout;

void clear_readbuff(char string[])
{
	for(int i = 0; i < 65; i++)
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	3301      	adds	r3, #1
 800ba30:	60fb      	str	r3, [r7, #12]
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b40      	cmp	r3, #64	; 0x40
 800ba36:	ddf4      	ble.n	800ba22 <clear_readbuff+0xe>
		string[i] = '\0';
}
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr
 800ba42:	bf00      	nop

0800ba44 <data_tx4g>:

void data_tx4g(char tx_cmd[])//uint8_t
{
 800ba44:	b580      	push	{r7, lr}
 800ba46:	b082      	sub	sp, #8
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
	UART_Transmit(&UART_0, (uint8_t*)tx_cmd, (uint32_t)strlen(tx_cmd));
 800ba4c:	6878      	ldr	r0, [r7, #4]
 800ba4e:	f006 fc04 	bl	801225a <strlen>
 800ba52:	4603      	mov	r3, r0
 800ba54:	4803      	ldr	r0, [pc, #12]	; (800ba64 <data_tx4g+0x20>)
 800ba56:	6879      	ldr	r1, [r7, #4]
 800ba58:	461a      	mov	r2, r3
 800ba5a:	f7fa faf7 	bl	800604c <UART_Transmit>

	//Delay(5);
}
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	1ffe8844 	.word	0x1ffe8844

0800ba68 <Get_CurrentLocation>:
	data_rx4g();
	data_tx4g(SendGPSData21);
	data_rx4g();
}

void Get_CurrentLocation() {
 800ba68:	b590      	push	{r4, r7, lr}
 800ba6a:	b0f3      	sub	sp, #460	; 0x1cc
 800ba6c:	af00      	add	r7, sp, #0
    DIGITAL_IO_SetOutputHigh(&RTS);
 800ba6e:	4880      	ldr	r0, [pc, #512]	; (800bc70 <Get_CurrentLocation+0x208>)
 800ba70:	f7ff ff9e 	bl	800b9b0 <DIGITAL_IO_SetOutputHigh>
    //delay(5000);
    bool cts_in = DIGITAL_IO_GetInput(&CTS);
 800ba74:	487f      	ldr	r0, [pc, #508]	; (800bc74 <Get_CurrentLocation+0x20c>)
 800ba76:	f7ff ffab 	bl	800b9d0 <DIGITAL_IO_GetInput>
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bf14      	ite	ne
 800ba80:	2301      	movne	r3, #1
 800ba82:	2300      	moveq	r3, #0
 800ba84:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
    char SendGPSData5[] = "AT+QGPSLOC=1\r\n";
 800ba88:	4b7b      	ldr	r3, [pc, #492]	; (800bc78 <Get_CurrentLocation+0x210>)
 800ba8a:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800ba8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800ba90:	c407      	stmia	r4!, {r0, r1, r2}
 800ba92:	8023      	strh	r3, [r4, #0]
 800ba94:	3402      	adds	r4, #2
 800ba96:	0c1b      	lsrs	r3, r3, #16
 800ba98:	7023      	strb	r3, [r4, #0]
    //SuperLooptime_Start();
    data_tx4g(SendGPSData5);
 800ba9a:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7ff ffd0 	bl	800ba44 <data_tx4g>
    //SuperLooptime_End();

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
 800baa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800baa8:	2200      	movs	r2, #0
 800baaa:	701a      	strb	r2, [r3, #0]
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800baac:	2300      	movs	r3, #0
 800baae:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800bab2:	e00d      	b.n	800bad0 <Get_CurrentLocation+0x68>
        strcat(receivedData, data_rx4gps());
 800bab4:	f000 f8ec 	bl	800bc90 <data_rx4gps>
 800bab8:	4602      	mov	r2, r0
 800baba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800babe:	4618      	mov	r0, r3
 800bac0:	4611      	mov	r1, r2
 800bac2:	f006 fba5 	bl	8012210 <strcat>

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800bac6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800baca:	3301      	adds	r3, #1
 800bacc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800bad0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800bad4:	2b03      	cmp	r3, #3
 800bad6:	dded      	ble.n	800bab4 <Get_CurrentLocation+0x4c>
        strcat(receivedData, data_rx4gps());
    }
    //SuperLooptime_End();
    char* startToken = strstr(receivedData, "+QGPSLOC:");
 800bad8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800badc:	4618      	mov	r0, r3
 800bade:	4967      	ldr	r1, [pc, #412]	; (800bc7c <Get_CurrentLocation+0x214>)
 800bae0:	f006 fbd5 	bl	801228e <strstr>
 800bae4:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
    if (startToken != NULL) {
 800bae8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800baec:	2b00      	cmp	r3, #0
 800baee:	f000 80b2 	beq.w	800bc56 <Get_CurrentLocation+0x1ee>
        char *token;
        token = strtok(startToken, ",");
 800baf2:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800baf6:	4962      	ldr	r1, [pc, #392]	; (800bc80 <Get_CurrentLocation+0x218>)
 800baf8:	f006 fbe2 	bl	80122c0 <strtok>
 800bafc:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
        int field_count = 0;
 800bb00:	2300      	movs	r3, #0
 800bb02:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800bb06:	e0a1      	b.n	800bc4c <Get_CurrentLocation+0x1e4>
            if (field_count == 1) { // Latitude
 800bb08:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800bb0c:	2b01      	cmp	r3, #1
 800bb0e:	d124      	bne.n	800bb5a <Get_CurrentLocation+0xf2>
                strncpy(latitude, token, 10);
 800bb10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb14:	4618      	mov	r0, r3
 800bb16:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800bb1a:	220a      	movs	r2, #10
 800bb1c:	f006 fba5 	bl	801226a <strncpy>
                latitude[10] = '\0';
 800bb20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb24:	2200      	movs	r2, #0
 800bb26:	729a      	strb	r2, [r3, #10]
                GPS_data_val.latitude = ((atoi(latitude))*100000);
 800bb28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f006 f851 	bl	8011bd4 <atoi>
 800bb32:	4602      	mov	r2, r0
 800bb34:	4b53      	ldr	r3, [pc, #332]	; (800bc84 <Get_CurrentLocation+0x21c>)
 800bb36:	fb03 f302 	mul.w	r3, r3, r2
 800bb3a:	461a      	mov	r2, r3
 800bb3c:	4b52      	ldr	r3, [pc, #328]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bb3e:	605a      	str	r2, [r3, #4]
                GPS_data_val.latitude += (atoi(latitude+5));
 800bb40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800bb44:	3305      	adds	r3, #5
 800bb46:	4618      	mov	r0, r3
 800bb48:	f006 f844 	bl	8011bd4 <atoi>
 800bb4c:	4602      	mov	r2, r0
 800bb4e:	4b4e      	ldr	r3, [pc, #312]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	4a4c      	ldr	r2, [pc, #304]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bb56:	6053      	str	r3, [r2, #4]
 800bb58:	e06d      	b.n	800bc36 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 3) { // Longitude
 800bb5a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800bb5e:	2b03      	cmp	r3, #3
 800bb60:	d124      	bne.n	800bbac <Get_CurrentLocation+0x144>
                strncpy(longitude, token, 11);
 800bb62:	f107 031c 	add.w	r3, r7, #28
 800bb66:	4618      	mov	r0, r3
 800bb68:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800bb6c:	220b      	movs	r2, #11
 800bb6e:	f006 fb7c 	bl	801226a <strncpy>
                longitude[11] = '\0';
 800bb72:	f107 031c 	add.w	r3, r7, #28
 800bb76:	2200      	movs	r2, #0
 800bb78:	72da      	strb	r2, [r3, #11]
                GPS_data_val.longitude = ((atoi(longitude))*100000);
 800bb7a:	f107 031c 	add.w	r3, r7, #28
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f006 f828 	bl	8011bd4 <atoi>
 800bb84:	4602      	mov	r2, r0
 800bb86:	4b3f      	ldr	r3, [pc, #252]	; (800bc84 <Get_CurrentLocation+0x21c>)
 800bb88:	fb03 f302 	mul.w	r3, r3, r2
 800bb8c:	461a      	mov	r2, r3
 800bb8e:	4b3e      	ldr	r3, [pc, #248]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bb90:	601a      	str	r2, [r3, #0]
                GPS_data_val.longitude += (atoi(longitude+6));
 800bb92:	f107 031c 	add.w	r3, r7, #28
 800bb96:	3306      	adds	r3, #6
 800bb98:	4618      	mov	r0, r3
 800bb9a:	f006 f81b 	bl	8011bd4 <atoi>
 800bb9e:	4602      	mov	r2, r0
 800bba0:	4b39      	ldr	r3, [pc, #228]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	4413      	add	r3, r2
 800bba6:	4a38      	ldr	r2, [pc, #224]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bba8:	6013      	str	r3, [r2, #0]
 800bbaa:	e044      	b.n	800bc36 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 6) { // Altitude
 800bbac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800bbb0:	2b06      	cmp	r3, #6
 800bbb2:	d125      	bne.n	800bc00 <Get_CurrentLocation+0x198>
                strncpy(altitude, token, 5);
 800bbb4:	f107 030c 	add.w	r3, r7, #12
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800bbbe:	2205      	movs	r2, #5
 800bbc0:	f006 fb53 	bl	801226a <strncpy>
                altitude[5] = '\0';
 800bbc4:	f107 030c 	add.w	r3, r7, #12
 800bbc8:	2200      	movs	r2, #0
 800bbca:	715a      	strb	r2, [r3, #5]
                GPS_data_val.altitude =  ((atoi(altitude))*10);
 800bbcc:	f107 030c 	add.w	r3, r7, #12
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	f005 ffff 	bl	8011bd4 <atoi>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	461a      	mov	r2, r3
 800bbe2:	4b29      	ldr	r3, [pc, #164]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bbe4:	609a      	str	r2, [r3, #8]
                GPS_data_val.altitude +=( atoi(altitude+4));
 800bbe6:	f107 030c 	add.w	r3, r7, #12
 800bbea:	3304      	adds	r3, #4
 800bbec:	4618      	mov	r0, r3
 800bbee:	f005 fff1 	bl	8011bd4 <atoi>
 800bbf2:	4602      	mov	r2, r0
 800bbf4:	4b24      	ldr	r3, [pc, #144]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	4413      	add	r3, r2
 800bbfa:	4a23      	ldr	r2, [pc, #140]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bbfc:	6093      	str	r3, [r2, #8]
 800bbfe:	e01a      	b.n	800bc36 <Get_CurrentLocation+0x1ce>
            } else if (field_count == 8) { // COG as direction
 800bc00:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d116      	bne.n	800bc36 <Get_CurrentLocation+0x1ce>
                strncpy(direction, token, 6);
 800bc08:	1d3b      	adds	r3, r7, #4
 800bc0a:	4618      	mov	r0, r3
 800bc0c:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800bc10:	2206      	movs	r2, #6
 800bc12:	f006 fb2a 	bl	801226a <strncpy>
                direction[6] = '\0';
 800bc16:	1d3b      	adds	r3, r7, #4
 800bc18:	2200      	movs	r2, #0
 800bc1a:	719a      	strb	r2, [r3, #6]
                GPS_data_val.direction = atoi(direction) * 10;
 800bc1c:	1d3b      	adds	r3, r7, #4
 800bc1e:	4618      	mov	r0, r3
 800bc20:	f005 ffd8 	bl	8011bd4 <atoi>
 800bc24:	4602      	mov	r2, r0
 800bc26:	4613      	mov	r3, r2
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4413      	add	r3, r2
 800bc2c:	005b      	lsls	r3, r3, #1
 800bc2e:	461a      	mov	r2, r3
 800bc30:	4b15      	ldr	r3, [pc, #84]	; (800bc88 <Get_CurrentLocation+0x220>)
 800bc32:	60da      	str	r2, [r3, #12]
                break; // Stop parsing after direction field
 800bc34:	e00f      	b.n	800bc56 <Get_CurrentLocation+0x1ee>
            }
            field_count++;
 800bc36:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800bc3a:	3301      	adds	r3, #1
 800bc3c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            token = strtok(NULL, ",");
 800bc40:	2000      	movs	r0, #0
 800bc42:	490f      	ldr	r1, [pc, #60]	; (800bc80 <Get_CurrentLocation+0x218>)
 800bc44:	f006 fb3c 	bl	80122c0 <strtok>
 800bc48:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
    if (startToken != NULL) {
        char *token;
        token = strtok(startToken, ",");
        int field_count = 0;
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800bc4c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	f47f af59 	bne.w	800bb08 <Get_CurrentLocation+0xa0>
            token = strtok(NULL, ",");
        }
    }

    // Clear read buffer
    clear_readbuff(receivedData);
 800bc56:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800bc5a:	4618      	mov	r0, r3
 800bc5c:	f7ff feda 	bl	800ba14 <clear_readbuff>

    getout = 0;
 800bc60:	4b0a      	ldr	r3, [pc, #40]	; (800bc8c <Get_CurrentLocation+0x224>)
 800bc62:	2200      	movs	r2, #0
 800bc64:	601a      	str	r2, [r3, #0]
}
 800bc66:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	bd90      	pop	{r4, r7, pc}
 800bc6e:	bf00      	nop
 800bc70:	08013c4c 	.word	0x08013c4c
 800bc74:	08013c38 	.word	0x08013c38
 800bc78:	08014248 	.word	0x08014248
 800bc7c:	08014238 	.word	0x08014238
 800bc80:	08014244 	.word	0x08014244
 800bc84:	000186a0 	.word	0x000186a0
 800bc88:	1fff48d4 	.word	0x1fff48d4
 800bc8c:	1fff52fc 	.word	0x1fff52fc

0800bc90 <data_rx4gps>:


char* data_rx4gps() {
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b082      	sub	sp, #8
 800bc94:	af00      	add	r7, sp, #0
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);
 800bc96:	4817      	ldr	r0, [pc, #92]	; (800bcf4 <data_rx4gps+0x64>)
 800bc98:	f7ff febc 	bl	800ba14 <clear_readbuff>

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	607b      	str	r3, [r7, #4]
 800bca0:	e01c      	b.n	800bcdc <data_rx4gps+0x4c>

        ReadData[i] = UART_GetReceivedWord(&UART_0);
 800bca2:	4815      	ldr	r0, [pc, #84]	; (800bcf8 <data_rx4gps+0x68>)
 800bca4:	f7ff fea6 	bl	800b9f4 <UART_GetReceivedWord>
 800bca8:	4603      	mov	r3, r0
 800bcaa:	4619      	mov	r1, r3
 800bcac:	4a11      	ldr	r2, [pc, #68]	; (800bcf4 <data_rx4gps+0x64>)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4413      	add	r3, r2
 800bcb2:	460a      	mov	r2, r1
 800bcb4:	701a      	strb	r2, [r3, #0]
#if EN_SERIAL
        UART_Transmit(&UART_0, &ReadData[i], 1);
#endif


        if (i > 0 && ReadData[i] == '\n' && ReadData[i - 1] == '\n') {
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	dd0c      	ble.n	800bcd6 <data_rx4gps+0x46>
 800bcbc:	4a0d      	ldr	r2, [pc, #52]	; (800bcf4 <data_rx4gps+0x64>)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	781b      	ldrb	r3, [r3, #0]
 800bcc4:	2b0a      	cmp	r3, #10
 800bcc6:	d106      	bne.n	800bcd6 <data_rx4gps+0x46>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	3b01      	subs	r3, #1
 800bccc:	4a09      	ldr	r2, [pc, #36]	; (800bcf4 <data_rx4gps+0x64>)
 800bcce:	5cd3      	ldrb	r3, [r2, r3]
 800bcd0:	2b0a      	cmp	r3, #10
 800bcd2:	d100      	bne.n	800bcd6 <data_rx4gps+0x46>
            break;
 800bcd4:	e005      	b.n	800bce2 <data_rx4gps+0x52>

char* data_rx4gps() {
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	3301      	adds	r3, #1
 800bcda:	607b      	str	r3, [r7, #4]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2b1d      	cmp	r3, #29
 800bce0:	dddf      	ble.n	800bca2 <data_rx4gps+0x12>
            break;
        }
    }


    Delay(5);
 800bce2:	2005      	movs	r0, #5
 800bce4:	f004 fba6 	bl	8010434 <Delay>

    return ReadData;
 800bce8:	4b02      	ldr	r3, [pc, #8]	; (800bcf4 <data_rx4gps+0x64>)
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3708      	adds	r7, #8
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}
 800bcf2:	bf00      	nop
 800bcf4:	1fff46e0 	.word	0x1fff46e0
 800bcf8:	1ffe8844 	.word	0x1ffe8844

0800bcfc <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800bcfc:	b480      	push	{r7}
 800bcfe:	b083      	sub	sp, #12
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800bd0a:	f003 0308 	and.w	r3, r3, #8
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	bf14      	ite	ne
 800bd12:	2301      	movne	r3, #1
 800bd14:	2300      	moveq	r3, #0
 800bd16:	b2db      	uxtb	r3, r3
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	370c      	adds	r7, #12
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b082      	sub	sp, #8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7f8 ff33 	bl	8004b9c <XMC_UART_CH_GetReceivedData>
 800bd36:	4603      	mov	r3, r0
 800bd38:	b2db      	uxtb	r3, r3
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3708      	adds	r7, #8
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop

0800bd44 <at_initInterface>:
 *
 * Return values 	:	en_responseRetCodes_t - Return status
 *
 ****************************************************************************/
en_responseRetCodes_t at_initInterface(void)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b082      	sub	sp, #8
 800bd48:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bd4a:	2304      	movs	r3, #4
 800bd4c:	71fb      	strb	r3, [r7, #7]

	/**  Initialization of UART APP instance UART_0 */
	init_status = (DAVE_STATUS_t) UART_Init(&UART_0);
 800bd4e:	4809      	ldr	r0, [pc, #36]	; (800bd74 <at_initInterface+0x30>)
 800bd50:	f7fa f96a 	bl	8006028 <UART_Init>
 800bd54:	4603      	mov	r3, r0
 800bd56:	71bb      	strb	r3, [r7, #6]
	if (DAVE_STATUS_SUCCESS == init_status)
 800bd58:	79bb      	ldrb	r3, [r7, #6]
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d102      	bne.n	800bd64 <at_initInterface+0x20>
	{
		len_retStatus = E_RET_SUCCESS;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	71fb      	strb	r3, [r7, #7]
 800bd62:	e001      	b.n	800bd68 <at_initInterface+0x24>
	}
	else
	{
		len_retStatus = E_RET_FAILED;
 800bd64:	2302      	movs	r3, #2
 800bd66:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 800bd68:	79fb      	ldrb	r3, [r7, #7]
}
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	3708      	adds	r7, #8
 800bd6e:	46bd      	mov	sp, r7
 800bd70:	bd80      	pop	{r7, pc}
 800bd72:	bf00      	nop
 800bd74:	1ffe8844 	.word	0x1ffe8844

0800bd78 <at_readPort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_readPort()
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	af00      	add	r7, sp, #0
	return UART_GetReceivedWord(&UART_0);
 800bd7c:	4802      	ldr	r0, [pc, #8]	; (800bd88 <at_readPort+0x10>)
 800bd7e:	f7ff ffd1 	bl	800bd24 <UART_GetReceivedWord>
 800bd82:	4603      	mov	r3, r0
}
 800bd84:	4618      	mov	r0, r3
 800bd86:	bd80      	pop	{r7, pc}
 800bd88:	1ffe8844 	.word	0x1ffe8844

0800bd8c <at_isRxBuffEmpty>:
 *
 * Return values 	:	bool
 *
 ****************************************************************************/
bool at_isRxBuffEmpty()
{
 800bd8c:	b580      	push	{r7, lr}
 800bd8e:	af00      	add	r7, sp, #0
	return XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel);
 800bd90:	4b03      	ldr	r3, [pc, #12]	; (800bda0 <at_isRxBuffEmpty+0x14>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	4618      	mov	r0, r3
 800bd96:	f7ff ffb1 	bl	800bcfc <XMC_USIC_CH_RXFIFO_IsEmpty>
 800bd9a:	4603      	mov	r3, r0
}
 800bd9c:	4618      	mov	r0, r3
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	1ffe8844 	.word	0x1ffe8844

0800bda4 <at_writePort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_writePort(uint8_t *lu8_data, uint16_t lu16_buffLen)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b084      	sub	sp, #16
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	460b      	mov	r3, r1
 800bdae:	807b      	strh	r3, [r7, #2]
	UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 800bdb0:	2302      	movs	r3, #2
 800bdb2:	73bb      	strb	r3, [r7, #14]
	ret_stat = UART_Transmit(&UART_0, lu8_data, lu16_buffLen);
 800bdb4:	887b      	ldrh	r3, [r7, #2]
 800bdb6:	480c      	ldr	r0, [pc, #48]	; (800bde8 <at_writePort+0x44>)
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f7fa f946 	bl	800604c <UART_Transmit>
 800bdc0:	4603      	mov	r3, r0
 800bdc2:	73bb      	strb	r3, [r7, #14]
	uint8_t lu8_ret = 0;
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	73fb      	strb	r3, [r7, #15]
	if (UART_STATUS_SUCCESS == ret_stat)
 800bdc8:	7bbb      	ldrb	r3, [r7, #14]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d102      	bne.n	800bdd4 <at_writePort+0x30>
	{
		lu8_ret = E_SUCCESS;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	73fb      	strb	r3, [r7, #15]
 800bdd2:	e004      	b.n	800bdde <at_writePort+0x3a>
	}
	else if (UART_STATUS_FAILURE == ret_stat)
 800bdd4:	7bbb      	ldrb	r3, [r7, #14]
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d101      	bne.n	800bdde <at_writePort+0x3a>
	{
		lu8_ret = E_FAIL;
 800bdda:	2301      	movs	r3, #1
 800bddc:	73fb      	strb	r3, [r7, #15]
	}
	return lu8_ret;
 800bdde:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3710      	adds	r7, #16
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}
 800bde8:	1ffe8844 	.word	0x1ffe8844

0800bdec <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
 800bdf4:	460b      	mov	r3, r1
 800bdf6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800bdf8:	78fb      	ldrb	r3, [r7, #3]
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	409a      	lsls	r2, r3
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	605a      	str	r2, [r3, #4]
}
 800be02:	370c      	adds	r7, #12
 800be04:	46bd      	mov	sp, r7
 800be06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0a:	4770      	bx	lr

0800be0c <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b083      	sub	sp, #12
 800be10:	af00      	add	r7, sp, #0
 800be12:	6078      	str	r0, [r7, #4]
 800be14:	460b      	mov	r3, r1
 800be16:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800be18:	78fb      	ldrb	r3, [r7, #3]
 800be1a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800be1e:	409a      	lsls	r2, r3
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	605a      	str	r2, [r3, #4]
}
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr
 800be2e:	bf00      	nop

0800be30 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b082      	sub	sp, #8
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7c1b      	ldrb	r3, [r3, #16]
 800be40:	4610      	mov	r0, r2
 800be42:	4619      	mov	r1, r3
 800be44:	f7ff ffd2 	bl	800bdec <XMC_GPIO_SetOutputHigh>
}
 800be48:	3708      	adds	r7, #8
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop

0800be50 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681a      	ldr	r2, [r3, #0]
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	7c1b      	ldrb	r3, [r3, #16]
 800be60:	4610      	mov	r0, r2
 800be62:	4619      	mov	r1, r3
 800be64:	f7ff ffd2 	bl	800be0c <XMC_GPIO_SetOutputLow>
}
 800be68:	3708      	adds	r7, #8
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop

0800be70 <delay>:
		{ 	"AT+QGPSLOC=1", 			OK_RSP, 			"+QGPSLOC:", 			CME_ERROR, 		TIMEOUT_300MS 	} 	// 	E_IDX_GET_GPS_DATA
};

/* Blocking delay function */
static void delay(uint32_t delay_ms)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b084      	sub	sp, #16
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800be78:	480f      	ldr	r0, [pc, #60]	; (800beb8 <delay+0x48>)
 800be7a:	f7fa fcf3 	bl	8006864 <TIMER_ClearEvent>

	delay_cnt = delay_ms * 100000;	//TIMER_DELAY_MUL_FACTOR;
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	4a0e      	ldr	r2, [pc, #56]	; (800bebc <delay+0x4c>)
 800be82:	fb02 f303 	mul.w	r3, r2, r3
 800be86:	60fb      	str	r3, [r7, #12]

	TIMER_SetTimeInterval(&TIMER_0, delay_cnt);
 800be88:	480b      	ldr	r0, [pc, #44]	; (800beb8 <delay+0x48>)
 800be8a:	68f9      	ldr	r1, [r7, #12]
 800be8c:	f7fa fbc8 	bl	8006620 <TIMER_SetTimeInterval>

	TIMER_Start(&TIMER_0);
 800be90:	4809      	ldr	r0, [pc, #36]	; (800beb8 <delay+0x48>)
 800be92:	f7fa fb49 	bl	8006528 <TIMER_Start>

	while (!TIMER_GetInterruptStatus(&TIMER_0))
 800be96:	bf00      	nop
 800be98:	4807      	ldr	r0, [pc, #28]	; (800beb8 <delay+0x48>)
 800be9a:	f7fa fcbd 	bl	8006818 <TIMER_GetInterruptStatus>
 800be9e:	4603      	mov	r3, r0
 800bea0:	f083 0301 	eor.w	r3, r3, #1
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d1f6      	bne.n	800be98 <delay+0x28>
		;

	TIMER_Stop(&TIMER_0);
 800beaa:	4803      	ldr	r0, [pc, #12]	; (800beb8 <delay+0x48>)
 800beac:	f7fa fb64 	bl	8006578 <TIMER_Stop>
}
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	1ffe8850 	.word	0x1ffe8850
 800bebc:	000186a0 	.word	0x000186a0

0800bec0 <mod_enable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_enable4gModule(void)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&MODULE_4G_EN_OUT_D);
 800bec4:	480a      	ldr	r0, [pc, #40]	; (800bef0 <mod_enable4gModule+0x30>)
 800bec6:	f7ff ffb3 	bl	800be30 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800beca:	480a      	ldr	r0, [pc, #40]	; (800bef4 <mod_enable4gModule+0x34>)
 800becc:	f7ff ffc0 	bl	800be50 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800bed0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bed4:	f7ff ffcc 	bl	800be70 <delay>

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800bed8:	4806      	ldr	r0, [pc, #24]	; (800bef4 <mod_enable4gModule+0x34>)
 800beda:	f7ff ffa9 	bl	800be30 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800bede:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bee2:	f7ff ffc5 	bl	800be70 <delay>

	gb_isMqttConnected = false;
 800bee6:	4b04      	ldr	r3, [pc, #16]	; (800bef8 <mod_enable4gModule+0x38>)
 800bee8:	2200      	movs	r2, #0
 800beea:	701a      	strb	r2, [r3, #0]
//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800beec:	bd80      	pop	{r7, pc}
 800beee:	bf00      	nop
 800bef0:	08013c74 	.word	0x08013c74
 800bef4:	08013c60 	.word	0x08013c60
 800bef8:	1fff5294 	.word	0x1fff5294

0800befc <mod_disable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_disable4gModule(void)
{
 800befc:	b580      	push	{r7, lr}
 800befe:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&MODULE_4G_EN_OUT_D);
 800bf00:	4808      	ldr	r0, [pc, #32]	; (800bf24 <mod_disable4gModule+0x28>)
 800bf02:	f7ff ffa5 	bl	800be50 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800bf06:	4808      	ldr	r0, [pc, #32]	; (800bf28 <mod_disable4gModule+0x2c>)
 800bf08:	f7ff ff92 	bl	800be30 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800bf0c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bf10:	f7ff ffae 	bl	800be70 <delay>

	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800bf14:	4804      	ldr	r0, [pc, #16]	; (800bf28 <mod_disable4gModule+0x2c>)
 800bf16:	f7ff ff9b 	bl	800be50 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800bf1a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800bf1e:	f7ff ffa7 	bl	800be70 <delay>

//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	08013c74 	.word	0x08013c74
 800bf28:	08013c60 	.word	0x08013c60

0800bf2c <mod_open4gModPort>:
 *
 * Return values 	:	en_responseRetCodes_t
 *
 ****************************************************************************/
en_responseRetCodes_t mod_open4gModPort(void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bf32:	2304      	movs	r3, #4
 800bf34:	71fb      	strb	r3, [r7, #7]

	/* Initialize the UART port */
	len_retStatus = at_initInterface();
 800bf36:	f7ff ff05 	bl	800bd44 <at_initInterface>
 800bf3a:	4603      	mov	r3, r0
 800bf3c:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
	{
		/* Do something after successful initialization */
	}

	return len_retStatus;
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	3708      	adds	r7, #8
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <mod_receiveRsp>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_receiveRsp(void)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
	if (at_isRxBuffEmpty() != true)
 800bf4e:	f7ff ff1d 	bl	800bd8c <at_isRxBuffEmpty>
 800bf52:	4603      	mov	r3, r0
 800bf54:	f083 0301 	eor.w	r3, r3, #1
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	f000 80e8 	beq.w	800c130 <mod_receiveRsp+0x1e8>
	{
		uint8_t lu8_rcvdByte = 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	73fb      	strb	r3, [r7, #15]

		lu8_rcvdByte = at_readPort();
 800bf64:	f7ff ff08 	bl	800bd78 <at_readPort>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	73fb      	strb	r3, [r7, #15]
		if (lu8_rcvdByte != 0)
 800bf6c:	7bfb      	ldrb	r3, [r7, #15]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f000 80de 	beq.w	800c130 <mod_receiveRsp+0x1e8>
		{
			gu8arr_respBuffer[sgu8_respCount++] = lu8_rcvdByte;
 800bf74:	4b70      	ldr	r3, [pc, #448]	; (800c138 <mod_receiveRsp+0x1f0>)
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	1c5a      	adds	r2, r3, #1
 800bf7a:	b2d1      	uxtb	r1, r2
 800bf7c:	4a6e      	ldr	r2, [pc, #440]	; (800c138 <mod_receiveRsp+0x1f0>)
 800bf7e:	7011      	strb	r1, [r2, #0]
 800bf80:	4619      	mov	r1, r3
 800bf82:	4a6e      	ldr	r2, [pc, #440]	; (800c13c <mod_receiveRsp+0x1f4>)
 800bf84:	7bfb      	ldrb	r3, [r7, #15]
 800bf86:	5453      	strb	r3, [r2, r1]
			lu8_rcvdByte = 0;
 800bf88:	2300      	movs	r3, #0
 800bf8a:	73fb      	strb	r3, [r7, #15]

			if (NULL != strstr((const char*) gu8arr_respBuffer, (const char*) QMTSTAT))
 800bf8c:	486b      	ldr	r0, [pc, #428]	; (800c13c <mod_receiveRsp+0x1f4>)
 800bf8e:	496c      	ldr	r1, [pc, #432]	; (800c140 <mod_receiveRsp+0x1f8>)
 800bf90:	f006 f97d 	bl	801228e <strstr>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d04a      	beq.n	800c030 <mod_receiveRsp+0xe8>
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800bf9a:	4868      	ldr	r0, [pc, #416]	; (800c13c <mod_receiveRsp+0x1f4>)
 800bf9c:	213a      	movs	r1, #58	; 0x3a
 800bf9e:	f006 f946 	bl	801222e <strchr>
 800bfa2:	60b8      	str	r0, [r7, #8]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bfa4:	68b8      	ldr	r0, [r7, #8]
 800bfa6:	210a      	movs	r1, #10
 800bfa8:	f006 f941 	bl	801222e <strchr>
 800bfac:	4603      	mov	r3, r0
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d03d      	beq.n	800c02e <mod_receiveRsp+0xe6>
				{
					lu8p_saveptr += 2;
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	3302      	adds	r3, #2
 800bfb6:	60bb      	str	r3, [r7, #8]

					uint8_t lu8_result = atoi((char *) lu8p_saveptr);
 800bfb8:	68b8      	ldr	r0, [r7, #8]
 800bfba:	f005 fe0b 	bl	8011bd4 <atoi>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	71fb      	strb	r3, [r7, #7]
					if (sgu8_mqttClientId == lu8_result)	//check client Idx
 800bfc2:	4b60      	ldr	r3, [pc, #384]	; (800c144 <mod_receiveRsp+0x1fc>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	79fa      	ldrb	r2, [r7, #7]
 800bfc8:	429a      	cmp	r2, r3
 800bfca:	d130      	bne.n	800c02e <mod_receiveRsp+0xe6>
					{
						lu8p_saveptr += 2;
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	3302      	adds	r3, #2
 800bfd0:	60bb      	str	r3, [r7, #8]
						lu8_result = atoi((char *) lu8p_saveptr);	//check error code
 800bfd2:	68b8      	ldr	r0, [r7, #8]
 800bfd4:	f005 fdfe 	bl	8011bd4 <atoi>
 800bfd8:	4603      	mov	r3, r0
 800bfda:	71fb      	strb	r3, [r7, #7]
						 * 2 --> Sending PINGREQ packet timed out or failed
						 * 3 --> Sending CONNECT packet timed out or failed
						 * 4 --> Receiving CONNACK packet timed out or failed
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
 800bfdc:	79fb      	ldrb	r3, [r7, #7]
 800bfde:	2b01      	cmp	r3, #1
 800bfe0:	d00b      	beq.n	800bffa <mod_receiveRsp+0xb2>
 800bfe2:	79fb      	ldrb	r3, [r7, #7]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d008      	beq.n	800bffa <mod_receiveRsp+0xb2>
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	2b03      	cmp	r3, #3
 800bfec:	d005      	beq.n	800bffa <mod_receiveRsp+0xb2>
								|| (4 == lu8_result) || (6 == lu8_result))
 800bfee:	79fb      	ldrb	r3, [r7, #7]
 800bff0:	2b04      	cmp	r3, #4
 800bff2:	d002      	beq.n	800bffa <mod_receiveRsp+0xb2>
 800bff4:	79fb      	ldrb	r3, [r7, #7]
 800bff6:	2b06      	cmp	r3, #6
 800bff8:	d10b      	bne.n	800c012 <mod_receiveRsp+0xca>
						{
							if (gb_isMqttConnected == true)
 800bffa:	4b53      	ldr	r3, [pc, #332]	; (800c148 <mod_receiveRsp+0x200>)
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d006      	beq.n	800c010 <mod_receiveRsp+0xc8>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
 800c002:	4b52      	ldr	r3, [pc, #328]	; (800c14c <mod_receiveRsp+0x204>)
 800c004:	2209      	movs	r2, #9
 800c006:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800c008:	4b4f      	ldr	r3, [pc, #316]	; (800c148 <mod_receiveRsp+0x200>)
 800c00a:	2200      	movs	r2, #0
 800c00c:	701a      	strb	r2, [r3, #0]
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
								|| (4 == lu8_result) || (6 == lu8_result))
						{
							if (gb_isMqttConnected == true)
 800c00e:	e00e      	b.n	800c02e <mod_receiveRsp+0xe6>
 800c010:	e00d      	b.n	800c02e <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
								gb_isMqttConnected = false;
							}
						}
						else if (8 == lu8_result)//The client closes the MQTT connection
 800c012:	79fb      	ldrb	r3, [r7, #7]
 800c014:	2b08      	cmp	r3, #8
 800c016:	d10a      	bne.n	800c02e <mod_receiveRsp+0xe6>
						{
							if (gb_isMqttConnected == true)
 800c018:	4b4b      	ldr	r3, [pc, #300]	; (800c148 <mod_receiveRsp+0x200>)
 800c01a:	781b      	ldrb	r3, [r3, #0]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d006      	beq.n	800c02e <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_CONNECT_STATE;
 800c020:	4b4a      	ldr	r3, [pc, #296]	; (800c14c <mod_receiveRsp+0x204>)
 800c022:	220b      	movs	r2, #11
 800c024:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800c026:	4b48      	ldr	r3, [pc, #288]	; (800c148 <mod_receiveRsp+0x200>)
 800c028:	2200      	movs	r2, #0
 800c02a:	701a      	strb	r2, [r3, #0]
 800c02c:	e080      	b.n	800c130 <mod_receiveRsp+0x1e8>
 800c02e:	e07f      	b.n	800c130 <mod_receiveRsp+0x1e8>
						}
					}
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800c030:	4842      	ldr	r0, [pc, #264]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c032:	4947      	ldr	r1, [pc, #284]	; (800c150 <mod_receiveRsp+0x208>)
 800c034:	f006 f92b 	bl	801228e <strstr>
 800c038:	4603      	mov	r3, r0
							}
						}
					}
				}
			}
			else if ((NULL
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d015      	beq.n	800c06a <mod_receiveRsp+0x122>
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800c03e:	483f      	ldr	r0, [pc, #252]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c040:	213a      	movs	r1, #58	; 0x3a
 800c042:	f006 f8f4 	bl	801222e <strchr>
 800c046:	6038      	str	r0, [r7, #0]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c048:	6838      	ldr	r0, [r7, #0]
 800c04a:	210a      	movs	r1, #10
 800c04c:	f006 f8ef 	bl	801222e <strchr>
 800c050:	4603      	mov	r3, r0
 800c052:	2b00      	cmp	r3, #0
 800c054:	d008      	beq.n	800c068 <mod_receiveRsp+0x120>
				{
					sgu8_respCount = 0;
 800c056:	4b38      	ldr	r3, [pc, #224]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c058:	2200      	movs	r2, #0
 800c05a:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c05c:	4837      	ldr	r0, [pc, #220]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c05e:	2100      	movs	r1, #0
 800c060:	2240      	movs	r2, #64	; 0x40
 800c062:	f005 fdf2 	bl	8011c4a <memset>
 800c066:	e063      	b.n	800c130 <mod_receiveRsp+0x1e8>
 800c068:	e062      	b.n	800c130 <mod_receiveRsp+0x1e8>
				}
			}
			else if (sgu8_respCount == 1)
 800c06a:	4b33      	ldr	r3, [pc, #204]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c06c:	781b      	ldrb	r3, [r3, #0]
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d110      	bne.n	800c094 <mod_receiveRsp+0x14c>
			{
				if ((gu8arr_respBuffer[0] == 0xFF) || (gu8arr_respBuffer[0] == '\n'))
 800c072:	4b32      	ldr	r3, [pc, #200]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c074:	781b      	ldrb	r3, [r3, #0]
 800c076:	2bff      	cmp	r3, #255	; 0xff
 800c078:	d003      	beq.n	800c082 <mod_receiveRsp+0x13a>
 800c07a:	4b30      	ldr	r3, [pc, #192]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	2b0a      	cmp	r3, #10
 800c080:	d156      	bne.n	800c130 <mod_receiveRsp+0x1e8>
				{
					sgu8_respCount = 0;
 800c082:	4b2d      	ldr	r3, [pc, #180]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c084:	2200      	movs	r2, #0
 800c086:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c088:	482c      	ldr	r0, [pc, #176]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c08a:	2100      	movs	r1, #0
 800c08c:	2240      	movs	r2, #64	; 0x40
 800c08e:	f005 fddc 	bl	8011c4a <memset>
 800c092:	e04d      	b.n	800c130 <mod_receiveRsp+0x1e8>
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer,
 800c094:	4829      	ldr	r0, [pc, #164]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c096:	492f      	ldr	r1, [pc, #188]	; (800c154 <mod_receiveRsp+0x20c>)
 800c098:	f006 f8f9 	bl	801228e <strstr>
 800c09c:	4603      	mov	r3, r0
				{
					sgu8_respCount = 0;
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
				}
			}
			else if ((NULL
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d012      	beq.n	800c0c8 <mod_receiveRsp+0x180>
					!= strstr((const char*) gu8arr_respBuffer,
							(const char*) "QIND: SMS DONE\r\n")))
			{
				gst_deviceStatus.mb_ismodemPwrDwn = false;
 800c0a2:	4b2d      	ldr	r3, [pc, #180]	; (800c158 <mod_receiveRsp+0x210>)
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	701a      	strb	r2, [r3, #0]
				sgu8_respCount = 0;
 800c0a8:	4b23      	ldr	r3, [pc, #140]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c0ae:	4823      	ldr	r0, [pc, #140]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	2240      	movs	r2, #64	; 0x40
 800c0b4:	f005 fdc9 	bl	8011c4a <memset>
				sen_4gRunState = E_SET_URC_PORT_STATE;
 800c0b8:	4b24      	ldr	r3, [pc, #144]	; (800c14c <mod_receiveRsp+0x204>)
 800c0ba:	2201      	movs	r2, #1
 800c0bc:	701a      	strb	r2, [r3, #0]
				delay(2000);
 800c0be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0c2:	f7ff fed5 	bl	800be70 <delay>
 800c0c6:	e033      	b.n	800c130 <mod_receiveRsp+0x1e8>
			}
			else if (RDY_SIZE == sgu8_respCount)
 800c0c8:	4b1b      	ldr	r3, [pc, #108]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	2b07      	cmp	r3, #7
 800c0ce:	d119      	bne.n	800c104 <mod_receiveRsp+0x1bc>
			{
				if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) READY)))
 800c0d0:	481a      	ldr	r0, [pc, #104]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c0d2:	4922      	ldr	r1, [pc, #136]	; (800c15c <mod_receiveRsp+0x214>)
 800c0d4:	f006 f8db 	bl	801228e <strstr>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d028      	beq.n	800c130 <mod_receiveRsp+0x1e8>
				{
					gst_deviceStatus.mb_ismodemPwrDwn = false;
 800c0de:	4b1e      	ldr	r3, [pc, #120]	; (800c158 <mod_receiveRsp+0x210>)
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800c0e4:	4b14      	ldr	r3, [pc, #80]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c0ea:	4814      	ldr	r0, [pc, #80]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c0ec:	2100      	movs	r1, #0
 800c0ee:	2240      	movs	r2, #64	; 0x40
 800c0f0:	f005 fdab 	bl	8011c4a <memset>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800c0f4:	4b15      	ldr	r3, [pc, #84]	; (800c14c <mod_receiveRsp+0x204>)
 800c0f6:	2202      	movs	r2, #2
 800c0f8:	701a      	strb	r2, [r3, #0]
					delay(2000);
 800c0fa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800c0fe:	f7ff feb7 	bl	800be70 <delay>
 800c102:	e015      	b.n	800c130 <mod_receiveRsp+0x1e8>
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
 800c104:	4b0c      	ldr	r3, [pc, #48]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c106:	781b      	ldrb	r3, [r3, #0]
 800c108:	2b10      	cmp	r3, #16
 800c10a:	d111      	bne.n	800c130 <mod_receiveRsp+0x1e8>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 800c10c:	480b      	ldr	r0, [pc, #44]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c10e:	4914      	ldr	r1, [pc, #80]	; (800c160 <mod_receiveRsp+0x218>)
 800c110:	f006 f8bd 	bl	801228e <strstr>
 800c114:	4603      	mov	r3, r0
					delay(2000);
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
			{
				if ((NULL
 800c116:	2b00      	cmp	r3, #0
 800c118:	d00a      	beq.n	800c130 <mod_receiveRsp+0x1e8>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
				{
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800c11a:	4b0f      	ldr	r3, [pc, #60]	; (800c158 <mod_receiveRsp+0x210>)
 800c11c:	2201      	movs	r2, #1
 800c11e:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800c120:	4b05      	ldr	r3, [pc, #20]	; (800c138 <mod_receiveRsp+0x1f0>)
 800c122:	2200      	movs	r2, #0
 800c124:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c126:	4805      	ldr	r0, [pc, #20]	; (800c13c <mod_receiveRsp+0x1f4>)
 800c128:	2100      	movs	r1, #0
 800c12a:	2240      	movs	r2, #64	; 0x40
 800c12c:	f005 fd8d 	bl	8011c4a <memset>
				}
			}
		}
	}
}
 800c130:	3710      	adds	r7, #16
 800c132:	46bd      	mov	sp, r7
 800c134:	bd80      	pop	{r7, pc}
 800c136:	bf00      	nop
 800c138:	1fff47a4 	.word	0x1fff47a4
 800c13c:	1fff4704 	.word	0x1fff4704
 800c140:	080142dc 	.word	0x080142dc
 800c144:	1fff47a5 	.word	0x1fff47a5
 800c148:	1fff5294 	.word	0x1fff5294
 800c14c:	1ffea508 	.word	0x1ffea508
 800c150:	080142e8 	.word	0x080142e8
 800c154:	080142f4 	.word	0x080142f4
 800c158:	1ffea50c 	.word	0x1ffea50c
 800c15c:	08014308 	.word	0x08014308
 800c160:	08014310 	.word	0x08014310

0800c164 <mod_sendCmd>:
 *
 * Return values 	: 	en_responseRetCodes_t
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_sendCmd(uint8_t *lu8p_data, uint16_t lu16_len)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b084      	sub	sp, #16
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	807b      	strh	r3, [r7, #2]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c170:	2304      	movs	r3, #4
 800c172:	73fb      	strb	r3, [r7, #15]
	uint8_t lu8_ret = 0;
 800c174:	2300      	movs	r3, #0
 800c176:	73bb      	strb	r3, [r7, #14]

	lu8_ret = at_writePort(lu8p_data, lu16_len);
 800c178:	887b      	ldrh	r3, [r7, #2]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	4619      	mov	r1, r3
 800c17e:	f7ff fe11 	bl	800bda4 <at_writePort>
 800c182:	4603      	mov	r3, r0
 800c184:	73bb      	strb	r3, [r7, #14]
	if (E_SUCCESS == lu8_ret)
 800c186:	7bbb      	ldrb	r3, [r7, #14]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d102      	bne.n	800c192 <mod_sendCmd+0x2e>
	{
		len_retStatus = E_RET_SUCCESS;
 800c18c:	2300      	movs	r3, #0
 800c18e:	73fb      	strb	r3, [r7, #15]
 800c190:	e001      	b.n	800c196 <mod_sendCmd+0x32>
	}
	else
	{
		len_retStatus = E_RET_WRITE_ERROR;
 800c192:	2305      	movs	r3, #5
 800c194:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 800c196:	7bfb      	ldrb	r3, [r7, #15]
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}

0800c1a0 <mod_sendCmdGetRsp>:
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ***************************************************************************/
static en_responseRetCodes_t mod_sendCmdGetRsp(en_ATCommandIdx_t len_ATCmdIdx,
		uint8_t *lu8p_cmdParam)
{
 800c1a0:	b590      	push	{r4, r7, lr}
 800c1a2:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 800c1a6:	af00      	add	r7, sp, #0
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	463b      	mov	r3, r7
 800c1ac:	6019      	str	r1, [r3, #0]
 800c1ae:	1dfb      	adds	r3, r7, #7
 800c1b0:	701a      	strb	r2, [r3, #0]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c1b2:	2304      	movs	r3, #4
 800c1b4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint8_t lu8arr_sendCmdBuff[SEND_AT_CMD_BUFF];
	uint16_t lu16_BufferSize = 0;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
	uint8_t *lu8p_Ptr = NULL;
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	uint8_t *lu8p_saveptr = NULL;
 800c1c4:	f107 030c 	add.w	r3, r7, #12
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	601a      	str	r2, [r3, #0]

	switch (sen_sendCmdGetRespState)
 800c1cc:	4bbe      	ldr	r3, [pc, #760]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c1ce:	781b      	ldrb	r3, [r3, #0]
 800c1d0:	2b01      	cmp	r3, #1
 800c1d2:	d010      	beq.n	800c1f6 <mod_sendCmdGetRsp+0x56>
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d070      	beq.n	800c2ba <mod_sendCmdGetRsp+0x11a>
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	f040 8267 	bne.w	800c6ac <mod_sendCmdGetRsp+0x50c>
	{
		case E_AT_CMD_IDLE_STATE:
			sgu8_respCount = 0;
 800c1de:	4bbb      	ldr	r3, [pc, #748]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]
			memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c1e4:	48ba      	ldr	r0, [pc, #744]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	2240      	movs	r2, #64	; 0x40
 800c1ea:	f005 fd2e 	bl	8011c4a <memset>
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c1ee:	4bb6      	ldr	r3, [pc, #728]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	701a      	strb	r2, [r3, #0]
		break;
 800c1f4:	e261      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));
 800c1f6:	f107 0310 	add.w	r3, r7, #16
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	2100      	movs	r1, #0
 800c1fe:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800c202:	f005 fd22 	bl	8011c4a <memset>

			strncpy((char *) lu8arr_sendCmdBuff,
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 800c206:	1dfb      	adds	r3, r7, #7
 800c208:	781b      	ldrb	r3, [r3, #0]
 800c20a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c20e:	fb02 f303 	mul.w	r3, r2, r3
 800c212:	4ab0      	ldr	r2, [pc, #704]	; (800c4d4 <mod_sendCmdGetRsp+0x334>)
 800c214:	189c      	adds	r4, r3, r2
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));
 800c216:	1dfb      	adds	r3, r7, #7
 800c218:	781b      	ldrb	r3, [r3, #0]
 800c21a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c21e:	fb02 f303 	mul.w	r3, r2, r3
 800c222:	4aac      	ldr	r2, [pc, #688]	; (800c4d4 <mod_sendCmdGetRsp+0x334>)
 800c224:	4413      	add	r3, r2
		break;

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));

			strncpy((char *) lu8arr_sendCmdBuff,
 800c226:	4618      	mov	r0, r3
 800c228:	f006 f817 	bl	801225a <strlen>
 800c22c:	4602      	mov	r2, r0
 800c22e:	f107 0310 	add.w	r3, r7, #16
 800c232:	4618      	mov	r0, r3
 800c234:	4621      	mov	r1, r4
 800c236:	f006 f818 	bl	801226a <strncpy>
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));

			if (NULL != lu8p_cmdParam)
 800c23a:	463b      	mov	r3, r7
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d006      	beq.n	800c250 <mod_sendCmdGetRsp+0xb0>
			{
				strcat((char *) lu8arr_sendCmdBuff, (char *) lu8p_cmdParam);
 800c242:	f107 0210 	add.w	r2, r7, #16
 800c246:	463b      	mov	r3, r7
 800c248:	4610      	mov	r0, r2
 800c24a:	6819      	ldr	r1, [r3, #0]
 800c24c:	f005 ffe0 	bl	8012210 <strcat>
			}

			lu16_BufferSize = strlen((char *) lu8arr_sendCmdBuff);
 800c250:	f107 0310 	add.w	r3, r7, #16
 800c254:	4618      	mov	r0, r3
 800c256:	f006 f800 	bl	801225a <strlen>
 800c25a:	4603      	mov	r3, r0
 800c25c:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
			len_retStatus = mod_sendCmd(lu8arr_sendCmdBuff, lu16_BufferSize);
 800c260:	f107 0210 	add.w	r2, r7, #16
 800c264:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 800c268:	4610      	mov	r0, r2
 800c26a:	4619      	mov	r1, r3
 800c26c:	f7ff ff7a 	bl	800c164 <mod_sendCmd>
 800c270:	4603      	mov	r3, r0
 800c272:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			if (E_RET_SUCCESS == len_retStatus)
 800c276:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d11c      	bne.n	800c2b8 <mod_sendCmdGetRsp+0x118>
			{
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c27e:	4894      	ldr	r0, [pc, #592]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c280:	2100      	movs	r1, #0
 800c282:	2240      	movs	r2, #64	; 0x40
 800c284:	f005 fce1 	bl	8011c4a <memset>
				sgu8_respCount = 0;
 800c288:	4b90      	ldr	r3, [pc, #576]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c28a:	2200      	movs	r2, #0
 800c28c:	701a      	strb	r2, [r3, #0]
				tm_setResponseTime(gcst_ATCmdTable[len_ATCmdIdx].mu32_respTimeoutInMs);
 800c28e:	1dfb      	adds	r3, r7, #7
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	4a90      	ldr	r2, [pc, #576]	; (800c4d4 <mod_sendCmdGetRsp+0x334>)
 800c294:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800c298:	fb01 f303 	mul.w	r3, r1, r3
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7f4 f8b1 	bl	800040c <tm_setResponseTime>
				len_retStatus = E_RET_INPROGRESS;
 800c2aa:	2304      	movs	r3, #4
 800c2ac:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
				sen_sendCmdGetRespState = E_AT_CMD_RECV_INPROG_STATE;
 800c2b0:	4b85      	ldr	r3, [pc, #532]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 800c2b6:	e200      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>
 800c2b8:	e1ff      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
 800c2ba:	4b84      	ldr	r3, [pc, #528]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	f000 81dd 	beq.w	800c67e <mod_sendCmdGetRsp+0x4de>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 800c2c4:	1dfb      	adds	r3, r7, #7
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c2cc:	fb02 f303 	mul.w	r3, r2, r3
 800c2d0:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800c2d4:	4a7f      	ldr	r2, [pc, #508]	; (800c4d4 <mod_sendCmdGetRsp+0x334>)
 800c2d6:	4413      	add	r3, r2

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c2d8:	487d      	ldr	r0, [pc, #500]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c2da:	4619      	mov	r1, r3
 800c2dc:	f005 ffd7 	bl	801228e <strstr>
 800c2e0:	4603      	mov	r3, r0
		break;

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d00b      	beq.n	800c2fe <mod_sendCmdGetRsp+0x15e>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
				{
					sgu8_respCount = 0;
 800c2e6:	4b79      	ldr	r3, [pc, #484]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
 800c2ec:	f7f4 f8a8 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_SUCCESS;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c2f6:	4b74      	ldr	r3, [pc, #464]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c2f8:	2201      	movs	r2, #1
 800c2fa:	701a      	strb	r2, [r3, #0]
 800c2fc:	e1d5      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
				}

				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 800c2fe:	4874      	ldr	r0, [pc, #464]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c300:	4975      	ldr	r1, [pc, #468]	; (800c4d8 <mod_sendCmdGetRsp+0x338>)
 800c302:	f005 ffc4 	bl	801228e <strstr>
 800c306:	4603      	mov	r3, r0
					tm_clearResponseTime();
					len_retStatus = E_RET_SUCCESS;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}

				else if ((NULL
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d01e      	beq.n	800c34a <mod_sendCmdGetRsp+0x1aa>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c30c:	4870      	ldr	r0, [pc, #448]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c30e:	213a      	movs	r1, #58	; 0x3a
 800c310:	f005 ff8d 	bl	801222e <strchr>
 800c314:	4602      	mov	r2, r0
 800c316:	f107 030c 	add.w	r3, r7, #12
 800c31a:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c31c:	f107 030c 	add.w	r3, r7, #12
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4618      	mov	r0, r3
 800c324:	210a      	movs	r1, #10
 800c326:	f005 ff82 	bl	801222e <strchr>
 800c32a:	4603      	mov	r3, r0
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f000 81bc 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c332:	4b66      	ldr	r3, [pc, #408]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c334:	2200      	movs	r2, #0
 800c336:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c338:	f7f4 f882 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c33c:	2300      	movs	r3, #0
 800c33e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c342:	4b61      	ldr	r3, [pc, #388]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c344:	2201      	movs	r2, #1
 800c346:	701a      	strb	r2, [r3, #0]
 800c348:	e1af      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 800c34a:	4861      	ldr	r0, [pc, #388]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c34c:	4963      	ldr	r1, [pc, #396]	; (800c4dc <mod_sendCmdGetRsp+0x33c>)
 800c34e:	f005 ff9e 	bl	801228e <strstr>
 800c352:	4603      	mov	r3, r0
//						sgu8_respCount = 0;
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
 800c354:	2b00      	cmp	r3, #0
 800c356:	d01e      	beq.n	800c396 <mod_sendCmdGetRsp+0x1f6>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c358:	485d      	ldr	r0, [pc, #372]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c35a:	213a      	movs	r1, #58	; 0x3a
 800c35c:	f005 ff67 	bl	801222e <strchr>
 800c360:	4602      	mov	r2, r0
 800c362:	f107 030c 	add.w	r3, r7, #12
 800c366:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c368:	f107 030c 	add.w	r3, r7, #12
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	4618      	mov	r0, r3
 800c370:	210a      	movs	r1, #10
 800c372:	f005 ff5c 	bl	801222e <strchr>
 800c376:	4603      	mov	r3, r0
 800c378:	2b00      	cmp	r3, #0
 800c37a:	f000 8196 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c37e:	4b53      	ldr	r3, [pc, #332]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c380:	2200      	movs	r2, #0
 800c382:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c384:	f7f4 f85c 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c388:	2300      	movs	r3, #0
 800c38a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c38e:	4b4e      	ldr	r3, [pc, #312]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c390:	2201      	movs	r2, #1
 800c392:	701a      	strb	r2, [r3, #0]
 800c394:	e189      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 800c396:	484e      	ldr	r0, [pc, #312]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c398:	4951      	ldr	r1, [pc, #324]	; (800c4e0 <mod_sendCmdGetRsp+0x340>)
 800c39a:	f005 ff78 	bl	801228e <strstr>
 800c39e:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01e      	beq.n	800c3e2 <mod_sendCmdGetRsp+0x242>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c3a4:	484a      	ldr	r0, [pc, #296]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c3a6:	213a      	movs	r1, #58	; 0x3a
 800c3a8:	f005 ff41 	bl	801222e <strchr>
 800c3ac:	4602      	mov	r2, r0
 800c3ae:	f107 030c 	add.w	r3, r7, #12
 800c3b2:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c3b4:	f107 030c 	add.w	r3, r7, #12
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	210a      	movs	r1, #10
 800c3be:	f005 ff36 	bl	801222e <strchr>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	f000 8170 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c3ca:	4b40      	ldr	r3, [pc, #256]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c3cc:	2200      	movs	r2, #0
 800c3ce:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c3d0:	f7f4 f836 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c3da:	4b3b      	ldr	r3, [pc, #236]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c3dc:	2201      	movs	r2, #1
 800c3de:	701a      	strb	r2, [r3, #0]
 800c3e0:	e163      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 800c3e2:	483b      	ldr	r0, [pc, #236]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c3e4:	493f      	ldr	r1, [pc, #252]	; (800c4e4 <mod_sendCmdGetRsp+0x344>)
 800c3e6:	f005 ff52 	bl	801228e <strstr>
 800c3ea:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01e      	beq.n	800c42e <mod_sendCmdGetRsp+0x28e>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c3f0:	4837      	ldr	r0, [pc, #220]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c3f2:	213a      	movs	r1, #58	; 0x3a
 800c3f4:	f005 ff1b 	bl	801222e <strchr>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	f107 030c 	add.w	r3, r7, #12
 800c3fe:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c400:	f107 030c 	add.w	r3, r7, #12
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	4618      	mov	r0, r3
 800c408:	210a      	movs	r1, #10
 800c40a:	f005 ff10 	bl	801222e <strchr>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	f000 814a 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c416:	4b2d      	ldr	r3, [pc, #180]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c418:	2200      	movs	r2, #0
 800c41a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c41c:	f7f4 f810 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c420:	2300      	movs	r3, #0
 800c422:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c426:	4b28      	ldr	r3, [pc, #160]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c428:	2201      	movs	r2, #1
 800c42a:	701a      	strb	r2, [r3, #0]
 800c42c:	e13d      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 800c42e:	4828      	ldr	r0, [pc, #160]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c430:	492d      	ldr	r1, [pc, #180]	; (800c4e8 <mod_sendCmdGetRsp+0x348>)
 800c432:	f005 ff2c 	bl	801228e <strstr>
 800c436:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <mod_sendCmdGetRsp+0x2da>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c43c:	4824      	ldr	r0, [pc, #144]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c43e:	213a      	movs	r1, #58	; 0x3a
 800c440:	f005 fef5 	bl	801222e <strchr>
 800c444:	4602      	mov	r2, r0
 800c446:	f107 030c 	add.w	r3, r7, #12
 800c44a:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c44c:	f107 030c 	add.w	r3, r7, #12
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	4618      	mov	r0, r3
 800c454:	210a      	movs	r1, #10
 800c456:	f005 feea 	bl	801222e <strchr>
 800c45a:	4603      	mov	r3, r0
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	f000 8124 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c462:	4b1a      	ldr	r3, [pc, #104]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c464:	2200      	movs	r2, #0
 800c466:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c468:	f7f3 ffea 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c46c:	2300      	movs	r3, #0
 800c46e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c472:	4b15      	ldr	r3, [pc, #84]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c474:	2201      	movs	r2, #1
 800c476:	701a      	strb	r2, [r3, #0]
 800c478:	e117      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800c47a:	4815      	ldr	r0, [pc, #84]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c47c:	491b      	ldr	r1, [pc, #108]	; (800c4ec <mod_sendCmdGetRsp+0x34c>)
 800c47e:	f005 ff06 	bl	801228e <strstr>
 800c482:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c484:	2b00      	cmp	r3, #0
 800c486:	d033      	beq.n	800c4f0 <mod_sendCmdGetRsp+0x350>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c488:	4811      	ldr	r0, [pc, #68]	; (800c4d0 <mod_sendCmdGetRsp+0x330>)
 800c48a:	213a      	movs	r1, #58	; 0x3a
 800c48c:	f005 fecf 	bl	801222e <strchr>
 800c490:	4602      	mov	r2, r0
 800c492:	f107 030c 	add.w	r3, r7, #12
 800c496:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c498:	f107 030c 	add.w	r3, r7, #12
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	4618      	mov	r0, r3
 800c4a0:	210a      	movs	r1, #10
 800c4a2:	f005 fec4 	bl	801222e <strchr>
 800c4a6:	4603      	mov	r3, r0
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	f000 80fe 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800c4ae:	4b07      	ldr	r3, [pc, #28]	; (800c4cc <mod_sendCmdGetRsp+0x32c>)
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c4b4:	f7f3 ffc4 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c4be:	4b02      	ldr	r3, [pc, #8]	; (800c4c8 <mod_sendCmdGetRsp+0x328>)
 800c4c0:	2201      	movs	r2, #1
 800c4c2:	701a      	strb	r2, [r3, #0]
 800c4c4:	e0f1      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
 800c4c6:	bf00      	nop
 800c4c8:	1ffea509 	.word	0x1ffea509
 800c4cc:	1fff47a4 	.word	0x1fff47a4
 800c4d0:	1fff4704 	.word	0x1fff4704
 800c4d4:	1ffea518 	.word	0x1ffea518
 800c4d8:	08014320 	.word	0x08014320
 800c4dc:	0801432c 	.word	0x0801432c
 800c4e0:	08014338 	.word	0x08014338
 800c4e4:	08014344 	.word	0x08014344
 800c4e8:	08014350 	.word	0x08014350
 800c4ec:	080142e8 	.word	0x080142e8
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c4f0:	4875      	ldr	r0, [pc, #468]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c4f2:	4976      	ldr	r1, [pc, #472]	; (800c6cc <mod_sendCmdGetRsp+0x52c>)
 800c4f4:	f005 fecb 	bl	801228e <strstr>
 800c4f8:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d038      	beq.n	800c570 <mod_sendCmdGetRsp+0x3d0>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CME_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c4fe:	4872      	ldr	r0, [pc, #456]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c500:	213a      	movs	r1, #58	; 0x3a
 800c502:	f005 fe94 	bl	801222e <strchr>
 800c506:	4602      	mov	r2, r0
 800c508:	f107 030c 	add.w	r3, r7, #12
 800c50c:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c50e:	f107 030c 	add.w	r3, r7, #12
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	4618      	mov	r0, r3
 800c516:	210a      	movs	r1, #10
 800c518:	f005 fe89 	bl	801222e <strchr>
 800c51c:	4603      	mov	r3, r0
 800c51e:	2b00      	cmp	r3, #0
 800c520:	f000 80c3 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c524:	f107 030c 	add.w	r3, r7, #12
 800c528:	4867      	ldr	r0, [pc, #412]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c52a:	4969      	ldr	r1, [pc, #420]	; (800c6d0 <mod_sendCmdGetRsp+0x530>)
 800c52c:	461a      	mov	r2, r3
 800c52e:	f005 ff24 	bl	801237a <strtok_r>
 800c532:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c536:	f107 030c 	add.w	r3, r7, #12
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	1c5a      	adds	r2, r3, #1
 800c53e:	f107 030c 	add.w	r3, r7, #12
 800c542:	601a      	str	r2, [r3, #0]

						sgu16_cmeError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c544:	f107 030c 	add.w	r3, r7, #12
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4618      	mov	r0, r3
 800c54c:	f005 fb42 	bl	8011bd4 <atoi>
 800c550:	4603      	mov	r3, r0
 800c552:	b29a      	uxth	r2, r3
 800c554:	4b5f      	ldr	r3, [pc, #380]	; (800c6d4 <mod_sendCmdGetRsp+0x534>)
 800c556:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c558:	4b5f      	ldr	r3, [pc, #380]	; (800c6d8 <mod_sendCmdGetRsp+0x538>)
 800c55a:	2200      	movs	r2, #0
 800c55c:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c55e:	f7f3 ff6f 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CME_ERROR;
 800c562:	230b      	movs	r3, #11
 800c564:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c568:	4b5c      	ldr	r3, [pc, #368]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c56a:	2201      	movs	r2, #1
 800c56c:	701a      	strb	r2, [r3, #0]
 800c56e:	e09c      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c570:	4855      	ldr	r0, [pc, #340]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c572:	495b      	ldr	r1, [pc, #364]	; (800c6e0 <mod_sendCmdGetRsp+0x540>)
 800c574:	f005 fe8b 	bl	801228e <strstr>
 800c578:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_CME_ERROR;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d038      	beq.n	800c5f0 <mod_sendCmdGetRsp+0x450>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CMS_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c57e:	4852      	ldr	r0, [pc, #328]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c580:	213a      	movs	r1, #58	; 0x3a
 800c582:	f005 fe54 	bl	801222e <strchr>
 800c586:	4602      	mov	r2, r0
 800c588:	f107 030c 	add.w	r3, r7, #12
 800c58c:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c58e:	f107 030c 	add.w	r3, r7, #12
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4618      	mov	r0, r3
 800c596:	210a      	movs	r1, #10
 800c598:	f005 fe49 	bl	801222e <strchr>
 800c59c:	4603      	mov	r3, r0
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 8083 	beq.w	800c6aa <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c5a4:	f107 030c 	add.w	r3, r7, #12
 800c5a8:	4847      	ldr	r0, [pc, #284]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c5aa:	4949      	ldr	r1, [pc, #292]	; (800c6d0 <mod_sendCmdGetRsp+0x530>)
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	f005 fee4 	bl	801237a <strtok_r>
 800c5b2:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c5b6:	f107 030c 	add.w	r3, r7, #12
 800c5ba:	681b      	ldr	r3, [r3, #0]
 800c5bc:	1c5a      	adds	r2, r3, #1
 800c5be:	f107 030c 	add.w	r3, r7, #12
 800c5c2:	601a      	str	r2, [r3, #0]

						sgu16_cmsError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c5c4:	f107 030c 	add.w	r3, r7, #12
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	4618      	mov	r0, r3
 800c5cc:	f005 fb02 	bl	8011bd4 <atoi>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	b29a      	uxth	r2, r3
 800c5d4:	4b43      	ldr	r3, [pc, #268]	; (800c6e4 <mod_sendCmdGetRsp+0x544>)
 800c5d6:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c5d8:	4b3f      	ldr	r3, [pc, #252]	; (800c6d8 <mod_sendCmdGetRsp+0x538>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c5de:	f7f3 ff2f 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CMS_ERROR;
 800c5e2:	230c      	movs	r3, #12
 800c5e4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c5e8:	4b3c      	ldr	r3, [pc, #240]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	701a      	strb	r2, [r3, #0]
 800c5ee:	e05c      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
 800c5f0:	1dfb      	adds	r3, r7, #7
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	2b1b      	cmp	r3, #27
 800c5f6:	d112      	bne.n	800c61e <mod_sendCmdGetRsp+0x47e>
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c5f8:	4833      	ldr	r0, [pc, #204]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c5fa:	2141      	movs	r1, #65	; 0x41
 800c5fc:	f005 fe17 	bl	801222e <strchr>
 800c600:	4603      	mov	r3, r0
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
				{
					if ((NULL
 800c602:	2b00      	cmp	r3, #0
 800c604:	d051      	beq.n	800c6aa <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) "A")))
					{
						sgu8_respCount = 0;
 800c606:	4b34      	ldr	r3, [pc, #208]	; (800c6d8 <mod_sendCmdGetRsp+0x538>)
 800c608:	2200      	movs	r2, #0
 800c60a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c60c:	f7f3 ff18 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c610:	2300      	movs	r3, #0
 800c612:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c616:	4b31      	ldr	r3, [pc, #196]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c618:	2201      	movs	r2, #1
 800c61a:	701a      	strb	r2, [r3, #0]
 800c61c:	e045      	b.n	800c6aa <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c61e:	1dfb      	adds	r3, r7, #7
 800c620:	781b      	ldrb	r3, [r3, #0]
 800c622:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c626:	fb02 f303 	mul.w	r3, r2, r3
 800c62a:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c62e:	4a2e      	ldr	r2, [pc, #184]	; (800c6e8 <mod_sendCmdGetRsp+0x548>)
 800c630:	4413      	add	r3, r2
 800c632:	3304      	adds	r3, #4
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
 800c634:	482d      	ldr	r0, [pc, #180]	; (800c6ec <mod_sendCmdGetRsp+0x54c>)
 800c636:	4619      	mov	r1, r3
 800c638:	f005 fe29 	bl	801228e <strstr>
 800c63c:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d133      	bne.n	800c6aa <mod_sendCmdGetRsp+0x50a>
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c642:	1dfb      	adds	r3, r7, #7
 800c644:	781b      	ldrb	r3, [r3, #0]
 800c646:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c64a:	fb02 f303 	mul.w	r3, r2, r3
 800c64e:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c652:	4a25      	ldr	r2, [pc, #148]	; (800c6e8 <mod_sendCmdGetRsp+0x548>)
 800c654:	4413      	add	r3, r2
 800c656:	3304      	adds	r3, #4
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c658:	481b      	ldr	r0, [pc, #108]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c65a:	4619      	mov	r1, r3
 800c65c:	f005 fe17 	bl	801228e <strstr>
 800c660:	4603      	mov	r3, r0
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
 800c662:	2b00      	cmp	r3, #0
 800c664:	d021      	beq.n	800c6aa <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
					{
						sgu8_respCount = 0;
 800c666:	4b1c      	ldr	r3, [pc, #112]	; (800c6d8 <mod_sendCmdGetRsp+0x538>)
 800c668:	2200      	movs	r2, #0
 800c66a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c66c:	f7f3 fee8 	bl	8000440 <tm_clearResponseTime>
//						tm_stopTimer();
						len_retStatus = E_RET_RSP_ERROR;
 800c670:	2303      	movs	r3, #3
 800c672:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c676:	4b19      	ldr	r3, [pc, #100]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c678:	2201      	movs	r2, #1
 800c67a:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
					len_retStatus = E_RET_TIMEOUT_ERROR;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}
			}
		break;
 800c67c:	e01d      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>

				}
			}
			else
			{
				if (tm_getResponseTimeValue() == 0)
 800c67e:	f7f3 fed3 	bl	8000428 <tm_getResponseTimeValue>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d110      	bne.n	800c6aa <mod_sendCmdGetRsp+0x50a>
				{
					sgu8_respCount = 0;
 800c688:	4b13      	ldr	r3, [pc, #76]	; (800c6d8 <mod_sendCmdGetRsp+0x538>)
 800c68a:	2200      	movs	r2, #0
 800c68c:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c68e:	480e      	ldr	r0, [pc, #56]	; (800c6c8 <mod_sendCmdGetRsp+0x528>)
 800c690:	2100      	movs	r1, #0
 800c692:	2240      	movs	r2, #64	; 0x40
 800c694:	f005 fad9 	bl	8011c4a <memset>
					tm_clearResponseTime();
 800c698:	f7f3 fed2 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800c69c:	2306      	movs	r3, #6
 800c69e:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c6a2:	4b0e      	ldr	r3, [pc, #56]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c6a4:	2201      	movs	r2, #1
 800c6a6:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 800c6a8:	e007      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>
 800c6aa:	e006      	b.n	800c6ba <mod_sendCmdGetRsp+0x51a>

		default:
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c6ac:	4b0b      	ldr	r3, [pc, #44]	; (800c6dc <mod_sendCmdGetRsp+0x53c>)
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_INPROGRESS;
 800c6b2:	2304      	movs	r3, #4
 800c6b4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		break;
 800c6b8:	bf00      	nop
	}

	return len_retStatus;
 800c6ba:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
}
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f207 4724 	addw	r7, r7, #1060	; 0x424
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd90      	pop	{r4, r7, pc}
 800c6c8:	1fff4704 	.word	0x1fff4704
 800c6cc:	0801435c 	.word	0x0801435c
 800c6d0:	08014368 	.word	0x08014368
 800c6d4:	1fff47a6 	.word	0x1fff47a6
 800c6d8:	1fff47a4 	.word	0x1fff47a4
 800c6dc:	1ffea509 	.word	0x1ffea509
 800c6e0:	0801436c 	.word	0x0801436c
 800c6e4:	1fff47a8 	.word	0x1fff47a8
 800c6e8:	1ffea518 	.word	0x1ffea518
 800c6ec:	08014378 	.word	0x08014378

0800c6f0 <mod_echoOff>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_echoOff(void)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b082      	sub	sp, #8
 800c6f4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c6f6:	2304      	movs	r3, #4
 800c6f8:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ECHO_OFF, (uint8_t *) NEW_LINE);
 800c6fa:	2003      	movs	r0, #3
 800c6fc:	4913      	ldr	r1, [pc, #76]	; (800c74c <mod_echoOff+0x5c>)
 800c6fe:	f7ff fd4f 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c702:	4603      	mov	r3, r0
 800c704:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c706:	79fb      	ldrb	r3, [r7, #7]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	d103      	bne.n	800c714 <mod_echoOff+0x24>
	{
		lsu8_retryCnt = 0;
 800c70c:	4b10      	ldr	r3, [pc, #64]	; (800c750 <mod_echoOff+0x60>)
 800c70e:	2200      	movs	r2, #0
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	e016      	b.n	800c742 <mod_echoOff+0x52>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c714:	79fb      	ldrb	r3, [r7, #7]
 800c716:	2b04      	cmp	r3, #4
 800c718:	d013      	beq.n	800c742 <mod_echoOff+0x52>
	{
		lsu8_retryCnt++;
 800c71a:	4b0d      	ldr	r3, [pc, #52]	; (800c750 <mod_echoOff+0x60>)
 800c71c:	781b      	ldrb	r3, [r3, #0]
 800c71e:	3301      	adds	r3, #1
 800c720:	b2da      	uxtb	r2, r3
 800c722:	4b0b      	ldr	r3, [pc, #44]	; (800c750 <mod_echoOff+0x60>)
 800c724:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c726:	4b0a      	ldr	r3, [pc, #40]	; (800c750 <mod_echoOff+0x60>)
 800c728:	781b      	ldrb	r3, [r3, #0]
 800c72a:	2b02      	cmp	r3, #2
 800c72c:	d802      	bhi.n	800c734 <mod_echoOff+0x44>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c72e:	2304      	movs	r3, #4
 800c730:	71fb      	strb	r3, [r7, #7]
 800c732:	e006      	b.n	800c742 <mod_echoOff+0x52>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c734:	4b06      	ldr	r3, [pc, #24]	; (800c750 <mod_echoOff+0x60>)
 800c736:	781b      	ldrb	r3, [r3, #0]
 800c738:	2b03      	cmp	r3, #3
 800c73a:	d902      	bls.n	800c742 <mod_echoOff+0x52>
		{
			lsu8_retryCnt = 0;
 800c73c:	4b04      	ldr	r3, [pc, #16]	; (800c750 <mod_echoOff+0x60>)
 800c73e:	2200      	movs	r2, #0
 800c740:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c742:	79fb      	ldrb	r3, [r7, #7]
}
 800c744:	4618      	mov	r0, r3
 800c746:	3708      	adds	r7, #8
 800c748:	46bd      	mov	sp, r7
 800c74a:	bd80      	pop	{r7, pc}
 800c74c:	0801437c 	.word	0x0801437c
 800c750:	1fff47b2 	.word	0x1fff47b2

0800c754 <mod_setUrcPort>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setUrcPort(void)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c75a:	2304      	movs	r3, #4
 800c75c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "\"usbat\"\r\n";
 800c75e:	4a17      	ldr	r2, [pc, #92]	; (800c7bc <mod_setUrcPort+0x68>)
 800c760:	1d3b      	adds	r3, r7, #4
 800c762:	ca07      	ldmia	r2, {r0, r1, r2}
 800c764:	c303      	stmia	r3!, {r0, r1}
 800c766:	801a      	strh	r2, [r3, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SET_URC_PRT, lu8arr_param);
 800c768:	1d3b      	adds	r3, r7, #4
 800c76a:	2002      	movs	r0, #2
 800c76c:	4619      	mov	r1, r3
 800c76e:	f7ff fd17 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c772:	4603      	mov	r3, r0
 800c774:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c776:	7bfb      	ldrb	r3, [r7, #15]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d103      	bne.n	800c784 <mod_setUrcPort+0x30>
	{
		lsu8_retryCnt = 0;
 800c77c:	4b10      	ldr	r3, [pc, #64]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c77e:	2200      	movs	r2, #0
 800c780:	701a      	strb	r2, [r3, #0]
 800c782:	e016      	b.n	800c7b2 <mod_setUrcPort+0x5e>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c784:	7bfb      	ldrb	r3, [r7, #15]
 800c786:	2b04      	cmp	r3, #4
 800c788:	d013      	beq.n	800c7b2 <mod_setUrcPort+0x5e>
	{
		lsu8_retryCnt++;
 800c78a:	4b0d      	ldr	r3, [pc, #52]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c78c:	781b      	ldrb	r3, [r3, #0]
 800c78e:	3301      	adds	r3, #1
 800c790:	b2da      	uxtb	r2, r3
 800c792:	4b0b      	ldr	r3, [pc, #44]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c794:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c796:	4b0a      	ldr	r3, [pc, #40]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c798:	781b      	ldrb	r3, [r3, #0]
 800c79a:	2b02      	cmp	r3, #2
 800c79c:	d802      	bhi.n	800c7a4 <mod_setUrcPort+0x50>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c79e:	2304      	movs	r3, #4
 800c7a0:	73fb      	strb	r3, [r7, #15]
 800c7a2:	e006      	b.n	800c7b2 <mod_setUrcPort+0x5e>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c7a4:	4b06      	ldr	r3, [pc, #24]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d902      	bls.n	800c7b2 <mod_setUrcPort+0x5e>
		{
			lsu8_retryCnt = 0;
 800c7ac:	4b04      	ldr	r3, [pc, #16]	; (800c7c0 <mod_setUrcPort+0x6c>)
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c7b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	3710      	adds	r7, #16
 800c7b8:	46bd      	mov	sp, r7
 800c7ba:	bd80      	pop	{r7, pc}
 800c7bc:	08014380 	.word	0x08014380
 800c7c0:	1fff47b3 	.word	0x1fff47b3

0800c7c4 <mod_setFlowCtrl>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setFlowCtrl(void)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c7ca:	2304      	movs	r3, #4
 800c7cc:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "0,0\r\n";	//0,0 ---> none, none
 800c7ce:	4a1a      	ldr	r2, [pc, #104]	; (800c838 <mod_setFlowCtrl+0x74>)
 800c7d0:	1d3b      	adds	r3, r7, #4
 800c7d2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c7d6:	6018      	str	r0, [r3, #0]
 800c7d8:	3304      	adds	r3, #4
 800c7da:	8019      	strh	r1, [r3, #0]
 800c7dc:	2300      	movs	r3, #0
 800c7de:	817b      	strh	r3, [r7, #10]
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	81bb      	strh	r3, [r7, #12]
	//uint8_t lu8arr_param[10] = "2,2\r\n";	//0,0 ---> RTS, CTS

	len_retStatus = mod_sendCmdGetRsp(E_IDX_HW_FLWCTRL, lu8arr_param);
 800c7e4:	1d3b      	adds	r3, r7, #4
 800c7e6:	2004      	movs	r0, #4
 800c7e8:	4619      	mov	r1, r3
 800c7ea:	f7ff fcd9 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c7f2:	7bfb      	ldrb	r3, [r7, #15]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d103      	bne.n	800c800 <mod_setFlowCtrl+0x3c>
	{
		lsu8_retryCnt = 0;
 800c7f8:	4b10      	ldr	r3, [pc, #64]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c7fa:	2200      	movs	r2, #0
 800c7fc:	701a      	strb	r2, [r3, #0]
 800c7fe:	e016      	b.n	800c82e <mod_setFlowCtrl+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c800:	7bfb      	ldrb	r3, [r7, #15]
 800c802:	2b04      	cmp	r3, #4
 800c804:	d013      	beq.n	800c82e <mod_setFlowCtrl+0x6a>
	{
		lsu8_retryCnt++;
 800c806:	4b0d      	ldr	r3, [pc, #52]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	4b0b      	ldr	r3, [pc, #44]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c810:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c812:	4b0a      	ldr	r3, [pc, #40]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c814:	781b      	ldrb	r3, [r3, #0]
 800c816:	2b02      	cmp	r3, #2
 800c818:	d802      	bhi.n	800c820 <mod_setFlowCtrl+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c81a:	2304      	movs	r3, #4
 800c81c:	73fb      	strb	r3, [r7, #15]
 800c81e:	e006      	b.n	800c82e <mod_setFlowCtrl+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c820:	4b06      	ldr	r3, [pc, #24]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c822:	781b      	ldrb	r3, [r3, #0]
 800c824:	2b03      	cmp	r3, #3
 800c826:	d902      	bls.n	800c82e <mod_setFlowCtrl+0x6a>
		{
			lsu8_retryCnt = 0;
 800c828:	4b04      	ldr	r3, [pc, #16]	; (800c83c <mod_setFlowCtrl+0x78>)
 800c82a:	2200      	movs	r2, #0
 800c82c:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c82e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c830:	4618      	mov	r0, r3
 800c832:	3710      	adds	r7, #16
 800c834:	46bd      	mov	sp, r7
 800c836:	bd80      	pop	{r7, pc}
 800c838:	0801438c 	.word	0x0801438c
 800c83c:	1fff47b4 	.word	0x1fff47b4

0800c840 <mod_extractModInfo>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractModInfo(void)
{
 800c840:	b5b0      	push	{r4, r5, r7, lr}
 800c842:	b084      	sub	sp, #16
 800c844:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c846:	2304      	movs	r3, #4
 800c848:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c84e:	2300      	movs	r3, #0
 800c850:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FEATCH_MOD_INFO, (uint8_t *) NEW_LINE);
 800c852:	2005      	movs	r0, #5
 800c854:	4927      	ldr	r1, [pc, #156]	; (800c8f4 <mod_extractModInfo+0xb4>)
 800c856:	f7ff fca3 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c85e:	7bfb      	ldrb	r3, [r7, #15]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d12b      	bne.n	800c8bc <mod_extractModInfo+0x7c>
	{
		lsu8_retryCnt = 0;
 800c864:	4b24      	ldr	r3, [pc, #144]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c866:	2200      	movs	r2, #0
 800c868:	701a      	strb	r2, [r3, #0]
		if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) PRODCUT_NAME)))
 800c86a:	4824      	ldr	r0, [pc, #144]	; (800c8fc <mod_extractModInfo+0xbc>)
 800c86c:	4924      	ldr	r1, [pc, #144]	; (800c900 <mod_extractModInfo+0xc0>)
 800c86e:	f005 fd0e 	bl	801228e <strstr>
 800c872:	4603      	mov	r3, r0
 800c874:	2b00      	cmp	r3, #0
 800c876:	d01e      	beq.n	800c8b6 <mod_extractModInfo+0x76>
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c878:	1d3b      	adds	r3, r7, #4
 800c87a:	4820      	ldr	r0, [pc, #128]	; (800c8fc <mod_extractModInfo+0xbc>)
 800c87c:	4921      	ldr	r1, [pc, #132]	; (800c904 <mod_extractModInfo+0xc4>)
 800c87e:	461a      	mov	r2, r3
 800c880:	f005 fd7b 	bl	801237a <strtok_r>
 800c884:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	3301      	adds	r3, #1
 800c88a:	607b      	str	r3, [r7, #4]
			if (NULL != lu8p_temp)
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00e      	beq.n	800c8b0 <mod_extractModInfo+0x70>
			{
				memcpy(gu8arr_productRevision, lu8p_saveptr, PRO_REVISION_SIZE);
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	4a1c      	ldr	r2, [pc, #112]	; (800c908 <mod_extractModInfo+0xc8>)
 800c896:	4614      	mov	r4, r2
 800c898:	461d      	mov	r5, r3
 800c89a:	6828      	ldr	r0, [r5, #0]
 800c89c:	6869      	ldr	r1, [r5, #4]
 800c89e:	68aa      	ldr	r2, [r5, #8]
 800c8a0:	68eb      	ldr	r3, [r5, #12]
 800c8a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c8a4:	8a2b      	ldrh	r3, [r5, #16]
 800c8a6:	7caa      	ldrb	r2, [r5, #18]
 800c8a8:	8023      	strh	r3, [r4, #0]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	70a3      	strb	r3, [r4, #2]
 800c8ae:	e01c      	b.n	800c8ea <mod_extractModInfo+0xaa>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c8b0:	2302      	movs	r3, #2
 800c8b2:	73fb      	strb	r3, [r7, #15]
 800c8b4:	e019      	b.n	800c8ea <mod_extractModInfo+0xaa>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c8b6:	2302      	movs	r3, #2
 800c8b8:	73fb      	strb	r3, [r7, #15]
 800c8ba:	e016      	b.n	800c8ea <mod_extractModInfo+0xaa>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c8bc:	7bfb      	ldrb	r3, [r7, #15]
 800c8be:	2b04      	cmp	r3, #4
 800c8c0:	d013      	beq.n	800c8ea <mod_extractModInfo+0xaa>
	{
		lsu8_retryCnt++;
 800c8c2:	4b0d      	ldr	r3, [pc, #52]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	3301      	adds	r3, #1
 800c8c8:	b2da      	uxtb	r2, r3
 800c8ca:	4b0b      	ldr	r3, [pc, #44]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c8cc:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c8ce:	4b0a      	ldr	r3, [pc, #40]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c8d0:	781b      	ldrb	r3, [r3, #0]
 800c8d2:	2b02      	cmp	r3, #2
 800c8d4:	d802      	bhi.n	800c8dc <mod_extractModInfo+0x9c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c8d6:	2304      	movs	r3, #4
 800c8d8:	73fb      	strb	r3, [r7, #15]
 800c8da:	e006      	b.n	800c8ea <mod_extractModInfo+0xaa>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c8dc:	4b06      	ldr	r3, [pc, #24]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	2b03      	cmp	r3, #3
 800c8e2:	d902      	bls.n	800c8ea <mod_extractModInfo+0xaa>
		{
			lsu8_retryCnt = 0;
 800c8e4:	4b04      	ldr	r3, [pc, #16]	; (800c8f8 <mod_extractModInfo+0xb8>)
 800c8e6:	2200      	movs	r2, #0
 800c8e8:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c8ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	3710      	adds	r7, #16
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bdb0      	pop	{r4, r5, r7, pc}
 800c8f4:	0801437c 	.word	0x0801437c
 800c8f8:	1fff47b5 	.word	0x1fff47b5
 800c8fc:	1fff4704 	.word	0x1fff4704
 800c900:	08014398 	.word	0x08014398
 800c904:	08014368 	.word	0x08014368
 800c908:	1fff4744 	.word	0x1fff4744

0800c90c <mod_enableSimDetection>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimDetection(void)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b084      	sub	sp, #16
 800c910:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c912:	2304      	movs	r3, #4
 800c914:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1,0\r\n";
 800c916:	4a1a      	ldr	r2, [pc, #104]	; (800c980 <mod_enableSimDetection+0x74>)
 800c918:	1d3b      	adds	r3, r7, #4
 800c91a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c91e:	6018      	str	r0, [r3, #0]
 800c920:	3304      	adds	r3, #4
 800c922:	8019      	strh	r1, [r3, #0]
 800c924:	2300      	movs	r3, #0
 800c926:	817b      	strh	r3, [r7, #10]
 800c928:	2300      	movs	r3, #0
 800c92a:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_DETECTION, lu8arr_param);
 800c92c:	1d3b      	adds	r3, r7, #4
 800c92e:	2006      	movs	r0, #6
 800c930:	4619      	mov	r1, r3
 800c932:	f7ff fc35 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c936:	4603      	mov	r3, r0
 800c938:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c93a:	7bfb      	ldrb	r3, [r7, #15]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d103      	bne.n	800c948 <mod_enableSimDetection+0x3c>
	{
		lsu8_retryCnt = 0;
 800c940:	4b10      	ldr	r3, [pc, #64]	; (800c984 <mod_enableSimDetection+0x78>)
 800c942:	2200      	movs	r2, #0
 800c944:	701a      	strb	r2, [r3, #0]
 800c946:	e016      	b.n	800c976 <mod_enableSimDetection+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c948:	7bfb      	ldrb	r3, [r7, #15]
 800c94a:	2b04      	cmp	r3, #4
 800c94c:	d013      	beq.n	800c976 <mod_enableSimDetection+0x6a>
	{
		lsu8_retryCnt++;
 800c94e:	4b0d      	ldr	r3, [pc, #52]	; (800c984 <mod_enableSimDetection+0x78>)
 800c950:	781b      	ldrb	r3, [r3, #0]
 800c952:	3301      	adds	r3, #1
 800c954:	b2da      	uxtb	r2, r3
 800c956:	4b0b      	ldr	r3, [pc, #44]	; (800c984 <mod_enableSimDetection+0x78>)
 800c958:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c95a:	4b0a      	ldr	r3, [pc, #40]	; (800c984 <mod_enableSimDetection+0x78>)
 800c95c:	781b      	ldrb	r3, [r3, #0]
 800c95e:	2b02      	cmp	r3, #2
 800c960:	d802      	bhi.n	800c968 <mod_enableSimDetection+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c962:	2304      	movs	r3, #4
 800c964:	73fb      	strb	r3, [r7, #15]
 800c966:	e006      	b.n	800c976 <mod_enableSimDetection+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c968:	4b06      	ldr	r3, [pc, #24]	; (800c984 <mod_enableSimDetection+0x78>)
 800c96a:	781b      	ldrb	r3, [r3, #0]
 800c96c:	2b03      	cmp	r3, #3
 800c96e:	d902      	bls.n	800c976 <mod_enableSimDetection+0x6a>
		{
			lsu8_retryCnt = 0;
 800c970:	4b04      	ldr	r3, [pc, #16]	; (800c984 <mod_enableSimDetection+0x78>)
 800c972:	2200      	movs	r2, #0
 800c974:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c976:	7bfb      	ldrb	r3, [r7, #15]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	080143a4 	.word	0x080143a4
 800c984:	1fff47b6 	.word	0x1fff47b6

0800c988 <mod_enableSimStatusReport>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimStatusReport(void)
{
 800c988:	b580      	push	{r7, lr}
 800c98a:	b084      	sub	sp, #16
 800c98c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c98e:	2304      	movs	r3, #4
 800c990:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1\r\n";
 800c992:	4b18      	ldr	r3, [pc, #96]	; (800c9f4 <mod_enableSimStatusReport+0x6c>)
 800c994:	607b      	str	r3, [r7, #4]
 800c996:	2300      	movs	r3, #0
 800c998:	60bb      	str	r3, [r7, #8]
 800c99a:	2300      	movs	r3, #0
 800c99c:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_STATUS, lu8arr_param);
 800c99e:	1d3b      	adds	r3, r7, #4
 800c9a0:	2007      	movs	r0, #7
 800c9a2:	4619      	mov	r1, r3
 800c9a4:	f7ff fbfc 	bl	800c1a0 <mod_sendCmdGetRsp>
 800c9a8:	4603      	mov	r3, r0
 800c9aa:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c9ac:	7bfb      	ldrb	r3, [r7, #15]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d103      	bne.n	800c9ba <mod_enableSimStatusReport+0x32>
	{
		lsu8_retryCnt = 0;
 800c9b2:	4b11      	ldr	r3, [pc, #68]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9b4:	2200      	movs	r2, #0
 800c9b6:	701a      	strb	r2, [r3, #0]
 800c9b8:	e016      	b.n	800c9e8 <mod_enableSimStatusReport+0x60>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c9ba:	7bfb      	ldrb	r3, [r7, #15]
 800c9bc:	2b04      	cmp	r3, #4
 800c9be:	d013      	beq.n	800c9e8 <mod_enableSimStatusReport+0x60>
	{
		lsu8_retryCnt++;
 800c9c0:	4b0d      	ldr	r3, [pc, #52]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9c2:	781b      	ldrb	r3, [r3, #0]
 800c9c4:	3301      	adds	r3, #1
 800c9c6:	b2da      	uxtb	r2, r3
 800c9c8:	4b0b      	ldr	r3, [pc, #44]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9ca:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c9cc:	4b0a      	ldr	r3, [pc, #40]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9ce:	781b      	ldrb	r3, [r3, #0]
 800c9d0:	2b02      	cmp	r3, #2
 800c9d2:	d802      	bhi.n	800c9da <mod_enableSimStatusReport+0x52>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c9d4:	2304      	movs	r3, #4
 800c9d6:	73fb      	strb	r3, [r7, #15]
 800c9d8:	e006      	b.n	800c9e8 <mod_enableSimStatusReport+0x60>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c9da:	4b07      	ldr	r3, [pc, #28]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9dc:	781b      	ldrb	r3, [r3, #0]
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d902      	bls.n	800c9e8 <mod_enableSimStatusReport+0x60>
		{
			lsu8_retryCnt = 0;
 800c9e2:	4b05      	ldr	r3, [pc, #20]	; (800c9f8 <mod_enableSimStatusReport+0x70>)
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	3710      	adds	r7, #16
 800c9ee:	46bd      	mov	sp, r7
 800c9f0:	bd80      	pop	{r7, pc}
 800c9f2:	bf00      	nop
 800c9f4:	000a0d31 	.word	0x000a0d31
 800c9f8:	1fff47b7 	.word	0x1fff47b7

0800c9fc <mod_checkSimStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_checkSimStatus(void)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b084      	sub	sp, #16
 800ca00:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ca02:	2304      	movs	r3, #4
 800ca04:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800ca06:	2300      	movs	r3, #0
 800ca08:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
 800ca0e:	2008      	movs	r0, #8
 800ca10:	4933      	ldr	r1, [pc, #204]	; (800cae0 <mod_checkSimStatus+0xe4>)
 800ca12:	f7ff fbc5 	bl	800c1a0 <mod_sendCmdGetRsp>
 800ca16:	4603      	mov	r3, r0
 800ca18:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800ca1a:	7bfb      	ldrb	r3, [r7, #15]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d143      	bne.n	800caa8 <mod_checkSimStatus+0xac>
	{
		lsu8_retryCnt = 0;
 800ca20:	4b30      	ldr	r3, [pc, #192]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800ca22:	2200      	movs	r2, #0
 800ca24:	701a      	strb	r2, [r3, #0]
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800ca26:	4830      	ldr	r0, [pc, #192]	; (800cae8 <mod_checkSimStatus+0xec>)
 800ca28:	4930      	ldr	r1, [pc, #192]	; (800caec <mod_checkSimStatus+0xf0>)
 800ca2a:	f005 fc30 	bl	801228e <strstr>
 800ca2e:	4603      	mov	r3, r0

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		if ((NULL
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d036      	beq.n	800caa2 <mod_checkSimStatus+0xa6>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_CHECK_SIM_STATUS].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800ca34:	1d3b      	adds	r3, r7, #4
 800ca36:	482c      	ldr	r0, [pc, #176]	; (800cae8 <mod_checkSimStatus+0xec>)
 800ca38:	492d      	ldr	r1, [pc, #180]	; (800caf0 <mod_checkSimStatus+0xf4>)
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	f005 fc9d 	bl	801237a <strtok_r>
 800ca40:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			if (NULL != lu8p_temp)
 800ca42:	68bb      	ldr	r3, [r7, #8]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d029      	beq.n	800ca9c <mod_checkSimStatus+0xa0>
			{
				lu8p_temp = (uint8_t *) strchr((const char*) lu8p_saveptr, ',');
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	212c      	movs	r1, #44	; 0x2c
 800ca4e:	f005 fbee 	bl	801222e <strchr>
 800ca52:	60b8      	str	r0, [r7, #8]
				if (NULL != lu8p_temp)
 800ca54:	68bb      	ldr	r3, [r7, #8]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01d      	beq.n	800ca96 <mod_checkSimStatus+0x9a>
				{
					lu8p_temp = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800ca5a:	1d3b      	adds	r3, r7, #4
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	4925      	ldr	r1, [pc, #148]	; (800caf4 <mod_checkSimStatus+0xf8>)
 800ca60:	461a      	mov	r2, r3
 800ca62:	f005 fc8a 	bl	801237a <strtok_r>
 800ca66:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_saveptr);

					gst_deviceStatus.mb_isSimInserted = (uint8_t) atoi(
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	f005 f8b2 	bl	8011bd4 <atoi>
 800ca70:	4603      	mov	r3, r0
 800ca72:	b2db      	uxtb	r3, r3
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	bf14      	ite	ne
 800ca78:	2301      	movne	r3, #1
 800ca7a:	2300      	moveq	r3, #0
 800ca7c:	b2da      	uxtb	r2, r3
 800ca7e:	4b1e      	ldr	r3, [pc, #120]	; (800caf8 <mod_checkSimStatus+0xfc>)
 800ca80:	705a      	strb	r2, [r3, #1]
							(const char*) lu8p_saveptr);

					if (true == gst_deviceStatus.mb_isSimInserted)
 800ca82:	4b1d      	ldr	r3, [pc, #116]	; (800caf8 <mod_checkSimStatus+0xfc>)
 800ca84:	785b      	ldrb	r3, [r3, #1]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d002      	beq.n	800ca90 <mod_checkSimStatus+0x94>
					{
						len_retStatus = E_RET_SUCCESS;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	73fb      	strb	r3, [r7, #15]
 800ca8e:	e022      	b.n	800cad6 <mod_checkSimStatus+0xda>
					}
					else
					{
						len_retStatus = E_RET_INPROGRESS;
 800ca90:	2304      	movs	r3, #4
 800ca92:	73fb      	strb	r3, [r7, #15]
 800ca94:	e01f      	b.n	800cad6 <mod_checkSimStatus+0xda>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800ca96:	2302      	movs	r3, #2
 800ca98:	73fb      	strb	r3, [r7, #15]
 800ca9a:	e01c      	b.n	800cad6 <mod_checkSimStatus+0xda>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800ca9c:	2302      	movs	r3, #2
 800ca9e:	73fb      	strb	r3, [r7, #15]
 800caa0:	e019      	b.n	800cad6 <mod_checkSimStatus+0xda>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800caa2:	2302      	movs	r3, #2
 800caa4:	73fb      	strb	r3, [r7, #15]
 800caa6:	e016      	b.n	800cad6 <mod_checkSimStatus+0xda>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800caa8:	7bfb      	ldrb	r3, [r7, #15]
 800caaa:	2b04      	cmp	r3, #4
 800caac:	d013      	beq.n	800cad6 <mod_checkSimStatus+0xda>
	{
		lsu8_retryCnt++;
 800caae:	4b0d      	ldr	r3, [pc, #52]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800cab0:	781b      	ldrb	r3, [r3, #0]
 800cab2:	3301      	adds	r3, #1
 800cab4:	b2da      	uxtb	r2, r3
 800cab6:	4b0b      	ldr	r3, [pc, #44]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800cab8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800caba:	4b0a      	ldr	r3, [pc, #40]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800cabc:	781b      	ldrb	r3, [r3, #0]
 800cabe:	2b02      	cmp	r3, #2
 800cac0:	d802      	bhi.n	800cac8 <mod_checkSimStatus+0xcc>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cac2:	2304      	movs	r3, #4
 800cac4:	73fb      	strb	r3, [r7, #15]
 800cac6:	e006      	b.n	800cad6 <mod_checkSimStatus+0xda>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cac8:	4b06      	ldr	r3, [pc, #24]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	2b03      	cmp	r3, #3
 800cace:	d902      	bls.n	800cad6 <mod_checkSimStatus+0xda>
		{
			lsu8_retryCnt = 0;
 800cad0:	4b04      	ldr	r3, [pc, #16]	; (800cae4 <mod_checkSimStatus+0xe8>)
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cad6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	0801437c 	.word	0x0801437c
 800cae4:	1fff47b8 	.word	0x1fff47b8
 800cae8:	1fff4704 	.word	0x1fff4704
 800caec:	1ffece72 	.word	0x1ffece72
 800caf0:	08014368 	.word	0x08014368
 800caf4:	080143b0 	.word	0x080143b0
 800caf8:	1ffea50c 	.word	0x1ffea50c

0800cafc <mod_cpinCheck>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_cpinCheck(void)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b082      	sub	sp, #8
 800cb00:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cb02:	2304      	movs	r3, #4
 800cb04:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cb06:	2300      	movs	r3, #0
 800cb08:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CPIN_CHECK, (uint8_t *) NEW_LINE);
 800cb0a:	2009      	movs	r0, #9
 800cb0c:	491a      	ldr	r1, [pc, #104]	; (800cb78 <mod_cpinCheck+0x7c>)
 800cb0e:	f7ff fb47 	bl	800c1a0 <mod_sendCmdGetRsp>
 800cb12:	4603      	mov	r3, r0
 800cb14:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d110      	bne.n	800cb3e <mod_cpinCheck+0x42>
	{
		lsu8_retryCnt = 0;
 800cb1c:	4b17      	ldr	r3, [pc, #92]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb1e:	2200      	movs	r2, #0
 800cb20:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "READY");
 800cb22:	4817      	ldr	r0, [pc, #92]	; (800cb80 <mod_cpinCheck+0x84>)
 800cb24:	4917      	ldr	r1, [pc, #92]	; (800cb84 <mod_cpinCheck+0x88>)
 800cb26:	f005 fbb2 	bl	801228e <strstr>
 800cb2a:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	2b00      	cmp	r3, #0
 800cb30:	d002      	beq.n	800cb38 <mod_cpinCheck+0x3c>
		{
			len_retStatus = E_RET_SUCCESS;
 800cb32:	2300      	movs	r3, #0
 800cb34:	71fb      	strb	r3, [r7, #7]
 800cb36:	e019      	b.n	800cb6c <mod_cpinCheck+0x70>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cb38:	2302      	movs	r3, #2
 800cb3a:	71fb      	strb	r3, [r7, #7]
 800cb3c:	e016      	b.n	800cb6c <mod_cpinCheck+0x70>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	2b04      	cmp	r3, #4
 800cb42:	d013      	beq.n	800cb6c <mod_cpinCheck+0x70>
	{
		lsu8_retryCnt++;
 800cb44:	4b0d      	ldr	r3, [pc, #52]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb46:	781b      	ldrb	r3, [r3, #0]
 800cb48:	3301      	adds	r3, #1
 800cb4a:	b2da      	uxtb	r2, r3
 800cb4c:	4b0b      	ldr	r3, [pc, #44]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb4e:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cb50:	4b0a      	ldr	r3, [pc, #40]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb52:	781b      	ldrb	r3, [r3, #0]
 800cb54:	2b02      	cmp	r3, #2
 800cb56:	d802      	bhi.n	800cb5e <mod_cpinCheck+0x62>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cb58:	2304      	movs	r3, #4
 800cb5a:	71fb      	strb	r3, [r7, #7]
 800cb5c:	e006      	b.n	800cb6c <mod_cpinCheck+0x70>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cb5e:	4b07      	ldr	r3, [pc, #28]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb60:	781b      	ldrb	r3, [r3, #0]
 800cb62:	2b03      	cmp	r3, #3
 800cb64:	d902      	bls.n	800cb6c <mod_cpinCheck+0x70>
		{
			lsu8_retryCnt = 0;
 800cb66:	4b05      	ldr	r3, [pc, #20]	; (800cb7c <mod_cpinCheck+0x80>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cb6c:	79fb      	ldrb	r3, [r7, #7]
}
 800cb6e:	4618      	mov	r0, r3
 800cb70:	3708      	adds	r7, #8
 800cb72:	46bd      	mov	sp, r7
 800cb74:	bd80      	pop	{r7, pc}
 800cb76:	bf00      	nop
 800cb78:	0801437c 	.word	0x0801437c
 800cb7c:	1fff47b9 	.word	0x1fff47b9
 800cb80:	1fff4704 	.word	0x1fff4704
 800cb84:	080143b4 	.word	0x080143b4

0800cb88 <mod_extractIMEI>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractIMEI(void)
{
 800cb88:	b590      	push	{r4, r7, lr}
 800cb8a:	b087      	sub	sp, #28
 800cb8c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cb8e:	2304      	movs	r3, #4
 800cb90:	75fb      	strb	r3, [r7, #23]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8_index = 0;
 800cb92:	2300      	movs	r3, #0
 800cb94:	75bb      	strb	r3, [r7, #22]
	uint8_t lu8ar_TempIMEI[IMEI_SIZE] = { 0 };
 800cb96:	1d3b      	adds	r3, r7, #4
 800cb98:	2200      	movs	r2, #0
 800cb9a:	601a      	str	r2, [r3, #0]
 800cb9c:	3304      	adds	r3, #4
 800cb9e:	2200      	movs	r2, #0
 800cba0:	601a      	str	r2, [r3, #0]
 800cba2:	3304      	adds	r3, #4
 800cba4:	2200      	movs	r2, #0
 800cba6:	601a      	str	r2, [r3, #0]
 800cba8:	3304      	adds	r3, #4
 800cbaa:	2200      	movs	r2, #0
 800cbac:	801a      	strh	r2, [r3, #0]
 800cbae:	3302      	adds	r3, #2
 800cbb0:	2200      	movs	r2, #0
 800cbb2:	701a      	strb	r2, [r3, #0]
 800cbb4:	3301      	adds	r3, #1

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_IMEI, (uint8_t *) NEW_LINE);
 800cbb6:	200a      	movs	r0, #10
 800cbb8:	492c      	ldr	r1, [pc, #176]	; (800cc6c <mod_extractIMEI+0xe4>)
 800cbba:	f7ff faf1 	bl	800c1a0 <mod_sendCmdGetRsp>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	75fb      	strb	r3, [r7, #23]
	if (E_RET_SUCCESS == len_retStatus)
 800cbc2:	7dfb      	ldrb	r3, [r7, #23]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d134      	bne.n	800cc32 <mod_extractIMEI+0xaa>
	{
		lsu8_retryCnt = 0;
 800cbc8:	4b29      	ldr	r3, [pc, #164]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cbca:	2200      	movs	r2, #0
 800cbcc:	701a      	strb	r2, [r3, #0]
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
 800cbce:	1d3b      	adds	r3, r7, #4
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	4928      	ldr	r1, [pc, #160]	; (800cc74 <mod_extractIMEI+0xec>)
 800cbd4:	220f      	movs	r2, #15
 800cbd6:	f005 f82d 	bl	8011c34 <memcpy>
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800cbda:	2300      	movs	r3, #0
 800cbdc:	75bb      	strb	r3, [r7, #22]
 800cbde:	e015      	b.n	800cc0c <mod_extractIMEI+0x84>
		{
			if (!('0' <= lu8ar_TempIMEI[lu8_index] && '9' >= lu8ar_TempIMEI[lu8_index]))
 800cbe0:	7dbb      	ldrb	r3, [r7, #22]
 800cbe2:	f107 0218 	add.w	r2, r7, #24
 800cbe6:	4413      	add	r3, r2
 800cbe8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800cbec:	2b2f      	cmp	r3, #47	; 0x2f
 800cbee:	d907      	bls.n	800cc00 <mod_extractIMEI+0x78>
 800cbf0:	7dbb      	ldrb	r3, [r7, #22]
 800cbf2:	f107 0218 	add.w	r2, r7, #24
 800cbf6:	4413      	add	r3, r2
 800cbf8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800cbfc:	2b39      	cmp	r3, #57	; 0x39
 800cbfe:	d902      	bls.n	800cc06 <mod_extractIMEI+0x7e>
			{
				len_retStatus = E_RET_FAILED;
 800cc00:	2302      	movs	r3, #2
 800cc02:	75fb      	strb	r3, [r7, #23]
				break;
 800cc04:	e005      	b.n	800cc12 <mod_extractIMEI+0x8a>
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800cc06:	7dbb      	ldrb	r3, [r7, #22]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	75bb      	strb	r3, [r7, #22]
 800cc0c:	7dbb      	ldrb	r3, [r7, #22]
 800cc0e:	2b0e      	cmp	r3, #14
 800cc10:	d9e6      	bls.n	800cbe0 <mod_extractIMEI+0x58>
			{
				len_retStatus = E_RET_FAILED;
				break;
			}
		}
		if (lu8_index >= IMEI_SIZE)
 800cc12:	7dbb      	ldrb	r3, [r7, #22]
 800cc14:	2b0e      	cmp	r3, #14
 800cc16:	d923      	bls.n	800cc60 <mod_extractIMEI+0xd8>
		{
			memcpy((char *) &gu8arr_IMEINum, (const char *) &gu8arr_respBuffer[2],
 800cc18:	4b17      	ldr	r3, [pc, #92]	; (800cc78 <mod_extractIMEI+0xf0>)
 800cc1a:	4a18      	ldr	r2, [pc, #96]	; (800cc7c <mod_extractIMEI+0xf4>)
 800cc1c:	1c94      	adds	r4, r2, #2
 800cc1e:	6820      	ldr	r0, [r4, #0]
 800cc20:	6861      	ldr	r1, [r4, #4]
 800cc22:	68a2      	ldr	r2, [r4, #8]
 800cc24:	c307      	stmia	r3!, {r0, r1, r2}
 800cc26:	89a2      	ldrh	r2, [r4, #12]
 800cc28:	7ba1      	ldrb	r1, [r4, #14]
 800cc2a:	801a      	strh	r2, [r3, #0]
 800cc2c:	460a      	mov	r2, r1
 800cc2e:	709a      	strb	r2, [r3, #2]
 800cc30:	e016      	b.n	800cc60 <mod_extractIMEI+0xd8>
			IMEI_SIZE);	//\r\n skipped
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cc32:	7dfb      	ldrb	r3, [r7, #23]
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d013      	beq.n	800cc60 <mod_extractIMEI+0xd8>
	{
		lsu8_retryCnt++;
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cc42:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cc44:	4b0a      	ldr	r3, [pc, #40]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d802      	bhi.n	800cc52 <mod_extractIMEI+0xca>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cc4c:	2304      	movs	r3, #4
 800cc4e:	75fb      	strb	r3, [r7, #23]
 800cc50:	e006      	b.n	800cc60 <mod_extractIMEI+0xd8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cc52:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d902      	bls.n	800cc60 <mod_extractIMEI+0xd8>
		{
			lsu8_retryCnt = 0;
 800cc5a:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <mod_extractIMEI+0xe8>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800cc60:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	371c      	adds	r7, #28
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd90      	pop	{r4, r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	0801437c 	.word	0x0801437c
 800cc70:	1fff47ba 	.word	0x1fff47ba
 800cc74:	1fff4706 	.word	0x1fff4706
 800cc78:	1fff4758 	.word	0x1fff4758
 800cc7c:	1fff4704 	.word	0x1fff4704

0800cc80 <mod_extractCCID>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractCCID(void)
{
 800cc80:	b5b0      	push	{r4, r5, r7, lr}
 800cc82:	b084      	sub	sp, #16
 800cc84:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cc86:	2304      	movs	r3, #4
 800cc88:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
 800cc92:	200b      	movs	r0, #11
 800cc94:	4927      	ldr	r1, [pc, #156]	; (800cd34 <mod_extractCCID+0xb4>)
 800cc96:	f7ff fa83 	bl	800c1a0 <mod_sendCmdGetRsp>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800cc9e:	7bfb      	ldrb	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d12a      	bne.n	800ccfa <mod_extractCCID+0x7a>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800cca4:	4824      	ldr	r0, [pc, #144]	; (800cd38 <mod_extractCCID+0xb8>)
 800cca6:	4925      	ldr	r1, [pc, #148]	; (800cd3c <mod_extractCCID+0xbc>)
 800cca8:	f005 faf1 	bl	801228e <strstr>
 800ccac:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800ccae:	2b00      	cmp	r3, #0
 800ccb0:	d020      	beq.n	800ccf4 <mod_extractCCID+0x74>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_CCID].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800ccb2:	1d3b      	adds	r3, r7, #4
 800ccb4:	4820      	ldr	r0, [pc, #128]	; (800cd38 <mod_extractCCID+0xb8>)
 800ccb6:	4922      	ldr	r1, [pc, #136]	; (800cd40 <mod_extractCCID+0xc0>)
 800ccb8:	461a      	mov	r2, r3
 800ccba:	f005 fb5e 	bl	801237a <strtok_r>
 800ccbe:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	607b      	str	r3, [r7, #4]

			if (NULL != lu8p_saveptr)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d010      	beq.n	800ccee <mod_extractCCID+0x6e>
			{
				memset(gu8arr_CCIDNum, 0, sizeof(gu8arr_CCIDNum));
 800cccc:	481d      	ldr	r0, [pc, #116]	; (800cd44 <mod_extractCCID+0xc4>)
 800ccce:	2100      	movs	r1, #0
 800ccd0:	2214      	movs	r2, #20
 800ccd2:	f004 ffba 	bl	8011c4a <memset>
				memcpy((char *) &gu8arr_CCIDNum, (const char *) lu8p_saveptr, CCID_SIZE);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	4a1a      	ldr	r2, [pc, #104]	; (800cd44 <mod_extractCCID+0xc4>)
 800ccda:	4614      	mov	r4, r2
 800ccdc:	461d      	mov	r5, r3
 800ccde:	6828      	ldr	r0, [r5, #0]
 800cce0:	6869      	ldr	r1, [r5, #4]
 800cce2:	68aa      	ldr	r2, [r5, #8]
 800cce4:	68eb      	ldr	r3, [r5, #12]
 800cce6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cce8:	6928      	ldr	r0, [r5, #16]
 800ccea:	6020      	str	r0, [r4, #0]
 800ccec:	e01c      	b.n	800cd28 <mod_extractCCID+0xa8>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800ccee:	2302      	movs	r3, #2
 800ccf0:	73fb      	strb	r3, [r7, #15]
 800ccf2:	e019      	b.n	800cd28 <mod_extractCCID+0xa8>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800ccf4:	2302      	movs	r3, #2
 800ccf6:	73fb      	strb	r3, [r7, #15]
 800ccf8:	e016      	b.n	800cd28 <mod_extractCCID+0xa8>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d013      	beq.n	800cd28 <mod_extractCCID+0xa8>
	{
		lsu8_retryCnt++;
 800cd00:	4b11      	ldr	r3, [pc, #68]	; (800cd48 <mod_extractCCID+0xc8>)
 800cd02:	781b      	ldrb	r3, [r3, #0]
 800cd04:	3301      	adds	r3, #1
 800cd06:	b2da      	uxtb	r2, r3
 800cd08:	4b0f      	ldr	r3, [pc, #60]	; (800cd48 <mod_extractCCID+0xc8>)
 800cd0a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cd0c:	4b0e      	ldr	r3, [pc, #56]	; (800cd48 <mod_extractCCID+0xc8>)
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	d802      	bhi.n	800cd1a <mod_extractCCID+0x9a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cd14:	2304      	movs	r3, #4
 800cd16:	73fb      	strb	r3, [r7, #15]
 800cd18:	e006      	b.n	800cd28 <mod_extractCCID+0xa8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cd1a:	4b0b      	ldr	r3, [pc, #44]	; (800cd48 <mod_extractCCID+0xc8>)
 800cd1c:	781b      	ldrb	r3, [r3, #0]
 800cd1e:	2b03      	cmp	r3, #3
 800cd20:	d902      	bls.n	800cd28 <mod_extractCCID+0xa8>
		{
			lsu8_retryCnt = 0;
 800cd22:	4b09      	ldr	r3, [pc, #36]	; (800cd48 <mod_extractCCID+0xc8>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800cd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd2a:	4618      	mov	r0, r3
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bdb0      	pop	{r4, r5, r7, pc}
 800cd32:	bf00      	nop
 800cd34:	0801437c 	.word	0x0801437c
 800cd38:	1fff4704 	.word	0x1fff4704
 800cd3c:	1ffedc5e 	.word	0x1ffedc5e
 800cd40:	08014368 	.word	0x08014368
 800cd44:	1fff4768 	.word	0x1fff4768
 800cd48:	1fff47bb 	.word	0x1fff47bb

0800cd4c <mod_extractNUM>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractNUM(void)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b084      	sub	sp, #16
 800cd50:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cd52:	2304      	movs	r3, #4
 800cd54:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800cd56:	2300      	movs	r3, #0
 800cd58:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
 800cd5e:	200c      	movs	r0, #12
 800cd60:	491c      	ldr	r1, [pc, #112]	; (800cdd4 <mod_extractNUM+0x88>)
 800cd62:	f7ff fa1d 	bl	800c1a0 <mod_sendCmdGetRsp>
 800cd66:	4603      	mov	r3, r0
 800cd68:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800cd6a:	7bfb      	ldrb	r3, [r7, #15]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d114      	bne.n	800cd9a <mod_extractNUM+0x4e>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800cd70:	4819      	ldr	r0, [pc, #100]	; (800cdd8 <mod_extractNUM+0x8c>)
 800cd72:	491a      	ldr	r1, [pc, #104]	; (800cddc <mod_extractNUM+0x90>)
 800cd74:	f005 fa8b 	bl	801228e <strstr>
 800cd78:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00a      	beq.n	800cd94 <mod_extractNUM+0x48>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_NUM].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800cd7e:	1d3b      	adds	r3, r7, #4
 800cd80:	4815      	ldr	r0, [pc, #84]	; (800cdd8 <mod_extractNUM+0x8c>)
 800cd82:	4917      	ldr	r1, [pc, #92]	; (800cde0 <mod_extractNUM+0x94>)
 800cd84:	461a      	mov	r2, r3
 800cd86:	f005 faf8 	bl	801237a <strtok_r>
 800cd8a:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);

			lu8p_saveptr++;
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	3301      	adds	r3, #1
 800cd90:	607b      	str	r3, [r7, #4]
 800cd92:	e019      	b.n	800cdc8 <mod_extractNUM+0x7c>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cd94:	2302      	movs	r3, #2
 800cd96:	73fb      	strb	r3, [r7, #15]
 800cd98:	e016      	b.n	800cdc8 <mod_extractNUM+0x7c>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cd9a:	7bfb      	ldrb	r3, [r7, #15]
 800cd9c:	2b04      	cmp	r3, #4
 800cd9e:	d013      	beq.n	800cdc8 <mod_extractNUM+0x7c>
	{
		lsu8_retryCnt++;
 800cda0:	4b10      	ldr	r3, [pc, #64]	; (800cde4 <mod_extractNUM+0x98>)
 800cda2:	781b      	ldrb	r3, [r3, #0]
 800cda4:	3301      	adds	r3, #1
 800cda6:	b2da      	uxtb	r2, r3
 800cda8:	4b0e      	ldr	r3, [pc, #56]	; (800cde4 <mod_extractNUM+0x98>)
 800cdaa:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cdac:	4b0d      	ldr	r3, [pc, #52]	; (800cde4 <mod_extractNUM+0x98>)
 800cdae:	781b      	ldrb	r3, [r3, #0]
 800cdb0:	2b02      	cmp	r3, #2
 800cdb2:	d802      	bhi.n	800cdba <mod_extractNUM+0x6e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cdb4:	2304      	movs	r3, #4
 800cdb6:	73fb      	strb	r3, [r7, #15]
 800cdb8:	e006      	b.n	800cdc8 <mod_extractNUM+0x7c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cdba:	4b0a      	ldr	r3, [pc, #40]	; (800cde4 <mod_extractNUM+0x98>)
 800cdbc:	781b      	ldrb	r3, [r3, #0]
 800cdbe:	2b03      	cmp	r3, #3
 800cdc0:	d902      	bls.n	800cdc8 <mod_extractNUM+0x7c>
		{
			lsu8_retryCnt = 0;
 800cdc2:	4b08      	ldr	r3, [pc, #32]	; (800cde4 <mod_extractNUM+0x98>)
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cdc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	0801437c 	.word	0x0801437c
 800cdd8:	1fff4704 	.word	0x1fff4704
 800cddc:	1ffee102 	.word	0x1ffee102
 800cde0:	08014368 	.word	0x08014368
 800cde4:	1fff47bc 	.word	0x1fff47bc

0800cde8 <mod_extractOperator>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractOperator(void)
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b084      	sub	sp, #16
 800cdec:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cdee:	2304      	movs	r3, #4
 800cdf0:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_savePtr = NULL;
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	603b      	str	r3, [r7, #0]
	uint8_t *lu8p_dataPtr = NULL;
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
 800cdfe:	200d      	movs	r0, #13
 800ce00:	4937      	ldr	r1, [pc, #220]	; (800cee0 <mod_extractOperator+0xf8>)
 800ce02:	f7ff f9cd 	bl	800c1a0 <mod_sendCmdGetRsp>
 800ce06:	4603      	mov	r3, r0
 800ce08:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800ce0a:	7bfb      	ldrb	r3, [r7, #15]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d14b      	bne.n	800cea8 <mod_extractOperator+0xc0>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800ce10:	4834      	ldr	r0, [pc, #208]	; (800cee4 <mod_extractOperator+0xfc>)
 800ce12:	4935      	ldr	r1, [pc, #212]	; (800cee8 <mod_extractOperator+0x100>)
 800ce14:	f005 fa3b 	bl	801228e <strstr>
 800ce18:	4603      	mov	r3, r0
	uint8_t *lu8p_dataPtr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d041      	beq.n	800cea2 <mod_extractOperator+0xba>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_OPERATOR].mu8arr_otherRspString)))
		{
			lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800ce1e:	463b      	mov	r3, r7
 800ce20:	4830      	ldr	r0, [pc, #192]	; (800cee4 <mod_extractOperator+0xfc>)
 800ce22:	4932      	ldr	r1, [pc, #200]	; (800ceec <mod_extractOperator+0x104>)
 800ce24:	461a      	mov	r2, r3
 800ce26:	f005 faa8 	bl	801237a <strtok_r>
 800ce2a:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_savePtr);

			if (NULL != lu8p_Ptr)
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d034      	beq.n	800ce9c <mod_extractOperator+0xb4>
			{
				lu8p_dataPtr = lu8p_savePtr;
 800ce32:	683b      	ldr	r3, [r7, #0]
 800ce34:	607b      	str	r3, [r7, #4]
				lu8p_dataPtr = (uint8_t *) strchr((const char*) lu8p_dataPtr, ',');
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	212c      	movs	r1, #44	; 0x2c
 800ce3a:	f005 f9f8 	bl	801222e <strchr>
 800ce3e:	6078      	str	r0, [r7, #4]

				if (NULL != lu8p_dataPtr)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d027      	beq.n	800ce96 <mod_extractOperator+0xae>
				{
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800ce46:	463b      	mov	r3, r7
 800ce48:	2000      	movs	r0, #0
 800ce4a:	4929      	ldr	r1, [pc, #164]	; (800cef0 <mod_extractOperator+0x108>)
 800ce4c:	461a      	mov	r2, r3
 800ce4e:	f005 fa94 	bl	801237a <strtok_r>
 800ce52:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800ce54:	463b      	mov	r3, r7
 800ce56:	2000      	movs	r0, #0
 800ce58:	4925      	ldr	r1, [pc, #148]	; (800cef0 <mod_extractOperator+0x108>)
 800ce5a:	461a      	mov	r2, r3
 800ce5c:	f005 fa8d 	bl	801237a <strtok_r>
 800ce60:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_savePtr++;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	3301      	adds	r3, #1
 800ce66:	603b      	str	r3, [r7, #0]
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) "\"",
 800ce68:	463b      	mov	r3, r7
 800ce6a:	2000      	movs	r0, #0
 800ce6c:	4921      	ldr	r1, [pc, #132]	; (800cef4 <mod_extractOperator+0x10c>)
 800ce6e:	461a      	mov	r2, r3
 800ce70:	f005 fa83 	bl	801237a <strtok_r>
 800ce74:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					if (lu8p_Ptr != NULL)
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d009      	beq.n	800ce90 <mod_extractOperator+0xa8>
					{
						memset(gu8_operatorName, 0, sizeof(gu8_operatorName));
 800ce7c:	481e      	ldr	r0, [pc, #120]	; (800cef8 <mod_extractOperator+0x110>)
 800ce7e:	2100      	movs	r1, #0
 800ce80:	2214      	movs	r2, #20
 800ce82:	f004 fee2 	bl	8011c4a <memset>
						strcpy((char *) &gu8_operatorName, (const char *) lu8p_Ptr);
 800ce86:	481c      	ldr	r0, [pc, #112]	; (800cef8 <mod_extractOperator+0x110>)
 800ce88:	68b9      	ldr	r1, [r7, #8]
 800ce8a:	f005 f9de 	bl	801224a <strcpy>
 800ce8e:	e022      	b.n	800ced6 <mod_extractOperator+0xee>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800ce90:	2302      	movs	r3, #2
 800ce92:	73fb      	strb	r3, [r7, #15]
 800ce94:	e01f      	b.n	800ced6 <mod_extractOperator+0xee>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800ce96:	2302      	movs	r3, #2
 800ce98:	73fb      	strb	r3, [r7, #15]
 800ce9a:	e01c      	b.n	800ced6 <mod_extractOperator+0xee>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800ce9c:	2302      	movs	r3, #2
 800ce9e:	73fb      	strb	r3, [r7, #15]
 800cea0:	e019      	b.n	800ced6 <mod_extractOperator+0xee>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800cea2:	2302      	movs	r3, #2
 800cea4:	73fb      	strb	r3, [r7, #15]
 800cea6:	e016      	b.n	800ced6 <mod_extractOperator+0xee>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	2b04      	cmp	r3, #4
 800ceac:	d013      	beq.n	800ced6 <mod_extractOperator+0xee>
	{
		lsu8_retryCnt++;
 800ceae:	4b13      	ldr	r3, [pc, #76]	; (800cefc <mod_extractOperator+0x114>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	b2da      	uxtb	r2, r3
 800ceb6:	4b11      	ldr	r3, [pc, #68]	; (800cefc <mod_extractOperator+0x114>)
 800ceb8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800ceba:	4b10      	ldr	r3, [pc, #64]	; (800cefc <mod_extractOperator+0x114>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d802      	bhi.n	800cec8 <mod_extractOperator+0xe0>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cec2:	2304      	movs	r3, #4
 800cec4:	73fb      	strb	r3, [r7, #15]
 800cec6:	e006      	b.n	800ced6 <mod_extractOperator+0xee>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cec8:	4b0c      	ldr	r3, [pc, #48]	; (800cefc <mod_extractOperator+0x114>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b03      	cmp	r3, #3
 800cece:	d902      	bls.n	800ced6 <mod_extractOperator+0xee>
		{
			lsu8_retryCnt = 0;
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <mod_extractOperator+0x114>)
 800ced2:	2200      	movs	r2, #0
 800ced4:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800ced6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ced8:	4618      	mov	r0, r3
 800ceda:	3710      	adds	r7, #16
 800cedc:	46bd      	mov	sp, r7
 800cede:	bd80      	pop	{r7, pc}
 800cee0:	0801437c 	.word	0x0801437c
 800cee4:	1fff4704 	.word	0x1fff4704
 800cee8:	1ffee5a6 	.word	0x1ffee5a6
 800ceec:	08014368 	.word	0x08014368
 800cef0:	080143b0 	.word	0x080143b0
 800cef4:	080143bc 	.word	0x080143bc
 800cef8:	1fff477c 	.word	0x1fff477c
 800cefc:	1fff47bd 	.word	0x1fff47bd

0800cf00 <mod_simStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t mod_simStatus(void)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cf06:	2304      	movs	r3, #4
 800cf08:	71fb      	strb	r3, [r7, #7]

	switch (sen_simStatusState)
 800cf0a:	4b4f      	ldr	r3, [pc, #316]	; (800d048 <mod_simStatus+0x148>)
 800cf0c:	781b      	ldrb	r3, [r3, #0]
 800cf0e:	2b07      	cmp	r3, #7
 800cf10:	f200 8090 	bhi.w	800d034 <mod_simStatus+0x134>
 800cf14:	a201      	add	r2, pc, #4	; (adr r2, 800cf1c <mod_simStatus+0x1c>)
 800cf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1a:	bf00      	nop
 800cf1c:	0800cf3d 	.word	0x0800cf3d
 800cf20:	0800cf59 	.word	0x0800cf59
 800cf24:	0800cf75 	.word	0x0800cf75
 800cf28:	0800cf91 	.word	0x0800cf91
 800cf2c:	0800cfad 	.word	0x0800cfad
 800cf30:	0800cfcf 	.word	0x0800cfcf
 800cf34:	0800cff1 	.word	0x0800cff1
 800cf38:	0800d013 	.word	0x0800d013
	{
		case E_SIM_ENABLE_SIM_DETECTION_STATE:
			len_retStatus = mod_enableSimDetection();
 800cf3c:	f7ff fce6 	bl	800c90c <mod_enableSimDetection>
 800cf40:	4603      	mov	r3, r0
 800cf42:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cf44:	79fb      	ldrb	r3, [r7, #7]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d105      	bne.n	800cf56 <mod_simStatus+0x56>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cf4a:	2304      	movs	r3, #4
 800cf4c:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_STATUS_STATE;
 800cf4e:	4b3e      	ldr	r3, [pc, #248]	; (800d048 <mod_simStatus+0x148>)
 800cf50:	2201      	movs	r2, #1
 800cf52:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cf54:	e072      	b.n	800d03c <mod_simStatus+0x13c>
 800cf56:	e071      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_ENABLE_SIM_STATUS_STATE:
			len_retStatus = mod_enableSimStatusReport();
 800cf58:	f7ff fd16 	bl	800c988 <mod_enableSimStatusReport>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cf60:	79fb      	ldrb	r3, [r7, #7]
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d105      	bne.n	800cf72 <mod_simStatus+0x72>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cf66:	2304      	movs	r3, #4
 800cf68:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CHECK_SIM_STATUS_STATE;
 800cf6a:	4b37      	ldr	r3, [pc, #220]	; (800d048 <mod_simStatus+0x148>)
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cf70:	e064      	b.n	800d03c <mod_simStatus+0x13c>
 800cf72:	e063      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_CHECK_SIM_STATUS_STATE:
			len_retStatus = mod_checkSimStatus();
 800cf74:	f7ff fd42 	bl	800c9fc <mod_checkSimStatus>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cf7c:	79fb      	ldrb	r3, [r7, #7]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d105      	bne.n	800cf8e <mod_simStatus+0x8e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cf82:	2304      	movs	r3, #4
 800cf84:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CPIN_CHECK_STATE;
 800cf86:	4b30      	ldr	r3, [pc, #192]	; (800d048 <mod_simStatus+0x148>)
 800cf88:	2203      	movs	r2, #3
 800cf8a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cf8c:	e056      	b.n	800d03c <mod_simStatus+0x13c>
 800cf8e:	e055      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_CPIN_CHECK_STATE:
			len_retStatus = mod_cpinCheck();
 800cf90:	f7ff fdb4 	bl	800cafc <mod_cpinCheck>
 800cf94:	4603      	mov	r3, r0
 800cf96:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800cf98:	79fb      	ldrb	r3, [r7, #7]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d105      	bne.n	800cfaa <mod_simStatus+0xaa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cf9e:	2304      	movs	r3, #4
 800cfa0:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_IMEI_STATE;
 800cfa2:	4b29      	ldr	r3, [pc, #164]	; (800d048 <mod_simStatus+0x148>)
 800cfa4:	2204      	movs	r2, #4
 800cfa6:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cfa8:	e048      	b.n	800d03c <mod_simStatus+0x13c>
 800cfaa:	e047      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_IMEI_STATE:
			len_retStatus = mod_extractIMEI();
 800cfac:	f7ff fdec 	bl	800cb88 <mod_extractIMEI>
 800cfb0:	4603      	mov	r3, r0
 800cfb2:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cfb4:	79fb      	ldrb	r3, [r7, #7]
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	d002      	beq.n	800cfc0 <mod_simStatus+0xc0>
 800cfba:	79fb      	ldrb	r3, [r7, #7]
 800cfbc:	2b04      	cmp	r3, #4
 800cfbe:	d005      	beq.n	800cfcc <mod_simStatus+0xcc>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cfc0:	2304      	movs	r3, #4
 800cfc2:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_CCID_STATE;
 800cfc4:	4b20      	ldr	r3, [pc, #128]	; (800d048 <mod_simStatus+0x148>)
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cfca:	e037      	b.n	800d03c <mod_simStatus+0x13c>
 800cfcc:	e036      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_CCID_STATE:
			len_retStatus = mod_extractCCID();
 800cfce:	f7ff fe57 	bl	800cc80 <mod_extractCCID>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cfd6:	79fb      	ldrb	r3, [r7, #7]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <mod_simStatus+0xe2>
 800cfdc:	79fb      	ldrb	r3, [r7, #7]
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d005      	beq.n	800cfee <mod_simStatus+0xee>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cfe2:	2304      	movs	r3, #4
 800cfe4:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_NUM_STATE;
 800cfe6:	4b18      	ldr	r3, [pc, #96]	; (800d048 <mod_simStatus+0x148>)
 800cfe8:	2206      	movs	r2, #6
 800cfea:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cfec:	e026      	b.n	800d03c <mod_simStatus+0x13c>
 800cfee:	e025      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_NUM_STATE:
			len_retStatus = mod_extractNUM();
 800cff0:	f7ff feac 	bl	800cd4c <mod_extractNUM>
 800cff4:	4603      	mov	r3, r0
 800cff6:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cff8:	79fb      	ldrb	r3, [r7, #7]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <mod_simStatus+0x104>
 800cffe:	79fb      	ldrb	r3, [r7, #7]
 800d000:	2b04      	cmp	r3, #4
 800d002:	d005      	beq.n	800d010 <mod_simStatus+0x110>
			{
				len_retStatus = E_RET_INPROGRESS;
 800d004:	2304      	movs	r3, #4
 800d006:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_OPERATOR_STATE;
 800d008:	4b0f      	ldr	r3, [pc, #60]	; (800d048 <mod_simStatus+0x148>)
 800d00a:	2207      	movs	r2, #7
 800d00c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800d00e:	e015      	b.n	800d03c <mod_simStatus+0x13c>
 800d010:	e014      	b.n	800d03c <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_OPERATOR_STATE:
			len_retStatus = mod_extractOperator();
 800d012:	f7ff fee9 	bl	800cde8 <mod_extractOperator>
 800d016:	4603      	mov	r3, r0
 800d018:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800d01a:	79fb      	ldrb	r3, [r7, #7]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <mod_simStatus+0x126>
 800d020:	79fb      	ldrb	r3, [r7, #7]
 800d022:	2b04      	cmp	r3, #4
 800d024:	d005      	beq.n	800d032 <mod_simStatus+0x132>
			{
				len_retStatus = E_RET_SUCCESS;
 800d026:	2300      	movs	r3, #0
 800d028:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800d02a:	4b07      	ldr	r3, [pc, #28]	; (800d048 <mod_simStatus+0x148>)
 800d02c:	2200      	movs	r2, #0
 800d02e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800d030:	e004      	b.n	800d03c <mod_simStatus+0x13c>
 800d032:	e003      	b.n	800d03c <mod_simStatus+0x13c>

		default:
			sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800d034:	4b04      	ldr	r3, [pc, #16]	; (800d048 <mod_simStatus+0x148>)
 800d036:	2200      	movs	r2, #0
 800d038:	701a      	strb	r2, [r3, #0]
		break;
 800d03a:	bf00      	nop
	}
	return len_retStatus;
 800d03c:	79fb      	ldrb	r3, [r7, #7]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3708      	adds	r7, #8
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop
 800d048:	1fff47aa 	.word	0x1fff47aa

0800d04c <mod_networkStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_networkStatus(void)
{
 800d04c:	b580      	push	{r7, lr}
 800d04e:	b082      	sub	sp, #8
 800d050:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d052:	2304      	movs	r3, #4
 800d054:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800d056:	2300      	movs	r3, #0
 800d058:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CREG, (uint8_t *) NEW_LINE);
 800d05a:	200e      	movs	r0, #14
 800d05c:	4941      	ldr	r1, [pc, #260]	; (800d164 <mod_networkStatus+0x118>)
 800d05e:	f7ff f89f 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d062:	4603      	mov	r3, r0
 800d064:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d15e      	bne.n	800d12a <mod_networkStatus+0xde>
	{
		lsu8_retryCnt = 0;
 800d06c:	4b3e      	ldr	r3, [pc, #248]	; (800d168 <mod_networkStatus+0x11c>)
 800d06e:	2200      	movs	r2, #0
 800d070:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_INPROGRESS;
 800d072:	2304      	movs	r3, #4
 800d074:	71fb      	strb	r3, [r7, #7]

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,0");
 800d076:	483d      	ldr	r0, [pc, #244]	; (800d16c <mod_networkStatus+0x120>)
 800d078:	493d      	ldr	r1, [pc, #244]	; (800d170 <mod_networkStatus+0x124>)
 800d07a:	f005 f908 	bl	801228e <strstr>
 800d07e:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d006      	beq.n	800d094 <mod_networkStatus+0x48>
		{
			//Not registered
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_NONE;
 800d086:	4b3b      	ldr	r3, [pc, #236]	; (800d174 <mod_networkStatus+0x128>)
 800d088:	2201      	movs	r2, #1
 800d08a:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800d08c:	2302      	movs	r3, #2
 800d08e:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	e062      	b.n	800d15a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,1");
 800d094:	4835      	ldr	r0, [pc, #212]	; (800d16c <mod_networkStatus+0x120>)
 800d096:	4938      	ldr	r1, [pc, #224]	; (800d178 <mod_networkStatus+0x12c>)
 800d098:	f005 f8f9 	bl	801228e <strstr>
 800d09c:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d006      	beq.n	800d0b2 <mod_networkStatus+0x66>
		{
			//home network
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_HOME;
 800d0a4:	4b33      	ldr	r3, [pc, #204]	; (800d174 <mod_networkStatus+0x128>)
 800d0a6:	2202      	movs	r2, #2
 800d0a8:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d0ae:	79fb      	ldrb	r3, [r7, #7]
 800d0b0:	e053      	b.n	800d15a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,2");
 800d0b2:	482e      	ldr	r0, [pc, #184]	; (800d16c <mod_networkStatus+0x120>)
 800d0b4:	4931      	ldr	r1, [pc, #196]	; (800d17c <mod_networkStatus+0x130>)
 800d0b6:	f005 f8ea 	bl	801228e <strstr>
 800d0ba:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d006      	beq.n	800d0d0 <mod_networkStatus+0x84>
		{
			//Not Registered
			gst_deviceStatus.men_networkRegStatus = E_NOT_REGISTERED;
 800d0c2:	4b2c      	ldr	r3, [pc, #176]	; (800d174 <mod_networkStatus+0x128>)
 800d0c4:	2203      	movs	r2, #3
 800d0c6:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800d0c8:	2302      	movs	r3, #2
 800d0ca:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d0cc:	79fb      	ldrb	r3, [r7, #7]
 800d0ce:	e044      	b.n	800d15a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,3");
 800d0d0:	4826      	ldr	r0, [pc, #152]	; (800d16c <mod_networkStatus+0x120>)
 800d0d2:	492b      	ldr	r1, [pc, #172]	; (800d180 <mod_networkStatus+0x134>)
 800d0d4:	f005 f8db 	bl	801228e <strstr>
 800d0d8:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d006      	beq.n	800d0ee <mod_networkStatus+0xa2>
		{
			//Registration denied
			gst_deviceStatus.men_networkRegStatus = E_REGISTER_DENIED;
 800d0e0:	4b24      	ldr	r3, [pc, #144]	; (800d174 <mod_networkStatus+0x128>)
 800d0e2:	2204      	movs	r2, #4
 800d0e4:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800d0e6:	2302      	movs	r3, #2
 800d0e8:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d0ea:	79fb      	ldrb	r3, [r7, #7]
 800d0ec:	e035      	b.n	800d15a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,4");
 800d0ee:	481f      	ldr	r0, [pc, #124]	; (800d16c <mod_networkStatus+0x120>)
 800d0f0:	4924      	ldr	r1, [pc, #144]	; (800d184 <mod_networkStatus+0x138>)
 800d0f2:	f005 f8cc 	bl	801228e <strstr>
 800d0f6:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d006      	beq.n	800d10c <mod_networkStatus+0xc0>
		{
			//Unknown
			gst_deviceStatus.men_networkRegStatus = E_UNKNOWN;
 800d0fe:	4b1d      	ldr	r3, [pc, #116]	; (800d174 <mod_networkStatus+0x128>)
 800d100:	2205      	movs	r2, #5
 800d102:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800d104:	2302      	movs	r3, #2
 800d106:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d108:	79fb      	ldrb	r3, [r7, #7]
 800d10a:	e026      	b.n	800d15a <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,5");
 800d10c:	4817      	ldr	r0, [pc, #92]	; (800d16c <mod_networkStatus+0x120>)
 800d10e:	491e      	ldr	r1, [pc, #120]	; (800d188 <mod_networkStatus+0x13c>)
 800d110:	f005 f8bd 	bl	801228e <strstr>
 800d114:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d01d      	beq.n	800d158 <mod_networkStatus+0x10c>
		{
			//Registered, roaming
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_ROAMING;
 800d11c:	4b15      	ldr	r3, [pc, #84]	; (800d174 <mod_networkStatus+0x128>)
 800d11e:	2206      	movs	r2, #6
 800d120:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800d122:	2300      	movs	r3, #0
 800d124:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800d126:	79fb      	ldrb	r3, [r7, #7]
 800d128:	e017      	b.n	800d15a <mod_networkStatus+0x10e>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d12a:	79fb      	ldrb	r3, [r7, #7]
 800d12c:	2b04      	cmp	r3, #4
 800d12e:	d013      	beq.n	800d158 <mod_networkStatus+0x10c>
	{
		lsu8_retryCnt++;
 800d130:	4b0d      	ldr	r3, [pc, #52]	; (800d168 <mod_networkStatus+0x11c>)
 800d132:	781b      	ldrb	r3, [r3, #0]
 800d134:	3301      	adds	r3, #1
 800d136:	b2da      	uxtb	r2, r3
 800d138:	4b0b      	ldr	r3, [pc, #44]	; (800d168 <mod_networkStatus+0x11c>)
 800d13a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d13c:	4b0a      	ldr	r3, [pc, #40]	; (800d168 <mod_networkStatus+0x11c>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	2b02      	cmp	r3, #2
 800d142:	d802      	bhi.n	800d14a <mod_networkStatus+0xfe>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d144:	2304      	movs	r3, #4
 800d146:	71fb      	strb	r3, [r7, #7]
 800d148:	e006      	b.n	800d158 <mod_networkStatus+0x10c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d14a:	4b07      	ldr	r3, [pc, #28]	; (800d168 <mod_networkStatus+0x11c>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	2b03      	cmp	r3, #3
 800d150:	d902      	bls.n	800d158 <mod_networkStatus+0x10c>
		{
			lsu8_retryCnt = 0;
 800d152:	4b05      	ldr	r3, [pc, #20]	; (800d168 <mod_networkStatus+0x11c>)
 800d154:	2200      	movs	r2, #0
 800d156:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d158:	79fb      	ldrb	r3, [r7, #7]
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
 800d162:	bf00      	nop
 800d164:	0801437c 	.word	0x0801437c
 800d168:	1fff47be 	.word	0x1fff47be
 800d16c:	1fff4704 	.word	0x1fff4704
 800d170:	080143c0 	.word	0x080143c0
 800d174:	1ffea50c 	.word	0x1ffea50c
 800d178:	080143c4 	.word	0x080143c4
 800d17c:	080143c8 	.word	0x080143c8
 800d180:	080143cc 	.word	0x080143cc
 800d184:	080143d0 	.word	0x080143d0
 800d188:	080143d4 	.word	0x080143d4

0800d18c <mod_signalQuality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_signalQuality(void)
{
 800d18c:	b580      	push	{r7, lr}
 800d18e:	b082      	sub	sp, #8
 800d190:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d192:	2304      	movs	r3, #4
 800d194:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800d196:	2300      	movs	r3, #0
 800d198:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SIGNAL_QLTY, (uint8_t *) NEW_LINE);
 800d19a:	200f      	movs	r0, #15
 800d19c:	4920      	ldr	r1, [pc, #128]	; (800d220 <mod_signalQuality+0x94>)
 800d19e:	f7fe ffff 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800d1a6:	79fb      	ldrb	r3, [r7, #7]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d11d      	bne.n	800d1e8 <mod_signalQuality+0x5c>
	{

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d1ac:	481d      	ldr	r0, [pc, #116]	; (800d224 <mod_signalQuality+0x98>)
 800d1ae:	491e      	ldr	r1, [pc, #120]	; (800d228 <mod_signalQuality+0x9c>)
 800d1b0:	f005 f86d 	bl	801228e <strstr>
 800d1b4:	6038      	str	r0, [r7, #0]
				(const char *) gcst_ATCmdTable[E_IDX_SIGNAL_QLTY].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d012      	beq.n	800d1e2 <mod_signalQuality+0x56>
		{
			lu8p_Ptr += 6;
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	3306      	adds	r3, #6
 800d1c0:	603b      	str	r3, [r7, #0]
			gu8_signalQuality = atoi((char *) lu8p_Ptr++);
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	1c5a      	adds	r2, r3, #1
 800d1c6:	603a      	str	r2, [r7, #0]
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	f004 fd03 	bl	8011bd4 <atoi>
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	b2da      	uxtb	r2, r3
 800d1d2:	4b16      	ldr	r3, [pc, #88]	; (800d22c <mod_signalQuality+0xa0>)
 800d1d4:	701a      	strb	r2, [r3, #0]
			lsu8_retryCnt = 0;
 800d1d6:	4b16      	ldr	r3, [pc, #88]	; (800d230 <mod_signalQuality+0xa4>)
 800d1d8:	2200      	movs	r2, #0
 800d1da:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_SUCCESS;
 800d1dc:	2300      	movs	r3, #0
 800d1de:	71fb      	strb	r3, [r7, #7]
 800d1e0:	e019      	b.n	800d216 <mod_signalQuality+0x8a>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d1e2:	2302      	movs	r3, #2
 800d1e4:	71fb      	strb	r3, [r7, #7]
 800d1e6:	e016      	b.n	800d216 <mod_signalQuality+0x8a>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d1e8:	79fb      	ldrb	r3, [r7, #7]
 800d1ea:	2b04      	cmp	r3, #4
 800d1ec:	d013      	beq.n	800d216 <mod_signalQuality+0x8a>
	{
		lsu8_retryCnt++;
 800d1ee:	4b10      	ldr	r3, [pc, #64]	; (800d230 <mod_signalQuality+0xa4>)
 800d1f0:	781b      	ldrb	r3, [r3, #0]
 800d1f2:	3301      	adds	r3, #1
 800d1f4:	b2da      	uxtb	r2, r3
 800d1f6:	4b0e      	ldr	r3, [pc, #56]	; (800d230 <mod_signalQuality+0xa4>)
 800d1f8:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d1fa:	4b0d      	ldr	r3, [pc, #52]	; (800d230 <mod_signalQuality+0xa4>)
 800d1fc:	781b      	ldrb	r3, [r3, #0]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	d802      	bhi.n	800d208 <mod_signalQuality+0x7c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d202:	2304      	movs	r3, #4
 800d204:	71fb      	strb	r3, [r7, #7]
 800d206:	e006      	b.n	800d216 <mod_signalQuality+0x8a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d208:	4b09      	ldr	r3, [pc, #36]	; (800d230 <mod_signalQuality+0xa4>)
 800d20a:	781b      	ldrb	r3, [r3, #0]
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	d902      	bls.n	800d216 <mod_signalQuality+0x8a>
		{
			lsu8_retryCnt = 0;
 800d210:	4b07      	ldr	r3, [pc, #28]	; (800d230 <mod_signalQuality+0xa4>)
 800d212:	2200      	movs	r2, #0
 800d214:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d216:	79fb      	ldrb	r3, [r7, #7]
}
 800d218:	4618      	mov	r0, r3
 800d21a:	3708      	adds	r7, #8
 800d21c:	46bd      	mov	sp, r7
 800d21e:	bd80      	pop	{r7, pc}
 800d220:	0801437c 	.word	0x0801437c
 800d224:	1fff4704 	.word	0x1fff4704
 800d228:	1ffeeeee 	.word	0x1ffeeeee
 800d22c:	1fff4700 	.word	0x1fff4700
 800d230:	1fff47bf 	.word	0x1fff47bf

0800d234 <mod_extractDateTime>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractDateTime(void)
{
 800d234:	b5b0      	push	{r4, r5, r7, lr}
 800d236:	b090      	sub	sp, #64	; 0x40
 800d238:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d23a:	2304      	movs	r3, #4
 800d23c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800d240:	2300      	movs	r3, #0
 800d242:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *lu8p_savePtr = NULL;
 800d244:	2300      	movs	r3, #0
 800d246:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t lu8arr_tempBuff[50] = { 0 };
 800d248:	463b      	mov	r3, r7
 800d24a:	2200      	movs	r2, #0
 800d24c:	601a      	str	r2, [r3, #0]
 800d24e:	3304      	adds	r3, #4
 800d250:	2200      	movs	r2, #0
 800d252:	601a      	str	r2, [r3, #0]
 800d254:	3304      	adds	r3, #4
 800d256:	2200      	movs	r2, #0
 800d258:	601a      	str	r2, [r3, #0]
 800d25a:	3304      	adds	r3, #4
 800d25c:	2200      	movs	r2, #0
 800d25e:	601a      	str	r2, [r3, #0]
 800d260:	3304      	adds	r3, #4
 800d262:	2200      	movs	r2, #0
 800d264:	601a      	str	r2, [r3, #0]
 800d266:	3304      	adds	r3, #4
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
 800d26c:	3304      	adds	r3, #4
 800d26e:	2200      	movs	r2, #0
 800d270:	601a      	str	r2, [r3, #0]
 800d272:	3304      	adds	r3, #4
 800d274:	2200      	movs	r2, #0
 800d276:	601a      	str	r2, [r3, #0]
 800d278:	3304      	adds	r3, #4
 800d27a:	2200      	movs	r2, #0
 800d27c:	601a      	str	r2, [r3, #0]
 800d27e:	3304      	adds	r3, #4
 800d280:	2200      	movs	r2, #0
 800d282:	601a      	str	r2, [r3, #0]
 800d284:	3304      	adds	r3, #4
 800d286:	2200      	movs	r2, #0
 800d288:	601a      	str	r2, [r3, #0]
 800d28a:	3304      	adds	r3, #4
 800d28c:	2200      	movs	r2, #0
 800d28e:	601a      	str	r2, [r3, #0]
 800d290:	3304      	adds	r3, #4
 800d292:	2200      	movs	r2, #0
 800d294:	801a      	strh	r2, [r3, #0]
 800d296:	3302      	adds	r3, #2

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CCLK, (uint8_t *) NEW_LINE);
 800d298:	2010      	movs	r0, #16
 800d29a:	492e      	ldr	r1, [pc, #184]	; (800d354 <mod_extractDateTime+0x120>)
 800d29c:	f7fe ff80 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d2a0:	4603      	mov	r3, r0
 800d2a2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800d2a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d133      	bne.n	800d316 <mod_extractDateTime+0xe2>
	{
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d2ae:	482a      	ldr	r0, [pc, #168]	; (800d358 <mod_extractDateTime+0x124>)
 800d2b0:	492a      	ldr	r1, [pc, #168]	; (800d35c <mod_extractDateTime+0x128>)
 800d2b2:	f004 ffec 	bl	801228e <strstr>
 800d2b6:	63b8      	str	r0, [r7, #56]	; 0x38
				(const char *) gcst_ATCmdTable[E_IDX_CCLK].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800d2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d044      	beq.n	800d348 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800d2be:	4b28      	ldr	r3, [pc, #160]	; (800d360 <mod_extractDateTime+0x12c>)
 800d2c0:	2200      	movs	r2, #0
 800d2c2:	701a      	strb	r2, [r3, #0]

			memcpy(lu8arr_tempBuff, gu8arr_respBuffer, 50);
 800d2c4:	4b24      	ldr	r3, [pc, #144]	; (800d358 <mod_extractDateTime+0x124>)
 800d2c6:	463c      	mov	r4, r7
 800d2c8:	461d      	mov	r5, r3
 800d2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d2d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d2d6:	682b      	ldr	r3, [r5, #0]
 800d2d8:	8023      	strh	r3, [r4, #0]
			lu8p_Ptr = (uint8_t *) strtok_r((char *) lu8arr_tempBuff, (const char *) ":",
 800d2da:	463a      	mov	r2, r7
 800d2dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4920      	ldr	r1, [pc, #128]	; (800d364 <mod_extractDateTime+0x130>)
 800d2e4:	461a      	mov	r2, r3
 800d2e6:	f005 f848 	bl	801237a <strtok_r>
 800d2ea:	63b8      	str	r0, [r7, #56]	; 0x38
					(char **) &lu8p_savePtr);
			lu8p_savePtr += 2;
 800d2ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ee:	3302      	adds	r3, #2
 800d2f0:	637b      	str	r3, [r7, #52]	; 0x34
			if (NULL != lu8p_savePtr)
 800d2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d00a      	beq.n	800d30e <mod_extractDateTime+0xda>
			{
				memset(gu8_dataTime, 0, sizeof(gu8_dataTime));
 800d2f8:	481b      	ldr	r0, [pc, #108]	; (800d368 <mod_extractDateTime+0x134>)
 800d2fa:	2100      	movs	r1, #0
 800d2fc:	2214      	movs	r2, #20
 800d2fe:	f004 fca4 	bl	8011c4a <memset>
				strncpy((char *) gu8_dataTime, (const char *) lu8p_savePtr,
 800d302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d304:	4818      	ldr	r0, [pc, #96]	; (800d368 <mod_extractDateTime+0x134>)
 800d306:	4619      	mov	r1, r3
 800d308:	2214      	movs	r2, #20
 800d30a:	f004 ffae 	bl	801226a <strncpy>
				TIME_SIZE);
			}
			len_retStatus = E_RET_SUCCESS;
 800d30e:	2300      	movs	r3, #0
 800d310:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d314:	e018      	b.n	800d348 <mod_extractDateTime+0x114>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d316:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d31a:	2b04      	cmp	r3, #4
 800d31c:	d014      	beq.n	800d348 <mod_extractDateTime+0x114>
	{
		lsu8_retryCnt++;
 800d31e:	4b10      	ldr	r3, [pc, #64]	; (800d360 <mod_extractDateTime+0x12c>)
 800d320:	781b      	ldrb	r3, [r3, #0]
 800d322:	3301      	adds	r3, #1
 800d324:	b2da      	uxtb	r2, r3
 800d326:	4b0e      	ldr	r3, [pc, #56]	; (800d360 <mod_extractDateTime+0x12c>)
 800d328:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d32a:	4b0d      	ldr	r3, [pc, #52]	; (800d360 <mod_extractDateTime+0x12c>)
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b02      	cmp	r3, #2
 800d330:	d803      	bhi.n	800d33a <mod_extractDateTime+0x106>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d332:	2304      	movs	r3, #4
 800d334:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800d338:	e006      	b.n	800d348 <mod_extractDateTime+0x114>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d33a:	4b09      	ldr	r3, [pc, #36]	; (800d360 <mod_extractDateTime+0x12c>)
 800d33c:	781b      	ldrb	r3, [r3, #0]
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d902      	bls.n	800d348 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800d342:	4b07      	ldr	r3, [pc, #28]	; (800d360 <mod_extractDateTime+0x12c>)
 800d344:	2200      	movs	r2, #0
 800d346:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d348:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d34c:	4618      	mov	r0, r3
 800d34e:	3740      	adds	r7, #64	; 0x40
 800d350:	46bd      	mov	sp, r7
 800d352:	bdb0      	pop	{r4, r5, r7, pc}
 800d354:	0801437c 	.word	0x0801437c
 800d358:	1fff4704 	.word	0x1fff4704
 800d35c:	1ffef392 	.word	0x1ffef392
 800d360:	1fff47c0 	.word	0x1fff47c0
 800d364:	08014368 	.word	0x08014368
 800d368:	1fff4790 	.word	0x1fff4790

0800d36c <mod_mqttConnect>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttConnect(void)
{
 800d36c:	b590      	push	{r4, r7, lr}
 800d36e:	b08f      	sub	sp, #60	; 0x3c
 800d370:	af02      	add	r7, sp, #8
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d372:	2304      	movs	r3, #4
 800d374:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[35] = { 0 };
 800d378:	463b      	mov	r3, r7
 800d37a:	2200      	movs	r2, #0
 800d37c:	601a      	str	r2, [r3, #0]
 800d37e:	3304      	adds	r3, #4
 800d380:	2200      	movs	r2, #0
 800d382:	601a      	str	r2, [r3, #0]
 800d384:	3304      	adds	r3, #4
 800d386:	2200      	movs	r2, #0
 800d388:	601a      	str	r2, [r3, #0]
 800d38a:	3304      	adds	r3, #4
 800d38c:	2200      	movs	r2, #0
 800d38e:	601a      	str	r2, [r3, #0]
 800d390:	3304      	adds	r3, #4
 800d392:	2200      	movs	r2, #0
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	3304      	adds	r3, #4
 800d398:	2200      	movs	r2, #0
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	3304      	adds	r3, #4
 800d39e:	2200      	movs	r2, #0
 800d3a0:	601a      	str	r2, [r3, #0]
 800d3a2:	3304      	adds	r3, #4
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	601a      	str	r2, [r3, #0]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	801a      	strh	r2, [r3, #0]
 800d3ae:	3302      	adds	r3, #2
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	701a      	strb	r2, [r3, #0]
 800d3b4:	3301      	adds	r3, #1
	uint8_t *lu8p_Ptr = NULL;
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	62bb      	str	r3, [r7, #40]	; 0x28
	short ls_result = E_MQTT_CON_NONE;
 800d3ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d3be:	84fb      	strh	r3, [r7, #38]	; 0x26

	sprintf((char *) lu8arr_param, (const char*) "%d,\"%s_%s\"\r\n",
 800d3c0:	4b87      	ldr	r3, [pc, #540]	; (800d5e0 <mod_mqttConnect+0x274>)
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	461c      	mov	r4, r3
 800d3c6:	463a      	mov	r2, r7
 800d3c8:	4b86      	ldr	r3, [pc, #536]	; (800d5e4 <mod_mqttConnect+0x278>)
 800d3ca:	9300      	str	r3, [sp, #0]
 800d3cc:	4610      	mov	r0, r2
 800d3ce:	4986      	ldr	r1, [pc, #536]	; (800d5e8 <mod_mqttConnect+0x27c>)
 800d3d0:	4622      	mov	r2, r4
 800d3d2:	4b86      	ldr	r3, [pc, #536]	; (800d5ec <mod_mqttConnect+0x280>)
 800d3d4:	f004 fef8 	bl	80121c8 <siprintf>
			sgu8_mqttClientId, MQTT_CONNECT_CLINT_ID, &gu8arr_IMEINum[5]);	//using last 10 digits of IMEI for unique client ID for every VCU

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CONNECT, (uint8_t *) lu8arr_param);
 800d3d8:	463b      	mov	r3, r7
 800d3da:	2014      	movs	r0, #20
 800d3dc:	4619      	mov	r1, r3
 800d3de:	f7fe fedf 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d3e2:	4603      	mov	r3, r0
 800d3e4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (E_RET_SUCCESS == len_retStatus)
 800d3e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	f040 8096 	bne.w	800d51e <mod_mqttConnect+0x1b2>
	{
		lsu8_retryCnt = 0;
 800d3f2:	4b7f      	ldr	r3, [pc, #508]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d3f8:	487e      	ldr	r0, [pc, #504]	; (800d5f4 <mod_mqttConnect+0x288>)
 800d3fa:	497f      	ldr	r1, [pc, #508]	; (800d5f8 <mod_mqttConnect+0x28c>)
 800d3fc:	f004 ff47 	bl	801228e <strstr>
 800d400:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CONNECT].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800d402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d404:	2b00      	cmp	r3, #0
 800d406:	f000 8086 	beq.w	800d516 <mod_mqttConnect+0x1aa>
		{
			lu8p_Ptr += 10;
 800d40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d40c:	330a      	adds	r3, #10
 800d40e:	62bb      	str	r3, [r7, #40]	; 0x28
			ls_result = atoi((char *) lu8p_Ptr);
 800d410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d412:	f004 fbdf 	bl	8011bd4 <atoi>
 800d416:	4603      	mov	r3, r0
 800d418:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d41a:	4b71      	ldr	r3, [pc, #452]	; (800d5e0 <mod_mqttConnect+0x274>)
 800d41c:	781b      	ldrb	r3, [r3, #0]
 800d41e:	461a      	mov	r2, r3
 800d420:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d424:	429a      	cmp	r2, r3
 800d426:	d172      	bne.n	800d50e <mod_mqttConnect+0x1a2>
			{
				lu8p_Ptr += 2;
 800d428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d42a:	3302      	adds	r3, #2
 800d42c:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800d42e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d430:	f004 fbd0 	bl	8011bd4 <atoi>
 800d434:	4603      	mov	r3, r0
 800d436:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (0 == ls_result)	//Packet sent successfully and ACK received from server
 800d438:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d119      	bne.n	800d474 <mod_mqttConnect+0x108>
				{
					lu8p_Ptr += 2;
 800d440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d442:	3302      	adds	r3, #2
 800d444:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800d446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d448:	f004 fbc4 	bl	8011bd4 <atoi>
 800d44c:	4603      	mov	r3, r0
 800d44e:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (0 == ls_result)	//Connection Accepted
 800d450:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d454:	2b00      	cmp	r3, #0
 800d456:	d106      	bne.n	800d466 <mod_mqttConnect+0xfa>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d458:	4b68      	ldr	r3, [pc, #416]	; (800d5fc <mod_mqttConnect+0x290>)
 800d45a:	2200      	movs	r2, #0
 800d45c:	715a      	strb	r2, [r3, #5]
								E_ACK_RCVD_CONNECT_ACCEPT;

						len_retStatus = E_RET_SUCCESS;
 800d45e:	2300      	movs	r3, #0
 800d460:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d464:	e0b5      	b.n	800d5d2 <mod_mqttConnect+0x266>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d466:	4b65      	ldr	r3, [pc, #404]	; (800d5fc <mod_mqttConnect+0x290>)
 800d468:	2208      	movs	r2, #8
 800d46a:	715a      	strb	r2, [r3, #5]
						len_retStatus = E_RET_FAILED;
 800d46c:	2302      	movs	r3, #2
 800d46e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d472:	e0ae      	b.n	800d5d2 <mod_mqttConnect+0x266>
					}
				}
				else if (1 == ls_result)	//Packet retransmission
 800d474:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d478:	2b01      	cmp	r3, #1
 800d47a:	d106      	bne.n	800d48a <mod_mqttConnect+0x11e>
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_PACKET_RETRANSMISSION;
 800d47c:	4b5f      	ldr	r3, [pc, #380]	; (800d5fc <mod_mqttConnect+0x290>)
 800d47e:	2201      	movs	r2, #1
 800d480:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_INPROGRESS;
 800d482:	2304      	movs	r3, #4
 800d484:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d488:	e0a3      	b.n	800d5d2 <mod_mqttConnect+0x266>
				}
				else if (2 == ls_result)	//Failed to send packet
 800d48a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d48e:	2b02      	cmp	r3, #2
 800d490:	d136      	bne.n	800d500 <mod_mqttConnect+0x194>
				{
					lu8p_Ptr += 2;
 800d492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d494:	3302      	adds	r3, #2
 800d496:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800d498:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d49a:	f004 fb9b 	bl	8011bd4 <atoi>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)	//Connection Refused: Unacceptable Protocol Version
 800d4a2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d103      	bne.n	800d4b2 <mod_mqttConnect+0x146>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d4aa:	4b54      	ldr	r3, [pc, #336]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4ac:	2203      	movs	r2, #3
 800d4ae:	715a      	strb	r2, [r3, #5]
 800d4b0:	e022      	b.n	800d4f8 <mod_mqttConnect+0x18c>
								E_CON_REF_UNACC_PRO_VER;
					}
					else if (2 == ls_result)	//Connection Refused: Identifier Rejected
 800d4b2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d103      	bne.n	800d4c2 <mod_mqttConnect+0x156>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_ID_REJECT;
 800d4ba:	4b50      	ldr	r3, [pc, #320]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4bc:	2204      	movs	r2, #4
 800d4be:	715a      	strb	r2, [r3, #5]
 800d4c0:	e01a      	b.n	800d4f8 <mod_mqttConnect+0x18c>
					}
					else if (3 == ls_result)	//Connection Refused: Server Unavailable
 800d4c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4c6:	2b03      	cmp	r3, #3
 800d4c8:	d103      	bne.n	800d4d2 <mod_mqttConnect+0x166>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d4ca:	4b4c      	ldr	r3, [pc, #304]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4cc:	2205      	movs	r2, #5
 800d4ce:	715a      	strb	r2, [r3, #5]
 800d4d0:	e012      	b.n	800d4f8 <mod_mqttConnect+0x18c>
								E_CON_REF_SERVER_UNAVAIL;
					}
					else if (4 == ls_result)//Connection Refused: Bad User Name or Password
 800d4d2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4d6:	2b04      	cmp	r3, #4
 800d4d8:	d103      	bne.n	800d4e2 <mod_mqttConnect+0x176>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800d4da:	4b48      	ldr	r3, [pc, #288]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4dc:	2206      	movs	r2, #6
 800d4de:	715a      	strb	r2, [r3, #5]
 800d4e0:	e00a      	b.n	800d4f8 <mod_mqttConnect+0x18c>
								E_CON_REF_BAD_USR_PASS;
					}
					else if (5 == ls_result) //Connection Refused: Not Authorized
 800d4e2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d4e6:	2b05      	cmp	r3, #5
 800d4e8:	d103      	bne.n	800d4f2 <mod_mqttConnect+0x186>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_NOT_AUTH;
 800d4ea:	4b44      	ldr	r3, [pc, #272]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4ec:	2207      	movs	r2, #7
 800d4ee:	715a      	strb	r2, [r3, #5]
 800d4f0:	e002      	b.n	800d4f8 <mod_mqttConnect+0x18c>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d4f2:	4b42      	ldr	r3, [pc, #264]	; (800d5fc <mod_mqttConnect+0x290>)
 800d4f4:	2208      	movs	r2, #8
 800d4f6:	715a      	strb	r2, [r3, #5]
					}

					len_retStatus = E_RET_FAILED;
 800d4f8:	2302      	movs	r3, #2
 800d4fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d4fe:	e068      	b.n	800d5d2 <mod_mqttConnect+0x266>
				}
				else
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d500:	4b3e      	ldr	r3, [pc, #248]	; (800d5fc <mod_mqttConnect+0x290>)
 800d502:	2208      	movs	r2, #8
 800d504:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_FAILED;
 800d506:	2302      	movs	r3, #2
 800d508:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d50c:	e061      	b.n	800d5d2 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d50e:	2302      	movs	r3, #2
 800d510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d514:	e05d      	b.n	800d5d2 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d516:	2302      	movs	r3, #2
 800d518:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d51c:	e059      	b.n	800d5d2 <mod_mqttConnect+0x266>
		}
	}
	else if (E_RET_RSP_ERROR == len_retStatus)
 800d51e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d522:	2b03      	cmp	r3, #3
 800d524:	d13c      	bne.n	800d5a0 <mod_mqttConnect+0x234>
	{
		lsu8_retryCnt = 0;
 800d526:	4b32      	ldr	r3, [pc, #200]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d52c:	4831      	ldr	r0, [pc, #196]	; (800d5f4 <mod_mqttConnect+0x288>)
 800d52e:	4934      	ldr	r1, [pc, #208]	; (800d600 <mod_mqttConnect+0x294>)
 800d530:	f004 fead 	bl	801228e <strstr>
 800d534:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) QMTSTAT);
		if (lu8p_Ptr != NULL)
 800d536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d02d      	beq.n	800d598 <mod_mqttConnect+0x22c>
		{
			if (lu8p_Ptr != NULL)
 800d53c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d026      	beq.n	800d590 <mod_mqttConnect+0x224>
			{
				lu8p_Ptr += 10;
 800d542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d544:	330a      	adds	r3, #10
 800d546:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800d548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d54a:	f004 fb43 	bl	8011bd4 <atoi>
 800d54e:	4603      	mov	r3, r0
 800d550:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d552:	4b23      	ldr	r3, [pc, #140]	; (800d5e0 <mod_mqttConnect+0x274>)
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d55c:	429a      	cmp	r2, r3
 800d55e:	d113      	bne.n	800d588 <mod_mqttConnect+0x21c>
				{
					lu8p_Ptr += 2;
 800d560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d562:	3302      	adds	r3, #2
 800d564:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d568:	f004 fb34 	bl	8011bd4 <atoi>
 800d56c:	4603      	mov	r3, r0
 800d56e:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)
 800d570:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d574:	2b01      	cmp	r3, #1
 800d576:	d103      	bne.n	800d580 <mod_mqttConnect+0x214>
					{
						len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d578:	230a      	movs	r3, #10
 800d57a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d57e:	e028      	b.n	800d5d2 <mod_mqttConnect+0x266>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d580:	2302      	movs	r3, #2
 800d582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d586:	e024      	b.n	800d5d2 <mod_mqttConnect+0x266>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d588:	2302      	movs	r3, #2
 800d58a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d58e:	e020      	b.n	800d5d2 <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d590:	2302      	movs	r3, #2
 800d592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d596:	e01c      	b.n	800d5d2 <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d598:	2302      	movs	r3, #2
 800d59a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d59e:	e018      	b.n	800d5d2 <mod_mqttConnect+0x266>
		}

	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d5a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d5a4:	2b04      	cmp	r3, #4
 800d5a6:	d014      	beq.n	800d5d2 <mod_mqttConnect+0x266>
	{
		lsu8_retryCnt++;
 800d5a8:	4b11      	ldr	r3, [pc, #68]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d5aa:	781b      	ldrb	r3, [r3, #0]
 800d5ac:	3301      	adds	r3, #1
 800d5ae:	b2da      	uxtb	r2, r3
 800d5b0:	4b0f      	ldr	r3, [pc, #60]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d5b2:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d5b4:	4b0e      	ldr	r3, [pc, #56]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d5b6:	781b      	ldrb	r3, [r3, #0]
 800d5b8:	2b02      	cmp	r3, #2
 800d5ba:	d803      	bhi.n	800d5c4 <mod_mqttConnect+0x258>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d5bc:	2304      	movs	r3, #4
 800d5be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d5c2:	e006      	b.n	800d5d2 <mod_mqttConnect+0x266>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d5c4:	4b0a      	ldr	r3, [pc, #40]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d5c6:	781b      	ldrb	r3, [r3, #0]
 800d5c8:	2b03      	cmp	r3, #3
 800d5ca:	d902      	bls.n	800d5d2 <mod_mqttConnect+0x266>
		{
			lsu8_retryCnt = 0;
 800d5cc:	4b08      	ldr	r3, [pc, #32]	; (800d5f0 <mod_mqttConnect+0x284>)
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d5d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d5d6:	4618      	mov	r0, r3
 800d5d8:	3734      	adds	r7, #52	; 0x34
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd90      	pop	{r4, r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	1fff47a5 	.word	0x1fff47a5
 800d5e4:	1fff475d 	.word	0x1fff475d
 800d5e8:	080143d8 	.word	0x080143d8
 800d5ec:	080143e8 	.word	0x080143e8
 800d5f0:	1fff47c1 	.word	0x1fff47c1
 800d5f4:	1fff4704 	.word	0x1fff4704
 800d5f8:	1fff0622 	.word	0x1fff0622
 800d5fc:	1ffea50c 	.word	0x1ffea50c
 800d600:	080142dc 	.word	0x080142dc

0800d604 <mod_mqttEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttEnableFunctionality(void)
{
 800d604:	b580      	push	{r7, lr}
 800d606:	b082      	sub	sp, #8
 800d608:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d60a:	2304      	movs	r3, #4
 800d60c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d60e:	2300      	movs	r3, #0
 800d610:	80bb      	strh	r3, [r7, #4]
 800d612:	2300      	movs	r3, #0
 800d614:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "1\r\n");
 800d616:	1d3b      	adds	r3, r7, #4
 800d618:	4a16      	ldr	r2, [pc, #88]	; (800d674 <mod_mqttEnableFunctionality+0x70>)
 800d61a:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d61c:	1d3b      	adds	r3, r7, #4
 800d61e:	2017      	movs	r0, #23
 800d620:	4619      	mov	r1, r3
 800d622:	f7fe fdbd 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d626:	4603      	mov	r3, r0
 800d628:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d62a:	79fb      	ldrb	r3, [r7, #7]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d105      	bne.n	800d63c <mod_mqttEnableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d630:	4b11      	ldr	r3, [pc, #68]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d632:	2200      	movs	r2, #0
 800d634:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d636:	2300      	movs	r3, #0
 800d638:	71fb      	strb	r3, [r7, #7]
 800d63a:	e016      	b.n	800d66a <mod_mqttEnableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d63c:	79fb      	ldrb	r3, [r7, #7]
 800d63e:	2b04      	cmp	r3, #4
 800d640:	d013      	beq.n	800d66a <mod_mqttEnableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d642:	4b0d      	ldr	r3, [pc, #52]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d644:	781b      	ldrb	r3, [r3, #0]
 800d646:	3301      	adds	r3, #1
 800d648:	b2da      	uxtb	r2, r3
 800d64a:	4b0b      	ldr	r3, [pc, #44]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d64c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d64e:	4b0a      	ldr	r3, [pc, #40]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d650:	781b      	ldrb	r3, [r3, #0]
 800d652:	2b02      	cmp	r3, #2
 800d654:	d802      	bhi.n	800d65c <mod_mqttEnableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d656:	2304      	movs	r3, #4
 800d658:	71fb      	strb	r3, [r7, #7]
 800d65a:	e006      	b.n	800d66a <mod_mqttEnableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d65c:	4b06      	ldr	r3, [pc, #24]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d65e:	781b      	ldrb	r3, [r3, #0]
 800d660:	2b03      	cmp	r3, #3
 800d662:	d902      	bls.n	800d66a <mod_mqttEnableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d664:	4b04      	ldr	r3, [pc, #16]	; (800d678 <mod_mqttEnableFunctionality+0x74>)
 800d666:	2200      	movs	r2, #0
 800d668:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d66a:	79fb      	ldrb	r3, [r7, #7]
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}
 800d674:	000a0d31 	.word	0x000a0d31
 800d678:	1fff47c2 	.word	0x1fff47c2

0800d67c <mod_mqttDisableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableFunctionality(void)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b082      	sub	sp, #8
 800d680:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d682:	2304      	movs	r3, #4
 800d684:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d686:	2300      	movs	r3, #0
 800d688:	80bb      	strh	r3, [r7, #4]
 800d68a:	2300      	movs	r3, #0
 800d68c:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "4\r\n");
 800d68e:	1d3b      	adds	r3, r7, #4
 800d690:	4a16      	ldr	r2, [pc, #88]	; (800d6ec <mod_mqttDisableFunctionality+0x70>)
 800d692:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d694:	1d3b      	adds	r3, r7, #4
 800d696:	2017      	movs	r0, #23
 800d698:	4619      	mov	r1, r3
 800d69a:	f7fe fd81 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d69e:	4603      	mov	r3, r0
 800d6a0:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d6a2:	79fb      	ldrb	r3, [r7, #7]
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d105      	bne.n	800d6b4 <mod_mqttDisableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d6a8:	4b11      	ldr	r3, [pc, #68]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d6ae:	2300      	movs	r3, #0
 800d6b0:	71fb      	strb	r3, [r7, #7]
 800d6b2:	e016      	b.n	800d6e2 <mod_mqttDisableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d6b4:	79fb      	ldrb	r3, [r7, #7]
 800d6b6:	2b04      	cmp	r3, #4
 800d6b8:	d013      	beq.n	800d6e2 <mod_mqttDisableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d6ba:	4b0d      	ldr	r3, [pc, #52]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	b2da      	uxtb	r2, r3
 800d6c2:	4b0b      	ldr	r3, [pc, #44]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6c4:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d6c6:	4b0a      	ldr	r3, [pc, #40]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6c8:	781b      	ldrb	r3, [r3, #0]
 800d6ca:	2b02      	cmp	r3, #2
 800d6cc:	d802      	bhi.n	800d6d4 <mod_mqttDisableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d6ce:	2304      	movs	r3, #4
 800d6d0:	71fb      	strb	r3, [r7, #7]
 800d6d2:	e006      	b.n	800d6e2 <mod_mqttDisableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d6d4:	4b06      	ldr	r3, [pc, #24]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6d6:	781b      	ldrb	r3, [r3, #0]
 800d6d8:	2b03      	cmp	r3, #3
 800d6da:	d902      	bls.n	800d6e2 <mod_mqttDisableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d6dc:	4b04      	ldr	r3, [pc, #16]	; (800d6f0 <mod_mqttDisableFunctionality+0x74>)
 800d6de:	2200      	movs	r2, #0
 800d6e0:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	000a0d34 	.word	0x000a0d34
 800d6f0:	1fff47c3 	.word	0x1fff47c3

0800d6f4 <mod_mqttDisableEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableEnableFunctionality(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d6fa:	2304      	movs	r3, #4
 800d6fc:	71fb      	strb	r3, [r7, #7]

	switch (sen_modemResetState)
 800d6fe:	4b21      	ldr	r3, [pc, #132]	; (800d784 <mod_mqttDisableEnableFunctionality+0x90>)
 800d700:	781b      	ldrb	r3, [r3, #0]
 800d702:	2b01      	cmp	r3, #1
 800d704:	d016      	beq.n	800d734 <mod_mqttDisableEnableFunctionality+0x40>
 800d706:	2b02      	cmp	r3, #2
 800d708:	d02b      	beq.n	800d762 <mod_mqttDisableEnableFunctionality+0x6e>
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d000      	beq.n	800d710 <mod_mqttDisableEnableFunctionality+0x1c>
				len_retStatus = E_RET_SUCCESS;
			}
		break;

		default:
		break;
 800d70e:	e034      	b.n	800d77a <mod_mqttDisableEnableFunctionality+0x86>
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;

	switch (sen_modemResetState)
	{
		case E_RST_DISABLE_FUNCTION:
			len_retStatus = mod_mqttDisableFunctionality();
 800d710:	f7ff ffb4 	bl	800d67c <mod_mqttDisableFunctionality>
 800d714:	4603      	mov	r3, r0
 800d716:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800d718:	79fb      	ldrb	r3, [r7, #7]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d109      	bne.n	800d732 <mod_mqttDisableEnableFunctionality+0x3e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800d71e:	2304      	movs	r3, #4
 800d720:	71fb      	strb	r3, [r7, #7]
				sen_modemResetState = E_RST_ENALBE_FUNCTION;
 800d722:	4b18      	ldr	r3, [pc, #96]	; (800d784 <mod_mqttDisableEnableFunctionality+0x90>)
 800d724:	2201      	movs	r2, #1
 800d726:	701a      	strb	r2, [r3, #0]
				tm_setResetTimer(5000);
 800d728:	f241 3088 	movw	r0, #5000	; 0x1388
 800d72c:	f7f2 fe3a 	bl	80003a4 <tm_setResetTimer>
			}
		break;
 800d730:	e023      	b.n	800d77a <mod_mqttDisableEnableFunctionality+0x86>
 800d732:	e022      	b.n	800d77a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_ENALBE_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d734:	f7f2 fe44 	bl	80003c0 <tm_getResetTimerValue>
 800d738:	4603      	mov	r3, r0
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d110      	bne.n	800d760 <mod_mqttDisableEnableFunctionality+0x6c>
			{
				len_retStatus = mod_mqttEnableFunctionality();
 800d73e:	f7ff ff61 	bl	800d604 <mod_mqttEnableFunctionality>
 800d742:	4603      	mov	r3, r0
 800d744:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800d746:	79fb      	ldrb	r3, [r7, #7]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d109      	bne.n	800d760 <mod_mqttDisableEnableFunctionality+0x6c>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d74c:	2304      	movs	r3, #4
 800d74e:	71fb      	strb	r3, [r7, #7]
					sen_modemResetState = E_RST_WAIT_FUNCTION;
 800d750:	4b0c      	ldr	r3, [pc, #48]	; (800d784 <mod_mqttDisableEnableFunctionality+0x90>)
 800d752:	2202      	movs	r2, #2
 800d754:	701a      	strb	r2, [r3, #0]
					tm_setResetTimer(5000);
 800d756:	f241 3088 	movw	r0, #5000	; 0x1388
 800d75a:	f7f2 fe23 	bl	80003a4 <tm_setResetTimer>
				}
			}
		break;
 800d75e:	e00c      	b.n	800d77a <mod_mqttDisableEnableFunctionality+0x86>
 800d760:	e00b      	b.n	800d77a <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_WAIT_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d762:	f7f2 fe2d 	bl	80003c0 <tm_getResetTimerValue>
 800d766:	4603      	mov	r3, r0
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d105      	bne.n	800d778 <mod_mqttDisableEnableFunctionality+0x84>
			{
				sen_modemResetState = E_RST_DISABLE_FUNCTION;
 800d76c:	4b05      	ldr	r3, [pc, #20]	; (800d784 <mod_mqttDisableEnableFunctionality+0x90>)
 800d76e:	2200      	movs	r2, #0
 800d770:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_SUCCESS;
 800d772:	2300      	movs	r3, #0
 800d774:	71fb      	strb	r3, [r7, #7]
			}
		break;
 800d776:	e7ff      	b.n	800d778 <mod_mqttDisableEnableFunctionality+0x84>
 800d778:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d77a:	79fb      	ldrb	r3, [r7, #7]
}
 800d77c:	4618      	mov	r0, r3
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}
 800d784:	1fff47ad 	.word	0x1fff47ad

0800d788 <mod_mqttPublishData>:
*
* Return values 	:	en_responseRetCodes_t - return status
*
****************************************************************************/
static en_responseRetCodes_t mod_mqttPublishData(uint8_t * lu8p_data, uint16_t lu16_len, uint8_t* lu8p_topic)
{
 800d788:	b590      	push	{r4, r7, lr}
 800d78a:	b09b      	sub	sp, #108	; 0x6c
 800d78c:	af02      	add	r7, sp, #8
 800d78e:	60f8      	str	r0, [r7, #12]
 800d790:	460b      	mov	r3, r1
 800d792:	607a      	str	r2, [r7, #4]
 800d794:	817b      	strh	r3, [r7, #10]
	static uint8_t lsu8_retryCnt = 0;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d796:	2304      	movs	r3, #4
 800d798:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t *lu8p_Ptr = NULL;
 800d79c:	2300      	movs	r3, #0
 800d79e:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t lu8arr_param[50] = { 0 };
 800d7a0:	f107 0314 	add.w	r3, r7, #20
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	601a      	str	r2, [r3, #0]
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
 800d7ae:	3304      	adds	r3, #4
 800d7b0:	2200      	movs	r2, #0
 800d7b2:	601a      	str	r2, [r3, #0]
 800d7b4:	3304      	adds	r3, #4
 800d7b6:	2200      	movs	r2, #0
 800d7b8:	601a      	str	r2, [r3, #0]
 800d7ba:	3304      	adds	r3, #4
 800d7bc:	2200      	movs	r2, #0
 800d7be:	601a      	str	r2, [r3, #0]
 800d7c0:	3304      	adds	r3, #4
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	601a      	str	r2, [r3, #0]
 800d7c6:	3304      	adds	r3, #4
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	601a      	str	r2, [r3, #0]
 800d7cc:	3304      	adds	r3, #4
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	601a      	str	r2, [r3, #0]
 800d7d2:	3304      	adds	r3, #4
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	601a      	str	r2, [r3, #0]
 800d7d8:	3304      	adds	r3, #4
 800d7da:	2200      	movs	r2, #0
 800d7dc:	601a      	str	r2, [r3, #0]
 800d7de:	3304      	adds	r3, #4
 800d7e0:	2200      	movs	r2, #0
 800d7e2:	601a      	str	r2, [r3, #0]
 800d7e4:	3304      	adds	r3, #4
 800d7e6:	2200      	movs	r2, #0
 800d7e8:	601a      	str	r2, [r3, #0]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	801a      	strh	r2, [r3, #0]
 800d7f0:	3302      	adds	r3, #2
	short ls_result = 0;
 800d7f2:	2300      	movs	r3, #0
 800d7f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint64_t lu64_totalTime = 0;
 800d7f8:	f04f 0200 	mov.w	r2, #0
 800d7fc:	f04f 0300 	mov.w	r3, #0
 800d800:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 
	switch (sen_publishDataState)
 800d804:	4bba      	ldr	r3, [pc, #744]	; (800daf0 <mod_mqttPublishData+0x368>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d003      	beq.n	800d814 <mod_mqttPublishData+0x8c>
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	f000 80c3 	beq.w	800d998 <mod_mqttPublishData+0x210>
 800d812:	e1b7      	b.n	800db84 <mod_mqttPublishData+0x3fc>
	{
		case E_PUBLISH_CMD_STATE:
 
			sprintf((char *) lu8arr_param, (const char*) "%d,1,%d,0,%s,%d\r\n",
 800d814:	4bb7      	ldr	r3, [pc, #732]	; (800daf4 <mod_mqttPublishData+0x36c>)
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	461c      	mov	r4, r3
 800d81a:	897b      	ldrh	r3, [r7, #10]
 800d81c:	f107 0114 	add.w	r1, r7, #20
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	9200      	str	r2, [sp, #0]
 800d824:	9301      	str	r3, [sp, #4]
 800d826:	4608      	mov	r0, r1
 800d828:	49b3      	ldr	r1, [pc, #716]	; (800daf8 <mod_mqttPublishData+0x370>)
 800d82a:	4622      	mov	r2, r4
 800d82c:	2300      	movs	r3, #0
 800d82e:	f004 fccb 	bl	80121c8 <siprintf>
					sgu8_mqttClientId, MQTT_PUBLISH_QOS, lu8p_topic, lu16_len);
 
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH,
 800d832:	f107 0314 	add.w	r3, r7, #20
 800d836:	2015      	movs	r0, #21
 800d838:	4619      	mov	r1, r3
 800d83a:	f7fe fcb1 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d83e:	4603      	mov	r3, r0
 800d840:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					(uint8_t *) lu8arr_param);
			if (E_RET_SUCCESS == len_retStatus)
 800d844:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d130      	bne.n	800d8ae <mod_mqttPublishData+0x126>
			{
				lu8p_Ptr =
 800d84c:	48ab      	ldr	r0, [pc, #684]	; (800dafc <mod_mqttPublishData+0x374>)
 800d84e:	49ac      	ldr	r1, [pc, #688]	; (800db00 <mod_mqttPublishData+0x378>)
 800d850:	f004 fd1d 	bl	801228e <strstr>
 800d854:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH].mu8arr_respString);
				if (NULL != lu8p_Ptr)
 800d856:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d858:	2b00      	cmp	r3, #0
 800d85a:	d01f      	beq.n	800d89c <mod_mqttPublishData+0x114>
				{
					lsu8_retryCnt = 0;
 800d85c:	4ba9      	ldr	r3, [pc, #676]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d85e:	2200      	movs	r2, #0
 800d860:	701a      	strb	r2, [r3, #0]
 
					memset(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString, 0,
 800d862:	48a9      	ldr	r0, [pc, #676]	; (800db08 <mod_mqttPublishData+0x380>)
 800d864:	2100      	movs	r1, #0
 800d866:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d86a:	f004 f9ee 	bl	8011c4a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString));
 
					strncpy(
 800d86e:	897b      	ldrh	r3, [r7, #10]
 800d870:	48a5      	ldr	r0, [pc, #660]	; (800db08 <mod_mqttPublishData+0x380>)
 800d872:	68f9      	ldr	r1, [r7, #12]
 800d874:	461a      	mov	r2, r3
 800d876:	f004 fcf8 	bl	801226a <strncpy>
							(char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString,
							(char *) lu8p_data, lu16_len);
 
					gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString[lu16_len++] =
 800d87a:	897b      	ldrh	r3, [r7, #10]
 800d87c:	1c5a      	adds	r2, r3, #1
 800d87e:	817a      	strh	r2, [r7, #10]
 800d880:	461a      	mov	r2, r3
 800d882:	4ba2      	ldr	r3, [pc, #648]	; (800db0c <mod_mqttPublishData+0x384>)
 800d884:	4413      	add	r3, r2
 800d886:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800d88a:	3318      	adds	r3, #24
 800d88c:	2200      	movs	r2, #0
 800d88e:	701a      	strb	r2, [r3, #0]
							'\0';
 
					sen_publishDataState = E_PUBLISH_DATA_STATE;
 800d890:	4b97      	ldr	r3, [pc, #604]	; (800daf0 <mod_mqttPublishData+0x368>)
 800d892:	2201      	movs	r2, #1
 800d894:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d896:	2304      	movs	r3, #4
 800d898:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d89c:	4b9c      	ldr	r3, [pc, #624]	; (800db10 <mod_mqttPublishData+0x388>)
 800d89e:	2200      	movs	r2, #0
 800d8a0:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d8a2:	4896      	ldr	r0, [pc, #600]	; (800dafc <mod_mqttPublishData+0x374>)
 800d8a4:	2100      	movs	r1, #0
 800d8a6:	2240      	movs	r2, #64	; 0x40
 800d8a8:	f004 f9cf 	bl	8011c4a <memset>
 800d8ac:	e073      	b.n	800d996 <mod_mqttPublishData+0x20e>
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8b2:	2b0b      	cmp	r3, #11
 800d8b4:	d107      	bne.n	800d8c6 <mod_mqttPublishData+0x13e>
			{
				if(sgu16_cmeError == 58)
 800d8b6:	4b97      	ldr	r3, [pc, #604]	; (800db14 <mod_mqttPublishData+0x38c>)
 800d8b8:	881b      	ldrh	r3, [r3, #0]
 800d8ba:	2b3a      	cmp	r3, #58	; 0x3a
 800d8bc:	d16b      	bne.n	800d996 <mod_mqttPublishData+0x20e>
				{
					len_retStatus = E_RET_CME_ERROR;
 800d8be:	230b      	movs	r3, #11
 800d8c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				{
					lsu8_retryCnt = 0;
					len_retStatus = E_RET_TIMEOUT_ERROR;
				}
			}
		break;
 800d8c4:	e162      	b.n	800db8c <mod_mqttPublishData+0x404>
				if(sgu16_cmeError == 58)
				{
					len_retStatus = E_RET_CME_ERROR;
				}
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d8c6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d8ca:	2b03      	cmp	r3, #3
 800d8cc:	d146      	bne.n	800d95c <mod_mqttPublishData+0x1d4>
			{
				lsu8_retryCnt = 0;
 800d8ce:	4b8d      	ldr	r3, [pc, #564]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d8d0:	2200      	movs	r2, #0
 800d8d2:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d8d4:	4889      	ldr	r0, [pc, #548]	; (800dafc <mod_mqttPublishData+0x374>)
 800d8d6:	4990      	ldr	r1, [pc, #576]	; (800db18 <mod_mqttPublishData+0x390>)
 800d8d8:	f004 fcd9 	bl	801228e <strstr>
 800d8dc:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d8de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d02f      	beq.n	800d944 <mod_mqttPublishData+0x1bc>
				{
					if (lu8p_Ptr != NULL)
 800d8e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d028      	beq.n	800d93c <mod_mqttPublishData+0x1b4>
					{
						lu8p_Ptr += 10;
 800d8ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d8ec:	330a      	adds	r3, #10
 800d8ee:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d8f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d8f2:	f004 f96f 	bl	8011bd4 <atoi>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d8fc:	4b7d      	ldr	r3, [pc, #500]	; (800daf4 <mod_mqttPublishData+0x36c>)
 800d8fe:	781b      	ldrb	r3, [r3, #0]
 800d900:	461a      	mov	r2, r3
 800d902:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d906:	429a      	cmp	r2, r3
 800d908:	d114      	bne.n	800d934 <mod_mqttPublishData+0x1ac>
						{
							lu8p_Ptr += 2;
 800d90a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d90c:	3302      	adds	r3, #2
 800d90e:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d910:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d912:	f004 f95f 	bl	8011bd4 <atoi>
 800d916:	4603      	mov	r3, r0
 800d918:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d91c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d920:	2b01      	cmp	r3, #1
 800d922:	d103      	bne.n	800d92c <mod_mqttPublishData+0x1a4>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d924:	230a      	movs	r3, #10
 800d926:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d92a:	e00e      	b.n	800d94a <mod_mqttPublishData+0x1c2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d92c:	2302      	movs	r3, #2
 800d92e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d932:	e00a      	b.n	800d94a <mod_mqttPublishData+0x1c2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d934:	2302      	movs	r3, #2
 800d936:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d93a:	e006      	b.n	800d94a <mod_mqttPublishData+0x1c2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d93c:	2302      	movs	r3, #2
 800d93e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d942:	e002      	b.n	800d94a <mod_mqttPublishData+0x1c2>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d944:	2302      	movs	r3, #2
 800d946:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d94a:	4b71      	ldr	r3, [pc, #452]	; (800db10 <mod_mqttPublishData+0x388>)
 800d94c:	2200      	movs	r2, #0
 800d94e:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d950:	486a      	ldr	r0, [pc, #424]	; (800dafc <mod_mqttPublishData+0x374>)
 800d952:	2100      	movs	r1, #0
 800d954:	2240      	movs	r2, #64	; 0x40
 800d956:	f004 f978 	bl	8011c4a <memset>
 800d95a:	e01c      	b.n	800d996 <mod_mqttPublishData+0x20e>
 
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d960:	2b04      	cmp	r3, #4
 800d962:	d018      	beq.n	800d996 <mod_mqttPublishData+0x20e>
			{
				lsu8_retryCnt++;
 800d964:	4b67      	ldr	r3, [pc, #412]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d966:	781b      	ldrb	r3, [r3, #0]
 800d968:	3301      	adds	r3, #1
 800d96a:	b2da      	uxtb	r2, r3
 800d96c:	4b65      	ldr	r3, [pc, #404]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d96e:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d970:	4b64      	ldr	r3, [pc, #400]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	2b02      	cmp	r3, #2
 800d976:	d803      	bhi.n	800d980 <mod_mqttPublishData+0x1f8>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d978:	2304      	movs	r3, #4
 800d97a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d97e:	e00a      	b.n	800d996 <mod_mqttPublishData+0x20e>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d980:	4b60      	ldr	r3, [pc, #384]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d982:	781b      	ldrb	r3, [r3, #0]
 800d984:	2b03      	cmp	r3, #3
 800d986:	d906      	bls.n	800d996 <mod_mqttPublishData+0x20e>
				{
					lsu8_retryCnt = 0;
 800d988:	4b5e      	ldr	r3, [pc, #376]	; (800db04 <mod_mqttPublishData+0x37c>)
 800d98a:	2200      	movs	r2, #0
 800d98c:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d98e:	2306      	movs	r3, #6
 800d990:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		break;
 800d994:	e0fa      	b.n	800db8c <mod_mqttPublishData+0x404>
 800d996:	e0f9      	b.n	800db8c <mod_mqttPublishData+0x404>
 
		case E_PUBLISH_DATA_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH_DATA, NULL);
 800d998:	2016      	movs	r0, #22
 800d99a:	2100      	movs	r1, #0
 800d99c:	f7fe fc00 	bl	800c1a0 <mod_sendCmdGetRsp>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (E_RET_SUCCESS == len_retStatus)
 800d9a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d160      	bne.n	800da70 <mod_mqttPublishData+0x2e8>
			{
				lu8p_Ptr =
 800d9ae:	4853      	ldr	r0, [pc, #332]	; (800dafc <mod_mqttPublishData+0x374>)
 800d9b0:	495a      	ldr	r1, [pc, #360]	; (800db1c <mod_mqttPublishData+0x394>)
 800d9b2:	f004 fc6c 	bl	801228e <strstr>
 800d9b6:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_otherRspString);
				if (NULL != lu8p_Ptr)
 800d9b8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d04f      	beq.n	800da5e <mod_mqttPublishData+0x2d6>
				{
					lu8p_Ptr += 11;
 800d9be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9c0:	330b      	adds	r3, #11
 800d9c2:	65bb      	str	r3, [r7, #88]	; 0x58
					ls_result = atoi((const char *) lu8p_Ptr);
 800d9c4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d9c6:	f004 f905 	bl	8011bd4 <atoi>
 800d9ca:	4603      	mov	r3, r0
 800d9cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					if (sgu8_mqttClientId == ls_result)
 800d9d0:	4b48      	ldr	r3, [pc, #288]	; (800daf4 <mod_mqttPublishData+0x36c>)
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	461a      	mov	r2, r3
 800d9d6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d13f      	bne.n	800da5e <mod_mqttPublishData+0x2d6>
					{
						lu8p_Ptr += 2;
 800d9de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9e0:	3302      	adds	r3, #2
 800d9e2:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((const char *) lu8p_Ptr);
 800d9e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d9e6:	f004 f8f5 	bl	8011bd4 <atoi>
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (1 == ls_result)	//msg id
 800d9f0:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d9f4:	2b01      	cmp	r3, #1
 800d9f6:	d132      	bne.n	800da5e <mod_mqttPublishData+0x2d6>
						{
							lu8p_Ptr += 2;
 800d9f8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9fa:	3302      	adds	r3, #2
 800d9fc:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((const char *) lu8p_Ptr);
 800d9fe:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da00:	f004 f8e8 	bl	8011bd4 <atoi>
 800da04:	4603      	mov	r3, r0
 800da06:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (E_PUB_SUCCESS == ls_result)	//Packet sent successfully and ACK received
 800da0a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d109      	bne.n	800da26 <mod_mqttPublishData+0x29e>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_SUCCESS;
 800da12:	4b43      	ldr	r3, [pc, #268]	; (800db20 <mod_mqttPublishData+0x398>)
 800da14:	2200      	movs	r2, #0
 800da16:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_SUCCESS;
 800da18:	2300      	movs	r3, #0
 800da1a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
								sen_publishDataState = E_PUBLISH_CMD_STATE;
 800da1e:	4b34      	ldr	r3, [pc, #208]	; (800daf0 <mod_mqttPublishData+0x368>)
 800da20:	2200      	movs	r2, #0
 800da22:	701a      	strb	r2, [r3, #0]
 800da24:	e01b      	b.n	800da5e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_PACK_RETRAN == ls_result)	//Packet retransmission
 800da26:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800da2a:	2b01      	cmp	r3, #1
 800da2c:	d106      	bne.n	800da3c <mod_mqttPublishData+0x2b4>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_PACK_RETRAN;
 800da2e:	4b3c      	ldr	r3, [pc, #240]	; (800db20 <mod_mqttPublishData+0x398>)
 800da30:	2201      	movs	r2, #1
 800da32:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_INPROGRESS;
 800da34:	2304      	movs	r3, #4
 800da36:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da3a:	e010      	b.n	800da5e <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_FAILED_SEND_PACK == ls_result)	//Failed to send packet
 800da3c:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800da40:	2b02      	cmp	r3, #2
 800da42:	d106      	bne.n	800da52 <mod_mqttPublishData+0x2ca>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_FAILED_SEND_PACK;
 800da44:	4b36      	ldr	r3, [pc, #216]	; (800db20 <mod_mqttPublishData+0x398>)
 800da46:	2202      	movs	r2, #2
 800da48:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800da4a:	2302      	movs	r3, #2
 800da4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800da50:	e005      	b.n	800da5e <mod_mqttPublishData+0x2d6>
							}
							else
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_UNKNOWN_ERROR;
 800da52:	4b33      	ldr	r3, [pc, #204]	; (800db20 <mod_mqttPublishData+0x398>)
 800da54:	2203      	movs	r2, #3
 800da56:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800da58:	2302      	movs	r3, #2
 800da5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							}
						}
					}
				}
 
				sgu8_respCount = 0;
 800da5e:	4b2c      	ldr	r3, [pc, #176]	; (800db10 <mod_mqttPublishData+0x388>)
 800da60:	2200      	movs	r2, #0
 800da62:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800da64:	4825      	ldr	r0, [pc, #148]	; (800dafc <mod_mqttPublishData+0x374>)
 800da66:	2100      	movs	r1, #0
 800da68:	2240      	movs	r2, #64	; 0x40
 800da6a:	f004 f8ee 	bl	8011c4a <memset>
 800da6e:	e088      	b.n	800db82 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800da70:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800da74:	2b03      	cmp	r3, #3
 800da76:	d164      	bne.n	800db42 <mod_mqttPublishData+0x3ba>
			{
				lsu8_retryCnt = 0;
 800da78:	4b22      	ldr	r3, [pc, #136]	; (800db04 <mod_mqttPublishData+0x37c>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800da7e:	481f      	ldr	r0, [pc, #124]	; (800dafc <mod_mqttPublishData+0x374>)
 800da80:	4925      	ldr	r1, [pc, #148]	; (800db18 <mod_mqttPublishData+0x390>)
 800da82:	f004 fc04 	bl	801228e <strstr>
 800da86:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800da88:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d04a      	beq.n	800db24 <mod_mqttPublishData+0x39c>
				{
					if (lu8p_Ptr != NULL)
 800da8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da90:	2b00      	cmp	r3, #0
 800da92:	d028      	beq.n	800dae6 <mod_mqttPublishData+0x35e>
					{
						lu8p_Ptr += 10;
 800da94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800da96:	330a      	adds	r3, #10
 800da98:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800da9a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800da9c:	f004 f89a 	bl	8011bd4 <atoi>
 800daa0:	4603      	mov	r3, r0
 800daa2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800daa6:	4b13      	ldr	r3, [pc, #76]	; (800daf4 <mod_mqttPublishData+0x36c>)
 800daa8:	781b      	ldrb	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d114      	bne.n	800dade <mod_mqttPublishData+0x356>
						{
							lu8p_Ptr += 2;
 800dab4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dab6:	3302      	adds	r3, #2
 800dab8:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800daba:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800dabc:	f004 f88a 	bl	8011bd4 <atoi>
 800dac0:	4603      	mov	r3, r0
 800dac2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800dac6:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800daca:	2b01      	cmp	r3, #1
 800dacc:	d103      	bne.n	800dad6 <mod_mqttPublishData+0x34e>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800dace:	230a      	movs	r3, #10
 800dad0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dad4:	e029      	b.n	800db2a <mod_mqttPublishData+0x3a2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800dad6:	2302      	movs	r3, #2
 800dad8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dadc:	e025      	b.n	800db2a <mod_mqttPublishData+0x3a2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800dade:	2302      	movs	r3, #2
 800dae0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800dae4:	e021      	b.n	800db2a <mod_mqttPublishData+0x3a2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800dae6:	2302      	movs	r3, #2
 800dae8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800daec:	e01d      	b.n	800db2a <mod_mqttPublishData+0x3a2>
 800daee:	bf00      	nop
 800daf0:	1fff47ac 	.word	0x1fff47ac
 800daf4:	1fff47a5 	.word	0x1fff47a5
 800daf8:	080143fc 	.word	0x080143fc
 800dafc:	1fff4704 	.word	0x1fff4704
 800db00:	1fff0a94 	.word	0x1fff0a94
 800db04:	1fff47c4 	.word	0x1fff47c4
 800db08:	1fff0b30 	.word	0x1fff0b30
 800db0c:	1ffea518 	.word	0x1ffea518
 800db10:	1fff47a4 	.word	0x1fff47a4
 800db14:	1fff47a6 	.word	0x1fff47a6
 800db18:	080142dc 	.word	0x080142dc
 800db1c:	1fff0f6a 	.word	0x1fff0f6a
 800db20:	1ffea50c 	.word	0x1ffea50c
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800db24:	2302      	movs	r3, #2
 800db26:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800db2a:	4b1b      	ldr	r3, [pc, #108]	; (800db98 <mod_mqttPublishData+0x410>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800db30:	481a      	ldr	r0, [pc, #104]	; (800db9c <mod_mqttPublishData+0x414>)
 800db32:	2100      	movs	r1, #0
 800db34:	2240      	movs	r2, #64	; 0x40
 800db36:	f004 f888 	bl	8011c4a <memset>
 
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800db3a:	4b19      	ldr	r3, [pc, #100]	; (800dba0 <mod_mqttPublishData+0x418>)
 800db3c:	2200      	movs	r2, #0
 800db3e:	701a      	strb	r2, [r3, #0]
 800db40:	e01f      	b.n	800db82 <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800db42:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800db46:	2b04      	cmp	r3, #4
 800db48:	d01b      	beq.n	800db82 <mod_mqttPublishData+0x3fa>
			{
				lsu8_retryCnt++;
 800db4a:	4b16      	ldr	r3, [pc, #88]	; (800dba4 <mod_mqttPublishData+0x41c>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	3301      	adds	r3, #1
 800db50:	b2da      	uxtb	r2, r3
 800db52:	4b14      	ldr	r3, [pc, #80]	; (800dba4 <mod_mqttPublishData+0x41c>)
 800db54:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800db56:	4b13      	ldr	r3, [pc, #76]	; (800dba4 <mod_mqttPublishData+0x41c>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	2b02      	cmp	r3, #2
 800db5c:	d803      	bhi.n	800db66 <mod_mqttPublishData+0x3de>
				{
					len_retStatus = E_RET_INPROGRESS;
 800db5e:	2304      	movs	r3, #4
 800db60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800db64:	e009      	b.n	800db7a <mod_mqttPublishData+0x3f2>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800db66:	4b0f      	ldr	r3, [pc, #60]	; (800dba4 <mod_mqttPublishData+0x41c>)
 800db68:	781b      	ldrb	r3, [r3, #0]
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d905      	bls.n	800db7a <mod_mqttPublishData+0x3f2>
				{
					lsu8_retryCnt = 0;
 800db6e:	4b0d      	ldr	r3, [pc, #52]	; (800dba4 <mod_mqttPublishData+0x41c>)
 800db70:	2200      	movs	r2, #0
 800db72:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800db74:	2306      	movs	r3, #6
 800db76:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800db7a:	4b09      	ldr	r3, [pc, #36]	; (800dba0 <mod_mqttPublishData+0x418>)
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800db80:	e004      	b.n	800db8c <mod_mqttPublishData+0x404>
 800db82:	e003      	b.n	800db8c <mod_mqttPublishData+0x404>
 
		default:
			len_retStatus = E_RET_SUCCESS;
 800db84:	2300      	movs	r3, #0
 800db86:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 800db8a:	bf00      	nop
	}
 
	return len_retStatus;
 800db8c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800db90:	4618      	mov	r0, r3
 800db92:	3764      	adds	r7, #100	; 0x64
 800db94:	46bd      	mov	sp, r7
 800db96:	bd90      	pop	{r4, r7, pc}
 800db98:	1fff47a4 	.word	0x1fff47a4
 800db9c:	1fff4704 	.word	0x1fff4704
 800dba0:	1fff47ac 	.word	0x1fff47ac
 800dba4:	1fff47c4 	.word	0x1fff47c4

0800dba8 <mod_getCurrentTime>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t mod_getCurrentTime(uint8_t *lu8p_data)
{
 800dba8:	b4b0      	push	{r4, r5, r7}
 800dbaa:	b085      	sub	sp, #20
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	6078      	str	r0, [r7, #4]
	uint8_t lu8_ret = 0;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	73fb      	strb	r3, [r7, #15]

	if (NULL != lu8p_data)
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2b00      	cmp	r3, #0
 800dbb8:	d00c      	beq.n	800dbd4 <mod_getCurrentTime+0x2c>
	{
		memcpy(lu8p_data, gu8_dataTime, TIME_SIZE);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	4a08      	ldr	r2, [pc, #32]	; (800dbe0 <mod_getCurrentTime+0x38>)
 800dbbe:	461d      	mov	r5, r3
 800dbc0:	4614      	mov	r4, r2
 800dbc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800dbc4:	6028      	str	r0, [r5, #0]
 800dbc6:	6069      	str	r1, [r5, #4]
 800dbc8:	60aa      	str	r2, [r5, #8]
 800dbca:	60eb      	str	r3, [r5, #12]
 800dbcc:	6820      	ldr	r0, [r4, #0]
 800dbce:	6128      	str	r0, [r5, #16]
		lu8_ret = TIME_SIZE;
 800dbd0:	2314      	movs	r3, #20
 800dbd2:	73fb      	strb	r3, [r7, #15]
	}

	return lu8_ret;
 800dbd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3714      	adds	r7, #20
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bcb0      	pop	{r4, r5, r7}
 800dbde:	4770      	bx	lr
 800dbe0:	1fff4790 	.word	0x1fff4790

0800dbe4 <mod_mqttSslMode>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslMode(uint8_t *lu8p_param)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b084      	sub	sp, #16
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dbec:	2304      	movs	r3, #4
 800dbee:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CFG, lu8p_param);
 800dbf0:	2011      	movs	r0, #17
 800dbf2:	6879      	ldr	r1, [r7, #4]
 800dbf4:	f7fe fad4 	bl	800c1a0 <mod_sendCmdGetRsp>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d105      	bne.n	800dc0e <mod_mqttSslMode+0x2a>
	{
		lsu8_retryCnt = 0;
 800dc02:	4b11      	ldr	r3, [pc, #68]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	73fb      	strb	r3, [r7, #15]
 800dc0c:	e016      	b.n	800dc3c <mod_mqttSslMode+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	2b04      	cmp	r3, #4
 800dc12:	d013      	beq.n	800dc3c <mod_mqttSslMode+0x58>
	{
		lsu8_retryCnt++;
 800dc14:	4b0c      	ldr	r3, [pc, #48]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	b2da      	uxtb	r2, r3
 800dc1c:	4b0a      	ldr	r3, [pc, #40]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc1e:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800dc20:	4b09      	ldr	r3, [pc, #36]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	2b02      	cmp	r3, #2
 800dc26:	d802      	bhi.n	800dc2e <mod_mqttSslMode+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800dc28:	2304      	movs	r3, #4
 800dc2a:	73fb      	strb	r3, [r7, #15]
 800dc2c:	e006      	b.n	800dc3c <mod_mqttSslMode+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800dc2e:	4b06      	ldr	r3, [pc, #24]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc30:	781b      	ldrb	r3, [r3, #0]
 800dc32:	2b03      	cmp	r3, #3
 800dc34:	d902      	bls.n	800dc3c <mod_mqttSslMode+0x58>
		{
			lsu8_retryCnt = 0;
 800dc36:	4b04      	ldr	r3, [pc, #16]	; (800dc48 <mod_mqttSslMode+0x64>)
 800dc38:	2200      	movs	r2, #0
 800dc3a:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800dc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3e:	4618      	mov	r0, r3
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
 800dc46:	bf00      	nop
 800dc48:	1fff47c5 	.word	0x1fff47c5

0800dc4c <mod_mqttSslConfgi>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslConfgi(uint8_t *lu8p_param)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dc54:	2304      	movs	r3, #4
 800dc56:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SSL_CFG, lu8p_param);
 800dc58:	2012      	movs	r0, #18
 800dc5a:	6879      	ldr	r1, [r7, #4]
 800dc5c:	f7fe faa0 	bl	800c1a0 <mod_sendCmdGetRsp>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800dc64:	7bfb      	ldrb	r3, [r7, #15]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d105      	bne.n	800dc76 <mod_mqttSslConfgi+0x2a>
	{
		lsu8_retryCnt = 0;
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800dc70:	2300      	movs	r3, #0
 800dc72:	73fb      	strb	r3, [r7, #15]
 800dc74:	e016      	b.n	800dca4 <mod_mqttSslConfgi+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800dc76:	7bfb      	ldrb	r3, [r7, #15]
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	d013      	beq.n	800dca4 <mod_mqttSslConfgi+0x58>
	{
		lsu8_retryCnt++;
 800dc7c:	4b0c      	ldr	r3, [pc, #48]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dc7e:	781b      	ldrb	r3, [r3, #0]
 800dc80:	3301      	adds	r3, #1
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	4b0a      	ldr	r3, [pc, #40]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dc86:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800dc88:	4b09      	ldr	r3, [pc, #36]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dc8a:	781b      	ldrb	r3, [r3, #0]
 800dc8c:	2b02      	cmp	r3, #2
 800dc8e:	d802      	bhi.n	800dc96 <mod_mqttSslConfgi+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800dc90:	2304      	movs	r3, #4
 800dc92:	73fb      	strb	r3, [r7, #15]
 800dc94:	e006      	b.n	800dca4 <mod_mqttSslConfgi+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800dc96:	4b06      	ldr	r3, [pc, #24]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	2b03      	cmp	r3, #3
 800dc9c:	d902      	bls.n	800dca4 <mod_mqttSslConfgi+0x58>
		{
			lsu8_retryCnt = 0;
 800dc9e:	4b04      	ldr	r3, [pc, #16]	; (800dcb0 <mod_mqttSslConfgi+0x64>)
 800dca0:	2200      	movs	r2, #0
 800dca2:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop
 800dcb0:	1fff47c6 	.word	0x1fff47c6

0800dcb4 <mod_mqttSslCertUpload>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertUpload(en_sslFile_t len_sslFile)
{
 800dcb4:	b590      	push	{r4, r7, lr}
 800dcb6:	b093      	sub	sp, #76	; 0x4c
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dcbe:	2304      	movs	r3, #4
 800dcc0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[50] = { 0 };
 800dcc4:	f107 0308 	add.w	r3, r7, #8
 800dcc8:	2200      	movs	r2, #0
 800dcca:	601a      	str	r2, [r3, #0]
 800dccc:	3304      	adds	r3, #4
 800dcce:	2200      	movs	r2, #0
 800dcd0:	601a      	str	r2, [r3, #0]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	601a      	str	r2, [r3, #0]
 800dcd8:	3304      	adds	r3, #4
 800dcda:	2200      	movs	r2, #0
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	3304      	adds	r3, #4
 800dce0:	2200      	movs	r2, #0
 800dce2:	601a      	str	r2, [r3, #0]
 800dce4:	3304      	adds	r3, #4
 800dce6:	2200      	movs	r2, #0
 800dce8:	601a      	str	r2, [r3, #0]
 800dcea:	3304      	adds	r3, #4
 800dcec:	2200      	movs	r2, #0
 800dcee:	601a      	str	r2, [r3, #0]
 800dcf0:	3304      	adds	r3, #4
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	601a      	str	r2, [r3, #0]
 800dcf6:	3304      	adds	r3, #4
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	601a      	str	r2, [r3, #0]
 800dcfc:	3304      	adds	r3, #4
 800dcfe:	2200      	movs	r2, #0
 800dd00:	601a      	str	r2, [r3, #0]
 800dd02:	3304      	adds	r3, #4
 800dd04:	2200      	movs	r2, #0
 800dd06:	601a      	str	r2, [r3, #0]
 800dd08:	3304      	adds	r3, #4
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	601a      	str	r2, [r3, #0]
 800dd0e:	3304      	adds	r3, #4
 800dd10:	2200      	movs	r2, #0
 800dd12:	801a      	strh	r2, [r3, #0]
 800dd14:	3302      	adds	r3, #2
	static uint8_t *slu32_pos = NULL;
	static uint16_t lu16_totalFileSize = 0;
	uint8_t *lu8p_Ptr = NULL;
 800dd16:	2300      	movs	r3, #0
 800dd18:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *lu8p_saveptr = NULL;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (sen_sslFileUpldState)
 800dd1e:	4b77      	ldr	r3, [pc, #476]	; (800defc <mod_mqttSslCertUpload+0x248>)
 800dd20:	781b      	ldrb	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d003      	beq.n	800dd2e <mod_mqttSslCertUpload+0x7a>
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	f000 808d 	beq.w	800de46 <mod_mqttSslCertUpload+0x192>
				}
			}
		break;

		default:
		break;
 800dd2c:	e0e0      	b.n	800def0 <mod_mqttSslCertUpload+0x23c>

	switch (sen_sslFileUpldState)
	{
		case E_SSL_UPLD_CMD_STATE:

			if(E_CA_CERT_FILE == len_sslFile)
 800dd2e:	79fb      	ldrb	r3, [r7, #7]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d112      	bne.n	800dd5a <mod_mqttSslCertUpload+0xa6>
			{
				slu32_pos = sgu8arr_caCert;
 800dd34:	4b72      	ldr	r3, [pc, #456]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800dd36:	4a73      	ldr	r2, [pc, #460]	; (800df04 <mod_mqttSslCertUpload+0x250>)
 800dd38:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_caCert);
 800dd3a:	4b73      	ldr	r3, [pc, #460]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd3c:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800dd40:	801a      	strh	r2, [r3, #0]
				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
 800dd42:	4b71      	ldr	r3, [pc, #452]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd44:	881b      	ldrh	r3, [r3, #0]
 800dd46:	461c      	mov	r4, r3
 800dd48:	f107 0308 	add.w	r3, r7, #8
 800dd4c:	4618      	mov	r0, r3
 800dd4e:	496f      	ldr	r1, [pc, #444]	; (800df0c <mod_mqttSslCertUpload+0x258>)
 800dd50:	4a6f      	ldr	r2, [pc, #444]	; (800df10 <mod_mqttSslCertUpload+0x25c>)
 800dd52:	4623      	mov	r3, r4
 800dd54:	f004 fa38 	bl	80121c8 <siprintf>
 800dd58:	e02a      	b.n	800ddb0 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CC_CERT_FILE == len_sslFile)
 800dd5a:	79fb      	ldrb	r3, [r7, #7]
 800dd5c:	2b01      	cmp	r3, #1
 800dd5e:	d112      	bne.n	800dd86 <mod_mqttSslCertUpload+0xd2>
			{
				slu32_pos = sgu8arr_ccCert;
 800dd60:	4b67      	ldr	r3, [pc, #412]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800dd62:	4a6c      	ldr	r2, [pc, #432]	; (800df14 <mod_mqttSslCertUpload+0x260>)
 800dd64:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
 800dd66:	4b68      	ldr	r3, [pc, #416]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd68:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800dd6c:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CC_FILENAME,
 800dd6e:	4b66      	ldr	r3, [pc, #408]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	461c      	mov	r4, r3
 800dd74:	f107 0308 	add.w	r3, r7, #8
 800dd78:	4618      	mov	r0, r3
 800dd7a:	4964      	ldr	r1, [pc, #400]	; (800df0c <mod_mqttSslCertUpload+0x258>)
 800dd7c:	4a66      	ldr	r2, [pc, #408]	; (800df18 <mod_mqttSslCertUpload+0x264>)
 800dd7e:	4623      	mov	r3, r4
 800dd80:	f004 fa22 	bl	80121c8 <siprintf>
 800dd84:	e014      	b.n	800ddb0 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CK_CERT_FILE == len_sslFile)
 800dd86:	79fb      	ldrb	r3, [r7, #7]
 800dd88:	2b02      	cmp	r3, #2
 800dd8a:	d111      	bne.n	800ddb0 <mod_mqttSslCertUpload+0xfc>
			{
				slu32_pos = sgu8arr_ckCert;
 800dd8c:	4b5c      	ldr	r3, [pc, #368]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800dd8e:	4a63      	ldr	r2, [pc, #396]	; (800df1c <mod_mqttSslCertUpload+0x268>)
 800dd90:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
 800dd92:	4b5d      	ldr	r3, [pc, #372]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd94:	f240 628b 	movw	r2, #1675	; 0x68b
 800dd98:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CK_FILENAME,
 800dd9a:	4b5b      	ldr	r3, [pc, #364]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dd9c:	881b      	ldrh	r3, [r3, #0]
 800dd9e:	461c      	mov	r4, r3
 800dda0:	f107 0308 	add.w	r3, r7, #8
 800dda4:	4618      	mov	r0, r3
 800dda6:	4959      	ldr	r1, [pc, #356]	; (800df0c <mod_mqttSslCertUpload+0x258>)
 800dda8:	4a5d      	ldr	r2, [pc, #372]	; (800df20 <mod_mqttSslCertUpload+0x26c>)
 800ddaa:	4623      	mov	r3, r4
 800ddac:	f004 fa0c 	bl	80121c8 <siprintf>
						lu16_totalFileSize);
			}

			len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_UPLOAD_CMD,
 800ddb0:	f107 0308 	add.w	r3, r7, #8
 800ddb4:	201a      	movs	r0, #26
 800ddb6:	4619      	mov	r1, r3
 800ddb8:	f7fe f9f2 	bl	800c1a0 <mod_sendCmdGetRsp>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					(uint8_t *) lu8arr_param);

			if (E_RET_SUCCESS == len_retStatus)
 800ddc2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d12e      	bne.n	800de28 <mod_mqttSslCertUpload+0x174>
			{
				lu8p_Ptr =
 800ddca:	4856      	ldr	r0, [pc, #344]	; (800df24 <mod_mqttSslCertUpload+0x270>)
 800ddcc:	4956      	ldr	r1, [pc, #344]	; (800df28 <mod_mqttSslCertUpload+0x274>)
 800ddce:	f004 fa5e 	bl	801228e <strstr>
 800ddd2:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_FILE_UPLOAD_CMD].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800ddd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d022      	beq.n	800de20 <mod_mqttSslCertUpload+0x16c>
				{
					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800ddda:	4854      	ldr	r0, [pc, #336]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800dddc:	2100      	movs	r1, #0
 800ddde:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800dde2:	f003 ff32 	bl	8011c4a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if (lu16_totalFileSize > 1024)
 800dde6:	4b48      	ldr	r3, [pc, #288]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800dde8:	881b      	ldrh	r3, [r3, #0]
 800ddea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ddee:	d908      	bls.n	800de02 <mod_mqttSslCertUpload+0x14e>
					{
						strncpy(
 800ddf0:	4b43      	ldr	r3, [pc, #268]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	484d      	ldr	r0, [pc, #308]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ddfc:	f004 fa35 	bl	801226a <strncpy>
 800de00:	e007      	b.n	800de12 <mod_mqttSslCertUpload+0x15e>
								(char *) slu32_pos, 1024);
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[1024] = '\0';
					}
					else
					{
						strncpy(
 800de02:	4b3f      	ldr	r3, [pc, #252]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	4849      	ldr	r0, [pc, #292]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800de08:	4619      	mov	r1, r3
 800de0a:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800de0e:	f004 fa2c 	bl	801226a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, sizeof(sgu8arr_caCert));
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[sizeof(sgu8arr_caCert)+1] = '\0';
					}

					sen_sslFileUpldState = E_SSL_UPLD_FILE_CONTENT_STATE;
 800de12:	4b3a      	ldr	r3, [pc, #232]	; (800defc <mod_mqttSslCertUpload+0x248>)
 800de14:	2201      	movs	r2, #1
 800de16:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800de18:	2304      	movs	r3, #4
 800de1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800de1e:	e011      	b.n	800de44 <mod_mqttSslCertUpload+0x190>
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800de20:	2302      	movs	r3, #2
 800de22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800de26:	e063      	b.n	800def0 <mod_mqttSslCertUpload+0x23c>
				else
				{
					len_retStatus = E_RET_FAILED;
				}
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800de28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de2c:	2b0b      	cmp	r3, #11
 800de2e:	d109      	bne.n	800de44 <mod_mqttSslCertUpload+0x190>
			{
				if(407 == sgu16_cmeError)	//File already exists
 800de30:	4b3f      	ldr	r3, [pc, #252]	; (800df30 <mod_mqttSslCertUpload+0x27c>)
 800de32:	881b      	ldrh	r3, [r3, #0]
 800de34:	f240 1297 	movw	r2, #407	; 0x197
 800de38:	4293      	cmp	r3, r2
 800de3a:	d103      	bne.n	800de44 <mod_mqttSslCertUpload+0x190>
				{
					len_retStatus = E_RET_SUCCESS;
 800de3c:	2300      	movs	r3, #0
 800de3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800de42:	e055      	b.n	800def0 <mod_mqttSslCertUpload+0x23c>
 800de44:	e054      	b.n	800def0 <mod_mqttSslCertUpload+0x23c>

		case E_SSL_UPLD_FILE_CONTENT_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_UPLOAD_FILE_CONTENT, NULL);
 800de46:	201b      	movs	r0, #27
 800de48:	2100      	movs	r1, #0
 800de4a:	f7fe f9a9 	bl	800c1a0 <mod_sendCmdGetRsp>
 800de4e:	4603      	mov	r3, r0
 800de50:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (E_RET_SUCCESS == len_retStatus)
 800de54:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d148      	bne.n	800deee <mod_mqttSslCertUpload+0x23a>
			{
				lu8p_Ptr =
 800de5c:	4831      	ldr	r0, [pc, #196]	; (800df24 <mod_mqttSslCertUpload+0x270>)
 800de5e:	4935      	ldr	r1, [pc, #212]	; (800df34 <mod_mqttSslCertUpload+0x280>)
 800de60:	f004 fa15 	bl	801228e <strstr>
 800de64:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_otherRspString);

				if (NULL != lu8p_Ptr)
 800de66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d031      	beq.n	800ded0 <mod_mqttSslCertUpload+0x21c>
				{
					lu16_totalFileSize -= 1024;
 800de6c:	4b26      	ldr	r3, [pc, #152]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800de6e:	881b      	ldrh	r3, [r3, #0]
 800de70:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800de74:	b29a      	uxth	r2, r3
 800de76:	4b24      	ldr	r3, [pc, #144]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800de78:	801a      	strh	r2, [r3, #0]
					slu32_pos += 1024;
 800de7a:	4b21      	ldr	r3, [pc, #132]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800de7c:	681b      	ldr	r3, [r3, #0]
 800de7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800de82:	4a1f      	ldr	r2, [pc, #124]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800de84:	6013      	str	r3, [r2, #0]

					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800de86:	4829      	ldr	r0, [pc, #164]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800de88:	2100      	movs	r1, #0
 800de8a:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800de8e:	f003 fedc 	bl	8011c4a <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if(lu16_totalFileSize > 1024)
 800de92:	4b1d      	ldr	r3, [pc, #116]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800de94:	881b      	ldrh	r3, [r3, #0]
 800de96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800de9a:	d908      	bls.n	800deae <mod_mqttSslCertUpload+0x1fa>
					{
						strncpy(
 800de9c:	4b18      	ldr	r3, [pc, #96]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	4822      	ldr	r0, [pc, #136]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800dea2:	4619      	mov	r1, r3
 800dea4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800dea8:	f004 f9df 	bl	801226a <strncpy>
 800deac:	e008      	b.n	800dec0 <mod_mqttSslCertUpload+0x20c>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, 1024);
					}
					else
					{
						strncpy(
 800deae:	4b14      	ldr	r3, [pc, #80]	; (800df00 <mod_mqttSslCertUpload+0x24c>)
 800deb0:	681a      	ldr	r2, [r3, #0]
 800deb2:	4b15      	ldr	r3, [pc, #84]	; (800df08 <mod_mqttSslCertUpload+0x254>)
 800deb4:	881b      	ldrh	r3, [r3, #0]
 800deb6:	481d      	ldr	r0, [pc, #116]	; (800df2c <mod_mqttSslCertUpload+0x278>)
 800deb8:	4611      	mov	r1, r2
 800deba:	461a      	mov	r2, r3
 800debc:	f004 f9d5 	bl	801226a <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, lu16_totalFileSize);
					}
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800dec0:	4818      	ldr	r0, [pc, #96]	; (800df24 <mod_mqttSslCertUpload+0x270>)
 800dec2:	2100      	movs	r1, #0
 800dec4:	2240      	movs	r2, #64	; 0x40
 800dec6:	f003 fec0 	bl	8011c4a <memset>
					len_retStatus = E_RET_INPROGRESS;
 800deca:	2304      	movs	r3, #4
 800decc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}

				lu8p_Ptr =
 800ded0:	4814      	ldr	r0, [pc, #80]	; (800df24 <mod_mqttSslCertUpload+0x270>)
 800ded2:	4919      	ldr	r1, [pc, #100]	; (800df38 <mod_mqttSslCertUpload+0x284>)
 800ded4:	f004 f9db 	bl	801228e <strstr>
 800ded8:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800deda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d006      	beq.n	800deee <mod_mqttSslCertUpload+0x23a>
				{
					sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
 800dee0:	4b06      	ldr	r3, [pc, #24]	; (800defc <mod_mqttSslCertUpload+0x248>)
 800dee2:	2200      	movs	r2, #0
 800dee4:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_SUCCESS;
 800dee6:	2300      	movs	r3, #0
 800dee8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		break;
 800deec:	e7ff      	b.n	800deee <mod_mqttSslCertUpload+0x23a>
 800deee:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800def0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800def4:	4618      	mov	r0, r3
 800def6:	374c      	adds	r7, #76	; 0x4c
 800def8:	46bd      	mov	sp, r7
 800defa:	bd90      	pop	{r4, r7, pc}
 800defc:	1fff47ae 	.word	0x1fff47ae
 800df00:	1fff47c8 	.word	0x1fff47c8
 800df04:	1ffe9514 	.word	0x1ffe9514
 800df08:	1fff47cc 	.word	0x1fff47cc
 800df0c:	08014420 	.word	0x08014420
 800df10:	08014430 	.word	0x08014430
 800df14:	1ffe99b8 	.word	0x1ffe99b8
 800df18:	08014440 	.word	0x08014440
 800df1c:	1ffe9e7c 	.word	0x1ffe9e7c
 800df20:	08014454 	.word	0x08014454
 800df24:	1fff4704 	.word	0x1fff4704
 800df28:	1fff21c8 	.word	0x1fff21c8
 800df2c:	1fff2264 	.word	0x1fff2264
 800df30:	1fff47a6 	.word	0x1fff47a6
 800df34:	1fff269e 	.word	0x1fff269e
 800df38:	1fff266c 	.word	0x1fff266c

0800df3c <mod_mqttSslCertDelete>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertDelete(en_sslFile_t len_sslFile)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b090      	sub	sp, #64	; 0x40
 800df40:	af00      	add	r7, sp, #0
 800df42:	4603      	mov	r3, r0
 800df44:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800df46:	2304      	movs	r3, #4
 800df48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t lu8arr_param[50] = { 0 };
 800df4c:	f107 030c 	add.w	r3, r7, #12
 800df50:	2200      	movs	r2, #0
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	3304      	adds	r3, #4
 800df56:	2200      	movs	r2, #0
 800df58:	601a      	str	r2, [r3, #0]
 800df5a:	3304      	adds	r3, #4
 800df5c:	2200      	movs	r2, #0
 800df5e:	601a      	str	r2, [r3, #0]
 800df60:	3304      	adds	r3, #4
 800df62:	2200      	movs	r2, #0
 800df64:	601a      	str	r2, [r3, #0]
 800df66:	3304      	adds	r3, #4
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]
 800df6c:	3304      	adds	r3, #4
 800df6e:	2200      	movs	r2, #0
 800df70:	601a      	str	r2, [r3, #0]
 800df72:	3304      	adds	r3, #4
 800df74:	2200      	movs	r2, #0
 800df76:	601a      	str	r2, [r3, #0]
 800df78:	3304      	adds	r3, #4
 800df7a:	2200      	movs	r2, #0
 800df7c:	601a      	str	r2, [r3, #0]
 800df7e:	3304      	adds	r3, #4
 800df80:	2200      	movs	r2, #0
 800df82:	601a      	str	r2, [r3, #0]
 800df84:	3304      	adds	r3, #4
 800df86:	2200      	movs	r2, #0
 800df88:	601a      	str	r2, [r3, #0]
 800df8a:	3304      	adds	r3, #4
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]
 800df90:	3304      	adds	r3, #4
 800df92:	2200      	movs	r2, #0
 800df94:	601a      	str	r2, [r3, #0]
 800df96:	3304      	adds	r3, #4
 800df98:	2200      	movs	r2, #0
 800df9a:	801a      	strh	r2, [r3, #0]
 800df9c:	3302      	adds	r3, #2

	if (E_CA_CERT_FILE == len_sslFile)
 800df9e:	79fb      	ldrb	r3, [r7, #7]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d107      	bne.n	800dfb4 <mod_mqttSslCertDelete+0x78>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CA_FILENAME);
 800dfa4:	f107 030c 	add.w	r3, r7, #12
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	491c      	ldr	r1, [pc, #112]	; (800e01c <mod_mqttSslCertDelete+0xe0>)
 800dfac:	4a1c      	ldr	r2, [pc, #112]	; (800e020 <mod_mqttSslCertDelete+0xe4>)
 800dfae:	f004 f90b 	bl	80121c8 <siprintf>
 800dfb2:	e014      	b.n	800dfde <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CC_CERT_FILE == len_sslFile)
 800dfb4:	79fb      	ldrb	r3, [r7, #7]
 800dfb6:	2b01      	cmp	r3, #1
 800dfb8:	d107      	bne.n	800dfca <mod_mqttSslCertDelete+0x8e>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CC_FILENAME);
 800dfba:	f107 030c 	add.w	r3, r7, #12
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	4916      	ldr	r1, [pc, #88]	; (800e01c <mod_mqttSslCertDelete+0xe0>)
 800dfc2:	4a18      	ldr	r2, [pc, #96]	; (800e024 <mod_mqttSslCertDelete+0xe8>)
 800dfc4:	f004 f900 	bl	80121c8 <siprintf>
 800dfc8:	e009      	b.n	800dfde <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CK_CERT_FILE == len_sslFile)
 800dfca:	79fb      	ldrb	r3, [r7, #7]
 800dfcc:	2b02      	cmp	r3, #2
 800dfce:	d106      	bne.n	800dfde <mod_mqttSslCertDelete+0xa2>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CK_FILENAME);
 800dfd0:	f107 030c 	add.w	r3, r7, #12
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	4911      	ldr	r1, [pc, #68]	; (800e01c <mod_mqttSslCertDelete+0xe0>)
 800dfd8:	4a13      	ldr	r2, [pc, #76]	; (800e028 <mod_mqttSslCertDelete+0xec>)
 800dfda:	f004 f8f5 	bl	80121c8 <siprintf>
	}

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_DELETE, (uint8_t *) lu8arr_param);
 800dfde:	f107 030c 	add.w	r3, r7, #12
 800dfe2:	201c      	movs	r0, #28
 800dfe4:	4619      	mov	r1, r3
 800dfe6:	f7fe f8db 	bl	800c1a0 <mod_sendCmdGetRsp>
 800dfea:	4603      	mov	r3, r0
 800dfec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800dff0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d103      	bne.n	800e000 <mod_mqttSslCertDelete+0xc4>
	{
		len_retStatus = E_RET_SUCCESS;
 800dff8:	2300      	movs	r3, #0
 800dffa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800dffe:	e006      	b.n	800e00e <mod_mqttSslCertDelete+0xd2>
	}
	else if(E_RET_INPROGRESS != len_retStatus)
 800e000:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800e004:	2b04      	cmp	r3, #4
 800e006:	d002      	beq.n	800e00e <mod_mqttSslCertDelete+0xd2>
	{
		len_retStatus = E_RET_FAILED;
 800e008:	2302      	movs	r3, #2
 800e00a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	return len_retStatus;
 800e00e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800e012:	4618      	mov	r0, r3
 800e014:	3740      	adds	r7, #64	; 0x40
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop
 800e01c:	08014464 	.word	0x08014464
 800e020:	08014430 	.word	0x08014430
 800e024:	08014440 	.word	0x08014440
 800e028:	08014454 	.word	0x08014454

0800e02c <mod_mqttOpen>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpen(void)
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b092      	sub	sp, #72	; 0x48
 800e030:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e032:	2304      	movs	r3, #4
 800e034:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[57] = { 0 };
 800e038:	1d3b      	adds	r3, r7, #4
 800e03a:	2239      	movs	r2, #57	; 0x39
 800e03c:	4618      	mov	r0, r3
 800e03e:	2100      	movs	r1, #0
 800e040:	f003 fe03 	bl	8011c4a <memset>
	uint8_t *lu8p_Ptr = NULL;
 800e044:	2300      	movs	r3, #0
 800e046:	643b      	str	r3, [r7, #64]	; 0x40
	short ls_result = E_MQTT_OPN_NONE;
 800e048:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800e04c:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	for(lu8_clientIdx = 0; lu8_clientIdx < 6; lu8_clientIdx++)
//	{
	sprintf((char *) lu8arr_param, "%d,%s", sgu8_mqttClientId, MQTT_OPEN_HOST_PORT);
 800e04e:	4b55      	ldr	r3, [pc, #340]	; (800e1a4 <mod_mqttOpen+0x178>)
 800e050:	781b      	ldrb	r3, [r3, #0]
 800e052:	461a      	mov	r2, r3
 800e054:	1d3b      	adds	r3, r7, #4
 800e056:	4618      	mov	r0, r3
 800e058:	4953      	ldr	r1, [pc, #332]	; (800e1a8 <mod_mqttOpen+0x17c>)
 800e05a:	4b54      	ldr	r3, [pc, #336]	; (800e1ac <mod_mqttOpen+0x180>)
 800e05c:	f004 f8b4 	bl	80121c8 <siprintf>
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_OPEN, lu8arr_param);
 800e060:	1d3b      	adds	r3, r7, #4
 800e062:	2013      	movs	r0, #19
 800e064:	4619      	mov	r1, r3
 800e066:	f7fe f89b 	bl	800c1a0 <mod_sendCmdGetRsp>
 800e06a:	4603      	mov	r3, r0
 800e06c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (E_RET_SUCCESS == len_retStatus)
 800e070:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e074:	2b00      	cmp	r3, #0
 800e076:	d176      	bne.n	800e166 <mod_mqttOpen+0x13a>
	{
		lsu8_retryCnt = 0;
 800e078:	4b4d      	ldr	r3, [pc, #308]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e07a:	2200      	movs	r2, #0
 800e07c:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800e07e:	484d      	ldr	r0, [pc, #308]	; (800e1b4 <mod_mqttOpen+0x188>)
 800e080:	494d      	ldr	r1, [pc, #308]	; (800e1b8 <mod_mqttOpen+0x18c>)
 800e082:	f004 f904 	bl	801228e <strstr>
 800e086:	6438      	str	r0, [r7, #64]	; 0x40
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_OPEN].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800e088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	f000 8084 	beq.w	800e198 <mod_mqttOpen+0x16c>
		{
			lu8p_Ptr += 12;
 800e090:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e092:	330c      	adds	r3, #12
 800e094:	643b      	str	r3, [r7, #64]	; 0x40
			ls_result = atoi((char *) lu8p_Ptr);
 800e096:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800e098:	f003 fd9c 	bl	8011bd4 <atoi>
 800e09c:	4603      	mov	r3, r0
 800e09e:	87fb      	strh	r3, [r7, #62]	; 0x3e

			if (E_NW_OPENED_SUCCESSFULLY == ls_result)	//Network opened successfully
 800e0a0:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d106      	bne.n	800e0b6 <mod_mqttOpen+0x8a>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_OPENED_SUCCESSFULLY;
 800e0a8:	4b44      	ldr	r3, [pc, #272]	; (800e1bc <mod_mqttOpen+0x190>)
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_SUCCESS;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e0b4:	e070      	b.n	800e198 <mod_mqttOpen+0x16c>
				//break;
			}
			else if(E_WRONG_PARAMETER == ls_result)	//Wrong parameter
 800e0b6:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e0ba:	2b01      	cmp	r3, #1
 800e0bc:	d106      	bne.n	800e0cc <mod_mqttOpen+0xa0>
			{
				/* set VCU DTC and change the return status */
				gst_deviceStatus.men_mqttOpenErrorCodes = E_WRONG_PARAMETER;
 800e0be:	4b3f      	ldr	r3, [pc, #252]	; (800e1bc <mod_mqttOpen+0x190>)
 800e0c0:	2201      	movs	r2, #1
 800e0c2:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800e0c4:	2302      	movs	r3, #2
 800e0c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e0ca:	e065      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
			else if(E_MQTT_ID_OCCUPIED == ls_result)	//MQTT identifier is occupied
 800e0cc:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d117      	bne.n	800e104 <mod_mqttOpen+0xd8>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_MQTT_ID_OCCUPIED;
 800e0d4:	4b39      	ldr	r3, [pc, #228]	; (800e1bc <mod_mqttOpen+0x190>)
 800e0d6:	2202      	movs	r2, #2
 800e0d8:	70da      	strb	r2, [r3, #3]
				sgu8_mqttClientId++;
 800e0da:	4b32      	ldr	r3, [pc, #200]	; (800e1a4 <mod_mqttOpen+0x178>)
 800e0dc:	781b      	ldrb	r3, [r3, #0]
 800e0de:	3301      	adds	r3, #1
 800e0e0:	b2da      	uxtb	r2, r3
 800e0e2:	4b30      	ldr	r3, [pc, #192]	; (800e1a4 <mod_mqttOpen+0x178>)
 800e0e4:	701a      	strb	r2, [r3, #0]
				if (sgu8_mqttClientId > 5)
 800e0e6:	4b2f      	ldr	r3, [pc, #188]	; (800e1a4 <mod_mqttOpen+0x178>)
 800e0e8:	781b      	ldrb	r3, [r3, #0]
 800e0ea:	2b05      	cmp	r3, #5
 800e0ec:	d906      	bls.n	800e0fc <mod_mqttOpen+0xd0>
				{
					len_retStatus = E_RET_FAILED;
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sgu8_mqttClientId = 0;
 800e0f4:	4b2b      	ldr	r3, [pc, #172]	; (800e1a4 <mod_mqttOpen+0x178>)
 800e0f6:	2200      	movs	r2, #0
 800e0f8:	701a      	strb	r2, [r3, #0]
 800e0fa:	e04d      	b.n	800e198 <mod_mqttOpen+0x16c>
				}
				else
				{
					len_retStatus = E_RET_FAILED_TRY_DIFF_ID;
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e102:	e049      	b.n	800e198 <mod_mqttOpen+0x16c>
				}
			}
			else if(E_FAILED_TO_OPEN_NW == ls_result)	//-1 -> Failed to open network
 800e104:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e10c:	d106      	bne.n	800e11c <mod_mqttOpen+0xf0>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_OPEN_NW;
 800e10e:	4b2b      	ldr	r3, [pc, #172]	; (800e1bc <mod_mqttOpen+0x190>)
 800e110:	22ff      	movs	r2, #255	; 0xff
 800e112:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800e114:	2302      	movs	r3, #2
 800e116:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e11a:	e03d      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_ACTIVATE_PDP == ls_result)	//3  -> Failed to activate PDP
 800e11c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e120:	2b03      	cmp	r3, #3
 800e122:	d106      	bne.n	800e132 <mod_mqttOpen+0x106>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_ACTIVATE_PDP;
 800e124:	4b25      	ldr	r3, [pc, #148]	; (800e1bc <mod_mqttOpen+0x190>)
 800e126:	2203      	movs	r2, #3
 800e128:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800e12a:	2302      	movs	r3, #2
 800e12c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e130:	e032      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_PARSE_DOMAIN_NAME == ls_result)	//Failed to parse domain name
 800e132:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e136:	2b04      	cmp	r3, #4
 800e138:	d106      	bne.n	800e148 <mod_mqttOpen+0x11c>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_PARSE_DOMAIN_NAME;
 800e13a:	4b20      	ldr	r3, [pc, #128]	; (800e1bc <mod_mqttOpen+0x190>)
 800e13c:	2204      	movs	r2, #4
 800e13e:	70da      	strb	r2, [r3, #3]
				/* set VCU DTC and change the return status */
				len_retStatus = E_RET_FAILED;
 800e140:	2302      	movs	r3, #2
 800e142:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e146:	e027      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
			else if(E_NW_CONNECTION_ERROR == ls_result)	//5  -> Network connection error
 800e148:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800e14c:	2b05      	cmp	r3, #5
 800e14e:	d106      	bne.n	800e15e <mod_mqttOpen+0x132>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_CONNECTION_ERROR;
 800e150:	4b1a      	ldr	r3, [pc, #104]	; (800e1bc <mod_mqttOpen+0x190>)
 800e152:	2205      	movs	r2, #5
 800e154:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_CONN_ERROR;
 800e156:	230d      	movs	r3, #13
 800e158:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e15c:	e01c      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
			else	//other return values
			{
				len_retStatus = E_RET_INPROGRESS;
 800e15e:	2304      	movs	r3, #4
 800e160:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e164:	e018      	b.n	800e198 <mod_mqttOpen+0x16c>
			}
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e166:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800e16a:	2b04      	cmp	r3, #4
 800e16c:	d014      	beq.n	800e198 <mod_mqttOpen+0x16c>
	{
		lsu8_retryCnt++;
 800e16e:	4b10      	ldr	r3, [pc, #64]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e170:	781b      	ldrb	r3, [r3, #0]
 800e172:	3301      	adds	r3, #1
 800e174:	b2da      	uxtb	r2, r3
 800e176:	4b0e      	ldr	r3, [pc, #56]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e178:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e17a:	4b0d      	ldr	r3, [pc, #52]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	2b02      	cmp	r3, #2
 800e180:	d803      	bhi.n	800e18a <mod_mqttOpen+0x15e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e182:	2304      	movs	r3, #4
 800e184:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800e188:	e006      	b.n	800e198 <mod_mqttOpen+0x16c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e18a:	4b09      	ldr	r3, [pc, #36]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e18c:	781b      	ldrb	r3, [r3, #0]
 800e18e:	2b03      	cmp	r3, #3
 800e190:	d902      	bls.n	800e198 <mod_mqttOpen+0x16c>
		{
			lsu8_retryCnt = 0;
 800e192:	4b07      	ldr	r3, [pc, #28]	; (800e1b0 <mod_mqttOpen+0x184>)
 800e194:	2200      	movs	r2, #0
 800e196:	701a      	strb	r2, [r3, #0]
		}
	}
//	}
	return len_retStatus;
 800e198:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800e19c:	4618      	mov	r0, r3
 800e19e:	3748      	adds	r7, #72	; 0x48
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}
 800e1a4:	1fff47a5 	.word	0x1fff47a5
 800e1a8:	0801446c 	.word	0x0801446c
 800e1ac:	08014474 	.word	0x08014474
 800e1b0:	1fff47ce 	.word	0x1fff47ce
 800e1b4:	1fff4704 	.word	0x1fff4704
 800e1b8:	1fff017e 	.word	0x1fff017e
 800e1bc:	1ffea50c 	.word	0x1ffea50c

0800e1c0 <mod_mqttOpenConfig>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpenConfig()
{
 800e1c0:	b5b0      	push	{r4, r5, r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e1c6:	2304      	movs	r3, #4
 800e1c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lu8arr_param[34] = { 0 };
 800e1cc:	1d3b      	adds	r3, r7, #4
 800e1ce:	2200      	movs	r2, #0
 800e1d0:	601a      	str	r2, [r3, #0]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	601a      	str	r2, [r3, #0]
 800e1d8:	3304      	adds	r3, #4
 800e1da:	2200      	movs	r2, #0
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	3304      	adds	r3, #4
 800e1e0:	2200      	movs	r2, #0
 800e1e2:	601a      	str	r2, [r3, #0]
 800e1e4:	3304      	adds	r3, #4
 800e1e6:	2200      	movs	r2, #0
 800e1e8:	601a      	str	r2, [r3, #0]
 800e1ea:	3304      	adds	r3, #4
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	601a      	str	r2, [r3, #0]
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	601a      	str	r2, [r3, #0]
 800e1f6:	3304      	adds	r3, #4
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	601a      	str	r2, [r3, #0]
 800e1fc:	3304      	adds	r3, #4
 800e1fe:	2200      	movs	r2, #0
 800e200:	801a      	strh	r2, [r3, #0]
 800e202:	3302      	adds	r3, #2
	switch (sen_openMqttState)
 800e204:	4bc8      	ldr	r3, [pc, #800]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e206:	781b      	ldrb	r3, [r3, #0]
 800e208:	2b0e      	cmp	r3, #14
 800e20a:	f200 81b5 	bhi.w	800e578 <mod_mqttOpenConfig+0x3b8>
 800e20e:	a201      	add	r2, pc, #4	; (adr r2, 800e214 <mod_mqttOpenConfig+0x54>)
 800e210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e214:	0800e251 	.word	0x0800e251
 800e218:	0800e275 	.word	0x0800e275
 800e21c:	0800e299 	.word	0x0800e299
 800e220:	0800e2bd 	.word	0x0800e2bd
 800e224:	0800e2e1 	.word	0x0800e2e1
 800e228:	0800e305 	.word	0x0800e305
 800e22c:	0800e329 	.word	0x0800e329
 800e230:	0800e363 	.word	0x0800e363
 800e234:	0800e39b 	.word	0x0800e39b
 800e238:	0800e3d5 	.word	0x0800e3d5
 800e23c:	0800e40b 	.word	0x0800e40b
 800e240:	0800e449 	.word	0x0800e449
 800e244:	0800e483 	.word	0x0800e483
 800e248:	0800e4c3 	.word	0x0800e4c3
 800e24c:	0800e4f9 	.word	0x0800e4f9
	{
		case E_MQTT_SSL_UPLD_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CA_CERT_FILE);
 800e250:	2000      	movs	r0, #0
 800e252:	f7ff fd2f 	bl	800dcb4 <mod_mqttSslCertUpload>
 800e256:	4603      	mov	r3, r0
 800e258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e25c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e260:	2b00      	cmp	r3, #0
 800e262:	d106      	bne.n	800e272 <mod_mqttOpenConfig+0xb2>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e264:	2304      	movs	r3, #4
 800e266:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CC_CERT_STATE;
 800e26a:	4baf      	ldr	r3, [pc, #700]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e26c:	2201      	movs	r2, #1
 800e26e:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e270:	e183      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e272:	e182      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CC_CERT_FILE);
 800e274:	2001      	movs	r0, #1
 800e276:	f7ff fd1d 	bl	800dcb4 <mod_mqttSslCertUpload>
 800e27a:	4603      	mov	r3, r0
 800e27c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e284:	2b00      	cmp	r3, #0
 800e286:	d106      	bne.n	800e296 <mod_mqttOpenConfig+0xd6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e288:	2304      	movs	r3, #4
 800e28a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CK_CERT_STATE;
 800e28e:	4ba6      	ldr	r3, [pc, #664]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e290:	2202      	movs	r2, #2
 800e292:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e294:	e171      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e296:	e170      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CK_CERT_FILE);
 800e298:	2002      	movs	r0, #2
 800e29a:	f7ff fd0b 	bl	800dcb4 <mod_mqttSslCertUpload>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e2a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d106      	bne.n	800e2ba <mod_mqttOpenConfig+0xfa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e2ac:	2304      	movs	r3, #4
 800e2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e2b2:	4b9d      	ldr	r3, [pc, #628]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e2b4:	2206      	movs	r2, #6
 800e2b6:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e2b8:	e15f      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e2ba:	e15e      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CA_CERT_FILE);
 800e2bc:	2000      	movs	r0, #0
 800e2be:	f7ff fe3d 	bl	800df3c <mod_mqttSslCertDelete>
 800e2c2:	4603      	mov	r3, r0
 800e2c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e2c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d106      	bne.n	800e2de <mod_mqttOpenConfig+0x11e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e2d0:	2304      	movs	r3, #4
 800e2d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CC_CERT_STATE;
 800e2d6:	4b94      	ldr	r3, [pc, #592]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e2d8:	2204      	movs	r2, #4
 800e2da:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e2dc:	e14d      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e2de:	e14c      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CC_CERT_FILE);
 800e2e0:	2001      	movs	r0, #1
 800e2e2:	f7ff fe2b 	bl	800df3c <mod_mqttSslCertDelete>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e2ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <mod_mqttOpenConfig+0x142>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e2f4:	2304      	movs	r3, #4
 800e2f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CK_CERT_STATE;
 800e2fa:	4b8b      	ldr	r3, [pc, #556]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e2fc:	2205      	movs	r2, #5
 800e2fe:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e300:	e13b      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e302:	e13a      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CK_CERT_FILE);
 800e304:	2002      	movs	r0, #2
 800e306:	f7ff fe19 	bl	800df3c <mod_mqttSslCertDelete>
 800e30a:	4603      	mov	r3, r0
 800e30c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e314:	2b00      	cmp	r3, #0
 800e316:	d106      	bne.n	800e326 <mod_mqttOpenConfig+0x166>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e318:	2304      	movs	r3, #4
 800e31a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 800e31e:	4b82      	ldr	r3, [pc, #520]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e320:	2200      	movs	r2, #0
 800e322:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e324:	e129      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e326:	e128      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CA_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CA_CERT_PATH);
 800e328:	1d3b      	adds	r3, r7, #4
 800e32a:	4a80      	ldr	r2, [pc, #512]	; (800e52c <mod_mqttOpenConfig+0x36c>)
 800e32c:	461c      	mov	r4, r3
 800e32e:	4615      	mov	r5, r2
 800e330:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e332:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e334:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e338:	c403      	stmia	r4!, {r0, r1}
 800e33a:	8022      	strh	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e33c:	1d3b      	adds	r3, r7, #4
 800e33e:	4618      	mov	r0, r3
 800e340:	f7ff fc84 	bl	800dc4c <mod_mqttSslConfgi>
 800e344:	4603      	mov	r3, r0
 800e346:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e34a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d106      	bne.n	800e360 <mod_mqttOpenConfig+0x1a0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e352:	2304      	movs	r3, #4
 800e354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CC_CERT_STATE;
 800e358:	4b73      	ldr	r3, [pc, #460]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e35a:	2207      	movs	r2, #7
 800e35c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e35e:	e10c      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e360:	e10b      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CC_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CC_CERT_PATH);
 800e362:	4b73      	ldr	r3, [pc, #460]	; (800e530 <mod_mqttOpenConfig+0x370>)
 800e364:	1d3c      	adds	r4, r7, #4
 800e366:	461d      	mov	r5, r3
 800e368:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e36a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e36c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e36e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e370:	682b      	ldr	r3, [r5, #0]
 800e372:	8023      	strh	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e374:	1d3b      	adds	r3, r7, #4
 800e376:	4618      	mov	r0, r3
 800e378:	f7ff fc68 	bl	800dc4c <mod_mqttSslConfgi>
 800e37c:	4603      	mov	r3, r0
 800e37e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e382:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e386:	2b00      	cmp	r3, #0
 800e388:	d106      	bne.n	800e398 <mod_mqttOpenConfig+0x1d8>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e38a:	2304      	movs	r3, #4
 800e38c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CK_CERT_STATE;
 800e390:	4b65      	ldr	r3, [pc, #404]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e392:	2208      	movs	r2, #8
 800e394:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e396:	e0f0      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e398:	e0ef      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CK_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CK_CERT_PATH);
 800e39a:	1d3b      	adds	r3, r7, #4
 800e39c:	4a65      	ldr	r2, [pc, #404]	; (800e534 <mod_mqttOpenConfig+0x374>)
 800e39e:	461c      	mov	r4, r3
 800e3a0:	4615      	mov	r5, r2
 800e3a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3a6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800e3aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e3ae:	1d3b      	adds	r3, r7, #4
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	f7ff fc4b 	bl	800dc4c <mod_mqttSslConfgi>
 800e3b6:	4603      	mov	r3, r0
 800e3b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <mod_mqttOpenConfig+0x212>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_AUTH_STATE;
 800e3ca:	4b57      	ldr	r3, [pc, #348]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e3cc:	2209      	movs	r2, #9
 800e3ce:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e3d0:	e0d3      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e3d2:	e0d2      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_AUTH);
 800e3d4:	1d3b      	adds	r3, r7, #4
 800e3d6:	4a58      	ldr	r2, [pc, #352]	; (800e538 <mod_mqttOpenConfig+0x378>)
 800e3d8:	461c      	mov	r4, r3
 800e3da:	4615      	mov	r5, r2
 800e3dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e3de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e3e0:	682b      	ldr	r3, [r5, #0]
 800e3e2:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e3e4:	1d3b      	adds	r3, r7, #4
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f7ff fc30 	bl	800dc4c <mod_mqttSslConfgi>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e3f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d106      	bne.n	800e408 <mod_mqttOpenConfig+0x248>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e3fa:	2304      	movs	r3, #4
 800e3fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_VER_STATE;
 800e400:	4b49      	ldr	r3, [pc, #292]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e402:	220a      	movs	r2, #10
 800e404:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e406:	e0b8      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e408:	e0b7      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_VER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_VERSION);
 800e40a:	1d3b      	adds	r3, r7, #4
 800e40c:	4a4b      	ldr	r2, [pc, #300]	; (800e53c <mod_mqttOpenConfig+0x37c>)
 800e40e:	461c      	mov	r4, r3
 800e410:	4615      	mov	r5, r2
 800e412:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e414:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e416:	682b      	ldr	r3, [r5, #0]
 800e418:	461a      	mov	r2, r3
 800e41a:	8022      	strh	r2, [r4, #0]
 800e41c:	3402      	adds	r4, #2
 800e41e:	0c1b      	lsrs	r3, r3, #16
 800e420:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e422:	1d3b      	adds	r3, r7, #4
 800e424:	4618      	mov	r0, r3
 800e426:	f7ff fc11 	bl	800dc4c <mod_mqttSslConfgi>
 800e42a:	4603      	mov	r3, r0
 800e42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e430:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e434:	2b00      	cmp	r3, #0
 800e436:	d106      	bne.n	800e446 <mod_mqttOpenConfig+0x286>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e438:	2304      	movs	r3, #4
 800e43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CIPHER_STATE;
 800e43e:	4b3a      	ldr	r3, [pc, #232]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e440:	220b      	movs	r2, #11
 800e442:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e444:	e099      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e446:	e098      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CIPHER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_CIPHER_SUITE);
 800e448:	1d3b      	adds	r3, r7, #4
 800e44a:	4a3d      	ldr	r2, [pc, #244]	; (800e540 <mod_mqttOpenConfig+0x380>)
 800e44c:	461c      	mov	r4, r3
 800e44e:	4615      	mov	r5, r2
 800e450:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e452:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e454:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e458:	c403      	stmia	r4!, {r0, r1}
 800e45a:	7022      	strb	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e45c:	1d3b      	adds	r3, r7, #4
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fbf4 	bl	800dc4c <mod_mqttSslConfgi>
 800e464:	4603      	mov	r3, r0
 800e466:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e46a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d106      	bne.n	800e480 <mod_mqttOpenConfig+0x2c0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e472:	2304      	movs	r3, #4
 800e474:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_IGR_AUTH_STATE;
 800e478:	4b2b      	ldr	r3, [pc, #172]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e47a:	220c      	movs	r2, #12
 800e47c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e47e:	e07c      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e480:	e07b      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_IGR_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_IGNORE_LOCAL_TIME);
 800e482:	1d3b      	adds	r3, r7, #4
 800e484:	4a2f      	ldr	r2, [pc, #188]	; (800e544 <mod_mqttOpenConfig+0x384>)
 800e486:	461c      	mov	r4, r3
 800e488:	4615      	mov	r5, r2
 800e48a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e48c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e48e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800e492:	e884 0003 	stmia.w	r4, {r0, r1}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800e496:	1d3b      	adds	r3, r7, #4
 800e498:	4618      	mov	r0, r3
 800e49a:	f7ff fbd7 	bl	800dc4c <mod_mqttSslConfgi>
 800e49e:	4603      	mov	r3, r0
 800e4a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e4a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4a8:	2b00      	cmp	r3, #0
 800e4aa:	d109      	bne.n	800e4c0 <mod_mqttOpenConfig+0x300>
			{
				sgu8_mqttClientId = 0;
 800e4ac:	4b26      	ldr	r3, [pc, #152]	; (800e548 <mod_mqttOpenConfig+0x388>)
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_INPROGRESS;
 800e4b2:	2304      	movs	r3, #4
 800e4b4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e4b8:	4b1b      	ldr	r3, [pc, #108]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e4ba:	220d      	movs	r2, #13
 800e4bc:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e4be:	e05c      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e4c0:	e05b      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_SSL_CFG_STATE:
			sprintf((char *) lu8arr_param, (const char *) "\"SSL\",%d,1,2\r\n",
 800e4c2:	4b21      	ldr	r3, [pc, #132]	; (800e548 <mod_mqttOpenConfig+0x388>)
 800e4c4:	781b      	ldrb	r3, [r3, #0]
 800e4c6:	461a      	mov	r2, r3
 800e4c8:	1d3b      	adds	r3, r7, #4
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	491f      	ldr	r1, [pc, #124]	; (800e54c <mod_mqttOpenConfig+0x38c>)
 800e4ce:	f003 fe7b 	bl	80121c8 <siprintf>
					sgu8_mqttClientId);
			len_retStatus = mod_mqttSslMode(lu8arr_param);
 800e4d2:	1d3b      	adds	r3, r7, #4
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7ff fb85 	bl	800dbe4 <mod_mqttSslMode>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e4e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d106      	bne.n	800e4f6 <mod_mqttOpenConfig+0x336>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e4e8:	2304      	movs	r3, #4
 800e4ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_STATE;
 800e4ee:	4b0e      	ldr	r3, [pc, #56]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e4f0:	220e      	movs	r2, #14
 800e4f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e4f4:	e041      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e4f6:	e040      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_STATE:
			len_retStatus = mod_mqttOpen();
 800e4f8:	f7ff fd98 	bl	800e02c <mod_mqttOpen>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e502:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <mod_mqttOpenConfig+0x358>
			{
				len_retStatus = E_RET_SUCCESS;
 800e50a:	2300      	movs	r3, #0
 800e50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e510:	4b05      	ldr	r3, [pc, #20]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e512:	2206      	movs	r2, #6
 800e514:	701a      	strb	r2, [r3, #0]
 800e516:	e02e      	b.n	800e576 <mod_mqttOpenConfig+0x3b6>
			}
			else if (E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e51c:	2b01      	cmp	r3, #1
 800e51e:	d117      	bne.n	800e550 <mod_mqttOpenConfig+0x390>
			{
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e520:	4b01      	ldr	r3, [pc, #4]	; (800e528 <mod_mqttOpenConfig+0x368>)
 800e522:	220d      	movs	r2, #13
 800e524:	701a      	strb	r2, [r3, #0]
 800e526:	e026      	b.n	800e576 <mod_mqttOpenConfig+0x3b6>
 800e528:	1fff47ab 	.word	0x1fff47ab
 800e52c:	080144ac 	.word	0x080144ac
 800e530:	08014554 	.word	0x08014554
 800e534:	080144c8 	.word	0x080144c8
 800e538:	080144e8 	.word	0x080144e8
 800e53c:	080144fc 	.word	0x080144fc
 800e540:	08014510 	.word	0x08014510
 800e544:	0801452c 	.word	0x0801452c
 800e548:	1fff47a5 	.word	0x1fff47a5
 800e54c:	08014544 	.word	0x08014544
			}
			else if (E_RET_FAILED == len_retStatus)
 800e550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e554:	2b02      	cmp	r3, #2
 800e556:	d103      	bne.n	800e560 <mod_mqttOpenConfig+0x3a0>
			{
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e558:	4b0b      	ldr	r3, [pc, #44]	; (800e588 <mod_mqttOpenConfig+0x3c8>)
 800e55a:	2206      	movs	r2, #6
 800e55c:	701a      	strb	r2, [r3, #0]
 800e55e:	e00a      	b.n	800e576 <mod_mqttOpenConfig+0x3b6>
			}
			else if(E_RET_CONN_ERROR == len_retStatus)
 800e560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e564:	2b0d      	cmp	r3, #13
 800e566:	d106      	bne.n	800e576 <mod_mqttOpenConfig+0x3b6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e568:	2304      	movs	r3, #4
 800e56a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CA_CERT_STATE;
 800e56e:	4b06      	ldr	r3, [pc, #24]	; (800e588 <mod_mqttOpenConfig+0x3c8>)
 800e570:	2203      	movs	r2, #3
 800e572:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e574:	e001      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>
 800e576:	e000      	b.n	800e57a <mod_mqttOpenConfig+0x3ba>

		default:
		break;
 800e578:	bf00      	nop
	}

	return len_retStatus;
 800e57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3728      	adds	r7, #40	; 0x28
 800e582:	46bd      	mov	sp, r7
 800e584:	bdb0      	pop	{r4, r5, r7, pc}
 800e586:	bf00      	nop
 800e588:	1fff47ab 	.word	0x1fff47ab

0800e58c <mod_gpsCfg>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsCfg(void)
{
 800e58c:	b5b0      	push	{r4, r5, r7, lr}
 800e58e:	b088      	sub	sp, #32
 800e590:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e592:	2304      	movs	r3, #4
 800e594:	77fb      	strb	r3, [r7, #31]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e596:	2300      	movs	r3, #0
 800e598:	61bb      	str	r3, [r7, #24]
	uint8_t lu8arr_param[] = "\"outport\",\"none\"\r\n";
 800e59a:	4b21      	ldr	r3, [pc, #132]	; (800e620 <mod_gpsCfg+0x94>)
 800e59c:	1d3c      	adds	r4, r7, #4
 800e59e:	461d      	mov	r5, r3
 800e5a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e5a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	8022      	strh	r2, [r4, #0]
 800e5aa:	3402      	adds	r4, #2
 800e5ac:	0c1b      	lsrs	r3, r3, #16
 800e5ae:	7023      	strb	r3, [r4, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GPS_CFG, (uint8_t *) lu8arr_param);
 800e5b0:	1d3b      	adds	r3, r7, #4
 800e5b2:	201f      	movs	r0, #31
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	f7fd fdf3 	bl	800c1a0 <mod_sendCmdGetRsp>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	77fb      	strb	r3, [r7, #31]
	if (E_RET_SUCCESS == len_retStatus)
 800e5be:	7ffb      	ldrb	r3, [r7, #31]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d110      	bne.n	800e5e6 <mod_gpsCfg+0x5a>
	{
		lsu8_retryCnt = 0;
 800e5c4:	4b17      	ldr	r3, [pc, #92]	; (800e624 <mod_gpsCfg+0x98>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800e5ca:	4817      	ldr	r0, [pc, #92]	; (800e628 <mod_gpsCfg+0x9c>)
 800e5cc:	4917      	ldr	r1, [pc, #92]	; (800e62c <mod_gpsCfg+0xa0>)
 800e5ce:	f003 fe5e 	bl	801228e <strstr>
 800e5d2:	61b8      	str	r0, [r7, #24]
				(const char *) gcst_ATCmdTable[E_IDX_GPS_CFG].mu8arr_respString);
		if(NULL != lu8p_Ptr)
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d002      	beq.n	800e5e0 <mod_gpsCfg+0x54>
		{

			len_retStatus = E_RET_SUCCESS;
 800e5da:	2300      	movs	r3, #0
 800e5dc:	77fb      	strb	r3, [r7, #31]
 800e5de:	e019      	b.n	800e614 <mod_gpsCfg+0x88>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800e5e0:	2302      	movs	r3, #2
 800e5e2:	77fb      	strb	r3, [r7, #31]
 800e5e4:	e016      	b.n	800e614 <mod_gpsCfg+0x88>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e5e6:	7ffb      	ldrb	r3, [r7, #31]
 800e5e8:	2b04      	cmp	r3, #4
 800e5ea:	d013      	beq.n	800e614 <mod_gpsCfg+0x88>
	{
		lsu8_retryCnt++;
 800e5ec:	4b0d      	ldr	r3, [pc, #52]	; (800e624 <mod_gpsCfg+0x98>)
 800e5ee:	781b      	ldrb	r3, [r3, #0]
 800e5f0:	3301      	adds	r3, #1
 800e5f2:	b2da      	uxtb	r2, r3
 800e5f4:	4b0b      	ldr	r3, [pc, #44]	; (800e624 <mod_gpsCfg+0x98>)
 800e5f6:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e5f8:	4b0a      	ldr	r3, [pc, #40]	; (800e624 <mod_gpsCfg+0x98>)
 800e5fa:	781b      	ldrb	r3, [r3, #0]
 800e5fc:	2b02      	cmp	r3, #2
 800e5fe:	d802      	bhi.n	800e606 <mod_gpsCfg+0x7a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e600:	2304      	movs	r3, #4
 800e602:	77fb      	strb	r3, [r7, #31]
 800e604:	e006      	b.n	800e614 <mod_gpsCfg+0x88>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e606:	4b07      	ldr	r3, [pc, #28]	; (800e624 <mod_gpsCfg+0x98>)
 800e608:	781b      	ldrb	r3, [r3, #0]
 800e60a:	2b03      	cmp	r3, #3
 800e60c:	d902      	bls.n	800e614 <mod_gpsCfg+0x88>
		{
			lsu8_retryCnt = 0;
 800e60e:	4b05      	ldr	r3, [pc, #20]	; (800e624 <mod_gpsCfg+0x98>)
 800e610:	2200      	movs	r2, #0
 800e612:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e614:	7ffb      	ldrb	r3, [r7, #31]
}
 800e616:	4618      	mov	r0, r3
 800e618:	3720      	adds	r7, #32
 800e61a:	46bd      	mov	sp, r7
 800e61c:	bdb0      	pop	{r4, r5, r7, pc}
 800e61e:	bf00      	nop
 800e620:	08014578 	.word	0x08014578
 800e624:	1fff47cf 	.word	0x1fff47cf
 800e628:	1fff4704 	.word	0x1fff4704
 800e62c:	1fff38fc 	.word	0x1fff38fc

0800e630 <mod_gpsEnable>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsEnable(void)
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e636:	2304      	movs	r3, #4
 800e638:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e63a:	2300      	movs	r3, #0
 800e63c:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_GNSS, (uint8_t *) NEW_LINE);
 800e63e:	2020      	movs	r0, #32
 800e640:	4914      	ldr	r1, [pc, #80]	; (800e694 <mod_gpsEnable+0x64>)
 800e642:	f7fd fdad 	bl	800c1a0 <mod_sendCmdGetRsp>
 800e646:	4603      	mov	r3, r0
 800e648:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800e64a:	79fb      	ldrb	r3, [r7, #7]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d105      	bne.n	800e65c <mod_gpsEnable+0x2c>
	{
		lsu8_retryCnt = 0;
 800e650:	4b11      	ldr	r3, [pc, #68]	; (800e698 <mod_gpsEnable+0x68>)
 800e652:	2200      	movs	r2, #0
 800e654:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800e656:	2300      	movs	r3, #0
 800e658:	71fb      	strb	r3, [r7, #7]
 800e65a:	e016      	b.n	800e68a <mod_gpsEnable+0x5a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e65c:	79fb      	ldrb	r3, [r7, #7]
 800e65e:	2b04      	cmp	r3, #4
 800e660:	d013      	beq.n	800e68a <mod_gpsEnable+0x5a>
	{
		lsu8_retryCnt++;
 800e662:	4b0d      	ldr	r3, [pc, #52]	; (800e698 <mod_gpsEnable+0x68>)
 800e664:	781b      	ldrb	r3, [r3, #0]
 800e666:	3301      	adds	r3, #1
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	4b0b      	ldr	r3, [pc, #44]	; (800e698 <mod_gpsEnable+0x68>)
 800e66c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e66e:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <mod_gpsEnable+0x68>)
 800e670:	781b      	ldrb	r3, [r3, #0]
 800e672:	2b02      	cmp	r3, #2
 800e674:	d802      	bhi.n	800e67c <mod_gpsEnable+0x4c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e676:	2304      	movs	r3, #4
 800e678:	71fb      	strb	r3, [r7, #7]
 800e67a:	e006      	b.n	800e68a <mod_gpsEnable+0x5a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e67c:	4b06      	ldr	r3, [pc, #24]	; (800e698 <mod_gpsEnable+0x68>)
 800e67e:	781b      	ldrb	r3, [r3, #0]
 800e680:	2b03      	cmp	r3, #3
 800e682:	d902      	bls.n	800e68a <mod_gpsEnable+0x5a>
		{
			lsu8_retryCnt = 0;
 800e684:	4b04      	ldr	r3, [pc, #16]	; (800e698 <mod_gpsEnable+0x68>)
 800e686:	2200      	movs	r2, #0
 800e688:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e68a:	79fb      	ldrb	r3, [r7, #7]
}
 800e68c:	4618      	mov	r0, r3
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}
 800e694:	0801437c 	.word	0x0801437c
 800e698:	1fff47d0 	.word	0x1fff47d0

0800e69c <mod_4gHandler>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_4gHandler(void)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e6a2:	2304      	movs	r3, #4
 800e6a4:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCount = 0;
//	mod_receiveRsp();	//read and saved received byte in global buffer

	if (gst_deviceStatus.mb_ismodemPwrDwn != true)
 800e6a6:	4ba3      	ldr	r3, [pc, #652]	; (800e934 <mod_4gHandler+0x298>)
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	f083 0301 	eor.w	r3, r3, #1
 800e6ae:	b2db      	uxtb	r3, r3
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	f000 813b 	beq.w	800e92c <mod_4gHandler+0x290>
	{
		switch (sen_4gRunState)
 800e6b6:	4ba0      	ldr	r3, [pc, #640]	; (800e938 <mod_4gHandler+0x29c>)
 800e6b8:	781b      	ldrb	r3, [r3, #0]
 800e6ba:	2b10      	cmp	r3, #16
 800e6bc:	f200 8135 	bhi.w	800e92a <mod_4gHandler+0x28e>
 800e6c0:	a201      	add	r2, pc, #4	; (adr r2, 800e6c8 <mod_4gHandler+0x2c>)
 800e6c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6c6:	bf00      	nop
 800e6c8:	0800e92b 	.word	0x0800e92b
 800e6cc:	0800e70d 	.word	0x0800e70d
 800e6d0:	0800e739 	.word	0x0800e739
 800e6d4:	0800e757 	.word	0x0800e757
 800e6d8:	0800e775 	.word	0x0800e775
 800e6dc:	0800e793 	.word	0x0800e793
 800e6e0:	0800e7b1 	.word	0x0800e7b1
 800e6e4:	0800e807 	.word	0x0800e807
 800e6e8:	0800e81f 	.word	0x0800e81f
 800e6ec:	0800e83b 	.word	0x0800e83b
 800e6f0:	0800e92b 	.word	0x0800e92b
 800e6f4:	0800e861 	.word	0x0800e861
 800e6f8:	0800e8f9 	.word	0x0800e8f9
 800e6fc:	0800e8c3 	.word	0x0800e8c3
 800e700:	0800e8db 	.word	0x0800e8db
 800e704:	0800e92b 	.word	0x0800e92b
 800e708:	0800e917 	.word	0x0800e917
		{
			case E_MOD_IDLE_STATE:
			break;

			case E_SET_URC_PORT_STATE:
				len_retStatus = mod_setUrcPort();
 800e70c:	f7fe f822 	bl	800c754 <mod_setUrcPort>
 800e710:	4603      	mov	r3, r0
 800e712:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e714:	79fb      	ldrb	r3, [r7, #7]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <mod_4gHandler+0x84>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e71a:	79fb      	ldrb	r3, [r7, #7]
 800e71c:	2b04      	cmp	r3, #4
 800e71e:	d00a      	beq.n	800e736 <mod_4gHandler+0x9a>
				{
					mod_disable4gModule();
 800e720:	f7fd fbec 	bl	800befc <mod_disable4gModule>
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800e724:	4b83      	ldr	r3, [pc, #524]	; (800e934 <mod_4gHandler+0x298>)
 800e726:	2201      	movs	r2, #1
 800e728:	701a      	strb	r2, [r3, #0]
					mod_enable4gModule();
 800e72a:	f7fd fbc9 	bl	800bec0 <mod_enable4gModule>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800e72e:	4b82      	ldr	r3, [pc, #520]	; (800e938 <mod_4gHandler+0x29c>)
 800e730:	2202      	movs	r2, #2
 800e732:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e734:	e0fa      	b.n	800e92c <mod_4gHandler+0x290>
 800e736:	e0f9      	b.n	800e92c <mod_4gHandler+0x290>

			case E_ECHO_OFF_STATE:
				len_retStatus = mod_echoOff();
 800e738:	f7fd ffda 	bl	800c6f0 <mod_echoOff>
 800e73c:	4603      	mov	r3, r0
 800e73e:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e740:	79fb      	ldrb	r3, [r7, #7]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d002      	beq.n	800e74c <mod_4gHandler+0xb0>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e746:	79fb      	ldrb	r3, [r7, #7]
 800e748:	2b04      	cmp	r3, #4
 800e74a:	d003      	beq.n	800e754 <mod_4gHandler+0xb8>
				{
					sen_4gRunState = E_SET_FLOW_CTRL_STATE;
 800e74c:	4b7a      	ldr	r3, [pc, #488]	; (800e938 <mod_4gHandler+0x29c>)
 800e74e:	2203      	movs	r2, #3
 800e750:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e752:	e0eb      	b.n	800e92c <mod_4gHandler+0x290>
 800e754:	e0ea      	b.n	800e92c <mod_4gHandler+0x290>

			case E_SET_FLOW_CTRL_STATE:
				len_retStatus = mod_setFlowCtrl();
 800e756:	f7fe f835 	bl	800c7c4 <mod_setFlowCtrl>
 800e75a:	4603      	mov	r3, r0
 800e75c:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e75e:	79fb      	ldrb	r3, [r7, #7]
 800e760:	2b00      	cmp	r3, #0
 800e762:	d002      	beq.n	800e76a <mod_4gHandler+0xce>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e764:	79fb      	ldrb	r3, [r7, #7]
 800e766:	2b04      	cmp	r3, #4
 800e768:	d003      	beq.n	800e772 <mod_4gHandler+0xd6>
				{
					sen_4gRunState = E_EXTRACT_MODULE_INFO_STATE;
 800e76a:	4b73      	ldr	r3, [pc, #460]	; (800e938 <mod_4gHandler+0x29c>)
 800e76c:	2204      	movs	r2, #4
 800e76e:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e770:	e0dc      	b.n	800e92c <mod_4gHandler+0x290>
 800e772:	e0db      	b.n	800e92c <mod_4gHandler+0x290>

			case E_EXTRACT_MODULE_INFO_STATE:
				len_retStatus = mod_extractModInfo();
 800e774:	f7fe f864 	bl	800c840 <mod_extractModInfo>
 800e778:	4603      	mov	r3, r0
 800e77a:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e77c:	79fb      	ldrb	r3, [r7, #7]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d002      	beq.n	800e788 <mod_4gHandler+0xec>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e782:	79fb      	ldrb	r3, [r7, #7]
 800e784:	2b04      	cmp	r3, #4
 800e786:	d003      	beq.n	800e790 <mod_4gHandler+0xf4>
				{
					sen_4gRunState = E_SIM_STATUS_STATE;
 800e788:	4b6b      	ldr	r3, [pc, #428]	; (800e938 <mod_4gHandler+0x29c>)
 800e78a:	2205      	movs	r2, #5
 800e78c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e78e:	e0cd      	b.n	800e92c <mod_4gHandler+0x290>
 800e790:	e0cc      	b.n	800e92c <mod_4gHandler+0x290>

			case E_SIM_STATUS_STATE:
				len_retStatus = mod_simStatus();
 800e792:	f7fe fbb5 	bl	800cf00 <mod_simStatus>
 800e796:	4603      	mov	r3, r0
 800e798:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e79a:	79fb      	ldrb	r3, [r7, #7]
 800e79c:	2b00      	cmp	r3, #0
 800e79e:	d002      	beq.n	800e7a6 <mod_4gHandler+0x10a>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e7a0:	79fb      	ldrb	r3, [r7, #7]
 800e7a2:	2b04      	cmp	r3, #4
 800e7a4:	d003      	beq.n	800e7ae <mod_4gHandler+0x112>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e7a6:	4b64      	ldr	r3, [pc, #400]	; (800e938 <mod_4gHandler+0x29c>)
 800e7a8:	2206      	movs	r2, #6
 800e7aa:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e7ac:	e0be      	b.n	800e92c <mod_4gHandler+0x290>
 800e7ae:	e0bd      	b.n	800e92c <mod_4gHandler+0x290>

			case E_NETWORK_STATUS_STATE:
				len_retStatus = mod_networkStatus();
 800e7b0:	f7fe fc4c 	bl	800d04c <mod_networkStatus>
 800e7b4:	4603      	mov	r3, r0
 800e7b6:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e7b8:	79fb      	ldrb	r3, [r7, #7]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d103      	bne.n	800e7c6 <mod_4gHandler+0x12a>
				{
					sen_4gRunState = E_SIGNAL_QUALITY_STATE;
 800e7be:	4b5e      	ldr	r3, [pc, #376]	; (800e938 <mod_4gHandler+0x29c>)
 800e7c0:	2207      	movs	r2, #7
 800e7c2:	701a      	strb	r2, [r3, #0]
 800e7c4:	e01e      	b.n	800e804 <mod_4gHandler+0x168>
				}
				else if (E_RET_FAILED == len_retStatus)
 800e7c6:	79fb      	ldrb	r3, [r7, #7]
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d11b      	bne.n	800e804 <mod_4gHandler+0x168>
				{
					lsu8_retryCount++;
 800e7cc:	4b5b      	ldr	r3, [pc, #364]	; (800e93c <mod_4gHandler+0x2a0>)
 800e7ce:	781b      	ldrb	r3, [r3, #0]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	b2da      	uxtb	r2, r3
 800e7d4:	4b59      	ldr	r3, [pc, #356]	; (800e93c <mod_4gHandler+0x2a0>)
 800e7d6:	701a      	strb	r2, [r3, #0]
					gb_isMqttConnected = false;
 800e7d8:	4b59      	ldr	r3, [pc, #356]	; (800e940 <mod_4gHandler+0x2a4>)
 800e7da:	2200      	movs	r2, #0
 800e7dc:	701a      	strb	r2, [r3, #0]
					if (lsu8_retryCount >= 6)
 800e7de:	4b57      	ldr	r3, [pc, #348]	; (800e93c <mod_4gHandler+0x2a0>)
 800e7e0:	781b      	ldrb	r3, [r3, #0]
 800e7e2:	2b05      	cmp	r3, #5
 800e7e4:	d906      	bls.n	800e7f4 <mod_4gHandler+0x158>
					{
						lsu8_retryCount = 0;
 800e7e6:	4b55      	ldr	r3, [pc, #340]	; (800e93c <mod_4gHandler+0x2a0>)
 800e7e8:	2200      	movs	r2, #0
 800e7ea:	701a      	strb	r2, [r3, #0]
						sen_4gRunState = E_MOD_RESET_STATE;
 800e7ec:	4b52      	ldr	r3, [pc, #328]	; (800e938 <mod_4gHandler+0x29c>)
 800e7ee:	220c      	movs	r2, #12
 800e7f0:	701a      	strb	r2, [r3, #0]
 800e7f2:	e007      	b.n	800e804 <mod_4gHandler+0x168>
					}
					else
					{
						tm_set4gRunTimer(TIMER_5S);
 800e7f4:	f241 3088 	movw	r0, #5000	; 0x1388
 800e7f8:	f7f1 fdee 	bl	80003d8 <tm_set4gRunTimer>
						sen_4gRunState = E_MOD_WAIT_STATE;
 800e7fc:	4b4e      	ldr	r3, [pc, #312]	; (800e938 <mod_4gHandler+0x29c>)
 800e7fe:	2210      	movs	r2, #16
 800e800:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800e802:	e093      	b.n	800e92c <mod_4gHandler+0x290>
 800e804:	e092      	b.n	800e92c <mod_4gHandler+0x290>

			case E_SIGNAL_QUALITY_STATE:
				len_retStatus = mod_signalQuality();
 800e806:	f7fe fcc1 	bl	800d18c <mod_signalQuality>
 800e80a:	4603      	mov	r3, r0
 800e80c:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e80e:	79fb      	ldrb	r3, [r7, #7]
 800e810:	2b00      	cmp	r3, #0
 800e812:	d103      	bne.n	800e81c <mod_4gHandler+0x180>
				{
					sen_4gRunState = E_EXTRACT_TIME_DATE_STATE;
 800e814:	4b48      	ldr	r3, [pc, #288]	; (800e938 <mod_4gHandler+0x29c>)
 800e816:	2208      	movs	r2, #8
 800e818:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e81a:	e087      	b.n	800e92c <mod_4gHandler+0x290>
 800e81c:	e086      	b.n	800e92c <mod_4gHandler+0x290>

			case E_EXTRACT_TIME_DATE_STATE:
				len_retStatus = mod_extractDateTime();
 800e81e:	f7fe fd09 	bl	800d234 <mod_extractDateTime>
 800e822:	4603      	mov	r3, r0
 800e824:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e826:	79fb      	ldrb	r3, [r7, #7]
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d105      	bne.n	800e838 <mod_4gHandler+0x19c>
				{
					//SuperLooptime_End();
					//SuperLooptime_Start();
					set_RTC();
 800e82c:	f7fc ff64 	bl	800b6f8 <set_RTC>
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e830:	4b41      	ldr	r3, [pc, #260]	; (800e938 <mod_4gHandler+0x29c>)
 800e832:	2209      	movs	r2, #9
 800e834:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e836:	e079      	b.n	800e92c <mod_4gHandler+0x290>
 800e838:	e078      	b.n	800e92c <mod_4gHandler+0x290>

			case E_MQTT_OPEN_STATE:
				len_retStatus = mod_mqttOpenConfig();
 800e83a:	f7ff fcc1 	bl	800e1c0 <mod_mqttOpenConfig>
 800e83e:	4603      	mov	r3, r0
 800e840:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e842:	79fb      	ldrb	r3, [r7, #7]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d103      	bne.n	800e850 <mod_4gHandler+0x1b4>
				{
					sen_4gRunState = E_MQTT_CONNECT_STATE;
 800e848:	4b3b      	ldr	r3, [pc, #236]	; (800e938 <mod_4gHandler+0x29c>)
 800e84a:	220b      	movs	r2, #11
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	e006      	b.n	800e85e <mod_4gHandler+0x1c2>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e850:	79fb      	ldrb	r3, [r7, #7]
 800e852:	2b04      	cmp	r3, #4
 800e854:	d003      	beq.n	800e85e <mod_4gHandler+0x1c2>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e856:	4b38      	ldr	r3, [pc, #224]	; (800e938 <mod_4gHandler+0x29c>)
 800e858:	220c      	movs	r2, #12
 800e85a:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e85c:	e066      	b.n	800e92c <mod_4gHandler+0x290>
 800e85e:	e065      	b.n	800e92c <mod_4gHandler+0x290>

			case E_MQTT_CONNECT_STATE:
				len_retStatus = mod_mqttConnect();
 800e860:	f7fe fd84 	bl	800d36c <mod_mqttConnect>
 800e864:	4603      	mov	r3, r0
 800e866:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e868:	79fb      	ldrb	r3, [r7, #7]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d103      	bne.n	800e876 <mod_4gHandler+0x1da>
				{
//					gb_isMqttConnected = true;
//					sen_4gRunState = E_MOD_IDLE_STATE;
					sen_4gRunState = E_GPS_CFG_STATE;
 800e86e:	4b32      	ldr	r3, [pc, #200]	; (800e938 <mod_4gHandler+0x29c>)
 800e870:	220d      	movs	r2, #13
 800e872:	701a      	strb	r2, [r3, #0]
 800e874:	e024      	b.n	800e8c0 <mod_4gHandler+0x224>
				}
				else if(E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e876:	79fb      	ldrb	r3, [r7, #7]
 800e878:	2b01      	cmp	r3, #1
 800e87a:	d113      	bne.n	800e8a4 <mod_4gHandler+0x208>
				{
					sgu8_mqttClientId++;
 800e87c:	4b31      	ldr	r3, [pc, #196]	; (800e944 <mod_4gHandler+0x2a8>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	3301      	adds	r3, #1
 800e882:	b2da      	uxtb	r2, r3
 800e884:	4b2f      	ldr	r3, [pc, #188]	; (800e944 <mod_4gHandler+0x2a8>)
 800e886:	701a      	strb	r2, [r3, #0]
					if (sgu8_mqttClientId > 5)
 800e888:	4b2e      	ldr	r3, [pc, #184]	; (800e944 <mod_4gHandler+0x2a8>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	2b05      	cmp	r3, #5
 800e88e:	d902      	bls.n	800e896 <mod_4gHandler+0x1fa>
					{
						sgu8_mqttClientId = 0;
 800e890:	4b2c      	ldr	r3, [pc, #176]	; (800e944 <mod_4gHandler+0x2a8>)
 800e892:	2200      	movs	r2, #0
 800e894:	701a      	strb	r2, [r3, #0]
					}
					sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e896:	4b2c      	ldr	r3, [pc, #176]	; (800e948 <mod_4gHandler+0x2ac>)
 800e898:	220d      	movs	r2, #13
 800e89a:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e89c:	4b26      	ldr	r3, [pc, #152]	; (800e938 <mod_4gHandler+0x29c>)
 800e89e:	2209      	movs	r2, #9
 800e8a0:	701a      	strb	r2, [r3, #0]
 800e8a2:	e00d      	b.n	800e8c0 <mod_4gHandler+0x224>
				}
				else if (E_RET_CONN_CLOSED_ERROR == len_retStatus)
 800e8a4:	79fb      	ldrb	r3, [r7, #7]
 800e8a6:	2b0a      	cmp	r3, #10
 800e8a8:	d103      	bne.n	800e8b2 <mod_4gHandler+0x216>
				{
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e8aa:	4b23      	ldr	r3, [pc, #140]	; (800e938 <mod_4gHandler+0x29c>)
 800e8ac:	2209      	movs	r2, #9
 800e8ae:	701a      	strb	r2, [r3, #0]
 800e8b0:	e006      	b.n	800e8c0 <mod_4gHandler+0x224>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e8b2:	79fb      	ldrb	r3, [r7, #7]
 800e8b4:	2b04      	cmp	r3, #4
 800e8b6:	d003      	beq.n	800e8c0 <mod_4gHandler+0x224>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e8b8:	4b1f      	ldr	r3, [pc, #124]	; (800e938 <mod_4gHandler+0x29c>)
 800e8ba:	220c      	movs	r2, #12
 800e8bc:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e8be:	e035      	b.n	800e92c <mod_4gHandler+0x290>
 800e8c0:	e034      	b.n	800e92c <mod_4gHandler+0x290>

			case E_GPS_CFG_STATE:
				len_retStatus = mod_gpsCfg();
 800e8c2:	f7ff fe63 	bl	800e58c <mod_gpsCfg>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e8ca:	79fb      	ldrb	r3, [r7, #7]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d103      	bne.n	800e8d8 <mod_4gHandler+0x23c>
				{
					sen_4gRunState = E_GPS_ENABLE_STATE;
 800e8d0:	4b19      	ldr	r3, [pc, #100]	; (800e938 <mod_4gHandler+0x29c>)
 800e8d2:	220e      	movs	r2, #14
 800e8d4:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e8d6:	e029      	b.n	800e92c <mod_4gHandler+0x290>
 800e8d8:	e028      	b.n	800e92c <mod_4gHandler+0x290>

			case E_GPS_ENABLE_STATE:
				len_retStatus = mod_gpsEnable();
 800e8da:	f7ff fea9 	bl	800e630 <mod_gpsEnable>
 800e8de:	4603      	mov	r3, r0
 800e8e0:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e8e2:	79fb      	ldrb	r3, [r7, #7]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d106      	bne.n	800e8f6 <mod_4gHandler+0x25a>
				{
					gb_isMqttConnected = true;
 800e8e8:	4b15      	ldr	r3, [pc, #84]	; (800e940 <mod_4gHandler+0x2a4>)
 800e8ea:	2201      	movs	r2, #1
 800e8ec:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_SET_URC_PORT_STATE;
 800e8ee:	4b12      	ldr	r3, [pc, #72]	; (800e938 <mod_4gHandler+0x29c>)
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e8f4:	e01a      	b.n	800e92c <mod_4gHandler+0x290>
 800e8f6:	e019      	b.n	800e92c <mod_4gHandler+0x290>
			case E_GET_GPS_DATA_STATE:

			break;

			case E_MOD_RESET_STATE:
				len_retStatus = mod_mqttDisableEnableFunctionality();
 800e8f8:	f7fe fefc 	bl	800d6f4 <mod_mqttDisableEnableFunctionality>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e900:	79fb      	ldrb	r3, [r7, #7]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d002      	beq.n	800e90c <mod_4gHandler+0x270>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e906:	79fb      	ldrb	r3, [r7, #7]
 800e908:	2b04      	cmp	r3, #4
 800e90a:	d003      	beq.n	800e914 <mod_4gHandler+0x278>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e90c:	4b0a      	ldr	r3, [pc, #40]	; (800e938 <mod_4gHandler+0x29c>)
 800e90e:	2206      	movs	r2, #6
 800e910:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e912:	e00b      	b.n	800e92c <mod_4gHandler+0x290>
 800e914:	e00a      	b.n	800e92c <mod_4gHandler+0x290>

			case E_MOD_WAIT_STATE:
				if (tm_get4gRunTimerValue() == 0)
 800e916:	f7f1 fd6d 	bl	80003f4 <tm_get4gRunTimerValue>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d103      	bne.n	800e928 <mod_4gHandler+0x28c>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e920:	4b05      	ldr	r3, [pc, #20]	; (800e938 <mod_4gHandler+0x29c>)
 800e922:	2206      	movs	r2, #6
 800e924:	701a      	strb	r2, [r3, #0]
				}

			break;
 800e926:	e001      	b.n	800e92c <mod_4gHandler+0x290>
 800e928:	e000      	b.n	800e92c <mod_4gHandler+0x290>

			default:
			break;
 800e92a:	bf00      	nop
		}
	}
}
 800e92c:	3708      	adds	r7, #8
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	1ffea50c 	.word	0x1ffea50c
 800e938:	1ffea508 	.word	0x1ffea508
 800e93c:	1fff47d1 	.word	0x1fff47d1
 800e940:	1fff5294 	.word	0x1fff5294
 800e944:	1fff47a5 	.word	0x1fff47a5
 800e948:	1fff47ab 	.word	0x1fff47ab

0800e94c <mod_pub10sPackExtractGps>:

	return len_retStatus;
}*/

en_responseRetCodes_t mod_pub10sPackExtractGps(void)
{
 800e94c:	b5b0      	push	{r4, r5, r7, lr}
 800e94e:	b08c      	sub	sp, #48	; 0x30
 800e950:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e952:	2304      	movs	r3, #4
 800e954:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lu8_retryCont = 0;

	RTC_GetTime(&current_time);
 800e958:	486a      	ldr	r0, [pc, #424]	; (800eb04 <mod_pub10sPackExtractGps+0x1b8>)
 800e95a:	f7f9 f983 	bl	8007c64 <RTC_GetTime>

	if ((current_time.seconds % 3 == 0U) && (sgb_flagGps == false) && (sgb_packetFlag == false))
 800e95e:	4b69      	ldr	r3, [pc, #420]	; (800eb04 <mod_pub10sPackExtractGps+0x1b8>)
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e966:	b2db      	uxtb	r3, r3
 800e968:	4619      	mov	r1, r3
 800e96a:	4b67      	ldr	r3, [pc, #412]	; (800eb08 <mod_pub10sPackExtractGps+0x1bc>)
 800e96c:	fb83 3201 	smull	r3, r2, r3, r1
 800e970:	17cb      	asrs	r3, r1, #31
 800e972:	1ad2      	subs	r2, r2, r3
 800e974:	4613      	mov	r3, r2
 800e976:	005b      	lsls	r3, r3, #1
 800e978:	4413      	add	r3, r2
 800e97a:	1aca      	subs	r2, r1, r3
 800e97c:	2a00      	cmp	r2, #0
 800e97e:	d113      	bne.n	800e9a8 <mod_pub10sPackExtractGps+0x5c>
 800e980:	4b62      	ldr	r3, [pc, #392]	; (800eb0c <mod_pub10sPackExtractGps+0x1c0>)
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	f083 0301 	eor.w	r3, r3, #1
 800e988:	b2db      	uxtb	r3, r3
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00c      	beq.n	800e9a8 <mod_pub10sPackExtractGps+0x5c>
 800e98e:	4b60      	ldr	r3, [pc, #384]	; (800eb10 <mod_pub10sPackExtractGps+0x1c4>)
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	f083 0301 	eor.w	r3, r3, #1
 800e996:	b2db      	uxtb	r3, r3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d005      	beq.n	800e9a8 <mod_pub10sPackExtractGps+0x5c>
	{
		Get_CurrentLocation();
 800e99c:	f7fd f864 	bl	800ba68 <Get_CurrentLocation>
		sgb_flagGps = true;
 800e9a0:	4b5a      	ldr	r3, [pc, #360]	; (800eb0c <mod_pub10sPackExtractGps+0x1c0>)
 800e9a2:	2201      	movs	r2, #1
 800e9a4:	701a      	strb	r2, [r3, #0]
 800e9a6:	e017      	b.n	800e9d8 <mod_pub10sPackExtractGps+0x8c>
	}
	else if ((sgb_flagGps == true) && (current_time.seconds % 3) != 0U)
 800e9a8:	4b58      	ldr	r3, [pc, #352]	; (800eb0c <mod_pub10sPackExtractGps+0x1c0>)
 800e9aa:	781b      	ldrb	r3, [r3, #0]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d013      	beq.n	800e9d8 <mod_pub10sPackExtractGps+0x8c>
 800e9b0:	4b54      	ldr	r3, [pc, #336]	; (800eb04 <mod_pub10sPackExtractGps+0x1b8>)
 800e9b2:	781b      	ldrb	r3, [r3, #0]
 800e9b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	4b52      	ldr	r3, [pc, #328]	; (800eb08 <mod_pub10sPackExtractGps+0x1bc>)
 800e9be:	fb83 3201 	smull	r3, r2, r3, r1
 800e9c2:	17cb      	asrs	r3, r1, #31
 800e9c4:	1ad2      	subs	r2, r2, r3
 800e9c6:	4613      	mov	r3, r2
 800e9c8:	005b      	lsls	r3, r3, #1
 800e9ca:	4413      	add	r3, r2
 800e9cc:	1aca      	subs	r2, r1, r3
 800e9ce:	2a00      	cmp	r2, #0
 800e9d0:	d002      	beq.n	800e9d8 <mod_pub10sPackExtractGps+0x8c>
	{
		sgb_flagGps = false;
 800e9d2:	4b4e      	ldr	r3, [pc, #312]	; (800eb0c <mod_pub10sPackExtractGps+0x1c0>)
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	701a      	strb	r2, [r3, #0]
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
 800e9d8:	4b4a      	ldr	r3, [pc, #296]	; (800eb04 <mod_pub10sPackExtractGps+0x1b8>)
 800e9da:	781b      	ldrb	r3, [r3, #0]
 800e9dc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	4619      	mov	r1, r3
 800e9e4:	4b4b      	ldr	r3, [pc, #300]	; (800eb14 <mod_pub10sPackExtractGps+0x1c8>)
 800e9e6:	fb83 2301 	smull	r2, r3, r3, r1
 800e9ea:	109a      	asrs	r2, r3, #2
 800e9ec:	17cb      	asrs	r3, r1, #31
 800e9ee:	1ad2      	subs	r2, r2, r3
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	005b      	lsls	r3, r3, #1
 800e9f8:	1aca      	subs	r2, r1, r3
 800e9fa:	2a00      	cmp	r2, #0
 800e9fc:	d12c      	bne.n	800ea58 <mod_pub10sPackExtractGps+0x10c>
 800e9fe:	4b46      	ldr	r3, [pc, #280]	; (800eb18 <mod_pub10sPackExtractGps+0x1cc>)
 800ea00:	781b      	ldrb	r3, [r3, #0]
 800ea02:	f083 0301 	eor.w	r3, r3, #1
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d025      	beq.n	800ea58 <mod_pub10sPackExtractGps+0x10c>
	{
		epoch_time();
 800ea0c:	f7fc ff24 	bl	800b858 <epoch_time>
		Process_4G_Event_Data();
 800ea10:	f7fc fd94 	bl	800b53c <Process_4G_Event_Data>
		memset(Eventbuffer_4Gcomm, 0, 512);
 800ea14:	4841      	ldr	r0, [pc, #260]	; (800eb1c <mod_pub10sPackExtractGps+0x1d0>)
 800ea16:	2100      	movs	r1, #0
 800ea18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea1c:	f003 f915 	bl	8011c4a <memset>
		pb_ostream_t stream1;
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
 800ea20:	463b      	mov	r3, r7
 800ea22:	4618      	mov	r0, r3
 800ea24:	493d      	ldr	r1, [pc, #244]	; (800eb1c <mod_pub10sPackExtractGps+0x1d0>)
 800ea26:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ea2a:	f000 fb31 	bl	800f090 <pb_ostream_from_buffer>
 800ea2e:	f107 0418 	add.w	r4, r7, #24
 800ea32:	463d      	mov	r5, r7
 800ea34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ea36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ea38:	682b      	ldr	r3, [r5, #0]
 800ea3a:	6023      	str	r3, [r4, #0]
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
 800ea3c:	f107 0318 	add.w	r3, r7, #24
 800ea40:	4618      	mov	r0, r3
 800ea42:	4937      	ldr	r1, [pc, #220]	; (800eb20 <mod_pub10sPackExtractGps+0x1d4>)
 800ea44:	4a37      	ldr	r2, [pc, #220]	; (800eb24 <mod_pub10sPackExtractGps+0x1d8>)
 800ea46:	f000 ff95 	bl	800f974 <pb_encode>
		sgb_packetFlag = true;
 800ea4a:	4b31      	ldr	r3, [pc, #196]	; (800eb10 <mod_pub10sPackExtractGps+0x1c4>)
 800ea4c:	2201      	movs	r2, #1
 800ea4e:	701a      	strb	r2, [r3, #0]
		sgb_flag4g = true;
 800ea50:	4b31      	ldr	r3, [pc, #196]	; (800eb18 <mod_pub10sPackExtractGps+0x1cc>)
 800ea52:	2201      	movs	r2, #1
 800ea54:	701a      	strb	r2, [r3, #0]
	{
		sgb_flagGps = false;
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
	{
 800ea56:	e019      	b.n	800ea8c <mod_pub10sPackExtractGps+0x140>
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
		sgb_packetFlag = true;
		sgb_flag4g = true;
	}
	else if ((sgb_flag4g == true) && (current_time.seconds % 10 != 0U))
 800ea58:	4b2f      	ldr	r3, [pc, #188]	; (800eb18 <mod_pub10sPackExtractGps+0x1cc>)
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d015      	beq.n	800ea8c <mod_pub10sPackExtractGps+0x140>
 800ea60:	4b28      	ldr	r3, [pc, #160]	; (800eb04 <mod_pub10sPackExtractGps+0x1b8>)
 800ea62:	781b      	ldrb	r3, [r3, #0]
 800ea64:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800ea68:	b2db      	uxtb	r3, r3
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4b29      	ldr	r3, [pc, #164]	; (800eb14 <mod_pub10sPackExtractGps+0x1c8>)
 800ea6e:	fb83 2301 	smull	r2, r3, r3, r1
 800ea72:	109a      	asrs	r2, r3, #2
 800ea74:	17cb      	asrs	r3, r1, #31
 800ea76:	1ad2      	subs	r2, r2, r3
 800ea78:	4613      	mov	r3, r2
 800ea7a:	009b      	lsls	r3, r3, #2
 800ea7c:	4413      	add	r3, r2
 800ea7e:	005b      	lsls	r3, r3, #1
 800ea80:	1aca      	subs	r2, r1, r3
 800ea82:	2a00      	cmp	r2, #0
 800ea84:	d002      	beq.n	800ea8c <mod_pub10sPackExtractGps+0x140>
	{
		sgb_flag4g = false;
 800ea86:	4b24      	ldr	r3, [pc, #144]	; (800eb18 <mod_pub10sPackExtractGps+0x1cc>)
 800ea88:	2200      	movs	r2, #0
 800ea8a:	701a      	strb	r2, [r3, #0]
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
 800ea8c:	4b20      	ldr	r3, [pc, #128]	; (800eb10 <mod_pub10sPackExtractGps+0x1c4>)
 800ea8e:	781b      	ldrb	r3, [r3, #0]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d032      	beq.n	800eafa <mod_pub10sPackExtractGps+0x1ae>
 800ea94:	4b24      	ldr	r3, [pc, #144]	; (800eb28 <mod_pub10sPackExtractGps+0x1dc>)
 800ea96:	781b      	ldrb	r3, [r3, #0]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d02e      	beq.n	800eafa <mod_pub10sPackExtractGps+0x1ae>
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 800ea9c:	481f      	ldr	r0, [pc, #124]	; (800eb1c <mod_pub10sPackExtractGps+0x1d0>)
 800ea9e:	f003 fbdc 	bl	801225a <strlen>
 800eaa2:	4603      	mov	r3, r0
		sgb_flag4g = false;
	}

	if (sgb_packetFlag == true && is_drive_mode == true) //publish only in drive mode
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
 800eaa4:	b29b      	uxth	r3, r3
 800eaa6:	481d      	ldr	r0, [pc, #116]	; (800eb1c <mod_pub10sPackExtractGps+0x1d0>)
 800eaa8:	4619      	mov	r1, r3
 800eaaa:	4a20      	ldr	r2, [pc, #128]	; (800eb2c <mod_pub10sPackExtractGps+0x1e0>)
 800eaac:	f7fe fe6c 	bl	800d788 <mod_mqttPublishData>
 800eab0:	4603      	mov	r3, r0
 800eab2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);

		if (E_RET_SUCCESS == len_retStatus)
 800eab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d103      	bne.n	800eac6 <mod_pub10sPackExtractGps+0x17a>
		{
			sgb_packetFlag = false;
 800eabe:	4b14      	ldr	r3, [pc, #80]	; (800eb10 <mod_pub10sPackExtractGps+0x1c4>)
 800eac0:	2200      	movs	r2, #0
 800eac2:	701a      	strb	r2, [r3, #0]
 800eac4:	e019      	b.n	800eafa <mod_pub10sPackExtractGps+0x1ae>
		}
		else if (E_RET_INPROGRESS != len_retStatus)
 800eac6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eaca:	2b04      	cmp	r3, #4
 800eacc:	d015      	beq.n	800eafa <mod_pub10sPackExtractGps+0x1ae>
		{
			lu8_retryCont++;
 800eace:	4b18      	ldr	r3, [pc, #96]	; (800eb30 <mod_pub10sPackExtractGps+0x1e4>)
 800ead0:	781b      	ldrb	r3, [r3, #0]
 800ead2:	3301      	adds	r3, #1
 800ead4:	b2da      	uxtb	r2, r3
 800ead6:	4b16      	ldr	r3, [pc, #88]	; (800eb30 <mod_pub10sPackExtractGps+0x1e4>)
 800ead8:	701a      	strb	r2, [r3, #0]
			if (3 > lu8_retryCont)
 800eada:	4b15      	ldr	r3, [pc, #84]	; (800eb30 <mod_pub10sPackExtractGps+0x1e4>)
 800eadc:	781b      	ldrb	r3, [r3, #0]
 800eade:	2b02      	cmp	r3, #2
 800eae0:	d80b      	bhi.n	800eafa <mod_pub10sPackExtractGps+0x1ae>
			{
				lu8_retryCont = 0;
 800eae2:	4b13      	ldr	r3, [pc, #76]	; (800eb30 <mod_pub10sPackExtractGps+0x1e4>)
 800eae4:	2200      	movs	r2, #0
 800eae6:	701a      	strb	r2, [r3, #0]

				//write to SD card

				sgb_packetFlag = false;
 800eae8:	4b09      	ldr	r3, [pc, #36]	; (800eb10 <mod_pub10sPackExtractGps+0x1c4>)
 800eaea:	2200      	movs	r2, #0
 800eaec:	701a      	strb	r2, [r3, #0]
				gb_isMqttConnected = false;
 800eaee:	4b11      	ldr	r3, [pc, #68]	; (800eb34 <mod_pub10sPackExtractGps+0x1e8>)
 800eaf0:	2200      	movs	r2, #0
 800eaf2:	701a      	strb	r2, [r3, #0]
				sen_4gRunState = E_MQTT_OPEN_STATE;
 800eaf4:	4b10      	ldr	r3, [pc, #64]	; (800eb38 <mod_pub10sPackExtractGps+0x1ec>)
 800eaf6:	2209      	movs	r2, #9
 800eaf8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3730      	adds	r7, #48	; 0x30
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bdb0      	pop	{r4, r5, r7, pc}
 800eb02:	bf00      	nop
 800eb04:	1fff4830 	.word	0x1fff4830
 800eb08:	55555556 	.word	0x55555556
 800eb0c:	1fff47b1 	.word	0x1fff47b1
 800eb10:	1fff47af 	.word	0x1fff47af
 800eb14:	66666667 	.word	0x66666667
 800eb18:	1fff47b0 	.word	0x1fff47b0
 800eb1c:	1fff44e0 	.word	0x1fff44e0
 800eb20:	080142c4 	.word	0x080142c4
 800eb24:	1fff5298 	.word	0x1fff5298
 800eb28:	1fff47d6 	.word	0x1fff47d6
 800eb2c:	0801458c 	.word	0x0801458c
 800eb30:	1fff47d2 	.word	0x1fff47d2
 800eb34:	1fff5294 	.word	0x1fff5294
 800eb38:	1ffea508 	.word	0x1ffea508

0800eb3c <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800eb3c:	b480      	push	{r7}
 800eb3e:	b08f      	sub	sp, #60	; 0x3c
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	891a      	ldrh	r2, [r3, #8]
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	8a1b      	ldrh	r3, [r3, #16]
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	d301      	bcc.n	800eb56 <load_descriptor_values+0x1a>
        return false;
 800eb52:	2300      	movs	r3, #0
 800eb54:	e153      	b.n	800edfe <load_descriptor_values+0x2c2>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	681a      	ldr	r2, [r3, #0]
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	895b      	ldrh	r3, [r3, #10]
 800eb60:	009b      	lsls	r3, r3, #2
 800eb62:	4413      	add	r3, r2
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800eb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb6a:	0a1b      	lsrs	r3, r3, #8
 800eb6c:	b2da      	uxtb	r2, r3
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800eb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb74:	f003 0303 	and.w	r3, r3, #3
 800eb78:	2b01      	cmp	r3, #1
 800eb7a:	d023      	beq.n	800ebc4 <load_descriptor_values+0x88>
 800eb7c:	2b01      	cmp	r3, #1
 800eb7e:	d302      	bcc.n	800eb86 <load_descriptor_values+0x4a>
 800eb80:	2b02      	cmp	r3, #2
 800eb82:	d053      	beq.n	800ec2c <load_descriptor_values+0xf0>
 800eb84:	e08e      	b.n	800eca4 <load_descriptor_values+0x168>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800eb8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb8e:	089b      	lsrs	r3, r3, #2
 800eb90:	b29b      	uxth	r3, r3
 800eb92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb96:	b29a      	uxth	r2, r3
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800eb9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb9e:	0e1b      	lsrs	r3, r3, #24
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	f003 030f 	and.w	r3, r3, #15
 800eba6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800ebaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebac:	0c1b      	lsrs	r3, r3, #16
 800ebae:	b2db      	uxtb	r3, r3
 800ebb0:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 800ebb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebb4:	0f1b      	lsrs	r3, r3, #28
 800ebb6:	b29b      	uxth	r3, r3
 800ebb8:	f003 030f 	and.w	r3, r3, #15
 800ebbc:	b29a      	uxth	r2, r3
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	825a      	strh	r2, [r3, #18]
            break;
 800ebc2:	e0b4      	b.n	800ed2e <load_descriptor_values+0x1f2>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	681a      	ldr	r2, [r3, #0]
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	895b      	ldrh	r3, [r3, #10]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	009b      	lsls	r3, r3, #2
 800ebd2:	4413      	add	r3, r2
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	62bb      	str	r3, [r7, #40]	; 0x28

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800ebd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebda:	0c1b      	lsrs	r3, r3, #16
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ebe2:	b29a      	uxth	r2, r3
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	089b      	lsrs	r3, r3, #2
 800ebec:	b29b      	uxth	r3, r3
 800ebee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ebf2:	b29a      	uxth	r2, r3
 800ebf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ebf6:	0f1b      	lsrs	r3, r3, #28
 800ebf8:	b29b      	uxth	r3, r3
 800ebfa:	019b      	lsls	r3, r3, #6
 800ebfc:	b29b      	uxth	r3, r3
 800ebfe:	4313      	orrs	r3, r2
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800ec06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec08:	0f1b      	lsrs	r3, r3, #28
 800ec0a:	b2db      	uxtb	r3, r3
 800ec0c:	f003 030f 	and.w	r3, r3, #15
 800ec10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800ec14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec16:	b29b      	uxth	r3, r3
 800ec18:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800ec1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1c:	0c1b      	lsrs	r3, r3, #16
 800ec1e:	b29b      	uxth	r3, r3
 800ec20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ec24:	b29a      	uxth	r2, r3
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	825a      	strh	r2, [r3, #18]
            break;
 800ec2a:	e080      	b.n	800ed2e <load_descriptor_values+0x1f2>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	681a      	ldr	r2, [r3, #0]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	895b      	ldrh	r3, [r3, #10]
 800ec36:	3301      	adds	r3, #1
 800ec38:	009b      	lsls	r3, r3, #2
 800ec3a:	4413      	add	r3, r2
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	681a      	ldr	r2, [r3, #0]
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	895b      	ldrh	r3, [r3, #10]
 800ec4a:	3302      	adds	r3, #2
 800ec4c:	009b      	lsls	r3, r3, #2
 800ec4e:	4413      	add	r3, r2
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	623b      	str	r3, [r7, #32]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	895b      	ldrh	r3, [r3, #10]
 800ec5e:	3303      	adds	r3, #3
 800ec60:	009b      	lsls	r3, r3, #2
 800ec62:	4413      	add	r3, r2
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800ec68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec6a:	0c1b      	lsrs	r3, r3, #16
 800ec6c:	b29a      	uxth	r2, r3
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800ec72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec74:	089b      	lsrs	r3, r3, #2
 800ec76:	b29b      	uxth	r3, r3
 800ec78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ec7c:	b29a      	uxth	r2, r3
 800ec7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec80:	0a1b      	lsrs	r3, r3, #8
 800ec82:	b29b      	uxth	r3, r3
 800ec84:	019b      	lsls	r3, r3, #6
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	4313      	orrs	r3, r2
 800ec8a:	b29a      	uxth	r2, r3
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800ec90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800ec96:	6a3b      	ldr	r3, [r7, #32]
 800ec98:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	b29a      	uxth	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	825a      	strh	r2, [r3, #18]
            break;
 800eca2:	e044      	b.n	800ed2e <load_descriptor_values+0x1f2>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	895b      	ldrh	r3, [r3, #10]
 800ecae:	3301      	adds	r3, #1
 800ecb0:	009b      	lsls	r3, r3, #2
 800ecb2:	4413      	add	r3, r2
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	681a      	ldr	r2, [r3, #0]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	895b      	ldrh	r3, [r3, #10]
 800ecc2:	3302      	adds	r3, #2
 800ecc4:	009b      	lsls	r3, r3, #2
 800ecc6:	4413      	add	r3, r2
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	681a      	ldr	r2, [r3, #0]
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	895b      	ldrh	r3, [r3, #10]
 800ecd6:	3303      	adds	r3, #3
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4413      	add	r3, r2
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	681a      	ldr	r2, [r3, #0]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	895b      	ldrh	r3, [r3, #10]
 800ecea:	3304      	adds	r3, #4
 800ecec:	009b      	lsls	r3, r3, #2
 800ecee:	4413      	add	r3, r2
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	b29a      	uxth	r2, r3
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800ecfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ecfe:	089b      	lsrs	r3, r3, #2
 800ed00:	b29b      	uxth	r3, r3
 800ed02:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ed06:	b29a      	uxth	r2, r3
 800ed08:	69bb      	ldr	r3, [r7, #24]
 800ed0a:	0a1b      	lsrs	r3, r3, #8
 800ed0c:	b29b      	uxth	r3, r3
 800ed0e:	019b      	lsls	r3, r3, #6
 800ed10:	b29b      	uxth	r3, r3
 800ed12:	4313      	orrs	r3, r2
 800ed14:	b29a      	uxth	r2, r3
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800ed24:	693b      	ldr	r3, [r7, #16]
 800ed26:	b29a      	uxth	r2, r3
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	825a      	strh	r2, [r3, #18]
            break;
 800ed2c:	bf00      	nop
        }
    }

    if (!iter->message)
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d106      	bne.n	800ed44 <load_descriptor_values+0x208>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	2200      	movs	r2, #0
 800ed3a:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2200      	movs	r2, #0
 800ed40:	621a      	str	r2, [r3, #32]
 800ed42:	e041      	b.n	800edc8 <load_descriptor_values+0x28c>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	685a      	ldr	r2, [r3, #4]
 800ed48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed4a:	441a      	add	r2, r3
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800ed50:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d008      	beq.n	800ed6a <load_descriptor_values+0x22e>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	699a      	ldr	r2, [r3, #24]
 800ed5c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ed60:	425b      	negs	r3, r3
 800ed62:	441a      	add	r2, r3
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	621a      	str	r2, [r3, #32]
 800ed68:	e01a      	b.n	800eda0 <load_descriptor_values+0x264>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	7d9b      	ldrb	r3, [r3, #22]
 800ed6e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ed72:	2b20      	cmp	r3, #32
 800ed74:	d111      	bne.n	800ed9a <load_descriptor_values+0x25e>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	7d9b      	ldrb	r3, [r3, #22]
 800ed7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0

        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d005      	beq.n	800ed8e <load_descriptor_values+0x252>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	7d9b      	ldrb	r3, [r3, #22]
 800ed86:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800ed8a:	2b80      	cmp	r3, #128	; 0x80
 800ed8c:	d105      	bne.n	800ed9a <load_descriptor_values+0x25e>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	f103 0214 	add.w	r2, r3, #20
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	621a      	str	r2, [r3, #32]
 800ed98:	e002      	b.n	800eda0 <load_descriptor_values+0x264>
        }
        else
        {
            iter->pSize = NULL;
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	7d9b      	ldrb	r3, [r3, #22]
 800eda4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eda8:	2b80      	cmp	r3, #128	; 0x80
 800edaa:	d109      	bne.n	800edc0 <load_descriptor_values+0x284>
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	699b      	ldr	r3, [r3, #24]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d005      	beq.n	800edc0 <load_descriptor_values+0x284>
        {
            iter->pData = *(void**)iter->pField;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	699b      	ldr	r3, [r3, #24]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	61da      	str	r2, [r3, #28]
 800edbe:	e003      	b.n	800edc8 <load_descriptor_values+0x28c>
        }
        else
        {
            iter->pData = iter->pField;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	699a      	ldr	r2, [r3, #24]
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	7d9b      	ldrb	r3, [r3, #22]
 800edcc:	f003 030f 	and.w	r3, r3, #15
 800edd0:	2b08      	cmp	r3, #8
 800edd2:	d005      	beq.n	800ede0 <load_descriptor_values+0x2a4>
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	7d9b      	ldrb	r3, [r3, #22]
 800edd8:	f003 030f 	and.w	r3, r3, #15
 800eddc:	2b09      	cmp	r3, #9
 800edde:	d10a      	bne.n	800edf6 <load_descriptor_values+0x2ba>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	685a      	ldr	r2, [r3, #4]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	89db      	ldrh	r3, [r3, #14]
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	4413      	add	r3, r2
 800edee:	681a      	ldr	r2, [r3, #0]
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	625a      	str	r2, [r3, #36]	; 0x24
 800edf4:	e002      	b.n	800edfc <load_descriptor_values+0x2c0>
    }
    else
    {
        iter->submsg_desc = NULL;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 800edfc:	2301      	movs	r3, #1
}
 800edfe:	4618      	mov	r0, r3
 800ee00:	373c      	adds	r7, #60	; 0x3c
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop

0800ee0c <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800ee0c:	b480      	push	{r7}
 800ee0e:	b085      	sub	sp, #20
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
    iter->index++;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	891b      	ldrh	r3, [r3, #8]
 800ee18:	3301      	adds	r3, #1
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	891a      	ldrh	r2, [r3, #8]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	8a1b      	ldrh	r3, [r3, #16]
 800ee2a:	429a      	cmp	r2, r3
 800ee2c:	d30c      	bcc.n	800ee48 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	2200      	movs	r2, #0
 800ee32:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2200      	movs	r2, #0
 800ee38:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2200      	movs	r2, #0
 800ee3e:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	819a      	strh	r2, [r3, #12]
 800ee46:	e03c      	b.n	800eec2 <advance_iterator+0xb6>
         * All field info formats have the following fields:
         * - lowest 2 bits tell the amount of words in the descriptor (2^n words)
         * - bits 2..7 give the lowest bits of tag number.
         * - bits 8..15 give the field type.
         */
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	681a      	ldr	r2, [r3, #0]
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	895b      	ldrh	r3, [r3, #10]
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	681b      	ldr	r3, [r3, #0]
 800ee58:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	0a1b      	lsrs	r3, r3, #8
 800ee5e:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	f003 0303 	and.w	r3, r3, #3
 800ee66:	2201      	movs	r2, #1
 800ee68:	fa02 f303 	lsl.w	r3, r2, r3
 800ee6c:	813b      	strh	r3, [r7, #8]

        /* Add to fields.
         * The cast to pb_size_t is needed to avoid -Wconversion warning.
         * Because the data is is constants from generator, there is no danger of overflow.
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	895a      	ldrh	r2, [r3, #10]
 800ee72:	893b      	ldrh	r3, [r7, #8]
 800ee74:	4413      	add	r3, r2
 800ee76:	b29a      	uxth	r2, r3
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	899a      	ldrh	r2, [r3, #12]
 800ee80:	7afb      	ldrb	r3, [r7, #11]
 800ee82:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	bf0c      	ite	eq
 800ee8a:	2301      	moveq	r3, #1
 800ee8c:	2300      	movne	r3, #0
 800ee8e:	b2db      	uxtb	r3, r3
 800ee90:	b29b      	uxth	r3, r3
 800ee92:	4413      	add	r3, r2
 800ee94:	b29a      	uxth	r2, r3
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	89da      	ldrh	r2, [r3, #14]
 800ee9e:	7afb      	ldrb	r3, [r7, #11]
 800eea0:	f003 030f 	and.w	r3, r3, #15
 800eea4:	2b08      	cmp	r3, #8
 800eea6:	d004      	beq.n	800eeb2 <advance_iterator+0xa6>
 800eea8:	7afb      	ldrb	r3, [r7, #11]
 800eeaa:	f003 030f 	and.w	r3, r3, #15
 800eeae:	2b09      	cmp	r3, #9
 800eeb0:	d101      	bne.n	800eeb6 <advance_iterator+0xaa>
 800eeb2:	2301      	movs	r3, #1
 800eeb4:	e000      	b.n	800eeb8 <advance_iterator+0xac>
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	4413      	add	r3, r2
 800eebc:	b29a      	uxth	r2, r3
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	81da      	strh	r2, [r3, #14]
    }
}
 800eec2:	3714      	adds	r7, #20
 800eec4:	46bd      	mov	sp, r7
 800eec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeca:	4770      	bx	lr

0800eecc <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b084      	sub	sp, #16
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	60f8      	str	r0, [r7, #12]
 800eed4:	60b9      	str	r1, [r7, #8]
 800eed6:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800eed8:	68f8      	ldr	r0, [r7, #12]
 800eeda:	2100      	movs	r1, #0
 800eedc:	2228      	movs	r2, #40	; 0x28
 800eede:	f002 feb4 	bl	8011c4a <memset>

    iter->descriptor = desc;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	68ba      	ldr	r2, [r7, #8]
 800eee6:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	687a      	ldr	r2, [r7, #4]
 800eeec:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f7ff fe24 	bl	800eb3c <load_descriptor_values>
 800eef4:	4603      	mov	r3, r0
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	bd80      	pop	{r7, pc}
 800eefe:	bf00      	nop

0800ef00 <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b086      	sub	sp, #24
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800ef0a:	683b      	ldr	r3, [r7, #0]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	689b      	ldr	r3, [r3, #8]
 800ef10:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	0a1b      	lsrs	r3, r3, #8
 800ef1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ef22:	2b80      	cmp	r3, #128	; 0x80
 800ef24:	d109      	bne.n	800ef3a <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800ef26:	683b      	ldr	r3, [r7, #0]
 800ef28:	3304      	adds	r3, #4
 800ef2a:	6878      	ldr	r0, [r7, #4]
 800ef2c:	6939      	ldr	r1, [r7, #16]
 800ef2e:	461a      	mov	r2, r3
 800ef30:	f7ff ffcc 	bl	800eecc <pb_field_iter_begin>
 800ef34:	4603      	mov	r3, r0
 800ef36:	75fb      	strb	r3, [r7, #23]
 800ef38:	e008      	b.n	800ef4c <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	685b      	ldr	r3, [r3, #4]
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	6939      	ldr	r1, [r7, #16]
 800ef42:	461a      	mov	r2, r3
 800ef44:	f7ff ffc2 	bl	800eecc <pb_field_iter_begin>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	f103 020c 	add.w	r2, r3, #12
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	621a      	str	r2, [r3, #32]
    return status;
 800ef56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3718      	adds	r7, #24
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}

0800ef60 <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b082      	sub	sp, #8
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800ef68:	6878      	ldr	r0, [r7, #4]
 800ef6a:	f7ff ff4f 	bl	800ee0c <advance_iterator>
    (void)load_descriptor_values(iter);
 800ef6e:	6878      	ldr	r0, [r7, #4]
 800ef70:	f7ff fde4 	bl	800eb3c <load_descriptor_values>
    return iter->index != 0;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	891b      	ldrh	r3, [r3, #8]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	bf14      	ite	ne
 800ef7c:	2301      	movne	r3, #1
 800ef7e:	2300      	moveq	r3, #0
 800ef80:	b2db      	uxtb	r3, r3
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3708      	adds	r7, #8
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop

0800ef8c <pb_const_cast>:
        return false;
    }
}

static void *pb_const_cast(const void *p)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b085      	sub	sp, #20
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800ef98:	68fb      	ldr	r3, [r7, #12]
}
 800ef9a:	4618      	mov	r0, r3
 800ef9c:	3714      	adds	r7, #20
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa4:	4770      	bx	lr
 800efa6:	bf00      	nop

0800efa8 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b084      	sub	sp, #16
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	60b9      	str	r1, [r7, #8]
 800efb2:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 800efb4:	6878      	ldr	r0, [r7, #4]
 800efb6:	f7ff ffe9 	bl	800ef8c <pb_const_cast>
 800efba:	4603      	mov	r3, r0
 800efbc:	68f8      	ldr	r0, [r7, #12]
 800efbe:	68b9      	ldr	r1, [r7, #8]
 800efc0:	461a      	mov	r2, r3
 800efc2:	f7ff ff83 	bl	800eecc <pb_field_iter_begin>
 800efc6:	4603      	mov	r3, r0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3710      	adds	r7, #16
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}

0800efd0 <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800efda:	6838      	ldr	r0, [r7, #0]
 800efdc:	f7ff ffd6 	bl	800ef8c <pb_const_cast>
 800efe0:	4603      	mov	r3, r0
 800efe2:	6878      	ldr	r0, [r7, #4]
 800efe4:	4619      	mov	r1, r3
 800efe6:	f7ff ff8b 	bl	800ef00 <pb_field_iter_begin_extension>
 800efea:	4603      	mov	r3, r0
}
 800efec:	4618      	mov	r0, r3
 800efee:	3708      	adds	r7, #8
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd80      	pop	{r7, pc}

0800eff4 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b086      	sub	sp, #24
 800eff8:	af00      	add	r7, sp, #0
 800effa:	60f8      	str	r0, [r7, #12]
 800effc:	60b9      	str	r1, [r7, #8]
 800effe:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	8a5b      	ldrh	r3, [r3, #18]
 800f004:	2b08      	cmp	r3, #8
 800f006:	d125      	bne.n	800f054 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	69db      	ldr	r3, [r3, #28]
 800f00c:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 800f00e:	697b      	ldr	r3, [r7, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d01f      	beq.n	800f054 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d00c      	beq.n	800f034 <pb_default_field_callback+0x40>
 800f01a:	697b      	ldr	r3, [r7, #20]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d008      	beq.n	800f034 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 800f022:	697b      	ldr	r3, [r7, #20]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	697a      	ldr	r2, [r7, #20]
 800f028:	3204      	adds	r2, #4
 800f02a:	68f8      	ldr	r0, [r7, #12]
 800f02c:	6879      	ldr	r1, [r7, #4]
 800f02e:	4798      	blx	r3
 800f030:	4603      	mov	r3, r0
 800f032:	e010      	b.n	800f056 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800f034:	68bb      	ldr	r3, [r7, #8]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d00c      	beq.n	800f054 <pb_default_field_callback+0x60>
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d008      	beq.n	800f054 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	697a      	ldr	r2, [r7, #20]
 800f048:	3204      	adds	r2, #4
 800f04a:	68b8      	ldr	r0, [r7, #8]
 800f04c:	6879      	ldr	r1, [r7, #4]
 800f04e:	4798      	blx	r3
 800f050:	4603      	mov	r3, r0
 800f052:	e000      	b.n	800f056 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800f054:	2301      	movs	r3, #1

}
 800f056:	4618      	mov	r0, r3
 800f058:	3718      	adds	r7, #24
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
 800f05e:	bf00      	nop

0800f060 <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b086      	sub	sp, #24
 800f064:	af00      	add	r7, sp, #0
 800f066:	60f8      	str	r0, [r7, #12]
 800f068:	60b9      	str	r1, [r7, #8]
 800f06a:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800f06c:	68fb      	ldr	r3, [r7, #12]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800f072:	697a      	ldr	r2, [r7, #20]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	441a      	add	r2, r3
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800f07c:	6978      	ldr	r0, [r7, #20]
 800f07e:	68b9      	ldr	r1, [r7, #8]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	f002 fdd7 	bl	8011c34 <memcpy>
    
    return true;
 800f086:	2301      	movs	r3, #1
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3718      	adds	r7, #24
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800f090:	b4b0      	push	{r4, r5, r7}
 800f092:	b08b      	sub	sp, #44	; 0x2c
 800f094:	af00      	add	r7, sp, #0
 800f096:	60f8      	str	r0, [r7, #12]
 800f098:	60b9      	str	r1, [r7, #8]
 800f09a:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800f09c:	4b0b      	ldr	r3, [pc, #44]	; (800f0cc <pb_ostream_from_buffer+0x3c>)
 800f09e:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800f0a8:	2300      	movs	r3, #0
 800f0aa:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800f0ac:	2300      	movs	r3, #0
 800f0ae:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	461d      	mov	r5, r3
 800f0b4:	f107 0414 	add.w	r4, r7, #20
 800f0b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f0ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f0bc:	6823      	ldr	r3, [r4, #0]
 800f0be:	602b      	str	r3, [r5, #0]
}
 800f0c0:	68f8      	ldr	r0, [r7, #12]
 800f0c2:	372c      	adds	r7, #44	; 0x2c
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bcb0      	pop	{r4, r5, r7}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	0800f061 	.word	0x0800f061

0800f0d0 <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b084      	sub	sp, #16
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	60f8      	str	r0, [r7, #12]
 800f0d8:	60b9      	str	r1, [r7, #8]
 800f0da:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	d037      	beq.n	800f152 <pb_write+0x82>
 800f0e2:	68fb      	ldr	r3, [r7, #12]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d033      	beq.n	800f152 <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	68da      	ldr	r2, [r3, #12]
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	441a      	add	r2, r3
 800f0f2:	68fb      	ldr	r3, [r7, #12]
 800f0f4:	68db      	ldr	r3, [r3, #12]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	d307      	bcc.n	800f10a <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	68da      	ldr	r2, [r3, #12]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	441a      	add	r2, r3
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	689b      	ldr	r3, [r3, #8]

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
    if (count > 0 && stream->callback != NULL)
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800f106:	429a      	cmp	r2, r3
 800f108:	d90b      	bls.n	800f122 <pb_write+0x52>
            stream->bytes_written + count > stream->max_size)
        {
            PB_RETURN_ERROR(stream, "stream full");
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d002      	beq.n	800f118 <pb_write+0x48>
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	691b      	ldr	r3, [r3, #16]
 800f116:	e000      	b.n	800f11a <pb_write+0x4a>
 800f118:	4b13      	ldr	r3, [pc, #76]	; (800f168 <pb_write+0x98>)
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	6113      	str	r3, [r2, #16]
 800f11e:	2300      	movs	r3, #0
 800f120:	e01e      	b.n	800f160 <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800f122:	68fb      	ldr	r3, [r7, #12]
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	68b9      	ldr	r1, [r7, #8]
 800f12a:	687a      	ldr	r2, [r7, #4]
 800f12c:	4798      	blx	r3
 800f12e:	4603      	mov	r3, r0
 800f130:	f083 0301 	eor.w	r3, r3, #1
 800f134:	b2db      	uxtb	r3, r3
 800f136:	2b00      	cmp	r3, #0
 800f138:	d00b      	beq.n	800f152 <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	691b      	ldr	r3, [r3, #16]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d002      	beq.n	800f148 <pb_write+0x78>
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	691b      	ldr	r3, [r3, #16]
 800f146:	e000      	b.n	800f14a <pb_write+0x7a>
 800f148:	4b08      	ldr	r3, [pc, #32]	; (800f16c <pb_write+0x9c>)
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	6113      	str	r3, [r2, #16]
 800f14e:	2300      	movs	r3, #0
 800f150:	e006      	b.n	800f160 <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	68da      	ldr	r2, [r3, #12]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	441a      	add	r2, r3
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	60da      	str	r2, [r3, #12]
    return true;
 800f15e:	2301      	movs	r3, #1
}
 800f160:	4618      	mov	r0, r3
 800f162:	3710      	adds	r7, #16
 800f164:	46bd      	mov	sp, r7
 800f166:	bd80      	pop	{r7, pc}
 800f168:	0801459c 	.word	0x0801459c
 800f16c:	080145a8 	.word	0x080145a8

0800f170 <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800f17c:	2300      	movs	r3, #0
 800f17e:	60fb      	str	r3, [r7, #12]
 800f180:	e00a      	b.n	800f198 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800f182:	68ba      	ldr	r2, [r7, #8]
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	4413      	add	r3, r2
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <safe_read_bool+0x22>
            return true;
 800f18e:	2301      	movs	r3, #1
 800f190:	e006      	b.n	800f1a0 <safe_read_bool+0x30>
 */
static bool safe_read_bool(const void *pSize)
{
    const char *p = (const char *)pSize;
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	3301      	adds	r3, #1
 800f196:	60fb      	str	r3, [r7, #12]
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	2b00      	cmp	r3, #0
 800f19c:	d0f1      	beq.n	800f182 <safe_read_bool+0x12>
    {
        if (p[i] != 0)
            return true;
    }
    return false;
 800f19e:	2300      	movs	r3, #0
}
 800f1a0:	4618      	mov	r0, r3
 800f1a2:	3714      	adds	r7, #20
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1aa:	4770      	bx	lr

0800f1ac <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800f1ac:	b580      	push	{r7, lr}
 800f1ae:	b08c      	sub	sp, #48	; 0x30
 800f1b0:	af00      	add	r7, sp, #0
 800f1b2:	6078      	str	r0, [r7, #4]
 800f1b4:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800f1b6:	683b      	ldr	r3, [r7, #0]
 800f1b8:	6a1b      	ldr	r3, [r3, #32]
 800f1ba:	881b      	ldrh	r3, [r3, #0]
 800f1bc:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 800f1be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d101      	bne.n	800f1c8 <encode_array+0x1c>
        return true;
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	e13e      	b.n	800f446 <encode_array+0x29a>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	7d9b      	ldrb	r3, [r3, #22]
 800f1cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f1d0:	2b80      	cmp	r3, #128	; 0x80
 800f1d2:	d010      	beq.n	800f1f6 <encode_array+0x4a>
 800f1d4:	683b      	ldr	r3, [r7, #0]
 800f1d6:	8a9b      	ldrh	r3, [r3, #20]
 800f1d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f1da:	429a      	cmp	r2, r3
 800f1dc:	d90b      	bls.n	800f1f6 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d002      	beq.n	800f1ec <encode_array+0x40>
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	691b      	ldr	r3, [r3, #16]
 800f1ea:	e000      	b.n	800f1ee <encode_array+0x42>
 800f1ec:	4b98      	ldr	r3, [pc, #608]	; (800f450 <encode_array+0x2a4>)
 800f1ee:	687a      	ldr	r2, [r7, #4]
 800f1f0:	6113      	str	r3, [r2, #16]
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	e127      	b.n	800f446 <encode_array+0x29a>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800f1f6:	683b      	ldr	r3, [r7, #0]
 800f1f8:	7d9b      	ldrb	r3, [r3, #22]
 800f1fa:	f003 030f 	and.w	r3, r3, #15
 800f1fe:	2b05      	cmp	r3, #5
 800f200:	f200 80b4 	bhi.w	800f36c <encode_array+0x1c0>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	8a1b      	ldrh	r3, [r3, #16]
 800f208:	6878      	ldr	r0, [r7, #4]
 800f20a:	2102      	movs	r1, #2
 800f20c:	461a      	mov	r2, r3
 800f20e:	f000 fcdf 	bl	800fbd0 <pb_encode_tag>
 800f212:	4603      	mov	r3, r0
 800f214:	f083 0301 	eor.w	r3, r3, #1
 800f218:	b2db      	uxtb	r3, r3
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d001      	beq.n	800f222 <encode_array+0x76>
            return false;
 800f21e:	2300      	movs	r3, #0
 800f220:	e111      	b.n	800f446 <encode_array+0x29a>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800f222:	683b      	ldr	r3, [r7, #0]
 800f224:	7d9b      	ldrb	r3, [r3, #22]
 800f226:	f003 030f 	and.w	r3, r3, #15
 800f22a:	2b04      	cmp	r3, #4
 800f22c:	d103      	bne.n	800f236 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800f22e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	62bb      	str	r3, [r7, #40]	; 0x28
 800f234:	e049      	b.n	800f2ca <encode_array+0x11e>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800f236:	683b      	ldr	r3, [r7, #0]
 800f238:	7d9b      	ldrb	r3, [r3, #22]
 800f23a:	f003 030f 	and.w	r3, r3, #15
 800f23e:	2b05      	cmp	r3, #5
 800f240:	d103      	bne.n	800f24a <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800f242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f244:	00db      	lsls	r3, r3, #3
 800f246:	62bb      	str	r3, [r7, #40]	; 0x28
 800f248:	e03f      	b.n	800f2ca <encode_array+0x11e>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800f24a:	2300      	movs	r3, #0
 800f24c:	60bb      	str	r3, [r7, #8]
 800f24e:	2300      	movs	r3, #0
 800f250:	60fb      	str	r3, [r7, #12]
 800f252:	2300      	movs	r3, #0
 800f254:	613b      	str	r3, [r7, #16]
 800f256:	2300      	movs	r3, #0
 800f258:	617b      	str	r3, [r7, #20]
 800f25a:	2300      	movs	r3, #0
 800f25c:	61bb      	str	r3, [r7, #24]
            void *pData_orig = field->pData;
 800f25e:	683b      	ldr	r3, [r7, #0]
 800f260:	69db      	ldr	r3, [r3, #28]
 800f262:	623b      	str	r3, [r7, #32]
            for (i = 0; i < count; i++)
 800f264:	2300      	movs	r3, #0
 800f266:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f268:	e026      	b.n	800f2b8 <encode_array+0x10c>
            {
                if (!pb_enc_varint(&sizestream, field))
 800f26a:	f107 0308 	add.w	r3, r7, #8
 800f26e:	4618      	mov	r0, r3
 800f270:	6839      	ldr	r1, [r7, #0]
 800f272:	f000 fde3 	bl	800fe3c <pb_enc_varint>
 800f276:	4603      	mov	r3, r0
 800f278:	f083 0301 	eor.w	r3, r3, #1
 800f27c:	b2db      	uxtb	r3, r3
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d010      	beq.n	800f2a4 <encode_array+0xf8>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800f282:	687b      	ldr	r3, [r7, #4]
 800f284:	691b      	ldr	r3, [r3, #16]
 800f286:	2b00      	cmp	r3, #0
 800f288:	d002      	beq.n	800f290 <encode_array+0xe4>
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	691b      	ldr	r3, [r3, #16]
 800f28e:	e005      	b.n	800f29c <encode_array+0xf0>
 800f290:	69bb      	ldr	r3, [r7, #24]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d001      	beq.n	800f29a <encode_array+0xee>
 800f296:	69bb      	ldr	r3, [r7, #24]
 800f298:	e000      	b.n	800f29c <encode_array+0xf0>
 800f29a:	4b6e      	ldr	r3, [pc, #440]	; (800f454 <encode_array+0x2a8>)
 800f29c:	687a      	ldr	r2, [r7, #4]
 800f29e:	6113      	str	r3, [r2, #16]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	e0d0      	b.n	800f446 <encode_array+0x29a>
                field->pData = (char*)field->pData + field->data_size;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	69db      	ldr	r3, [r3, #28]
 800f2a8:	683a      	ldr	r2, [r7, #0]
 800f2aa:	8a52      	ldrh	r2, [r2, #18]
 800f2ac:	441a      	add	r2, r3
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	61da      	str	r2, [r3, #28]
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
            void *pData_orig = field->pData;
            for (i = 0; i < count; i++)
 800f2b2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f2b4:	3301      	adds	r3, #1
 800f2b6:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f2b8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f2ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d3d4      	bcc.n	800f26a <encode_array+0xbe>
            {
                if (!pb_enc_varint(&sizestream, field))
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
                field->pData = (char*)field->pData + field->data_size;
            }
            field->pData = pData_orig;
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	6a3a      	ldr	r2, [r7, #32]
 800f2c4:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f2cc:	461a      	mov	r2, r3
 800f2ce:	f04f 0300 	mov.w	r3, #0
 800f2d2:	6878      	ldr	r0, [r7, #4]
 800f2d4:	f000 fc00 	bl	800fad8 <pb_encode_varint>
 800f2d8:	4603      	mov	r3, r0
 800f2da:	f083 0301 	eor.w	r3, r3, #1
 800f2de:	b2db      	uxtb	r3, r3
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <encode_array+0x13c>
            return false;
 800f2e4:	2300      	movs	r3, #0
 800f2e6:	e0ae      	b.n	800f446 <encode_array+0x29a>
        
        if (stream->callback == NULL)
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	681b      	ldr	r3, [r3, #0]
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d106      	bne.n	800f2fe <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800f2f0:	6878      	ldr	r0, [r7, #4]
 800f2f2:	2100      	movs	r1, #0
 800f2f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f2f6:	f7ff feeb 	bl	800f0d0 <pb_write>
 800f2fa:	4603      	mov	r3, r0
 800f2fc:	e0a3      	b.n	800f446 <encode_array+0x29a>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800f2fe:	2300      	movs	r3, #0
 800f300:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f302:	e02e      	b.n	800f362 <encode_array+0x1b6>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	7d9b      	ldrb	r3, [r3, #22]
 800f308:	f003 030f 	and.w	r3, r3, #15
 800f30c:	2b04      	cmp	r3, #4
 800f30e:	d005      	beq.n	800f31c <encode_array+0x170>
 800f310:	683b      	ldr	r3, [r7, #0]
 800f312:	7d9b      	ldrb	r3, [r3, #22]
 800f314:	f003 030f 	and.w	r3, r3, #15
 800f318:	2b05      	cmp	r3, #5
 800f31a:	d10c      	bne.n	800f336 <encode_array+0x18a>
            {
                if (!pb_enc_fixed(stream, field))
 800f31c:	6878      	ldr	r0, [r7, #4]
 800f31e:	6839      	ldr	r1, [r7, #0]
 800f320:	f000 fe40 	bl	800ffa4 <pb_enc_fixed>
 800f324:	4603      	mov	r3, r0
 800f326:	f083 0301 	eor.w	r3, r3, #1
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d001      	beq.n	800f334 <encode_array+0x188>
                    return false;
 800f330:	2300      	movs	r3, #0
 800f332:	e088      	b.n	800f446 <encode_array+0x29a>
        /* Write the data */
        for (i = 0; i < count; i++)
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
            {
                if (!pb_enc_fixed(stream, field))
 800f334:	e00b      	b.n	800f34e <encode_array+0x1a2>
                    return false;
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800f336:	6878      	ldr	r0, [r7, #4]
 800f338:	6839      	ldr	r1, [r7, #0]
 800f33a:	f000 fd7f 	bl	800fe3c <pb_enc_varint>
 800f33e:	4603      	mov	r3, r0
 800f340:	f083 0301 	eor.w	r3, r3, #1
 800f344:	b2db      	uxtb	r3, r3
 800f346:	2b00      	cmp	r3, #0
 800f348:	d001      	beq.n	800f34e <encode_array+0x1a2>
                    return false;
 800f34a:	2300      	movs	r3, #0
 800f34c:	e07b      	b.n	800f446 <encode_array+0x29a>
            }

            field->pData = (char*)field->pData + field->data_size;
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	69db      	ldr	r3, [r3, #28]
 800f352:	683a      	ldr	r2, [r7, #0]
 800f354:	8a52      	ldrh	r2, [r2, #18]
 800f356:	441a      	add	r2, r3
 800f358:	683b      	ldr	r3, [r7, #0]
 800f35a:	61da      	str	r2, [r3, #28]
        
        if (stream->callback == NULL)
            return pb_write(stream, NULL, size); /* Just sizing.. */
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800f35c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f35e:	3301      	adds	r3, #1
 800f360:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f362:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f366:	429a      	cmp	r2, r3
 800f368:	d3cc      	bcc.n	800f304 <encode_array+0x158>
 800f36a:	e06b      	b.n	800f444 <encode_array+0x298>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800f36c:	2300      	movs	r3, #0
 800f36e:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f370:	e064      	b.n	800f43c <encode_array+0x290>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	7d9b      	ldrb	r3, [r3, #22]
 800f376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f37a:	2b80      	cmp	r3, #128	; 0x80
 800f37c:	d148      	bne.n	800f410 <encode_array+0x264>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	7d9b      	ldrb	r3, [r3, #22]
 800f382:	f003 030f 	and.w	r3, r3, #15
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800f386:	2b07      	cmp	r3, #7
 800f388:	d005      	beq.n	800f396 <encode_array+0x1ea>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	7d9b      	ldrb	r3, [r3, #22]
 800f38e:	f003 030f 	and.w	r3, r3, #15
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800f392:	2b06      	cmp	r3, #6
 800f394:	d13c      	bne.n	800f410 <encode_array+0x264>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
                bool status;
                void *pData_orig = field->pData;
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	69db      	ldr	r3, [r3, #28]
 800f39a:	61fb      	str	r3, [r7, #28]
                field->pData = *(void* const*)field->pData;
 800f39c:	683b      	ldr	r3, [r7, #0]
 800f39e:	69db      	ldr	r3, [r3, #28]
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800f3a6:	683b      	ldr	r3, [r7, #0]
 800f3a8:	69db      	ldr	r3, [r3, #28]
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d11c      	bne.n	800f3e8 <encode_array+0x23c>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	6839      	ldr	r1, [r7, #0]
 800f3b2:	f000 fc2f 	bl	800fc14 <pb_encode_tag_for_field>
 800f3b6:	4603      	mov	r3, r0
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d00b      	beq.n	800f3d4 <encode_array+0x228>
                             pb_encode_varint(stream, 0);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f04f 0200 	mov.w	r2, #0
 800f3c2:	f04f 0300 	mov.w	r3, #0
 800f3c6:	f000 fb87 	bl	800fad8 <pb_encode_varint>
 800f3ca:	4603      	mov	r3, r0
                field->pData = *(void* const*)field->pData;

                if (!field->pData)
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d001      	beq.n	800f3d4 <encode_array+0x228>
 800f3d0:	2301      	movs	r3, #1
 800f3d2:	e000      	b.n	800f3d6 <encode_array+0x22a>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f3e6:	e006      	b.n	800f3f6 <encode_array+0x24a>
                             pb_encode_varint(stream, 0);
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	6839      	ldr	r1, [r7, #0]
 800f3ec:	f000 f954 	bl	800f698 <encode_basic_field>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	69fa      	ldr	r2, [r7, #28]
 800f3fa:	61da      	str	r2, [r3, #28]

                if (!status)
 800f3fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f400:	f083 0301 	eor.w	r3, r3, #1
 800f404:	b2db      	uxtb	r3, r3
 800f406:	2b00      	cmp	r3, #0
 800f408:	d001      	beq.n	800f40e <encode_array+0x262>
                    return false;
 800f40a:	2300      	movs	r3, #0
 800f40c:	e01b      	b.n	800f446 <encode_array+0x29a>
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
 800f40e:	e00b      	b.n	800f428 <encode_array+0x27c>
                if (!status)
                    return false;
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800f410:	6878      	ldr	r0, [r7, #4]
 800f412:	6839      	ldr	r1, [r7, #0]
 800f414:	f000 f940 	bl	800f698 <encode_basic_field>
 800f418:	4603      	mov	r3, r0
 800f41a:	f083 0301 	eor.w	r3, r3, #1
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	2b00      	cmp	r3, #0
 800f422:	d001      	beq.n	800f428 <encode_array+0x27c>
                    return false;
 800f424:	2300      	movs	r3, #0
 800f426:	e00e      	b.n	800f446 <encode_array+0x29a>
            }
            field->pData = (char*)field->pData + field->data_size;
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	69db      	ldr	r3, [r3, #28]
 800f42c:	683a      	ldr	r2, [r7, #0]
 800f42e:	8a52      	ldrh	r2, [r2, #18]
 800f430:	441a      	add	r2, r3
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	61da      	str	r2, [r3, #28]
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800f436:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f438:	3301      	adds	r3, #1
 800f43a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f43c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f43e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f440:	429a      	cmp	r2, r3
 800f442:	d396      	bcc.n	800f372 <encode_array+0x1c6>
            }
            field->pData = (char*)field->pData + field->data_size;
        }
    }
    
    return true;
 800f444:	2301      	movs	r3, #1
}
 800f446:	4618      	mov	r0, r3
 800f448:	3730      	adds	r7, #48	; 0x30
 800f44a:	46bd      	mov	sp, r7
 800f44c:	bd80      	pop	{r7, pc}
 800f44e:	bf00      	nop
 800f450:	080145b4 	.word	0x080145b4
 800f454:	080145cc 	.word	0x080145cc

0800f458 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b092      	sub	sp, #72	; 0x48
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	7d9b      	ldrb	r3, [r3, #22]
 800f464:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800f468:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f46c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f470:	2b00      	cmp	r3, #0
 800f472:	f040 80cb 	bne.w	800f60c <pb_check_proto3_default_value+0x1b4>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800f476:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f47a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d101      	bne.n	800f486 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800f482:	2300      	movs	r3, #0
 800f484:	e102      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800f486:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f48a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f48e:	2b20      	cmp	r3, #32
 800f490:	d108      	bne.n	800f4a4 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	881b      	ldrh	r3, [r3, #0]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	bf0c      	ite	eq
 800f49c:	2301      	moveq	r3, #1
 800f49e:	2300      	movne	r3, #0
 800f4a0:	b2db      	uxtb	r3, r3
 800f4a2:	e0f3      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800f4a4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f4a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f4ac:	2b30      	cmp	r3, #48	; 0x30
 800f4ae:	d108      	bne.n	800f4c2 <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	bf0c      	ite	eq
 800f4ba:	2301      	moveq	r3, #1
 800f4bc:	2300      	movne	r3, #0
 800f4be:	b2db      	uxtb	r3, r3
 800f4c0:	e0e4      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800f4c2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f4c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f4ca:	2b10      	cmp	r3, #16
 800f4cc:	d115      	bne.n	800f4fa <pb_check_proto3_default_value+0xa2>
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	6a1b      	ldr	r3, [r3, #32]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d011      	beq.n	800f4fa <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	6a1b      	ldr	r3, [r3, #32]
 800f4da:	4618      	mov	r0, r3
 800f4dc:	f7ff fe48 	bl	800f170 <safe_read_bool>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	bf14      	ite	ne
 800f4e6:	2301      	movne	r3, #1
 800f4e8:	2300      	moveq	r3, #0
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	f083 0301 	eor.w	r3, r3, #1
 800f4f0:	b2db      	uxtb	r3, r3
 800f4f2:	f003 0301 	and.w	r3, r3, #1
 800f4f6:	b2db      	uxtb	r3, r3
 800f4f8:	e0c8      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->default_value)
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	689b      	ldr	r3, [r3, #8]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d001      	beq.n	800f508 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800f504:	2300      	movs	r3, #0
 800f506:	e0c1      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800f508:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f50c:	f003 030f 	and.w	r3, r3, #15
 800f510:	2b05      	cmp	r3, #5
 800f512:	d81c      	bhi.n	800f54e <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	69db      	ldr	r3, [r3, #28]
 800f518:	643b      	str	r3, [r7, #64]	; 0x40
            for (i = 0; i < field->data_size; i++)
 800f51a:	2300      	movs	r3, #0
 800f51c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f520:	e00d      	b.n	800f53e <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 800f522:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f526:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f528:	4413      	add	r3, r2
 800f52a:	781b      	ldrb	r3, [r3, #0]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d001      	beq.n	800f534 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 800f530:	2300      	movs	r3, #0
 800f532:	e0ab      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
            for (i = 0; i < field->data_size; i++)
 800f534:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f538:	3301      	adds	r3, #1
 800f53a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	8a5b      	ldrh	r3, [r3, #18]
 800f542:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f546:	429a      	cmp	r2, r3
 800f548:	d3eb      	bcc.n	800f522 <pb_check_proto3_default_value+0xca>
                {
                    return false;
                }
            }

            return true;
 800f54a:	2301      	movs	r3, #1
 800f54c:	e09e      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800f54e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f552:	f003 030f 	and.w	r3, r3, #15
 800f556:	2b06      	cmp	r3, #6
 800f558:	d10a      	bne.n	800f570 <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	69db      	ldr	r3, [r3, #28]
 800f55e:	63fb      	str	r3, [r7, #60]	; 0x3c
            return bytes->size == 0;
 800f560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f562:	881b      	ldrh	r3, [r3, #0]
 800f564:	2b00      	cmp	r3, #0
 800f566:	bf0c      	ite	eq
 800f568:	2301      	moveq	r3, #1
 800f56a:	2300      	movne	r3, #0
 800f56c:	b2db      	uxtb	r3, r3
 800f56e:	e08d      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800f570:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f574:	f003 030f 	and.w	r3, r3, #15
 800f578:	2b07      	cmp	r3, #7
 800f57a:	d108      	bne.n	800f58e <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	69db      	ldr	r3, [r3, #28]
 800f580:	781b      	ldrb	r3, [r3, #0]
 800f582:	2b00      	cmp	r3, #0
 800f584:	bf0c      	ite	eq
 800f586:	2301      	moveq	r3, #1
 800f588:	2300      	movne	r3, #0
 800f58a:	b2db      	uxtb	r3, r3
 800f58c:	e07e      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800f58e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f592:	f003 030f 	and.w	r3, r3, #15
 800f596:	2b0b      	cmp	r3, #11
 800f598:	d107      	bne.n	800f5aa <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	8a5b      	ldrh	r3, [r3, #18]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	bf0c      	ite	eq
 800f5a2:	2301      	moveq	r3, #1
 800f5a4:	2300      	movne	r3, #0
 800f5a6:	b2db      	uxtb	r3, r3
 800f5a8:	e070      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800f5aa:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f5ae:	f003 030f 	and.w	r3, r3, #15
 800f5b2:	2b08      	cmp	r3, #8
 800f5b4:	d005      	beq.n	800f5c2 <pb_check_proto3_default_value+0x16a>
 800f5b6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f5ba:	f003 030f 	and.w	r3, r3, #15
 800f5be:	2b09      	cmp	r3, #9
 800f5c0:	d163      	bne.n	800f68a <pb_check_proto3_default_value+0x232>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	69db      	ldr	r3, [r3, #28]
 800f5ca:	f107 010c 	add.w	r1, r7, #12
 800f5ce:	4608      	mov	r0, r1
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f7ff fc7a 	bl	800eecc <pb_field_iter_begin>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d014      	beq.n	800f608 <pb_check_proto3_default_value+0x1b0>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800f5de:	f107 030c 	add.w	r3, r7, #12
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f7ff ff38 	bl	800f458 <pb_check_proto3_default_value>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	f083 0301 	eor.w	r3, r3, #1
 800f5ee:	b2db      	uxtb	r3, r3
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d001      	beq.n	800f5f8 <pb_check_proto3_default_value+0x1a0>
                    {
                        return false;
 800f5f4:	2300      	movs	r3, #0
 800f5f6:	e049      	b.n	800f68c <pb_check_proto3_default_value+0x234>
                    }
                } while (pb_field_iter_next(&iter));
 800f5f8:	f107 030c 	add.w	r3, r7, #12
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	f7ff fcaf 	bl	800ef60 <pb_field_iter_next>
 800f602:	4603      	mov	r3, r0
 800f604:	2b00      	cmp	r3, #0
 800f606:	d1ea      	bne.n	800f5de <pb_check_proto3_default_value+0x186>
            }
            return true;
 800f608:	2301      	movs	r3, #1
 800f60a:	e03f      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800f60c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f610:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f614:	2b80      	cmp	r3, #128	; 0x80
 800f616:	d107      	bne.n	800f628 <pb_check_proto3_default_value+0x1d0>
    {
        return field->pData == NULL;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	69db      	ldr	r3, [r3, #28]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	bf0c      	ite	eq
 800f620:	2301      	moveq	r3, #1
 800f622:	2300      	movne	r3, #0
 800f624:	b2db      	uxtb	r3, r3
 800f626:	e031      	b.n	800f68c <pb_check_proto3_default_value+0x234>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800f628:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f62c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f630:	2b40      	cmp	r3, #64	; 0x40
 800f632:	d12a      	bne.n	800f68a <pb_check_proto3_default_value+0x232>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800f634:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f638:	f003 030f 	and.w	r3, r3, #15
 800f63c:	2b0a      	cmp	r3, #10
 800f63e:	d10a      	bne.n	800f656 <pb_check_proto3_default_value+0x1fe>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	69db      	ldr	r3, [r3, #28]
 800f644:	681b      	ldr	r3, [r3, #0]
 800f646:	63bb      	str	r3, [r7, #56]	; 0x38
            return extension == NULL;
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	bf0c      	ite	eq
 800f64e:	2301      	moveq	r3, #1
 800f650:	2300      	movne	r3, #0
 800f652:	b2db      	uxtb	r3, r3
 800f654:	e01a      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	4a0d      	ldr	r2, [pc, #52]	; (800f694 <pb_check_proto3_default_value+0x23c>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d10a      	bne.n	800f678 <pb_check_proto3_default_value+0x220>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	69db      	ldr	r3, [r3, #28]
 800f666:	637b      	str	r3, [r7, #52]	; 0x34
            return pCallback->funcs.encode == NULL;
 800f668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	bf0c      	ite	eq
 800f670:	2301      	moveq	r3, #1
 800f672:	2300      	movne	r3, #0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	e009      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bf0c      	ite	eq
 800f682:	2301      	moveq	r3, #1
 800f684:	2300      	movne	r3, #0
 800f686:	b2db      	uxtb	r3, r3
 800f688:	e000      	b.n	800f68c <pb_check_proto3_default_value+0x234>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800f68a:	2300      	movs	r3, #0
}
 800f68c:	4618      	mov	r0, r3
 800f68e:	3748      	adds	r7, #72	; 0x48
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}
 800f694:	0800eff5 	.word	0x0800eff5

0800f698 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f698:	b580      	push	{r7, lr}
 800f69a:	b082      	sub	sp, #8
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	69db      	ldr	r3, [r3, #28]
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d101      	bne.n	800f6ae <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	e061      	b.n	800f772 <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	6839      	ldr	r1, [r7, #0]
 800f6b2:	f000 faaf 	bl	800fc14 <pb_encode_tag_for_field>
 800f6b6:	4603      	mov	r3, r0
 800f6b8:	f083 0301 	eor.w	r3, r3, #1
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d001      	beq.n	800f6c6 <encode_basic_field+0x2e>
        return false;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	e055      	b.n	800f772 <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	7d9b      	ldrb	r3, [r3, #22]
 800f6ca:	f003 030f 	and.w	r3, r3, #15
 800f6ce:	2b0b      	cmp	r3, #11
 800f6d0:	d844      	bhi.n	800f75c <encode_basic_field+0xc4>
 800f6d2:	a201      	add	r2, pc, #4	; (adr r2, 800f6d8 <encode_basic_field+0x40>)
 800f6d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6d8:	0800f709 	.word	0x0800f709
 800f6dc:	0800f715 	.word	0x0800f715
 800f6e0:	0800f715 	.word	0x0800f715
 800f6e4:	0800f715 	.word	0x0800f715
 800f6e8:	0800f721 	.word	0x0800f721
 800f6ec:	0800f721 	.word	0x0800f721
 800f6f0:	0800f72d 	.word	0x0800f72d
 800f6f4:	0800f739 	.word	0x0800f739
 800f6f8:	0800f745 	.word	0x0800f745
 800f6fc:	0800f745 	.word	0x0800f745
 800f700:	0800f75d 	.word	0x0800f75d
 800f704:	0800f751 	.word	0x0800f751
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800f708:	6878      	ldr	r0, [r7, #4]
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	f000 fb7e 	bl	800fe0c <pb_enc_bool>
 800f710:	4603      	mov	r3, r0
 800f712:	e02e      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800f714:	6878      	ldr	r0, [r7, #4]
 800f716:	6839      	ldr	r1, [r7, #0]
 800f718:	f000 fb90 	bl	800fe3c <pb_enc_varint>
 800f71c:	4603      	mov	r3, r0
 800f71e:	e028      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800f720:	6878      	ldr	r0, [r7, #4]
 800f722:	6839      	ldr	r1, [r7, #0]
 800f724:	f000 fc3e 	bl	800ffa4 <pb_enc_fixed>
 800f728:	4603      	mov	r3, r0
 800f72a:	e022      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800f72c:	6878      	ldr	r0, [r7, #4]
 800f72e:	6839      	ldr	r1, [r7, #0]
 800f730:	f000 fc66 	bl	8010000 <pb_enc_bytes>
 800f734:	4603      	mov	r3, r0
 800f736:	e01c      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	6839      	ldr	r1, [r7, #0]
 800f73c:	f000 fc9e 	bl	801007c <pb_enc_string>
 800f740:	4603      	mov	r3, r0
 800f742:	e016      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	6839      	ldr	r1, [r7, #0]
 800f748:	f000 fcf6 	bl	8010138 <pb_enc_submessage>
 800f74c:	4603      	mov	r3, r0
 800f74e:	e010      	b.n	800f772 <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	6839      	ldr	r1, [r7, #0]
 800f754:	f000 fd36 	bl	80101c4 <pb_enc_fixed_length_bytes>
 800f758:	4603      	mov	r3, r0
 800f75a:	e00a      	b.n	800f772 <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	691b      	ldr	r3, [r3, #16]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d002      	beq.n	800f76a <encode_basic_field+0xd2>
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	691b      	ldr	r3, [r3, #16]
 800f768:	e000      	b.n	800f76c <encode_basic_field+0xd4>
 800f76a:	4b04      	ldr	r3, [pc, #16]	; (800f77c <encode_basic_field+0xe4>)
 800f76c:	687a      	ldr	r2, [r7, #4]
 800f76e:	6113      	str	r3, [r2, #16]
 800f770:	2300      	movs	r3, #0
    }
}
 800f772:	4618      	mov	r0, r3
 800f774:	3708      	adds	r7, #8
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	080145d4 	.word	0x080145d4

0800f780 <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	68db      	ldr	r3, [r3, #12]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d018      	beq.n	800f7c6 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800f794:	683b      	ldr	r3, [r7, #0]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	68db      	ldr	r3, [r3, #12]
 800f79a:	2000      	movs	r0, #0
 800f79c:	6879      	ldr	r1, [r7, #4]
 800f79e:	683a      	ldr	r2, [r7, #0]
 800f7a0:	4798      	blx	r3
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	f083 0301 	eor.w	r3, r3, #1
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00b      	beq.n	800f7c6 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	691b      	ldr	r3, [r3, #16]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <encode_callback_field+0x3c>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	691b      	ldr	r3, [r3, #16]
 800f7ba:	e000      	b.n	800f7be <encode_callback_field+0x3e>
 800f7bc:	4b04      	ldr	r3, [pc, #16]	; (800f7d0 <encode_callback_field+0x50>)
 800f7be:	687a      	ldr	r2, [r7, #4]
 800f7c0:	6113      	str	r3, [r2, #16]
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	e000      	b.n	800f7c8 <encode_callback_field+0x48>
    }
    return true;
 800f7c6:	2301      	movs	r3, #1
}
 800f7c8:	4618      	mov	r0, r3
 800f7ca:	3708      	adds	r7, #8
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	bd80      	pop	{r7, pc}
 800f7d0:	080145e8 	.word	0x080145e8

0800f7d4 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800f7d4:	b580      	push	{r7, lr}
 800f7d6:	b082      	sub	sp, #8
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	6078      	str	r0, [r7, #4]
 800f7dc:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	7d9b      	ldrb	r3, [r3, #22]
 800f7e2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f7e6:	2b30      	cmp	r3, #48	; 0x30
 800f7e8:	d108      	bne.n	800f7fc <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800f7ea:	683b      	ldr	r3, [r7, #0]
 800f7ec:	6a1b      	ldr	r3, [r3, #32]
 800f7ee:	881a      	ldrh	r2, [r3, #0]
 800f7f0:	683b      	ldr	r3, [r7, #0]
 800f7f2:	8a1b      	ldrh	r3, [r3, #16]
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d026      	beq.n	800f846 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800f7f8:	2301      	movs	r3, #1
 800f7fa:	e059      	b.n	800f8b0 <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f7fc:	683b      	ldr	r3, [r7, #0]
 800f7fe:	7d9b      	ldrb	r3, [r3, #22]
 800f800:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f804:	2b10      	cmp	r3, #16
 800f806:	d11e      	bne.n	800f846 <encode_field+0x72>
    {
        if (field->pSize)
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	6a1b      	ldr	r3, [r3, #32]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d00c      	beq.n	800f82a <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800f810:	683b      	ldr	r3, [r7, #0]
 800f812:	6a1b      	ldr	r3, [r3, #32]
 800f814:	4618      	mov	r0, r3
 800f816:	f7ff fcab 	bl	800f170 <safe_read_bool>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f083 0301 	eor.w	r3, r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00f      	beq.n	800f846 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800f826:	2301      	movs	r3, #1
 800f828:	e042      	b.n	800f8b0 <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800f82a:	683b      	ldr	r3, [r7, #0]
 800f82c:	7d9b      	ldrb	r3, [r3, #22]
 800f82e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d107      	bne.n	800f846 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800f836:	6838      	ldr	r0, [r7, #0]
 800f838:	f7ff fe0e 	bl	800f458 <pb_check_proto3_default_value>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <encode_field+0x72>
                return true;
 800f842:	2301      	movs	r3, #1
 800f844:	e034      	b.n	800f8b0 <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800f846:	683b      	ldr	r3, [r7, #0]
 800f848:	69db      	ldr	r3, [r3, #28]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d113      	bne.n	800f876 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800f84e:	683b      	ldr	r3, [r7, #0]
 800f850:	7d9b      	ldrb	r3, [r3, #22]
 800f852:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f856:	2b00      	cmp	r3, #0
 800f858:	d10b      	bne.n	800f872 <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	691b      	ldr	r3, [r3, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d002      	beq.n	800f868 <encode_field+0x94>
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	691b      	ldr	r3, [r3, #16]
 800f866:	e000      	b.n	800f86a <encode_field+0x96>
 800f868:	4b13      	ldr	r3, [pc, #76]	; (800f8b8 <encode_field+0xe4>)
 800f86a:	687a      	ldr	r2, [r7, #4]
 800f86c:	6113      	str	r3, [r2, #16]
 800f86e:	2300      	movs	r3, #0
 800f870:	e01e      	b.n	800f8b0 <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800f872:	2301      	movs	r3, #1
 800f874:	e01c      	b.n	800f8b0 <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800f876:	683b      	ldr	r3, [r7, #0]
 800f878:	7d9b      	ldrb	r3, [r3, #22]
 800f87a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f87e:	2b40      	cmp	r3, #64	; 0x40
 800f880:	d105      	bne.n	800f88e <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800f882:	6878      	ldr	r0, [r7, #4]
 800f884:	6839      	ldr	r1, [r7, #0]
 800f886:	f7ff ff7b 	bl	800f780 <encode_callback_field>
 800f88a:	4603      	mov	r3, r0
 800f88c:	e010      	b.n	800f8b0 <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800f88e:	683b      	ldr	r3, [r7, #0]
 800f890:	7d9b      	ldrb	r3, [r3, #22]
 800f892:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f896:	2b20      	cmp	r3, #32
 800f898:	d105      	bne.n	800f8a6 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800f89a:	6878      	ldr	r0, [r7, #4]
 800f89c:	6839      	ldr	r1, [r7, #0]
 800f89e:	f7ff fc85 	bl	800f1ac <encode_array>
 800f8a2:	4603      	mov	r3, r0
 800f8a4:	e004      	b.n	800f8b0 <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	6839      	ldr	r1, [r7, #0]
 800f8aa:	f7ff fef5 	bl	800f698 <encode_basic_field>
 800f8ae:	4603      	mov	r3, r0
    }
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3708      	adds	r7, #8
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}
 800f8b8:	080145f8 	.word	0x080145f8

0800f8bc <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08c      	sub	sp, #48	; 0x30
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800f8c6:	f107 0308 	add.w	r3, r7, #8
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	6839      	ldr	r1, [r7, #0]
 800f8ce:	f7ff fb7f 	bl	800efd0 <pb_field_iter_begin_extension_const>
 800f8d2:	4603      	mov	r3, r0
 800f8d4:	f083 0301 	eor.w	r3, r3, #1
 800f8d8:	b2db      	uxtb	r3, r3
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	d00b      	beq.n	800f8f6 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	691b      	ldr	r3, [r3, #16]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d002      	beq.n	800f8ec <default_extension_encoder+0x30>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	691b      	ldr	r3, [r3, #16]
 800f8ea:	e000      	b.n	800f8ee <default_extension_encoder+0x32>
 800f8ec:	4b07      	ldr	r3, [pc, #28]	; (800f90c <default_extension_encoder+0x50>)
 800f8ee:	687a      	ldr	r2, [r7, #4]
 800f8f0:	6113      	str	r3, [r2, #16]
 800f8f2:	2300      	movs	r3, #0
 800f8f4:	e006      	b.n	800f904 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800f8f6:	f107 0308 	add.w	r3, r7, #8
 800f8fa:	6878      	ldr	r0, [r7, #4]
 800f8fc:	4619      	mov	r1, r3
 800f8fe:	f7ff ff69 	bl	800f7d4 <encode_field>
 800f902:	4603      	mov	r3, r0
}
 800f904:	4618      	mov	r0, r3
 800f906:	3730      	adds	r7, #48	; 0x30
 800f908:	46bd      	mov	sp, r7
 800f90a:	bd80      	pop	{r7, pc}
 800f90c:	08014610 	.word	0x08014610

0800f910 <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f910:	b580      	push	{r7, lr}
 800f912:	b084      	sub	sp, #16
 800f914:	af00      	add	r7, sp, #0
 800f916:	6078      	str	r0, [r7, #4]
 800f918:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f91a:	683b      	ldr	r3, [r7, #0]
 800f91c:	69db      	ldr	r3, [r3, #28]
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	60fb      	str	r3, [r7, #12]

    while (extension)
 800f922:	e01e      	b.n	800f962 <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	685b      	ldr	r3, [r3, #4]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d008      	beq.n	800f940 <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	6878      	ldr	r0, [r7, #4]
 800f936:	68f9      	ldr	r1, [r7, #12]
 800f938:	4798      	blx	r3
 800f93a:	4603      	mov	r3, r0
 800f93c:	72fb      	strb	r3, [r7, #11]
 800f93e:	e005      	b.n	800f94c <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800f940:	6878      	ldr	r0, [r7, #4]
 800f942:	68f9      	ldr	r1, [r7, #12]
 800f944:	f7ff ffba 	bl	800f8bc <default_extension_encoder>
 800f948:	4603      	mov	r3, r0
 800f94a:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800f94c:	7afb      	ldrb	r3, [r7, #11]
 800f94e:	f083 0301 	eor.w	r3, r3, #1
 800f952:	b2db      	uxtb	r3, r3
 800f954:	2b00      	cmp	r3, #0
 800f956:	d001      	beq.n	800f95c <encode_extension_field+0x4c>
            return false;
 800f958:	2300      	movs	r3, #0
 800f95a:	e006      	b.n	800f96a <encode_extension_field+0x5a>
        
        extension = extension->next;
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	689b      	ldr	r3, [r3, #8]
 800f960:	60fb      	str	r3, [r7, #12]
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;

    while (extension)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d1dd      	bne.n	800f924 <encode_extension_field+0x14>
            return false;
        
        extension = extension->next;
    }
    
    return true;
 800f968:	2301      	movs	r3, #1
}
 800f96a:	4618      	mov	r0, r3
 800f96c:	3710      	adds	r7, #16
 800f96e:	46bd      	mov	sp, r7
 800f970:	bd80      	pop	{r7, pc}
 800f972:	bf00      	nop

0800f974 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f974:	b580      	push	{r7, lr}
 800f976:	b08e      	sub	sp, #56	; 0x38
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800f980:	f107 0310 	add.w	r3, r7, #16
 800f984:	4618      	mov	r0, r3
 800f986:	68b9      	ldr	r1, [r7, #8]
 800f988:	687a      	ldr	r2, [r7, #4]
 800f98a:	f7ff fb0d 	bl	800efa8 <pb_field_iter_begin_const>
 800f98e:	4603      	mov	r3, r0
 800f990:	f083 0301 	eor.w	r3, r3, #1
 800f994:	b2db      	uxtb	r3, r3
 800f996:	2b00      	cmp	r3, #0
 800f998:	d001      	beq.n	800f99e <pb_encode+0x2a>
        return true; /* Empty message type */
 800f99a:	2301      	movs	r3, #1
 800f99c:	e02a      	b.n	800f9f4 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800f99e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f9a2:	f003 030f 	and.w	r3, r3, #15
 800f9a6:	2b0a      	cmp	r3, #10
 800f9a8:	d10d      	bne.n	800f9c6 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800f9aa:	f107 0310 	add.w	r3, r7, #16
 800f9ae:	68f8      	ldr	r0, [r7, #12]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	f7ff ffad 	bl	800f910 <encode_extension_field>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	f083 0301 	eor.w	r3, r3, #1
 800f9bc:	b2db      	uxtb	r3, r3
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d00f      	beq.n	800f9e2 <pb_encode+0x6e>
                return false;
 800f9c2:	2300      	movs	r3, #0
 800f9c4:	e016      	b.n	800f9f4 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800f9c6:	f107 0310 	add.w	r3, r7, #16
 800f9ca:	68f8      	ldr	r0, [r7, #12]
 800f9cc:	4619      	mov	r1, r3
 800f9ce:	f7ff ff01 	bl	800f7d4 <encode_field>
 800f9d2:	4603      	mov	r3, r0
 800f9d4:	f083 0301 	eor.w	r3, r3, #1
 800f9d8:	b2db      	uxtb	r3, r3
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	d001      	beq.n	800f9e2 <pb_encode+0x6e>
                return false;
 800f9de:	2300      	movs	r3, #0
 800f9e0:	e008      	b.n	800f9f4 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800f9e2:	f107 0310 	add.w	r3, r7, #16
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	f7ff faba 	bl	800ef60 <pb_field_iter_next>
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d1d5      	bne.n	800f99e <pb_encode+0x2a>
    
    return true;
 800f9f2:	2301      	movs	r3, #1
}
 800f9f4:	4618      	mov	r0, r3
 800f9f6:	3738      	adds	r7, #56	; 0x38
 800f9f8:	46bd      	mov	sp, r7
 800f9fa:	bd80      	pop	{r7, pc}

0800f9fc <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	60f8      	str	r0, [r7, #12]
 800fa04:	60b9      	str	r1, [r7, #8]
 800fa06:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800fa08:	2300      	movs	r3, #0
 800fa0a:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	b2db      	uxtb	r3, r3
 800fa10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa14:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800fa16:	68bb      	ldr	r3, [r7, #8]
 800fa18:	09db      	lsrs	r3, r3, #7
 800fa1a:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800fa1c:	e014      	b.n	800fa48 <pb_encode_varint_32+0x4c>
    {
        byte |= 0x80;
 800fa1e:	7efb      	ldrb	r3, [r7, #27]
 800fa20:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa24:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 800fa26:	69fb      	ldr	r3, [r7, #28]
 800fa28:	1c5a      	adds	r2, r3, #1
 800fa2a:	61fa      	str	r2, [r7, #28]
 800fa2c:	f107 0220 	add.w	r2, r7, #32
 800fa30:	4413      	add	r3, r2
 800fa32:	7efa      	ldrb	r2, [r7, #27]
 800fa34:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 800fa38:	68bb      	ldr	r3, [r7, #8]
 800fa3a:	b2db      	uxtb	r3, r3
 800fa3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa40:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800fa42:	68bb      	ldr	r3, [r7, #8]
 800fa44:	09db      	lsrs	r3, r3, #7
 800fa46:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
    low >>= 7;

    while (i < 4 && (low != 0 || high != 0))
 800fa48:	69fb      	ldr	r3, [r7, #28]
 800fa4a:	2b03      	cmp	r3, #3
 800fa4c:	d805      	bhi.n	800fa5a <pb_encode_varint_32+0x5e>
 800fa4e:	68bb      	ldr	r3, [r7, #8]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d1e4      	bne.n	800fa1e <pb_encode_varint_32+0x22>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d1e1      	bne.n	800fa1e <pb_encode_varint_32+0x22>
        buffer[i++] = byte;
        byte = (pb_byte_t)(low & 0x7F);
        low >>= 7;
    }

    if (high)
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d025      	beq.n	800faac <pb_encode_varint_32+0xb0>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	b2db      	uxtb	r3, r3
 800fa64:	f003 0307 	and.w	r3, r3, #7
 800fa68:	b2db      	uxtb	r3, r3
 800fa6a:	011b      	lsls	r3, r3, #4
 800fa6c:	b2da      	uxtb	r2, r3
 800fa6e:	7efb      	ldrb	r3, [r7, #27]
 800fa70:	4313      	orrs	r3, r2
 800fa72:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	08db      	lsrs	r3, r3, #3
 800fa78:	607b      	str	r3, [r7, #4]

        while (high)
 800fa7a:	e014      	b.n	800faa6 <pb_encode_varint_32+0xaa>
        {
            byte |= 0x80;
 800fa7c:	7efb      	ldrb	r3, [r7, #27]
 800fa7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa82:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 800fa84:	69fb      	ldr	r3, [r7, #28]
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	61fa      	str	r2, [r7, #28]
 800fa8a:	f107 0220 	add.w	r2, r7, #32
 800fa8e:	4413      	add	r3, r2
 800fa90:	7efa      	ldrb	r2, [r7, #27]
 800fa92:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	b2db      	uxtb	r3, r3
 800fa9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa9e:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	09db      	lsrs	r3, r3, #7
 800faa4:	607b      	str	r3, [r7, #4]
    if (high)
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
        high >>= 3;

        while (high)
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d1e7      	bne.n	800fa7c <pb_encode_varint_32+0x80>
            byte = (pb_byte_t)(high & 0x7F);
            high >>= 7;
        }
    }

    buffer[i++] = byte;
 800faac:	69fb      	ldr	r3, [r7, #28]
 800faae:	1c5a      	adds	r2, r3, #1
 800fab0:	61fa      	str	r2, [r7, #28]
 800fab2:	f107 0220 	add.w	r2, r7, #32
 800fab6:	4413      	add	r3, r2
 800fab8:	7efa      	ldrb	r2, [r7, #27]
 800faba:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800fabe:	f107 0310 	add.w	r3, r7, #16
 800fac2:	68f8      	ldr	r0, [r7, #12]
 800fac4:	4619      	mov	r1, r3
 800fac6:	69fa      	ldr	r2, [r7, #28]
 800fac8:	f7ff fb02 	bl	800f0d0 <pb_write>
 800facc:	4603      	mov	r3, r0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3720      	adds	r7, #32
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
 800fad6:	bf00      	nop

0800fad8 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800fad8:	b5b0      	push	{r4, r5, r7, lr}
 800fada:	b086      	sub	sp, #24
 800fadc:	af00      	add	r7, sp, #0
 800fade:	60f8      	str	r0, [r7, #12]
 800fae0:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800fae4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fae8:	2b00      	cmp	r3, #0
 800faea:	bf08      	it	eq
 800faec:	2a80      	cmpeq	r2, #128	; 0x80
 800faee:	d20a      	bcs.n	800fb06 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800faf0:	783b      	ldrb	r3, [r7, #0]
 800faf2:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800faf4:	f107 0317 	add.w	r3, r7, #23
 800faf8:	68f8      	ldr	r0, [r7, #12]
 800fafa:	4619      	mov	r1, r3
 800fafc:	2201      	movs	r2, #1
 800fafe:	f7ff fae7 	bl	800f0d0 <pb_write>
 800fb02:	4603      	mov	r3, r0
 800fb04:	e00a      	b.n	800fb1c <pb_encode_varint+0x44>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800fb06:	6839      	ldr	r1, [r7, #0]
 800fb08:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb0c:	001c      	movs	r4, r3
 800fb0e:	2500      	movs	r5, #0
 800fb10:	4623      	mov	r3, r4
 800fb12:	68f8      	ldr	r0, [r7, #12]
 800fb14:	461a      	mov	r2, r3
 800fb16:	f7ff ff71 	bl	800f9fc <pb_encode_varint_32>
 800fb1a:	4603      	mov	r3, r0
#endif
    }
}
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	3718      	adds	r7, #24
 800fb20:	46bd      	mov	sp, r7
 800fb22:	bdb0      	pop	{r4, r5, r7, pc}

0800fb24 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b088      	sub	sp, #32
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	60f8      	str	r0, [r7, #12]
 800fb2c:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800fb30:	f04f 32ff 	mov.w	r2, #4294967295
 800fb34:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800fb38:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (value < 0)
 800fb3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb40:	2a00      	cmp	r2, #0
 800fb42:	f173 0300 	sbcs.w	r3, r3, #0
 800fb46:	da11      	bge.n	800fb6c <pb_encode_svarint+0x48>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800fb48:	e9d7 0100 	ldrd	r0, r1, [r7]
 800fb4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fb50:	ea02 0200 	and.w	r2, r2, r0
 800fb54:	ea03 0301 	and.w	r3, r3, r1
 800fb58:	1892      	adds	r2, r2, r2
 800fb5a:	eb43 0303 	adc.w	r3, r3, r3
 800fb5e:	ea6f 0202 	mvn.w	r2, r2
 800fb62:	ea6f 0303 	mvn.w	r3, r3
 800fb66:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800fb6a:	e006      	b.n	800fb7a <pb_encode_svarint+0x56>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800fb6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb70:	1892      	adds	r2, r2, r2
 800fb72:	eb43 0303 	adc.w	r3, r3, r3
 800fb76:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    return pb_encode_varint(stream, zigzagged);
 800fb7a:	68f8      	ldr	r0, [r7, #12]
 800fb7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800fb80:	f7ff ffaa 	bl	800fad8 <pb_encode_varint>
 800fb84:	4603      	mov	r3, r0
}
 800fb86:	4618      	mov	r0, r3
 800fb88:	3720      	adds	r7, #32
 800fb8a:	46bd      	mov	sp, r7
 800fb8c:	bd80      	pop	{r7, pc}
 800fb8e:	bf00      	nop

0800fb90 <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	6839      	ldr	r1, [r7, #0]
 800fb9e:	2204      	movs	r2, #4
 800fba0:	f7ff fa96 	bl	800f0d0 <pb_write>
 800fba4:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800fba6:	4618      	mov	r0, r3
 800fba8:	3708      	adds	r7, #8
 800fbaa:	46bd      	mov	sp, r7
 800fbac:	bd80      	pop	{r7, pc}
 800fbae:	bf00      	nop

0800fbb0 <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800fbb0:	b580      	push	{r7, lr}
 800fbb2:	b082      	sub	sp, #8
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	6839      	ldr	r1, [r7, #0]
 800fbbe:	2208      	movs	r2, #8
 800fbc0:	f7ff fa86 	bl	800f0d0 <pb_write>
 800fbc4:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800fbc6:	4618      	mov	r0, r3
 800fbc8:	3708      	adds	r7, #8
 800fbca:	46bd      	mov	sp, r7
 800fbcc:	bd80      	pop	{r7, pc}
 800fbce:	bf00      	nop

0800fbd0 <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800fbd0:	b5b0      	push	{r4, r5, r7, lr}
 800fbd2:	b086      	sub	sp, #24
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60f8      	str	r0, [r7, #12]
 800fbd8:	460b      	mov	r3, r1
 800fbda:	607a      	str	r2, [r7, #4]
 800fbdc:	72fb      	strb	r3, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	461a      	mov	r2, r3
 800fbe2:	f04f 0300 	mov.w	r3, #0
 800fbe6:	00dd      	lsls	r5, r3, #3
 800fbe8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800fbec:	00d4      	lsls	r4, r2, #3
 800fbee:	7afa      	ldrb	r2, [r7, #11]
 800fbf0:	f04f 0300 	mov.w	r3, #0
 800fbf4:	ea42 0204 	orr.w	r2, r2, r4
 800fbf8:	ea43 0305 	orr.w	r3, r3, r5
 800fbfc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return pb_encode_varint(stream, tag);
 800fc00:	68f8      	ldr	r0, [r7, #12]
 800fc02:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fc06:	f7ff ff67 	bl	800fad8 <pb_encode_varint>
 800fc0a:	4603      	mov	r3, r0
}
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	3718      	adds	r7, #24
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bdb0      	pop	{r4, r5, r7, pc}

0800fc14 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800fc1e:	683b      	ldr	r3, [r7, #0]
 800fc20:	7d9b      	ldrb	r3, [r3, #22]
 800fc22:	f003 030f 	and.w	r3, r3, #15
 800fc26:	2b0b      	cmp	r3, #11
 800fc28:	d826      	bhi.n	800fc78 <pb_encode_tag_for_field+0x64>
 800fc2a:	a201      	add	r2, pc, #4	; (adr r2, 800fc30 <pb_encode_tag_for_field+0x1c>)
 800fc2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc30:	0800fc61 	.word	0x0800fc61
 800fc34:	0800fc61 	.word	0x0800fc61
 800fc38:	0800fc61 	.word	0x0800fc61
 800fc3c:	0800fc61 	.word	0x0800fc61
 800fc40:	0800fc67 	.word	0x0800fc67
 800fc44:	0800fc6d 	.word	0x0800fc6d
 800fc48:	0800fc73 	.word	0x0800fc73
 800fc4c:	0800fc73 	.word	0x0800fc73
 800fc50:	0800fc73 	.word	0x0800fc73
 800fc54:	0800fc73 	.word	0x0800fc73
 800fc58:	0800fc79 	.word	0x0800fc79
 800fc5c:	0800fc73 	.word	0x0800fc73
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800fc60:	2300      	movs	r3, #0
 800fc62:	73fb      	strb	r3, [r7, #15]
            break;
 800fc64:	e014      	b.n	800fc90 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800fc66:	2305      	movs	r3, #5
 800fc68:	73fb      	strb	r3, [r7, #15]
            break;
 800fc6a:	e011      	b.n	800fc90 <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	73fb      	strb	r3, [r7, #15]
            break;
 800fc70:	e00e      	b.n	800fc90 <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800fc72:	2302      	movs	r3, #2
 800fc74:	73fb      	strb	r3, [r7, #15]
            break;
 800fc76:	e00b      	b.n	800fc90 <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	691b      	ldr	r3, [r3, #16]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d002      	beq.n	800fc86 <pb_encode_tag_for_field+0x72>
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	691b      	ldr	r3, [r3, #16]
 800fc84:	e000      	b.n	800fc88 <pb_encode_tag_for_field+0x74>
 800fc86:	4b09      	ldr	r3, [pc, #36]	; (800fcac <pb_encode_tag_for_field+0x98>)
 800fc88:	687a      	ldr	r2, [r7, #4]
 800fc8a:	6113      	str	r3, [r2, #16]
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	e008      	b.n	800fca2 <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800fc90:	683b      	ldr	r3, [r7, #0]
 800fc92:	8a1b      	ldrh	r3, [r3, #16]
 800fc94:	461a      	mov	r2, r3
 800fc96:	7bfb      	ldrb	r3, [r7, #15]
 800fc98:	6878      	ldr	r0, [r7, #4]
 800fc9a:	4619      	mov	r1, r3
 800fc9c:	f7ff ff98 	bl	800fbd0 <pb_encode_tag>
 800fca0:	4603      	mov	r3, r0
}
 800fca2:	4618      	mov	r0, r3
 800fca4:	3710      	adds	r7, #16
 800fca6:	46bd      	mov	sp, r7
 800fca8:	bd80      	pop	{r7, pc}
 800fcaa:	bf00      	nop
 800fcac:	080145d4 	.word	0x080145d4

0800fcb0 <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b084      	sub	sp, #16
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	60f8      	str	r0, [r7, #12]
 800fcb8:	60b9      	str	r1, [r7, #8]
 800fcba:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	461a      	mov	r2, r3
 800fcc0:	f04f 0300 	mov.w	r3, #0
 800fcc4:	68f8      	ldr	r0, [r7, #12]
 800fcc6:	f7ff ff07 	bl	800fad8 <pb_encode_varint>
 800fcca:	4603      	mov	r3, r0
 800fccc:	f083 0301 	eor.w	r3, r3, #1
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d001      	beq.n	800fcda <pb_encode_string+0x2a>
        return false;
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	e005      	b.n	800fce6 <pb_encode_string+0x36>
    
    return pb_write(stream, buffer, size);
 800fcda:	68f8      	ldr	r0, [r7, #12]
 800fcdc:	68b9      	ldr	r1, [r7, #8]
 800fcde:	687a      	ldr	r2, [r7, #4]
 800fce0:	f7ff f9f6 	bl	800f0d0 <pb_write>
 800fce4:	4603      	mov	r3, r0
}
 800fce6:	4618      	mov	r0, r3
 800fce8:	3710      	adds	r7, #16
 800fcea:	46bd      	mov	sp, r7
 800fcec:	bd80      	pop	{r7, pc}
 800fcee:	bf00      	nop

0800fcf0 <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800fcf0:	b580      	push	{r7, lr}
 800fcf2:	b08c      	sub	sp, #48	; 0x30
 800fcf4:	af00      	add	r7, sp, #0
 800fcf6:	60f8      	str	r0, [r7, #12]
 800fcf8:	60b9      	str	r1, [r7, #8]
 800fcfa:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	617b      	str	r3, [r7, #20]
 800fd00:	2300      	movs	r3, #0
 800fd02:	61bb      	str	r3, [r7, #24]
 800fd04:	2300      	movs	r3, #0
 800fd06:	61fb      	str	r3, [r7, #28]
 800fd08:	2300      	movs	r3, #0
 800fd0a:	623b      	str	r3, [r7, #32]
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	627b      	str	r3, [r7, #36]	; 0x24
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800fd10:	f107 0314 	add.w	r3, r7, #20
 800fd14:	4618      	mov	r0, r3
 800fd16:	68b9      	ldr	r1, [r7, #8]
 800fd18:	687a      	ldr	r2, [r7, #4]
 800fd1a:	f7ff fe2b 	bl	800f974 <pb_encode>
 800fd1e:	4603      	mov	r3, r0
 800fd20:	f083 0301 	eor.w	r3, r3, #1
 800fd24:	b2db      	uxtb	r3, r3
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d004      	beq.n	800fd34 <pb_encode_submessage+0x44>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800fd2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800fd30:	2300      	movs	r3, #0
 800fd32:	e063      	b.n	800fdfc <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800fd34:	6a3b      	ldr	r3, [r7, #32]
 800fd36:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800fd38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	f04f 0300 	mov.w	r3, #0
 800fd40:	68f8      	ldr	r0, [r7, #12]
 800fd42:	f7ff fec9 	bl	800fad8 <pb_encode_varint>
 800fd46:	4603      	mov	r3, r0
 800fd48:	f083 0301 	eor.w	r3, r3, #1
 800fd4c:	b2db      	uxtb	r3, r3
 800fd4e:	2b00      	cmp	r3, #0
 800fd50:	d001      	beq.n	800fd56 <pb_encode_submessage+0x66>
        return false;
 800fd52:	2300      	movs	r3, #0
 800fd54:	e052      	b.n	800fdfc <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d106      	bne.n	800fd6c <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800fd5e:	68f8      	ldr	r0, [r7, #12]
 800fd60:	2100      	movs	r1, #0
 800fd62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fd64:	f7ff f9b4 	bl	800f0d0 <pb_write>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	e047      	b.n	800fdfc <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	68da      	ldr	r2, [r3, #12]
 800fd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd72:	441a      	add	r2, r3
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	689b      	ldr	r3, [r3, #8]
 800fd78:	429a      	cmp	r2, r3
 800fd7a:	d90b      	bls.n	800fd94 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	691b      	ldr	r3, [r3, #16]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d002      	beq.n	800fd8a <pb_encode_submessage+0x9a>
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	691b      	ldr	r3, [r3, #16]
 800fd88:	e000      	b.n	800fd8c <pb_encode_submessage+0x9c>
 800fd8a:	4b1e      	ldr	r3, [pc, #120]	; (800fe04 <pb_encode_submessage+0x114>)
 800fd8c:	68fa      	ldr	r2, [r7, #12]
 800fd8e:	6113      	str	r3, [r2, #16]
 800fd90:	2300      	movs	r3, #0
 800fd92:	e033      	b.n	800fdfc <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800fd94:	68fb      	ldr	r3, [r7, #12]
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	685b      	ldr	r3, [r3, #4]
 800fd9e:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800fda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fda2:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800fda4:	2300      	movs	r3, #0
 800fda6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800fda8:	2300      	movs	r3, #0
 800fdaa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800fdac:	f107 0314 	add.w	r3, r7, #20
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	68b9      	ldr	r1, [r7, #8]
 800fdb4:	687a      	ldr	r2, [r7, #4]
 800fdb6:	f7ff fddd 	bl	800f974 <pb_encode>
 800fdba:	4603      	mov	r3, r0
 800fdbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	68da      	ldr	r2, [r3, #12]
 800fdc4:	6a3b      	ldr	r3, [r7, #32]
 800fdc6:	441a      	add	r2, r3
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800fdcc:	69ba      	ldr	r2, [r7, #24]
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800fdd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800fdd8:	6a3a      	ldr	r2, [r7, #32]
 800fdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d00b      	beq.n	800fdf8 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	691b      	ldr	r3, [r3, #16]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d002      	beq.n	800fdee <pb_encode_submessage+0xfe>
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	691b      	ldr	r3, [r3, #16]
 800fdec:	e000      	b.n	800fdf0 <pb_encode_submessage+0x100>
 800fdee:	4b06      	ldr	r3, [pc, #24]	; (800fe08 <pb_encode_submessage+0x118>)
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	6113      	str	r3, [r2, #16]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	e001      	b.n	800fdfc <pb_encode_submessage+0x10c>
    
    return status;
 800fdf8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3730      	adds	r7, #48	; 0x30
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}
 800fe04:	0801459c 	.word	0x0801459c
 800fe08:	08014624 	.word	0x08014624

0800fe0c <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b084      	sub	sp, #16
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
 800fe14:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800fe16:	683b      	ldr	r3, [r7, #0]
 800fe18:	69db      	ldr	r3, [r3, #28]
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7ff f9a8 	bl	800f170 <safe_read_bool>
 800fe20:	4603      	mov	r3, r0
 800fe22:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	461a      	mov	r2, r3
 800fe28:	f04f 0300 	mov.w	r3, #0
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f7ff fe53 	bl	800fad8 <pb_encode_varint>
 800fe32:	4603      	mov	r3, r0
}
 800fe34:	4618      	mov	r0, r3
 800fe36:	3710      	adds	r7, #16
 800fe38:	46bd      	mov	sp, r7
 800fe3a:	bd80      	pop	{r7, pc}

0800fe3c <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
 800fe44:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800fe46:	683b      	ldr	r3, [r7, #0]
 800fe48:	7d9b      	ldrb	r3, [r3, #22]
 800fe4a:	f003 030f 	and.w	r3, r3, #15
 800fe4e:	2b02      	cmp	r3, #2
 800fe50:	d14a      	bne.n	800fee8 <pb_enc_varint+0xac>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 800fe52:	f04f 0200 	mov.w	r2, #0
 800fe56:	f04f 0300 	mov.w	r3, #0
 800fe5a:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (field->data_size == sizeof(uint_least8_t))
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	8a5b      	ldrh	r3, [r3, #18]
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d108      	bne.n	800fe78 <pb_enc_varint+0x3c>
            value = *(const uint_least8_t*)field->pData;
 800fe66:	683b      	ldr	r3, [r7, #0]
 800fe68:	69db      	ldr	r3, [r3, #28]
 800fe6a:	781b      	ldrb	r3, [r3, #0]
 800fe6c:	b2da      	uxtb	r2, r3
 800fe6e:	f04f 0300 	mov.w	r3, #0
 800fe72:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fe76:	e030      	b.n	800feda <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint_least16_t))
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	8a5b      	ldrh	r3, [r3, #18]
 800fe7c:	2b02      	cmp	r3, #2
 800fe7e:	d108      	bne.n	800fe92 <pb_enc_varint+0x56>
            value = *(const uint_least16_t*)field->pData;
 800fe80:	683b      	ldr	r3, [r7, #0]
 800fe82:	69db      	ldr	r3, [r3, #28]
 800fe84:	881b      	ldrh	r3, [r3, #0]
 800fe86:	b29a      	uxth	r2, r3
 800fe88:	f04f 0300 	mov.w	r3, #0
 800fe8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fe90:	e023      	b.n	800feda <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint32_t))
 800fe92:	683b      	ldr	r3, [r7, #0]
 800fe94:	8a5b      	ldrh	r3, [r3, #18]
 800fe96:	2b04      	cmp	r3, #4
 800fe98:	d108      	bne.n	800feac <pb_enc_varint+0x70>
            value = *(const uint32_t*)field->pData;
 800fe9a:	683b      	ldr	r3, [r7, #0]
 800fe9c:	69db      	ldr	r3, [r3, #28]
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	f04f 0300 	mov.w	r3, #0
 800fea6:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800feaa:	e016      	b.n	800feda <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(pb_uint64_t))
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	8a5b      	ldrh	r3, [r3, #18]
 800feb0:	2b08      	cmp	r3, #8
 800feb2:	d106      	bne.n	800fec2 <pb_enc_varint+0x86>
            value = *(const pb_uint64_t*)field->pData;
 800feb4:	683b      	ldr	r3, [r7, #0]
 800feb6:	69db      	ldr	r3, [r3, #28]
 800feb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800febc:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800fec0:	e00b      	b.n	800feda <pb_enc_varint+0x9e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	691b      	ldr	r3, [r3, #16]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	d002      	beq.n	800fed0 <pb_enc_varint+0x94>
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	691b      	ldr	r3, [r3, #16]
 800fece:	e000      	b.n	800fed2 <pb_enc_varint+0x96>
 800fed0:	4b33      	ldr	r3, [pc, #204]	; (800ffa0 <pb_enc_varint+0x164>)
 800fed2:	687a      	ldr	r2, [r7, #4]
 800fed4:	6113      	str	r3, [r2, #16]
 800fed6:	2300      	movs	r3, #0
 800fed8:	e05d      	b.n	800ff96 <pb_enc_varint+0x15a>

        return pb_encode_varint(stream, value);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800fee0:	f7ff fdfa 	bl	800fad8 <pb_encode_varint>
 800fee4:	4603      	mov	r3, r0
 800fee6:	e056      	b.n	800ff96 <pb_enc_varint+0x15a>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800fee8:	f04f 0200 	mov.w	r2, #0
 800feec:	f04f 0300 	mov.w	r3, #0
 800fef0:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (field->data_size == sizeof(int_least8_t))
 800fef4:	683b      	ldr	r3, [r7, #0]
 800fef6:	8a5b      	ldrh	r3, [r3, #18]
 800fef8:	2b01      	cmp	r3, #1
 800fefa:	d108      	bne.n	800ff0e <pb_enc_varint+0xd2>
            value = *(const int_least8_t*)field->pData;
 800fefc:	683b      	ldr	r3, [r7, #0]
 800fefe:	69db      	ldr	r3, [r3, #28]
 800ff00:	781b      	ldrb	r3, [r3, #0]
 800ff02:	b25a      	sxtb	r2, r3
 800ff04:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ff08:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ff0c:	e030      	b.n	800ff70 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int_least16_t))
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	8a5b      	ldrh	r3, [r3, #18]
 800ff12:	2b02      	cmp	r3, #2
 800ff14:	d108      	bne.n	800ff28 <pb_enc_varint+0xec>
            value = *(const int_least16_t*)field->pData;
 800ff16:	683b      	ldr	r3, [r7, #0]
 800ff18:	69db      	ldr	r3, [r3, #28]
 800ff1a:	881b      	ldrh	r3, [r3, #0]
 800ff1c:	b21a      	sxth	r2, r3
 800ff1e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ff22:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ff26:	e023      	b.n	800ff70 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int32_t))
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	8a5b      	ldrh	r3, [r3, #18]
 800ff2c:	2b04      	cmp	r3, #4
 800ff2e:	d108      	bne.n	800ff42 <pb_enc_varint+0x106>
            value = *(const int32_t*)field->pData;
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	69db      	ldr	r3, [r3, #28]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	461a      	mov	r2, r3
 800ff38:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ff3c:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ff40:	e016      	b.n	800ff70 <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(pb_int64_t))
 800ff42:	683b      	ldr	r3, [r7, #0]
 800ff44:	8a5b      	ldrh	r3, [r3, #18]
 800ff46:	2b08      	cmp	r3, #8
 800ff48:	d106      	bne.n	800ff58 <pb_enc_varint+0x11c>
            value = *(const pb_int64_t*)field->pData;
 800ff4a:	683b      	ldr	r3, [r7, #0]
 800ff4c:	69db      	ldr	r3, [r3, #28]
 800ff4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff52:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800ff56:	e00b      	b.n	800ff70 <pb_enc_varint+0x134>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d002      	beq.n	800ff66 <pb_enc_varint+0x12a>
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	691b      	ldr	r3, [r3, #16]
 800ff64:	e000      	b.n	800ff68 <pb_enc_varint+0x12c>
 800ff66:	4b0e      	ldr	r3, [pc, #56]	; (800ffa0 <pb_enc_varint+0x164>)
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	6113      	str	r3, [r2, #16]
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	e012      	b.n	800ff96 <pb_enc_varint+0x15a>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800ff70:	683b      	ldr	r3, [r7, #0]
 800ff72:	7d9b      	ldrb	r3, [r3, #22]
 800ff74:	f003 030f 	and.w	r3, r3, #15
 800ff78:	2b03      	cmp	r3, #3
 800ff7a:	d106      	bne.n	800ff8a <pb_enc_varint+0x14e>
            return pb_encode_svarint(stream, value);
 800ff7c:	6878      	ldr	r0, [r7, #4]
 800ff7e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff82:	f7ff fdcf 	bl	800fb24 <pb_encode_svarint>
 800ff86:	4603      	mov	r3, r0
 800ff88:	e005      	b.n	800ff96 <pb_enc_varint+0x15a>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800ff8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7ff fda2 	bl	800fad8 <pb_encode_varint>
 800ff94:	4603      	mov	r3, r0

    }
}
 800ff96:	4618      	mov	r0, r3
 800ff98:	3718      	adds	r7, #24
 800ff9a:	46bd      	mov	sp, r7
 800ff9c:	bd80      	pop	{r7, pc}
 800ff9e:	bf00      	nop
 800ffa0:	08014638 	.word	0x08014638

0800ffa4 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	8a5b      	ldrh	r3, [r3, #18]
 800ffb2:	2b04      	cmp	r3, #4
 800ffb4:	d107      	bne.n	800ffc6 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	69db      	ldr	r3, [r3, #28]
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	4619      	mov	r1, r3
 800ffbe:	f7ff fde7 	bl	800fb90 <pb_encode_fixed32>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	e016      	b.n	800fff4 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	8a5b      	ldrh	r3, [r3, #18]
 800ffca:	2b08      	cmp	r3, #8
 800ffcc:	d107      	bne.n	800ffde <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800ffce:	683b      	ldr	r3, [r7, #0]
 800ffd0:	69db      	ldr	r3, [r3, #28]
 800ffd2:	6878      	ldr	r0, [r7, #4]
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	f7ff fdeb 	bl	800fbb0 <pb_encode_fixed64>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	e00a      	b.n	800fff4 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	691b      	ldr	r3, [r3, #16]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d002      	beq.n	800ffec <pb_enc_fixed+0x48>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	691b      	ldr	r3, [r3, #16]
 800ffea:	e000      	b.n	800ffee <pb_enc_fixed+0x4a>
 800ffec:	4b03      	ldr	r3, [pc, #12]	; (800fffc <pb_enc_fixed+0x58>)
 800ffee:	687a      	ldr	r2, [r7, #4]
 800fff0:	6113      	str	r3, [r2, #16]
 800fff2:	2300      	movs	r3, #0
    }
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3708      	adds	r7, #8
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}
 800fffc:	08014638 	.word	0x08014638

08010000 <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
 8010008:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 801000a:	2300      	movs	r3, #0
 801000c:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 801000e:	683b      	ldr	r3, [r7, #0]
 8010010:	69db      	ldr	r3, [r3, #28]
 8010012:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d106      	bne.n	8010028 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	2100      	movs	r1, #0
 801001e:	2200      	movs	r2, #0
 8010020:	f7ff fe46 	bl	800fcb0 <pb_encode_string>
 8010024:	4603      	mov	r3, r0
 8010026:	e023      	b.n	8010070 <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8010028:	683b      	ldr	r3, [r7, #0]
 801002a:	7d9b      	ldrb	r3, [r3, #22]
 801002c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010030:	2b00      	cmp	r3, #0
 8010032:	d113      	bne.n	801005c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	881b      	ldrh	r3, [r3, #0]
 8010038:	461a      	mov	r2, r3
 801003a:	683b      	ldr	r3, [r7, #0]
 801003c:	8a5b      	ldrh	r3, [r3, #18]
 801003e:	3b02      	subs	r3, #2
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8010040:	429a      	cmp	r2, r3
 8010042:	d90b      	bls.n	801005c <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	691b      	ldr	r3, [r3, #16]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d002      	beq.n	8010052 <pb_enc_bytes+0x52>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	691b      	ldr	r3, [r3, #16]
 8010050:	e000      	b.n	8010054 <pb_enc_bytes+0x54>
 8010052:	4b09      	ldr	r3, [pc, #36]	; (8010078 <pb_enc_bytes+0x78>)
 8010054:	687a      	ldr	r2, [r7, #4]
 8010056:	6113      	str	r3, [r2, #16]
 8010058:	2300      	movs	r3, #0
 801005a:	e009      	b.n	8010070 <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 801005c:	68fb      	ldr	r3, [r7, #12]
 801005e:	1c9a      	adds	r2, r3, #2
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	881b      	ldrh	r3, [r3, #0]
 8010064:	6878      	ldr	r0, [r7, #4]
 8010066:	4611      	mov	r1, r2
 8010068:	461a      	mov	r2, r3
 801006a:	f7ff fe21 	bl	800fcb0 <pb_encode_string>
 801006e:	4603      	mov	r3, r0
}
 8010070:	4618      	mov	r0, r3
 8010072:	3710      	adds	r7, #16
 8010074:	46bd      	mov	sp, r7
 8010076:	bd80      	pop	{r7, pc}
 8010078:	0801464c 	.word	0x0801464c

0801007c <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 801007c:	b580      	push	{r7, lr}
 801007e:	b086      	sub	sp, #24
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 8010086:	2300      	movs	r3, #0
 8010088:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	8a5b      	ldrh	r3, [r3, #18]
 801008e:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 8010090:	683b      	ldr	r3, [r7, #0]
 8010092:	69db      	ldr	r3, [r3, #28]
 8010094:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	7d9b      	ldrb	r3, [r3, #22]
 801009a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801009e:	2b80      	cmp	r3, #128	; 0x80
 80100a0:	d103      	bne.n	80100aa <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 80100a2:	f04f 33ff 	mov.w	r3, #4294967295
 80100a6:	613b      	str	r3, [r7, #16]
 80100a8:	e011      	b.n	80100ce <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 80100aa:	693b      	ldr	r3, [r7, #16]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d10b      	bne.n	80100c8 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	691b      	ldr	r3, [r3, #16]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d002      	beq.n	80100be <pb_enc_string+0x42>
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	691b      	ldr	r3, [r3, #16]
 80100bc:	e000      	b.n	80100c0 <pb_enc_string+0x44>
 80100be:	4b1c      	ldr	r3, [pc, #112]	; (8010130 <pb_enc_string+0xb4>)
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	6113      	str	r3, [r2, #16]
 80100c4:	2300      	movs	r3, #0
 80100c6:	e02f      	b.n	8010128 <pb_enc_string+0xac>

        max_size -= 1;
 80100c8:	693b      	ldr	r3, [r7, #16]
 80100ca:	3b01      	subs	r3, #1
 80100cc:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 80100ce:	68bb      	ldr	r3, [r7, #8]
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d102      	bne.n	80100da <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 80100d4:	2300      	movs	r3, #0
 80100d6:	617b      	str	r3, [r7, #20]
 80100d8:	e020      	b.n	801011c <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 80100de:	e005      	b.n	80100ec <pb_enc_string+0x70>
        {
            size++;
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	3301      	adds	r3, #1
 80100e4:	617b      	str	r3, [r7, #20]
            p++;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	3301      	adds	r3, #1
 80100ea:	60fb      	str	r3, [r7, #12]
    else
    {
        const char *p = str;

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 80100ec:	697a      	ldr	r2, [r7, #20]
 80100ee:	693b      	ldr	r3, [r7, #16]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	d203      	bcs.n	80100fc <pb_enc_string+0x80>
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1f1      	bne.n	80100e0 <pb_enc_string+0x64>
        {
            size++;
            p++;
        }

        if (*p != '\0')
 80100fc:	68fb      	ldr	r3, [r7, #12]
 80100fe:	781b      	ldrb	r3, [r3, #0]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d00b      	beq.n	801011c <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	691b      	ldr	r3, [r3, #16]
 8010108:	2b00      	cmp	r3, #0
 801010a:	d002      	beq.n	8010112 <pb_enc_string+0x96>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	e000      	b.n	8010114 <pb_enc_string+0x98>
 8010112:	4b08      	ldr	r3, [pc, #32]	; (8010134 <pb_enc_string+0xb8>)
 8010114:	687a      	ldr	r2, [r7, #4]
 8010116:	6113      	str	r3, [r2, #16]
 8010118:	2300      	movs	r3, #0
 801011a:	e005      	b.n	8010128 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 801011c:	6878      	ldr	r0, [r7, #4]
 801011e:	68b9      	ldr	r1, [r7, #8]
 8010120:	697a      	ldr	r2, [r7, #20]
 8010122:	f7ff fdc5 	bl	800fcb0 <pb_encode_string>
 8010126:	4603      	mov	r3, r0
}
 8010128:	4618      	mov	r0, r3
 801012a:	3718      	adds	r7, #24
 801012c:	46bd      	mov	sp, r7
 801012e:	bd80      	pop	{r7, pc}
 8010130:	08014660 	.word	0x08014660
 8010134:	08014674 	.word	0x08014674

08010138 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b084      	sub	sp, #16
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
 8010140:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 8010142:	683b      	ldr	r3, [r7, #0]
 8010144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010146:	2b00      	cmp	r3, #0
 8010148:	d10b      	bne.n	8010162 <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	691b      	ldr	r3, [r3, #16]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d002      	beq.n	8010158 <pb_enc_submessage+0x20>
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	691b      	ldr	r3, [r3, #16]
 8010156:	e000      	b.n	801015a <pb_enc_submessage+0x22>
 8010158:	4b19      	ldr	r3, [pc, #100]	; (80101c0 <pb_enc_submessage+0x88>)
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	6113      	str	r3, [r2, #16]
 801015e:	2300      	movs	r3, #0
 8010160:	e02a      	b.n	80101b8 <pb_enc_submessage+0x80>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 8010162:	683b      	ldr	r3, [r7, #0]
 8010164:	7d9b      	ldrb	r3, [r3, #22]
 8010166:	f003 030f 	and.w	r3, r3, #15
 801016a:	2b09      	cmp	r3, #9
 801016c:	d11a      	bne.n	80101a4 <pb_enc_submessage+0x6c>
 801016e:	683b      	ldr	r3, [r7, #0]
 8010170:	6a1b      	ldr	r3, [r3, #32]
 8010172:	2b00      	cmp	r3, #0
 8010174:	d016      	beq.n	80101a4 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 8010176:	683b      	ldr	r3, [r7, #0]
 8010178:	6a1b      	ldr	r3, [r3, #32]
 801017a:	3b08      	subs	r3, #8
 801017c:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	2b00      	cmp	r3, #0
 8010184:	d00e      	beq.n	80101a4 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 8010186:	68fb      	ldr	r3, [r7, #12]
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	68fa      	ldr	r2, [r7, #12]
 801018c:	3204      	adds	r2, #4
 801018e:	6878      	ldr	r0, [r7, #4]
 8010190:	6839      	ldr	r1, [r7, #0]
 8010192:	4798      	blx	r3
 8010194:	4603      	mov	r3, r0
 8010196:	f083 0301 	eor.w	r3, r3, #1
 801019a:	b2db      	uxtb	r3, r3
 801019c:	2b00      	cmp	r3, #0
 801019e:	d001      	beq.n	80101a4 <pb_enc_submessage+0x6c>
                return false;
 80101a0:	2300      	movs	r3, #0
 80101a2:	e009      	b.n	80101b8 <pb_enc_submessage+0x80>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 80101a4:	683b      	ldr	r3, [r7, #0]
 80101a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101a8:	683b      	ldr	r3, [r7, #0]
 80101aa:	69db      	ldr	r3, [r3, #28]
 80101ac:	6878      	ldr	r0, [r7, #4]
 80101ae:	4611      	mov	r1, r2
 80101b0:	461a      	mov	r2, r3
 80101b2:	f7ff fd9d 	bl	800fcf0 <pb_encode_submessage>
 80101b6:	4603      	mov	r3, r0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3710      	adds	r7, #16
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	08014688 	.word	0x08014688

080101c4 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
 80101cc:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 80101ce:	683b      	ldr	r3, [r7, #0]
 80101d0:	69da      	ldr	r2, [r3, #28]
 80101d2:	683b      	ldr	r3, [r7, #0]
 80101d4:	8a5b      	ldrh	r3, [r3, #18]
 80101d6:	6878      	ldr	r0, [r7, #4]
 80101d8:	4611      	mov	r1, r2
 80101da:	461a      	mov	r2, r3
 80101dc:	f7ff fd68 	bl	800fcb0 <pb_encode_string>
 80101e0:	4603      	mov	r3, r0
}
 80101e2:	4618      	mov	r0, r3
 80101e4:	3708      	adds	r7, #8
 80101e6:	46bd      	mov	sp, r7
 80101e8:	bd80      	pop	{r7, pc}
 80101ea:	bf00      	nop

080101ec <uart_debugg>:
Io_Exp_PinMap_t ELEC_HANDBRAKE_PWR_OUT_D = {IO_EXP_IC_48, PORT0, PIN2};


//#if UART_DEBUG
void uart_debugg(uint8_t uart_buff[])
{
 80101ec:	b480      	push	{r7}
 80101ee:	b083      	sub	sp, #12
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	6078      	str	r0, [r7, #4]
	            //Wait for transmit buffer interrupt to fill it again with remaining data
	            while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
	            UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
	   }*/
#endif
}
 80101f4:	370c      	adds	r7, #12
 80101f6:	46bd      	mov	sp, r7
 80101f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101fc:	4770      	bx	lr
 80101fe:	bf00      	nop

08010200 <Io_Exp_Init>:
}
//#endif


void Io_Exp_Init(void)
{
 8010200:	b580      	push	{r7, lr}
 8010202:	b082      	sub	sp, #8
 8010204:	af00      	add	r7, sp, #0
	/* 0 set as output, 1 as input */
	/* Initially output is high hence make 0 */

	uint8_t Io_Exp_address = 0x42, set_port0_pin_as_out_or_input = 0xbf, set_port1_pin_as_out_or_input = 0x27, port0 = 0x00, port1 = 0x01, pin_value = 0x06;
 8010206:	2342      	movs	r3, #66	; 0x42
 8010208:	71fb      	strb	r3, [r7, #7]
 801020a:	23bf      	movs	r3, #191	; 0xbf
 801020c:	71bb      	strb	r3, [r7, #6]
 801020e:	2327      	movs	r3, #39	; 0x27
 8010210:	717b      	strb	r3, [r7, #5]
 8010212:	2300      	movs	r3, #0
 8010214:	713b      	strb	r3, [r7, #4]
 8010216:	2301      	movs	r3, #1
 8010218:	70fb      	strb	r3, [r7, #3]
 801021a:	2306      	movs	r3, #6
 801021c:	70bb      	strb	r3, [r7, #2]

	/* U25 I2C_0*/
	IOExp_Configure(&I2C_MASTER_0, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 801021e:	79f9      	ldrb	r1, [r7, #7]
 8010220:	79ba      	ldrb	r2, [r7, #6]
 8010222:	797b      	ldrb	r3, [r7, #5]
 8010224:	4851      	ldr	r0, [pc, #324]	; (801036c <Io_Exp_Init+0x16c>)
 8010226:	f7f4 ff3f 	bl	80050a8 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);
 801022a:	79f9      	ldrb	r1, [r7, #7]
 801022c:	793a      	ldrb	r2, [r7, #4]
 801022e:	78bb      	ldrb	r3, [r7, #2]
 8010230:	484e      	ldr	r0, [pc, #312]	; (801036c <Io_Exp_Init+0x16c>)
 8010232:	f7f5 f875 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x03);
 8010236:	79fa      	ldrb	r2, [r7, #7]
 8010238:	78fb      	ldrb	r3, [r7, #3]
 801023a:	484c      	ldr	r0, [pc, #304]	; (801036c <Io_Exp_Init+0x16c>)
 801023c:	4611      	mov	r1, r2
 801023e:	461a      	mov	r2, r3
 8010240:	2303      	movs	r3, #3
 8010242:	f7f5 f86d 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x04);
 8010246:	79fa      	ldrb	r2, [r7, #7]
 8010248:	78fb      	ldrb	r3, [r7, #3]
 801024a:	4848      	ldr	r0, [pc, #288]	; (801036c <Io_Exp_Init+0x16c>)
 801024c:	4611      	mov	r1, r2
 801024e:	461a      	mov	r2, r3
 8010250:	2304      	movs	r3, #4
 8010252:	f7f5 f865 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x06);
 8010256:	79fa      	ldrb	r2, [r7, #7]
 8010258:	78fb      	ldrb	r3, [r7, #3]
 801025a:	4844      	ldr	r0, [pc, #272]	; (801036c <Io_Exp_Init+0x16c>)
 801025c:	4611      	mov	r1, r2
 801025e:	461a      	mov	r2, r3
 8010260:	2306      	movs	r3, #6
 8010262:	f7f5 f85d 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x07);
 8010266:	79fa      	ldrb	r2, [r7, #7]
 8010268:	78fb      	ldrb	r3, [r7, #3]
 801026a:	4840      	ldr	r0, [pc, #256]	; (801036c <Io_Exp_Init+0x16c>)
 801026c:	4611      	mov	r1, r2
 801026e:	461a      	mov	r2, r3
 8010270:	2307      	movs	r3, #7
 8010272:	f7f5 f855 	bl	8005320 <IOExp_SetPIN_LOW>
	//IOExp_SetPIN_HIGH(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);

	/* U38 I2C_1 */
	Io_Exp_address = 0x40;
 8010276:	2340      	movs	r3, #64	; 0x40
 8010278:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input = 0xf0;
 801027a:	23f0      	movs	r3, #240	; 0xf0
 801027c:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0x01;
 801027e:	2301      	movs	r3, #1
 8010280:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 8010282:	79f9      	ldrb	r1, [r7, #7]
 8010284:	79ba      	ldrb	r2, [r7, #6]
 8010286:	797b      	ldrb	r3, [r7, #5]
 8010288:	4839      	ldr	r0, [pc, #228]	; (8010370 <Io_Exp_Init+0x170>)
 801028a:	f7f4 ff0d 	bl	80050a8 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 0);
 801028e:	79fa      	ldrb	r2, [r7, #7]
 8010290:	793b      	ldrb	r3, [r7, #4]
 8010292:	4837      	ldr	r0, [pc, #220]	; (8010370 <Io_Exp_Init+0x170>)
 8010294:	4611      	mov	r1, r2
 8010296:	461a      	mov	r2, r3
 8010298:	2300      	movs	r3, #0
 801029a:	f7f5 f841 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 1);
 801029e:	79fa      	ldrb	r2, [r7, #7]
 80102a0:	793b      	ldrb	r3, [r7, #4]
 80102a2:	4833      	ldr	r0, [pc, #204]	; (8010370 <Io_Exp_Init+0x170>)
 80102a4:	4611      	mov	r1, r2
 80102a6:	461a      	mov	r2, r3
 80102a8:	2301      	movs	r3, #1
 80102aa:	f7f5 f839 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 2);
 80102ae:	79fa      	ldrb	r2, [r7, #7]
 80102b0:	793b      	ldrb	r3, [r7, #4]
 80102b2:	482f      	ldr	r0, [pc, #188]	; (8010370 <Io_Exp_Init+0x170>)
 80102b4:	4611      	mov	r1, r2
 80102b6:	461a      	mov	r2, r3
 80102b8:	2302      	movs	r3, #2
 80102ba:	f7f5 f831 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 80102be:	79fa      	ldrb	r2, [r7, #7]
 80102c0:	793b      	ldrb	r3, [r7, #4]
 80102c2:	482b      	ldr	r0, [pc, #172]	; (8010370 <Io_Exp_Init+0x170>)
 80102c4:	4611      	mov	r1, r2
 80102c6:	461a      	mov	r2, r3
 80102c8:	2303      	movs	r3, #3
 80102ca:	f7f5 f829 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x01);
 80102ce:	79fa      	ldrb	r2, [r7, #7]
 80102d0:	78fb      	ldrb	r3, [r7, #3]
 80102d2:	4827      	ldr	r0, [pc, #156]	; (8010370 <Io_Exp_Init+0x170>)
 80102d4:	4611      	mov	r1, r2
 80102d6:	461a      	mov	r2, r3
 80102d8:	2301      	movs	r3, #1
 80102da:	f7f5 f821 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x02);
 80102de:	79fa      	ldrb	r2, [r7, #7]
 80102e0:	78fb      	ldrb	r3, [r7, #3]
 80102e2:	4823      	ldr	r0, [pc, #140]	; (8010370 <Io_Exp_Init+0x170>)
 80102e4:	4611      	mov	r1, r2
 80102e6:	461a      	mov	r2, r3
 80102e8:	2302      	movs	r3, #2
 80102ea:	f7f5 f819 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x03);
 80102ee:	79fa      	ldrb	r2, [r7, #7]
 80102f0:	78fb      	ldrb	r3, [r7, #3]
 80102f2:	481f      	ldr	r0, [pc, #124]	; (8010370 <Io_Exp_Init+0x170>)
 80102f4:	4611      	mov	r1, r2
 80102f6:	461a      	mov	r2, r3
 80102f8:	2303      	movs	r3, #3
 80102fa:	f7f5 f811 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x04);
 80102fe:	79fa      	ldrb	r2, [r7, #7]
 8010300:	78fb      	ldrb	r3, [r7, #3]
 8010302:	481b      	ldr	r0, [pc, #108]	; (8010370 <Io_Exp_Init+0x170>)
 8010304:	4611      	mov	r1, r2
 8010306:	461a      	mov	r2, r3
 8010308:	2304      	movs	r3, #4
 801030a:	f7f5 f809 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x05);
 801030e:	79fa      	ldrb	r2, [r7, #7]
 8010310:	78fb      	ldrb	r3, [r7, #3]
 8010312:	4817      	ldr	r0, [pc, #92]	; (8010370 <Io_Exp_Init+0x170>)
 8010314:	4611      	mov	r1, r2
 8010316:	461a      	mov	r2, r3
 8010318:	2305      	movs	r3, #5
 801031a:	f7f5 f801 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x06);
 801031e:	79fa      	ldrb	r2, [r7, #7]
 8010320:	78fb      	ldrb	r3, [r7, #3]
 8010322:	4813      	ldr	r0, [pc, #76]	; (8010370 <Io_Exp_Init+0x170>)
 8010324:	4611      	mov	r1, r2
 8010326:	461a      	mov	r2, r3
 8010328:	2306      	movs	r3, #6
 801032a:	f7f4 fff9 	bl	8005320 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x07);
 801032e:	79fa      	ldrb	r2, [r7, #7]
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	480f      	ldr	r0, [pc, #60]	; (8010370 <Io_Exp_Init+0x170>)
 8010334:	4611      	mov	r1, r2
 8010336:	461a      	mov	r2, r3
 8010338:	2307      	movs	r3, #7
 801033a:	f7f4 fff1 	bl	8005320 <IOExp_SetPIN_LOW>

	/* U48 I2C_1 */
	Io_Exp_address = 0x42;
 801033e:	2342      	movs	r3, #66	; 0x42
 8010340:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input =0XF7;
 8010342:	23f7      	movs	r3, #247	; 0xf7
 8010344:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0xFF;
 8010346:	23ff      	movs	r3, #255	; 0xff
 8010348:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 801034a:	79f9      	ldrb	r1, [r7, #7]
 801034c:	79ba      	ldrb	r2, [r7, #6]
 801034e:	797b      	ldrb	r3, [r7, #5]
 8010350:	4807      	ldr	r0, [pc, #28]	; (8010370 <Io_Exp_Init+0x170>)
 8010352:	f7f4 fea9 	bl	80050a8 <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 8010356:	79fa      	ldrb	r2, [r7, #7]
 8010358:	793b      	ldrb	r3, [r7, #4]
 801035a:	4805      	ldr	r0, [pc, #20]	; (8010370 <Io_Exp_Init+0x170>)
 801035c:	4611      	mov	r1, r2
 801035e:	461a      	mov	r2, r3
 8010360:	2303      	movs	r3, #3
 8010362:	f7f4 ffdd 	bl	8005320 <IOExp_SetPIN_LOW>

}
 8010366:	3708      	adds	r7, #8
 8010368:	46bd      	mov	sp, r7
 801036a:	bd80      	pop	{r7, pc}
 801036c:	1ffe8a5c 	.word	0x1ffe8a5c
 8010370:	1ffe8a68 	.word	0x1ffe8a68

08010374 <digital_io_setoutputlow>:

void digital_io_setoutputlow(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 8010374:	b580      	push	{r7, lr}
 8010376:	b084      	sub	sp, #16
 8010378:	af00      	add	r7, sp, #0
 801037a:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address = 0x40; //for IC no 24 & 38
 801037c:	2340      	movs	r3, #64	; 0x40
 801037e:	73fb      	strb	r3, [r7, #15]

	if((IO_EXP_PINName_handler->IC_no == 25) || (IO_EXP_PINName_handler->IC_no == 48))
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b19      	cmp	r3, #25
 8010386:	d003      	beq.n	8010390 <digital_io_setoutputlow+0x1c>
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b30      	cmp	r3, #48	; 0x30
 801038e:	d101      	bne.n	8010394 <digital_io_setoutputlow+0x20>
	{
		Io_Exp_address = 0x42;
 8010390:	2342      	movs	r3, #66	; 0x42
 8010392:	73fb      	strb	r3, [r7, #15]
	}

	if((IO_EXP_PINName_handler->IC_no == 24) || (IO_EXP_PINName_handler->IC_no == 25))
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	781b      	ldrb	r3, [r3, #0]
 8010398:	2b18      	cmp	r3, #24
 801039a:	d003      	beq.n	80103a4 <digital_io_setoutputlow+0x30>
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	781b      	ldrb	r3, [r3, #0]
 80103a0:	2b19      	cmp	r3, #25
 80103a2:	d108      	bne.n	80103b6 <digital_io_setoutputlow+0x42>
	{
		IOExp_SetPIN_LOW(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	785a      	ldrb	r2, [r3, #1]
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	789b      	ldrb	r3, [r3, #2]
 80103ac:	7bf9      	ldrb	r1, [r7, #15]
 80103ae:	4807      	ldr	r0, [pc, #28]	; (80103cc <digital_io_setoutputlow+0x58>)
 80103b0:	f7f4 ffb6 	bl	8005320 <IOExp_SetPIN_LOW>
 80103b4:	e007      	b.n	80103c6 <digital_io_setoutputlow+0x52>
	}
	else
	{
		IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	785a      	ldrb	r2, [r3, #1]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	789b      	ldrb	r3, [r3, #2]
 80103be:	7bf9      	ldrb	r1, [r7, #15]
 80103c0:	4803      	ldr	r0, [pc, #12]	; (80103d0 <digital_io_setoutputlow+0x5c>)
 80103c2:	f7f4 ffad 	bl	8005320 <IOExp_SetPIN_LOW>
	}
}
 80103c6:	3710      	adds	r7, #16
 80103c8:	46bd      	mov	sp, r7
 80103ca:	bd80      	pop	{r7, pc}
 80103cc:	1ffe8a5c 	.word	0x1ffe8a5c
 80103d0:	1ffe8a68 	.word	0x1ffe8a68

080103d4 <digital_io_setoutputhigh>:

void digital_io_setoutputhigh(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 80103d4:	b580      	push	{r7, lr}
 80103d6:	b084      	sub	sp, #16
 80103d8:	af00      	add	r7, sp, #0
 80103da:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address = 0x40; //for IC no 24 & 38
 80103dc:	2340      	movs	r3, #64	; 0x40
 80103de:	73fb      	strb	r3, [r7, #15]

	if((IO_EXP_PINName_handler->IC_no == 25) || (IO_EXP_PINName_handler->IC_no == 48))
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	781b      	ldrb	r3, [r3, #0]
 80103e4:	2b19      	cmp	r3, #25
 80103e6:	d003      	beq.n	80103f0 <digital_io_setoutputhigh+0x1c>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	781b      	ldrb	r3, [r3, #0]
 80103ec:	2b30      	cmp	r3, #48	; 0x30
 80103ee:	d101      	bne.n	80103f4 <digital_io_setoutputhigh+0x20>
	{
		Io_Exp_address = 0x42;
 80103f0:	2342      	movs	r3, #66	; 0x42
 80103f2:	73fb      	strb	r3, [r7, #15]
	}

	if((IO_EXP_PINName_handler->IC_no == 24) || (IO_EXP_PINName_handler->IC_no == 25))
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	781b      	ldrb	r3, [r3, #0]
 80103f8:	2b18      	cmp	r3, #24
 80103fa:	d003      	beq.n	8010404 <digital_io_setoutputhigh+0x30>
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	781b      	ldrb	r3, [r3, #0]
 8010400:	2b19      	cmp	r3, #25
 8010402:	d108      	bne.n	8010416 <digital_io_setoutputhigh+0x42>
	{
		IOExp_SetPIN_HIGH(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler->port, IO_EXP_PINName_handler->pin);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	785a      	ldrb	r2, [r3, #1]
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	789b      	ldrb	r3, [r3, #2]
 801040c:	7bf9      	ldrb	r1, [r7, #15]
 801040e:	4807      	ldr	r0, [pc, #28]	; (801042c <digital_io_setoutputhigh+0x58>)
 8010410:	f7f4 ff6a 	bl	80052e8 <IOExp_SetPIN_HIGH>
 8010414:	e007      	b.n	8010426 <digital_io_setoutputhigh+0x52>
	}
	else
	{
		IOExp_SetPIN_HIGH(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler->port, IO_EXP_PINName_handler->pin);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	785a      	ldrb	r2, [r3, #1]
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	789b      	ldrb	r3, [r3, #2]
 801041e:	7bf9      	ldrb	r1, [r7, #15]
 8010420:	4803      	ldr	r0, [pc, #12]	; (8010430 <digital_io_setoutputhigh+0x5c>)
 8010422:	f7f4 ff61 	bl	80052e8 <IOExp_SetPIN_HIGH>
	}
}
 8010426:	3710      	adds	r7, #16
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	1ffe8a5c 	.word	0x1ffe8a5c
 8010430:	1ffe8a68 	.word	0x1ffe8a68

08010434 <Delay>:

void Delay(uint32_t delay_ms)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 801043c:	480f      	ldr	r0, [pc, #60]	; (801047c <Delay+0x48>)
 801043e:	f7f6 fa11 	bl	8006864 <TIMER_ClearEvent>

   delay_cnt = delay_ms * 100000;//TIMER_DELAY_MUL_FACTOR;
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	4a0e      	ldr	r2, [pc, #56]	; (8010480 <Delay+0x4c>)
 8010446:	fb02 f303 	mul.w	r3, r2, r3
 801044a:	60fb      	str	r3, [r7, #12]

   TIMER_SetTimeInterval(&TIMER_0,delay_cnt);
 801044c:	480b      	ldr	r0, [pc, #44]	; (801047c <Delay+0x48>)
 801044e:	68f9      	ldr	r1, [r7, #12]
 8010450:	f7f6 f8e6 	bl	8006620 <TIMER_SetTimeInterval>

   TIMER_Start(&TIMER_0);
 8010454:	4809      	ldr	r0, [pc, #36]	; (801047c <Delay+0x48>)
 8010456:	f7f6 f867 	bl	8006528 <TIMER_Start>

   while(!TIMER_GetInterruptStatus(&TIMER_0));
 801045a:	bf00      	nop
 801045c:	4807      	ldr	r0, [pc, #28]	; (801047c <Delay+0x48>)
 801045e:	f7f6 f9db 	bl	8006818 <TIMER_GetInterruptStatus>
 8010462:	4603      	mov	r3, r0
 8010464:	f083 0301 	eor.w	r3, r3, #1
 8010468:	b2db      	uxtb	r3, r3
 801046a:	2b00      	cmp	r3, #0
 801046c:	d1f6      	bne.n	801045c <Delay+0x28>

   TIMER_Stop(&TIMER_0);
 801046e:	4803      	ldr	r0, [pc, #12]	; (801047c <Delay+0x48>)
 8010470:	f7f6 f882 	bl	8006578 <TIMER_Stop>

}
 8010474:	3710      	adds	r7, #16
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}
 801047a:	bf00      	nop
 801047c:	1ffe8850 	.word	0x1ffe8850
 8010480:	000186a0 	.word	0x000186a0

08010484 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8010484:	b480      	push	{r7}
 8010486:	b083      	sub	sp, #12
 8010488:	af00      	add	r7, sp, #0
 801048a:	4603      	mov	r3, r0
 801048c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801048e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010492:	2b00      	cmp	r3, #0
 8010494:	db10      	blt.n	80104b8 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8010496:	490b      	ldr	r1, [pc, #44]	; (80104c4 <__NVIC_DisableIRQ+0x40>)
 8010498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801049c:	095b      	lsrs	r3, r3, #5
 801049e:	79fa      	ldrb	r2, [r7, #7]
 80104a0:	f002 021f 	and.w	r2, r2, #31
 80104a4:	2001      	movs	r0, #1
 80104a6:	fa00 f202 	lsl.w	r2, r0, r2
 80104aa:	3320      	adds	r3, #32
 80104ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80104b0:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80104b4:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 80104b8:	370c      	adds	r7, #12
 80104ba:	46bd      	mov	sp, r7
 80104bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c0:	4770      	bx	lr
 80104c2:	bf00      	nop
 80104c4:	e000e100 	.word	0xe000e100

080104c8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80104c8:	b480      	push	{r7}
 80104ca:	b083      	sub	sp, #12
 80104cc:	af00      	add	r7, sp, #0
 80104ce:	6078      	str	r0, [r7, #4]
 80104d0:	460b      	mov	r3, r1
 80104d2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 80104d4:	78fb      	ldrb	r3, [r7, #3]
 80104d6:	2201      	movs	r2, #1
 80104d8:	409a      	lsls	r2, r3
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	605a      	str	r2, [r3, #4]
}
 80104de:	370c      	adds	r7, #12
 80104e0:	46bd      	mov	sp, r7
 80104e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e6:	4770      	bx	lr

080104e8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b082      	sub	sp, #8
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681a      	ldr	r2, [r3, #0]
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	7c1b      	ldrb	r3, [r3, #16]
 80104f8:	4610      	mov	r0, r2
 80104fa:	4619      	mov	r1, r3
 80104fc:	f7ff ffe4 	bl	80104c8 <XMC_GPIO_SetOutputHigh>
}
 8010500:	3708      	adds	r7, #8
 8010502:	46bd      	mov	sp, r7
 8010504:	bd80      	pop	{r7, pc}
 8010506:	bf00      	nop

08010508 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 801050c:	4a04      	ldr	r2, [pc, #16]	; (8010520 <XMC_WDT_Start+0x18>)
 801050e:	4b04      	ldr	r3, [pc, #16]	; (8010520 <XMC_WDT_Start+0x18>)
 8010510:	685b      	ldr	r3, [r3, #4]
 8010512:	f043 0301 	orr.w	r3, r3, #1
 8010516:	6053      	str	r3, [r2, #4]
}
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	50008000 	.word	0x50008000

08010524 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 8010524:	b480      	push	{r7}
 8010526:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 8010528:	4b03      	ldr	r3, [pc, #12]	; (8010538 <XMC_WDT_Service+0x14>)
 801052a:	4a04      	ldr	r2, [pc, #16]	; (801053c <XMC_WDT_Service+0x18>)
 801052c:	609a      	str	r2, [r3, #8]
}
 801052e:	46bd      	mov	sp, r7
 8010530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010534:	4770      	bx	lr
 8010536:	bf00      	nop
 8010538:	50008000 	.word	0x50008000
 801053c:	abadcafe 	.word	0xabadcafe

08010540 <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 8010540:	b480      	push	{r7}
 8010542:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 8010544:	4b03      	ldr	r3, [pc, #12]	; (8010554 <XMC_WDT_ClearAlarm+0x14>)
 8010546:	2201      	movs	r2, #1
 8010548:	61da      	str	r2, [r3, #28]
}
 801054a:	46bd      	mov	sp, r7
 801054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010550:	4770      	bx	lr
 8010552:	bf00      	nop
 8010554:	50008000 	.word	0x50008000

08010558 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 801055c:	f7ff ffd4 	bl	8010508 <XMC_WDT_Start>
}
 8010560:	bd80      	pop	{r7, pc}
 8010562:	bf00      	nop

08010564 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 8010568:	f7ff ffdc 	bl	8010524 <XMC_WDT_Service>
}
 801056c:	bd80      	pop	{r7, pc}
 801056e:	bf00      	nop

08010570 <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 8010574:	f7ff ffe4 	bl	8010540 <XMC_WDT_ClearAlarm>
}
 8010578:	bd80      	pop	{r7, pc}
 801057a:	bf00      	nop

0801057c <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	781b      	ldrb	r3, [r3, #0]
 8010588:	b25b      	sxtb	r3, r3
 801058a:	4618      	mov	r0, r3
 801058c:	f7ff ff7a 	bl	8010484 <__NVIC_DisableIRQ>
}
 8010590:	3708      	adds	r7, #8
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}
 8010596:	bf00      	nop

08010598 <main>:
int testv = 0;
bool is_drive_mode = false;
volatile uint16_t seconds_elapsed = 0;

int main(void)
{
 8010598:	b580      	push	{r7, lr}
 801059a:	b082      	sub	sp, #8
 801059c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 801059e:	2304      	movs	r3, #4
 80105a0:	71fb      	strb	r3, [r7, #7]
	uint8_t super_count = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	71bb      	strb	r3, [r7, #6]
	//jump :;
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80105a6:	f7f8 fd93 	bl	80090d0 <DAVE_Init>
 80105aa:	4603      	mov	r3, r0
 80105ac:	717b      	strb	r3, [r7, #5]

  if (status != DAVE_STATUS_SUCCESS)
 80105ae:	797b      	ldrb	r3, [r7, #5]
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d003      	beq.n	80105bc <main+0x24>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 80105b4:	481c      	ldr	r0, [pc, #112]	; (8010628 <main+0x90>)
 80105b6:	f001 fdff 	bl	80121b8 <puts>

    while(1U)
    {

    }
 80105ba:	e7fe      	b.n	80105ba <main+0x22>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */

	/*  enable here all the relays need to be HIGH at startup  */
	INTERRUPT_Disable(&INTERRUPT_0);
 80105bc:	481b      	ldr	r0, [pc, #108]	; (801062c <main+0x94>)
 80105be:	f7ff ffdd 	bl	801057c <INTERRUPT_Disable>
	VCU_init_on();
 80105c2:	f000 f837 	bl	8010634 <VCU_init_on>
	reset_on();
 80105c6:	f000 f88f 	bl	80106e8 <reset_on>
	//initialize_sd_card_and_transmit_cid();
	len_retStatus = mod_open4gModPort();
 80105ca:	f7fb fcaf 	bl	800bf2c <mod_open4gModPort>
 80105ce:	4603      	mov	r3, r0
 80105d0:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus) {
 80105d2:	79fb      	ldrb	r3, [r7, #7]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d10c      	bne.n	80105f2 <main+0x5a>
		len_retStatus = tm_setTimerCount(TM_1MS_TIMER_VAL);
 80105d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80105dc:	f7ef fea2 	bl	8000324 <tm_setTimerCount>
 80105e0:	4603      	mov	r3, r0
 80105e2:	71fb      	strb	r3, [r7, #7]
		if (E_RET_SUCCESS == len_retStatus) {
 80105e4:	79fb      	ldrb	r3, [r7, #7]
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d103      	bne.n	80105f2 <main+0x5a>
			len_retStatus = tm_startTimer();
 80105ea:	f7ef febb 	bl	8000364 <tm_startTimer>
 80105ee:	4603      	mov	r3, r0
 80105f0:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus) {
			}
		}
	}

	mod_enable4gModule();
 80105f2:	f7fb fc65 	bl	800bec0 <mod_enable4gModule>

	while (1U) {
		//SuperLooptime_Start();

	  /* Updating the inputs*/
	  InputCapture();
 80105f6:	f000 f831 	bl	801065c <InputCapture>


	  /* processing all inputs */
	  Process_Inputs();
 80105fa:	f000 f84d 	bl	8010698 <Process_Inputs>

		/* action loop , taking the action */
	  Vcu_OutPut();
 80105fe:	f000 f85f 	bl	80106c0 <Vcu_OutPut>

		//SuperLooptime_End();

		//SuperLooptime_Start();

		mod_receiveRsp();
 8010602:	f7fb fca1 	bl	800bf48 <mod_receiveRsp>
		if(false == gb_isMqttConnected)
 8010606:	4b0a      	ldr	r3, [pc, #40]	; (8010630 <main+0x98>)
 8010608:	781b      	ldrb	r3, [r3, #0]
 801060a:	f083 0301 	eor.w	r3, r3, #1
 801060e:	b2db      	uxtb	r3, r3
 8010610:	2b00      	cmp	r3, #0
 8010612:	d002      	beq.n	801061a <main+0x82>
		{
			mod_4gHandler();
 8010614:	f7fe f842 	bl	800e69c <mod_4gHandler>
 8010618:	e005      	b.n	8010626 <main+0x8e>
		}
		else if(true == gb_isMqttConnected)
 801061a:	4b05      	ldr	r3, [pc, #20]	; (8010630 <main+0x98>)
 801061c:	781b      	ldrb	r3, [r3, #0]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d001      	beq.n	8010626 <main+0x8e>
		{
//			mod_4gProcess();
			mod_pub10sPackExtractGps();
 8010622:	f7fe f993 	bl	800e94c <mod_pub10sPackExtractGps>
	 }
	  else if((!DIGITAL_IO_GetInput(&IGNI_POS1_IN_D)))
	  {
		  super_count = 0;
	  }*/
  }
 8010626:	e7e6      	b.n	80105f6 <main+0x5e>
 8010628:	080146a4 	.word	0x080146a4
 801062c:	08013680 	.word	0x08013680
 8010630:	1fff5294 	.word	0x1fff5294

08010634 <VCU_init_on>:
}

void VCU_init_on(void) {
 8010634:	b580      	push	{r7, lr}
 8010636:	af00      	add	r7, sp, #0
	/* enable here all the relays need to be HIGH at startup */

		//set_PIN(&COMM_PWR_ENB_D, HIGH);

		/* enable common power to IO */
		DIGITAL_IO_SetOutputHigh(&COMM_3V3_PWR_EN);
 8010638:	4805      	ldr	r0, [pc, #20]	; (8010650 <VCU_init_on+0x1c>)
 801063a:	f7ff ff55 	bl	80104e8 <DIGITAL_IO_SetOutputHigh>

		/* 3v3 enable */
		DIGITAL_IO_SetOutputHigh(&INPUTS_3V3_PWR_EN);
 801063e:	4805      	ldr	r0, [pc, #20]	; (8010654 <VCU_init_on+0x20>)
 8010640:	f7ff ff52 	bl	80104e8 <DIGITAL_IO_SetOutputHigh>


		DIGITAL_IO_SetOutputHigh(&SENSOR_3V3_PWR_EN);
 8010644:	4804      	ldr	r0, [pc, #16]	; (8010658 <VCU_init_on+0x24>)
 8010646:	f7ff ff4f 	bl	80104e8 <DIGITAL_IO_SetOutputHigh>

	/* comm initialization */
	Io_Exp_Init();
 801064a:	f7ff fdd9 	bl	8010200 <Io_Exp_Init>

}
 801064e:	bd80      	pop	{r7, pc}
 8010650:	08013a80 	.word	0x08013a80
 8010654:	08013a6c 	.word	0x08013a6c
 8010658:	08013a94 	.word	0x08013a94

0801065c <InputCapture>:

void InputCapture(void) {
 801065c:	b580      	push	{r7, lr}
 801065e:	af00      	add	r7, sp, #0
	uart_debugg(
 8010660:	4809      	ldr	r0, [pc, #36]	; (8010688 <InputCapture+0x2c>)
 8010662:	f7ff fdc3 	bl	80101ec <uart_debugg>
			"************************in input capture************************\n");
	CState = PreState = 1;
 8010666:	4b09      	ldr	r3, [pc, #36]	; (801068c <InputCapture+0x30>)
 8010668:	2201      	movs	r2, #1
 801066a:	701a      	strb	r2, [r3, #0]
 801066c:	4b07      	ldr	r3, [pc, #28]	; (801068c <InputCapture+0x30>)
 801066e:	781a      	ldrb	r2, [r3, #0]
 8010670:	4b07      	ldr	r3, [pc, #28]	; (8010690 <InputCapture+0x34>)
 8010672:	701a      	strb	r2, [r3, #0]
	/* Updating the inputs */
	Input_Capture();
 8010674:	f7f4 ff0e 	bl	8005494 <Input_Capture>
	PreState = 0;
 8010678:	4b04      	ldr	r3, [pc, #16]	; (801068c <InputCapture+0x30>)
 801067a:	2200      	movs	r2, #0
 801067c:	701a      	strb	r2, [r3, #0]
	uart_debugg("************************exit input capture************************\n");
 801067e:	4805      	ldr	r0, [pc, #20]	; (8010694 <InputCapture+0x38>)
 8010680:	f7ff fdb4 	bl	80101ec <uart_debugg>
}
 8010684:	bd80      	pop	{r7, pc}
 8010686:	bf00      	nop
 8010688:	080146c4 	.word	0x080146c4
 801068c:	1fff47d3 	.word	0x1fff47d3
 8010690:	1fff42fc 	.word	0x1fff42fc
 8010694:	08014708 	.word	0x08014708

08010698 <Process_Inputs>:

void Process_Inputs(void)
{
 8010698:	b580      	push	{r7, lr}
 801069a:	af00      	add	r7, sp, #0
	uart_debugg("************************in process input************************\n");
 801069c:	4805      	ldr	r0, [pc, #20]	; (80106b4 <Process_Inputs+0x1c>)
 801069e:	f7ff fda5 	bl	80101ec <uart_debugg>
	CState = 2;
 80106a2:	4b05      	ldr	r3, [pc, #20]	; (80106b8 <Process_Inputs+0x20>)
 80106a4:	2202      	movs	r2, #2
 80106a6:	701a      	strb	r2, [r3, #0]
	/* Updating the outputs */
	Process_VcuOutputs_Update();
 80106a8:	f7f0 fa0a 	bl	8000ac0 <Process_VcuOutputs_Update>
	uart_debugg("***********************exit process input**************************\n");
 80106ac:	4803      	ldr	r0, [pc, #12]	; (80106bc <Process_Inputs+0x24>)
 80106ae:	f7ff fd9d 	bl	80101ec <uart_debugg>
}
 80106b2:	bd80      	pop	{r7, pc}
 80106b4:	0801474c 	.word	0x0801474c
 80106b8:	1fff42fc 	.word	0x1fff42fc
 80106bc:	08014790 	.word	0x08014790

080106c0 <Vcu_OutPut>:

void Vcu_OutPut(void)
{
 80106c0:	b580      	push	{r7, lr}
 80106c2:	af00      	add	r7, sp, #0
	uart_debugg("***********************in vcu output*****************************\n");
 80106c4:	4805      	ldr	r0, [pc, #20]	; (80106dc <Vcu_OutPut+0x1c>)
 80106c6:	f7ff fd91 	bl	80101ec <uart_debugg>
	CState = 3;
 80106ca:	4b05      	ldr	r3, [pc, #20]	; (80106e0 <Vcu_OutPut+0x20>)
 80106cc:	2203      	movs	r2, #3
 80106ce:	701a      	strb	r2, [r3, #0]
	/* Taking the action */
	OutPutAction_Update();
 80106d0:	f7f1 fb54 	bl	8001d7c <OutPutAction_Update>
	uart_debugg("************************exit vcu output******************************\n");
 80106d4:	4803      	ldr	r0, [pc, #12]	; (80106e4 <Vcu_OutPut+0x24>)
 80106d6:	f7ff fd89 	bl	80101ec <uart_debugg>
}
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	080147d8 	.word	0x080147d8
 80106e0:	1fff42fc 	.word	0x1fff42fc
 80106e4:	0801481c 	.word	0x0801481c

080106e8 <reset_on>:

void reset_on(void)
{
 80106e8:	b580      	push	{r7, lr}
 80106ea:	af00      	add	r7, sp, #0
	//WATCHDOG_Stop();
	Delay(100);
 80106ec:	2064      	movs	r0, #100	; 0x64
 80106ee:	f7ff fea1 	bl	8010434 <Delay>
	WATCHDOG_Start();
 80106f2:	f7ff ff31 	bl	8010558 <WATCHDOG_Start>
}
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <NMI_Handler>:

void NMI_Handler(void)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	af00      	add	r7, sp, #0
	//if(!PreState)
	{
		//PreState = CState;
	//uart_debugg("in watchdog");
	WATCHDOG_ClearAlarm();
 80106fc:	f7ff ff38 	bl	8010570 <WATCHDOG_ClearAlarm>
	//XMC_SCU_cle
	XMC_SCU_INTERRUPT_ClearEventStatus((XMC_SCU_INTERRUPT_EVENT_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8010700:	2001      	movs	r0, #1
 8010702:	f7f1 fdff 	bl	8002304 <XMC_SCU_INTERRUPT_ClearEventStatus>
	WATCHDOG_Service();
 8010706:	f7ff ff2d 	bl	8010564 <WATCHDOG_Service>
	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
	//uart_debugg("exit watchdog");
	}
}
 801070a:	bd80      	pop	{r7, pc}

0801070c <CCU43_1_IRQHandler>:

//used for 12V battery charging during parked mode. 10 seconds timer
void timer_irq(void)
{
 801070c:	b480      	push	{r7}
 801070e:	af00      	add	r7, sp, #0
	seconds_elapsed++;
 8010710:	4b05      	ldr	r3, [pc, #20]	; (8010728 <CCU43_1_IRQHandler+0x1c>)
 8010712:	881b      	ldrh	r3, [r3, #0]
 8010714:	b29b      	uxth	r3, r3
 8010716:	3301      	adds	r3, #1
 8010718:	b29a      	uxth	r2, r3
 801071a:	4b03      	ldr	r3, [pc, #12]	; (8010728 <CCU43_1_IRQHandler+0x1c>)
 801071c:	801a      	strh	r2, [r3, #0]
}
 801071e:	46bd      	mov	sp, r7
 8010720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010724:	4770      	bx	lr
 8010726:	bf00      	nop
 8010728:	1fff47d4 	.word	0x1fff47d4

0801072c <log>:
 801072c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010730:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8010824 <log+0xf8>
 8010734:	b08b      	sub	sp, #44	; 0x2c
 8010736:	4606      	mov	r6, r0
 8010738:	460f      	mov	r7, r1
 801073a:	f000 f879 	bl	8010830 <__ieee754_log>
 801073e:	f998 3000 	ldrsb.w	r3, [r8]
 8010742:	3301      	adds	r3, #1
 8010744:	4604      	mov	r4, r0
 8010746:	460d      	mov	r5, r1
 8010748:	d00b      	beq.n	8010762 <log+0x36>
 801074a:	4630      	mov	r0, r6
 801074c:	4639      	mov	r1, r7
 801074e:	f000 fa57 	bl	8010c00 <__fpclassifyd>
 8010752:	b130      	cbz	r0, 8010762 <log+0x36>
 8010754:	4630      	mov	r0, r6
 8010756:	4639      	mov	r1, r7
 8010758:	2200      	movs	r2, #0
 801075a:	2300      	movs	r3, #0
 801075c:	f000 fecc 	bl	80114f8 <__aeabi_dcmpgt>
 8010760:	b120      	cbz	r0, 801076c <log+0x40>
 8010762:	4620      	mov	r0, r4
 8010764:	4629      	mov	r1, r5
 8010766:	b00b      	add	sp, #44	; 0x2c
 8010768:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801076c:	f898 4000 	ldrb.w	r4, [r8]
 8010770:	4b29      	ldr	r3, [pc, #164]	; (8010818 <log+0xec>)
 8010772:	9008      	str	r0, [sp, #32]
 8010774:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010778:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801077c:	9301      	str	r3, [sp, #4]
 801077e:	b99c      	cbnz	r4, 80107a8 <log+0x7c>
 8010780:	4d26      	ldr	r5, [pc, #152]	; (801081c <log+0xf0>)
 8010782:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8010786:	4630      	mov	r0, r6
 8010788:	4639      	mov	r1, r7
 801078a:	2200      	movs	r2, #0
 801078c:	2300      	movs	r3, #0
 801078e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010792:	f000 fe89 	bl	80114a8 <__aeabi_dcmpeq>
 8010796:	2800      	cmp	r0, #0
 8010798:	d135      	bne.n	8010806 <log+0xda>
 801079a:	2301      	movs	r3, #1
 801079c:	9300      	str	r3, [sp, #0]
 801079e:	4668      	mov	r0, sp
 80107a0:	f000 fa5a 	bl	8010c58 <matherr>
 80107a4:	b9a8      	cbnz	r0, 80107d2 <log+0xa6>
 80107a6:	e010      	b.n	80107ca <log+0x9e>
 80107a8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8010828 <log+0xfc>
 80107ac:	f04f 0800 	mov.w	r8, #0
 80107b0:	4630      	mov	r0, r6
 80107b2:	4639      	mov	r1, r7
 80107b4:	2200      	movs	r2, #0
 80107b6:	2300      	movs	r3, #0
 80107b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80107bc:	f000 fe74 	bl	80114a8 <__aeabi_dcmpeq>
 80107c0:	b998      	cbnz	r0, 80107ea <log+0xbe>
 80107c2:	2301      	movs	r3, #1
 80107c4:	2c02      	cmp	r4, #2
 80107c6:	9300      	str	r3, [sp, #0]
 80107c8:	d1e9      	bne.n	801079e <log+0x72>
 80107ca:	f001 fa07 	bl	8011bdc <__errno>
 80107ce:	2321      	movs	r3, #33	; 0x21
 80107d0:	6003      	str	r3, [r0, #0]
 80107d2:	4813      	ldr	r0, [pc, #76]	; (8010820 <log+0xf4>)
 80107d4:	f000 fa42 	bl	8010c5c <nan>
 80107d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80107dc:	9b08      	ldr	r3, [sp, #32]
 80107de:	b9ab      	cbnz	r3, 801080c <log+0xe0>
 80107e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80107e4:	b00b      	add	sp, #44	; 0x2c
 80107e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80107ea:	2302      	movs	r3, #2
 80107ec:	429c      	cmp	r4, r3
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	d004      	beq.n	80107fc <log+0xd0>
 80107f2:	4668      	mov	r0, sp
 80107f4:	f000 fa30 	bl	8010c58 <matherr>
 80107f8:	2800      	cmp	r0, #0
 80107fa:	d1ef      	bne.n	80107dc <log+0xb0>
 80107fc:	f001 f9ee 	bl	8011bdc <__errno>
 8010800:	2322      	movs	r3, #34	; 0x22
 8010802:	6003      	str	r3, [r0, #0]
 8010804:	e7ea      	b.n	80107dc <log+0xb0>
 8010806:	2302      	movs	r3, #2
 8010808:	9300      	str	r3, [sp, #0]
 801080a:	e7f2      	b.n	80107f2 <log+0xc6>
 801080c:	f001 f9e6 	bl	8011bdc <__errno>
 8010810:	9b08      	ldr	r3, [sp, #32]
 8010812:	6003      	str	r3, [r0, #0]
 8010814:	e7e4      	b.n	80107e0 <log+0xb4>
 8010816:	bf00      	nop
 8010818:	08014864 	.word	0x08014864
 801081c:	c7efffff 	.word	0xc7efffff
 8010820:	08014868 	.word	0x08014868
 8010824:	1fff42fd 	.word	0x1fff42fd
 8010828:	fff00000 	.word	0xfff00000
 801082c:	00000000 	.word	0x00000000

08010830 <__ieee754_log>:
 8010830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010834:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010838:	b085      	sub	sp, #20
 801083a:	4606      	mov	r6, r0
 801083c:	460f      	mov	r7, r1
 801083e:	460b      	mov	r3, r1
 8010840:	da5a      	bge.n	80108f8 <__ieee754_log+0xc8>
 8010842:	4602      	mov	r2, r0
 8010844:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010848:	4322      	orrs	r2, r4
 801084a:	f000 80f6 	beq.w	8010a3a <__ieee754_log+0x20a>
 801084e:	2900      	cmp	r1, #0
 8010850:	f2c0 8172 	blt.w	8010b38 <__ieee754_log+0x308>
 8010854:	2200      	movs	r2, #0
 8010856:	4bde      	ldr	r3, [pc, #888]	; (8010bd0 <__ieee754_log+0x3a0>)
 8010858:	f000 fbbe 	bl	8010fd8 <__aeabi_dmul>
 801085c:	460b      	mov	r3, r1
 801085e:	460f      	mov	r7, r1
 8010860:	49dc      	ldr	r1, [pc, #880]	; (8010bd4 <__ieee754_log+0x3a4>)
 8010862:	428b      	cmp	r3, r1
 8010864:	4606      	mov	r6, r0
 8010866:	f06f 0235 	mvn.w	r2, #53	; 0x35
 801086a:	dc4a      	bgt.n	8010902 <__ieee754_log+0xd2>
 801086c:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010870:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 8010874:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8010878:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 801087c:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8010880:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 8010884:	151b      	asrs	r3, r3, #20
 8010886:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801088a:	ea41 0705 	orr.w	r7, r1, r5
 801088e:	189c      	adds	r4, r3, r2
 8010890:	4630      	mov	r0, r6
 8010892:	2200      	movs	r2, #0
 8010894:	4bd0      	ldr	r3, [pc, #832]	; (8010bd8 <__ieee754_log+0x3a8>)
 8010896:	4639      	mov	r1, r7
 8010898:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 801089c:	f000 f9e8 	bl	8010c70 <__aeabi_dsub>
 80108a0:	1cab      	adds	r3, r5, #2
 80108a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80108a6:	2b02      	cmp	r3, #2
 80108a8:	4682      	mov	sl, r0
 80108aa:	468b      	mov	fp, r1
 80108ac:	f04f 0200 	mov.w	r2, #0
 80108b0:	dc30      	bgt.n	8010914 <__ieee754_log+0xe4>
 80108b2:	2300      	movs	r3, #0
 80108b4:	f000 fdf8 	bl	80114a8 <__aeabi_dcmpeq>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	f000 80c7 	beq.w	8010a4c <__ieee754_log+0x21c>
 80108be:	2c00      	cmp	r4, #0
 80108c0:	f000 8143 	beq.w	8010b4a <__ieee754_log+0x31a>
 80108c4:	4620      	mov	r0, r4
 80108c6:	f000 fb21 	bl	8010f0c <__aeabi_i2d>
 80108ca:	a3ad      	add	r3, pc, #692	; (adr r3, 8010b80 <__ieee754_log+0x350>)
 80108cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108d0:	4606      	mov	r6, r0
 80108d2:	460f      	mov	r7, r1
 80108d4:	f000 fb80 	bl	8010fd8 <__aeabi_dmul>
 80108d8:	a3ab      	add	r3, pc, #684	; (adr r3, 8010b88 <__ieee754_log+0x358>)
 80108da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108de:	4604      	mov	r4, r0
 80108e0:	460d      	mov	r5, r1
 80108e2:	4630      	mov	r0, r6
 80108e4:	4639      	mov	r1, r7
 80108e6:	f000 fb77 	bl	8010fd8 <__aeabi_dmul>
 80108ea:	4602      	mov	r2, r0
 80108ec:	460b      	mov	r3, r1
 80108ee:	4620      	mov	r0, r4
 80108f0:	4629      	mov	r1, r5
 80108f2:	f000 f9bf 	bl	8010c74 <__adddf3>
 80108f6:	e00a      	b.n	801090e <__ieee754_log+0xde>
 80108f8:	49b6      	ldr	r1, [pc, #728]	; (8010bd4 <__ieee754_log+0x3a4>)
 80108fa:	428b      	cmp	r3, r1
 80108fc:	f04f 0200 	mov.w	r2, #0
 8010900:	ddb4      	ble.n	801086c <__ieee754_log+0x3c>
 8010902:	4630      	mov	r0, r6
 8010904:	4639      	mov	r1, r7
 8010906:	4632      	mov	r2, r6
 8010908:	463b      	mov	r3, r7
 801090a:	f000 f9b3 	bl	8010c74 <__adddf3>
 801090e:	b005      	add	sp, #20
 8010910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010914:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010918:	f000 f9ac 	bl	8010c74 <__adddf3>
 801091c:	4602      	mov	r2, r0
 801091e:	460b      	mov	r3, r1
 8010920:	4650      	mov	r0, sl
 8010922:	4659      	mov	r1, fp
 8010924:	f000 fc82 	bl	801122c <__aeabi_ddiv>
 8010928:	4606      	mov	r6, r0
 801092a:	460f      	mov	r7, r1
 801092c:	4620      	mov	r0, r4
 801092e:	e9cd 6700 	strd	r6, r7, [sp]
 8010932:	f000 faeb 	bl	8010f0c <__aeabi_i2d>
 8010936:	4632      	mov	r2, r6
 8010938:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801093c:	463b      	mov	r3, r7
 801093e:	4630      	mov	r0, r6
 8010940:	4639      	mov	r1, r7
 8010942:	f000 fb49 	bl	8010fd8 <__aeabi_dmul>
 8010946:	4602      	mov	r2, r0
 8010948:	460b      	mov	r3, r1
 801094a:	4680      	mov	r8, r0
 801094c:	4689      	mov	r9, r1
 801094e:	f000 fb43 	bl	8010fd8 <__aeabi_dmul>
 8010952:	a38f      	add	r3, pc, #572	; (adr r3, 8010b90 <__ieee754_log+0x360>)
 8010954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010958:	4606      	mov	r6, r0
 801095a:	460f      	mov	r7, r1
 801095c:	f000 fb3c 	bl	8010fd8 <__aeabi_dmul>
 8010960:	a38d      	add	r3, pc, #564	; (adr r3, 8010b98 <__ieee754_log+0x368>)
 8010962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010966:	f000 f985 	bl	8010c74 <__adddf3>
 801096a:	4632      	mov	r2, r6
 801096c:	463b      	mov	r3, r7
 801096e:	f000 fb33 	bl	8010fd8 <__aeabi_dmul>
 8010972:	a38b      	add	r3, pc, #556	; (adr r3, 8010ba0 <__ieee754_log+0x370>)
 8010974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010978:	f000 f97c 	bl	8010c74 <__adddf3>
 801097c:	4632      	mov	r2, r6
 801097e:	463b      	mov	r3, r7
 8010980:	f000 fb2a 	bl	8010fd8 <__aeabi_dmul>
 8010984:	a388      	add	r3, pc, #544	; (adr r3, 8010ba8 <__ieee754_log+0x378>)
 8010986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801098a:	f000 f973 	bl	8010c74 <__adddf3>
 801098e:	4642      	mov	r2, r8
 8010990:	464b      	mov	r3, r9
 8010992:	f000 fb21 	bl	8010fd8 <__aeabi_dmul>
 8010996:	a386      	add	r3, pc, #536	; (adr r3, 8010bb0 <__ieee754_log+0x380>)
 8010998:	e9d3 2300 	ldrd	r2, r3, [r3]
 801099c:	4680      	mov	r8, r0
 801099e:	4689      	mov	r9, r1
 80109a0:	4630      	mov	r0, r6
 80109a2:	4639      	mov	r1, r7
 80109a4:	f000 fb18 	bl	8010fd8 <__aeabi_dmul>
 80109a8:	a383      	add	r3, pc, #524	; (adr r3, 8010bb8 <__ieee754_log+0x388>)
 80109aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109ae:	f000 f961 	bl	8010c74 <__adddf3>
 80109b2:	4632      	mov	r2, r6
 80109b4:	463b      	mov	r3, r7
 80109b6:	f000 fb0f 	bl	8010fd8 <__aeabi_dmul>
 80109ba:	a381      	add	r3, pc, #516	; (adr r3, 8010bc0 <__ieee754_log+0x390>)
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f000 f958 	bl	8010c74 <__adddf3>
 80109c4:	4632      	mov	r2, r6
 80109c6:	463b      	mov	r3, r7
 80109c8:	f000 fb06 	bl	8010fd8 <__aeabi_dmul>
 80109cc:	460b      	mov	r3, r1
 80109ce:	4602      	mov	r2, r0
 80109d0:	4649      	mov	r1, r9
 80109d2:	4640      	mov	r0, r8
 80109d4:	f000 f94e 	bl	8010c74 <__adddf3>
 80109d8:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80109dc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80109e0:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80109e4:	3551      	adds	r5, #81	; 0x51
 80109e6:	431d      	orrs	r5, r3
 80109e8:	2d00      	cmp	r5, #0
 80109ea:	4606      	mov	r6, r0
 80109ec:	460f      	mov	r7, r1
 80109ee:	dd53      	ble.n	8010a98 <__ieee754_log+0x268>
 80109f0:	2200      	movs	r2, #0
 80109f2:	4b7a      	ldr	r3, [pc, #488]	; (8010bdc <__ieee754_log+0x3ac>)
 80109f4:	4650      	mov	r0, sl
 80109f6:	4659      	mov	r1, fp
 80109f8:	f000 faee 	bl	8010fd8 <__aeabi_dmul>
 80109fc:	4652      	mov	r2, sl
 80109fe:	465b      	mov	r3, fp
 8010a00:	f000 faea 	bl	8010fd8 <__aeabi_dmul>
 8010a04:	4680      	mov	r8, r0
 8010a06:	4689      	mov	r9, r1
 8010a08:	2c00      	cmp	r4, #0
 8010a0a:	d160      	bne.n	8010ace <__ieee754_log+0x29e>
 8010a0c:	4632      	mov	r2, r6
 8010a0e:	463b      	mov	r3, r7
 8010a10:	f000 f930 	bl	8010c74 <__adddf3>
 8010a14:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010a18:	f000 fade 	bl	8010fd8 <__aeabi_dmul>
 8010a1c:	4602      	mov	r2, r0
 8010a1e:	460b      	mov	r3, r1
 8010a20:	4640      	mov	r0, r8
 8010a22:	4649      	mov	r1, r9
 8010a24:	f000 f924 	bl	8010c70 <__aeabi_dsub>
 8010a28:	4602      	mov	r2, r0
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	4650      	mov	r0, sl
 8010a2e:	4659      	mov	r1, fp
 8010a30:	f000 f91e 	bl	8010c70 <__aeabi_dsub>
 8010a34:	b005      	add	sp, #20
 8010a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a3a:	2200      	movs	r2, #0
 8010a3c:	2300      	movs	r3, #0
 8010a3e:	2000      	movs	r0, #0
 8010a40:	4967      	ldr	r1, [pc, #412]	; (8010be0 <__ieee754_log+0x3b0>)
 8010a42:	f000 fbf3 	bl	801122c <__aeabi_ddiv>
 8010a46:	b005      	add	sp, #20
 8010a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4c:	4652      	mov	r2, sl
 8010a4e:	465b      	mov	r3, fp
 8010a50:	4650      	mov	r0, sl
 8010a52:	4659      	mov	r1, fp
 8010a54:	f000 fac0 	bl	8010fd8 <__aeabi_dmul>
 8010a58:	a35b      	add	r3, pc, #364	; (adr r3, 8010bc8 <__ieee754_log+0x398>)
 8010a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a5e:	4606      	mov	r6, r0
 8010a60:	460f      	mov	r7, r1
 8010a62:	4650      	mov	r0, sl
 8010a64:	4659      	mov	r1, fp
 8010a66:	f000 fab7 	bl	8010fd8 <__aeabi_dmul>
 8010a6a:	4602      	mov	r2, r0
 8010a6c:	460b      	mov	r3, r1
 8010a6e:	2000      	movs	r0, #0
 8010a70:	495a      	ldr	r1, [pc, #360]	; (8010bdc <__ieee754_log+0x3ac>)
 8010a72:	f000 f8fd 	bl	8010c70 <__aeabi_dsub>
 8010a76:	4602      	mov	r2, r0
 8010a78:	460b      	mov	r3, r1
 8010a7a:	4630      	mov	r0, r6
 8010a7c:	4639      	mov	r1, r7
 8010a7e:	f000 faab 	bl	8010fd8 <__aeabi_dmul>
 8010a82:	4606      	mov	r6, r0
 8010a84:	460f      	mov	r7, r1
 8010a86:	2c00      	cmp	r4, #0
 8010a88:	d162      	bne.n	8010b50 <__ieee754_log+0x320>
 8010a8a:	4650      	mov	r0, sl
 8010a8c:	4659      	mov	r1, fp
 8010a8e:	4632      	mov	r2, r6
 8010a90:	463b      	mov	r3, r7
 8010a92:	f000 f8ed 	bl	8010c70 <__aeabi_dsub>
 8010a96:	e73a      	b.n	801090e <__ieee754_log+0xde>
 8010a98:	2c00      	cmp	r4, #0
 8010a9a:	f000 80a3 	beq.w	8010be4 <__ieee754_log+0x3b4>
 8010a9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8010aa2:	a337      	add	r3, pc, #220	; (adr r3, 8010b80 <__ieee754_log+0x350>)
 8010aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010aa8:	4640      	mov	r0, r8
 8010aaa:	4649      	mov	r1, r9
 8010aac:	f000 fa94 	bl	8010fd8 <__aeabi_dmul>
 8010ab0:	4632      	mov	r2, r6
 8010ab2:	463b      	mov	r3, r7
 8010ab4:	4604      	mov	r4, r0
 8010ab6:	460d      	mov	r5, r1
 8010ab8:	4650      	mov	r0, sl
 8010aba:	4659      	mov	r1, fp
 8010abc:	f000 f8d8 	bl	8010c70 <__aeabi_dsub>
 8010ac0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010ac4:	f000 fa88 	bl	8010fd8 <__aeabi_dmul>
 8010ac8:	4606      	mov	r6, r0
 8010aca:	460f      	mov	r7, r1
 8010acc:	e04c      	b.n	8010b68 <__ieee754_log+0x338>
 8010ace:	a32c      	add	r3, pc, #176	; (adr r3, 8010b80 <__ieee754_log+0x350>)
 8010ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ad4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010ad8:	f000 fa7e 	bl	8010fd8 <__aeabi_dmul>
 8010adc:	4632      	mov	r2, r6
 8010ade:	463b      	mov	r3, r7
 8010ae0:	4604      	mov	r4, r0
 8010ae2:	460d      	mov	r5, r1
 8010ae4:	4640      	mov	r0, r8
 8010ae6:	4649      	mov	r1, r9
 8010ae8:	f000 f8c4 	bl	8010c74 <__adddf3>
 8010aec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010af0:	f000 fa72 	bl	8010fd8 <__aeabi_dmul>
 8010af4:	a324      	add	r3, pc, #144	; (adr r3, 8010b88 <__ieee754_log+0x358>)
 8010af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010afa:	4606      	mov	r6, r0
 8010afc:	460f      	mov	r7, r1
 8010afe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8010b02:	f000 fa69 	bl	8010fd8 <__aeabi_dmul>
 8010b06:	4602      	mov	r2, r0
 8010b08:	460b      	mov	r3, r1
 8010b0a:	4630      	mov	r0, r6
 8010b0c:	4639      	mov	r1, r7
 8010b0e:	f000 f8b1 	bl	8010c74 <__adddf3>
 8010b12:	4602      	mov	r2, r0
 8010b14:	460b      	mov	r3, r1
 8010b16:	4640      	mov	r0, r8
 8010b18:	4649      	mov	r1, r9
 8010b1a:	f000 f8a9 	bl	8010c70 <__aeabi_dsub>
 8010b1e:	4652      	mov	r2, sl
 8010b20:	465b      	mov	r3, fp
 8010b22:	f000 f8a5 	bl	8010c70 <__aeabi_dsub>
 8010b26:	4602      	mov	r2, r0
 8010b28:	460b      	mov	r3, r1
 8010b2a:	4620      	mov	r0, r4
 8010b2c:	4629      	mov	r1, r5
 8010b2e:	f000 f89f 	bl	8010c70 <__aeabi_dsub>
 8010b32:	b005      	add	sp, #20
 8010b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b38:	4602      	mov	r2, r0
 8010b3a:	460b      	mov	r3, r1
 8010b3c:	f000 f898 	bl	8010c70 <__aeabi_dsub>
 8010b40:	2200      	movs	r2, #0
 8010b42:	2300      	movs	r3, #0
 8010b44:	f000 fb72 	bl	801122c <__aeabi_ddiv>
 8010b48:	e6e1      	b.n	801090e <__ieee754_log+0xde>
 8010b4a:	2000      	movs	r0, #0
 8010b4c:	2100      	movs	r1, #0
 8010b4e:	e6de      	b.n	801090e <__ieee754_log+0xde>
 8010b50:	4620      	mov	r0, r4
 8010b52:	f000 f9db 	bl	8010f0c <__aeabi_i2d>
 8010b56:	a30a      	add	r3, pc, #40	; (adr r3, 8010b80 <__ieee754_log+0x350>)
 8010b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b5c:	4680      	mov	r8, r0
 8010b5e:	4689      	mov	r9, r1
 8010b60:	f000 fa3a 	bl	8010fd8 <__aeabi_dmul>
 8010b64:	4604      	mov	r4, r0
 8010b66:	460d      	mov	r5, r1
 8010b68:	a307      	add	r3, pc, #28	; (adr r3, 8010b88 <__ieee754_log+0x358>)
 8010b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6e:	4640      	mov	r0, r8
 8010b70:	4649      	mov	r1, r9
 8010b72:	f000 fa31 	bl	8010fd8 <__aeabi_dmul>
 8010b76:	4602      	mov	r2, r0
 8010b78:	460b      	mov	r3, r1
 8010b7a:	4630      	mov	r0, r6
 8010b7c:	4639      	mov	r1, r7
 8010b7e:	e7cc      	b.n	8010b1a <__ieee754_log+0x2ea>
 8010b80:	fee00000 	.word	0xfee00000
 8010b84:	3fe62e42 	.word	0x3fe62e42
 8010b88:	35793c76 	.word	0x35793c76
 8010b8c:	3dea39ef 	.word	0x3dea39ef
 8010b90:	df3e5244 	.word	0xdf3e5244
 8010b94:	3fc2f112 	.word	0x3fc2f112
 8010b98:	96cb03de 	.word	0x96cb03de
 8010b9c:	3fc74664 	.word	0x3fc74664
 8010ba0:	94229359 	.word	0x94229359
 8010ba4:	3fd24924 	.word	0x3fd24924
 8010ba8:	55555593 	.word	0x55555593
 8010bac:	3fe55555 	.word	0x3fe55555
 8010bb0:	d078c69f 	.word	0xd078c69f
 8010bb4:	3fc39a09 	.word	0x3fc39a09
 8010bb8:	1d8e78af 	.word	0x1d8e78af
 8010bbc:	3fcc71c5 	.word	0x3fcc71c5
 8010bc0:	9997fa04 	.word	0x9997fa04
 8010bc4:	3fd99999 	.word	0x3fd99999
 8010bc8:	55555555 	.word	0x55555555
 8010bcc:	3fd55555 	.word	0x3fd55555
 8010bd0:	43500000 	.word	0x43500000
 8010bd4:	7fefffff 	.word	0x7fefffff
 8010bd8:	3ff00000 	.word	0x3ff00000
 8010bdc:	3fe00000 	.word	0x3fe00000
 8010be0:	c3500000 	.word	0xc3500000
 8010be4:	4602      	mov	r2, r0
 8010be6:	460b      	mov	r3, r1
 8010be8:	4650      	mov	r0, sl
 8010bea:	4659      	mov	r1, fp
 8010bec:	f000 f840 	bl	8010c70 <__aeabi_dsub>
 8010bf0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010bf4:	f000 f9f0 	bl	8010fd8 <__aeabi_dmul>
 8010bf8:	e716      	b.n	8010a28 <__ieee754_log+0x1f8>
 8010bfa:	bf00      	nop
 8010bfc:	f3af 8000 	nop.w

08010c00 <__fpclassifyd>:
 8010c00:	b410      	push	{r4}
 8010c02:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 8010c06:	460b      	mov	r3, r1
 8010c08:	d008      	beq.n	8010c1c <__fpclassifyd+0x1c>
 8010c0a:	4a11      	ldr	r2, [pc, #68]	; (8010c50 <__fpclassifyd+0x50>)
 8010c0c:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010c10:	4291      	cmp	r1, r2
 8010c12:	d808      	bhi.n	8010c26 <__fpclassifyd+0x26>
 8010c14:	2004      	movs	r0, #4
 8010c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c1a:	4770      	bx	lr
 8010c1c:	b918      	cbnz	r0, 8010c26 <__fpclassifyd+0x26>
 8010c1e:	2002      	movs	r0, #2
 8010c20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c24:	4770      	bx	lr
 8010c26:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8010c2a:	4a09      	ldr	r2, [pc, #36]	; (8010c50 <__fpclassifyd+0x50>)
 8010c2c:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010c30:	4293      	cmp	r3, r2
 8010c32:	d9ef      	bls.n	8010c14 <__fpclassifyd+0x14>
 8010c34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010c38:	d201      	bcs.n	8010c3e <__fpclassifyd+0x3e>
 8010c3a:	2003      	movs	r0, #3
 8010c3c:	e7eb      	b.n	8010c16 <__fpclassifyd+0x16>
 8010c3e:	4b05      	ldr	r3, [pc, #20]	; (8010c54 <__fpclassifyd+0x54>)
 8010c40:	429c      	cmp	r4, r3
 8010c42:	d001      	beq.n	8010c48 <__fpclassifyd+0x48>
 8010c44:	2000      	movs	r0, #0
 8010c46:	e7e6      	b.n	8010c16 <__fpclassifyd+0x16>
 8010c48:	fab0 f080 	clz	r0, r0
 8010c4c:	0940      	lsrs	r0, r0, #5
 8010c4e:	e7e2      	b.n	8010c16 <__fpclassifyd+0x16>
 8010c50:	7fdfffff 	.word	0x7fdfffff
 8010c54:	7ff00000 	.word	0x7ff00000

08010c58 <matherr>:
 8010c58:	2000      	movs	r0, #0
 8010c5a:	4770      	bx	lr

08010c5c <nan>:
 8010c5c:	2000      	movs	r0, #0
 8010c5e:	4901      	ldr	r1, [pc, #4]	; (8010c64 <nan+0x8>)
 8010c60:	4770      	bx	lr
 8010c62:	bf00      	nop
 8010c64:	7ff80000 	.word	0x7ff80000

08010c68 <__aeabi_drsub>:
 8010c68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010c6c:	e002      	b.n	8010c74 <__adddf3>
 8010c6e:	bf00      	nop

08010c70 <__aeabi_dsub>:
 8010c70:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08010c74 <__adddf3>:
 8010c74:	b530      	push	{r4, r5, lr}
 8010c76:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010c7a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010c7e:	ea94 0f05 	teq	r4, r5
 8010c82:	bf08      	it	eq
 8010c84:	ea90 0f02 	teqeq	r0, r2
 8010c88:	bf1f      	itttt	ne
 8010c8a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010c8e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8010c92:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8010c96:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010c9a:	f000 80e2 	beq.w	8010e62 <__adddf3+0x1ee>
 8010c9e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8010ca2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8010ca6:	bfb8      	it	lt
 8010ca8:	426d      	neglt	r5, r5
 8010caa:	dd0c      	ble.n	8010cc6 <__adddf3+0x52>
 8010cac:	442c      	add	r4, r5
 8010cae:	ea80 0202 	eor.w	r2, r0, r2
 8010cb2:	ea81 0303 	eor.w	r3, r1, r3
 8010cb6:	ea82 0000 	eor.w	r0, r2, r0
 8010cba:	ea83 0101 	eor.w	r1, r3, r1
 8010cbe:	ea80 0202 	eor.w	r2, r0, r2
 8010cc2:	ea81 0303 	eor.w	r3, r1, r3
 8010cc6:	2d36      	cmp	r5, #54	; 0x36
 8010cc8:	bf88      	it	hi
 8010cca:	bd30      	pophi	{r4, r5, pc}
 8010ccc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8010cd0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010cd4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8010cd8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8010cdc:	d002      	beq.n	8010ce4 <__adddf3+0x70>
 8010cde:	4240      	negs	r0, r0
 8010ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010ce4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8010ce8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010cec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8010cf0:	d002      	beq.n	8010cf8 <__adddf3+0x84>
 8010cf2:	4252      	negs	r2, r2
 8010cf4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010cf8:	ea94 0f05 	teq	r4, r5
 8010cfc:	f000 80a7 	beq.w	8010e4e <__adddf3+0x1da>
 8010d00:	f1a4 0401 	sub.w	r4, r4, #1
 8010d04:	f1d5 0e20 	rsbs	lr, r5, #32
 8010d08:	db0d      	blt.n	8010d26 <__adddf3+0xb2>
 8010d0a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010d0e:	fa22 f205 	lsr.w	r2, r2, r5
 8010d12:	1880      	adds	r0, r0, r2
 8010d14:	f141 0100 	adc.w	r1, r1, #0
 8010d18:	fa03 f20e 	lsl.w	r2, r3, lr
 8010d1c:	1880      	adds	r0, r0, r2
 8010d1e:	fa43 f305 	asr.w	r3, r3, r5
 8010d22:	4159      	adcs	r1, r3
 8010d24:	e00e      	b.n	8010d44 <__adddf3+0xd0>
 8010d26:	f1a5 0520 	sub.w	r5, r5, #32
 8010d2a:	f10e 0e20 	add.w	lr, lr, #32
 8010d2e:	2a01      	cmp	r2, #1
 8010d30:	fa03 fc0e 	lsl.w	ip, r3, lr
 8010d34:	bf28      	it	cs
 8010d36:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010d3a:	fa43 f305 	asr.w	r3, r3, r5
 8010d3e:	18c0      	adds	r0, r0, r3
 8010d40:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8010d44:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010d48:	d507      	bpl.n	8010d5a <__adddf3+0xe6>
 8010d4a:	f04f 0e00 	mov.w	lr, #0
 8010d4e:	f1dc 0c00 	rsbs	ip, ip, #0
 8010d52:	eb7e 0000 	sbcs.w	r0, lr, r0
 8010d56:	eb6e 0101 	sbc.w	r1, lr, r1
 8010d5a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010d5e:	d31b      	bcc.n	8010d98 <__adddf3+0x124>
 8010d60:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8010d64:	d30c      	bcc.n	8010d80 <__adddf3+0x10c>
 8010d66:	0849      	lsrs	r1, r1, #1
 8010d68:	ea5f 0030 	movs.w	r0, r0, rrx
 8010d6c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010d70:	f104 0401 	add.w	r4, r4, #1
 8010d74:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010d78:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010d7c:	f080 809a 	bcs.w	8010eb4 <__adddf3+0x240>
 8010d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8010d84:	bf08      	it	eq
 8010d86:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010d8a:	f150 0000 	adcs.w	r0, r0, #0
 8010d8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010d92:	ea41 0105 	orr.w	r1, r1, r5
 8010d96:	bd30      	pop	{r4, r5, pc}
 8010d98:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8010d9c:	4140      	adcs	r0, r0
 8010d9e:	eb41 0101 	adc.w	r1, r1, r1
 8010da2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010da6:	f1a4 0401 	sub.w	r4, r4, #1
 8010daa:	d1e9      	bne.n	8010d80 <__adddf3+0x10c>
 8010dac:	f091 0f00 	teq	r1, #0
 8010db0:	bf04      	itt	eq
 8010db2:	4601      	moveq	r1, r0
 8010db4:	2000      	moveq	r0, #0
 8010db6:	fab1 f381 	clz	r3, r1
 8010dba:	bf08      	it	eq
 8010dbc:	3320      	addeq	r3, #32
 8010dbe:	f1a3 030b 	sub.w	r3, r3, #11
 8010dc2:	f1b3 0220 	subs.w	r2, r3, #32
 8010dc6:	da0c      	bge.n	8010de2 <__adddf3+0x16e>
 8010dc8:	320c      	adds	r2, #12
 8010dca:	dd08      	ble.n	8010dde <__adddf3+0x16a>
 8010dcc:	f102 0c14 	add.w	ip, r2, #20
 8010dd0:	f1c2 020c 	rsb	r2, r2, #12
 8010dd4:	fa01 f00c 	lsl.w	r0, r1, ip
 8010dd8:	fa21 f102 	lsr.w	r1, r1, r2
 8010ddc:	e00c      	b.n	8010df8 <__adddf3+0x184>
 8010dde:	f102 0214 	add.w	r2, r2, #20
 8010de2:	bfd8      	it	le
 8010de4:	f1c2 0c20 	rsble	ip, r2, #32
 8010de8:	fa01 f102 	lsl.w	r1, r1, r2
 8010dec:	fa20 fc0c 	lsr.w	ip, r0, ip
 8010df0:	bfdc      	itt	le
 8010df2:	ea41 010c 	orrle.w	r1, r1, ip
 8010df6:	4090      	lslle	r0, r2
 8010df8:	1ae4      	subs	r4, r4, r3
 8010dfa:	bfa2      	ittt	ge
 8010dfc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010e00:	4329      	orrge	r1, r5
 8010e02:	bd30      	popge	{r4, r5, pc}
 8010e04:	ea6f 0404 	mvn.w	r4, r4
 8010e08:	3c1f      	subs	r4, #31
 8010e0a:	da1c      	bge.n	8010e46 <__adddf3+0x1d2>
 8010e0c:	340c      	adds	r4, #12
 8010e0e:	dc0e      	bgt.n	8010e2e <__adddf3+0x1ba>
 8010e10:	f104 0414 	add.w	r4, r4, #20
 8010e14:	f1c4 0220 	rsb	r2, r4, #32
 8010e18:	fa20 f004 	lsr.w	r0, r0, r4
 8010e1c:	fa01 f302 	lsl.w	r3, r1, r2
 8010e20:	ea40 0003 	orr.w	r0, r0, r3
 8010e24:	fa21 f304 	lsr.w	r3, r1, r4
 8010e28:	ea45 0103 	orr.w	r1, r5, r3
 8010e2c:	bd30      	pop	{r4, r5, pc}
 8010e2e:	f1c4 040c 	rsb	r4, r4, #12
 8010e32:	f1c4 0220 	rsb	r2, r4, #32
 8010e36:	fa20 f002 	lsr.w	r0, r0, r2
 8010e3a:	fa01 f304 	lsl.w	r3, r1, r4
 8010e3e:	ea40 0003 	orr.w	r0, r0, r3
 8010e42:	4629      	mov	r1, r5
 8010e44:	bd30      	pop	{r4, r5, pc}
 8010e46:	fa21 f004 	lsr.w	r0, r1, r4
 8010e4a:	4629      	mov	r1, r5
 8010e4c:	bd30      	pop	{r4, r5, pc}
 8010e4e:	f094 0f00 	teq	r4, #0
 8010e52:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8010e56:	bf06      	itte	eq
 8010e58:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010e5c:	3401      	addeq	r4, #1
 8010e5e:	3d01      	subne	r5, #1
 8010e60:	e74e      	b.n	8010d00 <__adddf3+0x8c>
 8010e62:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010e66:	bf18      	it	ne
 8010e68:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010e6c:	d029      	beq.n	8010ec2 <__adddf3+0x24e>
 8010e6e:	ea94 0f05 	teq	r4, r5
 8010e72:	bf08      	it	eq
 8010e74:	ea90 0f02 	teqeq	r0, r2
 8010e78:	d005      	beq.n	8010e86 <__adddf3+0x212>
 8010e7a:	ea54 0c00 	orrs.w	ip, r4, r0
 8010e7e:	bf04      	itt	eq
 8010e80:	4619      	moveq	r1, r3
 8010e82:	4610      	moveq	r0, r2
 8010e84:	bd30      	pop	{r4, r5, pc}
 8010e86:	ea91 0f03 	teq	r1, r3
 8010e8a:	bf1e      	ittt	ne
 8010e8c:	2100      	movne	r1, #0
 8010e8e:	2000      	movne	r0, #0
 8010e90:	bd30      	popne	{r4, r5, pc}
 8010e92:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8010e96:	d105      	bne.n	8010ea4 <__adddf3+0x230>
 8010e98:	0040      	lsls	r0, r0, #1
 8010e9a:	4149      	adcs	r1, r1
 8010e9c:	bf28      	it	cs
 8010e9e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8010ea2:	bd30      	pop	{r4, r5, pc}
 8010ea4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8010ea8:	bf3c      	itt	cc
 8010eaa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8010eae:	bd30      	popcc	{r4, r5, pc}
 8010eb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010eb4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8010eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ebc:	f04f 0000 	mov.w	r0, #0
 8010ec0:	bd30      	pop	{r4, r5, pc}
 8010ec2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8010ec6:	bf1a      	itte	ne
 8010ec8:	4619      	movne	r1, r3
 8010eca:	4610      	movne	r0, r2
 8010ecc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8010ed0:	bf1c      	itt	ne
 8010ed2:	460b      	movne	r3, r1
 8010ed4:	4602      	movne	r2, r0
 8010ed6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010eda:	bf06      	itte	eq
 8010edc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8010ee0:	ea91 0f03 	teqeq	r1, r3
 8010ee4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8010ee8:	bd30      	pop	{r4, r5, pc}
 8010eea:	bf00      	nop

08010eec <__aeabi_ui2d>:
 8010eec:	f090 0f00 	teq	r0, #0
 8010ef0:	bf04      	itt	eq
 8010ef2:	2100      	moveq	r1, #0
 8010ef4:	4770      	bxeq	lr
 8010ef6:	b530      	push	{r4, r5, lr}
 8010ef8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010efc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010f00:	f04f 0500 	mov.w	r5, #0
 8010f04:	f04f 0100 	mov.w	r1, #0
 8010f08:	e750      	b.n	8010dac <__adddf3+0x138>
 8010f0a:	bf00      	nop

08010f0c <__aeabi_i2d>:
 8010f0c:	f090 0f00 	teq	r0, #0
 8010f10:	bf04      	itt	eq
 8010f12:	2100      	moveq	r1, #0
 8010f14:	4770      	bxeq	lr
 8010f16:	b530      	push	{r4, r5, lr}
 8010f18:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010f1c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010f20:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010f24:	bf48      	it	mi
 8010f26:	4240      	negmi	r0, r0
 8010f28:	f04f 0100 	mov.w	r1, #0
 8010f2c:	e73e      	b.n	8010dac <__adddf3+0x138>
 8010f2e:	bf00      	nop

08010f30 <__aeabi_f2d>:
 8010f30:	0042      	lsls	r2, r0, #1
 8010f32:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010f36:	ea4f 0131 	mov.w	r1, r1, rrx
 8010f3a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010f3e:	bf1f      	itttt	ne
 8010f40:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010f44:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010f48:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010f4c:	4770      	bxne	lr
 8010f4e:	f092 0f00 	teq	r2, #0
 8010f52:	bf14      	ite	ne
 8010f54:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010f58:	4770      	bxeq	lr
 8010f5a:	b530      	push	{r4, r5, lr}
 8010f5c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010f60:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010f64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010f68:	e720      	b.n	8010dac <__adddf3+0x138>
 8010f6a:	bf00      	nop

08010f6c <__aeabi_ul2d>:
 8010f6c:	ea50 0201 	orrs.w	r2, r0, r1
 8010f70:	bf08      	it	eq
 8010f72:	4770      	bxeq	lr
 8010f74:	b530      	push	{r4, r5, lr}
 8010f76:	f04f 0500 	mov.w	r5, #0
 8010f7a:	e00a      	b.n	8010f92 <__aeabi_l2d+0x16>

08010f7c <__aeabi_l2d>:
 8010f7c:	ea50 0201 	orrs.w	r2, r0, r1
 8010f80:	bf08      	it	eq
 8010f82:	4770      	bxeq	lr
 8010f84:	b530      	push	{r4, r5, lr}
 8010f86:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010f8a:	d502      	bpl.n	8010f92 <__aeabi_l2d+0x16>
 8010f8c:	4240      	negs	r0, r0
 8010f8e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010f92:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010f96:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010f9a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010f9e:	f43f aedc 	beq.w	8010d5a <__adddf3+0xe6>
 8010fa2:	f04f 0203 	mov.w	r2, #3
 8010fa6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010faa:	bf18      	it	ne
 8010fac:	3203      	addne	r2, #3
 8010fae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010fb2:	bf18      	it	ne
 8010fb4:	3203      	addne	r2, #3
 8010fb6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010fba:	f1c2 0320 	rsb	r3, r2, #32
 8010fbe:	fa00 fc03 	lsl.w	ip, r0, r3
 8010fc2:	fa20 f002 	lsr.w	r0, r0, r2
 8010fc6:	fa01 fe03 	lsl.w	lr, r1, r3
 8010fca:	ea40 000e 	orr.w	r0, r0, lr
 8010fce:	fa21 f102 	lsr.w	r1, r1, r2
 8010fd2:	4414      	add	r4, r2
 8010fd4:	e6c1      	b.n	8010d5a <__adddf3+0xe6>
 8010fd6:	bf00      	nop

08010fd8 <__aeabi_dmul>:
 8010fd8:	b570      	push	{r4, r5, r6, lr}
 8010fda:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010fde:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010fe2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010fe6:	bf1d      	ittte	ne
 8010fe8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010fec:	ea94 0f0c 	teqne	r4, ip
 8010ff0:	ea95 0f0c 	teqne	r5, ip
 8010ff4:	f000 f8de 	bleq	80111b4 <__aeabi_dmul+0x1dc>
 8010ff8:	442c      	add	r4, r5
 8010ffa:	ea81 0603 	eor.w	r6, r1, r3
 8010ffe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8011002:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8011006:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 801100a:	bf18      	it	ne
 801100c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8011010:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011018:	d038      	beq.n	801108c <__aeabi_dmul+0xb4>
 801101a:	fba0 ce02 	umull	ip, lr, r0, r2
 801101e:	f04f 0500 	mov.w	r5, #0
 8011022:	fbe1 e502 	umlal	lr, r5, r1, r2
 8011026:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 801102a:	fbe0 e503 	umlal	lr, r5, r0, r3
 801102e:	f04f 0600 	mov.w	r6, #0
 8011032:	fbe1 5603 	umlal	r5, r6, r1, r3
 8011036:	f09c 0f00 	teq	ip, #0
 801103a:	bf18      	it	ne
 801103c:	f04e 0e01 	orrne.w	lr, lr, #1
 8011040:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8011044:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8011048:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 801104c:	d204      	bcs.n	8011058 <__aeabi_dmul+0x80>
 801104e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8011052:	416d      	adcs	r5, r5
 8011054:	eb46 0606 	adc.w	r6, r6, r6
 8011058:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 801105c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8011060:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8011064:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8011068:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 801106c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8011070:	bf88      	it	hi
 8011072:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011076:	d81e      	bhi.n	80110b6 <__aeabi_dmul+0xde>
 8011078:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 801107c:	bf08      	it	eq
 801107e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8011082:	f150 0000 	adcs.w	r0, r0, #0
 8011086:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801108a:	bd70      	pop	{r4, r5, r6, pc}
 801108c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8011090:	ea46 0101 	orr.w	r1, r6, r1
 8011094:	ea40 0002 	orr.w	r0, r0, r2
 8011098:	ea81 0103 	eor.w	r1, r1, r3
 801109c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80110a0:	bfc2      	ittt	gt
 80110a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80110a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80110aa:	bd70      	popgt	{r4, r5, r6, pc}
 80110ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80110b0:	f04f 0e00 	mov.w	lr, #0
 80110b4:	3c01      	subs	r4, #1
 80110b6:	f300 80ab 	bgt.w	8011210 <__aeabi_dmul+0x238>
 80110ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80110be:	bfde      	ittt	le
 80110c0:	2000      	movle	r0, #0
 80110c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80110c6:	bd70      	pople	{r4, r5, r6, pc}
 80110c8:	f1c4 0400 	rsb	r4, r4, #0
 80110cc:	3c20      	subs	r4, #32
 80110ce:	da35      	bge.n	801113c <__aeabi_dmul+0x164>
 80110d0:	340c      	adds	r4, #12
 80110d2:	dc1b      	bgt.n	801110c <__aeabi_dmul+0x134>
 80110d4:	f104 0414 	add.w	r4, r4, #20
 80110d8:	f1c4 0520 	rsb	r5, r4, #32
 80110dc:	fa00 f305 	lsl.w	r3, r0, r5
 80110e0:	fa20 f004 	lsr.w	r0, r0, r4
 80110e4:	fa01 f205 	lsl.w	r2, r1, r5
 80110e8:	ea40 0002 	orr.w	r0, r0, r2
 80110ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80110f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80110f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80110f8:	fa21 f604 	lsr.w	r6, r1, r4
 80110fc:	eb42 0106 	adc.w	r1, r2, r6
 8011100:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011104:	bf08      	it	eq
 8011106:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801110a:	bd70      	pop	{r4, r5, r6, pc}
 801110c:	f1c4 040c 	rsb	r4, r4, #12
 8011110:	f1c4 0520 	rsb	r5, r4, #32
 8011114:	fa00 f304 	lsl.w	r3, r0, r4
 8011118:	fa20 f005 	lsr.w	r0, r0, r5
 801111c:	fa01 f204 	lsl.w	r2, r1, r4
 8011120:	ea40 0002 	orr.w	r0, r0, r2
 8011124:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011128:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 801112c:	f141 0100 	adc.w	r1, r1, #0
 8011130:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8011134:	bf08      	it	eq
 8011136:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 801113a:	bd70      	pop	{r4, r5, r6, pc}
 801113c:	f1c4 0520 	rsb	r5, r4, #32
 8011140:	fa00 f205 	lsl.w	r2, r0, r5
 8011144:	ea4e 0e02 	orr.w	lr, lr, r2
 8011148:	fa20 f304 	lsr.w	r3, r0, r4
 801114c:	fa01 f205 	lsl.w	r2, r1, r5
 8011150:	ea43 0302 	orr.w	r3, r3, r2
 8011154:	fa21 f004 	lsr.w	r0, r1, r4
 8011158:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 801115c:	fa21 f204 	lsr.w	r2, r1, r4
 8011160:	ea20 0002 	bic.w	r0, r0, r2
 8011164:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8011168:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 801116c:	bf08      	it	eq
 801116e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8011172:	bd70      	pop	{r4, r5, r6, pc}
 8011174:	f094 0f00 	teq	r4, #0
 8011178:	d10f      	bne.n	801119a <__aeabi_dmul+0x1c2>
 801117a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 801117e:	0040      	lsls	r0, r0, #1
 8011180:	eb41 0101 	adc.w	r1, r1, r1
 8011184:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011188:	bf08      	it	eq
 801118a:	3c01      	subeq	r4, #1
 801118c:	d0f7      	beq.n	801117e <__aeabi_dmul+0x1a6>
 801118e:	ea41 0106 	orr.w	r1, r1, r6
 8011192:	f095 0f00 	teq	r5, #0
 8011196:	bf18      	it	ne
 8011198:	4770      	bxne	lr
 801119a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 801119e:	0052      	lsls	r2, r2, #1
 80111a0:	eb43 0303 	adc.w	r3, r3, r3
 80111a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80111a8:	bf08      	it	eq
 80111aa:	3d01      	subeq	r5, #1
 80111ac:	d0f7      	beq.n	801119e <__aeabi_dmul+0x1c6>
 80111ae:	ea43 0306 	orr.w	r3, r3, r6
 80111b2:	4770      	bx	lr
 80111b4:	ea94 0f0c 	teq	r4, ip
 80111b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80111bc:	bf18      	it	ne
 80111be:	ea95 0f0c 	teqne	r5, ip
 80111c2:	d00c      	beq.n	80111de <__aeabi_dmul+0x206>
 80111c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80111c8:	bf18      	it	ne
 80111ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80111ce:	d1d1      	bne.n	8011174 <__aeabi_dmul+0x19c>
 80111d0:	ea81 0103 	eor.w	r1, r1, r3
 80111d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80111d8:	f04f 0000 	mov.w	r0, #0
 80111dc:	bd70      	pop	{r4, r5, r6, pc}
 80111de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80111e2:	bf06      	itte	eq
 80111e4:	4610      	moveq	r0, r2
 80111e6:	4619      	moveq	r1, r3
 80111e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80111ec:	d019      	beq.n	8011222 <__aeabi_dmul+0x24a>
 80111ee:	ea94 0f0c 	teq	r4, ip
 80111f2:	d102      	bne.n	80111fa <__aeabi_dmul+0x222>
 80111f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80111f8:	d113      	bne.n	8011222 <__aeabi_dmul+0x24a>
 80111fa:	ea95 0f0c 	teq	r5, ip
 80111fe:	d105      	bne.n	801120c <__aeabi_dmul+0x234>
 8011200:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8011204:	bf1c      	itt	ne
 8011206:	4610      	movne	r0, r2
 8011208:	4619      	movne	r1, r3
 801120a:	d10a      	bne.n	8011222 <__aeabi_dmul+0x24a>
 801120c:	ea81 0103 	eor.w	r1, r1, r3
 8011210:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8011214:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8011218:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801121c:	f04f 0000 	mov.w	r0, #0
 8011220:	bd70      	pop	{r4, r5, r6, pc}
 8011222:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8011226:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 801122a:	bd70      	pop	{r4, r5, r6, pc}

0801122c <__aeabi_ddiv>:
 801122c:	b570      	push	{r4, r5, r6, lr}
 801122e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8011232:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8011236:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 801123a:	bf1d      	ittte	ne
 801123c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8011240:	ea94 0f0c 	teqne	r4, ip
 8011244:	ea95 0f0c 	teqne	r5, ip
 8011248:	f000 f8a7 	bleq	801139a <__aeabi_ddiv+0x16e>
 801124c:	eba4 0405 	sub.w	r4, r4, r5
 8011250:	ea81 0e03 	eor.w	lr, r1, r3
 8011254:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8011258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 801125c:	f000 8088 	beq.w	8011370 <__aeabi_ddiv+0x144>
 8011260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8011264:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8011268:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 801126c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8011270:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8011274:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8011278:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 801127c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8011280:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8011284:	429d      	cmp	r5, r3
 8011286:	bf08      	it	eq
 8011288:	4296      	cmpeq	r6, r2
 801128a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 801128e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8011292:	d202      	bcs.n	801129a <__aeabi_ddiv+0x6e>
 8011294:	085b      	lsrs	r3, r3, #1
 8011296:	ea4f 0232 	mov.w	r2, r2, rrx
 801129a:	1ab6      	subs	r6, r6, r2
 801129c:	eb65 0503 	sbc.w	r5, r5, r3
 80112a0:	085b      	lsrs	r3, r3, #1
 80112a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80112a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80112aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80112ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80112b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112b6:	bf22      	ittt	cs
 80112b8:	1ab6      	subcs	r6, r6, r2
 80112ba:	4675      	movcs	r5, lr
 80112bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80112c0:	085b      	lsrs	r3, r3, #1
 80112c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80112c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80112ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112ce:	bf22      	ittt	cs
 80112d0:	1ab6      	subcs	r6, r6, r2
 80112d2:	4675      	movcs	r5, lr
 80112d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80112d8:	085b      	lsrs	r3, r3, #1
 80112da:	ea4f 0232 	mov.w	r2, r2, rrx
 80112de:	ebb6 0e02 	subs.w	lr, r6, r2
 80112e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112e6:	bf22      	ittt	cs
 80112e8:	1ab6      	subcs	r6, r6, r2
 80112ea:	4675      	movcs	r5, lr
 80112ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80112f0:	085b      	lsrs	r3, r3, #1
 80112f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80112f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80112fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80112fe:	bf22      	ittt	cs
 8011300:	1ab6      	subcs	r6, r6, r2
 8011302:	4675      	movcs	r5, lr
 8011304:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8011308:	ea55 0e06 	orrs.w	lr, r5, r6
 801130c:	d018      	beq.n	8011340 <__aeabi_ddiv+0x114>
 801130e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8011312:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8011316:	ea4f 1606 	mov.w	r6, r6, lsl #4
 801131a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 801131e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8011322:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8011326:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 801132a:	d1c0      	bne.n	80112ae <__aeabi_ddiv+0x82>
 801132c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011330:	d10b      	bne.n	801134a <__aeabi_ddiv+0x11e>
 8011332:	ea41 0100 	orr.w	r1, r1, r0
 8011336:	f04f 0000 	mov.w	r0, #0
 801133a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 801133e:	e7b6      	b.n	80112ae <__aeabi_ddiv+0x82>
 8011340:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8011344:	bf04      	itt	eq
 8011346:	4301      	orreq	r1, r0
 8011348:	2000      	moveq	r0, #0
 801134a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 801134e:	bf88      	it	hi
 8011350:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8011354:	f63f aeaf 	bhi.w	80110b6 <__aeabi_dmul+0xde>
 8011358:	ebb5 0c03 	subs.w	ip, r5, r3
 801135c:	bf04      	itt	eq
 801135e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8011362:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8011366:	f150 0000 	adcs.w	r0, r0, #0
 801136a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801136e:	bd70      	pop	{r4, r5, r6, pc}
 8011370:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8011374:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8011378:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 801137c:	bfc2      	ittt	gt
 801137e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8011382:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8011386:	bd70      	popgt	{r4, r5, r6, pc}
 8011388:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 801138c:	f04f 0e00 	mov.w	lr, #0
 8011390:	3c01      	subs	r4, #1
 8011392:	e690      	b.n	80110b6 <__aeabi_dmul+0xde>
 8011394:	ea45 0e06 	orr.w	lr, r5, r6
 8011398:	e68d      	b.n	80110b6 <__aeabi_dmul+0xde>
 801139a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 801139e:	ea94 0f0c 	teq	r4, ip
 80113a2:	bf08      	it	eq
 80113a4:	ea95 0f0c 	teqeq	r5, ip
 80113a8:	f43f af3b 	beq.w	8011222 <__aeabi_dmul+0x24a>
 80113ac:	ea94 0f0c 	teq	r4, ip
 80113b0:	d10a      	bne.n	80113c8 <__aeabi_ddiv+0x19c>
 80113b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80113b6:	f47f af34 	bne.w	8011222 <__aeabi_dmul+0x24a>
 80113ba:	ea95 0f0c 	teq	r5, ip
 80113be:	f47f af25 	bne.w	801120c <__aeabi_dmul+0x234>
 80113c2:	4610      	mov	r0, r2
 80113c4:	4619      	mov	r1, r3
 80113c6:	e72c      	b.n	8011222 <__aeabi_dmul+0x24a>
 80113c8:	ea95 0f0c 	teq	r5, ip
 80113cc:	d106      	bne.n	80113dc <__aeabi_ddiv+0x1b0>
 80113ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80113d2:	f43f aefd 	beq.w	80111d0 <__aeabi_dmul+0x1f8>
 80113d6:	4610      	mov	r0, r2
 80113d8:	4619      	mov	r1, r3
 80113da:	e722      	b.n	8011222 <__aeabi_dmul+0x24a>
 80113dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80113e0:	bf18      	it	ne
 80113e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80113e6:	f47f aec5 	bne.w	8011174 <__aeabi_dmul+0x19c>
 80113ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80113ee:	f47f af0d 	bne.w	801120c <__aeabi_dmul+0x234>
 80113f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80113f6:	f47f aeeb 	bne.w	80111d0 <__aeabi_dmul+0x1f8>
 80113fa:	e712      	b.n	8011222 <__aeabi_dmul+0x24a>

080113fc <__gedf2>:
 80113fc:	f04f 3cff 	mov.w	ip, #4294967295
 8011400:	e006      	b.n	8011410 <__cmpdf2+0x4>
 8011402:	bf00      	nop

08011404 <__ledf2>:
 8011404:	f04f 0c01 	mov.w	ip, #1
 8011408:	e002      	b.n	8011410 <__cmpdf2+0x4>
 801140a:	bf00      	nop

0801140c <__cmpdf2>:
 801140c:	f04f 0c01 	mov.w	ip, #1
 8011410:	f84d cd04 	str.w	ip, [sp, #-4]!
 8011414:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011418:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 801141c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011420:	bf18      	it	ne
 8011422:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8011426:	d01b      	beq.n	8011460 <__cmpdf2+0x54>
 8011428:	b001      	add	sp, #4
 801142a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 801142e:	bf0c      	ite	eq
 8011430:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8011434:	ea91 0f03 	teqne	r1, r3
 8011438:	bf02      	ittt	eq
 801143a:	ea90 0f02 	teqeq	r0, r2
 801143e:	2000      	moveq	r0, #0
 8011440:	4770      	bxeq	lr
 8011442:	f110 0f00 	cmn.w	r0, #0
 8011446:	ea91 0f03 	teq	r1, r3
 801144a:	bf58      	it	pl
 801144c:	4299      	cmppl	r1, r3
 801144e:	bf08      	it	eq
 8011450:	4290      	cmpeq	r0, r2
 8011452:	bf2c      	ite	cs
 8011454:	17d8      	asrcs	r0, r3, #31
 8011456:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 801145a:	f040 0001 	orr.w	r0, r0, #1
 801145e:	4770      	bx	lr
 8011460:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8011464:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011468:	d102      	bne.n	8011470 <__cmpdf2+0x64>
 801146a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 801146e:	d107      	bne.n	8011480 <__cmpdf2+0x74>
 8011470:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8011474:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8011478:	d1d6      	bne.n	8011428 <__cmpdf2+0x1c>
 801147a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 801147e:	d0d3      	beq.n	8011428 <__cmpdf2+0x1c>
 8011480:	f85d 0b04 	ldr.w	r0, [sp], #4
 8011484:	4770      	bx	lr
 8011486:	bf00      	nop

08011488 <__aeabi_cdrcmple>:
 8011488:	4684      	mov	ip, r0
 801148a:	4610      	mov	r0, r2
 801148c:	4662      	mov	r2, ip
 801148e:	468c      	mov	ip, r1
 8011490:	4619      	mov	r1, r3
 8011492:	4663      	mov	r3, ip
 8011494:	e000      	b.n	8011498 <__aeabi_cdcmpeq>
 8011496:	bf00      	nop

08011498 <__aeabi_cdcmpeq>:
 8011498:	b501      	push	{r0, lr}
 801149a:	f7ff ffb7 	bl	801140c <__cmpdf2>
 801149e:	2800      	cmp	r0, #0
 80114a0:	bf48      	it	mi
 80114a2:	f110 0f00 	cmnmi.w	r0, #0
 80114a6:	bd01      	pop	{r0, pc}

080114a8 <__aeabi_dcmpeq>:
 80114a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114ac:	f7ff fff4 	bl	8011498 <__aeabi_cdcmpeq>
 80114b0:	bf0c      	ite	eq
 80114b2:	2001      	moveq	r0, #1
 80114b4:	2000      	movne	r0, #0
 80114b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80114ba:	bf00      	nop

080114bc <__aeabi_dcmplt>:
 80114bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114c0:	f7ff ffea 	bl	8011498 <__aeabi_cdcmpeq>
 80114c4:	bf34      	ite	cc
 80114c6:	2001      	movcc	r0, #1
 80114c8:	2000      	movcs	r0, #0
 80114ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80114ce:	bf00      	nop

080114d0 <__aeabi_dcmple>:
 80114d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114d4:	f7ff ffe0 	bl	8011498 <__aeabi_cdcmpeq>
 80114d8:	bf94      	ite	ls
 80114da:	2001      	movls	r0, #1
 80114dc:	2000      	movhi	r0, #0
 80114de:	f85d fb08 	ldr.w	pc, [sp], #8
 80114e2:	bf00      	nop

080114e4 <__aeabi_dcmpge>:
 80114e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114e8:	f7ff ffce 	bl	8011488 <__aeabi_cdrcmple>
 80114ec:	bf94      	ite	ls
 80114ee:	2001      	movls	r0, #1
 80114f0:	2000      	movhi	r0, #0
 80114f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80114f6:	bf00      	nop

080114f8 <__aeabi_dcmpgt>:
 80114f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80114fc:	f7ff ffc4 	bl	8011488 <__aeabi_cdrcmple>
 8011500:	bf34      	ite	cc
 8011502:	2001      	movcc	r0, #1
 8011504:	2000      	movcs	r0, #0
 8011506:	f85d fb08 	ldr.w	pc, [sp], #8
 801150a:	bf00      	nop

0801150c <__aeabi_d2iz>:
 801150c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8011510:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011514:	d215      	bcs.n	8011542 <__aeabi_d2iz+0x36>
 8011516:	d511      	bpl.n	801153c <__aeabi_d2iz+0x30>
 8011518:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801151c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011520:	d912      	bls.n	8011548 <__aeabi_d2iz+0x3c>
 8011522:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011526:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801152a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801152e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8011532:	fa23 f002 	lsr.w	r0, r3, r2
 8011536:	bf18      	it	ne
 8011538:	4240      	negne	r0, r0
 801153a:	4770      	bx	lr
 801153c:	f04f 0000 	mov.w	r0, #0
 8011540:	4770      	bx	lr
 8011542:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011546:	d105      	bne.n	8011554 <__aeabi_d2iz+0x48>
 8011548:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 801154c:	bf08      	it	eq
 801154e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8011552:	4770      	bx	lr
 8011554:	f04f 0000 	mov.w	r0, #0
 8011558:	4770      	bx	lr
 801155a:	bf00      	nop

0801155c <__aeabi_d2uiz>:
 801155c:	004a      	lsls	r2, r1, #1
 801155e:	d211      	bcs.n	8011584 <__aeabi_d2uiz+0x28>
 8011560:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8011564:	d211      	bcs.n	801158a <__aeabi_d2uiz+0x2e>
 8011566:	d50d      	bpl.n	8011584 <__aeabi_d2uiz+0x28>
 8011568:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 801156c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011570:	d40e      	bmi.n	8011590 <__aeabi_d2uiz+0x34>
 8011572:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011576:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 801157a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 801157e:	fa23 f002 	lsr.w	r0, r3, r2
 8011582:	4770      	bx	lr
 8011584:	f04f 0000 	mov.w	r0, #0
 8011588:	4770      	bx	lr
 801158a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801158e:	d102      	bne.n	8011596 <__aeabi_d2uiz+0x3a>
 8011590:	f04f 30ff 	mov.w	r0, #4294967295
 8011594:	4770      	bx	lr
 8011596:	f04f 0000 	mov.w	r0, #0
 801159a:	4770      	bx	lr

0801159c <__aeabi_d2f>:
 801159c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80115a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80115a4:	bf24      	itt	cs
 80115a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80115aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80115ae:	d90d      	bls.n	80115cc <__aeabi_d2f+0x30>
 80115b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80115b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80115b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80115bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80115c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80115c4:	bf08      	it	eq
 80115c6:	f020 0001 	biceq.w	r0, r0, #1
 80115ca:	4770      	bx	lr
 80115cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80115d0:	d121      	bne.n	8011616 <__aeabi_d2f+0x7a>
 80115d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80115d6:	bfbc      	itt	lt
 80115d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80115dc:	4770      	bxlt	lr
 80115de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80115e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80115e6:	f1c2 0218 	rsb	r2, r2, #24
 80115ea:	f1c2 0c20 	rsb	ip, r2, #32
 80115ee:	fa10 f30c 	lsls.w	r3, r0, ip
 80115f2:	fa20 f002 	lsr.w	r0, r0, r2
 80115f6:	bf18      	it	ne
 80115f8:	f040 0001 	orrne.w	r0, r0, #1
 80115fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011600:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8011604:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011608:	ea40 000c 	orr.w	r0, r0, ip
 801160c:	fa23 f302 	lsr.w	r3, r3, r2
 8011610:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011614:	e7cc      	b.n	80115b0 <__aeabi_d2f+0x14>
 8011616:	ea7f 5362 	mvns.w	r3, r2, asr #21
 801161a:	d107      	bne.n	801162c <__aeabi_d2f+0x90>
 801161c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8011620:	bf1e      	ittt	ne
 8011622:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8011626:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 801162a:	4770      	bxne	lr
 801162c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8011630:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8011634:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011638:	4770      	bx	lr
 801163a:	bf00      	nop

0801163c <__aeabi_uldivmod>:
 801163c:	b94b      	cbnz	r3, 8011652 <__aeabi_uldivmod+0x16>
 801163e:	b942      	cbnz	r2, 8011652 <__aeabi_uldivmod+0x16>
 8011640:	2900      	cmp	r1, #0
 8011642:	bf08      	it	eq
 8011644:	2800      	cmpeq	r0, #0
 8011646:	d002      	beq.n	801164e <__aeabi_uldivmod+0x12>
 8011648:	f04f 31ff 	mov.w	r1, #4294967295
 801164c:	4608      	mov	r0, r1
 801164e:	f000 b83b 	b.w	80116c8 <__aeabi_idiv0>
 8011652:	b082      	sub	sp, #8
 8011654:	46ec      	mov	ip, sp
 8011656:	e92d 5000 	stmdb	sp!, {ip, lr}
 801165a:	f000 f81d 	bl	8011698 <__gnu_uldivmod_helper>
 801165e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011662:	b002      	add	sp, #8
 8011664:	bc0c      	pop	{r2, r3}
 8011666:	4770      	bx	lr

08011668 <__gnu_ldivmod_helper>:
 8011668:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801166c:	9c06      	ldr	r4, [sp, #24]
 801166e:	4615      	mov	r5, r2
 8011670:	4606      	mov	r6, r0
 8011672:	460f      	mov	r7, r1
 8011674:	4698      	mov	r8, r3
 8011676:	f000 f829 	bl	80116cc <__divdi3>
 801167a:	fb05 f301 	mul.w	r3, r5, r1
 801167e:	fb00 3808 	mla	r8, r0, r8, r3
 8011682:	fba5 2300 	umull	r2, r3, r5, r0
 8011686:	1ab2      	subs	r2, r6, r2
 8011688:	4443      	add	r3, r8
 801168a:	eb67 0303 	sbc.w	r3, r7, r3
 801168e:	e9c4 2300 	strd	r2, r3, [r4]
 8011692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011696:	bf00      	nop

08011698 <__gnu_uldivmod_helper>:
 8011698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801169c:	9c06      	ldr	r4, [sp, #24]
 801169e:	4690      	mov	r8, r2
 80116a0:	4606      	mov	r6, r0
 80116a2:	460f      	mov	r7, r1
 80116a4:	461d      	mov	r5, r3
 80116a6:	f000 f95f 	bl	8011968 <__udivdi3>
 80116aa:	fb00 f505 	mul.w	r5, r0, r5
 80116ae:	fba0 2308 	umull	r2, r3, r0, r8
 80116b2:	fb08 5501 	mla	r5, r8, r1, r5
 80116b6:	1ab2      	subs	r2, r6, r2
 80116b8:	442b      	add	r3, r5
 80116ba:	eb67 0303 	sbc.w	r3, r7, r3
 80116be:	e9c4 2300 	strd	r2, r3, [r4]
 80116c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80116c6:	bf00      	nop

080116c8 <__aeabi_idiv0>:
 80116c8:	4770      	bx	lr
 80116ca:	bf00      	nop

080116cc <__divdi3>:
 80116cc:	2900      	cmp	r1, #0
 80116ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80116d2:	f2c0 80a6 	blt.w	8011822 <__divdi3+0x156>
 80116d6:	2600      	movs	r6, #0
 80116d8:	2b00      	cmp	r3, #0
 80116da:	f2c0 809c 	blt.w	8011816 <__divdi3+0x14a>
 80116de:	4688      	mov	r8, r1
 80116e0:	4694      	mov	ip, r2
 80116e2:	469e      	mov	lr, r3
 80116e4:	4615      	mov	r5, r2
 80116e6:	4604      	mov	r4, r0
 80116e8:	460f      	mov	r7, r1
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d13d      	bne.n	801176a <__divdi3+0x9e>
 80116ee:	428a      	cmp	r2, r1
 80116f0:	d959      	bls.n	80117a6 <__divdi3+0xda>
 80116f2:	fab2 f382 	clz	r3, r2
 80116f6:	b13b      	cbz	r3, 8011708 <__divdi3+0x3c>
 80116f8:	f1c3 0220 	rsb	r2, r3, #32
 80116fc:	409f      	lsls	r7, r3
 80116fe:	fa20 f202 	lsr.w	r2, r0, r2
 8011702:	409d      	lsls	r5, r3
 8011704:	4317      	orrs	r7, r2
 8011706:	409c      	lsls	r4, r3
 8011708:	0c29      	lsrs	r1, r5, #16
 801170a:	0c22      	lsrs	r2, r4, #16
 801170c:	fbb7 fef1 	udiv	lr, r7, r1
 8011710:	b2a8      	uxth	r0, r5
 8011712:	fb01 771e 	mls	r7, r1, lr, r7
 8011716:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 801171a:	fb00 f30e 	mul.w	r3, r0, lr
 801171e:	42bb      	cmp	r3, r7
 8011720:	d90a      	bls.n	8011738 <__divdi3+0x6c>
 8011722:	197f      	adds	r7, r7, r5
 8011724:	f10e 32ff 	add.w	r2, lr, #4294967295
 8011728:	f080 8105 	bcs.w	8011936 <__divdi3+0x26a>
 801172c:	42bb      	cmp	r3, r7
 801172e:	f240 8102 	bls.w	8011936 <__divdi3+0x26a>
 8011732:	f1ae 0e02 	sub.w	lr, lr, #2
 8011736:	442f      	add	r7, r5
 8011738:	1aff      	subs	r7, r7, r3
 801173a:	b2a4      	uxth	r4, r4
 801173c:	fbb7 f3f1 	udiv	r3, r7, r1
 8011740:	fb01 7713 	mls	r7, r1, r3, r7
 8011744:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011748:	fb00 f003 	mul.w	r0, r0, r3
 801174c:	42b8      	cmp	r0, r7
 801174e:	d908      	bls.n	8011762 <__divdi3+0x96>
 8011750:	197f      	adds	r7, r7, r5
 8011752:	f103 32ff 	add.w	r2, r3, #4294967295
 8011756:	f080 80f0 	bcs.w	801193a <__divdi3+0x26e>
 801175a:	42b8      	cmp	r0, r7
 801175c:	f240 80ed 	bls.w	801193a <__divdi3+0x26e>
 8011760:	3b02      	subs	r3, #2
 8011762:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 8011766:	2200      	movs	r2, #0
 8011768:	e003      	b.n	8011772 <__divdi3+0xa6>
 801176a:	428b      	cmp	r3, r1
 801176c:	d90f      	bls.n	801178e <__divdi3+0xc2>
 801176e:	2200      	movs	r2, #0
 8011770:	4613      	mov	r3, r2
 8011772:	1c34      	adds	r4, r6, #0
 8011774:	bf18      	it	ne
 8011776:	2401      	movne	r4, #1
 8011778:	4260      	negs	r0, r4
 801177a:	f04f 0500 	mov.w	r5, #0
 801177e:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 8011782:	4058      	eors	r0, r3
 8011784:	4051      	eors	r1, r2
 8011786:	1900      	adds	r0, r0, r4
 8011788:	4169      	adcs	r1, r5
 801178a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801178e:	fab3 f283 	clz	r2, r3
 8011792:	2a00      	cmp	r2, #0
 8011794:	f040 8086 	bne.w	80118a4 <__divdi3+0x1d8>
 8011798:	428b      	cmp	r3, r1
 801179a:	d302      	bcc.n	80117a2 <__divdi3+0xd6>
 801179c:	4584      	cmp	ip, r0
 801179e:	f200 80db 	bhi.w	8011958 <__divdi3+0x28c>
 80117a2:	2301      	movs	r3, #1
 80117a4:	e7e5      	b.n	8011772 <__divdi3+0xa6>
 80117a6:	b912      	cbnz	r2, 80117ae <__divdi3+0xe2>
 80117a8:	2301      	movs	r3, #1
 80117aa:	fbb3 f5f2 	udiv	r5, r3, r2
 80117ae:	fab5 f085 	clz	r0, r5
 80117b2:	2800      	cmp	r0, #0
 80117b4:	d13b      	bne.n	801182e <__divdi3+0x162>
 80117b6:	1b78      	subs	r0, r7, r5
 80117b8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80117bc:	fa1f fc85 	uxth.w	ip, r5
 80117c0:	2201      	movs	r2, #1
 80117c2:	fbb0 f8fe 	udiv	r8, r0, lr
 80117c6:	0c21      	lsrs	r1, r4, #16
 80117c8:	fb0e 0718 	mls	r7, lr, r8, r0
 80117cc:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80117d0:	fb0c f308 	mul.w	r3, ip, r8
 80117d4:	42bb      	cmp	r3, r7
 80117d6:	d907      	bls.n	80117e8 <__divdi3+0x11c>
 80117d8:	197f      	adds	r7, r7, r5
 80117da:	f108 31ff 	add.w	r1, r8, #4294967295
 80117de:	d202      	bcs.n	80117e6 <__divdi3+0x11a>
 80117e0:	42bb      	cmp	r3, r7
 80117e2:	f200 80bd 	bhi.w	8011960 <__divdi3+0x294>
 80117e6:	4688      	mov	r8, r1
 80117e8:	1aff      	subs	r7, r7, r3
 80117ea:	b2a4      	uxth	r4, r4
 80117ec:	fbb7 f3fe 	udiv	r3, r7, lr
 80117f0:	fb0e 7713 	mls	r7, lr, r3, r7
 80117f4:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80117f8:	fb0c fc03 	mul.w	ip, ip, r3
 80117fc:	45bc      	cmp	ip, r7
 80117fe:	d907      	bls.n	8011810 <__divdi3+0x144>
 8011800:	197f      	adds	r7, r7, r5
 8011802:	f103 31ff 	add.w	r1, r3, #4294967295
 8011806:	d202      	bcs.n	801180e <__divdi3+0x142>
 8011808:	45bc      	cmp	ip, r7
 801180a:	f200 80a7 	bhi.w	801195c <__divdi3+0x290>
 801180e:	460b      	mov	r3, r1
 8011810:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011814:	e7ad      	b.n	8011772 <__divdi3+0xa6>
 8011816:	4252      	negs	r2, r2
 8011818:	ea6f 0606 	mvn.w	r6, r6
 801181c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011820:	e75d      	b.n	80116de <__divdi3+0x12>
 8011822:	4240      	negs	r0, r0
 8011824:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8011828:	f04f 36ff 	mov.w	r6, #4294967295
 801182c:	e754      	b.n	80116d8 <__divdi3+0xc>
 801182e:	f1c0 0220 	rsb	r2, r0, #32
 8011832:	fa24 f102 	lsr.w	r1, r4, r2
 8011836:	fa07 f300 	lsl.w	r3, r7, r0
 801183a:	4085      	lsls	r5, r0
 801183c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011840:	40d7      	lsrs	r7, r2
 8011842:	4319      	orrs	r1, r3
 8011844:	fbb7 f2fe 	udiv	r2, r7, lr
 8011848:	0c0b      	lsrs	r3, r1, #16
 801184a:	fb0e 7712 	mls	r7, lr, r2, r7
 801184e:	fa1f fc85 	uxth.w	ip, r5
 8011852:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011856:	fb0c f702 	mul.w	r7, ip, r2
 801185a:	429f      	cmp	r7, r3
 801185c:	fa04 f400 	lsl.w	r4, r4, r0
 8011860:	d907      	bls.n	8011872 <__divdi3+0x1a6>
 8011862:	195b      	adds	r3, r3, r5
 8011864:	f102 30ff 	add.w	r0, r2, #4294967295
 8011868:	d274      	bcs.n	8011954 <__divdi3+0x288>
 801186a:	429f      	cmp	r7, r3
 801186c:	d972      	bls.n	8011954 <__divdi3+0x288>
 801186e:	3a02      	subs	r2, #2
 8011870:	442b      	add	r3, r5
 8011872:	1bdf      	subs	r7, r3, r7
 8011874:	b289      	uxth	r1, r1
 8011876:	fbb7 f8fe 	udiv	r8, r7, lr
 801187a:	fb0e 7318 	mls	r3, lr, r8, r7
 801187e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8011882:	fb0c f708 	mul.w	r7, ip, r8
 8011886:	429f      	cmp	r7, r3
 8011888:	d908      	bls.n	801189c <__divdi3+0x1d0>
 801188a:	195b      	adds	r3, r3, r5
 801188c:	f108 31ff 	add.w	r1, r8, #4294967295
 8011890:	d25c      	bcs.n	801194c <__divdi3+0x280>
 8011892:	429f      	cmp	r7, r3
 8011894:	d95a      	bls.n	801194c <__divdi3+0x280>
 8011896:	f1a8 0802 	sub.w	r8, r8, #2
 801189a:	442b      	add	r3, r5
 801189c:	1bd8      	subs	r0, r3, r7
 801189e:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80118a2:	e78e      	b.n	80117c2 <__divdi3+0xf6>
 80118a4:	f1c2 0320 	rsb	r3, r2, #32
 80118a8:	fa2c f103 	lsr.w	r1, ip, r3
 80118ac:	fa0e fe02 	lsl.w	lr, lr, r2
 80118b0:	fa20 f703 	lsr.w	r7, r0, r3
 80118b4:	ea41 0e0e 	orr.w	lr, r1, lr
 80118b8:	fa08 f002 	lsl.w	r0, r8, r2
 80118bc:	fa28 f103 	lsr.w	r1, r8, r3
 80118c0:	ea4f 451e 	mov.w	r5, lr, lsr #16
 80118c4:	4338      	orrs	r0, r7
 80118c6:	fbb1 f8f5 	udiv	r8, r1, r5
 80118ca:	0c03      	lsrs	r3, r0, #16
 80118cc:	fb05 1118 	mls	r1, r5, r8, r1
 80118d0:	fa1f f78e 	uxth.w	r7, lr
 80118d4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80118d8:	fb07 f308 	mul.w	r3, r7, r8
 80118dc:	428b      	cmp	r3, r1
 80118de:	fa0c fc02 	lsl.w	ip, ip, r2
 80118e2:	d909      	bls.n	80118f8 <__divdi3+0x22c>
 80118e4:	eb11 010e 	adds.w	r1, r1, lr
 80118e8:	f108 39ff 	add.w	r9, r8, #4294967295
 80118ec:	d230      	bcs.n	8011950 <__divdi3+0x284>
 80118ee:	428b      	cmp	r3, r1
 80118f0:	d92e      	bls.n	8011950 <__divdi3+0x284>
 80118f2:	f1a8 0802 	sub.w	r8, r8, #2
 80118f6:	4471      	add	r1, lr
 80118f8:	1ac9      	subs	r1, r1, r3
 80118fa:	b280      	uxth	r0, r0
 80118fc:	fbb1 f3f5 	udiv	r3, r1, r5
 8011900:	fb05 1113 	mls	r1, r5, r3, r1
 8011904:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011908:	fb07 f703 	mul.w	r7, r7, r3
 801190c:	428f      	cmp	r7, r1
 801190e:	d908      	bls.n	8011922 <__divdi3+0x256>
 8011910:	eb11 010e 	adds.w	r1, r1, lr
 8011914:	f103 30ff 	add.w	r0, r3, #4294967295
 8011918:	d216      	bcs.n	8011948 <__divdi3+0x27c>
 801191a:	428f      	cmp	r7, r1
 801191c:	d914      	bls.n	8011948 <__divdi3+0x27c>
 801191e:	3b02      	subs	r3, #2
 8011920:	4471      	add	r1, lr
 8011922:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8011926:	1bc9      	subs	r1, r1, r7
 8011928:	fba3 890c 	umull	r8, r9, r3, ip
 801192c:	4549      	cmp	r1, r9
 801192e:	d309      	bcc.n	8011944 <__divdi3+0x278>
 8011930:	d005      	beq.n	801193e <__divdi3+0x272>
 8011932:	2200      	movs	r2, #0
 8011934:	e71d      	b.n	8011772 <__divdi3+0xa6>
 8011936:	4696      	mov	lr, r2
 8011938:	e6fe      	b.n	8011738 <__divdi3+0x6c>
 801193a:	4613      	mov	r3, r2
 801193c:	e711      	b.n	8011762 <__divdi3+0x96>
 801193e:	4094      	lsls	r4, r2
 8011940:	4544      	cmp	r4, r8
 8011942:	d2f6      	bcs.n	8011932 <__divdi3+0x266>
 8011944:	3b01      	subs	r3, #1
 8011946:	e7f4      	b.n	8011932 <__divdi3+0x266>
 8011948:	4603      	mov	r3, r0
 801194a:	e7ea      	b.n	8011922 <__divdi3+0x256>
 801194c:	4688      	mov	r8, r1
 801194e:	e7a5      	b.n	801189c <__divdi3+0x1d0>
 8011950:	46c8      	mov	r8, r9
 8011952:	e7d1      	b.n	80118f8 <__divdi3+0x22c>
 8011954:	4602      	mov	r2, r0
 8011956:	e78c      	b.n	8011872 <__divdi3+0x1a6>
 8011958:	4613      	mov	r3, r2
 801195a:	e70a      	b.n	8011772 <__divdi3+0xa6>
 801195c:	3b02      	subs	r3, #2
 801195e:	e757      	b.n	8011810 <__divdi3+0x144>
 8011960:	f1a8 0802 	sub.w	r8, r8, #2
 8011964:	442f      	add	r7, r5
 8011966:	e73f      	b.n	80117e8 <__divdi3+0x11c>

08011968 <__udivdi3>:
 8011968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801196c:	2b00      	cmp	r3, #0
 801196e:	d144      	bne.n	80119fa <__udivdi3+0x92>
 8011970:	428a      	cmp	r2, r1
 8011972:	4615      	mov	r5, r2
 8011974:	4604      	mov	r4, r0
 8011976:	d94f      	bls.n	8011a18 <__udivdi3+0xb0>
 8011978:	fab2 f782 	clz	r7, r2
 801197c:	460e      	mov	r6, r1
 801197e:	b14f      	cbz	r7, 8011994 <__udivdi3+0x2c>
 8011980:	f1c7 0320 	rsb	r3, r7, #32
 8011984:	40b9      	lsls	r1, r7
 8011986:	fa20 f603 	lsr.w	r6, r0, r3
 801198a:	fa02 f507 	lsl.w	r5, r2, r7
 801198e:	430e      	orrs	r6, r1
 8011990:	fa00 f407 	lsl.w	r4, r0, r7
 8011994:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011998:	0c23      	lsrs	r3, r4, #16
 801199a:	fbb6 f0fe 	udiv	r0, r6, lr
 801199e:	b2af      	uxth	r7, r5
 80119a0:	fb0e 6110 	mls	r1, lr, r0, r6
 80119a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80119a8:	fb07 f100 	mul.w	r1, r7, r0
 80119ac:	4299      	cmp	r1, r3
 80119ae:	d909      	bls.n	80119c4 <__udivdi3+0x5c>
 80119b0:	195b      	adds	r3, r3, r5
 80119b2:	f100 32ff 	add.w	r2, r0, #4294967295
 80119b6:	f080 80ec 	bcs.w	8011b92 <__udivdi3+0x22a>
 80119ba:	4299      	cmp	r1, r3
 80119bc:	f240 80e9 	bls.w	8011b92 <__udivdi3+0x22a>
 80119c0:	3802      	subs	r0, #2
 80119c2:	442b      	add	r3, r5
 80119c4:	1a5a      	subs	r2, r3, r1
 80119c6:	b2a4      	uxth	r4, r4
 80119c8:	fbb2 f3fe 	udiv	r3, r2, lr
 80119cc:	fb0e 2213 	mls	r2, lr, r3, r2
 80119d0:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80119d4:	fb07 f703 	mul.w	r7, r7, r3
 80119d8:	4297      	cmp	r7, r2
 80119da:	d908      	bls.n	80119ee <__udivdi3+0x86>
 80119dc:	1952      	adds	r2, r2, r5
 80119de:	f103 31ff 	add.w	r1, r3, #4294967295
 80119e2:	f080 80d8 	bcs.w	8011b96 <__udivdi3+0x22e>
 80119e6:	4297      	cmp	r7, r2
 80119e8:	f240 80d5 	bls.w	8011b96 <__udivdi3+0x22e>
 80119ec:	3b02      	subs	r3, #2
 80119ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80119f2:	2600      	movs	r6, #0
 80119f4:	4631      	mov	r1, r6
 80119f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119fa:	428b      	cmp	r3, r1
 80119fc:	d847      	bhi.n	8011a8e <__udivdi3+0x126>
 80119fe:	fab3 f683 	clz	r6, r3
 8011a02:	2e00      	cmp	r6, #0
 8011a04:	d148      	bne.n	8011a98 <__udivdi3+0x130>
 8011a06:	428b      	cmp	r3, r1
 8011a08:	d302      	bcc.n	8011a10 <__udivdi3+0xa8>
 8011a0a:	4282      	cmp	r2, r0
 8011a0c:	f200 80cd 	bhi.w	8011baa <__udivdi3+0x242>
 8011a10:	2001      	movs	r0, #1
 8011a12:	4631      	mov	r1, r6
 8011a14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a18:	b912      	cbnz	r2, 8011a20 <__udivdi3+0xb8>
 8011a1a:	2501      	movs	r5, #1
 8011a1c:	fbb5 f5f2 	udiv	r5, r5, r2
 8011a20:	fab5 f885 	clz	r8, r5
 8011a24:	f1b8 0f00 	cmp.w	r8, #0
 8011a28:	d177      	bne.n	8011b1a <__udivdi3+0x1b2>
 8011a2a:	1b4a      	subs	r2, r1, r5
 8011a2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011a30:	b2af      	uxth	r7, r5
 8011a32:	2601      	movs	r6, #1
 8011a34:	fbb2 f0fe 	udiv	r0, r2, lr
 8011a38:	0c23      	lsrs	r3, r4, #16
 8011a3a:	fb0e 2110 	mls	r1, lr, r0, r2
 8011a3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8011a42:	fb07 f300 	mul.w	r3, r7, r0
 8011a46:	428b      	cmp	r3, r1
 8011a48:	d907      	bls.n	8011a5a <__udivdi3+0xf2>
 8011a4a:	1949      	adds	r1, r1, r5
 8011a4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8011a50:	d202      	bcs.n	8011a58 <__udivdi3+0xf0>
 8011a52:	428b      	cmp	r3, r1
 8011a54:	f200 80ba 	bhi.w	8011bcc <__udivdi3+0x264>
 8011a58:	4610      	mov	r0, r2
 8011a5a:	1ac9      	subs	r1, r1, r3
 8011a5c:	b2a4      	uxth	r4, r4
 8011a5e:	fbb1 f3fe 	udiv	r3, r1, lr
 8011a62:	fb0e 1113 	mls	r1, lr, r3, r1
 8011a66:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8011a6a:	fb07 f703 	mul.w	r7, r7, r3
 8011a6e:	42a7      	cmp	r7, r4
 8011a70:	d908      	bls.n	8011a84 <__udivdi3+0x11c>
 8011a72:	1964      	adds	r4, r4, r5
 8011a74:	f103 32ff 	add.w	r2, r3, #4294967295
 8011a78:	f080 808f 	bcs.w	8011b9a <__udivdi3+0x232>
 8011a7c:	42a7      	cmp	r7, r4
 8011a7e:	f240 808c 	bls.w	8011b9a <__udivdi3+0x232>
 8011a82:	3b02      	subs	r3, #2
 8011a84:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011a88:	4631      	mov	r1, r6
 8011a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a8e:	2600      	movs	r6, #0
 8011a90:	4630      	mov	r0, r6
 8011a92:	4631      	mov	r1, r6
 8011a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a98:	f1c6 0420 	rsb	r4, r6, #32
 8011a9c:	fa22 f504 	lsr.w	r5, r2, r4
 8011aa0:	40b3      	lsls	r3, r6
 8011aa2:	432b      	orrs	r3, r5
 8011aa4:	fa20 fc04 	lsr.w	ip, r0, r4
 8011aa8:	fa01 f706 	lsl.w	r7, r1, r6
 8011aac:	fa21 f504 	lsr.w	r5, r1, r4
 8011ab0:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8011ab4:	ea4c 0707 	orr.w	r7, ip, r7
 8011ab8:	fbb5 f8fe 	udiv	r8, r5, lr
 8011abc:	0c39      	lsrs	r1, r7, #16
 8011abe:	fb0e 5518 	mls	r5, lr, r8, r5
 8011ac2:	fa1f fc83 	uxth.w	ip, r3
 8011ac6:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8011aca:	fb0c f108 	mul.w	r1, ip, r8
 8011ace:	42a9      	cmp	r1, r5
 8011ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8011ad4:	d904      	bls.n	8011ae0 <__udivdi3+0x178>
 8011ad6:	18ed      	adds	r5, r5, r3
 8011ad8:	f108 34ff 	add.w	r4, r8, #4294967295
 8011adc:	d367      	bcc.n	8011bae <__udivdi3+0x246>
 8011ade:	46a0      	mov	r8, r4
 8011ae0:	1a6d      	subs	r5, r5, r1
 8011ae2:	b2bf      	uxth	r7, r7
 8011ae4:	fbb5 f4fe 	udiv	r4, r5, lr
 8011ae8:	fb0e 5514 	mls	r5, lr, r4, r5
 8011aec:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 8011af0:	fb0c fc04 	mul.w	ip, ip, r4
 8011af4:	458c      	cmp	ip, r1
 8011af6:	d904      	bls.n	8011b02 <__udivdi3+0x19a>
 8011af8:	18c9      	adds	r1, r1, r3
 8011afa:	f104 35ff 	add.w	r5, r4, #4294967295
 8011afe:	d35c      	bcc.n	8011bba <__udivdi3+0x252>
 8011b00:	462c      	mov	r4, r5
 8011b02:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 8011b06:	ebcc 0101 	rsb	r1, ip, r1
 8011b0a:	fba4 2302 	umull	r2, r3, r4, r2
 8011b0e:	4299      	cmp	r1, r3
 8011b10:	d348      	bcc.n	8011ba4 <__udivdi3+0x23c>
 8011b12:	d044      	beq.n	8011b9e <__udivdi3+0x236>
 8011b14:	4620      	mov	r0, r4
 8011b16:	2600      	movs	r6, #0
 8011b18:	e76c      	b.n	80119f4 <__udivdi3+0x8c>
 8011b1a:	f1c8 0420 	rsb	r4, r8, #32
 8011b1e:	fa01 f308 	lsl.w	r3, r1, r8
 8011b22:	fa05 f508 	lsl.w	r5, r5, r8
 8011b26:	fa20 f704 	lsr.w	r7, r0, r4
 8011b2a:	40e1      	lsrs	r1, r4
 8011b2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011b30:	431f      	orrs	r7, r3
 8011b32:	fbb1 f6fe 	udiv	r6, r1, lr
 8011b36:	0c3a      	lsrs	r2, r7, #16
 8011b38:	fb0e 1116 	mls	r1, lr, r6, r1
 8011b3c:	fa1f fc85 	uxth.w	ip, r5
 8011b40:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 8011b44:	fb0c f206 	mul.w	r2, ip, r6
 8011b48:	429a      	cmp	r2, r3
 8011b4a:	fa00 f408 	lsl.w	r4, r0, r8
 8011b4e:	d907      	bls.n	8011b60 <__udivdi3+0x1f8>
 8011b50:	195b      	adds	r3, r3, r5
 8011b52:	f106 31ff 	add.w	r1, r6, #4294967295
 8011b56:	d237      	bcs.n	8011bc8 <__udivdi3+0x260>
 8011b58:	429a      	cmp	r2, r3
 8011b5a:	d935      	bls.n	8011bc8 <__udivdi3+0x260>
 8011b5c:	3e02      	subs	r6, #2
 8011b5e:	442b      	add	r3, r5
 8011b60:	1a9b      	subs	r3, r3, r2
 8011b62:	b2bf      	uxth	r7, r7
 8011b64:	fbb3 f0fe 	udiv	r0, r3, lr
 8011b68:	fb0e 3310 	mls	r3, lr, r0, r3
 8011b6c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8011b70:	fb0c f100 	mul.w	r1, ip, r0
 8011b74:	4299      	cmp	r1, r3
 8011b76:	d907      	bls.n	8011b88 <__udivdi3+0x220>
 8011b78:	195b      	adds	r3, r3, r5
 8011b7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8011b7e:	d221      	bcs.n	8011bc4 <__udivdi3+0x25c>
 8011b80:	4299      	cmp	r1, r3
 8011b82:	d91f      	bls.n	8011bc4 <__udivdi3+0x25c>
 8011b84:	3802      	subs	r0, #2
 8011b86:	442b      	add	r3, r5
 8011b88:	1a5a      	subs	r2, r3, r1
 8011b8a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8011b8e:	4667      	mov	r7, ip
 8011b90:	e750      	b.n	8011a34 <__udivdi3+0xcc>
 8011b92:	4610      	mov	r0, r2
 8011b94:	e716      	b.n	80119c4 <__udivdi3+0x5c>
 8011b96:	460b      	mov	r3, r1
 8011b98:	e729      	b.n	80119ee <__udivdi3+0x86>
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	e772      	b.n	8011a84 <__udivdi3+0x11c>
 8011b9e:	40b0      	lsls	r0, r6
 8011ba0:	4290      	cmp	r0, r2
 8011ba2:	d2b7      	bcs.n	8011b14 <__udivdi3+0x1ac>
 8011ba4:	1e60      	subs	r0, r4, #1
 8011ba6:	2600      	movs	r6, #0
 8011ba8:	e724      	b.n	80119f4 <__udivdi3+0x8c>
 8011baa:	4630      	mov	r0, r6
 8011bac:	e722      	b.n	80119f4 <__udivdi3+0x8c>
 8011bae:	42a9      	cmp	r1, r5
 8011bb0:	d995      	bls.n	8011ade <__udivdi3+0x176>
 8011bb2:	f1a8 0802 	sub.w	r8, r8, #2
 8011bb6:	441d      	add	r5, r3
 8011bb8:	e792      	b.n	8011ae0 <__udivdi3+0x178>
 8011bba:	458c      	cmp	ip, r1
 8011bbc:	d9a0      	bls.n	8011b00 <__udivdi3+0x198>
 8011bbe:	3c02      	subs	r4, #2
 8011bc0:	4419      	add	r1, r3
 8011bc2:	e79e      	b.n	8011b02 <__udivdi3+0x19a>
 8011bc4:	4610      	mov	r0, r2
 8011bc6:	e7df      	b.n	8011b88 <__udivdi3+0x220>
 8011bc8:	460e      	mov	r6, r1
 8011bca:	e7c9      	b.n	8011b60 <__udivdi3+0x1f8>
 8011bcc:	3802      	subs	r0, #2
 8011bce:	4429      	add	r1, r5
 8011bd0:	e743      	b.n	8011a5a <__udivdi3+0xf2>
 8011bd2:	bf00      	nop

08011bd4 <atoi>:
 8011bd4:	2100      	movs	r1, #0
 8011bd6:	220a      	movs	r2, #10
 8011bd8:	f000 bc58 	b.w	801248c <strtol>

08011bdc <__errno>:
 8011bdc:	4b01      	ldr	r3, [pc, #4]	; (8011be4 <__errno+0x8>)
 8011bde:	6818      	ldr	r0, [r3, #0]
 8011be0:	4770      	bx	lr
 8011be2:	bf00      	nop
 8011be4:	1fff4360 	.word	0x1fff4360

08011be8 <__libc_init_array>:
 8011be8:	b570      	push	{r4, r5, r6, lr}
 8011bea:	4b0e      	ldr	r3, [pc, #56]	; (8011c24 <__libc_init_array+0x3c>)
 8011bec:	4c0e      	ldr	r4, [pc, #56]	; (8011c28 <__libc_init_array+0x40>)
 8011bee:	1ae4      	subs	r4, r4, r3
 8011bf0:	10a4      	asrs	r4, r4, #2
 8011bf2:	2500      	movs	r5, #0
 8011bf4:	461e      	mov	r6, r3
 8011bf6:	42a5      	cmp	r5, r4
 8011bf8:	d004      	beq.n	8011c04 <__libc_init_array+0x1c>
 8011bfa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011bfe:	4798      	blx	r3
 8011c00:	3501      	adds	r5, #1
 8011c02:	e7f8      	b.n	8011bf6 <__libc_init_array+0xe>
 8011c04:	f7f3 fa4a 	bl	800509c <_init>
 8011c08:	4c08      	ldr	r4, [pc, #32]	; (8011c2c <__libc_init_array+0x44>)
 8011c0a:	4b09      	ldr	r3, [pc, #36]	; (8011c30 <__libc_init_array+0x48>)
 8011c0c:	1ae4      	subs	r4, r4, r3
 8011c0e:	10a4      	asrs	r4, r4, #2
 8011c10:	2500      	movs	r5, #0
 8011c12:	461e      	mov	r6, r3
 8011c14:	42a5      	cmp	r5, r4
 8011c16:	d004      	beq.n	8011c22 <__libc_init_array+0x3a>
 8011c18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011c1c:	4798      	blx	r3
 8011c1e:	3501      	adds	r5, #1
 8011c20:	e7f8      	b.n	8011c14 <__libc_init_array+0x2c>
 8011c22:	bd70      	pop	{r4, r5, r6, pc}
 8011c24:	1fff43a8 	.word	0x1fff43a8
 8011c28:	1fff43a8 	.word	0x1fff43a8
 8011c2c:	1fff43a8 	.word	0x1fff43a8
 8011c30:	1fff43a8 	.word	0x1fff43a8

08011c34 <memcpy>:
 8011c34:	b510      	push	{r4, lr}
 8011c36:	1e43      	subs	r3, r0, #1
 8011c38:	440a      	add	r2, r1
 8011c3a:	4291      	cmp	r1, r2
 8011c3c:	d004      	beq.n	8011c48 <memcpy+0x14>
 8011c3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011c42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011c46:	e7f8      	b.n	8011c3a <memcpy+0x6>
 8011c48:	bd10      	pop	{r4, pc}

08011c4a <memset>:
 8011c4a:	4402      	add	r2, r0
 8011c4c:	4603      	mov	r3, r0
 8011c4e:	4293      	cmp	r3, r2
 8011c50:	d002      	beq.n	8011c58 <memset+0xe>
 8011c52:	f803 1b01 	strb.w	r1, [r3], #1
 8011c56:	e7fa      	b.n	8011c4e <memset+0x4>
 8011c58:	4770      	bx	lr
	...

08011c5c <validate_structure>:
 8011c5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011c5e:	6801      	ldr	r1, [r0, #0]
 8011c60:	293b      	cmp	r1, #59	; 0x3b
 8011c62:	4604      	mov	r4, r0
 8011c64:	d911      	bls.n	8011c8a <validate_structure+0x2e>
 8011c66:	223c      	movs	r2, #60	; 0x3c
 8011c68:	4668      	mov	r0, sp
 8011c6a:	f000 fd85 	bl	8012778 <div>
 8011c6e:	9a01      	ldr	r2, [sp, #4]
 8011c70:	6861      	ldr	r1, [r4, #4]
 8011c72:	9b00      	ldr	r3, [sp, #0]
 8011c74:	2a00      	cmp	r2, #0
 8011c76:	440b      	add	r3, r1
 8011c78:	6063      	str	r3, [r4, #4]
 8011c7a:	bfbb      	ittet	lt
 8011c7c:	323c      	addlt	r2, #60	; 0x3c
 8011c7e:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011c82:	6022      	strge	r2, [r4, #0]
 8011c84:	6022      	strlt	r2, [r4, #0]
 8011c86:	bfb8      	it	lt
 8011c88:	6063      	strlt	r3, [r4, #4]
 8011c8a:	6861      	ldr	r1, [r4, #4]
 8011c8c:	293b      	cmp	r1, #59	; 0x3b
 8011c8e:	d911      	bls.n	8011cb4 <validate_structure+0x58>
 8011c90:	223c      	movs	r2, #60	; 0x3c
 8011c92:	4668      	mov	r0, sp
 8011c94:	f000 fd70 	bl	8012778 <div>
 8011c98:	9a01      	ldr	r2, [sp, #4]
 8011c9a:	68a1      	ldr	r1, [r4, #8]
 8011c9c:	9b00      	ldr	r3, [sp, #0]
 8011c9e:	2a00      	cmp	r2, #0
 8011ca0:	440b      	add	r3, r1
 8011ca2:	60a3      	str	r3, [r4, #8]
 8011ca4:	bfbb      	ittet	lt
 8011ca6:	323c      	addlt	r2, #60	; 0x3c
 8011ca8:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011cac:	6062      	strge	r2, [r4, #4]
 8011cae:	6062      	strlt	r2, [r4, #4]
 8011cb0:	bfb8      	it	lt
 8011cb2:	60a3      	strlt	r3, [r4, #8]
 8011cb4:	68a1      	ldr	r1, [r4, #8]
 8011cb6:	2917      	cmp	r1, #23
 8011cb8:	d911      	bls.n	8011cde <validate_structure+0x82>
 8011cba:	2218      	movs	r2, #24
 8011cbc:	4668      	mov	r0, sp
 8011cbe:	f000 fd5b 	bl	8012778 <div>
 8011cc2:	9a01      	ldr	r2, [sp, #4]
 8011cc4:	68e1      	ldr	r1, [r4, #12]
 8011cc6:	9b00      	ldr	r3, [sp, #0]
 8011cc8:	2a00      	cmp	r2, #0
 8011cca:	440b      	add	r3, r1
 8011ccc:	60e3      	str	r3, [r4, #12]
 8011cce:	bfbb      	ittet	lt
 8011cd0:	3218      	addlt	r2, #24
 8011cd2:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011cd6:	60a2      	strge	r2, [r4, #8]
 8011cd8:	60a2      	strlt	r2, [r4, #8]
 8011cda:	bfb8      	it	lt
 8011cdc:	60e3      	strlt	r3, [r4, #12]
 8011cde:	6921      	ldr	r1, [r4, #16]
 8011ce0:	290b      	cmp	r1, #11
 8011ce2:	d911      	bls.n	8011d08 <validate_structure+0xac>
 8011ce4:	220c      	movs	r2, #12
 8011ce6:	4668      	mov	r0, sp
 8011ce8:	f000 fd46 	bl	8012778 <div>
 8011cec:	9a01      	ldr	r2, [sp, #4]
 8011cee:	6961      	ldr	r1, [r4, #20]
 8011cf0:	9b00      	ldr	r3, [sp, #0]
 8011cf2:	2a00      	cmp	r2, #0
 8011cf4:	440b      	add	r3, r1
 8011cf6:	6163      	str	r3, [r4, #20]
 8011cf8:	bfbb      	ittet	lt
 8011cfa:	320c      	addlt	r2, #12
 8011cfc:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011d00:	6122      	strge	r2, [r4, #16]
 8011d02:	6122      	strlt	r2, [r4, #16]
 8011d04:	bfb8      	it	lt
 8011d06:	6163      	strlt	r3, [r4, #20]
 8011d08:	6963      	ldr	r3, [r4, #20]
 8011d0a:	079d      	lsls	r5, r3, #30
 8011d0c:	d112      	bne.n	8011d34 <validate_structure+0xd8>
 8011d0e:	2164      	movs	r1, #100	; 0x64
 8011d10:	fb93 f2f1 	sdiv	r2, r3, r1
 8011d14:	fb01 3212 	mls	r2, r1, r2, r3
 8011d18:	b972      	cbnz	r2, 8011d38 <validate_structure+0xdc>
 8011d1a:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8011d1e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011d22:	fb93 f2f1 	sdiv	r2, r3, r1
 8011d26:	fb01 3312 	mls	r3, r1, r2, r3
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	bf14      	ite	ne
 8011d2e:	231c      	movne	r3, #28
 8011d30:	231d      	moveq	r3, #29
 8011d32:	e002      	b.n	8011d3a <validate_structure+0xde>
 8011d34:	231c      	movs	r3, #28
 8011d36:	e000      	b.n	8011d3a <validate_structure+0xde>
 8011d38:	231d      	movs	r3, #29
 8011d3a:	68e2      	ldr	r2, [r4, #12]
 8011d3c:	2a00      	cmp	r2, #0
 8011d3e:	dc37      	bgt.n	8011db0 <validate_structure+0x154>
 8011d40:	68e5      	ldr	r5, [r4, #12]
 8011d42:	2d00      	cmp	r5, #0
 8011d44:	dc5c      	bgt.n	8011e00 <validate_structure+0x1a4>
 8011d46:	6921      	ldr	r1, [r4, #16]
 8011d48:	3901      	subs	r1, #1
 8011d4a:	6121      	str	r1, [r4, #16]
 8011d4c:	3101      	adds	r1, #1
 8011d4e:	d11c      	bne.n	8011d8a <validate_structure+0x12e>
 8011d50:	6963      	ldr	r3, [r4, #20]
 8011d52:	1e59      	subs	r1, r3, #1
 8011d54:	220b      	movs	r2, #11
 8011d56:	0788      	lsls	r0, r1, #30
 8011d58:	6161      	str	r1, [r4, #20]
 8011d5a:	6122      	str	r2, [r4, #16]
 8011d5c:	d112      	bne.n	8011d84 <validate_structure+0x128>
 8011d5e:	2264      	movs	r2, #100	; 0x64
 8011d60:	fb91 f0f2 	sdiv	r0, r1, r2
 8011d64:	fb02 1110 	mls	r1, r2, r0, r1
 8011d68:	b971      	cbnz	r1, 8011d88 <validate_structure+0x12c>
 8011d6a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011d6e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011d72:	fb93 f1f2 	sdiv	r1, r3, r2
 8011d76:	fb02 3311 	mls	r3, r2, r1, r3
 8011d7a:	2b00      	cmp	r3, #0
 8011d7c:	bf14      	ite	ne
 8011d7e:	231c      	movne	r3, #28
 8011d80:	231d      	moveq	r3, #29
 8011d82:	e002      	b.n	8011d8a <validate_structure+0x12e>
 8011d84:	231c      	movs	r3, #28
 8011d86:	e000      	b.n	8011d8a <validate_structure+0x12e>
 8011d88:	231d      	movs	r3, #29
 8011d8a:	6922      	ldr	r2, [r4, #16]
 8011d8c:	2a01      	cmp	r2, #1
 8011d8e:	bf1a      	itte	ne
 8011d90:	491c      	ldrne	r1, [pc, #112]	; (8011e04 <validate_structure+0x1a8>)
 8011d92:	f851 2022 	ldrne.w	r2, [r1, r2, lsl #2]
 8011d96:	461a      	moveq	r2, r3
 8011d98:	442a      	add	r2, r5
 8011d9a:	60e2      	str	r2, [r4, #12]
 8011d9c:	e7d0      	b.n	8011d40 <validate_structure+0xe4>
 8011d9e:	4299      	cmp	r1, r3
 8011da0:	dd2e      	ble.n	8011e00 <validate_structure+0x1a4>
 8011da2:	4618      	mov	r0, r3
 8011da4:	3201      	adds	r2, #1
 8011da6:	1a09      	subs	r1, r1, r0
 8011da8:	2a0c      	cmp	r2, #12
 8011daa:	60e1      	str	r1, [r4, #12]
 8011dac:	6122      	str	r2, [r4, #16]
 8011dae:	d009      	beq.n	8011dc4 <validate_structure+0x168>
 8011db0:	6922      	ldr	r2, [r4, #16]
 8011db2:	68e1      	ldr	r1, [r4, #12]
 8011db4:	2a01      	cmp	r2, #1
 8011db6:	d0f2      	beq.n	8011d9e <validate_structure+0x142>
 8011db8:	4812      	ldr	r0, [pc, #72]	; (8011e04 <validate_structure+0x1a8>)
 8011dba:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8011dbe:	4281      	cmp	r1, r0
 8011dc0:	dcf0      	bgt.n	8011da4 <validate_structure+0x148>
 8011dc2:	e01d      	b.n	8011e00 <validate_structure+0x1a4>
 8011dc4:	6963      	ldr	r3, [r4, #20]
 8011dc6:	2100      	movs	r1, #0
 8011dc8:	1c5a      	adds	r2, r3, #1
 8011dca:	6121      	str	r1, [r4, #16]
 8011dcc:	0791      	lsls	r1, r2, #30
 8011dce:	6162      	str	r2, [r4, #20]
 8011dd0:	d112      	bne.n	8011df8 <validate_structure+0x19c>
 8011dd2:	2064      	movs	r0, #100	; 0x64
 8011dd4:	fb92 f1f0 	sdiv	r1, r2, r0
 8011dd8:	fb00 2211 	mls	r2, r0, r1, r2
 8011ddc:	b972      	cbnz	r2, 8011dfc <validate_structure+0x1a0>
 8011dde:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 8011de2:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011de6:	fb93 f2f1 	sdiv	r2, r3, r1
 8011dea:	fb01 3312 	mls	r3, r1, r2, r3
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	bf14      	ite	ne
 8011df2:	231c      	movne	r3, #28
 8011df4:	231d      	moveq	r3, #29
 8011df6:	e7db      	b.n	8011db0 <validate_structure+0x154>
 8011df8:	231c      	movs	r3, #28
 8011dfa:	e7d9      	b.n	8011db0 <validate_structure+0x154>
 8011dfc:	231d      	movs	r3, #29
 8011dfe:	e7d7      	b.n	8011db0 <validate_structure+0x154>
 8011e00:	b003      	add	sp, #12
 8011e02:	bd30      	pop	{r4, r5, pc}
 8011e04:	080148a4 	.word	0x080148a4

08011e08 <mktime>:
 8011e08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e0c:	4680      	mov	r8, r0
 8011e0e:	f000 fe3d 	bl	8012a8c <__gettzinfo>
 8011e12:	4681      	mov	r9, r0
 8011e14:	4640      	mov	r0, r8
 8011e16:	f7ff ff21 	bl	8011c5c <validate_structure>
 8011e1a:	e898 000c 	ldmia.w	r8, {r2, r3}
 8011e1e:	203c      	movs	r0, #60	; 0x3c
 8011e20:	fb00 2303 	mla	r3, r0, r3, r2
 8011e24:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011e28:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8011e2c:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 8011e30:	fb07 3002 	mla	r0, r7, r2, r3
 8011e34:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011e38:	4aad      	ldr	r2, [pc, #692]	; (80120f0 <mktime+0x2e8>)
 8011e3a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011e3e:	3c01      	subs	r4, #1
 8011e40:	2b01      	cmp	r3, #1
 8011e42:	4414      	add	r4, r2
 8011e44:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011e48:	dd11      	ble.n	8011e6e <mktime+0x66>
 8011e4a:	079a      	lsls	r2, r3, #30
 8011e4c:	d10f      	bne.n	8011e6e <mktime+0x66>
 8011e4e:	2164      	movs	r1, #100	; 0x64
 8011e50:	fb93 f2f1 	sdiv	r2, r3, r1
 8011e54:	fb01 3212 	mls	r2, r1, r2, r3
 8011e58:	b942      	cbnz	r2, 8011e6c <mktime+0x64>
 8011e5a:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8011e5e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011e62:	fb95 f1f2 	sdiv	r1, r5, r2
 8011e66:	fb02 5211 	mls	r2, r2, r1, r5
 8011e6a:	b902      	cbnz	r2, 8011e6e <mktime+0x66>
 8011e6c:	3401      	adds	r4, #1
 8011e6e:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 8011e72:	3210      	adds	r2, #16
 8011e74:	f644 6120 	movw	r1, #20000	; 0x4e20
 8011e78:	428a      	cmp	r2, r1
 8011e7a:	f8c8 401c 	str.w	r4, [r8, #28]
 8011e7e:	461e      	mov	r6, r3
 8011e80:	f200 8131 	bhi.w	80120e6 <mktime+0x2de>
 8011e84:	2b46      	cmp	r3, #70	; 0x46
 8011e86:	dd21      	ble.n	8011ecc <mktime+0xc4>
 8011e88:	2146      	movs	r1, #70	; 0x46
 8011e8a:	078f      	lsls	r7, r1, #30
 8011e8c:	d114      	bne.n	8011eb8 <mktime+0xb0>
 8011e8e:	2564      	movs	r5, #100	; 0x64
 8011e90:	fb91 f2f5 	sdiv	r2, r1, r5
 8011e94:	fb05 1212 	mls	r2, r5, r2, r1
 8011e98:	b98a      	cbnz	r2, 8011ebe <mktime+0xb6>
 8011e9a:	f201 776c 	addw	r7, r1, #1900	; 0x76c
 8011e9e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011ea2:	fb97 f5f2 	sdiv	r5, r7, r2
 8011ea6:	fb02 7215 	mls	r2, r2, r5, r7
 8011eaa:	2a00      	cmp	r2, #0
 8011eac:	f240 126d 	movw	r2, #365	; 0x16d
 8011eb0:	bf08      	it	eq
 8011eb2:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011eb6:	e004      	b.n	8011ec2 <mktime+0xba>
 8011eb8:	f240 126d 	movw	r2, #365	; 0x16d
 8011ebc:	e001      	b.n	8011ec2 <mktime+0xba>
 8011ebe:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011ec2:	3101      	adds	r1, #1
 8011ec4:	4299      	cmp	r1, r3
 8011ec6:	4414      	add	r4, r2
 8011ec8:	d1df      	bne.n	8011e8a <mktime+0x82>
 8011eca:	e043      	b.n	8011f54 <mktime+0x14c>
 8011ecc:	d042      	beq.n	8011f54 <mktime+0x14c>
 8011ece:	2145      	movs	r1, #69	; 0x45
 8011ed0:	4299      	cmp	r1, r3
 8011ed2:	dd1e      	ble.n	8011f12 <mktime+0x10a>
 8011ed4:	078e      	lsls	r6, r1, #30
 8011ed6:	d114      	bne.n	8011f02 <mktime+0xfa>
 8011ed8:	2564      	movs	r5, #100	; 0x64
 8011eda:	fb91 f2f5 	sdiv	r2, r1, r5
 8011ede:	fb05 1212 	mls	r2, r5, r2, r1
 8011ee2:	b98a      	cbnz	r2, 8011f08 <mktime+0x100>
 8011ee4:	f201 766c 	addw	r6, r1, #1900	; 0x76c
 8011ee8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011eec:	fb96 f5f2 	sdiv	r5, r6, r2
 8011ef0:	fb02 6215 	mls	r2, r2, r5, r6
 8011ef4:	2a00      	cmp	r2, #0
 8011ef6:	f240 126d 	movw	r2, #365	; 0x16d
 8011efa:	bf08      	it	eq
 8011efc:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011f00:	e004      	b.n	8011f0c <mktime+0x104>
 8011f02:	f240 126d 	movw	r2, #365	; 0x16d
 8011f06:	e001      	b.n	8011f0c <mktime+0x104>
 8011f08:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011f0c:	1aa4      	subs	r4, r4, r2
 8011f0e:	3901      	subs	r1, #1
 8011f10:	e7de      	b.n	8011ed0 <mktime+0xc8>
 8011f12:	2b45      	cmp	r3, #69	; 0x45
 8011f14:	bfa8      	it	ge
 8011f16:	2345      	movge	r3, #69	; 0x45
 8011f18:	079d      	lsls	r5, r3, #30
 8011f1a:	461e      	mov	r6, r3
 8011f1c:	d114      	bne.n	8011f48 <mktime+0x140>
 8011f1e:	2264      	movs	r2, #100	; 0x64
 8011f20:	fb93 f3f2 	sdiv	r3, r3, r2
 8011f24:	fb02 6313 	mls	r3, r2, r3, r6
 8011f28:	b98b      	cbnz	r3, 8011f4e <mktime+0x146>
 8011f2a:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8011f2e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011f32:	fb91 f2f3 	sdiv	r2, r1, r3
 8011f36:	fb03 1312 	mls	r3, r3, r2, r1
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f240 136d 	movw	r3, #365	; 0x16d
 8011f40:	bf08      	it	eq
 8011f42:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8011f46:	e004      	b.n	8011f52 <mktime+0x14a>
 8011f48:	f240 136d 	movw	r3, #365	; 0x16d
 8011f4c:	e001      	b.n	8011f52 <mktime+0x14a>
 8011f4e:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011f52:	1ae4      	subs	r4, r4, r3
 8011f54:	4f67      	ldr	r7, [pc, #412]	; (80120f4 <mktime+0x2ec>)
 8011f56:	fb07 0704 	mla	r7, r7, r4, r0
 8011f5a:	f000 fb4b 	bl	80125f4 <__tz_lock>
 8011f5e:	4b66      	ldr	r3, [pc, #408]	; (80120f8 <mktime+0x2f0>)
 8011f60:	681d      	ldr	r5, [r3, #0]
 8011f62:	2d00      	cmp	r5, #0
 8011f64:	f000 80aa 	beq.w	80120bc <mktime+0x2b4>
 8011f68:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8011f6c:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011f70:	2b01      	cmp	r3, #1
 8011f72:	bfa8      	it	ge
 8011f74:	2301      	movge	r3, #1
 8011f76:	469a      	mov	sl, r3
 8011f78:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011f7c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011f80:	4298      	cmp	r0, r3
 8011f82:	d10d      	bne.n	8011fa0 <mktime+0x198>
 8011f84:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8011f88:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011f8c:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011f90:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8011f94:	1ad5      	subs	r5, r2, r3
 8011f96:	42af      	cmp	r7, r5
 8011f98:	eba1 0100 	sub.w	r1, r1, r0
 8011f9c:	da05      	bge.n	8011faa <mktime+0x1a2>
 8011f9e:	e007      	b.n	8011fb0 <mktime+0x1a8>
 8011fa0:	f000 fa82 	bl	80124a8 <__tzcalc_limits>
 8011fa4:	2800      	cmp	r0, #0
 8011fa6:	d1ed      	bne.n	8011f84 <mktime+0x17c>
 8011fa8:	e07b      	b.n	80120a2 <mktime+0x29a>
 8011faa:	1a12      	subs	r2, r2, r0
 8011fac:	4297      	cmp	r7, r2
 8011fae:	db78      	blt.n	80120a2 <mktime+0x29a>
 8011fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8011fb4:	b112      	cbz	r2, 8011fbc <mktime+0x1b4>
 8011fb6:	428f      	cmp	r7, r1
 8011fb8:	db7b      	blt.n	80120b2 <mktime+0x2aa>
 8011fba:	e001      	b.n	8011fc0 <mktime+0x1b8>
 8011fbc:	428f      	cmp	r7, r1
 8011fbe:	da07      	bge.n	8011fd0 <mktime+0x1c8>
 8011fc0:	42af      	cmp	r7, r5
 8011fc2:	bfac      	ite	ge
 8011fc4:	2500      	movge	r5, #0
 8011fc6:	2501      	movlt	r5, #1
 8011fc8:	f1ba 0f00 	cmp.w	sl, #0
 8011fcc:	da04      	bge.n	8011fd8 <mktime+0x1d0>
 8011fce:	e069      	b.n	80120a4 <mktime+0x29c>
 8011fd0:	f1ba 0f00 	cmp.w	sl, #0
 8011fd4:	db68      	blt.n	80120a8 <mktime+0x2a0>
 8011fd6:	2501      	movs	r5, #1
 8011fd8:	ea85 0a0a 	eor.w	sl, r5, sl
 8011fdc:	f1ba 0f01 	cmp.w	sl, #1
 8011fe0:	d160      	bne.n	80120a4 <mktime+0x29c>
 8011fe2:	1a1b      	subs	r3, r3, r0
 8011fe4:	b905      	cbnz	r5, 8011fe8 <mktime+0x1e0>
 8011fe6:	425b      	negs	r3, r3
 8011fe8:	f8d8 2000 	ldr.w	r2, [r8]
 8011fec:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011ff0:	441a      	add	r2, r3
 8011ff2:	f8c8 2000 	str.w	r2, [r8]
 8011ff6:	4640      	mov	r0, r8
 8011ff8:	441f      	add	r7, r3
 8011ffa:	f7ff fe2f 	bl	8011c5c <validate_structure>
 8011ffe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8012002:	ebb3 030a 	subs.w	r3, r3, sl
 8012006:	d04d      	beq.n	80120a4 <mktime+0x29c>
 8012008:	2b01      	cmp	r3, #1
 801200a:	dc03      	bgt.n	8012014 <mktime+0x20c>
 801200c:	1c98      	adds	r0, r3, #2
 801200e:	bfd8      	it	le
 8012010:	2301      	movle	r3, #1
 8012012:	e001      	b.n	8012018 <mktime+0x210>
 8012014:	f04f 33ff 	mov.w	r3, #4294967295
 8012018:	f8d8 201c 	ldr.w	r2, [r8, #28]
 801201c:	441c      	add	r4, r3
 801201e:	189b      	adds	r3, r3, r2
 8012020:	d51d      	bpl.n	801205e <mktime+0x256>
 8012022:	1e73      	subs	r3, r6, #1
 8012024:	0799      	lsls	r1, r3, #30
 8012026:	d114      	bne.n	8012052 <mktime+0x24a>
 8012028:	2164      	movs	r1, #100	; 0x64
 801202a:	fb93 f2f1 	sdiv	r2, r3, r1
 801202e:	fb01 3312 	mls	r3, r1, r2, r3
 8012032:	b98b      	cbnz	r3, 8012058 <mktime+0x250>
 8012034:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8012038:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801203c:	fb96 f3f2 	sdiv	r3, r6, r2
 8012040:	fb02 6613 	mls	r6, r2, r3, r6
 8012044:	2e00      	cmp	r6, #0
 8012046:	f240 136d 	movw	r3, #365	; 0x16d
 801204a:	bf18      	it	ne
 801204c:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8012050:	e024      	b.n	801209c <mktime+0x294>
 8012052:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8012056:	e021      	b.n	801209c <mktime+0x294>
 8012058:	f240 136d 	movw	r3, #365	; 0x16d
 801205c:	e01e      	b.n	801209c <mktime+0x294>
 801205e:	07b2      	lsls	r2, r6, #30
 8012060:	d114      	bne.n	801208c <mktime+0x284>
 8012062:	2164      	movs	r1, #100	; 0x64
 8012064:	fb96 f2f1 	sdiv	r2, r6, r1
 8012068:	fb01 6212 	mls	r2, r1, r2, r6
 801206c:	b98a      	cbnz	r2, 8012092 <mktime+0x28a>
 801206e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8012072:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8012076:	fb96 f2f1 	sdiv	r2, r6, r1
 801207a:	fb01 6612 	mls	r6, r1, r2, r6
 801207e:	2e00      	cmp	r6, #0
 8012080:	f240 126d 	movw	r2, #365	; 0x16d
 8012084:	bf08      	it	eq
 8012086:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 801208a:	e004      	b.n	8012096 <mktime+0x28e>
 801208c:	f240 126d 	movw	r2, #365	; 0x16d
 8012090:	e001      	b.n	8012096 <mktime+0x28e>
 8012092:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8012096:	429a      	cmp	r2, r3
 8012098:	bfd8      	it	le
 801209a:	1a9b      	suble	r3, r3, r2
 801209c:	f8c8 301c 	str.w	r3, [r8, #28]
 80120a0:	e000      	b.n	80120a4 <mktime+0x29c>
 80120a2:	4655      	mov	r5, sl
 80120a4:	2d01      	cmp	r5, #1
 80120a6:	d109      	bne.n	80120bc <mktime+0x2b4>
 80120a8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 80120ac:	2501      	movs	r5, #1
 80120ae:	183e      	adds	r6, r7, r0
 80120b0:	e007      	b.n	80120c2 <mktime+0x2ba>
 80120b2:	f1ba 0f00 	cmp.w	sl, #0
 80120b6:	f04f 0500 	mov.w	r5, #0
 80120ba:	da8d      	bge.n	8011fd8 <mktime+0x1d0>
 80120bc:	f8d9 0020 	ldr.w	r0, [r9, #32]
 80120c0:	183e      	adds	r6, r7, r0
 80120c2:	f000 fa98 	bl	80125f6 <__tz_unlock>
 80120c6:	3404      	adds	r4, #4
 80120c8:	2307      	movs	r3, #7
 80120ca:	fb94 f3f3 	sdiv	r3, r4, r3
 80120ce:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80120d2:	1ae4      	subs	r4, r4, r3
 80120d4:	bf48      	it	mi
 80120d6:	3407      	addmi	r4, #7
 80120d8:	f8c8 5020 	str.w	r5, [r8, #32]
 80120dc:	f8c8 4018 	str.w	r4, [r8, #24]
 80120e0:	4630      	mov	r0, r6
 80120e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120e6:	f04f 30ff 	mov.w	r0, #4294967295
 80120ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ee:	bf00      	nop
 80120f0:	08014874 	.word	0x08014874
 80120f4:	00015180 	.word	0x00015180
 80120f8:	1fff47d8 	.word	0x1fff47d8

080120fc <_puts_r>:
 80120fc:	b570      	push	{r4, r5, r6, lr}
 80120fe:	460e      	mov	r6, r1
 8012100:	4605      	mov	r5, r0
 8012102:	b118      	cbz	r0, 801210c <_puts_r+0x10>
 8012104:	6983      	ldr	r3, [r0, #24]
 8012106:	b90b      	cbnz	r3, 801210c <_puts_r+0x10>
 8012108:	f000 fc38 	bl	801297c <__sinit>
 801210c:	68ac      	ldr	r4, [r5, #8]
 801210e:	89a3      	ldrh	r3, [r4, #12]
 8012110:	0719      	lsls	r1, r3, #28
 8012112:	d501      	bpl.n	8012118 <_puts_r+0x1c>
 8012114:	6923      	ldr	r3, [r4, #16]
 8012116:	b983      	cbnz	r3, 801213a <_puts_r+0x3e>
 8012118:	4628      	mov	r0, r5
 801211a:	4621      	mov	r1, r4
 801211c:	f000 fac0 	bl	80126a0 <__swsetup_r>
 8012120:	b158      	cbz	r0, 801213a <_puts_r+0x3e>
 8012122:	f04f 30ff 	mov.w	r0, #4294967295
 8012126:	bd70      	pop	{r4, r5, r6, pc}
 8012128:	2b00      	cmp	r3, #0
 801212a:	db0e      	blt.n	801214a <_puts_r+0x4e>
 801212c:	6823      	ldr	r3, [r4, #0]
 801212e:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012132:	701a      	strb	r2, [r3, #0]
 8012134:	6823      	ldr	r3, [r4, #0]
 8012136:	3301      	adds	r3, #1
 8012138:	6023      	str	r3, [r4, #0]
 801213a:	68a3      	ldr	r3, [r4, #8]
 801213c:	f816 2b01 	ldrb.w	r2, [r6], #1
 8012140:	3b01      	subs	r3, #1
 8012142:	60a3      	str	r3, [r4, #8]
 8012144:	2a00      	cmp	r2, #0
 8012146:	d1ef      	bne.n	8012128 <_puts_r+0x2c>
 8012148:	e016      	b.n	8012178 <_puts_r+0x7c>
 801214a:	69a2      	ldr	r2, [r4, #24]
 801214c:	4293      	cmp	r3, r2
 801214e:	db09      	blt.n	8012164 <_puts_r+0x68>
 8012150:	6823      	ldr	r3, [r4, #0]
 8012152:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8012156:	701a      	strb	r2, [r3, #0]
 8012158:	6823      	ldr	r3, [r4, #0]
 801215a:	7819      	ldrb	r1, [r3, #0]
 801215c:	290a      	cmp	r1, #10
 801215e:	d1ea      	bne.n	8012136 <_puts_r+0x3a>
 8012160:	4628      	mov	r0, r5
 8012162:	e002      	b.n	801216a <_puts_r+0x6e>
 8012164:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8012168:	4628      	mov	r0, r5
 801216a:	4622      	mov	r2, r4
 801216c:	f000 fa44 	bl	80125f8 <__swbuf_r>
 8012170:	1c42      	adds	r2, r0, #1
 8012172:	4250      	negs	r0, r2
 8012174:	4150      	adcs	r0, r2
 8012176:	e7d3      	b.n	8012120 <_puts_r+0x24>
 8012178:	2b00      	cmp	r3, #0
 801217a:	da15      	bge.n	80121a8 <_puts_r+0xac>
 801217c:	69a2      	ldr	r2, [r4, #24]
 801217e:	4293      	cmp	r3, r2
 8012180:	db08      	blt.n	8012194 <_puts_r+0x98>
 8012182:	6823      	ldr	r3, [r4, #0]
 8012184:	220a      	movs	r2, #10
 8012186:	701a      	strb	r2, [r3, #0]
 8012188:	6823      	ldr	r3, [r4, #0]
 801218a:	7819      	ldrb	r1, [r3, #0]
 801218c:	4291      	cmp	r1, r2
 801218e:	d10f      	bne.n	80121b0 <_puts_r+0xb4>
 8012190:	4628      	mov	r0, r5
 8012192:	e001      	b.n	8012198 <_puts_r+0x9c>
 8012194:	4628      	mov	r0, r5
 8012196:	210a      	movs	r1, #10
 8012198:	4622      	mov	r2, r4
 801219a:	f000 fa2d 	bl	80125f8 <__swbuf_r>
 801219e:	1c43      	adds	r3, r0, #1
 80121a0:	4258      	negs	r0, r3
 80121a2:	4158      	adcs	r0, r3
 80121a4:	b130      	cbz	r0, 80121b4 <_puts_r+0xb8>
 80121a6:	e7bc      	b.n	8012122 <_puts_r+0x26>
 80121a8:	6823      	ldr	r3, [r4, #0]
 80121aa:	220a      	movs	r2, #10
 80121ac:	701a      	strb	r2, [r3, #0]
 80121ae:	6823      	ldr	r3, [r4, #0]
 80121b0:	3301      	adds	r3, #1
 80121b2:	6023      	str	r3, [r4, #0]
 80121b4:	200a      	movs	r0, #10
 80121b6:	bd70      	pop	{r4, r5, r6, pc}

080121b8 <puts>:
 80121b8:	4b02      	ldr	r3, [pc, #8]	; (80121c4 <puts+0xc>)
 80121ba:	4601      	mov	r1, r0
 80121bc:	6818      	ldr	r0, [r3, #0]
 80121be:	f7ff bf9d 	b.w	80120fc <_puts_r>
 80121c2:	bf00      	nop
 80121c4:	1fff4360 	.word	0x1fff4360

080121c8 <siprintf>:
 80121c8:	b40e      	push	{r1, r2, r3}
 80121ca:	b500      	push	{lr}
 80121cc:	b09c      	sub	sp, #112	; 0x70
 80121ce:	f44f 7102 	mov.w	r1, #520	; 0x208
 80121d2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80121d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80121da:	9104      	str	r1, [sp, #16]
 80121dc:	9107      	str	r1, [sp, #28]
 80121de:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80121e2:	ab1d      	add	r3, sp, #116	; 0x74
 80121e4:	f8ad 1016 	strh.w	r1, [sp, #22]
 80121e8:	4908      	ldr	r1, [pc, #32]	; (801220c <siprintf+0x44>)
 80121ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80121ee:	9002      	str	r0, [sp, #8]
 80121f0:	9006      	str	r0, [sp, #24]
 80121f2:	6808      	ldr	r0, [r1, #0]
 80121f4:	9301      	str	r3, [sp, #4]
 80121f6:	a902      	add	r1, sp, #8
 80121f8:	f000 fd96 	bl	8012d28 <_svfiprintf_r>
 80121fc:	9b02      	ldr	r3, [sp, #8]
 80121fe:	2200      	movs	r2, #0
 8012200:	701a      	strb	r2, [r3, #0]
 8012202:	b01c      	add	sp, #112	; 0x70
 8012204:	f85d eb04 	ldr.w	lr, [sp], #4
 8012208:	b003      	add	sp, #12
 801220a:	4770      	bx	lr
 801220c:	1fff4360 	.word	0x1fff4360

08012210 <strcat>:
 8012210:	b510      	push	{r4, lr}
 8012212:	4602      	mov	r2, r0
 8012214:	4613      	mov	r3, r2
 8012216:	3201      	adds	r2, #1
 8012218:	781c      	ldrb	r4, [r3, #0]
 801221a:	2c00      	cmp	r4, #0
 801221c:	d1fa      	bne.n	8012214 <strcat+0x4>
 801221e:	3b01      	subs	r3, #1
 8012220:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012224:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012228:	2a00      	cmp	r2, #0
 801222a:	d1f9      	bne.n	8012220 <strcat+0x10>
 801222c:	bd10      	pop	{r4, pc}

0801222e <strchr>:
 801222e:	b2c9      	uxtb	r1, r1
 8012230:	4603      	mov	r3, r0
 8012232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012236:	b11a      	cbz	r2, 8012240 <strchr+0x12>
 8012238:	428a      	cmp	r2, r1
 801223a:	d1f9      	bne.n	8012230 <strchr+0x2>
 801223c:	4618      	mov	r0, r3
 801223e:	4770      	bx	lr
 8012240:	2900      	cmp	r1, #0
 8012242:	bf0c      	ite	eq
 8012244:	4618      	moveq	r0, r3
 8012246:	2000      	movne	r0, #0
 8012248:	4770      	bx	lr

0801224a <strcpy>:
 801224a:	4603      	mov	r3, r0
 801224c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012250:	f803 2b01 	strb.w	r2, [r3], #1
 8012254:	2a00      	cmp	r2, #0
 8012256:	d1f9      	bne.n	801224c <strcpy+0x2>
 8012258:	4770      	bx	lr

0801225a <strlen>:
 801225a:	4603      	mov	r3, r0
 801225c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012260:	2a00      	cmp	r2, #0
 8012262:	d1fb      	bne.n	801225c <strlen+0x2>
 8012264:	1a18      	subs	r0, r3, r0
 8012266:	3801      	subs	r0, #1
 8012268:	4770      	bx	lr

0801226a <strncpy>:
 801226a:	b510      	push	{r4, lr}
 801226c:	4603      	mov	r3, r0
 801226e:	b132      	cbz	r2, 801227e <strncpy+0x14>
 8012270:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012274:	f803 4b01 	strb.w	r4, [r3], #1
 8012278:	3a01      	subs	r2, #1
 801227a:	2c00      	cmp	r4, #0
 801227c:	d1f7      	bne.n	801226e <strncpy+0x4>
 801227e:	441a      	add	r2, r3
 8012280:	4293      	cmp	r3, r2
 8012282:	d003      	beq.n	801228c <strncpy+0x22>
 8012284:	2100      	movs	r1, #0
 8012286:	f803 1b01 	strb.w	r1, [r3], #1
 801228a:	e7f9      	b.n	8012280 <strncpy+0x16>
 801228c:	bd10      	pop	{r4, pc}

0801228e <strstr>:
 801228e:	b530      	push	{r4, r5, lr}
 8012290:	7803      	ldrb	r3, [r0, #0]
 8012292:	b923      	cbnz	r3, 801229e <strstr+0x10>
 8012294:	780b      	ldrb	r3, [r1, #0]
 8012296:	2b00      	cmp	r3, #0
 8012298:	bf18      	it	ne
 801229a:	2000      	movne	r0, #0
 801229c:	bd30      	pop	{r4, r5, pc}
 801229e:	4603      	mov	r3, r0
 80122a0:	3001      	adds	r0, #1
 80122a2:	781a      	ldrb	r2, [r3, #0]
 80122a4:	b13a      	cbz	r2, 80122b6 <strstr+0x28>
 80122a6:	2200      	movs	r2, #0
 80122a8:	5c8c      	ldrb	r4, [r1, r2]
 80122aa:	b134      	cbz	r4, 80122ba <strstr+0x2c>
 80122ac:	5c9d      	ldrb	r5, [r3, r2]
 80122ae:	42a5      	cmp	r5, r4
 80122b0:	d1f5      	bne.n	801229e <strstr+0x10>
 80122b2:	3201      	adds	r2, #1
 80122b4:	e7f8      	b.n	80122a8 <strstr+0x1a>
 80122b6:	4610      	mov	r0, r2
 80122b8:	bd30      	pop	{r4, r5, pc}
 80122ba:	4618      	mov	r0, r3
 80122bc:	bd30      	pop	{r4, r5, pc}
	...

080122c0 <strtok>:
 80122c0:	4b17      	ldr	r3, [pc, #92]	; (8012320 <strtok+0x60>)
 80122c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122c6:	681d      	ldr	r5, [r3, #0]
 80122c8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 80122ca:	4606      	mov	r6, r0
 80122cc:	460f      	mov	r7, r1
 80122ce:	b9fc      	cbnz	r4, 8012310 <strtok+0x50>
 80122d0:	2050      	movs	r0, #80	; 0x50
 80122d2:	f000 fc2d 	bl	8012b30 <malloc>
 80122d6:	65a8      	str	r0, [r5, #88]	; 0x58
 80122d8:	6084      	str	r4, [r0, #8]
 80122da:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122dc:	6004      	str	r4, [r0, #0]
 80122de:	6044      	str	r4, [r0, #4]
 80122e0:	611c      	str	r4, [r3, #16]
 80122e2:	60dc      	str	r4, [r3, #12]
 80122e4:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122e6:	619c      	str	r4, [r3, #24]
 80122e8:	615c      	str	r4, [r3, #20]
 80122ea:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122ec:	62dc      	str	r4, [r3, #44]	; 0x2c
 80122ee:	629c      	str	r4, [r3, #40]	; 0x28
 80122f0:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122f2:	635c      	str	r4, [r3, #52]	; 0x34
 80122f4:	631c      	str	r4, [r3, #48]	; 0x30
 80122f6:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122f8:	63dc      	str	r4, [r3, #60]	; 0x3c
 80122fa:	639c      	str	r4, [r3, #56]	; 0x38
 80122fc:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80122fe:	645c      	str	r4, [r3, #68]	; 0x44
 8012300:	641c      	str	r4, [r3, #64]	; 0x40
 8012302:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8012304:	64dc      	str	r4, [r3, #76]	; 0x4c
 8012306:	649c      	str	r4, [r3, #72]	; 0x48
 8012308:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801230a:	771c      	strb	r4, [r3, #28]
 801230c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 801230e:	625c      	str	r4, [r3, #36]	; 0x24
 8012310:	4630      	mov	r0, r6
 8012312:	4639      	mov	r1, r7
 8012314:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8012316:	2301      	movs	r3, #1
 8012318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801231c:	f000 b802 	b.w	8012324 <__strtok_r>
 8012320:	1fff4360 	.word	0x1fff4360

08012324 <__strtok_r>:
 8012324:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012326:	b948      	cbnz	r0, 801233c <__strtok_r+0x18>
 8012328:	6810      	ldr	r0, [r2, #0]
 801232a:	b938      	cbnz	r0, 801233c <__strtok_r+0x18>
 801232c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801232e:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012332:	b15e      	cbz	r6, 801234c <__strtok_r+0x28>
 8012334:	42b5      	cmp	r5, r6
 8012336:	d1fa      	bne.n	801232e <__strtok_r+0xa>
 8012338:	b12b      	cbz	r3, 8012346 <__strtok_r+0x22>
 801233a:	4620      	mov	r0, r4
 801233c:	4604      	mov	r4, r0
 801233e:	460f      	mov	r7, r1
 8012340:	f814 5b01 	ldrb.w	r5, [r4], #1
 8012344:	e7f3      	b.n	801232e <__strtok_r+0xa>
 8012346:	6014      	str	r4, [r2, #0]
 8012348:	7003      	strb	r3, [r0, #0]
 801234a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801234c:	b94d      	cbnz	r5, 8012362 <__strtok_r+0x3e>
 801234e:	6015      	str	r5, [r2, #0]
 8012350:	4628      	mov	r0, r5
 8012352:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012354:	f817 6b01 	ldrb.w	r6, [r7], #1
 8012358:	42ae      	cmp	r6, r5
 801235a:	d007      	beq.n	801236c <__strtok_r+0x48>
 801235c:	2e00      	cmp	r6, #0
 801235e:	d1f9      	bne.n	8012354 <__strtok_r+0x30>
 8012360:	461c      	mov	r4, r3
 8012362:	4623      	mov	r3, r4
 8012364:	460f      	mov	r7, r1
 8012366:	f813 5b01 	ldrb.w	r5, [r3], #1
 801236a:	e7f3      	b.n	8012354 <__strtok_r+0x30>
 801236c:	b115      	cbz	r5, 8012374 <__strtok_r+0x50>
 801236e:	2100      	movs	r1, #0
 8012370:	7021      	strb	r1, [r4, #0]
 8012372:	e000      	b.n	8012376 <__strtok_r+0x52>
 8012374:	462b      	mov	r3, r5
 8012376:	6013      	str	r3, [r2, #0]
 8012378:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801237a <strtok_r>:
 801237a:	2301      	movs	r3, #1
 801237c:	f7ff bfd2 	b.w	8012324 <__strtok_r>

08012380 <_strtol_r>:
 8012380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012384:	4c40      	ldr	r4, [pc, #256]	; (8012488 <_strtol_r+0x108>)
 8012386:	f8d4 9000 	ldr.w	r9, [r4]
 801238a:	460f      	mov	r7, r1
 801238c:	463d      	mov	r5, r7
 801238e:	f815 eb01 	ldrb.w	lr, [r5], #1
 8012392:	eb09 040e 	add.w	r4, r9, lr
 8012396:	7866      	ldrb	r6, [r4, #1]
 8012398:	f006 0408 	and.w	r4, r6, #8
 801239c:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 80123a0:	b10c      	cbz	r4, 80123a6 <_strtol_r+0x26>
 80123a2:	462f      	mov	r7, r5
 80123a4:	e7f2      	b.n	801238c <_strtol_r+0xc>
 80123a6:	4674      	mov	r4, lr
 80123a8:	2c2d      	cmp	r4, #45	; 0x2d
 80123aa:	d103      	bne.n	80123b4 <_strtol_r+0x34>
 80123ac:	1cbd      	adds	r5, r7, #2
 80123ae:	787c      	ldrb	r4, [r7, #1]
 80123b0:	2601      	movs	r6, #1
 80123b2:	e003      	b.n	80123bc <_strtol_r+0x3c>
 80123b4:	2c2b      	cmp	r4, #43	; 0x2b
 80123b6:	bf04      	itt	eq
 80123b8:	787c      	ldrbeq	r4, [r7, #1]
 80123ba:	1cbd      	addeq	r5, r7, #2
 80123bc:	b113      	cbz	r3, 80123c4 <_strtol_r+0x44>
 80123be:	2b10      	cmp	r3, #16
 80123c0:	d10a      	bne.n	80123d8 <_strtol_r+0x58>
 80123c2:	e05a      	b.n	801247a <_strtol_r+0xfa>
 80123c4:	2c30      	cmp	r4, #48	; 0x30
 80123c6:	d156      	bne.n	8012476 <_strtol_r+0xf6>
 80123c8:	782c      	ldrb	r4, [r5, #0]
 80123ca:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80123ce:	2c58      	cmp	r4, #88	; 0x58
 80123d0:	d14c      	bne.n	801246c <_strtol_r+0xec>
 80123d2:	786c      	ldrb	r4, [r5, #1]
 80123d4:	2310      	movs	r3, #16
 80123d6:	3502      	adds	r5, #2
 80123d8:	2e00      	cmp	r6, #0
 80123da:	bf14      	ite	ne
 80123dc:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 80123e0:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 80123e4:	2700      	movs	r7, #0
 80123e6:	fbb8 faf3 	udiv	sl, r8, r3
 80123ea:	46be      	mov	lr, r7
 80123ec:	fb03 881a 	mls	r8, r3, sl, r8
 80123f0:	eb09 0c04 	add.w	ip, r9, r4
 80123f4:	f89c c001 	ldrb.w	ip, [ip, #1]
 80123f8:	f01c 0f04 	tst.w	ip, #4
 80123fc:	d001      	beq.n	8012402 <_strtol_r+0x82>
 80123fe:	3c30      	subs	r4, #48	; 0x30
 8012400:	e00b      	b.n	801241a <_strtol_r+0x9a>
 8012402:	f01c 0c03 	ands.w	ip, ip, #3
 8012406:	d01b      	beq.n	8012440 <_strtol_r+0xc0>
 8012408:	f1bc 0f01 	cmp.w	ip, #1
 801240c:	bf0c      	ite	eq
 801240e:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8012412:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8012416:	ebcc 0404 	rsb	r4, ip, r4
 801241a:	429c      	cmp	r4, r3
 801241c:	da10      	bge.n	8012440 <_strtol_r+0xc0>
 801241e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8012422:	d00a      	beq.n	801243a <_strtol_r+0xba>
 8012424:	45d6      	cmp	lr, sl
 8012426:	d806      	bhi.n	8012436 <_strtol_r+0xb6>
 8012428:	d101      	bne.n	801242e <_strtol_r+0xae>
 801242a:	4544      	cmp	r4, r8
 801242c:	dc03      	bgt.n	8012436 <_strtol_r+0xb6>
 801242e:	fb03 4e0e 	mla	lr, r3, lr, r4
 8012432:	2701      	movs	r7, #1
 8012434:	e001      	b.n	801243a <_strtol_r+0xba>
 8012436:	f04f 37ff 	mov.w	r7, #4294967295
 801243a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801243e:	e7d7      	b.n	80123f0 <_strtol_r+0x70>
 8012440:	1c7c      	adds	r4, r7, #1
 8012442:	4673      	mov	r3, lr
 8012444:	d10a      	bne.n	801245c <_strtol_r+0xdc>
 8012446:	2e00      	cmp	r6, #0
 8012448:	f04f 0122 	mov.w	r1, #34	; 0x22
 801244c:	bf14      	ite	ne
 801244e:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8012452:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8012456:	6001      	str	r1, [r0, #0]
 8012458:	b92a      	cbnz	r2, 8012466 <_strtol_r+0xe6>
 801245a:	e011      	b.n	8012480 <_strtol_r+0x100>
 801245c:	b10e      	cbz	r6, 8012462 <_strtol_r+0xe2>
 801245e:	f1ce 0300 	rsb	r3, lr, #0
 8012462:	b16a      	cbz	r2, 8012480 <_strtol_r+0x100>
 8012464:	b107      	cbz	r7, 8012468 <_strtol_r+0xe8>
 8012466:	1e69      	subs	r1, r5, #1
 8012468:	6011      	str	r1, [r2, #0]
 801246a:	e009      	b.n	8012480 <_strtol_r+0x100>
 801246c:	2430      	movs	r4, #48	; 0x30
 801246e:	2b00      	cmp	r3, #0
 8012470:	d1b2      	bne.n	80123d8 <_strtol_r+0x58>
 8012472:	2308      	movs	r3, #8
 8012474:	e7b0      	b.n	80123d8 <_strtol_r+0x58>
 8012476:	230a      	movs	r3, #10
 8012478:	e7ae      	b.n	80123d8 <_strtol_r+0x58>
 801247a:	2c30      	cmp	r4, #48	; 0x30
 801247c:	d1ac      	bne.n	80123d8 <_strtol_r+0x58>
 801247e:	e7a3      	b.n	80123c8 <_strtol_r+0x48>
 8012480:	4618      	mov	r0, r3
 8012482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012486:	bf00      	nop
 8012488:	1fff4364 	.word	0x1fff4364

0801248c <strtol>:
 801248c:	b530      	push	{r4, r5, lr}
 801248e:	4613      	mov	r3, r2
 8012490:	4a04      	ldr	r2, [pc, #16]	; (80124a4 <strtol+0x18>)
 8012492:	4605      	mov	r5, r0
 8012494:	460c      	mov	r4, r1
 8012496:	6810      	ldr	r0, [r2, #0]
 8012498:	4629      	mov	r1, r5
 801249a:	4622      	mov	r2, r4
 801249c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80124a0:	f7ff bf6e 	b.w	8012380 <_strtol_r>
 80124a4:	1fff4360 	.word	0x1fff4360

080124a8 <__tzcalc_limits>:
 80124a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80124ac:	4604      	mov	r4, r0
 80124ae:	f000 faed 	bl	8012a8c <__gettzinfo>
 80124b2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80124b6:	429c      	cmp	r4, r3
 80124b8:	f340 8094 	ble.w	80125e4 <__tzcalc_limits+0x13c>
 80124bc:	f46f 6ef6 	mvn.w	lr, #1968	; 0x7b0
 80124c0:	eb04 030e 	add.w	r3, r4, lr
 80124c4:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80124c8:	109b      	asrs	r3, r3, #2
 80124ca:	f240 166d 	movw	r6, #365	; 0x16d
 80124ce:	fb06 3602 	mla	r6, r6, r2, r3
 80124d2:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 80124d6:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80124da:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80124de:	fb92 f2f3 	sdiv	r2, r2, r3
 80124e2:	18b3      	adds	r3, r6, r2
 80124e4:	f44f 75c8 	mov.w	r5, #400	; 0x190
 80124e8:	eb04 060c 	add.w	r6, r4, ip
 80124ec:	fb96 f6f5 	sdiv	r6, r6, r5
 80124f0:	441e      	add	r6, r3
 80124f2:	2364      	movs	r3, #100	; 0x64
 80124f4:	6044      	str	r4, [r0, #4]
 80124f6:	fb94 fef3 	sdiv	lr, r4, r3
 80124fa:	4601      	mov	r1, r0
 80124fc:	fb03 4e1e 	mls	lr, r3, lr, r4
 8012500:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 8012504:	fb94 f3f5 	sdiv	r3, r4, r5
 8012508:	fb05 4513 	mls	r5, r5, r3, r4
 801250c:	fab5 f585 	clz	r5, r5
 8012510:	096d      	lsrs	r5, r5, #5
 8012512:	7a0b      	ldrb	r3, [r1, #8]
 8012514:	2b4a      	cmp	r3, #74	; 0x4a
 8012516:	d111      	bne.n	801253c <__tzcalc_limits+0x94>
 8012518:	694b      	ldr	r3, [r1, #20]
 801251a:	07a7      	lsls	r7, r4, #30
 801251c:	eb06 0203 	add.w	r2, r6, r3
 8012520:	d102      	bne.n	8012528 <__tzcalc_limits+0x80>
 8012522:	f1be 0f00 	cmp.w	lr, #0
 8012526:	d100      	bne.n	801252a <__tzcalc_limits+0x82>
 8012528:	b125      	cbz	r5, 8012534 <__tzcalc_limits+0x8c>
 801252a:	2b3b      	cmp	r3, #59	; 0x3b
 801252c:	bfd4      	ite	le
 801252e:	2300      	movle	r3, #0
 8012530:	2301      	movgt	r3, #1
 8012532:	e000      	b.n	8012536 <__tzcalc_limits+0x8e>
 8012534:	462b      	mov	r3, r5
 8012536:	4413      	add	r3, r2
 8012538:	3b01      	subs	r3, #1
 801253a:	e03f      	b.n	80125bc <__tzcalc_limits+0x114>
 801253c:	2b44      	cmp	r3, #68	; 0x44
 801253e:	d102      	bne.n	8012546 <__tzcalc_limits+0x9e>
 8012540:	694b      	ldr	r3, [r1, #20]
 8012542:	4433      	add	r3, r6
 8012544:	e03a      	b.n	80125bc <__tzcalc_limits+0x114>
 8012546:	07a2      	lsls	r2, r4, #30
 8012548:	d105      	bne.n	8012556 <__tzcalc_limits+0xae>
 801254a:	f1be 0f00 	cmp.w	lr, #0
 801254e:	bf0c      	ite	eq
 8012550:	462b      	moveq	r3, r5
 8012552:	2301      	movne	r3, #1
 8012554:	e000      	b.n	8012558 <__tzcalc_limits+0xb0>
 8012556:	462b      	mov	r3, r5
 8012558:	4a24      	ldr	r2, [pc, #144]	; (80125ec <__tzcalc_limits+0x144>)
 801255a:	f04f 0930 	mov.w	r9, #48	; 0x30
 801255e:	fb09 2903 	mla	r9, r9, r3, r2
 8012562:	68ca      	ldr	r2, [r1, #12]
 8012564:	f1a9 0704 	sub.w	r7, r9, #4
 8012568:	46b2      	mov	sl, r6
 801256a:	2301      	movs	r3, #1
 801256c:	4293      	cmp	r3, r2
 801256e:	da04      	bge.n	801257a <__tzcalc_limits+0xd2>
 8012570:	f857 8f04 	ldr.w	r8, [r7, #4]!
 8012574:	3301      	adds	r3, #1
 8012576:	44c2      	add	sl, r8
 8012578:	e7f8      	b.n	801256c <__tzcalc_limits+0xc4>
 801257a:	2a01      	cmp	r2, #1
 801257c:	bfb8      	it	lt
 801257e:	2201      	movlt	r2, #1
 8012580:	4690      	mov	r8, r2
 8012582:	2707      	movs	r7, #7
 8012584:	f10a 0204 	add.w	r2, sl, #4
 8012588:	fb92 f7f7 	sdiv	r7, r2, r7
 801258c:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8012590:	1bd7      	subs	r7, r2, r7
 8012592:	694a      	ldr	r2, [r1, #20]
 8012594:	1bd2      	subs	r2, r2, r7
 8012596:	690f      	ldr	r7, [r1, #16]
 8012598:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 801259c:	f107 37ff 	add.w	r7, r7, #4294967295
 80125a0:	f108 38ff 	add.w	r8, r8, #4294967295
 80125a4:	bf48      	it	mi
 80125a6:	3207      	addmi	r2, #7
 80125a8:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80125ac:	18bb      	adds	r3, r7, r2
 80125ae:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80125b2:	4293      	cmp	r3, r2
 80125b4:	db01      	blt.n	80125ba <__tzcalc_limits+0x112>
 80125b6:	3b07      	subs	r3, #7
 80125b8:	e7fb      	b.n	80125b2 <__tzcalc_limits+0x10a>
 80125ba:	4453      	add	r3, sl
 80125bc:	698a      	ldr	r2, [r1, #24]
 80125be:	4f0c      	ldr	r7, [pc, #48]	; (80125f0 <__tzcalc_limits+0x148>)
 80125c0:	fb07 2303 	mla	r3, r7, r3, r2
 80125c4:	6a0f      	ldr	r7, [r1, #32]
 80125c6:	443b      	add	r3, r7
 80125c8:	f841 3f1c 	str.w	r3, [r1, #28]!
 80125cc:	4561      	cmp	r1, ip
 80125ce:	d1a0      	bne.n	8012512 <__tzcalc_limits+0x6a>
 80125d0:	69c3      	ldr	r3, [r0, #28]
 80125d2:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80125d4:	4293      	cmp	r3, r2
 80125d6:	bfac      	ite	ge
 80125d8:	2300      	movge	r3, #0
 80125da:	2301      	movlt	r3, #1
 80125dc:	6003      	str	r3, [r0, #0]
 80125de:	2001      	movs	r0, #1
 80125e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125e4:	2000      	movs	r0, #0
 80125e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125ea:	bf00      	nop
 80125ec:	08014a38 	.word	0x08014a38
 80125f0:	00015180 	.word	0x00015180

080125f4 <__tz_lock>:
 80125f4:	4770      	bx	lr

080125f6 <__tz_unlock>:
 80125f6:	4770      	bx	lr

080125f8 <__swbuf_r>:
 80125f8:	b570      	push	{r4, r5, r6, lr}
 80125fa:	460d      	mov	r5, r1
 80125fc:	4614      	mov	r4, r2
 80125fe:	4606      	mov	r6, r0
 8012600:	b118      	cbz	r0, 801260a <__swbuf_r+0x12>
 8012602:	6983      	ldr	r3, [r0, #24]
 8012604:	b90b      	cbnz	r3, 801260a <__swbuf_r+0x12>
 8012606:	f000 f9b9 	bl	801297c <__sinit>
 801260a:	4b22      	ldr	r3, [pc, #136]	; (8012694 <__swbuf_r+0x9c>)
 801260c:	429c      	cmp	r4, r3
 801260e:	d101      	bne.n	8012614 <__swbuf_r+0x1c>
 8012610:	6874      	ldr	r4, [r6, #4]
 8012612:	e008      	b.n	8012626 <__swbuf_r+0x2e>
 8012614:	4b20      	ldr	r3, [pc, #128]	; (8012698 <__swbuf_r+0xa0>)
 8012616:	429c      	cmp	r4, r3
 8012618:	d101      	bne.n	801261e <__swbuf_r+0x26>
 801261a:	68b4      	ldr	r4, [r6, #8]
 801261c:	e003      	b.n	8012626 <__swbuf_r+0x2e>
 801261e:	4b1f      	ldr	r3, [pc, #124]	; (801269c <__swbuf_r+0xa4>)
 8012620:	429c      	cmp	r4, r3
 8012622:	bf08      	it	eq
 8012624:	68f4      	ldreq	r4, [r6, #12]
 8012626:	69a3      	ldr	r3, [r4, #24]
 8012628:	60a3      	str	r3, [r4, #8]
 801262a:	89a3      	ldrh	r3, [r4, #12]
 801262c:	071a      	lsls	r2, r3, #28
 801262e:	d509      	bpl.n	8012644 <__swbuf_r+0x4c>
 8012630:	6923      	ldr	r3, [r4, #16]
 8012632:	b13b      	cbz	r3, 8012644 <__swbuf_r+0x4c>
 8012634:	6823      	ldr	r3, [r4, #0]
 8012636:	6920      	ldr	r0, [r4, #16]
 8012638:	1a18      	subs	r0, r3, r0
 801263a:	6963      	ldr	r3, [r4, #20]
 801263c:	4298      	cmp	r0, r3
 801263e:	b2ed      	uxtb	r5, r5
 8012640:	db0f      	blt.n	8012662 <__swbuf_r+0x6a>
 8012642:	e008      	b.n	8012656 <__swbuf_r+0x5e>
 8012644:	4630      	mov	r0, r6
 8012646:	4621      	mov	r1, r4
 8012648:	f000 f82a 	bl	80126a0 <__swsetup_r>
 801264c:	2800      	cmp	r0, #0
 801264e:	d0f1      	beq.n	8012634 <__swbuf_r+0x3c>
 8012650:	f04f 30ff 	mov.w	r0, #4294967295
 8012654:	bd70      	pop	{r4, r5, r6, pc}
 8012656:	4630      	mov	r0, r6
 8012658:	4621      	mov	r1, r4
 801265a:	f000 f925 	bl	80128a8 <_fflush_r>
 801265e:	2800      	cmp	r0, #0
 8012660:	d1f6      	bne.n	8012650 <__swbuf_r+0x58>
 8012662:	68a3      	ldr	r3, [r4, #8]
 8012664:	3b01      	subs	r3, #1
 8012666:	60a3      	str	r3, [r4, #8]
 8012668:	6823      	ldr	r3, [r4, #0]
 801266a:	1c5a      	adds	r2, r3, #1
 801266c:	6022      	str	r2, [r4, #0]
 801266e:	701d      	strb	r5, [r3, #0]
 8012670:	6963      	ldr	r3, [r4, #20]
 8012672:	3001      	adds	r0, #1
 8012674:	4298      	cmp	r0, r3
 8012676:	d004      	beq.n	8012682 <__swbuf_r+0x8a>
 8012678:	89a3      	ldrh	r3, [r4, #12]
 801267a:	07db      	lsls	r3, r3, #31
 801267c:	d507      	bpl.n	801268e <__swbuf_r+0x96>
 801267e:	2d0a      	cmp	r5, #10
 8012680:	d105      	bne.n	801268e <__swbuf_r+0x96>
 8012682:	4630      	mov	r0, r6
 8012684:	4621      	mov	r1, r4
 8012686:	f000 f90f 	bl	80128a8 <_fflush_r>
 801268a:	2800      	cmp	r0, #0
 801268c:	d1e0      	bne.n	8012650 <__swbuf_r+0x58>
 801268e:	4628      	mov	r0, r5
 8012690:	bd70      	pop	{r4, r5, r6, pc}
 8012692:	bf00      	nop
 8012694:	080149d8 	.word	0x080149d8
 8012698:	080149f8 	.word	0x080149f8
 801269c:	08014a18 	.word	0x08014a18

080126a0 <__swsetup_r>:
 80126a0:	4b31      	ldr	r3, [pc, #196]	; (8012768 <__swsetup_r+0xc8>)
 80126a2:	b570      	push	{r4, r5, r6, lr}
 80126a4:	681d      	ldr	r5, [r3, #0]
 80126a6:	4606      	mov	r6, r0
 80126a8:	460c      	mov	r4, r1
 80126aa:	b125      	cbz	r5, 80126b6 <__swsetup_r+0x16>
 80126ac:	69ab      	ldr	r3, [r5, #24]
 80126ae:	b913      	cbnz	r3, 80126b6 <__swsetup_r+0x16>
 80126b0:	4628      	mov	r0, r5
 80126b2:	f000 f963 	bl	801297c <__sinit>
 80126b6:	4b2d      	ldr	r3, [pc, #180]	; (801276c <__swsetup_r+0xcc>)
 80126b8:	429c      	cmp	r4, r3
 80126ba:	d101      	bne.n	80126c0 <__swsetup_r+0x20>
 80126bc:	686c      	ldr	r4, [r5, #4]
 80126be:	e008      	b.n	80126d2 <__swsetup_r+0x32>
 80126c0:	4b2b      	ldr	r3, [pc, #172]	; (8012770 <__swsetup_r+0xd0>)
 80126c2:	429c      	cmp	r4, r3
 80126c4:	d101      	bne.n	80126ca <__swsetup_r+0x2a>
 80126c6:	68ac      	ldr	r4, [r5, #8]
 80126c8:	e003      	b.n	80126d2 <__swsetup_r+0x32>
 80126ca:	4b2a      	ldr	r3, [pc, #168]	; (8012774 <__swsetup_r+0xd4>)
 80126cc:	429c      	cmp	r4, r3
 80126ce:	bf08      	it	eq
 80126d0:	68ec      	ldreq	r4, [r5, #12]
 80126d2:	89a3      	ldrh	r3, [r4, #12]
 80126d4:	b29a      	uxth	r2, r3
 80126d6:	0711      	lsls	r1, r2, #28
 80126d8:	d41d      	bmi.n	8012716 <__swsetup_r+0x76>
 80126da:	06d5      	lsls	r5, r2, #27
 80126dc:	d402      	bmi.n	80126e4 <__swsetup_r+0x44>
 80126de:	2209      	movs	r2, #9
 80126e0:	6032      	str	r2, [r6, #0]
 80126e2:	e038      	b.n	8012756 <__swsetup_r+0xb6>
 80126e4:	0750      	lsls	r0, r2, #29
 80126e6:	d512      	bpl.n	801270e <__swsetup_r+0x6e>
 80126e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80126ea:	b141      	cbz	r1, 80126fe <__swsetup_r+0x5e>
 80126ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80126f0:	4299      	cmp	r1, r3
 80126f2:	d002      	beq.n	80126fa <__swsetup_r+0x5a>
 80126f4:	4630      	mov	r0, r6
 80126f6:	f000 fa23 	bl	8012b40 <_free_r>
 80126fa:	2300      	movs	r3, #0
 80126fc:	6363      	str	r3, [r4, #52]	; 0x34
 80126fe:	89a3      	ldrh	r3, [r4, #12]
 8012700:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012704:	81a3      	strh	r3, [r4, #12]
 8012706:	2300      	movs	r3, #0
 8012708:	6063      	str	r3, [r4, #4]
 801270a:	6923      	ldr	r3, [r4, #16]
 801270c:	6023      	str	r3, [r4, #0]
 801270e:	89a3      	ldrh	r3, [r4, #12]
 8012710:	f043 0308 	orr.w	r3, r3, #8
 8012714:	81a3      	strh	r3, [r4, #12]
 8012716:	6923      	ldr	r3, [r4, #16]
 8012718:	b94b      	cbnz	r3, 801272e <__swsetup_r+0x8e>
 801271a:	89a3      	ldrh	r3, [r4, #12]
 801271c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012724:	d003      	beq.n	801272e <__swsetup_r+0x8e>
 8012726:	4630      	mov	r0, r6
 8012728:	4621      	mov	r1, r4
 801272a:	f000 f9b3 	bl	8012a94 <__smakebuf_r>
 801272e:	89a3      	ldrh	r3, [r4, #12]
 8012730:	f013 0201 	ands.w	r2, r3, #1
 8012734:	d005      	beq.n	8012742 <__swsetup_r+0xa2>
 8012736:	2200      	movs	r2, #0
 8012738:	60a2      	str	r2, [r4, #8]
 801273a:	6962      	ldr	r2, [r4, #20]
 801273c:	4252      	negs	r2, r2
 801273e:	61a2      	str	r2, [r4, #24]
 8012740:	e003      	b.n	801274a <__swsetup_r+0xaa>
 8012742:	0799      	lsls	r1, r3, #30
 8012744:	bf58      	it	pl
 8012746:	6962      	ldrpl	r2, [r4, #20]
 8012748:	60a2      	str	r2, [r4, #8]
 801274a:	6922      	ldr	r2, [r4, #16]
 801274c:	b94a      	cbnz	r2, 8012762 <__swsetup_r+0xc2>
 801274e:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8012752:	b280      	uxth	r0, r0
 8012754:	b130      	cbz	r0, 8012764 <__swsetup_r+0xc4>
 8012756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801275a:	81a3      	strh	r3, [r4, #12]
 801275c:	f04f 30ff 	mov.w	r0, #4294967295
 8012760:	bd70      	pop	{r4, r5, r6, pc}
 8012762:	2000      	movs	r0, #0
 8012764:	bd70      	pop	{r4, r5, r6, pc}
 8012766:	bf00      	nop
 8012768:	1fff4360 	.word	0x1fff4360
 801276c:	080149d8 	.word	0x080149d8
 8012770:	080149f8 	.word	0x080149f8
 8012774:	08014a18 	.word	0x08014a18

08012778 <div>:
 8012778:	2900      	cmp	r1, #0
 801277a:	b510      	push	{r4, lr}
 801277c:	fb91 f4f2 	sdiv	r4, r1, r2
 8012780:	fb02 1314 	mls	r3, r2, r4, r1
 8012784:	db04      	blt.n	8012790 <div+0x18>
 8012786:	2b00      	cmp	r3, #0
 8012788:	da07      	bge.n	801279a <div+0x22>
 801278a:	3401      	adds	r4, #1
 801278c:	1a9b      	subs	r3, r3, r2
 801278e:	e004      	b.n	801279a <div+0x22>
 8012790:	2b00      	cmp	r3, #0
 8012792:	bfc4      	itt	gt
 8012794:	f104 34ff 	addgt.w	r4, r4, #4294967295
 8012798:	189b      	addgt	r3, r3, r2
 801279a:	6004      	str	r4, [r0, #0]
 801279c:	6043      	str	r3, [r0, #4]
 801279e:	bd10      	pop	{r4, pc}

080127a0 <__sflush_r>:
 80127a0:	898a      	ldrh	r2, [r1, #12]
 80127a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80127a6:	4605      	mov	r5, r0
 80127a8:	0710      	lsls	r0, r2, #28
 80127aa:	460c      	mov	r4, r1
 80127ac:	d457      	bmi.n	801285e <__sflush_r+0xbe>
 80127ae:	684b      	ldr	r3, [r1, #4]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	dc02      	bgt.n	80127ba <__sflush_r+0x1a>
 80127b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	dd18      	ble.n	80127ec <__sflush_r+0x4c>
 80127ba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80127bc:	b1b6      	cbz	r6, 80127ec <__sflush_r+0x4c>
 80127be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80127c2:	2300      	movs	r3, #0
 80127c4:	b292      	uxth	r2, r2
 80127c6:	682f      	ldr	r7, [r5, #0]
 80127c8:	602b      	str	r3, [r5, #0]
 80127ca:	b10a      	cbz	r2, 80127d0 <__sflush_r+0x30>
 80127cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80127ce:	e010      	b.n	80127f2 <__sflush_r+0x52>
 80127d0:	6a21      	ldr	r1, [r4, #32]
 80127d2:	4628      	mov	r0, r5
 80127d4:	2301      	movs	r3, #1
 80127d6:	47b0      	blx	r6
 80127d8:	1c41      	adds	r1, r0, #1
 80127da:	4602      	mov	r2, r0
 80127dc:	d109      	bne.n	80127f2 <__sflush_r+0x52>
 80127de:	682b      	ldr	r3, [r5, #0]
 80127e0:	b13b      	cbz	r3, 80127f2 <__sflush_r+0x52>
 80127e2:	2b1d      	cmp	r3, #29
 80127e4:	d001      	beq.n	80127ea <__sflush_r+0x4a>
 80127e6:	2b16      	cmp	r3, #22
 80127e8:	d147      	bne.n	801287a <__sflush_r+0xda>
 80127ea:	602f      	str	r7, [r5, #0]
 80127ec:	2000      	movs	r0, #0
 80127ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80127f2:	89a3      	ldrh	r3, [r4, #12]
 80127f4:	075b      	lsls	r3, r3, #29
 80127f6:	d505      	bpl.n	8012804 <__sflush_r+0x64>
 80127f8:	6863      	ldr	r3, [r4, #4]
 80127fa:	1ad2      	subs	r2, r2, r3
 80127fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80127fe:	b10b      	cbz	r3, 8012804 <__sflush_r+0x64>
 8012800:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012802:	1ad2      	subs	r2, r2, r3
 8012804:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012806:	6a21      	ldr	r1, [r4, #32]
 8012808:	2300      	movs	r3, #0
 801280a:	4628      	mov	r0, r5
 801280c:	47b0      	blx	r6
 801280e:	1c46      	adds	r6, r0, #1
 8012810:	89a3      	ldrh	r3, [r4, #12]
 8012812:	d105      	bne.n	8012820 <__sflush_r+0x80>
 8012814:	682a      	ldr	r2, [r5, #0]
 8012816:	b11a      	cbz	r2, 8012820 <__sflush_r+0x80>
 8012818:	2a1d      	cmp	r2, #29
 801281a:	d001      	beq.n	8012820 <__sflush_r+0x80>
 801281c:	2a16      	cmp	r2, #22
 801281e:	d119      	bne.n	8012854 <__sflush_r+0xb4>
 8012820:	2200      	movs	r2, #0
 8012822:	6062      	str	r2, [r4, #4]
 8012824:	04d9      	lsls	r1, r3, #19
 8012826:	6922      	ldr	r2, [r4, #16]
 8012828:	6022      	str	r2, [r4, #0]
 801282a:	d504      	bpl.n	8012836 <__sflush_r+0x96>
 801282c:	1c42      	adds	r2, r0, #1
 801282e:	d101      	bne.n	8012834 <__sflush_r+0x94>
 8012830:	682b      	ldr	r3, [r5, #0]
 8012832:	b903      	cbnz	r3, 8012836 <__sflush_r+0x96>
 8012834:	6560      	str	r0, [r4, #84]	; 0x54
 8012836:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012838:	602f      	str	r7, [r5, #0]
 801283a:	2900      	cmp	r1, #0
 801283c:	d0d6      	beq.n	80127ec <__sflush_r+0x4c>
 801283e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012842:	4299      	cmp	r1, r3
 8012844:	d002      	beq.n	801284c <__sflush_r+0xac>
 8012846:	4628      	mov	r0, r5
 8012848:	f000 f97a 	bl	8012b40 <_free_r>
 801284c:	2000      	movs	r0, #0
 801284e:	6360      	str	r0, [r4, #52]	; 0x34
 8012850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012858:	81a3      	strh	r3, [r4, #12]
 801285a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801285e:	690f      	ldr	r7, [r1, #16]
 8012860:	2f00      	cmp	r7, #0
 8012862:	d0c3      	beq.n	80127ec <__sflush_r+0x4c>
 8012864:	0793      	lsls	r3, r2, #30
 8012866:	680e      	ldr	r6, [r1, #0]
 8012868:	bf08      	it	eq
 801286a:	694b      	ldreq	r3, [r1, #20]
 801286c:	600f      	str	r7, [r1, #0]
 801286e:	bf18      	it	ne
 8012870:	2300      	movne	r3, #0
 8012872:	ebc7 0806 	rsb	r8, r7, r6
 8012876:	608b      	str	r3, [r1, #8]
 8012878:	e012      	b.n	80128a0 <__sflush_r+0x100>
 801287a:	89a3      	ldrh	r3, [r4, #12]
 801287c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012880:	81a3      	strh	r3, [r4, #12]
 8012882:	f04f 30ff 	mov.w	r0, #4294967295
 8012886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801288a:	4628      	mov	r0, r5
 801288c:	6a21      	ldr	r1, [r4, #32]
 801288e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012890:	463a      	mov	r2, r7
 8012892:	4643      	mov	r3, r8
 8012894:	47b0      	blx	r6
 8012896:	2800      	cmp	r0, #0
 8012898:	ddef      	ble.n	801287a <__sflush_r+0xda>
 801289a:	4407      	add	r7, r0
 801289c:	ebc0 0808 	rsb	r8, r0, r8
 80128a0:	f1b8 0f00 	cmp.w	r8, #0
 80128a4:	dcf1      	bgt.n	801288a <__sflush_r+0xea>
 80128a6:	e7a1      	b.n	80127ec <__sflush_r+0x4c>

080128a8 <_fflush_r>:
 80128a8:	b538      	push	{r3, r4, r5, lr}
 80128aa:	690b      	ldr	r3, [r1, #16]
 80128ac:	4605      	mov	r5, r0
 80128ae:	460c      	mov	r4, r1
 80128b0:	b1db      	cbz	r3, 80128ea <_fflush_r+0x42>
 80128b2:	b118      	cbz	r0, 80128bc <_fflush_r+0x14>
 80128b4:	6983      	ldr	r3, [r0, #24]
 80128b6:	b90b      	cbnz	r3, 80128bc <_fflush_r+0x14>
 80128b8:	f000 f860 	bl	801297c <__sinit>
 80128bc:	4b0c      	ldr	r3, [pc, #48]	; (80128f0 <_fflush_r+0x48>)
 80128be:	429c      	cmp	r4, r3
 80128c0:	d101      	bne.n	80128c6 <_fflush_r+0x1e>
 80128c2:	686c      	ldr	r4, [r5, #4]
 80128c4:	e008      	b.n	80128d8 <_fflush_r+0x30>
 80128c6:	4b0b      	ldr	r3, [pc, #44]	; (80128f4 <_fflush_r+0x4c>)
 80128c8:	429c      	cmp	r4, r3
 80128ca:	d101      	bne.n	80128d0 <_fflush_r+0x28>
 80128cc:	68ac      	ldr	r4, [r5, #8]
 80128ce:	e003      	b.n	80128d8 <_fflush_r+0x30>
 80128d0:	4b09      	ldr	r3, [pc, #36]	; (80128f8 <_fflush_r+0x50>)
 80128d2:	429c      	cmp	r4, r3
 80128d4:	bf08      	it	eq
 80128d6:	68ec      	ldreq	r4, [r5, #12]
 80128d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80128dc:	b12b      	cbz	r3, 80128ea <_fflush_r+0x42>
 80128de:	4628      	mov	r0, r5
 80128e0:	4621      	mov	r1, r4
 80128e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80128e6:	f7ff bf5b 	b.w	80127a0 <__sflush_r>
 80128ea:	2000      	movs	r0, #0
 80128ec:	bd38      	pop	{r3, r4, r5, pc}
 80128ee:	bf00      	nop
 80128f0:	080149d8 	.word	0x080149d8
 80128f4:	080149f8 	.word	0x080149f8
 80128f8:	08014a18 	.word	0x08014a18

080128fc <_cleanup_r>:
 80128fc:	4901      	ldr	r1, [pc, #4]	; (8012904 <_cleanup_r+0x8>)
 80128fe:	f000 b8a7 	b.w	8012a50 <_fwalk_reent>
 8012902:	bf00      	nop
 8012904:	080128a9 	.word	0x080128a9

08012908 <std.isra.0>:
 8012908:	2300      	movs	r3, #0
 801290a:	b510      	push	{r4, lr}
 801290c:	4604      	mov	r4, r0
 801290e:	6003      	str	r3, [r0, #0]
 8012910:	6043      	str	r3, [r0, #4]
 8012912:	6083      	str	r3, [r0, #8]
 8012914:	8181      	strh	r1, [r0, #12]
 8012916:	6643      	str	r3, [r0, #100]	; 0x64
 8012918:	81c2      	strh	r2, [r0, #14]
 801291a:	6103      	str	r3, [r0, #16]
 801291c:	6143      	str	r3, [r0, #20]
 801291e:	6183      	str	r3, [r0, #24]
 8012920:	4619      	mov	r1, r3
 8012922:	305c      	adds	r0, #92	; 0x5c
 8012924:	2208      	movs	r2, #8
 8012926:	f7ff f990 	bl	8011c4a <memset>
 801292a:	4b05      	ldr	r3, [pc, #20]	; (8012940 <std.isra.0+0x38>)
 801292c:	6263      	str	r3, [r4, #36]	; 0x24
 801292e:	4b05      	ldr	r3, [pc, #20]	; (8012944 <std.isra.0+0x3c>)
 8012930:	62a3      	str	r3, [r4, #40]	; 0x28
 8012932:	4b05      	ldr	r3, [pc, #20]	; (8012948 <std.isra.0+0x40>)
 8012934:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012936:	4b05      	ldr	r3, [pc, #20]	; (801294c <std.isra.0+0x44>)
 8012938:	6224      	str	r4, [r4, #32]
 801293a:	6323      	str	r3, [r4, #48]	; 0x30
 801293c:	bd10      	pop	{r4, pc}
 801293e:	bf00      	nop
 8012940:	0801324d 	.word	0x0801324d
 8012944:	0801326f 	.word	0x0801326f
 8012948:	080132a7 	.word	0x080132a7
 801294c:	080132cb 	.word	0x080132cb

08012950 <__sfmoreglue>:
 8012950:	b570      	push	{r4, r5, r6, lr}
 8012952:	2368      	movs	r3, #104	; 0x68
 8012954:	1e4d      	subs	r5, r1, #1
 8012956:	435d      	muls	r5, r3
 8012958:	460e      	mov	r6, r1
 801295a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801295e:	f000 f933 	bl	8012bc8 <_malloc_r>
 8012962:	4604      	mov	r4, r0
 8012964:	b140      	cbz	r0, 8012978 <__sfmoreglue+0x28>
 8012966:	2100      	movs	r1, #0
 8012968:	e880 0042 	stmia.w	r0, {r1, r6}
 801296c:	300c      	adds	r0, #12
 801296e:	60a0      	str	r0, [r4, #8]
 8012970:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012974:	f7ff f969 	bl	8011c4a <memset>
 8012978:	4620      	mov	r0, r4
 801297a:	bd70      	pop	{r4, r5, r6, pc}

0801297c <__sinit>:
 801297c:	6983      	ldr	r3, [r0, #24]
 801297e:	b510      	push	{r4, lr}
 8012980:	4604      	mov	r4, r0
 8012982:	bb33      	cbnz	r3, 80129d2 <__sinit+0x56>
 8012984:	6483      	str	r3, [r0, #72]	; 0x48
 8012986:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012988:	6503      	str	r3, [r0, #80]	; 0x50
 801298a:	4b12      	ldr	r3, [pc, #72]	; (80129d4 <__sinit+0x58>)
 801298c:	4a12      	ldr	r2, [pc, #72]	; (80129d8 <__sinit+0x5c>)
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	6282      	str	r2, [r0, #40]	; 0x28
 8012992:	4298      	cmp	r0, r3
 8012994:	bf04      	itt	eq
 8012996:	2301      	moveq	r3, #1
 8012998:	6183      	streq	r3, [r0, #24]
 801299a:	f000 f81f 	bl	80129dc <__sfp>
 801299e:	6060      	str	r0, [r4, #4]
 80129a0:	4620      	mov	r0, r4
 80129a2:	f000 f81b 	bl	80129dc <__sfp>
 80129a6:	60a0      	str	r0, [r4, #8]
 80129a8:	4620      	mov	r0, r4
 80129aa:	f000 f817 	bl	80129dc <__sfp>
 80129ae:	2104      	movs	r1, #4
 80129b0:	60e0      	str	r0, [r4, #12]
 80129b2:	2200      	movs	r2, #0
 80129b4:	6860      	ldr	r0, [r4, #4]
 80129b6:	f7ff ffa7 	bl	8012908 <std.isra.0>
 80129ba:	68a0      	ldr	r0, [r4, #8]
 80129bc:	2109      	movs	r1, #9
 80129be:	2201      	movs	r2, #1
 80129c0:	f7ff ffa2 	bl	8012908 <std.isra.0>
 80129c4:	68e0      	ldr	r0, [r4, #12]
 80129c6:	2112      	movs	r1, #18
 80129c8:	2202      	movs	r2, #2
 80129ca:	f7ff ff9d 	bl	8012908 <std.isra.0>
 80129ce:	2301      	movs	r3, #1
 80129d0:	61a3      	str	r3, [r4, #24]
 80129d2:	bd10      	pop	{r4, pc}
 80129d4:	08014870 	.word	0x08014870
 80129d8:	080128fd 	.word	0x080128fd

080129dc <__sfp>:
 80129dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80129de:	4b1b      	ldr	r3, [pc, #108]	; (8012a4c <__sfp+0x70>)
 80129e0:	681e      	ldr	r6, [r3, #0]
 80129e2:	69b3      	ldr	r3, [r6, #24]
 80129e4:	4607      	mov	r7, r0
 80129e6:	b913      	cbnz	r3, 80129ee <__sfp+0x12>
 80129e8:	4630      	mov	r0, r6
 80129ea:	f7ff ffc7 	bl	801297c <__sinit>
 80129ee:	3648      	adds	r6, #72	; 0x48
 80129f0:	68b4      	ldr	r4, [r6, #8]
 80129f2:	6873      	ldr	r3, [r6, #4]
 80129f4:	3b01      	subs	r3, #1
 80129f6:	d404      	bmi.n	8012a02 <__sfp+0x26>
 80129f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80129fc:	b175      	cbz	r5, 8012a1c <__sfp+0x40>
 80129fe:	3468      	adds	r4, #104	; 0x68
 8012a00:	e7f8      	b.n	80129f4 <__sfp+0x18>
 8012a02:	6833      	ldr	r3, [r6, #0]
 8012a04:	b92b      	cbnz	r3, 8012a12 <__sfp+0x36>
 8012a06:	4638      	mov	r0, r7
 8012a08:	2104      	movs	r1, #4
 8012a0a:	f7ff ffa1 	bl	8012950 <__sfmoreglue>
 8012a0e:	6030      	str	r0, [r6, #0]
 8012a10:	b108      	cbz	r0, 8012a16 <__sfp+0x3a>
 8012a12:	6836      	ldr	r6, [r6, #0]
 8012a14:	e7ec      	b.n	80129f0 <__sfp+0x14>
 8012a16:	230c      	movs	r3, #12
 8012a18:	603b      	str	r3, [r7, #0]
 8012a1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012a20:	81e3      	strh	r3, [r4, #14]
 8012a22:	2301      	movs	r3, #1
 8012a24:	81a3      	strh	r3, [r4, #12]
 8012a26:	6665      	str	r5, [r4, #100]	; 0x64
 8012a28:	6025      	str	r5, [r4, #0]
 8012a2a:	60a5      	str	r5, [r4, #8]
 8012a2c:	6065      	str	r5, [r4, #4]
 8012a2e:	6125      	str	r5, [r4, #16]
 8012a30:	6165      	str	r5, [r4, #20]
 8012a32:	61a5      	str	r5, [r4, #24]
 8012a34:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012a38:	4629      	mov	r1, r5
 8012a3a:	2208      	movs	r2, #8
 8012a3c:	f7ff f905 	bl	8011c4a <memset>
 8012a40:	6365      	str	r5, [r4, #52]	; 0x34
 8012a42:	63a5      	str	r5, [r4, #56]	; 0x38
 8012a44:	64a5      	str	r5, [r4, #72]	; 0x48
 8012a46:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012a48:	4620      	mov	r0, r4
 8012a4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012a4c:	08014870 	.word	0x08014870

08012a50 <_fwalk_reent>:
 8012a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a54:	4680      	mov	r8, r0
 8012a56:	4689      	mov	r9, r1
 8012a58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012a5c:	2600      	movs	r6, #0
 8012a5e:	b194      	cbz	r4, 8012a86 <_fwalk_reent+0x36>
 8012a60:	68a5      	ldr	r5, [r4, #8]
 8012a62:	6867      	ldr	r7, [r4, #4]
 8012a64:	3f01      	subs	r7, #1
 8012a66:	d40c      	bmi.n	8012a82 <_fwalk_reent+0x32>
 8012a68:	89ab      	ldrh	r3, [r5, #12]
 8012a6a:	2b01      	cmp	r3, #1
 8012a6c:	d907      	bls.n	8012a7e <_fwalk_reent+0x2e>
 8012a6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012a72:	3301      	adds	r3, #1
 8012a74:	d003      	beq.n	8012a7e <_fwalk_reent+0x2e>
 8012a76:	4640      	mov	r0, r8
 8012a78:	4629      	mov	r1, r5
 8012a7a:	47c8      	blx	r9
 8012a7c:	4306      	orrs	r6, r0
 8012a7e:	3568      	adds	r5, #104	; 0x68
 8012a80:	e7f0      	b.n	8012a64 <_fwalk_reent+0x14>
 8012a82:	6824      	ldr	r4, [r4, #0]
 8012a84:	e7eb      	b.n	8012a5e <_fwalk_reent+0xe>
 8012a86:	4630      	mov	r0, r6
 8012a88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012a8c <__gettzinfo>:
 8012a8c:	4800      	ldr	r0, [pc, #0]	; (8012a90 <__gettzinfo+0x4>)
 8012a8e:	4770      	bx	lr
 8012a90:	1fff4368 	.word	0x1fff4368

08012a94 <__smakebuf_r>:
 8012a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012a96:	898b      	ldrh	r3, [r1, #12]
 8012a98:	079d      	lsls	r5, r3, #30
 8012a9a:	b091      	sub	sp, #68	; 0x44
 8012a9c:	4606      	mov	r6, r0
 8012a9e:	460c      	mov	r4, r1
 8012aa0:	d426      	bmi.n	8012af0 <__smakebuf_r+0x5c>
 8012aa2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012aa6:	2900      	cmp	r1, #0
 8012aa8:	da09      	bge.n	8012abe <__smakebuf_r+0x2a>
 8012aaa:	89a3      	ldrh	r3, [r4, #12]
 8012aac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8012ab0:	f04f 0500 	mov.w	r5, #0
 8012ab4:	bf14      	ite	ne
 8012ab6:	2740      	movne	r7, #64	; 0x40
 8012ab8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 8012abc:	e00d      	b.n	8012ada <__smakebuf_r+0x46>
 8012abe:	aa01      	add	r2, sp, #4
 8012ac0:	f000 fc2a 	bl	8013318 <_fstat_r>
 8012ac4:	2800      	cmp	r0, #0
 8012ac6:	dbf0      	blt.n	8012aaa <__smakebuf_r+0x16>
 8012ac8:	9d02      	ldr	r5, [sp, #8]
 8012aca:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 8012ace:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8012ad2:	424d      	negs	r5, r1
 8012ad4:	414d      	adcs	r5, r1
 8012ad6:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8012ada:	4630      	mov	r0, r6
 8012adc:	4639      	mov	r1, r7
 8012ade:	f000 f873 	bl	8012bc8 <_malloc_r>
 8012ae2:	b960      	cbnz	r0, 8012afe <__smakebuf_r+0x6a>
 8012ae4:	89a3      	ldrh	r3, [r4, #12]
 8012ae6:	059a      	lsls	r2, r3, #22
 8012ae8:	d41d      	bmi.n	8012b26 <__smakebuf_r+0x92>
 8012aea:	f043 0302 	orr.w	r3, r3, #2
 8012aee:	81a3      	strh	r3, [r4, #12]
 8012af0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012af4:	6023      	str	r3, [r4, #0]
 8012af6:	6123      	str	r3, [r4, #16]
 8012af8:	2301      	movs	r3, #1
 8012afa:	6163      	str	r3, [r4, #20]
 8012afc:	e013      	b.n	8012b26 <__smakebuf_r+0x92>
 8012afe:	4b0b      	ldr	r3, [pc, #44]	; (8012b2c <__smakebuf_r+0x98>)
 8012b00:	62b3      	str	r3, [r6, #40]	; 0x28
 8012b02:	89a3      	ldrh	r3, [r4, #12]
 8012b04:	6020      	str	r0, [r4, #0]
 8012b06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012b0a:	81a3      	strh	r3, [r4, #12]
 8012b0c:	6120      	str	r0, [r4, #16]
 8012b0e:	6167      	str	r7, [r4, #20]
 8012b10:	b14d      	cbz	r5, 8012b26 <__smakebuf_r+0x92>
 8012b12:	4630      	mov	r0, r6
 8012b14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012b18:	f000 fc10 	bl	801333c <_isatty_r>
 8012b1c:	b118      	cbz	r0, 8012b26 <__smakebuf_r+0x92>
 8012b1e:	89a3      	ldrh	r3, [r4, #12]
 8012b20:	f043 0301 	orr.w	r3, r3, #1
 8012b24:	81a3      	strh	r3, [r4, #12]
 8012b26:	b011      	add	sp, #68	; 0x44
 8012b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b2a:	bf00      	nop
 8012b2c:	080128fd 	.word	0x080128fd

08012b30 <malloc>:
 8012b30:	4b02      	ldr	r3, [pc, #8]	; (8012b3c <malloc+0xc>)
 8012b32:	4601      	mov	r1, r0
 8012b34:	6818      	ldr	r0, [r3, #0]
 8012b36:	f000 b847 	b.w	8012bc8 <_malloc_r>
 8012b3a:	bf00      	nop
 8012b3c:	1fff4360 	.word	0x1fff4360

08012b40 <_free_r>:
 8012b40:	b530      	push	{r4, r5, lr}
 8012b42:	2900      	cmp	r1, #0
 8012b44:	d03d      	beq.n	8012bc2 <_free_r+0x82>
 8012b46:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012b4a:	1f0b      	subs	r3, r1, #4
 8012b4c:	491d      	ldr	r1, [pc, #116]	; (8012bc4 <_free_r+0x84>)
 8012b4e:	2a00      	cmp	r2, #0
 8012b50:	bfb8      	it	lt
 8012b52:	189b      	addlt	r3, r3, r2
 8012b54:	680a      	ldr	r2, [r1, #0]
 8012b56:	460c      	mov	r4, r1
 8012b58:	b912      	cbnz	r2, 8012b60 <_free_r+0x20>
 8012b5a:	605a      	str	r2, [r3, #4]
 8012b5c:	600b      	str	r3, [r1, #0]
 8012b5e:	bd30      	pop	{r4, r5, pc}
 8012b60:	4293      	cmp	r3, r2
 8012b62:	d20d      	bcs.n	8012b80 <_free_r+0x40>
 8012b64:	6819      	ldr	r1, [r3, #0]
 8012b66:	1858      	adds	r0, r3, r1
 8012b68:	4290      	cmp	r0, r2
 8012b6a:	bf01      	itttt	eq
 8012b6c:	585a      	ldreq	r2, [r3, r1]
 8012b6e:	1852      	addeq	r2, r2, r1
 8012b70:	601a      	streq	r2, [r3, #0]
 8012b72:	6842      	ldreq	r2, [r0, #4]
 8012b74:	605a      	str	r2, [r3, #4]
 8012b76:	6023      	str	r3, [r4, #0]
 8012b78:	bd30      	pop	{r4, r5, pc}
 8012b7a:	4299      	cmp	r1, r3
 8012b7c:	d803      	bhi.n	8012b86 <_free_r+0x46>
 8012b7e:	460a      	mov	r2, r1
 8012b80:	6851      	ldr	r1, [r2, #4]
 8012b82:	2900      	cmp	r1, #0
 8012b84:	d1f9      	bne.n	8012b7a <_free_r+0x3a>
 8012b86:	6814      	ldr	r4, [r2, #0]
 8012b88:	1915      	adds	r5, r2, r4
 8012b8a:	429d      	cmp	r5, r3
 8012b8c:	d10a      	bne.n	8012ba4 <_free_r+0x64>
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	4423      	add	r3, r4
 8012b92:	18d0      	adds	r0, r2, r3
 8012b94:	4288      	cmp	r0, r1
 8012b96:	6013      	str	r3, [r2, #0]
 8012b98:	d113      	bne.n	8012bc2 <_free_r+0x82>
 8012b9a:	6808      	ldr	r0, [r1, #0]
 8012b9c:	4403      	add	r3, r0
 8012b9e:	6013      	str	r3, [r2, #0]
 8012ba0:	684b      	ldr	r3, [r1, #4]
 8012ba2:	e00d      	b.n	8012bc0 <_free_r+0x80>
 8012ba4:	d902      	bls.n	8012bac <_free_r+0x6c>
 8012ba6:	230c      	movs	r3, #12
 8012ba8:	6003      	str	r3, [r0, #0]
 8012baa:	bd30      	pop	{r4, r5, pc}
 8012bac:	681c      	ldr	r4, [r3, #0]
 8012bae:	1918      	adds	r0, r3, r4
 8012bb0:	4288      	cmp	r0, r1
 8012bb2:	bf04      	itt	eq
 8012bb4:	6808      	ldreq	r0, [r1, #0]
 8012bb6:	6849      	ldreq	r1, [r1, #4]
 8012bb8:	6059      	str	r1, [r3, #4]
 8012bba:	bf04      	itt	eq
 8012bbc:	1900      	addeq	r0, r0, r4
 8012bbe:	6018      	streq	r0, [r3, #0]
 8012bc0:	6053      	str	r3, [r2, #4]
 8012bc2:	bd30      	pop	{r4, r5, pc}
 8012bc4:	1fff47e0 	.word	0x1fff47e0

08012bc8 <_malloc_r>:
 8012bc8:	b570      	push	{r4, r5, r6, lr}
 8012bca:	1ccc      	adds	r4, r1, #3
 8012bcc:	f024 0403 	bic.w	r4, r4, #3
 8012bd0:	3408      	adds	r4, #8
 8012bd2:	2c0c      	cmp	r4, #12
 8012bd4:	bf38      	it	cc
 8012bd6:	240c      	movcc	r4, #12
 8012bd8:	2c00      	cmp	r4, #0
 8012bda:	4606      	mov	r6, r0
 8012bdc:	da03      	bge.n	8012be6 <_malloc_r+0x1e>
 8012bde:	230c      	movs	r3, #12
 8012be0:	6033      	str	r3, [r6, #0]
 8012be2:	2000      	movs	r0, #0
 8012be4:	bd70      	pop	{r4, r5, r6, pc}
 8012be6:	428c      	cmp	r4, r1
 8012be8:	d3f9      	bcc.n	8012bde <_malloc_r+0x16>
 8012bea:	4a20      	ldr	r2, [pc, #128]	; (8012c6c <_malloc_r+0xa4>)
 8012bec:	6813      	ldr	r3, [r2, #0]
 8012bee:	4610      	mov	r0, r2
 8012bf0:	4619      	mov	r1, r3
 8012bf2:	b1a1      	cbz	r1, 8012c1e <_malloc_r+0x56>
 8012bf4:	680a      	ldr	r2, [r1, #0]
 8012bf6:	1b12      	subs	r2, r2, r4
 8012bf8:	d40e      	bmi.n	8012c18 <_malloc_r+0x50>
 8012bfa:	2a0b      	cmp	r2, #11
 8012bfc:	d903      	bls.n	8012c06 <_malloc_r+0x3e>
 8012bfe:	600a      	str	r2, [r1, #0]
 8012c00:	188b      	adds	r3, r1, r2
 8012c02:	508c      	str	r4, [r1, r2]
 8012c04:	e01f      	b.n	8012c46 <_malloc_r+0x7e>
 8012c06:	428b      	cmp	r3, r1
 8012c08:	bf0d      	iteet	eq
 8012c0a:	685a      	ldreq	r2, [r3, #4]
 8012c0c:	684a      	ldrne	r2, [r1, #4]
 8012c0e:	605a      	strne	r2, [r3, #4]
 8012c10:	6002      	streq	r2, [r0, #0]
 8012c12:	bf18      	it	ne
 8012c14:	460b      	movne	r3, r1
 8012c16:	e016      	b.n	8012c46 <_malloc_r+0x7e>
 8012c18:	460b      	mov	r3, r1
 8012c1a:	6849      	ldr	r1, [r1, #4]
 8012c1c:	e7e9      	b.n	8012bf2 <_malloc_r+0x2a>
 8012c1e:	4d14      	ldr	r5, [pc, #80]	; (8012c70 <_malloc_r+0xa8>)
 8012c20:	682b      	ldr	r3, [r5, #0]
 8012c22:	b91b      	cbnz	r3, 8012c2c <_malloc_r+0x64>
 8012c24:	4630      	mov	r0, r6
 8012c26:	f000 fb01 	bl	801322c <_sbrk_r>
 8012c2a:	6028      	str	r0, [r5, #0]
 8012c2c:	4630      	mov	r0, r6
 8012c2e:	4621      	mov	r1, r4
 8012c30:	f000 fafc 	bl	801322c <_sbrk_r>
 8012c34:	1c42      	adds	r2, r0, #1
 8012c36:	4603      	mov	r3, r0
 8012c38:	d0d1      	beq.n	8012bde <_malloc_r+0x16>
 8012c3a:	1cc5      	adds	r5, r0, #3
 8012c3c:	f025 0503 	bic.w	r5, r5, #3
 8012c40:	4285      	cmp	r5, r0
 8012c42:	d10a      	bne.n	8012c5a <_malloc_r+0x92>
 8012c44:	601c      	str	r4, [r3, #0]
 8012c46:	f103 000b 	add.w	r0, r3, #11
 8012c4a:	1d1a      	adds	r2, r3, #4
 8012c4c:	f020 0007 	bic.w	r0, r0, #7
 8012c50:	1a82      	subs	r2, r0, r2
 8012c52:	d00a      	beq.n	8012c6a <_malloc_r+0xa2>
 8012c54:	4251      	negs	r1, r2
 8012c56:	5099      	str	r1, [r3, r2]
 8012c58:	bd70      	pop	{r4, r5, r6, pc}
 8012c5a:	4630      	mov	r0, r6
 8012c5c:	1ae9      	subs	r1, r5, r3
 8012c5e:	f000 fae5 	bl	801322c <_sbrk_r>
 8012c62:	3001      	adds	r0, #1
 8012c64:	d0bb      	beq.n	8012bde <_malloc_r+0x16>
 8012c66:	462b      	mov	r3, r5
 8012c68:	e7ec      	b.n	8012c44 <_malloc_r+0x7c>
 8012c6a:	bd70      	pop	{r4, r5, r6, pc}
 8012c6c:	1fff47e0 	.word	0x1fff47e0
 8012c70:	1fff47dc 	.word	0x1fff47dc

08012c74 <__ssputs_r>:
 8012c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c78:	688e      	ldr	r6, [r1, #8]
 8012c7a:	42b3      	cmp	r3, r6
 8012c7c:	4682      	mov	sl, r0
 8012c7e:	460c      	mov	r4, r1
 8012c80:	4690      	mov	r8, r2
 8012c82:	4699      	mov	r9, r3
 8012c84:	d340      	bcc.n	8012d08 <__ssputs_r+0x94>
 8012c86:	898a      	ldrh	r2, [r1, #12]
 8012c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012c8c:	d03a      	beq.n	8012d04 <__ssputs_r+0x90>
 8012c8e:	6825      	ldr	r5, [r4, #0]
 8012c90:	6909      	ldr	r1, [r1, #16]
 8012c92:	1a6f      	subs	r7, r5, r1
 8012c94:	6965      	ldr	r5, [r4, #20]
 8012c96:	2302      	movs	r3, #2
 8012c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012c9c:	fb95 f5f3 	sdiv	r5, r5, r3
 8012ca0:	1c7b      	adds	r3, r7, #1
 8012ca2:	444b      	add	r3, r9
 8012ca4:	429d      	cmp	r5, r3
 8012ca6:	bf38      	it	cc
 8012ca8:	461d      	movcc	r5, r3
 8012caa:	0553      	lsls	r3, r2, #21
 8012cac:	d50f      	bpl.n	8012cce <__ssputs_r+0x5a>
 8012cae:	4629      	mov	r1, r5
 8012cb0:	f7ff ff8a 	bl	8012bc8 <_malloc_r>
 8012cb4:	4606      	mov	r6, r0
 8012cb6:	b198      	cbz	r0, 8012ce0 <__ssputs_r+0x6c>
 8012cb8:	6921      	ldr	r1, [r4, #16]
 8012cba:	463a      	mov	r2, r7
 8012cbc:	f7fe ffba 	bl	8011c34 <memcpy>
 8012cc0:	89a3      	ldrh	r3, [r4, #12]
 8012cc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012cca:	81a3      	strh	r3, [r4, #12]
 8012ccc:	e013      	b.n	8012cf6 <__ssputs_r+0x82>
 8012cce:	462a      	mov	r2, r5
 8012cd0:	f000 fb80 	bl	80133d4 <_realloc_r>
 8012cd4:	4606      	mov	r6, r0
 8012cd6:	b970      	cbnz	r0, 8012cf6 <__ssputs_r+0x82>
 8012cd8:	4650      	mov	r0, sl
 8012cda:	6921      	ldr	r1, [r4, #16]
 8012cdc:	f7ff ff30 	bl	8012b40 <_free_r>
 8012ce0:	230c      	movs	r3, #12
 8012ce2:	f8ca 3000 	str.w	r3, [sl]
 8012ce6:	89a3      	ldrh	r3, [r4, #12]
 8012ce8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cec:	81a3      	strh	r3, [r4, #12]
 8012cee:	f04f 30ff 	mov.w	r0, #4294967295
 8012cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012cf6:	6126      	str	r6, [r4, #16]
 8012cf8:	6165      	str	r5, [r4, #20]
 8012cfa:	443e      	add	r6, r7
 8012cfc:	1bed      	subs	r5, r5, r7
 8012cfe:	6026      	str	r6, [r4, #0]
 8012d00:	60a5      	str	r5, [r4, #8]
 8012d02:	464e      	mov	r6, r9
 8012d04:	45b1      	cmp	r9, r6
 8012d06:	d200      	bcs.n	8012d0a <__ssputs_r+0x96>
 8012d08:	464e      	mov	r6, r9
 8012d0a:	4632      	mov	r2, r6
 8012d0c:	6820      	ldr	r0, [r4, #0]
 8012d0e:	4641      	mov	r1, r8
 8012d10:	f000 fb45 	bl	801339e <memmove>
 8012d14:	68a3      	ldr	r3, [r4, #8]
 8012d16:	1b9b      	subs	r3, r3, r6
 8012d18:	60a3      	str	r3, [r4, #8]
 8012d1a:	6823      	ldr	r3, [r4, #0]
 8012d1c:	441e      	add	r6, r3
 8012d1e:	6026      	str	r6, [r4, #0]
 8012d20:	2000      	movs	r0, #0
 8012d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012d28 <_svfiprintf_r>:
 8012d28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012d2c:	b09d      	sub	sp, #116	; 0x74
 8012d2e:	4606      	mov	r6, r0
 8012d30:	9303      	str	r3, [sp, #12]
 8012d32:	898b      	ldrh	r3, [r1, #12]
 8012d34:	061c      	lsls	r4, r3, #24
 8012d36:	460d      	mov	r5, r1
 8012d38:	4690      	mov	r8, r2
 8012d3a:	d50c      	bpl.n	8012d56 <_svfiprintf_r+0x2e>
 8012d3c:	690b      	ldr	r3, [r1, #16]
 8012d3e:	b953      	cbnz	r3, 8012d56 <_svfiprintf_r+0x2e>
 8012d40:	2140      	movs	r1, #64	; 0x40
 8012d42:	f7ff ff41 	bl	8012bc8 <_malloc_r>
 8012d46:	6028      	str	r0, [r5, #0]
 8012d48:	6128      	str	r0, [r5, #16]
 8012d4a:	b910      	cbnz	r0, 8012d52 <_svfiprintf_r+0x2a>
 8012d4c:	230c      	movs	r3, #12
 8012d4e:	6033      	str	r3, [r6, #0]
 8012d50:	e0cc      	b.n	8012eec <_svfiprintf_r+0x1c4>
 8012d52:	2340      	movs	r3, #64	; 0x40
 8012d54:	616b      	str	r3, [r5, #20]
 8012d56:	2300      	movs	r3, #0
 8012d58:	9309      	str	r3, [sp, #36]	; 0x24
 8012d5a:	2320      	movs	r3, #32
 8012d5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012d60:	2330      	movs	r3, #48	; 0x30
 8012d62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012d66:	4643      	mov	r3, r8
 8012d68:	461c      	mov	r4, r3
 8012d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d6e:	b91a      	cbnz	r2, 8012d78 <_svfiprintf_r+0x50>
 8012d70:	ebb4 0908 	subs.w	r9, r4, r8
 8012d74:	d00f      	beq.n	8012d96 <_svfiprintf_r+0x6e>
 8012d76:	e002      	b.n	8012d7e <_svfiprintf_r+0x56>
 8012d78:	2a25      	cmp	r2, #37	; 0x25
 8012d7a:	d1f5      	bne.n	8012d68 <_svfiprintf_r+0x40>
 8012d7c:	e7f8      	b.n	8012d70 <_svfiprintf_r+0x48>
 8012d7e:	4630      	mov	r0, r6
 8012d80:	4629      	mov	r1, r5
 8012d82:	4642      	mov	r2, r8
 8012d84:	464b      	mov	r3, r9
 8012d86:	f7ff ff75 	bl	8012c74 <__ssputs_r>
 8012d8a:	3001      	adds	r0, #1
 8012d8c:	f000 80a9 	beq.w	8012ee2 <_svfiprintf_r+0x1ba>
 8012d90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012d92:	444b      	add	r3, r9
 8012d94:	9309      	str	r3, [sp, #36]	; 0x24
 8012d96:	7823      	ldrb	r3, [r4, #0]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	f000 80a2 	beq.w	8012ee2 <_svfiprintf_r+0x1ba>
 8012d9e:	2300      	movs	r3, #0
 8012da0:	f04f 32ff 	mov.w	r2, #4294967295
 8012da4:	9304      	str	r3, [sp, #16]
 8012da6:	9307      	str	r3, [sp, #28]
 8012da8:	9205      	str	r2, [sp, #20]
 8012daa:	9306      	str	r3, [sp, #24]
 8012dac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012db0:	931a      	str	r3, [sp, #104]	; 0x68
 8012db2:	f104 0801 	add.w	r8, r4, #1
 8012db6:	4644      	mov	r4, r8
 8012db8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012f04 <_svfiprintf_r+0x1dc>
 8012dbc:	7821      	ldrb	r1, [r4, #0]
 8012dbe:	4648      	mov	r0, r9
 8012dc0:	2205      	movs	r2, #5
 8012dc2:	f000 fadd 	bl	8013380 <memchr>
 8012dc6:	f108 0801 	add.w	r8, r8, #1
 8012dca:	9b04      	ldr	r3, [sp, #16]
 8012dcc:	b130      	cbz	r0, 8012ddc <_svfiprintf_r+0xb4>
 8012dce:	ebc9 0000 	rsb	r0, r9, r0
 8012dd2:	2201      	movs	r2, #1
 8012dd4:	4082      	lsls	r2, r0
 8012dd6:	4313      	orrs	r3, r2
 8012dd8:	9304      	str	r3, [sp, #16]
 8012dda:	e7ec      	b.n	8012db6 <_svfiprintf_r+0x8e>
 8012ddc:	06d8      	lsls	r0, r3, #27
 8012dde:	bf44      	itt	mi
 8012de0:	2220      	movmi	r2, #32
 8012de2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012de6:	0719      	lsls	r1, r3, #28
 8012de8:	bf44      	itt	mi
 8012dea:	222b      	movmi	r2, #43	; 0x2b
 8012dec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8012df0:	7822      	ldrb	r2, [r4, #0]
 8012df2:	2a2a      	cmp	r2, #42	; 0x2a
 8012df4:	d002      	beq.n	8012dfc <_svfiprintf_r+0xd4>
 8012df6:	9907      	ldr	r1, [sp, #28]
 8012df8:	4623      	mov	r3, r4
 8012dfa:	e00e      	b.n	8012e1a <_svfiprintf_r+0xf2>
 8012dfc:	9a03      	ldr	r2, [sp, #12]
 8012dfe:	1d11      	adds	r1, r2, #4
 8012e00:	6812      	ldr	r2, [r2, #0]
 8012e02:	9103      	str	r1, [sp, #12]
 8012e04:	2a00      	cmp	r2, #0
 8012e06:	bfbb      	ittet	lt
 8012e08:	4252      	neglt	r2, r2
 8012e0a:	f043 0302 	orrlt.w	r3, r3, #2
 8012e0e:	9207      	strge	r2, [sp, #28]
 8012e10:	9207      	strlt	r2, [sp, #28]
 8012e12:	bfb8      	it	lt
 8012e14:	9304      	strlt	r3, [sp, #16]
 8012e16:	3401      	adds	r4, #1
 8012e18:	e00a      	b.n	8012e30 <_svfiprintf_r+0x108>
 8012e1a:	461c      	mov	r4, r3
 8012e1c:	3301      	adds	r3, #1
 8012e1e:	7822      	ldrb	r2, [r4, #0]
 8012e20:	3a30      	subs	r2, #48	; 0x30
 8012e22:	2a09      	cmp	r2, #9
 8012e24:	d803      	bhi.n	8012e2e <_svfiprintf_r+0x106>
 8012e26:	200a      	movs	r0, #10
 8012e28:	fb00 2101 	mla	r1, r0, r1, r2
 8012e2c:	e7f5      	b.n	8012e1a <_svfiprintf_r+0xf2>
 8012e2e:	9107      	str	r1, [sp, #28]
 8012e30:	7823      	ldrb	r3, [r4, #0]
 8012e32:	2b2e      	cmp	r3, #46	; 0x2e
 8012e34:	d11a      	bne.n	8012e6c <_svfiprintf_r+0x144>
 8012e36:	7863      	ldrb	r3, [r4, #1]
 8012e38:	2b2a      	cmp	r3, #42	; 0x2a
 8012e3a:	d10a      	bne.n	8012e52 <_svfiprintf_r+0x12a>
 8012e3c:	9b03      	ldr	r3, [sp, #12]
 8012e3e:	1d1a      	adds	r2, r3, #4
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	9203      	str	r2, [sp, #12]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	bfb8      	it	lt
 8012e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8012e4c:	3402      	adds	r4, #2
 8012e4e:	9305      	str	r3, [sp, #20]
 8012e50:	e00c      	b.n	8012e6c <_svfiprintf_r+0x144>
 8012e52:	1c61      	adds	r1, r4, #1
 8012e54:	2200      	movs	r2, #0
 8012e56:	460c      	mov	r4, r1
 8012e58:	3101      	adds	r1, #1
 8012e5a:	7823      	ldrb	r3, [r4, #0]
 8012e5c:	3b30      	subs	r3, #48	; 0x30
 8012e5e:	2b09      	cmp	r3, #9
 8012e60:	d803      	bhi.n	8012e6a <_svfiprintf_r+0x142>
 8012e62:	200a      	movs	r0, #10
 8012e64:	fb00 3202 	mla	r2, r0, r2, r3
 8012e68:	e7f5      	b.n	8012e56 <_svfiprintf_r+0x12e>
 8012e6a:	9205      	str	r2, [sp, #20]
 8012e6c:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012f08 <_svfiprintf_r+0x1e0>
 8012e70:	7821      	ldrb	r1, [r4, #0]
 8012e72:	4640      	mov	r0, r8
 8012e74:	2203      	movs	r2, #3
 8012e76:	f000 fa83 	bl	8013380 <memchr>
 8012e7a:	b138      	cbz	r0, 8012e8c <_svfiprintf_r+0x164>
 8012e7c:	9a04      	ldr	r2, [sp, #16]
 8012e7e:	ebc8 0000 	rsb	r0, r8, r0
 8012e82:	2340      	movs	r3, #64	; 0x40
 8012e84:	4083      	lsls	r3, r0
 8012e86:	4313      	orrs	r3, r2
 8012e88:	9304      	str	r3, [sp, #16]
 8012e8a:	3401      	adds	r4, #1
 8012e8c:	7821      	ldrb	r1, [r4, #0]
 8012e8e:	481a      	ldr	r0, [pc, #104]	; (8012ef8 <_svfiprintf_r+0x1d0>)
 8012e90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012e94:	2206      	movs	r2, #6
 8012e96:	f104 0801 	add.w	r8, r4, #1
 8012e9a:	f000 fa71 	bl	8013380 <memchr>
 8012e9e:	b188      	cbz	r0, 8012ec4 <_svfiprintf_r+0x19c>
 8012ea0:	4b16      	ldr	r3, [pc, #88]	; (8012efc <_svfiprintf_r+0x1d4>)
 8012ea2:	b933      	cbnz	r3, 8012eb2 <_svfiprintf_r+0x18a>
 8012ea4:	9b03      	ldr	r3, [sp, #12]
 8012ea6:	3307      	adds	r3, #7
 8012ea8:	f023 0307 	bic.w	r3, r3, #7
 8012eac:	3308      	adds	r3, #8
 8012eae:	9303      	str	r3, [sp, #12]
 8012eb0:	e013      	b.n	8012eda <_svfiprintf_r+0x1b2>
 8012eb2:	ab03      	add	r3, sp, #12
 8012eb4:	9300      	str	r3, [sp, #0]
 8012eb6:	4630      	mov	r0, r6
 8012eb8:	a904      	add	r1, sp, #16
 8012eba:	462a      	mov	r2, r5
 8012ebc:	4b10      	ldr	r3, [pc, #64]	; (8012f00 <_svfiprintf_r+0x1d8>)
 8012ebe:	f3af 8000 	nop.w
 8012ec2:	e007      	b.n	8012ed4 <_svfiprintf_r+0x1ac>
 8012ec4:	ab03      	add	r3, sp, #12
 8012ec6:	9300      	str	r3, [sp, #0]
 8012ec8:	4630      	mov	r0, r6
 8012eca:	a904      	add	r1, sp, #16
 8012ecc:	462a      	mov	r2, r5
 8012ece:	4b0c      	ldr	r3, [pc, #48]	; (8012f00 <_svfiprintf_r+0x1d8>)
 8012ed0:	f000 f892 	bl	8012ff8 <_printf_i>
 8012ed4:	1c42      	adds	r2, r0, #1
 8012ed6:	4607      	mov	r7, r0
 8012ed8:	d003      	beq.n	8012ee2 <_svfiprintf_r+0x1ba>
 8012eda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012edc:	443b      	add	r3, r7
 8012ede:	9309      	str	r3, [sp, #36]	; 0x24
 8012ee0:	e741      	b.n	8012d66 <_svfiprintf_r+0x3e>
 8012ee2:	89ab      	ldrh	r3, [r5, #12]
 8012ee4:	065b      	lsls	r3, r3, #25
 8012ee6:	d401      	bmi.n	8012eec <_svfiprintf_r+0x1c4>
 8012ee8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012eea:	e001      	b.n	8012ef0 <_svfiprintf_r+0x1c8>
 8012eec:	f04f 30ff 	mov.w	r0, #4294967295
 8012ef0:	b01d      	add	sp, #116	; 0x74
 8012ef2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012ef6:	bf00      	nop
 8012ef8:	08014aa2 	.word	0x08014aa2
 8012efc:	00000000 	.word	0x00000000
 8012f00:	08012c75 	.word	0x08012c75
 8012f04:	08014a98 	.word	0x08014a98
 8012f08:	08014a9e 	.word	0x08014a9e

08012f0c <_printf_common>:
 8012f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012f10:	4691      	mov	r9, r2
 8012f12:	461f      	mov	r7, r3
 8012f14:	688a      	ldr	r2, [r1, #8]
 8012f16:	690b      	ldr	r3, [r1, #16]
 8012f18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012f1c:	4293      	cmp	r3, r2
 8012f1e:	bfb8      	it	lt
 8012f20:	4613      	movlt	r3, r2
 8012f22:	f8c9 3000 	str.w	r3, [r9]
 8012f26:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012f2a:	4606      	mov	r6, r0
 8012f2c:	460c      	mov	r4, r1
 8012f2e:	b112      	cbz	r2, 8012f36 <_printf_common+0x2a>
 8012f30:	3301      	adds	r3, #1
 8012f32:	f8c9 3000 	str.w	r3, [r9]
 8012f36:	6823      	ldr	r3, [r4, #0]
 8012f38:	0699      	lsls	r1, r3, #26
 8012f3a:	bf42      	ittt	mi
 8012f3c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012f40:	3302      	addmi	r3, #2
 8012f42:	f8c9 3000 	strmi.w	r3, [r9]
 8012f46:	6825      	ldr	r5, [r4, #0]
 8012f48:	f015 0506 	ands.w	r5, r5, #6
 8012f4c:	d01c      	beq.n	8012f88 <_printf_common+0x7c>
 8012f4e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012f52:	6822      	ldr	r2, [r4, #0]
 8012f54:	3300      	adds	r3, #0
 8012f56:	bf18      	it	ne
 8012f58:	2301      	movne	r3, #1
 8012f5a:	0692      	lsls	r2, r2, #26
 8012f5c:	d51f      	bpl.n	8012f9e <_printf_common+0x92>
 8012f5e:	18e1      	adds	r1, r4, r3
 8012f60:	1c5a      	adds	r2, r3, #1
 8012f62:	2030      	movs	r0, #48	; 0x30
 8012f64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012f68:	4422      	add	r2, r4
 8012f6a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012f6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012f72:	3302      	adds	r3, #2
 8012f74:	e013      	b.n	8012f9e <_printf_common+0x92>
 8012f76:	4630      	mov	r0, r6
 8012f78:	4639      	mov	r1, r7
 8012f7a:	f104 0219 	add.w	r2, r4, #25
 8012f7e:	2301      	movs	r3, #1
 8012f80:	47c0      	blx	r8
 8012f82:	3001      	adds	r0, #1
 8012f84:	d007      	beq.n	8012f96 <_printf_common+0x8a>
 8012f86:	3501      	adds	r5, #1
 8012f88:	68e3      	ldr	r3, [r4, #12]
 8012f8a:	f8d9 2000 	ldr.w	r2, [r9]
 8012f8e:	1a9b      	subs	r3, r3, r2
 8012f90:	429d      	cmp	r5, r3
 8012f92:	dbf0      	blt.n	8012f76 <_printf_common+0x6a>
 8012f94:	e7db      	b.n	8012f4e <_printf_common+0x42>
 8012f96:	f04f 30ff 	mov.w	r0, #4294967295
 8012f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	4639      	mov	r1, r7
 8012fa2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012fa6:	47c0      	blx	r8
 8012fa8:	3001      	adds	r0, #1
 8012faa:	d0f4      	beq.n	8012f96 <_printf_common+0x8a>
 8012fac:	6822      	ldr	r2, [r4, #0]
 8012fae:	f8d9 5000 	ldr.w	r5, [r9]
 8012fb2:	68e3      	ldr	r3, [r4, #12]
 8012fb4:	f002 0206 	and.w	r2, r2, #6
 8012fb8:	2a04      	cmp	r2, #4
 8012fba:	bf08      	it	eq
 8012fbc:	1b5d      	subeq	r5, r3, r5
 8012fbe:	6922      	ldr	r2, [r4, #16]
 8012fc0:	68a3      	ldr	r3, [r4, #8]
 8012fc2:	bf0c      	ite	eq
 8012fc4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012fc8:	2500      	movne	r5, #0
 8012fca:	4293      	cmp	r3, r2
 8012fcc:	bfc4      	itt	gt
 8012fce:	1a9b      	subgt	r3, r3, r2
 8012fd0:	18ed      	addgt	r5, r5, r3
 8012fd2:	f04f 0900 	mov.w	r9, #0
 8012fd6:	45a9      	cmp	r9, r5
 8012fd8:	da0a      	bge.n	8012ff0 <_printf_common+0xe4>
 8012fda:	4630      	mov	r0, r6
 8012fdc:	4639      	mov	r1, r7
 8012fde:	f104 021a 	add.w	r2, r4, #26
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	47c0      	blx	r8
 8012fe6:	3001      	adds	r0, #1
 8012fe8:	d0d5      	beq.n	8012f96 <_printf_common+0x8a>
 8012fea:	f109 0901 	add.w	r9, r9, #1
 8012fee:	e7f2      	b.n	8012fd6 <_printf_common+0xca>
 8012ff0:	2000      	movs	r0, #0
 8012ff2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012ff8 <_printf_i>:
 8012ff8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012ffc:	460c      	mov	r4, r1
 8012ffe:	4617      	mov	r7, r2
 8013000:	7e22      	ldrb	r2, [r4, #24]
 8013002:	2a6e      	cmp	r2, #110	; 0x6e
 8013004:	4698      	mov	r8, r3
 8013006:	4606      	mov	r6, r0
 8013008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801300a:	f101 0143 	add.w	r1, r1, #67	; 0x43
 801300e:	f000 80a9 	beq.w	8013164 <_printf_i+0x16c>
 8013012:	d812      	bhi.n	801303a <_printf_i+0x42>
 8013014:	2a63      	cmp	r2, #99	; 0x63
 8013016:	d023      	beq.n	8013060 <_printf_i+0x68>
 8013018:	d80a      	bhi.n	8013030 <_printf_i+0x38>
 801301a:	2a00      	cmp	r2, #0
 801301c:	f000 80b6 	beq.w	801318c <_printf_i+0x194>
 8013020:	2a58      	cmp	r2, #88	; 0x58
 8013022:	f040 80c5 	bne.w	80131b0 <_printf_i+0x1b8>
 8013026:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801302a:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8013224 <_printf_i+0x22c>
 801302e:	e051      	b.n	80130d4 <_printf_i+0xdc>
 8013030:	2a64      	cmp	r2, #100	; 0x64
 8013032:	d01e      	beq.n	8013072 <_printf_i+0x7a>
 8013034:	2a69      	cmp	r2, #105	; 0x69
 8013036:	d01c      	beq.n	8013072 <_printf_i+0x7a>
 8013038:	e0ba      	b.n	80131b0 <_printf_i+0x1b8>
 801303a:	2a73      	cmp	r2, #115	; 0x73
 801303c:	f000 80aa 	beq.w	8013194 <_printf_i+0x19c>
 8013040:	d809      	bhi.n	8013056 <_printf_i+0x5e>
 8013042:	2a6f      	cmp	r2, #111	; 0x6f
 8013044:	d02b      	beq.n	801309e <_printf_i+0xa6>
 8013046:	2a70      	cmp	r2, #112	; 0x70
 8013048:	f040 80b2 	bne.w	80131b0 <_printf_i+0x1b8>
 801304c:	6822      	ldr	r2, [r4, #0]
 801304e:	f042 0220 	orr.w	r2, r2, #32
 8013052:	6022      	str	r2, [r4, #0]
 8013054:	e039      	b.n	80130ca <_printf_i+0xd2>
 8013056:	2a75      	cmp	r2, #117	; 0x75
 8013058:	d021      	beq.n	801309e <_printf_i+0xa6>
 801305a:	2a78      	cmp	r2, #120	; 0x78
 801305c:	d035      	beq.n	80130ca <_printf_i+0xd2>
 801305e:	e0a7      	b.n	80131b0 <_printf_i+0x1b8>
 8013060:	681a      	ldr	r2, [r3, #0]
 8013062:	1d11      	adds	r1, r2, #4
 8013064:	6019      	str	r1, [r3, #0]
 8013066:	6813      	ldr	r3, [r2, #0]
 8013068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801306c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013070:	e0a2      	b.n	80131b8 <_printf_i+0x1c0>
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	681a      	ldr	r2, [r3, #0]
 8013076:	f010 0f80 	tst.w	r0, #128	; 0x80
 801307a:	d003      	beq.n	8013084 <_printf_i+0x8c>
 801307c:	1d10      	adds	r0, r2, #4
 801307e:	6018      	str	r0, [r3, #0]
 8013080:	6813      	ldr	r3, [r2, #0]
 8013082:	e005      	b.n	8013090 <_printf_i+0x98>
 8013084:	0645      	lsls	r5, r0, #25
 8013086:	d5f9      	bpl.n	801307c <_printf_i+0x84>
 8013088:	1d10      	adds	r0, r2, #4
 801308a:	6018      	str	r0, [r3, #0]
 801308c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8013090:	2b00      	cmp	r3, #0
 8013092:	da3b      	bge.n	801310c <_printf_i+0x114>
 8013094:	222d      	movs	r2, #45	; 0x2d
 8013096:	425b      	negs	r3, r3
 8013098:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801309c:	e036      	b.n	801310c <_printf_i+0x114>
 801309e:	6820      	ldr	r0, [r4, #0]
 80130a0:	681a      	ldr	r2, [r3, #0]
 80130a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80130a6:	d003      	beq.n	80130b0 <_printf_i+0xb8>
 80130a8:	1d10      	adds	r0, r2, #4
 80130aa:	6018      	str	r0, [r3, #0]
 80130ac:	6813      	ldr	r3, [r2, #0]
 80130ae:	e004      	b.n	80130ba <_printf_i+0xc2>
 80130b0:	0640      	lsls	r0, r0, #25
 80130b2:	d5f9      	bpl.n	80130a8 <_printf_i+0xb0>
 80130b4:	1d10      	adds	r0, r2, #4
 80130b6:	6018      	str	r0, [r3, #0]
 80130b8:	8813      	ldrh	r3, [r2, #0]
 80130ba:	7e22      	ldrb	r2, [r4, #24]
 80130bc:	f8df e164 	ldr.w	lr, [pc, #356]	; 8013224 <_printf_i+0x22c>
 80130c0:	2a6f      	cmp	r2, #111	; 0x6f
 80130c2:	bf0c      	ite	eq
 80130c4:	2208      	moveq	r2, #8
 80130c6:	220a      	movne	r2, #10
 80130c8:	e01c      	b.n	8013104 <_printf_i+0x10c>
 80130ca:	2278      	movs	r2, #120	; 0x78
 80130cc:	f8df e158 	ldr.w	lr, [pc, #344]	; 8013228 <_printf_i+0x230>
 80130d0:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80130d4:	6822      	ldr	r2, [r4, #0]
 80130d6:	6818      	ldr	r0, [r3, #0]
 80130d8:	f012 0f80 	tst.w	r2, #128	; 0x80
 80130dc:	f100 0504 	add.w	r5, r0, #4
 80130e0:	601d      	str	r5, [r3, #0]
 80130e2:	d001      	beq.n	80130e8 <_printf_i+0xf0>
 80130e4:	6803      	ldr	r3, [r0, #0]
 80130e6:	e002      	b.n	80130ee <_printf_i+0xf6>
 80130e8:	0655      	lsls	r5, r2, #25
 80130ea:	d5fb      	bpl.n	80130e4 <_printf_i+0xec>
 80130ec:	8803      	ldrh	r3, [r0, #0]
 80130ee:	07d0      	lsls	r0, r2, #31
 80130f0:	bf44      	itt	mi
 80130f2:	f042 0220 	orrmi.w	r2, r2, #32
 80130f6:	6022      	strmi	r2, [r4, #0]
 80130f8:	b91b      	cbnz	r3, 8013102 <_printf_i+0x10a>
 80130fa:	6822      	ldr	r2, [r4, #0]
 80130fc:	f022 0220 	bic.w	r2, r2, #32
 8013100:	6022      	str	r2, [r4, #0]
 8013102:	2210      	movs	r2, #16
 8013104:	2000      	movs	r0, #0
 8013106:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 801310a:	e002      	b.n	8013112 <_printf_i+0x11a>
 801310c:	f8df e114 	ldr.w	lr, [pc, #276]	; 8013224 <_printf_i+0x22c>
 8013110:	220a      	movs	r2, #10
 8013112:	6865      	ldr	r5, [r4, #4]
 8013114:	60a5      	str	r5, [r4, #8]
 8013116:	2d00      	cmp	r5, #0
 8013118:	bfa2      	ittt	ge
 801311a:	6820      	ldrge	r0, [r4, #0]
 801311c:	f020 0004 	bicge.w	r0, r0, #4
 8013120:	6020      	strge	r0, [r4, #0]
 8013122:	b903      	cbnz	r3, 8013126 <_printf_i+0x12e>
 8013124:	b165      	cbz	r5, 8013140 <_printf_i+0x148>
 8013126:	460d      	mov	r5, r1
 8013128:	fbb3 f0f2 	udiv	r0, r3, r2
 801312c:	fb02 3310 	mls	r3, r2, r0, r3
 8013130:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8013134:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013138:	4603      	mov	r3, r0
 801313a:	2800      	cmp	r0, #0
 801313c:	d1f4      	bne.n	8013128 <_printf_i+0x130>
 801313e:	e000      	b.n	8013142 <_printf_i+0x14a>
 8013140:	460d      	mov	r5, r1
 8013142:	2a08      	cmp	r2, #8
 8013144:	d10b      	bne.n	801315e <_printf_i+0x166>
 8013146:	6823      	ldr	r3, [r4, #0]
 8013148:	07da      	lsls	r2, r3, #31
 801314a:	d508      	bpl.n	801315e <_printf_i+0x166>
 801314c:	6923      	ldr	r3, [r4, #16]
 801314e:	6862      	ldr	r2, [r4, #4]
 8013150:	429a      	cmp	r2, r3
 8013152:	bfde      	ittt	le
 8013154:	2330      	movle	r3, #48	; 0x30
 8013156:	f805 3c01 	strble.w	r3, [r5, #-1]
 801315a:	f105 35ff 	addle.w	r5, r5, #4294967295
 801315e:	1b49      	subs	r1, r1, r5
 8013160:	6121      	str	r1, [r4, #16]
 8013162:	e02e      	b.n	80131c2 <_printf_i+0x1ca>
 8013164:	6825      	ldr	r5, [r4, #0]
 8013166:	681a      	ldr	r2, [r3, #0]
 8013168:	6960      	ldr	r0, [r4, #20]
 801316a:	f015 0f80 	tst.w	r5, #128	; 0x80
 801316e:	d003      	beq.n	8013178 <_printf_i+0x180>
 8013170:	1d15      	adds	r5, r2, #4
 8013172:	601d      	str	r5, [r3, #0]
 8013174:	6813      	ldr	r3, [r2, #0]
 8013176:	e008      	b.n	801318a <_printf_i+0x192>
 8013178:	f015 0f40 	tst.w	r5, #64	; 0x40
 801317c:	f102 0504 	add.w	r5, r2, #4
 8013180:	601d      	str	r5, [r3, #0]
 8013182:	6813      	ldr	r3, [r2, #0]
 8013184:	d001      	beq.n	801318a <_printf_i+0x192>
 8013186:	8018      	strh	r0, [r3, #0]
 8013188:	e000      	b.n	801318c <_printf_i+0x194>
 801318a:	6018      	str	r0, [r3, #0]
 801318c:	2300      	movs	r3, #0
 801318e:	6123      	str	r3, [r4, #16]
 8013190:	460d      	mov	r5, r1
 8013192:	e016      	b.n	80131c2 <_printf_i+0x1ca>
 8013194:	681a      	ldr	r2, [r3, #0]
 8013196:	1d11      	adds	r1, r2, #4
 8013198:	6019      	str	r1, [r3, #0]
 801319a:	6815      	ldr	r5, [r2, #0]
 801319c:	6862      	ldr	r2, [r4, #4]
 801319e:	4628      	mov	r0, r5
 80131a0:	2100      	movs	r1, #0
 80131a2:	f000 f8ed 	bl	8013380 <memchr>
 80131a6:	b108      	cbz	r0, 80131ac <_printf_i+0x1b4>
 80131a8:	1b40      	subs	r0, r0, r5
 80131aa:	6060      	str	r0, [r4, #4]
 80131ac:	6863      	ldr	r3, [r4, #4]
 80131ae:	e004      	b.n	80131ba <_printf_i+0x1c2>
 80131b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80131b4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80131b8:	2301      	movs	r3, #1
 80131ba:	6123      	str	r3, [r4, #16]
 80131bc:	2300      	movs	r3, #0
 80131be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131c2:	f8cd 8000 	str.w	r8, [sp]
 80131c6:	4630      	mov	r0, r6
 80131c8:	4621      	mov	r1, r4
 80131ca:	aa03      	add	r2, sp, #12
 80131cc:	463b      	mov	r3, r7
 80131ce:	f7ff fe9d 	bl	8012f0c <_printf_common>
 80131d2:	3001      	adds	r0, #1
 80131d4:	d102      	bne.n	80131dc <_printf_i+0x1e4>
 80131d6:	f04f 30ff 	mov.w	r0, #4294967295
 80131da:	e01f      	b.n	801321c <_printf_i+0x224>
 80131dc:	4630      	mov	r0, r6
 80131de:	4639      	mov	r1, r7
 80131e0:	462a      	mov	r2, r5
 80131e2:	6923      	ldr	r3, [r4, #16]
 80131e4:	47c0      	blx	r8
 80131e6:	3001      	adds	r0, #1
 80131e8:	d0f5      	beq.n	80131d6 <_printf_i+0x1de>
 80131ea:	6823      	ldr	r3, [r4, #0]
 80131ec:	079b      	lsls	r3, r3, #30
 80131ee:	d405      	bmi.n	80131fc <_printf_i+0x204>
 80131f0:	68e0      	ldr	r0, [r4, #12]
 80131f2:	9b03      	ldr	r3, [sp, #12]
 80131f4:	4298      	cmp	r0, r3
 80131f6:	bfb8      	it	lt
 80131f8:	4618      	movlt	r0, r3
 80131fa:	e00f      	b.n	801321c <_printf_i+0x224>
 80131fc:	2500      	movs	r5, #0
 80131fe:	68e3      	ldr	r3, [r4, #12]
 8013200:	9a03      	ldr	r2, [sp, #12]
 8013202:	1a9b      	subs	r3, r3, r2
 8013204:	429d      	cmp	r5, r3
 8013206:	daf3      	bge.n	80131f0 <_printf_i+0x1f8>
 8013208:	4630      	mov	r0, r6
 801320a:	4639      	mov	r1, r7
 801320c:	f104 0219 	add.w	r2, r4, #25
 8013210:	2301      	movs	r3, #1
 8013212:	47c0      	blx	r8
 8013214:	3001      	adds	r0, #1
 8013216:	d0de      	beq.n	80131d6 <_printf_i+0x1de>
 8013218:	3501      	adds	r5, #1
 801321a:	e7f0      	b.n	80131fe <_printf_i+0x206>
 801321c:	b004      	add	sp, #16
 801321e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013222:	bf00      	nop
 8013224:	08014aa9 	.word	0x08014aa9
 8013228:	08014aba 	.word	0x08014aba

0801322c <_sbrk_r>:
 801322c:	b538      	push	{r3, r4, r5, lr}
 801322e:	4c06      	ldr	r4, [pc, #24]	; (8013248 <_sbrk_r+0x1c>)
 8013230:	2300      	movs	r3, #0
 8013232:	4605      	mov	r5, r0
 8013234:	4608      	mov	r0, r1
 8013236:	6023      	str	r3, [r4, #0]
 8013238:	f7f1 fefc 	bl	8005034 <_sbrk>
 801323c:	1c43      	adds	r3, r0, #1
 801323e:	d102      	bne.n	8013246 <_sbrk_r+0x1a>
 8013240:	6823      	ldr	r3, [r4, #0]
 8013242:	b103      	cbz	r3, 8013246 <_sbrk_r+0x1a>
 8013244:	602b      	str	r3, [r5, #0]
 8013246:	bd38      	pop	{r3, r4, r5, pc}
 8013248:	1fff5300 	.word	0x1fff5300

0801324c <__sread>:
 801324c:	b510      	push	{r4, lr}
 801324e:	460c      	mov	r4, r1
 8013250:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013254:	f000 f8e4 	bl	8013420 <_read_r>
 8013258:	2800      	cmp	r0, #0
 801325a:	bfab      	itete	ge
 801325c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801325e:	89a3      	ldrhlt	r3, [r4, #12]
 8013260:	181b      	addge	r3, r3, r0
 8013262:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013266:	bfac      	ite	ge
 8013268:	6563      	strge	r3, [r4, #84]	; 0x54
 801326a:	81a3      	strhlt	r3, [r4, #12]
 801326c:	bd10      	pop	{r4, pc}

0801326e <__swrite>:
 801326e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013272:	461d      	mov	r5, r3
 8013274:	898b      	ldrh	r3, [r1, #12]
 8013276:	05db      	lsls	r3, r3, #23
 8013278:	4607      	mov	r7, r0
 801327a:	460c      	mov	r4, r1
 801327c:	4616      	mov	r6, r2
 801327e:	d505      	bpl.n	801328c <__swrite+0x1e>
 8013280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013284:	2200      	movs	r2, #0
 8013286:	2302      	movs	r3, #2
 8013288:	f000 f868 	bl	801335c <_lseek_r>
 801328c:	89a3      	ldrh	r3, [r4, #12]
 801328e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013292:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013296:	81a3      	strh	r3, [r4, #12]
 8013298:	4638      	mov	r0, r7
 801329a:	4632      	mov	r2, r6
 801329c:	462b      	mov	r3, r5
 801329e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80132a2:	f000 b817 	b.w	80132d4 <_write_r>

080132a6 <__sseek>:
 80132a6:	b510      	push	{r4, lr}
 80132a8:	460c      	mov	r4, r1
 80132aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ae:	f000 f855 	bl	801335c <_lseek_r>
 80132b2:	1c43      	adds	r3, r0, #1
 80132b4:	89a3      	ldrh	r3, [r4, #12]
 80132b6:	bf15      	itete	ne
 80132b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80132ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80132be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80132c2:	81a3      	strheq	r3, [r4, #12]
 80132c4:	bf18      	it	ne
 80132c6:	81a3      	strhne	r3, [r4, #12]
 80132c8:	bd10      	pop	{r4, pc}

080132ca <__sclose>:
 80132ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80132ce:	f000 b813 	b.w	80132f8 <_close_r>
	...

080132d4 <_write_r>:
 80132d4:	b538      	push	{r3, r4, r5, lr}
 80132d6:	4c07      	ldr	r4, [pc, #28]	; (80132f4 <_write_r+0x20>)
 80132d8:	4605      	mov	r5, r0
 80132da:	2000      	movs	r0, #0
 80132dc:	6020      	str	r0, [r4, #0]
 80132de:	4608      	mov	r0, r1
 80132e0:	4611      	mov	r1, r2
 80132e2:	461a      	mov	r2, r3
 80132e4:	f000 f8e0 	bl	80134a8 <_write>
 80132e8:	1c43      	adds	r3, r0, #1
 80132ea:	d102      	bne.n	80132f2 <_write_r+0x1e>
 80132ec:	6823      	ldr	r3, [r4, #0]
 80132ee:	b103      	cbz	r3, 80132f2 <_write_r+0x1e>
 80132f0:	602b      	str	r3, [r5, #0]
 80132f2:	bd38      	pop	{r3, r4, r5, pc}
 80132f4:	1fff5300 	.word	0x1fff5300

080132f8 <_close_r>:
 80132f8:	b538      	push	{r3, r4, r5, lr}
 80132fa:	4c06      	ldr	r4, [pc, #24]	; (8013314 <_close_r+0x1c>)
 80132fc:	2300      	movs	r3, #0
 80132fe:	4605      	mov	r5, r0
 8013300:	4608      	mov	r0, r1
 8013302:	6023      	str	r3, [r4, #0]
 8013304:	f000 f8a8 	bl	8013458 <_close>
 8013308:	1c43      	adds	r3, r0, #1
 801330a:	d102      	bne.n	8013312 <_close_r+0x1a>
 801330c:	6823      	ldr	r3, [r4, #0]
 801330e:	b103      	cbz	r3, 8013312 <_close_r+0x1a>
 8013310:	602b      	str	r3, [r5, #0]
 8013312:	bd38      	pop	{r3, r4, r5, pc}
 8013314:	1fff5300 	.word	0x1fff5300

08013318 <_fstat_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	4c07      	ldr	r4, [pc, #28]	; (8013338 <_fstat_r+0x20>)
 801331c:	2300      	movs	r3, #0
 801331e:	4605      	mov	r5, r0
 8013320:	4608      	mov	r0, r1
 8013322:	4611      	mov	r1, r2
 8013324:	6023      	str	r3, [r4, #0]
 8013326:	f000 f89f 	bl	8013468 <_fstat>
 801332a:	1c43      	adds	r3, r0, #1
 801332c:	d102      	bne.n	8013334 <_fstat_r+0x1c>
 801332e:	6823      	ldr	r3, [r4, #0]
 8013330:	b103      	cbz	r3, 8013334 <_fstat_r+0x1c>
 8013332:	602b      	str	r3, [r5, #0]
 8013334:	bd38      	pop	{r3, r4, r5, pc}
 8013336:	bf00      	nop
 8013338:	1fff5300 	.word	0x1fff5300

0801333c <_isatty_r>:
 801333c:	b538      	push	{r3, r4, r5, lr}
 801333e:	4c06      	ldr	r4, [pc, #24]	; (8013358 <_isatty_r+0x1c>)
 8013340:	2300      	movs	r3, #0
 8013342:	4605      	mov	r5, r0
 8013344:	4608      	mov	r0, r1
 8013346:	6023      	str	r3, [r4, #0]
 8013348:	f000 f896 	bl	8013478 <_isatty>
 801334c:	1c43      	adds	r3, r0, #1
 801334e:	d102      	bne.n	8013356 <_isatty_r+0x1a>
 8013350:	6823      	ldr	r3, [r4, #0]
 8013352:	b103      	cbz	r3, 8013356 <_isatty_r+0x1a>
 8013354:	602b      	str	r3, [r5, #0]
 8013356:	bd38      	pop	{r3, r4, r5, pc}
 8013358:	1fff5300 	.word	0x1fff5300

0801335c <_lseek_r>:
 801335c:	b538      	push	{r3, r4, r5, lr}
 801335e:	4c07      	ldr	r4, [pc, #28]	; (801337c <_lseek_r+0x20>)
 8013360:	4605      	mov	r5, r0
 8013362:	2000      	movs	r0, #0
 8013364:	6020      	str	r0, [r4, #0]
 8013366:	4608      	mov	r0, r1
 8013368:	4611      	mov	r1, r2
 801336a:	461a      	mov	r2, r3
 801336c:	f000 f88c 	bl	8013488 <_lseek>
 8013370:	1c43      	adds	r3, r0, #1
 8013372:	d102      	bne.n	801337a <_lseek_r+0x1e>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	b103      	cbz	r3, 801337a <_lseek_r+0x1e>
 8013378:	602b      	str	r3, [r5, #0]
 801337a:	bd38      	pop	{r3, r4, r5, pc}
 801337c:	1fff5300 	.word	0x1fff5300

08013380 <memchr>:
 8013380:	b510      	push	{r4, lr}
 8013382:	b2c9      	uxtb	r1, r1
 8013384:	4402      	add	r2, r0
 8013386:	4290      	cmp	r0, r2
 8013388:	4603      	mov	r3, r0
 801338a:	d006      	beq.n	801339a <memchr+0x1a>
 801338c:	781c      	ldrb	r4, [r3, #0]
 801338e:	428c      	cmp	r4, r1
 8013390:	f100 0001 	add.w	r0, r0, #1
 8013394:	d1f7      	bne.n	8013386 <memchr+0x6>
 8013396:	4618      	mov	r0, r3
 8013398:	bd10      	pop	{r4, pc}
 801339a:	2000      	movs	r0, #0
 801339c:	bd10      	pop	{r4, pc}

0801339e <memmove>:
 801339e:	4281      	cmp	r1, r0
 80133a0:	b510      	push	{r4, lr}
 80133a2:	eb01 0302 	add.w	r3, r1, r2
 80133a6:	d301      	bcc.n	80133ac <memmove+0xe>
 80133a8:	1e42      	subs	r2, r0, #1
 80133aa:	e00b      	b.n	80133c4 <memmove+0x26>
 80133ac:	4298      	cmp	r0, r3
 80133ae:	d2fb      	bcs.n	80133a8 <memmove+0xa>
 80133b0:	1881      	adds	r1, r0, r2
 80133b2:	1ad2      	subs	r2, r2, r3
 80133b4:	42d3      	cmn	r3, r2
 80133b6:	d004      	beq.n	80133c2 <memmove+0x24>
 80133b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80133bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80133c0:	e7f8      	b.n	80133b4 <memmove+0x16>
 80133c2:	bd10      	pop	{r4, pc}
 80133c4:	4299      	cmp	r1, r3
 80133c6:	d004      	beq.n	80133d2 <memmove+0x34>
 80133c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80133cc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80133d0:	e7f8      	b.n	80133c4 <memmove+0x26>
 80133d2:	bd10      	pop	{r4, pc}

080133d4 <_realloc_r>:
 80133d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133d6:	4607      	mov	r7, r0
 80133d8:	4615      	mov	r5, r2
 80133da:	460e      	mov	r6, r1
 80133dc:	b921      	cbnz	r1, 80133e8 <_realloc_r+0x14>
 80133de:	4611      	mov	r1, r2
 80133e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80133e4:	f7ff bbf0 	b.w	8012bc8 <_malloc_r>
 80133e8:	b91a      	cbnz	r2, 80133f2 <_realloc_r+0x1e>
 80133ea:	f7ff fba9 	bl	8012b40 <_free_r>
 80133ee:	4628      	mov	r0, r5
 80133f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133f2:	f000 f827 	bl	8013444 <_malloc_usable_size_r>
 80133f6:	42a8      	cmp	r0, r5
 80133f8:	d20e      	bcs.n	8013418 <_realloc_r+0x44>
 80133fa:	4638      	mov	r0, r7
 80133fc:	4629      	mov	r1, r5
 80133fe:	f7ff fbe3 	bl	8012bc8 <_malloc_r>
 8013402:	4604      	mov	r4, r0
 8013404:	b150      	cbz	r0, 801341c <_realloc_r+0x48>
 8013406:	4631      	mov	r1, r6
 8013408:	462a      	mov	r2, r5
 801340a:	f7fe fc13 	bl	8011c34 <memcpy>
 801340e:	4638      	mov	r0, r7
 8013410:	4631      	mov	r1, r6
 8013412:	f7ff fb95 	bl	8012b40 <_free_r>
 8013416:	e001      	b.n	801341c <_realloc_r+0x48>
 8013418:	4630      	mov	r0, r6
 801341a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801341c:	4620      	mov	r0, r4
 801341e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013420 <_read_r>:
 8013420:	b538      	push	{r3, r4, r5, lr}
 8013422:	4c07      	ldr	r4, [pc, #28]	; (8013440 <_read_r+0x20>)
 8013424:	4605      	mov	r5, r0
 8013426:	2000      	movs	r0, #0
 8013428:	6020      	str	r0, [r4, #0]
 801342a:	4608      	mov	r0, r1
 801342c:	4611      	mov	r1, r2
 801342e:	461a      	mov	r2, r3
 8013430:	f000 f832 	bl	8013498 <_read>
 8013434:	1c43      	adds	r3, r0, #1
 8013436:	d102      	bne.n	801343e <_read_r+0x1e>
 8013438:	6823      	ldr	r3, [r4, #0]
 801343a:	b103      	cbz	r3, 801343e <_read_r+0x1e>
 801343c:	602b      	str	r3, [r5, #0]
 801343e:	bd38      	pop	{r3, r4, r5, pc}
 8013440:	1fff5300 	.word	0x1fff5300

08013444 <_malloc_usable_size_r>:
 8013444:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8013448:	2800      	cmp	r0, #0
 801344a:	bfbe      	ittt	lt
 801344c:	1809      	addlt	r1, r1, r0
 801344e:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8013452:	18c0      	addlt	r0, r0, r3
 8013454:	3804      	subs	r0, #4
 8013456:	4770      	bx	lr

08013458 <_close>:
 8013458:	4b02      	ldr	r3, [pc, #8]	; (8013464 <_close+0xc>)
 801345a:	2258      	movs	r2, #88	; 0x58
 801345c:	601a      	str	r2, [r3, #0]
 801345e:	f04f 30ff 	mov.w	r0, #4294967295
 8013462:	4770      	bx	lr
 8013464:	1fff5300 	.word	0x1fff5300

08013468 <_fstat>:
 8013468:	4b02      	ldr	r3, [pc, #8]	; (8013474 <_fstat+0xc>)
 801346a:	2258      	movs	r2, #88	; 0x58
 801346c:	601a      	str	r2, [r3, #0]
 801346e:	f04f 30ff 	mov.w	r0, #4294967295
 8013472:	4770      	bx	lr
 8013474:	1fff5300 	.word	0x1fff5300

08013478 <_isatty>:
 8013478:	4b02      	ldr	r3, [pc, #8]	; (8013484 <_isatty+0xc>)
 801347a:	2258      	movs	r2, #88	; 0x58
 801347c:	601a      	str	r2, [r3, #0]
 801347e:	2000      	movs	r0, #0
 8013480:	4770      	bx	lr
 8013482:	bf00      	nop
 8013484:	1fff5300 	.word	0x1fff5300

08013488 <_lseek>:
 8013488:	4b02      	ldr	r3, [pc, #8]	; (8013494 <_lseek+0xc>)
 801348a:	2258      	movs	r2, #88	; 0x58
 801348c:	601a      	str	r2, [r3, #0]
 801348e:	f04f 30ff 	mov.w	r0, #4294967295
 8013492:	4770      	bx	lr
 8013494:	1fff5300 	.word	0x1fff5300

08013498 <_read>:
 8013498:	4b02      	ldr	r3, [pc, #8]	; (80134a4 <_read+0xc>)
 801349a:	2258      	movs	r2, #88	; 0x58
 801349c:	601a      	str	r2, [r3, #0]
 801349e:	f04f 30ff 	mov.w	r0, #4294967295
 80134a2:	4770      	bx	lr
 80134a4:	1fff5300 	.word	0x1fff5300

080134a8 <_write>:
 80134a8:	4b02      	ldr	r3, [pc, #8]	; (80134b4 <_write+0xc>)
 80134aa:	2258      	movs	r2, #88	; 0x58
 80134ac:	601a      	str	r2, [r3, #0]
 80134ae:	f04f 30ff 	mov.w	r0, #4294967295
 80134b2:	4770      	bx	lr
 80134b4:	1fff5300 	.word	0x1fff5300
 80134b8:	69206e69 	.word	0x69206e69
 80134bc:	645f3167 	.word	0x645f3167
 80134c0:	006e6f5f 	.word	0x006e6f5f
 80134c4:	74697865 	.word	0x74697865
 80134c8:	31676920 	.word	0x31676920
 80134cc:	6f5f645f 	.word	0x6f5f645f
 80134d0:	0000006e 	.word	0x0000006e
 80134d4:	69206e69 	.word	0x69206e69
 80134d8:	645f3167 	.word	0x645f3167
 80134dc:	66666f5f 	.word	0x66666f5f
 80134e0:	00000000 	.word	0x00000000
 80134e4:	55206e69 	.word	0x55206e69
 80134e8:	00003432 	.word	0x00003432
 80134ec:	74697865 	.word	0x74697865
 80134f0:	34325520 	.word	0x34325520
 80134f4:	00000000 	.word	0x00000000
 80134f8:	63206e69 	.word	0x63206e69
 80134fc:	695f6e61 	.word	0x695f6e61
 8013500:	7475706e 	.word	0x7475706e
 8013504:	00000073 	.word	0x00000073
 8013508:	74697865 	.word	0x74697865
 801350c:	6e616320 	.word	0x6e616320
 8013510:	706e695f 	.word	0x706e695f
 8013514:	00737475 	.word	0x00737475
 8013518:	74697865 	.word	0x74697865
 801351c:	34325520 	.word	0x34325520
 8013520:	00000000 	.word	0x00000000
 8013524:	74206e69 	.word	0x74206e69
 8013528:	00706d65 	.word	0x00706d65
 801352c:	74697865 	.word	0x74697865
 8013530:	6d657420 	.word	0x6d657420
 8013534:	00000070 	.word	0x00000070

08013538 <UART_0_channel_config>:
 8013538:	0001c200 01080800 00000010              ............

08013544 <UART_0_tx_pin_config>:
 8013544:	00000090 00000001 00000002              ............

08013550 <UART_0_tx_pin>:
 8013550:	48028200 0000000e 08013544              ...H....D5..

0801355c <UART_0_config>:
 801355c:	08013538 080061d5 00000000 00000000     85...a..........
	...
 8013578:	08013550 00020200 00000006              P5..........

08013584 <UART_0_rx_pin_config>:
 8013584:	00000000 00000001 00000002              ............

08013590 <SPI_MASTER_0_MOSI>:
 8013590:	48028100 00000005                       ...H....

08013598 <SPI_MASTER_0_MISO>:
 8013598:	48028100 00000004                       ...H....

080135a0 <SPI_MASTER_0_SCLKOUT>:
 80135a0:	48028100 00000006                       ...H....

080135a8 <SPI_MASTER_0_SCLKOUT_Config>:
 80135a8:	00000090 00000001 00000001 00000000     ................
 80135b8:	00000000                                ....

080135bc <SPI_MASTER_0_SS_0>:
 80135bc:	48028100 0000000b                       ...H....

080135c4 <SPI_MASTER_0_SS_0_Config>:
 80135c4:	00000090 00000001 00000001 00000000     ................
 80135d4:	00010000                                ....

080135d8 <SPI_MASTER_0_Config>:
 80135d8:	1ffe8934 0800780d 08013590 1ffe8920     4....x...5.. ...
 80135e8:	08013598 1fff4444 00000000 00000000     .5..DD..........
	...
 8013600:	080135a0 080135a8 080135bc 00000000     .5...5...5......
	...
 8013628:	080135c4 00000000 00000000 00000000     .5..............
	...
 8013658:	40000000 01000101 00010002              ...@........

08013664 <RTC_0_config>:
 8013664:	00000001 00000000                       ........

0801366c <RTC_0_time_alarm_config>:
 801366c:	00000000 07b20004 00000100 07b20000     ................
 801367c:	00007fff                                ....

08013680 <INTERRUPT_0>:
 8013680:	00003f40                                @?..

08013684 <INTERRUPT_1>:
 8013684:	01003f39                                9?..

08013688 <I2C_MASTER_0_sda_pin_config>:
 8013688:	000000d0 00000001 00000000              ............

08013694 <I2C_MASTER_0_scl_pin_config>:
 8013694:	000000d0 00000001 00000000              ............

080136a0 <I2C_MASTER_0_channel_config>:
 80136a0:	000186a0 00000000                       ........

080136a8 <I2C_MASTER_0_config>:
 80136a8:	080136a0 08008605 080085e1 080085c1     .6..............
	...
 80136cc:	04040202 0000ffff                       ........

080136d4 <I2C_MASTER_1_sda_pin_config>:
 80136d4:	000000c8 00000001 00000000              ............

080136e0 <I2C_MASTER_1_scl_pin_config>:
 80136e0:	000000c8 00000001 00000000              ............

080136ec <I2C_MASTER_1_channel_config>:
 80136ec:	00061a80 00000000                       ........

080136f4 <I2C_MASTER_1_config>:
 80136f4:	080136ec 080086b1 0800868d 0800866d     .6..........m...
	...
 8013718:	04040202 0000ffff                       ........

08013720 <sdmmc_block>:
 8013720:	1ffe8a40                                @...

08013724 <DC_DC_EN_OUT_D>:
 8013724:	48028000 00000080 00010000 00000000     ...H............
 8013734:	0000000f                                ....

08013738 <VACUUM_PUMP_OUT_D>:
 8013738:	48028000 00000080 00010000 00000000     ...H............
 8013748:	0000000e                                ....

0801374c <HEADLAMPS_ADJ_PWR_OUT_D>:
 801374c:	48028000 00000080 00010000 00000000     ...H............
 801375c:	0000000d                                ....

08013760 <AC_RADIATOR_OUT_D>:
 8013760:	48028000 00000080 00010000 00000000     ...H............
 8013770:	0000000c                                ....

08013774 <INSTRUMENT_CON_PWR_OUT_D>:
 8013774:	48028000 00000080 00010000 00000000     ...H............
 8013784:	0000000b                                ....

08013788 <ACCEL_CS_OUT>:
 8013788:	48028000 00000080 00010000 00000000     ...H............
 8013798:	0000000a                                ....

0801379c <ELECT_HANDBRAKE_EN_OUT_D>:
 801379c:	48028000 00000000 00000000 00000000     ...H............
 80137ac:	00000008                                ....

080137b0 <MC_CONTACTOR_RELAY_OUT_D>:
 80137b0:	48028000 00000080 00010000 00000000     ...H............
 80137c0:	00000007                                ....

080137c4 <MC_PARK_RELAY_OUT_D>:
 80137c4:	48028000 00000080 00010000 00000000     ...H............
 80137d4:	00000006                                ....

080137d8 <MC_REV_RELAY_OUT_D>:
 80137d8:	48028000 00000080 00010000 00000000     ...H............
 80137e8:	00000005                                ....

080137ec <MC_FWD_RELAY_OUT_D>:
 80137ec:	48028000 00000080 00010000 00000000     ...H............
 80137fc:	00000004                                ....

08013800 <MC_REGEN_RELAY_OUT_D>:
 8013800:	48028000 00000080 00010000 00000000     ...H............
 8013810:	00000003                                ....

08013814 <MC_ELOCK_RELAY_OUT_D>:
 8013814:	48028000 00000080 00010000 00000000     ...H............
 8013824:	00000002                                ....

08013828 <POS_OUT_D>:
 8013828:	48028100 00000080 00010000 00000000     ...H............
 8013838:	0000000f                                ....

0801383c <VCU_FAN_PWR_OUT_D>:
 801383c:	48028100 00000000 00000000 00000000     ...H............
 801384c:	0000000e                                ....

08013850 <AUX_EFUSE_1_OUT_D>:
 8013850:	48028100 00000080 00010000 00000000     ...H............
 8013860:	0000000a                                ....

08013864 <WIPER_PWR_OUT_D>:
 8013864:	48028100 00000080 00010000 00000000     ...H............
 8013874:	00000009                                ....

08013878 <THROTTLE_POT_CS_OUT_D>:
 8013878:	48028100 00000000 00000000 00000000     ...H............
 8013888:	00000008                                ....

0801388c <LIGHTS_PWR_OUT_D>:
 801388c:	48028100 00000080 00010000 00000000     ...H............
 801389c:	00000007                                ....

080138a0 <INFOTAINMENT_PWR_OUT_D>:
 80138a0:	48028100 00000080 00010000 00000000     ...H............
 80138b0:	00000003                                ....

080138b4 <AUDIO_AMP_OUT_D>:
 80138b4:	48028100 00000000 00000000 00000000     ...H............
 80138c4:	00000002                                ....

080138c8 <VACUUM_SENSOR_PWR_OUT_D>:
 80138c8:	48028100 00000080 00010000 00000000     ...H............
 80138d8:	00000001                                ....

080138dc <BRAKE_LIGHT_OUT_D>:
 80138dc:	48028100 00000080 00010000 00000000     ...H............
 80138ec:	00000000                                ....

080138f0 <HORN_PWR_OUT_D>:
 80138f0:	48028400 00000080 00010000 00000000     ...H............
 8013900:	00000001                                ....

08013904 <DOOR_LOCK_OUT_D>:
 8013904:	48028200 00000080 00010000 00000000     ...H............
 8013914:	0000000d                                ....

08013918 <RIGHT_INDICATOR_OUT_D>:
 8013918:	48028600 00000080 00010000 00000000     ...H............
 8013928:	00000003                                ....

0801392c <HIGH_BEAM_OUT_D>:
 801392c:	48028600 00000080 00010000 00000000     ...H............
 801393c:	00000002                                ....

08013940 <LOW_BEAM_OUT_D>:
 8013940:	48028600 00000080 00010000 00000000     ...H............
 8013950:	00000001                                ....

08013954 <REV_LIGHT_OUT_D>:
 8013954:	48028600 00000080 00010000 00000000     ...H............
 8013964:	00000000                                ....

08013968 <ELEC_HANDBRAKE_IN_D>:
 8013968:	48028e00 00000000 00000000 00000000     ...H............
 8013978:	00000009                                ....

0801397c <AUX_ANALOG1_IN_D>:
 801397c:	48028e00 00000000 00000000 00000000     ...H............
 801398c:	00000002                                ....

08013990 <INT_ACCEL_IN_D>:
 8013990:	48028e00 00000000 00000000 00000000     ...H............
 80139a0:	00000000                                ....

080139a4 <CIGARETTE_LIGHTER_PWR_OUT_D>:
 80139a4:	48028300 00000080 00010000 00000000     ...H............
 80139b4:	0000000d                                ....

080139b8 <BUZZER_EN_D>:
 80139b8:	48028300 00000000 00000000 00000000     ...H............
 80139c8:	0000000b                                ....

080139cc <MC_RELAY_PWR_OUT_D>:
 80139cc:	48028300 00000080 00010000 00000000     ...H............
 80139dc:	00000004                                ....

080139e0 <MC_FAN_PWR_OUT_D>:
 80139e0:	48028300 00000080 00010000 00000000     ...H............
 80139f0:	00000003                                ....

080139f4 <VEHICLE_SPEED_PWM_OUT>:
 80139f4:	48028200 00000000 00000000 00000000     ...H............
 8013a04:	0000000c                                ....

08013a08 <VEHICLE_RPM_PWM_OUT>:
 8013a08:	48028200 00000000 00000000 00000000     ...H............
 8013a18:	0000000b                                ....

08013a1c <PWR_WINDOW_OUT_D>:
 8013a1c:	48028200 00000080 00010000 00000000     ...H............
 8013a2c:	00000009                                ....

08013a30 <PWR_STEERING_OUT_D>:
 8013a30:	48028200 00000080 00010000 00000000     ...H............
 8013a40:	00000008                                ....

08013a44 <LEFT_INDICATOR_OUT_D>:
 8013a44:	48028200 00000080 00010000 00000000     ...H............
 8013a54:	00000007                                ....

08013a58 <ADC3_CS_OUT>:
 8013a58:	48028200 00000000 00000000 00000000     ...H............
 8013a68:	00000006                                ....

08013a6c <INPUTS_3V3_PWR_EN>:
 8013a6c:	48028200 00000080 00010000 00000000     ...H............
 8013a7c:	00000003                                ....

08013a80 <COMM_3V3_PWR_EN>:
 8013a80:	48028200 00000080 00010000 00000000     ...H............
 8013a90:	00000002                                ....

08013a94 <SENSOR_3V3_PWR_EN>:
 8013a94:	48028200 00000080 00010000 00000000     ...H............
 8013aa4:	00000000                                ....

08013aa8 <CABIN_LIGHT_OUT_D>:
 8013aa8:	48028500 00000080 00010000 00000000     ...H............
 8013ab8:	00000009                                ....

08013abc <ADC2_CS_OUT>:
 8013abc:	48028500 00000000 00000000 00000000     ...H............
 8013acc:	00000006                                ....

08013ad0 <ADC1_CS_OUT>:
 8013ad0:	48028500 00000000 00000000 00000000     ...H............
 8013ae0:	00000005                                ....

08013ae4 <SPEED_SENSOR_IN_D>:
 8013ae4:	48028f00 00000000 00000000 00000000     ...H............
 8013af4:	0000000d                                ....

08013af8 <VACUUM_SENSOR_IN_D>:
 8013af8:	48028f00 00000000 00000000 00000000     ...H............
 8013b08:	0000000c                                ....

08013b0c <BRAKE_OIL_IN_D>:
 8013b0c:	48028f00 00000000 00000000 00000000     ...H............
 8013b1c:	00000009                                ....

08013b20 <CHARGING_STARTED_IN_D>:
 8013b20:	48028f00 00000000 00000000 00000000     ...H............
 8013b30:	00000008                                ....

08013b34 <CHARGER_CONNECTED_IN_D>:
 8013b34:	48028f00 00000000 00000000 00000000     ...H............
 8013b44:	00000007                                ....

08013b48 <IGNI_POS2_IN_D>:
 8013b48:	48028f00 00000000 00000000 00000000     ...H............
 8013b58:	00000006                                ....

08013b5c <IGNI_POS1_IN_D>:
 8013b5c:	48028f00 00000000 00000000 00000000     ...H............
 8013b6c:	00000005                                ....

08013b70 <ACC_PEDAL_SW_IN_D>:
 8013b70:	48028f00 00000000 00000000 00000000     ...H............
 8013b80:	00000004                                ....

08013b84 <HANDBRAKE_IN_D>:
 8013b84:	48028f00 00000010 00000000 00000000     ...H............
 8013b94:	00000003                                ....

08013b98 <BRAKE_SW_IN_D>:
 8013b98:	48028f00 00000008 00000000 00000000     ...H............
 8013ba8:	00000002                                ....

08013bac <DOOR_LOCK_PWR_OUT_D>:
 8013bac:	48028400 00000080 00010000 00000000     ...H............
 8013bbc:	00000000                                ....

08013bc0 <GEAR_SW1_IN_D>:
 8013bc0:	48028e00 00000000 00000000 00000000     ...H............
 8013bd0:	0000000c                                ....

08013bd4 <GEAR_SW2_IN_D>:
 8013bd4:	48028e00 00000000 00000000 00000000     ...H............
 8013be4:	0000000d                                ....

08013be8 <GEAR_SW3_IN_D>:
 8013be8:	48028e00 00000000 00000000 00000000     ...H............
 8013bf8:	0000000e                                ....

08013bfc <GEAR_SW4_IN_D>:
 8013bfc:	48028e00 00000000 00000000 00000000     ...H............
 8013c0c:	0000000f                                ....

08013c10 <DIGITAL_IO_5>:
 8013c10:	48028500 00000000 00000000 00000000     ...H............
 8013c20:	00000007                                ....

08013c24 <DIGITAL_IO_6>:
 8013c24:	48028500 00000000 00000000 00000000     ...H............
 8013c34:	00000008                                ....

08013c38 <CTS>:
 8013c38:	48028400 00000000 00000000 00000000     ...H............
 8013c48:	00000004                                ....

08013c4c <RTS>:
 8013c4c:	48028400 00000080 00010000 00000000     ...H............
 8013c5c:	00000005                                ....

08013c60 <DIGITAL_IO_PWRKEY>:
 8013c60:	48028400 00000080 00010000 00000000     ...H............
 8013c70:	00000007                                ....

08013c74 <MODULE_4G_EN_OUT_D>:
 8013c74:	48028400 00000080 00010000 00000000     ...H............
 8013c84:	00000002 01010230 00010000 00000000     ....0...........
 8013c94:	00010000 01010102                       ........

08013c9c <CAN_NODE_0_gpio_out>:
 8013c9c:	48028100 0000000c                       ...H....

08013ca4 <CAN_NODE_0_gpio_out_config>:
 8013ca4:	00000090 00000001 00000002              ............

08013cb0 <CAN_NODE_0_gpio_in>:
 8013cb0:	48028100 0000000d                       ...H....

08013cb8 <CAN_NODE_0_gpio_in_config>:
	...

08013cc4 <CAN_NODE_0_BitTimeConfig>:
 8013cc4:	08954400 0003d090 00011f40              .D......@...

08013cd0 <CAN_NODE_0_sr>:
 8013cd0:	00000000                                ....

08013cd4 <CAN_NODE_0_LMO_01_Config>:
 8013cd4:	1ffe8ab8 01000013 00000000              ............

08013ce0 <CAN_NODE_0_LMO_02_Config>:
 8013ce0:	1ffe8ad8 01000012 00000000              ............

08013cec <CAN_NODE_0_LMO_03_Config>:
 8013cec:	1ffe8af8 01000037 00000000              ....7.......

08013cf8 <CAN_NODE_0_LMO_04_Config>:
 8013cf8:	1ffe8b18 0100002f 00000000              ..../.......

08013d04 <CAN_NODE_0_LMO_05_Config>:
 8013d04:	1ffe8b38 01000030 00000000              8...0.......

08013d10 <CAN_NODE_0_LMO_06_Config>:
 8013d10:	1ffe8b58 01000031 00000000              X...1.......

08013d1c <CAN_NODE_0_LMO_07_Config>:
 8013d1c:	1ffe8b78 01000028 00000000              x...(.......

08013d28 <CAN_NODE_0_LMO_08_Config>:
 8013d28:	1ffe8b98 01000029 00000000              ....).......

08013d34 <CAN_NODE_0_LMO_09_Config>:
 8013d34:	1ffe8bb8 0000002a 00000000              ....*.......

08013d40 <CAN_NODE_0_LMO_10_Config>:
 8013d40:	1ffe8bd8 0000000f 00000000              ............

08013d4c <CAN_NODE_0_LMO_11_Config>:
 8013d4c:	1ffe8bf8 00000032 00000000              ....2.......

08013d58 <CAN_NODE_0_LMO_12_Config>:
 8013d58:	1ffe8c18 00000035 00000000              ....5.......

08013d64 <CAN_NODE_0_LMO_13_Config>:
 8013d64:	1ffe8c38 00000010 00000001              8...........

08013d70 <CAN_NODE_0_LMO_14_Config>:
 8013d70:	1ffe8c58 00000034 00000001              X...4.......

08013d7c <CAN_NODE_0_LMO_15_Config>:
 8013d7c:	1ffe8c78 00000011 00000001              x...........

08013d88 <CAN_NODE_0_LMO_16_Config>:
 8013d88:	1ffe8c98 0100000a 00000000              ............

08013d94 <CAN_NODE_0_LMO_17_Config>:
 8013d94:	1ffe8cb8 00000004 00000001              ............

08013da0 <CAN_NODE_0_LMO_18_Config>:
 8013da0:	1ffe8cd8 0000000b 00000001              ............

08013dac <CAN_NODE_0_LMO_19_Config>:
 8013dac:	1ffe8cf8 00000003 00000001              ............

08013db8 <CAN_NODE_0_LMO_20_Config>:
 8013db8:	1ffe8d18 0000000c 00000001              ............

08013dc4 <CAN_NODE_0_LMO_21_Config>:
 8013dc4:	1ffe8d38 00000002 00000000              8...........

08013dd0 <CAN_NODE_0_LMO_22_Config>:
 8013dd0:	1ffe8d58 00000001 00000000              X...........

08013ddc <CAN_NODE_0_LMO_23_Config>:
 8013ddc:	1ffe8d78 0000000d 00000000              x...........

08013de8 <CAN_NODE_0_LMO_24_Config>:
 8013de8:	1ffe8d98 00000000 00000000              ............

08013df4 <CAN_NODE_0_LMO_25_Config>:
 8013df4:	1ffe8db8 0000003b 00000000              ....;.......

08013e00 <CAN_NODE_0_LMO_26_Config>:
 8013e00:	1ffe8dd8 0000003a 00000000              ....:.......

08013e0c <CAN_NODE_0_LMO_27_Config>:
 8013e0c:	1ffe8df8 0000001b 00000000              ............

08013e18 <CAN_NODE_0_LMO_28_Config>:
 8013e18:	1ffe8e18 0000003f 00000000              ....?.......

08013e24 <CAN_NODE_0_LMO_29_Config>:
 8013e24:	1ffe8e38 0000001c 00000000              8...........

08013e30 <CAN_NODE_0_LMO_30_Config>:
 8013e30:	1ffe8e58 0000003e 00000000              X...>.......

08013e3c <CAN_NODE_0_LMO_31_Config>:
 8013e3c:	1ffe8e78 01000019 00000000              x...........

08013e48 <CAN_NODE_0_LMO_32_Config>:
 8013e48:	1ffe8e98 0100001a 00000000              ............

08013e54 <CAN_NODE_0>:
 8013e54:	1ffe8aa4 48014300 08013cc4 08013cd4     .....C.H.<...<..
 8013e64:	08013ce0 08013cec 08013cf8 08013d04     .<...<...<...=..
 8013e74:	08013d10 08013d1c 08013d28 08013d34     .=...=..(=..4=..
 8013e84:	08013d40 08013d4c 08013d58 08013d64     @=..L=..X=..d=..
 8013e94:	08013d70 08013d7c 08013d88 08013d94     p=..|=...=...=..
 8013ea4:	08013da0 08013dac 08013db8 08013dc4     .=...=...=...=..
 8013eb4:	08013dd0 08013ddc 08013de8 08013df4     .=...=...=...=..
 8013ec4:	08013e00 08013e0c 08013e18 08013e24     .>...>...>..$>..
 8013ed4:	08013e30 08013e3c 08013e48 08013cd0     0>..<>..H>...<..
 8013ee4:	08013c9c 08013ca4 08013cb0 08013cb8     .<...<...<...<..
 8013ef4:	00200102 00000000                       .. .....

08013efc <CAN_NODE_1_gpio_out>:
 8013efc:	48028300 00000007                       ...H....

08013f04 <CAN_NODE_1_gpio_out_config>:
 8013f04:	00000090 00000001 00000002              ............

08013f10 <CAN_NODE_1_gpio_in>:
 8013f10:	48028300 00000008                       ...H....

08013f18 <CAN_NODE_1_gpio_in_config>:
	...

08013f24 <CAN_NODE_1_BitTimeConfig>:
 8013f24:	08954400 0007a120 00011f40              .D.. ...@...

08013f30 <CAN_NODE_1_sr>:
 8013f30:	00000000                                ....

08013f34 <CAN_NODE_1_LMO_01_Config>:
 8013f34:	1ffe8eb8 0100003d 00000000              ....=.......

08013f40 <CAN_NODE_1_LMO_02_Config>:
 8013f40:	1ffe8ed8 0000001d 00000001              ............

08013f4c <CAN_NODE_1_LMO_03_Config>:
 8013f4c:	1ffe8ef8 00000014 00000001              ............

08013f58 <CAN_NODE_1_LMO_04_Config>:
 8013f58:	1ffe8f18 00000017 00000001              ............

08013f64 <CAN_NODE_1_LMO_05_Config>:
 8013f64:	1ffe8f38 00000018 00000001              8...........

08013f70 <CAN_NODE_1_LMO_06_Config>:
 8013f70:	1ffe8f58 00000015 00000001              X...........

08013f7c <CAN_NODE_1_LMO_07_Config>:
 8013f7c:	1ffe8f78 00000016 00000000              x...........

08013f88 <CAN_NODE_1_LMO_08_Config>:
 8013f88:	1ffe8f98 00000006 00000000              ............

08013f94 <CAN_NODE_1_LMO_09_Config>:
 8013f94:	1ffe8fb8 00000005 00000001              ............

08013fa0 <CAN_NODE_1_LMO_10_Config>:
 8013fa0:	1ffe8fd8 00000008 00000001              ............

08013fac <CAN_NODE_1_LMO_11_Config>:
 8013fac:	1ffe8ff8 01000007 00000000              ............

08013fb8 <CAN_NODE_1_LMO_12_Config>:
 8013fb8:	1ffe9018 0100003c 00000000              ....<.......

08013fc4 <CAN_NODE_1_LMO_13_Config>:
 8013fc4:	1ffe9038 01000009 00000000              8...........

08013fd0 <CAN_NODE_1_LMO_14_Config>:
 8013fd0:	1ffe9058 00000024 00000001              X...$.......

08013fdc <CAN_NODE_1_LMO_15_Config>:
 8013fdc:	1ffe9078 01000025 00000000              x...%.......

08013fe8 <CAN_NODE_1_LMO_16_Config>:
 8013fe8:	1ffe9098 00000026 00000000              ....&.......

08013ff4 <CAN_NODE_1_LMO_17_Config>:
 8013ff4:	1ffe90b8 00000027 00000000              ....'.......

08014000 <CAN_NODE_1_LMO_18_Config>:
 8014000:	1ffe90d8 0000001e 00000000              ............

0801400c <CAN_NODE_1_LMO_19_Config>:
 801400c:	1ffe90f8 0000001f 00000000              ............

08014018 <CAN_NODE_1_LMO_20_Config>:
 8014018:	1ffe9118 00000020 00000001              .... .......

08014024 <CAN_NODE_1_LMO_21_Config>:
 8014024:	1ffe9138 00000021 00000000              8...!.......

08014030 <CAN_NODE_1_LMO_22_Config>:
 8014030:	1ffe9158 00000022 00000000              X...".......

0801403c <CAN_NODE_1_LMO_23_Config>:
 801403c:	1ffe9178 00000023 00000000              x...#.......

08014048 <CAN_NODE_1>:
 8014048:	1ffe8aa4 48014400 08013f24 08013f34     .....D.H$?..4?..
 8014058:	08013f40 08013f4c 08013f58 08013f64     @?..L?..X?..d?..
 8014068:	08013f70 08013f7c 08013f88 08013f94     p?..|?...?...?..
 8014078:	08013fa0 08013fac 08013fb8 08013fc4     .?...?...?...?..
 8014088:	08013fd0 08013fdc 08013fe8 08013ff4     .?...?...?...?..
 8014098:	08014000 0801400c 08014018 08014024     .@...@...@..$@..
 80140a8:	08014030 0801403c 00000000 00000000     0@..<@..........
	...
 80140d4:	08013f30 08013efc 08013f04 08013f10     0?...>...?...?..
 80140e4:	08013f18 00170201 00000000              .?..........

080140f0 <CAN_NODE_2_gpio_out>:
 80140f0:	48028500 0000000b                       ...H....

080140f8 <CAN_NODE_2_gpio_out_config>:
 80140f8:	000000a0 00000001 00000002              ............

08014104 <CAN_NODE_2_gpio_in>:
 8014104:	48028500 0000000a                       ...H....

0801410c <CAN_NODE_2_gpio_in_config>:
	...

08014118 <CAN_NODE_2_BitTimeConfig>:
 8014118:	08954400 0007a120 00011f40              .D.. ...@...

08014124 <CAN_NODE_2_sr>:
 8014124:	00000000                                ....

08014128 <CAN_NODE_2_LMO_01_Config>:
 8014128:	1ffe9198 00000036 00000000              ....6.......

08014134 <CAN_NODE_2_LMO_02_Config>:
 8014134:	1ffe91b8 00000039 00000000              ....9.......

08014140 <CAN_NODE_2_LMO_03_Config>:
 8014140:	1ffe91d8 00000038 00000000              ....8.......

0801414c <CAN_NODE_2_LMO_04_Config>:
 801414c:	1ffe91f8 0000000e 00000000              ............

08014158 <CAN_NODE_2_LMO_05_Config>:
 8014158:	1ffe9218 00000033 00000000              ....3.......

08014164 <CAN_NODE_2>:
 8014164:	1ffe8aa4 48014700 08014118 08014128     .....G.H.A..(A..
 8014174:	08014134 08014140 0801414c 08014158     4A..@A..LA..XA..
	...
 80141f0:	08014124 080140f0 080140f8 08014104     $A...@...@...A..
 8014200:	0801410c 00050500 00000000 512b5441     .A..........AT+Q
 8014210:	43535047 223d4746 7074756f 2274726f     GPSCFG="outport"
 8014220:	6f6e222c 0d22656e 0000000a 512b5441     ,"none".....AT+Q
 8014230:	3d535047 000a0d31 5047512b 434f4c53     GPS=1...+QGPSLOC
 8014240:	0000003a 0000002c 512b5441 4c535047     :...,...AT+QGPSL
 8014250:	313d434f 00000a0d                       OC=1....

08014258 <vcu_fleet_fleet_10_sec_field_info>:
 8014258:	40001204 40041208 4008110c 400c1210     ...@...@...@...@
 8014268:	40101214 40141218 4018121c 401c1220     ...@...@...@ ..@
 8014278:	40201124 40241228 4028122c 402c1230     $. @(.$@,.(@0.,@
 8014288:	40301234 40341138 4038123c 403c1240     4.0@8.4@<.8@@.<@
 8014298:	40401244 40441248 4048124c 404c1250     D.@@H.D@L.H@P.L@
 80142a8:	40501254 40541258 4058125c 405c1260     T.P@X.T@\.X@`.\@
 80142b8:	40601164 00000000                       d.`@....

080142c0 <vcu_fleet_fleet_10_sec_submsg_info>:
 80142c0:	00000000                                ....

080142c4 <vcu_fleet_fleet_10_sec_msg>:
 80142c4:	08014258 080142c0 00000000 00000000     XB...B..........
 80142d4:	00000019 00000019 544d512b 54415453     ........+QMTSTAT
 80142e4:	0000003a 544d512b 56434552 0000003a     :...+QMTRECV:...
 80142f4:	444e4951 4d53203a 4f442053 0a0d454e     QIND: SMS DONE..
 8014304:	00000000 0d594452 0000000a 45574f50     ....RDY.....POWE
 8014314:	20444552 4e574f44 00000a0d 544d512b     RED DOWN....+QMT
 8014324:	4e45504f 0000003a 544d512b 45425550     OPEN:...+QMTPUBE
 8014334:	00003a58 544d512b 4e4e4f43 0000003a     X:..+QMTCONN:...
 8014344:	544d512b 43534944 0000003a 544d512b     +QMTDISC:...+QMT
 8014354:	3a425553 00000000 454d432b 52524520     SUB:....+CME ERR
 8014364:	0000524f 0000003a 534d432b 52524520     OR..:...+CMS ERR
 8014374:	0000524f 00000000 00000a0d 62737522     OR.........."usb
 8014384:	0d227461 0000000a 0d302c30 0000000a     at".....0,0.....
 8014394:	00000000 63657551 0d6c6574 0000000a     ....Quectel.....
 80143a4:	0d302c31 0000000a 00000000 0000002c     1,0.........,...
 80143b4:	44414552 00000059 00000022 00302c30     READY..."...0,0.
 80143c4:	00312c30 00322c30 00332c30 00342c30     0,1.0,2.0,3.0,4.
 80143d4:	00352c30 222c6425 255f7325 0a0d2273     0,5.%d,"%s_%s"..
 80143e4:	00000000 72616d73 74694b74 00000000     ....smartKit....
 80143f4:	0a0d6425 00000000 312c6425 2c64252c     %d......%d,1,%d,
 8014404:	73252c30 0d64252c 0000000a 312c6425     0,%s,%d.....%d,1
 8014414:	2c73252c 0a0d6425 00000000 252c7325     ,%s,%d......%s,%
 8014424:	30362c64 0a0d312c 00000000 63616322     d,60,1......"cac
 8014434:	2e747265 226d6570 00000000 696c6322     ert.pem"...."cli
 8014444:	63746e65 2e747265 226d6570 00000000     entcert.pem"....
 8014454:	696c6322 6b746e65 702e7965 00226d65     "clientkey.pem".
 8014464:	0a0d7325 00000000 252c6425 00000073     %s......%d,%s...
 8014474:	37796122 7865716f 35326b62 612d6c73     "ay7oqexbk25sl-a
 8014484:	692e7374 612e746f 6f732d70 2d687475     ts.iot.ap-south-
 8014494:	6d612e31 6e6f7a61 2e737761 226d6f63     1.amazonaws.com"
 80144a4:	3838382c 000a0d33 63616322 22747265     ,8883..."cacert"
 80144b4:	222c322c 65636163 702e7472 0d226d65     ,2,"cacert.pem".
 80144c4:	0000000a 696c6322 6b746e65 2c227965     ...."clientkey",
 80144d4:	63222c32 6e65696c 79656b74 6d65702e     2,"clientkey.pem
 80144e4:	000a0d22 63657322 6576656c 322c226c     "..."seclevel",2
 80144f4:	0a0d322c 00000000 6c737322 73726576     ,2......"sslvers
 8014504:	226e6f69 342c322c 00000a0d 70696322     ion",2,4...."cip
 8014514:	73726568 65746975 2c322c22 46467830     hersuite",2,0xFF
 8014524:	0a0d4646 00000000 6e676922 6c65726f     FF......"ignorel
 8014534:	6c61636f 656d6974 2c322c22 000a0d31     ocaltime",2,1...
 8014544:	4c535322 64252c22 322c312c 00000a0d     "SSL",%d,1,2....
 8014554:	696c6322 63746e65 22747265 222c322c     "clientcert",2,"
 8014564:	65696c63 6563746e 702e7472 0d226d65     clientcert.pem".
 8014574:	0000000a 74756f22 74726f70 6e222c22     ...."outport","n
 8014584:	22656e6f 00000a0d 65472f22 662f3376     one"...."/Gev3/f
 8014594:	7465656c 00000022 65727473 66206d61     leet"...stream f
 80145a4:	006c6c75 65206f69 726f7272 00000000     ull.io error....
 80145b4:	61727261 616d2079 69732078 6520657a     array max size e
 80145c4:	65656378 00646564 6e6f6e28 00002965     xceeded.(none)..
 80145d4:	61766e69 2064696c 6c656966 79742064     invalid field ty
 80145e4:	00006570 6c6c6163 6b636162 72726520     pe..callback err
 80145f4:	0000726f 7373696d 20676e69 75716572     or..missing requ
 8014604:	64657269 65696620 0000646c 61766e69     ired field..inva
 8014614:	2064696c 65747865 6f69736e 0000006e     lid extension...
 8014624:	6d627573 73206773 20657a69 6e616863     submsg size chan
 8014634:	00646567 61766e69 2064696c 61746164     ged.invalid data
 8014644:	7a69735f 00000065 65747962 69732073     _size...bytes si
 8014654:	6520657a 65656378 00646564 6f72657a     ze exceeded.zero
 8014664:	6e656c2d 20687467 69727473 0000676e     -length string..
 8014674:	65746e75 6e696d72 64657461 72747320     unterminated str
 8014684:	00676e69 61766e69 2064696c 6c656966     ing.invalid fiel
 8014694:	65642064 69726373 726f7470 00000000     d descriptor....
 80146a4:	45564144 50504120 6e692073 61697469     DAVE APPs initia
 80146b4:	617a696c 6e6f6974 69616620 0064656c     lization failed.
 80146c4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80146d4:	2a2a2a2a 2a2a2a2a 69206e69 7475706e     ********in input
 80146e4:	70616320 65727574 2a2a2a2a 2a2a2a2a      capture********
 80146f4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014704:	0000000a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 8014714:	2a2a2a2a 2a2a2a2a 2a2a2a2a 74697865     ************exit
 8014724:	706e6920 63207475 75747061 2a2a6572      input capture**
 8014734:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014744:	2a2a2a2a 000a2a2a 2a2a2a2a 2a2a2a2a     ******..********
 8014754:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014764:	70206e69 65636f72 69207373 7475706e     in process input
 8014774:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014784:	2a2a2a2a 2a2a2a2a 0000000a 2a2a2a2a     ********....****
 8014794:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80147a4:	652a2a2a 20746978 636f7270 20737365     ***exit process 
 80147b4:	75706e69 2a2a2a74 2a2a2a2a 2a2a2a2a     input***********
 80147c4:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
 80147d4:	00000000 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 80147e4:	2a2a2a2a 2a2a2a2a 692a2a2a 6376206e     ***********in vc
 80147f4:	756f2075 74757074 2a2a2a2a 2a2a2a2a     u output********
 8014804:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014814:	2a2a2a2a 00000a2a 2a2a2a2a 2a2a2a2a     *****...********
 8014824:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014834:	74697865 75637620 74756f20 2a747570     exit vcu output*
 8014844:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 8014854:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000a2a     *************...
 8014864:	00676f6c 00000000 00000043              log.....C...

08014870 <_global_impure_ptr>:
 8014870:	1fff4300                                .C..

08014874 <_DAYS_BEFORE_MONTH>:
 8014874:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 8014884:	00000078 00000097 000000b5 000000d4     x...............
 8014894:	000000f3 00000111 00000130 0000014e     ........0...N...

080148a4 <DAYS_IN_MONTH>:
 80148a4:	0000001f 0000001c 0000001f 0000001e     ................
 80148b4:	0000001f 0000001e 0000001f 0000001f     ................
 80148c4:	0000001e 0000001f 0000001e 0000001f     ................

080148d4 <_ctype_>:
 80148d4:	20202000 20202020 28282020 20282828     .         ((((( 
 80148e4:	20202020 20202020 20202020 20202020                     
 80148f4:	10108820 10101010 10101010 10101010      ...............
 8014904:	04040410 04040404 10040404 10101010     ................
 8014914:	41411010 41414141 01010101 01010101     ..AAAAAA........
 8014924:	01010101 01010101 01010101 10101010     ................
 8014934:	42421010 42424242 02020202 02020202     ..BBBBBB........
 8014944:	02020202 02020202 02020202 10101010     ................
 8014954:	00000020 00000000 00000000 00000000      ...............
	...

080149d8 <__sf_fake_stdin>:
	...

080149f8 <__sf_fake_stdout>:
	...

08014a18 <__sf_fake_stderr>:
	...

08014a38 <__month_lengths>:
 8014a38:	0000001f 0000001c 0000001f 0000001e     ................
 8014a48:	0000001f 0000001e 0000001f 0000001f     ................
 8014a58:	0000001e 0000001f 0000001e 0000001f     ................
 8014a68:	0000001f 0000001d 0000001f 0000001e     ................
 8014a78:	0000001f 0000001e 0000001f 0000001f     ................
 8014a88:	0000001e 0000001f 0000001e 0000001f     ................
 8014a98:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 8014aa8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 8014ab8:	31300046 35343332 39383736 64636261     F.0123456789abcd
 8014ac8:	00006665                                ef..
