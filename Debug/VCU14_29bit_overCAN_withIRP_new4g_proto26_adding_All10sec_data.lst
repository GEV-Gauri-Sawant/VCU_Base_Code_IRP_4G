
VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000145c4  08000000  0c000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  080145c4  0c0145c4  0001c5c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 Stack         00000800  1ffe8000  1ffe8000  00030000  2**0
                  ALLOC
  3 .data         0000bb78  1ffe8800  0c0145cc  00020800  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000f2c  1fff4378  0c020144  0002c378  2**3
                  ALLOC
  5 .no_init      00000014  2003ffc0  2003ffc0  0002ffc0  2**2
                  ALLOC
  6 .stab         0000009c  00000000  00000000  0002c378  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      0000014d  00000000  00000000  0002c414  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00002aa0  00000000  00000000  0002c568  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0007dc33  00000000  00000000  0002f008  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c031  00000000  00000000  000acc3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001d9f9  00000000  00000000  000b8c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000b8a4  00000000  00000000  000d6668  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00018e41  00000000  00000000  000e1f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001583d  00000000  00000000  000fad4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002498  00000000  00000000  0011058a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .build_attributes 0000209d  00000000  00000000  00112a22  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

08000000 <__Vectors>:
 8000000:	00 88 fe 1f 01 02 00 08 25 02 01 08 99 02 00 08     ........%.......
 8000010:	99 02 00 08 99 02 00 08 99 02 00 08 00 00 00 00     ................
	...
 800002c:	99 02 00 08 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800003c:	25 6a 00 08 99 02 00 08 99 02 00 08 99 02 00 08     %j..............
 800004c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800005c:	99 02 00 08 99 02 00 08 00 00 00 00 00 00 00 00     ................
 800006c:	00 00 00 00 99 02 00 08 00 00 00 00 99 02 00 08     ................
 800007c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800008c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800009c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000dc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000ec:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80000fc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800010c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800011c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800012c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800013c:	99 02 00 08 0d 09 00 08 99 02 00 08 99 02 00 08     ................
 800014c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800015c:	99 02 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
 800016c:	00 00 00 00 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800017c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800018c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 800019c:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001ac:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001bc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001cc:	99 02 00 08 99 02 00 08 99 02 00 08 99 02 00 08     ................
 80001dc:	00 00 00 00 99 02 00 08 fd 83 00 08 99 02 00 08     ................
 80001ec:	99 02 00 08 99 02 00 08 00 00 00 00 0d 84 00 08     ................
 80001fc:	00 00 00 00                                         ....

08000200 <Reset_Handler>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000200:	f8df d074 	ldr.w	sp, [pc, #116]	; 8000278 <__zero_table_end__>

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 8000204:	481d      	ldr	r0, [pc, #116]	; (800027c <__zero_table_end__+0x4>)
    blx  r0
 8000206:	4780      	blx	r0
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000208:	4c1d      	ldr	r4, [pc, #116]	; (8000280 <__zero_table_end__+0x8>)
	ldr	r5, =__copy_table_end__
 800020a:	4d1e      	ldr	r5, [pc, #120]	; (8000284 <__zero_table_end__+0xc>)

.L_loop0:
	cmp	r4, r5
 800020c:	42ac      	cmp	r4, r5
	bge	.L_loop0_done
 800020e:	da09      	bge.n	8000224 <Reset_Handler+0x24>
	ldr	r1, [r4]
 8000210:	6821      	ldr	r1, [r4, #0]
	ldr	r2, [r4, #4]
 8000212:	6862      	ldr	r2, [r4, #4]
	ldr	r3, [r4, #8]
 8000214:	68a3      	ldr	r3, [r4, #8]

.L_loop0_0:
	subs	r3, #4
 8000216:	3b04      	subs	r3, #4
	ittt	ge
 8000218:	bfa2      	ittt	ge
	ldrge	r0, [r1, r3]
 800021a:	58c8      	ldrge	r0, [r1, r3]
	strge	r0, [r2, r3]
 800021c:	50d0      	strge	r0, [r2, r3]
	bge	.L_loop0_0
 800021e:	e7fa      	bge.n	8000216 <Reset_Handler+0x16>

	adds	r4, #12
 8000220:	340c      	adds	r4, #12
	b	.L_loop0
 8000222:	e7f3      	b.n	800020c <Reset_Handler+0xc>
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <__zero_table_end__+0x10>)
	ldr	r4, =__zero_table_end__
 8000226:	4c19      	ldr	r4, [pc, #100]	; (800028c <__zero_table_end__+0x14>)

.L_loop2:
	cmp	r3, r4
 8000228:	42a3      	cmp	r3, r4
	bge	.L_loop2_done
 800022a:	da08      	bge.n	800023e <Reset_Handler+0x3e>
	ldr	r1, [r3]
 800022c:	6819      	ldr	r1, [r3, #0]
	ldr	r2, [r3, #4]
 800022e:	685a      	ldr	r2, [r3, #4]
	movs	r0, 0
 8000230:	2000      	movs	r0, #0

.L_loop2_0:
	subs	r2, #4
 8000232:	3a04      	subs	r2, #4
	itt	ge
 8000234:	bfa4      	itt	ge
	strge	r0, [r1, r2]
 8000236:	5088      	strge	r0, [r1, r2]
	bge	.L_loop2_0
 8000238:	e7fb      	bge.n	8000232 <Reset_Handler+0x32>

	adds	r3, #8
 800023a:	3308      	adds	r3, #8
	b	.L_loop2
 800023c:	e7f4      	b.n	8000228 <Reset_Handler+0x28>
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 800023e:	4814      	ldr	r0, [pc, #80]	; (8000290 <__zero_table_end__+0x18>)
    blx  r0
 8000240:	4780      	blx	r0
#endif

    ldr  r0, =main
 8000242:	4814      	ldr	r0, [pc, #80]	; (8000294 <__zero_table_end__+0x1c>)
    blx  r0
 8000244:	4780      	blx	r0
	...

08000248 <__copy_table_start__>:
 8000248:	0c0145cc 	.word	0x0c0145cc
 800024c:	1ffe8800 	.word	0x1ffe8800
 8000250:	0000bb78 	.word	0x0000bb78
 8000254:	0c0145cc 	.word	0x0c0145cc
 8000258:	1ffe8800 	.word	0x1ffe8800
 800025c:	00000000 	.word	0x00000000

08000260 <__copy_table_end__>:
 8000260:	1fff4378 	.word	0x1fff4378
 8000264:	00000f2c 	.word	0x00000f2c
 8000268:	20000000 	.word	0x20000000
 800026c:	00000000 	.word	0x00000000
 8000270:	20000000 	.word	0x20000000
 8000274:	00000000 	.word	0x00000000

08000278 <__zero_table_end__>:
/* Reset Handler */
    .thumb_func
    .globl  Reset_Handler
    .type   Reset_Handler, %function
Reset_Handler:
    ldr sp,=__initial_sp
 8000278:	1ffe8800 	.word	0x1ffe8800

#ifndef __SKIP_SYSTEM_INIT
    ldr  r0, =SystemInit
 800027c:	08001e21 	.word	0x08001e21
 *    offset 4: VMA of start of a section to copy to
 *    offset 8: size of the section to copy. Must be multiply of 4
 *
 *  All addresses must be aligned to 4 bytes boundary.
 */
	ldr	r4, =__copy_table_start__
 8000280:	08000248 	.word	0x08000248
	ldr	r5, =__copy_table_end__
 8000284:	08000260 	.word	0x08000260
 *    offset 4: Size of this BSS section. Must be multiply of 4
 *
 *  Define __SKIP_BSS_CLEAR to disable zeroing uninitialzed data in startup.
 */    
#ifndef __SKIP_BSS_CLEAR
	ldr	r3, =__zero_table_start__
 8000288:	08000260 	.word	0x08000260
	ldr	r4, =__zero_table_end__
 800028c:	08000278 	.word	0x08000278
	b	.L_loop2
.L_loop2_done:    
#endif /* __SKIP_BSS_CLEAR */
   
#ifndef __SKIP_LIBC_INIT_ARRAY
    ldr  r0, =__libc_init_array
 8000290:	080116f1 	.word	0x080116f1
    blx  r0
#endif

    ldr  r0, =main
 8000294:	080100c5 	.word	0x080100c5

08000298 <BusFault_Handler>:
	.align	1
    .thumb_func
    .weak Default_Handler
    .type Default_Handler, %function
Default_Handler:
    b .
 8000298:	e7fe      	b.n	8000298 <BusFault_Handler>
	...

0800029c <tm_sysTickCallback>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void tm_sysTickCallback(void)
{
 800029c:	b480      	push	{r7}
 800029e:	af00      	add	r7, sp, #0
	timerCount++;
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <tm_sysTickCallback+0x70>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	3301      	adds	r3, #1
 80002a6:	4a19      	ldr	r2, [pc, #100]	; (800030c <tm_sysTickCallback+0x70>)
 80002a8:	6013      	str	r3, [r2, #0]

	if(gu32_responseCount > 0)
 80002aa:	4b19      	ldr	r3, [pc, #100]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d004      	beq.n	80002bc <tm_sysTickCallback+0x20>
	{
		gu32_responseCount--;
 80002b2:	4b17      	ldr	r3, [pc, #92]	; (8000310 <tm_sysTickCallback+0x74>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	3b01      	subs	r3, #1
 80002b8:	4a15      	ldr	r2, [pc, #84]	; (8000310 <tm_sysTickCallback+0x74>)
 80002ba:	6013      	str	r3, [r2, #0]
	}
	if(gu32_resetCounter > 0)
 80002bc:	4b15      	ldr	r3, [pc, #84]	; (8000314 <tm_sysTickCallback+0x78>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d004      	beq.n	80002ce <tm_sysTickCallback+0x32>
	{
		gu32_resetCounter--;
 80002c4:	4b13      	ldr	r3, [pc, #76]	; (8000314 <tm_sysTickCallback+0x78>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	3b01      	subs	r3, #1
 80002ca:	4a12      	ldr	r2, [pc, #72]	; (8000314 <tm_sysTickCallback+0x78>)
 80002cc:	6013      	str	r3, [r2, #0]
	}

	if(gu32_4gCounter > 0)
 80002ce:	4b12      	ldr	r3, [pc, #72]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d004      	beq.n	80002e0 <tm_sysTickCallback+0x44>
	{
		gu32_4gCounter--;
 80002d6:	4b10      	ldr	r3, [pc, #64]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	3b01      	subs	r3, #1
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <tm_sysTickCallback+0x7c>)
 80002de:	6013      	str	r3, [r2, #0]
	}

	if(gu32_10s4gCounter > 0)
 80002e0:	4b0e      	ldr	r3, [pc, #56]	; (800031c <tm_sysTickCallback+0x80>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d004      	beq.n	80002f2 <tm_sysTickCallback+0x56>
	{
		gu32_10s4gCounter--;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <tm_sysTickCallback+0x80>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	3b01      	subs	r3, #1
 80002ee:	4a0b      	ldr	r2, [pc, #44]	; (800031c <tm_sysTickCallback+0x80>)
 80002f0:	6013      	str	r3, [r2, #0]
	}

	if(gu32_3s4gCounter > 0)
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <tm_sysTickCallback+0x84>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d004      	beq.n	8000304 <tm_sysTickCallback+0x68>
	{
		gu32_3s4gCounter--;
 80002fa:	4b09      	ldr	r3, [pc, #36]	; (8000320 <tm_sysTickCallback+0x84>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	3b01      	subs	r3, #1
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <tm_sysTickCallback+0x84>)
 8000302:	6013      	str	r3, [r2, #0]
	}
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr
 800030c:	1fff4378 	.word	0x1fff4378
 8000310:	1fff438c 	.word	0x1fff438c
 8000314:	1fff437c 	.word	0x1fff437c
 8000318:	1fff4380 	.word	0x1fff4380
 800031c:	1fff4384 	.word	0x1fff4384
 8000320:	1fff4388 	.word	0x1fff4388

08000324 <tm_setTimerCount>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_setTimerCount(uint32_t timerValue)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b084      	sub	sp, #16
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus;
	//uint32_t tempTimerValue = timerValue * TM_1MS_TIMER_VAL;

	timerId = (uint32_t) SYSTIMER_CreateTimer(timerValue,
 800032c:	6878      	ldr	r0, [r7, #4]
 800032e:	2101      	movs	r1, #1
 8000330:	4a0a      	ldr	r2, [pc, #40]	; (800035c <tm_setTimerCount+0x38>)
 8000332:	2300      	movs	r3, #0
 8000334:	f006 fbd4 	bl	8006ae0 <SYSTIMER_CreateTimer>
 8000338:	4602      	mov	r2, r0
 800033a:	4b09      	ldr	r3, [pc, #36]	; (8000360 <tm_setTimerCount+0x3c>)
 800033c:	601a      	str	r2, [r3, #0]
			SYSTIMER_MODE_PERIODIC, (void*) tm_sysTickCallback, NULL);

	if (0U != timerId)
 800033e:	4b08      	ldr	r3, [pc, #32]	; (8000360 <tm_setTimerCount+0x3c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d002      	beq.n	800034c <tm_setTimerCount+0x28>
	{
		len_retStatus = E_RET_SUCCESS;
 8000346:	2300      	movs	r3, #0
 8000348:	73fb      	strb	r3, [r7, #15]
 800034a:	e001      	b.n	8000350 <tm_setTimerCount+0x2c>
	}
	else
	{
		len_retStatus = E_RET_TIMER_ERROR;
 800034c:	2307      	movs	r3, #7
 800034e:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 8000350:	7bfb      	ldrb	r3, [r7, #15]
}
 8000352:	4618      	mov	r0, r3
 8000354:	3710      	adds	r7, #16
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	0800029d 	.word	0x0800029d
 8000360:	1fff4390 	.word	0x1fff4390

08000364 <tm_startTimer>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t tm_startTimer()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus;
	SYSTIMER_STATUS_t timerStatus;

	if (timerId != 0)
 800036a:	4b0d      	ldr	r3, [pc, #52]	; (80003a0 <tm_startTimer+0x3c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d00f      	beq.n	8000392 <tm_startTimer+0x2e>
	{
		timerStatus = SYSTIMER_StartTimer(timerId);
 8000372:	4b0b      	ldr	r3, [pc, #44]	; (80003a0 <tm_startTimer+0x3c>)
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	4618      	mov	r0, r3
 8000378:	f006 fc50 	bl	8006c1c <SYSTIMER_StartTimer>
 800037c:	4603      	mov	r3, r0
 800037e:	71bb      	strb	r3, [r7, #6]
		if (SYSTIMER_STATUS_SUCCESS == timerStatus)
 8000380:	79bb      	ldrb	r3, [r7, #6]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d102      	bne.n	800038c <tm_startTimer+0x28>
		{
			len_retStatus = E_RET_SUCCESS;
 8000386:	2300      	movs	r3, #0
 8000388:	71fb      	strb	r3, [r7, #7]
 800038a:	e004      	b.n	8000396 <tm_startTimer+0x32>
		}
		else
		{
			len_retStatus = E_RET_TIMER_ERROR;
 800038c:	2307      	movs	r3, #7
 800038e:	71fb      	strb	r3, [r7, #7]
 8000390:	e001      	b.n	8000396 <tm_startTimer+0x32>
		}
	}
	else
	{
		len_retStatus = E_RET_TIMER_ID_ZERO_ERROR;
 8000392:	2308      	movs	r3, #8
 8000394:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 8000396:	79fb      	ldrb	r3, [r7, #7]
}
 8000398:	4618      	mov	r0, r3
 800039a:	3708      	adds	r7, #8
 800039c:	46bd      	mov	sp, r7
 800039e:	bd80      	pop	{r7, pc}
 80003a0:	1fff4390 	.word	0x1fff4390

080003a4 <tm_setResetTimer>:
{
	timerCount = 0;
}

void tm_setResetTimer(uint32_t lu32_timeInMs)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
	gu32_resetCounter = lu32_timeInMs;
 80003ac:	4a03      	ldr	r2, [pc, #12]	; (80003bc <tm_setResetTimer+0x18>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6013      	str	r3, [r2, #0]
}
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	1fff437c 	.word	0x1fff437c

080003c0 <tm_getResetTimerValue>:

uint32_t tm_getResetTimerValue()
{
 80003c0:	b480      	push	{r7}
 80003c2:	af00      	add	r7, sp, #0
	return gu32_resetCounter;
 80003c4:	4b03      	ldr	r3, [pc, #12]	; (80003d4 <tm_getResetTimerValue+0x14>)
 80003c6:	681b      	ldr	r3, [r3, #0]
}
 80003c8:	4618      	mov	r0, r3
 80003ca:	46bd      	mov	sp, r7
 80003cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d0:	4770      	bx	lr
 80003d2:	bf00      	nop
 80003d4:	1fff437c 	.word	0x1fff437c

080003d8 <tm_set4gRunTimer>:
{
	return gu32_3s4gCounter;
}

void tm_set4gRunTimer(uint32_t lu32_timeInMs)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
	gu32_3s4gCounter = lu32_timeInMs;
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <tm_set4gRunTimer+0x18>)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6013      	str	r3, [r2, #0]
}
 80003e6:	370c      	adds	r7, #12
 80003e8:	46bd      	mov	sp, r7
 80003ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ee:	4770      	bx	lr
 80003f0:	1fff4388 	.word	0x1fff4388

080003f4 <tm_get4gRunTimerValue>:

uint32_t tm_get4gRunTimerValue()
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
	return gu32_3s4gCounter;
 80003f8:	4b03      	ldr	r3, [pc, #12]	; (8000408 <tm_get4gRunTimerValue+0x14>)
 80003fa:	681b      	ldr	r3, [r3, #0]
}
 80003fc:	4618      	mov	r0, r3
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	1fff4388 	.word	0x1fff4388

0800040c <tm_setResponseTime>:

void tm_setResponseTime(uint32_t lu32_timeInMs)
{
 800040c:	b480      	push	{r7}
 800040e:	b083      	sub	sp, #12
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
	gu32_responseCount = lu32_timeInMs;
 8000414:	4a03      	ldr	r2, [pc, #12]	; (8000424 <tm_setResponseTime+0x18>)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	6013      	str	r3, [r2, #0]
}
 800041a:	370c      	adds	r7, #12
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr
 8000424:	1fff438c 	.word	0x1fff438c

08000428 <tm_getResponseTimeValue>:

uint32_t tm_getResponseTimeValue()
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
	return gu32_responseCount;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <tm_getResponseTimeValue+0x14>)
 800042e:	681b      	ldr	r3, [r3, #0]
}
 8000430:	4618      	mov	r0, r3
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	1fff438c 	.word	0x1fff438c

08000440 <tm_clearResponseTime>:
void tm_clearResponseTime()
{
 8000440:	b480      	push	{r7}
 8000442:	af00      	add	r7, sp, #0
	gu32_responseCount = 0;
 8000444:	4b03      	ldr	r3, [pc, #12]	; (8000454 <tm_clearResponseTime+0x14>)
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
}
 800044a:	46bd      	mov	sp, r7
 800044c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000450:	4770      	bx	lr
 8000452:	bf00      	nop
 8000454:	1fff438c 	.word	0x1fff438c

08000458 <allFaults_Process>:
	//Gtake_FaultIndicator();
	Irp_FaultIndicator();
}

void allFaults_Process(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
//	HighVoltBattery_FaultIndicator();
//	Mcu_FaultIndicator();
//	clusterFault_Indicator();
}
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr

08000464 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 8000468:	f004 f888 	bl	800457c <XMC_RTC_Start>
}
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop

08000470 <RTC_Stop>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Stop(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	af00      	add	r7, sp, #0
	XMC_RTC_Stop();
 8000474:	f004 f896 	bl	80045a4 <XMC_RTC_Stop>
}
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop

0800047c <RTC_init>:
#include "Vcu_Config.h"

#include "xmc_rtc.h"
#include <time.h>
void RTC_init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b082      	sub	sp, #8
 8000480:	af00      	add	r7, sp, #0

	RTC_STATUS_t status_r = RTC_STATUS_FAILURE;
 8000482:	2301      	movs	r3, #1
 8000484:	71fb      	strb	r3, [r7, #7]
	RTC_Stop();
 8000486:	f7ff fff3 	bl	8000470 <RTC_Stop>

    status_r =  RTC_SetTime(&timeval);
 800048a:	4806      	ldr	r0, [pc, #24]	; (80004a4 <RTC_init+0x28>)
 800048c:	f007 f92e 	bl	80076ec <RTC_SetTime>
 8000490:	4603      	mov	r3, r0
 8000492:	71fb      	strb	r3, [r7, #7]

    if(status_r == RTC_STATUS_SUCCESS)
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <RTC_init+0x22>
    {
 	 RTC_Start();
 800049a:	f7ff ffe3 	bl	8000464 <RTC_Start>
    }
}
 800049e:	3708      	adds	r7, #8
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	1fff47ac 	.word	0x1fff47ac

080004a8 <Process_State1_Inputs>:
instrument_clustor_buzzer_t *instrument_clustor_buzzer = &(CAN_MSG_DB[CAN_18FF2021].CAN_Data[0]);
Instrumetcluster_DriveMode_OUT_t *Instrumetcluster_DriveMode_OUT = &(CAN_MSG_DB[CAN_18FFB632].CAN_Data[4]);
eps_status_t *eps_status = &eps_n[can_0x1E5].can_matrix[0];

void Process_State1_Inputs(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	static bool init_once = 1;
	Process_Io_exp_U24();
 80004ac:	f000 f86c 	bl	8000588 <Process_Io_exp_U24>

	if(Vcu_OutPuts.IGNITION_1_OUT)
 80004b0:	4b11      	ldr	r3, [pc, #68]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d010      	beq.n	80004da <Process_State1_Inputs+0x32>
	{
		//Process_Io_exp_U25();
		Process_cluster_indicators();
 80004b8:	f000 f87c 	bl	80005b4 <Process_cluster_indicators>
		Process_drive_mode();
 80004bc:	f000 f938 	bl	8000730 <Process_drive_mode>
		Process_faciaaswitches();
 80004c0:	f000 fa1e 	bl	8000900 <Process_faciaaswitches>
		if(init_once)
 80004c4:	4b0d      	ldr	r3, [pc, #52]	; (80004fc <Process_State1_Inputs+0x54>)
 80004c6:	781b      	ldrb	r3, [r3, #0]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d005      	beq.n	80004d8 <Process_State1_Inputs+0x30>
		{
			init_hw();
 80004cc:	f000 fb78 	bl	8000bc0 <init_hw>
			init_once = 0;
 80004d0:	4b0a      	ldr	r3, [pc, #40]	; (80004fc <Process_State1_Inputs+0x54>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
 80004d6:	e00e      	b.n	80004f6 <Process_State1_Inputs+0x4e>
 80004d8:	e00d      	b.n	80004f6 <Process_State1_Inputs+0x4e>
		}
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 80004da:	4b07      	ldr	r3, [pc, #28]	; (80004f8 <Process_State1_Inputs+0x50>)
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	f083 0301 	eor.w	r3, r3, #1
 80004e2:	b2db      	uxtb	r3, r3
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d006      	beq.n	80004f6 <Process_State1_Inputs+0x4e>
	{
		all_Ig1_Inputs_off();
 80004e8:	f000 f91c 	bl	8000724 <all_Ig1_Inputs_off>
		cluster_indicators_off();
 80004ec:	f000 f8ee 	bl	80006cc <cluster_indicators_off>
		init_once = 1;
 80004f0:	4b02      	ldr	r3, [pc, #8]	; (80004fc <Process_State1_Inputs+0x54>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	701a      	strb	r2, [r3, #0]
	}
}
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	1fff48d0 	.word	0x1fff48d0
 80004fc:	1ffe8810 	.word	0x1ffe8810

08000500 <hazzard>:

void hazzard(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0
	/* for hazzard */
	if((Vcu_OutPuts.IGNITION_1_OUT == 0) && (Combi_Switch_IN.left_indicator_IN && Combi_Switch_IN.right_indicator_IN))
 8000504:	4b1d      	ldr	r3, [pc, #116]	; (800057c <hazzard+0x7c>)
 8000506:	781b      	ldrb	r3, [r3, #0]
 8000508:	f083 0301 	eor.w	r3, r3, #1
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b00      	cmp	r3, #0
 8000510:	d00e      	beq.n	8000530 <hazzard+0x30>
 8000512:	4b1b      	ldr	r3, [pc, #108]	; (8000580 <hazzard+0x80>)
 8000514:	78db      	ldrb	r3, [r3, #3]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d00a      	beq.n	8000530 <hazzard+0x30>
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <hazzard+0x80>)
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d006      	beq.n	8000530 <hazzard+0x30>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = true;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <hazzard+0x84>)
 8000524:	2201      	movs	r2, #1
 8000526:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = true;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <hazzard+0x84>)
 800052a:	2201      	movs	r2, #1
 800052c:	711a      	strb	r2, [r3, #4]
 800052e:	e020      	b.n	8000572 <hazzard+0x72>
	}

	else if(((Combi_Switch_IN.left_indicator_IN == 0) && (Combi_Switch_IN.right_indicator_IN == 0)))
 8000530:	4b13      	ldr	r3, [pc, #76]	; (8000580 <hazzard+0x80>)
 8000532:	78db      	ldrb	r3, [r3, #3]
 8000534:	f083 0301 	eor.w	r3, r3, #1
 8000538:	b2db      	uxtb	r3, r3
 800053a:	2b00      	cmp	r3, #0
 800053c:	d00d      	beq.n	800055a <hazzard+0x5a>
 800053e:	4b10      	ldr	r3, [pc, #64]	; (8000580 <hazzard+0x80>)
 8000540:	791b      	ldrb	r3, [r3, #4]
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d006      	beq.n	800055a <hazzard+0x5a>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = false;
 800054c:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <hazzard+0x84>)
 800054e:	2200      	movs	r2, #0
 8000550:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = false;
 8000552:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <hazzard+0x84>)
 8000554:	2200      	movs	r2, #0
 8000556:	711a      	strb	r2, [r3, #4]
 8000558:	e00b      	b.n	8000572 <hazzard+0x72>
	}
	/* end */

	else if(Vcu_OutPuts.IGNITION_1_OUT)
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <hazzard+0x7c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d007      	beq.n	8000572 <hazzard+0x72>
	{
		Relay_Control_Switch_OUT.left_indicator_OUT = Combi_Switch_IN.left_indicator_IN;
 8000562:	4b07      	ldr	r3, [pc, #28]	; (8000580 <hazzard+0x80>)
 8000564:	78da      	ldrb	r2, [r3, #3]
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <hazzard+0x84>)
 8000568:	70da      	strb	r2, [r3, #3]
		Relay_Control_Switch_OUT.right_indicator_OUT = Combi_Switch_IN.right_indicator_IN;
 800056a:	4b05      	ldr	r3, [pc, #20]	; (8000580 <hazzard+0x80>)
 800056c:	791a      	ldrb	r2, [r3, #4]
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <hazzard+0x84>)
 8000570:	711a      	strb	r2, [r3, #4]
	}

}
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	1fff48d0 	.word	0x1fff48d0
 8000580:	1fff48a8 	.word	0x1fff48a8
 8000584:	1fff47b4 	.word	0x1fff47b4

08000588 <Process_Io_exp_U24>:

void Process_Io_exp_U24(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	Relay_Control_Switch_OUT.low_beam_OUT = Combi_Switch_IN.low_beam_IN;
 800058c:	4b07      	ldr	r3, [pc, #28]	; (80005ac <Process_Io_exp_U24+0x24>)
 800058e:	781a      	ldrb	r2, [r3, #0]
 8000590:	4b07      	ldr	r3, [pc, #28]	; (80005b0 <Process_Io_exp_U24+0x28>)
 8000592:	701a      	strb	r2, [r3, #0]
	Relay_Control_Switch_OUT.high_beam_OUT = Combi_Switch_IN.high_beam_IN;
 8000594:	4b05      	ldr	r3, [pc, #20]	; (80005ac <Process_Io_exp_U24+0x24>)
 8000596:	785a      	ldrb	r2, [r3, #1]
 8000598:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <Process_Io_exp_U24+0x28>)
 800059a:	705a      	strb	r2, [r3, #1]
	Relay_Control_Switch_OUT.pos_light_OUT = Combi_Switch_IN.pos_light_IN;
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <Process_Io_exp_U24+0x24>)
 800059e:	789a      	ldrb	r2, [r3, #2]
 80005a0:	4b03      	ldr	r3, [pc, #12]	; (80005b0 <Process_Io_exp_U24+0x28>)
 80005a2:	709a      	strb	r2, [r3, #2]

	hazzard();
 80005a4:	f7ff ffac 	bl	8000500 <hazzard>
}
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	1fff48a8 	.word	0x1fff48a8
 80005b0:	1fff47b4 	.word	0x1fff47b4

080005b4 <Process_cluster_indicators>:
	//Relay_Control_Switch_OUT.ac_blower3_OUT = Hvac_IN.blower_speed3_IN;

}

void Process_cluster_indicators(void)
 {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_right_indicator = 0;//Combi_Switch_IN.right_indicator_IN;

	i_counter = 0;
}
*/
	Instrument_Cluster_OUT.set_left_indicator = Combi_Switch_IN.left_indicator_IN;
 80005b8:	4b39      	ldr	r3, [pc, #228]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005ba:	78da      	ldrb	r2, [r3, #3]
 80005bc:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005be:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = Combi_Switch_IN.right_indicator_IN;
 80005c0:	4b37      	ldr	r3, [pc, #220]	; (80006a0 <Process_cluster_indicators+0xec>)
 80005c2:	791a      	ldrb	r2, [r3, #4]
 80005c4:	4b37      	ldr	r3, [pc, #220]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005c6:	71da      	strb	r2, [r3, #7]
	 //Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.low_beam_OUT;
	 Instrument_Cluster_OUT.set_high_beam = Relay_Control_Switch_OUT.high_beam_OUT;
 80005c8:	4b37      	ldr	r3, [pc, #220]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005ca:	785a      	ldrb	r2, [r3, #1]
 80005cc:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005ce:	725a      	strb	r2, [r3, #9]
	 Instrument_Cluster_OUT.set_low_beam = Relay_Control_Switch_OUT.pos_light_OUT;//There is no indicator for low beam there is for position
 80005d0:	4b35      	ldr	r3, [pc, #212]	; (80006a8 <Process_cluster_indicators+0xf4>)
 80005d2:	789a      	ldrb	r2, [r3, #2]
 80005d4:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005d6:	721a      	strb	r2, [r3, #8]
	 Instrument_Cluster_OUT.set_brake_oil = Switch_Ios_IN.brake_oil_IN;
 80005d8:	4b34      	ldr	r3, [pc, #208]	; (80006ac <Process_cluster_indicators+0xf8>)
 80005da:	799a      	ldrb	r2, [r3, #6]
 80005dc:	4b31      	ldr	r3, [pc, #196]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005de:	729a      	strb	r2, [r3, #10]

	// Instrument_Cluster_OUT.eps_status = 1;//default value to show eps failure
	 Instrument_Cluster_OUT.eps_status = eps_status-> Power_Steering_Fault_Indication_On_EPS;///////eps failure
 80005e0:	4b33      	ldr	r3, [pc, #204]	; (80006b0 <Process_cluster_indicators+0xfc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	78db      	ldrb	r3, [r3, #3]
 80005e6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	bf14      	ite	ne
 80005f0:	2301      	movne	r3, #1
 80005f2:	2300      	moveq	r3, #0
 80005f4:	b2da      	uxtb	r2, r3
 80005f6:	4b2b      	ldr	r3, [pc, #172]	; (80006a4 <Process_cluster_indicators+0xf0>)
 80005f8:	731a      	strb	r2, [r3, #12]

	 Instrument_Cluster_OUT.aux_vtg_critical;////////
	 Instrument_Cluster_OUT.battery_temp_exceeded;/////////
	 /*instrument_clustor_buzzer-> charging_connected = */Instrument_Cluster_OUT.charging_connected = charger_on();//Vcu_InPuts.charger_connect_IN;
 80005fa:	f000 fad5 	bl	8000ba8 <charger_on>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	bf14      	ite	ne
 8000604:	2301      	movne	r3, #1
 8000606:	2300      	moveq	r3, #0
 8000608:	b2da      	uxtb	r2, r3
 800060a:	4b26      	ldr	r3, [pc, #152]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800060c:	739a      	strb	r2, [r3, #14]
	 /*instrument_clustor_indicators-> generic_alarm;////////*/
	 Instrument_Cluster_OUT.regen_enabled = Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese || Irp_Mcu_drive_states_29bit-> Regen_On_Brake;
 800060e:	4b29      	ldr	r3, [pc, #164]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	789b      	ldrb	r3, [r3, #2]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d107      	bne.n	800062e <Process_cluster_indicators+0x7a>
 800061e:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <Process_cluster_indicators+0x100>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	789b      	ldrb	r3, [r3, #2]
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	b2db      	uxtb	r3, r3
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <Process_cluster_indicators+0x7e>
 800062e:	2301      	movs	r3, #1
 8000630:	e000      	b.n	8000634 <Process_cluster_indicators+0x80>
 8000632:	2300      	movs	r3, #0
 8000634:	f003 0301 	and.w	r3, r3, #1
 8000638:	b2da      	uxtb	r2, r3
 800063a:	4b1a      	ldr	r3, [pc, #104]	; (80006a4 <Process_cluster_indicators+0xf0>)
 800063c:	73da      	strb	r2, [r3, #15]
	 instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;////////
 800063e:	4b1e      	ldr	r3, [pc, #120]	; (80006b8 <Process_cluster_indicators+0x104>)
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	4b1a      	ldr	r3, [pc, #104]	; (80006ac <Process_cluster_indicators+0xf8>)
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2d9      	uxtb	r1, r3
 8000652:	7953      	ldrb	r3, [r2, #5]
 8000654:	f361 03c3 	bfi	r3, r1, #3, #1
 8000658:	7153      	strb	r3, [r2, #5]
	 Seat_Belt_OUT.seat_occupied = (!(/*Seat_Switch_IN.seat_belt_d_IN &&*/ Seat_Switch_IN.seat_belt_p_IN));
 800065a:	4b18      	ldr	r3, [pc, #96]	; (80006bc <Process_cluster_indicators+0x108>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b00      	cmp	r3, #0
 8000660:	bf14      	ite	ne
 8000662:	2301      	movne	r3, #1
 8000664:	2300      	moveq	r3, #0
 8000666:	b2db      	uxtb	r3, r3
 8000668:	f083 0301 	eor.w	r3, r3, #1
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f003 0301 	and.w	r3, r3, #1
 8000672:	b2da      	uxtb	r2, r3
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000676:	709a      	strb	r2, [r3, #2]

	 if(vspeed >=10)
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <Process_cluster_indicators+0x110>)
 800067a:	881b      	ldrh	r3, [r3, #0]
 800067c:	2b09      	cmp	r3, #9
 800067e:	d908      	bls.n	8000692 <Process_cluster_indicators+0xde>
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = Seat_Belt_OUT.seat_occupied;
 8000680:	4b11      	ldr	r3, [pc, #68]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000682:	681a      	ldr	r2, [r3, #0]
 8000684:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <Process_cluster_indicators+0x10c>)
 8000686:	7899      	ldrb	r1, [r3, #2]
 8000688:	7813      	ldrb	r3, [r2, #0]
 800068a:	f361 0341 	bfi	r3, r1, #1, #1
 800068e:	7013      	strb	r3, [r2, #0]
 8000690:	e005      	b.n	800069e <Process_cluster_indicators+0xea>
	 }
	 else
	 {
		 instrument_clustor_buzzer-> seat_belt_warning = false;
 8000692:	4b0d      	ldr	r3, [pc, #52]	; (80006c8 <Process_cluster_indicators+0x114>)
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	7813      	ldrb	r3, [r2, #0]
 8000698:	f36f 0341 	bfc	r3, #1, #1
 800069c:	7013      	strb	r3, [r2, #0]
	 }
	 // instrument_clustor_indicators-> overspeed = 1;
 }
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	1fff48a8 	.word	0x1fff48a8
 80006a4:	1fff4878 	.word	0x1fff4878
 80006a8:	1fff47b4 	.word	0x1fff47b4
 80006ac:	1fff4848 	.word	0x1fff4848
 80006b0:	1ffe8804 	.word	0x1ffe8804
 80006b4:	1ffe8818 	.word	0x1ffe8818
 80006b8:	1ffe8808 	.word	0x1ffe8808
 80006bc:	1fff47ec 	.word	0x1fff47ec
 80006c0:	1fff482c 	.word	0x1fff482c
 80006c4:	1fff522e 	.word	0x1fff522e
 80006c8:	1ffe880c 	.word	0x1ffe880c

080006cc <cluster_indicators_off>:

void cluster_indicators_off(void)
 {
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
	Instrument_Cluster_OUT.set_left_indicator = false;
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <cluster_indicators_off+0x50>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	719a      	strb	r2, [r3, #6]
	Instrument_Cluster_OUT.set_right_indicator = false;
 80006d6:	4b11      	ldr	r3, [pc, #68]	; (800071c <cluster_indicators_off+0x50>)
 80006d8:	2200      	movs	r2, #0
 80006da:	71da      	strb	r2, [r3, #7]
	Instrument_Cluster_OUT.set_low_beam = false;
 80006dc:	4b0f      	ldr	r3, [pc, #60]	; (800071c <cluster_indicators_off+0x50>)
 80006de:	2200      	movs	r2, #0
 80006e0:	721a      	strb	r2, [r3, #8]
	Instrument_Cluster_OUT.set_high_beam = false;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <cluster_indicators_off+0x50>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	725a      	strb	r2, [r3, #9]
	Instrument_Cluster_OUT.set_brake_oil = false;//////
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <cluster_indicators_off+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	729a      	strb	r2, [r3, #10]
	//Instrument_Cluster_OUT.;///////eps failure
	Instrument_Cluster_OUT.aux_vtg_critical = false;////////
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <cluster_indicators_off+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	72da      	strb	r2, [r3, #11]
	Instrument_Cluster_OUT.battery_temp_exceeded = false;/////////
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <cluster_indicators_off+0x50>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	735a      	strb	r2, [r3, #13]
	Instrument_Cluster_OUT.charging_connected = false;/////////////
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <cluster_indicators_off+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	739a      	strb	r2, [r3, #14]
	/*instrument_clustor_indicators-> generic_alarm;////////*/
	Instrument_Cluster_OUT.regen_enabled = false;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <cluster_indicators_off+0x50>)
 8000702:	2200      	movs	r2, #0
 8000704:	73da      	strb	r2, [r3, #15]
	/*instrument_clustor_indicators-> parking_brake_light;////////*/
	instrument_clustor_indicators-> seat_belt = false;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <cluster_indicators_off+0x54>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	7953      	ldrb	r3, [r2, #5]
 800070c:	f36f 1304 	bfc	r3, #4, #1
 8000710:	7153      	strb	r3, [r2, #5]
 }
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	1fff4878 	.word	0x1fff4878
 8000720:	1ffe8808 	.word	0x1ffe8808

08000724 <all_Ig1_Inputs_off>:
{

}

void all_Ig1_Inputs_off(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0

	//Relay_Control_Switch_OUT.left_indicator_OUT = false;
	//Relay_Control_Switch_OUT.right_indicator_OUT = false;

	/* IO EXP U25 */
}
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <Process_drive_mode>:

void Process_drive_mode(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
	static bool prev_input = 0;
	static uint8_t ModeCounter_MCU = eco_mode_mcu, ModeCounter_Cluster = eco_mode_cluster, counter = 1;

	switch (Switch_Ios_IN.gear_sw2_IN )
 8000734:	4b27      	ldr	r3, [pc, #156]	; (80007d4 <Process_drive_mode+0xa4>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d127      	bne.n	800078c <Process_drive_mode+0x5c>
	{
		case 1:
				if((prev_input == 0 ) && (Hvac_IN.blower_speed2_IN)) // mode switch is connected to Hvac_IN.blower_speed2_IN
 800073c:	4b26      	ldr	r3, [pc, #152]	; (80007d8 <Process_drive_mode+0xa8>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	f083 0301 	eor.w	r3, r3, #1
 8000744:	b2db      	uxtb	r3, r3
 8000746:	2b00      	cmp	r3, #0
 8000748:	d014      	beq.n	8000774 <Process_drive_mode+0x44>
 800074a:	4b24      	ldr	r3, [pc, #144]	; (80007dc <Process_drive_mode+0xac>)
 800074c:	795b      	ldrb	r3, [r3, #5]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d010      	beq.n	8000774 <Process_drive_mode+0x44>
				{
					ModeCounter_Cluster++;
 8000752:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <Process_drive_mode+0xb0>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	3301      	adds	r3, #1
 8000758:	b2da      	uxtb	r2, r3
 800075a:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <Process_drive_mode+0xb0>)
 800075c:	701a      	strb	r2, [r3, #0]
					if(ModeCounter_Cluster == invalid_data_cluster)
 800075e:	4b20      	ldr	r3, [pc, #128]	; (80007e0 <Process_drive_mode+0xb0>)
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	2b03      	cmp	r3, #3
 8000764:	d102      	bne.n	800076c <Process_drive_mode+0x3c>
						ModeCounter_Cluster = eco_mode_cluster;
 8000766:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <Process_drive_mode+0xb0>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]

					prev_input = 1;
 800076c:	4b1a      	ldr	r3, [pc, #104]	; (80007d8 <Process_drive_mode+0xa8>)
 800076e:	2201      	movs	r2, #1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	e00a      	b.n	800078a <Process_drive_mode+0x5a>
				}
				else if(Hvac_IN.blower_speed2_IN == 0)
 8000774:	4b19      	ldr	r3, [pc, #100]	; (80007dc <Process_drive_mode+0xac>)
 8000776:	795b      	ldrb	r3, [r3, #5]
 8000778:	f083 0301 	eor.w	r3, r3, #1
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b00      	cmp	r3, #0
 8000780:	d003      	beq.n	800078a <Process_drive_mode+0x5a>
				{
					prev_input = 0;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <Process_drive_mode+0xa8>)
 8000784:	2200      	movs	r2, #0
 8000786:	701a      	strb	r2, [r3, #0]
				}
		break;
 8000788:	e007      	b.n	800079a <Process_drive_mode+0x6a>
 800078a:	e006      	b.n	800079a <Process_drive_mode+0x6a>

		default:
				ModeCounter_MCU = eco_mode_mcu;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <Process_drive_mode+0xb4>)
 800078e:	2203      	movs	r2, #3
 8000790:	701a      	strb	r2, [r3, #0]
				ModeCounter_Cluster = eco_mode_cluster;
 8000792:	4b13      	ldr	r3, [pc, #76]	; (80007e0 <Process_drive_mode+0xb0>)
 8000794:	2200      	movs	r2, #0
 8000796:	701a      	strb	r2, [r3, #0]
		break;
 8000798:	bf00      	nop
	}
/* this is for gtake */
	if(Switch_Ios_IN.gear_sw2_IN)
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <Process_drive_mode+0xa4>)
 800079c:	7a9b      	ldrb	r3, [r3, #10]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d007      	beq.n	80007b2 <Process_drive_mode+0x82>
	{
		ModeCounter_MCU = 3 - ModeCounter_Cluster;
 80007a2:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <Process_drive_mode+0xb0>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f1c3 0303 	rsb	r3, r3, #3
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <Process_drive_mode+0xb4>)
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e005      	b.n	80007be <Process_drive_mode+0x8e>
	}
	else
	{
		ModeCounter_MCU = eco_mode_mcu;
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Process_drive_mode+0xb4>)
 80007b4:	2203      	movs	r2, #3
 80007b6:	701a      	strb	r2, [r3, #0]
		ModeCounter_Cluster = eco_mode_cluster;
 80007b8:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	701a      	strb	r2, [r3, #0]
	}
/***** for gtake end  **********/

	Process_cluster_drivemode(ModeCounter_Cluster);
 80007be:	4b08      	ldr	r3, [pc, #32]	; (80007e0 <Process_drive_mode+0xb0>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	4618      	mov	r0, r3
 80007c4:	f000 f810 	bl	80007e8 <Process_cluster_drivemode>
	Process_motordrive_mode(ModeCounter_Cluster); //for gtake pass ModeCounter_MCU, and for irp pass ModeCounter_Cluster
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <Process_drive_mode+0xb0>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	4618      	mov	r0, r3
 80007ce:	f000 f825 	bl	800081c <Process_motordrive_mode>

}
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	1fff4848 	.word	0x1fff4848
 80007d8:	1fff4394 	.word	0x1fff4394
 80007dc:	1fff4860 	.word	0x1fff4860
 80007e0:	1fff4395 	.word	0x1fff4395
 80007e4:	1ffe8811 	.word	0x1ffe8811

080007e8 <Process_cluster_drivemode>:

void Process_cluster_drivemode(uint8_t mode)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b083      	sub	sp, #12
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	4603      	mov	r3, r0
 80007f0:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 80007f2:	4b08      	ldr	r3, [pc, #32]	; (8000814 <Process_cluster_drivemode+0x2c>)
 80007f4:	785b      	ldrb	r3, [r3, #1]
 80007f6:	f083 0301 	eor.w	r3, r3, #1
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d003      	beq.n	8000808 <Process_cluster_drivemode+0x20>
		Instrumetcluster_DriveMode_OUT ->DriveMode = mode;
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <Process_cluster_drivemode+0x30>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	79fa      	ldrb	r2, [r7, #7]
 8000806:	701a      	strb	r2, [r3, #0]
}
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	1fff48b0 	.word	0x1fff48b0
 8000818:	1ffe8800 	.word	0x1ffe8800

0800081c <Process_motordrive_mode>:
void Process_motordrive_mode(uint8_t mode)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	//motordrive_mode_Gtake(uint8_t mode);
	motordrive_mode_irp(mode);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f803 	bl	8000834 <motordrive_mode_irp>
}
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}

08000834 <motordrive_mode_irp>:
	if(!Lights_OUT.brake_switch_out_d)
		Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = mode;
}

void motordrive_mode_irp(uint8_t mode)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
	if(!Lights_OUT.brake_switch_out_d)
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <motordrive_mode_irp+0x38>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d009      	beq.n	8000860 <motordrive_mode_irp+0x2c>
		Irp_Mcu_drive_states_29bit->Driving_Profile = mode;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <motordrive_mode_irp+0x3c>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	b2d9      	uxtb	r1, r3
 8000858:	7813      	ldrb	r3, [r2, #0]
 800085a:	f361 0384 	bfi	r3, r1, #2, #3
 800085e:	7013      	strb	r3, [r2, #0]
}
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	1fff48b0 	.word	0x1fff48b0
 8000870:	1ffe8818 	.word	0x1ffe8818

08000874 <Process_Regen_Control>:

void Process_Regen_Control(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
	static bool prev_input = 0;

	if((prev_input == 0 ) && (Hvac_IN.blower_speed3_IN)) // regen switch is connected to Hvac_IN.blower_speed3_IN
 8000878:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <Process_Regen_Control+0x7c>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	f083 0301 	eor.w	r3, r3, #1
 8000880:	b2db      	uxtb	r3, r3
 8000882:	2b00      	cmp	r3, #0
 8000884:	d026      	beq.n	80008d4 <Process_Regen_Control+0x60>
 8000886:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <Process_Regen_Control+0x80>)
 8000888:	799b      	ldrb	r3, [r3, #6]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d022      	beq.n	80008d4 <Process_Regen_Control+0x60>
	{
		Relay_Control_Switch_OUT.ac_blower3_OUT = !Relay_Control_Switch_OUT.ac_blower3_OUT;
 800088e:	4b1a      	ldr	r3, [pc, #104]	; (80008f8 <Process_Regen_Control+0x84>)
 8000890:	7a9b      	ldrb	r3, [r3, #10]
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	f083 0301 	eor.w	r3, r3, #1
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	4b13      	ldr	r3, [pc, #76]	; (80008f8 <Process_Regen_Control+0x84>)
 80008aa:	729a      	strb	r2, [r3, #10]
		prev_input = 1;
 80008ac:	4b10      	ldr	r3, [pc, #64]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	701a      	strb	r2, [r3, #0]
		//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0x0;
		//if(Relay_Control_Switch_OUT.ac_blower3_OUT)
		{
			//enable region cmd
			Irp_Mcu_drive_states_29bit-> Regen_On_Brake = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008b2:	4b12      	ldr	r3, [pc, #72]	; (80008fc <Process_Regen_Control+0x88>)
 80008b4:	681a      	ldr	r2, [r3, #0]
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <Process_Regen_Control+0x84>)
 80008b8:	7a99      	ldrb	r1, [r3, #10]
 80008ba:	7893      	ldrb	r3, [r2, #2]
 80008bc:	f361 0382 	bfi	r3, r1, #2, #1
 80008c0:	7093      	strb	r3, [r2, #2]
			Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = Relay_Control_Switch_OUT.ac_blower3_OUT;
 80008c2:	4b0e      	ldr	r3, [pc, #56]	; (80008fc <Process_Regen_Control+0x88>)
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <Process_Regen_Control+0x84>)
 80008c8:	7a99      	ldrb	r1, [r3, #10]
 80008ca:	7893      	ldrb	r3, [r2, #2]
 80008cc:	f361 03c3 	bfi	r3, r1, #3, #1
 80008d0:	7093      	strb	r3, [r2, #2]
 80008d2:	e009      	b.n	80008e8 <Process_Regen_Control+0x74>
		}
	}
	else if(Hvac_IN.blower_speed3_IN == 0)
 80008d4:	4b07      	ldr	r3, [pc, #28]	; (80008f4 <Process_Regen_Control+0x80>)
 80008d6:	799b      	ldrb	r3, [r3, #6]
 80008d8:	f083 0301 	eor.w	r3, r3, #1
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d002      	beq.n	80008e8 <Process_Regen_Control+0x74>
	{
		prev_input = 0;
 80008e2:	4b03      	ldr	r3, [pc, #12]	; (80008f0 <Process_Regen_Control+0x7c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
	}

}
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	1fff4396 	.word	0x1fff4396
 80008f4:	1fff4860 	.word	0x1fff4860
 80008f8:	1fff47b4 	.word	0x1fff47b4
 80008fc:	1ffe8818 	.word	0x1ffe8818

08000900 <Process_faciaaswitches>:

}


void Process_faciaaswitches(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	Process_Regen_Control();
 8000904:	f7ff ffb6 	bl	8000874 <Process_Regen_Control>
	//Process_RearDefogger();
	//Process_FogLamp();
	//Process_PowerLatch();
}
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop

0800090c <CCU81_0_IRQHandler>:

void Flasher(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
		else if(Combi_Switch_IN.right_indicator_IN)
		{
			Instrument_Cluster_OUT.set_right_indicator = !Instrument_Cluster_OUT.set_right_indicator;
		}*/
	//INTERRUPT_Disable(&INTERRUPT_0);
}
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <Process_State2_Inputs>:

#include "Vcu_Config.h"
#include "Vcu_Process.h"

void Process_State2_Inputs(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 800091c:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <Process_State2_Inputs+0x30>)
 800091e:	785b      	ldrb	r3, [r3, #1]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d004      	beq.n	800092e <Process_State2_Inputs+0x16>
	{
		Process_vehicleDrive_Inputs();
 8000924:	f000 f812 	bl	800094c <Process_vehicleDrive_Inputs>
		Process_ig2_lights();
 8000928:	f000 f842 	bl	80009b0 <Process_ig2_lights>
 800092c:	e00a      	b.n	8000944 <Process_State2_Inputs+0x2c>
	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800092e:	4b06      	ldr	r3, [pc, #24]	; (8000948 <Process_State2_Inputs+0x30>)
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	f083 0301 	eor.w	r3, r3, #1
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d003      	beq.n	8000944 <Process_State2_Inputs+0x2c>
	{
		Process_vehicleDrive_Inputs_off();
 800093c:	f000 f820 	bl	8000980 <Process_vehicleDrive_Inputs_off>
		Process_ig2_lights_off();
 8000940:	f000 f844 	bl	80009cc <Process_ig2_lights_off>
	}

}
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	1fff48d0 	.word	0x1fff48d0

0800094c <Process_vehicleDrive_Inputs>:

void Process_vehicleDrive_Inputs(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = Switch_Ios_IN.gear_sw1_IN;//neutral
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000952:	7a5a      	ldrb	r2, [r3, #9]
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000956:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = Switch_Ios_IN.gear_sw2_IN;//forward
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800095a:	7a9a      	ldrb	r2, [r3, #10]
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800095e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = Switch_Ios_IN.gear_sw3_IN;//reverse
 8000960:	4b05      	ldr	r3, [pc, #20]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 8000962:	7ada      	ldrb	r2, [r3, #11]
 8000964:	4b05      	ldr	r3, [pc, #20]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 8000966:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = Switch_Ios_IN.gear_sw4_IN;//park
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <Process_vehicleDrive_Inputs+0x2c>)
 800096a:	7b1a      	ldrb	r2, [r3, #12]
 800096c:	4b03      	ldr	r3, [pc, #12]	; (800097c <Process_vehicleDrive_Inputs+0x30>)
 800096e:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay;
}
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	1fff4848 	.word	0x1fff4848
 800097c:	1fff4808 	.word	0x1fff4808

08000980 <Process_vehicleDrive_Inputs_off>:
void Process_vehicleDrive_Inputs_off(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
	Motor_controller_OUT.neutral = HIGH;// neutral
 8000984:	4b09      	ldr	r3, [pc, #36]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000986:	2201      	movs	r2, #1
 8000988:	711a      	strb	r2, [r3, #4]
	Motor_controller_OUT.forward_Relay = LOW;//forward
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800098c:	2200      	movs	r2, #0
 800098e:	70da      	strb	r2, [r3, #3]
	Motor_controller_OUT.reverse_relay = LOW;//reverse
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000992:	2200      	movs	r2, #0
 8000994:	705a      	strb	r2, [r3, #1]
	Motor_controller_OUT.park_relay = LOW;//park
 8000996:	4b05      	ldr	r3, [pc, #20]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 8000998:	2200      	movs	r2, #0
 800099a:	709a      	strb	r2, [r3, #2]
	Motor_controller_OUT.regen_relay = LOW;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <Process_vehicleDrive_Inputs_off+0x2c>)
 800099e:	2200      	movs	r2, #0
 80009a0:	701a      	strb	r2, [r3, #0]

}
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	1fff4808 	.word	0x1fff4808

080009b0 <Process_ig2_lights>:

void Process_ig2_lights(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = Switch_Ios_IN.gear_sw3_IN;
 80009b4:	4b03      	ldr	r3, [pc, #12]	; (80009c4 <Process_ig2_lights+0x14>)
 80009b6:	7ada      	ldrb	r2, [r3, #11]
 80009b8:	4b03      	ldr	r3, [pc, #12]	; (80009c8 <Process_ig2_lights+0x18>)
 80009ba:	709a      	strb	r2, [r3, #2]
}
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr
 80009c4:	1fff4848 	.word	0x1fff4848
 80009c8:	1fff48b0 	.word	0x1fff48b0

080009cc <Process_ig2_lights_off>:

void Process_ig2_lights_off(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
	Lights_OUT.reverse_light_out = LOW;
 80009d0:	4b03      	ldr	r3, [pc, #12]	; (80009e0 <Process_ig2_lights_off+0x14>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	709a      	strb	r2, [r3, #2]
}
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	1fff48b0 	.word	0x1fff48b0

080009e4 <Process_VcuOutputs_Update>:


int *cluster_door_in = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[0];

void Process_VcuOutputs_Update(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
	allFaults_Process();
 80009e8:	f7ff fd36 	bl	8000458 <allFaults_Process>

	Vcu_OutPuts.charger_connect_OUT = charger_on();
 80009ec:	f000 f8dc 	bl	8000ba8 <charger_on>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	bf14      	ite	ne
 80009f6:	2301      	movne	r3, #1
 80009f8:	2300      	moveq	r3, #0
 80009fa:	b2da      	uxtb	r2, r3
 80009fc:	4b2a      	ldr	r3, [pc, #168]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 80009fe:	709a      	strb	r2, [r3, #2]
	Vcu_OutPuts.IGNITION_1_OUT = Vcu_InPuts.IGNITION_1_IN;
 8000a00:	4b2a      	ldr	r3, [pc, #168]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b28      	ldr	r3, [pc, #160]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a06:	701a      	strb	r2, [r3, #0]

	Relay_Control_Switch_OUT.elec_handbrake_pwr_out = (Switch_Ios_IN.handbrake_sw_IN || Switch_Ios_IN.electronic_brake_in_d);
 8000a08:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a0a:	7a1b      	ldrb	r3, [r3, #8]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d103      	bne.n	8000a18 <Process_VcuOutputs_Update+0x34>
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a12:	795b      	ldrb	r3, [r3, #5]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <Process_VcuOutputs_Update+0x38>
 8000a18:	2301      	movs	r3, #1
 8000a1a:	e000      	b.n	8000a1e <Process_VcuOutputs_Update+0x3a>
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	f003 0301 	and.w	r3, r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <Process_VcuOutputs_Update+0xd0>)
 8000a26:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

	if(!Vcu_OutPuts.charger_connect_OUT)
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a2c:	789b      	ldrb	r3, [r3, #2]
 8000a2e:	f083 0301 	eor.w	r3, r3, #1
 8000a32:	b2db      	uxtb	r3, r3
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d004      	beq.n	8000a42 <Process_VcuOutputs_Update+0x5e>
		Vcu_OutPuts.IGNITION_2_OUT = Vcu_InPuts.IGNITION_2_IN;
 8000a38:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <Process_VcuOutputs_Update+0xc8>)
 8000a3a:	785a      	ldrb	r2, [r3, #1]
 8000a3c:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a3e:	705a      	strb	r2, [r3, #1]
 8000a40:	e002      	b.n	8000a48 <Process_VcuOutputs_Update+0x64>
	else
		Vcu_OutPuts.IGNITION_2_OUT = false;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	705a      	strb	r2, [r3, #1]

	if(Vcu_OutPuts.IGNITION_1_OUT || Vcu_OutPuts.IGNITION_2_OUT)
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d103      	bne.n	8000a58 <Process_VcuOutputs_Update+0x74>
 8000a50:	4b15      	ldr	r3, [pc, #84]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a52:	785b      	ldrb	r3, [r3, #1]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d00f      	beq.n	8000a78 <Process_VcuOutputs_Update+0x94>
	{
		Lights_OUT.brake_switch_out_d = !Switch_Ios_IN.brake_sw_in_d;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <Process_VcuOutputs_Update+0xcc>)
 8000a5a:	7c9b      	ldrb	r3, [r3, #18]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	bf14      	ite	ne
 8000a60:	2301      	movne	r3, #1
 8000a62:	2300      	moveq	r3, #0
 8000a64:	b2db      	uxtb	r3, r3
 8000a66:	f083 0301 	eor.w	r3, r3, #1
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a74:	705a      	strb	r2, [r3, #1]
 8000a76:	e002      	b.n	8000a7e <Process_VcuOutputs_Update+0x9a>
	}
	else
	{
		Lights_OUT.brake_switch_out_d = false;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <Process_VcuOutputs_Update+0xd4>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	705a      	strb	r2, [r3, #1]
	}

	if(Vcu_OutPuts.IGNITION_2_OUT && (Vcu_OutPuts.IGNITION_1_OUT == 0))
 8000a7e:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a80:	785b      	ldrb	r3, [r3, #1]
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d009      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
 8000a86:	4b08      	ldr	r3, [pc, #32]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	f083 0301 	eor.w	r3, r3, #1
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d002      	beq.n	8000a9a <Process_VcuOutputs_Update+0xb6>
	{
		Vcu_OutPuts.IGNITION_1_OUT = 1;
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Process_VcuOutputs_Update+0xc4>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	701a      	strb	r2, [r3, #0]
	}

	all_doors();
 8000a9a:	f000 f80f 	bl	8000abc <all_doors>

	Process_State1_Inputs();
 8000a9e:	f7ff fd03 	bl	80004a8 <Process_State1_Inputs>
	Process_State2_Inputs();
 8000aa2:	f7ff ff39 	bl	8000918 <Process_State2_Inputs>
}
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	1fff48d0 	.word	0x1fff48d0
 8000aac:	1fff5108 	.word	0x1fff5108
 8000ab0:	1fff4848 	.word	0x1fff4848
 8000ab4:	1fff47b4 	.word	0x1fff47b4
 8000ab8:	1fff48b0 	.word	0x1fff48b0

08000abc <all_doors>:

void all_doors(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
	int charging = 0;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
	Door_Switch_OUT.driver_door_OUT = Door_Switch_IN.driver_door_IN;
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <all_doors+0xdc>)
 8000ac8:	785a      	ldrb	r2, [r3, #1]
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <all_doors+0xe0>)
 8000acc:	705a      	strb	r2, [r3, #1]
	Door_Switch_OUT.passenger_door_OUT = Door_Switch_IN.passenger_door_IN;
 8000ace:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <all_doors+0xdc>)
 8000ad0:	789a      	ldrb	r2, [r3, #2]
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <all_doors+0xe0>)
 8000ad4:	709a      	strb	r2, [r3, #2]
	Door_Switch_OUT.bonnet_OUT = 0;//Door_Switch_IN.bonnet_IN;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <all_doors+0xe0>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	719a      	strb	r2, [r3, #6]
	Door_Switch_OUT.hatch_OUT = Door_Switch_IN.hatch_IN;
 8000adc:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <all_doors+0xdc>)
 8000ade:	795a      	ldrb	r2, [r3, #5]
 8000ae0:	4b2e      	ldr	r3, [pc, #184]	; (8000b9c <all_doors+0xe0>)
 8000ae2:	715a      	strb	r2, [r3, #5]

	if(!Door_Switch_IN.driver_door_IN)
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <all_doors+0xdc>)
 8000ae6:	785b      	ldrb	r3, [r3, #1]
 8000ae8:	f083 0301 	eor.w	r3, r3, #1
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d003      	beq.n	8000afa <all_doors+0x3e>
		instrument_cluster_doorsvar.driver_door_OUT = (uint8_t)right_door;
 8000af2:	4b2b      	ldr	r3, [pc, #172]	; (8000ba0 <all_doors+0xe4>)
 8000af4:	2202      	movs	r2, #2
 8000af6:	705a      	strb	r2, [r3, #1]
 8000af8:	e002      	b.n	8000b00 <all_doors+0x44>
	else
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <all_doors+0xe4>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	705a      	strb	r2, [r3, #1]

	if(!Door_Switch_IN.passenger_door_IN)
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <all_doors+0xdc>)
 8000b02:	789b      	ldrb	r3, [r3, #2]
 8000b04:	f083 0301 	eor.w	r3, r3, #1
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d003      	beq.n	8000b16 <all_doors+0x5a>
		instrument_cluster_doorsvar.passenger_door_OUT = (uint8_t)left_door;
 8000b0e:	4b24      	ldr	r3, [pc, #144]	; (8000ba0 <all_doors+0xe4>)
 8000b10:	2201      	movs	r2, #1
 8000b12:	709a      	strb	r2, [r3, #2]
 8000b14:	e002      	b.n	8000b1c <all_doors+0x60>
	else
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <all_doors+0xe4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	709a      	strb	r2, [r3, #2]

	if(!Door_Switch_IN.bonnet_IN)
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	; (8000b98 <all_doors+0xdc>)
 8000b1e:	799b      	ldrb	r3, [r3, #6]
 8000b20:	f083 0301 	eor.w	r3, r3, #1
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <all_doors+0x76>
		instrument_cluster_doorsvar.bonnet_OUT = 0;//(uint8_t)hood;
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ba0 <all_doors+0xe4>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	719a      	strb	r2, [r3, #6]
 8000b30:	e002      	b.n	8000b38 <all_doors+0x7c>
	else
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <all_doors+0xe4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	719a      	strb	r2, [r3, #6]

	if(!Door_Switch_IN.hatch_IN)
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <all_doors+0xdc>)
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	f083 0301 	eor.w	r3, r3, #1
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d003      	beq.n	8000b4e <all_doors+0x92>
		instrument_cluster_doorsvar.hatch_OUT = (uint8_t)tailgate;
 8000b46:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <all_doors+0xe4>)
 8000b48:	2208      	movs	r2, #8
 8000b4a:	715a      	strb	r2, [r3, #5]
 8000b4c:	e002      	b.n	8000b54 <all_doors+0x98>
	else
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <all_doors+0xe4>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	715a      	strb	r2, [r3, #5]

	charging = 0x20;
 8000b54:	2320      	movs	r3, #32
 8000b56:	607b      	str	r3, [r7, #4]

	if(charger_on())
 8000b58:	f000 f826 	bl	8000ba8 <charger_on>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d00c      	beq.n	8000b7c <all_doors+0xc0>
	{
		instrument_cluster_doorsvar.driver_door_OUT = 0;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <all_doors+0xe4>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	705a      	strb	r2, [r3, #1]
		instrument_cluster_doorsvar.passenger_door_OUT = 0;
 8000b68:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <all_doors+0xe4>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	709a      	strb	r2, [r3, #2]
		instrument_cluster_doorsvar.bonnet_OUT = 0;
 8000b6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <all_doors+0xe4>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	719a      	strb	r2, [r3, #6]
		instrument_cluster_doorsvar.hatch_OUT = 0;
 8000b74:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <all_doors+0xe4>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	715a      	strb	r2, [r3, #5]
 8000b7a:	e004      	b.n	8000b86 <all_doors+0xca>
	}
	else
	{
		charging = 0x00;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
		charge_complete = 0x00;
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <all_doors+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	701a      	strb	r2, [r3, #0]
	}

	if(charge_complete)
 8000b86:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <all_doors+0xe8>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <all_doors+0xd6>
		charging = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]

	//*cluster_door_in = instrument_cluster_doorsvar.driver_door_OUT + instrument_cluster_doorsvar.passenger_door_OUT + instrument_cluster_doorsvar.bonnet_OUT + instrument_cluster_doorsvar.hatch_OUT + charge_complete + charging;
}
 8000b92:	3708      	adds	r7, #8
 8000b94:	46bd      	mov	sp, r7
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	1fff48bc 	.word	0x1fff48bc
 8000b9c:	1fff4834 	.word	0x1fff4834
 8000ba0:	1fff48e0 	.word	0x1fff48e0
 8000ba4:	1fff485d 	.word	0x1fff485d

08000ba8 <charger_on>:


int charger_on(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
	return Vcu_InPuts.charger_connect_IN;
 8000bac:	4b03      	ldr	r3, [pc, #12]	; (8000bbc <charger_on+0x14>)
 8000bae:	789b      	ldrb	r3, [r3, #2]
	//return charging_connected ;
	return 0;
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	1fff5108 	.word	0x1fff5108

08000bc0 <init_hw>:
 */

#include "DAVE.h"

void init_hw(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status = DAVE_STATUS_SUCCESS;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]

	if (init_status == DAVE_STATUS_SUCCESS)
 8000bca:	79fb      	ldrb	r3, [r7, #7]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d104      	bne.n	8000bda <init_hw+0x1a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0);
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <init_hw+0x30>)
 8000bd2:	f007 ff8f 	bl	8008af4 <CAN_NODE_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	}
	if (init_status == DAVE_STATUS_SUCCESS)
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d104      	bne.n	8000bea <init_hw+0x2a>
	{
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1);
 8000be0:	4804      	ldr	r0, [pc, #16]	; (8000bf4 <init_hw+0x34>)
 8000be2:	f007 ff87 	bl	8008af4 <CAN_NODE_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
   }

}
 8000bea:	3708      	adds	r7, #8
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	08013958 	.word	0x08013958
 8000bf4:	08013b40 	.word	0x08013b40

08000bf8 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8000c04:	78fb      	ldrb	r3, [r7, #3]
 8000c06:	2201      	movs	r2, #1
 8000c08:	409a      	lsls	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	605a      	str	r2, [r3, #4]
}
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr

08000c18 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	460b      	mov	r3, r1
 8000c22:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8000c24:	78fb      	ldrb	r3, [r7, #3]
 8000c26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c2a:	409a      	lsls	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	605a      	str	r2, [r3, #4]
}
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	0000      	movs	r0, r0
	...

08000c40 <DROPPED_IN_12_volt>:
uint8_t adc3_array_counter = 0;

///**************************** THINGS TO UPDATE FIRST *********************************

void DROPPED_IN_12_volt(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60fb      	str	r3, [r7, #12]
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	72fb      	strb	r3, [r7, #11]
 8000c4e:	e00b      	b.n	8000c68 <DROPPED_IN_12_volt+0x28>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
 8000c50:	7afb      	ldrb	r3, [r7, #11]
 8000c52:	4a21      	ldr	r2, [pc, #132]	; (8000cd8 <DROPPED_IN_12_volt+0x98>)
 8000c54:	4413      	add	r3, r2
 8000c56:	f893 3258 	ldrb.w	r3, [r3, #600]	; 0x258
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

void DROPPED_IN_12_volt(void)
{
//		float adc_vout = ((ADS3_avg_receive_data[12] / 50)-2) * (2.5 /256);
	uint32_t avg_receive_data = 0;
	for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000c62:	7afb      	ldrb	r3, [r7, #11]
 8000c64:	3301      	adds	r3, #1
 8000c66:	72fb      	strb	r3, [r7, #11]
 8000c68:	7afb      	ldrb	r3, [r7, #11]
 8000c6a:	2b31      	cmp	r3, #49	; 0x31
 8000c6c:	d9f0      	bls.n	8000c50 <DROPPED_IN_12_volt+0x10>
	{
		avg_receive_data += ADS3_receive_data[12][cnt];
	}
	float adc_vout = (avg_receive_data / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	4a1a      	ldr	r2, [pc, #104]	; (8000cdc <DROPPED_IN_12_volt+0x9c>)
 8000c72:	fba2 2303 	umull	r2, r3, r2, r3
 8000c76:	091b      	lsrs	r3, r3, #4
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f00f febb 	bl	80109f4 <__aeabi_ui2d>
 8000c7e:	4602      	mov	r2, r0
 8000c80:	460b      	mov	r3, r1
 8000c82:	4610      	mov	r0, r2
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 0200 	mov.w	r2, #0
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <DROPPED_IN_12_volt+0xa0>)
 8000c8c:	f00f ff28 	bl	8010ae0 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f010 fa04 	bl	80110a4 <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	607b      	str	r3, [r7, #4]
	DROPPED_IN_12V = adc_vout / ATTENUATION;
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f00f fec9 	bl	8010a38 <__aeabi_f2d>
 8000ca6:	4602      	mov	r2, r0
 8000ca8:	460b      	mov	r3, r1
 8000caa:	4610      	mov	r0, r2
 8000cac:	4619      	mov	r1, r3
 8000cae:	a308      	add	r3, pc, #32	; (adr r3, 8000cd0 <DROPPED_IN_12_volt+0x90>)
 8000cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb4:	f010 f83e 	bl	8010d34 <__aeabi_ddiv>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	f010 f9f0 	bl	80110a4 <__aeabi_d2f>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <DROPPED_IN_12_volt+0xa4>)
 8000cc8:	601a      	str	r2, [r3, #0]
}
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	e147ae14 	.word	0xe147ae14
 8000cd4:	3fbe147a 	.word	0x3fbe147a
 8000cd8:	1fff49b0 	.word	0x1fff49b0
 8000cdc:	51eb851f 	.word	0x51eb851f
 8000ce0:	3f840000 	.word	0x3f840000
 8000ce4:	1fff4398 	.word	0x1fff4398

08000ce8 <convert_raw_data_into_current>:

void convert_raw_data_into_current(void)
{
 8000ce8:	b590      	push	{r4, r7, lr}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000cee:	4864      	ldr	r0, [pc, #400]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2240      	movs	r2, #64	; 0x40
 8000cf4:	f010 fd2d 	bl	8011752 <memset>
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000cf8:	4862      	ldr	r0, [pc, #392]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	2240      	movs	r2, #64	; 0x40
 8000cfe:	f010 fd28 	bl	8011752 <memset>

	for(int i = 0; i < 16; i++)
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	e0ac      	b.n	8000e62 <convert_raw_data_into_current+0x17a>
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	72fb      	strb	r3, [r7, #11]
 8000d0c:	e026      	b.n	8000d5c <convert_raw_data_into_current+0x74>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
 8000d0e:	4a5c      	ldr	r2, [pc, #368]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d16:	7afa      	ldrb	r2, [r7, #11]
 8000d18:	485b      	ldr	r0, [pc, #364]	; (8000e88 <convert_raw_data_into_current+0x1a0>)
 8000d1a:	68f9      	ldr	r1, [r7, #12]
 8000d1c:	2432      	movs	r4, #50	; 0x32
 8000d1e:	fb04 f101 	mul.w	r1, r4, r1
 8000d22:	440a      	add	r2, r1
 8000d24:	4402      	add	r2, r0
 8000d26:	7812      	ldrb	r2, [r2, #0]
 8000d28:	441a      	add	r2, r3
 8000d2a:	4955      	ldr	r1, [pc, #340]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
 8000d32:	4a54      	ldr	r2, [pc, #336]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d3a:	7afa      	ldrb	r2, [r7, #11]
 8000d3c:	4853      	ldr	r0, [pc, #332]	; (8000e8c <convert_raw_data_into_current+0x1a4>)
 8000d3e:	68f9      	ldr	r1, [r7, #12]
 8000d40:	2432      	movs	r4, #50	; 0x32
 8000d42:	fb04 f101 	mul.w	r1, r4, r1
 8000d46:	440a      	add	r2, r1
 8000d48:	4402      	add	r2, r0
 8000d4a:	7812      	ldrb	r2, [r2, #0]
 8000d4c:	441a      	add	r2, r3
 8000d4e:	494d      	ldr	r1, [pc, #308]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
	{
		for(uint8_t cnt = 0; cnt < TOTAL_SAMPLES; cnt++)
 8000d56:	7afb      	ldrb	r3, [r7, #11]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	72fb      	strb	r3, [r7, #11]
 8000d5c:	7afb      	ldrb	r3, [r7, #11]
 8000d5e:	2b31      	cmp	r3, #49	; 0x31
 8000d60:	d9d5      	bls.n	8000d0e <convert_raw_data_into_current+0x26>
		{
			ADS2_avg_receive_data[i] += ADS2_receive_data[i][cnt];
			ADS3_avg_receive_data[i] += ADS3_receive_data[i][cnt];
		}

		float adc_vout = (ADS2_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000d62:	4a47      	ldr	r2, [pc, #284]	; (8000e80 <convert_raw_data_into_current+0x198>)
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d6a:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <convert_raw_data_into_current+0x1a8>)
 8000d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d70:	091b      	lsrs	r3, r3, #4
 8000d72:	4618      	mov	r0, r3
 8000d74:	f00f fe3e 	bl	80109f4 <__aeabi_ui2d>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	460b      	mov	r3, r1
 8000d7c:	4610      	mov	r0, r2
 8000d7e:	4619      	mov	r1, r3
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	4b43      	ldr	r3, [pc, #268]	; (8000e94 <convert_raw_data_into_current+0x1ac>)
 8000d86:	f00f feab 	bl	8010ae0 <__aeabi_dmul>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	4610      	mov	r0, r2
 8000d90:	4619      	mov	r1, r3
 8000d92:	f010 f987 	bl	80110a4 <__aeabi_d2f>
 8000d96:	4603      	mov	r3, r0
 8000d98:	607b      	str	r3, [r7, #4]
		adc2_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000d9a:	6878      	ldr	r0, [r7, #4]
 8000d9c:	f00f fe4c 	bl	8010a38 <__aeabi_f2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	4610      	mov	r0, r2
 8000da6:	4619      	mov	r1, r3
 8000da8:	a331      	add	r3, pc, #196	; (adr r3, 8000e70 <convert_raw_data_into_current+0x188>)
 8000daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dae:	f00f ffc1 	bl	8010d34 <__aeabi_ddiv>
 8000db2:	4602      	mov	r2, r0
 8000db4:	460b      	mov	r3, r1
 8000db6:	4610      	mov	r0, r2
 8000db8:	4619      	mov	r1, r3
 8000dba:	a32f      	add	r3, pc, #188	; (adr r3, 8000e78 <convert_raw_data_into_current+0x190>)
 8000dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc0:	f00f ffb8 	bl	8010d34 <__aeabi_ddiv>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	4610      	mov	r0, r2
 8000dca:	4619      	mov	r1, r3
 8000dcc:	f010 f96a 	bl	80110a4 <__aeabi_d2f>
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4a31      	ldr	r2, [pc, #196]	; (8000e98 <convert_raw_data_into_current+0x1b0>)
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	4413      	add	r3, r2
 8000dda:	6019      	str	r1, [r3, #0]

		adc_vout = 0;
 8000ddc:	f04f 0300 	mov.w	r3, #0
 8000de0:	607b      	str	r3, [r7, #4]
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
 8000de2:	4a28      	ldr	r2, [pc, #160]	; (8000e84 <convert_raw_data_into_current+0x19c>)
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dea:	4a29      	ldr	r2, [pc, #164]	; (8000e90 <convert_raw_data_into_current+0x1a8>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	091b      	lsrs	r3, r3, #4
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00f fdfe 	bl	80109f4 <__aeabi_ui2d>
 8000df8:	4602      	mov	r2, r0
 8000dfa:	460b      	mov	r3, r1
 8000dfc:	4610      	mov	r0, r2
 8000dfe:	4619      	mov	r1, r3
 8000e00:	f04f 0200 	mov.w	r2, #0
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <convert_raw_data_into_current+0x1ac>)
 8000e06:	f00f fe6b 	bl	8010ae0 <__aeabi_dmul>
 8000e0a:	4602      	mov	r2, r0
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	4610      	mov	r0, r2
 8000e10:	4619      	mov	r1, r3
 8000e12:	f010 f947 	bl	80110a4 <__aeabi_d2f>
 8000e16:	4603      	mov	r3, r0
 8000e18:	607b      	str	r3, [r7, #4]
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f00f fe0c 	bl	8010a38 <__aeabi_f2d>
 8000e20:	4602      	mov	r2, r0
 8000e22:	460b      	mov	r3, r1
 8000e24:	4610      	mov	r0, r2
 8000e26:	4619      	mov	r1, r3
 8000e28:	a311      	add	r3, pc, #68	; (adr r3, 8000e70 <convert_raw_data_into_current+0x188>)
 8000e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2e:	f00f ff81 	bl	8010d34 <__aeabi_ddiv>
 8000e32:	4602      	mov	r2, r0
 8000e34:	460b      	mov	r3, r1
 8000e36:	4610      	mov	r0, r2
 8000e38:	4619      	mov	r1, r3
 8000e3a:	a30f      	add	r3, pc, #60	; (adr r3, 8000e78 <convert_raw_data_into_current+0x190>)
 8000e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e40:	f00f ff78 	bl	8010d34 <__aeabi_ddiv>
 8000e44:	4602      	mov	r2, r0
 8000e46:	460b      	mov	r3, r1
 8000e48:	4610      	mov	r0, r2
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f010 f92a 	bl	80110a4 <__aeabi_d2f>
 8000e50:	4601      	mov	r1, r0
 8000e52:	4a12      	ldr	r2, [pc, #72]	; (8000e9c <convert_raw_data_into_current+0x1b4>)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	009b      	lsls	r3, r3, #2
 8000e58:	4413      	add	r3, r2
 8000e5a:	6019      	str	r1, [r3, #0]
void convert_raw_data_into_current(void)
{
	memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
	memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));

	for(int i = 0; i < 16; i++)
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b0f      	cmp	r3, #15
 8000e66:	f77f af4f 	ble.w	8000d08 <convert_raw_data_into_current+0x20>

		adc_vout = 0;
		adc_vout = (ADS3_avg_receive_data[i] / TOTAL_SAMPLES) * (VREF /RESOLUTION);
		adc3_current[i] = (adc_vout / ADC_GAIN) / RSHUNT;
	}
}
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	33333333 	.word	0x33333333
 8000e74:	4062e333 	.word	0x4062e333
 8000e78:	d2f1a9fc 	.word	0xd2f1a9fc
 8000e7c:	3f40624d 	.word	0x3f40624d
 8000e80:	1fff4cd0 	.word	0x1fff4cd0
 8000e84:	1fff4d10 	.word	0x1fff4d10
 8000e88:	1fff4de4 	.word	0x1fff4de4
 8000e8c:	1fff49b0 	.word	0x1fff49b0
 8000e90:	51eb851f 	.word	0x51eb851f
 8000e94:	3f840000 	.word	0x3f840000
 8000e98:	1fff4d54 	.word	0x1fff4d54
 8000e9c:	1fff48e8 	.word	0x1fff48e8

08000ea0 <SPI_ADC_ProcessModeChange>:

void SPI_ADC_ProcessModeChange(uint8_t ADCMode)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
	if(ADC_AUTO1 == ADCMode)
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d00d      	beq.n	8000ecc <SPI_ADC_ProcessModeChange+0x2c>
	{
		//change operating mode to AUTO1
	}
	else if(ADC_AUTO2 == ADCMode)
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d108      	bne.n	8000ec8 <SPI_ADC_ProcessModeChange+0x28>
	{
		//read only ADC3 right now later on add ADC2
		SPI_ADS7961_AUTO_MODE2(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
 8000eb6:	2002      	movs	r0, #2
 8000eb8:	2106      	movs	r1, #6
 8000eba:	f000 f8e9 	bl	8001090 <SPI_ADS7961_AUTO_MODE2>
		SPI_ADS7961_AUTO_MODE2(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
 8000ebe:	2005      	movs	r0, #5
 8000ec0:	2106      	movs	r1, #6
 8000ec2:	f000 f8e5 	bl	8001090 <SPI_ADS7961_AUTO_MODE2>
 8000ec6:	e001      	b.n	8000ecc <SPI_ADC_ProcessModeChange+0x2c>
	}
	else //manual mode
	{
		//configure manual mode
		SPI_ADC_MANUAL_MODE();
 8000ec8:	f000 f806 	bl	8000ed8 <SPI_ADC_MANUAL_MODE>
	}

	//do not call this right now you can call this when it is in use.
	convert_raw_data_into_current();
 8000ecc:	f7ff ff0c 	bl	8000ce8 <convert_raw_data_into_current>
}
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop

08000ed8 <SPI_ADC_MANUAL_MODE>:

void SPI_ADC_MANUAL_MODE(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	//ADC_Read_AllChannel(ADS2_Port5 ,ADS2_Pin);//pass Ads cs port and pin
	//ADC_Read_AllChannel(ADS3_Port2,ADS3_Pin);//pass Ads cs port and pin
	ADC_Read_by_Channel(ADS3_Port2,ADS3_Pin,12);//pass Ads cs port , pin and channel
 8000edc:	2002      	movs	r0, #2
 8000ede:	2106      	movs	r1, #6
 8000ee0:	220c      	movs	r2, #12
 8000ee2:	f000 f99b 	bl	800121c <ADC_Read_by_Channel>
}
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <ADS7861_MANUAL_MODE_PKT>:

uint16_t ADS7861_MANUAL_MODE_PKT(uint16_t channel) {
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]

	ADS7961Frame_t transmitPkt;
	transmitPkt.Bit.operating_mode=1;
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f362 1307 	bfi	r3, r2, #4, #4
 8000efa:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.enable_D0_to_D6=0;
 8000efc:	7b7b      	ldrb	r3, [r7, #13]
 8000efe:	f36f 03c3 	bfc	r3, #3, #1
 8000f02:	737b      	strb	r3, [r7, #13]
	transmitPkt.Bit.channel_selection=channel;
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	b2db      	uxtb	r3, r3
 8000f08:	f003 030f 	and.w	r3, r3, #15
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	89bb      	ldrh	r3, [r7, #12]
 8000f10:	f362 13ca 	bfi	r3, r2, #7, #4
 8000f14:	81bb      	strh	r3, [r7, #12]
	transmitPkt.Bit.input_range=0;
 8000f16:	7b3b      	ldrb	r3, [r7, #12]
 8000f18:	f36f 1386 	bfc	r3, #6, #1
 8000f1c:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.device_operation=0;
 8000f1e:	7b3b      	ldrb	r3, [r7, #12]
 8000f20:	f36f 1345 	bfc	r3, #5, #1
 8000f24:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.output_mode=0;
 8000f26:	7b3b      	ldrb	r3, [r7, #12]
 8000f28:	f36f 1304 	bfc	r3, #4, #1
 8000f2c:	733b      	strb	r3, [r7, #12]
	transmitPkt.Bit.GPIO_Output=0;
 8000f2e:	7b3b      	ldrb	r3, [r7, #12]
 8000f30:	f36f 0303 	bfc	r3, #0, #4
 8000f34:	733b      	strb	r3, [r7, #12]
	return  transmitPkt.F_Data;
 8000f36:	89bb      	ldrh	r3, [r7, #12]
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr

08000f44 <SPI_ADS7961_AUTO2_Init>:
		}
	}
}

void SPI_ADS7961_AUTO2_Init(uint8_t temp_port_num ,uint8_t pin_number)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08c      	sub	sp, #48	; 0x30
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	460a      	mov	r2, r1
 8000f4e:	71fb      	strb	r3, [r7, #7]
 8000f50:	4613      	mov	r3, r2
 8000f52:	71bb      	strb	r3, [r7, #6]
	XMC_GPIO_PORT_t * temp_ptr;

	if(temp_port_num == 5)
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2b05      	cmp	r3, #5
 8000f58:	d107      	bne.n	8000f6a <SPI_ADS7961_AUTO2_Init+0x26>
	{
		temp_ptr = XMC_GPIO_PORT5;
 8000f5a:	4b48      	ldr	r3, [pc, #288]	; (800107c <SPI_ADS7961_AUTO2_Init+0x138>)
 8000f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS2_avg_receive_data, 0, sizeof(ADS2_avg_receive_data));
 8000f5e:	4848      	ldr	r0, [pc, #288]	; (8001080 <SPI_ADS7961_AUTO2_Init+0x13c>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	2240      	movs	r2, #64	; 0x40
 8000f64:	f010 fbf5 	bl	8011752 <memset>
 8000f68:	e009      	b.n	8000f7e <SPI_ADS7961_AUTO2_Init+0x3a>
	}
	else if(temp_port_num == 2)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d106      	bne.n	8000f7e <SPI_ADS7961_AUTO2_Init+0x3a>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8000f70:	4b44      	ldr	r3, [pc, #272]	; (8001084 <SPI_ADS7961_AUTO2_Init+0x140>)
 8000f72:	62fb      	str	r3, [r7, #44]	; 0x2c
		memset(ADS3_avg_receive_data, 0, sizeof(ADS3_avg_receive_data));
 8000f74:	4844      	ldr	r0, [pc, #272]	; (8001088 <SPI_ADS7961_AUTO2_Init+0x144>)
 8000f76:	2100      	movs	r1, #0
 8000f78:	2240      	movs	r2, #64	; 0x40
 8000f7a:	f010 fbea 	bl	8011752 <memset>
	}

	uint8_t SendData[2] = { 0x3C, 0x00 }; //{MODE_CONTROL_AUTO2 >> 8, MODE_CONTROL_AUTO2 && 0xFF};
 8000f7e:	233c      	movs	r3, #60	; 0x3c
 8000f80:	753b      	strb	r3, [r7, #20]
 8000f82:	2300      	movs	r3, #0
 8000f84:	757b      	strb	r3, [r7, #21]
	uint8_t SendData1[2];

	if(temp_port_num == 5)
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d104      	bne.n	8000f96 <SPI_ADS7961_AUTO2_Init+0x52>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000f8c:	2393      	movs	r3, #147	; 0x93
 8000f8e:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0xC0;
 8000f90:	23c0      	movs	r3, #192	; 0xc0
 8000f92:	747b      	strb	r3, [r7, #17]
 8000f94:	e006      	b.n	8000fa4 <SPI_ADS7961_AUTO2_Init+0x60>
	}
	else if(temp_port_num == 2)
 8000f96:	79fb      	ldrb	r3, [r7, #7]
 8000f98:	2b02      	cmp	r3, #2
 8000f9a:	d103      	bne.n	8000fa4 <SPI_ADS7961_AUTO2_Init+0x60>
	{
		SendData1[0] = 0x93;   //{PROGRAM_REGISTER_AUTO2 >>8, PROGRAM_REGISTER_AUTO2 && 0xFF};
 8000f9c:	2393      	movs	r3, #147	; 0x93
 8000f9e:	743b      	strb	r3, [r7, #16]
		SendData1[1] =  0x00;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	747b      	strb	r3, [r7, #17]
	}
	uint8_t SendData2[2] = {0x00,0x00} ; //{CONTINUE_MODE_PREVIOUS >>8, CONTINUE_MODE_PREVIOUS && 0xFF};
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	733b      	strb	r3, [r7, #12]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	737b      	strb	r3, [r7, #13]

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f7ff fe21 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fb6:	79bb      	ldrb	r3, [r7, #6]
 8000fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f7ff fe2c 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fc4:	e002      	b.n	8000fcc <SPI_ADS7961_AUTO2_Init+0x88>
 8000fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc8:	3301      	adds	r3, #1
 8000fca:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	2b09      	cmp	r3, #9
 8000fd0:	dcf9      	bgt.n	8000fc6 <SPI_ADS7961_AUTO2_Init+0x82>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData1, 2);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	482d      	ldr	r0, [pc, #180]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 8000fd8:	4619      	mov	r1, r3
 8000fda:	2202      	movs	r2, #2
 8000fdc:	f005 fed6 	bl	8006d8c <SPI_MASTER_Transmit>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fe0:	79bb      	ldrb	r3, [r7, #6]
 8000fe2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f7ff fe07 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

    XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	f7ff fe12 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff8:	e002      	b.n	8001000 <SPI_ADS7961_AUTO2_Init+0xbc>
 8000ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	2b09      	cmp	r3, #9
 8001004:	dcf9      	bgt.n	8000ffa <SPI_ADS7961_AUTO2_Init+0xb6>
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 8001006:	f107 0314 	add.w	r3, r7, #20
 800100a:	4820      	ldr	r0, [pc, #128]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 800100c:	4619      	mov	r1, r3
 800100e:	2202      	movs	r2, #2
 8001010:	f005 febc 	bl	8006d8c <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
 8001018:	e002      	b.n	8001020 <SPI_ADS7961_AUTO2_Init+0xdc>
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	3301      	adds	r3, #1
 800101e:	623b      	str	r3, [r7, #32]
 8001020:	6a3b      	ldr	r3, [r7, #32]
 8001022:	2b09      	cmp	r3, #9
 8001024:	dcf9      	bgt.n	800101a <SPI_ADS7961_AUTO2_Init+0xd6>
	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001026:	79bb      	ldrb	r3, [r7, #6]
 8001028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	f7ff fde4 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

	XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 8001030:	79bb      	ldrb	r3, [r7, #6]
 8001032:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fdef 	bl	8000c18 <XMC_GPIO_SetOutputLow>
	for (int i = 0; i > 9; i++);
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
 800103e:	e002      	b.n	8001046 <SPI_ADS7961_AUTO2_Init+0x102>
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	3301      	adds	r3, #1
 8001044:	61fb      	str	r3, [r7, #28]
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	2b09      	cmp	r3, #9
 800104a:	dcf9      	bgt.n	8001040 <SPI_ADS7961_AUTO2_Init+0xfc>
	// for CONTINUE MODE PREVIOUS
	SPI_MASTER_Transmit(&SPI_MASTER_0, SendData2, 2);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	480e      	ldr	r0, [pc, #56]	; (800108c <SPI_ADS7961_AUTO2_Init+0x148>)
 8001052:	4619      	mov	r1, r3
 8001054:	2202      	movs	r2, #2
 8001056:	f005 fe99 	bl	8006d8c <SPI_MASTER_Transmit>
	for (int i = 0; i > 9; i++);
 800105a:	2300      	movs	r3, #0
 800105c:	61bb      	str	r3, [r7, #24]
 800105e:	e002      	b.n	8001066 <SPI_ADS7961_AUTO2_Init+0x122>
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	3301      	adds	r3, #1
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b09      	cmp	r3, #9
 800106a:	dcf9      	bgt.n	8001060 <SPI_ADS7961_AUTO2_Init+0x11c>

	XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *)temp_ptr,pin_number);
 800106c:	79bb      	ldrb	r3, [r7, #6]
 800106e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001070:	4619      	mov	r1, r3
 8001072:	f7ff fdc1 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
}
 8001076:	3730      	adds	r7, #48	; 0x30
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	48028500 	.word	0x48028500
 8001080:	1fff4cd0 	.word	0x1fff4cd0
 8001084:	48028200 	.word	0x48028200
 8001088:	1fff4d10 	.word	0x1fff4d10
 800108c:	1ffe89ac 	.word	0x1ffe89ac

08001090 <SPI_ADS7961_AUTO_MODE2>:

//
void SPI_ADS7961_AUTO_MODE2(uint8_t temp_port_num, uint8_t pin_number)
{
 8001090:	b590      	push	{r4, r7, lr}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	460a      	mov	r2, r1
 800109a:	71fb      	strb	r3, [r7, #7]
 800109c:	4613      	mov	r3, r2
 800109e:	71bb      	strb	r3, [r7, #6]
	uint8_t loop = 16;
 80010a0:	2310      	movs	r3, #16
 80010a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t ReadData[2];
//	if(flag==false)
//	{
	SPI_ADS7961_AUTO2_Init(temp_port_num, pin_number);
 80010a6:	79fa      	ldrb	r2, [r7, #7]
 80010a8:	79bb      	ldrb	r3, [r7, #6]
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f7ff ff49 	bl	8000f44 <SPI_ADS7961_AUTO2_Init>
	flag = true;
 80010b2:	4b52      	ldr	r3, [pc, #328]	; (80011fc <SPI_ADS7961_AUTO_MODE2+0x16c>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
//	}

	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	2b05      	cmp	r3, #5
 80010bc:	d102      	bne.n	80010c4 <SPI_ADS7961_AUTO_MODE2+0x34>
	{
		temp_ptr = XMC_GPIO_PORT5;
 80010be:	4b50      	ldr	r3, [pc, #320]	; (8001200 <SPI_ADS7961_AUTO_MODE2+0x170>)
 80010c0:	623b      	str	r3, [r7, #32]
 80010c2:	e007      	b.n	80010d4 <SPI_ADS7961_AUTO_MODE2+0x44>
	}
	else if (temp_port_num == 2)
 80010c4:	79fb      	ldrb	r3, [r7, #7]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d104      	bne.n	80010d4 <SPI_ADS7961_AUTO_MODE2+0x44>
	{
		temp_ptr = XMC_GPIO_PORT2;
 80010ca:	4b4e      	ldr	r3, [pc, #312]	; (8001204 <SPI_ADS7961_AUTO_MODE2+0x174>)
 80010cc:	623b      	str	r3, [r7, #32]
		loop = 13;
 80010ce:	230d      	movs	r3, #13
 80010d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	if(adc2_array_counter > 49)
 80010d4:	4b4c      	ldr	r3, [pc, #304]	; (8001208 <SPI_ADS7961_AUTO_MODE2+0x178>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b31      	cmp	r3, #49	; 0x31
 80010da:	d902      	bls.n	80010e2 <SPI_ADS7961_AUTO_MODE2+0x52>
	{
		adc2_array_counter = 0;
 80010dc:	4b4a      	ldr	r3, [pc, #296]	; (8001208 <SPI_ADS7961_AUTO_MODE2+0x178>)
 80010de:	2200      	movs	r2, #0
 80010e0:	701a      	strb	r2, [r3, #0]
	}

	if(adc3_array_counter > 49)
 80010e2:	4b4a      	ldr	r3, [pc, #296]	; (800120c <SPI_ADS7961_AUTO_MODE2+0x17c>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b31      	cmp	r3, #49	; 0x31
 80010e8:	d902      	bls.n	80010f0 <SPI_ADS7961_AUTO_MODE2+0x60>
	{
		adc3_array_counter = 0;
 80010ea:	4b48      	ldr	r3, [pc, #288]	; (800120c <SPI_ADS7961_AUTO_MODE2+0x17c>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
 80010f4:	e07b      	b.n	80011ee <SPI_ADS7961_AUTO_MODE2+0x15e>
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80010f6:	2300      	movs	r3, #0
 80010f8:	76fb      	strb	r3, [r7, #27]
 80010fa:	e05d      	b.n	80011b8 <SPI_ADS7961_AUTO_MODE2+0x128>
		{
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80010fc:	79bb      	ldrb	r3, [r7, #6]
 80010fe:	6a38      	ldr	r0, [r7, #32]
 8001100:	4619      	mov	r1, r3
 8001102:	f7ff fd79 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
			//for (int i = 0; i > 9; i++);

			XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	6a38      	ldr	r0, [r7, #32]
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd84 	bl	8000c18 <XMC_GPIO_SetOutputLow>
			for (int i = 0; i > 2; i++);
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
 8001114:	e002      	b.n	800111c <SPI_ADS7961_AUTO_MODE2+0x8c>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	3301      	adds	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2b02      	cmp	r3, #2
 8001120:	dcf9      	bgt.n	8001116 <SPI_ADS7961_AUTO_MODE2+0x86>
			SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001122:	f107 030c 	add.w	r3, r7, #12
 8001126:	483a      	ldr	r0, [pc, #232]	; (8001210 <SPI_ADS7961_AUTO_MODE2+0x180>)
 8001128:	4619      	mov	r1, r3
 800112a:	2202      	movs	r2, #2
 800112c:	f005 fe48 	bl	8006dc0 <SPI_MASTER_Receive>
			for (int i = 0; i > 2; i++);
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	e002      	b.n	800113c <SPI_ADS7961_AUTO_MODE2+0xac>
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	3301      	adds	r3, #1
 800113a:	613b      	str	r3, [r7, #16]
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	2b02      	cmp	r3, #2
 8001140:	dcf9      	bgt.n	8001136 <SPI_ADS7961_AUTO_MODE2+0xa6>
			XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001142:	79bb      	ldrb	r3, [r7, #6]
 8001144:	6a38      	ldr	r0, [r7, #32]
 8001146:	4619      	mov	r1, r3
 8001148:	f7ff fd56 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>

			if (temp_port_num == 5)
 800114c:	79fb      	ldrb	r3, [r7, #7]
 800114e:	2b05      	cmp	r3, #5
 8001150:	d116      	bne.n	8001180 <SPI_ADS7961_AUTO_MODE2+0xf0>
			{
				ADS2_receive_data[channel_count][adc2_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 8001152:	7efb      	ldrb	r3, [r7, #27]
 8001154:	4a2c      	ldr	r2, [pc, #176]	; (8001208 <SPI_ADS7961_AUTO_MODE2+0x178>)
 8001156:	7812      	ldrb	r2, [r2, #0]
 8001158:	4614      	mov	r4, r2
 800115a:	7b3a      	ldrb	r2, [r7, #12]
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	7b7a      	ldrb	r2, [r7, #13]
 8001162:	0912      	lsrs	r2, r2, #4
 8001164:	b2d2      	uxtb	r2, r2
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	430a      	orrs	r2, r1
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	b2d0      	uxtb	r0, r2
 800116e:	4a29      	ldr	r2, [pc, #164]	; (8001214 <SPI_ADS7961_AUTO_MODE2+0x184>)
 8001170:	2132      	movs	r1, #50	; 0x32
 8001172:	fb01 f303 	mul.w	r3, r1, r3
 8001176:	4423      	add	r3, r4
 8001178:	4413      	add	r3, r2
 800117a:	4602      	mov	r2, r0
 800117c:	701a      	strb	r2, [r3, #0]
 800117e:	e018      	b.n	80011b2 <SPI_ADS7961_AUTO_MODE2+0x122>
//				ADS2_recive_channel[channel_count] = ((ReadData[0] & 0xF0) >> 4); //uncomment channel for debugging

//				ADS2_avg_receive_data[channel_count] += ADS2_receive_data[channel_count];
			}
			else if (temp_port_num == 2)
 8001180:	79fb      	ldrb	r3, [r7, #7]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d115      	bne.n	80011b2 <SPI_ADS7961_AUTO_MODE2+0x122>
			{
				ADS3_receive_data[channel_count][adc3_array_counter] = ((ReadData[0] & 0x0F) << 4) | ((ReadData[1] & 0xF0) >> 4);
 8001186:	7efb      	ldrb	r3, [r7, #27]
 8001188:	4a20      	ldr	r2, [pc, #128]	; (800120c <SPI_ADS7961_AUTO_MODE2+0x17c>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4614      	mov	r4, r2
 800118e:	7b3a      	ldrb	r2, [r7, #12]
 8001190:	0112      	lsls	r2, r2, #4
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	7b7a      	ldrb	r2, [r7, #13]
 8001196:	0912      	lsrs	r2, r2, #4
 8001198:	b2d2      	uxtb	r2, r2
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	430a      	orrs	r2, r1
 800119e:	b2d2      	uxtb	r2, r2
 80011a0:	b2d0      	uxtb	r0, r2
 80011a2:	4a1d      	ldr	r2, [pc, #116]	; (8001218 <SPI_ADS7961_AUTO_MODE2+0x188>)
 80011a4:	2132      	movs	r1, #50	; 0x32
 80011a6:	fb01 f303 	mul.w	r3, r1, r3
 80011aa:	4423      	add	r3, r4
 80011ac:	4413      	add	r3, r2
 80011ae:	4602      	mov	r2, r0
 80011b0:	701a      	strb	r2, [r3, #0]
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
	{
		for (uint8_t channel_count = 0; channel_count < loop; channel_count++)
 80011b2:	7efb      	ldrb	r3, [r7, #27]
 80011b4:	3301      	adds	r3, #1
 80011b6:	76fb      	strb	r3, [r7, #27]
 80011b8:	7efa      	ldrb	r2, [r7, #27]
 80011ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80011be:	429a      	cmp	r2, r3
 80011c0:	d39c      	bcc.n	80010fc <SPI_ADS7961_AUTO_MODE2+0x6c>

//				ADS3_avg_receive_data[channel_count] += ADS3_receive_data[channel_count];
			}
		}

		if (temp_port_num == 5)
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b05      	cmp	r3, #5
 80011c6:	d106      	bne.n	80011d6 <SPI_ADS7961_AUTO_MODE2+0x146>
		{
			adc2_array_counter++;
 80011c8:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <SPI_ADS7961_AUTO_MODE2+0x178>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	3301      	adds	r3, #1
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <SPI_ADS7961_AUTO_MODE2+0x178>)
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e008      	b.n	80011e8 <SPI_ADS7961_AUTO_MODE2+0x158>
		}
		else if (temp_port_num == 2)
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b02      	cmp	r3, #2
 80011da:	d105      	bne.n	80011e8 <SPI_ADS7961_AUTO_MODE2+0x158>
		{
			adc3_array_counter++;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <SPI_ADS7961_AUTO_MODE2+0x17c>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	3301      	adds	r3, #1
 80011e2:	b2da      	uxtb	r2, r3
 80011e4:	4b09      	ldr	r3, [pc, #36]	; (800120c <SPI_ADS7961_AUTO_MODE2+0x17c>)
 80011e6:	701a      	strb	r2, [r3, #0]
	{
		adc3_array_counter = 0;
	}

	//take 5 samples in one cycle
	for (int i = 0; i < 5; i++)
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	3301      	adds	r3, #1
 80011ec:	61fb      	str	r3, [r7, #28]
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	2b04      	cmp	r3, #4
 80011f2:	dd80      	ble.n	80010f6 <SPI_ADS7961_AUTO_MODE2+0x66>
		else if (temp_port_num == 2)
		{
			adc3_array_counter++;
		}
	}
}
 80011f4:	372c      	adds	r7, #44	; 0x2c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd90      	pop	{r4, r7, pc}
 80011fa:	bf00      	nop
 80011fc:	1fff439c 	.word	0x1fff439c
 8001200:	48028500 	.word	0x48028500
 8001204:	48028200 	.word	0x48028200
 8001208:	1fff439d 	.word	0x1fff439d
 800120c:	1fff439e 	.word	0x1fff439e
 8001210:	1ffe89ac 	.word	0x1ffe89ac
 8001214:	1fff4de4 	.word	0x1fff4de4
 8001218:	1fff49b0 	.word	0x1fff49b0

0800121c <ADC_Read_by_Channel>:

void ADC_Read_by_Channel(uint8_t temp_port_num, uint8_t pin_number, uint8_t channel)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b08e      	sub	sp, #56	; 0x38
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	460b      	mov	r3, r1
 8001228:	71bb      	strb	r3, [r7, #6]
 800122a:	4613      	mov	r3, r2
 800122c:	717b      	strb	r3, [r7, #5]
	XMC_GPIO_PORT_t * temp_ptr;

	if (temp_port_num == 5)
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b05      	cmp	r3, #5
 8001232:	d107      	bne.n	8001244 <ADC_Read_by_Channel+0x28>
	{
		temp_ptr = XMC_GPIO_PORT2;
 8001234:	4b51      	ldr	r3, [pc, #324]	; (800137c <ADC_Read_by_Channel+0x160>)
 8001236:	637b      	str	r3, [r7, #52]	; 0x34
		ADS2_avg_receive_data[channel] = 0;
 8001238:	797b      	ldrb	r3, [r7, #5]
 800123a:	4a51      	ldr	r2, [pc, #324]	; (8001380 <ADC_Read_by_Channel+0x164>)
 800123c:	2100      	movs	r1, #0
 800123e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001242:	e009      	b.n	8001258 <ADC_Read_by_Channel+0x3c>
	}
	else if (temp_port_num == 2)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b02      	cmp	r3, #2
 8001248:	d106      	bne.n	8001258 <ADC_Read_by_Channel+0x3c>
	{
		temp_ptr = XMC_GPIO_PORT2;
 800124a:	4b4c      	ldr	r3, [pc, #304]	; (800137c <ADC_Read_by_Channel+0x160>)
 800124c:	637b      	str	r3, [r7, #52]	; 0x34
		ADS3_avg_receive_data[channel] = 0;
 800124e:	797b      	ldrb	r3, [r7, #5]
 8001250:	4a4c      	ldr	r2, [pc, #304]	; (8001384 <ADC_Read_by_Channel+0x168>)
 8001252:	2100      	movs	r1, #0
 8001254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001258:	2300      	movs	r3, #0
 800125a:	633b      	str	r3, [r7, #48]	; 0x30
 800125c:	e087      	b.n	800136e <ADC_Read_by_Channel+0x152>
	{
		int pkt = ADS7861_MANUAL_MODE_PKT(channel);
 800125e:	797b      	ldrb	r3, [r7, #5]
 8001260:	b29b      	uxth	r3, r3
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe40 	bl	8000ee8 <ADS7861_MANUAL_MODE_PKT>
 8001268:	4603      	mov	r3, r0
 800126a:	613b      	str	r3, [r7, #16]
		uint8_t SendData[2] = { (pkt >> 8), (pkt & 0xFF) };
 800126c:	693b      	ldr	r3, [r7, #16]
 800126e:	121b      	asrs	r3, r3, #8
 8001270:	b2db      	uxtb	r3, r3
 8001272:	733b      	strb	r3, [r7, #12]
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	b2db      	uxtb	r3, r3
 8001278:	737b      	strb	r3, [r7, #13]
		uint8_t ReadData[2];
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800127a:	79bb      	ldrb	r3, [r7, #6]
 800127c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800127e:	4619      	mov	r1, r3
 8001280:	f7ff fcba 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001284:	79bb      	ldrb	r3, [r7, #6]
 8001286:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001288:	4619      	mov	r1, r3
 800128a:	f7ff fcc5 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 16; i++)
 800128e:	2300      	movs	r3, #0
 8001290:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001292:	e002      	b.n	800129a <ADC_Read_by_Channel+0x7e>
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	3301      	adds	r3, #1
 8001298:	62fb      	str	r3, [r7, #44]	; 0x2c
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	2b10      	cmp	r3, #16
 800129e:	dcf9      	bgt.n	8001294 <ADC_Read_by_Channel+0x78>
			;
		SPI_MASTER_Transmit(&SPI_MASTER_0, SendData, 2);
 80012a0:	f107 030c 	add.w	r3, r7, #12
 80012a4:	4838      	ldr	r0, [pc, #224]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 80012a6:	4619      	mov	r1, r3
 80012a8:	2202      	movs	r2, #2
 80012aa:	f005 fd6f 	bl	8006d8c <SPI_MASTER_Transmit>
		for (int i = 0; i > 9; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80012b2:	e002      	b.n	80012ba <ADC_Read_by_Channel+0x9e>
 80012b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b6:	3301      	adds	r3, #1
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80012ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012bc:	2b09      	cmp	r3, #9
 80012be:	dcf9      	bgt.n	80012b4 <ADC_Read_by_Channel+0x98>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80012c0:	79bb      	ldrb	r3, [r7, #6]
 80012c2:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012c4:	4619      	mov	r1, r3
 80012c6:	f7ff fc97 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 2; i++)
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
 80012ce:	e002      	b.n	80012d6 <ADC_Read_by_Channel+0xba>
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	3301      	adds	r3, #1
 80012d4:	627b      	str	r3, [r7, #36]	; 0x24
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dcf9      	bgt.n	80012d0 <ADC_Read_by_Channel+0xb4>
			;
		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 80012dc:	79bb      	ldrb	r3, [r7, #6]
 80012de:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80012e0:	4619      	mov	r1, r3
 80012e2:	f7ff fc99 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 80012e6:	2300      	movs	r3, #0
 80012e8:	623b      	str	r3, [r7, #32]
 80012ea:	e002      	b.n	80012f2 <ADC_Read_by_Channel+0xd6>
 80012ec:	6a3b      	ldr	r3, [r7, #32]
 80012ee:	3301      	adds	r3, #1
 80012f0:	623b      	str	r3, [r7, #32]
 80012f2:	6a3b      	ldr	r3, [r7, #32]
 80012f4:	2b09      	cmp	r3, #9
 80012f6:	dcf9      	bgt.n	80012ec <ADC_Read_by_Channel+0xd0>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	4822      	ldr	r0, [pc, #136]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 80012fe:	4619      	mov	r1, r3
 8001300:	2202      	movs	r2, #2
 8001302:	f005 fd5d 	bl	8006dc0 <SPI_MASTER_Receive>
		for (int i = 0; i > 2; i++)
 8001306:	2300      	movs	r3, #0
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	e002      	b.n	8001312 <ADC_Read_by_Channel+0xf6>
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	3301      	adds	r3, #1
 8001310:	61fb      	str	r3, [r7, #28]
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	2b02      	cmp	r3, #2
 8001316:	dcf9      	bgt.n	800130c <ADC_Read_by_Channel+0xf0>
			;
		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001318:	79bb      	ldrb	r3, [r7, #6]
 800131a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800131c:	4619      	mov	r1, r3
 800131e:	f7ff fc6b 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
		;
		for (int i = 0; i > 9; i++)
 8001322:	2300      	movs	r3, #0
 8001324:	61bb      	str	r3, [r7, #24]
 8001326:	e002      	b.n	800132e <ADC_Read_by_Channel+0x112>
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	3301      	adds	r3, #1
 800132c:	61bb      	str	r3, [r7, #24]
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b09      	cmp	r3, #9
 8001332:	dcf9      	bgt.n	8001328 <ADC_Read_by_Channel+0x10c>
			;

		XMC_GPIO_SetOutputLow((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 8001334:	79bb      	ldrb	r3, [r7, #6]
 8001336:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001338:	4619      	mov	r1, r3
 800133a:	f7ff fc6d 	bl	8000c18 <XMC_GPIO_SetOutputLow>
		for (int i = 0; i > 9; i++)
 800133e:	2300      	movs	r3, #0
 8001340:	617b      	str	r3, [r7, #20]
 8001342:	e002      	b.n	800134a <ADC_Read_by_Channel+0x12e>
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	3301      	adds	r3, #1
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b09      	cmp	r3, #9
 800134e:	dcf9      	bgt.n	8001344 <ADC_Read_by_Channel+0x128>
			;
		SPI_MASTER_Receive(&SPI_MASTER_0, ReadData, 2);
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <ADC_Read_by_Channel+0x16c>)
 8001356:	4619      	mov	r1, r3
 8001358:	2202      	movs	r2, #2
 800135a:	f005 fd31 	bl	8006dc0 <SPI_MASTER_Receive>

		XMC_GPIO_SetOutputHigh((XMC_GPIO_PORT_t *) temp_ptr, pin_number);
 800135e:	79bb      	ldrb	r3, [r7, #6]
 8001360:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001362:	4619      	mov	r1, r3
 8001364:	f7ff fc48 	bl	8000bf8 <XMC_GPIO_SetOutputHigh>
	{
		temp_ptr = XMC_GPIO_PORT2;
		ADS3_avg_receive_data[channel] = 0;
	}

	for (int i = 0; i < TOTAL_SAMPLES; i++)
 8001368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800136a:	3301      	adds	r3, #1
 800136c:	633b      	str	r3, [r7, #48]	; 0x30
 800136e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001370:	2b31      	cmp	r3, #49	; 0x31
 8001372:	f77f af74 	ble.w	800125e <ADC_Read_by_Channel+0x42>
//			ADS3_recive_channel[channel] = ((ReadData[0] & 0xF0) >> 4);

//			ADS3_avg_receive_data[channel] += ADS3_receive_data[channel];
		}
	}
}
 8001376:	3738      	adds	r7, #56	; 0x38
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	48028200 	.word	0x48028200
 8001380:	1fff4cd0 	.word	0x1fff4cd0
 8001384:	1fff4d10 	.word	0x1fff4d10
 8001388:	1ffe89ac 	.word	0x1ffe89ac

0800138c <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	460b      	mov	r3, r1
 8001396:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001398:	78fb      	ldrb	r3, [r7, #3]
 800139a:	2201      	movs	r2, #1
 800139c:	409a      	lsls	r2, r3
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	605a      	str	r2, [r3, #4]
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80013b8:	78fb      	ldrb	r3, [r7, #3]
 80013ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013be:	409a      	lsls	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	605a      	str	r2, [r3, #4]
}
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
 80013ce:	bf00      	nop

080013d0 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	4610      	mov	r0, r2
 80013e2:	4619      	mov	r1, r3
 80013e4:	f7ff ffd2 	bl	800138c <XMC_GPIO_SetOutputHigh>
}
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop

080013f0 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	7c1b      	ldrb	r3, [r3, #16]
 8001400:	4610      	mov	r0, r2
 8001402:	4619      	mov	r1, r3
 8001404:	f7ff ffd2 	bl	80013ac <XMC_GPIO_SetOutputLow>
}
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop

08001410 <State_1>:

/*instrument_clustor_indicators_t *instrument_clustor_indicators = &CAN_MSG_DB[CAN_18FFB632];*/


void State_1(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_1_OUT)
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <State_1+0x44>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d008      	beq.n	800142e <State_1+0x1e>
	{
		/* ignition 1 on state */
		ignition1_d_on();
 800141c:	f000 f81c 	bl	8001458 <ignition1_d_on>
		faciaaswitches();
 8001420:	f000 f962 	bl	80016e8 <faciaaswitches>
		Can_Outputs_State1();
 8001424:	f000 f88e 	bl	8001544 <Can_Outputs_State1>
		cluster_indicators_Out();
 8001428:	f000 f894 	bl	8001554 <cluster_indicators_Out>
 800142c:	e00c      	b.n	8001448 <State_1+0x38>
	}
	else if(!(Vcu_OutPuts.IGNITION_1_OUT))
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <State_1+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	f083 0301 	eor.w	r3, r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	2b00      	cmp	r3, #0
 800143a:	d005      	beq.n	8001448 <State_1+0x38>
	{
		//check battery voltage and turn on/off DC to DC converter
		dc_dc_state_update(); //test this later
 800143c:	f000 f966 	bl	800170c <dc_dc_state_update>
		/* ignition 1 off state */
		ignition1_d_off();
 8001440:	f000 f840 	bl	80014c4 <ignition1_d_off>
		all_direct_controlled_relay_off();
 8001444:	f000 f876 	bl	8001534 <all_direct_controlled_relay_off>
	}

	VcuOut_IoExp_U24();
 8001448:	f000 f8f8 	bl	800163c <VcuOut_IoExp_U24>
	VcuOut_IoExp_U25();
 800144c:	f000 f946 	bl	80016dc <VcuOut_IoExp_U25>

}
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	1fff48d0 	.word	0x1fff48d0

08001458 <ignition1_d_on>:
void ignition1_d_on()
 {
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	uart_debugg("in ig1_d_on");
 800145c:	480f      	ldr	r0, [pc, #60]	; (800149c <ignition1_d_on+0x44>)
 800145e:	f00e fc43 	bl	800fce8 <uart_debugg>
	CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x0c;

	CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x48;
	CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x71;*/

 	DIGITAL_IO_SetOutputHigh(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 8001462:	480f      	ldr	r0, [pc, #60]	; (80014a0 <ignition1_d_on+0x48>)
 8001464:	f7ff ffb4 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INFOTAINMENT_PWR_OUT_D); // check infotainment port & pin
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <ignition1_d_on+0x4c>)
 800146a:	f7ff ffb1 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&INSTRUMENT_CON_PWR_OUT_D);
 800146e:	480e      	ldr	r0, [pc, #56]	; (80014a8 <ignition1_d_on+0x50>)
 8001470:	f7ff ffae 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 	DIGITAL_IO_SetOutputHigh(&WIPER_PWR_OUT_D);
 8001474:	480d      	ldr	r0, [pc, #52]	; (80014ac <ignition1_d_on+0x54>)
 8001476:	f7ff ffab 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>

 	DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 800147a:	480d      	ldr	r0, [pc, #52]	; (80014b0 <ignition1_d_on+0x58>)
 800147c:	f7ff ffa8 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>

 	//IOExp_SetPIN_LOW(&I2C_MASTER_1, 0x40, 0, 0);
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED1_OUT_D); /// turn on HVAC(CPIS)
 8001480:	480c      	ldr	r0, [pc, #48]	; (80014b4 <ignition1_d_on+0x5c>)
 8001482:	f00e fd31 	bl	800fee8 <digital_io_setoutputhigh>
 	digital_io_setoutputhigh(&AC_BLOWER_SPEED2_OUT_D); /// turn on COMPRESSOR PWR.
 8001486:	480c      	ldr	r0, [pc, #48]	; (80014b8 <ignition1_d_on+0x60>)
 8001488:	f00e fd2e 	bl	800fee8 <digital_io_setoutputhigh>

 	DIGITAL_IO_SetOutputHigh(&PWR_WINDOW_OUT_D);
 800148c:	480b      	ldr	r0, [pc, #44]	; (80014bc <ignition1_d_on+0x64>)
 800148e:	f7ff ff9f 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>

 	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 	/*  active low */
 	//digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);

 	uart_debugg("exit ig1_d_on");
 8001492:	480b      	ldr	r0, [pc, #44]	; (80014c0 <ignition1_d_on+0x68>)
 8001494:	f00e fc28 	bl	800fce8 <uart_debugg>
 }
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	08012fc0 	.word	0x08012fc0
 80014a0:	080134a8 	.word	0x080134a8
 80014a4:	080133a4 	.word	0x080133a4
 80014a8:	08013278 	.word	0x08013278
 80014ac:	08013368 	.word	0x08013368
 80014b0:	080135ac 	.word	0x080135ac
 80014b4:	1fff42b4 	.word	0x1fff42b4
 80014b8:	1fff42b8 	.word	0x1fff42b8
 80014bc:	08013520 	.word	0x08013520
 80014c0:	08012fcc 	.word	0x08012fcc

080014c4 <ignition1_d_off>:

 void ignition1_d_off()
 {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
	 /*CAN_MSG_DB[CAN_18FF0921].CAN_Data[5] = 0x00;
	  CAN_MSG_DB[CAN_18FF0921].CAN_Data[6] = 0x00;*/
//for(volatile int i = 0; i<0xffff*80; i++);
	  /*CAN_MSG_DB[CAN_0CF00400].CAN_Data[3] = 0x38;
	  CAN_MSG_DB[CAN_0CF00400].CAN_Data[4] = 0x18;*/
	 uart_debugg("in ig1_d_off");
 80014c8:	4810      	ldr	r0, [pc, #64]	; (800150c <ignition1_d_off+0x48>)
 80014ca:	f00e fc0d 	bl	800fce8 <uart_debugg>
 	DIGITAL_IO_SetOutputLow(&CIGARETTE_LIGHTER_PWR_OUT_D);//
 80014ce:	4810      	ldr	r0, [pc, #64]	; (8001510 <ignition1_d_off+0x4c>)
 80014d0:	f7ff ff8e 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INFOTAINMENT_PWR_OUT_D);
 80014d4:	480f      	ldr	r0, [pc, #60]	; (8001514 <ignition1_d_off+0x50>)
 80014d6:	f7ff ff8b 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&INSTRUMENT_CON_PWR_OUT_D);
 80014da:	480f      	ldr	r0, [pc, #60]	; (8001518 <ignition1_d_off+0x54>)
 80014dc:	f7ff ff88 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 	DIGITAL_IO_SetOutputLow(&WIPER_PWR_OUT_D);
 80014e0:	480e      	ldr	r0, [pc, #56]	; (800151c <ignition1_d_off+0x58>)
 80014e2:	f7ff ff85 	bl	80013f0 <DIGITAL_IO_SetOutputLow>

 	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);

 	DIGITAL_IO_SetOutputLow(&PWR_WINDOW_OUT_D);
 80014e6:	480e      	ldr	r0, [pc, #56]	; (8001520 <ignition1_d_off+0x5c>)
 80014e8:	f7ff ff82 	bl	80013f0 <DIGITAL_IO_SetOutputLow>

 	digital_io_setoutputlow(&AC_BLOWER_SPEED1_OUT_D); /// turn off HVAC(CPIS)
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <ignition1_d_off+0x60>)
 80014ee:	f00e fcbf 	bl	800fe70 <digital_io_setoutputlow>
 	digital_io_setoutputlow(&AC_BLOWER_SPEED2_OUT_D); /// turn off COMPRESSOR PWR.
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <ignition1_d_off+0x64>)
 80014f4:	f00e fcbc 	bl	800fe70 <digital_io_setoutputlow>
 	DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);
 80014f8:	480c      	ldr	r0, [pc, #48]	; (800152c <ignition1_d_off+0x68>)
 80014fa:	f7ff ff79 	bl	80013f0 <DIGITAL_IO_SetOutputLow>

 	/* active low */
 	digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 80014fe:	480c      	ldr	r0, [pc, #48]	; (8001530 <ignition1_d_off+0x6c>)
 8001500:	f00e fcb6 	bl	800fe70 <digital_io_setoutputlow>

 	//digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply

 	uart_debugg("in ig1_d_off");
 8001504:	4801      	ldr	r0, [pc, #4]	; (800150c <ignition1_d_off+0x48>)
 8001506:	f00e fbef 	bl	800fce8 <uart_debugg>

 }
 800150a:	bd80      	pop	{r7, pc}
 800150c:	08012fdc 	.word	0x08012fdc
 8001510:	080134a8 	.word	0x080134a8
 8001514:	080133a4 	.word	0x080133a4
 8001518:	08013278 	.word	0x08013278
 800151c:	08013368 	.word	0x08013368
 8001520:	08013520 	.word	0x08013520
 8001524:	1fff42b4 	.word	0x1fff42b4
 8001528:	1fff42b8 	.word	0x1fff42b8
 800152c:	08013264 	.word	0x08013264
 8001530:	1fff42c0 	.word	0x1fff42c0

08001534 <all_direct_controlled_relay_off>:

 void all_direct_controlled_relay_off(void)
 {
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
 8001538:	4801      	ldr	r0, [pc, #4]	; (8001540 <all_direct_controlled_relay_off+0xc>)
 800153a:	f7ff ff59 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
 }
 800153e:	bd80      	pop	{r7, pc}
 8001540:	080132b4 	.word	0x080132b4

08001544 <Can_Outputs_State1>:

  void Can_Outputs_State1(void)
 {
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
 	CAN_OUTPUT_COMPRESSOR();
 8001548:	f009 f8f8 	bl	800a73c <CAN_OUTPUT_COMPRESSOR>
 	CAN_OUTPUT_CLUSTER();
 800154c:	f008 fd9c 	bl	800a088 <CAN_OUTPUT_CLUSTER>
 	//CAN_OUTPUT_EPS();
 }
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop

08001554 <cluster_indicators_Out>:

 void cluster_indicators_Out(void)
 {
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
	instrument_clustor_indicators-> left_indicator = Instrument_Cluster_OUT.set_left_indicator;
 8001558:	4b34      	ldr	r3, [pc, #208]	; (800162c <cluster_indicators_Out+0xd8>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	4b34      	ldr	r3, [pc, #208]	; (8001630 <cluster_indicators_Out+0xdc>)
 800155e:	7999      	ldrb	r1, [r3, #6]
 8001560:	78d3      	ldrb	r3, [r2, #3]
 8001562:	f361 0300 	bfi	r3, r1, #0, #1
 8001566:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> right_indicator = Instrument_Cluster_OUT.set_right_indicator;
 8001568:	4b30      	ldr	r3, [pc, #192]	; (800162c <cluster_indicators_Out+0xd8>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b30      	ldr	r3, [pc, #192]	; (8001630 <cluster_indicators_Out+0xdc>)
 800156e:	79d9      	ldrb	r1, [r3, #7]
 8001570:	78d3      	ldrb	r3, [r2, #3]
 8001572:	f361 0341 	bfi	r3, r1, #1, #1
 8001576:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> low_beam = Instrument_Cluster_OUT.set_low_beam;
 8001578:	4b2c      	ldr	r3, [pc, #176]	; (800162c <cluster_indicators_Out+0xd8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <cluster_indicators_Out+0xdc>)
 800157e:	7a19      	ldrb	r1, [r3, #8]
 8001580:	78d3      	ldrb	r3, [r2, #3]
 8001582:	f361 0382 	bfi	r3, r1, #2, #1
 8001586:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> high_beam = Instrument_Cluster_OUT.set_high_beam;
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <cluster_indicators_Out+0xd8>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <cluster_indicators_Out+0xdc>)
 800158e:	7a59      	ldrb	r1, [r3, #9]
 8001590:	78d3      	ldrb	r3, [r2, #3]
 8001592:	f361 03c3 	bfi	r3, r1, #3, #1
 8001596:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> brake_fluid_flow = Instrument_Cluster_OUT.set_brake_oil;
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <cluster_indicators_Out+0xd8>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b24      	ldr	r3, [pc, #144]	; (8001630 <cluster_indicators_Out+0xdc>)
 800159e:	7a99      	ldrb	r1, [r3, #10]
 80015a0:	78d3      	ldrb	r3, [r2, #3]
 80015a2:	f361 1304 	bfi	r3, r1, #4, #1
 80015a6:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> eps_failure = Instrument_Cluster_OUT.eps_status;///////
 80015a8:	4b20      	ldr	r3, [pc, #128]	; (800162c <cluster_indicators_Out+0xd8>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <cluster_indicators_Out+0xdc>)
 80015ae:	7b19      	ldrb	r1, [r3, #12]
 80015b0:	78d3      	ldrb	r3, [r2, #3]
 80015b2:	f361 1345 	bfi	r3, r1, #5, #1
 80015b6:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> aux_battery_low = Instrument_Cluster_OUT.aux_vtg_critical;
 80015b8:	4b1c      	ldr	r3, [pc, #112]	; (800162c <cluster_indicators_Out+0xd8>)
 80015ba:	681a      	ldr	r2, [r3, #0]
 80015bc:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <cluster_indicators_Out+0xdc>)
 80015be:	7ad9      	ldrb	r1, [r3, #11]
 80015c0:	78d3      	ldrb	r3, [r2, #3]
 80015c2:	f361 1386 	bfi	r3, r1, #6, #1
 80015c6:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> battery_high_temp = Instrument_Cluster_OUT.battery_temp_exceeded;
 80015c8:	4b18      	ldr	r3, [pc, #96]	; (800162c <cluster_indicators_Out+0xd8>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b18      	ldr	r3, [pc, #96]	; (8001630 <cluster_indicators_Out+0xdc>)
 80015ce:	7b59      	ldrb	r1, [r3, #13]
 80015d0:	78d3      	ldrb	r3, [r2, #3]
 80015d2:	f361 13c7 	bfi	r3, r1, #7, #1
 80015d6:	70d3      	strb	r3, [r2, #3]
  	instrument_clustor_indicators-> charging_on = Instrument_Cluster_OUT.charging_connected;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <cluster_indicators_Out+0xd8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b14      	ldr	r3, [pc, #80]	; (8001630 <cluster_indicators_Out+0xdc>)
 80015de:	7b99      	ldrb	r1, [r3, #14]
 80015e0:	7953      	ldrb	r3, [r2, #5]
 80015e2:	f361 0300 	bfi	r3, r1, #0, #1
 80015e6:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> generic_alarm;/////////
  	instrument_clustor_indicators-> regen = Instrument_Cluster_OUT.regen_enabled;///////////
 80015e8:	4b10      	ldr	r3, [pc, #64]	; (800162c <cluster_indicators_Out+0xd8>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b10      	ldr	r3, [pc, #64]	; (8001630 <cluster_indicators_Out+0xdc>)
 80015ee:	7bd9      	ldrb	r1, [r3, #15]
 80015f0:	7953      	ldrb	r3, [r2, #5]
 80015f2:	f361 0382 	bfi	r3, r1, #2, #1
 80015f6:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> parking_brake_light = !Switch_Ios_IN.handbrake_sw_IN;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <cluster_indicators_Out+0xd8>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <cluster_indicators_Out+0xe0>)
 80015fe:	7a1b      	ldrb	r3, [r3, #8]
 8001600:	f083 0301 	eor.w	r3, r3, #1
 8001604:	b2db      	uxtb	r3, r3
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	b2d9      	uxtb	r1, r3
 800160c:	7953      	ldrb	r3, [r2, #5]
 800160e:	f361 03c3 	bfi	r3, r1, #3, #1
 8001612:	7153      	strb	r3, [r2, #5]
  	instrument_clustor_indicators-> seat_belt = Seat_Belt_OUT.seat_occupied;
 8001614:	4b05      	ldr	r3, [pc, #20]	; (800162c <cluster_indicators_Out+0xd8>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <cluster_indicators_Out+0xe4>)
 800161a:	7899      	ldrb	r1, [r3, #2]
 800161c:	7953      	ldrb	r3, [r2, #5]
 800161e:	f361 1304 	bfi	r3, r1, #4, #1
 8001622:	7153      	strb	r3, [r2, #5]
  }
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	1ffe8808 	.word	0x1ffe8808
 8001630:	1fff4878 	.word	0x1fff4878
 8001634:	1fff4848 	.word	0x1fff4848
 8001638:	1fff482c 	.word	0x1fff482c

0800163c <VcuOut_IoExp_U24>:

 void VcuOut_IoExp_U24(void)
 {
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	 uart_debugg("in U24");
 8001640:	481e      	ldr	r0, [pc, #120]	; (80016bc <VcuOut_IoExp_U24+0x80>)
 8001642:	f00e fb51 	bl	800fce8 <uart_debugg>
	 if(Relay_Control_Switch_OUT.low_beam_OUT)
 8001646:	4b1e      	ldr	r3, [pc, #120]	; (80016c0 <VcuOut_IoExp_U24+0x84>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d003      	beq.n	8001656 <VcuOut_IoExp_U24+0x1a>
	 {
		 DIGITAL_IO_SetOutputHigh(&LOW_BEAM_OUT_D);
 800164e:	481d      	ldr	r0, [pc, #116]	; (80016c4 <VcuOut_IoExp_U24+0x88>)
 8001650:	f7ff febe 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 8001654:	e002      	b.n	800165c <VcuOut_IoExp_U24+0x20>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 1;
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LOW_BEAM_OUT_D);
 8001656:	481b      	ldr	r0, [pc, #108]	; (80016c4 <VcuOut_IoExp_U24+0x88>)
 8001658:	f7ff feca 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
		// Gtake_Mcu_drive_states_additional_29bit->Hill_hold_assist = 0;
	 }

	 if(Relay_Control_Switch_OUT.high_beam_OUT)
 800165c:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <VcuOut_IoExp_U24+0x84>)
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <VcuOut_IoExp_U24+0x30>
	 {
		 DIGITAL_IO_SetOutputHigh(&HIGH_BEAM_OUT_D);
 8001664:	4818      	ldr	r0, [pc, #96]	; (80016c8 <VcuOut_IoExp_U24+0x8c>)
 8001666:	f7ff feb3 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 800166a:	e002      	b.n	8001672 <VcuOut_IoExp_U24+0x36>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 800166c:	4816      	ldr	r0, [pc, #88]	; (80016c8 <VcuOut_IoExp_U24+0x8c>)
 800166e:	f7ff febf 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <VcuOut_IoExp_U24+0x84>)
 8001674:	789b      	ldrb	r3, [r3, #2]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <VcuOut_IoExp_U24+0x46>
	 {
		 DIGITAL_IO_SetOutputHigh(&POS_OUT_D);
 800167a:	4814      	ldr	r0, [pc, #80]	; (80016cc <VcuOut_IoExp_U24+0x90>)
 800167c:	f7ff fea8 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 8001680:	e002      	b.n	8001688 <VcuOut_IoExp_U24+0x4c>
		 //digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&POS_OUT_D);
 8001682:	4812      	ldr	r0, [pc, #72]	; (80016cc <VcuOut_IoExp_U24+0x90>)
 8001684:	f7ff feb4 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
		// digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
	 }

	 if(Relay_Control_Switch_OUT.left_indicator_OUT)
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <VcuOut_IoExp_U24+0x84>)
 800168a:	78db      	ldrb	r3, [r3, #3]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <VcuOut_IoExp_U24+0x5c>
	 {
		 DIGITAL_IO_SetOutputHigh(&LEFT_INDICATOR_OUT_D);
 8001690:	480f      	ldr	r0, [pc, #60]	; (80016d0 <VcuOut_IoExp_U24+0x94>)
 8001692:	f7ff fe9d 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 8001696:	e002      	b.n	800169e <VcuOut_IoExp_U24+0x62>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&LEFT_INDICATOR_OUT_D);
 8001698:	480d      	ldr	r0, [pc, #52]	; (80016d0 <VcuOut_IoExp_U24+0x94>)
 800169a:	f7ff fea9 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 if(Relay_Control_Switch_OUT.right_indicator_OUT)
 800169e:	4b08      	ldr	r3, [pc, #32]	; (80016c0 <VcuOut_IoExp_U24+0x84>)
 80016a0:	791b      	ldrb	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d003      	beq.n	80016ae <VcuOut_IoExp_U24+0x72>
	 {
		 DIGITAL_IO_SetOutputHigh(&RIGHT_INDICATOR_OUT_D);
 80016a6:	480b      	ldr	r0, [pc, #44]	; (80016d4 <VcuOut_IoExp_U24+0x98>)
 80016a8:	f7ff fe92 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
 80016ac:	e002      	b.n	80016b4 <VcuOut_IoExp_U24+0x78>
	 }
	 else
	 {
		 DIGITAL_IO_SetOutputLow(&RIGHT_INDICATOR_OUT_D);
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <VcuOut_IoExp_U24+0x98>)
 80016b0:	f7ff fe9e 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	 }

	 uart_debugg("exit U24");
 80016b4:	4808      	ldr	r0, [pc, #32]	; (80016d8 <VcuOut_IoExp_U24+0x9c>)
 80016b6:	f00e fb17 	bl	800fce8 <uart_debugg>
 }
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	08012fec 	.word	0x08012fec
 80016c0:	1fff47b4 	.word	0x1fff47b4
 80016c4:	08013444 	.word	0x08013444
 80016c8:	08013430 	.word	0x08013430
 80016cc:	0801332c 	.word	0x0801332c
 80016d0:	08013548 	.word	0x08013548
 80016d4:	0801341c 	.word	0x0801341c
 80016d8:	08012ff4 	.word	0x08012ff4

080016dc <VcuOut_IoExp_U25>:

 void VcuOut_IoExp_U25(void)
  {
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
 	 else
 	 {
 		// DIGITAL_IO_SetOutputLow(&HIGH_BEAM_OUT_D);
 	 }

 }
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <faciaaswitches>:
 {

 }

 void faciaaswitches(void)
 {
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
	 if(Relay_Control_Switch_OUT.pos_light_OUT) /// pos light
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <faciaaswitches+0x1c>)
 80016ee:	789b      	ldrb	r3, [r3, #2]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d003      	beq.n	80016fc <faciaaswitches+0x14>
	{
		digital_io_setoutputhigh(&AUX_EFUSE_4_OUT_D);
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <faciaaswitches+0x20>)
 80016f6:	f00e fbf7 	bl	800fee8 <digital_io_setoutputhigh>
 80016fa:	e002      	b.n	8001702 <faciaaswitches+0x1a>
	}
	else
	{
		digital_io_setoutputlow(&AUX_EFUSE_4_OUT_D);
 80016fc:	4802      	ldr	r0, [pc, #8]	; (8001708 <faciaaswitches+0x20>)
 80016fe:	f00e fbb7 	bl	800fe70 <digital_io_setoutputlow>
	}

 }
 8001702:	bd80      	pop	{r7, pc}
 8001704:	1fff47b4 	.word	0x1fff47b4
 8001708:	1fff42c0 	.word	0x1fff42c0

0800170c <dc_dc_state_update>:

 //check 12V battery voltage, if less than 12.5V then start DC to DC converter and 48V battery and if greater than 13.5 then turn off DC to DC converter and 48V battery
//only in ignition off mode as in ignition on mode DC to DC and 48V battery is always ON.
//we can also add a flag to check if DC to DC converter is already on or not
void dc_dc_state_update(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
	static bool dc_dc_started = false;

	DROPPED_IN_12_volt(); //update voltage value
 8001710:	f7ff fa96 	bl	8000c40 <DROPPED_IN_12_volt>
	if (DROPPED_IN_12V < 12.50f)
 8001714:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <dc_dc_state_update+0x74>)
 8001716:	edd3 7a00 	vldr	s15, [r3]
 800171a:	eeb2 7a09 	vmov.f32	s14, #41	; 0x29
 800171e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	d509      	bpl.n	800173c <dc_dc_state_update+0x30>
//	if (DROPPED_IN_12V > 12.0f && DROPPED_IN_12V < 12.50f) //added for testing
	{
		//AUX_EFUSE_3_OUT_D output is connected to 48V battery input
		digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D); //48V battery
 8001728:	4816      	ldr	r0, [pc, #88]	; (8001784 <dc_dc_state_update+0x78>)
 800172a:	f00e fbdd 	bl	800fee8 <digital_io_setoutputhigh>
		//DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D); //FOR TRIPHASE DC TO DC converter
		DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D); //for Madhura DC TO DC converter
 800172e:	4816      	ldr	r0, [pc, #88]	; (8001788 <dc_dc_state_update+0x7c>)
 8001730:	f7ff fe4e 	bl	80013d0 <DIGITAL_IO_SetOutputHigh>
		dc_dc_started = true;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <dc_dc_state_update+0x80>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
 800173a:	e020      	b.n	800177e <dc_dc_state_update+0x72>
	}
	else if (DROPPED_IN_12V > 13.50f)
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <dc_dc_state_update+0x74>)
 800173e:	edd3 7a00 	vldr	s15, [r3]
 8001742:	eeb2 7a0b 	vmov.f32	s14, #43	; 0x2b
 8001746:	eef4 7ac7 	vcmpe.f32	s15, s14
 800174a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174e:	dd09      	ble.n	8001764 <dc_dc_state_update+0x58>
	{
		//AUX_EFUSE_3_OUT_D output is connected to 48V battery input
		digital_io_setoutputlow(&AUX_EFUSE_3_OUT_D); //48V battery
 8001750:	480c      	ldr	r0, [pc, #48]	; (8001784 <dc_dc_state_update+0x78>)
 8001752:	f00e fb8d 	bl	800fe70 <digital_io_setoutputlow>
		//DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D); //FOR TRIPHASE DC TO DC converter
		DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D); //for Madhura DC TO DC converter
 8001756:	480c      	ldr	r0, [pc, #48]	; (8001788 <dc_dc_state_update+0x7c>)
 8001758:	f7ff fe4a 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
		dc_dc_started = false;
 800175c:	4b0b      	ldr	r3, [pc, #44]	; (800178c <dc_dc_state_update+0x80>)
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
 8001762:	e00c      	b.n	800177e <dc_dc_state_update+0x72>
	}
	//when DC to DC is not started
	else if (dc_dc_started == false)
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <dc_dc_state_update+0x80>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	f083 0301 	eor.w	r3, r3, #1
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d005      	beq.n	800177e <dc_dc_state_update+0x72>
	{
		//if voltage is within range then do not turn on 48V battery as well as DC to DC converter
		digital_io_setoutputlow(&AUX_EFUSE_3_OUT_D);
 8001772:	4804      	ldr	r0, [pc, #16]	; (8001784 <dc_dc_state_update+0x78>)
 8001774:	f00e fb7c 	bl	800fe70 <digital_io_setoutputlow>
		DIGITAL_IO_SetOutputLow(&DC_DC_EN_OUT_D);
 8001778:	4803      	ldr	r0, [pc, #12]	; (8001788 <dc_dc_state_update+0x7c>)
 800177a:	f7ff fe39 	bl	80013f0 <DIGITAL_IO_SetOutputLow>
	}
}
 800177e:	bd80      	pop	{r7, pc}
 8001780:	1fff4398 	.word	0x1fff4398
 8001784:	1fff42bc 	.word	0x1fff42bc
 8001788:	08013228 	.word	0x08013228
 800178c:	1fff439f 	.word	0x1fff439f

08001790 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800179c:	78fb      	ldrb	r3, [r7, #3]
 800179e:	2201      	movs	r2, #1
 80017a0:	409a      	lsls	r2, r3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	605a      	str	r2, [r3, #4]
}
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	460b      	mov	r3, r1
 80017ba:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80017c2:	409a      	lsls	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]
}
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7c1b      	ldrb	r3, [r3, #16]
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff ffd2 	bl	8001790 <XMC_GPIO_SetOutputHigh>
}
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop

080017f4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681a      	ldr	r2, [r3, #0]
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7c1b      	ldrb	r3, [r3, #16]
 8001804:	4610      	mov	r0, r2
 8001806:	4619      	mov	r1, r3
 8001808:	f7ff ffd2 	bl	80017b0 <XMC_GPIO_SetOutputLow>
}
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop

08001814 <State_2>:

enum Gearchange_Sequence_forHzaard_t{not_allowed, allowed };


void State_2(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
	if(Vcu_OutPuts.IGNITION_2_OUT)
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <State_2+0x38>)
 800181a:	785b      	ldrb	r3, [r3, #1]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d006      	beq.n	800182e <State_2+0x1a>
	{

		/* ignition 2 on state */
		ignition2_d_on();
 8001820:	f000 f816 	bl	8001850 <ignition2_d_on>
		VcuOut_MotorController();
 8001824:	f000 f892 	bl	800194c <VcuOut_MotorController>

		Can_Outputs_State2();
 8001828:	f000 f888 	bl	800193c <Can_Outputs_State2>
 800182c:	e00a      	b.n	8001844 <State_2+0x30>


		//State2_Lights();

	}
	else if(!(Vcu_OutPuts.IGNITION_2_OUT))
 800182e:	4b07      	ldr	r3, [pc, #28]	; (800184c <State_2+0x38>)
 8001830:	785b      	ldrb	r3, [r3, #1]
 8001832:	f083 0301 	eor.w	r3, r3, #1
 8001836:	b2db      	uxtb	r3, r3
 8001838:	2b00      	cmp	r3, #0
 800183a:	d003      	beq.n	8001844 <State_2+0x30>
	{

		/* ignition 2 off state */
		ignition2_d_off();
 800183c:	f000 f840 	bl	80018c0 <ignition2_d_off>


		VcuOut_MotorController_off();
 8001840:	f000 f8f8 	bl	8001a34 <VcuOut_MotorController_off>
	}

	State2_Lights();
 8001844:	f000 f9ca 	bl	8001bdc <State2_Lights>
}
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	1fff48d0 	.word	0x1fff48d0

08001850 <ignition2_d_on>:


void ignition2_d_on()
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
	/* ignition 2 by default on */
	digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
 8001854:	4810      	ldr	r0, [pc, #64]	; (8001898 <ignition2_d_on+0x48>)
 8001856:	f00e fb47 	bl	800fee8 <digital_io_setoutputhigh>
	//ignition_default_state_MC();
	DIGITAL_IO_SetOutputHigh(&PWR_STEERING_OUT_D);/// power steering// check
 800185a:	4810      	ldr	r0, [pc, #64]	; (800189c <ignition2_d_on+0x4c>)
 800185c:	f7ff ffba 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputHigh(&VACUUM_PUMP_OUT_D); // check
 8001860:	480f      	ldr	r0, [pc, #60]	; (80018a0 <ignition2_d_on+0x50>)
 8001862:	f7ff ffb7 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	//DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D); // common for everything giving 12v to mc every relay IN VCU13(IN 14 DIRCTLY GOES TO OCNTROLLER FAN)
	DIGITAL_IO_SetOutputHigh(&MC_RELAY_PWR_OUT_D);
 8001866:	480f      	ldr	r0, [pc, #60]	; (80018a4 <ignition2_d_on+0x54>)
 8001868:	f7ff ffb4 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 800186c:	480e      	ldr	r0, [pc, #56]	; (80018a8 <ignition2_d_on+0x58>)
 800186e:	f7ff ffb1 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REGEN_RELAY_OUT_D); // on relay, relay_driver_pin as output
 8001872:	480e      	ldr	r0, [pc, #56]	; (80018ac <ignition2_d_on+0x5c>)
 8001874:	f7ff ffae 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_ELOCK_RELAY_OUT_D); // start relay , relay_driver_pin as output
 8001878:	480d      	ldr	r0, [pc, #52]	; (80018b0 <ignition2_d_on+0x60>)
 800187a:	f7ff ffab 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_FAN_PWR_OUT_D);  // start, on, fwd, rev relay output side
 800187e:	480d      	ldr	r0, [pc, #52]	; (80018b4 <ignition2_d_on+0x64>)
 8001880:	f7ff ffa8 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>

	DIGITAL_IO_SetOutputHigh(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 8001884:	480c      	ldr	r0, [pc, #48]	; (80018b8 <ignition2_d_on+0x68>)
 8001886:	f7ff ffa5 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>
	//digital_io_setoutputhigh(&SUNROOF_PWR_OUT_D);//irp_12v supply
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 1;
 800188a:	4b0c      	ldr	r3, [pc, #48]	; (80018bc <ignition2_d_on+0x6c>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	7813      	ldrb	r3, [r2, #0]
 8001890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001894:	7013      	strb	r3, [r2, #0]
}
 8001896:	bd80      	pop	{r7, pc}
 8001898:	1fff42c4 	.word	0x1fff42c4
 800189c:	08013534 	.word	0x08013534
 80018a0:	0801323c 	.word	0x0801323c
 80018a4:	080134d0 	.word	0x080134d0
 80018a8:	08013354 	.word	0x08013354
 80018ac:	08013304 	.word	0x08013304
 80018b0:	08013318 	.word	0x08013318
 80018b4:	080134e4 	.word	0x080134e4
 80018b8:	080132dc 	.word	0x080132dc
 80018bc:	1ffe8818 	.word	0x1ffe8818

080018c0 <ignition2_d_off>:

void ignition2_d_off()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&PWR_STEERING_OUT_D);/// power steering
 80018c4:	4812      	ldr	r0, [pc, #72]	; (8001910 <ignition2_d_off+0x50>)
 80018c6:	f7ff ff95 	bl	80017f4 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputLow(&VACUUM_PUMP_OUT_D);
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <ignition2_d_off+0x54>)
 80018cc:	f7ff ff92 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	//DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);

	DIGITAL_IO_SetOutputLow(&MC_ELOCK_RELAY_OUT_D);
 80018d0:	4811      	ldr	r0, [pc, #68]	; (8001918 <ignition2_d_off+0x58>)
 80018d2:	f7ff ff8f 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REGEN_RELAY_OUT_D);
 80018d6:	4811      	ldr	r0, [pc, #68]	; (800191c <ignition2_d_off+0x5c>)
 80018d8:	f7ff ff8c 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_FAN_PWR_OUT_D);
 80018dc:	4810      	ldr	r0, [pc, #64]	; (8001920 <ignition2_d_off+0x60>)
 80018de:	f7ff ff89 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&AUX_EFUSE_1_OUT_D); // common for everything giving 12v to mc every relay IN VCU14
 80018e2:	4810      	ldr	r0, [pc, #64]	; (8001924 <ignition2_d_off+0x64>)
 80018e4:	f7ff ff86 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_RELAY_PWR_OUT_D);
 80018e8:	480f      	ldr	r0, [pc, #60]	; (8001928 <ignition2_d_off+0x68>)
 80018ea:	f7ff ff83 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 80018ee:	480f      	ldr	r0, [pc, #60]	; (800192c <ignition2_d_off+0x6c>)
 80018f0:	f7ff ff80 	bl	80017f4 <DIGITAL_IO_SetOutputLow>

	DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D);//in irp contactor +ve is coming from harness and -ve controlled by rev
 80018f4:	480e      	ldr	r0, [pc, #56]	; (8001930 <ignition2_d_off+0x70>)
 80018f6:	f7ff ff7d 	bl	80017f4 <DIGITAL_IO_SetOutputLow>
	digital_io_setoutputlow(&SUNROOF_PWR_OUT_D);//irp_12v supply
 80018fa:	480e      	ldr	r0, [pc, #56]	; (8001934 <ignition2_d_off+0x74>)
 80018fc:	f00e fab8 	bl	800fe70 <digital_io_setoutputlow>
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 8001900:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <ignition2_d_off+0x78>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	7813      	ldrb	r3, [r2, #0]
 8001906:	f36f 13c7 	bfc	r3, #7, #1
 800190a:	7013      	strb	r3, [r2, #0]
}
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	08013534 	.word	0x08013534
 8001914:	0801323c 	.word	0x0801323c
 8001918:	08013318 	.word	0x08013318
 800191c:	08013304 	.word	0x08013304
 8001920:	080134e4 	.word	0x080134e4
 8001924:	08013354 	.word	0x08013354
 8001928:	080134d0 	.word	0x080134d0
 800192c:	08013458 	.word	0x08013458
 8001930:	080132dc 	.word	0x080132dc
 8001934:	1fff42c4 	.word	0x1fff42c4
 8001938:	1ffe8818 	.word	0x1ffe8818

0800193c <Can_Outputs_State2>:
{

}

void Can_Outputs_State2(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
	CAN_OUTPUT_EPS();
 8001940:	f008 fd08 	bl	800a354 <CAN_OUTPUT_EPS>
	//Gtake_Tx_29bit();

	Irp_Tx_29bit();
 8001944:	f009 fa96 	bl	800ae74 <Irp_Tx_29bit>

	//Tx_CAN_0x121();
}
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop

0800194c <VcuOut_MotorController>:

void VcuOut_MotorController(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_Gtake();
	VcuOut_MotorController_IRP();
 8001950:	f000 f802 	bl	8001958 <VcuOut_MotorController_IRP>
}
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop

08001958 <VcuOut_MotorController_IRP>:
	//limphome_Mode();
}


void VcuOut_MotorController_IRP(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0

	static enum Gearchange_Sequence_forHzaard_t Gearchange_Sequence_forHzaard = not_allowed;

	VcuOut_MotorController_IRP_BMS_Status();
 800195c:	f000 f8a0 	bl	8001aa0 <VcuOut_MotorController_IRP_BMS_Status>

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
 8001960:	4b2e      	ldr	r3, [pc, #184]	; (8001a1c <VcuOut_MotorController_IRP+0xc4>)
 8001962:	785b      	ldrb	r3, [r3, #1]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d053      	beq.n	8001a10 <VcuOut_MotorController_IRP+0xb8>
 8001968:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <VcuOut_MotorController_IRP+0xc8>)
 800196a:	881b      	ldrh	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d14f      	bne.n	8001a10 <VcuOut_MotorController_IRP+0xb8>
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001970:	4b2c      	ldr	r3, [pc, #176]	; (8001a24 <VcuOut_MotorController_IRP+0xcc>)
 8001972:	78db      	ldrb	r3, [r3, #3]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d012      	beq.n	800199e <VcuOut_MotorController_IRP+0x46>
		{
			if(Gearchange_Sequence_forHzaard)
 8001978:	4b2b      	ldr	r3, [pc, #172]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d00a      	beq.n	8001996 <VcuOut_MotorController_IRP+0x3e>
			{
				Irp_Mcu_drive_states_29bit->FNR = Forward_Irp;
 8001980:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <VcuOut_MotorController_IRP+0xd4>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	7813      	ldrb	r3, [r2, #0]
 8001986:	2101      	movs	r1, #1
 8001988:	f361 0301 	bfi	r3, r1, #0, #2
 800198c:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> forward = 0x00;
 800198e:	4b28      	ldr	r3, [pc, #160]	; (8001a30 <VcuOut_MotorController_IRP+0xd8>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	2200      	movs	r2, #0
 8001994:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 8001996:	4b24      	ldr	r3, [pc, #144]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	701a      	strb	r2, [r3, #0]
 800199c:	e037      	b.n	8001a0e <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.reverse_relay)
 800199e:	4b21      	ldr	r3, [pc, #132]	; (8001a24 <VcuOut_MotorController_IRP+0xcc>)
 80019a0:	785b      	ldrb	r3, [r3, #1]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d012      	beq.n	80019cc <VcuOut_MotorController_IRP+0x74>
		{
			if(Gearchange_Sequence_forHzaard)
 80019a6:	4b20      	ldr	r3, [pc, #128]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00a      	beq.n	80019c4 <VcuOut_MotorController_IRP+0x6c>
			{
				Irp_Mcu_drive_states_29bit->FNR = Reverse_Irp;
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <VcuOut_MotorController_IRP+0xd4>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	7813      	ldrb	r3, [r2, #0]
 80019b4:	2102      	movs	r1, #2
 80019b6:	f361 0301 	bfi	r3, r1, #0, #2
 80019ba:	7013      	strb	r3, [r2, #0]
				Gear_OUT-> reverse = 0x03;
 80019bc:	4b1c      	ldr	r3, [pc, #112]	; (8001a30 <VcuOut_MotorController_IRP+0xd8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	2203      	movs	r2, #3
 80019c2:	701a      	strb	r2, [r3, #0]
			}
			Gearchange_Sequence_forHzaard = not_allowed;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e020      	b.n	8001a0e <VcuOut_MotorController_IRP+0xb6>
		}
		else if (Motor_controller_OUT.park_relay)
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <VcuOut_MotorController_IRP+0xcc>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d00a      	beq.n	80019ea <VcuOut_MotorController_IRP+0x92>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp; //there is no option for irp
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <VcuOut_MotorController_IRP+0xd4>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	7813      	ldrb	r3, [r2, #0]
 80019da:	f36f 0301 	bfc	r3, #0, #2
 80019de:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> park = 0x02;
 80019e0:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <VcuOut_MotorController_IRP+0xd8>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2202      	movs	r2, #2
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	e011      	b.n	8001a0e <VcuOut_MotorController_IRP+0xb6>
		}
		else if(Motor_controller_OUT.neutral)
 80019ea:	4b0e      	ldr	r3, [pc, #56]	; (8001a24 <VcuOut_MotorController_IRP+0xcc>)
 80019ec:	791b      	ldrb	r3, [r3, #4]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d00d      	beq.n	8001a0e <VcuOut_MotorController_IRP+0xb6>
		{
			Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <VcuOut_MotorController_IRP+0xd4>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	7813      	ldrb	r3, [r2, #0]
 80019f8:	f36f 0301 	bfc	r3, #0, #2
 80019fc:	7013      	strb	r3, [r2, #0]
			Gear_OUT-> neutral = 0x01;
 80019fe:	4b0c      	ldr	r3, [pc, #48]	; (8001a30 <VcuOut_MotorController_IRP+0xd8>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2201      	movs	r2, #1
 8001a04:	701a      	strb	r2, [r3, #0]
			Gearchange_Sequence_forHzaard = allowed;
 8001a06:	4b08      	ldr	r3, [pc, #32]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
	VcuOut_MotorController_IRP_BMS_Status();

	if(Lights_OUT.brake_switch_out_d && (!VehicleSpeedglb)/*&& (limphome_Mode_IRP())*/)
	{
		//Gearchange_Sequence_forHzaard = not_allowed;
		if(Motor_controller_OUT.forward_Relay )
 8001a0c:	e003      	b.n	8001a16 <VcuOut_MotorController_IRP+0xbe>
 8001a0e:	e002      	b.n	8001a16 <VcuOut_MotorController_IRP+0xbe>
			Gearchange_Sequence_forHzaard = allowed;
		}
	}
	else
	{
		Gearchange_Sequence_forHzaard = not_allowed;
 8001a10:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <VcuOut_MotorController_IRP+0xd0>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	701a      	strb	r2, [r3, #0]
	}

	limphome_Mode_IRP();
 8001a16:	f000 f9e9 	bl	8001dec <limphome_Mode_IRP>

}
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	1fff48b0 	.word	0x1fff48b0
 8001a20:	1fff4816 	.word	0x1fff4816
 8001a24:	1fff4808 	.word	0x1fff4808
 8001a28:	1fff43a0 	.word	0x1fff43a0
 8001a2c:	1ffe8818 	.word	0x1ffe8818
 8001a30:	1ffe8814 	.word	0x1ffe8814

08001a34 <VcuOut_MotorController_off>:

void VcuOut_MotorController_off(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	//VcuOut_MotorController_off_gtake();
	VcuOut_MotorController_off_IRP();
 8001a38:	f000 f802 	bl	8001a40 <VcuOut_MotorController_off_IRP>

}
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop

08001a40 <VcuOut_MotorController_off_IRP>:
	Gtake_Mcu_drive_states_29bit ->Drive_mode_cmd = 0;
	Gear_OUT-> neutral = 0x01;

}
void VcuOut_MotorController_off_IRP(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->FNR = Neutral_Irp;
 8001a44:	4b14      	ldr	r3, [pc, #80]	; (8001a98 <VcuOut_MotorController_off_IRP+0x58>)
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	7813      	ldrb	r3, [r2, #0]
 8001a4a:	f36f 0301 	bfc	r3, #0, #2
 8001a4e:	7013      	strb	r3, [r2, #0]
	Irp_Mcu_drive_states_29bit->Throttle_Command = 1023;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <VcuOut_MotorController_off_IRP+0x58>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f04f 32ff 	mov.w	r2, #4294967295
 8001a58:	705a      	strb	r2, [r3, #1]
 8001a5a:	789a      	ldrb	r2, [r3, #2]
 8001a5c:	f042 0203 	orr.w	r2, r2, #3
 8001a60:	709a      	strb	r2, [r3, #2]
	Irp_Mcu_drive_states_29bit->Torque_Command = 0;
 8001a62:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <VcuOut_MotorController_off_IRP+0x58>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	789a      	ldrb	r2, [r3, #2]
 8001a68:	f002 020f 	and.w	r2, r2, #15
 8001a6c:	709a      	strb	r2, [r3, #2]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	70da      	strb	r2, [r3, #3]
 8001a72:	791a      	ldrb	r2, [r3, #4]
 8001a74:	f022 0201 	bic.w	r2, r2, #1
 8001a78:	711a      	strb	r2, [r3, #4]
	Irp_Mcu_drive_states_29bit->Ignition_Key_indicator = 0;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <VcuOut_MotorController_off_IRP+0x58>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	7813      	ldrb	r3, [r2, #0]
 8001a80:	f36f 13c7 	bfc	r3, #7, #1
 8001a84:	7013      	strb	r3, [r2, #0]

	Gear_OUT-> neutral = 0x01;
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <VcuOut_MotorController_off_IRP+0x5c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	701a      	strb	r2, [r3, #0]
	//Irp_Mcu_drive_states_29bit-> Regen_On_Brake = 0;//(uint8_t )Relay_Control_Switch_OUT.ac_blower3_OUT;
	//Irp_Mcu_drive_states_29bit-> Regen_On_Throttle_Realese = 0;//(uint8_t)Relay_Control_Switch_OUT.ac_blower3_OUT;


	//DIGITAL_IO_SetOutputLow(&MC_REV_RELAY_OUT_D); //in irp contactor +ve is coming from harness and -ve controlled by rev
}
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	1ffe8818 	.word	0x1ffe8818
 8001a9c:	1ffe8814 	.word	0x1ffe8814

08001aa0 <VcuOut_MotorController_IRP_BMS_Status>:

void VcuOut_MotorController_IRP_BMS_Status(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
	//Irp_Mcu_drive_states_29bit -> Driving_Profile = 3;

	Irp_Mcu_BMS_states_29bit->BMS_OperationMode = 5;
 8001aa4:	4b46      	ldr	r3, [pc, #280]	; (8001bc0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2205      	movs	r2, #5
 8001aaa:	701a      	strb	r2, [r3, #0]
	Irp_Mcu_BMS_states_29bit->BMS_Contactor_Status = 1;
 8001aac:	4b44      	ldr	r3, [pc, #272]	; (8001bc0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	7853      	ldrb	r3, [r2, #1]
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	f361 0301 	bfi	r3, r1, #0, #2
 8001ab8:	7053      	strb	r3, [r2, #1]
	Irp_Mcu_BMS_states_29bit->SOH = Bms_SOH;
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	4b41      	ldr	r3, [pc, #260]	; (8001bc4 <VcuOut_MotorController_IRP_BMS_Status+0x124>)
 8001ac0:	881b      	ldrh	r3, [r3, #0]
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ac8:	b2d9      	uxtb	r1, r3
 8001aca:	7893      	ldrb	r3, [r2, #2]
 8001acc:	f361 0306 	bfi	r3, r1, #0, #7
 8001ad0:	7093      	strb	r3, [r2, #2]
	Irp_Mcu_BMS_states_29bit->BMS_SOC = Bms_SOC;
 8001ad2:	4b3b      	ldr	r3, [pc, #236]	; (8001bc0 <VcuOut_MotorController_IRP_BMS_Status+0x120>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a3c      	ldr	r2, [pc, #240]	; (8001bc8 <VcuOut_MotorController_IRP_BMS_Status+0x128>)
 8001ad8:	8812      	ldrh	r2, [r2, #0]
 8001ada:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	b2d1      	uxtb	r1, r2
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	70d9      	strb	r1, [r3, #3]
 8001ae8:	0a12      	lsrs	r2, r2, #8
 8001aea:	b292      	uxth	r2, r2
 8001aec:	f002 0203 	and.w	r2, r2, #3
 8001af0:	f002 0003 	and.w	r0, r2, #3
 8001af4:	791a      	ldrb	r2, [r3, #4]
 8001af6:	f022 0203 	bic.w	r2, r2, #3
 8001afa:	4611      	mov	r1, r2
 8001afc:	4602      	mov	r2, r0
 8001afe:	430a      	orrs	r2, r1
 8001b00:	711a      	strb	r2, [r3, #4]

	Irp_Mcu_BMS_Currents_29bit->Battery_Voltage = PackVoltage;//50
 8001b02:	4b32      	ldr	r3, [pc, #200]	; (8001bcc <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a32      	ldr	r2, [pc, #200]	; (8001bd0 <VcuOut_MotorController_IRP_BMS_Status+0x130>)
 8001b08:	6812      	ldr	r2, [r2, #0]
 8001b0a:	b292      	uxth	r2, r2
 8001b0c:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001b10:	b292      	uxth	r2, r2
 8001b12:	b2d1      	uxtb	r1, r2
 8001b14:	2000      	movs	r0, #0
 8001b16:	4301      	orrs	r1, r0
 8001b18:	7019      	strb	r1, [r3, #0]
 8001b1a:	0a12      	lsrs	r2, r2, #8
 8001b1c:	b292      	uxth	r2, r2
 8001b1e:	f002 021f 	and.w	r2, r2, #31
 8001b22:	f002 001f 	and.w	r0, r2, #31
 8001b26:	785a      	ldrb	r2, [r3, #1]
 8001b28:	f022 021f 	bic.w	r2, r2, #31
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4602      	mov	r2, r0
 8001b30:	430a      	orrs	r2, r1
 8001b32:	705a      	strb	r2, [r3, #1]
	Irp_Mcu_BMS_Currents_29bit->Battery_Current = PackCurrent;//20
 8001b34:	4b25      	ldr	r3, [pc, #148]	; (8001bcc <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <VcuOut_MotorController_IRP_BMS_Status+0x134>)
 8001b3a:	6812      	ldr	r2, [r2, #0]
 8001b3c:	b292      	uxth	r2, r2
 8001b3e:	0152      	lsls	r2, r2, #5
 8001b40:	b212      	sxth	r2, r2
 8001b42:	1152      	asrs	r2, r2, #5
 8001b44:	b292      	uxth	r2, r2
 8001b46:	b2d1      	uxtb	r1, r2
 8001b48:	2000      	movs	r0, #0
 8001b4a:	4301      	orrs	r1, r0
 8001b4c:	7099      	strb	r1, [r3, #2]
 8001b4e:	0a12      	lsrs	r2, r2, #8
 8001b50:	b292      	uxth	r2, r2
 8001b52:	f002 0207 	and.w	r2, r2, #7
 8001b56:	f002 0007 	and.w	r0, r2, #7
 8001b5a:	78da      	ldrb	r2, [r3, #3]
 8001b5c:	f022 0207 	bic.w	r2, r2, #7
 8001b60:	4611      	mov	r1, r2
 8001b62:	4602      	mov	r2, r0
 8001b64:	430a      	orrs	r2, r1
 8001b66:	70da      	strb	r2, [r3, #3]
	Irp_Mcu_BMS_Currents_29bit->MaxDischargeCurrent = 450;//DischargeCurrentLimit * -1;//20;
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f062 023d 	orn	r2, r2, #61	; 0x3d
 8001b72:	711a      	strb	r2, [r3, #4]
 8001b74:	795a      	ldrb	r2, [r3, #5]
 8001b76:	f022 0207 	bic.w	r2, r2, #7
 8001b7a:	f042 0201 	orr.w	r2, r2, #1
 8001b7e:	715a      	strb	r2, [r3, #5]
	Irp_Mcu_BMS_Currents_29bit->MaxRechargeCurrent = -1 * RegenerativeCurrentLimit;//ChargeCurrentLimit;//0;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <VcuOut_MotorController_IRP_BMS_Status+0x12c>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <VcuOut_MotorController_IRP_BMS_Status+0x138>)
 8001b86:	8812      	ldrh	r2, [r2, #0]
 8001b88:	4252      	negs	r2, r2
 8001b8a:	b292      	uxth	r2, r2
 8001b8c:	b292      	uxth	r2, r2
 8001b8e:	0152      	lsls	r2, r2, #5
 8001b90:	b212      	sxth	r2, r2
 8001b92:	1152      	asrs	r2, r2, #5
 8001b94:	b292      	uxth	r2, r2
 8001b96:	b2d1      	uxtb	r1, r2
 8001b98:	2000      	movs	r0, #0
 8001b9a:	4301      	orrs	r1, r0
 8001b9c:	7199      	strb	r1, [r3, #6]
 8001b9e:	0a12      	lsrs	r2, r2, #8
 8001ba0:	b292      	uxth	r2, r2
 8001ba2:	f002 0207 	and.w	r2, r2, #7
 8001ba6:	f002 0007 	and.w	r0, r2, #7
 8001baa:	79da      	ldrb	r2, [r3, #7]
 8001bac:	f022 0207 	bic.w	r2, r2, #7
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	71da      	strb	r2, [r3, #7]

}
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	1ffe881c 	.word	0x1ffe881c
 8001bc4:	1fff48cc 	.word	0x1fff48cc
 8001bc8:	1fff48c4 	.word	0x1fff48c4
 8001bcc:	1ffe8824 	.word	0x1ffe8824
 8001bd0:	1fff48dc 	.word	0x1fff48dc
 8001bd4:	1fff481c 	.word	0x1fff481c
 8001bd8:	1fff4824 	.word	0x1fff4824

08001bdc <State2_Lights>:

void State2_Lights(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
	if((Lights_OUT.brake_switch_out_d))
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <State2_Lights+0x24>)
 8001be2:	785b      	ldrb	r3, [r3, #1]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d00a      	beq.n	8001bfe <State2_Lights+0x22>
	{
		if((Lights_OUT.reverse_light_out))
 8001be8:	4b05      	ldr	r3, [pc, #20]	; (8001c00 <State2_Lights+0x24>)
 8001bea:	789b      	ldrb	r3, [r3, #2]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <State2_Lights+0x1c>
		{
			DIGITAL_IO_SetOutputHigh(&REV_LIGHT_OUT_D);
 8001bf0:	4804      	ldr	r0, [pc, #16]	; (8001c04 <State2_Lights+0x28>)
 8001bf2:	f7ff fdef 	bl	80017d4 <DIGITAL_IO_SetOutputHigh>
 8001bf6:	e002      	b.n	8001bfe <State2_Lights+0x22>
		}
		else
		{
			DIGITAL_IO_SetOutputLow(&REV_LIGHT_OUT_D);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <State2_Lights+0x28>)
 8001bfa:	f7ff fdfb 	bl	80017f4 <DIGITAL_IO_SetOutputLow>
		}
	}
}
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	1fff48b0 	.word	0x1fff48b0
 8001c04:	08013458 	.word	0x08013458

08001c08 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8001c14:	78fb      	ldrb	r3, [r7, #3]
 8001c16:	2201      	movs	r2, #1
 8001c18:	409a      	lsls	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	605a      	str	r2, [r3, #4]
}
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 8001c34:	78fb      	ldrb	r3, [r7, #3]
 8001c36:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c3a:	409a      	lsls	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	605a      	str	r2, [r3, #4]
}
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop

08001c4c <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7c1b      	ldrb	r3, [r3, #16]
 8001c5c:	4610      	mov	r0, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f7ff ffd2 	bl	8001c08 <XMC_GPIO_SetOutputHigh>
}
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop

08001c6c <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7c1b      	ldrb	r3, [r3, #16]
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	4619      	mov	r1, r3
 8001c80:	f7ff ffd2 	bl	8001c28 <XMC_GPIO_SetOutputLow>
}
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop

08001c8c <OutPutAction_Update>:
#include "Vcu_Init.h"
#include "can_matrix.h"


void OutPutAction_Update(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	ALL_CONDITION_ON();
 8001c90:	f000 f878 	bl	8001d84 <ALL_CONDITION_ON>

	SPI_ADC_ProcessModeChange(1);
 8001c94:	2001      	movs	r0, #1
 8001c96:	f7ff f903 	bl	8000ea0 <SPI_ADC_ProcessModeChange>

	can_outputs_allState();
 8001c9a:	f000 f89f 	bl	8001ddc <can_outputs_allState>

	State_1();
 8001c9e:	f7ff fbb7 	bl	8001410 <State_1>
	State_2();
 8001ca2:	f7ff fdb7 	bl	8001814 <State_2>
	//Can_Outputs_State1();

	/* light */
	Lights_on_off();
 8001ca6:	f000 f805 	bl	8001cb4 <Lights_on_off>



	VcuOut_MotorController_IRPbrakes();
 8001caa:	f000 f823 	bl	8001cf4 <VcuOut_MotorController_IRPbrakes>

	door_en_cabin_light();
 8001cae:	f000 f845 	bl	8001d3c <door_en_cabin_light>
}
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <Lights_on_off>:
	/*  obc set v and i */
	Update_CAN_id0x1806E5F4();
}

void Lights_on_off()
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
	/* light */
	if(Lights_OUT.brake_switch_out_d)
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <Lights_on_off+0x34>)
 8001cba:	785b      	ldrb	r3, [r3, #1]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d009      	beq.n	8001cd4 <Lights_on_off+0x20>
	{
		DIGITAL_IO_SetOutputHigh(&BRAKE_LIGHT_OUT_D);
 8001cc0:	480a      	ldr	r0, [pc, #40]	; (8001cec <Lights_on_off+0x38>)
 8001cc2:	f7ff ffc3 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 1;
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <Lights_on_off+0x3c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	7813      	ldrb	r3, [r2, #0]
 8001ccc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd0:	7013      	strb	r3, [r2, #0]
 8001cd2:	e008      	b.n	8001ce6 <Lights_on_off+0x32>
	}
	else
	{
		DIGITAL_IO_SetOutputLow(&BRAKE_LIGHT_OUT_D);
 8001cd4:	4805      	ldr	r0, [pc, #20]	; (8001cec <Lights_on_off+0x38>)
 8001cd6:	f7ff ffc9 	bl	8001c6c <DIGITAL_IO_SetOutputLow>
		Gtake_Mcu_drive_states_additional_29bit->Brake_cmd = 0;
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <Lights_on_off+0x3c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	7813      	ldrb	r3, [r2, #0]
 8001ce0:	f36f 1386 	bfc	r3, #6, #1
 8001ce4:	7013      	strb	r3, [r2, #0]
	}
}
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	1fff48b0 	.word	0x1fff48b0
 8001cec:	080133e0 	.word	0x080133e0
 8001cf0:	1ffe882c 	.word	0x1ffe882c

08001cf4 <VcuOut_MotorController_IRPbrakes>:

void VcuOut_MotorController_IRPbrakes(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
	Irp_Mcu_drive_states_29bit->Brake_Command = Lights_OUT.brake_switch_out_d;
 8001cf8:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b0d      	ldr	r3, [pc, #52]	; (8001d34 <VcuOut_MotorController_IRPbrakes+0x40>)
 8001cfe:	7859      	ldrb	r1, [r3, #1]
 8001d00:	7813      	ldrb	r3, [r2, #0]
 8001d02:	f361 1345 	bfi	r3, r1, #5, #1
 8001d06:	7013      	strb	r3, [r2, #0]

	Irp_Mcu_drive_states_29bit->Handbrake_Command = !Relay_Control_Switch_OUT.elec_handbrake_pwr_out;
 8001d08:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <VcuOut_MotorController_IRPbrakes+0x3c>)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	4b0a      	ldr	r3, [pc, #40]	; (8001d38 <VcuOut_MotorController_IRPbrakes+0x44>)
 8001d0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d12:	f083 0301 	eor.w	r3, r3, #1
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	f003 0301 	and.w	r3, r3, #1
 8001d1c:	b2d9      	uxtb	r1, r3
 8001d1e:	7813      	ldrb	r3, [r2, #0]
 8001d20:	f361 1386 	bfi	r3, r1, #6, #1
 8001d24:	7013      	strb	r3, [r2, #0]
}
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	1ffe8818 	.word	0x1ffe8818
 8001d34:	1fff48b0 	.word	0x1fff48b0
 8001d38:	1fff47b4 	.word	0x1fff47b4

08001d3c <door_en_cabin_light>:

void door_en_cabin_light(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
	if((!Door_Switch_OUT.passenger_door_OUT) || (!Door_Switch_OUT.driver_door_OUT) || /*(!Door_Switch_OUT.bonnet_OUT) ||*/ (!Door_Switch_OUT.hatch_OUT))
 8001d40:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <door_en_cabin_light+0x40>)
 8001d42:	789b      	ldrb	r3, [r3, #2]
 8001d44:	f083 0301 	eor.w	r3, r3, #1
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10d      	bne.n	8001d6a <door_en_cabin_light+0x2e>
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <door_en_cabin_light+0x40>)
 8001d50:	785b      	ldrb	r3, [r3, #1]
 8001d52:	f083 0301 	eor.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <door_en_cabin_light+0x2e>
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <door_en_cabin_light+0x40>)
 8001d5e:	795b      	ldrb	r3, [r3, #5]
 8001d60:	f083 0301 	eor.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <door_en_cabin_light+0x36>
	{
		digital_io_setoutputhigh(&AC_COMPRESSOR_OUT_D); // for cabin light on doors on/off
 8001d6a:	4805      	ldr	r0, [pc, #20]	; (8001d80 <door_en_cabin_light+0x44>)
 8001d6c:	f00e f8bc 	bl	800fee8 <digital_io_setoutputhigh>
 8001d70:	e002      	b.n	8001d78 <door_en_cabin_light+0x3c>
	}
	else
	{
		digital_io_setoutputlow(&AC_COMPRESSOR_OUT_D);
 8001d72:	4803      	ldr	r0, [pc, #12]	; (8001d80 <door_en_cabin_light+0x44>)
 8001d74:	f00e f87c 	bl	800fe70 <digital_io_setoutputlow>
	}

}
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	1fff4834 	.word	0x1fff4834
 8001d80:	1fff42c8 	.word	0x1fff42c8

08001d84 <ALL_CONDITION_ON>:
{
	//cluster_door_out = cluster_door_in;
}
*/
void ALL_CONDITION_ON()
 {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	 DIGITAL_IO_SetOutputHigh(&DOOR_LOCK_PWR_OUT_D);//check j4 -> f1
 8001d88:	4809      	ldr	r0, [pc, #36]	; (8001db0 <ALL_CONDITION_ON+0x2c>)
 8001d8a:	f7ff ff5f 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&LIGHTS_PWR_OUT_D); // Check j4 -> k1
 8001d8e:	4809      	ldr	r0, [pc, #36]	; (8001db4 <ALL_CONDITION_ON+0x30>)
 8001d90:	f7ff ff5c 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HORN_PWR_OUT_D);
 8001d94:	4808      	ldr	r0, [pc, #32]	; (8001db8 <ALL_CONDITION_ON+0x34>)
 8001d96:	f7ff ff59 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&DC_DC_EN_OUT_D);
 8001d9a:	4808      	ldr	r0, [pc, #32]	; (8001dbc <ALL_CONDITION_ON+0x38>)
 8001d9c:	f7ff ff56 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&HEADLAMPS_ADJ_PWR_OUT_D);
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <ALL_CONDITION_ON+0x3c>)
 8001da2:	f7ff ff53 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>
	 DIGITAL_IO_SetOutputHigh(&CABIN_LIGHT_OUT_D);
 8001da6:	4807      	ldr	r0, [pc, #28]	; (8001dc4 <ALL_CONDITION_ON+0x40>)
 8001da8:	f7ff ff50 	bl	8001c4c <DIGITAL_IO_SetOutputHigh>

	// DIGITAL_IO_SetOutputHigh(&AUX_EFUSE_1_OUT_D);//instrument cluster 12v as battery(constant 12v)
	 //digital_io_setoutputhigh(&AUX_EFUSE_3_OUT_D);//bms 12v
	 //digital_io_setoutputhigh(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputhigh(&AUX_EFUSE_5_OUT_D);//obc 12v
 }
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	080136b0 	.word	0x080136b0
 8001db4:	08013390 	.word	0x08013390
 8001db8:	080133f4 	.word	0x080133f4
 8001dbc:	08013228 	.word	0x08013228
 8001dc0:	08013250 	.word	0x08013250
 8001dc4:	080135ac 	.word	0x080135ac

08001dc8 <charger_connected_inVoff>:
	 //digital_io_setoutputlow(&AUX_EFUSE_2_OUT_D);//GB/T that is for super charge charging connector
	 //digital_io_setoutputlow(&AUX_EFUSE_5_OUT_D);//obc 12v
 }

void charger_connected_inVoff(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	if(charger_on())
 8001dcc:	f7fe feec 	bl	8000ba8 <charger_on>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <charger_connected_inVoff+0x12>
	{
		Update_CAN_0x18FFB632();
 8001dd6:	f008 f88d 	bl	8009ef4 <Update_CAN_0x18FFB632>
	}
}
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <can_outputs_allState>:

void can_outputs_allState(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	//charger_tx(); // charger can tx
	charger_connected_inVoff();
 8001de0:	f7ff fff2 	bl	8001dc8 <charger_connected_inVoff>
	OBDII_CAN_Tx();
 8001de4:	f007 fa72 	bl	80092cc <OBDII_CAN_Tx>
}
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop

08001dec <limphome_Mode_IRP>:

	return 0;
}

int limphome_Mode_IRP(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
	if((Mapped_BMS_SOC < 10) /*|| (Mcu_Temp_Irp > 90)*/)
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <limphome_Mode_IRP+0x2c>)
 8001df2:	781b      	ldrb	r3, [r3, #0]
 8001df4:	2b09      	cmp	r3, #9
 8001df6:	d808      	bhi.n	8001e0a <limphome_Mode_IRP+0x1e>
	{
		Irp_Mcu_drive_states_29bit ->Driving_Profile = Limp_Crawl_irp;
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <limphome_Mode_IRP+0x30>)
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	7813      	ldrb	r3, [r2, #0]
 8001dfe:	2103      	movs	r1, #3
 8001e00:	f361 0384 	bfi	r3, r1, #2, #3
 8001e04:	7013      	strb	r3, [r2, #0]
		return 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e000      	b.n	8001e0c <limphome_Mode_IRP+0x20>
	}
	else
	{
		return 1;
 8001e0a:	2301      	movs	r3, #1
	}

	return 0;
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	1fff4804 	.word	0x1fff4804
 8001e1c:	1ffe8818 	.word	0x1ffe8818

08001e20 <SystemInit>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

__WEAK void SystemInit(void)
{
 8001e20:	b598      	push	{r3, r4, r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  memcpy(g_chipid, CHIPID_LOC, 16);
 8001e24:	4a05      	ldr	r2, [pc, #20]	; (8001e3c <SystemInit+0x1c>)
 8001e26:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001e2a:	4614      	mov	r4, r2
 8001e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001e2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  
  SystemCoreSetup();
 8001e32:	f006 fbef 	bl	8008614 <SystemCoreSetup>
  SystemCoreClockSetup(); 
 8001e36:	f006 fc57 	bl	80086e8 <SystemCoreClockSetup>
}
 8001e3a:	bd98      	pop	{r3, r4, r7, pc}
 8001e3c:	2003ffc4 	.word	0x2003ffc4

08001e40 <SystemCoreClockUpdate>:

  SystemCoreClockUpdate();
}

__WEAK void SystemCoreClockUpdate(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
  uint32_t pdiv;
  uint32_t ndiv;
  uint32_t kdiv;
  uint32_t temp;

  if (SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSSEL_Msk)
 8001e46:	4b2f      	ldr	r3, [pc, #188]	; (8001f04 <SystemCoreClockUpdate+0xc4>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d03e      	beq.n	8001ed0 <SystemCoreClockUpdate+0x90>
  {
    /* fPLL is clock source for fSYS */
    if(SCU_PLL->PLLCON2 & SCU_PLL_PLLCON2_PINSEL_Msk)
 8001e52:	4b2d      	ldr	r3, [pc, #180]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <SystemCoreClockUpdate+0x24>
    {
      /* PLL input clock is the backup clock (fOFI) */
      temp = OFI_FREQUENCY;
 8001e5e:	4b2b      	ldr	r3, [pc, #172]	; (8001f0c <SystemCoreClockUpdate+0xcc>)
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	e002      	b.n	8001e6a <SystemCoreClockUpdate+0x2a>
    }
    else
    {
      /* PLL input clock is the high performance osicllator (fOSCHP) */
      temp = OSCHP_GetFrequency();
 8001e64:	f006 fc36 	bl	80086d4 <OSCHP_GetFrequency>
 8001e68:	60f8      	str	r0, [r7, #12]
    }

    /* check if PLL is locked */
    if (SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk)
 8001e6a:	4b27      	ldr	r3, [pc, #156]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d020      	beq.n	8001eb8 <SystemCoreClockUpdate+0x78>
    {
      /* PLL normal mode */
      /* read back divider settings */
      pdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_PDIV_Msk) >> SCU_PLL_PLLCON1_PDIV_Pos) + 1;
 8001e76:	4b24      	ldr	r3, [pc, #144]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001e7e:	0e1b      	lsrs	r3, r3, #24
 8001e80:	3301      	adds	r3, #1
 8001e82:	60bb      	str	r3, [r7, #8]
      ndiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_NDIV_Msk) >> SCU_PLL_PLLCON1_NDIV_Pos) + 1;
 8001e84:	4b20      	ldr	r3, [pc, #128]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	f403 43fe 	and.w	r3, r3, #32512	; 0x7f00
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	3301      	adds	r3, #1
 8001e90:	607b      	str	r3, [r7, #4]
      kdiv = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K2DIV_Msk) >> SCU_PLL_PLLCON1_K2DIV_Pos) + 1;
 8001e92:	4b1d      	ldr	r3, [pc, #116]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e9a:	0c1b      	lsrs	r3, r3, #16
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	603b      	str	r3, [r7, #0]

      temp = (temp / (pdiv * kdiv)) * ndiv;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	fb02 f303 	mul.w	r3, r2, r3
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	fb02 f303 	mul.w	r3, r2, r3
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	e00d      	b.n	8001ed4 <SystemCoreClockUpdate+0x94>
    }
    else
    {
      /* PLL prescalar mode */
      /* read back divider settings */
      kdiv  = ((SCU_PLL->PLLCON1 & SCU_PLL_PLLCON1_K1DIV_Msk) >> SCU_PLL_PLLCON1_K1DIV_Pos) + 1;
 8001eb8:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <SystemCoreClockUpdate+0xc8>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	603b      	str	r3, [r7, #0]
      
      temp = (temp / kdiv);
 8001ec4:	68fa      	ldr	r2, [r7, #12]
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	e001      	b.n	8001ed4 <SystemCoreClockUpdate+0x94>
    }
  }
  else
  {
    /* fOFI is clock source for fSYS */    
    temp = OFI_FREQUENCY;
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <SystemCoreClockUpdate+0xcc>)
 8001ed2:	60fb      	str	r3, [r7, #12]
  }

  temp = temp / ((SCU_CLK->SYSCLKCR & SCU_CLK_SYSCLKCR_SYSDIV_Msk) + 1);
 8001ed4:	4b0b      	ldr	r3, [pc, #44]	; (8001f04 <SystemCoreClockUpdate+0xc4>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	68fa      	ldr	r2, [r7, #12]
 8001ede:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ee2:	60fb      	str	r3, [r7, #12]
  temp = temp / ((SCU_CLK->CPUCLKCR & SCU_CLK_CPUCLKCR_CPUDIV_Msk) + 1);
 8001ee4:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <SystemCoreClockUpdate+0xc4>)
 8001ee6:	691b      	ldr	r3, [r3, #16]
 8001ee8:	f003 0301 	and.w	r3, r3, #1
 8001eec:	3301      	adds	r3, #1
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef4:	60fb      	str	r3, [r7, #12]

  SystemCoreClock = temp;
 8001ef6:	4a06      	ldr	r2, [pc, #24]	; (8001f10 <SystemCoreClockUpdate+0xd0>)
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	50004600 	.word	0x50004600
 8001f08:	50004710 	.word	0x50004710
 8001f0c:	016e3600 	.word	0x016e3600
 8001f10:	2003ffc0 	.word	0x2003ffc0

08001f14 <XMC_GPIO_Init>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_Init(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_CONFIG_t *const config)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	60f8      	str	r0, [r7, #12]
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	607a      	str	r2, [r7, #4]
 8001f20:	72fb      	strb	r3, [r7, #11]
  XMC_ASSERT("XMC_GPIO_Init: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_Init: Invalid mode", XMC_GPIO_IsModeValid(config->mode));

  /* Switch to input */
  port->IOCR[pin >> 2U] &= (uint32_t)~(PORT_IOCR_PC_Msk << (PORT_IOCR_PC_Size * (pin & 0x3U)));
 8001f22:	7afb      	ldrb	r3, [r7, #11]
 8001f24:	089b      	lsrs	r3, r3, #2
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	4618      	mov	r0, r3
 8001f2a:	7afb      	ldrb	r3, [r7, #11]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	3204      	adds	r2, #4
 8001f36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001f3a:	7afb      	ldrb	r3, [r7, #11]
 8001f3c:	f003 0303 	and.w	r3, r3, #3
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	4619      	mov	r1, r3
 8001f44:	23f8      	movs	r3, #248	; 0xf8
 8001f46:	408b      	lsls	r3, r1
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	ea02 0103 	and.w	r1, r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1d02      	adds	r2, r0, #4
 8001f52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* HW port control is disabled */
  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
 8001f5c:	005b      	lsls	r3, r3, #1
 8001f5e:	4619      	mov	r1, r3
 8001f60:	2303      	movs	r3, #3
 8001f62:	408b      	lsls	r3, r1
 8001f64:	43db      	mvns	r3, r3
 8001f66:	401a      	ands	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	675a      	str	r2, [r3, #116]	; 0x74


  /* Enable digital input */
  if (XMC_GPIO_CHECK_ANALOG_PORT(port))
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	4a3a      	ldr	r2, [pc, #232]	; (8002058 <XMC_GPIO_Init+0x144>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d003      	beq.n	8001f7c <XMC_GPIO_Init+0x68>
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	4a39      	ldr	r2, [pc, #228]	; (800205c <XMC_GPIO_Init+0x148>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10a      	bne.n	8001f92 <XMC_GPIO_Init+0x7e>
  {
    port->PDISC &= ~(uint32_t)((uint32_t)0x1U << pin);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f80:	7afb      	ldrb	r3, [r7, #11]
 8001f82:	2101      	movs	r1, #1
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	43db      	mvns	r3, r3
 8001f8a:	401a      	ands	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	661a      	str	r2, [r3, #96]	; 0x60
 8001f90:	e042      	b.n	8002018 <XMC_GPIO_Init+0x104>
  }
  else
  {
    if ((config->mode & XMC_GPIO_MODE_OE) != 0)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	b25b      	sxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	da3c      	bge.n	8002018 <XMC_GPIO_Init+0x104>
    {
      /* If output is enabled */

      /* Set output level */
      port->OMR = (uint32_t)config->output_level << pin;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685a      	ldr	r2, [r3, #4]
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	605a      	str	r2, [r3, #4]

      /* Set output driver strength */
      port->PDR[pin >> 3U] &= (uint32_t)~(PORT_PDR_Msk << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U)));
 8001faa:	7afb      	ldrb	r3, [r7, #11]
 8001fac:	08db      	lsrs	r3, r3, #3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	08db      	lsrs	r3, r3, #3
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3210      	adds	r2, #16
 8001fbe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001fc2:	7afb      	ldrb	r3, [r7, #11]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	4619      	mov	r1, r3
 8001fcc:	2307      	movs	r3, #7
 8001fce:	408b      	lsls	r3, r1
 8001fd0:	43db      	mvns	r3, r3
 8001fd2:	ea02 0103 	and.w	r1, r2, r3
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	f100 0210 	add.w	r2, r0, #16
 8001fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      port->PDR[pin >> 3U] |= (uint32_t)config->output_strength << ((uint32_t)PORT_PDR_Size * ((uint32_t)pin & 0x7U));
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	08db      	lsrs	r3, r3, #3
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	7afb      	ldrb	r3, [r7, #11]
 8001fea:	08db      	lsrs	r3, r3, #3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	461a      	mov	r2, r3
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	3210      	adds	r2, #16
 8001ff4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	7a1b      	ldrb	r3, [r3, #8]
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f003 0307 	and.w	r3, r3, #7
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	fa01 f303 	lsl.w	r3, r1, r3
 800200a:	ea42 0103 	orr.w	r1, r2, r3
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f100 0210 	add.w	r2, r0, #16
 8002014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
  }

  /* Set mode */
  port->IOCR[pin >> 2U] |= (uint32_t)config->mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8002018:	7afb      	ldrb	r3, [r7, #11]
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	b2db      	uxtb	r3, r3
 800201e:	4618      	mov	r0, r3
 8002020:	7afb      	ldrb	r3, [r7, #11]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	b2db      	uxtb	r3, r3
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	3204      	adds	r2, #4
 800202c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	4619      	mov	r1, r3
 8002036:	7afb      	ldrb	r3, [r7, #11]
 8002038:	f003 0303 	and.w	r3, r3, #3
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	fa01 f303 	lsl.w	r3, r1, r3
 8002042:	ea42 0103 	orr.w	r1, r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1d02      	adds	r2, r0, #4
 800204a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	48028e00 	.word	0x48028e00
 800205c:	48028f00 	.word	0x48028f00

08002060 <XMC_RTC_IsRunning>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_RTC_Start(), XMC_RTC_Stop()
 */
__STATIC_INLINE bool XMC_RTC_IsRunning(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return (bool)(RTC->CTR & RTC_CTR_ENB_Msk);
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <XMC_RTC_IsRunning+0x20>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	50004a00 	.word	0x50004a00

08002084 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <XMC_SCU_GetMirrorStatus+0x14>)
 800208a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	50004000 	.word	0x50004000

0800209c <XMC_RTC_Init>:

/*
 * Initialize the RTC peripheral
 */
XMC_RTC_STATUS_t XMC_RTC_Init(const XMC_RTC_CONFIG_t *const config)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  if (XMC_RTC_IsRunning() == false)
 80020a4:	f7ff ffdc 	bl	8002060 <XMC_RTC_IsRunning>
 80020a8:	4603      	mov	r3, r0
 80020aa:	f083 0301 	eor.w	r3, r3, #1
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d03e      	beq.n	8002132 <XMC_RTC_Init+0x96>
  {
    if (XMC_SCU_HIB_IsHibernateDomainEnabled() == false)
 80020b4:	f000 fbd0 	bl	8002858 <XMC_SCU_HIB_IsHibernateDomainEnabled>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f083 0301 	eor.w	r3, r3, #1
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <XMC_RTC_Init+0x2c>
    {
      XMC_SCU_HIB_EnableHibernateDomain();
 80020c4:	f000 fb9c 	bl	8002800 <XMC_SCU_HIB_EnableHibernateDomain>
    }

    XMC_RTC_SetPrescaler(config->prescaler);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	8a1b      	ldrh	r3, [r3, #16]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f002 fa7d 	bl	80045cc <XMC_RTC_SetPrescaler>

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 80020d2:	bf00      	nop
 80020d4:	f7ff ffd6 	bl	8002084 <XMC_SCU_GetMirrorStatus>
 80020d8:	4603      	mov	r3, r0
 80020da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1f8      	bne.n	80020d4 <XMC_RTC_Init+0x38>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM0 = config->time.raw0;
 80020e2:	4a16      	ldr	r2, [pc, #88]	; (800213c <XMC_RTC_Init+0xa0>)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6213      	str	r3, [r2, #32]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 80020ea:	bf00      	nop
 80020ec:	f7ff ffca 	bl	8002084 <XMC_SCU_GetMirrorStatus>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d1f8      	bne.n	80020ec <XMC_RTC_Init+0x50>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->TIM1 = config->time.raw1;
 80020fa:	4a10      	ldr	r2, [pc, #64]	; (800213c <XMC_RTC_Init+0xa0>)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	6253      	str	r3, [r2, #36]	; 0x24

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM0_Msk) != 0U)
 8002102:	bf00      	nop
 8002104:	f7ff ffbe 	bl	8002084 <XMC_SCU_GetMirrorStatus>
 8002108:	4603      	mov	r3, r0
 800210a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1f8      	bne.n	8002104 <XMC_RTC_Init+0x68>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM0 = config->alarm.raw0;
 8002112:	4a0a      	ldr	r2, [pc, #40]	; (800213c <XMC_RTC_Init+0xa0>)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	6193      	str	r3, [r2, #24]

    while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_ATIM1_Msk) != 0U)
 800211a:	bf00      	nop
 800211c:	f7ff ffb2 	bl	8002084 <XMC_SCU_GetMirrorStatus>
 8002120:	4603      	mov	r3, r0
 8002122:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1f8      	bne.n	800211c <XMC_RTC_Init+0x80>
    {
      /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
    }
    RTC->ATIM1 = config->alarm.raw1;
 800212a:	4a04      	ldr	r2, [pc, #16]	; (800213c <XMC_RTC_Init+0xa0>)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	61d3      	str	r3, [r2, #28]
  }
  return XMC_RTC_STATUS_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3708      	adds	r7, #8
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	50004a00 	.word	0x50004a00

08002140 <XMC_RTC_EnableEvent>:

/*
 * Enable RTC periodic and alarm event(s)
 */
void XMC_RTC_EnableEvent(const uint32_t event)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_MSKSR_Msk) != 0U)
 8002148:	bf00      	nop
 800214a:	f7ff ff9b 	bl	8002084 <XMC_SCU_GetMirrorStatus>
 800214e:	4603      	mov	r3, r0
 8002150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f8      	bne.n	800214a <XMC_RTC_EnableEvent+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->MSKSR |= event;
 8002158:	4904      	ldr	r1, [pc, #16]	; (800216c <XMC_RTC_EnableEvent+0x2c>)
 800215a:	4b04      	ldr	r3, [pc, #16]	; (800216c <XMC_RTC_EnableEvent+0x2c>)
 800215c:	691a      	ldr	r2, [r3, #16]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	610b      	str	r3, [r1, #16]
}
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	50004a00 	.word	0x50004a00

08002170 <XMC_SCU_CLOCK_GetCpuClockFrequency>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SCU_CLOCK_GetPeripheralClockFrequency(), XMC_SCU_CLOCK_GatePeripheralClock() \n\n\n
 */
__STATIC_INLINE uint32_t XMC_SCU_CLOCK_GetCpuClockFrequency(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002174:	4b03      	ldr	r3, [pc, #12]	; (8002184 <XMC_SCU_CLOCK_GetCpuClockFrequency+0x14>)
 8002176:	681b      	ldr	r3, [r3, #0]
}
 8002178:	4618      	mov	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	2003ffc0 	.word	0x2003ffc0

08002188 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 800218c:	4b03      	ldr	r3, [pc, #12]	; (800219c <XMC_SCU_GetMirrorStatus+0x14>)
 800218e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 8002192:	4618      	mov	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr
 800219c:	50004000 	.word	0x50004000

080021a0 <XMC_SCU_lDelay>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/
/* This is a local function used to generate the delay until register get updated with new configured value.  */
void XMC_SCU_lDelay(uint32_t delay)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b084      	sub	sp, #16
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t i;

  SystemCoreClockUpdate();
 80021a8:	f7ff fe4a 	bl	8001e40 <SystemCoreClockUpdate>
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);
 80021ac:	4b0b      	ldr	r3, [pc, #44]	; (80021dc <XMC_SCU_lDelay+0x3c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a0b      	ldr	r2, [pc, #44]	; (80021e0 <XMC_SCU_lDelay+0x40>)
 80021b2:	fba2 2303 	umull	r2, r3, r2, r3
 80021b6:	0c9a      	lsrs	r2, r3, #18
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	607b      	str	r3, [r7, #4]

  for (i = 0U; i < delay; ++i)
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	e003      	b.n	80021ce <XMC_SCU_lDelay+0x2e>
  {
    __NOP();
 80021c6:	bf00      	nop
  uint32_t i;

  SystemCoreClockUpdate();
  delay =  delay * (uint32_t)(SystemCoreClock / FREQ_1MHZ);

  for (i = 0U; i < delay; ++i)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	3301      	adds	r3, #1
 80021cc:	60fb      	str	r3, [r7, #12]
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d3f7      	bcc.n	80021c6 <XMC_SCU_lDelay+0x26>
  {
    __NOP();
  }
}
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	2003ffc0 	.word	0x2003ffc0
 80021e0:	431bde83 	.word	0x431bde83

080021e4 <XMC_SCU_INTERRUPT_EnableEvent>:

/* API to enable the SCU event */
void XMC_SCU_INTERRUPT_EnableEvent(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRMSK |= (uint32_t)event;
 80021ec:	4905      	ldr	r1, [pc, #20]	; (8002204 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80021ee:	4b05      	ldr	r3, [pc, #20]	; (8002204 <XMC_SCU_INTERRUPT_EnableEvent+0x20>)
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	608b      	str	r3, [r1, #8]
}
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	50004074 	.word	0x50004074

08002208 <XMC_SCU_INTERUPT_GetEventStatus>:
  SCU_INTERRUPT->SRSET |= (uint32_t)event;
}

/* API to retrieve the SCU event status */
XMC_SCU_INTERRUPT_EVENT_t XMC_SCU_INTERUPT_GetEventStatus(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return (SCU_INTERRUPT->SRRAW);
 800220c:	4b03      	ldr	r3, [pc, #12]	; (800221c <XMC_SCU_INTERUPT_GetEventStatus+0x14>)
 800220e:	685b      	ldr	r3, [r3, #4]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	50004074 	.word	0x50004074

08002220 <XMC_SCU_INTERRUPT_ClearEventStatus>:

/* API to clear the SCU event status */
void XMC_SCU_INTERRUPT_ClearEventStatus(const XMC_SCU_INTERRUPT_EVENT_t event)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->SRCLR = (uint32_t)event;
 8002228:	4a03      	ldr	r2, [pc, #12]	; (8002238 <XMC_SCU_INTERRUPT_ClearEventStatus+0x18>)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	60d3      	str	r3, [r2, #12]
}
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	50004074 	.word	0x50004074

0800223c <XMC_SCU_CLOCK_Init>:
  return (SCU_GENERAL->RMDATA);
}

/* API to initialize the clock tree */
void XMC_SCU_CLOCK_Init(const XMC_SCU_CLOCK_CONFIG_t *const config)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af02      	add	r7, sp, #8
 8002242:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("", ((config->fstdby_clksrc == XMC_SCU_HIB_STDBYCLKSRC_OSCULP) && (config->enable_osculp == true)) ||
             (config->fstdby_clksrc != XMC_SCU_HIB_STDBYCLKSRC_OSCULP));
  XMC_ASSERT("", ((config->syspll_config.clksrc == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) &&
                  (config->enable_oschp == true)) || (config->syspll_config.clksrc != XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP));

  XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_OFI);
 8002244:	2000      	movs	r0, #0
 8002246:	f000 f8d7 	bl	80023f8 <XMC_SCU_CLOCK_SetSystemClockSource>

  XMC_SCU_HIB_EnableHibernateDomain();
 800224a:	f000 fad9 	bl	8002800 <XMC_SCU_HIB_EnableHibernateDomain>

  if (config->enable_osculp == true)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	79db      	ldrb	r3, [r3, #7]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d00a      	beq.n	800226c <XMC_SCU_CLOCK_Init+0x30>
  {
    XMC_SCU_CLOCK_EnableLowPowerOscillator();
 8002256:	f000 fb2f 	bl	80028b8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>
    while (XMC_SCU_CLOCK_IsLowPowerOscillatorStable() == false);
 800225a:	bf00      	nop
 800225c:	f000 fb1a 	bl	8002894 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>
 8002260:	4603      	mov	r3, r0
 8002262:	f083 0301 	eor.w	r3, r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1f7      	bne.n	800225c <XMC_SCU_CLOCK_Init+0x20>
  }

  XMC_SCU_HIB_SetStandbyClockSource(config->fstdby_clksrc);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7a5b      	ldrb	r3, [r3, #9]
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f93b 	bl	80024ec <XMC_SCU_HIB_SetStandbyClockSource>
  while (XMC_SCU_GetMirrorStatus() != 0)
 8002276:	bf00      	nop
 8002278:	f7ff ff86 	bl	8002188 <XMC_SCU_GetMirrorStatus>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1fa      	bne.n	8002278 <XMC_SCU_CLOCK_Init+0x3c>
  {
    /* Wait until update of the stanby clock source is done in the HIB domain */
  }

  XMC_SCU_CLOCK_SetBackupClockCalibrationMode(config->calibration_mode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7a1b      	ldrb	r3, [r3, #8]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa94 	bl	80027b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>

  XMC_SCU_CLOCK_SetSystemClockDivider((uint32_t)config->fsys_clkdiv);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7c1b      	ldrb	r3, [r3, #16]
 8002290:	4618      	mov	r0, r3
 8002292:	f000 f949 	bl	8002528 <XMC_SCU_CLOCK_SetSystemClockDivider>
  XMC_SCU_CLOCK_SetCpuClockDivider((uint32_t)config->fcpu_clkdiv);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7c5b      	ldrb	r3, [r3, #17]
 800229a:	4618      	mov	r0, r3
 800229c:	f000 f96c 	bl	8002578 <XMC_SCU_CLOCK_SetCpuClockDivider>
  XMC_SCU_CLOCK_SetCcuClockDivider((uint32_t)config->fccu_clkdiv);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	7c9b      	ldrb	r3, [r3, #18]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 f953 	bl	8002550 <XMC_SCU_CLOCK_SetCcuClockDivider>
  XMC_SCU_CLOCK_SetPeripheralClockDivider((uint32_t)config->fperipheral_clkdiv);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	7cdb      	ldrb	r3, [r3, #19]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 f976 	bl	80025a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>

  if (config->enable_oschp == true)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	799b      	ldrb	r3, [r3, #6]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00a      	beq.n	80022d2 <XMC_SCU_CLOCK_Init+0x96>
  {
    XMC_SCU_CLOCK_EnableHighPerformanceOscillator();
 80022bc:	f000 fb34 	bl	8002928 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>
    while (XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable() == false);
 80022c0:	bf00      	nop
 80022c2:	f000 fb59 	bl	8002978 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>
 80022c6:	4603      	mov	r3, r0
 80022c8:	f083 0301 	eor.w	r3, r3, #1
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f7      	bne.n	80022c2 <XMC_SCU_CLOCK_Init+0x86>
  }

  if (config->syspll_config.mode == XMC_SCU_CLOCK_SYSPLL_MODE_DISABLED)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	78db      	ldrb	r3, [r3, #3]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d109      	bne.n	80022ee <XMC_SCU_CLOCK_Init+0xb2>
  {
    /* Do not enable PLL Power Down Mode when the OSC Watchdog is enabled */
    if (config->enable_oschp == false)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	799b      	ldrb	r3, [r3, #6]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d017      	beq.n	8002318 <XMC_SCU_CLOCK_Init+0xdc>
    {
      XMC_SCU_CLOCK_DisableSystemPll();
 80022e8:	f000 fb6a 	bl	80029c0 <XMC_SCU_CLOCK_DisableSystemPll>
 80022ec:	e014      	b.n	8002318 <XMC_SCU_CLOCK_Init+0xdc>
    }
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
 80022ee:	f000 fb57 	bl	80029a0 <XMC_SCU_CLOCK_EnableSystemPll>
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	8899      	ldrh	r1, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	78da      	ldrb	r2, [r3, #3]
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	785b      	ldrb	r3, [r3, #1]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 80022fe:	461d      	mov	r5, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	781b      	ldrb	r3, [r3, #0]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 8002304:	461c      	mov	r4, r3
                                 config->syspll_config.mode,
                                 (uint32_t)config->syspll_config.p_div,
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	789b      	ldrb	r3, [r3, #2]
  }
  else
  {

    XMC_SCU_CLOCK_EnableSystemPll();
    XMC_SCU_CLOCK_StartSystemPll(config->syspll_config.clksrc,
 800230a:	9300      	str	r3, [sp, #0]
 800230c:	4608      	mov	r0, r1
 800230e:	4611      	mov	r1, r2
 8002310:	462a      	mov	r2, r5
 8002312:	4623      	mov	r3, r4
 8002314:	f000 fb64 	bl	80029e0 <XMC_SCU_CLOCK_StartSystemPll>
                                 (uint32_t)config->syspll_config.n_div,
                                 (uint32_t)config->syspll_config.k_div);
  }

  /* use SYSPLL? */
  if (config->fsys_clksrc == XMC_SCU_CLOCK_SYSCLKSRC_PLL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002320:	d103      	bne.n	800232a <XMC_SCU_CLOCK_Init+0xee>
  {
    XMC_SCU_CLOCK_SetSystemClockSource(XMC_SCU_CLOCK_SYSCLKSRC_PLL);
 8002322:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8002326:	f000 f867 	bl	80023f8 <XMC_SCU_CLOCK_SetSystemClockSource>
  }
  SystemCoreClockUpdate();
 800232a:	f7ff fd89 	bl	8001e40 <SystemCoreClockUpdate>
}
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bdb0      	pop	{r4, r5, r7, pc}

08002334 <XMC_SCU_INTERRUPT_EnableNmiRequest>:
  SCU_PARITY->PETE &= (uint32_t)~memory;
}

/* Enables a NMI source */
void XMC_SCU_INTERRUPT_EnableNmiRequest(const uint32_t request)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  SCU_INTERRUPT->NMIREQEN |= (uint32_t)request;
 800233c:	4905      	ldr	r1, [pc, #20]	; (8002354 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <XMC_SCU_INTERRUPT_EnableNmiRequest+0x20>)
 8002340:	695a      	ldr	r2, [r3, #20]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4313      	orrs	r3, r2
 8002346:	614b      	str	r3, [r1, #20]
}
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	50004074 	.word	0x50004074

08002358 <XMC_SCU_RESET_DeassertPeripheralReset>:
  *(volatile uint32_t *)(&(SCU_RESET->PRSET0) + (index * 3U)) = (uint32_t)mask;
}

/* API to manually de-assert a reset request */
void XMC_SCU_RESET_DeassertPeripheralReset(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	0f1b      	lsrs	r3, r3, #28
 8002364:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800236c:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_RESET->PRCLR0) + (index * 3U)) = (uint32_t)mask;
 800236e:	68fa      	ldr	r2, [r7, #12]
 8002370:	4613      	mov	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	461a      	mov	r2, r3
 800237a:	4b04      	ldr	r3, [pc, #16]	; (800238c <XMC_SCU_RESET_DeassertPeripheralReset+0x34>)
 800237c:	4413      	add	r3, r2
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	3714      	adds	r7, #20
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	50004414 	.word	0x50004414

08002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>:

/* Find out if the peripheral reset is asserted */
bool XMC_SCU_RESET_IsPeripheralResetAsserted(const XMC_SCU_PERIPHERAL_RESET_t peripheral)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((((uint32_t)peripheral) & 0xf0000000UL) >> 28UL);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	0f1b      	lsrs	r3, r3, #28
 800239c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (((uint32_t)peripheral) & ((uint32_t)~0xf0000000UL));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023a4:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_RESET->PRSTAT0) + (index * 3U)) & mask) != 0U);
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4613      	mov	r3, r2
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	4413      	add	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <XMC_SCU_RESET_IsPeripheralResetAsserted+0x44>)
 80023b4:	4413      	add	r3, r2
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b00      	cmp	r3, #0
 80023be:	bf14      	ite	ne
 80023c0:	2301      	movne	r3, #1
 80023c2:	2300      	moveq	r3, #0
 80023c4:	b2db      	uxtb	r3, r3
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	5000440c 	.word	0x5000440c

080023d8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>:

/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	af00      	add	r7, sp, #0
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80023dc:	f7ff fec8 	bl	8002170 <XMC_SCU_CLOCK_GetCpuClockFrequency>
 80023e0:	4602      	mov	r2, r0
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
 80023e2:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <XMC_SCU_CLOCK_GetPeripheralClockFrequency+0x1c>)
 80023e4:	695b      	ldr	r3, [r3, #20]
/*
 * API to retrieve clock frequency of peripherals on the peripheral bus using a shared functional clock
 */
uint32_t XMC_SCU_CLOCK_GetPeripheralClockFrequency(void)
{
  return (uint32_t)(XMC_SCU_CLOCK_GetCpuClockFrequency() >>
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	fa22 f303 	lsr.w	r3, r2, r3
                    ((SCU_CLK->PBCLKCR & SCU_CLK_PBCLKCR_PBDIV_Msk) >> SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	50004600 	.word	0x50004600

080023f8 <XMC_SCU_CLOCK_SetSystemClockSource>:

/* API to select fSYS */
void XMC_SCU_CLOCK_SetSystemClockSource(const XMC_SCU_CLOCK_SYSCLKSRC_t source)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSSEL_Msk)) |
 8002400:	4906      	ldr	r1, [pc, #24]	; (800241c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <XMC_SCU_CLOCK_SetSystemClockSource+0x24>)
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4313      	orrs	r3, r2
 800240e:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)source);
}
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	50004600 	.word	0x50004600

08002420 <XMC_SCU_CLOCK_SetUsbClockSource>:

/* API to select fUSB */
void XMC_SCU_CLOCK_SetUsbClockSource(const XMC_SCU_CLOCK_USBCLKSRC_t source)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBSEL_Msk)) |
 8002428:	4906      	ldr	r1, [pc, #24]	; (8002444 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800242a:	4b06      	ldr	r3, [pc, #24]	; (8002444 <XMC_SCU_CLOCK_SetUsbClockSource+0x24>)
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4313      	orrs	r3, r2
 8002436:	618b      	str	r3, [r1, #24]
                      ((uint32_t)source);
}
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	50004600 	.word	0x50004600

08002448 <XMC_SCU_CLOCK_SetWdtClockSource>:

/* API to select fWDT */
void XMC_SCU_CLOCK_SetWdtClockSource(const XMC_SCU_CLOCK_WDTCLKSRC_t source)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTSEL_Msk)) |
 8002450:	4906      	ldr	r1, [pc, #24]	; (800246c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002452:	4b06      	ldr	r3, [pc, #24]	; (800246c <XMC_SCU_CLOCK_SetWdtClockSource+0x24>)
 8002454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002456:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4313      	orrs	r3, r2
 800245e:	624b      	str	r3, [r1, #36]	; 0x24
                      ((uint32_t)source);
}
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	50004600 	.word	0x50004600

08002470 <XMC_SCU_CLOCK_SetSystemPllClockSource>:
                      ((uint32_t)source);
}

/* API to select fPLL */
void XMC_SCU_CLOCK_SetSystemPllClockSource(const XMC_SCU_CLOCK_SYSPLLCLKSRC_t source)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	4603      	mov	r3, r0
 8002478:	80fb      	strh	r3, [r7, #6]
  /* Check input clock */
  if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP) /* Select PLLClockSource */
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d108      	bne.n	8002492 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x22>
  {
    SCU_PLL->PLLCON2 &= (uint32_t)~(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002480:	4a0a      	ldr	r2, [pc, #40]	; (80024ac <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800248a:	f023 0301 	bic.w	r3, r3, #1
 800248e:	60d3      	str	r3, [r2, #12]
 8002490:	e007      	b.n	80024a2 <XMC_SCU_CLOCK_SetSystemPllClockSource+0x32>
  }
  else
  {
    SCU_PLL->PLLCON2 |= (uint32_t)(SCU_PLL_PLLCON2_PINSEL_Msk | SCU_PLL_PLLCON2_K1INSEL_Msk);
 8002492:	4a06      	ldr	r2, [pc, #24]	; (80024ac <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002494:	4b05      	ldr	r3, [pc, #20]	; (80024ac <XMC_SCU_CLOCK_SetSystemPllClockSource+0x3c>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	60d3      	str	r3, [r2, #12]
  }
}
 80024a2:	370c      	adds	r7, #12
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	50004710 	.word	0x50004710

080024b0 <XMC_SCU_HIB_SetRtcClockSource>:

/* API to select fRTC */
void XMC_SCU_HIB_SetRtcClockSource(const XMC_SCU_HIB_RTCCLKSRC_t source)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	4603      	mov	r3, r0
 80024b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80024ba:	bf00      	nop
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <XMC_SCU_HIB_SetRtcClockSource+0x34>)
 80024be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f8      	bne.n	80024bc <XMC_SCU_HIB_SetRtcClockSource+0xc>
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80024ca:	4907      	ldr	r1, [pc, #28]	; (80024e8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <XMC_SCU_HIB_SetRtcClockSource+0x38>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
                        ((uint32_t)source);
 80024d4:	79fb      	ldrb	r3, [r7, #7]
  /* Wait until the update of HDCR register in hibernate domain is completed */
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
  }

  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_RCS_Msk)) |
 80024d6:	4313      	orrs	r3, r2
 80024d8:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	50004000 	.word	0x50004000
 80024e8:	50004300 	.word	0x50004300

080024ec <XMC_SCU_HIB_SetStandbyClockSource>:

/* API to select fSTDBY */
void XMC_SCU_HIB_SetStandbyClockSource(const XMC_SCU_HIB_STDBYCLKSRC_t source)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	71fb      	strb	r3, [r7, #7]
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
 80024f6:	bf00      	nop
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <XMC_SCU_HIB_SetStandbyClockSource+0x34>)
 80024fa:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80024fe:	f003 0308 	and.w	r3, r3, #8
 8002502:	2b00      	cmp	r3, #0
 8002504:	d1f8      	bne.n	80024f8 <XMC_SCU_HIB_SetStandbyClockSource+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8002506:	4907      	ldr	r1, [pc, #28]	; (8002524 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 8002508:	4b06      	ldr	r3, [pc, #24]	; (8002524 <XMC_SCU_HIB_SetStandbyClockSource+0x38>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
                        ((uint32_t)source);
 8002510:	79fb      	ldrb	r3, [r7, #7]
{
  while ((SCU_GENERAL->MIRRSTS) & SCU_GENERAL_MIRRSTS_HDCR_Msk)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  SCU_HIBERNATE->HDCR = (SCU_HIBERNATE->HDCR & ((uint32_t)~SCU_HIBERNATE_HDCR_STDBYSEL_Msk)) |
 8002512:	4313      	orrs	r3, r2
 8002514:	60cb      	str	r3, [r1, #12]
                        ((uint32_t)source);
}
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251e:	4770      	bx	lr
 8002520:	50004000 	.word	0x50004000
 8002524:	50004300 	.word	0x50004300

08002528 <XMC_SCU_CLOCK_SetSystemClockDivider>:

/* API to program the divider placed between fsys and its parent */
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 8002530:	4906      	ldr	r1, [pc, #24]	; (800254c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002532:	4b06      	ldr	r3, [pc, #24]	; (800254c <XMC_SCU_CLOCK_SetSystemClockDivider+0x24>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetSystemClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSystemClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_SYSCLKCR_SYSDIV_Msk + 1UL)) );

  SCU_CLK->SYSCLKCR = (SCU_CLK->SYSCLKCR & ((uint32_t)~SCU_CLK_SYSCLKCR_SYSDIV_Msk)) |
 800253e:	4313      	orrs	r3, r2
 8002540:	60cb      	str	r3, [r1, #12]
                      ((uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_SYSCLKCR_SYSDIV_Pos));
}
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	50004600 	.word	0x50004600

08002550 <XMC_SCU_CLOCK_SetCcuClockDivider>:

/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002558:	4906      	ldr	r1, [pc, #24]	; (8002574 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <XMC_SCU_CLOCK_SetCcuClockDivider+0x24>)
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3b01      	subs	r3, #1
/* API to program the divider placed between fccu and its parent */
void XMC_SCU_CLOCK_SetCcuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCapcomClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CCUCLKCR = (SCU_CLK->CCUCLKCR & ((uint32_t)~SCU_CLK_CCUCLKCR_CCUDIV_Msk)) |
 8002566:	4313      	orrs	r3, r2
 8002568:	620b      	str	r3, [r1, #32]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CCUCLKCR_CCUDIV_Pos);
}
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	50004600 	.word	0x50004600

08002578 <XMC_SCU_CLOCK_SetCpuClockDivider>:

/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 8002580:	4906      	ldr	r1, [pc, #24]	; (800259c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002582:	4b06      	ldr	r3, [pc, #24]	; (800259c <XMC_SCU_CLOCK_SetCpuClockDivider+0x24>)
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f023 0201 	bic.w	r2, r3, #1
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3b01      	subs	r3, #1
/* API to program the divider placed between fcpu and its parent */
void XMC_SCU_CLOCK_SetCpuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetCpuClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->CPUCLKCR = (SCU_CLK->CPUCLKCR & ((uint32_t)~SCU_CLK_CPUCLKCR_CPUDIV_Msk)) |
 800258e:	4313      	orrs	r3, r2
 8002590:	610b      	str	r3, [r1, #16]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_CPUCLKCR_CPUDIV_Pos);
}
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	50004600 	.word	0x50004600

080025a0 <XMC_SCU_CLOCK_SetPeripheralClockDivider>:

/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80025a8:	4906      	ldr	r1, [pc, #24]	; (80025c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <XMC_SCU_CLOCK_SetPeripheralClockDivider+0x24>)
 80025ac:	695b      	ldr	r3, [r3, #20]
 80025ae:	f023 0201 	bic.w	r2, r3, #1
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	3b01      	subs	r3, #1
/* API to program the divider placed between fperiph and its parent */
void XMC_SCU_CLOCK_SetPeripheralClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetPeripheralClockDivider:Wrong clock divider value", (divider <= 2UL) );

  SCU_CLK->PBCLKCR = (SCU_CLK->PBCLKCR & ((uint32_t)~SCU_CLK_PBCLKCR_PBDIV_Msk)) |
 80025b6:	4313      	orrs	r3, r2
 80025b8:	614b      	str	r3, [r1, #20]
                     ((uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_PBCLKCR_PBDIV_Pos));
}
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	50004600 	.word	0x50004600

080025c8 <XMC_SCU_CLOCK_SetUsbClockDivider>:

/* API to program the divider placed between fsdmmc and its parent */
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80025d0:	4906      	ldr	r1, [pc, #24]	; (80025ec <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <XMC_SCU_CLOCK_SetUsbClockDivider+0x24>)
 80025d4:	699b      	ldr	r3, [r3, #24]
 80025d6:	f023 0207 	bic.w	r2, r3, #7
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetUsbClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetSdmmcClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_USBCLKCR_USBDIV_Msk + 1UL)) );

  SCU_CLK->USBCLKCR = (SCU_CLK->USBCLKCR & ((uint32_t)~SCU_CLK_USBCLKCR_USBDIV_Msk)) |
 80025de:	4313      	orrs	r3, r2
 80025e0:	618b      	str	r3, [r1, #24]
                      (uint32_t)((uint32_t)(divider - 1UL) << SCU_CLK_USBCLKCR_USBDIV_Pos);
}
 80025e2:	370c      	adds	r7, #12
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr
 80025ec:	50004600 	.word	0x50004600

080025f0 <XMC_SCU_CLOCK_SetEbuClockDivider>:

#if defined(EBU)
/* API to program the divider placed between febu and its parent */
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <XMC_SCU_CLOCK_SetEbuClockDivider+0x24>)
 80025fc:	69db      	ldr	r3, [r3, #28]
 80025fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetEbuClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetEbuClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_EBUCLKCR_EBUDIV_Msk + 1UL) ) );

  SCU_CLK->EBUCLKCR = (SCU_CLK->EBUCLKCR & ((uint32_t)~SCU_CLK_EBUCLKCR_EBUDIV_Msk)) |
 8002606:	4313      	orrs	r3, r2
 8002608:	61cb      	str	r3, [r1, #28]
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_EBUCLKCR_EBUDIV_Pos);
}
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	50004600 	.word	0x50004600

08002618 <XMC_SCU_CLOCK_SetWdtClockDivider>:
#endif

/* API to program the divider placed between fwdt and its parent */
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 8002620:	4906      	ldr	r1, [pc, #24]	; (800263c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002622:	4b06      	ldr	r3, [pc, #24]	; (800263c <XMC_SCU_CLOCK_SetWdtClockDivider+0x24>)
 8002624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002626:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3b01      	subs	r3, #1
void XMC_SCU_CLOCK_SetWdtClockDivider(const uint32_t divider)
{
  XMC_ASSERT("XMC_SCU_CLOCK_SetWdtClockDivider:Wrong clock divider value",
             (divider <= (SCU_CLK_WDTCLKCR_WDTDIV_Msk + 1UL) ) );

  SCU_CLK->WDTCLKCR = (SCU_CLK->WDTCLKCR & ((uint32_t)~SCU_CLK_WDTCLKCR_WDTDIV_Msk)) |
 800262e:	4313      	orrs	r3, r2
 8002630:	624b      	str	r3, [r1, #36]	; 0x24
                      (uint32_t)(((uint32_t)(divider - 1UL)) << SCU_CLK_WDTCLKCR_WDTDIV_Pos);
}
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	50004600 	.word	0x50004600

08002640 <XMC_SCU_CLOCK_EnableClock>:
}
#endif

/* API to enable a given module clock */
void XMC_SCU_CLOCK_EnableClock(const XMC_SCU_CLOCK_t clock)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	4603      	mov	r3, r0
 8002648:	71fb      	strb	r3, [r7, #7]
  SCU_CLK->CLKSET = ((uint32_t)clock);
 800264a:	4a04      	ldr	r2, [pc, #16]	; (800265c <XMC_SCU_CLOCK_EnableClock+0x1c>)
 800264c:	79fb      	ldrb	r3, [r7, #7]
 800264e:	6053      	str	r3, [r2, #4]
}
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	50004600 	.word	0x50004600

08002660 <XMC_SCU_CLOCK_UngatePeripheralClock>:
  *(volatile uint32_t *)((&(SCU_CLK->CGATSET0)) + (index * 3U)) = (uint32_t)mask;
}

/* API to ungate a given module clock */
void XMC_SCU_CLOCK_UngatePeripheralClock(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002660:	b480      	push	{r7}
 8002662:	b085      	sub	sp, #20
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t index = (uint32_t)((peripheral & 0xf0000000UL) >> 28UL);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	0f1b      	lsrs	r3, r3, #28
 800266c:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002674:	60bb      	str	r3, [r7, #8]

  *(volatile uint32_t *)(&(SCU_CLK->CGATCLR0) + (index * 3U)) = (uint32_t)mask;
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	4413      	add	r3, r2
 800267e:	009b      	lsls	r3, r3, #2
 8002680:	461a      	mov	r2, r3
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <XMC_SCU_CLOCK_UngatePeripheralClock+0x34>)
 8002684:	4413      	add	r3, r2
 8002686:	68ba      	ldr	r2, [r7, #8]
 8002688:	601a      	str	r2, [r3, #0]
}
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	50004648 	.word	0x50004648

08002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>:

/* API to ungate a given module clock */
bool XMC_SCU_CLOCK_IsPeripheralClockGated(const XMC_SCU_PERIPHERAL_CLOCK_t peripheral)
{
 8002698:	b480      	push	{r7}
 800269a:	b085      	sub	sp, #20
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  uint32_t index = ((peripheral & 0xf0000000UL) >> 28UL);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	0f1b      	lsrs	r3, r3, #28
 80026a4:	60fb      	str	r3, [r7, #12]
  uint32_t mask = (peripheral & (uint32_t)~0xf0000000UL);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026ac:	60bb      	str	r3, [r7, #8]

  return ((*(const volatile uint32_t *)(&(SCU_CLK->CGATSTAT0) + (index * 3U)) & mask) != 0U);
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	4613      	mov	r3, r2
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	461a      	mov	r2, r3
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <XMC_SCU_CLOCK_IsPeripheralClockGated+0x44>)
 80026bc:	4413      	add	r3, r2
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	4013      	ands	r3, r2
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	bf14      	ite	ne
 80026c8:	2301      	movne	r3, #1
 80026ca:	2300      	moveq	r3, #0
 80026cc:	b2db      	uxtb	r3, r3
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3714      	adds	r7, #20
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	50004640 	.word	0x50004640

080026e0 <XMC_SCU_CLOCK_EnableUsbPll>:
  return ((SCU_POWER->EVRVADCSTAT & SCU_POWER_EVRVADCSTAT_VADC33V_Msk) >> SCU_POWER_EVRVADCSTAT_VADC33V_Pos) * XMC_SCU_POWER_LSB33V;
}

/* API to enable USB PLL for USB clock */
void XMC_SCU_CLOCK_EnableUsbPll(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  SCU_PLL->USBPLLCON &= (uint32_t)~(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80026e6:	4b05      	ldr	r3, [pc, #20]	; (80026fc <XMC_SCU_CLOCK_EnableUsbPll+0x1c>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ee:	f023 0302 	bic.w	r3, r3, #2
 80026f2:	6153      	str	r3, [r2, #20]
}
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	50004710 	.word	0x50004710

08002700 <XMC_SCU_CLOCK_StartUsbPll>:
  SCU_PLL->USBPLLCON |= (uint32_t)(SCU_PLL_USBPLLCON_VCOPWD_Msk | SCU_PLL_USBPLLCON_PLLPWD_Msk);
}

/* API to configure USB PLL */
void XMC_SCU_CLOCK_StartUsbPll(uint32_t pdiv, uint32_t ndiv)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  /* Go to bypass the USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_VCOBYP_Msk;
 800270a:	4a28      	ldr	r2, [pc, #160]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800270c:	4b27      	ldr	r3, [pc, #156]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f043 0301 	orr.w	r3, r3, #1
 8002714:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) == 0U)
 8002716:	bf00      	nop
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0301 	and.w	r3, r3, #1
 8002720:	2b00      	cmp	r3, #0
 8002722:	d0f9      	beq.n	8002718 <XMC_SCU_CLOCK_StartUsbPll+0x18>
  {
    /* wait for prescaler mode */
  }

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;
 8002724:	4a21      	ldr	r2, [pc, #132]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002728:	695b      	ldr	r3, [r3, #20]
 800272a:	f043 0310 	orr.w	r3, r3, #16
 800272e:	6153      	str	r3, [r2, #20]

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 8002730:	491e      	ldr	r1, [pc, #120]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	3b01      	subs	r3, #1
 8002736:	021a      	lsls	r2, r3, #8
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	061b      	lsls	r3, r3, #24

  /* disconnect Oscillator from USB PLL */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_FINDIS_Msk;

  /* Setup Divider settings for USB PLL */
  SCU_PLL->USBPLLCON = (uint32_t)((uint32_t)((ndiv - 1U) << SCU_PLL_USBPLLCON_NDIV_Pos) |
 800273e:	4313      	orrs	r3, r2
 8002740:	614b      	str	r3, [r1, #20]
                                  (uint32_t)((pdiv - 1U) << SCU_PLL_USBPLLCON_PDIV_Pos));

  /* Set OSCDISCDIS */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 8002742:	4a1a      	ldr	r2, [pc, #104]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002746:	695b      	ldr	r3, [r3, #20]
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	6153      	str	r3, [r2, #20]

  /* connect Oscillator to USB PLL */
  SCU_PLL->USBPLLCON &= (uint32_t)~SCU_PLL_USBPLLCON_FINDIS_Msk;
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002750:	4b16      	ldr	r3, [pc, #88]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002752:	695b      	ldr	r3, [r3, #20]
 8002754:	f023 0310 	bic.w	r3, r3, #16
 8002758:	6153      	str	r3, [r2, #20]

  /* restart PLL Lock detection */
  SCU_PLL->USBPLLCON |= (uint32_t)SCU_PLL_USBPLLCON_RESLD_Msk;
 800275a:	4a14      	ldr	r2, [pc, #80]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800275c:	4b13      	ldr	r3, [pc, #76]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800275e:	695b      	ldr	r3, [r3, #20]
 8002760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002764:	6153      	str	r3, [r2, #20]

  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) == 0U)
 8002766:	bf00      	nop
 8002768:	4b10      	ldr	r3, [pc, #64]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f9      	beq.n	8002768 <XMC_SCU_CLOCK_StartUsbPll+0x68>
  {
    /* wait for PLL Lock */
  }

  /* Disable bypass- put PLL clock back */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_VCOBYP_Msk;
 8002774:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002776:	4b0d      	ldr	r3, [pc, #52]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002778:	695b      	ldr	r3, [r3, #20]
 800277a:	f023 0301 	bic.w	r3, r3, #1
 800277e:	6153      	str	r3, [r2, #20]
  while ((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOBYST_Msk) != 0U)
 8002780:	bf00      	nop
 8002782:	4b0a      	ldr	r3, [pc, #40]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f9      	bne.n	8002782 <XMC_SCU_CLOCK_StartUsbPll+0x82>
  {
    /* wait for normal mode */
  }

  /* Reset OSCDISCDIS */
  SCU_PLL->USBPLLCON &= ~SCU_PLL_USBPLLCON_OSCDISCDIS_Msk;
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <XMC_SCU_CLOCK_StartUsbPll+0xac>)
 8002792:	695b      	ldr	r3, [r3, #20]
 8002794:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002798:	6153      	str	r3, [r2, #20]

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_UVCOLCKT_Msk;
 800279a:	4b05      	ldr	r3, [pc, #20]	; (80027b0 <XMC_SCU_CLOCK_StartUsbPll+0xb0>)
 800279c:	2208      	movs	r2, #8
 800279e:	60da      	str	r2, [r3, #12]
}
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	50004710 	.word	0x50004710
 80027b0:	50004160 	.word	0x50004160

080027b4 <XMC_SCU_CLOCK_SetBackupClockCalibrationMode>:
                                  SCU_PLL_USBPLLCON_VCOBYP_Msk);
}

/* API to onfigure the calibration mode for internal oscillator */
void XMC_SCU_CLOCK_SetBackupClockCalibrationMode(XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_t mode)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b082      	sub	sp, #8
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  /* Enable factory calibration based trimming */
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FOTR_Msk;
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027c0:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027c8:	6053      	str	r3, [r2, #4]

  if (mode == XMC_SCU_CLOCK_FOFI_CALIBRATION_MODE_AUTOMATIC)
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d10e      	bne.n	80027ee <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x3a>
  {
    /* Disable factory calibration based trimming */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FOTR_Msk;
 80027d0:	4a0a      	ldr	r2, [pc, #40]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027d2:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80027da:	6053      	str	r3, [r2, #4]
    XMC_SCU_lDelay(100UL);
 80027dc:	2064      	movs	r0, #100	; 0x64
 80027de:	f7ff fcdf 	bl	80021a0 <XMC_SCU_lDelay>

    /* Enable automatic calibration */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_AOTREN_Msk;
 80027e2:	4a06      	ldr	r2, [pc, #24]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027e4:	4b05      	ldr	r3, [pc, #20]	; (80027fc <XMC_SCU_CLOCK_SetBackupClockCalibrationMode+0x48>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80027ec:	6053      	str	r3, [r2, #4]
  }

  XMC_SCU_lDelay(100UL);
 80027ee:	2064      	movs	r0, #100	; 0x64
 80027f0:	f7ff fcd6 	bl	80021a0 <XMC_SCU_lDelay>
}
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	50004710 	.word	0x50004710

08002800 <XMC_SCU_HIB_EnableHibernateDomain>:
  return (bool)((SCU_PLL->USBPLLSTAT & SCU_PLL_USBPLLSTAT_VCOLOCK_Msk) != 0UL);
}

/* API to power up the hibernation domain */
void XMC_SCU_HIB_EnableHibernateDomain(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  /* Power up HIB domain if and only if it is currently powered down */
  if ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002804:	4b12      	ldr	r3, [pc, #72]	; (8002850 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0301 	and.w	r3, r3, #1
 800280c:	2b00      	cmp	r3, #0
 800280e:	d109      	bne.n	8002824 <XMC_SCU_HIB_EnableHibernateDomain+0x24>
  {
    SCU_POWER->PWRSET = (uint32_t)SCU_POWER_PWRSET_HIB_Msk;
 8002810:	4b0f      	ldr	r3, [pc, #60]	; (8002850 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 8002812:	2201      	movs	r2, #1
 8002814:	605a      	str	r2, [r3, #4]

    while ((SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) == 0UL)
 8002816:	bf00      	nop
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <XMC_SCU_HIB_EnableHibernateDomain+0x50>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b00      	cmp	r3, #0
 8002822:	d0f9      	beq.n	8002818 <XMC_SCU_HIB_EnableHibernateDomain+0x18>
      /* wait until HIB domain is enabled */
    }
  }

  /* Remove the reset only if HIB domain were in a state of reset */
  if ((SCU_RESET->RSTSTAT) & SCU_RESET_RSTSTAT_HIBRS_Msk)
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <XMC_SCU_HIB_EnableHibernateDomain+0x46>
  {
    SCU_RESET->RSTCLR = (uint32_t)SCU_RESET_RSTCLR_HIBRS_Msk;
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 8002832:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002836:	609a      	str	r2, [r3, #8]
    while ((SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk) != 0UL)
 8002838:	bf00      	nop
 800283a:	4b06      	ldr	r3, [pc, #24]	; (8002854 <XMC_SCU_HIB_EnableHibernateDomain+0x54>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1f9      	bne.n	800283a <XMC_SCU_HIB_EnableHibernateDomain+0x3a>
    {
      /* wait until HIB domain is enabled */
    }
  }
}
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	50004200 	.word	0x50004200
 8002854:	50004400 	.word	0x50004400

08002858 <XMC_SCU_HIB_IsHibernateDomainEnabled>:
  SCU_RESET->RSTSET = (uint32_t)SCU_RESET_RSTSET_HIBRS_Msk;
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <XMC_SCU_HIB_IsHibernateDomainEnabled+0x34>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0301 	and.w	r3, r3, #1
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
 8002868:	4b09      	ldr	r3, [pc, #36]	; (8002890 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x38>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7300 	and.w	r3, r3, #512	; 0x200
}

/* API to check the hibernation domain is enabled or not */
bool XMC_SCU_HIB_IsHibernateDomainEnabled(void)
{
  return ((bool)(SCU_POWER->PWRSTAT & SCU_POWER_PWRSTAT_HIBEN_Msk) &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d101      	bne.n	8002878 <XMC_SCU_HIB_IsHibernateDomainEnabled+0x20>
 8002874:	2301      	movs	r3, #1
 8002876:	e000      	b.n	800287a <XMC_SCU_HIB_IsHibernateDomainEnabled+0x22>
 8002878:	2300      	movs	r3, #0
 800287a:	f003 0301 	and.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
          !(bool)(SCU_RESET->RSTSTAT & SCU_RESET_RSTSTAT_HIBRS_Msk));
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	50004200 	.word	0x50004200
 8002890:	50004400 	.word	0x50004400

08002894 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable>:
}

#endif

bool XMC_SCU_CLOCK_IsLowPowerOscillatorStable(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return ((SCU_HIBERNATE->HDSTAT & SCU_HIBERNATE_HDSTAT_ULPWDG_Msk) == 0UL);
 8002898:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <XMC_SCU_CLOCK_IsLowPowerOscillatorStable+0x20>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	bf0c      	ite	eq
 80028a4:	2301      	moveq	r3, #1
 80028a6:	2300      	movne	r3, #0
 80028a8:	b2db      	uxtb	r3, r3
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	50004300 	.word	0x50004300

080028b8 <XMC_SCU_CLOCK_EnableLowPowerOscillator>:

/* API to configure the 32khz Ultra Low Power oscillator */
void XMC_SCU_CLOCK_EnableLowPowerOscillator(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	af00      	add	r7, sp, #0
  /* Enable OSC_ULP */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED);
 80028bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80028c0:	f7ff fcae 	bl	8002220 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->OSCULCTRL &= ~SCU_HIBERNATE_OSCULCTRL_MODE_Msk;
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028c6:	4b17      	ldr	r3, [pc, #92]	; (8002924 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80028ce:	61d3      	str	r3, [r2, #28]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_OSCULCTRL_UPDATED) == 0);
 80028d0:	bf00      	nop
 80028d2:	f7ff fc99 	bl	8002208 <XMC_SCU_INTERUPT_GetEventStatus>
 80028d6:	4603      	mov	r3, r0
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0f8      	beq.n	80028d2 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x1a>

  /* Clear ULP WDG status */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED);
 80028e0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80028e4:	f7ff fc9c 	bl	8002220 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCLR = (uint32_t)SCU_HIBERNATE_HDCLR_ULPWDG_Msk;
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 80028ea:	2208      	movs	r2, #8
 80028ec:	605a      	str	r2, [r3, #4]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCLR_UPDATED) == 0);
 80028ee:	bf00      	nop
 80028f0:	f7ff fc8a 	bl	8002208 <XMC_SCU_INTERUPT_GetEventStatus>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f8      	beq.n	80028f0 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x38>

  /* Enable ULP WDG */
  XMC_SCU_INTERRUPT_ClearEventStatus(XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED);
 80028fe:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002902:	f7ff fc8d 	bl	8002220 <XMC_SCU_INTERRUPT_ClearEventStatus>
  SCU_HIBERNATE->HDCR |= (uint32_t)SCU_HIBERNATE_HDCR_ULPWDGEN_Msk;
 8002906:	4a07      	ldr	r2, [pc, #28]	; (8002924 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 8002908:	4b06      	ldr	r3, [pc, #24]	; (8002924 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x6c>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f043 0308 	orr.w	r3, r3, #8
 8002910:	60d3      	str	r3, [r2, #12]
  while ((XMC_SCU_INTERUPT_GetEventStatus() & XMC_SCU_INTERRUPT_EVENT_HDCR_UPDATED) == 0);
 8002912:	bf00      	nop
 8002914:	f7ff fc78 	bl	8002208 <XMC_SCU_INTERUPT_GetEventStatus>
 8002918:	4603      	mov	r3, r0
 800291a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0f8      	beq.n	8002914 <XMC_SCU_CLOCK_EnableLowPowerOscillator+0x5c>
}
 8002922:	bd80      	pop	{r7, pc}
 8002924:	50004300 	.word	0x50004300

08002928 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator>:
  return (SCU_HIBERNATE->OSCULSTAT & SCU_HIBERNATE_OSCULSTAT_X1D_Msk);
}

/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
 8002928:	b5b0      	push	{r4, r5, r7, lr}
 800292a:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;
 800292c:	4a0f      	ldr	r2, [pc, #60]	; (800296c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800292e:	4b0f      	ldr	r3, [pc, #60]	; (800296c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002936:	6053      	str	r3, [r2, #4]

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002938:	4d0d      	ldr	r5, [pc, #52]	; (8002970 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800293a:	4b0d      	ldr	r3, [pc, #52]	; (8002970 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x48>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f423 2470 	bic.w	r4, r3, #983040	; 0xf0000
 8002942:	f024 0430 	bic.w	r4, r4, #48	; 0x30
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));
 8002946:	f005 fec5 	bl	80086d4 <OSCHP_GetFrequency>
 800294a:	4602      	mov	r2, r0
 800294c:	4b09      	ldr	r3, [pc, #36]	; (8002974 <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x4c>)
 800294e:	fba3 2302 	umull	r2, r3, r3, r2
 8002952:	0d1b      	lsrs	r3, r3, #20
 8002954:	3b01      	subs	r3, #1
 8002956:	041b      	lsls	r3, r3, #16
/* API to enable High Precision High Speed oscillator */
void XMC_SCU_CLOCK_EnableHighPerformanceOscillator(void)
{
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_PLLPWD_Msk;

  SCU_OSC->OSCHPCTRL = (uint32_t)((SCU_OSC->OSCHPCTRL & ~(SCU_OSC_OSCHPCTRL_MODE_Msk | SCU_OSC_OSCHPCTRL_OSCVAL_Msk)) |
 8002958:	4323      	orrs	r3, r4
 800295a:	606b      	str	r3, [r5, #4]
                                  (((OSCHP_GetFrequency() / FOSCREF) - 1UL) << SCU_OSC_OSCHPCTRL_OSCVAL_Pos));

  /* restart OSC Watchdog */
  SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_OSCRES_Msk;
 800295c:	4a03      	ldr	r2, [pc, #12]	; (800296c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 800295e:	4b03      	ldr	r3, [pc, #12]	; (800296c <XMC_SCU_CLOCK_EnableHighPerformanceOscillator+0x44>)
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002966:	6053      	str	r3, [r2, #4]
}
 8002968:	bdb0      	pop	{r4, r5, r7, pc}
 800296a:	bf00      	nop
 800296c:	50004710 	.word	0x50004710
 8002970:	50004700 	.word	0x50004700
 8002974:	6b5fca6b 	.word	0x6b5fca6b

08002978 <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable>:

bool XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((SCU_PLL->PLLSTAT & XMC_SCU_PLL_PLLSTAT_OSC_USABLE) == XMC_SCU_PLL_PLLSTAT_OSC_USABLE);
 800297c:	4b07      	ldr	r3, [pc, #28]	; (800299c <XMC_SCU_CLOCK_IsHighPerformanceOscillatorStable+0x24>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f403 7360 	and.w	r3, r3, #896	; 0x380
 8002984:	f5b3 7f60 	cmp.w	r3, #896	; 0x380
 8002988:	bf0c      	ite	eq
 800298a:	2301      	moveq	r3, #1
 800298c:	2300      	movne	r3, #0
 800298e:	b2db      	uxtb	r3, r3
}
 8002990:	4618      	mov	r0, r3
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	50004710 	.word	0x50004710

080029a0 <XMC_SCU_CLOCK_EnableSystemPll>:
  return (SCU_OSC->OSCHPSTAT & SCU_OSC_OSCHPSTAT_X1D_Msk);
}

/* API to enable main PLL */
void XMC_SCU_CLOCK_EnableSystemPll(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 &= (uint32_t)~(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80029a4:	4a05      	ldr	r2, [pc, #20]	; (80029bc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <XMC_SCU_CLOCK_EnableSystemPll+0x1c>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ae:	f023 0302 	bic.w	r3, r3, #2
 80029b2:	6053      	str	r3, [r2, #4]
}
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	50004710 	.word	0x50004710

080029c0 <XMC_SCU_CLOCK_DisableSystemPll>:

/* API to disable main PLL */
void XMC_SCU_CLOCK_DisableSystemPll(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  SCU_PLL->PLLCON0 |= (uint32_t)(SCU_PLL_PLLCON0_VCOPWD_Msk | SCU_PLL_PLLCON0_PLLPWD_Msk);
 80029c4:	4a05      	ldr	r2, [pc, #20]	; (80029dc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80029c6:	4b05      	ldr	r3, [pc, #20]	; (80029dc <XMC_SCU_CLOCK_DisableSystemPll+0x1c>)
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	f043 0302 	orr.w	r3, r3, #2
 80029d2:	6053      	str	r3, [r2, #4]
}
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	50004710 	.word	0x50004710

080029e0 <XMC_SCU_CLOCK_StartSystemPll>:
void XMC_SCU_CLOCK_StartSystemPll(XMC_SCU_CLOCK_SYSPLLCLKSRC_t source,
                                  XMC_SCU_CLOCK_SYSPLL_MODE_t mode,
                                  uint32_t pdiv,
                                  uint32_t ndiv,
                                  uint32_t kdiv)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60ba      	str	r2, [r7, #8]
 80029e8:	607b      	str	r3, [r7, #4]
 80029ea:	4603      	mov	r3, r0
 80029ec:	81fb      	strh	r3, [r7, #14]
 80029ee:	460b      	mov	r3, r1
 80029f0:	737b      	strb	r3, [r7, #13]

  uint32_t vco_frequency; /* Q10.22, max VCO frequency = 520MHz */
  uint32_t kdiv_temp;

  XMC_SCU_CLOCK_SetSystemPllClockSource(source);
 80029f2:	89fb      	ldrh	r3, [r7, #14]
 80029f4:	4618      	mov	r0, r3
 80029f6:	f7ff fd3b 	bl	8002470 <XMC_SCU_CLOCK_SetSystemPllClockSource>

  if (mode == XMC_SCU_CLOCK_SYSPLL_MODE_NORMAL)
 80029fa:	7b7b      	ldrb	r3, [r7, #13]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 808b 	bne.w	8002b18 <XMC_SCU_CLOCK_StartSystemPll+0x138>
  {
    /* Calculate initial step to be close to fOFI */
    if (source == XMC_SCU_CLOCK_SYSPLLCLKSRC_OSCHP)
 8002a02:	89fb      	ldrh	r3, [r7, #14]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d109      	bne.n	8002a1c <XMC_SCU_CLOCK_StartSystemPll+0x3c>
    {
      vco_frequency = (OSCHP_GetFrequency() / 1000000U) << 22;
 8002a08:	f005 fe64 	bl	80086d4 <OSCHP_GetFrequency>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4b54      	ldr	r3, [pc, #336]	; (8002b60 <XMC_SCU_CLOCK_StartSystemPll+0x180>)
 8002a10:	fba3 2302 	umull	r2, r3, r3, r2
 8002a14:	0c9b      	lsrs	r3, r3, #18
 8002a16:	059b      	lsls	r3, r3, #22
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e002      	b.n	8002a22 <XMC_SCU_CLOCK_StartSystemPll+0x42>
    }
    else
    {
      vco_frequency = (OFI_FREQUENCY / 1000000U) << 22;
 8002a1c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
 8002a20:	617b      	str	r3, [r7, #20]
    }
    vco_frequency = ((vco_frequency * ndiv) / pdiv);
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	fb02 f203 	mul.w	r2, r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a30:	617b      	str	r3, [r7, #20]
    kdiv_temp = (vco_frequency / (OFI_FREQUENCY / 1000000U)) >> 22;
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	4a4b      	ldr	r2, [pc, #300]	; (8002b64 <XMC_SCU_CLOCK_StartSystemPll+0x184>)
 8002a36:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3a:	091b      	lsrs	r3, r3, #4
 8002a3c:	0d9b      	lsrs	r3, r3, #22
 8002a3e:	613b      	str	r3, [r7, #16]

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002a40:	4a49      	ldr	r2, [pc, #292]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002a4c:	bf00      	nop
 8002a4e:	4b46      	ldr	r3, [pc, #280]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d0f9      	beq.n	8002a4e <XMC_SCU_CLOCK_StartSystemPll+0x6e>
    {
      /* wait for prescaler mode */
    }

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a5a:	4a43      	ldr	r2, [pc, #268]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a5c:	4b42      	ldr	r3, [pc, #264]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f043 0310 	orr.w	r3, r3, #16
 8002a64:	6053      	str	r3, [r2, #4]

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a66:	4940      	ldr	r1, [pc, #256]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a68:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	4b3f      	ldr	r3, [pc, #252]	; (8002b6c <XMC_SCU_CLOCK_StartSystemPll+0x18c>)
 8002a6e:	4013      	ands	r3, r2
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	3a01      	subs	r2, #1
 8002a74:	0212      	lsls	r2, r2, #8
 8002a76:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
 8002a7e:	431a      	orrs	r2, r3
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	061b      	lsls	r3, r3, #24

    /* disconnect Oscillator from PLL */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_FINDIS_Msk;

    /* Setup divider settings for main PLL */
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~(SCU_PLL_PLLCON1_NDIV_Msk | SCU_PLL_PLLCON1_K2DIV_Msk |
 8002a86:	4313      	orrs	r3, r2
 8002a88:	608b      	str	r3, [r1, #8]
                                   SCU_PLL_PLLCON1_PDIV_Msk)) | ((ndiv - 1UL) << SCU_PLL_PLLCON1_NDIV_Pos) |
                                  ((kdiv_temp - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos) |
                                  ((pdiv - 1UL) << SCU_PLL_PLLCON1_PDIV_Pos));

    /* Set OSCDISCDIS, OSC clock remains connected to the VCO in case of loss of lock */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_OSCDISCDIS_Msk;
 8002a8a:	4a37      	ldr	r2, [pc, #220]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002a94:	6053      	str	r3, [r2, #4]

    /* connect Oscillator to PLL */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_FINDIS_Msk;
 8002a96:	4a34      	ldr	r2, [pc, #208]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a98:	4b33      	ldr	r3, [pc, #204]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f023 0310 	bic.w	r3, r3, #16
 8002aa0:	6053      	str	r3, [r2, #4]

    /* restart PLL Lock detection */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_RESLD_Msk;
 8002aa2:	4a31      	ldr	r2, [pc, #196]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002aa4:	4b30      	ldr	r3, [pc, #192]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002aac:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOLOCK_Msk) == 0U)
 8002aae:	bf00      	nop
 8002ab0:	4b2d      	ldr	r3, [pc, #180]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d0f9      	beq.n	8002ab0 <XMC_SCU_CLOCK_StartSystemPll+0xd0>
    {
      /* wait for PLL Lock */
    }

    /* Switch to normal mode */
    SCU_PLL->PLLCON0 &= (uint32_t)~SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002abe:	4b2a      	ldr	r3, [pc, #168]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0301 	bic.w	r3, r3, #1
 8002ac6:	6053      	str	r3, [r2, #4]
    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) != 0U)
 8002ac8:	bf00      	nop
 8002aca:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <XMC_SCU_CLOCK_StartSystemPll+0xea>
    {
      /* wait for normal mode */
    }

    /* Ramp up PLL frequency in steps */
    kdiv_temp = (vco_frequency / 60UL) >> 22;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <XMC_SCU_CLOCK_StartSystemPll+0x190>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	095b      	lsrs	r3, r3, #5
 8002ae0:	0d9b      	lsrs	r3, r3, #22
 8002ae2:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002ae4:	6a3a      	ldr	r2, [r7, #32]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d202      	bcs.n	8002af2 <XMC_SCU_CLOCK_StartSystemPll+0x112>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002aec:	6938      	ldr	r0, [r7, #16]
 8002aee:	f000 f845 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    kdiv_temp = (vco_frequency / 90UL) >> 22;
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	085b      	lsrs	r3, r3, #1
 8002af6:	4a1f      	ldr	r2, [pc, #124]	; (8002b74 <XMC_SCU_CLOCK_StartSystemPll+0x194>)
 8002af8:	fba2 2303 	umull	r2, r3, r2, r3
 8002afc:	095b      	lsrs	r3, r3, #5
 8002afe:	0d9b      	lsrs	r3, r3, #22
 8002b00:	613b      	str	r3, [r7, #16]
    if (kdiv < kdiv_temp)
 8002b02:	6a3a      	ldr	r2, [r7, #32]
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d202      	bcs.n	8002b10 <XMC_SCU_CLOCK_StartSystemPll+0x130>
    {
      XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv_temp);
 8002b0a:	6938      	ldr	r0, [r7, #16]
 8002b0c:	f000 f836 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
    }

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
 8002b10:	6a38      	ldr	r0, [r7, #32]
 8002b12:	f000 f833 	bl	8002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>
 8002b16:	e01c      	b.n	8002b52 <XMC_SCU_CLOCK_StartSystemPll+0x172>
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b18:	4913      	ldr	r1, [pc, #76]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b1a:	4b13      	ldr	r3, [pc, #76]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));
 8002b22:	6a3b      	ldr	r3, [r7, #32]
 8002b24:	3b01      	subs	r3, #1

    XMC_SCU_CLOCK_StepSystemPllFrequency(kdiv);
  }
  else
  {
    SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K1DIV_Msk) |
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]
                                  ((kdiv - 1UL) << SCU_PLL_PLLCON1_K1DIV_Pos));

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K1RDY_Msk) == 0U)
 8002b2a:	bf00      	nop
 8002b2c:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0310 	and.w	r3, r3, #16
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f9      	beq.n	8002b2c <XMC_SCU_CLOCK_StartSystemPll+0x14c>
    {
      /* wait until K1-divider operates on the configured value  */
    }

    /* Switch to prescaler mode */
    SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_VCOBYP_Msk;
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f043 0301 	orr.w	r3, r3, #1
 8002b42:	6053      	str	r3, [r2, #4]

    while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_VCOBYST_Msk) == 0U)
 8002b44:	bf00      	nop
 8002b46:	4b08      	ldr	r3, [pc, #32]	; (8002b68 <XMC_SCU_CLOCK_StartSystemPll+0x188>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d0f9      	beq.n	8002b46 <XMC_SCU_CLOCK_StartSystemPll+0x166>
    {
      /* wait for prescaler mode */
    }
  }

  SCU_TRAP->TRAPCLR = SCU_TRAP_TRAPCLR_SOSCWDGT_Msk | SCU_TRAP_TRAPCLR_SVCOLCKT_Msk;
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <XMC_SCU_CLOCK_StartSystemPll+0x198>)
 8002b54:	2205      	movs	r2, #5
 8002b56:	60da      	str	r2, [r3, #12]
}
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	431bde83 	.word	0x431bde83
 8002b64:	aaaaaaab 	.word	0xaaaaaaab
 8002b68:	50004710 	.word	0x50004710
 8002b6c:	f08080ff 	.word	0xf08080ff
 8002b70:	88888889 	.word	0x88888889
 8002b74:	b60b60b7 	.word	0xb60b60b7
 8002b78:	50004160 	.word	0x50004160

08002b7c <XMC_SCU_CLOCK_StepSystemPllFrequency>:
  SCU_PLL->PLLCON0 |= (uint32_t)SCU_PLL_PLLCON0_PLLPWD_Msk;
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b84:	490b      	ldr	r1, [pc, #44]	; (8002bb4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b86:	4b0b      	ldr	r3, [pc, #44]	; (8002bb4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3b01      	subs	r3, #1
 8002b92:	041b      	lsls	r3, r3, #16
}

/* API to step up/down the main PLL frequency */
void XMC_SCU_CLOCK_StepSystemPllFrequency(uint32_t kdiv)
{
  SCU_PLL->PLLCON1 = (uint32_t)((SCU_PLL->PLLCON1 & ~SCU_PLL_PLLCON1_K2DIV_Msk) |
 8002b94:	4313      	orrs	r3, r2
 8002b96:	608b      	str	r3, [r1, #8]
                                ((kdiv - 1UL) << SCU_PLL_PLLCON1_K2DIV_Pos));

  while ((SCU_PLL->PLLSTAT & SCU_PLL_PLLSTAT_K2RDY_Msk) == 0U)
 8002b98:	bf00      	nop
 8002b9a:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <XMC_SCU_CLOCK_StepSystemPllFrequency+0x38>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d0f9      	beq.n	8002b9a <XMC_SCU_CLOCK_StepSystemPllFrequency+0x1e>
  {
    /* wait until K2-divider operates on the configured value  */
  }

  XMC_SCU_lDelay(50U);
 8002ba6:	2032      	movs	r0, #50	; 0x32
 8002ba8:	f7ff fafa 	bl	80021a0 <XMC_SCU_lDelay>
}
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	50004710 	.word	0x50004710

08002bb8 <XMC_CAN_IsPanelControlReady>:
 * \par<b>Related APIs:</b><BR>
 *  XMC_CAN_PanelControl()
 *
 */
__STATIC_INLINE bool XMC_CAN_IsPanelControlReady(XMC_CAN_t *const obj)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  return (bool)((obj->PANCTR & (CAN_PANCTR_BUSY_Msk | CAN_PANCTR_RBUSY_Msk)) == 0);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 8002bc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <XMC_CAN_PanelControl>:

__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	4608      	mov	r0, r1
 8002bea:	4611      	mov	r1, r2
 8002bec:	461a      	mov	r2, r3
 8002bee:	4603      	mov	r3, r0
 8002bf0:	70fb      	strb	r3, [r7, #3]
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	70bb      	strb	r3, [r7, #2]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	707b      	strb	r3, [r7, #1]
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002bfa:	78fa      	ldrb	r2, [r7, #3]
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002bfc:	78bb      	ldrb	r3, [r7, #2]
 8002bfe:	041b      	lsls	r3, r3, #16
 8002c00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002c04:	431a      	orrs	r2, r3
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
 8002c06:	787b      	ldrb	r3, [r7, #1]
 8002c08:	061b      	lsls	r3, r3, #24
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
 8002c0a:	431a      	orrs	r2, r3
__STATIC_INLINE void XMC_CAN_PanelControl(XMC_CAN_t *const obj,
    const XMC_CAN_PANCMD_t pancmd,
    const uint8_t arg1,
    const uint8_t arg2)
{
  obj->PANCTR = (((uint32_t)pancmd << CAN_PANCTR_PANCMD_Pos) & (uint32_t)CAN_PANCTR_PANCMD_Msk) |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
                (((uint32_t)arg1 << CAN_PANCTR_PANAR1_Pos) & (uint32_t)CAN_PANCTR_PANAR1_Msk) |
                (((uint32_t)arg2 << CAN_PANCTR_PANAR2_Pos) & (uint32_t)CAN_PANCTR_PANAR2_Msk);
}
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop

08002c3c <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b083      	sub	sp, #12
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	601a      	str	r2, [r3, #0]
}
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop

08002c5c <max>:

#if defined(CAN)
#include "xmc_scu.h"

__STATIC_INLINE uint32_t max(uint32_t a, uint32_t b)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  return (a > b) ? a : b;
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	bf38      	it	cc
 8002c6e:	4613      	movcc	r3, r2
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <min>:

__STATIC_INLINE uint32_t min(uint32_t a, uint32_t b)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  return (a < b) ? a : b;
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	bf28      	it	cs
 8002c8e:	4613      	movcs	r3, r2
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <XMC_CAN_NODE_NominalBitTimeConfigureEx>:
#define XMC_CAN_NODE_MAX_TSEG2 7


int32_t XMC_CAN_NODE_NominalBitTimeConfigureEx(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_NOMINAL_BIT_TIME_CONFIG_t *const bit_time_config)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b088      	sub	sp, #32
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  /* Check that the CAN frequency is a multiple of the required baudrate */
  if ((bit_time_config->can_frequency % bit_time_config->baudrate) == 0)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6852      	ldr	r2, [r2, #4]
 8002cae:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cb2:	fb02 f201 	mul.w	r2, r2, r1
 8002cb6:	1a9b      	subs	r3, r3, r2
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	f040 8090 	bne.w	8002dde <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>
  {
    uint32_t prescaler = 0;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61fb      	str	r3, [r7, #28]
    uint32_t div8 = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61bb      	str	r3, [r7, #24]

    /* Calculate the factor between can frequency and required baudrate, this is equal to (prescaler x ntq) */
    uint32_t fcan_div = bit_time_config->can_frequency / bit_time_config->baudrate;
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	60bb      	str	r3, [r7, #8]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
 8002cd4:	2319      	movs	r3, #25
 8002cd6:	617b      	str	r3, [r7, #20]
    uint32_t tseg1 = 0;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	613b      	str	r3, [r7, #16]
    uint32_t tseg2 = 0;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	60fb      	str	r3, [r7, #12]
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002ce0:	e04b      	b.n	8002d7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
    {
      /* consider this ntq, only if fcan_div is multiple of ntq */
      if ((fcan_div % ntq) == 0)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002cea:	6979      	ldr	r1, [r7, #20]
 8002cec:	fb01 f202 	mul.w	r2, r1, r2
 8002cf0:	1a9b      	subs	r3, r3, r2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d13e      	bne.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
      {
        div8 = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	61bb      	str	r3, [r7, #24]
        prescaler = fcan_div / ntq;
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d02:	61fb      	str	r3, [r7, #28]
        if ((prescaler > 0) && (prescaler <= XMC_CAN_NODE_MAX_PRESCALER))
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d034      	beq.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d10:	d830      	bhi.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
        {
          if (prescaler >= 64)
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	2b3f      	cmp	r3, #63	; 0x3f
 8002d16:	d90a      	bls.n	8002d2e <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x92>
          {
            /* consider prescaler >=64, if it is integer divisible by 8*/
            if ((prescaler & 0x7U) != 0)
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x8e>
            {
              --ntq;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	3b01      	subs	r3, #1
 8002d26:	617b      	str	r3, [r7, #20]
              continue;
 8002d28:	e027      	b.n	8002d7a <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xde>
            }
            else
            {
              div8 = 1;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	61bb      	str	r3, [r7, #24]
            }
          }

          tseg1 = ((ntq - 1) * bit_time_config->sample_point) / 10000;
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	683a      	ldr	r2, [r7, #0]
 8002d34:	8912      	ldrh	r2, [r2, #8]
 8002d36:	fb02 f303 	mul.w	r3, r2, r3
 8002d3a:	4a2b      	ldr	r2, [pc, #172]	; (8002de8 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x14c>)
 8002d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002d40:	0b5b      	lsrs	r3, r3, #13
 8002d42:	613b      	str	r3, [r7, #16]
          tseg2 = ntq - tseg1 - 1;
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	60fb      	str	r3, [r7, #12]

          if ((XMC_CAN_NODE_MIN_TSEG1 <= tseg1) && (tseg1 <= XMC_CAN_NODE_MAX_TSEG1) &&
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d90f      	bls.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	2b0f      	cmp	r3, #15
 8002d58:	d80c      	bhi.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d909      	bls.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
              (XMC_CAN_NODE_MIN_TSEG2 <= tseg2) && (tseg2 < XMC_CAN_NODE_MAX_TSEG2) && (tseg2 >= bit_time_config->sjw))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d806      	bhi.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	895b      	ldrh	r3, [r3, #10]
 8002d6a:	461a      	mov	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d800      	bhi.n	8002d74 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xd8>
          {
            break;
 8002d72:	e005      	b.n	8002d80 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0xe4>
          }


        }
      }
      --ntq;
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	617b      	str	r3, [r7, #20]

    /* start with highest ntq, i.e as much as possible time quanta should be used to construct a bit time */
    uint32_t ntq = XMC_CAN_NODE_MAX_NTQ;
    uint32_t tseg1 = 0;
    uint32_t tseg2 = 0;
    while (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b07      	cmp	r3, #7
 8002d7e:	d8b0      	bhi.n	8002ce2 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x46>
        }
      }
      --ntq;
    }

    if (ntq >= XMC_CAN_NODE_MIN_NTQ)
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	2b07      	cmp	r3, #7
 8002d84:	d92b      	bls.n	8002dde <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x142>

      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: prescaler", (prescaler != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg1", (tseg1 != 0));
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f7ff ff48 	bl	8002c1c <XMC_CAN_NODE_EnableConfigurationChange>

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	031b      	lsls	r3, r3, #12
 8002d92:	f403 42e0 	and.w	r2, r3, #28672	; 0x7000
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	895b      	ldrh	r3, [r3, #10]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	019b      	lsls	r3, r3, #6
 8002d9e:	b2db      	uxtb	r3, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002da0:	431a      	orrs	r2, r3
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	021b      	lsls	r3, r3, #8
 8002da8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
 8002dac:	ea42 0103 	orr.w	r1, r2, r3
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	461a      	mov	r2, r3
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	40d3      	lsrs	r3, r2
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
 8002dc4:	ea41 0203 	orr.w	r2, r1, r3
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	03db      	lsls	r3, r3, #15
 8002dcc:	b29b      	uxth	r3, r3

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
 8002dce:	431a      	orrs	r2, r3
      XMC_ASSERT("XMC_CAN_NODE_NominalBitTimeConfigureEx: tseg2", (tseg2 != 0));

      XMC_CAN_NODE_EnableConfigurationChange(can_node);

      /* Configure bit timing register */
      can_node->NBTR = (((tseg2 - 1u) << CAN_NODE_NBTR_TSEG2_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG2_Msk) |
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	611a      	str	r2, [r3, #16]
                       (((bit_time_config->sjw - 1U) << CAN_NODE_NBTR_SJW_Pos) & (uint32_t)CAN_NODE_NBTR_SJW_Msk) |
                       (((tseg1 - 1U) << CAN_NODE_NBTR_TSEG1_Pos) & (uint32_t)CAN_NODE_NBTR_TSEG1_Msk) |
                       ((((prescaler >> (3 * div8)) - 1U) << CAN_NODE_NBTR_BRP_Pos) & (uint32_t)CAN_NODE_NBTR_BRP_Msk) |
                       ((div8 << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);

      XMC_CAN_NODE_DisableConfigurationChange(can_node);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f7ff ff31 	bl	8002c3c <XMC_CAN_NODE_DisableConfigurationChange>

      return XMC_CAN_STATUS_SUCCESS;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e000      	b.n	8002de0 <XMC_CAN_NODE_NominalBitTimeConfigureEx+0x144>
    }
  }

  return XMC_CAN_STATUS_ERROR;
 8002dde:	2301      	movs	r3, #1
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	d1b71759 	.word	0xd1b71759

08002dec <XMC_CAN_AllocateMOtoNodeList>:
                   (((uint32_t)0U << CAN_NODE_NBTR_DIV8_Pos) & (uint32_t)CAN_NODE_NBTR_DIV8_Msk);
  XMC_CAN_NODE_DisableConfigurationChange(can_node);
}
/* Function to allocate message object from free list to node list */
void XMC_CAN_AllocateMOtoNodeList(XMC_CAN_t *const obj, const uint8_t node_num, const uint8_t mo_num)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	460b      	mov	r3, r1
 8002df6:	70fb      	strb	r3, [r7, #3]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	70bb      	strb	r3, [r7, #2]
  /* wait while panel operation is in progress. */
  while (XMC_CAN_IsPanelControlReady(obj) == false)
 8002dfc:	bf00      	nop
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff feda 	bl	8002bb8 <XMC_CAN_IsPanelControlReady>
 8002e04:	4603      	mov	r3, r0
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f6      	bne.n	8002dfe <XMC_CAN_AllocateMOtoNodeList+0x12>
  {
    /*Do nothing*/
  };

  /* Panel Command for  allocation of MO to node list */
  XMC_CAN_PanelControl(obj, XMC_CAN_PANCMD_STATIC_ALLOCATE, mo_num, (node_num + 1U));
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	3301      	adds	r3, #1
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	78ba      	ldrb	r2, [r7, #2]
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	f7ff fee0 	bl	8002be0 <XMC_CAN_PanelControl>
}
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop

08002e28 <XMC_CAN_Enable>:
#endif
}

/* Enable XMC_CAN Peripheral */
void XMC_CAN_Enable(XMC_CAN_t *const obj)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_MCAN);
 8002e30:	480a      	ldr	r0, [pc, #40]	; (8002e5c <XMC_CAN_Enable+0x34>)
 8002e32:	f7ff fc15 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_MCAN);
 8002e36:	4809      	ldr	r0, [pc, #36]	; (8002e5c <XMC_CAN_Enable+0x34>)
 8002e38:	f7ff fa8e 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  /* Enable CAN Module */
  obj->CLC &= ~(uint32_t)CAN_CLC_DISR_Msk;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f023 0201 	bic.w	r2, r3, #1
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	601a      	str	r2, [r3, #0]
  while (obj->CLC & CAN_CLC_DISS_Msk)
 8002e48:	bf00      	nop
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f9      	bne.n	8002e4a <XMC_CAN_Enable+0x22>
  {
    /*Do nothing*/
  };
}
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	10000010 	.word	0x10000010

08002e60 <XMC_CAN_SetBaudrateClockSource>:
  obj->FDR |= ((uint32_t)can_divider_mode << CAN_FDR_DM_Pos) | ((uint32_t)step << CAN_FDR_STEP_Pos);
}
#endif

void XMC_CAN_SetBaudrateClockSource(XMC_CAN_t *const obj, const XMC_CAN_CANCLKSRC_t source)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
#if defined(MULTICAN_PLUS)
  obj->MCR = (obj->MCR & ~CAN_MCR_CLKSEL_Msk) | source ;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002e72:	f023 020f 	bic.w	r2, r3, #15
 8002e76:	78fb      	ldrb	r3, [r7, #3]
 8002e78:	431a      	orrs	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
#else
  XMC_UNUSED_ARG(obj);
  XMC_UNUSED_ARG(source);
#endif
}
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <XMC_CAN_GetBaudrateClockSource>:

XMC_CAN_CANCLKSRC_t XMC_CAN_GetBaudrateClockSource(XMC_CAN_t *const obj)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
#if defined(MULTICAN_PLUS)
  return ((XMC_CAN_CANCLKSRC_t)((obj->MCR & CAN_MCR_CLKSEL_Msk) >> CAN_MCR_CLKSEL_Pos));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	b2db      	uxtb	r3, r3
#elif (UC_FAMILY == XMC4)
  XMC_UNUSED_ARG(obj);
  return XMC_CAN_CANCLKSRC_FPERI;
#endif
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop

08002eb0 <XMC_CAN_GetBaudrateClockFrequency>:

uint32_t XMC_CAN_GetBaudrateClockFrequency(XMC_CAN_t *const obj)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	60fb      	str	r3, [r7, #12]

#if defined(MULTICAN_PLUS)
  switch (XMC_CAN_GetBaudrateClockSource(obj))
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f7ff ffe5 	bl	8002e8c <XMC_CAN_GetBaudrateClockSource>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d002      	beq.n	8002ece <XMC_CAN_GetBaudrateClockFrequency+0x1e>
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d004      	beq.n	8002ed6 <XMC_CAN_GetBaudrateClockFrequency+0x26>
 8002ecc:	e007      	b.n	8002ede <XMC_CAN_GetBaudrateClockFrequency+0x2e>
  {
#if UC_FAMILY == XMC4
    case XMC_CAN_CANCLKSRC_FPERI:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8002ece:	f7ff fa83 	bl	80023d8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8002ed2:	60f8      	str	r0, [r7, #12]
      break;
 8002ed4:	e003      	b.n	8002ede <XMC_CAN_GetBaudrateClockFrequency+0x2e>
    case XMC_CAN_CANCLKSRC_MCLK:
      frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
      break;
#endif
    case XMC_CAN_CANCLKSRC_FOHP:
      frequency = OSCHP_GetFrequency();
 8002ed6:	f005 fbfd 	bl	80086d4 <OSCHP_GetFrequency>
 8002eda:	60f8      	str	r0, [r7, #12]
      break;
 8002edc:	bf00      	nop
#else
  XMC_UNUSED_ARG(obj);
  frequency = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
#endif

  return frequency;
 8002ede:	68fb      	ldr	r3, [r7, #12]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <XMC_CAN_InitEx>:

uint32_t XMC_CAN_InitEx(XMC_CAN_t *const obj, XMC_CAN_CANCLKSRC_t clksrc, uint32_t can_frequency)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	72fb      	strb	r3, [r7, #11]
  uint32_t step_n;
  uint32_t freq_n;
  uint32_t peripheral_frequency;

  /*Enabling the module*/
  XMC_CAN_Enable(obj);
 8002ef6:	68f8      	ldr	r0, [r7, #12]
 8002ef8:	f7ff ff96 	bl	8002e28 <XMC_CAN_Enable>

  XMC_CAN_SetBaudrateClockSource(obj, clksrc);
 8002efc:	7afb      	ldrb	r3, [r7, #11]
 8002efe:	68f8      	ldr	r0, [r7, #12]
 8002f00:	4619      	mov	r1, r3
 8002f02:	f7ff ffad 	bl	8002e60 <XMC_CAN_SetBaudrateClockSource>
  peripheral_frequency = XMC_CAN_GetBaudrateClockFrequency(obj);
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f7ff ffd2 	bl	8002eb0 <XMC_CAN_GetBaudrateClockFrequency>
 8002f0c:	61f8      	str	r0, [r7, #28]
  XMC_ASSERT("XMC_CAN_Init: frequency not supported", can_frequency <= peripheral_frequency);

  /* Normal divider mode */
  step_n = (uint32_t)min(max(0U, (1024U - (peripheral_frequency / can_frequency))), 1023U);
 8002f0e:	69fa      	ldr	r2, [r7, #28]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f16:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002f1a:	2000      	movs	r0, #0
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f7ff fe9d 	bl	8002c5c <max>
 8002f22:	4603      	mov	r3, r0
 8002f24:	4618      	mov	r0, r3
 8002f26:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8002f2a:	f7ff fea7 	bl	8002c7c <min>
 8002f2e:	61b8      	str	r0, [r7, #24]
  freq_n = (uint32_t)(peripheral_frequency / (1024U - step_n));
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8002f36:	69fa      	ldr	r2, [r7, #28]
 8002f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3c:	617b      	str	r3, [r7, #20]

  obj->FDR &= (uint32_t) ~(CAN_FDR_DM_Msk | CAN_FDR_STEP_Msk);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8002f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	60d3      	str	r3, [r2, #12]
  obj->FDR |= ((uint32_t)XMC_CAN_DM_NORMAL << CAN_FDR_DM_Pos) | ((uint32_t)step_n << CAN_FDR_STEP_Pos);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	68da      	ldr	r2, [r3, #12]
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	60da      	str	r2, [r3, #12]

  return freq_n;
 8002f5e:	697b      	ldr	r3, [r7, #20]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <XMC_CAN_MO_Config>:
  can_mo->can_id_mask = can_id_mask;
}

/* Initialization of XMC_CAN MO Object */
void XMC_CAN_MO_Config(const XMC_CAN_MO_t *const can_mo)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg;

  /* Configure MPN */
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f103 4338 	add.w	r3, r3, #3087007744	; 0xb8000000
 8002f78:	f5a3 33a8 	sub.w	r3, r3, #86016	; 0x15000
 8002f7c:	095b      	lsrs	r3, r3, #5
 8002f7e:	617b      	str	r3, [r7, #20]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	095b      	lsrs	r3, r3, #5
 8002f84:	035a      	lsls	r2, r3, #13
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 031f 	and.w	r3, r3, #31
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	613b      	str	r3, [r7, #16]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6812      	ldr	r2, [r2, #0]
 8002f9a:	6892      	ldr	r2, [r2, #8]
 8002f9c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8002fa0:	609a      	str	r2, [r3, #8]
  can_mo->can_mo_ptr->MOIPR |= set;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	6891      	ldr	r1, [r2, #8]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	609a      	str	r2, [r3, #8]

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	79db      	ldrb	r3, [r3, #7]
 8002fb6:	f003 0320 	and.w	r3, r3, #32
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <XMC_CAN_MO_Config+0x68>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	79db      	ldrb	r3, [r3, #7]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	b2db      	uxtb	r3, r3
  uint32_t num = ((uint32_t)(can_mo->can_mo_ptr) - CAN_BASE - 0x1000U) / 0x0020U;
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d100      	bne.n	8002fd0 <XMC_CAN_MO_Config+0x68>
 8002fce:	e060      	b.n	8003092 <XMC_CAN_MO_Config+0x12a>
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	7e1b      	ldrb	r3, [r3, #24]
  uint32_t set = (((uint32_t)(num / 32) << (CAN_MO_MOIPR_MPN_Pos + 5U)) | ((uint32_t)(num % 32) << CAN_MO_MOIPR_MPN_Pos));
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d004      	beq.n	8002fe2 <XMC_CAN_MO_Config+0x7a>
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
       (can_mo->can_mo_type != XMC_CAN_MO_TYPE_TRANSMSGOBJ)))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7e1b      	ldrb	r3, [r3, #24]
  can_mo->can_mo_ptr->MOIPR &= ~(CAN_MO_MOIPR_MPN_Msk);
  can_mo->can_mo_ptr->MOIPR |= set;

  if (((can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_STANDARD_11BITS) &&
       (can_mo->can_id_mode != (uint32_t) XMC_CAN_FRAME_TYPE_EXTENDED_29BITS)) ||
      ((can_mo->can_mo_type != XMC_CAN_MO_TYPE_RECMSGOBJ) &&
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d000      	beq.n	8002fe2 <XMC_CAN_MO_Config+0x7a>
 8002fe0:	e057      	b.n	8003092 <XMC_CAN_MO_Config+0x12a>
  }
  else
  {

    /* Disable Message object */
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	61da      	str	r2, [r3, #28]
    if (can_mo->can_id_mode == (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	79db      	ldrb	r3, [r3, #7]
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d128      	bne.n	800304a <XMC_CAN_MO_Config+0xe2>
    {
      reg = can_mo->mo_ar;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAR_ID_Msk);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8003004:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_identifier << XMC_CAN_MO_MOAR_STDID_Pos);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f3c3 031c 	ubfx	r3, r3, #0, #29
 800300e:	049b      	lsls	r3, r3, #18
 8003010:	461a      	mov	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4313      	orrs	r3, r2
 8003016:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAR = reg;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	68fa      	ldr	r2, [r7, #12]
 800301e:	619a      	str	r2, [r3, #24]

      reg = can_mo->mo_amr;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	60fb      	str	r3, [r7, #12]
      reg &= (uint32_t) ~(CAN_MO_MOAMR_AM_Msk);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800302c:	60fb      	str	r3, [r7, #12]
      reg |= (can_mo->can_id_mask << XMC_CAN_MO_MOAR_STDID_Pos);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f3c3 031c 	ubfx	r3, r3, #0, #29
 8003036:	049b      	lsls	r3, r3, #18
 8003038:	461a      	mov	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	4313      	orrs	r3, r2
 800303e:	60fb      	str	r3, [r7, #12]
      can_mo->can_mo_ptr->MOAMR = reg;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	60da      	str	r2, [r3, #12]
 8003048:	e009      	b.n	800305e <XMC_CAN_MO_Config+0xf6>
    }
    else
    {
      can_mo->can_mo_ptr->MOAR = can_mo->mo_ar;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6852      	ldr	r2, [r2, #4]
 8003052:	619a      	str	r2, [r3, #24]
      can_mo->can_mo_ptr->MOAMR = can_mo->mo_amr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	6892      	ldr	r2, [r2, #8]
 800305c:	60da      	str	r2, [r3, #12]
    }
    /* Check whether message object is transmit message object */
    if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7e1b      	ldrb	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d10c      	bne.n	8003080 <XMC_CAN_MO_Config+0x118>
    {
      /* Set MO as Transmit message object  */
      XMC_CAN_MO_UpdateData(can_mo);
 8003066:	6878      	ldr	r0, [r7, #4]
 8003068:	f000 f81a 	bl	80030a0 <XMC_CAN_MO_UpdateData>
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_SETDIR_Msk;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003074:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL and Set MSGVAL, TXEN0 and TXEN1 bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <XMC_CAN_MO_Config+0x130>)
 800307c:	61da      	str	r2, [r3, #28]
 800307e:	e008      	b.n	8003092 <XMC_CAN_MO_Config+0x12a>
                                   CAN_MO_MOCTR_RESRXEN_Msk  | CAN_MO_MOCTR_RESRTSEL_Msk);
    }
    else
    {
      /* Set MO as Receive message object and set RXEN bit */
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESDIR_Msk;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003088:	61da      	str	r2, [r3, #28]

      /* Reset RTSEL, TXEN1 and TXEN2 and Set MSGVAL and RXEN bits */
      can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_RESTXEN0_Msk | CAN_MO_MOCTR_RESTXEN1_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk |
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a03      	ldr	r2, [pc, #12]	; (800309c <XMC_CAN_MO_Config+0x134>)
 8003090:	61da      	str	r2, [r3, #28]
                                   CAN_MO_MOCTR_SETRXEN_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
    }

  }
}
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	062000c0 	.word	0x062000c0
 800309c:	00a00640 	.word	0x00a00640

080030a0 <XMC_CAN_MO_UpdateData>:

/* Update of XMC_CAN Object */
XMC_CAN_STATUS_t XMC_CAN_MO_UpdateData(const XMC_CAN_MO_t *const can_mo)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80030a8:	2303      	movs	r3, #3
 80030aa:	73fb      	strb	r3, [r7, #15]
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	7e1b      	ldrb	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d122      	bne.n	80030fa <XMC_CAN_MO_UpdateData+0x5a>
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2220      	movs	r2, #32
 80030ba:	61da      	str	r2, [r3, #28]
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	6812      	ldr	r2, [r2, #0]
 80030c6:	f022 6170 	bic.w	r1, r2, #251658240	; 0xf000000
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	7b12      	ldrb	r2, [r2, #12]
 80030ce:	0612      	lsls	r2, r2, #24
 80030d0:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
  /* Check whether message object is transmit message object */
  if (can_mo->can_mo_type == XMC_CAN_MO_TYPE_TRANSMSGOBJ)
  {
    can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESMSGVAL_Msk;
    /* Configure data length */
    can_mo->can_mo_ptr->MOFCR = ((can_mo->can_mo_ptr->MOFCR) & ~(uint32_t)(CAN_MO_MOFCR_DLC_Msk)) |
 80030d4:	430a      	orrs	r2, r1
 80030d6:	601a      	str	r2, [r3, #0]
                                (((uint32_t) can_mo->can_data_length << CAN_MO_MOFCR_DLC_Pos) & (uint32_t)CAN_MO_MOFCR_DLC_Msk);
    /* Configure Data registers*/
    can_mo->can_mo_ptr->MODATAL = can_mo->can_data[0];
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	6912      	ldr	r2, [r2, #16]
 80030e0:	611a      	str	r2, [r3, #16]
    can_mo->can_mo_ptr->MODATAH = can_mo->can_data[1];
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	6952      	ldr	r2, [r2, #20]
 80030ea:	615a      	str	r2, [r3, #20]
    /* Reset RTSEL and Set MSGVAL ,TXEN0 and TXEN1 bits */
    can_mo->can_mo_ptr->MOCTR = (CAN_MO_MOCTR_SETNEWDAT_Msk | CAN_MO_MOCTR_SETMSGVAL_Msk | CAN_MO_MOCTR_RESRTSEL_Msk);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a06      	ldr	r2, [pc, #24]	; (800310c <XMC_CAN_MO_UpdateData+0x6c>)
 80030f2:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 80030f4:	2300      	movs	r3, #0
 80030f6:	73fb      	strb	r3, [r7, #15]
 80030f8:	e001      	b.n	80030fe <XMC_CAN_MO_UpdateData+0x5e>
  }
  else
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80030fa:	2303      	movs	r3, #3
 80030fc:	73fb      	strb	r3, [r7, #15]
  }
  return error;
 80030fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003100:	4618      	mov	r0, r3
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	00280040 	.word	0x00280040

08003110 <XMC_CAN_MO_Transmit>:

/* This function is will put a transmit request to transmit message object */
XMC_CAN_STATUS_t XMC_CAN_MO_Transmit(const XMC_CAN_MO_t *const can_mo)
{
 8003110:	b480      	push	{r7}
 8003112:	b087      	sub	sp, #28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	75fb      	strb	r3, [r7, #23]
  uint32_t mo_type = (uint32_t)(((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_MSGVAL_Msk) >> CAN_MO_MOSTAT_MSGVAL_Pos);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 0320 	and.w	r3, r3, #32
 8003126:	095b      	lsrs	r3, r3, #5
 8003128:	613b      	str	r3, [r7, #16]
  uint32_t mo_transmission_ongoing = (uint32_t) ((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_TXRQ_Msk) >> CAN_MO_MOSTAT_TXRQ_Pos;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	69db      	ldr	r3, [r3, #28]
 8003130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	60fb      	str	r3, [r7, #12]
  /* check if message is disabled */
  if (mo_type == 0U)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d102      	bne.n	8003144 <XMC_CAN_MO_Transmit+0x34>
  {
    error = XMC_CAN_STATUS_MO_DISABLED;
 800313e:	2304      	movs	r3, #4
 8003140:	75fb      	strb	r3, [r7, #23]
 8003142:	e00c      	b.n	800315e <XMC_CAN_MO_Transmit+0x4e>
  }
  /* check if transmission is ongoing on message object */
  else if (mo_transmission_ongoing == 1U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d102      	bne.n	8003150 <XMC_CAN_MO_Transmit+0x40>
  {
    error = XMC_CAN_STATUS_BUSY;
 800314a:	2302      	movs	r3, #2
 800314c:	75fb      	strb	r3, [r7, #23]
 800314e:	e006      	b.n	800315e <XMC_CAN_MO_Transmit+0x4e>
  }
  else
  {
    /* set TXRQ bit */
    can_mo->can_mo_ptr-> MOCTR = CAN_MO_MOCTR_SETTXRQ_Msk | CAN_MO_MOCTR_SETTXEN0_Msk | CAN_MO_MOCTR_SETTXEN1_Msk;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003158:	61da      	str	r2, [r3, #28]
    error = XMC_CAN_STATUS_SUCCESS;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 800315e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003160:	4618      	mov	r0, r3
 8003162:	371c      	adds	r7, #28
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <XMC_CAN_MO_Receive>:
}


/* This function is will read the message object data bytes */
XMC_CAN_STATUS_t XMC_CAN_MO_Receive (XMC_CAN_MO_t *can_mo)
{
 800316c:	b480      	push	{r7}
 800316e:	b087      	sub	sp, #28
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  XMC_CAN_STATUS_t error = XMC_CAN_STATUS_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	75fb      	strb	r3, [r7, #23]
  uint8_t rx_pnd = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	75bb      	strb	r3, [r7, #22]
  uint8_t new_data = 0U;
 800317c:	2300      	movs	r3, #0
 800317e:	757b      	strb	r3, [r7, #21]
  uint32_t mo_type = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_DIR_Msk) >> CAN_MO_MOSTAT_DIR_Pos;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800318a:	0adb      	lsrs	r3, r3, #11
 800318c:	613b      	str	r3, [r7, #16]
  uint32_t mo_recepcion_ongoing = (uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	69db      	ldr	r3, [r3, #28]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	60fb      	str	r3, [r7, #12]
  /* check if message object is a receive message object */
  if (mo_type != (uint32_t)XMC_CAN_MO_TYPE_RECMSGOBJ)
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d002      	beq.n	80031a8 <XMC_CAN_MO_Receive+0x3c>
  {
    error = XMC_CAN_STATUS_MO_NOT_ACCEPTABLE;
 80031a2:	2303      	movs	r3, #3
 80031a4:	75fb      	strb	r3, [r7, #23]
 80031a6:	e0a7      	b.n	80032f8 <XMC_CAN_MO_Receive+0x18c>
  }
  /* check if reception is ongoing on message object */
  else if (mo_recepcion_ongoing == 1U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d102      	bne.n	80031b4 <XMC_CAN_MO_Receive+0x48>
  {
    error = XMC_CAN_STATUS_BUSY;
 80031ae:	2302      	movs	r3, #2
 80031b0:	75fb      	strb	r3, [r7, #23]
 80031b2:	e0a1      	b.n	80032f8 <XMC_CAN_MO_Receive+0x18c>
  else
  {
    /* read message parameters */
    do
    {
      can_mo->can_mo_ptr->MOCTR = CAN_MO_MOCTR_RESNEWDAT_Msk;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	2208      	movs	r2, #8
 80031ba:	61da      	str	r2, [r3, #28]
      if ((((can_mo->can_mo_ptr->MOAR) & CAN_MO_MOAR_IDE_Msk) >> CAN_MO_MOAR_IDE_Pos) == 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	699b      	ldr	r3, [r3, #24]
 80031c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031c6:	0f5b      	lsrs	r3, r3, #29
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d140      	bne.n	800324e <XMC_CAN_MO_Receive+0xe2>
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_STANDARD_11BITS;
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	79d3      	ldrb	r3, [r2, #7]
 80031d0:	f36f 1345 	bfc	r3, #5, #1
 80031d4:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	699a      	ldr	r2, [r3, #24]
 80031dc:	4b4a      	ldr	r3, [pc, #296]	; (8003308 <XMC_CAN_MO_Receive+0x19c>)
 80031de:	4013      	ands	r3, r2
 80031e0:	0c9b      	lsrs	r3, r3, #18
 80031e2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6853      	ldr	r3, [r2, #4]
 80031ea:	f361 031c 	bfi	r3, r1, #0, #29
 80031ee:	6053      	str	r3, [r2, #4]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031fa:	0f5b      	lsrs	r3, r3, #29
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	b2d9      	uxtb	r1, r3
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	7ad3      	ldrb	r3, [r2, #11]
 8003208:	f361 1345 	bfi	r3, r1, #5, #1
 800320c:	72d3      	strb	r3, [r2, #11]
        if (can_mo->can_ide_mask == 1U)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	7adb      	ldrb	r3, [r3, #11]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <XMC_CAN_MO_Receive+0xcc>
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & XMC_CAN_MO_MOAR_STDID_Msk) >> XMC_CAN_MO_MOAR_STDID_Pos;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <XMC_CAN_MO_Receive+0x19c>)
 8003224:	4013      	ands	r3, r2
 8003226:	0c9b      	lsrs	r3, r3, #18
 8003228:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6893      	ldr	r3, [r2, #8]
 8003230:	f361 031c 	bfi	r3, r1, #0, #29
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	e032      	b.n	800329e <XMC_CAN_MO_Receive+0x132>
        }
        else
        {
          can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	6893      	ldr	r3, [r2, #8]
 8003246:	f361 031c 	bfi	r3, r1, #0, #29
 800324a:	6093      	str	r3, [r2, #8]
 800324c:	e027      	b.n	800329e <XMC_CAN_MO_Receive+0x132>
        }
      }
      else
      {
        can_mo->can_id_mode = (uint32_t)XMC_CAN_FRAME_TYPE_EXTENDED_29BITS;
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	79d3      	ldrb	r3, [r2, #7]
 8003252:	f043 0320 	orr.w	r3, r3, #32
 8003256:	71d3      	strb	r3, [r2, #7]
        can_mo->can_identifier = (can_mo->can_mo_ptr->MOAR & CAN_MO_MOAR_ID_Msk);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6853      	ldr	r3, [r2, #4]
 8003266:	f361 031c 	bfi	r3, r1, #0, #29
 800326a:	6053      	str	r3, [r2, #4]
        can_mo->can_id_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_AM_Msk);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	6893      	ldr	r3, [r2, #8]
 800327a:	f361 031c 	bfi	r3, r1, #0, #29
 800327e:	6093      	str	r3, [r2, #8]
        can_mo->can_ide_mask = (uint32_t)(can_mo->can_mo_ptr->MOAMR & CAN_MO_MOAMR_MIDE_Msk) >> CAN_MO_MOAMR_MIDE_Pos;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800328a:	0f5b      	lsrs	r3, r3, #29
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	b2d9      	uxtb	r1, r3
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	7ad3      	ldrb	r3, [r2, #11]
 8003298:	f361 1345 	bfi	r3, r1, #5, #1
 800329c:	72d3      	strb	r3, [r2, #11]
      }
      can_mo->can_data_length = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOFCR) & CAN_MO_MOFCR_DLC_Msk) >> CAN_MO_MOFCR_DLC_Pos);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80032a8:	0e1b      	lsrs	r3, r3, #24
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	731a      	strb	r2, [r3, #12]

      can_mo->can_data[0] = can_mo->can_mo_ptr->MODATAL;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	611a      	str	r2, [r3, #16]
      can_mo->can_data[1] = can_mo->can_mo_ptr->MODATAH;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	695a      	ldr	r2, [r3, #20]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	615a      	str	r2, [r3, #20]

      rx_pnd = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_RXUPD_Msk) >> CAN_MO_MOSTAT_RXUPD_Pos);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0304 	and.w	r3, r3, #4
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	75bb      	strb	r3, [r7, #22]
      new_data = (uint8_t)((uint32_t)((can_mo->can_mo_ptr->MOSTAT) & CAN_MO_MOSTAT_NEWDAT_Msk) >> CAN_MO_MOSTAT_NEWDAT_Pos);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	08db      	lsrs	r3, r3, #3
 80032de:	757b      	strb	r3, [r7, #21]
    }
    while ((rx_pnd != 0U) && (new_data != 0U));
 80032e0:	7dbb      	ldrb	r3, [r7, #22]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <XMC_CAN_MO_Receive+0x182>
 80032e6:	7d7b      	ldrb	r3, [r7, #21]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	f47f af63 	bne.w	80031b4 <XMC_CAN_MO_Receive+0x48>

    can_mo->can_mo_type = XMC_CAN_MO_TYPE_RECMSGOBJ;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2200      	movs	r2, #0
 80032f2:	761a      	strb	r2, [r3, #24]
    error = XMC_CAN_STATUS_SUCCESS;
 80032f4:	2300      	movs	r3, #0
 80032f6:	75fb      	strb	r3, [r7, #23]
  }
  return error;
 80032f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	371c      	adds	r7, #28
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	1ffc0000 	.word	0x1ffc0000

0800330c <XMC_CAN_NODE_EnableEvent>:

/* Function to enable node event */
void XMC_CAN_NODE_EnableEvent(XMC_CAN_NODE_t *const can_node, const XMC_CAN_NODE_EVENT_t event)
{
 800330c:	b480      	push	{r7}
 800330e:	b083      	sub	sp, #12
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
 8003314:	6039      	str	r1, [r7, #0]
  if (event != XMC_CAN_NODE_EVENT_CFCIE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800331c:	d006      	beq.n	800332c <XMC_CAN_NODE_EnableEvent+0x20>
  {
    can_node->NCR |= (uint32_t)event;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681a      	ldr	r2, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	431a      	orrs	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	601a      	str	r2, [r3, #0]
 800332a:	e005      	b.n	8003338 <XMC_CAN_NODE_EnableEvent+0x2c>
  }
  else
  {
    can_node->NFCR |= (uint32_t)event;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	699a      	ldr	r2, [r3, #24]
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	431a      	orrs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	619a      	str	r2, [r3, #24]
  }
}
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop

08003344 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003352:	60da      	str	r2, [r3, #12]
}
 8003354:	370c      	adds	r7, #12
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop

08003360 <XMC_CCU4_lDeassertReset>:
    XMC_ASSERT("XMC_CCU4_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lDeassertReset(const XMC_CCU4_MODULE_t *const module)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a10      	ldr	r2, [pc, #64]	; (80033ac <XMC_CCU4_lDeassertReset+0x4c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <XMC_CCU4_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU40);
 8003370:	2004      	movs	r0, #4
 8003372:	f7fe fff1 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003376:	e016      	b.n	80033a6 <XMC_CCU4_lDeassertReset+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <XMC_CCU4_lDeassertReset+0x50>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d103      	bne.n	8003388 <XMC_CCU4_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU41);
 8003380:	2008      	movs	r0, #8
 8003382:	f7fe ffe9 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003386:	e00e      	b.n	80033a6 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a0a      	ldr	r2, [pc, #40]	; (80033b4 <XMC_CCU4_lDeassertReset+0x54>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d103      	bne.n	8003398 <XMC_CCU4_lDeassertReset+0x38>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU42);
 8003390:	2010      	movs	r0, #16
 8003392:	f7fe ffe1 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
 8003396:	e006      	b.n	80033a6 <XMC_CCU4_lDeassertReset+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a07      	ldr	r2, [pc, #28]	; (80033b8 <XMC_CCU4_lDeassertReset+0x58>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d102      	bne.n	80033a6 <XMC_CCU4_lDeassertReset+0x46>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU43);
 80033a0:	4806      	ldr	r0, [pc, #24]	; (80033bc <XMC_CCU4_lDeassertReset+0x5c>)
 80033a2:	f7fe ffd9 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}
 80033ac:	4000c000 	.word	0x4000c000
 80033b0:	40010000 	.word	0x40010000
 80033b4:	40014000 	.word	0x40014000
 80033b8:	48004000 	.word	0x48004000
 80033bc:	10000001 	.word	0x10000001

080033c0 <XMC_CCU4_lUngateClock>:
    XMC_ASSERT("XMC_CCU4_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU4_lUngateClock(const XMC_CCU4_MODULE_t *const module)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b082      	sub	sp, #8
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  if (module == CCU40)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <XMC_CCU4_lUngateClock+0x4c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d103      	bne.n	80033d8 <XMC_CCU4_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU40);
 80033d0:	2004      	movs	r0, #4
 80033d2:	f7ff f945 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033d6:	e016      	b.n	8003406 <XMC_CCU4_lUngateClock+0x46>
  }
#if defined(CCU41)
  else if (module == CCU41)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a0d      	ldr	r2, [pc, #52]	; (8003410 <XMC_CCU4_lUngateClock+0x50>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d103      	bne.n	80033e8 <XMC_CCU4_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU41);
 80033e0:	2008      	movs	r0, #8
 80033e2:	f7ff f93d 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033e6:	e00e      	b.n	8003406 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU42)
  else if (module == CCU42)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	4a0a      	ldr	r2, [pc, #40]	; (8003414 <XMC_CCU4_lUngateClock+0x54>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d103      	bne.n	80033f8 <XMC_CCU4_lUngateClock+0x38>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU42);
 80033f0:	2010      	movs	r0, #16
 80033f2:	f7ff f935 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80033f6:	e006      	b.n	8003406 <XMC_CCU4_lUngateClock+0x46>
  }
#endif
#if defined(CCU43)
  else if (module == CCU43)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a07      	ldr	r2, [pc, #28]	; (8003418 <XMC_CCU4_lUngateClock+0x58>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d102      	bne.n	8003406 <XMC_CCU4_lUngateClock+0x46>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU43);
 8003400:	4806      	ldr	r0, [pc, #24]	; (800341c <XMC_CCU4_lUngateClock+0x5c>)
 8003402:	f7ff f92d 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU4_lUngateClock:Invalid Module Pointer", 0);
  }
}
 8003406:	3708      	adds	r7, #8
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}
 800340c:	4000c000 	.word	0x4000c000
 8003410:	40010000 	.word	0x40010000
 8003414:	40014000 	.word	0x40014000
 8003418:	48004000 	.word	0x48004000
 800341c:	10000001 	.word	0x10000001

08003420 <XMC_CCU4_EnableModule>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 ********************************************************************************************************************/

void XMC_CCU4_EnableModule(XMC_CCU4_MODULE_t *const module)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_EnableModule:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));

#if UC_FAMILY == XMC4
  /* Enable CCU4 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 8003428:	2010      	movs	r0, #16
 800342a:	f7ff f909 	bl	8002640 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU4_lUngateClock(module);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f7ff ffc6 	bl	80033c0 <XMC_CCU4_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU4_lDeassertReset(module);
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff ff93 	bl	8003360 <XMC_CCU4_lDeassertReset>
#endif
}
 800343a:	3708      	adds	r7, #8
 800343c:	46bd      	mov	sp, r7
 800343e:	bd80      	pop	{r7, pc}

08003440 <XMC_CCU4_Init>:
#endif
}

/* API to initialize CCU4 global resources  */
void XMC_CCU4_Init(XMC_CCU4_MODULE_t *const module, const XMC_CCU4_SLICE_MCMS_ACTION_t mcs_action)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b084      	sub	sp, #16
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	460b      	mov	r3, r1
 800344a:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU4_Init:Invalid module pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_Init:Invalid mcs action", XMC_CCU4_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU4 module */
  XMC_CCU4_EnableModule(module);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff ffe7 	bl	8003420 <XMC_CCU4_EnableModule>
  /* Start the prescaler */
  XMC_CCU4_StartPrescaler(module);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f7ff ff76 	bl	8003344 <XMC_CCU4_StartPrescaler>

  gctrl = module->GCTRL;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU4_GCTRL_MSDE_Msk);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003464:	60fb      	str	r3, [r7, #12]
  gctrl |= ((uint32_t) mcs_action) << CCU4_GCTRL_MSDE_Pos;
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	039b      	lsls	r3, r3, #14
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	4313      	orrs	r3, r2
 800346e:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	601a      	str	r2, [r3, #0]
}
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <XMC_CCU4_SLICE_CompareInit>:
}

/* API to configure CC4 Slice as Timer */
void XMC_CCU4_SLICE_CompareInit(XMC_CCU4_SLICE_t *const slice,
                                const XMC_CCU4_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_CompareInit:Compare Init Pointer is NULL",
             (XMC_CCU4_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);

  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC = ((uint32_t) compare_init->timer_concatenation << CCU4_CC4_CMC_TCE_Pos);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	795b      	ldrb	r3, [r3, #5]
 8003492:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	051a      	lsls	r2, r3, #20
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	791b      	ldrb	r3, [r3, #4]
 80034a2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	461a      	mov	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	795b      	ldrb	r3, [r3, #5]
 80034b2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	461a      	mov	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->passive_level;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	795b      	ldrb	r3, [r3, #5]
 80034c2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	461a      	mov	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	619a      	str	r2, [r3, #24]
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	461a      	mov	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <XMC_CCU4_SLICE_SetPrescaler>:
  XMC_CCU4_SLICE_SetDitherCompareValue((XMC_CCU4_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scalar divider  */
void XMC_CCU4_SLICE_SetPrescaler(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_PRESCALER_t div_val)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	460b      	mov	r3, r1
 80034f2:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU4_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));

  fpc = slice->FPC;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f8:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU4_CC4_FPC_PVAL_Msk);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003500:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU4_CC4_FPC_PVAL_Pos;
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	021b      	lsls	r3, r3, #8
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4313      	orrs	r3, r2
 800350a:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68fa      	ldr	r2, [r7, #12]
 8003510:	629a      	str	r2, [r3, #40]	; 0x28
  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 8003512:	78fa      	ldrb	r2, [r7, #3]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003518:	3714      	adds	r7, #20
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr
 8003522:	bf00      	nop

08003524 <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003532:	60da      	str	r2, [r3, #12]
}
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop

08003540 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	611a      	str	r2, [r3, #16]
}
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <XMC_CCU8_lDeassertReset>:
    XMC_ASSERT("XMC_CCU8_lAssertReset:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lDeassertReset(const XMC_CCU8_MODULE_t *const module)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a09      	ldr	r2, [pc, #36]	; (8003588 <XMC_CCU8_lDeassertReset+0x30>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d103      	bne.n	8003570 <XMC_CCU8_lDeassertReset+0x18>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU80);
 8003568:	2080      	movs	r0, #128	; 0x80
 800356a:	f7fe fef5 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
 800356e:	e007      	b.n	8003580 <XMC_CCU8_lDeassertReset+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a06      	ldr	r2, [pc, #24]	; (800358c <XMC_CCU8_lDeassertReset+0x34>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d103      	bne.n	8003580 <XMC_CCU8_lDeassertReset+0x28>
  {
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_CCU81);
 8003578:	f44f 7080 	mov.w	r0, #256	; 0x100
 800357c:	f7fe feec 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lDeassertReset:Invalid Module Pointer", 0);
  }
}
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	40020000 	.word	0x40020000
 800358c:	40024000 	.word	0x40024000

08003590 <XMC_CCU8_lUngateClock>:
    XMC_ASSERT("XMC_CCU8_lGateClock:Invalid Module Pointer", 0);
  }
}

__STATIC_INLINE void XMC_CCU8_lUngateClock(XMC_CCU8_MODULE_t *const module)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  if (module == CCU80)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	4a09      	ldr	r2, [pc, #36]	; (80035c0 <XMC_CCU8_lUngateClock+0x30>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d103      	bne.n	80035a8 <XMC_CCU8_lUngateClock+0x18>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU80);
 80035a0:	2080      	movs	r0, #128	; 0x80
 80035a2:	f7ff f85d 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
 80035a6:	e007      	b.n	80035b8 <XMC_CCU8_lUngateClock+0x28>
  }
#if defined(CCU81)
  else if (module == CCU81)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <XMC_CCU8_lUngateClock+0x34>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d103      	bne.n	80035b8 <XMC_CCU8_lUngateClock+0x28>
  {
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_CCU81);
 80035b0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80035b4:	f7ff f854 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
  else
  {
    XMC_ASSERT("XMC_CCU8_lUngateClock:Invalid Module Pointer", 0);
  }
}
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40020000 	.word	0x40020000
 80035c4:	40024000 	.word	0x40024000

080035c8 <XMC_CCU8_EnableModule>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* API to set the CCU8 module as active and enable the clock  */
void XMC_CCU8_EnableModule(XMC_CCU8_MODULE_t *const module)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_EnableModule:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));

#if (UC_FAMILY == XMC4)
  /* Enable CCU8 module clock */
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_CCU);
 80035d0:	2010      	movs	r0, #16
 80035d2:	f7ff f835 	bl	8002640 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_CCU8_lUngateClock(module);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffda 	bl	8003590 <XMC_CCU8_lUngateClock>
#endif

#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_CCU8_lDeassertReset(module);
 80035dc:	6878      	ldr	r0, [r7, #4]
 80035de:	f7ff ffbb 	bl	8003558 <XMC_CCU8_lDeassertReset>
#endif
}
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <XMC_CCU8_Init>:
#endif
}

/* API to initialize CCU8 global resources  */
void XMC_CCU8_Init(XMC_CCU8_MODULE_t *const module, const XMC_CCU8_SLICE_MCMS_ACTION_t mcs_action)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	460b      	mov	r3, r1
 80035f2:	70fb      	strb	r3, [r7, #3]

  XMC_ASSERT("XMC_CCU8_Init:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_Init:Invalid mcs action", XMC_CCU8_SLICE_CHECK_MCS_ACTION(mcs_action));

  /* Enable CCU8 module */
  XMC_CCU8_EnableModule(module);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f7ff ffe7 	bl	80035c8 <XMC_CCU8_EnableModule>
  /* Start the prescaler */
  XMC_CCU8_StartPrescaler(module);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ff92 	bl	8003524 <XMC_CCU8_StartPrescaler>

  gctrl = module->GCTRL;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	60fb      	str	r3, [r7, #12]
  gctrl &= ~((uint32_t) CCU8_GCTRL_MSDE_Msk);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800360c:	60fb      	str	r3, [r7, #12]
  gctrl |= (uint32_t)mcs_action << CCU8_GCTRL_MSDE_Pos;
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	039b      	lsls	r3, r3, #14
 8003612:	68fa      	ldr	r2, [r7, #12]
 8003614:	4313      	orrs	r3, r2
 8003616:	60fb      	str	r3, [r7, #12]

  module->GCTRL = gctrl;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	601a      	str	r2, [r3, #0]
}
 800361e:	3710      	adds	r7, #16
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <XMC_CCU8_SLICE_CompareInit>:
}

/* API to configure CC8 Slice in Compare mode */
void XMC_CCU8_SLICE_CompareInit(XMC_CCU8_SLICE_t *const slice,
                                const XMC_CCU8_SLICE_COMPARE_CONFIG_t *const compare_init)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_CompareInit:Timer Init Pointer is NULL",
             (XMC_CCU8_SLICE_COMPARE_CONFIG_t *) NULL != compare_init);
  /* Stops the timer */
  XMC_CCU8_SLICE_StopTimer(slice);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f7ff ff86 	bl	8003540 <XMC_CCU8_SLICE_StopTimer>
  /* Program the timer mode */
  slice->TC = compare_init->tc;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	615a      	str	r2, [r3, #20]
  /* Enable the timer concatenation */
  slice->CMC =  (uint32_t)compare_init->timer_concatenation << CCU8_CC8_CMC_TCE_Pos;
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	7b5b      	ldrb	r3, [r3, #13]
 8003640:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8003644:	b2db      	uxtb	r3, r3
 8003646:	051a      	lsls	r2, r3, #20
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	605a      	str	r2, [r3, #4]
  /* Program initial prescaler divider value */
  slice->PSC = (uint32_t) compare_init->prescaler_initval;
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	7b1b      	ldrb	r3, [r3, #12]
 8003650:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003654:	b2db      	uxtb	r3, r3
 8003656:	461a      	mov	r2, r3
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Program floating prescaler compare value */
  slice->FPCS = (uint32_t) compare_init->float_limit;
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	7b1b      	ldrb	r3, [r3, #12]
 8003660:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003664:	b2db      	uxtb	r3, r3
 8003666:	461a      	mov	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Program the dither compare value */
  slice->DITS = (uint32_t) compare_init->dither_limit;
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	7b5b      	ldrb	r3, [r3, #13]
 8003670:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8003674:	b2db      	uxtb	r3, r3
 8003676:	461a      	mov	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	621a      	str	r2, [r3, #32]
  /* Program timer output passive level */
  slice->PSL = (uint32_t) compare_init->psl;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  /* Asymmetric PWM and Slice output routing configuration */
#if defined(CCU8V3) /* Defined for XMC1400 devices only */
  slice->CHC = (uint32_t) compare_init->chc;
#else
  slice->CHC = (uint32_t)((uint32_t)compare_init->chc ^ XMC_CCU8_SLICE_CHC_CONFIG_MASK);
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f083 0214 	eor.w	r2, r3, #20
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	649a      	str	r2, [r3, #72]	; 0x48
#endif
}
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop

08003698 <XMC_CCU8_SLICE_SetTimerPeriodMatch>:
  slice->TC = tc;
}

/* Programs period match value of the timer  */
void XMC_CCU8_SLICE_SetTimerPeriodMatch(XMC_CCU8_SLICE_t *const slice, const uint16_t period_val)
{
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	460b      	mov	r3, r1
 80036a2:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 80036a4:	887a      	ldrh	r2, [r7, #2]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <XMC_CCU8_SLICE_SetPrescaler>:
  XMC_CCU8_SLICE_SetDitherCompareValue((XMC_CCU8_SLICE_t *)slice, (uint8_t)spread);
}

/* Programs Pre-scaler divider  */
void XMC_CCU8_SLICE_SetPrescaler(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_PRESCALER_t div_val)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b085      	sub	sp, #20
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	70fb      	strb	r3, [r7, #3]
  uint32_t fpc;

  XMC_ASSERT("XMC_CCU8_SLICE_SetPrescaler:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));

  /* If the prescaler is not running, update directly the divider*/
  fpc = slice->FPC;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c4:	60fb      	str	r3, [r7, #12]
  fpc &= ~((uint32_t) CCU8_CC8_FPC_PVAL_Msk);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80036cc:	60fb      	str	r3, [r7, #12]
  fpc |= ((uint32_t) div_val) << CCU8_CC8_FPC_PVAL_Pos;
 80036ce:	78fb      	ldrb	r3, [r7, #3]
 80036d0:	021b      	lsls	r3, r3, #8
 80036d2:	68fa      	ldr	r2, [r7, #12]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  slice->FPC = fpc;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	629a      	str	r2, [r3, #40]	; 0x28

  /*
   * In any case, update the initial value of the divider which is to be loaded once the prescaler increments to the
   * compare value.
   */
  slice->PSC = (uint32_t) div_val;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80036e4:	3714      	adds	r7, #20
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
 80036ee:	bf00      	nop

080036f0 <XMC_CCU8_SLICE_SetTimerCompareMatch>:

/* Programs timer compare match value for channel 1 or 2 */
void XMC_CCU8_SLICE_SetTimerCompareMatch(XMC_CCU8_SLICE_t *const slice,
    const XMC_CCU8_SLICE_COMPARE_CHANNEL_t channel,
    const uint16_t compare_val)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	460b      	mov	r3, r1
 80036fa:	70fb      	strb	r3, [r7, #3]
 80036fc:	4613      	mov	r3, r2
 80036fe:	803b      	strh	r3, [r7, #0]
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_SetTimerCompareMatch:Invalid channel", XMC_CCU8_SLICE_CHECK_COMP_CHANNEL(channel));

  if (XMC_CCU8_SLICE_COMPARE_CHANNEL_1 == channel)
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d103      	bne.n	800370e <XMC_CCU8_SLICE_SetTimerCompareMatch+0x1e>
  {
    slice->CR1S = (uint32_t) compare_val;
 8003706:	883a      	ldrh	r2, [r7, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	63da      	str	r2, [r3, #60]	; 0x3c
 800370c:	e002      	b.n	8003714 <XMC_CCU8_SLICE_SetTimerCompareMatch+0x24>
  }
  else
  {
    slice->CR2S = (uint32_t) compare_val;
 800370e:	883a      	ldrh	r2, [r7, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	645a      	str	r2, [r3, #68]	; 0x44
  }
}
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop

08003720 <XMC_DMA_GetEventStatus>:
 * Source transaction complete -> ::XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE      <br>
 * Destination transaction complete -> ::XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE <br>
 * DMA error event -> ::XMC_DMA_CH_EVENT_ERROR                                     <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetEventStatus(XMC_DMA_t *const dma)
{
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  return (dma->STATUSGLEV);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	f8d3 3360 	ldr.w	r3, [r3, #864]	; 0x360
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop

0800373c <XMC_DMA_GetChannelsTransferCompleteStatus>:
 *
 * \par
 * The function returns GPDMA transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsTransferCompleteStatus(XMC_DMA_t *const dma)
{
 800373c:	b480      	push	{r7}
 800373e:	b083      	sub	sp, #12
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[0]);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
}
 800374a:	4618      	mov	r0, r3
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
 8003756:	bf00      	nop

08003758 <XMC_DMA_GetChannelsBlockCompleteStatus>:
 *
 * \par
 * The function returns GPDMA block transfer complete interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsBlockCompleteStatus(XMC_DMA_t *const dma)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[2]);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop

08003774 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the source peripheral is memory, the source transaction complete interrupt is
 * ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsSourceTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[4]);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 32f8 	ldr.w	r3, [r3, #760]	; 0x2f8
}
 8003782:	4618      	mov	r0, r3
 8003784:	370c      	adds	r7, #12
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop

08003790 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>:
 * \par<b>Note: </b><br>
 * If the destination peripheral is memory, the destination transaction complete
 * interrupt is ignored.
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(XMC_DMA_t *const dma)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[6]);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
}
 800379e:	4618      	mov	r0, r3
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop

080037ac <XMC_DMA_GetChannelsErrorStatus>:
 *
 * \par
 * The function returns error interrupt status. <br>
 */
__STATIC_INLINE uint32_t XMC_DMA_GetChannelsErrorStatus(XMC_DMA_t *const dma)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b083      	sub	sp, #12
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  return (dma->STATUSCHEV[8]);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	370c      	adds	r7, #12
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop

080037c8 <XMC_DMA_Init>:
 * API IMPLEMENTATION
 *******************************************************************************/

/* Initialize GPDMA */
void XMC_DMA_Init(XMC_DMA_t *const dma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  XMC_DMA_Enable(dma);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f803 	bl	80037dc <XMC_DMA_Enable>
}
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <XMC_DMA_Enable>:

/* Enable GPDMA module */
void XMC_DMA_Enable(XMC_DMA_t *const dma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a0b      	ldr	r2, [pc, #44]	; (8003814 <XMC_DMA_Enable+0x38>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d106      	bne.n	80037fa <XMC_DMA_Enable+0x1e>
  {
#endif
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 80037ec:	480a      	ldr	r0, [pc, #40]	; (8003818 <XMC_DMA_Enable+0x3c>)
 80037ee:	f7fe ff37 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 80037f2:	4809      	ldr	r0, [pc, #36]	; (8003818 <XMC_DMA_Enable+0x3c>)
 80037f4:	f7fe fdb0 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
 80037f8:	e005      	b.n	8003806 <XMC_DMA_Enable+0x2a>
#if defined(GPDMA1)
  }
  else
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 80037fa:	4808      	ldr	r0, [pc, #32]	; (800381c <XMC_DMA_Enable+0x40>)
 80037fc:	f7fe ff30 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 8003800:	4806      	ldr	r0, [pc, #24]	; (800381c <XMC_DMA_Enable+0x40>)
 8003802:	f7fe fda9 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
  }
#endif

  dma->DMACFGREG = 0x1U;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
}
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	50014000 	.word	0x50014000
 8003818:	20000010 	.word	0x20000010
 800381c:	20000020 	.word	0x20000020

08003820 <XMC_DMA_IsEnabled>:
#endif
}

/* Check is the GPDMA peripheral is enabled */
bool XMC_DMA_IsEnabled(const XMC_DMA_t *const dma)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  bool status;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a33      	ldr	r2, [pc, #204]	; (80038f8 <XMC_DMA_IsEnabled+0xd8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d125      	bne.n	800387c <XMC_DMA_IsEnabled+0x5c>
  {
#endif
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA0);
 8003830:	4832      	ldr	r0, [pc, #200]	; (80038fc <XMC_DMA_IsEnabled+0xdc>)
 8003832:	f7fe fdad 	bl	8002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	bf14      	ite	ne
 800383c:	2301      	movne	r3, #1
 800383e:	2300      	moveq	r3, #0
 8003840:	b2db      	uxtb	r3, r3
 8003842:	f083 0301 	eor.w	r3, r3, #1
 8003846:	b2db      	uxtb	r3, r3
 8003848:	73fb      	strb	r3, [r7, #15]
 800384a:	7bfb      	ldrb	r3, [r7, #15]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA0);
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00a      	beq.n	800386e <XMC_DMA_IsEnabled+0x4e>
 8003858:	4828      	ldr	r0, [pc, #160]	; (80038fc <XMC_DMA_IsEnabled+0xdc>)
 800385a:	f7fe ff1d 	bl	8002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 800385e:	4603      	mov	r3, r0
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <XMC_DMA_IsEnabled+0x4e>
 800386a:	2301      	movs	r3, #1
 800386c:	e000      	b.n	8003870 <XMC_DMA_IsEnabled+0x50>
 800386e:	2300      	movs	r3, #0
 8003870:	73fb      	strb	r3, [r7, #15]
 8003872:	7bfb      	ldrb	r3, [r7, #15]
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e024      	b.n	80038c6 <XMC_DMA_IsEnabled+0xa6>
#endif
#if defined(GPDMA1)
  }
  else
  {
    status = !XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_GPDMA1);
 800387c:	4820      	ldr	r0, [pc, #128]	; (8003900 <XMC_DMA_IsEnabled+0xe0>)
 800387e:	f7fe fd87 	bl	8002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf14      	ite	ne
 8003888:	2301      	movne	r3, #1
 800388a:	2300      	moveq	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	f083 0301 	eor.w	r3, r3, #1
 8003892:	b2db      	uxtb	r3, r3
 8003894:	73fb      	strb	r3, [r7, #15]
 8003896:	7bfb      	ldrb	r3, [r7, #15]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	73fb      	strb	r3, [r7, #15]
#if defined(CLOCK_GATING_SUPPORTED)
    status = status && !XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_GPDMA1);
 800389e:	7bfb      	ldrb	r3, [r7, #15]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00a      	beq.n	80038ba <XMC_DMA_IsEnabled+0x9a>
 80038a4:	4816      	ldr	r0, [pc, #88]	; (8003900 <XMC_DMA_IsEnabled+0xe0>)
 80038a6:	f7fe fef7 	bl	8002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d001      	beq.n	80038ba <XMC_DMA_IsEnabled+0x9a>
 80038b6:	2301      	movs	r3, #1
 80038b8:	e000      	b.n	80038bc <XMC_DMA_IsEnabled+0x9c>
 80038ba:	2300      	movs	r3, #0
 80038bc:	73fb      	strb	r3, [r7, #15]
 80038be:	7bfb      	ldrb	r3, [r7, #15]
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	73fb      	strb	r3, [r7, #15]
#endif
  }
#endif

  /* DMA reset is not asserted and peripheral clock is not gated */
  if (status == true)
 80038c6:	7bfb      	ldrb	r3, [r7, #15]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00f      	beq.n	80038ec <XMC_DMA_IsEnabled+0xcc>
  {
    status = status && (dma->DMACFGREG != 0U);
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d006      	beq.n	80038e0 <XMC_DMA_IsEnabled+0xc0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8d3 3398 	ldr.w	r3, [r3, #920]	; 0x398
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <XMC_DMA_IsEnabled+0xc0>
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <XMC_DMA_IsEnabled+0xc2>
 80038e0:	2300      	movs	r3, #0
 80038e2:	73fb      	strb	r3, [r7, #15]
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	f003 0301 	and.w	r3, r3, #1
 80038ea:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80038ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	50014000 	.word	0x50014000
 80038fc:	20000010 	.word	0x20000010
 8003900:	20000020 	.word	0x20000020

08003904 <XMC_DMA_EnableRequestLine>:

/* Enable request line */
void XMC_DMA_EnableRequestLine(XMC_DMA_t *const dma, uint8_t line, uint8_t peripheral)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
 800390c:	460b      	mov	r3, r1
 800390e:	70fb      	strb	r3, [r7, #3]
 8003910:	4613      	mov	r3, r2
 8003912:	70bb      	strb	r3, [r7, #2]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a1f      	ldr	r2, [pc, #124]	; (8003994 <XMC_DMA_EnableRequestLine+0x90>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d11b      	bne.n	8003954 <XMC_DMA_EnableRequestLine+0x50>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 800391c:	481e      	ldr	r0, [pc, #120]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003920:	689a      	ldr	r2, [r3, #8]
 8003922:	78fb      	ldrb	r3, [r7, #3]
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	4619      	mov	r1, r3
 8003928:	230f      	movs	r3, #15
 800392a:	408b      	lsls	r3, r1
 800392c:	43db      	mvns	r3, r3
 800392e:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003930:	78bb      	ldrb	r3, [r7, #2]
 8003932:	78f9      	ldrb	r1, [r7, #3]
 8003934:	0089      	lsls	r1, r1, #2
 8003936:	408b      	lsls	r3, r1
  if (dma == XMC_DMA0)
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    DLR->SRSEL0 = ((DLR->SRSEL0 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003938:	4313      	orrs	r3, r2
 800393a:	6083      	str	r3, [r0, #8]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
 800393c:	4916      	ldr	r1, [pc, #88]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 800393e:	4b16      	ldr	r3, [pc, #88]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	2001      	movs	r0, #1
 800394a:	fa00 f303 	lsl.w	r3, r0, r3
 800394e:	4313      	orrs	r3, r2
 8003950:	610b      	str	r3, [r1, #16]
 8003952:	e019      	b.n	8003988 <XMC_DMA_EnableRequestLine+0x84>
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003954:	4810      	ldr	r0, [pc, #64]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003956:	4b10      	ldr	r3, [pc, #64]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	78fb      	ldrb	r3, [r7, #3]
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	4619      	mov	r1, r3
 8003960:	230f      	movs	r3, #15
 8003962:	408b      	lsls	r3, r1
 8003964:	43db      	mvns	r3, r3
 8003966:	401a      	ands	r2, r3
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
 8003968:	78bb      	ldrb	r3, [r7, #2]
 800396a:	78f9      	ldrb	r1, [r7, #3]
 800396c:	0089      	lsls	r1, r1, #2
 800396e:	408b      	lsls	r3, r1
    DLR->LNEN |= (0x1UL << (line & GPDMA0_CH_CFGH_PER_Msk));
#if defined(GPDMA1)
  }
  else
  {
    DLR->SRSEL1 = ((DLR->SRSEL1 & (uint32_t)~(DLR_SRSEL_RS_MSK << (line * DLR_SRSEL_RS_BITSIZE))) |
 8003970:	4313      	orrs	r3, r2
 8003972:	60c3      	str	r3, [r0, #12]
                   ((uint32_t)peripheral << (line * DLR_SRSEL_RS_BITSIZE)));
    DLR->LNEN |= (0x100UL << line);
 8003974:	4908      	ldr	r1, [pc, #32]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <XMC_DMA_EnableRequestLine+0x94>)
 8003978:	691a      	ldr	r2, [r3, #16]
 800397a:	78fb      	ldrb	r3, [r7, #3]
 800397c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003980:	fa00 f303 	lsl.w	r3, r0, r3
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
  }
#endif
}
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	50014000 	.word	0x50014000
 8003998:	50004900 	.word	0x50004900

0800399c <XMC_DMA_CH_IsEnabled>:
  }
}

/* Check if a DMA channel is enabled */
bool XMC_DMA_CH_IsEnabled(XMC_DMA_t *const dma, const uint8_t channel)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	460b      	mov	r3, r1
 80039a6:	70fb      	strb	r3, [r7, #3]
  return (bool)(dma->CHENREG & ((uint32_t)1U << channel));
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 23a0 	ldr.w	r2, [r3, #928]	; 0x3a0
 80039ae:	78fb      	ldrb	r3, [r7, #3]
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	bf14      	ite	ne
 80039bc:	2301      	movne	r3, #1
 80039be:	2300      	moveq	r3, #0
 80039c0:	b2db      	uxtb	r3, r3
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
 80039ce:	bf00      	nop

080039d0 <XMC_DMA_CH_Init>:

/* Initialize DMA channel */
XMC_DMA_CH_STATUS_t XMC_DMA_CH_Init(XMC_DMA_t *const dma, const uint8_t channel, const XMC_DMA_CH_CONFIG_t *const config)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b086      	sub	sp, #24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	460b      	mov	r3, r1
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	72fb      	strb	r3, [r7, #11]
  XMC_DMA_CH_STATUS_t status;
  uint8_t line;
  uint8_t peripheral;

  if (XMC_DMA_IsEnabled(dma) == true)
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	f7ff ff1e 	bl	8003820 <XMC_DMA_IsEnabled>
 80039e4:	4603      	mov	r3, r0
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 81f1 	beq.w	8003dce <XMC_DMA_CH_Init+0x3fe>
  {
    if (XMC_DMA_CH_IsEnabled(dma, channel) == false)
 80039ec:	7afb      	ldrb	r3, [r7, #11]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	4619      	mov	r1, r3
 80039f2:	f7ff ffd3 	bl	800399c <XMC_DMA_CH_IsEnabled>
 80039f6:	4603      	mov	r3, r0
 80039f8:	f083 0301 	eor.w	r3, r3, #1
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	f000 81e2 	beq.w	8003dc8 <XMC_DMA_CH_Init+0x3f8>
    {
      dma->CH[channel].SAR = config->src_addr;
 8003a04:	7afb      	ldrb	r3, [r7, #11]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	6852      	ldr	r2, [r2, #4]
 8003a0a:	68f9      	ldr	r1, [r7, #12]
 8003a0c:	2058      	movs	r0, #88	; 0x58
 8003a0e:	fb00 f303 	mul.w	r3, r0, r3
 8003a12:	440b      	add	r3, r1
 8003a14:	601a      	str	r2, [r3, #0]
      dma->CH[channel].DAR = config->dst_addr;
 8003a16:	7afb      	ldrb	r3, [r7, #11]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	68f9      	ldr	r1, [r7, #12]
 8003a1e:	2058      	movs	r0, #88	; 0x58
 8003a20:	fb00 f303 	mul.w	r3, r0, r3
 8003a24:	440b      	add	r3, r1
 8003a26:	3308      	adds	r3, #8
 8003a28:	601a      	str	r2, [r3, #0]
      dma->CH[channel].LLP = (uint32_t)config->linked_list_pointer;
 8003a2a:	7afb      	ldrb	r3, [r7, #11]
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	68d2      	ldr	r2, [r2, #12]
 8003a30:	4610      	mov	r0, r2
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	2158      	movs	r1, #88	; 0x58
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3310      	adds	r3, #16
 8003a3e:	6018      	str	r0, [r3, #0]
      dma->CH[channel].CTLH = (uint32_t)config->block_size;
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	687a      	ldr	r2, [r7, #4]
 8003a44:	8b12      	ldrh	r2, [r2, #24]
 8003a46:	4610      	mov	r0, r2
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	2158      	movs	r1, #88	; 0x58
 8003a4c:	fb01 f303 	mul.w	r3, r1, r3
 8003a50:	4413      	add	r3, r2
 8003a52:	3318      	adds	r3, #24
 8003a54:	6058      	str	r0, [r3, #4]
      dma->CH[channel].CTLL = config->control;
 8003a56:	7afb      	ldrb	r3, [r7, #11]
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6812      	ldr	r2, [r2, #0]
 8003a5c:	68f9      	ldr	r1, [r7, #12]
 8003a5e:	2058      	movs	r0, #88	; 0x58
 8003a60:	fb00 f303 	mul.w	r3, r0, r3
 8003a64:	440b      	add	r3, r1
 8003a66:	3318      	adds	r3, #24
 8003a68:	601a      	str	r2, [r3, #0]

      dma->CH[channel].CFGL = (uint32_t)((uint32_t)config->priority |
 8003a6a:	7afb      	ldrb	r3, [r7, #11]
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	7ed2      	ldrb	r2, [r2, #27]
 8003a70:	f442 6240 	orr.w	r2, r2, #3072	; 0xc00
 8003a74:	68f9      	ldr	r1, [r7, #12]
 8003a76:	2058      	movs	r0, #88	; 0x58
 8003a78:	fb00 f303 	mul.w	r3, r0, r3
 8003a7c:	440b      	add	r3, r1
 8003a7e:	3340      	adds	r3, #64	; 0x40
 8003a80:	601a      	str	r2, [r3, #0]
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_SRC_Msk |
                                         (uint32_t)GPDMA0_CH_CFGL_HS_SEL_DST_Msk);

      if ((dma == XMC_DMA0) && (channel < (uint8_t)2))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	4ab1      	ldr	r2, [pc, #708]	; (8003d4c <XMC_DMA_CH_Init+0x37c>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d116      	bne.n	8003ab8 <XMC_DMA_CH_Init+0xe8>
 8003a8a:	7afb      	ldrb	r3, [r7, #11]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d813      	bhi.n	8003ab8 <XMC_DMA_CH_Init+0xe8>
      {
        /* Configure scatter and gather */
        dma->CH[channel].SGR = config->src_gather_control;
 8003a90:	7afb      	ldrb	r3, [r7, #11]
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	6912      	ldr	r2, [r2, #16]
 8003a96:	68f9      	ldr	r1, [r7, #12]
 8003a98:	2058      	movs	r0, #88	; 0x58
 8003a9a:	fb00 f303 	mul.w	r3, r0, r3
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3348      	adds	r3, #72	; 0x48
 8003aa2:	601a      	str	r2, [r3, #0]
        dma->CH[channel].DSR = config->dst_scatter_control;
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6952      	ldr	r2, [r2, #20]
 8003aaa:	68f9      	ldr	r1, [r7, #12]
 8003aac:	2058      	movs	r0, #88	; 0x58
 8003aae:	fb00 f303 	mul.w	r3, r0, r3
 8003ab2:	440b      	add	r3, r1
 8003ab4:	3350      	adds	r3, #80	; 0x50
 8003ab6:	601a      	str	r2, [r3, #0]
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	8c1b      	ldrh	r3, [r3, #32]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d14f      	bne.n	8003b60 <XMC_DMA_CH_Init+0x190>
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	789b      	ldrb	r3, [r3, #2]
 8003ac4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d006      	beq.n	8003adc <XMC_DMA_CH_Init+0x10c>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	789b      	ldrb	r3, [r3, #2]
 8003ad2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad6:	b2db      	uxtb	r3, r3
      }

      if (config->dst_handshaking == XMC_DMA_CH_DST_HANDSHAKING_HARDWARE)
      {
        /* Hardware handshaking interface configuration */
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_M2P_DMA) ||
 8003ad8:	2b30      	cmp	r3, #48	; 0x30
 8003ada:	d141      	bne.n	8003b60 <XMC_DMA_CH_Init+0x190>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	4a9b      	ldr	r2, [pc, #620]	; (8003d4c <XMC_DMA_CH_Init+0x37c>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d106      	bne.n	8003af2 <XMC_DMA_CH_Init+0x122>
          {
#endif
            line = config->dst_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	75bb      	strb	r3, [r7, #22]
 8003af0:	e005      	b.n	8003afe <XMC_DMA_CH_Init+0x12e>
#if defined(GPDMA1)
          }
          else
          {
            line = config->dst_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->dst_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003b04:	091b      	lsrs	r3, r3, #4
 8003b06:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_DEST_PER_Pos);
 8003b08:	7afb      	ldrb	r3, [r7, #11]
 8003b0a:	7afa      	ldrb	r2, [r7, #11]
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	2058      	movs	r0, #88	; 0x58
 8003b10:	fb00 f202 	mul.w	r2, r0, r2
 8003b14:	440a      	add	r2, r1
 8003b16:	3240      	adds	r2, #64	; 0x40
 8003b18:	6851      	ldr	r1, [r2, #4]
 8003b1a:	7dba      	ldrb	r2, [r7, #22]
 8003b1c:	02d2      	lsls	r2, r2, #11
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	68f9      	ldr	r1, [r7, #12]
 8003b22:	2058      	movs	r0, #88	; 0x58
 8003b24:	fb00 f303 	mul.w	r3, r0, r3
 8003b28:	440b      	add	r3, r1
 8003b2a:	3340      	adds	r3, #64	; 0x40
 8003b2c:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003b2e:	7dba      	ldrb	r2, [r7, #22]
 8003b30:	7d7b      	ldrb	r3, [r7, #21]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	4611      	mov	r1, r2
 8003b36:	461a      	mov	r2, r3
 8003b38:	f7ff fee4 	bl	8003904 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_DST_Msk;
 8003b3c:	7afb      	ldrb	r3, [r7, #11]
 8003b3e:	7afa      	ldrb	r2, [r7, #11]
 8003b40:	68f9      	ldr	r1, [r7, #12]
 8003b42:	2058      	movs	r0, #88	; 0x58
 8003b44:	fb00 f202 	mul.w	r2, r0, r2
 8003b48:	440a      	add	r2, r1
 8003b4a:	3240      	adds	r2, #64	; 0x40
 8003b4c:	6812      	ldr	r2, [r2, #0]
 8003b4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b52:	68f9      	ldr	r1, [r7, #12]
 8003b54:	2058      	movs	r0, #88	; 0x58
 8003b56:	fb00 f303 	mul.w	r3, r0, r3
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3340      	adds	r3, #64	; 0x40
 8003b5e:	601a      	str	r2, [r3, #0]
        }
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	8b9b      	ldrh	r3, [r3, #28]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d14c      	bne.n	8003c02 <XMC_DMA_CH_Init+0x232>
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	789b      	ldrb	r3, [r3, #2]
 8003b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b20      	cmp	r3, #32
 8003b74:	d006      	beq.n	8003b84 <XMC_DMA_CH_Init+0x1b4>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	789b      	ldrb	r3, [r3, #2]
 8003b7a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b7e:	b2db      	uxtb	r3, r3
      }


      if (config->src_handshaking == XMC_DMA_CH_SRC_HANDSHAKING_HARDWARE)
      {
        if ((config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2M_DMA) ||
 8003b80:	2b30      	cmp	r3, #48	; 0x30
 8003b82:	d13e      	bne.n	8003c02 <XMC_DMA_CH_Init+0x232>
            (config->transfer_flow == (uint32_t)XMC_DMA_CH_TRANSFER_FLOW_P2P_DMA))
        {
#if defined(GPDMA1)
          if (dma == XMC_DMA0)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	4a71      	ldr	r2, [pc, #452]	; (8003d4c <XMC_DMA_CH_Init+0x37c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d105      	bne.n	8003b98 <XMC_DMA_CH_Init+0x1c8>
          {
#endif
            line = config->src_peripheral_request & GPDMA0_CH_CFGH_PER_Msk;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	7f9b      	ldrb	r3, [r3, #30]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	75bb      	strb	r3, [r7, #22]
 8003b96:	e004      	b.n	8003ba2 <XMC_DMA_CH_Init+0x1d2>
#if defined(GPDMA1)
          }
          else
          {
            line = config->src_peripheral_request & GPDMA1_CH_CFGH_PER_Msk;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	7f9b      	ldrb	r3, [r3, #30]
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	75bb      	strb	r3, [r7, #22]
          }
#endif
          peripheral = config->src_peripheral_request >> GPDMA_CH_CFGH_PER_BITSIZE;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	7f9b      	ldrb	r3, [r3, #30]
 8003ba6:	091b      	lsrs	r3, r3, #4
 8003ba8:	757b      	strb	r3, [r7, #21]

          dma->CH[channel].CFGH |= (uint32_t)((uint32_t)line << GPDMA0_CH_CFGH_SRC_PER_Pos);
 8003baa:	7afb      	ldrb	r3, [r7, #11]
 8003bac:	7afa      	ldrb	r2, [r7, #11]
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	2058      	movs	r0, #88	; 0x58
 8003bb2:	fb00 f202 	mul.w	r2, r0, r2
 8003bb6:	440a      	add	r2, r1
 8003bb8:	3240      	adds	r2, #64	; 0x40
 8003bba:	6851      	ldr	r1, [r2, #4]
 8003bbc:	7dba      	ldrb	r2, [r7, #22]
 8003bbe:	01d2      	lsls	r2, r2, #7
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	68f9      	ldr	r1, [r7, #12]
 8003bc4:	2058      	movs	r0, #88	; 0x58
 8003bc6:	fb00 f303 	mul.w	r3, r0, r3
 8003bca:	440b      	add	r3, r1
 8003bcc:	3340      	adds	r3, #64	; 0x40
 8003bce:	605a      	str	r2, [r3, #4]
          XMC_DMA_EnableRequestLine(dma, line, peripheral);
 8003bd0:	7dba      	ldrb	r2, [r7, #22]
 8003bd2:	7d7b      	ldrb	r3, [r7, #21]
 8003bd4:	68f8      	ldr	r0, [r7, #12]
 8003bd6:	4611      	mov	r1, r2
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f7ff fe93 	bl	8003904 <XMC_DMA_EnableRequestLine>
          dma->CH[channel].CFGL &= (uint32_t)~GPDMA0_CH_CFGL_HS_SEL_SRC_Msk;
 8003bde:	7afb      	ldrb	r3, [r7, #11]
 8003be0:	7afa      	ldrb	r2, [r7, #11]
 8003be2:	68f9      	ldr	r1, [r7, #12]
 8003be4:	2058      	movs	r0, #88	; 0x58
 8003be6:	fb00 f202 	mul.w	r2, r0, r2
 8003bea:	440a      	add	r2, r1
 8003bec:	3240      	adds	r2, #64	; 0x40
 8003bee:	6812      	ldr	r2, [r2, #0]
 8003bf0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bf4:	68f9      	ldr	r1, [r7, #12]
 8003bf6:	2058      	movs	r0, #88	; 0x58
 8003bf8:	fb00 f303 	mul.w	r3, r0, r3
 8003bfc:	440b      	add	r3, r1
 8003bfe:	3340      	adds	r3, #64	; 0x40
 8003c00:	601a      	str	r2, [r3, #0]
        }
      }

      XMC_DMA_CH_ClearEventStatus(dma, channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003c02:	7afb      	ldrb	r3, [r7, #11]
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	4619      	mov	r1, r3
 8003c08:	221f      	movs	r2, #31
 8003c0a:	f000 f90f 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>
                                  (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE |
                                  (uint32_t)XMC_DMA_CH_EVENT_ERROR));

      switch (config->transfer_type)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	7e9b      	ldrb	r3, [r3, #26]
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	f200 80d4 	bhi.w	8003dc0 <XMC_DMA_CH_Init+0x3f0>
 8003c18:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <XMC_DMA_CH_Init+0x250>)
 8003c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1e:	bf00      	nop
 8003c20:	08003dc1 	.word	0x08003dc1
 8003c24:	08003c45 	.word	0x08003c45
 8003c28:	08003c6b 	.word	0x08003c6b
 8003c2c:	08003c91 	.word	0x08003c91
 8003c30:	08003cb7 	.word	0x08003cb7
 8003c34:	08003cdd 	.word	0x08003cdd
 8003c38:	08003d27 	.word	0x08003d27
 8003c3c:	08003d51 	.word	0x08003d51
 8003c40:	08003d9b 	.word	0x08003d9b
      {
        case XMC_DMA_CH_TRANSFER_TYPE_SINGLE_BLOCK:
          break;

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003c44:	7afb      	ldrb	r3, [r7, #11]
 8003c46:	7afa      	ldrb	r2, [r7, #11]
 8003c48:	68f9      	ldr	r1, [r7, #12]
 8003c4a:	2058      	movs	r0, #88	; 0x58
 8003c4c:	fb00 f202 	mul.w	r2, r0, r2
 8003c50:	440a      	add	r2, r1
 8003c52:	3240      	adds	r2, #64	; 0x40
 8003c54:	6812      	ldr	r2, [r2, #0]
 8003c56:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c5a:	68f9      	ldr	r1, [r7, #12]
 8003c5c:	2058      	movs	r0, #88	; 0x58
 8003c5e:	fb00 f303 	mul.w	r3, r0, r3
 8003c62:	440b      	add	r3, r1
 8003c64:	3340      	adds	r3, #64	; 0x40
 8003c66:	601a      	str	r2, [r3, #0]
          break;
 8003c68:	e0ab      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_CONTIGUOUS:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	7afa      	ldrb	r2, [r7, #11]
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	2058      	movs	r0, #88	; 0x58
 8003c72:	fb00 f202 	mul.w	r2, r0, r2
 8003c76:	440a      	add	r2, r1
 8003c78:	3240      	adds	r2, #64	; 0x40
 8003c7a:	6812      	ldr	r2, [r2, #0]
 8003c7c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	2058      	movs	r0, #88	; 0x58
 8003c84:	fb00 f303 	mul.w	r3, r0, r3
 8003c88:	440b      	add	r3, r1
 8003c8a:	3340      	adds	r3, #64	; 0x40
 8003c8c:	601a      	str	r2, [r3, #0]
          break;
 8003c8e:	e098      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)((uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk |
 8003c90:	7afb      	ldrb	r3, [r7, #11]
 8003c92:	7afa      	ldrb	r2, [r7, #11]
 8003c94:	68f9      	ldr	r1, [r7, #12]
 8003c96:	2058      	movs	r0, #88	; 0x58
 8003c98:	fb00 f202 	mul.w	r2, r0, r2
 8003c9c:	440a      	add	r2, r1
 8003c9e:	3240      	adds	r2, #64	; 0x40
 8003ca0:	6812      	ldr	r2, [r2, #0]
 8003ca2:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 8003ca6:	68f9      	ldr	r1, [r7, #12]
 8003ca8:	2058      	movs	r0, #88	; 0x58
 8003caa:	fb00 f303 	mul.w	r3, r0, r3
 8003cae:	440b      	add	r3, r1
 8003cb0:	3340      	adds	r3, #64	; 0x40
 8003cb2:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk);
          break;
 8003cb4:	e085      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_CONTIGUOUS_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	7afa      	ldrb	r2, [r7, #11]
 8003cba:	68f9      	ldr	r1, [r7, #12]
 8003cbc:	2058      	movs	r0, #88	; 0x58
 8003cbe:	fb00 f202 	mul.w	r2, r0, r2
 8003cc2:	440a      	add	r2, r1
 8003cc4:	3218      	adds	r2, #24
 8003cc6:	6812      	ldr	r2, [r2, #0]
 8003cc8:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003ccc:	68f9      	ldr	r1, [r7, #12]
 8003cce:	2058      	movs	r0, #88	; 0x58
 8003cd0:	fb00 f303 	mul.w	r3, r0, r3
 8003cd4:	440b      	add	r3, r1
 8003cd6:	3318      	adds	r3, #24
 8003cd8:	601a      	str	r2, [r3, #0]
          break;
 8003cda:	e072      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_RELOAD_DSTADR_LINKED:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_SRC_Msk;
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	7afa      	ldrb	r2, [r7, #11]
 8003ce0:	68f9      	ldr	r1, [r7, #12]
 8003ce2:	2058      	movs	r0, #88	; 0x58
 8003ce4:	fb00 f202 	mul.w	r2, r0, r2
 8003ce8:	440a      	add	r2, r1
 8003cea:	3240      	adds	r2, #64	; 0x40
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	2058      	movs	r0, #88	; 0x58
 8003cf6:	fb00 f303 	mul.w	r3, r0, r3
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3340      	adds	r3, #64	; 0x40
 8003cfe:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk;
 8003d00:	7afb      	ldrb	r3, [r7, #11]
 8003d02:	7afa      	ldrb	r2, [r7, #11]
 8003d04:	68f9      	ldr	r1, [r7, #12]
 8003d06:	2058      	movs	r0, #88	; 0x58
 8003d08:	fb00 f202 	mul.w	r2, r0, r2
 8003d0c:	440a      	add	r2, r1
 8003d0e:	3218      	adds	r2, #24
 8003d10:	6812      	ldr	r2, [r2, #0]
 8003d12:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8003d16:	68f9      	ldr	r1, [r7, #12]
 8003d18:	2058      	movs	r0, #88	; 0x58
 8003d1a:	fb00 f303 	mul.w	r3, r0, r3
 8003d1e:	440b      	add	r3, r1
 8003d20:	3318      	adds	r3, #24
 8003d22:	601a      	str	r2, [r3, #0]
          break;
 8003d24:	e04d      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_CONTIGUOUS:
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003d26:	7afb      	ldrb	r3, [r7, #11]
 8003d28:	7afa      	ldrb	r2, [r7, #11]
 8003d2a:	68f9      	ldr	r1, [r7, #12]
 8003d2c:	2058      	movs	r0, #88	; 0x58
 8003d2e:	fb00 f202 	mul.w	r2, r0, r2
 8003d32:	440a      	add	r2, r1
 8003d34:	3218      	adds	r2, #24
 8003d36:	6812      	ldr	r2, [r2, #0]
 8003d38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d3c:	68f9      	ldr	r1, [r7, #12]
 8003d3e:	2058      	movs	r0, #88	; 0x58
 8003d40:	fb00 f303 	mul.w	r3, r0, r3
 8003d44:	440b      	add	r3, r1
 8003d46:	3318      	adds	r3, #24
 8003d48:	601a      	str	r2, [r3, #0]
          break;
 8003d4a:	e03a      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>
 8003d4c:	50014000 	.word	0x50014000

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_RELOAD:
          dma->CH[channel].CFGL |= (uint32_t)GPDMA0_CH_CFGL_RELOAD_DST_Msk;
 8003d50:	7afb      	ldrb	r3, [r7, #11]
 8003d52:	7afa      	ldrb	r2, [r7, #11]
 8003d54:	68f9      	ldr	r1, [r7, #12]
 8003d56:	2058      	movs	r0, #88	; 0x58
 8003d58:	fb00 f202 	mul.w	r2, r0, r2
 8003d5c:	440a      	add	r2, r1
 8003d5e:	3240      	adds	r2, #64	; 0x40
 8003d60:	6812      	ldr	r2, [r2, #0]
 8003d62:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	2058      	movs	r0, #88	; 0x58
 8003d6a:	fb00 f303 	mul.w	r3, r0, r3
 8003d6e:	440b      	add	r3, r1
 8003d70:	3340      	adds	r3, #64	; 0x40
 8003d72:	601a      	str	r2, [r3, #0]
          dma->CH[channel].CTLL |= (uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk;
 8003d74:	7afb      	ldrb	r3, [r7, #11]
 8003d76:	7afa      	ldrb	r2, [r7, #11]
 8003d78:	68f9      	ldr	r1, [r7, #12]
 8003d7a:	2058      	movs	r0, #88	; 0x58
 8003d7c:	fb00 f202 	mul.w	r2, r0, r2
 8003d80:	440a      	add	r2, r1
 8003d82:	3218      	adds	r2, #24
 8003d84:	6812      	ldr	r2, [r2, #0]
 8003d86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d8a:	68f9      	ldr	r1, [r7, #12]
 8003d8c:	2058      	movs	r0, #88	; 0x58
 8003d8e:	fb00 f303 	mul.w	r3, r0, r3
 8003d92:	440b      	add	r3, r1
 8003d94:	3318      	adds	r3, #24
 8003d96:	601a      	str	r2, [r3, #0]
          break;
 8003d98:	e013      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        case XMC_DMA_CH_TRANSFER_TYPE_MULTI_BLOCK_SRCADR_LINKED_DSTADR_LINKED:
          dma->CH[channel].CTLL |= (uint32_t)((uint32_t)GPDMA0_CH_CTLL_LLP_SRC_EN_Msk |
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	7afa      	ldrb	r2, [r7, #11]
 8003d9e:	68f9      	ldr	r1, [r7, #12]
 8003da0:	2058      	movs	r0, #88	; 0x58
 8003da2:	fb00 f202 	mul.w	r2, r0, r2
 8003da6:	440a      	add	r2, r1
 8003da8:	3218      	adds	r2, #24
 8003daa:	6812      	ldr	r2, [r2, #0]
 8003dac:	f042 52c0 	orr.w	r2, r2, #402653184	; 0x18000000
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	2058      	movs	r0, #88	; 0x58
 8003db4:	fb00 f303 	mul.w	r3, r0, r3
 8003db8:	440b      	add	r3, r1
 8003dba:	3318      	adds	r3, #24
 8003dbc:	601a      	str	r2, [r3, #0]
                                              (uint32_t)GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
          break;
 8003dbe:	e000      	b.n	8003dc2 <XMC_DMA_CH_Init+0x3f2>

        default:
          break;
 8003dc0:	bf00      	nop
      }

      status = XMC_DMA_CH_STATUS_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	75fb      	strb	r3, [r7, #23]
 8003dc6:	e004      	b.n	8003dd2 <XMC_DMA_CH_Init+0x402>

    }
    else
    {
      status = XMC_DMA_CH_STATUS_BUSY;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	75fb      	strb	r3, [r7, #23]
 8003dcc:	e001      	b.n	8003dd2 <XMC_DMA_CH_Init+0x402>
    }
  }
  else
  {
    status = XMC_DMA_CH_STATUS_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3718      	adds	r7, #24
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <XMC_DMA_CH_EnableEvent>:
  return (bool)(dma->CH[channel].CFGL & (uint32_t)GPDMA0_CH_CFGL_CH_SUSP_Msk);
}

/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	460b      	mov	r3, r1
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
 8003dee:	e014      	b.n	8003e1a <XMC_DMA_CH_EnableEvent+0x3e>
  {
    if (event & ((uint32_t)0x1UL << event_idx))
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	fa22 f303 	lsr.w	r3, r2, r3
 8003df8:	f003 0301 	and.w	r3, r3, #1
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d009      	beq.n	8003e14 <XMC_DMA_CH_EnableEvent+0x38>
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	005a      	lsls	r2, r3, #1
 8003e04:	7afb      	ldrb	r3, [r7, #11]
 8003e06:	f240 1101 	movw	r1, #257	; 0x101
 8003e0a:	4099      	lsls	r1, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	32c4      	adds	r2, #196	; 0xc4
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Enable GPDMA event */
void XMC_DMA_CH_EnableEvent(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3301      	adds	r3, #1
 8003e18:	617b      	str	r3, [r7, #20]
 8003e1a:	697b      	ldr	r3, [r7, #20]
 8003e1c:	2b04      	cmp	r3, #4
 8003e1e:	d9e7      	bls.n	8003df0 <XMC_DMA_CH_EnableEvent+0x14>
    if (event & ((uint32_t)0x1UL << event_idx))
    {
      dma->MASKCHEV[event_idx * 2UL] = ((uint32_t)0x101UL << channel);
    }
  }
}
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop

08003e2c <XMC_DMA_CH_ClearEventStatus>:
  }
}

/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	460b      	mov	r3, r1
 8003e36:	607a      	str	r2, [r7, #4]
 8003e38:	72fb      	strb	r3, [r7, #11]
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	617b      	str	r3, [r7, #20]
 8003e3e:	e013      	b.n	8003e68 <XMC_DMA_CH_ClearEventStatus+0x3c>
  {
    if (event & (uint32_t)((uint32_t)0x1UL << event_idx))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	fa22 f303 	lsr.w	r3, r2, r3
 8003e48:	f003 0301 	and.w	r3, r3, #1
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <XMC_DMA_CH_ClearEventStatus+0x36>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	005a      	lsls	r2, r3, #1
 8003e54:	7afb      	ldrb	r3, [r7, #11]
 8003e56:	2101      	movs	r1, #1
 8003e58:	4099      	lsls	r1, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	32ce      	adds	r2, #206	; 0xce
 8003e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
/* Clear GPDMA event */
void XMC_DMA_CH_ClearEventStatus(XMC_DMA_t *const dma, const uint8_t channel, const uint32_t event)
{
  uint32_t event_idx;

  for (event_idx = 0UL; event_idx < DMA_EVENT_MAX; ++event_idx)
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	3301      	adds	r3, #1
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d9e8      	bls.n	8003e40 <XMC_DMA_CH_ClearEventStatus+0x14>
    {
      dma->CLEARCHEV[event_idx * 2UL] = ((uint32_t)0x1UL << channel);
    }
  }

}
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <XMC_DMA_CH_SetEventHandler>:
  dma->CH[channel].CTLL &= (uint32_t)~(GPDMA0_CH_CTLL_LLP_SRC_EN_Msk | GPDMA0_CH_CTLL_LLP_DST_EN_Msk);
}

/* Set event handler */
void XMC_DMA_CH_SetEventHandler(XMC_DMA_t *const dma, const uint8_t channel, XMC_DMA_CH_EVENT_HANDLER_t event_handler)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	460b      	mov	r3, r1
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	72fb      	strb	r3, [r7, #11]
#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	4a09      	ldr	r2, [pc, #36]	; (8003eb0 <XMC_DMA_CH_SetEventHandler+0x38>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d105      	bne.n	8003e9a <XMC_DMA_CH_SetEventHandler+0x22>
  {
#else
  XMC_UNUSED_ARG(dma);
#endif
    dma0_event_handlers[channel] = event_handler;
 8003e8e:	7afb      	ldrb	r3, [r7, #11]
 8003e90:	4908      	ldr	r1, [pc, #32]	; (8003eb4 <XMC_DMA_CH_SetEventHandler+0x3c>)
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8003e98:	e004      	b.n	8003ea4 <XMC_DMA_CH_SetEventHandler+0x2c>
#if defined(GPDMA1)
  }
  else
  {
    dma1_event_handlers[channel] = event_handler;
 8003e9a:	7afb      	ldrb	r3, [r7, #11]
 8003e9c:	4906      	ldr	r1, [pc, #24]	; (8003eb8 <XMC_DMA_CH_SetEventHandler+0x40>)
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
#endif
}
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	50014000 	.word	0x50014000
 8003eb4:	1fff43a4 	.word	0x1fff43a4
 8003eb8:	1fff43c4 	.word	0x1fff43c4

08003ebc <XMC_DMA_IRQHandler>:
  XMC_DMA_ClearRequestLine(dma, (uint8_t)line);
}

/* Default DMA IRQ handler */
void XMC_DMA_IRQHandler(XMC_DMA_t *const dma)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t mask;
  XMC_DMA_CH_EVENT_HANDLER_t *dma_event_handlers;
  XMC_DMA_CH_EVENT_HANDLER_t event_handler;

#if defined(GPDMA1)
  if (dma == XMC_DMA0)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a82      	ldr	r2, [pc, #520]	; (80040d0 <XMC_DMA_IRQHandler+0x214>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d102      	bne.n	8003ed2 <XMC_DMA_IRQHandler+0x16>
  {
#endif
    dma_event_handlers = dma0_event_handlers;
 8003ecc:	4b81      	ldr	r3, [pc, #516]	; (80040d4 <XMC_DMA_IRQHandler+0x218>)
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e001      	b.n	8003ed6 <XMC_DMA_IRQHandler+0x1a>
#if defined(GPDMA1)
  }
  else
  {
    dma_event_handlers = dma1_event_handlers;
 8003ed2:	4b81      	ldr	r3, [pc, #516]	; (80040d8 <XMC_DMA_IRQHandler+0x21c>)
 8003ed4:	61bb      	str	r3, [r7, #24]
  }
#endif

  event = XMC_DMA_GetEventStatus(dma);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7ff fc22 	bl	8003720 <XMC_DMA_GetEventStatus>
 8003edc:	6178      	str	r0, [r7, #20]
  channel = 0;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	61fb      	str	r3, [r7, #28]

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	f003 0310 	and.w	r3, r3, #16
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d02b      	beq.n	8003f44 <XMC_DMA_IRQHandler+0x88>
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fc5d 	bl	80037ac <XMC_DMA_GetChannelsErrorStatus>
 8003ef2:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003ef4:	e021      	b.n	8003f3a <XMC_DMA_IRQHandler+0x7e>
    {
      mask = (uint32_t)1U << channel;
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	fa02 f303 	lsl.w	r3, r2, r3
 8003efe:	613b      	str	r3, [r7, #16]
      if ((event & mask) != 0)
 8003f00:	697a      	ldr	r2, [r7, #20]
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	4013      	ands	r3, r2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d014      	beq.n	8003f34 <XMC_DMA_IRQHandler+0x78>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_ERROR);
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	4619      	mov	r1, r3
 8003f12:	2210      	movs	r2, #16
 8003f14:	f7ff ff8a 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	009b      	lsls	r3, r3, #2
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4413      	add	r3, r2
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <XMC_DMA_IRQHandler+0x76>
        {
          event_handler(XMC_DMA_CH_EVENT_ERROR);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2010      	movs	r0, #16
 8003f2e:	4798      	blx	r3
        }

        break;
 8003f30:	e007      	b.n	8003f42 <XMC_DMA_IRQHandler+0x86>
 8003f32:	e006      	b.n	8003f42 <XMC_DMA_IRQHandler+0x86>
      }
      ++channel;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	3301      	adds	r3, #1
 8003f38:	61fb      	str	r3, [r7, #28]
  channel = 0;

  if ((event & (uint32_t)XMC_DMA_CH_EVENT_ERROR) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsErrorStatus(dma);
    while (event != 0)
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1da      	bne.n	8003ef6 <XMC_DMA_IRQHandler+0x3a>
 8003f40:	e0c3      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
 8003f42:	e0c2      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8003f44:	697b      	ldr	r3, [r7, #20]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d02b      	beq.n	8003fa6 <XMC_DMA_IRQHandler+0xea>
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7ff fbf4 	bl	800373c <XMC_DMA_GetChannelsTransferCompleteStatus>
 8003f54:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003f56:	e021      	b.n	8003f9c <XMC_DMA_IRQHandler+0xe0>
    {
      mask = (uint32_t)1U << channel;
 8003f58:	2201      	movs	r2, #1
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f60:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003f62:	697a      	ldr	r2, [r7, #20]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4013      	ands	r3, r2
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d014      	beq.n	8003f96 <XMC_DMA_IRQHandler+0xda>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE |
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4619      	mov	r1, r3
 8003f74:	220f      	movs	r2, #15
 8003f76:	f7ff ff59 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4413      	add	r3, r2
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <XMC_DMA_IRQHandler+0xd8>
        {
          event_handler(XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2001      	movs	r0, #1
 8003f90:	4798      	blx	r3
        }

        break;
 8003f92:	e007      	b.n	8003fa4 <XMC_DMA_IRQHandler+0xe8>
 8003f94:	e006      	b.n	8003fa4 <XMC_DMA_IRQHandler+0xe8>
      }
      ++channel;
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	3301      	adds	r3, #1
 8003f9a:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsTransferCompleteStatus(dma);
    while (event != 0)
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1da      	bne.n	8003f58 <XMC_DMA_IRQHandler+0x9c>
 8003fa2:	e092      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
 8003fa4:	e091      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d02b      	beq.n	8004008 <XMC_DMA_IRQHandler+0x14c>
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fbd1 	bl	8003758 <XMC_DMA_GetChannelsBlockCompleteStatus>
 8003fb6:	6178      	str	r0, [r7, #20]
    while (event != 0)
 8003fb8:	e021      	b.n	8003ffe <XMC_DMA_IRQHandler+0x142>
    {
      mask = (uint32_t)1U << channel;
 8003fba:	2201      	movs	r2, #1
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc2:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8003fc4:	697a      	ldr	r2, [r7, #20]
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	4013      	ands	r3, r2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d014      	beq.n	8003ff8 <XMC_DMA_IRQHandler+0x13c>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)((uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE |
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	220e      	movs	r2, #14
 8003fd8:	f7ff ff28 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>
                                    (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE |
                                    (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE));

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <XMC_DMA_IRQHandler+0x13a>
        {
          event_handler(XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2002      	movs	r0, #2
 8003ff2:	4798      	blx	r3
        }

        break;
 8003ff4:	e007      	b.n	8004006 <XMC_DMA_IRQHandler+0x14a>
 8003ff6:	e006      	b.n	8004006 <XMC_DMA_IRQHandler+0x14a>
      }
      ++channel;
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_BLOCK_TRANSFER_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsBlockCompleteStatus(dma);
    while (event != 0)
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1da      	bne.n	8003fba <XMC_DMA_IRQHandler+0xfe>
 8004004:	e061      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
 8004006:	e060      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0304 	and.w	r3, r3, #4
 800400e:	2b00      	cmp	r3, #0
 8004010:	d02b      	beq.n	800406a <XMC_DMA_IRQHandler+0x1ae>
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff fbae 	bl	8003774 <XMC_DMA_GetChannelsSourceTransactionCompleteStatus>
 8004018:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800401a:	e021      	b.n	8004060 <XMC_DMA_IRQHandler+0x1a4>
    {
      mask = (uint32_t)1U << channel;
 800401c:	2201      	movs	r2, #1
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4013      	ands	r3, r2
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <XMC_DMA_IRQHandler+0x19e>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	b2db      	uxtb	r3, r3
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	4619      	mov	r1, r3
 8004038:	2204      	movs	r2, #4
 800403a:	f7ff fef7 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4413      	add	r3, r2
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <XMC_DMA_IRQHandler+0x19c>
        {
          event_handler(XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2004      	movs	r0, #4
 8004054:	4798      	blx	r3
        }

        break;
 8004056:	e007      	b.n	8004068 <XMC_DMA_IRQHandler+0x1ac>
 8004058:	e006      	b.n	8004068 <XMC_DMA_IRQHandler+0x1ac>
      }
      ++channel;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3301      	adds	r3, #1
 800405e:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_SRC_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsSourceTransactionCompleteStatus(dma);
    while (event != 0)
 8004060:	697b      	ldr	r3, [r7, #20]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1da      	bne.n	800401c <XMC_DMA_IRQHandler+0x160>
 8004066:	e030      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
 8004068:	e02f      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
        break;
      }
      ++channel;
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	f003 0308 	and.w	r3, r3, #8
 8004070:	2b00      	cmp	r3, #0
 8004072:	d02a      	beq.n	80040ca <XMC_DMA_IRQHandler+0x20e>
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
 8004074:	6878      	ldr	r0, [r7, #4]
 8004076:	f7ff fb8b 	bl	8003790 <XMC_DMA_GetChannelsDestinationTransactionCompleteStatus>
 800407a:	6178      	str	r0, [r7, #20]
    while (event != 0)
 800407c:	e021      	b.n	80040c2 <XMC_DMA_IRQHandler+0x206>
    {
      mask = (uint32_t)1U << channel;
 800407e:	2201      	movs	r2, #1
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	fa02 f303 	lsl.w	r3, r2, r3
 8004086:	613b      	str	r3, [r7, #16]
      if (event & mask)
 8004088:	697a      	ldr	r2, [r7, #20]
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d014      	beq.n	80040bc <XMC_DMA_IRQHandler+0x200>
      {
        XMC_DMA_CH_ClearEventStatus(dma, (uint8_t)channel, (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	b2db      	uxtb	r3, r3
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	4619      	mov	r1, r3
 800409a:	2208      	movs	r2, #8
 800409c:	f7ff fec6 	bl	8003e2c <XMC_DMA_CH_ClearEventStatus>

        /* Call user callback to handle event */
        event_handler = dma_event_handlers[channel];
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4413      	add	r3, r2
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	60fb      	str	r3, [r7, #12]
        if (event_handler != NULL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d003      	beq.n	80040ba <XMC_DMA_IRQHandler+0x1fe>
        {
          event_handler(XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2008      	movs	r0, #8
 80040b6:	4798      	blx	r3
        }

        break;
 80040b8:	e007      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
 80040ba:	e006      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
      }
      ++channel;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	3301      	adds	r3, #1
 80040c0:	61fb      	str	r3, [r7, #28]
    }
  }
  else if ((event & (uint32_t)XMC_DMA_CH_EVENT_DST_TRANSACTION_COMPLETE) != (uint32_t)0UL)
  {
    event = XMC_DMA_GetChannelsDestinationTransactionCompleteStatus(dma);
    while (event != 0)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1da      	bne.n	800407e <XMC_DMA_IRQHandler+0x1c2>
 80040c8:	e7ff      	b.n	80040ca <XMC_DMA_IRQHandler+0x20e>
  else
  {
    /* no active interrupt was found? */
  }

}
 80040ca:	3720      	adds	r7, #32
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	50014000 	.word	0x50014000
 80040d4:	1fff43a4 	.word	0x1fff43a4
 80040d8:	1fff43c4 	.word	0x1fff43c4

080040dc <XMC_GPIO_SetMode>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_GPIO_SetMode(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_MODE_t mode)
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	70fb      	strb	r3, [r7, #3]
 80040e8:	4613      	mov	r3, r2
 80040ea:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetMode: Invalid mode", XMC_GPIO_IsModeValid(mode));

  port->IOCR[(uint32_t)pin >> 2U] &= ~(uint32_t)((uint32_t)PORT_IOCR_PC_Msk << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U)));
 80040ec:	78fb      	ldrb	r3, [r7, #3]
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4618      	mov	r0, r3
 80040f4:	78fb      	ldrb	r3, [r7, #3]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	3204      	adds	r2, #4
 8004100:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004104:	78fb      	ldrb	r3, [r7, #3]
 8004106:	f003 0303 	and.w	r3, r3, #3
 800410a:	00db      	lsls	r3, r3, #3
 800410c:	4619      	mov	r1, r3
 800410e:	23f8      	movs	r3, #248	; 0xf8
 8004110:	408b      	lsls	r3, r1
 8004112:	43db      	mvns	r3, r3
 8004114:	ea02 0103 	and.w	r1, r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	1d02      	adds	r2, r0, #4
 800411c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  port->IOCR[(uint32_t)pin >> 2U] |= (uint32_t)mode << ((uint32_t)PORT_IOCR_PC_Size * ((uint32_t)pin & 0x3U));
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	089b      	lsrs	r3, r3, #2
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4618      	mov	r0, r3
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	089b      	lsrs	r3, r3, #2
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3204      	adds	r2, #4
 8004134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004138:	78bb      	ldrb	r3, [r7, #2]
 800413a:	78f9      	ldrb	r1, [r7, #3]
 800413c:	f001 0103 	and.w	r1, r1, #3
 8004140:	00c9      	lsls	r1, r1, #3
 8004142:	408b      	lsls	r3, r1
 8004144:	ea42 0103 	orr.w	r1, r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	1d02      	adds	r2, r0, #4
 800414c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8004150:	370c      	adds	r7, #12
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop

0800415c <XMC_GPIO_SetHardwareControl>:

void XMC_GPIO_SetHardwareControl(XMC_GPIO_PORT_t *const port, const uint8_t pin, const XMC_GPIO_HWCTRL_t hwctrl)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
 8004168:	4613      	mov	r3, r2
 800416a:	70bb      	strb	r3, [r7, #2]
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid port", XMC_GPIO_CHECK_PORT(port));
  XMC_ASSERT("XMC_GPIO_SetHardwareControl: Invalid hwctrl", XMC_GPIO_CHECK_HWCTRL(hwctrl));

  port->HWSEL &= ~(uint32_t)((uint32_t)PORT_HWSEL_Msk << ((uint32_t)pin << 1U));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	4619      	mov	r1, r3
 8004176:	2303      	movs	r3, #3
 8004178:	408b      	lsls	r3, r1
 800417a:	43db      	mvns	r3, r3
 800417c:	401a      	ands	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	675a      	str	r2, [r3, #116]	; 0x74
  port->HWSEL |= (uint32_t)hwctrl << ((uint32_t)pin << 1U);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004186:	78bb      	ldrb	r3, [r7, #2]
 8004188:	78f9      	ldrb	r1, [r7, #3]
 800418a:	0049      	lsls	r1, r1, #1
 800418c:	408b      	lsls	r3, r1
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop

080041a0 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ac:	b2db      	uxtb	r3, r3
 80041ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80041b2:	b2db      	uxtb	r3, r3
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	431a      	orrs	r2, r3
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <XMC_I2C_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/
/* Initializes the USIC channel by setting the data format, slave address, baudrate, transfer buffer */
void XMC_I2C_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config, bool init_brg)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	4613      	mov	r3, r2
 80041ec:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 80041ee:	68f8      	ldr	r0, [r7, #12]
 80041f0:	f000 fbb0 	bl	8004954 <XMC_USIC_CH_Enable>

  /* Data format configuration */
  channel->SCTR = ((uint32_t)TRANSMISSION_MODE << (uint32_t)USIC_CH_SCTR_TRM_Pos) | /* Transmision mode */
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4a11      	ldr	r2, [pc, #68]	; (800423c <XMC_I2C_CH_InitEx+0x5c>)
 80041f8:	635a      	str	r2, [r3, #52]	; 0x34
                  ((uint32_t)WORDLENGTH << (uint32_t)USIC_CH_SCTR_WLE_Pos) | /* 8 data bits */
                  USIC_CH_SCTR_FLE_Msk |           /* unlimited data flow */
                  USIC_CH_SCTR_SDIR_Msk |          /* MSB shifted first */
                  USIC_CH_SCTR_PDL_Msk;            /* Passive Data Level */

  XMC_I2C_CH_SetSlaveAddress(channel, config->address);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	88db      	ldrh	r3, [r3, #6]
 80041fe:	68f8      	ldr	r0, [r7, #12]
 8004200:	4619      	mov	r1, r3
 8004202:	f000 f81d 	bl	8004240 <XMC_I2C_CH_SetSlaveAddress>

  if (init_brg)
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <XMC_I2C_CH_InitEx+0x3e>
  {
    (void)XMC_I2C_CH_SetBaudrateEx(channel, config->baudrate, config->normal_divider_mode);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	791b      	ldrb	r3, [r3, #4]
 8004214:	68f8      	ldr	r0, [r7, #12]
 8004216:	4611      	mov	r1, r2
 8004218:	461a      	mov	r2, r3
 800421a:	f000 f83b 	bl	8004294 <XMC_I2C_CH_SetBaudrateEx>
  }


  /* Enable transfer buffer */
  channel->TCSR = ((uint32_t)SET_TDV << (uint32_t)USIC_CH_TCSR_TDEN_Pos) | USIC_CH_TCSR_TDSSM_Msk;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8004224:	639a      	str	r2, [r3, #56]	; 0x38

  /* Clear status flags */
  channel->PSCR = 0xFFFFFFFFU;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	f04f 32ff 	mov.w	r2, #4294967295
 800422c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Disable parity generation */
  channel->CCR = 0x0U;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2200      	movs	r2, #0
 8004232:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004234:	3710      	adds	r7, #16
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	073f0303 	.word	0x073f0303

08004240 <XMC_I2C_CH_SetSlaveAddress>:

/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	460b      	mov	r3, r1
 800424a:	807b      	strh	r3, [r7, #2]
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
 800424c:	887b      	ldrh	r3, [r7, #2]
 800424e:	f403 43f8 	and.w	r3, r3, #31744	; 0x7c00
 8004252:	f5b3 4ff0 	cmp.w	r3, #30720	; 0x7800
 8004256:	d10e      	bne.n	8004276 <XMC_I2C_CH_SetSlaveAddress+0x36>
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	887a      	ldrh	r2, [r7, #2]
 8004262:	b2d2      	uxtb	r2, r2
 8004264:	431a      	orrs	r2, r3
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
 8004266:	887b      	ldrh	r3, [r7, #2]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	f403 437e 	and.w	r3, r3, #65024	; 0xfe00
 800426e:	431a      	orrs	r2, r3
/* Sets the slave address */
void XMC_I2C_CH_SetSlaveAddress(XMC_USIC_CH_t *const channel, const uint16_t address)
{
  if ((address & XMC_I2C_10BIT_ADDR_MASK) == XMC_I2C_10BIT_ADDR_GROUP)
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	63da      	str	r2, [r3, #60]	; 0x3c
 8004274:	e008      	b.n	8004288 <XMC_I2C_CH_SetSlaveAddress+0x48>
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	041b      	lsls	r3, r3, #16
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
 800427e:	887a      	ldrh	r2, [r7, #2]
 8004280:	0212      	lsls	r2, r2, #8
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
                           (address & 0x00ffU) | ((address << 1) & 0xfe00U);
  }
  else
  {
    channel->PCR_IICMode = (channel->PCR_IICMode & (uint32_t)~USIC_CH_PCR_IICMode_SLAD_Msk) |
 8004282:	431a      	orrs	r2, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	63da      	str	r2, [r3, #60]	; 0x3c
                           ((uint32_t)address) << XMC_I2C_7BIT_ADDR_Pos;
  }
}
 8004288:	370c      	adds	r7, #12
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop

08004294 <XMC_I2C_CH_SetBaudrateEx>:
  return status;
}

/* Sets the baudrate and oversampling based on standard speed or fast speed */
XMC_I2C_CH_STATUS_t XMC_I2C_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, uint32_t rate, bool normal_divider_mode)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	4613      	mov	r3, r2
 80042a0:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_STATUS_t status;

  if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_STANDARD)
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	4a20      	ldr	r2, [pc, #128]	; (8004328 <XMC_I2C_CH_SetBaudrateEx+0x94>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d819      	bhi.n	80042de <XMC_I2C_CH_SetBaudrateEx+0x4a>
  {
    channel->PCR_IICMode &= (uint32_t)~USIC_CH_PCR_IICMode_STIM_Msk;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d008      	beq.n	80042ce <XMC_I2C_CH_SetBaudrateEx+0x3a>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	68f8      	ldr	r0, [r7, #12]
 80042c0:	4619      	mov	r1, r3
 80042c2:	220a      	movs	r2, #10
 80042c4:	f000 fc04 	bl	8004ad0 <XMC_USIC_CH_SetBaudrateEx>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]
 80042cc:	e027      	b.n	800431e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_STANDARD);
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	68b9      	ldr	r1, [r7, #8]
 80042d2:	220a      	movs	r2, #10
 80042d4:	f000 fb8a 	bl	80049ec <XMC_USIC_CH_SetBaudrate>
 80042d8:	4603      	mov	r3, r0
 80042da:	75fb      	strb	r3, [r7, #23]
 80042dc:	e01f      	b.n	800431e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else if (rate <= (uint32_t)XMC_I2C_CH_MAX_SPEED_FAST)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4a12      	ldr	r2, [pc, #72]	; (800432c <XMC_I2C_CH_SetBaudrateEx+0x98>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d819      	bhi.n	800431a <XMC_I2C_CH_SetBaudrateEx+0x86>
  {
    channel->PCR_IICMode |= (uint32_t)USIC_CH_PCR_IICMode_STIM_Msk;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ea:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c
    if (normal_divider_mode)
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d008      	beq.n	800430a <XMC_I2C_CH_SetBaudrateEx+0x76>
    {
      status = XMC_USIC_CH_SetBaudrateEx(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	68f8      	ldr	r0, [r7, #12]
 80042fc:	4619      	mov	r1, r3
 80042fe:	2219      	movs	r2, #25
 8004300:	f000 fbe6 	bl	8004ad0 <XMC_USIC_CH_SetBaudrateEx>
 8004304:	4603      	mov	r3, r0
 8004306:	75fb      	strb	r3, [r7, #23]
 8004308:	e009      	b.n	800431e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
    else
    {
      /* Fractional divider mode */
      status = XMC_USIC_CH_SetBaudrate(channel, rate, (uint32_t)XMC_I2C_CH_CLOCK_OVERSAMPLING_FAST);
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	68b9      	ldr	r1, [r7, #8]
 800430e:	2219      	movs	r2, #25
 8004310:	f000 fb6c 	bl	80049ec <XMC_USIC_CH_SetBaudrate>
 8004314:	4603      	mov	r3, r0
 8004316:	75fb      	strb	r3, [r7, #23]
 8004318:	e001      	b.n	800431e <XMC_I2C_CH_SetBaudrateEx+0x8a>
    }
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	75fb      	strb	r3, [r7, #23]
  }

  return (XMC_I2C_CH_STATUS_t)status;
 800431e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004320:	4618      	mov	r0, r3
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	000186a0 	.word	0x000186a0
 800432c:	00061a80 	.word	0x00061a80

08004330 <XMC_I2C_CH_MasterStart>:

/* Sends master start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	460b      	mov	r3, r1
 800433a:	807b      	strh	r3, [r7, #2]
 800433c:	4613      	mov	r3, r2
 800433e:	707b      	strb	r3, [r7, #1]
  uint32_t temp;

  temp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_START;
 8004340:	887b      	ldrh	r3, [r7, #2]
 8004342:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004346:	b29b      	uxth	r3, r3
 8004348:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 800434a:	787b      	ldrb	r3, [r7, #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	d103      	bne.n	8004358 <XMC_I2C_CH_MasterStart+0x28>
  {
    temp |= 0x1U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f043 0301 	orr.w	r3, r3, #1
 8004356:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800435e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d110      	bne.n	8004388 <XMC_I2C_CH_MasterStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004366:	bf00      	nop
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff19 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800436e:	4603      	mov	r3, r0
 8004370:	2b80      	cmp	r3, #128	; 0x80
 8004372:	d0f9      	beq.n	8004368 <XMC_I2C_CH_MasterStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800437a:	f7ff ff21 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = temp;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004386:	e003      	b.n	8004390 <XMC_I2C_CH_MasterStart+0x60>
  }
  else
  {
    channel->IN[0U] = temp;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop

08004398 <XMC_I2C_CH_MasterRepeatedStart>:
/* Sends master repeated start condition along with read/write command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterRepeatedStart(XMC_USIC_CH_t *const channel, const uint16_t addr, const XMC_I2C_CH_CMD_t command)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	807b      	strh	r3, [r7, #2]
 80043a4:	4613      	mov	r3, r2
 80043a6:	707b      	strb	r3, [r7, #1]
  uint32_t tmp;
  tmp = addr | (uint32_t)XMC_I2C_CH_TDF_MASTER_RESTART;
 80043a8:	887b      	ldrh	r3, [r7, #2]
 80043aa:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 80043ae:	b29b      	uxth	r3, r3
 80043b0:	60fb      	str	r3, [r7, #12]
  if (command == XMC_I2C_CH_CMD_READ)
 80043b2:	787b      	ldrb	r3, [r7, #1]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d103      	bne.n	80043c0 <XMC_I2C_CH_MasterRepeatedStart+0x28>
  {
    tmp |= 0x1U;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f043 0301 	orr.w	r3, r3, #1
 80043be:	60fb      	str	r3, [r7, #12]
  }

  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80043c6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d110      	bne.n	80043f0 <XMC_I2C_CH_MasterRepeatedStart+0x58>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80043ce:	bf00      	nop
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff fee5 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b80      	cmp	r3, #128	; 0x80
 80043da:	d0f9      	beq.n	80043d0 <XMC_I2C_CH_MasterRepeatedStart+0x38>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80043e2:	f7ff feed 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = tmp;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80043ee:	e003      	b.n	80043f8 <XMC_I2C_CH_MasterRepeatedStart+0x60>
  }
  else
  {
    channel->IN[0U] = tmp;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80043f8:	3710      	adds	r7, #16
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop

08004400 <XMC_I2C_CH_MasterStop>:

/* Sends master stop command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterStop(XMC_USIC_CH_t *const channel)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800440e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d111      	bne.n	800443a <XMC_I2C_CH_MasterStop+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004416:	bf00      	nop
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7ff fec1 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800441e:	4603      	mov	r3, r0
 8004420:	2b80      	cmp	r3, #128	; 0x80
 8004422:	d0f9      	beq.n	8004418 <XMC_I2C_CH_MasterStop+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004424:	6878      	ldr	r0, [r7, #4]
 8004426:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800442a:	f7ff fec9 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004438:	e004      	b.n	8004444 <XMC_I2C_CH_MasterStop+0x44>
  }
  else
  {
    channel->IN[0U] = (uint32_t)XMC_I2C_CH_TDF_MASTER_STOP;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004440:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop

0800444c <XMC_I2C_CH_MasterTransmit>:

/* Sends master send command along with data to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterTransmit(XMC_USIC_CH_t *const channel, const uint8_t data)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b082      	sub	sp, #8
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800445e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d110      	bne.n	8004488 <XMC_I2C_CH_MasterTransmit+0x3c>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 8004466:	bf00      	nop
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f7ff fe99 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 800446e:	4603      	mov	r3, r0
 8004470:	2b80      	cmp	r3, #128	; 0x80
 8004472:	d0f9      	beq.n	8004468 <XMC_I2C_CH_MasterTransmit+0x1c>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800447a:	f7ff fea1 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 800447e:	78fa      	ldrb	r2, [r7, #3]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8004486:	e003      	b.n	8004490 <XMC_I2C_CH_MasterTransmit+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_SEND | data;
 8004488:	78fa      	ldrb	r2, [r7, #3]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004490:	3708      	adds	r7, #8
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
 8004496:	bf00      	nop

08004498 <XMC_I2C_CH_MasterReceiveAck>:
  }
}

/* Sends master receive ack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveAck(XMC_USIC_CH_t *const channel)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044a6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d111      	bne.n	80044d2 <XMC_I2C_CH_MasterReceiveAck+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80044ae:	bf00      	nop
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f7ff fe75 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 80044b6:	4603      	mov	r3, r0
 80044b8:	2b80      	cmp	r3, #128	; 0x80
 80044ba:	d0f9      	beq.n	80044b0 <XMC_I2C_CH_MasterReceiveAck+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80044c2:	f7ff fe7d 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 80044d0:	e004      	b.n	80044dc <XMC_I2C_CH_MasterReceiveAck+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_ACK;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044d8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
 80044e2:	bf00      	nop

080044e4 <XMC_I2C_CH_MasterReceiveNack>:

/* Sends master receive nack command to IN/TBUF register based on FIFO/non-FIFO modes. */
void XMC_I2C_CH_MasterReceiveNack(XMC_USIC_CH_t *const channel)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	b082      	sub	sp, #8
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80044f2:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d111      	bne.n	800451e <XMC_I2C_CH_MasterReceiveNack+0x3a>
  {
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80044fa:	bf00      	nop
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f7ff fe4f 	bl	80041a0 <XMC_USIC_CH_GetTransmitBufferStatus>
 8004502:	4603      	mov	r3, r0
 8004504:	2b80      	cmp	r3, #128	; 0x80
 8004506:	d0f9      	beq.n	80044fc <XMC_I2C_CH_MasterReceiveNack+0x18>
    {
      /* check TDV, wait until TBUF is ready */
    }

    /* clear PSR_TBIF */
    XMC_I2C_CH_ClearStatusFlag(channel, (uint32_t)XMC_I2C_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800450e:	f7ff fe57 	bl	80041c0 <XMC_I2C_CH_ClearStatusFlag>

    channel->TBUF[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004518:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800451c:	e004      	b.n	8004528 <XMC_I2C_CH_MasterReceiveNack+0x44>
  }
  else
  {
    channel->IN[0] = (uint32_t)XMC_I2C_CH_TDF_MASTER_RECEIVE_NACK;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004524:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop

08004530 <XMC_I2C_CH_GetReceivedData>:

/* Reads the data from RBUF if FIFO size is 0 otherwise from OUTR. */
uint8_t XMC_I2C_CH_GetReceivedData(const XMC_USIC_CH_t *const channel)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint8_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800453e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <XMC_I2C_CH_GetReceivedData+0x1e>
  {
    retval = (uint8_t)channel->RBUF;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	73fb      	strb	r3, [r7, #15]
 800454c:	e003      	b.n	8004556 <XMC_I2C_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint8_t)channel->OUTR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004554:	73fb      	strb	r3, [r7, #15]
  }

  return retval;
 8004556:	7bfb      	ldrb	r3, [r7, #15]
}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <XMC_SCU_GetMirrorStatus>:
 * that a corresponding register of the hibernate domain is ready to accept a write or that the communication interface
 * is busy with executing the previous operation.\n
 * Note: There is no hibernate domain in XMC1x devices. This register is retained for legacy purpose.
 */
__STATIC_INLINE uint32_t XMC_SCU_GetMirrorStatus(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return (SCU_GENERAL->MIRRSTS);
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <XMC_SCU_GetMirrorStatus+0x14>)
 800456a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
}
 800456e:	4618      	mov	r0, r3
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	50004000 	.word	0x50004000

0800457c <XMC_RTC_Start>:

/*
 * Enables RTC peripheral to start counting time
 */
void XMC_RTC_Start(void)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 8004580:	bf00      	nop
 8004582:	f7ff ffef 	bl	8004564 <XMC_SCU_GetMirrorStatus>
 8004586:	4603      	mov	r3, r0
 8004588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458c:	2b00      	cmp	r3, #0
 800458e:	d1f8      	bne.n	8004582 <XMC_RTC_Start+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR |= (uint32_t)RTC_CTR_ENB_Msk;
 8004590:	4a03      	ldr	r2, [pc, #12]	; (80045a0 <XMC_RTC_Start+0x24>)
 8004592:	4b03      	ldr	r3, [pc, #12]	; (80045a0 <XMC_RTC_Start+0x24>)
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f043 0301 	orr.w	r3, r3, #1
 800459a:	6053      	str	r3, [r2, #4]
}
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	50004a00 	.word	0x50004a00

080045a4 <XMC_RTC_Stop>:

/*
 * Disables RTC peripheral to start counting time
 */
void XMC_RTC_Stop(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80045a8:	bf00      	nop
 80045aa:	f7ff ffdb 	bl	8004564 <XMC_SCU_GetMirrorStatus>
 80045ae:	4603      	mov	r3, r0
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1f8      	bne.n	80045aa <XMC_RTC_Stop+0x6>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR &= ~(uint32_t)RTC_CTR_ENB_Msk;
 80045b8:	4a03      	ldr	r2, [pc, #12]	; (80045c8 <XMC_RTC_Stop+0x24>)
 80045ba:	4b03      	ldr	r3, [pc, #12]	; (80045c8 <XMC_RTC_Stop+0x24>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f023 0301 	bic.w	r3, r3, #1
 80045c2:	6053      	str	r3, [r2, #4]
}
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	50004a00 	.word	0x50004a00

080045cc <XMC_RTC_SetPrescaler>:

/*
 * Sets the RTC module prescaler value
 */
void XMC_RTC_SetPrescaler(uint16_t prescaler)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	80fb      	strh	r3, [r7, #6]
  XMC_ASSERT("XMC_RTC_SetPrescaler:Wrong prescaler value", (prescaler < XMC_RTC_MAXPRESCALER));

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
 80045d6:	bf00      	nop
 80045d8:	f7ff ffc4 	bl	8004564 <XMC_SCU_GetMirrorStatus>
 80045dc:	4603      	mov	r3, r0
 80045de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1f8      	bne.n	80045d8 <XMC_RTC_SetPrescaler+0xc>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80045e6:	4905      	ldr	r1, [pc, #20]	; (80045fc <XMC_RTC_SetPrescaler+0x30>)
 80045e8:	4b04      	ldr	r3, [pc, #16]	; (80045fc <XMC_RTC_SetPrescaler+0x30>)
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	b29a      	uxth	r2, r3
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
 80045ee:	88fb      	ldrh	r3, [r7, #6]
 80045f0:	041b      	lsls	r3, r3, #16

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_CTR_Msk) != 0U)
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->CTR = (RTC->CTR & ~(uint32_t)RTC_CTR_DIV_Msk) |
 80045f2:	4313      	orrs	r3, r2
 80045f4:	604b      	str	r3, [r1, #4]
             ((uint32_t)prescaler << (uint32_t)RTC_CTR_DIV_Pos);
}
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}
 80045fc:	50004a00 	.word	0x50004a00

08004600 <XMC_RTC_SetTime>:

/*
 * Sets the RTC_TIM0, RTC_TIM1 registers with time values
 */
void XMC_RTC_SetTime(const XMC_RTC_TIME_t *const time)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b082      	sub	sp, #8
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_RTC_SetTime:Wrong week day value", ((uint32_t)time->daysofweek < XMC_RTC_MAXDAYSOFWEEK));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong month value", ((uint32_t)time->month < XMC_RTC_MAXMONTH));
  XMC_ASSERT("XMC_RTC_SetTime:Wrong year value", ((uint32_t)time->year < XMC_RTC_MAXYEAR));

#if (XMC_RTC_INIT_SEQUENCE == 1U)
  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM0_Msk) != 0U)
 8004608:	bf00      	nop
 800460a:	f7ff ffab 	bl	8004564 <XMC_SCU_GetMirrorStatus>
 800460e:	4603      	mov	r3, r0
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1f8      	bne.n	800460a <XMC_RTC_SetTime+0xa>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
 8004618:	4a09      	ldr	r2, [pc, #36]	; (8004640 <XMC_RTC_SetTime+0x40>)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6213      	str	r3, [r2, #32]

  while ((XMC_SCU_GetMirrorStatus() & SCU_GENERAL_MIRRSTS_RTC_TIM1_Msk) != 0U)
 8004620:	bf00      	nop
 8004622:	f7ff ff9f 	bl	8004564 <XMC_SCU_GetMirrorStatus>
 8004626:	4603      	mov	r3, r0
 8004628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1f8      	bne.n	8004622 <XMC_RTC_SetTime+0x22>
  {
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM1 = time->raw1;
 8004630:	4a03      	ldr	r2, [pc, #12]	; (8004640 <XMC_RTC_SetTime+0x40>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	6253      	str	r3, [r2, #36]	; 0x24
    /* check SCU_MIRRSTS to ensure that no transfer over serial interface is pending */
  }
  RTC->TIM0 = time->raw0;
  RTC->TIM1 = time->raw1;	;
#endif
}
 8004638:	3708      	adds	r7, #8
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	50004a00 	.word	0x50004a00

08004644 <XMC_RTC_GetTime>:

/*
 * Gets the RTC module time value
 */
void XMC_RTC_GetTime(XMC_RTC_TIME_t *const time)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  time->raw0 = RTC->TIM0;
 800464c:	4b06      	ldr	r3, [pc, #24]	; (8004668 <XMC_RTC_GetTime+0x24>)
 800464e:	6a1a      	ldr	r2, [r3, #32]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	601a      	str	r2, [r3, #0]
  time->raw1 = RTC->TIM1;
 8004654:	4b04      	ldr	r3, [pc, #16]	; (8004668 <XMC_RTC_GetTime+0x24>)
 8004656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	605a      	str	r2, [r3, #4]
}
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	50004a00 	.word	0x50004a00

0800466c <XMC_SPI_CH_InitEx>:
 * API IMPLEMENTATION
 ********************************************************************************************************************/

/* Initializes the selected SPI channel with the config structure. */
void XMC_SPI_CH_InitEx(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config, bool init_brg)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b084      	sub	sp, #16
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	4613      	mov	r3, r2
 8004678:	71fb      	strb	r3, [r7, #7]
  XMC_USIC_CH_Enable(channel);
 800467a:	68f8      	ldr	r0, [r7, #12]
 800467c:	f000 f96a 	bl	8004954 <XMC_USIC_CH_Enable>

  if ((config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER) && init_brg)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	795b      	ldrb	r3, [r3, #5]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d115      	bne.n	80046b4 <XMC_SPI_CH_InitEx+0x48>
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d012      	beq.n	80046b4 <XMC_SPI_CH_InitEx+0x48>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	791b      	ldrb	r3, [r3, #4]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <XMC_SPI_CH_InitEx+0x3a>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	4619      	mov	r1, r3
 800469e:	2202      	movs	r2, #2
 80046a0:	f000 fa16 	bl	8004ad0 <XMC_USIC_CH_SetBaudrateEx>
 80046a4:	e006      	b.n	80046b4 <XMC_SPI_CH_InitEx+0x48>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, XMC_SPI_CH_OVERSAMPLING);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	4619      	mov	r1, r3
 80046ae:	2202      	movs	r2, #2
 80046b0:	f000 f99c 	bl	80049ec <XMC_USIC_CH_SetBaudrate>
  }

  /* Configuration of USIC Shift Control */
  /* Transmission Mode (TRM) = 1  */
  /* Passive Data Level (PDL) = 1 */
  channel->SCTR = USIC_CH_SCTR_PDL_Msk |
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4a0f      	ldr	r2, [pc, #60]	; (80046f4 <XMC_SPI_CH_InitEx+0x88>)
 80046b8:	635a      	str	r2, [r3, #52]	; 0x34
                  (0x7UL << USIC_CH_SCTR_WLE_Pos);

  /* Configuration of USIC Transmit Control/Status Register */
  /* TBUF Data Enable (TDEN) = 1 */
  /* TBUF Data Single Shot Mode (TDSSM) = 1 */
  channel->TCSR = (uint32_t)(USIC_CH_TCSR_HPCMD_Msk |
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 80046c0:	639a      	str	r2, [r3, #56]	; 0x38
                             (0x01UL  << USIC_CH_TCSR_TDEN_Pos) |
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	795b      	ldrb	r3, [r3, #5]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d107      	bne.n	80046da <XMC_SPI_CH_InitEx+0x6e>
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
                                      USIC_CH_PCR_SSCMode_SELCTR_Msk |
                                      (uint32_t)config->selo_inversion |
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	799b      	ldrb	r3, [r3, #6]
                             USIC_CH_TCSR_TDSSM_Msk);

  if (config->bus_mode == XMC_SPI_CH_BUS_MODE_MASTER)
  {
    /* Configuration of Protocol Control Register */
    channel->PCR_SSCMode = (uint32_t)(USIC_CH_PCR_SSCMode_MSLSEN_Msk |
 80046ce:	f043 030b 	orr.w	r3, r3, #11
 80046d2:	b2db      	uxtb	r3, r3
 80046d4:	461a      	mov	r2, r3
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	63da      	str	r2, [r3, #60]	; 0x3c
                                      (uint32_t)config->selo_inversion |
                                      USIC_CH_PCR_SSCMode_FEM_Msk);
  }

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f04f 32ff 	mov.w	r2, #4294967295
 80046e0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	891b      	ldrh	r3, [r3, #8]
 80046e6:	461a      	mov	r2, r3
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80046ec:	3710      	adds	r7, #16
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	073f0102 	.word	0x073f0102

080046f8 <XMC_SPI_CH_EnableSlaveSelect>:
  return (XMC_SPI_CH_STATUS_t)status;
}

/* Enable the selected slave signal by setting (SELO) bits in PCR register. */
void XMC_SPI_CH_EnableSlaveSelect(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_SLAVE_SELECT_t slave)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
 8004700:	6039      	str	r1, [r7, #0]
  /* Configuration of Protocol Control Register */
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_SELO_Msk;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004706:	f423 027f 	bic.w	r2, r3, #16711680	; 0xff0000
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	63da      	str	r2, [r3, #60]	; 0x3c
  channel->PCR_SSCMode |= (uint32_t)slave;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	431a      	orrs	r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <XMC_SPI_CH_GetReceivedData>:
  }
}

/* Reads the data from the buffers based on the FIFO mode selection. */
uint16_t XMC_SPI_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004732:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <XMC_SPI_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473e:	81fb      	strh	r3, [r7, #14]
 8004740:	e003      	b.n	800474a <XMC_SPI_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004748:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 800474a:	89fb      	ldrh	r3, [r7, #14]
}
 800474c:	4618      	mov	r0, r3
 800474e:	3714      	adds	r7, #20
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <XMC_SPI_CH_EnableEvent>:

  return status;
}

void XMC_SPI_CH_EnableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
 8004760:	6039      	str	r1, [r7, #0]
  channel->CCR |= (event & 0x1fc00U);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 800476c:	431a      	orrs	r2, r3
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode |= ((event << 13U) & 0xe000U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	035b      	lsls	r3, r3, #13
 800477a:	b29b      	uxth	r3, r3
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <XMC_SPI_CH_DisableEvent>:

void XMC_SPI_CH_DisableEvent(XMC_USIC_CH_t *const channel, const uint32_t event)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  channel->CCR &= (uint32_t)~(event & 0x1fc00U);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	f403 33fe 	and.w	r3, r3, #130048	; 0x1fc00
 80047a0:	43db      	mvns	r3, r3
 80047a2:	401a      	ands	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40
  channel->PCR_SSCMode &= (uint32_t)~((event << 13U) & 0xe000U);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	035b      	lsls	r3, r3, #13
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	401a      	ands	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80047d6:	b2db      	uxtb	r3, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e2:	4770      	bx	lr

080047e4 <XMC_UART_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_DisableEvent(),  XMC_UART_CH_GetStatusFlag()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, const uint32_t flag)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  channel->PSCR = flag;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	683a      	ldr	r2, [r7, #0]
 80047f2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <XMC_UART_CH_InitEx>:
/*********************************************************************************************************************
 * API IMPLEMENTATION
 *********************************************************************************************************************/

void XMC_UART_CH_InitEx(XMC_USIC_CH_t *channel, const XMC_UART_CH_CONFIG_t *const config, bool init_brg)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b086      	sub	sp, #24
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	4613      	mov	r3, r2
 800480c:	71fb      	strb	r3, [r7, #7]
  uint32_t oversampling = XMC_UART_CH_OVERSAMPLING;
 800480e:	2310      	movs	r3, #16
 8004810:	617b      	str	r3, [r7, #20]

  /* USIC channel switched on*/
  XMC_USIC_CH_Enable(channel);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f89e 	bl	8004954 <XMC_USIC_CH_Enable>

  if (config->oversampling != 0U)
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	7a1b      	ldrb	r3, [r3, #8]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d002      	beq.n	8004826 <XMC_UART_CH_InitEx+0x26>
  {
    oversampling = (uint32_t)config->oversampling;
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	7a1b      	ldrb	r3, [r3, #8]
 8004824:	617b      	str	r3, [r7, #20]
  }

  if (init_brg)
 8004826:	79fb      	ldrb	r3, [r7, #7]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d014      	beq.n	8004856 <XMC_UART_CH_InitEx+0x56>
  {
    /* Configure baud rate */
    if (config->normal_divider_mode)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	791b      	ldrb	r3, [r3, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d009      	beq.n	8004848 <XMC_UART_CH_InitEx+0x48>
    {
      /* Normal divider mode */
      (void)XMC_USIC_CH_SetBaudrateEx(channel, config->baudrate, oversampling);
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	68f8      	ldr	r0, [r7, #12]
 800483e:	4611      	mov	r1, r2
 8004840:	461a      	mov	r2, r3
 8004842:	f000 f945 	bl	8004ad0 <XMC_USIC_CH_SetBaudrateEx>
 8004846:	e006      	b.n	8004856 <XMC_UART_CH_InitEx+0x56>
    }
    else
    {
      /* Fractional divider mode */
      (void)XMC_USIC_CH_SetBaudrate(channel, config->baudrate, oversampling);
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	4619      	mov	r1, r3
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	f000 f8cb 	bl	80049ec <XMC_USIC_CH_SetBaudrate>
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	79db      	ldrb	r3, [r3, #7]
 800485a:	3b01      	subs	r3, #1
 800485c:	005a      	lsls	r2, r3, #1
                                    (((oversampling >> 1UL) + 1UL) << USIC_CH_PCR_ASCMode_SP_Pos) |
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	085b      	lsrs	r3, r3, #1
 8004862:	3301      	adds	r3, #1
 8004864:	021b      	lsls	r3, r3, #8
   * i.e. the 0 level is signaled during the complete bit time
   * Sampling point set equal to the half of the oversampling period
   * Enable Sample Majority Decision
   * Enable Transfer Status BUSY
   */
  channel->PCR_ASCMode = (uint32_t)(((config->stop_bits - 1UL) << USIC_CH_PCR_ASCMode_STPB_Pos) |
 8004866:	4313      	orrs	r3, r2
 8004868:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800486c:	f043 0301 	orr.w	r3, r3, #1
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	63d3      	str	r3, [r2, #60]	; 0x3c
  /* Set passive data level, high
     Set word length. Data bits - 1
     If frame length is > 0, frame_lemgth-1; else, FLE = WLE (Data bits - 1)
     Transmission Mode: The shift control signal is considered active if it
     is at 1-level. This is the setting to be programmed to allow data transfers */
  channel->SCTR = (uint32_t)((((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_WLE_Pos) |
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	795b      	ldrb	r3, [r3, #5]
 8004878:	3b01      	subs	r3, #1
 800487a:	061b      	lsls	r3, r3, #24
 800487c:	f443 7281 	orr.w	r2, r3, #258	; 0x102
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	635a      	str	r2, [r3, #52]	; 0x34
                             ((0x1UL << USIC_CH_SCTR_TRM_Pos) | USIC_CH_SCTR_PDL_Msk));

  if (config->frame_length != 0U)
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	799b      	ldrb	r3, [r3, #6]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d009      	beq.n	80048a0 <XMC_UART_CH_InitEx+0xa0>
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->frame_length - 1UL) << USIC_CH_SCTR_FLE_Pos);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	799b      	ldrb	r3, [r3, #6]
 8004894:	3b01      	subs	r3, #1
 8004896:	041b      	lsls	r3, r3, #16
 8004898:	431a      	orrs	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	635a      	str	r2, [r3, #52]	; 0x34
 800489e:	e008      	b.n	80048b2 <XMC_UART_CH_InitEx+0xb2>
  }
  else
  {
    channel->SCTR |= (uint32_t)(((uint32_t)config->data_bits - 1UL) << USIC_CH_SCTR_FLE_Pos);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	795b      	ldrb	r3, [r3, #5]
 80048a8:	3b01      	subs	r3, #1
 80048aa:	041b      	lsls	r3, r3, #16
 80048ac:	431a      	orrs	r2, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Enable transfer buffer */
  channel->TCSR = (0x1UL << USIC_CH_TCSR_TDEN_Pos) |
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80048b8:	639a      	str	r2, [r3, #56]	; 0x38
                  USIC_CH_TCSR_TDSSM_Msk;

  /* Clear protocol status */
  channel->PSCR = 0xFFFFFFFFUL;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
 80048c0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set parity settings */
  channel->CCR = (uint32_t)config->parity_mode;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	895b      	ldrh	r3, [r3, #10]
 80048c6:	461a      	mov	r2, r3
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	641a      	str	r2, [r3, #64]	; 0x40
}
 80048cc:	3718      	adds	r7, #24
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop

080048d4 <XMC_UART_CH_Transmit>:

  return (XMC_UART_CH_STATUS_t)status;
}

void XMC_UART_CH_Transmit(XMC_USIC_CH_t *const channel, const uint16_t data)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	807b      	strh	r3, [r7, #2]
  /* Check FIFO size */
  if ((channel->TBCTR & USIC_CH_TBCTR_SIZE_Msk) == 0UL)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80048e6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d110      	bne.n	8004910 <XMC_UART_CH_Transmit+0x3c>
  {
    /* Wait till the Transmit Buffer is free for transmission */
    while (XMC_USIC_CH_GetTransmitBufferStatus(channel) == XMC_USIC_CH_TBUF_STATUS_BUSY)
 80048ee:	bf00      	nop
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff ff67 	bl	80047c4 <XMC_USIC_CH_GetTransmitBufferStatus>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d0f9      	beq.n	80048f0 <XMC_UART_CH_Transmit+0x1c>
    {
    }

    /* Clear the Transmit Buffer indication flag */
    XMC_UART_CH_ClearStatusFlag(channel, (uint32_t)XMC_UART_CH_STATUS_FLAG_TRANSMIT_BUFFER_INDICATION);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004902:	f7ff ff6f 	bl	80047e4 <XMC_UART_CH_ClearStatusFlag>

    /*Transmit data */
    channel->TBUF[0U] = data;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800490e:	e003      	b.n	8004918 <XMC_UART_CH_Transmit+0x44>
  }
  else
  {
    channel->IN[0U] = data;
 8004910:	887a      	ldrh	r2, [r7, #2]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  }
}
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop

08004920 <XMC_UART_CH_GetReceivedData>:

uint16_t XMC_UART_CH_GetReceivedData(XMC_USIC_CH_t *const channel)
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  uint16_t retval;

  /* Check FIFO size */
  if ((channel->RBCTR & USIC_CH_RBCTR_SIZE_Msk) == 0U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800492e:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <XMC_UART_CH_GetReceivedData+0x1e>
  {
    retval = (uint16_t)channel->RBUF;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800493a:	81fb      	strh	r3, [r7, #14]
 800493c:	e003      	b.n	8004946 <XMC_UART_CH_GetReceivedData+0x26>
  }
  else
  {
    retval = (uint16_t)channel->OUTR;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 8004944:	81fb      	strh	r3, [r7, #14]
  }

  return retval;
 8004946:	89fb      	ldrh	r3, [r7, #14]
}
 8004948:	4618      	mov	r0, r3
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <XMC_USIC_CH_Enable>:
/*******************************************************************************
 * API IMPLEMENTATION
 *******************************************************************************/

void XMC_USIC_CH_Enable(XMC_USIC_CH_t *const channel)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_USIC_CH_Enable: channel not valid", XMC_USIC_IsChannelValid(channel));

  if ((channel == XMC_USIC0_CH0) || (channel == XMC_USIC0_CH1))
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a1a      	ldr	r2, [pc, #104]	; (80049c8 <XMC_USIC_CH_Enable+0x74>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <XMC_USIC_CH_Enable+0x18>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a19      	ldr	r2, [pc, #100]	; (80049cc <XMC_USIC_CH_Enable+0x78>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d103      	bne.n	8004974 <XMC_USIC_CH_Enable+0x20>
  {
    XMC_USIC_Enable(XMC_USIC0);
 800496c:	4818      	ldr	r0, [pc, #96]	; (80049d0 <XMC_USIC_CH_Enable+0x7c>)
 800496e:	f000 f99d 	bl	8004cac <XMC_USIC_Enable>
 8004972:	e016      	b.n	80049a2 <XMC_USIC_CH_Enable+0x4e>
  }
#if defined(USIC1)
  else if ((channel == XMC_USIC1_CH0) || (channel == XMC_USIC1_CH1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a17      	ldr	r2, [pc, #92]	; (80049d4 <XMC_USIC_CH_Enable+0x80>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d003      	beq.n	8004984 <XMC_USIC_CH_Enable+0x30>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	4a16      	ldr	r2, [pc, #88]	; (80049d8 <XMC_USIC_CH_Enable+0x84>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d103      	bne.n	800498c <XMC_USIC_CH_Enable+0x38>
  {
    XMC_USIC_Enable(XMC_USIC1);
 8004984:	4815      	ldr	r0, [pc, #84]	; (80049dc <XMC_USIC_CH_Enable+0x88>)
 8004986:	f000 f991 	bl	8004cac <XMC_USIC_Enable>
 800498a:	e00a      	b.n	80049a2 <XMC_USIC_CH_Enable+0x4e>
  }
#endif
#if defined(USIC2)
  else if ((channel == XMC_USIC2_CH0) || (channel == XMC_USIC2_CH1))
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	4a14      	ldr	r2, [pc, #80]	; (80049e0 <XMC_USIC_CH_Enable+0x8c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d003      	beq.n	800499c <XMC_USIC_CH_Enable+0x48>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <XMC_USIC_CH_Enable+0x90>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d102      	bne.n	80049a2 <XMC_USIC_CH_Enable+0x4e>
  {
    XMC_USIC_Enable(XMC_USIC2);
 800499c:	4812      	ldr	r0, [pc, #72]	; (80049e8 <XMC_USIC_CH_Enable+0x94>)
 800499e:	f000 f985 	bl	8004cac <XMC_USIC_Enable>
  {
    XMC_ASSERT("USIC module not available", 0U/*Always*/);
  }

  /* USIC channel switched on*/
  channel->KSCFG = (USIC_CH_KSCFG_MODEN_Msk | USIC_CH_KSCFG_BPMODEN_Msk);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2203      	movs	r2, #3
 80049a6:	60da      	str	r2, [r3, #12]
  while ((channel->KSCFG & USIC_CH_KSCFG_MODEN_Msk) == 0U)
 80049a8:	bf00      	nop
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d0f9      	beq.n	80049aa <XMC_USIC_CH_Enable+0x56>
  {
    /* Wait till the channel is enabled */
  }

  /* Set USIC channel in IDLE mode */
  channel->CCR &= (uint32_t)~USIC_CH_CCR_MODE_Msk;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f023 020f 	bic.w	r2, r3, #15
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80049c2:	3708      	adds	r7, #8
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40030000 	.word	0x40030000
 80049cc:	40030200 	.word	0x40030200
 80049d0:	40030008 	.word	0x40030008
 80049d4:	48020000 	.word	0x48020000
 80049d8:	48020200 	.word	0x48020200
 80049dc:	48020008 	.word	0x48020008
 80049e0:	48024000 	.word	0x48024000
 80049e4:	48024200 	.word	0x48024200
 80049e8:	48024008 	.word	0x48024008

080049ec <XMC_USIC_CH_SetBaudrate>:
{
  channel->KSCFG = (uint32_t)((channel->KSCFG & (~USIC_CH_KSCFG_MODEN_Msk)) | USIC_CH_KSCFG_BPMODEN_Msk);
}

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrate(XMC_USIC_CH_t *const channel, uint32_t rate, uint32_t oversampling)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b08e      	sub	sp, #56	; 0x38
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]

  uint32_t pdiv_frac;
  uint32_t pdiv_frac_min;

  /* The rate and peripheral clock are divided by 100 to be able to use only 32bit arithmetic */
  if ((rate >= 100U) && (oversampling != 0U))
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b63      	cmp	r3, #99	; 0x63
 80049fc:	d95a      	bls.n	8004ab4 <XMC_USIC_CH_SetBaudrate+0xc8>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d057      	beq.n	8004ab4 <XMC_USIC_CH_SetBaudrate+0xc8>
  {
    peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency() / 100U;
 8004a04:	f7fd fce8 	bl	80023d8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	4b2f      	ldr	r3, [pc, #188]	; (8004ac8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004a0c:	fba3 2302 	umull	r2, r3, r3, r2
 8004a10:	095b      	lsrs	r3, r3, #5
 8004a12:	623b      	str	r3, [r7, #32]
    rate = rate / 100U;
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	4a2c      	ldr	r2, [pc, #176]	; (8004ac8 <XMC_USIC_CH_SetBaudrate+0xdc>)
 8004a18:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	60bb      	str	r3, [r7, #8]

    clock_divider_min = 1024U;
 8004a20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a24:	62fb      	str	r3, [r7, #44]	; 0x2c
    pdiv_int_min = 1U;
 8004a26:	2301      	movs	r3, #1
 8004a28:	62bb      	str	r3, [r7, #40]	; 0x28
    pdiv_frac_min = 0x3ffU;
 8004a2a:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8004a2e:	627b      	str	r3, [r7, #36]	; 0x24

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a34:	633b      	str	r3, [r7, #48]	; 0x30
 8004a36:	e022      	b.n	8004a7e <XMC_USIC_CH_SetBaudrate+0x92>
    {
      pdiv = ((peripheral_clock * clock_divider) / (rate * oversampling));
 8004a38:	6a3b      	ldr	r3, [r7, #32]
 8004a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a3c:	fb02 f203 	mul.w	r2, r2, r3
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	6879      	ldr	r1, [r7, #4]
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4c:	61fb      	str	r3, [r7, #28]
      pdiv_int = pdiv >> 10U;
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	0a9b      	lsrs	r3, r3, #10
 8004a52:	61bb      	str	r3, [r7, #24]
      pdiv_frac = pdiv & 0x3ffU;
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004a5a:	617b      	str	r3, [r7, #20]

      if ((pdiv_int <= 1024U) && (pdiv_frac < pdiv_frac_min))
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a62:	d809      	bhi.n	8004a78 <XMC_USIC_CH_SetBaudrate+0x8c>
 8004a64:	697a      	ldr	r2, [r7, #20]
 8004a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d205      	bcs.n	8004a78 <XMC_USIC_CH_SetBaudrate+0x8c>
      {
        pdiv_frac_min = pdiv_frac;
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
        pdiv_int_min = pdiv_int;
 8004a70:	69bb      	ldr	r3, [r7, #24]
 8004a72:	62bb      	str	r3, [r7, #40]	; 0x28
        clock_divider_min = clock_divider;
 8004a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a76:	62fb      	str	r3, [r7, #44]	; 0x2c

    clock_divider_min = 1024U;
    pdiv_int_min = 1U;
    pdiv_frac_min = 0x3ffU;

    for (clock_divider = 1024U; clock_divider > 0U; --clock_divider)
 8004a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	633b      	str	r3, [r7, #48]	; 0x30
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1d9      	bne.n	8004a38 <XMC_USIC_CH_SetBaudrate+0x4c>
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);
 8004a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a86:	3b01      	subs	r3, #1
        pdiv_int_min = pdiv_int;
        clock_divider_min = clock_divider;
      }
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
 8004a88:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	695a      	ldr	r2, [r3, #20]
 8004a94:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <XMC_USIC_CH_SetBaudrate+0xe0>)
 8004a96:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	3a01      	subs	r2, #1
 8004a9c:	0292      	lsls	r2, r2, #10
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004a9e:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);
 8004aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa2:	3b01      	subs	r3, #1
 8004aa4:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004aa6:	431a      	orrs	r2, r3
    }

    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_FRACTIONAL |
                   ((clock_divider_min - 1) << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv_int_min - 1U) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004ab2:	e002      	b.n	8004aba <XMC_USIC_CH_SetBaudrate+0xce>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

  return status;
 8004aba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3738      	adds	r7, #56	; 0x38
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}
 8004ac6:	bf00      	nop
 8004ac8:	51eb851f 	.word	0x51eb851f
 8004acc:	fc0080ef 	.word	0xfc0080ef

08004ad0 <XMC_USIC_CH_SetBaudrateEx>:

XMC_USIC_CH_STATUS_t XMC_USIC_CH_SetBaudrateEx(XMC_USIC_CH_t *const channel, int32_t rate, int32_t oversampling)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	; 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  int32_t peripheral_clock = XMC_SCU_CLOCK_GetPeripheralClockFrequency();
 8004adc:	f7fd fc7c 	bl	80023d8 <XMC_SCU_CLOCK_GetPeripheralClockFrequency>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	623b      	str	r3, [r7, #32]
  int32_t brg_clock = rate * oversampling;
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	fb02 f303 	mul.w	r3, r2, r3
 8004aec:	61fb      	str	r3, [r7, #28]
  int32_t actual_rate_upper;
  int32_t actual_rate_lower;
  uint32_t pdiv = 1;
 8004aee:	2301      	movs	r3, #1
 8004af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t divider_step;
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
 8004af2:	6a3a      	ldr	r2, [r7, #32]
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	dd5f      	ble.n	8004bba <XMC_USIC_CH_SetBaudrateEx+0xea>
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004afa:	6a3a      	ldr	r2, [r7, #32]
 8004afc:	69fb      	ldr	r3, [r7, #28]
 8004afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b02:	62bb      	str	r3, [r7, #40]	; 0x28
    while (divider_step >= 1023)
 8004b04:	e010      	b.n	8004b28 <XMC_USIC_CH_SetBaudrateEx+0x58>
    {
      pdiv++;
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	3301      	adds	r3, #1
 8004b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      brg_clock = rate * oversampling * pdiv;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	fb02 f303 	mul.w	r3, r2, r3
 8004b14:	461a      	mov	r2, r3
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	fb03 f302 	mul.w	r3, r3, r2
 8004b1c:	61fb      	str	r3, [r7, #28]
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
 8004b1e:	6a3a      	ldr	r2, [r7, #32]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	fb92 f3f3 	sdiv	r3, r2, r3
 8004b26:	62bb      	str	r3, [r7, #40]	; 0x28
  XMC_USIC_CH_STATUS_t status;

  if (peripheral_clock > brg_clock)
  {
    divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    while (divider_step >= 1023)
 8004b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b2a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d8e9      	bhi.n	8004b06 <XMC_USIC_CH_SetBaudrateEx+0x36>
    {
      pdiv++;
      brg_clock = rate * oversampling * pdiv;
      divider_step = peripheral_clock / brg_clock; // integer division gets truncated
    }
    actual_rate_upper = peripheral_clock / (divider_step * oversampling * pdiv);
 8004b32:	6a3a      	ldr	r2, [r7, #32]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b38:	fb01 f303 	mul.w	r3, r1, r3
 8004b3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b3e:	fb01 f303 	mul.w	r3, r1, r3
 8004b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b46:	61bb      	str	r3, [r7, #24]
    actual_rate_lower = peripheral_clock / ((divider_step + 1) * oversampling * pdiv);
 8004b48:	6a3a      	ldr	r2, [r7, #32]
 8004b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b4c:	3301      	adds	r3, #1
 8004b4e:	6879      	ldr	r1, [r7, #4]
 8004b50:	fb01 f303 	mul.w	r3, r1, r3
 8004b54:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b5e:	617b      	str	r3, [r7, #20]

    // choose better approximation if the peripheral frequency is not a multiple of the baudrate
    if (abs(rate - actual_rate_lower) < abs(rate - actual_rate_upper))
 8004b60:	68ba      	ldr	r2, [r7, #8]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004b6a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004b6e:	68b9      	ldr	r1, [r7, #8]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	1acb      	subs	r3, r1, r3
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bfb8      	it	lt
 8004b78:	425b      	neglt	r3, r3
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	da02      	bge.n	8004b84 <XMC_USIC_CH_SetBaudrateEx+0xb4>
    {
      divider_step += 1;
 8004b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b80:	3301      	adds	r3, #1
 8004b82:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    divider_step = 1024 - divider_step;
 8004b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b86:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8004b8a:	62bb      	str	r3, [r7, #40]	; 0x28


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
 8004b8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	611a      	str	r2, [r3, #16]
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	695a      	ldr	r2, [r3, #20]
 8004b9a:	4b0c      	ldr	r3, [pc, #48]	; (8004bcc <XMC_USIC_CH_SetBaudrateEx+0xfc>)
 8004b9c:	4013      	ands	r3, r2
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	3a01      	subs	r2, #1
 8004ba2:	0292      	lsls	r2, r2, #10
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
 8004ba4:	431a      	orrs	r2, r3
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	041b      	lsls	r3, r3, #16

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                     USIC_CH_BRG_PDIV_Msk |
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
 8004bac:	431a      	orrs	r2, r3


    channel->FDR = XMC_USIC_CH_BRG_CLOCK_DIVIDER_MODE_NORMAL |
                   (divider_step << USIC_CH_FDR_STEP_Pos);

    channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	615a      	str	r2, [r3, #20]
                                     USIC_CH_BRG_PCTQ_Msk |
                                     USIC_CH_BRG_PPPEN_Msk)) |
                   ((oversampling - 1U) << USIC_CH_BRG_DCTQ_Pos) |
                   ((pdiv - 1) << USIC_CH_BRG_PDIV_Pos);

    status = XMC_USIC_CH_STATUS_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004bb8:	e002      	b.n	8004bc0 <XMC_USIC_CH_SetBaudrateEx+0xf0>
  }
  else
  {
    status = XMC_USIC_CH_STATUS_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  return status;
 8004bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3730      	adds	r7, #48	; 0x30
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	fc0080ef 	.word	0xfc0080ef

08004bd0 <XMC_USIC_CH_TXFIFO_Configure>:

void XMC_USIC_CH_TXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	60b9      	str	r1, [r7, #8]
 8004bda:	603b      	str	r3, [r7, #0]
 8004bdc:	4613      	mov	r3, r2
 8004bde:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->TBCTR &= (uint32_t)~USIC_CH_TBCTR_SIZE_Msk;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004be6:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bf6:	4b09      	ldr	r3, [pc, #36]	; (8004c1c <XMC_USIC_CH_TXFIFO_Configure+0x4c>)
 8004bf8:	4013      	ands	r3, r2
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	0211      	lsls	r1, r2, #8
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4311      	orrs	r1, r2
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
 8004c02:	79fa      	ldrb	r2, [r7, #7]
 8004c04:	0612      	lsls	r2, r2, #24
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
 8004c06:	430a      	orrs	r2, r1
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
 8004c08:	431a      	orrs	r2, r3
  /* LOF = 0, A standard transmit buffer event occurs when the filling level equals the limit value and gets
   * lower due to transmission of a data word
   * STBTEN = 0, the trigger of the standard transmit buffer event is based on the transition of the fill level
   *  from equal to below the limit, not the fact being below
   */
  channel->TBCTR = (uint32_t)(channel->TBCTR & (uint32_t)~(USIC_CH_TBCTR_LIMIT_Msk |
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                              USIC_CH_TBCTR_DPTR_Msk |
                              USIC_CH_TBCTR_SIZE_Msk)) |
                   (uint32_t)((limit << USIC_CH_TBCTR_LIMIT_Pos) |
                              (data_pointer << USIC_CH_TBCTR_DPTR_Pos) |
                              ((uint32_t)size << USIC_CH_TBCTR_SIZE_Pos));
}
 8004c10:	3714      	adds	r7, #20
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	f8ffc0c0 	.word	0xf8ffc0c0

08004c20 <XMC_USIC_CH_RXFIFO_Configure>:

void XMC_USIC_CH_RXFIFO_Configure(XMC_USIC_CH_t *const channel,
                                  const uint32_t data_pointer,
                                  const XMC_USIC_CH_FIFO_SIZE_t size,
                                  const uint32_t limit)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	71fb      	strb	r3, [r7, #7]
  /* Disable FIFO */
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8004c36:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 8004c46:	4b0a      	ldr	r3, [pc, #40]	; (8004c70 <XMC_USIC_CH_RXFIFO_Configure+0x50>)
 8004c48:	4013      	ands	r3, r2
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
 8004c4a:	683a      	ldr	r2, [r7, #0]
 8004c4c:	0211      	lsls	r1, r2, #8
 8004c4e:	68ba      	ldr	r2, [r7, #8]
 8004c50:	4311      	orrs	r1, r2
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
 8004c52:	79fa      	ldrb	r2, [r7, #7]
 8004c54:	0612      	lsls	r2, r2, #24
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
                               USIC_CH_RBCTR_DPTR_Msk |
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
 8004c56:	430a      	orrs	r2, r1
  channel->RBCTR &= (uint32_t)~USIC_CH_RBCTR_SIZE_Msk;

  /* LOF = 1, A standard receive buffer event occurs when the filling level equals the limit value and gets bigger
   *  due to the reception of a new data word
   */
  channel->RBCTR = (uint32_t)((channel->RBCTR & (uint32_t)~(USIC_CH_RBCTR_LIMIT_Msk |
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
                               USIC_CH_RBCTR_LOF_Msk)) |
                              ((limit << USIC_CH_RBCTR_LIMIT_Pos) |
                               (data_pointer << USIC_CH_RBCTR_DPTR_Pos) |
                               ((uint32_t)size << USIC_CH_RBCTR_SIZE_Pos) |
                               (uint32_t)USIC_CH_RBCTR_LOF_Msk));
}
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	efffc0c0 	.word	0xefffc0c0

08004c74 <XMC_USIC_CH_SetInterruptNodePointer>:
}

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	460b      	mov	r3, r1
 8004c7e:	607a      	str	r2, [r7, #4]
 8004c80:	72fb      	strb	r3, [r7, #11]
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	699a      	ldr	r2, [r3, #24]
 8004c86:	7afb      	ldrb	r3, [r7, #11]
 8004c88:	2107      	movs	r1, #7
 8004c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c8e:	43db      	mvns	r3, r3
 8004c90:	401a      	ands	r2, r3
                             (service_request << (uint32_t)interrupt_node));
 8004c92:	7afb      	ldrb	r3, [r7, #11]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	fa01 f303 	lsl.w	r3, r1, r3

void XMC_USIC_CH_SetInterruptNodePointer(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_INTERRUPT_NODE_POINTER_t interrupt_node,
    const uint32_t service_request)
{
  channel->INPR = (uint32_t)((channel->INPR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
 8004c9a:	431a      	orrs	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	619a      	str	r2, [r3, #24]
                             (service_request << (uint32_t)interrupt_node));
}
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop

08004cac <XMC_USIC_Enable>:
  channel->RBCTR = (uint32_t)((channel->RBCTR & (~(uint32_t)(USIC_CH_INPR_Msk << (uint32_t)interrupt_node))) |
                              (service_request << (uint32_t)interrupt_node));
}

void XMC_USIC_Enable(XMC_USIC_t *const usic)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b082      	sub	sp, #8
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  if (usic == USIC0)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	4a28      	ldr	r2, [pc, #160]	; (8004d58 <XMC_USIC_Enable+0xac>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d118      	bne.n	8004cee <XMC_USIC_Enable+0x42>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC0);
 8004cbc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cc0:	f7fd fcce 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC0));
 8004cc4:	bf00      	nop
 8004cc6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cca:	f7fd fce5 	bl	8002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1f8      	bne.n	8004cc6 <XMC_USIC_Enable+0x1a>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC0);
 8004cd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004cd8:	f7fd fb3e 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC0));
 8004cdc:	bf00      	nop
 8004cde:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004ce2:	f7fd fb55 	bl	8002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1f8      	bne.n	8004cde <XMC_USIC_Enable+0x32>
 8004cec:	e030      	b.n	8004d50 <XMC_USIC_Enable+0xa4>
#endif
  }
#if defined(USIC1)
  else if (usic == USIC1)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a1a      	ldr	r2, [pc, #104]	; (8004d5c <XMC_USIC_Enable+0xb0>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d114      	bne.n	8004d20 <XMC_USIC_Enable+0x74>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC1);
 8004cf6:	481a      	ldr	r0, [pc, #104]	; (8004d60 <XMC_USIC_Enable+0xb4>)
 8004cf8:	f7fd fcb2 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC1));
 8004cfc:	bf00      	nop
 8004cfe:	4818      	ldr	r0, [pc, #96]	; (8004d60 <XMC_USIC_Enable+0xb4>)
 8004d00:	f7fd fcca 	bl	8002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004d04:	4603      	mov	r3, r0
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1f9      	bne.n	8004cfe <XMC_USIC_Enable+0x52>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC1);
 8004d0a:	4815      	ldr	r0, [pc, #84]	; (8004d60 <XMC_USIC_Enable+0xb4>)
 8004d0c:	f7fd fb24 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC1));
 8004d10:	bf00      	nop
 8004d12:	4813      	ldr	r0, [pc, #76]	; (8004d60 <XMC_USIC_Enable+0xb4>)
 8004d14:	f7fd fb3c 	bl	8002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f9      	bne.n	8004d12 <XMC_USIC_Enable+0x66>
 8004d1e:	e017      	b.n	8004d50 <XMC_USIC_Enable+0xa4>
#endif
  }
#endif
#if defined(USIC2)
  else if (usic == USIC2)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <XMC_USIC_Enable+0xb8>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d113      	bne.n	8004d50 <XMC_USIC_Enable+0xa4>
  {
#if defined(CLOCK_GATING_SUPPORTED)
    XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_USIC2);
 8004d28:	480f      	ldr	r0, [pc, #60]	; (8004d68 <XMC_USIC_Enable+0xbc>)
 8004d2a:	f7fd fc99 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
    while (XMC_SCU_CLOCK_IsPeripheralClockGated(XMC_SCU_PERIPHERAL_CLOCK_USIC2));
 8004d2e:	bf00      	nop
 8004d30:	480d      	ldr	r0, [pc, #52]	; (8004d68 <XMC_USIC_Enable+0xbc>)
 8004d32:	f7fd fcb1 	bl	8002698 <XMC_SCU_CLOCK_IsPeripheralClockGated>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f9      	bne.n	8004d30 <XMC_USIC_Enable+0x84>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
    XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_USIC2);
 8004d3c:	480a      	ldr	r0, [pc, #40]	; (8004d68 <XMC_USIC_Enable+0xbc>)
 8004d3e:	f7fd fb0b 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
    while (XMC_SCU_RESET_IsPeripheralResetAsserted(XMC_SCU_PERIPHERAL_RESET_USIC2));
 8004d42:	bf00      	nop
 8004d44:	4808      	ldr	r0, [pc, #32]	; (8004d68 <XMC_USIC_Enable+0xbc>)
 8004d46:	f7fd fb23 	bl	8002390 <XMC_SCU_RESET_IsPeripheralResetAsserted>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f9      	bne.n	8004d44 <XMC_USIC_Enable+0x98>
#endif
  else
  {
    XMC_ASSERT("USIC module not available", 0/*Always*/);
  }
}
 8004d50:	3708      	adds	r7, #8
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40030008 	.word	0x40030008
 8004d5c:	48020008 	.word	0x48020008
 8004d60:	10000080 	.word	0x10000080
 8004d64:	48024008 	.word	0x48024008
 8004d68:	10000100 	.word	0x10000100

08004d6c <XMC_WDT_Enable>:
 * API IMPLEMENTATION
  ********************************************************************************************************************/

/* Enables watchdog clock and releases watchdog reset. */
void XMC_WDT_Enable(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
#if UC_FAMILY == XMC4
  XMC_SCU_CLOCK_EnableClock(XMC_SCU_CLOCK_WDT);
 8004d70:	2020      	movs	r0, #32
 8004d72:	f7fd fc65 	bl	8002640 <XMC_SCU_CLOCK_EnableClock>
#endif

#if defined(CLOCK_GATING_SUPPORTED)
  XMC_SCU_CLOCK_UngatePeripheralClock(XMC_SCU_PERIPHERAL_CLOCK_WDT);
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <XMC_WDT_Enable+0x18>)
 8004d78:	f7fd fc72 	bl	8002660 <XMC_SCU_CLOCK_UngatePeripheralClock>
#endif
#if defined(PERIPHERAL_RESET_SUPPORTED)
  XMC_SCU_RESET_DeassertPeripheralReset(XMC_SCU_PERIPHERAL_RESET_WDT);
 8004d7c:	4801      	ldr	r0, [pc, #4]	; (8004d84 <XMC_WDT_Enable+0x18>)
 8004d7e:	f7fd faeb 	bl	8002358 <XMC_SCU_RESET_DeassertPeripheralReset>
#endif
}
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	20000002 	.word	0x20000002

08004d88 <XMC_WDT_Init>:
  XMC_SCU_CLOCK_DisableClock(XMC_SCU_CLOCK_WDT);
#endif
}
/* Initializes and configures watchdog with configuration data pointed by \a config. */
void XMC_WDT_Init(const XMC_WDT_CONFIG_t *const config)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  XMC_WDT_Enable();
 8004d90:	f7ff ffec 	bl	8004d6c <XMC_WDT_Enable>
  WDT->CTR = config->wdt_ctr;
 8004d94:	4a07      	ldr	r2, [pc, #28]	; (8004db4 <XMC_WDT_Init+0x2c>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	6053      	str	r3, [r2, #4]
  WDT->WLB = config->window_lower_bound;
 8004d9c:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <XMC_WDT_Init+0x2c>)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	6113      	str	r3, [r2, #16]
  WDT->WUB = config->window_upper_bound;
 8004da4:	4a03      	ldr	r2, [pc, #12]	; (8004db4 <XMC_WDT_Init+0x2c>)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6153      	str	r3, [r2, #20]
}
 8004dac:	3708      	adds	r7, #8
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	50008000 	.word	0x50008000

08004db8 <_sbrk>:

// defined in linker script
extern caddr_t Heap_Bank1_Start;
extern caddr_t Heap_Bank1_End;
caddr_t _sbrk(int nbytes)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  static caddr_t heap_ptr = NULL;
  caddr_t base;

  if (heap_ptr == NULL) {
 8004dc0:	4b14      	ldr	r3, [pc, #80]	; (8004e14 <_sbrk+0x5c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d102      	bne.n	8004dce <_sbrk+0x16>
    heap_ptr = (caddr_t)&Heap_Bank1_Start;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <_sbrk+0x5c>)
 8004dca:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <_sbrk+0x60>)
 8004dcc:	601a      	str	r2, [r3, #0]
  }

  base = heap_ptr;
 8004dce:	4b11      	ldr	r3, [pc, #68]	; (8004e14 <_sbrk+0x5c>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* heap word alignment */
  nbytes = (nbytes + 3) & ~0x3U;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3303      	adds	r3, #3
 8004dd8:	f023 0303 	bic.w	r3, r3, #3
 8004ddc:	607b      	str	r3, [r7, #4]
  if ((caddr_t)&Heap_Bank1_End > (heap_ptr + nbytes))
 8004dde:	4b0d      	ldr	r3, [pc, #52]	; (8004e14 <_sbrk+0x5c>)
 8004de0:	681a      	ldr	r2, [r3, #0]
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	4413      	add	r3, r2
 8004de6:	4a0d      	ldr	r2, [pc, #52]	; (8004e1c <_sbrk+0x64>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d207      	bcs.n	8004dfc <_sbrk+0x44>
  {
    heap_ptr += nbytes;
 8004dec:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <_sbrk+0x5c>)
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4413      	add	r3, r2
 8004df4:	4a07      	ldr	r2, [pc, #28]	; (8004e14 <_sbrk+0x5c>)
 8004df6:	6013      	str	r3, [r2, #0]
    return (base);
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e006      	b.n	8004e0a <_sbrk+0x52>
  }
  else
  {
    /* Heap overflow */
    errno = ENOMEM;
 8004dfc:	f00c fc72 	bl	80116e4 <__errno>
 8004e00:	4602      	mov	r2, r0
 8004e02:	230c      	movs	r3, #12
 8004e04:	6013      	str	r3, [r2, #0]
    return ((caddr_t)-1);
 8004e06:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	1fff43d4 	.word	0x1fff43d4
 8004e18:	20000000 	.word	0x20000000
 8004e1c:	2003ffc0 	.word	0x2003ffc0

08004e20 <_init>:

/* Init */
void _init(void)
{}
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <IOExp_Configure>:
}

/* Configures pin input and output for corresponding ports as provided in port0 and port1 parameter */
/* IOExp_address is the device address, e.g. 0x40 */
void IOExp_Configure(I2C_MASTER_t *handle, uint8_t IOExp_address, uint8_t port0, uint8_t port1)
{
 8004e2c:	b590      	push	{r4, r7, lr}
 8004e2e:	b093      	sub	sp, #76	; 0x4c
 8004e30:	af02      	add	r7, sp, #8
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	4608      	mov	r0, r1
 8004e36:	4611      	mov	r1, r2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	70fb      	strb	r3, [r7, #3]
 8004e3e:	460b      	mov	r3, r1
 8004e40:	70bb      	strb	r3, [r7, #2]
 8004e42:	4613      	mov	r3, r2
 8004e44:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	uint8_t data_ptr[20] = {0}, data_RxPtr[20] = {0}, CMD;
 8004e52:	f107 031c 	add.w	r3, r7, #28
 8004e56:	2200      	movs	r2, #0
 8004e58:	601a      	str	r2, [r3, #0]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2200      	movs	r2, #0
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	3304      	adds	r3, #4
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	2200      	movs	r2, #0
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	3304      	adds	r3, #4
 8004e74:	f107 0308 	add.w	r3, r7, #8
 8004e78:	2200      	movs	r2, #0
 8004e7a:	601a      	str	r2, [r3, #0]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	2200      	movs	r2, #0
 8004e80:	601a      	str	r2, [r3, #0]
 8004e82:	3304      	adds	r3, #4
 8004e84:	2200      	movs	r2, #0
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	3304      	adds	r3, #4
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	3304      	adds	r3, #4
 8004e90:	2200      	movs	r2, #0
 8004e92:	601a      	str	r2, [r3, #0]
 8004e94:	3304      	adds	r3, #4
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8004e96:	2301      	movs	r3, #1
 8004e98:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	bool test_result = false;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	uint8_t pass_count=0;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	/*********************************************TEST port 0 output, port 1 input ************************************************/
	/* Configure port 0 */
	CMD = CONFIG_REG_PORT0;
 8004ea8:	2306      	movs	r3, #6
 8004eaa:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	data_ptr[0] = CMD;
 8004eae:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8004eb2:	773b      	strb	r3, [r7, #28]
	data_ptr[1] = port0; // data to port 0
 8004eb4:	78bb      	ldrb	r3, [r7, #2]
 8004eb6:	777b      	strb	r3, [r7, #29]
	data_ptr[2] = port1; // data to port 1
 8004eb8:	787b      	ldrb	r3, [r7, #1]
 8004eba:	77bb      	strb	r3, [r7, #30]
	data_count = 3;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	633b      	str	r3, [r7, #48]	; 0x30

	for(int i = 0; i < 0xffff; i++);
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ec4:	e002      	b.n	8004ecc <IOExp_Configure+0xa0>
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec8:	3301      	adds	r3, #1
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	ddf7      	ble.n	8004ec6 <IOExp_Configure+0x9a>
	/* Set Port 0 as output and port 1 as input */
	I2C_MASTER_Transmit(handle, send_start, IOExp_address/*I2C_SLAVE_ADDRESS*/, &data_ptr[0], data_count, send_stop);
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	f897 103b 	ldrb.w	r1, [r7, #59]	; 0x3b
 8004edc:	f107 041c 	add.w	r4, r7, #28
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
 8004ee8:	9301      	str	r3, [sp, #4]
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	4623      	mov	r3, r4
 8004eee:	f002 fe77 	bl	8007be0 <I2C_MASTER_Transmit>
}
 8004ef2:	3744      	adds	r7, #68	; 0x44
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	bd90      	pop	{r4, r7, pc}

08004ef8 <IOExp_SetPIN_UPDATE>:

/* Internal function to set a pin high or low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_UPDATE(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin, bool pin_level)
{
 8004ef8:	b590      	push	{r4, r7, lr}
 8004efa:	b091      	sub	sp, #68	; 0x44
 8004efc:	af04      	add	r7, sp, #16
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	4608      	mov	r0, r1
 8004f02:	4611      	mov	r1, r2
 8004f04:	461a      	mov	r2, r3
 8004f06:	4603      	mov	r3, r0
 8004f08:	70fb      	strb	r3, [r7, #3]
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	70bb      	strb	r3, [r7, #2]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	707b      	strb	r3, [r7, #1]
	bool send_start = true, send_stop = true;
 8004f12:	2301      	movs	r3, #1
 8004f14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f18:	2301      	movs	r3, #1
 8004f1a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, data_Rx[2] = {0}, CMD;
 8004f1e:	f107 030c 	add.w	r3, r7, #12
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	3304      	adds	r3, #4
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	3304      	adds	r3, #4
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	601a      	str	r2, [r3, #0]
 8004f3e:	3304      	adds	r3, #4
 8004f40:	2300      	movs	r3, #0
 8004f42:	813b      	strh	r3, [r7, #8]
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	if(0 == port)
 8004f4a:	78bb      	ldrb	r3, [r7, #2]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <IOExp_SetPIN_UPDATE+0x60>
	{
		/* Read port 0 configuration */
		CMD = OUTPUT_REG_PORT0;
 8004f50:	2302      	movs	r3, #2
 8004f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004f56:	e002      	b.n	8004f5e <IOExp_SetPIN_UPDATE+0x66>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = OUTPUT_REG_PORT1;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 8004f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004f62:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 8004f64:	2301      	movs	r3, #1
 8004f66:	623b      	str	r3, [r7, #32]

	send_stop = false;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port 0 */
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004f74:	f107 040c 	add.w	r4, r7, #12
 8004f78:	6a3b      	ldr	r3, [r7, #32]
 8004f7a:	9300      	str	r3, [sp, #0]
 8004f7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4623      	mov	r3, r4
 8004f86:	f002 fe2b 	bl	8007be0 <I2C_MASTER_Transmit>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8004f90:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d15d      	bne.n	8005054 <IOExp_SetPIN_UPDATE+0x15c>
	{
		//send_start = true;
		send_start = true;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		/* Read Port 1 pins */
	//	I2C_status = I2C_MASTER_Receive(&I2C_MASTER_0, send_start, IOExp_Address, &data_Rx[0], data_count, send_stop, true);
		//data_count = 2;
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, &data_ptr[1], data_count, send_stop, true);
 8004fa4:	78fa      	ldrb	r2, [r7, #3]
 8004fa6:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8004faa:	f107 030c 	add.w	r3, r7, #12
 8004fae:	1c5c      	adds	r4, r3, #1
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	9300      	str	r3, [sp, #0]
 8004fb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8004fb8:	9301      	str	r3, [sp, #4]
 8004fba:	2301      	movs	r3, #1
 8004fbc:	9302      	str	r3, [sp, #8]
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4623      	mov	r3, r4
 8004fc2:	f002 fe37 	bl	8007c34 <I2C_MASTER_Receive>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8004fcc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d13f      	bne.n	8005054 <IOExp_SetPIN_UPDATE+0x15c>
		{
			if(PIN_HIGH == pin_level)
 8004fd4:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00c      	beq.n	8004ff6 <IOExp_SetPIN_UPDATE+0xfe>
			{
				/* Update output register value */
				data_ptr[1] |= /*data_Rx[0] |*/ (1 << pin);
 8004fdc:	7b7b      	ldrb	r3, [r7, #13]
 8004fde:	b2d9      	uxtb	r1, r3
 8004fe0:	787b      	ldrb	r3, [r7, #1]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	460a      	mov	r2, r1
 8004fec:	4313      	orrs	r3, r2
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	737b      	strb	r3, [r7, #13]
 8004ff4:	e00d      	b.n	8005012 <IOExp_SetPIN_UPDATE+0x11a>
			}
			else
			{
				/* Update output register value */
				data_ptr[1] &= /*data_Rx[0] &*/ (~(1 << pin));
 8004ff6:	7b7b      	ldrb	r3, [r7, #13]
 8004ff8:	b2d9      	uxtb	r1, r3
 8004ffa:	787b      	ldrb	r3, [r7, #1]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	b2db      	uxtb	r3, r3
 8005004:	43db      	mvns	r3, r3
 8005006:	b2db      	uxtb	r3, r3
 8005008:	460a      	mov	r2, r1
 800500a:	4013      	ands	r3, r2
 800500c:	b2db      	uxtb	r3, r3
 800500e:	b2db      	uxtb	r3, r3
 8005010:	737b      	strb	r3, [r7, #13]
			}

			data_count = 2;
 8005012:	2302      	movs	r3, #2
 8005014:	623b      	str	r3, [r7, #32]
			send_start = true;
 8005016:	2301      	movs	r3, #1
 8005018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			for(int i= 0; i < 0xffff; i++);
 800501c:	2300      	movs	r3, #0
 800501e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005020:	e002      	b.n	8005028 <IOExp_SetPIN_UPDATE+0x130>
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	3301      	adds	r3, #1
 8005026:	62bb      	str	r3, [r7, #40]	; 0x28
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800502e:	4293      	cmp	r3, r2
 8005030:	ddf7      	ble.n	8005022 <IOExp_SetPIN_UPDATE+0x12a>
			/* update pin */
			I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8005032:	78fa      	ldrb	r2, [r7, #3]
 8005034:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005038:	f107 040c 	add.w	r4, r7, #12
 800503c:	6a3b      	ldr	r3, [r7, #32]
 800503e:	9300      	str	r3, [sp, #0]
 8005040:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005044:	9301      	str	r3, [sp, #4]
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	4623      	mov	r3, r4
 800504a:	f002 fdc9 	bl	8007be0 <I2C_MASTER_Transmit>
 800504e:	4603      	mov	r3, r0
 8005050:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			/* data is expected to be successfully written at this point */
		}
	}

	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005054:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <IOExp_SetPIN_UPDATE+0x168>
		return true;
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <IOExp_SetPIN_UPDATE+0x16a>
	else
		return false;
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	3734      	adds	r7, #52	; 0x34
 8005066:	46bd      	mov	sp, r7
 8005068:	bd90      	pop	{r4, r7, pc}
 800506a:	bf00      	nop

0800506c <IOExp_SetPIN_HIGH>:

/* Function to set a pin high for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_HIGH(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b085      	sub	sp, #20
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4603      	mov	r3, r0
 800507c:	70fb      	strb	r3, [r7, #3]
 800507e:	460b      	mov	r3, r1
 8005080:	70bb      	strb	r3, [r7, #2]
 8005082:	4613      	mov	r3, r2
 8005084:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_HIGH);
 8005086:	78f9      	ldrb	r1, [r7, #3]
 8005088:	78ba      	ldrb	r2, [r7, #2]
 800508a:	787c      	ldrb	r4, [r7, #1]
 800508c:	2301      	movs	r3, #1
 800508e:	9300      	str	r3, [sp, #0]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4623      	mov	r3, r4
 8005094:	f7ff ff30 	bl	8004ef8 <IOExp_SetPIN_UPDATE>
 8005098:	4603      	mov	r3, r0
}
 800509a:	4618      	mov	r0, r3
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	bd90      	pop	{r4, r7, pc}
 80050a2:	bf00      	nop

080050a4 <IOExp_SetPIN_LOW>:

/* Function to set a pin low for specified IO expander
 * return: true,  operation is successful
 * 		   false, operation not successful */
bool IOExp_SetPIN_LOW(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port, uint8_t pin)
{
 80050a4:	b590      	push	{r4, r7, lr}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af02      	add	r7, sp, #8
 80050aa:	6078      	str	r0, [r7, #4]
 80050ac:	4608      	mov	r0, r1
 80050ae:	4611      	mov	r1, r2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	70fb      	strb	r3, [r7, #3]
 80050b6:	460b      	mov	r3, r1
 80050b8:	70bb      	strb	r3, [r7, #2]
 80050ba:	4613      	mov	r3, r2
 80050bc:	707b      	strb	r3, [r7, #1]
	return IOExp_SetPIN_UPDATE(handle, IOExp_Address, port, pin, PIN_LOW);
 80050be:	78f9      	ldrb	r1, [r7, #3]
 80050c0:	78ba      	ldrb	r2, [r7, #2]
 80050c2:	787c      	ldrb	r4, [r7, #1]
 80050c4:	2300      	movs	r3, #0
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4623      	mov	r3, r4
 80050cc:	f7ff ff14 	bl	8004ef8 <IOExp_SetPIN_UPDATE>
 80050d0:	4603      	mov	r3, r0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	370c      	adds	r7, #12
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd90      	pop	{r4, r7, pc}
 80050da:	bf00      	nop

080050dc <IOExp_ReadPIN_LEVEL>:
//	}
//}


uint8_t* IOExp_ReadPIN_LEVEL(I2C_MASTER_t *handle, uint8_t IOExp_Address, uint8_t port)
{
 80050dc:	b590      	push	{r4, r7, lr}
 80050de:	b091      	sub	sp, #68	; 0x44
 80050e0:	af04      	add	r7, sp, #16
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	460b      	mov	r3, r1
 80050e6:	70fb      	strb	r3, [r7, #3]
 80050e8:	4613      	mov	r3, r2
 80050ea:	70bb      	strb	r3, [r7, #2]
	bool send_start = true, send_stop = true;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t data_ptr[20] = {0}, /*data_Rx[2] = {0},*/ CMD;
 80050f8:	f107 030c 	add.w	r3, r7, #12
 80050fc:	2200      	movs	r2, #0
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	3304      	adds	r3, #4
 8005102:	2200      	movs	r2, #0
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	3304      	adds	r3, #4
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	3304      	adds	r3, #4
 8005114:	2200      	movs	r2, #0
 8005116:	601a      	str	r2, [r3, #0]
 8005118:	3304      	adds	r3, #4
	static uint8_t data_Rx[2] = {0, 0};
	uint32_t data_count;
	I2C_MASTER_STATUS_t I2C_status = I2C_MASTER_STATUS_FAILURE;
 800511a:	2301      	movs	r3, #1
 800511c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	if(0 == port)
 8005120:	78bb      	ldrb	r3, [r7, #2]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d103      	bne.n	800512e <IOExp_ReadPIN_LEVEL+0x52>
	{
		/* Read port 0 configuration */
		CMD = INPUT_REG_PORT0;
 8005126:	2300      	movs	r3, #0
 8005128:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800512c:	e002      	b.n	8005134 <IOExp_ReadPIN_LEVEL+0x58>
	}
	else //if(1 == port)
	{
		/* Read port 1 configuration */
		CMD = INPUT_REG_PORT1;
 800512e:	2301      	movs	r3, #1
 8005130:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	}

	data_ptr[0] = CMD;
 8005134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005138:	733b      	strb	r3, [r7, #12]
	data_count = 1;
 800513a:	2301      	movs	r3, #1
 800513c:	623b      	str	r3, [r7, #32]

	send_stop = true;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Read port */
	//for(int i = 0; i < 0xffff; i++);
	I2C_status = I2C_MASTER_Transmit(handle, send_start, IOExp_Address, &data_ptr[0], data_count, send_stop);
 8005144:	78fa      	ldrb	r2, [r7, #3]
 8005146:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 800514a:	f107 040c 	add.w	r4, r7, #12
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	9300      	str	r3, [sp, #0]
 8005152:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005156:	9301      	str	r3, [sp, #4]
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4623      	mov	r3, r4
 800515c:	f002 fd40 	bl	8007be0 <I2C_MASTER_Transmit>
 8005160:	4603      	mov	r3, r0
 8005162:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 8005166:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800516a:	2b00      	cmp	r3, #0
 800516c:	d127      	bne.n	80051be <IOExp_ReadPIN_LEVEL+0xe2>
	{
		send_start = true;
 800516e:	2301      	movs	r3, #1
 8005170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		send_stop = true;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i = 0; i < 0xffff; i++);
 800517a:	2300      	movs	r3, #0
 800517c:	62bb      	str	r3, [r7, #40]	; 0x28
 800517e:	e002      	b.n	8005186 <IOExp_ReadPIN_LEVEL+0xaa>
 8005180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005182:	3301      	adds	r3, #1
 8005184:	62bb      	str	r3, [r7, #40]	; 0x28
 8005186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005188:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800518c:	4293      	cmp	r3, r2
 800518e:	ddf7      	ble.n	8005180 <IOExp_ReadPIN_LEVEL+0xa4>
		/* Read Port pins */
		I2C_status = I2C_MASTER_Receive(handle, send_start, IOExp_Address, data_Rx, 2/*data_count*/, send_stop, true);
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8005196:	2302      	movs	r3, #2
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800519e:	9301      	str	r3, [sp, #4]
 80051a0:	2301      	movs	r3, #1
 80051a2:	9302      	str	r3, [sp, #8]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4b08      	ldr	r3, [pc, #32]	; (80051c8 <IOExp_ReadPIN_LEVEL+0xec>)
 80051a8:	f002 fd44 	bl	8007c34 <I2C_MASTER_Receive>
 80051ac:	4603      	mov	r3, r0
 80051ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

		if(I2C_MASTER_STATUS_SUCCESS == I2C_status)
 80051b2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <IOExp_ReadPIN_LEVEL+0xe2>
		{
			return (data_Rx);
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <IOExp_ReadPIN_LEVEL+0xec>)
 80051bc:	e7ff      	b.n	80051be <IOExp_ReadPIN_LEVEL+0xe2>
		}
	}
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3734      	adds	r7, #52	; 0x34
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd90      	pop	{r4, r7, pc}
 80051c6:	bf00      	nop
 80051c8:	1fff43d8 	.word	0x1fff43d8

080051cc <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	fa22 f303 	lsr.w	r3, r2, r3
 80051e2:	f003 0301 	and.w	r3, r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	370c      	adds	r7, #12
 80051ea:	46bd      	mov	sp, r7
 80051ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f0:	4770      	bx	lr
 80051f2:	bf00      	nop

080051f4 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681a      	ldr	r2, [r3, #0]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	7c1b      	ldrb	r3, [r3, #16]
 8005204:	4610      	mov	r0, r2
 8005206:	4619      	mov	r1, r3
 8005208:	f7ff ffe0 	bl	80051cc <XMC_GPIO_GetInput>
 800520c:	4603      	mov	r3, r0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop

08005218 <Input_Capture>:
	//if(Vcu_InPuts.IGNITION_1_IN)
//#endif

Vcu_InPuts_t Vcu_InPuts;
void Input_Capture(void)
{
 8005218:	b580      	push	{r7, lr}
 800521a:	af00      	add	r7, sp, #0

	//Vcu_InPuts.charger_connect_IN = DIGITAL_IO_GetInput(&CHARGER_CONNECTED_IN_D);

	Vcu_InPuts.IGNITION_1_IN = DIGITAL_IO_GetInput(&IGNI_POS1_IN_D);
 800521c:	481f      	ldr	r0, [pc, #124]	; (800529c <Input_Capture+0x84>)
 800521e:	f7ff ffe9 	bl	80051f4 <DIGITAL_IO_GetInput>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	bf14      	ite	ne
 8005228:	2301      	movne	r3, #1
 800522a:	2300      	moveq	r3, #0
 800522c:	b2da      	uxtb	r2, r3
 800522e:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <Input_Capture+0x88>)
 8005230:	701a      	strb	r2, [r3, #0]

	Vcu_InPuts.IGNITION_2_IN = DIGITAL_IO_GetInput(&IGNI_POS2_IN_D);
 8005232:	481c      	ldr	r0, [pc, #112]	; (80052a4 <Input_Capture+0x8c>)
 8005234:	f7ff ffde 	bl	80051f4 <DIGITAL_IO_GetInput>
 8005238:	4603      	mov	r3, r0
 800523a:	2b00      	cmp	r3, #0
 800523c:	bf14      	ite	ne
 800523e:	2301      	movne	r3, #1
 8005240:	2300      	moveq	r3, #0
 8005242:	b2da      	uxtb	r2, r3
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <Input_Capture+0x88>)
 8005246:	705a      	strb	r2, [r3, #1]

	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 8005248:	4817      	ldr	r0, [pc, #92]	; (80052a8 <Input_Capture+0x90>)
 800524a:	f7ff ffd3 	bl	80051f4 <DIGITAL_IO_GetInput>
 800524e:	4603      	mov	r3, r0
 8005250:	2b00      	cmp	r3, #0
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2da      	uxtb	r2, r3
 800525a:	4b14      	ldr	r3, [pc, #80]	; (80052ac <Input_Capture+0x94>)
 800525c:	749a      	strb	r2, [r3, #18]

	Switch_Ios_IN.handbrake_sw_IN = DIGITAL_IO_GetInput(&HANDBRAKE_IN_D);
 800525e:	4814      	ldr	r0, [pc, #80]	; (80052b0 <Input_Capture+0x98>)
 8005260:	f7ff ffc8 	bl	80051f4 <DIGITAL_IO_GetInput>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2da      	uxtb	r2, r3
 8005270:	4b0e      	ldr	r3, [pc, #56]	; (80052ac <Input_Capture+0x94>)
 8005272:	721a      	strb	r2, [r3, #8]

	Switch_Ios_IN.electronic_brake_in_d = DIGITAL_IO_GetInput(&ELEC_HANDBRAKE_IN_D);
 8005274:	480f      	ldr	r0, [pc, #60]	; (80052b4 <Input_Capture+0x9c>)
 8005276:	f7ff ffbd 	bl	80051f4 <DIGITAL_IO_GetInput>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	bf14      	ite	ne
 8005280:	2301      	movne	r3, #1
 8005282:	2300      	moveq	r3, #0
 8005284:	b2da      	uxtb	r2, r3
 8005286:	4b09      	ldr	r3, [pc, #36]	; (80052ac <Input_Capture+0x94>)
 8005288:	715a      	strb	r2, [r3, #5]

	Can_Inputs();
 800528a:	f000 f815 	bl	80052b8 <Can_Inputs>

	state_1_InputCapture();
 800528e:	f000 f857 	bl	8005340 <state_1_InputCapture>
	State_2_InputCapture();
 8005292:	f000 fa3d 	bl	8005710 <State_2_InputCapture>

	read_temp();
 8005296:	f000 f827 	bl	80052e8 <read_temp>

}
 800529a:	bd80      	pop	{r7, pc}
 800529c:	08013660 	.word	0x08013660
 80052a0:	1fff5108 	.word	0x1fff5108
 80052a4:	0801364c 	.word	0x0801364c
 80052a8:	0801369c 	.word	0x0801369c
 80052ac:	1fff4848 	.word	0x1fff4848
 80052b0:	08013688 	.word	0x08013688
 80052b4:	0801346c 	.word	0x0801346c

080052b8 <Can_Inputs>:

void Can_Inputs(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
	uart_debugg("in can_inputs");
 80052bc:	4808      	ldr	r0, [pc, #32]	; (80052e0 <Can_Inputs+0x28>)
 80052be:	f00a fd13 	bl	800fce8 <uart_debugg>
	/*charger read */
			Read_CAN_id0x18FF50E5();
 80052c2:	f005 fe53 	bl	800af6c <Read_CAN_id0x18FF50E5>
		Gtake_Rx_29bit();

#elif IRP
//		  SuperLooptime_Start();

		Irp_Rx_29bit();
 80052c6:	f005 fddf 	bl	800ae88 <Irp_Rx_29bit>

#endif


		//Read_CAN_BMS();//11bit
		Read_can_bms_29bit(); //29 bit
 80052ca:	f004 fdad 	bl	8009e28 <Read_can_bms_29bit>
		CAN_INPUT_HVAC();
 80052ce:	f005 fa2b 	bl	800a728 <CAN_INPUT_HVAC>
		CAN_Read_EPS();
 80052d2:	f005 f847 	bl	800a364 <CAN_Read_EPS>
		/*charger read */
		//Read_CAN_id0x18FF50E5();

		//ruff();

		uart_debugg("exit can_inputs");
 80052d6:	4803      	ldr	r0, [pc, #12]	; (80052e4 <Can_Inputs+0x2c>)
 80052d8:	f00a fd06 	bl	800fce8 <uart_debugg>
}
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	08013000 	.word	0x08013000
 80052e4:	08013010 	.word	0x08013010

080052e8 <read_temp>:

void read_temp(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0


	U18_read_temp();
 80052ec:	f000 fa80 	bl	80057f0 <U18_read_temp>



}
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop

080052f4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	460b      	mov	r3, r1
 80052fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	fa22 f303 	lsr.w	r3, r2, r3
 800530a:	f003 0301 	and.w	r3, r3, #1
}
 800530e:	4618      	mov	r0, r3
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop

0800531c <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	7c1b      	ldrb	r3, [r3, #16]
 800532c:	4610      	mov	r0, r2
 800532e:	4619      	mov	r1, r3
 8005330:	f7ff ffe0 	bl	80052f4 <XMC_GPIO_GetInput>
 8005334:	4603      	mov	r3, r0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop

08005340 <state_1_InputCapture>:
#include "Vcu_Config.h"
#include "IOExp_lib.h"
#include "Vcu_Init.h"

void state_1_InputCapture(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_1_IN)
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <state_1_InputCapture+0x30>)
 8005346:	781b      	ldrb	r3, [r3, #0]
 8005348:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_1_IN))
	{
		/* do the necessary task */
	}

	Switch_Ios_IN.brake_oil_IN = DIGITAL_IO_GetInput(&BRAKE_OIL_IN_D);
 800534a:	480a      	ldr	r0, [pc, #40]	; (8005374 <state_1_InputCapture+0x34>)
 800534c:	f7ff ffe6 	bl	800531c <DIGITAL_IO_GetInput>
 8005350:	4603      	mov	r3, r0
 8005352:	2b00      	cmp	r3, #0
 8005354:	bf14      	ite	ne
 8005356:	2301      	movne	r3, #1
 8005358:	2300      	moveq	r3, #0
 800535a:	b2da      	uxtb	r2, r3
 800535c:	4b06      	ldr	r3, [pc, #24]	; (8005378 <state_1_InputCapture+0x38>)
 800535e:	719a      	strb	r2, [r3, #6]

	/* check for io_expander */
	Io_Exp_U24();
 8005360:	f000 f80c 	bl	800537c <Io_Exp_U24>
	Io_Exp_U25();
 8005364:	f000 f8fe 	bl	8005564 <Io_Exp_U25>
	Io_Exp_U38();
 8005368:	f000 f954 	bl	8005614 <Io_Exp_U38>
	//Io_Exp_U48();

}
 800536c:	bd80      	pop	{r7, pc}
 800536e:	bf00      	nop
 8005370:	1fff5108 	.word	0x1fff5108
 8005374:	08013610 	.word	0x08013610
 8005378:	1fff4848 	.word	0x1fff4848

0800537c <Io_Exp_U24>:

void Io_Exp_U24(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
	//uart_debugg("in U24");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 8005382:	2300      	movs	r3, #0
 8005384:	60fb      	str	r3, [r7, #12]
 8005386:	2340      	movs	r3, #64	; 0x40
 8005388:	72fb      	strb	r3, [r7, #11]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 800538a:	7afb      	ldrb	r3, [r7, #11]
 800538c:	4870      	ldr	r0, [pc, #448]	; (8005550 <Io_Exp_U24+0x1d4>)
 800538e:	4619      	mov	r1, r3
 8005390:	2200      	movs	r2, #0
 8005392:	f7ff fea3 	bl	80050dc <IOExp_ReadPIN_LEVEL>
 8005396:	60f8      	str	r0, [r7, #12]

	/* port 0 */

	Combi_Switch_IN.low_beam_IN = (port_data[0] & (0x01));
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	f003 0301 	and.w	r3, r3, #1
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b6a      	ldr	r3, [pc, #424]	; (8005554 <Io_Exp_U24+0x1d8>)
 80053ac:	701a      	strb	r2, [r3, #0]

	Combi_Switch_IN.high_beam_IN = ((port_data[0] >> 1) & (0x01));
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	085b      	lsrs	r3, r3, #1
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2da      	uxtb	r2, r3
 80053c4:	4b63      	ldr	r3, [pc, #396]	; (8005554 <Io_Exp_U24+0x1d8>)
 80053c6:	705a      	strb	r2, [r3, #1]

	Combi_Switch_IN.pos_light_IN = ((port_data[0] >> 2) & (0x01));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	089b      	lsrs	r3, r3, #2
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	bf14      	ite	ne
 80053d8:	2301      	movne	r3, #1
 80053da:	2300      	moveq	r3, #0
 80053dc:	b2da      	uxtb	r2, r3
 80053de:	4b5d      	ldr	r3, [pc, #372]	; (8005554 <Io_Exp_U24+0x1d8>)
 80053e0:	709a      	strb	r2, [r3, #2]

	Combi_Switch_IN.left_indicator_IN = ((port_data[0] >> 3) & 0x01);
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	781b      	ldrb	r3, [r3, #0]
 80053e6:	08db      	lsrs	r3, r3, #3
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	f003 0301 	and.w	r3, r3, #1
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	bf14      	ite	ne
 80053f2:	2301      	movne	r3, #1
 80053f4:	2300      	moveq	r3, #0
 80053f6:	b2da      	uxtb	r2, r3
 80053f8:	4b56      	ldr	r3, [pc, #344]	; (8005554 <Io_Exp_U24+0x1d8>)
 80053fa:	70da      	strb	r2, [r3, #3]

	Combi_Switch_IN.right_indicator_IN = ((port_data[0] >> 4) & 0x01);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	091b      	lsrs	r3, r3, #4
 8005402:	b2db      	uxtb	r3, r3
 8005404:	f003 0301 	and.w	r3, r3, #1
 8005408:	2b00      	cmp	r3, #0
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2da      	uxtb	r2, r3
 8005412:	4b50      	ldr	r3, [pc, #320]	; (8005554 <Io_Exp_U24+0x1d8>)
 8005414:	711a      	strb	r2, [r3, #4]

	Combi_Switch_IN.hazzard_sw_IN = ((port_data[0] >> 5) & 0x01);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 0301 	and.w	r3, r3, #1
 8005422:	2b00      	cmp	r3, #0
 8005424:	bf14      	ite	ne
 8005426:	2301      	movne	r3, #1
 8005428:	2300      	moveq	r3, #0
 800542a:	b2da      	uxtb	r2, r3
 800542c:	4b49      	ldr	r3, [pc, #292]	; (8005554 <Io_Exp_U24+0x1d8>)
 800542e:	715a      	strb	r2, [r3, #5]

	Seat_Switch_IN.seat_belt_d_IN = ((port_data[0] >> 6) & 0x01);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	099b      	lsrs	r3, r3, #6
 8005436:	b2db      	uxtb	r3, r3
 8005438:	f003 0301 	and.w	r3, r3, #1
 800543c:	2b00      	cmp	r3, #0
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4b44      	ldr	r3, [pc, #272]	; (8005558 <Io_Exp_U24+0x1dc>)
 8005448:	701a      	strb	r2, [r3, #0]

	Seat_Switch_IN.seat_belt_p_IN = ((port_data[0] >> 7) & 0x01);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	781b      	ldrb	r3, [r3, #0]
 800544e:	09db      	lsrs	r3, r3, #7
 8005450:	b2db      	uxtb	r3, r3
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b00      	cmp	r3, #0
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2da      	uxtb	r2, r3
 8005460:	4b3d      	ldr	r3, [pc, #244]	; (8005558 <Io_Exp_U24+0x1dc>)
 8005462:	705a      	strb	r2, [r3, #1]
	/*    ***********************************************************   */

	/* port 1 */


	Seat_Switch_IN.seat_occup_p_IN = (port_data[1] & (0x01));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	3301      	adds	r3, #1
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b00      	cmp	r3, #0
 8005470:	bf14      	ite	ne
 8005472:	2301      	movne	r3, #1
 8005474:	2300      	moveq	r3, #0
 8005476:	b2da      	uxtb	r2, r3
 8005478:	4b37      	ldr	r3, [pc, #220]	; (8005558 <Io_Exp_U24+0x1dc>)
 800547a:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.door_lock_IN = ((port_data[1] >> 1) & (0x01));
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	3301      	adds	r3, #1
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	085b      	lsrs	r3, r3, #1
 8005484:	b2db      	uxtb	r3, r3
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	2b00      	cmp	r3, #0
 800548c:	bf14      	ite	ne
 800548e:	2301      	movne	r3, #1
 8005490:	2300      	moveq	r3, #0
 8005492:	b2da      	uxtb	r2, r3
 8005494:	4b31      	ldr	r3, [pc, #196]	; (800555c <Io_Exp_U24+0x1e0>)
 8005496:	701a      	strb	r2, [r3, #0]

	Door_Switch_IN.driver_door_IN = ((port_data[1] >> 2) & (0x01));
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	089b      	lsrs	r3, r3, #2
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	f003 0301 	and.w	r3, r3, #1
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	bf14      	ite	ne
 80054aa:	2301      	movne	r3, #1
 80054ac:	2300      	moveq	r3, #0
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	4b2a      	ldr	r3, [pc, #168]	; (800555c <Io_Exp_U24+0x1e0>)
 80054b2:	705a      	strb	r2, [r3, #1]

	Door_Switch_IN.passenger_door_IN = ((port_data[1] >> 3) & 0x01);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	3301      	adds	r3, #1
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	08db      	lsrs	r3, r3, #3
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	bf14      	ite	ne
 80054c6:	2301      	movne	r3, #1
 80054c8:	2300      	moveq	r3, #0
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <Io_Exp_U24+0x1e0>)
 80054ce:	709a      	strb	r2, [r3, #2]

	Door_Switch_IN.passenger_2r_IN = ((port_data[1] >> 4) & 0x01);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	3301      	adds	r3, #1
 80054d4:	781b      	ldrb	r3, [r3, #0]
 80054d6:	091b      	lsrs	r3, r3, #4
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	bf14      	ite	ne
 80054e2:	2301      	movne	r3, #1
 80054e4:	2300      	moveq	r3, #0
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b1c      	ldr	r3, [pc, #112]	; (800555c <Io_Exp_U24+0x1e0>)
 80054ea:	711a      	strb	r2, [r3, #4]

	Door_Switch_IN.bonnet_IN = ((port_data[1] >> 5) & 0x01);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3301      	adds	r3, #1
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	095b      	lsrs	r3, r3, #5
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	bf14      	ite	ne
 80054fe:	2301      	movne	r3, #1
 8005500:	2300      	moveq	r3, #0
 8005502:	b2da      	uxtb	r2, r3
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <Io_Exp_U24+0x1e0>)
 8005506:	719a      	strb	r2, [r3, #6]

	Door_Switch_IN.hatch_IN = ((port_data[1] >> 6) & 0x01);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	3301      	adds	r3, #1
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	099b      	lsrs	r3, r3, #6
 8005510:	b2db      	uxtb	r3, r3
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	bf14      	ite	ne
 800551a:	2301      	movne	r3, #1
 800551c:	2300      	moveq	r3, #0
 800551e:	b2da      	uxtb	r2, r3
 8005520:	4b0e      	ldr	r3, [pc, #56]	; (800555c <Io_Exp_U24+0x1e0>)
 8005522:	715a      	strb	r2, [r3, #5]

	Door_Switch_IN.passenger_2l_IN = ((port_data[1] >> 7) & 0x01);
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	3301      	adds	r3, #1
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	09db      	lsrs	r3, r3, #7
 800552c:	b2db      	uxtb	r3, r3
 800552e:	f003 0301 	and.w	r3, r3, #1
 8005532:	2b00      	cmp	r3, #0
 8005534:	bf14      	ite	ne
 8005536:	2301      	movne	r3, #1
 8005538:	2300      	moveq	r3, #0
 800553a:	b2da      	uxtb	r2, r3
 800553c:	4b07      	ldr	r3, [pc, #28]	; (800555c <Io_Exp_U24+0x1e0>)
 800553e:	70da      	strb	r2, [r3, #3]

	char str[] = "exit U24";
 8005540:	4a07      	ldr	r2, [pc, #28]	; (8005560 <Io_Exp_U24+0x1e4>)
 8005542:	463b      	mov	r3, r7
 8005544:	ca07      	ldmia	r2, {r0, r1, r2}
 8005546:	c303      	stmia	r3!, {r0, r1}
 8005548:	701a      	strb	r2, [r3, #0]
//	uart_debugg(str);

}
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	1ffe8a5c 	.word	0x1ffe8a5c
 8005554:	1fff48a8 	.word	0x1fff48a8
 8005558:	1fff47ec 	.word	0x1fff47ec
 800555c:	1fff48bc 	.word	0x1fff48bc
 8005560:	08013020 	.word	0x08013020

08005564 <Io_Exp_U25>:

void Io_Exp_U25(void)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0

	//uart_debugg("in U25");

	uint8_t *port_data = NULL, IOExp_Address = 0x42;
 800556a:	2300      	movs	r3, #0
 800556c:	607b      	str	r3, [r7, #4]
 800556e:	2342      	movs	r3, #66	; 0x42
 8005570:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_0, IOExp_Address, 0x00);
 8005572:	78fb      	ldrb	r3, [r7, #3]
 8005574:	4824      	ldr	r0, [pc, #144]	; (8005608 <Io_Exp_U25+0xa4>)
 8005576:	4619      	mov	r1, r3
 8005578:	2200      	movs	r2, #0
 800557a:	f7ff fdaf 	bl	80050dc <IOExp_ReadPIN_LEVEL>
 800557e:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.ac_on_in = ((port_data[0] >> 1) & (0x01));
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	781b      	ldrb	r3, [r3, #0]
 8005584:	085b      	lsrs	r3, r3, #1
 8005586:	b2db      	uxtb	r3, r3
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	bf14      	ite	ne
 8005590:	2301      	movne	r3, #1
 8005592:	2300      	moveq	r3, #0
 8005594:	b2da      	uxtb	r2, r3
 8005596:	4b1d      	ldr	r3, [pc, #116]	; (800560c <Io_Exp_U25+0xa8>)
 8005598:	739a      	strb	r2, [r3, #14]

	Hvac_IN.blower_speed1_IN = ((port_data[0] >> 2) & (0x01));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	781b      	ldrb	r3, [r3, #0]
 800559e:	089b      	lsrs	r3, r3, #2
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	f003 0301 	and.w	r3, r3, #1
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	bf14      	ite	ne
 80055aa:	2301      	movne	r3, #1
 80055ac:	2300      	moveq	r3, #0
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	4b17      	ldr	r3, [pc, #92]	; (8005610 <Io_Exp_U25+0xac>)
 80055b2:	711a      	strb	r2, [r3, #4]

	Hvac_IN.blower_speed2_IN = ((port_data[0] >> 3) & 0x01);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	08db      	lsrs	r3, r3, #3
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf14      	ite	ne
 80055c4:	2301      	movne	r3, #1
 80055c6:	2300      	moveq	r3, #0
 80055c8:	b2da      	uxtb	r2, r3
 80055ca:	4b11      	ldr	r3, [pc, #68]	; (8005610 <Io_Exp_U25+0xac>)
 80055cc:	715a      	strb	r2, [r3, #5]

	Hvac_IN.blower_speed3_IN = ((port_data[0] >> 4) & 0x01);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	781b      	ldrb	r3, [r3, #0]
 80055d2:	091b      	lsrs	r3, r3, #4
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f003 0301 	and.w	r3, r3, #1
 80055da:	2b00      	cmp	r3, #0
 80055dc:	bf14      	ite	ne
 80055de:	2301      	movne	r3, #1
 80055e0:	2300      	moveq	r3, #0
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	4b0a      	ldr	r3, [pc, #40]	; (8005610 <Io_Exp_U25+0xac>)
 80055e6:	719a      	strb	r2, [r3, #6]

	Hvac_IN.circulation_on_off = ((port_data[0] >> 5) & 0x01);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	b2db      	uxtb	r3, r3
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	bf14      	ite	ne
 80055f8:	2301      	movne	r3, #1
 80055fa:	2300      	moveq	r3, #0
 80055fc:	b2da      	uxtb	r2, r3
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <Io_Exp_U25+0xac>)
 8005600:	721a      	strb	r2, [r3, #8]

	/* port 1 */

//
	//uart_debugg("exit U25");
}
 8005602:	3708      	adds	r7, #8
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	1ffe8a5c 	.word	0x1ffe8a5c
 800560c:	1fff4848 	.word	0x1fff4848
 8005610:	1fff4860 	.word	0x1fff4860

08005614 <Io_Exp_U38>:

void Io_Exp_U38(void)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
	//uart_debugg("in U38");

	uint8_t *port_data = NULL, IOExp_Address = 0x40;
 800561a:	2300      	movs	r3, #0
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	70fb      	strb	r3, [r7, #3]

	port_data = IOExp_ReadPIN_LEVEL(&I2C_MASTER_1, IOExp_Address, 0x00);
 8005622:	78fb      	ldrb	r3, [r7, #3]
 8005624:	4824      	ldr	r0, [pc, #144]	; (80056b8 <Io_Exp_U38+0xa4>)
 8005626:	4619      	mov	r1, r3
 8005628:	2200      	movs	r2, #0
 800562a:	f7ff fd57 	bl	80050dc <IOExp_ReadPIN_LEVEL>
 800562e:	6078      	str	r0, [r7, #4]


	/* port 0 */

	Switch_Ios_IN.power_window_in_d = ((port_data[0] >> 4) & 0x01);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	781b      	ldrb	r3, [r3, #0]
 8005634:	091b      	lsrs	r3, r3, #4
 8005636:	b2db      	uxtb	r3, r3
 8005638:	f003 0301 	and.w	r3, r3, #1
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2da      	uxtb	r2, r3
 8005646:	4b1d      	ldr	r3, [pc, #116]	; (80056bc <Io_Exp_U38+0xa8>)
 8005648:	741a      	strb	r2, [r3, #16]

	Aux_Inputs.AUX_IN4_D = ((port_data[0] >> 5) & 0x01);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	781b      	ldrb	r3, [r3, #0]
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	b2db      	uxtb	r3, r3
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	bf14      	ite	ne
 800565a:	2301      	movne	r3, #1
 800565c:	2300      	moveq	r3, #0
 800565e:	b2da      	uxtb	r2, r3
 8005660:	4b17      	ldr	r3, [pc, #92]	; (80056c0 <Io_Exp_U38+0xac>)
 8005662:	709a      	strb	r2, [r3, #2]

	Aux_Inputs.AUX_IN5_D = ((port_data[0] >> 6) & 0x01);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	099b      	lsrs	r3, r3, #6
 800566a:	b2db      	uxtb	r3, r3
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	bf14      	ite	ne
 8005674:	2301      	movne	r3, #1
 8005676:	2300      	moveq	r3, #0
 8005678:	b2da      	uxtb	r2, r3
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <Io_Exp_U38+0xac>)
 800567c:	70da      	strb	r2, [r3, #3]

	Switch_Ios_IN.orvm_fold_IN = ((port_data[0] >> 7) & 0x01);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	781b      	ldrb	r3, [r3, #0]
 8005682:	09db      	lsrs	r3, r3, #7
 8005684:	b2db      	uxtb	r3, r3
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	bf14      	ite	ne
 800568e:	2301      	movne	r3, #1
 8005690:	2300      	moveq	r3, #0
 8005692:	b2da      	uxtb	r2, r3
 8005694:	4b09      	ldr	r3, [pc, #36]	; (80056bc <Io_Exp_U38+0xa8>)
 8005696:	709a      	strb	r2, [r3, #2]

	/*    ***********************************************************   */

	/* port 1 */

	Switch_Ios_IN.orvm_open_IN = (port_data[1] & (0x01));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	3301      	adds	r3, #1
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	f003 0301 	and.w	r3, r3, #1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	bf14      	ite	ne
 80056a6:	2301      	movne	r3, #1
 80056a8:	2300      	moveq	r3, #0
 80056aa:	b2da      	uxtb	r2, r3
 80056ac:	4b03      	ldr	r3, [pc, #12]	; (80056bc <Io_Exp_U38+0xa8>)
 80056ae:	70da      	strb	r2, [r3, #3]

	//uart_debugg("exit U38");

}
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	1ffe8a68 	.word	0x1ffe8a68
 80056bc:	1fff4848 	.word	0x1fff4848
 80056c0:	1fff47e4 	.word	0x1fff47e4

080056c4 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	460b      	mov	r3, r1
 80056ce:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	fa22 f303 	lsr.w	r3, r2, r3
 80056da:	f003 0301 	and.w	r3, r3, #1
}
 80056de:	4618      	mov	r0, r3
 80056e0:	370c      	adds	r7, #12
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
 80056ea:	bf00      	nop

080056ec <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	7c1b      	ldrb	r3, [r3, #16]
 80056fc:	4610      	mov	r0, r2
 80056fe:	4619      	mov	r1, r3
 8005700:	f7ff ffe0 	bl	80056c4 <XMC_GPIO_GetInput>
 8005704:	4603      	mov	r3, r0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3708      	adds	r7, #8
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop

08005710 <State_2_InputCapture>:
 */
#include "InputCapture.h"
#include "Vcu_Config.h"

void State_2_InputCapture(void)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	af00      	add	r7, sp, #0
	if(Vcu_InPuts.IGNITION_2_IN)
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <State_2_InputCapture+0x10>)
 8005716:	785b      	ldrb	r3, [r3, #1]
 8005718:	2b00      	cmp	r3, #0
	else if(!(Vcu_InPuts.IGNITION_2_IN))
	{

	}

	Read_State2_inputs();
 800571a:	f000 f803 	bl	8005724 <Read_State2_inputs>

}
 800571e:	bd80      	pop	{r7, pc}
 8005720:	1fff5108 	.word	0x1fff5108

08005724 <Read_State2_inputs>:
void Read_State2_inputs(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
	Switch_Ios_IN.brake_sw_in_d = DIGITAL_IO_GetInput(&BRAKE_SW_IN_D);
 8005728:	481b      	ldr	r0, [pc, #108]	; (8005798 <Read_State2_inputs+0x74>)
 800572a:	f7ff ffdf 	bl	80056ec <DIGITAL_IO_GetInput>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	bf14      	ite	ne
 8005734:	2301      	movne	r3, #1
 8005736:	2300      	moveq	r3, #0
 8005738:	b2da      	uxtb	r2, r3
 800573a:	4b18      	ldr	r3, [pc, #96]	; (800579c <Read_State2_inputs+0x78>)
 800573c:	749a      	strb	r2, [r3, #18]

	/* gear inputs */
	Switch_Ios_IN.gear_sw1_IN = DIGITAL_IO_GetInput(&GEAR_SW1_IN_D); //Neutral
 800573e:	4818      	ldr	r0, [pc, #96]	; (80057a0 <Read_State2_inputs+0x7c>)
 8005740:	f7ff ffd4 	bl	80056ec <DIGITAL_IO_GetInput>
 8005744:	4603      	mov	r3, r0
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2da      	uxtb	r2, r3
 8005750:	4b12      	ldr	r3, [pc, #72]	; (800579c <Read_State2_inputs+0x78>)
 8005752:	725a      	strb	r2, [r3, #9]
	Switch_Ios_IN.gear_sw2_IN = DIGITAL_IO_GetInput(&GEAR_SW2_IN_D); //forward
 8005754:	4813      	ldr	r0, [pc, #76]	; (80057a4 <Read_State2_inputs+0x80>)
 8005756:	f7ff ffc9 	bl	80056ec <DIGITAL_IO_GetInput>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	bf14      	ite	ne
 8005760:	2301      	movne	r3, #1
 8005762:	2300      	moveq	r3, #0
 8005764:	b2da      	uxtb	r2, r3
 8005766:	4b0d      	ldr	r3, [pc, #52]	; (800579c <Read_State2_inputs+0x78>)
 8005768:	729a      	strb	r2, [r3, #10]
	Switch_Ios_IN.gear_sw3_IN = DIGITAL_IO_GetInput(&GEAR_SW3_IN_D); //reverse
 800576a:	480f      	ldr	r0, [pc, #60]	; (80057a8 <Read_State2_inputs+0x84>)
 800576c:	f7ff ffbe 	bl	80056ec <DIGITAL_IO_GetInput>
 8005770:	4603      	mov	r3, r0
 8005772:	2b00      	cmp	r3, #0
 8005774:	bf14      	ite	ne
 8005776:	2301      	movne	r3, #1
 8005778:	2300      	moveq	r3, #0
 800577a:	b2da      	uxtb	r2, r3
 800577c:	4b07      	ldr	r3, [pc, #28]	; (800579c <Read_State2_inputs+0x78>)
 800577e:	72da      	strb	r2, [r3, #11]
	Switch_Ios_IN.gear_sw4_IN = DIGITAL_IO_GetInput(&GEAR_SW4_IN_D); //parking
 8005780:	480a      	ldr	r0, [pc, #40]	; (80057ac <Read_State2_inputs+0x88>)
 8005782:	f7ff ffb3 	bl	80056ec <DIGITAL_IO_GetInput>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	bf14      	ite	ne
 800578c:	2301      	movne	r3, #1
 800578e:	2300      	moveq	r3, #0
 8005790:	b2da      	uxtb	r2, r3
 8005792:	4b02      	ldr	r3, [pc, #8]	; (800579c <Read_State2_inputs+0x78>)
 8005794:	731a      	strb	r2, [r3, #12]

	/* ig2 Lights */

}
 8005796:	bd80      	pop	{r7, pc}
 8005798:	0801369c 	.word	0x0801369c
 800579c:	1fff4848 	.word	0x1fff4848
 80057a0:	080136c4 	.word	0x080136c4
 80057a4:	080136d8 	.word	0x080136d8
 80057a8:	080136ec 	.word	0x080136ec
 80057ac:	08013700 	.word	0x08013700

080057b0 <I2C_MASTER_IsTxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsTxBusy(I2C_MASTER_t * const handle)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTxBusy: invalid handle", (handle != NULL));
  return handle->runtime->tx_busy;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80057c0:	b2db      	uxtb	r3, r3
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	370c      	adds	r7, #12
 80057c6:	46bd      	mov	sp, r7
 80057c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057cc:	4770      	bx	lr
 80057ce:	bf00      	nop

080057d0 <I2C_MASTER_IsRxBusy>:
 *
 * @endcode<BR> </p>
 *
 */
__STATIC_INLINE bool I2C_MASTER_IsRxBusy(I2C_MASTER_t * const handle)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRxBusy: invalid handle", (handle != NULL));
  return handle->runtime->rx_busy;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80057e0:	b2db      	uxtb	r3, r3
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop

080057f0 <U18_read_temp>:
#define U6_address 0x90
#define U9_address 0x92


void U18_read_temp(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
	uart_debugg("in temp");
 80057f4:	4805      	ldr	r0, [pc, #20]	; (800580c <U18_read_temp+0x1c>)
 80057f6:	f00a fa77 	bl	800fce8 <uart_debugg>
	U18_MotorTemp_read();
 80057fa:	f000 f80b 	bl	8005814 <U18_MotorTemp_read>
	U18_CabinTemp_read();
 80057fe:	f000 f8e7 	bl	80059d0 <U18_CabinTemp_read>
	//U18_McTemp_read();
	//U18_BatteryTemp_read();
	//U18_throttle_read();
	uart_debugg("exit temp");
 8005802:	4803      	ldr	r0, [pc, #12]	; (8005810 <U18_read_temp+0x20>)
 8005804:	f00a fa70 	bl	800fce8 <uart_debugg>
}
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop
 800580c:	0801302c 	.word	0x0801302c
 8005810:	08013034 	.word	0x08013034

08005814 <U18_MotorTemp_read>:
	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);

	//rx_buff &= 0x0fff;
}
void U18_MotorTemp_read(void)
{
 8005814:	b590      	push	{r4, r7, lr}
 8005816:	b091      	sub	sp, #68	; 0x44
 8005818:	af04      	add	r7, sp, #16
	uint8_t command_byte= 0x1f;
	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U38_address, &command_byte, 1, stop);
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_0));*/


	bool start = true, stop = 0, ack = true;
 800581a:	2301      	movs	r3, #1
 800581c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8005820:	2300      	movs	r3, #0
 8005822:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8005826:	2301      	movs	r3, #1
 8005828:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	float ans = 0, Resistance = 0;
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	62bb      	str	r3, [r7, #40]	; 0x28
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 8005838:	f242 7310 	movw	r3, #10000	; 0x2710
 800583c:	623b      	str	r3, [r7, #32]
 800583e:	f242 7310 	movw	r3, #10000	; 0x2710
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005848:	61bb      	str	r3, [r7, #24]
 800584a:	2319      	movs	r3, #25
 800584c:	617b      	str	r3, [r7, #20]
	uint8_t command_byte= 0x9f, rx_buff[2] = {0};
 800584e:	239f      	movs	r3, #159	; 0x9f
 8005850:	72fb      	strb	r3, [r7, #11]
 8005852:	2300      	movs	r3, #0
 8005854:	813b      	strh	r3, [r7, #8]
	uint16_t rx = 0;
 8005856:	2300      	movs	r3, #0
 8005858:	827b      	strh	r3, [r7, #18]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 800585a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800585e:	f107 040b 	add.w	r4, r7, #11
 8005862:	2301      	movs	r3, #1
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	4852      	ldr	r0, [pc, #328]	; (80059b8 <U18_MotorTemp_read+0x1a4>)
 800586e:	4611      	mov	r1, r2
 8005870:	2294      	movs	r2, #148	; 0x94
 8005872:	4623      	mov	r3, r4
 8005874:	f002 f9b4 	bl	8007be0 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005878:	bf00      	nop
 800587a:	484f      	ldr	r0, [pc, #316]	; (80059b8 <U18_MotorTemp_read+0x1a4>)
 800587c:	f7ff ff98 	bl	80057b0 <I2C_MASTER_IsTxBusy>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1f9      	bne.n	800587a <U18_MotorTemp_read+0x66>

	stop = true;
 8005886:	2301      	movs	r3, #1
 8005888:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 800588c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005890:	f107 0408 	add.w	r4, r7, #8
 8005894:	2302      	movs	r3, #2
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800589c:	9301      	str	r3, [sp, #4]
 800589e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	4844      	ldr	r0, [pc, #272]	; (80059b8 <U18_MotorTemp_read+0x1a4>)
 80058a6:	4611      	mov	r1, r2
 80058a8:	2294      	movs	r2, #148	; 0x94
 80058aa:	4623      	mov	r3, r4
 80058ac:	f002 f9c2 	bl	8007c34 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 80058b0:	bf00      	nop
 80058b2:	4841      	ldr	r0, [pc, #260]	; (80059b8 <U18_MotorTemp_read+0x1a4>)
 80058b4:	f7ff ff8c 	bl	80057d0 <I2C_MASTER_IsRxBusy>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1f9      	bne.n	80058b2 <U18_MotorTemp_read+0x9e>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 80058be:	7a3b      	ldrb	r3, [r7, #8]
 80058c0:	021b      	lsls	r3, r3, #8
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	7a7b      	ldrb	r3, [r7, #9]
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	4313      	orrs	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	827b      	strh	r3, [r7, #18]
	rx &= 0x0fff;
 80058ce:	8a7b      	ldrh	r3, [r7, #18]
 80058d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058d4:	827b      	strh	r3, [r7, #18]

	Resistance = ((float)4095.0/(float)rx) - 1;
 80058d6:	8a7b      	ldrh	r3, [r7, #18]
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058e0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80059bc <U18_MotorTemp_read+0x1a8>
 80058e4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 80058e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 80058ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80058f0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	Resistance = ((float)10000.0/(float)Resistance);
 80058f4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80059c0 <U18_MotorTemp_read+0x1ac>
 80058f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80058fc:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005900:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	Resistance /= (float)2;
 8005904:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005908:	eeb0 7a00 	vmov.f32	s14, #0
 800590c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005910:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005914:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8005918:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80059c0 <U18_MotorTemp_read+0x1ac>
 800591c:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005920:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f00b f887 	bl	8010a38 <__aeabi_f2d>
 800592a:	4602      	mov	r2, r0
 800592c:	460b      	mov	r3, r1
 800592e:	4610      	mov	r0, r2
 8005930:	4619      	mov	r1, r3
 8005932:	f00a fc81 	bl	8010238 <log>
 8005936:	4602      	mov	r2, r0
 8005938:	460b      	mov	r3, r1
 800593a:	4610      	mov	r0, r2
 800593c:	4619      	mov	r1, r3
 800593e:	f00b fbb1 	bl	80110a4 <__aeabi_d2f>
 8005942:	4603      	mov	r3, r0
 8005944:	60fb      	str	r3, [r7, #12]
	steinhart /= (float)3950.0;
 8005946:	edd7 7a03 	vldr	s15, [r7, #12]
 800594a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80059c4 <U18_MotorTemp_read+0x1b0>
 800594e:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005952:	edc7 7a03 	vstr	s15, [r7, #12]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	ee07 3a90 	vmov	s15, r3
 800595c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005960:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80059c8 <U18_MotorTemp_read+0x1b4>
 8005964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005968:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 800596c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005970:	ed97 7a03 	vldr	s14, [r7, #12]
 8005974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005978:	edc7 7a03 	vstr	s15, [r7, #12]

	steinhart = (float)1.0 / steinhart;
 800597c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005980:	edd7 7a03 	vldr	s15, [r7, #12]
 8005984:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005988:	edc7 7a03 	vstr	s15, [r7, #12]
	ambient_temp =	steinhart -= (float)273.15;
 800598c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005990:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80059c8 <U18_MotorTemp_read+0x1b4>
 8005994:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005998:	edc7 7a03 	vstr	s15, [r7, #12]
 800599c:	edd7 7a03 	vldr	s15, [r7, #12]
 80059a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80059a8:	793b      	ldrb	r3, [r7, #4]
 80059aa:	b2da      	uxtb	r2, r3
 80059ac:	4b07      	ldr	r3, [pc, #28]	; (80059cc <U18_MotorTemp_read+0x1b8>)
 80059ae:	701a      	strb	r2, [r3, #0]

}
 80059b0:	3734      	adds	r7, #52	; 0x34
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd90      	pop	{r4, r7, pc}
 80059b6:	bf00      	nop
 80059b8:	1ffe8a68 	.word	0x1ffe8a68
 80059bc:	457ff000 	.word	0x457ff000
 80059c0:	461c4000 	.word	0x461c4000
 80059c4:	4576e000 	.word	0x4576e000
 80059c8:	43889333 	.word	0x43889333
 80059cc:	1fff48d6 	.word	0x1fff48d6

080059d0 <U18_CabinTemp_read>:

void U18_CabinTemp_read(void)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b08f      	sub	sp, #60	; 0x3c
 80059d4:	af04      	add	r7, sp, #16

	bool start = true, stop = 0, ack = true;
 80059d6:	2301      	movs	r3, #1
 80059d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80059dc:	2300      	movs	r3, #0
 80059de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80059e2:	2301      	movs	r3, #1
 80059e4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	float ans = 0, Resistance = 0;
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	623b      	str	r3, [r7, #32]
 80059ee:	f04f 0300 	mov.w	r3, #0
 80059f2:	61fb      	str	r3, [r7, #28]
	unsigned int SERIESRESISTOR = 10000, NOMINAL_RESISTANCE = 10000, BCOEFFICIENT = 3950, NOMINAL_TEMPERATURE = 25;
 80059f4:	f242 7310 	movw	r3, #10000	; 0x2710
 80059f8:	61bb      	str	r3, [r7, #24]
 80059fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80059fe:	617b      	str	r3, [r7, #20]
 8005a00:	f640 736e 	movw	r3, #3950	; 0xf6e
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	2319      	movs	r3, #25
 8005a08:	60fb      	str	r3, [r7, #12]
	uint8_t command_byte= 0xdc, rx_buff[2] = {0};
 8005a0a:	23dc      	movs	r3, #220	; 0xdc
 8005a0c:	70fb      	strb	r3, [r7, #3]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	803b      	strh	r3, [r7, #0]
	uint16_t rx = 0;
 8005a12:	2300      	movs	r3, #0
 8005a14:	817b      	strh	r3, [r7, #10]

	I2C_MASTER_Transmit(&I2C_MASTER_1, start, U18_address, &command_byte, 1, stop);
 8005a16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a1a:	1cfc      	adds	r4, r7, #3
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	9300      	str	r3, [sp, #0]
 8005a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	484d      	ldr	r0, [pc, #308]	; (8005b5c <U18_CabinTemp_read+0x18c>)
 8005a28:	4611      	mov	r1, r2
 8005a2a:	2294      	movs	r2, #148	; 0x94
 8005a2c:	4623      	mov	r3, r4
 8005a2e:	f002 f8d7 	bl	8007be0 <I2C_MASTER_Transmit>
	while(I2C_MASTER_IsTxBusy(&I2C_MASTER_1));
 8005a32:	bf00      	nop
 8005a34:	4849      	ldr	r0, [pc, #292]	; (8005b5c <U18_CabinTemp_read+0x18c>)
 8005a36:	f7ff febb 	bl	80057b0 <I2C_MASTER_IsTxBusy>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d1f9      	bne.n	8005a34 <U18_CabinTemp_read+0x64>

	stop = true;
 8005a40:	2301      	movs	r3, #1
 8005a42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	I2C_MASTER_Receive(&I2C_MASTER_1, start, U18_address, rx_buff, 2, stop, ack);
 8005a46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8005a4a:	463c      	mov	r4, r7
 8005a4c:	2302      	movs	r3, #2
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8005a5a:	9302      	str	r3, [sp, #8]
 8005a5c:	483f      	ldr	r0, [pc, #252]	; (8005b5c <U18_CabinTemp_read+0x18c>)
 8005a5e:	4611      	mov	r1, r2
 8005a60:	2294      	movs	r2, #148	; 0x94
 8005a62:	4623      	mov	r3, r4
 8005a64:	f002 f8e6 	bl	8007c34 <I2C_MASTER_Receive>
	while(I2C_MASTER_IsRxBusy(&I2C_MASTER_1));
 8005a68:	bf00      	nop
 8005a6a:	483c      	ldr	r0, [pc, #240]	; (8005b5c <U18_CabinTemp_read+0x18c>)
 8005a6c:	f7ff feb0 	bl	80057d0 <I2C_MASTER_IsRxBusy>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d1f9      	bne.n	8005a6a <U18_CabinTemp_read+0x9a>

	rx = ((uint16_t)rx_buff[0] << 8) | rx_buff[1];
 8005a76:	783b      	ldrb	r3, [r7, #0]
 8005a78:	021b      	lsls	r3, r3, #8
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	787b      	ldrb	r3, [r7, #1]
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	4313      	orrs	r3, r2
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	817b      	strh	r3, [r7, #10]
	rx &= 0x0fff;
 8005a86:	897b      	ldrh	r3, [r7, #10]
 8005a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a8c:	817b      	strh	r3, [r7, #10]

	Resistance = ((float)4095.0/(float)rx) - 1;
 8005a8e:	897b      	ldrh	r3, [r7, #10]
 8005a90:	ee07 3a90 	vmov	s15, r3
 8005a94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a98:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005b60 <U18_CabinTemp_read+0x190>
 8005a9c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005aa4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005aa8:	edc7 7a07 	vstr	s15, [r7, #28]
	Resistance = ((float)10000.0/(float)Resistance);
 8005aac:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8005b64 <U18_CabinTemp_read+0x194>
 8005ab0:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ab4:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005ab8:	edc7 7a07 	vstr	s15, [r7, #28]

	Resistance /= (float)2;
 8005abc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ac0:	eeb0 7a00 	vmov.f32	s14, #0
 8005ac4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005ac8:	edc7 7a07 	vstr	s15, [r7, #28]

	float steinhart;

	steinhart = (float)Resistance / (float)10000.0; // (R/Ro)
 8005acc:	edd7 7a07 	vldr	s15, [r7, #28]
 8005ad0:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8005b64 <U18_CabinTemp_read+0x194>
 8005ad4:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005ad8:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart = (float)log(steinhart); // ln(R/Ro)
 8005adc:	6878      	ldr	r0, [r7, #4]
 8005ade:	f00a ffab 	bl	8010a38 <__aeabi_f2d>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	4610      	mov	r0, r2
 8005ae8:	4619      	mov	r1, r3
 8005aea:	f00a fba5 	bl	8010238 <log>
 8005aee:	4602      	mov	r2, r0
 8005af0:	460b      	mov	r3, r1
 8005af2:	4610      	mov	r0, r2
 8005af4:	4619      	mov	r1, r3
 8005af6:	f00b fad5 	bl	80110a4 <__aeabi_d2f>
 8005afa:	4603      	mov	r3, r0
 8005afc:	607b      	str	r3, [r7, #4]
	steinhart /= (float)3950.0;
 8005afe:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b02:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8005b68 <U18_CabinTemp_read+0x198>
 8005b06:	eec7 7a87 	vdiv.f32	s15, s15, s14
 8005b0a:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart += (float)1.0 / (NOMINAL_TEMPERATURE + (float)273.15); // + (1/To)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	ee07 3a90 	vmov	s15, r3
 8005b14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b18:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005b6c <U18_CabinTemp_read+0x19c>
 8005b1c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005b20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005b24:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b30:	edc7 7a01 	vstr	s15, [r7, #4]

	steinhart = (float)1.0 / steinhart;
 8005b34:	eeb7 7a00 	vmov.f32	s14, #112	; 0x70
 8005b38:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b3c:	eec7 7a27 	vdiv.f32	s15, s14, s15
 8005b40:	edc7 7a01 	vstr	s15, [r7, #4]
	steinhart -= (float)273.15;
 8005b44:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b48:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005b6c <U18_CabinTemp_read+0x19c>
 8005b4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005b50:	edc7 7a01 	vstr	s15, [r7, #4]

}
 8005b54:	372c      	adds	r7, #44	; 0x2c
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd90      	pop	{r4, r7, pc}
 8005b5a:	bf00      	nop
 8005b5c:	1ffe8a68 	.word	0x1ffe8a68
 8005b60:	457ff000 	.word	0x457ff000
 8005b64:	461c4000 	.word	0x461c4000
 8005b68:	4576e000 	.word	0x4576e000
 8005b6c:	43889333 	.word	0x43889333

08005b70 <WATCHDOG_Init>:
  return (version);
}

/* Initializes the watchdog timer with the generated configuration */
WATCHDOG_STATUS_t WATCHDOG_Init(WATCHDOG_t *handle)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;

  XMC_ASSERT("WATCHDOG_Init:handle NULL" , (handle != NULL));

  status = WATCHDOG_STATUS_SUCCESS;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	73fb      	strb	r3, [r7, #15]

  /* Check for app instance is initialized or not */
  if (false == handle->initialized)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	791b      	ldrb	r3, [r3, #4]
 8005b80:	f083 0301 	eor.w	r3, r3, #1
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00f      	beq.n	8005baa <WATCHDOG_Init+0x3a>
  {
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      /* Service Event Handling */
      status = WATCHDOG_lPrewarning_Configure(handle);
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	f000 f812 	bl	8005bb4 <WATCHDOG_lPrewarning_Configure>
 8005b90:	4603      	mov	r3, r0
 8005b92:	73fb      	strb	r3, [r7, #15]
      if(WATCHDOG_STATUS_FAILURE != status)
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d007      	beq.n	8005baa <WATCHDOG_Init+0x3a>
      {
#endif
        /* Initialize the WDT peripheral */
        XMC_WDT_Init(handle->config);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7ff f8f2 	bl	8004d88 <XMC_WDT_Init>
        /* Update the initialization flag */
        handle->initialized = true;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	711a      	strb	r2, [r3, #4]
#if (WATCHDOG_PREWARNING_CHECK == 1U)
      }
#endif
  }

  return (status);
 8005baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3710      	adds	r7, #16
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <WATCHDOG_lPrewarning_Configure>:
#if (WATCHDOG_PREWARNING_CHECK == 1U)
/*
 * Register the Pre-warning event with GLOBAL_SCU APP
 */
WATCHDOG_STATUS_t WATCHDOG_lPrewarning_Configure(WATCHDOG_t *handle)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  WATCHDOG_STATUS_t status;
  status = WATCHDOG_STATUS_SUCCESS;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	73fb      	strb	r3, [r7, #15]
      status = WATCHDOG_STATUS_FAILURE;
    }
#endif

#if (WATCHDOG_EVENT_VIA_NMI == 1U)
    XMC_SCU_INTERRUPT_EnableEvent((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005bc0:	2001      	movs	r0, #1
 8005bc2:	f7fc fb0f 	bl	80021e4 <XMC_SCU_INTERRUPT_EnableEvent>
    XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 8005bc6:	2001      	movs	r0, #1
 8005bc8:	f7fc fbb4 	bl	8002334 <XMC_SCU_INTERRUPT_EnableNmiRequest>
#endif

  return (status);
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop

08005bd8 <XMC_USIC_CH_TXFIFO_Flush>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_GetLevel() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TXFIFO_Flush(XMC_USIC_CH_t *const channel)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
  channel->TRBSCR = (uint32_t)USIC_CH_TRBSCR_FLUSHTB_Msk;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005be6:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
}
 8005bea:	370c      	adds	r7, #12
 8005bec:	46bd      	mov	sp, r7
 8005bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf2:	4770      	bx	lr

08005bf4 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b083      	sub	sp, #12
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005c02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	bf14      	ite	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	2300      	moveq	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8005c2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	bf14      	ite	ne
 8005c32:	2301      	movne	r3, #1
 8005c34:	2300      	moveq	r3, #0
 8005c36:	b2db      	uxtb	r3, r3
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <UART_Init>:
 *          UART_SUCCESS: for successful UART initialization.<BR>
 *          UART_STATUS_FAILURE  : If UART initialization fails.<BR>
 *
 */
UART_STATUS_t UART_Init(const UART_t *const handle)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("UART_Init : UART APP handle invalid", (((handle != NULL)&&
      (handle->config != NULL)) &&((handle->config->fptr_uart_config != NULL)&&
      (handle->runtime != NULL))));

  /*Initialize the multiplexers required for UART configuration*/
  status = handle->config->fptr_uart_config();
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	4798      	blx	r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	73fb      	strb	r3, [r7, #15]

  return status;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3710      	adds	r7, #16
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}
 8005c66:	bf00      	nop

08005c68 <UART_Transmit>:
 *          UART_STATUS_BUFFER_INVALID: Either if buffer is NULL or count is 0.<BR>
 *          UART_STATUS_MODE_MISMATCH: If the configured mode is invalid.<BR>
 *
 */
UART_STATUS_t UART_Transmit(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_MODE_MISMATCH;
 8005c74:	2304      	movs	r3, #4
 8005c76:	75fb      	strb	r3, [r7, #23]

  switch(handle->config->transmit_mode)
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d000      	beq.n	8005c86 <UART_Transmit+0x1e>
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
    break;
#endif
  default:
    break;
 8005c84:	e007      	b.n	8005c96 <UART_Transmit+0x2e>
    ret_stat = UART_StartTransmitDMA(handle, data_ptr, count);
    break;
#endif
#ifdef UART_TX_DIRECT_USED
  case UART_TRANSFER_MODE_DIRECT:
    ret_stat = UART_lStartTransmitPolling(handle, data_ptr, count);
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	68b9      	ldr	r1, [r7, #8]
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f000 f808 	bl	8005ca0 <UART_lStartTransmitPolling>
 8005c90:	4603      	mov	r3, r0
 8005c92:	75fb      	strb	r3, [r7, #23]
    break;
 8005c94:	bf00      	nop
#endif
  default:
    break;
  }
  return ret_stat;
 8005c96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3718      	adds	r7, #24
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}

08005ca0 <UART_lStartTransmitPolling>:
 * cannot be aborted since it is blocking implementation. Based on FIFO selection,
 * either TBUF or IN register is updated with the data.
 *
 */
static UART_STATUS_t UART_lStartTransmitPolling(const UART_t *const handle, uint8_t* data_ptr, uint32_t count)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  UART_STATUS_t ret_stat = UART_STATUS_BUFFER_INVALID;
 8005cac:	2303      	movs	r3, #3
 8005cae:	75fb      	strb	r3, [r7, #23]
  uint32_t loc_index;

  XMC_ASSERT("UART_Transmit: UART APP handle invalid", (((handle != NULL)&&
            (handle->runtime != NULL))&&(handle->config != NULL)));

  if ((data_ptr != NULL) && (count > 0U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d058      	beq.n	8005d68 <UART_lStartTransmitPolling+0xc8>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d055      	beq.n	8005d68 <UART_lStartTransmitPolling+0xc8>
  {
    ret_stat = UART_STATUS_BUSY;
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	75fb      	strb	r3, [r7, #23]
    if (handle->runtime->tx_busy == false)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	7e1b      	ldrb	r3, [r3, #24]
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	f083 0301 	eor.w	r3, r3, #1
 8005ccc:	b2db      	uxtb	r3, r3
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d04a      	beq.n	8005d68 <UART_lStartTransmitPolling+0xc8>
    {
      handle->runtime->tx_busy = true;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	761a      	strb	r2, [r3, #24]
      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d004      	beq.n	8005cf0 <UART_lStartTransmitPolling+0x50>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff ff74 	bl	8005bd8 <XMC_USIC_CH_TXFIFO_Flush>
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e01c      	b.n	8005d30 <UART_lStartTransmitPolling+0x90>
      {
        /*If FIFO is enabled, FIFO filling status should be checked
         * to avoid overflow error*/
        if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <UART_lStartTransmitPolling+0x74>
        {
          /*Wait if transmit FIFO is full*/
          while (XMC_USIC_CH_TXFIFO_IsFull(handle->channel) == true)
 8005d02:	bf00      	nop
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff ff73 	bl	8005bf4 <XMC_USIC_CH_TXFIFO_IsFull>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1f7      	bne.n	8005d04 <UART_lStartTransmitPolling+0x64>
          {
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6819      	ldr	r1, [r3, #0]
 8005d18:	68ba      	ldr	r2, [r7, #8]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	781b      	ldrb	r3, [r3, #0]
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4608      	mov	r0, r1
 8005d24:	4619      	mov	r1, r3
 8005d26:	f7fe fdd5 	bl	80048d4 <XMC_UART_CH_Transmit>
      {
        /*Clear the transmit FIFO*/
        XMC_USIC_CH_TXFIFO_Flush(handle->channel);
      }
      /*Loop through each byte*/
      for (loc_index = 0U; loc_index < count; loc_index++)
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	613b      	str	r3, [r7, #16]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	d3de      	bcc.n	8005cf6 <UART_lStartTransmitPolling+0x56>
          }
        }
        XMC_UART_CH_Transmit(handle->channel, (uint16_t)data_ptr[loc_index]);
      }

      if (handle->config->tx_fifo_size != XMC_USIC_CH_FIFO_DISABLED)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00b      	beq.n	8005d5c <UART_lStartTransmitPolling+0xbc>
      {
        /*Wait till FIFO is empty*/
        while (XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel) == false)
 8005d44:	bf00      	nop
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff ff66 	bl	8005c1c <XMC_USIC_CH_TXFIFO_IsEmpty>
 8005d50:	4603      	mov	r3, r0
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1f4      	bne.n	8005d46 <UART_lStartTransmitPolling+0xa6>
        {
        }
      }
      ret_stat = UART_STATUS_SUCCESS;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
      handle->runtime->tx_busy = false;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2200      	movs	r2, #0
 8005d66:	761a      	strb	r2, [r3, #24]
    }
  }
  return ret_stat;
 8005d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	70fb      	strb	r3, [r7, #3]
 8005d80:	4613      	mov	r3, r2
 8005d82:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005d84:	78f8      	ldrb	r0, [r7, #3]
 8005d86:	78fb      	ldrb	r3, [r7, #3]
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	3306      	adds	r3, #6
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 8005d96:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	6879      	ldr	r1, [r7, #4]
 8005d9c:	1d83      	adds	r3, r0, #6
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	440b      	add	r3, r1
 8005da2:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <XMC_UART_CH_Init>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Start(), XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Init(XMC_USIC_CH_t *const channel, const XMC_UART_CH_CONFIG_t *const config)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  XMC_UART_CH_InitEx(channel, config, true);
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	6839      	ldr	r1, [r7, #0]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	f7fe fd1e 	bl	8004800 <XMC_UART_CH_InitEx>
}
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop

08005dcc <XMC_UART_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_UART_CH_Stop(), XMC_UART_CH_Transmit()\n\n\n
 */
__STATIC_INLINE void XMC_UART_CH_Start(XMC_USIC_CH_t *const channel)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b083      	sub	sp, #12
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  channel->CCR = (uint32_t)(((channel->CCR) & (~USIC_CH_CCR_MODE_Msk)) | (uint32_t)XMC_USIC_CH_OPERATING_MODE_UART);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd8:	f023 030f 	bic.w	r3, r3, #15
 8005ddc:	f043 0202 	orr.w	r2, r3, #2
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	641a      	str	r2, [r3, #64]	; 0x40
}
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <UART_0_init>:
/**********************************************************************************************************************
 * API IMPLEMENTATION
 **********************************************************************************************************************/
/*Channel initialization function*/
UART_STATUS_t UART_0_init()
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
  UART_STATUS_t status = UART_STATUS_SUCCESS;
 8005df6:	2300      	movs	r3, #0
 8005df8:	71fb      	strb	r3, [r7, #7]
  /*Configure Receive pin*/
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 15U, &UART_0_rx_pin_config);
 8005dfa:	4813      	ldr	r0, [pc, #76]	; (8005e48 <UART_0_init+0x58>)
 8005dfc:	210f      	movs	r1, #15
 8005dfe:	4a13      	ldr	r2, [pc, #76]	; (8005e4c <UART_0_init+0x5c>)
 8005e00:	f7fc f888 	bl	8001f14 <XMC_GPIO_Init>
  /* Initialize USIC channel in UART mode*/
  XMC_UART_CH_Init(XMC_UART1_CH0, &UART_0_channel_config);
 8005e04:	4812      	ldr	r0, [pc, #72]	; (8005e50 <UART_0_init+0x60>)
 8005e06:	4913      	ldr	r1, [pc, #76]	; (8005e54 <UART_0_init+0x64>)
 8005e08:	f7ff ffd2 	bl	8005db0 <XMC_UART_CH_Init>
  /*Set input source path*/
  XMC_USIC_CH_SetInputSource(XMC_UART1_CH0, XMC_USIC_CH_INPUT_DX0, 2U);
 8005e0c:	4810      	ldr	r0, [pc, #64]	; (8005e50 <UART_0_init+0x60>)
 8005e0e:	2100      	movs	r1, #0
 8005e10:	2202      	movs	r2, #2
 8005e12:	f7ff ffaf 	bl	8005d74 <XMC_USIC_CH_SetInputSource>
  /*Configure receive FIFO*/
  XMC_USIC_CH_RXFIFO_Configure(XMC_UART1_CH0,
 8005e16:	480e      	ldr	r0, [pc, #56]	; (8005e50 <UART_0_init+0x60>)
 8005e18:	2100      	movs	r1, #0
 8005e1a:	2206      	movs	r2, #6
 8005e1c:	233f      	movs	r3, #63	; 0x3f
 8005e1e:	f7fe feff 	bl	8004c20 <XMC_USIC_CH_RXFIFO_Configure>
        0U,
        XMC_USIC_CH_FIFO_SIZE_64WORDS,
        63U);
  /* Start UART */
  XMC_UART_CH_Start(XMC_UART1_CH0);
 8005e22:	480b      	ldr	r0, [pc, #44]	; (8005e50 <UART_0_init+0x60>)
 8005e24:	f7ff ffd2 	bl	8005dcc <XMC_UART_CH_Start>

  /* Initialize UART TX pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, 14U, &UART_0_tx_pin_config);
 8005e28:	4807      	ldr	r0, [pc, #28]	; (8005e48 <UART_0_init+0x58>)
 8005e2a:	210e      	movs	r1, #14
 8005e2c:	4a0a      	ldr	r2, [pc, #40]	; (8005e58 <UART_0_init+0x68>)
 8005e2e:	f7fc f871 	bl	8001f14 <XMC_GPIO_Init>

  /*Set service request for UART protocol events*/
  XMC_USIC_CH_SetInterruptNodePointer(XMC_UART1_CH0, XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
 8005e32:	4807      	ldr	r0, [pc, #28]	; (8005e50 <UART_0_init+0x60>)
 8005e34:	2110      	movs	r1, #16
 8005e36:	2200      	movs	r2, #0
 8005e38:	f7fe ff1c 	bl	8004c74 <XMC_USIC_CH_SetInterruptNodePointer>
     0U);
  return status;
 8005e3c:	79fb      	ldrb	r3, [r7, #7]
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3708      	adds	r7, #8
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	48028200 	.word	0x48028200
 8005e4c:	0801308c 	.word	0x0801308c
 8005e50:	48020000 	.word	0x48020000
 8005e54:	08013040 	.word	0x08013040
 8005e58:	0801304c 	.word	0x0801304c

08005e5c <XMC_CCU4_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_DisableClock()<BR> XMC_CCU4_EnableMultipleClocks()<BR> XMC_CCU4_StartPrescaler()<BR> XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_EnableClock(XMC_CCU4_MODULE_t *const module, const uint8_t slice_number)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b083      	sub	sp, #12
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	460b      	mov	r3, r1
 8005e66:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  XMC_ASSERT("XMC_CCU4_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1) << slice_number;
 8005e68:	78fb      	ldrb	r3, [r7, #3]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	409a      	lsls	r2, r3
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]
}
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <XMC_CCU4_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer()<BR> XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_IsTimerRunning(const XMC_CCU4_SLICE_t *const slice)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU4_CC4_TCST_TRB_Msk) == CCU4_CC4_TCST_TRB_Msk);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bf14      	ite	ne
 8005e90:	2301      	movne	r3, #1
 8005e92:	2300      	moveq	r3, #0
 8005e94:	b2db      	uxtb	r3, r3
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr
 8005ea2:	bf00      	nop

08005ea4 <XMC_CCU4_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StartTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCSET = CCU4_CC4_TCSET_TRBS_Msk;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	60da      	str	r2, [r3, #12]
}
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <XMC_CCU4_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_StopTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b083      	sub	sp, #12
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TRBC_Msk;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	611a      	str	r2, [r3, #16]
}
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <XMC_CCU4_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearTimer(XMC_CCU4_SLICE_t *const slice)
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU4_CC4_TCCLR_TCC_Msk;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	611a      	str	r2, [r3, #16]
}
 8005ee2:	370c      	adds	r7, #12
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr

08005eec <XMC_CCU4_SLICE_SetTimerPeriodMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerPeriodMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t period_val)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b083      	sub	sp, #12
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerPeriodMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->PRS = (uint32_t) period_val;
 8005ef8:	887a      	ldrh	r2, [r7, #2]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8005efe:	370c      	adds	r7, #12
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr

08005f08 <XMC_CCU4_SLICE_SetTimerCompareMatch>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_GetTimerPeriodMatch().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_SetTimerCompareMatch(XMC_CCU4_SLICE_t *const slice, const uint16_t compare_val)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	460b      	mov	r3, r1
 8005f12:	807b      	strh	r3, [r7, #2]
  XMC_ASSERT("XMC_CCU4_SLICE_SetTimerCompareMatch:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  slice->CRS = (uint32_t) compare_val;
 8005f14:	887a      	ldrh	r2, [r7, #2]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <XMC_CCU4_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU4_EnableShadowTransfer(XMC_CCU4_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b083      	sub	sp, #12
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
 8005f2c:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU4_EnableShadowTransfer:Invalid Slice Pointer", XMC_CCU4_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	611a      	str	r2, [r3, #16]
}
 8005f34:	370c      	adds	r7, #12
 8005f36:	46bd      	mov	sp, r7
 8005f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3c:	4770      	bx	lr
 8005f3e:	bf00      	nop

08005f40 <XMC_CCU4_SLICE_ClearEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent()<BR> XMC_CCU4_SLICE_GetEvent().
 */
__STATIC_INLINE void XMC_CCU4_SLICE_ClearEvent(XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_ClearEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	409a      	lsls	r2, r3
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop

08005f64 <XMC_CCU4_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU4_SLICE_EnableEvent()<BR> XMC_CCU4_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU4_SLICE_GetEvent(const XMC_CCU4_SLICE_t *const slice, const XMC_CCU4_SLICE_IRQ_ID_t event)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b083      	sub	sp, #12
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU4_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU4_SLICE_GetEvent:Invalid SR event", XMC_CCU4_SLICE_CHECK_INTERRUPT(event));

  return (((uint32_t)(slice->INTS & ((uint32_t)1 << (uint32_t)event))) != 0U);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	fa22 f303 	lsr.w	r3, r2, r3
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	bf14      	ite	ne
 8005f84:	2301      	movne	r3, #1
 8005f86:	2300      	moveq	r3, #0
 8005f88:	b2db      	uxtb	r3, r3
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop

08005f98 <XMC_CCU8_EnableClock>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_DisableClock()<BR>  XMC_CCU8_EnableMultipleClocks()<BR>  XMC_CCU8_StartPrescaler()<BR>  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_EnableClock(XMC_CCU8_MODULE_t *const module, const uint8_t slice_number)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
 8005fa0:	460b      	mov	r3, r1
 8005fa2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  XMC_ASSERT("XMC_CCU8_EnableClock:Invalid Slice Number", (slice_number < 4U));

  module->GIDLC = ((uint32_t) 1 << slice_number);
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	409a      	lsls	r2, r3
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	60da      	str	r2, [r3, #12]
}
 8005fae:	370c      	adds	r7, #12
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr

08005fb8 <XMC_CCU8_SLICE_IsTimerRunning>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer()<BR>  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_IsTimerRunning(const XMC_CCU8_SLICE_t *const slice)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_GetTimerStatus:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  return (bool)(((slice->TCST) & CCU8_CC8_TCST_TRB_Msk) == (uint32_t)CCU8_CC8_TCST_TRB_Msk);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bf14      	ite	ne
 8005fcc:	2301      	movne	r3, #1
 8005fce:	2300      	moveq	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop

08005fe0 <XMC_CCU8_SLICE_StartTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StopTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StartTimer(XMC_CCU8_SLICE_t *const slice)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StartTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCSET = CCU8_CC8_TCSET_TRBS_Msk;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	60da      	str	r2, [r3, #12]
}
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr

08005ff8 <XMC_CCU8_SLICE_StopTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_StopTimer(XMC_CCU8_SLICE_t *const slice)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_StopTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TRBC_Msk;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	611a      	str	r2, [r3, #16]
}
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <XMC_CCU8_SLICE_ClearTimer>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_StartTimer().
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearTimer(XMC_CCU8_SLICE_t *const slice)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearTimer:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  slice->TCCLR = (uint32_t) CCU8_CC8_TCCLR_TCC_Msk;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	611a      	str	r2, [r3, #16]
}
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <XMC_CCU8_EnableShadowTransfer>:
 *
 * \par<b>Related APIs:</b><br>
 *  None.
 */
__STATIC_INLINE void XMC_CCU8_EnableShadowTransfer(XMC_CCU8_MODULE_t *const module, const uint32_t shadow_transfer_msk)
{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
  XMC_ASSERT("XMC_CCU8_EnableShadowTransfer:Invalid module Pointer", XMC_CCU8_IsValidModule(module));
  module->GCSS = (uint32_t)shadow_transfer_msk;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	611a      	str	r2, [r3, #16]
}
 8006038:	370c      	adds	r7, #12
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr
 8006042:	bf00      	nop

08006044 <XMC_CCU8_SLICE_ClearEvent>:
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent()<BR>  XMC_CCU8_SLICE_GetEvent().
 *
 */
__STATIC_INLINE void XMC_CCU8_SLICE_ClearEvent(XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	460b      	mov	r3, r1
 800604e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_ClearEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  slice->SWR = ((uint32_t) 1) << ((uint32_t) event);
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2201      	movs	r2, #1
 8006054:	409a      	lsls	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop

08006068 <XMC_CCU8_SLICE_GetEvent>:
 *
 * \par<b>Related APIs:</b><br>
 *  XMC_CCU8_SLICE_EnableEvent()<BR>  XMC_CCU8_SLICE_SetEvent().
 */
__STATIC_INLINE bool XMC_CCU8_SLICE_GetEvent(const XMC_CCU8_SLICE_t *const slice, const XMC_CCU8_SLICE_IRQ_ID_t event)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	460b      	mov	r3, r1
 8006072:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid Slice Pointer", XMC_CCU8_IsValidSlice(slice));
  XMC_ASSERT("XMC_CCU8_SLICE_GetEvent:Invalid SR event", XMC_CCU8_SLICE_CHECK_INTERRUPT(event));
  return (((uint32_t)(slice->INTS & ((uint32_t)1 << event))) != 0U);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800607a:	78fb      	ldrb	r3, [r7, #3]
 800607c:	fa22 f303 	lsr.w	r3, r2, r3
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	bf14      	ite	ne
 8006088:	2301      	movne	r3, #1
 800608a:	2300      	moveq	r3, #0
 800608c:	b2db      	uxtb	r3, r3
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop

0800609c <TIMER_Init>:
/*
 * This function initializes a TIMER APP based on user configuration.
 *
 */
TIMER_STATUS_t TIMER_Init(TIMER_t* const handle_ptr)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Init:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_SUCCESS;
 80060a4:	2300      	movs	r3, #0
 80060a6:	73fb      	strb	r3, [r7, #15]
  /* Check for APP instance is initialized or not */
  if (false == handle_ptr->initialized)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d013      	beq.n	80060e0 <TIMER_Init+0x44>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <TIMER_Init+0x30>
    {
      /* Configure CCU4 timer for the required time tick settings */
      status = TIMER_CCU4_lInit(handle_ptr);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f9cc 	bl	8006460 <TIMER_CCU4_lInit>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73fb      	strb	r3, [r7, #15]
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d104      	bne.n	80060e0 <TIMER_Init+0x44>
    {
      /* Configure CCU8 timer for the required time tick settings */
      status = TIMER_CCU8_lInit(handle_ptr);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 fa18 	bl	800650c <TIMER_CCU8_lInit>
 80060dc:	4603      	mov	r3, r0
 80060de:	73fb      	strb	r3, [r7, #15]
    }
#endif
  }

  return (status);
 80060e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop

080060ec <TIMER_Start>:

/*
 * This function starts the timer to generate the events for the specified time_interval value
 */
TIMER_STATUS_t TIMER_Start(TIMER_t  *const handle_ptr)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Start:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check for APP instance is initialized or not */
  if (true == handle_ptr->initialized)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d016      	beq.n	800612c <TIMER_Start+0x40>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <TIMER_Start+0x26>
    {
      /* Start the timer manually */
      XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	695b      	ldr	r3, [r3, #20]
 800610c:	4618      	mov	r0, r3
 800610e:	f7ff fec9 	bl	8005ea4 <XMC_CCU4_SLICE_StartTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006118:	2b01      	cmp	r3, #1
 800611a:	d104      	bne.n	8006126 <TIMER_Start+0x3a>
       {
      /* Start the timer manually */
      XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff ff5d 	bl	8005fe0 <XMC_CCU8_SLICE_StartTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006126:	2300      	movs	r3, #0
 8006128:	73fb      	strb	r3, [r7, #15]
 800612a:	e001      	b.n	8006130 <TIMER_Start+0x44>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006130:	7bfb      	ldrb	r3, [r7, #15]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}
 800613a:	bf00      	nop

0800613c <TIMER_Stop>:

/*
 * This function stops and clears the timer
 */
TIMER_STATUS_t TIMER_Stop(TIMER_t  *const handle_ptr)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b084      	sub	sp, #16
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;

  XMC_ASSERT("TIMER_Stop:handle_ptr NULL" , (handle_ptr != NULL));

  /* Check whether timer is initialized and in running state */
  if ((TIMER_GetTimerStatus(handle_ptr)) && (true == handle_ptr->initialized))
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f827 	bl	8006198 <TIMER_GetTimerStatus>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d01b      	beq.n	8006188 <TIMER_Stop+0x4c>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006156:	2b00      	cmp	r3, #0
 8006158:	d016      	beq.n	8006188 <TIMER_Stop+0x4c>
  {
#ifdef TIMER_CCU4_USED
    if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <TIMER_Stop+0x32>
    {
      /* Stops the timer */
      XMC_CCU4_SLICE_StopTimer(handle_ptr->ccu4_slice_ptr);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	4618      	mov	r0, r3
 800616a:	f7ff fea7 	bl	8005ebc <XMC_CCU4_SLICE_StopTimer>
    }
#endif

#ifdef TIMER_CCU8_USED
    if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006174:	2b01      	cmp	r3, #1
 8006176:	d104      	bne.n	8006182 <TIMER_Stop+0x46>
       {
      /* Stops the timer */
      XMC_CCU8_SLICE_StopTimer(handle_ptr->ccu8_slice_ptr);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617c:	4618      	mov	r0, r3
 800617e:	f7ff ff3b 	bl	8005ff8 <XMC_CCU8_SLICE_StopTimer>
       }
#endif
    status = TIMER_STATUS_SUCCESS;
 8006182:	2300      	movs	r3, #0
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e001      	b.n	800618c <TIMER_Stop+0x50>
  }
  else
  {
    status = TIMER_STATUS_FAILURE;
 8006188:	2301      	movs	r3, #1
 800618a:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 800618c:	7bfb      	ldrb	r3, [r7, #15]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop

08006198 <TIMER_GetTimerStatus>:

/*
 * This function returns the status of the timer
 */
bool TIMER_GetTimerStatus(TIMER_t  *const handle_ptr)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  bool status;

  XMC_ASSERT("TIMER_GetTimerStatus:handle_ptr NULL" , (handle_ptr != NULL));

  status = false;
 80061a0:	2300      	movs	r3, #0
 80061a2:	73fb      	strb	r3, [r7, #15]

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d106      	bne.n	80061bc <TIMER_GetTimerStatus+0x24>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU4_SLICE_IsTimerRunning(handle_ptr->ccu4_slice_ptr);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	695b      	ldr	r3, [r3, #20]
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7ff fe62 	bl	8005e7c <XMC_CCU4_SLICE_IsTimerRunning>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061c2:	2b01      	cmp	r3, #1
 80061c4:	d106      	bne.n	80061d4 <TIMER_GetTimerStatus+0x3c>
  {
    /* Returns the current status of the timer */
    status = XMC_CCU8_SLICE_IsTimerRunning(handle_ptr->ccu8_slice_ptr);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ca:	4618      	mov	r0, r3
 80061cc:	f7ff fef4 	bl	8005fb8 <XMC_CCU8_SLICE_IsTimerRunning>
 80061d0:	4603      	mov	r3, r0
 80061d2:	73fb      	strb	r3, [r7, #15]
  }
#endif

  return (status);
 80061d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop

080061e0 <TIMER_SetTimeInterval>:
/*
 * This function changes the PWM period which in turn changes the time tick interval value by checking that
 * the given time tick value is within supported range.
 */
TIMER_STATUS_t TIMER_SetTimeInterval(TIMER_t  *const handle_ptr, uint32_t time_interval)
{
 80061e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80061e4:	b087      	sub	sp, #28
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	6078      	str	r0, [r7, #4]
 80061ea:	6039      	str	r1, [r7, #0]
  uint32_t lfrequency;
  uint32_t lprescaler;

  XMC_ASSERT("TIMER_SetTimeInterval:handle_ptr NULL" , (handle_ptr != NULL));

  status = TIMER_STATUS_FAILURE;
 80061ec:	2301      	movs	r3, #1
 80061ee:	75fb      	strb	r3, [r7, #23]

  if (false == TIMER_GetTimerStatus(handle_ptr))
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ffd1 	bl	8006198 <TIMER_GetTimerStatus>
 80061f6:	4603      	mov	r3, r0
 80061f8:	f083 0301 	eor.w	r3, r3, #1
 80061fc:	b2db      	uxtb	r3, r3
 80061fe:	2b00      	cmp	r3, #0
 8006200:	f000 80de 	beq.w	80063c0 <TIMER_SetTimeInterval+0x1e0>
  {
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689a      	ldr	r2, [r3, #8]
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	f200 80d8 	bhi.w	80063c0 <TIMER_SetTimeInterval+0x1e0>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685a      	ldr	r2, [r3, #4]
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	429a      	cmp	r2, r3
 8006218:	f0c0 80d2 	bcc.w	80063c0 <TIMER_SetTimeInterval+0x1e0>
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	613b      	str	r3, [r7, #16]
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006220:	e002      	b.n	8006228 <TIMER_SetTimeInterval+0x48>
      {
        lprescaler++;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	3301      	adds	r3, #1
 8006226:	613b      	str	r3, [r7, #16]
    /* check for time_interval range */
    if ((time_interval >= handle_ptr->timer_min_value_us) && (time_interval <= handle_ptr->timer_max_value_us))
    {
      /* Initialize the prescaler */
      lprescaler = 0U;
      while (time_interval > (handle_ptr->timer_max_value_us >> (TIMER_PRESCALER_MAX - lprescaler)))
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	f1c2 020f 	rsb	r2, r2, #15
 8006232:	fa23 f202 	lsr.w	r2, r3, r2
 8006236:	683b      	ldr	r3, [r7, #0]
 8006238:	429a      	cmp	r2, r3
 800623a:	d3f2      	bcc.n	8006222 <TIMER_SetTimeInterval+0x42>
      {
        lprescaler++;
      }
#ifdef TIMER_CCU4_USED
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006242:	2b00      	cmp	r3, #0
 8006244:	d15c      	bne.n	8006300 <TIMER_SetTimeInterval+0x120>
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	691b      	ldr	r3, [r3, #16]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	60fb      	str	r3, [r7, #12]
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	b2d9      	uxtb	r1, r3
 800625c:	7913      	ldrb	r3, [r2, #4]
 800625e:	f361 0303 	bfi	r3, r1, #0, #4
 8006262:	7113      	strb	r3, [r2, #4]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	4618      	mov	r0, r3
 8006268:	f04f 0100 	mov.w	r1, #0
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	461a      	mov	r2, r3
 8006270:	f04f 0300 	mov.w	r3, #0
 8006274:	fb02 fe01 	mul.w	lr, r2, r1
 8006278:	fb00 f603 	mul.w	r6, r0, r3
 800627c:	4476      	add	r6, lr
 800627e:	fba0 2302 	umull	r2, r3, r0, r2
 8006282:	18f1      	adds	r1, r6, r3
 8006284:	460b      	mov	r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	69c9      	ldr	r1, [r1, #28]
 800628a:	7909      	ldrb	r1, [r1, #4]
 800628c:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006290:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006292:	f1c1 0620 	rsb	r6, r1, #32
 8006296:	f1a1 0020 	sub.w	r0, r1, #32
 800629a:	fa22 f801 	lsr.w	r8, r2, r1
 800629e:	fa03 f606 	lsl.w	r6, r3, r6
 80062a2:	ea48 0806 	orr.w	r8, r8, r6
 80062a6:	fa23 f000 	lsr.w	r0, r3, r0
 80062aa:	ea48 0800 	orr.w	r8, r8, r0
 80062ae:	fa23 f901 	lsr.w	r9, r3, r1
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
 80062b2:	4640      	mov	r0, r8
 80062b4:	4649      	mov	r1, r9
 80062b6:	a346      	add	r3, pc, #280	; (adr r3, 80063d0 <TIMER_SetTimeInterval+0x1f0>)
 80062b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062bc:	f00a ff42 	bl	8011144 <__aeabi_uldivmod>
 80062c0:	4602      	mov	r2, r0
 80062c2:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
      {
        lfrequency = handle_ptr->global_ccu4_handler->module_frequency;
        handle_ptr->ccu4_slice_config_ptr->prescaler_initval = lprescaler;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 80062c4:	b292      	uxth	r2, r2
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu4_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062ce:	2b01      	cmp	r3, #1
 80062d0:	d905      	bls.n	80062de <TIMER_SetTimeInterval+0xfe>
        {
          (handle_ptr->period_value)--;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062d6:	3b01      	subs	r3, #1
 80062d8:	b29a      	uxth	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU4_SLICE_SetPrescaler(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr->prescaler_initval);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	695a      	ldr	r2, [r3, #20]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	791b      	ldrb	r3, [r3, #4]
 80062e8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	4610      	mov	r0, r2
 80062f0:	4619      	mov	r1, r3
 80062f2:	f7fd f8f9 	bl	80034e8 <XMC_CCU4_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU4_lShadowTransfer(handle_ptr);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 f8ea 	bl	80064d0 <TIMER_CCU4_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80062fc:	2300      	movs	r3, #0
 80062fe:	75fb      	strb	r3, [r7, #23]
      }
#endif

#ifdef TIMER_CCU8_USED
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006306:	2b01      	cmp	r3, #1
 8006308:	d15a      	bne.n	80063c0 <TIMER_SetTimeInterval+0x1e0>
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	b2db      	uxtb	r3, r3
 8006312:	f003 030f 	and.w	r3, r3, #15
 8006316:	b2d9      	uxtb	r1, r3
 8006318:	7b13      	ldrb	r3, [r2, #12]
 800631a:	f361 0303 	bfi	r3, r1, #0, #4
 800631e:	7313      	strb	r3, [r2, #12]
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	60fb      	str	r3, [r7, #12]
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	4618      	mov	r0, r3
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	461a      	mov	r2, r3
 8006334:	f04f 0300 	mov.w	r3, #0
 8006338:	fb02 fe01 	mul.w	lr, r2, r1
 800633c:	fb00 f603 	mul.w	r6, r0, r3
 8006340:	4476      	add	r6, lr
 8006342:	fba0 2302 	umull	r2, r3, r0, r2
 8006346:	18f1      	adds	r1, r6, r3
 8006348:	460b      	mov	r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 800634a:	6879      	ldr	r1, [r7, #4]
 800634c:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800634e:	7b09      	ldrb	r1, [r1, #12]
 8006350:	f3c1 0103 	ubfx	r1, r1, #0, #4
 8006354:	b2c9      	uxtb	r1, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006356:	f1c1 0620 	rsb	r6, r1, #32
 800635a:	f1a1 0020 	sub.w	r0, r1, #32
 800635e:	fa22 f401 	lsr.w	r4, r2, r1
 8006362:	fa03 f606 	lsl.w	r6, r3, r6
 8006366:	4334      	orrs	r4, r6
 8006368:	fa23 f000 	lsr.w	r0, r3, r0
 800636c:	4304      	orrs	r4, r0
 800636e:	fa23 f501 	lsr.w	r5, r3, r1
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
 8006372:	4620      	mov	r0, r4
 8006374:	4629      	mov	r1, r5
 8006376:	a316      	add	r3, pc, #88	; (adr r3, 80063d0 <TIMER_SetTimeInterval+0x1f0>)
 8006378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800637c:	f00a fee2 	bl	8011144 <__aeabi_uldivmod>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
      if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
      {
        handle_ptr->ccu8_slice_config_ptr->prescaler_initval = lprescaler;
        lfrequency = handle_ptr->global_ccu8_handler->module_frequency;
        /* Calculate the period register for the required time_interval value */
        handle_ptr->period_value = (uint16_t)((((uint64_t)time_interval * lfrequency) >> \
 8006384:	b292      	uxth	r2, r2
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	86da      	strh	r2, [r3, #54]	; 0x36
                                               handle_ptr->ccu8_slice_config_ptr->prescaler_initval) / \
                                              TIMER_RESOLUTION_SEC_TO_MICRO);
        /* Actual timer period values is Period_reg_val+1U */
        if (handle_ptr->period_value > TIMER_PERIOD_MIN)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800638e:	2b01      	cmp	r3, #1
 8006390:	d905      	bls.n	800639e <TIMER_SetTimeInterval+0x1be>
        {
          (handle_ptr->period_value)--;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006396:	3b01      	subs	r3, #1
 8006398:	b29a      	uxth	r2, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	86da      	strh	r2, [r3, #54]	; 0x36
        }
        /* Update the prescaler */
        XMC_CCU8_SLICE_SetPrescaler(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr->prescaler_initval);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a6:	7b1b      	ldrb	r3, [r3, #12]
 80063a8:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	f7fd f97f 	bl	80036b4 <XMC_CCU8_SLICE_SetPrescaler>
        /* update period, compare and prescaler values */
        TIMER_CCU8_lShadowTransfer(handle_ptr);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f000 f8e0 	bl	800657c <TIMER_CCU8_lShadowTransfer>
        /* Update the status */
        status = TIMER_STATUS_SUCCESS;
 80063bc:	2300      	movs	r3, #0
 80063be:	75fb      	strb	r3, [r7, #23]
      }
#endif
    }
  }
  return (status);
 80063c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	371c      	adds	r7, #28
 80063c6:	46bd      	mov	sp, r7
 80063c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063cc:	f3af 8000 	nop.w
 80063d0:	05f5e100 	.word	0x05f5e100
 80063d4:	00000000 	.word	0x00000000

080063d8 <TIMER_GetInterruptStatus>:

/*
 * This function reads the timer event(period match interrupt) status of the given timer
 */
bool TIMER_GetInterruptStatus(TIMER_t * const handle_ptr)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
  bool status;
  XMC_ASSERT("TIMER_GetInterruptStatus:handle_ptr NULL" , (handle_ptr != NULL));
  status = false;
 80063e0:	2300      	movs	r3, #0
 80063e2:	73fb      	strb	r3, [r7, #15]
#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d107      	bne.n	80063fe <TIMER_GetInterruptStatus+0x26>
  {
    /* Reads the interrupt status */
    status = XMC_CCU4_SLICE_GetEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	4618      	mov	r0, r3
 80063f4:	2100      	movs	r1, #0
 80063f6:	f7ff fdb5 	bl	8005f64 <XMC_CCU4_SLICE_GetEvent>
 80063fa:	4603      	mov	r3, r0
 80063fc:	73fb      	strb	r3, [r7, #15]
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006404:	2b01      	cmp	r3, #1
 8006406:	d107      	bne.n	8006418 <TIMER_GetInterruptStatus+0x40>
  {
    /* Reads the interrupt status */
    status = XMC_CCU8_SLICE_GetEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	4618      	mov	r0, r3
 800640e:	2100      	movs	r1, #0
 8006410:	f7ff fe2a 	bl	8006068 <XMC_CCU8_SLICE_GetEvent>
 8006414:	4603      	mov	r3, r0
 8006416:	73fb      	strb	r3, [r7, #15]
  }
#endif
  return (status);
 8006418:	7bfb      	ldrb	r3, [r7, #15]
}
 800641a:	4618      	mov	r0, r3
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop

08006424 <TIMER_ClearEvent>:

/*
 * This function clears the period match interrupt status of the given timer.
 */
void TIMER_ClearEvent(TIMER_t *const handle_ptr)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("TIME_CCU_AcknowledgeInterrupt:handle_ptr NULL" , (handle_ptr != NULL));

#ifdef TIMER_CCU4_USED
  if (TIMER_MODULE_CCU4 == handle_ptr->timer_module)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006432:	2b00      	cmp	r3, #0
 8006434:	d105      	bne.n	8006442 <TIMER_ClearEvent+0x1e>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU4_SLICE_ClearEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	695b      	ldr	r3, [r3, #20]
 800643a:	4618      	mov	r0, r3
 800643c:	2100      	movs	r1, #0
 800643e:	f7ff fd7f 	bl	8005f40 <XMC_CCU4_SLICE_ClearEvent>
  }
#endif

#ifdef TIMER_CCU8_USED
  if (TIMER_MODULE_CCU8 == handle_ptr->timer_module)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006448:	2b01      	cmp	r3, #1
 800644a:	d105      	bne.n	8006458 <TIMER_ClearEvent+0x34>
  {
    /* clears the timer event(period match interrupt) */
    XMC_CCU8_SLICE_ClearEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006450:	4618      	mov	r0, r3
 8006452:	2100      	movs	r1, #0
 8006454:	f7ff fdf6 	bl	8006044 <XMC_CCU8_SLICE_ClearEvent>
  }
#endif
}
 8006458:	3708      	adds	r7, #8
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}
 800645e:	bf00      	nop

08006460 <TIMER_CCU4_lInit>:
#ifdef TIMER_CCU4_USED
/*
 * This function configures timer ccu4 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU4_lInit(TIMER_t* const handle_ptr)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU4_Init(handle_ptr->global_ccu4_handler);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	4618      	mov	r0, r3
 800646e:	f002 f811 	bl	8008494 <GLOBAL_CCU4_Init>
 8006472:	4603      	mov	r3, r0
 8006474:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU4_EnableClock(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->ccu4_slice_number);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7e1b      	ldrb	r3, [r3, #24]
 8006480:	4610      	mov	r0, r2
 8006482:	4619      	mov	r1, r3
 8006484:	f7ff fcea 	bl	8005e5c <XMC_CCU4_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU4_SLICE_CompareInit(handle_ptr->ccu4_slice_ptr, handle_ptr->ccu4_slice_config_ptr);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	695a      	ldr	r2, [r3, #20]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	69db      	ldr	r3, [r3, #28]
 8006490:	4610      	mov	r0, r2
 8006492:	4619      	mov	r1, r3
 8006494:	f7fc fff2 	bl	800347c <XMC_CCU4_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU4_lShadowTransfer(handle_ptr);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f819 	bl	80064d0 <TIMER_CCU4_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU4_SLICE_EnableEvent(handle_ptr->ccu4_slice_ptr, XMC_CCU4_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU4_SLICE_ClearTimer(handle_ptr->ccu4_slice_ptr);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	695b      	ldr	r3, [r3, #20]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff fd16 	bl	8005ed4 <XMC_CCU4_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d004      	beq.n	80064c4 <TIMER_CCU4_lInit+0x64>
  {
    /* Start the timer */
    XMC_CCU4_SLICE_StartTimer(handle_ptr->ccu4_slice_ptr);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	695b      	ldr	r3, [r3, #20]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7ff fcf0 	bl	8005ea4 <XMC_CCU4_SLICE_StartTimer>
  }

  return (status);
 80064c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}
 80064ce:	bf00      	nop

080064d0 <TIMER_CCU4_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU4_lShadowTransfer(TIMER_t* const handle_ptr)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU4_SLICE_SetTimerPeriodMatch(handle_ptr->ccu4_slice_ptr, handle_ptr->period_value);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	695a      	ldr	r2, [r3, #20]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80064e0:	4610      	mov	r0, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	f7ff fd02 	bl	8005eec <XMC_CCU4_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle */
  XMC_CCU4_SLICE_SetTimerCompareMatch(handle_ptr->ccu4_slice_ptr, TIMER_CMP_100_DUTY);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	4618      	mov	r0, r3
 80064ee:	2100      	movs	r1, #0
 80064f0:	f7ff fd0a 	bl	8005f08 <XMC_CCU4_SLICE_SetTimerCompareMatch>
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU4_EnableShadowTransfer(handle_ptr->global_ccu4_handler->module_ptr, handle_ptr->shadow_mask);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	691b      	ldr	r3, [r3, #16]
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	4610      	mov	r0, r2
 8006500:	4619      	mov	r1, r3
 8006502:	f7ff fd0f 	bl	8005f24 <XMC_CCU4_EnableShadowTransfer>
}
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <TIMER_CCU8_lInit>:
#ifdef TIMER_CCU8_USED
/*
 * This function configures timer ccu8 timer with required time tick value
 */
TIMER_STATUS_t TIMER_CCU8_lInit(TIMER_t* const handle_ptr)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  TIMER_STATUS_t status;
  /* Initialize the global registers */
  status = (TIMER_STATUS_t)GLOBAL_CCU8_Init(handle_ptr->global_ccu8_handler);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006518:	4618      	mov	r0, r3
 800651a:	f001 ff8d 	bl	8008438 <GLOBAL_CCU8_Init>
 800651e:	4603      	mov	r3, r0
 8006520:	73fb      	strb	r3, [r7, #15]

  /* Enable the clock for selected timer */
  XMC_CCU8_EnableClock(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->ccu8_slice_number);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	f7ff fd31 	bl	8005f98 <XMC_CCU8_EnableClock>
  /* Configure the timer with required settings */
  XMC_CCU8_SLICE_CompareInit(handle_ptr->ccu8_slice_ptr, handle_ptr->ccu8_slice_config_ptr);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800653e:	4610      	mov	r0, r2
 8006540:	4619      	mov	r1, r3
 8006542:	f7fd f86f 	bl	8003624 <XMC_CCU8_SLICE_CompareInit>
  /* programs the timer period and compare register according to time interval value and do the shadow transfer */
  TIMER_CCU8_lShadowTransfer(handle_ptr);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f818 	bl	800657c <TIMER_CCU8_lShadowTransfer>
    /* Enables a timer(period match) event  */
    XMC_CCU8_SLICE_EnableEvent(handle_ptr->ccu8_slice_ptr, XMC_CCU8_SLICE_IRQ_ID_PERIOD_MATCH);
  }
#endif
  /* Clears the timer register */
  XMC_CCU8_SLICE_ClearTimer(handle_ptr->ccu8_slice_ptr);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	4618      	mov	r0, r3
 8006552:	f7ff fd5d 	bl	8006010 <XMC_CCU8_SLICE_ClearTimer>

  /* update the initialization flag as true for particular instance*/
  handle_ptr->initialized = true;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  /* Check whether the start of the timer is enabled during initialization or not */
  if (handle_ptr->start_control == true)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006564:	2b00      	cmp	r3, #0
 8006566:	d004      	beq.n	8006572 <TIMER_CCU8_lInit+0x66>
  {
    /* Start the timer */
    XMC_CCU8_SLICE_StartTimer(handle_ptr->ccu8_slice_ptr);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800656c:	4618      	mov	r0, r3
 800656e:	f7ff fd37 	bl	8005fe0 <XMC_CCU8_SLICE_StartTimer>
  }

  return (status);
 8006572:	7bfb      	ldrb	r3, [r7, #15]
}
 8006574:	4618      	mov	r0, r3
 8006576:	3710      	adds	r7, #16
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <TIMER_CCU8_lShadowTransfer>:

/*
 * This function configures timer period and compare values and triggers the shadow transfer operation
 */
void TIMER_CCU8_lShadowTransfer(TIMER_t* const handle_ptr)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* programs the timer period register according to time interval value */
  XMC_CCU8_SLICE_SetTimerPeriodMatch(handle_ptr->ccu8_slice_ptr, handle_ptr->period_value);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800658c:	4610      	mov	r0, r2
 800658e:	4619      	mov	r1, r3
 8006590:	f7fd f882 	bl	8003698 <XMC_CCU8_SLICE_SetTimerPeriodMatch>
  /* programs the timer compare register for 50% duty cycle in compare channel 1*/
  XMC_CCU8_SLICE_SetTimerCompareMatch(handle_ptr->ccu8_slice_ptr,
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	4618      	mov	r0, r3
 800659a:	2100      	movs	r1, #0
 800659c:	2200      	movs	r2, #0
 800659e:	f7fd f8a7 	bl	80036f0 <XMC_CCU8_SLICE_SetTimerCompareMatch>
                                      XMC_CCU8_SLICE_COMPARE_CHANNEL_1,
                                      TIMER_CMP_100_DUTY);
  /* Transfers value from shadow timer registers to actual timer registers */
  XMC_CCU8_EnableShadowTransfer(handle_ptr->global_ccu8_handler->module_ptr, handle_ptr->shadow_mask);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a6:	689a      	ldr	r2, [r3, #8]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	68db      	ldr	r3, [r3, #12]
 80065ac:	4610      	mov	r0, r2
 80065ae:	4619      	mov	r1, r3
 80065b0:	f7ff fd3a 	bl	8006028 <XMC_CCU8_EnableShadowTransfer>
}
 80065b4:	3708      	adds	r7, #8
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop

080065bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80065bc:	b480      	push	{r7}
 80065be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80065c0:	4b04      	ldr	r3, [pc, #16]	; (80065d4 <__NVIC_GetPriorityGrouping+0x18>)
 80065c2:	68db      	ldr	r3, [r3, #12]
 80065c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065c8:	0a1b      	lsrs	r3, r3, #8
}
 80065ca:	4618      	mov	r0, r3
 80065cc:	46bd      	mov	sp, r7
 80065ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d2:	4770      	bx	lr
 80065d4:	e000ed00 	.word	0xe000ed00

080065d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80065d8:	b480      	push	{r7}
 80065da:	b083      	sub	sp, #12
 80065dc:	af00      	add	r7, sp, #0
 80065de:	4603      	mov	r3, r0
 80065e0:	6039      	str	r1, [r7, #0]
 80065e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80065e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	db0a      	blt.n	8006602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80065ec:	490d      	ldr	r1, [pc, #52]	; (8006624 <__NVIC_SetPriority+0x4c>)
 80065ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065f2:	683a      	ldr	r2, [r7, #0]
 80065f4:	b2d2      	uxtb	r2, r2
 80065f6:	0092      	lsls	r2, r2, #2
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	440b      	add	r3, r1
 80065fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8006600:	e00a      	b.n	8006618 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006602:	4909      	ldr	r1, [pc, #36]	; (8006628 <__NVIC_SetPriority+0x50>)
 8006604:	79fb      	ldrb	r3, [r7, #7]
 8006606:	f003 030f 	and.w	r3, r3, #15
 800660a:	3b04      	subs	r3, #4
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	b2d2      	uxtb	r2, r2
 8006610:	0092      	lsls	r2, r2, #2
 8006612:	b2d2      	uxtb	r2, r2
 8006614:	440b      	add	r3, r1
 8006616:	761a      	strb	r2, [r3, #24]
  }
}
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	e000e100 	.word	0xe000e100
 8006628:	e000ed00 	.word	0xe000ed00

0800662c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800662c:	b480      	push	{r7}
 800662e:	b089      	sub	sp, #36	; 0x24
 8006630:	af00      	add	r7, sp, #0
 8006632:	60f8      	str	r0, [r7, #12]
 8006634:	60b9      	str	r1, [r7, #8]
 8006636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f003 0307 	and.w	r3, r3, #7
 800663e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	f1c3 0307 	rsb	r3, r3, #7
 8006646:	2b06      	cmp	r3, #6
 8006648:	bf28      	it	cs
 800664a:	2306      	movcs	r3, #6
 800664c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800664e:	69fb      	ldr	r3, [r7, #28]
 8006650:	3306      	adds	r3, #6
 8006652:	2b06      	cmp	r3, #6
 8006654:	d902      	bls.n	800665c <NVIC_EncodePriority+0x30>
 8006656:	69fb      	ldr	r3, [r7, #28]
 8006658:	3b01      	subs	r3, #1
 800665a:	e000      	b.n	800665e <NVIC_EncodePriority+0x32>
 800665c:	2300      	movs	r3, #0
 800665e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006660:	69bb      	ldr	r3, [r7, #24]
 8006662:	2201      	movs	r2, #1
 8006664:	fa02 f303 	lsl.w	r3, r2, r3
 8006668:	1e5a      	subs	r2, r3, #1
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	401a      	ands	r2, r3
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2101      	movs	r1, #1
 8006676:	fa01 f303 	lsl.w	r3, r1, r3
 800667a:	1e59      	subs	r1, r3, #1
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8006680:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8006682:	4618      	mov	r0, r3
 8006684:	3724      	adds	r7, #36	; 0x24
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop

08006690 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3b01      	subs	r3, #1
 800669c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80066a0:	d301      	bcc.n	80066a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80066a2:	2301      	movs	r3, #1
 80066a4:	e00f      	b.n	80066c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80066a6:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <SysTick_Config+0x40>)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80066ae:	f04f 30ff 	mov.w	r0, #4294967295
 80066b2:	213f      	movs	r1, #63	; 0x3f
 80066b4:	f7ff ff90 	bl	80065d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80066b8:	4b05      	ldr	r3, [pc, #20]	; (80066d0 <SysTick_Config+0x40>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80066be:	4b04      	ldr	r3, [pc, #16]	; (80066d0 <SysTick_Config+0x40>)
 80066c0:	2207      	movs	r2, #7
 80066c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3708      	adds	r7, #8
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	e000e010 	.word	0xe000e010

080066d4 <SYSTIMER_lInsertTimerList>:
**********************************************************************************************************************/
/*
 * This function is called to insert a timer into the timer list.
 */
static void SYSTIMER_lInsertTimerList(uint32_t tbl_index)
{
 80066d4:	b490      	push	{r4, r7}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  int32_t delta_ticks;
  int32_t timer_count;
  bool found_flag = false;
 80066dc:	2300      	movs	r3, #0
 80066de:	73fb      	strb	r3, [r7, #15]
   /* Get timer time */
  timer_count = (int32_t)g_timer_tbl[tbl_index].count;
 80066e0:	496b      	ldr	r1, [pc, #428]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4613      	mov	r3, r2
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	4413      	add	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	440b      	add	r3, r1
 80066ee:	3318      	adds	r3, #24
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	60bb      	str	r3, [r7, #8]
  /* Check if Timer list is NULL */
  if (NULL == g_timer_list)
 80066f4:	4b67      	ldr	r3, [pc, #412]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d109      	bne.n	8006710 <SYSTIMER_lInsertTimerList+0x3c>
  {
    /* Set this as first Timer */
    g_timer_list = &g_timer_tbl[tbl_index];
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4613      	mov	r3, r2
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	4413      	add	r3, r2
 8006704:	009b      	lsls	r3, r3, #2
 8006706:	4a62      	ldr	r2, [pc, #392]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006708:	4413      	add	r3, r2
 800670a:	4a62      	ldr	r2, [pc, #392]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 800670c:	6013      	str	r3, [r2, #0]
 800670e:	e0bb      	b.n	8006888 <SYSTIMER_lInsertTimerList+0x1b4>
  }
  /* If not, find the correct place, and insert the specified timer */
  else
  {
    object_ptr = g_timer_list;
 8006710:	4b60      	ldr	r3, [pc, #384]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	617b      	str	r3, [r7, #20]
    /* Get timer tick */
    delta_ticks = timer_count;
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	613b      	str	r3, [r7, #16]
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 800671a:	e0ab      	b.n	8006874 <SYSTIMER_lInsertTimerList+0x1a0>
    {
      /* Get timer Count Difference */
      delta_ticks -= (int32_t)object_ptr->count;
 800671c:	697b      	ldr	r3, [r7, #20]
 800671e:	699b      	ldr	r3, [r3, #24]
 8006720:	461a      	mov	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	1a9b      	subs	r3, r3, r2
 8006726:	613b      	str	r3, [r7, #16]
      /* Check for delta ticks < 0 */
      if (delta_ticks <= 0)
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	2b00      	cmp	r3, #0
 800672c:	dc7a      	bgt.n	8006824 <SYSTIMER_lInsertTimerList+0x150>
      {
        /* Check If head item */
        if (NULL != object_ptr->prev)
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	685b      	ldr	r3, [r3, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d026      	beq.n	8006784 <SYSTIMER_lInsertTimerList+0xb0>
        {
          /* If Insert to list */
          object_ptr->prev->next = &g_timer_tbl[tbl_index];
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	6859      	ldr	r1, [r3, #4]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	4613      	mov	r3, r2
 800673e:	00db      	lsls	r3, r3, #3
 8006740:	4413      	add	r3, r2
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4a52      	ldr	r2, [pc, #328]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006746:	4413      	add	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
          g_timer_tbl[tbl_index].prev = object_ptr->prev;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	6859      	ldr	r1, [r3, #4]
 800674e:	4850      	ldr	r0, [pc, #320]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006750:	687a      	ldr	r2, [r7, #4]
 8006752:	4613      	mov	r3, r2
 8006754:	00db      	lsls	r3, r3, #3
 8006756:	4413      	add	r3, r2
 8006758:	009b      	lsls	r3, r3, #2
 800675a:	4403      	add	r3, r0
 800675c:	6059      	str	r1, [r3, #4]
          g_timer_tbl[tbl_index].next = object_ptr;
 800675e:	494c      	ldr	r1, [pc, #304]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	4613      	mov	r3, r2
 8006764:	00db      	lsls	r3, r3, #3
 8006766:	4413      	add	r3, r2
 8006768:	009b      	lsls	r3, r3, #2
 800676a:	440b      	add	r3, r1
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	601a      	str	r2, [r3, #0]
          object_ptr->prev = &g_timer_tbl[tbl_index];
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	4613      	mov	r3, r2
 8006774:	00db      	lsls	r3, r3, #3
 8006776:	4413      	add	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4a45      	ldr	r2, [pc, #276]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 800677c:	441a      	add	r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	605a      	str	r2, [r3, #4]
 8006782:	e01c      	b.n	80067be <SYSTIMER_lInsertTimerList+0xea>
        }
        else
        {
          /* Set Timer as first item */
          g_timer_tbl[tbl_index].next = g_timer_list;
 8006784:	4b43      	ldr	r3, [pc, #268]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 8006786:	6819      	ldr	r1, [r3, #0]
 8006788:	4841      	ldr	r0, [pc, #260]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 800678a:	687a      	ldr	r2, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	00db      	lsls	r3, r3, #3
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4403      	add	r3, r0
 8006796:	6019      	str	r1, [r3, #0]
          g_timer_list->prev = &g_timer_tbl[tbl_index];
 8006798:	4b3e      	ldr	r3, [pc, #248]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 800679a:	6819      	ldr	r1, [r3, #0]
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4613      	mov	r3, r2
 80067a0:	00db      	lsls	r3, r3, #3
 80067a2:	4413      	add	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4a3a      	ldr	r2, [pc, #232]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067a8:	4413      	add	r3, r2
 80067aa:	604b      	str	r3, [r1, #4]
          g_timer_list = &g_timer_tbl[tbl_index];
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	4a36      	ldr	r2, [pc, #216]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067b8:	4413      	add	r3, r2
 80067ba:	4a36      	ldr	r2, [pc, #216]	; (8006894 <SYSTIMER_lInsertTimerList+0x1c0>)
 80067bc:	6013      	str	r3, [r2, #0]
        }
        g_timer_tbl[tbl_index].count = g_timer_tbl[tbl_index].next->count + (uint32_t)delta_ticks;
 80067be:	4934      	ldr	r1, [pc, #208]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4613      	mov	r3, r2
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	4413      	add	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	440b      	add	r3, r1
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	699a      	ldr	r2, [r3, #24]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	18d1      	adds	r1, r2, r3
 80067d4:	482e      	ldr	r0, [pc, #184]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4403      	add	r3, r0
 80067e2:	3318      	adds	r3, #24
 80067e4:	6019      	str	r1, [r3, #0]
        g_timer_tbl[tbl_index].next->count  -= g_timer_tbl[tbl_index].count;
 80067e6:	492a      	ldr	r1, [pc, #168]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	4613      	mov	r3, r2
 80067ec:	00db      	lsls	r3, r3, #3
 80067ee:	4413      	add	r3, r2
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	440b      	add	r3, r1
 80067f4:	6819      	ldr	r1, [r3, #0]
 80067f6:	4826      	ldr	r0, [pc, #152]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	4613      	mov	r3, r2
 80067fc:	00db      	lsls	r3, r3, #3
 80067fe:	4413      	add	r3, r2
 8006800:	009b      	lsls	r3, r3, #2
 8006802:	4403      	add	r3, r0
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	6998      	ldr	r0, [r3, #24]
 8006808:	4c21      	ldr	r4, [pc, #132]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 800680a:	687a      	ldr	r2, [r7, #4]
 800680c:	4613      	mov	r3, r2
 800680e:	00db      	lsls	r3, r3, #3
 8006810:	4413      	add	r3, r2
 8006812:	009b      	lsls	r3, r3, #2
 8006814:	4423      	add	r3, r4
 8006816:	3318      	adds	r3, #24
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	1ac3      	subs	r3, r0, r3
 800681c:	618b      	str	r3, [r1, #24]
        found_flag = true;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
 8006822:	e024      	b.n	800686e <SYSTIMER_lInsertTimerList+0x19a>
      }
      /* Check for last item in list */
      else
      {
        if ((delta_ticks > 0) && (NULL == object_ptr->next))
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	2b00      	cmp	r3, #0
 8006828:	dd21      	ble.n	800686e <SYSTIMER_lInsertTimerList+0x19a>
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d11d      	bne.n	800686e <SYSTIMER_lInsertTimerList+0x19a>
        {
          /* Yes, insert into */
          g_timer_tbl[tbl_index].prev = object_ptr;
 8006832:	4917      	ldr	r1, [pc, #92]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006834:	687a      	ldr	r2, [r7, #4]
 8006836:	4613      	mov	r3, r2
 8006838:	00db      	lsls	r3, r3, #3
 800683a:	4413      	add	r3, r2
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	440b      	add	r3, r1
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	605a      	str	r2, [r3, #4]
          object_ptr->next = &g_timer_tbl[tbl_index];
 8006844:	687a      	ldr	r2, [r7, #4]
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	4a10      	ldr	r2, [pc, #64]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 8006850:	441a      	add	r2, r3
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	601a      	str	r2, [r3, #0]
          g_timer_tbl[tbl_index].count = (uint32_t)delta_ticks;
 8006856:	6939      	ldr	r1, [r7, #16]
 8006858:	480d      	ldr	r0, [pc, #52]	; (8006890 <SYSTIMER_lInsertTimerList+0x1bc>)
 800685a:	687a      	ldr	r2, [r7, #4]
 800685c:	4613      	mov	r3, r2
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	4413      	add	r3, r2
 8006862:	009b      	lsls	r3, r3, #2
 8006864:	4403      	add	r3, r0
 8006866:	3318      	adds	r3, #24
 8006868:	6019      	str	r1, [r3, #0]
          found_flag = true;
 800686a:	2301      	movs	r3, #1
 800686c:	73fb      	strb	r3, [r7, #15]
        }
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	617b      	str	r3, [r7, #20]
  {
    object_ptr = g_timer_list;
    /* Get timer tick */
    delta_ticks = timer_count;
    /* Find correct place for inserting the timer */
    while ((NULL != object_ptr) && (false == found_flag))
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d006      	beq.n	8006888 <SYSTIMER_lInsertTimerList+0x1b4>
 800687a:	7bfb      	ldrb	r3, [r7, #15]
 800687c:	f083 0301 	eor.w	r3, r3, #1
 8006880:	b2db      	uxtb	r3, r3
 8006882:	2b00      	cmp	r3, #0
 8006884:	f47f af4a 	bne.w	800671c <SYSTIMER_lInsertTimerList+0x48>
      }
      /* Get the next item in timer list */
      object_ptr = object_ptr->next;
    }
  }
}
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bc90      	pop	{r4, r7}
 800688e:	4770      	bx	lr
 8006890:	1fff510c 	.word	0x1fff510c
 8006894:	1fff4400 	.word	0x1fff4400

08006898 <SYSTIMER_lRemoveTimerList>:

/*
 * This function is called to remove a timer from the timer list. 
 */
static void SYSTIMER_lRemoveTimerList(uint32_t tbl_index)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = &g_timer_tbl[tbl_index];
 80068a0:	687a      	ldr	r2, [r7, #4]
 80068a2:	4613      	mov	r3, r2
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	4a29      	ldr	r2, [pc, #164]	; (8006950 <SYSTIMER_lRemoveTimerList+0xb8>)
 80068ac:	4413      	add	r3, r2
 80068ae:	60fb      	str	r3, [r7, #12]
  /* Check whether only one timer available */
  if ((NULL == object_ptr->prev) && (NULL == object_ptr->next ))
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d107      	bne.n	80068c8 <SYSTIMER_lRemoveTimerList+0x30>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d103      	bne.n	80068c8 <SYSTIMER_lRemoveTimerList+0x30>
  {
    /* set timer list as NULL */ 
    g_timer_list = NULL;                  
 80068c0:	4b24      	ldr	r3, [pc, #144]	; (8006954 <SYSTIMER_lRemoveTimerList+0xbc>)
 80068c2:	2200      	movs	r2, #0
 80068c4:	601a      	str	r2, [r3, #0]
 80068c6:	e03d      	b.n	8006944 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the first item in timer list */
  else if (NULL == object_ptr->prev)
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d114      	bne.n	80068fa <SYSTIMER_lRemoveTimerList+0x62>
  {
    /* Remove timer from list, and reset timer list */
    g_timer_list  = object_ptr->next;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a1f      	ldr	r2, [pc, #124]	; (8006954 <SYSTIMER_lRemoveTimerList+0xbc>)
 80068d6:	6013      	str	r3, [r2, #0]
    g_timer_list->prev = NULL;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <SYSTIMER_lRemoveTimerList+0xbc>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	2200      	movs	r2, #0
 80068de:	605a      	str	r2, [r3, #4]
    g_timer_list->count += object_ptr->count;
 80068e0:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <SYSTIMER_lRemoveTimerList+0xbc>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a1b      	ldr	r2, [pc, #108]	; (8006954 <SYSTIMER_lRemoveTimerList+0xbc>)
 80068e6:	6812      	ldr	r2, [r2, #0]
 80068e8:	6991      	ldr	r1, [r2, #24]
 80068ea:	68fa      	ldr	r2, [r7, #12]
 80068ec:	6992      	ldr	r2, [r2, #24]
 80068ee:	440a      	add	r2, r1
 80068f0:	619a      	str	r2, [r3, #24]
    object_ptr->next    = NULL;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	e024      	b.n	8006944 <SYSTIMER_lRemoveTimerList+0xac>
  }
  /* Check if the last item in timer list */
  else if (NULL == object_ptr->next)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <SYSTIMER_lRemoveTimerList+0x7a>
  {
    /* Remove timer from list */
    object_ptr->prev->next = NULL;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	605a      	str	r2, [r3, #4]
 8006910:	e018      	b.n	8006944 <SYSTIMER_lRemoveTimerList+0xac>
  }
  else                       
  {
    /* Remove timer from list */
    object_ptr->prev->next  =  object_ptr->next;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	68fa      	ldr	r2, [r7, #12]
 8006918:	6812      	ldr	r2, [r2, #0]
 800691a:	601a      	str	r2, [r3, #0]
    object_ptr->next->prev  =  object_ptr->prev;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	6852      	ldr	r2, [r2, #4]
 8006924:	605a      	str	r2, [r3, #4]
    object_ptr->next->count += object_ptr->count;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	6812      	ldr	r2, [r2, #0]
 800692e:	6991      	ldr	r1, [r2, #24]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	6992      	ldr	r2, [r2, #24]
 8006934:	440a      	add	r2, r1
 8006936:	619a      	str	r2, [r3, #24]
    object_ptr->next = NULL;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
    object_ptr->prev = NULL;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2200      	movs	r2, #0
 8006942:	605a      	str	r2, [r3, #4]
  }
}
 8006944:	3714      	adds	r7, #20
 8006946:	46bd      	mov	sp, r7
 8006948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694c:	4770      	bx	lr
 800694e:	bf00      	nop
 8006950:	1fff510c 	.word	0x1fff510c
 8006954:	1fff4400 	.word	0x1fff4400

08006958 <SYSTIMER_lTimerHandler>:

/*
 * Handler function called from SysTick event handler.
 */
static void SYSTIMER_lTimerHandler(void)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
 800695e:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <SYSTIMER_lTimerHandler+0xc4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	607b      	str	r3, [r7, #4]
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006964:	e050      	b.n	8006a08 <SYSTIMER_lTimerHandler+0xb0>
  {
    if (true == object_ptr->delete_swtmr)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3020 	ldrb.w	r3, [r3, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d013      	beq.n	8006998 <SYSTIMER_lTimerHandler+0x40>
    {
      /* Yes, remove this timer from timer list */
      SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	695b      	ldr	r3, [r3, #20]
 8006974:	4618      	mov	r0, r3
 8006976:	f7ff ff8f 	bl	8006898 <SYSTIMER_lRemoveTimerList>
      /* Set timer status as SYSTIMER_STATE_NOT_INITIALIZED */
      object_ptr->state = SYSTIMER_STATE_NOT_INITIALIZED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	735a      	strb	r2, [r3, #13]
      /* Release resource which are hold by this timer */
      g_timer_tracker &= ~(1U << object_ptr->id);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	695b      	ldr	r3, [r3, #20]
 8006984:	461a      	mov	r2, r3
 8006986:	2301      	movs	r3, #1
 8006988:	4093      	lsls	r3, r2
 800698a:	43da      	mvns	r2, r3
 800698c:	4b24      	ldr	r3, [pc, #144]	; (8006a20 <SYSTIMER_lTimerHandler+0xc8>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4013      	ands	r3, r2
 8006992:	4a23      	ldr	r2, [pc, #140]	; (8006a20 <SYSTIMER_lTimerHandler+0xc8>)
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	e034      	b.n	8006a02 <SYSTIMER_lTimerHandler+0xaa>
    }
    /* Check whether timer is a one shot timer */
    else if (SYSTIMER_MODE_ONE_SHOT == object_ptr->mode)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	7b1b      	ldrb	r3, [r3, #12]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d112      	bne.n	80069c6 <SYSTIMER_lTimerHandler+0x6e>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	7b5b      	ldrb	r3, [r3, #13]
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d12c      	bne.n	8006a02 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	695b      	ldr	r3, [r3, #20]
 80069ac:	4618      	mov	r0, r3
 80069ae:	f7ff ff73 	bl	8006898 <SYSTIMER_lRemoveTimerList>
        /* Set timer status as SYSTIMER_STATE_STOPPED */
        object_ptr->state = SYSTIMER_STATE_STOPPED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2202      	movs	r2, #2
 80069b6:	735a      	strb	r2, [r3, #13]
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6912      	ldr	r2, [r2, #16]
 80069c0:	4610      	mov	r0, r2
 80069c2:	4798      	blx	r3
 80069c4:	e01d      	b.n	8006a02 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    /* Check whether timer is periodic timer */
    else if (SYSTIMER_MODE_PERIODIC == object_ptr->mode)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7b1b      	ldrb	r3, [r3, #12]
 80069ca:	2b01      	cmp	r3, #1
 80069cc:	d118      	bne.n	8006a00 <SYSTIMER_lTimerHandler+0xa8>
    {
      if (SYSTIMER_STATE_RUNNING == object_ptr->state)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	7b5b      	ldrb	r3, [r3, #13]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d115      	bne.n	8006a02 <SYSTIMER_lTimerHandler+0xaa>
      {
        /* Yes, remove this timer from timer list */
        SYSTIMER_lRemoveTimerList((uint32_t)object_ptr->id);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	4618      	mov	r0, r3
 80069dc:	f7ff ff5c 	bl	8006898 <SYSTIMER_lRemoveTimerList>
        /* Reset timer tick */
        object_ptr->count = object_ptr->reload;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	69da      	ldr	r2, [r3, #28]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	619a      	str	r2, [r3, #24]
        /* Insert timer into timer list */
        SYSTIMER_lInsertTimerList((uint32_t)object_ptr->id);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	695b      	ldr	r3, [r3, #20]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f7ff fe71 	bl	80066d4 <SYSTIMER_lInsertTimerList>
        /* Call timer callback function */
        (object_ptr->callback)(object_ptr->args);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	689b      	ldr	r3, [r3, #8]
 80069f6:	687a      	ldr	r2, [r7, #4]
 80069f8:	6912      	ldr	r2, [r2, #16]
 80069fa:	4610      	mov	r0, r2
 80069fc:	4798      	blx	r3
 80069fe:	e000      	b.n	8006a02 <SYSTIMER_lTimerHandler+0xaa>
      }
    }
    else
    {
      break;
 8006a00:	e009      	b.n	8006a16 <SYSTIMER_lTimerHandler+0xbe>
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
 8006a02:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <SYSTIMER_lTimerHandler+0xc4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	607b      	str	r3, [r7, #4]
static void SYSTIMER_lTimerHandler(void)
{
  SYSTIMER_OBJECT_t *object_ptr;
  /* Get first item of timer list */
  object_ptr = g_timer_list;
  while ((NULL != object_ptr) && (0U == object_ptr->count))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d003      	beq.n	8006a16 <SYSTIMER_lTimerHandler+0xbe>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d0a7      	beq.n	8006966 <SYSTIMER_lTimerHandler+0xe>
      break;
    }
    /* Get first item of timer list */
    object_ptr = g_timer_list;
  }
}
 8006a16:	3708      	adds	r7, #8
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	bd80      	pop	{r7, pc}
 8006a1c:	1fff4400 	.word	0x1fff4400
 8006a20:	1fff4404 	.word	0x1fff4404

08006a24 <SysTick_Handler>:

/*
 *  SysTick Event Handler.
 */
void SysTick_Handler(void)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
  SYSTIMER_OBJECT_t *object_ptr;
  object_ptr = g_timer_list;
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <SysTick_Handler+0x40>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	607b      	str	r3, [r7, #4]
  g_systick_count++;
 8006a30:	4b0d      	ldr	r3, [pc, #52]	; (8006a68 <SysTick_Handler+0x44>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a0c      	ldr	r2, [pc, #48]	; (8006a68 <SysTick_Handler+0x44>)
 8006a38:	6013      	str	r3, [r2, #0]

  if (NULL != object_ptr)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00e      	beq.n	8006a5e <SysTick_Handler+0x3a>
  {
    if (object_ptr->count > 1UL)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b01      	cmp	r3, #1
 8006a46:	d905      	bls.n	8006a54 <SysTick_Handler+0x30>
    {
      object_ptr->count--;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	1e5a      	subs	r2, r3, #1
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	619a      	str	r2, [r3, #24]
 8006a52:	e004      	b.n	8006a5e <SysTick_Handler+0x3a>
    }
    else
    {
      object_ptr->count = 0U;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	619a      	str	r2, [r3, #24]
      SYSTIMER_lTimerHandler();
 8006a5a:	f7ff ff7d 	bl	8006958 <SYSTIMER_lTimerHandler>
    }
  }
}
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	1fff4400 	.word	0x1fff4400
 8006a68:	1fff4408 	.word	0x1fff4408

08006a6c <SYSTIMER_Init>:

/*
 * Initialization function which initializes the SYSTIMER APP, configures SysTick timer and SysTick exception.
 */
SYSTIMER_STATUS_t SYSTIMER_Init(SYSTIMER_t *handle)
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b084      	sub	sp, #16
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status = SYSTIMER_STATUS_SUCCESS;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_Init: SYSTIMER APP handle pointer uninitialized", (handle != NULL));

  /* Check APP initialization status to ensure whether SYSTIMER_Init called or not, initialize SYSTIMER if
   * SYSTIMER_Init called first time.
   */
  if (false == handle->init_status)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	f083 0301 	eor.w	r3, r3, #1
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d020      	beq.n	8006ac8 <SYSTIMER_Init+0x5c>
  {
    /* Initialize the header of the list */
    g_timer_list = NULL;
 8006a86:	4b13      	ldr	r3, [pc, #76]	; (8006ad4 <SYSTIMER_Init+0x68>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	601a      	str	r2, [r3, #0]
    /* Initialize SysTick timer */
    status = (SYSTIMER_STATUS_t)SysTick_Config((uint32_t)(SYSTIMER_SYSTICK_CLOCK * SYSTIMER_TICK_PERIOD));
 8006a8c:	4812      	ldr	r0, [pc, #72]	; (8006ad8 <SYSTIMER_Init+0x6c>)
 8006a8e:	f7ff fdff 	bl	8006690 <SysTick_Config>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]

    if (SYSTIMER_STATUS_FAILURE == status)
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d015      	beq.n	8006ac8 <SYSTIMER_Init+0x5c>
    }
    else
    {
#if (UC_FAMILY == XMC4)
      /* setting of First SW Timer period is always and subpriority value for XMC4000 devices */
      NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(
 8006a9c:	f7ff fd8e 	bl	80065bc <__NVIC_GetPriorityGrouping>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	213f      	movs	r1, #63	; 0x3f
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f7ff fdc0 	bl	800662c <NVIC_EncodePriority>
 8006aac:	4603      	mov	r3, r0
 8006aae:	f04f 30ff 	mov.w	r0, #4294967295
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	f7ff fd90 	bl	80065d8 <__NVIC_SetPriority>
      NVIC_GetPriorityGrouping(), SYSTIMER_PRIORITY, SYSTIMER_SUBPRIORITY));
#elif (UC_FAMILY == XMC1)
      /* setting of priority value for XMC1000 devices */
      NVIC_SetPriority(SysTick_IRQn, SYSTIMER_PRIORITY);
#endif      
      g_timer_tracker = 0U;
 8006ab8:	4b08      	ldr	r3, [pc, #32]	; (8006adc <SYSTIMER_Init+0x70>)
 8006aba:	2200      	movs	r2, #0
 8006abc:	601a      	str	r2, [r3, #0]
      /* Update the Initialization status of the SYSTIMER APP instance */
      handle->init_status = true;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
      status = SYSTIMER_STATUS_SUCCESS;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	73fb      	strb	r3, [r7, #15]
    }
  }

  return (status);
 8006ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3710      	adds	r7, #16
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	1fff4400 	.word	0x1fff4400
 8006ad8:	00023280 	.word	0x00023280
 8006adc:	1fff4404 	.word	0x1fff4404

08006ae0 <SYSTIMER_CreateTimer>:
  uint32_t period,
  SYSTIMER_MODE_t mode,
  SYSTIMER_CALLBACK_t callback,
  void  *args
)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b089      	sub	sp, #36	; 0x24
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	607a      	str	r2, [r7, #4]
 8006aea:	603b      	str	r3, [r7, #0]
 8006aec:	460b      	mov	r3, r1
 8006aee:	72fb      	strb	r3, [r7, #11]
  uint32_t id = 0U;
 8006af0:	2300      	movs	r3, #0
 8006af2:	61fb      	str	r3, [r7, #28]
  uint32_t count = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	61bb      	str	r3, [r7, #24]
  uint32_t period_ratio = 0U;
 8006af8:	2300      	movs	r3, #0
 8006afa:	617b      	str	r3, [r7, #20]
            ((period >= SYSTIMER_TICK_PERIOD_US) && (period > 0U) && (period <= 0xFFFFFFFFU)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Timer creation failure due to invalid timer mode",
            ((SYSTIMER_MODE_ONE_SHOT == mode) || (SYSTIMER_MODE_PERIODIC == mode)));
  XMC_ASSERT("SYSTIMER_CreateTimer: Can not create software without user callback", (NULL != callback));
  
  if (period < SYSTIMER_TICK_PERIOD_US)
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006b02:	d202      	bcs.n	8006b0a <SYSTIMER_CreateTimer+0x2a>
  {
    id = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e07b      	b.n	8006c02 <SYSTIMER_CreateTimer+0x122>
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	61bb      	str	r3, [r7, #24]
 8006b0e:	e075      	b.n	8006bfc <SYSTIMER_CreateTimer+0x11c>
    {
      /* Check for free timer ID */
      if (0U == (g_timer_tracker & (1U << count)))
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	2201      	movs	r2, #1
 8006b14:	409a      	lsls	r2, r3
 8006b16:	4b3e      	ldr	r3, [pc, #248]	; (8006c10 <SYSTIMER_CreateTimer+0x130>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d16a      	bne.n	8006bf6 <SYSTIMER_CreateTimer+0x116>
      {
        /* If yes, assign ID to this timer */
        g_timer_tracker |= (1U << count);
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	2201      	movs	r2, #1
 8006b24:	409a      	lsls	r2, r3
 8006b26:	4b3a      	ldr	r3, [pc, #232]	; (8006c10 <SYSTIMER_CreateTimer+0x130>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	4a38      	ldr	r2, [pc, #224]	; (8006c10 <SYSTIMER_CreateTimer+0x130>)
 8006b2e:	6013      	str	r3, [r2, #0]
        /* Initialize the timer as per input values */
        g_timer_tbl[count].id     = count;
 8006b30:	4938      	ldr	r1, [pc, #224]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006b32:	69ba      	ldr	r2, [r7, #24]
 8006b34:	4613      	mov	r3, r2
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	4413      	add	r3, r2
 8006b3a:	009b      	lsls	r3, r3, #2
 8006b3c:	440b      	add	r3, r1
 8006b3e:	3310      	adds	r3, #16
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].mode   = mode;
 8006b44:	4933      	ldr	r1, [pc, #204]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006b46:	69ba      	ldr	r2, [r7, #24]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	00db      	lsls	r3, r3, #3
 8006b4c:	4413      	add	r3, r2
 8006b4e:	009b      	lsls	r3, r3, #2
 8006b50:	440b      	add	r3, r1
 8006b52:	3308      	adds	r3, #8
 8006b54:	7afa      	ldrb	r2, [r7, #11]
 8006b56:	711a      	strb	r2, [r3, #4]
        g_timer_tbl[count].state  = SYSTIMER_STATE_STOPPED;
 8006b58:	492e      	ldr	r1, [pc, #184]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006b5a:	69ba      	ldr	r2, [r7, #24]
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	440b      	add	r3, r1
 8006b66:	3308      	adds	r3, #8
 8006b68:	2202      	movs	r2, #2
 8006b6a:	715a      	strb	r2, [r3, #5]
        period_ratio = (uint32_t)(period / SYSTIMER_TICK_PERIOD_US);
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4a2a      	ldr	r2, [pc, #168]	; (8006c18 <SYSTIMER_CreateTimer+0x138>)
 8006b70:	fba2 2303 	umull	r2, r3, r2, r3
 8006b74:	099b      	lsrs	r3, r3, #6
 8006b76:	617b      	str	r3, [r7, #20]
        g_timer_tbl[count].count  = (period_ratio + HW_TIMER_ADDITIONAL_CNT);
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	1c59      	adds	r1, r3, #1
 8006b7c:	4825      	ldr	r0, [pc, #148]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	4613      	mov	r3, r2
 8006b82:	00db      	lsls	r3, r3, #3
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4403      	add	r3, r0
 8006b8a:	3318      	adds	r3, #24
 8006b8c:	6019      	str	r1, [r3, #0]
        g_timer_tbl[count].reload  = period_ratio;
 8006b8e:	4921      	ldr	r1, [pc, #132]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4613      	mov	r3, r2
 8006b94:	00db      	lsls	r3, r3, #3
 8006b96:	4413      	add	r3, r2
 8006b98:	009b      	lsls	r3, r3, #2
 8006b9a:	440b      	add	r3, r1
 8006b9c:	3318      	adds	r3, #24
 8006b9e:	697a      	ldr	r2, [r7, #20]
 8006ba0:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].callback = callback;
 8006ba2:	491c      	ldr	r1, [pc, #112]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006ba4:	69ba      	ldr	r2, [r7, #24]
 8006ba6:	4613      	mov	r3, r2
 8006ba8:	00db      	lsls	r3, r3, #3
 8006baa:	4413      	add	r3, r2
 8006bac:	009b      	lsls	r3, r3, #2
 8006bae:	440b      	add	r3, r1
 8006bb0:	3308      	adds	r3, #8
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].args = args;
 8006bb6:	4917      	ldr	r1, [pc, #92]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	00db      	lsls	r3, r3, #3
 8006bbe:	4413      	add	r3, r2
 8006bc0:	009b      	lsls	r3, r3, #2
 8006bc2:	440b      	add	r3, r1
 8006bc4:	3310      	adds	r3, #16
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	601a      	str	r2, [r3, #0]
        g_timer_tbl[count].prev   = NULL;
 8006bca:	4912      	ldr	r1, [pc, #72]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006bcc:	69ba      	ldr	r2, [r7, #24]
 8006bce:	4613      	mov	r3, r2
 8006bd0:	00db      	lsls	r3, r3, #3
 8006bd2:	4413      	add	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	440b      	add	r3, r1
 8006bd8:	2200      	movs	r2, #0
 8006bda:	605a      	str	r2, [r3, #4]
        g_timer_tbl[count].next   = NULL;
 8006bdc:	490d      	ldr	r1, [pc, #52]	; (8006c14 <SYSTIMER_CreateTimer+0x134>)
 8006bde:	69ba      	ldr	r2, [r7, #24]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	440b      	add	r3, r1
 8006bea:	2200      	movs	r2, #0
 8006bec:	601a      	str	r2, [r3, #0]
        id = count + 1U;
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	3301      	adds	r3, #1
 8006bf2:	61fb      	str	r3, [r7, #28]
        break;
 8006bf4:	e005      	b.n	8006c02 <SYSTIMER_CreateTimer+0x122>
  {
    id = 0U;
  }
  else
  {
    for (count = 0U; count < SYSTIMER_CFG_MAX_TMR; count++)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	3301      	adds	r3, #1
 8006bfa:	61bb      	str	r3, [r7, #24]
 8006bfc:	69bb      	ldr	r3, [r7, #24]
 8006bfe:	2b07      	cmp	r3, #7
 8006c00:	d986      	bls.n	8006b10 <SYSTIMER_CreateTimer+0x30>
      }
    }

  }

  return (id);
 8006c02:	69fb      	ldr	r3, [r7, #28]
}  
 8006c04:	4618      	mov	r0, r3
 8006c06:	3724      	adds	r7, #36	; 0x24
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr
 8006c10:	1fff4404 	.word	0x1fff4404
 8006c14:	1fff510c 	.word	0x1fff510c
 8006c18:	10624dd3 	.word	0x10624dd3

08006c1c <SYSTIMER_StartTimer>:

/*
 *  API to start the software timer.
 */
SYSTIMER_STATUS_t SYSTIMER_StartTimer(uint32_t id)
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  SYSTIMER_STATUS_t status;
  status = SYSTIMER_STATUS_FAILURE;
 8006c24:	2301      	movs	r3, #1
 8006c26:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("SYSTIMER_StartTimer: Failure in timer restart operation due to invalid timer ID",
            ((id <= SYSTIMER_CFG_MAX_TMR) && (id > 0U)));
  XMC_ASSERT("SYSTIMER_StartTimer: Error during start of software timer", (0U != (g_timer_tracker & (1U << (id - 1U)))));
  
  /* Check if timer is running */
  if (SYSTIMER_STATE_STOPPED == g_timer_tbl[id - 1U].state)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	1e5a      	subs	r2, r3, #1
 8006c2c:	491a      	ldr	r1, [pc, #104]	; (8006c98 <SYSTIMER_StartTimer+0x7c>)
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	3308      	adds	r3, #8
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	d126      	bne.n	8006c8e <SYSTIMER_StartTimer+0x72>
  {
    g_timer_tbl[id - 1U].count = (g_timer_tbl[id - 1U].reload + HW_TIMER_ADDITIONAL_CNT);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	1e5a      	subs	r2, r3, #1
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	1e59      	subs	r1, r3, #1
 8006c48:	4813      	ldr	r0, [pc, #76]	; (8006c98 <SYSTIMER_StartTimer+0x7c>)
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	00db      	lsls	r3, r3, #3
 8006c4e:	440b      	add	r3, r1
 8006c50:	009b      	lsls	r3, r3, #2
 8006c52:	4403      	add	r3, r0
 8006c54:	3318      	adds	r3, #24
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	1c59      	adds	r1, r3, #1
 8006c5a:	480f      	ldr	r0, [pc, #60]	; (8006c98 <SYSTIMER_StartTimer+0x7c>)
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	4413      	add	r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	4403      	add	r3, r0
 8006c66:	3318      	adds	r3, #24
 8006c68:	6019      	str	r1, [r3, #0]
    /* set timer status as SYSTIMER_STATE_RUNNING */
    g_timer_tbl[id - 1U].state = SYSTIMER_STATE_RUNNING;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	1e5a      	subs	r2, r3, #1
 8006c6e:	490a      	ldr	r1, [pc, #40]	; (8006c98 <SYSTIMER_StartTimer+0x7c>)
 8006c70:	4613      	mov	r3, r2
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	715a      	strb	r2, [r3, #5]
    /* Insert this timer into timer list */
    SYSTIMER_lInsertTimerList((id - 1U));
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff fd25 	bl	80066d4 <SYSTIMER_lInsertTimerList>
    status = SYSTIMER_STATUS_SUCCESS;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	73fb      	strb	r3, [r7, #15]
  }

  return (status);
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	1fff510c 	.word	0x1fff510c

08006c9c <XMC_SPI_CH_SetTransmitMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
 8006cb0:	78fb      	ldrb	r3, [r7, #3]
 8006cb2:	019b      	lsls	r3, r3, #6
 8006cb4:	b2db      	uxtb	r3, r3
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Transmit()
 */
__STATIC_INLINE void XMC_SPI_CH_SetTransmitMode(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_MODE_t mode)
{
  channel->CCR = (channel->CCR & (uint32_t)(~USIC_CH_CCR_HPCEN_Msk)) |
 8006cb6:	431a      	orrs	r2, r3
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40
                 (((uint32_t) mode << USIC_CH_CCR_HPCEN_Pos) & (uint32_t)USIC_CH_CCR_HPCEN_Msk);
}
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr
 8006cc6:	bf00      	nop

08006cc8 <XMC_DMA_CH_Enable>:
 * The function sets the GPDMA's CHENREG register to enable a DMA channel. Please
 * ensure that the GPDMA module itself is enabled before calling this function.
 * See ::XMC_DMA_Enable() for details.
 */
__STATIC_INLINE void XMC_DMA_CH_Enable(XMC_DMA_t *const dma, const uint8_t channel)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b083      	sub	sp, #12
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	460b      	mov	r3, r1
 8006cd2:	70fb      	strb	r3, [r7, #3]
  dma->CHENREG = (uint32_t)(0x101UL << channel);
 8006cd4:	78fb      	ldrb	r3, [r7, #3]
 8006cd6:	f240 1201 	movw	r2, #257	; 0x101
 8006cda:	409a      	lsls	r2, r3
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8006ce2:	370c      	adds	r7, #12
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cea:	4770      	bx	lr

08006cec <XMC_DMA_CH_SetSourceAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetDestinationAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetSourceAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006cec:	b480      	push	{r7}
 8006cee:	b085      	sub	sp, #20
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	460b      	mov	r3, r1
 8006cf6:	607a      	str	r2, [r7, #4]
 8006cf8:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].SAR = addr;
 8006cfa:	7afb      	ldrb	r3, [r7, #11]
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	2158      	movs	r1, #88	; 0x58
 8006d00:	fb01 f303 	mul.w	r3, r1, r3
 8006d04:	4413      	add	r3, r2
 8006d06:	687a      	ldr	r2, [r7, #4]
 8006d08:	601a      	str	r2, [r3, #0]
}
 8006d0a:	3714      	adds	r7, #20
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <XMC_DMA_CH_SetDestinationAddress>:
 *
 * \par<b>Related API: </b><br>
 * ::XMC_DMA_CH_SetSourceAddress() <br>
 */
__STATIC_INLINE void XMC_DMA_CH_SetDestinationAddress(XMC_DMA_t *const dma, const uint8_t channel, uint32_t addr)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b085      	sub	sp, #20
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].DAR = addr;
 8006d22:	7afb      	ldrb	r3, [r7, #11]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	2158      	movs	r1, #88	; 0x58
 8006d28:	fb01 f303 	mul.w	r3, r1, r3
 8006d2c:	4413      	add	r3, r2
 8006d2e:	3308      	adds	r3, #8
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	601a      	str	r2, [r3, #0]
}
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop

08006d40 <XMC_DMA_CH_SetBlockSize>:
 * The function may be called after enabling the DMA channel. Please
 * see ::XMC_DMA_CH_Enable() for more information.
 *
 */
__STATIC_INLINE void XMC_DMA_CH_SetBlockSize(XMC_DMA_t *const dma, const uint8_t channel, uint32_t block_size)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b085      	sub	sp, #20
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	460b      	mov	r3, r1
 8006d4a:	607a      	str	r2, [r7, #4]
 8006d4c:	72fb      	strb	r3, [r7, #11]
  dma->CH[channel].CTLH = block_size;
 8006d4e:	7afb      	ldrb	r3, [r7, #11]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	2158      	movs	r1, #88	; 0x58
 8006d54:	fb01 f303 	mul.w	r3, r1, r3
 8006d58:	4413      	add	r3, r2
 8006d5a:	3318      	adds	r3, #24
 8006d5c:	687a      	ldr	r2, [r7, #4]
 8006d5e:	605a      	str	r2, [r3, #4]
}
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop

08006d6c <SPI_MASTER_Init>:

/*
 * This function initializes the SPI channel, based on UI configuration.
 */
SPI_MASTER_STATUS_t SPI_MASTER_Init(SPI_MASTER_t* const handle)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t status;

  XMC_ASSERT("SPI_MASTER_Init:handle NULL" , (handle != NULL));

  /* Configure the port registers and data input registers of SPI channel */
  status = handle->config->fptr_spi_master_config();
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	4798      	blx	r3
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  return status;
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3710      	adds	r7, #16
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}
 8006d8a:	bf00      	nop

08006d8c <SPI_MASTER_Transmit>:

  return status;
}

SPI_MASTER_STATUS_t SPI_MASTER_Transmit(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b086      	sub	sp, #24
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	60f8      	str	r0, [r7, #12]
 8006d94:	60b9      	str	r1, [r7, #8]
 8006d96:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;
  
   status = SPI_MASTER_STATUS_FAILURE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartTransmitIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d106      	bne.n	8006db6 <SPI_MASTER_Transmit+0x2a>
  {
    status = SPI_MASTER_StartTransmitDMA(handle, dataptr, count);
 8006da8:	68f8      	ldr	r0, [r7, #12]
 8006daa:	68b9      	ldr	r1, [r7, #8]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	f000 f821 	bl	8006df4 <SPI_MASTER_StartTransmitDMA>
 8006db2:	4603      	mov	r3, r0
 8006db4:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartTransmitPolling(handle, dataptr, count);
  }
#endif

  return status;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3718      	adds	r7, #24
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}

08006dc0 <SPI_MASTER_Receive>:

SPI_MASTER_STATUS_t SPI_MASTER_Receive(const SPI_MASTER_t *const handle, uint8_t* dataptr, uint32_t count)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]
  SPI_MASTER_STATUS_t status;

  status = SPI_MASTER_STATUS_FAILURE;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_StartReceiveIRQ(handle, dataptr, count);
  }
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006dd8:	2b01      	cmp	r3, #1
 8006dda:	d106      	bne.n	8006dea <SPI_MASTER_Receive+0x2a>
  {
    status = SPI_MASTER_StartReceiveDMA(handle, dataptr, count);
 8006ddc:	68f8      	ldr	r0, [r7, #12]
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	f000 f8db 	bl	8006f9c <SPI_MASTER_StartReceiveDMA>
 8006de6:	4603      	mov	r3, r0
 8006de8:	75fb      	strb	r3, [r7, #23]
  {
    status = SPI_MASTER_lStartReceivePolling(handle, dataptr, count);
  }
#endif

  return status;
 8006dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dec:	4618      	mov	r0, r3
 8006dee:	3718      	adds	r7, #24
 8006df0:	46bd      	mov	sp, r7
 8006df2:	bd80      	pop	{r7, pc}

08006df4 <SPI_MASTER_StartTransmitDMA>:
}
#endif

#if(SPI_MASTER_DMA_TRANSMIT_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartTransmitDMA(const SPI_MASTER_t *const handle, uint8_t *data_ptr, uint32_t block_size)
{
 8006df4:	b580      	push	{r7, lr}
 8006df6:	b088      	sub	sp, #32
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	60f8      	str	r0, [r7, #12]
 8006dfc:	60b9      	str	r1, [r7, #8]
 8006dfe:	607a      	str	r2, [r7, #4]
  uint32_t dma_ctll;
  uint32_t mode;

  XMC_ASSERT("SPI_MASTER_StartTransmitDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8006e00:	2304      	movs	r3, #4
 8006e02:	77fb      	strb	r3, [r7, #31]
  runtime_handle = handle->runtime;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	617b      	str	r3, [r7, #20]

  if (handle->config->transmit_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	f040 80bc 	bne.w	8006f90 <SPI_MASTER_StartTransmitDMA+0x19c>
  {
    /* Check whether SPI channel is free or not */
    if (false == runtime_handle->tx_busy)
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e1e:	b2db      	uxtb	r3, r3
 8006e20:	f083 0301 	eor.w	r3, r3, #1
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	f000 80b0 	beq.w	8006f8c <SPI_MASTER_StartTransmitDMA+0x198>
    {
      /* Check data pointer is valid or not */
      if ((data_ptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	f000 80a9 	beq.w	8006f86 <SPI_MASTER_StartTransmitDMA+0x192>
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	f000 80a5 	beq.w	8006f86 <SPI_MASTER_StartTransmitDMA+0x192>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e42:	f080 80a0 	bcs.w	8006f86 <SPI_MASTER_StartTransmitDMA+0x192>
      {
        /* Obtain the address of data, size of data */
        runtime_handle->tx_data_count = block_size;
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	605a      	str	r2, [r3, #4]
        /* Initialize to first index and set the busy flag */
        runtime_handle->tx_data_index = 0U;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	609a      	str	r2, [r3, #8]
        runtime_handle->tx_busy = true;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	2201      	movs	r2, #1
 8006e56:	f883 2020 	strb.w	r2, [r3, #32]

        if (runtime_handle->tx_data_dummy == true)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d029      	beq.n	8006eba <SPI_MASTER_StartTransmitDMA+0xc6>
        {
          dma_ctll = (uint32_t)handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	7f5b      	ldrb	r3, [r3, #29]
 8006e70:	4619      	mov	r1, r3
 8006e72:	2358      	movs	r3, #88	; 0x58
 8006e74:	fb03 f301 	mul.w	r3, r3, r1
 8006e78:	4413      	add	r3, r2
 8006e7a:	3318      	adds	r3, #24
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (uint32_t)(~(GPDMA0_CH_CTLL_SINC_Msk))) |
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006e86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006e8a:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_NO_CHANGE << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	68db      	ldr	r3, [r3, #12]
 8006e90:	681a      	ldr	r2, [r3, #0]
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	7f5b      	ldrb	r3, [r3, #29]
 8006e96:	4619      	mov	r1, r3
 8006e98:	2358      	movs	r3, #88	; 0x58
 8006e9a:	fb03 f301 	mul.w	r3, r3, r1
 8006e9e:	4413      	add	r3, r2
 8006ea0:	3318      	adds	r3, #24
 8006ea2:	693a      	ldr	r2, [r7, #16]
 8006ea4:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)((uint32_t)handle->runtime->spi_master_mode & 0xfffbU);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	7f1b      	ldrb	r3, [r3, #28]
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	461a      	mov	r2, r3
 8006eb0:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8006eb4:	4013      	ands	r3, r2
 8006eb6:	61bb      	str	r3, [r7, #24]
 8006eb8:	e025      	b.n	8006f06 <SPI_MASTER_StartTransmitDMA+0x112>
        }
        else
        {
          runtime_handle->tx_data = data_ptr;
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	68ba      	ldr	r2, [r7, #8]
 8006ebe:	619a      	str	r2, [r3, #24]
          dma_ctll = handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL;
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	68db      	ldr	r3, [r3, #12]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	7f5b      	ldrb	r3, [r3, #29]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	2358      	movs	r3, #88	; 0x58
 8006ece:	fb03 f301 	mul.w	r3, r3, r1
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3318      	adds	r3, #24
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	613b      	str	r3, [r7, #16]

          dma_ctll = (uint32_t)(dma_ctll & (~GPDMA0_CH_CTLL_SINC_Msk)) |
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006ee0:	613b      	str	r3, [r7, #16]
                               ((uint32_t)XMC_DMA_CH_ADDRESS_COUNT_MODE_INCREMENT << GPDMA0_CH_CTLL_SINC_Pos);

          handle->global_dma->dma->CH[handle->dma_ch_tx_number].CTLL = dma_ctll;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	68db      	ldr	r3, [r3, #12]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	7f5b      	ldrb	r3, [r3, #29]
 8006eec:	4619      	mov	r1, r3
 8006eee:	2358      	movs	r3, #88	; 0x58
 8006ef0:	fb03 f301 	mul.w	r3, r3, r1
 8006ef4:	4413      	add	r3, r2
 8006ef6:	3318      	adds	r3, #24
 8006ef8:	693a      	ldr	r2, [r7, #16]
 8006efa:	601a      	str	r2, [r3, #0]
          mode = (uint32_t)handle->runtime->spi_master_mode;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	689b      	ldr	r3, [r3, #8]
 8006f00:	7f1b      	ldrb	r3, [r3, #28]
 8006f02:	b2db      	uxtb	r3, r3
 8006f04:	61bb      	str	r3, [r7, #24]
        }

        /* Enable transmit event generation */
        XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)XMC_SPI_CH_EVENT_RECEIVE_START);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f10:	f7fd fc22 	bl	8004758 <XMC_SPI_CH_EnableEvent>

        XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_tx_number, block_size);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	681a      	ldr	r2, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	7f5b      	ldrb	r3, [r3, #29]
 8006f1e:	4610      	mov	r0, r2
 8006f20:	4619      	mov	r1, r3
 8006f22:	687a      	ldr	r2, [r7, #4]
 8006f24:	f7ff ff0c 	bl	8006d40 <XMC_DMA_CH_SetBlockSize>

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	68db      	ldr	r3, [r3, #12]
 8006f2c:	6819      	ldr	r1, [r3, #0]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	7f5a      	ldrb	r2, [r3, #29]
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	699b      	ldr	r3, [r3, #24]
 8006f36:	4608      	mov	r0, r1
 8006f38:	4611      	mov	r1, r2
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	f7ff fed6 	bl	8006cec <XMC_DMA_CH_SetSourceAddress>

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681a      	ldr	r2, [r3, #0]
 8006f44:	697b      	ldr	r3, [r7, #20]
 8006f46:	7f1b      	ldrb	r3, [r3, #28]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	4610      	mov	r0, r2
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f7ff fea5 	bl	8006c9c <XMC_SPI_CH_SetTransmitMode>

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	6818      	ldr	r0, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	7f59      	ldrb	r1, [r3, #29]
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	69bb      	ldr	r3, [r7, #24]
 8006f62:	3320      	adds	r3, #32
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	4413      	add	r3, r2

        XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma, handle->dma_ch_tx_number, (uint32_t)runtime_handle->tx_data);

        XMC_SPI_CH_SetTransmitMode(handle->channel, runtime_handle->spi_master_mode);

        XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma,
 8006f68:	461a      	mov	r2, r3
 8006f6a:	f7ff fed3 	bl	8006d14 <XMC_DMA_CH_SetDestinationAddress>
                                         handle->dma_ch_tx_number,
                                         (uint32_t)&(handle->channel->TBUF[mode]));

        status = SPI_MASTER_STATUS_SUCCESS;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	77fb      	strb	r3, [r7, #31]

        XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_tx_number);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	7f5b      	ldrb	r3, [r3, #29]
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	f7ff fea2 	bl	8006cc8 <XMC_DMA_CH_Enable>
 8006f84:	e004      	b.n	8006f90 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 8006f86:	2303      	movs	r3, #3
 8006f88:	77fb      	strb	r3, [r7, #31]
 8006f8a:	e001      	b.n	8006f90 <SPI_MASTER_StartTransmitDMA+0x19c>
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8006f90:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3720      	adds	r7, #32
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}
 8006f9a:	bf00      	nop

08006f9c <SPI_MASTER_StartReceiveDMA>:
}
#endif

#if(SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_StartReceiveDMA(const SPI_MASTER_t  *const handle, uint8_t *dataptr, uint32_t block_size)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	60f8      	str	r0, [r7, #12]
 8006fa4:	60b9      	str	r1, [r7, #8]
 8006fa6:	607a      	str	r2, [r7, #4]
  SPI_MASTER_RUNTIME_t * runtime_handle;
  static uint8_t dummy_data[2] = {0xFFU, 0xFFU};

  XMC_ASSERT("SPI_MASTER_StartReceiveDMA:handle NULL" , (handle != NULL));

  status = SPI_MASTER_STATUS_MODE_MISMATCH;
 8006fa8:	2304      	movs	r3, #4
 8006faa:	75fb      	strb	r3, [r7, #23]
  runtime_handle = handle->runtime;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	613b      	str	r3, [r7, #16]

  if (handle->config->receive_mode == SPI_MASTER_TRANSFER_MODE_DMA)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	f893 3085 	ldrb.w	r3, [r3, #133]	; 0x85
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d13c      	bne.n	8007038 <SPI_MASTER_StartReceiveDMA+0x9c>
  {
    status = SPI_MASTER_STATUS_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	75fb      	strb	r3, [r7, #23]
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	7fdb      	ldrb	r3, [r3, #31]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	f083 0301 	eor.w	r3, r3, #1
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d030      	beq.n	8007034 <SPI_MASTER_StartReceiveDMA+0x98>
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006fd8:	b2db      	uxtb	r3, r3
 8006fda:	f083 0301 	eor.w	r3, r3, #1
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d027      	beq.n	8007034 <SPI_MASTER_StartReceiveDMA+0x98>
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d021      	beq.n	800702e <SPI_MASTER_StartReceiveDMA+0x92>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01e      	beq.n	800702e <SPI_MASTER_StartReceiveDMA+0x92>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ff6:	d21a      	bcs.n	800702e <SPI_MASTER_StartReceiveDMA+0x92>
      {
        runtime_handle->rx_busy = true;
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	77da      	strb	r2, [r3, #31]
        runtime_handle->rx_data = dataptr;
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	68ba      	ldr	r2, [r7, #8]
 8007002:	615a      	str	r2, [r3, #20]
        runtime_handle->tx_data = &dummy_data[0];
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	4a0f      	ldr	r2, [pc, #60]	; (8007044 <SPI_MASTER_StartReceiveDMA+0xa8>)
 8007008:	619a      	str	r2, [r3, #24]
        runtime_handle->tx_data_count = block_size;
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	605a      	str	r2, [r3, #4]
        runtime_handle->tx_data_dummy = true;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
        runtime_handle->rx_data_dummy = false;
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
 8007020:	68f8      	ldr	r0, [r7, #12]
 8007022:	6879      	ldr	r1, [r7, #4]
 8007024:	f000 f810 	bl	8007048 <SPI_MASTER_lReceiveDMA>
 8007028:	4603      	mov	r3, r0
 800702a:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 800702c:	e004      	b.n	8007038 <SPI_MASTER_StartReceiveDMA+0x9c>

        status = SPI_MASTER_lReceiveDMA(handle, block_size);
      }
      else
      {
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
 800702e:	2303      	movs	r3, #3
 8007030:	75fb      	strb	r3, [r7, #23]
    status = SPI_MASTER_STATUS_BUSY;
    /* Check whether SPI channel is free or not */
    if ((false == runtime_handle->rx_busy) && (false == runtime_handle->tx_busy))
    {
      /* Check data pointer is valid or not */
      if ((dataptr != NULL) && (block_size > 0U) && (block_size <= SPI_MASTER_DMA_MAXCOUNT))
 8007032:	e001      	b.n	8007038 <SPI_MASTER_StartReceiveDMA+0x9c>
        status = SPI_MASTER_STATUS_BUFFER_INVALID;
      }
    }
    else
    {
      status = SPI_MASTER_STATUS_BUSY;
 8007034:	2302      	movs	r3, #2
 8007036:	75fb      	strb	r3, [r7, #23]
    }
  }
  return status;
 8007038:	7dfb      	ldrb	r3, [r7, #23]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	1ffe891c 	.word	0x1ffe891c

08007048 <SPI_MASTER_lReceiveDMA>:
}
#endif

#if (SPI_MASTER_DMA_RECEIVE_MODE == 1U)
SPI_MASTER_STATUS_t SPI_MASTER_lReceiveDMA(const SPI_MASTER_t *const handle, uint32_t block_size)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  SPI_MASTER_STATUS_t status;
  SPI_MASTER_RUNTIME_t * runtime_handle;

  runtime_handle = handle->runtime;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	689b      	ldr	r3, [r3, #8]
 8007056:	60fb      	str	r3, [r7, #12]
  runtime_handle->rx_data_index = 0U;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	2200      	movs	r2, #0
 800705c:	611a      	str	r2, [r3, #16]
  runtime_handle->rx_data_count = (uint32_t)block_size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	683a      	ldr	r2, [r7, #0]
 8007062:	60da      	str	r2, [r3, #12]

  SPI_MASTER_lStdRBUFFlush(handle->channel);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4618      	mov	r0, r3
 800706a:	f000 f847 	bl	80070fc <SPI_MASTER_lStdRBUFFlush>

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4618      	mov	r0, r3
 8007074:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8007078:	f7fd fb6e 	bl	8004758 <XMC_SPI_CH_EnableEvent>

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	68db      	ldr	r3, [r3, #12]
 8007080:	6819      	ldr	r1, [r3, #0]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7f1a      	ldrb	r2, [r3, #28]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	4608      	mov	r0, r1
 800708c:	4611      	mov	r1, r2
 800708e:	461a      	mov	r2, r3
 8007090:	f7ff fe56 	bl	8006d40 <XMC_DMA_CH_SetBlockSize>

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	6819      	ldr	r1, [r3, #0]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	7f1a      	ldrb	r2, [r3, #28]
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3354      	adds	r3, #84	; 0x54

  XMC_SPI_CH_EnableEvent(handle->channel, (uint32_t)SPI_MASTER_RECEIVE_EVENT);

  XMC_DMA_CH_SetBlockSize(handle->global_dma->dma, handle->dma_ch_rx_number, runtime_handle->rx_data_count);

  XMC_DMA_CH_SetSourceAddress(handle->global_dma->dma,
 80070a4:	4608      	mov	r0, r1
 80070a6:	4611      	mov	r1, r2
 80070a8:	461a      	mov	r2, r3
 80070aa:	f7ff fe1f 	bl	8006cec <XMC_DMA_CH_SetSourceAddress>
                              handle->dma_ch_rx_number,
                              (uint32_t)&(handle->channel->RBUF));

  XMC_DMA_CH_SetDestinationAddress(handle->global_dma->dma, handle->dma_ch_rx_number, (uint32_t)runtime_handle->rx_data);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	7f1a      	ldrb	r2, [r3, #28]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	695b      	ldr	r3, [r3, #20]
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	461a      	mov	r2, r3
 80070c2:	f7ff fe27 	bl	8006d14 <XMC_DMA_CH_SetDestinationAddress>

  status = SPI_MASTER_STATUS_SUCCESS;
 80070c6:	2300      	movs	r3, #0
 80070c8:	72fb      	strb	r3, [r7, #11]

  XMC_DMA_CH_Enable(handle->global_dma->dma, handle->dma_ch_rx_number);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	7f1b      	ldrb	r3, [r3, #28]
 80070d4:	4610      	mov	r0, r2
 80070d6:	4619      	mov	r1, r3
 80070d8:	f7ff fdf6 	bl	8006cc8 <XMC_DMA_CH_Enable>

  /* Call the transmit, to receive the data synchronously */
  status = SPI_MASTER_Transmit(handle, runtime_handle->tx_data, runtime_handle->tx_data_count);
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	699a      	ldr	r2, [r3, #24]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	4611      	mov	r1, r2
 80070e8:	461a      	mov	r2, r3
 80070ea:	f7ff fe4f 	bl	8006d8c <SPI_MASTER_Transmit>
 80070ee:	4603      	mov	r3, r0
 80070f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80070f2:	7afb      	ldrb	r3, [r7, #11]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <SPI_MASTER_lStdRBUFFlush>:

/*
 * Clears the receive buffers
 */
static void SPI_MASTER_lStdRBUFFlush(XMC_USIC_CH_t *const channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b082      	sub	sp, #8
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
  /* Clear RBF0 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f7fd fb0d 	bl	8004724 <XMC_SPI_CH_GetReceivedData>
  /* Clear RBF1 */
  (void)XMC_SPI_CH_GetReceivedData(channel);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fd fb0a 	bl	8004724 <XMC_SPI_CH_GetReceivedData>
}
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop

08007118 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8007118:	b480      	push	{r7}
 800711a:	b083      	sub	sp, #12
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	460b      	mov	r3, r1
 8007122:	70fb      	strb	r3, [r7, #3]
 8007124:	4613      	mov	r3, r2
 8007126:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 8007128:	78f8      	ldrb	r0, [r7, #3]
 800712a:	78fb      	ldrb	r3, [r7, #3]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	3306      	adds	r3, #6
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 800713a:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 800713c:	431a      	orrs	r2, r3
 800713e:	6879      	ldr	r1, [r7, #4]
 8007140:	1d83      	adds	r3, r0, #6
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 8007148:	370c      	adds	r7, #12
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop

08007154 <XMC_USIC_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007164:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
 8007168:	78fb      	ldrb	r3, [r7, #3]
 800716a:	3b01      	subs	r3, #1
 800716c:	061b      	lsls	r3, r3, #24
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetFrameLength()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_WLE_Msk)) |
 800716e:	431a      	orrs	r2, r3
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	635a      	str	r2, [r3, #52]	; 0x34
                  (uint32_t)(((uint32_t)word_length - 1UL)  << USIC_CH_SCTR_WLE_Pos);
}
 8007174:	370c      	adds	r7, #12
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop

08007180 <XMC_USIC_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007190:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	3b01      	subs	r3, #1
 8007198:	041b      	lsls	r3, r3, #16
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
  channel->SCTR = (uint32_t)(channel->SCTR & (~USIC_CH_SCTR_FLE_Msk)) |
 800719a:	431a      	orrs	r2, r3
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	635a      	str	r2, [r3, #52]	; 0x34
                  (((uint32_t)frame_length - 0x1U)  << USIC_CH_SCTR_FLE_Pos);
}
 80071a0:	370c      	adds	r7, #12
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop

080071ac <XMC_USIC_CH_GetTransmitBufferStatus>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetDataOutputMode() \n\n\n
 */
__STATIC_INLINE XMC_USIC_CH_TBUF_STATUS_t XMC_USIC_CH_GetTransmitBufferStatus(XMC_USIC_CH_t *const channel)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b083      	sub	sp, #12
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
  return (XMC_USIC_CH_TBUF_STATUS_t)(channel->TCSR & USIC_CH_TCSR_TDV_Msk);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80071be:	b2db      	uxtb	r3, r3
}
 80071c0:	4618      	mov	r0, r3
 80071c2:	370c      	adds	r7, #12
 80071c4:	46bd      	mov	sp, r7
 80071c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ca:	4770      	bx	lr

080071cc <XMC_USIC_CH_TriggerServiceRequest>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetInterruptNodePointer() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_TriggerServiceRequest(XMC_USIC_CH_t *const channel, const uint32_t service_request_line)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  channel->FMR = (uint32_t)(USIC_CH_FMR_SIO0_Msk << service_request_line);
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80071dc:	409a      	lsls	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <XMC_USIC_CH_ConfigureShiftClockOutput>:
 *
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b085      	sub	sp, #20
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	695b      	ldr	r3, [r3, #20]
 80071fc:	f023 4250 	bic.w	r2, r3, #3489660928	; 0xd0000000
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
 8007200:	68bb      	ldr	r3, [r7, #8]
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
 8007202:	431a      	orrs	r2, r3
                 (uint32_t)passive_level |
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	431a      	orrs	r2, r3
 */
__STATIC_INLINE void XMC_USIC_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
  channel->BRG = (uint32_t)(channel->BRG & (~(USIC_CH_BRG_SCLKCFG_Msk |
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	615a      	str	r2, [r3, #20]
                            USIC_CH_BRG_SCLKOSEL_Msk))) |
                 (uint32_t)passive_level |
                 (uint32_t)clock_output;
}
 800720c:	3714      	adds	r7, #20
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop

08007218 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007228:	f023 020f 	bic.w	r2, r3, #15
 800722c:	78fb      	ldrb	r3, [r7, #3]
 800722e:	431a      	orrs	r2, r3
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	641a      	str	r2, [r3, #64]	; 0x40
}
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop

08007240 <XMC_SPI_CH_Init>:
 * <li>Set polarity for the Slave signal,</li>
 * <li>Enable Frame end mode(MSLS signal is kept active after transmission of a frame)</li>
 * </ul>
 */
__STATIC_INLINE void XMC_SPI_CH_Init(XMC_USIC_CH_t *const channel, const XMC_SPI_CH_CONFIG_t *const config)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  XMC_SPI_CH_InitEx(channel, config, true);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	2201      	movs	r2, #1
 8007250:	f7fd fa0c 	bl	800466c <XMC_SPI_CH_InitEx>
}
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop

0800725c <XMC_SPI_CH_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_Init(), XMC_SPI_CH_Stop()
 */
__STATIC_INLINE void XMC_SPI_CH_Start(XMC_USIC_CH_t *const channel)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* USIC channel in SPI mode */
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_SPI);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	2101      	movs	r1, #1
 8007268:	f7ff ffd6 	bl	8007218 <XMC_USIC_CH_SetMode>
}
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop

08007274 <XMC_SPI_CH_SetBitOrderMsbFirst>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetBitOrderLsbFirst()
 */
__STATIC_INLINE void XMC_SPI_CH_SetBitOrderMsbFirst(XMC_USIC_CH_t *const channel)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  channel->SCTR |= (uint32_t)USIC_CH_SCTR_SDIR_Msk;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007280:	f043 0201 	orr.w	r2, r3, #1
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	635a      	str	r2, [r3, #52]	; 0x34
}
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr
 8007292:	bf00      	nop

08007294 <XMC_SPI_CH_SetSlaveSelectDelay>:
 * This delay is dependent on the peripheral clock. The maximum possible value supported by this API
 * is 30 clock cycles.
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	695b      	ldr	r3, [r3, #20]
 80072a2:	f423 42fe 	bic.w	r2, r3, #32512	; 0x7f00
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	029b      	lsls	r3, r3, #10
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
                                   USIC_CH_BRG_PCTQ_Msk)) |
 80072ac:	4313      	orrs	r3, r2
 80072ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 *
 */
__STATIC_INLINE void XMC_SPI_CH_SetSlaveSelectDelay(XMC_USIC_CH_t *const channel, uint32_t sclk_period)
{

  channel->BRG = (channel->BRG & ~(USIC_CH_BRG_DCTQ_Msk |
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	615a      	str	r2, [r3, #20]
                                   USIC_CH_BRG_PCTQ_Msk)) |
                 (((sclk_period - 1U) << USIC_CH_BRG_DCTQ_Pos) | (0x01U << USIC_CH_BRG_PCTQ_Pos));
}
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <XMC_SPI_CH_DisableFEM>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_EnableFEM()
 */
__STATIC_INLINE void XMC_SPI_CH_DisableFEM(XMC_USIC_CH_t *const channel)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  channel->PCR_SSCMode &= (uint32_t)~USIC_CH_PCR_SSCMode_FEM_Msk;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072cc:	f023 0208 	bic.w	r2, r3, #8
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop

080072e0 <XMC_SPI_CH_ConfigureShiftClockOutput>:
 * period. These settings are applicable only in master mode.
 */
__STATIC_INLINE void XMC_SPI_CH_ConfigureShiftClockOutput(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t passive_level,
    const XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_t clock_output)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b084      	sub	sp, #16
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	60f8      	str	r0, [r7, #12]
 80072e8:	60b9      	str	r1, [r7, #8]
 80072ea:	607a      	str	r2, [r7, #4]
  XMC_USIC_CH_ConfigureShiftClockOutput(channel, (XMC_USIC_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_t)passive_level,
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	68b9      	ldr	r1, [r7, #8]
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	f7ff ff7b 	bl	80071ec <XMC_USIC_CH_ConfigureShiftClockOutput>
                                        (XMC_USIC_CH_BRG_SHIFT_CLOCK_OUTPUT_t)clock_output);
}
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <XMC_SPI_CH_SetWordLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_SPI_CH_SetFrameLength()
 */
__STATIC_INLINE void XMC_SPI_CH_SetWordLength(XMC_USIC_CH_t *const channel, const uint8_t word_length)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b082      	sub	sp, #8
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetWordLength(channel, word_length);
 8007308:	78fb      	ldrb	r3, [r7, #3]
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	4619      	mov	r1, r3
 800730e:	f7ff ff21 	bl	8007154 <XMC_USIC_CH_SetWordLength>
}
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <XMC_SPI_CH_SetFrameLength>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_SetWordLength(), XMC_USIC_CH_EnableFrameLengthControl(), XMC_SPI_CH_DisableSlaveSelect()
 */
__STATIC_INLINE void XMC_SPI_CH_SetFrameLength(XMC_USIC_CH_t *const channel, const uint8_t frame_length)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	460b      	mov	r3, r1
 8007322:	70fb      	strb	r3, [r7, #3]
  XMC_USIC_CH_SetFrameLength(channel, frame_length);
 8007324:	78fb      	ldrb	r3, [r7, #3]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	4619      	mov	r1, r3
 800732a:	f7ff ff29 	bl	8007180 <XMC_USIC_CH_SetFrameLength>
}
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <XMC_SPI_CH_SetInputSource>:
 * the SPI communication.
 */
__STATIC_INLINE void XMC_SPI_CH_SetInputSource(XMC_USIC_CH_t *const channel,
    const XMC_SPI_CH_INPUT_t input,
    const uint8_t source)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	4613      	mov	r3, r2
 8007342:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)(channel->DXCR[input] & (~USIC_CH_DX0CR_DSEN_Msk)) | USIC_CH_DX0CR_INSW_Msk;
 8007344:	78f8      	ldrb	r0, [r7, #3]
 8007346:	78fb      	ldrb	r3, [r7, #3]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	3306      	adds	r3, #6
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f023 0350 	bic.w	r3, r3, #80	; 0x50
 8007356:	f043 0210 	orr.w	r2, r3, #16
 800735a:	6879      	ldr	r1, [r7, #4]
 800735c:	1d83      	adds	r3, r0, #6
 800735e:	009b      	lsls	r3, r3, #2
 8007360:	440b      	add	r3, r1
 8007362:	605a      	str	r2, [r3, #4]
  XMC_USIC_CH_SetInputSource(channel, (XMC_USIC_CH_INPUT_t)input, source);
 8007364:	78fa      	ldrb	r2, [r7, #3]
 8007366:	78bb      	ldrb	r3, [r7, #2]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	4611      	mov	r1, r2
 800736c:	461a      	mov	r2, r3
 800736e:	f7ff fed3 	bl	8007118 <XMC_USIC_CH_SetInputSource>
}
 8007372:	3708      	adds	r7, #8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <SPI_MASTER_0_lInit>:
 * @brief Configure the port registers and data input registers of SPI channel
 *
 * @param[in] handle Pointer to an object of SPI_MASTER configuration
 */
static SPI_MASTER_STATUS_t SPI_MASTER_0_lInit(void)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
  SPI_MASTER_STATUS_t status;
  status = SPI_MASTER_STATUS_SUCCESS; 
 800737e:	2300      	movs	r3, #0
 8007380:	71fb      	strb	r3, [r7, #7]
  status =  (SPI_MASTER_STATUS_t)GLOBAL_DMA_Init(&GLOBAL_DMA_0);
 8007382:	4840      	ldr	r0, [pc, #256]	; (8007484 <SPI_MASTER_0_lInit+0x10c>)
 8007384:	f001 f804 	bl	8008390 <GLOBAL_DMA_Init>
 8007388:	4603      	mov	r3, r0
 800738a:	71fb      	strb	r3, [r7, #7]
  if (status == SPI_MASTER_STATUS_SUCCESS)
 800738c:	79fb      	ldrb	r3, [r7, #7]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d172      	bne.n	8007478 <SPI_MASTER_0_lInit+0x100>
  {            
                            
  (void)XMC_DMA_CH_Init(XMC_DMA0, 1U, &SPI_MASTER_0_dma_ch_tx_config);
 8007392:	483d      	ldr	r0, [pc, #244]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 8007394:	2101      	movs	r1, #1
 8007396:	4a3d      	ldr	r2, [pc, #244]	; (800748c <SPI_MASTER_0_lInit+0x114>)
 8007398:	f7fc fb1a 	bl	80039d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 1U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 800739c:	483a      	ldr	r0, [pc, #232]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 800739e:	2101      	movs	r1, #1
 80073a0:	2201      	movs	r2, #1
 80073a2:	f7fc fd1b 	bl	8003ddc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 1U, SPI_MASTER_0_DMA_tx_handler);
 80073a6:	4838      	ldr	r0, [pc, #224]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 80073a8:	2101      	movs	r1, #1
 80073aa:	4a39      	ldr	r2, [pc, #228]	; (8007490 <SPI_MASTER_0_lInit+0x118>)
 80073ac:	f7fc fd64 	bl	8003e78 <XMC_DMA_CH_SetEventHandler>
                             
  (void)XMC_DMA_CH_Init(XMC_DMA0, 0U, &SPI_MASTER_0_dma_ch_rx_config);
 80073b0:	4835      	ldr	r0, [pc, #212]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 80073b2:	2100      	movs	r1, #0
 80073b4:	4a37      	ldr	r2, [pc, #220]	; (8007494 <SPI_MASTER_0_lInit+0x11c>)
 80073b6:	f7fc fb0b 	bl	80039d0 <XMC_DMA_CH_Init>
  /*"Interrupt Settings" configuration for "transmit" and/or "receive"*/
  XMC_DMA_CH_EnableEvent(XMC_DMA0, 0U, (uint32_t)XMC_DMA_CH_EVENT_TRANSFER_COMPLETE);
 80073ba:	4833      	ldr	r0, [pc, #204]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 80073bc:	2100      	movs	r1, #0
 80073be:	2201      	movs	r2, #1
 80073c0:	f7fc fd0c 	bl	8003ddc <XMC_DMA_CH_EnableEvent>
  XMC_DMA_CH_SetEventHandler(XMC_DMA0, 0U, SPI_MASTER_0_DMA_rx_handler);
 80073c4:	4830      	ldr	r0, [pc, #192]	; (8007488 <SPI_MASTER_0_lInit+0x110>)
 80073c6:	2100      	movs	r1, #0
 80073c8:	4a33      	ldr	r2, [pc, #204]	; (8007498 <SPI_MASTER_0_lInit+0x120>)
 80073ca:	f7fc fd55 	bl	8003e78 <XMC_DMA_CH_SetEventHandler>
                             
  /* LLD initialization */
  XMC_SPI_CH_Init(XMC_SPI0_CH0, &SPI_MASTER_0_Channel_Config);
 80073ce:	4833      	ldr	r0, [pc, #204]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073d0:	4933      	ldr	r1, [pc, #204]	; (80074a0 <SPI_MASTER_0_lInit+0x128>)
 80073d2:	f7ff ff35 	bl	8007240 <XMC_SPI_CH_Init>
                             
  XMC_SPI_CH_DisableFEM(XMC_SPI0_CH0);
 80073d6:	4831      	ldr	r0, [pc, #196]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073d8:	f7ff ff72 	bl	80072c0 <XMC_SPI_CH_DisableFEM>
                              
  XMC_SPI_CH_SetBitOrderMsbFirst(XMC_SPI0_CH0);
 80073dc:	482f      	ldr	r0, [pc, #188]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073de:	f7ff ff49 	bl	8007274 <XMC_SPI_CH_SetBitOrderMsbFirst>
          
  XMC_SPI_CH_SetWordLength(XMC_SPI0_CH0, (uint8_t)8);
 80073e2:	482e      	ldr	r0, [pc, #184]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073e4:	2108      	movs	r1, #8
 80073e6:	f7ff ff89 	bl	80072fc <XMC_SPI_CH_SetWordLength>

  XMC_SPI_CH_SetFrameLength(XMC_SPI0_CH0, (uint8_t)64);
 80073ea:	482c      	ldr	r0, [pc, #176]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073ec:	2140      	movs	r1, #64	; 0x40
 80073ee:	f7ff ff93 	bl	8007318 <XMC_SPI_CH_SetFrameLength>

  /* Configure the clock polarity and clock delay */
  XMC_SPI_CH_ConfigureShiftClockOutput(XMC_SPI0_CH0,
 80073f2:	482a      	ldr	r0, [pc, #168]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 80073f4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80073f8:	2200      	movs	r2, #0
 80073fa:	f7ff ff71 	bl	80072e0 <XMC_SPI_CH_ConfigureShiftClockOutput>
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_PASSIVE_LEVEL_1_DELAY_DISABLED,
                                       XMC_SPI_CH_BRG_SHIFT_CLOCK_OUTPUT_SCLK);
  /* Configure Leading/Trailing delay */
  XMC_SPI_CH_SetSlaveSelectDelay(XMC_SPI0_CH0, 2U);
 80073fe:	4827      	ldr	r0, [pc, #156]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007400:	2102      	movs	r1, #2
 8007402:	f7ff ff47 	bl	8007294 <XMC_SPI_CH_SetSlaveSelectDelay>

               
  /* Configure the input pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)4, &SPI_MASTER_0_MISO_Config.port_config);
 8007406:	4827      	ldr	r0, [pc, #156]	; (80074a4 <SPI_MASTER_0_lInit+0x12c>)
 8007408:	2104      	movs	r1, #4
 800740a:	4a27      	ldr	r2, [pc, #156]	; (80074a8 <SPI_MASTER_0_lInit+0x130>)
 800740c:	f7fa fd82 	bl	8001f14 <XMC_GPIO_Init>

  /* Configure the data input line selected */
  XMC_SPI_CH_SetInputSource(XMC_SPI0_CH0, XMC_SPI_CH_INPUT_DIN0, (uint8_t)SPI_MASTER_INPUT_B);
 8007410:	4822      	ldr	r0, [pc, #136]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007412:	2100      	movs	r1, #0
 8007414:	2201      	movs	r2, #1
 8007416:	f7ff ff8d 	bl	8007334 <XMC_SPI_CH_SetInputSource>
  /* Start the SPI_Channel */
  XMC_SPI_CH_Start(XMC_SPI0_CH0);
 800741a:	4820      	ldr	r0, [pc, #128]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 800741c:	f7ff ff1e 	bl	800725c <XMC_SPI_CH_Start>

  /* Configure the output pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)5, &SPI_MASTER_0_MOSI_Config.port_config);
 8007420:	4820      	ldr	r0, [pc, #128]	; (80074a4 <SPI_MASTER_0_lInit+0x12c>)
 8007422:	2105      	movs	r1, #5
 8007424:	4a21      	ldr	r2, [pc, #132]	; (80074ac <SPI_MASTER_0_lInit+0x134>)
 8007426:	f7fa fd75 	bl	8001f14 <XMC_GPIO_Init>
    
  /* Initialize SPI SCLK out pin */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)6, &SPI_MASTER_0_SCLKOUT_Config.port_config);
 800742a:	481e      	ldr	r0, [pc, #120]	; (80074a4 <SPI_MASTER_0_lInit+0x12c>)
 800742c:	2106      	movs	r1, #6
 800742e:	4a20      	ldr	r2, [pc, #128]	; (80074b0 <SPI_MASTER_0_lInit+0x138>)
 8007430:	f7fa fd70 	bl	8001f14 <XMC_GPIO_Init>

  /* Configure the pin properties */
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT1_BASE, (uint8_t)11, &SPI_MASTER_0_SS_0_Config.port_config);
 8007434:	481b      	ldr	r0, [pc, #108]	; (80074a4 <SPI_MASTER_0_lInit+0x12c>)
 8007436:	210b      	movs	r1, #11
 8007438:	4a1e      	ldr	r2, [pc, #120]	; (80074b4 <SPI_MASTER_0_lInit+0x13c>)
 800743a:	f7fa fd6b 	bl	8001f14 <XMC_GPIO_Init>
  XMC_SPI_CH_EnableSlaveSelect(XMC_SPI0_CH0, XMC_SPI_CH_SLAVE_SELECT_0);
 800743e:	4817      	ldr	r0, [pc, #92]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007440:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8007444:	f7fd f958 	bl	80046f8 <XMC_SPI_CH_EnableSlaveSelect>

  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007448:	4814      	ldr	r0, [pc, #80]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 800744a:	2104      	movs	r1, #4
 800744c:	2200      	movs	r2, #0
 800744e:	f7fd fc11 	bl	8004c74 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_TRANSMIT_BUFFER,
                                      (uint32_t)SPI_MASTER_SR_ID_0);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007452:	4812      	ldr	r0, [pc, #72]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007454:	2108      	movs	r1, #8
 8007456:	2201      	movs	r2, #1
 8007458:	f7fd fc0c 	bl	8004c74 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 800745c:	480f      	ldr	r0, [pc, #60]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 800745e:	210c      	movs	r1, #12
 8007460:	2201      	movs	r2, #1
 8007462:	f7fd fc07 	bl	8004c74 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_ALTERNATE_RECEIVE,
                                      (uint32_t)SPI_MASTER_SR_ID_1);
  XMC_USIC_CH_SetInterruptNodePointer(XMC_SPI0_CH0,
 8007466:	480d      	ldr	r0, [pc, #52]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007468:	2110      	movs	r1, #16
 800746a:	2202      	movs	r2, #2
 800746c:	f7fd fc02 	bl	8004c74 <XMC_USIC_CH_SetInterruptNodePointer>
                                      XMC_USIC_CH_INTERRUPT_NODE_POINTER_PROTOCOL,
                                      (uint32_t)SPI_MASTER_SR_ID_2);
            
  XMC_USIC_CH_TriggerServiceRequest(XMC_SPI0_CH0, (uint32_t)SPI_MASTER_SR_ID_0);
 8007470:	480a      	ldr	r0, [pc, #40]	; (800749c <SPI_MASTER_0_lInit+0x124>)
 8007472:	2100      	movs	r1, #0
 8007474:	f7ff feaa 	bl	80071cc <XMC_USIC_CH_TriggerServiceRequest>
}            

  return status;
 8007478:	79fb      	ldrb	r3, [r7, #7]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3708      	adds	r7, #8
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
 8007482:	bf00      	nop
 8007484:	1ffe8a78 	.word	0x1ffe8a78
 8007488:	50014000 	.word	0x50014000
 800748c:	1ffe8940 	.word	0x1ffe8940
 8007490:	080074b9 	.word	0x080074b9
 8007494:	1ffe8964 	.word	0x1ffe8964
 8007498:	080074f1 	.word	0x080074f1
 800749c:	40030000 	.word	0x40030000
 80074a0:	1ffe8934 	.word	0x1ffe8934
 80074a4:	48028100 	.word	0x48028100
 80074a8:	1fff4410 	.word	0x1fff4410
 80074ac:	1ffe8920 	.word	0x1ffe8920
 80074b0:	080130b0 	.word	0x080130b0
 80074b4:	080130cc 	.word	0x080130cc

080074b8 <SPI_MASTER_0_DMA_tx_handler>:
/*Transmit ISR*/
void SPI_MASTER_0_DMA_tx_handler(XMC_DMA_CH_EVENT_t event)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b082      	sub	sp, #8
 80074bc:	af00      	add	r7, sp, #0
 80074be:	4603      	mov	r3, r0
 80074c0:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80074c2:	79fb      	ldrb	r3, [r7, #7]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d10b      	bne.n	80074e0 <SPI_MASTER_0_DMA_tx_handler+0x28>
  {
    while(XMC_USIC_CH_GetTransmitBufferStatus(XMC_SPI0_CH0) == XMC_USIC_CH_TBUF_STATUS_BUSY);
 80074c8:	bf00      	nop
 80074ca:	4807      	ldr	r0, [pc, #28]	; (80074e8 <SPI_MASTER_0_DMA_tx_handler+0x30>)
 80074cc:	f7ff fe6e 	bl	80071ac <XMC_USIC_CH_GetTransmitBufferStatus>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b80      	cmp	r3, #128	; 0x80
 80074d4:	d0f9      	beq.n	80074ca <SPI_MASTER_0_DMA_tx_handler+0x12>
    SPI_MASTER_0.runtime->tx_busy = false;
 80074d6:	4b05      	ldr	r3, [pc, #20]	; (80074ec <SPI_MASTER_0_DMA_tx_handler+0x34>)
 80074d8:	689b      	ldr	r3, [r3, #8]
 80074da:	2200      	movs	r2, #0
 80074dc:	f883 2020 	strb.w	r2, [r3, #32]
  }
}
 80074e0:	3708      	adds	r7, #8
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	40030000 	.word	0x40030000
 80074ec:	1ffe89ac 	.word	0x1ffe89ac

080074f0 <SPI_MASTER_0_DMA_rx_handler>:

/*Receive ISR*/
void SPI_MASTER_0_DMA_rx_handler(XMC_DMA_CH_EVENT_t event)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	4603      	mov	r3, r0
 80074f8:	71fb      	strb	r3, [r7, #7]
  if (event == XMC_DMA_CH_EVENT_TRANSFER_COMPLETE)
 80074fa:	79fb      	ldrb	r3, [r7, #7]
 80074fc:	2b01      	cmp	r3, #1
 80074fe:	d112      	bne.n	8007526 <SPI_MASTER_0_DMA_rx_handler+0x36>
  {
    XMC_SPI_CH_DisableEvent(XMC_SPI0_CH0, (uint32_t)((uint32_t)XMC_SPI_CH_EVENT_STANDARD_RECEIVE | (uint32_t)XMC_SPI_CH_EVENT_ALTERNATIVE_RECEIVE));
 8007500:	480a      	ldr	r0, [pc, #40]	; (800752c <SPI_MASTER_0_DMA_rx_handler+0x3c>)
 8007502:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8007506:	f7fd f941 	bl	800478c <XMC_SPI_CH_DisableEvent>
    SPI_MASTER_0.runtime->tx_data_dummy = false;
 800750a:	4b09      	ldr	r3, [pc, #36]	; (8007530 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    SPI_MASTER_0.runtime->rx_data_dummy = true;
 8007514:	4b06      	ldr	r3, [pc, #24]	; (8007530 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
    SPI_MASTER_0.runtime->rx_busy = false;
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <SPI_MASTER_0_DMA_rx_handler+0x40>)
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	2200      	movs	r2, #0
 8007524:	77da      	strb	r2, [r3, #31]
  }
}
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	40030000 	.word	0x40030000
 8007530:	1ffe89ac 	.word	0x1ffe89ac

08007534 <SDMMC_BLOCK_Init>:
  return version;
}

/* SDMMC_BLOCK initialization function */
SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 800753c:	2300      	movs	r3, #0
 800753e:	73fb      	strb	r3, [r7, #15]
  SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 8007540:	2300      	movs	r3, #0
 8007542:	73bb      	strb	r3, [r7, #14]

  XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL));

  if (obj->init_flag == 1U)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	7b5b      	ldrb	r3, [r3, #13]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d002      	beq.n	8007552 <SDMMC_BLOCK_Init+0x1e>
  {
    status = SDMMC_BLOCK_STATUS_SUCCESS;
 800754c:	2300      	movs	r3, #0
 800754e:	73fb      	strb	r3, [r7, #15]
 8007550:	e01b      	b.n	800758a <SDMMC_BLOCK_Init+0x56>
  }
  else
  {
    /* Setup pins */
    if (obj->init_pins != NULL)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <SDMMC_BLOCK_Init+0x2c>
    {
      obj->init_pins();
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	4798      	blx	r3
    }

#ifdef SDMMC_BLOCK_SPI
    if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	7b1b      	ldrb	r3, [r3, #12]
 8007564:	2b01      	cmp	r3, #1
 8007566:	d104      	bne.n	8007572 <SDMMC_BLOCK_Init+0x3e>
    {
      mode_status = SDMMC_BLOCK_SPI_Init(obj);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f000 f813 	bl	8007594 <SDMMC_BLOCK_SPI_Init>
 800756e:	4603      	mov	r3, r0
 8007570:	73bb      	strb	r3, [r7, #14]
    {
      mode_status = SDMMC_BLOCK_SD_Init(obj);
    }
#endif

    if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 8007572:	7bbb      	ldrb	r3, [r7, #14]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <SDMMC_BLOCK_Init+0x50>
    {
      status = SDMMC_BLOCK_STATUS_FAILURE;
 8007578:	2301      	movs	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
      obj->init_flag = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	735a      	strb	r2, [r3, #13]
 8007582:	e002      	b.n	800758a <SDMMC_BLOCK_Init+0x56>
    }
    else
    {
      obj->init_flag = 1U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	735a      	strb	r2, [r3, #13]
    }
  }

  return status;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <SDMMC_BLOCK_SPI_Init>:

/**********************************************************************************************************************
  * API IMPLEMENTATION
**********************************************************************************************************************/
SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  SPI_MASTER_STATUS_t spi_status;
  SDMMC_BLOCK_MODE_STATUS_t status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 800759c:	2300      	movs	r3, #0
 800759e:	73fb      	strb	r3, [r7, #15]

  spi_status = SPI_MASTER_Init(obj->sdmmc_spi->spi_master_handle);
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7ff fbe0 	bl	8006d6c <SPI_MASTER_Init>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]

  if (spi_status != SPI_MASTER_STATUS_SUCCESS)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <SDMMC_BLOCK_SPI_Init+0x26>
  {
    status = SDMMC_BLOCK_MODE_STATUS_FAILURE;
 80075b6:	2301      	movs	r3, #1
 80075b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80075ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3710      	adds	r7, #16
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <RTC_Start>:
 *   {}
 * }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void RTC_Start(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
	XMC_RTC_Start();
 80075c8:	f7fc ffd8 	bl	800457c <XMC_RTC_Start>
}
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop

080075d0 <RTC_Init>:
/*
  Initialization function for the APP. Configures the registers
  based on options selected in UI.
*/
RTC_STATUS_t RTC_Init(RTC_t *const handler)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t rtc_initstatus;
  bool interrupt_configured;

  XMC_ASSERT("RTC_Init: NULL Handler", handler != NULL);

  status = XMC_RTC_STATUS_OK;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]
  rtc_initstatus = RTC_STATUS_FAILURE;
 80075dc:	2301      	movs	r3, #1
 80075de:	73bb      	strb	r3, [r7, #14]
  rtc_initstatus = (RTC_STATUS_t)GLOBAL_SCU_XMC1_Init(GLOBAL_SCU_HANDLE);
#endif
  if (rtc_initstatus == RTC_STATUS_SUCCESS)
  {
#endif
      if (handler->initialized == false)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	7a1b      	ldrb	r3, [r3, #8]
 80075e4:	f083 0301 	eor.w	r3, r3, #1
 80075e8:	b2db      	uxtb	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d029      	beq.n	8007642 <RTC_Init+0x72>
      {
        /* Initialize the clock source and pre-scalar */
        status = XMC_RTC_Init(handler->time_alarm_config);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fa fd52 	bl	800209c <XMC_RTC_Init>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]

        if (status == XMC_RTC_STATUS_OK)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11c      	bne.n	800763c <RTC_Init+0x6c>
        {
          /* Configure periodic, alarm and hibernate periodic interrupts */
          interrupt_configured = RTC_lConfigureInterrupts(handler);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f824 	bl	8007650 <RTC_lConfigureInterrupts>
 8007608:	4603      	mov	r3, r0
 800760a:	737b      	strb	r3, [r7, #13]

          if (interrupt_configured == true)
 800760c:	7b7b      	ldrb	r3, [r7, #13]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d004      	beq.n	800761c <RTC_Init+0x4c>
          {
            status = RTC_lRegister_Callbacks(handler);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f858 	bl	80076c8 <RTC_lRegister_Callbacks>
 8007618:	4603      	mov	r3, r0
 800761a:	73fb      	strb	r3, [r7, #15]
          }

          if (status == XMC_RTC_STATUS_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d111      	bne.n	8007646 <RTC_Init+0x76>
          {
          	/* Check RTC start during init is set or not in UI */
            if (handler->config->start == RTC_START_ENABLE)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	2b01      	cmp	r3, #1
 800762a:	d101      	bne.n	8007630 <RTC_Init+0x60>
            {
              RTC_Start();
 800762c:	f7ff ffca 	bl	80075c4 <RTC_Start>
            }
            handler->initialized = true;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2201      	movs	r2, #1
 8007634:	721a      	strb	r2, [r3, #8]
            rtc_initstatus = RTC_STATUS_SUCCESS;
 8007636:	2300      	movs	r3, #0
 8007638:	73bb      	strb	r3, [r7, #14]
 800763a:	e004      	b.n	8007646 <RTC_Init+0x76>
          }
        }
        else
        {
          rtc_initstatus = RTC_STATUS_FAILURE;
 800763c:	2301      	movs	r3, #1
 800763e:	73bb      	strb	r3, [r7, #14]
 8007640:	e001      	b.n	8007646 <RTC_Init+0x76>
        }
      }
      else
      {
        rtc_initstatus = RTC_STATUS_SUCCESS;
 8007642:	2300      	movs	r3, #0
 8007644:	73bb      	strb	r3, [r7, #14]
      }
#if (RTC_INTERRUPT_ENABLED == 1)
   } /* end of if(rtc_initstatus == GLOBAL_SCU_XMC4_STATUS_OK) */
#endif

  return (rtc_initstatus);
 8007646:	7bbb      	ldrb	r3, [r7, #14]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3710      	adds	r7, #16
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}

08007650 <RTC_lConfigureInterrupts>:
/*
 *  This function configures periodic and alarm interrupts
 */
bool RTC_lConfigureInterrupts(const RTC_t *const handler)
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b084      	sub	sp, #16
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  bool interrupt_configured = false;
 8007658:	2300      	movs	r3, #0
 800765a:	73fb      	strb	r3, [r7, #15]

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	461a      	mov	r2, r3
           | ((uint32_t)handler->config->periodic_min_intr << RTC_MSKSR_MPMI_Pos)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	789b      	ldrb	r3, [r3, #2]
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_hour_intr << RTC_MSKSR_MPHO_Pos)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	685b      	ldr	r3, [r3, #4]
 8007672:	78db      	ldrb	r3, [r3, #3]
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_day_intr << RTC_MSKSR_MPDA_Pos)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	791b      	ldrb	r3, [r3, #4]
 800767e:	00db      	lsls	r3, r3, #3
 8007680:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	685b      	ldr	r3, [r3, #4]
 8007686:	795b      	ldrb	r3, [r3, #5]
 8007688:	015b      	lsls	r3, r3, #5
 800768a:	431a      	orrs	r2, r3
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	799b      	ldrb	r3, [r3, #6]
 8007692:	019b      	lsls	r3, r3, #6
{
  uint32_t regval;
  bool interrupt_configured = false;

  /* Enable periodic seconds, minutes, hours days, months and years interrupts */
  regval = (((uint32_t)handler->config->periodic_sec_intr << RTC_MSKSR_MPSE_Pos)
 8007694:	4313      	orrs	r3, r2
 8007696:	60bb      	str	r3, [r7, #8]
           | ((uint32_t)handler->config->periodic_month_intr << RTC_MSKSR_MPMO_Pos)
           | ((uint32_t)handler->config->periodic_year_intr << RTC_MSKSR_MPYE_Pos));

  /* Enable RTC periodic interrupt in SCU when any of the periodic interrupts
   * are enabled */
  if (regval != 0U)
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d004      	beq.n	80076a8 <RTC_lConfigureInterrupts+0x58>
  {
    XMC_RTC_EnableEvent(regval);
 800769e:	68b8      	ldr	r0, [r7, #8]
 80076a0:	f7fa fd4e 	bl	8002140 <XMC_RTC_EnableEvent>
		XMC_SCU_INTERRUPT_EnableNmiRequest((uint32_t)XMC_SCU_NMIREQ_RTC_PI);
#endif
#if ((UC_FAMILY == XMC4) && (RTC_TIMER_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_PERIODIC);
#endif
    interrupt_configured = true;
 80076a4:	2301      	movs	r3, #1
 80076a6:	73fb      	strb	r3, [r7, #15]
  }


	if (handler->config->alarm_intr == RTC_INT_ALARM_ENABLE)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	685b      	ldr	r3, [r3, #4]
 80076ac:	79db      	ldrb	r3, [r3, #7]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d105      	bne.n	80076be <RTC_lConfigureInterrupts+0x6e>
	{
		XMC_RTC_EnableEvent((uint32_t)XMC_RTC_EVENT_ALARM);
 80076b2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80076b6:	f7fa fd43 	bl	8002140 <XMC_RTC_EnableEvent>
#endif
#if ((UC_FAMILY == XMC4) && (RTC_ALARM_EVENT_TRIG_TO_SCU == 1))
		GLOBAL_SCU_XMC4_EnableEvent((GLOBAL_SCU_XMC4_EVENT_t)GLOBAL_SCU_XMC4_EVENT_RTC_ALARM);
#endif

		interrupt_configured = true;
 80076ba:	2301      	movs	r3, #1
 80076bc:	73fb      	strb	r3, [r7, #15]
	}


  return (interrupt_configured);
 80076be:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}

080076c8 <RTC_lRegister_Callbacks>:

/*
 *  Interface to register the RTC call backs
 */
XMC_RTC_STATUS_t RTC_lRegister_Callbacks(const RTC_t *const handler)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b085      	sub	sp, #20
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	6078      	str	r0, [r7, #4]
  XMC_RTC_STATUS_t pi_status;
  XMC_RTC_STATUS_t ai_status;

  pi_status = XMC_RTC_STATUS_OK;
 80076d0:	2300      	movs	r3, #0
 80076d2:	73fb      	strb	r3, [r7, #15]
  ai_status = XMC_RTC_STATUS_OK;
 80076d4:	2300      	movs	r3, #0
 80076d6:	73bb      	strb	r3, [r7, #14]
                                                                     handler->config->ai_listener);
    }
  #endif
#endif

  return (XMC_RTC_STATUS_t)((uint32_t)pi_status & (uint32_t)ai_status);
 80076d8:	7bfa      	ldrb	r2, [r7, #15]
 80076da:	7bbb      	ldrb	r3, [r7, #14]
 80076dc:	4013      	ands	r3, r2
 80076de:	b2db      	uxtb	r3, r3
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3714      	adds	r7, #20
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <RTC_SetTime>:

/*
 *  This function is used to set RTC time.
 */
RTC_STATUS_t RTC_SetTime(XMC_RTC_TIME_t *current_time)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  RTC_STATUS_t status = RTC_STATUS_SUCCESS;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75fb      	strb	r3, [r7, #23]
  XMC_RTC_TIME_t time_val;

  XMC_ASSERT("RTC_SetTime: NULL pointer", current_time != NULL);

  /* copy to local structure to keep data safe */
  time_val.year = current_time->year;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	88db      	ldrh	r3, [r3, #6]
 80076fc:	827b      	strh	r3, [r7, #18]
  time_val.month = current_time->month;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	795b      	ldrb	r3, [r3, #5]
 8007702:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007706:	b2da      	uxtb	r2, r3
 8007708:	7c7b      	ldrb	r3, [r7, #17]
 800770a:	f362 0303 	bfi	r3, r2, #0, #4
 800770e:	747b      	strb	r3, [r7, #17]
  time_val.days = current_time->days;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	78db      	ldrb	r3, [r3, #3]
 8007714:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007718:	b2da      	uxtb	r2, r3
 800771a:	7bfb      	ldrb	r3, [r7, #15]
 800771c:	f362 0304 	bfi	r3, r2, #0, #5
 8007720:	73fb      	strb	r3, [r7, #15]
  time_val.hours = current_time->hours;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	789b      	ldrb	r3, [r3, #2]
 8007726:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800772a:	b2da      	uxtb	r2, r3
 800772c:	7bbb      	ldrb	r3, [r7, #14]
 800772e:	f362 0304 	bfi	r3, r2, #0, #5
 8007732:	73bb      	strb	r3, [r7, #14]
  time_val.minutes = current_time->minutes;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	785b      	ldrb	r3, [r3, #1]
 8007738:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800773c:	b2da      	uxtb	r2, r3
 800773e:	7b7b      	ldrb	r3, [r7, #13]
 8007740:	f362 0305 	bfi	r3, r2, #0, #6
 8007744:	737b      	strb	r3, [r7, #13]
  time_val.seconds = current_time->seconds;
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	781b      	ldrb	r3, [r3, #0]
 800774a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800774e:	b2da      	uxtb	r2, r3
 8007750:	7b3b      	ldrb	r3, [r7, #12]
 8007752:	f362 0305 	bfi	r3, r2, #0, #6
 8007756:	733b      	strb	r3, [r7, #12]
  time_val.daysofweek = current_time->daysofweek;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	791b      	ldrb	r3, [r3, #4]
 800775c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8007760:	b2da      	uxtb	r2, r3
 8007762:	7c3b      	ldrb	r3, [r7, #16]
 8007764:	f362 0302 	bfi	r3, r2, #0, #3
 8007768:	743b      	strb	r3, [r7, #16]

  if ((time_val.days != 0U) && (time_val.month != 0U))
 800776a:	7bfb      	ldrb	r3, [r7, #15]
 800776c:	f003 031f 	and.w	r3, r3, #31
 8007770:	b2db      	uxtb	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d025      	beq.n	80077c2 <RTC_SetTime+0xd6>
 8007776:	7c7b      	ldrb	r3, [r7, #17]
 8007778:	f003 030f 	and.w	r3, r3, #15
 800777c:	b2db      	uxtb	r3, r3
 800777e:	2b00      	cmp	r3, #0
 8007780:	d01f      	beq.n	80077c2 <RTC_SetTime+0xd6>
  {
    time_val.days = time_val.days - 1U;
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007788:	b2db      	uxtb	r3, r3
 800778a:	3b01      	subs	r3, #1
 800778c:	b2db      	uxtb	r3, r3
 800778e:	f003 031f 	and.w	r3, r3, #31
 8007792:	b2da      	uxtb	r2, r3
 8007794:	7bfb      	ldrb	r3, [r7, #15]
 8007796:	f362 0304 	bfi	r3, r2, #0, #5
 800779a:	73fb      	strb	r3, [r7, #15]
    time_val.month = time_val.month - 1U;
 800779c:	7c7b      	ldrb	r3, [r7, #17]
 800779e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	3b01      	subs	r3, #1
 80077a6:	b2db      	uxtb	r3, r3
 80077a8:	f003 030f 	and.w	r3, r3, #15
 80077ac:	b2da      	uxtb	r2, r3
 80077ae:	7c7b      	ldrb	r3, [r7, #17]
 80077b0:	f362 0303 	bfi	r3, r2, #0, #4
 80077b4:	747b      	strb	r3, [r7, #17]

    XMC_RTC_SetTime(&time_val);
 80077b6:	f107 030c 	add.w	r3, r7, #12
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fc ff20 	bl	8004600 <XMC_RTC_SetTime>
 80077c0:	e001      	b.n	80077c6 <RTC_SetTime+0xda>
  }
  else
  {
    status = RTC_STATUS_FAILURE;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3718      	adds	r7, #24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <RTC_GetTime>:
}
/*
 *  This function is used to get RTC time.
 */
void RTC_GetTime(XMC_RTC_TIME_t *current_time)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("RTC_GetTime: NULL pointer", current_time != NULL);

  XMC_RTC_GetTime(current_time);
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f7fc ff33 	bl	8004644 <XMC_RTC_GetTime>

  current_time->days = current_time->days + 1U;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	78db      	ldrb	r3, [r3, #3]
 80077e2:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	3301      	adds	r3, #1
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 031f 	and.w	r3, r3, #31
 80077f0:	b2d9      	uxtb	r1, r3
 80077f2:	687a      	ldr	r2, [r7, #4]
 80077f4:	78d3      	ldrb	r3, [r2, #3]
 80077f6:	f361 0304 	bfi	r3, r1, #0, #5
 80077fa:	70d3      	strb	r3, [r2, #3]
  current_time->month = current_time->month + 1U;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	795b      	ldrb	r3, [r3, #5]
 8007800:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8007804:	b2db      	uxtb	r3, r3
 8007806:	3301      	adds	r3, #1
 8007808:	b2db      	uxtb	r3, r3
 800780a:	f003 030f 	and.w	r3, r3, #15
 800780e:	b2d9      	uxtb	r1, r3
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	7953      	ldrb	r3, [r2, #5]
 8007814:	f361 0303 	bfi	r3, r1, #0, #4
 8007818:	7153      	strb	r3, [r2, #5]
}
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bd80      	pop	{r7, pc}

08007820 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007820:	b480      	push	{r7}
 8007822:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007824:	4b04      	ldr	r3, [pc, #16]	; (8007838 <__NVIC_GetPriorityGrouping+0x18>)
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800782c:	0a1b      	lsrs	r3, r3, #8
}
 800782e:	4618      	mov	r0, r3
 8007830:	46bd      	mov	sp, r7
 8007832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007836:	4770      	bx	lr
 8007838:	e000ed00 	.word	0xe000ed00

0800783c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	4603      	mov	r3, r0
 8007844:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800784a:	2b00      	cmp	r3, #0
 800784c:	db0b      	blt.n	8007866 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800784e:	4908      	ldr	r1, [pc, #32]	; (8007870 <__NVIC_EnableIRQ+0x34>)
 8007850:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007854:	095b      	lsrs	r3, r3, #5
 8007856:	79fa      	ldrb	r2, [r7, #7]
 8007858:	f002 021f 	and.w	r2, r2, #31
 800785c:	2001      	movs	r0, #1
 800785e:	fa00 f202 	lsl.w	r2, r0, r2
 8007862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007866:	370c      	adds	r7, #12
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000e100 	.word	0xe000e100

08007874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007884:	2b00      	cmp	r3, #0
 8007886:	db0a      	blt.n	800789e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007888:	490d      	ldr	r1, [pc, #52]	; (80078c0 <__NVIC_SetPriority+0x4c>)
 800788a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	b2d2      	uxtb	r2, r2
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	b2d2      	uxtb	r2, r2
 8007896:	440b      	add	r3, r1
 8007898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 800789c:	e00a      	b.n	80078b4 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800789e:	4909      	ldr	r1, [pc, #36]	; (80078c4 <__NVIC_SetPriority+0x50>)
 80078a0:	79fb      	ldrb	r3, [r7, #7]
 80078a2:	f003 030f 	and.w	r3, r3, #15
 80078a6:	3b04      	subs	r3, #4
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	b2d2      	uxtb	r2, r2
 80078ac:	0092      	lsls	r2, r2, #2
 80078ae:	b2d2      	uxtb	r2, r2
 80078b0:	440b      	add	r3, r1
 80078b2:	761a      	strb	r2, [r3, #24]
  }
}
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop
 80078c0:	e000e100 	.word	0xe000e100
 80078c4:	e000ed00 	.word	0xe000ed00

080078c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b089      	sub	sp, #36	; 0x24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f003 0307 	and.w	r3, r3, #7
 80078da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80078dc:	69fb      	ldr	r3, [r7, #28]
 80078de:	f1c3 0307 	rsb	r3, r3, #7
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	bf28      	it	cs
 80078e6:	2306      	movcs	r3, #6
 80078e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80078ea:	69fb      	ldr	r3, [r7, #28]
 80078ec:	3306      	adds	r3, #6
 80078ee:	2b06      	cmp	r3, #6
 80078f0:	d902      	bls.n	80078f8 <NVIC_EncodePriority+0x30>
 80078f2:	69fb      	ldr	r3, [r7, #28]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	e000      	b.n	80078fa <NVIC_EncodePriority+0x32>
 80078f8:	2300      	movs	r3, #0
 80078fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	2201      	movs	r2, #1
 8007900:	fa02 f303 	lsl.w	r3, r2, r3
 8007904:	1e5a      	subs	r2, r3, #1
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	401a      	ands	r2, r3
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	2101      	movs	r1, #1
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	1e59      	subs	r1, r3, #1
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 800791c:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 800791e:	4618      	mov	r0, r3
 8007920:	3724      	adds	r7, #36	; 0x24
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr
 800792a:	bf00      	nop

0800792c <INTERRUPT_Enable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Enable(const INTERRUPT_t *const handler)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_EnableIRQ(handler->node);
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	b25b      	sxtb	r3, r3
 800793a:	4618      	mov	r0, r3
 800793c:	f7ff ff7e 	bl	800783c <__NVIC_EnableIRQ>
}
 8007940:	3708      	adds	r7, #8
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop

08007948 <INTERRUPT_Init>:

/*
 * API to initialize the INTERRUPT APP
 */
INTERRUPT_STATUS_t INTERRUPT_Init(const INTERRUPT_t *const handler)
{
 8007948:	b590      	push	{r4, r7, lr}
 800794a:	b083      	sub	sp, #12
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	781c      	ldrb	r4, [r3, #0]
 8007954:	f7ff ff64 	bl	8007820 <__NVIC_GetPriorityGrouping>
 8007958:	4601      	mov	r1, r0
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	785b      	ldrb	r3, [r3, #1]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 800795e:	461a      	mov	r2, r3
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	789b      	ldrb	r3, [r3, #2]
{
  XMC_ASSERT("INTERRUPT_Init:HandlePtr NULL", (handler != NULL));
  
#if(UC_FAMILY == XMC4)

  NVIC_SetPriority(handler->node,
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	461a      	mov	r2, r3
 800796a:	f7ff ffad 	bl	80078c8 <NVIC_EncodePriority>
 800796e:	4602      	mov	r2, r0
 8007970:	b263      	sxtb	r3, r4
 8007972:	4618      	mov	r0, r3
 8007974:	4611      	mov	r1, r2
 8007976:	f7ff ff7d 	bl	8007874 <__NVIC_SetPriority>
                   NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
                                       handler->priority,
                                       handler->subpriority));
  if (handler->enable_at_init == true)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	78db      	ldrb	r3, [r3, #3]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d002      	beq.n	8007988 <INTERRUPT_Init+0x40>
  {
    INTERRUPT_Enable(handler);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f7ff ffd2 	bl	800792c <INTERRUPT_Enable>
  {
    INTERRUPT_Enable(handler);
  }
#endif

  return (INTERRUPT_STATUS_SUCCESS);
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	bd90      	pop	{r4, r7, pc}
 8007992:	bf00      	nop

08007994 <XMC_USIC_CH_TXFIFO_IsFull>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_IsEmpty(), XMC_USIC_CH_TXFIFO_Flush() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsFull(XMC_USIC_CH_t *const channel)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TFULL_Msk);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	bf14      	ite	ne
 80079aa:	2301      	movne	r3, #1
 80079ac:	2300      	moveq	r3, #0
 80079ae:	b2db      	uxtb	r3, r3
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <XMC_USIC_CH_TXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_TXFIFO_Flush(), XMC_USIC_CH_TXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_TXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_TEMPTY_Msk);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	bf14      	ite	ne
 80079fa:	2301      	movne	r3, #1
 80079fc:	2300      	moveq	r3, #0
 80079fe:	b2db      	uxtb	r3, r3
}
 8007a00:	4618      	mov	r0, r3
 8007a02:	370c      	adds	r7, #12
 8007a04:	46bd      	mov	sp, r7
 8007a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0a:	4770      	bx	lr

08007a0c <XMC_I2C_CH_GetStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_ClearStatusFlag()\n\n
 */
__STATIC_INLINE uint32_t XMC_I2C_CH_GetStatusFlag(XMC_USIC_CH_t *const channel)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b083      	sub	sp, #12
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  return (channel->PSR_IICMode);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	370c      	adds	r7, #12
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a22:	4770      	bx	lr

08007a24 <XMC_I2C_CH_ClearStatusFlag>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_I2C_CH_GetStatusFlag()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_ClearStatusFlag(XMC_USIC_CH_t *const channel, uint32_t flag)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b083      	sub	sp, #12
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
 8007a2c:	6039      	str	r1, [r7, #0]
  channel->PSCR |= flag;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	431a      	orrs	r2, r3
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8007a3a:	370c      	adds	r7, #12
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <I2C_MASTER_IsTXFIFOFull>:
 *  }
 * }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsTXFIFOFull(const I2C_MASTER_t* const handle)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b082      	sub	sp, #8
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsTXFIFOFull: invalid handle", (handle != NULL));
  return XMC_USIC_CH_TXFIFO_IsFull(handle->channel);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff ff9f 	bl	8007994 <XMC_USIC_CH_TXFIFO_IsFull>
 8007a56:	4603      	mov	r3, r0
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3708      	adds	r7, #8
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <I2C_MASTER_IsRXFIFOEmpty>:
 *   }
 *  }
 * @endcode
 */
__STATIC_INLINE bool I2C_MASTER_IsRXFIFOEmpty(const I2C_MASTER_t* const handle)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b082      	sub	sp, #8
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_IsRXFIFOEmpty: invalid handle", (handle != NULL));
  return XMC_USIC_CH_RXFIFO_IsEmpty(handle->channel);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff ffb9 	bl	80079e4 <XMC_USIC_CH_RXFIFO_IsEmpty>
 8007a72:	4603      	mov	r3, r0
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3708      	adds	r7, #8
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <I2C_MASTER_GetReceivedByte>:
 * @endcode
 *
 */
/* Wrapper to the LLD API for reading back the value of the RBUF or OUTR register */
__STATIC_INLINE uint8_t I2C_MASTER_GetReceivedByte(I2C_MASTER_t * const handle)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_GetReceivedByte: invalid handle", (handle != NULL));
  return (uint8_t)XMC_I2C_CH_GetReceivedData(handle->channel);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f7fc fd51 	bl	8004530 <XMC_I2C_CH_GetReceivedData>
 8007a8e:	4603      	mov	r3, r0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <I2C_MASTER_TransmitByte>:
 *    }
 *  }
 * @endcode
 */
__STATIC_INLINE void I2C_MASTER_TransmitByte(I2C_MASTER_t * const handle, uint8_t byte)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("I2C_MASTER_TransmitByte: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterTransmit(handle->channel, byte);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681a      	ldr	r2, [r3, #0]
 8007aa8:	78fb      	ldrb	r3, [r7, #3]
 8007aaa:	4610      	mov	r0, r2
 8007aac:	4619      	mov	r1, r3
 8007aae:	f7fc fccd 	bl	800444c <XMC_I2C_CH_MasterTransmit>
}
 8007ab2:	3708      	adds	r7, #8
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <I2C_MASTER_ReceiveACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveACK(I2C_MASTER_t * const handle)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b082      	sub	sp, #8
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveAck(handle->channel);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	f7fc fce7 	bl	8004498 <XMC_I2C_CH_MasterReceiveAck>
}
 8007aca:	3708      	adds	r7, #8
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <I2C_MASTER_ReceiveNACK>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_ReceiveNACK(I2C_MASTER_t * const handle)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_ReceiveNACK: invalid handle", (handle != NULL));
  XMC_I2C_CH_MasterReceiveNack(handle->channel);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7fc fd01 	bl	80044e4 <XMC_I2C_CH_MasterReceiveNack>
}
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <I2C_MASTER_SendStop>:
 *    return 1U;
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStop(I2C_MASTER_t * const handle)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b082      	sub	sp, #8
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("I2C_MASTER_SendStop: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_STOP_CONDITION_RECEIVED);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4618      	mov	r0, r3
 8007af6:	2110      	movs	r1, #16
 8007af8:	f7ff ff94 	bl	8007a24 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStop(handle->channel);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4618      	mov	r0, r3
 8007b02:	f7fc fc7d 	bl	8004400 <XMC_I2C_CH_MasterStop>
}
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <I2C_MASTER_SendStart>:
 *   }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                  const XMC_I2C_CH_CMD_t cmd)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	4613      	mov	r3, r2
 8007b18:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4618      	mov	r0, r3
 8007b20:	2104      	movs	r1, #4
 8007b22:	f7ff ff7f 	bl	8007a24 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterStart(handle->channel, (uint16_t)address, cmd);
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	6819      	ldr	r1, [r3, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	b29a      	uxth	r2, r3
 8007b2e:	79fb      	ldrb	r3, [r7, #7]
 8007b30:	4608      	mov	r0, r1
 8007b32:	4611      	mov	r1, r2
 8007b34:	461a      	mov	r2, r3
 8007b36:	f7fc fbfb 	bl	8004330 <XMC_I2C_CH_MasterStart>
}
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <I2C_MASTER_SendRepeatedStart>:
 *  }
 * @endcode
*/
__STATIC_INLINE void I2C_MASTER_SendRepeatedStart(I2C_MASTER_t * const handle, const uint32_t address,
		                                          const XMC_I2C_CH_CMD_t cmd)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b084      	sub	sp, #16
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	60f8      	str	r0, [r7, #12]
 8007b48:	60b9      	str	r1, [r7, #8]
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	71fb      	strb	r3, [r7, #7]
  XMC_ASSERT("I2C_MASTER_SendRepeatedStart: invalid handle", (handle != NULL));
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	4618      	mov	r0, r3
 8007b54:	2108      	movs	r1, #8
 8007b56:	f7ff ff65 	bl	8007a24 <XMC_I2C_CH_ClearStatusFlag>
  XMC_I2C_CH_MasterRepeatedStart(handle->channel, (uint16_t)address, cmd);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6819      	ldr	r1, [r3, #0]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	b29a      	uxth	r2, r3
 8007b62:	79fb      	ldrb	r3, [r7, #7]
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	461a      	mov	r2, r3
 8007b6a:	f7fc fc15 	bl	8004398 <XMC_I2C_CH_MasterRepeatedStart>
}
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <I2C_MASTER_Init>:
  return (version);
}

/* Function to initialize the USIC Channel with GUI configured values.*/
I2C_MASTER_STATUS_t I2C_MASTER_Init(const I2C_MASTER_t *const handle)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  if (handle != NULL)
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d006      	beq.n	8007b90 <I2C_MASTER_Init+0x1c>
  {
    /*Initialize the multiplexers required for I2C_MASTER configuration*/
    handle->config->fptr_i2c_config();
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	4798      	blx	r3

    status = I2C_MASTER_STATUS_SUCCESS;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	73fb      	strb	r3, [r7, #15]
 8007b8e:	e001      	b.n	8007b94 <I2C_MASTER_Init+0x20>
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007b90:	2301      	movs	r3, #1
 8007b92:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
 8007b9e:	bf00      	nop

08007ba0 <I2C_MASTER_GetFlagStatus>:

/* Function to get flag status of the requested parameter */
uint32_t I2C_MASTER_GetFlagStatus(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	6039      	str	r1, [r7, #0]
  uint32_t status;

  status = XMC_I2C_CH_GetStatusFlag(handle->channel);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7ff ff2c 	bl	8007a0c <XMC_I2C_CH_GetStatusFlag>
 8007bb4:	60f8      	str	r0, [r7, #12]

  return (status & flagtype);
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	4013      	ands	r3, r2
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <I2C_MASTER_ClearFlag>:

/* Function to clear flag status of the requested parameter */
void I2C_MASTER_ClearFlag(const I2C_MASTER_t *handle, uint32_t flagtype)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b082      	sub	sp, #8
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_ClearStatusFlag(handle->channel,flagtype);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	6839      	ldr	r1, [r7, #0]
 8007bd6:	f7ff ff25 	bl	8007a24 <XMC_I2C_CH_ClearStatusFlag>
}
 8007bda:	3708      	adds	r7, #8
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <I2C_MASTER_Transmit>:

/* Function to transmit the data to slave device */
I2C_MASTER_STATUS_t I2C_MASTER_Transmit(I2C_MASTER_t *handle, bool send_start, const uint32_t address,
                                        uint8_t *data, const uint32_t size, bool send_stop)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b088      	sub	sp, #32
 8007be4:	af02      	add	r7, sp, #8
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	607a      	str	r2, [r7, #4]
 8007bea:	603b      	str	r3, [r7, #0]
 8007bec:	460b      	mov	r3, r1
 8007bee:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007bf0:	2302      	movs	r3, #2
 8007bf2:	75fb      	strb	r3, [r7, #23]

  if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d013      	beq.n	8007c28 <I2C_MASTER_Transmit+0x48>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    status = I2C_MASTER_StartTransmitIRQ(handle, send_start, address, data, size, send_stop);
#endif
  }
  else if(handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d00d      	beq.n	8007c28 <I2C_MASTER_Transmit+0x48>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
    status = I2C_MASTER_lStartTransmitPolling(handle, send_start, address, data, size, send_stop);
 8007c0c:	7afa      	ldrb	r2, [r7, #11]
 8007c0e:	6a3b      	ldr	r3, [r7, #32]
 8007c10:	9300      	str	r3, [sp, #0]
 8007c12:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c16:	9301      	str	r3, [sp, #4]
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	687a      	ldr	r2, [r7, #4]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	f000 f88c 	bl	8007d3c <I2C_MASTER_lStartTransmitPolling>
 8007c24:	4603      	mov	r3, r0
 8007c26:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
} /* end of function */
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop

08007c34 <I2C_MASTER_Receive>:
 *
 *
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_Receive(I2C_MASTER_t *handle, bool send_start, const uint32_t address, uint8_t * data,
                                   const uint32_t count, bool send_stop, bool send_nack)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b08a      	sub	sp, #40	; 0x28
 8007c38:	af04      	add	r7, sp, #16
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	607a      	str	r2, [r7, #4]
 8007c3e:	603b      	str	r3, [r7, #0]
 8007c40:	460b      	mov	r3, r1
 8007c42:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007c44:	2302      	movs	r3, #2
 8007c46:	75fb      	strb	r3, [r7, #23]

  if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d016      	beq.n	8007c82 <I2C_MASTER_Receive+0x4e>
  {
#if (I2C_MASTER_INTERRUPT_RX_ENABLED == 1)
  status = I2C_MASTER_StartReceiveIRQ(handle, send_start, address, data, count, send_stop, send_nack);
#endif
  }
  else if (handle->config->receive_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d010      	beq.n	8007c82 <I2C_MASTER_Receive+0x4e>
#endif
  }
  else
  {
#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
    status = I2C_MASTER_lStartReceivePolling(handle, send_start, address, data, count, send_stop, send_nack);
 8007c60:	7afa      	ldrb	r2, [r7, #11]
 8007c62:	6a3b      	ldr	r3, [r7, #32]
 8007c64:	9300      	str	r3, [sp, #0]
 8007c66:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c70:	9302      	str	r3, [sp, #8]
 8007c72:	68f8      	ldr	r0, [r7, #12]
 8007c74:	4611      	mov	r1, r2
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f000 f929 	bl	8007ed0 <I2C_MASTER_lStartReceivePolling>
 8007c7e:	4603      	mov	r3, r0
 8007c80:	75fb      	strb	r3, [r7, #23]
#endif
  }

  return (status);
 8007c82:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c84:	4618      	mov	r0, r3
 8007c86:	3718      	adds	r7, #24
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	bd80      	pop	{r7, pc}

08007c8c <I2C_MASTER_lSendStart_Or_RepeatedStart>:
#if ((I2C_MASTER_INTERRUPT_TX_ENABLED == 1) || (I2C_MASTER_INTERRUPT_RX_ENABLED == 1) || \
    (I2C_MASTER_DIRECT_TX_ENABLED == 1) || (I2C_MASTER_DIRECT_RX_ENABLED == 1))
/* Function to issue Send Start/Repeated Start command */
static void I2C_MASTER_lSendStart_Or_RepeatedStart(I2C_MASTER_t * handle,const uint32_t address,
                                               const XMC_I2C_CH_CMD_t cmd)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b084      	sub	sp, #16
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	60f8      	str	r0, [r7, #12]
 8007c94:	60b9      	str	r1, [r7, #8]
 8007c96:	4613      	mov	r3, r2
 8007c98:	71fb      	strb	r3, [r7, #7]
  XMC_I2C_CH_ClearStatusFlag(handle->channel, XMC_I2C_CH_STATUS_FLAG_START_CONDITION_RECEIVED | XMC_I2C_CH_STATUS_FLAG_REPEATED_START_CONDITION_RECEIVED);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	210c      	movs	r1, #12
 8007ca2:	f7ff febf 	bl	8007a24 <XMC_I2C_CH_ClearStatusFlag>

  if (handle->runtime->bus_acquired == true)
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	689b      	ldr	r3, [r3, #8]
 8007caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d009      	beq.n	8007cc8 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x3c>
  {
  I2C_MASTER_SendRepeatedStart(handle, (uint16_t)address, cmd);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	b29b      	uxth	r3, r3
 8007cb8:	461a      	mov	r2, r3
 8007cba:	79fb      	ldrb	r3, [r7, #7]
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	461a      	mov	r2, r3
 8007cc2:	f7ff ff3d 	bl	8007b40 <I2C_MASTER_SendRepeatedStart>
 8007cc6:	e00d      	b.n	8007ce4 <I2C_MASTER_lSendStart_Or_RepeatedStart+0x58>
  }
  else
  {
    handle->runtime->bus_acquired = true;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	689b      	ldr	r3, [r3, #8]
 8007ccc:	2201      	movs	r2, #1
 8007cce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    I2C_MASTER_SendStart(handle, (uint16_t)address, cmd);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	79fb      	ldrb	r3, [r7, #7]
 8007cda:	68f8      	ldr	r0, [r7, #12]
 8007cdc:	4611      	mov	r1, r2
 8007cde:	461a      	mov	r2, r3
 8007ce0:	f7ff ff14 	bl	8007b0c <I2C_MASTER_SendStart>
  }
}
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}
 8007cea:	bf00      	nop

08007cec <I2C_MASTER_AbortTransmit>:
 * If there is a transmission in progress, it will be stopped. If transmit FIFO is used,
 * the existing data will be flushed. After the transmission is stopped, user can start
 * a new transmission without delay.
 **********************************************************************************************************************/
I2C_MASTER_STATUS_t I2C_MASTER_AbortTransmit(const I2C_MASTER_t *const handle)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_SUCCESS;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	73fb      	strb	r3, [r7, #15]

  if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_INTERRUPT)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d007      	beq.n	8007d14 <I2C_MASTER_AbortTransmit+0x28>
  {
#if (I2C_MASTER_INTERRUPT_TX_ENABLED == 1)
    I2C_MASTER_AbortTransmitIRQ(handle);
#endif
  }
  else if (handle->config->transmit_mode == I2C_MASTER_TRANSFER_MODE_DMA)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d001      	beq.n	8007d14 <I2C_MASTER_AbortTransmit+0x28>
    I2C_MASTER_lAbortTransmitDMA(handle);
#endif
  }
  else
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007d10:	2301      	movs	r3, #1
 8007d12:	73fb      	strb	r3, [r7, #15]
  }
  handle->channel->PSCR |= USIC_CH_PSR_IICMode_WTDF_Msk; /*clear WDTF*/
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	687a      	ldr	r2, [r7, #4]
 8007d1a:	6812      	ldr	r2, [r2, #0]
 8007d1c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007d1e:	f042 0202 	orr.w	r2, r2, #2
 8007d22:	64da      	str	r2, [r3, #76]	; 0x4c
  handle->channel->FMR = 0x00000002U;/*clear TDV*/
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	2202      	movs	r2, #2
 8007d2a:	669a      	str	r2, [r3, #104]	; 0x68

  return (status);
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3714      	adds	r7, #20
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr
 8007d3a:	bf00      	nop

08007d3c <I2C_MASTER_lStartTransmitPolling>:

#if (I2C_MASTER_DIRECT_TX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartTransmitPolling(I2C_MASTER_t *const handle, bool send_start,
                                                        const uint32_t slave_address, uint8_t *data,uint32_t size,
                              bool send_stop)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b086      	sub	sp, #24
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	60f8      	str	r0, [r7, #12]
 8007d44:	607a      	str	r2, [r7, #4]
 8007d46:	603b      	str	r3, [r7, #0]
 8007d48:	460b      	mov	r3, r1
 8007d4a:	72fb      	strb	r3, [r7, #11]
  uint32_t buffer_index;
  I2C_MASTER_STATUS_t status;

  status = I2C_MASTER_STATUS_BUSY;
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	74fb      	strb	r3, [r7, #19]

  buffer_index = 0U;
 8007d50:	2300      	movs	r3, #0
 8007d52:	617b      	str	r3, [r7, #20]

  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (size == 0U)))
 8007d54:	7afb      	ldrb	r3, [r7, #11]
 8007d56:	f083 0301 	eor.w	r3, r3, #1
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d009      	beq.n	8007d74 <I2C_MASTER_lStartTransmitPolling+0x38>
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	f083 0301 	eor.w	r3, r3, #1
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d105      	bne.n	8007d80 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d002      	beq.n	8007d80 <I2C_MASTER_lStartTransmitPolling+0x44>
 8007d7a:	6a3b      	ldr	r3, [r7, #32]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d102      	bne.n	8007d86 <I2C_MASTER_lStartTransmitPolling+0x4a>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007d80:	2301      	movs	r3, #1
 8007d82:	74fb      	strb	r3, [r7, #19]
 8007d84:	e09e      	b.n	8007ec4 <I2C_MASTER_lStartTransmitPolling+0x188>
  }
  else
  {
    if (send_start == true)
 8007d86:	7afb      	ldrb	r3, [r7, #11]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d02c      	beq.n	8007de6 <I2C_MASTER_lStartTransmitPolling+0xaa>
    {
      if (handle->runtime->bus_acquired == false)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	f083 0301 	eor.w	r3, r3, #1
 8007d9a:	b2db      	uxtb	r3, r3
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d022      	beq.n	8007de6 <I2C_MASTER_lStartTransmitPolling+0xaa>
      {
        I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_WRITE);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	6879      	ldr	r1, [r7, #4]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f7ff ff71 	bl	8007c8c <I2C_MASTER_lSendStart_Or_RepeatedStart>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007daa:	bf00      	nop
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007db2:	f7ff fef5 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007db6:	4603      	mov	r3, r0
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d0f7      	beq.n	8007dac <I2C_MASTER_lStartTransmitPolling+0x70>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007dbc:	68f8      	ldr	r0, [r7, #12]
 8007dbe:	2120      	movs	r1, #32
 8007dc0:	f7ff feee 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d008      	beq.n	8007ddc <I2C_MASTER_lStartTransmitPolling+0xa0>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007dca:	68f8      	ldr	r0, [r7, #12]
 8007dcc:	2120      	movs	r1, #32
 8007dce:	f7ff fef9 	bl	8007bc4 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f7ff ff8a 	bl	8007cec <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8007dd8:	2301      	movs	r3, #1
 8007dda:	e074      	b.n	8007ec6 <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007de2:	f7ff feef 	bl	8007bc4 <I2C_MASTER_ClearFlag>
        }
      }
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d12e      	bne.n	8007e50 <I2C_MASTER_lStartTransmitPolling+0x114>
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8007df2:	e028      	b.n	8007e46 <I2C_MASTER_lStartTransmitPolling+0x10a>
      {
        I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	4413      	add	r3, r2
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	68f8      	ldr	r0, [r7, #12]
 8007dfe:	4619      	mov	r1, r3
 8007e00:	f7ff fe4a 	bl	8007a98 <I2C_MASTER_TransmitByte>
        while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007e04:	bf00      	nop
 8007e06:	68f8      	ldr	r0, [r7, #12]
 8007e08:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007e0c:	f7ff fec8 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007e10:	4603      	mov	r3, r0
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d0f7      	beq.n	8007e06 <I2C_MASTER_lStartTransmitPolling+0xca>
        if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	2120      	movs	r1, #32
 8007e1a:	f7ff fec1 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d008      	beq.n	8007e36 <I2C_MASTER_lStartTransmitPolling+0xfa>
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	2120      	movs	r1, #32
 8007e28:	f7ff fecc 	bl	8007bc4 <I2C_MASTER_ClearFlag>
          I2C_MASTER_AbortTransmit(handle);
 8007e2c:	68f8      	ldr	r0, [r7, #12]
 8007e2e:	f7ff ff5d 	bl	8007cec <I2C_MASTER_AbortTransmit>
          return I2C_MASTER_STATUS_FAILURE;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e047      	b.n	8007ec6 <I2C_MASTER_lStartTransmitPolling+0x18a>
        }
        else
        {
          I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007e3c:	f7ff fec2 	bl	8007bc4 <I2C_MASTER_ClearFlag>
        }

        buffer_index++;
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	3301      	adds	r3, #1
 8007e44:	617b      	str	r3, [r7, #20]
    }
      
    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      /* send data, byte by byte */
      while (buffer_index < size)
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d3d2      	bcc.n	8007df4 <I2C_MASTER_lStartTransmitPolling+0xb8>
 8007e4e:	e02b      	b.n	8007ea8 <I2C_MASTER_lStartTransmitPolling+0x16c>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8007e50:	e01a      	b.n	8007e88 <I2C_MASTER_lStartTransmitPolling+0x14c>
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007e52:	e010      	b.n	8007e76 <I2C_MASTER_lStartTransmitPolling+0x13a>
        {
          /* transmit each byte till index reaches to the last byte */
          if (buffer_index < size)
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	6a3b      	ldr	r3, [r7, #32]
 8007e58:	429a      	cmp	r2, r3
 8007e5a:	d20b      	bcs.n	8007e74 <I2C_MASTER_lStartTransmitPolling+0x138>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            I2C_MASTER_TransmitByte(handle, data[buffer_index]);
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	4413      	add	r3, r2
 8007e62:	781b      	ldrb	r3, [r3, #0]
 8007e64:	68f8      	ldr	r0, [r7, #12]
 8007e66:	4619      	mov	r1, r3
 8007e68:	f7ff fe16 	bl	8007a98 <I2C_MASTER_TransmitByte>
            buffer_index++;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	617b      	str	r3, [r7, #20]
 8007e72:	e000      	b.n	8007e76 <I2C_MASTER_lStartTransmitPolling+0x13a>
          }
          else
          {
            break;
 8007e74:	e008      	b.n	8007e88 <I2C_MASTER_lStartTransmitPolling+0x14c>
    else
    {
      while (buffer_index < size)
      {
        /* Fill the transmit FIFO */
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007e76:	68f8      	ldr	r0, [r7, #12]
 8007e78:	f7ff fde4 	bl	8007a44 <I2C_MASTER_IsTXFIFOFull>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	f083 0301 	eor.w	r3, r3, #1
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d1e5      	bne.n	8007e54 <I2C_MASTER_lStartTransmitPolling+0x118>
        buffer_index++;
      }
    }
    else
    {
      while (buffer_index < size)
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	6a3b      	ldr	r3, [r7, #32]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d3e0      	bcc.n	8007e52 <I2C_MASTER_lStartTransmitPolling+0x116>
          }
        }
      }
      
      /*make sure data is transmitted from FIFO*/
      while (!XMC_USIC_CH_TXFIFO_IsEmpty(handle->channel)){}
 8007e90:	bf00      	nop
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f7ff fd90 	bl	80079bc <XMC_USIC_CH_TXFIFO_IsEmpty>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	f083 0301 	eor.w	r3, r3, #1
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1f4      	bne.n	8007e92 <I2C_MASTER_lStartTransmitPolling+0x156>
    }

    if(send_stop == true)
 8007ea8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <I2C_MASTER_lStartTransmitPolling+0x184>
    {
      handle->runtime->bus_acquired = false;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	689b      	ldr	r3, [r3, #8]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 8007eba:	68f8      	ldr	r0, [r7, #12]
 8007ebc:	f7ff fe14 	bl	8007ae8 <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	74fb      	strb	r3, [r7, #19]
  }

  return (status);
 8007ec4:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3718      	adds	r7, #24
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}
 8007ece:	bf00      	nop

08007ed0 <I2C_MASTER_lStartReceivePolling>:

#if (I2C_MASTER_DIRECT_RX_ENABLED == 1)
static I2C_MASTER_STATUS_t I2C_MASTER_lStartReceivePolling(I2C_MASTER_t *const handle, bool send_start,
                                                       uint32_t slave_address, uint8_t *data, uint32_t count,
                               bool send_stop, bool send_nack)
{
 8007ed0:	b590      	push	{r4, r7, lr}
 8007ed2:	b089      	sub	sp, #36	; 0x24
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	607a      	str	r2, [r7, #4]
 8007eda:	603b      	str	r3, [r7, #0]
 8007edc:	460b      	mov	r3, r1
 8007ede:	72fb      	strb	r3, [r7, #11]
  I2C_MASTER_STATUS_t status;
  uint32_t buffer_index;
  uint32_t temp_index;

  status = I2C_MASTER_STATUS_BUSY;
 8007ee0:	2302      	movs	r3, #2
 8007ee2:	77fb      	strb	r3, [r7, #31]
  if ((((send_start == false) && (handle->runtime->bus_acquired == false)) || (data == NULL) || (count == 0U)))
 8007ee4:	7afb      	ldrb	r3, [r7, #11]
 8007ee6:	f083 0301 	eor.w	r3, r3, #1
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d009      	beq.n	8007f04 <I2C_MASTER_lStartReceivePolling+0x34>
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	689b      	ldr	r3, [r3, #8]
 8007ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	f083 0301 	eor.w	r3, r3, #1
 8007efe:	b2db      	uxtb	r3, r3
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d105      	bne.n	8007f10 <I2C_MASTER_lStartReceivePolling+0x40>
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d002      	beq.n	8007f10 <I2C_MASTER_lStartReceivePolling+0x40>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d102      	bne.n	8007f16 <I2C_MASTER_lStartReceivePolling+0x46>
  {
    status = I2C_MASTER_STATUS_FAILURE;
 8007f10:	2301      	movs	r3, #1
 8007f12:	77fb      	strb	r3, [r7, #31]
 8007f14:	e0b8      	b.n	8008088 <I2C_MASTER_lStartReceivePolling+0x1b8>
  }
  else
  {
    buffer_index = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	61bb      	str	r3, [r7, #24]
    temp_index = 0U;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]
    if (send_start == true)
 8007f1e:	7afb      	ldrb	r3, [r7, #11]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d022      	beq.n	8007f6a <I2C_MASTER_lStartReceivePolling+0x9a>
    {
      I2C_MASTER_lSendStart_Or_RepeatedStart(handle, slave_address, XMC_I2C_CH_CMD_READ);
 8007f24:	68f8      	ldr	r0, [r7, #12]
 8007f26:	6879      	ldr	r1, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f7ff feaf 	bl	8007c8c <I2C_MASTER_lSendStart_Or_RepeatedStart>
      while (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED | XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED) == 0U);
 8007f2e:	bf00      	nop
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f44f 7108 	mov.w	r1, #544	; 0x220
 8007f36:	f7ff fe33 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d0f7      	beq.n	8007f30 <I2C_MASTER_lStartReceivePolling+0x60>
      if (I2C_MASTER_GetFlagStatus(handle, XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED))
 8007f40:	68f8      	ldr	r0, [r7, #12]
 8007f42:	2120      	movs	r1, #32
 8007f44:	f7ff fe2c 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d008      	beq.n	8007f60 <I2C_MASTER_lStartReceivePolling+0x90>
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_NACK_RECEIVED);
 8007f4e:	68f8      	ldr	r0, [r7, #12]
 8007f50:	2120      	movs	r1, #32
 8007f52:	f7ff fe37 	bl	8007bc4 <I2C_MASTER_ClearFlag>
        I2C_MASTER_AbortTransmit(handle);
 8007f56:	68f8      	ldr	r0, [r7, #12]
 8007f58:	f7ff fec8 	bl	8007cec <I2C_MASTER_AbortTransmit>
        return I2C_MASTER_STATUS_FAILURE;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e094      	b.n	800808a <I2C_MASTER_lStartReceivePolling+0x1ba>
      }
      else
      {
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ACK_RECEIVED);
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f66:	f7ff fe2d 	bl	8007bc4 <I2C_MASTER_ClearFlag>
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d13a      	bne.n	8007fec <I2C_MASTER_lStartReceivePolling+0x11c>
    {
      while (buffer_index < count)
 8007f76:	e034      	b.n	8007fe2 <I2C_MASTER_lStartReceivePolling+0x112>
      {
        if (((buffer_index + 1U) == count) && (send_nack == true))
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	1c5a      	adds	r2, r3, #1
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d107      	bne.n	8007f92 <I2C_MASTER_lStartReceivePolling+0xc2>
 8007f82:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d003      	beq.n	8007f92 <I2C_MASTER_lStartReceivePolling+0xc2>
        {
          I2C_MASTER_ReceiveNACK(handle);
 8007f8a:	68f8      	ldr	r0, [r7, #12]
 8007f8c:	f7ff fda0 	bl	8007ad0 <I2C_MASTER_ReceiveNACK>
 8007f90:	e002      	b.n	8007f98 <I2C_MASTER_lStartReceivePolling+0xc8>
        }
        else
        {
          I2C_MASTER_ReceiveACK(handle);
 8007f92:	68f8      	ldr	r0, [r7, #12]
 8007f94:	f7ff fd90 	bl	8007ab8 <I2C_MASTER_ReceiveACK>
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8007f98:	bf00      	nop
 8007f9a:	68f8      	ldr	r0, [r7, #12]
 8007f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fa0:	f7ff fdfe 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d107      	bne.n	8007fba <I2C_MASTER_lStartReceivePolling+0xea>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007fb0:	f7ff fdf6 	bl	8007ba0 <I2C_MASTER_GetFlagStatus>
 8007fb4:	4603      	mov	r3, r0
        else
        {
          I2C_MASTER_ReceiveACK(handle);
        }

        while ((I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION) == 0U) &&
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d0ef      	beq.n	8007f9a <I2C_MASTER_lStartReceivePolling+0xca>
               (I2C_MASTER_GetFlagStatus(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION) == 0U))
        {
          /* wait for RSI */
        }

        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_ALTERNATIVE_RECEIVE_INDICATION);
 8007fba:	68f8      	ldr	r0, [r7, #12]
 8007fbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007fc0:	f7ff fe00 	bl	8007bc4 <I2C_MASTER_ClearFlag>
        I2C_MASTER_ClearFlag(handle, (uint32_t)XMC_I2C_CH_STATUS_FLAG_RECEIVE_INDICATION);
 8007fc4:	68f8      	ldr	r0, [r7, #12]
 8007fc6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007fca:	f7ff fdfb 	bl	8007bc4 <I2C_MASTER_ClearFlag>

        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8007fce:	69bb      	ldr	r3, [r7, #24]
 8007fd0:	1c5a      	adds	r2, r3, #1
 8007fd2:	61ba      	str	r2, [r7, #24]
 8007fd4:	683a      	ldr	r2, [r7, #0]
 8007fd6:	18d4      	adds	r4, r2, r3
 8007fd8:	68f8      	ldr	r0, [r7, #12]
 8007fda:	f7ff fd4f 	bl	8007a7c <I2C_MASTER_GetReceivedByte>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	7023      	strb	r3, [r4, #0]
      }
    }

    if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED)
    {
      while (buffer_index < count)
 8007fe2:	69ba      	ldr	r2, [r7, #24]
 8007fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe6:	429a      	cmp	r2, r3
 8007fe8:	d3c6      	bcc.n	8007f78 <I2C_MASTER_lStartReceivePolling+0xa8>
 8007fea:	e03f      	b.n	800806c <I2C_MASTER_lStartReceivePolling+0x19c>
        data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	617b      	str	r3, [r7, #20]
      while (temp_index < count)
 8007ff0:	e038      	b.n	8008064 <I2C_MASTER_lStartReceivePolling+0x194>
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8007ff2:	e018      	b.n	8008026 <I2C_MASTER_lStartReceivePolling+0x156>
        {
          /* transmit each byte till index reaches to the last byte */
          if (temp_index < count)
 8007ff4:	697a      	ldr	r2, [r7, #20]
 8007ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d213      	bcs.n	8008024 <I2C_MASTER_lStartReceivePolling+0x154>
          {
            /* load the FIFO, byte by byte till either FIFO is full or all data is loaded*/
            if (((temp_index + 1U) == count) && (send_nack == true))
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	1c5a      	adds	r2, r3, #1
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	429a      	cmp	r2, r3
 8008004:	d107      	bne.n	8008016 <I2C_MASTER_lStartReceivePolling+0x146>
 8008006:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d003      	beq.n	8008016 <I2C_MASTER_lStartReceivePolling+0x146>
            {
              I2C_MASTER_ReceiveNACK(handle);
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f7ff fd5e 	bl	8007ad0 <I2C_MASTER_ReceiveNACK>
 8008014:	e002      	b.n	800801c <I2C_MASTER_lStartReceivePolling+0x14c>
            }
            else
            {
              I2C_MASTER_ReceiveACK(handle);
 8008016:	68f8      	ldr	r0, [r7, #12]
 8008018:	f7ff fd4e 	bl	8007ab8 <I2C_MASTER_ReceiveACK>
            }
            temp_index++;
 800801c:	697b      	ldr	r3, [r7, #20]
 800801e:	3301      	adds	r3, #1
 8008020:	617b      	str	r3, [r7, #20]
 8008022:	e000      	b.n	8008026 <I2C_MASTER_lStartReceivePolling+0x156>
          }
          else
          {
            break;
 8008024:	e008      	b.n	8008038 <I2C_MASTER_lStartReceivePolling+0x168>
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
      {
        while (I2C_MASTER_IsTXFIFOFull(handle) == false)
 8008026:	68f8      	ldr	r0, [r7, #12]
 8008028:	f7ff fd0c 	bl	8007a44 <I2C_MASTER_IsTXFIFOFull>
 800802c:	4603      	mov	r3, r0
 800802e:	f083 0301 	eor.w	r3, r3, #1
 8008032:	b2db      	uxtb	r3, r3
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1dd      	bne.n	8007ff4 <I2C_MASTER_lStartReceivePolling+0x124>
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 8008038:	e010      	b.n	800805c <I2C_MASTER_lStartReceivePolling+0x18c>
        {
          /* wait for data to come in RX fifo */
          while (I2C_MASTER_IsRXFIFOEmpty(handle)){}
 800803a:	bf00      	nop
 800803c:	68f8      	ldr	r0, [r7, #12]
 800803e:	f7ff fd0f 	bl	8007a60 <I2C_MASTER_IsRXFIFOEmpty>
 8008042:	4603      	mov	r3, r0
 8008044:	2b00      	cmp	r3, #0
 8008046:	d1f9      	bne.n	800803c <I2C_MASTER_lStartReceivePolling+0x16c>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	1c5a      	adds	r2, r3, #1
 800804c:	61ba      	str	r2, [r7, #24]
 800804e:	683a      	ldr	r2, [r7, #0]
 8008050:	18d4      	adds	r4, r2, r3
 8008052:	68f8      	ldr	r0, [r7, #12]
 8008054:	f7ff fd12 	bl	8007a7c <I2C_MASTER_GetReceivedByte>
 8008058:	4603      	mov	r3, r0
 800805a:	7023      	strb	r3, [r4, #0]
          {
            break;
          }
        } /* end of while (I2C_MASTER_IsTXFIFOFull(handle) == false) */

        while (buffer_index < temp_index)
 800805c:	69ba      	ldr	r2, [r7, #24]
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	429a      	cmp	r2, r3
 8008062:	d3ea      	bcc.n	800803a <I2C_MASTER_lStartReceivePolling+0x16a>
      }
    } /* end of if (handle->config->txFIFO_size == XMC_USIC_CH_FIFO_DISABLED) */
    else
    {
      temp_index = buffer_index;
      while (temp_index < count)
 8008064:	697a      	ldr	r2, [r7, #20]
 8008066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008068:	429a      	cmp	r2, r3
 800806a:	d3c2      	bcc.n	8007ff2 <I2C_MASTER_lStartReceivePolling+0x122>
          data[buffer_index++] = I2C_MASTER_GetReceivedByte(handle);
        }
      } /* end of while (temp_index < count) */
    } /* end of else */

    if (send_stop == true)
 800806c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <I2C_MASTER_lStartReceivePolling+0x1b4>
    {
      handle->runtime->bus_acquired = false;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      I2C_MASTER_SendStop(handle);
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f7ff fd32 	bl	8007ae8 <I2C_MASTER_SendStop>
    }

    status = I2C_MASTER_STATUS_SUCCESS;
 8008084:	2300      	movs	r3, #0
 8008086:	77fb      	strb	r3, [r7, #31]
  }

  return (status);
 8008088:	7ffb      	ldrb	r3, [r7, #31]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3724      	adds	r7, #36	; 0x24
 800808e:	46bd      	mov	sp, r7
 8008090:	bd90      	pop	{r4, r7, pc}
 8008092:	bf00      	nop

08008094 <XMC_USIC_CH_SetInputSource>:
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
 80080a0:	4613      	mov	r3, r2
 80080a2:	70bb      	strb	r3, [r7, #2]
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80080a4:	78f8      	ldrb	r0, [r7, #3]
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	3306      	adds	r3, #6
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	4413      	add	r3, r2
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f023 0207 	bic.w	r2, r3, #7
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
 80080b6:	78bb      	ldrb	r3, [r7, #2]
 * XMC_USIC_CH_EnableInputInversion(), XMC_USIC_CH_EnableInputDigitalFilter(), XMC_USIC_CH_EnableInputSync(),
 * XMC_USIC_CH_SetInputSamplingFreq()\n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetInputSource(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_INPUT_t input, const uint8_t source)
{
  channel->DXCR[input] = (uint32_t)((channel->DXCR[input] & (uint32_t)(~USIC_CH_DXCR_DSEL_Msk)) |
 80080b8:	431a      	orrs	r2, r3
 80080ba:	6879      	ldr	r1, [r7, #4]
 80080bc:	1d83      	adds	r3, r0, #6
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	440b      	add	r3, r1
 80080c2:	605a      	str	r2, [r3, #4]
                                    ((uint32_t)source << USIC_CH_DXCR_DSEL_Pos));
}
 80080c4:	370c      	adds	r7, #12
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop

080080d0 <XMC_USIC_CH_SetMode>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_Enable(), XMC_USIC_CH_Enable() \n\n\n
 */
__STATIC_INLINE void XMC_USIC_CH_SetMode(XMC_USIC_CH_t *const channel, const XMC_USIC_CH_OPERATING_MODE_t mode)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b083      	sub	sp, #12
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  channel->CCR = (uint32_t)(channel->CCR & (~(USIC_CH_CCR_MODE_Msk))) | (uint32_t)mode;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080e0:	f023 020f 	bic.w	r2, r3, #15
 80080e4:	78fb      	ldrb	r3, [r7, #3]
 80080e6:	431a      	orrs	r2, r3
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	641a      	str	r2, [r3, #64]	; 0x40
}
 80080ec:	370c      	adds	r7, #12
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop

080080f8 <XMC_I2C_CH_Init>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_Enable()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Init(XMC_USIC_CH_t *const channel, const XMC_I2C_CH_CONFIG_t *const config)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
  XMC_I2C_CH_InitEx(channel, config, true);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	6839      	ldr	r1, [r7, #0]
 8008106:	2201      	movs	r2, #1
 8008108:	f7fc f86a 	bl	80041e0 <XMC_I2C_CH_InitEx>
}
 800810c:	3708      	adds	r7, #8
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}
 8008112:	bf00      	nop

08008114 <XMC_I2C_CH_Start>:
 *
 * \par<b>Related APIs:</b><br>
 * XMC_USIC_CH_SetMode()\n\n
 */
__STATIC_INLINE void XMC_I2C_CH_Start(XMC_USIC_CH_t *const channel)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  XMC_USIC_CH_SetMode(channel, XMC_USIC_CH_OPERATING_MODE_I2C);
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	2104      	movs	r1, #4
 8008120:	f7ff ffd6 	bl	80080d0 <XMC_USIC_CH_SetMode>
}
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}
 800812a:	bf00      	nop

0800812c <I2C_MASTER_0_disable_io>:
  .baudrate = (uint32_t)(100000U),
  .address  = 0
};

static void I2C_MASTER_0_disable_io(void)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 8008130:	4805      	ldr	r0, [pc, #20]	; (8008148 <I2C_MASTER_0_disable_io+0x1c>)
 8008132:	2105      	movs	r1, #5
 8008134:	2200      	movs	r2, #0
 8008136:	f7fb ffd1 	bl	80040dc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, XMC_GPIO_MODE_INPUT_TRISTATE);
 800813a:	4803      	ldr	r0, [pc, #12]	; (8008148 <I2C_MASTER_0_disable_io+0x1c>)
 800813c:	2104      	movs	r1, #4
 800813e:	2200      	movs	r2, #0
 8008140:	f7fb ffcc 	bl	80040dc <XMC_GPIO_SetMode>
}
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	48028200 	.word	0x48028200

0800814c <I2C_MASTER_0_enable_io>:

static void I2C_MASTER_0_enable_io(void)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, I2C_MASTER_0_sda_pin_config.mode);
 8008150:	23d0      	movs	r3, #208	; 0xd0
 8008152:	4806      	ldr	r0, [pc, #24]	; (800816c <I2C_MASTER_0_enable_io+0x20>)
 8008154:	2105      	movs	r1, #5
 8008156:	461a      	mov	r2, r3
 8008158:	f7fb ffc0 	bl	80040dc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, I2C_MASTER_0_scl_pin_config.mode);
 800815c:	23d0      	movs	r3, #208	; 0xd0
 800815e:	4803      	ldr	r0, [pc, #12]	; (800816c <I2C_MASTER_0_enable_io+0x20>)
 8008160:	2104      	movs	r1, #4
 8008162:	461a      	mov	r2, r3
 8008164:	f7fb ffba 	bl	80040dc <XMC_GPIO_SetMode>
}
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	48028200 	.word	0x48028200

08008170 <I2C_MASTER_0_init>:
  .config = &I2C_MASTER_0_config,
  .runtime = &I2C_MASTER_0_runtime,
};

void I2C_MASTER_0_init(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C0_CH1, &I2C_MASTER_0_channel_config);
 8008174:	4813      	ldr	r0, [pc, #76]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 8008176:	4914      	ldr	r1, [pc, #80]	; (80081c8 <I2C_MASTER_0_init+0x58>)
 8008178:	f7ff ffbe 	bl	80080f8 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX0, 1);
 800817c:	4811      	ldr	r0, [pc, #68]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 800817e:	2100      	movs	r1, #0
 8008180:	2201      	movs	r2, #1
 8008182:	f7ff ff87 	bl	8008094 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C0_CH1, XMC_USIC_CH_INPUT_DX1, 0);
 8008186:	480f      	ldr	r0, [pc, #60]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 8008188:	2101      	movs	r1, #1
 800818a:	2200      	movs	r2, #0
 800818c:	f7ff ff82 	bl	8008094 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C0_CH1,
 8008190:	480c      	ldr	r0, [pc, #48]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 8008192:	2110      	movs	r1, #16
 8008194:	2204      	movs	r2, #4
 8008196:	2301      	movs	r3, #1
 8008198:	f7fc fd1a 	bl	8004bd0 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C0_CH1,
 800819c:	4809      	ldr	r0, [pc, #36]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 800819e:	2100      	movs	r1, #0
 80081a0:	2204      	movs	r2, #4
 80081a2:	230f      	movs	r3, #15
 80081a4:	f7fc fd3c 	bl	8004c20 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C0_CH1);
 80081a8:	4806      	ldr	r0, [pc, #24]	; (80081c4 <I2C_MASTER_0_init+0x54>)
 80081aa:	f7ff ffb3 	bl	8008114 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)5, &I2C_MASTER_0_sda_pin_config);
 80081ae:	4807      	ldr	r0, [pc, #28]	; (80081cc <I2C_MASTER_0_init+0x5c>)
 80081b0:	2105      	movs	r1, #5
 80081b2:	4a07      	ldr	r2, [pc, #28]	; (80081d0 <I2C_MASTER_0_init+0x60>)
 80081b4:	f7f9 feae 	bl	8001f14 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT2_BASE, (uint8_t)4, &I2C_MASTER_0_scl_pin_config);
 80081b8:	4804      	ldr	r0, [pc, #16]	; (80081cc <I2C_MASTER_0_init+0x5c>)
 80081ba:	2104      	movs	r1, #4
 80081bc:	4a05      	ldr	r2, [pc, #20]	; (80081d4 <I2C_MASTER_0_init+0x64>)
 80081be:	f7f9 fea9 	bl	8001f14 <XMC_GPIO_Init>
}
 80081c2:	bd80      	pop	{r7, pc}
 80081c4:	40030200 	.word	0x40030200
 80081c8:	080131a4 	.word	0x080131a4
 80081cc:	48028200 	.word	0x48028200
 80081d0:	0801318c 	.word	0x0801318c
 80081d4:	08013198 	.word	0x08013198

080081d8 <I2C_MASTER_1_disable_io>:
  .baudrate = (uint32_t)(400000U),
  .address  = 0
};

static void I2C_MASTER_1_disable_io(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, XMC_GPIO_MODE_INPUT_TRISTATE);
 80081dc:	4805      	ldr	r0, [pc, #20]	; (80081f4 <I2C_MASTER_1_disable_io+0x1c>)
 80081de:	2105      	movs	r1, #5
 80081e0:	2200      	movs	r2, #0
 80081e2:	f7fb ff7b 	bl	80040dc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, XMC_GPIO_MODE_INPUT_TRISTATE);
 80081e6:	4803      	ldr	r0, [pc, #12]	; (80081f4 <I2C_MASTER_1_disable_io+0x1c>)
 80081e8:	2106      	movs	r1, #6
 80081ea:	2200      	movs	r2, #0
 80081ec:	f7fb ff76 	bl	80040dc <XMC_GPIO_SetMode>
}
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	48028300 	.word	0x48028300

080081f8 <I2C_MASTER_1_enable_io>:

static void I2C_MASTER_1_enable_io(void)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	af00      	add	r7, sp, #0
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, I2C_MASTER_1_sda_pin_config.mode);
 80081fc:	23c8      	movs	r3, #200	; 0xc8
 80081fe:	4806      	ldr	r0, [pc, #24]	; (8008218 <I2C_MASTER_1_enable_io+0x20>)
 8008200:	2105      	movs	r1, #5
 8008202:	461a      	mov	r2, r3
 8008204:	f7fb ff6a 	bl	80040dc <XMC_GPIO_SetMode>
  XMC_GPIO_SetMode((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, I2C_MASTER_1_scl_pin_config.mode);
 8008208:	23c8      	movs	r3, #200	; 0xc8
 800820a:	4803      	ldr	r0, [pc, #12]	; (8008218 <I2C_MASTER_1_enable_io+0x20>)
 800820c:	2106      	movs	r1, #6
 800820e:	461a      	mov	r2, r3
 8008210:	f7fb ff64 	bl	80040dc <XMC_GPIO_SetMode>
}
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	48028300 	.word	0x48028300

0800821c <I2C_MASTER_1_init>:
  .config = &I2C_MASTER_1_config,
  .runtime = &I2C_MASTER_1_runtime,
};

void I2C_MASTER_1_init(void)
{
 800821c:	b580      	push	{r7, lr}
 800821e:	af00      	add	r7, sp, #0
 
  XMC_I2C_CH_Init(XMC_I2C2_CH1, &I2C_MASTER_1_channel_config);
 8008220:	4813      	ldr	r0, [pc, #76]	; (8008270 <I2C_MASTER_1_init+0x54>)
 8008222:	4914      	ldr	r1, [pc, #80]	; (8008274 <I2C_MASTER_1_init+0x58>)
 8008224:	f7ff ff68 	bl	80080f8 <XMC_I2C_CH_Init>

  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX0, 0);
 8008228:	4811      	ldr	r0, [pc, #68]	; (8008270 <I2C_MASTER_1_init+0x54>)
 800822a:	2100      	movs	r1, #0
 800822c:	2200      	movs	r2, #0
 800822e:	f7ff ff31 	bl	8008094 <XMC_USIC_CH_SetInputSource>
  XMC_USIC_CH_SetInputSource(XMC_I2C2_CH1, XMC_USIC_CH_INPUT_DX1, 1);
 8008232:	480f      	ldr	r0, [pc, #60]	; (8008270 <I2C_MASTER_1_init+0x54>)
 8008234:	2101      	movs	r1, #1
 8008236:	2201      	movs	r2, #1
 8008238:	f7ff ff2c 	bl	8008094 <XMC_USIC_CH_SetInputSource>

  /* configure i2c tx fifo */
  XMC_USIC_CH_TXFIFO_Configure(XMC_I2C2_CH1,
 800823c:	480c      	ldr	r0, [pc, #48]	; (8008270 <I2C_MASTER_1_init+0x54>)
 800823e:	2110      	movs	r1, #16
 8008240:	2204      	movs	r2, #4
 8008242:	2301      	movs	r3, #1
 8008244:	f7fc fcc4 	bl	8004bd0 <XMC_USIC_CH_TXFIFO_Configure>
                               16,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                               (uint32_t)1);
  /* configure i2c rx fifo */
  XMC_USIC_CH_RXFIFO_Configure(XMC_I2C2_CH1,
 8008248:	4809      	ldr	r0, [pc, #36]	; (8008270 <I2C_MASTER_1_init+0x54>)
 800824a:	2100      	movs	r1, #0
 800824c:	2204      	movs	r2, #4
 800824e:	230f      	movs	r3, #15
 8008250:	f7fc fce6 	bl	8004c20 <XMC_USIC_CH_RXFIFO_Configure>
                               0,
                               XMC_USIC_CH_FIFO_SIZE_16WORDS,
                                (uint32_t)(15));
  XMC_I2C_CH_Start(XMC_I2C2_CH1);
 8008254:	4806      	ldr	r0, [pc, #24]	; (8008270 <I2C_MASTER_1_init+0x54>)
 8008256:	f7ff ff5d 	bl	8008114 <XMC_I2C_CH_Start>

  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)5, &I2C_MASTER_1_sda_pin_config);
 800825a:	4807      	ldr	r0, [pc, #28]	; (8008278 <I2C_MASTER_1_init+0x5c>)
 800825c:	2105      	movs	r1, #5
 800825e:	4a07      	ldr	r2, [pc, #28]	; (800827c <I2C_MASTER_1_init+0x60>)
 8008260:	f7f9 fe58 	bl	8001f14 <XMC_GPIO_Init>
  XMC_GPIO_Init((XMC_GPIO_PORT_t *)PORT3_BASE, (uint8_t)6, &I2C_MASTER_1_scl_pin_config);
 8008264:	4804      	ldr	r0, [pc, #16]	; (8008278 <I2C_MASTER_1_init+0x5c>)
 8008266:	2106      	movs	r1, #6
 8008268:	4a05      	ldr	r2, [pc, #20]	; (8008280 <I2C_MASTER_1_init+0x64>)
 800826a:	f7f9 fe53 	bl	8001f14 <XMC_GPIO_Init>
}
 800826e:	bd80      	pop	{r7, pc}
 8008270:	48024200 	.word	0x48024200
 8008274:	080131f0 	.word	0x080131f0
 8008278:	48028300 	.word	0x48028300
 800827c:	080131d8 	.word	0x080131d8
 8008280:	080131e4 	.word	0x080131e4

08008284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008284:	b480      	push	{r7}
 8008286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008288:	4b04      	ldr	r3, [pc, #16]	; (800829c <__NVIC_GetPriorityGrouping+0x18>)
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008290:	0a1b      	lsrs	r3, r3, #8
}
 8008292:	4618      	mov	r0, r3
 8008294:	46bd      	mov	sp, r7
 8008296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829a:	4770      	bx	lr
 800829c:	e000ed00 	.word	0xe000ed00

080082a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	4603      	mov	r3, r0
 80082a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	db0b      	blt.n	80082ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80082b2:	4908      	ldr	r1, [pc, #32]	; (80082d4 <__NVIC_EnableIRQ+0x34>)
 80082b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082b8:	095b      	lsrs	r3, r3, #5
 80082ba:	79fa      	ldrb	r2, [r7, #7]
 80082bc:	f002 021f 	and.w	r2, r2, #31
 80082c0:	2001      	movs	r0, #1
 80082c2:	fa00 f202 	lsl.w	r2, r0, r2
 80082c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr
 80082d4:	e000e100 	.word	0xe000e100

080082d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	4603      	mov	r3, r0
 80082e0:	6039      	str	r1, [r7, #0]
 80082e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80082e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	db0a      	blt.n	8008302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80082ec:	490d      	ldr	r1, [pc, #52]	; (8008324 <__NVIC_SetPriority+0x4c>)
 80082ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80082f2:	683a      	ldr	r2, [r7, #0]
 80082f4:	b2d2      	uxtb	r2, r2
 80082f6:	0092      	lsls	r2, r2, #2
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	440b      	add	r3, r1
 80082fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 8008300:	e00a      	b.n	8008318 <__NVIC_SetPriority+0x40>
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008302:	4909      	ldr	r1, [pc, #36]	; (8008328 <__NVIC_SetPriority+0x50>)
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	f003 030f 	and.w	r3, r3, #15
 800830a:	3b04      	subs	r3, #4
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	b2d2      	uxtb	r2, r2
 8008310:	0092      	lsls	r2, r2, #2
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	440b      	add	r3, r1
 8008316:	761a      	strb	r2, [r3, #24]
  }
}
 8008318:	370c      	adds	r7, #12
 800831a:	46bd      	mov	sp, r7
 800831c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008320:	4770      	bx	lr
 8008322:	bf00      	nop
 8008324:	e000e100 	.word	0xe000e100
 8008328:	e000ed00 	.word	0xe000ed00

0800832c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800832c:	b480      	push	{r7}
 800832e:	b089      	sub	sp, #36	; 0x24
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	f1c3 0307 	rsb	r3, r3, #7
 8008346:	2b06      	cmp	r3, #6
 8008348:	bf28      	it	cs
 800834a:	2306      	movcs	r3, #6
 800834c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	3306      	adds	r3, #6
 8008352:	2b06      	cmp	r3, #6
 8008354:	d902      	bls.n	800835c <NVIC_EncodePriority+0x30>
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	3b01      	subs	r3, #1
 800835a:	e000      	b.n	800835e <NVIC_EncodePriority+0x32>
 800835c:	2300      	movs	r3, #0
 800835e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008360:	69bb      	ldr	r3, [r7, #24]
 8008362:	2201      	movs	r2, #1
 8008364:	fa02 f303 	lsl.w	r3, r2, r3
 8008368:	1e5a      	subs	r2, r3, #1
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	401a      	ands	r2, r3
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	2101      	movs	r1, #1
 8008376:	fa01 f303 	lsl.w	r3, r1, r3
 800837a:	1e59      	subs	r1, r3, #1
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	400b      	ands	r3, r1
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8008380:	4313      	orrs	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
         );
}
 8008382:	4618      	mov	r0, r3
 8008384:	3724      	adds	r7, #36	; 0x24
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <GLOBAL_DMA_Init>:
  return version;
}

/* GLOBAL_DMA initialization function */
GLOBAL_DMA_STATUS_t GLOBAL_DMA_Init(GLOBAL_DMA_t *const obj)
{
 8008390:	b590      	push	{r4, r7, lr}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DMA_GLOBAL_Init: NULL DMA_GLOBAL_t object", (obj != NULL));

  if (obj->initialized == false)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	7a1b      	ldrb	r3, [r3, #8]
 800839c:	f083 0301 	eor.w	r3, r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d024      	beq.n	80083f0 <GLOBAL_DMA_Init+0x60>
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fb fa0c 	bl	80037c8 <XMC_DMA_Init>

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	7a5c      	ldrb	r4, [r3, #9]
 80083b4:	f7ff ff66 	bl	8008284 <__NVIC_GetPriorityGrouping>
 80083b8:	4601      	mov	r1, r0
                                                        obj->config->priority,
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	781b      	ldrb	r3, [r3, #0]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80083c0:	461a      	mov	r2, r3
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	785b      	ldrb	r3, [r3, #1]
  {
    /* Enable DMA module */
    XMC_DMA_Init(obj->dma);

    /* Enable DMA event handling */
    NVIC_SetPriority(obj->irq_node, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),
 80083c8:	4608      	mov	r0, r1
 80083ca:	4611      	mov	r1, r2
 80083cc:	461a      	mov	r2, r3
 80083ce:	f7ff ffad 	bl	800832c <NVIC_EncodePriority>
 80083d2:	4602      	mov	r2, r0
 80083d4:	b263      	sxtb	r3, r4
 80083d6:	4618      	mov	r0, r3
 80083d8:	4611      	mov	r1, r2
 80083da:	f7ff ff7d 	bl	80082d8 <__NVIC_SetPriority>
                                                        obj->config->priority,
                                                        obj->config->sub_priority));
    NVIC_EnableIRQ(obj->irq_node);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	7a5b      	ldrb	r3, [r3, #9]
 80083e2:	b25b      	sxtb	r3, r3
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7ff ff5b 	bl	80082a0 <__NVIC_EnableIRQ>
    obj->initialized = true;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	721a      	strb	r2, [r3, #8]
  }

  return GLOBAL_DMA_STATUS_SUCCESS;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd90      	pop	{r4, r7, pc}
 80083fa:	bf00      	nop

080083fc <GPDMA0_0_IRQHandler>:
  .initialized = (bool)0U, /* Is DMA initialized yet? */
  .irq_node = (IRQn_Type)105U /* Allotted DMA IRQ node */
};

void GPDMA0_0_IRQHandler(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA0);
 8008400:	4801      	ldr	r0, [pc, #4]	; (8008408 <GPDMA0_0_IRQHandler+0xc>)
 8008402:	f7fb fd5b 	bl	8003ebc <XMC_DMA_IRQHandler>
}
 8008406:	bd80      	pop	{r7, pc}
 8008408:	50014000 	.word	0x50014000

0800840c <GPDMA1_0_IRQHandler>:

#ifdef XMC_DMA1
void GPDMA1_0_IRQHandler(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	af00      	add	r7, sp, #0
  XMC_DMA_IRQHandler(XMC_DMA1);
 8008410:	4801      	ldr	r0, [pc, #4]	; (8008418 <GPDMA1_0_IRQHandler+0xc>)
 8008412:	f7fb fd53 	bl	8003ebc <XMC_DMA_IRQHandler>
}
 8008416:	bd80      	pop	{r7, pc}
 8008418:	50018000 	.word	0x50018000

0800841c <XMC_CCU8_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU8_Init()<BR>  XMC_CCU8_EnableClock()<BR>  XMC_CCU8_DisableClock()<BR>  XMC_CCU8_StartPrescaler()<BR>
 *  XMC_CCU8_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU8_StartPrescaler(XMC_CCU8_MODULE_t *const module)
{
 800841c:	b480      	push	{r7}
 800841e:	b083      	sub	sp, #12
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU8_StartPrescaler:Invalid Module Pointer", XMC_CCU8_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU8_GIDLC_SPRB_Msk;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	f44f 7280 	mov.w	r2, #256	; 0x100
 800842a:	60da      	str	r2, [r3, #12]
}
 800842c:	370c      	adds	r7, #12
 800842e:	46bd      	mov	sp, r7
 8008430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008434:	4770      	bx	lr
 8008436:	bf00      	nop

08008438 <GLOBAL_CCU8_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU8_STATUS_t GLOBAL_CCU8_Init(GLOBAL_CCU8_t* handle)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b082      	sub	sp, #8
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU8_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	7b5b      	ldrb	r3, [r3, #13]
 8008444:	f083 0301 	eor.w	r3, r3, #1
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00f      	beq.n	800846e <GLOBAL_CCU8_Init+0x36>
  {
    /* Enable CCU8 module */
    XMC_CCU8_Init(handle->module_ptr,handle->mcs_action);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	7b1b      	ldrb	r3, [r3, #12]
 8008456:	4610      	mov	r0, r2
 8008458:	4619      	mov	r1, r3
 800845a:	f7fb f8c5 	bl	80035e8 <XMC_CCU8_Init>
    /* Start the prescaler */
    XMC_CCU8_StartPrescaler(handle->module_ptr);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	689b      	ldr	r3, [r3, #8]
 8008462:	4618      	mov	r0, r3
 8008464:	f7ff ffda 	bl	800841c <XMC_CCU8_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2201      	movs	r2, #1
 800846c:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU8_STATUS_SUCCESS);
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <XMC_CCU4_StartPrescaler>:
 * \par<b>Related APIs:</b><br>
 * XMC_CCU4_Init()<BR> XMC_CCU4_EnableClock()<BR> XMC_CCU4_DisableClock()<BR> XMC_CCU4_StartPrescaler()<BR>
 * XMC_CCU4_StopPrescaler().
 */
__STATIC_INLINE void XMC_CCU4_StartPrescaler(XMC_CCU4_MODULE_t *const module)
{
 8008478:	b480      	push	{r7}
 800847a:	b083      	sub	sp, #12
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("XMC_CCU4_StartPrescaler:Invalid Module Pointer", XMC_CCU4_IsValidModule(module));
  module->GIDLC = (uint32_t) CCU4_GIDLC_SPRB_Msk;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008486:	60da      	str	r2, [r3, #12]
}
 8008488:	370c      	adds	r7, #12
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr
 8008492:	bf00      	nop

08008494 <GLOBAL_CCU4_Init>:
  return version;
}

/* Initializes the slice with the generated configuration */
GLOBAL_CCU4_STATUS_t GLOBAL_CCU4_Init(GLOBAL_CCU4_t* handle)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("GLOBAL_CCU4_Init:NULL handler", (NULL != handle));

  if (false == handle->is_initialized)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	7b5b      	ldrb	r3, [r3, #13]
 80084a0:	f083 0301 	eor.w	r3, r3, #1
 80084a4:	b2db      	uxtb	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00f      	beq.n	80084ca <GLOBAL_CCU4_Init+0x36>
  {
    /* Enable CCU4 module */
    XMC_CCU4_Init(handle->module_ptr,handle->mcs_action);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	7b1b      	ldrb	r3, [r3, #12]
 80084b2:	4610      	mov	r0, r2
 80084b4:	4619      	mov	r1, r3
 80084b6:	f7fa ffc3 	bl	8003440 <XMC_CCU4_Init>
    /* Start the prescaler */
    XMC_CCU4_StartPrescaler(handle->module_ptr);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	4618      	mov	r0, r3
 80084c0:	f7ff ffda 	bl	8008478 <XMC_CCU4_StartPrescaler>
    /* Restricts multiple initializations */
    handle->is_initialized = true;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2201      	movs	r2, #1
 80084c8:	735a      	strb	r2, [r3, #13]
  }

  return (GLOBAL_CCU4_STATUS_SUCCESS);
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3708      	adds	r7, #8
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}

080084d4 <GLOBAL_CAN_Init>:
  return (version);
}

/*  Function to initialize the CAN Peripheral module clock.  */
GLOBAL_CAN_STATUS_t GLOBAL_CAN_Init(GLOBAL_CAN_t *handle)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  GLOBAL_CAN_STATUS_t status = GLOBAL_CAN_STATUS_SUCCESS;
 80084dc:	2300      	movs	r3, #0
 80084de:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("GLOBAL_CAN_Init: handle null", handle != NULL);

  if (handle->init_status != true)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	7a5b      	ldrb	r3, [r3, #9]
 80084e4:	f083 0301 	eor.w	r3, r3, #1
 80084e8:	b2db      	uxtb	r3, r3
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00f      	beq.n	800850e <GLOBAL_CAN_Init+0x3a>
  {
#if defined(MULTICAN_PLUS)
    XMC_CAN_InitEx(handle->canglobal_ptr, (XMC_CAN_CANCLKSRC_t)handle->can_clock_src, handle->can_frequency);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6859      	ldr	r1, [r3, #4]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	7a1a      	ldrb	r2, [r3, #8]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4608      	mov	r0, r1
 80084fc:	4611      	mov	r1, r2
 80084fe:	461a      	mov	r2, r3
 8008500:	f7fa fcf2 	bl	8002ee8 <XMC_CAN_InitEx>
#else
    XMC_CAN_InitEx(handle->canglobal_ptr, XMC_CAN_CANCLKSRC_FPERI, handle->can_frequency);
#endif
    handle->init_status = true;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	725a      	strb	r2, [r3, #9]
    status = GLOBAL_CAN_STATUS_SUCCESS;
 800850a:	2300      	movs	r3, #0
 800850c:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800850e:	7bfb      	ldrb	r3, [r7, #15]

}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <FATFS_Init>:

/*
 * API to initialize the FATFS APP
 */
FATFS_STATUS_t FATFS_Init(FATFS_t *const handle)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b084      	sub	sp, #16
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
 8008520:	2300      	movs	r3, #0
 8008522:	73fb      	strb	r3, [r7, #15]
  if (handle->initialized == false)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	791b      	ldrb	r3, [r3, #4]
 8008528:	f083 0301 	eor.w	r3, r3, #1
 800852c:	b2db      	uxtb	r3, r3
 800852e:	2b00      	cmp	r3, #0
 8008530:	d022      	beq.n	8008578 <FATFS_Init+0x60>
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008532:	2300      	movs	r3, #0
 8008534:	60bb      	str	r3, [r7, #8]
 8008536:	e00e      	b.n	8008556 <FATFS_Init+0x3e>
  {
    status |= (FATFS_STATUS_t)SDMMC_BLOCK_Init(sdmmc_block[i]);
 8008538:	4a13      	ldr	r2, [pc, #76]	; (8008588 <FATFS_Init+0x70>)
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008540:	4618      	mov	r0, r3
 8008542:	f7fe fff7 	bl	8007534 <SDMMC_BLOCK_Init>
 8008546:	4603      	mov	r3, r0
 8008548:	461a      	mov	r2, r3
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	4313      	orrs	r3, r2
 800854e:	73fb      	strb	r3, [r7, #15]
{
  XMC_ASSERT("FATFS_Init:HandlePtr NULL", (handle != NULL));
  FATFS_STATUS_t status = FATFS_STATUS_SUCCESS;
  if (handle->initialized == false)
  {
  for (int i = 0; i<FF_VOLUMES; i++)
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	3301      	adds	r3, #1
 8008554:	60bb      	str	r3, [r7, #8]
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d0ed      	beq.n	8008538 <FATFS_Init+0x20>
#if (FATFS_STANDARDLIBRARY == 1U)
  SLTHA_Init();
#endif

#if (FF_FS_NORTC == 0U)
  if (status == FATFS_STATUS_SUCCESS)
 800855c:	7bfb      	ldrb	r3, [r7, #15]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d106      	bne.n	8008570 <FATFS_Init+0x58>
  {
    status = (FATFS_STATUS_t)RTC_Init(handle->rtc_handle);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4618      	mov	r0, r3
 8008568:	f7ff f832 	bl	80075d0 <RTC_Init>
 800856c:	4603      	mov	r3, r0
 800856e:	73fb      	strb	r3, [r7, #15]
  }
#endif
    handle->initialized = true;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	2201      	movs	r2, #1
 8008574:	711a      	strb	r2, [r3, #4]
 8008576:	e001      	b.n	800857c <FATFS_Init+0x64>
  }
  else
  {
    status = FATFS_STATUS_FAILURE;
 8008578:	2301      	movs	r3, #1
 800857a:	73fb      	strb	r3, [r7, #15]
  }
  return (status);
 800857c:	7bfb      	ldrb	r3, [r7, #15]
}
 800857e:	4618      	mov	r0, r3
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	08013224 	.word	0x08013224

0800858c <DIGITAL_IO_Init>:
* @param handler Pointer pointing to APP data structure.
* @return DIGITAL_IO_STATUS_t DIGITAL_IO APP status.
*/

DIGITAL_IO_STATUS_t DIGITAL_IO_Init(const DIGITAL_IO_t *const handler)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b082      	sub	sp, #8
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_Init: handler null pointer", handler != NULL);

  /* Initializes input / output characteristics */
  XMC_GPIO_Init(handler->gpio_port, handler->gpio_pin, &handler->gpio_config);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6819      	ldr	r1, [r3, #0]
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	7c1a      	ldrb	r2, [r3, #16]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	3304      	adds	r3, #4
 80085a0:	4608      	mov	r0, r1
 80085a2:	4611      	mov	r1, r2
 80085a4:	461a      	mov	r2, r3
 80085a6:	f7f9 fcb5 	bl	8001f14 <XMC_GPIO_Init>

  /*Configure hardware port control*/
  XMC_GPIO_SetHardwareControl(handler->gpio_port, handler->gpio_pin, handler->hwctrl);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6819      	ldr	r1, [r3, #0]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	7c1a      	ldrb	r2, [r3, #16]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	7c5b      	ldrb	r3, [r3, #17]
 80085b6:	4608      	mov	r0, r1
 80085b8:	4611      	mov	r1, r2
 80085ba:	461a      	mov	r2, r3
 80085bc:	f7fb fdce 	bl	800415c <XMC_GPIO_SetHardwareControl>

  return (DIGITAL_IO_STATUS_OK);
 80085c0:	2300      	movs	r3, #0
}
 80085c2:	4618      	mov	r0, r3
 80085c4:	3708      	adds	r7, #8
 80085c6:	46bd      	mov	sp, r7
 80085c8:	bd80      	pop	{r7, pc}
 80085ca:	bf00      	nop

080085cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f003 0307 	and.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80085dc:	4b0c      	ldr	r3, [pc, #48]	; (8008610 <__NVIC_SetPriorityGrouping+0x44>)
 80085de:	68db      	ldr	r3, [r3, #12]
 80085e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80085e2:	68ba      	ldr	r2, [r7, #8]
 80085e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80085e8:	4013      	ands	r3, r2
 80085ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	021a      	lsls	r2, r3, #8
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	4313      	orrs	r3, r2
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 80085f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80085f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085fc:	60bb      	str	r3, [r7, #8]
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
  SCB->AIRCR =  reg_value;
 80085fe:	4a04      	ldr	r2, [pc, #16]	; (8008610 <__NVIC_SetPriorityGrouping+0x44>)
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	60d3      	str	r3, [r2, #12]
}
 8008604:	3714      	adds	r7, #20
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr
 800860e:	bf00      	nop
 8008610:	e000ed00 	.word	0xe000ed00

08008614 <SystemCoreSetup>:
  .initialized = false
};	


void SystemCoreSetup(void)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b082      	sub	sp, #8
 8008618:	af00      	add	r7, sp, #0
  uint32_t temp;

  NVIC_SetPriorityGrouping(1U);
 800861a:	2001      	movs	r0, #1
 800861c:	f7ff ffd6 	bl	80085cc <__NVIC_SetPriorityGrouping>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008620:	b672      	cpsid	i
	
  /* relocate vector table */
  __disable_irq();

#if !defined(__TASKING__)
  SCB->VTOR = (uint32_t)(&__Vectors);
 8008622:	4b21      	ldr	r3, [pc, #132]	; (80086a8 <SystemCoreSetup+0x94>)
 8008624:	4a21      	ldr	r2, [pc, #132]	; (80086ac <SystemCoreSetup+0x98>)
 8008626:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008628:	f3bf 8f4f 	dsb	sy
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800862c:	b662      	cpsie	i

  __DSB();
  __enable_irq();
	
#if ((__FPU_PRESENT == 1) && (__FPU_USED == 1))
  SCB->CPACR |= ((3UL << 10*2) |                 /* set CP10 Full Access */
 800862e:	4a1e      	ldr	r2, [pc, #120]	; (80086a8 <SystemCoreSetup+0x94>)
 8008630:	4b1d      	ldr	r3, [pc, #116]	; (80086a8 <SystemCoreSetup+0x94>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800863a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
				 (3UL << 11*2)  );               /* set CP11 Full Access */
#endif
  /* Set flash wait states */
  temp = FLASH0->FCON;
 800863e:	4b1c      	ldr	r3, [pc, #112]	; (80086b0 <SystemCoreSetup+0x9c>)
 8008640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008644:	3314      	adds	r3, #20
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	607b      	str	r3, [r7, #4]
  temp &= ~FLASH_FCON_WSPFLASH_Msk;
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f023 030f 	bic.w	r3, r3, #15
 8008650:	607b      	str	r3, [r7, #4]
  temp |= PMU_FLASH_WS;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f043 0304 	orr.w	r3, r3, #4
 8008658:	607b      	str	r3, [r7, #4]
  FLASH0->FCON = temp;
 800865a:	4b15      	ldr	r3, [pc, #84]	; (80086b0 <SystemCoreSetup+0x9c>)
 800865c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008660:	3314      	adds	r3, #20
 8008662:	687a      	ldr	r2, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]


  /* Disable divide by zero trap */
  SCB->CCR &= ~SCB_CCR_DIV_0_TRP_Msk; 
 8008666:	4a10      	ldr	r2, [pc, #64]	; (80086a8 <SystemCoreSetup+0x94>)
 8008668:	4b0f      	ldr	r3, [pc, #60]	; (80086a8 <SystemCoreSetup+0x94>)
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	f023 0310 	bic.w	r3, r3, #16
 8008670:	6153      	str	r3, [r2, #20]

  /* Disable unaligned memory access trap */
  SCB->CCR &= ~SCB_CCR_UNALIGN_TRP_Msk; 
 8008672:	4a0d      	ldr	r2, [pc, #52]	; (80086a8 <SystemCoreSetup+0x94>)
 8008674:	4b0c      	ldr	r3, [pc, #48]	; (80086a8 <SystemCoreSetup+0x94>)
 8008676:	695b      	ldr	r3, [r3, #20]
 8008678:	f023 0308 	bic.w	r3, r3, #8
 800867c:	6153      	str	r3, [r2, #20]

  /* Disable memory management fault */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800867e:	4a0a      	ldr	r2, [pc, #40]	; (80086a8 <SystemCoreSetup+0x94>)
 8008680:	4b09      	ldr	r3, [pc, #36]	; (80086a8 <SystemCoreSetup+0x94>)
 8008682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008688:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable bus fault */
  SCB->SHCSR &= ~SCB_SHCSR_BUSFAULTENA_Msk;
 800868a:	4a07      	ldr	r2, [pc, #28]	; (80086a8 <SystemCoreSetup+0x94>)
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <SystemCoreSetup+0x94>)
 800868e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008690:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008694:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable usage fault */
  SCB->SHCSR &= ~SCB_SHCSR_USGFAULTENA_Msk;
 8008696:	4a04      	ldr	r2, [pc, #16]	; (80086a8 <SystemCoreSetup+0x94>)
 8008698:	4b03      	ldr	r3, [pc, #12]	; (80086a8 <SystemCoreSetup+0x94>)
 800869a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800869c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086a0:	6253      	str	r3, [r2, #36]	; 0x24
}
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed00 	.word	0xe000ed00
 80086ac:	08000000 	.word	0x08000000
 80086b0:	58001000 	.word	0x58001000

080086b4 <CLOCK_XMC4_Init>:

/*
 * API to initialize the CLOCK_XMC4 APP TRAP events
 */
CLOCK_XMC4_STATUS_t CLOCK_XMC4_Init(CLOCK_XMC4_t *handle)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b085      	sub	sp, #20
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  CLOCK_XMC4_STATUS_t status = CLOCK_XMC4_STATUS_SUCCESS;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  XMC_ASSERT("CLOCK_XMC4 APP handle function pointer uninitialized", (handle != NULL));

  handle->init_status = true;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2201      	movs	r2, #1
 80086c4:	701a      	strb	r2, [r3, #0]

  return (status);
 80086c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086c8:	4618      	mov	r0, r3
 80086ca:	3714      	adds	r7, #20
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <OSCHP_GetFrequency>:

#ifdef CLOCK_XMC4_OSCHP_ENABLED
/*  API to retrieve high precision external oscillator frequency */
uint32_t OSCHP_GetFrequency(void)
{
 80086d4:	b480      	push	{r7}
 80086d6:	af00      	add	r7, sp, #0
  return (CLOCK_XMC4_OSCHP_FREQUENCY);
 80086d8:	4b02      	ldr	r3, [pc, #8]	; (80086e4 <OSCHP_GetFrequency+0x10>)
}
 80086da:	4618      	mov	r0, r3
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr
 80086e4:	00b71b00 	.word	0x00b71b00

080086e8 <SystemCoreClockSetup>:
* @note   -
* @param  None
* @retval None
*/
void SystemCoreClockSetup(void)
{
 80086e8:	b5b0      	push	{r4, r5, r7, lr}
 80086ea:	b086      	sub	sp, #24
 80086ec:	af00      	add	r7, sp, #0
  /* Local data structure for initializing the clock functional block */
  const XMC_SCU_CLOCK_CONFIG_t CLOCK_XMC4_0_CONFIG =
 80086ee:	4b13      	ldr	r3, [pc, #76]	; (800873c <SystemCoreClockSetup+0x54>)
 80086f0:	1d3c      	adds	r4, r7, #4
 80086f2:	461d      	mov	r5, r3
 80086f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80086f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	6023      	str	r3, [r4, #0]
#endif
    /* Peripheral Clock Divider Value */
    .fperipheral_clkdiv = 1U
  };
  /* Initialize the SCU clock */
  XMC_SCU_CLOCK_Init(&CLOCK_XMC4_0_CONFIG);
 80086fc:	1d3b      	adds	r3, r7, #4
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 fd9c 	bl	800223c <XMC_SCU_CLOCK_Init>
  /* RTC source clock */
  XMC_SCU_HIB_SetRtcClockSource(XMC_SCU_HIB_RTCCLKSRC_OSI);
 8008704:	2000      	movs	r0, #0
 8008706:	f7f9 fed3 	bl	80024b0 <XMC_SCU_HIB_SetRtcClockSource>
  
#ifdef CLOCK_XMC4_USBCLK_ENABLED  
  /* USB/SDMMC source clock */
  XMC_SCU_CLOCK_SetUsbClockSource(XMC_SCU_CLOCK_USBCLKSRC_USBPLL);
 800870a:	2000      	movs	r0, #0
 800870c:	f7f9 fe88 	bl	8002420 <XMC_SCU_CLOCK_SetUsbClockSource>
  /* USB/SDMMC divider setting */
  XMC_SCU_CLOCK_SetUsbClockDivider(4U);
 8008710:	2004      	movs	r0, #4
 8008712:	f7f9 ff59 	bl	80025c8 <XMC_SCU_CLOCK_SetUsbClockDivider>
#endif
  /* Start USB PLL */
  XMC_SCU_CLOCK_EnableUsbPll();
 8008716:	f7f9 ffe3 	bl	80026e0 <XMC_SCU_CLOCK_EnableUsbPll>
  XMC_SCU_CLOCK_StartUsbPll(1U, 32U);
 800871a:	2001      	movs	r0, #1
 800871c:	2120      	movs	r1, #32
 800871e:	f7f9 ffef 	bl	8002700 <XMC_SCU_CLOCK_StartUsbPll>

#ifdef CLOCK_XMC4_WDTCLK_ENABLED    
  /* WDT source clock */
  XMC_SCU_CLOCK_SetWdtClockSource(XMC_SCU_CLOCK_WDTCLKSRC_OFI);
 8008722:	2000      	movs	r0, #0
 8008724:	f7f9 fe90 	bl	8002448 <XMC_SCU_CLOCK_SetWdtClockSource>
  /* WDT divider setting */
  XMC_SCU_CLOCK_SetWdtClockDivider(1U);
 8008728:	2001      	movs	r0, #1
 800872a:	f7f9 ff75 	bl	8002618 <XMC_SCU_CLOCK_SetWdtClockDivider>
#endif

#ifdef CLOCK_XMC4_EBUCLK_ENABLED 
  /* EBU divider setting */
  XMC_SCU_CLOCK_SetEbuClockDivider(1U);
 800872e:	2001      	movs	r0, #1
 8008730:	f7f9 ff5e 	bl	80025f0 <XMC_SCU_CLOCK_SetEbuClockDivider>
#endif

}
 8008734:	3718      	adds	r7, #24
 8008736:	46bd      	mov	sp, r7
 8008738:	bdb0      	pop	{r4, r5, r7, pc}
 800873a:	bf00      	nop
 800873c:	0801378c 	.word	0x0801378c

08008740 <XMC_CAN_NODE_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_NODE_SetEventNodePointer(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_POINTER_EVENT_t ptr_event,
    const uint32_t service_request)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	460b      	mov	r3, r1
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	72fb      	strb	r3, [r7, #11]
  can_node->NIPR = (uint32_t)((can_node->NIPR) & ~(uint32_t)(CAN_NODE_NIPR_Msk << (uint32_t)ptr_event)) | (service_request << (uint32_t)ptr_event);
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	7afb      	ldrb	r3, [r7, #11]
 8008754:	2107      	movs	r1, #7
 8008756:	fa01 f303 	lsl.w	r3, r1, r3
 800875a:	43db      	mvns	r3, r3
 800875c:	401a      	ands	r2, r3
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	6879      	ldr	r1, [r7, #4]
 8008762:	fa01 f303 	lsl.w	r3, r1, r3
 8008766:	431a      	orrs	r2, r3
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	609a      	str	r2, [r3, #8]
}
 800876c:	3714      	adds	r7, #20
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr
 8008776:	bf00      	nop

08008778 <XMC_CAN_NODE_SetReceiveInput>:
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f023 0207 	bic.w	r2, r3, #7
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
 800878c:	78fb      	ldrb	r3, [r7, #3]
 800878e:	f003 0307 	and.w	r3, r3, #7
 */

__STATIC_INLINE void XMC_CAN_NODE_SetReceiveInput(XMC_CAN_NODE_t *const can_node,
    const XMC_CAN_NODE_RECEIVE_INPUT_t input)
{
  can_node->NPCR = ((can_node->NPCR) & ~(uint32_t)(CAN_NODE_NPCR_RXSEL_Msk)) |
 8008792:	431a      	orrs	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	60da      	str	r2, [r3, #12]
                   (((uint32_t)input << CAN_NODE_NPCR_RXSEL_Pos) & (uint32_t)CAN_NODE_NPCR_RXSEL_Msk);
}
 8008798:	370c      	adds	r7, #12
 800879a:	46bd      	mov	sp, r7
 800879c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a0:	4770      	bx	lr
 80087a2:	bf00      	nop

080087a4 <XMC_CAN_NODE_EnableLoopBack>:
 *  NPCRx can be written only if bit NCRx.CCE is set.
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableLoopBack(XMC_CAN_NODE_t *const can_node)
{
 80087a4:	b480      	push	{r7}
 80087a6:	b083      	sub	sp, #12
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  can_node->NPCR |= (uint32_t)CAN_NODE_NPCR_LBM_Msk;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	68db      	ldr	r3, [r3, #12]
 80087b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	60da      	str	r2, [r3, #12]
}
 80087b8:	370c      	adds	r7, #12
 80087ba:	46bd      	mov	sp, r7
 80087bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c0:	4770      	bx	lr
 80087c2:	bf00      	nop

080087c4 <XMC_CAN_NODE_EnableConfigurationChange>:
 * XMC_CAN_NODE_DisableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_EnableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80087c4:	b480      	push	{r7}
 80087c6:	b083      	sub	sp, #12
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_CCE_Msk;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	601a      	str	r2, [r3, #0]
}
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e0:	4770      	bx	lr
 80087e2:	bf00      	nop

080087e4 <XMC_CAN_NODE_DisableConfigurationChange>:
 * XMC_CAN_NODE_EnableConfigurationChange()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_DisableConfigurationChange(XMC_CAN_NODE_t *const can_node)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CCE_Msk;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	601a      	str	r2, [r3, #0]
}
 80087f8:	370c      	adds	r7, #12
 80087fa:	46bd      	mov	sp, r7
 80087fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008800:	4770      	bx	lr
 8008802:	bf00      	nop

08008804 <XMC_CAN_NODE_SetInitBit>:
 * XMC_CAN_NODE_ResetInitBit()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_SetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008804:	b480      	push	{r7}
 8008806:	b083      	sub	sp, #12
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]
  can_node->NCR |= (uint32_t)CAN_NODE_NCR_INIT_Msk;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f043 0201 	orr.w	r2, r3, #1
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	601a      	str	r2, [r3, #0]
}
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr
 8008822:	bf00      	nop

08008824 <XMC_CAN_NODE_ResetInitBit>:
 * \par<b>Related API's:</b><br>
 * XMC_CAN_NODE_SetInitBit()
 *
 */
__STATIC_INLINE void XMC_CAN_NODE_ResetInitBit(XMC_CAN_NODE_t *const can_node)
{
 8008824:	b480      	push	{r7}
 8008826:	b083      	sub	sp, #12
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_INIT_Msk;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f023 0201 	bic.w	r2, r3, #1
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	601a      	str	r2, [r3, #0]
}
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop

08008844 <XMC_CAN_NODE_ReSetAnalyzerMode>:
 * XMC_CAN_NODE_SetAnalyzerMode()
 *
 */

__STATIC_INLINE void XMC_CAN_NODE_ReSetAnalyzerMode(XMC_CAN_NODE_t *const can_node)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  can_node->NCR &= ~(uint32_t)CAN_NODE_NCR_CALM_Msk;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	601a      	str	r2, [r3, #0]
}
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <XMC_CAN_MO_SetEventNodePointer>:
 */

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
 8008864:	b480      	push	{r7}
 8008866:	b085      	sub	sp, #20
 8008868:	af00      	add	r7, sp, #0
 800886a:	60f8      	str	r0, [r7, #12]
 800886c:	460b      	mov	r3, r1
 800886e:	607a      	str	r2, [r7, #4]
 8008870:	72fb      	strb	r3, [r7, #11]
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	6812      	ldr	r2, [r2, #0]
 800887a:	6891      	ldr	r1, [r2, #8]
 800887c:	7afa      	ldrb	r2, [r7, #11]
 800887e:	2007      	movs	r0, #7
 8008880:	fa00 f202 	lsl.w	r2, r0, r2
 8008884:	43d2      	mvns	r2, r2
 8008886:	4011      	ands	r1, r2
                              (service_request << (uint32_t)can_mo_ptr_int);
 8008888:	7afa      	ldrb	r2, [r7, #11]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	fa00 f202 	lsl.w	r2, r0, r2

__STATIC_INLINE void XMC_CAN_MO_SetEventNodePointer(const XMC_CAN_MO_t *const can_mo,
    const XMC_CAN_MO_POINTER_EVENT_t can_mo_ptr_int,
    const uint32_t service_request)
{
  can_mo->can_mo_ptr->MOIPR = ((can_mo->can_mo_ptr->MOIPR ) & ~(uint32_t)((uint32_t)CAN_MO_MOIPR_Msk << (uint32_t)can_mo_ptr_int)) |
 8008890:	430a      	orrs	r2, r1
 8008892:	609a      	str	r2, [r3, #8]
                              (service_request << (uint32_t)can_mo_ptr_int);
}
 8008894:	3714      	adds	r7, #20
 8008896:	46bd      	mov	sp, r7
 8008898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889c:	4770      	bx	lr
 800889e:	bf00      	nop

080088a0 <XMC_CAN_MO_GetStatus>:
 * None
 *
 */

__STATIC_INLINE uint32_t XMC_CAN_MO_GetStatus(const XMC_CAN_MO_t *const can_mo)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  return ((can_mo->can_mo_ptr->MOSTAT));
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69db      	ldr	r3, [r3, #28]
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	370c      	adds	r7, #12
 80088b2:	46bd      	mov	sp, r7
 80088b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b8:	4770      	bx	lr
 80088ba:	bf00      	nop

080088bc <XMC_CAN_MO_EnableEvent>:
 *
 */

__STATIC_INLINE void XMC_CAN_MO_EnableEvent(const XMC_CAN_MO_t *const can_mo,
    const uint32_t event)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOFCR |= event;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	687a      	ldr	r2, [r7, #4]
 80088cc:	6812      	ldr	r2, [r2, #0]
 80088ce:	6811      	ldr	r1, [r2, #0]
 80088d0:	683a      	ldr	r2, [r7, #0]
 80088d2:	430a      	orrs	r2, r1
 80088d4:	601a      	str	r2, [r3, #0]
}
 80088d6:	370c      	adds	r7, #12
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <CAN_NODE_MO_EnableTxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableTxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableTxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_TRANSMIT);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80088f2:	f7ff ffe3 	bl	80088bc <XMC_CAN_MO_EnableEvent>
}
 80088f6:	3708      	adds	r7, #8
 80088f8:	46bd      	mov	sp, r7
 80088fa:	bd80      	pop	{r7, pc}

080088fc <CAN_NODE_MO_EnableRxEvent>:
 *   return (1);
 * }
 * @endcode
 */
__STATIC_INLINE void CAN_NODE_MO_EnableRxEvent(const CAN_NODE_LMO_t *const can_lmo)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b082      	sub	sp, #8
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_EnableRxEvent: null pointer", can_lmo != NULL);
  XMC_CAN_MO_EnableEvent(can_lmo->mo_ptr,XMC_CAN_MO_EVENT_RECEIVE);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4618      	mov	r0, r3
 800890a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800890e:	f7ff ffd5 	bl	80088bc <XMC_CAN_MO_EnableEvent>
}
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <CAN_NODE_SetNodeEvents>:
  * @param  handle is a pointer pointing to APP data structure.
  * @return None
  */

static void CAN_NODE_SetNodeEvents(const CAN_NODE_t *handle)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t lnode_event = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	60fb      	str	r3, [r7, #12]

  XMC_ASSERT("CAN_NODE_lInit: handle null", handle != NULL);

  CAN_NODE_SetNodePointer(handle); /* set node service pointer */
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f000 f831 	bl	800898c <CAN_NODE_SetNodePointer>

  if (handle->txok_event_enable == true)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8008930:	2b00      	cmp	r3, #0
 8008932:	d003      	beq.n	800893c <CAN_NODE_SetNodeEvents+0x24>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_TX_INT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	f043 0302 	orr.w	r3, r3, #2
 800893a:	60fb      	str	r3, [r7, #12]
  }
  if (handle->lec_event_enable == true)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f893 30a3 	ldrb.w	r3, [r3, #163]	; 0xa3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d003      	beq.n	800894e <CAN_NODE_SetNodeEvents+0x36>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_LEC;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f043 0304 	orr.w	r3, r3, #4
 800894c:	60fb      	str	r3, [r7, #12]
  }
  if (handle->alert_event_enable == true)
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008954:	2b00      	cmp	r3, #0
 8008956:	d003      	beq.n	8008960 <CAN_NODE_SetNodeEvents+0x48>
  {
    lnode_event |= XMC_CAN_NODE_EVENT_ALERT;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f043 0308 	orr.w	r3, r3, #8
 800895e:	60fb      	str	r3, [r7, #12]
  }
  XMC_CAN_NODE_EnableEvent(handle->node_ptr, (XMC_CAN_NODE_EVENT_t)lnode_event);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	4618      	mov	r0, r3
 8008966:	68f9      	ldr	r1, [r7, #12]
 8008968:	f7fa fcd0 	bl	800330c <XMC_CAN_NODE_EnableEvent>

  if (handle->framecount_event_enable == true)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
 8008972:	2b00      	cmp	r3, #0
 8008974:	d006      	beq.n	8008984 <CAN_NODE_SetNodeEvents+0x6c>
  {
    XMC_CAN_NODE_EnableEvent(handle->node_ptr, XMC_CAN_NODE_EVENT_CFCIE);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	4618      	mov	r0, r3
 800897c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008980:	f7fa fcc4 	bl	800330c <XMC_CAN_NODE_EnableEvent>
  }

}
 8008984:	3710      	adds	r7, #16
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop

0800898c <CAN_NODE_SetNodePointer>:
  * @brief  Function to set the Node event pointer
  *
  */

static void CAN_NODE_SetNodePointer(const CAN_NODE_t *handle)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685a      	ldr	r2, [r3, #4]
                                                        handle->node_sr_ptr->alert_event_sr);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800899e:	781b      	ldrb	r3, [r3, #0]
{

  XMC_ASSERT("CAN_NODE_SetNodePointer: handle null", handle != NULL);

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
 80089a0:	4610      	mov	r0, r2
 80089a2:	2100      	movs	r1, #0
 80089a4:	461a      	mov	r2, r3
 80089a6:	f7ff fecb 	bl	8008740 <XMC_CAN_NODE_SetEventNodePointer>
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685a      	ldr	r2, [r3, #4]
                                                         handle->node_sr_ptr->lec_event_sr);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089b4:	785b      	ldrb	r3, [r3, #1]

  /* Configured the node event pointer for the alert event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_ALERT,
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
 80089b6:	4610      	mov	r0, r2
 80089b8:	2104      	movs	r1, #4
 80089ba:	461a      	mov	r2, r3
 80089bc:	f7ff fec0 	bl	8008740 <XMC_CAN_NODE_SetEventNodePointer>
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685a      	ldr	r2, [r3, #4]
                                                               handle->node_sr_ptr->txok_event_sr);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089ca:	789b      	ldrb	r3, [r3, #2]
                                                        handle->node_sr_ptr->alert_event_sr);
  /* Configured the node event pointer for the LEC event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_LEC,
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
 80089cc:	4610      	mov	r0, r2
 80089ce:	2108      	movs	r1, #8
 80089d0:	461a      	mov	r2, r3
 80089d2:	f7ff feb5 	bl	8008740 <XMC_CAN_NODE_SetEventNodePointer>
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685a      	ldr	r2, [r3, #4]
                                                             handle->node_sr_ptr->framecount_event_sr);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089e0:	78db      	ldrb	r3, [r3, #3]
                                                         handle->node_sr_ptr->lec_event_sr);
  /* Configured the node event pointer for the TXOK event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_TRANSFER_OK,
                                                               handle->node_sr_ptr->txok_event_sr);
  /* Configured the node event pointer for the Frame counter event with the service request number */
  XMC_CAN_NODE_SetEventNodePointer(handle->node_ptr, XMC_CAN_NODE_POINTER_EVENT_FRAME_COUNTER,
 80089e2:	4610      	mov	r0, r2
 80089e4:	210c      	movs	r1, #12
 80089e6:	461a      	mov	r2, r3
 80089e8:	f7ff feaa 	bl	8008740 <XMC_CAN_NODE_SetEventNodePointer>
                                                             handle->node_sr_ptr->framecount_event_sr);

}
 80089ec:	3708      	adds	r7, #8
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
 80089f2:	bf00      	nop

080089f4 <CAN_NODE_MO_Init>:
  XMC_CAN_NODE_NominalBitTimeConfigure(can_node, can_bit_time);
}

/*  Function to initialize the CAN MO based on UI configuration. */
void CAN_NODE_MO_Init(const CAN_NODE_LMO_t *lmo_ptr)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("CAN_NODE_MO_Init: lmo_ptr null", lmo_ptr != NULL);

  XMC_CAN_MO_Config(lmo_ptr->mo_ptr);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4618      	mov	r0, r3
 8008a02:	f7fa fab1 	bl	8002f68 <XMC_CAN_MO_Config>

  if (lmo_ptr->tx_event_enable == true)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	79db      	ldrb	r3, [r3, #7]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d00b      	beq.n	8008a26 <CAN_NODE_MO_Init+0x32>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_TRANSMIT, lmo_ptr->tx_sr);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681a      	ldr	r2, [r3, #0]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	795b      	ldrb	r3, [r3, #5]
 8008a16:	4610      	mov	r0, r2
 8008a18:	2104      	movs	r1, #4
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f7ff ff22 	bl	8008864 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableTxEvent(lmo_ptr);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f7ff ff5d 	bl	80088e0 <CAN_NODE_MO_EnableTxEvent>
  }
  if (lmo_ptr->rx_event_enable == true)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7a1b      	ldrb	r3, [r3, #8]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00b      	beq.n	8008a46 <CAN_NODE_MO_Init+0x52>
  {
    XMC_CAN_MO_SetEventNodePointer(lmo_ptr->mo_ptr, XMC_CAN_MO_POINTER_EVENT_RECEIVE, lmo_ptr->rx_sr);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	799b      	ldrb	r3, [r3, #6]
 8008a36:	4610      	mov	r0, r2
 8008a38:	2100      	movs	r1, #0
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	f7ff ff12 	bl	8008864 <XMC_CAN_MO_SetEventNodePointer>
    CAN_NODE_MO_EnableRxEvent(lmo_ptr);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff ff5b 	bl	80088fc <CAN_NODE_MO_EnableRxEvent>
  }

}
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <CAN_NODE_MO_Transmit>:

/* Function to transmit the can MO frame.  */
CAN_NODE_STATUS_t CAN_NODE_MO_Transmit(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008a54:	2300      	movs	r3, #0
 8008a56:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Transmit: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Transmit(lmo_ptr->mo_ptr);
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f7fa fb57 	bl	8003110 <XMC_CAN_MO_Transmit>
 8008a62:	4603      	mov	r3, r0
 8008a64:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <CAN_NODE_MO_Receive>:

/* Function to read the received CAN message from the selected message object. */
CAN_NODE_STATUS_t CAN_NODE_MO_Receive( CAN_NODE_LMO_t *lmo_ptr)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	73fb      	strb	r3, [r7, #15]
  XMC_ASSERT("CAN_NODE_MO_Receive: lmo_ptr null", lmo_ptr != NULL);

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_Receive(lmo_ptr->mo_ptr);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7fa fb73 	bl	800316c <XMC_CAN_MO_Receive>
 8008a86:	4603      	mov	r3, r0
 8008a88:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3710      	adds	r7, #16
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <CAN_NODE_MO_UpdateData>:
  return (status);
}

/* Function to updates the data for the CAN Message Object. */
CAN_NODE_STATUS_t CAN_NODE_MO_UpdateData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b084      	sub	sp, #16
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t *data_pointer = (uint32_t*) array_data;
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	60bb      	str	r3, [r7, #8]

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  lmo_ptr->mo_ptr->can_data[0U] = *data_pointer;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	6812      	ldr	r2, [r2, #0]
 8008aae:	611a      	str	r2, [r3, #16]
  lmo_ptr->mo_ptr->can_data[1U] = *(data_pointer + 1U);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	68ba      	ldr	r2, [r7, #8]
 8008ab6:	6852      	ldr	r2, [r2, #4]
 8008ab8:	615a      	str	r2, [r3, #20]

  status = (CAN_NODE_STATUS_t)XMC_CAN_MO_UpdateData(lmo_ptr->mo_ptr);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7fa faee 	bl	80030a0 <XMC_CAN_MO_UpdateData>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
  return (status);
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop

08008ad4 <CAN_NODE_MO_GetStatus>:

/*  Function to reads the status of the CAN Message Object.  */
uint32_t CAN_NODE_MO_GetStatus(const CAN_NODE_LMO_t *lmo_ptr)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  uint32_t status;

  XMC_ASSERT("CAN_NODE_MO_GetStatus: lmo_ptr null", lmo_ptr != NULL);

  status = XMC_CAN_MO_GetStatus(lmo_ptr->mo_ptr);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f7ff fedd 	bl	80088a0 <XMC_CAN_MO_GetStatus>
 8008ae6:	60f8      	str	r0, [r7, #12]

  return (status);
 8008ae8:	68fb      	ldr	r3, [r7, #12]
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3710      	adds	r7, #16
 8008aee:	46bd      	mov	sp, r7
 8008af0:	bd80      	pop	{r7, pc}
 8008af2:	bf00      	nop

08008af4 <CAN_NODE_Init>:
/*  Function to initialize the CAN node by configuring the baud rate, can bus type (External or internal)
 *  and message objects.
 */

CAN_NODE_STATUS_t CAN_NODE_Init(const CAN_NODE_t* handle)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b086      	sub	sp, #24
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  CAN_NODE_STATUS_t status = CAN_NODE_STATUS_SUCCESS;
 8008afc:	2300      	movs	r3, #0
 8008afe:	75fb      	strb	r3, [r7, #23]
  uint32_t loop_count;
  const CAN_NODE_LMO_t *lmo_ptr;

  XMC_ASSERT("CAN_NODE_Init: handle null", handle != NULL);

  const CAN_NODE_GPIO_t *const lgpio_ptr = handle->gpio_out;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Initialize the GLOBAL_CAN APP */
  status  = (CAN_NODE_STATUS_t)GLOBAL_CAN_Init(handle->global_ptr);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	f7ff fce1 	bl	80084d4 <GLOBAL_CAN_Init>
 8008b12:	4603      	mov	r3, r0
 8008b14:	75fb      	strb	r3, [r7, #23]

  if (status == CAN_NODE_STATUS_SUCCESS)
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f040 8087 	bne.w	8008c2c <CAN_NODE_Init+0x138>
  {
    /* Initialize the GUI configured values for baud rate to NBTR Reg */
    if (XMC_CAN_NODE_NominalBitTimeConfigureEx(handle->node_ptr, handle->baudrate_config) == XMC_CAN_STATUS_SUCCESS)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685a      	ldr	r2, [r3, #4]
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	689b      	ldr	r3, [r3, #8]
 8008b26:	4610      	mov	r0, r2
 8008b28:	4619      	mov	r1, r3
 8008b2a:	f7fa f8b7 	bl	8002c9c <XMC_CAN_NODE_NominalBitTimeConfigureEx>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d178      	bne.n	8008c26 <CAN_NODE_Init+0x132>
    {
      /* set CCE and INIT bit NCR for node configuration */

      XMC_CAN_NODE_EnableConfigurationChange(handle->node_ptr);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7ff fe43 	bl	80087c4 <XMC_CAN_NODE_EnableConfigurationChange>
      XMC_CAN_NODE_SetInitBit(handle->node_ptr);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4618      	mov	r0, r3
 8008b44:	f7ff fe5e 	bl	8008804 <XMC_CAN_NODE_SetInitBit>
      XMC_CAN_NODE_ReSetAnalyzerMode(handle->node_ptr);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	4618      	mov	r0, r3
 8008b4e:	f7ff fe79 	bl	8008844 <XMC_CAN_NODE_ReSetAnalyzerMode>

      if (handle->loopback_enable == true) /* Loop back mode enabled */
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d005      	beq.n	8008b68 <CAN_NODE_Init+0x74>
      {
        XMC_CAN_NODE_EnableLoopBack(handle->node_ptr);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	685b      	ldr	r3, [r3, #4]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f7ff fe1f 	bl	80087a4 <XMC_CAN_NODE_EnableLoopBack>
 8008b66:	e018      	b.n	8008b9a <CAN_NODE_Init+0xa6>
      }
      else
      {
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b6e:	6819      	ldr	r1, [r3, #0]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008b76:	791a      	ldrb	r2, [r3, #4]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008b7e:	4608      	mov	r0, r1
 8008b80:	4611      	mov	r1, r2
 8008b82:	461a      	mov	r2, r3
 8008b84:	f7f9 f9c6 	bl	8001f14 <XMC_GPIO_Init>
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	685a      	ldr	r2, [r3, #4]
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008b92:	4610      	mov	r0, r2
 8008b94:	4619      	mov	r1, r3
 8008b96:	f7ff fdef 	bl	8008778 <XMC_CAN_NODE_SetReceiveInput>
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff febc 	bl	8008918 <CAN_NODE_SetNodeEvents>

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	613b      	str	r3, [r7, #16]
 8008ba4:	e019      	b.n	8008bda <CAN_NODE_Init+0xe6>
      {
        lmo_ptr = handle->lmobj_ptr[loop_count];
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	3302      	adds	r3, #2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	685b      	ldr	r3, [r3, #4]
 8008bb2:	60bb      	str	r3, [r7, #8]
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	6859      	ldr	r1, [r3, #4]
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f893 20a1 	ldrb.w	r2, [r3, #161]	; 0xa1
 8008bc0:	68bb      	ldr	r3, [r7, #8]
 8008bc2:	791b      	ldrb	r3, [r3, #4]
 8008bc4:	4608      	mov	r0, r1
 8008bc6:	4611      	mov	r1, r2
 8008bc8:	461a      	mov	r2, r3
 8008bca:	f7fa f90f 	bl	8002dec <XMC_CAN_AllocateMOtoNodeList>
        CAN_NODE_MO_Init(lmo_ptr);
 8008bce:	68b8      	ldr	r0, [r7, #8]
 8008bd0:	f7ff ff10 	bl	80089f4 <CAN_NODE_MO_Init>
        XMC_GPIO_Init(handle->gpio_in->port, handle->gpio_in->pin, handle->gpio_in_config);
        XMC_CAN_NODE_SetReceiveInput(handle->node_ptr, handle->rx_signal);
      }
      CAN_NODE_SetNodeEvents(handle); /* API to enable node events */

      for (loop_count = 0U; loop_count < handle->mo_count; loop_count++)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	3301      	adds	r3, #1
 8008bd8:	613b      	str	r3, [r7, #16]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f893 30a2 	ldrb.w	r3, [r3, #162]	; 0xa2
 8008be0:	461a      	mov	r2, r3
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	429a      	cmp	r2, r3
 8008be6:	d8de      	bhi.n	8008ba6 <CAN_NODE_Init+0xb2>
        lmo_ptr = handle->lmobj_ptr[loop_count];
        XMC_CAN_AllocateMOtoNodeList(handle->global_ptr->canglobal_ptr, handle->node_num, lmo_ptr->number);
        CAN_NODE_MO_Init(lmo_ptr);
      }
      /* reset CCE and INIT bit NCR for node configuration */
      XMC_CAN_NODE_DisableConfigurationChange(handle->node_ptr);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7ff fdf9 	bl	80087e4 <XMC_CAN_NODE_DisableConfigurationChange>
      XMC_CAN_NODE_ResetInitBit(handle->node_ptr);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fe14 	bl	8008824 <XMC_CAN_NODE_ResetInitBit>
      if (handle->loopback_enable == false)
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	f893 30a7 	ldrb.w	r3, [r3, #167]	; 0xa7
 8008c02:	f083 0301 	eor.w	r3, r3, #1
 8008c06:	b2db      	uxtb	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d011      	beq.n	8008c30 <CAN_NODE_Init+0x13c>
      {
        /* CAN transmit pin configuration */
        XMC_GPIO_Init(lgpio_ptr->port, lgpio_ptr->pin, handle->gpio_out_config);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	791a      	ldrb	r2, [r3, #4]
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c1a:	4608      	mov	r0, r1
 8008c1c:	4611      	mov	r1, r2
 8008c1e:	461a      	mov	r2, r3
 8008c20:	f7f9 f978 	bl	8001f14 <XMC_GPIO_Init>
 8008c24:	e004      	b.n	8008c30 <CAN_NODE_Init+0x13c>
      }
    }
    else
    {
      status = CAN_NODE_STATUS_FAILURE;
 8008c26:	2301      	movs	r3, #1
 8008c28:	75fb      	strb	r3, [r7, #23]
 8008c2a:	e001      	b.n	8008c30 <CAN_NODE_Init+0x13c>
    }
  }
  else
  {
    status = CAN_NODE_STATUS_FAILURE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	75fb      	strb	r3, [r7, #23]
  }

  return (status);
 8008c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	3718      	adds	r7, #24
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
 8008c3a:	bf00      	nop

08008c3c <DAVE_Init>:
 * @param[in]  None
 *
 * @return  DAVE_STATUS_t <BR>
 ******************************************************************************/
__WEAK DAVE_STATUS_t DAVE_Init(void)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
  DAVE_STATUS_t init_status;
  
  init_status = DAVE_STATUS_SUCCESS;
 8008c42:	2300      	movs	r3, #0
 8008c44:	71fb      	strb	r3, [r7, #7]
     /** @Initialization of APPs Init Functions */
     init_status = (DAVE_STATUS_t)CLOCK_XMC4_Init(&CLOCK_XMC4_0);
 8008c46:	48b7      	ldr	r0, [pc, #732]	; (8008f24 <DAVE_Init+0x2e8>)
 8008c48:	f7ff fd34 	bl	80086b4 <CLOCK_XMC4_Init>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	71fb      	strb	r3, [r7, #7]

  if (init_status == DAVE_STATUS_SUCCESS)
 8008c50:	79fb      	ldrb	r3, [r7, #7]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d104      	bne.n	8008c60 <DAVE_Init+0x24>
  {
	 /**  Initialization of DIGITAL_IO APP instance DC_DC_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DC_DC_EN_OUT_D); 
 8008c56:	48b4      	ldr	r0, [pc, #720]	; (8008f28 <DAVE_Init+0x2ec>)
 8008c58:	f7ff fc98 	bl	800858c <DIGITAL_IO_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c60:	79fb      	ldrb	r3, [r7, #7]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d104      	bne.n	8008c70 <DAVE_Init+0x34>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_PUMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_PUMP_OUT_D); 
 8008c66:	48b1      	ldr	r0, [pc, #708]	; (8008f2c <DAVE_Init+0x2f0>)
 8008c68:	f7ff fc90 	bl	800858c <DIGITAL_IO_Init>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c70:	79fb      	ldrb	r3, [r7, #7]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d104      	bne.n	8008c80 <DAVE_Init+0x44>
  {
	 /**  Initialization of DIGITAL_IO APP instance HEADLAMPS_ADJ_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HEADLAMPS_ADJ_PWR_OUT_D); 
 8008c76:	48ae      	ldr	r0, [pc, #696]	; (8008f30 <DAVE_Init+0x2f4>)
 8008c78:	f7ff fc88 	bl	800858c <DIGITAL_IO_Init>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c80:	79fb      	ldrb	r3, [r7, #7]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d104      	bne.n	8008c90 <DAVE_Init+0x54>
  {
	 /**  Initialization of DIGITAL_IO APP instance AC_RADIATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AC_RADIATOR_OUT_D); 
 8008c86:	48ab      	ldr	r0, [pc, #684]	; (8008f34 <DAVE_Init+0x2f8>)
 8008c88:	f7ff fc80 	bl	800858c <DIGITAL_IO_Init>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008c90:	79fb      	ldrb	r3, [r7, #7]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <DAVE_Init+0x64>
  {
	 /**  Initialization of DIGITAL_IO APP instance INSTRUMENT_CON_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INSTRUMENT_CON_PWR_OUT_D); 
 8008c96:	48a8      	ldr	r0, [pc, #672]	; (8008f38 <DAVE_Init+0x2fc>)
 8008c98:	f7ff fc78 	bl	800858c <DIGITAL_IO_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ca0:	79fb      	ldrb	r3, [r7, #7]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <DAVE_Init+0x74>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACCEL_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACCEL_CS_OUT); 
 8008ca6:	48a5      	ldr	r0, [pc, #660]	; (8008f3c <DAVE_Init+0x300>)
 8008ca8:	f7ff fc70 	bl	800858c <DIGITAL_IO_Init>
 8008cac:	4603      	mov	r3, r0
 8008cae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d104      	bne.n	8008cc0 <DAVE_Init+0x84>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELECT_HANDBRAKE_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELECT_HANDBRAKE_EN_OUT_D); 
 8008cb6:	48a2      	ldr	r0, [pc, #648]	; (8008f40 <DAVE_Init+0x304>)
 8008cb8:	f7ff fc68 	bl	800858c <DIGITAL_IO_Init>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cc0:	79fb      	ldrb	r3, [r7, #7]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <DAVE_Init+0x94>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_CONTACTOR_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_CONTACTOR_RELAY_OUT_D); 
 8008cc6:	489f      	ldr	r0, [pc, #636]	; (8008f44 <DAVE_Init+0x308>)
 8008cc8:	f7ff fc60 	bl	800858c <DIGITAL_IO_Init>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d104      	bne.n	8008ce0 <DAVE_Init+0xa4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_PARK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_PARK_RELAY_OUT_D); 
 8008cd6:	489c      	ldr	r0, [pc, #624]	; (8008f48 <DAVE_Init+0x30c>)
 8008cd8:	f7ff fc58 	bl	800858c <DIGITAL_IO_Init>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ce0:	79fb      	ldrb	r3, [r7, #7]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <DAVE_Init+0xb4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REV_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REV_RELAY_OUT_D); 
 8008ce6:	4899      	ldr	r0, [pc, #612]	; (8008f4c <DAVE_Init+0x310>)
 8008ce8:	f7ff fc50 	bl	800858c <DIGITAL_IO_Init>
 8008cec:	4603      	mov	r3, r0
 8008cee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008cf0:	79fb      	ldrb	r3, [r7, #7]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d104      	bne.n	8008d00 <DAVE_Init+0xc4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FWD_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FWD_RELAY_OUT_D); 
 8008cf6:	4896      	ldr	r0, [pc, #600]	; (8008f50 <DAVE_Init+0x314>)
 8008cf8:	f7ff fc48 	bl	800858c <DIGITAL_IO_Init>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d00:	79fb      	ldrb	r3, [r7, #7]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d104      	bne.n	8008d10 <DAVE_Init+0xd4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_REGEN_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_REGEN_RELAY_OUT_D); 
 8008d06:	4893      	ldr	r0, [pc, #588]	; (8008f54 <DAVE_Init+0x318>)
 8008d08:	f7ff fc40 	bl	800858c <DIGITAL_IO_Init>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d10:	79fb      	ldrb	r3, [r7, #7]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d104      	bne.n	8008d20 <DAVE_Init+0xe4>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_ELOCK_RELAY_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_ELOCK_RELAY_OUT_D); 
 8008d16:	4890      	ldr	r0, [pc, #576]	; (8008f58 <DAVE_Init+0x31c>)
 8008d18:	f7ff fc38 	bl	800858c <DIGITAL_IO_Init>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d20:	79fb      	ldrb	r3, [r7, #7]
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d104      	bne.n	8008d30 <DAVE_Init+0xf4>
  {
	 /**  Initialization of DIGITAL_IO APP instance POS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&POS_OUT_D); 
 8008d26:	488d      	ldr	r0, [pc, #564]	; (8008f5c <DAVE_Init+0x320>)
 8008d28:	f7ff fc30 	bl	800858c <DIGITAL_IO_Init>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d30:	79fb      	ldrb	r3, [r7, #7]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d104      	bne.n	8008d40 <DAVE_Init+0x104>
  {
	 /**  Initialization of DIGITAL_IO APP instance VCU_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VCU_FAN_PWR_OUT_D); 
 8008d36:	488a      	ldr	r0, [pc, #552]	; (8008f60 <DAVE_Init+0x324>)
 8008d38:	f7ff fc28 	bl	800858c <DIGITAL_IO_Init>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d104      	bne.n	8008d50 <DAVE_Init+0x114>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_EFUSE_1_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_EFUSE_1_OUT_D); 
 8008d46:	4887      	ldr	r0, [pc, #540]	; (8008f64 <DAVE_Init+0x328>)
 8008d48:	f7ff fc20 	bl	800858c <DIGITAL_IO_Init>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d50:	79fb      	ldrb	r3, [r7, #7]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d104      	bne.n	8008d60 <DAVE_Init+0x124>
  {
	 /**  Initialization of DIGITAL_IO APP instance WIPER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&WIPER_PWR_OUT_D); 
 8008d56:	4884      	ldr	r0, [pc, #528]	; (8008f68 <DAVE_Init+0x32c>)
 8008d58:	f7ff fc18 	bl	800858c <DIGITAL_IO_Init>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d60:	79fb      	ldrb	r3, [r7, #7]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d104      	bne.n	8008d70 <DAVE_Init+0x134>
  {
	 /**  Initialization of DIGITAL_IO APP instance THROTTLE_POT_CS_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&THROTTLE_POT_CS_OUT_D); 
 8008d66:	4881      	ldr	r0, [pc, #516]	; (8008f6c <DAVE_Init+0x330>)
 8008d68:	f7ff fc10 	bl	800858c <DIGITAL_IO_Init>
 8008d6c:	4603      	mov	r3, r0
 8008d6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d70:	79fb      	ldrb	r3, [r7, #7]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d104      	bne.n	8008d80 <DAVE_Init+0x144>
  {
	 /**  Initialization of DIGITAL_IO APP instance LIGHTS_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LIGHTS_PWR_OUT_D); 
 8008d76:	487e      	ldr	r0, [pc, #504]	; (8008f70 <DAVE_Init+0x334>)
 8008d78:	f7ff fc08 	bl	800858c <DIGITAL_IO_Init>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d80:	79fb      	ldrb	r3, [r7, #7]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d104      	bne.n	8008d90 <DAVE_Init+0x154>
  {
	 /**  Initialization of DIGITAL_IO APP instance INFOTAINMENT_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INFOTAINMENT_PWR_OUT_D); 
 8008d86:	487b      	ldr	r0, [pc, #492]	; (8008f74 <DAVE_Init+0x338>)
 8008d88:	f7ff fc00 	bl	800858c <DIGITAL_IO_Init>
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008d90:	79fb      	ldrb	r3, [r7, #7]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d104      	bne.n	8008da0 <DAVE_Init+0x164>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUDIO_AMP_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUDIO_AMP_OUT_D); 
 8008d96:	4878      	ldr	r0, [pc, #480]	; (8008f78 <DAVE_Init+0x33c>)
 8008d98:	f7ff fbf8 	bl	800858c <DIGITAL_IO_Init>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008da0:	79fb      	ldrb	r3, [r7, #7]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d104      	bne.n	8008db0 <DAVE_Init+0x174>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_PWR_OUT_D); 
 8008da6:	4875      	ldr	r0, [pc, #468]	; (8008f7c <DAVE_Init+0x340>)
 8008da8:	f7ff fbf0 	bl	800858c <DIGITAL_IO_Init>
 8008dac:	4603      	mov	r3, r0
 8008dae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008db0:	79fb      	ldrb	r3, [r7, #7]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d104      	bne.n	8008dc0 <DAVE_Init+0x184>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_LIGHT_OUT_D); 
 8008db6:	4872      	ldr	r0, [pc, #456]	; (8008f80 <DAVE_Init+0x344>)
 8008db8:	f7ff fbe8 	bl	800858c <DIGITAL_IO_Init>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008dc0:	79fb      	ldrb	r3, [r7, #7]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d104      	bne.n	8008dd0 <DAVE_Init+0x194>
  {
	 /**  Initialization of DIGITAL_IO APP instance HORN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HORN_PWR_OUT_D); 
 8008dc6:	486f      	ldr	r0, [pc, #444]	; (8008f84 <DAVE_Init+0x348>)
 8008dc8:	f7ff fbe0 	bl	800858c <DIGITAL_IO_Init>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008dd0:	79fb      	ldrb	r3, [r7, #7]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d104      	bne.n	8008de0 <DAVE_Init+0x1a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_OUT_D); 
 8008dd6:	486c      	ldr	r0, [pc, #432]	; (8008f88 <DAVE_Init+0x34c>)
 8008dd8:	f7ff fbd8 	bl	800858c <DIGITAL_IO_Init>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d104      	bne.n	8008df0 <DAVE_Init+0x1b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance RIGHT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RIGHT_INDICATOR_OUT_D); 
 8008de6:	4869      	ldr	r0, [pc, #420]	; (8008f8c <DAVE_Init+0x350>)
 8008de8:	f7ff fbd0 	bl	800858c <DIGITAL_IO_Init>
 8008dec:	4603      	mov	r3, r0
 8008dee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d104      	bne.n	8008e00 <DAVE_Init+0x1c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance HIGH_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HIGH_BEAM_OUT_D); 
 8008df6:	4866      	ldr	r0, [pc, #408]	; (8008f90 <DAVE_Init+0x354>)
 8008df8:	f7ff fbc8 	bl	800858c <DIGITAL_IO_Init>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e00:	79fb      	ldrb	r3, [r7, #7]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d104      	bne.n	8008e10 <DAVE_Init+0x1d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LOW_BEAM_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LOW_BEAM_OUT_D); 
 8008e06:	4863      	ldr	r0, [pc, #396]	; (8008f94 <DAVE_Init+0x358>)
 8008e08:	f7ff fbc0 	bl	800858c <DIGITAL_IO_Init>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e10:	79fb      	ldrb	r3, [r7, #7]
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d104      	bne.n	8008e20 <DAVE_Init+0x1e4>
  {
	 /**  Initialization of DIGITAL_IO APP instance REV_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&REV_LIGHT_OUT_D); 
 8008e16:	4860      	ldr	r0, [pc, #384]	; (8008f98 <DAVE_Init+0x35c>)
 8008e18:	f7ff fbb8 	bl	800858c <DIGITAL_IO_Init>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e20:	79fb      	ldrb	r3, [r7, #7]
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d104      	bne.n	8008e30 <DAVE_Init+0x1f4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ELEC_HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ELEC_HANDBRAKE_IN_D); 
 8008e26:	485d      	ldr	r0, [pc, #372]	; (8008f9c <DAVE_Init+0x360>)
 8008e28:	f7ff fbb0 	bl	800858c <DIGITAL_IO_Init>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d104      	bne.n	8008e40 <DAVE_Init+0x204>
  {
	 /**  Initialization of DIGITAL_IO APP instance AUX_ANALOG1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&AUX_ANALOG1_IN_D); 
 8008e36:	485a      	ldr	r0, [pc, #360]	; (8008fa0 <DAVE_Init+0x364>)
 8008e38:	f7ff fba8 	bl	800858c <DIGITAL_IO_Init>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e40:	79fb      	ldrb	r3, [r7, #7]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d104      	bne.n	8008e50 <DAVE_Init+0x214>
  {
	 /**  Initialization of DIGITAL_IO APP instance INT_ACCEL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INT_ACCEL_IN_D); 
 8008e46:	4857      	ldr	r0, [pc, #348]	; (8008fa4 <DAVE_Init+0x368>)
 8008e48:	f7ff fba0 	bl	800858c <DIGITAL_IO_Init>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d104      	bne.n	8008e60 <DAVE_Init+0x224>
  {
	 /**  Initialization of DIGITAL_IO APP instance CIGARETTE_LIGHTER_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CIGARETTE_LIGHTER_PWR_OUT_D); 
 8008e56:	4854      	ldr	r0, [pc, #336]	; (8008fa8 <DAVE_Init+0x36c>)
 8008e58:	f7ff fb98 	bl	800858c <DIGITAL_IO_Init>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e60:	79fb      	ldrb	r3, [r7, #7]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d104      	bne.n	8008e70 <DAVE_Init+0x234>
  {
	 /**  Initialization of DIGITAL_IO APP instance BUZZER_EN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BUZZER_EN_D); 
 8008e66:	4851      	ldr	r0, [pc, #324]	; (8008fac <DAVE_Init+0x370>)
 8008e68:	f7ff fb90 	bl	800858c <DIGITAL_IO_Init>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e70:	79fb      	ldrb	r3, [r7, #7]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d104      	bne.n	8008e80 <DAVE_Init+0x244>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_RELAY_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_RELAY_PWR_OUT_D); 
 8008e76:	484e      	ldr	r0, [pc, #312]	; (8008fb0 <DAVE_Init+0x374>)
 8008e78:	f7ff fb88 	bl	800858c <DIGITAL_IO_Init>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <DAVE_Init+0x254>
  {
	 /**  Initialization of DIGITAL_IO APP instance MC_FAN_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MC_FAN_PWR_OUT_D); 
 8008e86:	484b      	ldr	r0, [pc, #300]	; (8008fb4 <DAVE_Init+0x378>)
 8008e88:	f7ff fb80 	bl	800858c <DIGITAL_IO_Init>
 8008e8c:	4603      	mov	r3, r0
 8008e8e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008e90:	79fb      	ldrb	r3, [r7, #7]
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d104      	bne.n	8008ea0 <DAVE_Init+0x264>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_SPEED_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_SPEED_PWM_OUT); 
 8008e96:	4848      	ldr	r0, [pc, #288]	; (8008fb8 <DAVE_Init+0x37c>)
 8008e98:	f7ff fb78 	bl	800858c <DIGITAL_IO_Init>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ea0:	79fb      	ldrb	r3, [r7, #7]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d104      	bne.n	8008eb0 <DAVE_Init+0x274>
  {
	 /**  Initialization of DIGITAL_IO APP instance VEHICLE_RPM_PWM_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VEHICLE_RPM_PWM_OUT); 
 8008ea6:	4845      	ldr	r0, [pc, #276]	; (8008fbc <DAVE_Init+0x380>)
 8008ea8:	f7ff fb70 	bl	800858c <DIGITAL_IO_Init>
 8008eac:	4603      	mov	r3, r0
 8008eae:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008eb0:	79fb      	ldrb	r3, [r7, #7]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d104      	bne.n	8008ec0 <DAVE_Init+0x284>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_WINDOW_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_WINDOW_OUT_D); 
 8008eb6:	4842      	ldr	r0, [pc, #264]	; (8008fc0 <DAVE_Init+0x384>)
 8008eb8:	f7ff fb68 	bl	800858c <DIGITAL_IO_Init>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d104      	bne.n	8008ed0 <DAVE_Init+0x294>
  {
	 /**  Initialization of DIGITAL_IO APP instance PWR_STEERING_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&PWR_STEERING_OUT_D); 
 8008ec6:	483f      	ldr	r0, [pc, #252]	; (8008fc4 <DAVE_Init+0x388>)
 8008ec8:	f7ff fb60 	bl	800858c <DIGITAL_IO_Init>
 8008ecc:	4603      	mov	r3, r0
 8008ece:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ed0:	79fb      	ldrb	r3, [r7, #7]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d104      	bne.n	8008ee0 <DAVE_Init+0x2a4>
  {
	 /**  Initialization of DIGITAL_IO APP instance LEFT_INDICATOR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&LEFT_INDICATOR_OUT_D); 
 8008ed6:	483c      	ldr	r0, [pc, #240]	; (8008fc8 <DAVE_Init+0x38c>)
 8008ed8:	f7ff fb58 	bl	800858c <DIGITAL_IO_Init>
 8008edc:	4603      	mov	r3, r0
 8008ede:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ee0:	79fb      	ldrb	r3, [r7, #7]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d104      	bne.n	8008ef0 <DAVE_Init+0x2b4>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC3_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC3_CS_OUT); 
 8008ee6:	4839      	ldr	r0, [pc, #228]	; (8008fcc <DAVE_Init+0x390>)
 8008ee8:	f7ff fb50 	bl	800858c <DIGITAL_IO_Init>
 8008eec:	4603      	mov	r3, r0
 8008eee:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d104      	bne.n	8008f00 <DAVE_Init+0x2c4>
  {
	 /**  Initialization of DIGITAL_IO APP instance INPUTS_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&INPUTS_3V3_PWR_EN); 
 8008ef6:	4836      	ldr	r0, [pc, #216]	; (8008fd0 <DAVE_Init+0x394>)
 8008ef8:	f7ff fb48 	bl	800858c <DIGITAL_IO_Init>
 8008efc:	4603      	mov	r3, r0
 8008efe:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f00:	79fb      	ldrb	r3, [r7, #7]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d104      	bne.n	8008f10 <DAVE_Init+0x2d4>
  {
	 /**  Initialization of DIGITAL_IO APP instance COMM_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&COMM_3V3_PWR_EN); 
 8008f06:	4833      	ldr	r0, [pc, #204]	; (8008fd4 <DAVE_Init+0x398>)
 8008f08:	f7ff fb40 	bl	800858c <DIGITAL_IO_Init>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d162      	bne.n	8008fdc <DAVE_Init+0x3a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SENSOR_3V3_PWR_EN */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SENSOR_3V3_PWR_EN); 
 8008f16:	4830      	ldr	r0, [pc, #192]	; (8008fd8 <DAVE_Init+0x39c>)
 8008f18:	f7ff fb38 	bl	800858c <DIGITAL_IO_Init>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	71fb      	strb	r3, [r7, #7]
 8008f20:	e05c      	b.n	8008fdc <DAVE_Init+0x3a0>
 8008f22:	bf00      	nop
 8008f24:	1fff447c 	.word	0x1fff447c
 8008f28:	08013228 	.word	0x08013228
 8008f2c:	0801323c 	.word	0x0801323c
 8008f30:	08013250 	.word	0x08013250
 8008f34:	08013264 	.word	0x08013264
 8008f38:	08013278 	.word	0x08013278
 8008f3c:	0801328c 	.word	0x0801328c
 8008f40:	080132a0 	.word	0x080132a0
 8008f44:	080132b4 	.word	0x080132b4
 8008f48:	080132c8 	.word	0x080132c8
 8008f4c:	080132dc 	.word	0x080132dc
 8008f50:	080132f0 	.word	0x080132f0
 8008f54:	08013304 	.word	0x08013304
 8008f58:	08013318 	.word	0x08013318
 8008f5c:	0801332c 	.word	0x0801332c
 8008f60:	08013340 	.word	0x08013340
 8008f64:	08013354 	.word	0x08013354
 8008f68:	08013368 	.word	0x08013368
 8008f6c:	0801337c 	.word	0x0801337c
 8008f70:	08013390 	.word	0x08013390
 8008f74:	080133a4 	.word	0x080133a4
 8008f78:	080133b8 	.word	0x080133b8
 8008f7c:	080133cc 	.word	0x080133cc
 8008f80:	080133e0 	.word	0x080133e0
 8008f84:	080133f4 	.word	0x080133f4
 8008f88:	08013408 	.word	0x08013408
 8008f8c:	0801341c 	.word	0x0801341c
 8008f90:	08013430 	.word	0x08013430
 8008f94:	08013444 	.word	0x08013444
 8008f98:	08013458 	.word	0x08013458
 8008f9c:	0801346c 	.word	0x0801346c
 8008fa0:	08013480 	.word	0x08013480
 8008fa4:	08013494 	.word	0x08013494
 8008fa8:	080134a8 	.word	0x080134a8
 8008fac:	080134bc 	.word	0x080134bc
 8008fb0:	080134d0 	.word	0x080134d0
 8008fb4:	080134e4 	.word	0x080134e4
 8008fb8:	080134f8 	.word	0x080134f8
 8008fbc:	0801350c 	.word	0x0801350c
 8008fc0:	08013520 	.word	0x08013520
 8008fc4:	08013534 	.word	0x08013534
 8008fc8:	08013548 	.word	0x08013548
 8008fcc:	0801355c 	.word	0x0801355c
 8008fd0:	08013570 	.word	0x08013570
 8008fd4:	08013584 	.word	0x08013584
 8008fd8:	08013598 	.word	0x08013598
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fdc:	79fb      	ldrb	r3, [r7, #7]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d104      	bne.n	8008fec <DAVE_Init+0x3b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CABIN_LIGHT_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CABIN_LIGHT_OUT_D); 
 8008fe2:	4895      	ldr	r0, [pc, #596]	; (8009238 <DAVE_Init+0x5fc>)
 8008fe4:	f7ff fad2 	bl	800858c <DIGITAL_IO_Init>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008fec:	79fb      	ldrb	r3, [r7, #7]
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d104      	bne.n	8008ffc <DAVE_Init+0x3c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC2_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC2_CS_OUT); 
 8008ff2:	4892      	ldr	r0, [pc, #584]	; (800923c <DAVE_Init+0x600>)
 8008ff4:	f7ff faca 	bl	800858c <DIGITAL_IO_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 8008ffc:	79fb      	ldrb	r3, [r7, #7]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d104      	bne.n	800900c <DAVE_Init+0x3d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance ADC1_CS_OUT */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ADC1_CS_OUT); 
 8009002:	488f      	ldr	r0, [pc, #572]	; (8009240 <DAVE_Init+0x604>)
 8009004:	f7ff fac2 	bl	800858c <DIGITAL_IO_Init>
 8009008:	4603      	mov	r3, r0
 800900a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800900c:	79fb      	ldrb	r3, [r7, #7]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d104      	bne.n	800901c <DAVE_Init+0x3e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance SPEED_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&SPEED_SENSOR_IN_D); 
 8009012:	488c      	ldr	r0, [pc, #560]	; (8009244 <DAVE_Init+0x608>)
 8009014:	f7ff faba 	bl	800858c <DIGITAL_IO_Init>
 8009018:	4603      	mov	r3, r0
 800901a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d104      	bne.n	800902c <DAVE_Init+0x3f0>
  {
	 /**  Initialization of DIGITAL_IO APP instance VACUUM_SENSOR_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&VACUUM_SENSOR_IN_D); 
 8009022:	4889      	ldr	r0, [pc, #548]	; (8009248 <DAVE_Init+0x60c>)
 8009024:	f7ff fab2 	bl	800858c <DIGITAL_IO_Init>
 8009028:	4603      	mov	r3, r0
 800902a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800902c:	79fb      	ldrb	r3, [r7, #7]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <DAVE_Init+0x400>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_OIL_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_OIL_IN_D); 
 8009032:	4886      	ldr	r0, [pc, #536]	; (800924c <DAVE_Init+0x610>)
 8009034:	f7ff faaa 	bl	800858c <DIGITAL_IO_Init>
 8009038:	4603      	mov	r3, r0
 800903a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800903c:	79fb      	ldrb	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <DAVE_Init+0x410>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGING_STARTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGING_STARTED_IN_D); 
 8009042:	4883      	ldr	r0, [pc, #524]	; (8009250 <DAVE_Init+0x614>)
 8009044:	f7ff faa2 	bl	800858c <DIGITAL_IO_Init>
 8009048:	4603      	mov	r3, r0
 800904a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d104      	bne.n	800905c <DAVE_Init+0x420>
  {
	 /**  Initialization of DIGITAL_IO APP instance CHARGER_CONNECTED_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CHARGER_CONNECTED_IN_D); 
 8009052:	4880      	ldr	r0, [pc, #512]	; (8009254 <DAVE_Init+0x618>)
 8009054:	f7ff fa9a 	bl	800858c <DIGITAL_IO_Init>
 8009058:	4603      	mov	r3, r0
 800905a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800905c:	79fb      	ldrb	r3, [r7, #7]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d104      	bne.n	800906c <DAVE_Init+0x430>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS2_IN_D); 
 8009062:	487d      	ldr	r0, [pc, #500]	; (8009258 <DAVE_Init+0x61c>)
 8009064:	f7ff fa92 	bl	800858c <DIGITAL_IO_Init>
 8009068:	4603      	mov	r3, r0
 800906a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800906c:	79fb      	ldrb	r3, [r7, #7]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d104      	bne.n	800907c <DAVE_Init+0x440>
  {
	 /**  Initialization of DIGITAL_IO APP instance IGNI_POS1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&IGNI_POS1_IN_D); 
 8009072:	487a      	ldr	r0, [pc, #488]	; (800925c <DAVE_Init+0x620>)
 8009074:	f7ff fa8a 	bl	800858c <DIGITAL_IO_Init>
 8009078:	4603      	mov	r3, r0
 800907a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800907c:	79fb      	ldrb	r3, [r7, #7]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d104      	bne.n	800908c <DAVE_Init+0x450>
  {
	 /**  Initialization of DIGITAL_IO APP instance ACC_PEDAL_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&ACC_PEDAL_SW_IN_D); 
 8009082:	4877      	ldr	r0, [pc, #476]	; (8009260 <DAVE_Init+0x624>)
 8009084:	f7ff fa82 	bl	800858c <DIGITAL_IO_Init>
 8009088:	4603      	mov	r3, r0
 800908a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800908c:	79fb      	ldrb	r3, [r7, #7]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d104      	bne.n	800909c <DAVE_Init+0x460>
  {
	 /**  Initialization of DIGITAL_IO APP instance HANDBRAKE_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&HANDBRAKE_IN_D); 
 8009092:	4874      	ldr	r0, [pc, #464]	; (8009264 <DAVE_Init+0x628>)
 8009094:	f7ff fa7a 	bl	800858c <DIGITAL_IO_Init>
 8009098:	4603      	mov	r3, r0
 800909a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d104      	bne.n	80090ac <DAVE_Init+0x470>
  {
	 /**  Initialization of DIGITAL_IO APP instance BRAKE_SW_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&BRAKE_SW_IN_D); 
 80090a2:	4871      	ldr	r0, [pc, #452]	; (8009268 <DAVE_Init+0x62c>)
 80090a4:	f7ff fa72 	bl	800858c <DIGITAL_IO_Init>
 80090a8:	4603      	mov	r3, r0
 80090aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d104      	bne.n	80090bc <DAVE_Init+0x480>
  {
	 /**  Initialization of DIGITAL_IO APP instance DOOR_LOCK_PWR_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DOOR_LOCK_PWR_OUT_D); 
 80090b2:	486e      	ldr	r0, [pc, #440]	; (800926c <DAVE_Init+0x630>)
 80090b4:	f7ff fa6a 	bl	800858c <DIGITAL_IO_Init>
 80090b8:	4603      	mov	r3, r0
 80090ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d104      	bne.n	80090cc <DAVE_Init+0x490>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW1_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW1_IN_D); 
 80090c2:	486b      	ldr	r0, [pc, #428]	; (8009270 <DAVE_Init+0x634>)
 80090c4:	f7ff fa62 	bl	800858c <DIGITAL_IO_Init>
 80090c8:	4603      	mov	r3, r0
 80090ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090cc:	79fb      	ldrb	r3, [r7, #7]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d104      	bne.n	80090dc <DAVE_Init+0x4a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW2_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW2_IN_D); 
 80090d2:	4868      	ldr	r0, [pc, #416]	; (8009274 <DAVE_Init+0x638>)
 80090d4:	f7ff fa5a 	bl	800858c <DIGITAL_IO_Init>
 80090d8:	4603      	mov	r3, r0
 80090da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090dc:	79fb      	ldrb	r3, [r7, #7]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d104      	bne.n	80090ec <DAVE_Init+0x4b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW3_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW3_IN_D); 
 80090e2:	4865      	ldr	r0, [pc, #404]	; (8009278 <DAVE_Init+0x63c>)
 80090e4:	f7ff fa52 	bl	800858c <DIGITAL_IO_Init>
 80090e8:	4603      	mov	r3, r0
 80090ea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090ec:	79fb      	ldrb	r3, [r7, #7]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d104      	bne.n	80090fc <DAVE_Init+0x4c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance GEAR_SW4_IN_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&GEAR_SW4_IN_D); 
 80090f2:	4862      	ldr	r0, [pc, #392]	; (800927c <DAVE_Init+0x640>)
 80090f4:	f7ff fa4a 	bl	800858c <DIGITAL_IO_Init>
 80090f8:	4603      	mov	r3, r0
 80090fa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80090fc:	79fb      	ldrb	r3, [r7, #7]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d104      	bne.n	800910c <DAVE_Init+0x4d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_5 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_5); 
 8009102:	485f      	ldr	r0, [pc, #380]	; (8009280 <DAVE_Init+0x644>)
 8009104:	f7ff fa42 	bl	800858c <DIGITAL_IO_Init>
 8009108:	4603      	mov	r3, r0
 800910a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800910c:	79fb      	ldrb	r3, [r7, #7]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d104      	bne.n	800911c <DAVE_Init+0x4e0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_6 */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_6); 
 8009112:	485c      	ldr	r0, [pc, #368]	; (8009284 <DAVE_Init+0x648>)
 8009114:	f7ff fa3a 	bl	800858c <DIGITAL_IO_Init>
 8009118:	4603      	mov	r3, r0
 800911a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800911c:	79fb      	ldrb	r3, [r7, #7]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <DAVE_Init+0x4f0>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_0 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_0); 
 8009122:	4859      	ldr	r0, [pc, #356]	; (8009288 <DAVE_Init+0x64c>)
 8009124:	f7fe fd26 	bl	8007b74 <I2C_MASTER_Init>
 8009128:	4603      	mov	r3, r0
 800912a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800912c:	79fb      	ldrb	r3, [r7, #7]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d104      	bne.n	800913c <DAVE_Init+0x500>
  {
	 /**  Initialization of I2C_MASTER APP instance I2C_MASTER_1 */
	 init_status = (DAVE_STATUS_t)I2C_MASTER_Init(&I2C_MASTER_1); 
 8009132:	4856      	ldr	r0, [pc, #344]	; (800928c <DAVE_Init+0x650>)
 8009134:	f7fe fd1e 	bl	8007b74 <I2C_MASTER_Init>
 8009138:	4603      	mov	r3, r0
 800913a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800913c:	79fb      	ldrb	r3, [r7, #7]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d104      	bne.n	800914c <DAVE_Init+0x510>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_0 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_0); 
 8009142:	4853      	ldr	r0, [pc, #332]	; (8009290 <DAVE_Init+0x654>)
 8009144:	f7ff fcd6 	bl	8008af4 <CAN_NODE_Init>
 8009148:	4603      	mov	r3, r0
 800914a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800914c:	79fb      	ldrb	r3, [r7, #7]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d104      	bne.n	800915c <DAVE_Init+0x520>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_1 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_1); 
 8009152:	4850      	ldr	r0, [pc, #320]	; (8009294 <DAVE_Init+0x658>)
 8009154:	f7ff fcce 	bl	8008af4 <CAN_NODE_Init>
 8009158:	4603      	mov	r3, r0
 800915a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800915c:	79fb      	ldrb	r3, [r7, #7]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d104      	bne.n	800916c <DAVE_Init+0x530>
  {
	 /**  Initialization of TIMER APP instance TIMER_0 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_0); 
 8009162:	484d      	ldr	r0, [pc, #308]	; (8009298 <DAVE_Init+0x65c>)
 8009164:	f7fc ff9a 	bl	800609c <TIMER_Init>
 8009168:	4603      	mov	r3, r0
 800916a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800916c:	79fb      	ldrb	r3, [r7, #7]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d104      	bne.n	800917c <DAVE_Init+0x540>
  {
	 /**  Initialization of WATCHDOG APP instance WATCHDOG_0 */
	 init_status = (DAVE_STATUS_t)WATCHDOG_Init(&WATCHDOG_0); 
 8009172:	484a      	ldr	r0, [pc, #296]	; (800929c <DAVE_Init+0x660>)
 8009174:	f7fc fcfc 	bl	8005b70 <WATCHDOG_Init>
 8009178:	4603      	mov	r3, r0
 800917a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800917c:	79fb      	ldrb	r3, [r7, #7]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d104      	bne.n	800918c <DAVE_Init+0x550>
  {
	 /**  Initialization of TIMER APP instance TIMER_1 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_1); 
 8009182:	4847      	ldr	r0, [pc, #284]	; (80092a0 <DAVE_Init+0x664>)
 8009184:	f7fc ff8a 	bl	800609c <TIMER_Init>
 8009188:	4603      	mov	r3, r0
 800918a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <DAVE_Init+0x560>
  {
	 /**  Initialization of TIMER APP instance TIMER_2 */
	 init_status = (DAVE_STATUS_t)TIMER_Init(&TIMER_2); 
 8009192:	4844      	ldr	r0, [pc, #272]	; (80092a4 <DAVE_Init+0x668>)
 8009194:	f7fc ff82 	bl	800609c <TIMER_Init>
 8009198:	4603      	mov	r3, r0
 800919a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800919c:	79fb      	ldrb	r3, [r7, #7]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d104      	bne.n	80091ac <DAVE_Init+0x570>
  {
	 /**  Initialization of INTERRUPT APP instance INTERRUPT_0 */
	 init_status = (DAVE_STATUS_t)INTERRUPT_Init(&INTERRUPT_0); 
 80091a2:	4841      	ldr	r0, [pc, #260]	; (80092a8 <DAVE_Init+0x66c>)
 80091a4:	f7fe fbd0 	bl	8007948 <INTERRUPT_Init>
 80091a8:	4603      	mov	r3, r0
 80091aa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091ac:	79fb      	ldrb	r3, [r7, #7]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d104      	bne.n	80091bc <DAVE_Init+0x580>
  {
	 /**  Initialization of UART APP instance UART_0 */
	 init_status = (DAVE_STATUS_t)UART_Init(&UART_0); 
 80091b2:	483e      	ldr	r0, [pc, #248]	; (80092ac <DAVE_Init+0x670>)
 80091b4:	f7fc fd46 	bl	8005c44 <UART_Init>
 80091b8:	4603      	mov	r3, r0
 80091ba:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091bc:	79fb      	ldrb	r3, [r7, #7]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d104      	bne.n	80091cc <DAVE_Init+0x590>
  {
	 /**  Initialization of CAN_NODE APP instance CAN_NODE_2 */
	 init_status = (DAVE_STATUS_t)CAN_NODE_Init(&CAN_NODE_2); 
 80091c2:	483b      	ldr	r0, [pc, #236]	; (80092b0 <DAVE_Init+0x674>)
 80091c4:	f7ff fc96 	bl	8008af4 <CAN_NODE_Init>
 80091c8:	4603      	mov	r3, r0
 80091ca:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091cc:	79fb      	ldrb	r3, [r7, #7]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d104      	bne.n	80091dc <DAVE_Init+0x5a0>
  {
	 /**  Initialization of DIGITAL_IO APP instance CTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&CTS); 
 80091d2:	4838      	ldr	r0, [pc, #224]	; (80092b4 <DAVE_Init+0x678>)
 80091d4:	f7ff f9da 	bl	800858c <DIGITAL_IO_Init>
 80091d8:	4603      	mov	r3, r0
 80091da:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091dc:	79fb      	ldrb	r3, [r7, #7]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d104      	bne.n	80091ec <DAVE_Init+0x5b0>
  {
	 /**  Initialization of DIGITAL_IO APP instance RTS */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&RTS); 
 80091e2:	4835      	ldr	r0, [pc, #212]	; (80092b8 <DAVE_Init+0x67c>)
 80091e4:	f7ff f9d2 	bl	800858c <DIGITAL_IO_Init>
 80091e8:	4603      	mov	r3, r0
 80091ea:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091ec:	79fb      	ldrb	r3, [r7, #7]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d104      	bne.n	80091fc <DAVE_Init+0x5c0>
  {
	 /**  Initialization of DIGITAL_IO APP instance DIGITAL_IO_PWRKEY */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&DIGITAL_IO_PWRKEY); 
 80091f2:	4832      	ldr	r0, [pc, #200]	; (80092bc <DAVE_Init+0x680>)
 80091f4:	f7ff f9ca 	bl	800858c <DIGITAL_IO_Init>
 80091f8:	4603      	mov	r3, r0
 80091fa:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 80091fc:	79fb      	ldrb	r3, [r7, #7]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d104      	bne.n	800920c <DAVE_Init+0x5d0>
  {
	 /**  Initialization of DIGITAL_IO APP instance MODULE_4G_EN_OUT_D */
	 init_status = (DAVE_STATUS_t)DIGITAL_IO_Init(&MODULE_4G_EN_OUT_D); 
 8009202:	482f      	ldr	r0, [pc, #188]	; (80092c0 <DAVE_Init+0x684>)
 8009204:	f7ff f9c2 	bl	800858c <DIGITAL_IO_Init>
 8009208:	4603      	mov	r3, r0
 800920a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d104      	bne.n	800921c <DAVE_Init+0x5e0>
  {
	 /**  Initialization of SYSTIMER APP instance SYSTIMER_0 */
	 init_status = (DAVE_STATUS_t)SYSTIMER_Init(&SYSTIMER_0); 
 8009212:	482c      	ldr	r0, [pc, #176]	; (80092c4 <DAVE_Init+0x688>)
 8009214:	f7fd fc2a 	bl	8006a6c <SYSTIMER_Init>
 8009218:	4603      	mov	r3, r0
 800921a:	71fb      	strb	r3, [r7, #7]
   } 
  if (init_status == DAVE_STATUS_SUCCESS)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <DAVE_Init+0x5f0>
  {
	 /**  Initialization of FATFS APP instance FATFS_0 */
	 init_status = (DAVE_STATUS_t)FATFS_Init(&FATFS_0); 
 8009222:	4829      	ldr	r0, [pc, #164]	; (80092c8 <DAVE_Init+0x68c>)
 8009224:	f7ff f978 	bl	8008518 <FATFS_Init>
 8009228:	4603      	mov	r3, r0
 800922a:	71fb      	strb	r3, [r7, #7]
   }  
  return init_status;
 800922c:	79fb      	ldrb	r3, [r7, #7]
} /**  End of function DAVE_Init */
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
 8009236:	bf00      	nop
 8009238:	080135ac 	.word	0x080135ac
 800923c:	080135c0 	.word	0x080135c0
 8009240:	080135d4 	.word	0x080135d4
 8009244:	080135e8 	.word	0x080135e8
 8009248:	080135fc 	.word	0x080135fc
 800924c:	08013610 	.word	0x08013610
 8009250:	08013624 	.word	0x08013624
 8009254:	08013638 	.word	0x08013638
 8009258:	0801364c 	.word	0x0801364c
 800925c:	08013660 	.word	0x08013660
 8009260:	08013674 	.word	0x08013674
 8009264:	08013688 	.word	0x08013688
 8009268:	0801369c 	.word	0x0801369c
 800926c:	080136b0 	.word	0x080136b0
 8009270:	080136c4 	.word	0x080136c4
 8009274:	080136d8 	.word	0x080136d8
 8009278:	080136ec 	.word	0x080136ec
 800927c:	08013700 	.word	0x08013700
 8009280:	08013714 	.word	0x08013714
 8009284:	08013728 	.word	0x08013728
 8009288:	1ffe8a5c 	.word	0x1ffe8a5c
 800928c:	1ffe8a68 	.word	0x1ffe8a68
 8009290:	08013958 	.word	0x08013958
 8009294:	08013b40 	.word	0x08013b40
 8009298:	1ffe8850 	.word	0x1ffe8850
 800929c:	1ffe883c 	.word	0x1ffe883c
 80092a0:	1ffe889c 	.word	0x1ffe889c
 80092a4:	1ffe88e0 	.word	0x1ffe88e0
 80092a8:	08013188 	.word	0x08013188
 80092ac:	1ffe8844 	.word	0x1ffe8844
 80092b0:	08013c5c 	.word	0x08013c5c
 80092b4:	0801373c 	.word	0x0801373c
 80092b8:	08013750 	.word	0x08013750
 80092bc:	08013764 	.word	0x08013764
 80092c0:	08013778 	.word	0x08013778
 80092c4:	1fff440c 	.word	0x1fff440c
 80092c8:	1ffe8ab0 	.word	0x1ffe8ab0

080092cc <OBDII_CAN_Tx>:
		{0x5E4, {0x00}},
		{0x5E5, {0x00}}
};

void OBDII_CAN_Tx(void)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b084      	sub	sp, #16
 80092d0:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_2;
 80092d2:	4b49      	ldr	r3, [pc, #292]	; (80093f8 <OBDII_CAN_Tx+0x12c>)
 80092d4:	60bb      	str	r3, [r7, #8]
	uint8_t *array_data;

/*******************************************bms 0x01******************************************/
	OBDII_CAN[can_0x01].CAN_Data[0] = BMS_SOC; // soc
 80092d6:	4b49      	ldr	r3, [pc, #292]	; (80093fc <OBDII_CAN_Tx+0x130>)
 80092d8:	781b      	ldrb	r3, [r3, #0]
 80092da:	b2da      	uxtb	r2, r3
 80092dc:	4b48      	ldr	r3, [pc, #288]	; (8009400 <OBDII_CAN_Tx+0x134>)
 80092de:	711a      	strb	r2, [r3, #4]

	OBDII_CAN[can_0x01].CAN_Data[1] = Bms_maxTemp; // temp;
 80092e0:	4b48      	ldr	r3, [pc, #288]	; (8009404 <OBDII_CAN_Tx+0x138>)
 80092e2:	881b      	ldrh	r3, [r3, #0]
 80092e4:	b2da      	uxtb	r2, r3
 80092e6:	4b46      	ldr	r3, [pc, #280]	; (8009400 <OBDII_CAN_Tx+0x134>)
 80092e8:	715a      	strb	r2, [r3, #5]

	//OBDII_CAN[can_0x01].CAN_Data[2];//packcurrent H;
	//OBDII_CAN[can_0x01].CAN_Data[3];//packcurrent L;

	OBDII_CAN[can_0x01].CAN_Data[4] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7]; //packvoltage H
 80092ea:	4b47      	ldr	r3, [pc, #284]	; (8009408 <OBDII_CAN_Tx+0x13c>)
 80092ec:	7ddb      	ldrb	r3, [r3, #23]
 80092ee:	b2da      	uxtb	r2, r3
 80092f0:	4b43      	ldr	r3, [pc, #268]	; (8009400 <OBDII_CAN_Tx+0x134>)
 80092f2:	721a      	strb	r2, [r3, #8]
	OBDII_CAN[can_0x01].CAN_Data[5] = CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]; //packvoltage L
 80092f4:	4b44      	ldr	r3, [pc, #272]	; (8009408 <OBDII_CAN_Tx+0x13c>)
 80092f6:	7d9b      	ldrb	r3, [r3, #22]
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	4b41      	ldr	r3, [pc, #260]	; (8009400 <OBDII_CAN_Tx+0x134>)
 80092fc:	725a      	strb	r2, [r3, #9]

/*******************************************eps 0x02******************************************/


/*******************************************hvac 0x03******************************************/
	 OBDII_CAN[can_0x03].CAN_Data[0] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0]; //TempdegreeC
 80092fe:	4b43      	ldr	r3, [pc, #268]	; (800940c <OBDII_CAN_Tx+0x140>)
 8009300:	7c1b      	ldrb	r3, [r3, #16]
 8009302:	b2da      	uxtb	r2, r3
 8009304:	4b3e      	ldr	r3, [pc, #248]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009306:	771a      	strb	r2, [r3, #28]
	 OBDII_CAN[can_0x03].CAN_Data[1] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1]; //Pressure
 8009308:	4b40      	ldr	r3, [pc, #256]	; (800940c <OBDII_CAN_Tx+0x140>)
 800930a:	7c5b      	ldrb	r3, [r3, #17]
 800930c:	b2da      	uxtb	r2, r3
 800930e:	4b3c      	ldr	r3, [pc, #240]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009310:	775a      	strb	r2, [r3, #29]

	 OBDII_CAN[can_0x03].CAN_Data[2] = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2]; //1: AC switch on,  0: AC switch off,
 8009312:	4b3e      	ldr	r3, [pc, #248]	; (800940c <OBDII_CAN_Tx+0x140>)
 8009314:	7c9b      	ldrb	r3, [r3, #18]
 8009316:	b2da      	uxtb	r2, r3
 8009318:	4b39      	ldr	r3, [pc, #228]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800931a:	779a      	strb	r2, [r3, #30]

	 OBDII_CAN[can_0x03].CAN_Data[3] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1]; //AC rpm H
 800931c:	4b3b      	ldr	r3, [pc, #236]	; (800940c <OBDII_CAN_Tx+0x140>)
 800931e:	795b      	ldrb	r3, [r3, #5]
 8009320:	b2da      	uxtb	r2, r3
 8009322:	4b37      	ldr	r3, [pc, #220]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009324:	77da      	strb	r2, [r3, #31]
	 OBDII_CAN[can_0x03].CAN_Data[4] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[0]; //AC rpm L
 8009326:	4b39      	ldr	r3, [pc, #228]	; (800940c <OBDII_CAN_Tx+0x140>)
 8009328:	791b      	ldrb	r3, [r3, #4]
 800932a:	b2da      	uxtb	r2, r3
 800932c:	4b34      	ldr	r3, [pc, #208]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800932e:	f883 2020 	strb.w	r2, [r3, #32]

	 OBDII_CAN[can_0x03].CAN_Data[5] = CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3]; //AC ON -> compressor enable bit
 8009332:	4b36      	ldr	r3, [pc, #216]	; (800940c <OBDII_CAN_Tx+0x140>)
 8009334:	79db      	ldrb	r3, [r3, #7]
 8009336:	b2da      	uxtb	r2, r3
 8009338:	4b31      	ldr	r3, [pc, #196]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800933a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	 //OBDII_CAN[can_0x04].CAN_Data[3]; //throttle percentage L

	//OBDII_CAN[can_0x04].CAN_Data[4]; //speed H
	 //OBDII_CAN[can_0x04].CAN_Data[5]; //speed L

	 OBDII_CAN[can_0x04].CAN_Data[6] = Mcu_Temp;
 800933e:	4b34      	ldr	r3, [pc, #208]	; (8009410 <OBDII_CAN_Tx+0x144>)
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	b2da      	uxtb	r2, r3
 8009344:	4b2e      	ldr	r3, [pc, #184]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009346:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
	 OBDII_CAN[can_0x04].CAN_Data[7] = Motor_Temp;
 800934a:	4b32      	ldr	r3, [pc, #200]	; (8009414 <OBDII_CAN_Tx+0x148>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	b2da      	uxtb	r2, r3
 8009350:	4b2b      	ldr	r3, [pc, #172]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009352:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

/*******************************************madhura 0x05******************************************/

	 OBDII_CAN[can_0x05].CAN_Data[0] = obc_madhura[can_0x18FF50E5].CAN_Data[0]; // voltage H
 8009356:	4b30      	ldr	r3, [pc, #192]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 8009358:	7c1b      	ldrb	r3, [r3, #16]
 800935a:	b2da      	uxtb	r2, r3
 800935c:	4b28      	ldr	r3, [pc, #160]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800935e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	 OBDII_CAN[can_0x05].CAN_Data[1] = obc_madhura[can_0x18FF50E5].CAN_Data[1]; // voltage L
 8009362:	4b2d      	ldr	r3, [pc, #180]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 8009364:	7c5b      	ldrb	r3, [r3, #17]
 8009366:	b2da      	uxtb	r2, r3
 8009368:	4b25      	ldr	r3, [pc, #148]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800936a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	 OBDII_CAN[can_0x05].CAN_Data[2] = obc_madhura[can_0x18FF50E5].CAN_Data[2]; // current H
 800936e:	4b2a      	ldr	r3, [pc, #168]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 8009370:	7c9b      	ldrb	r3, [r3, #18]
 8009372:	b2da      	uxtb	r2, r3
 8009374:	4b22      	ldr	r3, [pc, #136]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009376:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	 OBDII_CAN[can_0x05].CAN_Data[3] = obc_madhura[can_0x18FF50E5].CAN_Data[3]; // current L
 800937a:	4b27      	ldr	r3, [pc, #156]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 800937c:	7cdb      	ldrb	r3, [r3, #19]
 800937e:	b2da      	uxtb	r2, r3
 8009380:	4b1f      	ldr	r3, [pc, #124]	; (8009400 <OBDII_CAN_Tx+0x134>)
 8009382:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
 8009386:	4b24      	ldr	r3, [pc, #144]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 8009388:	7d1b      	ldrb	r3, [r3, #20]
 800938a:	b2da      	uxtb	r2, r3
 800938c:	4b1c      	ldr	r3, [pc, #112]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800938e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode
 8009392:	4b21      	ldr	r3, [pc, #132]	; (8009418 <OBDII_CAN_Tx+0x14c>)
 8009394:	7d5b      	ldrb	r3, [r3, #21]
 8009396:	b2da      	uxtb	r2, r3
 8009398:	4b19      	ldr	r3, [pc, #100]	; (8009400 <OBDII_CAN_Tx+0x134>)
 800939a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39


	 for(int i = 0; i < can_OBD_max; i++)
 800939e:	2300      	movs	r3, #0
 80093a0:	60fb      	str	r3, [r7, #12]
 80093a2:	e023      	b.n	80093ec <OBDII_CAN_Tx+0x120>
	 {
		 array_data = &OBDII_CAN[i].CAN_Data[0];
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4613      	mov	r3, r2
 80093a8:	005b      	lsls	r3, r3, #1
 80093aa:	4413      	add	r3, r2
 80093ac:	009b      	lsls	r3, r3, #2
 80093ae:	4a14      	ldr	r2, [pc, #80]	; (8009400 <OBDII_CAN_Tx+0x134>)
 80093b0:	4413      	add	r3, r2
 80093b2:	3304      	adds	r3, #4
 80093b4:	607b      	str	r3, [r7, #4]

		 //  update data for the MO to transmit
		 status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[i],array_data);
 80093b6:	68ba      	ldr	r2, [r7, #8]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	3302      	adds	r3, #2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	4413      	add	r3, r2
 80093c0:	685b      	ldr	r3, [r3, #4]
 80093c2:	4618      	mov	r0, r3
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	f7ff fb65 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 80093ca:	4603      	mov	r3, r0
 80093cc:	70fb      	strb	r3, [r7, #3]

		 if (status == CAN_NODE_STATUS_SUCCESS)
 80093ce:	78fb      	ldrb	r3, [r7, #3]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d108      	bne.n	80093e6 <OBDII_CAN_Tx+0x11a>
		 {
		    // message object data updated.

		    // transmit the data
		    CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[i]);
 80093d4:	68ba      	ldr	r2, [r7, #8]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3302      	adds	r3, #2
 80093da:	009b      	lsls	r3, r3, #2
 80093dc:	4413      	add	r3, r2
 80093de:	685b      	ldr	r3, [r3, #4]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f7ff fb33 	bl	8008a4c <CAN_NODE_MO_Transmit>

	 OBDII_CAN[can_0x05].CAN_Data[4] = obc_madhura[can_0x18FF50E5].CAN_Data[4]; // 0:Charger turned on, 1:Battery Protection, Charger Shutdown Output
	 OBDII_CAN[can_0x05].CAN_Data[5] = obc_madhura[can_0x18FF50E5].CAN_Data[5]; // 0:charging mode, 1:Heating mode while charging, 2: heating mode


	 for(int i = 0; i < can_OBD_max; i++)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	3301      	adds	r3, #1
 80093ea:	60fb      	str	r3, [r7, #12]
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	2b04      	cmp	r3, #4
 80093f0:	ddd8      	ble.n	80093a4 <OBDII_CAN_Tx+0xd8>
		 else
		 {
		     // message object failed to update.
		 }
	 }
}
 80093f2:	3710      	adds	r7, #16
 80093f4:	46bd      	mov	sp, r7
 80093f6:	bd80      	pop	{r7, pc}
 80093f8:	08013c5c 	.word	0x08013c5c
 80093fc:	1fff4800 	.word	0x1fff4800
 8009400:	1ffe9218 	.word	0x1ffe9218
 8009404:	1fff47fc 	.word	0x1fff47fc
 8009408:	1ffe9254 	.word	0x1ffe9254
 800940c:	1ffe93a4 	.word	0x1ffe93a4
 8009410:	1fff48b8 	.word	0x1fff48b8
 8009414:	1fff4810 	.word	0x1fff4810
 8009418:	1ffe94c4 	.word	0x1ffe94c4

0800941c <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	683a      	ldr	r2, [r7, #0]
 800942c:	61da      	str	r2, [r3, #28]
}
 800942e:	370c      	adds	r7, #12
 8009430:	46bd      	mov	sp, r7
 8009432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009436:	4770      	bx	lr

08009438 <CAN_Rx_0x1808A7F3>:
		{0X180BA7F3, {0x00}}
};


void CAN_Rx_0x1808A7F3(void)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b084      	sub	sp, #16
 800943c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800943e:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <CAN_Rx_0x1808A7F3+0x78>)
 8009440:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009442:	230c      	movs	r3, #12
 8009444:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009446:	7afb      	ldrb	r3, [r7, #11]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	3302      	adds	r3, #2
 800944c:	009b      	lsls	r3, r3, #2
 800944e:	4413      	add	r3, r2
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009456:	7afb      	ldrb	r3, [r7, #11]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	3302      	adds	r3, #2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	4413      	add	r3, r2
 8009460:	685b      	ldr	r3, [r3, #4]
 8009462:	4618      	mov	r0, r3
 8009464:	f7ff fb36 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 8009468:	4603      	mov	r3, r0
 800946a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800946c:	78fb      	ldrb	r3, [r7, #3]
 800946e:	f003 0301 	and.w	r3, r3, #1
 8009472:	2b00      	cmp	r3, #0
 8009474:	d016      	beq.n	80094a4 <CAN_Rx_0x1808A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009476:	6878      	ldr	r0, [r7, #4]
 8009478:	2101      	movs	r1, #1
 800947a:	f7ff ffcf 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800947e:	7afb      	ldrb	r3, [r7, #11]
 8009480:	68fa      	ldr	r2, [r7, #12]
 8009482:	3302      	adds	r3, #2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4413      	add	r3, r2
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4618      	mov	r0, r3
 800948c:	f7ff faf0 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009490:	4603      	mov	r3, r0
 8009492:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009494:	78bb      	ldrb	r3, [r7, #2]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <CAN_Rx_0x1808A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800949a:	2301      	movs	r3, #1
 800949c:	707b      	strb	r3, [r7, #1]
 800949e:	e001      	b.n	80094a4 <CAN_Rx_0x1808A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 80094a0:	2300      	movs	r3, #0
 80094a2:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1808A7F3();
 80094a4:	f000 fbac 	bl	8009c00 <process_Rx_CAN_0X1808A7F3>
}
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	08013958 	.word	0x08013958

080094b4 <CAN_Rx_0x180AA7F3>:


void CAN_Rx_0x180AA7F3(void)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80094ba:	4b1c      	ldr	r3, [pc, #112]	; (800952c <CAN_Rx_0x180AA7F3+0x78>)
 80094bc:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80094be:	230d      	movs	r3, #13
 80094c0:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80094c2:	7afb      	ldrb	r3, [r7, #11]
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	3302      	adds	r3, #2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80094d2:	7afb      	ldrb	r3, [r7, #11]
 80094d4:	68fa      	ldr	r2, [r7, #12]
 80094d6:	3302      	adds	r3, #2
 80094d8:	009b      	lsls	r3, r3, #2
 80094da:	4413      	add	r3, r2
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	4618      	mov	r0, r3
 80094e0:	f7ff faf8 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 80094e4:	4603      	mov	r3, r0
 80094e6:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80094e8:	78fb      	ldrb	r3, [r7, #3]
 80094ea:	f003 0301 	and.w	r3, r3, #1
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d016      	beq.n	8009520 <CAN_Rx_0x180AA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	2101      	movs	r1, #1
 80094f6:	f7ff ff91 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80094fa:	7afb      	ldrb	r3, [r7, #11]
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	3302      	adds	r3, #2
 8009500:	009b      	lsls	r3, r3, #2
 8009502:	4413      	add	r3, r2
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	4618      	mov	r0, r3
 8009508:	f7ff fab2 	bl	8008a70 <CAN_NODE_MO_Receive>
 800950c:	4603      	mov	r3, r0
 800950e:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009510:	78bb      	ldrb	r3, [r7, #2]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d102      	bne.n	800951c <CAN_Rx_0x180AA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009516:	2301      	movs	r3, #1
 8009518:	707b      	strb	r3, [r7, #1]
 800951a:	e001      	b.n	8009520 <CAN_Rx_0x180AA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 800951c:	2300      	movs	r3, #0
 800951e:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180AA7F3();
 8009520:	f000 fb88 	bl	8009c34 <process_Rx_CAN_0X180AA7F3>
}
 8009524:	3710      	adds	r7, #16
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop
 800952c:	08013958 	.word	0x08013958

08009530 <CAN_Rx_0x180BA7F3>:


void CAN_Rx_0x180BA7F3(void)
{
 8009530:	b580      	push	{r7, lr}
 8009532:	b084      	sub	sp, #16
 8009534:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009536:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <CAN_Rx_0x180BA7F3+0x78>)
 8009538:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800953a:	230e      	movs	r3, #14
 800953c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800953e:	7afb      	ldrb	r3, [r7, #11]
 8009540:	68fa      	ldr	r2, [r7, #12]
 8009542:	3302      	adds	r3, #2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	4413      	add	r3, r2
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800954e:	7afb      	ldrb	r3, [r7, #11]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	3302      	adds	r3, #2
 8009554:	009b      	lsls	r3, r3, #2
 8009556:	4413      	add	r3, r2
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	4618      	mov	r0, r3
 800955c:	f7ff faba 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 8009560:	4603      	mov	r3, r0
 8009562:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	2b00      	cmp	r3, #0
 800956c:	d016      	beq.n	800959c <CAN_Rx_0x180BA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	2101      	movs	r1, #1
 8009572:	f7ff ff53 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009576:	7afb      	ldrb	r3, [r7, #11]
 8009578:	68fa      	ldr	r2, [r7, #12]
 800957a:	3302      	adds	r3, #2
 800957c:	009b      	lsls	r3, r3, #2
 800957e:	4413      	add	r3, r2
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	4618      	mov	r0, r3
 8009584:	f7ff fa74 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009588:	4603      	mov	r3, r0
 800958a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800958c:	78bb      	ldrb	r3, [r7, #2]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <CAN_Rx_0x180BA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009592:	2301      	movs	r3, #1
 8009594:	707b      	strb	r3, [r7, #1]
 8009596:	e001      	b.n	800959c <CAN_Rx_0x180BA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009598:	2300      	movs	r3, #0
 800959a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180BA7F3();
 800959c:	f000 fb9a 	bl	8009cd4 <process_Rx_CAN_0X180BA7F3>
}
 80095a0:	3710      	adds	r7, #16
 80095a2:	46bd      	mov	sp, r7
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	bf00      	nop
 80095a8:	08013958 	.word	0x08013958

080095ac <CAN_Rx_0x180EA7F3>:


void CAN_Rx_0x180EA7F3(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b084      	sub	sp, #16
 80095b0:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80095b2:	4b1c      	ldr	r3, [pc, #112]	; (8009624 <CAN_Rx_0x180EA7F3+0x78>)
 80095b4:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80095b6:	2314      	movs	r3, #20
 80095b8:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80095ba:	7afb      	ldrb	r3, [r7, #11]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	3302      	adds	r3, #2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80095ca:	7afb      	ldrb	r3, [r7, #11]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	3302      	adds	r3, #2
 80095d0:	009b      	lsls	r3, r3, #2
 80095d2:	4413      	add	r3, r2
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff fa7c 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 80095dc:	4603      	mov	r3, r0
 80095de:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80095e0:	78fb      	ldrb	r3, [r7, #3]
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d016      	beq.n	8009618 <CAN_Rx_0x180EA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	2101      	movs	r1, #1
 80095ee:	f7ff ff15 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80095f2:	7afb      	ldrb	r3, [r7, #11]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	3302      	adds	r3, #2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	4618      	mov	r0, r3
 8009600:	f7ff fa36 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009604:	4603      	mov	r3, r0
 8009606:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009608:	78bb      	ldrb	r3, [r7, #2]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d102      	bne.n	8009614 <CAN_Rx_0x180EA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800960e:	2301      	movs	r3, #1
 8009610:	707b      	strb	r3, [r7, #1]
 8009612:	e001      	b.n	8009618 <CAN_Rx_0x180EA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009614:	2300      	movs	r3, #0
 8009616:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180EA7F3();
 8009618:	f000 f968 	bl	80098ec <process_Rx_CAN_0X180EA7F3>
}
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}
 8009622:	bf00      	nop
 8009624:	08013958 	.word	0x08013958

08009628 <CAN_Rx_0x180FA7F3>:

void CAN_Rx_0x180FA7F3(void)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800962e:	4b1c      	ldr	r3, [pc, #112]	; (80096a0 <CAN_Rx_0x180FA7F3+0x78>)
 8009630:	60fb      	str	r3, [r7, #12]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009632:	2315      	movs	r3, #21
 8009634:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009636:	7afb      	ldrb	r3, [r7, #11]
 8009638:	68fa      	ldr	r2, [r7, #12]
 800963a:	3302      	adds	r3, #2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	4413      	add	r3, r2
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009646:	7afb      	ldrb	r3, [r7, #11]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	3302      	adds	r3, #2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4413      	add	r3, r2
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	4618      	mov	r0, r3
 8009654:	f7ff fa3e 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 8009658:	4603      	mov	r3, r0
 800965a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	f003 0301 	and.w	r3, r3, #1
 8009662:	2b00      	cmp	r3, #0
 8009664:	d016      	beq.n	8009694 <CAN_Rx_0x180FA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	2101      	movs	r1, #1
 800966a:	f7ff fed7 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800966e:	7afb      	ldrb	r3, [r7, #11]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	3302      	adds	r3, #2
 8009674:	009b      	lsls	r3, r3, #2
 8009676:	4413      	add	r3, r2
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4618      	mov	r0, r3
 800967c:	f7ff f9f8 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009680:	4603      	mov	r3, r0
 8009682:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009684:	78bb      	ldrb	r3, [r7, #2]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d102      	bne.n	8009690 <CAN_Rx_0x180FA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800968a:	2301      	movs	r3, #1
 800968c:	707b      	strb	r3, [r7, #1]
 800968e:	e001      	b.n	8009694 <CAN_Rx_0x180FA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009690:	2300      	movs	r3, #0
 8009692:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180FA7F3();
 8009694:	f000 fa2e 	bl	8009af4 <process_Rx_CAN_0X180FA7F3>
}
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	08013958 	.word	0x08013958

080096a4 <CAN_Rx_0x1810A7F3>:

void CAN_Rx_0x1810A7F3(void)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b084      	sub	sp, #16
 80096a8:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80096aa:	4b1c      	ldr	r3, [pc, #112]	; (800971c <CAN_Rx_0x1810A7F3+0x78>)
 80096ac:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80096ae:	2316      	movs	r3, #22
 80096b0:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80096b2:	7afb      	ldrb	r3, [r7, #11]
 80096b4:	68fa      	ldr	r2, [r7, #12]
 80096b6:	3302      	adds	r3, #2
 80096b8:	009b      	lsls	r3, r3, #2
 80096ba:	4413      	add	r3, r2
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80096c2:	7afb      	ldrb	r3, [r7, #11]
 80096c4:	68fa      	ldr	r2, [r7, #12]
 80096c6:	3302      	adds	r3, #2
 80096c8:	009b      	lsls	r3, r3, #2
 80096ca:	4413      	add	r3, r2
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	4618      	mov	r0, r3
 80096d0:	f7ff fa00 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 80096d4:	4603      	mov	r3, r0
 80096d6:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80096d8:	78fb      	ldrb	r3, [r7, #3]
 80096da:	f003 0301 	and.w	r3, r3, #1
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d016      	beq.n	8009710 <CAN_Rx_0x1810A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	2101      	movs	r1, #1
 80096e6:	f7ff fe99 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80096ea:	7afb      	ldrb	r3, [r7, #11]
 80096ec:	68fa      	ldr	r2, [r7, #12]
 80096ee:	3302      	adds	r3, #2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	f7ff f9ba 	bl	8008a70 <CAN_NODE_MO_Receive>
 80096fc:	4603      	mov	r3, r0
 80096fe:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009700:	78bb      	ldrb	r3, [r7, #2]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d102      	bne.n	800970c <CAN_Rx_0x1810A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009706:	2301      	movs	r3, #1
 8009708:	707b      	strb	r3, [r7, #1]
 800970a:	e001      	b.n	8009710 <CAN_Rx_0x1810A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 800970c:	2300      	movs	r3, #0
 800970e:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1810A7F3();
 8009710:	f000 f8c0 	bl	8009894 <process_Rx_CAN_0X1810A7F3>
}
 8009714:	3710      	adds	r7, #16
 8009716:	46bd      	mov	sp, r7
 8009718:	bd80      	pop	{r7, pc}
 800971a:	bf00      	nop
 800971c:	08013958 	.word	0x08013958

08009720 <CAN_Rx_0x1814A7F3>:
	}
	process_Rx_CAN_0X1813A7F3();
}

void CAN_Rx_0x1814A7F3(void)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b084      	sub	sp, #16
 8009724:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009726:	4b1c      	ldr	r3, [pc, #112]	; (8009798 <CAN_Rx_0x1814A7F3+0x78>)
 8009728:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800972a:	2314      	movs	r3, #20
 800972c:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	3302      	adds	r3, #2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	4413      	add	r3, r2
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800973e:	7afb      	ldrb	r3, [r7, #11]
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	3302      	adds	r3, #2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4413      	add	r3, r2
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	4618      	mov	r0, r3
 800974c:	f7ff f9c2 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 8009750:	4603      	mov	r3, r0
 8009752:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 8009754:	78fb      	ldrb	r3, [r7, #3]
 8009756:	f003 0301 	and.w	r3, r3, #1
 800975a:	2b00      	cmp	r3, #0
 800975c:	d016      	beq.n	800978c <CAN_Rx_0x1814A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800975e:	6878      	ldr	r0, [r7, #4]
 8009760:	2101      	movs	r1, #1
 8009762:	f7ff fe5b 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 8009766:	7afb      	ldrb	r3, [r7, #11]
 8009768:	68fa      	ldr	r2, [r7, #12]
 800976a:	3302      	adds	r3, #2
 800976c:	009b      	lsls	r3, r3, #2
 800976e:	4413      	add	r3, r2
 8009770:	685b      	ldr	r3, [r3, #4]
 8009772:	4618      	mov	r0, r3
 8009774:	f7ff f97c 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009778:	4603      	mov	r3, r0
 800977a:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800977c:	78bb      	ldrb	r3, [r7, #2]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <CAN_Rx_0x1814A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 8009782:	2301      	movs	r3, #1
 8009784:	707b      	strb	r3, [r7, #1]
 8009786:	e001      	b.n	800978c <CAN_Rx_0x1814A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009788:	2300      	movs	r3, #0
 800978a:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1814A7F3();
 800978c:	f000 fa04 	bl	8009b98 <process_Rx_CAN_0X1814A7F3>
}
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	08013958 	.word	0x08013958

0800979c <CAN_Rx_0x1815A7F3>:

void CAN_Rx_0x1815A7F3(void)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b084      	sub	sp, #16
 80097a0:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80097a2:	4b1c      	ldr	r3, [pc, #112]	; (8009814 <CAN_Rx_0x1815A7F3+0x78>)
 80097a4:	60fb      	str	r3, [r7, #12]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80097a6:	2314      	movs	r3, #20
 80097a8:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 80097aa:	7afb      	ldrb	r3, [r7, #11]
 80097ac:	68fa      	ldr	r2, [r7, #12]
 80097ae:	3302      	adds	r3, #2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4413      	add	r3, r2
 80097b4:	685b      	ldr	r3, [r3, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 80097ba:	7afb      	ldrb	r3, [r7, #11]
 80097bc:	68fa      	ldr	r2, [r7, #12]
 80097be:	3302      	adds	r3, #2
 80097c0:	009b      	lsls	r3, r3, #2
 80097c2:	4413      	add	r3, r2
 80097c4:	685b      	ldr	r3, [r3, #4]
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7ff f984 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 80097cc:	4603      	mov	r3, r0
 80097ce:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	f003 0301 	and.w	r3, r3, #1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d016      	beq.n	8009808 <CAN_Rx_0x1815A7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 80097da:	6878      	ldr	r0, [r7, #4]
 80097dc:	2101      	movs	r1, #1
 80097de:	f7ff fe1d 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 80097e2:	7afb      	ldrb	r3, [r7, #11]
 80097e4:	68fa      	ldr	r2, [r7, #12]
 80097e6:	3302      	adds	r3, #2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7ff f93e 	bl	8008a70 <CAN_NODE_MO_Receive>
 80097f4:	4603      	mov	r3, r0
 80097f6:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 80097f8:	78bb      	ldrb	r3, [r7, #2]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <CAN_Rx_0x1815A7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 80097fe:	2301      	movs	r3, #1
 8009800:	707b      	strb	r3, [r7, #1]
 8009802:	e001      	b.n	8009808 <CAN_Rx_0x1815A7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009804:	2300      	movs	r3, #0
 8009806:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X1815A7F3();
 8009808:	f000 f9e0 	bl	8009bcc <process_Rx_CAN_0X1815A7F3>
}
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
 8009812:	bf00      	nop
 8009814:	08013958 	.word	0x08013958

08009818 <CAN_Rx_0x180CA7F3>:


void CAN_Rx_0x180CA7F3(void)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800981e:	4b1c      	ldr	r3, [pc, #112]	; (8009890 <CAN_Rx_0x180CA7F3+0x78>)
 8009820:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009822:	2318      	movs	r3, #24
 8009824:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 8009826:	7afb      	ldrb	r3, [r7, #11]
 8009828:	68fa      	ldr	r2, [r7, #12]
 800982a:	3302      	adds	r3, #2
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4413      	add	r3, r2
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 8009836:	7afb      	ldrb	r3, [r7, #11]
 8009838:	68fa      	ldr	r2, [r7, #12]
 800983a:	3302      	adds	r3, #2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	4413      	add	r3, r2
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	4618      	mov	r0, r3
 8009844:	f7ff f946 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 8009848:	4603      	mov	r3, r0
 800984a:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800984c:	78fb      	ldrb	r3, [r7, #3]
 800984e:	f003 0301 	and.w	r3, r3, #1
 8009852:	2b00      	cmp	r3, #0
 8009854:	d016      	beq.n	8009884 <CAN_Rx_0x180CA7F3+0x6c>
	{
	  // Clear the flag
	  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	2101      	movs	r1, #1
 800985a:	f7ff fddf 	bl	800941c <XMC_CAN_MO_ResetStatus>
	  // Read the received Message object
	  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800985e:	7afb      	ldrb	r3, [r7, #11]
 8009860:	68fa      	ldr	r2, [r7, #12]
 8009862:	3302      	adds	r3, #2
 8009864:	009b      	lsls	r3, r3, #2
 8009866:	4413      	add	r3, r2
 8009868:	685b      	ldr	r3, [r3, #4]
 800986a:	4618      	mov	r0, r3
 800986c:	f7ff f900 	bl	8008a70 <CAN_NODE_MO_Receive>
 8009870:	4603      	mov	r3, r0
 8009872:	70bb      	strb	r3, [r7, #2]

	  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 8009874:	78bb      	ldrb	r3, [r7, #2]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d102      	bne.n	8009880 <CAN_Rx_0x180CA7F3+0x68>
	  {
	    // message object receive success.
		  test = 1;
 800987a:	2301      	movs	r3, #1
 800987c:	707b      	strb	r3, [r7, #1]
 800987e:	e001      	b.n	8009884 <CAN_Rx_0x180CA7F3+0x6c>
	  }
	  else
	  {
	    // message object failed to receive.
		  test = 0;
 8009880:	2300      	movs	r3, #0
 8009882:	707b      	strb	r3, [r7, #1]
	  }
	}
	process_Rx_CAN_0X180CA7F3();
 8009884:	f000 fa7e 	bl	8009d84 <process_Rx_CAN_0X180CA7F3>
}
 8009888:	3710      	adds	r7, #16
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	bf00      	nop
 8009890:	08013958 	.word	0x08013958

08009894 <process_Rx_CAN_0X1810A7F3>:


void process_Rx_CAN_0X1810A7F3(void)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800989a:	4b11      	ldr	r3, [pc, #68]	; (80098e0 <process_Rx_CAN_0X1810A7F3+0x4c>)
 800989c:	60fb      	str	r3, [r7, #12]

	mo_index = 22;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800989e:	2316      	movs	r3, #22
 80098a0:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1810A7F3].CAN_Data[0];
 80098a2:	4b10      	ldr	r3, [pc, #64]	; (80098e4 <process_Rx_CAN_0X1810A7F3+0x50>)
 80098a4:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 80098a6:	7afb      	ldrb	r3, [r7, #11]
 80098a8:	68fa      	ldr	r2, [r7, #12]
 80098aa:	3302      	adds	r3, #2
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4413      	add	r3, r2
 80098b0:	685b      	ldr	r3, [r3, #4]
 80098b2:	4618      	mov	r0, r3
 80098b4:	6879      	ldr	r1, [r7, #4]
 80098b6:	f000 ff8b 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	//charging_started = ((tempData[0]) & 2);

	charge_complete = 0x00;
 80098ba:	4b0b      	ldr	r3, [pc, #44]	; (80098e8 <process_Rx_CAN_0X1810A7F3+0x54>)
 80098bc:	2200      	movs	r2, #0
 80098be:	701a      	strb	r2, [r3, #0]
	if(((tempData[6] >> 4) & 0x01))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	3306      	adds	r3, #6
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	091b      	lsrs	r3, r3, #4
 80098c8:	b2db      	uxtb	r3, r3
 80098ca:	f003 0301 	and.w	r3, r3, #1
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d002      	beq.n	80098d8 <process_Rx_CAN_0X1810A7F3+0x44>
		charge_complete = 0x10;
 80098d2:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <process_Rx_CAN_0X1810A7F3+0x54>)
 80098d4:	2210      	movs	r2, #16
 80098d6:	701a      	strb	r2, [r3, #0]
}
 80098d8:	3710      	adds	r7, #16
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	08013958 	.word	0x08013958
 80098e4:	1ffe9270 	.word	0x1ffe9270
 80098e8:	1fff485d 	.word	0x1fff485d

080098ec <process_Rx_CAN_0X180EA7F3>:

void process_Rx_CAN_0X180EA7F3(void)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
	int8_t *tempData, mo_index;
	static unsigned int charge_count = 0, c4;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 80098f2:	4b70      	ldr	r3, [pc, #448]	; (8009ab4 <process_Rx_CAN_0X180EA7F3+0x1c8>)
 80098f4:	617b      	str	r3, [r7, #20]

	mo_index = 20;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 80098f6:	2314      	movs	r3, #20
 80098f8:	74fb      	strb	r3, [r7, #19]

	tempData = &CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0];
 80098fa:	4b6f      	ldr	r3, [pc, #444]	; (8009ab8 <process_Rx_CAN_0X180EA7F3+0x1cc>)
 80098fc:	60fb      	str	r3, [r7, #12]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 80098fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009902:	697a      	ldr	r2, [r7, #20]
 8009904:	3302      	adds	r3, #2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	4413      	add	r3, r2
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	4618      	mov	r0, r3
 800990e:	68f9      	ldr	r1, [r7, #12]
 8009910:	f000 ff5e 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	ChargeCurrentLimit = ((uint16_t)(((uint16_t)tempData[3] << 8) | (uint8_t)tempData[2]))/10;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	3303      	adds	r3, #3
 8009918:	781b      	ldrb	r3, [r3, #0]
 800991a:	b25b      	sxtb	r3, r3
 800991c:	b29b      	uxth	r3, r3
 800991e:	021b      	lsls	r3, r3, #8
 8009920:	b29a      	uxth	r2, r3
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	3302      	adds	r3, #2
 8009926:	781b      	ldrb	r3, [r3, #0]
 8009928:	b2db      	uxtb	r3, r3
 800992a:	b29b      	uxth	r3, r3
 800992c:	4313      	orrs	r3, r2
 800992e:	b29b      	uxth	r3, r3
 8009930:	b29b      	uxth	r3, r3
 8009932:	4a62      	ldr	r2, [pc, #392]	; (8009abc <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009934:	fba2 2303 	umull	r2, r3, r2, r3
 8009938:	08db      	lsrs	r3, r3, #3
 800993a:	b29a      	uxth	r2, r3
 800993c:	4b60      	ldr	r3, [pc, #384]	; (8009ac0 <process_Rx_CAN_0X180EA7F3+0x1d4>)
 800993e:	801a      	strh	r2, [r3, #0]
	DischargeCurrentLimit = ((int)(((int)tempData[5] << 8) | (int)tempData[4]))/10;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	3305      	adds	r3, #5
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	b25b      	sxtb	r3, r3
 8009948:	021a      	lsls	r2, r3, #8
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	3304      	adds	r3, #4
 800994e:	781b      	ldrb	r3, [r3, #0]
 8009950:	b25b      	sxtb	r3, r3
 8009952:	4313      	orrs	r3, r2
 8009954:	4a5b      	ldr	r2, [pc, #364]	; (8009ac4 <process_Rx_CAN_0X180EA7F3+0x1d8>)
 8009956:	fb82 1203 	smull	r1, r2, r2, r3
 800995a:	1092      	asrs	r2, r2, #2
 800995c:	17db      	asrs	r3, r3, #31
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	b29a      	uxth	r2, r3
 8009962:	4b59      	ldr	r3, [pc, #356]	; (8009ac8 <process_Rx_CAN_0X180EA7F3+0x1dc>)
 8009964:	801a      	strh	r2, [r3, #0]
	RegenerativeCurrentLimit = ((uint16_t)(((uint16_t)tempData[7] << 8) | (uint8_t)tempData[6]))/10;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	3307      	adds	r3, #7
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	b25b      	sxtb	r3, r3
 800996e:	b29b      	uxth	r3, r3
 8009970:	021b      	lsls	r3, r3, #8
 8009972:	b29a      	uxth	r2, r3
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	3306      	adds	r3, #6
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	b2db      	uxtb	r3, r3
 800997c:	b29b      	uxth	r3, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	b29b      	uxth	r3, r3
 8009982:	b29b      	uxth	r3, r3
 8009984:	4a4d      	ldr	r2, [pc, #308]	; (8009abc <process_Rx_CAN_0X180EA7F3+0x1d0>)
 8009986:	fba2 2303 	umull	r2, r3, r2, r3
 800998a:	08db      	lsrs	r3, r3, #3
 800998c:	b29a      	uxth	r2, r3
 800998e:	4b4f      	ldr	r3, [pc, #316]	; (8009acc <process_Rx_CAN_0X180EA7F3+0x1e0>)
 8009990:	801a      	strh	r2, [r3, #0]
//	int d =((uint16_t)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
	PackCurrent =  ((int)(((int)tempData[1] << 8) | (int8_t)tempData[0]))/10;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	3301      	adds	r3, #1
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	b25b      	sxtb	r3, r3
 800999a:	021a      	lsls	r2, r3, #8
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	b25b      	sxtb	r3, r3
 80099a2:	4313      	orrs	r3, r2
 80099a4:	4a47      	ldr	r2, [pc, #284]	; (8009ac4 <process_Rx_CAN_0X180EA7F3+0x1d8>)
 80099a6:	fb82 1203 	smull	r1, r2, r2, r3
 80099aa:	1092      	asrs	r2, r2, #2
 80099ac:	17db      	asrs	r3, r3, #31
 80099ae:	1ad3      	subs	r3, r2, r3
 80099b0:	4a47      	ldr	r2, [pc, #284]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80099b2:	6013      	str	r3, [r2, #0]

	static int c = 0;// hv_count = 0;
	if((PackCurrent > 1))
 80099b4:	4b46      	ldr	r3, [pc, #280]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	2b01      	cmp	r3, #1
 80099ba:	dd37      	ble.n	8009a2c <process_Rx_CAN_0X180EA7F3+0x140>
	{
		if(charge_count++ > 20)
 80099bc:	4b45      	ldr	r3, [pc, #276]	; (8009ad4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	1c5a      	adds	r2, r3, #1
 80099c2:	4944      	ldr	r1, [pc, #272]	; (8009ad4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80099c4:	600a      	str	r2, [r1, #0]
 80099c6:	2b14      	cmp	r3, #20
 80099c8:	d905      	bls.n	80099d6 <process_Rx_CAN_0X180EA7F3+0xea>
		{
			charging_started = 1;
 80099ca:	4b43      	ldr	r3, [pc, #268]	; (8009ad8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 80099cc:	2201      	movs	r2, #1
 80099ce:	701a      	strb	r2, [r3, #0]
			charge_count = 0;
 80099d0:	4b40      	ldr	r3, [pc, #256]	; (8009ad4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	601a      	str	r2, [r3, #0]
		}

		if(Regenration_flag || RPM)
 80099d6:	4b41      	ldr	r3, [pc, #260]	; (8009adc <process_Rx_CAN_0X180EA7F3+0x1f0>)
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d103      	bne.n	80099e6 <process_Rx_CAN_0X180EA7F3+0xfa>
 80099de:	4b40      	ldr	r3, [pc, #256]	; (8009ae0 <process_Rx_CAN_0X180EA7F3+0x1f4>)
 80099e0:	881b      	ldrh	r3, [r3, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d01e      	beq.n	8009a24 <process_Rx_CAN_0X180EA7F3+0x138>
		{

			//HvBatteryPower = 10 * 58;PackVoltage;
			charge_count = charging_started = 0;
 80099e6:	4b3c      	ldr	r3, [pc, #240]	; (8009ad8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 80099e8:	2200      	movs	r2, #0
 80099ea:	701a      	strb	r2, [r3, #0]
 80099ec:	4b39      	ldr	r3, [pc, #228]	; (8009ad4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 80099ee:	2200      	movs	r2, #0
 80099f0:	601a      	str	r2, [r3, #0]
			HvBatteryPower = PackCurrent;
 80099f2:	4b37      	ldr	r3, [pc, #220]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a3b      	ldr	r2, [pc, #236]	; (8009ae4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 80099f8:	6013      	str	r3, [r2, #0]
			hv_count = 1;
 80099fa:	4b3b      	ldr	r3, [pc, #236]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 80099fc:	2201      	movs	r2, #1
 80099fe:	801a      	strh	r2, [r3, #0]
			if(PackCurrent > c)
 8009a00:	4b33      	ldr	r3, [pc, #204]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	4b39      	ldr	r3, [pc, #228]	; (8009aec <process_Rx_CAN_0X180EA7F3+0x200>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	dd0b      	ble.n	8009a24 <process_Rx_CAN_0X180EA7F3+0x138>
				{
				if((hv_count++ < 2))
 8009a0c:	4b36      	ldr	r3, [pc, #216]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a0e:	881b      	ldrh	r3, [r3, #0]
 8009a10:	1c5a      	adds	r2, r3, #1
 8009a12:	b291      	uxth	r1, r2
 8009a14:	4a34      	ldr	r2, [pc, #208]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a16:	8011      	strh	r1, [r2, #0]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d803      	bhi.n	8009a24 <process_Rx_CAN_0X180EA7F3+0x138>
					c = PackCurrent;
 8009a1c:	4b2c      	ldr	r3, [pc, #176]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a32      	ldr	r2, [pc, #200]	; (8009aec <process_Rx_CAN_0X180EA7F3+0x200>)
 8009a22:	6013      	str	r3, [r2, #0]
				else if(PackCurrent < HvBatteryPower)
				{
					//HvBatteryPower = c * 58;PackVoltage;
				}
		}
		c4 = 0;
 8009a24:	4b32      	ldr	r3, [pc, #200]	; (8009af0 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e010      	b.n	8009a4e <process_Rx_CAN_0X180EA7F3+0x162>

		//charge_count++;
	}
	else if((PackCurrent <= 0))
 8009a2c:	4b28      	ldr	r3, [pc, #160]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	dc0c      	bgt.n	8009a4e <process_Rx_CAN_0X180EA7F3+0x162>
	{
		charge_count = charging_started = 0;
 8009a34:	4b28      	ldr	r3, [pc, #160]	; (8009ad8 <process_Rx_CAN_0X180EA7F3+0x1ec>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	4b26      	ldr	r3, [pc, #152]	; (8009ad4 <process_Rx_CAN_0X180EA7F3+0x1e8>)
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	601a      	str	r2, [r3, #0]
		HvBatteryPower = c = 0;
 8009a40:	4b2a      	ldr	r3, [pc, #168]	; (8009aec <process_Rx_CAN_0X180EA7F3+0x200>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	601a      	str	r2, [r3, #0]
 8009a46:	4b29      	ldr	r3, [pc, #164]	; (8009aec <process_Rx_CAN_0X180EA7F3+0x200>)
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a26      	ldr	r2, [pc, #152]	; (8009ae4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009a4c:	6013      	str	r3, [r2, #0]
	}

if( (hv_count == 1) )
 8009a4e:	4b26      	ldr	r3, [pc, #152]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a50:	881b      	ldrh	r3, [r3, #0]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d10d      	bne.n	8009a72 <process_Rx_CAN_0X180EA7F3+0x186>
{
	HvBatteryPower = HvBatteryPower * 58;PackVoltage;
 8009a56:	4b23      	ldr	r3, [pc, #140]	; (8009ae4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	223a      	movs	r2, #58	; 0x3a
 8009a5c:	fb02 f303 	mul.w	r3, r2, r3
 8009a60:	4a20      	ldr	r2, [pc, #128]	; (8009ae4 <process_Rx_CAN_0X180EA7F3+0x1f8>)
 8009a62:	6013      	str	r3, [r2, #0]
	hv_count++;
 8009a64:	4b20      	ldr	r3, [pc, #128]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	b29a      	uxth	r2, r3
 8009a6c:	4b1e      	ldr	r3, [pc, #120]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a6e:	801a      	strh	r2, [r3, #0]
 8009a70:	e006      	b.n	8009a80 <process_Rx_CAN_0X180EA7F3+0x194>

}
else if(hv_count > 10)
 8009a72:	4b1d      	ldr	r3, [pc, #116]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a74:	881b      	ldrh	r3, [r3, #0]
 8009a76:	2b0a      	cmp	r3, #10
 8009a78:	d902      	bls.n	8009a80 <process_Rx_CAN_0X180EA7F3+0x194>
	hv_count = 0;
 8009a7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ae8 <process_Rx_CAN_0X180EA7F3+0x1fc>)
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	801a      	strh	r2, [r3, #0]

	//OBDII_CAN[can_0x01].CAN_Data[2] = tempData[1];
	//OBDII_CAN[can_0x01].CAN_Data[3] = tempData[0];
if(PackCurrent < c4)
 8009a80:	4b13      	ldr	r3, [pc, #76]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	461a      	mov	r2, r3
 8009a86:	4b1a      	ldr	r3, [pc, #104]	; (8009af0 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d207      	bcs.n	8009a9e <process_Rx_CAN_0X180EA7F3+0x1b2>
{
	int a;
	a++;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	3301      	adds	r3, #1
 8009a92:	60bb      	str	r3, [r7, #8]
	c4 = PackCurrent;
 8009a94:	4b0e      	ldr	r3, [pc, #56]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	461a      	mov	r2, r3
 8009a9a:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <process_Rx_CAN_0X180EA7F3+0x204>)
 8009a9c:	601a      	str	r2, [r3, #0]
}
if(PackCurrent < -10)
 8009a9e:	4b0c      	ldr	r3, [pc, #48]	; (8009ad0 <process_Rx_CAN_0X180EA7F3+0x1e4>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f113 0f0a 	cmn.w	r3, #10
 8009aa6:	da02      	bge.n	8009aae <process_Rx_CAN_0X180EA7F3+0x1c2>
{
	int a;
	a++;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	607b      	str	r3, [r7, #4]
}
}
 8009aae:	3718      	adds	r7, #24
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	08013958 	.word	0x08013958
 8009ab8:	1ffe9258 	.word	0x1ffe9258
 8009abc:	cccccccd 	.word	0xcccccccd
 8009ac0:	1fff48d8 	.word	0x1fff48d8
 8009ac4:	66666667 	.word	0x66666667
 8009ac8:	1fff47fe 	.word	0x1fff47fe
 8009acc:	1fff4824 	.word	0x1fff4824
 8009ad0:	1fff481c 	.word	0x1fff481c
 8009ad4:	1fff4480 	.word	0x1fff4480
 8009ad8:	1fff485c 	.word	0x1fff485c
 8009adc:	1fff48da 	.word	0x1fff48da
 8009ae0:	1fff4818 	.word	0x1fff4818
 8009ae4:	1fff4820 	.word	0x1fff4820
 8009ae8:	1fff483c 	.word	0x1fff483c
 8009aec:	1fff4484 	.word	0x1fff4484
 8009af0:	1fff4488 	.word	0x1fff4488

08009af4 <process_Rx_CAN_0X180FA7F3>:

void process_Rx_CAN_0X180FA7F3(void)
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
	int PackCurent = 0;
 8009afa:	2300      	movs	r3, #0
 8009afc:	60fb      	str	r3, [r7, #12]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009afe:	4b20      	ldr	r3, [pc, #128]	; (8009b80 <process_Rx_CAN_0X180FA7F3+0x8c>)
 8009b00:	60bb      	str	r3, [r7, #8]

	mo_index = 21;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009b02:	2315      	movs	r3, #21
 8009b04:	71fb      	strb	r3, [r7, #7]

	tempData = &CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0];
 8009b06:	4b1f      	ldr	r3, [pc, #124]	; (8009b84 <process_Rx_CAN_0X180FA7F3+0x90>)
 8009b08:	603b      	str	r3, [r7, #0]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009b0a:	79fb      	ldrb	r3, [r7, #7]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	3302      	adds	r3, #2
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	4618      	mov	r0, r3
 8009b18:	6839      	ldr	r1, [r7, #0]
 8009b1a:	f000 fe59 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	Bms_SOC = ((uint16_t)tempData[1] << 8) | tempData[0];
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	3301      	adds	r3, #1
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	021b      	lsls	r3, r3, #8
 8009b26:	b29a      	uxth	r2, r3
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	781b      	ldrb	r3, [r3, #0]
 8009b2c:	b29b      	uxth	r3, r3
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	b29b      	uxth	r3, r3
 8009b32:	b29a      	uxth	r2, r3
 8009b34:	4b14      	ldr	r3, [pc, #80]	; (8009b88 <process_Rx_CAN_0X180FA7F3+0x94>)
 8009b36:	801a      	strh	r2, [r3, #0]

	Bms_SOH = (((uint16_t)tempData[3] << 8) | tempData[2]) / 10;
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	3303      	adds	r3, #3
 8009b3c:	781b      	ldrb	r3, [r3, #0]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	3202      	adds	r2, #2
 8009b44:	7812      	ldrb	r2, [r2, #0]
 8009b46:	4313      	orrs	r3, r2
 8009b48:	4a10      	ldr	r2, [pc, #64]	; (8009b8c <process_Rx_CAN_0X180FA7F3+0x98>)
 8009b4a:	fb82 1203 	smull	r1, r2, r2, r3
 8009b4e:	1092      	asrs	r2, r2, #2
 8009b50:	17db      	asrs	r3, r3, #31
 8009b52:	1ad3      	subs	r3, r2, r3
 8009b54:	b29a      	uxth	r2, r3
 8009b56:	4b0e      	ldr	r3, [pc, #56]	; (8009b90 <process_Rx_CAN_0X180FA7F3+0x9c>)
 8009b58:	801a      	strh	r2, [r3, #0]

	PackVoltage = (((uint16_t)tempData[7] << 8) | tempData[6])/10;
 8009b5a:	683b      	ldr	r3, [r7, #0]
 8009b5c:	3307      	adds	r3, #7
 8009b5e:	781b      	ldrb	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	683a      	ldr	r2, [r7, #0]
 8009b64:	3206      	adds	r2, #6
 8009b66:	7812      	ldrb	r2, [r2, #0]
 8009b68:	4313      	orrs	r3, r2
 8009b6a:	4a08      	ldr	r2, [pc, #32]	; (8009b8c <process_Rx_CAN_0X180FA7F3+0x98>)
 8009b6c:	fb82 1203 	smull	r1, r2, r2, r3
 8009b70:	1092      	asrs	r2, r2, #2
 8009b72:	17db      	asrs	r3, r3, #31
 8009b74:	1ad3      	subs	r3, r2, r3
 8009b76:	4a07      	ldr	r2, [pc, #28]	; (8009b94 <process_Rx_CAN_0X180FA7F3+0xa0>)
 8009b78:	6013      	str	r3, [r2, #0]

}
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	08013958 	.word	0x08013958
 8009b84:	1ffe9264 	.word	0x1ffe9264
 8009b88:	1fff48c4 	.word	0x1fff48c4
 8009b8c:	66666667 	.word	0x66666667
 8009b90:	1fff48cc 	.word	0x1fff48cc
 8009b94:	1fff48dc 	.word	0x1fff48dc

08009b98 <process_Rx_CAN_0X1814A7F3>:
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);

}

void process_Rx_CAN_0X1814A7F3(void)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <process_Rx_CAN_0X1814A7F3+0x2c>)
 8009ba0:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009ba2:	2317      	movs	r3, #23
 8009ba4:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1814A7F3].CAN_Data[0];
 8009ba6:	4b08      	ldr	r3, [pc, #32]	; (8009bc8 <process_Rx_CAN_0X1814A7F3+0x30>)
 8009ba8:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009baa:	7afb      	ldrb	r3, [r7, #11]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	3302      	adds	r3, #2
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	4413      	add	r3, r2
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	6879      	ldr	r1, [r7, #4]
 8009bba:	f000 fe09 	bl	800a7d0 <CAN_NODE_MO_ReadData>

}
 8009bbe:	3710      	adds	r7, #16
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	08013958 	.word	0x08013958
 8009bc8:	1ffe9294 	.word	0x1ffe9294

08009bcc <process_Rx_CAN_0X1815A7F3>:

void process_Rx_CAN_0X1815A7F3(void)
{
 8009bcc:	b580      	push	{r7, lr}
 8009bce:	b084      	sub	sp, #16
 8009bd0:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009bd2:	4b09      	ldr	r3, [pc, #36]	; (8009bf8 <process_Rx_CAN_0X1815A7F3+0x2c>)
 8009bd4:	60fb      	str	r3, [r7, #12]

	mo_index = 23;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009bd6:	2317      	movs	r3, #23
 8009bd8:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1815A7F3].CAN_Data[0];
 8009bda:	4b08      	ldr	r3, [pc, #32]	; (8009bfc <process_Rx_CAN_0X1815A7F3+0x30>)
 8009bdc:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009bde:	7afb      	ldrb	r3, [r7, #11]
 8009be0:	68fa      	ldr	r2, [r7, #12]
 8009be2:	3302      	adds	r3, #2
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	685b      	ldr	r3, [r3, #4]
 8009bea:	4618      	mov	r0, r3
 8009bec:	6879      	ldr	r1, [r7, #4]
 8009bee:	f000 fdef 	bl	800a7d0 <CAN_NODE_MO_ReadData>

}
 8009bf2:	3710      	adds	r7, #16
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	bd80      	pop	{r7, pc}
 8009bf8:	08013958 	.word	0x08013958
 8009bfc:	1ffe92a0 	.word	0x1ffe92a0

08009c00 <process_Rx_CAN_0X1808A7F3>:


void process_Rx_CAN_0X1808A7F3(void)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b084      	sub	sp, #16
 8009c04:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009c06:	4b09      	ldr	r3, [pc, #36]	; (8009c2c <process_Rx_CAN_0X1808A7F3+0x2c>)
 8009c08:	60fb      	str	r3, [r7, #12]

	mo_index = 12;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009c0a:	230c      	movs	r3, #12
 8009c0c:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0];
 8009c0e:	4b08      	ldr	r3, [pc, #32]	; (8009c30 <process_Rx_CAN_0X1808A7F3+0x30>)
 8009c10:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009c12:	7afb      	ldrb	r3, [r7, #11]
 8009c14:	68fa      	ldr	r2, [r7, #12]
 8009c16:	3302      	adds	r3, #2
 8009c18:	009b      	lsls	r3, r3, #2
 8009c1a:	4413      	add	r3, r2
 8009c1c:	685b      	ldr	r3, [r3, #4]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	6879      	ldr	r1, [r7, #4]
 8009c22:	f000 fdd5 	bl	800a7d0 <CAN_NODE_MO_ReadData>

}
 8009c26:	3710      	adds	r7, #16
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}
 8009c2c:	08013958 	.word	0x08013958
 8009c30:	1ffe92b8 	.word	0x1ffe92b8

08009c34 <process_Rx_CAN_0X180AA7F3>:


void process_Rx_CAN_0X180AA7F3(void)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
	BMS_Avg_temp=0;
 8009c3a:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	601a      	str	r2, [r3, #0]
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009c40:	4b22      	ldr	r3, [pc, #136]	; (8009ccc <process_Rx_CAN_0X180AA7F3+0x98>)
 8009c42:	60fb      	str	r3, [r7, #12]

	mo_index = 13;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009c44:	230d      	movs	r3, #13
 8009c46:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180AA7F3].CAN_Data[0];
 8009c48:	4b21      	ldr	r3, [pc, #132]	; (8009cd0 <process_Rx_CAN_0X180AA7F3+0x9c>)
 8009c4a:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009c4c:	7afb      	ldrb	r3, [r7, #11]
 8009c4e:	68fa      	ldr	r2, [r7, #12]
 8009c50:	3302      	adds	r3, #2
 8009c52:	009b      	lsls	r3, r3, #2
 8009c54:	4413      	add	r3, r2
 8009c56:	685b      	ldr	r3, [r3, #4]
 8009c58:	4618      	mov	r0, r3
 8009c5a:	6879      	ldr	r1, [r7, #4]
 8009c5c:	f000 fdb8 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	3301      	adds	r3, #1
 8009c64:	781b      	ldrb	r3, [r3, #0]
 8009c66:	021b      	lsls	r3, r3, #8
 8009c68:	687a      	ldr	r2, [r7, #4]
 8009c6a:	7812      	ldrb	r2, [r2, #0]
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	4a16      	ldr	r2, [pc, #88]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009c70:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	3303      	adds	r3, #3
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	3202      	adds	r2, #2
 8009c7e:	7812      	ldrb	r2, [r2, #0]
 8009c80:	431a      	orrs	r2, r3
 8009c82:	4b11      	ldr	r3, [pc, #68]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4413      	add	r3, r2
 8009c88:	4a0f      	ldr	r2, [pc, #60]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009c8a:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	3305      	adds	r3, #5
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	021b      	lsls	r3, r3, #8
 8009c94:	687a      	ldr	r2, [r7, #4]
 8009c96:	3204      	adds	r2, #4
 8009c98:	7812      	ldrb	r2, [r2, #0]
 8009c9a:	431a      	orrs	r2, r3
 8009c9c:	4b0a      	ldr	r3, [pc, #40]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4413      	add	r3, r2
 8009ca2:	4a09      	ldr	r2, [pc, #36]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009ca4:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	3307      	adds	r3, #7
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	3206      	adds	r2, #6
 8009cb2:	7812      	ldrb	r2, [r2, #0]
 8009cb4:	431a      	orrs	r2, r3
 8009cb6:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4413      	add	r3, r2
 8009cbc:	4a02      	ldr	r2, [pc, #8]	; (8009cc8 <process_Rx_CAN_0X180AA7F3+0x94>)
 8009cbe:	6013      	str	r3, [r2, #0]

}
 8009cc0:	3710      	adds	r7, #16
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	bd80      	pop	{r7, pc}
 8009cc6:	bf00      	nop
 8009cc8:	1fff48c8 	.word	0x1fff48c8
 8009ccc:	08013958 	.word	0x08013958
 8009cd0:	1ffe92c4 	.word	0x1ffe92c4

08009cd4 <process_Rx_CAN_0X180BA7F3>:


void process_Rx_CAN_0X180BA7F3(void)
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b084      	sub	sp, #16
 8009cd8:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009cda:	4b27      	ldr	r3, [pc, #156]	; (8009d78 <process_Rx_CAN_0X180BA7F3+0xa4>)
 8009cdc:	60fb      	str	r3, [r7, #12]

	mo_index = 14;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009cde:	230e      	movs	r3, #14
 8009ce0:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180BA7F3].CAN_Data[0];
 8009ce2:	4b26      	ldr	r3, [pc, #152]	; (8009d7c <process_Rx_CAN_0X180BA7F3+0xa8>)
 8009ce4:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009ce6:	7afb      	ldrb	r3, [r7, #11]
 8009ce8:	68fa      	ldr	r2, [r7, #12]
 8009cea:	3302      	adds	r3, #2
 8009cec:	009b      	lsls	r3, r3, #2
 8009cee:	4413      	add	r3, r2
 8009cf0:	685b      	ldr	r3, [r3, #4]
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	f000 fd6b 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	BMS_Avg_temp +=((int16_t)tempData[1] << 8) | tempData[0] ;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	021b      	lsls	r3, r3, #8
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	7812      	ldrb	r2, [r2, #0]
 8009d06:	431a      	orrs	r2, r3
 8009d08:	4b1d      	ldr	r3, [pc, #116]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	4a1c      	ldr	r2, [pc, #112]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d10:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[3] << 8) | tempData[2];
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	3303      	adds	r3, #3
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	021b      	lsls	r3, r3, #8
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	3202      	adds	r2, #2
 8009d1e:	7812      	ldrb	r2, [r2, #0]
 8009d20:	431a      	orrs	r2, r3
 8009d22:	4b17      	ldr	r3, [pc, #92]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4413      	add	r3, r2
 8009d28:	4a15      	ldr	r2, [pc, #84]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d2a:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[5] << 8) | tempData[4];
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	3305      	adds	r3, #5
 8009d30:	781b      	ldrb	r3, [r3, #0]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	687a      	ldr	r2, [r7, #4]
 8009d36:	3204      	adds	r2, #4
 8009d38:	7812      	ldrb	r2, [r2, #0]
 8009d3a:	431a      	orrs	r2, r3
 8009d3c:	4b10      	ldr	r3, [pc, #64]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4413      	add	r3, r2
 8009d42:	4a0f      	ldr	r2, [pc, #60]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d44:	6013      	str	r3, [r2, #0]
	BMS_Avg_temp += ((int16_t)tempData[7] << 8) | tempData[6];
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	3307      	adds	r3, #7
 8009d4a:	781b      	ldrb	r3, [r3, #0]
 8009d4c:	021b      	lsls	r3, r3, #8
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	3206      	adds	r2, #6
 8009d52:	7812      	ldrb	r2, [r2, #0]
 8009d54:	431a      	orrs	r2, r3
 8009d56:	4b0a      	ldr	r3, [pc, #40]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	4a08      	ldr	r2, [pc, #32]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d5e:	6013      	str	r3, [r2, #0]

	BMS_Avg_temp=BMS_Avg_temp/8;
 8009d60:	4b07      	ldr	r3, [pc, #28]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	da00      	bge.n	8009d6a <process_Rx_CAN_0X180BA7F3+0x96>
 8009d68:	3307      	adds	r3, #7
 8009d6a:	10db      	asrs	r3, r3, #3
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <process_Rx_CAN_0X180BA7F3+0xac>)
 8009d70:	601a      	str	r2, [r3, #0]

}
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}
 8009d78:	08013958 	.word	0x08013958
 8009d7c:	1ffe92d0 	.word	0x1ffe92d0
 8009d80:	1fff48c8 	.word	0x1fff48c8

08009d84 <process_Rx_CAN_0X180CA7F3>:



void process_Rx_CAN_0X180CA7F3(void)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b084      	sub	sp, #16
 8009d88:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <process_Rx_CAN_0X180CA7F3+0x90>)
 8009d8c:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 8009d8e:	2318      	movs	r3, #24
 8009d90:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[0];
 8009d92:	4b21      	ldr	r3, [pc, #132]	; (8009e18 <process_Rx_CAN_0X180CA7F3+0x94>)
 8009d94:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 8009d96:	7afb      	ldrb	r3, [r7, #11]
 8009d98:	68fa      	ldr	r2, [r7, #12]
 8009d9a:	3302      	adds	r3, #2
 8009d9c:	009b      	lsls	r3, r3, #2
 8009d9e:	4413      	add	r3, r2
 8009da0:	685b      	ldr	r3, [r3, #4]
 8009da2:	4618      	mov	r0, r3
 8009da4:	6879      	ldr	r1, [r7, #4]
 8009da6:	f000 fd13 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	Bms_minTemp = ((int16_t)tempData[1] << 8) | tempData[0];
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	3301      	adds	r3, #1
 8009dae:	781b      	ldrb	r3, [r3, #0]
 8009db0:	021b      	lsls	r3, r3, #8
 8009db2:	b29a      	uxth	r2, r3
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	781b      	ldrb	r3, [r3, #0]
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	4313      	orrs	r3, r2
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	4b17      	ldr	r3, [pc, #92]	; (8009e1c <process_Rx_CAN_0X180CA7F3+0x98>)
 8009dc0:	801a      	strh	r2, [r3, #0]
	Bms_minTemp = Bms_minTemp / 10;
 8009dc2:	4b16      	ldr	r3, [pc, #88]	; (8009e1c <process_Rx_CAN_0X180CA7F3+0x98>)
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	b21b      	sxth	r3, r3
 8009dc8:	4a15      	ldr	r2, [pc, #84]	; (8009e20 <process_Rx_CAN_0X180CA7F3+0x9c>)
 8009dca:	fb82 1203 	smull	r1, r2, r2, r3
 8009dce:	1092      	asrs	r2, r2, #2
 8009dd0:	17db      	asrs	r3, r3, #31
 8009dd2:	1ad3      	subs	r3, r2, r3
 8009dd4:	b29a      	uxth	r2, r3
 8009dd6:	4b11      	ldr	r3, [pc, #68]	; (8009e1c <process_Rx_CAN_0X180CA7F3+0x98>)
 8009dd8:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = ((int16_t)tempData[3] << 8) | tempData[2];
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	3303      	adds	r3, #3
 8009dde:	781b      	ldrb	r3, [r3, #0]
 8009de0:	021b      	lsls	r3, r3, #8
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	3302      	adds	r3, #2
 8009de8:	781b      	ldrb	r3, [r3, #0]
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	4b0c      	ldr	r3, [pc, #48]	; (8009e24 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009df2:	801a      	strh	r2, [r3, #0]
	Bms_maxTemp = Bms_maxTemp / 10;
 8009df4:	4b0b      	ldr	r3, [pc, #44]	; (8009e24 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009df6:	881b      	ldrh	r3, [r3, #0]
 8009df8:	b21b      	sxth	r3, r3
 8009dfa:	4a09      	ldr	r2, [pc, #36]	; (8009e20 <process_Rx_CAN_0X180CA7F3+0x9c>)
 8009dfc:	fb82 1203 	smull	r1, r2, r2, r3
 8009e00:	1092      	asrs	r2, r2, #2
 8009e02:	17db      	asrs	r3, r3, #31
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	b29a      	uxth	r2, r3
 8009e08:	4b06      	ldr	r3, [pc, #24]	; (8009e24 <process_Rx_CAN_0X180CA7F3+0xa0>)
 8009e0a:	801a      	strh	r2, [r3, #0]

}
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08013958 	.word	0x08013958
 8009e18:	1ffe92ac 	.word	0x1ffe92ac
 8009e1c:	1fff4844 	.word	0x1fff4844
 8009e20:	66666667 	.word	0x66666667
 8009e24:	1fff47fc 	.word	0x1fff47fc

08009e28 <Read_can_bms_29bit>:

void Read_can_bms_29bit(void)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
	CAN_Rx_0x1810A7F3();
 8009e2c:	f7ff fc3a 	bl	80096a4 <CAN_Rx_0x1810A7F3>
	CAN_Rx_0x180EA7F3();
 8009e30:	f7ff fbbc 	bl	80095ac <CAN_Rx_0x180EA7F3>
	CAN_Rx_0x180FA7F3();
 8009e34:	f7ff fbf8 	bl	8009628 <CAN_Rx_0x180FA7F3>
	CAN_Rx_0x1814A7F3();
 8009e38:	f7ff fc72 	bl	8009720 <CAN_Rx_0x1814A7F3>
	CAN_Rx_0x1815A7F3();
 8009e3c:	f7ff fcae 	bl	800979c <CAN_Rx_0x1815A7F3>
	CAN_Rx_0x180CA7F3();
 8009e40:	f7ff fcea 	bl	8009818 <CAN_Rx_0x180CA7F3>
	CAN_Rx_0x1808A7F3();
 8009e44:	f7ff faf8 	bl	8009438 <CAN_Rx_0x1808A7F3>
    CAN_Rx_0x180AA7F3();
 8009e48:	f7ff fb34 	bl	80094b4 <CAN_Rx_0x180AA7F3>
    CAN_Rx_0x180BA7F3();
 8009e4c:	f7ff fb70 	bl	8009530 <CAN_Rx_0x180BA7F3>
}
 8009e50:	bd80      	pop	{r7, pc}
 8009e52:	bf00      	nop

08009e54 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	61da      	str	r2, [r3, #28]
}
 8009e66:	370c      	adds	r7, #12
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6e:	4770      	bx	lr

08009e70 <Update_CAN_0x18FF0921>:
	{0x18FF2121, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
	{0x18FED911, {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}}
};

void Update_CAN_0x18FF0921(void)
{
 8009e70:	b580      	push	{r7, lr}
 8009e72:	b084      	sub	sp, #16
 8009e74:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009e76:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <Update_CAN_0x18FF0921+0x24>)
 8009e78:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF0921].CAN_Data[ZERO_BYTE];
 8009e7a:	4b07      	ldr	r3, [pc, #28]	; (8009e98 <Update_CAN_0x18FF0921+0x28>)
 8009e7c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF0921], tempData);
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	68db      	ldr	r3, [r3, #12]
 8009e82:	4618      	mov	r0, r3
 8009e84:	68b9      	ldr	r1, [r7, #8]
 8009e86:	f7fe fe05 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009e8e:	3710      	adds	r7, #16
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	08013958 	.word	0x08013958
 8009e98:	1ffe92dc 	.word	0x1ffe92dc

08009e9c <Update_CAN_0x0CF00400>:

void Update_CAN_0x0CF00400(void)
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b084      	sub	sp, #16
 8009ea0:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ea2:	4b07      	ldr	r3, [pc, #28]	; (8009ec0 <Update_CAN_0x0CF00400+0x24>)
 8009ea4:	60fb      	str	r3, [r7, #12]
	//to update battery temperature
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer;
//	CAN_MSG_DB[CAN_18FFB632].CAN_Data[THIRD_BYTE] = POwer >> 8;


	tempData = &CAN_MSG_DB[CAN_0CF00400].CAN_Data[ZERO_BYTE];
 8009ea6:	4b07      	ldr	r3, [pc, #28]	; (8009ec4 <Update_CAN_0x0CF00400+0x28>)
 8009ea8:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF00400], tempData);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	691b      	ldr	r3, [r3, #16]
 8009eae:	4618      	mov	r0, r3
 8009eb0:	68b9      	ldr	r1, [r7, #8]
 8009eb2:	f7fe fdef 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009eb6:	4603      	mov	r3, r0
 8009eb8:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009eba:	3710      	adds	r7, #16
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	08013958 	.word	0x08013958
 8009ec4:	1ffe92e8 	.word	0x1ffe92e8

08009ec8 <Update_CAN_0x18FFC621>:

void Update_CAN_0x18FFC621(void)
{
 8009ec8:	b580      	push	{r7, lr}
 8009eca:	b084      	sub	sp, #16
 8009ecc:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009ece:	4b07      	ldr	r3, [pc, #28]	; (8009eec <Update_CAN_0x18FFC621+0x24>)
 8009ed0:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FFC621].CAN_Data[ZERO_BYTE];
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <Update_CAN_0x18FFC621+0x28>)
 8009ed4:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFC621], tempData);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	695b      	ldr	r3, [r3, #20]
 8009eda:	4618      	mov	r0, r3
 8009edc:	68b9      	ldr	r1, [r7, #8]
 8009ede:	f7fe fdd9 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	08013958 	.word	0x08013958
 8009ef0:	1ffe92f4 	.word	0x1ffe92f4

08009ef4 <Update_CAN_0x18FFB632>:

void Update_CAN_0x18FFB632(void)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009efa:	4b12      	ldr	r3, [pc, #72]	; (8009f44 <Update_CAN_0x18FFB632+0x50>)
 8009efc:	60fb      	str	r3, [r7, #12]

	//to update SOC percentage byte         (0 to 100) to (10 to 100)
		//BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE], 10, 100, 0, 100);

	//to update SOC percentage byte         (0 to 100) to (10 to 100)
	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = Bms_SOC;
 8009efe:	4b12      	ldr	r3, [pc, #72]	; (8009f48 <Update_CAN_0x18FFB632+0x54>)
 8009f00:	881b      	ldrh	r3, [r3, #0]
 8009f02:	b2da      	uxtb	r2, r3
 8009f04:	4b11      	ldr	r3, [pc, #68]	; (8009f4c <Update_CAN_0x18FFB632+0x58>)
 8009f06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8009f0a:	4b10      	ldr	r3, [pc, #64]	; (8009f4c <Update_CAN_0x18FFB632+0x58>)
 8009f0c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8009f10:	4b0f      	ldr	r3, [pc, #60]	; (8009f50 <Update_CAN_0x18FFB632+0x5c>)
 8009f12:	701a      	strb	r2, [r3, #0]
 8009f14:	4b0e      	ldr	r3, [pc, #56]	; (8009f50 <Update_CAN_0x18FFB632+0x5c>)
 8009f16:	781a      	ldrb	r2, [r3, #0]
 8009f18:	4b0e      	ldr	r3, [pc, #56]	; (8009f54 <Update_CAN_0x18FFB632+0x60>)
 8009f1a:	701a      	strb	r2, [r3, #0]
//	Mapped_BMS_SOC = BMS_SOC = CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE] = map(Bms_SOC, 10, 100, 0, 100);

	//to update battery temperature
	CAN_MSG_DB[CAN_18FFB632].CAN_Data[SECOND_BYTE] = Bms_maxTemp;
 8009f1c:	4b0e      	ldr	r3, [pc, #56]	; (8009f58 <Update_CAN_0x18FFB632+0x64>)
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	b2da      	uxtb	r2, r3
 8009f22:	4b0a      	ldr	r3, [pc, #40]	; (8009f4c <Update_CAN_0x18FFB632+0x58>)
 8009f24:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

	//to update drive mode information
	//CAN_MSG_DB[CAN_18FFB632].CAN_Data[FOURTH_BYTE] = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];


	tempData = &CAN_MSG_DB[CAN_18FFB632].CAN_Data[ZERO_BYTE];
 8009f28:	4b0c      	ldr	r3, [pc, #48]	; (8009f5c <Update_CAN_0x18FFB632+0x68>)
 8009f2a:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FFB632], tempData);
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	699b      	ldr	r3, [r3, #24]
 8009f30:	4618      	mov	r0, r3
 8009f32:	68b9      	ldr	r1, [r7, #8]
 8009f34:	f7fe fdae 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009f3c:	3710      	adds	r7, #16
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	bd80      	pop	{r7, pc}
 8009f42:	bf00      	nop
 8009f44:	08013958 	.word	0x08013958
 8009f48:	1fff48c4 	.word	0x1fff48c4
 8009f4c:	1ffe92d8 	.word	0x1ffe92d8
 8009f50:	1fff4800 	.word	0x1fff4800
 8009f54:	1fff4804 	.word	0x1fff4804
 8009f58:	1fff47fc 	.word	0x1fff47fc
 8009f5c:	1ffe9300 	.word	0x1ffe9300

08009f60 <Update_CAN_0x0CF10121>:

void Update_CAN_0x0CF10121(void)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009f66:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <Update_CAN_0x0CF10121+0x44>)
 8009f68:	60fb      	str	r3, [r7, #12]

	// TO get the SOC percentage
	//Soc_perc = CAN_MSG_DB_BMS[CAN_0x102].CAN_Data[ZERO_BYTE];
	//calculate DTE
	//Dte = Soc_perc * 2U;
 	Dte = Bms_SOC * 2;
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <Update_CAN_0x0CF10121+0x48>)
 8009f6c:	881b      	ldrh	r3, [r3, #0]
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	817b      	strh	r3, [r7, #10]
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FOURTH_BYTE] = Dte;
 8009f72:	897b      	ldrh	r3, [r7, #10]
 8009f74:	b2da      	uxtb	r2, r3
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <Update_CAN_0x0CF10121+0x4c>)
 8009f78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	CAN_MSG_DB[CAN_0CF10121].CAN_Data[FIFTH_BYTE] = (Dte >> 8);
 8009f7c:	897b      	ldrh	r3, [r7, #10]
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	b2da      	uxtb	r2, r3
 8009f84:	4b09      	ldr	r3, [pc, #36]	; (8009fac <Update_CAN_0x0CF10121+0x4c>)
 8009f86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

	tempData = &CAN_MSG_DB[CAN_0CF10121].CAN_Data[ZERO_BYTE];
 8009f8a:	4b09      	ldr	r3, [pc, #36]	; (8009fb0 <Update_CAN_0x0CF10121+0x50>)
 8009f8c:	607b      	str	r3, [r7, #4]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_0CF10121], tempData);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	69db      	ldr	r3, [r3, #28]
 8009f92:	4618      	mov	r0, r3
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	f7fe fd7d 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	70fb      	strb	r3, [r7, #3]
	}
	else
	{
		// message object failed to update.
	}
}
 8009f9e:	3710      	adds	r7, #16
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	08013958 	.word	0x08013958
 8009fa8:	1fff48c4 	.word	0x1fff48c4
 8009fac:	1ffe92d8 	.word	0x1ffe92d8
 8009fb0:	1ffe930c 	.word	0x1ffe930c

08009fb4 <Update_CAN_0x18FEEE00>:

void Update_CAN_0x18FEEE00(void)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b084      	sub	sp, #16
 8009fb8:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009fba:	4b07      	ldr	r3, [pc, #28]	; (8009fd8 <Update_CAN_0x18FEEE00+0x24>)
 8009fbc:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FEEE00].CAN_Data[ZERO_BYTE];
 8009fbe:	4b07      	ldr	r3, [pc, #28]	; (8009fdc <Update_CAN_0x18FEEE00+0x28>)
 8009fc0:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FEEE00], tempData);
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	4618      	mov	r0, r3
 8009fc8:	68b9      	ldr	r1, [r7, #8]
 8009fca:	f7fe fd63 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009fce:	4603      	mov	r3, r0
 8009fd0:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009fd2:	3710      	adds	r7, #16
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	bd80      	pop	{r7, pc}
 8009fd8:	08013958 	.word	0x08013958
 8009fdc:	1ffe9318 	.word	0x1ffe9318

08009fe0 <Update_CAN_0x18FF2021>:

void Update_CAN_0x18FF2021(void)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b084      	sub	sp, #16
 8009fe4:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 8009fe6:	4b07      	ldr	r3, [pc, #28]	; (800a004 <Update_CAN_0x18FF2021+0x24>)
 8009fe8:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2021].CAN_Data[ZERO_BYTE];
 8009fea:	4b07      	ldr	r3, [pc, #28]	; (800a008 <Update_CAN_0x18FF2021+0x28>)
 8009fec:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[CAN_18FF2021], tempData);
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	68b9      	ldr	r1, [r7, #8]
 8009ff6:	f7fe fd4d 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 8009ffa:	4603      	mov	r3, r0
 8009ffc:	71fb      	strb	r3, [r7, #7]
	}
	else
	{
		// message object failed to update.
	}
}
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	08013958 	.word	0x08013958
 800a008:	1ffe9324 	.word	0x1ffe9324

0800a00c <Update_CAN_0x18FF2121>:

void Update_CAN_0x18FF2121(void)
{
 800a00c:	b580      	push	{r7, lr}
 800a00e:	b084      	sub	sp, #16
 800a010:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a012:	4b0c      	ldr	r3, [pc, #48]	; (800a044 <Update_CAN_0x18FF2121+0x38>)
 800a014:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FF2121].CAN_Data[ZERO_BYTE];
 800a016:	4b0c      	ldr	r3, [pc, #48]	; (800a048 <Update_CAN_0x18FF2121+0x3c>)
 800a018:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[29],tempData);
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a020:	4618      	mov	r0, r3
 800a022:	68b9      	ldr	r1, [r7, #8]
 800a024:	f7fe fd36 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a028:	4603      	mov	r3, r0
 800a02a:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a02c:	79fb      	ldrb	r3, [r7, #7]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d105      	bne.n	800a03e <Update_CAN_0x18FF2121+0x32>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[29]);
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a038:	4618      	mov	r0, r3
 800a03a:	f7fe fd07 	bl	8008a4c <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}
 800a044:	08013958 	.word	0x08013958
 800a048:	1ffe9330 	.word	0x1ffe9330

0800a04c <Update_CAN_0x18FED911>:

void Update_CAN_0x18FED911(void)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
	uint8_t *tempData;
	CAN_NODE_STATUS_t status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a052:	4b0b      	ldr	r3, [pc, #44]	; (800a080 <Update_CAN_0x18FED911+0x34>)
 800a054:	60fb      	str	r3, [r7, #12]

	tempData = &CAN_MSG_DB[CAN_18FED911].CAN_Data[ZERO_BYTE];
 800a056:	4b0b      	ldr	r3, [pc, #44]	; (800a084 <Update_CAN_0x18FED911+0x38>)
 800a058:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[15],tempData);
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a05e:	4618      	mov	r0, r3
 800a060:	68b9      	ldr	r1, [r7, #8]
 800a062:	f7fe fd17 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a066:	4603      	mov	r3, r0
 800a068:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a06a:	79fb      	ldrb	r3, [r7, #7]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d104      	bne.n	800a07a <Update_CAN_0x18FED911+0x2e>
	{
		// message object data updated.

		// transmit the data
		CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[15]);
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a074:	4618      	mov	r0, r3
 800a076:	f7fe fce9 	bl	8008a4c <CAN_NODE_MO_Transmit>
	}
	else
	{
		// message object failed to update.
	}
}
 800a07a:	3710      	adds	r7, #16
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	08013958 	.word	0x08013958
 800a084:	1ffe933c 	.word	0x1ffe933c

0800a088 <CAN_OUTPUT_CLUSTER>:


void CAN_OUTPUT_CLUSTER()
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a08e:	4b25      	ldr	r3, [pc, #148]	; (800a124 <CAN_OUTPUT_CLUSTER+0x9c>)
 800a090:	60bb      	str	r3, [r7, #8]
	CAN_NODE_STATUS_t mo_tranmit_status;
	CAN_NODE_STATUS_t status;
	uint16_t msg_count;

	/* update all message's data */
	Update_CAN_0x18FF0921();
 800a092:	f7ff feed 	bl	8009e70 <Update_CAN_0x18FF0921>
	Update_CAN_0x0CF00400();
 800a096:	f7ff ff01 	bl	8009e9c <Update_CAN_0x0CF00400>
	Update_CAN_0x18FFC621();
 800a09a:	f7ff ff15 	bl	8009ec8 <Update_CAN_0x18FFC621>
	Update_CAN_0x18FFB632();
 800a09e:	f7ff ff29 	bl	8009ef4 <Update_CAN_0x18FFB632>
	Update_CAN_0x0CF10121();
 800a0a2:	f7ff ff5d 	bl	8009f60 <Update_CAN_0x0CF10121>
	Update_CAN_0x18FEEE00();
 800a0a6:	f7ff ff85 	bl	8009fb4 <Update_CAN_0x18FEEE00>
	Update_CAN_0x18FF2021();
 800a0aa:	f7ff ff99 	bl	8009fe0 <Update_CAN_0x18FF2021>

/* will update separately */
	Update_CAN_0x18FF2121();
 800a0ae:	f7ff ffad 	bl	800a00c <Update_CAN_0x18FF2121>
	Update_CAN_0x18FED911();
 800a0b2:	f7ff ffcb 	bl	800a04c <Update_CAN_0x18FED911>
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	81fb      	strh	r3, [r7, #14]
 800a0ba:	e02c      	b.n	800a116 <CAN_OUTPUT_CLUSTER+0x8e>
	{
		MO_Ptr = HandlePtr1->lmobj_ptr[msg_count]->mo_ptr;
 800a0bc:	89fb      	ldrh	r3, [r7, #14]
 800a0be:	68ba      	ldr	r2, [r7, #8]
 800a0c0:	3302      	adds	r3, #2
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	4413      	add	r3, r2
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	607b      	str	r3, [r7, #4]

		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[msg_count]);
 800a0cc:	89fb      	ldrh	r3, [r7, #14]
 800a0ce:	68ba      	ldr	r2, [r7, #8]
 800a0d0:	3302      	adds	r3, #2
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	4413      	add	r3, r2
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	4618      	mov	r0, r3
 800a0da:	f7fe fcb7 	bl	8008a4c <CAN_NODE_MO_Transmit>
 800a0de:	4603      	mov	r3, r0
 800a0e0:	70fb      	strb	r3, [r7, #3]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800a0e2:	78fb      	ldrb	r3, [r7, #3]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d113      	bne.n	800a110 <CAN_OUTPUT_CLUSTER+0x88>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[msg_count]);	//msg_count, earlier it was 0 and working
 800a0e8:	89fb      	ldrh	r3, [r7, #14]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	009b      	lsls	r3, r3, #2
 800a0f0:	4413      	add	r3, r2
 800a0f2:	685b      	ldr	r3, [r3, #4]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7fe fced 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	70bb      	strb	r3, [r7, #2]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800a0fe:	78bb      	ldrb	r3, [r7, #2]
 800a100:	f003 0302 	and.w	r3, r3, #2
 800a104:	2b00      	cmp	r3, #0
 800a106:	d003      	beq.n	800a110 <CAN_OUTPUT_CLUSTER+0x88>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	2102      	movs	r1, #2
 800a10c:	f7ff fea2 	bl	8009e54 <XMC_CAN_MO_ResetStatus>
	Update_CAN_0x18FF2121();
	Update_CAN_0x18FED911();
/*                             */

	/* Shoot CAN messages on CAN bus */
	for(msg_count = 0; msg_count < CAN_TX_MO_COUNT_CLUSTER; msg_count++)
 800a110:	89fb      	ldrh	r3, [r7, #14]
 800a112:	3301      	adds	r3, #1
 800a114:	81fb      	strh	r3, [r7, #14]
 800a116:	89fb      	ldrh	r3, [r7, #14]
 800a118:	2b06      	cmp	r3, #6
 800a11a:	d9cf      	bls.n	800a0bc <CAN_OUTPUT_CLUSTER+0x34>
		else
		{
			// message object failed to transmit.
		}
	}
}
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	08013958 	.word	0x08013958

0800a128 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	61da      	str	r2, [r3, #28]
}
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <Read_CAN_0x1E5>:

};


void Read_CAN_0x1E5(void)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b084      	sub	sp, #16
 800a148:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a14a:	4b1c      	ldr	r3, [pc, #112]	; (800a1bc <Read_CAN_0x1E5+0x78>)
 800a14c:	60fb      	str	r3, [r7, #12]

	mo_index = 15;//CAN_RX_MO_HVAC_BASE + CAN_0x248;
 800a14e:	230f      	movs	r3, #15
 800a150:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a152:	7afb      	ldrb	r3, [r7, #11]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	3302      	adds	r3, #2
 800a158:	009b      	lsls	r3, r3, #2
 800a15a:	4413      	add	r3, r2
 800a15c:	685b      	ldr	r3, [r3, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a162:	7afb      	ldrb	r3, [r7, #11]
 800a164:	68fa      	ldr	r2, [r7, #12]
 800a166:	3302      	adds	r3, #2
 800a168:	009b      	lsls	r3, r3, #2
 800a16a:	4413      	add	r3, r2
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe fcb0 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a174:	4603      	mov	r3, r0
 800a176:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a178:	78fb      	ldrb	r3, [r7, #3]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d016      	beq.n	800a1b0 <Read_CAN_0x1E5+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	2101      	movs	r1, #1
 800a186:	f7ff ffcf 	bl	800a128 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a18a:	7afb      	ldrb	r3, [r7, #11]
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	3302      	adds	r3, #2
 800a190:	009b      	lsls	r3, r3, #2
 800a192:	4413      	add	r3, r2
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fc6a 	bl	8008a70 <CAN_NODE_MO_Receive>
 800a19c:	4603      	mov	r3, r0
 800a19e:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a1a0:	78bb      	ldrb	r3, [r7, #2]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d102      	bne.n	800a1ac <Read_CAN_0x1E5+0x68>
		{
			// message object receive success.
			test = 1;
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	707b      	strb	r3, [r7, #1]
 800a1aa:	e001      	b.n	800a1b0 <Read_CAN_0x1E5+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x1E5();
 800a1b0:	f000 f8b6 	bl	800a320 <Process_Read_CAN_0x1E5>
}
 800a1b4:	3710      	adds	r7, #16
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	08013b40 	.word	0x08013b40

0800a1c0 <update_id0x4c5>:


void update_id0x4c5()
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a1c6:	4b0f      	ldr	r3, [pc, #60]	; (800a204 <update_id0x4c5+0x44>)
 800a1c8:	60fb      	str	r3, [r7, #12]
	   // uint8_t can_data_arr[8] = {0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08};
	    uint8_t *array_data;

	    eps_n[can_0x4c5].can_matrix[0] = 0x01;
 800a1ca:	4b0f      	ldr	r3, [pc, #60]	; (800a208 <update_id0x4c5+0x48>)
 800a1cc:	2201      	movs	r2, #1
 800a1ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	    eps_n[can_0x4c5].can_matrix[1] = 0x28;
 800a1d2:	4b0d      	ldr	r3, [pc, #52]	; (800a208 <update_id0x4c5+0x48>)
 800a1d4:	2228      	movs	r2, #40	; 0x28
 800a1d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


	    array_data = &eps_n[can_0x4c5].can_matrix[0];
 800a1da:	4b0c      	ldr	r3, [pc, #48]	; (800a20c <update_id0x4c5+0x4c>)
 800a1dc:	60bb      	str	r3, [r7, #8]

	 //  update data for the MO to transmit
	       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[10],array_data);
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	68b9      	ldr	r1, [r7, #8]
 800a1e6:	f7fe fc55 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	71fb      	strb	r3, [r7, #7]

	       if (status == CAN_NODE_STATUS_SUCCESS)
 800a1ee:	79fb      	ldrb	r3, [r7, #7]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d104      	bne.n	800a1fe <update_id0x4c5+0x3e>
	       {
	         // message object data updated.

	         // transmit the data
	         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[10]);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f7fe fc27 	bl	8008a4c <CAN_NODE_MO_Transmit>
	       }
	       else
	       {
	         // message object failed to update.
	       }
}
 800a1fe:	3710      	adds	r7, #16
 800a200:	46bd      	mov	sp, r7
 800a202:	bd80      	pop	{r7, pc}
 800a204:	08013b40 	.word	0x08013b40
 800a208:	1ffe9344 	.word	0x1ffe9344
 800a20c:	1ffe9384 	.word	0x1ffe9384

0800a210 <map>:
	       }
}


long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 800a210:	b480      	push	{r7}
 800a212:	b087      	sub	sp, #28
 800a214:	af00      	add	r7, sp, #0
 800a216:	60f8      	str	r0, [r7, #12]
 800a218:	60b9      	str	r1, [r7, #8]
 800a21a:	607a      	str	r2, [r7, #4]
 800a21c:	603b      	str	r3, [r7, #0]
	long ans;

  ans = (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	68bb      	ldr	r3, [r7, #8]
 800a222:	1ad3      	subs	r3, r2, r3
 800a224:	6a39      	ldr	r1, [r7, #32]
 800a226:	683a      	ldr	r2, [r7, #0]
 800a228:	1a8a      	subs	r2, r1, r2
 800a22a:	fb02 f203 	mul.w	r2, r2, r3
 800a22e:	6879      	ldr	r1, [r7, #4]
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	1acb      	subs	r3, r1, r3
 800a234:	fb92 f2f3 	sdiv	r2, r2, r3
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	4413      	add	r3, r2
 800a23c:	617b      	str	r3, [r7, #20]

  if(ans > out_max)
 800a23e:	697a      	ldr	r2, [r7, #20]
 800a240:	6a3b      	ldr	r3, [r7, #32]
 800a242:	429a      	cmp	r2, r3
 800a244:	dd02      	ble.n	800a24c <map+0x3c>
	  ans = out_max;
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	e005      	b.n	800a258 <map+0x48>

  else if(ans < out_min)
 800a24c:	697a      	ldr	r2, [r7, #20]
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	429a      	cmp	r2, r3
 800a252:	da01      	bge.n	800a258 <map+0x48>
	  ans = out_min;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	617b      	str	r3, [r7, #20]

  return ans;
 800a258:	697b      	ldr	r3, [r7, #20]
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr
 800a266:	bf00      	nop

0800a268 <update_id0x36a>:
  return ans;
}


void update_id0x36a()
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af02      	add	r7, sp, #8
	CAN_NODE_STATUS_t status;
		    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a26e:	4b27      	ldr	r3, [pc, #156]	; (800a30c <update_id0x36a+0xa4>)
 800a270:	60fb      	str	r3, [r7, #12]




		   // current_rpm = 10000;
		    current_rpm = current_rpm * 1 - 16384U;
 800a272:	4b27      	ldr	r3, [pc, #156]	; (800a310 <update_id0x36a+0xa8>)
 800a274:	881b      	ldrh	r3, [r3, #0]
 800a276:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800a27a:	b29a      	uxth	r2, r3
 800a27c:	4b24      	ldr	r3, [pc, #144]	; (800a310 <update_id0x36a+0xa8>)
 800a27e:	801a      	strh	r2, [r3, #0]

		    vspeed = vspeed * 0.015625;*/

		   // map(x, 0, 100, 0, 0x19);

		    eps_n[can_0x36a].can_matrix[1] = 0x5f;
 800a280:	4b24      	ldr	r3, [pc, #144]	; (800a314 <update_id0x36a+0xac>)
 800a282:	225f      	movs	r2, #95	; 0x5f
 800a284:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d


		   /* eps_n[can_0x36a].can_matrix[2] =(0x00 | ((vspeed & 0x00ff) >> 1));
		    eps_n[can_0x36a].can_matrix[3] =(vspeed >> 8);*/
		    eps_n[can_0x36a].can_matrix[2] = map(vspeed, 0, 80, 0, 0x19);
 800a288:	4b23      	ldr	r3, [pc, #140]	; (800a318 <update_id0x36a+0xb0>)
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	461a      	mov	r2, r3
 800a28e:	2319      	movs	r3, #25
 800a290:	9300      	str	r3, [sp, #0]
 800a292:	4610      	mov	r0, r2
 800a294:	2100      	movs	r1, #0
 800a296:	2250      	movs	r2, #80	; 0x50
 800a298:	2300      	movs	r3, #0
 800a29a:	f7ff ffb9 	bl	800a210 <map>
 800a29e:	4603      	mov	r3, r0
 800a2a0:	b2da      	uxtb	r2, r3
 800a2a2:	4b1c      	ldr	r3, [pc, #112]	; (800a314 <update_id0x36a+0xac>)
 800a2a4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
		    eps_n[can_0x36a].can_matrix[3] = 0x00;//(vspeed >> 8);
 800a2a8:	4b1a      	ldr	r3, [pc, #104]	; (800a314 <update_id0x36a+0xac>)
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f


		    eps_n[can_0x36a].can_matrix[4] = (0x00 | ((current_rpm & 0x00ff) >> 1));
 800a2b0:	4b17      	ldr	r3, [pc, #92]	; (800a310 <update_id0x36a+0xa8>)
 800a2b2:	881b      	ldrh	r3, [r3, #0]
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	105b      	asrs	r3, r3, #1
 800a2b8:	b2da      	uxtb	r2, r3
 800a2ba:	4b16      	ldr	r3, [pc, #88]	; (800a314 <update_id0x36a+0xac>)
 800a2bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			eps_n[can_0x36a].can_matrix[5] = (current_rpm >> 8);
 800a2c0:	4b13      	ldr	r3, [pc, #76]	; (800a310 <update_id0x36a+0xa8>)
 800a2c2:	881b      	ldrh	r3, [r3, #0]
 800a2c4:	0a1b      	lsrs	r3, r3, #8
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	b2da      	uxtb	r2, r3
 800a2ca:	4b12      	ldr	r3, [pc, #72]	; (800a314 <update_id0x36a+0xac>)
 800a2cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51



			eps_n[can_0x36a].can_matrix[6] = 0x40;
 800a2d0:	4b10      	ldr	r3, [pc, #64]	; (800a314 <update_id0x36a+0xac>)
 800a2d2:	2240      	movs	r2, #64	; 0x40
 800a2d4:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
			eps_n[can_0x36a].can_matrix[7] = 0x80;
 800a2d8:	4b0e      	ldr	r3, [pc, #56]	; (800a314 <update_id0x36a+0xac>)
 800a2da:	2280      	movs	r2, #128	; 0x80
 800a2dc:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53

		    array_data = &eps_n[can_0x36a].can_matrix[0];
 800a2e0:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <update_id0x36a+0xb4>)
 800a2e2:	60bb      	str	r3, [r7, #8]

		 //  update data for the MO to transmit
		       status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[11],array_data);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	68b9      	ldr	r1, [r7, #8]
 800a2ec:	f7fe fbd2 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	71fb      	strb	r3, [r7, #7]

		       if (status == CAN_NODE_STATUS_SUCCESS)
 800a2f4:	79fb      	ldrb	r3, [r7, #7]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d104      	bne.n	800a304 <update_id0x36a+0x9c>
		       {
		         // message object data updated.

		         // transmit the data
		         CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[11]);
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2fe:	4618      	mov	r0, r3
 800a300:	f7fe fba4 	bl	8008a4c <CAN_NODE_MO_Transmit>
		       }
		       else
		       {
		         // message object failed to update.
		       }
}
 800a304:	3710      	adds	r7, #16
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	08013b40 	.word	0x08013b40
 800a310:	1fff5230 	.word	0x1fff5230
 800a314:	1ffe9344 	.word	0x1ffe9344
 800a318:	1fff522e 	.word	0x1fff522e
 800a31c:	1ffe9390 	.word	0x1ffe9390

0800a320 <Process_Read_CAN_0x1E5>:

void Process_Read_CAN_0x1E5(void)
{
 800a320:	b580      	push	{r7, lr}
 800a322:	b084      	sub	sp, #16
 800a324:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a326:	4b09      	ldr	r3, [pc, #36]	; (800a34c <Process_Read_CAN_0x1E5+0x2c>)
 800a328:	60fb      	str	r3, [r7, #12]

	mo_index = 24;//CAN_RX_MO_BMS_BASE + CAN_0x103;
 800a32a:	2318      	movs	r3, #24
 800a32c:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_BMS_29bit[can_0x1E5].CAN_Data[0];
 800a32e:	4b08      	ldr	r3, [pc, #32]	; (800a350 <Process_Read_CAN_0x1E5+0x30>)
 800a330:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a332:	7afb      	ldrb	r3, [r7, #11]
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	3302      	adds	r3, #2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	4618      	mov	r0, r3
 800a340:	6879      	ldr	r1, [r7, #4]
 800a342:	f000 fa45 	bl	800a7d0 <CAN_NODE_MO_ReadData>
}
 800a346:	3710      	adds	r7, #16
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	08013b40 	.word	0x08013b40
 800a350:	1ffe9258 	.word	0x1ffe9258

0800a354 <CAN_OUTPUT_EPS>:

void CAN_OUTPUT_EPS(void)
{
 800a354:	b580      	push	{r7, lr}
 800a356:	af00      	add	r7, sp, #0
	update_id0x4c5();
 800a358:	f7ff ff32 	bl	800a1c0 <update_id0x4c5>
	//update_id0x17d();
	update_id0x36a();
 800a35c:	f7ff ff84 	bl	800a268 <update_id0x36a>
}
 800a360:	bd80      	pop	{r7, pc}
 800a362:	bf00      	nop

0800a364 <CAN_Read_EPS>:

void CAN_Read_EPS(void)
{
 800a364:	b580      	push	{r7, lr}
 800a366:	af00      	add	r7, sp, #0
	Read_CAN_0x1E5();
 800a368:	f7ff feec 	bl	800a144 <Read_CAN_0x1E5>
}
 800a36c:	bd80      	pop	{r7, pc}
 800a36e:	bf00      	nop

0800a370 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
 800a378:	460b      	mov	r3, r1
 800a37a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800a37c:	78fb      	ldrb	r3, [r7, #3]
 800a37e:	2201      	movs	r2, #1
 800a380:	409a      	lsls	r2, r3
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	605a      	str	r2, [r3, #4]
}
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800a39c:	78fb      	ldrb	r3, [r7, #3]
 800a39e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a3a2:	409a      	lsls	r2, r3
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	605a      	str	r2, [r3, #4]
}
 800a3a8:	370c      	adds	r7, #12
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr
 800a3b2:	bf00      	nop

0800a3b4 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
 800a3ba:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681a      	ldr	r2, [r3, #0]
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	7c1b      	ldrb	r3, [r3, #16]
 800a3c4:	4610      	mov	r0, r2
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	f7ff ffd2 	bl	800a370 <XMC_GPIO_SetOutputHigh>
}
 800a3cc:	3708      	adds	r7, #8
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	bd80      	pop	{r7, pc}
 800a3d2:	bf00      	nop

0800a3d4 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681a      	ldr	r2, [r3, #0]
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	7c1b      	ldrb	r3, [r3, #16]
 800a3e4:	4610      	mov	r0, r2
 800a3e6:	4619      	mov	r1, r3
 800a3e8:	f7ff ffd2 	bl	800a390 <XMC_GPIO_SetOutputLow>
}
 800a3ec:	3708      	adds	r7, #8
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
 800a3f2:	bf00      	nop

0800a3f4 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
 800a3fc:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	683a      	ldr	r2, [r7, #0]
 800a404:	61da      	str	r2, [r3, #28]
}
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <Process_Read_CAN_0x100>:
		{0x8000530, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0} //Tx
};


void Process_Read_CAN_0x100(void)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a416:	4b09      	ldr	r3, [pc, #36]	; (800a43c <Process_Read_CAN_0x100+0x2c>)
 800a418:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a41a:	2301      	movs	r3, #1
 800a41c:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[ZERO_BYTE];
 800a41e:	4b08      	ldr	r3, [pc, #32]	; (800a440 <Process_Read_CAN_0x100+0x30>)
 800a420:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a422:	7afb      	ldrb	r3, [r7, #11]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	3302      	adds	r3, #2
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	4413      	add	r3, r2
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	4618      	mov	r0, r3
 800a430:	6879      	ldr	r1, [r7, #4]
 800a432:	f000 f9cd 	bl	800a7d0 <CAN_NODE_MO_ReadData>
}
 800a436:	3710      	adds	r7, #16
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}
 800a43c:	08013b40 	.word	0x08013b40
 800a440:	1ffe93b4 	.word	0x1ffe93b4

0800a444 <Read_CAN_0x100>:

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
}
void Read_CAN_0x100(void)
{
 800a444:	b580      	push	{r7, lr}
 800a446:	b084      	sub	sp, #16
 800a448:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a44a:	4b1c      	ldr	r3, [pc, #112]	; (800a4bc <Read_CAN_0x100+0x78>)
 800a44c:	60fb      	str	r3, [r7, #12]

	mo_index = CAN_RX_MO_HVAC_BASE + CAN_0x100;
 800a44e:	2301      	movs	r3, #1
 800a450:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a452:	7afb      	ldrb	r3, [r7, #11]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	3302      	adds	r3, #2
 800a458:	009b      	lsls	r3, r3, #2
 800a45a:	4413      	add	r3, r2
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a462:	7afb      	ldrb	r3, [r7, #11]
 800a464:	68fa      	ldr	r2, [r7, #12]
 800a466:	3302      	adds	r3, #2
 800a468:	009b      	lsls	r3, r3, #2
 800a46a:	4413      	add	r3, r2
 800a46c:	685b      	ldr	r3, [r3, #4]
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fb30 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a474:	4603      	mov	r3, r0
 800a476:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a478:	78fb      	ldrb	r3, [r7, #3]
 800a47a:	f003 0301 	and.w	r3, r3, #1
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d016      	beq.n	800a4b0 <Read_CAN_0x100+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	2101      	movs	r1, #1
 800a486:	f7ff ffb5 	bl	800a3f4 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a48a:	7afb      	ldrb	r3, [r7, #11]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	3302      	adds	r3, #2
 800a490:	009b      	lsls	r3, r3, #2
 800a492:	4413      	add	r3, r2
 800a494:	685b      	ldr	r3, [r3, #4]
 800a496:	4618      	mov	r0, r3
 800a498:	f7fe faea 	bl	8008a70 <CAN_NODE_MO_Receive>
 800a49c:	4603      	mov	r3, r0
 800a49e:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a4a0:	78bb      	ldrb	r3, [r7, #2]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d102      	bne.n	800a4ac <Read_CAN_0x100+0x68>
		{
			// message object receive success.
			test = 1;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	707b      	strb	r3, [r7, #1]
 800a4aa:	e001      	b.n	800a4b0 <Read_CAN_0x100+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_Read_CAN_0x100();
 800a4b0:	f7ff ffae 	bl	800a410 <Process_Read_CAN_0x100>
}
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}
 800a4ba:	bf00      	nop
 800a4bc:	08013b40 	.word	0x08013b40

0800a4c0 <Read_CAN_Hifire_0x8000250>:
	Process_Read_CAN_0x248();
}

//hifire
void Read_CAN_Hifire_0x8000250(void)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
	uint8_t test;
	CAN_NODE_STATUS_t status, receive_status;
	XMC_CAN_MO_t *MO_Ptr;
	uint8_t mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a4c6:	4b1c      	ldr	r3, [pc, #112]	; (800a538 <Read_CAN_Hifire_0x8000250+0x78>)
 800a4c8:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a4ca:	2308      	movs	r3, #8
 800a4cc:	72fb      	strb	r3, [r7, #11]

	MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a4ce:	7afb      	ldrb	r3, [r7, #11]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	3302      	adds	r3, #2
 800a4d4:	009b      	lsls	r3, r3, #2
 800a4d6:	4413      	add	r3, r2
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	607b      	str	r3, [r7, #4]

	status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a4de:	7afb      	ldrb	r3, [r7, #11]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	3302      	adds	r3, #2
 800a4e4:	009b      	lsls	r3, r3, #2
 800a4e6:	4413      	add	r3, r2
 800a4e8:	685b      	ldr	r3, [r3, #4]
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f7fe faf2 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	70fb      	strb	r3, [r7, #3]
	//Check receive pending status
	if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a4f4:	78fb      	ldrb	r3, [r7, #3]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d016      	beq.n	800a52c <Read_CAN_Hifire_0x8000250+0x6c>
	{
		// Clear the flag
		XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a4fe:	6878      	ldr	r0, [r7, #4]
 800a500:	2101      	movs	r1, #1
 800a502:	f7ff ff77 	bl	800a3f4 <XMC_CAN_MO_ResetStatus>
		// Read the received Message object
		receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a506:	7afb      	ldrb	r3, [r7, #11]
 800a508:	68fa      	ldr	r2, [r7, #12]
 800a50a:	3302      	adds	r3, #2
 800a50c:	009b      	lsls	r3, r3, #2
 800a50e:	4413      	add	r3, r2
 800a510:	685b      	ldr	r3, [r3, #4]
 800a512:	4618      	mov	r0, r3
 800a514:	f7fe faac 	bl	8008a70 <CAN_NODE_MO_Receive>
 800a518:	4603      	mov	r3, r0
 800a51a:	70bb      	strb	r3, [r7, #2]

		if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a51c:	78bb      	ldrb	r3, [r7, #2]
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d102      	bne.n	800a528 <Read_CAN_Hifire_0x8000250+0x68>
		{
			// message object receive success.
			test = 1;
 800a522:	2301      	movs	r3, #1
 800a524:	707b      	strb	r3, [r7, #1]
 800a526:	e001      	b.n	800a52c <Read_CAN_Hifire_0x8000250+0x6c>
		}
		else
		{
			// message object failed to receive.
			test = 0;
 800a528:	2300      	movs	r3, #0
 800a52a:	707b      	strb	r3, [r7, #1]
		}
	}

	//copy data from MO object to HVAC DB CAN_MSG_DB_HVAC
	Process_CAN_Hifire_0x8000250();
 800a52c:	f000 f806 	bl	800a53c <Process_CAN_Hifire_0x8000250>
}
 800a530:	3710      	adds	r7, #16
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	08013958 	.word	0x08013958

0800a53c <Process_CAN_Hifire_0x8000250>:

//hifire
void Process_CAN_Hifire_0x8000250(void)
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b084      	sub	sp, #16
 800a540:	af00      	add	r7, sp, #0
	uint8_t *tempData, mo_index;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a542:	4b11      	ldr	r3, [pc, #68]	; (800a588 <Process_CAN_Hifire_0x8000250+0x4c>)
 800a544:	60fb      	str	r3, [r7, #12]

	mo_index = 8;
 800a546:	2308      	movs	r3, #8
 800a548:	72fb      	strb	r3, [r7, #11]

	tempData = &CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[ZERO_BYTE];
 800a54a:	4b10      	ldr	r3, [pc, #64]	; (800a58c <Process_CAN_Hifire_0x8000250+0x50>)
 800a54c:	607b      	str	r3, [r7, #4]

	//read data to external buffer
	CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a54e:	7afb      	ldrb	r3, [r7, #11]
 800a550:	68fa      	ldr	r2, [r7, #12]
 800a552:	3302      	adds	r3, #2
 800a554:	009b      	lsls	r3, r3, #2
 800a556:	4413      	add	r3, r2
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	4618      	mov	r0, r3
 800a55c:	6879      	ldr	r1, [r7, #4]
 800a55e:	f000 f937 	bl	800a7d0 <CAN_NODE_MO_ReadData>

	//get the error code
	 uint8_t error_code = (0x0F & (CAN_MSG_DB_HVAC[CAN_0x8000250].CAN_Data[4]));
 800a562:	4b0b      	ldr	r3, [pc, #44]	; (800a590 <Process_CAN_Hifire_0x8000250+0x54>)
 800a564:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a568:	f003 030f 	and.w	r3, r3, #15
 800a56c:	70fb      	strb	r3, [r7, #3]

	if(0x00 != error_code)
 800a56e:	78fb      	ldrb	r3, [r7, #3]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d003      	beq.n	800a57c <Process_CAN_Hifire_0x8000250+0x40>
	{
		error_compressor = 0x1;
 800a574:	4b07      	ldr	r3, [pc, #28]	; (800a594 <Process_CAN_Hifire_0x8000250+0x58>)
 800a576:	2201      	movs	r2, #1
 800a578:	701a      	strb	r2, [r3, #0]
 800a57a:	e002      	b.n	800a582 <Process_CAN_Hifire_0x8000250+0x46>
	}
	else
	{
		error_compressor = 0x0;
 800a57c:	4b05      	ldr	r3, [pc, #20]	; (800a594 <Process_CAN_Hifire_0x8000250+0x58>)
 800a57e:	2200      	movs	r2, #0
 800a580:	701a      	strb	r2, [r3, #0]
	}
}
 800a582:	3710      	adds	r7, #16
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	08013958 	.word	0x08013958
 800a58c:	1ffe93cc 	.word	0x1ffe93cc
 800a590:	1ffe93a4 	.word	0x1ffe93a4
 800a594:	1fff522c 	.word	0x1fff522c

0800a598 <Process_CAN_0x100>:

void Process_CAN_0x100(void)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
	uint16_t rpm=0;
 800a59e:	2300      	movs	r3, #0
 800a5a0:	81fb      	strh	r3, [r7, #14]
	float pressure_in, voltage_psi;
	float pressure_value;
	uint8_t TempDegreeC;
	uint8_t AC_ON=1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	737b      	strb	r3, [r7, #13]
	static uint8_t condenser_on = 0x00;

	//get the temperature
	TempDegreeC = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[0];
 800a5a6:	4b5a      	ldr	r3, [pc, #360]	; (800a710 <Process_CAN_0x100+0x178>)
 800a5a8:	7c1b      	ldrb	r3, [r3, #16]
 800a5aa:	733b      	strb	r3, [r7, #12]
	//get the pressure
	pressure_in = (float) CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[1];
 800a5ac:	4b58      	ldr	r3, [pc, #352]	; (800a710 <Process_CAN_0x100+0x178>)
 800a5ae:	7c5b      	ldrb	r3, [r3, #17]
 800a5b0:	ee07 3a90 	vmov	s15, r3
 800a5b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5b8:	edc7 7a02 	vstr	s15, [r7, #8]
	//get the AC switch input
	AC_ON_4g = AC_ON = CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800a5bc:	4b54      	ldr	r3, [pc, #336]	; (800a710 <Process_CAN_0x100+0x178>)
 800a5be:	7c9b      	ldrb	r3, [r3, #18]
 800a5c0:	737b      	strb	r3, [r7, #13]
 800a5c2:	7b7b      	ldrb	r3, [r7, #13]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	bf14      	ite	ne
 800a5c8:	2301      	movne	r3, #1
 800a5ca:	2300      	moveq	r3, #0
 800a5cc:	b2da      	uxtb	r2, r3
 800a5ce:	4b51      	ldr	r3, [pc, #324]	; (800a714 <Process_CAN_0x100+0x17c>)
 800a5d0:	701a      	strb	r2, [r3, #0]

	//AC is ON when AC_ON == 0
	//now ac is on when == 1
	//AC_ON = 1;
	if(0x01 == AC_ON)
 800a5d2:	7b7b      	ldrb	r3, [r7, #13]
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d15a      	bne.n	800a68e <Process_CAN_0x100+0xf6>
	{
		//convert the temperature to rpm
		if(TempDegreeC <= 28)
 800a5d8:	7b3b      	ldrb	r3, [r7, #12]
 800a5da:	2b1c      	cmp	r3, #28
 800a5dc:	d80f      	bhi.n	800a5fe <Process_CAN_0x100+0x66>
		{
			rpm = (uint16_t)(((-200) * (int32_t)TempDegreeC) + 9100);        //from line eqn relating temperature to rpm
 800a5de:	7b3b      	ldrb	r3, [r7, #12]
 800a5e0:	b29b      	uxth	r3, r3
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	0212      	lsls	r2, r2, #8
 800a5e6:	1ad2      	subs	r2, r2, r3
 800a5e8:	0092      	lsls	r2, r2, #2
 800a5ea:	441a      	add	r2, r3
 800a5ec:	00d2      	lsls	r2, r2, #3
 800a5ee:	1ad3      	subs	r3, r2, r3
 800a5f0:	00db      	lsls	r3, r3, #3
 800a5f2:	b29b      	uxth	r3, r3
 800a5f4:	f503 530e 	add.w	r3, r3, #9088	; 0x2380
 800a5f8:	330c      	adds	r3, #12
 800a5fa:	81fb      	strh	r3, [r7, #14]
 800a5fc:	e005      	b.n	800a60a <Process_CAN_0x100+0x72>
			if(Vcu_InPuts.IGNITION_1_IN)
			{//ptc turn off//
				//DIGITAL_IO_SetOutputLow(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}
		else if (TempDegreeC > 28)
 800a5fe:	7b3b      	ldrb	r3, [r7, #12]
 800a600:	2b1c      	cmp	r3, #28
 800a602:	d902      	bls.n	800a60a <Process_CAN_0x100+0x72>
		{
			rpm = 2500;
 800a604:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800a608:	81fb      	strh	r3, [r7, #14]
			//DIGITAL_IO_SetOutputHigh(&MC_CONTACTOR_RELAY_OUT_D);
			}
		}

		//calculate pressure value in megaPascal
		voltage_psi = pressure_in * (5.0/1023.0);
 800a60a:	68b8      	ldr	r0, [r7, #8]
 800a60c:	f006 fa14 	bl	8010a38 <__aeabi_f2d>
 800a610:	4602      	mov	r2, r0
 800a612:	460b      	mov	r3, r1
 800a614:	4610      	mov	r0, r2
 800a616:	4619      	mov	r1, r3
 800a618:	a335      	add	r3, pc, #212	; (adr r3, 800a6f0 <Process_CAN_0x100+0x158>)
 800a61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a61e:	f006 fa5f 	bl	8010ae0 <__aeabi_dmul>
 800a622:	4602      	mov	r2, r0
 800a624:	460b      	mov	r3, r1
 800a626:	4610      	mov	r0, r2
 800a628:	4619      	mov	r1, r3
 800a62a:	f006 fd3b 	bl	80110a4 <__aeabi_d2f>
 800a62e:	4603      	mov	r3, r0
 800a630:	607b      	str	r3, [r7, #4]
		pressure_value = (voltage_psi - (0.02*5)) / (5*0.29665);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f006 fa00 	bl	8010a38 <__aeabi_f2d>
 800a638:	4602      	mov	r2, r0
 800a63a:	460b      	mov	r3, r1
 800a63c:	4610      	mov	r0, r2
 800a63e:	4619      	mov	r1, r3
 800a640:	a32d      	add	r3, pc, #180	; (adr r3, 800a6f8 <Process_CAN_0x100+0x160>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f006 f897 	bl	8010778 <__aeabi_dsub>
 800a64a:	4602      	mov	r2, r0
 800a64c:	460b      	mov	r3, r1
 800a64e:	4610      	mov	r0, r2
 800a650:	4619      	mov	r1, r3
 800a652:	a32b      	add	r3, pc, #172	; (adr r3, 800a700 <Process_CAN_0x100+0x168>)
 800a654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a658:	f006 fb6c 	bl	8010d34 <__aeabi_ddiv>
 800a65c:	4602      	mov	r2, r0
 800a65e:	460b      	mov	r3, r1
 800a660:	4610      	mov	r0, r2
 800a662:	4619      	mov	r1, r3
 800a664:	f006 fd1e 	bl	80110a4 <__aeabi_d2f>
 800a668:	4603      	mov	r3, r0
 800a66a:	603b      	str	r3, [r7, #0]

		if(pressure_value >= HIGH_PRESSURE_mP)
 800a66c:	6838      	ldr	r0, [r7, #0]
 800a66e:	f006 f9e3 	bl	8010a38 <__aeabi_f2d>
 800a672:	4602      	mov	r2, r0
 800a674:	460b      	mov	r3, r1
 800a676:	4610      	mov	r0, r2
 800a678:	4619      	mov	r1, r3
 800a67a:	a323      	add	r3, pc, #140	; (adr r3, 800a708 <Process_CAN_0x100+0x170>)
 800a67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a680:	f006 fcb4 	bl	8010fec <__aeabi_dcmpge>
 800a684:	4603      	mov	r3, r0
 800a686:	2b00      	cmp	r3, #0
 800a688:	d001      	beq.n	800a68e <Process_CAN_0x100+0xf6>
		{
			//AC_ON = 0x01; S
			AC_ON = 0x00; //make hole system off
 800a68a:	2300      	movs	r3, #0
 800a68c:	737b      	strb	r3, [r7, #13]
//	CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[0] = rpm;
//	//CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1] = (rpm >> 1);
//	CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[1] = (rpm >> 8);

	//update CAN_MSG_DB_HVAC for 0x8000530 //hifire
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[3] = rpm;        //hifire
 800a68e:	89fb      	ldrh	r3, [r7, #14]
 800a690:	b2da      	uxtb	r2, r3
 800a692:	4b1f      	ldr	r3, [pc, #124]	; (800a710 <Process_CAN_0x100+0x178>)
 800a694:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
	CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[4] = (rpm >> 8); //hifire
 800a698:	89fb      	ldrh	r3, [r7, #14]
 800a69a:	0a1b      	lsrs	r3, r3, #8
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	b2da      	uxtb	r2, r3
 800a6a0:	4b1b      	ldr	r3, [pc, #108]	; (800a710 <Process_CAN_0x100+0x178>)
 800a6a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

	//error_compressor from 0x8000250
	if((0x01 == AC_ON) && (0x01 != error_compressor))
 800a6a6:	7b7b      	ldrb	r3, [r7, #13]
 800a6a8:	2b01      	cmp	r3, #1
 800a6aa:	d113      	bne.n	800a6d4 <Process_CAN_0x100+0x13c>
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	; (800a718 <Process_CAN_0x100+0x180>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	b2db      	uxtb	r3, r3
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d00e      	beq.n	800a6d4 <Process_CAN_0x100+0x13c>
	{
		if(0x0 == condenser_on)
 800a6b6:	4b19      	ldr	r3, [pc, #100]	; (800a71c <Process_CAN_0x100+0x184>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d105      	bne.n	800a6ca <Process_CAN_0x100+0x132>
//			DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_0);
			//DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_1); // for
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			//	DIGITAL_IO_SetOutputHigh(&AC_BLOWER_SPEED_2); // for compressor to on X
		//	if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
					   DIGITAL_IO_SetOutputHigh(&AC_RADIATOR_OUT_D); // for compressor to on
 800a6be:	4818      	ldr	r0, [pc, #96]	; (800a720 <Process_CAN_0x100+0x188>)
 800a6c0:	f7ff fe78 	bl	800a3b4 <DIGITAL_IO_SetOutputHigh>

			condenser_on = 0x1;
 800a6c4:	4b15      	ldr	r3, [pc, #84]	; (800a71c <Process_CAN_0x100+0x184>)
 800a6c6:	2201      	movs	r2, #1
 800a6c8:	701a      	strb	r2, [r3, #0]
		}

		//turn AC ON
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x01;	//setting 24th bit of CAN_0x238
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x01;	//setting 7th bit of CAN_0x8000530 //hifire
 800a6ca:	4b11      	ldr	r3, [pc, #68]	; (800a710 <Process_CAN_0x100+0x178>)
 800a6cc:	2201      	movs	r2, #1
 800a6ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800a6d2:	e009      	b.n	800a6e8 <Process_CAN_0x100+0x150>
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_1); // for
			//for(volatile int i = 0; i < 0xffff*4; i++);
		//if(DIGITAL_IO_GetInput(&IGNI_POS2_IN_D))
			//DIGITAL_IO_SetOutputLow(&AC_BLOWER_SPEED_2);
		//if(DIGITAL_IO_GetInput(&IGNI_POS1_IN_D))
			  DIGITAL_IO_SetOutputLow(&AC_RADIATOR_OUT_D);/// for compressor to turn off
 800a6d4:	4812      	ldr	r0, [pc, #72]	; (800a720 <Process_CAN_0x100+0x188>)
 800a6d6:	f7ff fe7d 	bl	800a3d4 <DIGITAL_IO_SetOutputLow>
		condenser_on = 0x0;
 800a6da:	4b10      	ldr	r3, [pc, #64]	; (800a71c <Process_CAN_0x100+0x184>)
 800a6dc:	2200      	movs	r2, #0
 800a6de:	701a      	strb	r2, [r3, #0]
		//}
//		CAN_MSG_DB_HVAC[CAN_0x238].CAN_Data[3] = 0x00;
		CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[0] = 0x00; //hifire
 800a6e0:	4b0b      	ldr	r3, [pc, #44]	; (800a710 <Process_CAN_0x100+0x178>)
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}
}
 800a6e8:	3710      	adds	r7, #16
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	40501405 	.word	0x40501405
 800a6f4:	3f740501 	.word	0x3f740501
 800a6f8:	9999999a 	.word	0x9999999a
 800a6fc:	3fb99999 	.word	0x3fb99999
 800a700:	5a1cac09 	.word	0x5a1cac09
 800a704:	3ff7bb64 	.word	0x3ff7bb64
 800a708:	b851eb85 	.word	0xb851eb85
 800a70c:	3ff7851e 	.word	0x3ff7851e
 800a710:	1ffe93a4 	.word	0x1ffe93a4
 800a714:	1fff4814 	.word	0x1fff4814
 800a718:	1fff522c 	.word	0x1fff522c
 800a71c:	1fff448c 	.word	0x1fff448c
 800a720:	08013264 	.word	0x08013264
 800a724:	f3af 8000 	nop.w

0800a728 <CAN_INPUT_HVAC>:
		// message object failed to update.
	}
}

void CAN_INPUT_HVAC(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	af00      	add	r7, sp, #0
	//read compressor to check error
	Read_CAN_Hifire_0x8000250();
 800a72c:	f7ff fec8 	bl	800a4c0 <Read_CAN_Hifire_0x8000250>
	Read_CAN_0x100();
 800a730:	f7ff fe88 	bl	800a444 <Read_CAN_0x100>
	Process_CAN_0x100();
 800a734:	f7ff ff30 	bl	800a598 <Process_CAN_0x100>
}
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop

0800a73c <CAN_OUTPUT_COMPRESSOR>:

//for hifire
void CAN_OUTPUT_COMPRESSOR(void)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
	CAN_NODE_STATUS_t mo_tranmit_status, status;
	const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800a742:	4b21      	ldr	r3, [pc, #132]	; (800a7c8 <CAN_OUTPUT_COMPRESSOR+0x8c>)
 800a744:	617b      	str	r3, [r7, #20]
	uint8_t mo_index = 9;
 800a746:	2309      	movs	r3, #9
 800a748:	74fb      	strb	r3, [r7, #19]
	XMC_CAN_MO_t *MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a74a:	7cfb      	ldrb	r3, [r7, #19]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	3302      	adds	r3, #2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	60fb      	str	r3, [r7, #12]

	/* update message's data */
	uint8_t *tempData = &CAN_MSG_DB_HVAC[CAN_0x8000530].CAN_Data[ZERO_BYTE];
 800a75a:	4b1c      	ldr	r3, [pc, #112]	; (800a7cc <CAN_OUTPUT_COMPRESSOR+0x90>)
 800a75c:	60bb      	str	r3, [r7, #8]

	//  update data for the MO to transmit
	status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800a75e:	7cfb      	ldrb	r3, [r7, #19]
 800a760:	697a      	ldr	r2, [r7, #20]
 800a762:	3302      	adds	r3, #2
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	4413      	add	r3, r2
 800a768:	685b      	ldr	r3, [r3, #4]
 800a76a:	4618      	mov	r0, r3
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	f7fe f991 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a772:	4603      	mov	r3, r0
 800a774:	71fb      	strb	r3, [r7, #7]

	if (status == CAN_NODE_STATUS_SUCCESS)
 800a776:	79fb      	ldrb	r3, [r7, #7]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d121      	bne.n	800a7c0 <CAN_OUTPUT_COMPRESSOR+0x84>
	{
		// message object data updated.
		// transmit the data
		mo_tranmit_status = CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[mo_index]);
 800a77c:	7cfb      	ldrb	r3, [r7, #19]
 800a77e:	697a      	ldr	r2, [r7, #20]
 800a780:	3302      	adds	r3, #2
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	4413      	add	r3, r2
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	4618      	mov	r0, r3
 800a78a:	f7fe f95f 	bl	8008a4c <CAN_NODE_MO_Transmit>
 800a78e:	4603      	mov	r3, r0
 800a790:	71bb      	strb	r3, [r7, #6]
		if (mo_tranmit_status == CAN_NODE_STATUS_SUCCESS)
 800a792:	79bb      	ldrb	r3, [r7, #6]
 800a794:	2b00      	cmp	r3, #0
 800a796:	d113      	bne.n	800a7c0 <CAN_OUTPUT_COMPRESSOR+0x84>
		{
			//message object transmission success.
			// read the TXOK status bit
			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);	//msg_count, earlier it was 0 and working
 800a798:	7cfb      	ldrb	r3, [r7, #19]
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	3302      	adds	r3, #2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	4413      	add	r3, r2
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7fe f995 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	71fb      	strb	r3, [r7, #7]

			if (status &  XMC_CAN_MO_STATUS_TX_PENDING)
 800a7ae:	79fb      	ldrb	r3, [r7, #7]
 800a7b0:	f003 0302 	and.w	r3, r3, #2
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d003      	beq.n	800a7c0 <CAN_OUTPUT_COMPRESSOR+0x84>
			{
				//Clear the transmit OK flag
				XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_TX_PENDING);
 800a7b8:	68f8      	ldr	r0, [r7, #12]
 800a7ba:	2102      	movs	r1, #2
 800a7bc:	f7ff fe1a 	bl	800a3f4 <XMC_CAN_MO_ResetStatus>
	}
	else
	{
		// message object failed to update.
	}
}
 800a7c0:	3718      	adds	r7, #24
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	08013958 	.word	0x08013958
 800a7cc:	1ffe93d8 	.word	0x1ffe93d8

0800a7d0 <CAN_NODE_MO_ReadData>:
	  }
	}
}

void CAN_NODE_MO_ReadData(const CAN_NODE_LMO_t *const lmo_ptr, uint8_t *array_data)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b085      	sub	sp, #20
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	6078      	str	r0, [r7, #4]
 800a7d8:	6039      	str	r1, [r7, #0]
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800a7da:	2300      	movs	r3, #0
 800a7dc:	73fb      	strb	r3, [r7, #15]
 800a7de:	e00b      	b.n	800a7f8 <CAN_NODE_MO_ReadData+0x28>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
 800a7e0:	7bfb      	ldrb	r3, [r7, #15]
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	687a      	ldr	r2, [r7, #4]
 800a7e8:	6811      	ldr	r1, [r2, #0]
 800a7ea:	7bfa      	ldrb	r2, [r7, #15]
 800a7ec:	440a      	add	r2, r1
 800a7ee:	7c12      	ldrb	r2, [r2, #16]
 800a7f0:	701a      	strb	r2, [r3, #0]
{
  uint8_t i;

  XMC_ASSERT("CAN_NODE_MO_UpdateData: lmo_ptr null", lmo_ptr != NULL);

  for (i=0; i<8; i++)
 800a7f2:	7bfb      	ldrb	r3, [r7, #15]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	73fb      	strb	r3, [r7, #15]
 800a7f8:	7bfb      	ldrb	r3, [r7, #15]
 800a7fa:	2b07      	cmp	r3, #7
 800a7fc:	d9f0      	bls.n	800a7e0 <CAN_NODE_MO_ReadData+0x10>
  {
	  array_data[i] = lmo_ptr->mo_ptr->can_data_byte[i];
  }
}
 800a7fe:	3714      	adds	r7, #20
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <calculate_speed>:
	//perform the conversion and then store
	process_CAN_0xA6();
}

uint8_t calculate_speed(int16_t motor_rpm)
{
 800a808:	b5b0      	push	{r4, r5, r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	4603      	mov	r3, r0
 800a810:	80fb      	strh	r3, [r7, #6]
	const float PI = 3.14;
 800a812:	4b2b      	ldr	r3, [pc, #172]	; (800a8c0 <calculate_speed+0xb8>)
 800a814:	617b      	str	r3, [r7, #20]
	float kmph;
	uint8_t TempSpeed;
	float wheel_rpm;
	float MPS;

	float final_drive_ratio = 9.887;    //drive train ration 9.916 , 9.89109;
 800a816:	4b2b      	ldr	r3, [pc, #172]	; (800a8c4 <calculate_speed+0xbc>)
 800a818:	613b      	str	r3, [r7, #16]
	float SLR = 0.267; //static load radius
 800a81a:	4b2b      	ldr	r3, [pc, #172]	; (800a8c8 <calculate_speed+0xc0>)
 800a81c:	60fb      	str	r3, [r7, #12]

//	float wheel_dia_meters = 0.55;// for tyre under load
//	float wheel_circumference_meters = wheel_dia_meters * PI; // 0.001727-> wheel diameter = 0.55 meters
//	float wheel_circumference_km = wheel_circumference_meters / 1000.0;

	motor_rpm = abs(motor_rpm);
 800a81e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a822:	2b00      	cmp	r3, #0
 800a824:	bfb8      	it	lt
 800a826:	425b      	neglt	r3, r3
 800a828:	80fb      	strh	r3, [r7, #6]
		MPS = (2 * (PI) * wheel_rpm * SLR)/60;
		kmph = MPS * 3.6;

		TempSpeed = (uint8_t) kmph;*/

	motor_rpm = motor_rpm + (motor_rpm * (0.05));
 800a82a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a82e:	4618      	mov	r0, r3
 800a830:	f006 f8f0 	bl	8010a14 <__aeabi_i2d>
 800a834:	4604      	mov	r4, r0
 800a836:	460d      	mov	r5, r1
 800a838:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a83c:	4618      	mov	r0, r3
 800a83e:	f006 f8e9 	bl	8010a14 <__aeabi_i2d>
 800a842:	4602      	mov	r2, r0
 800a844:	460b      	mov	r3, r1
 800a846:	4610      	mov	r0, r2
 800a848:	4619      	mov	r1, r3
 800a84a:	a319      	add	r3, pc, #100	; (adr r3, 800a8b0 <calculate_speed+0xa8>)
 800a84c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a850:	f006 f946 	bl	8010ae0 <__aeabi_dmul>
 800a854:	4602      	mov	r2, r0
 800a856:	460b      	mov	r3, r1
 800a858:	4620      	mov	r0, r4
 800a85a:	4629      	mov	r1, r5
 800a85c:	f005 ff8e 	bl	801077c <__adddf3>
 800a860:	4602      	mov	r2, r0
 800a862:	460b      	mov	r3, r1
 800a864:	4610      	mov	r0, r2
 800a866:	4619      	mov	r1, r3
 800a868:	f006 fbd4 	bl	8011014 <__aeabi_d2iz>
 800a86c:	4603      	mov	r3, r0
 800a86e:	80fb      	strh	r3, [r7, #6]
	motor_rpm *= 0.010988;/* constant given by mukul*/
 800a870:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800a874:	4618      	mov	r0, r3
 800a876:	f006 f8cd 	bl	8010a14 <__aeabi_i2d>
 800a87a:	4602      	mov	r2, r0
 800a87c:	460b      	mov	r3, r1
 800a87e:	4610      	mov	r0, r2
 800a880:	4619      	mov	r1, r3
 800a882:	a30d      	add	r3, pc, #52	; (adr r3, 800a8b8 <calculate_speed+0xb0>)
 800a884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a888:	f006 f92a 	bl	8010ae0 <__aeabi_dmul>
 800a88c:	4602      	mov	r2, r0
 800a88e:	460b      	mov	r3, r1
 800a890:	4610      	mov	r0, r2
 800a892:	4619      	mov	r1, r3
 800a894:	f006 fbbe 	bl	8011014 <__aeabi_d2iz>
 800a898:	4603      	mov	r3, r0
 800a89a:	80fb      	strh	r3, [r7, #6]
	TempSpeed = motor_rpm;
 800a89c:	88fb      	ldrh	r3, [r7, #6]
 800a89e:	72fb      	strb	r3, [r7, #11]

		return TempSpeed;
 800a8a0:	7afb      	ldrb	r3, [r7, #11]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	f3af 8000 	nop.w
 800a8b0:	9999999a 	.word	0x9999999a
 800a8b4:	3fa99999 	.word	0x3fa99999
 800a8b8:	65300581 	.word	0x65300581
 800a8bc:	3f8680e0 	.word	0x3f8680e0
 800a8c0:	4048f5c3 	.word	0x4048f5c3
 800a8c4:	411e3127 	.word	0x411e3127
 800a8c8:	3e88b439 	.word	0x3e88b439
 800a8cc:	f3af 8000 	nop.w

0800a8d0 <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	683a      	ldr	r2, [r7, #0]
 800a8e0:	61da      	str	r2, [r3, #28]
}
 800a8e2:	370c      	adds	r7, #12
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ea:	4770      	bx	lr

0800a8ec <CAN_Tx_id0x10>:
		{0x33,{0x00}},
		{0x55,{0x00}}
};

void CAN_Tx_id0x10(void)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b084      	sub	sp, #16
 800a8f0:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a8f2:	4b0b      	ldr	r3, [pc, #44]	; (800a920 <CAN_Tx_id0x10+0x34>)
 800a8f4:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x10].CAN_Data[0];
 800a8f6:	4b0b      	ldr	r3, [pc, #44]	; (800a924 <CAN_Tx_id0x10+0x38>)
 800a8f8:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[16],array_data);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a8fe:	4618      	mov	r0, r3
 800a900:	68b9      	ldr	r1, [r7, #8]
 800a902:	f7fe f8c7 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a906:	4603      	mov	r3, r0
 800a908:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a90a:	79fb      	ldrb	r3, [r7, #7]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d104      	bne.n	800a91a <CAN_Tx_id0x10+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[16]);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a914:	4618      	mov	r0, r3
 800a916:	f7fe f899 	bl	8008a4c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	08013b40 	.word	0x08013b40
 800a924:	1ffe9444 	.word	0x1ffe9444

0800a928 <CAN_Tx_id0x20>:

void CAN_Tx_id0x20(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a92e:	4b0b      	ldr	r3, [pc, #44]	; (800a95c <CAN_Tx_id0x20+0x34>)
 800a930:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x20].CAN_Data[0];
 800a932:	4b0b      	ldr	r3, [pc, #44]	; (800a960 <CAN_Tx_id0x20+0x38>)
 800a934:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[17],array_data);
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a93a:	4618      	mov	r0, r3
 800a93c:	68b9      	ldr	r1, [r7, #8]
 800a93e:	f7fe f8a9 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a942:	4603      	mov	r3, r0
 800a944:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a946:	79fb      	ldrb	r3, [r7, #7]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d104      	bne.n	800a956 <CAN_Tx_id0x20+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[17]);
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a950:	4618      	mov	r0, r3
 800a952:	f7fe f87b 	bl	8008a4c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a956:	3710      	adds	r7, #16
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}
 800a95c:	08013b40 	.word	0x08013b40
 800a960:	1ffe9474 	.word	0x1ffe9474

0800a964 <CAN_Tx_id0x21>:

void CAN_Tx_id0x21(void)
{
 800a964:	b580      	push	{r7, lr}
 800a966:	b084      	sub	sp, #16
 800a968:	af00      	add	r7, sp, #0
	    CAN_NODE_STATUS_t status;
	    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a96a:	4b0b      	ldr	r3, [pc, #44]	; (800a998 <CAN_Tx_id0x21+0x34>)
 800a96c:	60fb      	str	r3, [r7, #12]

	    uint8_t *array_data;

	    array_data = &CAN_IRP_29bit[CAN_id0x21].CAN_Data[0];
 800a96e:	4b0b      	ldr	r3, [pc, #44]	; (800a99c <CAN_Tx_id0x21+0x38>)
 800a970:	60bb      	str	r3, [r7, #8]


	      //  update data for the MO to transmit
	      status = (CAN_NODE_STATUS_t)CAN_NODE_MO_UpdateData(HandlePtr1->lmobj_ptr[18],array_data);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a976:	4618      	mov	r0, r3
 800a978:	68b9      	ldr	r1, [r7, #8]
 800a97a:	f7fe f88b 	bl	8008a94 <CAN_NODE_MO_UpdateData>
 800a97e:	4603      	mov	r3, r0
 800a980:	71fb      	strb	r3, [r7, #7]

	      if (status == CAN_NODE_STATUS_SUCCESS)
 800a982:	79fb      	ldrb	r3, [r7, #7]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d104      	bne.n	800a992 <CAN_Tx_id0x21+0x2e>
	      {
	        // message object data updated.

	        // transmit the data
	        CAN_NODE_MO_Transmit(HandlePtr1->lmobj_ptr[18]);
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98c:	4618      	mov	r0, r3
 800a98e:	f7fe f85d 	bl	8008a4c <CAN_NODE_MO_Transmit>
	      else
	      {
	        // message object failed to update.
	      }

}
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	08013b40 	.word	0x08013b40
 800a99c:	1ffe9480 	.word	0x1ffe9480

0800a9a0 <CAN_Rx_id0x13>:

void CAN_Rx_id0x13(void)
{
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	b084      	sub	sp, #16
 800a9a4:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800a9a6:	4b1c      	ldr	r3, [pc, #112]	; (800aa18 <CAN_Rx_id0x13+0x78>)
 800a9a8:	60fb      	str	r3, [r7, #12]

    mo_index = 19;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800a9aa:	2313      	movs	r3, #19
 800a9ac:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800a9ae:	7afb      	ldrb	r3, [r7, #11]
 800a9b0:	68fa      	ldr	r2, [r7, #12]
 800a9b2:	3302      	adds	r3, #2
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4413      	add	r3, r2
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800a9be:	7afb      	ldrb	r3, [r7, #11]
 800a9c0:	68fa      	ldr	r2, [r7, #12]
 800a9c2:	3302      	adds	r3, #2
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	4413      	add	r3, r2
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	f7fe f882 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	f003 0301 	and.w	r3, r3, #1
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d016      	beq.n	800aa0c <CAN_Rx_id0x13+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	f7ff ff75 	bl	800a8d0 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800a9e6:	7afb      	ldrb	r3, [r7, #11]
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	3302      	adds	r3, #2
 800a9ec:	009b      	lsls	r3, r3, #2
 800a9ee:	4413      	add	r3, r2
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	f7fe f83c 	bl	8008a70 <CAN_NODE_MO_Receive>
 800a9f8:	4603      	mov	r3, r0
 800a9fa:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800a9fc:	78bb      	ldrb	r3, [r7, #2]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d102      	bne.n	800aa08 <CAN_Rx_id0x13+0x68>
      {
        // message object receive success.
          test = 1;
 800aa02:	2301      	movs	r3, #1
 800aa04:	707b      	strb	r3, [r7, #1]
 800aa06:	e001      	b.n	800aa0c <CAN_Rx_id0x13+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800aa08:	2300      	movs	r3, #0
 800aa0a:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x13();
 800aa0c:	f000 f884 	bl	800ab18 <process_Rx_CAN_0x13>
}
 800aa10:	3710      	adds	r7, #16
 800aa12:	46bd      	mov	sp, r7
 800aa14:	bd80      	pop	{r7, pc}
 800aa16:	bf00      	nop
 800aa18:	08013b40 	.word	0x08013b40

0800aa1c <CAN_Rx_id0x12>:


void CAN_Rx_id0x12(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b084      	sub	sp, #16
 800aa20:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800aa22:	4b1c      	ldr	r3, [pc, #112]	; (800aa94 <CAN_Rx_id0x12+0x78>)
 800aa24:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800aa26:	2314      	movs	r3, #20
 800aa28:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800aa2a:	7afb      	ldrb	r3, [r7, #11]
 800aa2c:	68fa      	ldr	r2, [r7, #12]
 800aa2e:	3302      	adds	r3, #2
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	4413      	add	r3, r2
 800aa34:	685b      	ldr	r3, [r3, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800aa3a:	7afb      	ldrb	r3, [r7, #11]
 800aa3c:	68fa      	ldr	r2, [r7, #12]
 800aa3e:	3302      	adds	r3, #2
 800aa40:	009b      	lsls	r3, r3, #2
 800aa42:	4413      	add	r3, r2
 800aa44:	685b      	ldr	r3, [r3, #4]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7fe f844 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	f003 0301 	and.w	r3, r3, #1
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d016      	beq.n	800aa88 <CAN_Rx_id0x12+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	2101      	movs	r1, #1
 800aa5e:	f7ff ff37 	bl	800a8d0 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800aa62:	7afb      	ldrb	r3, [r7, #11]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	3302      	adds	r3, #2
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	4413      	add	r3, r2
 800aa6c:	685b      	ldr	r3, [r3, #4]
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fd fffe 	bl	8008a70 <CAN_NODE_MO_Receive>
 800aa74:	4603      	mov	r3, r0
 800aa76:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aa78:	78bb      	ldrb	r3, [r7, #2]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d102      	bne.n	800aa84 <CAN_Rx_id0x12+0x68>
      {
        // message object receive success.
          test = 1;
 800aa7e:	2301      	movs	r3, #1
 800aa80:	707b      	strb	r3, [r7, #1]
 800aa82:	e001      	b.n	800aa88 <CAN_Rx_id0x12+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800aa84:	2300      	movs	r3, #0
 800aa86:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x12();
 800aa88:	f000 f9ae 	bl	800ade8 <process_Rx_CAN_0x12>
}
 800aa8c:	3710      	adds	r7, #16
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bd80      	pop	{r7, pc}
 800aa92:	bf00      	nop
 800aa94:	08013b40 	.word	0x08013b40

0800aa98 <CAN_Rx_id0x30>:


void CAN_Rx_id0x30(void)
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b084      	sub	sp, #16
 800aa9c:	af00      	add	r7, sp, #0
    uint8_t test;
    CAN_NODE_STATUS_t status, receive_status;
    XMC_CAN_MO_t *MO_Ptr;
    uint8_t mo_index;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800aa9e:	4b1c      	ldr	r3, [pc, #112]	; (800ab10 <CAN_Rx_id0x30+0x78>)
 800aaa0:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_RX_MO_GTAKE_BASE + CAN_0x211;
 800aaa2:	2315      	movs	r3, #21
 800aaa4:	72fb      	strb	r3, [r7, #11]

    MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800aaa6:	7afb      	ldrb	r3, [r7, #11]
 800aaa8:	68fa      	ldr	r2, [r7, #12]
 800aaaa:	3302      	adds	r3, #2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	685b      	ldr	r3, [r3, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	607b      	str	r3, [r7, #4]

    status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800aab6:	7afb      	ldrb	r3, [r7, #11]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	3302      	adds	r3, #2
 800aabc:	009b      	lsls	r3, r3, #2
 800aabe:	4413      	add	r3, r2
 800aac0:	685b      	ldr	r3, [r3, #4]
 800aac2:	4618      	mov	r0, r3
 800aac4:	f7fe f806 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800aac8:	4603      	mov	r3, r0
 800aaca:	70fb      	strb	r3, [r7, #3]
    //Check receive pending status
    if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800aacc:	78fb      	ldrb	r3, [r7, #3]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d016      	beq.n	800ab04 <CAN_Rx_id0x30+0x6c>
    {
      // Clear the flag
      XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800aad6:	6878      	ldr	r0, [r7, #4]
 800aad8:	2101      	movs	r1, #1
 800aada:	f7ff fef9 	bl	800a8d0 <XMC_CAN_MO_ResetStatus>
      // Read the received Message object
      receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800aade:	7afb      	ldrb	r3, [r7, #11]
 800aae0:	68fa      	ldr	r2, [r7, #12]
 800aae2:	3302      	adds	r3, #2
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	4413      	add	r3, r2
 800aae8:	685b      	ldr	r3, [r3, #4]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fd ffc0 	bl	8008a70 <CAN_NODE_MO_Receive>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	70bb      	strb	r3, [r7, #2]

      if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800aaf4:	78bb      	ldrb	r3, [r7, #2]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d102      	bne.n	800ab00 <CAN_Rx_id0x30+0x68>
      {
        // message object receive success.
          test = 1;
 800aafa:	2301      	movs	r3, #1
 800aafc:	707b      	strb	r3, [r7, #1]
 800aafe:	e001      	b.n	800ab04 <CAN_Rx_id0x30+0x6c>
      }
      else
      {
        // message object failed to receive.
          test = 0;
 800ab00:	2300      	movs	r3, #0
 800ab02:	707b      	strb	r3, [r7, #1]
      }
    }


    process_Rx_CAN_0x30();
 800ab04:	f000 f99c 	bl	800ae40 <process_Rx_CAN_0x30>
}
 800ab08:	3710      	adds	r7, #16
 800ab0a:	46bd      	mov	sp, r7
 800ab0c:	bd80      	pop	{r7, pc}
 800ab0e:	bf00      	nop
 800ab10:	08013b40 	.word	0x08013b40
 800ab14:	00000000 	.word	0x00000000

0800ab18 <process_Rx_CAN_0x13>:


void process_Rx_CAN_0x13(void)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b090      	sub	sp, #64	; 0x40
 800ab1c:	af02      	add	r7, sp, #8
    int8_t mo_index, *tempData;
    uint8_t CAN_rawData[8];
    uint16_t ThrottlePercentage = 6;
 800ab1e:	2306      	movs	r3, #6
 800ab20:	86bb      	strh	r3, [r7, #52]	; 0x34
    uint16_t VehSpeed;
    int16_t c = 0, c2 = 0;
 800ab22:	2300      	movs	r3, #0
 800ab24:	867b      	strh	r3, [r7, #50]	; 0x32
 800ab26:	2300      	movs	r3, #0
 800ab28:	863b      	strh	r3, [r7, #48]	; 0x30
    int16_t c1 = 0, c3 = 0;
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ab2e:	2300      	movs	r3, #0
 800ab30:	85bb      	strh	r3, [r7, #44]	; 0x2c
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ab32:	4b9f      	ldr	r3, [pc, #636]	; (800adb0 <process_Rx_CAN_0x13+0x298>)
 800ab34:	62bb      	str	r3, [r7, #40]	; 0x28

    mo_index = 19;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800ab36:	2313      	movs	r3, #19
 800ab38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x13].CAN_Data[ZERO_BYTE];
 800ab3c:	4b9d      	ldr	r3, [pc, #628]	; (800adb4 <process_Rx_CAN_0x13+0x29c>)
 800ab3e:	623b      	str	r3, [r7, #32]
    Irp_Mcu_Torques_29bit->Speed_rpm = 0;
 800ab40:	4b9d      	ldr	r3, [pc, #628]	; (800adb8 <process_Rx_CAN_0x13+0x2a0>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2200      	movs	r2, #0
 800ab46:	701a      	strb	r2, [r3, #0]
 800ab48:	785a      	ldrb	r2, [r3, #1]
 800ab4a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 800ab4e:	705a      	strb	r2, [r3, #1]
   // Irp_Mcu_Torques_29bit->DC_Current = 0;
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ab50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ab54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab56:	3302      	adds	r3, #2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	6a39      	ldr	r1, [r7, #32]
 800ab62:	f7ff fe35 	bl	800a7d0 <CAN_NODE_MO_ReadData>

    RPM = Irp_Mcu_Torques_29bit->Speed_rpm;
 800ab66:	4b94      	ldr	r3, [pc, #592]	; (800adb8 <process_Rx_CAN_0x13+0x2a0>)
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	781a      	ldrb	r2, [r3, #0]
 800ab6c:	785b      	ldrb	r3, [r3, #1]
 800ab6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab72:	021b      	lsls	r3, r3, #8
 800ab74:	4313      	orrs	r3, r2
 800ab76:	045b      	lsls	r3, r3, #17
 800ab78:	145b      	asrs	r3, r3, #17
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	b29a      	uxth	r2, r3
 800ab7e:	4b8f      	ldr	r3, [pc, #572]	; (800adbc <process_Rx_CAN_0x13+0x2a4>)
 800ab80:	801a      	strh	r2, [r3, #0]
    Torque_Estimation = Irp_Mcu_Torques_29bit ->Torque_Estimation;
 800ab82:	4b8d      	ldr	r3, [pc, #564]	; (800adb8 <process_Rx_CAN_0x13+0x2a0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	785a      	ldrb	r2, [r3, #1]
 800ab88:	09d2      	lsrs	r2, r2, #7
 800ab8a:	b2d2      	uxtb	r2, r2
 800ab8c:	7899      	ldrb	r1, [r3, #2]
 800ab8e:	0049      	lsls	r1, r1, #1
 800ab90:	430a      	orrs	r2, r1
 800ab92:	78db      	ldrb	r3, [r3, #3]
 800ab94:	f003 030f 	and.w	r3, r3, #15
 800ab98:	025b      	lsls	r3, r3, #9
 800ab9a:	4313      	orrs	r3, r2
 800ab9c:	04db      	lsls	r3, r3, #19
 800ab9e:	14db      	asrs	r3, r3, #19
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	461a      	mov	r2, r3
 800aba4:	4b86      	ldr	r3, [pc, #536]	; (800adc0 <process_Rx_CAN_0x13+0x2a8>)
 800aba6:	801a      	strh	r2, [r3, #0]
    //DC_Current_irp = (int)Irp_Mcu_Torques_29bit->DC_Current;
   // c = (int)Irp_Mcu_Torques_29bit->DC_Voltage;
   // c1 = (uint16_t)Irp_Mcu_Torques_29bit->DC_Voltage;
    //DC_Voltage_irp = Irp_Mcu_Torques_29bit->DC_Voltage;
   // DC_Current_irp = ((((uint8_t)tempData[3]) >> 4) | ((int)(tempData[4] & 0x7f) << 4));
    DC_Current_irp = (int)(((int16_t)(tempData[4] & 0x7f) << 4) | (((int16_t)tempData[3] >> 4)) & 0x0f);
 800aba8:	6a3b      	ldr	r3, [r7, #32]
 800abaa:	3304      	adds	r3, #4
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	b2db      	uxtb	r3, r3
 800abb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abb4:	011b      	lsls	r3, r3, #4
 800abb6:	b29a      	uxth	r2, r3
 800abb8:	6a3b      	ldr	r3, [r7, #32]
 800abba:	3303      	adds	r3, #3
 800abbc:	781b      	ldrb	r3, [r3, #0]
 800abbe:	b25b      	sxtb	r3, r3
 800abc0:	111b      	asrs	r3, r3, #4
 800abc2:	b2db      	uxtb	r3, r3
 800abc4:	b2db      	uxtb	r3, r3
 800abc6:	b29b      	uxth	r3, r3
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	b29b      	uxth	r3, r3
 800abce:	4313      	orrs	r3, r2
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	4b7c      	ldr	r3, [pc, #496]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800abd4:	801a      	strh	r2, [r3, #0]
    c2 = DC_Current_irp;//(tempData[3] >> 4);
 800abd6:	4b7b      	ldr	r3, [pc, #492]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800abd8:	881b      	ldrh	r3, [r3, #0]
 800abda:	863b      	strh	r3, [r7, #48]	; 0x30
    c3 = ((uint16_t)((uint8_t)tempData[4] & 0x7f) << 4);
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	3304      	adds	r3, #4
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abe8:	011b      	lsls	r3, r3, #4
 800abea:	85bb      	strh	r3, [r7, #44]	; 0x2c
    if(c2 < 0)
 800abec:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	da02      	bge.n	800abfa <process_Rx_CAN_0x13+0xe2>
    {
    	int a;
    	a++;
 800abf4:	69fb      	ldr	r3, [r7, #28]
 800abf6:	3301      	adds	r3, #1
 800abf8:	61fb      	str	r3, [r7, #28]
        //c3 = ((int16_t)((int16_t)tempData[4] & 0x7f) << 4) | 0xffffffff;
    }

    c = c3 | c2;
 800abfa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800abfc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800abfe:	4313      	orrs	r3, r2
 800ac00:	867b      	strh	r3, [r7, #50]	; 0x32
    DC_Voltage_irp = ((((uint16_t)tempData[6] & 0x0f) << 9) | (((uint16_t)tempData[5] << 1) | 0/*((uint16_t)tempData[4] >> 7) & 0x01*/))/10;
 800ac02:	6a3b      	ldr	r3, [r7, #32]
 800ac04:	3306      	adds	r3, #6
 800ac06:	781b      	ldrb	r3, [r3, #0]
 800ac08:	b25b      	sxtb	r3, r3
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	f003 030f 	and.w	r3, r3, #15
 800ac10:	025a      	lsls	r2, r3, #9
 800ac12:	6a3b      	ldr	r3, [r7, #32]
 800ac14:	3305      	adds	r3, #5
 800ac16:	781b      	ldrb	r3, [r3, #0]
 800ac18:	b25b      	sxtb	r3, r3
 800ac1a:	b29b      	uxth	r3, r3
 800ac1c:	005b      	lsls	r3, r3, #1
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	4a69      	ldr	r2, [pc, #420]	; (800adc8 <process_Rx_CAN_0x13+0x2b0>)
 800ac22:	fb82 1203 	smull	r1, r2, r2, r3
 800ac26:	1092      	asrs	r2, r2, #2
 800ac28:	17db      	asrs	r3, r3, #31
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	b29a      	uxth	r2, r3
 800ac2e:	4b67      	ldr	r3, [pc, #412]	; (800adcc <process_Rx_CAN_0x13+0x2b4>)
 800ac30:	801a      	strh	r2, [r3, #0]

    MotorPower_Irp = DC_Current_irp * DC_Voltage_irp;
 800ac32:	4b64      	ldr	r3, [pc, #400]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800ac34:	881b      	ldrh	r3, [r3, #0]
 800ac36:	b29a      	uxth	r2, r3
 800ac38:	4b64      	ldr	r3, [pc, #400]	; (800adcc <process_Rx_CAN_0x13+0x2b4>)
 800ac3a:	881b      	ldrh	r3, [r3, #0]
 800ac3c:	fb12 f303 	smulbb	r3, r2, r3
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	b29a      	uxth	r2, r3
 800ac44:	4b62      	ldr	r3, [pc, #392]	; (800add0 <process_Rx_CAN_0x13+0x2b8>)
 800ac46:	801a      	strh	r2, [r3, #0]
    if(c < -1)
 800ac48:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800ac4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac50:	da02      	bge.n	800ac58 <process_Rx_CAN_0x13+0x140>
    {
    	int a;
    	   a++;
 800ac52:	69bb      	ldr	r3, [r7, #24]
 800ac54:	3301      	adds	r3, #1
 800ac56:	61bb      	str	r3, [r7, #24]

    }
    if(Torque_Estimation > 1)
 800ac58:	4b59      	ldr	r3, [pc, #356]	; (800adc0 <process_Rx_CAN_0x13+0x2a8>)
 800ac5a:	881b      	ldrh	r3, [r3, #0]
 800ac5c:	b21b      	sxth	r3, r3
 800ac5e:	2b01      	cmp	r3, #1
 800ac60:	dd02      	ble.n	800ac68 <process_Rx_CAN_0x13+0x150>
    {
    	int a;
    	a++;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	3301      	adds	r3, #1
 800ac66:	617b      	str	r3, [r7, #20]
    }
    if(Torque_Estimation < -5)
 800ac68:	4b55      	ldr	r3, [pc, #340]	; (800adc0 <process_Rx_CAN_0x13+0x2a8>)
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	b21b      	sxth	r3, r3
 800ac6e:	f113 0f05 	cmn.w	r3, #5
 800ac72:	da02      	bge.n	800ac7a <process_Rx_CAN_0x13+0x162>
    {
    	int a;
    	a++;
 800ac74:	693b      	ldr	r3, [r7, #16]
 800ac76:	3301      	adds	r3, #1
 800ac78:	613b      	str	r3, [r7, #16]

    }
    Regenration_flag = 0;
 800ac7a:	4b56      	ldr	r3, [pc, #344]	; (800add4 <process_Rx_CAN_0x13+0x2bc>)
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	701a      	strb	r2, [r3, #0]
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
 800ac80:	4b50      	ldr	r3, [pc, #320]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	b21b      	sxth	r3, r3
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	dd08      	ble.n	800ac9c <process_Rx_CAN_0x13+0x184>
 800ac8a:	4b4e      	ldr	r3, [pc, #312]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800ac8c:	881b      	ldrh	r3, [r3, #0]
 800ac8e:	b21b      	sxth	r3, r3
 800ac90:	2b32      	cmp	r3, #50	; 0x32
 800ac92:	dc03      	bgt.n	800ac9c <process_Rx_CAN_0x13+0x184>
{
	int a;
	a++;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3301      	adds	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]
    	a++;

    }
    Regenration_flag = 0;
if((DC_Current_irp > 0) && (DC_Current_irp <= 50))
{
 800ac9a:	e00f      	b.n	800acbc <process_Rx_CAN_0x13+0x1a4>
	int a;
	a++;
}
else if(DC_Current_irp == 0)
 800ac9c:	4b49      	ldr	r3, [pc, #292]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d00b      	beq.n	800acbc <process_Rx_CAN_0x13+0x1a4>
{
//Regenration_flag = 1;
}
else if(DC_Current_irp > 2000)
 800aca4:	4b47      	ldr	r3, [pc, #284]	; (800adc4 <process_Rx_CAN_0x13+0x2ac>)
 800aca6:	881b      	ldrh	r3, [r3, #0]
 800aca8:	b21b      	sxth	r3, r3
 800acaa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800acae:	dd05      	ble.n	800acbc <process_Rx_CAN_0x13+0x1a4>
{
	int a;
	a++;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	3301      	adds	r3, #1
 800acb4:	60bb      	str	r3, [r7, #8]
	Regenration_flag = 1;
 800acb6:	4b47      	ldr	r3, [pc, #284]	; (800add4 <process_Rx_CAN_0x13+0x2bc>)
 800acb8:	2201      	movs	r2, #1
 800acba:	701a      	strb	r2, [r3, #0]
}
    VehSpeed = calculate_speed(RPM);
 800acbc:	4b3f      	ldr	r3, [pc, #252]	; (800adbc <process_Rx_CAN_0x13+0x2a4>)
 800acbe:	881b      	ldrh	r3, [r3, #0]
 800acc0:	b29b      	uxth	r3, r3
 800acc2:	b21b      	sxth	r3, r3
 800acc4:	4618      	mov	r0, r3
 800acc6:	f7ff fd9f 	bl	800a808 <calculate_speed>
 800acca:	4603      	mov	r3, r0
 800accc:	86fb      	strh	r3, [r7, #54]	; 0x36

    speed_4g=VehSpeed;
 800acce:	4a42      	ldr	r2, [pc, #264]	; (800add8 <process_Rx_CAN_0x13+0x2c0>)
 800acd0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acd2:	8013      	strh	r3, [r2, #0]

    if(VehSpeed > 100)
 800acd4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800acd6:	2b64      	cmp	r3, #100	; 0x64
 800acd8:	d901      	bls.n	800acde <process_Rx_CAN_0x13+0x1c6>
        VehSpeed = 100;
 800acda:	2364      	movs	r3, #100	; 0x64
 800acdc:	86fb      	strh	r3, [r7, #54]	; 0x36

    ThrottlePercentage =  map(VehSpeed, 0, 100, 6200, 64000);
 800acde:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ace0:	f44f 437a 	mov.w	r3, #64000	; 0xfa00
 800ace4:	9300      	str	r3, [sp, #0]
 800ace6:	4610      	mov	r0, r2
 800ace8:	2100      	movs	r1, #0
 800acea:	2264      	movs	r2, #100	; 0x64
 800acec:	f641 0338 	movw	r3, #6200	; 0x1838
 800acf0:	f7ff fa8e 	bl	800a210 <map>
 800acf4:	4603      	mov	r3, r0
 800acf6:	86bb      	strh	r3, [r7, #52]	; 0x34
    OBDII_CAN[can_0x04].CAN_Data[3] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[THIRD_BYTE] = ThrottlePercentage;
 800acf8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800acfa:	b2da      	uxtb	r2, r3
 800acfc:	4b37      	ldr	r3, [pc, #220]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800acfe:	74da      	strb	r2, [r3, #19]
 800ad00:	4b36      	ldr	r3, [pc, #216]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad02:	7cdb      	ldrb	r3, [r3, #19]
 800ad04:	b2da      	uxtb	r2, r3
 800ad06:	4b36      	ldr	r3, [pc, #216]	; (800ade0 <process_Rx_CAN_0x13+0x2c8>)
 800ad08:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    OBDII_CAN[can_0x04].CAN_Data[2] = CAN_MSG_DB[CAN_0CF00400].CAN_Data[FOURTH_BYTE] = (ThrottlePercentage >> 8);
 800ad0c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800ad0e:	0a1b      	lsrs	r3, r3, #8
 800ad10:	b29b      	uxth	r3, r3
 800ad12:	b2da      	uxtb	r2, r3
 800ad14:	4b31      	ldr	r3, [pc, #196]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad16:	751a      	strb	r2, [r3, #20]
 800ad18:	4b30      	ldr	r3, [pc, #192]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad1a:	7d1b      	ldrb	r3, [r3, #20]
 800ad1c:	b2da      	uxtb	r2, r3
 800ad1e:	4b30      	ldr	r3, [pc, #192]	; (800ade0 <process_Rx_CAN_0x13+0x2c8>)
 800ad20:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

    VehicleSpeedglb = VehSpeed;
 800ad24:	4a2f      	ldr	r2, [pc, #188]	; (800ade4 <process_Rx_CAN_0x13+0x2cc>)
 800ad26:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad28:	8013      	strh	r3, [r2, #0]

    if(VehSpeed)
 800ad2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d01d      	beq.n	800ad6c <process_Rx_CAN_0x13+0x254>
    	VehSpeed = 104.11* VehSpeed + 226.99;
 800ad30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad32:	4618      	mov	r0, r3
 800ad34:	f005 fe6e 	bl	8010a14 <__aeabi_i2d>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	4619      	mov	r1, r3
 800ad40:	a317      	add	r3, pc, #92	; (adr r3, 800ada0 <process_Rx_CAN_0x13+0x288>)
 800ad42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad46:	f005 fecb 	bl	8010ae0 <__aeabi_dmul>
 800ad4a:	4602      	mov	r2, r0
 800ad4c:	460b      	mov	r3, r1
 800ad4e:	4610      	mov	r0, r2
 800ad50:	4619      	mov	r1, r3
 800ad52:	a315      	add	r3, pc, #84	; (adr r3, 800ada8 <process_Rx_CAN_0x13+0x290>)
 800ad54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad58:	f005 fd10 	bl	801077c <__adddf3>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	460b      	mov	r3, r1
 800ad60:	4610      	mov	r0, r2
 800ad62:	4619      	mov	r1, r3
 800ad64:	f006 f97e 	bl	8011064 <__aeabi_d2uiz>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	86fb      	strh	r3, [r7, #54]	; 0x36

    OBDII_CAN[can_0x04].CAN_Data[5] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[FIFTH_BYTE] = (VehSpeed);
 800ad6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad6e:	b2da      	uxtb	r2, r3
 800ad70:	4b1a      	ldr	r3, [pc, #104]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad72:	725a      	strb	r2, [r3, #9]
 800ad74:	4b19      	ldr	r3, [pc, #100]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad76:	7a5b      	ldrb	r3, [r3, #9]
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4b19      	ldr	r3, [pc, #100]	; (800ade0 <process_Rx_CAN_0x13+0x2c8>)
 800ad7c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    OBDII_CAN[can_0x04].CAN_Data[4] = CAN_MSG_DB[CAN_18FF0921].CAN_Data[SIXTH_BYTE] = (VehSpeed >> 8U);
 800ad80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ad82:	0a1b      	lsrs	r3, r3, #8
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	b2da      	uxtb	r2, r3
 800ad88:	4b14      	ldr	r3, [pc, #80]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad8a:	729a      	strb	r2, [r3, #10]
 800ad8c:	4b13      	ldr	r3, [pc, #76]	; (800addc <process_Rx_CAN_0x13+0x2c4>)
 800ad8e:	7a9b      	ldrb	r3, [r3, #10]
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	4b13      	ldr	r3, [pc, #76]	; (800ade0 <process_Rx_CAN_0x13+0x2c8>)
 800ad94:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    //VehicleSpeedglb = VehSpeed;
}
 800ad98:	3738      	adds	r7, #56	; 0x38
 800ad9a:	46bd      	mov	sp, r7
 800ad9c:	bd80      	pop	{r7, pc}
 800ad9e:	bf00      	nop
 800ada0:	3d70a3d7 	.word	0x3d70a3d7
 800ada4:	405a070a 	.word	0x405a070a
 800ada8:	147ae148 	.word	0x147ae148
 800adac:	406c5fae 	.word	0x406c5fae
 800adb0:	08013b40 	.word	0x08013b40
 800adb4:	1ffe9468 	.word	0x1ffe9468
 800adb8:	1ffe8820 	.word	0x1ffe8820
 800adbc:	1fff4818 	.word	0x1fff4818
 800adc0:	1fff483e 	.word	0x1fff483e
 800adc4:	1fff4802 	.word	0x1fff4802
 800adc8:	66666667 	.word	0x66666667
 800adcc:	1fff48a4 	.word	0x1fff48a4
 800add0:	1fff488a 	.word	0x1fff488a
 800add4:	1fff48da 	.word	0x1fff48da
 800add8:	1fff4830 	.word	0x1fff4830
 800addc:	1ffe92d8 	.word	0x1ffe92d8
 800ade0:	1ffe9218 	.word	0x1ffe9218
 800ade4:	1fff4816 	.word	0x1fff4816

0800ade8 <process_Rx_CAN_0x12>:

void process_Rx_CAN_0x12(void)
{
 800ade8:	b580      	push	{r7, lr}
 800adea:	b084      	sub	sp, #16
 800adec:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <process_Rx_CAN_0x12+0x44>)
 800adf0:	60fb      	str	r3, [r7, #12]

    mo_index = 20;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800adf2:	2314      	movs	r3, #20
 800adf4:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x12].CAN_Data[ZERO_BYTE];
 800adf6:	4b0e      	ldr	r3, [pc, #56]	; (800ae30 <process_Rx_CAN_0x12+0x48>)
 800adf8:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800adfa:	7afb      	ldrb	r3, [r7, #11]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	3302      	adds	r3, #2
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	4618      	mov	r0, r3
 800ae08:	6879      	ldr	r1, [r7, #4]
 800ae0a:	f7ff fce1 	bl	800a7d0 <CAN_NODE_MO_ReadData>

    Mcu_Temp_Irp = Irp_MCU_Status_29bit->MCU_temp;
 800ae0e:	4b09      	ldr	r3, [pc, #36]	; (800ae34 <process_Rx_CAN_0x12+0x4c>)
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	78db      	ldrb	r3, [r3, #3]
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <process_Rx_CAN_0x12+0x50>)
 800ae18:	801a      	strh	r2, [r3, #0]
    Motor_Temp_Irp = Irp_MCU_Status_29bit->Motor_temp;
 800ae1a:	4b06      	ldr	r3, [pc, #24]	; (800ae34 <process_Rx_CAN_0x12+0x4c>)
 800ae1c:	681b      	ldr	r3, [r3, #0]
 800ae1e:	789b      	ldrb	r3, [r3, #2]
 800ae20:	b29a      	uxth	r2, r3
 800ae22:	4b06      	ldr	r3, [pc, #24]	; (800ae3c <process_Rx_CAN_0x12+0x54>)
 800ae24:	801a      	strh	r2, [r3, #0]
}
 800ae26:	3710      	adds	r7, #16
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}
 800ae2c:	08013b40 	.word	0x08013b40
 800ae30:	1ffe945c 	.word	0x1ffe945c
 800ae34:	1ffe8828 	.word	0x1ffe8828
 800ae38:	1fff4826 	.word	0x1fff4826
 800ae3c:	1fff48d4 	.word	0x1fff48d4

0800ae40 <process_Rx_CAN_0x30>:

void process_Rx_CAN_0x30(void)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b084      	sub	sp, #16
 800ae44:	af00      	add	r7, sp, #0
    uint8_t mo_index, *tempData;
    const CAN_NODE_t *HandlePtr1 = &CAN_NODE_1;
 800ae46:	4b09      	ldr	r3, [pc, #36]	; (800ae6c <process_Rx_CAN_0x30+0x2c>)
 800ae48:	60fb      	str	r3, [r7, #12]

    mo_index = 21;//CAN_TX_MO_COUNT_GTAKE + CAN_0x211;
 800ae4a:	2315      	movs	r3, #21
 800ae4c:	72fb      	strb	r3, [r7, #11]

    //unnecessary, but keep for the moment
    tempData = &CAN_IRP_29bit[CAN_id0x30].CAN_Data[ZERO_BYTE];
 800ae4e:	4b08      	ldr	r3, [pc, #32]	; (800ae70 <process_Rx_CAN_0x30+0x30>)
 800ae50:	607b      	str	r3, [r7, #4]
    //read data to external buffer
    CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800ae52:	7afb      	ldrb	r3, [r7, #11]
 800ae54:	68fa      	ldr	r2, [r7, #12]
 800ae56:	3302      	adds	r3, #2
 800ae58:	009b      	lsls	r3, r3, #2
 800ae5a:	4413      	add	r3, r2
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	6879      	ldr	r1, [r7, #4]
 800ae62:	f7ff fcb5 	bl	800a7d0 <CAN_NODE_MO_ReadData>
}
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}
 800ae6c:	08013b40 	.word	0x08013b40
 800ae70:	1ffe948c 	.word	0x1ffe948c

0800ae74 <Irp_Tx_29bit>:


void Irp_Tx_29bit(void)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	af00      	add	r7, sp, #0
	CAN_Tx_id0x10();
 800ae78:	f7ff fd38 	bl	800a8ec <CAN_Tx_id0x10>
	CAN_Tx_id0x20();
 800ae7c:	f7ff fd54 	bl	800a928 <CAN_Tx_id0x20>
	CAN_Tx_id0x21();
 800ae80:	f7ff fd70 	bl	800a964 <CAN_Tx_id0x21>
}
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop

0800ae88 <Irp_Rx_29bit>:

void Irp_Rx_29bit(void)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	af00      	add	r7, sp, #0
	CAN_Rx_id0x13();
 800ae8c:	f7ff fd88 	bl	800a9a0 <CAN_Rx_id0x13>
	CAN_Rx_id0x12();
 800ae90:	f7ff fdc4 	bl	800aa1c <CAN_Rx_id0x12>
	CAN_Rx_id0x30();
 800ae94:	f7ff fe00 	bl	800aa98 <CAN_Rx_id0x30>
}
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop

0800ae9c <XMC_CAN_MO_ResetStatus>:
 * None
 *
 */

__STATIC_INLINE void XMC_CAN_MO_ResetStatus(const XMC_CAN_MO_t *const can_mo, const uint32_t mask)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b083      	sub	sp, #12
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
 800aea4:	6039      	str	r1, [r7, #0]
  can_mo->can_mo_ptr->MOCTR = mask;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	61da      	str	r2, [r3, #28]
}
 800aeae:	370c      	adds	r7, #12
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb6:	4770      	bx	lr

0800aeb8 <Process_CAN_id0x18FF50E5>:
			       }
}


void Process_CAN_id0x18FF50E5(void)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
	static once = 0, ccount = 200;
	int test = 0;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
uint8_t *tempData, mo_index;
		const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800aec2:	4b23      	ldr	r3, [pc, #140]	; (800af50 <Process_CAN_id0x18FF50E5+0x98>)
 800aec4:	60bb      	str	r3, [r7, #8]

		mo_index = 28;
 800aec6:	231c      	movs	r3, #28
 800aec8:	71fb      	strb	r3, [r7, #7]

		tempData = &obc_madhura[can_0x18FF50E5].CAN_Data[0];
 800aeca:	4b22      	ldr	r3, [pc, #136]	; (800af54 <Process_CAN_id0x18FF50E5+0x9c>)
 800aecc:	603b      	str	r3, [r7, #0]

		//read data to external buffer
		CAN_NODE_MO_ReadData(HandlePtr1->lmobj_ptr[mo_index], tempData);
 800aece:	79fb      	ldrb	r3, [r7, #7]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	3302      	adds	r3, #2
 800aed4:	009b      	lsls	r3, r3, #2
 800aed6:	4413      	add	r3, r2
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	4618      	mov	r0, r3
 800aedc:	6839      	ldr	r1, [r7, #0]
 800aede:	f7ff fc77 	bl	800a7d0 <CAN_NODE_MO_ReadData>

		//if(((obc_madhura[can_0x18FF50E5].CAN_Data[4] & 0x1f) == 0x00) && (obc_madhura[can_0x18FF50E5].CAN_Data[2]))
		if(charging_started && (!VehicleSpeedglb))
 800aee2:	4b1d      	ldr	r3, [pc, #116]	; (800af58 <Process_CAN_id0x18FF50E5+0xa0>)
 800aee4:	781b      	ldrb	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d01a      	beq.n	800af20 <Process_CAN_id0x18FF50E5+0x68>
 800aeea:	4b1c      	ldr	r3, [pc, #112]	; (800af5c <Process_CAN_id0x18FF50E5+0xa4>)
 800aeec:	881b      	ldrh	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d116      	bne.n	800af20 <Process_CAN_id0x18FF50E5+0x68>
		{
			//if( obc_madhura[can_0x18FF50E5].CAN_Data[2])
			{
				//Vcu_InPuts.charger_connect_IN = 1;
				if(once == 0)
 800aef2:	4b1b      	ldr	r3, [pc, #108]	; (800af60 <Process_CAN_id0x18FF50E5+0xa8>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d10b      	bne.n	800af12 <Process_CAN_id0x18FF50E5+0x5a>
				{
					digital_io_setoutputhigh(&ORVM_PWR_OUT_D);
 800aefa:	481a      	ldr	r0, [pc, #104]	; (800af64 <Process_CAN_id0x18FF50E5+0xac>)
 800aefc:	f004 fff4 	bl	800fee8 <digital_io_setoutputhigh>
					Delay(200);
 800af00:	20c8      	movs	r0, #200	; 0xc8
 800af02:	f005 f82d 	bl	800ff60 <Delay>
					//Vcu_InPuts.charger_connect_IN = 1;// changed this and added below
					test = 1;
 800af06:	2301      	movs	r3, #1
 800af08:	60fb      	str	r3, [r7, #12]
					once = 1;
 800af0a:	4b15      	ldr	r3, [pc, #84]	; (800af60 <Process_CAN_id0x18FF50E5+0xa8>)
 800af0c:	2201      	movs	r2, #1
 800af0e:	601a      	str	r2, [r3, #0]
 800af10:	e002      	b.n	800af18 <Process_CAN_id0x18FF50E5+0x60>
				}
				else
				{
					digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800af12:	4814      	ldr	r0, [pc, #80]	; (800af64 <Process_CAN_id0x18FF50E5+0xac>)
 800af14:	f004 ffac 	bl	800fe70 <digital_io_setoutputlow>
					//Vcu_InPuts.charger_connect_IN = 0;
				}
			}
			ccount = 200;
 800af18:	4b13      	ldr	r3, [pc, #76]	; (800af68 <Process_CAN_id0x18FF50E5+0xb0>)
 800af1a:	22c8      	movs	r2, #200	; 0xc8
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e013      	b.n	800af48 <Process_CAN_id0x18FF50E5+0x90>
		}
		else if((--ccount) <= 0)
 800af20:	4b11      	ldr	r3, [pc, #68]	; (800af68 <Process_CAN_id0x18FF50E5+0xb0>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	3b01      	subs	r3, #1
 800af26:	4a10      	ldr	r2, [pc, #64]	; (800af68 <Process_CAN_id0x18FF50E5+0xb0>)
 800af28:	6013      	str	r3, [r2, #0]
 800af2a:	4b0f      	ldr	r3, [pc, #60]	; (800af68 <Process_CAN_id0x18FF50E5+0xb0>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	dc0a      	bgt.n	800af48 <Process_CAN_id0x18FF50E5+0x90>
		{
			test = 0;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
			once = 0;
 800af36:	4b0a      	ldr	r3, [pc, #40]	; (800af60 <Process_CAN_id0x18FF50E5+0xa8>)
 800af38:	2200      	movs	r2, #0
 800af3a:	601a      	str	r2, [r3, #0]
			digital_io_setoutputlow(&ORVM_PWR_OUT_D);
 800af3c:	4809      	ldr	r0, [pc, #36]	; (800af64 <Process_CAN_id0x18FF50E5+0xac>)
 800af3e:	f004 ff97 	bl	800fe70 <digital_io_setoutputlow>
			//Vcu_InPuts.charger_connect_IN = 0; // change this and add below
			ccount = 200;
 800af42:	4b09      	ldr	r3, [pc, #36]	; (800af68 <Process_CAN_id0x18FF50E5+0xb0>)
 800af44:	22c8      	movs	r2, #200	; 0xc8
 800af46:	601a      	str	r2, [r3, #0]
		}

	//7.0,7.1
}
 800af48:	3710      	adds	r7, #16
 800af4a:	46bd      	mov	sp, r7
 800af4c:	bd80      	pop	{r7, pc}
 800af4e:	bf00      	nop
 800af50:	08013958 	.word	0x08013958
 800af54:	1ffe94d4 	.word	0x1ffe94d4
 800af58:	1fff485c 	.word	0x1fff485c
 800af5c:	1fff4816 	.word	0x1fff4816
 800af60:	1fff4490 	.word	0x1fff4490
 800af64:	1fff42b0 	.word	0x1fff42b0
 800af68:	1ffe94dc 	.word	0x1ffe94dc

0800af6c <Read_CAN_id0x18FF50E5>:

void Read_CAN_id0x18FF50E5(void)
{
 800af6c:	b590      	push	{r4, r7, lr}
 800af6e:	b085      	sub	sp, #20
 800af70:	af00      	add	r7, sp, #0
	static uint64_t count_in = 0;
	uint8_t test;
			CAN_NODE_STATUS_t status, receive_status;
			XMC_CAN_MO_t *MO_Ptr;
			uint8_t mo_index;
			const CAN_NODE_t *HandlePtr1 = &CAN_NODE_0;
 800af72:	4b32      	ldr	r3, [pc, #200]	; (800b03c <Read_CAN_id0x18FF50E5+0xd0>)
 800af74:	60fb      	str	r3, [r7, #12]

			mo_index = 28;
 800af76:	231c      	movs	r3, #28
 800af78:	72fb      	strb	r3, [r7, #11]

			MO_Ptr = HandlePtr1->lmobj_ptr[mo_index]->mo_ptr;
 800af7a:	7afb      	ldrb	r3, [r7, #11]
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	3302      	adds	r3, #2
 800af80:	009b      	lsls	r3, r3, #2
 800af82:	4413      	add	r3, r2
 800af84:	685b      	ldr	r3, [r3, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	607b      	str	r3, [r7, #4]

			status = CAN_NODE_MO_GetStatus(HandlePtr1->lmobj_ptr[mo_index]);
 800af8a:	7afb      	ldrb	r3, [r7, #11]
 800af8c:	68fa      	ldr	r2, [r7, #12]
 800af8e:	3302      	adds	r3, #2
 800af90:	009b      	lsls	r3, r3, #2
 800af92:	4413      	add	r3, r2
 800af94:	685b      	ldr	r3, [r3, #4]
 800af96:	4618      	mov	r0, r3
 800af98:	f7fd fd9c 	bl	8008ad4 <CAN_NODE_MO_GetStatus>
 800af9c:	4603      	mov	r3, r0
 800af9e:	70fb      	strb	r3, [r7, #3]

			//Vcu_InPuts.charger_connect_IN = 0;
			//Check receive pending status
			if (status & XMC_CAN_MO_STATUS_RX_PENDING)
 800afa0:	78fb      	ldrb	r3, [r7, #3]
 800afa2:	f003 0301 	and.w	r3, r3, #1
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d02b      	beq.n	800b002 <Read_CAN_id0x18FF50E5+0x96>
			{
			  // Clear the flag
			  XMC_CAN_MO_ResetStatus(MO_Ptr,XMC_CAN_MO_RESET_STATUS_RX_PENDING);
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	2101      	movs	r1, #1
 800afae:	f7ff ff75 	bl	800ae9c <XMC_CAN_MO_ResetStatus>
			  // Read the received Message object
			  receive_status = CAN_NODE_MO_Receive(HandlePtr1->lmobj_ptr[mo_index]);
 800afb2:	7afb      	ldrb	r3, [r7, #11]
 800afb4:	68fa      	ldr	r2, [r7, #12]
 800afb6:	3302      	adds	r3, #2
 800afb8:	009b      	lsls	r3, r3, #2
 800afba:	4413      	add	r3, r2
 800afbc:	685b      	ldr	r3, [r3, #4]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7fd fd56 	bl	8008a70 <CAN_NODE_MO_Receive>
 800afc4:	4603      	mov	r3, r0
 800afc6:	70bb      	strb	r3, [r7, #2]

			  if (receive_status == CAN_NODE_STATUS_SUCCESS)
 800afc8:	78bb      	ldrb	r3, [r7, #2]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d10c      	bne.n	800afe8 <Read_CAN_id0x18FF50E5+0x7c>
			  {
			    // message object receive success.
				  test = 1;
 800afce:	2301      	movs	r3, #1
 800afd0:	707b      	strb	r3, [r7, #1]
				  //Process_CAN_id0x18FF50E5();
				  count_in = 0;
 800afd2:	491b      	ldr	r1, [pc, #108]	; (800b040 <Read_CAN_id0x18FF50E5+0xd4>)
 800afd4:	f04f 0200 	mov.w	r2, #0
 800afd8:	f04f 0300 	mov.w	r3, #0
 800afdc:	e9c1 2300 	strd	r2, r3, [r1]
				  charging_detect = 1; // here added
 800afe0:	4b18      	ldr	r3, [pc, #96]	; (800b044 <Read_CAN_id0x18FF50E5+0xd8>)
 800afe2:	2201      	movs	r2, #1
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	e001      	b.n	800afec <Read_CAN_id0x18FF50E5+0x80>
			  }
			  else
			  {
			    // message object failed to receive.
				  test = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	707b      	strb	r3, [r7, #1]
			  }
			  count_in = 0;
 800afec:	4914      	ldr	r1, [pc, #80]	; (800b040 <Read_CAN_id0x18FF50E5+0xd4>)
 800afee:	f04f 0200 	mov.w	r2, #0
 800aff2:	f04f 0300 	mov.w	r3, #0
 800aff6:	e9c1 2300 	strd	r2, r3, [r1]
			  Vcu_InPuts.charger_connect_IN = 1; // here added
 800affa:	4b13      	ldr	r3, [pc, #76]	; (800b048 <Read_CAN_id0x18FF50E5+0xdc>)
 800affc:	2201      	movs	r2, #1
 800affe:	709a      	strb	r2, [r3, #2]
 800b000:	e016      	b.n	800b030 <Read_CAN_id0x18FF50E5+0xc4>
			}
			else
			{
				if(count_in++ > 30)
 800b002:	4b0f      	ldr	r3, [pc, #60]	; (800b040 <Read_CAN_id0x18FF50E5+0xd4>)
 800b004:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b008:	1c50      	adds	r0, r2, #1
 800b00a:	f143 0100 	adc.w	r1, r3, #0
 800b00e:	4c0c      	ldr	r4, [pc, #48]	; (800b040 <Read_CAN_id0x18FF50E5+0xd4>)
 800b010:	e9c4 0100 	strd	r0, r1, [r4]
 800b014:	2b00      	cmp	r3, #0
 800b016:	bf08      	it	eq
 800b018:	2a1f      	cmpeq	r2, #31
 800b01a:	d309      	bcc.n	800b030 <Read_CAN_id0x18FF50E5+0xc4>
				{
					Vcu_InPuts.charger_connect_IN = 0; // here added
 800b01c:	4b0a      	ldr	r3, [pc, #40]	; (800b048 <Read_CAN_id0x18FF50E5+0xdc>)
 800b01e:	2200      	movs	r2, #0
 800b020:	709a      	strb	r2, [r3, #2]
					count_in = 0;
 800b022:	4907      	ldr	r1, [pc, #28]	; (800b040 <Read_CAN_id0x18FF50E5+0xd4>)
 800b024:	f04f 0200 	mov.w	r2, #0
 800b028:	f04f 0300 	mov.w	r3, #0
 800b02c:	e9c1 2300 	strd	r2, r3, [r1]
				}
			}

			Process_CAN_id0x18FF50E5();
 800b030:	f7ff ff42 	bl	800aeb8 <Process_CAN_id0x18FF50E5>
}
 800b034:	3714      	adds	r7, #20
 800b036:	46bd      	mov	sp, r7
 800b038:	bd90      	pop	{r4, r7, pc}
 800b03a:	bf00      	nop
 800b03c:	08013958 	.word	0x08013958
 800b040:	1fff4498 	.word	0x1fff4498
 800b044:	1fff5232 	.word	0x1fff5232
 800b048:	1fff5108 	.word	0x1fff5108

0800b04c <Process_4G_Event_Data>:

vcu_fleet_fleet_10_sec TD1;
uint8_t Eventbuffer_4Gcomm[512]={0};

void Process_4G_Event_Data(void)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	af00      	add	r7, sp, #0

	memset(&TD1,0,sizeof(TD1));
 800b050:	485f      	ldr	r0, [pc, #380]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b052:	2100      	movs	r1, #0
 800b054:	2264      	movs	r2, #100	; 0x64
 800b056:	f006 fb7c 	bl	8011752 <memset>
	TD1.car_id = 6;
 800b05a:	4b5d      	ldr	r3, [pc, #372]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b05c:	2200      	movs	r2, #0
 800b05e:	f042 0206 	orr.w	r2, r2, #6
 800b062:	701a      	strb	r2, [r3, #0]
 800b064:	2200      	movs	r2, #0
 800b066:	705a      	strb	r2, [r3, #1]
 800b068:	2200      	movs	r2, #0
 800b06a:	709a      	strb	r2, [r3, #2]
 800b06c:	2200      	movs	r2, #0
 800b06e:	70da      	strb	r2, [r3, #3]
	TD1.trip_id = 81050;
 800b070:	4b57      	ldr	r3, [pc, #348]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b072:	2200      	movs	r2, #0
 800b074:	f062 0265 	orn	r2, r2, #101	; 0x65
 800b078:	711a      	strb	r2, [r3, #4]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f042 023c 	orr.w	r2, r2, #60	; 0x3c
 800b080:	715a      	strb	r2, [r3, #5]
 800b082:	2200      	movs	r2, #0
 800b084:	f042 0201 	orr.w	r2, r2, #1
 800b088:	719a      	strb	r2, [r3, #6]
 800b08a:	2200      	movs	r2, #0
 800b08c:	71da      	strb	r2, [r3, #7]
	TD1.identifier = 318;
 800b08e:	4b50      	ldr	r3, [pc, #320]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b090:	2200      	movs	r2, #0
 800b092:	f042 023e 	orr.w	r2, r2, #62	; 0x3e
 800b096:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 800b09a:	2200      	movs	r2, #0
 800b09c:	f042 0201 	orr.w	r2, r2, #1
 800b0a0:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
//	TD1.rtc.days = current_time.days;
//	TD1.rtc.day_of_week = current_time.daysofweek;
//	TD1.rtc.hours = current_time.hours;
//	TD1.rtc.minutes = current_time.minutes;
//	TD1.rtc.seconds = current_time.seconds;
	TD1.hv_soc_calculated =Mapped_BMS_SOC;
 800b0b0:	4b48      	ldr	r3, [pc, #288]	; (800b1d4 <Process_4G_Event_Data+0x188>)
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	4b46      	ldr	r3, [pc, #280]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0b8:	619a      	str	r2, [r3, #24]
	TD1.soc = ((int)(CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[0]);
 800b0ba:	4b47      	ldr	r3, [pc, #284]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b0bc:	7c5b      	ldrb	r3, [r3, #17]
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	4a45      	ldr	r2, [pc, #276]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b0c2:	7c12      	ldrb	r2, [r2, #16]
 800b0c4:	4313      	orrs	r3, r2
 800b0c6:	461a      	mov	r2, r3
 800b0c8:	4b41      	ldr	r3, [pc, #260]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0ca:	615a      	str	r2, [r3, #20]
	TD1.battery_temp=BMS_Avg_temp;
 800b0cc:	4b43      	ldr	r3, [pc, #268]	; (800b1dc <Process_4G_Event_Data+0x190>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	4b3f      	ldr	r3, [pc, #252]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0d4:	61da      	str	r2, [r3, #28]
	TD1.odometer = CalOdometer();//52;//will get from cluster
 800b0d6:	f000 f985 	bl	800b3e4 <CalOdometer>
 800b0da:	4602      	mov	r2, r0
 800b0dc:	4b3c      	ldr	r3, [pc, #240]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0de:	629a      	str	r2, [r3, #40]	; 0x28
	TD1.charging_indicator = Vcu_InPuts.charger_connect_IN;
 800b0e0:	4b3f      	ldr	r3, [pc, #252]	; (800b1e0 <Process_4G_Event_Data+0x194>)
 800b0e2:	789b      	ldrb	r3, [r3, #2]
 800b0e4:	461a      	mov	r2, r3
 800b0e6:	4b3a      	ldr	r3, [pc, #232]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0e8:	639a      	str	r2, [r3, #56]	; 0x38
	TD1.dte = ((TD1.soc)*2);
 800b0ea:	4b39      	ldr	r3, [pc, #228]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	005b      	lsls	r3, r3, #1
 800b0f0:	4a37      	ldr	r2, [pc, #220]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0f2:	63d3      	str	r3, [r2, #60]	; 0x3c
	TD1.mcu_temp_1=Mcu_Temp_Irp;
 800b0f4:	4b3b      	ldr	r3, [pc, #236]	; (800b1e4 <Process_4G_Event_Data+0x198>)
 800b0f6:	881b      	ldrh	r3, [r3, #0]
 800b0f8:	461a      	mov	r2, r3
 800b0fa:	4b35      	ldr	r3, [pc, #212]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b0fc:	621a      	str	r2, [r3, #32]
	TD1.ac_status = AC_ON_4g;//CAN_MSG_DB_HVAC[CAN_0x100].CAN_Data[2];
 800b0fe:	4b3a      	ldr	r3, [pc, #232]	; (800b1e8 <Process_4G_Event_Data+0x19c>)
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	461a      	mov	r2, r3
 800b104:	4b32      	ldr	r3, [pc, #200]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b106:	641a      	str	r2, [r3, #64]	; 0x40
	TD1.min_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b108:	4b33      	ldr	r3, [pc, #204]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b10a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b10e:	021b      	lsls	r3, r3, #8
 800b110:	4a31      	ldr	r2, [pc, #196]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b112:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b116:	4313      	orrs	r3, r2
 800b118:	461a      	mov	r2, r3
 800b11a:	4b2d      	ldr	r3, [pc, #180]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b11c:	645a      	str	r2, [r3, #68]	; 0x44
	TD1.max_cell_temp = ((int)((CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180CA7F3].CAN_Data[2]));
 800b11e:	4b2e      	ldr	r3, [pc, #184]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b120:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800b124:	021b      	lsls	r3, r3, #8
 800b126:	4a2c      	ldr	r2, [pc, #176]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b128:	f892 205a 	ldrb.w	r2, [r2, #90]	; 0x5a
 800b12c:	4313      	orrs	r3, r2
 800b12e:	461a      	mov	r2, r3
 800b130:	4b27      	ldr	r3, [pc, #156]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b132:	649a      	str	r2, [r3, #72]	; 0x48
	TD1.min_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[2]));
 800b134:	4b28      	ldr	r3, [pc, #160]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b136:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800b13a:	021b      	lsls	r3, r3, #8
 800b13c:	4a26      	ldr	r2, [pc, #152]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b13e:	f892 2066 	ldrb.w	r2, [r2, #102]	; 0x66
 800b142:	4313      	orrs	r3, r2
 800b144:	461a      	mov	r2, r3
 800b146:	4b22      	ldr	r3, [pc, #136]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b148:	64da      	str	r2, [r3, #76]	; 0x4c
	TD1.max_cell_voltage = ((int)((CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X1808A7F3].CAN_Data[0]));
 800b14a:	4b23      	ldr	r3, [pc, #140]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b14c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 800b150:	021b      	lsls	r3, r3, #8
 800b152:	4a21      	ldr	r2, [pc, #132]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b154:	f892 2064 	ldrb.w	r2, [r2, #100]	; 0x64
 800b158:	4313      	orrs	r3, r2
 800b15a:	461a      	mov	r2, r3
 800b15c:	4b1c      	ldr	r3, [pc, #112]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b15e:	651a      	str	r2, [r3, #80]	; 0x50
	TD1.pack_voltage = ((int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[7] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[6]));
 800b160:	4b1d      	ldr	r3, [pc, #116]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b162:	7ddb      	ldrb	r3, [r3, #23]
 800b164:	021b      	lsls	r3, r3, #8
 800b166:	4a1c      	ldr	r2, [pc, #112]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b168:	7d92      	ldrb	r2, [r2, #22]
 800b16a:	4313      	orrs	r3, r2
 800b16c:	461a      	mov	r2, r3
 800b16e:	4b18      	ldr	r3, [pc, #96]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b170:	631a      	str	r2, [r3, #48]	; 0x30
	TD1.pack_current = PackCurrent;//((int)((CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[1] << 8) | CAN_BMS_29bit[CAN_0X180EA7F3].CAN_Data[0]));
 800b172:	4b1e      	ldr	r3, [pc, #120]	; (800b1ec <Process_4G_Event_Data+0x1a0>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a16      	ldr	r2, [pc, #88]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b178:	6353      	str	r3, [r2, #52]	; 0x34
	TD1.longitude = GPS_data_val.longitude;
 800b17a:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <Process_4G_Event_Data+0x1a4>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a14      	ldr	r2, [pc, #80]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b180:	6113      	str	r3, [r2, #16]
	TD1.latitude = GPS_data_val.latitude ;
 800b182:	4b1b      	ldr	r3, [pc, #108]	; (800b1f0 <Process_4G_Event_Data+0x1a4>)
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	4a12      	ldr	r2, [pc, #72]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b188:	60d3      	str	r3, [r2, #12]
	TD1.altitude = GPS_data_val.altitude ;
 800b18a:	4b19      	ldr	r3, [pc, #100]	; (800b1f0 <Process_4G_Event_Data+0x1a4>)
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	461a      	mov	r2, r3
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b192:	655a      	str	r2, [r3, #84]	; 0x54
	TD1.direction = GPS_data_val.direction;
 800b194:	4b16      	ldr	r3, [pc, #88]	; (800b1f0 <Process_4G_Event_Data+0x1a4>)
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	461a      	mov	r2, r3
 800b19a:	4b0d      	ldr	r3, [pc, #52]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b19c:	659a      	str	r2, [r3, #88]	; 0x58
	TD1.speed = speed_4g;
 800b19e:	4b15      	ldr	r3, [pc, #84]	; (800b1f4 <Process_4G_Event_Data+0x1a8>)
 800b1a0:	881b      	ldrh	r3, [r3, #0]
 800b1a2:	461a      	mov	r2, r3
 800b1a4:	4b0a      	ldr	r3, [pc, #40]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b1a6:	625a      	str	r2, [r3, #36]	; 0x24
	TD1.soh = (int)((CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[3] << 8) | CAN_BMS_29bit[CAN_0X180FA7F3].CAN_Data[2]);
 800b1a8:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b1aa:	7cdb      	ldrb	r3, [r3, #19]
 800b1ac:	021b      	lsls	r3, r3, #8
 800b1ae:	4a0a      	ldr	r2, [pc, #40]	; (800b1d8 <Process_4G_Event_Data+0x18c>)
 800b1b0:	7c92      	ldrb	r2, [r2, #18]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	461a      	mov	r2, r3
 800b1b6:	4b06      	ldr	r3, [pc, #24]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b1b8:	65da      	str	r2, [r3, #92]	; 0x5c
    TD1.timestamp = epoch;
 800b1ba:	4b0f      	ldr	r3, [pc, #60]	; (800b1f8 <Process_4G_Event_Data+0x1ac>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a04      	ldr	r2, [pc, #16]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b1c0:	6093      	str	r3, [r2, #8]
    TD1.ambient_temp=  ambient_temp;
 800b1c2:	4b0e      	ldr	r3, [pc, #56]	; (800b1fc <Process_4G_Event_Data+0x1b0>)
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	4b01      	ldr	r3, [pc, #4]	; (800b1d0 <Process_4G_Event_Data+0x184>)
 800b1ca:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800b1cc:	bd80      	pop	{r7, pc}
 800b1ce:	bf00      	nop
 800b1d0:	1fff5238 	.word	0x1fff5238
 800b1d4:	1fff4804 	.word	0x1fff4804
 800b1d8:	1ffe9254 	.word	0x1ffe9254
 800b1dc:	1fff48c8 	.word	0x1fff48c8
 800b1e0:	1fff5108 	.word	0x1fff5108
 800b1e4:	1fff4826 	.word	0x1fff4826
 800b1e8:	1fff4814 	.word	0x1fff4814
 800b1ec:	1fff481c 	.word	0x1fff481c
 800b1f0:	1fff4894 	.word	0x1fff4894
 800b1f4:	1fff4830 	.word	0x1fff4830
 800b1f8:	1fff47f0 	.word	0x1fff47f0
 800b1fc:	1fff48d6 	.word	0x1fff48d6

0800b200 <set_RTC>:
	//pb_ostream_t stream1;

	//stream1 =  pb_ostream_from_buffer(Eventbuffer_4Gcomm,sizeof(Eventbuffer_4Gcomm));
	//pb_encode(&stream1,vcu_fleet_fleet_10_sec_fields, &TD1);
void set_RTC(void)
{
 800b200:	b580      	push	{r7, lr}
 800b202:	b08a      	sub	sp, #40	; 0x28
 800b204:	af00      	add	r7, sp, #0
	uint8_t Timebuf[35]={0};
 800b206:	1d3b      	adds	r3, r7, #4
 800b208:	2200      	movs	r2, #0
 800b20a:	601a      	str	r2, [r3, #0]
 800b20c:	3304      	adds	r3, #4
 800b20e:	2200      	movs	r2, #0
 800b210:	601a      	str	r2, [r3, #0]
 800b212:	3304      	adds	r3, #4
 800b214:	2200      	movs	r2, #0
 800b216:	601a      	str	r2, [r3, #0]
 800b218:	3304      	adds	r3, #4
 800b21a:	2200      	movs	r2, #0
 800b21c:	601a      	str	r2, [r3, #0]
 800b21e:	3304      	adds	r3, #4
 800b220:	2200      	movs	r2, #0
 800b222:	601a      	str	r2, [r3, #0]
 800b224:	3304      	adds	r3, #4
 800b226:	2200      	movs	r2, #0
 800b228:	601a      	str	r2, [r3, #0]
 800b22a:	3304      	adds	r3, #4
 800b22c:	2200      	movs	r2, #0
 800b22e:	601a      	str	r2, [r3, #0]
 800b230:	3304      	adds	r3, #4
 800b232:	2200      	movs	r2, #0
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	3304      	adds	r3, #4
 800b238:	2200      	movs	r2, #0
 800b23a:	801a      	strh	r2, [r3, #0]
 800b23c:	3302      	adds	r3, #2
 800b23e:	2200      	movs	r2, #0
 800b240:	701a      	strb	r2, [r3, #0]
 800b242:	3301      	adds	r3, #1
	mod_getCurrentTime(Timebuf);
 800b244:	1d3b      	adds	r3, r7, #4
 800b246:	4618      	mov	r0, r3
 800b248:	f002 fa32 	bl	800d6b0 <mod_getCurrentTime>
	timeval.year = (((Timebuf[0]-'0')*10)+(Timebuf[1]-'0'));
 800b24c:	793b      	ldrb	r3, [r7, #4]
 800b24e:	3b30      	subs	r3, #48	; 0x30
 800b250:	b29b      	uxth	r3, r3
 800b252:	461a      	mov	r2, r3
 800b254:	0092      	lsls	r2, r2, #2
 800b256:	4413      	add	r3, r2
 800b258:	005b      	lsls	r3, r3, #1
 800b25a:	b29a      	uxth	r2, r3
 800b25c:	797b      	ldrb	r3, [r7, #5]
 800b25e:	b29b      	uxth	r3, r3
 800b260:	4413      	add	r3, r2
 800b262:	b29b      	uxth	r3, r3
 800b264:	3b30      	subs	r3, #48	; 0x30
 800b266:	b29a      	uxth	r2, r3
 800b268:	4b3b      	ldr	r3, [pc, #236]	; (800b358 <set_RTC+0x158>)
 800b26a:	80da      	strh	r2, [r3, #6]
	timeval.month = (((Timebuf[3]-'0')*10)+(Timebuf[4]-'0'));
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	3b30      	subs	r3, #48	; 0x30
 800b270:	b2db      	uxtb	r3, r3
 800b272:	461a      	mov	r2, r3
 800b274:	0092      	lsls	r2, r2, #2
 800b276:	4413      	add	r3, r2
 800b278:	005b      	lsls	r3, r3, #1
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	7a3b      	ldrb	r3, [r7, #8]
 800b27e:	4413      	add	r3, r2
 800b280:	b2db      	uxtb	r3, r3
 800b282:	3b30      	subs	r3, #48	; 0x30
 800b284:	b2db      	uxtb	r3, r3
 800b286:	f003 030f 	and.w	r3, r3, #15
 800b28a:	b2d9      	uxtb	r1, r3
 800b28c:	4a32      	ldr	r2, [pc, #200]	; (800b358 <set_RTC+0x158>)
 800b28e:	7953      	ldrb	r3, [r2, #5]
 800b290:	f361 0303 	bfi	r3, r1, #0, #4
 800b294:	7153      	strb	r3, [r2, #5]
	timeval.days = (((Timebuf[6]-'0')*10)+(Timebuf[7]-'0'));
 800b296:	7abb      	ldrb	r3, [r7, #10]
 800b298:	3b30      	subs	r3, #48	; 0x30
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	461a      	mov	r2, r3
 800b29e:	0092      	lsls	r2, r2, #2
 800b2a0:	4413      	add	r3, r2
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	7afb      	ldrb	r3, [r7, #11]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	3b30      	subs	r3, #48	; 0x30
 800b2ae:	b2db      	uxtb	r3, r3
 800b2b0:	f003 031f 	and.w	r3, r3, #31
 800b2b4:	b2d9      	uxtb	r1, r3
 800b2b6:	4a28      	ldr	r2, [pc, #160]	; (800b358 <set_RTC+0x158>)
 800b2b8:	78d3      	ldrb	r3, [r2, #3]
 800b2ba:	f361 0304 	bfi	r3, r1, #0, #5
 800b2be:	70d3      	strb	r3, [r2, #3]
	timeval.hours = (((Timebuf[9]-'0')*10)+(Timebuf[10]-'0'));
 800b2c0:	7b7b      	ldrb	r3, [r7, #13]
 800b2c2:	3b30      	subs	r3, #48	; 0x30
 800b2c4:	b2db      	uxtb	r3, r3
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	0092      	lsls	r2, r2, #2
 800b2ca:	4413      	add	r3, r2
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	b2da      	uxtb	r2, r3
 800b2d0:	7bbb      	ldrb	r3, [r7, #14]
 800b2d2:	4413      	add	r3, r2
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	3b30      	subs	r3, #48	; 0x30
 800b2d8:	b2db      	uxtb	r3, r3
 800b2da:	f003 031f 	and.w	r3, r3, #31
 800b2de:	b2d9      	uxtb	r1, r3
 800b2e0:	4a1d      	ldr	r2, [pc, #116]	; (800b358 <set_RTC+0x158>)
 800b2e2:	7893      	ldrb	r3, [r2, #2]
 800b2e4:	f361 0304 	bfi	r3, r1, #0, #5
 800b2e8:	7093      	strb	r3, [r2, #2]
	timeval.minutes = (((Timebuf[12]-'0')*10)+(Timebuf[13]-'0'));
 800b2ea:	7c3b      	ldrb	r3, [r7, #16]
 800b2ec:	3b30      	subs	r3, #48	; 0x30
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	461a      	mov	r2, r3
 800b2f2:	0092      	lsls	r2, r2, #2
 800b2f4:	4413      	add	r3, r2
 800b2f6:	005b      	lsls	r3, r3, #1
 800b2f8:	b2da      	uxtb	r2, r3
 800b2fa:	7c7b      	ldrb	r3, [r7, #17]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	b2db      	uxtb	r3, r3
 800b300:	3b30      	subs	r3, #48	; 0x30
 800b302:	b2db      	uxtb	r3, r3
 800b304:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b308:	b2d9      	uxtb	r1, r3
 800b30a:	4a13      	ldr	r2, [pc, #76]	; (800b358 <set_RTC+0x158>)
 800b30c:	7853      	ldrb	r3, [r2, #1]
 800b30e:	f361 0305 	bfi	r3, r1, #0, #6
 800b312:	7053      	strb	r3, [r2, #1]
	timeval.seconds = (((Timebuf[15]-'0')*10)+(Timebuf[16]-'0'));
 800b314:	7cfb      	ldrb	r3, [r7, #19]
 800b316:	3b30      	subs	r3, #48	; 0x30
 800b318:	b2db      	uxtb	r3, r3
 800b31a:	461a      	mov	r2, r3
 800b31c:	0092      	lsls	r2, r2, #2
 800b31e:	4413      	add	r3, r2
 800b320:	005b      	lsls	r3, r3, #1
 800b322:	b2da      	uxtb	r2, r3
 800b324:	7d3b      	ldrb	r3, [r7, #20]
 800b326:	4413      	add	r3, r2
 800b328:	b2db      	uxtb	r3, r3
 800b32a:	3b30      	subs	r3, #48	; 0x30
 800b32c:	b2db      	uxtb	r3, r3
 800b32e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b332:	b2d9      	uxtb	r1, r3
 800b334:	4a08      	ldr	r2, [pc, #32]	; (800b358 <set_RTC+0x158>)
 800b336:	7813      	ldrb	r3, [r2, #0]
 800b338:	f361 0305 	bfi	r3, r1, #0, #6
 800b33c:	7013      	strb	r3, [r2, #0]
	RTC_Day = timeval.days;
 800b33e:	4b06      	ldr	r3, [pc, #24]	; (800b358 <set_RTC+0x158>)
 800b340:	78db      	ldrb	r3, [r3, #3]
 800b342:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b346:	b2db      	uxtb	r3, r3
 800b348:	461a      	mov	r2, r3
 800b34a:	4b04      	ldr	r3, [pc, #16]	; (800b35c <set_RTC+0x15c>)
 800b34c:	701a      	strb	r2, [r3, #0]
	RTC_init();
 800b34e:	f7f5 f895 	bl	800047c <RTC_init>
}
 800b352:	3728      	adds	r7, #40	; 0x28
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}
 800b358:	1fff47ac 	.word	0x1fff47ac
 800b35c:	1fff44a4 	.word	0x1fff44a4

0800b360 <epoch_time>:

void epoch_time(void)
{	struct tm my_tm;
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	; 0x28
 800b364:	af00      	add	r7, sp, #0
	memset(&my_tm, 0, sizeof(my_tm));
 800b366:	1d3b      	adds	r3, r7, #4
 800b368:	4618      	mov	r0, r3
 800b36a:	2100      	movs	r1, #0
 800b36c:	2224      	movs	r2, #36	; 0x24
 800b36e:	f006 f9f0 	bl	8011752 <memset>
	RTC_GetTime(&current_time);
 800b372:	481a      	ldr	r0, [pc, #104]	; (800b3dc <epoch_time+0x7c>)
 800b374:	f7fc fa2c 	bl	80077d0 <RTC_GetTime>
	my_tm.tm_year =(2000 + current_time.year)-1900;
 800b378:	4b18      	ldr	r3, [pc, #96]	; (800b3dc <epoch_time+0x7c>)
 800b37a:	88db      	ldrh	r3, [r3, #6]
 800b37c:	3364      	adds	r3, #100	; 0x64
 800b37e:	61bb      	str	r3, [r7, #24]
	my_tm.tm_mon = current_time.month;
 800b380:	4b16      	ldr	r3, [pc, #88]	; (800b3dc <epoch_time+0x7c>)
 800b382:	795b      	ldrb	r3, [r3, #5]
 800b384:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	617b      	str	r3, [r7, #20]
	my_tm.tm_mday = current_time.days;
 800b38c:	4b13      	ldr	r3, [pc, #76]	; (800b3dc <epoch_time+0x7c>)
 800b38e:	78db      	ldrb	r3, [r3, #3]
 800b390:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b394:	b2db      	uxtb	r3, r3
 800b396:	613b      	str	r3, [r7, #16]
	my_tm.tm_hour = current_time.hours;
 800b398:	4b10      	ldr	r3, [pc, #64]	; (800b3dc <epoch_time+0x7c>)
 800b39a:	789b      	ldrb	r3, [r3, #2]
 800b39c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 800b3a0:	b2db      	uxtb	r3, r3
 800b3a2:	60fb      	str	r3, [r7, #12]
	my_tm.tm_min = current_time.minutes;
 800b3a4:	4b0d      	ldr	r3, [pc, #52]	; (800b3dc <epoch_time+0x7c>)
 800b3a6:	785b      	ldrb	r3, [r3, #1]
 800b3a8:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3ac:	b2db      	uxtb	r3, r3
 800b3ae:	60bb      	str	r3, [r7, #8]
	my_tm.tm_sec = current_time.seconds;
 800b3b0:	4b0a      	ldr	r3, [pc, #40]	; (800b3dc <epoch_time+0x7c>)
 800b3b2:	781b      	ldrb	r3, [r3, #0]
 800b3b4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800b3b8:	b2db      	uxtb	r3, r3
 800b3ba:	607b      	str	r3, [r7, #4]
	my_tm.tm_isdst = -1;
 800b3bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b3c0:	627b      	str	r3, [r7, #36]	; 0x24
	my_tm.tm_mon -= 1;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	3b01      	subs	r3, #1
 800b3c6:	617b      	str	r3, [r7, #20]

	epoch = mktime(&my_tm);
 800b3c8:	1d3b      	adds	r3, r7, #4
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f006 faa0 	bl	8011910 <mktime>
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	4b03      	ldr	r3, [pc, #12]	; (800b3e0 <epoch_time+0x80>)
 800b3d4:	601a      	str	r2, [r3, #0]
}
 800b3d6:	3728      	adds	r7, #40	; 0x28
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}
 800b3dc:	1fff47f4 	.word	0x1fff47f4
 800b3e0:	1fff47f0 	.word	0x1fff47f0

0800b3e4 <CalOdometer>:

uint32_t CalOdometer()//For testing only
	{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
		float pi = 3.14;
 800b3ea:	4b18      	ldr	r3, [pc, #96]	; (800b44c <CalOdometer+0x68>)
 800b3ec:	617b      	str	r3, [r7, #20]
		float rad = 0.279;
 800b3ee:	4b18      	ldr	r3, [pc, #96]	; (800b450 <CalOdometer+0x6c>)
 800b3f0:	613b      	str	r3, [r7, #16]
		float GRatio = 0.10084; //  1/9.916;
 800b3f2:	4b18      	ldr	r3, [pc, #96]	; (800b454 <CalOdometer+0x70>)
 800b3f4:	60fb      	str	r3, [r7, #12]
		float mintosec = 0.0166;
 800b3f6:	4b18      	ldr	r3, [pc, #96]	; (800b458 <CalOdometer+0x74>)
 800b3f8:	60bb      	str	r3, [r7, #8]
		uint16_t DistanceM = 1;
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	80fb      	strh	r3, [r7, #6]

		uint16_t timeDiff = epoch - starttime;
 800b3fe:	4b17      	ldr	r3, [pc, #92]	; (800b45c <CalOdometer+0x78>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	b29a      	uxth	r2, r3
 800b404:	4b16      	ldr	r3, [pc, #88]	; (800b460 <CalOdometer+0x7c>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	b29b      	uxth	r3, r3
 800b40a:	1ad3      	subs	r3, r2, r3
 800b40c:	80bb      	strh	r3, [r7, #4]
		uint8_t rotations = 3;
 800b40e:	2303      	movs	r3, #3
 800b410:	70fb      	strb	r3, [r7, #3]

		//Distance = (2 * pi * rad * rotations);
		//Distance += (2 * pi * rad * N/(rpm) * GRatio * mintosec * TimeSec);
		DistanceM = (vspeed * (timeDiff/3600));// KM/hr
 800b412:	88bb      	ldrh	r3, [r7, #4]
 800b414:	4a13      	ldr	r2, [pc, #76]	; (800b464 <CalOdometer+0x80>)
 800b416:	fba2 2303 	umull	r2, r3, r2, r3
 800b41a:	0adb      	lsrs	r3, r3, #11
 800b41c:	b29a      	uxth	r2, r3
 800b41e:	4b12      	ldr	r3, [pc, #72]	; (800b468 <CalOdometer+0x84>)
 800b420:	881b      	ldrh	r3, [r3, #0]
 800b422:	fb12 f303 	smulbb	r3, r2, r3
 800b426:	80fb      	strh	r3, [r7, #6]
		Distance += (DistanceM/8);//3600
 800b428:	88fb      	ldrh	r3, [r7, #6]
 800b42a:	08db      	lsrs	r3, r3, #3
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	4b0f      	ldr	r3, [pc, #60]	; (800b46c <CalOdometer+0x88>)
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	4413      	add	r3, r2
 800b434:	b29a      	uxth	r2, r3
 800b436:	4b0d      	ldr	r3, [pc, #52]	; (800b46c <CalOdometer+0x88>)
 800b438:	801a      	strh	r2, [r3, #0]

		return Distance;
 800b43a:	4b0c      	ldr	r3, [pc, #48]	; (800b46c <CalOdometer+0x88>)
 800b43c:	881b      	ldrh	r3, [r3, #0]
	}
 800b43e:	4618      	mov	r0, r3
 800b440:	371c      	adds	r7, #28
 800b442:	46bd      	mov	sp, r7
 800b444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b448:	4770      	bx	lr
 800b44a:	bf00      	nop
 800b44c:	4048f5c3 	.word	0x4048f5c3
 800b450:	3e8ed917 	.word	0x3e8ed917
 800b454:	3dce8534 	.word	0x3dce8534
 800b458:	3c87fcb9 	.word	0x3c87fcb9
 800b45c:	1fff47f0 	.word	0x1fff47f0
 800b460:	1fff44a0 	.word	0x1fff44a0
 800b464:	91a2b3c5 	.word	0x91a2b3c5
 800b468:	1fff522e 	.word	0x1fff522e
 800b46c:	1ffe94e0 	.word	0x1ffe94e0

0800b470 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	460b      	mov	r3, r1
 800b47a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b47c:	78fb      	ldrb	r3, [r7, #3]
 800b47e:	2201      	movs	r2, #1
 800b480:	409a      	lsls	r2, r3
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	605a      	str	r2, [r3, #4]
}
 800b486:	370c      	adds	r7, #12
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <XMC_GPIO_GetInput>:
 * Prior to this api, user has to configure port pin to input mode using XMC_GPIO_SetMode().
 *
 */

__STATIC_INLINE uint32_t XMC_GPIO_GetInput(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_GetInput: Invalid port", XMC_GPIO_CHECK_PORT(port));

  return (((port->IN) >> pin) & 0x1U);
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b4a0:	78fb      	ldrb	r3, [r7, #3]
 800b4a2:	fa22 f303 	lsr.w	r3, r2, r3
 800b4a6:	f003 0301 	and.w	r3, r3, #1
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	370c      	adds	r7, #12
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop

0800b4b8 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	7c1b      	ldrb	r3, [r3, #16]
 800b4c8:	4610      	mov	r0, r2
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	f7ff ffd0 	bl	800b470 <XMC_GPIO_SetOutputHigh>
}
 800b4d0:	3708      	adds	r7, #8
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop

0800b4d8 <DIGITAL_IO_GetInput>:
* }
*  @endcode
*/

__STATIC_INLINE uint32_t DIGITAL_IO_GetInput(const DIGITAL_IO_t *const handler)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_GetInput: handler null pointer", handler != NULL);
  return XMC_GPIO_GetInput(handler->gpio_port, handler->gpio_pin);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	7c1b      	ldrb	r3, [r3, #16]
 800b4e8:	4610      	mov	r0, r2
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	f7ff ffd0 	bl	800b490 <XMC_GPIO_GetInput>
 800b4f0:	4603      	mov	r3, r0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3708      	adds	r7, #8
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}
 800b4fa:	bf00      	nop

0800b4fc <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b082      	sub	sp, #8
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f9 fa09 	bl	8004920 <XMC_UART_CH_GetReceivedData>
 800b50e:	4603      	mov	r3, r0
 800b510:	b2db      	uxtb	r3, r3
}
 800b512:	4618      	mov	r0, r3
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop

0800b51c <clear_readbuff>:
#include "Vcu_Config.h"

uint32_t getout;

void clear_readbuff(char string[])
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 65; i++)
 800b524:	2300      	movs	r3, #0
 800b526:	60fb      	str	r3, [r7, #12]
 800b528:	e007      	b.n	800b53a <clear_readbuff+0x1e>
		string[i] = '\0';
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	687a      	ldr	r2, [r7, #4]
 800b52e:	4413      	add	r3, r2
 800b530:	2200      	movs	r2, #0
 800b532:	701a      	strb	r2, [r3, #0]

uint32_t getout;

void clear_readbuff(char string[])
{
	for(int i = 0; i < 65; i++)
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3301      	adds	r3, #1
 800b538:	60fb      	str	r3, [r7, #12]
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	ddf4      	ble.n	800b52a <clear_readbuff+0xe>
		string[i] = '\0';
}
 800b540:	3714      	adds	r7, #20
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr
 800b54a:	bf00      	nop

0800b54c <data_tx4g>:

void data_tx4g(char tx_cmd[])//uint8_t
{
 800b54c:	b580      	push	{r7, lr}
 800b54e:	b082      	sub	sp, #8
 800b550:	af00      	add	r7, sp, #0
 800b552:	6078      	str	r0, [r7, #4]
	UART_Transmit(&UART_0, (uint8_t*)tx_cmd, (uint32_t)strlen(tx_cmd));
 800b554:	6878      	ldr	r0, [r7, #4]
 800b556:	f006 fc04 	bl	8011d62 <strlen>
 800b55a:	4603      	mov	r3, r0
 800b55c:	4803      	ldr	r0, [pc, #12]	; (800b56c <data_tx4g+0x20>)
 800b55e:	6879      	ldr	r1, [r7, #4]
 800b560:	461a      	mov	r2, r3
 800b562:	f7fa fb81 	bl	8005c68 <UART_Transmit>

	//Delay(5);
}
 800b566:	3708      	adds	r7, #8
 800b568:	46bd      	mov	sp, r7
 800b56a:	bd80      	pop	{r7, pc}
 800b56c:	1ffe8844 	.word	0x1ffe8844

0800b570 <Get_CurrentLocation>:
	data_rx4g();
	data_tx4g(SendGPSData21);
	data_rx4g();
}

void Get_CurrentLocation() {
 800b570:	b590      	push	{r4, r7, lr}
 800b572:	b0f3      	sub	sp, #460	; 0x1cc
 800b574:	af00      	add	r7, sp, #0
    DIGITAL_IO_SetOutputHigh(&RTS);
 800b576:	4880      	ldr	r0, [pc, #512]	; (800b778 <Get_CurrentLocation+0x208>)
 800b578:	f7ff ff9e 	bl	800b4b8 <DIGITAL_IO_SetOutputHigh>
    //delay(5000);
    bool cts_in = DIGITAL_IO_GetInput(&CTS);
 800b57c:	487f      	ldr	r0, [pc, #508]	; (800b77c <Get_CurrentLocation+0x20c>)
 800b57e:	f7ff ffab 	bl	800b4d8 <DIGITAL_IO_GetInput>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	bf14      	ite	ne
 800b588:	2301      	movne	r3, #1
 800b58a:	2300      	moveq	r3, #0
 800b58c:	f887 31bb 	strb.w	r3, [r7, #443]	; 0x1bb
    char SendGPSData5[] = "AT+QGPSLOC=1\r\n";
 800b590:	4b7b      	ldr	r3, [pc, #492]	; (800b780 <Get_CurrentLocation+0x210>)
 800b592:	f507 74d2 	add.w	r4, r7, #420	; 0x1a4
 800b596:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800b598:	c407      	stmia	r4!, {r0, r1, r2}
 800b59a:	8023      	strh	r3, [r4, #0]
 800b59c:	3402      	adds	r4, #2
 800b59e:	0c1b      	lsrs	r3, r3, #16
 800b5a0:	7023      	strb	r3, [r4, #0]
    //SuperLooptime_Start();
    data_tx4g(SendGPSData5);
 800b5a2:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	f7ff ffd0 	bl	800b54c <data_tx4g>
    //SuperLooptime_End();

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
 800b5ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5b0:	2200      	movs	r2, #0
 800b5b2:	701a      	strb	r2, [r3, #0]
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b5ba:	e00d      	b.n	800b5d8 <Get_CurrentLocation+0x68>
        strcat(receivedData, data_rx4gps());
 800b5bc:	f000 f8ec 	bl	800b798 <data_rx4gps>
 800b5c0:	4602      	mov	r2, r0
 800b5c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	4611      	mov	r1, r2
 800b5ca:	f006 fba5 	bl	8011d18 <strcat>

    // Read GPS data four times and concatenate
    char receivedData[MAX_DATA_CHUNK_SIZE * 12 + 1];  // Increased buffer size for four readings
    receivedData[0] = '\0'; // Ensure string is empty initially
    //SuperLooptime_Start();
    for (int i = 0; i < 4; ++i) {
 800b5ce:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b5d2:	3301      	adds	r3, #1
 800b5d4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800b5d8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800b5dc:	2b03      	cmp	r3, #3
 800b5de:	dded      	ble.n	800b5bc <Get_CurrentLocation+0x4c>
        strcat(receivedData, data_rx4gps());
    }
    //SuperLooptime_End();
    char* startToken = strstr(receivedData, "+QGPSLOC:");
 800b5e0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	4967      	ldr	r1, [pc, #412]	; (800b784 <Get_CurrentLocation+0x214>)
 800b5e8:	f006 fbd5 	bl	8011d96 <strstr>
 800b5ec:	f8c7 01b4 	str.w	r0, [r7, #436]	; 0x1b4
    if (startToken != NULL) {
 800b5f0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	f000 80b2 	beq.w	800b75e <Get_CurrentLocation+0x1ee>
        char *token;
        token = strtok(startToken, ",");
 800b5fa:	f8d7 01b4 	ldr.w	r0, [r7, #436]	; 0x1b4
 800b5fe:	4962      	ldr	r1, [pc, #392]	; (800b788 <Get_CurrentLocation+0x218>)
 800b600:	f006 fbe2 	bl	8011dc8 <strtok>
 800b604:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
        int field_count = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b60e:	e0a1      	b.n	800b754 <Get_CurrentLocation+0x1e4>
            if (field_count == 1) { // Latitude
 800b610:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b614:	2b01      	cmp	r3, #1
 800b616:	d124      	bne.n	800b662 <Get_CurrentLocation+0xf2>
                strncpy(latitude, token, 10);
 800b618:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b61c:	4618      	mov	r0, r3
 800b61e:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b622:	220a      	movs	r2, #10
 800b624:	f006 fba5 	bl	8011d72 <strncpy>
                latitude[10] = '\0';
 800b628:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b62c:	2200      	movs	r2, #0
 800b62e:	729a      	strb	r2, [r3, #10]
                GPS_data_val.latitude = ((atoi(latitude))*100000);
 800b630:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b634:	4618      	mov	r0, r3
 800b636:	f006 f851 	bl	80116dc <atoi>
 800b63a:	4602      	mov	r2, r0
 800b63c:	4b53      	ldr	r3, [pc, #332]	; (800b78c <Get_CurrentLocation+0x21c>)
 800b63e:	fb03 f302 	mul.w	r3, r3, r2
 800b642:	461a      	mov	r2, r3
 800b644:	4b52      	ldr	r3, [pc, #328]	; (800b790 <Get_CurrentLocation+0x220>)
 800b646:	605a      	str	r2, [r3, #4]
                GPS_data_val.latitude += (atoi(latitude+5));
 800b648:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800b64c:	3305      	adds	r3, #5
 800b64e:	4618      	mov	r0, r3
 800b650:	f006 f844 	bl	80116dc <atoi>
 800b654:	4602      	mov	r2, r0
 800b656:	4b4e      	ldr	r3, [pc, #312]	; (800b790 <Get_CurrentLocation+0x220>)
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	4413      	add	r3, r2
 800b65c:	4a4c      	ldr	r2, [pc, #304]	; (800b790 <Get_CurrentLocation+0x220>)
 800b65e:	6053      	str	r3, [r2, #4]
 800b660:	e06d      	b.n	800b73e <Get_CurrentLocation+0x1ce>
            } else if (field_count == 3) { // Longitude
 800b662:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b666:	2b03      	cmp	r3, #3
 800b668:	d124      	bne.n	800b6b4 <Get_CurrentLocation+0x144>
                strncpy(longitude, token, 11);
 800b66a:	f107 031c 	add.w	r3, r7, #28
 800b66e:	4618      	mov	r0, r3
 800b670:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b674:	220b      	movs	r2, #11
 800b676:	f006 fb7c 	bl	8011d72 <strncpy>
                longitude[11] = '\0';
 800b67a:	f107 031c 	add.w	r3, r7, #28
 800b67e:	2200      	movs	r2, #0
 800b680:	72da      	strb	r2, [r3, #11]
                GPS_data_val.longitude = ((atoi(longitude))*100000);
 800b682:	f107 031c 	add.w	r3, r7, #28
 800b686:	4618      	mov	r0, r3
 800b688:	f006 f828 	bl	80116dc <atoi>
 800b68c:	4602      	mov	r2, r0
 800b68e:	4b3f      	ldr	r3, [pc, #252]	; (800b78c <Get_CurrentLocation+0x21c>)
 800b690:	fb03 f302 	mul.w	r3, r3, r2
 800b694:	461a      	mov	r2, r3
 800b696:	4b3e      	ldr	r3, [pc, #248]	; (800b790 <Get_CurrentLocation+0x220>)
 800b698:	601a      	str	r2, [r3, #0]
                GPS_data_val.longitude += (atoi(longitude+6));
 800b69a:	f107 031c 	add.w	r3, r7, #28
 800b69e:	3306      	adds	r3, #6
 800b6a0:	4618      	mov	r0, r3
 800b6a2:	f006 f81b 	bl	80116dc <atoi>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	4b39      	ldr	r3, [pc, #228]	; (800b790 <Get_CurrentLocation+0x220>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	4a38      	ldr	r2, [pc, #224]	; (800b790 <Get_CurrentLocation+0x220>)
 800b6b0:	6013      	str	r3, [r2, #0]
 800b6b2:	e044      	b.n	800b73e <Get_CurrentLocation+0x1ce>
            } else if (field_count == 6) { // Altitude
 800b6b4:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b6b8:	2b06      	cmp	r3, #6
 800b6ba:	d125      	bne.n	800b708 <Get_CurrentLocation+0x198>
                strncpy(altitude, token, 5);
 800b6bc:	f107 030c 	add.w	r3, r7, #12
 800b6c0:	4618      	mov	r0, r3
 800b6c2:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b6c6:	2205      	movs	r2, #5
 800b6c8:	f006 fb53 	bl	8011d72 <strncpy>
                altitude[5] = '\0';
 800b6cc:	f107 030c 	add.w	r3, r7, #12
 800b6d0:	2200      	movs	r2, #0
 800b6d2:	715a      	strb	r2, [r3, #5]
                GPS_data_val.altitude =  ((atoi(altitude))*10);
 800b6d4:	f107 030c 	add.w	r3, r7, #12
 800b6d8:	4618      	mov	r0, r3
 800b6da:	f005 ffff 	bl	80116dc <atoi>
 800b6de:	4602      	mov	r2, r0
 800b6e0:	4613      	mov	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	4413      	add	r3, r2
 800b6e6:	005b      	lsls	r3, r3, #1
 800b6e8:	461a      	mov	r2, r3
 800b6ea:	4b29      	ldr	r3, [pc, #164]	; (800b790 <Get_CurrentLocation+0x220>)
 800b6ec:	609a      	str	r2, [r3, #8]
                GPS_data_val.altitude +=( atoi(altitude+4));
 800b6ee:	f107 030c 	add.w	r3, r7, #12
 800b6f2:	3304      	adds	r3, #4
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f005 fff1 	bl	80116dc <atoi>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	4b24      	ldr	r3, [pc, #144]	; (800b790 <Get_CurrentLocation+0x220>)
 800b6fe:	689b      	ldr	r3, [r3, #8]
 800b700:	4413      	add	r3, r2
 800b702:	4a23      	ldr	r2, [pc, #140]	; (800b790 <Get_CurrentLocation+0x220>)
 800b704:	6093      	str	r3, [r2, #8]
 800b706:	e01a      	b.n	800b73e <Get_CurrentLocation+0x1ce>
            } else if (field_count == 8) { // COG as direction
 800b708:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b70c:	2b08      	cmp	r3, #8
 800b70e:	d116      	bne.n	800b73e <Get_CurrentLocation+0x1ce>
                strncpy(direction, token, 6);
 800b710:	1d3b      	adds	r3, r7, #4
 800b712:	4618      	mov	r0, r3
 800b714:	f8d7 11c0 	ldr.w	r1, [r7, #448]	; 0x1c0
 800b718:	2206      	movs	r2, #6
 800b71a:	f006 fb2a 	bl	8011d72 <strncpy>
                direction[6] = '\0';
 800b71e:	1d3b      	adds	r3, r7, #4
 800b720:	2200      	movs	r2, #0
 800b722:	719a      	strb	r2, [r3, #6]
                GPS_data_val.direction = atoi(direction) * 10;
 800b724:	1d3b      	adds	r3, r7, #4
 800b726:	4618      	mov	r0, r3
 800b728:	f005 ffd8 	bl	80116dc <atoi>
 800b72c:	4602      	mov	r2, r0
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	005b      	lsls	r3, r3, #1
 800b736:	461a      	mov	r2, r3
 800b738:	4b15      	ldr	r3, [pc, #84]	; (800b790 <Get_CurrentLocation+0x220>)
 800b73a:	60da      	str	r2, [r3, #12]
                break; // Stop parsing after direction field
 800b73c:	e00f      	b.n	800b75e <Get_CurrentLocation+0x1ee>
            }
            field_count++;
 800b73e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 800b742:	3301      	adds	r3, #1
 800b744:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
            token = strtok(NULL, ",");
 800b748:	2000      	movs	r0, #0
 800b74a:	490f      	ldr	r1, [pc, #60]	; (800b788 <Get_CurrentLocation+0x218>)
 800b74c:	f006 fb3c 	bl	8011dc8 <strtok>
 800b750:	f8c7 01c0 	str.w	r0, [r7, #448]	; 0x1c0
    if (startToken != NULL) {
        char *token;
        token = strtok(startToken, ",");
        int field_count = 0;
        char latitude[12], longitude[13], hdop[5], altitude[6], direction[7];
        while (token != NULL) {
 800b754:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 800b758:	2b00      	cmp	r3, #0
 800b75a:	f47f af59 	bne.w	800b610 <Get_CurrentLocation+0xa0>
            token = strtok(NULL, ",");
        }
    }

    // Clear read buffer
    clear_readbuff(receivedData);
 800b75e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b762:	4618      	mov	r0, r3
 800b764:	f7ff feda 	bl	800b51c <clear_readbuff>

    getout = 0;
 800b768:	4b0a      	ldr	r3, [pc, #40]	; (800b794 <Get_CurrentLocation+0x224>)
 800b76a:	2200      	movs	r2, #0
 800b76c:	601a      	str	r2, [r3, #0]
}
 800b76e:	f507 77e6 	add.w	r7, r7, #460	; 0x1cc
 800b772:	46bd      	mov	sp, r7
 800b774:	bd90      	pop	{r4, r7, pc}
 800b776:	bf00      	nop
 800b778:	08013750 	.word	0x08013750
 800b77c:	0801373c 	.word	0x0801373c
 800b780:	08013d40 	.word	0x08013d40
 800b784:	08013d30 	.word	0x08013d30
 800b788:	08013d3c 	.word	0x08013d3c
 800b78c:	000186a0 	.word	0x000186a0
 800b790:	1fff4894 	.word	0x1fff4894
 800b794:	1fff529c 	.word	0x1fff529c

0800b798 <data_rx4gps>:


char* data_rx4gps() {
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);
 800b79e:	4817      	ldr	r0, [pc, #92]	; (800b7fc <data_rx4gps+0x64>)
 800b7a0:	f7ff febc 	bl	800b51c <clear_readbuff>

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	607b      	str	r3, [r7, #4]
 800b7a8:	e01c      	b.n	800b7e4 <data_rx4gps+0x4c>

        ReadData[i] = UART_GetReceivedWord(&UART_0);
 800b7aa:	4815      	ldr	r0, [pc, #84]	; (800b800 <data_rx4gps+0x68>)
 800b7ac:	f7ff fea6 	bl	800b4fc <UART_GetReceivedWord>
 800b7b0:	4603      	mov	r3, r0
 800b7b2:	4619      	mov	r1, r3
 800b7b4:	4a11      	ldr	r2, [pc, #68]	; (800b7fc <data_rx4gps+0x64>)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	4413      	add	r3, r2
 800b7ba:	460a      	mov	r2, r1
 800b7bc:	701a      	strb	r2, [r3, #0]
#if EN_SERIAL
        UART_Transmit(&UART_0, &ReadData[i], 1);
#endif


        if (i > 0 && ReadData[i] == '\n' && ReadData[i - 1] == '\n') {
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	dd0c      	ble.n	800b7de <data_rx4gps+0x46>
 800b7c4:	4a0d      	ldr	r2, [pc, #52]	; (800b7fc <data_rx4gps+0x64>)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	2b0a      	cmp	r3, #10
 800b7ce:	d106      	bne.n	800b7de <data_rx4gps+0x46>
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	4a09      	ldr	r2, [pc, #36]	; (800b7fc <data_rx4gps+0x64>)
 800b7d6:	5cd3      	ldrb	r3, [r2, r3]
 800b7d8:	2b0a      	cmp	r3, #10
 800b7da:	d100      	bne.n	800b7de <data_rx4gps+0x46>
            break;
 800b7dc:	e005      	b.n	800b7ea <data_rx4gps+0x52>

char* data_rx4gps() {
    static char ReadData[MAX_DATA_CHUNK_SIZE + 1] = {0};
    clear_readbuff(ReadData);

    for (int i = 0; i < MAX_DATA_CHUNK_SIZE; i++) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	3301      	adds	r3, #1
 800b7e2:	607b      	str	r3, [r7, #4]
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b1d      	cmp	r3, #29
 800b7e8:	dddf      	ble.n	800b7aa <data_rx4gps+0x12>
            break;
        }
    }


    Delay(5);
 800b7ea:	2005      	movs	r0, #5
 800b7ec:	f004 fbb8 	bl	800ff60 <Delay>

    return ReadData;
 800b7f0:	4b02      	ldr	r3, [pc, #8]	; (800b7fc <data_rx4gps+0x64>)
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}
 800b7fa:	bf00      	nop
 800b7fc:	1fff46a8 	.word	0x1fff46a8
 800b800:	1ffe8844 	.word	0x1ffe8844

0800b804 <XMC_USIC_CH_RXFIFO_IsEmpty>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_USIC_CH_RXFIFO_Flush(), XMC_USIC_CH_RXFIFO_PutData() \n\n\n
 */
__STATIC_INLINE bool XMC_USIC_CH_RXFIFO_IsEmpty(XMC_USIC_CH_t *const channel)
{
 800b804:	b480      	push	{r7}
 800b806:	b083      	sub	sp, #12
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
  return (bool)(channel->TRBSR & USIC_CH_TRBSR_REMPTY_Msk);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 800b812:	f003 0308 	and.w	r3, r3, #8
 800b816:	2b00      	cmp	r3, #0
 800b818:	bf14      	ite	ne
 800b81a:	2301      	movne	r3, #1
 800b81c:	2300      	moveq	r3, #0
 800b81e:	b2db      	uxtb	r3, r3
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <UART_GetReceivedWord>:
 *  }
 * @endcode
 *
 */
__STATIC_INLINE uint8_t UART_GetReceivedWord(const UART_t* const handle)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b082      	sub	sp, #8
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("UART APP handle invalid", (handle != NULL));
  return (uint8_t)XMC_UART_CH_GetReceivedData(handle->channel);
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	4618      	mov	r0, r3
 800b83a:	f7f9 f871 	bl	8004920 <XMC_UART_CH_GetReceivedData>
 800b83e:	4603      	mov	r3, r0
 800b840:	b2db      	uxtb	r3, r3
}
 800b842:	4618      	mov	r0, r3
 800b844:	3708      	adds	r7, #8
 800b846:	46bd      	mov	sp, r7
 800b848:	bd80      	pop	{r7, pc}
 800b84a:	bf00      	nop

0800b84c <at_initInterface>:
 *
 * Return values 	:	en_responseRetCodes_t - Return status
 *
 ****************************************************************************/
en_responseRetCodes_t at_initInterface(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
	DAVE_STATUS_t init_status;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800b852:	2304      	movs	r3, #4
 800b854:	71fb      	strb	r3, [r7, #7]

	/**  Initialization of UART APP instance UART_0 */
	init_status = (DAVE_STATUS_t) UART_Init(&UART_0);
 800b856:	4809      	ldr	r0, [pc, #36]	; (800b87c <at_initInterface+0x30>)
 800b858:	f7fa f9f4 	bl	8005c44 <UART_Init>
 800b85c:	4603      	mov	r3, r0
 800b85e:	71bb      	strb	r3, [r7, #6]
	if (DAVE_STATUS_SUCCESS == init_status)
 800b860:	79bb      	ldrb	r3, [r7, #6]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d102      	bne.n	800b86c <at_initInterface+0x20>
	{
		len_retStatus = E_RET_SUCCESS;
 800b866:	2300      	movs	r3, #0
 800b868:	71fb      	strb	r3, [r7, #7]
 800b86a:	e001      	b.n	800b870 <at_initInterface+0x24>
	}
	else
	{
		len_retStatus = E_RET_FAILED;
 800b86c:	2302      	movs	r3, #2
 800b86e:	71fb      	strb	r3, [r7, #7]
	}

	return len_retStatus;
 800b870:	79fb      	ldrb	r3, [r7, #7]
}
 800b872:	4618      	mov	r0, r3
 800b874:	3708      	adds	r7, #8
 800b876:	46bd      	mov	sp, r7
 800b878:	bd80      	pop	{r7, pc}
 800b87a:	bf00      	nop
 800b87c:	1ffe8844 	.word	0x1ffe8844

0800b880 <at_readPort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_readPort()
{
 800b880:	b580      	push	{r7, lr}
 800b882:	af00      	add	r7, sp, #0
	return UART_GetReceivedWord(&UART_0);
 800b884:	4802      	ldr	r0, [pc, #8]	; (800b890 <at_readPort+0x10>)
 800b886:	f7ff ffd1 	bl	800b82c <UART_GetReceivedWord>
 800b88a:	4603      	mov	r3, r0
}
 800b88c:	4618      	mov	r0, r3
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	1ffe8844 	.word	0x1ffe8844

0800b894 <at_isRxBuffEmpty>:
 *
 * Return values 	:	bool
 *
 ****************************************************************************/
bool at_isRxBuffEmpty()
{
 800b894:	b580      	push	{r7, lr}
 800b896:	af00      	add	r7, sp, #0
	return XMC_USIC_CH_RXFIFO_IsEmpty(UART_0.channel);
 800b898:	4b03      	ldr	r3, [pc, #12]	; (800b8a8 <at_isRxBuffEmpty+0x14>)
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f7ff ffb1 	bl	800b804 <XMC_USIC_CH_RXFIFO_IsEmpty>
 800b8a2:	4603      	mov	r3, r0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	1ffe8844 	.word	0x1ffe8844

0800b8ac <at_writePort>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t at_writePort(uint8_t *lu8_data, uint16_t lu16_buffLen)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
 800b8b4:	460b      	mov	r3, r1
 800b8b6:	807b      	strh	r3, [r7, #2]
	UART_STATUS_t ret_stat = UART_STATUS_BUSY;
 800b8b8:	2302      	movs	r3, #2
 800b8ba:	73bb      	strb	r3, [r7, #14]
	ret_stat = UART_Transmit(&UART_0, lu8_data, lu16_buffLen);
 800b8bc:	887b      	ldrh	r3, [r7, #2]
 800b8be:	480c      	ldr	r0, [pc, #48]	; (800b8f0 <at_writePort+0x44>)
 800b8c0:	6879      	ldr	r1, [r7, #4]
 800b8c2:	461a      	mov	r2, r3
 800b8c4:	f7fa f9d0 	bl	8005c68 <UART_Transmit>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73bb      	strb	r3, [r7, #14]
	uint8_t lu8_ret = 0;
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	73fb      	strb	r3, [r7, #15]
	if (UART_STATUS_SUCCESS == ret_stat)
 800b8d0:	7bbb      	ldrb	r3, [r7, #14]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d102      	bne.n	800b8dc <at_writePort+0x30>
	{
		lu8_ret = E_SUCCESS;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	73fb      	strb	r3, [r7, #15]
 800b8da:	e004      	b.n	800b8e6 <at_writePort+0x3a>
	}
	else if (UART_STATUS_FAILURE == ret_stat)
 800b8dc:	7bbb      	ldrb	r3, [r7, #14]
 800b8de:	2b01      	cmp	r3, #1
 800b8e0:	d101      	bne.n	800b8e6 <at_writePort+0x3a>
	{
		lu8_ret = E_FAIL;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	73fb      	strb	r3, [r7, #15]
	}
	return lu8_ret;
 800b8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	3710      	adds	r7, #16
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	1ffe8844 	.word	0x1ffe8844

0800b8f4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b8f4:	b480      	push	{r7}
 800b8f6:	b083      	sub	sp, #12
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 800b900:	78fb      	ldrb	r3, [r7, #3]
 800b902:	2201      	movs	r2, #1
 800b904:	409a      	lsls	r2, r3
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	605a      	str	r2, [r3, #4]
}
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b912:	4770      	bx	lr

0800b914 <XMC_GPIO_SetOutputLow>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.\n
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputLow(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800b914:	b480      	push	{r7}
 800b916:	b083      	sub	sp, #12
 800b918:	af00      	add	r7, sp, #0
 800b91a:	6078      	str	r0, [r7, #4]
 800b91c:	460b      	mov	r3, r1
 800b91e:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputLow: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = 0x10000U << pin;
 800b920:	78fb      	ldrb	r3, [r7, #3]
 800b922:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b926:	409a      	lsls	r2, r3
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	605a      	str	r2, [r3, #4]
}
 800b92c:	370c      	adds	r7, #12
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	7c1b      	ldrb	r3, [r3, #16]
 800b948:	4610      	mov	r0, r2
 800b94a:	4619      	mov	r1, r3
 800b94c:	f7ff ffd2 	bl	800b8f4 <XMC_GPIO_SetOutputHigh>
}
 800b950:	3708      	adds	r7, #8
 800b952:	46bd      	mov	sp, r7
 800b954:	bd80      	pop	{r7, pc}
 800b956:	bf00      	nop

0800b958 <DIGITAL_IO_SetOutputLow>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputLow(const DIGITAL_IO_t *const handler)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b082      	sub	sp, #8
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputLow: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputLow(handler->gpio_port,handler->gpio_pin);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681a      	ldr	r2, [r3, #0]
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	7c1b      	ldrb	r3, [r3, #16]
 800b968:	4610      	mov	r0, r2
 800b96a:	4619      	mov	r1, r3
 800b96c:	f7ff ffd2 	bl	800b914 <XMC_GPIO_SetOutputLow>
}
 800b970:	3708      	adds	r7, #8
 800b972:	46bd      	mov	sp, r7
 800b974:	bd80      	pop	{r7, pc}
 800b976:	bf00      	nop

0800b978 <delay>:
		{ 	"AT+QGPSLOC=1", 			OK_RSP, 			"+QGPSLOC:", 			CME_ERROR, 		TIMEOUT_300MS 	} 	// 	E_IDX_GET_GPS_DATA
};

/* Blocking delay function */
static void delay(uint32_t delay_ms)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800b980:	480f      	ldr	r0, [pc, #60]	; (800b9c0 <delay+0x48>)
 800b982:	f7fa fd4f 	bl	8006424 <TIMER_ClearEvent>

	delay_cnt = delay_ms * 100000;	//TIMER_DELAY_MUL_FACTOR;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	4a0e      	ldr	r2, [pc, #56]	; (800b9c4 <delay+0x4c>)
 800b98a:	fb02 f303 	mul.w	r3, r2, r3
 800b98e:	60fb      	str	r3, [r7, #12]

	TIMER_SetTimeInterval(&TIMER_0, delay_cnt);
 800b990:	480b      	ldr	r0, [pc, #44]	; (800b9c0 <delay+0x48>)
 800b992:	68f9      	ldr	r1, [r7, #12]
 800b994:	f7fa fc24 	bl	80061e0 <TIMER_SetTimeInterval>

	TIMER_Start(&TIMER_0);
 800b998:	4809      	ldr	r0, [pc, #36]	; (800b9c0 <delay+0x48>)
 800b99a:	f7fa fba7 	bl	80060ec <TIMER_Start>

	while (!TIMER_GetInterruptStatus(&TIMER_0))
 800b99e:	bf00      	nop
 800b9a0:	4807      	ldr	r0, [pc, #28]	; (800b9c0 <delay+0x48>)
 800b9a2:	f7fa fd19 	bl	80063d8 <TIMER_GetInterruptStatus>
 800b9a6:	4603      	mov	r3, r0
 800b9a8:	f083 0301 	eor.w	r3, r3, #1
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d1f6      	bne.n	800b9a0 <delay+0x28>
		;

	TIMER_Stop(&TIMER_0);
 800b9b2:	4803      	ldr	r0, [pc, #12]	; (800b9c0 <delay+0x48>)
 800b9b4:	f7fa fbc2 	bl	800613c <TIMER_Stop>
}
 800b9b8:	3710      	adds	r7, #16
 800b9ba:	46bd      	mov	sp, r7
 800b9bc:	bd80      	pop	{r7, pc}
 800b9be:	bf00      	nop
 800b9c0:	1ffe8850 	.word	0x1ffe8850
 800b9c4:	000186a0 	.word	0x000186a0

0800b9c8 <mod_enable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_enable4gModule(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputHigh(&MODULE_4G_EN_OUT_D);
 800b9cc:	480a      	ldr	r0, [pc, #40]	; (800b9f8 <mod_enable4gModule+0x30>)
 800b9ce:	f7ff ffb3 	bl	800b938 <DIGITAL_IO_SetOutputHigh>
	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800b9d2:	480a      	ldr	r0, [pc, #40]	; (800b9fc <mod_enable4gModule+0x34>)
 800b9d4:	f7ff ffc0 	bl	800b958 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800b9d8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b9dc:	f7ff ffcc 	bl	800b978 <delay>

	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800b9e0:	4806      	ldr	r0, [pc, #24]	; (800b9fc <mod_enable4gModule+0x34>)
 800b9e2:	f7ff ffa9 	bl	800b938 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800b9e6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800b9ea:	f7ff ffc5 	bl	800b978 <delay>

	gb_isMqttConnected = false;
 800b9ee:	4b04      	ldr	r3, [pc, #16]	; (800ba00 <mod_enable4gModule+0x38>)
 800b9f0:	2200      	movs	r2, #0
 800b9f2:	701a      	strb	r2, [r3, #0]
//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800b9f4:	bd80      	pop	{r7, pc}
 800b9f6:	bf00      	nop
 800b9f8:	08013778 	.word	0x08013778
 800b9fc:	08013764 	.word	0x08013764
 800ba00:	1fff5234 	.word	0x1fff5234

0800ba04 <mod_disable4gModule>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_disable4gModule(void)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0
	DIGITAL_IO_SetOutputLow(&MODULE_4G_EN_OUT_D);
 800ba08:	4808      	ldr	r0, [pc, #32]	; (800ba2c <mod_disable4gModule+0x28>)
 800ba0a:	f7ff ffa5 	bl	800b958 <DIGITAL_IO_SetOutputLow>
	DIGITAL_IO_SetOutputHigh(&DIGITAL_IO_PWRKEY);
 800ba0e:	4808      	ldr	r0, [pc, #32]	; (800ba30 <mod_disable4gModule+0x2c>)
 800ba10:	f7ff ff92 	bl	800b938 <DIGITAL_IO_SetOutputHigh>
	delay(3000);
 800ba14:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ba18:	f7ff ffae 	bl	800b978 <delay>

	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWRKEY);
 800ba1c:	4804      	ldr	r0, [pc, #16]	; (800ba30 <mod_disable4gModule+0x2c>)
 800ba1e:	f7ff ff9b 	bl	800b958 <DIGITAL_IO_SetOutputLow>
	delay(3000);
 800ba22:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800ba26:	f7ff ffa7 	bl	800b978 <delay>

//	DIGITAL_IO_SetOutputLow(&DIGITAL_IO_PWR_KEY);
}
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	08013778 	.word	0x08013778
 800ba30:	08013764 	.word	0x08013764

0800ba34 <mod_open4gModPort>:
 *
 * Return values 	:	en_responseRetCodes_t
 *
 ****************************************************************************/
en_responseRetCodes_t mod_open4gModPort(void)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b082      	sub	sp, #8
 800ba38:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ba3a:	2304      	movs	r3, #4
 800ba3c:	71fb      	strb	r3, [r7, #7]

	/* Initialize the UART port */
	len_retStatus = at_initInterface();
 800ba3e:	f7ff ff05 	bl	800b84c <at_initInterface>
 800ba42:	4603      	mov	r3, r0
 800ba44:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
	{
		/* Do something after successful initialization */
	}

	return len_retStatus;
 800ba46:	79fb      	ldrb	r3, [r7, #7]
}
 800ba48:	4618      	mov	r0, r3
 800ba4a:	3708      	adds	r7, #8
 800ba4c:	46bd      	mov	sp, r7
 800ba4e:	bd80      	pop	{r7, pc}

0800ba50 <mod_receiveRsp>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_receiveRsp(void)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b084      	sub	sp, #16
 800ba54:	af00      	add	r7, sp, #0
	if (at_isRxBuffEmpty() != true)
 800ba56:	f7ff ff1d 	bl	800b894 <at_isRxBuffEmpty>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	f083 0301 	eor.w	r3, r3, #1
 800ba60:	b2db      	uxtb	r3, r3
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80e8 	beq.w	800bc38 <mod_receiveRsp+0x1e8>
	{
		uint8_t lu8_rcvdByte = 0;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	73fb      	strb	r3, [r7, #15]

		lu8_rcvdByte = at_readPort();
 800ba6c:	f7ff ff08 	bl	800b880 <at_readPort>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73fb      	strb	r3, [r7, #15]
		if (lu8_rcvdByte != 0)
 800ba74:	7bfb      	ldrb	r3, [r7, #15]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 80de 	beq.w	800bc38 <mod_receiveRsp+0x1e8>
		{
			gu8arr_respBuffer[sgu8_respCount++] = lu8_rcvdByte;
 800ba7c:	4b70      	ldr	r3, [pc, #448]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	1c5a      	adds	r2, r3, #1
 800ba82:	b2d1      	uxtb	r1, r2
 800ba84:	4a6e      	ldr	r2, [pc, #440]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800ba86:	7011      	strb	r1, [r2, #0]
 800ba88:	4619      	mov	r1, r3
 800ba8a:	4a6e      	ldr	r2, [pc, #440]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800ba8c:	7bfb      	ldrb	r3, [r7, #15]
 800ba8e:	5453      	strb	r3, [r2, r1]
			lu8_rcvdByte = 0;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73fb      	strb	r3, [r7, #15]

			if (NULL != strstr((const char*) gu8arr_respBuffer, (const char*) QMTSTAT))
 800ba94:	486b      	ldr	r0, [pc, #428]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800ba96:	496c      	ldr	r1, [pc, #432]	; (800bc48 <mod_receiveRsp+0x1f8>)
 800ba98:	f006 f97d 	bl	8011d96 <strstr>
 800ba9c:	4603      	mov	r3, r0
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d04a      	beq.n	800bb38 <mod_receiveRsp+0xe8>
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800baa2:	4868      	ldr	r0, [pc, #416]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800baa4:	213a      	movs	r1, #58	; 0x3a
 800baa6:	f006 f946 	bl	8011d36 <strchr>
 800baaa:	60b8      	str	r0, [r7, #8]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800baac:	68b8      	ldr	r0, [r7, #8]
 800baae:	210a      	movs	r1, #10
 800bab0:	f006 f941 	bl	8011d36 <strchr>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d03d      	beq.n	800bb36 <mod_receiveRsp+0xe6>
				{
					lu8p_saveptr += 2;
 800baba:	68bb      	ldr	r3, [r7, #8]
 800babc:	3302      	adds	r3, #2
 800babe:	60bb      	str	r3, [r7, #8]

					uint8_t lu8_result = atoi((char *) lu8p_saveptr);
 800bac0:	68b8      	ldr	r0, [r7, #8]
 800bac2:	f005 fe0b 	bl	80116dc <atoi>
 800bac6:	4603      	mov	r3, r0
 800bac8:	71fb      	strb	r3, [r7, #7]
					if (sgu8_mqttClientId == lu8_result)	//check client Idx
 800baca:	4b60      	ldr	r3, [pc, #384]	; (800bc4c <mod_receiveRsp+0x1fc>)
 800bacc:	781b      	ldrb	r3, [r3, #0]
 800bace:	79fa      	ldrb	r2, [r7, #7]
 800bad0:	429a      	cmp	r2, r3
 800bad2:	d130      	bne.n	800bb36 <mod_receiveRsp+0xe6>
					{
						lu8p_saveptr += 2;
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	3302      	adds	r3, #2
 800bad8:	60bb      	str	r3, [r7, #8]
						lu8_result = atoi((char *) lu8p_saveptr);	//check error code
 800bada:	68b8      	ldr	r0, [r7, #8]
 800badc:	f005 fdfe 	bl	80116dc <atoi>
 800bae0:	4603      	mov	r3, r0
 800bae2:	71fb      	strb	r3, [r7, #7]
						 * 2 --> Sending PINGREQ packet timed out or failed
						 * 3 --> Sending CONNECT packet timed out or failed
						 * 4 --> Receiving CONNACK packet timed out or failed
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
 800bae4:	79fb      	ldrb	r3, [r7, #7]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d00b      	beq.n	800bb02 <mod_receiveRsp+0xb2>
 800baea:	79fb      	ldrb	r3, [r7, #7]
 800baec:	2b02      	cmp	r3, #2
 800baee:	d008      	beq.n	800bb02 <mod_receiveRsp+0xb2>
 800baf0:	79fb      	ldrb	r3, [r7, #7]
 800baf2:	2b03      	cmp	r3, #3
 800baf4:	d005      	beq.n	800bb02 <mod_receiveRsp+0xb2>
								|| (4 == lu8_result) || (6 == lu8_result))
 800baf6:	79fb      	ldrb	r3, [r7, #7]
 800baf8:	2b04      	cmp	r3, #4
 800bafa:	d002      	beq.n	800bb02 <mod_receiveRsp+0xb2>
 800bafc:	79fb      	ldrb	r3, [r7, #7]
 800bafe:	2b06      	cmp	r3, #6
 800bb00:	d10b      	bne.n	800bb1a <mod_receiveRsp+0xca>
						{
							if (gb_isMqttConnected == true)
 800bb02:	4b53      	ldr	r3, [pc, #332]	; (800bc50 <mod_receiveRsp+0x200>)
 800bb04:	781b      	ldrb	r3, [r3, #0]
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d006      	beq.n	800bb18 <mod_receiveRsp+0xc8>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
 800bb0a:	4b52      	ldr	r3, [pc, #328]	; (800bc54 <mod_receiveRsp+0x204>)
 800bb0c:	2209      	movs	r2, #9
 800bb0e:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800bb10:	4b4f      	ldr	r3, [pc, #316]	; (800bc50 <mod_receiveRsp+0x200>)
 800bb12:	2200      	movs	r2, #0
 800bb14:	701a      	strb	r2, [r3, #0]
						 * 6 --> The client closes MQTT connection due to packet sending failure all the time
						 * */
						if ((1 == lu8_result) || (2 == lu8_result) || (3 == lu8_result)
								|| (4 == lu8_result) || (6 == lu8_result))
						{
							if (gb_isMqttConnected == true)
 800bb16:	e00e      	b.n	800bb36 <mod_receiveRsp+0xe6>
 800bb18:	e00d      	b.n	800bb36 <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_OPEN_STATE;
								gb_isMqttConnected = false;
							}
						}
						else if (8 == lu8_result)//The client closes the MQTT connection
 800bb1a:	79fb      	ldrb	r3, [r7, #7]
 800bb1c:	2b08      	cmp	r3, #8
 800bb1e:	d10a      	bne.n	800bb36 <mod_receiveRsp+0xe6>
						{
							if (gb_isMqttConnected == true)
 800bb20:	4b4b      	ldr	r3, [pc, #300]	; (800bc50 <mod_receiveRsp+0x200>)
 800bb22:	781b      	ldrb	r3, [r3, #0]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d006      	beq.n	800bb36 <mod_receiveRsp+0xe6>
							{
								sen_4gRunState = E_MQTT_CONNECT_STATE;
 800bb28:	4b4a      	ldr	r3, [pc, #296]	; (800bc54 <mod_receiveRsp+0x204>)
 800bb2a:	220b      	movs	r2, #11
 800bb2c:	701a      	strb	r2, [r3, #0]
								gb_isMqttConnected = false;
 800bb2e:	4b48      	ldr	r3, [pc, #288]	; (800bc50 <mod_receiveRsp+0x200>)
 800bb30:	2200      	movs	r2, #0
 800bb32:	701a      	strb	r2, [r3, #0]
 800bb34:	e080      	b.n	800bc38 <mod_receiveRsp+0x1e8>
 800bb36:	e07f      	b.n	800bc38 <mod_receiveRsp+0x1e8>
						}
					}
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800bb38:	4842      	ldr	r0, [pc, #264]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb3a:	4947      	ldr	r1, [pc, #284]	; (800bc58 <mod_receiveRsp+0x208>)
 800bb3c:	f006 f92b 	bl	8011d96 <strstr>
 800bb40:	4603      	mov	r3, r0
							}
						}
					}
				}
			}
			else if ((NULL
 800bb42:	2b00      	cmp	r3, #0
 800bb44:	d015      	beq.n	800bb72 <mod_receiveRsp+0x122>
					!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
			{
				uint8_t *lu8p_saveptr = (uint8_t *) strchr(
 800bb46:	483f      	ldr	r0, [pc, #252]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb48:	213a      	movs	r1, #58	; 0x3a
 800bb4a:	f006 f8f4 	bl	8011d36 <strchr>
 800bb4e:	6038      	str	r0, [r7, #0]
						(const char *) gu8arr_respBuffer, ':');

				if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bb50:	6838      	ldr	r0, [r7, #0]
 800bb52:	210a      	movs	r1, #10
 800bb54:	f006 f8ef 	bl	8011d36 <strchr>
 800bb58:	4603      	mov	r3, r0
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d008      	beq.n	800bb70 <mod_receiveRsp+0x120>
				{
					sgu8_respCount = 0;
 800bb5e:	4b38      	ldr	r3, [pc, #224]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bb64:	4837      	ldr	r0, [pc, #220]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb66:	2100      	movs	r1, #0
 800bb68:	2240      	movs	r2, #64	; 0x40
 800bb6a:	f005 fdf2 	bl	8011752 <memset>
 800bb6e:	e063      	b.n	800bc38 <mod_receiveRsp+0x1e8>
 800bb70:	e062      	b.n	800bc38 <mod_receiveRsp+0x1e8>
				}
			}
			else if (sgu8_respCount == 1)
 800bb72:	4b33      	ldr	r3, [pc, #204]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bb74:	781b      	ldrb	r3, [r3, #0]
 800bb76:	2b01      	cmp	r3, #1
 800bb78:	d110      	bne.n	800bb9c <mod_receiveRsp+0x14c>
			{
				if ((gu8arr_respBuffer[0] == 0xFF) || (gu8arr_respBuffer[0] == '\n'))
 800bb7a:	4b32      	ldr	r3, [pc, #200]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	2bff      	cmp	r3, #255	; 0xff
 800bb80:	d003      	beq.n	800bb8a <mod_receiveRsp+0x13a>
 800bb82:	4b30      	ldr	r3, [pc, #192]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	2b0a      	cmp	r3, #10
 800bb88:	d156      	bne.n	800bc38 <mod_receiveRsp+0x1e8>
				{
					sgu8_respCount = 0;
 800bb8a:	4b2d      	ldr	r3, [pc, #180]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bb90:	482c      	ldr	r0, [pc, #176]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb92:	2100      	movs	r1, #0
 800bb94:	2240      	movs	r2, #64	; 0x40
 800bb96:	f005 fddc 	bl	8011752 <memset>
 800bb9a:	e04d      	b.n	800bc38 <mod_receiveRsp+0x1e8>
				}
			}
			else if ((NULL
					!= strstr((const char*) gu8arr_respBuffer,
 800bb9c:	4829      	ldr	r0, [pc, #164]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bb9e:	492f      	ldr	r1, [pc, #188]	; (800bc5c <mod_receiveRsp+0x20c>)
 800bba0:	f006 f8f9 	bl	8011d96 <strstr>
 800bba4:	4603      	mov	r3, r0
				{
					sgu8_respCount = 0;
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
				}
			}
			else if ((NULL
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d012      	beq.n	800bbd0 <mod_receiveRsp+0x180>
					!= strstr((const char*) gu8arr_respBuffer,
							(const char*) "QIND: SMS DONE\r\n")))
			{
				gst_deviceStatus.mb_ismodemPwrDwn = false;
 800bbaa:	4b2d      	ldr	r3, [pc, #180]	; (800bc60 <mod_receiveRsp+0x210>)
 800bbac:	2200      	movs	r2, #0
 800bbae:	701a      	strb	r2, [r3, #0]
				sgu8_respCount = 0;
 800bbb0:	4b23      	ldr	r3, [pc, #140]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bbb6:	4823      	ldr	r0, [pc, #140]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bbb8:	2100      	movs	r1, #0
 800bbba:	2240      	movs	r2, #64	; 0x40
 800bbbc:	f005 fdc9 	bl	8011752 <memset>
				sen_4gRunState = E_SET_URC_PORT_STATE;
 800bbc0:	4b24      	ldr	r3, [pc, #144]	; (800bc54 <mod_receiveRsp+0x204>)
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	701a      	strb	r2, [r3, #0]
				delay(2000);
 800bbc6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bbca:	f7ff fed5 	bl	800b978 <delay>
 800bbce:	e033      	b.n	800bc38 <mod_receiveRsp+0x1e8>
			}
			else if (RDY_SIZE == sgu8_respCount)
 800bbd0:	4b1b      	ldr	r3, [pc, #108]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bbd2:	781b      	ldrb	r3, [r3, #0]
 800bbd4:	2b07      	cmp	r3, #7
 800bbd6:	d119      	bne.n	800bc0c <mod_receiveRsp+0x1bc>
			{
				if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) READY)))
 800bbd8:	481a      	ldr	r0, [pc, #104]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bbda:	4922      	ldr	r1, [pc, #136]	; (800bc64 <mod_receiveRsp+0x214>)
 800bbdc:	f006 f8db 	bl	8011d96 <strstr>
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d028      	beq.n	800bc38 <mod_receiveRsp+0x1e8>
				{
					gst_deviceStatus.mb_ismodemPwrDwn = false;
 800bbe6:	4b1e      	ldr	r3, [pc, #120]	; (800bc60 <mod_receiveRsp+0x210>)
 800bbe8:	2200      	movs	r2, #0
 800bbea:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800bbec:	4b14      	ldr	r3, [pc, #80]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bbee:	2200      	movs	r2, #0
 800bbf0:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bbf2:	4814      	ldr	r0, [pc, #80]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bbf4:	2100      	movs	r1, #0
 800bbf6:	2240      	movs	r2, #64	; 0x40
 800bbf8:	f005 fdab 	bl	8011752 <memset>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800bbfc:	4b15      	ldr	r3, [pc, #84]	; (800bc54 <mod_receiveRsp+0x204>)
 800bbfe:	2202      	movs	r2, #2
 800bc00:	701a      	strb	r2, [r3, #0]
					delay(2000);
 800bc02:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800bc06:	f7ff feb7 	bl	800b978 <delay>
 800bc0a:	e015      	b.n	800bc38 <mod_receiveRsp+0x1e8>
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
 800bc0c:	4b0c      	ldr	r3, [pc, #48]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	2b10      	cmp	r3, #16
 800bc12:	d111      	bne.n	800bc38 <mod_receiveRsp+0x1e8>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
 800bc14:	480b      	ldr	r0, [pc, #44]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bc16:	4914      	ldr	r1, [pc, #80]	; (800bc68 <mod_receiveRsp+0x218>)
 800bc18:	f006 f8bd 	bl	8011d96 <strstr>
 800bc1c:	4603      	mov	r3, r0
					delay(2000);
				}
			}
			else if (PWR_DOWN_SIZE == sgu8_respCount)
			{
				if ((NULL
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d00a      	beq.n	800bc38 <mod_receiveRsp+0x1e8>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) PWR_DWN)))
				{
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800bc22:	4b0f      	ldr	r3, [pc, #60]	; (800bc60 <mod_receiveRsp+0x210>)
 800bc24:	2201      	movs	r2, #1
 800bc26:	701a      	strb	r2, [r3, #0]
					sgu8_respCount = 0;
 800bc28:	4b05      	ldr	r3, [pc, #20]	; (800bc40 <mod_receiveRsp+0x1f0>)
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bc2e:	4805      	ldr	r0, [pc, #20]	; (800bc44 <mod_receiveRsp+0x1f4>)
 800bc30:	2100      	movs	r1, #0
 800bc32:	2240      	movs	r2, #64	; 0x40
 800bc34:	f005 fd8d 	bl	8011752 <memset>
				}
			}
		}
	}
}
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	1fff476c 	.word	0x1fff476c
 800bc44:	1fff46cc 	.word	0x1fff46cc
 800bc48:	08013dd4 	.word	0x08013dd4
 800bc4c:	1fff476d 	.word	0x1fff476d
 800bc50:	1fff5234 	.word	0x1fff5234
 800bc54:	1ffea4d8 	.word	0x1ffea4d8
 800bc58:	08013de0 	.word	0x08013de0
 800bc5c:	08013dec 	.word	0x08013dec
 800bc60:	1ffea4dc 	.word	0x1ffea4dc
 800bc64:	08013e00 	.word	0x08013e00
 800bc68:	08013e08 	.word	0x08013e08

0800bc6c <mod_sendCmd>:
 *
 * Return values 	: 	en_responseRetCodes_t
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_sendCmd(uint8_t *lu8p_data, uint16_t lu16_len)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b084      	sub	sp, #16
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	807b      	strh	r3, [r7, #2]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bc78:	2304      	movs	r3, #4
 800bc7a:	73fb      	strb	r3, [r7, #15]
	uint8_t lu8_ret = 0;
 800bc7c:	2300      	movs	r3, #0
 800bc7e:	73bb      	strb	r3, [r7, #14]

	lu8_ret = at_writePort(lu8p_data, lu16_len);
 800bc80:	887b      	ldrh	r3, [r7, #2]
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	4619      	mov	r1, r3
 800bc86:	f7ff fe11 	bl	800b8ac <at_writePort>
 800bc8a:	4603      	mov	r3, r0
 800bc8c:	73bb      	strb	r3, [r7, #14]
	if (E_SUCCESS == lu8_ret)
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d102      	bne.n	800bc9a <mod_sendCmd+0x2e>
	{
		len_retStatus = E_RET_SUCCESS;
 800bc94:	2300      	movs	r3, #0
 800bc96:	73fb      	strb	r3, [r7, #15]
 800bc98:	e001      	b.n	800bc9e <mod_sendCmd+0x32>
	}
	else
	{
		len_retStatus = E_RET_WRITE_ERROR;
 800bc9a:	2305      	movs	r3, #5
 800bc9c:	73fb      	strb	r3, [r7, #15]
	}

	return len_retStatus;
 800bc9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <mod_sendCmdGetRsp>:
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ***************************************************************************/
static en_responseRetCodes_t mod_sendCmdGetRsp(en_ATCommandIdx_t len_ATCmdIdx,
		uint8_t *lu8p_cmdParam)
{
 800bca8:	b590      	push	{r4, r7, lr}
 800bcaa:	f2ad 4d24 	subw	sp, sp, #1060	; 0x424
 800bcae:	af00      	add	r7, sp, #0
 800bcb0:	4602      	mov	r2, r0
 800bcb2:	463b      	mov	r3, r7
 800bcb4:	6019      	str	r1, [r3, #0]
 800bcb6:	1dfb      	adds	r3, r7, #7
 800bcb8:	701a      	strb	r2, [r3, #0]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800bcba:	2304      	movs	r3, #4
 800bcbc:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
	uint8_t lu8arr_sendCmdBuff[SEND_AT_CMD_BUFF];
	uint16_t lu16_BufferSize = 0;
 800bcc0:	2300      	movs	r3, #0
 800bcc2:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
	uint8_t *lu8p_Ptr = NULL;
 800bcc6:	2300      	movs	r3, #0
 800bcc8:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	uint8_t *lu8p_saveptr = NULL;
 800bccc:	f107 030c 	add.w	r3, r7, #12
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	601a      	str	r2, [r3, #0]

	switch (sen_sendCmdGetRespState)
 800bcd4:	4bbe      	ldr	r3, [pc, #760]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bcd6:	781b      	ldrb	r3, [r3, #0]
 800bcd8:	2b01      	cmp	r3, #1
 800bcda:	d010      	beq.n	800bcfe <mod_sendCmdGetRsp+0x56>
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d070      	beq.n	800bdc2 <mod_sendCmdGetRsp+0x11a>
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	f040 8267 	bne.w	800c1b4 <mod_sendCmdGetRsp+0x50c>
	{
		case E_AT_CMD_IDLE_STATE:
			sgu8_respCount = 0;
 800bce6:	4bbb      	ldr	r3, [pc, #748]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bce8:	2200      	movs	r2, #0
 800bcea:	701a      	strb	r2, [r3, #0]
			memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bcec:	48ba      	ldr	r0, [pc, #744]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bcee:	2100      	movs	r1, #0
 800bcf0:	2240      	movs	r2, #64	; 0x40
 800bcf2:	f005 fd2e 	bl	8011752 <memset>
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bcf6:	4bb6      	ldr	r3, [pc, #728]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	701a      	strb	r2, [r3, #0]
		break;
 800bcfc:	e261      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));
 800bcfe:	f107 0310 	add.w	r3, r7, #16
 800bd02:	4618      	mov	r0, r3
 800bd04:	2100      	movs	r1, #0
 800bd06:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800bd0a:	f005 fd22 	bl	8011752 <memset>

			strncpy((char *) lu8arr_sendCmdBuff,
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
 800bd0e:	1dfb      	adds	r3, r7, #7
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bd16:	fb02 f303 	mul.w	r3, r2, r3
 800bd1a:	4ab0      	ldr	r2, [pc, #704]	; (800bfdc <mod_sendCmdGetRsp+0x334>)
 800bd1c:	189c      	adds	r4, r3, r2
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));
 800bd1e:	1dfb      	adds	r3, r7, #7
 800bd20:	781b      	ldrb	r3, [r3, #0]
 800bd22:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bd26:	fb02 f303 	mul.w	r3, r2, r3
 800bd2a:	4aac      	ldr	r2, [pc, #688]	; (800bfdc <mod_sendCmdGetRsp+0x334>)
 800bd2c:	4413      	add	r3, r2
		break;

		case E_AT_CMD_SEND_INPROG_STATE:
			memset(lu8arr_sendCmdBuff, 0, sizeof(lu8arr_sendCmdBuff));

			strncpy((char *) lu8arr_sendCmdBuff,
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f006 f817 	bl	8011d62 <strlen>
 800bd34:	4602      	mov	r2, r0
 800bd36:	f107 0310 	add.w	r3, r7, #16
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	4621      	mov	r1, r4
 800bd3e:	f006 f818 	bl	8011d72 <strncpy>
					(char *) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString,
					strlen((char *)gcst_ATCmdTable[len_ATCmdIdx].mu8arr_cmdString));

			if (NULL != lu8p_cmdParam)
 800bd42:	463b      	mov	r3, r7
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d006      	beq.n	800bd58 <mod_sendCmdGetRsp+0xb0>
			{
				strcat((char *) lu8arr_sendCmdBuff, (char *) lu8p_cmdParam);
 800bd4a:	f107 0210 	add.w	r2, r7, #16
 800bd4e:	463b      	mov	r3, r7
 800bd50:	4610      	mov	r0, r2
 800bd52:	6819      	ldr	r1, [r3, #0]
 800bd54:	f005 ffe0 	bl	8011d18 <strcat>
			}

			lu16_BufferSize = strlen((char *) lu8arr_sendCmdBuff);
 800bd58:	f107 0310 	add.w	r3, r7, #16
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	f006 f800 	bl	8011d62 <strlen>
 800bd62:	4603      	mov	r3, r0
 800bd64:	f8a7 341c 	strh.w	r3, [r7, #1052]	; 0x41c
			len_retStatus = mod_sendCmd(lu8arr_sendCmdBuff, lu16_BufferSize);
 800bd68:	f107 0210 	add.w	r2, r7, #16
 800bd6c:	f8b7 341c 	ldrh.w	r3, [r7, #1052]	; 0x41c
 800bd70:	4610      	mov	r0, r2
 800bd72:	4619      	mov	r1, r3
 800bd74:	f7ff ff7a 	bl	800bc6c <mod_sendCmd>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
			if (E_RET_SUCCESS == len_retStatus)
 800bd7e:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d11c      	bne.n	800bdc0 <mod_sendCmdGetRsp+0x118>
			{
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800bd86:	4894      	ldr	r0, [pc, #592]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bd88:	2100      	movs	r1, #0
 800bd8a:	2240      	movs	r2, #64	; 0x40
 800bd8c:	f005 fce1 	bl	8011752 <memset>
				sgu8_respCount = 0;
 800bd90:	4b90      	ldr	r3, [pc, #576]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bd92:	2200      	movs	r2, #0
 800bd94:	701a      	strb	r2, [r3, #0]
				tm_setResponseTime(gcst_ATCmdTable[len_ATCmdIdx].mu32_respTimeoutInMs);
 800bd96:	1dfb      	adds	r3, r7, #7
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	4a90      	ldr	r2, [pc, #576]	; (800bfdc <mod_sendCmdGetRsp+0x334>)
 800bd9c:	f240 41a4 	movw	r1, #1188	; 0x4a4
 800bda0:	fb01 f303 	mul.w	r3, r1, r3
 800bda4:	4413      	add	r3, r2
 800bda6:	f503 6394 	add.w	r3, r3, #1184	; 0x4a0
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4618      	mov	r0, r3
 800bdae:	f7f4 fb2d 	bl	800040c <tm_setResponseTime>
				len_retStatus = E_RET_INPROGRESS;
 800bdb2:	2304      	movs	r3, #4
 800bdb4:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
				sen_sendCmdGetRespState = E_AT_CMD_RECV_INPROG_STATE;
 800bdb8:	4b85      	ldr	r3, [pc, #532]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bdba:	2202      	movs	r2, #2
 800bdbc:	701a      	strb	r2, [r3, #0]
			}
		break;
 800bdbe:	e200      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>
 800bdc0:	e1ff      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
 800bdc2:	4b84      	ldr	r3, [pc, #528]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	2b00      	cmp	r3, #0
 800bdc8:	f000 81dd 	beq.w	800c186 <mod_sendCmdGetRsp+0x4de>
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
 800bdcc:	1dfb      	adds	r3, r7, #7
 800bdce:	781b      	ldrb	r3, [r3, #0]
 800bdd0:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800bdd4:	fb02 f303 	mul.w	r3, r2, r3
 800bdd8:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800bddc:	4a7f      	ldr	r2, [pc, #508]	; (800bfdc <mod_sendCmdGetRsp+0x334>)
 800bdde:	4413      	add	r3, r2

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800bde0:	487d      	ldr	r0, [pc, #500]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bde2:	4619      	mov	r1, r3
 800bde4:	f005 ffd7 	bl	8011d96 <strstr>
 800bde8:	4603      	mov	r3, r0
		break;

		case E_AT_CMD_RECV_INPROG_STATE:
			if (sgu8_respCount > 0)
			{
				if ((NULL
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d00b      	beq.n	800be06 <mod_sendCmdGetRsp+0x15e>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_respString)))
				{
					sgu8_respCount = 0;
 800bdee:	4b79      	ldr	r3, [pc, #484]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
 800bdf4:	f7f4 fb24 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_SUCCESS;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bdfe:	4b74      	ldr	r3, [pc, #464]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800be00:	2201      	movs	r2, #1
 800be02:	701a      	strb	r2, [r3, #0]
 800be04:	e1d5      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
				}

				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
 800be06:	4874      	ldr	r0, [pc, #464]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800be08:	4975      	ldr	r1, [pc, #468]	; (800bfe0 <mod_sendCmdGetRsp+0x338>)
 800be0a:	f005 ffc4 	bl	8011d96 <strstr>
 800be0e:	4603      	mov	r3, r0
					tm_clearResponseTime();
					len_retStatus = E_RET_SUCCESS;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}

				else if ((NULL
 800be10:	2b00      	cmp	r3, #0
 800be12:	d01e      	beq.n	800be52 <mod_sendCmdGetRsp+0x1aa>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTOPEN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800be14:	4870      	ldr	r0, [pc, #448]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800be16:	213a      	movs	r1, #58	; 0x3a
 800be18:	f005 ff8d 	bl	8011d36 <strchr>
 800be1c:	4602      	mov	r2, r0
 800be1e:	f107 030c 	add.w	r3, r7, #12
 800be22:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800be24:	f107 030c 	add.w	r3, r7, #12
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4618      	mov	r0, r3
 800be2c:	210a      	movs	r1, #10
 800be2e:	f005 ff82 	bl	8011d36 <strchr>
 800be32:	4603      	mov	r3, r0
 800be34:	2b00      	cmp	r3, #0
 800be36:	f000 81bc 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800be3a:	4b66      	ldr	r3, [pc, #408]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800be40:	f7f4 fafe 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800be44:	2300      	movs	r3, #0
 800be46:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800be4a:	4b61      	ldr	r3, [pc, #388]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800be4c:	2201      	movs	r2, #1
 800be4e:	701a      	strb	r2, [r3, #0]
 800be50:	e1af      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
 800be52:	4861      	ldr	r0, [pc, #388]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800be54:	4963      	ldr	r1, [pc, #396]	; (800bfe4 <mod_sendCmdGetRsp+0x33c>)
 800be56:	f005 ff9e 	bl	8011d96 <strstr>
 800be5a:	4603      	mov	r3, r0
//						sgu8_respCount = 0;
//						memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
//						at_clearBuff();
//					}
//				}
				else if ((NULL
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d01e      	beq.n	800be9e <mod_sendCmdGetRsp+0x1f6>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTPUBEX)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800be60:	485d      	ldr	r0, [pc, #372]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800be62:	213a      	movs	r1, #58	; 0x3a
 800be64:	f005 ff67 	bl	8011d36 <strchr>
 800be68:	4602      	mov	r2, r0
 800be6a:	f107 030c 	add.w	r3, r7, #12
 800be6e:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800be70:	f107 030c 	add.w	r3, r7, #12
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	4618      	mov	r0, r3
 800be78:	210a      	movs	r1, #10
 800be7a:	f005 ff5c 	bl	8011d36 <strchr>
 800be7e:	4603      	mov	r3, r0
 800be80:	2b00      	cmp	r3, #0
 800be82:	f000 8196 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800be86:	4b53      	ldr	r3, [pc, #332]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800be88:	2200      	movs	r2, #0
 800be8a:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800be8c:	f7f4 fad8 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800be90:	2300      	movs	r3, #0
 800be92:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800be96:	4b4e      	ldr	r3, [pc, #312]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800be98:	2201      	movs	r2, #1
 800be9a:	701a      	strb	r2, [r3, #0]
 800be9c:	e189      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
 800be9e:	484e      	ldr	r0, [pc, #312]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bea0:	4951      	ldr	r1, [pc, #324]	; (800bfe8 <mod_sendCmdGetRsp+0x340>)
 800bea2:	f005 ff78 	bl	8011d96 <strstr>
 800bea6:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d01e      	beq.n	800beea <mod_sendCmdGetRsp+0x242>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTCONN)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800beac:	484a      	ldr	r0, [pc, #296]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800beae:	213a      	movs	r1, #58	; 0x3a
 800beb0:	f005 ff41 	bl	8011d36 <strchr>
 800beb4:	4602      	mov	r2, r0
 800beb6:	f107 030c 	add.w	r3, r7, #12
 800beba:	601a      	str	r2, [r3, #0]
							':');
					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bebc:	f107 030c 	add.w	r3, r7, #12
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	4618      	mov	r0, r3
 800bec4:	210a      	movs	r1, #10
 800bec6:	f005 ff36 	bl	8011d36 <strchr>
 800beca:	4603      	mov	r3, r0
 800becc:	2b00      	cmp	r3, #0
 800bece:	f000 8170 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bed2:	4b40      	ldr	r3, [pc, #256]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bed4:	2200      	movs	r2, #0
 800bed6:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bed8:	f7f4 fab2 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bedc:	2300      	movs	r3, #0
 800bede:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bee2:	4b3b      	ldr	r3, [pc, #236]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bee4:	2201      	movs	r2, #1
 800bee6:	701a      	strb	r2, [r3, #0]
 800bee8:	e163      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
 800beea:	483b      	ldr	r0, [pc, #236]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800beec:	493f      	ldr	r1, [pc, #252]	; (800bfec <mod_sendCmdGetRsp+0x344>)
 800beee:	f005 ff52 	bl	8011d96 <strstr>
 800bef2:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d01e      	beq.n	800bf36 <mod_sendCmdGetRsp+0x28e>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTDISC)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bef8:	4837      	ldr	r0, [pc, #220]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800befa:	213a      	movs	r1, #58	; 0x3a
 800befc:	f005 ff1b 	bl	8011d36 <strchr>
 800bf00:	4602      	mov	r2, r0
 800bf02:	f107 030c 	add.w	r3, r7, #12
 800bf06:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bf08:	f107 030c 	add.w	r3, r7, #12
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	4618      	mov	r0, r3
 800bf10:	210a      	movs	r1, #10
 800bf12:	f005 ff10 	bl	8011d36 <strchr>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 814a 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bf1e:	4b2d      	ldr	r3, [pc, #180]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bf20:	2200      	movs	r2, #0
 800bf22:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bf24:	f7f4 fa8c 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bf2e:	4b28      	ldr	r3, [pc, #160]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bf30:	2201      	movs	r2, #1
 800bf32:	701a      	strb	r2, [r3, #0]
 800bf34:	e13d      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
 800bf36:	4828      	ldr	r0, [pc, #160]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bf38:	492d      	ldr	r1, [pc, #180]	; (800bff0 <mod_sendCmdGetRsp+0x348>)
 800bf3a:	f005 ff2c 	bl	8011d96 <strstr>
 800bf3e:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d01e      	beq.n	800bf82 <mod_sendCmdGetRsp+0x2da>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTSUB)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bf44:	4824      	ldr	r0, [pc, #144]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bf46:	213a      	movs	r1, #58	; 0x3a
 800bf48:	f005 fef5 	bl	8011d36 <strchr>
 800bf4c:	4602      	mov	r2, r0
 800bf4e:	f107 030c 	add.w	r3, r7, #12
 800bf52:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bf54:	f107 030c 	add.w	r3, r7, #12
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	210a      	movs	r1, #10
 800bf5e:	f005 feea 	bl	8011d36 <strchr>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	f000 8124 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bf6a:	4b1a      	ldr	r3, [pc, #104]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bf6c:	2200      	movs	r2, #0
 800bf6e:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bf70:	f7f4 fa66 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bf74:	2300      	movs	r3, #0
 800bf76:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bf7a:	4b15      	ldr	r3, [pc, #84]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	701a      	strb	r2, [r3, #0]
 800bf80:	e117      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
 800bf82:	4815      	ldr	r0, [pc, #84]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bf84:	491b      	ldr	r1, [pc, #108]	; (800bff4 <mod_sendCmdGetRsp+0x34c>)
 800bf86:	f005 ff06 	bl	8011d96 <strstr>
 800bf8a:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d033      	beq.n	800bff8 <mod_sendCmdGetRsp+0x350>
						!= strstr((const char*) gu8arr_respBuffer, (const char*) QMTRECV)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800bf90:	4811      	ldr	r0, [pc, #68]	; (800bfd8 <mod_sendCmdGetRsp+0x330>)
 800bf92:	213a      	movs	r1, #58	; 0x3a
 800bf94:	f005 fecf 	bl	8011d36 <strchr>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800bfa0:	f107 030c 	add.w	r3, r7, #12
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	210a      	movs	r1, #10
 800bfaa:	f005 fec4 	bl	8011d36 <strchr>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 80fe 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						sgu8_respCount = 0;
 800bfb6:	4b07      	ldr	r3, [pc, #28]	; (800bfd4 <mod_sendCmdGetRsp+0x32c>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800bfbc:	f7f4 fa40 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800bfc6:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <mod_sendCmdGetRsp+0x328>)
 800bfc8:	2201      	movs	r2, #1
 800bfca:	701a      	strb	r2, [r3, #0]
 800bfcc:	e0f1      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
 800bfce:	bf00      	nop
 800bfd0:	1ffea4d9 	.word	0x1ffea4d9
 800bfd4:	1fff476c 	.word	0x1fff476c
 800bfd8:	1fff46cc 	.word	0x1fff46cc
 800bfdc:	1ffea4e8 	.word	0x1ffea4e8
 800bfe0:	08013e18 	.word	0x08013e18
 800bfe4:	08013e24 	.word	0x08013e24
 800bfe8:	08013e30 	.word	0x08013e30
 800bfec:	08013e3c 	.word	0x08013e3c
 800bff0:	08013e48 	.word	0x08013e48
 800bff4:	08013de0 	.word	0x08013de0
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800bff8:	4875      	ldr	r0, [pc, #468]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800bffa:	4976      	ldr	r1, [pc, #472]	; (800c1d4 <mod_sendCmdGetRsp+0x52c>)
 800bffc:	f005 fecb 	bl	8011d96 <strstr>
 800c000:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c002:	2b00      	cmp	r3, #0
 800c004:	d038      	beq.n	800c078 <mod_sendCmdGetRsp+0x3d0>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CME_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c006:	4872      	ldr	r0, [pc, #456]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c008:	213a      	movs	r1, #58	; 0x3a
 800c00a:	f005 fe94 	bl	8011d36 <strchr>
 800c00e:	4602      	mov	r2, r0
 800c010:	f107 030c 	add.w	r3, r7, #12
 800c014:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c016:	f107 030c 	add.w	r3, r7, #12
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4618      	mov	r0, r3
 800c01e:	210a      	movs	r1, #10
 800c020:	f005 fe89 	bl	8011d36 <strchr>
 800c024:	4603      	mov	r3, r0
 800c026:	2b00      	cmp	r3, #0
 800c028:	f000 80c3 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c02c:	f107 030c 	add.w	r3, r7, #12
 800c030:	4867      	ldr	r0, [pc, #412]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c032:	4969      	ldr	r1, [pc, #420]	; (800c1d8 <mod_sendCmdGetRsp+0x530>)
 800c034:	461a      	mov	r2, r3
 800c036:	f005 ff24 	bl	8011e82 <strtok_r>
 800c03a:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c03e:	f107 030c 	add.w	r3, r7, #12
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	1c5a      	adds	r2, r3, #1
 800c046:	f107 030c 	add.w	r3, r7, #12
 800c04a:	601a      	str	r2, [r3, #0]

						sgu16_cmeError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c04c:	f107 030c 	add.w	r3, r7, #12
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4618      	mov	r0, r3
 800c054:	f005 fb42 	bl	80116dc <atoi>
 800c058:	4603      	mov	r3, r0
 800c05a:	b29a      	uxth	r2, r3
 800c05c:	4b5f      	ldr	r3, [pc, #380]	; (800c1dc <mod_sendCmdGetRsp+0x534>)
 800c05e:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c060:	4b5f      	ldr	r3, [pc, #380]	; (800c1e0 <mod_sendCmdGetRsp+0x538>)
 800c062:	2200      	movs	r2, #0
 800c064:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c066:	f7f4 f9eb 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CME_ERROR;
 800c06a:	230b      	movs	r3, #11
 800c06c:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c070:	4b5c      	ldr	r3, [pc, #368]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c072:	2201      	movs	r2, #1
 800c074:	701a      	strb	r2, [r3, #0]
 800c076:	e09c      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						!= strstr((const char*) gu8arr_respBuffer,
 800c078:	4855      	ldr	r0, [pc, #340]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c07a:	495b      	ldr	r1, [pc, #364]	; (800c1e8 <mod_sendCmdGetRsp+0x540>)
 800c07c:	f005 fe8b 	bl	8011d96 <strstr>
 800c080:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_CME_ERROR;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c082:	2b00      	cmp	r3, #0
 800c084:	d038      	beq.n	800c0f8 <mod_sendCmdGetRsp+0x450>
						!= strstr((const char*) gu8arr_respBuffer,
								(const char*) CMS_ERROR)))
				{
					lu8p_saveptr = (uint8_t *) strchr((const char *) gu8arr_respBuffer,
 800c086:	4852      	ldr	r0, [pc, #328]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c088:	213a      	movs	r1, #58	; 0x3a
 800c08a:	f005 fe54 	bl	8011d36 <strchr>
 800c08e:	4602      	mov	r2, r0
 800c090:	f107 030c 	add.w	r3, r7, #12
 800c094:	601a      	str	r2, [r3, #0]
							':');

					if (NULL != strchr((const char *) lu8p_saveptr, '\n'))
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	4618      	mov	r0, r3
 800c09e:	210a      	movs	r1, #10
 800c0a0:	f005 fe49 	bl	8011d36 <strchr>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	f000 8083 	beq.w	800c1b2 <mod_sendCmdGetRsp+0x50a>
					{
						lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c0ac:	f107 030c 	add.w	r3, r7, #12
 800c0b0:	4847      	ldr	r0, [pc, #284]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c0b2:	4949      	ldr	r1, [pc, #292]	; (800c1d8 <mod_sendCmdGetRsp+0x530>)
 800c0b4:	461a      	mov	r2, r3
 800c0b6:	f005 fee4 	bl	8011e82 <strtok_r>
 800c0ba:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
								(const char *) ":", (char **) &lu8p_saveptr);
						lu8p_saveptr++;
 800c0be:	f107 030c 	add.w	r3, r7, #12
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	1c5a      	adds	r2, r3, #1
 800c0c6:	f107 030c 	add.w	r3, r7, #12
 800c0ca:	601a      	str	r2, [r3, #0]

						sgu16_cmsError = (uint16_t) atoi((const char *) lu8p_saveptr);
 800c0cc:	f107 030c 	add.w	r3, r7, #12
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	4618      	mov	r0, r3
 800c0d4:	f005 fb02 	bl	80116dc <atoi>
 800c0d8:	4603      	mov	r3, r0
 800c0da:	b29a      	uxth	r2, r3
 800c0dc:	4b43      	ldr	r3, [pc, #268]	; (800c1ec <mod_sendCmdGetRsp+0x544>)
 800c0de:	801a      	strh	r2, [r3, #0]

						sgu8_respCount = 0;
 800c0e0:	4b3f      	ldr	r3, [pc, #252]	; (800c1e0 <mod_sendCmdGetRsp+0x538>)
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c0e6:	f7f4 f9ab 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_CMS_ERROR;
 800c0ea:	230c      	movs	r3, #12
 800c0ec:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c0f0:	4b3c      	ldr	r3, [pc, #240]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	701a      	strb	r2, [r3, #0]
 800c0f6:	e05c      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
 800c0f8:	1dfb      	adds	r3, r7, #7
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	2b1b      	cmp	r3, #27
 800c0fe:	d112      	bne.n	800c126 <mod_sendCmdGetRsp+0x47e>
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c100:	4833      	ldr	r0, [pc, #204]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c102:	2141      	movs	r1, #65	; 0x41
 800c104:	f005 fe17 	bl	8011d36 <strchr>
 800c108:	4603      	mov	r3, r0
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if (E_IDX_UPLOAD_FILE_CONTENT == len_ATCmdIdx)
				{
					if ((NULL
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d051      	beq.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) "A")))
					{
						sgu8_respCount = 0;
 800c10e:	4b34      	ldr	r3, [pc, #208]	; (800c1e0 <mod_sendCmdGetRsp+0x538>)
 800c110:	2200      	movs	r2, #0
 800c112:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c114:	f7f4 f994 	bl	8000440 <tm_clearResponseTime>
						len_retStatus = E_RET_SUCCESS;
 800c118:	2300      	movs	r3, #0
 800c11a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c11e:	4b31      	ldr	r3, [pc, #196]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c120:	2201      	movs	r2, #1
 800c122:	701a      	strb	r2, [r3, #0]
 800c124:	e045      	b.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c126:	1dfb      	adds	r3, r7, #7
 800c128:	781b      	ldrb	r3, [r3, #0]
 800c12a:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c12e:	fb02 f303 	mul.w	r3, r2, r3
 800c132:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c136:	4a2e      	ldr	r2, [pc, #184]	; (800c1f0 <mod_sendCmdGetRsp+0x548>)
 800c138:	4413      	add	r3, r2
 800c13a:	3304      	adds	r3, #4
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
 800c13c:	482d      	ldr	r0, [pc, #180]	; (800c1f4 <mod_sendCmdGetRsp+0x54c>)
 800c13e:	4619      	mov	r1, r3
 800c140:	f005 fe29 	bl	8011d96 <strstr>
 800c144:	4603      	mov	r3, r0
						tm_clearResponseTime();
						len_retStatus = E_RET_SUCCESS;
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
					}
				}
				else if ((NULL
 800c146:	2b00      	cmp	r3, #0
 800c148:	d133      	bne.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
 800c14a:	1dfb      	adds	r3, r7, #7
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	f240 42a4 	movw	r2, #1188	; 0x4a4
 800c152:	fb02 f303 	mul.w	r3, r2, r3
 800c156:	f503 638d 	add.w	r3, r3, #1128	; 0x468
 800c15a:	4a25      	ldr	r2, [pc, #148]	; (800c1f0 <mod_sendCmdGetRsp+0x548>)
 800c15c:	4413      	add	r3, r2
 800c15e:	3304      	adds	r3, #4
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
							!= strstr((const char*) gu8arr_respBuffer,
 800c160:	481b      	ldr	r0, [pc, #108]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c162:	4619      	mov	r1, r3
 800c164:	f005 fe17 	bl	8011d96 <strstr>
 800c168:	4603      	mov	r3, r0
				}
				else if ((NULL
						== strstr((const char*) NULL_STR,
								(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
				{
					if ((NULL
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d021      	beq.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
							!= strstr((const char*) gu8arr_respBuffer,
									(const char*) gcst_ATCmdTable[len_ATCmdIdx].mu8arr_errString)))
					{
						sgu8_respCount = 0;
 800c16e:	4b1c      	ldr	r3, [pc, #112]	; (800c1e0 <mod_sendCmdGetRsp+0x538>)
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
						tm_clearResponseTime();
 800c174:	f7f4 f964 	bl	8000440 <tm_clearResponseTime>
//						tm_stopTimer();
						len_retStatus = E_RET_RSP_ERROR;
 800c178:	2303      	movs	r3, #3
 800c17a:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
						sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c17e:	4b19      	ldr	r3, [pc, #100]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c180:	2201      	movs	r2, #1
 800c182:	701a      	strb	r2, [r3, #0]
					tm_clearResponseTime();
					len_retStatus = E_RET_TIMEOUT_ERROR;
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
				}
			}
		break;
 800c184:	e01d      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>

				}
			}
			else
			{
				if (tm_getResponseTimeValue() == 0)
 800c186:	f7f4 f94f 	bl	8000428 <tm_getResponseTimeValue>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d110      	bne.n	800c1b2 <mod_sendCmdGetRsp+0x50a>
				{
					sgu8_respCount = 0;
 800c190:	4b13      	ldr	r3, [pc, #76]	; (800c1e0 <mod_sendCmdGetRsp+0x538>)
 800c192:	2200      	movs	r2, #0
 800c194:	701a      	strb	r2, [r3, #0]
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800c196:	480e      	ldr	r0, [pc, #56]	; (800c1d0 <mod_sendCmdGetRsp+0x528>)
 800c198:	2100      	movs	r1, #0
 800c19a:	2240      	movs	r2, #64	; 0x40
 800c19c:	f005 fad9 	bl	8011752 <memset>
					tm_clearResponseTime();
 800c1a0:	f7f4 f94e 	bl	8000440 <tm_clearResponseTime>
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800c1a4:	2306      	movs	r3, #6
 800c1a6:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
					sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c1aa:	4b0e      	ldr	r3, [pc, #56]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c1ac:	2201      	movs	r2, #1
 800c1ae:	701a      	strb	r2, [r3, #0]
				}
			}
		break;
 800c1b0:	e007      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>
 800c1b2:	e006      	b.n	800c1c2 <mod_sendCmdGetRsp+0x51a>

		default:
			sen_sendCmdGetRespState = E_AT_CMD_SEND_INPROG_STATE;
 800c1b4:	4b0b      	ldr	r3, [pc, #44]	; (800c1e4 <mod_sendCmdGetRsp+0x53c>)
 800c1b6:	2201      	movs	r2, #1
 800c1b8:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_INPROGRESS;
 800c1ba:	2304      	movs	r3, #4
 800c1bc:	f887 341f 	strb.w	r3, [r7, #1055]	; 0x41f
		break;
 800c1c0:	bf00      	nop
	}

	return len_retStatus;
 800c1c2:	f897 341f 	ldrb.w	r3, [r7, #1055]	; 0x41f
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	f207 4724 	addw	r7, r7, #1060	; 0x424
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd90      	pop	{r4, r7, pc}
 800c1d0:	1fff46cc 	.word	0x1fff46cc
 800c1d4:	08013e54 	.word	0x08013e54
 800c1d8:	08013e60 	.word	0x08013e60
 800c1dc:	1fff476e 	.word	0x1fff476e
 800c1e0:	1fff476c 	.word	0x1fff476c
 800c1e4:	1ffea4d9 	.word	0x1ffea4d9
 800c1e8:	08013e64 	.word	0x08013e64
 800c1ec:	1fff4770 	.word	0x1fff4770
 800c1f0:	1ffea4e8 	.word	0x1ffea4e8
 800c1f4:	08013e70 	.word	0x08013e70

0800c1f8 <mod_echoOff>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_echoOff(void)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c1fe:	2304      	movs	r3, #4
 800c200:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ECHO_OFF, (uint8_t *) NEW_LINE);
 800c202:	2003      	movs	r0, #3
 800c204:	4913      	ldr	r1, [pc, #76]	; (800c254 <mod_echoOff+0x5c>)
 800c206:	f7ff fd4f 	bl	800bca8 <mod_sendCmdGetRsp>
 800c20a:	4603      	mov	r3, r0
 800c20c:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c20e:	79fb      	ldrb	r3, [r7, #7]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d103      	bne.n	800c21c <mod_echoOff+0x24>
	{
		lsu8_retryCnt = 0;
 800c214:	4b10      	ldr	r3, [pc, #64]	; (800c258 <mod_echoOff+0x60>)
 800c216:	2200      	movs	r2, #0
 800c218:	701a      	strb	r2, [r3, #0]
 800c21a:	e016      	b.n	800c24a <mod_echoOff+0x52>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c21c:	79fb      	ldrb	r3, [r7, #7]
 800c21e:	2b04      	cmp	r3, #4
 800c220:	d013      	beq.n	800c24a <mod_echoOff+0x52>
	{
		lsu8_retryCnt++;
 800c222:	4b0d      	ldr	r3, [pc, #52]	; (800c258 <mod_echoOff+0x60>)
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	3301      	adds	r3, #1
 800c228:	b2da      	uxtb	r2, r3
 800c22a:	4b0b      	ldr	r3, [pc, #44]	; (800c258 <mod_echoOff+0x60>)
 800c22c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c22e:	4b0a      	ldr	r3, [pc, #40]	; (800c258 <mod_echoOff+0x60>)
 800c230:	781b      	ldrb	r3, [r3, #0]
 800c232:	2b02      	cmp	r3, #2
 800c234:	d802      	bhi.n	800c23c <mod_echoOff+0x44>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c236:	2304      	movs	r3, #4
 800c238:	71fb      	strb	r3, [r7, #7]
 800c23a:	e006      	b.n	800c24a <mod_echoOff+0x52>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c23c:	4b06      	ldr	r3, [pc, #24]	; (800c258 <mod_echoOff+0x60>)
 800c23e:	781b      	ldrb	r3, [r3, #0]
 800c240:	2b03      	cmp	r3, #3
 800c242:	d902      	bls.n	800c24a <mod_echoOff+0x52>
		{
			lsu8_retryCnt = 0;
 800c244:	4b04      	ldr	r3, [pc, #16]	; (800c258 <mod_echoOff+0x60>)
 800c246:	2200      	movs	r2, #0
 800c248:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c24a:	79fb      	ldrb	r3, [r7, #7]
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	3708      	adds	r7, #8
 800c250:	46bd      	mov	sp, r7
 800c252:	bd80      	pop	{r7, pc}
 800c254:	08013e74 	.word	0x08013e74
 800c258:	1fff477a 	.word	0x1fff477a

0800c25c <mod_setUrcPort>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setUrcPort(void)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b084      	sub	sp, #16
 800c260:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c262:	2304      	movs	r3, #4
 800c264:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "\"usbat\"\r\n";
 800c266:	4a17      	ldr	r2, [pc, #92]	; (800c2c4 <mod_setUrcPort+0x68>)
 800c268:	1d3b      	adds	r3, r7, #4
 800c26a:	ca07      	ldmia	r2, {r0, r1, r2}
 800c26c:	c303      	stmia	r3!, {r0, r1}
 800c26e:	801a      	strh	r2, [r3, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SET_URC_PRT, lu8arr_param);
 800c270:	1d3b      	adds	r3, r7, #4
 800c272:	2002      	movs	r0, #2
 800c274:	4619      	mov	r1, r3
 800c276:	f7ff fd17 	bl	800bca8 <mod_sendCmdGetRsp>
 800c27a:	4603      	mov	r3, r0
 800c27c:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c27e:	7bfb      	ldrb	r3, [r7, #15]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d103      	bne.n	800c28c <mod_setUrcPort+0x30>
	{
		lsu8_retryCnt = 0;
 800c284:	4b10      	ldr	r3, [pc, #64]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c286:	2200      	movs	r2, #0
 800c288:	701a      	strb	r2, [r3, #0]
 800c28a:	e016      	b.n	800c2ba <mod_setUrcPort+0x5e>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c28c:	7bfb      	ldrb	r3, [r7, #15]
 800c28e:	2b04      	cmp	r3, #4
 800c290:	d013      	beq.n	800c2ba <mod_setUrcPort+0x5e>
	{
		lsu8_retryCnt++;
 800c292:	4b0d      	ldr	r3, [pc, #52]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c294:	781b      	ldrb	r3, [r3, #0]
 800c296:	3301      	adds	r3, #1
 800c298:	b2da      	uxtb	r2, r3
 800c29a:	4b0b      	ldr	r3, [pc, #44]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c29c:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c29e:	4b0a      	ldr	r3, [pc, #40]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	2b02      	cmp	r3, #2
 800c2a4:	d802      	bhi.n	800c2ac <mod_setUrcPort+0x50>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c2a6:	2304      	movs	r3, #4
 800c2a8:	73fb      	strb	r3, [r7, #15]
 800c2aa:	e006      	b.n	800c2ba <mod_setUrcPort+0x5e>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c2ac:	4b06      	ldr	r3, [pc, #24]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	2b03      	cmp	r3, #3
 800c2b2:	d902      	bls.n	800c2ba <mod_setUrcPort+0x5e>
		{
			lsu8_retryCnt = 0;
 800c2b4:	4b04      	ldr	r3, [pc, #16]	; (800c2c8 <mod_setUrcPort+0x6c>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c2ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2bc:	4618      	mov	r0, r3
 800c2be:	3710      	adds	r7, #16
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	bd80      	pop	{r7, pc}
 800c2c4:	08013e78 	.word	0x08013e78
 800c2c8:	1fff477b 	.word	0x1fff477b

0800c2cc <mod_setFlowCtrl>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_setFlowCtrl(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c2d2:	2304      	movs	r3, #4
 800c2d4:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "0,0\r\n";	//0,0 ---> none, none
 800c2d6:	4a1a      	ldr	r2, [pc, #104]	; (800c340 <mod_setFlowCtrl+0x74>)
 800c2d8:	1d3b      	adds	r3, r7, #4
 800c2da:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c2de:	6018      	str	r0, [r3, #0]
 800c2e0:	3304      	adds	r3, #4
 800c2e2:	8019      	strh	r1, [r3, #0]
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	817b      	strh	r3, [r7, #10]
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	81bb      	strh	r3, [r7, #12]
	//uint8_t lu8arr_param[10] = "2,2\r\n";	//0,0 ---> RTS, CTS

	len_retStatus = mod_sendCmdGetRsp(E_IDX_HW_FLWCTRL, lu8arr_param);
 800c2ec:	1d3b      	adds	r3, r7, #4
 800c2ee:	2004      	movs	r0, #4
 800c2f0:	4619      	mov	r1, r3
 800c2f2:	f7ff fcd9 	bl	800bca8 <mod_sendCmdGetRsp>
 800c2f6:	4603      	mov	r3, r0
 800c2f8:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d103      	bne.n	800c308 <mod_setFlowCtrl+0x3c>
	{
		lsu8_retryCnt = 0;
 800c300:	4b10      	ldr	r3, [pc, #64]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c302:	2200      	movs	r2, #0
 800c304:	701a      	strb	r2, [r3, #0]
 800c306:	e016      	b.n	800c336 <mod_setFlowCtrl+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	2b04      	cmp	r3, #4
 800c30c:	d013      	beq.n	800c336 <mod_setFlowCtrl+0x6a>
	{
		lsu8_retryCnt++;
 800c30e:	4b0d      	ldr	r3, [pc, #52]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c310:	781b      	ldrb	r3, [r3, #0]
 800c312:	3301      	adds	r3, #1
 800c314:	b2da      	uxtb	r2, r3
 800c316:	4b0b      	ldr	r3, [pc, #44]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c318:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c31a:	4b0a      	ldr	r3, [pc, #40]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d802      	bhi.n	800c328 <mod_setFlowCtrl+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c322:	2304      	movs	r3, #4
 800c324:	73fb      	strb	r3, [r7, #15]
 800c326:	e006      	b.n	800c336 <mod_setFlowCtrl+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c328:	4b06      	ldr	r3, [pc, #24]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c32a:	781b      	ldrb	r3, [r3, #0]
 800c32c:	2b03      	cmp	r3, #3
 800c32e:	d902      	bls.n	800c336 <mod_setFlowCtrl+0x6a>
		{
			lsu8_retryCnt = 0;
 800c330:	4b04      	ldr	r3, [pc, #16]	; (800c344 <mod_setFlowCtrl+0x78>)
 800c332:	2200      	movs	r2, #0
 800c334:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	08013e84 	.word	0x08013e84
 800c344:	1fff477c 	.word	0x1fff477c

0800c348 <mod_extractModInfo>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractModInfo(void)
{
 800c348:	b5b0      	push	{r4, r5, r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c34e:	2304      	movs	r3, #4
 800c350:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c352:	2300      	movs	r3, #0
 800c354:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c356:	2300      	movs	r3, #0
 800c358:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FEATCH_MOD_INFO, (uint8_t *) NEW_LINE);
 800c35a:	2005      	movs	r0, #5
 800c35c:	4927      	ldr	r1, [pc, #156]	; (800c3fc <mod_extractModInfo+0xb4>)
 800c35e:	f7ff fca3 	bl	800bca8 <mod_sendCmdGetRsp>
 800c362:	4603      	mov	r3, r0
 800c364:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c366:	7bfb      	ldrb	r3, [r7, #15]
 800c368:	2b00      	cmp	r3, #0
 800c36a:	d12b      	bne.n	800c3c4 <mod_extractModInfo+0x7c>
	{
		lsu8_retryCnt = 0;
 800c36c:	4b24      	ldr	r3, [pc, #144]	; (800c400 <mod_extractModInfo+0xb8>)
 800c36e:	2200      	movs	r2, #0
 800c370:	701a      	strb	r2, [r3, #0]
		if ((NULL != strstr((const char*) gu8arr_respBuffer, (const char*) PRODCUT_NAME)))
 800c372:	4824      	ldr	r0, [pc, #144]	; (800c404 <mod_extractModInfo+0xbc>)
 800c374:	4924      	ldr	r1, [pc, #144]	; (800c408 <mod_extractModInfo+0xc0>)
 800c376:	f005 fd0e 	bl	8011d96 <strstr>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d01e      	beq.n	800c3be <mod_extractModInfo+0x76>
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c380:	1d3b      	adds	r3, r7, #4
 800c382:	4820      	ldr	r0, [pc, #128]	; (800c404 <mod_extractModInfo+0xbc>)
 800c384:	4921      	ldr	r1, [pc, #132]	; (800c40c <mod_extractModInfo+0xc4>)
 800c386:	461a      	mov	r2, r3
 800c388:	f005 fd7b 	bl	8011e82 <strtok_r>
 800c38c:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	3301      	adds	r3, #1
 800c392:	607b      	str	r3, [r7, #4]
			if (NULL != lu8p_temp)
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00e      	beq.n	800c3b8 <mod_extractModInfo+0x70>
			{
				memcpy(gu8arr_productRevision, lu8p_saveptr, PRO_REVISION_SIZE);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a1c      	ldr	r2, [pc, #112]	; (800c410 <mod_extractModInfo+0xc8>)
 800c39e:	4614      	mov	r4, r2
 800c3a0:	461d      	mov	r5, r3
 800c3a2:	6828      	ldr	r0, [r5, #0]
 800c3a4:	6869      	ldr	r1, [r5, #4]
 800c3a6:	68aa      	ldr	r2, [r5, #8]
 800c3a8:	68eb      	ldr	r3, [r5, #12]
 800c3aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c3ac:	8a2b      	ldrh	r3, [r5, #16]
 800c3ae:	7caa      	ldrb	r2, [r5, #18]
 800c3b0:	8023      	strh	r3, [r4, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	70a3      	strb	r3, [r4, #2]
 800c3b6:	e01c      	b.n	800c3f2 <mod_extractModInfo+0xaa>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c3b8:	2302      	movs	r3, #2
 800c3ba:	73fb      	strb	r3, [r7, #15]
 800c3bc:	e019      	b.n	800c3f2 <mod_extractModInfo+0xaa>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c3be:	2302      	movs	r3, #2
 800c3c0:	73fb      	strb	r3, [r7, #15]
 800c3c2:	e016      	b.n	800c3f2 <mod_extractModInfo+0xaa>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c3c4:	7bfb      	ldrb	r3, [r7, #15]
 800c3c6:	2b04      	cmp	r3, #4
 800c3c8:	d013      	beq.n	800c3f2 <mod_extractModInfo+0xaa>
	{
		lsu8_retryCnt++;
 800c3ca:	4b0d      	ldr	r3, [pc, #52]	; (800c400 <mod_extractModInfo+0xb8>)
 800c3cc:	781b      	ldrb	r3, [r3, #0]
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	b2da      	uxtb	r2, r3
 800c3d2:	4b0b      	ldr	r3, [pc, #44]	; (800c400 <mod_extractModInfo+0xb8>)
 800c3d4:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c3d6:	4b0a      	ldr	r3, [pc, #40]	; (800c400 <mod_extractModInfo+0xb8>)
 800c3d8:	781b      	ldrb	r3, [r3, #0]
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d802      	bhi.n	800c3e4 <mod_extractModInfo+0x9c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c3de:	2304      	movs	r3, #4
 800c3e0:	73fb      	strb	r3, [r7, #15]
 800c3e2:	e006      	b.n	800c3f2 <mod_extractModInfo+0xaa>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c3e4:	4b06      	ldr	r3, [pc, #24]	; (800c400 <mod_extractModInfo+0xb8>)
 800c3e6:	781b      	ldrb	r3, [r3, #0]
 800c3e8:	2b03      	cmp	r3, #3
 800c3ea:	d902      	bls.n	800c3f2 <mod_extractModInfo+0xaa>
		{
			lsu8_retryCnt = 0;
 800c3ec:	4b04      	ldr	r3, [pc, #16]	; (800c400 <mod_extractModInfo+0xb8>)
 800c3ee:	2200      	movs	r2, #0
 800c3f0:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c3f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	3710      	adds	r7, #16
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bdb0      	pop	{r4, r5, r7, pc}
 800c3fc:	08013e74 	.word	0x08013e74
 800c400:	1fff477d 	.word	0x1fff477d
 800c404:	1fff46cc 	.word	0x1fff46cc
 800c408:	08013e90 	.word	0x08013e90
 800c40c:	08013e60 	.word	0x08013e60
 800c410:	1fff470c 	.word	0x1fff470c

0800c414 <mod_enableSimDetection>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimDetection(void)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c41a:	2304      	movs	r3, #4
 800c41c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1,0\r\n";
 800c41e:	4a1a      	ldr	r2, [pc, #104]	; (800c488 <mod_enableSimDetection+0x74>)
 800c420:	1d3b      	adds	r3, r7, #4
 800c422:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c426:	6018      	str	r0, [r3, #0]
 800c428:	3304      	adds	r3, #4
 800c42a:	8019      	strh	r1, [r3, #0]
 800c42c:	2300      	movs	r3, #0
 800c42e:	817b      	strh	r3, [r7, #10]
 800c430:	2300      	movs	r3, #0
 800c432:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_DETECTION, lu8arr_param);
 800c434:	1d3b      	adds	r3, r7, #4
 800c436:	2006      	movs	r0, #6
 800c438:	4619      	mov	r1, r3
 800c43a:	f7ff fc35 	bl	800bca8 <mod_sendCmdGetRsp>
 800c43e:	4603      	mov	r3, r0
 800c440:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c442:	7bfb      	ldrb	r3, [r7, #15]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d103      	bne.n	800c450 <mod_enableSimDetection+0x3c>
	{
		lsu8_retryCnt = 0;
 800c448:	4b10      	ldr	r3, [pc, #64]	; (800c48c <mod_enableSimDetection+0x78>)
 800c44a:	2200      	movs	r2, #0
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e016      	b.n	800c47e <mod_enableSimDetection+0x6a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c450:	7bfb      	ldrb	r3, [r7, #15]
 800c452:	2b04      	cmp	r3, #4
 800c454:	d013      	beq.n	800c47e <mod_enableSimDetection+0x6a>
	{
		lsu8_retryCnt++;
 800c456:	4b0d      	ldr	r3, [pc, #52]	; (800c48c <mod_enableSimDetection+0x78>)
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	3301      	adds	r3, #1
 800c45c:	b2da      	uxtb	r2, r3
 800c45e:	4b0b      	ldr	r3, [pc, #44]	; (800c48c <mod_enableSimDetection+0x78>)
 800c460:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c462:	4b0a      	ldr	r3, [pc, #40]	; (800c48c <mod_enableSimDetection+0x78>)
 800c464:	781b      	ldrb	r3, [r3, #0]
 800c466:	2b02      	cmp	r3, #2
 800c468:	d802      	bhi.n	800c470 <mod_enableSimDetection+0x5c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c46a:	2304      	movs	r3, #4
 800c46c:	73fb      	strb	r3, [r7, #15]
 800c46e:	e006      	b.n	800c47e <mod_enableSimDetection+0x6a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <mod_enableSimDetection+0x78>)
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	2b03      	cmp	r3, #3
 800c476:	d902      	bls.n	800c47e <mod_enableSimDetection+0x6a>
		{
			lsu8_retryCnt = 0;
 800c478:	4b04      	ldr	r3, [pc, #16]	; (800c48c <mod_enableSimDetection+0x78>)
 800c47a:	2200      	movs	r2, #0
 800c47c:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c47e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	08013e9c 	.word	0x08013e9c
 800c48c:	1fff477e 	.word	0x1fff477e

0800c490 <mod_enableSimStatusReport>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_enableSimStatusReport(void)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c496:	2304      	movs	r3, #4
 800c498:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[10] = "1\r\n";
 800c49a:	4b18      	ldr	r3, [pc, #96]	; (800c4fc <mod_enableSimStatusReport+0x6c>)
 800c49c:	607b      	str	r3, [r7, #4]
 800c49e:	2300      	movs	r3, #0
 800c4a0:	60bb      	str	r3, [r7, #8]
 800c4a2:	2300      	movs	r3, #0
 800c4a4:	81bb      	strh	r3, [r7, #12]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_SIM_STATUS, lu8arr_param);
 800c4a6:	1d3b      	adds	r3, r7, #4
 800c4a8:	2007      	movs	r0, #7
 800c4aa:	4619      	mov	r1, r3
 800c4ac:	f7ff fbfc 	bl	800bca8 <mod_sendCmdGetRsp>
 800c4b0:	4603      	mov	r3, r0
 800c4b2:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c4b4:	7bfb      	ldrb	r3, [r7, #15]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d103      	bne.n	800c4c2 <mod_enableSimStatusReport+0x32>
	{
		lsu8_retryCnt = 0;
 800c4ba:	4b11      	ldr	r3, [pc, #68]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	701a      	strb	r2, [r3, #0]
 800c4c0:	e016      	b.n	800c4f0 <mod_enableSimStatusReport+0x60>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c4c2:	7bfb      	ldrb	r3, [r7, #15]
 800c4c4:	2b04      	cmp	r3, #4
 800c4c6:	d013      	beq.n	800c4f0 <mod_enableSimStatusReport+0x60>
	{
		lsu8_retryCnt++;
 800c4c8:	4b0d      	ldr	r3, [pc, #52]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	3301      	adds	r3, #1
 800c4ce:	b2da      	uxtb	r2, r3
 800c4d0:	4b0b      	ldr	r3, [pc, #44]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4d2:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c4d4:	4b0a      	ldr	r3, [pc, #40]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4d6:	781b      	ldrb	r3, [r3, #0]
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d802      	bhi.n	800c4e2 <mod_enableSimStatusReport+0x52>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c4dc:	2304      	movs	r3, #4
 800c4de:	73fb      	strb	r3, [r7, #15]
 800c4e0:	e006      	b.n	800c4f0 <mod_enableSimStatusReport+0x60>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c4e2:	4b07      	ldr	r3, [pc, #28]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4e4:	781b      	ldrb	r3, [r3, #0]
 800c4e6:	2b03      	cmp	r3, #3
 800c4e8:	d902      	bls.n	800c4f0 <mod_enableSimStatusReport+0x60>
		{
			lsu8_retryCnt = 0;
 800c4ea:	4b05      	ldr	r3, [pc, #20]	; (800c500 <mod_enableSimStatusReport+0x70>)
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	000a0d31 	.word	0x000a0d31
 800c500:	1fff477f 	.word	0x1fff477f

0800c504 <mod_checkSimStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_checkSimStatus(void)
{
 800c504:	b580      	push	{r7, lr}
 800c506:	b084      	sub	sp, #16
 800c508:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c50a:	2304      	movs	r3, #4
 800c50c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c50e:	2300      	movs	r3, #0
 800c510:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c512:	2300      	movs	r3, #0
 800c514:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
 800c516:	2008      	movs	r0, #8
 800c518:	4933      	ldr	r1, [pc, #204]	; (800c5e8 <mod_checkSimStatus+0xe4>)
 800c51a:	f7ff fbc5 	bl	800bca8 <mod_sendCmdGetRsp>
 800c51e:	4603      	mov	r3, r0
 800c520:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c522:	7bfb      	ldrb	r3, [r7, #15]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d143      	bne.n	800c5b0 <mod_checkSimStatus+0xac>
	{
		lsu8_retryCnt = 0;
 800c528:	4b30      	ldr	r3, [pc, #192]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c52a:	2200      	movs	r2, #0
 800c52c:	701a      	strb	r2, [r3, #0]
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c52e:	4830      	ldr	r0, [pc, #192]	; (800c5f0 <mod_checkSimStatus+0xec>)
 800c530:	4930      	ldr	r1, [pc, #192]	; (800c5f4 <mod_checkSimStatus+0xf0>)
 800c532:	f005 fc30 	bl	8011d96 <strstr>
 800c536:	4603      	mov	r3, r0

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CHECK_SIM_STATUS, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		if ((NULL
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d036      	beq.n	800c5aa <mod_checkSimStatus+0xa6>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_CHECK_SIM_STATUS].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c53c:	1d3b      	adds	r3, r7, #4
 800c53e:	482c      	ldr	r0, [pc, #176]	; (800c5f0 <mod_checkSimStatus+0xec>)
 800c540:	492d      	ldr	r1, [pc, #180]	; (800c5f8 <mod_checkSimStatus+0xf4>)
 800c542:	461a      	mov	r2, r3
 800c544:	f005 fc9d 	bl	8011e82 <strtok_r>
 800c548:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			if (NULL != lu8p_temp)
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d029      	beq.n	800c5a4 <mod_checkSimStatus+0xa0>
			{
				lu8p_temp = (uint8_t *) strchr((const char*) lu8p_saveptr, ',');
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	4618      	mov	r0, r3
 800c554:	212c      	movs	r1, #44	; 0x2c
 800c556:	f005 fbee 	bl	8011d36 <strchr>
 800c55a:	60b8      	str	r0, [r7, #8]
				if (NULL != lu8p_temp)
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d01d      	beq.n	800c59e <mod_checkSimStatus+0x9a>
				{
					lu8p_temp = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c562:	1d3b      	adds	r3, r7, #4
 800c564:	2000      	movs	r0, #0
 800c566:	4925      	ldr	r1, [pc, #148]	; (800c5fc <mod_checkSimStatus+0xf8>)
 800c568:	461a      	mov	r2, r3
 800c56a:	f005 fc8a 	bl	8011e82 <strtok_r>
 800c56e:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_saveptr);

					gst_deviceStatus.mb_isSimInserted = (uint8_t) atoi(
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	4618      	mov	r0, r3
 800c574:	f005 f8b2 	bl	80116dc <atoi>
 800c578:	4603      	mov	r3, r0
 800c57a:	b2db      	uxtb	r3, r3
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bf14      	ite	ne
 800c580:	2301      	movne	r3, #1
 800c582:	2300      	moveq	r3, #0
 800c584:	b2da      	uxtb	r2, r3
 800c586:	4b1e      	ldr	r3, [pc, #120]	; (800c600 <mod_checkSimStatus+0xfc>)
 800c588:	705a      	strb	r2, [r3, #1]
							(const char*) lu8p_saveptr);

					if (true == gst_deviceStatus.mb_isSimInserted)
 800c58a:	4b1d      	ldr	r3, [pc, #116]	; (800c600 <mod_checkSimStatus+0xfc>)
 800c58c:	785b      	ldrb	r3, [r3, #1]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <mod_checkSimStatus+0x94>
					{
						len_retStatus = E_RET_SUCCESS;
 800c592:	2300      	movs	r3, #0
 800c594:	73fb      	strb	r3, [r7, #15]
 800c596:	e022      	b.n	800c5de <mod_checkSimStatus+0xda>
					}
					else
					{
						len_retStatus = E_RET_INPROGRESS;
 800c598:	2304      	movs	r3, #4
 800c59a:	73fb      	strb	r3, [r7, #15]
 800c59c:	e01f      	b.n	800c5de <mod_checkSimStatus+0xda>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800c59e:	2302      	movs	r3, #2
 800c5a0:	73fb      	strb	r3, [r7, #15]
 800c5a2:	e01c      	b.n	800c5de <mod_checkSimStatus+0xda>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c5a4:	2302      	movs	r3, #2
 800c5a6:	73fb      	strb	r3, [r7, #15]
 800c5a8:	e019      	b.n	800c5de <mod_checkSimStatus+0xda>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c5aa:	2302      	movs	r3, #2
 800c5ac:	73fb      	strb	r3, [r7, #15]
 800c5ae:	e016      	b.n	800c5de <mod_checkSimStatus+0xda>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c5b0:	7bfb      	ldrb	r3, [r7, #15]
 800c5b2:	2b04      	cmp	r3, #4
 800c5b4:	d013      	beq.n	800c5de <mod_checkSimStatus+0xda>
	{
		lsu8_retryCnt++;
 800c5b6:	4b0d      	ldr	r3, [pc, #52]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	3301      	adds	r3, #1
 800c5bc:	b2da      	uxtb	r2, r3
 800c5be:	4b0b      	ldr	r3, [pc, #44]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c5c0:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c5c2:	4b0a      	ldr	r3, [pc, #40]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	2b02      	cmp	r3, #2
 800c5c8:	d802      	bhi.n	800c5d0 <mod_checkSimStatus+0xcc>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c5ca:	2304      	movs	r3, #4
 800c5cc:	73fb      	strb	r3, [r7, #15]
 800c5ce:	e006      	b.n	800c5de <mod_checkSimStatus+0xda>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c5d0:	4b06      	ldr	r3, [pc, #24]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	2b03      	cmp	r3, #3
 800c5d6:	d902      	bls.n	800c5de <mod_checkSimStatus+0xda>
		{
			lsu8_retryCnt = 0;
 800c5d8:	4b04      	ldr	r3, [pc, #16]	; (800c5ec <mod_checkSimStatus+0xe8>)
 800c5da:	2200      	movs	r2, #0
 800c5dc:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	08013e74 	.word	0x08013e74
 800c5ec:	1fff4780 	.word	0x1fff4780
 800c5f0:	1fff46cc 	.word	0x1fff46cc
 800c5f4:	1ffece42 	.word	0x1ffece42
 800c5f8:	08013e60 	.word	0x08013e60
 800c5fc:	08013ea8 	.word	0x08013ea8
 800c600:	1ffea4dc 	.word	0x1ffea4dc

0800c604 <mod_cpinCheck>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_cpinCheck(void)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b082      	sub	sp, #8
 800c608:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c60a:	2304      	movs	r3, #4
 800c60c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800c60e:	2300      	movs	r3, #0
 800c610:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CPIN_CHECK, (uint8_t *) NEW_LINE);
 800c612:	2009      	movs	r0, #9
 800c614:	491a      	ldr	r1, [pc, #104]	; (800c680 <mod_cpinCheck+0x7c>)
 800c616:	f7ff fb47 	bl	800bca8 <mod_sendCmdGetRsp>
 800c61a:	4603      	mov	r3, r0
 800c61c:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800c61e:	79fb      	ldrb	r3, [r7, #7]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d110      	bne.n	800c646 <mod_cpinCheck+0x42>
	{
		lsu8_retryCnt = 0;
 800c624:	4b17      	ldr	r3, [pc, #92]	; (800c684 <mod_cpinCheck+0x80>)
 800c626:	2200      	movs	r2, #0
 800c628:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "READY");
 800c62a:	4817      	ldr	r0, [pc, #92]	; (800c688 <mod_cpinCheck+0x84>)
 800c62c:	4917      	ldr	r1, [pc, #92]	; (800c68c <mod_cpinCheck+0x88>)
 800c62e:	f005 fbb2 	bl	8011d96 <strstr>
 800c632:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d002      	beq.n	800c640 <mod_cpinCheck+0x3c>
		{
			len_retStatus = E_RET_SUCCESS;
 800c63a:	2300      	movs	r3, #0
 800c63c:	71fb      	strb	r3, [r7, #7]
 800c63e:	e019      	b.n	800c674 <mod_cpinCheck+0x70>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c640:	2302      	movs	r3, #2
 800c642:	71fb      	strb	r3, [r7, #7]
 800c644:	e016      	b.n	800c674 <mod_cpinCheck+0x70>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c646:	79fb      	ldrb	r3, [r7, #7]
 800c648:	2b04      	cmp	r3, #4
 800c64a:	d013      	beq.n	800c674 <mod_cpinCheck+0x70>
	{
		lsu8_retryCnt++;
 800c64c:	4b0d      	ldr	r3, [pc, #52]	; (800c684 <mod_cpinCheck+0x80>)
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	3301      	adds	r3, #1
 800c652:	b2da      	uxtb	r2, r3
 800c654:	4b0b      	ldr	r3, [pc, #44]	; (800c684 <mod_cpinCheck+0x80>)
 800c656:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c658:	4b0a      	ldr	r3, [pc, #40]	; (800c684 <mod_cpinCheck+0x80>)
 800c65a:	781b      	ldrb	r3, [r3, #0]
 800c65c:	2b02      	cmp	r3, #2
 800c65e:	d802      	bhi.n	800c666 <mod_cpinCheck+0x62>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c660:	2304      	movs	r3, #4
 800c662:	71fb      	strb	r3, [r7, #7]
 800c664:	e006      	b.n	800c674 <mod_cpinCheck+0x70>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c666:	4b07      	ldr	r3, [pc, #28]	; (800c684 <mod_cpinCheck+0x80>)
 800c668:	781b      	ldrb	r3, [r3, #0]
 800c66a:	2b03      	cmp	r3, #3
 800c66c:	d902      	bls.n	800c674 <mod_cpinCheck+0x70>
		{
			lsu8_retryCnt = 0;
 800c66e:	4b05      	ldr	r3, [pc, #20]	; (800c684 <mod_cpinCheck+0x80>)
 800c670:	2200      	movs	r2, #0
 800c672:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c674:	79fb      	ldrb	r3, [r7, #7]
}
 800c676:	4618      	mov	r0, r3
 800c678:	3708      	adds	r7, #8
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	08013e74 	.word	0x08013e74
 800c684:	1fff4781 	.word	0x1fff4781
 800c688:	1fff46cc 	.word	0x1fff46cc
 800c68c:	08013eac 	.word	0x08013eac

0800c690 <mod_extractIMEI>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractIMEI(void)
{
 800c690:	b590      	push	{r4, r7, lr}
 800c692:	b087      	sub	sp, #28
 800c694:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c696:	2304      	movs	r3, #4
 800c698:	75fb      	strb	r3, [r7, #23]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8_index = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	75bb      	strb	r3, [r7, #22]
	uint8_t lu8ar_TempIMEI[IMEI_SIZE] = { 0 };
 800c69e:	1d3b      	adds	r3, r7, #4
 800c6a0:	2200      	movs	r2, #0
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	3304      	adds	r3, #4
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	601a      	str	r2, [r3, #0]
 800c6aa:	3304      	adds	r3, #4
 800c6ac:	2200      	movs	r2, #0
 800c6ae:	601a      	str	r2, [r3, #0]
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	801a      	strh	r2, [r3, #0]
 800c6b6:	3302      	adds	r3, #2
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	3301      	adds	r3, #1

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_IMEI, (uint8_t *) NEW_LINE);
 800c6be:	200a      	movs	r0, #10
 800c6c0:	492c      	ldr	r1, [pc, #176]	; (800c774 <mod_extractIMEI+0xe4>)
 800c6c2:	f7ff faf1 	bl	800bca8 <mod_sendCmdGetRsp>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	75fb      	strb	r3, [r7, #23]
	if (E_RET_SUCCESS == len_retStatus)
 800c6ca:	7dfb      	ldrb	r3, [r7, #23]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d134      	bne.n	800c73a <mod_extractIMEI+0xaa>
	{
		lsu8_retryCnt = 0;
 800c6d0:	4b29      	ldr	r3, [pc, #164]	; (800c778 <mod_extractIMEI+0xe8>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	701a      	strb	r2, [r3, #0]
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
 800c6d6:	1d3b      	adds	r3, r7, #4
 800c6d8:	4618      	mov	r0, r3
 800c6da:	4928      	ldr	r1, [pc, #160]	; (800c77c <mod_extractIMEI+0xec>)
 800c6dc:	220f      	movs	r2, #15
 800c6de:	f005 f82d 	bl	801173c <memcpy>
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	75bb      	strb	r3, [r7, #22]
 800c6e6:	e015      	b.n	800c714 <mod_extractIMEI+0x84>
		{
			if (!('0' <= lu8ar_TempIMEI[lu8_index] && '9' >= lu8ar_TempIMEI[lu8_index]))
 800c6e8:	7dbb      	ldrb	r3, [r7, #22]
 800c6ea:	f107 0218 	add.w	r2, r7, #24
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c6f4:	2b2f      	cmp	r3, #47	; 0x2f
 800c6f6:	d907      	bls.n	800c708 <mod_extractIMEI+0x78>
 800c6f8:	7dbb      	ldrb	r3, [r7, #22]
 800c6fa:	f107 0218 	add.w	r2, r7, #24
 800c6fe:	4413      	add	r3, r2
 800c700:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 800c704:	2b39      	cmp	r3, #57	; 0x39
 800c706:	d902      	bls.n	800c70e <mod_extractIMEI+0x7e>
			{
				len_retStatus = E_RET_FAILED;
 800c708:	2302      	movs	r3, #2
 800c70a:	75fb      	strb	r3, [r7, #23]
				break;
 800c70c:	e005      	b.n	800c71a <mod_extractIMEI+0x8a>
	if (E_RET_SUCCESS == len_retStatus)
	{
		lsu8_retryCnt = 0;
		memcpy((char *) &lu8ar_TempIMEI[0], (const char *) &gu8arr_respBuffer[2],
		IMEI_SIZE);
		for (lu8_index = 0; lu8_index < IMEI_SIZE; lu8_index++)
 800c70e:	7dbb      	ldrb	r3, [r7, #22]
 800c710:	3301      	adds	r3, #1
 800c712:	75bb      	strb	r3, [r7, #22]
 800c714:	7dbb      	ldrb	r3, [r7, #22]
 800c716:	2b0e      	cmp	r3, #14
 800c718:	d9e6      	bls.n	800c6e8 <mod_extractIMEI+0x58>
			{
				len_retStatus = E_RET_FAILED;
				break;
			}
		}
		if (lu8_index >= IMEI_SIZE)
 800c71a:	7dbb      	ldrb	r3, [r7, #22]
 800c71c:	2b0e      	cmp	r3, #14
 800c71e:	d923      	bls.n	800c768 <mod_extractIMEI+0xd8>
		{
			memcpy((char *) &gu8arr_IMEINum, (const char *) &gu8arr_respBuffer[2],
 800c720:	4b17      	ldr	r3, [pc, #92]	; (800c780 <mod_extractIMEI+0xf0>)
 800c722:	4a18      	ldr	r2, [pc, #96]	; (800c784 <mod_extractIMEI+0xf4>)
 800c724:	1c94      	adds	r4, r2, #2
 800c726:	6820      	ldr	r0, [r4, #0]
 800c728:	6861      	ldr	r1, [r4, #4]
 800c72a:	68a2      	ldr	r2, [r4, #8]
 800c72c:	c307      	stmia	r3!, {r0, r1, r2}
 800c72e:	89a2      	ldrh	r2, [r4, #12]
 800c730:	7ba1      	ldrb	r1, [r4, #14]
 800c732:	801a      	strh	r2, [r3, #0]
 800c734:	460a      	mov	r2, r1
 800c736:	709a      	strb	r2, [r3, #2]
 800c738:	e016      	b.n	800c768 <mod_extractIMEI+0xd8>
			IMEI_SIZE);	//\r\n skipped
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c73a:	7dfb      	ldrb	r3, [r7, #23]
 800c73c:	2b04      	cmp	r3, #4
 800c73e:	d013      	beq.n	800c768 <mod_extractIMEI+0xd8>
	{
		lsu8_retryCnt++;
 800c740:	4b0d      	ldr	r3, [pc, #52]	; (800c778 <mod_extractIMEI+0xe8>)
 800c742:	781b      	ldrb	r3, [r3, #0]
 800c744:	3301      	adds	r3, #1
 800c746:	b2da      	uxtb	r2, r3
 800c748:	4b0b      	ldr	r3, [pc, #44]	; (800c778 <mod_extractIMEI+0xe8>)
 800c74a:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c74c:	4b0a      	ldr	r3, [pc, #40]	; (800c778 <mod_extractIMEI+0xe8>)
 800c74e:	781b      	ldrb	r3, [r3, #0]
 800c750:	2b02      	cmp	r3, #2
 800c752:	d802      	bhi.n	800c75a <mod_extractIMEI+0xca>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c754:	2304      	movs	r3, #4
 800c756:	75fb      	strb	r3, [r7, #23]
 800c758:	e006      	b.n	800c768 <mod_extractIMEI+0xd8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c75a:	4b07      	ldr	r3, [pc, #28]	; (800c778 <mod_extractIMEI+0xe8>)
 800c75c:	781b      	ldrb	r3, [r3, #0]
 800c75e:	2b03      	cmp	r3, #3
 800c760:	d902      	bls.n	800c768 <mod_extractIMEI+0xd8>
		{
			lsu8_retryCnt = 0;
 800c762:	4b05      	ldr	r3, [pc, #20]	; (800c778 <mod_extractIMEI+0xe8>)
 800c764:	2200      	movs	r2, #0
 800c766:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c768:	7dfb      	ldrb	r3, [r7, #23]
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	371c      	adds	r7, #28
 800c76e:	46bd      	mov	sp, r7
 800c770:	bd90      	pop	{r4, r7, pc}
 800c772:	bf00      	nop
 800c774:	08013e74 	.word	0x08013e74
 800c778:	1fff4782 	.word	0x1fff4782
 800c77c:	1fff46ce 	.word	0x1fff46ce
 800c780:	1fff4720 	.word	0x1fff4720
 800c784:	1fff46cc 	.word	0x1fff46cc

0800c788 <mod_extractCCID>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractCCID(void)
{
 800c788:	b5b0      	push	{r4, r5, r7, lr}
 800c78a:	b084      	sub	sp, #16
 800c78c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c78e:	2304      	movs	r3, #4
 800c790:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c792:	2300      	movs	r3, #0
 800c794:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c796:	2300      	movs	r3, #0
 800c798:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
 800c79a:	200b      	movs	r0, #11
 800c79c:	4927      	ldr	r1, [pc, #156]	; (800c83c <mod_extractCCID+0xb4>)
 800c79e:	f7ff fa83 	bl	800bca8 <mod_sendCmdGetRsp>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c7a6:	7bfb      	ldrb	r3, [r7, #15]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d12a      	bne.n	800c802 <mod_extractCCID+0x7a>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c7ac:	4824      	ldr	r0, [pc, #144]	; (800c840 <mod_extractCCID+0xb8>)
 800c7ae:	4925      	ldr	r1, [pc, #148]	; (800c844 <mod_extractCCID+0xbc>)
 800c7b0:	f005 faf1 	bl	8011d96 <strstr>
 800c7b4:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_CCID, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d020      	beq.n	800c7fc <mod_extractCCID+0x74>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_CCID].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c7ba:	1d3b      	adds	r3, r7, #4
 800c7bc:	4820      	ldr	r0, [pc, #128]	; (800c840 <mod_extractCCID+0xb8>)
 800c7be:	4922      	ldr	r1, [pc, #136]	; (800c848 <mod_extractCCID+0xc0>)
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	f005 fb5e 	bl	8011e82 <strtok_r>
 800c7c6:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);
			lu8p_saveptr++;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3301      	adds	r3, #1
 800c7cc:	607b      	str	r3, [r7, #4]

			if (NULL != lu8p_saveptr)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d010      	beq.n	800c7f6 <mod_extractCCID+0x6e>
			{
				memset(gu8arr_CCIDNum, 0, sizeof(gu8arr_CCIDNum));
 800c7d4:	481d      	ldr	r0, [pc, #116]	; (800c84c <mod_extractCCID+0xc4>)
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	2214      	movs	r2, #20
 800c7da:	f004 ffba 	bl	8011752 <memset>
				memcpy((char *) &gu8arr_CCIDNum, (const char *) lu8p_saveptr, CCID_SIZE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a1a      	ldr	r2, [pc, #104]	; (800c84c <mod_extractCCID+0xc4>)
 800c7e2:	4614      	mov	r4, r2
 800c7e4:	461d      	mov	r5, r3
 800c7e6:	6828      	ldr	r0, [r5, #0]
 800c7e8:	6869      	ldr	r1, [r5, #4]
 800c7ea:	68aa      	ldr	r2, [r5, #8]
 800c7ec:	68eb      	ldr	r3, [r5, #12]
 800c7ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c7f0:	6928      	ldr	r0, [r5, #16]
 800c7f2:	6020      	str	r0, [r4, #0]
 800c7f4:	e01c      	b.n	800c830 <mod_extractCCID+0xa8>
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c7f6:	2302      	movs	r3, #2
 800c7f8:	73fb      	strb	r3, [r7, #15]
 800c7fa:	e019      	b.n	800c830 <mod_extractCCID+0xa8>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c7fc:	2302      	movs	r3, #2
 800c7fe:	73fb      	strb	r3, [r7, #15]
 800c800:	e016      	b.n	800c830 <mod_extractCCID+0xa8>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c802:	7bfb      	ldrb	r3, [r7, #15]
 800c804:	2b04      	cmp	r3, #4
 800c806:	d013      	beq.n	800c830 <mod_extractCCID+0xa8>
	{
		lsu8_retryCnt++;
 800c808:	4b11      	ldr	r3, [pc, #68]	; (800c850 <mod_extractCCID+0xc8>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	3301      	adds	r3, #1
 800c80e:	b2da      	uxtb	r2, r3
 800c810:	4b0f      	ldr	r3, [pc, #60]	; (800c850 <mod_extractCCID+0xc8>)
 800c812:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c814:	4b0e      	ldr	r3, [pc, #56]	; (800c850 <mod_extractCCID+0xc8>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	2b02      	cmp	r3, #2
 800c81a:	d802      	bhi.n	800c822 <mod_extractCCID+0x9a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c81c:	2304      	movs	r3, #4
 800c81e:	73fb      	strb	r3, [r7, #15]
 800c820:	e006      	b.n	800c830 <mod_extractCCID+0xa8>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c822:	4b0b      	ldr	r3, [pc, #44]	; (800c850 <mod_extractCCID+0xc8>)
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	2b03      	cmp	r3, #3
 800c828:	d902      	bls.n	800c830 <mod_extractCCID+0xa8>
		{
			lsu8_retryCnt = 0;
 800c82a:	4b09      	ldr	r3, [pc, #36]	; (800c850 <mod_extractCCID+0xc8>)
 800c82c:	2200      	movs	r2, #0
 800c82e:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800c830:	7bfb      	ldrb	r3, [r7, #15]
}
 800c832:	4618      	mov	r0, r3
 800c834:	3710      	adds	r7, #16
 800c836:	46bd      	mov	sp, r7
 800c838:	bdb0      	pop	{r4, r5, r7, pc}
 800c83a:	bf00      	nop
 800c83c:	08013e74 	.word	0x08013e74
 800c840:	1fff46cc 	.word	0x1fff46cc
 800c844:	1ffedc2e 	.word	0x1ffedc2e
 800c848:	08013e60 	.word	0x08013e60
 800c84c:	1fff4730 	.word	0x1fff4730
 800c850:	1fff4783 	.word	0x1fff4783

0800c854 <mod_extractNUM>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractNUM(void)
{
 800c854:	b580      	push	{r7, lr}
 800c856:	b084      	sub	sp, #16
 800c858:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c85a:	2304      	movs	r3, #4
 800c85c:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_temp = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_saveptr = NULL;
 800c862:	2300      	movs	r3, #0
 800c864:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
 800c866:	200c      	movs	r0, #12
 800c868:	491c      	ldr	r1, [pc, #112]	; (800c8dc <mod_extractNUM+0x88>)
 800c86a:	f7ff fa1d 	bl	800bca8 <mod_sendCmdGetRsp>
 800c86e:	4603      	mov	r3, r0
 800c870:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c872:	7bfb      	ldrb	r3, [r7, #15]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d114      	bne.n	800c8a2 <mod_extractNUM+0x4e>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c878:	4819      	ldr	r0, [pc, #100]	; (800c8e0 <mod_extractNUM+0x8c>)
 800c87a:	491a      	ldr	r1, [pc, #104]	; (800c8e4 <mod_extractNUM+0x90>)
 800c87c:	f005 fa8b 	bl	8011d96 <strstr>
 800c880:	4603      	mov	r3, r0
	uint8_t *lu8p_saveptr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_NUM, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c882:	2b00      	cmp	r3, #0
 800c884:	d00a      	beq.n	800c89c <mod_extractNUM+0x48>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_NUM].mu8arr_otherRspString)))
		{
			lu8p_temp = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c886:	1d3b      	adds	r3, r7, #4
 800c888:	4815      	ldr	r0, [pc, #84]	; (800c8e0 <mod_extractNUM+0x8c>)
 800c88a:	4917      	ldr	r1, [pc, #92]	; (800c8e8 <mod_extractNUM+0x94>)
 800c88c:	461a      	mov	r2, r3
 800c88e:	f005 faf8 	bl	8011e82 <strtok_r>
 800c892:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_saveptr);

			lu8p_saveptr++;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	3301      	adds	r3, #1
 800c898:	607b      	str	r3, [r7, #4]
 800c89a:	e019      	b.n	800c8d0 <mod_extractNUM+0x7c>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c89c:	2302      	movs	r3, #2
 800c89e:	73fb      	strb	r3, [r7, #15]
 800c8a0:	e016      	b.n	800c8d0 <mod_extractNUM+0x7c>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c8a2:	7bfb      	ldrb	r3, [r7, #15]
 800c8a4:	2b04      	cmp	r3, #4
 800c8a6:	d013      	beq.n	800c8d0 <mod_extractNUM+0x7c>
	{
		lsu8_retryCnt++;
 800c8a8:	4b10      	ldr	r3, [pc, #64]	; (800c8ec <mod_extractNUM+0x98>)
 800c8aa:	781b      	ldrb	r3, [r3, #0]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	b2da      	uxtb	r2, r3
 800c8b0:	4b0e      	ldr	r3, [pc, #56]	; (800c8ec <mod_extractNUM+0x98>)
 800c8b2:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c8b4:	4b0d      	ldr	r3, [pc, #52]	; (800c8ec <mod_extractNUM+0x98>)
 800c8b6:	781b      	ldrb	r3, [r3, #0]
 800c8b8:	2b02      	cmp	r3, #2
 800c8ba:	d802      	bhi.n	800c8c2 <mod_extractNUM+0x6e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c8bc:	2304      	movs	r3, #4
 800c8be:	73fb      	strb	r3, [r7, #15]
 800c8c0:	e006      	b.n	800c8d0 <mod_extractNUM+0x7c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c8c2:	4b0a      	ldr	r3, [pc, #40]	; (800c8ec <mod_extractNUM+0x98>)
 800c8c4:	781b      	ldrb	r3, [r3, #0]
 800c8c6:	2b03      	cmp	r3, #3
 800c8c8:	d902      	bls.n	800c8d0 <mod_extractNUM+0x7c>
		{
			lsu8_retryCnt = 0;
 800c8ca:	4b08      	ldr	r3, [pc, #32]	; (800c8ec <mod_extractNUM+0x98>)
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c8d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08013e74 	.word	0x08013e74
 800c8e0:	1fff46cc 	.word	0x1fff46cc
 800c8e4:	1ffee0d2 	.word	0x1ffee0d2
 800c8e8:	08013e60 	.word	0x08013e60
 800c8ec:	1fff4784 	.word	0x1fff4784

0800c8f0 <mod_extractOperator>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractOperator(void)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800c8f6:	2304      	movs	r3, #4
 800c8f8:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	60bb      	str	r3, [r7, #8]
	uint8_t *lu8p_savePtr = NULL;
 800c8fe:	2300      	movs	r3, #0
 800c900:	603b      	str	r3, [r7, #0]
	uint8_t *lu8p_dataPtr = NULL;
 800c902:	2300      	movs	r3, #0
 800c904:	607b      	str	r3, [r7, #4]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
 800c906:	200d      	movs	r0, #13
 800c908:	4937      	ldr	r1, [pc, #220]	; (800c9e8 <mod_extractOperator+0xf8>)
 800c90a:	f7ff f9cd 	bl	800bca8 <mod_sendCmdGetRsp>
 800c90e:	4603      	mov	r3, r0
 800c910:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800c912:	7bfb      	ldrb	r3, [r7, #15]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d14b      	bne.n	800c9b0 <mod_extractOperator+0xc0>
	{
		if ((NULL
				!= strstr((const char*) gu8arr_respBuffer,
 800c918:	4834      	ldr	r0, [pc, #208]	; (800c9ec <mod_extractOperator+0xfc>)
 800c91a:	4935      	ldr	r1, [pc, #212]	; (800c9f0 <mod_extractOperator+0x100>)
 800c91c:	f005 fa3b 	bl	8011d96 <strstr>
 800c920:	4603      	mov	r3, r0
	uint8_t *lu8p_dataPtr = NULL;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GET_OPERATOR, (uint8_t *) NEW_LINE);
	if (E_RET_SUCCESS == len_retStatus)
	{
		if ((NULL
 800c922:	2b00      	cmp	r3, #0
 800c924:	d041      	beq.n	800c9aa <mod_extractOperator+0xba>
				!= strstr((const char*) gu8arr_respBuffer,
						(const char*) gcst_ATCmdTable[E_IDX_GET_OPERATOR].mu8arr_otherRspString)))
		{
			lu8p_Ptr = (uint8_t *) strtok_r((char *) gu8arr_respBuffer,
 800c926:	463b      	mov	r3, r7
 800c928:	4830      	ldr	r0, [pc, #192]	; (800c9ec <mod_extractOperator+0xfc>)
 800c92a:	4932      	ldr	r1, [pc, #200]	; (800c9f4 <mod_extractOperator+0x104>)
 800c92c:	461a      	mov	r2, r3
 800c92e:	f005 faa8 	bl	8011e82 <strtok_r>
 800c932:	60b8      	str	r0, [r7, #8]
					(const char *) ":", (char **) &lu8p_savePtr);

			if (NULL != lu8p_Ptr)
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d034      	beq.n	800c9a4 <mod_extractOperator+0xb4>
			{
				lu8p_dataPtr = lu8p_savePtr;
 800c93a:	683b      	ldr	r3, [r7, #0]
 800c93c:	607b      	str	r3, [r7, #4]
				lu8p_dataPtr = (uint8_t *) strchr((const char*) lu8p_dataPtr, ',');
 800c93e:	6878      	ldr	r0, [r7, #4]
 800c940:	212c      	movs	r1, #44	; 0x2c
 800c942:	f005 f9f8 	bl	8011d36 <strchr>
 800c946:	6078      	str	r0, [r7, #4]

				if (NULL != lu8p_dataPtr)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d027      	beq.n	800c99e <mod_extractOperator+0xae>
				{
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c94e:	463b      	mov	r3, r7
 800c950:	2000      	movs	r0, #0
 800c952:	4929      	ldr	r1, [pc, #164]	; (800c9f8 <mod_extractOperator+0x108>)
 800c954:	461a      	mov	r2, r3
 800c956:	f005 fa94 	bl	8011e82 <strtok_r>
 800c95a:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) ",",
 800c95c:	463b      	mov	r3, r7
 800c95e:	2000      	movs	r0, #0
 800c960:	4925      	ldr	r1, [pc, #148]	; (800c9f8 <mod_extractOperator+0x108>)
 800c962:	461a      	mov	r2, r3
 800c964:	f005 fa8d 	bl	8011e82 <strtok_r>
 800c968:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					lu8p_savePtr++;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	3301      	adds	r3, #1
 800c96e:	603b      	str	r3, [r7, #0]
					lu8p_Ptr = (uint8_t *) strtok_r(NULL, (const char *) "\"",
 800c970:	463b      	mov	r3, r7
 800c972:	2000      	movs	r0, #0
 800c974:	4921      	ldr	r1, [pc, #132]	; (800c9fc <mod_extractOperator+0x10c>)
 800c976:	461a      	mov	r2, r3
 800c978:	f005 fa83 	bl	8011e82 <strtok_r>
 800c97c:	60b8      	str	r0, [r7, #8]
							(char **) &lu8p_savePtr);

					if (lu8p_Ptr != NULL)
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d009      	beq.n	800c998 <mod_extractOperator+0xa8>
					{
						memset(gu8_operatorName, 0, sizeof(gu8_operatorName));
 800c984:	481e      	ldr	r0, [pc, #120]	; (800ca00 <mod_extractOperator+0x110>)
 800c986:	2100      	movs	r1, #0
 800c988:	2214      	movs	r2, #20
 800c98a:	f004 fee2 	bl	8011752 <memset>
						strcpy((char *) &gu8_operatorName, (const char *) lu8p_Ptr);
 800c98e:	481c      	ldr	r0, [pc, #112]	; (800ca00 <mod_extractOperator+0x110>)
 800c990:	68b9      	ldr	r1, [r7, #8]
 800c992:	f005 f9de 	bl	8011d52 <strcpy>
 800c996:	e022      	b.n	800c9de <mod_extractOperator+0xee>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800c998:	2302      	movs	r3, #2
 800c99a:	73fb      	strb	r3, [r7, #15]
 800c99c:	e01f      	b.n	800c9de <mod_extractOperator+0xee>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	73fb      	strb	r3, [r7, #15]
 800c9a2:	e01c      	b.n	800c9de <mod_extractOperator+0xee>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800c9a4:	2302      	movs	r3, #2
 800c9a6:	73fb      	strb	r3, [r7, #15]
 800c9a8:	e019      	b.n	800c9de <mod_extractOperator+0xee>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800c9aa:	2302      	movs	r3, #2
 800c9ac:	73fb      	strb	r3, [r7, #15]
 800c9ae:	e016      	b.n	800c9de <mod_extractOperator+0xee>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800c9b0:	7bfb      	ldrb	r3, [r7, #15]
 800c9b2:	2b04      	cmp	r3, #4
 800c9b4:	d013      	beq.n	800c9de <mod_extractOperator+0xee>
	{
		lsu8_retryCnt++;
 800c9b6:	4b13      	ldr	r3, [pc, #76]	; (800ca04 <mod_extractOperator+0x114>)
 800c9b8:	781b      	ldrb	r3, [r3, #0]
 800c9ba:	3301      	adds	r3, #1
 800c9bc:	b2da      	uxtb	r2, r3
 800c9be:	4b11      	ldr	r3, [pc, #68]	; (800ca04 <mod_extractOperator+0x114>)
 800c9c0:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800c9c2:	4b10      	ldr	r3, [pc, #64]	; (800ca04 <mod_extractOperator+0x114>)
 800c9c4:	781b      	ldrb	r3, [r3, #0]
 800c9c6:	2b02      	cmp	r3, #2
 800c9c8:	d802      	bhi.n	800c9d0 <mod_extractOperator+0xe0>
		{
			len_retStatus = E_RET_INPROGRESS;
 800c9ca:	2304      	movs	r3, #4
 800c9cc:	73fb      	strb	r3, [r7, #15]
 800c9ce:	e006      	b.n	800c9de <mod_extractOperator+0xee>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800c9d0:	4b0c      	ldr	r3, [pc, #48]	; (800ca04 <mod_extractOperator+0x114>)
 800c9d2:	781b      	ldrb	r3, [r3, #0]
 800c9d4:	2b03      	cmp	r3, #3
 800c9d6:	d902      	bls.n	800c9de <mod_extractOperator+0xee>
		{
			lsu8_retryCnt = 0;
 800c9d8:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <mod_extractOperator+0x114>)
 800c9da:	2200      	movs	r2, #0
 800c9dc:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3710      	adds	r7, #16
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bd80      	pop	{r7, pc}
 800c9e8:	08013e74 	.word	0x08013e74
 800c9ec:	1fff46cc 	.word	0x1fff46cc
 800c9f0:	1ffee576 	.word	0x1ffee576
 800c9f4:	08013e60 	.word	0x08013e60
 800c9f8:	08013ea8 	.word	0x08013ea8
 800c9fc:	08013eb4 	.word	0x08013eb4
 800ca00:	1fff4744 	.word	0x1fff4744
 800ca04:	1fff4785 	.word	0x1fff4785

0800ca08 <mod_simStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
en_responseRetCodes_t mod_simStatus(void)
{
 800ca08:	b580      	push	{r7, lr}
 800ca0a:	b082      	sub	sp, #8
 800ca0c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ca0e:	2304      	movs	r3, #4
 800ca10:	71fb      	strb	r3, [r7, #7]

	switch (sen_simStatusState)
 800ca12:	4b4f      	ldr	r3, [pc, #316]	; (800cb50 <mod_simStatus+0x148>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b07      	cmp	r3, #7
 800ca18:	f200 8090 	bhi.w	800cb3c <mod_simStatus+0x134>
 800ca1c:	a201      	add	r2, pc, #4	; (adr r2, 800ca24 <mod_simStatus+0x1c>)
 800ca1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca22:	bf00      	nop
 800ca24:	0800ca45 	.word	0x0800ca45
 800ca28:	0800ca61 	.word	0x0800ca61
 800ca2c:	0800ca7d 	.word	0x0800ca7d
 800ca30:	0800ca99 	.word	0x0800ca99
 800ca34:	0800cab5 	.word	0x0800cab5
 800ca38:	0800cad7 	.word	0x0800cad7
 800ca3c:	0800caf9 	.word	0x0800caf9
 800ca40:	0800cb1b 	.word	0x0800cb1b
	{
		case E_SIM_ENABLE_SIM_DETECTION_STATE:
			len_retStatus = mod_enableSimDetection();
 800ca44:	f7ff fce6 	bl	800c414 <mod_enableSimDetection>
 800ca48:	4603      	mov	r3, r0
 800ca4a:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800ca4c:	79fb      	ldrb	r3, [r7, #7]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d105      	bne.n	800ca5e <mod_simStatus+0x56>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ca52:	2304      	movs	r3, #4
 800ca54:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_STATUS_STATE;
 800ca56:	4b3e      	ldr	r3, [pc, #248]	; (800cb50 <mod_simStatus+0x148>)
 800ca58:	2201      	movs	r2, #1
 800ca5a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ca5c:	e072      	b.n	800cb44 <mod_simStatus+0x13c>
 800ca5e:	e071      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_ENABLE_SIM_STATUS_STATE:
			len_retStatus = mod_enableSimStatusReport();
 800ca60:	f7ff fd16 	bl	800c490 <mod_enableSimStatusReport>
 800ca64:	4603      	mov	r3, r0
 800ca66:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800ca68:	79fb      	ldrb	r3, [r7, #7]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d105      	bne.n	800ca7a <mod_simStatus+0x72>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ca6e:	2304      	movs	r3, #4
 800ca70:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CHECK_SIM_STATUS_STATE;
 800ca72:	4b37      	ldr	r3, [pc, #220]	; (800cb50 <mod_simStatus+0x148>)
 800ca74:	2202      	movs	r2, #2
 800ca76:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ca78:	e064      	b.n	800cb44 <mod_simStatus+0x13c>
 800ca7a:	e063      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_CHECK_SIM_STATUS_STATE:
			len_retStatus = mod_checkSimStatus();
 800ca7c:	f7ff fd42 	bl	800c504 <mod_checkSimStatus>
 800ca80:	4603      	mov	r3, r0
 800ca82:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d105      	bne.n	800ca96 <mod_simStatus+0x8e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ca8a:	2304      	movs	r3, #4
 800ca8c:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_CPIN_CHECK_STATE;
 800ca8e:	4b30      	ldr	r3, [pc, #192]	; (800cb50 <mod_simStatus+0x148>)
 800ca90:	2203      	movs	r2, #3
 800ca92:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ca94:	e056      	b.n	800cb44 <mod_simStatus+0x13c>
 800ca96:	e055      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_CPIN_CHECK_STATE:
			len_retStatus = mod_cpinCheck();
 800ca98:	f7ff fdb4 	bl	800c604 <mod_cpinCheck>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d105      	bne.n	800cab2 <mod_simStatus+0xaa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800caa6:	2304      	movs	r3, #4
 800caa8:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_IMEI_STATE;
 800caaa:	4b29      	ldr	r3, [pc, #164]	; (800cb50 <mod_simStatus+0x148>)
 800caac:	2204      	movs	r2, #4
 800caae:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cab0:	e048      	b.n	800cb44 <mod_simStatus+0x13c>
 800cab2:	e047      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_IMEI_STATE:
			len_retStatus = mod_extractIMEI();
 800cab4:	f7ff fdec 	bl	800c690 <mod_extractIMEI>
 800cab8:	4603      	mov	r3, r0
 800caba:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d002      	beq.n	800cac8 <mod_simStatus+0xc0>
 800cac2:	79fb      	ldrb	r3, [r7, #7]
 800cac4:	2b04      	cmp	r3, #4
 800cac6:	d005      	beq.n	800cad4 <mod_simStatus+0xcc>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cac8:	2304      	movs	r3, #4
 800caca:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXCTRACT_CCID_STATE;
 800cacc:	4b20      	ldr	r3, [pc, #128]	; (800cb50 <mod_simStatus+0x148>)
 800cace:	2205      	movs	r2, #5
 800cad0:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cad2:	e037      	b.n	800cb44 <mod_simStatus+0x13c>
 800cad4:	e036      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_EXCTRACT_CCID_STATE:
			len_retStatus = mod_extractCCID();
 800cad6:	f7ff fe57 	bl	800c788 <mod_extractCCID>
 800cada:	4603      	mov	r3, r0
 800cadc:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cade:	79fb      	ldrb	r3, [r7, #7]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <mod_simStatus+0xe2>
 800cae4:	79fb      	ldrb	r3, [r7, #7]
 800cae6:	2b04      	cmp	r3, #4
 800cae8:	d005      	beq.n	800caf6 <mod_simStatus+0xee>
			{
				len_retStatus = E_RET_INPROGRESS;
 800caea:	2304      	movs	r3, #4
 800caec:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_NUM_STATE;
 800caee:	4b18      	ldr	r3, [pc, #96]	; (800cb50 <mod_simStatus+0x148>)
 800caf0:	2206      	movs	r2, #6
 800caf2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800caf4:	e026      	b.n	800cb44 <mod_simStatus+0x13c>
 800caf6:	e025      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_NUM_STATE:
			len_retStatus = mod_extractNUM();
 800caf8:	f7ff feac 	bl	800c854 <mod_extractNUM>
 800cafc:	4603      	mov	r3, r0
 800cafe:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cb00:	79fb      	ldrb	r3, [r7, #7]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d002      	beq.n	800cb0c <mod_simStatus+0x104>
 800cb06:	79fb      	ldrb	r3, [r7, #7]
 800cb08:	2b04      	cmp	r3, #4
 800cb0a:	d005      	beq.n	800cb18 <mod_simStatus+0x110>
			{
				len_retStatus = E_RET_INPROGRESS;
 800cb0c:	2304      	movs	r3, #4
 800cb0e:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_EXTRACT_OPERATOR_STATE;
 800cb10:	4b0f      	ldr	r3, [pc, #60]	; (800cb50 <mod_simStatus+0x148>)
 800cb12:	2207      	movs	r2, #7
 800cb14:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cb16:	e015      	b.n	800cb44 <mod_simStatus+0x13c>
 800cb18:	e014      	b.n	800cb44 <mod_simStatus+0x13c>

		case E_SIM_EXTRACT_OPERATOR_STATE:
			len_retStatus = mod_extractOperator();
 800cb1a:	f7ff fee9 	bl	800c8f0 <mod_extractOperator>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	71fb      	strb	r3, [r7, #7]
			if ((E_RET_SUCCESS == len_retStatus) || (E_RET_INPROGRESS != len_retStatus))
 800cb22:	79fb      	ldrb	r3, [r7, #7]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d002      	beq.n	800cb2e <mod_simStatus+0x126>
 800cb28:	79fb      	ldrb	r3, [r7, #7]
 800cb2a:	2b04      	cmp	r3, #4
 800cb2c:	d005      	beq.n	800cb3a <mod_simStatus+0x132>
			{
				len_retStatus = E_RET_SUCCESS;
 800cb2e:	2300      	movs	r3, #0
 800cb30:	71fb      	strb	r3, [r7, #7]
				sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800cb32:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <mod_simStatus+0x148>)
 800cb34:	2200      	movs	r2, #0
 800cb36:	701a      	strb	r2, [r3, #0]
			}
		break;
 800cb38:	e004      	b.n	800cb44 <mod_simStatus+0x13c>
 800cb3a:	e003      	b.n	800cb44 <mod_simStatus+0x13c>

		default:
			sen_simStatusState = E_SIM_ENABLE_SIM_DETECTION_STATE;
 800cb3c:	4b04      	ldr	r3, [pc, #16]	; (800cb50 <mod_simStatus+0x148>)
 800cb3e:	2200      	movs	r2, #0
 800cb40:	701a      	strb	r2, [r3, #0]
		break;
 800cb42:	bf00      	nop
	}
	return len_retStatus;
 800cb44:	79fb      	ldrb	r3, [r7, #7]
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3708      	adds	r7, #8
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	bd80      	pop	{r7, pc}
 800cb4e:	bf00      	nop
 800cb50:	1fff4772 	.word	0x1fff4772

0800cb54 <mod_networkStatus>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_networkStatus(void)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cb5a:	2304      	movs	r3, #4
 800cb5c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cb5e:	2300      	movs	r3, #0
 800cb60:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CREG, (uint8_t *) NEW_LINE);
 800cb62:	200e      	movs	r0, #14
 800cb64:	4941      	ldr	r1, [pc, #260]	; (800cc6c <mod_networkStatus+0x118>)
 800cb66:	f7ff f89f 	bl	800bca8 <mod_sendCmdGetRsp>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800cb6e:	79fb      	ldrb	r3, [r7, #7]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d15e      	bne.n	800cc32 <mod_networkStatus+0xde>
	{
		lsu8_retryCnt = 0;
 800cb74:	4b3e      	ldr	r3, [pc, #248]	; (800cc70 <mod_networkStatus+0x11c>)
 800cb76:	2200      	movs	r2, #0
 800cb78:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_INPROGRESS;
 800cb7a:	2304      	movs	r3, #4
 800cb7c:	71fb      	strb	r3, [r7, #7]

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,0");
 800cb7e:	483d      	ldr	r0, [pc, #244]	; (800cc74 <mod_networkStatus+0x120>)
 800cb80:	493d      	ldr	r1, [pc, #244]	; (800cc78 <mod_networkStatus+0x124>)
 800cb82:	f005 f908 	bl	8011d96 <strstr>
 800cb86:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d006      	beq.n	800cb9c <mod_networkStatus+0x48>
		{
			//Not registered
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_NONE;
 800cb8e:	4b3b      	ldr	r3, [pc, #236]	; (800cc7c <mod_networkStatus+0x128>)
 800cb90:	2201      	movs	r2, #1
 800cb92:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cb94:	2302      	movs	r3, #2
 800cb96:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	e062      	b.n	800cc62 <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,1");
 800cb9c:	4835      	ldr	r0, [pc, #212]	; (800cc74 <mod_networkStatus+0x120>)
 800cb9e:	4938      	ldr	r1, [pc, #224]	; (800cc80 <mod_networkStatus+0x12c>)
 800cba0:	f005 f8f9 	bl	8011d96 <strstr>
 800cba4:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d006      	beq.n	800cbba <mod_networkStatus+0x66>
		{
			//home network
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_HOME;
 800cbac:	4b33      	ldr	r3, [pc, #204]	; (800cc7c <mod_networkStatus+0x128>)
 800cbae:	2202      	movs	r2, #2
 800cbb0:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cbb6:	79fb      	ldrb	r3, [r7, #7]
 800cbb8:	e053      	b.n	800cc62 <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,2");
 800cbba:	482e      	ldr	r0, [pc, #184]	; (800cc74 <mod_networkStatus+0x120>)
 800cbbc:	4931      	ldr	r1, [pc, #196]	; (800cc84 <mod_networkStatus+0x130>)
 800cbbe:	f005 f8ea 	bl	8011d96 <strstr>
 800cbc2:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cbc4:	683b      	ldr	r3, [r7, #0]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d006      	beq.n	800cbd8 <mod_networkStatus+0x84>
		{
			//Not Registered
			gst_deviceStatus.men_networkRegStatus = E_NOT_REGISTERED;
 800cbca:	4b2c      	ldr	r3, [pc, #176]	; (800cc7c <mod_networkStatus+0x128>)
 800cbcc:	2203      	movs	r2, #3
 800cbce:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cbd0:	2302      	movs	r3, #2
 800cbd2:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cbd4:	79fb      	ldrb	r3, [r7, #7]
 800cbd6:	e044      	b.n	800cc62 <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,3");
 800cbd8:	4826      	ldr	r0, [pc, #152]	; (800cc74 <mod_networkStatus+0x120>)
 800cbda:	492b      	ldr	r1, [pc, #172]	; (800cc88 <mod_networkStatus+0x134>)
 800cbdc:	f005 f8db 	bl	8011d96 <strstr>
 800cbe0:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d006      	beq.n	800cbf6 <mod_networkStatus+0xa2>
		{
			//Registration denied
			gst_deviceStatus.men_networkRegStatus = E_REGISTER_DENIED;
 800cbe8:	4b24      	ldr	r3, [pc, #144]	; (800cc7c <mod_networkStatus+0x128>)
 800cbea:	2204      	movs	r2, #4
 800cbec:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cbee:	2302      	movs	r3, #2
 800cbf0:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	e035      	b.n	800cc62 <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,4");
 800cbf6:	481f      	ldr	r0, [pc, #124]	; (800cc74 <mod_networkStatus+0x120>)
 800cbf8:	4924      	ldr	r1, [pc, #144]	; (800cc8c <mod_networkStatus+0x138>)
 800cbfa:	f005 f8cc 	bl	8011d96 <strstr>
 800cbfe:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d006      	beq.n	800cc14 <mod_networkStatus+0xc0>
		{
			//Unknown
			gst_deviceStatus.men_networkRegStatus = E_UNKNOWN;
 800cc06:	4b1d      	ldr	r3, [pc, #116]	; (800cc7c <mod_networkStatus+0x128>)
 800cc08:	2205      	movs	r2, #5
 800cc0a:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_FAILED;
 800cc0c:	2302      	movs	r3, #2
 800cc0e:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cc10:	79fb      	ldrb	r3, [r7, #7]
 800cc12:	e026      	b.n	800cc62 <mod_networkStatus+0x10e>
		}

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer, "0,5");
 800cc14:	4817      	ldr	r0, [pc, #92]	; (800cc74 <mod_networkStatus+0x120>)
 800cc16:	491e      	ldr	r1, [pc, #120]	; (800cc90 <mod_networkStatus+0x13c>)
 800cc18:	f005 f8bd 	bl	8011d96 <strstr>
 800cc1c:	6038      	str	r0, [r7, #0]
		if (NULL != lu8p_Ptr)
 800cc1e:	683b      	ldr	r3, [r7, #0]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d01d      	beq.n	800cc60 <mod_networkStatus+0x10c>
		{
			//Registered, roaming
			gst_deviceStatus.men_networkRegStatus = E_REGISTERED_ROAMING;
 800cc24:	4b15      	ldr	r3, [pc, #84]	; (800cc7c <mod_networkStatus+0x128>)
 800cc26:	2206      	movs	r2, #6
 800cc28:	709a      	strb	r2, [r3, #2]
			len_retStatus = E_RET_SUCCESS;
 800cc2a:	2300      	movs	r3, #0
 800cc2c:	71fb      	strb	r3, [r7, #7]
			return len_retStatus;
 800cc2e:	79fb      	ldrb	r3, [r7, #7]
 800cc30:	e017      	b.n	800cc62 <mod_networkStatus+0x10e>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800cc32:	79fb      	ldrb	r3, [r7, #7]
 800cc34:	2b04      	cmp	r3, #4
 800cc36:	d013      	beq.n	800cc60 <mod_networkStatus+0x10c>
	{
		lsu8_retryCnt++;
 800cc38:	4b0d      	ldr	r3, [pc, #52]	; (800cc70 <mod_networkStatus+0x11c>)
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	b2da      	uxtb	r2, r3
 800cc40:	4b0b      	ldr	r3, [pc, #44]	; (800cc70 <mod_networkStatus+0x11c>)
 800cc42:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cc44:	4b0a      	ldr	r3, [pc, #40]	; (800cc70 <mod_networkStatus+0x11c>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	2b02      	cmp	r3, #2
 800cc4a:	d802      	bhi.n	800cc52 <mod_networkStatus+0xfe>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cc4c:	2304      	movs	r3, #4
 800cc4e:	71fb      	strb	r3, [r7, #7]
 800cc50:	e006      	b.n	800cc60 <mod_networkStatus+0x10c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cc52:	4b07      	ldr	r3, [pc, #28]	; (800cc70 <mod_networkStatus+0x11c>)
 800cc54:	781b      	ldrb	r3, [r3, #0]
 800cc56:	2b03      	cmp	r3, #3
 800cc58:	d902      	bls.n	800cc60 <mod_networkStatus+0x10c>
		{
			lsu8_retryCnt = 0;
 800cc5a:	4b05      	ldr	r3, [pc, #20]	; (800cc70 <mod_networkStatus+0x11c>)
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cc60:	79fb      	ldrb	r3, [r7, #7]
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3708      	adds	r7, #8
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	08013e74 	.word	0x08013e74
 800cc70:	1fff4786 	.word	0x1fff4786
 800cc74:	1fff46cc 	.word	0x1fff46cc
 800cc78:	08013eb8 	.word	0x08013eb8
 800cc7c:	1ffea4dc 	.word	0x1ffea4dc
 800cc80:	08013ebc 	.word	0x08013ebc
 800cc84:	08013ec0 	.word	0x08013ec0
 800cc88:	08013ec4 	.word	0x08013ec4
 800cc8c:	08013ec8 	.word	0x08013ec8
 800cc90:	08013ecc 	.word	0x08013ecc

0800cc94 <mod_signalQuality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_signalQuality(void)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b082      	sub	sp, #8
 800cc98:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cc9a:	2304      	movs	r3, #4
 800cc9c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_SIGNAL_QLTY, (uint8_t *) NEW_LINE);
 800cca2:	200f      	movs	r0, #15
 800cca4:	4920      	ldr	r1, [pc, #128]	; (800cd28 <mod_signalQuality+0x94>)
 800cca6:	f7fe ffff 	bl	800bca8 <mod_sendCmdGetRsp>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800ccae:	79fb      	ldrb	r3, [r7, #7]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d11d      	bne.n	800ccf0 <mod_signalQuality+0x5c>
	{

		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800ccb4:	481d      	ldr	r0, [pc, #116]	; (800cd2c <mod_signalQuality+0x98>)
 800ccb6:	491e      	ldr	r1, [pc, #120]	; (800cd30 <mod_signalQuality+0x9c>)
 800ccb8:	f005 f86d 	bl	8011d96 <strstr>
 800ccbc:	6038      	str	r0, [r7, #0]
				(const char *) gcst_ATCmdTable[E_IDX_SIGNAL_QLTY].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d012      	beq.n	800ccea <mod_signalQuality+0x56>
		{
			lu8p_Ptr += 6;
 800ccc4:	683b      	ldr	r3, [r7, #0]
 800ccc6:	3306      	adds	r3, #6
 800ccc8:	603b      	str	r3, [r7, #0]
			gu8_signalQuality = atoi((char *) lu8p_Ptr++);
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	1c5a      	adds	r2, r3, #1
 800ccce:	603a      	str	r2, [r7, #0]
 800ccd0:	4618      	mov	r0, r3
 800ccd2:	f004 fd03 	bl	80116dc <atoi>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	b2da      	uxtb	r2, r3
 800ccda:	4b16      	ldr	r3, [pc, #88]	; (800cd34 <mod_signalQuality+0xa0>)
 800ccdc:	701a      	strb	r2, [r3, #0]
			lsu8_retryCnt = 0;
 800ccde:	4b16      	ldr	r3, [pc, #88]	; (800cd38 <mod_signalQuality+0xa4>)
 800cce0:	2200      	movs	r2, #0
 800cce2:	701a      	strb	r2, [r3, #0]
			len_retStatus = E_RET_SUCCESS;
 800cce4:	2300      	movs	r3, #0
 800cce6:	71fb      	strb	r3, [r7, #7]
 800cce8:	e019      	b.n	800cd1e <mod_signalQuality+0x8a>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800ccea:	2302      	movs	r3, #2
 800ccec:	71fb      	strb	r3, [r7, #7]
 800ccee:	e016      	b.n	800cd1e <mod_signalQuality+0x8a>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800ccf0:	79fb      	ldrb	r3, [r7, #7]
 800ccf2:	2b04      	cmp	r3, #4
 800ccf4:	d013      	beq.n	800cd1e <mod_signalQuality+0x8a>
	{
		lsu8_retryCnt++;
 800ccf6:	4b10      	ldr	r3, [pc, #64]	; (800cd38 <mod_signalQuality+0xa4>)
 800ccf8:	781b      	ldrb	r3, [r3, #0]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <mod_signalQuality+0xa4>)
 800cd00:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800cd02:	4b0d      	ldr	r3, [pc, #52]	; (800cd38 <mod_signalQuality+0xa4>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	2b02      	cmp	r3, #2
 800cd08:	d802      	bhi.n	800cd10 <mod_signalQuality+0x7c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800cd0a:	2304      	movs	r3, #4
 800cd0c:	71fb      	strb	r3, [r7, #7]
 800cd0e:	e006      	b.n	800cd1e <mod_signalQuality+0x8a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800cd10:	4b09      	ldr	r3, [pc, #36]	; (800cd38 <mod_signalQuality+0xa4>)
 800cd12:	781b      	ldrb	r3, [r3, #0]
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	d902      	bls.n	800cd1e <mod_signalQuality+0x8a>
		{
			lsu8_retryCnt = 0;
 800cd18:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <mod_signalQuality+0xa4>)
 800cd1a:	2200      	movs	r2, #0
 800cd1c:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800cd1e:	79fb      	ldrb	r3, [r7, #7]
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3708      	adds	r7, #8
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	08013e74 	.word	0x08013e74
 800cd2c:	1fff46cc 	.word	0x1fff46cc
 800cd30:	1ffeeebe 	.word	0x1ffeeebe
 800cd34:	1fff46c8 	.word	0x1fff46c8
 800cd38:	1fff4787 	.word	0x1fff4787

0800cd3c <mod_extractDateTime>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_extractDateTime(void)
{
 800cd3c:	b5b0      	push	{r4, r5, r7, lr}
 800cd3e:	b090      	sub	sp, #64	; 0x40
 800cd40:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800cd42:	2304      	movs	r3, #4
 800cd44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint8_t *lu8p_savePtr = NULL;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	637b      	str	r3, [r7, #52]	; 0x34
	uint8_t lu8arr_tempBuff[50] = { 0 };
 800cd50:	463b      	mov	r3, r7
 800cd52:	2200      	movs	r2, #0
 800cd54:	601a      	str	r2, [r3, #0]
 800cd56:	3304      	adds	r3, #4
 800cd58:	2200      	movs	r2, #0
 800cd5a:	601a      	str	r2, [r3, #0]
 800cd5c:	3304      	adds	r3, #4
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	3304      	adds	r3, #4
 800cd64:	2200      	movs	r2, #0
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	3304      	adds	r3, #4
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	601a      	str	r2, [r3, #0]
 800cd6e:	3304      	adds	r3, #4
 800cd70:	2200      	movs	r2, #0
 800cd72:	601a      	str	r2, [r3, #0]
 800cd74:	3304      	adds	r3, #4
 800cd76:	2200      	movs	r2, #0
 800cd78:	601a      	str	r2, [r3, #0]
 800cd7a:	3304      	adds	r3, #4
 800cd7c:	2200      	movs	r2, #0
 800cd7e:	601a      	str	r2, [r3, #0]
 800cd80:	3304      	adds	r3, #4
 800cd82:	2200      	movs	r2, #0
 800cd84:	601a      	str	r2, [r3, #0]
 800cd86:	3304      	adds	r3, #4
 800cd88:	2200      	movs	r2, #0
 800cd8a:	601a      	str	r2, [r3, #0]
 800cd8c:	3304      	adds	r3, #4
 800cd8e:	2200      	movs	r2, #0
 800cd90:	601a      	str	r2, [r3, #0]
 800cd92:	3304      	adds	r3, #4
 800cd94:	2200      	movs	r2, #0
 800cd96:	601a      	str	r2, [r3, #0]
 800cd98:	3304      	adds	r3, #4
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	801a      	strh	r2, [r3, #0]
 800cd9e:	3302      	adds	r3, #2

	len_retStatus = mod_sendCmdGetRsp(E_IDX_CCLK, (uint8_t *) NEW_LINE);
 800cda0:	2010      	movs	r0, #16
 800cda2:	492e      	ldr	r1, [pc, #184]	; (800ce5c <mod_extractDateTime+0x120>)
 800cda4:	f7fe ff80 	bl	800bca8 <mod_sendCmdGetRsp>
 800cda8:	4603      	mov	r3, r0
 800cdaa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800cdae:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	d133      	bne.n	800ce1e <mod_extractDateTime+0xe2>
	{
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800cdb6:	482a      	ldr	r0, [pc, #168]	; (800ce60 <mod_extractDateTime+0x124>)
 800cdb8:	492a      	ldr	r1, [pc, #168]	; (800ce64 <mod_extractDateTime+0x128>)
 800cdba:	f004 ffec 	bl	8011d96 <strstr>
 800cdbe:	63b8      	str	r0, [r7, #56]	; 0x38
				(const char *) gcst_ATCmdTable[E_IDX_CCLK].mu8arr_otherRspString);
		if (lu8p_Ptr != NULL)
 800cdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d044      	beq.n	800ce50 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800cdc6:	4b28      	ldr	r3, [pc, #160]	; (800ce68 <mod_extractDateTime+0x12c>)
 800cdc8:	2200      	movs	r2, #0
 800cdca:	701a      	strb	r2, [r3, #0]

			memcpy(lu8arr_tempBuff, gu8arr_respBuffer, 50);
 800cdcc:	4b24      	ldr	r3, [pc, #144]	; (800ce60 <mod_extractDateTime+0x124>)
 800cdce:	463c      	mov	r4, r7
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cdd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdda:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cddc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cdde:	682b      	ldr	r3, [r5, #0]
 800cde0:	8023      	strh	r3, [r4, #0]
			lu8p_Ptr = (uint8_t *) strtok_r((char *) lu8arr_tempBuff, (const char *) ":",
 800cde2:	463a      	mov	r2, r7
 800cde4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800cde8:	4610      	mov	r0, r2
 800cdea:	4920      	ldr	r1, [pc, #128]	; (800ce6c <mod_extractDateTime+0x130>)
 800cdec:	461a      	mov	r2, r3
 800cdee:	f005 f848 	bl	8011e82 <strtok_r>
 800cdf2:	63b8      	str	r0, [r7, #56]	; 0x38
					(char **) &lu8p_savePtr);
			lu8p_savePtr += 2;
 800cdf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf6:	3302      	adds	r3, #2
 800cdf8:	637b      	str	r3, [r7, #52]	; 0x34
			if (NULL != lu8p_savePtr)
 800cdfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d00a      	beq.n	800ce16 <mod_extractDateTime+0xda>
			{
				memset(gu8_dataTime, 0, sizeof(gu8_dataTime));
 800ce00:	481b      	ldr	r0, [pc, #108]	; (800ce70 <mod_extractDateTime+0x134>)
 800ce02:	2100      	movs	r1, #0
 800ce04:	2214      	movs	r2, #20
 800ce06:	f004 fca4 	bl	8011752 <memset>
				strncpy((char *) gu8_dataTime, (const char *) lu8p_savePtr,
 800ce0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0c:	4818      	ldr	r0, [pc, #96]	; (800ce70 <mod_extractDateTime+0x134>)
 800ce0e:	4619      	mov	r1, r3
 800ce10:	2214      	movs	r2, #20
 800ce12:	f004 ffae 	bl	8011d72 <strncpy>
				TIME_SIZE);
			}
			len_retStatus = E_RET_SUCCESS;
 800ce16:	2300      	movs	r3, #0
 800ce18:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce1c:	e018      	b.n	800ce50 <mod_extractDateTime+0x114>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800ce1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ce22:	2b04      	cmp	r3, #4
 800ce24:	d014      	beq.n	800ce50 <mod_extractDateTime+0x114>
	{
		lsu8_retryCnt++;
 800ce26:	4b10      	ldr	r3, [pc, #64]	; (800ce68 <mod_extractDateTime+0x12c>)
 800ce28:	781b      	ldrb	r3, [r3, #0]
 800ce2a:	3301      	adds	r3, #1
 800ce2c:	b2da      	uxtb	r2, r3
 800ce2e:	4b0e      	ldr	r3, [pc, #56]	; (800ce68 <mod_extractDateTime+0x12c>)
 800ce30:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800ce32:	4b0d      	ldr	r3, [pc, #52]	; (800ce68 <mod_extractDateTime+0x12c>)
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d803      	bhi.n	800ce42 <mod_extractDateTime+0x106>
		{
			len_retStatus = E_RET_INPROGRESS;
 800ce3a:	2304      	movs	r3, #4
 800ce3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800ce40:	e006      	b.n	800ce50 <mod_extractDateTime+0x114>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800ce42:	4b09      	ldr	r3, [pc, #36]	; (800ce68 <mod_extractDateTime+0x12c>)
 800ce44:	781b      	ldrb	r3, [r3, #0]
 800ce46:	2b03      	cmp	r3, #3
 800ce48:	d902      	bls.n	800ce50 <mod_extractDateTime+0x114>
		{
			lsu8_retryCnt = 0;
 800ce4a:	4b07      	ldr	r3, [pc, #28]	; (800ce68 <mod_extractDateTime+0x12c>)
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800ce50:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	3740      	adds	r7, #64	; 0x40
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	bdb0      	pop	{r4, r5, r7, pc}
 800ce5c:	08013e74 	.word	0x08013e74
 800ce60:	1fff46cc 	.word	0x1fff46cc
 800ce64:	1ffef362 	.word	0x1ffef362
 800ce68:	1fff4788 	.word	0x1fff4788
 800ce6c:	08013e60 	.word	0x08013e60
 800ce70:	1fff4758 	.word	0x1fff4758

0800ce74 <mod_mqttConnect>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttConnect(void)
{
 800ce74:	b590      	push	{r4, r7, lr}
 800ce76:	b08f      	sub	sp, #60	; 0x3c
 800ce78:	af02      	add	r7, sp, #8
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800ce7a:	2304      	movs	r3, #4
 800ce7c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[35] = { 0 };
 800ce80:	463b      	mov	r3, r7
 800ce82:	2200      	movs	r2, #0
 800ce84:	601a      	str	r2, [r3, #0]
 800ce86:	3304      	adds	r3, #4
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]
 800ce92:	3304      	adds	r3, #4
 800ce94:	2200      	movs	r2, #0
 800ce96:	601a      	str	r2, [r3, #0]
 800ce98:	3304      	adds	r3, #4
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	601a      	str	r2, [r3, #0]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	2200      	movs	r2, #0
 800cea2:	601a      	str	r2, [r3, #0]
 800cea4:	3304      	adds	r3, #4
 800cea6:	2200      	movs	r2, #0
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	2200      	movs	r2, #0
 800ceae:	601a      	str	r2, [r3, #0]
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	801a      	strh	r2, [r3, #0]
 800ceb6:	3302      	adds	r3, #2
 800ceb8:	2200      	movs	r2, #0
 800ceba:	701a      	strb	r2, [r3, #0]
 800cebc:	3301      	adds	r3, #1
	uint8_t *lu8p_Ptr = NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	62bb      	str	r3, [r7, #40]	; 0x28
	short ls_result = E_MQTT_CON_NONE;
 800cec2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cec6:	84fb      	strh	r3, [r7, #38]	; 0x26

	sprintf((char *) lu8arr_param, (const char*) "%d,\"%s_%s\"\r\n",
 800cec8:	4b87      	ldr	r3, [pc, #540]	; (800d0e8 <mod_mqttConnect+0x274>)
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	461c      	mov	r4, r3
 800cece:	463a      	mov	r2, r7
 800ced0:	4b86      	ldr	r3, [pc, #536]	; (800d0ec <mod_mqttConnect+0x278>)
 800ced2:	9300      	str	r3, [sp, #0]
 800ced4:	4610      	mov	r0, r2
 800ced6:	4986      	ldr	r1, [pc, #536]	; (800d0f0 <mod_mqttConnect+0x27c>)
 800ced8:	4622      	mov	r2, r4
 800ceda:	4b86      	ldr	r3, [pc, #536]	; (800d0f4 <mod_mqttConnect+0x280>)
 800cedc:	f004 fef8 	bl	8011cd0 <siprintf>
			sgu8_mqttClientId, MQTT_CONNECT_CLINT_ID, &gu8arr_IMEINum[5]);	//using last 10 digits of IMEI for unique client ID for every VCU

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CONNECT, (uint8_t *) lu8arr_param);
 800cee0:	463b      	mov	r3, r7
 800cee2:	2014      	movs	r0, #20
 800cee4:	4619      	mov	r1, r3
 800cee6:	f7fe fedf 	bl	800bca8 <mod_sendCmdGetRsp>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (E_RET_SUCCESS == len_retStatus)
 800cef0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f040 8096 	bne.w	800d026 <mod_mqttConnect+0x1b2>
	{
		lsu8_retryCnt = 0;
 800cefa:	4b7f      	ldr	r3, [pc, #508]	; (800d0f8 <mod_mqttConnect+0x284>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800cf00:	487e      	ldr	r0, [pc, #504]	; (800d0fc <mod_mqttConnect+0x288>)
 800cf02:	497f      	ldr	r1, [pc, #508]	; (800d100 <mod_mqttConnect+0x28c>)
 800cf04:	f004 ff47 	bl	8011d96 <strstr>
 800cf08:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_CONNECT].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800cf0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 8086 	beq.w	800d01e <mod_mqttConnect+0x1aa>
		{
			lu8p_Ptr += 10;
 800cf12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf14:	330a      	adds	r3, #10
 800cf16:	62bb      	str	r3, [r7, #40]	; 0x28
			ls_result = atoi((char *) lu8p_Ptr);
 800cf18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf1a:	f004 fbdf 	bl	80116dc <atoi>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	84fb      	strh	r3, [r7, #38]	; 0x26
			if (sgu8_mqttClientId == ls_result)	//check client Idx
 800cf22:	4b71      	ldr	r3, [pc, #452]	; (800d0e8 <mod_mqttConnect+0x274>)
 800cf24:	781b      	ldrb	r3, [r3, #0]
 800cf26:	461a      	mov	r2, r3
 800cf28:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf2c:	429a      	cmp	r2, r3
 800cf2e:	d172      	bne.n	800d016 <mod_mqttConnect+0x1a2>
			{
				lu8p_Ptr += 2;
 800cf30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf32:	3302      	adds	r3, #2
 800cf34:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800cf36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf38:	f004 fbd0 	bl	80116dc <atoi>
 800cf3c:	4603      	mov	r3, r0
 800cf3e:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (0 == ls_result)	//Packet sent successfully and ACK received from server
 800cf40:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d119      	bne.n	800cf7c <mod_mqttConnect+0x108>
				{
					lu8p_Ptr += 2;
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	3302      	adds	r3, #2
 800cf4c:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800cf4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cf50:	f004 fbc4 	bl	80116dc <atoi>
 800cf54:	4603      	mov	r3, r0
 800cf56:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (0 == ls_result)	//Connection Accepted
 800cf58:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d106      	bne.n	800cf6e <mod_mqttConnect+0xfa>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800cf60:	4b68      	ldr	r3, [pc, #416]	; (800d104 <mod_mqttConnect+0x290>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	715a      	strb	r2, [r3, #5]
								E_ACK_RCVD_CONNECT_ACCEPT;

						len_retStatus = E_RET_SUCCESS;
 800cf66:	2300      	movs	r3, #0
 800cf68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf6c:	e0b5      	b.n	800d0da <mod_mqttConnect+0x266>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800cf6e:	4b65      	ldr	r3, [pc, #404]	; (800d104 <mod_mqttConnect+0x290>)
 800cf70:	2208      	movs	r2, #8
 800cf72:	715a      	strb	r2, [r3, #5]
						len_retStatus = E_RET_FAILED;
 800cf74:	2302      	movs	r3, #2
 800cf76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf7a:	e0ae      	b.n	800d0da <mod_mqttConnect+0x266>
					}
				}
				else if (1 == ls_result)	//Packet retransmission
 800cf7c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d106      	bne.n	800cf92 <mod_mqttConnect+0x11e>
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_PACKET_RETRANSMISSION;
 800cf84:	4b5f      	ldr	r3, [pc, #380]	; (800d104 <mod_mqttConnect+0x290>)
 800cf86:	2201      	movs	r2, #1
 800cf88:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_INPROGRESS;
 800cf8a:	2304      	movs	r3, #4
 800cf8c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cf90:	e0a3      	b.n	800d0da <mod_mqttConnect+0x266>
				}
				else if (2 == ls_result)	//Failed to send packet
 800cf92:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cf96:	2b02      	cmp	r3, #2
 800cf98:	d136      	bne.n	800d008 <mod_mqttConnect+0x194>
				{
					lu8p_Ptr += 2;
 800cf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf9c:	3302      	adds	r3, #2
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);
 800cfa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cfa2:	f004 fb9b 	bl	80116dc <atoi>
 800cfa6:	4603      	mov	r3, r0
 800cfa8:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)	//Connection Refused: Unacceptable Protocol Version
 800cfaa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cfae:	2b01      	cmp	r3, #1
 800cfb0:	d103      	bne.n	800cfba <mod_mqttConnect+0x146>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800cfb2:	4b54      	ldr	r3, [pc, #336]	; (800d104 <mod_mqttConnect+0x290>)
 800cfb4:	2203      	movs	r2, #3
 800cfb6:	715a      	strb	r2, [r3, #5]
 800cfb8:	e022      	b.n	800d000 <mod_mqttConnect+0x18c>
								E_CON_REF_UNACC_PRO_VER;
					}
					else if (2 == ls_result)	//Connection Refused: Identifier Rejected
 800cfba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cfbe:	2b02      	cmp	r3, #2
 800cfc0:	d103      	bne.n	800cfca <mod_mqttConnect+0x156>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_ID_REJECT;
 800cfc2:	4b50      	ldr	r3, [pc, #320]	; (800d104 <mod_mqttConnect+0x290>)
 800cfc4:	2204      	movs	r2, #4
 800cfc6:	715a      	strb	r2, [r3, #5]
 800cfc8:	e01a      	b.n	800d000 <mod_mqttConnect+0x18c>
					}
					else if (3 == ls_result)	//Connection Refused: Server Unavailable
 800cfca:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d103      	bne.n	800cfda <mod_mqttConnect+0x166>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800cfd2:	4b4c      	ldr	r3, [pc, #304]	; (800d104 <mod_mqttConnect+0x290>)
 800cfd4:	2205      	movs	r2, #5
 800cfd6:	715a      	strb	r2, [r3, #5]
 800cfd8:	e012      	b.n	800d000 <mod_mqttConnect+0x18c>
								E_CON_REF_SERVER_UNAVAIL;
					}
					else if (4 == ls_result)//Connection Refused: Bad User Name or Password
 800cfda:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cfde:	2b04      	cmp	r3, #4
 800cfe0:	d103      	bne.n	800cfea <mod_mqttConnect+0x176>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes =
 800cfe2:	4b48      	ldr	r3, [pc, #288]	; (800d104 <mod_mqttConnect+0x290>)
 800cfe4:	2206      	movs	r2, #6
 800cfe6:	715a      	strb	r2, [r3, #5]
 800cfe8:	e00a      	b.n	800d000 <mod_mqttConnect+0x18c>
								E_CON_REF_BAD_USR_PASS;
					}
					else if (5 == ls_result) //Connection Refused: Not Authorized
 800cfea:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800cfee:	2b05      	cmp	r3, #5
 800cff0:	d103      	bne.n	800cffa <mod_mqttConnect+0x186>
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_REF_NOT_AUTH;
 800cff2:	4b44      	ldr	r3, [pc, #272]	; (800d104 <mod_mqttConnect+0x290>)
 800cff4:	2207      	movs	r2, #7
 800cff6:	715a      	strb	r2, [r3, #5]
 800cff8:	e002      	b.n	800d000 <mod_mqttConnect+0x18c>
					}
					else
					{
						gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800cffa:	4b42      	ldr	r3, [pc, #264]	; (800d104 <mod_mqttConnect+0x290>)
 800cffc:	2208      	movs	r2, #8
 800cffe:	715a      	strb	r2, [r3, #5]
					}

					len_retStatus = E_RET_FAILED;
 800d000:	2302      	movs	r3, #2
 800d002:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d006:	e068      	b.n	800d0da <mod_mqttConnect+0x266>
				}
				else
				{
					gst_deviceStatus.men_mqttConnectErrorCodes = E_CON_UNKNOWN_ERROR;
 800d008:	4b3e      	ldr	r3, [pc, #248]	; (800d104 <mod_mqttConnect+0x290>)
 800d00a:	2208      	movs	r2, #8
 800d00c:	715a      	strb	r2, [r3, #5]
					len_retStatus = E_RET_FAILED;
 800d00e:	2302      	movs	r3, #2
 800d010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d014:	e061      	b.n	800d0da <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d016:	2302      	movs	r3, #2
 800d018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d01c:	e05d      	b.n	800d0da <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d01e:	2302      	movs	r3, #2
 800d020:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d024:	e059      	b.n	800d0da <mod_mqttConnect+0x266>
		}
	}
	else if (E_RET_RSP_ERROR == len_retStatus)
 800d026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	d13c      	bne.n	800d0a8 <mod_mqttConnect+0x234>
	{
		lsu8_retryCnt = 0;
 800d02e:	4b32      	ldr	r3, [pc, #200]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d030:	2200      	movs	r2, #0
 800d032:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d034:	4831      	ldr	r0, [pc, #196]	; (800d0fc <mod_mqttConnect+0x288>)
 800d036:	4934      	ldr	r1, [pc, #208]	; (800d108 <mod_mqttConnect+0x294>)
 800d038:	f004 fead 	bl	8011d96 <strstr>
 800d03c:	62b8      	str	r0, [r7, #40]	; 0x28
				(const char *) QMTSTAT);
		if (lu8p_Ptr != NULL)
 800d03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d040:	2b00      	cmp	r3, #0
 800d042:	d02d      	beq.n	800d0a0 <mod_mqttConnect+0x22c>
		{
			if (lu8p_Ptr != NULL)
 800d044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d046:	2b00      	cmp	r3, #0
 800d048:	d026      	beq.n	800d098 <mod_mqttConnect+0x224>
			{
				lu8p_Ptr += 10;
 800d04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d04c:	330a      	adds	r3, #10
 800d04e:	62bb      	str	r3, [r7, #40]	; 0x28
				ls_result = atoi((char *) lu8p_Ptr);
 800d050:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d052:	f004 fb43 	bl	80116dc <atoi>
 800d056:	4603      	mov	r3, r0
 800d058:	84fb      	strh	r3, [r7, #38]	; 0x26
				if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d05a:	4b23      	ldr	r3, [pc, #140]	; (800d0e8 <mod_mqttConnect+0x274>)
 800d05c:	781b      	ldrb	r3, [r3, #0]
 800d05e:	461a      	mov	r2, r3
 800d060:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d064:	429a      	cmp	r2, r3
 800d066:	d113      	bne.n	800d090 <mod_mqttConnect+0x21c>
				{
					lu8p_Ptr += 2;
 800d068:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d06a:	3302      	adds	r3, #2
 800d06c:	62bb      	str	r3, [r7, #40]	; 0x28
					ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d06e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d070:	f004 fb34 	bl	80116dc <atoi>
 800d074:	4603      	mov	r3, r0
 800d076:	84fb      	strh	r3, [r7, #38]	; 0x26
					if (1 == ls_result)
 800d078:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d103      	bne.n	800d088 <mod_mqttConnect+0x214>
					{
						len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d080:	230a      	movs	r3, #10
 800d082:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d086:	e028      	b.n	800d0da <mod_mqttConnect+0x266>
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d088:	2302      	movs	r3, #2
 800d08a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d08e:	e024      	b.n	800d0da <mod_mqttConnect+0x266>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d090:	2302      	movs	r3, #2
 800d092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d096:	e020      	b.n	800d0da <mod_mqttConnect+0x266>
				}
			}
			else
			{
				len_retStatus = E_RET_FAILED;
 800d098:	2302      	movs	r3, #2
 800d09a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d09e:	e01c      	b.n	800d0da <mod_mqttConnect+0x266>
			}
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800d0a0:	2302      	movs	r3, #2
 800d0a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d0a6:	e018      	b.n	800d0da <mod_mqttConnect+0x266>
		}

	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d0a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800d0ac:	2b04      	cmp	r3, #4
 800d0ae:	d014      	beq.n	800d0da <mod_mqttConnect+0x266>
	{
		lsu8_retryCnt++;
 800d0b0:	4b11      	ldr	r3, [pc, #68]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	3301      	adds	r3, #1
 800d0b6:	b2da      	uxtb	r2, r3
 800d0b8:	4b0f      	ldr	r3, [pc, #60]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d0ba:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d0bc:	4b0e      	ldr	r3, [pc, #56]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d0be:	781b      	ldrb	r3, [r3, #0]
 800d0c0:	2b02      	cmp	r3, #2
 800d0c2:	d803      	bhi.n	800d0cc <mod_mqttConnect+0x258>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d0c4:	2304      	movs	r3, #4
 800d0c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800d0ca:	e006      	b.n	800d0da <mod_mqttConnect+0x266>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d0cc:	4b0a      	ldr	r3, [pc, #40]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2b03      	cmp	r3, #3
 800d0d2:	d902      	bls.n	800d0da <mod_mqttConnect+0x266>
		{
			lsu8_retryCnt = 0;
 800d0d4:	4b08      	ldr	r3, [pc, #32]	; (800d0f8 <mod_mqttConnect+0x284>)
 800d0d6:	2200      	movs	r2, #0
 800d0d8:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d0da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d0de:	4618      	mov	r0, r3
 800d0e0:	3734      	adds	r7, #52	; 0x34
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd90      	pop	{r4, r7, pc}
 800d0e6:	bf00      	nop
 800d0e8:	1fff476d 	.word	0x1fff476d
 800d0ec:	1fff4725 	.word	0x1fff4725
 800d0f0:	08013ed0 	.word	0x08013ed0
 800d0f4:	08013ee0 	.word	0x08013ee0
 800d0f8:	1fff4789 	.word	0x1fff4789
 800d0fc:	1fff46cc 	.word	0x1fff46cc
 800d100:	1fff05f2 	.word	0x1fff05f2
 800d104:	1ffea4dc 	.word	0x1ffea4dc
 800d108:	08013dd4 	.word	0x08013dd4

0800d10c <mod_mqttEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttEnableFunctionality(void)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b082      	sub	sp, #8
 800d110:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d112:	2304      	movs	r3, #4
 800d114:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d116:	2300      	movs	r3, #0
 800d118:	80bb      	strh	r3, [r7, #4]
 800d11a:	2300      	movs	r3, #0
 800d11c:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "1\r\n");
 800d11e:	1d3b      	adds	r3, r7, #4
 800d120:	4a16      	ldr	r2, [pc, #88]	; (800d17c <mod_mqttEnableFunctionality+0x70>)
 800d122:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d124:	1d3b      	adds	r3, r7, #4
 800d126:	2017      	movs	r0, #23
 800d128:	4619      	mov	r1, r3
 800d12a:	f7fe fdbd 	bl	800bca8 <mod_sendCmdGetRsp>
 800d12e:	4603      	mov	r3, r0
 800d130:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d132:	79fb      	ldrb	r3, [r7, #7]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d105      	bne.n	800d144 <mod_mqttEnableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d138:	4b11      	ldr	r3, [pc, #68]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d13a:	2200      	movs	r2, #0
 800d13c:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d13e:	2300      	movs	r3, #0
 800d140:	71fb      	strb	r3, [r7, #7]
 800d142:	e016      	b.n	800d172 <mod_mqttEnableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d144:	79fb      	ldrb	r3, [r7, #7]
 800d146:	2b04      	cmp	r3, #4
 800d148:	d013      	beq.n	800d172 <mod_mqttEnableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d14a:	4b0d      	ldr	r3, [pc, #52]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d14c:	781b      	ldrb	r3, [r3, #0]
 800d14e:	3301      	adds	r3, #1
 800d150:	b2da      	uxtb	r2, r3
 800d152:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d154:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d156:	4b0a      	ldr	r3, [pc, #40]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d158:	781b      	ldrb	r3, [r3, #0]
 800d15a:	2b02      	cmp	r3, #2
 800d15c:	d802      	bhi.n	800d164 <mod_mqttEnableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d15e:	2304      	movs	r3, #4
 800d160:	71fb      	strb	r3, [r7, #7]
 800d162:	e006      	b.n	800d172 <mod_mqttEnableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d164:	4b06      	ldr	r3, [pc, #24]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d166:	781b      	ldrb	r3, [r3, #0]
 800d168:	2b03      	cmp	r3, #3
 800d16a:	d902      	bls.n	800d172 <mod_mqttEnableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d16c:	4b04      	ldr	r3, [pc, #16]	; (800d180 <mod_mqttEnableFunctionality+0x74>)
 800d16e:	2200      	movs	r2, #0
 800d170:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d172:	79fb      	ldrb	r3, [r7, #7]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3708      	adds	r7, #8
 800d178:	46bd      	mov	sp, r7
 800d17a:	bd80      	pop	{r7, pc}
 800d17c:	000a0d31 	.word	0x000a0d31
 800d180:	1fff478a 	.word	0x1fff478a

0800d184 <mod_mqttDisableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableFunctionality(void)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b082      	sub	sp, #8
 800d188:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d18a:	2304      	movs	r3, #4
 800d18c:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[3] = { 0 };
 800d18e:	2300      	movs	r3, #0
 800d190:	80bb      	strh	r3, [r7, #4]
 800d192:	2300      	movs	r3, #0
 800d194:	71bb      	strb	r3, [r7, #6]

	sprintf((char *) lu8arr_param, (const char*) "4\r\n");
 800d196:	1d3b      	adds	r3, r7, #4
 800d198:	4a16      	ldr	r2, [pc, #88]	; (800d1f4 <mod_mqttDisableFunctionality+0x70>)
 800d19a:	601a      	str	r2, [r3, #0]
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_DISBALE_ENABLE_MODEM,
 800d19c:	1d3b      	adds	r3, r7, #4
 800d19e:	2017      	movs	r0, #23
 800d1a0:	4619      	mov	r1, r3
 800d1a2:	f7fe fd81 	bl	800bca8 <mod_sendCmdGetRsp>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	71fb      	strb	r3, [r7, #7]
			(uint8_t *) lu8arr_param);
	if (E_RET_SUCCESS == len_retStatus)
 800d1aa:	79fb      	ldrb	r3, [r7, #7]
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d105      	bne.n	800d1bc <mod_mqttDisableFunctionality+0x38>
	{
		lsu8_retryCnt = 0;
 800d1b0:	4b11      	ldr	r3, [pc, #68]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1b2:	2200      	movs	r2, #0
 800d1b4:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	71fb      	strb	r3, [r7, #7]
 800d1ba:	e016      	b.n	800d1ea <mod_mqttDisableFunctionality+0x66>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d1bc:	79fb      	ldrb	r3, [r7, #7]
 800d1be:	2b04      	cmp	r3, #4
 800d1c0:	d013      	beq.n	800d1ea <mod_mqttDisableFunctionality+0x66>
	{
		lsu8_retryCnt++;
 800d1c2:	4b0d      	ldr	r3, [pc, #52]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1c4:	781b      	ldrb	r3, [r3, #0]
 800d1c6:	3301      	adds	r3, #1
 800d1c8:	b2da      	uxtb	r2, r3
 800d1ca:	4b0b      	ldr	r3, [pc, #44]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1cc:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d1ce:	4b0a      	ldr	r3, [pc, #40]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	2b02      	cmp	r3, #2
 800d1d4:	d802      	bhi.n	800d1dc <mod_mqttDisableFunctionality+0x58>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d1d6:	2304      	movs	r3, #4
 800d1d8:	71fb      	strb	r3, [r7, #7]
 800d1da:	e006      	b.n	800d1ea <mod_mqttDisableFunctionality+0x66>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d1dc:	4b06      	ldr	r3, [pc, #24]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1de:	781b      	ldrb	r3, [r3, #0]
 800d1e0:	2b03      	cmp	r3, #3
 800d1e2:	d902      	bls.n	800d1ea <mod_mqttDisableFunctionality+0x66>
		{
			lsu8_retryCnt = 0;
 800d1e4:	4b04      	ldr	r3, [pc, #16]	; (800d1f8 <mod_mqttDisableFunctionality+0x74>)
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800d1ea:	79fb      	ldrb	r3, [r7, #7]
}
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	3708      	adds	r7, #8
 800d1f0:	46bd      	mov	sp, r7
 800d1f2:	bd80      	pop	{r7, pc}
 800d1f4:	000a0d34 	.word	0x000a0d34
 800d1f8:	1fff478b 	.word	0x1fff478b

0800d1fc <mod_mqttDisableEnableFunctionality>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttDisableEnableFunctionality(void)
{
 800d1fc:	b580      	push	{r7, lr}
 800d1fe:	b082      	sub	sp, #8
 800d200:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d202:	2304      	movs	r3, #4
 800d204:	71fb      	strb	r3, [r7, #7]

	switch (sen_modemResetState)
 800d206:	4b21      	ldr	r3, [pc, #132]	; (800d28c <mod_mqttDisableEnableFunctionality+0x90>)
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d016      	beq.n	800d23c <mod_mqttDisableEnableFunctionality+0x40>
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d02b      	beq.n	800d26a <mod_mqttDisableEnableFunctionality+0x6e>
 800d212:	2b00      	cmp	r3, #0
 800d214:	d000      	beq.n	800d218 <mod_mqttDisableEnableFunctionality+0x1c>
				len_retStatus = E_RET_SUCCESS;
			}
		break;

		default:
		break;
 800d216:	e034      	b.n	800d282 <mod_mqttDisableEnableFunctionality+0x86>
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;

	switch (sen_modemResetState)
	{
		case E_RST_DISABLE_FUNCTION:
			len_retStatus = mod_mqttDisableFunctionality();
 800d218:	f7ff ffb4 	bl	800d184 <mod_mqttDisableFunctionality>
 800d21c:	4603      	mov	r3, r0
 800d21e:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus)
 800d220:	79fb      	ldrb	r3, [r7, #7]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d109      	bne.n	800d23a <mod_mqttDisableEnableFunctionality+0x3e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800d226:	2304      	movs	r3, #4
 800d228:	71fb      	strb	r3, [r7, #7]
				sen_modemResetState = E_RST_ENALBE_FUNCTION;
 800d22a:	4b18      	ldr	r3, [pc, #96]	; (800d28c <mod_mqttDisableEnableFunctionality+0x90>)
 800d22c:	2201      	movs	r2, #1
 800d22e:	701a      	strb	r2, [r3, #0]
				tm_setResetTimer(5000);
 800d230:	f241 3088 	movw	r0, #5000	; 0x1388
 800d234:	f7f3 f8b6 	bl	80003a4 <tm_setResetTimer>
			}
		break;
 800d238:	e023      	b.n	800d282 <mod_mqttDisableEnableFunctionality+0x86>
 800d23a:	e022      	b.n	800d282 <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_ENALBE_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d23c:	f7f3 f8c0 	bl	80003c0 <tm_getResetTimerValue>
 800d240:	4603      	mov	r3, r0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d110      	bne.n	800d268 <mod_mqttDisableEnableFunctionality+0x6c>
			{
				len_retStatus = mod_mqttEnableFunctionality();
 800d246:	f7ff ff61 	bl	800d10c <mod_mqttEnableFunctionality>
 800d24a:	4603      	mov	r3, r0
 800d24c:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800d24e:	79fb      	ldrb	r3, [r7, #7]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d109      	bne.n	800d268 <mod_mqttDisableEnableFunctionality+0x6c>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d254:	2304      	movs	r3, #4
 800d256:	71fb      	strb	r3, [r7, #7]
					sen_modemResetState = E_RST_WAIT_FUNCTION;
 800d258:	4b0c      	ldr	r3, [pc, #48]	; (800d28c <mod_mqttDisableEnableFunctionality+0x90>)
 800d25a:	2202      	movs	r2, #2
 800d25c:	701a      	strb	r2, [r3, #0]
					tm_setResetTimer(5000);
 800d25e:	f241 3088 	movw	r0, #5000	; 0x1388
 800d262:	f7f3 f89f 	bl	80003a4 <tm_setResetTimer>
				}
			}
		break;
 800d266:	e00c      	b.n	800d282 <mod_mqttDisableEnableFunctionality+0x86>
 800d268:	e00b      	b.n	800d282 <mod_mqttDisableEnableFunctionality+0x86>

		case E_RST_WAIT_FUNCTION:
			if (tm_getResetTimerValue() == 0)
 800d26a:	f7f3 f8a9 	bl	80003c0 <tm_getResetTimerValue>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d105      	bne.n	800d280 <mod_mqttDisableEnableFunctionality+0x84>
			{
				sen_modemResetState = E_RST_DISABLE_FUNCTION;
 800d274:	4b05      	ldr	r3, [pc, #20]	; (800d28c <mod_mqttDisableEnableFunctionality+0x90>)
 800d276:	2200      	movs	r2, #0
 800d278:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_SUCCESS;
 800d27a:	2300      	movs	r3, #0
 800d27c:	71fb      	strb	r3, [r7, #7]
			}
		break;
 800d27e:	e7ff      	b.n	800d280 <mod_mqttDisableEnableFunctionality+0x84>
 800d280:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d282:	79fb      	ldrb	r3, [r7, #7]
}
 800d284:	4618      	mov	r0, r3
 800d286:	3708      	adds	r7, #8
 800d288:	46bd      	mov	sp, r7
 800d28a:	bd80      	pop	{r7, pc}
 800d28c:	1fff4775 	.word	0x1fff4775

0800d290 <mod_mqttPublishData>:
*
* Return values 	:	en_responseRetCodes_t - return status
*
****************************************************************************/
static en_responseRetCodes_t mod_mqttPublishData(uint8_t * lu8p_data, uint16_t lu16_len, uint8_t* lu8p_topic)
{
 800d290:	b590      	push	{r4, r7, lr}
 800d292:	b09b      	sub	sp, #108	; 0x6c
 800d294:	af02      	add	r7, sp, #8
 800d296:	60f8      	str	r0, [r7, #12]
 800d298:	460b      	mov	r3, r1
 800d29a:	607a      	str	r2, [r7, #4]
 800d29c:	817b      	strh	r3, [r7, #10]
	static uint8_t lsu8_retryCnt = 0;
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d29e:	2304      	movs	r3, #4
 800d2a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	uint8_t *lu8p_Ptr = NULL;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	65bb      	str	r3, [r7, #88]	; 0x58
	uint8_t lu8arr_param[50] = { 0 };
 800d2a8:	f107 0314 	add.w	r3, r7, #20
 800d2ac:	2200      	movs	r2, #0
 800d2ae:	601a      	str	r2, [r3, #0]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	601a      	str	r2, [r3, #0]
 800d2b6:	3304      	adds	r3, #4
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	3304      	adds	r3, #4
 800d2be:	2200      	movs	r2, #0
 800d2c0:	601a      	str	r2, [r3, #0]
 800d2c2:	3304      	adds	r3, #4
 800d2c4:	2200      	movs	r2, #0
 800d2c6:	601a      	str	r2, [r3, #0]
 800d2c8:	3304      	adds	r3, #4
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	601a      	str	r2, [r3, #0]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	2200      	movs	r2, #0
 800d2d2:	601a      	str	r2, [r3, #0]
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	3304      	adds	r3, #4
 800d2dc:	2200      	movs	r2, #0
 800d2de:	601a      	str	r2, [r3, #0]
 800d2e0:	3304      	adds	r3, #4
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	3304      	adds	r3, #4
 800d2e8:	2200      	movs	r2, #0
 800d2ea:	601a      	str	r2, [r3, #0]
 800d2ec:	3304      	adds	r3, #4
 800d2ee:	2200      	movs	r2, #0
 800d2f0:	601a      	str	r2, [r3, #0]
 800d2f2:	3304      	adds	r3, #4
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	801a      	strh	r2, [r3, #0]
 800d2f8:	3302      	adds	r3, #2
	short ls_result = 0;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	uint64_t lu64_totalTime = 0;
 800d300:	f04f 0200 	mov.w	r2, #0
 800d304:	f04f 0300 	mov.w	r3, #0
 800d308:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 
	switch (sen_publishDataState)
 800d30c:	4bba      	ldr	r3, [pc, #744]	; (800d5f8 <mod_mqttPublishData+0x368>)
 800d30e:	781b      	ldrb	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d003      	beq.n	800d31c <mod_mqttPublishData+0x8c>
 800d314:	2b01      	cmp	r3, #1
 800d316:	f000 80c3 	beq.w	800d4a0 <mod_mqttPublishData+0x210>
 800d31a:	e1b7      	b.n	800d68c <mod_mqttPublishData+0x3fc>
	{
		case E_PUBLISH_CMD_STATE:
 
			sprintf((char *) lu8arr_param, (const char*) "%d,1,%d,0,%s,%d\r\n",
 800d31c:	4bb7      	ldr	r3, [pc, #732]	; (800d5fc <mod_mqttPublishData+0x36c>)
 800d31e:	781b      	ldrb	r3, [r3, #0]
 800d320:	461c      	mov	r4, r3
 800d322:	897b      	ldrh	r3, [r7, #10]
 800d324:	f107 0114 	add.w	r1, r7, #20
 800d328:	687a      	ldr	r2, [r7, #4]
 800d32a:	9200      	str	r2, [sp, #0]
 800d32c:	9301      	str	r3, [sp, #4]
 800d32e:	4608      	mov	r0, r1
 800d330:	49b3      	ldr	r1, [pc, #716]	; (800d600 <mod_mqttPublishData+0x370>)
 800d332:	4622      	mov	r2, r4
 800d334:	2300      	movs	r3, #0
 800d336:	f004 fccb 	bl	8011cd0 <siprintf>
					sgu8_mqttClientId, MQTT_PUBLISH_QOS, lu8p_topic, lu16_len);
 
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH,
 800d33a:	f107 0314 	add.w	r3, r7, #20
 800d33e:	2015      	movs	r0, #21
 800d340:	4619      	mov	r1, r3
 800d342:	f7fe fcb1 	bl	800bca8 <mod_sendCmdGetRsp>
 800d346:	4603      	mov	r3, r0
 800d348:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					(uint8_t *) lu8arr_param);
			if (E_RET_SUCCESS == len_retStatus)
 800d34c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d350:	2b00      	cmp	r3, #0
 800d352:	d130      	bne.n	800d3b6 <mod_mqttPublishData+0x126>
			{
				lu8p_Ptr =
 800d354:	48ab      	ldr	r0, [pc, #684]	; (800d604 <mod_mqttPublishData+0x374>)
 800d356:	49ac      	ldr	r1, [pc, #688]	; (800d608 <mod_mqttPublishData+0x378>)
 800d358:	f004 fd1d 	bl	8011d96 <strstr>
 800d35c:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH].mu8arr_respString);
				if (NULL != lu8p_Ptr)
 800d35e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d360:	2b00      	cmp	r3, #0
 800d362:	d01f      	beq.n	800d3a4 <mod_mqttPublishData+0x114>
				{
					lsu8_retryCnt = 0;
 800d364:	4ba9      	ldr	r3, [pc, #676]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d366:	2200      	movs	r2, #0
 800d368:	701a      	strb	r2, [r3, #0]
 
					memset(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString, 0,
 800d36a:	48a9      	ldr	r0, [pc, #676]	; (800d610 <mod_mqttPublishData+0x380>)
 800d36c:	2100      	movs	r1, #0
 800d36e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d372:	f004 f9ee 	bl	8011752 <memset>
							sizeof(gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString));
 
					strncpy(
 800d376:	897b      	ldrh	r3, [r7, #10]
 800d378:	48a5      	ldr	r0, [pc, #660]	; (800d610 <mod_mqttPublishData+0x380>)
 800d37a:	68f9      	ldr	r1, [r7, #12]
 800d37c:	461a      	mov	r2, r3
 800d37e:	f004 fcf8 	bl	8011d72 <strncpy>
							(char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString,
							(char *) lu8p_data, lu16_len);
 
					gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_cmdString[lu16_len++] =
 800d382:	897b      	ldrh	r3, [r7, #10]
 800d384:	1c5a      	adds	r2, r3, #1
 800d386:	817a      	strh	r2, [r7, #10]
 800d388:	461a      	mov	r2, r3
 800d38a:	4ba2      	ldr	r3, [pc, #648]	; (800d614 <mod_mqttPublishData+0x384>)
 800d38c:	4413      	add	r3, r2
 800d38e:	f503 43cc 	add.w	r3, r3, #26112	; 0x6600
 800d392:	3318      	adds	r3, #24
 800d394:	2200      	movs	r2, #0
 800d396:	701a      	strb	r2, [r3, #0]
							'\0';
 
					sen_publishDataState = E_PUBLISH_DATA_STATE;
 800d398:	4b97      	ldr	r3, [pc, #604]	; (800d5f8 <mod_mqttPublishData+0x368>)
 800d39a:	2201      	movs	r2, #1
 800d39c:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d39e:	2304      	movs	r3, #4
 800d3a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d3a4:	4b9c      	ldr	r3, [pc, #624]	; (800d618 <mod_mqttPublishData+0x388>)
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d3aa:	4896      	ldr	r0, [pc, #600]	; (800d604 <mod_mqttPublishData+0x374>)
 800d3ac:	2100      	movs	r1, #0
 800d3ae:	2240      	movs	r2, #64	; 0x40
 800d3b0:	f004 f9cf 	bl	8011752 <memset>
 800d3b4:	e073      	b.n	800d49e <mod_mqttPublishData+0x20e>
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d3b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3ba:	2b0b      	cmp	r3, #11
 800d3bc:	d107      	bne.n	800d3ce <mod_mqttPublishData+0x13e>
			{
				if(sgu16_cmeError == 58)
 800d3be:	4b97      	ldr	r3, [pc, #604]	; (800d61c <mod_mqttPublishData+0x38c>)
 800d3c0:	881b      	ldrh	r3, [r3, #0]
 800d3c2:	2b3a      	cmp	r3, #58	; 0x3a
 800d3c4:	d16b      	bne.n	800d49e <mod_mqttPublishData+0x20e>
				{
					len_retStatus = E_RET_CME_ERROR;
 800d3c6:	230b      	movs	r3, #11
 800d3c8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				{
					lsu8_retryCnt = 0;
					len_retStatus = E_RET_TIMEOUT_ERROR;
				}
			}
		break;
 800d3cc:	e162      	b.n	800d694 <mod_mqttPublishData+0x404>
				if(sgu16_cmeError == 58)
				{
					len_retStatus = E_RET_CME_ERROR;
				}
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d3ce:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d3d2:	2b03      	cmp	r3, #3
 800d3d4:	d146      	bne.n	800d464 <mod_mqttPublishData+0x1d4>
			{
				lsu8_retryCnt = 0;
 800d3d6:	4b8d      	ldr	r3, [pc, #564]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d3d8:	2200      	movs	r2, #0
 800d3da:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d3dc:	4889      	ldr	r0, [pc, #548]	; (800d604 <mod_mqttPublishData+0x374>)
 800d3de:	4990      	ldr	r1, [pc, #576]	; (800d620 <mod_mqttPublishData+0x390>)
 800d3e0:	f004 fcd9 	bl	8011d96 <strstr>
 800d3e4:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d3e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d02f      	beq.n	800d44c <mod_mqttPublishData+0x1bc>
				{
					if (lu8p_Ptr != NULL)
 800d3ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d028      	beq.n	800d444 <mod_mqttPublishData+0x1b4>
					{
						lu8p_Ptr += 10;
 800d3f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d3f4:	330a      	adds	r3, #10
 800d3f6:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d3f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d3fa:	f004 f96f 	bl	80116dc <atoi>
 800d3fe:	4603      	mov	r3, r0
 800d400:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d404:	4b7d      	ldr	r3, [pc, #500]	; (800d5fc <mod_mqttPublishData+0x36c>)
 800d406:	781b      	ldrb	r3, [r3, #0]
 800d408:	461a      	mov	r2, r3
 800d40a:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d40e:	429a      	cmp	r2, r3
 800d410:	d114      	bne.n	800d43c <mod_mqttPublishData+0x1ac>
						{
							lu8p_Ptr += 2;
 800d412:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d414:	3302      	adds	r3, #2
 800d416:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d418:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d41a:	f004 f95f 	bl	80116dc <atoi>
 800d41e:	4603      	mov	r3, r0
 800d420:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d424:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d428:	2b01      	cmp	r3, #1
 800d42a:	d103      	bne.n	800d434 <mod_mqttPublishData+0x1a4>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d42c:	230a      	movs	r3, #10
 800d42e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d432:	e00e      	b.n	800d452 <mod_mqttPublishData+0x1c2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d434:	2302      	movs	r3, #2
 800d436:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d43a:	e00a      	b.n	800d452 <mod_mqttPublishData+0x1c2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d43c:	2302      	movs	r3, #2
 800d43e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d442:	e006      	b.n	800d452 <mod_mqttPublishData+0x1c2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d444:	2302      	movs	r3, #2
 800d446:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d44a:	e002      	b.n	800d452 <mod_mqttPublishData+0x1c2>
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d44c:	2302      	movs	r3, #2
 800d44e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d452:	4b71      	ldr	r3, [pc, #452]	; (800d618 <mod_mqttPublishData+0x388>)
 800d454:	2200      	movs	r2, #0
 800d456:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d458:	486a      	ldr	r0, [pc, #424]	; (800d604 <mod_mqttPublishData+0x374>)
 800d45a:	2100      	movs	r1, #0
 800d45c:	2240      	movs	r2, #64	; 0x40
 800d45e:	f004 f978 	bl	8011752 <memset>
 800d462:	e01c      	b.n	800d49e <mod_mqttPublishData+0x20e>
 
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d468:	2b04      	cmp	r3, #4
 800d46a:	d018      	beq.n	800d49e <mod_mqttPublishData+0x20e>
			{
				lsu8_retryCnt++;
 800d46c:	4b67      	ldr	r3, [pc, #412]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d46e:	781b      	ldrb	r3, [r3, #0]
 800d470:	3301      	adds	r3, #1
 800d472:	b2da      	uxtb	r2, r3
 800d474:	4b65      	ldr	r3, [pc, #404]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d476:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d478:	4b64      	ldr	r3, [pc, #400]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d803      	bhi.n	800d488 <mod_mqttPublishData+0x1f8>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d480:	2304      	movs	r3, #4
 800d482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d486:	e00a      	b.n	800d49e <mod_mqttPublishData+0x20e>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d488:	4b60      	ldr	r3, [pc, #384]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	2b03      	cmp	r3, #3
 800d48e:	d906      	bls.n	800d49e <mod_mqttPublishData+0x20e>
				{
					lsu8_retryCnt = 0;
 800d490:	4b5e      	ldr	r3, [pc, #376]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d492:	2200      	movs	r2, #0
 800d494:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d496:	2306      	movs	r3, #6
 800d498:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		break;
 800d49c:	e0fa      	b.n	800d694 <mod_mqttPublishData+0x404>
 800d49e:	e0f9      	b.n	800d694 <mod_mqttPublishData+0x404>
 
		case E_PUBLISH_DATA_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_PUBLISH_DATA, NULL);
 800d4a0:	2016      	movs	r0, #22
 800d4a2:	2100      	movs	r1, #0
 800d4a4:	f7fe fc00 	bl	800bca8 <mod_sendCmdGetRsp>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (E_RET_SUCCESS == len_retStatus)
 800d4ae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d160      	bne.n	800d578 <mod_mqttPublishData+0x2e8>
			{
				lu8p_Ptr =
 800d4b6:	4853      	ldr	r0, [pc, #332]	; (800d604 <mod_mqttPublishData+0x374>)
 800d4b8:	495a      	ldr	r1, [pc, #360]	; (800d624 <mod_mqttPublishData+0x394>)
 800d4ba:	f004 fc6c 	bl	8011d96 <strstr>
 800d4be:	65b8      	str	r0, [r7, #88]	; 0x58
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_MQTT_PUBLISH_DATA].mu8arr_otherRspString);
				if (NULL != lu8p_Ptr)
 800d4c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d04f      	beq.n	800d566 <mod_mqttPublishData+0x2d6>
				{
					lu8p_Ptr += 11;
 800d4c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4c8:	330b      	adds	r3, #11
 800d4ca:	65bb      	str	r3, [r7, #88]	; 0x58
					ls_result = atoi((const char *) lu8p_Ptr);
 800d4cc:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4ce:	f004 f905 	bl	80116dc <atoi>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
					if (sgu8_mqttClientId == ls_result)
 800d4d8:	4b48      	ldr	r3, [pc, #288]	; (800d5fc <mod_mqttPublishData+0x36c>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	461a      	mov	r2, r3
 800d4de:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d13f      	bne.n	800d566 <mod_mqttPublishData+0x2d6>
					{
						lu8p_Ptr += 2;
 800d4e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d4e8:	3302      	adds	r3, #2
 800d4ea:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((const char *) lu8p_Ptr);
 800d4ec:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d4ee:	f004 f8f5 	bl	80116dc <atoi>
 800d4f2:	4603      	mov	r3, r0
 800d4f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (1 == ls_result)	//msg id
 800d4f8:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d132      	bne.n	800d566 <mod_mqttPublishData+0x2d6>
						{
							lu8p_Ptr += 2;
 800d500:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d502:	3302      	adds	r3, #2
 800d504:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((const char *) lu8p_Ptr);
 800d506:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d508:	f004 f8e8 	bl	80116dc <atoi>
 800d50c:	4603      	mov	r3, r0
 800d50e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (E_PUB_SUCCESS == ls_result)	//Packet sent successfully and ACK received
 800d512:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d516:	2b00      	cmp	r3, #0
 800d518:	d109      	bne.n	800d52e <mod_mqttPublishData+0x29e>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_SUCCESS;
 800d51a:	4b43      	ldr	r3, [pc, #268]	; (800d628 <mod_mqttPublishData+0x398>)
 800d51c:	2200      	movs	r2, #0
 800d51e:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_SUCCESS;
 800d520:	2300      	movs	r3, #0
 800d522:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
								sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d526:	4b34      	ldr	r3, [pc, #208]	; (800d5f8 <mod_mqttPublishData+0x368>)
 800d528:	2200      	movs	r2, #0
 800d52a:	701a      	strb	r2, [r3, #0]
 800d52c:	e01b      	b.n	800d566 <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_PACK_RETRAN == ls_result)	//Packet retransmission
 800d52e:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d532:	2b01      	cmp	r3, #1
 800d534:	d106      	bne.n	800d544 <mod_mqttPublishData+0x2b4>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_PACK_RETRAN;
 800d536:	4b3c      	ldr	r3, [pc, #240]	; (800d628 <mod_mqttPublishData+0x398>)
 800d538:	2201      	movs	r2, #1
 800d53a:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_INPROGRESS;
 800d53c:	2304      	movs	r3, #4
 800d53e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d542:	e010      	b.n	800d566 <mod_mqttPublishData+0x2d6>
							}
							else if(E_PUB_FAILED_SEND_PACK == ls_result)	//Failed to send packet
 800d544:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d548:	2b02      	cmp	r3, #2
 800d54a:	d106      	bne.n	800d55a <mod_mqttPublishData+0x2ca>
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_FAILED_SEND_PACK;
 800d54c:	4b36      	ldr	r3, [pc, #216]	; (800d628 <mod_mqttPublishData+0x398>)
 800d54e:	2202      	movs	r2, #2
 800d550:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d552:	2302      	movs	r3, #2
 800d554:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d558:	e005      	b.n	800d566 <mod_mqttPublishData+0x2d6>
							}
							else
							{
								gst_deviceStatus.men_mqttPublishErrorCode = E_PUB_UNKNOWN_ERROR;
 800d55a:	4b33      	ldr	r3, [pc, #204]	; (800d628 <mod_mqttPublishData+0x398>)
 800d55c:	2203      	movs	r2, #3
 800d55e:	71da      	strb	r2, [r3, #7]
								len_retStatus = E_RET_FAILED;
 800d560:	2302      	movs	r3, #2
 800d562:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							}
						}
					}
				}
 
				sgu8_respCount = 0;
 800d566:	4b2c      	ldr	r3, [pc, #176]	; (800d618 <mod_mqttPublishData+0x388>)
 800d568:	2200      	movs	r2, #0
 800d56a:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d56c:	4825      	ldr	r0, [pc, #148]	; (800d604 <mod_mqttPublishData+0x374>)
 800d56e:	2100      	movs	r1, #0
 800d570:	2240      	movs	r2, #64	; 0x40
 800d572:	f004 f8ee 	bl	8011752 <memset>
 800d576:	e088      	b.n	800d68a <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_RSP_ERROR == len_retStatus)
 800d578:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d57c:	2b03      	cmp	r3, #3
 800d57e:	d164      	bne.n	800d64a <mod_mqttPublishData+0x3ba>
			{
				lsu8_retryCnt = 0;
 800d580:	4b22      	ldr	r3, [pc, #136]	; (800d60c <mod_mqttPublishData+0x37c>)
 800d582:	2200      	movs	r2, #0
 800d584:	701a      	strb	r2, [r3, #0]
				lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800d586:	481f      	ldr	r0, [pc, #124]	; (800d604 <mod_mqttPublishData+0x374>)
 800d588:	4925      	ldr	r1, [pc, #148]	; (800d620 <mod_mqttPublishData+0x390>)
 800d58a:	f004 fc04 	bl	8011d96 <strstr>
 800d58e:	65b8      	str	r0, [r7, #88]	; 0x58
						(const char *) QMTSTAT);
				if (lu8p_Ptr != NULL)
 800d590:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d592:	2b00      	cmp	r3, #0
 800d594:	d04a      	beq.n	800d62c <mod_mqttPublishData+0x39c>
				{
					if (lu8p_Ptr != NULL)
 800d596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d028      	beq.n	800d5ee <mod_mqttPublishData+0x35e>
					{
						lu8p_Ptr += 10;
 800d59c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d59e:	330a      	adds	r3, #10
 800d5a0:	65bb      	str	r3, [r7, #88]	; 0x58
						ls_result = atoi((char *) lu8p_Ptr);
 800d5a2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d5a4:	f004 f89a 	bl	80116dc <atoi>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
						if (sgu8_mqttClientId == ls_result)	//check client Idx
 800d5ae:	4b13      	ldr	r3, [pc, #76]	; (800d5fc <mod_mqttPublishData+0x36c>)
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	461a      	mov	r2, r3
 800d5b4:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d5b8:	429a      	cmp	r2, r3
 800d5ba:	d114      	bne.n	800d5e6 <mod_mqttPublishData+0x356>
						{
							lu8p_Ptr += 2;
 800d5bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d5be:	3302      	adds	r3, #2
 800d5c0:	65bb      	str	r3, [r7, #88]	; 0x58
							ls_result = atoi((char *) lu8p_Ptr);	//check error code
 800d5c2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800d5c4:	f004 f88a 	bl	80116dc <atoi>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
							if (1 == ls_result)
 800d5ce:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d103      	bne.n	800d5de <mod_mqttPublishData+0x34e>
							{
								len_retStatus = E_RET_CONN_CLOSED_ERROR;
 800d5d6:	230a      	movs	r3, #10
 800d5d8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5dc:	e029      	b.n	800d632 <mod_mqttPublishData+0x3a2>
							}
							else
							{
								len_retStatus = E_RET_FAILED;
 800d5de:	2302      	movs	r3, #2
 800d5e0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5e4:	e025      	b.n	800d632 <mod_mqttPublishData+0x3a2>
							}
						}
						else
						{
							len_retStatus = E_RET_FAILED;
 800d5e6:	2302      	movs	r3, #2
 800d5e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5ec:	e021      	b.n	800d632 <mod_mqttPublishData+0x3a2>
						}
					}
					else
					{
						len_retStatus = E_RET_FAILED;
 800d5ee:	2302      	movs	r3, #2
 800d5f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d5f4:	e01d      	b.n	800d632 <mod_mqttPublishData+0x3a2>
 800d5f6:	bf00      	nop
 800d5f8:	1fff4774 	.word	0x1fff4774
 800d5fc:	1fff476d 	.word	0x1fff476d
 800d600:	08013ef4 	.word	0x08013ef4
 800d604:	1fff46cc 	.word	0x1fff46cc
 800d608:	1fff0a64 	.word	0x1fff0a64
 800d60c:	1fff478c 	.word	0x1fff478c
 800d610:	1fff0b00 	.word	0x1fff0b00
 800d614:	1ffea4e8 	.word	0x1ffea4e8
 800d618:	1fff476c 	.word	0x1fff476c
 800d61c:	1fff476e 	.word	0x1fff476e
 800d620:	08013dd4 	.word	0x08013dd4
 800d624:	1fff0f3a 	.word	0x1fff0f3a
 800d628:	1ffea4dc 	.word	0x1ffea4dc
					}
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d62c:	2302      	movs	r3, #2
 800d62e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
 
				sgu8_respCount = 0;
 800d632:	4b1b      	ldr	r3, [pc, #108]	; (800d6a0 <mod_mqttPublishData+0x410>)
 800d634:	2200      	movs	r2, #0
 800d636:	701a      	strb	r2, [r3, #0]
				memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d638:	481a      	ldr	r0, [pc, #104]	; (800d6a4 <mod_mqttPublishData+0x414>)
 800d63a:	2100      	movs	r1, #0
 800d63c:	2240      	movs	r2, #64	; 0x40
 800d63e:	f004 f888 	bl	8011752 <memset>
 
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d642:	4b19      	ldr	r3, [pc, #100]	; (800d6a8 <mod_mqttPublishData+0x418>)
 800d644:	2200      	movs	r2, #0
 800d646:	701a      	strb	r2, [r3, #0]
 800d648:	e01f      	b.n	800d68a <mod_mqttPublishData+0x3fa>
			}
			else if (E_RET_INPROGRESS != len_retStatus)
 800d64a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d01b      	beq.n	800d68a <mod_mqttPublishData+0x3fa>
			{
				lsu8_retryCnt++;
 800d652:	4b16      	ldr	r3, [pc, #88]	; (800d6ac <mod_mqttPublishData+0x41c>)
 800d654:	781b      	ldrb	r3, [r3, #0]
 800d656:	3301      	adds	r3, #1
 800d658:	b2da      	uxtb	r2, r3
 800d65a:	4b14      	ldr	r3, [pc, #80]	; (800d6ac <mod_mqttPublishData+0x41c>)
 800d65c:	701a      	strb	r2, [r3, #0]
				if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d65e:	4b13      	ldr	r3, [pc, #76]	; (800d6ac <mod_mqttPublishData+0x41c>)
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	2b02      	cmp	r3, #2
 800d664:	d803      	bhi.n	800d66e <mod_mqttPublishData+0x3de>
				{
					len_retStatus = E_RET_INPROGRESS;
 800d666:	2304      	movs	r3, #4
 800d668:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800d66c:	e009      	b.n	800d682 <mod_mqttPublishData+0x3f2>
				}
				else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d66e:	4b0f      	ldr	r3, [pc, #60]	; (800d6ac <mod_mqttPublishData+0x41c>)
 800d670:	781b      	ldrb	r3, [r3, #0]
 800d672:	2b03      	cmp	r3, #3
 800d674:	d905      	bls.n	800d682 <mod_mqttPublishData+0x3f2>
				{
					lsu8_retryCnt = 0;
 800d676:	4b0d      	ldr	r3, [pc, #52]	; (800d6ac <mod_mqttPublishData+0x41c>)
 800d678:	2200      	movs	r2, #0
 800d67a:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_TIMEOUT_ERROR;
 800d67c:	2306      	movs	r3, #6
 800d67e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
				sen_publishDataState = E_PUBLISH_CMD_STATE;
 800d682:	4b09      	ldr	r3, [pc, #36]	; (800d6a8 <mod_mqttPublishData+0x418>)
 800d684:	2200      	movs	r2, #0
 800d686:	701a      	strb	r2, [r3, #0]
			}
		break;
 800d688:	e004      	b.n	800d694 <mod_mqttPublishData+0x404>
 800d68a:	e003      	b.n	800d694 <mod_mqttPublishData+0x404>
 
		default:
			len_retStatus = E_RET_SUCCESS;
 800d68c:	2300      	movs	r3, #0
 800d68e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		break;
 800d692:	bf00      	nop
	}
 
	return len_retStatus;
 800d694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800d698:	4618      	mov	r0, r3
 800d69a:	3764      	adds	r7, #100	; 0x64
 800d69c:	46bd      	mov	sp, r7
 800d69e:	bd90      	pop	{r4, r7, pc}
 800d6a0:	1fff476c 	.word	0x1fff476c
 800d6a4:	1fff46cc 	.word	0x1fff46cc
 800d6a8:	1fff4774 	.word	0x1fff4774
 800d6ac:	1fff478c 	.word	0x1fff478c

0800d6b0 <mod_getCurrentTime>:
 *
 * Return values 	:	uint8_t
 *
 ****************************************************************************/
uint8_t mod_getCurrentTime(uint8_t *lu8p_data)
{
 800d6b0:	b4b0      	push	{r4, r5, r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	uint8_t lu8_ret = 0;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	73fb      	strb	r3, [r7, #15]

	if (NULL != lu8p_data)
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d00c      	beq.n	800d6dc <mod_getCurrentTime+0x2c>
	{
		memcpy(lu8p_data, gu8_dataTime, TIME_SIZE);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	4a08      	ldr	r2, [pc, #32]	; (800d6e8 <mod_getCurrentTime+0x38>)
 800d6c6:	461d      	mov	r5, r3
 800d6c8:	4614      	mov	r4, r2
 800d6ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6cc:	6028      	str	r0, [r5, #0]
 800d6ce:	6069      	str	r1, [r5, #4]
 800d6d0:	60aa      	str	r2, [r5, #8]
 800d6d2:	60eb      	str	r3, [r5, #12]
 800d6d4:	6820      	ldr	r0, [r4, #0]
 800d6d6:	6128      	str	r0, [r5, #16]
		lu8_ret = TIME_SIZE;
 800d6d8:	2314      	movs	r3, #20
 800d6da:	73fb      	strb	r3, [r7, #15]
	}

	return lu8_ret;
 800d6dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6de:	4618      	mov	r0, r3
 800d6e0:	3714      	adds	r7, #20
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bcb0      	pop	{r4, r5, r7}
 800d6e6:	4770      	bx	lr
 800d6e8:	1fff4758 	.word	0x1fff4758

0800d6ec <mod_mqttSslMode>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslMode(uint8_t *lu8p_param)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b084      	sub	sp, #16
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d6f4:	2304      	movs	r3, #4
 800d6f6:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_CFG, lu8p_param);
 800d6f8:	2011      	movs	r0, #17
 800d6fa:	6879      	ldr	r1, [r7, #4]
 800d6fc:	f7fe fad4 	bl	800bca8 <mod_sendCmdGetRsp>
 800d700:	4603      	mov	r3, r0
 800d702:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800d704:	7bfb      	ldrb	r3, [r7, #15]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d105      	bne.n	800d716 <mod_mqttSslMode+0x2a>
	{
		lsu8_retryCnt = 0;
 800d70a:	4b11      	ldr	r3, [pc, #68]	; (800d750 <mod_mqttSslMode+0x64>)
 800d70c:	2200      	movs	r2, #0
 800d70e:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d710:	2300      	movs	r3, #0
 800d712:	73fb      	strb	r3, [r7, #15]
 800d714:	e016      	b.n	800d744 <mod_mqttSslMode+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	2b04      	cmp	r3, #4
 800d71a:	d013      	beq.n	800d744 <mod_mqttSslMode+0x58>
	{
		lsu8_retryCnt++;
 800d71c:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <mod_mqttSslMode+0x64>)
 800d71e:	781b      	ldrb	r3, [r3, #0]
 800d720:	3301      	adds	r3, #1
 800d722:	b2da      	uxtb	r2, r3
 800d724:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <mod_mqttSslMode+0x64>)
 800d726:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d728:	4b09      	ldr	r3, [pc, #36]	; (800d750 <mod_mqttSslMode+0x64>)
 800d72a:	781b      	ldrb	r3, [r3, #0]
 800d72c:	2b02      	cmp	r3, #2
 800d72e:	d802      	bhi.n	800d736 <mod_mqttSslMode+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d730:	2304      	movs	r3, #4
 800d732:	73fb      	strb	r3, [r7, #15]
 800d734:	e006      	b.n	800d744 <mod_mqttSslMode+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d736:	4b06      	ldr	r3, [pc, #24]	; (800d750 <mod_mqttSslMode+0x64>)
 800d738:	781b      	ldrb	r3, [r3, #0]
 800d73a:	2b03      	cmp	r3, #3
 800d73c:	d902      	bls.n	800d744 <mod_mqttSslMode+0x58>
		{
			lsu8_retryCnt = 0;
 800d73e:	4b04      	ldr	r3, [pc, #16]	; (800d750 <mod_mqttSslMode+0x64>)
 800d740:	2200      	movs	r2, #0
 800d742:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d744:	7bfb      	ldrb	r3, [r7, #15]
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}
 800d74e:	bf00      	nop
 800d750:	1fff478d 	.word	0x1fff478d

0800d754 <mod_mqttSslConfgi>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslConfgi(uint8_t *lu8p_param)
{
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d75c:	2304      	movs	r3, #4
 800d75e:	73fb      	strb	r3, [r7, #15]
	static uint8_t lsu8_retryCnt = 0;

	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_SSL_CFG, lu8p_param);
 800d760:	2012      	movs	r0, #18
 800d762:	6879      	ldr	r1, [r7, #4]
 800d764:	f7fe faa0 	bl	800bca8 <mod_sendCmdGetRsp>
 800d768:	4603      	mov	r3, r0
 800d76a:	73fb      	strb	r3, [r7, #15]
	if (E_RET_SUCCESS == len_retStatus)
 800d76c:	7bfb      	ldrb	r3, [r7, #15]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d105      	bne.n	800d77e <mod_mqttSslConfgi+0x2a>
	{
		lsu8_retryCnt = 0;
 800d772:	4b11      	ldr	r3, [pc, #68]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d774:	2200      	movs	r2, #0
 800d776:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800d778:	2300      	movs	r3, #0
 800d77a:	73fb      	strb	r3, [r7, #15]
 800d77c:	e016      	b.n	800d7ac <mod_mqttSslConfgi+0x58>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800d77e:	7bfb      	ldrb	r3, [r7, #15]
 800d780:	2b04      	cmp	r3, #4
 800d782:	d013      	beq.n	800d7ac <mod_mqttSslConfgi+0x58>
	{
		lsu8_retryCnt++;
 800d784:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d786:	781b      	ldrb	r3, [r3, #0]
 800d788:	3301      	adds	r3, #1
 800d78a:	b2da      	uxtb	r2, r3
 800d78c:	4b0a      	ldr	r3, [pc, #40]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d78e:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800d790:	4b09      	ldr	r3, [pc, #36]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	2b02      	cmp	r3, #2
 800d796:	d802      	bhi.n	800d79e <mod_mqttSslConfgi+0x4a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800d798:	2304      	movs	r3, #4
 800d79a:	73fb      	strb	r3, [r7, #15]
 800d79c:	e006      	b.n	800d7ac <mod_mqttSslConfgi+0x58>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800d79e:	4b06      	ldr	r3, [pc, #24]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d7a0:	781b      	ldrb	r3, [r3, #0]
 800d7a2:	2b03      	cmp	r3, #3
 800d7a4:	d902      	bls.n	800d7ac <mod_mqttSslConfgi+0x58>
		{
			lsu8_retryCnt = 0;
 800d7a6:	4b04      	ldr	r3, [pc, #16]	; (800d7b8 <mod_mqttSslConfgi+0x64>)
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	701a      	strb	r2, [r3, #0]
		}
	}

	return len_retStatus;
 800d7ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3710      	adds	r7, #16
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}
 800d7b6:	bf00      	nop
 800d7b8:	1fff478e 	.word	0x1fff478e

0800d7bc <mod_mqttSslCertUpload>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertUpload(en_sslFile_t len_sslFile)
{
 800d7bc:	b590      	push	{r4, r7, lr}
 800d7be:	b093      	sub	sp, #76	; 0x4c
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800d7c6:	2304      	movs	r3, #4
 800d7c8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[50] = { 0 };
 800d7cc:	f107 0308 	add.w	r3, r7, #8
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	3304      	adds	r3, #4
 800d7dc:	2200      	movs	r2, #0
 800d7de:	601a      	str	r2, [r3, #0]
 800d7e0:	3304      	adds	r3, #4
 800d7e2:	2200      	movs	r2, #0
 800d7e4:	601a      	str	r2, [r3, #0]
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	601a      	str	r2, [r3, #0]
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	601a      	str	r2, [r3, #0]
 800d7f2:	3304      	adds	r3, #4
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	601a      	str	r2, [r3, #0]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	601a      	str	r2, [r3, #0]
 800d7fe:	3304      	adds	r3, #4
 800d800:	2200      	movs	r2, #0
 800d802:	601a      	str	r2, [r3, #0]
 800d804:	3304      	adds	r3, #4
 800d806:	2200      	movs	r2, #0
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	3304      	adds	r3, #4
 800d80c:	2200      	movs	r2, #0
 800d80e:	601a      	str	r2, [r3, #0]
 800d810:	3304      	adds	r3, #4
 800d812:	2200      	movs	r2, #0
 800d814:	601a      	str	r2, [r3, #0]
 800d816:	3304      	adds	r3, #4
 800d818:	2200      	movs	r2, #0
 800d81a:	801a      	strh	r2, [r3, #0]
 800d81c:	3302      	adds	r3, #2
	static uint8_t *slu32_pos = NULL;
	static uint16_t lu16_totalFileSize = 0;
	uint8_t *lu8p_Ptr = NULL;
 800d81e:	2300      	movs	r3, #0
 800d820:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t *lu8p_saveptr = NULL;
 800d822:	2300      	movs	r3, #0
 800d824:	63fb      	str	r3, [r7, #60]	; 0x3c

	switch (sen_sslFileUpldState)
 800d826:	4b77      	ldr	r3, [pc, #476]	; (800da04 <mod_mqttSslCertUpload+0x248>)
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d003      	beq.n	800d836 <mod_mqttSslCertUpload+0x7a>
 800d82e:	2b01      	cmp	r3, #1
 800d830:	f000 808d 	beq.w	800d94e <mod_mqttSslCertUpload+0x192>
				}
			}
		break;

		default:
		break;
 800d834:	e0e0      	b.n	800d9f8 <mod_mqttSslCertUpload+0x23c>

	switch (sen_sslFileUpldState)
	{
		case E_SSL_UPLD_CMD_STATE:

			if(E_CA_CERT_FILE == len_sslFile)
 800d836:	79fb      	ldrb	r3, [r7, #7]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d112      	bne.n	800d862 <mod_mqttSslCertUpload+0xa6>
			{
				slu32_pos = sgu8arr_caCert;
 800d83c:	4b72      	ldr	r3, [pc, #456]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d83e:	4a73      	ldr	r2, [pc, #460]	; (800da0c <mod_mqttSslCertUpload+0x250>)
 800d840:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_caCert);
 800d842:	4b73      	ldr	r3, [pc, #460]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d844:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800d848:	801a      	strh	r2, [r3, #0]
				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CA_FILENAME,
 800d84a:	4b71      	ldr	r3, [pc, #452]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	461c      	mov	r4, r3
 800d850:	f107 0308 	add.w	r3, r7, #8
 800d854:	4618      	mov	r0, r3
 800d856:	496f      	ldr	r1, [pc, #444]	; (800da14 <mod_mqttSslCertUpload+0x258>)
 800d858:	4a6f      	ldr	r2, [pc, #444]	; (800da18 <mod_mqttSslCertUpload+0x25c>)
 800d85a:	4623      	mov	r3, r4
 800d85c:	f004 fa38 	bl	8011cd0 <siprintf>
 800d860:	e02a      	b.n	800d8b8 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CC_CERT_FILE == len_sslFile)
 800d862:	79fb      	ldrb	r3, [r7, #7]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d112      	bne.n	800d88e <mod_mqttSslCertUpload+0xd2>
			{
				slu32_pos = sgu8arr_ccCert;
 800d868:	4b67      	ldr	r3, [pc, #412]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d86a:	4a6c      	ldr	r2, [pc, #432]	; (800da1c <mod_mqttSslCertUpload+0x260>)
 800d86c:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ccCert);
 800d86e:	4b68      	ldr	r3, [pc, #416]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d870:	f240 42c4 	movw	r2, #1220	; 0x4c4
 800d874:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CC_FILENAME,
 800d876:	4b66      	ldr	r3, [pc, #408]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d878:	881b      	ldrh	r3, [r3, #0]
 800d87a:	461c      	mov	r4, r3
 800d87c:	f107 0308 	add.w	r3, r7, #8
 800d880:	4618      	mov	r0, r3
 800d882:	4964      	ldr	r1, [pc, #400]	; (800da14 <mod_mqttSslCertUpload+0x258>)
 800d884:	4a66      	ldr	r2, [pc, #408]	; (800da20 <mod_mqttSslCertUpload+0x264>)
 800d886:	4623      	mov	r3, r4
 800d888:	f004 fa22 	bl	8011cd0 <siprintf>
 800d88c:	e014      	b.n	800d8b8 <mod_mqttSslCertUpload+0xfc>
						lu16_totalFileSize);
			}
			else if(E_CK_CERT_FILE == len_sslFile)
 800d88e:	79fb      	ldrb	r3, [r7, #7]
 800d890:	2b02      	cmp	r3, #2
 800d892:	d111      	bne.n	800d8b8 <mod_mqttSslCertUpload+0xfc>
			{
				slu32_pos = sgu8arr_ckCert;
 800d894:	4b5c      	ldr	r3, [pc, #368]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d896:	4a63      	ldr	r2, [pc, #396]	; (800da24 <mod_mqttSslCertUpload+0x268>)
 800d898:	601a      	str	r2, [r3, #0]
				lu16_totalFileSize = sizeof(sgu8arr_ckCert);
 800d89a:	4b5d      	ldr	r3, [pc, #372]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d89c:	f240 628b 	movw	r2, #1675	; 0x68b
 800d8a0:	801a      	strh	r2, [r3, #0]

				sprintf((char *) lu8arr_param, "%s,%d,60,1\r\n", MQTT_SSL_CK_FILENAME,
 800d8a2:	4b5b      	ldr	r3, [pc, #364]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	461c      	mov	r4, r3
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	4959      	ldr	r1, [pc, #356]	; (800da14 <mod_mqttSslCertUpload+0x258>)
 800d8b0:	4a5d      	ldr	r2, [pc, #372]	; (800da28 <mod_mqttSslCertUpload+0x26c>)
 800d8b2:	4623      	mov	r3, r4
 800d8b4:	f004 fa0c 	bl	8011cd0 <siprintf>
						lu16_totalFileSize);
			}

			len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_UPLOAD_CMD,
 800d8b8:	f107 0308 	add.w	r3, r7, #8
 800d8bc:	201a      	movs	r0, #26
 800d8be:	4619      	mov	r1, r3
 800d8c0:	f7fe f9f2 	bl	800bca8 <mod_sendCmdGetRsp>
 800d8c4:	4603      	mov	r3, r0
 800d8c6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					(uint8_t *) lu8arr_param);

			if (E_RET_SUCCESS == len_retStatus)
 800d8ca:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d12e      	bne.n	800d930 <mod_mqttSslCertUpload+0x174>
			{
				lu8p_Ptr =
 800d8d2:	4856      	ldr	r0, [pc, #344]	; (800da2c <mod_mqttSslCertUpload+0x270>)
 800d8d4:	4956      	ldr	r1, [pc, #344]	; (800da30 <mod_mqttSslCertUpload+0x274>)
 800d8d6:	f004 fa5e 	bl	8011d96 <strstr>
 800d8da:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_FILE_UPLOAD_CMD].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800d8dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d022      	beq.n	800d928 <mod_mqttSslCertUpload+0x16c>
				{
					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800d8e2:	4854      	ldr	r0, [pc, #336]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d8e4:	2100      	movs	r1, #0
 800d8e6:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d8ea:	f003 ff32 	bl	8011752 <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if (lu16_totalFileSize > 1024)
 800d8ee:	4b48      	ldr	r3, [pc, #288]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d8f0:	881b      	ldrh	r3, [r3, #0]
 800d8f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d8f6:	d908      	bls.n	800d90a <mod_mqttSslCertUpload+0x14e>
					{
						strncpy(
 800d8f8:	4b43      	ldr	r3, [pc, #268]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	484d      	ldr	r0, [pc, #308]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d8fe:	4619      	mov	r1, r3
 800d900:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d904:	f004 fa35 	bl	8011d72 <strncpy>
 800d908:	e007      	b.n	800d91a <mod_mqttSslCertUpload+0x15e>
								(char *) slu32_pos, 1024);
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[1024] = '\0';
					}
					else
					{
						strncpy(
 800d90a:	4b3f      	ldr	r3, [pc, #252]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	4849      	ldr	r0, [pc, #292]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d910:	4619      	mov	r1, r3
 800d912:	f240 42a3 	movw	r2, #1187	; 0x4a3
 800d916:	f004 fa2c 	bl	8011d72 <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, sizeof(sgu8arr_caCert));
//						gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString[sizeof(sgu8arr_caCert)+1] = '\0';
					}

					sen_sslFileUpldState = E_SSL_UPLD_FILE_CONTENT_STATE;
 800d91a:	4b3a      	ldr	r3, [pc, #232]	; (800da04 <mod_mqttSslCertUpload+0x248>)
 800d91c:	2201      	movs	r2, #1
 800d91e:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_INPROGRESS;
 800d920:	2304      	movs	r3, #4
 800d922:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800d926:	e011      	b.n	800d94c <mod_mqttSslCertUpload+0x190>
				}
				else
				{
					len_retStatus = E_RET_FAILED;
 800d928:	2302      	movs	r3, #2
 800d92a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800d92e:	e063      	b.n	800d9f8 <mod_mqttSslCertUpload+0x23c>
				else
				{
					len_retStatus = E_RET_FAILED;
				}
			}
			else if(E_RET_CME_ERROR == len_retStatus)
 800d930:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d934:	2b0b      	cmp	r3, #11
 800d936:	d109      	bne.n	800d94c <mod_mqttSslCertUpload+0x190>
			{
				if(407 == sgu16_cmeError)	//File already exists
 800d938:	4b3f      	ldr	r3, [pc, #252]	; (800da38 <mod_mqttSslCertUpload+0x27c>)
 800d93a:	881b      	ldrh	r3, [r3, #0]
 800d93c:	f240 1297 	movw	r2, #407	; 0x197
 800d940:	4293      	cmp	r3, r2
 800d942:	d103      	bne.n	800d94c <mod_mqttSslCertUpload+0x190>
				{
					len_retStatus = E_RET_SUCCESS;
 800d944:	2300      	movs	r3, #0
 800d946:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				if(421 == len_retStatus)	//Time out
				{
					len_retStatus = E_RET_INPROGRESS;
				}
			}
		break;
 800d94a:	e055      	b.n	800d9f8 <mod_mqttSslCertUpload+0x23c>
 800d94c:	e054      	b.n	800d9f8 <mod_mqttSslCertUpload+0x23c>

		case E_SSL_UPLD_FILE_CONTENT_STATE:
			len_retStatus = mod_sendCmdGetRsp(E_IDX_UPLOAD_FILE_CONTENT, NULL);
 800d94e:	201b      	movs	r0, #27
 800d950:	2100      	movs	r1, #0
 800d952:	f7fe f9a9 	bl	800bca8 <mod_sendCmdGetRsp>
 800d956:	4603      	mov	r3, r0
 800d958:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			if (E_RET_SUCCESS == len_retStatus)
 800d95c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800d960:	2b00      	cmp	r3, #0
 800d962:	d148      	bne.n	800d9f6 <mod_mqttSslCertUpload+0x23a>
			{
				lu8p_Ptr =
 800d964:	4831      	ldr	r0, [pc, #196]	; (800da2c <mod_mqttSslCertUpload+0x270>)
 800d966:	4935      	ldr	r1, [pc, #212]	; (800da3c <mod_mqttSslCertUpload+0x280>)
 800d968:	f004 fa15 	bl	8011d96 <strstr>
 800d96c:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_otherRspString);

				if (NULL != lu8p_Ptr)
 800d96e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d970:	2b00      	cmp	r3, #0
 800d972:	d031      	beq.n	800d9d8 <mod_mqttSslCertUpload+0x21c>
				{
					lu16_totalFileSize -= 1024;
 800d974:	4b26      	ldr	r3, [pc, #152]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d976:	881b      	ldrh	r3, [r3, #0]
 800d978:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800d97c:	b29a      	uxth	r2, r3
 800d97e:	4b24      	ldr	r3, [pc, #144]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d980:	801a      	strh	r2, [r3, #0]
					slu32_pos += 1024;
 800d982:	4b21      	ldr	r3, [pc, #132]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d984:	681b      	ldr	r3, [r3, #0]
 800d986:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d98a:	4a1f      	ldr	r2, [pc, #124]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d98c:	6013      	str	r3, [r2, #0]

					memset(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString, 0,
 800d98e:	4829      	ldr	r0, [pc, #164]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d990:	2100      	movs	r1, #0
 800d992:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800d996:	f003 fedc 	bl	8011752 <memset>
							sizeof(gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString));

					if(lu16_totalFileSize > 1024)
 800d99a:	4b1d      	ldr	r3, [pc, #116]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d9a2:	d908      	bls.n	800d9b6 <mod_mqttSslCertUpload+0x1fa>
					{
						strncpy(
 800d9a4:	4b18      	ldr	r3, [pc, #96]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	4822      	ldr	r0, [pc, #136]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d9b0:	f004 f9df 	bl	8011d72 <strncpy>
 800d9b4:	e008      	b.n	800d9c8 <mod_mqttSslCertUpload+0x20c>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, 1024);
					}
					else
					{
						strncpy(
 800d9b6:	4b14      	ldr	r3, [pc, #80]	; (800da08 <mod_mqttSslCertUpload+0x24c>)
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	4b15      	ldr	r3, [pc, #84]	; (800da10 <mod_mqttSslCertUpload+0x254>)
 800d9bc:	881b      	ldrh	r3, [r3, #0]
 800d9be:	481d      	ldr	r0, [pc, #116]	; (800da34 <mod_mqttSslCertUpload+0x278>)
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	461a      	mov	r2, r3
 800d9c4:	f004 f9d5 	bl	8011d72 <strncpy>
								(char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_cmdString,
								(char *) slu32_pos, lu16_totalFileSize);
					}
					memset(gu8arr_respBuffer, 0, sizeof(gu8arr_respBuffer));
 800d9c8:	4818      	ldr	r0, [pc, #96]	; (800da2c <mod_mqttSslCertUpload+0x270>)
 800d9ca:	2100      	movs	r1, #0
 800d9cc:	2240      	movs	r2, #64	; 0x40
 800d9ce:	f003 fec0 	bl	8011752 <memset>
					len_retStatus = E_RET_INPROGRESS;
 800d9d2:	2304      	movs	r3, #4
 800d9d4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}

				lu8p_Ptr =
 800d9d8:	4814      	ldr	r0, [pc, #80]	; (800da2c <mod_mqttSslCertUpload+0x270>)
 800d9da:	4919      	ldr	r1, [pc, #100]	; (800da40 <mod_mqttSslCertUpload+0x284>)
 800d9dc:	f004 f9db 	bl	8011d96 <strstr>
 800d9e0:	6438      	str	r0, [r7, #64]	; 0x40
						(uint8_t *) strstr((const char *) gu8arr_respBuffer,
								(const char *) gcst_ATCmdTable[E_IDX_UPLOAD_FILE_CONTENT].mu8arr_respString);

				if (NULL != lu8p_Ptr)
 800d9e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9e4:	2b00      	cmp	r3, #0
 800d9e6:	d006      	beq.n	800d9f6 <mod_mqttSslCertUpload+0x23a>
				{
					sen_sslFileUpldState = E_SSL_UPLD_CMD_STATE;
 800d9e8:	4b06      	ldr	r3, [pc, #24]	; (800da04 <mod_mqttSslCertUpload+0x248>)
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	701a      	strb	r2, [r3, #0]
					len_retStatus = E_RET_SUCCESS;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
				}
			}
		break;
 800d9f4:	e7ff      	b.n	800d9f6 <mod_mqttSslCertUpload+0x23a>
 800d9f6:	bf00      	nop

		default:
		break;
	}

	return len_retStatus;
 800d9f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	374c      	adds	r7, #76	; 0x4c
 800da00:	46bd      	mov	sp, r7
 800da02:	bd90      	pop	{r4, r7, pc}
 800da04:	1fff4776 	.word	0x1fff4776
 800da08:	1fff4790 	.word	0x1fff4790
 800da0c:	1ffe94e4 	.word	0x1ffe94e4
 800da10:	1fff4794 	.word	0x1fff4794
 800da14:	08013f18 	.word	0x08013f18
 800da18:	08013f28 	.word	0x08013f28
 800da1c:	1ffe9988 	.word	0x1ffe9988
 800da20:	08013f38 	.word	0x08013f38
 800da24:	1ffe9e4c 	.word	0x1ffe9e4c
 800da28:	08013f4c 	.word	0x08013f4c
 800da2c:	1fff46cc 	.word	0x1fff46cc
 800da30:	1fff2198 	.word	0x1fff2198
 800da34:	1fff2234 	.word	0x1fff2234
 800da38:	1fff476e 	.word	0x1fff476e
 800da3c:	1fff266e 	.word	0x1fff266e
 800da40:	1fff263c 	.word	0x1fff263c

0800da44 <mod_mqttSslCertDelete>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttSslCertDelete(en_sslFile_t len_sslFile)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b090      	sub	sp, #64	; 0x40
 800da48:	af00      	add	r7, sp, #0
 800da4a:	4603      	mov	r3, r0
 800da4c:	71fb      	strb	r3, [r7, #7]
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800da4e:	2304      	movs	r3, #4
 800da50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	uint8_t lu8arr_param[50] = { 0 };
 800da54:	f107 030c 	add.w	r3, r7, #12
 800da58:	2200      	movs	r2, #0
 800da5a:	601a      	str	r2, [r3, #0]
 800da5c:	3304      	adds	r3, #4
 800da5e:	2200      	movs	r2, #0
 800da60:	601a      	str	r2, [r3, #0]
 800da62:	3304      	adds	r3, #4
 800da64:	2200      	movs	r2, #0
 800da66:	601a      	str	r2, [r3, #0]
 800da68:	3304      	adds	r3, #4
 800da6a:	2200      	movs	r2, #0
 800da6c:	601a      	str	r2, [r3, #0]
 800da6e:	3304      	adds	r3, #4
 800da70:	2200      	movs	r2, #0
 800da72:	601a      	str	r2, [r3, #0]
 800da74:	3304      	adds	r3, #4
 800da76:	2200      	movs	r2, #0
 800da78:	601a      	str	r2, [r3, #0]
 800da7a:	3304      	adds	r3, #4
 800da7c:	2200      	movs	r2, #0
 800da7e:	601a      	str	r2, [r3, #0]
 800da80:	3304      	adds	r3, #4
 800da82:	2200      	movs	r2, #0
 800da84:	601a      	str	r2, [r3, #0]
 800da86:	3304      	adds	r3, #4
 800da88:	2200      	movs	r2, #0
 800da8a:	601a      	str	r2, [r3, #0]
 800da8c:	3304      	adds	r3, #4
 800da8e:	2200      	movs	r2, #0
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	3304      	adds	r3, #4
 800da94:	2200      	movs	r2, #0
 800da96:	601a      	str	r2, [r3, #0]
 800da98:	3304      	adds	r3, #4
 800da9a:	2200      	movs	r2, #0
 800da9c:	601a      	str	r2, [r3, #0]
 800da9e:	3304      	adds	r3, #4
 800daa0:	2200      	movs	r2, #0
 800daa2:	801a      	strh	r2, [r3, #0]
 800daa4:	3302      	adds	r3, #2

	if (E_CA_CERT_FILE == len_sslFile)
 800daa6:	79fb      	ldrb	r3, [r7, #7]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d107      	bne.n	800dabc <mod_mqttSslCertDelete+0x78>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CA_FILENAME);
 800daac:	f107 030c 	add.w	r3, r7, #12
 800dab0:	4618      	mov	r0, r3
 800dab2:	491c      	ldr	r1, [pc, #112]	; (800db24 <mod_mqttSslCertDelete+0xe0>)
 800dab4:	4a1c      	ldr	r2, [pc, #112]	; (800db28 <mod_mqttSslCertDelete+0xe4>)
 800dab6:	f004 f90b 	bl	8011cd0 <siprintf>
 800daba:	e014      	b.n	800dae6 <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CC_CERT_FILE == len_sslFile)
 800dabc:	79fb      	ldrb	r3, [r7, #7]
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d107      	bne.n	800dad2 <mod_mqttSslCertDelete+0x8e>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CC_FILENAME);
 800dac2:	f107 030c 	add.w	r3, r7, #12
 800dac6:	4618      	mov	r0, r3
 800dac8:	4916      	ldr	r1, [pc, #88]	; (800db24 <mod_mqttSslCertDelete+0xe0>)
 800daca:	4a18      	ldr	r2, [pc, #96]	; (800db2c <mod_mqttSslCertDelete+0xe8>)
 800dacc:	f004 f900 	bl	8011cd0 <siprintf>
 800dad0:	e009      	b.n	800dae6 <mod_mqttSslCertDelete+0xa2>
	}
	else if (E_CK_CERT_FILE == len_sslFile)
 800dad2:	79fb      	ldrb	r3, [r7, #7]
 800dad4:	2b02      	cmp	r3, #2
 800dad6:	d106      	bne.n	800dae6 <mod_mqttSslCertDelete+0xa2>
	{
		sprintf((char *) lu8arr_param, "%s\r\n", MQTT_SSL_CK_FILENAME);
 800dad8:	f107 030c 	add.w	r3, r7, #12
 800dadc:	4618      	mov	r0, r3
 800dade:	4911      	ldr	r1, [pc, #68]	; (800db24 <mod_mqttSslCertDelete+0xe0>)
 800dae0:	4a13      	ldr	r2, [pc, #76]	; (800db30 <mod_mqttSslCertDelete+0xec>)
 800dae2:	f004 f8f5 	bl	8011cd0 <siprintf>
	}

	len_retStatus = mod_sendCmdGetRsp(E_IDX_FILE_DELETE, (uint8_t *) lu8arr_param);
 800dae6:	f107 030c 	add.w	r3, r7, #12
 800daea:	201c      	movs	r0, #28
 800daec:	4619      	mov	r1, r3
 800daee:	f7fe f8db 	bl	800bca8 <mod_sendCmdGetRsp>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (E_RET_SUCCESS == len_retStatus)
 800daf8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d103      	bne.n	800db08 <mod_mqttSslCertDelete+0xc4>
	{
		len_retStatus = E_RET_SUCCESS;
 800db00:	2300      	movs	r3, #0
 800db02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800db06:	e006      	b.n	800db16 <mod_mqttSslCertDelete+0xd2>
	}
	else if(E_RET_INPROGRESS != len_retStatus)
 800db08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800db0c:	2b04      	cmp	r3, #4
 800db0e:	d002      	beq.n	800db16 <mod_mqttSslCertDelete+0xd2>
	{
		len_retStatus = E_RET_FAILED;
 800db10:	2302      	movs	r3, #2
 800db12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	}

	return len_retStatus;
 800db16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3740      	adds	r7, #64	; 0x40
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
 800db22:	bf00      	nop
 800db24:	08013f5c 	.word	0x08013f5c
 800db28:	08013f28 	.word	0x08013f28
 800db2c:	08013f38 	.word	0x08013f38
 800db30:	08013f4c 	.word	0x08013f4c

0800db34 <mod_mqttOpen>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpen(void)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b092      	sub	sp, #72	; 0x48
 800db38:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800db3a:	2304      	movs	r3, #4
 800db3c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	static uint8_t lsu8_retryCnt = 0;
	uint8_t lu8arr_param[57] = { 0 };
 800db40:	1d3b      	adds	r3, r7, #4
 800db42:	2239      	movs	r2, #57	; 0x39
 800db44:	4618      	mov	r0, r3
 800db46:	2100      	movs	r1, #0
 800db48:	f003 fe03 	bl	8011752 <memset>
	uint8_t *lu8p_Ptr = NULL;
 800db4c:	2300      	movs	r3, #0
 800db4e:	643b      	str	r3, [r7, #64]	; 0x40
	short ls_result = E_MQTT_OPN_NONE;
 800db50:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800db54:	87fb      	strh	r3, [r7, #62]	; 0x3e

//	for(lu8_clientIdx = 0; lu8_clientIdx < 6; lu8_clientIdx++)
//	{
	sprintf((char *) lu8arr_param, "%d,%s", sgu8_mqttClientId, MQTT_OPEN_HOST_PORT);
 800db56:	4b55      	ldr	r3, [pc, #340]	; (800dcac <mod_mqttOpen+0x178>)
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	461a      	mov	r2, r3
 800db5c:	1d3b      	adds	r3, r7, #4
 800db5e:	4618      	mov	r0, r3
 800db60:	4953      	ldr	r1, [pc, #332]	; (800dcb0 <mod_mqttOpen+0x17c>)
 800db62:	4b54      	ldr	r3, [pc, #336]	; (800dcb4 <mod_mqttOpen+0x180>)
 800db64:	f004 f8b4 	bl	8011cd0 <siprintf>
	len_retStatus = mod_sendCmdGetRsp(E_IDX_MQTT_OPEN, lu8arr_param);
 800db68:	1d3b      	adds	r3, r7, #4
 800db6a:	2013      	movs	r0, #19
 800db6c:	4619      	mov	r1, r3
 800db6e:	f7fe f89b 	bl	800bca8 <mod_sendCmdGetRsp>
 800db72:	4603      	mov	r3, r0
 800db74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (E_RET_SUCCESS == len_retStatus)
 800db78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d176      	bne.n	800dc6e <mod_mqttOpen+0x13a>
	{
		lsu8_retryCnt = 0;
 800db80:	4b4d      	ldr	r3, [pc, #308]	; (800dcb8 <mod_mqttOpen+0x184>)
 800db82:	2200      	movs	r2, #0
 800db84:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800db86:	484d      	ldr	r0, [pc, #308]	; (800dcbc <mod_mqttOpen+0x188>)
 800db88:	494d      	ldr	r1, [pc, #308]	; (800dcc0 <mod_mqttOpen+0x18c>)
 800db8a:	f004 f904 	bl	8011d96 <strstr>
 800db8e:	6438      	str	r0, [r7, #64]	; 0x40
				(const char *) gcst_ATCmdTable[E_IDX_MQTT_OPEN].mu8arr_otherRspString);

		if (lu8p_Ptr != NULL)
 800db90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db92:	2b00      	cmp	r3, #0
 800db94:	f000 8084 	beq.w	800dca0 <mod_mqttOpen+0x16c>
		{
			lu8p_Ptr += 12;
 800db98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db9a:	330c      	adds	r3, #12
 800db9c:	643b      	str	r3, [r7, #64]	; 0x40
			ls_result = atoi((char *) lu8p_Ptr);
 800db9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800dba0:	f003 fd9c 	bl	80116dc <atoi>
 800dba4:	4603      	mov	r3, r0
 800dba6:	87fb      	strh	r3, [r7, #62]	; 0x3e

			if (E_NW_OPENED_SUCCESSFULLY == ls_result)	//Network opened successfully
 800dba8:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d106      	bne.n	800dbbe <mod_mqttOpen+0x8a>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_OPENED_SUCCESSFULLY;
 800dbb0:	4b44      	ldr	r3, [pc, #272]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_SUCCESS;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbbc:	e070      	b.n	800dca0 <mod_mqttOpen+0x16c>
				//break;
			}
			else if(E_WRONG_PARAMETER == ls_result)	//Wrong parameter
 800dbbe:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d106      	bne.n	800dbd4 <mod_mqttOpen+0xa0>
			{
				/* set VCU DTC and change the return status */
				gst_deviceStatus.men_mqttOpenErrorCodes = E_WRONG_PARAMETER;
 800dbc6:	4b3f      	ldr	r3, [pc, #252]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dbc8:	2201      	movs	r2, #1
 800dbca:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800dbcc:	2302      	movs	r3, #2
 800dbce:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dbd2:	e065      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
			else if(E_MQTT_ID_OCCUPIED == ls_result)	//MQTT identifier is occupied
 800dbd4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dbd8:	2b02      	cmp	r3, #2
 800dbda:	d117      	bne.n	800dc0c <mod_mqttOpen+0xd8>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_MQTT_ID_OCCUPIED;
 800dbdc:	4b39      	ldr	r3, [pc, #228]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dbde:	2202      	movs	r2, #2
 800dbe0:	70da      	strb	r2, [r3, #3]
				sgu8_mqttClientId++;
 800dbe2:	4b32      	ldr	r3, [pc, #200]	; (800dcac <mod_mqttOpen+0x178>)
 800dbe4:	781b      	ldrb	r3, [r3, #0]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	b2da      	uxtb	r2, r3
 800dbea:	4b30      	ldr	r3, [pc, #192]	; (800dcac <mod_mqttOpen+0x178>)
 800dbec:	701a      	strb	r2, [r3, #0]
				if (sgu8_mqttClientId > 5)
 800dbee:	4b2f      	ldr	r3, [pc, #188]	; (800dcac <mod_mqttOpen+0x178>)
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	2b05      	cmp	r3, #5
 800dbf4:	d906      	bls.n	800dc04 <mod_mqttOpen+0xd0>
				{
					len_retStatus = E_RET_FAILED;
 800dbf6:	2302      	movs	r3, #2
 800dbf8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					sgu8_mqttClientId = 0;
 800dbfc:	4b2b      	ldr	r3, [pc, #172]	; (800dcac <mod_mqttOpen+0x178>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	701a      	strb	r2, [r3, #0]
 800dc02:	e04d      	b.n	800dca0 <mod_mqttOpen+0x16c>
				}
				else
				{
					len_retStatus = E_RET_FAILED_TRY_DIFF_ID;
 800dc04:	2301      	movs	r3, #1
 800dc06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc0a:	e049      	b.n	800dca0 <mod_mqttOpen+0x16c>
				}
			}
			else if(E_FAILED_TO_OPEN_NW == ls_result)	//-1 -> Failed to open network
 800dc0c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dc10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc14:	d106      	bne.n	800dc24 <mod_mqttOpen+0xf0>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_OPEN_NW;
 800dc16:	4b2b      	ldr	r3, [pc, #172]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dc18:	22ff      	movs	r2, #255	; 0xff
 800dc1a:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800dc1c:	2302      	movs	r3, #2
 800dc1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc22:	e03d      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_ACTIVATE_PDP == ls_result)	//3  -> Failed to activate PDP
 800dc24:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dc28:	2b03      	cmp	r3, #3
 800dc2a:	d106      	bne.n	800dc3a <mod_mqttOpen+0x106>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_ACTIVATE_PDP;
 800dc2c:	4b25      	ldr	r3, [pc, #148]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dc2e:	2203      	movs	r2, #3
 800dc30:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_FAILED;
 800dc32:	2302      	movs	r3, #2
 800dc34:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc38:	e032      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
			else if(E_FAILED_TO_PARSE_DOMAIN_NAME == ls_result)	//Failed to parse domain name
 800dc3a:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dc3e:	2b04      	cmp	r3, #4
 800dc40:	d106      	bne.n	800dc50 <mod_mqttOpen+0x11c>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_FAILED_TO_PARSE_DOMAIN_NAME;
 800dc42:	4b20      	ldr	r3, [pc, #128]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dc44:	2204      	movs	r2, #4
 800dc46:	70da      	strb	r2, [r3, #3]
				/* set VCU DTC and change the return status */
				len_retStatus = E_RET_FAILED;
 800dc48:	2302      	movs	r3, #2
 800dc4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc4e:	e027      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
			else if(E_NW_CONNECTION_ERROR == ls_result)	//5  -> Network connection error
 800dc50:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 800dc54:	2b05      	cmp	r3, #5
 800dc56:	d106      	bne.n	800dc66 <mod_mqttOpen+0x132>
			{
				gst_deviceStatus.men_mqttOpenErrorCodes = E_NW_CONNECTION_ERROR;
 800dc58:	4b1a      	ldr	r3, [pc, #104]	; (800dcc4 <mod_mqttOpen+0x190>)
 800dc5a:	2205      	movs	r2, #5
 800dc5c:	70da      	strb	r2, [r3, #3]
				len_retStatus = E_RET_CONN_ERROR;
 800dc5e:	230d      	movs	r3, #13
 800dc60:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc64:	e01c      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
			else	//other return values
			{
				len_retStatus = E_RET_INPROGRESS;
 800dc66:	2304      	movs	r3, #4
 800dc68:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc6c:	e018      	b.n	800dca0 <mod_mqttOpen+0x16c>
			}
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800dc6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800dc72:	2b04      	cmp	r3, #4
 800dc74:	d014      	beq.n	800dca0 <mod_mqttOpen+0x16c>
	{
		lsu8_retryCnt++;
 800dc76:	4b10      	ldr	r3, [pc, #64]	; (800dcb8 <mod_mqttOpen+0x184>)
 800dc78:	781b      	ldrb	r3, [r3, #0]
 800dc7a:	3301      	adds	r3, #1
 800dc7c:	b2da      	uxtb	r2, r3
 800dc7e:	4b0e      	ldr	r3, [pc, #56]	; (800dcb8 <mod_mqttOpen+0x184>)
 800dc80:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800dc82:	4b0d      	ldr	r3, [pc, #52]	; (800dcb8 <mod_mqttOpen+0x184>)
 800dc84:	781b      	ldrb	r3, [r3, #0]
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	d803      	bhi.n	800dc92 <mod_mqttOpen+0x15e>
		{
			len_retStatus = E_RET_INPROGRESS;
 800dc8a:	2304      	movs	r3, #4
 800dc8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800dc90:	e006      	b.n	800dca0 <mod_mqttOpen+0x16c>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800dc92:	4b09      	ldr	r3, [pc, #36]	; (800dcb8 <mod_mqttOpen+0x184>)
 800dc94:	781b      	ldrb	r3, [r3, #0]
 800dc96:	2b03      	cmp	r3, #3
 800dc98:	d902      	bls.n	800dca0 <mod_mqttOpen+0x16c>
		{
			lsu8_retryCnt = 0;
 800dc9a:	4b07      	ldr	r3, [pc, #28]	; (800dcb8 <mod_mqttOpen+0x184>)
 800dc9c:	2200      	movs	r2, #0
 800dc9e:	701a      	strb	r2, [r3, #0]
		}
	}
//	}
	return len_retStatus;
 800dca0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800dca4:	4618      	mov	r0, r3
 800dca6:	3748      	adds	r7, #72	; 0x48
 800dca8:	46bd      	mov	sp, r7
 800dcaa:	bd80      	pop	{r7, pc}
 800dcac:	1fff476d 	.word	0x1fff476d
 800dcb0:	08013f64 	.word	0x08013f64
 800dcb4:	08013f6c 	.word	0x08013f6c
 800dcb8:	1fff4796 	.word	0x1fff4796
 800dcbc:	1fff46cc 	.word	0x1fff46cc
 800dcc0:	1fff014e 	.word	0x1fff014e
 800dcc4:	1ffea4dc 	.word	0x1ffea4dc

0800dcc8 <mod_mqttOpenConfig>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_mqttOpenConfig()
{
 800dcc8:	b5b0      	push	{r4, r5, r7, lr}
 800dcca:	b08a      	sub	sp, #40	; 0x28
 800dccc:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800dcce:	2304      	movs	r3, #4
 800dcd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t lu8arr_param[34] = { 0 };
 800dcd4:	1d3b      	adds	r3, r7, #4
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	601a      	str	r2, [r3, #0]
 800dcda:	3304      	adds	r3, #4
 800dcdc:	2200      	movs	r2, #0
 800dcde:	601a      	str	r2, [r3, #0]
 800dce0:	3304      	adds	r3, #4
 800dce2:	2200      	movs	r2, #0
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	3304      	adds	r3, #4
 800dce8:	2200      	movs	r2, #0
 800dcea:	601a      	str	r2, [r3, #0]
 800dcec:	3304      	adds	r3, #4
 800dcee:	2200      	movs	r2, #0
 800dcf0:	601a      	str	r2, [r3, #0]
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	601a      	str	r2, [r3, #0]
 800dcf8:	3304      	adds	r3, #4
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	601a      	str	r2, [r3, #0]
 800dcfe:	3304      	adds	r3, #4
 800dd00:	2200      	movs	r2, #0
 800dd02:	601a      	str	r2, [r3, #0]
 800dd04:	3304      	adds	r3, #4
 800dd06:	2200      	movs	r2, #0
 800dd08:	801a      	strh	r2, [r3, #0]
 800dd0a:	3302      	adds	r3, #2
	switch (sen_openMqttState)
 800dd0c:	4bc8      	ldr	r3, [pc, #800]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dd0e:	781b      	ldrb	r3, [r3, #0]
 800dd10:	2b0e      	cmp	r3, #14
 800dd12:	f200 81b5 	bhi.w	800e080 <mod_mqttOpenConfig+0x3b8>
 800dd16:	a201      	add	r2, pc, #4	; (adr r2, 800dd1c <mod_mqttOpenConfig+0x54>)
 800dd18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd1c:	0800dd59 	.word	0x0800dd59
 800dd20:	0800dd7d 	.word	0x0800dd7d
 800dd24:	0800dda1 	.word	0x0800dda1
 800dd28:	0800ddc5 	.word	0x0800ddc5
 800dd2c:	0800dde9 	.word	0x0800dde9
 800dd30:	0800de0d 	.word	0x0800de0d
 800dd34:	0800de31 	.word	0x0800de31
 800dd38:	0800de6b 	.word	0x0800de6b
 800dd3c:	0800dea3 	.word	0x0800dea3
 800dd40:	0800dedd 	.word	0x0800dedd
 800dd44:	0800df13 	.word	0x0800df13
 800dd48:	0800df51 	.word	0x0800df51
 800dd4c:	0800df8b 	.word	0x0800df8b
 800dd50:	0800dfcb 	.word	0x0800dfcb
 800dd54:	0800e001 	.word	0x0800e001
	{
		case E_MQTT_SSL_UPLD_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CA_CERT_FILE);
 800dd58:	2000      	movs	r0, #0
 800dd5a:	f7ff fd2f 	bl	800d7bc <mod_mqttSslCertUpload>
 800dd5e:	4603      	mov	r3, r0
 800dd60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dd64:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d106      	bne.n	800dd7a <mod_mqttOpenConfig+0xb2>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd6c:	2304      	movs	r3, #4
 800dd6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CC_CERT_STATE;
 800dd72:	4baf      	ldr	r3, [pc, #700]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dd74:	2201      	movs	r2, #1
 800dd76:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dd78:	e183      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dd7a:	e182      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CC_CERT_FILE);
 800dd7c:	2001      	movs	r0, #1
 800dd7e:	f7ff fd1d 	bl	800d7bc <mod_mqttSslCertUpload>
 800dd82:	4603      	mov	r3, r0
 800dd84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dd88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <mod_mqttOpenConfig+0xd6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dd90:	2304      	movs	r3, #4
 800dd92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CK_CERT_STATE;
 800dd96:	4ba6      	ldr	r3, [pc, #664]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dd98:	2202      	movs	r2, #2
 800dd9a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dd9c:	e171      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dd9e:	e170      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_UPLD_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertUpload(E_CK_CERT_FILE);
 800dda0:	2002      	movs	r0, #2
 800dda2:	f7ff fd0b 	bl	800d7bc <mod_mqttSslCertUpload>
 800dda6:	4603      	mov	r3, r0
 800dda8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800ddac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d106      	bne.n	800ddc2 <mod_mqttOpenConfig+0xfa>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ddb4:	2304      	movs	r3, #4
 800ddb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800ddba:	4b9d      	ldr	r3, [pc, #628]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800ddbc:	2206      	movs	r2, #6
 800ddbe:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ddc0:	e15f      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800ddc2:	e15e      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CA_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CA_CERT_FILE);
 800ddc4:	2000      	movs	r0, #0
 800ddc6:	f7ff fe3d 	bl	800da44 <mod_mqttSslCertDelete>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800ddd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d106      	bne.n	800dde6 <mod_mqttOpenConfig+0x11e>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ddd8:	2304      	movs	r3, #4
 800ddda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CC_CERT_STATE;
 800ddde:	4b94      	ldr	r3, [pc, #592]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dde0:	2204      	movs	r2, #4
 800dde2:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dde4:	e14d      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dde6:	e14c      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CC_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CC_CERT_FILE);
 800dde8:	2001      	movs	r0, #1
 800ddea:	f7ff fe2b 	bl	800da44 <mod_mqttSslCertDelete>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800ddf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d106      	bne.n	800de0a <mod_mqttOpenConfig+0x142>
			{
				len_retStatus = E_RET_INPROGRESS;
 800ddfc:	2304      	movs	r3, #4
 800ddfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CK_CERT_STATE;
 800de02:	4b8b      	ldr	r3, [pc, #556]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800de04:	2205      	movs	r2, #5
 800de06:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de08:	e13b      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800de0a:	e13a      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_SSL_DELE_CK_CERT_STATE:
			len_retStatus = mod_mqttSslCertDelete(E_CK_CERT_FILE);
 800de0c:	2002      	movs	r0, #2
 800de0e:	f7ff fe19 	bl	800da44 <mod_mqttSslCertDelete>
 800de12:	4603      	mov	r3, r0
 800de14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d106      	bne.n	800de2e <mod_mqttOpenConfig+0x166>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de20:	2304      	movs	r3, #4
 800de22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_UPLD_CA_CERT_STATE;
 800de26:	4b82      	ldr	r3, [pc, #520]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800de28:	2200      	movs	r2, #0
 800de2a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de2c:	e129      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800de2e:	e128      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CA_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CA_CERT_PATH);
 800de30:	1d3b      	adds	r3, r7, #4
 800de32:	4a80      	ldr	r2, [pc, #512]	; (800e034 <mod_mqttOpenConfig+0x36c>)
 800de34:	461c      	mov	r4, r3
 800de36:	4615      	mov	r5, r2
 800de38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de3c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de40:	c403      	stmia	r4!, {r0, r1}
 800de42:	8022      	strh	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800de44:	1d3b      	adds	r3, r7, #4
 800de46:	4618      	mov	r0, r3
 800de48:	f7ff fc84 	bl	800d754 <mod_mqttSslConfgi>
 800de4c:	4603      	mov	r3, r0
 800de4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <mod_mqttOpenConfig+0x1a0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de5a:	2304      	movs	r3, #4
 800de5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CC_CERT_STATE;
 800de60:	4b73      	ldr	r3, [pc, #460]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800de62:	2207      	movs	r2, #7
 800de64:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de66:	e10c      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800de68:	e10b      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CC_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CC_CERT_PATH);
 800de6a:	4b73      	ldr	r3, [pc, #460]	; (800e038 <mod_mqttOpenConfig+0x370>)
 800de6c:	1d3c      	adds	r4, r7, #4
 800de6e:	461d      	mov	r5, r3
 800de70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de78:	682b      	ldr	r3, [r5, #0]
 800de7a:	8023      	strh	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800de7c:	1d3b      	adds	r3, r7, #4
 800de7e:	4618      	mov	r0, r3
 800de80:	f7ff fc68 	bl	800d754 <mod_mqttSslConfgi>
 800de84:	4603      	mov	r3, r0
 800de86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800de8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d106      	bne.n	800dea0 <mod_mqttOpenConfig+0x1d8>
			{
				len_retStatus = E_RET_INPROGRESS;
 800de92:	2304      	movs	r3, #4
 800de94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CK_CERT_STATE;
 800de98:	4b65      	ldr	r3, [pc, #404]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800de9a:	2208      	movs	r2, #8
 800de9c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800de9e:	e0f0      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dea0:	e0ef      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CK_CERT_STATE:
			strcpy((char *) lu8arr_param, (const char *) CK_CERT_PATH);
 800dea2:	1d3b      	adds	r3, r7, #4
 800dea4:	4a65      	ldr	r2, [pc, #404]	; (800e03c <mod_mqttOpenConfig+0x374>)
 800dea6:	461c      	mov	r4, r3
 800dea8:	4615      	mov	r5, r2
 800deaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800deac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800deae:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800deb2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800deb6:	1d3b      	adds	r3, r7, #4
 800deb8:	4618      	mov	r0, r3
 800deba:	f7ff fc4b 	bl	800d754 <mod_mqttSslConfgi>
 800debe:	4603      	mov	r3, r0
 800dec0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d106      	bne.n	800deda <mod_mqttOpenConfig+0x212>
			{
				len_retStatus = E_RET_INPROGRESS;
 800decc:	2304      	movs	r3, #4
 800dece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_AUTH_STATE;
 800ded2:	4b57      	ldr	r3, [pc, #348]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800ded4:	2209      	movs	r2, #9
 800ded6:	701a      	strb	r2, [r3, #0]
			}
		break;
 800ded8:	e0d3      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800deda:	e0d2      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_AUTH);
 800dedc:	1d3b      	adds	r3, r7, #4
 800dede:	4a58      	ldr	r2, [pc, #352]	; (800e040 <mod_mqttOpenConfig+0x378>)
 800dee0:	461c      	mov	r4, r3
 800dee2:	4615      	mov	r5, r2
 800dee4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dee6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dee8:	682b      	ldr	r3, [r5, #0]
 800deea:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800deec:	1d3b      	adds	r3, r7, #4
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff fc30 	bl	800d754 <mod_mqttSslConfgi>
 800def4:	4603      	mov	r3, r0
 800def6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800defa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <mod_mqttOpenConfig+0x248>
			{
				len_retStatus = E_RET_INPROGRESS;
 800df02:	2304      	movs	r3, #4
 800df04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_SSL_VER_STATE;
 800df08:	4b49      	ldr	r3, [pc, #292]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800df0a:	220a      	movs	r2, #10
 800df0c:	701a      	strb	r2, [r3, #0]
			}
		break;
 800df0e:	e0b8      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800df10:	e0b7      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_SSL_VER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_VERSION);
 800df12:	1d3b      	adds	r3, r7, #4
 800df14:	4a4b      	ldr	r2, [pc, #300]	; (800e044 <mod_mqttOpenConfig+0x37c>)
 800df16:	461c      	mov	r4, r3
 800df18:	4615      	mov	r5, r2
 800df1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	461a      	mov	r2, r3
 800df22:	8022      	strh	r2, [r4, #0]
 800df24:	3402      	adds	r4, #2
 800df26:	0c1b      	lsrs	r3, r3, #16
 800df28:	7023      	strb	r3, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800df2a:	1d3b      	adds	r3, r7, #4
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff fc11 	bl	800d754 <mod_mqttSslConfgi>
 800df32:	4603      	mov	r3, r0
 800df34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800df38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d106      	bne.n	800df4e <mod_mqttOpenConfig+0x286>
			{
				len_retStatus = E_RET_INPROGRESS;
 800df40:	2304      	movs	r3, #4
 800df42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CIPHER_STATE;
 800df46:	4b3a      	ldr	r3, [pc, #232]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800df48:	220b      	movs	r2, #11
 800df4a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800df4c:	e099      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800df4e:	e098      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_CIPHER_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_CIPHER_SUITE);
 800df50:	1d3b      	adds	r3, r7, #4
 800df52:	4a3d      	ldr	r2, [pc, #244]	; (800e048 <mod_mqttOpenConfig+0x380>)
 800df54:	461c      	mov	r4, r3
 800df56:	4615      	mov	r5, r2
 800df58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df5c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800df60:	c403      	stmia	r4!, {r0, r1}
 800df62:	7022      	strb	r2, [r4, #0]
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800df64:	1d3b      	adds	r3, r7, #4
 800df66:	4618      	mov	r0, r3
 800df68:	f7ff fbf4 	bl	800d754 <mod_mqttSslConfgi>
 800df6c:	4603      	mov	r3, r0
 800df6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800df72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800df76:	2b00      	cmp	r3, #0
 800df78:	d106      	bne.n	800df88 <mod_mqttOpenConfig+0x2c0>
			{
				len_retStatus = E_RET_INPROGRESS;
 800df7a:	2304      	movs	r3, #4
 800df7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_IGR_AUTH_STATE;
 800df80:	4b2b      	ldr	r3, [pc, #172]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800df82:	220c      	movs	r2, #12
 800df84:	701a      	strb	r2, [r3, #0]
			}
		break;
 800df86:	e07c      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800df88:	e07b      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_CFG_IGR_AUTH_STATE:
			strcpy((char *) lu8arr_param, (const char *) SSL_IGNORE_LOCAL_TIME);
 800df8a:	1d3b      	adds	r3, r7, #4
 800df8c:	4a2f      	ldr	r2, [pc, #188]	; (800e04c <mod_mqttOpenConfig+0x384>)
 800df8e:	461c      	mov	r4, r3
 800df90:	4615      	mov	r5, r2
 800df92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800df94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800df96:	e895 0003 	ldmia.w	r5, {r0, r1}
 800df9a:	e884 0003 	stmia.w	r4, {r0, r1}
			len_retStatus = mod_mqttSslConfgi(lu8arr_param);
 800df9e:	1d3b      	adds	r3, r7, #4
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff fbd7 	bl	800d754 <mod_mqttSslConfgi>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dfac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d109      	bne.n	800dfc8 <mod_mqttOpenConfig+0x300>
			{
				sgu8_mqttClientId = 0;
 800dfb4:	4b26      	ldr	r3, [pc, #152]	; (800e050 <mod_mqttOpenConfig+0x388>)
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	701a      	strb	r2, [r3, #0]
				len_retStatus = E_RET_INPROGRESS;
 800dfba:	2304      	movs	r3, #4
 800dfbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800dfc0:	4b1b      	ldr	r3, [pc, #108]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dfc2:	220d      	movs	r2, #13
 800dfc4:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dfc6:	e05c      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dfc8:	e05b      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_SSL_CFG_STATE:
			sprintf((char *) lu8arr_param, (const char *) "\"SSL\",%d,1,2\r\n",
 800dfca:	4b21      	ldr	r3, [pc, #132]	; (800e050 <mod_mqttOpenConfig+0x388>)
 800dfcc:	781b      	ldrb	r3, [r3, #0]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	1d3b      	adds	r3, r7, #4
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	491f      	ldr	r1, [pc, #124]	; (800e054 <mod_mqttOpenConfig+0x38c>)
 800dfd6:	f003 fe7b 	bl	8011cd0 <siprintf>
					sgu8_mqttClientId);
			len_retStatus = mod_mqttSslMode(lu8arr_param);
 800dfda:	1d3b      	adds	r3, r7, #4
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7ff fb85 	bl	800d6ec <mod_mqttSslMode>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800dfe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dfec:	2b00      	cmp	r3, #0
 800dfee:	d106      	bne.n	800dffe <mod_mqttOpenConfig+0x336>
			{
				len_retStatus = E_RET_INPROGRESS;
 800dff0:	2304      	movs	r3, #4
 800dff2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_STATE;
 800dff6:	4b0e      	ldr	r3, [pc, #56]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800dff8:	220e      	movs	r2, #14
 800dffa:	701a      	strb	r2, [r3, #0]
			}
		break;
 800dffc:	e041      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800dffe:	e040      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		case E_MQTT_OPN_STATE:
			len_retStatus = mod_mqttOpen();
 800e000:	f7ff fd98 	bl	800db34 <mod_mqttOpen>
 800e004:	4603      	mov	r3, r0
 800e006:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (E_RET_SUCCESS == len_retStatus)
 800e00a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d106      	bne.n	800e020 <mod_mqttOpenConfig+0x358>
			{
				len_retStatus = E_RET_SUCCESS;
 800e012:	2300      	movs	r3, #0
 800e014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e018:	4b05      	ldr	r3, [pc, #20]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800e01a:	2206      	movs	r2, #6
 800e01c:	701a      	strb	r2, [r3, #0]
 800e01e:	e02e      	b.n	800e07e <mod_mqttOpenConfig+0x3b6>
			}
			else if (E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e020:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e024:	2b01      	cmp	r3, #1
 800e026:	d117      	bne.n	800e058 <mod_mqttOpenConfig+0x390>
			{
				sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e028:	4b01      	ldr	r3, [pc, #4]	; (800e030 <mod_mqttOpenConfig+0x368>)
 800e02a:	220d      	movs	r2, #13
 800e02c:	701a      	strb	r2, [r3, #0]
 800e02e:	e026      	b.n	800e07e <mod_mqttOpenConfig+0x3b6>
 800e030:	1fff4773 	.word	0x1fff4773
 800e034:	08013fa4 	.word	0x08013fa4
 800e038:	0801404c 	.word	0x0801404c
 800e03c:	08013fc0 	.word	0x08013fc0
 800e040:	08013fe0 	.word	0x08013fe0
 800e044:	08013ff4 	.word	0x08013ff4
 800e048:	08014008 	.word	0x08014008
 800e04c:	08014024 	.word	0x08014024
 800e050:	1fff476d 	.word	0x1fff476d
 800e054:	0801403c 	.word	0x0801403c
			}
			else if (E_RET_FAILED == len_retStatus)
 800e058:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	d103      	bne.n	800e068 <mod_mqttOpenConfig+0x3a0>
			{
				sen_openMqttState = E_MQTT_OPN_CFG_CA_CERT_STATE;
 800e060:	4b0b      	ldr	r3, [pc, #44]	; (800e090 <mod_mqttOpenConfig+0x3c8>)
 800e062:	2206      	movs	r2, #6
 800e064:	701a      	strb	r2, [r3, #0]
 800e066:	e00a      	b.n	800e07e <mod_mqttOpenConfig+0x3b6>
			}
			else if(E_RET_CONN_ERROR == len_retStatus)
 800e068:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e06c:	2b0d      	cmp	r3, #13
 800e06e:	d106      	bne.n	800e07e <mod_mqttOpenConfig+0x3b6>
			{
				len_retStatus = E_RET_INPROGRESS;
 800e070:	2304      	movs	r3, #4
 800e072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
				sen_openMqttState = E_MQTT_SSL_DELE_CA_CERT_STATE;
 800e076:	4b06      	ldr	r3, [pc, #24]	; (800e090 <mod_mqttOpenConfig+0x3c8>)
 800e078:	2203      	movs	r2, #3
 800e07a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800e07c:	e001      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>
 800e07e:	e000      	b.n	800e082 <mod_mqttOpenConfig+0x3ba>

		default:
		break;
 800e080:	bf00      	nop
	}

	return len_retStatus;
 800e082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e086:	4618      	mov	r0, r3
 800e088:	3728      	adds	r7, #40	; 0x28
 800e08a:	46bd      	mov	sp, r7
 800e08c:	bdb0      	pop	{r4, r5, r7, pc}
 800e08e:	bf00      	nop
 800e090:	1fff4773 	.word	0x1fff4773

0800e094 <mod_gpsCfg>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsCfg(void)
{
 800e094:	b5b0      	push	{r4, r5, r7, lr}
 800e096:	b088      	sub	sp, #32
 800e098:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e09a:	2304      	movs	r3, #4
 800e09c:	77fb      	strb	r3, [r7, #31]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	61bb      	str	r3, [r7, #24]
	uint8_t lu8arr_param[] = "\"outport\",\"none\"\r\n";
 800e0a2:	4b21      	ldr	r3, [pc, #132]	; (800e128 <mod_gpsCfg+0x94>)
 800e0a4:	1d3c      	adds	r4, r7, #4
 800e0a6:	461d      	mov	r5, r3
 800e0a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0ac:	682b      	ldr	r3, [r5, #0]
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	8022      	strh	r2, [r4, #0]
 800e0b2:	3402      	adds	r4, #2
 800e0b4:	0c1b      	lsrs	r3, r3, #16
 800e0b6:	7023      	strb	r3, [r4, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_GPS_CFG, (uint8_t *) lu8arr_param);
 800e0b8:	1d3b      	adds	r3, r7, #4
 800e0ba:	201f      	movs	r0, #31
 800e0bc:	4619      	mov	r1, r3
 800e0be:	f7fd fdf3 	bl	800bca8 <mod_sendCmdGetRsp>
 800e0c2:	4603      	mov	r3, r0
 800e0c4:	77fb      	strb	r3, [r7, #31]
	if (E_RET_SUCCESS == len_retStatus)
 800e0c6:	7ffb      	ldrb	r3, [r7, #31]
 800e0c8:	2b00      	cmp	r3, #0
 800e0ca:	d110      	bne.n	800e0ee <mod_gpsCfg+0x5a>
	{
		lsu8_retryCnt = 0;
 800e0cc:	4b17      	ldr	r3, [pc, #92]	; (800e12c <mod_gpsCfg+0x98>)
 800e0ce:	2200      	movs	r2, #0
 800e0d0:	701a      	strb	r2, [r3, #0]
		lu8p_Ptr = (uint8_t *) strstr((const char *) gu8arr_respBuffer,
 800e0d2:	4817      	ldr	r0, [pc, #92]	; (800e130 <mod_gpsCfg+0x9c>)
 800e0d4:	4917      	ldr	r1, [pc, #92]	; (800e134 <mod_gpsCfg+0xa0>)
 800e0d6:	f003 fe5e 	bl	8011d96 <strstr>
 800e0da:	61b8      	str	r0, [r7, #24]
				(const char *) gcst_ATCmdTable[E_IDX_GPS_CFG].mu8arr_respString);
		if(NULL != lu8p_Ptr)
 800e0dc:	69bb      	ldr	r3, [r7, #24]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d002      	beq.n	800e0e8 <mod_gpsCfg+0x54>
		{

			len_retStatus = E_RET_SUCCESS;
 800e0e2:	2300      	movs	r3, #0
 800e0e4:	77fb      	strb	r3, [r7, #31]
 800e0e6:	e019      	b.n	800e11c <mod_gpsCfg+0x88>
		}
		else
		{
			len_retStatus = E_RET_FAILED;
 800e0e8:	2302      	movs	r3, #2
 800e0ea:	77fb      	strb	r3, [r7, #31]
 800e0ec:	e016      	b.n	800e11c <mod_gpsCfg+0x88>
		}
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e0ee:	7ffb      	ldrb	r3, [r7, #31]
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d013      	beq.n	800e11c <mod_gpsCfg+0x88>
	{
		lsu8_retryCnt++;
 800e0f4:	4b0d      	ldr	r3, [pc, #52]	; (800e12c <mod_gpsCfg+0x98>)
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	3301      	adds	r3, #1
 800e0fa:	b2da      	uxtb	r2, r3
 800e0fc:	4b0b      	ldr	r3, [pc, #44]	; (800e12c <mod_gpsCfg+0x98>)
 800e0fe:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e100:	4b0a      	ldr	r3, [pc, #40]	; (800e12c <mod_gpsCfg+0x98>)
 800e102:	781b      	ldrb	r3, [r3, #0]
 800e104:	2b02      	cmp	r3, #2
 800e106:	d802      	bhi.n	800e10e <mod_gpsCfg+0x7a>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e108:	2304      	movs	r3, #4
 800e10a:	77fb      	strb	r3, [r7, #31]
 800e10c:	e006      	b.n	800e11c <mod_gpsCfg+0x88>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e10e:	4b07      	ldr	r3, [pc, #28]	; (800e12c <mod_gpsCfg+0x98>)
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	2b03      	cmp	r3, #3
 800e114:	d902      	bls.n	800e11c <mod_gpsCfg+0x88>
		{
			lsu8_retryCnt = 0;
 800e116:	4b05      	ldr	r3, [pc, #20]	; (800e12c <mod_gpsCfg+0x98>)
 800e118:	2200      	movs	r2, #0
 800e11a:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e11c:	7ffb      	ldrb	r3, [r7, #31]
}
 800e11e:	4618      	mov	r0, r3
 800e120:	3720      	adds	r7, #32
 800e122:	46bd      	mov	sp, r7
 800e124:	bdb0      	pop	{r4, r5, r7, pc}
 800e126:	bf00      	nop
 800e128:	08014070 	.word	0x08014070
 800e12c:	1fff4797 	.word	0x1fff4797
 800e130:	1fff46cc 	.word	0x1fff46cc
 800e134:	1fff38cc 	.word	0x1fff38cc

0800e138 <mod_gpsEnable>:
 *
 * Return values 	:	en_responseRetCodes_t - return status
 *
 ****************************************************************************/
static en_responseRetCodes_t mod_gpsEnable(void)
{
 800e138:	b580      	push	{r7, lr}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e13e:	2304      	movs	r3, #4
 800e140:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCnt = 0;
	uint8_t *lu8p_Ptr = NULL;
 800e142:	2300      	movs	r3, #0
 800e144:	603b      	str	r3, [r7, #0]

	len_retStatus = mod_sendCmdGetRsp(E_IDX_ENABLE_GNSS, (uint8_t *) NEW_LINE);
 800e146:	2020      	movs	r0, #32
 800e148:	4914      	ldr	r1, [pc, #80]	; (800e19c <mod_gpsEnable+0x64>)
 800e14a:	f7fd fdad 	bl	800bca8 <mod_sendCmdGetRsp>
 800e14e:	4603      	mov	r3, r0
 800e150:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus)
 800e152:	79fb      	ldrb	r3, [r7, #7]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d105      	bne.n	800e164 <mod_gpsEnable+0x2c>
	{
		lsu8_retryCnt = 0;
 800e158:	4b11      	ldr	r3, [pc, #68]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e15a:	2200      	movs	r2, #0
 800e15c:	701a      	strb	r2, [r3, #0]
		len_retStatus = E_RET_SUCCESS;
 800e15e:	2300      	movs	r3, #0
 800e160:	71fb      	strb	r3, [r7, #7]
 800e162:	e016      	b.n	800e192 <mod_gpsEnable+0x5a>
	}
	else if (E_RET_INPROGRESS != len_retStatus)
 800e164:	79fb      	ldrb	r3, [r7, #7]
 800e166:	2b04      	cmp	r3, #4
 800e168:	d013      	beq.n	800e192 <mod_gpsEnable+0x5a>
	{
		lsu8_retryCnt++;
 800e16a:	4b0d      	ldr	r3, [pc, #52]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	3301      	adds	r3, #1
 800e170:	b2da      	uxtb	r2, r3
 800e172:	4b0b      	ldr	r3, [pc, #44]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e174:	701a      	strb	r2, [r3, #0]
		if (lsu8_retryCnt < AT_CMD_RETYR_MAX_CNT)
 800e176:	4b0a      	ldr	r3, [pc, #40]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	2b02      	cmp	r3, #2
 800e17c:	d802      	bhi.n	800e184 <mod_gpsEnable+0x4c>
		{
			len_retStatus = E_RET_INPROGRESS;
 800e17e:	2304      	movs	r3, #4
 800e180:	71fb      	strb	r3, [r7, #7]
 800e182:	e006      	b.n	800e192 <mod_gpsEnable+0x5a>
		}
		else if (lsu8_retryCnt > AT_CMD_RETYR_MAX_CNT)
 800e184:	4b06      	ldr	r3, [pc, #24]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e186:	781b      	ldrb	r3, [r3, #0]
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d902      	bls.n	800e192 <mod_gpsEnable+0x5a>
		{
			lsu8_retryCnt = 0;
 800e18c:	4b04      	ldr	r3, [pc, #16]	; (800e1a0 <mod_gpsEnable+0x68>)
 800e18e:	2200      	movs	r2, #0
 800e190:	701a      	strb	r2, [r3, #0]
		}
	}
	return len_retStatus;
 800e192:	79fb      	ldrb	r3, [r7, #7]
}
 800e194:	4618      	mov	r0, r3
 800e196:	3708      	adds	r7, #8
 800e198:	46bd      	mov	sp, r7
 800e19a:	bd80      	pop	{r7, pc}
 800e19c:	08013e74 	.word	0x08013e74
 800e1a0:	1fff4798 	.word	0x1fff4798

0800e1a4 <mod_4gHandler>:
 *
 * Return values 	:	void
 *
 ****************************************************************************/
void mod_4gHandler(void)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b082      	sub	sp, #8
 800e1a8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e1aa:	2304      	movs	r3, #4
 800e1ac:	71fb      	strb	r3, [r7, #7]
	static uint8_t lsu8_retryCount = 0;
//	mod_receiveRsp();	//read and saved received byte in global buffer

	if (gst_deviceStatus.mb_ismodemPwrDwn != true)
 800e1ae:	4ba3      	ldr	r3, [pc, #652]	; (800e43c <mod_4gHandler+0x298>)
 800e1b0:	781b      	ldrb	r3, [r3, #0]
 800e1b2:	f083 0301 	eor.w	r3, r3, #1
 800e1b6:	b2db      	uxtb	r3, r3
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	f000 813b 	beq.w	800e434 <mod_4gHandler+0x290>
	{
		switch (sen_4gRunState)
 800e1be:	4ba0      	ldr	r3, [pc, #640]	; (800e440 <mod_4gHandler+0x29c>)
 800e1c0:	781b      	ldrb	r3, [r3, #0]
 800e1c2:	2b10      	cmp	r3, #16
 800e1c4:	f200 8135 	bhi.w	800e432 <mod_4gHandler+0x28e>
 800e1c8:	a201      	add	r2, pc, #4	; (adr r2, 800e1d0 <mod_4gHandler+0x2c>)
 800e1ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ce:	bf00      	nop
 800e1d0:	0800e433 	.word	0x0800e433
 800e1d4:	0800e215 	.word	0x0800e215
 800e1d8:	0800e241 	.word	0x0800e241
 800e1dc:	0800e25f 	.word	0x0800e25f
 800e1e0:	0800e27d 	.word	0x0800e27d
 800e1e4:	0800e29b 	.word	0x0800e29b
 800e1e8:	0800e2b9 	.word	0x0800e2b9
 800e1ec:	0800e30f 	.word	0x0800e30f
 800e1f0:	0800e327 	.word	0x0800e327
 800e1f4:	0800e343 	.word	0x0800e343
 800e1f8:	0800e433 	.word	0x0800e433
 800e1fc:	0800e369 	.word	0x0800e369
 800e200:	0800e401 	.word	0x0800e401
 800e204:	0800e3cb 	.word	0x0800e3cb
 800e208:	0800e3e3 	.word	0x0800e3e3
 800e20c:	0800e433 	.word	0x0800e433
 800e210:	0800e41f 	.word	0x0800e41f
		{
			case E_MOD_IDLE_STATE:
			break;

			case E_SET_URC_PORT_STATE:
				len_retStatus = mod_setUrcPort();
 800e214:	f7fe f822 	bl	800c25c <mod_setUrcPort>
 800e218:	4603      	mov	r3, r0
 800e21a:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d002      	beq.n	800e228 <mod_4gHandler+0x84>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e222:	79fb      	ldrb	r3, [r7, #7]
 800e224:	2b04      	cmp	r3, #4
 800e226:	d00a      	beq.n	800e23e <mod_4gHandler+0x9a>
				{
					mod_disable4gModule();
 800e228:	f7fd fbec 	bl	800ba04 <mod_disable4gModule>
					gst_deviceStatus.mb_ismodemPwrDwn = true;
 800e22c:	4b83      	ldr	r3, [pc, #524]	; (800e43c <mod_4gHandler+0x298>)
 800e22e:	2201      	movs	r2, #1
 800e230:	701a      	strb	r2, [r3, #0]
					mod_enable4gModule();
 800e232:	f7fd fbc9 	bl	800b9c8 <mod_enable4gModule>
					sen_4gRunState = E_ECHO_OFF_STATE;
 800e236:	4b82      	ldr	r3, [pc, #520]	; (800e440 <mod_4gHandler+0x29c>)
 800e238:	2202      	movs	r2, #2
 800e23a:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e23c:	e0fa      	b.n	800e434 <mod_4gHandler+0x290>
 800e23e:	e0f9      	b.n	800e434 <mod_4gHandler+0x290>

			case E_ECHO_OFF_STATE:
				len_retStatus = mod_echoOff();
 800e240:	f7fd ffda 	bl	800c1f8 <mod_echoOff>
 800e244:	4603      	mov	r3, r0
 800e246:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e248:	79fb      	ldrb	r3, [r7, #7]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d002      	beq.n	800e254 <mod_4gHandler+0xb0>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e24e:	79fb      	ldrb	r3, [r7, #7]
 800e250:	2b04      	cmp	r3, #4
 800e252:	d003      	beq.n	800e25c <mod_4gHandler+0xb8>
				{
					sen_4gRunState = E_SET_FLOW_CTRL_STATE;
 800e254:	4b7a      	ldr	r3, [pc, #488]	; (800e440 <mod_4gHandler+0x29c>)
 800e256:	2203      	movs	r2, #3
 800e258:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e25a:	e0eb      	b.n	800e434 <mod_4gHandler+0x290>
 800e25c:	e0ea      	b.n	800e434 <mod_4gHandler+0x290>

			case E_SET_FLOW_CTRL_STATE:
				len_retStatus = mod_setFlowCtrl();
 800e25e:	f7fe f835 	bl	800c2cc <mod_setFlowCtrl>
 800e262:	4603      	mov	r3, r0
 800e264:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e266:	79fb      	ldrb	r3, [r7, #7]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d002      	beq.n	800e272 <mod_4gHandler+0xce>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b04      	cmp	r3, #4
 800e270:	d003      	beq.n	800e27a <mod_4gHandler+0xd6>
				{
					sen_4gRunState = E_EXTRACT_MODULE_INFO_STATE;
 800e272:	4b73      	ldr	r3, [pc, #460]	; (800e440 <mod_4gHandler+0x29c>)
 800e274:	2204      	movs	r2, #4
 800e276:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e278:	e0dc      	b.n	800e434 <mod_4gHandler+0x290>
 800e27a:	e0db      	b.n	800e434 <mod_4gHandler+0x290>

			case E_EXTRACT_MODULE_INFO_STATE:
				len_retStatus = mod_extractModInfo();
 800e27c:	f7fe f864 	bl	800c348 <mod_extractModInfo>
 800e280:	4603      	mov	r3, r0
 800e282:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e284:	79fb      	ldrb	r3, [r7, #7]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d002      	beq.n	800e290 <mod_4gHandler+0xec>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e28a:	79fb      	ldrb	r3, [r7, #7]
 800e28c:	2b04      	cmp	r3, #4
 800e28e:	d003      	beq.n	800e298 <mod_4gHandler+0xf4>
				{
					sen_4gRunState = E_SIM_STATUS_STATE;
 800e290:	4b6b      	ldr	r3, [pc, #428]	; (800e440 <mod_4gHandler+0x29c>)
 800e292:	2205      	movs	r2, #5
 800e294:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e296:	e0cd      	b.n	800e434 <mod_4gHandler+0x290>
 800e298:	e0cc      	b.n	800e434 <mod_4gHandler+0x290>

			case E_SIM_STATUS_STATE:
				len_retStatus = mod_simStatus();
 800e29a:	f7fe fbb5 	bl	800ca08 <mod_simStatus>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e2a2:	79fb      	ldrb	r3, [r7, #7]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d002      	beq.n	800e2ae <mod_4gHandler+0x10a>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e2a8:	79fb      	ldrb	r3, [r7, #7]
 800e2aa:	2b04      	cmp	r3, #4
 800e2ac:	d003      	beq.n	800e2b6 <mod_4gHandler+0x112>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e2ae:	4b64      	ldr	r3, [pc, #400]	; (800e440 <mod_4gHandler+0x29c>)
 800e2b0:	2206      	movs	r2, #6
 800e2b2:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e2b4:	e0be      	b.n	800e434 <mod_4gHandler+0x290>
 800e2b6:	e0bd      	b.n	800e434 <mod_4gHandler+0x290>

			case E_NETWORK_STATUS_STATE:
				len_retStatus = mod_networkStatus();
 800e2b8:	f7fe fc4c 	bl	800cb54 <mod_networkStatus>
 800e2bc:	4603      	mov	r3, r0
 800e2be:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e2c0:	79fb      	ldrb	r3, [r7, #7]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d103      	bne.n	800e2ce <mod_4gHandler+0x12a>
				{
					sen_4gRunState = E_SIGNAL_QUALITY_STATE;
 800e2c6:	4b5e      	ldr	r3, [pc, #376]	; (800e440 <mod_4gHandler+0x29c>)
 800e2c8:	2207      	movs	r2, #7
 800e2ca:	701a      	strb	r2, [r3, #0]
 800e2cc:	e01e      	b.n	800e30c <mod_4gHandler+0x168>
				}
				else if (E_RET_FAILED == len_retStatus)
 800e2ce:	79fb      	ldrb	r3, [r7, #7]
 800e2d0:	2b02      	cmp	r3, #2
 800e2d2:	d11b      	bne.n	800e30c <mod_4gHandler+0x168>
				{
					lsu8_retryCount++;
 800e2d4:	4b5b      	ldr	r3, [pc, #364]	; (800e444 <mod_4gHandler+0x2a0>)
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	3301      	adds	r3, #1
 800e2da:	b2da      	uxtb	r2, r3
 800e2dc:	4b59      	ldr	r3, [pc, #356]	; (800e444 <mod_4gHandler+0x2a0>)
 800e2de:	701a      	strb	r2, [r3, #0]
					gb_isMqttConnected = false;
 800e2e0:	4b59      	ldr	r3, [pc, #356]	; (800e448 <mod_4gHandler+0x2a4>)
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	701a      	strb	r2, [r3, #0]
					if (lsu8_retryCount >= 6)
 800e2e6:	4b57      	ldr	r3, [pc, #348]	; (800e444 <mod_4gHandler+0x2a0>)
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	2b05      	cmp	r3, #5
 800e2ec:	d906      	bls.n	800e2fc <mod_4gHandler+0x158>
					{
						lsu8_retryCount = 0;
 800e2ee:	4b55      	ldr	r3, [pc, #340]	; (800e444 <mod_4gHandler+0x2a0>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	701a      	strb	r2, [r3, #0]
						sen_4gRunState = E_MOD_RESET_STATE;
 800e2f4:	4b52      	ldr	r3, [pc, #328]	; (800e440 <mod_4gHandler+0x29c>)
 800e2f6:	220c      	movs	r2, #12
 800e2f8:	701a      	strb	r2, [r3, #0]
 800e2fa:	e007      	b.n	800e30c <mod_4gHandler+0x168>
					}
					else
					{
						tm_set4gRunTimer(TIMER_5S);
 800e2fc:	f241 3088 	movw	r0, #5000	; 0x1388
 800e300:	f7f2 f86a 	bl	80003d8 <tm_set4gRunTimer>
						sen_4gRunState = E_MOD_WAIT_STATE;
 800e304:	4b4e      	ldr	r3, [pc, #312]	; (800e440 <mod_4gHandler+0x29c>)
 800e306:	2210      	movs	r2, #16
 800e308:	701a      	strb	r2, [r3, #0]
					}
				}
			break;
 800e30a:	e093      	b.n	800e434 <mod_4gHandler+0x290>
 800e30c:	e092      	b.n	800e434 <mod_4gHandler+0x290>

			case E_SIGNAL_QUALITY_STATE:
				len_retStatus = mod_signalQuality();
 800e30e:	f7fe fcc1 	bl	800cc94 <mod_signalQuality>
 800e312:	4603      	mov	r3, r0
 800e314:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e316:	79fb      	ldrb	r3, [r7, #7]
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d103      	bne.n	800e324 <mod_4gHandler+0x180>
				{
					sen_4gRunState = E_EXTRACT_TIME_DATE_STATE;
 800e31c:	4b48      	ldr	r3, [pc, #288]	; (800e440 <mod_4gHandler+0x29c>)
 800e31e:	2208      	movs	r2, #8
 800e320:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e322:	e087      	b.n	800e434 <mod_4gHandler+0x290>
 800e324:	e086      	b.n	800e434 <mod_4gHandler+0x290>

			case E_EXTRACT_TIME_DATE_STATE:
				len_retStatus = mod_extractDateTime();
 800e326:	f7fe fd09 	bl	800cd3c <mod_extractDateTime>
 800e32a:	4603      	mov	r3, r0
 800e32c:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e32e:	79fb      	ldrb	r3, [r7, #7]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d105      	bne.n	800e340 <mod_4gHandler+0x19c>
				{
					//SuperLooptime_End();
					//SuperLooptime_Start();
					set_RTC();
 800e334:	f7fc ff64 	bl	800b200 <set_RTC>
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e338:	4b41      	ldr	r3, [pc, #260]	; (800e440 <mod_4gHandler+0x29c>)
 800e33a:	2209      	movs	r2, #9
 800e33c:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e33e:	e079      	b.n	800e434 <mod_4gHandler+0x290>
 800e340:	e078      	b.n	800e434 <mod_4gHandler+0x290>

			case E_MQTT_OPEN_STATE:
				len_retStatus = mod_mqttOpenConfig();
 800e342:	f7ff fcc1 	bl	800dcc8 <mod_mqttOpenConfig>
 800e346:	4603      	mov	r3, r0
 800e348:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d103      	bne.n	800e358 <mod_4gHandler+0x1b4>
				{
					sen_4gRunState = E_MQTT_CONNECT_STATE;
 800e350:	4b3b      	ldr	r3, [pc, #236]	; (800e440 <mod_4gHandler+0x29c>)
 800e352:	220b      	movs	r2, #11
 800e354:	701a      	strb	r2, [r3, #0]
 800e356:	e006      	b.n	800e366 <mod_4gHandler+0x1c2>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e358:	79fb      	ldrb	r3, [r7, #7]
 800e35a:	2b04      	cmp	r3, #4
 800e35c:	d003      	beq.n	800e366 <mod_4gHandler+0x1c2>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e35e:	4b38      	ldr	r3, [pc, #224]	; (800e440 <mod_4gHandler+0x29c>)
 800e360:	220c      	movs	r2, #12
 800e362:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e364:	e066      	b.n	800e434 <mod_4gHandler+0x290>
 800e366:	e065      	b.n	800e434 <mod_4gHandler+0x290>

			case E_MQTT_CONNECT_STATE:
				len_retStatus = mod_mqttConnect();
 800e368:	f7fe fd84 	bl	800ce74 <mod_mqttConnect>
 800e36c:	4603      	mov	r3, r0
 800e36e:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e370:	79fb      	ldrb	r3, [r7, #7]
 800e372:	2b00      	cmp	r3, #0
 800e374:	d103      	bne.n	800e37e <mod_4gHandler+0x1da>
				{
//					gb_isMqttConnected = true;
//					sen_4gRunState = E_MOD_IDLE_STATE;
					sen_4gRunState = E_GPS_CFG_STATE;
 800e376:	4b32      	ldr	r3, [pc, #200]	; (800e440 <mod_4gHandler+0x29c>)
 800e378:	220d      	movs	r2, #13
 800e37a:	701a      	strb	r2, [r3, #0]
 800e37c:	e024      	b.n	800e3c8 <mod_4gHandler+0x224>
				}
				else if(E_RET_FAILED_TRY_DIFF_ID == len_retStatus)
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d113      	bne.n	800e3ac <mod_4gHandler+0x208>
				{
					sgu8_mqttClientId++;
 800e384:	4b31      	ldr	r3, [pc, #196]	; (800e44c <mod_4gHandler+0x2a8>)
 800e386:	781b      	ldrb	r3, [r3, #0]
 800e388:	3301      	adds	r3, #1
 800e38a:	b2da      	uxtb	r2, r3
 800e38c:	4b2f      	ldr	r3, [pc, #188]	; (800e44c <mod_4gHandler+0x2a8>)
 800e38e:	701a      	strb	r2, [r3, #0]
					if (sgu8_mqttClientId > 5)
 800e390:	4b2e      	ldr	r3, [pc, #184]	; (800e44c <mod_4gHandler+0x2a8>)
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	2b05      	cmp	r3, #5
 800e396:	d902      	bls.n	800e39e <mod_4gHandler+0x1fa>
					{
						sgu8_mqttClientId = 0;
 800e398:	4b2c      	ldr	r3, [pc, #176]	; (800e44c <mod_4gHandler+0x2a8>)
 800e39a:	2200      	movs	r2, #0
 800e39c:	701a      	strb	r2, [r3, #0]
					}
					sen_openMqttState = E_MQTT_OPN_SSL_CFG_STATE;
 800e39e:	4b2c      	ldr	r3, [pc, #176]	; (800e450 <mod_4gHandler+0x2ac>)
 800e3a0:	220d      	movs	r2, #13
 800e3a2:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e3a4:	4b26      	ldr	r3, [pc, #152]	; (800e440 <mod_4gHandler+0x29c>)
 800e3a6:	2209      	movs	r2, #9
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	e00d      	b.n	800e3c8 <mod_4gHandler+0x224>
				}
				else if (E_RET_CONN_CLOSED_ERROR == len_retStatus)
 800e3ac:	79fb      	ldrb	r3, [r7, #7]
 800e3ae:	2b0a      	cmp	r3, #10
 800e3b0:	d103      	bne.n	800e3ba <mod_4gHandler+0x216>
				{
					sen_4gRunState = E_MQTT_OPEN_STATE;
 800e3b2:	4b23      	ldr	r3, [pc, #140]	; (800e440 <mod_4gHandler+0x29c>)
 800e3b4:	2209      	movs	r2, #9
 800e3b6:	701a      	strb	r2, [r3, #0]
 800e3b8:	e006      	b.n	800e3c8 <mod_4gHandler+0x224>
				}
				else if (E_RET_INPROGRESS != len_retStatus)
 800e3ba:	79fb      	ldrb	r3, [r7, #7]
 800e3bc:	2b04      	cmp	r3, #4
 800e3be:	d003      	beq.n	800e3c8 <mod_4gHandler+0x224>
				{
					sen_4gRunState = E_MOD_RESET_STATE;
 800e3c0:	4b1f      	ldr	r3, [pc, #124]	; (800e440 <mod_4gHandler+0x29c>)
 800e3c2:	220c      	movs	r2, #12
 800e3c4:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e3c6:	e035      	b.n	800e434 <mod_4gHandler+0x290>
 800e3c8:	e034      	b.n	800e434 <mod_4gHandler+0x290>

			case E_GPS_CFG_STATE:
				len_retStatus = mod_gpsCfg();
 800e3ca:	f7ff fe63 	bl	800e094 <mod_gpsCfg>
 800e3ce:	4603      	mov	r3, r0
 800e3d0:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e3d2:	79fb      	ldrb	r3, [r7, #7]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d103      	bne.n	800e3e0 <mod_4gHandler+0x23c>
				{
					sen_4gRunState = E_GPS_ENABLE_STATE;
 800e3d8:	4b19      	ldr	r3, [pc, #100]	; (800e440 <mod_4gHandler+0x29c>)
 800e3da:	220e      	movs	r2, #14
 800e3dc:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e3de:	e029      	b.n	800e434 <mod_4gHandler+0x290>
 800e3e0:	e028      	b.n	800e434 <mod_4gHandler+0x290>

			case E_GPS_ENABLE_STATE:
				len_retStatus = mod_gpsEnable();
 800e3e2:	f7ff fea9 	bl	800e138 <mod_gpsEnable>
 800e3e6:	4603      	mov	r3, r0
 800e3e8:	71fb      	strb	r3, [r7, #7]
				if (E_RET_SUCCESS == len_retStatus)
 800e3ea:	79fb      	ldrb	r3, [r7, #7]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d106      	bne.n	800e3fe <mod_4gHandler+0x25a>
				{
					gb_isMqttConnected = true;
 800e3f0:	4b15      	ldr	r3, [pc, #84]	; (800e448 <mod_4gHandler+0x2a4>)
 800e3f2:	2201      	movs	r2, #1
 800e3f4:	701a      	strb	r2, [r3, #0]
					sen_4gRunState = E_SET_URC_PORT_STATE;
 800e3f6:	4b12      	ldr	r3, [pc, #72]	; (800e440 <mod_4gHandler+0x29c>)
 800e3f8:	2201      	movs	r2, #1
 800e3fa:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e3fc:	e01a      	b.n	800e434 <mod_4gHandler+0x290>
 800e3fe:	e019      	b.n	800e434 <mod_4gHandler+0x290>
			case E_GET_GPS_DATA_STATE:

			break;

			case E_MOD_RESET_STATE:
				len_retStatus = mod_mqttDisableEnableFunctionality();
 800e400:	f7fe fefc 	bl	800d1fc <mod_mqttDisableEnableFunctionality>
 800e404:	4603      	mov	r3, r0
 800e406:	71fb      	strb	r3, [r7, #7]
				if ((E_RET_SUCCESS == len_retStatus)
 800e408:	79fb      	ldrb	r3, [r7, #7]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d002      	beq.n	800e414 <mod_4gHandler+0x270>
						|| (E_RET_INPROGRESS != len_retStatus))
 800e40e:	79fb      	ldrb	r3, [r7, #7]
 800e410:	2b04      	cmp	r3, #4
 800e412:	d003      	beq.n	800e41c <mod_4gHandler+0x278>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e414:	4b0a      	ldr	r3, [pc, #40]	; (800e440 <mod_4gHandler+0x29c>)
 800e416:	2206      	movs	r2, #6
 800e418:	701a      	strb	r2, [r3, #0]
				}
			break;
 800e41a:	e00b      	b.n	800e434 <mod_4gHandler+0x290>
 800e41c:	e00a      	b.n	800e434 <mod_4gHandler+0x290>

			case E_MOD_WAIT_STATE:
				if (tm_get4gRunTimerValue() == 0)
 800e41e:	f7f1 ffe9 	bl	80003f4 <tm_get4gRunTimerValue>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d103      	bne.n	800e430 <mod_4gHandler+0x28c>
				{
					sen_4gRunState = E_NETWORK_STATUS_STATE;
 800e428:	4b05      	ldr	r3, [pc, #20]	; (800e440 <mod_4gHandler+0x29c>)
 800e42a:	2206      	movs	r2, #6
 800e42c:	701a      	strb	r2, [r3, #0]
				}

			break;
 800e42e:	e001      	b.n	800e434 <mod_4gHandler+0x290>
 800e430:	e000      	b.n	800e434 <mod_4gHandler+0x290>

			default:
			break;
 800e432:	bf00      	nop
		}
	}
}
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	1ffea4dc 	.word	0x1ffea4dc
 800e440:	1ffea4d8 	.word	0x1ffea4d8
 800e444:	1fff4799 	.word	0x1fff4799
 800e448:	1fff5234 	.word	0x1fff5234
 800e44c:	1fff476d 	.word	0x1fff476d
 800e450:	1fff4773 	.word	0x1fff4773

0800e454 <mod_pub10sPackExtractGps>:

	return len_retStatus;
}*/

en_responseRetCodes_t mod_pub10sPackExtractGps(void)
{
 800e454:	b5b0      	push	{r4, r5, r7, lr}
 800e456:	b08c      	sub	sp, #48	; 0x30
 800e458:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 800e45a:	2304      	movs	r3, #4
 800e45c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	static uint8_t lu8_retryCont = 0;

	RTC_GetTime(&current_time);
 800e460:	4868      	ldr	r0, [pc, #416]	; (800e604 <mod_pub10sPackExtractGps+0x1b0>)
 800e462:	f7f9 f9b5 	bl	80077d0 <RTC_GetTime>

	if ((current_time.seconds % 3 == 0U) && (sgb_flagGps == false) && (sgb_packetFlag == false))
 800e466:	4b67      	ldr	r3, [pc, #412]	; (800e604 <mod_pub10sPackExtractGps+0x1b0>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e46e:	b2db      	uxtb	r3, r3
 800e470:	4619      	mov	r1, r3
 800e472:	4b65      	ldr	r3, [pc, #404]	; (800e608 <mod_pub10sPackExtractGps+0x1b4>)
 800e474:	fb83 3201 	smull	r3, r2, r3, r1
 800e478:	17cb      	asrs	r3, r1, #31
 800e47a:	1ad2      	subs	r2, r2, r3
 800e47c:	4613      	mov	r3, r2
 800e47e:	005b      	lsls	r3, r3, #1
 800e480:	4413      	add	r3, r2
 800e482:	1aca      	subs	r2, r1, r3
 800e484:	2a00      	cmp	r2, #0
 800e486:	d113      	bne.n	800e4b0 <mod_pub10sPackExtractGps+0x5c>
 800e488:	4b60      	ldr	r3, [pc, #384]	; (800e60c <mod_pub10sPackExtractGps+0x1b8>)
 800e48a:	781b      	ldrb	r3, [r3, #0]
 800e48c:	f083 0301 	eor.w	r3, r3, #1
 800e490:	b2db      	uxtb	r3, r3
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00c      	beq.n	800e4b0 <mod_pub10sPackExtractGps+0x5c>
 800e496:	4b5e      	ldr	r3, [pc, #376]	; (800e610 <mod_pub10sPackExtractGps+0x1bc>)
 800e498:	781b      	ldrb	r3, [r3, #0]
 800e49a:	f083 0301 	eor.w	r3, r3, #1
 800e49e:	b2db      	uxtb	r3, r3
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d005      	beq.n	800e4b0 <mod_pub10sPackExtractGps+0x5c>
	{
		Get_CurrentLocation();
 800e4a4:	f7fd f864 	bl	800b570 <Get_CurrentLocation>
		sgb_flagGps = true;
 800e4a8:	4b58      	ldr	r3, [pc, #352]	; (800e60c <mod_pub10sPackExtractGps+0x1b8>)
 800e4aa:	2201      	movs	r2, #1
 800e4ac:	701a      	strb	r2, [r3, #0]
 800e4ae:	e017      	b.n	800e4e0 <mod_pub10sPackExtractGps+0x8c>
	}
	else if ((sgb_flagGps == true) && (current_time.seconds % 3) != 0U)
 800e4b0:	4b56      	ldr	r3, [pc, #344]	; (800e60c <mod_pub10sPackExtractGps+0x1b8>)
 800e4b2:	781b      	ldrb	r3, [r3, #0]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d013      	beq.n	800e4e0 <mod_pub10sPackExtractGps+0x8c>
 800e4b8:	4b52      	ldr	r3, [pc, #328]	; (800e604 <mod_pub10sPackExtractGps+0x1b0>)
 800e4ba:	781b      	ldrb	r3, [r3, #0]
 800e4bc:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	4619      	mov	r1, r3
 800e4c4:	4b50      	ldr	r3, [pc, #320]	; (800e608 <mod_pub10sPackExtractGps+0x1b4>)
 800e4c6:	fb83 3201 	smull	r3, r2, r3, r1
 800e4ca:	17cb      	asrs	r3, r1, #31
 800e4cc:	1ad2      	subs	r2, r2, r3
 800e4ce:	4613      	mov	r3, r2
 800e4d0:	005b      	lsls	r3, r3, #1
 800e4d2:	4413      	add	r3, r2
 800e4d4:	1aca      	subs	r2, r1, r3
 800e4d6:	2a00      	cmp	r2, #0
 800e4d8:	d002      	beq.n	800e4e0 <mod_pub10sPackExtractGps+0x8c>
	{
		sgb_flagGps = false;
 800e4da:	4b4c      	ldr	r3, [pc, #304]	; (800e60c <mod_pub10sPackExtractGps+0x1b8>)
 800e4dc:	2200      	movs	r2, #0
 800e4de:	701a      	strb	r2, [r3, #0]
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
 800e4e0:	4b48      	ldr	r3, [pc, #288]	; (800e604 <mod_pub10sPackExtractGps+0x1b0>)
 800e4e2:	781b      	ldrb	r3, [r3, #0]
 800e4e4:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e4e8:	b2db      	uxtb	r3, r3
 800e4ea:	4619      	mov	r1, r3
 800e4ec:	4b49      	ldr	r3, [pc, #292]	; (800e614 <mod_pub10sPackExtractGps+0x1c0>)
 800e4ee:	fb83 2301 	smull	r2, r3, r3, r1
 800e4f2:	109a      	asrs	r2, r3, #2
 800e4f4:	17cb      	asrs	r3, r1, #31
 800e4f6:	1ad2      	subs	r2, r2, r3
 800e4f8:	4613      	mov	r3, r2
 800e4fa:	009b      	lsls	r3, r3, #2
 800e4fc:	4413      	add	r3, r2
 800e4fe:	005b      	lsls	r3, r3, #1
 800e500:	1aca      	subs	r2, r1, r3
 800e502:	2a00      	cmp	r2, #0
 800e504:	d12c      	bne.n	800e560 <mod_pub10sPackExtractGps+0x10c>
 800e506:	4b44      	ldr	r3, [pc, #272]	; (800e618 <mod_pub10sPackExtractGps+0x1c4>)
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	f083 0301 	eor.w	r3, r3, #1
 800e50e:	b2db      	uxtb	r3, r3
 800e510:	2b00      	cmp	r3, #0
 800e512:	d025      	beq.n	800e560 <mod_pub10sPackExtractGps+0x10c>
	{
		epoch_time();
 800e514:	f7fc ff24 	bl	800b360 <epoch_time>
		Process_4G_Event_Data();
 800e518:	f7fc fd98 	bl	800b04c <Process_4G_Event_Data>
		memset(Eventbuffer_4Gcomm, 0, 512);
 800e51c:	483f      	ldr	r0, [pc, #252]	; (800e61c <mod_pub10sPackExtractGps+0x1c8>)
 800e51e:	2100      	movs	r1, #0
 800e520:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e524:	f003 f915 	bl	8011752 <memset>
		pb_ostream_t stream1;
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
 800e528:	463b      	mov	r3, r7
 800e52a:	4618      	mov	r0, r3
 800e52c:	493b      	ldr	r1, [pc, #236]	; (800e61c <mod_pub10sPackExtractGps+0x1c8>)
 800e52e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e532:	f000 fb2b 	bl	800eb8c <pb_ostream_from_buffer>
 800e536:	f107 0418 	add.w	r4, r7, #24
 800e53a:	463d      	mov	r5, r7
 800e53c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e53e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e540:	682b      	ldr	r3, [r5, #0]
 800e542:	6023      	str	r3, [r4, #0]
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
 800e544:	f107 0318 	add.w	r3, r7, #24
 800e548:	4618      	mov	r0, r3
 800e54a:	4935      	ldr	r1, [pc, #212]	; (800e620 <mod_pub10sPackExtractGps+0x1cc>)
 800e54c:	4a35      	ldr	r2, [pc, #212]	; (800e624 <mod_pub10sPackExtractGps+0x1d0>)
 800e54e:	f000 ff8f 	bl	800f470 <pb_encode>
		sgb_packetFlag = true;
 800e552:	4b2f      	ldr	r3, [pc, #188]	; (800e610 <mod_pub10sPackExtractGps+0x1bc>)
 800e554:	2201      	movs	r2, #1
 800e556:	701a      	strb	r2, [r3, #0]
		sgb_flag4g = true;
 800e558:	4b2f      	ldr	r3, [pc, #188]	; (800e618 <mod_pub10sPackExtractGps+0x1c4>)
 800e55a:	2201      	movs	r2, #1
 800e55c:	701a      	strb	r2, [r3, #0]
	{
		sgb_flagGps = false;
	}

	if ((current_time.seconds % 10 == 0U) && (sgb_flag4g == false))
	{
 800e55e:	e019      	b.n	800e594 <mod_pub10sPackExtractGps+0x140>
		stream1 = pb_ostream_from_buffer(Eventbuffer_4Gcomm, sizeof(Eventbuffer_4Gcomm));
		pb_encode(&stream1, vcu_fleet_fleet_10_sec_fields, &TD1);
		sgb_packetFlag = true;
		sgb_flag4g = true;
	}
	else if ((sgb_flag4g == true) && (current_time.seconds % 10 != 0U))
 800e560:	4b2d      	ldr	r3, [pc, #180]	; (800e618 <mod_pub10sPackExtractGps+0x1c4>)
 800e562:	781b      	ldrb	r3, [r3, #0]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d015      	beq.n	800e594 <mod_pub10sPackExtractGps+0x140>
 800e568:	4b26      	ldr	r3, [pc, #152]	; (800e604 <mod_pub10sPackExtractGps+0x1b0>)
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	f3c3 0305 	ubfx	r3, r3, #0, #6
 800e570:	b2db      	uxtb	r3, r3
 800e572:	4619      	mov	r1, r3
 800e574:	4b27      	ldr	r3, [pc, #156]	; (800e614 <mod_pub10sPackExtractGps+0x1c0>)
 800e576:	fb83 2301 	smull	r2, r3, r3, r1
 800e57a:	109a      	asrs	r2, r3, #2
 800e57c:	17cb      	asrs	r3, r1, #31
 800e57e:	1ad2      	subs	r2, r2, r3
 800e580:	4613      	mov	r3, r2
 800e582:	009b      	lsls	r3, r3, #2
 800e584:	4413      	add	r3, r2
 800e586:	005b      	lsls	r3, r3, #1
 800e588:	1aca      	subs	r2, r1, r3
 800e58a:	2a00      	cmp	r2, #0
 800e58c:	d002      	beq.n	800e594 <mod_pub10sPackExtractGps+0x140>
	{
		sgb_flag4g = false;
 800e58e:	4b22      	ldr	r3, [pc, #136]	; (800e618 <mod_pub10sPackExtractGps+0x1c4>)
 800e590:	2200      	movs	r2, #0
 800e592:	701a      	strb	r2, [r3, #0]
	}

	if (sgb_packetFlag == true)
 800e594:	4b1e      	ldr	r3, [pc, #120]	; (800e610 <mod_pub10sPackExtractGps+0x1bc>)
 800e596:	781b      	ldrb	r3, [r3, #0]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d02e      	beq.n	800e5fa <mod_pub10sPackExtractGps+0x1a6>
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);
 800e59c:	481f      	ldr	r0, [pc, #124]	; (800e61c <mod_pub10sPackExtractGps+0x1c8>)
 800e59e:	f003 fbe0 	bl	8011d62 <strlen>
 800e5a2:	4603      	mov	r3, r0
		sgb_flag4g = false;
	}

	if (sgb_packetFlag == true)
	{
		len_retStatus = mod_mqttPublishData(Eventbuffer_4Gcomm,
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	481d      	ldr	r0, [pc, #116]	; (800e61c <mod_pub10sPackExtractGps+0x1c8>)
 800e5a8:	4619      	mov	r1, r3
 800e5aa:	4a1f      	ldr	r2, [pc, #124]	; (800e628 <mod_pub10sPackExtractGps+0x1d4>)
 800e5ac:	f7fe fe70 	bl	800d290 <mod_mqttPublishData>
 800e5b0:	4603      	mov	r3, r0
 800e5b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				strlen((char*) Eventbuffer_4Gcomm),(uint8_t*) MQTT_PUBLISH_TOPIC);

		if (E_RET_SUCCESS == len_retStatus)
 800e5b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d103      	bne.n	800e5c6 <mod_pub10sPackExtractGps+0x172>
		{
			sgb_packetFlag = false;
 800e5be:	4b14      	ldr	r3, [pc, #80]	; (800e610 <mod_pub10sPackExtractGps+0x1bc>)
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	701a      	strb	r2, [r3, #0]
 800e5c4:	e019      	b.n	800e5fa <mod_pub10sPackExtractGps+0x1a6>
		}
		else if (E_RET_INPROGRESS != len_retStatus)
 800e5c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800e5ca:	2b04      	cmp	r3, #4
 800e5cc:	d015      	beq.n	800e5fa <mod_pub10sPackExtractGps+0x1a6>
		{
			lu8_retryCont++;
 800e5ce:	4b17      	ldr	r3, [pc, #92]	; (800e62c <mod_pub10sPackExtractGps+0x1d8>)
 800e5d0:	781b      	ldrb	r3, [r3, #0]
 800e5d2:	3301      	adds	r3, #1
 800e5d4:	b2da      	uxtb	r2, r3
 800e5d6:	4b15      	ldr	r3, [pc, #84]	; (800e62c <mod_pub10sPackExtractGps+0x1d8>)
 800e5d8:	701a      	strb	r2, [r3, #0]
			if (3 > lu8_retryCont)
 800e5da:	4b14      	ldr	r3, [pc, #80]	; (800e62c <mod_pub10sPackExtractGps+0x1d8>)
 800e5dc:	781b      	ldrb	r3, [r3, #0]
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d80b      	bhi.n	800e5fa <mod_pub10sPackExtractGps+0x1a6>
			{
				lu8_retryCont = 0;
 800e5e2:	4b12      	ldr	r3, [pc, #72]	; (800e62c <mod_pub10sPackExtractGps+0x1d8>)
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	701a      	strb	r2, [r3, #0]

				//write to SD card

				sgb_packetFlag = false;
 800e5e8:	4b09      	ldr	r3, [pc, #36]	; (800e610 <mod_pub10sPackExtractGps+0x1bc>)
 800e5ea:	2200      	movs	r2, #0
 800e5ec:	701a      	strb	r2, [r3, #0]
				gb_isMqttConnected = false;
 800e5ee:	4b10      	ldr	r3, [pc, #64]	; (800e630 <mod_pub10sPackExtractGps+0x1dc>)
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	701a      	strb	r2, [r3, #0]
				sen_4gRunState = E_MQTT_OPEN_STATE;
 800e5f4:	4b0f      	ldr	r3, [pc, #60]	; (800e634 <mod_pub10sPackExtractGps+0x1e0>)
 800e5f6:	2209      	movs	r2, #9
 800e5f8:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3730      	adds	r7, #48	; 0x30
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bdb0      	pop	{r4, r5, r7, pc}
 800e602:	bf00      	nop
 800e604:	1fff47f4 	.word	0x1fff47f4
 800e608:	55555556 	.word	0x55555556
 800e60c:	1fff4779 	.word	0x1fff4779
 800e610:	1fff4777 	.word	0x1fff4777
 800e614:	66666667 	.word	0x66666667
 800e618:	1fff4778 	.word	0x1fff4778
 800e61c:	1fff44a8 	.word	0x1fff44a8
 800e620:	08013dbc 	.word	0x08013dbc
 800e624:	1fff5238 	.word	0x1fff5238
 800e628:	08014084 	.word	0x08014084
 800e62c:	1fff479a 	.word	0x1fff479a
 800e630:	1fff5234 	.word	0x1fff5234
 800e634:	1ffea4d8 	.word	0x1ffea4d8

0800e638 <load_descriptor_values>:
 */

#include "pb_common.h"

static bool load_descriptor_values(pb_field_iter_t *iter)
{
 800e638:	b480      	push	{r7}
 800e63a:	b08f      	sub	sp, #60	; 0x3c
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
    uint32_t word0;
    uint32_t data_offset;
    int_least8_t size_offset;

    if (iter->index >= iter->descriptor->field_count)
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	891a      	ldrh	r2, [r3, #8]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	8a1b      	ldrh	r3, [r3, #16]
 800e64a:	429a      	cmp	r2, r3
 800e64c:	d301      	bcc.n	800e652 <load_descriptor_values+0x1a>
        return false;
 800e64e:	2300      	movs	r3, #0
 800e650:	e153      	b.n	800e8fa <load_descriptor_values+0x2c2>

    word0 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	681b      	ldr	r3, [r3, #0]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	895b      	ldrh	r3, [r3, #10]
 800e65c:	009b      	lsls	r3, r3, #2
 800e65e:	4413      	add	r3, r2
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	62fb      	str	r3, [r7, #44]	; 0x2c
    iter->type = (pb_type_t)((word0 >> 8) & 0xFF);
 800e664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e666:	0a1b      	lsrs	r3, r3, #8
 800e668:	b2da      	uxtb	r2, r3
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	759a      	strb	r2, [r3, #22]

    switch(word0 & 3)
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	f003 0303 	and.w	r3, r3, #3
 800e674:	2b01      	cmp	r3, #1
 800e676:	d023      	beq.n	800e6c0 <load_descriptor_values+0x88>
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d302      	bcc.n	800e682 <load_descriptor_values+0x4a>
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d053      	beq.n	800e728 <load_descriptor_values+0xf0>
 800e680:	e08e      	b.n	800e7a0 <load_descriptor_values+0x168>
    {
        case 0: {
            /* 1-word format */
            iter->array_size = 1;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	2201      	movs	r2, #1
 800e686:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)((word0 >> 2) & 0x3F);
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	089b      	lsrs	r3, r3, #2
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e692:	b29a      	uxth	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 24) & 0x0F);
 800e698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e69a:	0e1b      	lsrs	r3, r3, #24
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	f003 030f 	and.w	r3, r3, #15
 800e6a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = (word0 >> 16) & 0xFF;
 800e6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a8:	0c1b      	lsrs	r3, r3, #16
 800e6aa:	b2db      	uxtb	r3, r3
 800e6ac:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word0 >> 28) & 0x0F);
 800e6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6b0:	0f1b      	lsrs	r3, r3, #28
 800e6b2:	b29b      	uxth	r3, r3
 800e6b4:	f003 030f 	and.w	r3, r3, #15
 800e6b8:	b29a      	uxth	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	825a      	strh	r2, [r3, #18]
            break;
 800e6be:	e0b4      	b.n	800e82a <load_descriptor_values+0x1f2>
        }

        case 1: {
            /* 2-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	895b      	ldrh	r3, [r3, #10]
 800e6ca:	3301      	adds	r3, #1
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4413      	add	r3, r2
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	62bb      	str	r3, [r7, #40]	; 0x28

            iter->array_size = (pb_size_t)((word0 >> 16) & 0x0FFF);
 800e6d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6d6:	0c1b      	lsrs	r3, r3, #16
 800e6d8:	b29b      	uxth	r3, r3
 800e6da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e6de:	b29a      	uxth	r2, r3
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 28) << 6));
 800e6e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e6:	089b      	lsrs	r3, r3, #2
 800e6e8:	b29b      	uxth	r3, r3
 800e6ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e6ee:	b29a      	uxth	r2, r3
 800e6f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6f2:	0f1b      	lsrs	r3, r3, #28
 800e6f4:	b29b      	uxth	r3, r3
 800e6f6:	019b      	lsls	r3, r3, #6
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	4313      	orrs	r3, r2
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)((word0 >> 28) & 0x0F);
 800e702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e704:	0f1b      	lsrs	r3, r3, #28
 800e706:	b2db      	uxtb	r3, r3
 800e708:	f003 030f 	and.w	r3, r3, #15
 800e70c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word1 & 0xFFFF;
 800e710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e712:	b29b      	uxth	r3, r3
 800e714:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)((word1 >> 16) & 0x0FFF);
 800e716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e718:	0c1b      	lsrs	r3, r3, #16
 800e71a:	b29b      	uxth	r3, r3
 800e71c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e720:	b29a      	uxth	r2, r3
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	825a      	strh	r2, [r3, #18]
            break;
 800e726:	e080      	b.n	800e82a <load_descriptor_values+0x1f2>
        }

        case 2: {
            /* 4-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	681a      	ldr	r2, [r3, #0]
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	895b      	ldrh	r3, [r3, #10]
 800e732:	3301      	adds	r3, #1
 800e734:	009b      	lsls	r3, r3, #2
 800e736:	4413      	add	r3, r2
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	627b      	str	r3, [r7, #36]	; 0x24
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	681a      	ldr	r2, [r3, #0]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	895b      	ldrh	r3, [r3, #10]
 800e746:	3302      	adds	r3, #2
 800e748:	009b      	lsls	r3, r3, #2
 800e74a:	4413      	add	r3, r2
 800e74c:	681b      	ldr	r3, [r3, #0]
 800e74e:	623b      	str	r3, [r7, #32]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	895b      	ldrh	r3, [r3, #10]
 800e75a:	3303      	adds	r3, #3
 800e75c:	009b      	lsls	r3, r3, #2
 800e75e:	4413      	add	r3, r2
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	61fb      	str	r3, [r7, #28]

            iter->array_size = (pb_size_t)(word0 >> 16);
 800e764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e766:	0c1b      	lsrs	r3, r3, #16
 800e768:	b29a      	uxth	r2, r3
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800e76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e770:	089b      	lsrs	r3, r3, #2
 800e772:	b29b      	uxth	r3, r3
 800e774:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e778:	b29a      	uxth	r2, r3
 800e77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e77c:	0a1b      	lsrs	r3, r3, #8
 800e77e:	b29b      	uxth	r3, r3
 800e780:	019b      	lsls	r3, r3, #6
 800e782:	b29b      	uxth	r3, r3
 800e784:	4313      	orrs	r3, r2
 800e786:	b29a      	uxth	r2, r3
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800e792:	6a3b      	ldr	r3, [r7, #32]
 800e794:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800e796:	69fb      	ldr	r3, [r7, #28]
 800e798:	b29a      	uxth	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	825a      	strh	r2, [r3, #18]
            break;
 800e79e:	e044      	b.n	800e82a <load_descriptor_values+0x1f2>
        }

        default: {
            /* 8-word format */
            uint32_t word1 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 1]);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	681a      	ldr	r2, [r3, #0]
 800e7a6:	687b      	ldr	r3, [r7, #4]
 800e7a8:	895b      	ldrh	r3, [r3, #10]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	009b      	lsls	r3, r3, #2
 800e7ae:	4413      	add	r3, r2
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	61bb      	str	r3, [r7, #24]
            uint32_t word2 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 2]);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	895b      	ldrh	r3, [r3, #10]
 800e7be:	3302      	adds	r3, #2
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4413      	add	r3, r2
 800e7c4:	681b      	ldr	r3, [r3, #0]
 800e7c6:	617b      	str	r3, [r7, #20]
            uint32_t word3 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 3]);
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	895b      	ldrh	r3, [r3, #10]
 800e7d2:	3303      	adds	r3, #3
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	4413      	add	r3, r2
 800e7d8:	681b      	ldr	r3, [r3, #0]
 800e7da:	613b      	str	r3, [r7, #16]
            uint32_t word4 = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index + 4]);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	895b      	ldrh	r3, [r3, #10]
 800e7e6:	3304      	adds	r3, #4
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	60fb      	str	r3, [r7, #12]

            iter->array_size = (pb_size_t)word4;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	b29a      	uxth	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	829a      	strh	r2, [r3, #20]
            iter->tag = (pb_size_t)(((word0 >> 2) & 0x3F) | ((word1 >> 8) << 6));
 800e7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7fa:	089b      	lsrs	r3, r3, #2
 800e7fc:	b29b      	uxth	r3, r3
 800e7fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e802:	b29a      	uxth	r2, r3
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	0a1b      	lsrs	r3, r3, #8
 800e808:	b29b      	uxth	r3, r3
 800e80a:	019b      	lsls	r3, r3, #6
 800e80c:	b29b      	uxth	r3, r3
 800e80e:	4313      	orrs	r3, r2
 800e810:	b29a      	uxth	r2, r3
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	821a      	strh	r2, [r3, #16]
            size_offset = (int_least8_t)(word1 & 0xFF);
 800e816:	69bb      	ldr	r3, [r7, #24]
 800e818:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            data_offset = word2;
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	637b      	str	r3, [r7, #52]	; 0x34
            iter->data_size = (pb_size_t)word3;
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	b29a      	uxth	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	825a      	strh	r2, [r3, #18]
            break;
 800e828:	bf00      	nop
        }
    }

    if (!iter->message)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	685b      	ldr	r3, [r3, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <load_descriptor_values+0x208>
    {
        /* Avoid doing arithmetic on null pointers, it is undefined */
        iter->pField = NULL;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	2200      	movs	r2, #0
 800e836:	619a      	str	r2, [r3, #24]
        iter->pSize = NULL;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	2200      	movs	r2, #0
 800e83c:	621a      	str	r2, [r3, #32]
 800e83e:	e041      	b.n	800e8c4 <load_descriptor_values+0x28c>
    }
    else
    {
        iter->pField = (char*)iter->message + data_offset;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e846:	441a      	add	r2, r3
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	619a      	str	r2, [r3, #24]

        if (size_offset)
 800e84c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e850:	2b00      	cmp	r3, #0
 800e852:	d008      	beq.n	800e866 <load_descriptor_values+0x22e>
        {
            iter->pSize = (char*)iter->pField - size_offset;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	699a      	ldr	r2, [r3, #24]
 800e858:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800e85c:	425b      	negs	r3, r3
 800e85e:	441a      	add	r2, r3
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	621a      	str	r2, [r3, #32]
 800e864:	e01a      	b.n	800e89c <load_descriptor_values+0x264>
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	7d9b      	ldrb	r3, [r3, #22]
 800e86a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e86e:	2b20      	cmp	r3, #32
 800e870:	d111      	bne.n	800e896 <load_descriptor_values+0x25e>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	7d9b      	ldrb	r3, [r3, #22]
 800e876:	f003 03c0 	and.w	r3, r3, #192	; 0xc0

        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d005      	beq.n	800e88a <load_descriptor_values+0x252>
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	7d9b      	ldrb	r3, [r3, #22]
 800e882:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
        if (size_offset)
        {
            iter->pSize = (char*)iter->pField - size_offset;
        }
        else if (PB_HTYPE(iter->type) == PB_HTYPE_REPEATED &&
                 (PB_ATYPE(iter->type) == PB_ATYPE_STATIC ||
 800e886:	2b80      	cmp	r3, #128	; 0x80
 800e888:	d105      	bne.n	800e896 <load_descriptor_values+0x25e>
                  PB_ATYPE(iter->type) == PB_ATYPE_POINTER))
        {
            /* Fixed count array */
            iter->pSize = &iter->array_size;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	f103 0214 	add.w	r2, r3, #20
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	621a      	str	r2, [r3, #32]
 800e894:	e002      	b.n	800e89c <load_descriptor_values+0x264>
        }
        else
        {
            iter->pSize = NULL;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	2200      	movs	r2, #0
 800e89a:	621a      	str	r2, [r3, #32]
        }

        if (PB_ATYPE(iter->type) == PB_ATYPE_POINTER && iter->pField != NULL)
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	7d9b      	ldrb	r3, [r3, #22]
 800e8a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800e8a4:	2b80      	cmp	r3, #128	; 0x80
 800e8a6:	d109      	bne.n	800e8bc <load_descriptor_values+0x284>
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d005      	beq.n	800e8bc <load_descriptor_values+0x284>
        {
            iter->pData = *(void**)iter->pField;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	699b      	ldr	r3, [r3, #24]
 800e8b4:	681a      	ldr	r2, [r3, #0]
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	61da      	str	r2, [r3, #28]
 800e8ba:	e003      	b.n	800e8c4 <load_descriptor_values+0x28c>
        }
        else
        {
            iter->pData = iter->pField;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	699a      	ldr	r2, [r3, #24]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	61da      	str	r2, [r3, #28]
        }
    }

    if (PB_LTYPE_IS_SUBMSG(iter->type))
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	7d9b      	ldrb	r3, [r3, #22]
 800e8c8:	f003 030f 	and.w	r3, r3, #15
 800e8cc:	2b08      	cmp	r3, #8
 800e8ce:	d005      	beq.n	800e8dc <load_descriptor_values+0x2a4>
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7d9b      	ldrb	r3, [r3, #22]
 800e8d4:	f003 030f 	and.w	r3, r3, #15
 800e8d8:	2b09      	cmp	r3, #9
 800e8da:	d10a      	bne.n	800e8f2 <load_descriptor_values+0x2ba>
    {
        iter->submsg_desc = iter->descriptor->submsg_info[iter->submessage_index];
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	685a      	ldr	r2, [r3, #4]
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	89db      	ldrh	r3, [r3, #14]
 800e8e6:	009b      	lsls	r3, r3, #2
 800e8e8:	4413      	add	r3, r2
 800e8ea:	681a      	ldr	r2, [r3, #0]
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	625a      	str	r2, [r3, #36]	; 0x24
 800e8f0:	e002      	b.n	800e8f8 <load_descriptor_values+0x2c0>
    }
    else
    {
        iter->submsg_desc = NULL;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	625a      	str	r2, [r3, #36]	; 0x24
    }

    return true;
 800e8f8:	2301      	movs	r3, #1
}
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	373c      	adds	r7, #60	; 0x3c
 800e8fe:	46bd      	mov	sp, r7
 800e900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e904:	4770      	bx	lr
 800e906:	bf00      	nop

0800e908 <advance_iterator>:

static void advance_iterator(pb_field_iter_t *iter)
{
 800e908:	b480      	push	{r7}
 800e90a:	b085      	sub	sp, #20
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
    iter->index++;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	891b      	ldrh	r3, [r3, #8]
 800e914:	3301      	adds	r3, #1
 800e916:	b29a      	uxth	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	811a      	strh	r2, [r3, #8]

    if (iter->index >= iter->descriptor->field_count)
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	891a      	ldrh	r2, [r3, #8]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	8a1b      	ldrh	r3, [r3, #16]
 800e926:	429a      	cmp	r2, r3
 800e928:	d30c      	bcc.n	800e944 <advance_iterator+0x3c>
    {
        /* Restart */
        iter->index = 0;
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2200      	movs	r2, #0
 800e92e:	811a      	strh	r2, [r3, #8]
        iter->field_info_index = 0;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	815a      	strh	r2, [r3, #10]
        iter->submessage_index = 0;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	2200      	movs	r2, #0
 800e93a:	81da      	strh	r2, [r3, #14]
        iter->required_field_index = 0;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2200      	movs	r2, #0
 800e940:	819a      	strh	r2, [r3, #12]
 800e942:	e03c      	b.n	800e9be <advance_iterator+0xb6>
         * All field info formats have the following fields:
         * - lowest 2 bits tell the amount of words in the descriptor (2^n words)
         * - bits 2..7 give the lowest bits of tag number.
         * - bits 8..15 give the field type.
         */
        uint32_t prev_descriptor = PB_PROGMEM_READU32(iter->descriptor->field_info[iter->field_info_index]);
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	681b      	ldr	r3, [r3, #0]
 800e948:	681a      	ldr	r2, [r3, #0]
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	895b      	ldrh	r3, [r3, #10]
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	4413      	add	r3, r2
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	60fb      	str	r3, [r7, #12]
        pb_type_t prev_type = (prev_descriptor >> 8) & 0xFF;
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	0a1b      	lsrs	r3, r3, #8
 800e95a:	72fb      	strb	r3, [r7, #11]
        pb_size_t descriptor_len = (pb_size_t)(1 << (prev_descriptor & 3));
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	f003 0303 	and.w	r3, r3, #3
 800e962:	2201      	movs	r2, #1
 800e964:	fa02 f303 	lsl.w	r3, r2, r3
 800e968:	813b      	strh	r3, [r7, #8]

        /* Add to fields.
         * The cast to pb_size_t is needed to avoid -Wconversion warning.
         * Because the data is is constants from generator, there is no danger of overflow.
         */
        iter->field_info_index = (pb_size_t)(iter->field_info_index + descriptor_len);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	895a      	ldrh	r2, [r3, #10]
 800e96e:	893b      	ldrh	r3, [r7, #8]
 800e970:	4413      	add	r3, r2
 800e972:	b29a      	uxth	r2, r3
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	815a      	strh	r2, [r3, #10]
        iter->required_field_index = (pb_size_t)(iter->required_field_index + (PB_HTYPE(prev_type) == PB_HTYPE_REQUIRED));
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	899a      	ldrh	r2, [r3, #12]
 800e97c:	7afb      	ldrb	r3, [r7, #11]
 800e97e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800e982:	2b00      	cmp	r3, #0
 800e984:	bf0c      	ite	eq
 800e986:	2301      	moveq	r3, #1
 800e988:	2300      	movne	r3, #0
 800e98a:	b2db      	uxtb	r3, r3
 800e98c:	b29b      	uxth	r3, r3
 800e98e:	4413      	add	r3, r2
 800e990:	b29a      	uxth	r2, r3
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	819a      	strh	r2, [r3, #12]
        iter->submessage_index = (pb_size_t)(iter->submessage_index + PB_LTYPE_IS_SUBMSG(prev_type));
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	89da      	ldrh	r2, [r3, #14]
 800e99a:	7afb      	ldrb	r3, [r7, #11]
 800e99c:	f003 030f 	and.w	r3, r3, #15
 800e9a0:	2b08      	cmp	r3, #8
 800e9a2:	d004      	beq.n	800e9ae <advance_iterator+0xa6>
 800e9a4:	7afb      	ldrb	r3, [r7, #11]
 800e9a6:	f003 030f 	and.w	r3, r3, #15
 800e9aa:	2b09      	cmp	r3, #9
 800e9ac:	d101      	bne.n	800e9b2 <advance_iterator+0xaa>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <advance_iterator+0xac>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	4413      	add	r3, r2
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	81da      	strh	r2, [r3, #14]
    }
}
 800e9be:	3714      	adds	r7, #20
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_msgdesc_t *desc, void *message)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b084      	sub	sp, #16
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	607a      	str	r2, [r7, #4]
    memset(iter, 0, sizeof(*iter));
 800e9d4:	68f8      	ldr	r0, [r7, #12]
 800e9d6:	2100      	movs	r1, #0
 800e9d8:	2228      	movs	r2, #40	; 0x28
 800e9da:	f002 feba 	bl	8011752 <memset>

    iter->descriptor = desc;
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	68ba      	ldr	r2, [r7, #8]
 800e9e2:	601a      	str	r2, [r3, #0]
    iter->message = message;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	605a      	str	r2, [r3, #4]

    return load_descriptor_values(iter);
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fe24 	bl	800e638 <load_descriptor_values>
 800e9f0:	4603      	mov	r3, r0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3710      	adds	r7, #16
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}
 800e9fa:	bf00      	nop

0800e9fc <pb_field_iter_begin_extension>:

bool pb_field_iter_begin_extension(pb_field_iter_t *iter, pb_extension_t *extension)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b086      	sub	sp, #24
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	6078      	str	r0, [r7, #4]
 800ea04:	6039      	str	r1, [r7, #0]
    const pb_msgdesc_t *msg = (const pb_msgdesc_t*)extension->type->arg;
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	689b      	ldr	r3, [r3, #8]
 800ea0c:	613b      	str	r3, [r7, #16]
    bool status;

    uint32_t word0 = PB_PROGMEM_READU32(msg->field_info[0]);
 800ea0e:	693b      	ldr	r3, [r7, #16]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	60fb      	str	r3, [r7, #12]
    if (PB_ATYPE(word0 >> 8) == PB_ATYPE_POINTER)
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	0a1b      	lsrs	r3, r3, #8
 800ea1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ea1e:	2b80      	cmp	r3, #128	; 0x80
 800ea20:	d109      	bne.n	800ea36 <pb_field_iter_begin_extension+0x3a>
    {
        /* For pointer extensions, the pointer is stored directly
         * in the extension structure. This avoids having an extra
         * indirection. */
        status = pb_field_iter_begin(iter, msg, &extension->dest);
 800ea22:	683b      	ldr	r3, [r7, #0]
 800ea24:	3304      	adds	r3, #4
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	6939      	ldr	r1, [r7, #16]
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f7ff ffcc 	bl	800e9c8 <pb_field_iter_begin>
 800ea30:	4603      	mov	r3, r0
 800ea32:	75fb      	strb	r3, [r7, #23]
 800ea34:	e008      	b.n	800ea48 <pb_field_iter_begin_extension+0x4c>
    }
    else
    {
        status = pb_field_iter_begin(iter, msg, extension->dest);
 800ea36:	683b      	ldr	r3, [r7, #0]
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	6939      	ldr	r1, [r7, #16]
 800ea3e:	461a      	mov	r2, r3
 800ea40:	f7ff ffc2 	bl	800e9c8 <pb_field_iter_begin>
 800ea44:	4603      	mov	r3, r0
 800ea46:	75fb      	strb	r3, [r7, #23]
    }

    iter->pSize = &extension->found;
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	f103 020c 	add.w	r2, r3, #12
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	621a      	str	r2, [r3, #32]
    return status;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea54:	4618      	mov	r0, r3
 800ea56:	3718      	adds	r7, #24
 800ea58:	46bd      	mov	sp, r7
 800ea5a:	bd80      	pop	{r7, pc}

0800ea5c <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
 800ea5c:	b580      	push	{r7, lr}
 800ea5e:	b082      	sub	sp, #8
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
    advance_iterator(iter);
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f7ff ff4f 	bl	800e908 <advance_iterator>
    (void)load_descriptor_values(iter);
 800ea6a:	6878      	ldr	r0, [r7, #4]
 800ea6c:	f7ff fde4 	bl	800e638 <load_descriptor_values>
    return iter->index != 0;
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	891b      	ldrh	r3, [r3, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bf14      	ite	ne
 800ea78:	2301      	movne	r3, #1
 800ea7a:	2300      	moveq	r3, #0
 800ea7c:	b2db      	uxtb	r3, r3
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3708      	adds	r7, #8
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}
 800ea86:	bf00      	nop

0800ea88 <pb_const_cast>:
        return false;
    }
}

static void *pb_const_cast(const void *p)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
     * to avoid spurious compiler warnings. */
    union {
        void *p1;
        const void *p2;
    } t;
    t.p2 = p;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	60fb      	str	r3, [r7, #12]
    return t.p1;
 800ea94:	68fb      	ldr	r3, [r7, #12]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
 800eaa2:	bf00      	nop

0800eaa4 <pb_field_iter_begin_const>:

bool pb_field_iter_begin_const(pb_field_iter_t *iter, const pb_msgdesc_t *desc, const void *message)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	60f8      	str	r0, [r7, #12]
 800eaac:	60b9      	str	r1, [r7, #8]
 800eaae:	607a      	str	r2, [r7, #4]
    return pb_field_iter_begin(iter, desc, pb_const_cast(message));
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f7ff ffe9 	bl	800ea88 <pb_const_cast>
 800eab6:	4603      	mov	r3, r0
 800eab8:	68f8      	ldr	r0, [r7, #12]
 800eaba:	68b9      	ldr	r1, [r7, #8]
 800eabc:	461a      	mov	r2, r3
 800eabe:	f7ff ff83 	bl	800e9c8 <pb_field_iter_begin>
 800eac2:	4603      	mov	r3, r0
}
 800eac4:	4618      	mov	r0, r3
 800eac6:	3710      	adds	r7, #16
 800eac8:	46bd      	mov	sp, r7
 800eaca:	bd80      	pop	{r7, pc}

0800eacc <pb_field_iter_begin_extension_const>:

bool pb_field_iter_begin_extension_const(pb_field_iter_t *iter, const pb_extension_t *extension)
{
 800eacc:	b580      	push	{r7, lr}
 800eace:	b082      	sub	sp, #8
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
 800ead4:	6039      	str	r1, [r7, #0]
    return pb_field_iter_begin_extension(iter, (pb_extension_t*)pb_const_cast(extension));
 800ead6:	6838      	ldr	r0, [r7, #0]
 800ead8:	f7ff ffd6 	bl	800ea88 <pb_const_cast>
 800eadc:	4603      	mov	r3, r0
 800eade:	6878      	ldr	r0, [r7, #4]
 800eae0:	4619      	mov	r1, r3
 800eae2:	f7ff ff8b 	bl	800e9fc <pb_field_iter_begin_extension>
 800eae6:	4603      	mov	r3, r0
}
 800eae8:	4618      	mov	r0, r3
 800eaea:	3708      	adds	r7, #8
 800eaec:	46bd      	mov	sp, r7
 800eaee:	bd80      	pop	{r7, pc}

0800eaf0 <pb_default_field_callback>:

bool pb_default_field_callback(pb_istream_t *istream, pb_ostream_t *ostream, const pb_field_t *field)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	60f8      	str	r0, [r7, #12]
 800eaf8:	60b9      	str	r1, [r7, #8]
 800eafa:	607a      	str	r2, [r7, #4]
    if (field->data_size == sizeof(pb_callback_t))
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8a5b      	ldrh	r3, [r3, #18]
 800eb00:	2b08      	cmp	r3, #8
 800eb02:	d125      	bne.n	800eb50 <pb_default_field_callback+0x60>
    {
        pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	69db      	ldr	r3, [r3, #28]
 800eb08:	617b      	str	r3, [r7, #20]

        if (pCallback != NULL)
 800eb0a:	697b      	ldr	r3, [r7, #20]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d01f      	beq.n	800eb50 <pb_default_field_callback+0x60>
        {
            if (istream != NULL && pCallback->funcs.decode != NULL)
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00c      	beq.n	800eb30 <pb_default_field_callback+0x40>
 800eb16:	697b      	ldr	r3, [r7, #20]
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d008      	beq.n	800eb30 <pb_default_field_callback+0x40>
            {
                return pCallback->funcs.decode(istream, field, &pCallback->arg);
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	3204      	adds	r2, #4
 800eb26:	68f8      	ldr	r0, [r7, #12]
 800eb28:	6879      	ldr	r1, [r7, #4]
 800eb2a:	4798      	blx	r3
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	e010      	b.n	800eb52 <pb_default_field_callback+0x62>
            }

            if (ostream != NULL && pCallback->funcs.encode != NULL)
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00c      	beq.n	800eb50 <pb_default_field_callback+0x60>
 800eb36:	697b      	ldr	r3, [r7, #20]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d008      	beq.n	800eb50 <pb_default_field_callback+0x60>
            {
                return pCallback->funcs.encode(ostream, field, &pCallback->arg);
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	697a      	ldr	r2, [r7, #20]
 800eb44:	3204      	adds	r2, #4
 800eb46:	68b8      	ldr	r0, [r7, #8]
 800eb48:	6879      	ldr	r1, [r7, #4]
 800eb4a:	4798      	blx	r3
 800eb4c:	4603      	mov	r3, r0
 800eb4e:	e000      	b.n	800eb52 <pb_default_field_callback+0x62>
            }
        }
    }

    return true; /* Success, but didn't do anything */
 800eb50:	2301      	movs	r3, #1

}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3718      	adds	r7, #24
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}
 800eb5a:	bf00      	nop

0800eb5c <buf_write>:
/*******************************
 * pb_ostream_t implementation *
 *******************************/

static bool checkreturn buf_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800eb5c:	b580      	push	{r7, lr}
 800eb5e:	b086      	sub	sp, #24
 800eb60:	af00      	add	r7, sp, #0
 800eb62:	60f8      	str	r0, [r7, #12]
 800eb64:	60b9      	str	r1, [r7, #8]
 800eb66:	607a      	str	r2, [r7, #4]
    pb_byte_t *dest = (pb_byte_t*)stream->state;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	685b      	ldr	r3, [r3, #4]
 800eb6c:	617b      	str	r3, [r7, #20]
    stream->state = dest + count;
 800eb6e:	697a      	ldr	r2, [r7, #20]
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	441a      	add	r2, r3
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	605a      	str	r2, [r3, #4]
    
    memcpy(dest, buf, count * sizeof(pb_byte_t));
 800eb78:	6978      	ldr	r0, [r7, #20]
 800eb7a:	68b9      	ldr	r1, [r7, #8]
 800eb7c:	687a      	ldr	r2, [r7, #4]
 800eb7e:	f002 fddd 	bl	801173c <memcpy>
    
    return true;
 800eb82:	2301      	movs	r3, #1
}
 800eb84:	4618      	mov	r0, r3
 800eb86:	3718      	adds	r7, #24
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	bd80      	pop	{r7, pc}

0800eb8c <pb_ostream_from_buffer>:

pb_ostream_t pb_ostream_from_buffer(pb_byte_t *buf, size_t bufsize)
{
 800eb8c:	b4b0      	push	{r4, r5, r7}
 800eb8e:	b08b      	sub	sp, #44	; 0x2c
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	607a      	str	r2, [r7, #4]
     * NULL pointer marks a sizing field, so put a non-NULL value to mark a buffer stream.
     */
    static const int marker = 0;
    stream.callback = &marker;
#else
    stream.callback = &buf_write;
 800eb98:	4b0b      	ldr	r3, [pc, #44]	; (800ebc8 <pb_ostream_from_buffer+0x3c>)
 800eb9a:	617b      	str	r3, [r7, #20]
#endif
    stream.state = buf;
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	61bb      	str	r3, [r7, #24]
    stream.max_size = bufsize;
 800eba0:	687b      	ldr	r3, [r7, #4]
 800eba2:	61fb      	str	r3, [r7, #28]
    stream.bytes_written = 0;
 800eba4:	2300      	movs	r3, #0
 800eba6:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    stream.errmsg = NULL;
 800eba8:	2300      	movs	r3, #0
 800ebaa:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    return stream;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	461d      	mov	r5, r3
 800ebb0:	f107 0414 	add.w	r4, r7, #20
 800ebb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ebb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ebb8:	6823      	ldr	r3, [r4, #0]
 800ebba:	602b      	str	r3, [r5, #0]
}
 800ebbc:	68f8      	ldr	r0, [r7, #12]
 800ebbe:	372c      	adds	r7, #44	; 0x2c
 800ebc0:	46bd      	mov	sp, r7
 800ebc2:	bcb0      	pop	{r4, r5, r7}
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	0800eb5d 	.word	0x0800eb5d

0800ebcc <pb_write>:

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	60f8      	str	r0, [r7, #12]
 800ebd4:	60b9      	str	r1, [r7, #8]
 800ebd6:	607a      	str	r2, [r7, #4]
    if (count > 0 && stream->callback != NULL)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d037      	beq.n	800ec4e <pb_write+0x82>
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d033      	beq.n	800ec4e <pb_write+0x82>
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	68da      	ldr	r2, [r3, #12]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	441a      	add	r2, r3
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	68db      	ldr	r3, [r3, #12]
 800ebf2:	429a      	cmp	r2, r3
 800ebf4:	d307      	bcc.n	800ec06 <pb_write+0x3a>
            stream->bytes_written + count > stream->max_size)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	68da      	ldr	r2, [r3, #12]
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	441a      	add	r2, r3
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	689b      	ldr	r3, [r3, #8]

bool checkreturn pb_write(pb_ostream_t *stream, const pb_byte_t *buf, size_t count)
{
    if (count > 0 && stream->callback != NULL)
    {
        if (stream->bytes_written + count < stream->bytes_written ||
 800ec02:	429a      	cmp	r2, r3
 800ec04:	d90b      	bls.n	800ec1e <pb_write+0x52>
            stream->bytes_written + count > stream->max_size)
        {
            PB_RETURN_ERROR(stream, "stream full");
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	691b      	ldr	r3, [r3, #16]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d002      	beq.n	800ec14 <pb_write+0x48>
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	691b      	ldr	r3, [r3, #16]
 800ec12:	e000      	b.n	800ec16 <pb_write+0x4a>
 800ec14:	4b13      	ldr	r3, [pc, #76]	; (800ec64 <pb_write+0x98>)
 800ec16:	68fa      	ldr	r2, [r7, #12]
 800ec18:	6113      	str	r3, [r2, #16]
 800ec1a:	2300      	movs	r3, #0
 800ec1c:	e01e      	b.n	800ec5c <pb_write+0x90>

#ifdef PB_BUFFER_ONLY
        if (!buf_write(stream, buf, count))
            PB_RETURN_ERROR(stream, "io error");
#else        
        if (!stream->callback(stream, buf, count))
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	68b9      	ldr	r1, [r7, #8]
 800ec26:	687a      	ldr	r2, [r7, #4]
 800ec28:	4798      	blx	r3
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	f083 0301 	eor.w	r3, r3, #1
 800ec30:	b2db      	uxtb	r3, r3
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d00b      	beq.n	800ec4e <pb_write+0x82>
            PB_RETURN_ERROR(stream, "io error");
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	691b      	ldr	r3, [r3, #16]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d002      	beq.n	800ec44 <pb_write+0x78>
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	e000      	b.n	800ec46 <pb_write+0x7a>
 800ec44:	4b08      	ldr	r3, [pc, #32]	; (800ec68 <pb_write+0x9c>)
 800ec46:	68fa      	ldr	r2, [r7, #12]
 800ec48:	6113      	str	r3, [r2, #16]
 800ec4a:	2300      	movs	r3, #0
 800ec4c:	e006      	b.n	800ec5c <pb_write+0x90>
#endif
    }
    
    stream->bytes_written += count;
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	68da      	ldr	r2, [r3, #12]
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	441a      	add	r2, r3
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	60da      	str	r2, [r3, #12]
    return true;
 800ec5a:	2301      	movs	r3, #1
}
 800ec5c:	4618      	mov	r0, r3
 800ec5e:	3710      	adds	r7, #16
 800ec60:	46bd      	mov	sp, r7
 800ec62:	bd80      	pop	{r7, pc}
 800ec64:	08014094 	.word	0x08014094
 800ec68:	080140a0 	.word	0x080140a0

0800ec6c <safe_read_bool>:
/* Read a bool value without causing undefined behavior even if the value
 * is invalid. See issue #434 and
 * https://stackoverflow.com/questions/27661768/weird-results-for-conditional
 */
static bool safe_read_bool(const void *pSize)
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b085      	sub	sp, #20
 800ec70:	af00      	add	r7, sp, #0
 800ec72:	6078      	str	r0, [r7, #4]
    const char *p = (const char *)pSize;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	60bb      	str	r3, [r7, #8]
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	e00a      	b.n	800ec94 <safe_read_bool+0x28>
    {
        if (p[i] != 0)
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	4413      	add	r3, r2
 800ec84:	781b      	ldrb	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d001      	beq.n	800ec8e <safe_read_bool+0x22>
            return true;
 800ec8a:	2301      	movs	r3, #1
 800ec8c:	e006      	b.n	800ec9c <safe_read_bool+0x30>
 */
static bool safe_read_bool(const void *pSize)
{
    const char *p = (const char *)pSize;
    size_t i;
    for (i = 0; i < sizeof(bool); i++)
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	3301      	adds	r3, #1
 800ec92:	60fb      	str	r3, [r7, #12]
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d0f1      	beq.n	800ec7e <safe_read_bool+0x12>
    {
        if (p[i] != 0)
            return true;
    }
    return false;
 800ec9a:	2300      	movs	r3, #0
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3714      	adds	r7, #20
 800eca0:	46bd      	mov	sp, r7
 800eca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca6:	4770      	bx	lr

0800eca8 <encode_array>:

/* Encode a static array. Handles the size calculations and possible packing. */
static bool checkreturn encode_array(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b08c      	sub	sp, #48	; 0x30
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
 800ecb0:	6039      	str	r1, [r7, #0]
    pb_size_t count;
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    size_t size;
#endif

    count = *(pb_size_t*)field->pSize;
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	6a1b      	ldr	r3, [r3, #32]
 800ecb6:	881b      	ldrh	r3, [r3, #0]
 800ecb8:	84bb      	strh	r3, [r7, #36]	; 0x24

    if (count == 0)
 800ecba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d101      	bne.n	800ecc4 <encode_array+0x1c>
        return true;
 800ecc0:	2301      	movs	r3, #1
 800ecc2:	e13e      	b.n	800ef42 <encode_array+0x29a>

    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800ecc4:	683b      	ldr	r3, [r7, #0]
 800ecc6:	7d9b      	ldrb	r3, [r3, #22]
 800ecc8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800eccc:	2b80      	cmp	r3, #128	; 0x80
 800ecce:	d010      	beq.n	800ecf2 <encode_array+0x4a>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	8a9b      	ldrh	r3, [r3, #20]
 800ecd4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	d90b      	bls.n	800ecf2 <encode_array+0x4a>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	691b      	ldr	r3, [r3, #16]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d002      	beq.n	800ece8 <encode_array+0x40>
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	691b      	ldr	r3, [r3, #16]
 800ece6:	e000      	b.n	800ecea <encode_array+0x42>
 800ece8:	4b98      	ldr	r3, [pc, #608]	; (800ef4c <encode_array+0x2a4>)
 800ecea:	687a      	ldr	r2, [r7, #4]
 800ecec:	6113      	str	r3, [r2, #16]
 800ecee:	2300      	movs	r3, #0
 800ecf0:	e127      	b.n	800ef42 <encode_array+0x29a>
    
#ifndef PB_ENCODE_ARRAYS_UNPACKED
    /* We always pack arrays if the datatype allows it. */
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 800ecf2:	683b      	ldr	r3, [r7, #0]
 800ecf4:	7d9b      	ldrb	r3, [r3, #22]
 800ecf6:	f003 030f 	and.w	r3, r3, #15
 800ecfa:	2b05      	cmp	r3, #5
 800ecfc:	f200 80b4 	bhi.w	800ee68 <encode_array+0x1c0>
    {
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 800ed00:	683b      	ldr	r3, [r7, #0]
 800ed02:	8a1b      	ldrh	r3, [r3, #16]
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	2102      	movs	r1, #2
 800ed08:	461a      	mov	r2, r3
 800ed0a:	f000 fcdf 	bl	800f6cc <pb_encode_tag>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	f083 0301 	eor.w	r3, r3, #1
 800ed14:	b2db      	uxtb	r3, r3
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d001      	beq.n	800ed1e <encode_array+0x76>
            return false;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	e111      	b.n	800ef42 <encode_array+0x29a>
        
        /* Determine the total size of packed array. */
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	7d9b      	ldrb	r3, [r3, #22]
 800ed22:	f003 030f 	and.w	r3, r3, #15
 800ed26:	2b04      	cmp	r3, #4
 800ed28:	d103      	bne.n	800ed32 <encode_array+0x8a>
        {
            size = 4 * (size_t)count;
 800ed2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed2c:	009b      	lsls	r3, r3, #2
 800ed2e:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed30:	e049      	b.n	800edc6 <encode_array+0x11e>
        }
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800ed32:	683b      	ldr	r3, [r7, #0]
 800ed34:	7d9b      	ldrb	r3, [r3, #22]
 800ed36:	f003 030f 	and.w	r3, r3, #15
 800ed3a:	2b05      	cmp	r3, #5
 800ed3c:	d103      	bne.n	800ed46 <encode_array+0x9e>
        {
            size = 8 * (size_t)count;
 800ed3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ed40:	00db      	lsls	r3, r3, #3
 800ed42:	62bb      	str	r3, [r7, #40]	; 0x28
 800ed44:	e03f      	b.n	800edc6 <encode_array+0x11e>
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 800ed46:	2300      	movs	r3, #0
 800ed48:	60bb      	str	r3, [r7, #8]
 800ed4a:	2300      	movs	r3, #0
 800ed4c:	60fb      	str	r3, [r7, #12]
 800ed4e:	2300      	movs	r3, #0
 800ed50:	613b      	str	r3, [r7, #16]
 800ed52:	2300      	movs	r3, #0
 800ed54:	617b      	str	r3, [r7, #20]
 800ed56:	2300      	movs	r3, #0
 800ed58:	61bb      	str	r3, [r7, #24]
            void *pData_orig = field->pData;
 800ed5a:	683b      	ldr	r3, [r7, #0]
 800ed5c:	69db      	ldr	r3, [r3, #28]
 800ed5e:	623b      	str	r3, [r7, #32]
            for (i = 0; i < count; i++)
 800ed60:	2300      	movs	r3, #0
 800ed62:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ed64:	e026      	b.n	800edb4 <encode_array+0x10c>
            {
                if (!pb_enc_varint(&sizestream, field))
 800ed66:	f107 0308 	add.w	r3, r7, #8
 800ed6a:	4618      	mov	r0, r3
 800ed6c:	6839      	ldr	r1, [r7, #0]
 800ed6e:	f000 fde3 	bl	800f938 <pb_enc_varint>
 800ed72:	4603      	mov	r3, r0
 800ed74:	f083 0301 	eor.w	r3, r3, #1
 800ed78:	b2db      	uxtb	r3, r3
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d010      	beq.n	800eda0 <encode_array+0xf8>
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	691b      	ldr	r3, [r3, #16]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d002      	beq.n	800ed8c <encode_array+0xe4>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	691b      	ldr	r3, [r3, #16]
 800ed8a:	e005      	b.n	800ed98 <encode_array+0xf0>
 800ed8c:	69bb      	ldr	r3, [r7, #24]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <encode_array+0xee>
 800ed92:	69bb      	ldr	r3, [r7, #24]
 800ed94:	e000      	b.n	800ed98 <encode_array+0xf0>
 800ed96:	4b6e      	ldr	r3, [pc, #440]	; (800ef50 <encode_array+0x2a8>)
 800ed98:	687a      	ldr	r2, [r7, #4]
 800ed9a:	6113      	str	r3, [r2, #16]
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	e0d0      	b.n	800ef42 <encode_array+0x29a>
                field->pData = (char*)field->pData + field->data_size;
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	69db      	ldr	r3, [r3, #28]
 800eda4:	683a      	ldr	r2, [r7, #0]
 800eda6:	8a52      	ldrh	r2, [r2, #18]
 800eda8:	441a      	add	r2, r3
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	61da      	str	r2, [r3, #28]
        }
        else
        { 
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
            void *pData_orig = field->pData;
            for (i = 0; i < count; i++)
 800edae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800edb0:	3301      	adds	r3, #1
 800edb2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800edb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800edb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800edb8:	429a      	cmp	r2, r3
 800edba:	d3d4      	bcc.n	800ed66 <encode_array+0xbe>
            {
                if (!pb_enc_varint(&sizestream, field))
                    PB_RETURN_ERROR(stream, PB_GET_ERROR(&sizestream));
                field->pData = (char*)field->pData + field->data_size;
            }
            field->pData = pData_orig;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	6a3a      	ldr	r2, [r7, #32]
 800edc0:	61da      	str	r2, [r3, #28]
            size = sizestream.bytes_written;
 800edc2:	697b      	ldr	r3, [r7, #20]
 800edc4:	62bb      	str	r3, [r7, #40]	; 0x28
        }
        
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	461a      	mov	r2, r3
 800edca:	f04f 0300 	mov.w	r3, #0
 800edce:	6878      	ldr	r0, [r7, #4]
 800edd0:	f000 fc00 	bl	800f5d4 <pb_encode_varint>
 800edd4:	4603      	mov	r3, r0
 800edd6:	f083 0301 	eor.w	r3, r3, #1
 800edda:	b2db      	uxtb	r3, r3
 800eddc:	2b00      	cmp	r3, #0
 800edde:	d001      	beq.n	800ede4 <encode_array+0x13c>
            return false;
 800ede0:	2300      	movs	r3, #0
 800ede2:	e0ae      	b.n	800ef42 <encode_array+0x29a>
        
        if (stream->callback == NULL)
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	681b      	ldr	r3, [r3, #0]
 800ede8:	2b00      	cmp	r3, #0
 800edea:	d106      	bne.n	800edfa <encode_array+0x152>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	2100      	movs	r1, #0
 800edf0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800edf2:	f7ff feeb 	bl	800ebcc <pb_write>
 800edf6:	4603      	mov	r3, r0
 800edf8:	e0a3      	b.n	800ef42 <encode_array+0x29a>
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800edfa:	2300      	movs	r3, #0
 800edfc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800edfe:	e02e      	b.n	800ee5e <encode_array+0x1b6>
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 800ee00:	683b      	ldr	r3, [r7, #0]
 800ee02:	7d9b      	ldrb	r3, [r3, #22]
 800ee04:	f003 030f 	and.w	r3, r3, #15
 800ee08:	2b04      	cmp	r3, #4
 800ee0a:	d005      	beq.n	800ee18 <encode_array+0x170>
 800ee0c:	683b      	ldr	r3, [r7, #0]
 800ee0e:	7d9b      	ldrb	r3, [r3, #22]
 800ee10:	f003 030f 	and.w	r3, r3, #15
 800ee14:	2b05      	cmp	r3, #5
 800ee16:	d10c      	bne.n	800ee32 <encode_array+0x18a>
            {
                if (!pb_enc_fixed(stream, field))
 800ee18:	6878      	ldr	r0, [r7, #4]
 800ee1a:	6839      	ldr	r1, [r7, #0]
 800ee1c:	f000 fe40 	bl	800faa0 <pb_enc_fixed>
 800ee20:	4603      	mov	r3, r0
 800ee22:	f083 0301 	eor.w	r3, r3, #1
 800ee26:	b2db      	uxtb	r3, r3
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d001      	beq.n	800ee30 <encode_array+0x188>
                    return false;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	e088      	b.n	800ef42 <encode_array+0x29a>
        /* Write the data */
        for (i = 0; i < count; i++)
        {
            if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32 || PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
            {
                if (!pb_enc_fixed(stream, field))
 800ee30:	e00b      	b.n	800ee4a <encode_array+0x1a2>
                    return false;
            }
            else
            {
                if (!pb_enc_varint(stream, field))
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	6839      	ldr	r1, [r7, #0]
 800ee36:	f000 fd7f 	bl	800f938 <pb_enc_varint>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	f083 0301 	eor.w	r3, r3, #1
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <encode_array+0x1a2>
                    return false;
 800ee46:	2300      	movs	r3, #0
 800ee48:	e07b      	b.n	800ef42 <encode_array+0x29a>
            }

            field->pData = (char*)field->pData + field->data_size;
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	69db      	ldr	r3, [r3, #28]
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	8a52      	ldrh	r2, [r2, #18]
 800ee52:	441a      	add	r2, r3
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	61da      	str	r2, [r3, #28]
        
        if (stream->callback == NULL)
            return pb_write(stream, NULL, size); /* Just sizing.. */
        
        /* Write the data */
        for (i = 0; i < count; i++)
 800ee58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ee5e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ee62:	429a      	cmp	r2, r3
 800ee64:	d3cc      	bcc.n	800ee00 <encode_array+0x158>
 800ee66:	e06b      	b.n	800ef40 <encode_array+0x298>
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800ee68:	2300      	movs	r3, #0
 800ee6a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ee6c:	e064      	b.n	800ef38 <encode_array+0x290>
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ee6e:	683b      	ldr	r3, [r7, #0]
 800ee70:	7d9b      	ldrb	r3, [r3, #22]
 800ee72:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ee76:	2b80      	cmp	r3, #128	; 0x80
 800ee78:	d148      	bne.n	800ef0c <encode_array+0x264>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	7d9b      	ldrb	r3, [r3, #22]
 800ee7e:	f003 030f 	and.w	r3, r3, #15
        {
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800ee82:	2b07      	cmp	r3, #7
 800ee84:	d005      	beq.n	800ee92 <encode_array+0x1ea>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	7d9b      	ldrb	r3, [r3, #22]
 800ee8a:	f003 030f 	and.w	r3, r3, #15
            /* Normally the data is stored directly in the array entries, but
             * for pointer-type string and bytes fields, the array entries are
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 800ee8e:	2b06      	cmp	r3, #6
 800ee90:	d13c      	bne.n	800ef0c <encode_array+0x264>
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
                bool status;
                void *pData_orig = field->pData;
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	69db      	ldr	r3, [r3, #28]
 800ee96:	61fb      	str	r3, [r7, #28]
                field->pData = *(void* const*)field->pData;
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	69db      	ldr	r3, [r3, #28]
 800ee9c:	681a      	ldr	r2, [r3, #0]
 800ee9e:	683b      	ldr	r3, [r7, #0]
 800eea0:	61da      	str	r2, [r3, #28]

                if (!field->pData)
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	69db      	ldr	r3, [r3, #28]
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d11c      	bne.n	800eee4 <encode_array+0x23c>
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800eeaa:	6878      	ldr	r0, [r7, #4]
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	f000 fc2f 	bl	800f710 <pb_encode_tag_for_field>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d00b      	beq.n	800eed0 <encode_array+0x228>
                             pb_encode_varint(stream, 0);
 800eeb8:	6878      	ldr	r0, [r7, #4]
 800eeba:	f04f 0200 	mov.w	r2, #0
 800eebe:	f04f 0300 	mov.w	r3, #0
 800eec2:	f000 fb87 	bl	800f5d4 <pb_encode_varint>
 800eec6:	4603      	mov	r3, r0
                field->pData = *(void* const*)field->pData;

                if (!field->pData)
                {
                    /* Null pointer in array is treated as empty string / bytes */
                    status = pb_encode_tag_for_field(stream, field) &&
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d001      	beq.n	800eed0 <encode_array+0x228>
 800eecc:	2301      	movs	r3, #1
 800eece:	e000      	b.n	800eed2 <encode_array+0x22a>
 800eed0:	2300      	movs	r3, #0
 800eed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eeda:	f003 0301 	and.w	r3, r3, #1
 800eede:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800eee2:	e006      	b.n	800eef2 <encode_array+0x24a>
                             pb_encode_varint(stream, 0);
                }
                else
                {
                    status = encode_basic_field(stream, field);
 800eee4:	6878      	ldr	r0, [r7, #4]
 800eee6:	6839      	ldr	r1, [r7, #0]
 800eee8:	f000 f954 	bl	800f194 <encode_basic_field>
 800eeec:	4603      	mov	r3, r0
 800eeee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }

                field->pData = pData_orig;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	69fa      	ldr	r2, [r7, #28]
 800eef6:	61da      	str	r2, [r3, #28]

                if (!status)
 800eef8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800eefc:	f083 0301 	eor.w	r3, r3, #1
 800ef00:	b2db      	uxtb	r3, r3
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <encode_array+0x262>
                    return false;
 800ef06:	2300      	movs	r3, #0
 800ef08:	e01b      	b.n	800ef42 <encode_array+0x29a>
             * actually pointers themselves also. So we have to dereference once
             * more to get to the actual data. */
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
                 PB_LTYPE(field->type) == PB_LTYPE_BYTES))
            {
 800ef0a:	e00b      	b.n	800ef24 <encode_array+0x27c>
                if (!status)
                    return false;
            }
            else
            {
                if (!encode_basic_field(stream, field))
 800ef0c:	6878      	ldr	r0, [r7, #4]
 800ef0e:	6839      	ldr	r1, [r7, #0]
 800ef10:	f000 f940 	bl	800f194 <encode_basic_field>
 800ef14:	4603      	mov	r3, r0
 800ef16:	f083 0301 	eor.w	r3, r3, #1
 800ef1a:	b2db      	uxtb	r3, r3
 800ef1c:	2b00      	cmp	r3, #0
 800ef1e:	d001      	beq.n	800ef24 <encode_array+0x27c>
                    return false;
 800ef20:	2300      	movs	r3, #0
 800ef22:	e00e      	b.n	800ef42 <encode_array+0x29a>
            }
            field->pData = (char*)field->pData + field->data_size;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	69db      	ldr	r3, [r3, #28]
 800ef28:	683a      	ldr	r2, [r7, #0]
 800ef2a:	8a52      	ldrh	r2, [r2, #18]
 800ef2c:	441a      	add	r2, r3
 800ef2e:	683b      	ldr	r3, [r7, #0]
 800ef30:	61da      	str	r2, [r3, #28]
        }
    }
    else /* Unpacked fields */
#endif
    {
        for (i = 0; i < count; i++)
 800ef32:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ef34:	3301      	adds	r3, #1
 800ef36:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ef38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ef3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ef3c:	429a      	cmp	r2, r3
 800ef3e:	d396      	bcc.n	800ee6e <encode_array+0x1c6>
            }
            field->pData = (char*)field->pData + field->data_size;
        }
    }
    
    return true;
 800ef40:	2301      	movs	r3, #1
}
 800ef42:	4618      	mov	r0, r3
 800ef44:	3730      	adds	r7, #48	; 0x30
 800ef46:	46bd      	mov	sp, r7
 800ef48:	bd80      	pop	{r7, pc}
 800ef4a:	bf00      	nop
 800ef4c:	080140ac 	.word	0x080140ac
 800ef50:	080140c4 	.word	0x080140c4

0800ef54 <pb_check_proto3_default_value>:

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool checkreturn pb_check_proto3_default_value(const pb_field_iter_t *field)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b092      	sub	sp, #72	; 0x48
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
    pb_type_t type = field->type;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	7d9b      	ldrb	r3, [r3, #22]
 800ef60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 800ef64:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef68:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f040 80cb 	bne.w	800f108 <pb_check_proto3_default_value+0x1b4>
    {
        if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 800ef72:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d101      	bne.n	800ef82 <pb_check_proto3_default_value+0x2e>
        {
            /* Required proto2 fields inside proto3 submessage, pretty rare case */
            return false;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	e102      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800ef82:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800ef86:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ef8a:	2b20      	cmp	r3, #32
 800ef8c:	d108      	bne.n	800efa0 <pb_check_proto3_default_value+0x4c>
        {
            /* Repeated fields inside proto3 submessage: present if count != 0 */
            return *(const pb_size_t*)field->pSize == 0;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	6a1b      	ldr	r3, [r3, #32]
 800ef92:	881b      	ldrh	r3, [r3, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	bf0c      	ite	eq
 800ef98:	2301      	moveq	r3, #1
 800ef9a:	2300      	movne	r3, #0
 800ef9c:	b2db      	uxtb	r3, r3
 800ef9e:	e0f3      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800efa0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800efa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efa8:	2b30      	cmp	r3, #48	; 0x30
 800efaa:	d108      	bne.n	800efbe <pb_check_proto3_default_value+0x6a>
        {
            /* Oneof fields */
            return *(const pb_size_t*)field->pSize == 0;
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6a1b      	ldr	r3, [r3, #32]
 800efb0:	881b      	ldrh	r3, [r3, #0]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	bf0c      	ite	eq
 800efb6:	2301      	moveq	r3, #1
 800efb8:	2300      	movne	r3, #0
 800efba:	b2db      	uxtb	r3, r3
 800efbc:	e0e4      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->pSize != NULL)
 800efbe:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800efc2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800efc6:	2b10      	cmp	r3, #16
 800efc8:	d115      	bne.n	800eff6 <pb_check_proto3_default_value+0xa2>
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6a1b      	ldr	r3, [r3, #32]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d011      	beq.n	800eff6 <pb_check_proto3_default_value+0xa2>
        {
            /* Proto2 optional fields inside proto3 message, or proto3
             * submessage fields. */
            return safe_read_bool(field->pSize) == false;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6a1b      	ldr	r3, [r3, #32]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff fe48 	bl	800ec6c <safe_read_bool>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	bf14      	ite	ne
 800efe2:	2301      	movne	r3, #1
 800efe4:	2300      	moveq	r3, #0
 800efe6:	b2db      	uxtb	r3, r3
 800efe8:	f083 0301 	eor.w	r3, r3, #1
 800efec:	b2db      	uxtb	r3, r3
 800efee:	f003 0301 	and.w	r3, r3, #1
 800eff2:	b2db      	uxtb	r3, r3
 800eff4:	e0c8      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->default_value)
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	689b      	ldr	r3, [r3, #8]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d001      	beq.n	800f004 <pb_check_proto3_default_value+0xb0>
            /* Proto3 messages do not have default values, but proto2 messages
             * can contain optional fields without has_fields (generator option 'proto3').
             * In this case they must always be encoded, to make sure that the
             * non-zero default value is overwritten.
             */
            return false;
 800f000:	2300      	movs	r3, #0
 800f002:	e0c1      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }

        /* Rest is proto3 singular fields */
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 800f004:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f008:	f003 030f 	and.w	r3, r3, #15
 800f00c:	2b05      	cmp	r3, #5
 800f00e:	d81c      	bhi.n	800f04a <pb_check_proto3_default_value+0xf6>
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	69db      	ldr	r3, [r3, #28]
 800f014:	643b      	str	r3, [r7, #64]	; 0x40
            for (i = 0; i < field->data_size; i++)
 800f016:	2300      	movs	r3, #0
 800f018:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f01c:	e00d      	b.n	800f03a <pb_check_proto3_default_value+0xe6>
            {
                if (p[i] != 0)
 800f01e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f022:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f024:	4413      	add	r3, r2
 800f026:	781b      	ldrb	r3, [r3, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d001      	beq.n	800f030 <pb_check_proto3_default_value+0xdc>
                {
                    return false;
 800f02c:	2300      	movs	r3, #0
 800f02e:	e0ab      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        if (PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
        {
            /* Simple integer / float fields */
            pb_size_t i;
            const char *p = (const char*)field->pData;
            for (i = 0; i < field->data_size; i++)
 800f030:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800f034:	3301      	adds	r3, #1
 800f036:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	8a5b      	ldrh	r3, [r3, #18]
 800f03e:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 800f042:	429a      	cmp	r2, r3
 800f044:	d3eb      	bcc.n	800f01e <pb_check_proto3_default_value+0xca>
                {
                    return false;
                }
            }

            return true;
 800f046:	2301      	movs	r3, #1
 800f048:	e09e      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 800f04a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f04e:	f003 030f 	and.w	r3, r3, #15
 800f052:	2b06      	cmp	r3, #6
 800f054:	d10a      	bne.n	800f06c <pb_check_proto3_default_value+0x118>
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)field->pData;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	69db      	ldr	r3, [r3, #28]
 800f05a:	63fb      	str	r3, [r7, #60]	; 0x3c
            return bytes->size == 0;
 800f05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f05e:	881b      	ldrh	r3, [r3, #0]
 800f060:	2b00      	cmp	r3, #0
 800f062:	bf0c      	ite	eq
 800f064:	2301      	moveq	r3, #1
 800f066:	2300      	movne	r3, #0
 800f068:	b2db      	uxtb	r3, r3
 800f06a:	e08d      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 800f06c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f070:	f003 030f 	and.w	r3, r3, #15
 800f074:	2b07      	cmp	r3, #7
 800f076:	d108      	bne.n	800f08a <pb_check_proto3_default_value+0x136>
        {
            return *(const char*)field->pData == '\0';
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	69db      	ldr	r3, [r3, #28]
 800f07c:	781b      	ldrb	r3, [r3, #0]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	bf0c      	ite	eq
 800f082:	2301      	moveq	r3, #1
 800f084:	2300      	movne	r3, #0
 800f086:	b2db      	uxtb	r3, r3
 800f088:	e07e      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800f08a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f08e:	f003 030f 	and.w	r3, r3, #15
 800f092:	2b0b      	cmp	r3, #11
 800f094:	d107      	bne.n	800f0a6 <pb_check_proto3_default_value+0x152>
        {
            /* Fixed length bytes is only empty if its length is fixed
             * as 0. Which would be pretty strange, but we can check
             * it anyway. */
            return field->data_size == 0;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	8a5b      	ldrh	r3, [r3, #18]
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	bf0c      	ite	eq
 800f09e:	2301      	moveq	r3, #1
 800f0a0:	2300      	movne	r3, #0
 800f0a2:	b2db      	uxtb	r3, r3
 800f0a4:	e070      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (PB_LTYPE_IS_SUBMSG(type))
 800f0a6:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f0aa:	f003 030f 	and.w	r3, r3, #15
 800f0ae:	2b08      	cmp	r3, #8
 800f0b0:	d005      	beq.n	800f0be <pb_check_proto3_default_value+0x16a>
 800f0b2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f0b6:	f003 030f 	and.w	r3, r3, #15
 800f0ba:	2b09      	cmp	r3, #9
 800f0bc:	d163      	bne.n	800f186 <pb_check_proto3_default_value+0x232>
             * because the C struct may contain padding bytes that must
             * be skipped. Note that usually proto3 submessages have
             * a separate has_field that is checked earlier in this if.
             */
            pb_field_iter_t iter;
            if (pb_field_iter_begin(&iter, field->submsg_desc, field->pData))
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	69db      	ldr	r3, [r3, #28]
 800f0c6:	f107 010c 	add.w	r1, r7, #12
 800f0ca:	4608      	mov	r0, r1
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	461a      	mov	r2, r3
 800f0d0:	f7ff fc7a 	bl	800e9c8 <pb_field_iter_begin>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d014      	beq.n	800f104 <pb_check_proto3_default_value+0x1b0>
            {
                do
                {
                    if (!pb_check_proto3_default_value(&iter))
 800f0da:	f107 030c 	add.w	r3, r7, #12
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7ff ff38 	bl	800ef54 <pb_check_proto3_default_value>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	f083 0301 	eor.w	r3, r3, #1
 800f0ea:	b2db      	uxtb	r3, r3
 800f0ec:	2b00      	cmp	r3, #0
 800f0ee:	d001      	beq.n	800f0f4 <pb_check_proto3_default_value+0x1a0>
                    {
                        return false;
 800f0f0:	2300      	movs	r3, #0
 800f0f2:	e049      	b.n	800f188 <pb_check_proto3_default_value+0x234>
                    }
                } while (pb_field_iter_next(&iter));
 800f0f4:	f107 030c 	add.w	r3, r7, #12
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff fcaf 	bl	800ea5c <pb_field_iter_next>
 800f0fe:	4603      	mov	r3, r0
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1ea      	bne.n	800f0da <pb_check_proto3_default_value+0x186>
            }
            return true;
 800f104:	2301      	movs	r3, #1
 800f106:	e03f      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
    }
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 800f108:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f10c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f110:	2b80      	cmp	r3, #128	; 0x80
 800f112:	d107      	bne.n	800f124 <pb_check_proto3_default_value+0x1d0>
    {
        return field->pData == NULL;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	69db      	ldr	r3, [r3, #28]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	bf0c      	ite	eq
 800f11c:	2301      	moveq	r3, #1
 800f11e:	2300      	movne	r3, #0
 800f120:	b2db      	uxtb	r3, r3
 800f122:	e031      	b.n	800f188 <pb_check_proto3_default_value+0x234>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
 800f124:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f128:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f12c:	2b40      	cmp	r3, #64	; 0x40
 800f12e:	d12a      	bne.n	800f186 <pb_check_proto3_default_value+0x232>
    {
        if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 800f130:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800f134:	f003 030f 	and.w	r3, r3, #15
 800f138:	2b0a      	cmp	r3, #10
 800f13a:	d10a      	bne.n	800f152 <pb_check_proto3_default_value+0x1fe>
        {
            const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	69db      	ldr	r3, [r3, #28]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	63bb      	str	r3, [r7, #56]	; 0x38
            return extension == NULL;
 800f144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f146:	2b00      	cmp	r3, #0
 800f148:	bf0c      	ite	eq
 800f14a:	2301      	moveq	r3, #1
 800f14c:	2300      	movne	r3, #0
 800f14e:	b2db      	uxtb	r3, r3
 800f150:	e01a      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else if (field->descriptor->field_callback == pb_default_field_callback)
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	68db      	ldr	r3, [r3, #12]
 800f158:	4a0d      	ldr	r2, [pc, #52]	; (800f190 <pb_check_proto3_default_value+0x23c>)
 800f15a:	4293      	cmp	r3, r2
 800f15c:	d10a      	bne.n	800f174 <pb_check_proto3_default_value+0x220>
        {
            pb_callback_t *pCallback = (pb_callback_t*)field->pData;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	69db      	ldr	r3, [r3, #28]
 800f162:	637b      	str	r3, [r7, #52]	; 0x34
            return pCallback->funcs.encode == NULL;
 800f164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f166:	681b      	ldr	r3, [r3, #0]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	bf0c      	ite	eq
 800f16c:	2301      	moveq	r3, #1
 800f16e:	2300      	movne	r3, #0
 800f170:	b2db      	uxtb	r3, r3
 800f172:	e009      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
        else
        {
            return field->descriptor->field_callback == NULL;
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	bf0c      	ite	eq
 800f17e:	2301      	moveq	r3, #1
 800f180:	2300      	movne	r3, #0
 800f182:	b2db      	uxtb	r3, r3
 800f184:	e000      	b.n	800f188 <pb_check_proto3_default_value+0x234>
        }
    }

    return false; /* Not typically reached, safe default for weird special cases. */
 800f186:	2300      	movs	r3, #0
}
 800f188:	4618      	mov	r0, r3
 800f18a:	3748      	adds	r7, #72	; 0x48
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}
 800f190:	0800eaf1 	.word	0x0800eaf1

0800f194 <encode_basic_field>:

/* Encode a field with static or pointer allocation, i.e. one whose data
 * is available to the encoder directly. */
static bool checkreturn encode_basic_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b082      	sub	sp, #8
 800f198:	af00      	add	r7, sp, #0
 800f19a:	6078      	str	r0, [r7, #4]
 800f19c:	6039      	str	r1, [r7, #0]
    if (!field->pData)
 800f19e:	683b      	ldr	r3, [r7, #0]
 800f1a0:	69db      	ldr	r3, [r3, #28]
 800f1a2:	2b00      	cmp	r3, #0
 800f1a4:	d101      	bne.n	800f1aa <encode_basic_field+0x16>
    {
        /* Missing pointer field */
        return true;
 800f1a6:	2301      	movs	r3, #1
 800f1a8:	e061      	b.n	800f26e <encode_basic_field+0xda>
    }

    if (!pb_encode_tag_for_field(stream, field))
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	6839      	ldr	r1, [r7, #0]
 800f1ae:	f000 faaf 	bl	800f710 <pb_encode_tag_for_field>
 800f1b2:	4603      	mov	r3, r0
 800f1b4:	f083 0301 	eor.w	r3, r3, #1
 800f1b8:	b2db      	uxtb	r3, r3
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d001      	beq.n	800f1c2 <encode_basic_field+0x2e>
        return false;
 800f1be:	2300      	movs	r3, #0
 800f1c0:	e055      	b.n	800f26e <encode_basic_field+0xda>

    switch (PB_LTYPE(field->type))
 800f1c2:	683b      	ldr	r3, [r7, #0]
 800f1c4:	7d9b      	ldrb	r3, [r3, #22]
 800f1c6:	f003 030f 	and.w	r3, r3, #15
 800f1ca:	2b0b      	cmp	r3, #11
 800f1cc:	d844      	bhi.n	800f258 <encode_basic_field+0xc4>
 800f1ce:	a201      	add	r2, pc, #4	; (adr r2, 800f1d4 <encode_basic_field+0x40>)
 800f1d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1d4:	0800f205 	.word	0x0800f205
 800f1d8:	0800f211 	.word	0x0800f211
 800f1dc:	0800f211 	.word	0x0800f211
 800f1e0:	0800f211 	.word	0x0800f211
 800f1e4:	0800f21d 	.word	0x0800f21d
 800f1e8:	0800f21d 	.word	0x0800f21d
 800f1ec:	0800f229 	.word	0x0800f229
 800f1f0:	0800f235 	.word	0x0800f235
 800f1f4:	0800f241 	.word	0x0800f241
 800f1f8:	0800f241 	.word	0x0800f241
 800f1fc:	0800f259 	.word	0x0800f259
 800f200:	0800f24d 	.word	0x0800f24d
    {
        case PB_LTYPE_BOOL:
            return pb_enc_bool(stream, field);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	6839      	ldr	r1, [r7, #0]
 800f208:	f000 fb7e 	bl	800f908 <pb_enc_bool>
 800f20c:	4603      	mov	r3, r0
 800f20e:	e02e      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            return pb_enc_varint(stream, field);
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	6839      	ldr	r1, [r7, #0]
 800f214:	f000 fb90 	bl	800f938 <pb_enc_varint>
 800f218:	4603      	mov	r3, r0
 800f21a:	e028      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED32:
        case PB_LTYPE_FIXED64:
            return pb_enc_fixed(stream, field);
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	6839      	ldr	r1, [r7, #0]
 800f220:	f000 fc3e 	bl	800faa0 <pb_enc_fixed>
 800f224:	4603      	mov	r3, r0
 800f226:	e022      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_BYTES:
            return pb_enc_bytes(stream, field);
 800f228:	6878      	ldr	r0, [r7, #4]
 800f22a:	6839      	ldr	r1, [r7, #0]
 800f22c:	f000 fc66 	bl	800fafc <pb_enc_bytes>
 800f230:	4603      	mov	r3, r0
 800f232:	e01c      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_STRING:
            return pb_enc_string(stream, field);
 800f234:	6878      	ldr	r0, [r7, #4]
 800f236:	6839      	ldr	r1, [r7, #0]
 800f238:	f000 fc9e 	bl	800fb78 <pb_enc_string>
 800f23c:	4603      	mov	r3, r0
 800f23e:	e016      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
            return pb_enc_submessage(stream, field);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	6839      	ldr	r1, [r7, #0]
 800f244:	f000 fcf6 	bl	800fc34 <pb_enc_submessage>
 800f248:	4603      	mov	r3, r0
 800f24a:	e010      	b.n	800f26e <encode_basic_field+0xda>

        case PB_LTYPE_FIXED_LENGTH_BYTES:
            return pb_enc_fixed_length_bytes(stream, field);
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	f000 fd36 	bl	800fcc0 <pb_enc_fixed_length_bytes>
 800f254:	4603      	mov	r3, r0
 800f256:	e00a      	b.n	800f26e <encode_basic_field+0xda>

        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	691b      	ldr	r3, [r3, #16]
 800f25c:	2b00      	cmp	r3, #0
 800f25e:	d002      	beq.n	800f266 <encode_basic_field+0xd2>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	691b      	ldr	r3, [r3, #16]
 800f264:	e000      	b.n	800f268 <encode_basic_field+0xd4>
 800f266:	4b04      	ldr	r3, [pc, #16]	; (800f278 <encode_basic_field+0xe4>)
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	6113      	str	r3, [r2, #16]
 800f26c:	2300      	movs	r3, #0
    }
}
 800f26e:	4618      	mov	r0, r3
 800f270:	3708      	adds	r7, #8
 800f272:	46bd      	mov	sp, r7
 800f274:	bd80      	pop	{r7, pc}
 800f276:	bf00      	nop
 800f278:	080140cc 	.word	0x080140cc

0800f27c <encode_callback_field>:

/* Encode a field with callback semantics. This means that a user function is
 * called to provide and encode the actual data. */
static bool checkreturn encode_callback_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
    if (field->descriptor->field_callback != NULL)
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	68db      	ldr	r3, [r3, #12]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d018      	beq.n	800f2c2 <encode_callback_field+0x46>
    {
        if (!field->descriptor->field_callback(NULL, stream, field))
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	2000      	movs	r0, #0
 800f298:	6879      	ldr	r1, [r7, #4]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	4798      	blx	r3
 800f29e:	4603      	mov	r3, r0
 800f2a0:	f083 0301 	eor.w	r3, r3, #1
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d00b      	beq.n	800f2c2 <encode_callback_field+0x46>
            PB_RETURN_ERROR(stream, "callback error");
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d002      	beq.n	800f2b8 <encode_callback_field+0x3c>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	691b      	ldr	r3, [r3, #16]
 800f2b6:	e000      	b.n	800f2ba <encode_callback_field+0x3e>
 800f2b8:	4b04      	ldr	r3, [pc, #16]	; (800f2cc <encode_callback_field+0x50>)
 800f2ba:	687a      	ldr	r2, [r7, #4]
 800f2bc:	6113      	str	r3, [r2, #16]
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e000      	b.n	800f2c4 <encode_callback_field+0x48>
    }
    return true;
 800f2c2:	2301      	movs	r3, #1
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3708      	adds	r7, #8
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	bd80      	pop	{r7, pc}
 800f2cc:	080140e0 	.word	0x080140e0

0800f2d0 <encode_field>:

/* Encode a single field of any callback, pointer or static type. */
static bool checkreturn encode_field(pb_ostream_t *stream, pb_field_iter_t *field)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b082      	sub	sp, #8
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	6039      	str	r1, [r7, #0]
    /* Check field presence */
    if (PB_HTYPE(field->type) == PB_HTYPE_ONEOF)
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	7d9b      	ldrb	r3, [r3, #22]
 800f2de:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f2e2:	2b30      	cmp	r3, #48	; 0x30
 800f2e4:	d108      	bne.n	800f2f8 <encode_field+0x28>
    {
        if (*(const pb_size_t*)field->pSize != field->tag)
 800f2e6:	683b      	ldr	r3, [r7, #0]
 800f2e8:	6a1b      	ldr	r3, [r3, #32]
 800f2ea:	881a      	ldrh	r2, [r3, #0]
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	8a1b      	ldrh	r3, [r3, #16]
 800f2f0:	429a      	cmp	r2, r3
 800f2f2:	d026      	beq.n	800f342 <encode_field+0x72>
        {
            /* Different type oneof field */
            return true;
 800f2f4:	2301      	movs	r3, #1
 800f2f6:	e059      	b.n	800f3ac <encode_field+0xdc>
        }
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800f2f8:	683b      	ldr	r3, [r7, #0]
 800f2fa:	7d9b      	ldrb	r3, [r3, #22]
 800f2fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f300:	2b10      	cmp	r3, #16
 800f302:	d11e      	bne.n	800f342 <encode_field+0x72>
    {
        if (field->pSize)
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	6a1b      	ldr	r3, [r3, #32]
 800f308:	2b00      	cmp	r3, #0
 800f30a:	d00c      	beq.n	800f326 <encode_field+0x56>
        {
            if (safe_read_bool(field->pSize) == false)
 800f30c:	683b      	ldr	r3, [r7, #0]
 800f30e:	6a1b      	ldr	r3, [r3, #32]
 800f310:	4618      	mov	r0, r3
 800f312:	f7ff fcab 	bl	800ec6c <safe_read_bool>
 800f316:	4603      	mov	r3, r0
 800f318:	f083 0301 	eor.w	r3, r3, #1
 800f31c:	b2db      	uxtb	r3, r3
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d00f      	beq.n	800f342 <encode_field+0x72>
            {
                /* Missing optional field */
                return true;
 800f322:	2301      	movs	r3, #1
 800f324:	e042      	b.n	800f3ac <encode_field+0xdc>
            }
        }
        else if (PB_ATYPE(field->type) == PB_ATYPE_STATIC)
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	7d9b      	ldrb	r3, [r3, #22]
 800f32a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f32e:	2b00      	cmp	r3, #0
 800f330:	d107      	bne.n	800f342 <encode_field+0x72>
        {
            /* Proto3 singular field */
            if (pb_check_proto3_default_value(field))
 800f332:	6838      	ldr	r0, [r7, #0]
 800f334:	f7ff fe0e 	bl	800ef54 <pb_check_proto3_default_value>
 800f338:	4603      	mov	r3, r0
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d001      	beq.n	800f342 <encode_field+0x72>
                return true;
 800f33e:	2301      	movs	r3, #1
 800f340:	e034      	b.n	800f3ac <encode_field+0xdc>
        }
    }

    if (!field->pData)
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	69db      	ldr	r3, [r3, #28]
 800f346:	2b00      	cmp	r3, #0
 800f348:	d113      	bne.n	800f372 <encode_field+0xa2>
    {
        if (PB_HTYPE(field->type) == PB_HTYPE_REQUIRED)
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	7d9b      	ldrb	r3, [r3, #22]
 800f34e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f352:	2b00      	cmp	r3, #0
 800f354:	d10b      	bne.n	800f36e <encode_field+0x9e>
            PB_RETURN_ERROR(stream, "missing required field");
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	691b      	ldr	r3, [r3, #16]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d002      	beq.n	800f364 <encode_field+0x94>
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	691b      	ldr	r3, [r3, #16]
 800f362:	e000      	b.n	800f366 <encode_field+0x96>
 800f364:	4b13      	ldr	r3, [pc, #76]	; (800f3b4 <encode_field+0xe4>)
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	6113      	str	r3, [r2, #16]
 800f36a:	2300      	movs	r3, #0
 800f36c:	e01e      	b.n	800f3ac <encode_field+0xdc>

        /* Pointer field set to NULL */
        return true;
 800f36e:	2301      	movs	r3, #1
 800f370:	e01c      	b.n	800f3ac <encode_field+0xdc>
    }

    /* Then encode field contents */
    if (PB_ATYPE(field->type) == PB_ATYPE_CALLBACK)
 800f372:	683b      	ldr	r3, [r7, #0]
 800f374:	7d9b      	ldrb	r3, [r3, #22]
 800f376:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800f37a:	2b40      	cmp	r3, #64	; 0x40
 800f37c:	d105      	bne.n	800f38a <encode_field+0xba>
    {
        return encode_callback_field(stream, field);
 800f37e:	6878      	ldr	r0, [r7, #4]
 800f380:	6839      	ldr	r1, [r7, #0]
 800f382:	f7ff ff7b 	bl	800f27c <encode_callback_field>
 800f386:	4603      	mov	r3, r0
 800f388:	e010      	b.n	800f3ac <encode_field+0xdc>
    }
    else if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 800f38a:	683b      	ldr	r3, [r7, #0]
 800f38c:	7d9b      	ldrb	r3, [r3, #22]
 800f38e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800f392:	2b20      	cmp	r3, #32
 800f394:	d105      	bne.n	800f3a2 <encode_field+0xd2>
    {
        return encode_array(stream, field);
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	6839      	ldr	r1, [r7, #0]
 800f39a:	f7ff fc85 	bl	800eca8 <encode_array>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	e004      	b.n	800f3ac <encode_field+0xdc>
    }
    else
    {
        return encode_basic_field(stream, field);
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	6839      	ldr	r1, [r7, #0]
 800f3a6:	f7ff fef5 	bl	800f194 <encode_basic_field>
 800f3aa:	4603      	mov	r3, r0
    }
}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}
 800f3b4:	080140f0 	.word	0x080140f0

0800f3b8 <default_extension_encoder>:

/* Default handler for extension fields. Expects to have a pb_msgdesc_t
 * pointer in the extension->type->arg field, pointing to a message with
 * only one field in it.  */
static bool checkreturn default_extension_encoder(pb_ostream_t *stream, const pb_extension_t *extension)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b08c      	sub	sp, #48	; 0x30
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
 800f3c0:	6039      	str	r1, [r7, #0]
    pb_field_iter_t iter;

    if (!pb_field_iter_begin_extension_const(&iter, extension))
 800f3c2:	f107 0308 	add.w	r3, r7, #8
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	6839      	ldr	r1, [r7, #0]
 800f3ca:	f7ff fb7f 	bl	800eacc <pb_field_iter_begin_extension_const>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	f083 0301 	eor.w	r3, r3, #1
 800f3d4:	b2db      	uxtb	r3, r3
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00b      	beq.n	800f3f2 <default_extension_encoder+0x3a>
        PB_RETURN_ERROR(stream, "invalid extension");
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	691b      	ldr	r3, [r3, #16]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d002      	beq.n	800f3e8 <default_extension_encoder+0x30>
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	691b      	ldr	r3, [r3, #16]
 800f3e6:	e000      	b.n	800f3ea <default_extension_encoder+0x32>
 800f3e8:	4b07      	ldr	r3, [pc, #28]	; (800f408 <default_extension_encoder+0x50>)
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	6113      	str	r3, [r2, #16]
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	e006      	b.n	800f400 <default_extension_encoder+0x48>

    return encode_field(stream, &iter);
 800f3f2:	f107 0308 	add.w	r3, r7, #8
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	4619      	mov	r1, r3
 800f3fa:	f7ff ff69 	bl	800f2d0 <encode_field>
 800f3fe:	4603      	mov	r3, r0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3730      	adds	r7, #48	; 0x30
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}
 800f408:	08014108 	.word	0x08014108

0800f40c <encode_extension_field>:


/* Walk through all the registered extensions and give them a chance
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f40c:	b580      	push	{r7, lr}
 800f40e:	b084      	sub	sp, #16
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
 800f414:	6039      	str	r1, [r7, #0]
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	69db      	ldr	r3, [r3, #28]
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	60fb      	str	r3, [r7, #12]

    while (extension)
 800f41e:	e01e      	b.n	800f45e <encode_extension_field+0x52>
    {
        bool status;
        if (extension->type->encode)
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	685b      	ldr	r3, [r3, #4]
 800f426:	2b00      	cmp	r3, #0
 800f428:	d008      	beq.n	800f43c <encode_extension_field+0x30>
            status = extension->type->encode(stream, extension);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	685b      	ldr	r3, [r3, #4]
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	68f9      	ldr	r1, [r7, #12]
 800f434:	4798      	blx	r3
 800f436:	4603      	mov	r3, r0
 800f438:	72fb      	strb	r3, [r7, #11]
 800f43a:	e005      	b.n	800f448 <encode_extension_field+0x3c>
        else
            status = default_extension_encoder(stream, extension);
 800f43c:	6878      	ldr	r0, [r7, #4]
 800f43e:	68f9      	ldr	r1, [r7, #12]
 800f440:	f7ff ffba 	bl	800f3b8 <default_extension_encoder>
 800f444:	4603      	mov	r3, r0
 800f446:	72fb      	strb	r3, [r7, #11]

        if (!status)
 800f448:	7afb      	ldrb	r3, [r7, #11]
 800f44a:	f083 0301 	eor.w	r3, r3, #1
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	2b00      	cmp	r3, #0
 800f452:	d001      	beq.n	800f458 <encode_extension_field+0x4c>
            return false;
 800f454:	2300      	movs	r3, #0
 800f456:	e006      	b.n	800f466 <encode_extension_field+0x5a>
        
        extension = extension->next;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	689b      	ldr	r3, [r3, #8]
 800f45c:	60fb      	str	r3, [r7, #12]
 * to encode themselves. */
static bool checkreturn encode_extension_field(pb_ostream_t *stream, const pb_field_iter_t *field)
{
    const pb_extension_t *extension = *(const pb_extension_t* const *)field->pData;

    while (extension)
 800f45e:	68fb      	ldr	r3, [r7, #12]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d1dd      	bne.n	800f420 <encode_extension_field+0x14>
            return false;
        
        extension = extension->next;
    }
    
    return true;
 800f464:	2301      	movs	r3, #1
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}
 800f46e:	bf00      	nop

0800f470 <pb_encode>:
/*********************
 * Encode all fields *
 *********************/

bool checkreturn pb_encode(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f470:	b580      	push	{r7, lr}
 800f472:	b08e      	sub	sp, #56	; 0x38
 800f474:	af00      	add	r7, sp, #0
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
    pb_field_iter_t iter;
    if (!pb_field_iter_begin_const(&iter, fields, src_struct))
 800f47c:	f107 0310 	add.w	r3, r7, #16
 800f480:	4618      	mov	r0, r3
 800f482:	68b9      	ldr	r1, [r7, #8]
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	f7ff fb0d 	bl	800eaa4 <pb_field_iter_begin_const>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f083 0301 	eor.w	r3, r3, #1
 800f490:	b2db      	uxtb	r3, r3
 800f492:	2b00      	cmp	r3, #0
 800f494:	d001      	beq.n	800f49a <pb_encode+0x2a>
        return true; /* Empty message type */
 800f496:	2301      	movs	r3, #1
 800f498:	e02a      	b.n	800f4f0 <pb_encode+0x80>
    
    do {
        if (PB_LTYPE(iter.type) == PB_LTYPE_EXTENSION)
 800f49a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f49e:	f003 030f 	and.w	r3, r3, #15
 800f4a2:	2b0a      	cmp	r3, #10
 800f4a4:	d10d      	bne.n	800f4c2 <pb_encode+0x52>
        {
            /* Special case for the extension field placeholder */
            if (!encode_extension_field(stream, &iter))
 800f4a6:	f107 0310 	add.w	r3, r7, #16
 800f4aa:	68f8      	ldr	r0, [r7, #12]
 800f4ac:	4619      	mov	r1, r3
 800f4ae:	f7ff ffad 	bl	800f40c <encode_extension_field>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	f083 0301 	eor.w	r3, r3, #1
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	2b00      	cmp	r3, #0
 800f4bc:	d00f      	beq.n	800f4de <pb_encode+0x6e>
                return false;
 800f4be:	2300      	movs	r3, #0
 800f4c0:	e016      	b.n	800f4f0 <pb_encode+0x80>
        }
        else
        {
            /* Regular field */
            if (!encode_field(stream, &iter))
 800f4c2:	f107 0310 	add.w	r3, r7, #16
 800f4c6:	68f8      	ldr	r0, [r7, #12]
 800f4c8:	4619      	mov	r1, r3
 800f4ca:	f7ff ff01 	bl	800f2d0 <encode_field>
 800f4ce:	4603      	mov	r3, r0
 800f4d0:	f083 0301 	eor.w	r3, r3, #1
 800f4d4:	b2db      	uxtb	r3, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d001      	beq.n	800f4de <pb_encode+0x6e>
                return false;
 800f4da:	2300      	movs	r3, #0
 800f4dc:	e008      	b.n	800f4f0 <pb_encode+0x80>
        }
    } while (pb_field_iter_next(&iter));
 800f4de:	f107 0310 	add.w	r3, r7, #16
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7ff faba 	bl	800ea5c <pb_field_iter_next>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d1d5      	bne.n	800f49a <pb_encode+0x2a>
    
    return true;
 800f4ee:	2301      	movs	r3, #1
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3738      	adds	r7, #56	; 0x38
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	bd80      	pop	{r7, pc}

0800f4f8 <pb_encode_varint_32>:
 * Helper functions *
 ********************/

/* This function avoids 64-bit shifts as they are quite slow on many platforms. */
static bool checkreturn pb_encode_varint_32(pb_ostream_t *stream, uint32_t low, uint32_t high)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b088      	sub	sp, #32
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	60f8      	str	r0, [r7, #12]
 800f500:	60b9      	str	r1, [r7, #8]
 800f502:	607a      	str	r2, [r7, #4]
    size_t i = 0;
 800f504:	2300      	movs	r3, #0
 800f506:	61fb      	str	r3, [r7, #28]
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f510:	76fb      	strb	r3, [r7, #27]
    low >>= 7;
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	09db      	lsrs	r3, r3, #7
 800f516:	60bb      	str	r3, [r7, #8]

    while (i < 4 && (low != 0 || high != 0))
 800f518:	e014      	b.n	800f544 <pb_encode_varint_32+0x4c>
    {
        byte |= 0x80;
 800f51a:	7efb      	ldrb	r3, [r7, #27]
 800f51c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f520:	76fb      	strb	r3, [r7, #27]
        buffer[i++] = byte;
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	1c5a      	adds	r2, r3, #1
 800f526:	61fa      	str	r2, [r7, #28]
 800f528:	f107 0220 	add.w	r2, r7, #32
 800f52c:	4413      	add	r3, r2
 800f52e:	7efa      	ldrb	r2, [r7, #27]
 800f530:	f803 2c10 	strb.w	r2, [r3, #-16]
        byte = (pb_byte_t)(low & 0x7F);
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	b2db      	uxtb	r3, r3
 800f538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f53c:	76fb      	strb	r3, [r7, #27]
        low >>= 7;
 800f53e:	68bb      	ldr	r3, [r7, #8]
 800f540:	09db      	lsrs	r3, r3, #7
 800f542:	60bb      	str	r3, [r7, #8]
    size_t i = 0;
    pb_byte_t buffer[10];
    pb_byte_t byte = (pb_byte_t)(low & 0x7F);
    low >>= 7;

    while (i < 4 && (low != 0 || high != 0))
 800f544:	69fb      	ldr	r3, [r7, #28]
 800f546:	2b03      	cmp	r3, #3
 800f548:	d805      	bhi.n	800f556 <pb_encode_varint_32+0x5e>
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d1e4      	bne.n	800f51a <pb_encode_varint_32+0x22>
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1e1      	bne.n	800f51a <pb_encode_varint_32+0x22>
        buffer[i++] = byte;
        byte = (pb_byte_t)(low & 0x7F);
        low >>= 7;
    }

    if (high)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2b00      	cmp	r3, #0
 800f55a:	d025      	beq.n	800f5a8 <pb_encode_varint_32+0xb0>
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	b2db      	uxtb	r3, r3
 800f560:	f003 0307 	and.w	r3, r3, #7
 800f564:	b2db      	uxtb	r3, r3
 800f566:	011b      	lsls	r3, r3, #4
 800f568:	b2da      	uxtb	r2, r3
 800f56a:	7efb      	ldrb	r3, [r7, #27]
 800f56c:	4313      	orrs	r3, r2
 800f56e:	76fb      	strb	r3, [r7, #27]
        high >>= 3;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	08db      	lsrs	r3, r3, #3
 800f574:	607b      	str	r3, [r7, #4]

        while (high)
 800f576:	e014      	b.n	800f5a2 <pb_encode_varint_32+0xaa>
        {
            byte |= 0x80;
 800f578:	7efb      	ldrb	r3, [r7, #27]
 800f57a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f57e:	76fb      	strb	r3, [r7, #27]
            buffer[i++] = byte;
 800f580:	69fb      	ldr	r3, [r7, #28]
 800f582:	1c5a      	adds	r2, r3, #1
 800f584:	61fa      	str	r2, [r7, #28]
 800f586:	f107 0220 	add.w	r2, r7, #32
 800f58a:	4413      	add	r3, r2
 800f58c:	7efa      	ldrb	r2, [r7, #27]
 800f58e:	f803 2c10 	strb.w	r2, [r3, #-16]
            byte = (pb_byte_t)(high & 0x7F);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	b2db      	uxtb	r3, r3
 800f596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f59a:	76fb      	strb	r3, [r7, #27]
            high >>= 7;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	09db      	lsrs	r3, r3, #7
 800f5a0:	607b      	str	r3, [r7, #4]
    if (high)
    {
        byte = (pb_byte_t)(byte | ((high & 0x07) << 4));
        high >>= 3;

        while (high)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	2b00      	cmp	r3, #0
 800f5a6:	d1e7      	bne.n	800f578 <pb_encode_varint_32+0x80>
            byte = (pb_byte_t)(high & 0x7F);
            high >>= 7;
        }
    }

    buffer[i++] = byte;
 800f5a8:	69fb      	ldr	r3, [r7, #28]
 800f5aa:	1c5a      	adds	r2, r3, #1
 800f5ac:	61fa      	str	r2, [r7, #28]
 800f5ae:	f107 0220 	add.w	r2, r7, #32
 800f5b2:	4413      	add	r3, r2
 800f5b4:	7efa      	ldrb	r2, [r7, #27]
 800f5b6:	f803 2c10 	strb.w	r2, [r3, #-16]

    return pb_write(stream, buffer, i);
 800f5ba:	f107 0310 	add.w	r3, r7, #16
 800f5be:	68f8      	ldr	r0, [r7, #12]
 800f5c0:	4619      	mov	r1, r3
 800f5c2:	69fa      	ldr	r2, [r7, #28]
 800f5c4:	f7ff fb02 	bl	800ebcc <pb_write>
 800f5c8:	4603      	mov	r3, r0
}
 800f5ca:	4618      	mov	r0, r3
 800f5cc:	3720      	adds	r7, #32
 800f5ce:	46bd      	mov	sp, r7
 800f5d0:	bd80      	pop	{r7, pc}
 800f5d2:	bf00      	nop

0800f5d4 <pb_encode_varint>:

bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
 800f5d4:	b5b0      	push	{r4, r5, r7, lr}
 800f5d6:	b086      	sub	sp, #24
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	60f8      	str	r0, [r7, #12]
 800f5dc:	e9c7 2300 	strd	r2, r3, [r7]
    if (value <= 0x7F)
 800f5e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	bf08      	it	eq
 800f5e8:	2a80      	cmpeq	r2, #128	; 0x80
 800f5ea:	d20a      	bcs.n	800f602 <pb_encode_varint+0x2e>
    {
        /* Fast path: single byte */
        pb_byte_t byte = (pb_byte_t)value;
 800f5ec:	783b      	ldrb	r3, [r7, #0]
 800f5ee:	75fb      	strb	r3, [r7, #23]
        return pb_write(stream, &byte, 1);
 800f5f0:	f107 0317 	add.w	r3, r7, #23
 800f5f4:	68f8      	ldr	r0, [r7, #12]
 800f5f6:	4619      	mov	r1, r3
 800f5f8:	2201      	movs	r2, #1
 800f5fa:	f7ff fae7 	bl	800ebcc <pb_write>
 800f5fe:	4603      	mov	r3, r0
 800f600:	e00a      	b.n	800f618 <pb_encode_varint+0x44>
    else
    {
#ifdef PB_WITHOUT_64BIT
        return pb_encode_varint_32(stream, value, 0);
#else
        return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)(value >> 32));
 800f602:	6839      	ldr	r1, [r7, #0]
 800f604:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f608:	001c      	movs	r4, r3
 800f60a:	2500      	movs	r5, #0
 800f60c:	4623      	mov	r3, r4
 800f60e:	68f8      	ldr	r0, [r7, #12]
 800f610:	461a      	mov	r2, r3
 800f612:	f7ff ff71 	bl	800f4f8 <pb_encode_varint_32>
 800f616:	4603      	mov	r3, r0
#endif
    }
}
 800f618:	4618      	mov	r0, r3
 800f61a:	3718      	adds	r7, #24
 800f61c:	46bd      	mov	sp, r7
 800f61e:	bdb0      	pop	{r4, r5, r7, pc}

0800f620 <pb_encode_svarint>:

bool checkreturn pb_encode_svarint(pb_ostream_t *stream, pb_int64_t value)
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b088      	sub	sp, #32
 800f624:	af00      	add	r7, sp, #0
 800f626:	60f8      	str	r0, [r7, #12]
 800f628:	e9c7 2300 	strd	r2, r3, [r7]
    pb_uint64_t zigzagged;
    pb_uint64_t mask = ((pb_uint64_t)-1) >> 1; /* Satisfy clang -fsanitize=integer */
 800f62c:	f04f 32ff 	mov.w	r2, #4294967295
 800f630:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800f634:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (value < 0)
 800f638:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f63c:	2a00      	cmp	r2, #0
 800f63e:	f173 0300 	sbcs.w	r3, r3, #0
 800f642:	da11      	bge.n	800f668 <pb_encode_svarint+0x48>
        zigzagged = ~(((pb_uint64_t)value & mask) << 1);
 800f644:	e9d7 0100 	ldrd	r0, r1, [r7]
 800f648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f64c:	ea02 0200 	and.w	r2, r2, r0
 800f650:	ea03 0301 	and.w	r3, r3, r1
 800f654:	1892      	adds	r2, r2, r2
 800f656:	eb43 0303 	adc.w	r3, r3, r3
 800f65a:	ea6f 0202 	mvn.w	r2, r2
 800f65e:	ea6f 0303 	mvn.w	r3, r3
 800f662:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800f666:	e006      	b.n	800f676 <pb_encode_svarint+0x56>
    else
        zigzagged = (pb_uint64_t)value << 1;
 800f668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f66c:	1892      	adds	r2, r2, r2
 800f66e:	eb43 0303 	adc.w	r3, r3, r3
 800f672:	e9c7 2306 	strd	r2, r3, [r7, #24]
    
    return pb_encode_varint(stream, zigzagged);
 800f676:	68f8      	ldr	r0, [r7, #12]
 800f678:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800f67c:	f7ff ffaa 	bl	800f5d4 <pb_encode_varint>
 800f680:	4603      	mov	r3, r0
}
 800f682:	4618      	mov	r0, r3
 800f684:	3720      	adds	r7, #32
 800f686:	46bd      	mov	sp, r7
 800f688:	bd80      	pop	{r7, pc}
 800f68a:	bf00      	nop

0800f68c <pb_encode_fixed32>:

bool checkreturn pb_encode_fixed32(pb_ostream_t *stream, const void *value)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b082      	sub	sp, #8
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 4);
 800f696:	6878      	ldr	r0, [r7, #4]
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	2204      	movs	r2, #4
 800f69c:	f7ff fa96 	bl	800ebcc <pb_write>
 800f6a0:	4603      	mov	r3, r0
    bytes[1] = (pb_byte_t)((val >> 8) & 0xFF);
    bytes[2] = (pb_byte_t)((val >> 16) & 0xFF);
    bytes[3] = (pb_byte_t)((val >> 24) & 0xFF);
    return pb_write(stream, bytes, 4);
#endif
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
 800f6aa:	bf00      	nop

0800f6ac <pb_encode_fixed64>:

#ifndef PB_WITHOUT_64BIT
bool checkreturn pb_encode_fixed64(pb_ostream_t *stream, const void *value)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	6039      	str	r1, [r7, #0]
#if defined(PB_LITTLE_ENDIAN_8BIT) && PB_LITTLE_ENDIAN_8BIT == 1
    /* Fast path if we know that we're on little endian */
    return pb_write(stream, (const pb_byte_t*)value, 8);
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	6839      	ldr	r1, [r7, #0]
 800f6ba:	2208      	movs	r2, #8
 800f6bc:	f7ff fa86 	bl	800ebcc <pb_write>
 800f6c0:	4603      	mov	r3, r0
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
    return pb_write(stream, bytes, 8);
#endif
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}
 800f6ca:	bf00      	nop

0800f6cc <pb_encode_tag>:
#endif

bool checkreturn pb_encode_tag(pb_ostream_t *stream, pb_wire_type_t wiretype, uint32_t field_number)
{
 800f6cc:	b5b0      	push	{r4, r5, r7, lr}
 800f6ce:	b086      	sub	sp, #24
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	72fb      	strb	r3, [r7, #11]
    pb_uint64_t tag = ((pb_uint64_t)field_number << 3) | wiretype;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	461a      	mov	r2, r3
 800f6de:	f04f 0300 	mov.w	r3, #0
 800f6e2:	00dd      	lsls	r5, r3, #3
 800f6e4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800f6e8:	00d4      	lsls	r4, r2, #3
 800f6ea:	7afa      	ldrb	r2, [r7, #11]
 800f6ec:	f04f 0300 	mov.w	r3, #0
 800f6f0:	ea42 0204 	orr.w	r2, r2, r4
 800f6f4:	ea43 0305 	orr.w	r3, r3, r5
 800f6f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    return pb_encode_varint(stream, tag);
 800f6fc:	68f8      	ldr	r0, [r7, #12]
 800f6fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f702:	f7ff ff67 	bl	800f5d4 <pb_encode_varint>
 800f706:	4603      	mov	r3, r0
}
 800f708:	4618      	mov	r0, r3
 800f70a:	3718      	adds	r7, #24
 800f70c:	46bd      	mov	sp, r7
 800f70e:	bdb0      	pop	{r4, r5, r7, pc}

0800f710 <pb_encode_tag_for_field>:

bool pb_encode_tag_for_field ( pb_ostream_t* stream, const pb_field_iter_t* field )
{
 800f710:	b580      	push	{r7, lr}
 800f712:	b084      	sub	sp, #16
 800f714:	af00      	add	r7, sp, #0
 800f716:	6078      	str	r0, [r7, #4]
 800f718:	6039      	str	r1, [r7, #0]
    pb_wire_type_t wiretype;
    switch (PB_LTYPE(field->type))
 800f71a:	683b      	ldr	r3, [r7, #0]
 800f71c:	7d9b      	ldrb	r3, [r3, #22]
 800f71e:	f003 030f 	and.w	r3, r3, #15
 800f722:	2b0b      	cmp	r3, #11
 800f724:	d826      	bhi.n	800f774 <pb_encode_tag_for_field+0x64>
 800f726:	a201      	add	r2, pc, #4	; (adr r2, 800f72c <pb_encode_tag_for_field+0x1c>)
 800f728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f72c:	0800f75d 	.word	0x0800f75d
 800f730:	0800f75d 	.word	0x0800f75d
 800f734:	0800f75d 	.word	0x0800f75d
 800f738:	0800f75d 	.word	0x0800f75d
 800f73c:	0800f763 	.word	0x0800f763
 800f740:	0800f769 	.word	0x0800f769
 800f744:	0800f76f 	.word	0x0800f76f
 800f748:	0800f76f 	.word	0x0800f76f
 800f74c:	0800f76f 	.word	0x0800f76f
 800f750:	0800f76f 	.word	0x0800f76f
 800f754:	0800f775 	.word	0x0800f775
 800f758:	0800f76f 	.word	0x0800f76f
    {
        case PB_LTYPE_BOOL:
        case PB_LTYPE_VARINT:
        case PB_LTYPE_UVARINT:
        case PB_LTYPE_SVARINT:
            wiretype = PB_WT_VARINT;
 800f75c:	2300      	movs	r3, #0
 800f75e:	73fb      	strb	r3, [r7, #15]
            break;
 800f760:	e014      	b.n	800f78c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED32:
            wiretype = PB_WT_32BIT;
 800f762:	2305      	movs	r3, #5
 800f764:	73fb      	strb	r3, [r7, #15]
            break;
 800f766:	e011      	b.n	800f78c <pb_encode_tag_for_field+0x7c>
        
        case PB_LTYPE_FIXED64:
            wiretype = PB_WT_64BIT;
 800f768:	2301      	movs	r3, #1
 800f76a:	73fb      	strb	r3, [r7, #15]
            break;
 800f76c:	e00e      	b.n	800f78c <pb_encode_tag_for_field+0x7c>
        case PB_LTYPE_BYTES:
        case PB_LTYPE_STRING:
        case PB_LTYPE_SUBMESSAGE:
        case PB_LTYPE_SUBMSG_W_CB:
        case PB_LTYPE_FIXED_LENGTH_BYTES:
            wiretype = PB_WT_STRING;
 800f76e:	2302      	movs	r3, #2
 800f770:	73fb      	strb	r3, [r7, #15]
            break;
 800f772:	e00b      	b.n	800f78c <pb_encode_tag_for_field+0x7c>
        
        default:
            PB_RETURN_ERROR(stream, "invalid field type");
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	691b      	ldr	r3, [r3, #16]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d002      	beq.n	800f782 <pb_encode_tag_for_field+0x72>
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	691b      	ldr	r3, [r3, #16]
 800f780:	e000      	b.n	800f784 <pb_encode_tag_for_field+0x74>
 800f782:	4b09      	ldr	r3, [pc, #36]	; (800f7a8 <pb_encode_tag_for_field+0x98>)
 800f784:	687a      	ldr	r2, [r7, #4]
 800f786:	6113      	str	r3, [r2, #16]
 800f788:	2300      	movs	r3, #0
 800f78a:	e008      	b.n	800f79e <pb_encode_tag_for_field+0x8e>
    }
    
    return pb_encode_tag(stream, wiretype, field->tag);
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	8a1b      	ldrh	r3, [r3, #16]
 800f790:	461a      	mov	r2, r3
 800f792:	7bfb      	ldrb	r3, [r7, #15]
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	4619      	mov	r1, r3
 800f798:	f7ff ff98 	bl	800f6cc <pb_encode_tag>
 800f79c:	4603      	mov	r3, r0
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	080140cc 	.word	0x080140cc

0800f7ac <pb_encode_string>:

bool checkreturn pb_encode_string(pb_ostream_t *stream, const pb_byte_t *buffer, size_t size)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	60f8      	str	r0, [r7, #12]
 800f7b4:	60b9      	str	r1, [r7, #8]
 800f7b6:	607a      	str	r2, [r7, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	461a      	mov	r2, r3
 800f7bc:	f04f 0300 	mov.w	r3, #0
 800f7c0:	68f8      	ldr	r0, [r7, #12]
 800f7c2:	f7ff ff07 	bl	800f5d4 <pb_encode_varint>
 800f7c6:	4603      	mov	r3, r0
 800f7c8:	f083 0301 	eor.w	r3, r3, #1
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	d001      	beq.n	800f7d6 <pb_encode_string+0x2a>
        return false;
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	e005      	b.n	800f7e2 <pb_encode_string+0x36>
    
    return pb_write(stream, buffer, size);
 800f7d6:	68f8      	ldr	r0, [r7, #12]
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	687a      	ldr	r2, [r7, #4]
 800f7dc:	f7ff f9f6 	bl	800ebcc <pb_write>
 800f7e0:	4603      	mov	r3, r0
}
 800f7e2:	4618      	mov	r0, r3
 800f7e4:	3710      	adds	r7, #16
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	bd80      	pop	{r7, pc}
 800f7ea:	bf00      	nop

0800f7ec <pb_encode_submessage>:

bool checkreturn pb_encode_submessage(pb_ostream_t *stream, const pb_msgdesc_t *fields, const void *src_struct)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b08c      	sub	sp, #48	; 0x30
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
    /* First calculate the message size using a non-writing substream. */
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 800f7f8:	2300      	movs	r3, #0
 800f7fa:	617b      	str	r3, [r7, #20]
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	61bb      	str	r3, [r7, #24]
 800f800:	2300      	movs	r3, #0
 800f802:	61fb      	str	r3, [r7, #28]
 800f804:	2300      	movs	r3, #0
 800f806:	623b      	str	r3, [r7, #32]
 800f808:	2300      	movs	r3, #0
 800f80a:	627b      	str	r3, [r7, #36]	; 0x24
    size_t size;
    bool status;
    
    if (!pb_encode(&substream, fields, src_struct))
 800f80c:	f107 0314 	add.w	r3, r7, #20
 800f810:	4618      	mov	r0, r3
 800f812:	68b9      	ldr	r1, [r7, #8]
 800f814:	687a      	ldr	r2, [r7, #4]
 800f816:	f7ff fe2b 	bl	800f470 <pb_encode>
 800f81a:	4603      	mov	r3, r0
 800f81c:	f083 0301 	eor.w	r3, r3, #1
 800f820:	b2db      	uxtb	r3, r3
 800f822:	2b00      	cmp	r3, #0
 800f824:	d004      	beq.n	800f830 <pb_encode_submessage+0x44>
    {
#ifndef PB_NO_ERRMSG
        stream->errmsg = substream.errmsg;
 800f826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	611a      	str	r2, [r3, #16]
#endif
        return false;
 800f82c:	2300      	movs	r3, #0
 800f82e:	e063      	b.n	800f8f8 <pb_encode_submessage+0x10c>
    }
    
    size = substream.bytes_written;
 800f830:	6a3b      	ldr	r3, [r7, #32]
 800f832:	62fb      	str	r3, [r7, #44]	; 0x2c
    
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 800f834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f836:	461a      	mov	r2, r3
 800f838:	f04f 0300 	mov.w	r3, #0
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7ff fec9 	bl	800f5d4 <pb_encode_varint>
 800f842:	4603      	mov	r3, r0
 800f844:	f083 0301 	eor.w	r3, r3, #1
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	d001      	beq.n	800f852 <pb_encode_submessage+0x66>
        return false;
 800f84e:	2300      	movs	r3, #0
 800f850:	e052      	b.n	800f8f8 <pb_encode_submessage+0x10c>
    
    if (stream->callback == NULL)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <pb_encode_submessage+0x7c>
        return pb_write(stream, NULL, size); /* Just sizing */
 800f85a:	68f8      	ldr	r0, [r7, #12]
 800f85c:	2100      	movs	r1, #0
 800f85e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f860:	f7ff f9b4 	bl	800ebcc <pb_write>
 800f864:	4603      	mov	r3, r0
 800f866:	e047      	b.n	800f8f8 <pb_encode_submessage+0x10c>
    
    if (stream->bytes_written + size > stream->max_size)
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	68da      	ldr	r2, [r3, #12]
 800f86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f86e:	441a      	add	r2, r3
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	689b      	ldr	r3, [r3, #8]
 800f874:	429a      	cmp	r2, r3
 800f876:	d90b      	bls.n	800f890 <pb_encode_submessage+0xa4>
        PB_RETURN_ERROR(stream, "stream full");
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	691b      	ldr	r3, [r3, #16]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d002      	beq.n	800f886 <pb_encode_submessage+0x9a>
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	691b      	ldr	r3, [r3, #16]
 800f884:	e000      	b.n	800f888 <pb_encode_submessage+0x9c>
 800f886:	4b1e      	ldr	r3, [pc, #120]	; (800f900 <pb_encode_submessage+0x114>)
 800f888:	68fa      	ldr	r2, [r7, #12]
 800f88a:	6113      	str	r3, [r2, #16]
 800f88c:	2300      	movs	r3, #0
 800f88e:	e033      	b.n	800f8f8 <pb_encode_submessage+0x10c>
        
    /* Use a substream to verify that a callback doesn't write more than
     * what it did the first time. */
    substream.callback = stream->callback;
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	617b      	str	r3, [r7, #20]
    substream.state = stream->state;
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	685b      	ldr	r3, [r3, #4]
 800f89a:	61bb      	str	r3, [r7, #24]
    substream.max_size = size;
 800f89c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f89e:	61fb      	str	r3, [r7, #28]
    substream.bytes_written = 0;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	623b      	str	r3, [r7, #32]
#ifndef PB_NO_ERRMSG
    substream.errmsg = NULL;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	627b      	str	r3, [r7, #36]	; 0x24
#endif
    
    status = pb_encode(&substream, fields, src_struct);
 800f8a8:	f107 0314 	add.w	r3, r7, #20
 800f8ac:	4618      	mov	r0, r3
 800f8ae:	68b9      	ldr	r1, [r7, #8]
 800f8b0:	687a      	ldr	r2, [r7, #4]
 800f8b2:	f7ff fddd 	bl	800f470 <pb_encode>
 800f8b6:	4603      	mov	r3, r0
 800f8b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    
    stream->bytes_written += substream.bytes_written;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	68da      	ldr	r2, [r3, #12]
 800f8c0:	6a3b      	ldr	r3, [r7, #32]
 800f8c2:	441a      	add	r2, r3
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	60da      	str	r2, [r3, #12]
    stream->state = substream.state;
 800f8c8:	69ba      	ldr	r2, [r7, #24]
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	605a      	str	r2, [r3, #4]
#ifndef PB_NO_ERRMSG
    stream->errmsg = substream.errmsg;
 800f8ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	611a      	str	r2, [r3, #16]
#endif
    
    if (substream.bytes_written != size)
 800f8d4:	6a3a      	ldr	r2, [r7, #32]
 800f8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d8:	429a      	cmp	r2, r3
 800f8da:	d00b      	beq.n	800f8f4 <pb_encode_submessage+0x108>
        PB_RETURN_ERROR(stream, "submsg size changed");
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d002      	beq.n	800f8ea <pb_encode_submessage+0xfe>
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	691b      	ldr	r3, [r3, #16]
 800f8e8:	e000      	b.n	800f8ec <pb_encode_submessage+0x100>
 800f8ea:	4b06      	ldr	r3, [pc, #24]	; (800f904 <pb_encode_submessage+0x118>)
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	6113      	str	r3, [r2, #16]
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	e001      	b.n	800f8f8 <pb_encode_submessage+0x10c>
    
    return status;
 800f8f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3730      	adds	r7, #48	; 0x30
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	08014094 	.word	0x08014094
 800f904:	0801411c 	.word	0x0801411c

0800f908 <pb_enc_bool>:

/* Field encoders */

static bool checkreturn pb_enc_bool(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
    uint32_t value = safe_read_bool(field->pData) ? 1 : 0;
 800f912:	683b      	ldr	r3, [r7, #0]
 800f914:	69db      	ldr	r3, [r3, #28]
 800f916:	4618      	mov	r0, r3
 800f918:	f7ff f9a8 	bl	800ec6c <safe_read_bool>
 800f91c:	4603      	mov	r3, r0
 800f91e:	60fb      	str	r3, [r7, #12]
    PB_UNUSED(field);
    return pb_encode_varint(stream, value);
 800f920:	68fb      	ldr	r3, [r7, #12]
 800f922:	461a      	mov	r2, r3
 800f924:	f04f 0300 	mov.w	r3, #0
 800f928:	6878      	ldr	r0, [r7, #4]
 800f92a:	f7ff fe53 	bl	800f5d4 <pb_encode_varint>
 800f92e:	4603      	mov	r3, r0
}
 800f930:	4618      	mov	r0, r3
 800f932:	3710      	adds	r7, #16
 800f934:	46bd      	mov	sp, r7
 800f936:	bd80      	pop	{r7, pc}

0800f938 <pb_enc_varint>:

static bool checkreturn pb_enc_varint(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
    if (PB_LTYPE(field->type) == PB_LTYPE_UVARINT)
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	7d9b      	ldrb	r3, [r3, #22]
 800f946:	f003 030f 	and.w	r3, r3, #15
 800f94a:	2b02      	cmp	r3, #2
 800f94c:	d14a      	bne.n	800f9e4 <pb_enc_varint+0xac>
    {
        /* Perform unsigned integer extension */
        pb_uint64_t value = 0;
 800f94e:	f04f 0200 	mov.w	r2, #0
 800f952:	f04f 0300 	mov.w	r3, #0
 800f956:	e9c7 2304 	strd	r2, r3, [r7, #16]

        if (field->data_size == sizeof(uint_least8_t))
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	8a5b      	ldrh	r3, [r3, #18]
 800f95e:	2b01      	cmp	r3, #1
 800f960:	d108      	bne.n	800f974 <pb_enc_varint+0x3c>
            value = *(const uint_least8_t*)field->pData;
 800f962:	683b      	ldr	r3, [r7, #0]
 800f964:	69db      	ldr	r3, [r3, #28]
 800f966:	781b      	ldrb	r3, [r3, #0]
 800f968:	b2da      	uxtb	r2, r3
 800f96a:	f04f 0300 	mov.w	r3, #0
 800f96e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f972:	e030      	b.n	800f9d6 <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint_least16_t))
 800f974:	683b      	ldr	r3, [r7, #0]
 800f976:	8a5b      	ldrh	r3, [r3, #18]
 800f978:	2b02      	cmp	r3, #2
 800f97a:	d108      	bne.n	800f98e <pb_enc_varint+0x56>
            value = *(const uint_least16_t*)field->pData;
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	69db      	ldr	r3, [r3, #28]
 800f980:	881b      	ldrh	r3, [r3, #0]
 800f982:	b29a      	uxth	r2, r3
 800f984:	f04f 0300 	mov.w	r3, #0
 800f988:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f98c:	e023      	b.n	800f9d6 <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(uint32_t))
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	8a5b      	ldrh	r3, [r3, #18]
 800f992:	2b04      	cmp	r3, #4
 800f994:	d108      	bne.n	800f9a8 <pb_enc_varint+0x70>
            value = *(const uint32_t*)field->pData;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	69db      	ldr	r3, [r3, #28]
 800f99a:	681b      	ldr	r3, [r3, #0]
 800f99c:	461a      	mov	r2, r3
 800f99e:	f04f 0300 	mov.w	r3, #0
 800f9a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f9a6:	e016      	b.n	800f9d6 <pb_enc_varint+0x9e>
        else if (field->data_size == sizeof(pb_uint64_t))
 800f9a8:	683b      	ldr	r3, [r7, #0]
 800f9aa:	8a5b      	ldrh	r3, [r3, #18]
 800f9ac:	2b08      	cmp	r3, #8
 800f9ae:	d106      	bne.n	800f9be <pb_enc_varint+0x86>
            value = *(const pb_uint64_t*)field->pData;
 800f9b0:	683b      	ldr	r3, [r7, #0]
 800f9b2:	69db      	ldr	r3, [r3, #28]
 800f9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f9bc:	e00b      	b.n	800f9d6 <pb_enc_varint+0x9e>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d002      	beq.n	800f9cc <pb_enc_varint+0x94>
 800f9c6:	687b      	ldr	r3, [r7, #4]
 800f9c8:	691b      	ldr	r3, [r3, #16]
 800f9ca:	e000      	b.n	800f9ce <pb_enc_varint+0x96>
 800f9cc:	4b33      	ldr	r3, [pc, #204]	; (800fa9c <pb_enc_varint+0x164>)
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	6113      	str	r3, [r2, #16]
 800f9d2:	2300      	movs	r3, #0
 800f9d4:	e05d      	b.n	800fa92 <pb_enc_varint+0x15a>

        return pb_encode_varint(stream, value);
 800f9d6:	6878      	ldr	r0, [r7, #4]
 800f9d8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f9dc:	f7ff fdfa 	bl	800f5d4 <pb_encode_varint>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	e056      	b.n	800fa92 <pb_enc_varint+0x15a>
    }
    else
    {
        /* Perform signed integer extension */
        pb_int64_t value = 0;
 800f9e4:	f04f 0200 	mov.w	r2, #0
 800f9e8:	f04f 0300 	mov.w	r3, #0
 800f9ec:	e9c7 2302 	strd	r2, r3, [r7, #8]

        if (field->data_size == sizeof(int_least8_t))
 800f9f0:	683b      	ldr	r3, [r7, #0]
 800f9f2:	8a5b      	ldrh	r3, [r3, #18]
 800f9f4:	2b01      	cmp	r3, #1
 800f9f6:	d108      	bne.n	800fa0a <pb_enc_varint+0xd2>
            value = *(const int_least8_t*)field->pData;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	69db      	ldr	r3, [r3, #28]
 800f9fc:	781b      	ldrb	r3, [r3, #0]
 800f9fe:	b25a      	sxtb	r2, r3
 800fa00:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fa04:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fa08:	e030      	b.n	800fa6c <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int_least16_t))
 800fa0a:	683b      	ldr	r3, [r7, #0]
 800fa0c:	8a5b      	ldrh	r3, [r3, #18]
 800fa0e:	2b02      	cmp	r3, #2
 800fa10:	d108      	bne.n	800fa24 <pb_enc_varint+0xec>
            value = *(const int_least16_t*)field->pData;
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	69db      	ldr	r3, [r3, #28]
 800fa16:	881b      	ldrh	r3, [r3, #0]
 800fa18:	b21a      	sxth	r2, r3
 800fa1a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fa1e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fa22:	e023      	b.n	800fa6c <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(int32_t))
 800fa24:	683b      	ldr	r3, [r7, #0]
 800fa26:	8a5b      	ldrh	r3, [r3, #18]
 800fa28:	2b04      	cmp	r3, #4
 800fa2a:	d108      	bne.n	800fa3e <pb_enc_varint+0x106>
            value = *(const int32_t*)field->pData;
 800fa2c:	683b      	ldr	r3, [r7, #0]
 800fa2e:	69db      	ldr	r3, [r3, #28]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	461a      	mov	r2, r3
 800fa34:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800fa38:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fa3c:	e016      	b.n	800fa6c <pb_enc_varint+0x134>
        else if (field->data_size == sizeof(pb_int64_t))
 800fa3e:	683b      	ldr	r3, [r7, #0]
 800fa40:	8a5b      	ldrh	r3, [r3, #18]
 800fa42:	2b08      	cmp	r3, #8
 800fa44:	d106      	bne.n	800fa54 <pb_enc_varint+0x11c>
            value = *(const pb_int64_t*)field->pData;
 800fa46:	683b      	ldr	r3, [r7, #0]
 800fa48:	69db      	ldr	r3, [r3, #28]
 800fa4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa4e:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800fa52:	e00b      	b.n	800fa6c <pb_enc_varint+0x134>
        else
            PB_RETURN_ERROR(stream, "invalid data_size");
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	691b      	ldr	r3, [r3, #16]
 800fa58:	2b00      	cmp	r3, #0
 800fa5a:	d002      	beq.n	800fa62 <pb_enc_varint+0x12a>
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	691b      	ldr	r3, [r3, #16]
 800fa60:	e000      	b.n	800fa64 <pb_enc_varint+0x12c>
 800fa62:	4b0e      	ldr	r3, [pc, #56]	; (800fa9c <pb_enc_varint+0x164>)
 800fa64:	687a      	ldr	r2, [r7, #4]
 800fa66:	6113      	str	r3, [r2, #16]
 800fa68:	2300      	movs	r3, #0
 800fa6a:	e012      	b.n	800fa92 <pb_enc_varint+0x15a>

        if (PB_LTYPE(field->type) == PB_LTYPE_SVARINT)
 800fa6c:	683b      	ldr	r3, [r7, #0]
 800fa6e:	7d9b      	ldrb	r3, [r3, #22]
 800fa70:	f003 030f 	and.w	r3, r3, #15
 800fa74:	2b03      	cmp	r3, #3
 800fa76:	d106      	bne.n	800fa86 <pb_enc_varint+0x14e>
            return pb_encode_svarint(stream, value);
 800fa78:	6878      	ldr	r0, [r7, #4]
 800fa7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fa7e:	f7ff fdcf 	bl	800f620 <pb_encode_svarint>
 800fa82:	4603      	mov	r3, r0
 800fa84:	e005      	b.n	800fa92 <pb_enc_varint+0x15a>
#ifdef PB_WITHOUT_64BIT
        else if (value < 0)
            return pb_encode_varint_32(stream, (uint32_t)value, (uint32_t)-1);
#endif
        else
            return pb_encode_varint(stream, (pb_uint64_t)value);
 800fa86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800fa8a:	6878      	ldr	r0, [r7, #4]
 800fa8c:	f7ff fda2 	bl	800f5d4 <pb_encode_varint>
 800fa90:	4603      	mov	r3, r0

    }
}
 800fa92:	4618      	mov	r0, r3
 800fa94:	3718      	adds	r7, #24
 800fa96:	46bd      	mov	sp, r7
 800fa98:	bd80      	pop	{r7, pc}
 800fa9a:	bf00      	nop
 800fa9c:	08014130 	.word	0x08014130

0800faa0 <pb_enc_fixed>:

static bool checkreturn pb_enc_fixed(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800faa0:	b580      	push	{r7, lr}
 800faa2:	b082      	sub	sp, #8
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	6078      	str	r0, [r7, #4]
 800faa8:	6039      	str	r1, [r7, #0]
    {
        return pb_encode_float_as_double(stream, *(float*)field->pData);
    }
#endif

    if (field->data_size == sizeof(uint32_t))
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	8a5b      	ldrh	r3, [r3, #18]
 800faae:	2b04      	cmp	r3, #4
 800fab0:	d107      	bne.n	800fac2 <pb_enc_fixed+0x22>
    {
        return pb_encode_fixed32(stream, field->pData);
 800fab2:	683b      	ldr	r3, [r7, #0]
 800fab4:	69db      	ldr	r3, [r3, #28]
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	4619      	mov	r1, r3
 800faba:	f7ff fde7 	bl	800f68c <pb_encode_fixed32>
 800fabe:	4603      	mov	r3, r0
 800fac0:	e016      	b.n	800faf0 <pb_enc_fixed+0x50>
    }
#ifndef PB_WITHOUT_64BIT
    else if (field->data_size == sizeof(uint64_t))
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	8a5b      	ldrh	r3, [r3, #18]
 800fac6:	2b08      	cmp	r3, #8
 800fac8:	d107      	bne.n	800fada <pb_enc_fixed+0x3a>
    {
        return pb_encode_fixed64(stream, field->pData);
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	69db      	ldr	r3, [r3, #28]
 800face:	6878      	ldr	r0, [r7, #4]
 800fad0:	4619      	mov	r1, r3
 800fad2:	f7ff fdeb 	bl	800f6ac <pb_encode_fixed64>
 800fad6:	4603      	mov	r3, r0
 800fad8:	e00a      	b.n	800faf0 <pb_enc_fixed+0x50>
    }
#endif
    else
    {
        PB_RETURN_ERROR(stream, "invalid data_size");
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	691b      	ldr	r3, [r3, #16]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d002      	beq.n	800fae8 <pb_enc_fixed+0x48>
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	691b      	ldr	r3, [r3, #16]
 800fae6:	e000      	b.n	800faea <pb_enc_fixed+0x4a>
 800fae8:	4b03      	ldr	r3, [pc, #12]	; (800faf8 <pb_enc_fixed+0x58>)
 800faea:	687a      	ldr	r2, [r7, #4]
 800faec:	6113      	str	r3, [r2, #16]
 800faee:	2300      	movs	r3, #0
    }
}
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}
 800faf8:	08014130 	.word	0x08014130

0800fafc <pb_enc_bytes>:

static bool checkreturn pb_enc_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b084      	sub	sp, #16
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
 800fb04:	6039      	str	r1, [r7, #0]
    const pb_bytes_array_t *bytes = NULL;
 800fb06:	2300      	movs	r3, #0
 800fb08:	60fb      	str	r3, [r7, #12]

    bytes = (const pb_bytes_array_t*)field->pData;
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	69db      	ldr	r3, [r3, #28]
 800fb0e:	60fb      	str	r3, [r7, #12]
    
    if (bytes == NULL)
 800fb10:	68fb      	ldr	r3, [r7, #12]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d106      	bne.n	800fb24 <pb_enc_bytes+0x28>
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	2100      	movs	r1, #0
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	f7ff fe46 	bl	800f7ac <pb_encode_string>
 800fb20:	4603      	mov	r3, r0
 800fb22:	e023      	b.n	800fb6c <pb_enc_bytes+0x70>
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	7d9b      	ldrb	r3, [r3, #22]
 800fb28:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d113      	bne.n	800fb58 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	881b      	ldrh	r3, [r3, #0]
 800fb34:	461a      	mov	r2, r3
 800fb36:	683b      	ldr	r3, [r7, #0]
 800fb38:	8a5b      	ldrh	r3, [r3, #18]
 800fb3a:	3b02      	subs	r3, #2
    {
        /* Treat null pointer as an empty bytes field */
        return pb_encode_string(stream, NULL, 0);
    }
    
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 800fb3c:	429a      	cmp	r2, r3
 800fb3e:	d90b      	bls.n	800fb58 <pb_enc_bytes+0x5c>
        bytes->size > field->data_size - offsetof(pb_bytes_array_t, bytes))
    {
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	691b      	ldr	r3, [r3, #16]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <pb_enc_bytes+0x52>
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	e000      	b.n	800fb50 <pb_enc_bytes+0x54>
 800fb4e:	4b09      	ldr	r3, [pc, #36]	; (800fb74 <pb_enc_bytes+0x78>)
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	6113      	str	r3, [r2, #16]
 800fb54:	2300      	movs	r3, #0
 800fb56:	e009      	b.n	800fb6c <pb_enc_bytes+0x70>
    }
    
    return pb_encode_string(stream, bytes->bytes, (size_t)bytes->size);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	1c9a      	adds	r2, r3, #2
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	881b      	ldrh	r3, [r3, #0]
 800fb60:	6878      	ldr	r0, [r7, #4]
 800fb62:	4611      	mov	r1, r2
 800fb64:	461a      	mov	r2, r3
 800fb66:	f7ff fe21 	bl	800f7ac <pb_encode_string>
 800fb6a:	4603      	mov	r3, r0
}
 800fb6c:	4618      	mov	r0, r3
 800fb6e:	3710      	adds	r7, #16
 800fb70:	46bd      	mov	sp, r7
 800fb72:	bd80      	pop	{r7, pc}
 800fb74:	08014144 	.word	0x08014144

0800fb78 <pb_enc_string>:

static bool checkreturn pb_enc_string(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b086      	sub	sp, #24
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
    size_t size = 0;
 800fb82:	2300      	movs	r3, #0
 800fb84:	617b      	str	r3, [r7, #20]
    size_t max_size = (size_t)field->data_size;
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	8a5b      	ldrh	r3, [r3, #18]
 800fb8a:	613b      	str	r3, [r7, #16]
    const char *str = (const char*)field->pData;
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	69db      	ldr	r3, [r3, #28]
 800fb90:	60bb      	str	r3, [r7, #8]
    
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 800fb92:	683b      	ldr	r3, [r7, #0]
 800fb94:	7d9b      	ldrb	r3, [r3, #22]
 800fb96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800fb9a:	2b80      	cmp	r3, #128	; 0x80
 800fb9c:	d103      	bne.n	800fba6 <pb_enc_string+0x2e>
    {
        max_size = (size_t)-1;
 800fb9e:	f04f 33ff 	mov.w	r3, #4294967295
 800fba2:	613b      	str	r3, [r7, #16]
 800fba4:	e011      	b.n	800fbca <pb_enc_string+0x52>
        /* pb_dec_string() assumes string fields end with a null
         * terminator when the type isn't PB_ATYPE_POINTER, so we
         * shouldn't allow more than max-1 bytes to be written to
         * allow space for the null terminator.
         */
        if (max_size == 0)
 800fba6:	693b      	ldr	r3, [r7, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d10b      	bne.n	800fbc4 <pb_enc_string+0x4c>
            PB_RETURN_ERROR(stream, "zero-length string");
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	691b      	ldr	r3, [r3, #16]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d002      	beq.n	800fbba <pb_enc_string+0x42>
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	691b      	ldr	r3, [r3, #16]
 800fbb8:	e000      	b.n	800fbbc <pb_enc_string+0x44>
 800fbba:	4b1c      	ldr	r3, [pc, #112]	; (800fc2c <pb_enc_string+0xb4>)
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	6113      	str	r3, [r2, #16]
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	e02f      	b.n	800fc24 <pb_enc_string+0xac>

        max_size -= 1;
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	3b01      	subs	r3, #1
 800fbc8:	613b      	str	r3, [r7, #16]
    }


    if (str == NULL)
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d102      	bne.n	800fbd6 <pb_enc_string+0x5e>
    {
        size = 0; /* Treat null pointer as an empty string */
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	617b      	str	r3, [r7, #20]
 800fbd4:	e020      	b.n	800fc18 <pb_enc_string+0xa0>
    }
    else
    {
        const char *p = str;
 800fbd6:	68bb      	ldr	r3, [r7, #8]
 800fbd8:	60fb      	str	r3, [r7, #12]

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800fbda:	e005      	b.n	800fbe8 <pb_enc_string+0x70>
        {
            size++;
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	3301      	adds	r3, #1
 800fbe0:	617b      	str	r3, [r7, #20]
            p++;
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	3301      	adds	r3, #1
 800fbe6:	60fb      	str	r3, [r7, #12]
    else
    {
        const char *p = str;

        /* strnlen() is not always available, so just use a loop */
        while (size < max_size && *p != '\0')
 800fbe8:	697a      	ldr	r2, [r7, #20]
 800fbea:	693b      	ldr	r3, [r7, #16]
 800fbec:	429a      	cmp	r2, r3
 800fbee:	d203      	bcs.n	800fbf8 <pb_enc_string+0x80>
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	781b      	ldrb	r3, [r3, #0]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d1f1      	bne.n	800fbdc <pb_enc_string+0x64>
        {
            size++;
            p++;
        }

        if (*p != '\0')
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	781b      	ldrb	r3, [r3, #0]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00b      	beq.n	800fc18 <pb_enc_string+0xa0>
        {
            PB_RETURN_ERROR(stream, "unterminated string");
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	691b      	ldr	r3, [r3, #16]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d002      	beq.n	800fc0e <pb_enc_string+0x96>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	691b      	ldr	r3, [r3, #16]
 800fc0c:	e000      	b.n	800fc10 <pb_enc_string+0x98>
 800fc0e:	4b08      	ldr	r3, [pc, #32]	; (800fc30 <pb_enc_string+0xb8>)
 800fc10:	687a      	ldr	r2, [r7, #4]
 800fc12:	6113      	str	r3, [r2, #16]
 800fc14:	2300      	movs	r3, #0
 800fc16:	e005      	b.n	800fc24 <pb_enc_string+0xac>
#ifdef PB_VALIDATE_UTF8
    if (!pb_validate_utf8(str))
        PB_RETURN_ERROR(stream, "invalid utf8");
#endif

    return pb_encode_string(stream, (const pb_byte_t*)str, size);
 800fc18:	6878      	ldr	r0, [r7, #4]
 800fc1a:	68b9      	ldr	r1, [r7, #8]
 800fc1c:	697a      	ldr	r2, [r7, #20]
 800fc1e:	f7ff fdc5 	bl	800f7ac <pb_encode_string>
 800fc22:	4603      	mov	r3, r0
}
 800fc24:	4618      	mov	r0, r3
 800fc26:	3718      	adds	r7, #24
 800fc28:	46bd      	mov	sp, r7
 800fc2a:	bd80      	pop	{r7, pc}
 800fc2c:	08014158 	.word	0x08014158
 800fc30:	0801416c 	.word	0x0801416c

0800fc34 <pb_enc_submessage>:

static bool checkreturn pb_enc_submessage(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fc34:	b580      	push	{r7, lr}
 800fc36:	b084      	sub	sp, #16
 800fc38:	af00      	add	r7, sp, #0
 800fc3a:	6078      	str	r0, [r7, #4]
 800fc3c:	6039      	str	r1, [r7, #0]
    if (field->submsg_desc == NULL)
 800fc3e:	683b      	ldr	r3, [r7, #0]
 800fc40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d10b      	bne.n	800fc5e <pb_enc_submessage+0x2a>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	691b      	ldr	r3, [r3, #16]
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d002      	beq.n	800fc54 <pb_enc_submessage+0x20>
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	691b      	ldr	r3, [r3, #16]
 800fc52:	e000      	b.n	800fc56 <pb_enc_submessage+0x22>
 800fc54:	4b19      	ldr	r3, [pc, #100]	; (800fcbc <pb_enc_submessage+0x88>)
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	6113      	str	r3, [r2, #16]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	e02a      	b.n	800fcb4 <pb_enc_submessage+0x80>

    if (PB_LTYPE(field->type) == PB_LTYPE_SUBMSG_W_CB && field->pSize != NULL)
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	7d9b      	ldrb	r3, [r3, #22]
 800fc62:	f003 030f 	and.w	r3, r3, #15
 800fc66:	2b09      	cmp	r3, #9
 800fc68:	d11a      	bne.n	800fca0 <pb_enc_submessage+0x6c>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d016      	beq.n	800fca0 <pb_enc_submessage+0x6c>
    {
        /* Message callback is stored right before pSize. */
        pb_callback_t *callback = (pb_callback_t*)field->pSize - 1;
 800fc72:	683b      	ldr	r3, [r7, #0]
 800fc74:	6a1b      	ldr	r3, [r3, #32]
 800fc76:	3b08      	subs	r3, #8
 800fc78:	60fb      	str	r3, [r7, #12]
        if (callback->funcs.encode)
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d00e      	beq.n	800fca0 <pb_enc_submessage+0x6c>
        {
            if (!callback->funcs.encode(stream, field, &callback->arg))
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	681b      	ldr	r3, [r3, #0]
 800fc86:	68fa      	ldr	r2, [r7, #12]
 800fc88:	3204      	adds	r2, #4
 800fc8a:	6878      	ldr	r0, [r7, #4]
 800fc8c:	6839      	ldr	r1, [r7, #0]
 800fc8e:	4798      	blx	r3
 800fc90:	4603      	mov	r3, r0
 800fc92:	f083 0301 	eor.w	r3, r3, #1
 800fc96:	b2db      	uxtb	r3, r3
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d001      	beq.n	800fca0 <pb_enc_submessage+0x6c>
                return false;
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	e009      	b.n	800fcb4 <pb_enc_submessage+0x80>
        }
    }
    
    return pb_encode_submessage(stream, field->submsg_desc, field->pData);
 800fca0:	683b      	ldr	r3, [r7, #0]
 800fca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fca4:	683b      	ldr	r3, [r7, #0]
 800fca6:	69db      	ldr	r3, [r3, #28]
 800fca8:	6878      	ldr	r0, [r7, #4]
 800fcaa:	4611      	mov	r1, r2
 800fcac:	461a      	mov	r2, r3
 800fcae:	f7ff fd9d 	bl	800f7ec <pb_encode_submessage>
 800fcb2:	4603      	mov	r3, r0
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	3710      	adds	r7, #16
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	08014180 	.word	0x08014180

0800fcc0 <pb_enc_fixed_length_bytes>:

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_iter_t *field)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b082      	sub	sp, #8
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
 800fcc8:	6039      	str	r1, [r7, #0]
    return pb_encode_string(stream, (const pb_byte_t*)field->pData, (size_t)field->data_size);
 800fcca:	683b      	ldr	r3, [r7, #0]
 800fccc:	69da      	ldr	r2, [r3, #28]
 800fcce:	683b      	ldr	r3, [r7, #0]
 800fcd0:	8a5b      	ldrh	r3, [r3, #18]
 800fcd2:	6878      	ldr	r0, [r7, #4]
 800fcd4:	4611      	mov	r1, r2
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	f7ff fd68 	bl	800f7ac <pb_encode_string>
 800fcdc:	4603      	mov	r3, r0
}
 800fcde:	4618      	mov	r0, r3
 800fce0:	3708      	adds	r7, #8
 800fce2:	46bd      	mov	sp, r7
 800fce4:	bd80      	pop	{r7, pc}
 800fce6:	bf00      	nop

0800fce8 <uart_debugg>:
Io_Exp_PinMap_t ELEC_HANDBRAKE_PWR_OUT_D = {IO_EXP_IC_48, PORT0, PIN2};


//#if UART_DEBUG
void uart_debugg(uint8_t uart_buff[])
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
	            //Wait for transmit buffer interrupt to fill it again with remaining data
	            while((UART_GetTXFIFOStatus(&UART_0) & XMC_USIC_CH_TXFIFO_EVENT_STANDARD) == 0);
	            UART_ClearTXFIFOStatus(&UART_0, XMC_USIC_CH_TXFIFO_EVENT_STANDARD);
	   }*/
#endif
}
 800fcf0:	370c      	adds	r7, #12
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <Io_Exp_Init>:
}
//#endif


void Io_Exp_Init(void)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
	/* 0 set as output, 1 as input */
	/* Initially output is high hence make 0 */

	uint8_t Io_Exp_address = 0x42, set_port0_pin_as_out_or_input = 0xbf, set_port1_pin_as_out_or_input = 0x27, port0 = 0x00, port1 = 0x01, pin_value = 0x06;
 800fd02:	2342      	movs	r3, #66	; 0x42
 800fd04:	71fb      	strb	r3, [r7, #7]
 800fd06:	23bf      	movs	r3, #191	; 0xbf
 800fd08:	71bb      	strb	r3, [r7, #6]
 800fd0a:	2327      	movs	r3, #39	; 0x27
 800fd0c:	717b      	strb	r3, [r7, #5]
 800fd0e:	2300      	movs	r3, #0
 800fd10:	713b      	strb	r3, [r7, #4]
 800fd12:	2301      	movs	r3, #1
 800fd14:	70fb      	strb	r3, [r7, #3]
 800fd16:	2306      	movs	r3, #6
 800fd18:	70bb      	strb	r3, [r7, #2]

	/* U25 I2C_0*/
	IOExp_Configure(&I2C_MASTER_0, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fd1a:	79f9      	ldrb	r1, [r7, #7]
 800fd1c:	79ba      	ldrb	r2, [r7, #6]
 800fd1e:	797b      	ldrb	r3, [r7, #5]
 800fd20:	4851      	ldr	r0, [pc, #324]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd22:	f7f5 f883 	bl	8004e2c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);
 800fd26:	79f9      	ldrb	r1, [r7, #7]
 800fd28:	793a      	ldrb	r2, [r7, #4]
 800fd2a:	78bb      	ldrb	r3, [r7, #2]
 800fd2c:	484e      	ldr	r0, [pc, #312]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd2e:	f7f5 f9b9 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x03);
 800fd32:	79fa      	ldrb	r2, [r7, #7]
 800fd34:	78fb      	ldrb	r3, [r7, #3]
 800fd36:	484c      	ldr	r0, [pc, #304]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd38:	4611      	mov	r1, r2
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	2303      	movs	r3, #3
 800fd3e:	f7f5 f9b1 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x04);
 800fd42:	79fa      	ldrb	r2, [r7, #7]
 800fd44:	78fb      	ldrb	r3, [r7, #3]
 800fd46:	4848      	ldr	r0, [pc, #288]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd48:	4611      	mov	r1, r2
 800fd4a:	461a      	mov	r2, r3
 800fd4c:	2304      	movs	r3, #4
 800fd4e:	f7f5 f9a9 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x06);
 800fd52:	79fa      	ldrb	r2, [r7, #7]
 800fd54:	78fb      	ldrb	r3, [r7, #3]
 800fd56:	4844      	ldr	r0, [pc, #272]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd58:	4611      	mov	r1, r2
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	2306      	movs	r3, #6
 800fd5e:	f7f5 f9a1 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_0,Io_Exp_address, port1, 0x07);
 800fd62:	79fa      	ldrb	r2, [r7, #7]
 800fd64:	78fb      	ldrb	r3, [r7, #3]
 800fd66:	4840      	ldr	r0, [pc, #256]	; (800fe68 <Io_Exp_Init+0x16c>)
 800fd68:	4611      	mov	r1, r2
 800fd6a:	461a      	mov	r2, r3
 800fd6c:	2307      	movs	r3, #7
 800fd6e:	f7f5 f999 	bl	80050a4 <IOExp_SetPIN_LOW>
	//IOExp_SetPIN_HIGH(&I2C_MASTER_0,Io_Exp_address, port0, pin_value);

	/* U38 I2C_1 */
	Io_Exp_address = 0x40;
 800fd72:	2340      	movs	r3, #64	; 0x40
 800fd74:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input = 0xf0;
 800fd76:	23f0      	movs	r3, #240	; 0xf0
 800fd78:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0x01;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fd7e:	79f9      	ldrb	r1, [r7, #7]
 800fd80:	79ba      	ldrb	r2, [r7, #6]
 800fd82:	797b      	ldrb	r3, [r7, #5]
 800fd84:	4839      	ldr	r0, [pc, #228]	; (800fe6c <Io_Exp_Init+0x170>)
 800fd86:	f7f5 f851 	bl	8004e2c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 0);
 800fd8a:	79fa      	ldrb	r2, [r7, #7]
 800fd8c:	793b      	ldrb	r3, [r7, #4]
 800fd8e:	4837      	ldr	r0, [pc, #220]	; (800fe6c <Io_Exp_Init+0x170>)
 800fd90:	4611      	mov	r1, r2
 800fd92:	461a      	mov	r2, r3
 800fd94:	2300      	movs	r3, #0
 800fd96:	f7f5 f985 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 1);
 800fd9a:	79fa      	ldrb	r2, [r7, #7]
 800fd9c:	793b      	ldrb	r3, [r7, #4]
 800fd9e:	4833      	ldr	r0, [pc, #204]	; (800fe6c <Io_Exp_Init+0x170>)
 800fda0:	4611      	mov	r1, r2
 800fda2:	461a      	mov	r2, r3
 800fda4:	2301      	movs	r3, #1
 800fda6:	f7f5 f97d 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 2);
 800fdaa:	79fa      	ldrb	r2, [r7, #7]
 800fdac:	793b      	ldrb	r3, [r7, #4]
 800fdae:	482f      	ldr	r0, [pc, #188]	; (800fe6c <Io_Exp_Init+0x170>)
 800fdb0:	4611      	mov	r1, r2
 800fdb2:	461a      	mov	r2, r3
 800fdb4:	2302      	movs	r3, #2
 800fdb6:	f7f5 f975 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 800fdba:	79fa      	ldrb	r2, [r7, #7]
 800fdbc:	793b      	ldrb	r3, [r7, #4]
 800fdbe:	482b      	ldr	r0, [pc, #172]	; (800fe6c <Io_Exp_Init+0x170>)
 800fdc0:	4611      	mov	r1, r2
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	f7f5 f96d 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x01);
 800fdca:	79fa      	ldrb	r2, [r7, #7]
 800fdcc:	78fb      	ldrb	r3, [r7, #3]
 800fdce:	4827      	ldr	r0, [pc, #156]	; (800fe6c <Io_Exp_Init+0x170>)
 800fdd0:	4611      	mov	r1, r2
 800fdd2:	461a      	mov	r2, r3
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	f7f5 f965 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x02);
 800fdda:	79fa      	ldrb	r2, [r7, #7]
 800fddc:	78fb      	ldrb	r3, [r7, #3]
 800fdde:	4823      	ldr	r0, [pc, #140]	; (800fe6c <Io_Exp_Init+0x170>)
 800fde0:	4611      	mov	r1, r2
 800fde2:	461a      	mov	r2, r3
 800fde4:	2302      	movs	r3, #2
 800fde6:	f7f5 f95d 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x03);
 800fdea:	79fa      	ldrb	r2, [r7, #7]
 800fdec:	78fb      	ldrb	r3, [r7, #3]
 800fdee:	481f      	ldr	r0, [pc, #124]	; (800fe6c <Io_Exp_Init+0x170>)
 800fdf0:	4611      	mov	r1, r2
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	2303      	movs	r3, #3
 800fdf6:	f7f5 f955 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x04);
 800fdfa:	79fa      	ldrb	r2, [r7, #7]
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	481b      	ldr	r0, [pc, #108]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe00:	4611      	mov	r1, r2
 800fe02:	461a      	mov	r2, r3
 800fe04:	2304      	movs	r3, #4
 800fe06:	f7f5 f94d 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x05);
 800fe0a:	79fa      	ldrb	r2, [r7, #7]
 800fe0c:	78fb      	ldrb	r3, [r7, #3]
 800fe0e:	4817      	ldr	r0, [pc, #92]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe10:	4611      	mov	r1, r2
 800fe12:	461a      	mov	r2, r3
 800fe14:	2305      	movs	r3, #5
 800fe16:	f7f5 f945 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x06);
 800fe1a:	79fa      	ldrb	r2, [r7, #7]
 800fe1c:	78fb      	ldrb	r3, [r7, #3]
 800fe1e:	4813      	ldr	r0, [pc, #76]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe20:	4611      	mov	r1, r2
 800fe22:	461a      	mov	r2, r3
 800fe24:	2306      	movs	r3, #6
 800fe26:	f7f5 f93d 	bl	80050a4 <IOExp_SetPIN_LOW>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port1, 0x07);
 800fe2a:	79fa      	ldrb	r2, [r7, #7]
 800fe2c:	78fb      	ldrb	r3, [r7, #3]
 800fe2e:	480f      	ldr	r0, [pc, #60]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe30:	4611      	mov	r1, r2
 800fe32:	461a      	mov	r2, r3
 800fe34:	2307      	movs	r3, #7
 800fe36:	f7f5 f935 	bl	80050a4 <IOExp_SetPIN_LOW>

	/* U48 I2C_1 */
	Io_Exp_address = 0x42;
 800fe3a:	2342      	movs	r3, #66	; 0x42
 800fe3c:	71fb      	strb	r3, [r7, #7]
	set_port0_pin_as_out_or_input =0XF7;
 800fe3e:	23f7      	movs	r3, #247	; 0xf7
 800fe40:	71bb      	strb	r3, [r7, #6]
	set_port1_pin_as_out_or_input = 0xFF;
 800fe42:	23ff      	movs	r3, #255	; 0xff
 800fe44:	717b      	strb	r3, [r7, #5]
	IOExp_Configure(&I2C_MASTER_1, Io_Exp_address, set_port0_pin_as_out_or_input , set_port1_pin_as_out_or_input);
 800fe46:	79f9      	ldrb	r1, [r7, #7]
 800fe48:	79ba      	ldrb	r2, [r7, #6]
 800fe4a:	797b      	ldrb	r3, [r7, #5]
 800fe4c:	4807      	ldr	r0, [pc, #28]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe4e:	f7f4 ffed 	bl	8004e2c <IOExp_Configure>
	IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, port0, 3);
 800fe52:	79fa      	ldrb	r2, [r7, #7]
 800fe54:	793b      	ldrb	r3, [r7, #4]
 800fe56:	4805      	ldr	r0, [pc, #20]	; (800fe6c <Io_Exp_Init+0x170>)
 800fe58:	4611      	mov	r1, r2
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	2303      	movs	r3, #3
 800fe5e:	f7f5 f921 	bl	80050a4 <IOExp_SetPIN_LOW>

}
 800fe62:	3708      	adds	r7, #8
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	1ffe8a5c 	.word	0x1ffe8a5c
 800fe6c:	1ffe8a68 	.word	0x1ffe8a68

0800fe70 <digital_io_setoutputlow>:


void digital_io_setoutputlow(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b084      	sub	sp, #16
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address;

	if((IO_EXP_PINName_handler ->IC_no == 24) || (IO_EXP_PINName_handler ->IC_no == 25))
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	781b      	ldrb	r3, [r3, #0]
 800fe7c:	2b18      	cmp	r3, #24
 800fe7e:	d003      	beq.n	800fe88 <digital_io_setoutputlow+0x18>
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	2b19      	cmp	r3, #25
 800fe86:	d110      	bne.n	800feaa <digital_io_setoutputlow+0x3a>
	{
		Io_Exp_address = 0x40;
 800fe88:	2340      	movs	r3, #64	; 0x40
 800fe8a:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 25)
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	781b      	ldrb	r3, [r3, #0]
 800fe90:	2b19      	cmp	r3, #25
 800fe92:	d101      	bne.n	800fe98 <digital_io_setoutputlow+0x28>
			Io_Exp_address = 0x42;
 800fe94:	2342      	movs	r3, #66	; 0x42
 800fe96:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_LOW(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	785a      	ldrb	r2, [r3, #1]
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	789b      	ldrb	r3, [r3, #2]
 800fea0:	7bf9      	ldrb	r1, [r7, #15]
 800fea2:	480f      	ldr	r0, [pc, #60]	; (800fee0 <digital_io_setoutputlow+0x70>)
 800fea4:	f7f5 f8fe 	bl	80050a4 <IOExp_SetPIN_LOW>
 800fea8:	e017      	b.n	800feda <digital_io_setoutputlow+0x6a>
	}
	else if((IO_EXP_PINName_handler ->IC_no == 38) || (IO_EXP_PINName_handler ->IC_no == 48))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	2b26      	cmp	r3, #38	; 0x26
 800feb0:	d003      	beq.n	800feba <digital_io_setoutputlow+0x4a>
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	2b30      	cmp	r3, #48	; 0x30
 800feb8:	d10f      	bne.n	800feda <digital_io_setoutputlow+0x6a>
	{
		Io_Exp_address = 0x40;
 800feba:	2340      	movs	r3, #64	; 0x40
 800febc:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 48)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	2b30      	cmp	r3, #48	; 0x30
 800fec4:	d101      	bne.n	800feca <digital_io_setoutputlow+0x5a>
			Io_Exp_address = 0x42;
 800fec6:	2342      	movs	r3, #66	; 0x42
 800fec8:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_LOW(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	785a      	ldrb	r2, [r3, #1]
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	789b      	ldrb	r3, [r3, #2]
 800fed2:	7bf9      	ldrb	r1, [r7, #15]
 800fed4:	4803      	ldr	r0, [pc, #12]	; (800fee4 <digital_io_setoutputlow+0x74>)
 800fed6:	f7f5 f8e5 	bl	80050a4 <IOExp_SetPIN_LOW>
	}

}
 800feda:	3710      	adds	r7, #16
 800fedc:	46bd      	mov	sp, r7
 800fede:	bd80      	pop	{r7, pc}
 800fee0:	1ffe8a5c 	.word	0x1ffe8a5c
 800fee4:	1ffe8a68 	.word	0x1ffe8a68

0800fee8 <digital_io_setoutputhigh>:


void digital_io_setoutputhigh(Io_Exp_PinMap_t *IO_EXP_PINName_handler)
{
 800fee8:	b580      	push	{r7, lr}
 800feea:	b084      	sub	sp, #16
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
	uint8_t Io_Exp_address;

	if((IO_EXP_PINName_handler ->IC_no == 24) || (IO_EXP_PINName_handler ->IC_no == 25))
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	781b      	ldrb	r3, [r3, #0]
 800fef4:	2b18      	cmp	r3, #24
 800fef6:	d003      	beq.n	800ff00 <digital_io_setoutputhigh+0x18>
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	781b      	ldrb	r3, [r3, #0]
 800fefc:	2b19      	cmp	r3, #25
 800fefe:	d110      	bne.n	800ff22 <digital_io_setoutputhigh+0x3a>
	{
		Io_Exp_address = 0x40;
 800ff00:	2340      	movs	r3, #64	; 0x40
 800ff02:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 25)
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	781b      	ldrb	r3, [r3, #0]
 800ff08:	2b19      	cmp	r3, #25
 800ff0a:	d101      	bne.n	800ff10 <digital_io_setoutputhigh+0x28>
			Io_Exp_address = 0x42;
 800ff0c:	2342      	movs	r3, #66	; 0x42
 800ff0e:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_HIGH(&I2C_MASTER_0, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	785a      	ldrb	r2, [r3, #1]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	789b      	ldrb	r3, [r3, #2]
 800ff18:	7bf9      	ldrb	r1, [r7, #15]
 800ff1a:	480f      	ldr	r0, [pc, #60]	; (800ff58 <digital_io_setoutputhigh+0x70>)
 800ff1c:	f7f5 f8a6 	bl	800506c <IOExp_SetPIN_HIGH>
 800ff20:	e017      	b.n	800ff52 <digital_io_setoutputhigh+0x6a>
	}
	else if((IO_EXP_PINName_handler ->IC_no == 38) || (IO_EXP_PINName_handler ->IC_no == 48))
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	781b      	ldrb	r3, [r3, #0]
 800ff26:	2b26      	cmp	r3, #38	; 0x26
 800ff28:	d003      	beq.n	800ff32 <digital_io_setoutputhigh+0x4a>
 800ff2a:	687b      	ldr	r3, [r7, #4]
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	2b30      	cmp	r3, #48	; 0x30
 800ff30:	d10f      	bne.n	800ff52 <digital_io_setoutputhigh+0x6a>
	{
		Io_Exp_address = 0x40;
 800ff32:	2340      	movs	r3, #64	; 0x40
 800ff34:	73fb      	strb	r3, [r7, #15]

		if(IO_EXP_PINName_handler ->IC_no == 48)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	781b      	ldrb	r3, [r3, #0]
 800ff3a:	2b30      	cmp	r3, #48	; 0x30
 800ff3c:	d101      	bne.n	800ff42 <digital_io_setoutputhigh+0x5a>
			Io_Exp_address = 0x42;
 800ff3e:	2342      	movs	r3, #66	; 0x42
 800ff40:	73fb      	strb	r3, [r7, #15]

		IOExp_SetPIN_HIGH(&I2C_MASTER_1, Io_Exp_address, IO_EXP_PINName_handler ->port, IO_EXP_PINName_handler ->pin);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	785a      	ldrb	r2, [r3, #1]
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	789b      	ldrb	r3, [r3, #2]
 800ff4a:	7bf9      	ldrb	r1, [r7, #15]
 800ff4c:	4803      	ldr	r0, [pc, #12]	; (800ff5c <digital_io_setoutputhigh+0x74>)
 800ff4e:	f7f5 f88d 	bl	800506c <IOExp_SetPIN_HIGH>
	}

}
 800ff52:	3710      	adds	r7, #16
 800ff54:	46bd      	mov	sp, r7
 800ff56:	bd80      	pop	{r7, pc}
 800ff58:	1ffe8a5c 	.word	0x1ffe8a5c
 800ff5c:	1ffe8a68 	.word	0x1ffe8a68

0800ff60 <Delay>:

void Delay(uint32_t delay_ms)
{
 800ff60:	b580      	push	{r7, lr}
 800ff62:	b084      	sub	sp, #16
 800ff64:	af00      	add	r7, sp, #0
 800ff66:	6078      	str	r0, [r7, #4]
	uint32_t delay_cnt;

	TIMER_ClearEvent(&TIMER_0);
 800ff68:	480f      	ldr	r0, [pc, #60]	; (800ffa8 <Delay+0x48>)
 800ff6a:	f7f6 fa5b 	bl	8006424 <TIMER_ClearEvent>

   delay_cnt = delay_ms * 100000;//TIMER_DELAY_MUL_FACTOR;
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	4a0e      	ldr	r2, [pc, #56]	; (800ffac <Delay+0x4c>)
 800ff72:	fb02 f303 	mul.w	r3, r2, r3
 800ff76:	60fb      	str	r3, [r7, #12]

   TIMER_SetTimeInterval(&TIMER_0,delay_cnt);
 800ff78:	480b      	ldr	r0, [pc, #44]	; (800ffa8 <Delay+0x48>)
 800ff7a:	68f9      	ldr	r1, [r7, #12]
 800ff7c:	f7f6 f930 	bl	80061e0 <TIMER_SetTimeInterval>

   TIMER_Start(&TIMER_0);
 800ff80:	4809      	ldr	r0, [pc, #36]	; (800ffa8 <Delay+0x48>)
 800ff82:	f7f6 f8b3 	bl	80060ec <TIMER_Start>

   while(!TIMER_GetInterruptStatus(&TIMER_0));
 800ff86:	bf00      	nop
 800ff88:	4807      	ldr	r0, [pc, #28]	; (800ffa8 <Delay+0x48>)
 800ff8a:	f7f6 fa25 	bl	80063d8 <TIMER_GetInterruptStatus>
 800ff8e:	4603      	mov	r3, r0
 800ff90:	f083 0301 	eor.w	r3, r3, #1
 800ff94:	b2db      	uxtb	r3, r3
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1f6      	bne.n	800ff88 <Delay+0x28>

   TIMER_Stop(&TIMER_0);
 800ff9a:	4803      	ldr	r0, [pc, #12]	; (800ffa8 <Delay+0x48>)
 800ff9c:	f7f6 f8ce 	bl	800613c <TIMER_Stop>

}
 800ffa0:	3710      	adds	r7, #16
 800ffa2:	46bd      	mov	sp, r7
 800ffa4:	bd80      	pop	{r7, pc}
 800ffa6:	bf00      	nop
 800ffa8:	1ffe8850 	.word	0x1ffe8850
 800ffac:	000186a0 	.word	0x000186a0

0800ffb0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b083      	sub	sp, #12
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ffba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	db10      	blt.n	800ffe4 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ffc2:	490b      	ldr	r1, [pc, #44]	; (800fff0 <__NVIC_DisableIRQ+0x40>)
 800ffc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ffc8:	095b      	lsrs	r3, r3, #5
 800ffca:	79fa      	ldrb	r2, [r7, #7]
 800ffcc:	f002 021f 	and.w	r2, r2, #31
 800ffd0:	2001      	movs	r0, #1
 800ffd2:	fa00 f202 	lsl.w	r2, r0, r2
 800ffd6:	3320      	adds	r3, #32
 800ffd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800ffdc:	f3bf 8f4f 	dsb	sy
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800ffe0:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800ffe4:	370c      	adds	r7, #12
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffec:	4770      	bx	lr
 800ffee:	bf00      	nop
 800fff0:	e000e100 	.word	0xe000e100

0800fff4 <XMC_GPIO_SetOutputHigh>:
 * Register Pn_OMR is virtual and does not contain any flip-flop. A read action delivers the value of 0.
 *
 */

__STATIC_INLINE void XMC_GPIO_SetOutputHigh(XMC_GPIO_PORT_t *const port, const uint8_t pin)
{
 800fff4:	b480      	push	{r7}
 800fff6:	b083      	sub	sp, #12
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	70fb      	strb	r3, [r7, #3]
  XMC_ASSERT("XMC_GPIO_SetOutputHigh: Invalid port", XMC_GPIO_CHECK_OUTPUT_PORT(port));

  port->OMR = (uint32_t)0x1U << pin;
 8010000:	78fb      	ldrb	r3, [r7, #3]
 8010002:	2201      	movs	r2, #1
 8010004:	409a      	lsls	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	605a      	str	r2, [r3, #4]
}
 801000a:	370c      	adds	r7, #12
 801000c:	46bd      	mov	sp, r7
 801000e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010012:	4770      	bx	lr

08010014 <DIGITAL_IO_SetOutputHigh>:
* }
*  @endcode
*/

__STATIC_INLINE void DIGITAL_IO_SetOutputHigh(const DIGITAL_IO_t *const handler)
{
 8010014:	b580      	push	{r7, lr}
 8010016:	b082      	sub	sp, #8
 8010018:	af00      	add	r7, sp, #0
 801001a:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("DIGITAL_IO_SetOutputHigh: handler null pointer", handler != NULL);
  XMC_GPIO_SetOutputHigh(handler->gpio_port, handler->gpio_pin);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	7c1b      	ldrb	r3, [r3, #16]
 8010024:	4610      	mov	r0, r2
 8010026:	4619      	mov	r1, r3
 8010028:	f7ff ffe4 	bl	800fff4 <XMC_GPIO_SetOutputHigh>
}
 801002c:	3708      	adds	r7, #8
 801002e:	46bd      	mov	sp, r7
 8010030:	bd80      	pop	{r7, pc}
 8010032:	bf00      	nop

08010034 <XMC_WDT_Start>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Init(), XMC_WDT_Stop()
 */
__STATIC_INLINE void XMC_WDT_Start(void)
{
 8010034:	b480      	push	{r7}
 8010036:	af00      	add	r7, sp, #0
  WDT->CTR |= (uint32_t)WDT_CTR_ENB_Msk;
 8010038:	4a04      	ldr	r2, [pc, #16]	; (801004c <XMC_WDT_Start+0x18>)
 801003a:	4b04      	ldr	r3, [pc, #16]	; (801004c <XMC_WDT_Start+0x18>)
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	f043 0301 	orr.w	r3, r3, #1
 8010042:	6053      	str	r3, [r2, #4]
}
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr
 801004c:	50008000 	.word	0x50008000

08010050 <XMC_WDT_Service>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_GetCounter(), XMC_WDT_SetWindowBounds(), XMC_WDT_SetServicePulseWidth()
 */
__STATIC_INLINE void XMC_WDT_Service(void)
{
 8010050:	b480      	push	{r7}
 8010052:	af00      	add	r7, sp, #0
  WDT->SRV = XMC_WDT_MAGIC_WORD;
 8010054:	4b03      	ldr	r3, [pc, #12]	; (8010064 <XMC_WDT_Service+0x14>)
 8010056:	4a04      	ldr	r2, [pc, #16]	; (8010068 <XMC_WDT_Service+0x18>)
 8010058:	609a      	str	r2, [r3, #8]
}
 801005a:	46bd      	mov	sp, r7
 801005c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010060:	4770      	bx	lr
 8010062:	bf00      	nop
 8010064:	50008000 	.word	0x50008000
 8010068:	abadcafe 	.word	0xabadcafe

0801006c <XMC_WDT_ClearAlarm>:
 *
 * \par<b>Related APIs:</b><BR>
 * XMC_WDT_Service(), XMC_WDT_SetMode()
 */
__STATIC_INLINE void XMC_WDT_ClearAlarm(void)
{
 801006c:	b480      	push	{r7}
 801006e:	af00      	add	r7, sp, #0
  WDT->WDTCLR = WDT_WDTCLR_ALMC_Msk;
 8010070:	4b03      	ldr	r3, [pc, #12]	; (8010080 <XMC_WDT_ClearAlarm+0x14>)
 8010072:	2201      	movs	r2, #1
 8010074:	61da      	str	r2, [r3, #28]
}
 8010076:	46bd      	mov	sp, r7
 8010078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801007c:	4770      	bx	lr
 801007e:	bf00      	nop
 8010080:	50008000 	.word	0x50008000

08010084 <WATCHDOG_Start>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Start(void)
{
 8010084:	b580      	push	{r7, lr}
 8010086:	af00      	add	r7, sp, #0
  XMC_WDT_Start();
 8010088:	f7ff ffd4 	bl	8010034 <XMC_WDT_Start>
}
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop

08010090 <WATCHDOG_Service>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_Service(void)
{
 8010090:	b580      	push	{r7, lr}
 8010092:	af00      	add	r7, sp, #0
  XMC_WDT_Service();
 8010094:	f7ff ffdc 	bl	8010050 <XMC_WDT_Service>
}
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop

0801009c <WATCHDOG_ClearAlarm>:
 * }
 *
 * @endcode<BR> </p>
 */
__STATIC_INLINE void WATCHDOG_ClearAlarm(void)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	af00      	add	r7, sp, #0
  XMC_WDT_ClearAlarm();
 80100a0:	f7ff ffe4 	bl	801006c <XMC_WDT_ClearAlarm>
}
 80100a4:	bd80      	pop	{r7, pc}
 80100a6:	bf00      	nop

080100a8 <INTERRUPT_Disable>:
 *    return 0;
 *  }
 * @endcode<BR> </p>
 */
__STATIC_INLINE void INTERRUPT_Disable(const INTERRUPT_t *const handler)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
  XMC_ASSERT("Handler NULL", (handler != NULL));
  NVIC_DisableIRQ(handler->node);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	781b      	ldrb	r3, [r3, #0]
 80100b4:	b25b      	sxtb	r3, r3
 80100b6:	4618      	mov	r0, r3
 80100b8:	f7ff ff7a 	bl	800ffb0 <__NVIC_DisableIRQ>
}
 80100bc:	3708      	adds	r7, #8
 80100be:	46bd      	mov	sp, r7
 80100c0:	bd80      	pop	{r7, pc}
 80100c2:	bf00      	nop

080100c4 <main>:
void reset_on(void);

uint8_t CState = 4, PreState = 0;

int main(void)
{
 80100c4:	b580      	push	{r7, lr}
 80100c6:	b082      	sub	sp, #8
 80100c8:	af00      	add	r7, sp, #0
	en_responseRetCodes_t len_retStatus = E_RET_INPROGRESS;
 80100ca:	2304      	movs	r3, #4
 80100cc:	71fb      	strb	r3, [r7, #7]
	uint8_t super_count = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	71bb      	strb	r3, [r7, #6]
	//jump :;
  DAVE_STATUS_t status;

  status = DAVE_Init();           /* Initialization of DAVE APPs  */
 80100d2:	f7f8 fdb3 	bl	8008c3c <DAVE_Init>
 80100d6:	4603      	mov	r3, r0
 80100d8:	717b      	strb	r3, [r7, #5]

  if (status != DAVE_STATUS_SUCCESS)
 80100da:	797b      	ldrb	r3, [r7, #5]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d003      	beq.n	80100e8 <main+0x24>
  {
    /* Placeholder for error handler code. The while loop below can be replaced with an user error handler. */
    XMC_DEBUG("DAVE APPs initialization failed\n");
 80100e0:	481c      	ldr	r0, [pc, #112]	; (8010154 <main+0x90>)
 80100e2:	f001 fded 	bl	8011cc0 <puts>

    while(1U)
    {

    }
 80100e6:	e7fe      	b.n	80100e6 <main+0x22>
  }

  /* Placeholder for user application code. The while loop below can be replaced with user application code. */

	/*  enable here all the relays need to be HIGH at startup  */
	INTERRUPT_Disable(&INTERRUPT_0);
 80100e8:	481b      	ldr	r0, [pc, #108]	; (8010158 <main+0x94>)
 80100ea:	f7ff ffdd 	bl	80100a8 <INTERRUPT_Disable>
	VCU_init_on();
 80100ee:	f000 f837 	bl	8010160 <VCU_init_on>
	reset_on();
 80100f2:	f000 f88f 	bl	8010214 <reset_on>
	//initialize_sd_card_and_transmit_cid();
	len_retStatus = mod_open4gModPort();
 80100f6:	f7fb fc9d 	bl	800ba34 <mod_open4gModPort>
 80100fa:	4603      	mov	r3, r0
 80100fc:	71fb      	strb	r3, [r7, #7]
	if (E_RET_SUCCESS == len_retStatus) {
 80100fe:	79fb      	ldrb	r3, [r7, #7]
 8010100:	2b00      	cmp	r3, #0
 8010102:	d10c      	bne.n	801011e <main+0x5a>
		len_retStatus = tm_setTimerCount(TM_1MS_TIMER_VAL);
 8010104:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010108:	f7f0 f90c 	bl	8000324 <tm_setTimerCount>
 801010c:	4603      	mov	r3, r0
 801010e:	71fb      	strb	r3, [r7, #7]
		if (E_RET_SUCCESS == len_retStatus) {
 8010110:	79fb      	ldrb	r3, [r7, #7]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d103      	bne.n	801011e <main+0x5a>
			len_retStatus = tm_startTimer();
 8010116:	f7f0 f925 	bl	8000364 <tm_startTimer>
 801011a:	4603      	mov	r3, r0
 801011c:	71fb      	strb	r3, [r7, #7]
			if (E_RET_SUCCESS == len_retStatus) {
			}
		}
	}

	mod_enable4gModule();
 801011e:	f7fb fc53 	bl	800b9c8 <mod_enable4gModule>

	while (1U) {
		//SuperLooptime_Start();

	  /* Updating the inputs*/
	  InputCapture();
 8010122:	f000 f831 	bl	8010188 <InputCapture>


	  /* processing all inputs */
	  Process_Inputs();
 8010126:	f000 f84d 	bl	80101c4 <Process_Inputs>

		/* action loop , taking the action */
	  Vcu_OutPut();
 801012a:	f000 f85f 	bl	80101ec <Vcu_OutPut>

		//SuperLooptime_End();

		//SuperLooptime_Start();

		mod_receiveRsp();
 801012e:	f7fb fc8f 	bl	800ba50 <mod_receiveRsp>
		if(false == gb_isMqttConnected)
 8010132:	4b0a      	ldr	r3, [pc, #40]	; (801015c <main+0x98>)
 8010134:	781b      	ldrb	r3, [r3, #0]
 8010136:	f083 0301 	eor.w	r3, r3, #1
 801013a:	b2db      	uxtb	r3, r3
 801013c:	2b00      	cmp	r3, #0
 801013e:	d002      	beq.n	8010146 <main+0x82>
		{
			mod_4gHandler();
 8010140:	f7fe f830 	bl	800e1a4 <mod_4gHandler>
 8010144:	e005      	b.n	8010152 <main+0x8e>
		}
		else if(true == gb_isMqttConnected)
 8010146:	4b05      	ldr	r3, [pc, #20]	; (801015c <main+0x98>)
 8010148:	781b      	ldrb	r3, [r3, #0]
 801014a:	2b00      	cmp	r3, #0
 801014c:	d001      	beq.n	8010152 <main+0x8e>
		{
//			mod_4gProcess();
			mod_pub10sPackExtractGps();
 801014e:	f7fe f981 	bl	800e454 <mod_pub10sPackExtractGps>
	 }
	  else if((!DIGITAL_IO_GetInput(&IGNI_POS1_IN_D)))
	  {
		  super_count = 0;
	  }*/
  }
 8010152:	e7e6      	b.n	8010122 <main+0x5e>
 8010154:	0801419c 	.word	0x0801419c
 8010158:	08013188 	.word	0x08013188
 801015c:	1fff5234 	.word	0x1fff5234

08010160 <VCU_init_on>:
}

void VCU_init_on(void) {
 8010160:	b580      	push	{r7, lr}
 8010162:	af00      	add	r7, sp, #0
	/* enable here all the relays need to be HIGH at startup */

		//set_PIN(&COMM_PWR_ENB_D, HIGH);

		/* enable common power to IO */
		DIGITAL_IO_SetOutputHigh(&COMM_3V3_PWR_EN);
 8010164:	4805      	ldr	r0, [pc, #20]	; (801017c <VCU_init_on+0x1c>)
 8010166:	f7ff ff55 	bl	8010014 <DIGITAL_IO_SetOutputHigh>

		/* 3v3 enable */
		DIGITAL_IO_SetOutputHigh(&INPUTS_3V3_PWR_EN);
 801016a:	4805      	ldr	r0, [pc, #20]	; (8010180 <VCU_init_on+0x20>)
 801016c:	f7ff ff52 	bl	8010014 <DIGITAL_IO_SetOutputHigh>


		DIGITAL_IO_SetOutputHigh(&SENSOR_3V3_PWR_EN);
 8010170:	4804      	ldr	r0, [pc, #16]	; (8010184 <VCU_init_on+0x24>)
 8010172:	f7ff ff4f 	bl	8010014 <DIGITAL_IO_SetOutputHigh>

	/* comm initialization */
	Io_Exp_Init();
 8010176:	f7ff fdc1 	bl	800fcfc <Io_Exp_Init>

}
 801017a:	bd80      	pop	{r7, pc}
 801017c:	08013584 	.word	0x08013584
 8010180:	08013570 	.word	0x08013570
 8010184:	08013598 	.word	0x08013598

08010188 <InputCapture>:

void InputCapture(void) {
 8010188:	b580      	push	{r7, lr}
 801018a:	af00      	add	r7, sp, #0
	uart_debugg(
 801018c:	4809      	ldr	r0, [pc, #36]	; (80101b4 <InputCapture+0x2c>)
 801018e:	f7ff fdab 	bl	800fce8 <uart_debugg>
			"************************in input capture************************\n");
	CState = PreState = 1;
 8010192:	4b09      	ldr	r3, [pc, #36]	; (80101b8 <InputCapture+0x30>)
 8010194:	2201      	movs	r2, #1
 8010196:	701a      	strb	r2, [r3, #0]
 8010198:	4b07      	ldr	r3, [pc, #28]	; (80101b8 <InputCapture+0x30>)
 801019a:	781a      	ldrb	r2, [r3, #0]
 801019c:	4b07      	ldr	r3, [pc, #28]	; (80101bc <InputCapture+0x34>)
 801019e:	701a      	strb	r2, [r3, #0]
	/* Updating the inputs */
	Input_Capture();
 80101a0:	f7f5 f83a 	bl	8005218 <Input_Capture>
	PreState = 0;
 80101a4:	4b04      	ldr	r3, [pc, #16]	; (80101b8 <InputCapture+0x30>)
 80101a6:	2200      	movs	r2, #0
 80101a8:	701a      	strb	r2, [r3, #0]
	uart_debugg("************************exit input capture************************\n");
 80101aa:	4805      	ldr	r0, [pc, #20]	; (80101c0 <InputCapture+0x38>)
 80101ac:	f7ff fd9c 	bl	800fce8 <uart_debugg>
}
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	080141bc 	.word	0x080141bc
 80101b8:	1fff479b 	.word	0x1fff479b
 80101bc:	1fff42cc 	.word	0x1fff42cc
 80101c0:	08014200 	.word	0x08014200

080101c4 <Process_Inputs>:

void Process_Inputs(void)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	af00      	add	r7, sp, #0
	uart_debugg("************************in process input************************\n");
 80101c8:	4805      	ldr	r0, [pc, #20]	; (80101e0 <Process_Inputs+0x1c>)
 80101ca:	f7ff fd8d 	bl	800fce8 <uart_debugg>
	CState = 2;
 80101ce:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <Process_Inputs+0x20>)
 80101d0:	2202      	movs	r2, #2
 80101d2:	701a      	strb	r2, [r3, #0]
	/* Updating the outputs */
	Process_VcuOutputs_Update();
 80101d4:	f7f0 fc06 	bl	80009e4 <Process_VcuOutputs_Update>
	uart_debugg("***********************exit process input**************************\n");
 80101d8:	4803      	ldr	r0, [pc, #12]	; (80101e8 <Process_Inputs+0x24>)
 80101da:	f7ff fd85 	bl	800fce8 <uart_debugg>
}
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	08014244 	.word	0x08014244
 80101e4:	1fff42cc 	.word	0x1fff42cc
 80101e8:	08014288 	.word	0x08014288

080101ec <Vcu_OutPut>:

void Vcu_OutPut(void)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	af00      	add	r7, sp, #0
	uart_debugg("***********************in vcu output*****************************\n");
 80101f0:	4805      	ldr	r0, [pc, #20]	; (8010208 <Vcu_OutPut+0x1c>)
 80101f2:	f7ff fd79 	bl	800fce8 <uart_debugg>
	CState = 3;
 80101f6:	4b05      	ldr	r3, [pc, #20]	; (801020c <Vcu_OutPut+0x20>)
 80101f8:	2203      	movs	r2, #3
 80101fa:	701a      	strb	r2, [r3, #0]
	/* Taking the action */
	OutPutAction_Update();
 80101fc:	f7f1 fd46 	bl	8001c8c <OutPutAction_Update>
	uart_debugg("************************exit vcu output******************************\n");
 8010200:	4803      	ldr	r0, [pc, #12]	; (8010210 <Vcu_OutPut+0x24>)
 8010202:	f7ff fd71 	bl	800fce8 <uart_debugg>
}
 8010206:	bd80      	pop	{r7, pc}
 8010208:	080142d0 	.word	0x080142d0
 801020c:	1fff42cc 	.word	0x1fff42cc
 8010210:	08014314 	.word	0x08014314

08010214 <reset_on>:

void reset_on(void)
{
 8010214:	b580      	push	{r7, lr}
 8010216:	af00      	add	r7, sp, #0
	//WATCHDOG_Stop();
	Delay(100);
 8010218:	2064      	movs	r0, #100	; 0x64
 801021a:	f7ff fea1 	bl	800ff60 <Delay>
	WATCHDOG_Start();
 801021e:	f7ff ff31 	bl	8010084 <WATCHDOG_Start>
}
 8010222:	bd80      	pop	{r7, pc}

08010224 <NMI_Handler>:

void NMI_Handler(void)
{
 8010224:	b580      	push	{r7, lr}
 8010226:	af00      	add	r7, sp, #0
	//if(!PreState)
	{
		//PreState = CState;
	//uart_debugg("in watchdog");
	WATCHDOG_ClearAlarm();
 8010228:	f7ff ff38 	bl	801009c <WATCHDOG_ClearAlarm>
	//XMC_SCU_cle
	XMC_SCU_INTERRUPT_ClearEventStatus((XMC_SCU_INTERRUPT_EVENT_t)XMC_SCU_INTERRUPT_EVENT_WDT_WARN);
 801022c:	2001      	movs	r0, #1
 801022e:	f7f1 fff7 	bl	8002220 <XMC_SCU_INTERRUPT_ClearEventStatus>
	WATCHDOG_Service();
 8010232:	f7ff ff2d 	bl	8010090 <WATCHDOG_Service>
	//DIGITAL_IO_SetOutputLow(&CABIN_LIGHT_OUT_D);
	//uart_debugg("exit watchdog");
	}
}
 8010236:	bd80      	pop	{r7, pc}

08010238 <log>:
 8010238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801023c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8010330 <log+0xf8>
 8010240:	b08b      	sub	sp, #44	; 0x2c
 8010242:	4606      	mov	r6, r0
 8010244:	460f      	mov	r7, r1
 8010246:	f000 f877 	bl	8010338 <__ieee754_log>
 801024a:	f998 3000 	ldrsb.w	r3, [r8]
 801024e:	3301      	adds	r3, #1
 8010250:	4604      	mov	r4, r0
 8010252:	460d      	mov	r5, r1
 8010254:	d00b      	beq.n	801026e <log+0x36>
 8010256:	4630      	mov	r0, r6
 8010258:	4639      	mov	r1, r7
 801025a:	f000 fa55 	bl	8010708 <__fpclassifyd>
 801025e:	b130      	cbz	r0, 801026e <log+0x36>
 8010260:	4630      	mov	r0, r6
 8010262:	4639      	mov	r1, r7
 8010264:	2200      	movs	r2, #0
 8010266:	2300      	movs	r3, #0
 8010268:	f000 feca 	bl	8011000 <__aeabi_dcmpgt>
 801026c:	b120      	cbz	r0, 8010278 <log+0x40>
 801026e:	4620      	mov	r0, r4
 8010270:	4629      	mov	r1, r5
 8010272:	b00b      	add	sp, #44	; 0x2c
 8010274:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010278:	f898 4000 	ldrb.w	r4, [r8]
 801027c:	4b29      	ldr	r3, [pc, #164]	; (8010324 <log+0xec>)
 801027e:	9008      	str	r0, [sp, #32]
 8010280:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8010284:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010288:	9301      	str	r3, [sp, #4]
 801028a:	b99c      	cbnz	r4, 80102b4 <log+0x7c>
 801028c:	4d26      	ldr	r5, [pc, #152]	; (8010328 <log+0xf0>)
 801028e:	f04f 4460 	mov.w	r4, #3758096384	; 0xe0000000
 8010292:	4630      	mov	r0, r6
 8010294:	4639      	mov	r1, r7
 8010296:	2200      	movs	r2, #0
 8010298:	2300      	movs	r3, #0
 801029a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 801029e:	f000 fe87 	bl	8010fb0 <__aeabi_dcmpeq>
 80102a2:	2800      	cmp	r0, #0
 80102a4:	d135      	bne.n	8010312 <log+0xda>
 80102a6:	2301      	movs	r3, #1
 80102a8:	9300      	str	r3, [sp, #0]
 80102aa:	4668      	mov	r0, sp
 80102ac:	f000 fa58 	bl	8010760 <matherr>
 80102b0:	b9a8      	cbnz	r0, 80102de <log+0xa6>
 80102b2:	e010      	b.n	80102d6 <log+0x9e>
 80102b4:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8010334 <log+0xfc>
 80102b8:	f04f 0800 	mov.w	r8, #0
 80102bc:	4630      	mov	r0, r6
 80102be:	4639      	mov	r1, r7
 80102c0:	2200      	movs	r2, #0
 80102c2:	2300      	movs	r3, #0
 80102c4:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80102c8:	f000 fe72 	bl	8010fb0 <__aeabi_dcmpeq>
 80102cc:	b998      	cbnz	r0, 80102f6 <log+0xbe>
 80102ce:	2301      	movs	r3, #1
 80102d0:	2c02      	cmp	r4, #2
 80102d2:	9300      	str	r3, [sp, #0]
 80102d4:	d1e9      	bne.n	80102aa <log+0x72>
 80102d6:	f001 fa05 	bl	80116e4 <__errno>
 80102da:	2321      	movs	r3, #33	; 0x21
 80102dc:	6003      	str	r3, [r0, #0]
 80102de:	4813      	ldr	r0, [pc, #76]	; (801032c <log+0xf4>)
 80102e0:	f000 fa40 	bl	8010764 <nan>
 80102e4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80102e8:	9b08      	ldr	r3, [sp, #32]
 80102ea:	b9ab      	cbnz	r3, 8010318 <log+0xe0>
 80102ec:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80102f0:	b00b      	add	sp, #44	; 0x2c
 80102f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80102f6:	2302      	movs	r3, #2
 80102f8:	429c      	cmp	r4, r3
 80102fa:	9300      	str	r3, [sp, #0]
 80102fc:	d004      	beq.n	8010308 <log+0xd0>
 80102fe:	4668      	mov	r0, sp
 8010300:	f000 fa2e 	bl	8010760 <matherr>
 8010304:	2800      	cmp	r0, #0
 8010306:	d1ef      	bne.n	80102e8 <log+0xb0>
 8010308:	f001 f9ec 	bl	80116e4 <__errno>
 801030c:	2322      	movs	r3, #34	; 0x22
 801030e:	6003      	str	r3, [r0, #0]
 8010310:	e7ea      	b.n	80102e8 <log+0xb0>
 8010312:	2302      	movs	r3, #2
 8010314:	9300      	str	r3, [sp, #0]
 8010316:	e7f2      	b.n	80102fe <log+0xc6>
 8010318:	f001 f9e4 	bl	80116e4 <__errno>
 801031c:	9b08      	ldr	r3, [sp, #32]
 801031e:	6003      	str	r3, [r0, #0]
 8010320:	e7e4      	b.n	80102ec <log+0xb4>
 8010322:	bf00      	nop
 8010324:	0801435c 	.word	0x0801435c
 8010328:	c7efffff 	.word	0xc7efffff
 801032c:	08014360 	.word	0x08014360
 8010330:	1fff42cd 	.word	0x1fff42cd
 8010334:	fff00000 	.word	0xfff00000

08010338 <__ieee754_log>:
 8010338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801033c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010340:	b085      	sub	sp, #20
 8010342:	4606      	mov	r6, r0
 8010344:	460f      	mov	r7, r1
 8010346:	460b      	mov	r3, r1
 8010348:	da5a      	bge.n	8010400 <__ieee754_log+0xc8>
 801034a:	4602      	mov	r2, r0
 801034c:	f021 4400 	bic.w	r4, r1, #2147483648	; 0x80000000
 8010350:	4322      	orrs	r2, r4
 8010352:	f000 80f6 	beq.w	8010542 <__ieee754_log+0x20a>
 8010356:	2900      	cmp	r1, #0
 8010358:	f2c0 8172 	blt.w	8010640 <__ieee754_log+0x308>
 801035c:	2200      	movs	r2, #0
 801035e:	4bde      	ldr	r3, [pc, #888]	; (80106d8 <__ieee754_log+0x3a0>)
 8010360:	f000 fbbe 	bl	8010ae0 <__aeabi_dmul>
 8010364:	460b      	mov	r3, r1
 8010366:	460f      	mov	r7, r1
 8010368:	49dc      	ldr	r1, [pc, #880]	; (80106dc <__ieee754_log+0x3a4>)
 801036a:	428b      	cmp	r3, r1
 801036c:	4606      	mov	r6, r0
 801036e:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8010372:	dc4a      	bgt.n	801040a <__ieee754_log+0xd2>
 8010374:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8010378:	f505 2415 	add.w	r4, r5, #610304	; 0x95000
 801037c:	f604 7464 	addw	r4, r4, #3940	; 0xf64
 8010380:	f404 1e80 	and.w	lr, r4, #1048576	; 0x100000
 8010384:	f08e 517f 	eor.w	r1, lr, #1069547520	; 0x3fc00000
 8010388:	f481 1140 	eor.w	r1, r1, #3145728	; 0x300000
 801038c:	151b      	asrs	r3, r3, #20
 801038e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010392:	ea41 0705 	orr.w	r7, r1, r5
 8010396:	189c      	adds	r4, r3, r2
 8010398:	4630      	mov	r0, r6
 801039a:	2200      	movs	r2, #0
 801039c:	4bd0      	ldr	r3, [pc, #832]	; (80106e0 <__ieee754_log+0x3a8>)
 801039e:	4639      	mov	r1, r7
 80103a0:	eb04 541e 	add.w	r4, r4, lr, lsr #20
 80103a4:	f000 f9e8 	bl	8010778 <__aeabi_dsub>
 80103a8:	1cab      	adds	r3, r5, #2
 80103aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80103ae:	2b02      	cmp	r3, #2
 80103b0:	4682      	mov	sl, r0
 80103b2:	468b      	mov	fp, r1
 80103b4:	f04f 0200 	mov.w	r2, #0
 80103b8:	dc30      	bgt.n	801041c <__ieee754_log+0xe4>
 80103ba:	2300      	movs	r3, #0
 80103bc:	f000 fdf8 	bl	8010fb0 <__aeabi_dcmpeq>
 80103c0:	2800      	cmp	r0, #0
 80103c2:	f000 80c7 	beq.w	8010554 <__ieee754_log+0x21c>
 80103c6:	2c00      	cmp	r4, #0
 80103c8:	f000 8143 	beq.w	8010652 <__ieee754_log+0x31a>
 80103cc:	4620      	mov	r0, r4
 80103ce:	f000 fb21 	bl	8010a14 <__aeabi_i2d>
 80103d2:	a3ad      	add	r3, pc, #692	; (adr r3, 8010688 <__ieee754_log+0x350>)
 80103d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103d8:	4606      	mov	r6, r0
 80103da:	460f      	mov	r7, r1
 80103dc:	f000 fb80 	bl	8010ae0 <__aeabi_dmul>
 80103e0:	a3ab      	add	r3, pc, #684	; (adr r3, 8010690 <__ieee754_log+0x358>)
 80103e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103e6:	4604      	mov	r4, r0
 80103e8:	460d      	mov	r5, r1
 80103ea:	4630      	mov	r0, r6
 80103ec:	4639      	mov	r1, r7
 80103ee:	f000 fb77 	bl	8010ae0 <__aeabi_dmul>
 80103f2:	4602      	mov	r2, r0
 80103f4:	460b      	mov	r3, r1
 80103f6:	4620      	mov	r0, r4
 80103f8:	4629      	mov	r1, r5
 80103fa:	f000 f9bf 	bl	801077c <__adddf3>
 80103fe:	e00a      	b.n	8010416 <__ieee754_log+0xde>
 8010400:	49b6      	ldr	r1, [pc, #728]	; (80106dc <__ieee754_log+0x3a4>)
 8010402:	428b      	cmp	r3, r1
 8010404:	f04f 0200 	mov.w	r2, #0
 8010408:	ddb4      	ble.n	8010374 <__ieee754_log+0x3c>
 801040a:	4630      	mov	r0, r6
 801040c:	4639      	mov	r1, r7
 801040e:	4632      	mov	r2, r6
 8010410:	463b      	mov	r3, r7
 8010412:	f000 f9b3 	bl	801077c <__adddf3>
 8010416:	b005      	add	sp, #20
 8010418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801041c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010420:	f000 f9ac 	bl	801077c <__adddf3>
 8010424:	4602      	mov	r2, r0
 8010426:	460b      	mov	r3, r1
 8010428:	4650      	mov	r0, sl
 801042a:	4659      	mov	r1, fp
 801042c:	f000 fc82 	bl	8010d34 <__aeabi_ddiv>
 8010430:	4606      	mov	r6, r0
 8010432:	460f      	mov	r7, r1
 8010434:	4620      	mov	r0, r4
 8010436:	e9cd 6700 	strd	r6, r7, [sp]
 801043a:	f000 faeb 	bl	8010a14 <__aeabi_i2d>
 801043e:	4632      	mov	r2, r6
 8010440:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010444:	463b      	mov	r3, r7
 8010446:	4630      	mov	r0, r6
 8010448:	4639      	mov	r1, r7
 801044a:	f000 fb49 	bl	8010ae0 <__aeabi_dmul>
 801044e:	4602      	mov	r2, r0
 8010450:	460b      	mov	r3, r1
 8010452:	4680      	mov	r8, r0
 8010454:	4689      	mov	r9, r1
 8010456:	f000 fb43 	bl	8010ae0 <__aeabi_dmul>
 801045a:	a38f      	add	r3, pc, #572	; (adr r3, 8010698 <__ieee754_log+0x360>)
 801045c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010460:	4606      	mov	r6, r0
 8010462:	460f      	mov	r7, r1
 8010464:	f000 fb3c 	bl	8010ae0 <__aeabi_dmul>
 8010468:	a38d      	add	r3, pc, #564	; (adr r3, 80106a0 <__ieee754_log+0x368>)
 801046a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801046e:	f000 f985 	bl	801077c <__adddf3>
 8010472:	4632      	mov	r2, r6
 8010474:	463b      	mov	r3, r7
 8010476:	f000 fb33 	bl	8010ae0 <__aeabi_dmul>
 801047a:	a38b      	add	r3, pc, #556	; (adr r3, 80106a8 <__ieee754_log+0x370>)
 801047c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010480:	f000 f97c 	bl	801077c <__adddf3>
 8010484:	4632      	mov	r2, r6
 8010486:	463b      	mov	r3, r7
 8010488:	f000 fb2a 	bl	8010ae0 <__aeabi_dmul>
 801048c:	a388      	add	r3, pc, #544	; (adr r3, 80106b0 <__ieee754_log+0x378>)
 801048e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010492:	f000 f973 	bl	801077c <__adddf3>
 8010496:	4642      	mov	r2, r8
 8010498:	464b      	mov	r3, r9
 801049a:	f000 fb21 	bl	8010ae0 <__aeabi_dmul>
 801049e:	a386      	add	r3, pc, #536	; (adr r3, 80106b8 <__ieee754_log+0x380>)
 80104a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a4:	4680      	mov	r8, r0
 80104a6:	4689      	mov	r9, r1
 80104a8:	4630      	mov	r0, r6
 80104aa:	4639      	mov	r1, r7
 80104ac:	f000 fb18 	bl	8010ae0 <__aeabi_dmul>
 80104b0:	a383      	add	r3, pc, #524	; (adr r3, 80106c0 <__ieee754_log+0x388>)
 80104b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104b6:	f000 f961 	bl	801077c <__adddf3>
 80104ba:	4632      	mov	r2, r6
 80104bc:	463b      	mov	r3, r7
 80104be:	f000 fb0f 	bl	8010ae0 <__aeabi_dmul>
 80104c2:	a381      	add	r3, pc, #516	; (adr r3, 80106c8 <__ieee754_log+0x390>)
 80104c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104c8:	f000 f958 	bl	801077c <__adddf3>
 80104cc:	4632      	mov	r2, r6
 80104ce:	463b      	mov	r3, r7
 80104d0:	f000 fb06 	bl	8010ae0 <__aeabi_dmul>
 80104d4:	460b      	mov	r3, r1
 80104d6:	4602      	mov	r2, r0
 80104d8:	4649      	mov	r1, r9
 80104da:	4640      	mov	r0, r8
 80104dc:	f000 f94e 	bl	801077c <__adddf3>
 80104e0:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80104e4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80104e8:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80104ec:	3551      	adds	r5, #81	; 0x51
 80104ee:	431d      	orrs	r5, r3
 80104f0:	2d00      	cmp	r5, #0
 80104f2:	4606      	mov	r6, r0
 80104f4:	460f      	mov	r7, r1
 80104f6:	dd53      	ble.n	80105a0 <__ieee754_log+0x268>
 80104f8:	2200      	movs	r2, #0
 80104fa:	4b7a      	ldr	r3, [pc, #488]	; (80106e4 <__ieee754_log+0x3ac>)
 80104fc:	4650      	mov	r0, sl
 80104fe:	4659      	mov	r1, fp
 8010500:	f000 faee 	bl	8010ae0 <__aeabi_dmul>
 8010504:	4652      	mov	r2, sl
 8010506:	465b      	mov	r3, fp
 8010508:	f000 faea 	bl	8010ae0 <__aeabi_dmul>
 801050c:	4680      	mov	r8, r0
 801050e:	4689      	mov	r9, r1
 8010510:	2c00      	cmp	r4, #0
 8010512:	d160      	bne.n	80105d6 <__ieee754_log+0x29e>
 8010514:	4632      	mov	r2, r6
 8010516:	463b      	mov	r3, r7
 8010518:	f000 f930 	bl	801077c <__adddf3>
 801051c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010520:	f000 fade 	bl	8010ae0 <__aeabi_dmul>
 8010524:	4602      	mov	r2, r0
 8010526:	460b      	mov	r3, r1
 8010528:	4640      	mov	r0, r8
 801052a:	4649      	mov	r1, r9
 801052c:	f000 f924 	bl	8010778 <__aeabi_dsub>
 8010530:	4602      	mov	r2, r0
 8010532:	460b      	mov	r3, r1
 8010534:	4650      	mov	r0, sl
 8010536:	4659      	mov	r1, fp
 8010538:	f000 f91e 	bl	8010778 <__aeabi_dsub>
 801053c:	b005      	add	sp, #20
 801053e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010542:	2200      	movs	r2, #0
 8010544:	2300      	movs	r3, #0
 8010546:	2000      	movs	r0, #0
 8010548:	4967      	ldr	r1, [pc, #412]	; (80106e8 <__ieee754_log+0x3b0>)
 801054a:	f000 fbf3 	bl	8010d34 <__aeabi_ddiv>
 801054e:	b005      	add	sp, #20
 8010550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010554:	4652      	mov	r2, sl
 8010556:	465b      	mov	r3, fp
 8010558:	4650      	mov	r0, sl
 801055a:	4659      	mov	r1, fp
 801055c:	f000 fac0 	bl	8010ae0 <__aeabi_dmul>
 8010560:	a35b      	add	r3, pc, #364	; (adr r3, 80106d0 <__ieee754_log+0x398>)
 8010562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010566:	4606      	mov	r6, r0
 8010568:	460f      	mov	r7, r1
 801056a:	4650      	mov	r0, sl
 801056c:	4659      	mov	r1, fp
 801056e:	f000 fab7 	bl	8010ae0 <__aeabi_dmul>
 8010572:	4602      	mov	r2, r0
 8010574:	460b      	mov	r3, r1
 8010576:	2000      	movs	r0, #0
 8010578:	495a      	ldr	r1, [pc, #360]	; (80106e4 <__ieee754_log+0x3ac>)
 801057a:	f000 f8fd 	bl	8010778 <__aeabi_dsub>
 801057e:	4602      	mov	r2, r0
 8010580:	460b      	mov	r3, r1
 8010582:	4630      	mov	r0, r6
 8010584:	4639      	mov	r1, r7
 8010586:	f000 faab 	bl	8010ae0 <__aeabi_dmul>
 801058a:	4606      	mov	r6, r0
 801058c:	460f      	mov	r7, r1
 801058e:	2c00      	cmp	r4, #0
 8010590:	d162      	bne.n	8010658 <__ieee754_log+0x320>
 8010592:	4650      	mov	r0, sl
 8010594:	4659      	mov	r1, fp
 8010596:	4632      	mov	r2, r6
 8010598:	463b      	mov	r3, r7
 801059a:	f000 f8ed 	bl	8010778 <__aeabi_dsub>
 801059e:	e73a      	b.n	8010416 <__ieee754_log+0xde>
 80105a0:	2c00      	cmp	r4, #0
 80105a2:	f000 80a3 	beq.w	80106ec <__ieee754_log+0x3b4>
 80105a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80105aa:	a337      	add	r3, pc, #220	; (adr r3, 8010688 <__ieee754_log+0x350>)
 80105ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105b0:	4640      	mov	r0, r8
 80105b2:	4649      	mov	r1, r9
 80105b4:	f000 fa94 	bl	8010ae0 <__aeabi_dmul>
 80105b8:	4632      	mov	r2, r6
 80105ba:	463b      	mov	r3, r7
 80105bc:	4604      	mov	r4, r0
 80105be:	460d      	mov	r5, r1
 80105c0:	4650      	mov	r0, sl
 80105c2:	4659      	mov	r1, fp
 80105c4:	f000 f8d8 	bl	8010778 <__aeabi_dsub>
 80105c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105cc:	f000 fa88 	bl	8010ae0 <__aeabi_dmul>
 80105d0:	4606      	mov	r6, r0
 80105d2:	460f      	mov	r7, r1
 80105d4:	e04c      	b.n	8010670 <__ieee754_log+0x338>
 80105d6:	a32c      	add	r3, pc, #176	; (adr r3, 8010688 <__ieee754_log+0x350>)
 80105d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80105e0:	f000 fa7e 	bl	8010ae0 <__aeabi_dmul>
 80105e4:	4632      	mov	r2, r6
 80105e6:	463b      	mov	r3, r7
 80105e8:	4604      	mov	r4, r0
 80105ea:	460d      	mov	r5, r1
 80105ec:	4640      	mov	r0, r8
 80105ee:	4649      	mov	r1, r9
 80105f0:	f000 f8c4 	bl	801077c <__adddf3>
 80105f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80105f8:	f000 fa72 	bl	8010ae0 <__aeabi_dmul>
 80105fc:	a324      	add	r3, pc, #144	; (adr r3, 8010690 <__ieee754_log+0x358>)
 80105fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010602:	4606      	mov	r6, r0
 8010604:	460f      	mov	r7, r1
 8010606:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801060a:	f000 fa69 	bl	8010ae0 <__aeabi_dmul>
 801060e:	4602      	mov	r2, r0
 8010610:	460b      	mov	r3, r1
 8010612:	4630      	mov	r0, r6
 8010614:	4639      	mov	r1, r7
 8010616:	f000 f8b1 	bl	801077c <__adddf3>
 801061a:	4602      	mov	r2, r0
 801061c:	460b      	mov	r3, r1
 801061e:	4640      	mov	r0, r8
 8010620:	4649      	mov	r1, r9
 8010622:	f000 f8a9 	bl	8010778 <__aeabi_dsub>
 8010626:	4652      	mov	r2, sl
 8010628:	465b      	mov	r3, fp
 801062a:	f000 f8a5 	bl	8010778 <__aeabi_dsub>
 801062e:	4602      	mov	r2, r0
 8010630:	460b      	mov	r3, r1
 8010632:	4620      	mov	r0, r4
 8010634:	4629      	mov	r1, r5
 8010636:	f000 f89f 	bl	8010778 <__aeabi_dsub>
 801063a:	b005      	add	sp, #20
 801063c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010640:	4602      	mov	r2, r0
 8010642:	460b      	mov	r3, r1
 8010644:	f000 f898 	bl	8010778 <__aeabi_dsub>
 8010648:	2200      	movs	r2, #0
 801064a:	2300      	movs	r3, #0
 801064c:	f000 fb72 	bl	8010d34 <__aeabi_ddiv>
 8010650:	e6e1      	b.n	8010416 <__ieee754_log+0xde>
 8010652:	2000      	movs	r0, #0
 8010654:	2100      	movs	r1, #0
 8010656:	e6de      	b.n	8010416 <__ieee754_log+0xde>
 8010658:	4620      	mov	r0, r4
 801065a:	f000 f9db 	bl	8010a14 <__aeabi_i2d>
 801065e:	a30a      	add	r3, pc, #40	; (adr r3, 8010688 <__ieee754_log+0x350>)
 8010660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010664:	4680      	mov	r8, r0
 8010666:	4689      	mov	r9, r1
 8010668:	f000 fa3a 	bl	8010ae0 <__aeabi_dmul>
 801066c:	4604      	mov	r4, r0
 801066e:	460d      	mov	r5, r1
 8010670:	a307      	add	r3, pc, #28	; (adr r3, 8010690 <__ieee754_log+0x358>)
 8010672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010676:	4640      	mov	r0, r8
 8010678:	4649      	mov	r1, r9
 801067a:	f000 fa31 	bl	8010ae0 <__aeabi_dmul>
 801067e:	4602      	mov	r2, r0
 8010680:	460b      	mov	r3, r1
 8010682:	4630      	mov	r0, r6
 8010684:	4639      	mov	r1, r7
 8010686:	e7cc      	b.n	8010622 <__ieee754_log+0x2ea>
 8010688:	fee00000 	.word	0xfee00000
 801068c:	3fe62e42 	.word	0x3fe62e42
 8010690:	35793c76 	.word	0x35793c76
 8010694:	3dea39ef 	.word	0x3dea39ef
 8010698:	df3e5244 	.word	0xdf3e5244
 801069c:	3fc2f112 	.word	0x3fc2f112
 80106a0:	96cb03de 	.word	0x96cb03de
 80106a4:	3fc74664 	.word	0x3fc74664
 80106a8:	94229359 	.word	0x94229359
 80106ac:	3fd24924 	.word	0x3fd24924
 80106b0:	55555593 	.word	0x55555593
 80106b4:	3fe55555 	.word	0x3fe55555
 80106b8:	d078c69f 	.word	0xd078c69f
 80106bc:	3fc39a09 	.word	0x3fc39a09
 80106c0:	1d8e78af 	.word	0x1d8e78af
 80106c4:	3fcc71c5 	.word	0x3fcc71c5
 80106c8:	9997fa04 	.word	0x9997fa04
 80106cc:	3fd99999 	.word	0x3fd99999
 80106d0:	55555555 	.word	0x55555555
 80106d4:	3fd55555 	.word	0x3fd55555
 80106d8:	43500000 	.word	0x43500000
 80106dc:	7fefffff 	.word	0x7fefffff
 80106e0:	3ff00000 	.word	0x3ff00000
 80106e4:	3fe00000 	.word	0x3fe00000
 80106e8:	c3500000 	.word	0xc3500000
 80106ec:	4602      	mov	r2, r0
 80106ee:	460b      	mov	r3, r1
 80106f0:	4650      	mov	r0, sl
 80106f2:	4659      	mov	r1, fp
 80106f4:	f000 f840 	bl	8010778 <__aeabi_dsub>
 80106f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80106fc:	f000 f9f0 	bl	8010ae0 <__aeabi_dmul>
 8010700:	e716      	b.n	8010530 <__ieee754_log+0x1f8>
 8010702:	bf00      	nop
 8010704:	f3af 8000 	nop.w

08010708 <__fpclassifyd>:
 8010708:	b410      	push	{r4}
 801070a:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 801070e:	460b      	mov	r3, r1
 8010710:	d008      	beq.n	8010724 <__fpclassifyd+0x1c>
 8010712:	4a11      	ldr	r2, [pc, #68]	; (8010758 <__fpclassifyd+0x50>)
 8010714:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8010718:	4291      	cmp	r1, r2
 801071a:	d808      	bhi.n	801072e <__fpclassifyd+0x26>
 801071c:	2004      	movs	r0, #4
 801071e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010722:	4770      	bx	lr
 8010724:	b918      	cbnz	r0, 801072e <__fpclassifyd+0x26>
 8010726:	2002      	movs	r0, #2
 8010728:	f85d 4b04 	ldr.w	r4, [sp], #4
 801072c:	4770      	bx	lr
 801072e:	f103 43ff 	add.w	r3, r3, #2139095040	; 0x7f800000
 8010732:	4a09      	ldr	r2, [pc, #36]	; (8010758 <__fpclassifyd+0x50>)
 8010734:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010738:	4293      	cmp	r3, r2
 801073a:	d9ef      	bls.n	801071c <__fpclassifyd+0x14>
 801073c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8010740:	d201      	bcs.n	8010746 <__fpclassifyd+0x3e>
 8010742:	2003      	movs	r0, #3
 8010744:	e7eb      	b.n	801071e <__fpclassifyd+0x16>
 8010746:	4b05      	ldr	r3, [pc, #20]	; (801075c <__fpclassifyd+0x54>)
 8010748:	429c      	cmp	r4, r3
 801074a:	d001      	beq.n	8010750 <__fpclassifyd+0x48>
 801074c:	2000      	movs	r0, #0
 801074e:	e7e6      	b.n	801071e <__fpclassifyd+0x16>
 8010750:	fab0 f080 	clz	r0, r0
 8010754:	0940      	lsrs	r0, r0, #5
 8010756:	e7e2      	b.n	801071e <__fpclassifyd+0x16>
 8010758:	7fdfffff 	.word	0x7fdfffff
 801075c:	7ff00000 	.word	0x7ff00000

08010760 <matherr>:
 8010760:	2000      	movs	r0, #0
 8010762:	4770      	bx	lr

08010764 <nan>:
 8010764:	2000      	movs	r0, #0
 8010766:	4901      	ldr	r1, [pc, #4]	; (801076c <nan+0x8>)
 8010768:	4770      	bx	lr
 801076a:	bf00      	nop
 801076c:	7ff80000 	.word	0x7ff80000

08010770 <__aeabi_drsub>:
 8010770:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8010774:	e002      	b.n	801077c <__adddf3>
 8010776:	bf00      	nop

08010778 <__aeabi_dsub>:
 8010778:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0801077c <__adddf3>:
 801077c:	b530      	push	{r4, r5, lr}
 801077e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8010782:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8010786:	ea94 0f05 	teq	r4, r5
 801078a:	bf08      	it	eq
 801078c:	ea90 0f02 	teqeq	r0, r2
 8010790:	bf1f      	itttt	ne
 8010792:	ea54 0c00 	orrsne.w	ip, r4, r0
 8010796:	ea55 0c02 	orrsne.w	ip, r5, r2
 801079a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 801079e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80107a2:	f000 80e2 	beq.w	801096a <__adddf3+0x1ee>
 80107a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80107aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80107ae:	bfb8      	it	lt
 80107b0:	426d      	neglt	r5, r5
 80107b2:	dd0c      	ble.n	80107ce <__adddf3+0x52>
 80107b4:	442c      	add	r4, r5
 80107b6:	ea80 0202 	eor.w	r2, r0, r2
 80107ba:	ea81 0303 	eor.w	r3, r1, r3
 80107be:	ea82 0000 	eor.w	r0, r2, r0
 80107c2:	ea83 0101 	eor.w	r1, r3, r1
 80107c6:	ea80 0202 	eor.w	r2, r0, r2
 80107ca:	ea81 0303 	eor.w	r3, r1, r3
 80107ce:	2d36      	cmp	r5, #54	; 0x36
 80107d0:	bf88      	it	hi
 80107d2:	bd30      	pophi	{r4, r5, pc}
 80107d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80107d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80107dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80107e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80107e4:	d002      	beq.n	80107ec <__adddf3+0x70>
 80107e6:	4240      	negs	r0, r0
 80107e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80107ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80107f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80107f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80107f8:	d002      	beq.n	8010800 <__adddf3+0x84>
 80107fa:	4252      	negs	r2, r2
 80107fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8010800:	ea94 0f05 	teq	r4, r5
 8010804:	f000 80a7 	beq.w	8010956 <__adddf3+0x1da>
 8010808:	f1a4 0401 	sub.w	r4, r4, #1
 801080c:	f1d5 0e20 	rsbs	lr, r5, #32
 8010810:	db0d      	blt.n	801082e <__adddf3+0xb2>
 8010812:	fa02 fc0e 	lsl.w	ip, r2, lr
 8010816:	fa22 f205 	lsr.w	r2, r2, r5
 801081a:	1880      	adds	r0, r0, r2
 801081c:	f141 0100 	adc.w	r1, r1, #0
 8010820:	fa03 f20e 	lsl.w	r2, r3, lr
 8010824:	1880      	adds	r0, r0, r2
 8010826:	fa43 f305 	asr.w	r3, r3, r5
 801082a:	4159      	adcs	r1, r3
 801082c:	e00e      	b.n	801084c <__adddf3+0xd0>
 801082e:	f1a5 0520 	sub.w	r5, r5, #32
 8010832:	f10e 0e20 	add.w	lr, lr, #32
 8010836:	2a01      	cmp	r2, #1
 8010838:	fa03 fc0e 	lsl.w	ip, r3, lr
 801083c:	bf28      	it	cs
 801083e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8010842:	fa43 f305 	asr.w	r3, r3, r5
 8010846:	18c0      	adds	r0, r0, r3
 8010848:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 801084c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010850:	d507      	bpl.n	8010862 <__adddf3+0xe6>
 8010852:	f04f 0e00 	mov.w	lr, #0
 8010856:	f1dc 0c00 	rsbs	ip, ip, #0
 801085a:	eb7e 0000 	sbcs.w	r0, lr, r0
 801085e:	eb6e 0101 	sbc.w	r1, lr, r1
 8010862:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8010866:	d31b      	bcc.n	80108a0 <__adddf3+0x124>
 8010868:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 801086c:	d30c      	bcc.n	8010888 <__adddf3+0x10c>
 801086e:	0849      	lsrs	r1, r1, #1
 8010870:	ea5f 0030 	movs.w	r0, r0, rrx
 8010874:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8010878:	f104 0401 	add.w	r4, r4, #1
 801087c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8010880:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8010884:	f080 809a 	bcs.w	80109bc <__adddf3+0x240>
 8010888:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 801088c:	bf08      	it	eq
 801088e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010892:	f150 0000 	adcs.w	r0, r0, #0
 8010896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 801089a:	ea41 0105 	orr.w	r1, r1, r5
 801089e:	bd30      	pop	{r4, r5, pc}
 80108a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80108a4:	4140      	adcs	r0, r0
 80108a6:	eb41 0101 	adc.w	r1, r1, r1
 80108aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80108ae:	f1a4 0401 	sub.w	r4, r4, #1
 80108b2:	d1e9      	bne.n	8010888 <__adddf3+0x10c>
 80108b4:	f091 0f00 	teq	r1, #0
 80108b8:	bf04      	itt	eq
 80108ba:	4601      	moveq	r1, r0
 80108bc:	2000      	moveq	r0, #0
 80108be:	fab1 f381 	clz	r3, r1
 80108c2:	bf08      	it	eq
 80108c4:	3320      	addeq	r3, #32
 80108c6:	f1a3 030b 	sub.w	r3, r3, #11
 80108ca:	f1b3 0220 	subs.w	r2, r3, #32
 80108ce:	da0c      	bge.n	80108ea <__adddf3+0x16e>
 80108d0:	320c      	adds	r2, #12
 80108d2:	dd08      	ble.n	80108e6 <__adddf3+0x16a>
 80108d4:	f102 0c14 	add.w	ip, r2, #20
 80108d8:	f1c2 020c 	rsb	r2, r2, #12
 80108dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80108e0:	fa21 f102 	lsr.w	r1, r1, r2
 80108e4:	e00c      	b.n	8010900 <__adddf3+0x184>
 80108e6:	f102 0214 	add.w	r2, r2, #20
 80108ea:	bfd8      	it	le
 80108ec:	f1c2 0c20 	rsble	ip, r2, #32
 80108f0:	fa01 f102 	lsl.w	r1, r1, r2
 80108f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80108f8:	bfdc      	itt	le
 80108fa:	ea41 010c 	orrle.w	r1, r1, ip
 80108fe:	4090      	lslle	r0, r2
 8010900:	1ae4      	subs	r4, r4, r3
 8010902:	bfa2      	ittt	ge
 8010904:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8010908:	4329      	orrge	r1, r5
 801090a:	bd30      	popge	{r4, r5, pc}
 801090c:	ea6f 0404 	mvn.w	r4, r4
 8010910:	3c1f      	subs	r4, #31
 8010912:	da1c      	bge.n	801094e <__adddf3+0x1d2>
 8010914:	340c      	adds	r4, #12
 8010916:	dc0e      	bgt.n	8010936 <__adddf3+0x1ba>
 8010918:	f104 0414 	add.w	r4, r4, #20
 801091c:	f1c4 0220 	rsb	r2, r4, #32
 8010920:	fa20 f004 	lsr.w	r0, r0, r4
 8010924:	fa01 f302 	lsl.w	r3, r1, r2
 8010928:	ea40 0003 	orr.w	r0, r0, r3
 801092c:	fa21 f304 	lsr.w	r3, r1, r4
 8010930:	ea45 0103 	orr.w	r1, r5, r3
 8010934:	bd30      	pop	{r4, r5, pc}
 8010936:	f1c4 040c 	rsb	r4, r4, #12
 801093a:	f1c4 0220 	rsb	r2, r4, #32
 801093e:	fa20 f002 	lsr.w	r0, r0, r2
 8010942:	fa01 f304 	lsl.w	r3, r1, r4
 8010946:	ea40 0003 	orr.w	r0, r0, r3
 801094a:	4629      	mov	r1, r5
 801094c:	bd30      	pop	{r4, r5, pc}
 801094e:	fa21 f004 	lsr.w	r0, r1, r4
 8010952:	4629      	mov	r1, r5
 8010954:	bd30      	pop	{r4, r5, pc}
 8010956:	f094 0f00 	teq	r4, #0
 801095a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 801095e:	bf06      	itte	eq
 8010960:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8010964:	3401      	addeq	r4, #1
 8010966:	3d01      	subne	r5, #1
 8010968:	e74e      	b.n	8010808 <__adddf3+0x8c>
 801096a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 801096e:	bf18      	it	ne
 8010970:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8010974:	d029      	beq.n	80109ca <__adddf3+0x24e>
 8010976:	ea94 0f05 	teq	r4, r5
 801097a:	bf08      	it	eq
 801097c:	ea90 0f02 	teqeq	r0, r2
 8010980:	d005      	beq.n	801098e <__adddf3+0x212>
 8010982:	ea54 0c00 	orrs.w	ip, r4, r0
 8010986:	bf04      	itt	eq
 8010988:	4619      	moveq	r1, r3
 801098a:	4610      	moveq	r0, r2
 801098c:	bd30      	pop	{r4, r5, pc}
 801098e:	ea91 0f03 	teq	r1, r3
 8010992:	bf1e      	ittt	ne
 8010994:	2100      	movne	r1, #0
 8010996:	2000      	movne	r0, #0
 8010998:	bd30      	popne	{r4, r5, pc}
 801099a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 801099e:	d105      	bne.n	80109ac <__adddf3+0x230>
 80109a0:	0040      	lsls	r0, r0, #1
 80109a2:	4149      	adcs	r1, r1
 80109a4:	bf28      	it	cs
 80109a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80109aa:	bd30      	pop	{r4, r5, pc}
 80109ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80109b0:	bf3c      	itt	cc
 80109b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80109b6:	bd30      	popcc	{r4, r5, pc}
 80109b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80109bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80109c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80109c4:	f04f 0000 	mov.w	r0, #0
 80109c8:	bd30      	pop	{r4, r5, pc}
 80109ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80109ce:	bf1a      	itte	ne
 80109d0:	4619      	movne	r1, r3
 80109d2:	4610      	movne	r0, r2
 80109d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80109d8:	bf1c      	itt	ne
 80109da:	460b      	movne	r3, r1
 80109dc:	4602      	movne	r2, r0
 80109de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80109e2:	bf06      	itte	eq
 80109e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80109e8:	ea91 0f03 	teqeq	r1, r3
 80109ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80109f0:	bd30      	pop	{r4, r5, pc}
 80109f2:	bf00      	nop

080109f4 <__aeabi_ui2d>:
 80109f4:	f090 0f00 	teq	r0, #0
 80109f8:	bf04      	itt	eq
 80109fa:	2100      	moveq	r1, #0
 80109fc:	4770      	bxeq	lr
 80109fe:	b530      	push	{r4, r5, lr}
 8010a00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010a04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010a08:	f04f 0500 	mov.w	r5, #0
 8010a0c:	f04f 0100 	mov.w	r1, #0
 8010a10:	e750      	b.n	80108b4 <__adddf3+0x138>
 8010a12:	bf00      	nop

08010a14 <__aeabi_i2d>:
 8010a14:	f090 0f00 	teq	r0, #0
 8010a18:	bf04      	itt	eq
 8010a1a:	2100      	moveq	r1, #0
 8010a1c:	4770      	bxeq	lr
 8010a1e:	b530      	push	{r4, r5, lr}
 8010a20:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010a24:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010a28:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8010a2c:	bf48      	it	mi
 8010a2e:	4240      	negmi	r0, r0
 8010a30:	f04f 0100 	mov.w	r1, #0
 8010a34:	e73e      	b.n	80108b4 <__adddf3+0x138>
 8010a36:	bf00      	nop

08010a38 <__aeabi_f2d>:
 8010a38:	0042      	lsls	r2, r0, #1
 8010a3a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8010a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8010a42:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8010a46:	bf1f      	itttt	ne
 8010a48:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8010a4c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010a50:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8010a54:	4770      	bxne	lr
 8010a56:	f092 0f00 	teq	r2, #0
 8010a5a:	bf14      	ite	ne
 8010a5c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8010a60:	4770      	bxeq	lr
 8010a62:	b530      	push	{r4, r5, lr}
 8010a64:	f44f 7460 	mov.w	r4, #896	; 0x380
 8010a68:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8010a6c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010a70:	e720      	b.n	80108b4 <__adddf3+0x138>
 8010a72:	bf00      	nop

08010a74 <__aeabi_ul2d>:
 8010a74:	ea50 0201 	orrs.w	r2, r0, r1
 8010a78:	bf08      	it	eq
 8010a7a:	4770      	bxeq	lr
 8010a7c:	b530      	push	{r4, r5, lr}
 8010a7e:	f04f 0500 	mov.w	r5, #0
 8010a82:	e00a      	b.n	8010a9a <__aeabi_l2d+0x16>

08010a84 <__aeabi_l2d>:
 8010a84:	ea50 0201 	orrs.w	r2, r0, r1
 8010a88:	bf08      	it	eq
 8010a8a:	4770      	bxeq	lr
 8010a8c:	b530      	push	{r4, r5, lr}
 8010a8e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8010a92:	d502      	bpl.n	8010a9a <__aeabi_l2d+0x16>
 8010a94:	4240      	negs	r0, r0
 8010a96:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8010a9a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8010a9e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8010aa2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8010aa6:	f43f aedc 	beq.w	8010862 <__adddf3+0xe6>
 8010aaa:	f04f 0203 	mov.w	r2, #3
 8010aae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010ab2:	bf18      	it	ne
 8010ab4:	3203      	addne	r2, #3
 8010ab6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8010aba:	bf18      	it	ne
 8010abc:	3203      	addne	r2, #3
 8010abe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8010ac2:	f1c2 0320 	rsb	r3, r2, #32
 8010ac6:	fa00 fc03 	lsl.w	ip, r0, r3
 8010aca:	fa20 f002 	lsr.w	r0, r0, r2
 8010ace:	fa01 fe03 	lsl.w	lr, r1, r3
 8010ad2:	ea40 000e 	orr.w	r0, r0, lr
 8010ad6:	fa21 f102 	lsr.w	r1, r1, r2
 8010ada:	4414      	add	r4, r2
 8010adc:	e6c1      	b.n	8010862 <__adddf3+0xe6>
 8010ade:	bf00      	nop

08010ae0 <__aeabi_dmul>:
 8010ae0:	b570      	push	{r4, r5, r6, lr}
 8010ae2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010ae6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010aea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010aee:	bf1d      	ittte	ne
 8010af0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010af4:	ea94 0f0c 	teqne	r4, ip
 8010af8:	ea95 0f0c 	teqne	r5, ip
 8010afc:	f000 f8de 	bleq	8010cbc <__aeabi_dmul+0x1dc>
 8010b00:	442c      	add	r4, r5
 8010b02:	ea81 0603 	eor.w	r6, r1, r3
 8010b06:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8010b0a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8010b0e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8010b12:	bf18      	it	ne
 8010b14:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8010b18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010b1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010b20:	d038      	beq.n	8010b94 <__aeabi_dmul+0xb4>
 8010b22:	fba0 ce02 	umull	ip, lr, r0, r2
 8010b26:	f04f 0500 	mov.w	r5, #0
 8010b2a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8010b2e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8010b32:	fbe0 e503 	umlal	lr, r5, r0, r3
 8010b36:	f04f 0600 	mov.w	r6, #0
 8010b3a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8010b3e:	f09c 0f00 	teq	ip, #0
 8010b42:	bf18      	it	ne
 8010b44:	f04e 0e01 	orrne.w	lr, lr, #1
 8010b48:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8010b4c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8010b50:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8010b54:	d204      	bcs.n	8010b60 <__aeabi_dmul+0x80>
 8010b56:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8010b5a:	416d      	adcs	r5, r5
 8010b5c:	eb46 0606 	adc.w	r6, r6, r6
 8010b60:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8010b64:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8010b68:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8010b6c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8010b70:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8010b74:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010b78:	bf88      	it	hi
 8010b7a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010b7e:	d81e      	bhi.n	8010bbe <__aeabi_dmul+0xde>
 8010b80:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8010b84:	bf08      	it	eq
 8010b86:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8010b8a:	f150 0000 	adcs.w	r0, r0, #0
 8010b8e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010b92:	bd70      	pop	{r4, r5, r6, pc}
 8010b94:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8010b98:	ea46 0101 	orr.w	r1, r6, r1
 8010b9c:	ea40 0002 	orr.w	r0, r0, r2
 8010ba0:	ea81 0103 	eor.w	r1, r1, r3
 8010ba4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8010ba8:	bfc2      	ittt	gt
 8010baa:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010bae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010bb2:	bd70      	popgt	{r4, r5, r6, pc}
 8010bb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010bb8:	f04f 0e00 	mov.w	lr, #0
 8010bbc:	3c01      	subs	r4, #1
 8010bbe:	f300 80ab 	bgt.w	8010d18 <__aeabi_dmul+0x238>
 8010bc2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8010bc6:	bfde      	ittt	le
 8010bc8:	2000      	movle	r0, #0
 8010bca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8010bce:	bd70      	pople	{r4, r5, r6, pc}
 8010bd0:	f1c4 0400 	rsb	r4, r4, #0
 8010bd4:	3c20      	subs	r4, #32
 8010bd6:	da35      	bge.n	8010c44 <__aeabi_dmul+0x164>
 8010bd8:	340c      	adds	r4, #12
 8010bda:	dc1b      	bgt.n	8010c14 <__aeabi_dmul+0x134>
 8010bdc:	f104 0414 	add.w	r4, r4, #20
 8010be0:	f1c4 0520 	rsb	r5, r4, #32
 8010be4:	fa00 f305 	lsl.w	r3, r0, r5
 8010be8:	fa20 f004 	lsr.w	r0, r0, r4
 8010bec:	fa01 f205 	lsl.w	r2, r1, r5
 8010bf0:	ea40 0002 	orr.w	r0, r0, r2
 8010bf4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8010bf8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8010bfc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010c00:	fa21 f604 	lsr.w	r6, r1, r4
 8010c04:	eb42 0106 	adc.w	r1, r2, r6
 8010c08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010c0c:	bf08      	it	eq
 8010c0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010c12:	bd70      	pop	{r4, r5, r6, pc}
 8010c14:	f1c4 040c 	rsb	r4, r4, #12
 8010c18:	f1c4 0520 	rsb	r5, r4, #32
 8010c1c:	fa00 f304 	lsl.w	r3, r0, r4
 8010c20:	fa20 f005 	lsr.w	r0, r0, r5
 8010c24:	fa01 f204 	lsl.w	r2, r1, r4
 8010c28:	ea40 0002 	orr.w	r0, r0, r2
 8010c2c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010c30:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8010c34:	f141 0100 	adc.w	r1, r1, #0
 8010c38:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010c3c:	bf08      	it	eq
 8010c3e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	f1c4 0520 	rsb	r5, r4, #32
 8010c48:	fa00 f205 	lsl.w	r2, r0, r5
 8010c4c:	ea4e 0e02 	orr.w	lr, lr, r2
 8010c50:	fa20 f304 	lsr.w	r3, r0, r4
 8010c54:	fa01 f205 	lsl.w	r2, r1, r5
 8010c58:	ea43 0302 	orr.w	r3, r3, r2
 8010c5c:	fa21 f004 	lsr.w	r0, r1, r4
 8010c60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010c64:	fa21 f204 	lsr.w	r2, r1, r4
 8010c68:	ea20 0002 	bic.w	r0, r0, r2
 8010c6c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8010c70:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8010c74:	bf08      	it	eq
 8010c76:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8010c7a:	bd70      	pop	{r4, r5, r6, pc}
 8010c7c:	f094 0f00 	teq	r4, #0
 8010c80:	d10f      	bne.n	8010ca2 <__aeabi_dmul+0x1c2>
 8010c82:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8010c86:	0040      	lsls	r0, r0, #1
 8010c88:	eb41 0101 	adc.w	r1, r1, r1
 8010c8c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010c90:	bf08      	it	eq
 8010c92:	3c01      	subeq	r4, #1
 8010c94:	d0f7      	beq.n	8010c86 <__aeabi_dmul+0x1a6>
 8010c96:	ea41 0106 	orr.w	r1, r1, r6
 8010c9a:	f095 0f00 	teq	r5, #0
 8010c9e:	bf18      	it	ne
 8010ca0:	4770      	bxne	lr
 8010ca2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8010ca6:	0052      	lsls	r2, r2, #1
 8010ca8:	eb43 0303 	adc.w	r3, r3, r3
 8010cac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8010cb0:	bf08      	it	eq
 8010cb2:	3d01      	subeq	r5, #1
 8010cb4:	d0f7      	beq.n	8010ca6 <__aeabi_dmul+0x1c6>
 8010cb6:	ea43 0306 	orr.w	r3, r3, r6
 8010cba:	4770      	bx	lr
 8010cbc:	ea94 0f0c 	teq	r4, ip
 8010cc0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010cc4:	bf18      	it	ne
 8010cc6:	ea95 0f0c 	teqne	r5, ip
 8010cca:	d00c      	beq.n	8010ce6 <__aeabi_dmul+0x206>
 8010ccc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010cd0:	bf18      	it	ne
 8010cd2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010cd6:	d1d1      	bne.n	8010c7c <__aeabi_dmul+0x19c>
 8010cd8:	ea81 0103 	eor.w	r1, r1, r3
 8010cdc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010ce0:	f04f 0000 	mov.w	r0, #0
 8010ce4:	bd70      	pop	{r4, r5, r6, pc}
 8010ce6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010cea:	bf06      	itte	eq
 8010cec:	4610      	moveq	r0, r2
 8010cee:	4619      	moveq	r1, r3
 8010cf0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010cf4:	d019      	beq.n	8010d2a <__aeabi_dmul+0x24a>
 8010cf6:	ea94 0f0c 	teq	r4, ip
 8010cfa:	d102      	bne.n	8010d02 <__aeabi_dmul+0x222>
 8010cfc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8010d00:	d113      	bne.n	8010d2a <__aeabi_dmul+0x24a>
 8010d02:	ea95 0f0c 	teq	r5, ip
 8010d06:	d105      	bne.n	8010d14 <__aeabi_dmul+0x234>
 8010d08:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8010d0c:	bf1c      	itt	ne
 8010d0e:	4610      	movne	r0, r2
 8010d10:	4619      	movne	r1, r3
 8010d12:	d10a      	bne.n	8010d2a <__aeabi_dmul+0x24a>
 8010d14:	ea81 0103 	eor.w	r1, r1, r3
 8010d18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8010d1c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010d20:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010d24:	f04f 0000 	mov.w	r0, #0
 8010d28:	bd70      	pop	{r4, r5, r6, pc}
 8010d2a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8010d2e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8010d32:	bd70      	pop	{r4, r5, r6, pc}

08010d34 <__aeabi_ddiv>:
 8010d34:	b570      	push	{r4, r5, r6, lr}
 8010d36:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8010d3a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8010d3e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8010d42:	bf1d      	ittte	ne
 8010d44:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8010d48:	ea94 0f0c 	teqne	r4, ip
 8010d4c:	ea95 0f0c 	teqne	r5, ip
 8010d50:	f000 f8a7 	bleq	8010ea2 <__aeabi_ddiv+0x16e>
 8010d54:	eba4 0405 	sub.w	r4, r4, r5
 8010d58:	ea81 0e03 	eor.w	lr, r1, r3
 8010d5c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010d60:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8010d64:	f000 8088 	beq.w	8010e78 <__aeabi_ddiv+0x144>
 8010d68:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8010d6c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8010d70:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8010d74:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8010d78:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8010d7c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8010d80:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8010d84:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8010d88:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8010d8c:	429d      	cmp	r5, r3
 8010d8e:	bf08      	it	eq
 8010d90:	4296      	cmpeq	r6, r2
 8010d92:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8010d96:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8010d9a:	d202      	bcs.n	8010da2 <__aeabi_ddiv+0x6e>
 8010d9c:	085b      	lsrs	r3, r3, #1
 8010d9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8010da2:	1ab6      	subs	r6, r6, r2
 8010da4:	eb65 0503 	sbc.w	r5, r5, r3
 8010da8:	085b      	lsrs	r3, r3, #1
 8010daa:	ea4f 0232 	mov.w	r2, r2, rrx
 8010dae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8010db2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8010db6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010dba:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010dbe:	bf22      	ittt	cs
 8010dc0:	1ab6      	subcs	r6, r6, r2
 8010dc2:	4675      	movcs	r5, lr
 8010dc4:	ea40 000c 	orrcs.w	r0, r0, ip
 8010dc8:	085b      	lsrs	r3, r3, #1
 8010dca:	ea4f 0232 	mov.w	r2, r2, rrx
 8010dce:	ebb6 0e02 	subs.w	lr, r6, r2
 8010dd2:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010dd6:	bf22      	ittt	cs
 8010dd8:	1ab6      	subcs	r6, r6, r2
 8010dda:	4675      	movcs	r5, lr
 8010ddc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8010de0:	085b      	lsrs	r3, r3, #1
 8010de2:	ea4f 0232 	mov.w	r2, r2, rrx
 8010de6:	ebb6 0e02 	subs.w	lr, r6, r2
 8010dea:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010dee:	bf22      	ittt	cs
 8010df0:	1ab6      	subcs	r6, r6, r2
 8010df2:	4675      	movcs	r5, lr
 8010df4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8010df8:	085b      	lsrs	r3, r3, #1
 8010dfa:	ea4f 0232 	mov.w	r2, r2, rrx
 8010dfe:	ebb6 0e02 	subs.w	lr, r6, r2
 8010e02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8010e06:	bf22      	ittt	cs
 8010e08:	1ab6      	subcs	r6, r6, r2
 8010e0a:	4675      	movcs	r5, lr
 8010e0c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8010e10:	ea55 0e06 	orrs.w	lr, r5, r6
 8010e14:	d018      	beq.n	8010e48 <__aeabi_ddiv+0x114>
 8010e16:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8010e1a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8010e1e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8010e22:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8010e26:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8010e2a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8010e2e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8010e32:	d1c0      	bne.n	8010db6 <__aeabi_ddiv+0x82>
 8010e34:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010e38:	d10b      	bne.n	8010e52 <__aeabi_ddiv+0x11e>
 8010e3a:	ea41 0100 	orr.w	r1, r1, r0
 8010e3e:	f04f 0000 	mov.w	r0, #0
 8010e42:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8010e46:	e7b6      	b.n	8010db6 <__aeabi_ddiv+0x82>
 8010e48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8010e4c:	bf04      	itt	eq
 8010e4e:	4301      	orreq	r1, r0
 8010e50:	2000      	moveq	r0, #0
 8010e52:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8010e56:	bf88      	it	hi
 8010e58:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8010e5c:	f63f aeaf 	bhi.w	8010bbe <__aeabi_dmul+0xde>
 8010e60:	ebb5 0c03 	subs.w	ip, r5, r3
 8010e64:	bf04      	itt	eq
 8010e66:	ebb6 0c02 	subseq.w	ip, r6, r2
 8010e6a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8010e6e:	f150 0000 	adcs.w	r0, r0, #0
 8010e72:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8010e76:	bd70      	pop	{r4, r5, r6, pc}
 8010e78:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8010e7c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8010e80:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8010e84:	bfc2      	ittt	gt
 8010e86:	ebd4 050c 	rsbsgt	r5, r4, ip
 8010e8a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8010e8e:	bd70      	popgt	{r4, r5, r6, pc}
 8010e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010e94:	f04f 0e00 	mov.w	lr, #0
 8010e98:	3c01      	subs	r4, #1
 8010e9a:	e690      	b.n	8010bbe <__aeabi_dmul+0xde>
 8010e9c:	ea45 0e06 	orr.w	lr, r5, r6
 8010ea0:	e68d      	b.n	8010bbe <__aeabi_dmul+0xde>
 8010ea2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8010ea6:	ea94 0f0c 	teq	r4, ip
 8010eaa:	bf08      	it	eq
 8010eac:	ea95 0f0c 	teqeq	r5, ip
 8010eb0:	f43f af3b 	beq.w	8010d2a <__aeabi_dmul+0x24a>
 8010eb4:	ea94 0f0c 	teq	r4, ip
 8010eb8:	d10a      	bne.n	8010ed0 <__aeabi_ddiv+0x19c>
 8010eba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8010ebe:	f47f af34 	bne.w	8010d2a <__aeabi_dmul+0x24a>
 8010ec2:	ea95 0f0c 	teq	r5, ip
 8010ec6:	f47f af25 	bne.w	8010d14 <__aeabi_dmul+0x234>
 8010eca:	4610      	mov	r0, r2
 8010ecc:	4619      	mov	r1, r3
 8010ece:	e72c      	b.n	8010d2a <__aeabi_dmul+0x24a>
 8010ed0:	ea95 0f0c 	teq	r5, ip
 8010ed4:	d106      	bne.n	8010ee4 <__aeabi_ddiv+0x1b0>
 8010ed6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8010eda:	f43f aefd 	beq.w	8010cd8 <__aeabi_dmul+0x1f8>
 8010ede:	4610      	mov	r0, r2
 8010ee0:	4619      	mov	r1, r3
 8010ee2:	e722      	b.n	8010d2a <__aeabi_dmul+0x24a>
 8010ee4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8010ee8:	bf18      	it	ne
 8010eea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8010eee:	f47f aec5 	bne.w	8010c7c <__aeabi_dmul+0x19c>
 8010ef2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8010ef6:	f47f af0d 	bne.w	8010d14 <__aeabi_dmul+0x234>
 8010efa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8010efe:	f47f aeeb 	bne.w	8010cd8 <__aeabi_dmul+0x1f8>
 8010f02:	e712      	b.n	8010d2a <__aeabi_dmul+0x24a>

08010f04 <__gedf2>:
 8010f04:	f04f 3cff 	mov.w	ip, #4294967295
 8010f08:	e006      	b.n	8010f18 <__cmpdf2+0x4>
 8010f0a:	bf00      	nop

08010f0c <__ledf2>:
 8010f0c:	f04f 0c01 	mov.w	ip, #1
 8010f10:	e002      	b.n	8010f18 <__cmpdf2+0x4>
 8010f12:	bf00      	nop

08010f14 <__cmpdf2>:
 8010f14:	f04f 0c01 	mov.w	ip, #1
 8010f18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8010f1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010f20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010f24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010f28:	bf18      	it	ne
 8010f2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8010f2e:	d01b      	beq.n	8010f68 <__cmpdf2+0x54>
 8010f30:	b001      	add	sp, #4
 8010f32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8010f36:	bf0c      	ite	eq
 8010f38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8010f3c:	ea91 0f03 	teqne	r1, r3
 8010f40:	bf02      	ittt	eq
 8010f42:	ea90 0f02 	teqeq	r0, r2
 8010f46:	2000      	moveq	r0, #0
 8010f48:	4770      	bxeq	lr
 8010f4a:	f110 0f00 	cmn.w	r0, #0
 8010f4e:	ea91 0f03 	teq	r1, r3
 8010f52:	bf58      	it	pl
 8010f54:	4299      	cmppl	r1, r3
 8010f56:	bf08      	it	eq
 8010f58:	4290      	cmpeq	r0, r2
 8010f5a:	bf2c      	ite	cs
 8010f5c:	17d8      	asrcs	r0, r3, #31
 8010f5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8010f62:	f040 0001 	orr.w	r0, r0, #1
 8010f66:	4770      	bx	lr
 8010f68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8010f6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010f70:	d102      	bne.n	8010f78 <__cmpdf2+0x64>
 8010f72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8010f76:	d107      	bne.n	8010f88 <__cmpdf2+0x74>
 8010f78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8010f7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8010f80:	d1d6      	bne.n	8010f30 <__cmpdf2+0x1c>
 8010f82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8010f86:	d0d3      	beq.n	8010f30 <__cmpdf2+0x1c>
 8010f88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8010f8c:	4770      	bx	lr
 8010f8e:	bf00      	nop

08010f90 <__aeabi_cdrcmple>:
 8010f90:	4684      	mov	ip, r0
 8010f92:	4610      	mov	r0, r2
 8010f94:	4662      	mov	r2, ip
 8010f96:	468c      	mov	ip, r1
 8010f98:	4619      	mov	r1, r3
 8010f9a:	4663      	mov	r3, ip
 8010f9c:	e000      	b.n	8010fa0 <__aeabi_cdcmpeq>
 8010f9e:	bf00      	nop

08010fa0 <__aeabi_cdcmpeq>:
 8010fa0:	b501      	push	{r0, lr}
 8010fa2:	f7ff ffb7 	bl	8010f14 <__cmpdf2>
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	bf48      	it	mi
 8010faa:	f110 0f00 	cmnmi.w	r0, #0
 8010fae:	bd01      	pop	{r0, pc}

08010fb0 <__aeabi_dcmpeq>:
 8010fb0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010fb4:	f7ff fff4 	bl	8010fa0 <__aeabi_cdcmpeq>
 8010fb8:	bf0c      	ite	eq
 8010fba:	2001      	moveq	r0, #1
 8010fbc:	2000      	movne	r0, #0
 8010fbe:	f85d fb08 	ldr.w	pc, [sp], #8
 8010fc2:	bf00      	nop

08010fc4 <__aeabi_dcmplt>:
 8010fc4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010fc8:	f7ff ffea 	bl	8010fa0 <__aeabi_cdcmpeq>
 8010fcc:	bf34      	ite	cc
 8010fce:	2001      	movcc	r0, #1
 8010fd0:	2000      	movcs	r0, #0
 8010fd2:	f85d fb08 	ldr.w	pc, [sp], #8
 8010fd6:	bf00      	nop

08010fd8 <__aeabi_dcmple>:
 8010fd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010fdc:	f7ff ffe0 	bl	8010fa0 <__aeabi_cdcmpeq>
 8010fe0:	bf94      	ite	ls
 8010fe2:	2001      	movls	r0, #1
 8010fe4:	2000      	movhi	r0, #0
 8010fe6:	f85d fb08 	ldr.w	pc, [sp], #8
 8010fea:	bf00      	nop

08010fec <__aeabi_dcmpge>:
 8010fec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8010ff0:	f7ff ffce 	bl	8010f90 <__aeabi_cdrcmple>
 8010ff4:	bf94      	ite	ls
 8010ff6:	2001      	movls	r0, #1
 8010ff8:	2000      	movhi	r0, #0
 8010ffa:	f85d fb08 	ldr.w	pc, [sp], #8
 8010ffe:	bf00      	nop

08011000 <__aeabi_dcmpgt>:
 8011000:	f84d ed08 	str.w	lr, [sp, #-8]!
 8011004:	f7ff ffc4 	bl	8010f90 <__aeabi_cdrcmple>
 8011008:	bf34      	ite	cc
 801100a:	2001      	movcc	r0, #1
 801100c:	2000      	movcs	r0, #0
 801100e:	f85d fb08 	ldr.w	pc, [sp], #8
 8011012:	bf00      	nop

08011014 <__aeabi_d2iz>:
 8011014:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8011018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801101c:	d215      	bcs.n	801104a <__aeabi_d2iz+0x36>
 801101e:	d511      	bpl.n	8011044 <__aeabi_d2iz+0x30>
 8011020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011028:	d912      	bls.n	8011050 <__aeabi_d2iz+0x3c>
 801102a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801102e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8011036:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 801103a:	fa23 f002 	lsr.w	r0, r3, r2
 801103e:	bf18      	it	ne
 8011040:	4240      	negne	r0, r0
 8011042:	4770      	bx	lr
 8011044:	f04f 0000 	mov.w	r0, #0
 8011048:	4770      	bx	lr
 801104a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 801104e:	d105      	bne.n	801105c <__aeabi_d2iz+0x48>
 8011050:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8011054:	bf08      	it	eq
 8011056:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 801105a:	4770      	bx	lr
 801105c:	f04f 0000 	mov.w	r0, #0
 8011060:	4770      	bx	lr
 8011062:	bf00      	nop

08011064 <__aeabi_d2uiz>:
 8011064:	004a      	lsls	r2, r1, #1
 8011066:	d211      	bcs.n	801108c <__aeabi_d2uiz+0x28>
 8011068:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 801106c:	d211      	bcs.n	8011092 <__aeabi_d2uiz+0x2e>
 801106e:	d50d      	bpl.n	801108c <__aeabi_d2uiz+0x28>
 8011070:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8011074:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8011078:	d40e      	bmi.n	8011098 <__aeabi_d2uiz+0x34>
 801107a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 801107e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8011082:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8011086:	fa23 f002 	lsr.w	r0, r3, r2
 801108a:	4770      	bx	lr
 801108c:	f04f 0000 	mov.w	r0, #0
 8011090:	4770      	bx	lr
 8011092:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8011096:	d102      	bne.n	801109e <__aeabi_d2uiz+0x3a>
 8011098:	f04f 30ff 	mov.w	r0, #4294967295
 801109c:	4770      	bx	lr
 801109e:	f04f 0000 	mov.w	r0, #0
 80110a2:	4770      	bx	lr

080110a4 <__aeabi_d2f>:
 80110a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80110a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80110ac:	bf24      	itt	cs
 80110ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80110b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80110b6:	d90d      	bls.n	80110d4 <__aeabi_d2f+0x30>
 80110b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80110bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80110c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80110c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80110c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80110cc:	bf08      	it	eq
 80110ce:	f020 0001 	biceq.w	r0, r0, #1
 80110d2:	4770      	bx	lr
 80110d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80110d8:	d121      	bne.n	801111e <__aeabi_d2f+0x7a>
 80110da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80110de:	bfbc      	itt	lt
 80110e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80110e4:	4770      	bxlt	lr
 80110e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80110ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80110ee:	f1c2 0218 	rsb	r2, r2, #24
 80110f2:	f1c2 0c20 	rsb	ip, r2, #32
 80110f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80110fa:	fa20 f002 	lsr.w	r0, r0, r2
 80110fe:	bf18      	it	ne
 8011100:	f040 0001 	orrne.w	r0, r0, #1
 8011104:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8011108:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 801110c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8011110:	ea40 000c 	orr.w	r0, r0, ip
 8011114:	fa23 f302 	lsr.w	r3, r3, r2
 8011118:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801111c:	e7cc      	b.n	80110b8 <__aeabi_d2f+0x14>
 801111e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8011122:	d107      	bne.n	8011134 <__aeabi_d2f+0x90>
 8011124:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8011128:	bf1e      	ittt	ne
 801112a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 801112e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8011132:	4770      	bxne	lr
 8011134:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8011138:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 801113c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8011140:	4770      	bx	lr
 8011142:	bf00      	nop

08011144 <__aeabi_uldivmod>:
 8011144:	b94b      	cbnz	r3, 801115a <__aeabi_uldivmod+0x16>
 8011146:	b942      	cbnz	r2, 801115a <__aeabi_uldivmod+0x16>
 8011148:	2900      	cmp	r1, #0
 801114a:	bf08      	it	eq
 801114c:	2800      	cmpeq	r0, #0
 801114e:	d002      	beq.n	8011156 <__aeabi_uldivmod+0x12>
 8011150:	f04f 31ff 	mov.w	r1, #4294967295
 8011154:	4608      	mov	r0, r1
 8011156:	f000 b83b 	b.w	80111d0 <__aeabi_idiv0>
 801115a:	b082      	sub	sp, #8
 801115c:	46ec      	mov	ip, sp
 801115e:	e92d 5000 	stmdb	sp!, {ip, lr}
 8011162:	f000 f81d 	bl	80111a0 <__gnu_uldivmod_helper>
 8011166:	f8dd e004 	ldr.w	lr, [sp, #4]
 801116a:	b002      	add	sp, #8
 801116c:	bc0c      	pop	{r2, r3}
 801116e:	4770      	bx	lr

08011170 <__gnu_ldivmod_helper>:
 8011170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011174:	9c06      	ldr	r4, [sp, #24]
 8011176:	4615      	mov	r5, r2
 8011178:	4606      	mov	r6, r0
 801117a:	460f      	mov	r7, r1
 801117c:	4698      	mov	r8, r3
 801117e:	f000 f829 	bl	80111d4 <__divdi3>
 8011182:	fb05 f301 	mul.w	r3, r5, r1
 8011186:	fb00 3808 	mla	r8, r0, r8, r3
 801118a:	fba5 2300 	umull	r2, r3, r5, r0
 801118e:	1ab2      	subs	r2, r6, r2
 8011190:	4443      	add	r3, r8
 8011192:	eb67 0303 	sbc.w	r3, r7, r3
 8011196:	e9c4 2300 	strd	r2, r3, [r4]
 801119a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801119e:	bf00      	nop

080111a0 <__gnu_uldivmod_helper>:
 80111a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a4:	9c06      	ldr	r4, [sp, #24]
 80111a6:	4690      	mov	r8, r2
 80111a8:	4606      	mov	r6, r0
 80111aa:	460f      	mov	r7, r1
 80111ac:	461d      	mov	r5, r3
 80111ae:	f000 f95f 	bl	8011470 <__udivdi3>
 80111b2:	fb00 f505 	mul.w	r5, r0, r5
 80111b6:	fba0 2308 	umull	r2, r3, r0, r8
 80111ba:	fb08 5501 	mla	r5, r8, r1, r5
 80111be:	1ab2      	subs	r2, r6, r2
 80111c0:	442b      	add	r3, r5
 80111c2:	eb67 0303 	sbc.w	r3, r7, r3
 80111c6:	e9c4 2300 	strd	r2, r3, [r4]
 80111ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111ce:	bf00      	nop

080111d0 <__aeabi_idiv0>:
 80111d0:	4770      	bx	lr
 80111d2:	bf00      	nop

080111d4 <__divdi3>:
 80111d4:	2900      	cmp	r1, #0
 80111d6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80111da:	f2c0 80a6 	blt.w	801132a <__divdi3+0x156>
 80111de:	2600      	movs	r6, #0
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	f2c0 809c 	blt.w	801131e <__divdi3+0x14a>
 80111e6:	4688      	mov	r8, r1
 80111e8:	4694      	mov	ip, r2
 80111ea:	469e      	mov	lr, r3
 80111ec:	4615      	mov	r5, r2
 80111ee:	4604      	mov	r4, r0
 80111f0:	460f      	mov	r7, r1
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d13d      	bne.n	8011272 <__divdi3+0x9e>
 80111f6:	428a      	cmp	r2, r1
 80111f8:	d959      	bls.n	80112ae <__divdi3+0xda>
 80111fa:	fab2 f382 	clz	r3, r2
 80111fe:	b13b      	cbz	r3, 8011210 <__divdi3+0x3c>
 8011200:	f1c3 0220 	rsb	r2, r3, #32
 8011204:	409f      	lsls	r7, r3
 8011206:	fa20 f202 	lsr.w	r2, r0, r2
 801120a:	409d      	lsls	r5, r3
 801120c:	4317      	orrs	r7, r2
 801120e:	409c      	lsls	r4, r3
 8011210:	0c29      	lsrs	r1, r5, #16
 8011212:	0c22      	lsrs	r2, r4, #16
 8011214:	fbb7 fef1 	udiv	lr, r7, r1
 8011218:	b2a8      	uxth	r0, r5
 801121a:	fb01 771e 	mls	r7, r1, lr, r7
 801121e:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8011222:	fb00 f30e 	mul.w	r3, r0, lr
 8011226:	42bb      	cmp	r3, r7
 8011228:	d90a      	bls.n	8011240 <__divdi3+0x6c>
 801122a:	197f      	adds	r7, r7, r5
 801122c:	f10e 32ff 	add.w	r2, lr, #4294967295
 8011230:	f080 8105 	bcs.w	801143e <__divdi3+0x26a>
 8011234:	42bb      	cmp	r3, r7
 8011236:	f240 8102 	bls.w	801143e <__divdi3+0x26a>
 801123a:	f1ae 0e02 	sub.w	lr, lr, #2
 801123e:	442f      	add	r7, r5
 8011240:	1aff      	subs	r7, r7, r3
 8011242:	b2a4      	uxth	r4, r4
 8011244:	fbb7 f3f1 	udiv	r3, r7, r1
 8011248:	fb01 7713 	mls	r7, r1, r3, r7
 801124c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011250:	fb00 f003 	mul.w	r0, r0, r3
 8011254:	42b8      	cmp	r0, r7
 8011256:	d908      	bls.n	801126a <__divdi3+0x96>
 8011258:	197f      	adds	r7, r7, r5
 801125a:	f103 32ff 	add.w	r2, r3, #4294967295
 801125e:	f080 80f0 	bcs.w	8011442 <__divdi3+0x26e>
 8011262:	42b8      	cmp	r0, r7
 8011264:	f240 80ed 	bls.w	8011442 <__divdi3+0x26e>
 8011268:	3b02      	subs	r3, #2
 801126a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
 801126e:	2200      	movs	r2, #0
 8011270:	e003      	b.n	801127a <__divdi3+0xa6>
 8011272:	428b      	cmp	r3, r1
 8011274:	d90f      	bls.n	8011296 <__divdi3+0xc2>
 8011276:	2200      	movs	r2, #0
 8011278:	4613      	mov	r3, r2
 801127a:	1c34      	adds	r4, r6, #0
 801127c:	bf18      	it	ne
 801127e:	2401      	movne	r4, #1
 8011280:	4260      	negs	r0, r4
 8011282:	f04f 0500 	mov.w	r5, #0
 8011286:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
 801128a:	4058      	eors	r0, r3
 801128c:	4051      	eors	r1, r2
 801128e:	1900      	adds	r0, r0, r4
 8011290:	4169      	adcs	r1, r5
 8011292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011296:	fab3 f283 	clz	r2, r3
 801129a:	2a00      	cmp	r2, #0
 801129c:	f040 8086 	bne.w	80113ac <__divdi3+0x1d8>
 80112a0:	428b      	cmp	r3, r1
 80112a2:	d302      	bcc.n	80112aa <__divdi3+0xd6>
 80112a4:	4584      	cmp	ip, r0
 80112a6:	f200 80db 	bhi.w	8011460 <__divdi3+0x28c>
 80112aa:	2301      	movs	r3, #1
 80112ac:	e7e5      	b.n	801127a <__divdi3+0xa6>
 80112ae:	b912      	cbnz	r2, 80112b6 <__divdi3+0xe2>
 80112b0:	2301      	movs	r3, #1
 80112b2:	fbb3 f5f2 	udiv	r5, r3, r2
 80112b6:	fab5 f085 	clz	r0, r5
 80112ba:	2800      	cmp	r0, #0
 80112bc:	d13b      	bne.n	8011336 <__divdi3+0x162>
 80112be:	1b78      	subs	r0, r7, r5
 80112c0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80112c4:	fa1f fc85 	uxth.w	ip, r5
 80112c8:	2201      	movs	r2, #1
 80112ca:	fbb0 f8fe 	udiv	r8, r0, lr
 80112ce:	0c21      	lsrs	r1, r4, #16
 80112d0:	fb0e 0718 	mls	r7, lr, r8, r0
 80112d4:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
 80112d8:	fb0c f308 	mul.w	r3, ip, r8
 80112dc:	42bb      	cmp	r3, r7
 80112de:	d907      	bls.n	80112f0 <__divdi3+0x11c>
 80112e0:	197f      	adds	r7, r7, r5
 80112e2:	f108 31ff 	add.w	r1, r8, #4294967295
 80112e6:	d202      	bcs.n	80112ee <__divdi3+0x11a>
 80112e8:	42bb      	cmp	r3, r7
 80112ea:	f200 80bd 	bhi.w	8011468 <__divdi3+0x294>
 80112ee:	4688      	mov	r8, r1
 80112f0:	1aff      	subs	r7, r7, r3
 80112f2:	b2a4      	uxth	r4, r4
 80112f4:	fbb7 f3fe 	udiv	r3, r7, lr
 80112f8:	fb0e 7713 	mls	r7, lr, r3, r7
 80112fc:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8011300:	fb0c fc03 	mul.w	ip, ip, r3
 8011304:	45bc      	cmp	ip, r7
 8011306:	d907      	bls.n	8011318 <__divdi3+0x144>
 8011308:	197f      	adds	r7, r7, r5
 801130a:	f103 31ff 	add.w	r1, r3, #4294967295
 801130e:	d202      	bcs.n	8011316 <__divdi3+0x142>
 8011310:	45bc      	cmp	ip, r7
 8011312:	f200 80a7 	bhi.w	8011464 <__divdi3+0x290>
 8011316:	460b      	mov	r3, r1
 8011318:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801131c:	e7ad      	b.n	801127a <__divdi3+0xa6>
 801131e:	4252      	negs	r2, r2
 8011320:	ea6f 0606 	mvn.w	r6, r6
 8011324:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8011328:	e75d      	b.n	80111e6 <__divdi3+0x12>
 801132a:	4240      	negs	r0, r0
 801132c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8011330:	f04f 36ff 	mov.w	r6, #4294967295
 8011334:	e754      	b.n	80111e0 <__divdi3+0xc>
 8011336:	f1c0 0220 	rsb	r2, r0, #32
 801133a:	fa24 f102 	lsr.w	r1, r4, r2
 801133e:	fa07 f300 	lsl.w	r3, r7, r0
 8011342:	4085      	lsls	r5, r0
 8011344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011348:	40d7      	lsrs	r7, r2
 801134a:	4319      	orrs	r1, r3
 801134c:	fbb7 f2fe 	udiv	r2, r7, lr
 8011350:	0c0b      	lsrs	r3, r1, #16
 8011352:	fb0e 7712 	mls	r7, lr, r2, r7
 8011356:	fa1f fc85 	uxth.w	ip, r5
 801135a:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801135e:	fb0c f702 	mul.w	r7, ip, r2
 8011362:	429f      	cmp	r7, r3
 8011364:	fa04 f400 	lsl.w	r4, r4, r0
 8011368:	d907      	bls.n	801137a <__divdi3+0x1a6>
 801136a:	195b      	adds	r3, r3, r5
 801136c:	f102 30ff 	add.w	r0, r2, #4294967295
 8011370:	d274      	bcs.n	801145c <__divdi3+0x288>
 8011372:	429f      	cmp	r7, r3
 8011374:	d972      	bls.n	801145c <__divdi3+0x288>
 8011376:	3a02      	subs	r2, #2
 8011378:	442b      	add	r3, r5
 801137a:	1bdf      	subs	r7, r3, r7
 801137c:	b289      	uxth	r1, r1
 801137e:	fbb7 f8fe 	udiv	r8, r7, lr
 8011382:	fb0e 7318 	mls	r3, lr, r8, r7
 8011386:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801138a:	fb0c f708 	mul.w	r7, ip, r8
 801138e:	429f      	cmp	r7, r3
 8011390:	d908      	bls.n	80113a4 <__divdi3+0x1d0>
 8011392:	195b      	adds	r3, r3, r5
 8011394:	f108 31ff 	add.w	r1, r8, #4294967295
 8011398:	d25c      	bcs.n	8011454 <__divdi3+0x280>
 801139a:	429f      	cmp	r7, r3
 801139c:	d95a      	bls.n	8011454 <__divdi3+0x280>
 801139e:	f1a8 0802 	sub.w	r8, r8, #2
 80113a2:	442b      	add	r3, r5
 80113a4:	1bd8      	subs	r0, r3, r7
 80113a6:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80113aa:	e78e      	b.n	80112ca <__divdi3+0xf6>
 80113ac:	f1c2 0320 	rsb	r3, r2, #32
 80113b0:	fa2c f103 	lsr.w	r1, ip, r3
 80113b4:	fa0e fe02 	lsl.w	lr, lr, r2
 80113b8:	fa20 f703 	lsr.w	r7, r0, r3
 80113bc:	ea41 0e0e 	orr.w	lr, r1, lr
 80113c0:	fa08 f002 	lsl.w	r0, r8, r2
 80113c4:	fa28 f103 	lsr.w	r1, r8, r3
 80113c8:	ea4f 451e 	mov.w	r5, lr, lsr #16
 80113cc:	4338      	orrs	r0, r7
 80113ce:	fbb1 f8f5 	udiv	r8, r1, r5
 80113d2:	0c03      	lsrs	r3, r0, #16
 80113d4:	fb05 1118 	mls	r1, r5, r8, r1
 80113d8:	fa1f f78e 	uxth.w	r7, lr
 80113dc:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80113e0:	fb07 f308 	mul.w	r3, r7, r8
 80113e4:	428b      	cmp	r3, r1
 80113e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80113ea:	d909      	bls.n	8011400 <__divdi3+0x22c>
 80113ec:	eb11 010e 	adds.w	r1, r1, lr
 80113f0:	f108 39ff 	add.w	r9, r8, #4294967295
 80113f4:	d230      	bcs.n	8011458 <__divdi3+0x284>
 80113f6:	428b      	cmp	r3, r1
 80113f8:	d92e      	bls.n	8011458 <__divdi3+0x284>
 80113fa:	f1a8 0802 	sub.w	r8, r8, #2
 80113fe:	4471      	add	r1, lr
 8011400:	1ac9      	subs	r1, r1, r3
 8011402:	b280      	uxth	r0, r0
 8011404:	fbb1 f3f5 	udiv	r3, r1, r5
 8011408:	fb05 1113 	mls	r1, r5, r3, r1
 801140c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8011410:	fb07 f703 	mul.w	r7, r7, r3
 8011414:	428f      	cmp	r7, r1
 8011416:	d908      	bls.n	801142a <__divdi3+0x256>
 8011418:	eb11 010e 	adds.w	r1, r1, lr
 801141c:	f103 30ff 	add.w	r0, r3, #4294967295
 8011420:	d216      	bcs.n	8011450 <__divdi3+0x27c>
 8011422:	428f      	cmp	r7, r1
 8011424:	d914      	bls.n	8011450 <__divdi3+0x27c>
 8011426:	3b02      	subs	r3, #2
 8011428:	4471      	add	r1, lr
 801142a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 801142e:	1bc9      	subs	r1, r1, r7
 8011430:	fba3 890c 	umull	r8, r9, r3, ip
 8011434:	4549      	cmp	r1, r9
 8011436:	d309      	bcc.n	801144c <__divdi3+0x278>
 8011438:	d005      	beq.n	8011446 <__divdi3+0x272>
 801143a:	2200      	movs	r2, #0
 801143c:	e71d      	b.n	801127a <__divdi3+0xa6>
 801143e:	4696      	mov	lr, r2
 8011440:	e6fe      	b.n	8011240 <__divdi3+0x6c>
 8011442:	4613      	mov	r3, r2
 8011444:	e711      	b.n	801126a <__divdi3+0x96>
 8011446:	4094      	lsls	r4, r2
 8011448:	4544      	cmp	r4, r8
 801144a:	d2f6      	bcs.n	801143a <__divdi3+0x266>
 801144c:	3b01      	subs	r3, #1
 801144e:	e7f4      	b.n	801143a <__divdi3+0x266>
 8011450:	4603      	mov	r3, r0
 8011452:	e7ea      	b.n	801142a <__divdi3+0x256>
 8011454:	4688      	mov	r8, r1
 8011456:	e7a5      	b.n	80113a4 <__divdi3+0x1d0>
 8011458:	46c8      	mov	r8, r9
 801145a:	e7d1      	b.n	8011400 <__divdi3+0x22c>
 801145c:	4602      	mov	r2, r0
 801145e:	e78c      	b.n	801137a <__divdi3+0x1a6>
 8011460:	4613      	mov	r3, r2
 8011462:	e70a      	b.n	801127a <__divdi3+0xa6>
 8011464:	3b02      	subs	r3, #2
 8011466:	e757      	b.n	8011318 <__divdi3+0x144>
 8011468:	f1a8 0802 	sub.w	r8, r8, #2
 801146c:	442f      	add	r7, r5
 801146e:	e73f      	b.n	80112f0 <__divdi3+0x11c>

08011470 <__udivdi3>:
 8011470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011474:	2b00      	cmp	r3, #0
 8011476:	d144      	bne.n	8011502 <__udivdi3+0x92>
 8011478:	428a      	cmp	r2, r1
 801147a:	4615      	mov	r5, r2
 801147c:	4604      	mov	r4, r0
 801147e:	d94f      	bls.n	8011520 <__udivdi3+0xb0>
 8011480:	fab2 f782 	clz	r7, r2
 8011484:	460e      	mov	r6, r1
 8011486:	b14f      	cbz	r7, 801149c <__udivdi3+0x2c>
 8011488:	f1c7 0320 	rsb	r3, r7, #32
 801148c:	40b9      	lsls	r1, r7
 801148e:	fa20 f603 	lsr.w	r6, r0, r3
 8011492:	fa02 f507 	lsl.w	r5, r2, r7
 8011496:	430e      	orrs	r6, r1
 8011498:	fa00 f407 	lsl.w	r4, r0, r7
 801149c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80114a0:	0c23      	lsrs	r3, r4, #16
 80114a2:	fbb6 f0fe 	udiv	r0, r6, lr
 80114a6:	b2af      	uxth	r7, r5
 80114a8:	fb0e 6110 	mls	r1, lr, r0, r6
 80114ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80114b0:	fb07 f100 	mul.w	r1, r7, r0
 80114b4:	4299      	cmp	r1, r3
 80114b6:	d909      	bls.n	80114cc <__udivdi3+0x5c>
 80114b8:	195b      	adds	r3, r3, r5
 80114ba:	f100 32ff 	add.w	r2, r0, #4294967295
 80114be:	f080 80ec 	bcs.w	801169a <__udivdi3+0x22a>
 80114c2:	4299      	cmp	r1, r3
 80114c4:	f240 80e9 	bls.w	801169a <__udivdi3+0x22a>
 80114c8:	3802      	subs	r0, #2
 80114ca:	442b      	add	r3, r5
 80114cc:	1a5a      	subs	r2, r3, r1
 80114ce:	b2a4      	uxth	r4, r4
 80114d0:	fbb2 f3fe 	udiv	r3, r2, lr
 80114d4:	fb0e 2213 	mls	r2, lr, r3, r2
 80114d8:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
 80114dc:	fb07 f703 	mul.w	r7, r7, r3
 80114e0:	4297      	cmp	r7, r2
 80114e2:	d908      	bls.n	80114f6 <__udivdi3+0x86>
 80114e4:	1952      	adds	r2, r2, r5
 80114e6:	f103 31ff 	add.w	r1, r3, #4294967295
 80114ea:	f080 80d8 	bcs.w	801169e <__udivdi3+0x22e>
 80114ee:	4297      	cmp	r7, r2
 80114f0:	f240 80d5 	bls.w	801169e <__udivdi3+0x22e>
 80114f4:	3b02      	subs	r3, #2
 80114f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80114fa:	2600      	movs	r6, #0
 80114fc:	4631      	mov	r1, r6
 80114fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011502:	428b      	cmp	r3, r1
 8011504:	d847      	bhi.n	8011596 <__udivdi3+0x126>
 8011506:	fab3 f683 	clz	r6, r3
 801150a:	2e00      	cmp	r6, #0
 801150c:	d148      	bne.n	80115a0 <__udivdi3+0x130>
 801150e:	428b      	cmp	r3, r1
 8011510:	d302      	bcc.n	8011518 <__udivdi3+0xa8>
 8011512:	4282      	cmp	r2, r0
 8011514:	f200 80cd 	bhi.w	80116b2 <__udivdi3+0x242>
 8011518:	2001      	movs	r0, #1
 801151a:	4631      	mov	r1, r6
 801151c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011520:	b912      	cbnz	r2, 8011528 <__udivdi3+0xb8>
 8011522:	2501      	movs	r5, #1
 8011524:	fbb5 f5f2 	udiv	r5, r5, r2
 8011528:	fab5 f885 	clz	r8, r5
 801152c:	f1b8 0f00 	cmp.w	r8, #0
 8011530:	d177      	bne.n	8011622 <__udivdi3+0x1b2>
 8011532:	1b4a      	subs	r2, r1, r5
 8011534:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011538:	b2af      	uxth	r7, r5
 801153a:	2601      	movs	r6, #1
 801153c:	fbb2 f0fe 	udiv	r0, r2, lr
 8011540:	0c23      	lsrs	r3, r4, #16
 8011542:	fb0e 2110 	mls	r1, lr, r0, r2
 8011546:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 801154a:	fb07 f300 	mul.w	r3, r7, r0
 801154e:	428b      	cmp	r3, r1
 8011550:	d907      	bls.n	8011562 <__udivdi3+0xf2>
 8011552:	1949      	adds	r1, r1, r5
 8011554:	f100 32ff 	add.w	r2, r0, #4294967295
 8011558:	d202      	bcs.n	8011560 <__udivdi3+0xf0>
 801155a:	428b      	cmp	r3, r1
 801155c:	f200 80ba 	bhi.w	80116d4 <__udivdi3+0x264>
 8011560:	4610      	mov	r0, r2
 8011562:	1ac9      	subs	r1, r1, r3
 8011564:	b2a4      	uxth	r4, r4
 8011566:	fbb1 f3fe 	udiv	r3, r1, lr
 801156a:	fb0e 1113 	mls	r1, lr, r3, r1
 801156e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8011572:	fb07 f703 	mul.w	r7, r7, r3
 8011576:	42a7      	cmp	r7, r4
 8011578:	d908      	bls.n	801158c <__udivdi3+0x11c>
 801157a:	1964      	adds	r4, r4, r5
 801157c:	f103 32ff 	add.w	r2, r3, #4294967295
 8011580:	f080 808f 	bcs.w	80116a2 <__udivdi3+0x232>
 8011584:	42a7      	cmp	r7, r4
 8011586:	f240 808c 	bls.w	80116a2 <__udivdi3+0x232>
 801158a:	3b02      	subs	r3, #2
 801158c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8011590:	4631      	mov	r1, r6
 8011592:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011596:	2600      	movs	r6, #0
 8011598:	4630      	mov	r0, r6
 801159a:	4631      	mov	r1, r6
 801159c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115a0:	f1c6 0420 	rsb	r4, r6, #32
 80115a4:	fa22 f504 	lsr.w	r5, r2, r4
 80115a8:	40b3      	lsls	r3, r6
 80115aa:	432b      	orrs	r3, r5
 80115ac:	fa20 fc04 	lsr.w	ip, r0, r4
 80115b0:	fa01 f706 	lsl.w	r7, r1, r6
 80115b4:	fa21 f504 	lsr.w	r5, r1, r4
 80115b8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80115bc:	ea4c 0707 	orr.w	r7, ip, r7
 80115c0:	fbb5 f8fe 	udiv	r8, r5, lr
 80115c4:	0c39      	lsrs	r1, r7, #16
 80115c6:	fb0e 5518 	mls	r5, lr, r8, r5
 80115ca:	fa1f fc83 	uxth.w	ip, r3
 80115ce:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 80115d2:	fb0c f108 	mul.w	r1, ip, r8
 80115d6:	42a9      	cmp	r1, r5
 80115d8:	fa02 f206 	lsl.w	r2, r2, r6
 80115dc:	d904      	bls.n	80115e8 <__udivdi3+0x178>
 80115de:	18ed      	adds	r5, r5, r3
 80115e0:	f108 34ff 	add.w	r4, r8, #4294967295
 80115e4:	d367      	bcc.n	80116b6 <__udivdi3+0x246>
 80115e6:	46a0      	mov	r8, r4
 80115e8:	1a6d      	subs	r5, r5, r1
 80115ea:	b2bf      	uxth	r7, r7
 80115ec:	fbb5 f4fe 	udiv	r4, r5, lr
 80115f0:	fb0e 5514 	mls	r5, lr, r4, r5
 80115f4:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
 80115f8:	fb0c fc04 	mul.w	ip, ip, r4
 80115fc:	458c      	cmp	ip, r1
 80115fe:	d904      	bls.n	801160a <__udivdi3+0x19a>
 8011600:	18c9      	adds	r1, r1, r3
 8011602:	f104 35ff 	add.w	r5, r4, #4294967295
 8011606:	d35c      	bcc.n	80116c2 <__udivdi3+0x252>
 8011608:	462c      	mov	r4, r5
 801160a:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
 801160e:	ebcc 0101 	rsb	r1, ip, r1
 8011612:	fba4 2302 	umull	r2, r3, r4, r2
 8011616:	4299      	cmp	r1, r3
 8011618:	d348      	bcc.n	80116ac <__udivdi3+0x23c>
 801161a:	d044      	beq.n	80116a6 <__udivdi3+0x236>
 801161c:	4620      	mov	r0, r4
 801161e:	2600      	movs	r6, #0
 8011620:	e76c      	b.n	80114fc <__udivdi3+0x8c>
 8011622:	f1c8 0420 	rsb	r4, r8, #32
 8011626:	fa01 f308 	lsl.w	r3, r1, r8
 801162a:	fa05 f508 	lsl.w	r5, r5, r8
 801162e:	fa20 f704 	lsr.w	r7, r0, r4
 8011632:	40e1      	lsrs	r1, r4
 8011634:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8011638:	431f      	orrs	r7, r3
 801163a:	fbb1 f6fe 	udiv	r6, r1, lr
 801163e:	0c3a      	lsrs	r2, r7, #16
 8011640:	fb0e 1116 	mls	r1, lr, r6, r1
 8011644:	fa1f fc85 	uxth.w	ip, r5
 8011648:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
 801164c:	fb0c f206 	mul.w	r2, ip, r6
 8011650:	429a      	cmp	r2, r3
 8011652:	fa00 f408 	lsl.w	r4, r0, r8
 8011656:	d907      	bls.n	8011668 <__udivdi3+0x1f8>
 8011658:	195b      	adds	r3, r3, r5
 801165a:	f106 31ff 	add.w	r1, r6, #4294967295
 801165e:	d237      	bcs.n	80116d0 <__udivdi3+0x260>
 8011660:	429a      	cmp	r2, r3
 8011662:	d935      	bls.n	80116d0 <__udivdi3+0x260>
 8011664:	3e02      	subs	r6, #2
 8011666:	442b      	add	r3, r5
 8011668:	1a9b      	subs	r3, r3, r2
 801166a:	b2bf      	uxth	r7, r7
 801166c:	fbb3 f0fe 	udiv	r0, r3, lr
 8011670:	fb0e 3310 	mls	r3, lr, r0, r3
 8011674:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8011678:	fb0c f100 	mul.w	r1, ip, r0
 801167c:	4299      	cmp	r1, r3
 801167e:	d907      	bls.n	8011690 <__udivdi3+0x220>
 8011680:	195b      	adds	r3, r3, r5
 8011682:	f100 32ff 	add.w	r2, r0, #4294967295
 8011686:	d221      	bcs.n	80116cc <__udivdi3+0x25c>
 8011688:	4299      	cmp	r1, r3
 801168a:	d91f      	bls.n	80116cc <__udivdi3+0x25c>
 801168c:	3802      	subs	r0, #2
 801168e:	442b      	add	r3, r5
 8011690:	1a5a      	subs	r2, r3, r1
 8011692:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8011696:	4667      	mov	r7, ip
 8011698:	e750      	b.n	801153c <__udivdi3+0xcc>
 801169a:	4610      	mov	r0, r2
 801169c:	e716      	b.n	80114cc <__udivdi3+0x5c>
 801169e:	460b      	mov	r3, r1
 80116a0:	e729      	b.n	80114f6 <__udivdi3+0x86>
 80116a2:	4613      	mov	r3, r2
 80116a4:	e772      	b.n	801158c <__udivdi3+0x11c>
 80116a6:	40b0      	lsls	r0, r6
 80116a8:	4290      	cmp	r0, r2
 80116aa:	d2b7      	bcs.n	801161c <__udivdi3+0x1ac>
 80116ac:	1e60      	subs	r0, r4, #1
 80116ae:	2600      	movs	r6, #0
 80116b0:	e724      	b.n	80114fc <__udivdi3+0x8c>
 80116b2:	4630      	mov	r0, r6
 80116b4:	e722      	b.n	80114fc <__udivdi3+0x8c>
 80116b6:	42a9      	cmp	r1, r5
 80116b8:	d995      	bls.n	80115e6 <__udivdi3+0x176>
 80116ba:	f1a8 0802 	sub.w	r8, r8, #2
 80116be:	441d      	add	r5, r3
 80116c0:	e792      	b.n	80115e8 <__udivdi3+0x178>
 80116c2:	458c      	cmp	ip, r1
 80116c4:	d9a0      	bls.n	8011608 <__udivdi3+0x198>
 80116c6:	3c02      	subs	r4, #2
 80116c8:	4419      	add	r1, r3
 80116ca:	e79e      	b.n	801160a <__udivdi3+0x19a>
 80116cc:	4610      	mov	r0, r2
 80116ce:	e7df      	b.n	8011690 <__udivdi3+0x220>
 80116d0:	460e      	mov	r6, r1
 80116d2:	e7c9      	b.n	8011668 <__udivdi3+0x1f8>
 80116d4:	3802      	subs	r0, #2
 80116d6:	4429      	add	r1, r5
 80116d8:	e743      	b.n	8011562 <__udivdi3+0xf2>
 80116da:	bf00      	nop

080116dc <atoi>:
 80116dc:	2100      	movs	r1, #0
 80116de:	220a      	movs	r2, #10
 80116e0:	f000 bc58 	b.w	8011f94 <strtol>

080116e4 <__errno>:
 80116e4:	4b01      	ldr	r3, [pc, #4]	; (80116ec <__errno+0x8>)
 80116e6:	6818      	ldr	r0, [r3, #0]
 80116e8:	4770      	bx	lr
 80116ea:	bf00      	nop
 80116ec:	1fff4330 	.word	0x1fff4330

080116f0 <__libc_init_array>:
 80116f0:	b570      	push	{r4, r5, r6, lr}
 80116f2:	4b0e      	ldr	r3, [pc, #56]	; (801172c <__libc_init_array+0x3c>)
 80116f4:	4c0e      	ldr	r4, [pc, #56]	; (8011730 <__libc_init_array+0x40>)
 80116f6:	1ae4      	subs	r4, r4, r3
 80116f8:	10a4      	asrs	r4, r4, #2
 80116fa:	2500      	movs	r5, #0
 80116fc:	461e      	mov	r6, r3
 80116fe:	42a5      	cmp	r5, r4
 8011700:	d004      	beq.n	801170c <__libc_init_array+0x1c>
 8011702:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011706:	4798      	blx	r3
 8011708:	3501      	adds	r5, #1
 801170a:	e7f8      	b.n	80116fe <__libc_init_array+0xe>
 801170c:	f7f3 fb88 	bl	8004e20 <_init>
 8011710:	4c08      	ldr	r4, [pc, #32]	; (8011734 <__libc_init_array+0x44>)
 8011712:	4b09      	ldr	r3, [pc, #36]	; (8011738 <__libc_init_array+0x48>)
 8011714:	1ae4      	subs	r4, r4, r3
 8011716:	10a4      	asrs	r4, r4, #2
 8011718:	2500      	movs	r5, #0
 801171a:	461e      	mov	r6, r3
 801171c:	42a5      	cmp	r5, r4
 801171e:	d004      	beq.n	801172a <__libc_init_array+0x3a>
 8011720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011724:	4798      	blx	r3
 8011726:	3501      	adds	r5, #1
 8011728:	e7f8      	b.n	801171c <__libc_init_array+0x2c>
 801172a:	bd70      	pop	{r4, r5, r6, pc}
 801172c:	1fff4378 	.word	0x1fff4378
 8011730:	1fff4378 	.word	0x1fff4378
 8011734:	1fff4378 	.word	0x1fff4378
 8011738:	1fff4378 	.word	0x1fff4378

0801173c <memcpy>:
 801173c:	b510      	push	{r4, lr}
 801173e:	1e43      	subs	r3, r0, #1
 8011740:	440a      	add	r2, r1
 8011742:	4291      	cmp	r1, r2
 8011744:	d004      	beq.n	8011750 <memcpy+0x14>
 8011746:	f811 4b01 	ldrb.w	r4, [r1], #1
 801174a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801174e:	e7f8      	b.n	8011742 <memcpy+0x6>
 8011750:	bd10      	pop	{r4, pc}

08011752 <memset>:
 8011752:	4402      	add	r2, r0
 8011754:	4603      	mov	r3, r0
 8011756:	4293      	cmp	r3, r2
 8011758:	d002      	beq.n	8011760 <memset+0xe>
 801175a:	f803 1b01 	strb.w	r1, [r3], #1
 801175e:	e7fa      	b.n	8011756 <memset+0x4>
 8011760:	4770      	bx	lr
	...

08011764 <validate_structure>:
 8011764:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011766:	6801      	ldr	r1, [r0, #0]
 8011768:	293b      	cmp	r1, #59	; 0x3b
 801176a:	4604      	mov	r4, r0
 801176c:	d911      	bls.n	8011792 <validate_structure+0x2e>
 801176e:	223c      	movs	r2, #60	; 0x3c
 8011770:	4668      	mov	r0, sp
 8011772:	f000 fd85 	bl	8012280 <div>
 8011776:	9a01      	ldr	r2, [sp, #4]
 8011778:	6861      	ldr	r1, [r4, #4]
 801177a:	9b00      	ldr	r3, [sp, #0]
 801177c:	2a00      	cmp	r2, #0
 801177e:	440b      	add	r3, r1
 8011780:	6063      	str	r3, [r4, #4]
 8011782:	bfbb      	ittet	lt
 8011784:	323c      	addlt	r2, #60	; 0x3c
 8011786:	f103 33ff 	addlt.w	r3, r3, #4294967295
 801178a:	6022      	strge	r2, [r4, #0]
 801178c:	6022      	strlt	r2, [r4, #0]
 801178e:	bfb8      	it	lt
 8011790:	6063      	strlt	r3, [r4, #4]
 8011792:	6861      	ldr	r1, [r4, #4]
 8011794:	293b      	cmp	r1, #59	; 0x3b
 8011796:	d911      	bls.n	80117bc <validate_structure+0x58>
 8011798:	223c      	movs	r2, #60	; 0x3c
 801179a:	4668      	mov	r0, sp
 801179c:	f000 fd70 	bl	8012280 <div>
 80117a0:	9a01      	ldr	r2, [sp, #4]
 80117a2:	68a1      	ldr	r1, [r4, #8]
 80117a4:	9b00      	ldr	r3, [sp, #0]
 80117a6:	2a00      	cmp	r2, #0
 80117a8:	440b      	add	r3, r1
 80117aa:	60a3      	str	r3, [r4, #8]
 80117ac:	bfbb      	ittet	lt
 80117ae:	323c      	addlt	r2, #60	; 0x3c
 80117b0:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80117b4:	6062      	strge	r2, [r4, #4]
 80117b6:	6062      	strlt	r2, [r4, #4]
 80117b8:	bfb8      	it	lt
 80117ba:	60a3      	strlt	r3, [r4, #8]
 80117bc:	68a1      	ldr	r1, [r4, #8]
 80117be:	2917      	cmp	r1, #23
 80117c0:	d911      	bls.n	80117e6 <validate_structure+0x82>
 80117c2:	2218      	movs	r2, #24
 80117c4:	4668      	mov	r0, sp
 80117c6:	f000 fd5b 	bl	8012280 <div>
 80117ca:	9a01      	ldr	r2, [sp, #4]
 80117cc:	68e1      	ldr	r1, [r4, #12]
 80117ce:	9b00      	ldr	r3, [sp, #0]
 80117d0:	2a00      	cmp	r2, #0
 80117d2:	440b      	add	r3, r1
 80117d4:	60e3      	str	r3, [r4, #12]
 80117d6:	bfbb      	ittet	lt
 80117d8:	3218      	addlt	r2, #24
 80117da:	f103 33ff 	addlt.w	r3, r3, #4294967295
 80117de:	60a2      	strge	r2, [r4, #8]
 80117e0:	60a2      	strlt	r2, [r4, #8]
 80117e2:	bfb8      	it	lt
 80117e4:	60e3      	strlt	r3, [r4, #12]
 80117e6:	6921      	ldr	r1, [r4, #16]
 80117e8:	290b      	cmp	r1, #11
 80117ea:	d911      	bls.n	8011810 <validate_structure+0xac>
 80117ec:	220c      	movs	r2, #12
 80117ee:	4668      	mov	r0, sp
 80117f0:	f000 fd46 	bl	8012280 <div>
 80117f4:	9a01      	ldr	r2, [sp, #4]
 80117f6:	6961      	ldr	r1, [r4, #20]
 80117f8:	9b00      	ldr	r3, [sp, #0]
 80117fa:	2a00      	cmp	r2, #0
 80117fc:	440b      	add	r3, r1
 80117fe:	6163      	str	r3, [r4, #20]
 8011800:	bfbb      	ittet	lt
 8011802:	320c      	addlt	r2, #12
 8011804:	f103 33ff 	addlt.w	r3, r3, #4294967295
 8011808:	6122      	strge	r2, [r4, #16]
 801180a:	6122      	strlt	r2, [r4, #16]
 801180c:	bfb8      	it	lt
 801180e:	6163      	strlt	r3, [r4, #20]
 8011810:	6963      	ldr	r3, [r4, #20]
 8011812:	079d      	lsls	r5, r3, #30
 8011814:	d112      	bne.n	801183c <validate_structure+0xd8>
 8011816:	2164      	movs	r1, #100	; 0x64
 8011818:	fb93 f2f1 	sdiv	r2, r3, r1
 801181c:	fb01 3212 	mls	r2, r1, r2, r3
 8011820:	b972      	cbnz	r2, 8011840 <validate_structure+0xdc>
 8011822:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8011826:	f44f 71c8 	mov.w	r1, #400	; 0x190
 801182a:	fb93 f2f1 	sdiv	r2, r3, r1
 801182e:	fb01 3312 	mls	r3, r1, r2, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	bf14      	ite	ne
 8011836:	231c      	movne	r3, #28
 8011838:	231d      	moveq	r3, #29
 801183a:	e002      	b.n	8011842 <validate_structure+0xde>
 801183c:	231c      	movs	r3, #28
 801183e:	e000      	b.n	8011842 <validate_structure+0xde>
 8011840:	231d      	movs	r3, #29
 8011842:	68e2      	ldr	r2, [r4, #12]
 8011844:	2a00      	cmp	r2, #0
 8011846:	dc37      	bgt.n	80118b8 <validate_structure+0x154>
 8011848:	68e5      	ldr	r5, [r4, #12]
 801184a:	2d00      	cmp	r5, #0
 801184c:	dc5c      	bgt.n	8011908 <validate_structure+0x1a4>
 801184e:	6921      	ldr	r1, [r4, #16]
 8011850:	3901      	subs	r1, #1
 8011852:	6121      	str	r1, [r4, #16]
 8011854:	3101      	adds	r1, #1
 8011856:	d11c      	bne.n	8011892 <validate_structure+0x12e>
 8011858:	6963      	ldr	r3, [r4, #20]
 801185a:	1e59      	subs	r1, r3, #1
 801185c:	220b      	movs	r2, #11
 801185e:	0788      	lsls	r0, r1, #30
 8011860:	6161      	str	r1, [r4, #20]
 8011862:	6122      	str	r2, [r4, #16]
 8011864:	d112      	bne.n	801188c <validate_structure+0x128>
 8011866:	2264      	movs	r2, #100	; 0x64
 8011868:	fb91 f0f2 	sdiv	r0, r1, r2
 801186c:	fb02 1110 	mls	r1, r2, r0, r1
 8011870:	b971      	cbnz	r1, 8011890 <validate_structure+0x12c>
 8011872:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 8011876:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801187a:	fb93 f1f2 	sdiv	r1, r3, r2
 801187e:	fb02 3311 	mls	r3, r2, r1, r3
 8011882:	2b00      	cmp	r3, #0
 8011884:	bf14      	ite	ne
 8011886:	231c      	movne	r3, #28
 8011888:	231d      	moveq	r3, #29
 801188a:	e002      	b.n	8011892 <validate_structure+0x12e>
 801188c:	231c      	movs	r3, #28
 801188e:	e000      	b.n	8011892 <validate_structure+0x12e>
 8011890:	231d      	movs	r3, #29
 8011892:	6922      	ldr	r2, [r4, #16]
 8011894:	2a01      	cmp	r2, #1
 8011896:	bf1a      	itte	ne
 8011898:	491c      	ldrne	r1, [pc, #112]	; (801190c <validate_structure+0x1a8>)
 801189a:	f851 2022 	ldrne.w	r2, [r1, r2, lsl #2]
 801189e:	461a      	moveq	r2, r3
 80118a0:	442a      	add	r2, r5
 80118a2:	60e2      	str	r2, [r4, #12]
 80118a4:	e7d0      	b.n	8011848 <validate_structure+0xe4>
 80118a6:	4299      	cmp	r1, r3
 80118a8:	dd2e      	ble.n	8011908 <validate_structure+0x1a4>
 80118aa:	4618      	mov	r0, r3
 80118ac:	3201      	adds	r2, #1
 80118ae:	1a09      	subs	r1, r1, r0
 80118b0:	2a0c      	cmp	r2, #12
 80118b2:	60e1      	str	r1, [r4, #12]
 80118b4:	6122      	str	r2, [r4, #16]
 80118b6:	d009      	beq.n	80118cc <validate_structure+0x168>
 80118b8:	6922      	ldr	r2, [r4, #16]
 80118ba:	68e1      	ldr	r1, [r4, #12]
 80118bc:	2a01      	cmp	r2, #1
 80118be:	d0f2      	beq.n	80118a6 <validate_structure+0x142>
 80118c0:	4812      	ldr	r0, [pc, #72]	; (801190c <validate_structure+0x1a8>)
 80118c2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80118c6:	4281      	cmp	r1, r0
 80118c8:	dcf0      	bgt.n	80118ac <validate_structure+0x148>
 80118ca:	e01d      	b.n	8011908 <validate_structure+0x1a4>
 80118cc:	6963      	ldr	r3, [r4, #20]
 80118ce:	2100      	movs	r1, #0
 80118d0:	1c5a      	adds	r2, r3, #1
 80118d2:	6121      	str	r1, [r4, #16]
 80118d4:	0791      	lsls	r1, r2, #30
 80118d6:	6162      	str	r2, [r4, #20]
 80118d8:	d112      	bne.n	8011900 <validate_structure+0x19c>
 80118da:	2064      	movs	r0, #100	; 0x64
 80118dc:	fb92 f1f0 	sdiv	r1, r2, r0
 80118e0:	fb00 2211 	mls	r2, r0, r1, r2
 80118e4:	b972      	cbnz	r2, 8011904 <validate_structure+0x1a0>
 80118e6:	f203 736d 	addw	r3, r3, #1901	; 0x76d
 80118ea:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80118ee:	fb93 f2f1 	sdiv	r2, r3, r1
 80118f2:	fb01 3312 	mls	r3, r1, r2, r3
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	bf14      	ite	ne
 80118fa:	231c      	movne	r3, #28
 80118fc:	231d      	moveq	r3, #29
 80118fe:	e7db      	b.n	80118b8 <validate_structure+0x154>
 8011900:	231c      	movs	r3, #28
 8011902:	e7d9      	b.n	80118b8 <validate_structure+0x154>
 8011904:	231d      	movs	r3, #29
 8011906:	e7d7      	b.n	80118b8 <validate_structure+0x154>
 8011908:	b003      	add	sp, #12
 801190a:	bd30      	pop	{r4, r5, pc}
 801190c:	0801439c 	.word	0x0801439c

08011910 <mktime>:
 8011910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011914:	4680      	mov	r8, r0
 8011916:	f000 fe3d 	bl	8012594 <__gettzinfo>
 801191a:	4681      	mov	r9, r0
 801191c:	4640      	mov	r0, r8
 801191e:	f7ff ff21 	bl	8011764 <validate_structure>
 8011922:	e898 000c 	ldmia.w	r8, {r2, r3}
 8011926:	203c      	movs	r0, #60	; 0x3c
 8011928:	fb00 2303 	mla	r3, r0, r3, r2
 801192c:	f8d8 2008 	ldr.w	r2, [r8, #8]
 8011930:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8011934:	f44f 6761 	mov.w	r7, #3600	; 0xe10
 8011938:	fb07 3002 	mla	r0, r7, r2, r3
 801193c:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8011940:	4aad      	ldr	r2, [pc, #692]	; (8011bf8 <mktime+0x2e8>)
 8011942:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8011946:	3c01      	subs	r4, #1
 8011948:	2b01      	cmp	r3, #1
 801194a:	4414      	add	r4, r2
 801194c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8011950:	dd11      	ble.n	8011976 <mktime+0x66>
 8011952:	079a      	lsls	r2, r3, #30
 8011954:	d10f      	bne.n	8011976 <mktime+0x66>
 8011956:	2164      	movs	r1, #100	; 0x64
 8011958:	fb93 f2f1 	sdiv	r2, r3, r1
 801195c:	fb01 3212 	mls	r2, r1, r2, r3
 8011960:	b942      	cbnz	r2, 8011974 <mktime+0x64>
 8011962:	f203 756c 	addw	r5, r3, #1900	; 0x76c
 8011966:	f44f 72c8 	mov.w	r2, #400	; 0x190
 801196a:	fb95 f1f2 	sdiv	r1, r5, r2
 801196e:	fb02 5211 	mls	r2, r2, r1, r5
 8011972:	b902      	cbnz	r2, 8011976 <mktime+0x66>
 8011974:	3401      	adds	r4, #1
 8011976:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
 801197a:	3210      	adds	r2, #16
 801197c:	f644 6120 	movw	r1, #20000	; 0x4e20
 8011980:	428a      	cmp	r2, r1
 8011982:	f8c8 401c 	str.w	r4, [r8, #28]
 8011986:	461e      	mov	r6, r3
 8011988:	f200 8131 	bhi.w	8011bee <mktime+0x2de>
 801198c:	2b46      	cmp	r3, #70	; 0x46
 801198e:	dd21      	ble.n	80119d4 <mktime+0xc4>
 8011990:	2146      	movs	r1, #70	; 0x46
 8011992:	078f      	lsls	r7, r1, #30
 8011994:	d114      	bne.n	80119c0 <mktime+0xb0>
 8011996:	2564      	movs	r5, #100	; 0x64
 8011998:	fb91 f2f5 	sdiv	r2, r1, r5
 801199c:	fb05 1212 	mls	r2, r5, r2, r1
 80119a0:	b98a      	cbnz	r2, 80119c6 <mktime+0xb6>
 80119a2:	f201 776c 	addw	r7, r1, #1900	; 0x76c
 80119a6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80119aa:	fb97 f5f2 	sdiv	r5, r7, r2
 80119ae:	fb02 7215 	mls	r2, r2, r5, r7
 80119b2:	2a00      	cmp	r2, #0
 80119b4:	f240 126d 	movw	r2, #365	; 0x16d
 80119b8:	bf08      	it	eq
 80119ba:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 80119be:	e004      	b.n	80119ca <mktime+0xba>
 80119c0:	f240 126d 	movw	r2, #365	; 0x16d
 80119c4:	e001      	b.n	80119ca <mktime+0xba>
 80119c6:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 80119ca:	3101      	adds	r1, #1
 80119cc:	4299      	cmp	r1, r3
 80119ce:	4414      	add	r4, r2
 80119d0:	d1df      	bne.n	8011992 <mktime+0x82>
 80119d2:	e043      	b.n	8011a5c <mktime+0x14c>
 80119d4:	d042      	beq.n	8011a5c <mktime+0x14c>
 80119d6:	2145      	movs	r1, #69	; 0x45
 80119d8:	4299      	cmp	r1, r3
 80119da:	dd1e      	ble.n	8011a1a <mktime+0x10a>
 80119dc:	078e      	lsls	r6, r1, #30
 80119de:	d114      	bne.n	8011a0a <mktime+0xfa>
 80119e0:	2564      	movs	r5, #100	; 0x64
 80119e2:	fb91 f2f5 	sdiv	r2, r1, r5
 80119e6:	fb05 1212 	mls	r2, r5, r2, r1
 80119ea:	b98a      	cbnz	r2, 8011a10 <mktime+0x100>
 80119ec:	f201 766c 	addw	r6, r1, #1900	; 0x76c
 80119f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80119f4:	fb96 f5f2 	sdiv	r5, r6, r2
 80119f8:	fb02 6215 	mls	r2, r2, r5, r6
 80119fc:	2a00      	cmp	r2, #0
 80119fe:	f240 126d 	movw	r2, #365	; 0x16d
 8011a02:	bf08      	it	eq
 8011a04:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011a08:	e004      	b.n	8011a14 <mktime+0x104>
 8011a0a:	f240 126d 	movw	r2, #365	; 0x16d
 8011a0e:	e001      	b.n	8011a14 <mktime+0x104>
 8011a10:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011a14:	1aa4      	subs	r4, r4, r2
 8011a16:	3901      	subs	r1, #1
 8011a18:	e7de      	b.n	80119d8 <mktime+0xc8>
 8011a1a:	2b45      	cmp	r3, #69	; 0x45
 8011a1c:	bfa8      	it	ge
 8011a1e:	2345      	movge	r3, #69	; 0x45
 8011a20:	079d      	lsls	r5, r3, #30
 8011a22:	461e      	mov	r6, r3
 8011a24:	d114      	bne.n	8011a50 <mktime+0x140>
 8011a26:	2264      	movs	r2, #100	; 0x64
 8011a28:	fb93 f3f2 	sdiv	r3, r3, r2
 8011a2c:	fb02 6313 	mls	r3, r2, r3, r6
 8011a30:	b98b      	cbnz	r3, 8011a56 <mktime+0x146>
 8011a32:	f206 716c 	addw	r1, r6, #1900	; 0x76c
 8011a36:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8011a3a:	fb91 f2f3 	sdiv	r2, r1, r3
 8011a3e:	fb03 1312 	mls	r3, r3, r2, r1
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	f240 136d 	movw	r3, #365	; 0x16d
 8011a48:	bf08      	it	eq
 8011a4a:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
 8011a4e:	e004      	b.n	8011a5a <mktime+0x14a>
 8011a50:	f240 136d 	movw	r3, #365	; 0x16d
 8011a54:	e001      	b.n	8011a5a <mktime+0x14a>
 8011a56:	f44f 73b7 	mov.w	r3, #366	; 0x16e
 8011a5a:	1ae4      	subs	r4, r4, r3
 8011a5c:	4f67      	ldr	r7, [pc, #412]	; (8011bfc <mktime+0x2ec>)
 8011a5e:	fb07 0704 	mla	r7, r7, r4, r0
 8011a62:	f000 fb4b 	bl	80120fc <__tz_lock>
 8011a66:	4b66      	ldr	r3, [pc, #408]	; (8011c00 <mktime+0x2f0>)
 8011a68:	681d      	ldr	r5, [r3, #0]
 8011a6a:	2d00      	cmp	r5, #0
 8011a6c:	f000 80aa 	beq.w	8011bc4 <mktime+0x2b4>
 8011a70:	f8d8 3020 	ldr.w	r3, [r8, #32]
 8011a74:	f8d8 0014 	ldr.w	r0, [r8, #20]
 8011a78:	2b01      	cmp	r3, #1
 8011a7a:	bfa8      	it	ge
 8011a7c:	2301      	movge	r3, #1
 8011a7e:	469a      	mov	sl, r3
 8011a80:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8011a84:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 8011a88:	4298      	cmp	r0, r3
 8011a8a:	d10d      	bne.n	8011aa8 <mktime+0x198>
 8011a8c:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
 8011a90:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8011a94:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011a98:	f8d9 101c 	ldr.w	r1, [r9, #28]
 8011a9c:	1ad5      	subs	r5, r2, r3
 8011a9e:	42af      	cmp	r7, r5
 8011aa0:	eba1 0100 	sub.w	r1, r1, r0
 8011aa4:	da05      	bge.n	8011ab2 <mktime+0x1a2>
 8011aa6:	e007      	b.n	8011ab8 <mktime+0x1a8>
 8011aa8:	f000 fa82 	bl	8011fb0 <__tzcalc_limits>
 8011aac:	2800      	cmp	r0, #0
 8011aae:	d1ed      	bne.n	8011a8c <mktime+0x17c>
 8011ab0:	e07b      	b.n	8011baa <mktime+0x29a>
 8011ab2:	1a12      	subs	r2, r2, r0
 8011ab4:	4297      	cmp	r7, r2
 8011ab6:	db78      	blt.n	8011baa <mktime+0x29a>
 8011ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8011abc:	b112      	cbz	r2, 8011ac4 <mktime+0x1b4>
 8011abe:	428f      	cmp	r7, r1
 8011ac0:	db7b      	blt.n	8011bba <mktime+0x2aa>
 8011ac2:	e001      	b.n	8011ac8 <mktime+0x1b8>
 8011ac4:	428f      	cmp	r7, r1
 8011ac6:	da07      	bge.n	8011ad8 <mktime+0x1c8>
 8011ac8:	42af      	cmp	r7, r5
 8011aca:	bfac      	ite	ge
 8011acc:	2500      	movge	r5, #0
 8011ace:	2501      	movlt	r5, #1
 8011ad0:	f1ba 0f00 	cmp.w	sl, #0
 8011ad4:	da04      	bge.n	8011ae0 <mktime+0x1d0>
 8011ad6:	e069      	b.n	8011bac <mktime+0x29c>
 8011ad8:	f1ba 0f00 	cmp.w	sl, #0
 8011adc:	db68      	blt.n	8011bb0 <mktime+0x2a0>
 8011ade:	2501      	movs	r5, #1
 8011ae0:	ea85 0a0a 	eor.w	sl, r5, sl
 8011ae4:	f1ba 0f01 	cmp.w	sl, #1
 8011ae8:	d160      	bne.n	8011bac <mktime+0x29c>
 8011aea:	1a1b      	subs	r3, r3, r0
 8011aec:	b905      	cbnz	r5, 8011af0 <mktime+0x1e0>
 8011aee:	425b      	negs	r3, r3
 8011af0:	f8d8 2000 	ldr.w	r2, [r8]
 8011af4:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8011af8:	441a      	add	r2, r3
 8011afa:	f8c8 2000 	str.w	r2, [r8]
 8011afe:	4640      	mov	r0, r8
 8011b00:	441f      	add	r7, r3
 8011b02:	f7ff fe2f 	bl	8011764 <validate_structure>
 8011b06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011b0a:	ebb3 030a 	subs.w	r3, r3, sl
 8011b0e:	d04d      	beq.n	8011bac <mktime+0x29c>
 8011b10:	2b01      	cmp	r3, #1
 8011b12:	dc03      	bgt.n	8011b1c <mktime+0x20c>
 8011b14:	1c98      	adds	r0, r3, #2
 8011b16:	bfd8      	it	le
 8011b18:	2301      	movle	r3, #1
 8011b1a:	e001      	b.n	8011b20 <mktime+0x210>
 8011b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b20:	f8d8 201c 	ldr.w	r2, [r8, #28]
 8011b24:	441c      	add	r4, r3
 8011b26:	189b      	adds	r3, r3, r2
 8011b28:	d51d      	bpl.n	8011b66 <mktime+0x256>
 8011b2a:	1e73      	subs	r3, r6, #1
 8011b2c:	0799      	lsls	r1, r3, #30
 8011b2e:	d114      	bne.n	8011b5a <mktime+0x24a>
 8011b30:	2164      	movs	r1, #100	; 0x64
 8011b32:	fb93 f2f1 	sdiv	r2, r3, r1
 8011b36:	fb01 3312 	mls	r3, r1, r2, r3
 8011b3a:	b98b      	cbnz	r3, 8011b60 <mktime+0x250>
 8011b3c:	f206 766b 	addw	r6, r6, #1899	; 0x76b
 8011b40:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8011b44:	fb96 f3f2 	sdiv	r3, r6, r2
 8011b48:	fb02 6613 	mls	r6, r2, r3, r6
 8011b4c:	2e00      	cmp	r6, #0
 8011b4e:	f240 136d 	movw	r3, #365	; 0x16d
 8011b52:	bf18      	it	ne
 8011b54:	f44f 73b6 	movne.w	r3, #364	; 0x16c
 8011b58:	e024      	b.n	8011ba4 <mktime+0x294>
 8011b5a:	f44f 73b6 	mov.w	r3, #364	; 0x16c
 8011b5e:	e021      	b.n	8011ba4 <mktime+0x294>
 8011b60:	f240 136d 	movw	r3, #365	; 0x16d
 8011b64:	e01e      	b.n	8011ba4 <mktime+0x294>
 8011b66:	07b2      	lsls	r2, r6, #30
 8011b68:	d114      	bne.n	8011b94 <mktime+0x284>
 8011b6a:	2164      	movs	r1, #100	; 0x64
 8011b6c:	fb96 f2f1 	sdiv	r2, r6, r1
 8011b70:	fb01 6212 	mls	r2, r1, r2, r6
 8011b74:	b98a      	cbnz	r2, 8011b9a <mktime+0x28a>
 8011b76:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8011b7a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8011b7e:	fb96 f2f1 	sdiv	r2, r6, r1
 8011b82:	fb01 6612 	mls	r6, r1, r2, r6
 8011b86:	2e00      	cmp	r6, #0
 8011b88:	f240 126d 	movw	r2, #365	; 0x16d
 8011b8c:	bf08      	it	eq
 8011b8e:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
 8011b92:	e004      	b.n	8011b9e <mktime+0x28e>
 8011b94:	f240 126d 	movw	r2, #365	; 0x16d
 8011b98:	e001      	b.n	8011b9e <mktime+0x28e>
 8011b9a:	f44f 72b7 	mov.w	r2, #366	; 0x16e
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	bfd8      	it	le
 8011ba2:	1a9b      	suble	r3, r3, r2
 8011ba4:	f8c8 301c 	str.w	r3, [r8, #28]
 8011ba8:	e000      	b.n	8011bac <mktime+0x29c>
 8011baa:	4655      	mov	r5, sl
 8011bac:	2d01      	cmp	r5, #1
 8011bae:	d109      	bne.n	8011bc4 <mktime+0x2b4>
 8011bb0:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
 8011bb4:	2501      	movs	r5, #1
 8011bb6:	183e      	adds	r6, r7, r0
 8011bb8:	e007      	b.n	8011bca <mktime+0x2ba>
 8011bba:	f1ba 0f00 	cmp.w	sl, #0
 8011bbe:	f04f 0500 	mov.w	r5, #0
 8011bc2:	da8d      	bge.n	8011ae0 <mktime+0x1d0>
 8011bc4:	f8d9 0020 	ldr.w	r0, [r9, #32]
 8011bc8:	183e      	adds	r6, r7, r0
 8011bca:	f000 fa98 	bl	80120fe <__tz_unlock>
 8011bce:	3404      	adds	r4, #4
 8011bd0:	2307      	movs	r3, #7
 8011bd2:	fb94 f3f3 	sdiv	r3, r4, r3
 8011bd6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8011bda:	1ae4      	subs	r4, r4, r3
 8011bdc:	bf48      	it	mi
 8011bde:	3407      	addmi	r4, #7
 8011be0:	f8c8 5020 	str.w	r5, [r8, #32]
 8011be4:	f8c8 4018 	str.w	r4, [r8, #24]
 8011be8:	4630      	mov	r0, r6
 8011bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bee:	f04f 30ff 	mov.w	r0, #4294967295
 8011bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011bf6:	bf00      	nop
 8011bf8:	0801436c 	.word	0x0801436c
 8011bfc:	00015180 	.word	0x00015180
 8011c00:	1fff479c 	.word	0x1fff479c

08011c04 <_puts_r>:
 8011c04:	b570      	push	{r4, r5, r6, lr}
 8011c06:	460e      	mov	r6, r1
 8011c08:	4605      	mov	r5, r0
 8011c0a:	b118      	cbz	r0, 8011c14 <_puts_r+0x10>
 8011c0c:	6983      	ldr	r3, [r0, #24]
 8011c0e:	b90b      	cbnz	r3, 8011c14 <_puts_r+0x10>
 8011c10:	f000 fc38 	bl	8012484 <__sinit>
 8011c14:	68ac      	ldr	r4, [r5, #8]
 8011c16:	89a3      	ldrh	r3, [r4, #12]
 8011c18:	0719      	lsls	r1, r3, #28
 8011c1a:	d501      	bpl.n	8011c20 <_puts_r+0x1c>
 8011c1c:	6923      	ldr	r3, [r4, #16]
 8011c1e:	b983      	cbnz	r3, 8011c42 <_puts_r+0x3e>
 8011c20:	4628      	mov	r0, r5
 8011c22:	4621      	mov	r1, r4
 8011c24:	f000 fac0 	bl	80121a8 <__swsetup_r>
 8011c28:	b158      	cbz	r0, 8011c42 <_puts_r+0x3e>
 8011c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011c2e:	bd70      	pop	{r4, r5, r6, pc}
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	db0e      	blt.n	8011c52 <_puts_r+0x4e>
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011c3a:	701a      	strb	r2, [r3, #0]
 8011c3c:	6823      	ldr	r3, [r4, #0]
 8011c3e:	3301      	adds	r3, #1
 8011c40:	6023      	str	r3, [r4, #0]
 8011c42:	68a3      	ldr	r3, [r4, #8]
 8011c44:	f816 2b01 	ldrb.w	r2, [r6], #1
 8011c48:	3b01      	subs	r3, #1
 8011c4a:	60a3      	str	r3, [r4, #8]
 8011c4c:	2a00      	cmp	r2, #0
 8011c4e:	d1ef      	bne.n	8011c30 <_puts_r+0x2c>
 8011c50:	e016      	b.n	8011c80 <_puts_r+0x7c>
 8011c52:	69a2      	ldr	r2, [r4, #24]
 8011c54:	4293      	cmp	r3, r2
 8011c56:	db09      	blt.n	8011c6c <_puts_r+0x68>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8011c5e:	701a      	strb	r2, [r3, #0]
 8011c60:	6823      	ldr	r3, [r4, #0]
 8011c62:	7819      	ldrb	r1, [r3, #0]
 8011c64:	290a      	cmp	r1, #10
 8011c66:	d1ea      	bne.n	8011c3e <_puts_r+0x3a>
 8011c68:	4628      	mov	r0, r5
 8011c6a:	e002      	b.n	8011c72 <_puts_r+0x6e>
 8011c6c:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8011c70:	4628      	mov	r0, r5
 8011c72:	4622      	mov	r2, r4
 8011c74:	f000 fa44 	bl	8012100 <__swbuf_r>
 8011c78:	1c42      	adds	r2, r0, #1
 8011c7a:	4250      	negs	r0, r2
 8011c7c:	4150      	adcs	r0, r2
 8011c7e:	e7d3      	b.n	8011c28 <_puts_r+0x24>
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	da15      	bge.n	8011cb0 <_puts_r+0xac>
 8011c84:	69a2      	ldr	r2, [r4, #24]
 8011c86:	4293      	cmp	r3, r2
 8011c88:	db08      	blt.n	8011c9c <_puts_r+0x98>
 8011c8a:	6823      	ldr	r3, [r4, #0]
 8011c8c:	220a      	movs	r2, #10
 8011c8e:	701a      	strb	r2, [r3, #0]
 8011c90:	6823      	ldr	r3, [r4, #0]
 8011c92:	7819      	ldrb	r1, [r3, #0]
 8011c94:	4291      	cmp	r1, r2
 8011c96:	d10f      	bne.n	8011cb8 <_puts_r+0xb4>
 8011c98:	4628      	mov	r0, r5
 8011c9a:	e001      	b.n	8011ca0 <_puts_r+0x9c>
 8011c9c:	4628      	mov	r0, r5
 8011c9e:	210a      	movs	r1, #10
 8011ca0:	4622      	mov	r2, r4
 8011ca2:	f000 fa2d 	bl	8012100 <__swbuf_r>
 8011ca6:	1c43      	adds	r3, r0, #1
 8011ca8:	4258      	negs	r0, r3
 8011caa:	4158      	adcs	r0, r3
 8011cac:	b130      	cbz	r0, 8011cbc <_puts_r+0xb8>
 8011cae:	e7bc      	b.n	8011c2a <_puts_r+0x26>
 8011cb0:	6823      	ldr	r3, [r4, #0]
 8011cb2:	220a      	movs	r2, #10
 8011cb4:	701a      	strb	r2, [r3, #0]
 8011cb6:	6823      	ldr	r3, [r4, #0]
 8011cb8:	3301      	adds	r3, #1
 8011cba:	6023      	str	r3, [r4, #0]
 8011cbc:	200a      	movs	r0, #10
 8011cbe:	bd70      	pop	{r4, r5, r6, pc}

08011cc0 <puts>:
 8011cc0:	4b02      	ldr	r3, [pc, #8]	; (8011ccc <puts+0xc>)
 8011cc2:	4601      	mov	r1, r0
 8011cc4:	6818      	ldr	r0, [r3, #0]
 8011cc6:	f7ff bf9d 	b.w	8011c04 <_puts_r>
 8011cca:	bf00      	nop
 8011ccc:	1fff4330 	.word	0x1fff4330

08011cd0 <siprintf>:
 8011cd0:	b40e      	push	{r1, r2, r3}
 8011cd2:	b500      	push	{lr}
 8011cd4:	b09c      	sub	sp, #112	; 0x70
 8011cd6:	f44f 7102 	mov.w	r1, #520	; 0x208
 8011cda:	f8ad 1014 	strh.w	r1, [sp, #20]
 8011cde:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ce2:	9104      	str	r1, [sp, #16]
 8011ce4:	9107      	str	r1, [sp, #28]
 8011ce6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8011cea:	ab1d      	add	r3, sp, #116	; 0x74
 8011cec:	f8ad 1016 	strh.w	r1, [sp, #22]
 8011cf0:	4908      	ldr	r1, [pc, #32]	; (8011d14 <siprintf+0x44>)
 8011cf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cf6:	9002      	str	r0, [sp, #8]
 8011cf8:	9006      	str	r0, [sp, #24]
 8011cfa:	6808      	ldr	r0, [r1, #0]
 8011cfc:	9301      	str	r3, [sp, #4]
 8011cfe:	a902      	add	r1, sp, #8
 8011d00:	f000 fd96 	bl	8012830 <_svfiprintf_r>
 8011d04:	9b02      	ldr	r3, [sp, #8]
 8011d06:	2200      	movs	r2, #0
 8011d08:	701a      	strb	r2, [r3, #0]
 8011d0a:	b01c      	add	sp, #112	; 0x70
 8011d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8011d10:	b003      	add	sp, #12
 8011d12:	4770      	bx	lr
 8011d14:	1fff4330 	.word	0x1fff4330

08011d18 <strcat>:
 8011d18:	b510      	push	{r4, lr}
 8011d1a:	4602      	mov	r2, r0
 8011d1c:	4613      	mov	r3, r2
 8011d1e:	3201      	adds	r2, #1
 8011d20:	781c      	ldrb	r4, [r3, #0]
 8011d22:	2c00      	cmp	r4, #0
 8011d24:	d1fa      	bne.n	8011d1c <strcat+0x4>
 8011d26:	3b01      	subs	r3, #1
 8011d28:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d2c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011d30:	2a00      	cmp	r2, #0
 8011d32:	d1f9      	bne.n	8011d28 <strcat+0x10>
 8011d34:	bd10      	pop	{r4, pc}

08011d36 <strchr>:
 8011d36:	b2c9      	uxtb	r1, r1
 8011d38:	4603      	mov	r3, r0
 8011d3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011d3e:	b11a      	cbz	r2, 8011d48 <strchr+0x12>
 8011d40:	428a      	cmp	r2, r1
 8011d42:	d1f9      	bne.n	8011d38 <strchr+0x2>
 8011d44:	4618      	mov	r0, r3
 8011d46:	4770      	bx	lr
 8011d48:	2900      	cmp	r1, #0
 8011d4a:	bf0c      	ite	eq
 8011d4c:	4618      	moveq	r0, r3
 8011d4e:	2000      	movne	r0, #0
 8011d50:	4770      	bx	lr

08011d52 <strcpy>:
 8011d52:	4603      	mov	r3, r0
 8011d54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011d58:	f803 2b01 	strb.w	r2, [r3], #1
 8011d5c:	2a00      	cmp	r2, #0
 8011d5e:	d1f9      	bne.n	8011d54 <strcpy+0x2>
 8011d60:	4770      	bx	lr

08011d62 <strlen>:
 8011d62:	4603      	mov	r3, r0
 8011d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011d68:	2a00      	cmp	r2, #0
 8011d6a:	d1fb      	bne.n	8011d64 <strlen+0x2>
 8011d6c:	1a18      	subs	r0, r3, r0
 8011d6e:	3801      	subs	r0, #1
 8011d70:	4770      	bx	lr

08011d72 <strncpy>:
 8011d72:	b510      	push	{r4, lr}
 8011d74:	4603      	mov	r3, r0
 8011d76:	b132      	cbz	r2, 8011d86 <strncpy+0x14>
 8011d78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d7c:	f803 4b01 	strb.w	r4, [r3], #1
 8011d80:	3a01      	subs	r2, #1
 8011d82:	2c00      	cmp	r4, #0
 8011d84:	d1f7      	bne.n	8011d76 <strncpy+0x4>
 8011d86:	441a      	add	r2, r3
 8011d88:	4293      	cmp	r3, r2
 8011d8a:	d003      	beq.n	8011d94 <strncpy+0x22>
 8011d8c:	2100      	movs	r1, #0
 8011d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8011d92:	e7f9      	b.n	8011d88 <strncpy+0x16>
 8011d94:	bd10      	pop	{r4, pc}

08011d96 <strstr>:
 8011d96:	b530      	push	{r4, r5, lr}
 8011d98:	7803      	ldrb	r3, [r0, #0]
 8011d9a:	b923      	cbnz	r3, 8011da6 <strstr+0x10>
 8011d9c:	780b      	ldrb	r3, [r1, #0]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	bf18      	it	ne
 8011da2:	2000      	movne	r0, #0
 8011da4:	bd30      	pop	{r4, r5, pc}
 8011da6:	4603      	mov	r3, r0
 8011da8:	3001      	adds	r0, #1
 8011daa:	781a      	ldrb	r2, [r3, #0]
 8011dac:	b13a      	cbz	r2, 8011dbe <strstr+0x28>
 8011dae:	2200      	movs	r2, #0
 8011db0:	5c8c      	ldrb	r4, [r1, r2]
 8011db2:	b134      	cbz	r4, 8011dc2 <strstr+0x2c>
 8011db4:	5c9d      	ldrb	r5, [r3, r2]
 8011db6:	42a5      	cmp	r5, r4
 8011db8:	d1f5      	bne.n	8011da6 <strstr+0x10>
 8011dba:	3201      	adds	r2, #1
 8011dbc:	e7f8      	b.n	8011db0 <strstr+0x1a>
 8011dbe:	4610      	mov	r0, r2
 8011dc0:	bd30      	pop	{r4, r5, pc}
 8011dc2:	4618      	mov	r0, r3
 8011dc4:	bd30      	pop	{r4, r5, pc}
	...

08011dc8 <strtok>:
 8011dc8:	4b17      	ldr	r3, [pc, #92]	; (8011e28 <strtok+0x60>)
 8011dca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dce:	681d      	ldr	r5, [r3, #0]
 8011dd0:	6dac      	ldr	r4, [r5, #88]	; 0x58
 8011dd2:	4606      	mov	r6, r0
 8011dd4:	460f      	mov	r7, r1
 8011dd6:	b9fc      	cbnz	r4, 8011e18 <strtok+0x50>
 8011dd8:	2050      	movs	r0, #80	; 0x50
 8011dda:	f000 fc2d 	bl	8012638 <malloc>
 8011dde:	65a8      	str	r0, [r5, #88]	; 0x58
 8011de0:	6084      	str	r4, [r0, #8]
 8011de2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011de4:	6004      	str	r4, [r0, #0]
 8011de6:	6044      	str	r4, [r0, #4]
 8011de8:	611c      	str	r4, [r3, #16]
 8011dea:	60dc      	str	r4, [r3, #12]
 8011dec:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011dee:	619c      	str	r4, [r3, #24]
 8011df0:	615c      	str	r4, [r3, #20]
 8011df2:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011df4:	62dc      	str	r4, [r3, #44]	; 0x2c
 8011df6:	629c      	str	r4, [r3, #40]	; 0x28
 8011df8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011dfa:	635c      	str	r4, [r3, #52]	; 0x34
 8011dfc:	631c      	str	r4, [r3, #48]	; 0x30
 8011dfe:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011e00:	63dc      	str	r4, [r3, #60]	; 0x3c
 8011e02:	639c      	str	r4, [r3, #56]	; 0x38
 8011e04:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011e06:	645c      	str	r4, [r3, #68]	; 0x44
 8011e08:	641c      	str	r4, [r3, #64]	; 0x40
 8011e0a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011e0c:	64dc      	str	r4, [r3, #76]	; 0x4c
 8011e0e:	649c      	str	r4, [r3, #72]	; 0x48
 8011e10:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011e12:	771c      	strb	r4, [r3, #28]
 8011e14:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8011e16:	625c      	str	r4, [r3, #36]	; 0x24
 8011e18:	4630      	mov	r0, r6
 8011e1a:	4639      	mov	r1, r7
 8011e1c:	6daa      	ldr	r2, [r5, #88]	; 0x58
 8011e1e:	2301      	movs	r3, #1
 8011e20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011e24:	f000 b802 	b.w	8011e2c <__strtok_r>
 8011e28:	1fff4330 	.word	0x1fff4330

08011e2c <__strtok_r>:
 8011e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e2e:	b948      	cbnz	r0, 8011e44 <__strtok_r+0x18>
 8011e30:	6810      	ldr	r0, [r2, #0]
 8011e32:	b938      	cbnz	r0, 8011e44 <__strtok_r+0x18>
 8011e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e36:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011e3a:	b15e      	cbz	r6, 8011e54 <__strtok_r+0x28>
 8011e3c:	42b5      	cmp	r5, r6
 8011e3e:	d1fa      	bne.n	8011e36 <__strtok_r+0xa>
 8011e40:	b12b      	cbz	r3, 8011e4e <__strtok_r+0x22>
 8011e42:	4620      	mov	r0, r4
 8011e44:	4604      	mov	r4, r0
 8011e46:	460f      	mov	r7, r1
 8011e48:	f814 5b01 	ldrb.w	r5, [r4], #1
 8011e4c:	e7f3      	b.n	8011e36 <__strtok_r+0xa>
 8011e4e:	6014      	str	r4, [r2, #0]
 8011e50:	7003      	strb	r3, [r0, #0]
 8011e52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e54:	b94d      	cbnz	r5, 8011e6a <__strtok_r+0x3e>
 8011e56:	6015      	str	r5, [r2, #0]
 8011e58:	4628      	mov	r0, r5
 8011e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e5c:	f817 6b01 	ldrb.w	r6, [r7], #1
 8011e60:	42ae      	cmp	r6, r5
 8011e62:	d007      	beq.n	8011e74 <__strtok_r+0x48>
 8011e64:	2e00      	cmp	r6, #0
 8011e66:	d1f9      	bne.n	8011e5c <__strtok_r+0x30>
 8011e68:	461c      	mov	r4, r3
 8011e6a:	4623      	mov	r3, r4
 8011e6c:	460f      	mov	r7, r1
 8011e6e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8011e72:	e7f3      	b.n	8011e5c <__strtok_r+0x30>
 8011e74:	b115      	cbz	r5, 8011e7c <__strtok_r+0x50>
 8011e76:	2100      	movs	r1, #0
 8011e78:	7021      	strb	r1, [r4, #0]
 8011e7a:	e000      	b.n	8011e7e <__strtok_r+0x52>
 8011e7c:	462b      	mov	r3, r5
 8011e7e:	6013      	str	r3, [r2, #0]
 8011e80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011e82 <strtok_r>:
 8011e82:	2301      	movs	r3, #1
 8011e84:	f7ff bfd2 	b.w	8011e2c <__strtok_r>

08011e88 <_strtol_r>:
 8011e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011e8c:	4c40      	ldr	r4, [pc, #256]	; (8011f90 <_strtol_r+0x108>)
 8011e8e:	f8d4 9000 	ldr.w	r9, [r4]
 8011e92:	460f      	mov	r7, r1
 8011e94:	463d      	mov	r5, r7
 8011e96:	f815 eb01 	ldrb.w	lr, [r5], #1
 8011e9a:	eb09 040e 	add.w	r4, r9, lr
 8011e9e:	7866      	ldrb	r6, [r4, #1]
 8011ea0:	f006 0408 	and.w	r4, r6, #8
 8011ea4:	f004 06ff 	and.w	r6, r4, #255	; 0xff
 8011ea8:	b10c      	cbz	r4, 8011eae <_strtol_r+0x26>
 8011eaa:	462f      	mov	r7, r5
 8011eac:	e7f2      	b.n	8011e94 <_strtol_r+0xc>
 8011eae:	4674      	mov	r4, lr
 8011eb0:	2c2d      	cmp	r4, #45	; 0x2d
 8011eb2:	d103      	bne.n	8011ebc <_strtol_r+0x34>
 8011eb4:	1cbd      	adds	r5, r7, #2
 8011eb6:	787c      	ldrb	r4, [r7, #1]
 8011eb8:	2601      	movs	r6, #1
 8011eba:	e003      	b.n	8011ec4 <_strtol_r+0x3c>
 8011ebc:	2c2b      	cmp	r4, #43	; 0x2b
 8011ebe:	bf04      	itt	eq
 8011ec0:	787c      	ldrbeq	r4, [r7, #1]
 8011ec2:	1cbd      	addeq	r5, r7, #2
 8011ec4:	b113      	cbz	r3, 8011ecc <_strtol_r+0x44>
 8011ec6:	2b10      	cmp	r3, #16
 8011ec8:	d10a      	bne.n	8011ee0 <_strtol_r+0x58>
 8011eca:	e05a      	b.n	8011f82 <_strtol_r+0xfa>
 8011ecc:	2c30      	cmp	r4, #48	; 0x30
 8011ece:	d156      	bne.n	8011f7e <_strtol_r+0xf6>
 8011ed0:	782c      	ldrb	r4, [r5, #0]
 8011ed2:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8011ed6:	2c58      	cmp	r4, #88	; 0x58
 8011ed8:	d14c      	bne.n	8011f74 <_strtol_r+0xec>
 8011eda:	786c      	ldrb	r4, [r5, #1]
 8011edc:	2310      	movs	r3, #16
 8011ede:	3502      	adds	r5, #2
 8011ee0:	2e00      	cmp	r6, #0
 8011ee2:	bf14      	ite	ne
 8011ee4:	f04f 4800 	movne.w	r8, #2147483648	; 0x80000000
 8011ee8:	f06f 4800 	mvneq.w	r8, #2147483648	; 0x80000000
 8011eec:	2700      	movs	r7, #0
 8011eee:	fbb8 faf3 	udiv	sl, r8, r3
 8011ef2:	46be      	mov	lr, r7
 8011ef4:	fb03 881a 	mls	r8, r3, sl, r8
 8011ef8:	eb09 0c04 	add.w	ip, r9, r4
 8011efc:	f89c c001 	ldrb.w	ip, [ip, #1]
 8011f00:	f01c 0f04 	tst.w	ip, #4
 8011f04:	d001      	beq.n	8011f0a <_strtol_r+0x82>
 8011f06:	3c30      	subs	r4, #48	; 0x30
 8011f08:	e00b      	b.n	8011f22 <_strtol_r+0x9a>
 8011f0a:	f01c 0c03 	ands.w	ip, ip, #3
 8011f0e:	d01b      	beq.n	8011f48 <_strtol_r+0xc0>
 8011f10:	f1bc 0f01 	cmp.w	ip, #1
 8011f14:	bf0c      	ite	eq
 8011f16:	f04f 0c37 	moveq.w	ip, #55	; 0x37
 8011f1a:	f04f 0c57 	movne.w	ip, #87	; 0x57
 8011f1e:	ebcc 0404 	rsb	r4, ip, r4
 8011f22:	429c      	cmp	r4, r3
 8011f24:	da10      	bge.n	8011f48 <_strtol_r+0xc0>
 8011f26:	f1b7 3fff 	cmp.w	r7, #4294967295
 8011f2a:	d00a      	beq.n	8011f42 <_strtol_r+0xba>
 8011f2c:	45d6      	cmp	lr, sl
 8011f2e:	d806      	bhi.n	8011f3e <_strtol_r+0xb6>
 8011f30:	d101      	bne.n	8011f36 <_strtol_r+0xae>
 8011f32:	4544      	cmp	r4, r8
 8011f34:	dc03      	bgt.n	8011f3e <_strtol_r+0xb6>
 8011f36:	fb03 4e0e 	mla	lr, r3, lr, r4
 8011f3a:	2701      	movs	r7, #1
 8011f3c:	e001      	b.n	8011f42 <_strtol_r+0xba>
 8011f3e:	f04f 37ff 	mov.w	r7, #4294967295
 8011f42:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f46:	e7d7      	b.n	8011ef8 <_strtol_r+0x70>
 8011f48:	1c7c      	adds	r4, r7, #1
 8011f4a:	4673      	mov	r3, lr
 8011f4c:	d10a      	bne.n	8011f64 <_strtol_r+0xdc>
 8011f4e:	2e00      	cmp	r6, #0
 8011f50:	f04f 0122 	mov.w	r1, #34	; 0x22
 8011f54:	bf14      	ite	ne
 8011f56:	f04f 4300 	movne.w	r3, #2147483648	; 0x80000000
 8011f5a:	f06f 4300 	mvneq.w	r3, #2147483648	; 0x80000000
 8011f5e:	6001      	str	r1, [r0, #0]
 8011f60:	b92a      	cbnz	r2, 8011f6e <_strtol_r+0xe6>
 8011f62:	e011      	b.n	8011f88 <_strtol_r+0x100>
 8011f64:	b10e      	cbz	r6, 8011f6a <_strtol_r+0xe2>
 8011f66:	f1ce 0300 	rsb	r3, lr, #0
 8011f6a:	b16a      	cbz	r2, 8011f88 <_strtol_r+0x100>
 8011f6c:	b107      	cbz	r7, 8011f70 <_strtol_r+0xe8>
 8011f6e:	1e69      	subs	r1, r5, #1
 8011f70:	6011      	str	r1, [r2, #0]
 8011f72:	e009      	b.n	8011f88 <_strtol_r+0x100>
 8011f74:	2430      	movs	r4, #48	; 0x30
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d1b2      	bne.n	8011ee0 <_strtol_r+0x58>
 8011f7a:	2308      	movs	r3, #8
 8011f7c:	e7b0      	b.n	8011ee0 <_strtol_r+0x58>
 8011f7e:	230a      	movs	r3, #10
 8011f80:	e7ae      	b.n	8011ee0 <_strtol_r+0x58>
 8011f82:	2c30      	cmp	r4, #48	; 0x30
 8011f84:	d1ac      	bne.n	8011ee0 <_strtol_r+0x58>
 8011f86:	e7a3      	b.n	8011ed0 <_strtol_r+0x48>
 8011f88:	4618      	mov	r0, r3
 8011f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f8e:	bf00      	nop
 8011f90:	1fff4334 	.word	0x1fff4334

08011f94 <strtol>:
 8011f94:	b530      	push	{r4, r5, lr}
 8011f96:	4613      	mov	r3, r2
 8011f98:	4a04      	ldr	r2, [pc, #16]	; (8011fac <strtol+0x18>)
 8011f9a:	4605      	mov	r5, r0
 8011f9c:	460c      	mov	r4, r1
 8011f9e:	6810      	ldr	r0, [r2, #0]
 8011fa0:	4629      	mov	r1, r5
 8011fa2:	4622      	mov	r2, r4
 8011fa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011fa8:	f7ff bf6e 	b.w	8011e88 <_strtol_r>
 8011fac:	1fff4330 	.word	0x1fff4330

08011fb0 <__tzcalc_limits>:
 8011fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fb4:	4604      	mov	r4, r0
 8011fb6:	f000 faed 	bl	8012594 <__gettzinfo>
 8011fba:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8011fbe:	429c      	cmp	r4, r3
 8011fc0:	f340 8094 	ble.w	80120ec <__tzcalc_limits+0x13c>
 8011fc4:	f46f 6ef6 	mvn.w	lr, #1968	; 0x7b0
 8011fc8:	eb04 030e 	add.w	r3, r4, lr
 8011fcc:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8011fd0:	109b      	asrs	r3, r3, #2
 8011fd2:	f240 166d 	movw	r6, #365	; 0x16d
 8011fd6:	fb06 3602 	mla	r6, r6, r2, r3
 8011fda:	f46f 6cc8 	mvn.w	ip, #1600	; 0x640
 8011fde:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8011fe2:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8011fe6:	fb92 f2f3 	sdiv	r2, r2, r3
 8011fea:	18b3      	adds	r3, r6, r2
 8011fec:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8011ff0:	eb04 060c 	add.w	r6, r4, ip
 8011ff4:	fb96 f6f5 	sdiv	r6, r6, r5
 8011ff8:	441e      	add	r6, r3
 8011ffa:	2364      	movs	r3, #100	; 0x64
 8011ffc:	6044      	str	r4, [r0, #4]
 8011ffe:	fb94 fef3 	sdiv	lr, r4, r3
 8012002:	4601      	mov	r1, r0
 8012004:	fb03 4e1e 	mls	lr, r3, lr, r4
 8012008:	f100 0c38 	add.w	ip, r0, #56	; 0x38
 801200c:	fb94 f3f5 	sdiv	r3, r4, r5
 8012010:	fb05 4513 	mls	r5, r5, r3, r4
 8012014:	fab5 f585 	clz	r5, r5
 8012018:	096d      	lsrs	r5, r5, #5
 801201a:	7a0b      	ldrb	r3, [r1, #8]
 801201c:	2b4a      	cmp	r3, #74	; 0x4a
 801201e:	d111      	bne.n	8012044 <__tzcalc_limits+0x94>
 8012020:	694b      	ldr	r3, [r1, #20]
 8012022:	07a7      	lsls	r7, r4, #30
 8012024:	eb06 0203 	add.w	r2, r6, r3
 8012028:	d102      	bne.n	8012030 <__tzcalc_limits+0x80>
 801202a:	f1be 0f00 	cmp.w	lr, #0
 801202e:	d100      	bne.n	8012032 <__tzcalc_limits+0x82>
 8012030:	b125      	cbz	r5, 801203c <__tzcalc_limits+0x8c>
 8012032:	2b3b      	cmp	r3, #59	; 0x3b
 8012034:	bfd4      	ite	le
 8012036:	2300      	movle	r3, #0
 8012038:	2301      	movgt	r3, #1
 801203a:	e000      	b.n	801203e <__tzcalc_limits+0x8e>
 801203c:	462b      	mov	r3, r5
 801203e:	4413      	add	r3, r2
 8012040:	3b01      	subs	r3, #1
 8012042:	e03f      	b.n	80120c4 <__tzcalc_limits+0x114>
 8012044:	2b44      	cmp	r3, #68	; 0x44
 8012046:	d102      	bne.n	801204e <__tzcalc_limits+0x9e>
 8012048:	694b      	ldr	r3, [r1, #20]
 801204a:	4433      	add	r3, r6
 801204c:	e03a      	b.n	80120c4 <__tzcalc_limits+0x114>
 801204e:	07a2      	lsls	r2, r4, #30
 8012050:	d105      	bne.n	801205e <__tzcalc_limits+0xae>
 8012052:	f1be 0f00 	cmp.w	lr, #0
 8012056:	bf0c      	ite	eq
 8012058:	462b      	moveq	r3, r5
 801205a:	2301      	movne	r3, #1
 801205c:	e000      	b.n	8012060 <__tzcalc_limits+0xb0>
 801205e:	462b      	mov	r3, r5
 8012060:	4a24      	ldr	r2, [pc, #144]	; (80120f4 <__tzcalc_limits+0x144>)
 8012062:	f04f 0930 	mov.w	r9, #48	; 0x30
 8012066:	fb09 2903 	mla	r9, r9, r3, r2
 801206a:	68ca      	ldr	r2, [r1, #12]
 801206c:	f1a9 0704 	sub.w	r7, r9, #4
 8012070:	46b2      	mov	sl, r6
 8012072:	2301      	movs	r3, #1
 8012074:	4293      	cmp	r3, r2
 8012076:	da04      	bge.n	8012082 <__tzcalc_limits+0xd2>
 8012078:	f857 8f04 	ldr.w	r8, [r7, #4]!
 801207c:	3301      	adds	r3, #1
 801207e:	44c2      	add	sl, r8
 8012080:	e7f8      	b.n	8012074 <__tzcalc_limits+0xc4>
 8012082:	2a01      	cmp	r2, #1
 8012084:	bfb8      	it	lt
 8012086:	2201      	movlt	r2, #1
 8012088:	4690      	mov	r8, r2
 801208a:	2707      	movs	r7, #7
 801208c:	f10a 0204 	add.w	r2, sl, #4
 8012090:	fb92 f7f7 	sdiv	r7, r2, r7
 8012094:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 8012098:	1bd7      	subs	r7, r2, r7
 801209a:	694a      	ldr	r2, [r1, #20]
 801209c:	1bd2      	subs	r2, r2, r7
 801209e:	690f      	ldr	r7, [r1, #16]
 80120a0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80120a4:	f107 37ff 	add.w	r7, r7, #4294967295
 80120a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80120ac:	bf48      	it	mi
 80120ae:	3207      	addmi	r2, #7
 80120b0:	ebc7 07c7 	rsb	r7, r7, r7, lsl #3
 80120b4:	18bb      	adds	r3, r7, r2
 80120b6:	f859 2028 	ldr.w	r2, [r9, r8, lsl #2]
 80120ba:	4293      	cmp	r3, r2
 80120bc:	db01      	blt.n	80120c2 <__tzcalc_limits+0x112>
 80120be:	3b07      	subs	r3, #7
 80120c0:	e7fb      	b.n	80120ba <__tzcalc_limits+0x10a>
 80120c2:	4453      	add	r3, sl
 80120c4:	698a      	ldr	r2, [r1, #24]
 80120c6:	4f0c      	ldr	r7, [pc, #48]	; (80120f8 <__tzcalc_limits+0x148>)
 80120c8:	fb07 2303 	mla	r3, r7, r3, r2
 80120cc:	6a0f      	ldr	r7, [r1, #32]
 80120ce:	443b      	add	r3, r7
 80120d0:	f841 3f1c 	str.w	r3, [r1, #28]!
 80120d4:	4561      	cmp	r1, ip
 80120d6:	d1a0      	bne.n	801201a <__tzcalc_limits+0x6a>
 80120d8:	69c3      	ldr	r3, [r0, #28]
 80120da:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80120dc:	4293      	cmp	r3, r2
 80120de:	bfac      	ite	ge
 80120e0:	2300      	movge	r3, #0
 80120e2:	2301      	movlt	r3, #1
 80120e4:	6003      	str	r3, [r0, #0]
 80120e6:	2001      	movs	r0, #1
 80120e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120ec:	2000      	movs	r0, #0
 80120ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80120f2:	bf00      	nop
 80120f4:	08014530 	.word	0x08014530
 80120f8:	00015180 	.word	0x00015180

080120fc <__tz_lock>:
 80120fc:	4770      	bx	lr

080120fe <__tz_unlock>:
 80120fe:	4770      	bx	lr

08012100 <__swbuf_r>:
 8012100:	b570      	push	{r4, r5, r6, lr}
 8012102:	460d      	mov	r5, r1
 8012104:	4614      	mov	r4, r2
 8012106:	4606      	mov	r6, r0
 8012108:	b118      	cbz	r0, 8012112 <__swbuf_r+0x12>
 801210a:	6983      	ldr	r3, [r0, #24]
 801210c:	b90b      	cbnz	r3, 8012112 <__swbuf_r+0x12>
 801210e:	f000 f9b9 	bl	8012484 <__sinit>
 8012112:	4b22      	ldr	r3, [pc, #136]	; (801219c <__swbuf_r+0x9c>)
 8012114:	429c      	cmp	r4, r3
 8012116:	d101      	bne.n	801211c <__swbuf_r+0x1c>
 8012118:	6874      	ldr	r4, [r6, #4]
 801211a:	e008      	b.n	801212e <__swbuf_r+0x2e>
 801211c:	4b20      	ldr	r3, [pc, #128]	; (80121a0 <__swbuf_r+0xa0>)
 801211e:	429c      	cmp	r4, r3
 8012120:	d101      	bne.n	8012126 <__swbuf_r+0x26>
 8012122:	68b4      	ldr	r4, [r6, #8]
 8012124:	e003      	b.n	801212e <__swbuf_r+0x2e>
 8012126:	4b1f      	ldr	r3, [pc, #124]	; (80121a4 <__swbuf_r+0xa4>)
 8012128:	429c      	cmp	r4, r3
 801212a:	bf08      	it	eq
 801212c:	68f4      	ldreq	r4, [r6, #12]
 801212e:	69a3      	ldr	r3, [r4, #24]
 8012130:	60a3      	str	r3, [r4, #8]
 8012132:	89a3      	ldrh	r3, [r4, #12]
 8012134:	071a      	lsls	r2, r3, #28
 8012136:	d509      	bpl.n	801214c <__swbuf_r+0x4c>
 8012138:	6923      	ldr	r3, [r4, #16]
 801213a:	b13b      	cbz	r3, 801214c <__swbuf_r+0x4c>
 801213c:	6823      	ldr	r3, [r4, #0]
 801213e:	6920      	ldr	r0, [r4, #16]
 8012140:	1a18      	subs	r0, r3, r0
 8012142:	6963      	ldr	r3, [r4, #20]
 8012144:	4298      	cmp	r0, r3
 8012146:	b2ed      	uxtb	r5, r5
 8012148:	db0f      	blt.n	801216a <__swbuf_r+0x6a>
 801214a:	e008      	b.n	801215e <__swbuf_r+0x5e>
 801214c:	4630      	mov	r0, r6
 801214e:	4621      	mov	r1, r4
 8012150:	f000 f82a 	bl	80121a8 <__swsetup_r>
 8012154:	2800      	cmp	r0, #0
 8012156:	d0f1      	beq.n	801213c <__swbuf_r+0x3c>
 8012158:	f04f 30ff 	mov.w	r0, #4294967295
 801215c:	bd70      	pop	{r4, r5, r6, pc}
 801215e:	4630      	mov	r0, r6
 8012160:	4621      	mov	r1, r4
 8012162:	f000 f925 	bl	80123b0 <_fflush_r>
 8012166:	2800      	cmp	r0, #0
 8012168:	d1f6      	bne.n	8012158 <__swbuf_r+0x58>
 801216a:	68a3      	ldr	r3, [r4, #8]
 801216c:	3b01      	subs	r3, #1
 801216e:	60a3      	str	r3, [r4, #8]
 8012170:	6823      	ldr	r3, [r4, #0]
 8012172:	1c5a      	adds	r2, r3, #1
 8012174:	6022      	str	r2, [r4, #0]
 8012176:	701d      	strb	r5, [r3, #0]
 8012178:	6963      	ldr	r3, [r4, #20]
 801217a:	3001      	adds	r0, #1
 801217c:	4298      	cmp	r0, r3
 801217e:	d004      	beq.n	801218a <__swbuf_r+0x8a>
 8012180:	89a3      	ldrh	r3, [r4, #12]
 8012182:	07db      	lsls	r3, r3, #31
 8012184:	d507      	bpl.n	8012196 <__swbuf_r+0x96>
 8012186:	2d0a      	cmp	r5, #10
 8012188:	d105      	bne.n	8012196 <__swbuf_r+0x96>
 801218a:	4630      	mov	r0, r6
 801218c:	4621      	mov	r1, r4
 801218e:	f000 f90f 	bl	80123b0 <_fflush_r>
 8012192:	2800      	cmp	r0, #0
 8012194:	d1e0      	bne.n	8012158 <__swbuf_r+0x58>
 8012196:	4628      	mov	r0, r5
 8012198:	bd70      	pop	{r4, r5, r6, pc}
 801219a:	bf00      	nop
 801219c:	080144d0 	.word	0x080144d0
 80121a0:	080144f0 	.word	0x080144f0
 80121a4:	08014510 	.word	0x08014510

080121a8 <__swsetup_r>:
 80121a8:	4b31      	ldr	r3, [pc, #196]	; (8012270 <__swsetup_r+0xc8>)
 80121aa:	b570      	push	{r4, r5, r6, lr}
 80121ac:	681d      	ldr	r5, [r3, #0]
 80121ae:	4606      	mov	r6, r0
 80121b0:	460c      	mov	r4, r1
 80121b2:	b125      	cbz	r5, 80121be <__swsetup_r+0x16>
 80121b4:	69ab      	ldr	r3, [r5, #24]
 80121b6:	b913      	cbnz	r3, 80121be <__swsetup_r+0x16>
 80121b8:	4628      	mov	r0, r5
 80121ba:	f000 f963 	bl	8012484 <__sinit>
 80121be:	4b2d      	ldr	r3, [pc, #180]	; (8012274 <__swsetup_r+0xcc>)
 80121c0:	429c      	cmp	r4, r3
 80121c2:	d101      	bne.n	80121c8 <__swsetup_r+0x20>
 80121c4:	686c      	ldr	r4, [r5, #4]
 80121c6:	e008      	b.n	80121da <__swsetup_r+0x32>
 80121c8:	4b2b      	ldr	r3, [pc, #172]	; (8012278 <__swsetup_r+0xd0>)
 80121ca:	429c      	cmp	r4, r3
 80121cc:	d101      	bne.n	80121d2 <__swsetup_r+0x2a>
 80121ce:	68ac      	ldr	r4, [r5, #8]
 80121d0:	e003      	b.n	80121da <__swsetup_r+0x32>
 80121d2:	4b2a      	ldr	r3, [pc, #168]	; (801227c <__swsetup_r+0xd4>)
 80121d4:	429c      	cmp	r4, r3
 80121d6:	bf08      	it	eq
 80121d8:	68ec      	ldreq	r4, [r5, #12]
 80121da:	89a3      	ldrh	r3, [r4, #12]
 80121dc:	b29a      	uxth	r2, r3
 80121de:	0711      	lsls	r1, r2, #28
 80121e0:	d41d      	bmi.n	801221e <__swsetup_r+0x76>
 80121e2:	06d5      	lsls	r5, r2, #27
 80121e4:	d402      	bmi.n	80121ec <__swsetup_r+0x44>
 80121e6:	2209      	movs	r2, #9
 80121e8:	6032      	str	r2, [r6, #0]
 80121ea:	e038      	b.n	801225e <__swsetup_r+0xb6>
 80121ec:	0750      	lsls	r0, r2, #29
 80121ee:	d512      	bpl.n	8012216 <__swsetup_r+0x6e>
 80121f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80121f2:	b141      	cbz	r1, 8012206 <__swsetup_r+0x5e>
 80121f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80121f8:	4299      	cmp	r1, r3
 80121fa:	d002      	beq.n	8012202 <__swsetup_r+0x5a>
 80121fc:	4630      	mov	r0, r6
 80121fe:	f000 fa23 	bl	8012648 <_free_r>
 8012202:	2300      	movs	r3, #0
 8012204:	6363      	str	r3, [r4, #52]	; 0x34
 8012206:	89a3      	ldrh	r3, [r4, #12]
 8012208:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801220c:	81a3      	strh	r3, [r4, #12]
 801220e:	2300      	movs	r3, #0
 8012210:	6063      	str	r3, [r4, #4]
 8012212:	6923      	ldr	r3, [r4, #16]
 8012214:	6023      	str	r3, [r4, #0]
 8012216:	89a3      	ldrh	r3, [r4, #12]
 8012218:	f043 0308 	orr.w	r3, r3, #8
 801221c:	81a3      	strh	r3, [r4, #12]
 801221e:	6923      	ldr	r3, [r4, #16]
 8012220:	b94b      	cbnz	r3, 8012236 <__swsetup_r+0x8e>
 8012222:	89a3      	ldrh	r3, [r4, #12]
 8012224:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8012228:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801222c:	d003      	beq.n	8012236 <__swsetup_r+0x8e>
 801222e:	4630      	mov	r0, r6
 8012230:	4621      	mov	r1, r4
 8012232:	f000 f9b3 	bl	801259c <__smakebuf_r>
 8012236:	89a3      	ldrh	r3, [r4, #12]
 8012238:	f013 0201 	ands.w	r2, r3, #1
 801223c:	d005      	beq.n	801224a <__swsetup_r+0xa2>
 801223e:	2200      	movs	r2, #0
 8012240:	60a2      	str	r2, [r4, #8]
 8012242:	6962      	ldr	r2, [r4, #20]
 8012244:	4252      	negs	r2, r2
 8012246:	61a2      	str	r2, [r4, #24]
 8012248:	e003      	b.n	8012252 <__swsetup_r+0xaa>
 801224a:	0799      	lsls	r1, r3, #30
 801224c:	bf58      	it	pl
 801224e:	6962      	ldrpl	r2, [r4, #20]
 8012250:	60a2      	str	r2, [r4, #8]
 8012252:	6922      	ldr	r2, [r4, #16]
 8012254:	b94a      	cbnz	r2, 801226a <__swsetup_r+0xc2>
 8012256:	f003 0080 	and.w	r0, r3, #128	; 0x80
 801225a:	b280      	uxth	r0, r0
 801225c:	b130      	cbz	r0, 801226c <__swsetup_r+0xc4>
 801225e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012262:	81a3      	strh	r3, [r4, #12]
 8012264:	f04f 30ff 	mov.w	r0, #4294967295
 8012268:	bd70      	pop	{r4, r5, r6, pc}
 801226a:	2000      	movs	r0, #0
 801226c:	bd70      	pop	{r4, r5, r6, pc}
 801226e:	bf00      	nop
 8012270:	1fff4330 	.word	0x1fff4330
 8012274:	080144d0 	.word	0x080144d0
 8012278:	080144f0 	.word	0x080144f0
 801227c:	08014510 	.word	0x08014510

08012280 <div>:
 8012280:	2900      	cmp	r1, #0
 8012282:	b510      	push	{r4, lr}
 8012284:	fb91 f4f2 	sdiv	r4, r1, r2
 8012288:	fb02 1314 	mls	r3, r2, r4, r1
 801228c:	db04      	blt.n	8012298 <div+0x18>
 801228e:	2b00      	cmp	r3, #0
 8012290:	da07      	bge.n	80122a2 <div+0x22>
 8012292:	3401      	adds	r4, #1
 8012294:	1a9b      	subs	r3, r3, r2
 8012296:	e004      	b.n	80122a2 <div+0x22>
 8012298:	2b00      	cmp	r3, #0
 801229a:	bfc4      	itt	gt
 801229c:	f104 34ff 	addgt.w	r4, r4, #4294967295
 80122a0:	189b      	addgt	r3, r3, r2
 80122a2:	6004      	str	r4, [r0, #0]
 80122a4:	6043      	str	r3, [r0, #4]
 80122a6:	bd10      	pop	{r4, pc}

080122a8 <__sflush_r>:
 80122a8:	898a      	ldrh	r2, [r1, #12]
 80122aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122ae:	4605      	mov	r5, r0
 80122b0:	0710      	lsls	r0, r2, #28
 80122b2:	460c      	mov	r4, r1
 80122b4:	d457      	bmi.n	8012366 <__sflush_r+0xbe>
 80122b6:	684b      	ldr	r3, [r1, #4]
 80122b8:	2b00      	cmp	r3, #0
 80122ba:	dc02      	bgt.n	80122c2 <__sflush_r+0x1a>
 80122bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80122be:	2b00      	cmp	r3, #0
 80122c0:	dd18      	ble.n	80122f4 <__sflush_r+0x4c>
 80122c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80122c4:	b1b6      	cbz	r6, 80122f4 <__sflush_r+0x4c>
 80122c6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80122ca:	2300      	movs	r3, #0
 80122cc:	b292      	uxth	r2, r2
 80122ce:	682f      	ldr	r7, [r5, #0]
 80122d0:	602b      	str	r3, [r5, #0]
 80122d2:	b10a      	cbz	r2, 80122d8 <__sflush_r+0x30>
 80122d4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80122d6:	e010      	b.n	80122fa <__sflush_r+0x52>
 80122d8:	6a21      	ldr	r1, [r4, #32]
 80122da:	4628      	mov	r0, r5
 80122dc:	2301      	movs	r3, #1
 80122de:	47b0      	blx	r6
 80122e0:	1c41      	adds	r1, r0, #1
 80122e2:	4602      	mov	r2, r0
 80122e4:	d109      	bne.n	80122fa <__sflush_r+0x52>
 80122e6:	682b      	ldr	r3, [r5, #0]
 80122e8:	b13b      	cbz	r3, 80122fa <__sflush_r+0x52>
 80122ea:	2b1d      	cmp	r3, #29
 80122ec:	d001      	beq.n	80122f2 <__sflush_r+0x4a>
 80122ee:	2b16      	cmp	r3, #22
 80122f0:	d147      	bne.n	8012382 <__sflush_r+0xda>
 80122f2:	602f      	str	r7, [r5, #0]
 80122f4:	2000      	movs	r0, #0
 80122f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80122fa:	89a3      	ldrh	r3, [r4, #12]
 80122fc:	075b      	lsls	r3, r3, #29
 80122fe:	d505      	bpl.n	801230c <__sflush_r+0x64>
 8012300:	6863      	ldr	r3, [r4, #4]
 8012302:	1ad2      	subs	r2, r2, r3
 8012304:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012306:	b10b      	cbz	r3, 801230c <__sflush_r+0x64>
 8012308:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801230a:	1ad2      	subs	r2, r2, r3
 801230c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801230e:	6a21      	ldr	r1, [r4, #32]
 8012310:	2300      	movs	r3, #0
 8012312:	4628      	mov	r0, r5
 8012314:	47b0      	blx	r6
 8012316:	1c46      	adds	r6, r0, #1
 8012318:	89a3      	ldrh	r3, [r4, #12]
 801231a:	d105      	bne.n	8012328 <__sflush_r+0x80>
 801231c:	682a      	ldr	r2, [r5, #0]
 801231e:	b11a      	cbz	r2, 8012328 <__sflush_r+0x80>
 8012320:	2a1d      	cmp	r2, #29
 8012322:	d001      	beq.n	8012328 <__sflush_r+0x80>
 8012324:	2a16      	cmp	r2, #22
 8012326:	d119      	bne.n	801235c <__sflush_r+0xb4>
 8012328:	2200      	movs	r2, #0
 801232a:	6062      	str	r2, [r4, #4]
 801232c:	04d9      	lsls	r1, r3, #19
 801232e:	6922      	ldr	r2, [r4, #16]
 8012330:	6022      	str	r2, [r4, #0]
 8012332:	d504      	bpl.n	801233e <__sflush_r+0x96>
 8012334:	1c42      	adds	r2, r0, #1
 8012336:	d101      	bne.n	801233c <__sflush_r+0x94>
 8012338:	682b      	ldr	r3, [r5, #0]
 801233a:	b903      	cbnz	r3, 801233e <__sflush_r+0x96>
 801233c:	6560      	str	r0, [r4, #84]	; 0x54
 801233e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012340:	602f      	str	r7, [r5, #0]
 8012342:	2900      	cmp	r1, #0
 8012344:	d0d6      	beq.n	80122f4 <__sflush_r+0x4c>
 8012346:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801234a:	4299      	cmp	r1, r3
 801234c:	d002      	beq.n	8012354 <__sflush_r+0xac>
 801234e:	4628      	mov	r0, r5
 8012350:	f000 f97a 	bl	8012648 <_free_r>
 8012354:	2000      	movs	r0, #0
 8012356:	6360      	str	r0, [r4, #52]	; 0x34
 8012358:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801235c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012360:	81a3      	strh	r3, [r4, #12]
 8012362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012366:	690f      	ldr	r7, [r1, #16]
 8012368:	2f00      	cmp	r7, #0
 801236a:	d0c3      	beq.n	80122f4 <__sflush_r+0x4c>
 801236c:	0793      	lsls	r3, r2, #30
 801236e:	680e      	ldr	r6, [r1, #0]
 8012370:	bf08      	it	eq
 8012372:	694b      	ldreq	r3, [r1, #20]
 8012374:	600f      	str	r7, [r1, #0]
 8012376:	bf18      	it	ne
 8012378:	2300      	movne	r3, #0
 801237a:	ebc7 0806 	rsb	r8, r7, r6
 801237e:	608b      	str	r3, [r1, #8]
 8012380:	e012      	b.n	80123a8 <__sflush_r+0x100>
 8012382:	89a3      	ldrh	r3, [r4, #12]
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	81a3      	strh	r3, [r4, #12]
 801238a:	f04f 30ff 	mov.w	r0, #4294967295
 801238e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012392:	4628      	mov	r0, r5
 8012394:	6a21      	ldr	r1, [r4, #32]
 8012396:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012398:	463a      	mov	r2, r7
 801239a:	4643      	mov	r3, r8
 801239c:	47b0      	blx	r6
 801239e:	2800      	cmp	r0, #0
 80123a0:	ddef      	ble.n	8012382 <__sflush_r+0xda>
 80123a2:	4407      	add	r7, r0
 80123a4:	ebc0 0808 	rsb	r8, r0, r8
 80123a8:	f1b8 0f00 	cmp.w	r8, #0
 80123ac:	dcf1      	bgt.n	8012392 <__sflush_r+0xea>
 80123ae:	e7a1      	b.n	80122f4 <__sflush_r+0x4c>

080123b0 <_fflush_r>:
 80123b0:	b538      	push	{r3, r4, r5, lr}
 80123b2:	690b      	ldr	r3, [r1, #16]
 80123b4:	4605      	mov	r5, r0
 80123b6:	460c      	mov	r4, r1
 80123b8:	b1db      	cbz	r3, 80123f2 <_fflush_r+0x42>
 80123ba:	b118      	cbz	r0, 80123c4 <_fflush_r+0x14>
 80123bc:	6983      	ldr	r3, [r0, #24]
 80123be:	b90b      	cbnz	r3, 80123c4 <_fflush_r+0x14>
 80123c0:	f000 f860 	bl	8012484 <__sinit>
 80123c4:	4b0c      	ldr	r3, [pc, #48]	; (80123f8 <_fflush_r+0x48>)
 80123c6:	429c      	cmp	r4, r3
 80123c8:	d101      	bne.n	80123ce <_fflush_r+0x1e>
 80123ca:	686c      	ldr	r4, [r5, #4]
 80123cc:	e008      	b.n	80123e0 <_fflush_r+0x30>
 80123ce:	4b0b      	ldr	r3, [pc, #44]	; (80123fc <_fflush_r+0x4c>)
 80123d0:	429c      	cmp	r4, r3
 80123d2:	d101      	bne.n	80123d8 <_fflush_r+0x28>
 80123d4:	68ac      	ldr	r4, [r5, #8]
 80123d6:	e003      	b.n	80123e0 <_fflush_r+0x30>
 80123d8:	4b09      	ldr	r3, [pc, #36]	; (8012400 <_fflush_r+0x50>)
 80123da:	429c      	cmp	r4, r3
 80123dc:	bf08      	it	eq
 80123de:	68ec      	ldreq	r4, [r5, #12]
 80123e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80123e4:	b12b      	cbz	r3, 80123f2 <_fflush_r+0x42>
 80123e6:	4628      	mov	r0, r5
 80123e8:	4621      	mov	r1, r4
 80123ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80123ee:	f7ff bf5b 	b.w	80122a8 <__sflush_r>
 80123f2:	2000      	movs	r0, #0
 80123f4:	bd38      	pop	{r3, r4, r5, pc}
 80123f6:	bf00      	nop
 80123f8:	080144d0 	.word	0x080144d0
 80123fc:	080144f0 	.word	0x080144f0
 8012400:	08014510 	.word	0x08014510

08012404 <_cleanup_r>:
 8012404:	4901      	ldr	r1, [pc, #4]	; (801240c <_cleanup_r+0x8>)
 8012406:	f000 b8a7 	b.w	8012558 <_fwalk_reent>
 801240a:	bf00      	nop
 801240c:	080123b1 	.word	0x080123b1

08012410 <std.isra.0>:
 8012410:	2300      	movs	r3, #0
 8012412:	b510      	push	{r4, lr}
 8012414:	4604      	mov	r4, r0
 8012416:	6003      	str	r3, [r0, #0]
 8012418:	6043      	str	r3, [r0, #4]
 801241a:	6083      	str	r3, [r0, #8]
 801241c:	8181      	strh	r1, [r0, #12]
 801241e:	6643      	str	r3, [r0, #100]	; 0x64
 8012420:	81c2      	strh	r2, [r0, #14]
 8012422:	6103      	str	r3, [r0, #16]
 8012424:	6143      	str	r3, [r0, #20]
 8012426:	6183      	str	r3, [r0, #24]
 8012428:	4619      	mov	r1, r3
 801242a:	305c      	adds	r0, #92	; 0x5c
 801242c:	2208      	movs	r2, #8
 801242e:	f7ff f990 	bl	8011752 <memset>
 8012432:	4b05      	ldr	r3, [pc, #20]	; (8012448 <std.isra.0+0x38>)
 8012434:	6263      	str	r3, [r4, #36]	; 0x24
 8012436:	4b05      	ldr	r3, [pc, #20]	; (801244c <std.isra.0+0x3c>)
 8012438:	62a3      	str	r3, [r4, #40]	; 0x28
 801243a:	4b05      	ldr	r3, [pc, #20]	; (8012450 <std.isra.0+0x40>)
 801243c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801243e:	4b05      	ldr	r3, [pc, #20]	; (8012454 <std.isra.0+0x44>)
 8012440:	6224      	str	r4, [r4, #32]
 8012442:	6323      	str	r3, [r4, #48]	; 0x30
 8012444:	bd10      	pop	{r4, pc}
 8012446:	bf00      	nop
 8012448:	08012d55 	.word	0x08012d55
 801244c:	08012d77 	.word	0x08012d77
 8012450:	08012daf 	.word	0x08012daf
 8012454:	08012dd3 	.word	0x08012dd3

08012458 <__sfmoreglue>:
 8012458:	b570      	push	{r4, r5, r6, lr}
 801245a:	2368      	movs	r3, #104	; 0x68
 801245c:	1e4d      	subs	r5, r1, #1
 801245e:	435d      	muls	r5, r3
 8012460:	460e      	mov	r6, r1
 8012462:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012466:	f000 f933 	bl	80126d0 <_malloc_r>
 801246a:	4604      	mov	r4, r0
 801246c:	b140      	cbz	r0, 8012480 <__sfmoreglue+0x28>
 801246e:	2100      	movs	r1, #0
 8012470:	e880 0042 	stmia.w	r0, {r1, r6}
 8012474:	300c      	adds	r0, #12
 8012476:	60a0      	str	r0, [r4, #8]
 8012478:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801247c:	f7ff f969 	bl	8011752 <memset>
 8012480:	4620      	mov	r0, r4
 8012482:	bd70      	pop	{r4, r5, r6, pc}

08012484 <__sinit>:
 8012484:	6983      	ldr	r3, [r0, #24]
 8012486:	b510      	push	{r4, lr}
 8012488:	4604      	mov	r4, r0
 801248a:	bb33      	cbnz	r3, 80124da <__sinit+0x56>
 801248c:	6483      	str	r3, [r0, #72]	; 0x48
 801248e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8012490:	6503      	str	r3, [r0, #80]	; 0x50
 8012492:	4b12      	ldr	r3, [pc, #72]	; (80124dc <__sinit+0x58>)
 8012494:	4a12      	ldr	r2, [pc, #72]	; (80124e0 <__sinit+0x5c>)
 8012496:	681b      	ldr	r3, [r3, #0]
 8012498:	6282      	str	r2, [r0, #40]	; 0x28
 801249a:	4298      	cmp	r0, r3
 801249c:	bf04      	itt	eq
 801249e:	2301      	moveq	r3, #1
 80124a0:	6183      	streq	r3, [r0, #24]
 80124a2:	f000 f81f 	bl	80124e4 <__sfp>
 80124a6:	6060      	str	r0, [r4, #4]
 80124a8:	4620      	mov	r0, r4
 80124aa:	f000 f81b 	bl	80124e4 <__sfp>
 80124ae:	60a0      	str	r0, [r4, #8]
 80124b0:	4620      	mov	r0, r4
 80124b2:	f000 f817 	bl	80124e4 <__sfp>
 80124b6:	2104      	movs	r1, #4
 80124b8:	60e0      	str	r0, [r4, #12]
 80124ba:	2200      	movs	r2, #0
 80124bc:	6860      	ldr	r0, [r4, #4]
 80124be:	f7ff ffa7 	bl	8012410 <std.isra.0>
 80124c2:	68a0      	ldr	r0, [r4, #8]
 80124c4:	2109      	movs	r1, #9
 80124c6:	2201      	movs	r2, #1
 80124c8:	f7ff ffa2 	bl	8012410 <std.isra.0>
 80124cc:	68e0      	ldr	r0, [r4, #12]
 80124ce:	2112      	movs	r1, #18
 80124d0:	2202      	movs	r2, #2
 80124d2:	f7ff ff9d 	bl	8012410 <std.isra.0>
 80124d6:	2301      	movs	r3, #1
 80124d8:	61a3      	str	r3, [r4, #24]
 80124da:	bd10      	pop	{r4, pc}
 80124dc:	08014368 	.word	0x08014368
 80124e0:	08012405 	.word	0x08012405

080124e4 <__sfp>:
 80124e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124e6:	4b1b      	ldr	r3, [pc, #108]	; (8012554 <__sfp+0x70>)
 80124e8:	681e      	ldr	r6, [r3, #0]
 80124ea:	69b3      	ldr	r3, [r6, #24]
 80124ec:	4607      	mov	r7, r0
 80124ee:	b913      	cbnz	r3, 80124f6 <__sfp+0x12>
 80124f0:	4630      	mov	r0, r6
 80124f2:	f7ff ffc7 	bl	8012484 <__sinit>
 80124f6:	3648      	adds	r6, #72	; 0x48
 80124f8:	68b4      	ldr	r4, [r6, #8]
 80124fa:	6873      	ldr	r3, [r6, #4]
 80124fc:	3b01      	subs	r3, #1
 80124fe:	d404      	bmi.n	801250a <__sfp+0x26>
 8012500:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012504:	b175      	cbz	r5, 8012524 <__sfp+0x40>
 8012506:	3468      	adds	r4, #104	; 0x68
 8012508:	e7f8      	b.n	80124fc <__sfp+0x18>
 801250a:	6833      	ldr	r3, [r6, #0]
 801250c:	b92b      	cbnz	r3, 801251a <__sfp+0x36>
 801250e:	4638      	mov	r0, r7
 8012510:	2104      	movs	r1, #4
 8012512:	f7ff ffa1 	bl	8012458 <__sfmoreglue>
 8012516:	6030      	str	r0, [r6, #0]
 8012518:	b108      	cbz	r0, 801251e <__sfp+0x3a>
 801251a:	6836      	ldr	r6, [r6, #0]
 801251c:	e7ec      	b.n	80124f8 <__sfp+0x14>
 801251e:	230c      	movs	r3, #12
 8012520:	603b      	str	r3, [r7, #0]
 8012522:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012524:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012528:	81e3      	strh	r3, [r4, #14]
 801252a:	2301      	movs	r3, #1
 801252c:	81a3      	strh	r3, [r4, #12]
 801252e:	6665      	str	r5, [r4, #100]	; 0x64
 8012530:	6025      	str	r5, [r4, #0]
 8012532:	60a5      	str	r5, [r4, #8]
 8012534:	6065      	str	r5, [r4, #4]
 8012536:	6125      	str	r5, [r4, #16]
 8012538:	6165      	str	r5, [r4, #20]
 801253a:	61a5      	str	r5, [r4, #24]
 801253c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8012540:	4629      	mov	r1, r5
 8012542:	2208      	movs	r2, #8
 8012544:	f7ff f905 	bl	8011752 <memset>
 8012548:	6365      	str	r5, [r4, #52]	; 0x34
 801254a:	63a5      	str	r5, [r4, #56]	; 0x38
 801254c:	64a5      	str	r5, [r4, #72]	; 0x48
 801254e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8012550:	4620      	mov	r0, r4
 8012552:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012554:	08014368 	.word	0x08014368

08012558 <_fwalk_reent>:
 8012558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801255c:	4680      	mov	r8, r0
 801255e:	4689      	mov	r9, r1
 8012560:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8012564:	2600      	movs	r6, #0
 8012566:	b194      	cbz	r4, 801258e <_fwalk_reent+0x36>
 8012568:	68a5      	ldr	r5, [r4, #8]
 801256a:	6867      	ldr	r7, [r4, #4]
 801256c:	3f01      	subs	r7, #1
 801256e:	d40c      	bmi.n	801258a <_fwalk_reent+0x32>
 8012570:	89ab      	ldrh	r3, [r5, #12]
 8012572:	2b01      	cmp	r3, #1
 8012574:	d907      	bls.n	8012586 <_fwalk_reent+0x2e>
 8012576:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801257a:	3301      	adds	r3, #1
 801257c:	d003      	beq.n	8012586 <_fwalk_reent+0x2e>
 801257e:	4640      	mov	r0, r8
 8012580:	4629      	mov	r1, r5
 8012582:	47c8      	blx	r9
 8012584:	4306      	orrs	r6, r0
 8012586:	3568      	adds	r5, #104	; 0x68
 8012588:	e7f0      	b.n	801256c <_fwalk_reent+0x14>
 801258a:	6824      	ldr	r4, [r4, #0]
 801258c:	e7eb      	b.n	8012566 <_fwalk_reent+0xe>
 801258e:	4630      	mov	r0, r6
 8012590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08012594 <__gettzinfo>:
 8012594:	4800      	ldr	r0, [pc, #0]	; (8012598 <__gettzinfo+0x4>)
 8012596:	4770      	bx	lr
 8012598:	1fff4338 	.word	0x1fff4338

0801259c <__smakebuf_r>:
 801259c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801259e:	898b      	ldrh	r3, [r1, #12]
 80125a0:	079d      	lsls	r5, r3, #30
 80125a2:	b091      	sub	sp, #68	; 0x44
 80125a4:	4606      	mov	r6, r0
 80125a6:	460c      	mov	r4, r1
 80125a8:	d426      	bmi.n	80125f8 <__smakebuf_r+0x5c>
 80125aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80125ae:	2900      	cmp	r1, #0
 80125b0:	da09      	bge.n	80125c6 <__smakebuf_r+0x2a>
 80125b2:	89a3      	ldrh	r3, [r4, #12]
 80125b4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80125b8:	f04f 0500 	mov.w	r5, #0
 80125bc:	bf14      	ite	ne
 80125be:	2740      	movne	r7, #64	; 0x40
 80125c0:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80125c4:	e00d      	b.n	80125e2 <__smakebuf_r+0x46>
 80125c6:	aa01      	add	r2, sp, #4
 80125c8:	f000 fc2a 	bl	8012e20 <_fstat_r>
 80125cc:	2800      	cmp	r0, #0
 80125ce:	dbf0      	blt.n	80125b2 <__smakebuf_r+0x16>
 80125d0:	9d02      	ldr	r5, [sp, #8]
 80125d2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80125d6:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 80125da:	424d      	negs	r5, r1
 80125dc:	414d      	adcs	r5, r1
 80125de:	f44f 6780 	mov.w	r7, #1024	; 0x400
 80125e2:	4630      	mov	r0, r6
 80125e4:	4639      	mov	r1, r7
 80125e6:	f000 f873 	bl	80126d0 <_malloc_r>
 80125ea:	b960      	cbnz	r0, 8012606 <__smakebuf_r+0x6a>
 80125ec:	89a3      	ldrh	r3, [r4, #12]
 80125ee:	059a      	lsls	r2, r3, #22
 80125f0:	d41d      	bmi.n	801262e <__smakebuf_r+0x92>
 80125f2:	f043 0302 	orr.w	r3, r3, #2
 80125f6:	81a3      	strh	r3, [r4, #12]
 80125f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	6123      	str	r3, [r4, #16]
 8012600:	2301      	movs	r3, #1
 8012602:	6163      	str	r3, [r4, #20]
 8012604:	e013      	b.n	801262e <__smakebuf_r+0x92>
 8012606:	4b0b      	ldr	r3, [pc, #44]	; (8012634 <__smakebuf_r+0x98>)
 8012608:	62b3      	str	r3, [r6, #40]	; 0x28
 801260a:	89a3      	ldrh	r3, [r4, #12]
 801260c:	6020      	str	r0, [r4, #0]
 801260e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012612:	81a3      	strh	r3, [r4, #12]
 8012614:	6120      	str	r0, [r4, #16]
 8012616:	6167      	str	r7, [r4, #20]
 8012618:	b14d      	cbz	r5, 801262e <__smakebuf_r+0x92>
 801261a:	4630      	mov	r0, r6
 801261c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012620:	f000 fc10 	bl	8012e44 <_isatty_r>
 8012624:	b118      	cbz	r0, 801262e <__smakebuf_r+0x92>
 8012626:	89a3      	ldrh	r3, [r4, #12]
 8012628:	f043 0301 	orr.w	r3, r3, #1
 801262c:	81a3      	strh	r3, [r4, #12]
 801262e:	b011      	add	sp, #68	; 0x44
 8012630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012632:	bf00      	nop
 8012634:	08012405 	.word	0x08012405

08012638 <malloc>:
 8012638:	4b02      	ldr	r3, [pc, #8]	; (8012644 <malloc+0xc>)
 801263a:	4601      	mov	r1, r0
 801263c:	6818      	ldr	r0, [r3, #0]
 801263e:	f000 b847 	b.w	80126d0 <_malloc_r>
 8012642:	bf00      	nop
 8012644:	1fff4330 	.word	0x1fff4330

08012648 <_free_r>:
 8012648:	b530      	push	{r4, r5, lr}
 801264a:	2900      	cmp	r1, #0
 801264c:	d03d      	beq.n	80126ca <_free_r+0x82>
 801264e:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8012652:	1f0b      	subs	r3, r1, #4
 8012654:	491d      	ldr	r1, [pc, #116]	; (80126cc <_free_r+0x84>)
 8012656:	2a00      	cmp	r2, #0
 8012658:	bfb8      	it	lt
 801265a:	189b      	addlt	r3, r3, r2
 801265c:	680a      	ldr	r2, [r1, #0]
 801265e:	460c      	mov	r4, r1
 8012660:	b912      	cbnz	r2, 8012668 <_free_r+0x20>
 8012662:	605a      	str	r2, [r3, #4]
 8012664:	600b      	str	r3, [r1, #0]
 8012666:	bd30      	pop	{r4, r5, pc}
 8012668:	4293      	cmp	r3, r2
 801266a:	d20d      	bcs.n	8012688 <_free_r+0x40>
 801266c:	6819      	ldr	r1, [r3, #0]
 801266e:	1858      	adds	r0, r3, r1
 8012670:	4290      	cmp	r0, r2
 8012672:	bf01      	itttt	eq
 8012674:	585a      	ldreq	r2, [r3, r1]
 8012676:	1852      	addeq	r2, r2, r1
 8012678:	601a      	streq	r2, [r3, #0]
 801267a:	6842      	ldreq	r2, [r0, #4]
 801267c:	605a      	str	r2, [r3, #4]
 801267e:	6023      	str	r3, [r4, #0]
 8012680:	bd30      	pop	{r4, r5, pc}
 8012682:	4299      	cmp	r1, r3
 8012684:	d803      	bhi.n	801268e <_free_r+0x46>
 8012686:	460a      	mov	r2, r1
 8012688:	6851      	ldr	r1, [r2, #4]
 801268a:	2900      	cmp	r1, #0
 801268c:	d1f9      	bne.n	8012682 <_free_r+0x3a>
 801268e:	6814      	ldr	r4, [r2, #0]
 8012690:	1915      	adds	r5, r2, r4
 8012692:	429d      	cmp	r5, r3
 8012694:	d10a      	bne.n	80126ac <_free_r+0x64>
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	4423      	add	r3, r4
 801269a:	18d0      	adds	r0, r2, r3
 801269c:	4288      	cmp	r0, r1
 801269e:	6013      	str	r3, [r2, #0]
 80126a0:	d113      	bne.n	80126ca <_free_r+0x82>
 80126a2:	6808      	ldr	r0, [r1, #0]
 80126a4:	4403      	add	r3, r0
 80126a6:	6013      	str	r3, [r2, #0]
 80126a8:	684b      	ldr	r3, [r1, #4]
 80126aa:	e00d      	b.n	80126c8 <_free_r+0x80>
 80126ac:	d902      	bls.n	80126b4 <_free_r+0x6c>
 80126ae:	230c      	movs	r3, #12
 80126b0:	6003      	str	r3, [r0, #0]
 80126b2:	bd30      	pop	{r4, r5, pc}
 80126b4:	681c      	ldr	r4, [r3, #0]
 80126b6:	1918      	adds	r0, r3, r4
 80126b8:	4288      	cmp	r0, r1
 80126ba:	bf04      	itt	eq
 80126bc:	6808      	ldreq	r0, [r1, #0]
 80126be:	6849      	ldreq	r1, [r1, #4]
 80126c0:	6059      	str	r1, [r3, #4]
 80126c2:	bf04      	itt	eq
 80126c4:	1900      	addeq	r0, r0, r4
 80126c6:	6018      	streq	r0, [r3, #0]
 80126c8:	6053      	str	r3, [r2, #4]
 80126ca:	bd30      	pop	{r4, r5, pc}
 80126cc:	1fff47a4 	.word	0x1fff47a4

080126d0 <_malloc_r>:
 80126d0:	b570      	push	{r4, r5, r6, lr}
 80126d2:	1ccc      	adds	r4, r1, #3
 80126d4:	f024 0403 	bic.w	r4, r4, #3
 80126d8:	3408      	adds	r4, #8
 80126da:	2c0c      	cmp	r4, #12
 80126dc:	bf38      	it	cc
 80126de:	240c      	movcc	r4, #12
 80126e0:	2c00      	cmp	r4, #0
 80126e2:	4606      	mov	r6, r0
 80126e4:	da03      	bge.n	80126ee <_malloc_r+0x1e>
 80126e6:	230c      	movs	r3, #12
 80126e8:	6033      	str	r3, [r6, #0]
 80126ea:	2000      	movs	r0, #0
 80126ec:	bd70      	pop	{r4, r5, r6, pc}
 80126ee:	428c      	cmp	r4, r1
 80126f0:	d3f9      	bcc.n	80126e6 <_malloc_r+0x16>
 80126f2:	4a20      	ldr	r2, [pc, #128]	; (8012774 <_malloc_r+0xa4>)
 80126f4:	6813      	ldr	r3, [r2, #0]
 80126f6:	4610      	mov	r0, r2
 80126f8:	4619      	mov	r1, r3
 80126fa:	b1a1      	cbz	r1, 8012726 <_malloc_r+0x56>
 80126fc:	680a      	ldr	r2, [r1, #0]
 80126fe:	1b12      	subs	r2, r2, r4
 8012700:	d40e      	bmi.n	8012720 <_malloc_r+0x50>
 8012702:	2a0b      	cmp	r2, #11
 8012704:	d903      	bls.n	801270e <_malloc_r+0x3e>
 8012706:	600a      	str	r2, [r1, #0]
 8012708:	188b      	adds	r3, r1, r2
 801270a:	508c      	str	r4, [r1, r2]
 801270c:	e01f      	b.n	801274e <_malloc_r+0x7e>
 801270e:	428b      	cmp	r3, r1
 8012710:	bf0d      	iteet	eq
 8012712:	685a      	ldreq	r2, [r3, #4]
 8012714:	684a      	ldrne	r2, [r1, #4]
 8012716:	605a      	strne	r2, [r3, #4]
 8012718:	6002      	streq	r2, [r0, #0]
 801271a:	bf18      	it	ne
 801271c:	460b      	movne	r3, r1
 801271e:	e016      	b.n	801274e <_malloc_r+0x7e>
 8012720:	460b      	mov	r3, r1
 8012722:	6849      	ldr	r1, [r1, #4]
 8012724:	e7e9      	b.n	80126fa <_malloc_r+0x2a>
 8012726:	4d14      	ldr	r5, [pc, #80]	; (8012778 <_malloc_r+0xa8>)
 8012728:	682b      	ldr	r3, [r5, #0]
 801272a:	b91b      	cbnz	r3, 8012734 <_malloc_r+0x64>
 801272c:	4630      	mov	r0, r6
 801272e:	f000 fb01 	bl	8012d34 <_sbrk_r>
 8012732:	6028      	str	r0, [r5, #0]
 8012734:	4630      	mov	r0, r6
 8012736:	4621      	mov	r1, r4
 8012738:	f000 fafc 	bl	8012d34 <_sbrk_r>
 801273c:	1c42      	adds	r2, r0, #1
 801273e:	4603      	mov	r3, r0
 8012740:	d0d1      	beq.n	80126e6 <_malloc_r+0x16>
 8012742:	1cc5      	adds	r5, r0, #3
 8012744:	f025 0503 	bic.w	r5, r5, #3
 8012748:	4285      	cmp	r5, r0
 801274a:	d10a      	bne.n	8012762 <_malloc_r+0x92>
 801274c:	601c      	str	r4, [r3, #0]
 801274e:	f103 000b 	add.w	r0, r3, #11
 8012752:	1d1a      	adds	r2, r3, #4
 8012754:	f020 0007 	bic.w	r0, r0, #7
 8012758:	1a82      	subs	r2, r0, r2
 801275a:	d00a      	beq.n	8012772 <_malloc_r+0xa2>
 801275c:	4251      	negs	r1, r2
 801275e:	5099      	str	r1, [r3, r2]
 8012760:	bd70      	pop	{r4, r5, r6, pc}
 8012762:	4630      	mov	r0, r6
 8012764:	1ae9      	subs	r1, r5, r3
 8012766:	f000 fae5 	bl	8012d34 <_sbrk_r>
 801276a:	3001      	adds	r0, #1
 801276c:	d0bb      	beq.n	80126e6 <_malloc_r+0x16>
 801276e:	462b      	mov	r3, r5
 8012770:	e7ec      	b.n	801274c <_malloc_r+0x7c>
 8012772:	bd70      	pop	{r4, r5, r6, pc}
 8012774:	1fff47a4 	.word	0x1fff47a4
 8012778:	1fff47a0 	.word	0x1fff47a0

0801277c <__ssputs_r>:
 801277c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012780:	688e      	ldr	r6, [r1, #8]
 8012782:	42b3      	cmp	r3, r6
 8012784:	4682      	mov	sl, r0
 8012786:	460c      	mov	r4, r1
 8012788:	4690      	mov	r8, r2
 801278a:	4699      	mov	r9, r3
 801278c:	d340      	bcc.n	8012810 <__ssputs_r+0x94>
 801278e:	898a      	ldrh	r2, [r1, #12]
 8012790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012794:	d03a      	beq.n	801280c <__ssputs_r+0x90>
 8012796:	6825      	ldr	r5, [r4, #0]
 8012798:	6909      	ldr	r1, [r1, #16]
 801279a:	1a6f      	subs	r7, r5, r1
 801279c:	6965      	ldr	r5, [r4, #20]
 801279e:	2302      	movs	r3, #2
 80127a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80127a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80127a8:	1c7b      	adds	r3, r7, #1
 80127aa:	444b      	add	r3, r9
 80127ac:	429d      	cmp	r5, r3
 80127ae:	bf38      	it	cc
 80127b0:	461d      	movcc	r5, r3
 80127b2:	0553      	lsls	r3, r2, #21
 80127b4:	d50f      	bpl.n	80127d6 <__ssputs_r+0x5a>
 80127b6:	4629      	mov	r1, r5
 80127b8:	f7ff ff8a 	bl	80126d0 <_malloc_r>
 80127bc:	4606      	mov	r6, r0
 80127be:	b198      	cbz	r0, 80127e8 <__ssputs_r+0x6c>
 80127c0:	6921      	ldr	r1, [r4, #16]
 80127c2:	463a      	mov	r2, r7
 80127c4:	f7fe ffba 	bl	801173c <memcpy>
 80127c8:	89a3      	ldrh	r3, [r4, #12]
 80127ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80127ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80127d2:	81a3      	strh	r3, [r4, #12]
 80127d4:	e013      	b.n	80127fe <__ssputs_r+0x82>
 80127d6:	462a      	mov	r2, r5
 80127d8:	f000 fb80 	bl	8012edc <_realloc_r>
 80127dc:	4606      	mov	r6, r0
 80127de:	b970      	cbnz	r0, 80127fe <__ssputs_r+0x82>
 80127e0:	4650      	mov	r0, sl
 80127e2:	6921      	ldr	r1, [r4, #16]
 80127e4:	f7ff ff30 	bl	8012648 <_free_r>
 80127e8:	230c      	movs	r3, #12
 80127ea:	f8ca 3000 	str.w	r3, [sl]
 80127ee:	89a3      	ldrh	r3, [r4, #12]
 80127f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80127f4:	81a3      	strh	r3, [r4, #12]
 80127f6:	f04f 30ff 	mov.w	r0, #4294967295
 80127fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127fe:	6126      	str	r6, [r4, #16]
 8012800:	6165      	str	r5, [r4, #20]
 8012802:	443e      	add	r6, r7
 8012804:	1bed      	subs	r5, r5, r7
 8012806:	6026      	str	r6, [r4, #0]
 8012808:	60a5      	str	r5, [r4, #8]
 801280a:	464e      	mov	r6, r9
 801280c:	45b1      	cmp	r9, r6
 801280e:	d200      	bcs.n	8012812 <__ssputs_r+0x96>
 8012810:	464e      	mov	r6, r9
 8012812:	4632      	mov	r2, r6
 8012814:	6820      	ldr	r0, [r4, #0]
 8012816:	4641      	mov	r1, r8
 8012818:	f000 fb45 	bl	8012ea6 <memmove>
 801281c:	68a3      	ldr	r3, [r4, #8]
 801281e:	1b9b      	subs	r3, r3, r6
 8012820:	60a3      	str	r3, [r4, #8]
 8012822:	6823      	ldr	r3, [r4, #0]
 8012824:	441e      	add	r6, r3
 8012826:	6026      	str	r6, [r4, #0]
 8012828:	2000      	movs	r0, #0
 801282a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08012830 <_svfiprintf_r>:
 8012830:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012834:	b09d      	sub	sp, #116	; 0x74
 8012836:	4606      	mov	r6, r0
 8012838:	9303      	str	r3, [sp, #12]
 801283a:	898b      	ldrh	r3, [r1, #12]
 801283c:	061c      	lsls	r4, r3, #24
 801283e:	460d      	mov	r5, r1
 8012840:	4690      	mov	r8, r2
 8012842:	d50c      	bpl.n	801285e <_svfiprintf_r+0x2e>
 8012844:	690b      	ldr	r3, [r1, #16]
 8012846:	b953      	cbnz	r3, 801285e <_svfiprintf_r+0x2e>
 8012848:	2140      	movs	r1, #64	; 0x40
 801284a:	f7ff ff41 	bl	80126d0 <_malloc_r>
 801284e:	6028      	str	r0, [r5, #0]
 8012850:	6128      	str	r0, [r5, #16]
 8012852:	b910      	cbnz	r0, 801285a <_svfiprintf_r+0x2a>
 8012854:	230c      	movs	r3, #12
 8012856:	6033      	str	r3, [r6, #0]
 8012858:	e0cc      	b.n	80129f4 <_svfiprintf_r+0x1c4>
 801285a:	2340      	movs	r3, #64	; 0x40
 801285c:	616b      	str	r3, [r5, #20]
 801285e:	2300      	movs	r3, #0
 8012860:	9309      	str	r3, [sp, #36]	; 0x24
 8012862:	2320      	movs	r3, #32
 8012864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012868:	2330      	movs	r3, #48	; 0x30
 801286a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801286e:	4643      	mov	r3, r8
 8012870:	461c      	mov	r4, r3
 8012872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012876:	b91a      	cbnz	r2, 8012880 <_svfiprintf_r+0x50>
 8012878:	ebb4 0908 	subs.w	r9, r4, r8
 801287c:	d00f      	beq.n	801289e <_svfiprintf_r+0x6e>
 801287e:	e002      	b.n	8012886 <_svfiprintf_r+0x56>
 8012880:	2a25      	cmp	r2, #37	; 0x25
 8012882:	d1f5      	bne.n	8012870 <_svfiprintf_r+0x40>
 8012884:	e7f8      	b.n	8012878 <_svfiprintf_r+0x48>
 8012886:	4630      	mov	r0, r6
 8012888:	4629      	mov	r1, r5
 801288a:	4642      	mov	r2, r8
 801288c:	464b      	mov	r3, r9
 801288e:	f7ff ff75 	bl	801277c <__ssputs_r>
 8012892:	3001      	adds	r0, #1
 8012894:	f000 80a9 	beq.w	80129ea <_svfiprintf_r+0x1ba>
 8012898:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801289a:	444b      	add	r3, r9
 801289c:	9309      	str	r3, [sp, #36]	; 0x24
 801289e:	7823      	ldrb	r3, [r4, #0]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 80a2 	beq.w	80129ea <_svfiprintf_r+0x1ba>
 80128a6:	2300      	movs	r3, #0
 80128a8:	f04f 32ff 	mov.w	r2, #4294967295
 80128ac:	9304      	str	r3, [sp, #16]
 80128ae:	9307      	str	r3, [sp, #28]
 80128b0:	9205      	str	r2, [sp, #20]
 80128b2:	9306      	str	r3, [sp, #24]
 80128b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80128b8:	931a      	str	r3, [sp, #104]	; 0x68
 80128ba:	f104 0801 	add.w	r8, r4, #1
 80128be:	4644      	mov	r4, r8
 80128c0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8012a0c <_svfiprintf_r+0x1dc>
 80128c4:	7821      	ldrb	r1, [r4, #0]
 80128c6:	4648      	mov	r0, r9
 80128c8:	2205      	movs	r2, #5
 80128ca:	f000 fadd 	bl	8012e88 <memchr>
 80128ce:	f108 0801 	add.w	r8, r8, #1
 80128d2:	9b04      	ldr	r3, [sp, #16]
 80128d4:	b130      	cbz	r0, 80128e4 <_svfiprintf_r+0xb4>
 80128d6:	ebc9 0000 	rsb	r0, r9, r0
 80128da:	2201      	movs	r2, #1
 80128dc:	4082      	lsls	r2, r0
 80128de:	4313      	orrs	r3, r2
 80128e0:	9304      	str	r3, [sp, #16]
 80128e2:	e7ec      	b.n	80128be <_svfiprintf_r+0x8e>
 80128e4:	06d8      	lsls	r0, r3, #27
 80128e6:	bf44      	itt	mi
 80128e8:	2220      	movmi	r2, #32
 80128ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128ee:	0719      	lsls	r1, r3, #28
 80128f0:	bf44      	itt	mi
 80128f2:	222b      	movmi	r2, #43	; 0x2b
 80128f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80128f8:	7822      	ldrb	r2, [r4, #0]
 80128fa:	2a2a      	cmp	r2, #42	; 0x2a
 80128fc:	d002      	beq.n	8012904 <_svfiprintf_r+0xd4>
 80128fe:	9907      	ldr	r1, [sp, #28]
 8012900:	4623      	mov	r3, r4
 8012902:	e00e      	b.n	8012922 <_svfiprintf_r+0xf2>
 8012904:	9a03      	ldr	r2, [sp, #12]
 8012906:	1d11      	adds	r1, r2, #4
 8012908:	6812      	ldr	r2, [r2, #0]
 801290a:	9103      	str	r1, [sp, #12]
 801290c:	2a00      	cmp	r2, #0
 801290e:	bfbb      	ittet	lt
 8012910:	4252      	neglt	r2, r2
 8012912:	f043 0302 	orrlt.w	r3, r3, #2
 8012916:	9207      	strge	r2, [sp, #28]
 8012918:	9207      	strlt	r2, [sp, #28]
 801291a:	bfb8      	it	lt
 801291c:	9304      	strlt	r3, [sp, #16]
 801291e:	3401      	adds	r4, #1
 8012920:	e00a      	b.n	8012938 <_svfiprintf_r+0x108>
 8012922:	461c      	mov	r4, r3
 8012924:	3301      	adds	r3, #1
 8012926:	7822      	ldrb	r2, [r4, #0]
 8012928:	3a30      	subs	r2, #48	; 0x30
 801292a:	2a09      	cmp	r2, #9
 801292c:	d803      	bhi.n	8012936 <_svfiprintf_r+0x106>
 801292e:	200a      	movs	r0, #10
 8012930:	fb00 2101 	mla	r1, r0, r1, r2
 8012934:	e7f5      	b.n	8012922 <_svfiprintf_r+0xf2>
 8012936:	9107      	str	r1, [sp, #28]
 8012938:	7823      	ldrb	r3, [r4, #0]
 801293a:	2b2e      	cmp	r3, #46	; 0x2e
 801293c:	d11a      	bne.n	8012974 <_svfiprintf_r+0x144>
 801293e:	7863      	ldrb	r3, [r4, #1]
 8012940:	2b2a      	cmp	r3, #42	; 0x2a
 8012942:	d10a      	bne.n	801295a <_svfiprintf_r+0x12a>
 8012944:	9b03      	ldr	r3, [sp, #12]
 8012946:	1d1a      	adds	r2, r3, #4
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	9203      	str	r2, [sp, #12]
 801294c:	2b00      	cmp	r3, #0
 801294e:	bfb8      	it	lt
 8012950:	f04f 33ff 	movlt.w	r3, #4294967295
 8012954:	3402      	adds	r4, #2
 8012956:	9305      	str	r3, [sp, #20]
 8012958:	e00c      	b.n	8012974 <_svfiprintf_r+0x144>
 801295a:	1c61      	adds	r1, r4, #1
 801295c:	2200      	movs	r2, #0
 801295e:	460c      	mov	r4, r1
 8012960:	3101      	adds	r1, #1
 8012962:	7823      	ldrb	r3, [r4, #0]
 8012964:	3b30      	subs	r3, #48	; 0x30
 8012966:	2b09      	cmp	r3, #9
 8012968:	d803      	bhi.n	8012972 <_svfiprintf_r+0x142>
 801296a:	200a      	movs	r0, #10
 801296c:	fb00 3202 	mla	r2, r0, r2, r3
 8012970:	e7f5      	b.n	801295e <_svfiprintf_r+0x12e>
 8012972:	9205      	str	r2, [sp, #20]
 8012974:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8012a10 <_svfiprintf_r+0x1e0>
 8012978:	7821      	ldrb	r1, [r4, #0]
 801297a:	4640      	mov	r0, r8
 801297c:	2203      	movs	r2, #3
 801297e:	f000 fa83 	bl	8012e88 <memchr>
 8012982:	b138      	cbz	r0, 8012994 <_svfiprintf_r+0x164>
 8012984:	9a04      	ldr	r2, [sp, #16]
 8012986:	ebc8 0000 	rsb	r0, r8, r0
 801298a:	2340      	movs	r3, #64	; 0x40
 801298c:	4083      	lsls	r3, r0
 801298e:	4313      	orrs	r3, r2
 8012990:	9304      	str	r3, [sp, #16]
 8012992:	3401      	adds	r4, #1
 8012994:	7821      	ldrb	r1, [r4, #0]
 8012996:	481a      	ldr	r0, [pc, #104]	; (8012a00 <_svfiprintf_r+0x1d0>)
 8012998:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801299c:	2206      	movs	r2, #6
 801299e:	f104 0801 	add.w	r8, r4, #1
 80129a2:	f000 fa71 	bl	8012e88 <memchr>
 80129a6:	b188      	cbz	r0, 80129cc <_svfiprintf_r+0x19c>
 80129a8:	4b16      	ldr	r3, [pc, #88]	; (8012a04 <_svfiprintf_r+0x1d4>)
 80129aa:	b933      	cbnz	r3, 80129ba <_svfiprintf_r+0x18a>
 80129ac:	9b03      	ldr	r3, [sp, #12]
 80129ae:	3307      	adds	r3, #7
 80129b0:	f023 0307 	bic.w	r3, r3, #7
 80129b4:	3308      	adds	r3, #8
 80129b6:	9303      	str	r3, [sp, #12]
 80129b8:	e013      	b.n	80129e2 <_svfiprintf_r+0x1b2>
 80129ba:	ab03      	add	r3, sp, #12
 80129bc:	9300      	str	r3, [sp, #0]
 80129be:	4630      	mov	r0, r6
 80129c0:	a904      	add	r1, sp, #16
 80129c2:	462a      	mov	r2, r5
 80129c4:	4b10      	ldr	r3, [pc, #64]	; (8012a08 <_svfiprintf_r+0x1d8>)
 80129c6:	f3af 8000 	nop.w
 80129ca:	e007      	b.n	80129dc <_svfiprintf_r+0x1ac>
 80129cc:	ab03      	add	r3, sp, #12
 80129ce:	9300      	str	r3, [sp, #0]
 80129d0:	4630      	mov	r0, r6
 80129d2:	a904      	add	r1, sp, #16
 80129d4:	462a      	mov	r2, r5
 80129d6:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <_svfiprintf_r+0x1d8>)
 80129d8:	f000 f892 	bl	8012b00 <_printf_i>
 80129dc:	1c42      	adds	r2, r0, #1
 80129de:	4607      	mov	r7, r0
 80129e0:	d003      	beq.n	80129ea <_svfiprintf_r+0x1ba>
 80129e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129e4:	443b      	add	r3, r7
 80129e6:	9309      	str	r3, [sp, #36]	; 0x24
 80129e8:	e741      	b.n	801286e <_svfiprintf_r+0x3e>
 80129ea:	89ab      	ldrh	r3, [r5, #12]
 80129ec:	065b      	lsls	r3, r3, #25
 80129ee:	d401      	bmi.n	80129f4 <_svfiprintf_r+0x1c4>
 80129f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80129f2:	e001      	b.n	80129f8 <_svfiprintf_r+0x1c8>
 80129f4:	f04f 30ff 	mov.w	r0, #4294967295
 80129f8:	b01d      	add	sp, #116	; 0x74
 80129fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80129fe:	bf00      	nop
 8012a00:	0801459a 	.word	0x0801459a
 8012a04:	00000000 	.word	0x00000000
 8012a08:	0801277d 	.word	0x0801277d
 8012a0c:	08014590 	.word	0x08014590
 8012a10:	08014596 	.word	0x08014596

08012a14 <_printf_common>:
 8012a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012a18:	4691      	mov	r9, r2
 8012a1a:	461f      	mov	r7, r3
 8012a1c:	688a      	ldr	r2, [r1, #8]
 8012a1e:	690b      	ldr	r3, [r1, #16]
 8012a20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012a24:	4293      	cmp	r3, r2
 8012a26:	bfb8      	it	lt
 8012a28:	4613      	movlt	r3, r2
 8012a2a:	f8c9 3000 	str.w	r3, [r9]
 8012a2e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012a32:	4606      	mov	r6, r0
 8012a34:	460c      	mov	r4, r1
 8012a36:	b112      	cbz	r2, 8012a3e <_printf_common+0x2a>
 8012a38:	3301      	adds	r3, #1
 8012a3a:	f8c9 3000 	str.w	r3, [r9]
 8012a3e:	6823      	ldr	r3, [r4, #0]
 8012a40:	0699      	lsls	r1, r3, #26
 8012a42:	bf42      	ittt	mi
 8012a44:	f8d9 3000 	ldrmi.w	r3, [r9]
 8012a48:	3302      	addmi	r3, #2
 8012a4a:	f8c9 3000 	strmi.w	r3, [r9]
 8012a4e:	6825      	ldr	r5, [r4, #0]
 8012a50:	f015 0506 	ands.w	r5, r5, #6
 8012a54:	d01c      	beq.n	8012a90 <_printf_common+0x7c>
 8012a56:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8012a5a:	6822      	ldr	r2, [r4, #0]
 8012a5c:	3300      	adds	r3, #0
 8012a5e:	bf18      	it	ne
 8012a60:	2301      	movne	r3, #1
 8012a62:	0692      	lsls	r2, r2, #26
 8012a64:	d51f      	bpl.n	8012aa6 <_printf_common+0x92>
 8012a66:	18e1      	adds	r1, r4, r3
 8012a68:	1c5a      	adds	r2, r3, #1
 8012a6a:	2030      	movs	r0, #48	; 0x30
 8012a6c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012a70:	4422      	add	r2, r4
 8012a72:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012a76:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012a7a:	3302      	adds	r3, #2
 8012a7c:	e013      	b.n	8012aa6 <_printf_common+0x92>
 8012a7e:	4630      	mov	r0, r6
 8012a80:	4639      	mov	r1, r7
 8012a82:	f104 0219 	add.w	r2, r4, #25
 8012a86:	2301      	movs	r3, #1
 8012a88:	47c0      	blx	r8
 8012a8a:	3001      	adds	r0, #1
 8012a8c:	d007      	beq.n	8012a9e <_printf_common+0x8a>
 8012a8e:	3501      	adds	r5, #1
 8012a90:	68e3      	ldr	r3, [r4, #12]
 8012a92:	f8d9 2000 	ldr.w	r2, [r9]
 8012a96:	1a9b      	subs	r3, r3, r2
 8012a98:	429d      	cmp	r5, r3
 8012a9a:	dbf0      	blt.n	8012a7e <_printf_common+0x6a>
 8012a9c:	e7db      	b.n	8012a56 <_printf_common+0x42>
 8012a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8012aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012aa6:	4630      	mov	r0, r6
 8012aa8:	4639      	mov	r1, r7
 8012aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012aae:	47c0      	blx	r8
 8012ab0:	3001      	adds	r0, #1
 8012ab2:	d0f4      	beq.n	8012a9e <_printf_common+0x8a>
 8012ab4:	6822      	ldr	r2, [r4, #0]
 8012ab6:	f8d9 5000 	ldr.w	r5, [r9]
 8012aba:	68e3      	ldr	r3, [r4, #12]
 8012abc:	f002 0206 	and.w	r2, r2, #6
 8012ac0:	2a04      	cmp	r2, #4
 8012ac2:	bf08      	it	eq
 8012ac4:	1b5d      	subeq	r5, r3, r5
 8012ac6:	6922      	ldr	r2, [r4, #16]
 8012ac8:	68a3      	ldr	r3, [r4, #8]
 8012aca:	bf0c      	ite	eq
 8012acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012ad0:	2500      	movne	r5, #0
 8012ad2:	4293      	cmp	r3, r2
 8012ad4:	bfc4      	itt	gt
 8012ad6:	1a9b      	subgt	r3, r3, r2
 8012ad8:	18ed      	addgt	r5, r5, r3
 8012ada:	f04f 0900 	mov.w	r9, #0
 8012ade:	45a9      	cmp	r9, r5
 8012ae0:	da0a      	bge.n	8012af8 <_printf_common+0xe4>
 8012ae2:	4630      	mov	r0, r6
 8012ae4:	4639      	mov	r1, r7
 8012ae6:	f104 021a 	add.w	r2, r4, #26
 8012aea:	2301      	movs	r3, #1
 8012aec:	47c0      	blx	r8
 8012aee:	3001      	adds	r0, #1
 8012af0:	d0d5      	beq.n	8012a9e <_printf_common+0x8a>
 8012af2:	f109 0901 	add.w	r9, r9, #1
 8012af6:	e7f2      	b.n	8012ade <_printf_common+0xca>
 8012af8:	2000      	movs	r0, #0
 8012afa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

08012b00 <_printf_i>:
 8012b00:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8012b04:	460c      	mov	r4, r1
 8012b06:	4617      	mov	r7, r2
 8012b08:	7e22      	ldrb	r2, [r4, #24]
 8012b0a:	2a6e      	cmp	r2, #110	; 0x6e
 8012b0c:	4698      	mov	r8, r3
 8012b0e:	4606      	mov	r6, r0
 8012b10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b12:	f101 0143 	add.w	r1, r1, #67	; 0x43
 8012b16:	f000 80a9 	beq.w	8012c6c <_printf_i+0x16c>
 8012b1a:	d812      	bhi.n	8012b42 <_printf_i+0x42>
 8012b1c:	2a63      	cmp	r2, #99	; 0x63
 8012b1e:	d023      	beq.n	8012b68 <_printf_i+0x68>
 8012b20:	d80a      	bhi.n	8012b38 <_printf_i+0x38>
 8012b22:	2a00      	cmp	r2, #0
 8012b24:	f000 80b6 	beq.w	8012c94 <_printf_i+0x194>
 8012b28:	2a58      	cmp	r2, #88	; 0x58
 8012b2a:	f040 80c5 	bne.w	8012cb8 <_printf_i+0x1b8>
 8012b2e:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012b32:	f8df e1f8 	ldr.w	lr, [pc, #504]	; 8012d2c <_printf_i+0x22c>
 8012b36:	e051      	b.n	8012bdc <_printf_i+0xdc>
 8012b38:	2a64      	cmp	r2, #100	; 0x64
 8012b3a:	d01e      	beq.n	8012b7a <_printf_i+0x7a>
 8012b3c:	2a69      	cmp	r2, #105	; 0x69
 8012b3e:	d01c      	beq.n	8012b7a <_printf_i+0x7a>
 8012b40:	e0ba      	b.n	8012cb8 <_printf_i+0x1b8>
 8012b42:	2a73      	cmp	r2, #115	; 0x73
 8012b44:	f000 80aa 	beq.w	8012c9c <_printf_i+0x19c>
 8012b48:	d809      	bhi.n	8012b5e <_printf_i+0x5e>
 8012b4a:	2a6f      	cmp	r2, #111	; 0x6f
 8012b4c:	d02b      	beq.n	8012ba6 <_printf_i+0xa6>
 8012b4e:	2a70      	cmp	r2, #112	; 0x70
 8012b50:	f040 80b2 	bne.w	8012cb8 <_printf_i+0x1b8>
 8012b54:	6822      	ldr	r2, [r4, #0]
 8012b56:	f042 0220 	orr.w	r2, r2, #32
 8012b5a:	6022      	str	r2, [r4, #0]
 8012b5c:	e039      	b.n	8012bd2 <_printf_i+0xd2>
 8012b5e:	2a75      	cmp	r2, #117	; 0x75
 8012b60:	d021      	beq.n	8012ba6 <_printf_i+0xa6>
 8012b62:	2a78      	cmp	r2, #120	; 0x78
 8012b64:	d035      	beq.n	8012bd2 <_printf_i+0xd2>
 8012b66:	e0a7      	b.n	8012cb8 <_printf_i+0x1b8>
 8012b68:	681a      	ldr	r2, [r3, #0]
 8012b6a:	1d11      	adds	r1, r2, #4
 8012b6c:	6019      	str	r1, [r3, #0]
 8012b6e:	6813      	ldr	r3, [r2, #0]
 8012b70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012b74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012b78:	e0a2      	b.n	8012cc0 <_printf_i+0x1c0>
 8012b7a:	6820      	ldr	r0, [r4, #0]
 8012b7c:	681a      	ldr	r2, [r3, #0]
 8012b7e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012b82:	d003      	beq.n	8012b8c <_printf_i+0x8c>
 8012b84:	1d10      	adds	r0, r2, #4
 8012b86:	6018      	str	r0, [r3, #0]
 8012b88:	6813      	ldr	r3, [r2, #0]
 8012b8a:	e005      	b.n	8012b98 <_printf_i+0x98>
 8012b8c:	0645      	lsls	r5, r0, #25
 8012b8e:	d5f9      	bpl.n	8012b84 <_printf_i+0x84>
 8012b90:	1d10      	adds	r0, r2, #4
 8012b92:	6018      	str	r0, [r3, #0]
 8012b94:	f9b2 3000 	ldrsh.w	r3, [r2]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	da3b      	bge.n	8012c14 <_printf_i+0x114>
 8012b9c:	222d      	movs	r2, #45	; 0x2d
 8012b9e:	425b      	negs	r3, r3
 8012ba0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8012ba4:	e036      	b.n	8012c14 <_printf_i+0x114>
 8012ba6:	6820      	ldr	r0, [r4, #0]
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	f010 0f80 	tst.w	r0, #128	; 0x80
 8012bae:	d003      	beq.n	8012bb8 <_printf_i+0xb8>
 8012bb0:	1d10      	adds	r0, r2, #4
 8012bb2:	6018      	str	r0, [r3, #0]
 8012bb4:	6813      	ldr	r3, [r2, #0]
 8012bb6:	e004      	b.n	8012bc2 <_printf_i+0xc2>
 8012bb8:	0640      	lsls	r0, r0, #25
 8012bba:	d5f9      	bpl.n	8012bb0 <_printf_i+0xb0>
 8012bbc:	1d10      	adds	r0, r2, #4
 8012bbe:	6018      	str	r0, [r3, #0]
 8012bc0:	8813      	ldrh	r3, [r2, #0]
 8012bc2:	7e22      	ldrb	r2, [r4, #24]
 8012bc4:	f8df e164 	ldr.w	lr, [pc, #356]	; 8012d2c <_printf_i+0x22c>
 8012bc8:	2a6f      	cmp	r2, #111	; 0x6f
 8012bca:	bf0c      	ite	eq
 8012bcc:	2208      	moveq	r2, #8
 8012bce:	220a      	movne	r2, #10
 8012bd0:	e01c      	b.n	8012c0c <_printf_i+0x10c>
 8012bd2:	2278      	movs	r2, #120	; 0x78
 8012bd4:	f8df e158 	ldr.w	lr, [pc, #344]	; 8012d30 <_printf_i+0x230>
 8012bd8:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8012bdc:	6822      	ldr	r2, [r4, #0]
 8012bde:	6818      	ldr	r0, [r3, #0]
 8012be0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8012be4:	f100 0504 	add.w	r5, r0, #4
 8012be8:	601d      	str	r5, [r3, #0]
 8012bea:	d001      	beq.n	8012bf0 <_printf_i+0xf0>
 8012bec:	6803      	ldr	r3, [r0, #0]
 8012bee:	e002      	b.n	8012bf6 <_printf_i+0xf6>
 8012bf0:	0655      	lsls	r5, r2, #25
 8012bf2:	d5fb      	bpl.n	8012bec <_printf_i+0xec>
 8012bf4:	8803      	ldrh	r3, [r0, #0]
 8012bf6:	07d0      	lsls	r0, r2, #31
 8012bf8:	bf44      	itt	mi
 8012bfa:	f042 0220 	orrmi.w	r2, r2, #32
 8012bfe:	6022      	strmi	r2, [r4, #0]
 8012c00:	b91b      	cbnz	r3, 8012c0a <_printf_i+0x10a>
 8012c02:	6822      	ldr	r2, [r4, #0]
 8012c04:	f022 0220 	bic.w	r2, r2, #32
 8012c08:	6022      	str	r2, [r4, #0]
 8012c0a:	2210      	movs	r2, #16
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8012c12:	e002      	b.n	8012c1a <_printf_i+0x11a>
 8012c14:	f8df e114 	ldr.w	lr, [pc, #276]	; 8012d2c <_printf_i+0x22c>
 8012c18:	220a      	movs	r2, #10
 8012c1a:	6865      	ldr	r5, [r4, #4]
 8012c1c:	60a5      	str	r5, [r4, #8]
 8012c1e:	2d00      	cmp	r5, #0
 8012c20:	bfa2      	ittt	ge
 8012c22:	6820      	ldrge	r0, [r4, #0]
 8012c24:	f020 0004 	bicge.w	r0, r0, #4
 8012c28:	6020      	strge	r0, [r4, #0]
 8012c2a:	b903      	cbnz	r3, 8012c2e <_printf_i+0x12e>
 8012c2c:	b165      	cbz	r5, 8012c48 <_printf_i+0x148>
 8012c2e:	460d      	mov	r5, r1
 8012c30:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c34:	fb02 3310 	mls	r3, r2, r0, r3
 8012c38:	f81e 3003 	ldrb.w	r3, [lr, r3]
 8012c3c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8012c40:	4603      	mov	r3, r0
 8012c42:	2800      	cmp	r0, #0
 8012c44:	d1f4      	bne.n	8012c30 <_printf_i+0x130>
 8012c46:	e000      	b.n	8012c4a <_printf_i+0x14a>
 8012c48:	460d      	mov	r5, r1
 8012c4a:	2a08      	cmp	r2, #8
 8012c4c:	d10b      	bne.n	8012c66 <_printf_i+0x166>
 8012c4e:	6823      	ldr	r3, [r4, #0]
 8012c50:	07da      	lsls	r2, r3, #31
 8012c52:	d508      	bpl.n	8012c66 <_printf_i+0x166>
 8012c54:	6923      	ldr	r3, [r4, #16]
 8012c56:	6862      	ldr	r2, [r4, #4]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	bfde      	ittt	le
 8012c5c:	2330      	movle	r3, #48	; 0x30
 8012c5e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012c62:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012c66:	1b49      	subs	r1, r1, r5
 8012c68:	6121      	str	r1, [r4, #16]
 8012c6a:	e02e      	b.n	8012cca <_printf_i+0x1ca>
 8012c6c:	6825      	ldr	r5, [r4, #0]
 8012c6e:	681a      	ldr	r2, [r3, #0]
 8012c70:	6960      	ldr	r0, [r4, #20]
 8012c72:	f015 0f80 	tst.w	r5, #128	; 0x80
 8012c76:	d003      	beq.n	8012c80 <_printf_i+0x180>
 8012c78:	1d15      	adds	r5, r2, #4
 8012c7a:	601d      	str	r5, [r3, #0]
 8012c7c:	6813      	ldr	r3, [r2, #0]
 8012c7e:	e008      	b.n	8012c92 <_printf_i+0x192>
 8012c80:	f015 0f40 	tst.w	r5, #64	; 0x40
 8012c84:	f102 0504 	add.w	r5, r2, #4
 8012c88:	601d      	str	r5, [r3, #0]
 8012c8a:	6813      	ldr	r3, [r2, #0]
 8012c8c:	d001      	beq.n	8012c92 <_printf_i+0x192>
 8012c8e:	8018      	strh	r0, [r3, #0]
 8012c90:	e000      	b.n	8012c94 <_printf_i+0x194>
 8012c92:	6018      	str	r0, [r3, #0]
 8012c94:	2300      	movs	r3, #0
 8012c96:	6123      	str	r3, [r4, #16]
 8012c98:	460d      	mov	r5, r1
 8012c9a:	e016      	b.n	8012cca <_printf_i+0x1ca>
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	1d11      	adds	r1, r2, #4
 8012ca0:	6019      	str	r1, [r3, #0]
 8012ca2:	6815      	ldr	r5, [r2, #0]
 8012ca4:	6862      	ldr	r2, [r4, #4]
 8012ca6:	4628      	mov	r0, r5
 8012ca8:	2100      	movs	r1, #0
 8012caa:	f000 f8ed 	bl	8012e88 <memchr>
 8012cae:	b108      	cbz	r0, 8012cb4 <_printf_i+0x1b4>
 8012cb0:	1b40      	subs	r0, r0, r5
 8012cb2:	6060      	str	r0, [r4, #4]
 8012cb4:	6863      	ldr	r3, [r4, #4]
 8012cb6:	e004      	b.n	8012cc2 <_printf_i+0x1c2>
 8012cb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012cbc:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8012cc0:	2301      	movs	r3, #1
 8012cc2:	6123      	str	r3, [r4, #16]
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012cca:	f8cd 8000 	str.w	r8, [sp]
 8012cce:	4630      	mov	r0, r6
 8012cd0:	4621      	mov	r1, r4
 8012cd2:	aa03      	add	r2, sp, #12
 8012cd4:	463b      	mov	r3, r7
 8012cd6:	f7ff fe9d 	bl	8012a14 <_printf_common>
 8012cda:	3001      	adds	r0, #1
 8012cdc:	d102      	bne.n	8012ce4 <_printf_i+0x1e4>
 8012cde:	f04f 30ff 	mov.w	r0, #4294967295
 8012ce2:	e01f      	b.n	8012d24 <_printf_i+0x224>
 8012ce4:	4630      	mov	r0, r6
 8012ce6:	4639      	mov	r1, r7
 8012ce8:	462a      	mov	r2, r5
 8012cea:	6923      	ldr	r3, [r4, #16]
 8012cec:	47c0      	blx	r8
 8012cee:	3001      	adds	r0, #1
 8012cf0:	d0f5      	beq.n	8012cde <_printf_i+0x1de>
 8012cf2:	6823      	ldr	r3, [r4, #0]
 8012cf4:	079b      	lsls	r3, r3, #30
 8012cf6:	d405      	bmi.n	8012d04 <_printf_i+0x204>
 8012cf8:	68e0      	ldr	r0, [r4, #12]
 8012cfa:	9b03      	ldr	r3, [sp, #12]
 8012cfc:	4298      	cmp	r0, r3
 8012cfe:	bfb8      	it	lt
 8012d00:	4618      	movlt	r0, r3
 8012d02:	e00f      	b.n	8012d24 <_printf_i+0x224>
 8012d04:	2500      	movs	r5, #0
 8012d06:	68e3      	ldr	r3, [r4, #12]
 8012d08:	9a03      	ldr	r2, [sp, #12]
 8012d0a:	1a9b      	subs	r3, r3, r2
 8012d0c:	429d      	cmp	r5, r3
 8012d0e:	daf3      	bge.n	8012cf8 <_printf_i+0x1f8>
 8012d10:	4630      	mov	r0, r6
 8012d12:	4639      	mov	r1, r7
 8012d14:	f104 0219 	add.w	r2, r4, #25
 8012d18:	2301      	movs	r3, #1
 8012d1a:	47c0      	blx	r8
 8012d1c:	3001      	adds	r0, #1
 8012d1e:	d0de      	beq.n	8012cde <_printf_i+0x1de>
 8012d20:	3501      	adds	r5, #1
 8012d22:	e7f0      	b.n	8012d06 <_printf_i+0x206>
 8012d24:	b004      	add	sp, #16
 8012d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012d2a:	bf00      	nop
 8012d2c:	080145a1 	.word	0x080145a1
 8012d30:	080145b2 	.word	0x080145b2

08012d34 <_sbrk_r>:
 8012d34:	b538      	push	{r3, r4, r5, lr}
 8012d36:	4c06      	ldr	r4, [pc, #24]	; (8012d50 <_sbrk_r+0x1c>)
 8012d38:	2300      	movs	r3, #0
 8012d3a:	4605      	mov	r5, r0
 8012d3c:	4608      	mov	r0, r1
 8012d3e:	6023      	str	r3, [r4, #0]
 8012d40:	f7f2 f83a 	bl	8004db8 <_sbrk>
 8012d44:	1c43      	adds	r3, r0, #1
 8012d46:	d102      	bne.n	8012d4e <_sbrk_r+0x1a>
 8012d48:	6823      	ldr	r3, [r4, #0]
 8012d4a:	b103      	cbz	r3, 8012d4e <_sbrk_r+0x1a>
 8012d4c:	602b      	str	r3, [r5, #0]
 8012d4e:	bd38      	pop	{r3, r4, r5, pc}
 8012d50:	1fff52a0 	.word	0x1fff52a0

08012d54 <__sread>:
 8012d54:	b510      	push	{r4, lr}
 8012d56:	460c      	mov	r4, r1
 8012d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d5c:	f000 f8e4 	bl	8012f28 <_read_r>
 8012d60:	2800      	cmp	r0, #0
 8012d62:	bfab      	itete	ge
 8012d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8012d66:	89a3      	ldrhlt	r3, [r4, #12]
 8012d68:	181b      	addge	r3, r3, r0
 8012d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8012d6e:	bfac      	ite	ge
 8012d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8012d72:	81a3      	strhlt	r3, [r4, #12]
 8012d74:	bd10      	pop	{r4, pc}

08012d76 <__swrite>:
 8012d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d7a:	461d      	mov	r5, r3
 8012d7c:	898b      	ldrh	r3, [r1, #12]
 8012d7e:	05db      	lsls	r3, r3, #23
 8012d80:	4607      	mov	r7, r0
 8012d82:	460c      	mov	r4, r1
 8012d84:	4616      	mov	r6, r2
 8012d86:	d505      	bpl.n	8012d94 <__swrite+0x1e>
 8012d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012d8c:	2200      	movs	r2, #0
 8012d8e:	2302      	movs	r3, #2
 8012d90:	f000 f868 	bl	8012e64 <_lseek_r>
 8012d94:	89a3      	ldrh	r3, [r4, #12]
 8012d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8012d9e:	81a3      	strh	r3, [r4, #12]
 8012da0:	4638      	mov	r0, r7
 8012da2:	4632      	mov	r2, r6
 8012da4:	462b      	mov	r3, r5
 8012da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012daa:	f000 b817 	b.w	8012ddc <_write_r>

08012dae <__sseek>:
 8012dae:	b510      	push	{r4, lr}
 8012db0:	460c      	mov	r4, r1
 8012db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012db6:	f000 f855 	bl	8012e64 <_lseek_r>
 8012dba:	1c43      	adds	r3, r0, #1
 8012dbc:	89a3      	ldrh	r3, [r4, #12]
 8012dbe:	bf15      	itete	ne
 8012dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8012dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012dca:	81a3      	strheq	r3, [r4, #12]
 8012dcc:	bf18      	it	ne
 8012dce:	81a3      	strhne	r3, [r4, #12]
 8012dd0:	bd10      	pop	{r4, pc}

08012dd2 <__sclose>:
 8012dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012dd6:	f000 b813 	b.w	8012e00 <_close_r>
	...

08012ddc <_write_r>:
 8012ddc:	b538      	push	{r3, r4, r5, lr}
 8012dde:	4c07      	ldr	r4, [pc, #28]	; (8012dfc <_write_r+0x20>)
 8012de0:	4605      	mov	r5, r0
 8012de2:	2000      	movs	r0, #0
 8012de4:	6020      	str	r0, [r4, #0]
 8012de6:	4608      	mov	r0, r1
 8012de8:	4611      	mov	r1, r2
 8012dea:	461a      	mov	r2, r3
 8012dec:	f000 f8e0 	bl	8012fb0 <_write>
 8012df0:	1c43      	adds	r3, r0, #1
 8012df2:	d102      	bne.n	8012dfa <_write_r+0x1e>
 8012df4:	6823      	ldr	r3, [r4, #0]
 8012df6:	b103      	cbz	r3, 8012dfa <_write_r+0x1e>
 8012df8:	602b      	str	r3, [r5, #0]
 8012dfa:	bd38      	pop	{r3, r4, r5, pc}
 8012dfc:	1fff52a0 	.word	0x1fff52a0

08012e00 <_close_r>:
 8012e00:	b538      	push	{r3, r4, r5, lr}
 8012e02:	4c06      	ldr	r4, [pc, #24]	; (8012e1c <_close_r+0x1c>)
 8012e04:	2300      	movs	r3, #0
 8012e06:	4605      	mov	r5, r0
 8012e08:	4608      	mov	r0, r1
 8012e0a:	6023      	str	r3, [r4, #0]
 8012e0c:	f000 f8a8 	bl	8012f60 <_close>
 8012e10:	1c43      	adds	r3, r0, #1
 8012e12:	d102      	bne.n	8012e1a <_close_r+0x1a>
 8012e14:	6823      	ldr	r3, [r4, #0]
 8012e16:	b103      	cbz	r3, 8012e1a <_close_r+0x1a>
 8012e18:	602b      	str	r3, [r5, #0]
 8012e1a:	bd38      	pop	{r3, r4, r5, pc}
 8012e1c:	1fff52a0 	.word	0x1fff52a0

08012e20 <_fstat_r>:
 8012e20:	b538      	push	{r3, r4, r5, lr}
 8012e22:	4c07      	ldr	r4, [pc, #28]	; (8012e40 <_fstat_r+0x20>)
 8012e24:	2300      	movs	r3, #0
 8012e26:	4605      	mov	r5, r0
 8012e28:	4608      	mov	r0, r1
 8012e2a:	4611      	mov	r1, r2
 8012e2c:	6023      	str	r3, [r4, #0]
 8012e2e:	f000 f89f 	bl	8012f70 <_fstat>
 8012e32:	1c43      	adds	r3, r0, #1
 8012e34:	d102      	bne.n	8012e3c <_fstat_r+0x1c>
 8012e36:	6823      	ldr	r3, [r4, #0]
 8012e38:	b103      	cbz	r3, 8012e3c <_fstat_r+0x1c>
 8012e3a:	602b      	str	r3, [r5, #0]
 8012e3c:	bd38      	pop	{r3, r4, r5, pc}
 8012e3e:	bf00      	nop
 8012e40:	1fff52a0 	.word	0x1fff52a0

08012e44 <_isatty_r>:
 8012e44:	b538      	push	{r3, r4, r5, lr}
 8012e46:	4c06      	ldr	r4, [pc, #24]	; (8012e60 <_isatty_r+0x1c>)
 8012e48:	2300      	movs	r3, #0
 8012e4a:	4605      	mov	r5, r0
 8012e4c:	4608      	mov	r0, r1
 8012e4e:	6023      	str	r3, [r4, #0]
 8012e50:	f000 f896 	bl	8012f80 <_isatty>
 8012e54:	1c43      	adds	r3, r0, #1
 8012e56:	d102      	bne.n	8012e5e <_isatty_r+0x1a>
 8012e58:	6823      	ldr	r3, [r4, #0]
 8012e5a:	b103      	cbz	r3, 8012e5e <_isatty_r+0x1a>
 8012e5c:	602b      	str	r3, [r5, #0]
 8012e5e:	bd38      	pop	{r3, r4, r5, pc}
 8012e60:	1fff52a0 	.word	0x1fff52a0

08012e64 <_lseek_r>:
 8012e64:	b538      	push	{r3, r4, r5, lr}
 8012e66:	4c07      	ldr	r4, [pc, #28]	; (8012e84 <_lseek_r+0x20>)
 8012e68:	4605      	mov	r5, r0
 8012e6a:	2000      	movs	r0, #0
 8012e6c:	6020      	str	r0, [r4, #0]
 8012e6e:	4608      	mov	r0, r1
 8012e70:	4611      	mov	r1, r2
 8012e72:	461a      	mov	r2, r3
 8012e74:	f000 f88c 	bl	8012f90 <_lseek>
 8012e78:	1c43      	adds	r3, r0, #1
 8012e7a:	d102      	bne.n	8012e82 <_lseek_r+0x1e>
 8012e7c:	6823      	ldr	r3, [r4, #0]
 8012e7e:	b103      	cbz	r3, 8012e82 <_lseek_r+0x1e>
 8012e80:	602b      	str	r3, [r5, #0]
 8012e82:	bd38      	pop	{r3, r4, r5, pc}
 8012e84:	1fff52a0 	.word	0x1fff52a0

08012e88 <memchr>:
 8012e88:	b510      	push	{r4, lr}
 8012e8a:	b2c9      	uxtb	r1, r1
 8012e8c:	4402      	add	r2, r0
 8012e8e:	4290      	cmp	r0, r2
 8012e90:	4603      	mov	r3, r0
 8012e92:	d006      	beq.n	8012ea2 <memchr+0x1a>
 8012e94:	781c      	ldrb	r4, [r3, #0]
 8012e96:	428c      	cmp	r4, r1
 8012e98:	f100 0001 	add.w	r0, r0, #1
 8012e9c:	d1f7      	bne.n	8012e8e <memchr+0x6>
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	bd10      	pop	{r4, pc}
 8012ea2:	2000      	movs	r0, #0
 8012ea4:	bd10      	pop	{r4, pc}

08012ea6 <memmove>:
 8012ea6:	4281      	cmp	r1, r0
 8012ea8:	b510      	push	{r4, lr}
 8012eaa:	eb01 0302 	add.w	r3, r1, r2
 8012eae:	d301      	bcc.n	8012eb4 <memmove+0xe>
 8012eb0:	1e42      	subs	r2, r0, #1
 8012eb2:	e00b      	b.n	8012ecc <memmove+0x26>
 8012eb4:	4298      	cmp	r0, r3
 8012eb6:	d2fb      	bcs.n	8012eb0 <memmove+0xa>
 8012eb8:	1881      	adds	r1, r0, r2
 8012eba:	1ad2      	subs	r2, r2, r3
 8012ebc:	42d3      	cmn	r3, r2
 8012ebe:	d004      	beq.n	8012eca <memmove+0x24>
 8012ec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012ec4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8012ec8:	e7f8      	b.n	8012ebc <memmove+0x16>
 8012eca:	bd10      	pop	{r4, pc}
 8012ecc:	4299      	cmp	r1, r3
 8012ece:	d004      	beq.n	8012eda <memmove+0x34>
 8012ed0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8012ed4:	f802 4f01 	strb.w	r4, [r2, #1]!
 8012ed8:	e7f8      	b.n	8012ecc <memmove+0x26>
 8012eda:	bd10      	pop	{r4, pc}

08012edc <_realloc_r>:
 8012edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012ede:	4607      	mov	r7, r0
 8012ee0:	4615      	mov	r5, r2
 8012ee2:	460e      	mov	r6, r1
 8012ee4:	b921      	cbnz	r1, 8012ef0 <_realloc_r+0x14>
 8012ee6:	4611      	mov	r1, r2
 8012ee8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8012eec:	f7ff bbf0 	b.w	80126d0 <_malloc_r>
 8012ef0:	b91a      	cbnz	r2, 8012efa <_realloc_r+0x1e>
 8012ef2:	f7ff fba9 	bl	8012648 <_free_r>
 8012ef6:	4628      	mov	r0, r5
 8012ef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012efa:	f000 f827 	bl	8012f4c <_malloc_usable_size_r>
 8012efe:	42a8      	cmp	r0, r5
 8012f00:	d20e      	bcs.n	8012f20 <_realloc_r+0x44>
 8012f02:	4638      	mov	r0, r7
 8012f04:	4629      	mov	r1, r5
 8012f06:	f7ff fbe3 	bl	80126d0 <_malloc_r>
 8012f0a:	4604      	mov	r4, r0
 8012f0c:	b150      	cbz	r0, 8012f24 <_realloc_r+0x48>
 8012f0e:	4631      	mov	r1, r6
 8012f10:	462a      	mov	r2, r5
 8012f12:	f7fe fc13 	bl	801173c <memcpy>
 8012f16:	4638      	mov	r0, r7
 8012f18:	4631      	mov	r1, r6
 8012f1a:	f7ff fb95 	bl	8012648 <_free_r>
 8012f1e:	e001      	b.n	8012f24 <_realloc_r+0x48>
 8012f20:	4630      	mov	r0, r6
 8012f22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012f24:	4620      	mov	r0, r4
 8012f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012f28 <_read_r>:
 8012f28:	b538      	push	{r3, r4, r5, lr}
 8012f2a:	4c07      	ldr	r4, [pc, #28]	; (8012f48 <_read_r+0x20>)
 8012f2c:	4605      	mov	r5, r0
 8012f2e:	2000      	movs	r0, #0
 8012f30:	6020      	str	r0, [r4, #0]
 8012f32:	4608      	mov	r0, r1
 8012f34:	4611      	mov	r1, r2
 8012f36:	461a      	mov	r2, r3
 8012f38:	f000 f832 	bl	8012fa0 <_read>
 8012f3c:	1c43      	adds	r3, r0, #1
 8012f3e:	d102      	bne.n	8012f46 <_read_r+0x1e>
 8012f40:	6823      	ldr	r3, [r4, #0]
 8012f42:	b103      	cbz	r3, 8012f46 <_read_r+0x1e>
 8012f44:	602b      	str	r3, [r5, #0]
 8012f46:	bd38      	pop	{r3, r4, r5, pc}
 8012f48:	1fff52a0 	.word	0x1fff52a0

08012f4c <_malloc_usable_size_r>:
 8012f4c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8012f50:	2800      	cmp	r0, #0
 8012f52:	bfbe      	ittt	lt
 8012f54:	1809      	addlt	r1, r1, r0
 8012f56:	f851 3c04 	ldrlt.w	r3, [r1, #-4]
 8012f5a:	18c0      	addlt	r0, r0, r3
 8012f5c:	3804      	subs	r0, #4
 8012f5e:	4770      	bx	lr

08012f60 <_close>:
 8012f60:	4b02      	ldr	r3, [pc, #8]	; (8012f6c <_close+0xc>)
 8012f62:	2258      	movs	r2, #88	; 0x58
 8012f64:	601a      	str	r2, [r3, #0]
 8012f66:	f04f 30ff 	mov.w	r0, #4294967295
 8012f6a:	4770      	bx	lr
 8012f6c:	1fff52a0 	.word	0x1fff52a0

08012f70 <_fstat>:
 8012f70:	4b02      	ldr	r3, [pc, #8]	; (8012f7c <_fstat+0xc>)
 8012f72:	2258      	movs	r2, #88	; 0x58
 8012f74:	601a      	str	r2, [r3, #0]
 8012f76:	f04f 30ff 	mov.w	r0, #4294967295
 8012f7a:	4770      	bx	lr
 8012f7c:	1fff52a0 	.word	0x1fff52a0

08012f80 <_isatty>:
 8012f80:	4b02      	ldr	r3, [pc, #8]	; (8012f8c <_isatty+0xc>)
 8012f82:	2258      	movs	r2, #88	; 0x58
 8012f84:	601a      	str	r2, [r3, #0]
 8012f86:	2000      	movs	r0, #0
 8012f88:	4770      	bx	lr
 8012f8a:	bf00      	nop
 8012f8c:	1fff52a0 	.word	0x1fff52a0

08012f90 <_lseek>:
 8012f90:	4b02      	ldr	r3, [pc, #8]	; (8012f9c <_lseek+0xc>)
 8012f92:	2258      	movs	r2, #88	; 0x58
 8012f94:	601a      	str	r2, [r3, #0]
 8012f96:	f04f 30ff 	mov.w	r0, #4294967295
 8012f9a:	4770      	bx	lr
 8012f9c:	1fff52a0 	.word	0x1fff52a0

08012fa0 <_read>:
 8012fa0:	4b02      	ldr	r3, [pc, #8]	; (8012fac <_read+0xc>)
 8012fa2:	2258      	movs	r2, #88	; 0x58
 8012fa4:	601a      	str	r2, [r3, #0]
 8012fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8012faa:	4770      	bx	lr
 8012fac:	1fff52a0 	.word	0x1fff52a0

08012fb0 <_write>:
 8012fb0:	4b02      	ldr	r3, [pc, #8]	; (8012fbc <_write+0xc>)
 8012fb2:	2258      	movs	r2, #88	; 0x58
 8012fb4:	601a      	str	r2, [r3, #0]
 8012fb6:	f04f 30ff 	mov.w	r0, #4294967295
 8012fba:	4770      	bx	lr
 8012fbc:	1fff52a0 	.word	0x1fff52a0
 8012fc0:	69206e69 	.word	0x69206e69
 8012fc4:	645f3167 	.word	0x645f3167
 8012fc8:	006e6f5f 	.word	0x006e6f5f
 8012fcc:	74697865 	.word	0x74697865
 8012fd0:	31676920 	.word	0x31676920
 8012fd4:	6f5f645f 	.word	0x6f5f645f
 8012fd8:	0000006e 	.word	0x0000006e
 8012fdc:	69206e69 	.word	0x69206e69
 8012fe0:	645f3167 	.word	0x645f3167
 8012fe4:	66666f5f 	.word	0x66666f5f
 8012fe8:	00000000 	.word	0x00000000
 8012fec:	55206e69 	.word	0x55206e69
 8012ff0:	00003432 	.word	0x00003432
 8012ff4:	74697865 	.word	0x74697865
 8012ff8:	34325520 	.word	0x34325520
 8012ffc:	00000000 	.word	0x00000000
 8013000:	63206e69 	.word	0x63206e69
 8013004:	695f6e61 	.word	0x695f6e61
 8013008:	7475706e 	.word	0x7475706e
 801300c:	00000073 	.word	0x00000073
 8013010:	74697865 	.word	0x74697865
 8013014:	6e616320 	.word	0x6e616320
 8013018:	706e695f 	.word	0x706e695f
 801301c:	00737475 	.word	0x00737475
 8013020:	74697865 	.word	0x74697865
 8013024:	34325520 	.word	0x34325520
 8013028:	00000000 	.word	0x00000000
 801302c:	74206e69 	.word	0x74206e69
 8013030:	00706d65 	.word	0x00706d65
 8013034:	74697865 	.word	0x74697865
 8013038:	6d657420 	.word	0x6d657420
 801303c:	00000070 	.word	0x00000070

08013040 <UART_0_channel_config>:
 8013040:	0001c200 01080800 00000010              ............

0801304c <UART_0_tx_pin_config>:
 801304c:	00000090 00000001 00000002              ............

08013058 <UART_0_tx_pin>:
 8013058:	48028200 0000000e 0801304c              ...H....L0..

08013064 <UART_0_config>:
 8013064:	08013040 08005df1 00000000 00000000     @0...]..........
	...
 8013080:	08013058 00020200 00000006              X0..........

0801308c <UART_0_rx_pin_config>:
 801308c:	00000000 00000001 00000002              ............

08013098 <SPI_MASTER_0_MOSI>:
 8013098:	48028100 00000005                       ...H....

080130a0 <SPI_MASTER_0_MISO>:
 80130a0:	48028100 00000004                       ...H....

080130a8 <SPI_MASTER_0_SCLKOUT>:
 80130a8:	48028100 00000006                       ...H....

080130b0 <SPI_MASTER_0_SCLKOUT_Config>:
 80130b0:	00000090 00000001 00000001 00000000     ................
 80130c0:	00000000                                ....

080130c4 <SPI_MASTER_0_SS_0>:
 80130c4:	48028100 0000000b                       ...H....

080130cc <SPI_MASTER_0_SS_0_Config>:
 80130cc:	00000090 00000001 00000001 00000000     ................
 80130dc:	00010000                                ....

080130e0 <SPI_MASTER_0_Config>:
 80130e0:	1ffe8934 08007379 08013098 1ffe8920     4...ys...0.. ...
 80130f0:	080130a0 1fff4410 00000000 00000000     .0...D..........
	...
 8013108:	080130a8 080130b0 080130c4 00000000     .0...0...0......
	...
 8013130:	080130cc 00000000 00000000 00000000     .0..............
	...
 8013160:	40000000 01000101 00010002              ...@........

0801316c <RTC_0_config>:
 801316c:	00000001 00000000                       ........

08013174 <RTC_0_time_alarm_config>:
 8013174:	00000000 07b20004 00000100 07b20000     ................
 8013184:	00007fff                                ....

08013188 <INTERRUPT_0>:
 8013188:	00003f40                                @?..

0801318c <I2C_MASTER_0_sda_pin_config>:
 801318c:	000000d0 00000001 00000000              ............

08013198 <I2C_MASTER_0_scl_pin_config>:
 8013198:	000000d0 00000001 00000000              ............

080131a4 <I2C_MASTER_0_channel_config>:
 80131a4:	000186a0 00000000                       ........

080131ac <I2C_MASTER_0_config>:
 80131ac:	080131a4 08008171 0800814d 0800812d     .1..q...M...-...
	...
 80131d0:	04040202 0000ffff                       ........

080131d8 <I2C_MASTER_1_sda_pin_config>:
 80131d8:	000000c8 00000001 00000000              ............

080131e4 <I2C_MASTER_1_scl_pin_config>:
 80131e4:	000000c8 00000001 00000000              ............

080131f0 <I2C_MASTER_1_channel_config>:
 80131f0:	00061a80 00000000                       ........

080131f8 <I2C_MASTER_1_config>:
 80131f8:	080131f0 0800821d 080081f9 080081d9     .1..............
	...
 801321c:	04040202 0000ffff                       ........

08013224 <sdmmc_block>:
 8013224:	1ffe8a40                                @...

08013228 <DC_DC_EN_OUT_D>:
 8013228:	48028000 00000080 00010000 00000000     ...H............
 8013238:	0000000f                                ....

0801323c <VACUUM_PUMP_OUT_D>:
 801323c:	48028000 00000080 00010000 00000000     ...H............
 801324c:	0000000e                                ....

08013250 <HEADLAMPS_ADJ_PWR_OUT_D>:
 8013250:	48028000 00000080 00010000 00000000     ...H............
 8013260:	0000000d                                ....

08013264 <AC_RADIATOR_OUT_D>:
 8013264:	48028000 00000080 00010000 00000000     ...H............
 8013274:	0000000c                                ....

08013278 <INSTRUMENT_CON_PWR_OUT_D>:
 8013278:	48028000 00000080 00010000 00000000     ...H............
 8013288:	0000000b                                ....

0801328c <ACCEL_CS_OUT>:
 801328c:	48028000 00000000 00000000 00000000     ...H............
 801329c:	0000000a                                ....

080132a0 <ELECT_HANDBRAKE_EN_OUT_D>:
 80132a0:	48028000 00000000 00000000 00000000     ...H............
 80132b0:	00000008                                ....

080132b4 <MC_CONTACTOR_RELAY_OUT_D>:
 80132b4:	48028000 00000080 00010000 00000000     ...H............
 80132c4:	00000007                                ....

080132c8 <MC_PARK_RELAY_OUT_D>:
 80132c8:	48028000 00000080 00010000 00000000     ...H............
 80132d8:	00000006                                ....

080132dc <MC_REV_RELAY_OUT_D>:
 80132dc:	48028000 00000080 00010000 00000000     ...H............
 80132ec:	00000005                                ....

080132f0 <MC_FWD_RELAY_OUT_D>:
 80132f0:	48028000 00000080 00010000 00000000     ...H............
 8013300:	00000004                                ....

08013304 <MC_REGEN_RELAY_OUT_D>:
 8013304:	48028000 00000080 00010000 00000000     ...H............
 8013314:	00000003                                ....

08013318 <MC_ELOCK_RELAY_OUT_D>:
 8013318:	48028000 00000080 00010000 00000000     ...H............
 8013328:	00000002                                ....

0801332c <POS_OUT_D>:
 801332c:	48028100 00000080 00010000 00000000     ...H............
 801333c:	0000000f                                ....

08013340 <VCU_FAN_PWR_OUT_D>:
 8013340:	48028100 00000000 00000000 00000000     ...H............
 8013350:	0000000e                                ....

08013354 <AUX_EFUSE_1_OUT_D>:
 8013354:	48028100 00000080 00010000 00000000     ...H............
 8013364:	0000000a                                ....

08013368 <WIPER_PWR_OUT_D>:
 8013368:	48028100 00000080 00010000 00000000     ...H............
 8013378:	00000009                                ....

0801337c <THROTTLE_POT_CS_OUT_D>:
 801337c:	48028100 00000000 00000000 00000000     ...H............
 801338c:	00000008                                ....

08013390 <LIGHTS_PWR_OUT_D>:
 8013390:	48028100 00000080 00010000 00000000     ...H............
 80133a0:	00000007                                ....

080133a4 <INFOTAINMENT_PWR_OUT_D>:
 80133a4:	48028100 00000080 00010000 00000000     ...H............
 80133b4:	00000003                                ....

080133b8 <AUDIO_AMP_OUT_D>:
 80133b8:	48028100 00000000 00000000 00000000     ...H............
 80133c8:	00000002                                ....

080133cc <VACUUM_SENSOR_PWR_OUT_D>:
 80133cc:	48028100 00000080 00010000 00000000     ...H............
 80133dc:	00000001                                ....

080133e0 <BRAKE_LIGHT_OUT_D>:
 80133e0:	48028100 00000080 00010000 00000000     ...H............
 80133f0:	00000000                                ....

080133f4 <HORN_PWR_OUT_D>:
 80133f4:	48028400 00000080 00010000 00000000     ...H............
 8013404:	00000001                                ....

08013408 <DOOR_LOCK_OUT_D>:
 8013408:	48028200 00000080 00010000 00000000     ...H............
 8013418:	0000000d                                ....

0801341c <RIGHT_INDICATOR_OUT_D>:
 801341c:	48028600 00000080 00010000 00000000     ...H............
 801342c:	00000003                                ....

08013430 <HIGH_BEAM_OUT_D>:
 8013430:	48028600 00000080 00010000 00000000     ...H............
 8013440:	00000002                                ....

08013444 <LOW_BEAM_OUT_D>:
 8013444:	48028600 00000080 00010000 00000000     ...H............
 8013454:	00000001                                ....

08013458 <REV_LIGHT_OUT_D>:
 8013458:	48028600 00000080 00010000 00000000     ...H............
 8013468:	00000000                                ....

0801346c <ELEC_HANDBRAKE_IN_D>:
 801346c:	48028e00 00000000 00000000 00000000     ...H............
 801347c:	00000009                                ....

08013480 <AUX_ANALOG1_IN_D>:
 8013480:	48028e00 00000000 00000000 00000000     ...H............
 8013490:	00000002                                ....

08013494 <INT_ACCEL_IN_D>:
 8013494:	48028e00 00000000 00000000 00000000     ...H............
 80134a4:	00000000                                ....

080134a8 <CIGARETTE_LIGHTER_PWR_OUT_D>:
 80134a8:	48028300 00000080 00010000 00000000     ...H............
 80134b8:	0000000d                                ....

080134bc <BUZZER_EN_D>:
 80134bc:	48028300 00000000 00000000 00000000     ...H............
 80134cc:	0000000b                                ....

080134d0 <MC_RELAY_PWR_OUT_D>:
 80134d0:	48028300 00000080 00010000 00000000     ...H............
 80134e0:	00000004                                ....

080134e4 <MC_FAN_PWR_OUT_D>:
 80134e4:	48028300 00000080 00010000 00000000     ...H............
 80134f4:	00000003                                ....

080134f8 <VEHICLE_SPEED_PWM_OUT>:
 80134f8:	48028200 00000000 00000000 00000000     ...H............
 8013508:	0000000c                                ....

0801350c <VEHICLE_RPM_PWM_OUT>:
 801350c:	48028200 00000000 00000000 00000000     ...H............
 801351c:	0000000b                                ....

08013520 <PWR_WINDOW_OUT_D>:
 8013520:	48028200 00000080 00010000 00000000     ...H............
 8013530:	00000009                                ....

08013534 <PWR_STEERING_OUT_D>:
 8013534:	48028200 00000080 00010000 00000000     ...H............
 8013544:	00000008                                ....

08013548 <LEFT_INDICATOR_OUT_D>:
 8013548:	48028200 00000080 00010000 00000000     ...H............
 8013558:	00000007                                ....

0801355c <ADC3_CS_OUT>:
 801355c:	48028200 00000000 00000000 00000000     ...H............
 801356c:	00000006                                ....

08013570 <INPUTS_3V3_PWR_EN>:
 8013570:	48028200 00000080 00010000 00000000     ...H............
 8013580:	00000003                                ....

08013584 <COMM_3V3_PWR_EN>:
 8013584:	48028200 00000080 00010000 00000000     ...H............
 8013594:	00000002                                ....

08013598 <SENSOR_3V3_PWR_EN>:
 8013598:	48028200 00000080 00010000 00000000     ...H............
 80135a8:	00000000                                ....

080135ac <CABIN_LIGHT_OUT_D>:
 80135ac:	48028500 00000080 00010000 00000000     ...H............
 80135bc:	00000009                                ....

080135c0 <ADC2_CS_OUT>:
 80135c0:	48028500 00000000 00000000 00000000     ...H............
 80135d0:	00000006                                ....

080135d4 <ADC1_CS_OUT>:
 80135d4:	48028500 00000000 00000000 00000000     ...H............
 80135e4:	00000005                                ....

080135e8 <SPEED_SENSOR_IN_D>:
 80135e8:	48028f00 00000000 00000000 00000000     ...H............
 80135f8:	0000000d                                ....

080135fc <VACUUM_SENSOR_IN_D>:
 80135fc:	48028f00 00000000 00000000 00000000     ...H............
 801360c:	0000000c                                ....

08013610 <BRAKE_OIL_IN_D>:
 8013610:	48028f00 00000000 00000000 00000000     ...H............
 8013620:	00000009                                ....

08013624 <CHARGING_STARTED_IN_D>:
 8013624:	48028f00 00000000 00000000 00000000     ...H............
 8013634:	00000008                                ....

08013638 <CHARGER_CONNECTED_IN_D>:
 8013638:	48028f00 00000000 00000000 00000000     ...H............
 8013648:	00000007                                ....

0801364c <IGNI_POS2_IN_D>:
 801364c:	48028f00 00000000 00000000 00000000     ...H............
 801365c:	00000006                                ....

08013660 <IGNI_POS1_IN_D>:
 8013660:	48028f00 00000000 00000000 00000000     ...H............
 8013670:	00000005                                ....

08013674 <ACC_PEDAL_SW_IN_D>:
 8013674:	48028f00 00000000 00000000 00000000     ...H............
 8013684:	00000004                                ....

08013688 <HANDBRAKE_IN_D>:
 8013688:	48028f00 00000010 00000000 00000000     ...H............
 8013698:	00000003                                ....

0801369c <BRAKE_SW_IN_D>:
 801369c:	48028f00 00000008 00000000 00000000     ...H............
 80136ac:	00000002                                ....

080136b0 <DOOR_LOCK_PWR_OUT_D>:
 80136b0:	48028400 00000080 00010000 00000000     ...H............
 80136c0:	00000000                                ....

080136c4 <GEAR_SW1_IN_D>:
 80136c4:	48028e00 00000000 00000000 00000000     ...H............
 80136d4:	0000000c                                ....

080136d8 <GEAR_SW2_IN_D>:
 80136d8:	48028e00 00000000 00000000 00000000     ...H............
 80136e8:	0000000d                                ....

080136ec <GEAR_SW3_IN_D>:
 80136ec:	48028e00 00000000 00000000 00000000     ...H............
 80136fc:	0000000e                                ....

08013700 <GEAR_SW4_IN_D>:
 8013700:	48028e00 00000000 00000000 00000000     ...H............
 8013710:	0000000f                                ....

08013714 <DIGITAL_IO_5>:
 8013714:	48028500 00000000 00000000 00000000     ...H............
 8013724:	00000007                                ....

08013728 <DIGITAL_IO_6>:
 8013728:	48028500 00000000 00000000 00000000     ...H............
 8013738:	00000008                                ....

0801373c <CTS>:
 801373c:	48028400 00000000 00000000 00000000     ...H............
 801374c:	00000004                                ....

08013750 <RTS>:
 8013750:	48028400 00000080 00010000 00000000     ...H............
 8013760:	00000005                                ....

08013764 <DIGITAL_IO_PWRKEY>:
 8013764:	48028400 00000080 00010000 00000000     ...H............
 8013774:	00000007                                ....

08013778 <MODULE_4G_EN_OUT_D>:
 8013778:	48028400 00000080 00010000 00000000     ...H............
 8013788:	00000002 01010230 00010000 00000000     ....0...........
 8013798:	00010000 01010102                       ........

080137a0 <CAN_NODE_0_gpio_out>:
 80137a0:	48028100 0000000c                       ...H....

080137a8 <CAN_NODE_0_gpio_out_config>:
 80137a8:	00000090 00000001 00000002              ............

080137b4 <CAN_NODE_0_gpio_in>:
 80137b4:	48028100 0000000d                       ...H....

080137bc <CAN_NODE_0_gpio_in_config>:
	...

080137c8 <CAN_NODE_0_BitTimeConfig>:
 80137c8:	08954400 0003d090 00011f40              .D......@...

080137d4 <CAN_NODE_0_sr>:
 80137d4:	00000000                                ....

080137d8 <CAN_NODE_0_LMO_01_Config>:
 80137d8:	1ffe8ab8 01000036 00000000              ....6.......

080137e4 <CAN_NODE_0_LMO_02_Config>:
 80137e4:	1ffe8ad8 01000013 00000000              ............

080137f0 <CAN_NODE_0_LMO_03_Config>:
 80137f0:	1ffe8af8 01000012 00000000              ............

080137fc <CAN_NODE_0_LMO_04_Config>:
 80137fc:	1ffe8b18 01000037 00000000              ....7.......

08013808 <CAN_NODE_0_LMO_05_Config>:
 8013808:	1ffe8b38 0100002f 00000000              8.../.......

08013814 <CAN_NODE_0_LMO_06_Config>:
 8013814:	1ffe8b58 01000030 00000000              X...0.......

08013820 <CAN_NODE_0_LMO_07_Config>:
 8013820:	1ffe8b78 01000031 00000000              x...1.......

0801382c <CAN_NODE_0_LMO_08_Config>:
 801382c:	1ffe8b98 01000028 00000000              ....(.......

08013838 <CAN_NODE_0_LMO_09_Config>:
 8013838:	1ffe8bb8 00000029 00000000              ....).......

08013844 <CAN_NODE_0_LMO_10_Config>:
 8013844:	1ffe8bd8 00000032 00000000              ....2.......

08013850 <CAN_NODE_0_LMO_11_Config>:
 8013850:	1ffe8bf8 00000035 00000000              ....5.......

0801385c <CAN_NODE_0_LMO_12_Config>:
 801385c:	1ffe8c18 00000010 00000000              ............

08013868 <CAN_NODE_0_LMO_13_Config>:
 8013868:	1ffe8c38 00000034 00000001              8...4.......

08013874 <CAN_NODE_0_LMO_14_Config>:
 8013874:	1ffe8c58 00000011 00000001              X...........

08013880 <CAN_NODE_0_LMO_15_Config>:
 8013880:	1ffe8c78 0000000a 00000001              x...........

0801388c <CAN_NODE_0_LMO_16_Config>:
 801388c:	1ffe8c98 01000004 00000000              ............

08013898 <CAN_NODE_0_LMO_17_Config>:
 8013898:	1ffe8cb8 0000000b 00000001              ............

080138a4 <CAN_NODE_0_LMO_18_Config>:
 80138a4:	1ffe8cd8 00000003 00000001              ............

080138b0 <CAN_NODE_0_LMO_19_Config>:
 80138b0:	1ffe8cf8 0000000c 00000001              ............

080138bc <CAN_NODE_0_LMO_20_Config>:
 80138bc:	1ffe8d18 00000002 00000001              ............

080138c8 <CAN_NODE_0_LMO_21_Config>:
 80138c8:	1ffe8d38 00000001 00000000              8...........

080138d4 <CAN_NODE_0_LMO_22_Config>:
 80138d4:	1ffe8d58 0000000d 00000000              X...........

080138e0 <CAN_NODE_0_LMO_23_Config>:
 80138e0:	1ffe8d78 00000000 00000000              x...........

080138ec <CAN_NODE_0_LMO_24_Config>:
 80138ec:	1ffe8d98 0000003b 00000000              ....;.......

080138f8 <CAN_NODE_0_LMO_25_Config>:
 80138f8:	1ffe8db8 0000003a 00000000              ....:.......

08013904 <CAN_NODE_0_LMO_26_Config>:
 8013904:	1ffe8dd8 0000001b 00000000              ............

08013910 <CAN_NODE_0_LMO_27_Config>:
 8013910:	1ffe8df8 0000003f 00000000              ....?.......

0801391c <CAN_NODE_0_LMO_28_Config>:
 801391c:	1ffe8e18 0000001c 00000000              ............

08013928 <CAN_NODE_0_LMO_29_Config>:
 8013928:	1ffe8e38 0000003e 00000000              8...>.......

08013934 <CAN_NODE_0_LMO_30_Config>:
 8013934:	1ffe8e58 00000019 00000000              X...........

08013940 <CAN_NODE_0_LMO_31_Config>:
 8013940:	1ffe8e78 0100001a 00000000              x...........

0801394c <CAN_NODE_0_LMO_32_Config>:
 801394c:	1ffe8e98 0100003d 00000000              ....=.......

08013958 <CAN_NODE_0>:
 8013958:	1ffe8aa4 48014300 080137c8 080137d8     .....C.H.7...7..
 8013968:	080137e4 080137f0 080137fc 08013808     .7...7...7...8..
 8013978:	08013814 08013820 0801382c 08013838     .8.. 8..,8..88..
 8013988:	08013844 08013850 0801385c 08013868     D8..P8..\8..h8..
 8013998:	08013874 08013880 0801388c 08013898     t8...8...8...8..
 80139a8:	080138a4 080138b0 080138bc 080138c8     .8...8...8...8..
 80139b8:	080138d4 080138e0 080138ec 080138f8     .8...8...8...8..
 80139c8:	08013904 08013910 0801391c 08013928     .9...9...9..(9..
 80139d8:	08013934 08013940 0801394c 080137d4     49..@9..L9...7..
 80139e8:	080137a0 080137a8 080137b4 080137bc     .7...7...7...7..
 80139f8:	00200102 00000000                       .. .....

08013a00 <CAN_NODE_1_gpio_out>:
 8013a00:	48028300 00000007                       ...H....

08013a08 <CAN_NODE_1_gpio_out_config>:
 8013a08:	00000090 00000001 00000002              ............

08013a14 <CAN_NODE_1_gpio_in>:
 8013a14:	48028300 00000008                       ...H....

08013a1c <CAN_NODE_1_gpio_in_config>:
	...

08013a28 <CAN_NODE_1_BitTimeConfig>:
 8013a28:	08954400 0007a120 00011f40              .D.. ...@...

08013a34 <CAN_NODE_1_sr>:
 8013a34:	00000000                                ....

08013a38 <CAN_NODE_1_LMO_01_Config>:
 8013a38:	1ffe8eb8 0100001d 00000000              ............

08013a44 <CAN_NODE_1_LMO_02_Config>:
 8013a44:	1ffe8ed8 00000014 00000001              ............

08013a50 <CAN_NODE_1_LMO_03_Config>:
 8013a50:	1ffe8ef8 00000017 00000001              ............

08013a5c <CAN_NODE_1_LMO_04_Config>:
 8013a5c:	1ffe8f18 00000018 00000001              ............

08013a68 <CAN_NODE_1_LMO_05_Config>:
 8013a68:	1ffe8f38 00000015 00000001              8...........

08013a74 <CAN_NODE_1_LMO_06_Config>:
 8013a74:	1ffe8f58 00000016 00000001              X...........

08013a80 <CAN_NODE_1_LMO_07_Config>:
 8013a80:	1ffe8f78 00000006 00000000              x...........

08013a8c <CAN_NODE_1_LMO_08_Config>:
 8013a8c:	1ffe8f98 00000005 00000000              ............

08013a98 <CAN_NODE_1_LMO_09_Config>:
 8013a98:	1ffe8fb8 00000008 00000001              ............

08013aa4 <CAN_NODE_1_LMO_10_Config>:
 8013aa4:	1ffe8fd8 00000007 00000001              ............

08013ab0 <CAN_NODE_1_LMO_11_Config>:
 8013ab0:	1ffe8ff8 0100003c 00000000              ....<.......

08013abc <CAN_NODE_1_LMO_12_Config>:
 8013abc:	1ffe9018 01000009 00000000              ............

08013ac8 <CAN_NODE_1_LMO_13_Config>:
 8013ac8:	1ffe9038 01000024 00000000              8...$.......

08013ad4 <CAN_NODE_1_LMO_14_Config>:
 8013ad4:	1ffe9058 00000025 00000001              X...%.......

08013ae0 <CAN_NODE_1_LMO_15_Config>:
 8013ae0:	1ffe9078 01000026 00000000              x...&.......

08013aec <CAN_NODE_1_LMO_16_Config>:
 8013aec:	1ffe9098 00000027 00000000              ....'.......

08013af8 <CAN_NODE_1_LMO_17_Config>:
 8013af8:	1ffe90b8 0000001e 00000000              ............

08013b04 <CAN_NODE_1_LMO_18_Config>:
 8013b04:	1ffe90d8 0000001f 00000000              ............

08013b10 <CAN_NODE_1_LMO_19_Config>:
 8013b10:	1ffe90f8 00000020 00000000              .... .......

08013b1c <CAN_NODE_1_LMO_20_Config>:
 8013b1c:	1ffe9118 00000021 00000001              ....!.......

08013b28 <CAN_NODE_1_LMO_21_Config>:
 8013b28:	1ffe9138 00000022 00000000              8...".......

08013b34 <CAN_NODE_1_LMO_22_Config>:
 8013b34:	1ffe9158 00000023 00000000              X...#.......

08013b40 <CAN_NODE_1>:
 8013b40:	1ffe8aa4 48014400 08013a28 08013a38     .....D.H(:..8:..
 8013b50:	08013a44 08013a50 08013a5c 08013a68     D:..P:..\:..h:..
 8013b60:	08013a74 08013a80 08013a8c 08013a98     t:...:...:...:..
 8013b70:	08013aa4 08013ab0 08013abc 08013ac8     .:...:...:...:..
 8013b80:	08013ad4 08013ae0 08013aec 08013af8     .:...:...:...:..
 8013b90:	08013b04 08013b10 08013b1c 08013b28     .;...;...;..(;..
 8013ba0:	08013b34 00000000 00000000 00000000     4;..............
	...
 8013bcc:	08013a34 08013a00 08013a08 08013a14     4:...:...:...:..
 8013bdc:	08013a1c 00160201 00000000              .:..........

08013be8 <CAN_NODE_2_gpio_out>:
 8013be8:	48028500 0000000b                       ...H....

08013bf0 <CAN_NODE_2_gpio_out_config>:
 8013bf0:	000000a0 00000001 00000002              ............

08013bfc <CAN_NODE_2_gpio_in>:
 8013bfc:	48028500 0000000a                       ...H....

08013c04 <CAN_NODE_2_gpio_in_config>:
	...

08013c10 <CAN_NODE_2_BitTimeConfig>:
 8013c10:	08954400 0007a120 00011f40              .D.. ...@...

08013c1c <CAN_NODE_2_sr>:
 8013c1c:	00000000                                ....

08013c20 <CAN_NODE_2_LMO_01_Config>:
 8013c20:	1ffe9178 00000039 00000000              x...9.......

08013c2c <CAN_NODE_2_LMO_02_Config>:
 8013c2c:	1ffe9198 00000038 00000000              ....8.......

08013c38 <CAN_NODE_2_LMO_03_Config>:
 8013c38:	1ffe91b8 0000000e 00000000              ............

08013c44 <CAN_NODE_2_LMO_04_Config>:
 8013c44:	1ffe91d8 00000033 00000000              ....3.......

08013c50 <CAN_NODE_2_LMO_05_Config>:
 8013c50:	1ffe91f8 0000000f 00000000              ............

08013c5c <CAN_NODE_2>:
 8013c5c:	1ffe8aa4 48014700 08013c10 08013c20     .....G.H.<.. <..
 8013c6c:	08013c2c 08013c38 08013c44 08013c50     ,<..8<..D<..P<..
	...
 8013ce8:	08013c1c 08013be8 08013bf0 08013bfc     .<...;...;...;..
 8013cf8:	08013c04 00050500 00000000 512b5441     .<..........AT+Q
 8013d08:	43535047 223d4746 7074756f 2274726f     GPSCFG="outport"
 8013d18:	6f6e222c 0d22656e 0000000a 512b5441     ,"none".....AT+Q
 8013d28:	3d535047 000a0d31 5047512b 434f4c53     GPS=1...+QGPSLOC
 8013d38:	0000003a 0000002c 512b5441 4c535047     :...,...AT+QGPSL
 8013d48:	313d434f 00000a0d                       OC=1....

08013d50 <vcu_fleet_fleet_10_sec_field_info>:
 8013d50:	40001204 40041208 4008110c 400c1210     ...@...@...@...@
 8013d60:	40101214 40141218 4018121c 401c1220     ...@...@...@ ..@
 8013d70:	40201124 40241228 4028122c 402c1230     $. @(.$@,.(@0.,@
 8013d80:	40301234 40341138 4038123c 403c1240     4.0@8.4@<.8@@.<@
 8013d90:	40401244 40441248 4048124c 404c1250     D.@@H.D@L.H@P.L@
 8013da0:	40501254 40541258 4058125c 405c1260     T.P@X.T@\.X@`.\@
 8013db0:	40601164 00000000                       d.`@....

08013db8 <vcu_fleet_fleet_10_sec_submsg_info>:
 8013db8:	00000000                                ....

08013dbc <vcu_fleet_fleet_10_sec_msg>:
 8013dbc:	08013d50 08013db8 00000000 00000000     P=...=..........
 8013dcc:	00000019 00000019 544d512b 54415453     ........+QMTSTAT
 8013ddc:	0000003a 544d512b 56434552 0000003a     :...+QMTRECV:...
 8013dec:	444e4951 4d53203a 4f442053 0a0d454e     QIND: SMS DONE..
 8013dfc:	00000000 0d594452 0000000a 45574f50     ....RDY.....POWE
 8013e0c:	20444552 4e574f44 00000a0d 544d512b     RED DOWN....+QMT
 8013e1c:	4e45504f 0000003a 544d512b 45425550     OPEN:...+QMTPUBE
 8013e2c:	00003a58 544d512b 4e4e4f43 0000003a     X:..+QMTCONN:...
 8013e3c:	544d512b 43534944 0000003a 544d512b     +QMTDISC:...+QMT
 8013e4c:	3a425553 00000000 454d432b 52524520     SUB:....+CME ERR
 8013e5c:	0000524f 0000003a 534d432b 52524520     OR..:...+CMS ERR
 8013e6c:	0000524f 00000000 00000a0d 62737522     OR.........."usb
 8013e7c:	0d227461 0000000a 0d302c30 0000000a     at".....0,0.....
 8013e8c:	00000000 63657551 0d6c6574 0000000a     ....Quectel.....
 8013e9c:	0d302c31 0000000a 00000000 0000002c     1,0.........,...
 8013eac:	44414552 00000059 00000022 00302c30     READY..."...0,0.
 8013ebc:	00312c30 00322c30 00332c30 00342c30     0,1.0,2.0,3.0,4.
 8013ecc:	00352c30 222c6425 255f7325 0a0d2273     0,5.%d,"%s_%s"..
 8013edc:	00000000 72616d73 74694b74 00000000     ....smartKit....
 8013eec:	0a0d6425 00000000 312c6425 2c64252c     %d......%d,1,%d,
 8013efc:	73252c30 0d64252c 0000000a 312c6425     0,%s,%d.....%d,1
 8013f0c:	2c73252c 0a0d6425 00000000 252c7325     ,%s,%d......%s,%
 8013f1c:	30362c64 0a0d312c 00000000 63616322     d,60,1......"cac
 8013f2c:	2e747265 226d6570 00000000 696c6322     ert.pem"...."cli
 8013f3c:	63746e65 2e747265 226d6570 00000000     entcert.pem"....
 8013f4c:	696c6322 6b746e65 702e7965 00226d65     "clientkey.pem".
 8013f5c:	0a0d7325 00000000 252c6425 00000073     %s......%d,%s...
 8013f6c:	37796122 7865716f 35326b62 612d6c73     "ay7oqexbk25sl-a
 8013f7c:	692e7374 612e746f 6f732d70 2d687475     ts.iot.ap-south-
 8013f8c:	6d612e31 6e6f7a61 2e737761 226d6f63     1.amazonaws.com"
 8013f9c:	3838382c 000a0d33 63616322 22747265     ,8883..."cacert"
 8013fac:	222c322c 65636163 702e7472 0d226d65     ,2,"cacert.pem".
 8013fbc:	0000000a 696c6322 6b746e65 2c227965     ...."clientkey",
 8013fcc:	63222c32 6e65696c 79656b74 6d65702e     2,"clientkey.pem
 8013fdc:	000a0d22 63657322 6576656c 322c226c     "..."seclevel",2
 8013fec:	0a0d322c 00000000 6c737322 73726576     ,2......"sslvers
 8013ffc:	226e6f69 342c322c 00000a0d 70696322     ion",2,4...."cip
 801400c:	73726568 65746975 2c322c22 46467830     hersuite",2,0xFF
 801401c:	0a0d4646 00000000 6e676922 6c65726f     FF......"ignorel
 801402c:	6c61636f 656d6974 2c322c22 000a0d31     ocaltime",2,1...
 801403c:	4c535322 64252c22 322c312c 00000a0d     "SSL",%d,1,2....
 801404c:	696c6322 63746e65 22747265 222c322c     "clientcert",2,"
 801405c:	65696c63 6563746e 702e7472 0d226d65     clientcert.pem".
 801406c:	0000000a 74756f22 74726f70 6e222c22     ...."outport","n
 801407c:	22656e6f 00000a0d 65472f22 662f3376     one"...."/Gev3/f
 801408c:	7465656c 00000022 65727473 66206d61     leet"...stream f
 801409c:	006c6c75 65206f69 726f7272 00000000     ull.io error....
 80140ac:	61727261 616d2079 69732078 6520657a     array max size e
 80140bc:	65656378 00646564 6e6f6e28 00002965     xceeded.(none)..
 80140cc:	61766e69 2064696c 6c656966 79742064     invalid field ty
 80140dc:	00006570 6c6c6163 6b636162 72726520     pe..callback err
 80140ec:	0000726f 7373696d 20676e69 75716572     or..missing requ
 80140fc:	64657269 65696620 0000646c 61766e69     ired field..inva
 801410c:	2064696c 65747865 6f69736e 0000006e     lid extension...
 801411c:	6d627573 73206773 20657a69 6e616863     submsg size chan
 801412c:	00646567 61766e69 2064696c 61746164     ged.invalid data
 801413c:	7a69735f 00000065 65747962 69732073     _size...bytes si
 801414c:	6520657a 65656378 00646564 6f72657a     ze exceeded.zero
 801415c:	6e656c2d 20687467 69727473 0000676e     -length string..
 801416c:	65746e75 6e696d72 64657461 72747320     unterminated str
 801417c:	00676e69 61766e69 2064696c 6c656966     ing.invalid fiel
 801418c:	65642064 69726373 726f7470 00000000     d descriptor....
 801419c:	45564144 50504120 6e692073 61697469     DAVE APPs initia
 80141ac:	617a696c 6e6f6974 69616620 0064656c     lization failed.
 80141bc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80141cc:	2a2a2a2a 2a2a2a2a 69206e69 7475706e     ********in input
 80141dc:	70616320 65727574 2a2a2a2a 2a2a2a2a      capture********
 80141ec:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 80141fc:	0000000a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 801420c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 74697865     ************exit
 801421c:	706e6920 63207475 75747061 2a2a6572      input capture**
 801422c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801423c:	2a2a2a2a 000a2a2a 2a2a2a2a 2a2a2a2a     ******..********
 801424c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801425c:	70206e69 65636f72 69207373 7475706e     in process input
 801426c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801427c:	2a2a2a2a 2a2a2a2a 0000000a 2a2a2a2a     ********....****
 801428c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801429c:	652a2a2a 20746978 636f7270 20737365     ***exit process 
 80142ac:	75706e69 2a2a2a74 2a2a2a2a 2a2a2a2a     input***********
 80142bc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 0a2a2a2a     ***************.
 80142cc:	00000000 2a2a2a2a 2a2a2a2a 2a2a2a2a     ....************
 80142dc:	2a2a2a2a 2a2a2a2a 692a2a2a 6376206e     ***********in vc
 80142ec:	756f2075 74757074 2a2a2a2a 2a2a2a2a     u output********
 80142fc:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801430c:	2a2a2a2a 00000a2a 2a2a2a2a 2a2a2a2a     *****...********
 801431c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801432c:	74697865 75637620 74756f20 2a747570     exit vcu output*
 801433c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 2a2a2a2a     ****************
 801434c:	2a2a2a2a 2a2a2a2a 2a2a2a2a 00000a2a     *************...
 801435c:	00676f6c 00000000 00000043              log.....C...

08014368 <_global_impure_ptr>:
 8014368:	1fff42d0                                .B..

0801436c <_DAYS_BEFORE_MONTH>:
 801436c:	00000000 0000001f 0000003b 0000005a     ........;...Z...
 801437c:	00000078 00000097 000000b5 000000d4     x...............
 801438c:	000000f3 00000111 00000130 0000014e     ........0...N...

0801439c <DAYS_IN_MONTH>:
 801439c:	0000001f 0000001c 0000001f 0000001e     ................
 80143ac:	0000001f 0000001e 0000001f 0000001f     ................
 80143bc:	0000001e 0000001f 0000001e 0000001f     ................

080143cc <_ctype_>:
 80143cc:	20202000 20202020 28282020 20282828     .         ((((( 
 80143dc:	20202020 20202020 20202020 20202020                     
 80143ec:	10108820 10101010 10101010 10101010      ...............
 80143fc:	04040410 04040404 10040404 10101010     ................
 801440c:	41411010 41414141 01010101 01010101     ..AAAAAA........
 801441c:	01010101 01010101 01010101 10101010     ................
 801442c:	42421010 42424242 02020202 02020202     ..BBBBBB........
 801443c:	02020202 02020202 02020202 10101010     ................
 801444c:	00000020 00000000 00000000 00000000      ...............
	...

080144d0 <__sf_fake_stdin>:
	...

080144f0 <__sf_fake_stdout>:
	...

08014510 <__sf_fake_stderr>:
	...

08014530 <__month_lengths>:
 8014530:	0000001f 0000001c 0000001f 0000001e     ................
 8014540:	0000001f 0000001e 0000001f 0000001f     ................
 8014550:	0000001e 0000001f 0000001e 0000001f     ................
 8014560:	0000001f 0000001d 0000001f 0000001e     ................
 8014570:	0000001f 0000001e 0000001f 0000001f     ................
 8014580:	0000001e 0000001f 0000001e 0000001f     ................
 8014590:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
 80145a0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
 80145b0:	31300046 35343332 39383736 64636261     F.0123456789abcd
 80145c0:	00006665                                ef..
