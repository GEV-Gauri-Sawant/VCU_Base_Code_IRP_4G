   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "ff.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .bss.FatFs,"aw",%nobits
  20              	 .align 2
  23              	FatFs:
  24 0000 00000000 	 .space 4
  25              	 .section .bss.Fsid,"aw",%nobits
  26              	 .align 1
  29              	Fsid:
  30 0000 0000     	 .space 2
  31              	 .section .bss.CurrVol,"aw",%nobits
  34              	CurrVol:
  35 0000 00       	 .space 1
  36              	 .section .bss.Files,"aw",%nobits
  37              	 .align 2
  40              	Files:
  41 0000 00000000 	 .space 16
  41      00000000 
  41      00000000 
  41      00000000 
  42              	 .section .rodata.ExCvt,"a",%progbits
  43              	 .align 2
  46              	ExCvt:
  47 0000 43       	 .byte 67
  48 0001 55       	 .byte 85
  49 0002 45       	 .byte 69
  50 0003 41       	 .byte 65
  51 0004 41       	 .byte 65
  52 0005 41       	 .byte 65
  53 0006 41       	 .byte 65
  54 0007 43       	 .byte 67
  55 0008 45       	 .byte 69
  56 0009 45       	 .byte 69
  57 000a 45       	 .byte 69
  58 000b 49       	 .byte 73
  59 000c 49       	 .byte 73
  60 000d 49       	 .byte 73
  61 000e 41       	 .byte 65
  62 000f 41       	 .byte 65
  63 0010 45       	 .byte 69
  64 0011 92       	 .byte -110
  65 0012 92       	 .byte -110
  66 0013 4F       	 .byte 79
  67 0014 4F       	 .byte 79
  68 0015 4F       	 .byte 79
  69 0016 55       	 .byte 85
  70 0017 55       	 .byte 85
  71 0018 59       	 .byte 89
  72 0019 4F       	 .byte 79
  73 001a 55       	 .byte 85
  74 001b 4F       	 .byte 79
  75 001c 9C       	 .byte -100
  76 001d 4F       	 .byte 79
  77 001e 9E       	 .byte -98
  78 001f 9F       	 .byte -97
  79 0020 41       	 .byte 65
  80 0021 49       	 .byte 73
  81 0022 4F       	 .byte 79
  82 0023 55       	 .byte 85
  83 0024 A5       	 .byte -91
  84 0025 A5       	 .byte -91
  85 0026 A6       	 .byte -90
  86 0027 A7       	 .byte -89
  87 0028 A8       	 .byte -88
  88 0029 A9       	 .byte -87
  89 002a AA       	 .byte -86
  90 002b AB       	 .byte -85
  91 002c AC       	 .byte -84
  92 002d AD       	 .byte -83
  93 002e AE       	 .byte -82
  94 002f AF       	 .byte -81
  95 0030 B0       	 .byte -80
  96 0031 B1       	 .byte -79
  97 0032 B2       	 .byte -78
  98 0033 B3       	 .byte -77
  99 0034 B4       	 .byte -76
 100 0035 41       	 .byte 65
 101 0036 41       	 .byte 65
 102 0037 41       	 .byte 65
 103 0038 B8       	 .byte -72
 104 0039 B9       	 .byte -71
 105 003a BA       	 .byte -70
 106 003b BB       	 .byte -69
 107 003c BC       	 .byte -68
 108 003d BD       	 .byte -67
 109 003e BE       	 .byte -66
 110 003f BF       	 .byte -65
 111 0040 C0       	 .byte -64
 112 0041 C1       	 .byte -63
 113 0042 C2       	 .byte -62
 114 0043 C3       	 .byte -61
 115 0044 C4       	 .byte -60
 116 0045 C5       	 .byte -59
 117 0046 41       	 .byte 65
 118 0047 41       	 .byte 65
 119 0048 C8       	 .byte -56
 120 0049 C9       	 .byte -55
 121 004a CA       	 .byte -54
 122 004b CB       	 .byte -53
 123 004c CC       	 .byte -52
 124 004d CD       	 .byte -51
 125 004e CE       	 .byte -50
 126 004f CF       	 .byte -49
 127 0050 D1       	 .byte -47
 128 0051 D1       	 .byte -47
 129 0052 45       	 .byte 69
 130 0053 45       	 .byte 69
 131 0054 45       	 .byte 69
 132 0055 49       	 .byte 73
 133 0056 49       	 .byte 73
 134 0057 49       	 .byte 73
 135 0058 49       	 .byte 73
 136 0059 D9       	 .byte -39
 137 005a DA       	 .byte -38
 138 005b DB       	 .byte -37
 139 005c DC       	 .byte -36
 140 005d DD       	 .byte -35
 141 005e 49       	 .byte 73
 142 005f DF       	 .byte -33
 143 0060 4F       	 .byte 79
 144 0061 E1       	 .byte -31
 145 0062 4F       	 .byte 79
 146 0063 4F       	 .byte 79
 147 0064 4F       	 .byte 79
 148 0065 4F       	 .byte 79
 149 0066 E6       	 .byte -26
 150 0067 E8       	 .byte -24
 151 0068 E8       	 .byte -24
 152 0069 55       	 .byte 85
 153 006a 55       	 .byte 85
 154 006b 55       	 .byte 85
 155 006c 59       	 .byte 89
 156 006d 59       	 .byte 89
 157 006e EE       	 .byte -18
 158 006f EF       	 .byte -17
 159 0070 F0       	 .byte -16
 160 0071 F1       	 .byte -15
 161 0072 F2       	 .byte -14
 162 0073 F3       	 .byte -13
 163 0074 F4       	 .byte -12
 164 0075 F5       	 .byte -11
 165 0076 F6       	 .byte -10
 166 0077 F7       	 .byte -9
 167 0078 F8       	 .byte -8
 168 0079 F9       	 .byte -7
 169 007a FA       	 .byte -6
 170 007b FB       	 .byte -5
 171 007c FC       	 .byte -4
 172 007d FD       	 .byte -3
 173 007e FE       	 .byte -2
 174 007f FF       	 .byte -1
 175              	 .section .text.ld_word,"ax",%progbits
 176              	 .align 2
 177              	 .thumb
 178              	 .thumb_func
 180              	ld_word:
 181              	.LFB0:
 182              	 .file 1 "../Dave/Generated/FATFS/ff_Src/ff.c"
   1:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------------------------------------------/
   2:../Dave/Generated/FATFS/ff_Src/ff.c **** /  FatFs - Generic FAT Filesystem Module  R0.14a                              /
   3:../Dave/Generated/FATFS/ff_Src/ff.c **** /-----------------------------------------------------------------------------/
   4:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   5:../Dave/Generated/FATFS/ff_Src/ff.c **** / Copyright (C) 2020, ChaN, all right reserved.
   6:../Dave/Generated/FATFS/ff_Src/ff.c **** /
   7:../Dave/Generated/FATFS/ff_Src/ff.c **** / FatFs module is an open source software. Redistribution and use of FatFs in
   8:../Dave/Generated/FATFS/ff_Src/ff.c **** / source and binary forms, with or without modification, are permitted provided
   9:../Dave/Generated/FATFS/ff_Src/ff.c **** / that the following condition is met:
  10:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  11:../Dave/Generated/FATFS/ff_Src/ff.c **** / 1. Redistributions of source code must retain the above copyright notice,
  12:../Dave/Generated/FATFS/ff_Src/ff.c **** /    this condition and the following disclaimer.
  13:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  14:../Dave/Generated/FATFS/ff_Src/ff.c **** / This software is provided by the copyright holder and contributors "AS IS"
  15:../Dave/Generated/FATFS/ff_Src/ff.c **** / and any warranties related to this software are DISCLAIMED.
  16:../Dave/Generated/FATFS/ff_Src/ff.c **** / The copyright owner or contributors be NOT LIABLE for any damages caused
  17:../Dave/Generated/FATFS/ff_Src/ff.c **** / by use of this software.
  18:../Dave/Generated/FATFS/ff_Src/ff.c **** /
  19:../Dave/Generated/FATFS/ff_Src/ff.c **** /----------------------------------------------------------------------------*/
  20:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  21:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  22:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "ff.h"			/* Declarations of FatFs API */
  23:../Dave/Generated/FATFS/ff_Src/ff.c **** #include "diskio.h"		/* Declarations of device I/O functions */
  24:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  25:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  26:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
  27:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  28:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Definitions
  29:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  30:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
  31:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  32:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_DEFINED != 80196	/* Revision ID */
  33:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong include file (ff.h).
  34:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
  35:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  36:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  37:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Limits and boundaries */
  38:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR		0x200000		/* Max size of FAT directory */
  39:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_DIR_EX	0x10000000		/* Max size of exFAT directory */
  40:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT12	0xFF5			/* Max FAT12 clusters (differs from specs, but right for real DOS/Windows
  41:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT16	0xFFF5			/* Max FAT16 clusters (differs from specs, but right for real DOS/Window
  42:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_FAT32	0x0FFFFFF5		/* Max FAT32 clusters (not specified, practical limit) */
  43:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_EXFAT	0x7FFFFFFD		/* Max exFAT clusters (differs from specs, implementation limit) */
  44:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  45:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  46:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Character code support macros */
  47:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsUpper(c)		((c) >= 'A' && (c) <= 'Z')
  48:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsLower(c)		((c) >= 'a' && (c) <= 'z')
  49:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsDigit(c)		((c) >= '0' && (c) <= '9')
  50:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogate(c)	((c) >= 0xD800 && (c) <= 0xDFFF)
  51:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateH(c)	((c) >= 0xD800 && (c) <= 0xDBFF)
  52:../Dave/Generated/FATFS/ff_Src/ff.c **** #define IsSurrogateL(c)	((c) >= 0xDC00 && (c) <= 0xDFFF)
  53:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  54:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  55:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file access control and file status flags for internal use */
  56:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_SEEKEND	0x20	/* Seek to end of the file on file open */
  57:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_MODIFIED	0x40	/* File has been modified */
  58:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FA_DIRTY	0x80	/* FIL.buf[] needs to be written-back */
  59:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  60:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  61:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Additional file attribute bits for internal use */
  62:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_VOL		0x08	/* Volume label */
  63:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_LFN		0x0F	/* LFN entry */
  64:../Dave/Generated/FATFS/ff_Src/ff.c **** #define AM_MASK		0x3F	/* Mask of defined bits */
  65:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  66:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  67:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Name status flags in fn[11] */
  68:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NSFLAG		11		/* Index of the name status byte */
  69:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LOSS		0x01	/* Out of 8.3 format */
  70:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LFN		0x02	/* Force to create LFN entry */
  71:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_LAST		0x04	/* Last segment */
  72:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_BODY		0x08	/* Lower case flag (body) */
  73:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_EXT		0x10	/* Lower case flag (ext) */
  74:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_DOT		0x20	/* Dot entry */
  75:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NOLFN	0x40	/* Do not find LFN */
  76:../Dave/Generated/FATFS/ff_Src/ff.c **** #define NS_NONAME	0x80	/* Not followed */
  77:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  78:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  79:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT directory entry types */
  80:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_BITMAP	0x81	/* Allocation bitmap */
  81:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_UPCASE	0x82	/* Up-case table */
  82:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_VLABEL	0x83	/* Volume label */
  83:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_FILEDIR	0x85	/* File and directory */
  84:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_STREAM	0xC0	/* Stream extension */
  85:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	ET_FILENAME	0xC1	/* Name extension */
  86:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  87:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  88:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FatFs refers the FAT structure as simple byte array instead of structure member
  89:../Dave/Generated/FATFS/ff_Src/ff.c **** / because the C structure is not binary compatible between different platforms */
  90:../Dave/Generated/FATFS/ff_Src/ff.c **** 
  91:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_JmpBoot			0		/* x86 jump instruction (3-byte) */
  92:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_OEMName			3		/* OEM name (8-byte) */
  93:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSec		11		/* Sector size [byte] (WORD) */
  94:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClus		13		/* Cluster size [sector] (BYTE) */
  95:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdSecCnt		14		/* Size of reserved area [sector] (WORD) */
  96:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATs			16		/* Number of FATs (BYTE) */
  97:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootEntCnt		17		/* Size of root directory area for FAT [entry] (WORD) */
  98:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec16		19		/* Volume size (16-bit) [sector] (WORD) */
  99:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_Media			21		/* Media descriptor byte (BYTE) */
 100:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz16			22		/* FAT size (16-bit) [sector] (WORD) */
 101:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerTrk		24		/* Number of sectors per track for int13h [sector] (WORD) */
 102:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumHeads		26		/* Number of heads for int13h (WORD) */
 103:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_HiddSec			28		/* Volume offset from top of the drive (DWORD) */
 104:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSec32		32		/* Volume size (32-bit) [sector] (DWORD) */
 105:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum			36		/* Physical drive number for int13h (BYTE) */
 106:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres			37		/* WindowsNT error flag (BYTE) */
 107:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig			38		/* Extended boot signature (BYTE) */
 108:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID			39		/* Volume serial number (DWORD) */
 109:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab			43		/* Volume label string (8-byte) */
 110:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType		54		/* Filesystem type string (8-byte) */
 111:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode			62		/* Boot code (448-byte) */
 112:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_55AA				510		/* Signature word (WORD) */
 113:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 114:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FATSz32			36		/* FAT32: FAT size [sector] (DWORD) */
 115:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ExtFlags32		40		/* FAT32: Extended flags (WORD) */
 116:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVer32			42		/* FAT32: Filesystem version (WORD) */
 117:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClus32		44		/* FAT32: Root directory cluster (DWORD) */
 118:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSInfo32		48		/* FAT32: Offset of FSINFO sector (WORD) */
 119:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BkBootSec32		50		/* FAT32: Offset of backup boot sector (WORD) */
 120:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_DrvNum32			64		/* FAT32: Physical drive number for int13h (BYTE) */
 121:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_NTres32			65		/* FAT32: Error flag (BYTE) */
 122:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootSig32		66		/* FAT32: Extended boot signature (BYTE) */
 123:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolID32			67		/* FAT32: Volume serial number (DWORD) */
 124:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_VolLab32			71		/* FAT32: Volume label string (8-byte) */
 125:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_FilSysType32		82		/* FAT32: Filesystem type string (8-byte) */
 126:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCode32		90		/* FAT32: Boot code (420-byte) */
 127:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 128:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_ZeroedEx		11		/* exFAT: MBZ field (53-byte) */
 129:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolOfsEx		64		/* exFAT: Volume offset from top of the drive [sector] (QWORD) */
 130:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_TotSecEx		72		/* exFAT: Volume size [sector] (QWORD) */
 131:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatOfsEx		80		/* exFAT: FAT offset from top of the volume [sector] (DWORD) */
 132:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FatSzEx			84		/* exFAT: FAT size [sector] (DWORD) */
 133:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DataOfsEx		88		/* exFAT: Data offset from top of the volume [sector] (DWORD) */
 134:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumClusEx		92		/* exFAT: Number of clusters (DWORD) */
 135:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RootClusEx		96		/* exFAT: Root directory start cluster (DWORD) */
 136:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolIDEx			100		/* exFAT: Volume serial number (DWORD) */
 137:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_FSVerEx			104		/* exFAT: Filesystem version (WORD) */
 138:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_VolFlagEx		106		/* exFAT: Volume flags (WORD) */
 139:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_BytsPerSecEx	108		/* exFAT: Log2 of sector size in unit of byte (BYTE) */
 140:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_SecPerClusEx	109		/* exFAT: Log2 of cluster size in unit of sector (BYTE) */
 141:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_NumFATsEx		110		/* exFAT: Number of FATs (BYTE) */
 142:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_DrvNumEx		111		/* exFAT: Physical drive number for int13h (BYTE) */
 143:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_PercInUseEx		112		/* exFAT: Percent in use (BYTE) */
 144:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BPB_RsvdEx			113		/* exFAT: Reserved (7-byte) */
 145:../Dave/Generated/FATFS/ff_Src/ff.c **** #define BS_BootCodeEx		120		/* exFAT: Boot code (390-byte) */
 146:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 147:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Name			0		/* Short file name (11-byte) */
 148:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_Attr			11		/* Attribute (BYTE) */
 149:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_NTres			12		/* Lower case flag (BYTE) */
 150:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime10		13		/* Created time sub-second (BYTE) */
 151:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_CrtTime			14		/* Created time (DWORD) */
 152:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_LstAccDate		18		/* Last accessed date (WORD) */
 153:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusHI		20		/* Higher 16-bit of first cluster (WORD) */
 154:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_ModTime			22		/* Modified time (DWORD) */
 155:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FstClusLO		26		/* Lower 16-bit of first cluster (WORD) */
 156:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_FileSize		28		/* File size (DWORD) */
 157:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Ord			0		/* LFN: LFN order and LLE flag (BYTE) */
 158:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Attr			11		/* LFN: LFN attribute (BYTE) */
 159:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Type			12		/* LFN: Entry type (BYTE) */
 160:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_Chksum			13		/* LFN: Checksum of the SFN (BYTE) */
 161:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LDIR_FstClusLO		26		/* LFN: MBZ field (WORD) */
 162:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Type			0		/* exFAT: Type of exFAT directory entry (BYTE) */
 163:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumLabel		1		/* exFAT: Number of volume label characters (BYTE) */
 164:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Label			2		/* exFAT: Volume label (11-WORD) */
 165:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CaseSum		4		/* exFAT: Sum of case conversion table (DWORD) */
 166:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumSec			1		/* exFAT: Number of secondary entries (BYTE) */
 167:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_SetSum			2		/* exFAT: Sum of the set of directory entries (WORD) */
 168:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_Attr			4		/* exFAT: File attribute (WORD) */
 169:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime		8		/* exFAT: Created time (DWORD) */
 170:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime		12		/* exFAT: Modified time (DWORD) */
 171:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTime		16		/* exFAT: Last accessed time (DWORD) */
 172:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTime10		20		/* exFAT: Created time subsecond (BYTE) */
 173:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTime10		21		/* exFAT: Modified time subsecond (BYTE) */
 174:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_CrtTZ			22		/* exFAT: Created timezone (BYTE) */
 175:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ModTZ			23		/* exFAT: Modified timezone (BYTE) */
 176:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_AccTZ			24		/* exFAT: Last accessed timezone (BYTE) */
 177:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_GenFlags		33		/* exFAT: General secondary flags (BYTE) */
 178:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NumName		35		/* exFAT: Number of file name characters (BYTE) */
 179:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_NameHash		36		/* exFAT: Hash of file name (WORD) */
 180:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_ValidFileSize	40		/* exFAT: Valid file size (QWORD) */
 181:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FstClus		52		/* exFAT: First cluster of the file data (DWORD) */
 182:../Dave/Generated/FATFS/ff_Src/ff.c **** #define XDIR_FileSize		56		/* exFAT: File/Directory size (QWORD) */
 183:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 184:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZDIRE				32		/* Size of a directory entry */
 185:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DDEM				0xE5	/* Deleted directory entry mark set to DIR_Name[0] */
 186:../Dave/Generated/FATFS/ff_Src/ff.c **** #define RDDEM				0x05	/* Replacement of the character collides with DDEM */
 187:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LLEF				0x40	/* Last long entry flag in LDIR_Ord */
 188:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 189:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_LeadSig			0		/* FAT32 FSI: Leading signature (DWORD) */
 190:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_StrucSig		484		/* FAT32 FSI: Structure signature (DWORD) */
 191:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Free_Count		488		/* FAT32 FSI: Number of free clusters (DWORD) */
 192:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FSI_Nxt_Free		492		/* FAT32 FSI: Last allocated cluster (DWORD) */
 193:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 194:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MBR_Table			446		/* MBR: Offset of partition table in the MBR */
 195:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZ_PTE				16		/* MBR: Size of a partition table entry */
 196:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_Boot			0		/* MBR PTE: Boot indicator */
 197:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StHead			1		/* MBR PTE: Start head */
 198:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StSec			2		/* MBR PTE: Start sector */
 199:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StCyl			3		/* MBR PTE: Start cylinder */
 200:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_System			4		/* MBR PTE: System ID */
 201:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdHead			5		/* MBR PTE: End head */
 202:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdSec			6		/* MBR PTE: End sector */
 203:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_EdCyl			7		/* MBR PTE: End cylinder */
 204:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_StLba			8		/* MBR PTE: Start in LBA */
 205:../Dave/Generated/FATFS/ff_Src/ff.c **** #define PTE_SizLba			12		/* MBR PTE: Size in LBA */
 206:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 207:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_Sign			0		/* GPT: Header signature (8-byte) */
 208:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_Rev			8		/* GPT: Revision (DWORD) */
 209:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_Size			12		/* GPT: Header size (DWORD) */
 210:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_Bcc			16		/* GPT: Header BCC (DWORD) */
 211:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_CurLba			24		/* GPT: Main header LBA (QWORD) */
 212:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_BakLba			32		/* GPT: Backup header LBA (QWORD) */
 213:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_FstLba			40		/* GPT: First LBA for partitions (QWORD) */
 214:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_LstLba			48		/* GPT: Last LBA for partitions (QWORD) */
 215:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_DskGuid		56		/* GPT: Disk GUID (16-byte) */
 216:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_PtOfs			72		/* GPT: Partation table LBA (QWORD) */
 217:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_PtNum			80		/* GPT: Number of table entries (DWORD) */
 218:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_PteSize		84		/* GPT: Size of table entry (DWORD) */
 219:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTH_PtBcc			88		/* GPT: Partation table BCC (DWORD) */
 220:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SZ_GPTE				128		/* GPT: Size of partition table entry */
 221:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_PtGuid			0		/* GPT PTE: Partition type GUID (16-byte) */
 222:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_UpGuid			16		/* GPT PTE: Partition unique GUID (16-byte) */
 223:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_FstLba			32		/* GPT PTE: First LBA (QWORD) */
 224:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_LstLba			40		/* GPT PTE: Last LBA inclusive (QWORD) */
 225:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_Flags			48		/* GPT PTE: Flags (QWORD) */
 226:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPTE_Name			56		/* GPT PTE: Name */
 227:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 228:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 229:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Post process on fatal error in the file operations */
 230:../Dave/Generated/FATFS/ff_Src/ff.c **** #define ABORT(fs, res)		{ fp->err = (BYTE)(res); LEAVE_FF(fs, res); }
 231:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 232:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 233:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Re-entrancy related */
 234:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 235:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
 236:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Static LFN work area cannot be used at thread-safe configuration
 237:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 238:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	{ unlock_fs(fs, res); return res; }
 239:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 240:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_FF(fs, res)	return res
 241:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 242:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 244:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of logical drive - physical location conversion */
 245:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
 246:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) VolToPart[vol].pd	/* Get physical drive number */
 247:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) VolToPart[vol].pt	/* Get partition index */
 248:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 249:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PD(vol) (BYTE)(vol)	/* Each logical drive is associated with the same physical drive num
 250:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LD2PT(vol) 0			/* Find first valid partition or in SFD */
 251:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 252:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 253:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 254:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Definitions of sector size */
 255:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_MAX_SS < FF_MIN_SS) || (FF_MAX_SS != 512 && FF_MAX_SS != 1024 && FF_MAX_SS != 2048 && FF_MA
 256:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong sector size configuration
 257:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 258:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS == FF_MIN_SS
 259:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((UINT)FF_MAX_SS)	/* Fixed sector size */
 260:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 261:../Dave/Generated/FATFS/ff_Src/ff.c **** #define SS(fs)	((fs)->ssize)	/* Variable sector size */
 262:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 263:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 264:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 265:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Timestamp */
 266:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_NORTC == 1
 267:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_NORTC_YEAR < 1980 || FF_NORTC_YEAR > 2107 || FF_NORTC_MON < 1 || FF_NORTC_MON > 12 || FF_NOR
 268:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Invalid FF_FS_NORTC settings
 269:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 270:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	((DWORD)(FF_NORTC_YEAR - 1980) << 25 | (DWORD)FF_NORTC_MON << 21 | (DWORD)FF_
 271:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 272:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GET_FATTIME()	get_fattime()
 273:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 274:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 275:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 276:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock controls */
 277:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 278:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_READONLY
 279:../Dave/Generated/FATFS/ff_Src/ff.c **** #error FF_FS_LOCK must be 0 at read-only configuration
 280:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 281:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {
 282:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;		/* Object ID 1, volume (NULL:blank entry) */
 283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clu;		/* Object ID 2, containing directory (0:root) */
 284:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs;		/* Object ID 3, offset in the directory */
 285:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ctr;		/* Object open counter, 0:none, 0x01..0xFF:read mode open count, 0x100:write mode */
 286:../Dave/Generated/FATFS/ff_Src/ff.c **** } FILESEM;
 287:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 288:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 289:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 290:../Dave/Generated/FATFS/ff_Src/ff.c **** /* SBCS up-case tables (\x80-\xFF) */
 291:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT437  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 292:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 293:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 294:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 295:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 296:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 297:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 298:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 299:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT720  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 300:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 301:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xA2,0xA3,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 302:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 303:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 304:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 305:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 306:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 307:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT737  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 308:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x93,0x94,0x95,0x96,0x97,0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87, \
 309:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F,0x90,0x91,0xAA,0x92,0x93,0x94,0x95,0x96, \
 310:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 311:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 312:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 313:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x97,0xEA,0xEB,0xEC,0xE4,0xED,0xEE,0xEF,0xF5,0xF0,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 314:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 315:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT771  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 316:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 317:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 318:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 319:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 320:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDC,0xDE,0xDE, \
 321:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 322:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFE,0xFF}
 323:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT775  {0x80,0x9A,0x91,0xA0,0x8E,0x95,0x8F,0x80,0xAD,0xED,0x8A,0x8A,0xA1,0x8D,0x8E,0x8F
 324:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0x95,0x96,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 325:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0xE0,0xA3,0xA3,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 326:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 327:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 328:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xA5,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 329:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE3,0xE8,0xE8,0xEA,0xEA,0xEE,0xED,0xEE,0xEF, \
 330:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 331:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT850  {0x43,0x55,0x45,0x41,0x41,0x41,0x41,0x43,0x45,0x45,0x45,0x49,0x49,0x49,0x41,0x41
 332:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x92,0x92,0x4F,0x4F,0x4F,0x55,0x55,0x59,0x4F,0x55,0x4F,0x9C,0x4F,0x9E,0x9F, \
 333:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 334:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0x41,0x41,0x41,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 335:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0x41,0x41,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 336:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0x45,0x45,0x45,0x49,0x49,0x49,0x49,0xD9,0xDA,0xDB,0xDC,0xDD,0x49,0xDF, \
 337:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x4F,0xE1,0x4F,0x4F,0x4F,0x4F,0xE6,0xE8,0xE8,0x55,0x55,0x55,0x59,0x59,0xEE,0xEF, \
 338:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 339:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT852  {0x80,0x9A,0x90,0xB6,0x8E,0xDE,0x8F,0x80,0x9D,0xD3,0x8A,0x8A,0xD7,0x8D,0x8E,0x8F
 340:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x91,0xE2,0x99,0x95,0x95,0x97,0x97,0x99,0x9A,0x9B,0x9B,0x9D,0x9E,0xAC, \
 341:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA4,0xA4,0xA6,0xA6,0xA8,0xA8,0xAA,0x8D,0xAC,0xB8,0xAE,0xAF, \
 342:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBD,0xBF, \
 343:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC6,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 344:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD2,0xD3,0xD2,0xD5,0xD6,0xD7,0xB7,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 345:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE3,0xD5,0xE6,0xE6,0xE8,0xE9,0xE8,0xEB,0xED,0xED,0xDD,0xEF, \
 346:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xEB,0xFC,0xFC,0xFE,0xFF}
 347:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT855  {0x81,0x81,0x83,0x83,0x85,0x85,0x87,0x87,0x89,0x89,0x8B,0x8B,0x8D,0x8D,0x8F,0x8F
 348:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x91,0x93,0x93,0x95,0x95,0x97,0x97,0x99,0x99,0x9B,0x9B,0x9D,0x9D,0x9F,0x9F, \
 349:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA1,0xA1,0xA3,0xA3,0xA5,0xA5,0xA7,0xA7,0xA9,0xA9,0xAB,0xAB,0xAD,0xAD,0xAE,0xAF, \
 350:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB6,0xB6,0xB8,0xB8,0xB9,0xBA,0xBB,0xBC,0xBE,0xBE,0xBF, \
 351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 352:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD1,0xD1,0xD3,0xD3,0xD5,0xD5,0xD7,0xD7,0xDD,0xD9,0xDA,0xDB,0xDC,0xDD,0xE0,0xDF, \
 353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE2,0xE2,0xE4,0xE4,0xE6,0xE6,0xE8,0xE8,0xEA,0xEA,0xEC,0xEC,0xEE,0xEE,0xEF, \
 354:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF8,0xFA,0xFA,0xFC,0xFC,0xFD,0xFE,0xFF}
 355:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT857  {0x80,0x9A,0x90,0xB6,0x8E,0xB7,0x8F,0x80,0xD2,0xD3,0xD4,0xD8,0xD7,0x49,0x8E,0x8F
 356:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0xE2,0x99,0xE3,0xEA,0xEB,0x98,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9E, \
 357:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB5,0xD6,0xE0,0xE9,0xA5,0xA5,0xA6,0xA6,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 358:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 359:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC7,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 360:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0x49,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 361:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE5,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xDE,0xED,0xEE,0xEF, \
 362:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 363:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT860  {0x80,0x9A,0x90,0x8F,0x8E,0x91,0x86,0x80,0x89,0x89,0x92,0x8B,0x8C,0x98,0x8E,0x8F
 364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x8C,0x99,0xA9,0x96,0x9D,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 365:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x86,0x8B,0x9F,0x96,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 366:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 367:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 368:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 369:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 370:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 371:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT861  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x8B,0x8B,0x8D,0x8E,0x8F
 372:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x8D,0x55,0x97,0x97,0x99,0x9A,0x9D,0x9C,0x9D,0x9E,0x9F, \
 373:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA4,0xA5,0xA6,0xA7,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 374:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 375:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 376:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 377:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 378:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 379:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT862  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 380:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 381:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 382:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 383:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 384:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 385:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 386:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 387:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT863  {0x43,0x55,0x45,0x41,0x41,0x41,0x86,0x43,0x45,0x45,0x45,0x49,0x49,0x8D,0x41,0x8F
 388:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x45,0x45,0x45,0x4F,0x45,0x49,0x55,0x55,0x98,0x4F,0x55,0x9B,0x9C,0x55,0x55,0x9F, \
 389:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA0,0xA1,0x4F,0x55,0xA4,0xA5,0xA6,0xA7,0x49,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 390:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 391:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 392:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 393:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 394:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 395:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT864  {0x80,0x9A,0x45,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 396:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 397:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 398:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 399:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 400:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 401:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 402:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 403:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT865  {0x80,0x9A,0x90,0x41,0x8E,0x41,0x8F,0x80,0x45,0x45,0x45,0x49,0x49,0x49,0x8E,0x8F
 404:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x92,0x92,0x4F,0x99,0x4F,0x55,0x55,0x59,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 405:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x41,0x49,0x4F,0x55,0xA5,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 406:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 407:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 408:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 409:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xE0,0xE1,0xE2,0xE3,0xE4,0xE5,0xE6,0xE7,0xE8,0xE9,0xEA,0xEB,0xEC,0xED,0xEE,0xEF, \
 410:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xF2,0xF3,0xF4,0xF5,0xF6,0xF7,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 411:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT866  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 412:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 413:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F, \
 414:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 415:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 416:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xD6,0xD7,0xD8,0xD9,0xDA,0xDB,0xDC,0xDD,0xDE,0xDF, \
 417:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x9B,0x9C,0x9D,0x9E,0x9F, \
 418:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF0,0xF2,0xF2,0xF4,0xF4,0xF6,0xF6,0xF8,0xF9,0xFA,0xFB,0xFC,0xFD,0xFE,0xFF}
 419:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_CT869  {0x80,0x81,0x82,0x83,0x84,0x85,0x86,0x87,0x88,0x89,0x8A,0x8B,0x8C,0x8D,0x8E,0x8F
 420:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x90,0x91,0x92,0x93,0x94,0x95,0x96,0x97,0x98,0x99,0x9A,0x86,0x9C,0x8D,0x8F,0x90, \
 421:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0x91,0x90,0x92,0x95,0xA4,0xA5,0xA6,0xA7,0xA8,0xA9,0xAA,0xAB,0xAC,0xAD,0xAE,0xAF, \
 422:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xB0,0xB1,0xB2,0xB3,0xB4,0xB5,0xB6,0xB7,0xB8,0xB9,0xBA,0xBB,0xBC,0xBD,0xBE,0xBF, \
 423:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xC0,0xC1,0xC2,0xC3,0xC4,0xC5,0xC6,0xC7,0xC8,0xC9,0xCA,0xCB,0xCC,0xCD,0xCE,0xCF, \
 424:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xD0,0xD1,0xD2,0xD3,0xD4,0xD5,0xA4,0xA5,0xA6,0xD9,0xDA,0xDB,0xDC,0xA7,0xA8,0xDF, \
 425:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xA9,0xAA,0xAC,0xAD,0xB5,0xB6,0xB7,0xB8,0xBD,0xBE,0xC6,0xC7,0xCF,0xCF,0xD0,0xEF, \
 426:../Dave/Generated/FATFS/ff_Src/ff.c **** 					0xF0,0xF1,0xD1,0xD2,0xD3,0xF5,0xD4,0xF7,0xF8,0xF9,0xD5,0x96,0x95,0x98,0xFE,0xFF}
 427:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 428:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 429:../Dave/Generated/FATFS/ff_Src/ff.c **** /* DBCS code range |----- 1st byte -----|  |----------- 2nd byte -----------| */
 430:../Dave/Generated/FATFS/ff_Src/ff.c **** /*                  <------>    <------>    <------>    <------>    <------>  */
 431:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC932 {0x81, 0x9F, 0xE0, 0xFC, 0x40, 0x7E, 0x80, 0xFC, 0x00, 0x00}
 432:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC936 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0x80, 0xFE, 0x00, 0x00}
 433:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC949 {0x81, 0xFE, 0x00, 0x00, 0x41, 0x5A, 0x61, 0x7A, 0x81, 0xFE}
 434:../Dave/Generated/FATFS/ff_Src/ff.c **** #define TBL_DC950 {0x81, 0xFE, 0x00, 0x00, 0x40, 0x7E, 0xA1, 0xFE, 0x00, 0x00}
 435:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 436:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 437:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Macros for table definitions */
 438:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MERGE_2STR(a, b) a ## b
 439:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MKCVTBL(hd, cp) MERGE_2STR(hd, cp)
 440:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 441:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 442:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 443:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 444:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 445:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 446:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Work Area
 447:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 448:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 449:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remark: Variables defined here without initial value shall be guaranteed
 450:../Dave/Generated/FATFS/ff_Src/ff.c **** /  zero/null at start-up. If not, the linker option or start-up routine is
 451:../Dave/Generated/FATFS/ff_Src/ff.c **** /  not compliance with C standard. */
 452:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 453:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 454:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File/Volume controls           */
 455:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 456:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 457:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES < 1 || FF_VOLUMES > 10
 458:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_VOLUMES setting
 459:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 460:../Dave/Generated/FATFS/ff_Src/ff.c **** static FATFS* FatFs[FF_VOLUMES];	/* Pointer to the filesystem objects (logical drives) */
 461:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD Fsid;					/* Filesystem mount ID */
 462:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 463:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
 464:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE CurrVol;				/* Current drive */
 465:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 466:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 467:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 468:../Dave/Generated/FATFS/ff_Src/ff.c **** static FILESEM Files[FF_FS_LOCK];	/* Open object lock semaphores */
 469:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 470:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 471:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
 472:../Dave/Generated/FATFS/ff_Src/ff.c **** #ifdef FF_VOLUME_STRS
 473:../Dave/Generated/FATFS/ff_Src/ff.c **** static const char* const VolumeStr[FF_VOLUMES] = {FF_VOLUME_STRS};	/* Pre-defined volume ID */
 474:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 475:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 476:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 477:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
 478:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MIN_GPT > 0x100000000
 479:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_MIN_GPT setting
 480:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 481:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE GUID_MS_Basic[16] = {0xA2,0xA0,0xD0,0xEB,0xE5,0xB9,0x33,0x44,0x87,0xC0,0x68,0xB6,
 482:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 483:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 484:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 485:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 486:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 487:../Dave/Generated/FATFS/ff_Src/ff.c **** /* LFN/Directory working buffer   */
 488:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 489:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 490:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 0		/* Non-LFN configuration */
 491:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 492:../Dave/Generated/FATFS/ff_Src/ff.c **** #error LFN must be enabled when enable exFAT
 493:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 494:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 495:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 496:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 497:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 498:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 499:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* LFN configurations */
 500:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 12 || FF_MAX_LFN > 255
 501:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_MAX_LFN
 502:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 503:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_BUF < FF_SFN_BUF || FF_SFN_BUF < 12
 504:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_BUF or FF_SFN_BUF
 505:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 506:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE < 0 || FF_LFN_UNICODE > 3
 507:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_LFN_UNICODE
 508:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 509:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE LfnOfs[] = {1,3,5,7,9,14,16,18,20,22,24,28,30};	/* FAT: Offset of LFN characters 
 510:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAXDIRB(nc)	((nc + 44U) / 15 * SZDIRE)	/* exFAT: Size of directory entry block scratchpad b
 511:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 512:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1		/* LFN enabled with static working buffer */
 513:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 514:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE	DirBuf[MAXDIRB(FF_MAX_LFN)];	/* Directory entry block scratchpad buffer */
 515:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 516:../Dave/Generated/FATFS/ff_Src/ff.c **** static WCHAR LfnBuf[FF_MAX_LFN + 1];		/* LFN working buffer */
 517:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF
 518:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)
 519:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 520:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 521:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 522:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 2 	/* LFN enabled with dynamic working buffer on the stack */
 523:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 524:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1]; BYTE dbuf[MAXDIRB(FF_MAX_LFN)];	/* LFN working buffer
 525:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; (fs)->dirbuf = dbuf; }
 526:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 527:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 528:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR lbuf[FF_MAX_LFN+1];	/* LFN working buffer */
 529:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ (fs)->lfnbuf = lbuf; }
 530:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()
 531:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 532:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	return res
 533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 534:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN == 3 	/* LFN enabled with dynamic working buffer on the heap */
 535:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 536:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer and directory entry block scratchp
 537:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2 + MAXDIRB(FF_MAX_LFN)); if (!lfn) LEAV
 538:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 539:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 540:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DEF_NAMBUF		WCHAR *lfn;	/* Pointer to LFN working buffer */
 541:../Dave/Generated/FATFS/ff_Src/ff.c **** #define INIT_NAMBUF(fs)	{ lfn = ff_memalloc((FF_MAX_LFN+1)*2); if (!lfn) LEAVE_FF(fs, FR_NOT_ENOUGH
 542:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FREE_NAMBUF()	ff_memfree(lfn)
 543:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 544:../Dave/Generated/FATFS/ff_Src/ff.c **** #define LEAVE_MKFS(res)	{ if (!work) ff_memfree(buf); return res; }
 545:../Dave/Generated/FATFS/ff_Src/ff.c **** #define MAX_MALLOC	0x8000	/* Must be >=FF_MAX_SS */
 546:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 547:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
 548:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong setting of FF_USE_LFN
 549:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 550:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 1 */
 551:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN == 0 */
 552:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 553:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 554:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 555:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 556:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Code conversion tables         */
 557:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------*/
 558:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 559:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Run-time code page configuration */
 560:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE CodePage
 561:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD CodePage;	/* Current code page */
 562:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE *ExCvt, *DbcTbl;	/* Pointer to current SBCS up-case table and DBCS code range tab
 563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 564:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct437[] = TBL_CT437;
 565:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct720[] = TBL_CT720;
 566:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct737[] = TBL_CT737;
 567:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct771[] = TBL_CT771;
 568:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct775[] = TBL_CT775;
 569:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct850[] = TBL_CT850;
 570:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct852[] = TBL_CT852;
 571:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct855[] = TBL_CT855;
 572:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct857[] = TBL_CT857;
 573:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct860[] = TBL_CT860;
 574:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct861[] = TBL_CT861;
 575:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct862[] = TBL_CT862;
 576:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct863[] = TBL_CT863;
 577:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct864[] = TBL_CT864;
 578:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct865[] = TBL_CT865;
 579:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct866[] = TBL_CT866;
 580:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Ct869[] = TBL_CT869;
 581:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc932[] = TBL_DC932;
 582:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc936[] = TBL_DC936;
 583:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc949[] = TBL_DC949;
 584:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE Dc950[] = TBL_DC950;
 585:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 586:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* Static code page configuration (SBCS) */
 587:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 588:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE ExCvt[] = MKCVTBL(TBL_CT, FF_CODE_PAGE);
 589:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 590:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* Static code page configuration (DBCS) */
 591:../Dave/Generated/FATFS/ff_Src/ff.c **** #define CODEPAGE FF_CODE_PAGE
 592:../Dave/Generated/FATFS/ff_Src/ff.c **** static const BYTE DbcTbl[] = MKCVTBL(TBL_DC, FF_CODE_PAGE);
 593:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 594:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 595:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 596:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 597:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 599:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------------------------
 600:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 601:../Dave/Generated/FATFS/ff_Src/ff.c ****    Module Private Functions
 602:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 603:../Dave/Generated/FATFS/ff_Src/ff.c **** ---------------------------------------------------------------------------*/
 604:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 605:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 606:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 607:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load/Store multi-byte word in the FAT structure                       */
 608:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 609:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 610:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
 611:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 183              	 .loc 1 611 0
 184              	 .cfi_startproc
 185              	 
 186              	 
 187              	 
 188 0000 80B4     	 push {r7}
 189              	.LCFI0:
 190              	 .cfi_def_cfa_offset 4
 191              	 .cfi_offset 7,-4
 192 0002 85B0     	 sub sp,sp,#20
 193              	.LCFI1:
 194              	 .cfi_def_cfa_offset 24
 195 0004 00AF     	 add r7,sp,#0
 196              	.LCFI2:
 197              	 .cfi_def_cfa_register 7
 198 0006 7860     	 str r0,[r7,#4]
 612:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD rv;
 613:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 614:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[1];
 199              	 .loc 1 614 0
 200 0008 7B68     	 ldr r3,[r7,#4]
 201 000a 0133     	 adds r3,r3,#1
 202 000c 1B78     	 ldrb r3,[r3]
 203 000e FB81     	 strh r3,[r7,#14]
 615:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 204              	 .loc 1 615 0
 205 0010 FB89     	 ldrh r3,[r7,#14]
 206 0012 1B02     	 lsls r3,r3,#8
 207 0014 9AB2     	 uxth r2,r3
 208 0016 7B68     	 ldr r3,[r7,#4]
 209 0018 1B78     	 ldrb r3,[r3]
 210 001a 9BB2     	 uxth r3,r3
 211 001c 1343     	 orrs r3,r3,r2
 212 001e 9BB2     	 uxth r3,r3
 213 0020 FB81     	 strh r3,[r7,#14]
 616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 214              	 .loc 1 616 0
 215 0022 FB89     	 ldrh r3,[r7,#14]
 617:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 216              	 .loc 1 617 0
 217 0024 1846     	 mov r0,r3
 218 0026 1437     	 adds r7,r7,#20
 219              	.LCFI3:
 220              	 .cfi_def_cfa_offset 4
 221 0028 BD46     	 mov sp,r7
 222              	.LCFI4:
 223              	 .cfi_def_cfa_register 13
 224              	 
 225 002a 5DF8047B 	 ldr r7,[sp],#4
 226              	.LCFI5:
 227              	 .cfi_restore 7
 228              	 .cfi_def_cfa_offset 0
 229 002e 7047     	 bx lr
 230              	 .cfi_endproc
 231              	.LFE0:
 233              	 .section .text.ld_dword,"ax",%progbits
 234              	 .align 2
 235              	 .thumb
 236              	 .thumb_func
 238              	ld_dword:
 239              	.LFB1:
 618:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 619:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
 620:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 240              	 .loc 1 620 0
 241              	 .cfi_startproc
 242              	 
 243              	 
 244              	 
 245 0000 80B4     	 push {r7}
 246              	.LCFI6:
 247              	 .cfi_def_cfa_offset 4
 248              	 .cfi_offset 7,-4
 249 0002 85B0     	 sub sp,sp,#20
 250              	.LCFI7:
 251              	 .cfi_def_cfa_offset 24
 252 0004 00AF     	 add r7,sp,#0
 253              	.LCFI8:
 254              	 .cfi_def_cfa_register 7
 255 0006 7860     	 str r0,[r7,#4]
 621:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD rv;
 622:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[3];
 256              	 .loc 1 623 0
 257 0008 7B68     	 ldr r3,[r7,#4]
 258 000a 0333     	 adds r3,r3,#3
 259 000c 1B78     	 ldrb r3,[r3]
 260 000e FB60     	 str r3,[r7,#12]
 624:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 261              	 .loc 1 624 0
 262 0010 FB68     	 ldr r3,[r7,#12]
 263 0012 1B02     	 lsls r3,r3,#8
 264 0014 7A68     	 ldr r2,[r7,#4]
 265 0016 0232     	 adds r2,r2,#2
 266 0018 1278     	 ldrb r2,[r2]
 267 001a 1343     	 orrs r3,r3,r2
 268 001c FB60     	 str r3,[r7,#12]
 625:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 269              	 .loc 1 625 0
 270 001e FB68     	 ldr r3,[r7,#12]
 271 0020 1B02     	 lsls r3,r3,#8
 272 0022 7A68     	 ldr r2,[r7,#4]
 273 0024 0132     	 adds r2,r2,#1
 274 0026 1278     	 ldrb r2,[r2]
 275 0028 1343     	 orrs r3,r3,r2
 276 002a FB60     	 str r3,[r7,#12]
 626:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 277              	 .loc 1 626 0
 278 002c FB68     	 ldr r3,[r7,#12]
 279 002e 1B02     	 lsls r3,r3,#8
 280 0030 7A68     	 ldr r2,[r7,#4]
 281 0032 1278     	 ldrb r2,[r2]
 282 0034 1343     	 orrs r3,r3,r2
 283 0036 FB60     	 str r3,[r7,#12]
 627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 284              	 .loc 1 627 0
 285 0038 FB68     	 ldr r3,[r7,#12]
 628:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 286              	 .loc 1 628 0
 287 003a 1846     	 mov r0,r3
 288 003c 1437     	 adds r7,r7,#20
 289              	.LCFI9:
 290              	 .cfi_def_cfa_offset 4
 291 003e BD46     	 mov sp,r7
 292              	.LCFI10:
 293              	 .cfi_def_cfa_register 13
 294              	 
 295 0040 5DF8047B 	 ldr r7,[sp],#4
 296              	.LCFI11:
 297              	 .cfi_restore 7
 298              	 .cfi_def_cfa_offset 0
 299 0044 7047     	 bx lr
 300              	 .cfi_endproc
 301              	.LFE1:
 303 0046 00BF     	 .section .text.st_word,"ax",%progbits
 304              	 .align 2
 305              	 .thumb
 306              	 .thumb_func
 308              	st_word:
 309              	.LFB2:
 629:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 630:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 631:../Dave/Generated/FATFS/ff_Src/ff.c **** static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
 632:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 633:../Dave/Generated/FATFS/ff_Src/ff.c **** 	QWORD rv;
 634:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 635:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = ptr[7];
 636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[6];
 637:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[5];
 638:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[4];
 639:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[3];
 640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[2];
 641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[1];
 642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	rv = rv << 8 | ptr[0];
 643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return rv;
 644:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 645:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 646:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 647:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
 648:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
 649:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 310              	 .loc 1 649 0
 311              	 .cfi_startproc
 312              	 
 313              	 
 314              	 
 315 0000 80B4     	 push {r7}
 316              	.LCFI12:
 317              	 .cfi_def_cfa_offset 4
 318              	 .cfi_offset 7,-4
 319 0002 83B0     	 sub sp,sp,#12
 320              	.LCFI13:
 321              	 .cfi_def_cfa_offset 16
 322 0004 00AF     	 add r7,sp,#0
 323              	.LCFI14:
 324              	 .cfi_def_cfa_register 7
 325 0006 7860     	 str r0,[r7,#4]
 326 0008 0B46     	 mov r3,r1
 327 000a 7B80     	 strh r3,[r7,#2]
 650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 328              	 .loc 1 650 0
 329 000c 7B68     	 ldr r3,[r7,#4]
 330 000e 5A1C     	 adds r2,r3,#1
 331 0010 7A60     	 str r2,[r7,#4]
 332 0012 7A88     	 ldrh r2,[r7,#2]
 333 0014 D2B2     	 uxtb r2,r2
 334 0016 1A70     	 strb r2,[r3]
 335 0018 7B88     	 ldrh r3,[r7,#2]
 336 001a 1B0A     	 lsrs r3,r3,#8
 337 001c 7B80     	 strh r3,[r7,#2]
 651:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 338              	 .loc 1 651 0
 339 001e 7B68     	 ldr r3,[r7,#4]
 340 0020 5A1C     	 adds r2,r3,#1
 341 0022 7A60     	 str r2,[r7,#4]
 342 0024 7A88     	 ldrh r2,[r7,#2]
 343 0026 D2B2     	 uxtb r2,r2
 344 0028 1A70     	 strb r2,[r3]
 652:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 345              	 .loc 1 652 0
 346 002a 0C37     	 adds r7,r7,#12
 347              	.LCFI15:
 348              	 .cfi_def_cfa_offset 4
 349 002c BD46     	 mov sp,r7
 350              	.LCFI16:
 351              	 .cfi_def_cfa_register 13
 352              	 
 353 002e 5DF8047B 	 ldr r7,[sp],#4
 354              	.LCFI17:
 355              	 .cfi_restore 7
 356              	 .cfi_def_cfa_offset 0
 357 0032 7047     	 bx lr
 358              	 .cfi_endproc
 359              	.LFE2:
 361              	 .section .text.st_dword,"ax",%progbits
 362              	 .align 2
 363              	 .thumb
 364              	 .thumb_func
 366              	st_dword:
 367              	.LFB3:
 653:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 654:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
 655:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 368              	 .loc 1 655 0
 369              	 .cfi_startproc
 370              	 
 371              	 
 372              	 
 373 0000 80B4     	 push {r7}
 374              	.LCFI18:
 375              	 .cfi_def_cfa_offset 4
 376              	 .cfi_offset 7,-4
 377 0002 83B0     	 sub sp,sp,#12
 378              	.LCFI19:
 379              	 .cfi_def_cfa_offset 16
 380 0004 00AF     	 add r7,sp,#0
 381              	.LCFI20:
 382              	 .cfi_def_cfa_register 7
 383 0006 7860     	 str r0,[r7,#4]
 384 0008 3960     	 str r1,[r7]
 656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 385              	 .loc 1 656 0
 386 000a 7B68     	 ldr r3,[r7,#4]
 387 000c 5A1C     	 adds r2,r3,#1
 388 000e 7A60     	 str r2,[r7,#4]
 389 0010 3A68     	 ldr r2,[r7]
 390 0012 D2B2     	 uxtb r2,r2
 391 0014 1A70     	 strb r2,[r3]
 392 0016 3B68     	 ldr r3,[r7]
 393 0018 1B0A     	 lsrs r3,r3,#8
 394 001a 3B60     	 str r3,[r7]
 657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 395              	 .loc 1 657 0
 396 001c 7B68     	 ldr r3,[r7,#4]
 397 001e 5A1C     	 adds r2,r3,#1
 398 0020 7A60     	 str r2,[r7,#4]
 399 0022 3A68     	 ldr r2,[r7]
 400 0024 D2B2     	 uxtb r2,r2
 401 0026 1A70     	 strb r2,[r3]
 402 0028 3B68     	 ldr r3,[r7]
 403 002a 1B0A     	 lsrs r3,r3,#8
 404 002c 3B60     	 str r3,[r7]
 658:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 405              	 .loc 1 658 0
 406 002e 7B68     	 ldr r3,[r7,#4]
 407 0030 5A1C     	 adds r2,r3,#1
 408 0032 7A60     	 str r2,[r7,#4]
 409 0034 3A68     	 ldr r2,[r7]
 410 0036 D2B2     	 uxtb r2,r2
 411 0038 1A70     	 strb r2,[r3]
 412 003a 3B68     	 ldr r3,[r7]
 413 003c 1B0A     	 lsrs r3,r3,#8
 414 003e 3B60     	 str r3,[r7]
 659:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 415              	 .loc 1 659 0
 416 0040 7B68     	 ldr r3,[r7,#4]
 417 0042 5A1C     	 adds r2,r3,#1
 418 0044 7A60     	 str r2,[r7,#4]
 419 0046 3A68     	 ldr r2,[r7]
 420 0048 D2B2     	 uxtb r2,r2
 421 004a 1A70     	 strb r2,[r3]
 660:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 422              	 .loc 1 660 0
 423 004c 0C37     	 adds r7,r7,#12
 424              	.LCFI21:
 425              	 .cfi_def_cfa_offset 4
 426 004e BD46     	 mov sp,r7
 427              	.LCFI22:
 428              	 .cfi_def_cfa_register 13
 429              	 
 430 0050 5DF8047B 	 ldr r7,[sp],#4
 431              	.LCFI23:
 432              	 .cfi_restore 7
 433              	 .cfi_def_cfa_offset 0
 434 0054 7047     	 bx lr
 435              	 .cfi_endproc
 436              	.LFE3:
 438 0056 00BF     	 .section .text.mem_cpy,"ax",%progbits
 439              	 .align 2
 440              	 .thumb
 441              	 .thumb_func
 443              	mem_cpy:
 444              	.LFB4:
 661:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 662:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
 663:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
 664:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 665:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 666:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 667:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 668:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 669:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 670:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val; val >>= 8;
 672:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*ptr++ = (BYTE)val;
 673:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 674:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 675:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
 676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 678:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 679:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 680:../Dave/Generated/FATFS/ff_Src/ff.c **** /* String functions                                                      */
 681:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 682:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 683:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Copy memory to memory */
 684:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_cpy (void* dst, const void* src, UINT cnt)
 685:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 445              	 .loc 1 685 0
 446              	 .cfi_startproc
 447              	 
 448              	 
 449              	 
 450 0000 80B4     	 push {r7}
 451              	.LCFI24:
 452              	 .cfi_def_cfa_offset 4
 453              	 .cfi_offset 7,-4
 454 0002 87B0     	 sub sp,sp,#28
 455              	.LCFI25:
 456              	 .cfi_def_cfa_offset 32
 457 0004 00AF     	 add r7,sp,#0
 458              	.LCFI26:
 459              	 .cfi_def_cfa_register 7
 460 0006 F860     	 str r0,[r7,#12]
 461 0008 B960     	 str r1,[r7,#8]
 462 000a 7A60     	 str r2,[r7,#4]
 686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 463              	 .loc 1 686 0
 464 000c FB68     	 ldr r3,[r7,#12]
 465 000e 7B61     	 str r3,[r7,#20]
 687:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *s = (const BYTE*)src;
 466              	 .loc 1 687 0
 467 0010 BB68     	 ldr r3,[r7,#8]
 468 0012 3B61     	 str r3,[r7,#16]
 688:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cnt != 0) {
 469              	 .loc 1 689 0
 470 0014 7B68     	 ldr r3,[r7,#4]
 471 0016 002B     	 cmp r3,#0
 472 0018 0DD0     	 beq .L7
 473              	.L9:
 690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
 691:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*d++ = *s++;
 474              	 .loc 1 691 0 discriminator 1
 475 001a 7B69     	 ldr r3,[r7,#20]
 476 001c 5A1C     	 adds r2,r3,#1
 477 001e 7A61     	 str r2,[r7,#20]
 478 0020 3A69     	 ldr r2,[r7,#16]
 479 0022 511C     	 adds r1,r2,#1
 480 0024 3961     	 str r1,[r7,#16]
 481 0026 1278     	 ldrb r2,[r2]
 482 0028 1A70     	 strb r2,[r3]
 692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--cnt);
 483              	 .loc 1 692 0 discriminator 1
 484 002a 7B68     	 ldr r3,[r7,#4]
 485 002c 013B     	 subs r3,r3,#1
 486 002e 7B60     	 str r3,[r7,#4]
 487 0030 7B68     	 ldr r3,[r7,#4]
 488 0032 002B     	 cmp r3,#0
 489 0034 F1D1     	 bne .L9
 490              	.L7:
 693:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 694:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 491              	 .loc 1 694 0
 492 0036 1C37     	 adds r7,r7,#28
 493              	.LCFI27:
 494              	 .cfi_def_cfa_offset 4
 495 0038 BD46     	 mov sp,r7
 496              	.LCFI28:
 497              	 .cfi_def_cfa_register 13
 498              	 
 499 003a 5DF8047B 	 ldr r7,[sp],#4
 500              	.LCFI29:
 501              	 .cfi_restore 7
 502              	 .cfi_def_cfa_offset 0
 503 003e 7047     	 bx lr
 504              	 .cfi_endproc
 505              	.LFE4:
 507              	 .section .text.mem_set,"ax",%progbits
 508              	 .align 2
 509              	 .thumb
 510              	 .thumb_func
 512              	mem_set:
 513              	.LFB5:
 695:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 696:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 697:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill memory block */
 698:../Dave/Generated/FATFS/ff_Src/ff.c **** static void mem_set (void* dst, int val, UINT cnt)
 699:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 514              	 .loc 1 699 0
 515              	 .cfi_startproc
 516              	 
 517              	 
 518              	 
 519 0000 80B4     	 push {r7}
 520              	.LCFI30:
 521              	 .cfi_def_cfa_offset 4
 522              	 .cfi_offset 7,-4
 523 0002 87B0     	 sub sp,sp,#28
 524              	.LCFI31:
 525              	 .cfi_def_cfa_offset 32
 526 0004 00AF     	 add r7,sp,#0
 527              	.LCFI32:
 528              	 .cfi_def_cfa_register 7
 529 0006 F860     	 str r0,[r7,#12]
 530 0008 B960     	 str r1,[r7,#8]
 531 000a 7A60     	 str r2,[r7,#4]
 700:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *d = (BYTE*)dst;
 532              	 .loc 1 700 0
 533 000c FB68     	 ldr r3,[r7,#12]
 534 000e 7B61     	 str r3,[r7,#20]
 535              	.L11:
 701:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 702:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 703:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*d++ = (BYTE)val;
 536              	 .loc 1 703 0 discriminator 1
 537 0010 7B69     	 ldr r3,[r7,#20]
 538 0012 5A1C     	 adds r2,r3,#1
 539 0014 7A61     	 str r2,[r7,#20]
 540 0016 BA68     	 ldr r2,[r7,#8]
 541 0018 D2B2     	 uxtb r2,r2
 542 001a 1A70     	 strb r2,[r3]
 704:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt);
 543              	 .loc 1 704 0 discriminator 1
 544 001c 7B68     	 ldr r3,[r7,#4]
 545 001e 013B     	 subs r3,r3,#1
 546 0020 7B60     	 str r3,[r7,#4]
 547 0022 7B68     	 ldr r3,[r7,#4]
 548 0024 002B     	 cmp r3,#0
 549 0026 F3D1     	 bne .L11
 705:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 550              	 .loc 1 705 0
 551 0028 1C37     	 adds r7,r7,#28
 552              	.LCFI33:
 553              	 .cfi_def_cfa_offset 4
 554 002a BD46     	 mov sp,r7
 555              	.LCFI34:
 556              	 .cfi_def_cfa_register 13
 557              	 
 558 002c 5DF8047B 	 ldr r7,[sp],#4
 559              	.LCFI35:
 560              	 .cfi_restore 7
 561              	 .cfi_def_cfa_offset 0
 562 0030 7047     	 bx lr
 563              	 .cfi_endproc
 564              	.LFE5:
 566 0032 00BF     	 .section .text.mem_cmp,"ax",%progbits
 567              	 .align 2
 568              	 .thumb
 569              	 .thumb_func
 571              	mem_cmp:
 572              	.LFB6:
 706:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 707:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 708:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Compare memory block */
 709:../Dave/Generated/FATFS/ff_Src/ff.c **** static int mem_cmp (const void* dst, const void* src, UINT cnt)	/* ZR:same, NZ:different */
 710:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 573              	 .loc 1 710 0
 574              	 .cfi_startproc
 575              	 
 576              	 
 577              	 
 578 0000 80B4     	 push {r7}
 579              	.LCFI36:
 580              	 .cfi_def_cfa_offset 4
 581              	 .cfi_offset 7,-4
 582 0002 89B0     	 sub sp,sp,#36
 583              	.LCFI37:
 584              	 .cfi_def_cfa_offset 40
 585 0004 00AF     	 add r7,sp,#0
 586              	.LCFI38:
 587              	 .cfi_def_cfa_register 7
 588 0006 F860     	 str r0,[r7,#12]
 589 0008 B960     	 str r1,[r7,#8]
 590 000a 7A60     	 str r2,[r7,#4]
 711:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 591              	 .loc 1 711 0
 592 000c FB68     	 ldr r3,[r7,#12]
 593 000e FB61     	 str r3,[r7,#28]
 594 0010 BB68     	 ldr r3,[r7,#8]
 595 0012 BB61     	 str r3,[r7,#24]
 712:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int r = 0;
 596              	 .loc 1 712 0
 597 0014 0023     	 movs r3,#0
 598 0016 7B61     	 str r3,[r7,#20]
 599              	.L14:
 713:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
 715:../Dave/Generated/FATFS/ff_Src/ff.c **** 		r = *d++ - *s++;
 600              	 .loc 1 715 0 discriminator 2
 601 0018 FB69     	 ldr r3,[r7,#28]
 602 001a 5A1C     	 adds r2,r3,#1
 603 001c FA61     	 str r2,[r7,#28]
 604 001e 1B78     	 ldrb r3,[r3]
 605 0020 1946     	 mov r1,r3
 606 0022 BB69     	 ldr r3,[r7,#24]
 607 0024 5A1C     	 adds r2,r3,#1
 608 0026 BA61     	 str r2,[r7,#24]
 609 0028 1B78     	 ldrb r3,[r3]
 610 002a CB1A     	 subs r3,r1,r3
 611 002c 7B61     	 str r3,[r7,#20]
 716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--cnt && r == 0);
 612              	 .loc 1 716 0 discriminator 2
 613 002e 7B68     	 ldr r3,[r7,#4]
 614 0030 013B     	 subs r3,r3,#1
 615 0032 7B60     	 str r3,[r7,#4]
 616 0034 7B68     	 ldr r3,[r7,#4]
 617 0036 002B     	 cmp r3,#0
 618 0038 02D0     	 beq .L13
 619              	 .loc 1 716 0 is_stmt 0 discriminator 1
 620 003a 7B69     	 ldr r3,[r7,#20]
 621 003c 002B     	 cmp r3,#0
 622 003e EBD0     	 beq .L14
 623              	.L13:
 717:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return r;
 624              	 .loc 1 718 0 is_stmt 1
 625 0040 7B69     	 ldr r3,[r7,#20]
 719:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 626              	 .loc 1 719 0
 627 0042 1846     	 mov r0,r3
 628 0044 2437     	 adds r7,r7,#36
 629              	.LCFI39:
 630              	 .cfi_def_cfa_offset 4
 631 0046 BD46     	 mov sp,r7
 632              	.LCFI40:
 633              	 .cfi_def_cfa_register 13
 634              	 
 635 0048 5DF8047B 	 ldr r7,[sp],#4
 636              	.LCFI41:
 637              	 .cfi_restore 7
 638              	 .cfi_def_cfa_offset 0
 639 004c 7047     	 bx lr
 640              	 .cfi_endproc
 641              	.LFE6:
 643 004e 00BF     	 .section .text.chk_chr,"ax",%progbits
 644              	 .align 2
 645              	 .thumb
 646              	 .thumb_func
 648              	chk_chr:
 649              	.LFB7:
 720:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 721:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 722:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if chr is contained in the string */
 723:../Dave/Generated/FATFS/ff_Src/ff.c **** static int chk_chr (const char* str, int chr)	/* NZ:contained, ZR:not contained */
 724:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 650              	 .loc 1 724 0
 651              	 .cfi_startproc
 652              	 
 653              	 
 654              	 
 655 0000 80B4     	 push {r7}
 656              	.LCFI42:
 657              	 .cfi_def_cfa_offset 4
 658              	 .cfi_offset 7,-4
 659 0002 83B0     	 sub sp,sp,#12
 660              	.LCFI43:
 661              	 .cfi_def_cfa_offset 16
 662 0004 00AF     	 add r7,sp,#0
 663              	.LCFI44:
 664              	 .cfi_def_cfa_register 7
 665 0006 7860     	 str r0,[r7,#4]
 666 0008 3960     	 str r1,[r7]
 725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str && *str != chr) str++;
 667              	 .loc 1 725 0
 668 000a 02E0     	 b .L17
 669              	.L19:
 670              	 .loc 1 725 0 is_stmt 0 discriminator 3
 671 000c 7B68     	 ldr r3,[r7,#4]
 672 000e 0133     	 adds r3,r3,#1
 673 0010 7B60     	 str r3,[r7,#4]
 674              	.L17:
 675              	 .loc 1 725 0 discriminator 1
 676 0012 7B68     	 ldr r3,[r7,#4]
 677 0014 1B78     	 ldrb r3,[r3]
 678 0016 002B     	 cmp r3,#0
 679 0018 05D0     	 beq .L18
 680              	 .loc 1 725 0 discriminator 2
 681 001a 7B68     	 ldr r3,[r7,#4]
 682 001c 1B78     	 ldrb r3,[r3]
 683 001e 1A46     	 mov r2,r3
 684 0020 3B68     	 ldr r3,[r7]
 685 0022 9A42     	 cmp r2,r3
 686 0024 F2D1     	 bne .L19
 687              	.L18:
 726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return *str;
 688              	 .loc 1 726 0 is_stmt 1
 689 0026 7B68     	 ldr r3,[r7,#4]
 690 0028 1B78     	 ldrb r3,[r3]
 727:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 691              	 .loc 1 727 0
 692 002a 1846     	 mov r0,r3
 693 002c 0C37     	 adds r7,r7,#12
 694              	.LCFI45:
 695              	 .cfi_def_cfa_offset 4
 696 002e BD46     	 mov sp,r7
 697              	.LCFI46:
 698              	 .cfi_def_cfa_register 13
 699              	 
 700 0030 5DF8047B 	 ldr r7,[sp],#4
 701              	.LCFI47:
 702              	 .cfi_restore 7
 703              	 .cfi_def_cfa_offset 0
 704 0034 7047     	 bx lr
 705              	 .cfi_endproc
 706              	.LFE7:
 708 0036 00BF     	 .section .text.dbc_1st,"ax",%progbits
 709              	 .align 2
 710              	 .thumb
 711              	 .thumb_func
 713              	dbc_1st:
 714              	.LFB8:
 728:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 729:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 730:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the byte is DBC 1st byte */
 731:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_1st (BYTE c)
 732:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 715              	 .loc 1 732 0
 716              	 .cfi_startproc
 717              	 
 718              	 
 719              	 
 720 0000 80B4     	 push {r7}
 721              	.LCFI48:
 722              	 .cfi_def_cfa_offset 4
 723              	 .cfi_offset 7,-4
 724 0002 83B0     	 sub sp,sp,#12
 725              	.LCFI49:
 726              	 .cfi_def_cfa_offset 16
 727 0004 00AF     	 add r7,sp,#0
 728              	.LCFI50:
 729              	 .cfi_def_cfa_register 7
 730 0006 0346     	 mov r3,r0
 731 0008 FB71     	 strb r3,[r7,#7]
 733:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[0]) {
 735:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;					/* 1st byte range 1 */
 736:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;	/* 1st byte range 2 */
 737:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 738:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[0]) {
 740:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[1]) return 1;
 741:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
 742:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 743:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 744:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 732              	 .loc 1 744 0
 733 000a FB79     	 ldrb r3,[r7,#7]
 734 000c 002B     	 cmp r3,#0
 735 000e 01D0     	 beq .L22
 736              	 .loc 1 744 0 is_stmt 0 discriminator 1
 737 0010 0023     	 movs r3,#0
 738 0012 00E0     	 b .L23
 739              	.L22:
 745:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 740              	 .loc 1 746 0 is_stmt 1
 741 0014 0023     	 movs r3,#0
 742              	.L23:
 747:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 743              	 .loc 1 747 0
 744 0016 1846     	 mov r0,r3
 745 0018 0C37     	 adds r7,r7,#12
 746              	.LCFI51:
 747              	 .cfi_def_cfa_offset 4
 748 001a BD46     	 mov sp,r7
 749              	.LCFI52:
 750              	 .cfi_def_cfa_register 13
 751              	 
 752 001c 5DF8047B 	 ldr r7,[sp],#4
 753              	.LCFI53:
 754              	 .cfi_restore 7
 755              	 .cfi_def_cfa_offset 0
 756 0020 7047     	 bx lr
 757              	 .cfi_endproc
 758              	.LFE8:
 760 0022 00BF     	 .section .text.dbc_2nd,"ax",%progbits
 761              	 .align 2
 762              	 .thumb
 763              	 .thumb_func
 765              	dbc_2nd:
 766              	.LFB9:
 748:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 749:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 750:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Test if the byte is DBC 2nd byte */
 751:../Dave/Generated/FATFS/ff_Src/ff.c **** static int dbc_2nd (BYTE c)
 752:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 767              	 .loc 1 752 0
 768              	 .cfi_startproc
 769              	 
 770              	 
 771              	 
 772 0000 80B4     	 push {r7}
 773              	.LCFI54:
 774              	 .cfi_def_cfa_offset 4
 775              	 .cfi_offset 7,-4
 776 0002 83B0     	 sub sp,sp,#12
 777              	.LCFI55:
 778              	 .cfi_def_cfa_offset 16
 779 0004 00AF     	 add r7,sp,#0
 780              	.LCFI56:
 781              	 .cfi_def_cfa_register 7
 782 0006 0346     	 mov r3,r0
 783 0008 FB71     	 strb r3,[r7,#7]
 753:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0		/* Variable code page */
 754:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (DbcTbl && c >= DbcTbl[4]) {
 755:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;					/* 2nd byte range 1 */
 756:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;	/* 2nd byte range 2 */
 757:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;	/* 2nd byte range 3 */
 758:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 759:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE >= 900	/* DBCS fixed code page */
 760:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= DbcTbl[4]) {
 761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= DbcTbl[5]) return 1;
 762:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
 763:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
 764:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 765:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* SBCS fixed code page */
 766:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c != 0) return 0;	/* Always false */
 784              	 .loc 1 766 0
 785 000a FB79     	 ldrb r3,[r7,#7]
 786 000c 002B     	 cmp r3,#0
 787 000e 01D0     	 beq .L25
 788              	 .loc 1 766 0 is_stmt 0 discriminator 1
 789 0010 0023     	 movs r3,#0
 790 0012 00E0     	 b .L26
 791              	.L25:
 767:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 768:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
 792              	 .loc 1 768 0 is_stmt 1
 793 0014 0023     	 movs r3,#0
 794              	.L26:
 769:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 795              	 .loc 1 769 0
 796 0016 1846     	 mov r0,r3
 797 0018 0C37     	 adds r7,r7,#12
 798              	.LCFI57:
 799              	 .cfi_def_cfa_offset 4
 800 001a BD46     	 mov sp,r7
 801              	.LCFI58:
 802              	 .cfi_def_cfa_register 13
 803              	 
 804 001c 5DF8047B 	 ldr r7,[sp],#4
 805              	.LCFI59:
 806              	 .cfi_restore 7
 807              	 .cfi_def_cfa_offset 0
 808 0020 7047     	 bx lr
 809              	 .cfi_endproc
 810              	.LFE9:
 812 0022 00BF     	 .section .text.chk_lock,"ax",%progbits
 813              	 .align 2
 814              	 .thumb
 815              	 .thumb_func
 817              	chk_lock:
 818              	.LFB10:
 770:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 771:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 772:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
 773:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 774:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a Unicode code point from the TCHAR string in defined API encodeing */
 775:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0x
 776:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
 777:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 778:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 779:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
 780:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p = *str;
 781:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 782:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
 783:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 784:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 785:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = *p++;	/* Get a unit */
 786:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(uc)) {	/* Surrogate? */
 787:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = *p++;		/* Get low surrogate */
 788:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateH(uc) || !IsSurrogateL(wc)) return 0xFFFFFFFF;	/* Wrong surrogate? */
 789:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = uc << 16 | wc;
 790:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 791:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 792:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
 793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 794:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nf;
 795:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 796:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (BYTE)*p++;	/* Get an encoding unit */
 797:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc & 0x80) {	/* Multiple byte code? */
 798:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((uc & 0xE0) == 0xC0) {	/* 2-byte sequence? */
 799:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc &= 0x1F; nf = 1;
 800:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
 801:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((uc & 0xF0) == 0xE0) {	/* 3-byte sequence? */
 802:../Dave/Generated/FATFS/ff_Src/ff.c **** 				uc &= 0x0F; nf = 2;
 803:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
 804:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((uc & 0xF8) == 0xF0) {	/* 4-byte sequence? */
 805:../Dave/Generated/FATFS/ff_Src/ff.c **** 					uc &= 0x07; nf = 3;
 806:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* Wrong sequence */
 807:../Dave/Generated/FATFS/ff_Src/ff.c **** 					return 0xFFFFFFFF;
 808:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
 809:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 810:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 811:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Get trailing bytes */
 812:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b = (BYTE)*p++;
 813:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((b & 0xC0) != 0x80) return 0xFFFFFFFF;	/* Wrong sequence? */
 814:../Dave/Generated/FATFS/ff_Src/ff.c **** 			uc = uc << 6 | (b & 0x3F);
 815:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (--nf != 0);
 816:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc < 0x80 || IsSurrogate(uc) || uc >= 0x110000) return 0xFFFFFFFF;	/* Wrong code? */
 817:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a
 818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 819:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 820:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
 821:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = (TCHAR)*p++;	/* Get a unit */
 822:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x110000 || IsSurrogate(uc)) return 0xFFFFFFFF;	/* Wrong code? */
 823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (uc >= 0x010000) uc = 0xD800DC00 | ((uc - 0x10000) << 6 & 0x3FF0000) | (uc & 0x3FF);	/* Make a 
 824:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 825:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* ANSI/OEM input */
 826:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
 827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (BYTE)*p++;			/* Get a byte */
 830:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 831:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b = (BYTE)*p++;			/* Get 2nd byte */
 832:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dbc_2nd(b)) return 0xFFFFFFFF;	/* Invalid code? */
 833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (wc << 8) + b;		/* Make a DBC */
 834:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 835:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc != 0) {
 836:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 837:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 838:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 839:../Dave/Generated/FATFS/ff_Src/ff.c **** 	uc = wc;
 840:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 841:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 842:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*str = p;	/* Next read pointer */
 843:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return uc;
 844:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 845:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 846:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 847:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Output a TCHAR string in defined API encoding */
 848:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encod
 849:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
 850:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buf,	/* Output buffer */
 851:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT szb	/* Size of the buffer */
 852:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 853:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 854:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	/* UTF-16 output */
 855:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
 856:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(chr >> 16);
 858:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)chr;
 859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs == 0) {	/* Single encoding unit? */
 860:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1 || IsSurrogate(wc)) return 0;	/* Buffer overflow or wrong code? */
 861:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = wc;
 862:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 864:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 2 || !IsSurrogateH(hs) || !IsSurrogateL(wc)) return 0;	/* Buffer overflow or wrong surro
 865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = hs;
 866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = wc;
 867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 2;
 868:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 869:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 output */
 870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 871:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x80) {	/* Single byte code? */
 873:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 1) return 0;	/* Buffer overflow? */
 874:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf = (TCHAR)chr;
 875:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 1;
 876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 877:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x800) {	/* 2-byte sequence? */
 878:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;	/* Buffer overflow? */
 879:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xC0 | (chr >> 6 & 0x1F));
 880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr < 0x10000) {	/* 3-byte sequence? */
 884:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 3 || IsSurrogate(chr)) return 0;	/* Buffer overflow or wrong code? */
 885:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0xE0 | (chr >> 12 & 0x0F));
 886:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 887:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 888:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 3;
 889:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 890:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* 4-byte sequence */
 891:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 4) return 0;	/* Buffer overflow? */
 892:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 893:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 895:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (hc | chr) + 0x10000;
 896:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0xF0 | (chr >> 18 & 0x07));
 897:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 12 & 0x3F));
 898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 6 & 0x3F));
 899:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)(0x80 | (chr >> 0 & 0x3F));
 900:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 4;
 901:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 902:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 output */
 903:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD hc;
 904:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 905:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb < 1) return 0;	/* Buffer overflow? */
 906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x10000) {	/* Out of BMP? */
 907:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hc = ((chr & 0xFFFF0000) - 0xD8000000) >> 6;	/* Get high 10 bits */
 908:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (chr & 0xFFFF) - 0xDC00;					/* Get low 10 bits */
 909:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hc >= 0x100000 || chr >= 0x400) return 0;	/* Wrong surrogate? */
 910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (hc | chr) + 0x10000;
 911:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)chr;
 913:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 914:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 915:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* ANSI/OEM output */
 916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
 917:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 918:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(chr, CODEPAGE);
 919:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {	/* Is this a DBC? */
 920:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (szb < 2) return 0;
 921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 922:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 923:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 2;
 924:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 925:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0 || szb < 1) return 0;	/* Invalid char or buffer overflow? */
 926:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*buf++ = (TCHAR)wc;					/* Store the character */
 927:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
 928:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 929:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 930:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
 931:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 932:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 933:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
 934:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 935:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Request/Release grant to access the volume                            */
 936:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 937:../Dave/Generated/FATFS/ff_Src/ff.c **** static int lock_fs (		/* 1:Ok, 0:timeout */
 938:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
 939:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 940:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 941:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ff_req_grant(fs->sobj);
 942:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 943:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 945:../Dave/Generated/FATFS/ff_Src/ff.c **** static void unlock_fs (
 946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
 947:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res		/* Result code to be returned */
 948:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 949:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 951:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_rel_grant(fs->sobj);
 952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 953:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 954:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 955:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
 956:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 957:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 958:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 959:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
 960:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 961:../Dave/Generated/FATFS/ff_Src/ff.c **** /* File lock control functions                                           */
 962:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
 963:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 964:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT chk_lock (	/* Check if the file can be accessed */
 965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Directory object pointing the file to be checked */
 966:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc			/* Desired access type (0:Read mode open, 1:Write mode open, 2:Delete or rename) */
 967:../Dave/Generated/FATFS/ff_Src/ff.c **** )
 968:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 819              	 .loc 1 968 0
 820              	 .cfi_startproc
 821              	 
 822              	 
 823              	 
 824 0000 80B4     	 push {r7}
 825              	.LCFI60:
 826              	 .cfi_def_cfa_offset 4
 827              	 .cfi_offset 7,-4
 828 0002 85B0     	 sub sp,sp,#20
 829              	.LCFI61:
 830              	 .cfi_def_cfa_offset 24
 831 0004 00AF     	 add r7,sp,#0
 832              	.LCFI62:
 833              	 .cfi_def_cfa_register 7
 834 0006 7860     	 str r0,[r7,#4]
 835 0008 3960     	 str r1,[r7]
 969:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, be;
 970:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 971:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Search open object table for the object */
 972:../Dave/Generated/FATFS/ff_Src/ff.c **** 	be = 0;
 836              	 .loc 1 972 0
 837 000a 0023     	 movs r3,#0
 838 000c BB60     	 str r3,[r7,#8]
 973:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 839              	 .loc 1 973 0
 840 000e 0023     	 movs r3,#0
 841 0010 FB60     	 str r3,[r7,#12]
 842 0012 28E0     	 b .L28
 843              	.L32:
 974:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 844              	 .loc 1 974 0
 845 0014 264A     	 ldr r2,.L40
 846 0016 FB68     	 ldr r3,[r7,#12]
 847 0018 1B01     	 lsls r3,r3,#4
 848 001a 1344     	 add r3,r3,r2
 849 001c 1B68     	 ldr r3,[r3]
 850 001e 002B     	 cmp r3,#0
 851 0020 1CD0     	 beq .L29
 975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 852              	 .loc 1 975 0
 853 0022 234A     	 ldr r2,.L40
 854 0024 FB68     	 ldr r3,[r7,#12]
 855 0026 1B01     	 lsls r3,r3,#4
 856 0028 1344     	 add r3,r3,r2
 857 002a 1A68     	 ldr r2,[r3]
 858 002c 7B68     	 ldr r3,[r7,#4]
 859 002e 1B68     	 ldr r3,[r3]
 860 0030 9A42     	 cmp r2,r3
 861 0032 15D1     	 bne .L30
 976:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 862              	 .loc 1 976 0 discriminator 1
 863 0034 1E4A     	 ldr r2,.L40
 864 0036 FB68     	 ldr r3,[r7,#12]
 865 0038 1B01     	 lsls r3,r3,#4
 866 003a 1344     	 add r3,r3,r2
 867 003c 5A68     	 ldr r2,[r3,#4]
 868 003e 7B68     	 ldr r3,[r7,#4]
 869 0040 9B68     	 ldr r3,[r3,#8]
 975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matches with an open object */
 870              	 .loc 1 975 0 discriminator 1
 871 0042 9A42     	 cmp r2,r3
 872 0044 0CD1     	 bne .L30
 977:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].ofs == dp->dptr) break;
 873              	 .loc 1 977 0
 874 0046 1A4A     	 ldr r2,.L40
 875 0048 FB68     	 ldr r3,[r7,#12]
 876 004a 1B01     	 lsls r3,r3,#4
 877 004c 1344     	 add r3,r3,r2
 878 004e 0833     	 adds r3,r3,#8
 879 0050 1A68     	 ldr r2,[r3]
 880 0052 7B68     	 ldr r3,[r7,#4]
 881 0054 5B69     	 ldr r3,[r3,#20]
 976:../Dave/Generated/FATFS/ff_Src/ff.c **** 				Files[i].clu == dp->obj.sclust &&
 882              	 .loc 1 976 0
 883 0056 9A42     	 cmp r2,r3
 884 0058 02D1     	 bne .L30
 885              	 .loc 1 977 0
 886 005a 07E0     	 b .L31
 887              	.L29:
 978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* Blank entry */
 979:../Dave/Generated/FATFS/ff_Src/ff.c **** 			be = 1;
 888              	 .loc 1 979 0
 889 005c 0123     	 movs r3,#1
 890 005e BB60     	 str r3,[r7,#8]
 891              	.L30:
 973:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 892              	 .loc 1 973 0 discriminator 2
 893 0060 FB68     	 ldr r3,[r7,#12]
 894 0062 0133     	 adds r3,r3,#1
 895 0064 FB60     	 str r3,[r7,#12]
 896              	.L28:
 973:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs) {	/* Existing entry */
 897              	 .loc 1 973 0 is_stmt 0 discriminator 1
 898 0066 FB68     	 ldr r3,[r7,#12]
 899 0068 002B     	 cmp r3,#0
 900 006a D3D0     	 beq .L32
 901              	.L31:
 980:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 981:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {	/* The object has not been opened */
 902              	 .loc 1 982 0 is_stmt 1
 903 006c FB68     	 ldr r3,[r7,#12]
 904 006e 012B     	 cmp r3,#1
 905 0070 09D1     	 bne .L33
 983:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return (!be && acc != 2) ? FR_TOO_MANY_OPEN_FILES : FR_OK;	/* Is there a blank entry for new obje
 906              	 .loc 1 983 0
 907 0072 BB68     	 ldr r3,[r7,#8]
 908 0074 002B     	 cmp r3,#0
 909 0076 04D1     	 bne .L34
 910              	 .loc 1 983 0 is_stmt 0 discriminator 1
 911 0078 3B68     	 ldr r3,[r7]
 912 007a 022B     	 cmp r3,#2
 913 007c 01D0     	 beq .L34
 914              	 .loc 1 983 0 discriminator 3
 915 007e 1223     	 movs r3,#18
 916 0080 10E0     	 b .L36
 917              	.L34:
 918              	 .loc 1 983 0 discriminator 4
 919 0082 0023     	 movs r3,#0
 920 0084 0EE0     	 b .L36
 921              	.L33:
 984:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 985:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 986:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The object was opened. Reject any open against writing file and all write mode open */
 987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (acc != 0 || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 922              	 .loc 1 987 0 is_stmt 1
 923 0086 3B68     	 ldr r3,[r7]
 924 0088 002B     	 cmp r3,#0
 925 008a 08D1     	 bne .L37
 926              	 .loc 1 987 0 is_stmt 0 discriminator 2
 927 008c 084A     	 ldr r2,.L40
 928 008e FB68     	 ldr r3,[r7,#12]
 929 0090 1B01     	 lsls r3,r3,#4
 930 0092 1344     	 add r3,r3,r2
 931 0094 0833     	 adds r3,r3,#8
 932 0096 9B88     	 ldrh r3,[r3,#4]
 933 0098 B3F5807F 	 cmp r3,#256
 934 009c 01D1     	 bne .L38
 935              	.L37:
 936              	 .loc 1 987 0 discriminator 3
 937 009e 1023     	 movs r3,#16
 938 00a0 00E0     	 b .L36
 939              	.L38:
 940              	 .loc 1 987 0 discriminator 4
 941 00a2 0023     	 movs r3,#0
 942              	.L36:
 988:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 943              	 .loc 1 988 0 is_stmt 1
 944 00a4 1846     	 mov r0,r3
 945 00a6 1437     	 adds r7,r7,#20
 946              	.LCFI63:
 947              	 .cfi_def_cfa_offset 4
 948 00a8 BD46     	 mov sp,r7
 949              	.LCFI64:
 950              	 .cfi_def_cfa_register 13
 951              	 
 952 00aa 5DF8047B 	 ldr r7,[sp],#4
 953              	.LCFI65:
 954              	 .cfi_restore 7
 955              	 .cfi_def_cfa_offset 0
 956 00ae 7047     	 bx lr
 957              	.L41:
 958              	 .align 2
 959              	.L40:
 960 00b0 00000000 	 .word Files
 961              	 .cfi_endproc
 962              	.LFE10:
 964              	 .section .text.enq_lock,"ax",%progbits
 965              	 .align 2
 966              	 .thumb
 967              	 .thumb_func
 969              	enq_lock:
 970              	.LFB11:
 989:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 990:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 991:../Dave/Generated/FATFS/ff_Src/ff.c **** static int enq_lock (void)	/* Check if an entry is available for a new object */
 992:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 971              	 .loc 1 992 0
 972              	 .cfi_startproc
 973              	 
 974              	 
 975              	 
 976 0000 80B4     	 push {r7}
 977              	.LCFI66:
 978              	 .cfi_def_cfa_offset 4
 979              	 .cfi_offset 7,-4
 980 0002 83B0     	 sub sp,sp,#12
 981              	.LCFI67:
 982              	 .cfi_def_cfa_offset 16
 983 0004 00AF     	 add r7,sp,#0
 984              	.LCFI68:
 985              	 .cfi_def_cfa_register 7
 993:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
 994:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 995:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 986              	 .loc 1 995 0
 987 0006 0023     	 movs r3,#0
 988 0008 7B60     	 str r3,[r7,#4]
 989 000a 02E0     	 b .L43
 990              	.L45:
 991              	 .loc 1 995 0 is_stmt 0 discriminator 4
 992 000c 7B68     	 ldr r3,[r7,#4]
 993 000e 0133     	 adds r3,r3,#1
 994 0010 7B60     	 str r3,[r7,#4]
 995              	.L43:
 996              	 .loc 1 995 0 discriminator 1
 997 0012 7B68     	 ldr r3,[r7,#4]
 998 0014 002B     	 cmp r3,#0
 999 0016 06D1     	 bne .L44
 1000              	 .loc 1 995 0 discriminator 3
 1001 0018 094A     	 ldr r2,.L47
 1002 001a 7B68     	 ldr r3,[r7,#4]
 1003 001c 1B01     	 lsls r3,r3,#4
 1004 001e 1344     	 add r3,r3,r2
 1005 0020 1B68     	 ldr r3,[r3]
 1006 0022 002B     	 cmp r3,#0
 1007 0024 F2D1     	 bne .L45
 1008              	.L44:
 996:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (i == FF_FS_LOCK) ? 0 : 1;
 1009              	 .loc 1 996 0 is_stmt 1
 1010 0026 7B68     	 ldr r3,[r7,#4]
 1011 0028 012B     	 cmp r3,#1
 1012 002a 14BF     	 ite ne
 1013 002c 0123     	 movne r3,#1
 1014 002e 0023     	 moveq r3,#0
 1015 0030 DBB2     	 uxtb r3,r3
 997:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1016              	 .loc 1 997 0
 1017 0032 1846     	 mov r0,r3
 1018 0034 0C37     	 adds r7,r7,#12
 1019              	.LCFI69:
 1020              	 .cfi_def_cfa_offset 4
 1021 0036 BD46     	 mov sp,r7
 1022              	.LCFI70:
 1023              	 .cfi_def_cfa_register 13
 1024              	 
 1025 0038 5DF8047B 	 ldr r7,[sp],#4
 1026              	.LCFI71:
 1027              	 .cfi_restore 7
 1028              	 .cfi_def_cfa_offset 0
 1029 003c 7047     	 bx lr
 1030              	.L48:
 1031 003e 00BF     	 .align 2
 1032              	.L47:
 1033 0040 00000000 	 .word Files
 1034              	 .cfi_endproc
 1035              	.LFE11:
 1037              	 .section .text.inc_lock,"ax",%progbits
 1038              	 .align 2
 1039              	 .thumb
 1040              	 .thumb_func
 1042              	inc_lock:
 1043              	.LFB12:
 998:../Dave/Generated/FATFS/ff_Src/ff.c **** 
 999:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1000:../Dave/Generated/FATFS/ff_Src/ff.c **** static UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
1001:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,	/* Directory object pointing the file to register or increment */
1002:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
1003:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1004:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1044              	 .loc 1 1004 0
 1045              	 .cfi_startproc
 1046              	 
 1047              	 
 1048              	 
 1049 0000 80B4     	 push {r7}
 1050              	.LCFI72:
 1051              	 .cfi_def_cfa_offset 4
 1052              	 .cfi_offset 7,-4
 1053 0002 85B0     	 sub sp,sp,#20
 1054              	.LCFI73:
 1055              	 .cfi_def_cfa_offset 24
 1056 0004 00AF     	 add r7,sp,#0
 1057              	.LCFI74:
 1058              	 .cfi_def_cfa_register 7
 1059 0006 7860     	 str r0,[r7,#4]
 1060 0008 3960     	 str r1,[r7]
1005:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1006:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1007:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {	/* Find the object */
 1061              	 .loc 1 1008 0
 1062 000a 0023     	 movs r3,#0
 1063 000c FB60     	 str r3,[r7,#12]
 1064 000e 1EE0     	 b .L50
 1065              	.L53:
1009:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs
 1066              	 .loc 1 1009 0
 1067 0010 3F4A     	 ldr r2,.L63
 1068 0012 FB68     	 ldr r3,[r7,#12]
 1069 0014 1B01     	 lsls r3,r3,#4
 1070 0016 1344     	 add r3,r3,r2
 1071 0018 1A68     	 ldr r2,[r3]
 1072 001a 7B68     	 ldr r3,[r7,#4]
 1073 001c 1B68     	 ldr r3,[r3]
 1074 001e 9A42     	 cmp r2,r3
 1075 0020 12D1     	 bne .L51
1010:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 && Files[i].clu == dp->obj.sclust
 1076              	 .loc 1 1010 0
 1077 0022 3B4A     	 ldr r2,.L63
 1078 0024 FB68     	 ldr r3,[r7,#12]
 1079 0026 1B01     	 lsls r3,r3,#4
 1080 0028 1344     	 add r3,r3,r2
 1081 002a 5A68     	 ldr r2,[r3,#4]
 1082 002c 7B68     	 ldr r3,[r7,#4]
 1083 002e 9B68     	 ldr r3,[r3,#8]
 1084 0030 9A42     	 cmp r2,r3
 1085 0032 09D1     	 bne .L51
1011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 && Files[i].ofs == dp->dptr) break;
 1086              	 .loc 1 1011 0
 1087 0034 364A     	 ldr r2,.L63
 1088 0036 FB68     	 ldr r3,[r7,#12]
 1089 0038 1B01     	 lsls r3,r3,#4
 1090 003a 1344     	 add r3,r3,r2
 1091 003c 0833     	 adds r3,r3,#8
 1092 003e 1A68     	 ldr r2,[r3]
 1093 0040 7B68     	 ldr r3,[r7,#4]
 1094 0042 5B69     	 ldr r3,[r3,#20]
 1095 0044 9A42     	 cmp r2,r3
 1096 0046 05D0     	 beq .L52
 1097              	.L51:
1008:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs
 1098              	 .loc 1 1008 0 discriminator 2
 1099 0048 FB68     	 ldr r3,[r7,#12]
 1100 004a 0133     	 adds r3,r3,#1
 1101 004c FB60     	 str r3,[r7,#12]
 1102              	.L50:
1008:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == dp->obj.fs
 1103              	 .loc 1 1008 0 is_stmt 0 discriminator 1
 1104 004e FB68     	 ldr r3,[r7,#12]
 1105 0050 002B     	 cmp r3,#0
 1106 0052 DDD0     	 beq .L53
 1107              	.L52:
1012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1013:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == FF_FS_LOCK) {				/* Not opened. Register it as new. */
 1108              	 .loc 1 1014 0 is_stmt 1
 1109 0054 FB68     	 ldr r3,[r7,#12]
 1110 0056 012B     	 cmp r3,#1
 1111 0058 31D1     	 bne .L54
1015:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < FF_FS_LOCK && Files[i].fs; i++) ;
 1112              	 .loc 1 1015 0
 1113 005a 0023     	 movs r3,#0
 1114 005c FB60     	 str r3,[r7,#12]
 1115 005e 02E0     	 b .L55
 1116              	.L57:
 1117              	 .loc 1 1015 0 is_stmt 0 discriminator 4
 1118 0060 FB68     	 ldr r3,[r7,#12]
 1119 0062 0133     	 adds r3,r3,#1
 1120 0064 FB60     	 str r3,[r7,#12]
 1121              	.L55:
 1122              	 .loc 1 1015 0 discriminator 1
 1123 0066 FB68     	 ldr r3,[r7,#12]
 1124 0068 002B     	 cmp r3,#0
 1125 006a 06D1     	 bne .L56
 1126              	 .loc 1 1015 0 discriminator 3
 1127 006c 284A     	 ldr r2,.L63
 1128 006e FB68     	 ldr r3,[r7,#12]
 1129 0070 1B01     	 lsls r3,r3,#4
 1130 0072 1344     	 add r3,r3,r2
 1131 0074 1B68     	 ldr r3,[r3]
 1132 0076 002B     	 cmp r3,#0
 1133 0078 F2D1     	 bne .L57
 1134              	.L56:
1016:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == FF_FS_LOCK) return 0;	/* No free entry to register (int err) */
 1135              	 .loc 1 1016 0 is_stmt 1
 1136 007a FB68     	 ldr r3,[r7,#12]
 1137 007c 012B     	 cmp r3,#1
 1138 007e 01D1     	 bne .L58
 1139              	 .loc 1 1016 0 is_stmt 0 discriminator 1
 1140 0080 0023     	 movs r3,#0
 1141 0082 3FE0     	 b .L59
 1142              	.L58:
1017:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].fs = dp->obj.fs;
 1143              	 .loc 1 1017 0 is_stmt 1
 1144 0084 7B68     	 ldr r3,[r7,#4]
 1145 0086 1A68     	 ldr r2,[r3]
 1146 0088 2149     	 ldr r1,.L63
 1147 008a FB68     	 ldr r3,[r7,#12]
 1148 008c 1B01     	 lsls r3,r3,#4
 1149 008e 0B44     	 add r3,r3,r1
 1150 0090 1A60     	 str r2,[r3]
1018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].clu = dp->obj.sclust;
 1151              	 .loc 1 1018 0
 1152 0092 7B68     	 ldr r3,[r7,#4]
 1153 0094 9A68     	 ldr r2,[r3,#8]
 1154 0096 1E49     	 ldr r1,.L63
 1155 0098 FB68     	 ldr r3,[r7,#12]
 1156 009a 1B01     	 lsls r3,r3,#4
 1157 009c 0B44     	 add r3,r3,r1
 1158 009e 5A60     	 str r2,[r3,#4]
1019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ofs = dp->dptr;
 1159              	 .loc 1 1019 0
 1160 00a0 7B68     	 ldr r3,[r7,#4]
 1161 00a2 5A69     	 ldr r2,[r3,#20]
 1162 00a4 1A49     	 ldr r1,.L63
 1163 00a6 FB68     	 ldr r3,[r7,#12]
 1164 00a8 1B01     	 lsls r3,r3,#4
 1165 00aa 0B44     	 add r3,r3,r1
 1166 00ac 0833     	 adds r3,r3,#8
 1167 00ae 1A60     	 str r2,[r3]
1020:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = 0;
 1168              	 .loc 1 1020 0
 1169 00b0 174A     	 ldr r2,.L63
 1170 00b2 FB68     	 ldr r3,[r7,#12]
 1171 00b4 1B01     	 lsls r3,r3,#4
 1172 00b6 1344     	 add r3,r3,r2
 1173 00b8 0833     	 adds r3,r3,#8
 1174 00ba 0022     	 movs r2,#0
 1175 00bc 9A80     	 strh r2,[r3,#4]
 1176              	.L54:
1021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1022:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1023:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (acc >= 1 && Files[i].ctr) return 0;	/* Access violation (int err) */
 1177              	 .loc 1 1023 0
 1178 00be 3B68     	 ldr r3,[r7]
 1179 00c0 002B     	 cmp r3,#0
 1180 00c2 09DD     	 ble .L60
 1181              	 .loc 1 1023 0 is_stmt 0 discriminator 1
 1182 00c4 124A     	 ldr r2,.L63
 1183 00c6 FB68     	 ldr r3,[r7,#12]
 1184 00c8 1B01     	 lsls r3,r3,#4
 1185 00ca 1344     	 add r3,r3,r2
 1186 00cc 0833     	 adds r3,r3,#8
 1187 00ce 9B88     	 ldrh r3,[r3,#4]
 1188 00d0 002B     	 cmp r3,#0
 1189 00d2 01D0     	 beq .L60
 1190              	 .loc 1 1023 0 discriminator 2
 1191 00d4 0023     	 movs r3,#0
 1192 00d6 15E0     	 b .L59
 1193              	.L60:
1024:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 1194              	 .loc 1 1025 0 is_stmt 1
 1195 00d8 3B68     	 ldr r3,[r7]
 1196 00da 002B     	 cmp r3,#0
 1197 00dc 08D1     	 bne .L61
 1198              	 .loc 1 1025 0 is_stmt 0 discriminator 1
 1199 00de 0C4A     	 ldr r2,.L63
 1200 00e0 FB68     	 ldr r3,[r7,#12]
 1201 00e2 1B01     	 lsls r3,r3,#4
 1202 00e4 1344     	 add r3,r3,r2
 1203 00e6 0833     	 adds r3,r3,#8
 1204 00e8 9B88     	 ldrh r3,[r3,#4]
 1205 00ea 0133     	 adds r3,r3,#1
 1206 00ec 9AB2     	 uxth r2,r3
 1207 00ee 01E0     	 b .L62
 1208              	.L61:
 1209              	 .loc 1 1025 0 discriminator 2
 1210 00f0 4FF48072 	 mov r2,#256
 1211              	.L62:
 1212              	 .loc 1 1025 0 discriminator 4
 1213 00f4 0649     	 ldr r1,.L63
 1214 00f6 FB68     	 ldr r3,[r7,#12]
 1215 00f8 1B01     	 lsls r3,r3,#4
 1216 00fa 0B44     	 add r3,r3,r1
 1217 00fc 0833     	 adds r3,r3,#8
 1218 00fe 9A80     	 strh r2,[r3,#4]
1026:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return i + 1;	/* Index number origin from 1 */
 1219              	 .loc 1 1027 0 is_stmt 1 discriminator 4
 1220 0100 FB68     	 ldr r3,[r7,#12]
 1221 0102 0133     	 adds r3,r3,#1
 1222              	.L59:
1028:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1223              	 .loc 1 1028 0
 1224 0104 1846     	 mov r0,r3
 1225 0106 1437     	 adds r7,r7,#20
 1226              	.LCFI75:
 1227              	 .cfi_def_cfa_offset 4
 1228 0108 BD46     	 mov sp,r7
 1229              	.LCFI76:
 1230              	 .cfi_def_cfa_register 13
 1231              	 
 1232 010a 5DF8047B 	 ldr r7,[sp],#4
 1233              	.LCFI77:
 1234              	 .cfi_restore 7
 1235              	 .cfi_def_cfa_offset 0
 1236 010e 7047     	 bx lr
 1237              	.L64:
 1238              	 .align 2
 1239              	.L63:
 1240 0110 00000000 	 .word Files
 1241              	 .cfi_endproc
 1242              	.LFE12:
 1244              	 .section .text.dec_lock,"ax",%progbits
 1245              	 .align 2
 1246              	 .thumb
 1247              	 .thumb_func
 1249              	dec_lock:
 1250              	.LFB13:
1029:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1030:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1031:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dec_lock (	/* Decrement object open counter */
1032:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i			/* Semaphore index (1..) */
1033:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1034:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1251              	 .loc 1 1034 0
 1252              	 .cfi_startproc
 1253              	 
 1254              	 
 1255              	 
 1256 0000 80B4     	 push {r7}
 1257              	.LCFI78:
 1258              	 .cfi_def_cfa_offset 4
 1259              	 .cfi_offset 7,-4
 1260 0002 85B0     	 sub sp,sp,#20
 1261              	.LCFI79:
 1262              	 .cfi_def_cfa_offset 24
 1263 0004 00AF     	 add r7,sp,#0
 1264              	.LCFI80:
 1265              	 .cfi_def_cfa_register 7
 1266 0006 7860     	 str r0,[r7,#4]
1035:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD n;
1036:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1037:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1039:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (--i < FF_FS_LOCK) {	/* Index number origin from 0 */
 1267              	 .loc 1 1039 0
 1268 0008 7B68     	 ldr r3,[r7,#4]
 1269 000a 013B     	 subs r3,r3,#1
 1270 000c 7B60     	 str r3,[r7,#4]
 1271 000e 7B68     	 ldr r3,[r7,#4]
 1272 0010 002B     	 cmp r3,#0
 1273 0012 25D1     	 bne .L66
1040:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = Files[i].ctr;
 1274              	 .loc 1 1040 0
 1275 0014 174A     	 ldr r2,.L72
 1276 0016 7B68     	 ldr r3,[r7,#4]
 1277 0018 1B01     	 lsls r3,r3,#4
 1278 001a 1344     	 add r3,r3,r2
 1279 001c 0833     	 adds r3,r3,#8
 1280 001e 9B88     	 ldrh r3,[r3,#4]
 1281 0020 FB81     	 strh r3,[r7,#14]
1041:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 1282              	 .loc 1 1041 0
 1283 0022 FB89     	 ldrh r3,[r7,#14]
 1284 0024 B3F5807F 	 cmp r3,#256
 1285 0028 01D1     	 bne .L67
 1286              	 .loc 1 1041 0 is_stmt 0 discriminator 1
 1287 002a 0023     	 movs r3,#0
 1288 002c FB81     	 strh r3,[r7,#14]
 1289              	.L67:
1042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n > 0) n--;				/* Decrement read mode open count */
 1290              	 .loc 1 1042 0 is_stmt 1
 1291 002e FB89     	 ldrh r3,[r7,#14]
 1292 0030 002B     	 cmp r3,#0
 1293 0032 02D0     	 beq .L68
 1294              	 .loc 1 1042 0 is_stmt 0 discriminator 1
 1295 0034 FB89     	 ldrh r3,[r7,#14]
 1296 0036 013B     	 subs r3,r3,#1
 1297 0038 FB81     	 strh r3,[r7,#14]
 1298              	.L68:
1043:../Dave/Generated/FATFS/ff_Src/ff.c **** 		Files[i].ctr = n;
 1299              	 .loc 1 1043 0 is_stmt 1
 1300 003a 0E4A     	 ldr r2,.L72
 1301 003c 7B68     	 ldr r3,[r7,#4]
 1302 003e 1B01     	 lsls r3,r3,#4
 1303 0040 1344     	 add r3,r3,r2
 1304 0042 0833     	 adds r3,r3,#8
 1305 0044 FA89     	 ldrh r2,[r7,#14]
 1306 0046 9A80     	 strh r2,[r3,#4]
1044:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 1307              	 .loc 1 1044 0
 1308 0048 FB89     	 ldrh r3,[r7,#14]
 1309 004a 002B     	 cmp r3,#0
 1310 004c 05D1     	 bne .L69
 1311              	 .loc 1 1044 0 is_stmt 0 discriminator 1
 1312 004e 094A     	 ldr r2,.L72
 1313 0050 7B68     	 ldr r3,[r7,#4]
 1314 0052 1B01     	 lsls r3,r3,#4
 1315 0054 1344     	 add r3,r3,r2
 1316 0056 0022     	 movs r2,#0
 1317 0058 1A60     	 str r2,[r3]
 1318              	.L69:
1045:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_OK;
 1319              	 .loc 1 1045 0 is_stmt 1
 1320 005a 0023     	 movs r3,#0
 1321 005c 7B73     	 strb r3,[r7,#13]
 1322 005e 01E0     	 b .L70
 1323              	.L66:
1046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1047:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = FR_INT_ERR;			/* Invalid index nunber */
 1324              	 .loc 1 1047 0
 1325 0060 0223     	 movs r3,#2
 1326 0062 7B73     	 strb r3,[r7,#13]
 1327              	.L70:
1048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1328              	 .loc 1 1049 0
 1329 0064 7B7B     	 ldrb r3,[r7,#13]
1050:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1330              	 .loc 1 1050 0
 1331 0066 1846     	 mov r0,r3
 1332 0068 1437     	 adds r7,r7,#20
 1333              	.LCFI81:
 1334              	 .cfi_def_cfa_offset 4
 1335 006a BD46     	 mov sp,r7
 1336              	.LCFI82:
 1337              	 .cfi_def_cfa_register 13
 1338              	 
 1339 006c 5DF8047B 	 ldr r7,[sp],#4
 1340              	.LCFI83:
 1341              	 .cfi_restore 7
 1342              	 .cfi_def_cfa_offset 0
 1343 0070 7047     	 bx lr
 1344              	.L73:
 1345 0072 00BF     	 .align 2
 1346              	.L72:
 1347 0074 00000000 	 .word Files
 1348              	 .cfi_endproc
 1349              	.LFE13:
 1351              	 .section .text.clear_lock,"ax",%progbits
 1352              	 .align 2
 1353              	 .thumb
 1354              	 .thumb_func
 1356              	clear_lock:
 1357              	.LFB14:
1051:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1052:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1053:../Dave/Generated/FATFS/ff_Src/ff.c **** static void clear_lock (	/* Clear lock entries of the volume */
1054:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs
1055:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1056:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1358              	 .loc 1 1056 0
 1359              	 .cfi_startproc
 1360              	 
 1361              	 
 1362              	 
 1363 0000 80B4     	 push {r7}
 1364              	.LCFI84:
 1365              	 .cfi_def_cfa_offset 4
 1366              	 .cfi_offset 7,-4
 1367 0002 85B0     	 sub sp,sp,#20
 1368              	.LCFI85:
 1369              	 .cfi_def_cfa_offset 24
 1370 0004 00AF     	 add r7,sp,#0
 1371              	.LCFI86:
 1372              	 .cfi_def_cfa_register 7
 1373 0006 7860     	 str r0,[r7,#4]
1057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1058:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1059:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < FF_FS_LOCK; i++) {
 1374              	 .loc 1 1059 0
 1375 0008 0023     	 movs r3,#0
 1376 000a FB60     	 str r3,[r7,#12]
 1377 000c 10E0     	 b .L75
 1378              	.L77:
1060:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1379              	 .loc 1 1060 0
 1380 000e 0C4A     	 ldr r2,.L78
 1381 0010 FB68     	 ldr r3,[r7,#12]
 1382 0012 1B01     	 lsls r3,r3,#4
 1383 0014 1344     	 add r3,r3,r2
 1384 0016 1A68     	 ldr r2,[r3]
 1385 0018 7B68     	 ldr r3,[r7,#4]
 1386 001a 9A42     	 cmp r2,r3
 1387 001c 05D1     	 bne .L76
 1388              	 .loc 1 1060 0 is_stmt 0 discriminator 1
 1389 001e 084A     	 ldr r2,.L78
 1390 0020 FB68     	 ldr r3,[r7,#12]
 1391 0022 1B01     	 lsls r3,r3,#4
 1392 0024 1344     	 add r3,r3,r2
 1393 0026 0022     	 movs r2,#0
 1394 0028 1A60     	 str r2,[r3]
 1395              	.L76:
1059:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1396              	 .loc 1 1059 0 is_stmt 1 discriminator 2
 1397 002a FB68     	 ldr r3,[r7,#12]
 1398 002c 0133     	 adds r3,r3,#1
 1399 002e FB60     	 str r3,[r7,#12]
 1400              	.L75:
1059:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (Files[i].fs == fs) Files[i].fs = 0;
 1401              	 .loc 1 1059 0 is_stmt 0 discriminator 1
 1402 0030 FB68     	 ldr r3,[r7,#12]
 1403 0032 002B     	 cmp r3,#0
 1404 0034 EBD0     	 beq .L77
1061:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1062:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1405              	 .loc 1 1062 0 is_stmt 1
 1406 0036 1437     	 adds r7,r7,#20
 1407              	.LCFI87:
 1408              	 .cfi_def_cfa_offset 4
 1409 0038 BD46     	 mov sp,r7
 1410              	.LCFI88:
 1411              	 .cfi_def_cfa_register 13
 1412              	 
 1413 003a 5DF8047B 	 ldr r7,[sp],#4
 1414              	.LCFI89:
 1415              	 .cfi_restore 7
 1416              	 .cfi_def_cfa_offset 0
 1417 003e 7047     	 bx lr
 1418              	.L79:
 1419              	 .align 2
 1420              	.L78:
 1421 0040 00000000 	 .word Files
 1422              	 .cfi_endproc
 1423              	.LFE14:
 1425              	 .section .text.sync_window,"ax",%progbits
 1426              	 .align 2
 1427              	 .thumb
 1428              	 .thumb_func
 1430              	sync_window:
 1431              	.LFB15:
1063:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1064:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_LOCK != 0 */
1065:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1066:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1067:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1068:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1069:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Move/Flush disk access window in the filesystem object                */
1070:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1071:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1072:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
1073:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs			/* Filesystem object */
1074:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1075:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1432              	 .loc 1 1075 0
 1433              	 .cfi_startproc
 1434              	 
 1435              	 
 1436 0000 80B5     	 push {r7,lr}
 1437              	.LCFI90:
 1438              	 .cfi_def_cfa_offset 8
 1439              	 .cfi_offset 7,-8
 1440              	 .cfi_offset 14,-4
 1441 0002 84B0     	 sub sp,sp,#16
 1442              	.LCFI91:
 1443              	 .cfi_def_cfa_offset 24
 1444 0004 00AF     	 add r7,sp,#0
 1445              	.LCFI92:
 1446              	 .cfi_def_cfa_register 7
 1447 0006 7860     	 str r0,[r7,#4]
1076:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1448              	 .loc 1 1076 0
 1449 0008 0023     	 movs r3,#0
 1450 000a FB73     	 strb r3,[r7,#15]
1077:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1078:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1079:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->wflag) {	/* Is the disk access window dirty? */
 1451              	 .loc 1 1079 0
 1452 000c 7B68     	 ldr r3,[r7,#4]
 1453 000e DB78     	 ldrb r3,[r3,#3]
 1454 0010 002B     	 cmp r3,#0
 1455 0012 30D0     	 beq .L81
1080:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume *
 1456              	 .loc 1 1080 0
 1457 0014 7B68     	 ldr r3,[r7,#4]
 1458 0016 5978     	 ldrb r1,[r3,#1]
 1459 0018 7B68     	 ldr r3,[r7,#4]
 1460 001a 03F13402 	 add r2,r3,#52
 1461 001e 7B68     	 ldr r3,[r7,#4]
 1462 0020 1B6B     	 ldr r3,[r3,#48]
 1463 0022 0846     	 mov r0,r1
 1464 0024 1146     	 mov r1,r2
 1465 0026 1A46     	 mov r2,r3
 1466 0028 0123     	 movs r3,#1
 1467 002a FFF7FEFF 	 bl disk_write
 1468 002e 0346     	 mov r3,r0
 1469 0030 002B     	 cmp r3,#0
 1470 0032 1ED1     	 bne .L82
1081:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 0;	/* Clear window dirty flag */
 1471              	 .loc 1 1081 0
 1472 0034 7B68     	 ldr r3,[r7,#4]
 1473 0036 0022     	 movs r2,#0
 1474 0038 DA70     	 strb r2,[r3,#3]
1082:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 1475              	 .loc 1 1082 0
 1476 003a 7B68     	 ldr r3,[r7,#4]
 1477 003c 1A6B     	 ldr r2,[r3,#48]
 1478 003e 7B68     	 ldr r3,[r7,#4]
 1479 0040 5B6A     	 ldr r3,[r3,#36]
 1480 0042 D21A     	 subs r2,r2,r3
 1481 0044 7B68     	 ldr r3,[r7,#4]
 1482 0046 DB69     	 ldr r3,[r3,#28]
 1483 0048 9A42     	 cmp r2,r3
 1484 004a 14D2     	 bcs .L81
1083:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it t
 1485              	 .loc 1 1083 0
 1486 004c 7B68     	 ldr r3,[r7,#4]
 1487 004e 9B78     	 ldrb r3,[r3,#2]
 1488 0050 022B     	 cmp r3,#2
 1489 0052 10D1     	 bne .L81
 1490              	 .loc 1 1083 0 is_stmt 0 discriminator 1
 1491 0054 7B68     	 ldr r3,[r7,#4]
 1492 0056 5878     	 ldrb r0,[r3,#1]
 1493 0058 7B68     	 ldr r3,[r7,#4]
 1494 005a 03F13401 	 add r1,r3,#52
 1495 005e 7B68     	 ldr r3,[r7,#4]
 1496 0060 1A6B     	 ldr r2,[r3,#48]
 1497 0062 7B68     	 ldr r3,[r7,#4]
 1498 0064 DB69     	 ldr r3,[r3,#28]
 1499 0066 1344     	 add r3,r3,r2
 1500 0068 1A46     	 mov r2,r3
 1501 006a 0123     	 movs r3,#1
 1502 006c FFF7FEFF 	 bl disk_write
 1503 0070 01E0     	 b .L81
 1504              	.L82:
1084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1085:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1086:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_DISK_ERR;
 1505              	 .loc 1 1086 0 is_stmt 1
 1506 0072 0123     	 movs r3,#1
 1507 0074 FB73     	 strb r3,[r7,#15]
 1508              	.L81:
1087:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1088:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1089:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1509              	 .loc 1 1089 0
 1510 0076 FB7B     	 ldrb r3,[r7,#15]
1090:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1511              	 .loc 1 1090 0
 1512 0078 1846     	 mov r0,r3
 1513 007a 1037     	 adds r7,r7,#16
 1514              	.LCFI93:
 1515              	 .cfi_def_cfa_offset 8
 1516 007c BD46     	 mov sp,r7
 1517              	.LCFI94:
 1518              	 .cfi_def_cfa_register 13
 1519              	 
 1520 007e 80BD     	 pop {r7,pc}
 1521              	 .cfi_endproc
 1522              	.LFE15:
 1524              	 .section .text.move_window,"ax",%progbits
 1525              	 .align 2
 1526              	 .thumb
 1527              	 .thumb_func
 1529              	move_window:
 1530              	.LFB16:
1091:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1092:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1093:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1094:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
1095:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
1096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
1097:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1098:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1531              	 .loc 1 1098 0
 1532              	 .cfi_startproc
 1533              	 
 1534              	 
 1535 0000 80B5     	 push {r7,lr}
 1536              	.LCFI95:
 1537              	 .cfi_def_cfa_offset 8
 1538              	 .cfi_offset 7,-8
 1539              	 .cfi_offset 14,-4
 1540 0002 84B0     	 sub sp,sp,#16
 1541              	.LCFI96:
 1542              	 .cfi_def_cfa_offset 24
 1543 0004 00AF     	 add r7,sp,#0
 1544              	.LCFI97:
 1545              	 .cfi_def_cfa_register 7
 1546 0006 7860     	 str r0,[r7,#4]
 1547 0008 3960     	 str r1,[r7]
1099:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 1548              	 .loc 1 1099 0
 1549 000a 0023     	 movs r3,#0
 1550 000c FB73     	 strb r3,[r7,#15]
1100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1101:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1102:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sect != fs->winsect) {	/* Window offset changed? */
 1551              	 .loc 1 1102 0
 1552 000e 7B68     	 ldr r3,[r7,#4]
 1553 0010 1A6B     	 ldr r2,[r3,#48]
 1554 0012 3B68     	 ldr r3,[r7]
 1555 0014 9A42     	 cmp r2,r3
 1556 0016 1CD0     	 beq .L86
1103:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = sync_window(fs);		/* Flush the window */
 1557              	 .loc 1 1104 0
 1558 0018 7868     	 ldr r0,[r7,#4]
 1559 001a FFF7FEFF 	 bl sync_window
 1560 001e 0346     	 mov r3,r0
 1561 0020 FB73     	 strb r3,[r7,#15]
1105:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {			/* Fill sector window with new data */
 1562              	 .loc 1 1106 0
 1563 0022 FB7B     	 ldrb r3,[r7,#15]
 1564 0024 002B     	 cmp r3,#0
 1565 0026 14D1     	 bne .L86
1107:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 1566              	 .loc 1 1107 0
 1567 0028 7B68     	 ldr r3,[r7,#4]
 1568 002a 5A78     	 ldrb r2,[r3,#1]
 1569 002c 7B68     	 ldr r3,[r7,#4]
 1570 002e 3433     	 adds r3,r3,#52
 1571 0030 1046     	 mov r0,r2
 1572 0032 1946     	 mov r1,r3
 1573 0034 3A68     	 ldr r2,[r7]
 1574 0036 0123     	 movs r3,#1
 1575 0038 FFF7FEFF 	 bl disk_read
 1576 003c 0346     	 mov r3,r0
 1577 003e 002B     	 cmp r3,#0
 1578 0040 04D0     	 beq .L87
1108:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 1579              	 .loc 1 1108 0
 1580 0042 4FF0FF33 	 mov r3,#-1
 1581 0046 3B60     	 str r3,[r7]
1109:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 1582              	 .loc 1 1109 0
 1583 0048 0123     	 movs r3,#1
 1584 004a FB73     	 strb r3,[r7,#15]
 1585              	.L87:
1110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = sect;
 1586              	 .loc 1 1111 0
 1587 004c 7B68     	 ldr r3,[r7,#4]
 1588 004e 3A68     	 ldr r2,[r7]
 1589 0050 1A63     	 str r2,[r3,#48]
 1590              	.L86:
1112:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1114:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1591              	 .loc 1 1114 0
 1592 0052 FB7B     	 ldrb r3,[r7,#15]
1115:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1593              	 .loc 1 1115 0
 1594 0054 1846     	 mov r0,r3
 1595 0056 1037     	 adds r7,r7,#16
 1596              	.LCFI98:
 1597              	 .cfi_def_cfa_offset 8
 1598 0058 BD46     	 mov sp,r7
 1599              	.LCFI99:
 1600              	 .cfi_def_cfa_register 13
 1601              	 
 1602 005a 80BD     	 pop {r7,pc}
 1603              	 .cfi_endproc
 1604              	.LFE16:
 1606              	 .section .text.sync_fs,"ax",%progbits
 1607              	 .align 2
 1608              	 .thumb
 1609              	 .thumb_func
 1611              	sync_fs:
 1612              	.LFB17:
1116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1117:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1118:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1119:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1120:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1121:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1122:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize filesystem and data on the storage                        */
1123:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1124:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1125:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
1126:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs		/* Filesystem object */
1127:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1128:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1613              	 .loc 1 1128 0
 1614              	 .cfi_startproc
 1615              	 
 1616              	 
 1617 0000 80B5     	 push {r7,lr}
 1618              	.LCFI100:
 1619              	 .cfi_def_cfa_offset 8
 1620              	 .cfi_offset 7,-8
 1621              	 .cfi_offset 14,-4
 1622 0002 84B0     	 sub sp,sp,#16
 1623              	.LCFI101:
 1624              	 .cfi_def_cfa_offset 24
 1625 0004 00AF     	 add r7,sp,#0
 1626              	.LCFI102:
 1627              	 .cfi_def_cfa_register 7
 1628 0006 7860     	 str r0,[r7,#4]
1129:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1130:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1131:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = sync_window(fs);
 1629              	 .loc 1 1132 0
 1630 0008 7868     	 ldr r0,[r7,#4]
 1631 000a FFF7FEFF 	 bl sync_window
 1632 000e 0346     	 mov r3,r0
 1633 0010 FB73     	 strb r3,[r7,#15]
1133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 1634              	 .loc 1 1133 0
 1635 0012 FB7B     	 ldrb r3,[r7,#15]
 1636 0014 002B     	 cmp r3,#0
 1637 0016 57D1     	 bne .L90
1134:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {	/* FAT32: Update FSInfo sector if needed */
 1638              	 .loc 1 1134 0
 1639 0018 7B68     	 ldr r3,[r7,#4]
 1640 001a 1B78     	 ldrb r3,[r3]
 1641 001c 032B     	 cmp r3,#3
 1642 001e 47D1     	 bne .L91
 1643              	 .loc 1 1134 0 is_stmt 0 discriminator 1
 1644 0020 7B68     	 ldr r3,[r7,#4]
 1645 0022 1B79     	 ldrb r3,[r3,#4]
 1646 0024 012B     	 cmp r3,#1
 1647 0026 43D1     	 bne .L91
1135:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Create FSInfo structure */
1136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fs->win, 0, sizeof fs->win);
 1648              	 .loc 1 1136 0 is_stmt 1
 1649 0028 7B68     	 ldr r3,[r7,#4]
 1650 002a 3433     	 adds r3,r3,#52
 1651 002c 1846     	 mov r0,r3
 1652 002e 0021     	 movs r1,#0
 1653 0030 4FF40072 	 mov r2,#512
 1654 0034 FFF7FEFF 	 bl mem_set
1137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + BS_55AA, 0xAA55);					/* Boot signature */
 1655              	 .loc 1 1137 0
 1656 0038 7B68     	 ldr r3,[r7,#4]
 1657 003a 03F23223 	 addw r3,r3,#562
 1658 003e 1846     	 mov r0,r3
 1659 0040 4AF65521 	 movw r1,#43605
 1660 0044 FFF7FEFF 	 bl st_word
1138:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 1661              	 .loc 1 1138 0
 1662 0048 7B68     	 ldr r3,[r7,#4]
 1663 004a 3433     	 adds r3,r3,#52
 1664 004c 1846     	 mov r0,r3
 1665 004e 2149     	 ldr r1,.L93
 1666 0050 FFF7FEFF 	 bl st_dword
1139:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 1667              	 .loc 1 1139 0
 1668 0054 7B68     	 ldr r3,[r7,#4]
 1669 0056 03F50673 	 add r3,r3,#536
 1670 005a 1846     	 mov r0,r3
 1671 005c 1E49     	 ldr r1,.L93+4
 1672 005e FFF7FEFF 	 bl st_dword
1140:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 1673              	 .loc 1 1140 0
 1674 0062 7B68     	 ldr r3,[r7,#4]
 1675 0064 03F50772 	 add r2,r3,#540
 1676 0068 7B68     	 ldr r3,[r7,#4]
 1677 006a 1B69     	 ldr r3,[r3,#16]
 1678 006c 1046     	 mov r0,r2
 1679 006e 1946     	 mov r1,r3
 1680 0070 FFF7FEFF 	 bl st_dword
1141:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 1681              	 .loc 1 1141 0
 1682 0074 7B68     	 ldr r3,[r7,#4]
 1683 0076 03F50872 	 add r2,r3,#544
 1684 007a 7B68     	 ldr r3,[r7,#4]
 1685 007c DB68     	 ldr r3,[r3,#12]
 1686 007e 1046     	 mov r0,r2
 1687 0080 1946     	 mov r1,r3
 1688 0082 FFF7FEFF 	 bl st_dword
1142:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->winsect = fs->volbase + 1;						/* Write it into the FSInfo sector (Next to VBR) */
 1689              	 .loc 1 1142 0
 1690 0086 7B68     	 ldr r3,[r7,#4]
 1691 0088 1B6A     	 ldr r3,[r3,#32]
 1692 008a 5A1C     	 adds r2,r3,#1
 1693 008c 7B68     	 ldr r3,[r7,#4]
 1694 008e 1A63     	 str r2,[r3,#48]
1143:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 1695              	 .loc 1 1143 0
 1696 0090 7B68     	 ldr r3,[r7,#4]
 1697 0092 5978     	 ldrb r1,[r3,#1]
 1698 0094 7B68     	 ldr r3,[r7,#4]
 1699 0096 03F13402 	 add r2,r3,#52
 1700 009a 7B68     	 ldr r3,[r7,#4]
 1701 009c 1B6B     	 ldr r3,[r3,#48]
 1702 009e 0846     	 mov r0,r1
 1703 00a0 1146     	 mov r1,r2
 1704 00a2 1A46     	 mov r2,r3
 1705 00a4 0123     	 movs r3,#1
 1706 00a6 FFF7FEFF 	 bl disk_write
1144:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 1707              	 .loc 1 1144 0
 1708 00aa 7B68     	 ldr r3,[r7,#4]
 1709 00ac 0022     	 movs r2,#0
 1710 00ae 1A71     	 strb r2,[r3,#4]
 1711              	.L91:
1145:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1146:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Make sure that no pending write process in the lower layer */
1147:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 1712              	 .loc 1 1147 0
 1713 00b0 7B68     	 ldr r3,[r7,#4]
 1714 00b2 5B78     	 ldrb r3,[r3,#1]
 1715 00b4 1846     	 mov r0,r3
 1716 00b6 0021     	 movs r1,#0
 1717 00b8 0022     	 movs r2,#0
 1718 00ba FFF7FEFF 	 bl disk_ioctl
 1719 00be 0346     	 mov r3,r0
 1720 00c0 002B     	 cmp r3,#0
 1721 00c2 01D0     	 beq .L90
 1722              	 .loc 1 1147 0 is_stmt 0 discriminator 1
 1723 00c4 0123     	 movs r3,#1
 1724 00c6 FB73     	 strb r3,[r7,#15]
 1725              	.L90:
1148:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1149:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1150:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 1726              	 .loc 1 1150 0 is_stmt 1
 1727 00c8 FB7B     	 ldrb r3,[r7,#15]
1151:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1728              	 .loc 1 1151 0
 1729 00ca 1846     	 mov r0,r3
 1730 00cc 1037     	 adds r7,r7,#16
 1731              	.LCFI103:
 1732              	 .cfi_def_cfa_offset 8
 1733 00ce BD46     	 mov sp,r7
 1734              	.LCFI104:
 1735              	 .cfi_def_cfa_register 13
 1736              	 
 1737 00d0 80BD     	 pop {r7,pc}
 1738              	.L94:
 1739 00d2 00BF     	 .align 2
 1740              	.L93:
 1741 00d4 52526141 	 .word 1096897106
 1742 00d8 72724161 	 .word 1631679090
 1743              	 .cfi_endproc
 1744              	.LFE17:
 1746              	 .section .text.clst2sect,"ax",%progbits
 1747              	 .align 2
 1748              	 .thumb
 1749              	 .thumb_func
 1751              	clst2sect:
 1752              	.LFB18:
1152:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1153:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1154:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1155:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1156:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1157:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1158:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get physical sector number from cluster number                        */
1159:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1160:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1161:../Dave/Generated/FATFS/ff_Src/ff.c **** static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
1162:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
1163:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster# to be converted */
1164:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1165:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1753              	 .loc 1 1165 0
 1754              	 .cfi_startproc
 1755              	 
 1756              	 
 1757              	 
 1758 0000 80B4     	 push {r7}
 1759              	.LCFI105:
 1760              	 .cfi_def_cfa_offset 4
 1761              	 .cfi_offset 7,-4
 1762 0002 83B0     	 sub sp,sp,#12
 1763              	.LCFI106:
 1764              	 .cfi_def_cfa_offset 16
 1765 0004 00AF     	 add r7,sp,#0
 1766              	.LCFI107:
 1767              	 .cfi_def_cfa_register 7
 1768 0006 7860     	 str r0,[r7,#4]
 1769 0008 3960     	 str r1,[r7]
1166:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;		/* Cluster number is origin from 2 */
 1770              	 .loc 1 1166 0
 1771 000a 3B68     	 ldr r3,[r7]
 1772 000c 023B     	 subs r3,r3,#2
 1773 000e 3B60     	 str r3,[r7]
1167:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 1774              	 .loc 1 1167 0
 1775 0010 7B68     	 ldr r3,[r7,#4]
 1776 0012 9B69     	 ldr r3,[r3,#24]
 1777 0014 9A1E     	 subs r2,r3,#2
 1778 0016 3B68     	 ldr r3,[r7]
 1779 0018 9A42     	 cmp r2,r3
 1780 001a 01D8     	 bhi .L96
 1781              	 .loc 1 1167 0 is_stmt 0 discriminator 1
 1782 001c 0023     	 movs r3,#0
 1783 001e 08E0     	 b .L97
 1784              	.L96:
1168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 1785              	 .loc 1 1168 0 is_stmt 1
 1786 0020 7B68     	 ldr r3,[r7,#4]
 1787 0022 DA6A     	 ldr r2,[r3,#44]
 1788 0024 7B68     	 ldr r3,[r7,#4]
 1789 0026 5B89     	 ldrh r3,[r3,#10]
 1790 0028 1946     	 mov r1,r3
 1791 002a 3B68     	 ldr r3,[r7]
 1792 002c 03FB01F3 	 mul r3,r3,r1
 1793 0030 1344     	 add r3,r3,r2
 1794              	.L97:
1169:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 1795              	 .loc 1 1169 0
 1796 0032 1846     	 mov r0,r3
 1797 0034 0C37     	 adds r7,r7,#12
 1798              	.LCFI108:
 1799              	 .cfi_def_cfa_offset 4
 1800 0036 BD46     	 mov sp,r7
 1801              	.LCFI109:
 1802              	 .cfi_def_cfa_register 13
 1803              	 
 1804 0038 5DF8047B 	 ldr r7,[sp],#4
 1805              	.LCFI110:
 1806              	 .cfi_restore 7
 1807              	 .cfi_def_cfa_offset 0
 1808 003c 7047     	 bx lr
 1809              	 .cfi_endproc
 1810              	.LFE18:
 1812 003e 00BF     	 .section .text.get_fat,"ax",%progbits
 1813              	 .align 2
 1814              	 .thumb
 1815              	 .thumb_func
 1817              	get_fat:
 1818              	.LFB19:
1170:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1171:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1172:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1173:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1174:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1175:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Read value of a FAT entry                                */
1176:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1177:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1178:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
1179:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Corresponding object */
1180:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Cluster number to get the value */
1181:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1182:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 1819              	 .loc 1 1182 0
 1820              	 .cfi_startproc
 1821              	 
 1822              	 
 1823 0000 80B5     	 push {r7,lr}
 1824              	.LCFI111:
 1825              	 .cfi_def_cfa_offset 8
 1826              	 .cfi_offset 7,-8
 1827              	 .cfi_offset 14,-4
 1828 0002 86B0     	 sub sp,sp,#24
 1829              	.LCFI112:
 1830              	 .cfi_def_cfa_offset 32
 1831 0004 00AF     	 add r7,sp,#0
 1832              	.LCFI113:
 1833              	 .cfi_def_cfa_register 7
 1834 0006 7860     	 str r0,[r7,#4]
 1835 0008 3960     	 str r1,[r7]
1183:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wc, bc;
1184:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val;
1185:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 1836              	 .loc 1 1185 0
 1837 000a 7B68     	 ldr r3,[r7,#4]
 1838 000c 1B68     	 ldr r3,[r3]
 1839 000e 3B61     	 str r3,[r7,#16]
1186:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1187:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1188:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 1840              	 .loc 1 1188 0
 1841 0010 3B68     	 ldr r3,[r7]
 1842 0012 012B     	 cmp r3,#1
 1843 0014 04D9     	 bls .L99
 1844              	 .loc 1 1188 0 is_stmt 0 discriminator 1
 1845 0016 3B69     	 ldr r3,[r7,#16]
 1846 0018 9A69     	 ldr r2,[r3,#24]
 1847 001a 3B68     	 ldr r3,[r7]
 1848 001c 9A42     	 cmp r2,r3
 1849 001e 02D8     	 bhi .L100
 1850              	.L99:
1189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 1;	/* Internal error */
 1851              	 .loc 1 1189 0 is_stmt 1
 1852 0020 0123     	 movs r3,#1
 1853 0022 7B61     	 str r3,[r7,#20]
 1854 0024 88E0     	 b .L101
 1855              	.L100:
1190:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1191:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1192:../Dave/Generated/FATFS/ff_Src/ff.c **** 		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 1856              	 .loc 1 1192 0
 1857 0026 4FF0FF33 	 mov r3,#-1
 1858 002a 7B61     	 str r3,[r7,#20]
1193:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1194:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 1859              	 .loc 1 1194 0
 1860 002c 3B69     	 ldr r3,[r7,#16]
 1861 002e 1B78     	 ldrb r3,[r3]
 1862 0030 022B     	 cmp r3,#2
 1863 0032 47D0     	 beq .L103
 1864 0034 032B     	 cmp r3,#3
 1865 0036 60D0     	 beq .L104
 1866 0038 012B     	 cmp r3,#1
 1867 003a 7BD1     	 bne .L113
1195:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12 :
1196:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;
 1868              	 .loc 1 1196 0
 1869 003c 3B68     	 ldr r3,[r7]
 1870 003e FB60     	 str r3,[r7,#12]
 1871 0040 FB68     	 ldr r3,[r7,#12]
 1872 0042 5B08     	 lsrs r3,r3,#1
 1873 0044 FA68     	 ldr r2,[r7,#12]
 1874 0046 1344     	 add r3,r3,r2
 1875 0048 FB60     	 str r3,[r7,#12]
1197:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1876              	 .loc 1 1197 0
 1877 004a 3B69     	 ldr r3,[r7,#16]
 1878 004c 5A6A     	 ldr r2,[r3,#36]
 1879 004e FB68     	 ldr r3,[r7,#12]
 1880 0050 5B0A     	 lsrs r3,r3,#9
 1881 0052 1344     	 add r3,r3,r2
 1882 0054 3869     	 ldr r0,[r7,#16]
 1883 0056 1946     	 mov r1,r3
 1884 0058 FFF7FEFF 	 bl move_window
 1885 005c 0346     	 mov r3,r0
 1886 005e 002B     	 cmp r3,#0
 1887 0060 00D0     	 beq .L106
 1888 0062 69E0     	 b .L101
 1889              	.L106:
1198:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 1890              	 .loc 1 1198 0
 1891 0064 FB68     	 ldr r3,[r7,#12]
 1892 0066 5A1C     	 adds r2,r3,#1
 1893 0068 FA60     	 str r2,[r7,#12]
 1894 006a C3F30803 	 ubfx r3,r3,#0,#9
 1895 006e 3A69     	 ldr r2,[r7,#16]
 1896 0070 1344     	 add r3,r3,r2
 1897 0072 93F83430 	 ldrb r3,[r3,#52]
 1898 0076 BB60     	 str r3,[r7,#8]
1199:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 1899              	 .loc 1 1199 0
 1900 0078 3B69     	 ldr r3,[r7,#16]
 1901 007a 5A6A     	 ldr r2,[r3,#36]
 1902 007c FB68     	 ldr r3,[r7,#12]
 1903 007e 5B0A     	 lsrs r3,r3,#9
 1904 0080 1344     	 add r3,r3,r2
 1905 0082 3869     	 ldr r0,[r7,#16]
 1906 0084 1946     	 mov r1,r3
 1907 0086 FFF7FEFF 	 bl move_window
 1908 008a 0346     	 mov r3,r0
 1909 008c 002B     	 cmp r3,#0
 1910 008e 00D0     	 beq .L107
 1911 0090 52E0     	 b .L101
 1912              	.L107:
1200:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 1913              	 .loc 1 1200 0
 1914 0092 FB68     	 ldr r3,[r7,#12]
 1915 0094 C3F30803 	 ubfx r3,r3,#0,#9
 1916 0098 3A69     	 ldr r2,[r7,#16]
 1917 009a 1344     	 add r3,r3,r2
 1918 009c 93F83430 	 ldrb r3,[r3,#52]
 1919 00a0 1B02     	 lsls r3,r3,#8
 1920 00a2 1A46     	 mov r2,r3
 1921 00a4 BB68     	 ldr r3,[r7,#8]
 1922 00a6 1343     	 orrs r3,r3,r2
 1923 00a8 BB60     	 str r3,[r7,#8]
1201:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 1924              	 .loc 1 1201 0
 1925 00aa 3B68     	 ldr r3,[r7]
 1926 00ac 03F00103 	 and r3,r3,#1
 1927 00b0 002B     	 cmp r3,#0
 1928 00b2 02D0     	 beq .L108
 1929              	 .loc 1 1201 0 is_stmt 0 discriminator 1
 1930 00b4 BB68     	 ldr r3,[r7,#8]
 1931 00b6 1B09     	 lsrs r3,r3,#4
 1932 00b8 02E0     	 b .L109
 1933              	.L108:
 1934              	 .loc 1 1201 0 discriminator 2
 1935 00ba BB68     	 ldr r3,[r7,#8]
 1936 00bc C3F30B03 	 ubfx r3,r3,#0,#12
 1937              	.L109:
 1938              	 .loc 1 1201 0 discriminator 4
 1939 00c0 7B61     	 str r3,[r7,#20]
1202:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 1940              	 .loc 1 1202 0 is_stmt 1 discriminator 4
 1941 00c2 39E0     	 b .L101
 1942              	.L103:
1203:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1204:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16 :
1205:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 1943              	 .loc 1 1205 0
 1944 00c4 3B69     	 ldr r3,[r7,#16]
 1945 00c6 5A6A     	 ldr r2,[r3,#36]
 1946 00c8 3B68     	 ldr r3,[r7]
 1947 00ca 1B0A     	 lsrs r3,r3,#8
 1948 00cc 1344     	 add r3,r3,r2
 1949 00ce 3869     	 ldr r0,[r7,#16]
 1950 00d0 1946     	 mov r1,r3
 1951 00d2 FFF7FEFF 	 bl move_window
 1952 00d6 0346     	 mov r3,r0
 1953 00d8 002B     	 cmp r3,#0
 1954 00da 00D0     	 beq .L110
 1955 00dc 2CE0     	 b .L101
 1956              	.L110:
1206:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 1957              	 .loc 1 1206 0
 1958 00de 3B68     	 ldr r3,[r7]
 1959 00e0 5B00     	 lsls r3,r3,#1
 1960 00e2 03F4FF73 	 and r3,r3,#510
 1961 00e6 3033     	 adds r3,r3,#48
 1962 00e8 3A69     	 ldr r2,[r7,#16]
 1963 00ea 1344     	 add r3,r3,r2
 1964 00ec 0433     	 adds r3,r3,#4
 1965 00ee 1846     	 mov r0,r3
 1966 00f0 FFF7FEFF 	 bl ld_word
 1967 00f4 0346     	 mov r3,r0
 1968 00f6 7B61     	 str r3,[r7,#20]
1207:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 1969              	 .loc 1 1207 0
 1970 00f8 1EE0     	 b .L101
 1971              	.L104:
1208:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1209:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32 :
1210:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 1972              	 .loc 1 1210 0
 1973 00fa 3B69     	 ldr r3,[r7,#16]
 1974 00fc 5A6A     	 ldr r2,[r3,#36]
 1975 00fe 3B68     	 ldr r3,[r7]
 1976 0100 DB09     	 lsrs r3,r3,#7
 1977 0102 1344     	 add r3,r3,r2
 1978 0104 3869     	 ldr r0,[r7,#16]
 1979 0106 1946     	 mov r1,r3
 1980 0108 FFF7FEFF 	 bl move_window
 1981 010c 0346     	 mov r3,r0
 1982 010e 002B     	 cmp r3,#0
 1983 0110 00D0     	 beq .L111
 1984 0112 11E0     	 b .L101
 1985              	.L111:
1211:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upp
 1986              	 .loc 1 1211 0
 1987 0114 3B68     	 ldr r3,[r7]
 1988 0116 9B00     	 lsls r3,r3,#2
 1989 0118 03F4FE73 	 and r3,r3,#508
 1990 011c 3033     	 adds r3,r3,#48
 1991 011e 3A69     	 ldr r2,[r7,#16]
 1992 0120 1344     	 add r3,r3,r2
 1993 0122 0433     	 adds r3,r3,#4
 1994 0124 1846     	 mov r0,r3
 1995 0126 FFF7FEFF 	 bl ld_dword
 1996 012a 0346     	 mov r3,r0
 1997 012c 23F07043 	 bic r3,r3,#-268435456
 1998 0130 7B61     	 str r3,[r7,#20]
1212:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 1999              	 .loc 1 1212 0
 2000 0132 01E0     	 b .L101
 2001              	.L113:
1213:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1214:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT :
1215:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must 
1216:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
1217:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters -
1218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1219:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
1220:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
1221:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1222:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1223:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
1224:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = clst + 1; 	/* Generate the value */
1225:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1226:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1227:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
1228:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
1229:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = 0x7FFFFFFF;	/* Generate EOC */
1230:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
1231:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
1232:../Dave/Generated/FATFS/ff_Src/ff.c **** 						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
1233:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1234:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
1235:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1236:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1237:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = 1;	/* Internal error */
1238:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
1239:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1240:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:
1241:../Dave/Generated/FATFS/ff_Src/ff.c **** 			val = 1;	/* Internal error */
 2002              	 .loc 1 1241 0
 2003 0134 0123     	 movs r3,#1
 2004 0136 7B61     	 str r3,[r7,#20]
 2005              	.L101:
1242:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1243:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return val;
 2006              	 .loc 1 1245 0
 2007 0138 7B69     	 ldr r3,[r7,#20]
1246:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2008              	 .loc 1 1246 0
 2009 013a 1846     	 mov r0,r3
 2010 013c 1837     	 adds r7,r7,#24
 2011              	.LCFI114:
 2012              	 .cfi_def_cfa_offset 8
 2013 013e BD46     	 mov sp,r7
 2014              	.LCFI115:
 2015              	 .cfi_def_cfa_register 13
 2016              	 
 2017 0140 80BD     	 pop {r7,pc}
 2018              	 .cfi_endproc
 2019              	.LFE19:
 2021 0142 00BF     	 .section .text.put_fat,"ax",%progbits
 2022              	 .align 2
 2023              	 .thumb
 2024              	 .thumb_func
 2026              	put_fat:
 2027              	.LFB20:
1247:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1248:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1250:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1251:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1252:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1253:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT access - Change value of a FAT entry                              */
1254:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1255:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1256:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
1257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Corresponding filesystem object */
1258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,		/* FAT index number (cluster number) to be changed */
1259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val		/* New value to be set to the entry */
1260:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1261:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2028              	 .loc 1 1261 0
 2029              	 .cfi_startproc
 2030              	 
 2031              	 
 2032 0000 90B5     	 push {r4,r7,lr}
 2033              	.LCFI116:
 2034              	 .cfi_def_cfa_offset 12
 2035              	 .cfi_offset 4,-12
 2036              	 .cfi_offset 7,-8
 2037              	 .cfi_offset 14,-4
 2038 0002 89B0     	 sub sp,sp,#36
 2039              	.LCFI117:
 2040              	 .cfi_def_cfa_offset 48
 2041 0004 00AF     	 add r7,sp,#0
 2042              	.LCFI118:
 2043              	 .cfi_def_cfa_register 7
 2044 0006 F860     	 str r0,[r7,#12]
 2045 0008 B960     	 str r1,[r7,#8]
 2046 000a 7A60     	 str r2,[r7,#4]
1262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT bc;
1263:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *p;
1264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INT_ERR;
 2047              	 .loc 1 1264 0
 2048 000c 0223     	 movs r3,#2
 2049 000e FB77     	 strb r3,[r7,#31]
1265:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1266:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 2050              	 .loc 1 1267 0
 2051 0010 BB68     	 ldr r3,[r7,#8]
 2052 0012 012B     	 cmp r3,#1
 2053 0014 40F2D280 	 bls .L115
 2054              	 .loc 1 1267 0 is_stmt 0 discriminator 1
 2055 0018 FB68     	 ldr r3,[r7,#12]
 2056 001a 9A69     	 ldr r2,[r3,#24]
 2057 001c BB68     	 ldr r3,[r7,#8]
 2058 001e 9A42     	 cmp r2,r3
 2059 0020 40F2CC80 	 bls .L115
1268:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (fs->fs_type) {
 2060              	 .loc 1 1268 0 is_stmt 1
 2061 0024 FB68     	 ldr r3,[r7,#12]
 2062 0026 1B78     	 ldrb r3,[r3]
 2063 0028 022B     	 cmp r3,#2
 2064 002a 74D0     	 beq .L116
 2065 002c 032B     	 cmp r3,#3
 2066 002e 00F09380 	 beq .L117
 2067 0032 012B     	 cmp r3,#1
 2068 0034 40F0C280 	 bne .L115
1269:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT12:
1270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 2069              	 .loc 1 1270 0
 2070 0038 BB68     	 ldr r3,[r7,#8]
 2071 003a BB61     	 str r3,[r7,#24]
 2072 003c BB69     	 ldr r3,[r7,#24]
 2073 003e 5B08     	 lsrs r3,r3,#1
 2074 0040 BA69     	 ldr r2,[r7,#24]
 2075 0042 1344     	 add r3,r3,r2
 2076 0044 BB61     	 str r3,[r7,#24]
1271:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2077              	 .loc 1 1271 0
 2078 0046 FB68     	 ldr r3,[r7,#12]
 2079 0048 5A6A     	 ldr r2,[r3,#36]
 2080 004a BB69     	 ldr r3,[r7,#24]
 2081 004c 5B0A     	 lsrs r3,r3,#9
 2082 004e 1344     	 add r3,r3,r2
 2083 0050 F868     	 ldr r0,[r7,#12]
 2084 0052 1946     	 mov r1,r3
 2085 0054 FFF7FEFF 	 bl move_window
 2086 0058 0346     	 mov r3,r0
 2087 005a FB77     	 strb r3,[r7,#31]
1272:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2088              	 .loc 1 1272 0
 2089 005c FB7F     	 ldrb r3,[r7,#31]
 2090 005e 002B     	 cmp r3,#0
 2091 0060 00D0     	 beq .L119
 2092 0062 ABE0     	 b .L115
 2093              	.L119:
1273:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc++ % SS(fs);
 2094              	 .loc 1 1273 0
 2095 0064 BB69     	 ldr r3,[r7,#24]
 2096 0066 5A1C     	 adds r2,r3,#1
 2097 0068 BA61     	 str r2,[r7,#24]
 2098 006a C3F30803 	 ubfx r3,r3,#0,#9
 2099 006e 3033     	 adds r3,r3,#48
 2100 0070 FA68     	 ldr r2,[r7,#12]
 2101 0072 1344     	 add r3,r3,r2
 2102 0074 0433     	 adds r3,r3,#4
 2103 0076 7B61     	 str r3,[r7,#20]
1274:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;		/* Update 1st byte */
 2104              	 .loc 1 1274 0
 2105 0078 BB68     	 ldr r3,[r7,#8]
 2106 007a 03F00103 	 and r3,r3,#1
 2107 007e 002B     	 cmp r3,#0
 2108 0080 0DD0     	 beq .L120
 2109              	 .loc 1 1274 0 is_stmt 0 discriminator 1
 2110 0082 7B69     	 ldr r3,[r7,#20]
 2111 0084 1B78     	 ldrb r3,[r3]
 2112 0086 DBB2     	 uxtb r3,r3
 2113 0088 03F00F03 	 and r3,r3,#15
 2114 008c DAB2     	 uxtb r2,r3
 2115 008e 7B68     	 ldr r3,[r7,#4]
 2116 0090 DBB2     	 uxtb r3,r3
 2117 0092 1B01     	 lsls r3,r3,#4
 2118 0094 DBB2     	 uxtb r3,r3
 2119 0096 1343     	 orrs r3,r3,r2
 2120 0098 DBB2     	 uxtb r3,r3
 2121 009a DBB2     	 uxtb r3,r3
 2122 009c 01E0     	 b .L121
 2123              	.L120:
 2124              	 .loc 1 1274 0 discriminator 2
 2125 009e 7B68     	 ldr r3,[r7,#4]
 2126 00a0 DBB2     	 uxtb r3,r3
 2127              	.L121:
 2128              	 .loc 1 1274 0 discriminator 4
 2129 00a2 7A69     	 ldr r2,[r7,#20]
 2130 00a4 1370     	 strb r3,[r2]
1275:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2131              	 .loc 1 1275 0 is_stmt 1 discriminator 4
 2132 00a6 FB68     	 ldr r3,[r7,#12]
 2133 00a8 0122     	 movs r2,#1
 2134 00aa DA70     	 strb r2,[r3,#3]
1276:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 2135              	 .loc 1 1276 0 discriminator 4
 2136 00ac FB68     	 ldr r3,[r7,#12]
 2137 00ae 5A6A     	 ldr r2,[r3,#36]
 2138 00b0 BB69     	 ldr r3,[r7,#24]
 2139 00b2 5B0A     	 lsrs r3,r3,#9
 2140 00b4 1344     	 add r3,r3,r2
 2141 00b6 F868     	 ldr r0,[r7,#12]
 2142 00b8 1946     	 mov r1,r3
 2143 00ba FFF7FEFF 	 bl move_window
 2144 00be 0346     	 mov r3,r0
 2145 00c0 FB77     	 strb r3,[r7,#31]
1277:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2146              	 .loc 1 1277 0 discriminator 4
 2147 00c2 FB7F     	 ldrb r3,[r7,#31]
 2148 00c4 002B     	 cmp r3,#0
 2149 00c6 00D0     	 beq .L122
 2150              	 .loc 1 1277 0 is_stmt 0
 2151 00c8 78E0     	 b .L115
 2152              	.L122:
1278:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = fs->win + bc % SS(fs);
 2153              	 .loc 1 1278 0 is_stmt 1
 2154 00ca BB69     	 ldr r3,[r7,#24]
 2155 00cc C3F30803 	 ubfx r3,r3,#0,#9
 2156 00d0 3033     	 adds r3,r3,#48
 2157 00d2 FA68     	 ldr r2,[r7,#12]
 2158 00d4 1344     	 add r3,r3,r2
 2159 00d6 0433     	 adds r3,r3,#4
 2160 00d8 7B61     	 str r3,[r7,#20]
1279:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd by
 2161              	 .loc 1 1279 0
 2162 00da BB68     	 ldr r3,[r7,#8]
 2163 00dc 03F00103 	 and r3,r3,#1
 2164 00e0 002B     	 cmp r3,#0
 2165 00e2 03D0     	 beq .L123
 2166              	 .loc 1 1279 0 is_stmt 0 discriminator 1
 2167 00e4 7B68     	 ldr r3,[r7,#4]
 2168 00e6 1B09     	 lsrs r3,r3,#4
 2169 00e8 DBB2     	 uxtb r3,r3
 2170 00ea 0EE0     	 b .L124
 2171              	.L123:
 2172              	 .loc 1 1279 0 discriminator 2
 2173 00ec 7B69     	 ldr r3,[r7,#20]
 2174 00ee 1B78     	 ldrb r3,[r3]
 2175 00f0 DBB2     	 uxtb r3,r3
 2176 00f2 23F00F03 	 bic r3,r3,#15
 2177 00f6 DAB2     	 uxtb r2,r3
 2178 00f8 7B68     	 ldr r3,[r7,#4]
 2179 00fa 1B0A     	 lsrs r3,r3,#8
 2180 00fc DBB2     	 uxtb r3,r3
 2181 00fe 03F00F03 	 and r3,r3,#15
 2182 0102 DBB2     	 uxtb r3,r3
 2183 0104 1343     	 orrs r3,r3,r2
 2184 0106 DBB2     	 uxtb r3,r3
 2185 0108 DBB2     	 uxtb r3,r3
 2186              	.L124:
 2187              	 .loc 1 1279 0 discriminator 4
 2188 010a 7A69     	 ldr r2,[r7,#20]
 2189 010c 1370     	 strb r3,[r2]
1280:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2190              	 .loc 1 1280 0 is_stmt 1 discriminator 4
 2191 010e FB68     	 ldr r3,[r7,#12]
 2192 0110 0122     	 movs r2,#1
 2193 0112 DA70     	 strb r2,[r3,#3]
1281:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2194              	 .loc 1 1281 0 discriminator 4
 2195 0114 52E0     	 b .L115
 2196              	.L116:
1282:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1283:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT16:
1284:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 2197              	 .loc 1 1284 0
 2198 0116 FB68     	 ldr r3,[r7,#12]
 2199 0118 5A6A     	 ldr r2,[r3,#36]
 2200 011a BB68     	 ldr r3,[r7,#8]
 2201 011c 1B0A     	 lsrs r3,r3,#8
 2202 011e 1344     	 add r3,r3,r2
 2203 0120 F868     	 ldr r0,[r7,#12]
 2204 0122 1946     	 mov r1,r3
 2205 0124 FFF7FEFF 	 bl move_window
 2206 0128 0346     	 mov r3,r0
 2207 012a FB77     	 strb r3,[r7,#31]
1285:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2208              	 .loc 1 1285 0
 2209 012c FB7F     	 ldrb r3,[r7,#31]
 2210 012e 002B     	 cmp r3,#0
 2211 0130 00D0     	 beq .L125
 2212 0132 43E0     	 b .L115
 2213              	.L125:
1286:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 2214              	 .loc 1 1286 0
 2215 0134 BB68     	 ldr r3,[r7,#8]
 2216 0136 5B00     	 lsls r3,r3,#1
 2217 0138 03F4FF73 	 and r3,r3,#510
 2218 013c 3033     	 adds r3,r3,#48
 2219 013e FA68     	 ldr r2,[r7,#12]
 2220 0140 1344     	 add r3,r3,r2
 2221 0142 1A1D     	 adds r2,r3,#4
 2222 0144 7B68     	 ldr r3,[r7,#4]
 2223 0146 9BB2     	 uxth r3,r3
 2224 0148 1046     	 mov r0,r2
 2225 014a 1946     	 mov r1,r3
 2226 014c FFF7FEFF 	 bl st_word
1287:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2227              	 .loc 1 1287 0
 2228 0150 FB68     	 ldr r3,[r7,#12]
 2229 0152 0122     	 movs r2,#1
 2230 0154 DA70     	 strb r2,[r3,#3]
1288:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2231              	 .loc 1 1288 0
 2232 0156 31E0     	 b .L115
 2233              	.L117:
1289:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1290:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_FAT32:
1291:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1292:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case FS_EXFAT:
1293:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1294:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 2234              	 .loc 1 1294 0
 2235 0158 FB68     	 ldr r3,[r7,#12]
 2236 015a 5A6A     	 ldr r2,[r3,#36]
 2237 015c BB68     	 ldr r3,[r7,#8]
 2238 015e DB09     	 lsrs r3,r3,#7
 2239 0160 1344     	 add r3,r3,r2
 2240 0162 F868     	 ldr r0,[r7,#12]
 2241 0164 1946     	 mov r1,r3
 2242 0166 FFF7FEFF 	 bl move_window
 2243 016a 0346     	 mov r3,r0
 2244 016c FB77     	 strb r3,[r7,#31]
1295:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 2245              	 .loc 1 1295 0
 2246 016e FB7F     	 ldrb r3,[r7,#31]
 2247 0170 002B     	 cmp r3,#0
 2248 0172 00D0     	 beq .L126
 2249 0174 22E0     	 b .L115
 2250              	.L126:
1296:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1297:../Dave/Generated/FATFS/ff_Src/ff.c **** 				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 2251              	 .loc 1 1297 0
 2252 0176 7B68     	 ldr r3,[r7,#4]
 2253 0178 23F07044 	 bic r4,r3,#-268435456
 2254 017c BB68     	 ldr r3,[r7,#8]
 2255 017e 9B00     	 lsls r3,r3,#2
 2256 0180 03F4FE73 	 and r3,r3,#508
 2257 0184 3033     	 adds r3,r3,#48
 2258 0186 FA68     	 ldr r2,[r7,#12]
 2259 0188 1344     	 add r3,r3,r2
 2260 018a 0433     	 adds r3,r3,#4
 2261 018c 1846     	 mov r0,r3
 2262 018e FFF7FEFF 	 bl ld_dword
 2263 0192 0346     	 mov r3,r0
 2264 0194 03F07043 	 and r3,r3,#-268435456
 2265 0198 2343     	 orrs r3,r3,r4
 2266 019a 7B60     	 str r3,[r7,#4]
1298:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1299:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(fs->win + clst * 4 % SS(fs), val);
 2267              	 .loc 1 1299 0
 2268 019c BB68     	 ldr r3,[r7,#8]
 2269 019e 9B00     	 lsls r3,r3,#2
 2270 01a0 03F4FE73 	 and r3,r3,#508
 2271 01a4 3033     	 adds r3,r3,#48
 2272 01a6 FA68     	 ldr r2,[r7,#12]
 2273 01a8 1344     	 add r3,r3,r2
 2274 01aa 0433     	 adds r3,r3,#4
 2275 01ac 1846     	 mov r0,r3
 2276 01ae 7968     	 ldr r1,[r7,#4]
 2277 01b0 FFF7FEFF 	 bl st_dword
1300:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 2278              	 .loc 1 1300 0
 2279 01b4 FB68     	 ldr r3,[r7,#12]
 2280 01b6 0122     	 movs r2,#1
 2281 01b8 DA70     	 strb r2,[r3,#3]
1301:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 2282              	 .loc 1 1301 0
 2283 01ba 00BF     	 nop
 2284              	.L115:
1302:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1303:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 2285              	 .loc 1 1304 0
 2286 01bc FB7F     	 ldrb r3,[r7,#31]
1305:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2287              	 .loc 1 1305 0
 2288 01be 1846     	 mov r0,r3
 2289 01c0 2437     	 adds r7,r7,#36
 2290              	.LCFI119:
 2291              	 .cfi_def_cfa_offset 12
 2292 01c2 BD46     	 mov sp,r7
 2293              	.LCFI120:
 2294              	 .cfi_def_cfa_register 13
 2295              	 
 2296 01c4 90BD     	 pop {r4,r7,pc}
 2297              	 .cfi_endproc
 2298              	.LFE20:
 2300 01c6 00BF     	 .section .text.remove_chain,"ax",%progbits
 2301              	 .align 2
 2302              	 .thumb
 2303              	 .thumb_func
 2305              	remove_chain:
 2306              	.LFB21:
1306:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1307:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1308:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1309:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1310:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1311:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1312:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
1313:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1314:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Accessing FAT and Allocation Bitmap                            */
1315:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1316:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1317:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1318:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find a contiguous free cluster block */
1319:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------*/
1320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1321:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
1322:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to scan from */
1324:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl	/* Number of contiguous clusters to find (1..) */
1325:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1326:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1327:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm, bv;
1328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD val, scl, ctr;
1330:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1331:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1332:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
1333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst >= fs->n_fatent - 2) clst = 0;
1334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	scl = val = clst; ctr = 0;
1335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1336:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
1337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = val / 8 % SS(fs); bm = 1 << (val % 8);
1338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1339:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1340:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
1341:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
1342:../Dave/Generated/FATFS/ff_Src/ff.c **** 					val = 0; bm = 0; i = SS(fs);
1343:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1344:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == 0) {	/* Is it a free cluster? */
1345:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
1346:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
1347:../Dave/Generated/FATFS/ff_Src/ff.c **** 					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
1348:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1349:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (val == clst) return 0;	/* All cluster scanned? */
1350:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm != 0);
1351:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1352:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));
1353:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1354:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1355:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1356:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1357:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1358:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set/Clear a block of allocation bitmap */
1359:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
1360:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1361:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT change_bitmap (
1362:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Filesystem object */
1363:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,	/* Cluster number to change from */
1364:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl,	/* Number of clusters to be changed */
1365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int bv		/* bit value to be set (0 or 1) */
1366:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1367:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1368:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bm;
1369:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
1370:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
1371:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1372:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1373:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst -= 2;	/* The first bit corresponds to cluster #2 */
1374:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
1375:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
1376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bm = 1 << (clst % 8);					/* Bit mask in the byte */
1377:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1378:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
1379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1380:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
1381:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
1382:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->win[i] ^= bm;	/* Flip the bit */
1383:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
1384:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--ncl == 0) return FR_OK;	/* All bits processed? */
1385:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (bm <<= 1);		/* Next bit */
1386:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bm = 1;
1387:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++i < SS(fs));		/* Next byte */
1388:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
1389:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1390:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1391:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1392:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1393:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1394:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the first fragment of the FAT chain    */
1395:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1396:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1397:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_first_frag (
1398:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Pointer to the corresponding object */
1399:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1400:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1402:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, n;
1403:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1404:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
1406:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
1407:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(obj->fs, cl, cl + 1);
1408:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
1409:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1410:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->stat = 0;	/* Change status 'FAT chain is valid' */
1411:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1413:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1414:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1415:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1416:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1417:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Fill the last fragment of the FAT chain     */
1418:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------*/
1419:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1420:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT fill_last_frag (
1421:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,	/* Pointer to the corresponding object */
1422:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD lcl,		/* Last cluster of the fragment */
1423:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD term		/* Value to set the last FAT entry */
1424:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1425:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1426:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1427:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1428:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
1430:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
1431:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
1432:../Dave/Generated/FATFS/ff_Src/ff.c **** 		obj->n_frag--;
1433:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
1435:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1436:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1437:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT && !FF_FS_READONLY */
1438:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1439:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1440:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1441:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1442:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1443:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Remove a cluster chain                                 */
1444:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1445:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1446:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
1447:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst,			/* Cluster to remove a chain from */
1449:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
1450:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1451:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2307              	 .loc 1 1451 0
 2308              	 .cfi_startproc
 2309              	 
 2310              	 
 2311 0000 80B5     	 push {r7,lr}
 2312              	.LCFI121:
 2313              	 .cfi_def_cfa_offset 8
 2314              	 .cfi_offset 7,-8
 2315              	 .cfi_offset 14,-4
 2316 0002 88B0     	 sub sp,sp,#32
 2317              	.LCFI122:
 2318              	 .cfi_def_cfa_offset 40
 2319 0004 00AF     	 add r7,sp,#0
 2320              	.LCFI123:
 2321              	 .cfi_def_cfa_register 7
 2322 0006 F860     	 str r0,[r7,#12]
 2323 0008 B960     	 str r1,[r7,#8]
 2324 000a 7A60     	 str r2,[r7,#4]
1452:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_OK;
 2325              	 .loc 1 1452 0
 2326 000c 0023     	 movs r3,#0
 2327 000e FB77     	 strb r3,[r7,#31]
1453:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nxt;
1454:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2328              	 .loc 1 1454 0
 2329 0010 FB68     	 ldr r3,[r7,#12]
 2330 0012 1B68     	 ldr r3,[r3]
 2331 0014 BB61     	 str r3,[r7,#24]
1455:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1456:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD scl = clst, ecl = clst;
1457:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1458:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1459:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t rt[2];
1460:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1461:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1462:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 2332              	 .loc 1 1462 0
 2333 0016 BB68     	 ldr r3,[r7,#8]
 2334 0018 012B     	 cmp r3,#1
 2335 001a 04D9     	 bls .L129
 2336              	 .loc 1 1462 0 is_stmt 0 discriminator 2
 2337 001c BB69     	 ldr r3,[r7,#24]
 2338 001e 9A69     	 ldr r2,[r3,#24]
 2339 0020 BB68     	 ldr r3,[r7,#8]
 2340 0022 9A42     	 cmp r2,r3
 2341 0024 01D8     	 bhi .L130
 2342              	.L129:
 2343              	 .loc 1 1462 0 discriminator 3
 2344 0026 0223     	 movs r3,#2
 2345 0028 4AE0     	 b .L131
 2346              	.L130:
1463:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1464:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Mark the previous cluster 'EOC' on the FAT if it exists */
1465:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 2347              	 .loc 1 1465 0 is_stmt 1
 2348 002a 7B68     	 ldr r3,[r7,#4]
 2349 002c 002B     	 cmp r3,#0
 2350 002e 0CD0     	 beq .L132
1466:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, pclst, 0xFFFFFFFF);
 2351              	 .loc 1 1466 0
 2352 0030 B869     	 ldr r0,[r7,#24]
 2353 0032 7968     	 ldr r1,[r7,#4]
 2354 0034 4FF0FF32 	 mov r2,#-1
 2355 0038 FFF7FEFF 	 bl put_fat
 2356 003c 0346     	 mov r3,r0
 2357 003e FB77     	 strb r3,[r7,#31]
1467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
 2358              	 .loc 1 1467 0
 2359 0040 FB7F     	 ldrb r3,[r7,#31]
 2360 0042 002B     	 cmp r3,#0
 2361 0044 01D0     	 beq .L132
 2362              	 .loc 1 1467 0 is_stmt 0 discriminator 1
 2363 0046 FB7F     	 ldrb r3,[r7,#31]
 2364 0048 3AE0     	 b .L131
 2365              	.L132:
1468:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1469:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1470:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Remove the chain */
1471:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nxt = get_fat(obj, clst);			/* Get cluster status */
 2366              	 .loc 1 1472 0 is_stmt 1
 2367 004a F868     	 ldr r0,[r7,#12]
 2368 004c B968     	 ldr r1,[r7,#8]
 2369 004e FFF7FEFF 	 bl get_fat
 2370 0052 7861     	 str r0,[r7,#20]
1473:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0) break;				/* Empty cluster? */
 2371              	 .loc 1 1473 0
 2372 0054 7B69     	 ldr r3,[r7,#20]
 2373 0056 002B     	 cmp r3,#0
 2374 0058 00D1     	 bne .L133
 2375 005a 30E0     	 b .L134
 2376              	.L133:
1474:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 2377              	 .loc 1 1474 0
 2378 005c 7B69     	 ldr r3,[r7,#20]
 2379 005e 012B     	 cmp r3,#1
 2380 0060 01D1     	 bne .L135
 2381              	 .loc 1 1474 0 is_stmt 0 discriminator 1
 2382 0062 0223     	 movs r3,#2
 2383 0064 2CE0     	 b .L131
 2384              	.L135:
1475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 2385              	 .loc 1 1475 0 is_stmt 1
 2386 0066 7B69     	 ldr r3,[r7,#20]
 2387 0068 B3F1FF3F 	 cmp r3,#-1
 2388 006c 01D1     	 bne .L136
 2389              	 .loc 1 1475 0 is_stmt 0 discriminator 1
 2390 006e 0123     	 movs r3,#1
 2391 0070 26E0     	 b .L131
 2392              	.L136:
1476:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
1477:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 2393              	 .loc 1 1477 0 is_stmt 1
 2394 0072 B869     	 ldr r0,[r7,#24]
 2395 0074 B968     	 ldr r1,[r7,#8]
 2396 0076 0022     	 movs r2,#0
 2397 0078 FFF7FEFF 	 bl put_fat
 2398 007c 0346     	 mov r3,r0
 2399 007e FB77     	 strb r3,[r7,#31]
1478:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
 2400              	 .loc 1 1478 0
 2401 0080 FB7F     	 ldrb r3,[r7,#31]
 2402 0082 002B     	 cmp r3,#0
 2403 0084 01D0     	 beq .L137
 2404              	 .loc 1 1478 0 is_stmt 0 discriminator 1
 2405 0086 FB7F     	 ldrb r3,[r7,#31]
 2406 0088 1AE0     	 b .L131
 2407              	.L137:
1479:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1480:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 2408              	 .loc 1 1480 0 is_stmt 1
 2409 008a BB69     	 ldr r3,[r7,#24]
 2410 008c 1A69     	 ldr r2,[r3,#16]
 2411 008e BB69     	 ldr r3,[r7,#24]
 2412 0090 9B69     	 ldr r3,[r3,#24]
 2413 0092 023B     	 subs r3,r3,#2
 2414 0094 9A42     	 cmp r2,r3
 2415 0096 0BD2     	 bcs .L138
1481:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst++;
 2416              	 .loc 1 1481 0
 2417 0098 BB69     	 ldr r3,[r7,#24]
 2418 009a 1B69     	 ldr r3,[r3,#16]
 2419 009c 5A1C     	 adds r2,r3,#1
 2420 009e BB69     	 ldr r3,[r7,#24]
 2421 00a0 1A61     	 str r2,[r3,#16]
1482:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;
 2422              	 .loc 1 1482 0
 2423 00a2 BB69     	 ldr r3,[r7,#24]
 2424 00a4 1B79     	 ldrb r3,[r3,#4]
 2425 00a6 43F00103 	 orr r3,r3,#1
 2426 00aa DAB2     	 uxtb r2,r3
 2427 00ac BB69     	 ldr r3,[r7,#24]
 2428 00ae 1A71     	 strb r2,[r3,#4]
 2429              	.L138:
1483:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1484:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT || FF_USE_TRIM
1485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
1486:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ecl = nxt;
1487:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* End of contiguous cluster block */
1488:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1489:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
1490:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap 
1491:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
1492:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1493:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1494:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
1495:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
1496:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
1497:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be
1498:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1499:../Dave/Generated/FATFS/ff_Src/ff.c **** 			scl = ecl = nxt;
1500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1501:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = nxt;					/* Next cluster */
 2430              	 .loc 1 1502 0
 2431 00b0 7B69     	 ldr r3,[r7,#20]
 2432 00b2 BB60     	 str r3,[r7,#8]
1503:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 2433              	 .loc 1 1503 0
 2434 00b4 BB69     	 ldr r3,[r7,#24]
 2435 00b6 9A69     	 ldr r2,[r3,#24]
 2436 00b8 BB68     	 ldr r3,[r7,#8]
 2437 00ba 9A42     	 cmp r2,r3
 2438 00bc C5D8     	 bhi .L132
 2439              	.L134:
1504:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1505:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1506:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Some post processes for chain status */
1507:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
1508:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pclst == 0) {	/* Has the entire chain been removed? */
1509:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 0;		/* Change the chain status 'initial' */
1510:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1511:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
1512:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
1513:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (clst != pclst) {
1514:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nxt = get_fat(obj, clst);
1515:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt < 2) return FR_INT_ERR;
1516:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
1517:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nxt != clst + 1) break;	/* Not contiguous? */
1518:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst++;
1519:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1520:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == pclst) {	/* Has the chain got contiguous again? */
1521:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;		/* Change the chain status 'contiguous' */
1522:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1523:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1524:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the 
1525:../Dave/Generated/FATFS/ff_Src/ff.c **** 					obj->stat = 2;	/* Change the chain status 'contiguous' */
1526:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1527:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1529:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1530:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1531:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 2440              	 .loc 1 1531 0
 2441 00be 0023     	 movs r3,#0
 2442              	.L131:
1532:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2443              	 .loc 1 1532 0
 2444 00c0 1846     	 mov r0,r3
 2445 00c2 2037     	 adds r7,r7,#32
 2446              	.LCFI124:
 2447              	 .cfi_def_cfa_offset 8
 2448 00c4 BD46     	 mov sp,r7
 2449              	.LCFI125:
 2450              	 .cfi_def_cfa_register 13
 2451              	 
 2452 00c6 80BD     	 pop {r7,pc}
 2453              	 .cfi_endproc
 2454              	.LFE21:
 2456              	 .section .text.create_chain,"ax",%progbits
 2457              	 .align 2
 2458              	 .thumb
 2459              	 .thumb_func
 2461              	create_chain:
 2462              	.LFB22:
1533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1534:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1535:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1536:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1537:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1538:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Stretch a chain or Create a new chain                  */
1539:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1540:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1541:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New 
1542:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,		/* Corresponding object */
1543:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
1544:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1545:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2463              	 .loc 1 1545 0
 2464              	 .cfi_startproc
 2465              	 
 2466              	 
 2467 0000 80B5     	 push {r7,lr}
 2468              	.LCFI126:
 2469              	 .cfi_def_cfa_offset 8
 2470              	 .cfi_offset 7,-8
 2471              	 .cfi_offset 14,-4
 2472 0002 88B0     	 sub sp,sp,#32
 2473              	.LCFI127:
 2474              	 .cfi_def_cfa_offset 40
 2475 0004 00AF     	 add r7,sp,#0
 2476              	.LCFI128:
 2477              	 .cfi_def_cfa_register 7
 2478 0006 7860     	 str r0,[r7,#4]
 2479 0008 3960     	 str r1,[r7]
1546:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cs, ncl, scl;
1547:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = obj->fs;
 2480              	 .loc 1 1548 0
 2481 000a 7B68     	 ldr r3,[r7,#4]
 2482 000c 1B68     	 ldr r3,[r3]
 2483 000e 3B61     	 str r3,[r7,#16]
1549:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1550:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1551:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Create a new chain */
 2484              	 .loc 1 1551 0
 2485 0010 3B68     	 ldr r3,[r7]
 2486 0012 002B     	 cmp r3,#0
 2487 0014 0DD1     	 bne .L140
1552:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = fs->last_clst;				/* Suggested cluster to start to find */
 2488              	 .loc 1 1552 0
 2489 0016 3B69     	 ldr r3,[r7,#16]
 2490 0018 DB68     	 ldr r3,[r3,#12]
 2491 001a BB61     	 str r3,[r7,#24]
1553:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 2492              	 .loc 1 1553 0
 2493 001c BB69     	 ldr r3,[r7,#24]
 2494 001e 002B     	 cmp r3,#0
 2495 0020 04D0     	 beq .L141
 2496              	 .loc 1 1553 0 is_stmt 0 discriminator 2
 2497 0022 3B69     	 ldr r3,[r7,#16]
 2498 0024 9A69     	 ldr r2,[r3,#24]
 2499 0026 BB69     	 ldr r3,[r7,#24]
 2500 0028 9A42     	 cmp r2,r3
 2501 002a 1BD8     	 bhi .L143
 2502              	.L141:
 2503              	 .loc 1 1553 0 discriminator 3
 2504 002c 0123     	 movs r3,#1
 2505 002e BB61     	 str r3,[r7,#24]
 2506 0030 18E0     	 b .L143
 2507              	.L140:
1554:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	else {				/* Stretch a chain */
1556:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cs = get_fat(obj, clst);			/* Check the cluster status */
 2508              	 .loc 1 1556 0 is_stmt 1
 2509 0032 7868     	 ldr r0,[r7,#4]
 2510 0034 3968     	 ldr r1,[r7]
 2511 0036 FFF7FEFF 	 bl get_fat
 2512 003a F860     	 str r0,[r7,#12]
1557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < 2) return 1;				/* Test for insanity */
 2513              	 .loc 1 1557 0
 2514 003c FB68     	 ldr r3,[r7,#12]
 2515 003e 012B     	 cmp r3,#1
 2516 0040 01D8     	 bhi .L144
 2517              	 .loc 1 1557 0 is_stmt 0 discriminator 1
 2518 0042 0123     	 movs r3,#1
 2519 0044 AAE0     	 b .L145
 2520              	.L144:
1558:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 2521              	 .loc 1 1558 0 is_stmt 1
 2522 0046 FB68     	 ldr r3,[r7,#12]
 2523 0048 B3F1FF3F 	 cmp r3,#-1
 2524 004c 01D1     	 bne .L146
 2525              	 .loc 1 1558 0 is_stmt 0 discriminator 1
 2526 004e FB68     	 ldr r3,[r7,#12]
 2527 0050 A4E0     	 b .L145
 2528              	.L146:
1559:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 2529              	 .loc 1 1559 0 is_stmt 1
 2530 0052 3B69     	 ldr r3,[r7,#16]
 2531 0054 9A69     	 ldr r2,[r3,#24]
 2532 0056 FB68     	 ldr r3,[r7,#12]
 2533 0058 9A42     	 cmp r2,r3
 2534 005a 01D9     	 bls .L147
 2535              	 .loc 1 1559 0 is_stmt 0 discriminator 1
 2536 005c FB68     	 ldr r3,[r7,#12]
 2537 005e 9DE0     	 b .L145
 2538              	.L147:
1560:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst;							/* Cluster to start to find */
 2539              	 .loc 1 1560 0 is_stmt 1
 2540 0060 3B68     	 ldr r3,[r7]
 2541 0062 BB61     	 str r3,[r7,#24]
 2542              	.L143:
1561:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1562:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->free_clst == 0) return 0;		/* No free cluster */
 2543              	 .loc 1 1562 0
 2544 0064 3B69     	 ldr r3,[r7,#16]
 2545 0066 1B69     	 ldr r3,[r3,#16]
 2546 0068 002B     	 cmp r3,#0
 2547 006a 01D1     	 bne .L148
 2548              	 .loc 1 1562 0 is_stmt 0 discriminator 1
 2549 006c 0023     	 movs r3,#0
 2550 006e 95E0     	 b .L145
 2551              	.L148:
1563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1564:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1565:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
1566:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
1567:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
1568:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
1569:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_INT_ERR) return 1;
1570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
1571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (clst == 0) {							/* Is it a new chain? */
1572:../Dave/Generated/FATFS/ff_Src/ff.c **** 			obj->stat = 2;							/* Set status 'contiguous' */
1573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {									/* It is a stretched chain */
1574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
1575:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
1576:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->stat = 3;						/* Change status 'just fragmented' */
1577:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1578:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1579:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (obj->stat != 2) {	/* Is the file non-contiguous? */
1580:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
1581:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
1582:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* New fragment */
1583:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (obj->n_frag == 0) obj->n_frag = 1;
1584:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one *
1585:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) obj->n_frag = 1;
1586:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1587:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1588:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1589:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1590:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
1591:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = 0;
 2552              	 .loc 1 1591 0 is_stmt 1
 2553 0070 0023     	 movs r3,#0
 2554 0072 FB61     	 str r3,[r7,#28]
1592:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == clst) {						/* Stretching an existing chain? */
 2555              	 .loc 1 1592 0
 2556 0074 BA69     	 ldr r2,[r7,#24]
 2557 0076 3B68     	 ldr r3,[r7]
 2558 0078 9A42     	 cmp r2,r3
 2559 007a 29D1     	 bne .L149
1593:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl + 1;						/* Test if next cluster is free */
 2560              	 .loc 1 1593 0
 2561 007c BB69     	 ldr r3,[r7,#24]
 2562 007e 0133     	 adds r3,r3,#1
 2563 0080 FB61     	 str r3,[r7,#28]
1594:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl >= fs->n_fatent) ncl = 2;
 2564              	 .loc 1 1594 0
 2565 0082 3B69     	 ldr r3,[r7,#16]
 2566 0084 9A69     	 ldr r2,[r3,#24]
 2567 0086 FB69     	 ldr r3,[r7,#28]
 2568 0088 9A42     	 cmp r2,r3
 2569 008a 01D8     	 bhi .L150
 2570              	 .loc 1 1594 0 is_stmt 0 discriminator 1
 2571 008c 0223     	 movs r3,#2
 2572 008e FB61     	 str r3,[r7,#28]
 2573              	.L150:
1595:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cs = get_fat(obj, ncl);				/* Get next cluster status */
 2574              	 .loc 1 1595 0 is_stmt 1
 2575 0090 7868     	 ldr r0,[r7,#4]
 2576 0092 F969     	 ldr r1,[r7,#28]
 2577 0094 FFF7FEFF 	 bl get_fat
 2578 0098 F860     	 str r0,[r7,#12]
1596:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2579              	 .loc 1 1596 0
 2580 009a FB68     	 ldr r3,[r7,#12]
 2581 009c 012B     	 cmp r3,#1
 2582 009e 03D0     	 beq .L151
 2583              	 .loc 1 1596 0 is_stmt 0 discriminator 2
 2584 00a0 FB68     	 ldr r3,[r7,#12]
 2585 00a2 B3F1FF3F 	 cmp r3,#-1
 2586 00a6 01D1     	 bne .L152
 2587              	.L151:
 2588              	 .loc 1 1596 0 discriminator 3
 2589 00a8 FB68     	 ldr r3,[r7,#12]
 2590 00aa 77E0     	 b .L145
 2591              	.L152:
1597:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cs != 0) {						/* Not free? */
 2592              	 .loc 1 1597 0 is_stmt 1
 2593 00ac FB68     	 ldr r3,[r7,#12]
 2594 00ae 002B     	 cmp r3,#0
 2595 00b0 0ED0     	 beq .L149
1598:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 2596              	 .loc 1 1598 0
 2597 00b2 3B69     	 ldr r3,[r7,#16]
 2598 00b4 DB68     	 ldr r3,[r3,#12]
 2599 00b6 FB60     	 str r3,[r7,#12]
1599:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 2600              	 .loc 1 1599 0
 2601 00b8 FB68     	 ldr r3,[r7,#12]
 2602 00ba 012B     	 cmp r3,#1
 2603 00bc 06D9     	 bls .L153
 2604              	 .loc 1 1599 0 is_stmt 0 discriminator 1
 2605 00be 3B69     	 ldr r3,[r7,#16]
 2606 00c0 9A69     	 ldr r2,[r3,#24]
 2607 00c2 FB68     	 ldr r3,[r7,#12]
 2608 00c4 9A42     	 cmp r2,r3
 2609 00c6 01D9     	 bls .L153
 2610              	 .loc 1 1599 0 discriminator 2
 2611 00c8 FB68     	 ldr r3,[r7,#12]
 2612 00ca BB61     	 str r3,[r7,#24]
 2613              	.L153:
1600:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl = 0;
 2614              	 .loc 1 1600 0 is_stmt 1
 2615 00cc 0023     	 movs r3,#0
 2616 00ce FB61     	 str r3,[r7,#28]
 2617              	.L149:
1601:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1602:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1603:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 2618              	 .loc 1 1603 0
 2619 00d0 FB69     	 ldr r3,[r7,#28]
 2620 00d2 002B     	 cmp r3,#0
 2621 00d4 2AD1     	 bne .L154
1604:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = scl;	/* Start cluster */
 2622              	 .loc 1 1604 0
 2623 00d6 BB69     	 ldr r3,[r7,#24]
 2624 00d8 FB61     	 str r3,[r7,#28]
 2625              	.L160:
1605:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (;;) {
1606:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ncl++;							/* Next cluster */
 2626              	 .loc 1 1606 0
 2627 00da FB69     	 ldr r3,[r7,#28]
 2628 00dc 0133     	 adds r3,r3,#1
 2629 00de FB61     	 str r3,[r7,#28]
1607:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 2630              	 .loc 1 1607 0
 2631 00e0 3B69     	 ldr r3,[r7,#16]
 2632 00e2 9A69     	 ldr r2,[r3,#24]
 2633 00e4 FB69     	 ldr r3,[r7,#28]
 2634 00e6 9A42     	 cmp r2,r3
 2635 00e8 07D8     	 bhi .L155
1608:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ncl = 2;
 2636              	 .loc 1 1608 0
 2637 00ea 0223     	 movs r3,#2
 2638 00ec FB61     	 str r3,[r7,#28]
1609:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ncl > scl) return 0;	/* No free cluster found? */
 2639              	 .loc 1 1609 0
 2640 00ee FA69     	 ldr r2,[r7,#28]
 2641 00f0 BB69     	 ldr r3,[r7,#24]
 2642 00f2 9A42     	 cmp r2,r3
 2643 00f4 01D9     	 bls .L155
 2644              	 .loc 1 1609 0 is_stmt 0 discriminator 1
 2645 00f6 0023     	 movs r3,#0
 2646 00f8 50E0     	 b .L145
 2647              	.L155:
1610:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1611:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cs = get_fat(obj, ncl);			/* Get the cluster status */
 2648              	 .loc 1 1611 0 is_stmt 1
 2649 00fa 7868     	 ldr r0,[r7,#4]
 2650 00fc F969     	 ldr r1,[r7,#28]
 2651 00fe FFF7FEFF 	 bl get_fat
 2652 0102 F860     	 str r0,[r7,#12]
1612:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 0) break;				/* Found a free cluster? */
 2653              	 .loc 1 1612 0
 2654 0104 FB68     	 ldr r3,[r7,#12]
 2655 0106 002B     	 cmp r3,#0
 2656 0108 00D1     	 bne .L156
 2657 010a 0FE0     	 b .L154
 2658              	.L156:
1613:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 2659              	 .loc 1 1613 0
 2660 010c FB68     	 ldr r3,[r7,#12]
 2661 010e 012B     	 cmp r3,#1
 2662 0110 03D0     	 beq .L157
 2663              	 .loc 1 1613 0 is_stmt 0 discriminator 2
 2664 0112 FB68     	 ldr r3,[r7,#12]
 2665 0114 B3F1FF3F 	 cmp r3,#-1
 2666 0118 01D1     	 bne .L158
 2667              	.L157:
 2668              	 .loc 1 1613 0 discriminator 3
 2669 011a FB68     	 ldr r3,[r7,#12]
 2670 011c 3EE0     	 b .L145
 2671              	.L158:
1614:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ncl == scl) return 0;		/* No free cluster found? */
 2672              	 .loc 1 1614 0 is_stmt 1
 2673 011e FA69     	 ldr r2,[r7,#28]
 2674 0120 BB69     	 ldr r3,[r7,#24]
 2675 0122 9A42     	 cmp r2,r3
 2676 0124 01D1     	 bne .L159
 2677              	 .loc 1 1614 0 is_stmt 0 discriminator 1
 2678 0126 0023     	 movs r3,#0
 2679 0128 38E0     	 b .L145
 2680              	.L159:
1615:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
 2681              	 .loc 1 1615 0 is_stmt 1
 2682 012a D6E7     	 b .L160
 2683              	.L154:
1616:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1617:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 2684              	 .loc 1 1617 0
 2685 012c 3869     	 ldr r0,[r7,#16]
 2686 012e F969     	 ldr r1,[r7,#28]
 2687 0130 4FF0FF32 	 mov r2,#-1
 2688 0134 FFF7FEFF 	 bl put_fat
 2689 0138 0346     	 mov r3,r0
 2690 013a FB75     	 strb r3,[r7,#23]
1618:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && clst != 0) {
 2691              	 .loc 1 1618 0
 2692 013c FB7D     	 ldrb r3,[r7,#23]
 2693 013e 002B     	 cmp r3,#0
 2694 0140 09D1     	 bne .L161
 2695              	 .loc 1 1618 0 is_stmt 0 discriminator 1
 2696 0142 3B68     	 ldr r3,[r7]
 2697 0144 002B     	 cmp r3,#0
 2698 0146 06D0     	 beq .L161
1619:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 2699              	 .loc 1 1619 0 is_stmt 1
 2700 0148 3869     	 ldr r0,[r7,#16]
 2701 014a 3968     	 ldr r1,[r7]
 2702 014c FA69     	 ldr r2,[r7,#28]
 2703 014e FFF7FEFF 	 bl put_fat
 2704 0152 0346     	 mov r3,r0
 2705 0154 FB75     	 strb r3,[r7,#23]
 2706              	.L161:
1620:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1621:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1622:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 2707              	 .loc 1 1623 0
 2708 0156 FB7D     	 ldrb r3,[r7,#23]
 2709 0158 002B     	 cmp r3,#0
 2710 015a 16D1     	 bne .L162
1624:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = ncl;
 2711              	 .loc 1 1624 0
 2712 015c 3B69     	 ldr r3,[r7,#16]
 2713 015e FA69     	 ldr r2,[r7,#28]
 2714 0160 DA60     	 str r2,[r3,#12]
1625:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 2715              	 .loc 1 1625 0
 2716 0162 3B69     	 ldr r3,[r7,#16]
 2717 0164 1A69     	 ldr r2,[r3,#16]
 2718 0166 3B69     	 ldr r3,[r7,#16]
 2719 0168 9B69     	 ldr r3,[r3,#24]
 2720 016a 023B     	 subs r3,r3,#2
 2721 016c 9A42     	 cmp r2,r3
 2722 016e 04D8     	 bhi .L163
 2723              	 .loc 1 1625 0 is_stmt 0 discriminator 1
 2724 0170 3B69     	 ldr r3,[r7,#16]
 2725 0172 1B69     	 ldr r3,[r3,#16]
 2726 0174 5A1E     	 subs r2,r3,#1
 2727 0176 3B69     	 ldr r3,[r7,#16]
 2728 0178 1A61     	 str r2,[r3,#16]
 2729              	.L163:
1626:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag |= 1;
 2730              	 .loc 1 1626 0 is_stmt 1
 2731 017a 3B69     	 ldr r3,[r7,#16]
 2732 017c 1B79     	 ldrb r3,[r3,#4]
 2733 017e 43F00103 	 orr r3,r3,#1
 2734 0182 DAB2     	 uxtb r2,r3
 2735 0184 3B69     	 ldr r3,[r7,#16]
 2736 0186 1A71     	 strb r2,[r3,#4]
 2737 0188 07E0     	 b .L164
 2738              	.L162:
1627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
1628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 2739              	 .loc 1 1628 0
 2740 018a FB7D     	 ldrb r3,[r7,#23]
 2741 018c 012B     	 cmp r3,#1
 2742 018e 02D1     	 bne .L165
 2743              	 .loc 1 1628 0 is_stmt 0 discriminator 1
 2744 0190 4FF0FF33 	 mov r3,#-1
 2745 0194 00E0     	 b .L166
 2746              	.L165:
 2747              	 .loc 1 1628 0 discriminator 2
 2748 0196 0123     	 movs r3,#1
 2749              	.L166:
 2750              	 .loc 1 1628 0 discriminator 4
 2751 0198 FB61     	 str r3,[r7,#28]
 2752              	.L164:
1629:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1630:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1631:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return ncl;		/* Return new cluster number or error status */
 2753              	 .loc 1 1631 0 is_stmt 1
 2754 019a FB69     	 ldr r3,[r7,#28]
 2755              	.L145:
1632:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2756              	 .loc 1 1632 0
 2757 019c 1846     	 mov r0,r3
 2758 019e 2037     	 adds r7,r7,#32
 2759              	.LCFI129:
 2760              	 .cfi_def_cfa_offset 8
 2761 01a0 BD46     	 mov sp,r7
 2762              	.LCFI130:
 2763              	 .cfi_def_cfa_register 13
 2764              	 
 2765 01a2 80BD     	 pop {r7,pc}
 2766              	 .cfi_endproc
 2767              	.LFE22:
 2769              	 .section .text.dir_clear,"ax",%progbits
 2770              	 .align 2
 2771              	 .thumb
 2772              	 .thumb_func
 2774              	dir_clear:
 2775              	.LFB23:
1633:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1634:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
1635:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1636:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1637:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1638:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1639:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
1640:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1641:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT handling - Convert offset into cluster with link map table        */
1642:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1643:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1644:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
1645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
1646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File offset to be converted to cluster# */
1647:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1648:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, ncl, *tbl;
1650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = fp->obj.fs;
1651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1652:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tbl = fp->cltbl + 1;	/* Top of CLMT */
1654:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
1655:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
1656:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ncl = *tbl++;			/* Number of cluters in the fragment */
1657:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ncl == 0) return 0;	/* End of table? (error) */
1658:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (cl < ncl) break;	/* In this fragment? */
1659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl -= ncl; tbl++;		/* Next fragment */
1660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl + *tbl;	/* Return the cluster number */
1662:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1663:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1664:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FASTSEEK */
1665:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1666:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1667:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1668:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1669:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1670:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Fill a cluster with zeros                        */
1671:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1672:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1673:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1674:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
1675:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs,		/* Filesystem object */
1676:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst		/* Directory table to clear */
1677:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1678:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2776              	 .loc 1 1678 0
 2777              	 .cfi_startproc
 2778              	 
 2779              	 
 2780 0000 80B5     	 push {r7,lr}
 2781              	.LCFI131:
 2782              	 .cfi_def_cfa_offset 8
 2783              	 .cfi_offset 7,-8
 2784              	 .cfi_offset 14,-4
 2785 0002 86B0     	 sub sp,sp,#24
 2786              	.LCFI132:
 2787              	 .cfi_def_cfa_offset 32
 2788 0004 00AF     	 add r7,sp,#0
 2789              	.LCFI133:
 2790              	 .cfi_def_cfa_register 7
 2791 0006 7860     	 str r0,[r7,#4]
 2792 0008 3960     	 str r1,[r7]
1679:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
1680:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, szb;
1681:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *ibuf;
1682:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1683:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 2793              	 .loc 1 1684 0
 2794 000a 7868     	 ldr r0,[r7,#4]
 2795 000c FFF7FEFF 	 bl sync_window
 2796 0010 0346     	 mov r3,r0
 2797 0012 002B     	 cmp r3,#0
 2798 0014 01D0     	 beq .L168
 2799              	 .loc 1 1684 0 is_stmt 0 discriminator 1
 2800 0016 0123     	 movs r3,#1
 2801 0018 38E0     	 b .L169
 2802              	.L168:
1685:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sect = clst2sect(fs, clst);		/* Top of the cluster */
 2803              	 .loc 1 1685 0 is_stmt 1
 2804 001a 7868     	 ldr r0,[r7,#4]
 2805 001c 3968     	 ldr r1,[r7]
 2806 001e FFF7FEFF 	 bl clst2sect
 2807 0022 3861     	 str r0,[r7,#16]
1686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->winsect = sect;				/* Set window to top of the cluster */
 2808              	 .loc 1 1686 0
 2809 0024 7B68     	 ldr r3,[r7,#4]
 2810 0026 3A69     	 ldr r2,[r7,#16]
 2811 0028 1A63     	 str r2,[r3,#48]
1687:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 2812              	 .loc 1 1687 0
 2813 002a 7B68     	 ldr r3,[r7,#4]
 2814 002c 3433     	 adds r3,r3,#52
 2815 002e 1846     	 mov r0,r3
 2816 0030 0021     	 movs r1,#0
 2817 0032 4FF40072 	 mov r2,#512
 2818 0036 FFF7FEFF 	 bl mem_set
1688:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3		/* Quick table clear by using multi-secter write */
1689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Allocate a temporary buffer */
1690:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (szb = ((DWORD)fs->csize * SS(fs) >= MAX_MALLOC) ? MAX_MALLOC : fs->csize * SS(fs), ibuf = 0; 
1691:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (szb > SS(fs)) {		/* Buffer allocated? */
1692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(ibuf, 0, szb);
1693:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb /= SS(fs);		/* Bytes -> Sectors */
1694:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
1695:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ff_memfree(ibuf);
1696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
1697:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1698:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
1699:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 2819              	 .loc 1 1699 0
 2820 003a 7B68     	 ldr r3,[r7,#4]
 2821 003c 3433     	 adds r3,r3,#52
 2822 003e FB60     	 str r3,[r7,#12]
 2823 0040 0123     	 movs r3,#1
 2824 0042 BB60     	 str r3,[r7,#8]
1700:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* 
 2825              	 .loc 1 1700 0
 2826 0044 0023     	 movs r3,#0
 2827 0046 7B61     	 str r3,[r7,#20]
 2828 0048 03E0     	 b .L170
 2829              	.L172:
 2830              	 .loc 1 1700 0 is_stmt 0 discriminator 4
 2831 004a 7A69     	 ldr r2,[r7,#20]
 2832 004c BB68     	 ldr r3,[r7,#8]
 2833 004e 1344     	 add r3,r3,r2
 2834 0050 7B61     	 str r3,[r7,#20]
 2835              	.L170:
 2836              	 .loc 1 1700 0 discriminator 1
 2837 0052 7B68     	 ldr r3,[r7,#4]
 2838 0054 5B89     	 ldrh r3,[r3,#10]
 2839 0056 1A46     	 mov r2,r3
 2840 0058 7B69     	 ldr r3,[r7,#20]
 2841 005a 9A42     	 cmp r2,r3
 2842 005c 0DD9     	 bls .L171
 2843              	 .loc 1 1700 0 discriminator 3
 2844 005e 7B68     	 ldr r3,[r7,#4]
 2845 0060 5978     	 ldrb r1,[r3,#1]
 2846 0062 3A69     	 ldr r2,[r7,#16]
 2847 0064 7B69     	 ldr r3,[r7,#20]
 2848 0066 1344     	 add r3,r3,r2
 2849 0068 0846     	 mov r0,r1
 2850 006a F968     	 ldr r1,[r7,#12]
 2851 006c 1A46     	 mov r2,r3
 2852 006e BB68     	 ldr r3,[r7,#8]
 2853 0070 FFF7FEFF 	 bl disk_write
 2854 0074 0346     	 mov r3,r0
 2855 0076 002B     	 cmp r3,#0
 2856 0078 E7D0     	 beq .L172
 2857              	.L171:
1701:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1702:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 2858              	 .loc 1 1702 0 is_stmt 1
 2859 007a 7B68     	 ldr r3,[r7,#4]
 2860 007c 5B89     	 ldrh r3,[r3,#10]
 2861 007e 1A46     	 mov r2,r3
 2862 0080 7B69     	 ldr r3,[r7,#20]
 2863 0082 9A42     	 cmp r2,r3
 2864 0084 14BF     	 ite ne
 2865 0086 0123     	 movne r3,#1
 2866 0088 0023     	 moveq r3,#0
 2867 008a DBB2     	 uxtb r3,r3
 2868              	.L169:
1703:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 2869              	 .loc 1 1703 0
 2870 008c 1846     	 mov r0,r3
 2871 008e 1837     	 adds r7,r7,#24
 2872              	.LCFI134:
 2873              	 .cfi_def_cfa_offset 8
 2874 0090 BD46     	 mov sp,r7
 2875              	.LCFI135:
 2876              	 .cfi_def_cfa_register 13
 2877              	 
 2878 0092 80BD     	 pop {r7,pc}
 2879              	 .cfi_endproc
 2880              	.LFE23:
 2882              	 .section .text.dir_sdi,"ax",%progbits
 2883              	 .align 2
 2884              	 .thumb
 2885              	 .thumb_func
 2887              	dir_sdi:
 2888              	.LFB24:
1704:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1705:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1706:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1707:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1708:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1709:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1710:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Set directory index                              */
1711:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1712:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1713:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
1714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to directory object */
1715:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs		/* Offset of directory table */
1716:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1717:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 2889              	 .loc 1 1717 0
 2890              	 .cfi_startproc
 2891              	 
 2892              	 
 2893 0000 80B5     	 push {r7,lr}
 2894              	.LCFI136:
 2895              	 .cfi_def_cfa_offset 8
 2896              	 .cfi_offset 7,-8
 2897              	 .cfi_offset 14,-4
 2898 0002 86B0     	 sub sp,sp,#24
 2899              	.LCFI137:
 2900              	 .cfi_def_cfa_offset 32
 2901 0004 00AF     	 add r7,sp,#0
 2902              	.LCFI138:
 2903              	 .cfi_def_cfa_register 7
 2904 0006 7860     	 str r0,[r7,#4]
 2905 0008 3960     	 str r1,[r7]
1718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD csz, clst;
1719:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 2906              	 .loc 1 1719 0
 2907 000a 7B68     	 ldr r3,[r7,#4]
 2908 000c 1B68     	 ldr r3,[r3]
 2909 000e 3B61     	 str r3,[r7,#16]
1720:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1721:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1722:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIR
 2910              	 .loc 1 1722 0
 2911 0010 3B68     	 ldr r3,[r7]
 2912 0012 B3F5001F 	 cmp r3,#2097152
 2913 0016 04D2     	 bcs .L174
 2914              	 .loc 1 1722 0 is_stmt 0 discriminator 1
 2915 0018 3B68     	 ldr r3,[r7]
 2916 001a 03F01F03 	 and r3,r3,#31
 2917 001e 002B     	 cmp r3,#0
 2918 0020 01D0     	 beq .L175
 2919              	.L174:
1723:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_INT_ERR;
 2920              	 .loc 1 1723 0 is_stmt 1
 2921 0022 0223     	 movs r3,#2
 2922 0024 63E0     	 b .L176
 2923              	.L175:
1724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;				/* Set current offset */
 2924              	 .loc 1 1725 0
 2925 0026 7B68     	 ldr r3,[r7,#4]
 2926 0028 3A68     	 ldr r2,[r7]
 2927 002a 5A61     	 str r2,[r3,#20]
1726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 2928              	 .loc 1 1726 0
 2929 002c 7B68     	 ldr r3,[r7,#4]
 2930 002e 9B68     	 ldr r3,[r3,#8]
 2931 0030 7B61     	 str r3,[r7,#20]
1727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 2932              	 .loc 1 1727 0
 2933 0032 7B69     	 ldr r3,[r7,#20]
 2934 0034 002B     	 cmp r3,#0
 2935 0036 06D1     	 bne .L177
 2936              	 .loc 1 1727 0 is_stmt 0 discriminator 1
 2937 0038 3B69     	 ldr r3,[r7,#16]
 2938 003a 1B78     	 ldrb r3,[r3]
 2939 003c 022B     	 cmp r3,#2
 2940 003e 02D9     	 bls .L177
1728:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clst = (DWORD)fs->dirbase;
 2941              	 .loc 1 1728 0 is_stmt 1
 2942 0040 3B69     	 ldr r3,[r7,#16]
 2943 0042 9B6A     	 ldr r3,[r3,#40]
 2944 0044 7B61     	 str r3,[r7,#20]
 2945              	.L177:
1729:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
1730:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1731:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 2946              	 .loc 1 1732 0
 2947 0046 7B69     	 ldr r3,[r7,#20]
 2948 0048 002B     	 cmp r3,#0
 2949 004a 0CD1     	 bne .L178
1733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 2950              	 .loc 1 1733 0
 2951 004c 3B68     	 ldr r3,[r7]
 2952 004e 5B09     	 lsrs r3,r3,#5
 2953 0050 3A69     	 ldr r2,[r7,#16]
 2954 0052 1289     	 ldrh r2,[r2,#8]
 2955 0054 9342     	 cmp r3,r2
 2956 0056 01D3     	 bcc .L179
 2957              	 .loc 1 1733 0 is_stmt 0 discriminator 1
 2958 0058 0223     	 movs r3,#2
 2959 005a 48E0     	 b .L176
 2960              	.L179:
1734:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = fs->dirbase;
 2961              	 .loc 1 1734 0 is_stmt 1
 2962 005c 3B69     	 ldr r3,[r7,#16]
 2963 005e 9A6A     	 ldr r2,[r3,#40]
 2964 0060 7B68     	 ldr r3,[r7,#4]
 2965 0062 DA61     	 str r2,[r3,#28]
 2966 0064 29E0     	 b .L180
 2967              	.L178:
1735:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
1737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 2968              	 .loc 1 1737 0
 2969 0066 3B69     	 ldr r3,[r7,#16]
 2970 0068 5B89     	 ldrh r3,[r3,#10]
 2971 006a 5B02     	 lsls r3,r3,#9
 2972 006c FB60     	 str r3,[r7,#12]
1738:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (ofs >= csz) {				/* Follow cluster chain */
 2973              	 .loc 1 1738 0
 2974 006e 19E0     	 b .L181
 2975              	.L185:
1739:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 2976              	 .loc 1 1739 0
 2977 0070 7B68     	 ldr r3,[r7,#4]
 2978 0072 1846     	 mov r0,r3
 2979 0074 7969     	 ldr r1,[r7,#20]
 2980 0076 FFF7FEFF 	 bl get_fat
 2981 007a 7861     	 str r0,[r7,#20]
1740:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 2982              	 .loc 1 1740 0
 2983 007c 7B69     	 ldr r3,[r7,#20]
 2984 007e B3F1FF3F 	 cmp r3,#-1
 2985 0082 01D1     	 bne .L182
 2986              	 .loc 1 1740 0 is_stmt 0 discriminator 1
 2987 0084 0123     	 movs r3,#1
 2988 0086 32E0     	 b .L176
 2989              	.L182:
1741:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal 
 2990              	 .loc 1 1741 0 is_stmt 1
 2991 0088 7B69     	 ldr r3,[r7,#20]
 2992 008a 012B     	 cmp r3,#1
 2993 008c 04D9     	 bls .L183
 2994              	 .loc 1 1741 0 is_stmt 0 discriminator 2
 2995 008e 3B69     	 ldr r3,[r7,#16]
 2996 0090 9A69     	 ldr r2,[r3,#24]
 2997 0092 7B69     	 ldr r3,[r7,#20]
 2998 0094 9A42     	 cmp r2,r3
 2999 0096 01D8     	 bhi .L184
 3000              	.L183:
 3001              	 .loc 1 1741 0 discriminator 3
 3002 0098 0223     	 movs r3,#2
 3003 009a 28E0     	 b .L176
 3004              	.L184:
1742:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs -= csz;
 3005              	 .loc 1 1742 0 is_stmt 1
 3006 009c 3A68     	 ldr r2,[r7]
 3007 009e FB68     	 ldr r3,[r7,#12]
 3008 00a0 D31A     	 subs r3,r2,r3
 3009 00a2 3B60     	 str r3,[r7]
 3010              	.L181:
1738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 3011              	 .loc 1 1738 0
 3012 00a4 3A68     	 ldr r2,[r7]
 3013 00a6 FB68     	 ldr r3,[r7,#12]
 3014 00a8 9A42     	 cmp r2,r3
 3015 00aa E1D2     	 bcs .L185
1743:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1744:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect = clst2sect(fs, clst);
 3016              	 .loc 1 1744 0
 3017 00ac 3869     	 ldr r0,[r7,#16]
 3018 00ae 7969     	 ldr r1,[r7,#20]
 3019 00b0 FFF7FEFF 	 bl clst2sect
 3020 00b4 0246     	 mov r2,r0
 3021 00b6 7B68     	 ldr r3,[r7,#4]
 3022 00b8 DA61     	 str r2,[r3,#28]
 3023              	.L180:
1745:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->clust = clst;					/* Current cluster# */
 3024              	 .loc 1 1746 0
 3025 00ba 7B68     	 ldr r3,[r7,#4]
 3026 00bc 7A69     	 ldr r2,[r7,#20]
 3027 00be 9A61     	 str r2,[r3,#24]
1747:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_INT_ERR;
 3028              	 .loc 1 1747 0
 3029 00c0 7B68     	 ldr r3,[r7,#4]
 3030 00c2 DB69     	 ldr r3,[r3,#28]
 3031 00c4 002B     	 cmp r3,#0
 3032 00c6 01D1     	 bne .L186
 3033              	 .loc 1 1747 0 is_stmt 0 discriminator 1
 3034 00c8 0223     	 movs r3,#2
 3035 00ca 10E0     	 b .L176
 3036              	.L186:
1748:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 3037              	 .loc 1 1748 0 is_stmt 1
 3038 00cc 7B68     	 ldr r3,[r7,#4]
 3039 00ce DA69     	 ldr r2,[r3,#28]
 3040 00d0 3B68     	 ldr r3,[r7]
 3041 00d2 5B0A     	 lsrs r3,r3,#9
 3042 00d4 1A44     	 add r2,r2,r3
 3043 00d6 7B68     	 ldr r3,[r7,#4]
 3044 00d8 DA61     	 str r2,[r3,#28]
1749:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 3045              	 .loc 1 1749 0
 3046 00da 3B68     	 ldr r3,[r7]
 3047 00dc C3F30803 	 ubfx r3,r3,#0,#9
 3048 00e0 3033     	 adds r3,r3,#48
 3049 00e2 3A69     	 ldr r2,[r7,#16]
 3050 00e4 1344     	 add r3,r3,r2
 3051 00e6 1A1D     	 adds r2,r3,#4
 3052 00e8 7B68     	 ldr r3,[r7,#4]
 3053 00ea 1A62     	 str r2,[r3,#32]
1750:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1751:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3054              	 .loc 1 1751 0
 3055 00ec 0023     	 movs r3,#0
 3056              	.L176:
1752:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3057              	 .loc 1 1752 0
 3058 00ee 1846     	 mov r0,r3
 3059 00f0 1837     	 adds r7,r7,#24
 3060              	.LCFI139:
 3061              	 .cfi_def_cfa_offset 8
 3062 00f2 BD46     	 mov sp,r7
 3063              	.LCFI140:
 3064              	 .cfi_def_cfa_register 13
 3065              	 
 3066 00f4 80BD     	 pop {r7,pc}
 3067              	 .cfi_endproc
 3068              	.LFE24:
 3070 00f6 00BF     	 .section .text.dir_next,"ax",%progbits
 3071              	 .align 2
 3072              	 .thumb
 3073              	 .thumb_func
 3075              	dir_next:
 3076              	.LFB25:
1753:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1754:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1755:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1756:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1757:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1758:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Move directory table index next                  */
1759:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1760:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1761:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stret
1762:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1763:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
1764:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1765:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3077              	 .loc 1 1765 0
 3078              	 .cfi_startproc
 3079              	 
 3080              	 
 3081 0000 80B5     	 push {r7,lr}
 3082              	.LCFI141:
 3083              	 .cfi_def_cfa_offset 8
 3084              	 .cfi_offset 7,-8
 3085              	 .cfi_offset 14,-4
 3086 0002 86B0     	 sub sp,sp,#24
 3087              	.LCFI142:
 3088              	 .cfi_def_cfa_offset 32
 3089 0004 00AF     	 add r7,sp,#0
 3090              	.LCFI143:
 3091              	 .cfi_def_cfa_register 7
 3092 0006 7860     	 str r0,[r7,#4]
 3093 0008 3960     	 str r1,[r7]
1766:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ofs, clst;
1767:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3094              	 .loc 1 1767 0
 3095 000a 7B68     	 ldr r3,[r7,#4]
 3096 000c 1B68     	 ldr r3,[r3]
 3097 000e 3B61     	 str r3,[r7,#16]
1768:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1769:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1770:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ofs = dp->dptr + SZDIRE;	/* Next entry */
 3098              	 .loc 1 1770 0
 3099 0010 7B68     	 ldr r3,[r7,#4]
 3100 0012 5B69     	 ldr r3,[r3,#20]
 3101 0014 2033     	 adds r3,r3,#32
 3102 0016 FB60     	 str r3,[r7,#12]
1771:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;
 3103              	 .loc 1 1771 0
 3104 0018 FB68     	 ldr r3,[r7,#12]
 3105 001a B3F5001F 	 cmp r3,#2097152
 3106 001e 02D3     	 bcc .L188
 3107              	 .loc 1 1771 0 is_stmt 0 discriminator 1
 3108 0020 7B68     	 ldr r3,[r7,#4]
 3109 0022 0022     	 movs r2,#0
 3110 0024 DA61     	 str r2,[r3,#28]
 3111              	.L188:
1772:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 3112              	 .loc 1 1772 0 is_stmt 1
 3113 0026 7B68     	 ldr r3,[r7,#4]
 3114 0028 DB69     	 ldr r3,[r3,#28]
 3115 002a 002B     	 cmp r3,#0
 3116 002c 01D1     	 bne .L189
 3117              	 .loc 1 1772 0 is_stmt 0 discriminator 1
 3118 002e 0423     	 movs r3,#4
 3119 0030 78E0     	 b .L190
 3120              	.L189:
1773:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1774:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 3121              	 .loc 1 1774 0 is_stmt 1
 3122 0032 FB68     	 ldr r3,[r7,#12]
 3123 0034 C3F30803 	 ubfx r3,r3,#0,#9
 3124 0038 002B     	 cmp r3,#0
 3125 003a 66D1     	 bne .L191
1775:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->sect++;				/* Next sector */
 3126              	 .loc 1 1775 0
 3127 003c 7B68     	 ldr r3,[r7,#4]
 3128 003e DB69     	 ldr r3,[r3,#28]
 3129 0040 5A1C     	 adds r2,r3,#1
 3130 0042 7B68     	 ldr r3,[r7,#4]
 3131 0044 DA61     	 str r2,[r3,#28]
1776:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1777:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->clust == 0) {	/* Static table */
 3132              	 .loc 1 1777 0
 3133 0046 7B68     	 ldr r3,[r7,#4]
 3134 0048 9B69     	 ldr r3,[r3,#24]
 3135 004a 002B     	 cmp r3,#0
 3136 004c 0AD1     	 bne .L192
1778:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 3137              	 .loc 1 1778 0
 3138 004e FB68     	 ldr r3,[r7,#12]
 3139 0050 5B09     	 lsrs r3,r3,#5
 3140 0052 3A69     	 ldr r2,[r7,#16]
 3141 0054 1289     	 ldrh r2,[r2,#8]
 3142 0056 9342     	 cmp r3,r2
 3143 0058 57D3     	 bcc .L191
1779:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = 0; return FR_NO_FILE;
 3144              	 .loc 1 1779 0
 3145 005a 7B68     	 ldr r3,[r7,#4]
 3146 005c 0022     	 movs r2,#0
 3147 005e DA61     	 str r2,[r3,#28]
 3148 0060 0423     	 movs r3,#4
 3149 0062 5FE0     	 b .L190
 3150              	.L192:
1780:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1781:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1782:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {					/* Dynamic table */
1783:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 3151              	 .loc 1 1783 0
 3152 0064 FB68     	 ldr r3,[r7,#12]
 3153 0066 5B0A     	 lsrs r3,r3,#9
 3154 0068 3A69     	 ldr r2,[r7,#16]
 3155 006a 5289     	 ldrh r2,[r2,#10]
 3156 006c 013A     	 subs r2,r2,#1
 3157 006e 1340     	 ands r3,r3,r2
 3158 0070 002B     	 cmp r3,#0
 3159 0072 4AD1     	 bne .L191
1784:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 3160              	 .loc 1 1784 0
 3161 0074 7A68     	 ldr r2,[r7,#4]
 3162 0076 7B68     	 ldr r3,[r7,#4]
 3163 0078 9B69     	 ldr r3,[r3,#24]
 3164 007a 1046     	 mov r0,r2
 3165 007c 1946     	 mov r1,r3
 3166 007e FFF7FEFF 	 bl get_fat
 3167 0082 7861     	 str r0,[r7,#20]
1785:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 3168              	 .loc 1 1785 0
 3169 0084 7B69     	 ldr r3,[r7,#20]
 3170 0086 012B     	 cmp r3,#1
 3171 0088 01D8     	 bhi .L193
 3172              	 .loc 1 1785 0 is_stmt 0 discriminator 1
 3173 008a 0223     	 movs r3,#2
 3174 008c 4AE0     	 b .L190
 3175              	.L193:
1786:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3176              	 .loc 1 1786 0 is_stmt 1
 3177 008e 7B69     	 ldr r3,[r7,#20]
 3178 0090 B3F1FF3F 	 cmp r3,#-1
 3179 0094 01D1     	 bne .L194
 3180              	 .loc 1 1786 0 is_stmt 0 discriminator 1
 3181 0096 0123     	 movs r3,#1
 3182 0098 44E0     	 b .L190
 3183              	.L194:
1787:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 3184              	 .loc 1 1787 0 is_stmt 1
 3185 009a 3B69     	 ldr r3,[r7,#16]
 3186 009c 9A69     	 ldr r2,[r3,#24]
 3187 009e 7B69     	 ldr r3,[r7,#20]
 3188 00a0 9A42     	 cmp r2,r3
 3189 00a2 28D8     	 bhi .L195
1788:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1789:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) {								/* If no stretch, report EOT */
 3190              	 .loc 1 1789 0
 3191 00a4 3B68     	 ldr r3,[r7]
 3192 00a6 002B     	 cmp r3,#0
 3193 00a8 04D1     	 bne .L196
1790:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->sect = 0; return FR_NO_FILE;
 3194              	 .loc 1 1790 0
 3195 00aa 7B68     	 ldr r3,[r7,#4]
 3196 00ac 0022     	 movs r2,#0
 3197 00ae DA61     	 str r2,[r3,#28]
 3198 00b0 0423     	 movs r3,#4
 3199 00b2 37E0     	 b .L190
 3200              	.L196:
1791:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
1792:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 3201              	 .loc 1 1792 0
 3202 00b4 7A68     	 ldr r2,[r7,#4]
 3203 00b6 7B68     	 ldr r3,[r7,#4]
 3204 00b8 9B69     	 ldr r3,[r3,#24]
 3205 00ba 1046     	 mov r0,r2
 3206 00bc 1946     	 mov r1,r3
 3207 00be FFF7FEFF 	 bl create_chain
 3208 00c2 7861     	 str r0,[r7,#20]
1793:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) return FR_DENIED;			/* No free cluster */
 3209              	 .loc 1 1793 0
 3210 00c4 7B69     	 ldr r3,[r7,#20]
 3211 00c6 002B     	 cmp r3,#0
 3212 00c8 01D1     	 bne .L197
 3213              	 .loc 1 1793 0 is_stmt 0 discriminator 1
 3214 00ca 0723     	 movs r3,#7
 3215 00cc 2AE0     	 b .L190
 3216              	.L197:
1794:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 3217              	 .loc 1 1794 0 is_stmt 1
 3218 00ce 7B69     	 ldr r3,[r7,#20]
 3219 00d0 012B     	 cmp r3,#1
 3220 00d2 01D1     	 bne .L198
 3221              	 .loc 1 1794 0 is_stmt 0 discriminator 1
 3222 00d4 0223     	 movs r3,#2
 3223 00d6 25E0     	 b .L190
 3224              	.L198:
1795:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 3225              	 .loc 1 1795 0 is_stmt 1
 3226 00d8 7B69     	 ldr r3,[r7,#20]
 3227 00da B3F1FF3F 	 cmp r3,#-1
 3228 00de 01D1     	 bne .L199
 3229              	 .loc 1 1795 0 is_stmt 0 discriminator 1
 3230 00e0 0123     	 movs r3,#1
 3231 00e2 1FE0     	 b .L190
 3232              	.L199:
1796:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 3233              	 .loc 1 1796 0 is_stmt 1
 3234 00e4 3869     	 ldr r0,[r7,#16]
 3235 00e6 7969     	 ldr r1,[r7,#20]
 3236 00e8 FFF7FEFF 	 bl dir_clear
 3237 00ec 0346     	 mov r3,r0
 3238 00ee 002B     	 cmp r3,#0
 3239 00f0 01D0     	 beq .L195
 3240              	 .loc 1 1796 0 is_stmt 0 discriminator 1
 3241 00f2 0123     	 movs r3,#1
 3242 00f4 16E0     	 b .L190
 3243              	.L195:
1797:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
1798:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1799:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
1800:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
1801:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1802:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
1803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->clust = clst;		/* Initialize data for new cluster */
 3244              	 .loc 1 1803 0 is_stmt 1
 3245 00f6 7B68     	 ldr r3,[r7,#4]
 3246 00f8 7A69     	 ldr r2,[r7,#20]
 3247 00fa 9A61     	 str r2,[r3,#24]
1804:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->sect = clst2sect(fs, clst);
 3248              	 .loc 1 1804 0
 3249 00fc 3869     	 ldr r0,[r7,#16]
 3250 00fe 7969     	 ldr r1,[r7,#20]
 3251 0100 FFF7FEFF 	 bl clst2sect
 3252 0104 0246     	 mov r2,r0
 3253 0106 7B68     	 ldr r3,[r7,#4]
 3254 0108 DA61     	 str r2,[r3,#28]
 3255              	.L191:
1805:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1806:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1807:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1808:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dptr = ofs;						/* Current entry */
 3256              	 .loc 1 1808 0
 3257 010a 7B68     	 ldr r3,[r7,#4]
 3258 010c FA68     	 ldr r2,[r7,#12]
 3259 010e 5A61     	 str r2,[r3,#20]
1809:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 3260              	 .loc 1 1809 0
 3261 0110 FB68     	 ldr r3,[r7,#12]
 3262 0112 C3F30803 	 ubfx r3,r3,#0,#9
 3263 0116 3033     	 adds r3,r3,#48
 3264 0118 3A69     	 ldr r2,[r7,#16]
 3265 011a 1344     	 add r3,r3,r2
 3266 011c 1A1D     	 adds r2,r3,#4
 3267 011e 7B68     	 ldr r3,[r7,#4]
 3268 0120 1A62     	 str r2,[r3,#32]
1810:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 3269              	 .loc 1 1811 0
 3270 0122 0023     	 movs r3,#0
 3271              	.L190:
1812:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3272              	 .loc 1 1812 0
 3273 0124 1846     	 mov r0,r3
 3274 0126 1837     	 adds r7,r7,#24
 3275              	.LCFI144:
 3276              	 .cfi_def_cfa_offset 8
 3277 0128 BD46     	 mov sp,r7
 3278              	.LCFI145:
 3279              	 .cfi_def_cfa_register 13
 3280              	 
 3281 012a 80BD     	 pop {r7,pc}
 3282              	 .cfi_endproc
 3283              	.LFE25:
 3285              	 .section .text.dir_alloc,"ax",%progbits
 3286              	 .align 2
 3287              	 .thumb
 3288              	 .thumb_func
 3290              	dir_alloc:
 3291              	.LFB26:
1813:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1814:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1815:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1817:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1818:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1819:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Reserve a block of directory entries             */
1820:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1821:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1822:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
1823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the directory object */
1824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n_ent				/* Number of contiguous entries to allocate */
1825:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1826:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3292              	 .loc 1 1826 0
 3293              	 .cfi_startproc
 3294              	 
 3295              	 
 3296 0000 80B5     	 push {r7,lr}
 3297              	.LCFI146:
 3298              	 .cfi_def_cfa_offset 8
 3299              	 .cfi_offset 7,-8
 3300              	 .cfi_offset 14,-4
 3301 0002 86B0     	 sub sp,sp,#24
 3302              	.LCFI147:
 3303              	 .cfi_def_cfa_offset 32
 3304 0004 00AF     	 add r7,sp,#0
 3305              	.LCFI148:
 3306              	 .cfi_def_cfa_register 7
 3307 0006 7860     	 str r0,[r7,#4]
 3308 0008 3960     	 str r1,[r7]
1827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
1828:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
1829:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3309              	 .loc 1 1829 0
 3310 000a 7B68     	 ldr r3,[r7,#4]
 3311 000c 1B68     	 ldr r3,[r3]
 3312 000e FB60     	 str r3,[r7,#12]
1830:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1831:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1832:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);
 3313              	 .loc 1 1832 0
 3314 0010 7868     	 ldr r0,[r7,#4]
 3315 0012 0021     	 movs r1,#0
 3316 0014 FFF7FEFF 	 bl dir_sdi
 3317 0018 0346     	 mov r3,r0
 3318 001a FB75     	 strb r3,[r7,#23]
1833:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3319              	 .loc 1 1833 0
 3320 001c FB7D     	 ldrb r3,[r7,#23]
 3321 001e 002B     	 cmp r3,#0
 3322 0020 2BD1     	 bne .L201
1834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n = 0;
 3323              	 .loc 1 1834 0
 3324 0022 0023     	 movs r3,#0
 3325 0024 3B61     	 str r3,[r7,#16]
 3326              	.L207:
1835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
1836:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
 3327              	 .loc 1 1836 0
 3328 0026 7B68     	 ldr r3,[r7,#4]
 3329 0028 DB69     	 ldr r3,[r3,#28]
 3330 002a F868     	 ldr r0,[r7,#12]
 3331 002c 1946     	 mov r1,r3
 3332 002e FFF7FEFF 	 bl move_window
 3333 0032 0346     	 mov r3,r0
 3334 0034 FB75     	 strb r3,[r7,#23]
1837:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 3335              	 .loc 1 1837 0
 3336 0036 FB7D     	 ldrb r3,[r7,#23]
 3337 0038 002B     	 cmp r3,#0
 3338 003a 00D0     	 beq .L202
 3339 003c 1DE0     	 b .L201
 3340              	.L202:
1838:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
1839:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name
1840:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
1841:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
 3341              	 .loc 1 1841 0
 3342 003e 7B68     	 ldr r3,[r7,#4]
 3343 0040 1B6A     	 ldr r3,[r3,#32]
 3344 0042 1B78     	 ldrb r3,[r3]
 3345 0044 E52B     	 cmp r3,#229
 3346 0046 04D0     	 beq .L203
 3347              	 .loc 1 1841 0 is_stmt 0 discriminator 1
 3348 0048 7B68     	 ldr r3,[r7,#4]
 3349 004a 1B6A     	 ldr r3,[r3,#32]
 3350 004c 1B78     	 ldrb r3,[r3]
 3351 004e 002B     	 cmp r3,#0
 3352 0050 08D1     	 bne .L204
 3353              	.L203:
1842:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1843:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 3354              	 .loc 1 1843 0 is_stmt 1
 3355 0052 3B69     	 ldr r3,[r7,#16]
 3356 0054 0133     	 adds r3,r3,#1
 3357 0056 3B61     	 str r3,[r7,#16]
 3358 0058 3A69     	 ldr r2,[r7,#16]
 3359 005a 3B68     	 ldr r3,[r7]
 3360 005c 9A42     	 cmp r2,r3
 3361 005e 00D1     	 bne .L205
 3362 0060 0BE0     	 b .L201
 3363              	.L205:
 3364 0062 01E0     	 b .L206
 3365              	.L204:
1844:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
1845:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = 0;				/* Not a free entry, restart to search */
 3366              	 .loc 1 1845 0
 3367 0064 0023     	 movs r3,#0
 3368 0066 3B61     	 str r3,[r7,#16]
 3369              	.L206:
1846:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1847:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 3370              	 .loc 1 1847 0
 3371 0068 7868     	 ldr r0,[r7,#4]
 3372 006a 0121     	 movs r1,#1
 3373 006c FFF7FEFF 	 bl dir_next
 3374 0070 0346     	 mov r3,r0
 3375 0072 FB75     	 strb r3,[r7,#23]
1848:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);
 3376              	 .loc 1 1848 0
 3377 0074 FB7D     	 ldrb r3,[r7,#23]
 3378 0076 002B     	 cmp r3,#0
 3379 0078 D5D0     	 beq .L207
 3380              	.L201:
1849:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1850:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1851:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 3381              	 .loc 1 1851 0
 3382 007a FB7D     	 ldrb r3,[r7,#23]
 3383 007c 042B     	 cmp r3,#4
 3384 007e 01D1     	 bne .L208
 3385              	 .loc 1 1851 0 is_stmt 0 discriminator 1
 3386 0080 0723     	 movs r3,#7
 3387 0082 FB75     	 strb r3,[r7,#23]
 3388              	.L208:
1852:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3389              	 .loc 1 1852 0 is_stmt 1
 3390 0084 FB7D     	 ldrb r3,[r7,#23]
1853:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3391              	 .loc 1 1853 0
 3392 0086 1846     	 mov r0,r3
 3393 0088 1837     	 adds r7,r7,#24
 3394              	.LCFI149:
 3395              	 .cfi_def_cfa_offset 8
 3396 008a BD46     	 mov sp,r7
 3397              	.LCFI150:
 3398              	 .cfi_def_cfa_register 13
 3399              	 
 3400 008c 80BD     	 pop {r7,pc}
 3401              	 .cfi_endproc
 3402              	.LFE26:
 3404 008e 00BF     	 .section .text.ld_clust,"ax",%progbits
 3405              	 .align 2
 3406              	 .thumb
 3407              	 .thumb_func
 3409              	ld_clust:
 3410              	.LFB27:
1854:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1855:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
1856:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1857:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1858:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1859:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1860:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1861:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT: Directory handling - Load/Store start cluster number             */
1862:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
1863:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1864:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
1865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the fs object */
1866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the key entry */
1867:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1868:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3411              	 .loc 1 1868 0
 3412              	 .cfi_startproc
 3413              	 
 3414              	 
 3415 0000 80B5     	 push {r7,lr}
 3416              	.LCFI151:
 3417              	 .cfi_def_cfa_offset 8
 3418              	 .cfi_offset 7,-8
 3419              	 .cfi_offset 14,-4
 3420 0002 84B0     	 sub sp,sp,#16
 3421              	.LCFI152:
 3422              	 .cfi_def_cfa_offset 24
 3423 0004 00AF     	 add r7,sp,#0
 3424              	.LCFI153:
 3425              	 .cfi_def_cfa_register 7
 3426 0006 7860     	 str r0,[r7,#4]
 3427 0008 3960     	 str r1,[r7]
1869:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl;
1870:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cl = ld_word(dir + DIR_FstClusLO);
 3428              	 .loc 1 1871 0
 3429 000a 3B68     	 ldr r3,[r7]
 3430 000c 1A33     	 adds r3,r3,#26
 3431 000e 1846     	 mov r0,r3
 3432 0010 FFF7FEFF 	 bl ld_word
 3433 0014 0346     	 mov r3,r0
 3434 0016 FB60     	 str r3,[r7,#12]
1872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3435              	 .loc 1 1872 0
 3436 0018 7B68     	 ldr r3,[r7,#4]
 3437 001a 1B78     	 ldrb r3,[r3]
 3438 001c 032B     	 cmp r3,#3
 3439 001e 09D1     	 bne .L211
1873:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 3440              	 .loc 1 1873 0
 3441 0020 3B68     	 ldr r3,[r7]
 3442 0022 1433     	 adds r3,r3,#20
 3443 0024 1846     	 mov r0,r3
 3444 0026 FFF7FEFF 	 bl ld_word
 3445 002a 0346     	 mov r3,r0
 3446 002c 1B04     	 lsls r3,r3,#16
 3447 002e FA68     	 ldr r2,[r7,#12]
 3448 0030 1343     	 orrs r3,r3,r2
 3449 0032 FB60     	 str r3,[r7,#12]
 3450              	.L211:
1874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1875:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1876:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return cl;
 3451              	 .loc 1 1876 0
 3452 0034 FB68     	 ldr r3,[r7,#12]
1877:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3453              	 .loc 1 1877 0
 3454 0036 1846     	 mov r0,r3
 3455 0038 1037     	 adds r7,r7,#16
 3456              	.LCFI154:
 3457              	 .cfi_def_cfa_offset 8
 3458 003a BD46     	 mov sp,r7
 3459              	.LCFI155:
 3460              	 .cfi_def_cfa_register 13
 3461              	 
 3462 003c 80BD     	 pop {r7,pc}
 3463              	 .cfi_endproc
 3464              	.LFE27:
 3466 003e 00BF     	 .section .text.st_clust,"ax",%progbits
 3467              	 .align 2
 3468              	 .thumb
 3469              	 .thumb_func
 3471              	st_clust:
 3472              	.LFB28:
1878:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1879:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1880:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1881:../Dave/Generated/FATFS/ff_Src/ff.c **** static void st_clust (
1882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,	/* Pointer to the fs object */
1883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,	/* Pointer to the key entry */
1884:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl	/* Value to be set */
1885:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1886:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3473              	 .loc 1 1886 0
 3474              	 .cfi_startproc
 3475              	 
 3476              	 
 3477 0000 80B5     	 push {r7,lr}
 3478              	.LCFI156:
 3479              	 .cfi_def_cfa_offset 8
 3480              	 .cfi_offset 7,-8
 3481              	 .cfi_offset 14,-4
 3482 0002 84B0     	 sub sp,sp,#16
 3483              	.LCFI157:
 3484              	 .cfi_def_cfa_offset 24
 3485 0004 00AF     	 add r7,sp,#0
 3486              	.LCFI158:
 3487              	 .cfi_def_cfa_register 7
 3488 0006 F860     	 str r0,[r7,#12]
 3489 0008 B960     	 str r1,[r7,#8]
 3490 000a 7A60     	 str r2,[r7,#4]
1887:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + DIR_FstClusLO, (WORD)cl);
 3491              	 .loc 1 1887 0
 3492 000c BB68     	 ldr r3,[r7,#8]
 3493 000e 03F11A02 	 add r2,r3,#26
 3494 0012 7B68     	 ldr r3,[r7,#4]
 3495 0014 9BB2     	 uxth r3,r3
 3496 0016 1046     	 mov r0,r2
 3497 0018 1946     	 mov r1,r3
 3498 001a FFF7FEFF 	 bl st_word
1888:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_FAT32) {
 3499              	 .loc 1 1888 0
 3500 001e FB68     	 ldr r3,[r7,#12]
 3501 0020 1B78     	 ldrb r3,[r3]
 3502 0022 032B     	 cmp r3,#3
 3503 0024 09D1     	 bne .L213
1889:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 3504              	 .loc 1 1889 0
 3505 0026 BB68     	 ldr r3,[r7,#8]
 3506 0028 03F11402 	 add r2,r3,#20
 3507 002c 7B68     	 ldr r3,[r7,#4]
 3508 002e 1B0C     	 lsrs r3,r3,#16
 3509 0030 9BB2     	 uxth r3,r3
 3510 0032 1046     	 mov r0,r2
 3511 0034 1946     	 mov r1,r3
 3512 0036 FFF7FEFF 	 bl st_word
 3513              	.L213:
1890:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1891:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3514              	 .loc 1 1891 0
 3515 003a 1037     	 adds r7,r7,#16
 3516              	.LCFI159:
 3517              	 .cfi_def_cfa_offset 8
 3518 003c BD46     	 mov sp,r7
 3519              	.LCFI160:
 3520              	 .cfi_def_cfa_register 13
 3521              	 
 3522 003e 80BD     	 pop {r7,pc}
 3523              	 .cfi_endproc
 3524              	.LFE28:
 3526              	 .section .text.dir_read,"ax",%progbits
 3527              	 .align 2
 3528              	 .thumb
 3529              	 .thumb_func
 3531              	dir_read:
 3532              	.LFB29:
1892:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1893:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1894:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1895:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1896:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
1897:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1898:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Compare a part of file name with an LFN entry */
1899:../Dave/Generated/FATFS/ff_Src/ff.c **** /*--------------------------------------------------------*/
1900:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1901:../Dave/Generated/FATFS/ff_Src/ff.c **** static int cmp_lfn (		/* 1:matched, 0:not matched */
1902:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
1903:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
1904:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1905:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1907:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1908:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1909:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1910:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
1911:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
1913:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1914:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1915:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1916:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
1917:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN + 1 || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
1918:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return 0;					/* Not matched */
1919:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
1920:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = uc;
1921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1922:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1923:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1924:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1925:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1926:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different len
1927:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1928:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN matched */
1929:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1930:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1931:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1932:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
1933:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1934:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Pick a part of file name from an LFN entry */
1935:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------*/
1936:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1937:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
1938:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
1939:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir			/* Pointer to the LFN entry */
1940:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1941:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1942:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1943:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, uc;
1944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1945:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
1947:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1948:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
1949:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
1951:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
1952:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0) {
1953:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1954:../Dave/Generated/FATFS/ff_Src/ff.c **** 			lfnbuf[i++] = wc = uc;			/* Store it */
1955:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
1956:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (uc != 0xFFFF) return 0;		/* Check filler */
1957:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
1958:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1959:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1960:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dir[LDIR_Ord] & LLEF && wc != 0) {	/* Put terminator if it is the last LFN part and not termin
1961:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
1962:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfnbuf[i] = 0;
1963:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
1964:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1965:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;		/* The part of LFN is valid */
1966:../Dave/Generated/FATFS/ff_Src/ff.c **** }
1967:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
1968:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1969:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1970:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
1971:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1972:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create an entry of LFN entries */
1973:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------*/
1974:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1975:../Dave/Generated/FATFS/ff_Src/ff.c **** static void put_lfn (
1976:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to the LFN */
1977:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dir,			/* Pointer to the LFN entry to be created */
1978:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord,			/* LFN order (1-20) */
1979:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum			/* Checksum of the corresponding SFN */
1980:../Dave/Generated/FATFS/ff_Src/ff.c **** )
1981:../Dave/Generated/FATFS/ff_Src/ff.c **** {
1982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, s;
1983:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
1984:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1985:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1986:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Chksum] = sum;			/* Set checksum */
1987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
1988:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Type] = 0;
1989:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dir + LDIR_FstClusLO, 0);
1990:../Dave/Generated/FATFS/ff_Src/ff.c **** 
1991:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
1992:../Dave/Generated/FATFS/ff_Src/ff.c **** 	s = wc = 0;
1993:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
1994:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
1995:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(dir + LfnOfs[s], wc);		/* Put it */
1996:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) wc = 0xFFFF;		/* Padding characters for following items */
1997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (++s < 13);
1998:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
1999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dir[LDIR_Ord] = ord;			/* Set the LFN order */
2000:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2001:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2002:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
2003:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
2004:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2005:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2006:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2007:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && !FF_FS_READONLY
2008:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2009:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Create a Numbered SFN                                        */
2010:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2011:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2012:../Dave/Generated/FATFS/ff_Src/ff.c **** static void gen_numname (
2013:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
2014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* src,	/* Pointer to SFN */
2015:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn,	/* Pointer to LFN */
2016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT seq			/* Sequence number */
2017:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2018:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2019:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns[8], c;
2020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j;
2021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
2022:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sreg;
2023:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2024:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dst, src, 11);
2026:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number 
2028:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sreg = seq;
2029:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*lfn) {	/* Create a CRC as hash value */
2030:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = *lfn++;
2031:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < 16; i++) {
2032:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sreg = (sreg << 1) + (wc & 1);
2033:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc >>= 1;
2034:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sreg & 0x10000) sreg ^= 0x11021;
2035:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2036:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2037:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq = (UINT)sreg;
2038:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2039:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2040:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* itoa (hexdecimal) */
2041:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 7;
2042:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2043:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)((seq % 16) + '0');
2044:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c > '9') c += 7;
2045:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ns[i--] = c;
2046:../Dave/Generated/FATFS/ff_Src/ff.c **** 		seq /= 16;
2047:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (seq);
2048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ns[i] = '~';
2049:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2050:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Append the number to the SFN body */
2051:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (j = 0; j < i && dst[j] != ' '; j++) {
2052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(dst[j])) {
2053:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (j == i - 1) break;
2054:../Dave/Generated/FATFS/ff_Src/ff.c **** 			j++;
2055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2056:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2057:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2058:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dst[j++] = (i < 8) ? ns[i++] : ' ';
2059:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (j < 8);
2060:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2061:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN && !FF_FS_READONLY */
2062:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2063:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2064:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2065:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2066:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2067:../Dave/Generated/FATFS/ff_Src/ff.c **** /* FAT-LFN: Calculate checksum of an SFN entry                           */
2068:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2069:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2070:../Dave/Generated/FATFS/ff_Src/ff.c **** static BYTE sum_sfn (
2071:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Pointer to the SFN entry */
2072:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2073:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2074:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sum = 0;
2075:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n = 11;
2076:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2077:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2078:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = (sum >> 1) + (sum << 7) + *dir++;
2079:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--n);
2080:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2081:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2082:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2083:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_LFN */
2084:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2085:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2086:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2087:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2088:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2089:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Checksum                                                       */
2090:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2091:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2092:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xdir_sum (	/* Get checksum of the directoly entry block */
2093:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* dir		/* Directory entry block to be calculated */
2094:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2095:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2096:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, szblk;
2097:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum;
2098:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2099:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2100:../Dave/Generated/FATFS/ff_Src/ff.c **** 	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
2101:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = sum = 0; i < szblk; i++) {
2102:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
2103:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i++;
2104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2105:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
2106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2107:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2108:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2109:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2110:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2111:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2112:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2113:../Dave/Generated/FATFS/ff_Src/ff.c **** static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
2114:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* name	/* File name to be calculated */
2115:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2116:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR chr;
2118:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD sum = 0;
2119:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2120:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2121:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while ((chr = *name++) != 0) {
2122:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
2123:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
2124:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
2125:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2126:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2127:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2128:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2129:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2130:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
2131:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD xsum32 (	/* Returns 32-bit checksum */
2132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE  dat,			/* Byte to be calculated (byte-by-byte processing) */
2133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sum			/* Previous sum value */
2134:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2135:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2136:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sum = ((sum & 1) ? 0x80000000 : 0) + (sum >> 1) + dat;
2137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sum;
2138:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2139:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2140:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2141:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2142:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2143:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2144:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get object information from a directory block */
2145:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------*/
2146:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2147:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_xfileinfo (
2148:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block 85+C0+C1s */
2149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Buffer to store the extracted file information */
2150:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2151:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2152:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2153:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di, si, nc;
2154:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2155:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get file name from the entry block */
2156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = SZDIRE * 2;	/* 1st C1 entry */
2157:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = 0; hs = 0; di = 0;
2158:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < dirb[XDIR_NumName]) {
2159:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si >= MAXDIRB(FF_MAX_LFN)) { di = 0; break; }	/* Truncated directory block? */
2160:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((si % SZDIRE) == 0) si += 2;		/* Skip entry type field */
2161:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ld_word(dirb + si); si += 2; nc++;	/* Get a character */
2162:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2163:../Dave/Generated/FATFS/ff_Src/ff.c **** 			hs = wc; continue;	/* Get low surrogate */
2164:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2165:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding
2166:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }	/* Buffer overflow or wrong encoding? */
2167:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2168:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
2169:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2170:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) di = 0;					/* Broken surrogate pair? */
2171:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) fno->fname[di++] = '?';	/* Inaccessible object name? */
2172:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;						/* Terminate the name */
2173:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[0] = 0;					/* exFAT does not support SFN */
2174:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2175:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dirb[XDIR_Attr];			/* Attribute */
2176:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(dirb + XDIR_FileSize);	/* Size */
2177:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dirb + XDIR_ModTime + 0);	/* Time */
2178:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dirb + XDIR_ModTime + 2);	/* Date */
2179:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2180:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2181:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2182:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2183:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2184:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2185:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Get a directry entry block */
2186:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------*/
2187:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2188:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
2189:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Reading direcotry object pointing top of the entry block to load */
2190:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2191:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2192:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2193:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, sz_ent;
2194:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
2195:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2196:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2197:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load file-directory entry */
2198:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2199:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2200:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order */
2201:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
2202:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
2203:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
2204:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2205:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load stream-extension entry */
2206:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_next(dp, 0);
2207:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2208:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2209:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(dp->obj.fs, dp->sect);
2210:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
2211:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order */
2212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
2213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
2214:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2215:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Load file-name entries */
2216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = 2 * SZDIRE;	/* Name offset to load */
2217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2218:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2219:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
2220:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2221:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2222:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2223:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order */
2224:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < MAXDIRB(FF_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
2225:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while ((i += SZDIRE) < sz_ent);
2226:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2227:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Sanity check (do it for only accessible object) */
2228:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i <= MAXDIRB(FF_MAX_LFN)) {
2229:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
2230:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
2232:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2233:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2234:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2235:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2236:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Initialize object allocation info with loaded entry block */
2237:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------------------------*/
2238:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2239:../Dave/Generated/FATFS/ff_Src/ff.c **** static void init_alloc_info (
2240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
2241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj	/* Object allocation information to be initialized */
2242:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2243:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2244:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
2245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
2246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
2247:../Dave/Generated/FATFS/ff_Src/ff.c **** 	obj->n_frag = 0;										/* No last fragment info */
2248:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2250:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2251:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2252:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY || FF_FS_RPATH != 0
2253:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2254:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Load the object's directory entry block */
2255:../Dave/Generated/FATFS/ff_Src/ff.c **** /*------------------------------------------------*/
2256:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2257:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT load_obj_xdir (
2258:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
2259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FFOBJID* obj	/* Object with its containing directory information */
2260:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2261:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2263:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Open object containing directory */
2265:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.fs = obj->fs;
2266:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.sclust = obj->c_scl;
2267:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.stat = (BYTE)obj->c_size;
2268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
2269:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;
2270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->blk_ofs = obj->c_ofs;
2271:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
2273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2274:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_xdir(dp);		/* Load the object's entry block */
2275:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2276:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
2277:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2278:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2279:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2280:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2281:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2282:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2283:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Store the directory entry block */
2284:../Dave/Generated/FATFS/ff_Src/ff.c **** /*----------------------------------------*/
2285:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2286:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT store_xdir (
2287:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp				/* Pointer to the direcotry object */
2288:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2289:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2290:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2291:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nent;
2292:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
2293:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2294:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create set sum */
2295:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
2296:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nent = dirb[XDIR_NumSec] + 1;
2297:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2298:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Store the direcotry entry block to the directory */
2299:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, dp->blk_ofs);
2300:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (res == FR_OK) {
2301:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(dp->obj.fs, dp->sect);
2302:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
2303:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(dp->dir, dirb, SZDIRE);
2304:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs->wflag = 1;
2305:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (--nent == 0) break;
2306:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb += SZDIRE;
2307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);
2308:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2309:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
2310:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2311:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2312:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2313:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2314:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2315:../Dave/Generated/FATFS/ff_Src/ff.c **** /* exFAT: Create a new directory enrty block */
2316:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-------------------------------------------*/
2317:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2318:../Dave/Generated/FATFS/ff_Src/ff.c **** static void create_xdir (
2319:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
2320:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const WCHAR* lfn	/* Pointer to the object name */
2321:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2322:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
2324:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE nc1, nlen;
2325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
2326:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2327:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file-directory and stream-extension entry */
2329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dirb, 0, 2 * SZDIRE);
2330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
2331:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
2332:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file-name entries */
2334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = SZDIRE * 2;	/* Top of file_name entries */
2335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nlen = nc1 = 0; wc = 1;
2336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2337:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
2338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill name field */
2339:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc != 0 && (wc = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
2340:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirb + i, wc); 		/* Store it */
2341:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2;
2342:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i % SZDIRE != 0);
2343:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc1++;
2344:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (lfn[nlen]);	/* Fill next entry if any char follows */
2345:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2346:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumName] = nlen;		/* Set name length */
2347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dirb[XDIR_NumSec] = 1 + nc1;	/* Set secondary count (C0 + C1s) */
2348:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
2349:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2350:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2351:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
2352:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
2353:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2354:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2355:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2356:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 || FF_USE_LABEL || FF_FS_EXFAT
2357:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2358:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read an object from the directory                                     */
2359:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2360:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2361:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_READ_FILE(dp) dir_read(dp, 0)
2362:../Dave/Generated/FATFS/ff_Src/ff.c **** #define DIR_READ_LABEL(dp) dir_read(dp, 1)
2363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2364:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_read (
2365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the directory object */
2366:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol			/* Filtered by 0:file/directory or 1:volume label */
2367:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2368:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3533              	 .loc 1 2368 0
 3534              	 .cfi_startproc
 3535              	 
 3536              	 
 3537 0000 80B5     	 push {r7,lr}
 3538              	.LCFI161:
 3539              	 .cfi_def_cfa_offset 8
 3540              	 .cfi_offset 7,-8
 3541              	 .cfi_offset 14,-4
 3542 0002 86B0     	 sub sp,sp,#24
 3543              	.LCFI162:
 3544              	 .cfi_def_cfa_offset 32
 3545 0004 00AF     	 add r7,sp,#0
 3546              	.LCFI163:
 3547              	 .cfi_def_cfa_register 7
 3548 0006 7860     	 str r0,[r7,#4]
 3549 0008 3960     	 str r1,[r7]
2369:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_NO_FILE;
 3550              	 .loc 1 2369 0
 3551 000a 0423     	 movs r3,#4
 3552 000c FB75     	 strb r3,[r7,#23]
2370:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3553              	 .loc 1 2370 0
 3554 000e 7B68     	 ldr r3,[r7,#4]
 3555 0010 1B68     	 ldr r3,[r3]
 3556 0012 3B61     	 str r3,[r7,#16]
2371:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE attr, b;
2372:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2373:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ord = 0xFF, sum = 0xFF;
2374:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2375:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (dp->sect) {
 3557              	 .loc 1 2376 0
 3558 0014 3FE0     	 b .L216
 3559              	.L221:
2377:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3560              	 .loc 1 2377 0
 3561 0016 7B68     	 ldr r3,[r7,#4]
 3562 0018 DB69     	 ldr r3,[r3,#28]
 3563 001a 3869     	 ldr r0,[r7,#16]
 3564 001c 1946     	 mov r1,r3
 3565 001e FFF7FEFF 	 bl move_window
 3566 0022 0346     	 mov r3,r0
 3567 0024 FB75     	 strb r3,[r7,#23]
2378:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3568              	 .loc 1 2378 0
 3569 0026 FB7D     	 ldrb r3,[r7,#23]
 3570 0028 002B     	 cmp r3,#0
 3571 002a 00D0     	 beq .L217
 3572 002c 37E0     	 b .L218
 3573              	.L217:
2379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b = dp->dir[DIR_Name];	/* Test for the entry type */
 3574              	 .loc 1 2379 0
 3575 002e 7B68     	 ldr r3,[r7,#4]
 3576 0030 1B6A     	 ldr r3,[r3,#32]
 3577 0032 1B78     	 ldrb r3,[r3]
 3578 0034 FB73     	 strb r3,[r7,#15]
2380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b == 0) {
 3579              	 .loc 1 2380 0
 3580 0036 FB7B     	 ldrb r3,[r7,#15]
 3581 0038 002B     	 cmp r3,#0
 3582 003a 02D1     	 bne .L219
2381:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_NO_FILE; break; /* Reached to end of the directory */
 3583              	 .loc 1 2381 0
 3584 003c 0423     	 movs r3,#4
 3585 003e FB75     	 strb r3,[r7,#23]
 3586 0040 2DE0     	 b .L218
 3587              	.L219:
2382:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2383:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2384:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2385:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_USE_LABEL && vol) {
2386:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (b == ET_VLABEL) break;	/* Volume label entry? */
2387:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2388:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
2389:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dp->blk_ofs = dp->dptr;	/* Get location of the block */
2390:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_xdir(dp);	/* Load the entry block */
2391:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
2392:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
2393:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2394:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
2395:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2396:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else
2398:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2399:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{	/* On the FAT/FAT32 volume */
2400:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 3588              	 .loc 1 2400 0
 3589 0042 7B68     	 ldr r3,[r7,#4]
 3590 0044 1B6A     	 ldr r3,[r3,#32]
 3591 0046 0B33     	 adds r3,r3,#11
 3592 0048 1B78     	 ldrb r3,[r3]
 3593 004a 03F03F03 	 and r3,r3,#63
 3594 004e BB73     	 strb r3,[r7,#14]
 3595 0050 7B68     	 ldr r3,[r7,#4]
 3596 0052 BA7B     	 ldrb r2,[r7,#14]
 3597 0054 9A71     	 strb r2,[r3,#6]
2401:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2402:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without val
2403:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF;
2404:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2405:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (attr == AM_LFN) {			/* An LFN entry is found */
2406:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (b & LLEF) {			/* Is it start of an LFN sequence? */
2407:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2408:../Dave/Generated/FATFS/ff_Src/ff.c **** 						b &= (BYTE)~LLEF; ord = b;
2409:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;
2410:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2411:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check LFN validity and capture it */
2412:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0
2413:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* An SFN entry is found */
2414:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
2415:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
2416:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2417:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
2418:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2419:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2420:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2421:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is
 3598              	 .loc 1 2421 0
 3599 0056 FB7B     	 ldrb r3,[r7,#15]
 3600 0058 E52B     	 cmp r3,#229
 3601 005a 12D0     	 beq .L220
 3602              	 .loc 1 2421 0 is_stmt 0 discriminator 1
 3603 005c FB7B     	 ldrb r3,[r7,#15]
 3604 005e 2E2B     	 cmp r3,#46
 3605 0060 0FD0     	 beq .L220
 3606              	 .loc 1 2421 0 discriminator 2
 3607 0062 BB7B     	 ldrb r3,[r7,#14]
 3608 0064 0F2B     	 cmp r3,#15
 3609 0066 0CD0     	 beq .L220
 3610              	 .loc 1 2421 0 discriminator 3
 3611 0068 BB7B     	 ldrb r3,[r7,#14]
 3612 006a 23F02003 	 bic r3,r3,#32
 3613 006e 082B     	 cmp r3,#8
 3614 0070 0CBF     	 ite eq
 3615 0072 0123     	 moveq r3,#1
 3616 0074 0023     	 movne r3,#0
 3617 0076 DBB2     	 uxtb r3,r3
 3618 0078 1A46     	 mov r2,r3
 3619 007a 3B68     	 ldr r3,[r7]
 3620 007c 9A42     	 cmp r2,r3
 3621 007e 00D1     	 bne .L220
2422:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 3622              	 .loc 1 2422 0 is_stmt 1
 3623 0080 0DE0     	 b .L218
 3624              	.L220:
2423:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2424:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2425:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2426:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);		/* Next entry */
 3625              	 .loc 1 2426 0
 3626 0082 7868     	 ldr r0,[r7,#4]
 3627 0084 0021     	 movs r1,#0
 3628 0086 FFF7FEFF 	 bl dir_next
 3629 008a 0346     	 mov r3,r0
 3630 008c FB75     	 strb r3,[r7,#23]
2427:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3631              	 .loc 1 2427 0
 3632 008e FB7D     	 ldrb r3,[r7,#23]
 3633 0090 002B     	 cmp r3,#0
 3634 0092 00D0     	 beq .L216
 3635 0094 03E0     	 b .L218
 3636              	.L216:
2376:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3637              	 .loc 1 2376 0
 3638 0096 7B68     	 ldr r3,[r7,#4]
 3639 0098 DB69     	 ldr r3,[r3,#28]
 3640 009a 002B     	 cmp r3,#0
 3641 009c BBD1     	 bne .L221
 3642              	.L218:
2428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2429:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2430:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 3643              	 .loc 1 2430 0
 3644 009e FB7D     	 ldrb r3,[r7,#23]
 3645 00a0 002B     	 cmp r3,#0
 3646 00a2 02D0     	 beq .L222
 3647              	 .loc 1 2430 0 is_stmt 0 discriminator 1
 3648 00a4 7B68     	 ldr r3,[r7,#4]
 3649 00a6 0022     	 movs r2,#0
 3650 00a8 DA61     	 str r2,[r3,#28]
 3651              	.L222:
2431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3652              	 .loc 1 2431 0 is_stmt 1
 3653 00aa FB7D     	 ldrb r3,[r7,#23]
2432:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3654              	 .loc 1 2432 0
 3655 00ac 1846     	 mov r0,r3
 3656 00ae 1837     	 adds r7,r7,#24
 3657              	.LCFI164:
 3658              	 .cfi_def_cfa_offset 8
 3659 00b0 BD46     	 mov sp,r7
 3660              	.LCFI165:
 3661              	 .cfi_def_cfa_register 13
 3662              	 
 3663 00b2 80BD     	 pop {r7,pc}
 3664              	 .cfi_endproc
 3665              	.LFE29:
 3667              	 .section .text.dir_find,"ax",%progbits
 3668              	 .align 2
 3669              	 .thumb
 3670              	 .thumb_func
 3672              	dir_find:
 3673              	.LFB30:
2433:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2434:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_MINIMIZE <= 1 || FF_USE_LABEL || FF_FS_RPATH >= 2 */
2435:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2436:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2437:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2438:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2439:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Directory handling - Find an object in the directory                  */
2440:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2441:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2442:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
2443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Pointer to the directory object with the file name */
2444:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2445:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3674              	 .loc 1 2445 0
 3675              	 .cfi_startproc
 3676              	 
 3677              	 
 3678 0000 80B5     	 push {r7,lr}
 3679              	.LCFI166:
 3680              	 .cfi_def_cfa_offset 8
 3681              	 .cfi_offset 7,-8
 3682              	 .cfi_offset 14,-4
 3683 0002 86B0     	 sub sp,sp,#24
 3684              	.LCFI167:
 3685              	 .cfi_def_cfa_offset 32
 3686 0004 00AF     	 add r7,sp,#0
 3687              	.LCFI168:
 3688              	 .cfi_def_cfa_register 7
 3689 0006 7860     	 str r0,[r7,#4]
2446:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2447:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3690              	 .loc 1 2447 0
 3691 0008 7B68     	 ldr r3,[r7,#4]
 3692 000a 1B68     	 ldr r3,[r3]
 3693 000c 3B61     	 str r3,[r7,#16]
2448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c;
2449:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2450:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE a, ord, sum;
2451:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2452:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2453:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(dp, 0);			/* Rewind directory object */
 3694              	 .loc 1 2453 0
 3695 000e 7868     	 ldr r0,[r7,#4]
 3696 0010 0021     	 movs r1,#0
 3697 0012 FFF7FEFF 	 bl dir_sdi
 3698 0016 0346     	 mov r3,r0
 3699 0018 FB75     	 strb r3,[r7,#23]
2454:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) return res;
 3700              	 .loc 1 2454 0
 3701 001a FB7D     	 ldrb r3,[r7,#23]
 3702 001c 002B     	 cmp r3,#0
 3703 001e 01D0     	 beq .L225
 3704              	 .loc 1 2454 0 is_stmt 0 discriminator 1
 3705 0020 FB7D     	 ldrb r3,[r7,#23]
 3706 0022 3DE0     	 b .L226
 3707              	.L225:
2455:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2456:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2457:../Dave/Generated/FATFS/ff_Src/ff.c **** 		BYTE nc;
2458:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT di, ni;
2459:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
2460:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2461:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
2462:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_LFN < 255
2463:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;			/* Skip comparison if inaccessible object
2464:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2465:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched
2466:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compa
2467:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((di % SZDIRE) == 0) di += 2;
2468:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
2469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2470:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
2471:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return res;
2473:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2474:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2475:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2476:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2477:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2478:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2479:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2480:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3708              	 .loc 1 2480 0 is_stmt 1
 3709 0024 7B68     	 ldr r3,[r7,#4]
 3710 0026 DB69     	 ldr r3,[r3,#28]
 3711 0028 3869     	 ldr r0,[r7,#16]
 3712 002a 1946     	 mov r1,r3
 3713 002c FFF7FEFF 	 bl move_window
 3714 0030 0346     	 mov r3,r0
 3715 0032 FB75     	 strb r3,[r7,#23]
2481:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) break;
 3716              	 .loc 1 2481 0
 3717 0034 FB7D     	 ldrb r3,[r7,#23]
 3718 0036 002B     	 cmp r3,#0
 3719 0038 00D0     	 beq .L227
 3720 003a 30E0     	 b .L228
 3721              	.L227:
2482:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = dp->dir[DIR_Name];
 3722              	 .loc 1 2482 0
 3723 003c 7B68     	 ldr r3,[r7,#4]
 3724 003e 1B6A     	 ldr r3,[r3,#32]
 3725 0040 1B78     	 ldrb r3,[r3]
 3726 0042 FB73     	 strb r3,[r7,#15]
2483:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 3727              	 .loc 1 2483 0
 3728 0044 FB7B     	 ldrb r3,[r7,#15]
 3729 0046 002B     	 cmp r3,#0
 3730 0048 02D1     	 bne .L229
 3731              	 .loc 1 2483 0 is_stmt 0 discriminator 1
 3732 004a 0423     	 movs r3,#4
 3733 004c FB75     	 strb r3,[r7,#23]
 3734 004e 26E0     	 b .L228
 3735              	.L229:
2484:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
2486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
2487:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2488:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2489:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (a == AM_LFN) {			/* An LFN entry is found */
2490:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
2491:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (c & LLEF) {		/* Is it start of LFN sequence? */
2492:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sum = dp->dir[LDIR_Chksum];
2493:../Dave/Generated/FATFS/ff_Src/ff.c **** 						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
2494:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
2495:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
2496:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Check validity of the LFN entry and compare it with given name */
2497:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0x
2498:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2499:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* An SFN entry is found */
2500:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
2501:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
2502:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
2503:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2504:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2505:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* Non LFN configuration */
2506:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 3736              	 .loc 1 2506 0 is_stmt 1
 3737 0050 7B68     	 ldr r3,[r7,#4]
 3738 0052 1B6A     	 ldr r3,[r3,#32]
 3739 0054 0B33     	 adds r3,r3,#11
 3740 0056 1B78     	 ldrb r3,[r3]
 3741 0058 03F03F03 	 and r3,r3,#63
 3742 005c DAB2     	 uxtb r2,r3
 3743 005e 7B68     	 ldr r3,[r7,#4]
 3744 0060 9A71     	 strb r2,[r3,#6]
2507:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry
 3745              	 .loc 1 2507 0
 3746 0062 7B68     	 ldr r3,[r7,#4]
 3747 0064 1B6A     	 ldr r3,[r3,#32]
 3748 0066 0B33     	 adds r3,r3,#11
 3749 0068 1B78     	 ldrb r3,[r3]
 3750 006a 03F00803 	 and r3,r3,#8
 3751 006e 002B     	 cmp r3,#0
 3752 0070 0CD1     	 bne .L230
 3753              	 .loc 1 2507 0 is_stmt 0 discriminator 1
 3754 0072 7B68     	 ldr r3,[r7,#4]
 3755 0074 1A6A     	 ldr r2,[r3,#32]
 3756 0076 7B68     	 ldr r3,[r7,#4]
 3757 0078 2433     	 adds r3,r3,#36
 3758 007a 1046     	 mov r0,r2
 3759 007c 1946     	 mov r1,r3
 3760 007e 0B22     	 movs r2,#11
 3761 0080 FFF7FEFF 	 bl mem_cmp
 3762 0084 0346     	 mov r3,r0
 3763 0086 002B     	 cmp r3,#0
 3764 0088 00D1     	 bne .L230
 3765              	 .loc 1 2507 0
 3766 008a 08E0     	 b .L228
 3767              	.L230:
2508:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2509:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_next(dp, 0);	/* Next entry */
 3768              	 .loc 1 2509 0 is_stmt 1
 3769 008c 7868     	 ldr r0,[r7,#4]
 3770 008e 0021     	 movs r1,#0
 3771 0090 FFF7FEFF 	 bl dir_next
 3772 0094 0346     	 mov r3,r0
 3773 0096 FB75     	 strb r3,[r7,#23]
2510:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (res == FR_OK);
 3774              	 .loc 1 2510 0
 3775 0098 FB7D     	 ldrb r3,[r7,#23]
 3776 009a 002B     	 cmp r3,#0
 3777 009c C2D0     	 beq .L225
 3778              	.L228:
2511:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2512:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3779              	 .loc 1 2512 0
 3780 009e FB7D     	 ldrb r3,[r7,#23]
 3781              	.L226:
2513:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3782              	 .loc 1 2513 0
 3783 00a0 1846     	 mov r0,r3
 3784 00a2 1837     	 adds r7,r7,#24
 3785              	.LCFI169:
 3786              	 .cfi_def_cfa_offset 8
 3787 00a4 BD46     	 mov sp,r7
 3788              	.LCFI170:
 3789              	 .cfi_def_cfa_register 13
 3790              	 
 3791 00a6 80BD     	 pop {r7,pc}
 3792              	 .cfi_endproc
 3793              	.LFE30:
 3795              	 .section .text.dir_register,"ax",%progbits
 3796              	 .align 2
 3797              	 .thumb
 3798              	 .thumb_func
 3800              	dir_register:
 3801              	.LFB31:
2514:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2515:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2516:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2517:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2518:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
2519:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2520:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Register an object to the directory                                   */
2521:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2522:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2523:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision
2524:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp						/* Target directory with object name to be created */
2525:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2526:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3802              	 .loc 1 2526 0
 3803              	 .cfi_startproc
 3804              	 
 3805              	 
 3806 0000 80B5     	 push {r7,lr}
 3807              	.LCFI171:
 3808              	 .cfi_def_cfa_offset 8
 3809              	 .cfi_offset 7,-8
 3810              	 .cfi_offset 14,-4
 3811 0002 84B0     	 sub sp,sp,#16
 3812              	.LCFI172:
 3813              	 .cfi_def_cfa_offset 24
 3814 0004 00AF     	 add r7,sp,#0
 3815              	.LCFI173:
 3816              	 .cfi_def_cfa_register 7
 3817 0006 7860     	 str r0,[r7,#4]
2527:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2528:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3818              	 .loc 1 2528 0
 3819 0008 7B68     	 ldr r3,[r7,#4]
 3820 000a 1B68     	 ldr r3,[r3]
 3821 000c BB60     	 str r3,[r7,#8]
2529:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2530:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n, len, n_ent;
2531:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sn[12], sum;
2532:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2534:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
2535:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
2536:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2537:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2538:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2539:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
2540:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
2541:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
2542:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
2543:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2544:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
2545:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->obj.stat &= ~4;
2546:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
2547:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2548:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if n
2549:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) return res;
2550:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
2551:../Dave/Generated/FATFS/ff_Src/ff.c **** 				DIR dj;
2552:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2553:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
2554:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2555:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.objsize += (DWORD)fs->csize * SS(fs);			/* Increase the directory size by cluster size 
2556:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
2557:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
2558:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;			/* Update the allocation status */
2559:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);				/* Store the object status */
2560:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) return res;
2561:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2562:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2563:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2564:../Dave/Generated/FATFS/ff_Src/ff.c **** 		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
2565:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2566:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2567:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2568:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* On the FAT/FAT32 volume */
2569:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_cpy(sn, dp->fn, 12);
2570:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
2571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
2572:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 1; n < 100; n++) {
2573:../Dave/Generated/FATFS/ff_Src/ff.c **** 			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
2574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Check if the name collides with existing SFN */
2575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
2576:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2577:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
2578:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
2579:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = sn[NSFLAG];
2580:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2581:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2582:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create an SFN with/without LFNs. */
2583:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
2584:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, n_ent);		/* Allocate entries */
2585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
2586:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
2587:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
2588:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
2589:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {					/* Store LFN entries in bottom first */
2590:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dp->sect);
2591:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
2592:../Dave/Generated/FATFS/ff_Src/ff.c **** 				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
2593:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
2594:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);	/* Next entry */
2595:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (res == FR_OK && --n_ent);
2596:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2597:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2598:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2599:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non LFN configuration */
2600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 3822              	 .loc 1 2600 0
 3823 000e 7868     	 ldr r0,[r7,#4]
 3824 0010 0121     	 movs r1,#1
 3825 0012 FFF7FEFF 	 bl dir_alloc
 3826 0016 0346     	 mov r3,r0
 3827 0018 FB73     	 strb r3,[r7,#15]
2601:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2602:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2603:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2604:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set SFN entry */
2605:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3828              	 .loc 1 2605 0
 3829 001a FB7B     	 ldrb r3,[r7,#15]
 3830 001c 002B     	 cmp r3,#0
 3831 001e 1DD1     	 bne .L232
2606:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, dp->sect);
 3832              	 .loc 1 2606 0
 3833 0020 7B68     	 ldr r3,[r7,#4]
 3834 0022 DB69     	 ldr r3,[r3,#28]
 3835 0024 B868     	 ldr r0,[r7,#8]
 3836 0026 1946     	 mov r1,r3
 3837 0028 FFF7FEFF 	 bl move_window
 3838 002c 0346     	 mov r3,r0
 3839 002e FB73     	 strb r3,[r7,#15]
2607:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 3840              	 .loc 1 2607 0
 3841 0030 FB7B     	 ldrb r3,[r7,#15]
 3842 0032 002B     	 cmp r3,#0
 3843 0034 12D1     	 bne .L232
2608:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 3844              	 .loc 1 2608 0
 3845 0036 7B68     	 ldr r3,[r7,#4]
 3846 0038 1B6A     	 ldr r3,[r3,#32]
 3847 003a 1846     	 mov r0,r3
 3848 003c 0021     	 movs r1,#0
 3849 003e 2022     	 movs r2,#32
 3850 0040 FFF7FEFF 	 bl mem_set
2609:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 3851              	 .loc 1 2609 0
 3852 0044 7B68     	 ldr r3,[r7,#4]
 3853 0046 1A6A     	 ldr r2,[r3,#32]
 3854 0048 7B68     	 ldr r3,[r7,#4]
 3855 004a 2433     	 adds r3,r3,#36
 3856 004c 1046     	 mov r0,r2
 3857 004e 1946     	 mov r1,r3
 3858 0050 0B22     	 movs r2,#11
 3859 0052 FFF7FEFF 	 bl mem_cpy
2610:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2611:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
2612:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2613:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
 3860              	 .loc 1 2613 0
 3861 0056 BB68     	 ldr r3,[r7,#8]
 3862 0058 0122     	 movs r2,#1
 3863 005a DA70     	 strb r2,[r3,#3]
 3864              	.L232:
2614:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2615:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2616:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2617:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3865              	 .loc 1 2617 0
 3866 005c FB7B     	 ldrb r3,[r7,#15]
2618:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3867              	 .loc 1 2618 0
 3868 005e 1846     	 mov r0,r3
 3869 0060 1037     	 adds r7,r7,#16
 3870              	.LCFI174:
 3871              	 .cfi_def_cfa_offset 8
 3872 0062 BD46     	 mov sp,r7
 3873              	.LCFI175:
 3874              	 .cfi_def_cfa_register 13
 3875              	 
 3876 0064 80BD     	 pop {r7,pc}
 3877              	 .cfi_endproc
 3878              	.LFE31:
 3880 0066 00BF     	 .section .text.dir_remove,"ax",%progbits
 3881              	 .align 2
 3882              	 .thumb
 3883              	 .thumb_func
 3885              	dir_remove:
 3886              	.LFB32:
2619:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2620:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
2621:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2622:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2623:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2624:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE == 0
2625:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2626:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Remove an object from the directory                                   */
2627:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2628:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2629:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
2630:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp					/* Directory object pointing the entry to be removed */
2631:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2632:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3887              	 .loc 1 2632 0
 3888              	 .cfi_startproc
 3889              	 
 3890              	 
 3891 0000 80B5     	 push {r7,lr}
 3892              	.LCFI176:
 3893              	 .cfi_def_cfa_offset 8
 3894              	 .cfi_offset 7,-8
 3895              	 .cfi_offset 14,-4
 3896 0002 84B0     	 sub sp,sp,#16
 3897              	.LCFI177:
 3898              	 .cfi_def_cfa_offset 24
 3899 0004 00AF     	 add r7,sp,#0
 3900              	.LCFI178:
 3901              	 .cfi_def_cfa_register 7
 3902 0006 7860     	 str r0,[r7,#4]
2633:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
2634:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 3903              	 .loc 1 2634 0
 3904 0008 7B68     	 ldr r3,[r7,#4]
 3905 000a 1B68     	 ldr r3,[r3]
 3906 000c FB60     	 str r3,[r7,#12]
2635:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD last = dp->dptr;
2637:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2638:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry blo
2639:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
2640:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
2641:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = move_window(fs, dp->sect);
2642:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
2643:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2644:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[XDIR_Type] &= 0x7F;	/* Clear the entry InUse flag. */
2645:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* On the FAT/FAT32 volume */
2646:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'. */
2647:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2648:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
2649:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been de
2650:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_next(dp, 0);	/* Next entry */
2651:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (res == FR_OK);
2652:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_INT_ERR;
2653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2654:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Non LFN configuration */
2655:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = move_window(fs, dp->sect);
 3907              	 .loc 1 2656 0
 3908 000e 7B68     	 ldr r3,[r7,#4]
 3909 0010 DB69     	 ldr r3,[r3,#28]
 3910 0012 F868     	 ldr r0,[r7,#12]
 3911 0014 1946     	 mov r1,r3
 3912 0016 FFF7FEFF 	 bl move_window
 3913 001a 0346     	 mov r3,r0
 3914 001c FB72     	 strb r3,[r7,#11]
2657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 3915              	 .loc 1 2657 0
 3916 001e FB7A     	 ldrb r3,[r7,#11]
 3917 0020 002B     	 cmp r3,#0
 3918 0022 06D1     	 bne .L235
2658:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->dir[DIR_Name] = DDEM;	/* Mark the entry 'deleted'.*/
 3919              	 .loc 1 2658 0
 3920 0024 7B68     	 ldr r3,[r7,#4]
 3921 0026 1B6A     	 ldr r3,[r3,#32]
 3922 0028 E522     	 movs r2,#229
 3923 002a 1A70     	 strb r2,[r3]
2659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
 3924              	 .loc 1 2659 0
 3925 002c FB68     	 ldr r3,[r7,#12]
 3926 002e 0122     	 movs r2,#1
 3927 0030 DA70     	 strb r2,[r3,#3]
 3928              	.L235:
2660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2661:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2662:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2663:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 3929              	 .loc 1 2663 0
 3930 0032 FB7A     	 ldrb r3,[r7,#11]
2664:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 3931              	 .loc 1 2664 0
 3932 0034 1846     	 mov r0,r3
 3933 0036 1037     	 adds r7,r7,#16
 3934              	.LCFI179:
 3935              	 .cfi_def_cfa_offset 8
 3936 0038 BD46     	 mov sp,r7
 3937              	.LCFI180:
 3938              	 .cfi_def_cfa_register 13
 3939              	 
 3940 003a 80BD     	 pop {r7,pc}
 3941              	 .cfi_endproc
 3942              	.LFE32:
 3944              	 .section .text.get_fileinfo,"ax",%progbits
 3945              	 .align 2
 3946              	 .thumb
 3947              	 .thumb_func
 3949              	get_fileinfo:
 3950              	.LFB33:
2665:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2666:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY && FF_FS_MINIMIZE == 0 */
2667:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2668:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2669:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2670:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2
2671:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2672:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get file information from directory entry                             */
2673:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2674:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2675:../Dave/Generated/FATFS/ff_Src/ff.c **** static void get_fileinfo (
2676:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the directory object */
2677:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to the file information to be filled */
2678:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2679:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 3951              	 .loc 1 2679 0
 3952              	 .cfi_startproc
 3953              	 
 3954              	 
 3955 0000 80B5     	 push {r7,lr}
 3956              	.LCFI181:
 3957              	 .cfi_def_cfa_offset 8
 3958              	 .cfi_offset 7,-8
 3959              	 .cfi_offset 14,-4
 3960 0002 86B0     	 sub sp,sp,#24
 3961              	.LCFI182:
 3962              	 .cfi_def_cfa_offset 32
 3963 0004 00AF     	 add r7,sp,#0
 3964              	.LCFI183:
 3965              	 .cfi_def_cfa_register 7
 3966 0006 7860     	 str r0,[r7,#4]
 3967 0008 3960     	 str r1,[r7]
2680:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
2681:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
2682:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE lcf;
2683:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, hs;
2684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
2685:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
2686:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c;
2687:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2688:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2689:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2690:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[0] = 0;			/* Invaidate file info */
 3968              	 .loc 1 2690 0
 3969 000a 3B68     	 ldr r3,[r7]
 3970 000c 0022     	 movs r2,#0
 3971 000e 5A72     	 strb r2,[r3,#9]
2691:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 3972              	 .loc 1 2691 0
 3973 0010 7B68     	 ldr r3,[r7,#4]
 3974 0012 DB69     	 ldr r3,[r3,#28]
 3975 0014 002B     	 cmp r3,#0
 3976 0016 00D1     	 bne .L238
 3977 0018 51E0     	 b .L237
 3978              	.L238:
2692:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2693:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2694:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
2695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
2696:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_xfileinfo(fs->dirbuf, fno);
2697:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return;
2698:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
2699:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2700:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
2701:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
2702:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di = hs = 0;
2703:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (fs->lfnbuf[si] != 0) {
2704:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
2705:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
2706:../Dave/Generated/FATFS/ff_Src/ff.c **** 					hs = wc; continue;		/* Get low surrogate */
2707:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2708:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in UTF-16 or 
2709:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc == 0) { di = 0; break; }	/* Invalid char or buffer overflow? */
2710:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di += wc;
2711:../Dave/Generated/FATFS/ff_Src/ff.c **** 				hs = 0;
2712:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2713:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (hs != 0) di = 0;	/* Broken surrogate pair? */
2714:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
2715:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2717:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
2719:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Get SFN from SFN entry */
2720:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = dp->dir[si++];			/* Get a char */
2721:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ') continue;	/* Skip padding spaces */
2722:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
2723:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
2724:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE >= 1	/* Unicode output */
2725:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc) && si != 8 && si != 11 && dbc_2nd(dp->dir[si])) {	/* Make a DBC if needed *
2726:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | dp->dir[si++];
2727:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2728:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = ff_oem2uni(wc, CODEPAGE);		/* ANSI/OEM -> Unicode */
2729:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Wrong char in the current code page? */
2730:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = put_utf(wc, &fno->altname[di], FF_SFN_BUF - di);	/* Store it in Unicode */
2731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) { di = 0; break; }		/* Buffer overflow? */
2732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di += wc;
2733:../Dave/Generated/FATFS/ff_Src/ff.c **** #else					/* ANSI/OEM output */
2734:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
2735:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2737:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
2738:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
2740:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccesible */
2741:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fno->fname[di++] = '?';
2742:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
2743:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] wi
2744:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = (WCHAR)fno->altname[si];
2745:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc == '.') lcf = NS_EXT;
2746:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
2747:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fno->fname[di] = (TCHAR)wc;
2748:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2749:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2750:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di] = 0;	/* Terminate the LFN */
2751:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case in
2752:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2753:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2754:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Non-LFN configuration */
2755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = di = 0;
 3979              	 .loc 1 2755 0
 3980 001a 0023     	 movs r3,#0
 3981 001c 3B61     	 str r3,[r7,#16]
 3982 001e 3B69     	 ldr r3,[r7,#16]
 3983 0020 7B61     	 str r3,[r7,#20]
2756:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (si < 11) {		/* Copy name body and extension */
 3984              	 .loc 1 2756 0
 3985 0022 21E0     	 b .L240
 3986              	.L244:
2757:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (TCHAR)dp->dir[si++];
 3987              	 .loc 1 2757 0
 3988 0024 7B68     	 ldr r3,[r7,#4]
 3989 0026 1A6A     	 ldr r2,[r3,#32]
 3990 0028 7B69     	 ldr r3,[r7,#20]
 3991 002a 591C     	 adds r1,r3,#1
 3992 002c 7961     	 str r1,[r7,#20]
 3993 002e 1344     	 add r3,r3,r2
 3994 0030 1B78     	 ldrb r3,[r3]
 3995 0032 FB73     	 strb r3,[r7,#15]
2758:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == ' ') continue;		/* Skip padding spaces */
 3996              	 .loc 1 2758 0
 3997 0034 FB7B     	 ldrb r3,[r7,#15]
 3998 0036 202B     	 cmp r3,#32
 3999 0038 00D1     	 bne .L241
 4000              	 .loc 1 2758 0 is_stmt 0 discriminator 1
 4001 003a 15E0     	 b .L240
 4002              	.L241:
2759:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == RDDEM) c = DDEM;	/* Restore replaced DDEM character */
 4003              	 .loc 1 2759 0 is_stmt 1
 4004 003c FB7B     	 ldrb r3,[r7,#15]
 4005 003e 052B     	 cmp r3,#5
 4006 0040 01D1     	 bne .L242
 4007              	 .loc 1 2759 0 is_stmt 0 discriminator 1
 4008 0042 E523     	 movs r3,#229
 4009 0044 FB73     	 strb r3,[r7,#15]
 4010              	.L242:
2760:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (si == 9) fno->fname[di++] = '.';/* Insert a . if extension is exist */
 4011              	 .loc 1 2760 0 is_stmt 1
 4012 0046 7B69     	 ldr r3,[r7,#20]
 4013 0048 092B     	 cmp r3,#9
 4014 004a 06D1     	 bne .L243
 4015              	 .loc 1 2760 0 is_stmt 0 discriminator 1
 4016 004c 3B69     	 ldr r3,[r7,#16]
 4017 004e 5A1C     	 adds r2,r3,#1
 4018 0050 3A61     	 str r2,[r7,#16]
 4019 0052 3A68     	 ldr r2,[r7]
 4020 0054 1344     	 add r3,r3,r2
 4021 0056 2E22     	 movs r2,#46
 4022 0058 5A72     	 strb r2,[r3,#9]
 4023              	.L243:
2761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fno->fname[di++] = c;
 4024              	 .loc 1 2761 0 is_stmt 1
 4025 005a 3B69     	 ldr r3,[r7,#16]
 4026 005c 5A1C     	 adds r2,r3,#1
 4027 005e 3A61     	 str r2,[r7,#16]
 4028 0060 3A68     	 ldr r2,[r7]
 4029 0062 1344     	 add r3,r3,r2
 4030 0064 FA7B     	 ldrb r2,[r7,#15]
 4031 0066 5A72     	 strb r2,[r3,#9]
 4032              	.L240:
2756:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (TCHAR)dp->dir[si++];
 4033              	 .loc 1 2756 0
 4034 0068 7B69     	 ldr r3,[r7,#20]
 4035 006a 0A2B     	 cmp r3,#10
 4036 006c DAD9     	 bls .L244
2762:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2763:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fname[di] = 0;
 4037              	 .loc 1 2763 0
 4038 006e 3A68     	 ldr r2,[r7]
 4039 0070 3B69     	 ldr r3,[r7,#16]
 4040 0072 1344     	 add r3,r3,r2
 4041 0074 0833     	 adds r3,r3,#8
 4042 0076 0022     	 movs r2,#0
 4043 0078 5A70     	 strb r2,[r3,#1]
2764:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2765:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2766:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fattrib = dp->dir[DIR_Attr];					/* Attribute */
 4044              	 .loc 1 2766 0
 4045 007a 7B68     	 ldr r3,[r7,#4]
 4046 007c 1B6A     	 ldr r3,[r3,#32]
 4047 007e DA7A     	 ldrb r2,[r3,#11]
 4048 0080 3B68     	 ldr r3,[r7]
 4049 0082 1A72     	 strb r2,[r3,#8]
2767:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 4050              	 .loc 1 2767 0
 4051 0084 7B68     	 ldr r3,[r7,#4]
 4052 0086 1B6A     	 ldr r3,[r3,#32]
 4053 0088 1C33     	 adds r3,r3,#28
 4054 008a 1846     	 mov r0,r3
 4055 008c FFF7FEFF 	 bl ld_dword
 4056 0090 0246     	 mov r2,r0
 4057 0092 3B68     	 ldr r3,[r7]
 4058 0094 1A60     	 str r2,[r3]
2768:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 4059              	 .loc 1 2768 0
 4060 0096 7B68     	 ldr r3,[r7,#4]
 4061 0098 1B6A     	 ldr r3,[r3,#32]
 4062 009a 1633     	 adds r3,r3,#22
 4063 009c 1846     	 mov r0,r3
 4064 009e FFF7FEFF 	 bl ld_word
 4065 00a2 0346     	 mov r3,r0
 4066 00a4 1A46     	 mov r2,r3
 4067 00a6 3B68     	 ldr r3,[r7]
 4068 00a8 DA80     	 strh r2,[r3,#6]
2769:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 4069              	 .loc 1 2769 0
 4070 00aa 7B68     	 ldr r3,[r7,#4]
 4071 00ac 1B6A     	 ldr r3,[r3,#32]
 4072 00ae 1833     	 adds r3,r3,#24
 4073 00b0 1846     	 mov r0,r3
 4074 00b2 FFF7FEFF 	 bl ld_word
 4075 00b6 0346     	 mov r3,r0
 4076 00b8 1A46     	 mov r2,r3
 4077 00ba 3B68     	 ldr r3,[r7]
 4078 00bc 9A80     	 strh r2,[r3,#4]
 4079              	.L237:
2770:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4080              	 .loc 1 2770 0
 4081 00be 1837     	 adds r7,r7,#24
 4082              	.LCFI184:
 4083              	 .cfi_def_cfa_offset 8
 4084 00c0 BD46     	 mov sp,r7
 4085              	.LCFI185:
 4086              	 .cfi_def_cfa_register 13
 4087              	 
 4088 00c2 80BD     	 pop {r7,pc}
 4089              	 .cfi_endproc
 4090              	.LFE33:
 4092              	 .section .rodata
 4093              	 .align 2
 4094              	.LC0:
 4095 0000 222A2B2C 	 .ascii "\"*+,:;<=>?[]|\177\000"
 4095      3A3B3C3D 
 4095      3E3F5B5D 
 4095      7C7F00
 4096              	 .section .text.create_name,"ax",%progbits
 4097              	 .align 2
 4098              	 .thumb
 4099              	 .thumb_func
 4101              	create_name:
 4102              	.LFB34:
2771:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2772:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 || FF_FS_RPATH >= 2 */
2773:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2774:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2775:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2776:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND && FF_FS_MINIMIZE <= 1
2777:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2778:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pattern matching                                                      */
2779:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2780:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2781:../Dave/Generated/FATFS/ff_Src/ff.c **** #define FIND_RECURS	4	/* Maximum number of wildcard terms in the pattern to limit recursion */
2782:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2783:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2784:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD get_achar (	/* Get a character and advance ptr */
2785:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** ptr		/* Pointer to pointer to the ANSI/OEM or Unicode string */
2786:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2787:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2788:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD chr;
2789:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2790:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2791:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1	/* Unicode input */
2792:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = tchar2uni(ptr);
2793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr == 0xFFFFFFFF) chr = 0;		/* Wrong UTF encoding is recognized as end of the string */
2794:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = ff_wtoupper(chr);
2795:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2796:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
2797:../Dave/Generated/FATFS/ff_Src/ff.c **** 	chr = (BYTE)*(*ptr)++;				/* Get a byte */
2798:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsLower(chr)) chr -= 0x20;		/* To upper ASCII char */
2799:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2800:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ExCvt && chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2801:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
2802:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
2803:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2804:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0 || FF_CODE_PAGE >= 900
2805:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dbc_1st((BYTE)chr)) {	/* Get DBC 2nd byte if needed */
2806:../Dave/Generated/FATFS/ff_Src/ff.c **** 		chr = dbc_2nd((BYTE)**ptr) ? chr << 8 | (BYTE)*(*ptr)++ : 0;
2807:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2808:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2809:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2810:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return chr;
2812:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2813:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2814:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2815:../Dave/Generated/FATFS/ff_Src/ff.c **** static int pattern_match (	/* 0:mismatched, 1:matched */
2816:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pat,	/* Matching pattern */
2817:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* nam,	/* String to be tested */
2818:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT skip,			/* Number of pre-skip chars (number of ?s, b8:infinite (* specified)) */
2819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT recur			/* Recursion count */
2820:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2821:../Dave/Generated/FATFS/ff_Src/ff.c **** {
2822:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *pptr, *nptr;
2823:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD pchr, nchr;
2824:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT sk;
2825:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2826:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2827:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while ((skip & 0xFF) != 0) {		/* Pre-skip name chars */
2828:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
2829:../Dave/Generated/FATFS/ff_Src/ff.c **** 		skip--;
2830:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2831:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*pat == 0 && skip) return 1;	/* Matched? (short circuit) */
2832:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2833:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
2834:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pptr = pat; nptr = nam;			/* Top of pattern and name to match */
2835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
2836:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (*pptr == '?' || *pptr == '*') {	/* Wildcard term? */
2837:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (recur == 0) return 0;	/* Too many wildcard terms? */
2838:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sk = 0;
2839:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {	/* Analyze the wildcard term */
2840:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (*pptr++ == '?') sk++; else sk |= 0x100;
2841:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (*pptr == '?' || *pptr == '*');
2842:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pattern_match(pptr, nptr, sk, recur - 1)) return 1;	/* Test new branch (recursive call) */
2843:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nchr = *nptr; break;	/* Branch mismatched */
2844:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2845:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pchr = get_achar(&pptr);	/* Get a pattern char */
2846:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nchr = get_achar(&nptr);	/* Get a name char */
2847:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pchr != nchr) break;	/* Branch mismatched? */
2848:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pchr == 0) return 1;	/* Branch matched? (matched at end of both strings) */
2849:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2850:../Dave/Generated/FATFS/ff_Src/ff.c **** 		get_achar(&nam);			/* nam++ */
2851:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (skip && nchr);		/* Retry until end of name if infinite search is specified */
2852:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2853:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 0;
2854:../Dave/Generated/FATFS/ff_Src/ff.c **** }
2855:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2856:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FIND && FF_FS_MINIMIZE <= 1 */
2857:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2858:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2859:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2860:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2861:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Pick a top segment and create the object name in directory form       */
2862:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
2863:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2864:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
2865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Pointer to the directory object */
2866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
2867:../Dave/Generated/FATFS/ff_Src/ff.c **** )
2868:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4103              	 .loc 1 2868 0
 4104              	 .cfi_startproc
 4105              	 
 4106              	 
 4107 0000 80B5     	 push {r7,lr}
 4108              	.LCFI186:
 4109              	 .cfi_def_cfa_offset 8
 4110              	 .cfi_offset 7,-8
 4111              	 .cfi_offset 14,-4
 4112 0002 8AB0     	 sub sp,sp,#40
 4113              	.LCFI187:
 4114              	 .cfi_def_cfa_offset 48
 4115 0004 00AF     	 add r7,sp,#0
 4116              	.LCFI188:
 4117              	 .cfi_def_cfa_register 7
 4118 0006 7860     	 str r0,[r7,#4]
 4119 0008 3960     	 str r1,[r7]
2869:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN		/* LFN configuration */
2870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b, cf;
2871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc, *lfn;
2872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD uc;
2873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, ni, si, di;
2874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *p;
2875:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2876:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2877:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create LFN into LFN working buffer */
2878:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
2879:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2880:../Dave/Generated/FATFS/ff_Src/ff.c **** 		uc = tchar2uni(&p);			/* Get a character */
2881:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
2882:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
2883:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)uc;
2884:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < ' ' || wc == '/' || wc == '\\') break;	/* Break if end of the path or a separator is fou
2885:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80 && chk_chr("\"*:<>\?|\x7F", wc)) return FR_INVALID_NAME;	/* Reject illegal characte
2886:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
2887:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di++] = wc;					/* Store the Unicode character */
2888:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2889:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc < ' ') {				/* End of path? */
2890:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cf = NS_LAST;			/* Set last segment flag */
2891:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
2892:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cf = 0;					/* Next segment follows */
2893:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*p == '/' || *p == '\\') p++;	/* Skip duplicated separators if exist */
2894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2895:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p;					/* Return pointer to the next segment */
2896:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2897:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
2898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((di == 1 && lfn[di - 1] == '.') ||
2899:../Dave/Generated/FATFS/ff_Src/ff.c **** 		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
2900:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lfn[di] = 0;
2901:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < 11; i++) {		/* Create dot name for SFN entry */
2902:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i] = (i < di) ? '.' : ' ';
2903:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2904:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
2905:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
2906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2907:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di) {						/* Snip off trailing spaces and dots if exist */
2909:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[di - 1];
2910:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc != ' ' && wc != '.') break;
2911:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di--;
2912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2913:../Dave/Generated/FATFS/ff_Src/ff.c **** 	lfn[di] = 0;							/* LFN is created into the working buffer */
2914:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
2915:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create SFN in directory form */
2917:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
2918:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
2919:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
2920:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2921:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(dp->fn, ' ', 11);
2922:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = b = 0; ni = 8;
2923:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
2924:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = lfn[si++];					/* Get an LFN character */
2925:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == 0) break;				/* Break on end of the LFN */
2926:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
2927:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LOSS | NS_LFN;
2928:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
2929:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2930:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2931:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i >= ni || si == di) {		/* End of field? */
2932:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11) {				/* Name extension overflow? */
2933:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2934:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
2935:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2936:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
2937:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si > di) break;						/* No name extension? */
2938:../Dave/Generated/FATFS/ff_Src/ff.c **** 			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
2939:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
2940:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2941:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2942:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x80) {	/* Is this a non-ASCII character? */
2943:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cf |= NS_LFN;	/* LFN entry needs to be created */
2944:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
2945:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt) {	/* At SBCS */
2946:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2947:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2948:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* At DBCS */
2949:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2950:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2951:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900	/* SBCS cfg */
2952:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
2953:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
2954:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* DBCS cfg */
2955:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Upper convert ==> ANSI/OEM code */
2956:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
2957:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2958:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2959:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc >= 0x100) {				/* Is this a DBC? */
2960:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= ni - 1) {			/* Field overflow? */
2961:../Dave/Generated/FATFS/ff_Src/ff.c **** 				cf |= NS_LOSS | NS_LFN;
2962:../Dave/Generated/FATFS/ff_Src/ff.c **** 				i = ni; continue;		/* Next field */
2963:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2964:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
2965:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
2966:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr("+,;=[]", wc)) {	/* Replace illegal characters for SFN if needed */
2967:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
2968:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
2969:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsUpper(wc)) {		/* ASCII upper case? */
2970:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 2;
2971:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2972:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(wc)) {		/* ASCII lower case? */
2973:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b |= 1; wc -= 0x20;
2974:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
2975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
2976:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
2977:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[i++] = (BYTE)wc;
2978:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2979:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2980:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it
2981:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2982:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
2983:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if co
2984:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are cre
2985:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
2986:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
2987:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
2988:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2989:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
2990:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2991:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
2992:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2993:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2994:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* FF_USE_LFN : Non-LFN configuration */
2995:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE c, d, *sfn;
2996:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ni, si, i;
2997:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *p;
2998:../Dave/Generated/FATFS/ff_Src/ff.c **** 
2999:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Create file name in directory form */
3000:../Dave/Generated/FATFS/ff_Src/ff.c **** 	p = *path; sfn = dp->fn;
 4120              	 .loc 1 3000 0
 4121 000a 3B68     	 ldr r3,[r7]
 4122 000c 1B68     	 ldr r3,[r3]
 4123 000e 7B61     	 str r3,[r7,#20]
 4124 0010 7B68     	 ldr r3,[r7,#4]
 4125 0012 2433     	 adds r3,r3,#36
 4126 0014 3B61     	 str r3,[r7,#16]
3001:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(sfn, ' ', 11);
 4127              	 .loc 1 3001 0
 4128 0016 3869     	 ldr r0,[r7,#16]
 4129 0018 2021     	 movs r1,#32
 4130 001a 0B22     	 movs r2,#11
 4131 001c FFF7FEFF 	 bl mem_set
3002:../Dave/Generated/FATFS/ff_Src/ff.c **** 	si = i = 0; ni = 8;
 4132              	 .loc 1 3002 0
 4133 0020 0023     	 movs r3,#0
 4134 0022 BB61     	 str r3,[r7,#24]
 4135 0024 BB69     	 ldr r3,[r7,#24]
 4136 0026 FB61     	 str r3,[r7,#28]
 4137 0028 0823     	 movs r3,#8
 4138 002a 3B62     	 str r3,[r7,#32]
3003:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3004:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (p[si] == '.') { /* Is this a dot entry? */
 4139              	 .loc 1 3004 0
 4140 002c 7A69     	 ldr r2,[r7,#20]
 4141 002e FB69     	 ldr r3,[r7,#28]
 4142 0030 1344     	 add r3,r3,r2
 4143 0032 1B78     	 ldrb r3,[r3]
 4144 0034 2E2B     	 cmp r3,#46
 4145 0036 36D1     	 bne .L246
 4146              	.L248:
3005:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
3006:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = (BYTE)p[si++];
 4147              	 .loc 1 3006 0
 4148 0038 FB69     	 ldr r3,[r7,#28]
 4149 003a 5A1C     	 adds r2,r3,#1
 4150 003c FA61     	 str r2,[r7,#28]
 4151 003e 7A69     	 ldr r2,[r7,#20]
 4152 0040 1344     	 add r3,r3,r2
 4153 0042 1B78     	 ldrb r3,[r3]
 4154 0044 87F82730 	 strb r3,[r7,#39]
3007:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c != '.' || si >= 3) break;
 4155              	 .loc 1 3007 0
 4156 0048 97F82730 	 ldrb r3,[r7,#39]
 4157 004c 2E2B     	 cmp r3,#46
 4158 004e 0BD1     	 bne .L247
 4159              	 .loc 1 3007 0 is_stmt 0 discriminator 1
 4160 0050 FB69     	 ldr r3,[r7,#28]
 4161 0052 022B     	 cmp r3,#2
 4162 0054 08D8     	 bhi .L247
3008:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4163              	 .loc 1 3008 0 is_stmt 1
 4164 0056 BB69     	 ldr r3,[r7,#24]
 4165 0058 5A1C     	 adds r2,r3,#1
 4166 005a BA61     	 str r2,[r7,#24]
 4167 005c 3A69     	 ldr r2,[r7,#16]
 4168 005e 1344     	 add r3,r3,r2
 4169 0060 97F82720 	 ldrb r2,[r7,#39]
 4170 0064 1A70     	 strb r2,[r3]
3009:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 4171              	 .loc 1 3009 0
 4172 0066 E7E7     	 b .L248
 4173              	.L247:
3010:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 4174              	 .loc 1 3010 0
 4175 0068 97F82730 	 ldrb r3,[r7,#39]
 4176 006c 2F2B     	 cmp r3,#47
 4177 006e 09D0     	 beq .L249
 4178              	 .loc 1 3010 0 is_stmt 0 discriminator 1
 4179 0070 97F82730 	 ldrb r3,[r7,#39]
 4180 0074 5C2B     	 cmp r3,#92
 4181 0076 05D0     	 beq .L249
 4182              	 .loc 1 3010 0 discriminator 2
 4183 0078 97F82730 	 ldrb r3,[r7,#39]
 4184 007c 202B     	 cmp r3,#32
 4185 007e 01D9     	 bls .L249
 4186              	 .loc 1 3010 0 discriminator 3
 4187 0080 0623     	 movs r3,#6
 4188 0082 C3E0     	 b .L250
 4189              	.L249:
3011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*path = p + si;								/* Return pointer to the next segment */
 4190              	 .loc 1 3011 0 is_stmt 1
 4191 0084 7A69     	 ldr r2,[r7,#20]
 4192 0086 FB69     	 ldr r3,[r7,#28]
 4193 0088 1A44     	 add r2,r2,r3
 4194 008a 3B68     	 ldr r3,[r7]
 4195 008c 1A60     	 str r2,[r3]
3012:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path
 4196              	 .loc 1 3012 0
 4197 008e 3B69     	 ldr r3,[r7,#16]
 4198 0090 0B33     	 adds r3,r3,#11
 4199 0092 97F82720 	 ldrb r2,[r7,#39]
 4200 0096 202A     	 cmp r2,#32
 4201 0098 01D8     	 bhi .L251
 4202              	 .loc 1 3012 0 is_stmt 0 discriminator 1
 4203 009a 2422     	 movs r2,#36
 4204 009c 00E0     	 b .L252
 4205              	.L251:
 4206              	 .loc 1 3012 0 discriminator 2
 4207 009e 2022     	 movs r2,#32
 4208              	.L252:
 4209              	 .loc 1 3012 0 discriminator 4
 4210 00a0 1A70     	 strb r2,[r3]
3013:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_OK;
 4211              	 .loc 1 3013 0 is_stmt 1 discriminator 4
 4212 00a2 0023     	 movs r3,#0
 4213 00a4 B2E0     	 b .L250
 4214              	.L246:
3014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3015:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
3017:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = (BYTE)p[si++];				/* Get a byte */
 4215              	 .loc 1 3017 0
 4216 00a6 FB69     	 ldr r3,[r7,#28]
 4217 00a8 5A1C     	 adds r2,r3,#1
 4218 00aa FA61     	 str r2,[r7,#28]
 4219 00ac 7A69     	 ldr r2,[r7,#20]
 4220 00ae 1344     	 add r3,r3,r2
 4221 00b0 1B78     	 ldrb r3,[r3]
 4222 00b2 87F82730 	 strb r3,[r7,#39]
3018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c <= ' ') break; 			/* Break if end of the path name */
 4223              	 .loc 1 3018 0
 4224 00b6 97F82730 	 ldrb r3,[r7,#39]
 4225 00ba 202B     	 cmp r3,#32
 4226 00bc 00D8     	 bhi .L253
 4227 00be 89E0     	 b .L254
 4228              	.L253:
3019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 4229              	 .loc 1 3019 0
 4230 00c0 97F82730 	 ldrb r3,[r7,#39]
 4231 00c4 2F2B     	 cmp r3,#47
 4232 00c6 03D0     	 beq .L255
 4233              	 .loc 1 3019 0 is_stmt 0 discriminator 1
 4234 00c8 97F82730 	 ldrb r3,[r7,#39]
 4235 00cc 5C2B     	 cmp r3,#92
 4236 00ce 10D1     	 bne .L256
 4237              	.L255:
3020:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 4238              	 .loc 1 3020 0 is_stmt 1
 4239 00d0 02E0     	 b .L257
 4240              	.L258:
 4241              	 .loc 1 3020 0 is_stmt 0 discriminator 4
 4242 00d2 FB69     	 ldr r3,[r7,#28]
 4243 00d4 0133     	 adds r3,r3,#1
 4244 00d6 FB61     	 str r3,[r7,#28]
 4245              	.L257:
 4246              	 .loc 1 3020 0 discriminator 1
 4247 00d8 7A69     	 ldr r2,[r7,#20]
 4248 00da FB69     	 ldr r3,[r7,#28]
 4249 00dc 1344     	 add r3,r3,r2
 4250 00de 1B78     	 ldrb r3,[r3]
 4251 00e0 2F2B     	 cmp r3,#47
 4252 00e2 F6D0     	 beq .L258
 4253              	 .loc 1 3020 0 discriminator 3
 4254 00e4 7A69     	 ldr r2,[r7,#20]
 4255 00e6 FB69     	 ldr r3,[r7,#28]
 4256 00e8 1344     	 add r3,r3,r2
 4257 00ea 1B78     	 ldrb r3,[r3]
 4258 00ec 5C2B     	 cmp r3,#92
 4259 00ee F0D0     	 beq .L258
3021:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 4260              	 .loc 1 3021 0 is_stmt 1
 4261 00f0 70E0     	 b .L254
 4262              	.L256:
3022:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3023:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '.' || i >= ni) {		/* End of body or field overflow? */
 4263              	 .loc 1 3023 0
 4264 00f2 97F82730 	 ldrb r3,[r7,#39]
 4265 00f6 2E2B     	 cmp r3,#46
 4266 00f8 03D0     	 beq .L259
 4267              	 .loc 1 3023 0 is_stmt 0 discriminator 1
 4268 00fa BA69     	 ldr r2,[r7,#24]
 4269 00fc 3B6A     	 ldr r3,[r7,#32]
 4270 00fe 9A42     	 cmp r2,r3
 4271 0100 0DD3     	 bcc .L260
 4272              	.L259:
3024:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Field overflow or invalid dot? */
 4273              	 .loc 1 3024 0 is_stmt 1
 4274 0102 3B6A     	 ldr r3,[r7,#32]
 4275 0104 0B2B     	 cmp r3,#11
 4276 0106 03D0     	 beq .L261
 4277              	 .loc 1 3024 0 is_stmt 0 discriminator 2
 4278 0108 97F82730 	 ldrb r3,[r7,#39]
 4279 010c 2E2B     	 cmp r3,#46
 4280 010e 01D0     	 beq .L262
 4281              	.L261:
 4282              	 .loc 1 3024 0 discriminator 3
 4283 0110 0623     	 movs r3,#6
 4284 0112 7BE0     	 b .L250
 4285              	.L262:
3025:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 8; ni = 11;				/* Enter file extension field */
 4286              	 .loc 1 3025 0 is_stmt 1
 4287 0114 0823     	 movs r3,#8
 4288 0116 BB61     	 str r3,[r7,#24]
 4289 0118 0B23     	 movs r3,#11
 4290 011a 3B62     	 str r3,[r7,#32]
3026:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 4291              	 .loc 1 3026 0
 4292 011c 59E0     	 b .L263
 4293              	.L260:
3027:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3028:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
3029:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ExCvt && c >= 0x80) {		/* Is SBC extended character? */
3030:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
3031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3032:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
3033:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c >= 0x80) {				/* Is SBC extended character? */
 4294              	 .loc 1 3033 0
 4295 011e 97F82730 	 ldrb r3,[r7,#39]
 4296 0122 5BB2     	 sxtb r3,r3
 4297 0124 002B     	 cmp r3,#0
 4298 0126 07DA     	 bge .L264
3034:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = ExCvt[c & 0x7F];		/* To upper SBC extended character */
 4299              	 .loc 1 3034 0
 4300 0128 97F82730 	 ldrb r3,[r7,#39]
 4301 012c 03F07F03 	 and r3,r3,#127
 4302 0130 384A     	 ldr r2,.L274
 4303 0132 D35C     	 ldrb r3,[r2,r3]
 4304 0134 87F82730 	 strb r3,[r7,#39]
 4305              	.L264:
3035:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3036:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3037:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st(c)) {				/* Check if it is a DBC 1st byte */
 4306              	 .loc 1 3037 0
 4307 0138 97F82730 	 ldrb r3,[r7,#39]
 4308 013c 1846     	 mov r0,r3
 4309 013e FFF7FEFF 	 bl dbc_1st
 4310 0142 0346     	 mov r3,r0
 4311 0144 002B     	 cmp r3,#0
 4312 0146 24D0     	 beq .L265
3038:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (BYTE)p[si++];			/* Get 2nd byte */
 4313              	 .loc 1 3038 0
 4314 0148 FB69     	 ldr r3,[r7,#28]
 4315 014a 5A1C     	 adds r2,r3,#1
 4316 014c FA61     	 str r2,[r7,#28]
 4317 014e 7A69     	 ldr r2,[r7,#20]
 4318 0150 1344     	 add r3,r3,r2
 4319 0152 1B78     	 ldrb r3,[r3]
 4320 0154 FB73     	 strb r3,[r7,#15]
3039:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!dbc_2nd(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
 4321              	 .loc 1 3039 0
 4322 0156 FB7B     	 ldrb r3,[r7,#15]
 4323 0158 1846     	 mov r0,r3
 4324 015a FFF7FEFF 	 bl dbc_2nd
 4325 015e 0346     	 mov r3,r0
 4326 0160 002B     	 cmp r3,#0
 4327 0162 04D0     	 beq .L266
 4328              	 .loc 1 3039 0 is_stmt 0 discriminator 2
 4329 0164 3B6A     	 ldr r3,[r7,#32]
 4330 0166 5A1E     	 subs r2,r3,#1
 4331 0168 BB69     	 ldr r3,[r7,#24]
 4332 016a 9A42     	 cmp r2,r3
 4333 016c 01D8     	 bhi .L267
 4334              	.L266:
 4335              	 .loc 1 3039 0 discriminator 3
 4336 016e 0623     	 movs r3,#6
 4337 0170 4CE0     	 b .L250
 4338              	.L267:
3040:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4339              	 .loc 1 3040 0 is_stmt 1
 4340 0172 BB69     	 ldr r3,[r7,#24]
 4341 0174 5A1C     	 adds r2,r3,#1
 4342 0176 BA61     	 str r2,[r7,#24]
 4343 0178 3A69     	 ldr r2,[r7,#16]
 4344 017a 1344     	 add r3,r3,r2
 4345 017c 97F82720 	 ldrb r2,[r7,#39]
 4346 0180 1A70     	 strb r2,[r3]
3041:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = d;
 4347              	 .loc 1 3041 0
 4348 0182 BB69     	 ldr r3,[r7,#24]
 4349 0184 5A1C     	 adds r2,r3,#1
 4350 0186 BA61     	 str r2,[r7,#24]
 4351 0188 3A69     	 ldr r2,[r7,#16]
 4352 018a 1344     	 add r3,r3,r2
 4353 018c FA7B     	 ldrb r2,[r7,#15]
 4354 018e 1A70     	 strb r2,[r3]
 4355 0190 1FE0     	 b .L263
 4356              	.L265:
3042:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* SBC */
3043:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 4357              	 .loc 1 3043 0
 4358 0192 97F82730 	 ldrb r3,[r7,#39]
 4359 0196 2048     	 ldr r0,.L274+4
 4360 0198 1946     	 mov r1,r3
 4361 019a FFF7FEFF 	 bl chk_chr
 4362 019e 0346     	 mov r3,r0
 4363 01a0 002B     	 cmp r3,#0
 4364 01a2 01D0     	 beq .L268
 4365              	 .loc 1 3043 0 is_stmt 0 discriminator 1
 4366 01a4 0623     	 movs r3,#6
 4367 01a6 31E0     	 b .L250
 4368              	.L268:
3044:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(c)) c -= 0x20;	/* To upper */
 4369              	 .loc 1 3044 0 is_stmt 1
 4370 01a8 97F82730 	 ldrb r3,[r7,#39]
 4371 01ac 602B     	 cmp r3,#96
 4372 01ae 08D9     	 bls .L269
 4373              	 .loc 1 3044 0 is_stmt 0 discriminator 1
 4374 01b0 97F82730 	 ldrb r3,[r7,#39]
 4375 01b4 7A2B     	 cmp r3,#122
 4376 01b6 04D8     	 bhi .L269
 4377              	 .loc 1 3044 0 discriminator 2
 4378 01b8 97F82730 	 ldrb r3,[r7,#39]
 4379 01bc 203B     	 subs r3,r3,#32
 4380 01be 87F82730 	 strb r3,[r7,#39]
 4381              	.L269:
3045:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sfn[i++] = c;
 4382              	 .loc 1 3045 0 is_stmt 1
 4383 01c2 BB69     	 ldr r3,[r7,#24]
 4384 01c4 5A1C     	 adds r2,r3,#1
 4385 01c6 BA61     	 str r2,[r7,#24]
 4386 01c8 3A69     	 ldr r2,[r7,#16]
 4387 01ca 1344     	 add r3,r3,r2
 4388 01cc 97F82720 	 ldrb r2,[r7,#39]
 4389 01d0 1A70     	 strb r2,[r3]
 4390              	.L263:
3046:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3047:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 4391              	 .loc 1 3047 0
 4392 01d2 68E7     	 b .L246
 4393              	.L254:
3048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*path = p + si;						/* Return pointer to the next segment */
 4394              	 .loc 1 3048 0
 4395 01d4 7A69     	 ldr r2,[r7,#20]
 4396 01d6 FB69     	 ldr r3,[r7,#28]
 4397 01d8 1A44     	 add r2,r2,r3
 4398 01da 3B68     	 ldr r3,[r7]
 4399 01dc 1A60     	 str r2,[r3]
3049:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 4400              	 .loc 1 3049 0
 4401 01de BB69     	 ldr r3,[r7,#24]
 4402 01e0 002B     	 cmp r3,#0
 4403 01e2 01D1     	 bne .L270
 4404              	 .loc 1 3049 0 is_stmt 0 discriminator 1
 4405 01e4 0623     	 movs r3,#6
 4406 01e6 11E0     	 b .L250
 4407              	.L270:
3050:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3051:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with 
 4408              	 .loc 1 3051 0 is_stmt 1
 4409 01e8 3B69     	 ldr r3,[r7,#16]
 4410 01ea 1B78     	 ldrb r3,[r3]
 4411 01ec E52B     	 cmp r3,#229
 4412 01ee 02D1     	 bne .L271
 4413              	 .loc 1 3051 0 is_stmt 0 discriminator 1
 4414 01f0 3B69     	 ldr r3,[r7,#16]
 4415 01f2 0522     	 movs r2,#5
 4416 01f4 1A70     	 strb r2,[r3]
 4417              	.L271:
3052:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 4418              	 .loc 1 3052 0 is_stmt 1
 4419 01f6 3B69     	 ldr r3,[r7,#16]
 4420 01f8 0B33     	 adds r3,r3,#11
 4421 01fa 97F82720 	 ldrb r2,[r7,#39]
 4422 01fe 202A     	 cmp r2,#32
 4423 0200 01D8     	 bhi .L272
 4424              	 .loc 1 3052 0 is_stmt 0 discriminator 1
 4425 0202 0422     	 movs r2,#4
 4426 0204 00E0     	 b .L273
 4427              	.L272:
 4428              	 .loc 1 3052 0 discriminator 2
 4429 0206 0022     	 movs r2,#0
 4430              	.L273:
 4431              	 .loc 1 3052 0 discriminator 4
 4432 0208 1A70     	 strb r2,[r3]
3053:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3054:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 4433              	 .loc 1 3054 0 is_stmt 1 discriminator 4
 4434 020a 0023     	 movs r3,#0
 4435              	.L250:
3055:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LFN */
3056:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4436              	 .loc 1 3056 0
 4437 020c 1846     	 mov r0,r3
 4438 020e 2837     	 adds r7,r7,#40
 4439              	.LCFI189:
 4440              	 .cfi_def_cfa_offset 8
 4441 0210 BD46     	 mov sp,r7
 4442              	.LCFI190:
 4443              	 .cfi_def_cfa_register 13
 4444              	 
 4445 0212 80BD     	 pop {r7,pc}
 4446              	.L275:
 4447              	 .align 2
 4448              	.L274:
 4449 0214 00000000 	 .word ExCvt
 4450 0218 00000000 	 .word .LC0
 4451              	 .cfi_endproc
 4452              	.LFE34:
 4454              	 .section .text.follow_path,"ax",%progbits
 4455              	 .align 2
 4456              	 .thumb
 4457              	 .thumb_func
 4459              	follow_path:
 4460              	.LFB35:
3057:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3058:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3059:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3060:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3061:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3062:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Follow a file path                                                    */
3063:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3064:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3065:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
3066:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,					/* Directory object to return last directory and found object */
3067:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path			/* Full-path string to find a file or directory */
3068:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3069:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4461              	 .loc 1 3069 0
 4462              	 .cfi_startproc
 4463              	 
 4464              	 
 4465 0000 80B5     	 push {r7,lr}
 4466              	.LCFI191:
 4467              	 .cfi_def_cfa_offset 8
 4468              	 .cfi_offset 7,-8
 4469              	 .cfi_offset 14,-4
 4470 0002 86B0     	 sub sp,sp,#24
 4471              	.LCFI192:
 4472              	 .cfi_def_cfa_offset 32
 4473 0004 00AF     	 add r7,sp,#0
 4474              	.LCFI193:
 4475              	 .cfi_def_cfa_register 7
 4476 0006 7860     	 str r0,[r7,#4]
 4477 0008 3960     	 str r1,[r7]
3070:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3071:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE ns;
3072:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs = dp->obj.fs;
 4478              	 .loc 1 3072 0
 4479 000a 7B68     	 ldr r3,[r7,#4]
 4480 000c 1B68     	 ldr r3,[r3]
 4481 000e 3B61     	 str r3,[r7,#16]
3073:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3074:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3075:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3076:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*path != '/' && *path != '\\') {	/* Without heading separator */
 4482              	 .loc 1 3076 0
 4483 0010 3B68     	 ldr r3,[r7]
 4484 0012 1B78     	 ldrb r3,[r3]
 4485 0014 2F2B     	 cmp r3,#47
 4486 0016 08D0     	 beq .L277
 4487              	 .loc 1 3076 0 is_stmt 0 discriminator 1
 4488 0018 3B68     	 ldr r3,[r7]
 4489 001a 1B78     	 ldrb r3,[r3]
 4490 001c 5C2B     	 cmp r3,#92
 4491 001e 04D0     	 beq .L277
3077:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = fs->cdir;				/* Start from current directory */
 4492              	 .loc 1 3077 0 is_stmt 1
 4493 0020 3B69     	 ldr r3,[r7,#16]
 4494 0022 5A69     	 ldr r2,[r3,#20]
 4495 0024 7B68     	 ldr r3,[r7,#4]
 4496 0026 9A60     	 str r2,[r3,#8]
 4497 0028 0EE0     	 b .L278
 4498              	.L277:
3078:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3079:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3080:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{										/* With heading separator */
3081:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 4499              	 .loc 1 3081 0
 4500 002a 02E0     	 b .L279
 4501              	.L280:
 4502              	 .loc 1 3081 0 is_stmt 0 discriminator 4
 4503 002c 3B68     	 ldr r3,[r7]
 4504 002e 0133     	 adds r3,r3,#1
 4505 0030 3B60     	 str r3,[r7]
 4506              	.L279:
 4507              	 .loc 1 3081 0 discriminator 1
 4508 0032 3B68     	 ldr r3,[r7]
 4509 0034 1B78     	 ldrb r3,[r3]
 4510 0036 2F2B     	 cmp r3,#47
 4511 0038 F8D0     	 beq .L280
 4512              	 .loc 1 3081 0 discriminator 3
 4513 003a 3B68     	 ldr r3,[r7]
 4514 003c 1B78     	 ldrb r3,[r3]
 4515 003e 5C2B     	 cmp r3,#92
 4516 0040 F4D0     	 beq .L280
3082:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.sclust = 0;					/* Start from root directory */
 4517              	 .loc 1 3082 0 is_stmt 1
 4518 0042 7B68     	 ldr r3,[r7,#4]
 4519 0044 0022     	 movs r2,#0
 4520 0046 9A60     	 str r2,[r3,#8]
 4521              	.L278:
3083:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3084:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3085:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
3086:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3087:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
3088:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DIR dj;
3089:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3090:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_scl = fs->cdc_scl;
3091:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_size = fs->cdc_size;
3092:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.c_ofs = fs->cdc_ofs;
3093:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = load_obj_xdir(&dj, &dp->obj);
3094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) return res;
3095:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
3096:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
3097:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3098:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3099:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3100:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3101:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 4522              	 .loc 1 3101 0
 4523 0048 3B68     	 ldr r3,[r7]
 4524 004a 1B78     	 ldrb r3,[r3]
 4525 004c 1F2B     	 cmp r3,#31
 4526 004e 0AD8     	 bhi .L281
3102:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->fn[NSFLAG] = NS_NONAME;
 4527              	 .loc 1 3102 0
 4528 0050 7B68     	 ldr r3,[r7,#4]
 4529 0052 8022     	 movs r2,#128
 4530 0054 83F82F20 	 strb r2,[r3,#47]
3103:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(dp, 0);
 4531              	 .loc 1 3103 0
 4532 0058 7868     	 ldr r0,[r7,#4]
 4533 005a 0021     	 movs r1,#0
 4534 005c FFF7FEFF 	 bl dir_sdi
 4535 0060 0346     	 mov r3,r0
 4536 0062 FB75     	 strb r3,[r7,#23]
 4537 0064 53E0     	 b .L282
 4538              	.L281:
3104:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3105:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Follow path */
3106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {
3107:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = create_name(dp, &path);	/* Get a segment name of the path */
 4539              	 .loc 1 3107 0
 4540 0066 3B46     	 mov r3,r7
 4541 0068 7868     	 ldr r0,[r7,#4]
 4542 006a 1946     	 mov r1,r3
 4543 006c FFF7FEFF 	 bl create_name
 4544 0070 0346     	 mov r3,r0
 4545 0072 FB75     	 strb r3,[r7,#23]
3108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) break;
 4546              	 .loc 1 3108 0
 4547 0074 FB7D     	 ldrb r3,[r7,#23]
 4548 0076 002B     	 cmp r3,#0
 4549 0078 00D0     	 beq .L283
 4550 007a 48E0     	 b .L282
 4551              	.L283:
3109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_find(dp);				/* Find an object with the segment name */
 4552              	 .loc 1 3109 0
 4553 007c 7868     	 ldr r0,[r7,#4]
 4554 007e FFF7FEFF 	 bl dir_find
 4555 0082 0346     	 mov r3,r0
 4556 0084 FB75     	 strb r3,[r7,#23]
3110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ns = dp->fn[NSFLAG];
 4557              	 .loc 1 3110 0
 4558 0086 7B68     	 ldr r3,[r7,#4]
 4559 0088 93F82F30 	 ldrb r3,[r3,#47]
 4560 008c FB73     	 strb r3,[r7,#15]
3111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {				/* Failed to find the object */
 4561              	 .loc 1 3111 0
 4562 008e FB7D     	 ldrb r3,[r7,#23]
 4563 0090 002B     	 cmp r3,#0
 4564 0092 1DD0     	 beq .L284
3112:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {	/* Object is not found */
 4565              	 .loc 1 3112 0
 4566 0094 FB7D     	 ldrb r3,[r7,#23]
 4567 0096 042B     	 cmp r3,#4
 4568 0098 19D1     	 bne .L285
3113:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 4569              	 .loc 1 3113 0
 4570 009a FB7B     	 ldrb r3,[r7,#15]
 4571 009c 03F02003 	 and r3,r3,#32
 4572 00a0 002B     	 cmp r3,#0
 4573 00a2 0CD0     	 beq .L286
3114:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 4574              	 .loc 1 3114 0
 4575 00a4 FB7B     	 ldrb r3,[r7,#15]
 4576 00a6 03F00403 	 and r3,r3,#4
 4577 00aa 002B     	 cmp r3,#0
 4578 00ac 00D1     	 bne .L287
 4579              	 .loc 1 3114 0 is_stmt 0 discriminator 1
 4580 00ae 2DE0     	 b .L288
 4581              	.L287:
3115:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->fn[NSFLAG] = NS_NONAME;
 4582              	 .loc 1 3115 0 is_stmt 1
 4583 00b0 7B68     	 ldr r3,[r7,#4]
 4584 00b2 8022     	 movs r2,#128
 4585 00b4 83F82F20 	 strb r2,[r3,#47]
3116:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_OK;
 4586              	 .loc 1 3116 0
 4587 00b8 0023     	 movs r3,#0
 4588 00ba FB75     	 strb r3,[r7,#23]
 4589 00bc 07E0     	 b .L285
 4590              	.L286:
3117:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {							/* Could not find the object */
3118:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 4591              	 .loc 1 3118 0
 4592 00be FB7B     	 ldrb r3,[r7,#15]
 4593 00c0 03F00403 	 and r3,r3,#4
 4594 00c4 002B     	 cmp r3,#0
 4595 00c6 02D1     	 bne .L285
 4596              	 .loc 1 3118 0 is_stmt 0 discriminator 1
 4597 00c8 0523     	 movs r3,#5
 4598 00ca FB75     	 strb r3,[r7,#23]
3119:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3120:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3121:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
 4599              	 .loc 1 3121 0 is_stmt 1 discriminator 1
 4600 00cc 1FE0     	 b .L282
 4601              	.L285:
 4602              	 .loc 1 3121 0 is_stmt 0
 4603 00ce 1EE0     	 b .L282
 4604              	.L284:
3122:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3123:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 4605              	 .loc 1 3123 0 is_stmt 1
 4606 00d0 FB7B     	 ldrb r3,[r7,#15]
 4607 00d2 03F00403 	 and r3,r3,#4
 4608 00d6 002B     	 cmp r3,#0
 4609 00d8 00D0     	 beq .L289
 4610 00da 18E0     	 b .L282
 4611              	.L289:
3124:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Get into the sub-directory */
3125:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->obj.attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 4612              	 .loc 1 3125 0
 4613 00dc 7B68     	 ldr r3,[r7,#4]
 4614 00de 9B79     	 ldrb r3,[r3,#6]
 4615 00e0 03F01003 	 and r3,r3,#16
 4616 00e4 002B     	 cmp r3,#0
 4617 00e6 02D1     	 bne .L290
3126:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NO_PATH; break;
 4618              	 .loc 1 3126 0
 4619 00e8 0523     	 movs r3,#5
 4620 00ea FB75     	 strb r3,[r7,#23]
 4621 00ec 0FE0     	 b .L282
 4622              	.L290:
3127:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3128:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3129:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
3130:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_scl = dp->obj.sclust;
3131:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
3132:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.c_ofs = dp->blk_ofs;
3133:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &dp->obj);	/* Open next directory */
3134:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3135:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3136:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3137:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 4623              	 .loc 1 3137 0
 4624 00ee 7B68     	 ldr r3,[r7,#4]
 4625 00f0 5B69     	 ldr r3,[r3,#20]
 4626 00f2 C3F30803 	 ubfx r3,r3,#0,#9
 4627 00f6 3033     	 adds r3,r3,#48
 4628 00f8 3A69     	 ldr r2,[r7,#16]
 4629 00fa 1344     	 add r3,r3,r2
 4630 00fc 0433     	 adds r3,r3,#4
 4631 00fe 3869     	 ldr r0,[r7,#16]
 4632 0100 1946     	 mov r1,r3
 4633 0102 FFF7FEFF 	 bl ld_clust
 4634 0106 0246     	 mov r2,r0
 4635 0108 7B68     	 ldr r3,[r7,#4]
 4636 010a 9A60     	 str r2,[r3,#8]
 4637              	.L288:
3138:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
 4638              	 .loc 1 3139 0
 4639 010c ABE7     	 b .L281
 4640              	.L282:
3140:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3141:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3142:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 4641              	 .loc 1 3142 0
 4642 010e FB7D     	 ldrb r3,[r7,#23]
3143:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4643              	 .loc 1 3143 0
 4644 0110 1846     	 mov r0,r3
 4645 0112 1837     	 adds r7,r7,#24
 4646              	.LCFI194:
 4647              	 .cfi_def_cfa_offset 8
 4648 0114 BD46     	 mov sp,r7
 4649              	.LCFI195:
 4650              	 .cfi_def_cfa_register 13
 4651              	 
 4652 0116 80BD     	 pop {r7,pc}
 4653              	 .cfi_endproc
 4654              	.LFE35:
 4656              	 .section .text.get_ldnumber,"ax",%progbits
 4657              	 .align 2
 4658              	 .thumb
 4659              	 .thumb_func
 4661              	get_ldnumber:
 4662              	.LFB36:
3144:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3145:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3146:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3147:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3148:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3149:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get logical drive number from path name                               */
3150:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3151:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3152:../Dave/Generated/FATFS/ff_Src/ff.c **** static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer)
3153:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path		/* Pointer to pointer to the path name */
3154:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3155:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4663              	 .loc 1 3155 0
 4664              	 .cfi_startproc
 4665              	 
 4666              	 
 4667              	 
 4668 0000 80B4     	 push {r7}
 4669              	.LCFI196:
 4670              	 .cfi_def_cfa_offset 4
 4671              	 .cfi_offset 7,-4
 4672 0002 89B0     	 sub sp,sp,#36
 4673              	.LCFI197:
 4674              	 .cfi_def_cfa_offset 40
 4675 0004 00AF     	 add r7,sp,#0
 4676              	.LCFI198:
 4677              	 .cfi_def_cfa_register 7
 4678 0006 7860     	 str r0,[r7,#4]
3156:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *tp, *tt;
3157:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR tc;
3158:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, vol = -1;
 4679              	 .loc 1 3158 0
 4680 0008 4FF0FF33 	 mov r3,#-1
 4681 000c 7B61     	 str r3,[r7,#20]
3159:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID		/* Find string volume ID */
3160:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *sp;
3161:../Dave/Generated/FATFS/ff_Src/ff.c **** 	char c;
3162:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3163:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3164:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tt = tp = *path;
 4682              	 .loc 1 3164 0
 4683 000e 7B68     	 ldr r3,[r7,#4]
 4684 0010 1B68     	 ldr r3,[r3]
 4685 0012 3B61     	 str r3,[r7,#16]
 4686 0014 3B69     	 ldr r3,[r7,#16]
 4687 0016 FB61     	 str r3,[r7,#28]
3165:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!tp) return vol;	/* Invalid path name? */
 4688              	 .loc 1 3165 0
 4689 0018 3B69     	 ldr r3,[r7,#16]
 4690 001a 002B     	 cmp r3,#0
 4691 001c 01D1     	 bne .L293
 4692              	 .loc 1 3165 0 is_stmt 0 discriminator 1
 4693 001e 7B69     	 ldr r3,[r7,#20]
 4694 0020 2EE0     	 b .L294
 4695              	.L293:
3166:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do tc = *tt++; while ((UINT)tc >= (FF_USE_LFN ? ' ' : '!') && tc != ':');	/* Find a colon in the p
 4696              	 .loc 1 3166 0 is_stmt 1 discriminator 2
 4697 0022 FB69     	 ldr r3,[r7,#28]
 4698 0024 5A1C     	 adds r2,r3,#1
 4699 0026 FA61     	 str r2,[r7,#28]
 4700 0028 1B78     	 ldrb r3,[r3]
 4701 002a FB73     	 strb r3,[r7,#15]
 4702 002c FB7B     	 ldrb r3,[r7,#15]
 4703 002e 202B     	 cmp r3,#32
 4704 0030 02D9     	 bls .L295
 4705              	 .loc 1 3166 0 is_stmt 0 discriminator 1
 4706 0032 FB7B     	 ldrb r3,[r7,#15]
 4707 0034 3A2B     	 cmp r3,#58
 4708 0036 F4D1     	 bne .L293
 4709              	.L295:
3167:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3168:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (tc == ':') {	/* DOS/Windows style volume ID? */
 4710              	 .loc 1 3168 0 is_stmt 1
 4711 0038 FB7B     	 ldrb r3,[r7,#15]
 4712 003a 3A2B     	 cmp r3,#58
 4713 003c 1CD1     	 bne .L296
3169:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = FF_VOLUMES;
 4714              	 .loc 1 3169 0
 4715 003e 0123     	 movs r3,#1
 4716 0040 BB61     	 str r3,[r7,#24]
3170:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is there a numeric volume ID + colon? */
 4717              	 .loc 1 3170 0
 4718 0042 3B69     	 ldr r3,[r7,#16]
 4719 0044 1B78     	 ldrb r3,[r3]
 4720 0046 2F2B     	 cmp r3,#47
 4721 0048 0CD9     	 bls .L297
 4722              	 .loc 1 3170 0 is_stmt 0 discriminator 1
 4723 004a 3B69     	 ldr r3,[r7,#16]
 4724 004c 1B78     	 ldrb r3,[r3]
 4725 004e 392B     	 cmp r3,#57
 4726 0050 08D8     	 bhi .L297
 4727              	 .loc 1 3170 0 discriminator 2
 4728 0052 3B69     	 ldr r3,[r7,#16]
 4729 0054 9A1C     	 adds r2,r3,#2
 4730 0056 FB69     	 ldr r3,[r7,#28]
 4731 0058 9A42     	 cmp r2,r3
 4732 005a 03D1     	 bne .L297
3171:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = (int)*tp - '0';	/* Get the LD number */
 4733              	 .loc 1 3171 0 is_stmt 1
 4734 005c 3B69     	 ldr r3,[r7,#16]
 4735 005e 1B78     	 ldrb r3,[r3]
 4736 0060 303B     	 subs r3,r3,#48
 4737 0062 BB61     	 str r3,[r7,#24]
 4738              	.L297:
3172:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3173:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 1	/* Arbitrary string is enabled */
3174:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {
3175:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = 0;
3176:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {
3177:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {	/* Compare the volume ID with path name */
3179:../Dave/Generated/FATFS/ff_Src/ff.c **** 					c = *sp++; tc = *tp++;
3180:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(c)) c -= 0x20;
3181:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (IsLower(tc)) tc -= 0x20;
3182:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (c && (TCHAR)c == tc);
3183:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while ((c || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
3184:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3185:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3186:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
 4739              	 .loc 1 3186 0
 4740 0064 BB69     	 ldr r3,[r7,#24]
 4741 0066 002B     	 cmp r3,#0
 4742 0068 04D1     	 bne .L298
3187:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
 4743              	 .loc 1 3187 0
 4744 006a BB69     	 ldr r3,[r7,#24]
 4745 006c 7B61     	 str r3,[r7,#20]
3188:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tt;		/* Snip the drive prefix off */
 4746              	 .loc 1 3188 0
 4747 006e 7B68     	 ldr r3,[r7,#4]
 4748 0070 FA69     	 ldr r2,[r7,#28]
 4749 0072 1A60     	 str r2,[r3]
 4750              	.L298:
3189:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3190:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return vol;
 4751              	 .loc 1 3190 0
 4752 0074 7B69     	 ldr r3,[r7,#20]
 4753 0076 03E0     	 b .L294
 4754              	.L296:
3191:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3192:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2		/* Unix style volume ID is enabled */
3193:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (*tp == '/') {
3194:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
3195:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
3196:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sp = VolumeStr[i]; tp = *path;	/* This string volume ID and path name */
3197:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Compare the volume ID with path name */
3198:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *sp++; tc = *(++tp);
3199:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(c)) c -= 0x20;
3200:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (IsLower(tc)) tc -= 0x20;
3201:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (c && (TCHAR)c == tc);
3202:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while ((c || (tc != '/' && (UINT)tc >= (FF_USE_LFN ? ' ' : '!'))) && ++i < FF_VOLUMES);	/* Repe
3203:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < FF_VOLUMES) {	/* If a volume ID is found, get the drive number and strip it */
3204:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vol = i;		/* Drive number */
3205:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*path = tp;		/* Snip the drive prefix off */
3206:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return vol;
3207:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3208:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3209:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3210:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* No drive prefix is found */
3211:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = CurrVol;	/* Default drive is current drive */
 4755              	 .loc 1 3212 0
 4756 0078 044B     	 ldr r3,.L299
 4757 007a 1B78     	 ldrb r3,[r3]
 4758 007c 7B61     	 str r3,[r7,#20]
3213:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3214:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = 0;		/* Default drive is 0 */
3215:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return vol;		/* Return the default drive */
 4759              	 .loc 1 3216 0
 4760 007e 7B69     	 ldr r3,[r7,#20]
 4761              	.L294:
3217:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4762              	 .loc 1 3217 0
 4763 0080 1846     	 mov r0,r3
 4764 0082 2437     	 adds r7,r7,#36
 4765              	.LCFI199:
 4766              	 .cfi_def_cfa_offset 4
 4767 0084 BD46     	 mov sp,r7
 4768              	.LCFI200:
 4769              	 .cfi_def_cfa_register 13
 4770              	 
 4771 0086 5DF8047B 	 ldr r7,[sp],#4
 4772              	.LCFI201:
 4773              	 .cfi_restore 7
 4774              	 .cfi_def_cfa_offset 0
 4775 008a 7047     	 bx lr
 4776              	.L300:
 4777              	 .align 2
 4778              	.L299:
 4779 008c 00000000 	 .word CurrVol
 4780              	 .cfi_endproc
 4781              	.LFE36:
 4783              	 .section .rodata
 4784 000f 00       	 .align 2
 4785              	.LC1:
 4786 0010 46415433 	 .ascii "FAT32   \000"
 4786      32202020 
 4786      00
 4787 0019 000000   	 .section .text.check_fs,"ax",%progbits
 4788              	 .align 2
 4789              	 .thumb
 4790              	 .thumb_func
 4792              	check_fs:
 4793              	.LFB37:
3218:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3219:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3222:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3223:../Dave/Generated/FATFS/ff_Src/ff.c **** /* GPT support functions                                                 */
3224:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3226:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
3227:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3228:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Calculate CRC32 in byte-by-byte */
3229:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3230:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD crc32 (	/* Returns next CRC value */
3231:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD crc,			/* Current CRC value */
3232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE d				/* A byte to be processed */
3233:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3234:../Dave/Generated/FATFS/ff_Src/ff.c **** {
3235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
3236:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3237:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3238:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (b = 1; b; b <<= 1) {
3239:../Dave/Generated/FATFS/ff_Src/ff.c **** 		crc ^= (d & b) ? 1 : 0;
3240:../Dave/Generated/FATFS/ff_Src/ff.c **** 		crc = (crc & 1) ? crc >> 1 ^ 0xEDB88320 : crc >> 1;
3241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return crc;
3243:../Dave/Generated/FATFS/ff_Src/ff.c **** }
3244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3245:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3246:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check validity of GPT header */
3247:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3248:../Dave/Generated/FATFS/ff_Src/ff.c **** static int test_gpt_header (	/* 0:Invalid, 1:Valid */
3249:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE* gpth			/* Pointer to the GPT header */
3250:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3251:../Dave/Generated/FATFS/ff_Src/ff.c **** {
3252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
3253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD bcc;
3254:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3255:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (mem_cmp(gpth + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16)) return 0;	/* Check sign, vers
3257:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0, bcc = 0xFFFFFFFF; i < 92; i++) {		/* Check header BCC */
3258:../Dave/Generated/FATFS/ff_Src/ff.c **** 		bcc = crc32(bcc, i - GPTH_Bcc < 4 ? 0 : gpth[i]);
3259:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3260:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (~bcc != ld_dword(gpth + GPTH_Bcc)) return 0;
3261:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_dword(gpth + GPTH_PteSize) != SZ_GPTE) return 0;	/* Table entry size (must be SZ_GPTE bytes
3262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ld_dword(gpth + GPTH_PtNum) > 128) return 0;	/* Table size (must be 128 entries or less) */
3263:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3264:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return 1;
3265:../Dave/Generated/FATFS/ff_Src/ff.c **** }
3266:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3267:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
3268:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3269:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Generate random value */
3270:../Dave/Generated/FATFS/ff_Src/ff.c **** static DWORD make_rand (
3271:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD seed,		/* Seed value */
3272:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* buff,		/* Output buffer */
3273:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n			/* Data length */
3274:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3275:../Dave/Generated/FATFS/ff_Src/ff.c **** {
3276:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT r;
3277:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3278:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3279:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (seed == 0) seed = 1;
3280:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {
3281:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (r = 0; r < 8; r++) seed = seed & 1 ? seed >> 1 ^ 0xA3000000 : seed >> 1;	/* Shift 8 bits the
3282:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*buff++ = (BYTE)seed;
3283:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (--n);
3284:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return seed;
3285:../Dave/Generated/FATFS/ff_Src/ff.c **** }
3286:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3287:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3288:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3289:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3290:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3291:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3292:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3293:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Load a sector and check if it is an FAT VBR                           */
3294:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3295:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3296:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check what the sector is */
3297:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3298:../Dave/Generated/FATFS/ff_Src/ff.c **** static UINT check_fs (	/* 0:FAT VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS,
3299:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Filesystem object */
3300:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
3301:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3302:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4794              	 .loc 1 3302 0
 4795              	 .cfi_startproc
 4796              	 
 4797              	 
 4798 0000 80B5     	 push {r7,lr}
 4799              	.LCFI202:
 4800              	 .cfi_def_cfa_offset 8
 4801              	 .cfi_offset 7,-8
 4802              	 .cfi_offset 14,-4
 4803 0002 84B0     	 sub sp,sp,#16
 4804              	.LCFI203:
 4805              	 .cfi_def_cfa_offset 24
 4806 0004 00AF     	 add r7,sp,#0
 4807              	.LCFI204:
 4808              	 .cfi_def_cfa_register 7
 4809 0006 7860     	 str r0,[r7,#4]
 4810 0008 3960     	 str r1,[r7]
3303:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD w, sign;
3304:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE b;
3305:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3306:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3307:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 4811              	 .loc 1 3307 0
 4812 000a 7B68     	 ldr r3,[r7,#4]
 4813 000c 0022     	 movs r2,#0
 4814 000e DA70     	 strb r2,[r3,#3]
 4815 0010 7B68     	 ldr r3,[r7,#4]
 4816 0012 4FF0FF32 	 mov r2,#-1
 4817 0016 1A63     	 str r2,[r3,#48]
3308:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 4818              	 .loc 1 3308 0
 4819 0018 7868     	 ldr r0,[r7,#4]
 4820 001a 3968     	 ldr r1,[r7]
 4821 001c FFF7FEFF 	 bl move_window
 4822 0020 0346     	 mov r3,r0
 4823 0022 002B     	 cmp r3,#0
 4824 0024 01D0     	 beq .L302
 4825              	 .loc 1 3308 0 is_stmt 0 discriminator 1
 4826 0026 0423     	 movs r3,#4
 4827 0028 6BE0     	 b .L303
 4828              	.L302:
3309:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sign = ld_word(fs->win + BS_55AA);
 4829              	 .loc 1 3309 0 is_stmt 1
 4830 002a 7B68     	 ldr r3,[r7,#4]
 4831 002c 03F23223 	 addw r3,r3,#562
 4832 0030 1846     	 mov r0,r3
 4833 0032 FFF7FEFF 	 bl ld_word
 4834 0036 0346     	 mov r3,r0
 4835 0038 FB81     	 strh r3,[r7,#14]
3310:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3311:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sign == 0xAA55 && !mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* 
3312:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3313:../Dave/Generated/FATFS/ff_Src/ff.c **** 	b = fs->win[BS_JmpBoot];
 4836              	 .loc 1 3313 0
 4837 003a 7B68     	 ldr r3,[r7,#4]
 4838 003c 93F83430 	 ldrb r3,[r3,#52]
 4839 0040 7B73     	 strb r3,[r7,#13]
3314:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near 
 4840              	 .loc 1 3314 0
 4841 0042 7B7B     	 ldrb r3,[r7,#13]
 4842 0044 EB2B     	 cmp r3,#235
 4843 0046 05D0     	 beq .L304
 4844              	 .loc 1 3314 0 is_stmt 0 discriminator 1
 4845 0048 7B7B     	 ldrb r3,[r7,#13]
 4846 004a E92B     	 cmp r3,#233
 4847 004c 02D0     	 beq .L304
 4848              	 .loc 1 3314 0 discriminator 2
 4849 004e 7B7B     	 ldrb r3,[r7,#13]
 4850 0050 E82B     	 cmp r3,#232
 4851 0052 4ED1     	 bne .L305
 4852              	.L304:
3315:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sign == 0xAA55 && !mem_cmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) return 0;	/* It is an F
 4853              	 .loc 1 3315 0 is_stmt 1
 4854 0054 FB89     	 ldrh r3,[r7,#14]
 4855 0056 4AF65522 	 movw r2,#43605
 4856 005a 9342     	 cmp r3,r2
 4857 005c 0BD1     	 bne .L306
 4858              	 .loc 1 3315 0 is_stmt 0 discriminator 1
 4859 005e 7B68     	 ldr r3,[r7,#4]
 4860 0060 8633     	 adds r3,r3,#134
 4861 0062 1846     	 mov r0,r3
 4862 0064 2949     	 ldr r1,.L310
 4863 0066 0822     	 movs r2,#8
 4864 0068 FFF7FEFF 	 bl mem_cmp
 4865 006c 0346     	 mov r3,r0
 4866 006e 002B     	 cmp r3,#0
 4867 0070 01D1     	 bne .L306
 4868              	 .loc 1 3315 0 discriminator 2
 4869 0072 0023     	 movs r3,#0
 4870 0074 45E0     	 b .L303
 4871              	.L306:
3316:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* FAT volumes formatted with early MS-DOS lack boot signature and FAT string, so that we need to
3317:../Dave/Generated/FATFS/ff_Src/ff.c **** 		w = ld_word(fs->win + BPB_BytsPerSec);
 4872              	 .loc 1 3317 0 is_stmt 1
 4873 0076 7B68     	 ldr r3,[r7,#4]
 4874 0078 3F33     	 adds r3,r3,#63
 4875 007a 1846     	 mov r0,r3
 4876 007c FFF7FEFF 	 bl ld_word
 4877 0080 0346     	 mov r3,r0
 4878 0082 7B81     	 strh r3,[r7,#10]
3318:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS) {	/* Properness of sector size */
 4879              	 .loc 1 3318 0
 4880 0084 7A89     	 ldrh r2,[r7,#10]
 4881 0086 7B89     	 ldrh r3,[r7,#10]
 4882 0088 013B     	 subs r3,r3,#1
 4883 008a 1340     	 ands r3,r3,r2
 4884 008c 002B     	 cmp r3,#0
 4885 008e 30D1     	 bne .L305
 4886              	 .loc 1 3318 0 is_stmt 0 discriminator 1
 4887 0090 7B89     	 ldrh r3,[r7,#10]
 4888 0092 B3F5007F 	 cmp r3,#512
 4889 0096 2CD3     	 bcc .L305
 4890              	 .loc 1 3318 0 discriminator 2
 4891 0098 7B89     	 ldrh r3,[r7,#10]
 4892 009a B3F5007F 	 cmp r3,#512
 4893 009e 28D8     	 bhi .L305
3319:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b = fs->win[BPB_SecPerClus];
 4894              	 .loc 1 3319 0 is_stmt 1
 4895 00a0 7B68     	 ldr r3,[r7,#4]
 4896 00a2 93F84130 	 ldrb r3,[r3,#65]
 4897 00a6 7B73     	 strb r3,[r7,#13]
3320:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (b != 0 && (b & (b - 1)) == 0						/* Properness of cluster size */
 4898              	 .loc 1 3320 0
 4899 00a8 7B7B     	 ldrb r3,[r7,#13]
 4900 00aa 002B     	 cmp r3,#0
 4901 00ac 21D0     	 beq .L305
 4902              	 .loc 1 3320 0 is_stmt 0 discriminator 1
 4903 00ae 7A7B     	 ldrb r2,[r7,#13]
 4904 00b0 7B7B     	 ldrb r3,[r7,#13]
 4905 00b2 013B     	 subs r3,r3,#1
 4906 00b4 1340     	 ands r3,r3,r2
 4907 00b6 002B     	 cmp r3,#0
 4908 00b8 1BD1     	 bne .L305
3321:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& (fs->win[BPB_NumFATs] == 1 || fs->win[BPB_NumFATs] == 2)	/* Properness of number of FATs */
 4909              	 .loc 1 3321 0 is_stmt 1
 4910 00ba 7B68     	 ldr r3,[r7,#4]
 4911 00bc 93F84430 	 ldrb r3,[r3,#68]
 4912 00c0 012B     	 cmp r3,#1
 4913 00c2 04D0     	 beq .L307
 4914              	 .loc 1 3321 0 is_stmt 0 discriminator 1
 4915 00c4 7B68     	 ldr r3,[r7,#4]
 4916 00c6 93F84430 	 ldrb r3,[r3,#68]
 4917 00ca 022B     	 cmp r3,#2
 4918 00cc 11D1     	 bne .L305
 4919              	.L307:
3322:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& ld_word(fs->win + BPB_RootEntCnt) != 0				/* Properness of root entry count */
 4920              	 .loc 1 3322 0 is_stmt 1
 4921 00ce 7B68     	 ldr r3,[r7,#4]
 4922 00d0 4533     	 adds r3,r3,#69
 4923 00d2 1846     	 mov r0,r3
 4924 00d4 FFF7FEFF 	 bl ld_word
 4925 00d8 0346     	 mov r3,r0
 4926 00da 002B     	 cmp r3,#0
 4927 00dc 09D0     	 beq .L305
3323:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& ld_word(fs->win + BPB_FATSz16) != 0) {				/* Properness of FAT size */
 4928              	 .loc 1 3323 0
 4929 00de 7B68     	 ldr r3,[r7,#4]
 4930 00e0 4A33     	 adds r3,r3,#74
 4931 00e2 1846     	 mov r0,r3
 4932 00e4 FFF7FEFF 	 bl ld_word
 4933 00e8 0346     	 mov r3,r0
 4934 00ea 002B     	 cmp r3,#0
 4935 00ec 01D0     	 beq .L305
3324:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return 0;	/* Sector can be presumed an FAT VBR */
 4936              	 .loc 1 3324 0
 4937 00ee 0023     	 movs r3,#0
 4938 00f0 07E0     	 b .L303
 4939              	.L305:
3325:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3326:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3327:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (valid or invalid BS) */
 4940              	 .loc 1 3328 0
 4941 00f2 FB89     	 ldrh r3,[r7,#14]
 4942 00f4 4AF65522 	 movw r2,#43605
 4943 00f8 9342     	 cmp r3,r2
 4944 00fa 01D1     	 bne .L308
 4945              	 .loc 1 3328 0 is_stmt 0 discriminator 1
 4946 00fc 0223     	 movs r3,#2
 4947 00fe 00E0     	 b .L303
 4948              	.L308:
 4949              	 .loc 1 3328 0 discriminator 2
 4950 0100 0323     	 movs r3,#3
 4951              	.L303:
3329:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 4952              	 .loc 1 3329 0 is_stmt 1
 4953 0102 1846     	 mov r0,r3
 4954 0104 1037     	 adds r7,r7,#16
 4955              	.LCFI205:
 4956              	 .cfi_def_cfa_offset 8
 4957 0106 BD46     	 mov sp,r7
 4958              	.LCFI206:
 4959              	 .cfi_def_cfa_register 13
 4960              	 
 4961 0108 80BD     	 pop {r7,pc}
 4962              	.L311:
 4963 010a 00BF     	 .align 2
 4964              	.L310:
 4965 010c 10000000 	 .word .LC1
 4966              	 .cfi_endproc
 4967              	.LFE37:
 4969              	 .section .text.find_volume,"ax",%progbits
 4970              	 .align 2
 4971              	 .thumb
 4972              	 .thumb_func
 4974              	find_volume:
 4975              	.LFB38:
3330:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3331:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3332:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find an FAT volume */
3333:../Dave/Generated/FATFS/ff_Src/ff.c **** /* (It supports only generic partitioning rules, MBR, GPT and SFD) */
3334:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3335:../Dave/Generated/FATFS/ff_Src/ff.c **** static UINT find_volume (	/* Returns BS status found in the hosting drive */
3336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,		/* Filesystem object */
3337:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT part		/* Partition to fined = 0:auto, 1..:forced */
3338:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3339:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 4976              	 .loc 1 3339 0
 4977              	 .cfi_startproc
 4978              	 
 4979              	 
 4980 0000 80B5     	 push {r7,lr}
 4981              	.LCFI207:
 4982              	 .cfi_def_cfa_offset 8
 4983              	 .cfi_offset 7,-8
 4984              	 .cfi_offset 14,-4
 4985 0002 88B0     	 sub sp,sp,#32
 4986              	.LCFI208:
 4987              	 .cfi_def_cfa_offset 40
 4988 0004 00AF     	 add r7,sp,#0
 4989              	.LCFI209:
 4990              	 .cfi_def_cfa_register 7
 4991 0006 7860     	 str r0,[r7,#4]
 4992 0008 3960     	 str r1,[r7]
3340:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT fmt, i;
3341:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD mbr_pt[4];
3342:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3343:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3344:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD */
 4993              	 .loc 1 3344 0
 4994 000a 7868     	 ldr r0,[r7,#4]
 4995 000c 0021     	 movs r1,#0
 4996 000e FFF7FEFF 	 bl check_fs
 4997 0012 B861     	 str r0,[r7,#24]
3345:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is a FAT VBR as auto scan, n
 4998              	 .loc 1 3345 0
 4999 0014 BB69     	 ldr r3,[r7,#24]
 5000 0016 022B     	 cmp r3,#2
 5001 0018 07D0     	 beq .L313
 5002              	 .loc 1 3345 0 is_stmt 0 discriminator 1
 5003 001a BB69     	 ldr r3,[r7,#24]
 5004 001c 022B     	 cmp r3,#2
 5005 001e 02D8     	 bhi .L314
 5006              	 .loc 1 3345 0 discriminator 3
 5007 0020 3B68     	 ldr r3,[r7]
 5008 0022 002B     	 cmp r3,#0
 5009 0024 01D1     	 bne .L313
 5010              	.L314:
 5011              	 .loc 1 3345 0 discriminator 4
 5012 0026 BB69     	 ldr r3,[r7,#24]
 5013 0028 48E0     	 b .L324
 5014              	.L313:
3346:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Sector 0 is not an FAT VBR or forced partition number wants a partition */
3348:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3349:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
3350:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->win[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
3351:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD n_ent, v_ent, ofs;
3352:../Dave/Generated/FATFS/ff_Src/ff.c **** 		QWORD pt_lba;
3353:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3354:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, 1) != FR_OK) return 4;	/* Load GPT header sector (next to MBR) */
3355:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!test_gpt_header(fs->win)) return 3;	/* Check if GPT header is valid */
3356:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_ent = ld_dword(fs->win + GPTH_PtNum);		/* Number of entries */
3357:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pt_lba = ld_qword(fs->win + GPTH_PtOfs);	/* Table location */
3358:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (v_ent = i = 0; i < n_ent; i++) {		/* Find FAT partition */
3359:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, pt_lba + i * SZ_GPTE / SS(fs)) != FR_OK) return 4;	/* PT sector */
3360:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs = i * SZ_GPTE % SS(fs);												/* Offset in the sector */
3361:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!mem_cmp(fs->win + ofs + GPTE_PtGuid, GUID_MS_Basic, 16)) {	/* MS basic data partition? */
3362:../Dave/Generated/FATFS/ff_Src/ff.c **** 				v_ent++;
3363:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fmt = check_fs(fs, ld_qword(fs->win + ofs + GPTE_FstLba));	/* Load VBR and check status */
3364:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (part == 0 && fmt <= 1) return fmt;			/* Auto search (valid FAT volume found first) */
3365:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (part != 0 && v_ent == part) return fmt;		/* Forced partition order (regardless of it is val
3366:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3367:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3368:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return 3;	/* Not found */
3369:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3370:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3371:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 5015              	 .loc 1 3372 0 is_stmt 1
 5016 002a 0023     	 movs r3,#0
 5017 002c FB61     	 str r3,[r7,#28]
 5018 002e 15E0     	 b .L316
 5019              	.L317:
3373:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 5020              	 .loc 1 3373 0 discriminator 3
 5021 0030 FB69     	 ldr r3,[r7,#28]
 5022 0032 1B01     	 lsls r3,r3,#4
 5023 0034 03F5E373 	 add r3,r3,#454
 5024 0038 3033     	 adds r3,r3,#48
 5025 003a 7A68     	 ldr r2,[r7,#4]
 5026 003c 1344     	 add r3,r3,r2
 5027 003e 0433     	 adds r3,r3,#4
 5028 0040 1846     	 mov r0,r3
 5029 0042 FFF7FEFF 	 bl ld_dword
 5030 0046 0246     	 mov r2,r0
 5031 0048 FB69     	 ldr r3,[r7,#28]
 5032 004a 9B00     	 lsls r3,r3,#2
 5033 004c 07F12001 	 add r1,r7,#32
 5034 0050 0B44     	 add r3,r3,r1
 5035 0052 43F8182C 	 str r2,[r3,#-24]
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 5036              	 .loc 1 3372 0 discriminator 3
 5037 0056 FB69     	 ldr r3,[r7,#28]
 5038 0058 0133     	 adds r3,r3,#1
 5039 005a FB61     	 str r3,[r7,#28]
 5040              	.L316:
3372:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 5041              	 .loc 1 3372 0 is_stmt 0 discriminator 1
 5042 005c FB69     	 ldr r3,[r7,#28]
 5043 005e 032B     	 cmp r3,#3
 5044 0060 E6D9     	 bls .L317
3374:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3375:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = part ? part - 1 : 0;		/* Table index to find first */
 5045              	 .loc 1 3375 0 is_stmt 1
 5046 0062 3B68     	 ldr r3,[r7]
 5047 0064 002B     	 cmp r3,#0
 5048 0066 02D0     	 beq .L318
 5049              	 .loc 1 3375 0 is_stmt 0 discriminator 1
 5050 0068 3B68     	 ldr r3,[r7]
 5051 006a 013B     	 subs r3,r3,#1
 5052 006c 00E0     	 b .L319
 5053              	.L318:
 5054              	 .loc 1 3375 0 discriminator 2
 5055 006e 0023     	 movs r3,#0
 5056              	.L319:
 5057              	 .loc 1 3375 0 discriminator 4
 5058 0070 FB61     	 str r3,[r7,#28]
 5059              	.L323:
3376:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {							/* Find an FAT volume */
3377:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 5060              	 .loc 1 3377 0 is_stmt 1
 5061 0072 FB69     	 ldr r3,[r7,#28]
 5062 0074 9B00     	 lsls r3,r3,#2
 5063 0076 07F12002 	 add r2,r7,#32
 5064 007a 1344     	 add r3,r3,r2
 5065 007c 53F8183C 	 ldr r3,[r3,#-24]
 5066 0080 002B     	 cmp r3,#0
 5067 0082 0CD0     	 beq .L320
 5068              	 .loc 1 3377 0 is_stmt 0 discriminator 1
 5069 0084 FB69     	 ldr r3,[r7,#28]
 5070 0086 9B00     	 lsls r3,r3,#2
 5071 0088 07F12002 	 add r2,r7,#32
 5072 008c 1344     	 add r3,r3,r2
 5073 008e 53F8183C 	 ldr r3,[r3,#-24]
 5074 0092 7868     	 ldr r0,[r7,#4]
 5075 0094 1946     	 mov r1,r3
 5076 0096 FFF7FEFF 	 bl check_fs
 5077 009a 0346     	 mov r3,r0
 5078 009c 00E0     	 b .L321
 5079              	.L320:
 5080              	 .loc 1 3377 0 discriminator 2
 5081 009e 0323     	 movs r3,#3
 5082              	.L321:
 5083              	 .loc 1 3377 0 discriminator 4
 5084 00a0 BB61     	 str r3,[r7,#24]
3378:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (part == 0 && fmt >= 2 && ++i < 4);
 5085              	 .loc 1 3378 0 is_stmt 1 discriminator 4
 5086 00a2 3B68     	 ldr r3,[r7]
 5087 00a4 002B     	 cmp r3,#0
 5088 00a6 08D1     	 bne .L322
 5089              	 .loc 1 3378 0 is_stmt 0 discriminator 1
 5090 00a8 BB69     	 ldr r3,[r7,#24]
 5091 00aa 012B     	 cmp r3,#1
 5092 00ac 05D9     	 bls .L322
 5093              	 .loc 1 3378 0 discriminator 2
 5094 00ae FB69     	 ldr r3,[r7,#28]
 5095 00b0 0133     	 adds r3,r3,#1
 5096 00b2 FB61     	 str r3,[r7,#28]
 5097 00b4 FB69     	 ldr r3,[r7,#28]
 5098 00b6 032B     	 cmp r3,#3
 5099 00b8 DBD9     	 bls .L323
 5100              	.L322:
3379:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return fmt;
 5101              	 .loc 1 3379 0 is_stmt 1
 5102 00ba BB69     	 ldr r3,[r7,#24]
 5103              	.L324:
3380:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5104              	 .loc 1 3380 0 discriminator 1
 5105 00bc 1846     	 mov r0,r3
 5106 00be 2037     	 adds r7,r7,#32
 5107              	.LCFI210:
 5108              	 .cfi_def_cfa_offset 8
 5109 00c0 BD46     	 mov sp,r7
 5110              	.LCFI211:
 5111              	 .cfi_def_cfa_register 13
 5112              	 
 5113 00c2 80BD     	 pop {r7,pc}
 5114              	 .cfi_endproc
 5115              	.LFE38:
 5117              	 .section .text.mount_volume,"ax",%progbits
 5118              	 .align 2
 5119              	 .thumb
 5120              	 .thumb_func
 5122              	mount_volume:
 5123              	.LFB39:
3381:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3382:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3383:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3384:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3385:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3386:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Determine logical drive number and mount the volume if needed         */
3387:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3388:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3389:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
3390:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
3391:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
3392:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode					/* !=0: Check write protection for write access */
3393:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3394:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5124              	 .loc 1 3394 0
 5125              	 .cfi_startproc
 5126              	 
 5127              	 
 5128 0000 80B5     	 push {r7,lr}
 5129              	.LCFI212:
 5130              	 .cfi_def_cfa_offset 8
 5131              	 .cfi_offset 7,-8
 5132              	 .cfi_offset 14,-4
 5133 0002 90B0     	 sub sp,sp,#64
 5134              	.LCFI213:
 5135              	 .cfi_def_cfa_offset 72
 5136 0004 00AF     	 add r7,sp,#0
 5137              	.LCFI214:
 5138              	 .cfi_def_cfa_register 7
 5139 0006 F860     	 str r0,[r7,#12]
 5140 0008 B960     	 str r1,[r7,#8]
 5141 000a 1346     	 mov r3,r2
 5142 000c FB71     	 strb r3,[r7,#7]
3395:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3396:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
3397:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t bsect;
3398:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tsect, sysect, fasize, nclst, szbfat;
3399:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD nrsv;
3400:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT fmt;
3402:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3403:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3405:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = 0;
 5143              	 .loc 1 3405 0
 5144 000e BB68     	 ldr r3,[r7,#8]
 5145 0010 0022     	 movs r2,#0
 5146 0012 1A60     	 str r2,[r3]
3406:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(path);
 5147              	 .loc 1 3406 0
 5148 0014 F868     	 ldr r0,[r7,#12]
 5149 0016 FFF7FEFF 	 bl get_ldnumber
 5150 001a F862     	 str r0,[r7,#44]
3407:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5151              	 .loc 1 3407 0
 5152 001c FB6A     	 ldr r3,[r7,#44]
 5153 001e 002B     	 cmp r3,#0
 5154 0020 01DA     	 bge .L326
 5155              	 .loc 1 3407 0 is_stmt 0 discriminator 1
 5156 0022 0B23     	 movs r3,#11
 5157 0024 CEE1     	 b .L327
 5158              	.L326:
3408:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3409:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check if the filesystem object is valid or not */
3410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 5159              	 .loc 1 3410 0 is_stmt 1
 5160 0026 A44A     	 ldr r2,.L358
 5161 0028 FB6A     	 ldr r3,[r7,#44]
 5162 002a 52F82330 	 ldr r3,[r2,r3,lsl#2]
 5163 002e BB62     	 str r3,[r7,#40]
3411:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 5164              	 .loc 1 3411 0
 5165 0030 BB6A     	 ldr r3,[r7,#40]
 5166 0032 002B     	 cmp r3,#0
 5167 0034 01D1     	 bne .L328
 5168              	 .loc 1 3411 0 is_stmt 0 discriminator 1
 5169 0036 0C23     	 movs r3,#12
 5170 0038 C4E1     	 b .L327
 5171              	.L328:
3412:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3413:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!lock_fs(fs)) return FR_TIMEOUT;	/* Lock the volume */
3414:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3415:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = fs;							/* Return pointer to the filesystem object */
 5172              	 .loc 1 3415 0 is_stmt 1
 5173 003a BB68     	 ldr r3,[r7,#8]
 5174 003c BA6A     	 ldr r2,[r7,#40]
 5175 003e 1A60     	 str r2,[r3]
3416:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3417:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 5176              	 .loc 1 3417 0
 5177 0040 FB79     	 ldrb r3,[r7,#7]
 5178 0042 23F00103 	 bic r3,r3,#1
 5179 0046 FB71     	 strb r3,[r7,#7]
3418:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 5180              	 .loc 1 3418 0
 5181 0048 BB6A     	 ldr r3,[r7,#40]
 5182 004a 1B78     	 ldrb r3,[r3]
 5183 004c 002B     	 cmp r3,#0
 5184 004e 1AD0     	 beq .L329
3419:../Dave/Generated/FATFS/ff_Src/ff.c **** 		stat = disk_status(fs->pdrv);
 5185              	 .loc 1 3419 0
 5186 0050 BB6A     	 ldr r3,[r7,#40]
 5187 0052 5B78     	 ldrb r3,[r3,#1]
 5188 0054 1846     	 mov r0,r3
 5189 0056 FFF7FEFF 	 bl disk_status
 5190 005a 0346     	 mov r3,r0
 5191 005c 87F82730 	 strb r3,[r7,#39]
3420:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 5192              	 .loc 1 3420 0
 5193 0060 97F82730 	 ldrb r3,[r7,#39]
 5194 0064 03F00103 	 and r3,r3,#1
 5195 0068 002B     	 cmp r3,#0
 5196 006a 0CD1     	 bne .L329
3421:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 5197              	 .loc 1 3421 0
 5198 006c FB79     	 ldrb r3,[r7,#7]
 5199 006e 002B     	 cmp r3,#0
 5200 0070 07D0     	 beq .L330
 5201              	 .loc 1 3421 0 is_stmt 0 discriminator 1
 5202 0072 97F82730 	 ldrb r3,[r7,#39]
 5203 0076 03F00403 	 and r3,r3,#4
 5204 007a 002B     	 cmp r3,#0
 5205 007c 01D0     	 beq .L330
3422:../Dave/Generated/FATFS/ff_Src/ff.c **** 				return FR_WRITE_PROTECTED;
 5206              	 .loc 1 3422 0 is_stmt 1
 5207 007e 0A23     	 movs r3,#10
 5208 0080 A0E1     	 b .L327
 5209              	.L330:
3423:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3424:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_OK;				/* The filesystem object is already valid */
 5210              	 .loc 1 3424 0
 5211 0082 0023     	 movs r3,#0
 5212 0084 9EE1     	 b .L327
 5213              	.L329:
3425:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3426:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3427:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* The filesystem object is not valid. */
3429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Following code attempts to mount the volume. (find a FAT volume, analyze the BPB and initialize
3430:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = 0;					/* Clear the filesystem object */
 5214              	 .loc 1 3431 0
 5215 0086 BB6A     	 ldr r3,[r7,#40]
 5216 0088 0022     	 movs r2,#0
 5217 008a 1A70     	 strb r2,[r3]
3432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->pdrv = LD2PD(vol);				/* Volume hosting physical drive */
 5218              	 .loc 1 3432 0
 5219 008c FB6A     	 ldr r3,[r7,#44]
 5220 008e DAB2     	 uxtb r2,r3
 5221 0090 BB6A     	 ldr r3,[r7,#40]
 5222 0092 5A70     	 strb r2,[r3,#1]
3433:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(fs->pdrv);	/* Initialize the physical drive */
 5223              	 .loc 1 3433 0
 5224 0094 BB6A     	 ldr r3,[r7,#40]
 5225 0096 5B78     	 ldrb r3,[r3,#1]
 5226 0098 1846     	 mov r0,r3
 5227 009a FFF7FEFF 	 bl disk_initialize
 5228 009e 0346     	 mov r3,r0
 5229 00a0 87F82730 	 strb r3,[r7,#39]
3434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 5230              	 .loc 1 3434 0
 5231 00a4 97F82730 	 ldrb r3,[r7,#39]
 5232 00a8 03F00103 	 and r3,r3,#1
 5233 00ac 002B     	 cmp r3,#0
 5234 00ae 01D0     	 beq .L331
3435:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 5235              	 .loc 1 3435 0
 5236 00b0 0323     	 movs r3,#3
 5237 00b2 87E1     	 b .L327
 5238              	.L331:
3436:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3437:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 5239              	 .loc 1 3437 0
 5240 00b4 FB79     	 ldrb r3,[r7,#7]
 5241 00b6 002B     	 cmp r3,#0
 5242 00b8 07D0     	 beq .L332
 5243              	 .loc 1 3437 0 is_stmt 0 discriminator 1
 5244 00ba 97F82730 	 ldrb r3,[r7,#39]
 5245 00be 03F00403 	 and r3,r3,#4
 5246 00c2 002B     	 cmp r3,#0
 5247 00c4 01D0     	 beq .L332
3438:../Dave/Generated/FATFS/ff_Src/ff.c **** 		return FR_WRITE_PROTECTED;
 5248              	 .loc 1 3438 0 is_stmt 1
 5249 00c6 0A23     	 movs r3,#10
 5250 00c8 7CE1     	 b .L327
 5251              	.L332:
3439:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3440:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
3441:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
3442:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
3443:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3444:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3445:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Find an FAT volume on the drive */
3446:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fmt = find_volume(fs, LD2PT(vol));
 5252              	 .loc 1 3446 0
 5253 00ca B86A     	 ldr r0,[r7,#40]
 5254 00cc 0021     	 movs r1,#0
 5255 00ce FFF7FEFF 	 bl find_volume
 5256 00d2 3863     	 str r0,[r7,#48]
3447:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 5257              	 .loc 1 3447 0
 5258 00d4 3B6B     	 ldr r3,[r7,#48]
 5259 00d6 042B     	 cmp r3,#4
 5260 00d8 01D1     	 bne .L333
 5261              	 .loc 1 3447 0 is_stmt 0 discriminator 1
 5262 00da 0123     	 movs r3,#1
 5263 00dc 72E1     	 b .L327
 5264              	.L333:
3448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 5265              	 .loc 1 3448 0 is_stmt 1
 5266 00de 3B6B     	 ldr r3,[r7,#48]
 5267 00e0 012B     	 cmp r3,#1
 5268 00e2 01D9     	 bls .L334
 5269              	 .loc 1 3448 0 is_stmt 0 discriminator 1
 5270 00e4 0D23     	 movs r3,#13
 5271 00e6 6DE1     	 b .L327
 5272              	.L334:
3449:../Dave/Generated/FATFS/ff_Src/ff.c **** 	bsect = fs->winsect;					/* Volume location */
 5273              	 .loc 1 3449 0 is_stmt 1
 5274 00e8 BB6A     	 ldr r3,[r7,#40]
 5275 00ea 1B6B     	 ldr r3,[r3,#48]
 5276 00ec 3B62     	 str r3,[r7,#32]
3450:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3451:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* An FAT volume is found (bsect). Following code initializes the filesystem object */
3452:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3453:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3454:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fmt == 1) {
3455:../Dave/Generated/FATFS/ff_Src/ff.c **** 		QWORD maxlba;
3456:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD so, cv, bcl, i;
3457:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3458:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
3459:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
3460:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3461:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (mus
3462:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3463:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physica
3464:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return FR_NO_FILESYSTEM;
3465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3466:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
3468:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-b
3469:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3470:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
3471:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3472:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
3473:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
3474:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3475:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
3476:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
3477:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3478:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
3479:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
3480:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;
3481:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3482:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3483:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;
3484:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
3485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
3486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size mu
3487:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
3488:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3489:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get bitmap location and check if it is contiguous (implementation assumption) */
3490:../Dave/Generated/FATFS/ff_Src/ff.c **** 		so = i = 0;
3491:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
3492:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i == 0) {
3493:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
3494:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
3495:../Dave/Generated/FATFS/ff_Src/ff.c **** 				so++;
3496:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3497:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->win[i] == ET_BITMAP) break;				/* Is it a bitmap entry? */
3498:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i = (i + SZDIRE) % SS(fs);	/* Next entry */
3499:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		bcl = ld_dword(fs->win + i + 20);					/* Bitmap cluster */
3501:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;
3502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
3503:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Check if bitmap is contiguous */
3504:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
3505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
3506:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cv == 0xFFFFFFFF) break;				/* Last link? */
3507:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented? */
3508:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3509:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3510:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3511:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
3512:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3513:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = FS_EXFAT;			/* FAT sub-type */
3514:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
3515:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
3516:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
3517:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must
 5277              	 .loc 1 3517 0
 5278 00ee BB6A     	 ldr r3,[r7,#40]
 5279 00f0 3F33     	 adds r3,r3,#63
 5280 00f2 1846     	 mov r0,r3
 5281 00f4 FFF7FEFF 	 bl ld_word
 5282 00f8 0346     	 mov r3,r0
 5283 00fa B3F5007F 	 cmp r3,#512
 5284 00fe 01D0     	 beq .L335
 5285              	 .loc 1 3517 0 is_stmt 0 discriminator 1
 5286 0100 0D23     	 movs r3,#13
 5287 0102 5FE1     	 b .L327
 5288              	.L335:
3518:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3519:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 5289              	 .loc 1 3519 0 is_stmt 1
 5290 0104 BB6A     	 ldr r3,[r7,#40]
 5291 0106 4A33     	 adds r3,r3,#74
 5292 0108 1846     	 mov r0,r3
 5293 010a FFF7FEFF 	 bl ld_word
 5294 010e 0346     	 mov r3,r0
 5295 0110 BB63     	 str r3,[r7,#56]
3520:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 5296              	 .loc 1 3520 0
 5297 0112 BB6B     	 ldr r3,[r7,#56]
 5298 0114 002B     	 cmp r3,#0
 5299 0116 05D1     	 bne .L336
 5300              	 .loc 1 3520 0 is_stmt 0 discriminator 1
 5301 0118 BB6A     	 ldr r3,[r7,#40]
 5302 011a 5833     	 adds r3,r3,#88
 5303 011c 1846     	 mov r0,r3
 5304 011e FFF7FEFF 	 bl ld_dword
 5305 0122 B863     	 str r0,[r7,#56]
 5306              	.L336:
3521:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsize = fasize;
 5307              	 .loc 1 3521 0 is_stmt 1
 5308 0124 BB6A     	 ldr r3,[r7,#40]
 5309 0126 BA6B     	 ldr r2,[r7,#56]
 5310 0128 DA61     	 str r2,[r3,#28]
3522:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3523:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 5311              	 .loc 1 3523 0
 5312 012a BB6A     	 ldr r3,[r7,#40]
 5313 012c 93F84420 	 ldrb r2,[r3,#68]
 5314 0130 BB6A     	 ldr r3,[r7,#40]
 5315 0132 9A70     	 strb r2,[r3,#2]
3524:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 5316              	 .loc 1 3524 0
 5317 0134 BB6A     	 ldr r3,[r7,#40]
 5318 0136 9B78     	 ldrb r3,[r3,#2]
 5319 0138 012B     	 cmp r3,#1
 5320 013a 05D0     	 beq .L337
 5321              	 .loc 1 3524 0 is_stmt 0 discriminator 1
 5322 013c BB6A     	 ldr r3,[r7,#40]
 5323 013e 9B78     	 ldrb r3,[r3,#2]
 5324 0140 022B     	 cmp r3,#2
 5325 0142 01D0     	 beq .L337
 5326              	 .loc 1 3524 0 discriminator 2
 5327 0144 0D23     	 movs r3,#13
 5328 0146 3DE1     	 b .L327
 5329              	.L337:
3525:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 5330              	 .loc 1 3525 0 is_stmt 1
 5331 0148 BB6A     	 ldr r3,[r7,#40]
 5332 014a 9B78     	 ldrb r3,[r3,#2]
 5333 014c 1A46     	 mov r2,r3
 5334 014e BB6B     	 ldr r3,[r7,#56]
 5335 0150 02FB03F3 	 mul r3,r2,r3
 5336 0154 BB63     	 str r3,[r7,#56]
3526:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3527:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 5337              	 .loc 1 3527 0
 5338 0156 BB6A     	 ldr r3,[r7,#40]
 5339 0158 93F84130 	 ldrb r3,[r3,#65]
 5340 015c 9AB2     	 uxth r2,r3
 5341 015e BB6A     	 ldr r3,[r7,#40]
 5342 0160 5A81     	 strh r2,[r3,#10]
3528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power o
 5343              	 .loc 1 3528 0
 5344 0162 BB6A     	 ldr r3,[r7,#40]
 5345 0164 5B89     	 ldrh r3,[r3,#10]
 5346 0166 002B     	 cmp r3,#0
 5347 0168 08D0     	 beq .L338
 5348              	 .loc 1 3528 0 is_stmt 0 discriminator 2
 5349 016a BB6A     	 ldr r3,[r7,#40]
 5350 016c 5B89     	 ldrh r3,[r3,#10]
 5351 016e 1A46     	 mov r2,r3
 5352 0170 BB6A     	 ldr r3,[r7,#40]
 5353 0172 5B89     	 ldrh r3,[r3,#10]
 5354 0174 013B     	 subs r3,r3,#1
 5355 0176 1340     	 ands r3,r3,r2
 5356 0178 002B     	 cmp r3,#0
 5357 017a 01D0     	 beq .L339
 5358              	.L338:
 5359              	 .loc 1 3528 0 discriminator 3
 5360 017c 0D23     	 movs r3,#13
 5361 017e 21E1     	 b .L327
 5362              	.L339:
3529:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3530:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 5363              	 .loc 1 3530 0 is_stmt 1
 5364 0180 BB6A     	 ldr r3,[r7,#40]
 5365 0182 4533     	 adds r3,r3,#69
 5366 0184 1846     	 mov r0,r3
 5367 0186 FFF7FEFF 	 bl ld_word
 5368 018a 0346     	 mov r3,r0
 5369 018c 1A46     	 mov r2,r3
 5370 018e BB6A     	 ldr r3,[r7,#40]
 5371 0190 1A81     	 strh r2,[r3,#8]
3531:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 5372              	 .loc 1 3531 0
 5373 0192 BB6A     	 ldr r3,[r7,#40]
 5374 0194 1B89     	 ldrh r3,[r3,#8]
 5375 0196 03F00F03 	 and r3,r3,#15
 5376 019a 9BB2     	 uxth r3,r3
 5377 019c 002B     	 cmp r3,#0
 5378 019e 01D0     	 beq .L340
 5379              	 .loc 1 3531 0 is_stmt 0 discriminator 1
 5380 01a0 0D23     	 movs r3,#13
 5381 01a2 0FE1     	 b .L327
 5382              	.L340:
3532:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3533:../Dave/Generated/FATFS/ff_Src/ff.c **** 		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 5383              	 .loc 1 3533 0 is_stmt 1
 5384 01a4 BB6A     	 ldr r3,[r7,#40]
 5385 01a6 4733     	 adds r3,r3,#71
 5386 01a8 1846     	 mov r0,r3
 5387 01aa FFF7FEFF 	 bl ld_word
 5388 01ae 0346     	 mov r3,r0
 5389 01b0 FB63     	 str r3,[r7,#60]
3534:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 5390              	 .loc 1 3534 0
 5391 01b2 FB6B     	 ldr r3,[r7,#60]
 5392 01b4 002B     	 cmp r3,#0
 5393 01b6 05D1     	 bne .L341
 5394              	 .loc 1 3534 0 is_stmt 0 discriminator 1
 5395 01b8 BB6A     	 ldr r3,[r7,#40]
 5396 01ba 5433     	 adds r3,r3,#84
 5397 01bc 1846     	 mov r0,r3
 5398 01be FFF7FEFF 	 bl ld_dword
 5399 01c2 F863     	 str r0,[r7,#60]
 5400              	.L341:
3535:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3536:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 5401              	 .loc 1 3536 0 is_stmt 1
 5402 01c4 BB6A     	 ldr r3,[r7,#40]
 5403 01c6 4233     	 adds r3,r3,#66
 5404 01c8 1846     	 mov r0,r3
 5405 01ca FFF7FEFF 	 bl ld_word
 5406 01ce 0346     	 mov r3,r0
 5407 01d0 FB83     	 strh r3,[r7,#30]
3537:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 5408              	 .loc 1 3537 0
 5409 01d2 FB8B     	 ldrh r3,[r7,#30]
 5410 01d4 002B     	 cmp r3,#0
 5411 01d6 01D1     	 bne .L342
 5412              	 .loc 1 3537 0 is_stmt 0 discriminator 1
 5413 01d8 0D23     	 movs r3,#13
 5414 01da F3E0     	 b .L327
 5415              	.L342:
3538:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3539:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine the FAT sub type */
3540:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 5416              	 .loc 1 3540 0 is_stmt 1
 5417 01dc FA8B     	 ldrh r2,[r7,#30]
 5418 01de BB6B     	 ldr r3,[r7,#56]
 5419 01e0 1344     	 add r3,r3,r2
 5420 01e2 BA6A     	 ldr r2,[r7,#40]
 5421 01e4 1289     	 ldrh r2,[r2,#8]
 5422 01e6 1209     	 lsrs r2,r2,#4
 5423 01e8 92B2     	 uxth r2,r2
 5424 01ea 1344     	 add r3,r3,r2
 5425 01ec BB61     	 str r3,[r7,#24]
3541:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 5426              	 .loc 1 3541 0
 5427 01ee FA6B     	 ldr r2,[r7,#60]
 5428 01f0 BB69     	 ldr r3,[r7,#24]
 5429 01f2 9A42     	 cmp r2,r3
 5430 01f4 01D2     	 bcs .L343
 5431              	 .loc 1 3541 0 is_stmt 0 discriminator 1
 5432 01f6 0D23     	 movs r3,#13
 5433 01f8 E4E0     	 b .L327
 5434              	.L343:
3542:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 5435              	 .loc 1 3542 0 is_stmt 1
 5436 01fa FA6B     	 ldr r2,[r7,#60]
 5437 01fc BB69     	 ldr r3,[r7,#24]
 5438 01fe D31A     	 subs r3,r2,r3
 5439 0200 BA6A     	 ldr r2,[r7,#40]
 5440 0202 5289     	 ldrh r2,[r2,#10]
 5441 0204 B3FBF2F3 	 udiv r3,r3,r2
 5442 0208 7B61     	 str r3,[r7,#20]
3543:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 5443              	 .loc 1 3543 0
 5444 020a 7B69     	 ldr r3,[r7,#20]
 5445 020c 002B     	 cmp r3,#0
 5446 020e 01D1     	 bne .L344
 5447              	 .loc 1 3543 0 is_stmt 0 discriminator 1
 5448 0210 0D23     	 movs r3,#13
 5449 0212 D7E0     	 b .L327
 5450              	.L344:
3544:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fmt = 0;
 5451              	 .loc 1 3544 0 is_stmt 1
 5452 0214 0023     	 movs r3,#0
 5453 0216 3B63     	 str r3,[r7,#48]
3545:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 5454              	 .loc 1 3545 0
 5455 0218 7B69     	 ldr r3,[r7,#20]
 5456 021a 284A     	 ldr r2,.L358+4
 5457 021c 9342     	 cmp r3,r2
 5458 021e 01D8     	 bhi .L345
 5459              	 .loc 1 3545 0 is_stmt 0 discriminator 1
 5460 0220 0323     	 movs r3,#3
 5461 0222 3B63     	 str r3,[r7,#48]
 5462              	.L345:
3546:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 5463              	 .loc 1 3546 0 is_stmt 1
 5464 0224 7B69     	 ldr r3,[r7,#20]
 5465 0226 4FF6F572 	 movw r2,#65525
 5466 022a 9342     	 cmp r3,r2
 5467 022c 01D8     	 bhi .L346
 5468              	 .loc 1 3546 0 is_stmt 0 discriminator 1
 5469 022e 0223     	 movs r3,#2
 5470 0230 3B63     	 str r3,[r7,#48]
 5471              	.L346:
3547:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 5472              	 .loc 1 3547 0 is_stmt 1
 5473 0232 7B69     	 ldr r3,[r7,#20]
 5474 0234 40F6F572 	 movw r2,#4085
 5475 0238 9342     	 cmp r3,r2
 5476 023a 01D8     	 bhi .L347
 5477              	 .loc 1 3547 0 is_stmt 0 discriminator 1
 5478 023c 0123     	 movs r3,#1
 5479 023e 3B63     	 str r3,[r7,#48]
 5480              	.L347:
3548:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == 0) return FR_NO_FILESYSTEM;
 5481              	 .loc 1 3548 0 is_stmt 1
 5482 0240 3B6B     	 ldr r3,[r7,#48]
 5483 0242 002B     	 cmp r3,#0
 5484 0244 01D1     	 bne .L348
 5485              	 .loc 1 3548 0 is_stmt 0 discriminator 1
 5486 0246 0D23     	 movs r3,#13
 5487 0248 BCE0     	 b .L327
 5488              	.L348:
3549:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3550:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Boundaries and Limits */
3551:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 5489              	 .loc 1 3551 0 is_stmt 1
 5490 024a 7B69     	 ldr r3,[r7,#20]
 5491 024c 9A1C     	 adds r2,r3,#2
 5492 024e BB6A     	 ldr r3,[r7,#40]
 5493 0250 9A61     	 str r2,[r3,#24]
3552:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->volbase = bsect;							/* Volume start sector */
 5494              	 .loc 1 3552 0
 5495 0252 BB6A     	 ldr r3,[r7,#40]
 5496 0254 3A6A     	 ldr r2,[r7,#32]
 5497 0256 1A62     	 str r2,[r3,#32]
3553:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 5498              	 .loc 1 3553 0
 5499 0258 FA8B     	 ldrh r2,[r7,#30]
 5500 025a 3B6A     	 ldr r3,[r7,#32]
 5501 025c 1A44     	 add r2,r2,r3
 5502 025e BB6A     	 ldr r3,[r7,#40]
 5503 0260 5A62     	 str r2,[r3,#36]
3554:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->database = bsect + sysect;					/* Data start sector */
 5504              	 .loc 1 3554 0
 5505 0262 3A6A     	 ldr r2,[r7,#32]
 5506 0264 BB69     	 ldr r3,[r7,#24]
 5507 0266 1A44     	 add r2,r2,r3
 5508 0268 BB6A     	 ldr r3,[r7,#40]
 5509 026a DA62     	 str r2,[r3,#44]
3555:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32) {
 5510              	 .loc 1 3555 0
 5511 026c 3B6B     	 ldr r3,[r7,#48]
 5512 026e 032B     	 cmp r3,#3
 5513 0270 1CD1     	 bne .L349
3556:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0
 5514              	 .loc 1 3556 0
 5515 0272 BB6A     	 ldr r3,[r7,#40]
 5516 0274 5E33     	 adds r3,r3,#94
 5517 0276 1846     	 mov r0,r3
 5518 0278 FFF7FEFF 	 bl ld_word
 5519 027c 0346     	 mov r3,r0
 5520 027e 002B     	 cmp r3,#0
 5521 0280 01D0     	 beq .L350
 5522              	 .loc 1 3556 0 is_stmt 0 discriminator 1
 5523 0282 0D23     	 movs r3,#13
 5524 0284 9EE0     	 b .L327
 5525              	.L350:
3557:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 5526              	 .loc 1 3557 0 is_stmt 1
 5527 0286 BB6A     	 ldr r3,[r7,#40]
 5528 0288 1B89     	 ldrh r3,[r3,#8]
 5529 028a 002B     	 cmp r3,#0
 5530 028c 01D0     	 beq .L351
 5531              	 .loc 1 3557 0 is_stmt 0 discriminator 1
 5532 028e 0D23     	 movs r3,#13
 5533 0290 98E0     	 b .L327
 5534              	.L351:
3558:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 5535              	 .loc 1 3558 0 is_stmt 1
 5536 0292 BB6A     	 ldr r3,[r7,#40]
 5537 0294 6033     	 adds r3,r3,#96
 5538 0296 1846     	 mov r0,r3
 5539 0298 FFF7FEFF 	 bl ld_dword
 5540 029c 0246     	 mov r2,r0
 5541 029e BB6A     	 ldr r3,[r7,#40]
 5542 02a0 9A62     	 str r2,[r3,#40]
3559:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 5543              	 .loc 1 3559 0
 5544 02a2 BB6A     	 ldr r3,[r7,#40]
 5545 02a4 9B69     	 ldr r3,[r3,#24]
 5546 02a6 9B00     	 lsls r3,r3,#2
 5547 02a8 7B63     	 str r3,[r7,#52]
 5548 02aa 22E0     	 b .L352
 5549              	.L349:
3560:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3561:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 5550              	 .loc 1 3561 0
 5551 02ac BB6A     	 ldr r3,[r7,#40]
 5552 02ae 1B89     	 ldrh r3,[r3,#8]
 5553 02b0 002B     	 cmp r3,#0
 5554 02b2 05D1     	 bne .L353
 5555              	 .loc 1 3561 0 is_stmt 0 discriminator 1
 5556 02b4 0D23     	 movs r3,#13
 5557 02b6 85E0     	 b .L327
 5558              	.L359:
 5559              	 .align 2
 5560              	.L358:
 5561 02b8 00000000 	 .word FatFs
 5562 02bc F5FFFF0F 	 .word 268435445
 5563              	.L353:
3562:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 5564              	 .loc 1 3562 0 is_stmt 1
 5565 02c0 BB6A     	 ldr r3,[r7,#40]
 5566 02c2 5A6A     	 ldr r2,[r3,#36]
 5567 02c4 BB6B     	 ldr r3,[r7,#56]
 5568 02c6 1A44     	 add r2,r2,r3
 5569 02c8 BB6A     	 ldr r3,[r7,#40]
 5570 02ca 9A62     	 str r2,[r3,#40]
3563:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
3564:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 5571              	 .loc 1 3564 0
 5572 02cc 3B6B     	 ldr r3,[r7,#48]
 5573 02ce 022B     	 cmp r3,#2
 5574 02d0 03D1     	 bne .L354
 5575              	 .loc 1 3564 0 is_stmt 0 discriminator 1
 5576 02d2 BB6A     	 ldr r3,[r7,#40]
 5577 02d4 9B69     	 ldr r3,[r3,#24]
 5578 02d6 5B00     	 lsls r3,r3,#1
 5579 02d8 0AE0     	 b .L355
 5580              	.L354:
 5581              	 .loc 1 3564 0 discriminator 2
 5582 02da BB6A     	 ldr r3,[r7,#40]
 5583 02dc 9A69     	 ldr r2,[r3,#24]
 5584 02de 1346     	 mov r3,r2
 5585 02e0 5B00     	 lsls r3,r3,#1
 5586 02e2 1344     	 add r3,r3,r2
 5587 02e4 5A08     	 lsrs r2,r3,#1
 5588 02e6 BB6A     	 ldr r3,[r7,#40]
 5589 02e8 9B69     	 ldr r3,[r3,#24]
 5590 02ea 03F00103 	 and r3,r3,#1
 5591 02ee 1344     	 add r3,r3,r2
 5592              	.L355:
3563:../Dave/Generated/FATFS/ff_Src/ff.c **** 			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 5593              	 .loc 1 3563 0 is_stmt 1
 5594 02f0 7B63     	 str r3,[r7,#52]
 5595              	.L352:
3565:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3566:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not
 5596              	 .loc 1 3566 0
 5597 02f2 BB6A     	 ldr r3,[r7,#40]
 5598 02f4 DA69     	 ldr r2,[r3,#28]
 5599 02f6 7B6B     	 ldr r3,[r7,#52]
 5600 02f8 03F2FF13 	 addw r3,r3,#511
 5601 02fc 5B0A     	 lsrs r3,r3,#9
 5602 02fe 9A42     	 cmp r2,r3
 5603 0300 01D2     	 bcs .L356
 5604              	 .loc 1 3566 0 is_stmt 0 discriminator 1
 5605 0302 0D23     	 movs r3,#13
 5606 0304 5EE0     	 b .L327
 5607              	.L356:
3567:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3568:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3569:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get FSInfo if available */
3570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 5608              	 .loc 1 3570 0 is_stmt 1
 5609 0306 BB6A     	 ldr r3,[r7,#40]
 5610 0308 4FF0FF32 	 mov r2,#-1
 5611 030c 1A61     	 str r2,[r3,#16]
 5612 030e BB6A     	 ldr r3,[r7,#40]
 5613 0310 1A69     	 ldr r2,[r3,#16]
 5614 0312 BB6A     	 ldr r3,[r7,#40]
 5615 0314 DA60     	 str r2,[r3,#12]
3571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fsi_flag = 0x80;
 5616              	 .loc 1 3571 0
 5617 0316 BB6A     	 ldr r3,[r7,#40]
 5618 0318 8022     	 movs r2,#128
 5619 031a 1A71     	 strb r2,[r3,#4]
3572:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 3) != 3
3573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fmt == FS_FAT32				/* Allow to update FSInfo only if BPB_FSInfo32 == 1 */
 5620              	 .loc 1 3573 0
 5621 031c 3B6B     	 ldr r3,[r7,#48]
 5622 031e 032B     	 cmp r3,#3
 5623 0320 3BD1     	 bne .L357
3574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& ld_word(fs->win + BPB_FSInfo32) == 1
 5624              	 .loc 1 3574 0
 5625 0322 BB6A     	 ldr r3,[r7,#40]
 5626 0324 6433     	 adds r3,r3,#100
 5627 0326 1846     	 mov r0,r3
 5628 0328 FFF7FEFF 	 bl ld_word
 5629 032c 0346     	 mov r3,r0
 5630 032e 012B     	 cmp r3,#1
 5631 0330 33D1     	 bne .L357
3575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			&& move_window(fs, bsect + 1) == FR_OK)
 5632              	 .loc 1 3575 0
 5633 0332 3B6A     	 ldr r3,[r7,#32]
 5634 0334 0133     	 adds r3,r3,#1
 5635 0336 B86A     	 ldr r0,[r7,#40]
 5636 0338 1946     	 mov r1,r3
 5637 033a FFF7FEFF 	 bl move_window
 5638 033e 0346     	 mov r3,r0
 5639 0340 002B     	 cmp r3,#0
 5640 0342 2AD1     	 bne .L357
3576:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{
3577:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag = 0;
 5641              	 .loc 1 3577 0
 5642 0344 BB6A     	 ldr r3,[r7,#40]
 5643 0346 0022     	 movs r2,#0
 5644 0348 1A71     	 strb r2,[r3,#4]
3578:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSInfo data if available */
 5645              	 .loc 1 3578 0
 5646 034a BB6A     	 ldr r3,[r7,#40]
 5647 034c 03F23223 	 addw r3,r3,#562
 5648 0350 1846     	 mov r0,r3
 5649 0352 FFF7FEFF 	 bl ld_word
 5650 0356 0346     	 mov r3,r0
 5651 0358 1A46     	 mov r2,r3
 5652 035a 4AF65523 	 movw r3,#43605
 5653 035e 9A42     	 cmp r2,r3
 5654 0360 1BD1     	 bne .L357
3579:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 5655              	 .loc 1 3579 0
 5656 0362 BB6A     	 ldr r3,[r7,#40]
 5657 0364 3433     	 adds r3,r3,#52
 5658 0366 1846     	 mov r0,r3
 5659 0368 FFF7FEFF 	 bl ld_dword
 5660 036c 0246     	 mov r2,r0
 5661 036e 174B     	 ldr r3,.L360
 5662 0370 9A42     	 cmp r2,r3
 5663 0372 12D1     	 bne .L357
3580:../Dave/Generated/FATFS/ff_Src/ff.c **** 				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 5664              	 .loc 1 3580 0
 5665 0374 BB6A     	 ldr r3,[r7,#40]
 5666 0376 03F50673 	 add r3,r3,#536
 5667 037a 1846     	 mov r0,r3
 5668 037c FFF7FEFF 	 bl ld_dword
 5669 0380 0246     	 mov r2,r0
 5670 0382 134B     	 ldr r3,.L360+4
 5671 0384 9A42     	 cmp r2,r3
 5672 0386 08D1     	 bne .L357
3581:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3582:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 1) == 0
3583:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 5673              	 .loc 1 3583 0
 5674 0388 BB6A     	 ldr r3,[r7,#40]
 5675 038a 03F50773 	 add r3,r3,#540
 5676 038e 1846     	 mov r0,r3
 5677 0390 FFF7FEFF 	 bl ld_dword
 5678 0394 0246     	 mov r2,r0
 5679 0396 BB6A     	 ldr r3,[r7,#40]
 5680 0398 1A61     	 str r2,[r3,#16]
 5681              	.L357:
3584:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3585:../Dave/Generated/FATFS/ff_Src/ff.c **** #if (FF_FS_NOFSINFO & 2) == 0
3586:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
3587:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3588:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3589:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3590:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* (FF_FS_NOFSINFO & 3) != 3 */
3591:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* !FF_FS_READONLY */
3592:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3593:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3594:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->fs_type = (BYTE)fmt;/* FAT sub-type */
 5682              	 .loc 1 3594 0
 5683 039a 3B6B     	 ldr r3,[r7,#48]
 5684 039c DAB2     	 uxtb r2,r3
 5685 039e BB6A     	 ldr r3,[r7,#40]
 5686 03a0 1A70     	 strb r2,[r3]
3595:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->id = ++Fsid;		/* Volume mount ID */
 5687              	 .loc 1 3595 0
 5688 03a2 0C4B     	 ldr r3,.L360+8
 5689 03a4 1B88     	 ldrh r3,[r3]
 5690 03a6 0133     	 adds r3,r3,#1
 5691 03a8 9AB2     	 uxth r2,r3
 5692 03aa 0A4B     	 ldr r3,.L360+8
 5693 03ac 1A80     	 strh r2,[r3]
 5694 03ae 094B     	 ldr r3,.L360+8
 5695 03b0 1A88     	 ldrh r2,[r3]
 5696 03b2 BB6A     	 ldr r3,[r7,#40]
 5697 03b4 DA80     	 strh r2,[r3,#6]
3596:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 1
3597:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
3598:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
3600:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3601:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3602:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
3603:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fs->cdir = 0;			/* Initialize current directory */
 5698              	 .loc 1 3603 0
 5699 03b6 BB6A     	 ldr r3,[r7,#40]
 5700 03b8 0022     	 movs r2,#0
 5701 03ba 5A61     	 str r2,[r3,#20]
3604:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3605:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0			/* Clear file lock semaphores */
3606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	clear_lock(fs);
 5702              	 .loc 1 3606 0
 5703 03bc B86A     	 ldr r0,[r7,#40]
 5704 03be FFF7FEFF 	 bl clear_lock
3607:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 5705              	 .loc 1 3608 0
 5706 03c2 0023     	 movs r3,#0
 5707              	.L327:
3609:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5708              	 .loc 1 3609 0
 5709 03c4 1846     	 mov r0,r3
 5710 03c6 4037     	 adds r7,r7,#64
 5711              	.LCFI215:
 5712              	 .cfi_def_cfa_offset 8
 5713 03c8 BD46     	 mov sp,r7
 5714              	.LCFI216:
 5715              	 .cfi_def_cfa_register 13
 5716              	 
 5717 03ca 80BD     	 pop {r7,pc}
 5718              	.L361:
 5719              	 .align 2
 5720              	.L360:
 5721 03cc 52526141 	 .word 1096897106
 5722 03d0 72724161 	 .word 1631679090
 5723 03d4 00000000 	 .word Fsid
 5724              	 .cfi_endproc
 5725              	.LFE39:
 5727              	 .section .text.validate,"ax",%progbits
 5728              	 .align 2
 5729              	 .thumb
 5730              	 .thumb_func
 5732              	validate:
 5733              	.LFB40:
3610:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3611:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3612:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3613:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3614:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3615:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Check if the file/directory object is valid or not                    */
3616:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3617:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3618:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
3619:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR object, to check validity
3620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
3621:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3622:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5734              	 .loc 1 3622 0
 5735              	 .cfi_startproc
 5736              	 
 5737              	 
 5738 0000 80B5     	 push {r7,lr}
 5739              	.LCFI217:
 5740              	 .cfi_def_cfa_offset 8
 5741              	 .cfi_offset 7,-8
 5742              	 .cfi_offset 14,-4
 5743 0002 84B0     	 sub sp,sp,#16
 5744              	.LCFI218:
 5745              	 .cfi_def_cfa_offset 24
 5746 0004 00AF     	 add r7,sp,#0
 5747              	.LCFI219:
 5748              	 .cfi_def_cfa_register 7
 5749 0006 7860     	 str r0,[r7,#4]
 5750 0008 3960     	 str r1,[r7]
3623:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res = FR_INVALID_OBJECT;
 5751              	 .loc 1 3623 0
 5752 000a 0923     	 movs r3,#9
 5753 000c FB73     	 strb r3,[r7,#15]
3624:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3625:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3626:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid
 5754              	 .loc 1 3626 0
 5755 000e 7B68     	 ldr r3,[r7,#4]
 5756 0010 002B     	 cmp r3,#0
 5757 0012 1CD0     	 beq .L363
 5758              	 .loc 1 3626 0 is_stmt 0 discriminator 1
 5759 0014 7B68     	 ldr r3,[r7,#4]
 5760 0016 1B68     	 ldr r3,[r3]
 5761 0018 002B     	 cmp r3,#0
 5762 001a 18D0     	 beq .L363
 5763              	 .loc 1 3626 0 discriminator 2
 5764 001c 7B68     	 ldr r3,[r7,#4]
 5765 001e 1B68     	 ldr r3,[r3]
 5766 0020 1B78     	 ldrb r3,[r3]
 5767 0022 002B     	 cmp r3,#0
 5768 0024 13D0     	 beq .L363
 5769              	 .loc 1 3626 0 discriminator 3
 5770 0026 7B68     	 ldr r3,[r7,#4]
 5771 0028 9A88     	 ldrh r2,[r3,#4]
 5772 002a 7B68     	 ldr r3,[r7,#4]
 5773 002c 1B68     	 ldr r3,[r3]
 5774 002e DB88     	 ldrh r3,[r3,#6]
 5775 0030 9A42     	 cmp r2,r3
 5776 0032 0CD1     	 bne .L363
3627:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
3628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
3629:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initializ
3630:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
3631:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3632:../Dave/Generated/FATFS/ff_Src/ff.c **** 				unlock_fs(obj->fs, FR_OK);
3633:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3634:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
3635:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_TIMEOUT;
3636:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3637:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3638:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialize
 5777              	 .loc 1 3638 0 is_stmt 1
 5778 0034 7B68     	 ldr r3,[r7,#4]
 5779 0036 1B68     	 ldr r3,[r3]
 5780 0038 5B78     	 ldrb r3,[r3,#1]
 5781 003a 1846     	 mov r0,r3
 5782 003c FFF7FEFF 	 bl disk_status
 5783 0040 0346     	 mov r3,r0
 5784 0042 03F00103 	 and r3,r3,#1
 5785 0046 002B     	 cmp r3,#0
 5786 0048 01D1     	 bne .L363
3639:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 5787              	 .loc 1 3639 0
 5788 004a 0023     	 movs r3,#0
 5789 004c FB73     	 strb r3,[r7,#15]
 5790              	.L363:
3640:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3641:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 5791              	 .loc 1 3643 0
 5792 004e FB7B     	 ldrb r3,[r7,#15]
 5793 0050 002B     	 cmp r3,#0
 5794 0052 02D1     	 bne .L364
 5795              	 .loc 1 3643 0 is_stmt 0 discriminator 1
 5796 0054 7B68     	 ldr r3,[r7,#4]
 5797 0056 1B68     	 ldr r3,[r3]
 5798 0058 00E0     	 b .L365
 5799              	.L364:
 5800              	 .loc 1 3643 0 discriminator 2
 5801 005a 0023     	 movs r3,#0
 5802              	.L365:
 5803              	 .loc 1 3643 0 discriminator 4
 5804 005c 3A68     	 ldr r2,[r7]
 5805 005e 1360     	 str r3,[r2]
3644:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 5806              	 .loc 1 3644 0 is_stmt 1 discriminator 4
 5807 0060 FB7B     	 ldrb r3,[r7,#15]
3645:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5808              	 .loc 1 3645 0 discriminator 4
 5809 0062 1846     	 mov r0,r3
 5810 0064 1037     	 adds r7,r7,#16
 5811              	.LCFI220:
 5812              	 .cfi_def_cfa_offset 8
 5813 0066 BD46     	 mov sp,r7
 5814              	.LCFI221:
 5815              	 .cfi_def_cfa_register 13
 5816              	 
 5817 0068 80BD     	 pop {r7,pc}
 5818              	 .cfi_endproc
 5819              	.LFE40:
 5821 006a 00BF     	 .section .text.f_mount,"ax",%progbits
 5822              	 .align 2
 5823              	 .global f_mount
 5824              	 .thumb
 5825              	 .thumb_func
 5827              	f_mount:
 5828              	.LFB41:
3646:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3647:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3648:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3649:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3650:../Dave/Generated/FATFS/ff_Src/ff.c **** /*---------------------------------------------------------------------------
3651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3652:../Dave/Generated/FATFS/ff_Src/ff.c ****    Public Functions (FatFs API)
3653:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3654:../Dave/Generated/FATFS/ff_Src/ff.c **** ----------------------------------------------------------------------------*/
3655:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3656:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3657:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3658:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3659:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Mount/Unmount a Logical Drive                                         */
3660:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3661:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3662:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mount (
3663:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS* fs,			/* Pointer to the filesystem object (NULL:unmount)*/
3664:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
3665:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
3666:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3667:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5829              	 .loc 1 3667 0
 5830              	 .cfi_startproc
 5831              	 
 5832              	 
 5833 0000 80B5     	 push {r7,lr}
 5834              	.LCFI222:
 5835              	 .cfi_def_cfa_offset 8
 5836              	 .cfi_offset 7,-8
 5837              	 .cfi_offset 14,-4
 5838 0002 88B0     	 sub sp,sp,#32
 5839              	.LCFI223:
 5840              	 .cfi_def_cfa_offset 40
 5841 0004 00AF     	 add r7,sp,#0
 5842              	.LCFI224:
 5843              	 .cfi_def_cfa_register 7
 5844 0006 F860     	 str r0,[r7,#12]
 5845 0008 B960     	 str r1,[r7,#8]
 5846 000a 1346     	 mov r3,r2
 5847 000c FB71     	 strb r3,[r7,#7]
3668:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *cfs;
3669:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
3670:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *rp = path;
 5848              	 .loc 1 3671 0
 5849 000e BB68     	 ldr r3,[r7,#8]
 5850 0010 3B61     	 str r3,[r7,#16]
3672:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3673:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3674:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3675:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&rp);
 5851              	 .loc 1 3675 0
 5852 0012 07F11003 	 add r3,r7,#16
 5853 0016 1846     	 mov r0,r3
 5854 0018 FFF7FEFF 	 bl get_ldnumber
 5855 001c F861     	 str r0,[r7,#28]
3676:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 5856              	 .loc 1 3676 0
 5857 001e FB69     	 ldr r3,[r7,#28]
 5858 0020 002B     	 cmp r3,#0
 5859 0022 01DA     	 bge .L368
 5860              	 .loc 1 3676 0 is_stmt 0 discriminator 1
 5861 0024 0B23     	 movs r3,#11
 5862 0026 29E0     	 b .L373
 5863              	.L368:
3677:../Dave/Generated/FATFS/ff_Src/ff.c **** 	cfs = FatFs[vol];					/* Pointer to fs object */
 5864              	 .loc 1 3677 0 is_stmt 1
 5865 0028 164A     	 ldr r2,.L374
 5866 002a FB69     	 ldr r3,[r7,#28]
 5867 002c 52F82330 	 ldr r3,[r2,r3,lsl#2]
 5868 0030 BB61     	 str r3,[r7,#24]
3678:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3679:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (cfs) {
 5869              	 .loc 1 3679 0
 5870 0032 BB69     	 ldr r3,[r7,#24]
 5871 0034 002B     	 cmp r3,#0
 5872 0036 05D0     	 beq .L370
3680:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3681:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clear_lock(cfs);
 5873              	 .loc 1 3681 0
 5874 0038 B869     	 ldr r0,[r7,#24]
 5875 003a FFF7FEFF 	 bl clear_lock
3682:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3683:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Discard sync object of the current volume */
3684:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
3685:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3686:../Dave/Generated/FATFS/ff_Src/ff.c **** 		cfs->fs_type = 0;				/* Clear old fs object */
 5876              	 .loc 1 3686 0
 5877 003e BB69     	 ldr r3,[r7,#24]
 5878 0040 0022     	 movs r2,#0
 5879 0042 1A70     	 strb r2,[r3]
 5880              	.L370:
3687:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3688:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs) {
 5881              	 .loc 1 3689 0
 5882 0044 FB68     	 ldr r3,[r7,#12]
 5883 0046 002B     	 cmp r3,#0
 5884 0048 02D0     	 beq .L371
3690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->fs_type = 0;				/* Clear new fs object */
 5885              	 .loc 1 3690 0
 5886 004a FB68     	 ldr r3,[r7,#12]
 5887 004c 0022     	 movs r2,#0
 5888 004e 1A70     	 strb r2,[r3]
 5889              	.L371:
3691:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT						/* Create sync object for the new volume */
3692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
3693:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3694:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FatFs[vol] = fs;					/* Register new fs object */
 5890              	 .loc 1 3695 0
 5891 0050 FA68     	 ldr r2,[r7,#12]
 5892 0052 0C49     	 ldr r1,.L374
 5893 0054 FB69     	 ldr r3,[r7,#28]
 5894 0056 41F82320 	 str r2,[r1,r3,lsl#2]
3696:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3697:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (opt == 0) return FR_OK;			/* Do not mount now, it will be mounted later */
 5895              	 .loc 1 3697 0
 5896 005a FB79     	 ldrb r3,[r7,#7]
 5897 005c 002B     	 cmp r3,#0
 5898 005e 01D1     	 bne .L372
 5899              	 .loc 1 3697 0 is_stmt 0 discriminator 1
 5900 0060 0023     	 movs r3,#0
 5901 0062 0BE0     	 b .L373
 5902              	.L372:
3698:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3699:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 5903              	 .loc 1 3699 0 is_stmt 1
 5904 0064 07F10802 	 add r2,r7,#8
 5905 0068 07F10C03 	 add r3,r7,#12
 5906 006c 1046     	 mov r0,r2
 5907 006e 1946     	 mov r1,r3
 5908 0070 0022     	 movs r2,#0
 5909 0072 FFF7FEFF 	 bl mount_volume
 5910 0076 0346     	 mov r3,r0
 5911 0078 FB75     	 strb r3,[r7,#23]
3700:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 5912              	 .loc 1 3700 0
 5913 007a FB7D     	 ldrb r3,[r7,#23]
 5914              	.L373:
3701:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 5915              	 .loc 1 3701 0 discriminator 1
 5916 007c 1846     	 mov r0,r3
 5917 007e 2037     	 adds r7,r7,#32
 5918              	.LCFI225:
 5919              	 .cfi_def_cfa_offset 8
 5920 0080 BD46     	 mov sp,r7
 5921              	.LCFI226:
 5922              	 .cfi_def_cfa_register 13
 5923              	 
 5924 0082 80BD     	 pop {r7,pc}
 5925              	.L375:
 5926              	 .align 2
 5927              	.L374:
 5928 0084 00000000 	 .word FatFs
 5929              	 .cfi_endproc
 5930              	.LFE41:
 5932              	 .section .text.f_open,"ax",%progbits
 5933              	 .align 2
 5934              	 .global f_open
 5935              	 .thumb
 5936              	 .thumb_func
 5938              	f_open:
 5939              	.LFB42:
3702:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3703:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3704:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3705:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3706:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3707:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Open or Create a File                                                 */
3708:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3709:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3710:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_open (
3711:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the blank file object */
3712:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file name */
3713:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mode			/* Access mode and file open mode flags */
3714:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3715:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 5940              	 .loc 1 3715 0
 5941              	 .cfi_startproc
 5942              	 
 5943              	 
 5944 0000 80B5     	 push {r7,lr}
 5945              	.LCFI227:
 5946              	 .cfi_def_cfa_offset 8
 5947              	 .cfi_offset 7,-8
 5948              	 .cfi_offset 14,-4
 5949 0002 98B0     	 sub sp,sp,#96
 5950              	.LCFI228:
 5951              	 .cfi_def_cfa_offset 104
 5952 0004 00AF     	 add r7,sp,#0
 5953              	.LCFI229:
 5954              	 .cfi_def_cfa_register 7
 5955 0006 F860     	 str r0,[r7,#12]
 5956 0008 B960     	 str r1,[r7,#8]
 5957 000a 1346     	 mov r3,r2
 5958 000c FB71     	 strb r3,[r7,#7]
3716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3717:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
3718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3719:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, bcs, clst,  tm;
3721:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sc;
3722:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs;
3723:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3724:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
3725:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3726:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3727:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!fp) return FR_INVALID_OBJECT;
 5959              	 .loc 1 3727 0
 5960 000e FB68     	 ldr r3,[r7,#12]
 5961 0010 002B     	 cmp r3,#0
 5962 0012 01D1     	 bne .L377
 5963              	 .loc 1 3727 0 is_stmt 0 discriminator 1
 5964 0014 0923     	 movs r3,#9
 5965 0016 B2E1     	 b .L401
 5966              	.L377:
3728:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3729:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
3730:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN
 5967              	 .loc 1 3730 0 is_stmt 1
 5968 0018 FB79     	 ldrb r3,[r7,#7]
 5969 001a 03F03F03 	 and r3,r3,#63
 5970 001e FB71     	 strb r3,[r7,#7]
3731:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, mode);
 5971              	 .loc 1 3731 0
 5972 0020 07F10801 	 add r1,r7,#8
 5973 0024 07F11002 	 add r2,r7,#16
 5974 0028 FB79     	 ldrb r3,[r7,#7]
 5975 002a 0846     	 mov r0,r1
 5976 002c 1146     	 mov r1,r2
 5977 002e 1A46     	 mov r2,r3
 5978 0030 FFF7FEFF 	 bl mount_volume
 5979 0034 0346     	 mov r3,r0
 5980 0036 87F85F30 	 strb r3,[r7,#95]
3732:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 5981              	 .loc 1 3732 0
 5982 003a 97F85F30 	 ldrb r3,[r7,#95]
 5983 003e 002B     	 cmp r3,#0
 5984 0040 40F09481 	 bne .L379
3733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 5985              	 .loc 1 3733 0
 5986 0044 3B69     	 ldr r3,[r7,#16]
 5987 0046 7B61     	 str r3,[r7,#20]
3734:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
3735:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 5988              	 .loc 1 3735 0
 5989 0048 BB68     	 ldr r3,[r7,#8]
 5990 004a 07F11402 	 add r2,r7,#20
 5991 004e 1046     	 mov r0,r2
 5992 0050 1946     	 mov r1,r3
 5993 0052 FFF7FEFF 	 bl follow_path
 5994 0056 0346     	 mov r3,r0
 5995 0058 87F85F30 	 strb r3,[r7,#95]
3736:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY	/* Read/Write configuration */
3737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 5996              	 .loc 1 3737 0
 5997 005c 97F85F30 	 ldrb r3,[r7,#95]
 5998 0060 002B     	 cmp r3,#0
 5999 0062 1BD1     	 bne .L380
3738:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 6000              	 .loc 1 3738 0
 6001 0064 97F84330 	 ldrb r3,[r7,#67]
 6002 0068 DBB2     	 uxtb r3,r3
 6003 006a 5BB2     	 sxtb r3,r3
 6004 006c 002B     	 cmp r3,#0
 6005 006e 03DA     	 bge .L381
3739:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 6006              	 .loc 1 3739 0
 6007 0070 0623     	 movs r3,#6
 6008 0072 87F85F30 	 strb r3,[r7,#95]
 6009 0076 11E0     	 b .L380
 6010              	.L381:
3740:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3741:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3742:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {
3743:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);		/* Check if the file can be used */
 6011              	 .loc 1 3743 0
 6012 0078 FB79     	 ldrb r3,[r7,#7]
 6013 007a 23F00103 	 bic r3,r3,#1
 6014 007e 002B     	 cmp r3,#0
 6015 0080 14BF     	 ite ne
 6016 0082 0123     	 movne r3,#1
 6017 0084 0023     	 moveq r3,#0
 6018 0086 DBB2     	 uxtb r3,r3
 6019 0088 1A46     	 mov r2,r3
 6020 008a 07F11403 	 add r3,r7,#20
 6021 008e 1846     	 mov r0,r3
 6022 0090 1146     	 mov r1,r2
 6023 0092 FFF7FEFF 	 bl chk_lock
 6024 0096 0346     	 mov r3,r0
 6025 0098 87F85F30 	 strb r3,[r7,#95]
 6026              	.L380:
3744:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3745:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3746:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3747:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create or Open a file */
3748:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 6027              	 .loc 1 3748 0
 6028 009c FB79     	 ldrb r3,[r7,#7]
 6029 009e 03F01C03 	 and r3,r3,#28
 6030 00a2 002B     	 cmp r3,#0
 6031 00a4 00F08180 	 beq .L382
3749:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res != FR_OK) {					/* No file, create new */
 6032              	 .loc 1 3749 0
 6033 00a8 97F85F30 	 ldrb r3,[r7,#95]
 6034 00ac 002B     	 cmp r3,#0
 6035 00ae 17D0     	 beq .L383
3750:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 6036              	 .loc 1 3750 0
 6037 00b0 97F85F30 	 ldrb r3,[r7,#95]
 6038 00b4 042B     	 cmp r3,#4
 6039 00b6 0ED1     	 bne .L384
3751:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3752:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 6040              	 .loc 1 3752 0
 6041 00b8 FFF7FEFF 	 bl enq_lock
 6042 00bc 0346     	 mov r3,r0
 6043 00be 002B     	 cmp r3,#0
 6044 00c0 06D0     	 beq .L385
 6045              	 .loc 1 3752 0 is_stmt 0 discriminator 1
 6046 00c2 07F11403 	 add r3,r7,#20
 6047 00c6 1846     	 mov r0,r3
 6048 00c8 FFF7FEFF 	 bl dir_register
 6049 00cc 0346     	 mov r3,r0
 6050 00ce 00E0     	 b .L386
 6051              	.L385:
 6052              	 .loc 1 3752 0 discriminator 2
 6053 00d0 1223     	 movs r3,#18
 6054              	.L386:
 6055              	 .loc 1 3752 0 discriminator 4
 6056 00d2 87F85F30 	 strb r3,[r7,#95]
 6057              	.L384:
3753:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3754:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&dj);
3755:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3756:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3757:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mode |= FA_CREATE_ALWAYS;		/* File is created */
 6058              	 .loc 1 3757 0 is_stmt 1
 6059 00d6 FB79     	 ldrb r3,[r7,#7]
 6060 00d8 43F00803 	 orr r3,r3,#8
 6061 00dc FB71     	 strb r3,[r7,#7]
 6062 00de 10E0     	 b .L387
 6063              	.L383:
3758:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3759:../Dave/Generated/FATFS/ff_Src/ff.c **** 			else {								/* Any object with the same name is already existing */
3760:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 6064              	 .loc 1 3760 0
 6065 00e0 BB7E     	 ldrb r3,[r7,#26]
 6066 00e2 03F01103 	 and r3,r3,#17
 6067 00e6 002B     	 cmp r3,#0
 6068 00e8 03D0     	 beq .L388
3761:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;
 6069              	 .loc 1 3761 0
 6070 00ea 0723     	 movs r3,#7
 6071 00ec 87F85F30 	 strb r3,[r7,#95]
 6072 00f0 07E0     	 b .L387
 6073              	.L388:
3762:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3763:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 6074              	 .loc 1 3763 0
 6075 00f2 FB79     	 ldrb r3,[r7,#7]
 6076 00f4 03F00403 	 and r3,r3,#4
 6077 00f8 002B     	 cmp r3,#0
 6078 00fa 02D0     	 beq .L387
 6079              	 .loc 1 3763 0 is_stmt 0 discriminator 1
 6080 00fc 0823     	 movs r3,#8
 6081 00fe 87F85F30 	 strb r3,[r7,#95]
 6082              	.L387:
3764:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3765:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3766:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 6083              	 .loc 1 3766 0 is_stmt 1
 6084 0102 97F85F30 	 ldrb r3,[r7,#95]
 6085 0106 002B     	 cmp r3,#0
 6086 0108 69D1     	 bne .L390
 6087              	 .loc 1 3766 0 is_stmt 0 discriminator 1
 6088 010a FB79     	 ldrb r3,[r7,#7]
 6089 010c 03F00803 	 and r3,r3,#8
 6090 0110 002B     	 cmp r3,#0
 6091 0112 64D0     	 beq .L390
3767:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3768:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
3769:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get current allocation info */
3770:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.fs = fs;
3771:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &fp->obj);
3772:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry block initial state */
3773:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 2, 0, 30);		/* Clear 85 entry except for NumSec */
3774:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_set(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
3775:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_ARC;
3776:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
3777:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 1;
3778:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
3779:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
3780:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
3781:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
3782:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3783:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
3784:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3785:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
3786:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Set directory entry initial state */
3787:../Dave/Generated/FATFS/ff_Src/ff.c **** 					tm = GET_FATTIME();					/* Set created time */
 6092              	 .loc 1 3787 0 is_stmt 1
 6093 0114 FFF7FEFF 	 bl get_fattime
 6094 0118 3865     	 str r0,[r7,#80]
3788:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_CrtTime, tm);
 6095              	 .loc 1 3788 0
 6096 011a 7B6B     	 ldr r3,[r7,#52]
 6097 011c 0E33     	 adds r3,r3,#14
 6098 011e 1846     	 mov r0,r3
 6099 0120 396D     	 ldr r1,[r7,#80]
 6100 0122 FFF7FEFF 	 bl st_dword
3789:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, tm);
 6101              	 .loc 1 3789 0
 6102 0126 7B6B     	 ldr r3,[r7,#52]
 6103 0128 1633     	 adds r3,r3,#22
 6104 012a 1846     	 mov r0,r3
 6105 012c 396D     	 ldr r1,[r7,#80]
 6106 012e FFF7FEFF 	 bl st_dword
3790:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 6107              	 .loc 1 3790 0
 6108 0132 3A69     	 ldr r2,[r7,#16]
 6109 0134 7B6B     	 ldr r3,[r7,#52]
 6110 0136 1046     	 mov r0,r2
 6111 0138 1946     	 mov r1,r3
 6112 013a FFF7FEFF 	 bl ld_clust
 6113 013e F864     	 str r0,[r7,#76]
3791:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 6114              	 .loc 1 3791 0
 6115 0140 7B6B     	 ldr r3,[r7,#52]
 6116 0142 0B33     	 adds r3,r3,#11
 6117 0144 2022     	 movs r2,#32
 6118 0146 1A70     	 strb r2,[r3]
3792:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 6119              	 .loc 1 3792 0
 6120 0148 3A69     	 ldr r2,[r7,#16]
 6121 014a 7B6B     	 ldr r3,[r7,#52]
 6122 014c 1046     	 mov r0,r2
 6123 014e 1946     	 mov r1,r3
 6124 0150 0022     	 movs r2,#0
 6125 0152 FFF7FEFF 	 bl st_clust
3793:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_FileSize, 0);
 6126              	 .loc 1 3793 0
 6127 0156 7B6B     	 ldr r3,[r7,#52]
 6128 0158 1C33     	 adds r3,r3,#28
 6129 015a 1846     	 mov r0,r3
 6130 015c 0021     	 movs r1,#0
 6131 015e FFF7FEFF 	 bl st_dword
3794:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 6132              	 .loc 1 3794 0
 6133 0162 3B69     	 ldr r3,[r7,#16]
 6134 0164 0122     	 movs r2,#1
 6135 0166 DA70     	 strb r2,[r3,#3]
3795:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (cl != 0) {						/* Remove the cluster chain if exist */
 6136              	 .loc 1 3795 0
 6137 0168 FB6C     	 ldr r3,[r7,#76]
 6138 016a 002B     	 cmp r3,#0
 6139 016c 37D0     	 beq .L390
3796:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sc = fs->winsect;
 6140              	 .loc 1 3796 0
 6141 016e 3B69     	 ldr r3,[r7,#16]
 6142 0170 1B6B     	 ldr r3,[r3,#48]
 6143 0172 BB64     	 str r3,[r7,#72]
3797:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = remove_chain(&dj.obj, cl, 0);
 6144              	 .loc 1 3797 0
 6145 0174 07F11403 	 add r3,r7,#20
 6146 0178 1846     	 mov r0,r3
 6147 017a F96C     	 ldr r1,[r7,#76]
 6148 017c 0022     	 movs r2,#0
 6149 017e FFF7FEFF 	 bl remove_chain
 6150 0182 0346     	 mov r3,r0
 6151 0184 87F85F30 	 strb r3,[r7,#95]
3798:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 6152              	 .loc 1 3798 0
 6153 0188 97F85F30 	 ldrb r3,[r7,#95]
 6154 018c 002B     	 cmp r3,#0
 6155 018e 26D1     	 bne .L390
3799:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sc);
 6156              	 .loc 1 3799 0
 6157 0190 3B69     	 ldr r3,[r7,#16]
 6158 0192 1846     	 mov r0,r3
 6159 0194 B96C     	 ldr r1,[r7,#72]
 6160 0196 FFF7FEFF 	 bl move_window
 6161 019a 0346     	 mov r3,r0
 6162 019c 87F85F30 	 strb r3,[r7,#95]
3800:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 6163              	 .loc 1 3800 0
 6164 01a0 3B69     	 ldr r3,[r7,#16]
 6165 01a2 FA6C     	 ldr r2,[r7,#76]
 6166 01a4 013A     	 subs r2,r2,#1
 6167 01a6 DA60     	 str r2,[r3,#12]
 6168 01a8 19E0     	 b .L390
 6169              	.L382:
3801:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
3802:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3803:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3804:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3805:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3806:../Dave/Generated/FATFS/ff_Src/ff.c **** 		else {	/* Open an existing file */
3807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {					/* Is the object exsiting? */
 6170              	 .loc 1 3807 0
 6171 01aa 97F85F30 	 ldrb r3,[r7,#95]
 6172 01ae 002B     	 cmp r3,#0
 6173 01b0 15D1     	 bne .L390
3808:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 6174              	 .loc 1 3808 0
 6175 01b2 BB7E     	 ldrb r3,[r7,#26]
 6176 01b4 03F01003 	 and r3,r3,#16
 6177 01b8 002B     	 cmp r3,#0
 6178 01ba 03D0     	 beq .L391
3809:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
 6179              	 .loc 1 3809 0
 6180 01bc 0423     	 movs r3,#4
 6181 01be 87F85F30 	 strb r3,[r7,#95]
 6182 01c2 0CE0     	 b .L390
 6183              	.L391:
3810:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
3811:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 6184              	 .loc 1 3811 0
 6185 01c4 FB79     	 ldrb r3,[r7,#7]
 6186 01c6 03F00203 	 and r3,r3,#2
 6187 01ca 002B     	 cmp r3,#0
 6188 01cc 07D0     	 beq .L390
 6189              	 .loc 1 3811 0 is_stmt 0 discriminator 1
 6190 01ce BB7E     	 ldrb r3,[r7,#26]
 6191 01d0 03F00103 	 and r3,r3,#1
 6192 01d4 002B     	 cmp r3,#0
 6193 01d6 02D0     	 beq .L390
3812:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 6194              	 .loc 1 3812 0 is_stmt 1
 6195 01d8 0723     	 movs r3,#7
 6196 01da 87F85F30 	 strb r3,[r7,#95]
 6197              	.L390:
3813:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3814:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3815:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3816:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3817:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 6198              	 .loc 1 3817 0
 6199 01de 97F85F30 	 ldrb r3,[r7,#95]
 6200 01e2 002B     	 cmp r3,#0
 6201 01e4 28D1     	 bne .L392
3818:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwrit
 6202              	 .loc 1 3818 0
 6203 01e6 FB79     	 ldrb r3,[r7,#7]
 6204 01e8 03F00803 	 and r3,r3,#8
 6205 01ec 002B     	 cmp r3,#0
 6206 01ee 03D0     	 beq .L393
 6207              	 .loc 1 3818 0 is_stmt 0 discriminator 1
 6208 01f0 FB79     	 ldrb r3,[r7,#7]
 6209 01f2 43F04003 	 orr r3,r3,#64
 6210 01f6 FB71     	 strb r3,[r7,#7]
 6211              	.L393:
3819:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 6212              	 .loc 1 3819 0 is_stmt 1
 6213 01f8 3B69     	 ldr r3,[r7,#16]
 6214 01fa 1A6B     	 ldr r2,[r3,#48]
 6215 01fc FB68     	 ldr r3,[r7,#12]
 6216 01fe 5A62     	 str r2,[r3,#36]
3820:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->dir_ptr = dj.dir;
 6217              	 .loc 1 3820 0
 6218 0200 7A6B     	 ldr r2,[r7,#52]
 6219 0202 FB68     	 ldr r3,[r7,#12]
 6220 0204 9A62     	 str r2,[r3,#40]
3821:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
3822:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Lock the file for this session */
 6221              	 .loc 1 3822 0
 6222 0206 FB79     	 ldrb r3,[r7,#7]
 6223 0208 23F00103 	 bic r3,r3,#1
 6224 020c 002B     	 cmp r3,#0
 6225 020e 14BF     	 ite ne
 6226 0210 0123     	 movne r3,#1
 6227 0212 0023     	 moveq r3,#0
 6228 0214 DBB2     	 uxtb r3,r3
 6229 0216 1A46     	 mov r2,r3
 6230 0218 07F11403 	 add r3,r7,#20
 6231 021c 1846     	 mov r0,r3
 6232 021e 1146     	 mov r1,r2
 6233 0220 FFF7FEFF 	 bl inc_lock
 6234 0224 0246     	 mov r2,r0
 6235 0226 FB68     	 ldr r3,[r7,#12]
 6236 0228 1A61     	 str r2,[r3,#16]
3823:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->obj.lockid == 0) res = FR_INT_ERR;
 6237              	 .loc 1 3823 0
 6238 022a FB68     	 ldr r3,[r7,#12]
 6239 022c 1B69     	 ldr r3,[r3,#16]
 6240 022e 002B     	 cmp r3,#0
 6241 0230 02D1     	 bne .L392
 6242              	 .loc 1 3823 0 is_stmt 0 discriminator 1
 6243 0232 0223     	 movs r3,#2
 6244 0234 87F85F30 	 strb r3,[r7,#95]
 6245              	.L392:
3824:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3825:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3826:../Dave/Generated/FATFS/ff_Src/ff.c **** #else		/* R/O configuration */
3827:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
3828:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it origin directory itself? */
3829:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
3830:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
3831:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {		/* Is it a directory? */
3832:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_FILE;
3833:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3834:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3835:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3836:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3837:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3838:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 6246              	 .loc 1 3838 0 is_stmt 1
 6247 0238 97F85F30 	 ldrb r3,[r7,#95]
 6248 023c 002B     	 cmp r3,#0
 6249 023e 40F09580 	 bne .L379
3839:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
3840:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
3841:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
3842:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
3843:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.c_ofs = dj.blk_ofs;
3844:../Dave/Generated/FATFS/ff_Src/ff.c **** 				init_alloc_info(fs, &fp->obj);
3845:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
3846:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3847:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
3848:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 6250              	 .loc 1 3848 0
 6251 0242 3A69     	 ldr r2,[r7,#16]
 6252 0244 7B6B     	 ldr r3,[r7,#52]
 6253 0246 1046     	 mov r0,r2
 6254 0248 1946     	 mov r1,r3
 6255 024a FFF7FEFF 	 bl ld_clust
 6256 024e 0246     	 mov r2,r0
 6257 0250 FB68     	 ldr r3,[r7,#12]
 6258 0252 9A60     	 str r2,[r3,#8]
3849:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 6259              	 .loc 1 3849 0
 6260 0254 7B6B     	 ldr r3,[r7,#52]
 6261 0256 1C33     	 adds r3,r3,#28
 6262 0258 1846     	 mov r0,r3
 6263 025a FFF7FEFF 	 bl ld_dword
 6264 025e 0246     	 mov r2,r0
 6265 0260 FB68     	 ldr r3,[r7,#12]
 6266 0262 DA60     	 str r2,[r3,#12]
3850:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3851:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3852:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->cltbl = 0;			/* Disable fast seek mode */
3853:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3854:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = fs;	 	/* Validate the file object */
 6267              	 .loc 1 3854 0
 6268 0264 3A69     	 ldr r2,[r7,#16]
 6269 0266 FB68     	 ldr r3,[r7,#12]
 6270 0268 1A60     	 str r2,[r3]
3855:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.id = fs->id;
 6271              	 .loc 1 3855 0
 6272 026a 3B69     	 ldr r3,[r7,#16]
 6273 026c DA88     	 ldrh r2,[r3,#6]
 6274 026e FB68     	 ldr r3,[r7,#12]
 6275 0270 9A80     	 strh r2,[r3,#4]
3856:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag = mode;		/* Set file access mode */
 6276              	 .loc 1 3856 0
 6277 0272 FB68     	 ldr r3,[r7,#12]
 6278 0274 FA79     	 ldrb r2,[r7,#7]
 6279 0276 1A75     	 strb r2,[r3,#20]
3857:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->err = 0;			/* Clear error flag */
 6280              	 .loc 1 3857 0
 6281 0278 FB68     	 ldr r3,[r7,#12]
 6282 027a 0022     	 movs r2,#0
 6283 027c 5A75     	 strb r2,[r3,#21]
3858:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = 0;			/* Invalidate current data sector */
 6284              	 .loc 1 3858 0
 6285 027e FB68     	 ldr r3,[r7,#12]
 6286 0280 0022     	 movs r2,#0
 6287 0282 1A62     	 str r2,[r3,#32]
3859:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = 0;			/* Set file pointer top of the file */
 6288              	 .loc 1 3859 0
 6289 0284 FB68     	 ldr r3,[r7,#12]
 6290 0286 0022     	 movs r2,#0
 6291 0288 9A61     	 str r2,[r3,#24]
3860:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3861:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3862:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 6292              	 .loc 1 3862 0
 6293 028a FB68     	 ldr r3,[r7,#12]
 6294 028c 2C33     	 adds r3,r3,#44
 6295 028e 1846     	 mov r0,r3
 6296 0290 0021     	 movs r1,#0
 6297 0292 4FF40072 	 mov r2,#512
 6298 0296 FFF7FEFF 	 bl mem_set
3863:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3864:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is sp
 6299              	 .loc 1 3864 0
 6300 029a FB79     	 ldrb r3,[r7,#7]
 6301 029c 03F02003 	 and r3,r3,#32
 6302 02a0 002B     	 cmp r3,#0
 6303 02a2 63D0     	 beq .L379
 6304              	 .loc 1 3864 0 is_stmt 0 discriminator 1
 6305 02a4 FB68     	 ldr r3,[r7,#12]
 6306 02a6 DB68     	 ldr r3,[r3,#12]
 6307 02a8 002B     	 cmp r3,#0
 6308 02aa 5FD0     	 beq .L379
3865:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 6309              	 .loc 1 3865 0 is_stmt 1
 6310 02ac FB68     	 ldr r3,[r7,#12]
 6311 02ae DA68     	 ldr r2,[r3,#12]
 6312 02b0 FB68     	 ldr r3,[r7,#12]
 6313 02b2 9A61     	 str r2,[r3,#24]
3866:../Dave/Generated/FATFS/ff_Src/ff.c **** 				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 6314              	 .loc 1 3866 0
 6315 02b4 3B69     	 ldr r3,[r7,#16]
 6316 02b6 5B89     	 ldrh r3,[r3,#10]
 6317 02b8 5B02     	 lsls r3,r3,#9
 6318 02ba 7B64     	 str r3,[r7,#68]
3867:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;				/* Follow the cluster chain */
 6319              	 .loc 1 3867 0
 6320 02bc FB68     	 ldr r3,[r7,#12]
 6321 02be 9B68     	 ldr r3,[r3,#8]
 6322 02c0 BB65     	 str r3,[r7,#88]
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 6323              	 .loc 1 3868 0
 6324 02c2 FB68     	 ldr r3,[r7,#12]
 6325 02c4 DB68     	 ldr r3,[r3,#12]
 6326 02c6 7B65     	 str r3,[r7,#84]
 6327 02c8 16E0     	 b .L394
 6328              	.L398:
3869:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6329              	 .loc 1 3869 0
 6330 02ca FB68     	 ldr r3,[r7,#12]
 6331 02cc 1846     	 mov r0,r3
 6332 02ce B96D     	 ldr r1,[r7,#88]
 6333 02d0 FFF7FEFF 	 bl get_fat
 6334 02d4 B865     	 str r0,[r7,#88]
3870:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1) res = FR_INT_ERR;
 6335              	 .loc 1 3870 0
 6336 02d6 BB6D     	 ldr r3,[r7,#88]
 6337 02d8 012B     	 cmp r3,#1
 6338 02da 02D8     	 bhi .L395
 6339              	 .loc 1 3870 0 is_stmt 0 discriminator 1
 6340 02dc 0223     	 movs r3,#2
 6341 02de 87F85F30 	 strb r3,[r7,#95]
 6342              	.L395:
3871:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 6343              	 .loc 1 3871 0 is_stmt 1
 6344 02e2 BB6D     	 ldr r3,[r7,#88]
 6345 02e4 B3F1FF3F 	 cmp r3,#-1
 6346 02e8 02D1     	 bne .L396
 6347              	 .loc 1 3871 0 is_stmt 0 discriminator 1
 6348 02ea 0123     	 movs r3,#1
 6349 02ec 87F85F30 	 strb r3,[r7,#95]
 6350              	.L396:
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6351              	 .loc 1 3868 0 is_stmt 1 discriminator 2
 6352 02f0 7A6D     	 ldr r2,[r7,#84]
 6353 02f2 7B6C     	 ldr r3,[r7,#68]
 6354 02f4 D31A     	 subs r3,r2,r3
 6355 02f6 7B65     	 str r3,[r7,#84]
 6356              	.L394:
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6357              	 .loc 1 3868 0 is_stmt 0 discriminator 1
 6358 02f8 97F85F30 	 ldrb r3,[r7,#95]
 6359 02fc 002B     	 cmp r3,#0
 6360 02fe 03D1     	 bne .L397
3868:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = get_fat(&fp->obj, clst);
 6361              	 .loc 1 3868 0 discriminator 3
 6362 0300 7A6D     	 ldr r2,[r7,#84]
 6363 0302 7B6C     	 ldr r3,[r7,#68]
 6364 0304 9A42     	 cmp r2,r3
 6365 0306 E0D8     	 bhi .L398
 6366              	.L397:
3872:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3873:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 6367              	 .loc 1 3873 0 is_stmt 1
 6368 0308 FB68     	 ldr r3,[r7,#12]
 6369 030a BA6D     	 ldr r2,[r7,#88]
 6370 030c DA61     	 str r2,[r3,#28]
3874:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 6371              	 .loc 1 3874 0
 6372 030e 97F85F30 	 ldrb r3,[r7,#95]
 6373 0312 002B     	 cmp r3,#0
 6374 0314 2AD1     	 bne .L379
 6375              	 .loc 1 3874 0 is_stmt 0 discriminator 1
 6376 0316 7B6D     	 ldr r3,[r7,#84]
 6377 0318 C3F30803 	 ubfx r3,r3,#0,#9
 6378 031c 002B     	 cmp r3,#0
 6379 031e 25D0     	 beq .L379
3875:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sc = clst2sect(fs, clst);
 6380              	 .loc 1 3875 0 is_stmt 1
 6381 0320 3B69     	 ldr r3,[r7,#16]
 6382 0322 1846     	 mov r0,r3
 6383 0324 B96D     	 ldr r1,[r7,#88]
 6384 0326 FFF7FEFF 	 bl clst2sect
 6385 032a B864     	 str r0,[r7,#72]
3876:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (sc == 0) {
 6386              	 .loc 1 3876 0
 6387 032c BB6C     	 ldr r3,[r7,#72]
 6388 032e 002B     	 cmp r3,#0
 6389 0330 03D1     	 bne .L399
3877:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_INT_ERR;
 6390              	 .loc 1 3877 0
 6391 0332 0223     	 movs r3,#2
 6392 0334 87F85F30 	 strb r3,[r7,#95]
 6393 0338 18E0     	 b .L379
 6394              	.L399:
3878:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
3879:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->sect = sc + (DWORD)(ofs / SS(fs));
 6395              	 .loc 1 3879 0
 6396 033a 7B6D     	 ldr r3,[r7,#84]
 6397 033c 5A0A     	 lsrs r2,r3,#9
 6398 033e BB6C     	 ldr r3,[r7,#72]
 6399 0340 1A44     	 add r2,r2,r3
 6400 0342 FB68     	 ldr r3,[r7,#12]
 6401 0344 1A62     	 str r2,[r3,#32]
3880:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3881:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 6402              	 .loc 1 3881 0
 6403 0346 3B69     	 ldr r3,[r7,#16]
 6404 0348 5978     	 ldrb r1,[r3,#1]
 6405 034a FB68     	 ldr r3,[r7,#12]
 6406 034c 03F12C02 	 add r2,r3,#44
 6407 0350 FB68     	 ldr r3,[r7,#12]
 6408 0352 1B6A     	 ldr r3,[r3,#32]
 6409 0354 0846     	 mov r0,r1
 6410 0356 1146     	 mov r1,r2
 6411 0358 1A46     	 mov r2,r3
 6412 035a 0123     	 movs r3,#1
 6413 035c FFF7FEFF 	 bl disk_read
 6414 0360 0346     	 mov r3,r0
 6415 0362 002B     	 cmp r3,#0
 6416 0364 02D0     	 beq .L379
 6417              	 .loc 1 3881 0 is_stmt 0 discriminator 1
 6418 0366 0123     	 movs r3,#1
 6419 0368 87F85F30 	 strb r3,[r7,#95]
 6420              	.L379:
3882:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3883:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3884:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3885:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3886:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3887:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3888:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3889:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
3890:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3891:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3892:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 6421              	 .loc 1 3892 0 is_stmt 1
 6422 036c 97F85F30 	 ldrb r3,[r7,#95]
 6423 0370 002B     	 cmp r3,#0
 6424 0372 02D0     	 beq .L400
 6425              	 .loc 1 3892 0 is_stmt 0 discriminator 1
 6426 0374 FB68     	 ldr r3,[r7,#12]
 6427 0376 0022     	 movs r2,#0
 6428 0378 1A60     	 str r2,[r3]
 6429              	.L400:
3893:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 6430              	 .loc 1 3894 0 is_stmt 1
 6431 037a 97F85F30 	 ldrb r3,[r7,#95]
 6432              	.L401:
3895:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6433              	 .loc 1 3895 0 discriminator 1
 6434 037e 1846     	 mov r0,r3
 6435 0380 6037     	 adds r7,r7,#96
 6436              	.LCFI230:
 6437              	 .cfi_def_cfa_offset 8
 6438 0382 BD46     	 mov sp,r7
 6439              	.LCFI231:
 6440              	 .cfi_def_cfa_register 13
 6441              	 
 6442 0384 80BD     	 pop {r7,pc}
 6443              	 .cfi_endproc
 6444              	.LFE42:
 6446 0386 00BF     	 .section .text.f_read,"ax",%progbits
 6447              	 .align 2
 6448              	 .global f_read
 6449              	 .thumb
 6450              	 .thumb_func
 6452              	f_read:
 6453              	.LFB43:
3896:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3897:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3898:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3899:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3900:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3901:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read File                                                             */
3902:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
3903:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3904:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_read (
3905:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 	/* Pointer to the file object */
3906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* buff,	/* Pointer to data buffer */
3907:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btr,	/* Number of bytes to read */
3908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* br	/* Pointer to number of bytes read */
3909:../Dave/Generated/FATFS/ff_Src/ff.c **** )
3910:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6454              	 .loc 1 3910 0
 6455              	 .cfi_startproc
 6456              	 
 6457              	 
 6458 0000 80B5     	 push {r7,lr}
 6459              	.LCFI232:
 6460              	 .cfi_def_cfa_offset 8
 6461              	 .cfi_offset 7,-8
 6462              	 .cfi_offset 14,-4
 6463 0002 8EB0     	 sub sp,sp,#56
 6464              	.LCFI233:
 6465              	 .cfi_def_cfa_offset 64
 6466 0004 00AF     	 add r7,sp,#0
 6467              	.LCFI234:
 6468              	 .cfi_def_cfa_register 7
 6469 0006 F860     	 str r0,[r7,#12]
 6470 0008 B960     	 str r1,[r7,#8]
 6471 000a 7A60     	 str r2,[r7,#4]
 6472 000c 3B60     	 str r3,[r7]
3911:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
3912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
3913:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst;
3914:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
3915:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
3916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, cc, csect;
3917:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *rbuff = (BYTE*)buff;
 6473              	 .loc 1 3917 0
 6474 000e BB68     	 ldr r3,[r7,#8]
 6475 0010 7B62     	 str r3,[r7,#36]
3918:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3919:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3920:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*br = 0;	/* Clear read byte counter */
 6476              	 .loc 1 3920 0
 6477 0012 3B68     	 ldr r3,[r7]
 6478 0014 0022     	 movs r2,#0
 6479 0016 1A60     	 str r2,[r3]
3921:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 6480              	 .loc 1 3921 0
 6481 0018 FA68     	 ldr r2,[r7,#12]
 6482 001a 07F11403 	 add r3,r7,#20
 6483 001e 1046     	 mov r0,r2
 6484 0020 1946     	 mov r1,r3
 6485 0022 FFF7FEFF 	 bl validate
 6486 0026 0346     	 mov r3,r0
 6487 0028 87F83730 	 strb r3,[r7,#55]
3922:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6488              	 .loc 1 3922 0
 6489 002c 97F83730 	 ldrb r3,[r7,#55]
 6490 0030 002B     	 cmp r3,#0
 6491 0032 07D1     	 bne .L403
 6492              	 .loc 1 3922 0 is_stmt 0 discriminator 2
 6493 0034 FB68     	 ldr r3,[r7,#12]
 6494 0036 5B7D     	 ldrb r3,[r3,#21]
 6495 0038 87F83730 	 strb r3,[r7,#55]
 6496 003c 97F83730 	 ldrb r3,[r7,#55]
 6497 0040 002B     	 cmp r3,#0
 6498 0042 02D0     	 beq .L404
 6499              	.L403:
 6500              	 .loc 1 3922 0 discriminator 3
 6501 0044 97F83730 	 ldrb r3,[r7,#55]
 6502 0048 10E1     	 b .L426
 6503              	.L404:
3923:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 6504              	 .loc 1 3923 0 is_stmt 1
 6505 004a FB68     	 ldr r3,[r7,#12]
 6506 004c 1B7D     	 ldrb r3,[r3,#20]
 6507 004e 03F00103 	 and r3,r3,#1
 6508 0052 002B     	 cmp r3,#0
 6509 0054 01D1     	 bne .L406
 6510              	 .loc 1 3923 0 is_stmt 0 discriminator 1
 6511 0056 0723     	 movs r3,#7
 6512 0058 08E1     	 b .L426
 6513              	.L406:
3924:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
 6514              	 .loc 1 3924 0 is_stmt 1
 6515 005a FB68     	 ldr r3,[r7,#12]
 6516 005c DA68     	 ldr r2,[r3,#12]
 6517 005e FB68     	 ldr r3,[r7,#12]
 6518 0060 9B69     	 ldr r3,[r3,#24]
 6519 0062 D31A     	 subs r3,r2,r3
 6520 0064 3B62     	 str r3,[r7,#32]
3925:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 6521              	 .loc 1 3925 0
 6522 0066 7A68     	 ldr r2,[r7,#4]
 6523 0068 3B6A     	 ldr r3,[r7,#32]
 6524 006a 9A42     	 cmp r2,r3
 6525 006c 01D9     	 bls .L407
 6526              	 .loc 1 3925 0 is_stmt 0 discriminator 1
 6527 006e 3B6A     	 ldr r3,[r7,#32]
 6528 0070 7B60     	 str r3,[r7,#4]
 6529              	.L407:
3926:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3927:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btr;								/* Repeat until btr bytes read */
 6530              	 .loc 1 3927 0 is_stmt 1
 6531 0072 F6E0     	 b .L408
 6532              	.L425:
3928:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
3929:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6533              	 .loc 1 3929 0
 6534 0074 FB68     	 ldr r3,[r7,#12]
 6535 0076 9B69     	 ldr r3,[r3,#24]
 6536 0078 C3F30803 	 ubfx r3,r3,#0,#9
 6537 007c 002B     	 cmp r3,#0
 6538 007e 40F0C280 	 bne .L409
3930:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 6539              	 .loc 1 3930 0
 6540 0082 FB68     	 ldr r3,[r7,#12]
 6541 0084 9B69     	 ldr r3,[r3,#24]
 6542 0086 5B0A     	 lsrs r3,r3,#9
 6543 0088 7A69     	 ldr r2,[r7,#20]
 6544 008a 5289     	 ldrh r2,[r2,#10]
 6545 008c 013A     	 subs r2,r2,#1
 6546 008e 1340     	 ands r3,r3,r2
 6547 0090 FB61     	 str r3,[r7,#28]
3931:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {					/* On the cluster boundary? */
 6548              	 .loc 1 3931 0
 6549 0092 FB69     	 ldr r3,[r7,#28]
 6550 0094 002B     	 cmp r3,#0
 6551 0096 23D1     	 bne .L410
3932:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {			/* On the top of the file? */
 6552              	 .loc 1 3932 0
 6553 0098 FB68     	 ldr r3,[r7,#12]
 6554 009a 9B69     	 ldr r3,[r3,#24]
 6555 009c 002B     	 cmp r3,#0
 6556 009e 03D1     	 bne .L411
3933:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 6557              	 .loc 1 3933 0
 6558 00a0 FB68     	 ldr r3,[r7,#12]
 6559 00a2 9B68     	 ldr r3,[r3,#8]
 6560 00a4 3B63     	 str r3,[r7,#48]
 6561 00a6 07E0     	 b .L412
 6562              	.L411:
3934:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* Middle or end of the file */
3935:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
3936:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
3937:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
3938:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
3939:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3940:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
3941:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 6563              	 .loc 1 3941 0
 6564 00a8 FA68     	 ldr r2,[r7,#12]
 6565 00aa FB68     	 ldr r3,[r7,#12]
 6566 00ac DB69     	 ldr r3,[r3,#28]
 6567 00ae 1046     	 mov r0,r2
 6568 00b0 1946     	 mov r1,r3
 6569 00b2 FFF7FEFF 	 bl get_fat
 6570 00b6 3863     	 str r0,[r7,#48]
 6571              	.L412:
3942:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
3943:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3944:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst < 2) ABORT(fs, FR_INT_ERR);
 6572              	 .loc 1 3944 0
 6573 00b8 3B6B     	 ldr r3,[r7,#48]
 6574 00ba 012B     	 cmp r3,#1
 6575 00bc 04D8     	 bhi .L413
 6576              	 .loc 1 3944 0 is_stmt 0 discriminator 1
 6577 00be FB68     	 ldr r3,[r7,#12]
 6578 00c0 0222     	 movs r2,#2
 6579 00c2 5A75     	 strb r2,[r3,#21]
 6580 00c4 0223     	 movs r3,#2
 6581 00c6 D1E0     	 b .L426
 6582              	.L413:
3945:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6583              	 .loc 1 3945 0 is_stmt 1
 6584 00c8 3B6B     	 ldr r3,[r7,#48]
 6585 00ca B3F1FF3F 	 cmp r3,#-1
 6586 00ce 04D1     	 bne .L414
 6587              	 .loc 1 3945 0 is_stmt 0 discriminator 1
 6588 00d0 FB68     	 ldr r3,[r7,#12]
 6589 00d2 0122     	 movs r2,#1
 6590 00d4 5A75     	 strb r2,[r3,#21]
 6591 00d6 0123     	 movs r3,#1
 6592 00d8 C8E0     	 b .L426
 6593              	.L414:
3946:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;				/* Update current cluster */
 6594              	 .loc 1 3946 0 is_stmt 1
 6595 00da FB68     	 ldr r3,[r7,#12]
 6596 00dc 3A6B     	 ldr r2,[r7,#48]
 6597 00de DA61     	 str r2,[r3,#28]
 6598              	.L410:
3947:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3948:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 6599              	 .loc 1 3948 0
 6600 00e0 7A69     	 ldr r2,[r7,#20]
 6601 00e2 FB68     	 ldr r3,[r7,#12]
 6602 00e4 DB69     	 ldr r3,[r3,#28]
 6603 00e6 1046     	 mov r0,r2
 6604 00e8 1946     	 mov r1,r3
 6605 00ea FFF7FEFF 	 bl clst2sect
 6606 00ee B861     	 str r0,[r7,#24]
3949:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 6607              	 .loc 1 3949 0
 6608 00f0 BB69     	 ldr r3,[r7,#24]
 6609 00f2 002B     	 cmp r3,#0
 6610 00f4 04D1     	 bne .L415
 6611              	 .loc 1 3949 0 is_stmt 0 discriminator 1
 6612 00f6 FB68     	 ldr r3,[r7,#12]
 6613 00f8 0222     	 movs r2,#2
 6614 00fa 5A75     	 strb r2,[r3,#21]
 6615 00fc 0223     	 movs r3,#2
 6616 00fe B5E0     	 b .L426
 6617              	.L415:
3950:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 6618              	 .loc 1 3950 0 is_stmt 1
 6619 0100 BA69     	 ldr r2,[r7,#24]
 6620 0102 FB69     	 ldr r3,[r7,#28]
 6621 0104 1344     	 add r3,r3,r2
 6622 0106 BB61     	 str r3,[r7,#24]
3951:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 6623              	 .loc 1 3951 0
 6624 0108 7B68     	 ldr r3,[r7,#4]
 6625 010a 5B0A     	 lsrs r3,r3,#9
 6626 010c BB62     	 str r3,[r7,#40]
3952:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {						/* Read maximum contiguous sectors directly */
 6627              	 .loc 1 3952 0
 6628 010e BB6A     	 ldr r3,[r7,#40]
 6629 0110 002B     	 cmp r3,#0
 6630 0112 3CD0     	 beq .L416
3953:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 6631              	 .loc 1 3953 0
 6632 0114 FA69     	 ldr r2,[r7,#28]
 6633 0116 BB6A     	 ldr r3,[r7,#40]
 6634 0118 1344     	 add r3,r3,r2
 6635 011a 7A69     	 ldr r2,[r7,#20]
 6636 011c 5289     	 ldrh r2,[r2,#10]
 6637 011e 9342     	 cmp r3,r2
 6638 0120 05D9     	 bls .L417
3954:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 6639              	 .loc 1 3954 0
 6640 0122 7B69     	 ldr r3,[r7,#20]
 6641 0124 5B89     	 ldrh r3,[r3,#10]
 6642 0126 1A46     	 mov r2,r3
 6643 0128 FB69     	 ldr r3,[r7,#28]
 6644 012a D31A     	 subs r3,r2,r3
 6645 012c BB62     	 str r3,[r7,#40]
 6646              	.L417:
3955:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3956:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6647              	 .loc 1 3956 0
 6648 012e 7B69     	 ldr r3,[r7,#20]
 6649 0130 5B78     	 ldrb r3,[r3,#1]
 6650 0132 1846     	 mov r0,r3
 6651 0134 796A     	 ldr r1,[r7,#36]
 6652 0136 BA69     	 ldr r2,[r7,#24]
 6653 0138 BB6A     	 ldr r3,[r7,#40]
 6654 013a FFF7FEFF 	 bl disk_read
 6655 013e 0346     	 mov r3,r0
 6656 0140 002B     	 cmp r3,#0
 6657 0142 04D0     	 beq .L418
 6658              	 .loc 1 3956 0 is_stmt 0 discriminator 1
 6659 0144 FB68     	 ldr r3,[r7,#12]
 6660 0146 0122     	 movs r2,#1
 6661 0148 5A75     	 strb r2,[r3,#21]
 6662 014a 0123     	 movs r3,#1
 6663 014c 8EE0     	 b .L426
 6664              	.L418:
3957:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_FS_MINIMIZE <= 2		/* Replace one of the read sectors with cached data if 
3958:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3959:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->wflag && fs->winsect - sect < cc) {
3960:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
3961:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3962:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3963:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 6665              	 .loc 1 3963 0 is_stmt 1
 6666 014e FB68     	 ldr r3,[r7,#12]
 6667 0150 1B7D     	 ldrb r3,[r3,#20]
 6668 0152 DBB2     	 uxtb r3,r3
 6669 0154 5BB2     	 sxtb r3,r3
 6670 0156 002B     	 cmp r3,#0
 6671 0158 15DA     	 bge .L419
 6672              	 .loc 1 3963 0 is_stmt 0 discriminator 1
 6673 015a FB68     	 ldr r3,[r7,#12]
 6674 015c 1A6A     	 ldr r2,[r3,#32]
 6675 015e BB69     	 ldr r3,[r7,#24]
 6676 0160 D21A     	 subs r2,r2,r3
 6677 0162 BB6A     	 ldr r3,[r7,#40]
 6678 0164 9A42     	 cmp r2,r3
 6679 0166 0ED2     	 bcs .L419
3964:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 6680              	 .loc 1 3964 0 is_stmt 1
 6681 0168 FB68     	 ldr r3,[r7,#12]
 6682 016a 1A6A     	 ldr r2,[r3,#32]
 6683 016c BB69     	 ldr r3,[r7,#24]
 6684 016e D31A     	 subs r3,r2,r3
 6685 0170 5B02     	 lsls r3,r3,#9
 6686 0172 7A6A     	 ldr r2,[r7,#36]
 6687 0174 1A44     	 add r2,r2,r3
 6688 0176 FB68     	 ldr r3,[r7,#12]
 6689 0178 2C33     	 adds r3,r3,#44
 6690 017a 1046     	 mov r0,r2
 6691 017c 1946     	 mov r1,r3
 6692 017e 4FF40072 	 mov r2,#512
 6693 0182 FFF7FEFF 	 bl mem_cpy
 6694              	.L419:
3965:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3966:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3967:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3968:../Dave/Generated/FATFS/ff_Src/ff.c **** 				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 6695              	 .loc 1 3968 0
 6696 0186 BB6A     	 ldr r3,[r7,#40]
 6697 0188 5B02     	 lsls r3,r3,#9
 6698 018a FB62     	 str r3,[r7,#44]
3969:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 6699              	 .loc 1 3969 0
 6700 018c 55E0     	 b .L420
 6701              	.L416:
3970:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3971:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
3972:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect) {			/* Load data sector if not in cache */
 6702              	 .loc 1 3972 0
 6703 018e FB68     	 ldr r3,[r7,#12]
 6704 0190 1A6A     	 ldr r2,[r3,#32]
 6705 0192 BB69     	 ldr r3,[r7,#24]
 6706 0194 9A42     	 cmp r2,r3
 6707 0196 33D0     	 beq .L421
3973:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
3974:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 6708              	 .loc 1 3974 0
 6709 0198 FB68     	 ldr r3,[r7,#12]
 6710 019a 1B7D     	 ldrb r3,[r3,#20]
 6711 019c DBB2     	 uxtb r3,r3
 6712 019e 5BB2     	 sxtb r3,r3
 6713 01a0 002B     	 cmp r3,#0
 6714 01a2 1BDA     	 bge .L422
3975:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 6715              	 .loc 1 3975 0
 6716 01a4 7B69     	 ldr r3,[r7,#20]
 6717 01a6 5978     	 ldrb r1,[r3,#1]
 6718 01a8 FB68     	 ldr r3,[r7,#12]
 6719 01aa 03F12C02 	 add r2,r3,#44
 6720 01ae FB68     	 ldr r3,[r7,#12]
 6721 01b0 1B6A     	 ldr r3,[r3,#32]
 6722 01b2 0846     	 mov r0,r1
 6723 01b4 1146     	 mov r1,r2
 6724 01b6 1A46     	 mov r2,r3
 6725 01b8 0123     	 movs r3,#1
 6726 01ba FFF7FEFF 	 bl disk_write
 6727 01be 0346     	 mov r3,r0
 6728 01c0 002B     	 cmp r3,#0
 6729 01c2 04D0     	 beq .L423
 6730              	 .loc 1 3975 0 is_stmt 0 discriminator 1
 6731 01c4 FB68     	 ldr r3,[r7,#12]
 6732 01c6 0122     	 movs r2,#1
 6733 01c8 5A75     	 strb r2,[r3,#21]
 6734 01ca 0123     	 movs r3,#1
 6735 01cc 4EE0     	 b .L426
 6736              	.L423:
3976:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 6737              	 .loc 1 3976 0 is_stmt 1
 6738 01ce FB68     	 ldr r3,[r7,#12]
 6739 01d0 1B7D     	 ldrb r3,[r3,#20]
 6740 01d2 03F07F03 	 and r3,r3,#127
 6741 01d6 DAB2     	 uxtb r2,r3
 6742 01d8 FB68     	 ldr r3,[r7,#12]
 6743 01da 1A75     	 strb r2,[r3,#20]
 6744              	.L422:
3977:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
3978:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3979:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 6745              	 .loc 1 3979 0
 6746 01dc 7B69     	 ldr r3,[r7,#20]
 6747 01de 5A78     	 ldrb r2,[r3,#1]
 6748 01e0 FB68     	 ldr r3,[r7,#12]
 6749 01e2 2C33     	 adds r3,r3,#44
 6750 01e4 1046     	 mov r0,r2
 6751 01e6 1946     	 mov r1,r3
 6752 01e8 BA69     	 ldr r2,[r7,#24]
 6753 01ea 0123     	 movs r3,#1
 6754 01ec FFF7FEFF 	 bl disk_read
 6755 01f0 0346     	 mov r3,r0
 6756 01f2 002B     	 cmp r3,#0
 6757 01f4 04D0     	 beq .L421
 6758              	 .loc 1 3979 0 is_stmt 0 discriminator 1
 6759 01f6 FB68     	 ldr r3,[r7,#12]
 6760 01f8 0122     	 movs r2,#1
 6761 01fa 5A75     	 strb r2,[r3,#21]
 6762 01fc 0123     	 movs r3,#1
 6763 01fe 35E0     	 b .L426
 6764              	.L421:
3980:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
3981:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3982:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 6765              	 .loc 1 3982 0 is_stmt 1
 6766 0200 FB68     	 ldr r3,[r7,#12]
 6767 0202 BA69     	 ldr r2,[r7,#24]
 6768 0204 1A62     	 str r2,[r3,#32]
 6769              	.L409:
3983:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
3984:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 6770              	 .loc 1 3984 0
 6771 0206 FB68     	 ldr r3,[r7,#12]
 6772 0208 9B69     	 ldr r3,[r3,#24]
 6773 020a C3F30803 	 ubfx r3,r3,#0,#9
 6774 020e C3F50073 	 rsb r3,r3,#512
 6775 0212 FB62     	 str r3,[r7,#44]
3985:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 6776              	 .loc 1 3985 0
 6777 0214 FA6A     	 ldr r2,[r7,#44]
 6778 0216 7B68     	 ldr r3,[r7,#4]
 6779 0218 9A42     	 cmp r2,r3
 6780 021a 01D9     	 bls .L424
 6781              	 .loc 1 3985 0 is_stmt 0 discriminator 1
 6782 021c 7B68     	 ldr r3,[r7,#4]
 6783 021e FB62     	 str r3,[r7,#44]
 6784              	.L424:
3986:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
3987:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
3988:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
3989:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
3990:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 6785              	 .loc 1 3990 0 is_stmt 1
 6786 0220 FB68     	 ldr r3,[r7,#12]
 6787 0222 9B69     	 ldr r3,[r3,#24]
 6788 0224 C3F30803 	 ubfx r3,r3,#0,#9
 6789 0228 2833     	 adds r3,r3,#40
 6790 022a FA68     	 ldr r2,[r7,#12]
 6791 022c 1344     	 add r3,r3,r2
 6792 022e 0433     	 adds r3,r3,#4
 6793 0230 786A     	 ldr r0,[r7,#36]
 6794 0232 1946     	 mov r1,r3
 6795 0234 FA6A     	 ldr r2,[r7,#44]
 6796 0236 FFF7FEFF 	 bl mem_cpy
 6797              	.L420:
3928:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 6798              	 .loc 1 3928 0
 6799 023a 7A68     	 ldr r2,[r7,#4]
 6800 023c FB6A     	 ldr r3,[r7,#44]
 6801 023e D31A     	 subs r3,r2,r3
 6802 0240 7B60     	 str r3,[r7,#4]
 6803 0242 3B68     	 ldr r3,[r7]
 6804 0244 1A68     	 ldr r2,[r3]
 6805 0246 FB6A     	 ldr r3,[r7,#44]
 6806 0248 1A44     	 add r2,r2,r3
 6807 024a 3B68     	 ldr r3,[r7]
 6808 024c 1A60     	 str r2,[r3]
 6809 024e 7A6A     	 ldr r2,[r7,#36]
 6810 0250 FB6A     	 ldr r3,[r7,#44]
 6811 0252 1344     	 add r3,r3,r2
 6812 0254 7B62     	 str r3,[r7,#36]
 6813 0256 FB68     	 ldr r3,[r7,#12]
 6814 0258 9A69     	 ldr r2,[r3,#24]
 6815 025a FB6A     	 ldr r3,[r7,#44]
 6816 025c 1A44     	 add r2,r2,r3
 6817 025e FB68     	 ldr r3,[r7,#12]
 6818 0260 9A61     	 str r2,[r3,#24]
 6819              	.L408:
3927:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btr -= rcnt, *br += rcnt, rbuff += rcnt, fp->fptr += rcnt) {
 6820              	 .loc 1 3927 0
 6821 0262 7B68     	 ldr r3,[r7,#4]
 6822 0264 002B     	 cmp r3,#0
 6823 0266 7FF405AF 	 bne .L425
3991:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
3992:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
3993:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3994:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 6824              	 .loc 1 3994 0
 6825 026a 0023     	 movs r3,#0
 6826              	.L426:
3995:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 6827              	 .loc 1 3995 0 discriminator 1
 6828 026c 1846     	 mov r0,r3
 6829 026e 3837     	 adds r7,r7,#56
 6830              	.LCFI235:
 6831              	 .cfi_def_cfa_offset 8
 6832 0270 BD46     	 mov sp,r7
 6833              	.LCFI236:
 6834              	 .cfi_def_cfa_register 13
 6835              	 
 6836 0272 80BD     	 pop {r7,pc}
 6837              	 .cfi_endproc
 6838              	.LFE43:
 6840              	 .section .text.f_write,"ax",%progbits
 6841              	 .align 2
 6842              	 .global f_write
 6843              	 .thumb
 6844              	 .thumb_func
 6846              	f_write:
 6847              	.LFB44:
3996:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3997:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3998:../Dave/Generated/FATFS/ff_Src/ff.c **** 
3999:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4000:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4001:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4002:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Write File                                                            */
4003:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4004:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4005:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_write (
4006:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
4007:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const void* buff,	/* Pointer to the data to be written */
4008:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btw,			/* Number of bytes to write */
4009:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bw			/* Pointer to number of bytes written */
4010:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4011:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 6848              	 .loc 1 4011 0
 6849              	 .cfi_startproc
 6850              	 
 6851              	 
 6852 0000 80B5     	 push {r7,lr}
 6853              	.LCFI237:
 6854              	 .cfi_def_cfa_offset 8
 6855              	 .cfi_offset 7,-8
 6856              	 .cfi_offset 14,-4
 6857 0002 8CB0     	 sub sp,sp,#48
 6858              	.LCFI238:
 6859              	 .cfi_def_cfa_offset 56
 6860 0004 00AF     	 add r7,sp,#0
 6861              	.LCFI239:
 6862              	 .cfi_def_cfa_register 7
 6863 0006 F860     	 str r0,[r7,#12]
 6864 0008 B960     	 str r1,[r7,#8]
 6865 000a 7A60     	 str r2,[r7,#4]
 6866 000c 3B60     	 str r3,[r7]
4012:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4013:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4014:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst;
4015:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
4016:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wcnt, cc, csect;
4017:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const BYTE *wbuff = (const BYTE*)buff;
 6867              	 .loc 1 4017 0
 6868 000e BB68     	 ldr r3,[r7,#8]
 6869 0010 FB61     	 str r3,[r7,#28]
4018:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4019:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4020:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bw = 0;	/* Clear write byte counter */
 6870              	 .loc 1 4020 0
 6871 0012 3B68     	 ldr r3,[r7]
 6872 0014 0022     	 movs r2,#0
 6873 0016 1A60     	 str r2,[r3]
4021:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 6874              	 .loc 1 4021 0
 6875 0018 FA68     	 ldr r2,[r7,#12]
 6876 001a 07F11003 	 add r3,r7,#16
 6877 001e 1046     	 mov r0,r2
 6878 0020 1946     	 mov r1,r3
 6879 0022 FFF7FEFF 	 bl validate
 6880 0026 0346     	 mov r3,r0
 6881 0028 87F82F30 	 strb r3,[r7,#47]
4022:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 6882              	 .loc 1 4022 0
 6883 002c 97F82F30 	 ldrb r3,[r7,#47]
 6884 0030 002B     	 cmp r3,#0
 6885 0032 07D1     	 bne .L428
 6886              	 .loc 1 4022 0 is_stmt 0 discriminator 2
 6887 0034 FB68     	 ldr r3,[r7,#12]
 6888 0036 5B7D     	 ldrb r3,[r3,#21]
 6889 0038 87F82F30 	 strb r3,[r7,#47]
 6890 003c 97F82F30 	 ldrb r3,[r7,#47]
 6891 0040 002B     	 cmp r3,#0
 6892 0042 02D0     	 beq .L429
 6893              	.L428:
 6894              	 .loc 1 4022 0 discriminator 3
 6895 0044 97F82F30 	 ldrb r3,[r7,#47]
 6896 0048 43E1     	 b .L454
 6897              	.L429:
4023:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 6898              	 .loc 1 4023 0 is_stmt 1
 6899 004a FB68     	 ldr r3,[r7,#12]
 6900 004c 1B7D     	 ldrb r3,[r3,#20]
 6901 004e 03F00203 	 and r3,r3,#2
 6902 0052 002B     	 cmp r3,#0
 6903 0054 01D1     	 bne .L431
 6904              	 .loc 1 4023 0 is_stmt 0 discriminator 1
 6905 0056 0723     	 movs r3,#7
 6906 0058 3BE1     	 b .L454
 6907              	.L431:
4024:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4025:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
4026:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 6908              	 .loc 1 4026 0 is_stmt 1
 6909 005a FB68     	 ldr r3,[r7,#12]
 6910 005c 9A69     	 ldr r2,[r3,#24]
 6911 005e 7B68     	 ldr r3,[r7,#4]
 6912 0060 1A44     	 add r2,r2,r3
 6913 0062 FB68     	 ldr r3,[r7,#12]
 6914 0064 9B69     	 ldr r3,[r3,#24]
 6915 0066 9A42     	 cmp r2,r3
 6916 0068 03D2     	 bcs .L432
4027:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 6917              	 .loc 1 4027 0
 6918 006a FB68     	 ldr r3,[r7,#12]
 6919 006c 9B69     	 ldr r3,[r3,#24]
 6920 006e DB43     	 mvns r3,r3
 6921 0070 7B60     	 str r3,[r7,#4]
 6922              	.L432:
4028:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4029:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4030:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btw;							/* Repeat until all data written */
 6923              	 .loc 1 4030 0
 6924 0072 22E1     	 b .L433
 6925              	.L453:
4031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
4032:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 6926              	 .loc 1 4032 0
 6927 0074 FB68     	 ldr r3,[r7,#12]
 6928 0076 9B69     	 ldr r3,[r3,#24]
 6929 0078 C3F30803 	 ubfx r3,r3,#0,#9
 6930 007c 002B     	 cmp r3,#0
 6931 007e 40F0DE80 	 bne .L434
4033:../Dave/Generated/FATFS/ff_Src/ff.c **** 			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 6932              	 .loc 1 4033 0
 6933 0082 FB68     	 ldr r3,[r7,#12]
 6934 0084 9B69     	 ldr r3,[r3,#24]
 6935 0086 5B0A     	 lsrs r3,r3,#9
 6936 0088 3A69     	 ldr r2,[r7,#16]
 6937 008a 5289     	 ldrh r2,[r2,#10]
 6938 008c 013A     	 subs r2,r2,#1
 6939 008e 1340     	 ands r3,r3,r2
 6940 0090 BB61     	 str r3,[r7,#24]
4034:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {				/* On the cluster boundary? */
 6941              	 .loc 1 4034 0
 6942 0092 BB69     	 ldr r3,[r7,#24]
 6943 0094 002B     	 cmp r3,#0
 6944 0096 37D1     	 bne .L435
4035:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr == 0) {		/* On the top of the file? */
 6945              	 .loc 1 4035 0
 6946 0098 FB68     	 ldr r3,[r7,#12]
 6947 009a 9B69     	 ldr r3,[r3,#24]
 6948 009c 002B     	 cmp r3,#0
 6949 009e 0CD1     	 bne .L436
4036:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fp->obj.sclust;	/* Follow from the origin */
 6950              	 .loc 1 4036 0
 6951 00a0 FB68     	 ldr r3,[r7,#12]
 6952 00a2 9B68     	 ldr r3,[r3,#8]
 6953 00a4 BB62     	 str r3,[r7,#40]
4037:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0) {		/* If no cluster is allocated, */
 6954              	 .loc 1 4037 0
 6955 00a6 BB6A     	 ldr r3,[r7,#40]
 6956 00a8 002B     	 cmp r3,#0
 6957 00aa 0ED1     	 bne .L438
4038:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 6958              	 .loc 1 4038 0
 6959 00ac FB68     	 ldr r3,[r7,#12]
 6960 00ae 1846     	 mov r0,r3
 6961 00b0 0021     	 movs r1,#0
 6962 00b2 FFF7FEFF 	 bl create_chain
 6963 00b6 B862     	 str r0,[r7,#40]
 6964 00b8 07E0     	 b .L438
 6965              	.L436:
4039:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4040:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {					/* On the middle or end of the file */
4041:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4042:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->cltbl) {
4043:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
4044:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4045:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4046:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4047:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 6966              	 .loc 1 4047 0
 6967 00ba FA68     	 ldr r2,[r7,#12]
 6968 00bc FB68     	 ldr r3,[r7,#12]
 6969 00be DB69     	 ldr r3,[r3,#28]
 6970 00c0 1046     	 mov r0,r2
 6971 00c2 1946     	 mov r1,r3
 6972 00c4 FFF7FEFF 	 bl create_chain
 6973 00c8 B862     	 str r0,[r7,#40]
 6974              	.L438:
4048:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4049:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4050:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 6975              	 .loc 1 4050 0
 6976 00ca BB6A     	 ldr r3,[r7,#40]
 6977 00cc 002B     	 cmp r3,#0
 6978 00ce 00D1     	 bne .L439
 6979 00d0 F7E0     	 b .L440
 6980              	.L439:
4051:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 1) ABORT(fs, FR_INT_ERR);
 6981              	 .loc 1 4051 0
 6982 00d2 BB6A     	 ldr r3,[r7,#40]
 6983 00d4 012B     	 cmp r3,#1
 6984 00d6 04D1     	 bne .L441
 6985              	 .loc 1 4051 0 is_stmt 0 discriminator 1
 6986 00d8 FB68     	 ldr r3,[r7,#12]
 6987 00da 0222     	 movs r2,#2
 6988 00dc 5A75     	 strb r2,[r3,#21]
 6989 00de 0223     	 movs r3,#2
 6990 00e0 F7E0     	 b .L454
 6991              	.L441:
4052:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 6992              	 .loc 1 4052 0 is_stmt 1
 6993 00e2 BB6A     	 ldr r3,[r7,#40]
 6994 00e4 B3F1FF3F 	 cmp r3,#-1
 6995 00e8 04D1     	 bne .L442
 6996              	 .loc 1 4052 0 is_stmt 0 discriminator 1
 6997 00ea FB68     	 ldr r3,[r7,#12]
 6998 00ec 0122     	 movs r2,#1
 6999 00ee 5A75     	 strb r2,[r3,#21]
 7000 00f0 0123     	 movs r3,#1
 7001 00f2 EEE0     	 b .L454
 7002              	.L442:
4053:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;			/* Update current cluster */
 7003              	 .loc 1 4053 0 is_stmt 1
 7004 00f4 FB68     	 ldr r3,[r7,#12]
 7005 00f6 BA6A     	 ldr r2,[r7,#40]
 7006 00f8 DA61     	 str r2,[r3,#28]
4054:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 7007              	 .loc 1 4054 0
 7008 00fa FB68     	 ldr r3,[r7,#12]
 7009 00fc 9B68     	 ldr r3,[r3,#8]
 7010 00fe 002B     	 cmp r3,#0
 7011 0100 02D1     	 bne .L435
 7012              	 .loc 1 4054 0 is_stmt 0 discriminator 1
 7013 0102 FB68     	 ldr r3,[r7,#12]
 7014 0104 BA6A     	 ldr r2,[r7,#40]
 7015 0106 9A60     	 str r2,[r3,#8]
 7016              	.L435:
4055:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4056:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
4057:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back s
4058:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4059:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 7017              	 .loc 1 4059 0 is_stmt 1
 7018 0108 FB68     	 ldr r3,[r7,#12]
 7019 010a 1B7D     	 ldrb r3,[r3,#20]
 7020 010c DBB2     	 uxtb r3,r3
 7021 010e 5BB2     	 sxtb r3,r3
 7022 0110 002B     	 cmp r3,#0
 7023 0112 1BDA     	 bge .L443
4060:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7024              	 .loc 1 4060 0
 7025 0114 3B69     	 ldr r3,[r7,#16]
 7026 0116 5978     	 ldrb r1,[r3,#1]
 7027 0118 FB68     	 ldr r3,[r7,#12]
 7028 011a 03F12C02 	 add r2,r3,#44
 7029 011e FB68     	 ldr r3,[r7,#12]
 7030 0120 1B6A     	 ldr r3,[r3,#32]
 7031 0122 0846     	 mov r0,r1
 7032 0124 1146     	 mov r1,r2
 7033 0126 1A46     	 mov r2,r3
 7034 0128 0123     	 movs r3,#1
 7035 012a FFF7FEFF 	 bl disk_write
 7036 012e 0346     	 mov r3,r0
 7037 0130 002B     	 cmp r3,#0
 7038 0132 04D0     	 beq .L444
 7039              	 .loc 1 4060 0 is_stmt 0 discriminator 1
 7040 0134 FB68     	 ldr r3,[r7,#12]
 7041 0136 0122     	 movs r2,#1
 7042 0138 5A75     	 strb r2,[r3,#21]
 7043 013a 0123     	 movs r3,#1
 7044 013c C9E0     	 b .L454
 7045              	.L444:
4061:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7046              	 .loc 1 4061 0 is_stmt 1
 7047 013e FB68     	 ldr r3,[r7,#12]
 7048 0140 1B7D     	 ldrb r3,[r3,#20]
 7049 0142 03F07F03 	 and r3,r3,#127
 7050 0146 DAB2     	 uxtb r2,r3
 7051 0148 FB68     	 ldr r3,[r7,#12]
 7052 014a 1A75     	 strb r2,[r3,#20]
 7053              	.L443:
4062:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4063:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4064:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 7054              	 .loc 1 4064 0
 7055 014c 3A69     	 ldr r2,[r7,#16]
 7056 014e FB68     	 ldr r3,[r7,#12]
 7057 0150 DB69     	 ldr r3,[r3,#28]
 7058 0152 1046     	 mov r0,r2
 7059 0154 1946     	 mov r1,r3
 7060 0156 FFF7FEFF 	 bl clst2sect
 7061 015a 7861     	 str r0,[r7,#20]
4065:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sect == 0) ABORT(fs, FR_INT_ERR);
 7062              	 .loc 1 4065 0
 7063 015c 7B69     	 ldr r3,[r7,#20]
 7064 015e 002B     	 cmp r3,#0
 7065 0160 04D1     	 bne .L445
 7066              	 .loc 1 4065 0 is_stmt 0 discriminator 1
 7067 0162 FB68     	 ldr r3,[r7,#12]
 7068 0164 0222     	 movs r2,#2
 7069 0166 5A75     	 strb r2,[r3,#21]
 7070 0168 0223     	 movs r3,#2
 7071 016a B2E0     	 b .L454
 7072              	.L445:
4066:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += csect;
 7073              	 .loc 1 4066 0 is_stmt 1
 7074 016c 7A69     	 ldr r2,[r7,#20]
 7075 016e BB69     	 ldr r3,[r7,#24]
 7076 0170 1344     	 add r3,r3,r2
 7077 0172 7B61     	 str r3,[r7,#20]
4067:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 7078              	 .loc 1 4067 0
 7079 0174 7B68     	 ldr r3,[r7,#4]
 7080 0176 5B0A     	 lsrs r3,r3,#9
 7081 0178 3B62     	 str r3,[r7,#32]
4068:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 7082              	 .loc 1 4068 0
 7083 017a 3B6A     	 ldr r3,[r7,#32]
 7084 017c 002B     	 cmp r3,#0
 7085 017e 3ED0     	 beq .L446
4069:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 7086              	 .loc 1 4069 0
 7087 0180 BA69     	 ldr r2,[r7,#24]
 7088 0182 3B6A     	 ldr r3,[r7,#32]
 7089 0184 1344     	 add r3,r3,r2
 7090 0186 3A69     	 ldr r2,[r7,#16]
 7091 0188 5289     	 ldrh r2,[r2,#10]
 7092 018a 9342     	 cmp r3,r2
 7093 018c 05D9     	 bls .L447
4070:../Dave/Generated/FATFS/ff_Src/ff.c **** 					cc = fs->csize - csect;
 7094              	 .loc 1 4070 0
 7095 018e 3B69     	 ldr r3,[r7,#16]
 7096 0190 5B89     	 ldrh r3,[r3,#10]
 7097 0192 1A46     	 mov r2,r3
 7098 0194 BB69     	 ldr r3,[r7,#24]
 7099 0196 D31A     	 subs r3,r2,r3
 7100 0198 3B62     	 str r3,[r7,#32]
 7101              	.L447:
4071:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4072:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 7102              	 .loc 1 4072 0
 7103 019a 3B69     	 ldr r3,[r7,#16]
 7104 019c 5B78     	 ldrb r3,[r3,#1]
 7105 019e 1846     	 mov r0,r3
 7106 01a0 F969     	 ldr r1,[r7,#28]
 7107 01a2 7A69     	 ldr r2,[r7,#20]
 7108 01a4 3B6A     	 ldr r3,[r7,#32]
 7109 01a6 FFF7FEFF 	 bl disk_write
 7110 01aa 0346     	 mov r3,r0
 7111 01ac 002B     	 cmp r3,#0
 7112 01ae 04D0     	 beq .L448
 7113              	 .loc 1 4072 0 is_stmt 0 discriminator 1
 7114 01b0 FB68     	 ldr r3,[r7,#12]
 7115 01b2 0122     	 movs r2,#1
 7116 01b4 5A75     	 strb r2,[r3,#21]
 7117 01b6 0123     	 movs r3,#1
 7118 01b8 8BE0     	 b .L454
 7119              	.L448:
4073:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
4074:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
4075:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct writ
4076:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
4077:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 0;
4078:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4079:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4080:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write *
 7120              	 .loc 1 4080 0 is_stmt 1
 7121 01ba FB68     	 ldr r3,[r7,#12]
 7122 01bc 1A6A     	 ldr r2,[r3,#32]
 7123 01be 7B69     	 ldr r3,[r7,#20]
 7124 01c0 D21A     	 subs r2,r2,r3
 7125 01c2 3B6A     	 ldr r3,[r7,#32]
 7126 01c4 9A42     	 cmp r2,r3
 7127 01c6 16D2     	 bcs .L449
4081:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 7128              	 .loc 1 4081 0
 7129 01c8 FB68     	 ldr r3,[r7,#12]
 7130 01ca 03F12C01 	 add r1,r3,#44
 7131 01ce FB68     	 ldr r3,[r7,#12]
 7132 01d0 1A6A     	 ldr r2,[r3,#32]
 7133 01d2 7B69     	 ldr r3,[r7,#20]
 7134 01d4 D31A     	 subs r3,r2,r3
 7135 01d6 5B02     	 lsls r3,r3,#9
 7136 01d8 FA69     	 ldr r2,[r7,#28]
 7137 01da 1344     	 add r3,r3,r2
 7138 01dc 0846     	 mov r0,r1
 7139 01de 1946     	 mov r1,r3
 7140 01e0 4FF40072 	 mov r2,#512
 7141 01e4 FFF7FEFF 	 bl mem_cpy
4082:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_DIRTY;
 7142              	 .loc 1 4082 0
 7143 01e8 FB68     	 ldr r3,[r7,#12]
 7144 01ea 1B7D     	 ldrb r3,[r3,#20]
 7145 01ec 03F07F03 	 and r3,r3,#127
 7146 01f0 DAB2     	 uxtb r2,r3
 7147 01f2 FB68     	 ldr r3,[r7,#12]
 7148 01f4 1A75     	 strb r2,[r3,#20]
 7149              	.L449:
4083:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4084:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4085:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4086:../Dave/Generated/FATFS/ff_Src/ff.c **** 				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 7150              	 .loc 1 4086 0
 7151 01f6 3B6A     	 ldr r3,[r7,#32]
 7152 01f8 5B02     	 lsls r3,r3,#9
 7153 01fa 7B62     	 str r3,[r7,#36]
4087:../Dave/Generated/FATFS/ff_Src/ff.c **** 				continue;
 7154              	 .loc 1 4087 0
 7155 01fc 40E0     	 b .L450
 7156              	.L446:
4088:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4089:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
4090:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
4091:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
4092:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->winsect = sect;
4093:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4094:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4095:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->sect != sect && 		/* Fill sector cache with file data */
 7157              	 .loc 1 4095 0
 7158 01fe FB68     	 ldr r3,[r7,#12]
 7159 0200 1A6A     	 ldr r2,[r3,#32]
 7160 0202 7B69     	 ldr r3,[r7,#20]
 7161 0204 9A42     	 cmp r2,r3
 7162 0206 17D0     	 beq .L451
4096:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7163              	 .loc 1 4096 0 discriminator 1
 7164 0208 FB68     	 ldr r3,[r7,#12]
 7165 020a 9A69     	 ldr r2,[r3,#24]
 7166 020c FB68     	 ldr r3,[r7,#12]
 7167 020e DB68     	 ldr r3,[r3,#12]
4095:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7168              	 .loc 1 4095 0 discriminator 1
 7169 0210 9A42     	 cmp r2,r3
 7170 0212 11D2     	 bcs .L451
4097:../Dave/Generated/FATFS/ff_Src/ff.c **** 				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 7171              	 .loc 1 4097 0
 7172 0214 3B69     	 ldr r3,[r7,#16]
 7173 0216 5A78     	 ldrb r2,[r3,#1]
 7174 0218 FB68     	 ldr r3,[r7,#12]
 7175 021a 2C33     	 adds r3,r3,#44
 7176 021c 1046     	 mov r0,r2
 7177 021e 1946     	 mov r1,r3
 7178 0220 7A69     	 ldr r2,[r7,#20]
 7179 0222 0123     	 movs r3,#1
 7180 0224 FFF7FEFF 	 bl disk_read
 7181 0228 0346     	 mov r3,r0
4096:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr < fp->obj.objsize &&
 7182              	 .loc 1 4096 0
 7183 022a 002B     	 cmp r3,#0
 7184 022c 04D0     	 beq .L451
4098:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ABORT(fs, FR_DISK_ERR);
 7185              	 .loc 1 4098 0
 7186 022e FB68     	 ldr r3,[r7,#12]
 7187 0230 0122     	 movs r2,#1
 7188 0232 5A75     	 strb r2,[r3,#21]
 7189 0234 0123     	 movs r3,#1
 7190 0236 4CE0     	 b .L454
 7191              	.L451:
4099:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4100:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4101:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = sect;
 7192              	 .loc 1 4101 0
 7193 0238 FB68     	 ldr r3,[r7,#12]
 7194 023a 7A69     	 ldr r2,[r7,#20]
 7195 023c 1A62     	 str r2,[r3,#32]
 7196              	.L434:
4102:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4103:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 7197              	 .loc 1 4103 0
 7198 023e FB68     	 ldr r3,[r7,#12]
 7199 0240 9B69     	 ldr r3,[r3,#24]
 7200 0242 C3F30803 	 ubfx r3,r3,#0,#9
 7201 0246 C3F50073 	 rsb r3,r3,#512
 7202 024a 7B62     	 str r3,[r7,#36]
4104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 7203              	 .loc 1 4104 0
 7204 024c 7A6A     	 ldr r2,[r7,#36]
 7205 024e 7B68     	 ldr r3,[r7,#4]
 7206 0250 9A42     	 cmp r2,r3
 7207 0252 01D9     	 bls .L452
 7208              	 .loc 1 4104 0 is_stmt 0 discriminator 1
 7209 0254 7B68     	 ldr r3,[r7,#4]
 7210 0256 7B62     	 str r3,[r7,#36]
 7211              	.L452:
4105:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
4106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
4107:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
4108:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->wflag = 1;
4109:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4110:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 7212              	 .loc 1 4110 0 is_stmt 1
 7213 0258 FB68     	 ldr r3,[r7,#12]
 7214 025a 9B69     	 ldr r3,[r3,#24]
 7215 025c C3F30803 	 ubfx r3,r3,#0,#9
 7216 0260 2833     	 adds r3,r3,#40
 7217 0262 FA68     	 ldr r2,[r7,#12]
 7218 0264 1344     	 add r3,r3,r2
 7219 0266 0433     	 adds r3,r3,#4
 7220 0268 1846     	 mov r0,r3
 7221 026a F969     	 ldr r1,[r7,#28]
 7222 026c 7A6A     	 ldr r2,[r7,#36]
 7223 026e FFF7FEFF 	 bl mem_cpy
4111:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_DIRTY;
 7224              	 .loc 1 4111 0
 7225 0272 FB68     	 ldr r3,[r7,#12]
 7226 0274 1B7D     	 ldrb r3,[r3,#20]
 7227 0276 63F07F03 	 orn r3,r3,#127
 7228 027a DAB2     	 uxtb r2,r3
 7229 027c FB68     	 ldr r3,[r7,#12]
 7230 027e 1A75     	 strb r2,[r3,#20]
 7231              	.L450:
4031:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 7232              	 .loc 1 4031 0
 7233 0280 7A68     	 ldr r2,[r7,#4]
 7234 0282 7B6A     	 ldr r3,[r7,#36]
 7235 0284 D31A     	 subs r3,r2,r3
 7236 0286 7B60     	 str r3,[r7,#4]
 7237 0288 3B68     	 ldr r3,[r7]
 7238 028a 1A68     	 ldr r2,[r3]
 7239 028c 7B6A     	 ldr r3,[r7,#36]
 7240 028e 1A44     	 add r2,r2,r3
 7241 0290 3B68     	 ldr r3,[r7]
 7242 0292 1A60     	 str r2,[r3]
 7243 0294 FA69     	 ldr r2,[r7,#28]
 7244 0296 7B6A     	 ldr r3,[r7,#36]
 7245 0298 1344     	 add r3,r3,r2
 7246 029a FB61     	 str r3,[r7,#28]
 7247 029c FB68     	 ldr r3,[r7,#12]
 7248 029e 9A69     	 ldr r2,[r3,#24]
 7249 02a0 7B6A     	 ldr r3,[r7,#36]
 7250 02a2 1A44     	 add r2,r2,r3
 7251 02a4 FB68     	 ldr r3,[r7,#12]
 7252 02a6 9A61     	 str r2,[r3,#24]
 7253 02a8 FB68     	 ldr r3,[r7,#12]
 7254 02aa DA68     	 ldr r2,[r3,#12]
 7255 02ac FB68     	 ldr r3,[r7,#12]
 7256 02ae 9B69     	 ldr r3,[r3,#24]
 7257 02b0 9A42     	 cmp r2,r3
 7258 02b2 38BF     	 it cc
 7259 02b4 1A46     	 movcc r2,r3
 7260 02b6 FB68     	 ldr r3,[r7,#12]
 7261 02b8 DA60     	 str r2,[r3,#12]
 7262              	.L433:
4030:../Dave/Generated/FATFS/ff_Src/ff.c **** 		btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.
 7263              	 .loc 1 4030 0
 7264 02ba 7B68     	 ldr r3,[r7,#4]
 7265 02bc 002B     	 cmp r3,#0
 7266 02be 7FF4D9AE 	 bne .L453
 7267              	.L440:
4112:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4114:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4115:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 7268              	 .loc 1 4115 0
 7269 02c2 FB68     	 ldr r3,[r7,#12]
 7270 02c4 1B7D     	 ldrb r3,[r3,#20]
 7271 02c6 43F04003 	 orr r3,r3,#64
 7272 02ca DAB2     	 uxtb r2,r3
 7273 02cc FB68     	 ldr r3,[r7,#12]
 7274 02ce 1A75     	 strb r2,[r3,#20]
4116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4117:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
 7275              	 .loc 1 4117 0
 7276 02d0 0023     	 movs r3,#0
 7277              	.L454:
4118:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7278              	 .loc 1 4118 0 discriminator 1
 7279 02d2 1846     	 mov r0,r3
 7280 02d4 3037     	 adds r7,r7,#48
 7281              	.LCFI240:
 7282              	 .cfi_def_cfa_offset 8
 7283 02d6 BD46     	 mov sp,r7
 7284              	.LCFI241:
 7285              	 .cfi_def_cfa_register 13
 7286              	 
 7287 02d8 80BD     	 pop {r7,pc}
 7288              	 .cfi_endproc
 7289              	.LFE44:
 7291 02da 00BF     	 .section .text.f_sync,"ax",%progbits
 7292              	 .align 2
 7293              	 .global f_sync
 7294              	 .thumb
 7295              	 .thumb_func
 7297              	f_sync:
 7298              	.LFB45:
4119:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4120:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4121:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4122:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4123:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4124:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Synchronize the File                                                  */
4125:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4126:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4127:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_sync (
4128:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4129:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4130:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7299              	 .loc 1 4130 0
 7300              	 .cfi_startproc
 7301              	 
 7302              	 
 7303 0000 80B5     	 push {r7,lr}
 7304              	.LCFI242:
 7305              	 .cfi_def_cfa_offset 8
 7306              	 .cfi_offset 7,-8
 7307              	 .cfi_offset 14,-4
 7308 0002 86B0     	 sub sp,sp,#24
 7309              	.LCFI243:
 7310              	 .cfi_def_cfa_offset 32
 7311 0004 00AF     	 add r7,sp,#0
 7312              	.LCFI244:
 7313              	 .cfi_def_cfa_register 7
 7314 0006 7860     	 str r0,[r7,#4]
4131:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD tm;
4134:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dir;
4135:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4136:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 7315              	 .loc 1 4137 0
 7316 0008 7A68     	 ldr r2,[r7,#4]
 7317 000a 07F10803 	 add r3,r7,#8
 7318 000e 1046     	 mov r0,r2
 7319 0010 1946     	 mov r1,r3
 7320 0012 FFF7FEFF 	 bl validate
 7321 0016 0346     	 mov r3,r0
 7322 0018 FB75     	 strb r3,[r7,#23]
4138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7323              	 .loc 1 4138 0
 7324 001a FB7D     	 ldrb r3,[r7,#23]
 7325 001c 002B     	 cmp r3,#0
 7326 001e 6DD1     	 bne .L456
4139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 7327              	 .loc 1 4139 0
 7328 0020 7B68     	 ldr r3,[r7,#4]
 7329 0022 1B7D     	 ldrb r3,[r3,#20]
 7330 0024 03F04003 	 and r3,r3,#64
 7331 0028 002B     	 cmp r3,#0
 7332 002a 67D0     	 beq .L456
4140:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4141:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 7333              	 .loc 1 4141 0
 7334 002c 7B68     	 ldr r3,[r7,#4]
 7335 002e 1B7D     	 ldrb r3,[r3,#20]
 7336 0030 DBB2     	 uxtb r3,r3
 7337 0032 5BB2     	 sxtb r3,r3
 7338 0034 002B     	 cmp r3,#0
 7339 0036 18DA     	 bge .L457
4142:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 7340              	 .loc 1 4142 0
 7341 0038 BB68     	 ldr r3,[r7,#8]
 7342 003a 5978     	 ldrb r1,[r3,#1]
 7343 003c 7B68     	 ldr r3,[r7,#4]
 7344 003e 03F12C02 	 add r2,r3,#44
 7345 0042 7B68     	 ldr r3,[r7,#4]
 7346 0044 1B6A     	 ldr r3,[r3,#32]
 7347 0046 0846     	 mov r0,r1
 7348 0048 1146     	 mov r1,r2
 7349 004a 1A46     	 mov r2,r3
 7350 004c 0123     	 movs r3,#1
 7351 004e FFF7FEFF 	 bl disk_write
 7352 0052 0346     	 mov r3,r0
 7353 0054 002B     	 cmp r3,#0
 7354 0056 01D0     	 beq .L458
 7355              	 .loc 1 4142 0 is_stmt 0 discriminator 1
 7356 0058 0123     	 movs r3,#1
 7357 005a 50E0     	 b .L460
 7358              	.L458:
4143:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 7359              	 .loc 1 4143 0 is_stmt 1
 7360 005c 7B68     	 ldr r3,[r7,#4]
 7361 005e 1B7D     	 ldrb r3,[r3,#20]
 7362 0060 03F07F03 	 and r3,r3,#127
 7363 0064 DAB2     	 uxtb r2,r3
 7364 0066 7B68     	 ldr r3,[r7,#4]
 7365 0068 1A75     	 strb r2,[r3,#20]
 7366              	.L457:
4144:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4145:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4146:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Update the directory entry */
4147:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();				/* Modified time */
 7367              	 .loc 1 4147 0
 7368 006a FFF7FEFF 	 bl get_fattime
 7369 006e 3861     	 str r0,[r7,#16]
4148:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4149:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
4150:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
4151:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
4152:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if nee
4153:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4154:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
4155:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DIR dj;
4156:../Dave/Generated/FATFS/ff_Src/ff.c **** 					DEF_NAMBUF
4157:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4158:../Dave/Generated/FATFS/ff_Src/ff.c **** 					INIT_NAMBUF(fs);
4159:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
4160:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
4161:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has be
4162:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
4163:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
4164:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
4165:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid 
4166:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
4167:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_ModTime10] = 0;
4168:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->dirbuf + XDIR_AccTime, 0);
4169:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&dj);	/* Restore it to the directory */
4170:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
4171:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = sync_fs(fs);
4172:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag &= (BYTE)~FA_MODIFIED;
4173:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4174:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4175:../Dave/Generated/FATFS/ff_Src/ff.c **** 					FREE_NAMBUF();
4176:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4177:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
4178:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4179:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
4180:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, fp->dir_sect);
 7370              	 .loc 1 4180 0
 7371 0070 BA68     	 ldr r2,[r7,#8]
 7372 0072 7B68     	 ldr r3,[r7,#4]
 7373 0074 5B6A     	 ldr r3,[r3,#36]
 7374 0076 1046     	 mov r0,r2
 7375 0078 1946     	 mov r1,r3
 7376 007a FFF7FEFF 	 bl move_window
 7377 007e 0346     	 mov r3,r0
 7378 0080 FB75     	 strb r3,[r7,#23]
4181:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 7379              	 .loc 1 4181 0
 7380 0082 FB7D     	 ldrb r3,[r7,#23]
 7381 0084 002B     	 cmp r3,#0
 7382 0086 39D1     	 bne .L456
4182:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir = fp->dir_ptr;
 7383              	 .loc 1 4182 0
 7384 0088 7B68     	 ldr r3,[r7,#4]
 7385 008a 9B6A     	 ldr r3,[r3,#40]
 7386 008c FB60     	 str r3,[r7,#12]
4183:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been chan
 7387              	 .loc 1 4183 0
 7388 008e FB68     	 ldr r3,[r7,#12]
 7389 0090 0B33     	 adds r3,r3,#11
 7390 0092 FA68     	 ldr r2,[r7,#12]
 7391 0094 0B32     	 adds r2,r2,#11
 7392 0096 1278     	 ldrb r2,[r2]
 7393 0098 42F02002 	 orr r2,r2,#32
 7394 009c D2B2     	 uxtb r2,r2
 7395 009e 1A70     	 strb r2,[r3]
4184:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 7396              	 .loc 1 4184 0
 7397 00a0 7B68     	 ldr r3,[r7,#4]
 7398 00a2 1A68     	 ldr r2,[r3]
 7399 00a4 7B68     	 ldr r3,[r7,#4]
 7400 00a6 9B68     	 ldr r3,[r3,#8]
 7401 00a8 1046     	 mov r0,r2
 7402 00aa F968     	 ldr r1,[r7,#12]
 7403 00ac 1A46     	 mov r2,r3
 7404 00ae FFF7FEFF 	 bl st_clust
4185:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 7405              	 .loc 1 4185 0
 7406 00b2 FB68     	 ldr r3,[r7,#12]
 7407 00b4 03F11C02 	 add r2,r3,#28
 7408 00b8 7B68     	 ldr r3,[r7,#4]
 7409 00ba DB68     	 ldr r3,[r3,#12]
 7410 00bc 1046     	 mov r0,r2
 7411 00be 1946     	 mov r1,r3
 7412 00c0 FFF7FEFF 	 bl st_dword
4186:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 7413              	 .loc 1 4186 0
 7414 00c4 FB68     	 ldr r3,[r7,#12]
 7415 00c6 1633     	 adds r3,r3,#22
 7416 00c8 1846     	 mov r0,r3
 7417 00ca 3969     	 ldr r1,[r7,#16]
 7418 00cc FFF7FEFF 	 bl st_dword
4187:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dir + DIR_LstAccDate, 0);
 7419              	 .loc 1 4187 0
 7420 00d0 FB68     	 ldr r3,[r7,#12]
 7421 00d2 1233     	 adds r3,r3,#18
 7422 00d4 1846     	 mov r0,r3
 7423 00d6 0021     	 movs r1,#0
 7424 00d8 FFF7FEFF 	 bl st_word
4188:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 7425              	 .loc 1 4188 0
 7426 00dc BB68     	 ldr r3,[r7,#8]
 7427 00de 0122     	 movs r2,#1
 7428 00e0 DA70     	 strb r2,[r3,#3]
4189:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);					/* Restore it to the directory */
 7429              	 .loc 1 4189 0
 7430 00e2 BB68     	 ldr r3,[r7,#8]
 7431 00e4 1846     	 mov r0,r3
 7432 00e6 FFF7FEFF 	 bl sync_fs
 7433 00ea 0346     	 mov r3,r0
 7434 00ec FB75     	 strb r3,[r7,#23]
4190:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->flag &= (BYTE)~FA_MODIFIED;
 7435              	 .loc 1 4190 0
 7436 00ee 7B68     	 ldr r3,[r7,#4]
 7437 00f0 1B7D     	 ldrb r3,[r3,#20]
 7438 00f2 23F04003 	 bic r3,r3,#64
 7439 00f6 DAB2     	 uxtb r2,r3
 7440 00f8 7B68     	 ldr r3,[r7,#4]
 7441 00fa 1A75     	 strb r2,[r3,#20]
 7442              	.L456:
4191:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4192:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4193:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4194:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4195:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4196:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7443              	 .loc 1 4196 0
 7444 00fc FB7D     	 ldrb r3,[r7,#23]
 7445              	.L460:
4197:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7446              	 .loc 1 4197 0 discriminator 1
 7447 00fe 1846     	 mov r0,r3
 7448 0100 1837     	 adds r7,r7,#24
 7449              	.LCFI245:
 7450              	 .cfi_def_cfa_offset 8
 7451 0102 BD46     	 mov sp,r7
 7452              	.LCFI246:
 7453              	 .cfi_def_cfa_register 13
 7454              	 
 7455 0104 80BD     	 pop {r7,pc}
 7456              	 .cfi_endproc
 7457              	.LFE45:
 7459 0106 00BF     	 .section .text.f_close,"ax",%progbits
 7460              	 .align 2
 7461              	 .global f_close
 7462              	 .thumb
 7463              	 .thumb_func
 7465              	f_close:
 7466              	.LFB46:
4198:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4199:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
4200:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4201:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4202:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4203:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4204:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4205:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close File                                                            */
4206:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4207:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4208:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_close (
4209:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object to be closed */
4210:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4211:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7467              	 .loc 1 4211 0
 7468              	 .cfi_startproc
 7469              	 
 7470              	 
 7471 0000 80B5     	 push {r7,lr}
 7472              	.LCFI247:
 7473              	 .cfi_def_cfa_offset 8
 7474              	 .cfi_offset 7,-8
 7475              	 .cfi_offset 14,-4
 7476 0002 84B0     	 sub sp,sp,#16
 7477              	.LCFI248:
 7478              	 .cfi_def_cfa_offset 24
 7479 0004 00AF     	 add r7,sp,#0
 7480              	.LCFI249:
 7481              	 .cfi_def_cfa_register 7
 7482 0006 7860     	 str r0,[r7,#4]
4212:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4213:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4214:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4215:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_sync(fp);					/* Flush cached data */
 7483              	 .loc 1 4216 0
 7484 0008 7868     	 ldr r0,[r7,#4]
 7485 000a FFF7FEFF 	 bl f_sync
 7486 000e 0346     	 mov r3,r0
 7487 0010 FB73     	 strb r3,[r7,#15]
4217:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK)
 7488              	 .loc 1 4217 0
 7489 0012 FB7B     	 ldrb r3,[r7,#15]
 7490 0014 002B     	 cmp r3,#0
 7491 0016 18D1     	 bne .L462
4218:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4219:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4220:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = validate(&fp->obj, &fs);	/* Lock volume */
 7492              	 .loc 1 4220 0
 7493 0018 7A68     	 ldr r2,[r7,#4]
 7494 001a 07F10803 	 add r3,r7,#8
 7495 001e 1046     	 mov r0,r2
 7496 0020 1946     	 mov r1,r3
 7497 0022 FFF7FEFF 	 bl validate
 7498 0026 0346     	 mov r3,r0
 7499 0028 FB73     	 strb r3,[r7,#15]
4221:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 7500              	 .loc 1 4221 0
 7501 002a FB7B     	 ldrb r3,[r7,#15]
 7502 002c 002B     	 cmp r3,#0
 7503 002e 0CD1     	 bne .L462
4222:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4223:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dec_lock(fp->obj.lockid);		/* Decrement file open counter */
 7504              	 .loc 1 4223 0
 7505 0030 7B68     	 ldr r3,[r7,#4]
 7506 0032 1B69     	 ldr r3,[r3,#16]
 7507 0034 1846     	 mov r0,r3
 7508 0036 FFF7FEFF 	 bl dec_lock
 7509 003a 0346     	 mov r3,r0
 7510 003c FB73     	 strb r3,[r7,#15]
4224:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
 7511              	 .loc 1 4224 0
 7512 003e FB7B     	 ldrb r3,[r7,#15]
 7513 0040 002B     	 cmp r3,#0
 7514 0042 02D1     	 bne .L462
 7515              	 .loc 1 4224 0 is_stmt 0 discriminator 1
 7516 0044 7B68     	 ldr r3,[r7,#4]
 7517 0046 0022     	 movs r2,#0
 7518 0048 1A60     	 str r2,[r3]
 7519              	.L462:
4225:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4226:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.fs = 0;	/* Invalidate file object */
4227:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4228:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4229:../Dave/Generated/FATFS/ff_Src/ff.c **** 			unlock_fs(fs, FR_OK);		/* Unlock volume */
4230:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4231:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4232:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4233:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 7520              	 .loc 1 4233 0 is_stmt 1
 7521 004a FB7B     	 ldrb r3,[r7,#15]
4234:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7522              	 .loc 1 4234 0
 7523 004c 1846     	 mov r0,r3
 7524 004e 1037     	 adds r7,r7,#16
 7525              	.LCFI250:
 7526              	 .cfi_def_cfa_offset 8
 7527 0050 BD46     	 mov sp,r7
 7528              	.LCFI251:
 7529              	 .cfi_def_cfa_register 13
 7530              	 
 7531 0052 80BD     	 pop {r7,pc}
 7532              	 .cfi_endproc
 7533              	.LFE46:
 7535              	 .section .text.f_chdrive,"ax",%progbits
 7536              	 .align 2
 7537              	 .global f_chdrive
 7538              	 .thumb
 7539              	 .thumb_func
 7541              	f_chdrive:
 7542              	.LFB47:
4235:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4236:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4237:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4238:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4239:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 1
4240:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4241:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Current Directory or Current Drive, Get Current Directory      */
4242:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4244:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdrive (
4245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Drive number to set */
4246:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4247:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7543              	 .loc 1 4247 0
 7544              	 .cfi_startproc
 7545              	 
 7546              	 
 7547 0000 80B5     	 push {r7,lr}
 7548              	.LCFI252:
 7549              	 .cfi_def_cfa_offset 8
 7550              	 .cfi_offset 7,-8
 7551              	 .cfi_offset 14,-4
 7552 0002 84B0     	 sub sp,sp,#16
 7553              	.LCFI253:
 7554              	 .cfi_def_cfa_offset 24
 7555 0004 00AF     	 add r7,sp,#0
 7556              	.LCFI254:
 7557              	 .cfi_def_cfa_register 7
 7558 0006 7860     	 str r0,[r7,#4]
4248:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
4249:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4250:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4251:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive number */
4252:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);
 7559              	 .loc 1 4252 0
 7560 0008 3B1D     	 adds r3,r7,#4
 7561 000a 1846     	 mov r0,r3
 7562 000c FFF7FEFF 	 bl get_ldnumber
 7563 0010 F860     	 str r0,[r7,#12]
4253:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
 7564              	 .loc 1 4253 0
 7565 0012 FB68     	 ldr r3,[r7,#12]
 7566 0014 002B     	 cmp r3,#0
 7567 0016 01DA     	 bge .L465
 7568              	 .loc 1 4253 0 is_stmt 0 discriminator 1
 7569 0018 0B23     	 movs r3,#11
 7570 001a 04E0     	 b .L466
 7571              	.L465:
4254:../Dave/Generated/FATFS/ff_Src/ff.c **** 	CurrVol = (BYTE)vol;	/* Set it as current volume */
 7572              	 .loc 1 4254 0 is_stmt 1
 7573 001c FB68     	 ldr r3,[r7,#12]
 7574 001e DAB2     	 uxtb r2,r3
 7575 0020 034B     	 ldr r3,.L467
 7576 0022 1A70     	 strb r2,[r3]
4255:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4256:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
 7577              	 .loc 1 4256 0
 7578 0024 0023     	 movs r3,#0
 7579              	.L466:
4257:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7580              	 .loc 1 4257 0
 7581 0026 1846     	 mov r0,r3
 7582 0028 1037     	 adds r7,r7,#16
 7583              	.LCFI255:
 7584              	 .cfi_def_cfa_offset 8
 7585 002a BD46     	 mov sp,r7
 7586              	.LCFI256:
 7587              	 .cfi_def_cfa_register 13
 7588              	 
 7589 002c 80BD     	 pop {r7,pc}
 7590              	.L468:
 7591 002e 00BF     	 .align 2
 7592              	.L467:
 7593 0030 00000000 	 .word CurrVol
 7594              	 .cfi_endproc
 7595              	.LFE47:
 7597              	 .section .text.f_chdir,"ax",%progbits
 7598              	 .align 2
 7599              	 .global f_chdir
 7600              	 .thumb
 7601              	 .thumb_func
 7603              	f_chdir:
 7604              	.LFB48:
4258:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4259:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4260:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4261:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chdir (
4262:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4263:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4264:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7605              	 .loc 1 4264 0
 7606              	 .cfi_startproc
 7607              	 
 7608              	 
 7609 0000 90B5     	 push {r4,r7,lr}
 7610              	.LCFI257:
 7611              	 .cfi_def_cfa_offset 12
 7612              	 .cfi_offset 4,-12
 7613              	 .cfi_offset 7,-8
 7614              	 .cfi_offset 14,-4
 7615 0002 91B0     	 sub sp,sp,#68
 7616              	.LCFI258:
 7617              	 .cfi_def_cfa_offset 80
 7618 0004 00AF     	 add r7,sp,#0
 7619              	.LCFI259:
 7620              	 .cfi_def_cfa_register 7
 7621 0006 7860     	 str r0,[r7,#4]
4265:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2
4266:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4267:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4269:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4271:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4272:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4273:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4274:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4275:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, 0);
 7622              	 .loc 1 4275 0
 7623 0008 3A1D     	 adds r2,r7,#4
 7624 000a 07F10803 	 add r3,r7,#8
 7625 000e 1046     	 mov r0,r2
 7626 0010 1946     	 mov r1,r3
 7627 0012 0022     	 movs r2,#0
 7628 0014 FFF7FEFF 	 bl mount_volume
 7629 0018 0346     	 mov r3,r0
 7630 001a 87F83F30 	 strb r3,[r7,#63]
4276:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7631              	 .loc 1 4276 0
 7632 001e 97F83F30 	 ldrb r3,[r7,#63]
 7633 0022 002B     	 cmp r3,#0
 7634 0024 32D1     	 bne .L470
4277:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 7635              	 .loc 1 4277 0
 7636 0026 BB68     	 ldr r3,[r7,#8]
 7637 0028 FB60     	 str r3,[r7,#12]
4278:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4279:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the path */
 7638              	 .loc 1 4279 0
 7639 002a 7B68     	 ldr r3,[r7,#4]
 7640 002c 07F10C02 	 add r2,r7,#12
 7641 0030 1046     	 mov r0,r2
 7642 0032 1946     	 mov r1,r3
 7643 0034 FFF7FEFF 	 bl follow_path
 7644 0038 0346     	 mov r3,r0
 7645 003a 87F83F30 	 strb r3,[r7,#63]
4280:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* Follow completed */
 7646              	 .loc 1 4280 0
 7647 003e 97F83F30 	 ldrb r3,[r7,#63]
 7648 0042 002B     	 cmp r3,#0
 7649 0044 1BD1     	 bne .L471
4281:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Is it the start directory itself? */
 7650              	 .loc 1 4281 0
 7651 0046 97F83B30 	 ldrb r3,[r7,#59]
 7652 004a DBB2     	 uxtb r3,r3
 7653 004c 5BB2     	 sxtb r3,r3
 7654 004e 002B     	 cmp r3,#0
 7655 0050 03DA     	 bge .L472
4282:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->cdir = dj.obj.sclust;
 7656              	 .loc 1 4282 0
 7657 0052 BB68     	 ldr r3,[r7,#8]
 7658 0054 7A69     	 ldr r2,[r7,#20]
 7659 0056 5A61     	 str r2,[r3,#20]
 7660 0058 11E0     	 b .L471
 7661              	.L472:
4283:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4284:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4285:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_scl = dj.obj.c_scl;
4286:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_size = dj.obj.c_size;
4287:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->cdc_ofs = dj.obj.c_ofs;
4288:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4289:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4290:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4291:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {	/* It is a sub-directory */
 7662              	 .loc 1 4291 0
 7663 005a BB7C     	 ldrb r3,[r7,#18]
 7664 005c 03F01003 	 and r3,r3,#16
 7665 0060 002B     	 cmp r3,#0
 7666 0062 09D0     	 beq .L473
4292:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4293:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4294:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Sub-directory cluster */
4295:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_scl = dj.obj.sclust;						/* Save containing directory information */
4296:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
4297:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdc_ofs = dj.blk_ofs;
4298:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4299:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4300:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4301:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->cdir = ld_clust(fs, dj.dir);					/* Sub-directory cluster */
 7667              	 .loc 1 4301 0
 7668 0064 BC68     	 ldr r4,[r7,#8]
 7669 0066 BA68     	 ldr r2,[r7,#8]
 7670 0068 FB6A     	 ldr r3,[r7,#44]
 7671 006a 1046     	 mov r0,r2
 7672 006c 1946     	 mov r1,r3
 7673 006e FFF7FEFF 	 bl ld_clust
 7674 0072 0346     	 mov r3,r0
 7675 0074 6361     	 str r3,[r4,#20]
 7676 0076 02E0     	 b .L471
 7677              	.L473:
4302:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4303:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
4304:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;		/* Reached but a file */
 7678              	 .loc 1 4304 0
 7679 0078 0523     	 movs r3,#5
 7680 007a 87F83F30 	 strb r3,[r7,#63]
 7681              	.L471:
4305:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4306:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4307:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4308:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4309:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 7682              	 .loc 1 4309 0
 7683 007e 97F83F30 	 ldrb r3,[r7,#63]
 7684 0082 042B     	 cmp r3,#4
 7685 0084 02D1     	 bne .L470
 7686              	 .loc 1 4309 0 is_stmt 0 discriminator 1
 7687 0086 0523     	 movs r3,#5
 7688 0088 87F83F30 	 strb r3,[r7,#63]
 7689              	.L470:
4310:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID == 2	/* Also current drive is changed at Unix style volume ID */
4311:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
4312:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = FF_VOLUMES - 1; i && fs != FatFs[i]; i--) ;	/* Set current drive */
4313:../Dave/Generated/FATFS/ff_Src/ff.c **** 			CurrVol = (BYTE)i;
4314:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4315:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4316:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4317:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4318:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7690              	 .loc 1 4318 0 is_stmt 1
 7691 008c 97F83F30 	 ldrb r3,[r7,#63]
4319:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7692              	 .loc 1 4319 0
 7693 0090 1846     	 mov r0,r3
 7694 0092 4437     	 adds r7,r7,#68
 7695              	.LCFI260:
 7696              	 .cfi_def_cfa_offset 12
 7697 0094 BD46     	 mov sp,r7
 7698              	.LCFI261:
 7699              	 .cfi_def_cfa_register 13
 7700              	 
 7701 0096 90BD     	 pop {r4,r7,pc}
 7702              	 .cfi_endproc
 7703              	.LFE48:
 7705              	 .section .text.f_getcwd,"ax",%progbits
 7706              	 .align 2
 7707              	 .global f_getcwd
 7708              	 .thumb
 7709              	 .thumb_func
 7711              	f_getcwd:
 7712              	.LFB49:
4320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4321:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4322:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH >= 2
4323:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getcwd (
4324:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the directory path */
4325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len		/* Size of buff in unit of TCHAR */
4326:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4327:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 7713              	 .loc 1 4327 0
 7714              	 .cfi_startproc
 7715              	 
 7716              	 
 7717 0000 80B5     	 push {r7,lr}
 7718              	.LCFI262:
 7719              	 .cfi_def_cfa_offset 8
 7720              	 .cfi_offset 7,-8
 7721              	 .cfi_offset 14,-4
 7722 0002 9AB0     	 sub sp,sp,#104
 7723              	.LCFI263:
 7724              	 .cfi_def_cfa_offset 112
 7725 0004 00AF     	 add r7,sp,#0
 7726              	.LCFI264:
 7727              	 .cfi_def_cfa_register 7
 7728 0006 7860     	 str r0,[r7,#4]
 7729 0008 3960     	 str r1,[r7]
4328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4331:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, n;
4332:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ccl;
4333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *tp = buff;
 7730              	 .loc 1 4333 0
 7731 000a 7B68     	 ldr r3,[r7,#4]
 7732 000c BB65     	 str r3,[r7,#88]
4334:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2
4335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT vl;
4336:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID
4337:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const char *vp;
4338:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4339:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4340:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO fno;
4341:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4342:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4343:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4344:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4345:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buff[0] = 0;	/* Set null string to get current volume */
 7733              	 .loc 1 4345 0
 7734 000e 7B68     	 ldr r3,[r7,#4]
 7735 0010 0022     	 movs r2,#0
 7736 0012 1A70     	 strb r2,[r3]
4346:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume((const TCHAR**)&buff, &fs, 0);	/* Get current volume */
 7737              	 .loc 1 4346 0
 7738 0014 3A1D     	 adds r2,r7,#4
 7739 0016 07F12003 	 add r3,r7,#32
 7740 001a 1046     	 mov r0,r2
 7741 001c 1946     	 mov r1,r3
 7742 001e 0022     	 movs r2,#0
 7743 0020 FFF7FEFF 	 bl mount_volume
 7744 0024 0346     	 mov r3,r0
 7745 0026 87F86730 	 strb r3,[r7,#103]
4347:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 7746              	 .loc 1 4347 0
 7747 002a 97F86730 	 ldrb r3,[r7,#103]
 7748 002e 002B     	 cmp r3,#0
 7749 0030 40F0CD80 	 bne .L476
4348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 7750              	 .loc 1 4348 0
 7751 0034 3B6A     	 ldr r3,[r7,#32]
 7752 0036 7B62     	 str r3,[r7,#36]
4349:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4350:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4351:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Follow parent directories and create the path */
4352:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = len;			/* Bottom of buffer (directory stack base) */
 7753              	 .loc 1 4352 0
 7754 0038 3B68     	 ldr r3,[r7]
 7755 003a 3B66     	 str r3,[r7,#96]
4353:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* (Cannot do getcwd on exFAT and returns root pat
4354:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dj.obj.sclust = fs->cdir;				/* Start to follow upper directory from current directory */
 7756              	 .loc 1 4354 0
 7757 003c 3B6A     	 ldr r3,[r7,#32]
 7758 003e 5B69     	 ldr r3,[r3,#20]
 7759 0040 FB62     	 str r3,[r7,#44]
4355:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while ((ccl = dj.obj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 7760              	 .loc 1 4355 0
 7761 0042 9CE0     	 b .L477
 7762              	.L492:
4356:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 7763              	 .loc 1 4356 0
 7764 0044 07F12403 	 add r3,r7,#36
 7765 0048 1846     	 mov r0,r3
 7766 004a 2021     	 movs r1,#32
 7767 004c FFF7FEFF 	 bl dir_sdi
 7768 0050 0346     	 mov r3,r0
 7769 0052 87F86730 	 strb r3,[r7,#103]
4357:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7770              	 .loc 1 4357 0
 7771 0056 97F86730 	 ldrb r3,[r7,#103]
 7772 005a 002B     	 cmp r3,#0
 7773 005c 00D0     	 beq .L478
 7774 005e 94E0     	 b .L479
 7775              	.L478:
4358:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = move_window(fs, dj.sect);
 7776              	 .loc 1 4358 0
 7777 0060 3A6A     	 ldr r2,[r7,#32]
 7778 0062 3B6C     	 ldr r3,[r7,#64]
 7779 0064 1046     	 mov r0,r2
 7780 0066 1946     	 mov r1,r3
 7781 0068 FFF7FEFF 	 bl move_window
 7782 006c 0346     	 mov r3,r0
 7783 006e 87F86730 	 strb r3,[r7,#103]
4359:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7784              	 .loc 1 4359 0
 7785 0072 97F86730 	 ldrb r3,[r7,#103]
 7786 0076 002B     	 cmp r3,#0
 7787 0078 00D0     	 beq .L480
 7788 007a 86E0     	 b .L479
 7789              	.L480:
4360:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.obj.sclust = ld_clust(fs, dj.dir);	/* Goto parent directory */
 7790              	 .loc 1 4360 0
 7791 007c 3A6A     	 ldr r2,[r7,#32]
 7792 007e 7B6C     	 ldr r3,[r7,#68]
 7793 0080 1046     	 mov r0,r2
 7794 0082 1946     	 mov r1,r3
 7795 0084 FFF7FEFF 	 bl ld_clust
 7796 0088 0346     	 mov r3,r0
 7797 008a FB62     	 str r3,[r7,#44]
4361:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 0);
 7798              	 .loc 1 4361 0
 7799 008c 07F12403 	 add r3,r7,#36
 7800 0090 1846     	 mov r0,r3
 7801 0092 0021     	 movs r1,#0
 7802 0094 FFF7FEFF 	 bl dir_sdi
 7803 0098 0346     	 mov r3,r0
 7804 009a 87F86730 	 strb r3,[r7,#103]
4362:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7805              	 .loc 1 4362 0
 7806 009e 97F86730 	 ldrb r3,[r7,#103]
 7807 00a2 002B     	 cmp r3,#0
 7808 00a4 00D0     	 beq .L481
 7809 00a6 70E0     	 b .L479
 7810              	.L481:
4363:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {							/* Find the entry links to the child directory */
4364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = DIR_READ_FILE(&dj);
 7811              	 .loc 1 4364 0
 7812 00a8 07F12403 	 add r3,r7,#36
 7813 00ac 1846     	 mov r0,r3
 7814 00ae 0021     	 movs r1,#0
 7815 00b0 FFF7FEFF 	 bl dir_read
 7816 00b4 0346     	 mov r3,r0
 7817 00b6 87F86730 	 strb r3,[r7,#103]
4365:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
 7818              	 .loc 1 4365 0
 7819 00ba 97F86730 	 ldrb r3,[r7,#103]
 7820 00be 002B     	 cmp r3,#0
 7821 00c0 00D0     	 beq .L482
 7822 00c2 17E0     	 b .L483
 7823              	.L482:
4366:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ccl == ld_clust(fs, dj.dir)) break;	/* Found the entry */
 7824              	 .loc 1 4366 0
 7825 00c4 3A6A     	 ldr r2,[r7,#32]
 7826 00c6 7B6C     	 ldr r3,[r7,#68]
 7827 00c8 1046     	 mov r0,r2
 7828 00ca 1946     	 mov r1,r3
 7829 00cc FFF7FEFF 	 bl ld_clust
 7830 00d0 0246     	 mov r2,r0
 7831 00d2 7B6D     	 ldr r3,[r7,#84]
 7832 00d4 9A42     	 cmp r2,r3
 7833 00d6 00D1     	 bne .L484
 7834 00d8 0CE0     	 b .L483
 7835              	.L484:
4367:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_next(&dj, 0);
 7836              	 .loc 1 4367 0
 7837 00da 07F12403 	 add r3,r7,#36
 7838 00de 1846     	 mov r0,r3
 7839 00e0 0021     	 movs r1,#0
 7840 00e2 FFF7FEFF 	 bl dir_next
 7841 00e6 0346     	 mov r3,r0
 7842 00e8 87F86730 	 strb r3,[r7,#103]
4368:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (res == FR_OK);
 7843              	 .loc 1 4368 0
 7844 00ec 97F86730 	 ldrb r3,[r7,#103]
 7845 00f0 002B     	 cmp r3,#0
 7846 00f2 D9D0     	 beq .L481
 7847              	.L483:
4369:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 7848              	 .loc 1 4369 0
 7849 00f4 97F86730 	 ldrb r3,[r7,#103]
 7850 00f8 042B     	 cmp r3,#4
 7851 00fa 02D1     	 bne .L485
 7852              	 .loc 1 4369 0 is_stmt 0 discriminator 1
 7853 00fc 0223     	 movs r3,#2
 7854 00fe 87F86730 	 strb r3,[r7,#103]
 7855              	.L485:
4370:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res != FR_OK) break;
 7856              	 .loc 1 4370 0 is_stmt 1
 7857 0102 97F86730 	 ldrb r3,[r7,#103]
 7858 0106 002B     	 cmp r3,#0
 7859 0108 00D0     	 beq .L486
 7860 010a 3EE0     	 b .L479
 7861              	.L486:
4371:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 7862              	 .loc 1 4371 0
 7863 010c 07F12402 	 add r2,r7,#36
 7864 0110 07F10803 	 add r3,r7,#8
 7865 0114 1046     	 mov r0,r2
 7866 0116 1946     	 mov r1,r3
 7867 0118 FFF7FEFF 	 bl get_fileinfo
4372:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (n = 0; fno.fname[n]; n++) ;	/* Name length */
 7868              	 .loc 1 4372 0
 7869 011c 0023     	 movs r3,#0
 7870 011e FB65     	 str r3,[r7,#92]
 7871 0120 02E0     	 b .L487
 7872              	.L488:
 7873              	 .loc 1 4372 0 is_stmt 0 discriminator 3
 7874 0122 FB6D     	 ldr r3,[r7,#92]
 7875 0124 0133     	 adds r3,r3,#1
 7876 0126 FB65     	 str r3,[r7,#92]
 7877              	.L487:
 7878              	 .loc 1 4372 0 discriminator 1
 7879 0128 07F11002 	 add r2,r7,#16
 7880 012c FB6D     	 ldr r3,[r7,#92]
 7881 012e 1344     	 add r3,r3,r2
 7882 0130 5B78     	 ldrb r3,[r3,#1]
 7883 0132 002B     	 cmp r3,#0
 7884 0134 F5D1     	 bne .L488
4373:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i < n + 1) {	/* Insufficient space to store the path name? */
 7885              	 .loc 1 4373 0 is_stmt 1
 7886 0136 FB6D     	 ldr r3,[r7,#92]
 7887 0138 5A1C     	 adds r2,r3,#1
 7888 013a 3B6E     	 ldr r3,[r7,#96]
 7889 013c 9A42     	 cmp r2,r3
 7890 013e 03D9     	 bls .L489
4374:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NOT_ENOUGH_CORE; break;
 7891              	 .loc 1 4374 0
 7892 0140 1123     	 movs r3,#17
 7893 0142 87F86730 	 strb r3,[r7,#103]
 7894 0146 20E0     	 b .L479
 7895              	.L489:
4375:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4376:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (n) buff[--i] = fno.fname[--n];	/* Stack the name */
 7896              	 .loc 1 4376 0
 7897 0148 0EE0     	 b .L490
 7898              	.L491:
 7899              	 .loc 1 4376 0 is_stmt 0 discriminator 2
 7900 014a 7A68     	 ldr r2,[r7,#4]
 7901 014c 3B6E     	 ldr r3,[r7,#96]
 7902 014e 013B     	 subs r3,r3,#1
 7903 0150 3B66     	 str r3,[r7,#96]
 7904 0152 3B6E     	 ldr r3,[r7,#96]
 7905 0154 1344     	 add r3,r3,r2
 7906 0156 FA6D     	 ldr r2,[r7,#92]
 7907 0158 013A     	 subs r2,r2,#1
 7908 015a FA65     	 str r2,[r7,#92]
 7909 015c 07F11001 	 add r1,r7,#16
 7910 0160 FA6D     	 ldr r2,[r7,#92]
 7911 0162 0A44     	 add r2,r2,r1
 7912 0164 5278     	 ldrb r2,[r2,#1]
 7913 0166 1A70     	 strb r2,[r3]
 7914              	.L490:
 7915              	 .loc 1 4376 0 discriminator 1
 7916 0168 FB6D     	 ldr r3,[r7,#92]
 7917 016a 002B     	 cmp r3,#0
 7918 016c EDD1     	 bne .L491
4377:../Dave/Generated/FATFS/ff_Src/ff.c **** 				buff[--i] = '/';
 7919              	 .loc 1 4377 0 is_stmt 1
 7920 016e 7A68     	 ldr r2,[r7,#4]
 7921 0170 3B6E     	 ldr r3,[r7,#96]
 7922 0172 013B     	 subs r3,r3,#1
 7923 0174 3B66     	 str r3,[r7,#96]
 7924 0176 3B6E     	 ldr r3,[r7,#96]
 7925 0178 1344     	 add r3,r3,r2
 7926 017a 2F22     	 movs r2,#47
 7927 017c 1A70     	 strb r2,[r3]
 7928              	.L477:
4355:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(&dj, 1 * SZDIRE);	/* Get parent directory */
 7929              	 .loc 1 4355 0
 7930 017e FB6A     	 ldr r3,[r7,#44]
 7931 0180 7B65     	 str r3,[r7,#84]
 7932 0182 7B6D     	 ldr r3,[r7,#84]
 7933 0184 002B     	 cmp r3,#0
 7934 0186 7FF45DAF 	 bne .L492
 7935              	.L479:
4378:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4379:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4380:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 7936              	 .loc 1 4380 0
 7937 018a 97F86730 	 ldrb r3,[r7,#103]
 7938 018e 002B     	 cmp r3,#0
 7939 0190 1DD1     	 bne .L476
4381:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i == len) buff[--i] = '/';	/* Is it the root-directory? */
 7940              	 .loc 1 4381 0
 7941 0192 3A6E     	 ldr r2,[r7,#96]
 7942 0194 3B68     	 ldr r3,[r7]
 7943 0196 9A42     	 cmp r2,r3
 7944 0198 07D1     	 bne .L493
 7945              	 .loc 1 4381 0 is_stmt 0 discriminator 1
 7946 019a 7A68     	 ldr r2,[r7,#4]
 7947 019c 3B6E     	 ldr r3,[r7,#96]
 7948 019e 013B     	 subs r3,r3,#1
 7949 01a0 3B66     	 str r3,[r7,#96]
 7950 01a2 3B6E     	 ldr r3,[r7,#96]
 7951 01a4 1344     	 add r3,r3,r2
 7952 01a6 2F22     	 movs r2,#47
 7953 01a8 1A70     	 strb r2,[r3]
 7954              	.L493:
4382:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_VOLUMES >= 2			/* Put drive prefix */
4383:../Dave/Generated/FATFS/ff_Src/ff.c **** 			vl = 0;
4384:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STR_VOLUME_ID >= 1	/* String volume ID */
4385:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (n = 0, vp = (const char*)VolumeStr[CurrVol]; vp[n]; n++) ;
4386:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= n + 2) {
4387:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 2) *tp++ = (TCHAR)'/';
4388:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (vl = 0; vl < n; *tp++ = (TCHAR)vp[vl], vl++) ;
4389:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (FF_STR_VOLUME_ID == 1) *tp++ = (TCHAR)':';
4390:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl++;
4391:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4392:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Numeric volume ID */
4393:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (i >= 3) {
4394:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)'0' + CurrVol;
4395:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tp++ = (TCHAR)':';
4396:../Dave/Generated/FATFS/ff_Src/ff.c **** 				vl = 2;
4397:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4398:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4399:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (vl == 0) res = FR_NOT_ENOUGH_CORE;
4400:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4401:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Add current directory path */
4402:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 7955              	 .loc 1 4402 0 is_stmt 1
 7956 01aa 97F86730 	 ldrb r3,[r7,#103]
 7957 01ae 002B     	 cmp r3,#0
 7958 01b0 0DD1     	 bne .L476
 7959              	.L494:
4403:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do *tp++ = buff[i++]; while (i < len);	/* Copy stacked path string */
 7960              	 .loc 1 4403 0 discriminator 1
 7961 01b2 BB6D     	 ldr r3,[r7,#88]
 7962 01b4 5A1C     	 adds r2,r3,#1
 7963 01b6 BA65     	 str r2,[r7,#88]
 7964 01b8 7968     	 ldr r1,[r7,#4]
 7965 01ba 3A6E     	 ldr r2,[r7,#96]
 7966 01bc 501C     	 adds r0,r2,#1
 7967 01be 3866     	 str r0,[r7,#96]
 7968 01c0 0A44     	 add r2,r2,r1
 7969 01c2 1278     	 ldrb r2,[r2]
 7970 01c4 1A70     	 strb r2,[r3]
 7971 01c6 3A6E     	 ldr r2,[r7,#96]
 7972 01c8 3B68     	 ldr r3,[r7]
 7973 01ca 9A42     	 cmp r2,r3
 7974 01cc F1D3     	 bcc .L494
 7975              	.L476:
4404:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4405:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4406:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4407:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4408:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4409:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*tp = 0;
 7976              	 .loc 1 4409 0
 7977 01ce BB6D     	 ldr r3,[r7,#88]
 7978 01d0 0022     	 movs r2,#0
 7979 01d2 1A70     	 strb r2,[r3]
4410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 7980              	 .loc 1 4410 0
 7981 01d4 97F86730 	 ldrb r3,[r7,#103]
4411:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 7982              	 .loc 1 4411 0
 7983 01d8 1846     	 mov r0,r3
 7984 01da 6837     	 adds r7,r7,#104
 7985              	.LCFI265:
 7986              	 .cfi_def_cfa_offset 8
 7987 01dc BD46     	 mov sp,r7
 7988              	.LCFI266:
 7989              	 .cfi_def_cfa_register 13
 7990              	 
 7991 01de 80BD     	 pop {r7,pc}
 7992              	 .cfi_endproc
 7993              	.LFE49:
 7995              	 .section .text.f_lseek,"ax",%progbits
 7996              	 .align 2
 7997              	 .global f_lseek
 7998              	 .thumb
 7999              	 .thumb_func
 8001              	f_lseek:
 8002              	.LFB50:
4412:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4413:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 2 */
4414:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_RPATH >= 1 */
4415:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4416:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4417:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4418:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 2
4419:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4420:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Seek File Read/Write Pointer                                          */
4421:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4422:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4423:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_lseek (
4424:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
4425:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ofs		/* File pointer from top of file */
4426:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4427:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8003              	 .loc 1 4427 0
 8004              	 .cfi_startproc
 8005              	 
 8006              	 
 8007 0000 80B5     	 push {r7,lr}
 8008              	.LCFI267:
 8009              	 .cfi_def_cfa_offset 8
 8010              	 .cfi_offset 7,-8
 8011              	 .cfi_offset 14,-4
 8012 0002 88B0     	 sub sp,sp,#32
 8013              	.LCFI268:
 8014              	 .cfi_def_cfa_offset 40
 8015 0004 00AF     	 add r7,sp,#0
 8016              	.LCFI269:
 8017              	 .cfi_def_cfa_register 7
 8018 0006 7860     	 str r0,[r7,#4]
 8019 0008 3960     	 str r1,[r7]
4428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4430:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst, bcs;
4431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t nsect;
4432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t ifptr;
4433:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD cl, pcl, ncl, tcl, tlen, ulen, *tbl;
4435:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t dsc;
4436:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4437:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4438:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8020              	 .loc 1 4438 0
 8021 000a 7A68     	 ldr r2,[r7,#4]
 8022 000c 07F10803 	 add r3,r7,#8
 8023 0010 1046     	 mov r0,r2
 8024 0012 1946     	 mov r1,r3
 8025 0014 FFF7FEFF 	 bl validate
 8026 0018 0346     	 mov r3,r0
 8027 001a FB77     	 strb r3,[r7,#31]
4439:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) res = (FRESULT)fp->err;
 8028              	 .loc 1 4439 0
 8029 001c FB7F     	 ldrb r3,[r7,#31]
 8030 001e 002B     	 cmp r3,#0
 8031 0020 02D1     	 bne .L497
 8032              	 .loc 1 4439 0 is_stmt 0 discriminator 1
 8033 0022 7B68     	 ldr r3,[r7,#4]
 8034 0024 5B7D     	 ldrb r3,[r3,#21]
 8035 0026 FB77     	 strb r3,[r7,#31]
 8036              	.L497:
4440:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT && !FF_FS_READONLY
4441:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
4442:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed
4443:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4444:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4445:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
 8037              	 .loc 1 4445 0 is_stmt 1
 8038 0028 FB7F     	 ldrb r3,[r7,#31]
 8039 002a 002B     	 cmp r3,#0
 8040 002c 01D0     	 beq .L498
 8041              	 .loc 1 4445 0 is_stmt 0 discriminator 1
 8042 002e FB7F     	 ldrb r3,[r7,#31]
 8043 0030 14E1     	 b .L521
 8044              	.L498:
4446:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4447:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FASTSEEK
4448:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->cltbl) {	/* Fast seek */
4449:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
4450:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tbl = fp->cltbl;
4451:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
4452:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cl = fp->obj.sclust;		/* Origin of the chain */
4453:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (cl != 0) {
4454:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4455:../Dave/Generated/FATFS/ff_Src/ff.c **** 					/* Get a fragment */
4456:../Dave/Generated/FATFS/ff_Src/ff.c **** 					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
4457:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {
4458:../Dave/Generated/FATFS/ff_Src/ff.c **** 						pcl = cl; ncl++;
4459:../Dave/Generated/FATFS/ff_Src/ff.c **** 						cl = get_fat(&fp->obj, cl);
4460:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl <= 1) ABORT(fs, FR_INT_ERR);
4461:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
4462:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (cl == pcl + 1);
4463:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (ulen <= tlen) {		/* Store the length and top of the fragment */
4464:../Dave/Generated/FATFS/ff_Src/ff.c **** 						*tbl++ = ncl; *tbl++ = tcl;
4465:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4466:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
4467:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*fp->cltbl = ulen;	/* Number of items used */
4469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ulen <= tlen) {
4470:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*tbl = 0;		/* Terminate table */
4471:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4472:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
4473:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4474:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {						/* Fast seek */
4475:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
4476:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->fptr = ofs;				/* Set file pointer */
4477:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ofs > 0) {
4478:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clmt_clust(fp, ofs - 1);
4479:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc = clst2sect(fs, fp->clust);
4480:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dsc == 0) ABORT(fs, FR_INT_ERR);
4481:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
4482:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
4483:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4484:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4485:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
4486:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
4487:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fp->flag &= (BYTE)~FA_DIRTY;
4488:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4489:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4490:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (disk_read(fs->pdrv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current se
4491:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4492:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->sect = dsc;
4493:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4494:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4496:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
4497:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4498:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4499:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Normal Seek */
4500:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
4501:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4 GiB - 1 if at F
4503:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4504:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > fp->obj.objsize && (FF_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, 
 8045              	 .loc 1 4504 0 is_stmt 1
 8046 0032 7B68     	 ldr r3,[r7,#4]
 8047 0034 DA68     	 ldr r2,[r3,#12]
 8048 0036 3B68     	 ldr r3,[r7]
 8049 0038 9A42     	 cmp r2,r3
 8050 003a 08D2     	 bcs .L500
 8051              	 .loc 1 4504 0 is_stmt 0 discriminator 1
 8052 003c 7B68     	 ldr r3,[r7,#4]
 8053 003e 1B7D     	 ldrb r3,[r3,#20]
 8054 0040 03F00203 	 and r3,r3,#2
 8055 0044 002B     	 cmp r3,#0
 8056 0046 02D1     	 bne .L500
4505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs = fp->obj.objsize;
 8057              	 .loc 1 4505 0 is_stmt 1
 8058 0048 7B68     	 ldr r3,[r7,#4]
 8059 004a DB68     	 ldr r3,[r3,#12]
 8060 004c 3B60     	 str r3,[r7]
 8061              	.L500:
4506:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4507:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ifptr = fp->fptr;
 8062              	 .loc 1 4507 0
 8063 004e 7B68     	 ldr r3,[r7,#4]
 8064 0050 9B69     	 ldr r3,[r3,#24]
 8065 0052 3B61     	 str r3,[r7,#16]
4508:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr = nsect = 0;
 8066              	 .loc 1 4508 0
 8067 0054 0023     	 movs r3,#0
 8068 0056 7B61     	 str r3,[r7,#20]
 8069 0058 7B68     	 ldr r3,[r7,#4]
 8070 005a 7A69     	 ldr r2,[r7,#20]
 8071 005c 9A61     	 str r2,[r3,#24]
4509:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ofs > 0) {
 8072              	 .loc 1 4509 0
 8073 005e 3B68     	 ldr r3,[r7]
 8074 0060 002B     	 cmp r3,#0
 8075 0062 00F0A780 	 beq .L501
4510:../Dave/Generated/FATFS/ff_Src/ff.c **** 			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8076              	 .loc 1 4510 0
 8077 0066 BB68     	 ldr r3,[r7,#8]
 8078 0068 5B89     	 ldrh r3,[r3,#10]
 8079 006a 5B02     	 lsls r3,r3,#9
 8080 006c FB60     	 str r3,[r7,#12]
4511:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 8081              	 .loc 1 4511 0
 8082 006e 3B69     	 ldr r3,[r7,#16]
 8083 0070 002B     	 cmp r3,#0
 8084 0072 1BD0     	 beq .L502
4512:../Dave/Generated/FATFS/ff_Src/ff.c **** 				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8085              	 .loc 1 4512 0 discriminator 1
 8086 0074 3B68     	 ldr r3,[r7]
 8087 0076 5A1E     	 subs r2,r3,#1
 8088 0078 FB68     	 ldr r3,[r7,#12]
 8089 007a B2FBF3F2 	 udiv r2,r2,r3
 8090 007e 3B69     	 ldr r3,[r7,#16]
 8091 0080 591E     	 subs r1,r3,#1
 8092 0082 FB68     	 ldr r3,[r7,#12]
 8093 0084 B1FBF3F3 	 udiv r3,r1,r3
4511:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ifptr > 0 &&
 8094              	 .loc 1 4511 0 discriminator 1
 8095 0088 9A42     	 cmp r2,r3
 8096 008a 0FD3     	 bcc .L502
4513:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8097              	 .loc 1 4513 0
 8098 008c 3B69     	 ldr r3,[r7,#16]
 8099 008e 5A1E     	 subs r2,r3,#1
 8100 0090 FB68     	 ldr r3,[r7,#12]
 8101 0092 5B42     	 negs r3,r3
 8102 0094 1A40     	 ands r2,r2,r3
 8103 0096 7B68     	 ldr r3,[r7,#4]
 8104 0098 9A61     	 str r2,[r3,#24]
4514:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ofs -= fp->fptr;
 8105              	 .loc 1 4514 0
 8106 009a 7B68     	 ldr r3,[r7,#4]
 8107 009c 9B69     	 ldr r3,[r3,#24]
 8108 009e 3A68     	 ldr r2,[r7]
 8109 00a0 D31A     	 subs r3,r2,r3
 8110 00a2 3B60     	 str r3,[r7]
4515:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->clust;
 8111              	 .loc 1 4515 0
 8112 00a4 7B68     	 ldr r3,[r7,#4]
 8113 00a6 DB69     	 ldr r3,[r3,#28]
 8114 00a8 BB61     	 str r3,[r7,#24]
 8115 00aa 22E0     	 b .L503
 8116              	.L502:
4516:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {									/* When seek to back cluster, */
4517:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = fp->obj.sclust;					/* start from the first cluster */
 8117              	 .loc 1 4517 0
 8118 00ac 7B68     	 ldr r3,[r7,#4]
 8119 00ae 9B68     	 ldr r3,[r3,#8]
 8120 00b0 BB61     	 str r3,[r7,#24]
4518:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4519:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8121              	 .loc 1 4519 0
 8122 00b2 BB69     	 ldr r3,[r7,#24]
 8123 00b4 002B     	 cmp r3,#0
 8124 00b6 19D1     	 bne .L504
4520:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = create_chain(&fp->obj, 0);
 8125              	 .loc 1 4520 0
 8126 00b8 7B68     	 ldr r3,[r7,#4]
 8127 00ba 1846     	 mov r0,r3
 8128 00bc 0021     	 movs r1,#0
 8129 00be FFF7FEFF 	 bl create_chain
 8130 00c2 B861     	 str r0,[r7,#24]
4521:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8131              	 .loc 1 4521 0
 8132 00c4 BB69     	 ldr r3,[r7,#24]
 8133 00c6 012B     	 cmp r3,#1
 8134 00c8 04D1     	 bne .L505
 8135              	 .loc 1 4521 0 is_stmt 0 discriminator 1
 8136 00ca 7B68     	 ldr r3,[r7,#4]
 8137 00cc 0222     	 movs r2,#2
 8138 00ce 5A75     	 strb r2,[r3,#21]
 8139 00d0 0223     	 movs r3,#2
 8140 00d2 C3E0     	 b .L521
 8141              	.L505:
4522:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8142              	 .loc 1 4522 0 is_stmt 1
 8143 00d4 BB69     	 ldr r3,[r7,#24]
 8144 00d6 B3F1FF3F 	 cmp r3,#-1
 8145 00da 04D1     	 bne .L506
 8146              	 .loc 1 4522 0 is_stmt 0 discriminator 1
 8147 00dc 7B68     	 ldr r3,[r7,#4]
 8148 00de 0122     	 movs r2,#1
 8149 00e0 5A75     	 strb r2,[r3,#21]
 8150 00e2 0123     	 movs r3,#1
 8151 00e4 BAE0     	 b .L521
 8152              	.L506:
4523:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust = clst;
 8153              	 .loc 1 4523 0 is_stmt 1
 8154 00e6 7B68     	 ldr r3,[r7,#4]
 8155 00e8 BA69     	 ldr r2,[r7,#24]
 8156 00ea 9A60     	 str r2,[r3,#8]
 8157              	.L504:
4524:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4525:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4526:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;
 8158              	 .loc 1 4526 0
 8159 00ec 7B68     	 ldr r3,[r7,#4]
 8160 00ee BA69     	 ldr r2,[r7,#24]
 8161 00f0 DA61     	 str r2,[r3,#28]
 8162              	.L503:
4527:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4528:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst != 0) {
 8163              	 .loc 1 4528 0
 8164 00f2 BB69     	 ldr r3,[r7,#24]
 8165 00f4 002B     	 cmp r3,#0
 8166 00f6 5DD0     	 beq .L501
4529:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (ofs > bcs) {						/* Cluster following loop */
 8167              	 .loc 1 4529 0
 8168 00f8 3AE0     	 b .L507
 8169              	.L514:
4530:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8170              	 .loc 1 4530 0
 8171 00fa 3A68     	 ldr r2,[r7]
 8172 00fc FB68     	 ldr r3,[r7,#12]
 8173 00fe D31A     	 subs r3,r2,r3
 8174 0100 3B60     	 str r3,[r7]
 8175 0102 7B68     	 ldr r3,[r7,#4]
 8176 0104 9A69     	 ldr r2,[r3,#24]
 8177 0106 FB68     	 ldr r3,[r7,#12]
 8178 0108 1A44     	 add r2,r2,r3
 8179 010a 7B68     	 ldr r3,[r7,#4]
 8180 010c 9A61     	 str r2,[r3,#24]
4531:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4532:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8181              	 .loc 1 4532 0
 8182 010e 7B68     	 ldr r3,[r7,#4]
 8183 0110 1B7D     	 ldrb r3,[r3,#20]
 8184 0112 03F00203 	 and r3,r3,#2
 8185 0116 002B     	 cmp r3,#0
 8186 0118 0BD0     	 beq .L508
4533:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize
4534:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->obj.objsize = fp->fptr;
4535:../Dave/Generated/FATFS/ff_Src/ff.c **** 							fp->flag |= FA_MODIFIED;
4536:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4537:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8187              	 .loc 1 4537 0
 8188 011a 7B68     	 ldr r3,[r7,#4]
 8189 011c 1846     	 mov r0,r3
 8190 011e B969     	 ldr r1,[r7,#24]
 8191 0120 FFF7FEFF 	 bl create_chain
 8192 0124 B861     	 str r0,[r7,#24]
4538:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (clst == 0) {				/* Clip file size in case of disk full */
 8193              	 .loc 1 4538 0
 8194 0126 BB69     	 ldr r3,[r7,#24]
 8195 0128 002B     	 cmp r3,#0
 8196 012a 08D1     	 bne .L509
4539:../Dave/Generated/FATFS/ff_Src/ff.c **** 							ofs = 0; break;
 8197              	 .loc 1 4539 0
 8198 012c 0023     	 movs r3,#0
 8199 012e 3B60     	 str r3,[r7]
 8200 0130 22E0     	 b .L510
 8201              	.L508:
4540:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4541:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4542:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4543:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4544:../Dave/Generated/FATFS/ff_Src/ff.c **** 						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8202              	 .loc 1 4544 0
 8203 0132 7B68     	 ldr r3,[r7,#4]
 8204 0134 1846     	 mov r0,r3
 8205 0136 B969     	 ldr r1,[r7,#24]
 8206 0138 FFF7FEFF 	 bl get_fat
 8207 013c B861     	 str r0,[r7,#24]
 8208              	.L509:
4545:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4546:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8209              	 .loc 1 4546 0
 8210 013e BB69     	 ldr r3,[r7,#24]
 8211 0140 B3F1FF3F 	 cmp r3,#-1
 8212 0144 04D1     	 bne .L511
 8213              	 .loc 1 4546 0 is_stmt 0 discriminator 1
 8214 0146 7B68     	 ldr r3,[r7,#4]
 8215 0148 0122     	 movs r2,#1
 8216 014a 5A75     	 strb r2,[r3,#21]
 8217 014c 0123     	 movs r3,#1
 8218 014e 85E0     	 b .L521
 8219              	.L511:
4547:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8220              	 .loc 1 4547 0 is_stmt 1
 8221 0150 BB69     	 ldr r3,[r7,#24]
 8222 0152 012B     	 cmp r3,#1
 8223 0154 04D9     	 bls .L512
 8224              	 .loc 1 4547 0 is_stmt 0 discriminator 2
 8225 0156 BB68     	 ldr r3,[r7,#8]
 8226 0158 9A69     	 ldr r2,[r3,#24]
 8227 015a BB69     	 ldr r3,[r7,#24]
 8228 015c 9A42     	 cmp r2,r3
 8229 015e 04D8     	 bhi .L513
 8230              	.L512:
 8231              	 .loc 1 4547 0 discriminator 3
 8232 0160 7B68     	 ldr r3,[r7,#4]
 8233 0162 0222     	 movs r2,#2
 8234 0164 5A75     	 strb r2,[r3,#21]
 8235 0166 0223     	 movs r3,#2
 8236 0168 78E0     	 b .L521
 8237              	.L513:
4548:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->clust = clst;
 8238              	 .loc 1 4548 0 is_stmt 1
 8239 016a 7B68     	 ldr r3,[r7,#4]
 8240 016c BA69     	 ldr r2,[r7,#24]
 8241 016e DA61     	 str r2,[r3,#28]
 8242              	.L507:
4529:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ofs -= bcs; fp->fptr += bcs;
 8243              	 .loc 1 4529 0
 8244 0170 3A68     	 ldr r2,[r7]
 8245 0172 FB68     	 ldr r3,[r7,#12]
 8246 0174 9A42     	 cmp r2,r3
 8247 0176 C0D8     	 bhi .L514
 8248              	.L510:
4549:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4550:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->fptr += ofs;
 8249              	 .loc 1 4550 0
 8250 0178 7B68     	 ldr r3,[r7,#4]
 8251 017a 9A69     	 ldr r2,[r3,#24]
 8252 017c 3B68     	 ldr r3,[r7]
 8253 017e 1A44     	 add r2,r2,r3
 8254 0180 7B68     	 ldr r3,[r7,#4]
 8255 0182 9A61     	 str r2,[r3,#24]
4551:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ofs % SS(fs)) {
 8256              	 .loc 1 4551 0
 8257 0184 3B68     	 ldr r3,[r7]
 8258 0186 C3F30803 	 ubfx r3,r3,#0,#9
 8259 018a 002B     	 cmp r3,#0
 8260 018c 12D0     	 beq .L501
4552:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect = clst2sect(fs, clst);	/* Current sector */
 8261              	 .loc 1 4552 0
 8262 018e BB68     	 ldr r3,[r7,#8]
 8263 0190 1846     	 mov r0,r3
 8264 0192 B969     	 ldr r1,[r7,#24]
 8265 0194 FFF7FEFF 	 bl clst2sect
 8266 0198 7861     	 str r0,[r7,#20]
4553:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (nsect == 0) ABORT(fs, FR_INT_ERR);
 8267              	 .loc 1 4553 0
 8268 019a 7B69     	 ldr r3,[r7,#20]
 8269 019c 002B     	 cmp r3,#0
 8270 019e 04D1     	 bne .L515
 8271              	 .loc 1 4553 0 is_stmt 0 discriminator 1
 8272 01a0 7B68     	 ldr r3,[r7,#4]
 8273 01a2 0222     	 movs r2,#2
 8274 01a4 5A75     	 strb r2,[r3,#21]
 8275 01a6 0223     	 movs r3,#2
 8276 01a8 58E0     	 b .L521
 8277              	.L515:
4554:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nsect += (DWORD)(ofs / SS(fs));
 8278              	 .loc 1 4554 0 is_stmt 1
 8279 01aa 3B68     	 ldr r3,[r7]
 8280 01ac 5B0A     	 lsrs r3,r3,#9
 8281 01ae 7A69     	 ldr r2,[r7,#20]
 8282 01b0 1344     	 add r3,r3,r2
 8283 01b2 7B61     	 str r3,[r7,#20]
 8284              	.L501:
4555:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4556:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4557:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4558:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_FS_READONLY && fp->fptr > fp->obj.objsize) {	/* Set file change flag if the file size is 
 8285              	 .loc 1 4558 0
 8286 01b4 7B68     	 ldr r3,[r7,#4]
 8287 01b6 9A69     	 ldr r2,[r3,#24]
 8288 01b8 7B68     	 ldr r3,[r7,#4]
 8289 01ba DB68     	 ldr r3,[r3,#12]
 8290 01bc 9A42     	 cmp r2,r3
 8291 01be 0AD9     	 bls .L516
4559:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fp->fptr;
 8292              	 .loc 1 4559 0
 8293 01c0 7B68     	 ldr r3,[r7,#4]
 8294 01c2 9A69     	 ldr r2,[r3,#24]
 8295 01c4 7B68     	 ldr r3,[r7,#4]
 8296 01c6 DA60     	 str r2,[r3,#12]
4560:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
 8297              	 .loc 1 4560 0
 8298 01c8 7B68     	 ldr r3,[r7,#4]
 8299 01ca 1B7D     	 ldrb r3,[r3,#20]
 8300 01cc 43F04003 	 orr r3,r3,#64
 8301 01d0 DAB2     	 uxtb r2,r3
 8302 01d2 7B68     	 ldr r3,[r7,#4]
 8303 01d4 1A75     	 strb r2,[r3,#20]
 8304              	.L516:
4561:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4562:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8305              	 .loc 1 4562 0
 8306 01d6 7B68     	 ldr r3,[r7,#4]
 8307 01d8 9B69     	 ldr r3,[r3,#24]
 8308 01da C3F30803 	 ubfx r3,r3,#0,#9
 8309 01de 002B     	 cmp r3,#0
 8310 01e0 3BD0     	 beq .L517
 8311              	 .loc 1 4562 0 is_stmt 0 discriminator 1
 8312 01e2 7B68     	 ldr r3,[r7,#4]
 8313 01e4 1A6A     	 ldr r2,[r3,#32]
 8314 01e6 7B69     	 ldr r3,[r7,#20]
 8315 01e8 9A42     	 cmp r2,r3
 8316 01ea 36D0     	 beq .L517
4563:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4564:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4565:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8317              	 .loc 1 4565 0 is_stmt 1
 8318 01ec 7B68     	 ldr r3,[r7,#4]
 8319 01ee 1B7D     	 ldrb r3,[r3,#20]
 8320 01f0 DBB2     	 uxtb r3,r3
 8321 01f2 5BB2     	 sxtb r3,r3
 8322 01f4 002B     	 cmp r3,#0
 8323 01f6 1BDA     	 bge .L518
4566:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8324              	 .loc 1 4566 0
 8325 01f8 BB68     	 ldr r3,[r7,#8]
 8326 01fa 5978     	 ldrb r1,[r3,#1]
 8327 01fc 7B68     	 ldr r3,[r7,#4]
 8328 01fe 03F12C02 	 add r2,r3,#44
 8329 0202 7B68     	 ldr r3,[r7,#4]
 8330 0204 1B6A     	 ldr r3,[r3,#32]
 8331 0206 0846     	 mov r0,r1
 8332 0208 1146     	 mov r1,r2
 8333 020a 1A46     	 mov r2,r3
 8334 020c 0123     	 movs r3,#1
 8335 020e FFF7FEFF 	 bl disk_write
 8336 0212 0346     	 mov r3,r0
 8337 0214 002B     	 cmp r3,#0
 8338 0216 04D0     	 beq .L519
 8339              	 .loc 1 4566 0 is_stmt 0 discriminator 1
 8340 0218 7B68     	 ldr r3,[r7,#4]
 8341 021a 0122     	 movs r2,#1
 8342 021c 5A75     	 strb r2,[r3,#21]
 8343 021e 0123     	 movs r3,#1
 8344 0220 1CE0     	 b .L521
 8345              	.L519:
4567:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 8346              	 .loc 1 4567 0 is_stmt 1
 8347 0222 7B68     	 ldr r3,[r7,#4]
 8348 0224 1B7D     	 ldrb r3,[r3,#20]
 8349 0226 03F07F03 	 and r3,r3,#127
 8350 022a DAB2     	 uxtb r2,r3
 8351 022c 7B68     	 ldr r3,[r7,#4]
 8352 022e 1A75     	 strb r2,[r3,#20]
 8353              	.L518:
4568:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4569:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4570:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cac
 8354              	 .loc 1 4570 0
 8355 0230 BB68     	 ldr r3,[r7,#8]
 8356 0232 5A78     	 ldrb r2,[r3,#1]
 8357 0234 7B68     	 ldr r3,[r7,#4]
 8358 0236 2C33     	 adds r3,r3,#44
 8359 0238 1046     	 mov r0,r2
 8360 023a 1946     	 mov r1,r3
 8361 023c 7A69     	 ldr r2,[r7,#20]
 8362 023e 0123     	 movs r3,#1
 8363 0240 FFF7FEFF 	 bl disk_read
 8364 0244 0346     	 mov r3,r0
 8365 0246 002B     	 cmp r3,#0
 8366 0248 04D0     	 beq .L520
 8367              	 .loc 1 4570 0 is_stmt 0 discriminator 1
 8368 024a 7B68     	 ldr r3,[r7,#4]
 8369 024c 0122     	 movs r2,#1
 8370 024e 5A75     	 strb r2,[r3,#21]
 8371 0250 0123     	 movs r3,#1
 8372 0252 03E0     	 b .L521
 8373              	.L520:
4571:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4572:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->sect = nsect;
 8374              	 .loc 1 4572 0 is_stmt 1
 8375 0254 7B68     	 ldr r3,[r7,#4]
 8376 0256 7A69     	 ldr r2,[r7,#20]
 8377 0258 1A62     	 str r2,[r3,#32]
 8378              	.L517:
4573:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4574:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4575:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4576:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8379              	 .loc 1 4576 0
 8380 025a FB7F     	 ldrb r3,[r7,#31]
 8381              	.L521:
4577:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8382              	 .loc 1 4577 0 discriminator 1
 8383 025c 1846     	 mov r0,r3
 8384 025e 2037     	 adds r7,r7,#32
 8385              	.LCFI270:
 8386              	 .cfi_def_cfa_offset 8
 8387 0260 BD46     	 mov sp,r7
 8388              	.LCFI271:
 8389              	 .cfi_def_cfa_register 13
 8390              	 
 8391 0262 80BD     	 pop {r7,pc}
 8392              	 .cfi_endproc
 8393              	.LFE50:
 8395              	 .section .text.f_opendir,"ax",%progbits
 8396              	 .align 2
 8397              	 .global f_opendir
 8398              	 .thumb
 8399              	 .thumb_func
 8401              	f_opendir:
 8402              	.LFB51:
4578:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4579:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4580:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4581:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE <= 1
4582:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4583:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory Object                                             */
4584:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4585:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4586:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_opendir (
4587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to directory object to create */
4588:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path	/* Pointer to the directory path */
4589:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4590:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8403              	 .loc 1 4590 0
 8404              	 .cfi_startproc
 8405              	 
 8406              	 
 8407 0000 80B5     	 push {r7,lr}
 8408              	.LCFI272:
 8409              	 .cfi_def_cfa_offset 8
 8410              	 .cfi_offset 7,-8
 8411              	 .cfi_offset 14,-4
 8412 0002 84B0     	 sub sp,sp,#16
 8413              	.LCFI273:
 8414              	 .cfi_def_cfa_offset 24
 8415 0004 00AF     	 add r7,sp,#0
 8416              	.LCFI274:
 8417              	 .cfi_def_cfa_register 7
 8418 0006 7860     	 str r0,[r7,#4]
 8419 0008 3960     	 str r1,[r7]
4591:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4592:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4594:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4595:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!dp) return FR_INVALID_OBJECT;
 8420              	 .loc 1 4596 0
 8421 000a 7B68     	 ldr r3,[r7,#4]
 8422 000c 002B     	 cmp r3,#0
 8423 000e 01D1     	 bne .L523
 8424              	 .loc 1 4596 0 is_stmt 0 discriminator 1
 8425 0010 0923     	 movs r3,#9
 8426 0012 64E0     	 b .L532
 8427              	.L523:
4597:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4598:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, 0);
 8428              	 .loc 1 4599 0 is_stmt 1
 8429 0014 3A46     	 mov r2,r7
 8430 0016 07F10803 	 add r3,r7,#8
 8431 001a 1046     	 mov r0,r2
 8432 001c 1946     	 mov r1,r3
 8433 001e 0022     	 movs r2,#0
 8434 0020 FFF7FEFF 	 bl mount_volume
 8435 0024 0346     	 mov r3,r0
 8436 0026 FB73     	 strb r3,[r7,#15]
4600:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8437              	 .loc 1 4600 0
 8438 0028 FB7B     	 ldrb r3,[r7,#15]
 8439 002a 002B     	 cmp r3,#0
 8440 002c 50D1     	 bne .L525
4601:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = fs;
 8441              	 .loc 1 4601 0
 8442 002e BA68     	 ldr r2,[r7,#8]
 8443 0030 7B68     	 ldr r3,[r7,#4]
 8444 0032 1A60     	 str r2,[r3]
4602:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4603:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(dp, path);			/* Follow the path to the directory */
 8445              	 .loc 1 4603 0
 8446 0034 3B68     	 ldr r3,[r7]
 8447 0036 7868     	 ldr r0,[r7,#4]
 8448 0038 1946     	 mov r1,r3
 8449 003a FFF7FEFF 	 bl follow_path
 8450 003e 0346     	 mov r3,r0
 8451 0040 FB73     	 strb r3,[r7,#15]
4604:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Follow completed */
 8452              	 .loc 1 4604 0
 8453 0042 FB7B     	 ldrb r3,[r7,#15]
 8454 0044 002B     	 cmp r3,#0
 8455 0046 3ED1     	 bne .L526
4605:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8456              	 .loc 1 4605 0
 8457 0048 7B68     	 ldr r3,[r7,#4]
 8458 004a 93F82F30 	 ldrb r3,[r3,#47]
 8459 004e DBB2     	 uxtb r3,r3
 8460 0050 5BB2     	 sxtb r3,r3
 8461 0052 002B     	 cmp r3,#0
 8462 0054 12DB     	 blt .L527
4606:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dp->obj.attr & AM_DIR) {		/* This object is a sub-directory */
 8463              	 .loc 1 4606 0
 8464 0056 7B68     	 ldr r3,[r7,#4]
 8465 0058 9B79     	 ldrb r3,[r3,#6]
 8466 005a 03F01003 	 and r3,r3,#16
 8467 005e 002B     	 cmp r3,#0
 8468 0060 0AD0     	 beq .L528
4607:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4608:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (fs->fs_type == FS_EXFAT) {
4609:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_scl = dp->obj.sclust;							/* Get containing directory inforamation */
4610:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
4611:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.c_ofs = dp->blk_ofs;
4612:../Dave/Generated/FATFS/ff_Src/ff.c **** 						init_alloc_info(fs, &dp->obj);	/* Get object allocation info */
4613:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4614:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4615:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4616:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8469              	 .loc 1 4616 0
 8470 0062 BA68     	 ldr r2,[r7,#8]
 8471 0064 7B68     	 ldr r3,[r7,#4]
 8472 0066 1B6A     	 ldr r3,[r3,#32]
 8473 0068 1046     	 mov r0,r2
 8474 006a 1946     	 mov r1,r3
 8475 006c FFF7FEFF 	 bl ld_clust
 8476 0070 0246     	 mov r2,r0
 8477 0072 7B68     	 ldr r3,[r7,#4]
 8478 0074 9A60     	 str r2,[r3,#8]
 8479 0076 01E0     	 b .L527
 8480              	.L528:
4617:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4618:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {						/* This object is a file */
4619:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_NO_PATH;
 8481              	 .loc 1 4619 0
 8482 0078 0523     	 movs r3,#5
 8483 007a FB73     	 strb r3,[r7,#15]
 8484              	.L527:
4620:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4621:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4622:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 8485              	 .loc 1 4622 0
 8486 007c FB7B     	 ldrb r3,[r7,#15]
 8487 007e 002B     	 cmp r3,#0
 8488 0080 21D1     	 bne .L526
4623:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dp->obj.id = fs->id;
 8489              	 .loc 1 4623 0
 8490 0082 BB68     	 ldr r3,[r7,#8]
 8491 0084 DA88     	 ldrh r2,[r3,#6]
 8492 0086 7B68     	 ldr r3,[r7,#4]
 8493 0088 9A80     	 strh r2,[r3,#4]
4624:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_sdi(dp, 0);			/* Rewind directory */
 8494              	 .loc 1 4624 0
 8495 008a 7868     	 ldr r0,[r7,#4]
 8496 008c 0021     	 movs r1,#0
 8497 008e FFF7FEFF 	 bl dir_sdi
 8498 0092 0346     	 mov r3,r0
 8499 0094 FB73     	 strb r3,[r7,#15]
4625:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4626:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 8500              	 .loc 1 4626 0
 8501 0096 FB7B     	 ldrb r3,[r7,#15]
 8502 0098 002B     	 cmp r3,#0
 8503 009a 14D1     	 bne .L526
4627:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dp->obj.sclust != 0) {
 8504              	 .loc 1 4627 0
 8505 009c 7B68     	 ldr r3,[r7,#4]
 8506 009e 9B68     	 ldr r3,[r3,#8]
 8507 00a0 002B     	 cmp r3,#0
 8508 00a2 0DD0     	 beq .L529
4628:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8509              	 .loc 1 4628 0
 8510 00a4 7868     	 ldr r0,[r7,#4]
 8511 00a6 0021     	 movs r1,#0
 8512 00a8 FFF7FEFF 	 bl inc_lock
 8513 00ac 0246     	 mov r2,r0
 8514 00ae 7B68     	 ldr r3,[r7,#4]
 8515 00b0 1A61     	 str r2,[r3,#16]
4629:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!dp->obj.lockid) res = FR_TOO_MANY_OPEN_FILES;
 8516              	 .loc 1 4629 0
 8517 00b2 7B68     	 ldr r3,[r7,#4]
 8518 00b4 1B69     	 ldr r3,[r3,#16]
 8519 00b6 002B     	 cmp r3,#0
 8520 00b8 05D1     	 bne .L526
 8521              	 .loc 1 4629 0 is_stmt 0 discriminator 1
 8522 00ba 1223     	 movs r3,#18
 8523 00bc FB73     	 strb r3,[r7,#15]
 8524 00be 02E0     	 b .L526
 8525              	.L529:
4630:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else {
4631:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dp->obj.lockid = 0;	/* Root directory need not to be locked */
 8526              	 .loc 1 4631 0 is_stmt 1
 8527 00c0 7B68     	 ldr r3,[r7,#4]
 8528 00c2 0022     	 movs r2,#0
 8529 00c4 1A61     	 str r2,[r3,#16]
 8530              	.L526:
4632:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
4633:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4634:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4635:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4636:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4637:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4638:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8531              	 .loc 1 4638 0
 8532 00c6 FB7B     	 ldrb r3,[r7,#15]
 8533 00c8 042B     	 cmp r3,#4
 8534 00ca 01D1     	 bne .L525
 8535              	 .loc 1 4638 0 is_stmt 0 discriminator 1
 8536 00cc 0523     	 movs r3,#5
 8537 00ce FB73     	 strb r3,[r7,#15]
 8538              	.L525:
4639:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4640:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) dp->obj.fs = 0;		/* Invalidate the directory object if function faild */
 8539              	 .loc 1 4640 0 is_stmt 1
 8540 00d0 FB7B     	 ldrb r3,[r7,#15]
 8541 00d2 002B     	 cmp r3,#0
 8542 00d4 02D0     	 beq .L531
 8543              	 .loc 1 4640 0 is_stmt 0 discriminator 1
 8544 00d6 7B68     	 ldr r3,[r7,#4]
 8545 00d8 0022     	 movs r2,#0
 8546 00da 1A60     	 str r2,[r3]
 8547              	.L531:
4641:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8548              	 .loc 1 4642 0 is_stmt 1
 8549 00dc FB7B     	 ldrb r3,[r7,#15]
 8550              	.L532:
4643:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8551              	 .loc 1 4643 0 discriminator 1
 8552 00de 1846     	 mov r0,r3
 8553 00e0 1037     	 adds r7,r7,#16
 8554              	.LCFI275:
 8555              	 .cfi_def_cfa_offset 8
 8556 00e2 BD46     	 mov sp,r7
 8557              	.LCFI276:
 8558              	 .cfi_def_cfa_register 13
 8559              	 
 8560 00e4 80BD     	 pop {r7,pc}
 8561              	 .cfi_endproc
 8562              	.LFE51:
 8564 00e6 00BF     	 .section .text.f_closedir,"ax",%progbits
 8565              	 .align 2
 8566              	 .global f_closedir
 8567              	 .thumb
 8568              	 .thumb_func
 8570              	f_closedir:
 8571              	.LFB52:
4644:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4645:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4646:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4647:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4648:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4649:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Close Directory                                                       */
4650:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4652:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_closedir (
4653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR *dp		/* Pointer to the directory object to be closed */
4654:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4655:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8572              	 .loc 1 4655 0
 8573              	 .cfi_startproc
 8574              	 
 8575              	 
 8576 0000 80B5     	 push {r7,lr}
 8577              	.LCFI277:
 8578              	 .cfi_def_cfa_offset 8
 8579              	 .cfi_offset 7,-8
 8580              	 .cfi_offset 14,-4
 8581 0002 84B0     	 sub sp,sp,#16
 8582              	.LCFI278:
 8583              	 .cfi_def_cfa_offset 24
 8584 0004 00AF     	 add r7,sp,#0
 8585              	.LCFI279:
 8586              	 .cfi_def_cfa_register 7
 8587 0006 7860     	 str r0,[r7,#4]
4656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4657:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4658:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4659:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the file object */
 8588              	 .loc 1 4660 0
 8589 0008 7A68     	 ldr r2,[r7,#4]
 8590 000a 07F10803 	 add r3,r7,#8
 8591 000e 1046     	 mov r0,r2
 8592 0010 1946     	 mov r1,r3
 8593 0012 FFF7FEFF 	 bl validate
 8594 0016 0346     	 mov r3,r0
 8595 0018 FB73     	 strb r3,[r7,#15]
4661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8596              	 .loc 1 4661 0
 8597 001a FB7B     	 ldrb r3,[r7,#15]
 8598 001c 002B     	 cmp r3,#0
 8599 001e 10D1     	 bne .L534
4662:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4663:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dp->obj.lockid) res = dec_lock(dp->obj.lockid);	/* Decrement sub-directory open counter */
 8600              	 .loc 1 4663 0
 8601 0020 7B68     	 ldr r3,[r7,#4]
 8602 0022 1B69     	 ldr r3,[r3,#16]
 8603 0024 002B     	 cmp r3,#0
 8604 0026 06D0     	 beq .L535
 8605              	 .loc 1 4663 0 is_stmt 0 discriminator 1
 8606 0028 7B68     	 ldr r3,[r7,#4]
 8607 002a 1B69     	 ldr r3,[r3,#16]
 8608 002c 1846     	 mov r0,r3
 8609 002e FFF7FEFF 	 bl dec_lock
 8610 0032 0346     	 mov r3,r0
 8611 0034 FB73     	 strb r3,[r7,#15]
 8612              	.L535:
4664:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) dp->obj.fs = 0;	/* Invalidate directory object */
 8613              	 .loc 1 4664 0 is_stmt 1
 8614 0036 FB7B     	 ldrb r3,[r7,#15]
 8615 0038 002B     	 cmp r3,#0
 8616 003a 02D1     	 bne .L534
 8617              	 .loc 1 4664 0 is_stmt 0 discriminator 1
 8618 003c 7B68     	 ldr r3,[r7,#4]
 8619 003e 0022     	 movs r2,#0
 8620 0040 1A60     	 str r2,[r3]
 8621              	.L534:
4665:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
4666:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dp->obj.fs = 0;	/* Invalidate directory object */
4667:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4668:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_REENTRANT
4669:../Dave/Generated/FATFS/ff_Src/ff.c **** 		unlock_fs(fs, FR_OK);		/* Unlock volume */
4670:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4672:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
 8622              	 .loc 1 4672 0 is_stmt 1
 8623 0042 FB7B     	 ldrb r3,[r7,#15]
4673:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8624              	 .loc 1 4673 0
 8625 0044 1846     	 mov r0,r3
 8626 0046 1037     	 adds r7,r7,#16
 8627              	.LCFI280:
 8628              	 .cfi_def_cfa_offset 8
 8629 0048 BD46     	 mov sp,r7
 8630              	.LCFI281:
 8631              	 .cfi_def_cfa_register 13
 8632              	 
 8633 004a 80BD     	 pop {r7,pc}
 8634              	 .cfi_endproc
 8635              	.LFE52:
 8637              	 .section .text.f_readdir,"ax",%progbits
 8638              	 .align 2
 8639              	 .global f_readdir
 8640              	 .thumb
 8641              	 .thumb_func
 8643              	f_readdir:
 8644              	.LFB53:
4674:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4675:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4678:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4679:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Read Directory Entries in Sequence                                    */
4680:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4681:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4682:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_readdir (
4683:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,			/* Pointer to the open directory object */
4684:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4685:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4686:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8645              	 .loc 1 4686 0
 8646              	 .cfi_startproc
 8647              	 
 8648              	 
 8649 0000 80B5     	 push {r7,lr}
 8650              	.LCFI282:
 8651              	 .cfi_def_cfa_offset 8
 8652              	 .cfi_offset 7,-8
 8653              	 .cfi_offset 14,-4
 8654 0002 84B0     	 sub sp,sp,#16
 8655              	.LCFI283:
 8656              	 .cfi_def_cfa_offset 24
 8657 0004 00AF     	 add r7,sp,#0
 8658              	.LCFI284:
 8659              	 .cfi_def_cfa_register 7
 8660 0006 7860     	 str r0,[r7,#4]
 8661 0008 3960     	 str r1,[r7]
4687:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4688:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4690:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4691:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4692:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8662              	 .loc 1 4692 0
 8663 000a 7A68     	 ldr r2,[r7,#4]
 8664 000c 07F10803 	 add r3,r7,#8
 8665 0010 1046     	 mov r0,r2
 8666 0012 1946     	 mov r1,r3
 8667 0014 FFF7FEFF 	 bl validate
 8668 0018 0346     	 mov r3,r0
 8669 001a FB73     	 strb r3,[r7,#15]
4693:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8670              	 .loc 1 4693 0
 8671 001c FB7B     	 ldrb r3,[r7,#15]
 8672 001e 002B     	 cmp r3,#0
 8673 0020 26D1     	 bne .L538
4694:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!fno) {
 8674              	 .loc 1 4694 0
 8675 0022 3B68     	 ldr r3,[r7]
 8676 0024 002B     	 cmp r3,#0
 8677 0026 06D1     	 bne .L539
4695:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8678              	 .loc 1 4695 0
 8679 0028 7868     	 ldr r0,[r7,#4]
 8680 002a 0021     	 movs r1,#0
 8681 002c FFF7FEFF 	 bl dir_sdi
 8682 0030 0346     	 mov r3,r0
 8683 0032 FB73     	 strb r3,[r7,#15]
 8684 0034 1CE0     	 b .L538
 8685              	.L539:
4696:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4697:../Dave/Generated/FATFS/ff_Src/ff.c **** 			INIT_NAMBUF(fs);
4698:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = DIR_READ_FILE(dp);		/* Read an item */
 8686              	 .loc 1 4698 0
 8687 0036 7868     	 ldr r0,[r7,#4]
 8688 0038 0021     	 movs r1,#0
 8689 003a FFF7FEFF 	 bl dir_read
 8690 003e 0346     	 mov r3,r0
 8691 0040 FB73     	 strb r3,[r7,#15]
4699:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8692              	 .loc 1 4699 0
 8693 0042 FB7B     	 ldrb r3,[r7,#15]
 8694 0044 042B     	 cmp r3,#4
 8695 0046 01D1     	 bne .L540
 8696              	 .loc 1 4699 0 is_stmt 0 discriminator 1
 8697 0048 0023     	 movs r3,#0
 8698 004a FB73     	 strb r3,[r7,#15]
 8699              	.L540:
4700:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {				/* A valid entry is found */
 8700              	 .loc 1 4700 0 is_stmt 1
 8701 004c FB7B     	 ldrb r3,[r7,#15]
 8702 004e 002B     	 cmp r3,#0
 8703 0050 0ED1     	 bne .L538
4701:../Dave/Generated/FATFS/ff_Src/ff.c **** 				get_fileinfo(dp, fno);		/* Get the object information */
 8704              	 .loc 1 4701 0
 8705 0052 7868     	 ldr r0,[r7,#4]
 8706 0054 3968     	 ldr r1,[r7]
 8707 0056 FFF7FEFF 	 bl get_fileinfo
4702:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_next(dp, 0);		/* Increment index for next */
 8708              	 .loc 1 4702 0
 8709 005a 7868     	 ldr r0,[r7,#4]
 8710 005c 0021     	 movs r1,#0
 8711 005e FFF7FEFF 	 bl dir_next
 8712 0062 0346     	 mov r3,r0
 8713 0064 FB73     	 strb r3,[r7,#15]
4703:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8714              	 .loc 1 4703 0
 8715 0066 FB7B     	 ldrb r3,[r7,#15]
 8716 0068 042B     	 cmp r3,#4
 8717 006a 01D1     	 bne .L538
 8718              	 .loc 1 4703 0 is_stmt 0 discriminator 1
 8719 006c 0023     	 movs r3,#0
 8720 006e FB73     	 strb r3,[r7,#15]
 8721              	.L538:
4704:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4705:../Dave/Generated/FATFS/ff_Src/ff.c **** 			FREE_NAMBUF();
4706:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4707:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4708:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 8722              	 .loc 1 4708 0 is_stmt 1
 8723 0070 FB7B     	 ldrb r3,[r7,#15]
4709:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8724              	 .loc 1 4709 0
 8725 0072 1846     	 mov r0,r3
 8726 0074 1037     	 adds r7,r7,#16
 8727              	.LCFI285:
 8728              	 .cfi_def_cfa_offset 8
 8729 0076 BD46     	 mov sp,r7
 8730              	.LCFI286:
 8731              	 .cfi_def_cfa_register 13
 8732              	 
 8733 0078 80BD     	 pop {r7,pc}
 8734              	 .cfi_endproc
 8735              	.LFE53:
 8737 007a 00BF     	 .section .text.f_stat,"ax",%progbits
 8738              	 .align 2
 8739              	 .global f_stat
 8740              	 .thumb
 8741              	 .thumb_func
 8743              	f_stat:
 8744              	.LFB54:
4710:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4711:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4712:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4713:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FIND
4714:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4715:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find Next File                                                        */
4716:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4717:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4718:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findnext (
4719:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,		/* Pointer to the open directory object */
4720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno	/* Pointer to the file information structure */
4721:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4722:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4723:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4724:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4725:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
4727:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_readdir(dp, fno);		/* Get a directory item */
4728:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory 
4729:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_match(dp->pat, fno->fname, 0, FIND_RECURS)) break;		/* Test for the file name */
4730:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_USE_FIND == 2
4731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pattern_match(dp->pat, fno->altname, 0, FIND_RECURS)) break;	/* Test for alternative name if 
4732:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4733:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4735:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4736:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4737:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4738:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4739:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4740:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Find First File                                                       */
4741:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4742:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4743:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_findfirst (
4744:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR* dp,				/* Pointer to the blank directory object */
4745:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno,			/* Pointer to the file information structure */
4746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,		/* Pointer to the directory to open */
4747:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* pattern	/* Pointer to the matching pattern */
4748:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4749:../Dave/Generated/FATFS/ff_Src/ff.c **** {
4750:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4751:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4752:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4753:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dp->pat = pattern;		/* Save pointer to pattern string */
4754:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = f_opendir(dp, path);		/* Open the target directory */
4755:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
4756:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = f_findnext(dp, fno);	/* Find the first item */
4757:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4758:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return res;
4759:../Dave/Generated/FATFS/ff_Src/ff.c **** }
4760:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4761:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_FIND */
4762:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4763:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4764:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4765:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_MINIMIZE == 0
4766:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4767:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get File Status                                                       */
4768:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4769:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4770:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_stat (
4771:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
4772:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FILINFO* fno		/* Pointer to file information to return */
4773:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4774:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8745              	 .loc 1 4774 0
 8746              	 .cfi_startproc
 8747              	 
 8748              	 
 8749 0000 80B5     	 push {r7,lr}
 8750              	.LCFI287:
 8751              	 .cfi_def_cfa_offset 8
 8752              	 .cfi_offset 7,-8
 8753              	 .cfi_offset 14,-4
 8754 0002 90B0     	 sub sp,sp,#64
 8755              	.LCFI288:
 8756              	 .cfi_def_cfa_offset 72
 8757 0004 00AF     	 add r7,sp,#0
 8758              	.LCFI289:
 8759              	 .cfi_def_cfa_register 7
 8760 0006 7860     	 str r0,[r7,#4]
 8761 0008 3960     	 str r1,[r7]
4775:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4776:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
4777:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4778:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4779:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4780:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4781:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &dj.obj.fs, 0);
 8762              	 .loc 1 4781 0
 8763 000a 3A1D     	 adds r2,r7,#4
 8764 000c 07F10C03 	 add r3,r7,#12
 8765 0010 1046     	 mov r0,r2
 8766 0012 1946     	 mov r1,r3
 8767 0014 0022     	 movs r2,#0
 8768 0016 FFF7FEFF 	 bl mount_volume
 8769 001a 0346     	 mov r3,r0
 8770 001c 87F83F30 	 strb r3,[r7,#63]
4782:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8771              	 .loc 1 4782 0
 8772 0020 97F83F30 	 ldrb r3,[r7,#63]
 8773 0024 002B     	 cmp r3,#0
 8774 0026 20D1     	 bne .L543
4783:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(dj.obj.fs);
4784:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
 8775              	 .loc 1 4784 0
 8776 0028 7B68     	 ldr r3,[r7,#4]
 8777 002a 07F10C02 	 add r2,r7,#12
 8778 002e 1046     	 mov r0,r2
 8779 0030 1946     	 mov r1,r3
 8780 0032 FFF7FEFF 	 bl follow_path
 8781 0036 0346     	 mov r3,r0
 8782 0038 87F83F30 	 strb r3,[r7,#63]
4785:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {				/* Follow completed */
 8783              	 .loc 1 4785 0
 8784 003c 97F83F30 	 ldrb r3,[r7,#63]
 8785 0040 002B     	 cmp r3,#0
 8786 0042 12D1     	 bne .L543
4786:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8787              	 .loc 1 4786 0
 8788 0044 97F83B30 	 ldrb r3,[r7,#59]
 8789 0048 DBB2     	 uxtb r3,r3
 8790 004a 5BB2     	 sxtb r3,r3
 8791 004c 002B     	 cmp r3,#0
 8792 004e 03DA     	 bge .L544
4787:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;
 8793              	 .loc 1 4787 0
 8794 0050 0623     	 movs r3,#6
 8795 0052 87F83F30 	 strb r3,[r7,#63]
 8796 0056 08E0     	 b .L543
 8797              	.L544:
4788:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {							/* Found an object */
4789:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fno) get_fileinfo(&dj, fno);
 8798              	 .loc 1 4789 0
 8799 0058 3B68     	 ldr r3,[r7]
 8800 005a 002B     	 cmp r3,#0
 8801 005c 05D0     	 beq .L543
 8802              	 .loc 1 4789 0 is_stmt 0 discriminator 1
 8803 005e 07F10C03 	 add r3,r7,#12
 8804 0062 1846     	 mov r0,r3
 8805 0064 3968     	 ldr r1,[r7]
 8806 0066 FFF7FEFF 	 bl get_fileinfo
 8807              	.L543:
4790:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4791:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
4793:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4794:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4795:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(dj.obj.fs, res);
 8808              	 .loc 1 4795 0 is_stmt 1
 8809 006a 97F83F30 	 ldrb r3,[r7,#63]
4796:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 8810              	 .loc 1 4796 0
 8811 006e 1846     	 mov r0,r3
 8812 0070 4037     	 adds r7,r7,#64
 8813              	.LCFI290:
 8814              	 .cfi_def_cfa_offset 8
 8815 0072 BD46     	 mov sp,r7
 8816              	.LCFI291:
 8817              	 .cfi_def_cfa_register 13
 8818              	 
 8819 0074 80BD     	 pop {r7,pc}
 8820              	 .cfi_endproc
 8821              	.LFE54:
 8823 0076 00BF     	 .section .text.f_getfree,"ax",%progbits
 8824              	 .align 2
 8825              	 .global f_getfree
 8826              	 .thumb
 8827              	 .thumb_func
 8829              	f_getfree:
 8830              	.LFB55:
4797:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4798:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4799:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4800:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
4801:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4802:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Number of Free Clusters                                           */
4803:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4804:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4805:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getfree (
4806:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
4807:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
4808:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS** fatfs		/* Pointer to return pointer to corresponding filesystem object */
4809:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4810:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 8831              	 .loc 1 4810 0
 8832              	 .cfi_startproc
 8833              	 
 8834              	 
 8835 0000 80B5     	 push {r7,lr}
 8836              	.LCFI292:
 8837              	 .cfi_def_cfa_offset 8
 8838              	 .cfi_offset 7,-8
 8839              	 .cfi_offset 14,-4
 8840 0002 90B0     	 sub sp,sp,#64
 8841              	.LCFI293:
 8842              	 .cfi_def_cfa_offset 72
 8843 0004 00AF     	 add r7,sp,#0
 8844              	.LCFI294:
 8845              	 .cfi_def_cfa_register 7
 8846 0006 F860     	 str r0,[r7,#12]
 8847 0008 B960     	 str r1,[r7,#8]
 8848 000a 7A60     	 str r2,[r7,#4]
4811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4812:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4813:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD nfree, clst, stat;
4814:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
4815:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i;
4816:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4817:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4818:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4819:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4820:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, 0);
 8849              	 .loc 1 4820 0
 8850 000c 07F10C02 	 add r2,r7,#12
 8851 0010 07F12403 	 add r3,r7,#36
 8852 0014 1046     	 mov r0,r2
 8853 0016 1946     	 mov r1,r3
 8854 0018 0022     	 movs r2,#0
 8855 001a FFF7FEFF 	 bl mount_volume
 8856 001e 0346     	 mov r3,r0
 8857 0020 87F83F30 	 strb r3,[r7,#63]
4821:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 8858              	 .loc 1 4821 0
 8859 0024 97F83F30 	 ldrb r3,[r7,#63]
 8860 0028 002B     	 cmp r3,#0
 8861 002a 40F09A80 	 bne .L547
4822:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*fatfs = fs;				/* Return ptr to the fs object */
 8862              	 .loc 1 4822 0
 8863 002e 7A6A     	 ldr r2,[r7,#36]
 8864 0030 7B68     	 ldr r3,[r7,#4]
 8865 0032 1A60     	 str r2,[r3]
4823:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* If free_clst is valid, return it without full FAT scan */
4824:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fs->free_clst <= fs->n_fatent - 2) {
 8866              	 .loc 1 4824 0
 8867 0034 7B6A     	 ldr r3,[r7,#36]
 8868 0036 1A69     	 ldr r2,[r3,#16]
 8869 0038 7B6A     	 ldr r3,[r7,#36]
 8870 003a 9B69     	 ldr r3,[r3,#24]
 8871 003c 023B     	 subs r3,r3,#2
 8872 003e 9A42     	 cmp r2,r3
 8873 0040 04D8     	 bhi .L548
4825:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = fs->free_clst;
 8874              	 .loc 1 4825 0
 8875 0042 7B6A     	 ldr r3,[r7,#36]
 8876 0044 1A69     	 ldr r2,[r3,#16]
 8877 0046 BB68     	 ldr r3,[r7,#8]
 8878 0048 1A60     	 str r2,[r3]
 8879 004a 8AE0     	 b .L547
 8880              	.L548:
4826:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
4827:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Scan FAT to obtain number of free clusters */
4828:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nfree = 0;
 8881              	 .loc 1 4828 0
 8882 004c 0023     	 movs r3,#0
 8883 004e BB63     	 str r3,[r7,#56]
4829:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_FAT12) {	/* FAT12: Scan bit field FAT entries */
 8884              	 .loc 1 4829 0
 8885 0050 7B6A     	 ldr r3,[r7,#36]
 8886 0052 1B78     	 ldrb r3,[r3]
 8887 0054 012B     	 cmp r3,#1
 8888 0056 29D1     	 bne .L549
4830:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = 2; obj.fs = fs;
 8889              	 .loc 1 4830 0
 8890 0058 0223     	 movs r3,#2
 8891 005a 7B63     	 str r3,[r7,#52]
 8892 005c 7B6A     	 ldr r3,[r7,#36]
 8893 005e 3B61     	 str r3,[r7,#16]
 8894              	.L554:
4831:../Dave/Generated/FATFS/ff_Src/ff.c **** 				do {
4832:../Dave/Generated/FATFS/ff_Src/ff.c **** 					stat = get_fat(&obj, clst);
 8895              	 .loc 1 4832 0
 8896 0060 07F11003 	 add r3,r7,#16
 8897 0064 1846     	 mov r0,r3
 8898 0066 796B     	 ldr r1,[r7,#52]
 8899 0068 FFF7FEFF 	 bl get_fat
 8900 006c B862     	 str r0,[r7,#40]
4833:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8901              	 .loc 1 4833 0
 8902 006e BB6A     	 ldr r3,[r7,#40]
 8903 0070 B3F1FF3F 	 cmp r3,#-1
 8904 0074 03D1     	 bne .L550
 8905              	 .loc 1 4833 0 is_stmt 0 discriminator 1
 8906 0076 0123     	 movs r3,#1
 8907 0078 87F83F30 	 strb r3,[r7,#63]
 8908 007c 15E0     	 b .L551
 8909              	.L550:
4834:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 1) { res = FR_INT_ERR; break; }
 8910              	 .loc 1 4834 0 is_stmt 1
 8911 007e BB6A     	 ldr r3,[r7,#40]
 8912 0080 012B     	 cmp r3,#1
 8913 0082 03D1     	 bne .L552
 8914              	 .loc 1 4834 0 is_stmt 0 discriminator 1
 8915 0084 0223     	 movs r3,#2
 8916 0086 87F83F30 	 strb r3,[r7,#63]
 8917 008a 0EE0     	 b .L551
 8918              	.L552:
4835:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (stat == 0) nfree++;
 8919              	 .loc 1 4835 0 is_stmt 1
 8920 008c BB6A     	 ldr r3,[r7,#40]
 8921 008e 002B     	 cmp r3,#0
 8922 0090 02D1     	 bne .L553
 8923              	 .loc 1 4835 0 is_stmt 0 discriminator 1
 8924 0092 BB6B     	 ldr r3,[r7,#56]
 8925 0094 0133     	 adds r3,r3,#1
 8926 0096 BB63     	 str r3,[r7,#56]
 8927              	.L553:
4836:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} while (++clst < fs->n_fatent);
 8928              	 .loc 1 4836 0 is_stmt 1
 8929 0098 7B6B     	 ldr r3,[r7,#52]
 8930 009a 0133     	 adds r3,r3,#1
 8931 009c 7B63     	 str r3,[r7,#52]
 8932 009e 7B6A     	 ldr r3,[r7,#36]
 8933 00a0 9B69     	 ldr r3,[r3,#24]
 8934 00a2 7A6B     	 ldr r2,[r7,#52]
 8935 00a4 9A42     	 cmp r2,r3
 8936 00a6 DBD3     	 bcc .L554
 8937 00a8 4EE0     	 b .L555
 8938              	.L551:
 8939 00aa 4DE0     	 b .L555
 8940              	.L549:
4837:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4838:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4839:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan allocation bitmap */
4840:../Dave/Generated/FATFS/ff_Src/ff.c **** 					BYTE bm;
4841:../Dave/Generated/FATFS/ff_Src/ff.c **** 					UINT b;
4842:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4843:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent - 2;	/* Number of clusters */
4844:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->bitbase;			/* Bitmap sector */
4845:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;						/* Offset in the sector */
4846:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of bits with zero in the bitmap */
4847:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
4848:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
4849:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
4850:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4851:../Dave/Generated/FATFS/ff_Src/ff.c **** 						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
4852:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (!(bm & 1)) nfree++;
4853:../Dave/Generated/FATFS/ff_Src/ff.c **** 							bm >>= 1;
4854:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4855:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i = (i + 1) % SS(fs);
4856:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (clst);
4857:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4858:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4859:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{	/* FAT16/32: Scan WORD/DWORD FAT entries */
4860:../Dave/Generated/FATFS/ff_Src/ff.c **** 					clst = fs->n_fatent;	/* Number of entries */
 8941              	 .loc 1 4860 0
 8942 00ac 7B6A     	 ldr r3,[r7,#36]
 8943 00ae 9B69     	 ldr r3,[r3,#24]
 8944 00b0 7B63     	 str r3,[r7,#52]
4861:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sect = fs->fatbase;		/* Top of the FAT */
 8945              	 .loc 1 4861 0
 8946 00b2 7B6A     	 ldr r3,[r7,#36]
 8947 00b4 5B6A     	 ldr r3,[r3,#36]
 8948 00b6 3B63     	 str r3,[r7,#48]
4862:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i = 0;					/* Offset in the sector */
 8949              	 .loc 1 4862 0
 8950 00b8 0023     	 movs r3,#0
 8951 00ba FB62     	 str r3,[r7,#44]
 8952              	.L561:
4863:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {	/* Counts numbuer of entries with zero in the FAT */
4864:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (i == 0) {
 8953              	 .loc 1 4864 0
 8954 00bc FB6A     	 ldr r3,[r7,#44]
 8955 00be 002B     	 cmp r3,#0
 8956 00c0 0FD1     	 bne .L556
4865:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = move_window(fs, sect++);
 8957              	 .loc 1 4865 0
 8958 00c2 796A     	 ldr r1,[r7,#36]
 8959 00c4 3B6B     	 ldr r3,[r7,#48]
 8960 00c6 5A1C     	 adds r2,r3,#1
 8961 00c8 3A63     	 str r2,[r7,#48]
 8962 00ca 0846     	 mov r0,r1
 8963 00cc 1946     	 mov r1,r3
 8964 00ce FFF7FEFF 	 bl move_window
 8965 00d2 0346     	 mov r3,r0
 8966 00d4 87F83F30 	 strb r3,[r7,#63]
4866:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res != FR_OK) break;
 8967              	 .loc 1 4866 0
 8968 00d8 97F83F30 	 ldrb r3,[r7,#63]
 8969 00dc 002B     	 cmp r3,#0
 8970 00de 00D0     	 beq .L556
 8971 00e0 32E0     	 b .L555
 8972              	.L556:
4867:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4868:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_FAT16) {
 8973              	 .loc 1 4868 0
 8974 00e2 7B6A     	 ldr r3,[r7,#36]
 8975 00e4 1B78     	 ldrb r3,[r3]
 8976 00e6 022B     	 cmp r3,#2
 8977 00e8 11D1     	 bne .L557
4869:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (ld_word(fs->win + i) == 0) nfree++;
 8978              	 .loc 1 4869 0
 8979 00ea 7A6A     	 ldr r2,[r7,#36]
 8980 00ec FB6A     	 ldr r3,[r7,#44]
 8981 00ee 3033     	 adds r3,r3,#48
 8982 00f0 1344     	 add r3,r3,r2
 8983 00f2 0433     	 adds r3,r3,#4
 8984 00f4 1846     	 mov r0,r3
 8985 00f6 FFF7FEFF 	 bl ld_word
 8986 00fa 0346     	 mov r3,r0
 8987 00fc 002B     	 cmp r3,#0
 8988 00fe 02D1     	 bne .L558
 8989              	 .loc 1 4869 0 is_stmt 0 discriminator 1
 8990 0100 BB6B     	 ldr r3,[r7,#56]
 8991 0102 0133     	 adds r3,r3,#1
 8992 0104 BB63     	 str r3,[r7,#56]
 8993              	.L558:
4870:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 2;
 8994              	 .loc 1 4870 0 is_stmt 1
 8995 0106 FB6A     	 ldr r3,[r7,#44]
 8996 0108 0233     	 adds r3,r3,#2
 8997 010a FB62     	 str r3,[r7,#44]
 8998 010c 12E0     	 b .L559
 8999              	.L557:
4871:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
4872:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if ((ld_dword(fs->win + i) & 0x0FFFFFFF) == 0) nfree++;
 9000              	 .loc 1 4872 0
 9001 010e 7A6A     	 ldr r2,[r7,#36]
 9002 0110 FB6A     	 ldr r3,[r7,#44]
 9003 0112 3033     	 adds r3,r3,#48
 9004 0114 1344     	 add r3,r3,r2
 9005 0116 0433     	 adds r3,r3,#4
 9006 0118 1846     	 mov r0,r3
 9007 011a FFF7FEFF 	 bl ld_dword
 9008 011e 0346     	 mov r3,r0
 9009 0120 23F07043 	 bic r3,r3,#-268435456
 9010 0124 002B     	 cmp r3,#0
 9011 0126 02D1     	 bne .L560
 9012              	 .loc 1 4872 0 is_stmt 0 discriminator 1
 9013 0128 BB6B     	 ldr r3,[r7,#56]
 9014 012a 0133     	 adds r3,r3,#1
 9015 012c BB63     	 str r3,[r7,#56]
 9016              	.L560:
4873:../Dave/Generated/FATFS/ff_Src/ff.c **** 							i += 4;
 9017              	 .loc 1 4873 0 is_stmt 1
 9018 012e FB6A     	 ldr r3,[r7,#44]
 9019 0130 0433     	 adds r3,r3,#4
 9020 0132 FB62     	 str r3,[r7,#44]
 9021              	.L559:
4874:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
4875:../Dave/Generated/FATFS/ff_Src/ff.c **** 						i %= SS(fs);
 9022              	 .loc 1 4875 0
 9023 0134 FB6A     	 ldr r3,[r7,#44]
 9024 0136 C3F30803 	 ubfx r3,r3,#0,#9
 9025 013a FB62     	 str r3,[r7,#44]
4876:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (--clst);
 9026              	 .loc 1 4876 0
 9027 013c 7B6B     	 ldr r3,[r7,#52]
 9028 013e 013B     	 subs r3,r3,#1
 9029 0140 7B63     	 str r3,[r7,#52]
 9030 0142 7B6B     	 ldr r3,[r7,#52]
 9031 0144 002B     	 cmp r3,#0
 9032 0146 B9D1     	 bne .L561
 9033              	.L555:
4877:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4878:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4879:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*nclst = nfree;			/* Return the free clusters */
 9034              	 .loc 1 4879 0
 9035 0148 BB68     	 ldr r3,[r7,#8]
 9036 014a BA6B     	 ldr r2,[r7,#56]
 9037 014c 1A60     	 str r2,[r3]
4880:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->free_clst = nfree;	/* Now free_clst is valid */
 9038              	 .loc 1 4880 0
 9039 014e 7B6A     	 ldr r3,[r7,#36]
 9040 0150 BA6B     	 ldr r2,[r7,#56]
 9041 0152 1A61     	 str r2,[r3,#16]
4881:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->fsi_flag |= 1;		/* FAT32: FSInfo is to be updated */
 9042              	 .loc 1 4881 0
 9043 0154 7B6A     	 ldr r3,[r7,#36]
 9044 0156 7A6A     	 ldr r2,[r7,#36]
 9045 0158 1279     	 ldrb r2,[r2,#4]
 9046 015a 42F00102 	 orr r2,r2,#1
 9047 015e D2B2     	 uxtb r2,r2
 9048 0160 1A71     	 strb r2,[r3,#4]
 9049              	.L547:
4882:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4884:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4885:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9050              	 .loc 1 4885 0
 9051 0162 97F83F30 	 ldrb r3,[r7,#63]
4886:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9052              	 .loc 1 4886 0
 9053 0166 1846     	 mov r0,r3
 9054 0168 4037     	 adds r7,r7,#64
 9055              	.LCFI295:
 9056              	 .cfi_def_cfa_offset 8
 9057 016a BD46     	 mov sp,r7
 9058              	.LCFI296:
 9059              	 .cfi_def_cfa_register 13
 9060              	 
 9061 016c 80BD     	 pop {r7,pc}
 9062              	 .cfi_endproc
 9063              	.LFE55:
 9065 016e 00BF     	 .section .text.f_truncate,"ax",%progbits
 9066              	 .align 2
 9067              	 .global f_truncate
 9068              	 .thumb
 9069              	 .thumb_func
 9071              	f_truncate:
 9072              	.LFB56:
4887:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4888:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4889:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4890:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4891:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4892:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Truncate File                                                         */
4893:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4894:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4895:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_truncate (
4896:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
4897:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4898:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9073              	 .loc 1 4898 0
 9074              	 .cfi_startproc
 9075              	 
 9076              	 
 9077 0000 80B5     	 push {r7,lr}
 9078              	.LCFI297:
 9079              	 .cfi_def_cfa_offset 8
 9080              	 .cfi_offset 7,-8
 9081              	 .cfi_offset 14,-4
 9082 0002 86B0     	 sub sp,sp,#24
 9083              	.LCFI298:
 9084              	 .cfi_def_cfa_offset 32
 9085 0004 00AF     	 add r7,sp,#0
 9086              	.LCFI299:
 9087              	 .cfi_def_cfa_register 7
 9088 0006 7860     	 str r0,[r7,#4]
4899:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4900:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4901:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD ncl;
4902:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4903:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4904:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 9089              	 .loc 1 4904 0
 9090 0008 7A68     	 ldr r2,[r7,#4]
 9091 000a 07F10C03 	 add r3,r7,#12
 9092 000e 1046     	 mov r0,r2
 9093 0010 1946     	 mov r1,r3
 9094 0012 FFF7FEFF 	 bl validate
 9095 0016 0346     	 mov r3,r0
 9096 0018 FB75     	 strb r3,[r7,#23]
4905:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
 9097              	 .loc 1 4905 0
 9098 001a FB7D     	 ldrb r3,[r7,#23]
 9099 001c 002B     	 cmp r3,#0
 9100 001e 05D1     	 bne .L564
 9101              	 .loc 1 4905 0 is_stmt 0 discriminator 2
 9102 0020 7B68     	 ldr r3,[r7,#4]
 9103 0022 5B7D     	 ldrb r3,[r3,#21]
 9104 0024 FB75     	 strb r3,[r7,#23]
 9105 0026 FB7D     	 ldrb r3,[r7,#23]
 9106 0028 002B     	 cmp r3,#0
 9107 002a 01D0     	 beq .L565
 9108              	.L564:
 9109              	 .loc 1 4905 0 discriminator 3
 9110 002c FB7D     	 ldrb r3,[r7,#23]
 9111 002e 7DE0     	 b .L575
 9112              	.L565:
4906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 9113              	 .loc 1 4906 0 is_stmt 1
 9114 0030 7B68     	 ldr r3,[r7,#4]
 9115 0032 1B7D     	 ldrb r3,[r3,#20]
 9116 0034 03F00203 	 and r3,r3,#2
 9117 0038 002B     	 cmp r3,#0
 9118 003a 01D1     	 bne .L567
 9119              	 .loc 1 4906 0 is_stmt 0 discriminator 1
 9120 003c 0723     	 movs r3,#7
 9121 003e 75E0     	 b .L575
 9122              	.L567:
4907:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fp->fptr < fp->obj.objsize) {	/* Process when fptr is not on the eof */
 9123              	 .loc 1 4908 0 is_stmt 1
 9124 0040 7B68     	 ldr r3,[r7,#4]
 9125 0042 9A69     	 ldr r2,[r3,#24]
 9126 0044 7B68     	 ldr r3,[r7,#4]
 9127 0046 DB68     	 ldr r3,[r3,#12]
 9128 0048 9A42     	 cmp r2,r3
 9129 004a 6ED2     	 bcs .L568
4909:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 9130              	 .loc 1 4909 0
 9131 004c 7B68     	 ldr r3,[r7,#4]
 9132 004e 9B69     	 ldr r3,[r3,#24]
 9133 0050 002B     	 cmp r3,#0
 9134 0052 0DD1     	 bne .L569
4910:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 9135              	 .loc 1 4910 0
 9136 0054 7A68     	 ldr r2,[r7,#4]
 9137 0056 7B68     	 ldr r3,[r7,#4]
 9138 0058 9B68     	 ldr r3,[r3,#8]
 9139 005a 1046     	 mov r0,r2
 9140 005c 1946     	 mov r1,r3
 9141 005e 0022     	 movs r2,#0
 9142 0060 FFF7FEFF 	 bl remove_chain
 9143 0064 0346     	 mov r3,r0
 9144 0066 FB75     	 strb r3,[r7,#23]
4911:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = 0;
 9145              	 .loc 1 4911 0
 9146 0068 7B68     	 ldr r3,[r7,#4]
 9147 006a 0022     	 movs r2,#0
 9148 006c 9A60     	 str r2,[r3,#8]
 9149 006e 26E0     	 b .L570
 9150              	.L569:
4912:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* When truncate a part of the file, remove remaining clusters */
4913:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ncl = get_fat(&fp->obj, fp->clust);
 9151              	 .loc 1 4913 0
 9152 0070 7A68     	 ldr r2,[r7,#4]
 9153 0072 7B68     	 ldr r3,[r7,#4]
 9154 0074 DB69     	 ldr r3,[r3,#28]
 9155 0076 1046     	 mov r0,r2
 9156 0078 1946     	 mov r1,r3
 9157 007a FFF7FEFF 	 bl get_fat
 9158 007e 3861     	 str r0,[r7,#16]
4914:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 9159              	 .loc 1 4914 0
 9160 0080 0023     	 movs r3,#0
 9161 0082 FB75     	 strb r3,[r7,#23]
4915:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 9162              	 .loc 1 4915 0
 9163 0084 3B69     	 ldr r3,[r7,#16]
 9164 0086 B3F1FF3F 	 cmp r3,#-1
 9165 008a 01D1     	 bne .L571
 9166              	 .loc 1 4915 0 is_stmt 0 discriminator 1
 9167 008c 0123     	 movs r3,#1
 9168 008e FB75     	 strb r3,[r7,#23]
 9169              	.L571:
4916:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ncl == 1) res = FR_INT_ERR;
 9170              	 .loc 1 4916 0 is_stmt 1
 9171 0090 3B69     	 ldr r3,[r7,#16]
 9172 0092 012B     	 cmp r3,#1
 9173 0094 01D1     	 bne .L572
 9174              	 .loc 1 4916 0 is_stmt 0 discriminator 1
 9175 0096 0223     	 movs r3,#2
 9176 0098 FB75     	 strb r3,[r7,#23]
 9177              	.L572:
4917:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK && ncl < fs->n_fatent) {
 9178              	 .loc 1 4917 0 is_stmt 1
 9179 009a FB7D     	 ldrb r3,[r7,#23]
 9180 009c 002B     	 cmp r3,#0
 9181 009e 0ED1     	 bne .L570
 9182              	 .loc 1 4917 0 is_stmt 0 discriminator 1
 9183 00a0 FB68     	 ldr r3,[r7,#12]
 9184 00a2 9A69     	 ldr r2,[r3,#24]
 9185 00a4 3B69     	 ldr r3,[r7,#16]
 9186 00a6 9A42     	 cmp r2,r3
 9187 00a8 09D9     	 bls .L570
4918:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = remove_chain(&fp->obj, ncl, fp->clust);
 9188              	 .loc 1 4918 0 is_stmt 1
 9189 00aa 7A68     	 ldr r2,[r7,#4]
 9190 00ac 7B68     	 ldr r3,[r7,#4]
 9191 00ae DB69     	 ldr r3,[r3,#28]
 9192 00b0 1046     	 mov r0,r2
 9193 00b2 3969     	 ldr r1,[r7,#16]
 9194 00b4 1A46     	 mov r2,r3
 9195 00b6 FFF7FEFF 	 bl remove_chain
 9196 00ba 0346     	 mov r3,r0
 9197 00bc FB75     	 strb r3,[r7,#23]
 9198              	.L570:
4919:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4920:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->obj.objsize = fp->fptr;	/* Set file size to current read/write point */
 9199              	 .loc 1 4921 0
 9200 00be 7B68     	 ldr r3,[r7,#4]
 9201 00c0 9A69     	 ldr r2,[r3,#24]
 9202 00c2 7B68     	 ldr r3,[r7,#4]
 9203 00c4 DA60     	 str r2,[r3,#12]
4922:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->flag |= FA_MODIFIED;
 9204              	 .loc 1 4922 0
 9205 00c6 7B68     	 ldr r3,[r7,#4]
 9206 00c8 1B7D     	 ldrb r3,[r3,#20]
 9207 00ca 43F04003 	 orr r3,r3,#64
 9208 00ce DAB2     	 uxtb r2,r3
 9209 00d0 7B68     	 ldr r3,[r7,#4]
 9210 00d2 1A75     	 strb r2,[r3,#20]
4923:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_TINY
4924:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (fp->flag & FA_DIRTY)) {
 9211              	 .loc 1 4924 0
 9212 00d4 FB7D     	 ldrb r3,[r7,#23]
 9213 00d6 002B     	 cmp r3,#0
 9214 00d8 1FD1     	 bne .L573
 9215              	 .loc 1 4924 0 is_stmt 0 discriminator 1
 9216 00da 7B68     	 ldr r3,[r7,#4]
 9217 00dc 1B7D     	 ldrb r3,[r3,#20]
 9218 00de DBB2     	 uxtb r3,r3
 9219 00e0 5BB2     	 sxtb r3,r3
 9220 00e2 002B     	 cmp r3,#0
 9221 00e4 19DA     	 bge .L573
4925:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) {
 9222              	 .loc 1 4925 0 is_stmt 1
 9223 00e6 FB68     	 ldr r3,[r7,#12]
 9224 00e8 5978     	 ldrb r1,[r3,#1]
 9225 00ea 7B68     	 ldr r3,[r7,#4]
 9226 00ec 03F12C02 	 add r2,r3,#44
 9227 00f0 7B68     	 ldr r3,[r7,#4]
 9228 00f2 1B6A     	 ldr r3,[r3,#32]
 9229 00f4 0846     	 mov r0,r1
 9230 00f6 1146     	 mov r1,r2
 9231 00f8 1A46     	 mov r2,r3
 9232 00fa 0123     	 movs r3,#1
 9233 00fc FFF7FEFF 	 bl disk_write
 9234 0100 0346     	 mov r3,r0
 9235 0102 002B     	 cmp r3,#0
 9236 0104 02D0     	 beq .L574
4926:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_DISK_ERR;
 9237              	 .loc 1 4926 0
 9238 0106 0123     	 movs r3,#1
 9239 0108 FB75     	 strb r3,[r7,#23]
 9240 010a 06E0     	 b .L573
 9241              	.L574:
4927:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4928:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
 9242              	 .loc 1 4928 0
 9243 010c 7B68     	 ldr r3,[r7,#4]
 9244 010e 1B7D     	 ldrb r3,[r3,#20]
 9245 0110 03F07F03 	 and r3,r3,#127
 9246 0114 DAB2     	 uxtb r2,r3
 9247 0116 7B68     	 ldr r3,[r7,#4]
 9248 0118 1A75     	 strb r2,[r3,#20]
 9249              	.L573:
4929:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4930:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4931:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4932:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res != FR_OK) ABORT(fs, res);
 9250              	 .loc 1 4932 0
 9251 011a FB7D     	 ldrb r3,[r7,#23]
 9252 011c 002B     	 cmp r3,#0
 9253 011e 04D0     	 beq .L568
 9254              	 .loc 1 4932 0 is_stmt 0 discriminator 1
 9255 0120 7B68     	 ldr r3,[r7,#4]
 9256 0122 FA7D     	 ldrb r2,[r7,#23]
 9257 0124 5A75     	 strb r2,[r3,#21]
 9258 0126 FB7D     	 ldrb r3,[r7,#23]
 9259 0128 00E0     	 b .L575
 9260              	.L568:
4933:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
4934:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4935:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9261              	 .loc 1 4935 0 is_stmt 1
 9262 012a FB7D     	 ldrb r3,[r7,#23]
 9263              	.L575:
4936:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9264              	 .loc 1 4936 0 discriminator 1
 9265 012c 1846     	 mov r0,r3
 9266 012e 1837     	 adds r7,r7,#24
 9267              	.LCFI300:
 9268              	 .cfi_def_cfa_offset 8
 9269 0130 BD46     	 mov sp,r7
 9270              	.LCFI301:
 9271              	 .cfi_def_cfa_register 13
 9272              	 
 9273 0132 80BD     	 pop {r7,pc}
 9274              	 .cfi_endproc
 9275              	.LFE56:
 9277              	 .section .text.f_unlink,"ax",%progbits
 9278              	 .align 2
 9279              	 .global f_unlink
 9280              	 .thumb
 9281              	 .thumb_func
 9283              	f_unlink:
 9284              	.LFB57:
4937:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4938:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4939:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4940:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4941:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4942:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Delete a File/Directory                                               */
4943:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
4944:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4945:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_unlink (
4946:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the file or directory path */
4947:../Dave/Generated/FATFS/ff_Src/ff.c **** )
4948:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9285              	 .loc 1 4948 0
 9286              	 .cfi_startproc
 9287              	 
 9288              	 
 9289 0000 80B5     	 push {r7,lr}
 9290              	.LCFI302:
 9291              	 .cfi_def_cfa_offset 8
 9292              	 .cfi_offset 7,-8
 9293              	 .cfi_offset 14,-4
 9294 0002 9EB0     	 sub sp,sp,#120
 9295              	.LCFI303:
 9296              	 .cfi_def_cfa_offset 128
 9297 0004 00AF     	 add r7,sp,#0
 9298              	.LCFI304:
 9299              	 .cfi_def_cfa_register 7
 9300 0006 7860     	 str r0,[r7,#4]
4949:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
4950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj, sdj;
4951:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dclst = 0;
 9301              	 .loc 1 4951 0
 9302 0008 0023     	 movs r3,#0
 9303 000a 3B67     	 str r3,[r7,#112]
4952:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
4953:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4954:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID obj;
4955:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4956:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
4957:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4958:../Dave/Generated/FATFS/ff_Src/ff.c **** 
4959:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
4960:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);
 9304              	 .loc 1 4960 0
 9305 000c 3A1D     	 adds r2,r7,#4
 9306 000e 07F10C03 	 add r3,r7,#12
 9307 0012 1046     	 mov r0,r2
 9308 0014 1946     	 mov r1,r3
 9309 0016 0222     	 movs r2,#2
 9310 0018 FFF7FEFF 	 bl mount_volume
 9311 001c 0346     	 mov r3,r0
 9312 001e 87F87730 	 strb r3,[r7,#119]
4961:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9313              	 .loc 1 4961 0
 9314 0022 97F87730 	 ldrb r3,[r7,#119]
 9315 0026 002B     	 cmp r3,#0
 9316 0028 40F0A780 	 bne .L577
4962:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9317              	 .loc 1 4962 0
 9318 002c FB68     	 ldr r3,[r7,#12]
 9319 002e 3B64     	 str r3,[r7,#64]
4963:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
4964:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);		/* Follow the file path */
 9320              	 .loc 1 4964 0
 9321 0030 7B68     	 ldr r3,[r7,#4]
 9322 0032 07F14002 	 add r2,r7,#64
 9323 0036 1046     	 mov r0,r2
 9324 0038 1946     	 mov r1,r3
 9325 003a FFF7FEFF 	 bl follow_path
 9326 003e 0346     	 mov r3,r0
 9327 0040 87F87730 	 strb r3,[r7,#119]
4965:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
 9328              	 .loc 1 4965 0
 9329 0044 97F87730 	 ldrb r3,[r7,#119]
 9330 0048 002B     	 cmp r3,#0
 9331 004a 08D1     	 bne .L578
 9332              	 .loc 1 4965 0 is_stmt 0 discriminator 1
 9333 004c 97F86F30 	 ldrb r3,[r7,#111]
 9334 0050 03F02003 	 and r3,r3,#32
 9335 0054 002B     	 cmp r3,#0
 9336 0056 02D0     	 beq .L578
4966:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 9337              	 .loc 1 4966 0 is_stmt 1
 9338 0058 0623     	 movs r3,#6
 9339 005a 87F87730 	 strb r3,[r7,#119]
 9340              	.L578:
4967:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
4968:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
4969:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 9341              	 .loc 1 4969 0
 9342 005e 97F87730 	 ldrb r3,[r7,#119]
 9343 0062 002B     	 cmp r3,#0
 9344 0064 08D1     	 bne .L579
 9345              	 .loc 1 4969 0 is_stmt 0 discriminator 1
 9346 0066 07F14003 	 add r3,r7,#64
 9347 006a 1846     	 mov r0,r3
 9348 006c 0221     	 movs r1,#2
 9349 006e FFF7FEFF 	 bl chk_lock
 9350 0072 0346     	 mov r3,r0
 9351 0074 87F87730 	 strb r3,[r7,#119]
 9352              	.L579:
4970:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4971:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {					/* The object is accessible */
 9353              	 .loc 1 4971 0 is_stmt 1
 9354 0078 97F87730 	 ldrb r3,[r7,#119]
 9355 007c 002B     	 cmp r3,#0
 9356 007e 7CD1     	 bne .L577
4972:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dj.fn[NSFLAG] & NS_NONAME) {
 9357              	 .loc 1 4972 0
 9358 0080 97F86F30 	 ldrb r3,[r7,#111]
 9359 0084 DBB2     	 uxtb r3,r3
 9360 0086 5BB2     	 sxtb r3,r3
 9361 0088 002B     	 cmp r3,#0
 9362 008a 03DA     	 bge .L580
4973:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 9363              	 .loc 1 4973 0
 9364 008c 0623     	 movs r3,#6
 9365 008e 87F87730 	 strb r3,[r7,#119]
 9366 0092 08E0     	 b .L581
 9367              	.L580:
4974:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
4975:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_RDO) {
 9368              	 .loc 1 4975 0
 9369 0094 97F84630 	 ldrb r3,[r7,#70]
 9370 0098 03F00103 	 and r3,r3,#1
 9371 009c 002B     	 cmp r3,#0
 9372 009e 02D0     	 beq .L581
4976:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = FR_DENIED;		/* Cannot remove R/O object */
 9373              	 .loc 1 4976 0
 9374 00a0 0723     	 movs r3,#7
 9375 00a2 87F87730 	 strb r3,[r7,#119]
 9376              	.L581:
4977:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4978:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
4979:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9377              	 .loc 1 4979 0
 9378 00a6 97F87730 	 ldrb r3,[r7,#119]
 9379 00aa 002B     	 cmp r3,#0
 9380 00ac 3DD1     	 bne .L582
4980:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
4981:../Dave/Generated/FATFS/ff_Src/ff.c **** 				obj.fs = fs;
4982:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
4983:../Dave/Generated/FATFS/ff_Src/ff.c **** 					init_alloc_info(fs, &obj);
4984:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = obj.sclust;
4985:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
4986:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4987:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
4988:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dclst = ld_clust(fs, dj.dir);
 9381              	 .loc 1 4988 0
 9382 00ae FA68     	 ldr r2,[r7,#12]
 9383 00b0 3B6E     	 ldr r3,[r7,#96]
 9384 00b2 1046     	 mov r0,r2
 9385 00b4 1946     	 mov r1,r3
 9386 00b6 FFF7FEFF 	 bl ld_clust
 9387 00ba 3867     	 str r0,[r7,#112]
4989:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
4990:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 9388              	 .loc 1 4990 0
 9389 00bc 97F84630 	 ldrb r3,[r7,#70]
 9390 00c0 03F01003 	 and r3,r3,#16
 9391 00c4 002B     	 cmp r3,#0
 9392 00c6 30D0     	 beq .L582
4991:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_RPATH != 0
4992:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (dclst == fs->cdir) {		 	/* Is it the current directory? */
 9393              	 .loc 1 4992 0
 9394 00c8 FB68     	 ldr r3,[r7,#12]
 9395 00ca 5A69     	 ldr r2,[r3,#20]
 9396 00cc 3B6F     	 ldr r3,[r7,#112]
 9397 00ce 9A42     	 cmp r2,r3
 9398 00d0 03D1     	 bne .L583
4993:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = FR_DENIED;
 9399              	 .loc 1 4993 0
 9400 00d2 0723     	 movs r3,#7
 9401 00d4 87F87730 	 strb r3,[r7,#119]
 9402 00d8 27E0     	 b .L582
 9403              	.L583:
4994:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} else
4995:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
4996:../Dave/Generated/FATFS/ff_Src/ff.c **** 					{
4997:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.fs = fs;				/* Open the sub-directory */
 9404              	 .loc 1 4997 0
 9405 00da FB68     	 ldr r3,[r7,#12]
 9406 00dc 3B61     	 str r3,[r7,#16]
4998:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sdj.obj.sclust = dclst;
 9407              	 .loc 1 4998 0
 9408 00de 3B6F     	 ldr r3,[r7,#112]
 9409 00e0 BB61     	 str r3,[r7,#24]
4999:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5000:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (fs->fs_type == FS_EXFAT) {
5001:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.objsize = obj.objsize;
5002:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sdj.obj.stat = obj.stat;
5003:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5004:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5005:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = dir_sdi(&sdj, 0);
 9410              	 .loc 1 5005 0
 9411 00e2 07F11003 	 add r3,r7,#16
 9412 00e6 1846     	 mov r0,r3
 9413 00e8 0021     	 movs r1,#0
 9414 00ea FFF7FEFF 	 bl dir_sdi
 9415 00ee 0346     	 mov r3,r0
 9416 00f0 87F87730 	 strb r3,[r7,#119]
5006:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (res == FR_OK) {
 9417              	 .loc 1 5006 0
 9418 00f4 97F87730 	 ldrb r3,[r7,#119]
 9419 00f8 002B     	 cmp r3,#0
 9420 00fa 16D1     	 bne .L582
5007:../Dave/Generated/FATFS/ff_Src/ff.c **** 							res = DIR_READ_FILE(&sdj);			/* Test if the directory is empty */
 9421              	 .loc 1 5007 0
 9422 00fc 07F11003 	 add r3,r7,#16
 9423 0100 1846     	 mov r0,r3
 9424 0102 0021     	 movs r1,#0
 9425 0104 FFF7FEFF 	 bl dir_read
 9426 0108 0346     	 mov r3,r0
 9427 010a 87F87730 	 strb r3,[r7,#119]
5008:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 9428              	 .loc 1 5008 0
 9429 010e 97F87730 	 ldrb r3,[r7,#119]
 9430 0112 002B     	 cmp r3,#0
 9431 0114 02D1     	 bne .L584
 9432              	 .loc 1 5008 0 is_stmt 0 discriminator 1
 9433 0116 0723     	 movs r3,#7
 9434 0118 87F87730 	 strb r3,[r7,#119]
 9435              	.L584:
5009:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 9436              	 .loc 1 5009 0 is_stmt 1
 9437 011c 97F87730 	 ldrb r3,[r7,#119]
 9438 0120 042B     	 cmp r3,#4
 9439 0122 02D1     	 bne .L582
 9440              	 .loc 1 5009 0 is_stmt 0 discriminator 1
 9441 0124 0023     	 movs r3,#0
 9442 0126 87F87730 	 strb r3,[r7,#119]
 9443              	.L582:
5010:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5011:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5012:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5013:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5014:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9444              	 .loc 1 5014 0 is_stmt 1
 9445 012a 97F87730 	 ldrb r3,[r7,#119]
 9446 012e 002B     	 cmp r3,#0
 9447 0130 23D1     	 bne .L577
5015:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&dj);			/* Remove the directory entry */
 9448              	 .loc 1 5015 0
 9449 0132 07F14003 	 add r3,r7,#64
 9450 0136 1846     	 mov r0,r3
 9451 0138 FFF7FEFF 	 bl dir_remove
 9452 013c 0346     	 mov r3,r0
 9453 013e 87F87730 	 strb r3,[r7,#119]
5016:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK && dclst != 0) {	/* Remove the cluster chain if exist */
 9454              	 .loc 1 5016 0
 9455 0142 97F87730 	 ldrb r3,[r7,#119]
 9456 0146 002B     	 cmp r3,#0
 9457 0148 0CD1     	 bne .L585
 9458              	 .loc 1 5016 0 is_stmt 0 discriminator 1
 9459 014a 3B6F     	 ldr r3,[r7,#112]
 9460 014c 002B     	 cmp r3,#0
 9461 014e 09D0     	 beq .L585
5017:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5018:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&obj, dclst, 0);
5019:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5020:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = remove_chain(&dj.obj, dclst, 0);
 9462              	 .loc 1 5020 0 is_stmt 1
 9463 0150 07F14003 	 add r3,r7,#64
 9464 0154 1846     	 mov r0,r3
 9465 0156 396F     	 ldr r1,[r7,#112]
 9466 0158 0022     	 movs r2,#0
 9467 015a FFF7FEFF 	 bl remove_chain
 9468 015e 0346     	 mov r3,r0
 9469 0160 87F87730 	 strb r3,[r7,#119]
 9470              	.L585:
5021:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5022:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5023:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) res = sync_fs(fs);
 9471              	 .loc 1 5023 0
 9472 0164 97F87730 	 ldrb r3,[r7,#119]
 9473 0168 002B     	 cmp r3,#0
 9474 016a 06D1     	 bne .L577
 9475              	 .loc 1 5023 0 is_stmt 0 discriminator 1
 9476 016c FB68     	 ldr r3,[r7,#12]
 9477 016e 1846     	 mov r0,r3
 9478 0170 FFF7FEFF 	 bl sync_fs
 9479 0174 0346     	 mov r3,r0
 9480 0176 87F87730 	 strb r3,[r7,#119]
 9481              	.L577:
5024:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5025:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5026:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5027:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5028:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5029:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9482              	 .loc 1 5029 0 is_stmt 1
 9483 017a 97F87730 	 ldrb r3,[r7,#119]
5030:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9484              	 .loc 1 5030 0
 9485 017e 1846     	 mov r0,r3
 9486 0180 7837     	 adds r7,r7,#120
 9487              	.LCFI305:
 9488              	 .cfi_def_cfa_offset 8
 9489 0182 BD46     	 mov sp,r7
 9490              	.LCFI306:
 9491              	 .cfi_def_cfa_register 13
 9492              	 
 9493 0184 80BD     	 pop {r7,pc}
 9494              	 .cfi_endproc
 9495              	.LFE57:
 9497 0186 00BF     	 .section .text.f_mkdir,"ax",%progbits
 9498              	 .align 2
 9499              	 .global f_mkdir
 9500              	 .thumb
 9501              	 .thumb_func
 9503              	f_mkdir:
 9504              	.LFB58:
5031:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5032:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5033:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5034:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5035:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5036:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create a Directory                                                    */
5037:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5038:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5039:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkdir (
5040:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path		/* Pointer to the directory path */
5041:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5042:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9505              	 .loc 1 5042 0
 9506              	 .cfi_startproc
 9507              	 
 9508              	 
 9509 0000 80B5     	 push {r7,lr}
 9510              	.LCFI307:
 9511              	 .cfi_def_cfa_offset 8
 9512              	 .cfi_offset 7,-8
 9513              	 .cfi_offset 14,-4
 9514 0002 98B0     	 sub sp,sp,#96
 9515              	.LCFI308:
 9516              	 .cfi_def_cfa_offset 104
 9517 0004 00AF     	 add r7,sp,#0
 9518              	.LCFI309:
 9519              	 .cfi_def_cfa_register 7
 9520 0006 7860     	 str r0,[r7,#4]
5043:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5044:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5045:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FFOBJID sobj;
5046:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5047:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dcl, pcl, tm;
5048:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5049:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5050:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5051:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
 9521              	 .loc 1 5051 0
 9522 0008 3A1D     	 adds r2,r7,#4
 9523 000a 07F10803 	 add r3,r7,#8
 9524 000e 1046     	 mov r0,r2
 9525 0010 1946     	 mov r1,r3
 9526 0012 0222     	 movs r2,#2
 9527 0014 FFF7FEFF 	 bl mount_volume
 9528 0018 0346     	 mov r3,r0
 9529 001a 87F85F30 	 strb r3,[r7,#95]
5052:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9530              	 .loc 1 5052 0
 9531 001e 97F85F30 	 ldrb r3,[r7,#95]
 9532 0022 002B     	 cmp r3,#0
 9533 0024 40F0C280 	 bne .L588
5053:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
 9534              	 .loc 1 5053 0
 9535 0028 BB68     	 ldr r3,[r7,#8]
 9536 002a 3B62     	 str r3,[r7,#32]
5054:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5055:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);			/* Follow the file path */
 9537              	 .loc 1 5055 0
 9538 002c 7B68     	 ldr r3,[r7,#4]
 9539 002e 07F12002 	 add r2,r7,#32
 9540 0032 1046     	 mov r0,r2
 9541 0034 1946     	 mov r1,r3
 9542 0036 FFF7FEFF 	 bl follow_path
 9543 003a 0346     	 mov r3,r0
 9544 003c 87F85F30 	 strb r3,[r7,#95]
5056:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) res = FR_EXIST;		/* Name collision? */
 9545              	 .loc 1 5056 0
 9546 0040 97F85F30 	 ldrb r3,[r7,#95]
 9547 0044 002B     	 cmp r3,#0
 9548 0046 02D1     	 bne .L589
 9549              	 .loc 1 5056 0 is_stmt 0 discriminator 1
 9550 0048 0823     	 movs r3,#8
 9551 004a 87F85F30 	 strb r3,[r7,#95]
 9552              	.L589:
5057:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {	/* Invalid name? */
 9553              	 .loc 1 5057 0 is_stmt 1
 9554 004e 97F85F30 	 ldrb r3,[r7,#95]
 9555 0052 042B     	 cmp r3,#4
 9556 0054 08D1     	 bne .L590
 9557              	 .loc 1 5057 0 is_stmt 0 discriminator 1
 9558 0056 97F84F30 	 ldrb r3,[r7,#79]
 9559 005a 03F02003 	 and r3,r3,#32
 9560 005e 002B     	 cmp r3,#0
 9561 0060 02D0     	 beq .L590
5058:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_INVALID_NAME;
 9562              	 .loc 1 5058 0 is_stmt 1
 9563 0062 0623     	 movs r3,#6
 9564 0064 87F85F30 	 strb r3,[r7,#95]
 9565              	.L590:
5059:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5060:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {				/* It is clear to create a new directory */
 9566              	 .loc 1 5060 0
 9567 0068 97F85F30 	 ldrb r3,[r7,#95]
 9568 006c 042B     	 cmp r3,#4
 9569 006e 40F09D80 	 bne .L588
5061:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sobj.fs = fs;						/* New object id to create a new chain */
 9570              	 .loc 1 5061 0
 9571 0072 BB68     	 ldr r3,[r7,#8]
 9572 0074 FB60     	 str r3,[r7,#12]
5062:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dcl = create_chain(&sobj, 0);		/* Allocate a cluster for the new directory */
 9573              	 .loc 1 5062 0
 9574 0076 07F10C03 	 add r3,r7,#12
 9575 007a 1846     	 mov r0,r3
 9576 007c 0021     	 movs r1,#0
 9577 007e FFF7FEFF 	 bl create_chain
 9578 0082 B865     	 str r0,[r7,#88]
5063:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
 9579              	 .loc 1 5063 0
 9580 0084 0023     	 movs r3,#0
 9581 0086 87F85F30 	 strb r3,[r7,#95]
5064:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster? */
 9582              	 .loc 1 5064 0
 9583 008a BB6D     	 ldr r3,[r7,#88]
 9584 008c 002B     	 cmp r3,#0
 9585 008e 02D1     	 bne .L591
 9586              	 .loc 1 5064 0 is_stmt 0 discriminator 1
 9587 0090 0723     	 movs r3,#7
 9588 0092 87F85F30 	 strb r3,[r7,#95]
 9589              	.L591:
5065:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 1) res = FR_INT_ERR;		/* Any insanity? */
 9590              	 .loc 1 5065 0 is_stmt 1
 9591 0096 BB6D     	 ldr r3,[r7,#88]
 9592 0098 012B     	 cmp r3,#1
 9593 009a 02D1     	 bne .L592
 9594              	 .loc 1 5065 0 is_stmt 0 discriminator 1
 9595 009c 0223     	 movs r3,#2
 9596 009e 87F85F30 	 strb r3,[r7,#95]
 9597              	.L592:
5066:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;	/* Disk error? */
 9598              	 .loc 1 5066 0 is_stmt 1
 9599 00a2 BB6D     	 ldr r3,[r7,#88]
 9600 00a4 B3F1FF3F 	 cmp r3,#-1
 9601 00a8 02D1     	 bne .L593
 9602              	 .loc 1 5066 0 is_stmt 0 discriminator 1
 9603 00aa 0123     	 movs r3,#1
 9604 00ac 87F85F30 	 strb r3,[r7,#95]
 9605              	.L593:
5067:../Dave/Generated/FATFS/ff_Src/ff.c **** 			tm = GET_FATTIME();
 9606              	 .loc 1 5067 0 is_stmt 1
 9607 00b0 FFF7FEFF 	 bl get_fattime
 9608 00b4 7865     	 str r0,[r7,#84]
5068:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9609              	 .loc 1 5068 0
 9610 00b6 97F85F30 	 ldrb r3,[r7,#95]
 9611 00ba 002B     	 cmp r3,#0
 9612 00bc 4BD1     	 bne .L594
5069:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_clear(fs, dcl);		/* Clean up the new table */
 9613              	 .loc 1 5069 0
 9614 00be BB68     	 ldr r3,[r7,#8]
 9615 00c0 1846     	 mov r0,r3
 9616 00c2 B96D     	 ldr r1,[r7,#88]
 9617 00c4 FFF7FEFF 	 bl dir_clear
 9618 00c8 0346     	 mov r3,r0
 9619 00ca 87F85F30 	 strb r3,[r7,#95]
5070:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9620              	 .loc 1 5070 0
 9621 00ce 97F85F30 	 ldrb r3,[r7,#95]
 9622 00d2 002B     	 cmp r3,#0
 9623 00d4 3FD1     	 bne .L594
5071:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {	/* Create dot entries (FAT only) */
5072:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_set(fs->win + DIR_Name, ' ', 11);	/* Create "." entry */
 9624              	 .loc 1 5072 0
 9625 00d6 BB68     	 ldr r3,[r7,#8]
 9626 00d8 3433     	 adds r3,r3,#52
 9627 00da 1846     	 mov r0,r3
 9628 00dc 2021     	 movs r1,#32
 9629 00de 0B22     	 movs r2,#11
 9630 00e0 FFF7FEFF 	 bl mem_set
5073:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[DIR_Name] = '.';
 9631              	 .loc 1 5073 0
 9632 00e4 BB68     	 ldr r3,[r7,#8]
 9633 00e6 2E22     	 movs r2,#46
 9634 00e8 83F83420 	 strb r2,[r3,#52]
5074:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[DIR_Attr] = AM_DIR;
 9635              	 .loc 1 5074 0
 9636 00ec BB68     	 ldr r3,[r7,#8]
 9637 00ee 1022     	 movs r2,#16
 9638 00f0 83F83F20 	 strb r2,[r3,#63]
5075:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_dword(fs->win + DIR_ModTime, tm);
 9639              	 .loc 1 5075 0
 9640 00f4 BB68     	 ldr r3,[r7,#8]
 9641 00f6 4A33     	 adds r3,r3,#74
 9642 00f8 1846     	 mov r0,r3
 9643 00fa 796D     	 ldr r1,[r7,#84]
 9644 00fc FFF7FEFF 	 bl st_dword
5076:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_clust(fs, fs->win, dcl);
 9645              	 .loc 1 5076 0
 9646 0100 BA68     	 ldr r2,[r7,#8]
 9647 0102 BB68     	 ldr r3,[r7,#8]
 9648 0104 3433     	 adds r3,r3,#52
 9649 0106 1046     	 mov r0,r2
 9650 0108 1946     	 mov r1,r3
 9651 010a BA6D     	 ldr r2,[r7,#88]
 9652 010c FFF7FEFF 	 bl st_clust
5077:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(fs->win + SZDIRE, fs->win, SZDIRE); /* Create ".." entry */
 9653              	 .loc 1 5077 0
 9654 0110 BB68     	 ldr r3,[r7,#8]
 9655 0112 03F15402 	 add r2,r3,#84
 9656 0116 BB68     	 ldr r3,[r7,#8]
 9657 0118 3433     	 adds r3,r3,#52
 9658 011a 1046     	 mov r0,r2
 9659 011c 1946     	 mov r1,r3
 9660 011e 2022     	 movs r2,#32
 9661 0120 FFF7FEFF 	 bl mem_cpy
5078:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->win[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 9662              	 .loc 1 5078 0
 9663 0124 BB68     	 ldr r3,[r7,#8]
 9664 0126 2E22     	 movs r2,#46
 9665 0128 83F85520 	 strb r2,[r3,#85]
 9666 012c BB6A     	 ldr r3,[r7,#40]
 9667 012e 3B65     	 str r3,[r7,#80]
5079:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_clust(fs, fs->win + SZDIRE, pcl);
 9668              	 .loc 1 5079 0
 9669 0130 BA68     	 ldr r2,[r7,#8]
 9670 0132 BB68     	 ldr r3,[r7,#8]
 9671 0134 5433     	 adds r3,r3,#84
 9672 0136 1046     	 mov r0,r2
 9673 0138 1946     	 mov r1,r3
 9674 013a 3A6D     	 ldr r2,[r7,#80]
 9675 013c FFF7FEFF 	 bl st_clust
5080:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
 9676              	 .loc 1 5080 0
 9677 0140 BB68     	 ldr r3,[r7,#8]
 9678 0142 0122     	 movs r2,#1
 9679 0144 DA70     	 strb r2,[r3,#3]
5081:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5082:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&dj);	/* Register the object to the parent directoy */
 9680              	 .loc 1 5082 0
 9681 0146 07F12003 	 add r3,r7,#32
 9682 014a 1846     	 mov r0,r3
 9683 014c FFF7FEFF 	 bl dir_register
 9684 0150 0346     	 mov r3,r0
 9685 0152 87F85F30 	 strb r3,[r7,#95]
 9686              	.L594:
5083:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9687              	 .loc 1 5085 0
 9688 0156 97F85F30 	 ldrb r3,[r7,#95]
 9689 015a 002B     	 cmp r3,#0
 9690 015c 1FD1     	 bne .L595
5086:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5087:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {	/* Initialize directory entry block */
5088:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ModTime, tm);	/* Created time */
5089:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FstClus, dcl);	/* Table start cluster */
5090:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_FileSize, (DWORD)fs->csize * SS(fs));	/* Directory size needs to be
5091:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(fs->dirbuf + XDIR_ValidFileSize, (DWORD)fs->csize * SS(fs));
5092:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_GenFlags] = 3;				/* Initialize the object flag */
5093:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
5094:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = store_xdir(&dj);
5095:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
5096:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5097:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
5098:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(dj.dir + DIR_ModTime, tm);	/* Created time */
 9691              	 .loc 1 5098 0
 9692 015e 3B6C     	 ldr r3,[r7,#64]
 9693 0160 1633     	 adds r3,r3,#22
 9694 0162 1846     	 mov r0,r3
 9695 0164 796D     	 ldr r1,[r7,#84]
 9696 0166 FFF7FEFF 	 bl st_dword
5099:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_clust(fs, dj.dir, dcl);			/* Table start cluster */
 9697              	 .loc 1 5099 0
 9698 016a BA68     	 ldr r2,[r7,#8]
 9699 016c 3B6C     	 ldr r3,[r7,#64]
 9700 016e 1046     	 mov r0,r2
 9701 0170 1946     	 mov r1,r3
 9702 0172 BA6D     	 ldr r2,[r7,#88]
 9703 0174 FFF7FEFF 	 bl st_clust
5100:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Attr] = AM_DIR;			/* Attribute */
 9704              	 .loc 1 5100 0
 9705 0178 3B6C     	 ldr r3,[r7,#64]
 9706 017a 0B33     	 adds r3,r3,#11
 9707 017c 1022     	 movs r2,#16
 9708 017e 1A70     	 strb r2,[r3]
5101:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fs->wflag = 1;
 9709              	 .loc 1 5101 0
 9710 0180 BB68     	 ldr r3,[r7,#8]
 9711 0182 0122     	 movs r2,#1
 9712 0184 DA70     	 strb r2,[r3,#3]
5102:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5103:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 9713              	 .loc 1 5103 0
 9714 0186 97F85F30 	 ldrb r3,[r7,#95]
 9715 018a 002B     	 cmp r3,#0
 9716 018c 0ED1     	 bne .L588
5104:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 9717              	 .loc 1 5104 0
 9718 018e BB68     	 ldr r3,[r7,#8]
 9719 0190 1846     	 mov r0,r3
 9720 0192 FFF7FEFF 	 bl sync_fs
 9721 0196 0346     	 mov r3,r0
 9722 0198 87F85F30 	 strb r3,[r7,#95]
 9723 019c 06E0     	 b .L588
 9724              	.L595:
5105:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5106:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5107:../Dave/Generated/FATFS/ff_Src/ff.c **** 				remove_chain(&sobj, dcl, 0);		/* Could not register, remove the allocated cluster */
 9725              	 .loc 1 5107 0
 9726 019e 07F10C03 	 add r3,r7,#12
 9727 01a2 1846     	 mov r0,r3
 9728 01a4 B96D     	 ldr r1,[r7,#88]
 9729 01a6 0022     	 movs r2,#0
 9730 01a8 FFF7FEFF 	 bl remove_chain
 9731              	.L588:
5108:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5109:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5110:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5111:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5112:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5113:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 9732              	 .loc 1 5113 0
 9733 01ac 97F85F30 	 ldrb r3,[r7,#95]
5114:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 9734              	 .loc 1 5114 0
 9735 01b0 1846     	 mov r0,r3
 9736 01b2 6037     	 adds r7,r7,#96
 9737              	.LCFI310:
 9738              	 .cfi_def_cfa_offset 8
 9739 01b4 BD46     	 mov sp,r7
 9740              	.LCFI311:
 9741              	 .cfi_def_cfa_register 13
 9742              	 
 9743 01b6 80BD     	 pop {r7,pc}
 9744              	 .cfi_endproc
 9745              	.LFE58:
 9747              	 .section .text.f_rename,"ax",%progbits
 9748              	 .align 2
 9749              	 .global f_rename
 9750              	 .thumb
 9751              	 .thumb_func
 9753              	f_rename:
 9754              	.LFB59:
5115:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5116:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5117:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5118:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5119:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5120:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Rename a File/Directory                                               */
5121:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5122:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5123:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_rename (
5124:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_old,	/* Pointer to the object name to be renamed */
5125:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path_new	/* Pointer to the new name */
5126:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5127:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 9755              	 .loc 1 5127 0
 9756              	 .cfi_startproc
 9757              	 
 9758              	 
 9759 0000 90B5     	 push {r4,r7,lr}
 9760              	.LCFI312:
 9761              	 .cfi_def_cfa_offset 12
 9762              	 .cfi_offset 4,-12
 9763              	 .cfi_offset 7,-8
 9764              	 .cfi_offset 14,-4
 9765 0002 A7B0     	 sub sp,sp,#156
 9766              	.LCFI313:
 9767              	 .cfi_def_cfa_offset 168
 9768 0004 00AF     	 add r7,sp,#0
 9769              	.LCFI314:
 9770              	 .cfi_def_cfa_register 7
 9771 0006 7860     	 str r0,[r7,#4]
 9772 0008 3960     	 str r1,[r7]
5128:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5129:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR djo, djn;
5130:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5131:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[FF_FS_EXFAT ? SZDIRE * 2 : SZDIRE], *dir;
5132:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
5133:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5134:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5135:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5136:../Dave/Generated/FATFS/ff_Src/ff.c **** 	get_ldnumber(&path_new);						/* Snip the drive number of new name off */
 9773              	 .loc 1 5136 0
 9774 000a 3B46     	 mov r3,r7
 9775 000c 1846     	 mov r0,r3
 9776 000e FFF7FEFF 	 bl get_ldnumber
5137:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path_old, &fs, FA_WRITE);	/* Get logical drive of the old object */
 9777              	 .loc 1 5137 0
 9778 0012 3A1D     	 adds r2,r7,#4
 9779 0014 07F12803 	 add r3,r7,#40
 9780 0018 1046     	 mov r0,r2
 9781 001a 1946     	 mov r1,r3
 9782 001c 0222     	 movs r2,#2
 9783 001e FFF7FEFF 	 bl mount_volume
 9784 0022 0346     	 mov r3,r0
 9785 0024 87F89730 	 strb r3,[r7,#151]
5138:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
 9786              	 .loc 1 5138 0
 9787 0028 97F89730 	 ldrb r3,[r7,#151]
 9788 002c 002B     	 cmp r3,#0
 9789 002e 40F0EC80 	 bne .L599
5139:../Dave/Generated/FATFS/ff_Src/ff.c **** 		djo.obj.fs = fs;
 9790              	 .loc 1 5139 0
 9791 0032 BB6A     	 ldr r3,[r7,#40]
 9792 0034 FB65     	 str r3,[r7,#92]
5140:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5141:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&djo, path_old);		/* Check old object */
 9793              	 .loc 1 5141 0
 9794 0036 7B68     	 ldr r3,[r7,#4]
 9795 0038 07F15C02 	 add r2,r7,#92
 9796 003c 1046     	 mov r0,r2
 9797 003e 1946     	 mov r1,r3
 9798 0040 FFF7FEFF 	 bl follow_path
 9799 0044 0346     	 mov r3,r0
 9800 0046 87F89730 	 strb r3,[r7,#151]
5142:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (djo.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check vali
 9801              	 .loc 1 5142 0
 9802 004a 97F89730 	 ldrb r3,[r7,#151]
 9803 004e 002B     	 cmp r3,#0
 9804 0050 08D1     	 bne .L600
 9805              	 .loc 1 5142 0 is_stmt 0 discriminator 1
 9806 0052 97F88B30 	 ldrb r3,[r7,#139]
 9807 0056 03F0A003 	 and r3,r3,#160
 9808 005a 002B     	 cmp r3,#0
 9809 005c 02D0     	 beq .L600
 9810              	 .loc 1 5142 0 discriminator 2
 9811 005e 0623     	 movs r3,#6
 9812 0060 87F89730 	 strb r3,[r7,#151]
 9813              	.L600:
5143:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_LOCK != 0
5144:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
 9814              	 .loc 1 5144 0 is_stmt 1
 9815 0064 97F89730 	 ldrb r3,[r7,#151]
 9816 0068 002B     	 cmp r3,#0
 9817 006a 08D1     	 bne .L601
5145:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = chk_lock(&djo, 2);
 9818              	 .loc 1 5145 0
 9819 006c 07F15C03 	 add r3,r7,#92
 9820 0070 1846     	 mov r0,r3
 9821 0072 0221     	 movs r1,#2
 9822 0074 FFF7FEFF 	 bl chk_lock
 9823 0078 0346     	 mov r3,r0
 9824 007a 87F89730 	 strb r3,[r7,#151]
 9825              	.L601:
5146:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5147:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5148:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {						/* Object to be renamed is found */
 9826              	 .loc 1 5148 0
 9827 007e 97F89730 	 ldrb r3,[r7,#151]
 9828 0082 002B     	 cmp r3,#0
 9829 0084 40F0C180 	 bne .L599
5149:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5150:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {	/* At exFAT volume */
5151:../Dave/Generated/FATFS/ff_Src/ff.c **** 				BYTE nf, nn;
5152:../Dave/Generated/FATFS/ff_Src/ff.c **** 				WORD nh;
5153:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5154:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
5155:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof djo);
5156:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
5157:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
5158:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
5159:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5160:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
5161:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
5162:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
5163:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nf = fs->dirbuf[XDIR_NumSec]; nn = fs->dirbuf[XDIR_NumName];
5164:../Dave/Generated/FATFS/ff_Src/ff.c **** 						nh = ld_word(fs->dirbuf + XDIR_NameHash);
5165:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(fs->dirbuf, buf, SZDIRE * 2);	/* Restore 85+C0 entry */
5166:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->dirbuf[XDIR_NumSec] = nf; fs->dirbuf[XDIR_NumName] = nn;
5167:../Dave/Generated/FATFS/ff_Src/ff.c **** 						st_word(fs->dirbuf + XDIR_NameHash, nh);
5168:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(fs->dirbuf[XDIR_Attr] & AM_DIR)) fs->dirbuf[XDIR_Attr] |= AM_ARC;	/* Set archive attrib
5169:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5170:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = store_xdir(&djn);
5171:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5172:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5173:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5174:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5175:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{	/* At FAT/FAT32 volume */
5176:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf, djo.dir, SZDIRE);			/* Save directory entry of the object */
 9830              	 .loc 1 5176 0
 9831 0088 FB6F     	 ldr r3,[r7,#124]
 9832 008a 07F10802 	 add r2,r7,#8
 9833 008e 1046     	 mov r0,r2
 9834 0090 1946     	 mov r1,r3
 9835 0092 2022     	 movs r2,#32
 9836 0094 FFF7FEFF 	 bl mem_cpy
5177:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
 9837              	 .loc 1 5177 0
 9838 0098 07F12C02 	 add r2,r7,#44
 9839 009c 07F15C03 	 add r3,r7,#92
 9840 00a0 1046     	 mov r0,r2
 9841 00a2 1946     	 mov r1,r3
 9842 00a4 3022     	 movs r2,#48
 9843 00a6 FFF7FEFF 	 bl mem_cpy
5178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
 9844              	 .loc 1 5178 0
 9845 00aa 3B68     	 ldr r3,[r7]
 9846 00ac 07F12C02 	 add r2,r7,#44
 9847 00b0 1046     	 mov r0,r2
 9848 00b2 1946     	 mov r1,r3
 9849 00b4 FFF7FEFF 	 bl follow_path
 9850 00b8 0346     	 mov r3,r0
 9851 00ba 87F89730 	 strb r3,[r7,#151]
5179:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {						/* Is new name already in use by any other object? */
 9852              	 .loc 1 5179 0
 9853 00be 97F89730 	 ldrb r3,[r7,#151]
 9854 00c2 002B     	 cmp r3,#0
 9855 00c4 0CD1     	 bne .L602
5180:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = (djn.obj.sclust == djo.obj.sclust && djn.dptr == djo.dptr) ? FR_NO_FILE : FR_EXIST;
 9856              	 .loc 1 5180 0
 9857 00c6 7A6B     	 ldr r2,[r7,#52]
 9858 00c8 7B6E     	 ldr r3,[r7,#100]
 9859 00ca 9A42     	 cmp r2,r3
 9860 00cc 05D1     	 bne .L603
 9861              	 .loc 1 5180 0 is_stmt 0 discriminator 1
 9862 00ce 3A6C     	 ldr r2,[r7,#64]
 9863 00d0 3B6F     	 ldr r3,[r7,#112]
 9864 00d2 9A42     	 cmp r2,r3
 9865 00d4 01D1     	 bne .L603
 9866              	 .loc 1 5180 0 discriminator 3
 9867 00d6 0423     	 movs r3,#4
 9868 00d8 00E0     	 b .L604
 9869              	.L603:
 9870              	 .loc 1 5180 0 discriminator 4
 9871 00da 0823     	 movs r3,#8
 9872              	.L604:
 9873              	 .loc 1 5180 0 discriminator 6
 9874 00dc 87F89730 	 strb r3,[r7,#151]
 9875              	.L602:
5181:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5182:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_NO_FILE) { 				/* It is a valid path and no name collision */
 9876              	 .loc 1 5182 0 is_stmt 1
 9877 00e0 97F89730 	 ldrb r3,[r7,#151]
 9878 00e4 042B     	 cmp r3,#4
 9879 00e6 79D1     	 bne .L605
5183:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_register(&djn);			/* Register the new entry */
 9880              	 .loc 1 5183 0
 9881 00e8 07F12C03 	 add r3,r7,#44
 9882 00ec 1846     	 mov r0,r3
 9883 00ee FFF7FEFF 	 bl dir_register
 9884 00f2 0346     	 mov r3,r0
 9885 00f4 87F89730 	 strb r3,[r7,#151]
5184:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
 9886              	 .loc 1 5184 0
 9887 00f8 97F89730 	 ldrb r3,[r7,#151]
 9888 00fc 002B     	 cmp r3,#0
 9889 00fe 6DD1     	 bne .L605
5185:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir = djn.dir;					/* Copy directory entry of the object except name */
 9890              	 .loc 1 5185 0
 9891 0100 FB6C     	 ldr r3,[r7,#76]
 9892 0102 C7F89030 	 str r3,[r7,#144]
5186:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_cpy(dir + 13, buf + 13, SZDIRE - 13);
 9893              	 .loc 1 5186 0
 9894 0106 D7F89030 	 ldr r3,[r7,#144]
 9895 010a 03F10D02 	 add r2,r3,#13
 9896 010e 07F10803 	 add r3,r7,#8
 9897 0112 0D33     	 adds r3,r3,#13
 9898 0114 1046     	 mov r0,r2
 9899 0116 1946     	 mov r1,r3
 9900 0118 1322     	 movs r2,#19
 9901 011a FFF7FEFF 	 bl mem_cpy
5187:../Dave/Generated/FATFS/ff_Src/ff.c **** 						dir[DIR_Attr] = buf[DIR_Attr];
 9902              	 .loc 1 5187 0
 9903 011e D7F89030 	 ldr r3,[r7,#144]
 9904 0122 0B33     	 adds r3,r3,#11
 9905 0124 FA7C     	 ldrb r2,[r7,#19]
 9906 0126 1A70     	 strb r2,[r3]
5188:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (!(dir[DIR_Attr] & AM_DIR)) dir[DIR_Attr] |= AM_ARC;	/* Set archive attribute if it is a f
 9907              	 .loc 1 5188 0
 9908 0128 D7F89030 	 ldr r3,[r7,#144]
 9909 012c 0B33     	 adds r3,r3,#11
 9910 012e 1B78     	 ldrb r3,[r3]
 9911 0130 03F01003 	 and r3,r3,#16
 9912 0134 002B     	 cmp r3,#0
 9913 0136 0AD1     	 bne .L606
 9914              	 .loc 1 5188 0 is_stmt 0 discriminator 1
 9915 0138 D7F89030 	 ldr r3,[r7,#144]
 9916 013c 0B33     	 adds r3,r3,#11
 9917 013e D7F89020 	 ldr r2,[r7,#144]
 9918 0142 0B32     	 adds r2,r2,#11
 9919 0144 1278     	 ldrb r2,[r2]
 9920 0146 42F02002 	 orr r2,r2,#32
 9921 014a D2B2     	 uxtb r2,r2
 9922 014c 1A70     	 strb r2,[r3]
 9923              	.L606:
5189:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
 9924              	 .loc 1 5189 0 is_stmt 1
 9925 014e BB6A     	 ldr r3,[r7,#40]
 9926 0150 0122     	 movs r2,#1
 9927 0152 DA70     	 strb r2,[r3,#3]
5190:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if ((dir[DIR_Attr] & AM_DIR) && djo.obj.sclust != djn.obj.sclust) {	/* Update .. entry in the
 9928              	 .loc 1 5190 0
 9929 0154 D7F89030 	 ldr r3,[r7,#144]
 9930 0158 0B33     	 adds r3,r3,#11
 9931 015a 1B78     	 ldrb r3,[r3]
 9932 015c 03F01003 	 and r3,r3,#16
 9933 0160 002B     	 cmp r3,#0
 9934 0162 3BD0     	 beq .L605
 9935              	 .loc 1 5190 0 is_stmt 0 discriminator 1
 9936 0164 7A6E     	 ldr r2,[r7,#100]
 9937 0166 7B6B     	 ldr r3,[r7,#52]
 9938 0168 9A42     	 cmp r2,r3
 9939 016a 37D0     	 beq .L605
5191:../Dave/Generated/FATFS/ff_Src/ff.c **** 							sect = clst2sect(fs, ld_clust(fs, dir));
 9940              	 .loc 1 5191 0 is_stmt 1
 9941 016c BC6A     	 ldr r4,[r7,#40]
 9942 016e BB6A     	 ldr r3,[r7,#40]
 9943 0170 1846     	 mov r0,r3
 9944 0172 D7F89010 	 ldr r1,[r7,#144]
 9945 0176 FFF7FEFF 	 bl ld_clust
 9946 017a 0346     	 mov r3,r0
 9947 017c 2046     	 mov r0,r4
 9948 017e 1946     	 mov r1,r3
 9949 0180 FFF7FEFF 	 bl clst2sect
 9950 0184 C7F88C00 	 str r0,[r7,#140]
5192:../Dave/Generated/FATFS/ff_Src/ff.c **** 							if (sect == 0) {
 9951              	 .loc 1 5192 0
 9952 0188 D7F88C30 	 ldr r3,[r7,#140]
 9953 018c 002B     	 cmp r3,#0
 9954 018e 03D1     	 bne .L607
5193:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = FR_INT_ERR;
 9955              	 .loc 1 5193 0
 9956 0190 0223     	 movs r3,#2
 9957 0192 87F89730 	 strb r3,[r7,#151]
 9958 0196 21E0     	 b .L605
 9959              	.L607:
5194:../Dave/Generated/FATFS/ff_Src/ff.c **** 							} else {
5195:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Start of critical section where an interruption can cause a cross-link */
5196:../Dave/Generated/FATFS/ff_Src/ff.c **** 								res = move_window(fs, sect);
 9960              	 .loc 1 5196 0
 9961 0198 BB6A     	 ldr r3,[r7,#40]
 9962 019a 1846     	 mov r0,r3
 9963 019c D7F88C10 	 ldr r1,[r7,#140]
 9964 01a0 FFF7FEFF 	 bl move_window
 9965 01a4 0346     	 mov r3,r0
 9966 01a6 87F89730 	 strb r3,[r7,#151]
5197:../Dave/Generated/FATFS/ff_Src/ff.c **** 								dir = fs->win + SZDIRE * 1;	/* Ptr to .. entry */
 9967              	 .loc 1 5197 0
 9968 01aa BB6A     	 ldr r3,[r7,#40]
 9969 01ac 5433     	 adds r3,r3,#84
 9970 01ae C7F89030 	 str r3,[r7,#144]
5198:../Dave/Generated/FATFS/ff_Src/ff.c **** 								if (res == FR_OK && dir[1] == '.') {
 9971              	 .loc 1 5198 0
 9972 01b2 97F89730 	 ldrb r3,[r7,#151]
 9973 01b6 002B     	 cmp r3,#0
 9974 01b8 10D1     	 bne .L605
 9975              	 .loc 1 5198 0 is_stmt 0 discriminator 1
 9976 01ba D7F89030 	 ldr r3,[r7,#144]
 9977 01be 0133     	 adds r3,r3,#1
 9978 01c0 1B78     	 ldrb r3,[r3]
 9979 01c2 2E2B     	 cmp r3,#46
 9980 01c4 0AD1     	 bne .L605
5199:../Dave/Generated/FATFS/ff_Src/ff.c **** 									st_clust(fs, dir, djn.obj.sclust);
 9981              	 .loc 1 5199 0 is_stmt 1
 9982 01c6 BA6A     	 ldr r2,[r7,#40]
 9983 01c8 7B6B     	 ldr r3,[r7,#52]
 9984 01ca 1046     	 mov r0,r2
 9985 01cc D7F89010 	 ldr r1,[r7,#144]
 9986 01d0 1A46     	 mov r2,r3
 9987 01d2 FFF7FEFF 	 bl st_clust
5200:../Dave/Generated/FATFS/ff_Src/ff.c **** 									fs->wflag = 1;
 9988              	 .loc 1 5200 0
 9989 01d6 BB6A     	 ldr r3,[r7,#40]
 9990 01d8 0122     	 movs r2,#1
 9991 01da DA70     	 strb r2,[r3,#3]
 9992              	.L605:
5201:../Dave/Generated/FATFS/ff_Src/ff.c **** 								}
5202:../Dave/Generated/FATFS/ff_Src/ff.c **** 							}
5203:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5204:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5205:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5206:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5207:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
 9993              	 .loc 1 5207 0
 9994 01dc 97F89730 	 ldrb r3,[r7,#151]
 9995 01e0 002B     	 cmp r3,#0
 9996 01e2 12D1     	 bne .L599
5208:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = dir_remove(&djo);		/* Remove old entry */
 9997              	 .loc 1 5208 0
 9998 01e4 07F15C03 	 add r3,r7,#92
 9999 01e8 1846     	 mov r0,r3
 10000 01ea FFF7FEFF 	 bl dir_remove
 10001 01ee 0346     	 mov r3,r0
 10002 01f0 87F89730 	 strb r3,[r7,#151]
5209:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (res == FR_OK) {
 10003              	 .loc 1 5209 0
 10004 01f4 97F89730 	 ldrb r3,[r7,#151]
 10005 01f8 002B     	 cmp r3,#0
 10006 01fa 06D1     	 bne .L599
5210:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = sync_fs(fs);
 10007              	 .loc 1 5210 0
 10008 01fc BB6A     	 ldr r3,[r7,#40]
 10009 01fe 1846     	 mov r0,r3
 10010 0200 FFF7FEFF 	 bl sync_fs
 10011 0204 0346     	 mov r3,r0
 10012 0206 87F89730 	 strb r3,[r7,#151]
 10013              	.L599:
5211:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5212:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5213:../Dave/Generated/FATFS/ff_Src/ff.c **** /* End of the critical section */
5214:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5215:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5216:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5217:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5218:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
 10014              	 .loc 1 5218 0
 10015 020a 97F89730 	 ldrb r3,[r7,#151]
5219:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10016              	 .loc 1 5219 0
 10017 020e 1846     	 mov r0,r3
 10018 0210 9C37     	 adds r7,r7,#156
 10019              	.LCFI315:
 10020              	 .cfi_def_cfa_offset 12
 10021 0212 BD46     	 mov sp,r7
 10022              	.LCFI316:
 10023              	 .cfi_def_cfa_register 13
 10024              	 
 10025 0214 90BD     	 pop {r4,r7,pc}
 10026              	 .cfi_endproc
 10027              	.LFE59:
 10029 0216 00BF     	 .section .text.f_gets,"ax",%progbits
 10030              	 .align 2
 10031              	 .global f_gets
 10032              	 .thumb
 10033              	 .thumb_func
 10035              	f_gets:
 10036              	.LFB60:
5220:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5221:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5222:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE == 0 */
5223:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 1 */
5224:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_FS_MINIMIZE <= 2 */
5225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5226:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5227:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5228:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_CHMOD && !FF_FS_READONLY
5229:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5230:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Attribute                                                      */
5231:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5232:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5233:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_chmod (
5234:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file path */
5235:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE attr,			/* Attribute bits */
5236:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE mask			/* Attribute mask to change */
5237:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5238:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5239:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5240:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5241:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5242:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5243:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5244:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5245:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5246:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5247:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5248:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5249:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5250:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5251:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5252:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mask &= AM_RDO|AM_HID|AM_SYS|AM_ARC;	/* Valid attribute mask */
5253:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5254:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5255:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->dirbuf[XDIR_Attr] = (attr & mask) | (fs->dirbuf[XDIR_Attr] & (BYTE)~mask);	/* Apply attribu
5256:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5257:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5258:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5259:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5260:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[DIR_Attr] = (attr & mask) | (dj.dir[DIR_Attr] & (BYTE)~mask);	/* Apply attribute change 
5261:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5262:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5263:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5264:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5265:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5266:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5267:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5268:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5269:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5270:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5271:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5272:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5273:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5274:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5275:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5276:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5277:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Change Timestamp                                                      */
5278:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5279:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5280:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_utime (
5281:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Pointer to the file/directory name */
5282:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const FILINFO* fno	/* Pointer to the timestamp to be set */
5283:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5284:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5285:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5286:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5287:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5288:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DEF_NAMBUF
5289:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5290:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5291:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, FA_WRITE);	/* Get logical drive */
5292:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5293:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs;
5294:../Dave/Generated/FATFS/ff_Src/ff.c **** 		INIT_NAMBUF(fs);
5295:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = follow_path(&dj, path);	/* Follow the file path */
5296:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK && (dj.fn[NSFLAG] & (NS_DOT | NS_NONAME))) res = FR_INVALID_NAME;	/* Check objec
5297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5298:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5299:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->fs_type == FS_EXFAT) {
5300:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(fs->dirbuf + XDIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5301:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = store_xdir(&dj);
5302:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5303:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5304:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{
5305:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(dj.dir + DIR_ModTime, (DWORD)fno->fdate << 16 | fno->ftime);
5306:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->wflag = 1;
5307:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5308:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_OK) {
5309:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = sync_fs(fs);
5310:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5311:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		FREE_NAMBUF();
5313:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5314:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5315:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5316:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5317:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5318:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_USE_CHMOD && !FF_FS_READONLY */
5319:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5320:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5321:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5322:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LABEL
5323:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5324:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get Volume Label                                                      */
5325:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5326:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5327:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_getlabel (
5328:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,	/* Logical drive number */
5329:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* label,		/* Buffer to store the volume label */
5330:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD* vsn			/* Variable to store the volume serial number */
5331:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5332:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5334:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5335:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5336:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT si, di;
5337:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5338:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5339:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5340:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&path, &fs, 0);
5341:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5342:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume label */
5343:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && label) {
5344:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5345:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = dir_sdi(&dj, 0);
5346:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5347:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	res = DIR_READ_LABEL(&dj);		/* Find a volume label entry */
5348:../Dave/Generated/FATFS/ff_Src/ff.c **** 		 	if (res == FR_OK) {
5349:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5350:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (fs->fs_type == FS_EXFAT) {
5351:../Dave/Generated/FATFS/ff_Src/ff.c **** 					WCHAR hs;
5352:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5353:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (si = di = hs = 0; si < dj.dir[XDIR_NumLabel]; si++) {	/* Extract volume label from 83 ent
5354:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ld_word(dj.dir + XDIR_Label + si * 2);
5355:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (hs == 0 && IsSurrogate(wc)) {	/* Is the code a surrogate? */
5356:../Dave/Generated/FATFS/ff_Src/ff.c **** 							hs = wc; continue;
5357:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5358:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = put_utf((DWORD)hs << 16 | wc, &label[di], 4);
5359:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5360:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5361:../Dave/Generated/FATFS/ff_Src/ff.c **** 						hs = 0;
5362:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5363:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (hs != 0) di = 0;	/* Broken surrogate pair? */
5364:../Dave/Generated/FATFS/ff_Src/ff.c **** 					label[di] = 0;
5365:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else
5366:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5367:../Dave/Generated/FATFS/ff_Src/ff.c **** 				{
5368:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si = di = 0;		/* Extract volume label from AM_VOL entry */
5369:../Dave/Generated/FATFS/ff_Src/ff.c **** 					while (si < 11) {
5370:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = dj.dir[si++];
5371:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE >= 1 	/* Unicode output */
5372:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (dbc_1st((BYTE)wc) && si < 11) wc = wc << 8 | dj.dir[si++];	/* Is it a DBC? */
5373:../Dave/Generated/FATFS/ff_Src/ff.c **** 						wc = ff_oem2uni(wc, CODEPAGE);					/* Convert it into Unicode */
5374:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc != 0) wc = put_utf(wc, &label[di], 4);	/* Put it in Unicode */
5375:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (wc == 0) { di = 0; break; }
5376:../Dave/Generated/FATFS/ff_Src/ff.c **** 						di += wc;
5377:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM output */
5378:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di++] = (TCHAR)wc;
5379:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5380:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5381:../Dave/Generated/FATFS/ff_Src/ff.c **** 					do {				/* Truncate trailing spaces */
5382:../Dave/Generated/FATFS/ff_Src/ff.c **** 						label[di] = 0;
5383:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (di == 0) break;
5384:../Dave/Generated/FATFS/ff_Src/ff.c **** 					} while (label[--di] == ' ');
5385:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5386:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5387:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5388:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_NO_FILE) {	/* No label entry and return nul string */
5389:../Dave/Generated/FATFS/ff_Src/ff.c **** 			label[0] = 0;
5390:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = FR_OK;
5391:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5392:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5393:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5394:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get volume serial number */
5395:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK && vsn) {
5396:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = move_window(fs, fs->volbase);
5397:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5398:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (fs->fs_type) {
5399:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_EXFAT:
5400:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BPB_VolIDEx;
5401:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
5402:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5403:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case FS_FAT32:
5404:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID32;
5405:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
5406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5407:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
5408:../Dave/Generated/FATFS/ff_Src/ff.c **** 				di = BS_VolID;
5409:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5410:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*vsn = ld_dword(fs->win + di);
5411:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5413:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5414:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5415:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5416:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5417:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5418:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5419:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5420:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5421:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Set Volume Label                                                      */
5422:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5423:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5424:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_setlabel (
5425:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* label	/* Volume label to set with heading logical drive number */
5426:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5427:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5428:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5429:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DIR dj;
5430:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5431:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE dirvn[22];
5432:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT di;
5433:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
5434:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const char badchr[] = "+.,;=[]/\\\"*:<>\?|\x7F";	/* [0..] for FAT, [7..] for exFAT */
5435:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5436:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
5437:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5438:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5439:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get logical drive */
5440:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = mount_volume(&label, &fs, FA_WRITE);
5441:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK) LEAVE_FF(fs, res);
5442:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5443:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5444:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
5445:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, 0, 22);
5446:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5447:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5448:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);	/* Get a Unicode character */
5449:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc >= 0x10000) {
5450:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc == 0xFFFFFFFF || di >= 10) {	/* Wrong surrogate or buffer overflow */
5451:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dc = 0;
5452:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5453:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_word(dirvn + di * 2, (WCHAR)(dc >> 16)); di++;
5454:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5455:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5456:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == 0 || chk_chr(badchr + 7, (int)dc) || di >= 11) {	/* Check validity of the volume label
5457:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5458:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5459:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(dirvn + di * 2, (WCHAR)dc); di++;
5460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5461:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5462:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5463:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* On the FAT/FAT32 volume */
5464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(dirvn, ' ', 11);
5465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		di = 0;
5466:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while ((UINT)*label >= ' ') {	/* Create volume label */
5467:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN
5468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = tchar2uni(&label);
5469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (dc < 0x10000) ? ff_uni2oem(ff_wtoupper(dc), CODEPAGE) : 0;
5470:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input */
5471:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (BYTE)*label++;
5472:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dbc_1st((BYTE)wc)) wc = dbc_2nd((BYTE)*label) ? wc << 8 | (BYTE)*label++ : 0;
5473:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (IsLower(wc)) wc -= 0x20;		/* To upper ASCII characters */
5474:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_CODE_PAGE == 0
5475:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ExCvt && wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5476:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_CODE_PAGE < 900
5477:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x80) wc = ExCvt[wc - 0x80];	/* To upper extended characters (SBCS cfg) */
5478:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5479:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5480:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc == 0 || chk_chr(badchr + 0, (int)wc) || di >= (UINT)((wc >= 0x100) ? 10 : 11)) {	/* Rejec
5481:../Dave/Generated/FATFS/ff_Src/ff.c **** 				LEAVE_FF(fs, FR_INVALID_NAME);
5482:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5483:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc >= 0x100) dirvn[di++] = (BYTE)(wc >> 8);
5484:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dirvn[di++] = (BYTE)wc;
5485:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5486:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dirvn[0] == DDEM) LEAVE_FF(fs, FR_INVALID_NAME);	/* Reject illegal name (heading DDEM) */
5487:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (di && dirvn[di - 1] == ' ') di--;				/* Snip trailing spaces */
5488:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5489:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5490:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Set volume label */
5491:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dj.obj.fs = fs; dj.obj.sclust = 0;	/* Open root directory */
5492:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = dir_sdi(&dj, 0);
5493:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5494:../Dave/Generated/FATFS/ff_Src/ff.c **** 		res = DIR_READ_LABEL(&dj);	/* Get volume label entry */
5495:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {
5496:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5497:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dj.dir[XDIR_NumLabel] = (BYTE)di;	/* Change the volume label */
5498:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5499:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5500:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {
5501:../Dave/Generated/FATFS/ff_Src/ff.c **** 					mem_cpy(dj.dir, dirvn, 11);	/* Change the volume label */
5502:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
5503:../Dave/Generated/FATFS/ff_Src/ff.c **** 					dj.dir[DIR_Name] = DDEM;	/* Remove the volume label */
5504:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5505:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5506:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fs->wflag = 1;
5507:../Dave/Generated/FATFS/ff_Src/ff.c **** 			res = sync_fs(fs);
5508:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {			/* No volume label entry or an error */
5509:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (res == FR_NO_FILE) {
5510:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = FR_OK;
5511:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (di != 0) {	/* Create a volume label entry */
5512:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = dir_alloc(&dj, 1);	/* Allocate an entry */
5513:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res == FR_OK) {
5514:../Dave/Generated/FATFS/ff_Src/ff.c **** 						mem_set(dj.dir, 0, SZDIRE);	/* Clean the entry */
5515:../Dave/Generated/FATFS/ff_Src/ff.c **** 						if (FF_FS_EXFAT && fs->fs_type == FS_EXFAT) {
5516:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_Type] = ET_VLABEL;	/* Create volume label entry */
5517:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[XDIR_NumLabel] = (BYTE)di;
5518:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir + XDIR_Label, dirvn, 22);
5519:../Dave/Generated/FATFS/ff_Src/ff.c **** 						} else {
5520:../Dave/Generated/FATFS/ff_Src/ff.c **** 							dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
5521:../Dave/Generated/FATFS/ff_Src/ff.c **** 							mem_cpy(dj.dir, dirvn, 11);
5522:../Dave/Generated/FATFS/ff_Src/ff.c **** 						}
5523:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fs->wflag = 1;
5524:../Dave/Generated/FATFS/ff_Src/ff.c **** 						res = sync_fs(fs);
5525:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
5526:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5527:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5528:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5529:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5530:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5531:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5532:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5534:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY */
5535:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_LABEL */
5536:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5537:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5538:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5539:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_EXPAND && !FF_FS_READONLY
5540:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5541:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Allocate a Contiguous Blocks to the File                              */
5542:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5543:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5544:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_expand (
5545:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,		/* Pointer to the file object */
5546:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t fsz,	/* File size to be expanded to */
5547:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE opt		/* Operation mode 0:Find and prepare or 1:Find and allocate */
5548:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5549:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5551:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5552:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD n, clst, stcl, scl, ncl, tcl, lclst;
5553:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5554:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5555:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5556:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5557:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fsz == 0 || fp->obj.objsize != 0 || !(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);
5558:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5559:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type != FS_EXFAT && fsz >= 0x100000000) LEAVE_FF(fs, FR_DENIED);	/* Check if in size li
5560:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5561:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n = (DWORD)fs->csize * SS(fs);	/* Cluster size */
5562:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tcl = (DWORD)(fsz / n) + ((fsz & (n - 1)) ? 1 : 0);	/* Number of clusters required */
5563:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stcl = fs->last_clst; lclst = 0;
5564:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stcl < 2 || stcl >= fs->n_fatent) stcl = 2;
5565:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5566:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fs->fs_type == FS_EXFAT) {
5568:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = find_bitmap(fs, stcl, tcl);			/* Find a contiguous cluster block */
5569:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0) res = FR_DENIED;				/* No contiguous cluster block was found */
5570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (scl == 0xFFFFFFFF) res = FR_DISK_ERR;
5571:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5572:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5573:../Dave/Generated/FATFS/ff_Src/ff.c **** 				res = change_bitmap(fs, scl, tcl, 1);	/* Mark the cluster block 'in use' */
5574:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl + tcl - 1;
5575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5576:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5577:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5578:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5579:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5580:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5581:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{
5582:../Dave/Generated/FATFS/ff_Src/ff.c **** 		scl = clst = stcl; ncl = 0;
5583:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (;;) {	/* Find a contiguous cluster block */
5584:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = get_fat(&fp->obj, clst);
5585:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (++clst >= fs->n_fatent) clst = 2;
5586:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 1) { res = FR_INT_ERR; break; }
5587:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
5588:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n == 0) {	/* Is it a free cluster? */
5589:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (++ncl == tcl) break;	/* Break if a contiguous cluster block is found */
5590:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
5591:../Dave/Generated/FATFS/ff_Src/ff.c **** 				scl = clst; ncl = 0;		/* Not a free cluster */
5592:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5593:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clst == stcl) { res = FR_DENIED; break; }	/* No contiguous cluster? */
5594:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5595:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (res == FR_OK) {	/* A contiguous free area is found */
5596:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (opt) {		/* Allocate it now */
5597:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (clst = scl, n = tcl; n; clst++, n--) {	/* Create a cluster chain on the FAT */
5598:../Dave/Generated/FATFS/ff_Src/ff.c **** 					res = put_fat(fs, clst, (n == 1) ? 0xFFFFFFFF : clst + 1);
5599:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (res != FR_OK) break;
5600:../Dave/Generated/FATFS/ff_Src/ff.c **** 					lclst = clst;
5601:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5602:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {		/* Set it as suggested point for next allocation */
5603:../Dave/Generated/FATFS/ff_Src/ff.c **** 				lclst = scl - 1;
5604:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5605:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5606:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5607:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res == FR_OK) {
5609:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fs->last_clst = lclst;		/* Set suggested start cluster to start next */
5610:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (opt) {	/* Is it allocated now? */
5611:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.sclust = scl;		/* Update object allocation information */
5612:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->obj.objsize = fsz;
5613:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (FF_FS_EXFAT) fp->obj.stat = 2;	/* Set status 'contiguous chain' */
5614:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fp->flag |= FA_MODIFIED;
5615:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fs->free_clst <= fs->n_fatent - 2) {	/* Update FSINFO */
5616:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->free_clst -= tcl;
5617:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fs->fsi_flag |= 1;
5618:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5619:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5621:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5622:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, res);
5623:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5624:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5625:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_EXPAND && !FF_FS_READONLY */
5626:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5627:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5628:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5629:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_FORWARD
5630:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5631:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Forward Data to the Stream Directly                                   */
5632:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5633:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5634:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_forward (
5635:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp, 						/* Pointer to the file object */
5636:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT (*func)(const BYTE*,UINT),	/* Pointer to the streaming function */
5637:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT btf,						/* Number of bytes to forward */
5638:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT* bf						/* Pointer to number of bytes forwarded */
5639:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5640:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT res;
5642:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FATFS *fs;
5643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD clst;
5644:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect;
5645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FSIZE_t remain;
5646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rcnt, csect;
5647:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *dbuf;
5648:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5649:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5650:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*bf = 0;	/* Clear transfer byte counter */
5651:../Dave/Generated/FATFS/ff_Src/ff.c **** 	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
5652:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);
5653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
5654:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5655:../Dave/Generated/FATFS/ff_Src/ff.c **** 	remain = fp->obj.objsize - fp->fptr;
5656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (btf > remain) btf = (UINT)remain;			/* Truncate btf by remaining bytes */
5657:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5658:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for ( ;  btf && (*func)(0, 0);					/* Repeat until all data transferred or stream goes busy */
5659:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->fptr += rcnt, *bf += rcnt, btf -= rcnt) {
5660:../Dave/Generated/FATFS/ff_Src/ff.c **** 		csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
5661:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->fptr % SS(fs) == 0) {				/* On the sector boundary? */
5662:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (csect == 0) {						/* On the cluster boundary? */
5663:../Dave/Generated/FATFS/ff_Src/ff.c **** 				clst = (fp->fptr == 0) ?			/* On the top of the file? */
5664:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fp->obj.sclust : get_fat(&fp->obj, fp->clust);
5665:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst <= 1) ABORT(fs, FR_INT_ERR);
5666:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
5667:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->clust = clst;					/* Update current cluster */
5668:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5669:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5670:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = clst2sect(fs, fp->clust);			/* Get current data sector */
5671:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sect == 0) ABORT(fs, FR_INT_ERR);
5672:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect += csect;
5673:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_TINY
5674:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (move_window(fs, sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window to the file dat
5675:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fs->win;
5676:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5677:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fp->sect != sect) {		/* Fill sector cache with file data */
5678:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
5679:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
5680:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5681:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fp->flag &= (BYTE)~FA_DIRTY;
5682:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5683:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5684:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
5685:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5686:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dbuf = fp->buf;
5687:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5688:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fp->sect = sect;
5689:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
5690:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt > btf) rcnt = btf;					/* Clip it by btr if needed */
5691:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rcnt = (*func)(dbuf + ((UINT)fp->fptr % SS(fs)), rcnt);	/* Forward the file data */
5692:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rcnt == 0) ABORT(fs, FR_INT_ERR);
5693:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5694:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5695:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_FF(fs, FR_OK);
5696:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5697:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_USE_FORWARD */
5698:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5699:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5700:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5701:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY && FF_USE_MKFS
5702:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5703:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create FAT/exFAT volume                                               */
5704:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
5705:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5706:../Dave/Generated/FATFS/ff_Src/ff.c **** #define N_SEC_TRACK 63			/* Sectors per track for determination of drive CHS */
5707:../Dave/Generated/FATFS/ff_Src/ff.c **** #define	GPT_ALIGN	0x100000	/* Alignment of partitions in GPT [byte] (>=128KB) */
5708:../Dave/Generated/FATFS/ff_Src/ff.c **** #define GPT_ITEMS	128			/* Number of GPT table size (>=128, sector aligned) */
5709:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5710:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5711:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create partitions on the physical drive in format of MBR or GPT */
5712:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5713:../Dave/Generated/FATFS/ff_Src/ff.c **** static FRESULT create_partition (
5714:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE drv,			/* Physical drive number */
5715:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const LBA_t plst[],	/* Partition list */
5716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE sys,			/* System ID (for only MBR, temp setting) */
5717:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE* buf			/* Working buffer for a sector */
5718:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5719:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5720:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, cy;
5721:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sz_drv;
5722:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_drv32, s_lba32, n_lba32;
5723:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *pte, hd, n_hd, sc, n_sc;
5724:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5725:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get drive size */
5726:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(drv, GET_SECTOR_COUNT, &sz_drv) != RES_OK) return FR_DISK_ERR;
5727:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5728:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
5729:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_drv >= FF_MIN_GPT) {	/* Create partitions in GPT */
5730:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WORD ss;
5731:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT sz_pt, pi, si, ofs;
5732:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD bcc, rnd, align;
5733:../Dave/Generated/FATFS/ff_Src/ff.c **** 		QWORD s_lba64, n_lba64, sz_pool, s_bpt;
5734:../Dave/Generated/FATFS/ff_Src/ff.c **** 		static const BYTE gpt_mbr[16] = {0x00, 0x00, 0x02, 0x00, 0xEE, 0xFE, 0xFF, 0x00, 0x01, 0x00, 0x00
5735:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5736:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS
5737:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(drv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;	/* Get sector size */
5738:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5739:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5740:../Dave/Generated/FATFS/ff_Src/ff.c **** 		ss = FF_MAX_SS;
5741:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5742:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rnd = GET_FATTIME();			/* Random seed */
5743:../Dave/Generated/FATFS/ff_Src/ff.c **** 		align = GPT_ALIGN / ss;			/* Partition alignment [sector] */
5744:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_pt = GPT_ITEMS * SZ_GPTE / ss;	/* Size of PT [sector] */
5745:../Dave/Generated/FATFS/ff_Src/ff.c **** 		s_bpt = sz_drv - sz_pt - 1;		/* Backup PT start sector */
5746:../Dave/Generated/FATFS/ff_Src/ff.c **** 		s_lba64 = 2 + sz_pt;			/* First allocatable sector */
5747:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_pool = s_bpt - s_lba64;		/* Size of allocatable area */
5748:../Dave/Generated/FATFS/ff_Src/ff.c **** 		bcc = 0xFFFFFFFF; n_lba64 = 1;
5749:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pi = si = 0;	/* partition table index, size table index */
5750:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
5751:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (pi * SZ_GPTE % ss == 0) mem_set(buf, 0, ss);	/* Clean the buffer if needed */
5752:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n_lba64 != 0) {	/* Is the size table not termintated? */
5753:../Dave/Generated/FATFS/ff_Src/ff.c **** 				s_lba64 = (s_lba64 + align - 1) & ((QWORD)0 - align);	/* Align partition start */
5754:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_lba64 = plst[si++];	/* Get a partition size */
5755:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_lba64 <= 100) {	/* Is the size in percentage? */
5756:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n_lba64 = sz_pool * n_lba64 / 100;
5757:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n_lba64 = (n_lba64 + align - 1) & ((QWORD)0 - align);	/* Align partition end (only if in perce
5758:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5759:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (s_lba64 + n_lba64 > s_bpt) {	/* Clip at end of the pool */
5760:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n_lba64 = (s_lba64 < s_bpt) ? s_bpt - s_lba64 : 0;
5761:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5762:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5763:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n_lba64 != 0) {		/* Add a partition? */
5764:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ofs = pi * SZ_GPTE % ss;
5765:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_cpy(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16);	/* Partition GUID (Microsoft Basic Data) *
5766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				rnd = make_rand(rnd, buf + ofs + GPTE_UpGuid, 16);		/* Unique partition GUID */
5767:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(buf + ofs + GPTE_FstLba, s_lba64);				/* Partition start LBA */
5768:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_qword(buf + ofs + GPTE_LstLba, s_lba64 + n_lba64 - 1);	/* Partition end LBA */
5769:../Dave/Generated/FATFS/ff_Src/ff.c **** 				s_lba64 += n_lba64;		/* Next partition LBA */
5770:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5771:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((pi + 1) * SZ_GPTE % ss == 0) {		/* Write the buffer if it is filled up */
5772:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; bcc = crc32(bcc, buf[i++])) ;	/* Calculate table check sum */
5773:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(drv, buf, 2 + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;		/* Primary t
5774:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(drv, buf, s_bpt + pi * SZ_GPTE / ss, 1) != RES_OK) return FR_DISK_ERR;	/* Second
5775:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5776:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (++pi < GPT_ITEMS);
5777:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5778:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create primary GPT header */
5779:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, ss);
5780:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(buf + GPTH_Sign, "EFI PART" "\0\0\1\0" "\x5C\0\0", 16);	/* Signature, version (1.0) and s
5781:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_PtBcc, ~bcc);				/* Table check sum */
5782:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_CurLba, 1);					/* LBA of this header */
5783:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_BakLba, sz_drv - 1);		/* LBA of another header */
5784:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_FstLba, 2 + sz_pt);			/* LBA of first allocatable sector */
5785:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_LstLba, s_bpt - 1);			/* LBA of last allocatable sector */
5786:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_PteSize, SZ_GPTE);			/* Size of a table entry */
5787:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_PtNum, GPT_ITEMS);			/* Number of table entries */
5788:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_PtOfs, 2);					/* LBA of this table */
5789:../Dave/Generated/FATFS/ff_Src/ff.c **** 		rnd = make_rand(rnd, buf + GPTH_DskGuid, 16);	/* Disk GUID */
5790:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum 
5791:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_Bcc, ~bcc);					/* Header check sum */
5792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(drv, buf, 1, 1) != RES_OK) return FR_DISK_ERR;
5793:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5794:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create secondary GPT header */
5795:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_CurLba, sz_drv - 1);		/* LBA of this header */
5796:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_BakLba, 1);					/* LBA of another header */
5797:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_qword(buf + GPTH_PtOfs, s_bpt);				/* LBA of this table */
5798:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_Bcc, 0);
5799:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0, bcc= 0xFFFFFFFF; i < 92; bcc = crc32(bcc, buf[i++])) ;	/* Calculate header check sum 
5800:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + GPTH_Bcc, ~bcc);					/* Header check sum */
5801:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(drv, buf, sz_drv - 1, 1) != RES_OK) return FR_DISK_ERR;
5802:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5803:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create protective MBR */
5804:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, ss);
5805:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(buf + MBR_Table, gpt_mbr, 16);			/* Create a GPT partition */
5806:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);
5807:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;
5808:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5809:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
5810:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5811:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{					/* Create partitions in MBR */
5812:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_drv32 = (DWORD)sz_drv;
5813:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_sc = N_SEC_TRACK;		/* Determine drive CHS without any consideration of the drive geometry */
5814:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n_hd = 8; n_hd != 0 && sz_drv32 / n_hd / n_sc > 1024; n_hd *= 2) ;
5815:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_hd == 0) n_hd = 255;	/* Number of heads needs to be <256 */
5816:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5817:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, FF_MAX_SS);	/* Clear MBR */
5818:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pte = buf + MBR_Table;	/* Partition table in the MBR */
5819:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0, s_lba32 = n_sc; i < 4 && s_lba32 != 0 && s_lba32 < sz_drv32; i++, s_lba32 += n_lba32)
5820:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n_lba32 = (DWORD)plst[i];	/* Get partition size */
5821:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n_lba32 <= 100) n_lba32 = (n_lba32 == 100) ? sz_drv32 : sz_drv32 / 100 * n_lba32;	/* Size in
5822:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (s_lba32 + n_lba32 > sz_drv32 || s_lba32 + n_lba32 < s_lba32) n_lba32 = sz_drv32 - s_lba32;	/
5823:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n_lba32 == 0) break;	/* End of table or no sector to allocate? */
5824:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5825:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_StLba, s_lba32);		/* Start LBA */
5826:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(pte + PTE_SizLba, n_lba32);	/* Number of sectors */
5827:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_System] = sys;					/* System type */
5828:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5829:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cy = (UINT)(s_lba32 / n_sc / n_hd);		/* Start cylinder */
5830:../Dave/Generated/FATFS/ff_Src/ff.c **** 			hd = (BYTE)(s_lba32 / n_sc % n_hd);		/* Start head */
5831:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sc = (BYTE)(s_lba32 % n_sc + 1);		/* Start sector */
5832:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StHead] = hd;
5833:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
5834:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_StCyl] = (BYTE)cy;
5835:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5836:../Dave/Generated/FATFS/ff_Src/ff.c **** 			cy = (UINT)((s_lba32 + n_lba32 - 1) / n_sc / n_hd);	/* End cylinder */
5837:../Dave/Generated/FATFS/ff_Src/ff.c **** 			hd = (BYTE)((s_lba32 + n_lba32 - 1) / n_sc % n_hd);	/* End head */
5838:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sc = (BYTE)((s_lba32 + n_lba32 - 1) % n_sc + 1);	/* End sector */
5839:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdHead] = hd;
5840:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdSec] = (BYTE)((cy >> 2 & 0xC0) | sc);
5841:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte[PTE_EdCyl] = (BYTE)cy;
5842:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5843:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte += SZ_PTE;		/* Next entry */
5844:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5845:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5846:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
5847:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(drv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
5848:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5849:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5850:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return FR_OK;
5851:../Dave/Generated/FATFS/ff_Src/ff.c **** }
5852:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5853:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5854:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5855:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_mkfs (
5856:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* path,		/* Logical drive number */
5857:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const MKFS_PARM* opt,	/* Format options */
5858:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work,				/* Pointer to working buffer (null: use heap memory) */
5859:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT len				/* Size of working buffer [byte] */
5860:../Dave/Generated/FATFS/ff_Src/ff.c **** )
5861:../Dave/Generated/FATFS/ff_Src/ff.c **** {
5862:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst[] = {1, 4, 16, 64, 256, 512, 0};	/* Cluster size boundary for FAT volume (4K
5863:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const WORD cst32[] = {1, 2, 4, 8, 16, 32, 0};	/* Cluster size boundary for FAT32 volume (12
5864:../Dave/Generated/FATFS/ff_Src/ff.c **** 	static const MKFS_PARM defopt = {FM_ANY, 0, 0, 0, 0};	/* Default parameter */
5865:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE fsopt, fsty, sys, *buf, *pte, pdrv, ipart;
5866:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WORD ss;	/* Sector size */
5867:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_buf, sz_blk, n_clst, pau, nsect, n;
5868:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sz_vol, b_vol, b_fat, b_data;		/* Size of volume, Base LBA of volume, fat, data */
5869:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LBA_t sect, lba[2];
5870:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD sz_rsv, sz_fat, sz_dir, sz_au;	/* Size of reserved, fat, dir, data, cluster */
5871:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n_fat, n_root, i;					/* Index, Number of FATs and Number of roor dir entries */
5872:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int vol;
5873:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS ds;
5874:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FRESULT fr;
5875:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5876:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5877:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Check mounted drive and clear work area */
5878:../Dave/Generated/FATFS/ff_Src/ff.c **** 	vol = get_ldnumber(&path);					/* Get target logical drive */
5879:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (vol < 0) return FR_INVALID_DRIVE;
5880:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the fs object if mounted */
5881:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pdrv = LD2PD(vol);			/* Physical drive */
5882:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ipart = LD2PT(vol);			/* Partition (0:create as new, 1..:get from partition table) */
5883:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!opt) opt = &defopt;	/* Use default parameter if it is not given */
5884:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5885:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get physical drive status (sz_drv, sz_blk, ss) */
5886:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ds = disk_initialize(pdrv);
5887:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ds & STA_NOINIT) return FR_NOT_READY;
5888:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ds & STA_PROTECT) return FR_WRITE_PROTECTED;
5889:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_blk = opt->align;
5890:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_blk == 0 && disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK) sz_blk = 1;
5891:../Dave/Generated/FATFS/ff_Src/ff.c ****  	if (sz_blk == 0 || sz_blk > 0x8000 || (sz_blk & (sz_blk - 1))) sz_blk = 1;
5892:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MAX_SS != FF_MIN_SS
5893:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
5894:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (ss > FF_MAX_SS || ss < FF_MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
5895:../Dave/Generated/FATFS/ff_Src/ff.c **** #else
5896:../Dave/Generated/FATFS/ff_Src/ff.c **** 	ss = FF_MAX_SS;
5897:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5898:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Options for FAT sub-type and FAT parameters */
5899:../Dave/Generated/FATFS/ff_Src/ff.c **** 	fsopt = opt->fmt & (FM_ANY | FM_SFD);
5900:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n_fat = (opt->n_fat >= 1 && opt->n_fat <= 2) ? opt->n_fat : 1;
5901:../Dave/Generated/FATFS/ff_Src/ff.c **** 	n_root = (opt->n_root >= 1 && opt->n_root <= 32768 && (opt->n_root % (ss / SZDIRE)) == 0) ? opt->n
5902:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_au = (opt->au_size <= 0x1000000 && (opt->au_size & (opt->au_size - 1)) == 0) ? opt->au_size : 0
5903:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_au /= ss;	/* Byte --> Sector */
5904:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5905:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Get working buffer */
5906:../Dave/Generated/FATFS/ff_Src/ff.c **** 	sz_buf = len / ss;		/* Size of working buffer [sector] */
5907:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_buf == 0) return FR_NOT_ENOUGH_CORE;
5908:../Dave/Generated/FATFS/ff_Src/ff.c **** 	buf = (BYTE*)work;		/* Working buffer */
5909:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
5910:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) buf = ff_memalloc(sz_buf * ss);	/* Use heap memory for working buffer */
5911:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5912:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
5913:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5914:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine where the volume to be located (b_vol, sz_vol) */
5915:../Dave/Generated/FATFS/ff_Src/ff.c **** 	b_vol = sz_vol = 0;
5916:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && ipart != 0) {	/* Is the volume associated with any specific partition? *
5917:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get partition location from the existing partition table */
5918:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load MBR */
5919:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (ld_word(buf + BS_55AA) != 0xAA55) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if MBR is valid */
5920:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
5921:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (buf[MBR_Table + PTE_System] == 0xEE) {	/* GPT protective MBR? */
5922:../Dave/Generated/FATFS/ff_Src/ff.c **** 			DWORD n_ent, ofs;
5923:../Dave/Generated/FATFS/ff_Src/ff.c **** 			QWORD pt_lba;
5924:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5925:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Get the partition location from GPT */
5926:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(pdrv, buf, 1, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Load GPT header sector (ne
5927:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!test_gpt_header(buf)) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if GPT header is valid */
5928:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n_ent = ld_dword(buf + GPTH_PtNum);		/* Number of entries */
5929:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pt_lba = ld_qword(buf + GPTH_PtOfs);	/* Table start sector */
5930:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ofs = i = 0;
5931:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (n_ent) {		/* Find MS Basic partition with order of ipart */
5932:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ofs == 0 && disk_read(pdrv, buf, pt_lba++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Get PT
5933:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (!mem_cmp(buf + ofs + GPTE_PtGuid, GUID_MS_Basic, 16) && ++i == ipart) {	/* MS basic data pa
5934:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b_vol = ld_qword(buf + ofs + GPTE_FstLba);
5935:../Dave/Generated/FATFS/ff_Src/ff.c **** 					sz_vol = ld_qword(buf + ofs + GPTE_LstLba) - b_vol + 1;
5936:../Dave/Generated/FATFS/ff_Src/ff.c **** 					break;
5937:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5938:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_ent--; ofs = (ofs + SZ_GPTE) % ss;	/* Next entry */
5939:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5940:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (n_ent == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Partition not found */
5941:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fsopt |= 0x80;	/* Partitioning is in GPT */
5942:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else
5943:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5944:../Dave/Generated/FATFS/ff_Src/ff.c **** 		{	/* Get the partition location from MBR partition table */
5945:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pte = buf + (MBR_Table + (ipart - 1) * SZ_PTE);
5946:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ipart > 4 || pte[PTE_System] == 0) LEAVE_MKFS(FR_MKFS_ABORTED);	/* No partition? */
5947:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
5948:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
5949:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5950:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {	/* The volume is associated with a physical drive */
5951:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
5952:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(fsopt & FM_SFD)) {	/* To be partitioned? */
5953:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Create a single-partition on the drive in this function */
5954:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
5955:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= FF_MIN_GPT) {	/* Which partition type to create, MBR or GPT? */
5956:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fsopt |= 0x80;		/* Partitioning is in GPT */
5957:../Dave/Generated/FATFS/ff_Src/ff.c **** 				b_vol = GPT_ALIGN / ss; sz_vol -= b_vol + GPT_ITEMS * SZ_GPTE / ss + 1;	/* Estimated partition 
5958:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else
5959:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5960:../Dave/Generated/FATFS/ff_Src/ff.c **** 			{	/* Partitioning is in MBR */
5961:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (sz_vol > N_SEC_TRACK) {
5962:../Dave/Generated/FATFS/ff_Src/ff.c **** 					b_vol = N_SEC_TRACK; sz_vol -= b_vol;	/* Estimated partition offset and size */
5963:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
5964:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5965:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5966:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
5967:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (sz_vol < 128) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Check if volume size is >=128s */
5968:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5969:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Now start to create a FAT volume at b_vol and sz_vol */
5970:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5971:../Dave/Generated/FATFS/ff_Src/ff.c **** 	do {	/* Pre-determine the FAT type */
5972:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_FS_EXFAT && (fsopt & FM_EXFAT)) {	/* exFAT possible? */
5973:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((fsopt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || sz_au > 128) {	/* exFAT only, vol >= 
5974:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fsty = FS_EXFAT; break;
5975:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5976:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5977:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LBA64
5978:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol >= 0x100000000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too large volume for FAT/FAT32 */
5979:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
5980:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_au > 128) sz_au = 128;	/* Invalid AU for FAT/FAT32? */
5981:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fsopt & FM_FAT32) {	/* FAT32 possible? */
5982:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(fsopt & FM_FAT)) {	/* no-FAT? */
5983:../Dave/Generated/FATFS/ff_Src/ff.c **** 				fsty = FS_FAT32; break;
5984:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
5985:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
5986:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(fsopt & FM_FAT)) LEAVE_MKFS(FR_INVALID_PARAMETER);	/* no-FAT? */
5987:../Dave/Generated/FATFS/ff_Src/ff.c **** 		fsty = FS_FAT16;
5988:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} while (0);
5989:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5990:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_FS_EXFAT
5991:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (fsty == FS_EXFAT) {	/* Create an exFAT volume */
5992:../Dave/Generated/FATFS/ff_Src/ff.c **** 		DWORD szb_bit, szb_case, sum, nbit, clu, clen[3];
5993:../Dave/Generated/FATFS/ff_Src/ff.c **** 		WCHAR ch, si;
5994:../Dave/Generated/FATFS/ff_Src/ff.c **** 		UINT j, st;
5995:../Dave/Generated/FATFS/ff_Src/ff.c **** 
5996:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x1000) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume for exFAT? */
5997:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
5998:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be
5999:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, lba);
6000:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6001:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Determine FAT location, data location and number of clusters */
6002:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_au == 0) {	/* AU auto-selection */
6003:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sz_au = 8;
6004:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x80000) sz_au = 64;		/* >= 512Ks */
6005:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x4000000) sz_au = 256;	/* >= 64Ms */
6006:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6007:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_fat = b_vol + 32;										/* FAT start at offset 32 */
6008:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sz_fat = (DWORD)((sz_vol / sz_au + 2) * 4 + ss - 1) / ss;	/* Number of FAT sectors */
6009:../Dave/Generated/FATFS/ff_Src/ff.c **** 		b_data = (b_fat + sz_fat + sz_blk - 1) & ~((LBA_t)sz_blk - 1);	/* Align data area to the erase bl
6010:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (b_data - b_vol >= sz_vol / 2) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
6011:../Dave/Generated/FATFS/ff_Src/ff.c **** 		n_clst = (DWORD)(sz_vol - (b_data - b_vol)) / sz_au;	/* Number of clusters */
6012:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst <16) LEAVE_MKFS(FR_MKFS_ABORTED);			/* Too few clusters? */
6013:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (n_clst > MAX_EXFAT) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters? */
6014:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6015:../Dave/Generated/FATFS/ff_Src/ff.c **** 		szb_bit = (n_clst + 7) / 8;								/* Size of allocation bitmap */
6016:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clen[0] = (szb_bit + sz_au * ss - 1) / (sz_au * ss);	/* Number of allocation bitmap clusters */
6017:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6018:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create a compressed up-case table */
6019:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + sz_au * clen[0];	/* Table start sector */
6020:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sum = 0;							/* Table checksum to be stored in the 82 entry */
6021:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st = 0; si = 0; i = 0; j = 0; szb_case = 0;
6022:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6023:../Dave/Generated/FATFS/ff_Src/ff.c **** 			switch (st) {
6024:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 0:
6025:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)ff_wtoupper(si);	/* Get an up-case char */
6026:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (ch != si) {
6027:../Dave/Generated/FATFS/ff_Src/ff.c **** 					si++; break;		/* Store the up-case char if exist */
6028:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6029:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (j = 1; (WCHAR)(si + j) && (WCHAR)(si + j) == ff_wtoupper((WCHAR)(si + j)); j++) ;	/* Get r
6030:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (j >= 128) {
6031:../Dave/Generated/FATFS/ff_Src/ff.c **** 					ch = 0xFFFF; st = 2; break;	/* Compress the no-case block if run is >= 128 chars */
6032:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6033:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 1;			/* Do not compress short run */
6034:../Dave/Generated/FATFS/ff_Src/ff.c **** 				/* FALLTHROUGH */
6035:../Dave/Generated/FATFS/ff_Src/ff.c **** 			case 1:
6036:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = si++;		/* Fill the short run */
6037:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (--j == 0) st = 0;
6038:../Dave/Generated/FATFS/ff_Src/ff.c **** 				break;
6039:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6040:../Dave/Generated/FATFS/ff_Src/ff.c **** 			default:
6041:../Dave/Generated/FATFS/ff_Src/ff.c **** 				ch = (WCHAR)j; si += (WCHAR)j;	/* Number of chars to skip */
6042:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st = 0;
6043:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6044:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 0] = (BYTE)ch, sum);		/* Put it into the write buffer */
6045:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sum = xsum32(buf[i + 1] = (BYTE)(ch >> 8), sum);
6046:../Dave/Generated/FATFS/ff_Src/ff.c **** 			i += 2; szb_case += 2;
6047:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (si == 0 || i == sz_buf * ss) {		/* Write buffered data when buffer full or end of process */
6048:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (i + ss - 1) / ss;
6049:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6050:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; i = 0;
6051:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6052:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (si);
6053:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clen[1] = (szb_case + sz_au * ss - 1) / (sz_au * ss);	/* Number of up-case table clusters */
6054:../Dave/Generated/FATFS/ff_Src/ff.c **** 		clen[2] = 1;	/* Number of root dir clusters */
6055:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6056:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the allocation bitmap */
6057:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data; nsect = (szb_bit + ss - 1) / ss;	/* Start of bitmap and number of bitmap sectors *
6058:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nbit = clen[0] + clen[1] + clen[2];				/* Number of clusters in-use by system (bitmap, up-case an
6059:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6060:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, sz_buf * ss);				/* Initialize bitmap buffer */
6061:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; nbit != 0 && i / 8 < sz_buf * ss; buf[i / 8] |= 1 << (i % 8), i++, nbit--) ;	/* Mark
6062:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;		/* Write the buffered data */
6063:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6064:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
6065:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
6066:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6067:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the FAT */
6068:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat; nsect = sz_fat;	/* Start of FAT and number of FAT sectors */
6069:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = nbit = clu = 0;
6070:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6071:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, sz_buf * ss); i = 0;	/* Clear work area and reset write offset */
6072:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (clu == 0) {	/* Initialize FAT [0] and FAT[1] */
6073:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFF8); i += 4; clu++;
6074:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + i, 0xFFFFFFFF); i += 4; clu++;
6075:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6076:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {			/* Create chains of bitmap, up-case and root dir */
6077:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (nbit != 0 && i < sz_buf * ss) {	/* Create a chain */
6078:../Dave/Generated/FATFS/ff_Src/ff.c **** 					st_dword(buf + i, (nbit > 1) ? clu + 1 : 0xFFFFFFFF);
6079:../Dave/Generated/FATFS/ff_Src/ff.c **** 					i += 4; clu++; nbit--;
6080:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6081:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (nbit == 0 && j < 3) nbit = clen[j++];	/* Get next chain length */
6082:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nbit != 0 && i < sz_buf * ss);
6083:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;	/* Write the buffered data */
6084:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6085:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
6086:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
6087:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6088:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize the root directory */
6089:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, sz_buf * ss);
6090:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 0 + 0] = ET_VLABEL;					/* Volume label entry (no label) */
6091:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 1 + 0] = ET_BITMAP;					/* Bitmap entry */
6092:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 20, 2);					/*  cluster */
6093:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 1 + 24, szb_bit);			/*  size */
6094:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[SZDIRE * 2 + 0] = ET_UPCASE;					/* Up-case table entry */
6095:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 4, sum);				/*  sum */
6096:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 20, 2 + clen[0]);		/*  cluster */
6097:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + SZDIRE * 2 + 24, szb_case);			/*  size */
6098:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_data + sz_au * (clen[0] + clen[1]); nsect = sz_au;	/* Start of the root directory and nu
6099:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {	/* Fill root directory sectors */
6100:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
6101:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6102:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);	/* Rest of entries are filled with zero */
6103:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
6104:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
6105:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6106:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create two set of the exFAT VBR blocks */
6107:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_vol;
6108:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (n = 0; n < 2; n++) {
6109:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Main record (+0) */
6110:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
6111:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11);	/* Boot jump code (x86), OEM name */
6112:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_qword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
6113:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_qword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
6114:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatOfsEx, (DWORD)(b_fat - b_vol));	/* FAT offset [sector] */
6115:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FatSzEx, sz_fat);					/* FAT size [sector] */
6116:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_DataOfsEx, (DWORD)(b_data - b_vol));	/* Data offset [sector] */
6117:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_NumClusEx, n_clst);					/* Number of clusters */
6118:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClusEx, 2 + clen[0] + clen[1]);	/* Root dir cluster # */
6119:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_VolIDEx, GET_FATTIME());				/* VSN */
6120:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSVerEx, 0x100);						/* Filesystem version (1.00) */
6121:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_BytsPerSecEx] = 0, i = ss; i >>= 1; buf[BPB_BytsPerSecEx]++) ;	/* Log2 of sector si
6122:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (buf[BPB_SecPerClusEx] = 0, i = sz_au; i >>= 1; buf[BPB_SecPerClusEx]++) ;	/* Log2 of cluste
6123:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_NumFATsEx] = 1;					/* Number of FATs */
6124:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BPB_DrvNumEx] = 0x80;				/* Drive number (for int13) */
6125:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_BootCodeEx, 0xFEEB);	/* Boot code (x86) */
6126:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);			/* Signature (placed here regardless of sector size) */
6127:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = sum = 0; i < ss; i++) {		/* VBR checksum */
6128:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (i != BPB_VolFlagEx && i != BPB_VolFlagEx + 1 && i != BPB_PercInUseEx) sum = xsum32(buf[i], 
6129:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6130:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6131:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Extended bootstrap record (+1..+8) */
6132:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
6133:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + ss - 2, 0xAA55);	/* Signature (placed at end of sector) */
6134:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 1; j < 9; j++) {
6135:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
6136:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6137:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6138:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* OEM/Reserved record (+9..+10) */
6139:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
6140:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for ( ; j < 11; j++) {
6141:../Dave/Generated/FATFS/ff_Src/ff.c **** 				for (i = 0; i < ss; sum = xsum32(buf[i++], sum)) ;	/* VBR checksum */
6142:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6143:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6144:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Sum record (+11) */
6145:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (i = 0; i < ss; i += 4) st_dword(buf + i, sum);		/* Fill with checksum value */
6146:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect++, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6147:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6148:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6149:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else
6150:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif	/* FF_FS_EXFAT */
6151:../Dave/Generated/FATFS/ff_Src/ff.c **** 	{	/* Create an FAT/FAT32 volume */
6152:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6153:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pau = sz_au;
6154:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Pre-determine number of clusters and FAT sub-type */
6155:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT32) {	/* FAT32 volume */
6156:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* AU auto-selection */
6157:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = (DWORD)sz_vol / 0x20000;	/* Volume size in unit of 128KS */
6158:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
6159:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6160:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = (DWORD)sz_vol / pau;	/* Number of clusters */
6161:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
6162:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 32;	/* Number of reserved sectors */
6163:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = 0;		/* No static directory */
6164:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) LEAVE_MKFS(FR_MKFS_ABORTED);
6165:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {				/* FAT volume */
6166:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (pau == 0) {	/* au auto-selection */
6167:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = (DWORD)sz_vol / 0x1000;	/* Volume size in unit of 4KS */
6168:../Dave/Generated/FATFS/ff_Src/ff.c **** 					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
6169:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6170:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n_clst = (DWORD)sz_vol / pau;
6171:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT12) {
6172:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = n_clst * 2 + 4;		/* FAT size [byte] */
6173:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {
6174:../Dave/Generated/FATFS/ff_Src/ff.c **** 					fsty = FS_FAT12;
6175:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
6176:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6177:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
6178:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv = 1;						/* Number of reserved sectors */
6179:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_dir = (DWORD)n_root * SZDIRE / ss;	/* Root dir size [sector] */
6180:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6181:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_fat = b_vol + sz_rsv;						/* FAT base */
6182:../Dave/Generated/FATFS/ff_Src/ff.c **** 			b_data = b_fat + sz_fat * n_fat + sz_dir;	/* Data base */
6183:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6184:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Align data area to erase block boundary (for flash memory media) */
6185:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (DWORD)(((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data);	/* Sectors to next nearest from c
6186:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT32) {		/* FAT32: Move FAT */
6187:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_rsv += n; b_fat += n;
6188:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {					/* FAT: Expand FAT */
6189:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n % n_fat) {	/* Adjust fractional error if needed */
6190:../Dave/Generated/FATFS/ff_Src/ff.c **** 					n--; sz_rsv++; b_fat++;
6191:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6192:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sz_fat += n / n_fat;
6193:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6194:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6195:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Determine number of clusters and final check of validity of the FAT sub-type */
6196:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol < b_data + pau * 16 - b_vol) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too small volume? */
6197:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n_clst = ((DWORD)sz_vol - sz_rsv - sz_fat * n_fat - sz_dir) / pau;
6198:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT32) {
6199:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32? */
6200:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (sz_au == 0 && (sz_au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
6201:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6202:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6203:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6204:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT16) {
6205:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
6206:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (sz_au == 0 && (pau * 2) <= 64) {
6207:../Dave/Generated/FATFS/ff_Src/ff.c **** 						sz_au = pau * 2; continue;		/* Adjust cluster size and retry */
6208:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
6209:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if ((fsopt & FM_FAT32)) {
6210:../Dave/Generated/FATFS/ff_Src/ff.c **** 						fsty = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
6211:../Dave/Generated/FATFS/ff_Src/ff.c **** 					}
6212:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
6213:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6214:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6215:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
6216:../Dave/Generated/FATFS/ff_Src/ff.c **** 					if (sz_au == 0 && (sz_au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
6217:../Dave/Generated/FATFS/ff_Src/ff.c **** 					LEAVE_MKFS(FR_MKFS_ABORTED);
6218:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6219:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6220:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT12 && n_clst > MAX_FAT12) LEAVE_MKFS(FR_MKFS_ABORTED);	/* Too many clusters fo
6221:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6222:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Ok, it is the valid cluster configuration */
6223:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
6224:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (1);
6225:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6226:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_TRIM
6227:../Dave/Generated/FATFS/ff_Src/ff.c **** 		lba[0] = b_vol; lba[1] = b_vol + sz_vol - 1;	/* Inform storage device that the volume area may be
6228:../Dave/Generated/FATFS/ff_Src/ff.c **** 		disk_ioctl(pdrv, CTRL_TRIM, lba);
6229:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6230:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FAT VBR */
6231:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, ss);
6232:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
6233:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
6234:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
6235:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
6236:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_NumFATs] = (BYTE)n_fat;					/* Number of FATs */
6237:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_RootEntCnt, (WORD)((fsty == FS_FAT32) ? 0 : n_root));	/* Number of root directo
6238:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (sz_vol < 0x10000) {
6239:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
6240:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6241:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_TotSec32, (DWORD)sz_vol);	/* Volume size in 32-bit LBA */
6242:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6243:../Dave/Generated/FATFS/ff_Src/ff.c **** 		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
6244:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
6245:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
6246:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_dword(buf + BPB_HiddSec, (DWORD)b_vol);		/* Volume offset in the physical drive [sector] */
6247:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fsty == FS_FAT32) {
6248:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
6249:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
6250:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
6251:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
6252:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
6253:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
6254:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
6255:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
6256:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6257:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
6258:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
6259:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
6260:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
6261:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
6262:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6263:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size)
6264:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it to the VBR se
6265:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6266:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Create FSINFO record if needed */
6267:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fsty == FS_FAT32) {
6268:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
6269:../Dave/Generated/FATFS/ff_Src/ff.c **** 			mem_set(buf, 0, ss);
6270:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_LeadSig, 0x41615252);
6271:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_StrucSig, 0x61417272);
6272:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
6273:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
6274:../Dave/Generated/FATFS/ff_Src/ff.c **** 			st_word(buf + BS_55AA, 0xAA55);
6275:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
6276:../Dave/Generated/FATFS/ff_Src/ff.c **** 			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
6277:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6278:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6279:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize FAT area */
6280:../Dave/Generated/FATFS/ff_Src/ff.c **** 		mem_set(buf, 0, sz_buf * ss);
6281:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sect = b_fat;		/* FAT start sector */
6282:../Dave/Generated/FATFS/ff_Src/ff.c **** 		for (i = 0; i < n_fat; i++) {			/* Initialize FATs each */
6283:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fsty == FS_FAT32) {
6284:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, 0xFFFFFFF8);	/* FAT[0] */
6285:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 4, 0xFFFFFFFF);	/* FAT[1] */
6286:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 8, 0x0FFFFFFF);	/* FAT[2] (root directory) */
6287:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
6288:../Dave/Generated/FATFS/ff_Src/ff.c **** 				st_dword(buf + 0, (fsty == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* FAT[0] and FAT[1] */
6289:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6290:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nsect = sz_fat;		/* Number of FAT sectors */
6291:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Fill FAT sectors */
6292:../Dave/Generated/FATFS/ff_Src/ff.c **** 				n = (nsect > sz_buf) ? sz_buf : nsect;
6293:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6294:../Dave/Generated/FATFS/ff_Src/ff.c **** 				mem_set(buf, 0, ss);	/* Rest of FAT all are cleared */
6295:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sect += n; nsect -= n;
6296:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (nsect);
6297:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6298:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6299:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Initialize root directory (fill with zero) */
6300:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nsect = (fsty == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
6301:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6302:../Dave/Generated/FATFS/ff_Src/ff.c **** 			n = (nsect > sz_buf) ? sz_buf : nsect;
6303:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6304:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sect += n; nsect -= n;
6305:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (nsect);
6306:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6307:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6308:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* A FAT volume has been created here */
6309:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6310:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Determine system ID in the MBR partition table */
6311:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_FS_EXFAT && fsty == FS_EXFAT) {
6312:../Dave/Generated/FATFS/ff_Src/ff.c **** 		sys = 0x07;			/* exFAT */
6313:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6314:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (fsty == FS_FAT32) {
6315:../Dave/Generated/FATFS/ff_Src/ff.c **** 			sys = 0x0C;		/* FAT32X */
6316:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6317:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (sz_vol >= 0x10000) {
6318:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = 0x06;	/* FAT12/16 (large) */
6319:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
6320:../Dave/Generated/FATFS/ff_Src/ff.c **** 				sys = (fsty == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 : FAT12 */
6321:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6322:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6323:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6324:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6325:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Update partition information */
6326:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_MULTI_PARTITION && ipart != 0) {	/* Volume is in the existing partition */
6327:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!FF_LBA64 || !(fsopt & 0x80)) {
6328:../Dave/Generated/FATFS/ff_Src/ff.c **** 			/* Update system ID in the partition table */
6329:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_read(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Read the MBR */
6330:../Dave/Generated/FATFS/ff_Src/ff.c **** 			buf[MBR_Table + (ipart - 1) * SZ_PTE + PTE_System] = sys;			/* Set system ID */
6331:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (disk_write(pdrv, buf, 0, 1) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);	/* Write it back to the MBR 
6332:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6333:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {								/* Volume as a new single partition */
6334:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(fsopt & FM_SFD)) {	/* Create partition table if not in SFD */
6335:../Dave/Generated/FATFS/ff_Src/ff.c **** 			lba[0] = sz_vol, lba[1] = 0;
6336:../Dave/Generated/FATFS/ff_Src/ff.c **** 			fr = create_partition(pdrv, lba, sys, buf);
6337:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (fr != FR_OK) LEAVE_MKFS(fr);
6338:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6339:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6340:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6341:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) LEAVE_MKFS(FR_DISK_ERR);
6342:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6343:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(FR_OK);
6344:../Dave/Generated/FATFS/ff_Src/ff.c **** }
6345:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6346:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6347:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6348:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6349:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_MULTI_PARTITION
6350:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6351:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Create Partition Table on the Physical Drive                          */
6352:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6353:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6354:../Dave/Generated/FATFS/ff_Src/ff.c **** FRESULT f_fdisk (
6355:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE pdrv,			/* Physical drive number */
6356:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const LBA_t ptbl[],	/* Pointer to the size table for each partitions */
6357:../Dave/Generated/FATFS/ff_Src/ff.c **** 	void* work			/* Pointer to the working buffer (null: use heap memory) */
6358:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6359:../Dave/Generated/FATFS/ff_Src/ff.c **** {
6360:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE *buf = (BYTE*)work;
6361:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DSTATUS stat;
6362:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6363:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6364:../Dave/Generated/FATFS/ff_Src/ff.c **** 	stat = disk_initialize(pdrv);
6365:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_NOINIT) return FR_NOT_READY;
6366:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
6367:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN == 3
6368:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) buf = ff_memalloc(FF_MAX_SS);	/* Use heap memory for working buffer */
6369:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6370:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (!buf) return FR_NOT_ENOUGH_CORE;
6371:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6372:../Dave/Generated/FATFS/ff_Src/ff.c **** 	LEAVE_MKFS(create_partition(pdrv, ptbl, 0x07, buf));
6373:../Dave/Generated/FATFS/ff_Src/ff.c **** }
6374:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6375:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* FF_MULTI_PARTITION */
6376:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif /* !FF_FS_READONLY && FF_USE_MKFS */
6377:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6378:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6379:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6380:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6381:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_STRFUNC
6382:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && (FF_STRF_ENCODE < 0 || FF_STRF_ENCODE > 3)
6383:../Dave/Generated/FATFS/ff_Src/ff.c **** #error Wrong FF_STRF_ENCODE setting
6384:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6385:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6386:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Get a String from the File                                            */
6387:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6388:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6389:../Dave/Generated/FATFS/ff_Src/ff.c **** TCHAR* f_gets (
6390:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR* buff,	/* Pointer to the buffer to store read string */
6391:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int len,		/* Size of string buffer (items) */
6392:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp			/* Pointer to the file object */
6393:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6394:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10037              	 .loc 1 6394 0
 10038              	 .cfi_startproc
 10039              	 
 10040              	 
 10041 0000 80B5     	 push {r7,lr}
 10042              	.LCFI317:
 10043              	 .cfi_def_cfa_offset 8
 10044              	 .cfi_offset 7,-8
 10045              	 .cfi_offset 14,-4
 10046 0002 8AB0     	 sub sp,sp,#40
 10047              	.LCFI318:
 10048              	 .cfi_def_cfa_offset 48
 10049 0004 00AF     	 add r7,sp,#0
 10050              	.LCFI319:
 10051              	 .cfi_def_cfa_register 7
 10052 0006 F860     	 str r0,[r7,#12]
 10053 0008 B960     	 str r1,[r7,#8]
 10054 000a 7A60     	 str r2,[r7,#4]
6395:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int nc = 0;
 10055              	 .loc 1 6395 0
 10056 000c 0023     	 movs r3,#0
 10057 000e 7B62     	 str r3,[r7,#36]
6396:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR *p = buff;
 10058              	 .loc 1 6396 0
 10059 0010 FB68     	 ldr r3,[r7,#12]
 10060 0012 3B62     	 str r3,[r7,#32]
6397:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE s[4];
6398:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT rc;
6399:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6400:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE <= 2
6401:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR wc;
6402:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6403:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE && FF_STRF_ENCODE == 3
6404:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT ct;
6405:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6406:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6407:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE			/* With code conversion (Unicode API) */
6408:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* Make a room for the character and terminator  */
6409:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 1) len -= (FF_STRF_ENCODE == 0) ? 1 : 2;
6410:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 2) len -= (FF_STRF_ENCODE == 0) ? 3 : 4;
6411:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_LFN_UNICODE == 3) len -= 1;
6412:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
6413:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 0				/* Read a character in ANSI/OEM */
6414:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);		/* Get a code unit */
6415:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;			/* EOF? */
6416:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = s[0];
6417:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dbc_1st((BYTE)wc)) {	/* DBC 1st byte? */
6418:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 1, &rc);	/* Get DBC 2nd byte */
6419:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 1 || !dbc_2nd(s[0])) continue;	/* Wrong code? */
6420:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = wc << 8 | s[0];
6421:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6422:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = ff_oem2uni(wc, CODEPAGE);	/* OEM --> */
6423:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == 0) continue;
6424:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 1 || FF_STRF_ENCODE == 2 	/* Read a character in UTF-16LE/BE */
6425:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 2, &rc);		/* Get a code unit */
6426:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 2) break;			/* EOF? */
6427:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6428:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(dc)) continue;	/* Broken surrogate pair? */
6429:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateH(dc)) {		/* High surrogate? */
6430:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, 2, &rc);	/* Get low surrogate */
6431:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != 2) break;		/* EOF? */
6432:../Dave/Generated/FATFS/ff_Src/ff.c **** 			wc = (FF_STRF_ENCODE == 1) ? ld_word(s) : s[0] << 8 | s[1];
6433:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!IsSurrogateL(wc)) continue;	/* Broken surrogate pair? */
6434:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = ((dc & 0x3FF) + 0x40) << 10 | (wc & 0x3FF);	/* Merge surrogate pair */
6435:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6436:../Dave/Generated/FATFS/ff_Src/ff.c **** #else	/* Read a character in UTF-8 */
6437:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);		/* Get a code unit */
6438:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;			/* EOF? */
6439:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
6440:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc >= 0x80) {			/* Multi-byte sequence? */
6441:../Dave/Generated/FATFS/ff_Src/ff.c **** 			ct = 0;
6442:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xE0) == 0xC0) { dc &= 0x1F; ct = 1; }	/* 2-byte sequence? */
6443:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF0) == 0xE0) { dc &= 0x0F; ct = 2; }	/* 3-byte sequence? */
6444:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((dc & 0xF8) == 0xF0) { dc &= 0x07; ct = 3; }	/* 4-byte sequence? */
6445:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (ct == 0) continue;
6446:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f_read(fp, s, ct, &rc);		/* Get trailing bytes */
6447:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct) break;
6448:../Dave/Generated/FATFS/ff_Src/ff.c **** 			rc = 0;
6449:../Dave/Generated/FATFS/ff_Src/ff.c **** 			do {	/* Merge the byte sequence */
6450:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if ((s[rc] & 0xC0) != 0x80) break;
6451:../Dave/Generated/FATFS/ff_Src/ff.c **** 				dc = dc << 6 | (s[rc] & 0x3F);
6452:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} while (++rc < ct);
6453:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (rc != ct || dc < 0x80 || IsSurrogate(dc) || dc >= 0x110000) continue;	/* Wrong encoding? */
6454:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6455:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6456:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* A code point is avaialble in dc to be output */
6457:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6458:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;	/* Strip \r off if needed */
6459:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1	|| FF_LFN_UNICODE == 3	/* Output it in UTF-16/32 encoding */
6460:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_LFN_UNICODE == 1 && dc >= 0x10000) {	/* Out of BMP at UTF-16? */
6461:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)(0xD800 | ((dc >> 10) - 0x40)); nc++;	/* Make and output high surrogate */
6462:../Dave/Generated/FATFS/ff_Src/ff.c **** 			dc = 0xDC00 | (dc & 0x3FF);		/* Make low surrogate */
6463:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6464:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
6465:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;	/* End of line? */
6466:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2		/* Output it in UTF-8 encoding */
6467:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc < 0x80) {	/* Single byte? */
6468:../Dave/Generated/FATFS/ff_Src/ff.c **** 			*p++ = (TCHAR)dc;
6469:../Dave/Generated/FATFS/ff_Src/ff.c **** 			nc++;
6470:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc == '\n') break;	/* End of line? */
6471:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6472:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (dc < 0x800) {		/* 2-byte sequence? */
6473:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0xC0 | (dc >> 6 & 0x1F));
6474:../Dave/Generated/FATFS/ff_Src/ff.c **** 				*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6475:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6476:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {
6477:../Dave/Generated/FATFS/ff_Src/ff.c **** 				if (dc < 0x10000) {	/* 3-byte sequence? */
6478:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xE0 | (dc >> 12 & 0x0F));
6479:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6480:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6481:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 3;
6482:../Dave/Generated/FATFS/ff_Src/ff.c **** 				} else {			/* 4-byte sequence? */
6483:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0xF0 | (dc >> 18 & 0x07));
6484:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 12 & 0x3F));
6485:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 6 & 0x3F));
6486:../Dave/Generated/FATFS/ff_Src/ff.c **** 					*p++ = (TCHAR)(0x80 | (dc >> 0 & 0x3F));
6487:../Dave/Generated/FATFS/ff_Src/ff.c **** 					nc += 4;
6488:../Dave/Generated/FATFS/ff_Src/ff.c **** 				}
6489:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6490:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6491:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6492:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6493:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6494:../Dave/Generated/FATFS/ff_Src/ff.c **** #else			/* Byte-by-byte read without any conversion (ANSI/OEM API) */
6495:../Dave/Generated/FATFS/ff_Src/ff.c **** 	len -= 1;	/* Make a room for the terminator */
 10061              	 .loc 1 6495 0
 10062 0014 BB68     	 ldr r3,[r7,#8]
 10063 0016 013B     	 subs r3,r3,#1
 10064 0018 BB60     	 str r3,[r7,#8]
6496:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (nc < len) {
 10065              	 .loc 1 6496 0
 10066 001a 1FE0     	 b .L610
 10067              	.L614:
6497:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);	/* Get a byte */
 10068              	 .loc 1 6497 0
 10069 001c 07F11802 	 add r2,r7,#24
 10070 0020 07F11403 	 add r3,r7,#20
 10071 0024 7868     	 ldr r0,[r7,#4]
 10072 0026 1146     	 mov r1,r2
 10073 0028 0122     	 movs r2,#1
 10074 002a FFF7FEFF 	 bl f_read
6498:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (rc != 1) break;		/* EOF? */
 10075              	 .loc 1 6498 0
 10076 002e 7B69     	 ldr r3,[r7,#20]
 10077 0030 012B     	 cmp r3,#1
 10078 0032 00D0     	 beq .L611
 10079 0034 16E0     	 b .L612
 10080              	.L611:
6499:../Dave/Generated/FATFS/ff_Src/ff.c **** 		dc = s[0];
 10081              	 .loc 1 6499 0
 10082 0036 3B7E     	 ldrb r3,[r7,#24]
 10083 0038 FB61     	 str r3,[r7,#28]
6500:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (FF_USE_STRFUNC == 2 && dc == '\r') continue;
 10084              	 .loc 1 6500 0
 10085 003a FB69     	 ldr r3,[r7,#28]
 10086 003c 0D2B     	 cmp r3,#13
 10087 003e 00D1     	 bne .L613
 10088              	 .loc 1 6500 0 is_stmt 0 discriminator 1
 10089 0040 0CE0     	 b .L610
 10090              	.L613:
6501:../Dave/Generated/FATFS/ff_Src/ff.c **** 		*p++ = (TCHAR)dc; nc++;
 10091              	 .loc 1 6501 0 is_stmt 1
 10092 0042 3B6A     	 ldr r3,[r7,#32]
 10093 0044 5A1C     	 adds r2,r3,#1
 10094 0046 3A62     	 str r2,[r7,#32]
 10095 0048 FA69     	 ldr r2,[r7,#28]
 10096 004a D2B2     	 uxtb r2,r2
 10097 004c 1A70     	 strb r2,[r3]
 10098 004e 7B6A     	 ldr r3,[r7,#36]
 10099 0050 0133     	 adds r3,r3,#1
 10100 0052 7B62     	 str r3,[r7,#36]
6502:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (dc == '\n') break;
 10101              	 .loc 1 6502 0
 10102 0054 FB69     	 ldr r3,[r7,#28]
 10103 0056 0A2B     	 cmp r3,#10
 10104 0058 00D1     	 bne .L610
 10105 005a 03E0     	 b .L612
 10106              	.L610:
6496:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_read(fp, s, 1, &rc);	/* Get a byte */
 10107              	 .loc 1 6496 0
 10108 005c 7A6A     	 ldr r2,[r7,#36]
 10109 005e BB68     	 ldr r3,[r7,#8]
 10110 0060 9A42     	 cmp r2,r3
 10111 0062 DBDB     	 blt .L614
 10112              	.L612:
6503:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6504:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6505:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6506:../Dave/Generated/FATFS/ff_Src/ff.c **** 	*p = 0;		/* Terminate the string */
 10113              	 .loc 1 6506 0
 10114 0064 3B6A     	 ldr r3,[r7,#32]
 10115 0066 0022     	 movs r2,#0
 10116 0068 1A70     	 strb r2,[r3]
6507:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return nc ? buff : 0;	/* When no data read due to EOF or error, return with error. */
 10117              	 .loc 1 6507 0
 10118 006a 7B6A     	 ldr r3,[r7,#36]
 10119 006c 002B     	 cmp r3,#0
 10120 006e 01D0     	 beq .L615
 10121              	 .loc 1 6507 0 is_stmt 0 discriminator 1
 10122 0070 FB68     	 ldr r3,[r7,#12]
 10123 0072 00E0     	 b .L617
 10124              	.L615:
 10125              	 .loc 1 6507 0 discriminator 2
 10126 0074 0023     	 movs r3,#0
 10127              	.L617:
6508:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10128              	 .loc 1 6508 0 is_stmt 1
 10129 0076 1846     	 mov r0,r3
 10130 0078 2837     	 adds r7,r7,#40
 10131              	.LCFI320:
 10132              	 .cfi_def_cfa_offset 8
 10133 007a BD46     	 mov sp,r7
 10134              	.LCFI321:
 10135              	 .cfi_def_cfa_register 13
 10136              	 
 10137 007c 80BD     	 pop {r7,pc}
 10138              	 .cfi_endproc
 10139              	.LFE60:
 10141 007e 00BF     	 .section .text.putc_bfd,"ax",%progbits
 10142              	 .align 2
 10143              	 .thumb
 10144              	 .thumb_func
 10146              	putc_bfd:
 10147              	.LFB61:
6509:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6510:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6511:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6512:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6513:../Dave/Generated/FATFS/ff_Src/ff.c **** #if !FF_FS_READONLY
6514:../Dave/Generated/FATFS/ff_Src/ff.c **** #include <stdarg.h>
6515:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6516:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Character to the File (sub-functions)                           */
6517:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6518:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6519:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Putchar output buffer and work area */
6520:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6521:../Dave/Generated/FATFS/ff_Src/ff.c **** typedef struct {
6522:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL *fp;		/* Ptr to the writing file */
6523:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int idx, nchr;	/* Write index of buf[] (-1:error), number of encoding units written */
6524:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE == 1
6525:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs;
6526:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_USE_LFN && FF_LFN_UNICODE == 2
6527:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE bs[4];
6528:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT wi, ct;
6529:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6530:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE buf[64];	/* Write buffer */
6531:../Dave/Generated/FATFS/ff_Src/ff.c **** } putbuff;
6532:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6533:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6534:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Buffered write with code conversion */
6535:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6536:../Dave/Generated/FATFS/ff_Src/ff.c **** static void putc_bfd (putbuff* pb, TCHAR c)
6537:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10148              	 .loc 1 6537 0
 10149              	 .cfi_startproc
 10150              	 
 10151              	 
 10152 0000 80B5     	 push {r7,lr}
 10153              	.LCFI322:
 10154              	 .cfi_def_cfa_offset 8
 10155              	 .cfi_offset 7,-8
 10156              	 .cfi_offset 14,-4
 10157 0002 86B0     	 sub sp,sp,#24
 10158              	.LCFI323:
 10159              	 .cfi_def_cfa_offset 32
 10160 0004 00AF     	 add r7,sp,#0
 10161              	.LCFI324:
 10162              	 .cfi_def_cfa_register 7
 10163 0006 7860     	 str r0,[r7,#4]
 10164 0008 0B46     	 mov r3,r1
 10165 000a FB70     	 strb r3,[r7,#3]
6538:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT n;
6539:../Dave/Generated/FATFS/ff_Src/ff.c **** 	int i, nc;
6540:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6541:../Dave/Generated/FATFS/ff_Src/ff.c **** 	WCHAR hs, wc;
6542:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 2
6543:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD dc;
6544:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR *tp;
6545:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6546:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6547:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6548:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (FF_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 10166              	 .loc 1 6548 0
 10167 000c FB78     	 ldrb r3,[r7,#3]
 10168 000e 0A2B     	 cmp r3,#10
 10169 0010 03D1     	 bne .L619
6549:../Dave/Generated/FATFS/ff_Src/ff.c **** 		putc_bfd(pb, '\r');
 10170              	 .loc 1 6549 0
 10171 0012 7868     	 ldr r0,[r7,#4]
 10172 0014 0D21     	 movs r1,#13
 10173 0016 FFF7F3FF 	 bl putc_bfd
 10174              	.L619:
6550:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6551:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6552:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i = pb->idx;			/* Write index of pb->buf[] */
 10175              	 .loc 1 6552 0
 10176 001a 7B68     	 ldr r3,[r7,#4]
 10177 001c 5B68     	 ldr r3,[r3,#4]
 10178 001e 7B61     	 str r3,[r7,#20]
6553:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i < 0) return;
 10179              	 .loc 1 6553 0
 10180 0020 7B69     	 ldr r3,[r7,#20]
 10181 0022 002B     	 cmp r3,#0
 10182 0024 26DB     	 blt .L618
6554:../Dave/Generated/FATFS/ff_Src/ff.c **** 	nc = pb->nchr;			/* Write unit counter */
 10183              	 .loc 1 6554 0
 10184 0026 7B68     	 ldr r3,[r7,#4]
 10185 0028 9B68     	 ldr r3,[r3,#8]
 10186 002a 3B61     	 str r3,[r7,#16]
6555:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6556:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_USE_LFN && FF_LFN_UNICODE
6557:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_LFN_UNICODE == 1		/* UTF-16 input */
6558:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogateH(c)) {	/* High surrogate? */
6559:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->hs = c; return;	/* Save it for next */
6560:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6561:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = pb->hs; pb->hs = 0;
6562:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {			/* There is a leading high surrogate */
6563:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!IsSurrogateL(c)) hs = 0;	/* Discard high surrogate if not a surrogate pair */
6564:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6565:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsSurrogateL(c)) return;	/* Discard stray low surrogate */
6566:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6567:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = c;
6568:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 2	/* UTF-8 input */
6569:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6570:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (pb->ct == 0) {	/* Out of multi-byte sequence? */
6571:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[pb->wi = 0] = (BYTE)c;	/* Save 1st byte */
6572:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if ((BYTE)c < 0x80) break;					/* Single byte? */
6573:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xE0) == 0xC0) pb->ct = 1;	/* 2-byte sequence? */
6574:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF0) == 0xE0) pb->ct = 2;	/* 3-byte sequence? */
6575:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xF1) == 0xF0) pb->ct = 3;	/* 4-byte sequence? */
6576:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6577:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {				/* In the multi-byte sequence */
6578:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (((BYTE)c & 0xC0) != 0x80) {	/* Broken sequence? */
6579:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->ct = 0; continue;
6580:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6581:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->bs[++pb->wi] = (BYTE)c;	/* Save the trailing byte */
6582:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (--pb->ct == 0) break;	/* End of multi-byte sequence? */
6583:../Dave/Generated/FATFS/ff_Src/ff.c **** 			return;
6584:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6585:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6586:../Dave/Generated/FATFS/ff_Src/ff.c **** 	tp = (const TCHAR*)pb->bs;
6587:../Dave/Generated/FATFS/ff_Src/ff.c **** 	dc = tchar2uni(&tp);	/* UTF-8 ==> UTF-16 */
6588:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (dc == 0xFFFFFFFF) return;	/* Wrong code? */
6589:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = (WCHAR)dc;
6590:../Dave/Generated/FATFS/ff_Src/ff.c **** 	hs = (WCHAR)(dc >> 16);
6591:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_LFN_UNICODE == 3	/* UTF-32 input */
6592:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (IsSurrogate(c) || c >= 0x110000) return;	/* Discard invalid code */
6593:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (c >= 0x10000) {		/* Out of BMP? */
6594:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (WCHAR)(0xD800 | ((c >> 10) - 0x40)); 	/* Make high surrogate */
6595:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = 0xDC00 | (c & 0x3FF);					/* Make low surrogate */
6596:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6597:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = 0;
6598:../Dave/Generated/FATFS/ff_Src/ff.c **** 		wc = (WCHAR)c;
6599:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6600:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6601:../Dave/Generated/FATFS/ff_Src/ff.c **** 	/* A code point in UTF-16 is available in hs and wc */
6602:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6603:../Dave/Generated/FATFS/ff_Src/ff.c **** #if FF_STRF_ENCODE == 1		/* Write a code point in UTF-16LE */
6604:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {	/* Surrogate pair? */
6605:../Dave/Generated/FATFS/ff_Src/ff.c **** 		st_word(&pb->buf[i], hs);
6606:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i += 2;
6607:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6608:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6609:../Dave/Generated/FATFS/ff_Src/ff.c **** 	st_word(&pb->buf[i], wc);
6610:../Dave/Generated/FATFS/ff_Src/ff.c **** 	i += 2;
6611:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 2	/* Write a code point in UTF-16BE */
6612:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {	/* Surrogate pair? */
6613:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(hs >> 8);
6614:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)hs;
6615:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc++;
6616:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6617:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)(wc >> 8);
6618:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6619:../Dave/Generated/FATFS/ff_Src/ff.c **** #elif FF_STRF_ENCODE == 3	/* Write a code point in UTF-8 */
6620:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) {	/* 4-byte sequence? */
6621:../Dave/Generated/FATFS/ff_Src/ff.c **** 		nc += 3;
6622:../Dave/Generated/FATFS/ff_Src/ff.c **** 		hs = (hs & 0x3FF) + 0x40;
6623:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0xF0 | hs >> 8);
6624:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs >> 2 & 0x3F));
6625:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (hs & 3) << 4 | (wc >> 6 & 0x0F));
6626:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6627:../Dave/Generated/FATFS/ff_Src/ff.c **** 	} else {
6628:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (wc < 0x80) {	/* Single byte? */
6629:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)wc;
6630:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6631:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (wc < 0x800) {	/* 2-byte sequence? */
6632:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 1;
6633:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xC0 | wc >> 6);
6634:../Dave/Generated/FATFS/ff_Src/ff.c **** 			} else {			/* 3-byte sequence */
6635:../Dave/Generated/FATFS/ff_Src/ff.c **** 				nc += 2;
6636:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0xE0 | wc >> 12);
6637:../Dave/Generated/FATFS/ff_Src/ff.c **** 				pb->buf[i++] = (BYTE)(0x80 | (wc >> 6 & 0x3F));
6638:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6639:../Dave/Generated/FATFS/ff_Src/ff.c **** 			pb->buf[i++] = (BYTE)(0x80 | (wc & 0x3F));
6640:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6641:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6642:../Dave/Generated/FATFS/ff_Src/ff.c **** #else						/* Write a code point in ANSI/OEM */
6643:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (hs != 0) return;
6644:../Dave/Generated/FATFS/ff_Src/ff.c **** 	wc = ff_uni2oem(wc, CODEPAGE);	/* UTF-16 ==> ANSI/OEM */
6645:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc == 0) return;
6646:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (wc >= 0x100) {
6647:../Dave/Generated/FATFS/ff_Src/ff.c **** 		pb->buf[i++] = (BYTE)(wc >> 8); nc++;
6648:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6649:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)wc;
6650:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6651:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6652:../Dave/Generated/FATFS/ff_Src/ff.c **** #else									/* ANSI/OEM input (without re-encoding) */
6653:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->buf[i++] = (BYTE)c;
 10187              	 .loc 1 6653 0
 10188 002c 7B69     	 ldr r3,[r7,#20]
 10189 002e 5A1C     	 adds r2,r3,#1
 10190 0030 7A61     	 str r2,[r7,#20]
 10191 0032 7A68     	 ldr r2,[r7,#4]
 10192 0034 1344     	 add r3,r3,r2
 10193 0036 FA78     	 ldrb r2,[r7,#3]
 10194 0038 1A73     	 strb r2,[r3,#12]
6654:../Dave/Generated/FATFS/ff_Src/ff.c **** #endif
6655:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6656:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (i >= (int)(sizeof pb->buf) - 4) {	/* Write buffered characters to the file */
 10195              	 .loc 1 6656 0
 10196 003a 7B69     	 ldr r3,[r7,#20]
 10197 003c 3B2B     	 cmp r3,#59
 10198 003e 12DD     	 ble .L622
6657:../Dave/Generated/FATFS/ff_Src/ff.c **** 		f_write(pb->fp, pb->buf, (UINT)i, &n);
 10199              	 .loc 1 6657 0
 10200 0040 7B68     	 ldr r3,[r7,#4]
 10201 0042 1868     	 ldr r0,[r3]
 10202 0044 7B68     	 ldr r3,[r7,#4]
 10203 0046 03F10C01 	 add r1,r3,#12
 10204 004a 7A69     	 ldr r2,[r7,#20]
 10205 004c 07F10C03 	 add r3,r7,#12
 10206 0050 FFF7FEFF 	 bl f_write
6658:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = (n == (UINT)i) ? 0 : -1;
 10207              	 .loc 1 6658 0
 10208 0054 7A69     	 ldr r2,[r7,#20]
 10209 0056 FB68     	 ldr r3,[r7,#12]
 10210 0058 9A42     	 cmp r2,r3
 10211 005a 01D1     	 bne .L623
 10212              	 .loc 1 6658 0 is_stmt 0 discriminator 1
 10213 005c 0023     	 movs r3,#0
 10214 005e 01E0     	 b .L624
 10215              	.L623:
 10216              	 .loc 1 6658 0 discriminator 2
 10217 0060 4FF0FF33 	 mov r3,#-1
 10218              	.L624:
 10219              	 .loc 1 6658 0 discriminator 4
 10220 0064 7B61     	 str r3,[r7,#20]
 10221              	.L622:
6659:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
6660:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->idx = i;
 10222              	 .loc 1 6660 0 is_stmt 1
 10223 0066 7B68     	 ldr r3,[r7,#4]
 10224 0068 7A69     	 ldr r2,[r7,#20]
 10225 006a 5A60     	 str r2,[r3,#4]
6661:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->nchr = nc + 1;
 10226              	 .loc 1 6661 0
 10227 006c 3B69     	 ldr r3,[r7,#16]
 10228 006e 5A1C     	 adds r2,r3,#1
 10229 0070 7B68     	 ldr r3,[r7,#4]
 10230 0072 9A60     	 str r2,[r3,#8]
 10231              	.L618:
6662:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10232              	 .loc 1 6662 0
 10233 0074 1837     	 adds r7,r7,#24
 10234              	.LCFI325:
 10235              	 .cfi_def_cfa_offset 8
 10236 0076 BD46     	 mov sp,r7
 10237              	.LCFI326:
 10238              	 .cfi_def_cfa_register 13
 10239              	 
 10240 0078 80BD     	 pop {r7,pc}
 10241              	 .cfi_endproc
 10242              	.LFE61:
 10244 007a 00BF     	 .section .text.putc_flush,"ax",%progbits
 10245              	 .align 2
 10246              	 .thumb
 10247              	 .thumb_func
 10249              	putc_flush:
 10250              	.LFB62:
6663:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6664:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6665:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Flush remaining characters in the buffer */
6666:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6667:../Dave/Generated/FATFS/ff_Src/ff.c **** static int putc_flush (putbuff* pb)
6668:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10251              	 .loc 1 6668 0
 10252              	 .cfi_startproc
 10253              	 
 10254              	 
 10255 0000 90B5     	 push {r4,r7,lr}
 10256              	.LCFI327:
 10257              	 .cfi_def_cfa_offset 12
 10258              	 .cfi_offset 4,-12
 10259              	 .cfi_offset 7,-8
 10260              	 .cfi_offset 14,-4
 10261 0002 85B0     	 sub sp,sp,#20
 10262              	.LCFI328:
 10263              	 .cfi_def_cfa_offset 32
 10264 0004 00AF     	 add r7,sp,#0
 10265              	.LCFI329:
 10266              	 .cfi_def_cfa_register 7
 10267 0006 7860     	 str r0,[r7,#4]
6669:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT nw;
6670:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6671:../Dave/Generated/FATFS/ff_Src/ff.c **** 	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 10268              	 .loc 1 6671 0
 10269 0008 7B68     	 ldr r3,[r7,#4]
 10270 000a 5B68     	 ldr r3,[r3,#4]
 10271 000c 002B     	 cmp r3,#0
 10272 000e 1ADB     	 blt .L626
6672:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 10273              	 .loc 1 6672 0
 10274 0010 7B68     	 ldr r3,[r7,#4]
 10275 0012 1968     	 ldr r1,[r3]
 10276 0014 7B68     	 ldr r3,[r7,#4]
 10277 0016 03F10C02 	 add r2,r3,#12
 10278 001a 7B68     	 ldr r3,[r7,#4]
 10279 001c 5B68     	 ldr r3,[r3,#4]
 10280 001e 1C46     	 mov r4,r3
 10281 0020 07F10C03 	 add r3,r7,#12
 10282 0024 0846     	 mov r0,r1
 10283 0026 1146     	 mov r1,r2
 10284 0028 2246     	 mov r2,r4
 10285 002a FFF7FEFF 	 bl f_write
 10286 002e 0346     	 mov r3,r0
 10287 0030 002B     	 cmp r3,#0
 10288 0032 08D1     	 bne .L626
6673:../Dave/Generated/FATFS/ff_Src/ff.c **** 		&& (UINT)pb->idx == nw) return pb->nchr;
 10289              	 .loc 1 6673 0
 10290 0034 7B68     	 ldr r3,[r7,#4]
 10291 0036 5B68     	 ldr r3,[r3,#4]
 10292 0038 1A46     	 mov r2,r3
 10293 003a FB68     	 ldr r3,[r7,#12]
 10294 003c 9A42     	 cmp r2,r3
 10295 003e 02D1     	 bne .L626
 10296              	 .loc 1 6673 0 is_stmt 0 discriminator 1
 10297 0040 7B68     	 ldr r3,[r7,#4]
 10298 0042 9B68     	 ldr r3,[r3,#8]
 10299 0044 01E0     	 b .L628
 10300              	.L626:
6674:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return -1;
 10301              	 .loc 1 6674 0 is_stmt 1
 10302 0046 4FF0FF33 	 mov r3,#-1
 10303              	.L628:
6675:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10304              	 .loc 1 6675 0 discriminator 1
 10305 004a 1846     	 mov r0,r3
 10306 004c 1437     	 adds r7,r7,#20
 10307              	.LCFI330:
 10308              	 .cfi_def_cfa_offset 12
 10309 004e BD46     	 mov sp,r7
 10310              	.LCFI331:
 10311              	 .cfi_def_cfa_register 13
 10312              	 
 10313 0050 90BD     	 pop {r4,r7,pc}
 10314              	 .cfi_endproc
 10315              	.LFE62:
 10317 0052 00BF     	 .section .text.putc_init,"ax",%progbits
 10318              	 .align 2
 10319              	 .thumb
 10320              	 .thumb_func
 10322              	putc_init:
 10323              	.LFB63:
6676:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6677:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6678:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Initialize write buffer */
6679:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6680:../Dave/Generated/FATFS/ff_Src/ff.c **** static void putc_init (putbuff* pb, FIL* fp)
6681:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10324              	 .loc 1 6681 0
 10325              	 .cfi_startproc
 10326              	 
 10327              	 
 10328 0000 80B5     	 push {r7,lr}
 10329              	.LCFI332:
 10330              	 .cfi_def_cfa_offset 8
 10331              	 .cfi_offset 7,-8
 10332              	 .cfi_offset 14,-4
 10333 0002 82B0     	 sub sp,sp,#8
 10334              	.LCFI333:
 10335              	 .cfi_def_cfa_offset 16
 10336 0004 00AF     	 add r7,sp,#0
 10337              	.LCFI334:
 10338              	 .cfi_def_cfa_register 7
 10339 0006 7860     	 str r0,[r7,#4]
 10340 0008 3960     	 str r1,[r7]
6682:../Dave/Generated/FATFS/ff_Src/ff.c **** 	mem_set(pb, 0, sizeof (putbuff));
 10341              	 .loc 1 6682 0
 10342 000a 7868     	 ldr r0,[r7,#4]
 10343 000c 0021     	 movs r1,#0
 10344 000e 4C22     	 movs r2,#76
 10345 0010 FFF7FEFF 	 bl mem_set
6683:../Dave/Generated/FATFS/ff_Src/ff.c **** 	pb->fp = fp;
 10346              	 .loc 1 6683 0
 10347 0014 7B68     	 ldr r3,[r7,#4]
 10348 0016 3A68     	 ldr r2,[r7]
 10349 0018 1A60     	 str r2,[r3]
6684:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10350              	 .loc 1 6684 0
 10351 001a 0837     	 adds r7,r7,#8
 10352              	.LCFI335:
 10353              	 .cfi_def_cfa_offset 8
 10354 001c BD46     	 mov sp,r7
 10355              	.LCFI336:
 10356              	 .cfi_def_cfa_register 13
 10357              	 
 10358 001e 80BD     	 pop {r7,pc}
 10359              	 .cfi_endproc
 10360              	.LFE63:
 10362              	 .section .text.f_putc,"ax",%progbits
 10363              	 .align 2
 10364              	 .global f_putc
 10365              	 .thumb
 10366              	 .thumb_func
 10368              	f_putc:
 10369              	.LFB64:
6685:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6686:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6687:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6688:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_putc (
6689:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c,	/* A character to be output */
6690:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp		/* Pointer to the file object */
6691:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6692:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10370              	 .loc 1 6692 0
 10371              	 .cfi_startproc
 10372              	 
 10373              	 
 10374 0000 80B5     	 push {r7,lr}
 10375              	.LCFI337:
 10376              	 .cfi_def_cfa_offset 8
 10377              	 .cfi_offset 7,-8
 10378              	 .cfi_offset 14,-4
 10379 0002 96B0     	 sub sp,sp,#88
 10380              	.LCFI338:
 10381              	 .cfi_def_cfa_offset 96
 10382 0004 00AF     	 add r7,sp,#0
 10383              	.LCFI339:
 10384              	 .cfi_def_cfa_register 7
 10385 0006 0346     	 mov r3,r0
 10386 0008 3960     	 str r1,[r7]
 10387 000a FB71     	 strb r3,[r7,#7]
6693:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6694:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6695:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6696:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10388              	 .loc 1 6696 0
 10389 000c 07F10C03 	 add r3,r7,#12
 10390 0010 1846     	 mov r0,r3
 10391 0012 3968     	 ldr r1,[r7]
 10392 0014 FFF7FEFF 	 bl putc_init
6697:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_bfd(&pb, c);	/* Put the character */
 10393              	 .loc 1 6697 0
 10394 0018 07F10C02 	 add r2,r7,#12
 10395 001c FB79     	 ldrb r3,[r7,#7]
 10396 001e 1046     	 mov r0,r2
 10397 0020 1946     	 mov r1,r3
 10398 0022 FFF7FEFF 	 bl putc_bfd
6698:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 10399              	 .loc 1 6698 0
 10400 0026 07F10C03 	 add r3,r7,#12
 10401 002a 1846     	 mov r0,r3
 10402 002c FFF7FEFF 	 bl putc_flush
 10403 0030 0346     	 mov r3,r0
6699:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10404              	 .loc 1 6699 0
 10405 0032 1846     	 mov r0,r3
 10406 0034 5837     	 adds r7,r7,#88
 10407              	.LCFI340:
 10408              	 .cfi_def_cfa_offset 8
 10409 0036 BD46     	 mov sp,r7
 10410              	.LCFI341:
 10411              	 .cfi_def_cfa_register 13
 10412              	 
 10413 0038 80BD     	 pop {r7,pc}
 10414              	 .cfi_endproc
 10415              	.LFE64:
 10417 003a 00BF     	 .section .text.f_puts,"ax",%progbits
 10418              	 .align 2
 10419              	 .global f_puts
 10420              	 .thumb
 10421              	 .thumb_func
 10423              	f_puts:
 10424              	.LFB65:
6700:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6701:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6702:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6703:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6704:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6705:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a String to the File                                              */
6706:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6707:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6708:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_puts (
6709:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* str,	/* Pointer to the string to be output */
6710:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp				/* Pointer to the file object */
6711:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6712:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10425              	 .loc 1 6712 0
 10426              	 .cfi_startproc
 10427              	 
 10428              	 
 10429 0000 80B5     	 push {r7,lr}
 10430              	.LCFI342:
 10431              	 .cfi_def_cfa_offset 8
 10432              	 .cfi_offset 7,-8
 10433              	 .cfi_offset 14,-4
 10434 0002 96B0     	 sub sp,sp,#88
 10435              	.LCFI343:
 10436              	 .cfi_def_cfa_offset 96
 10437 0004 00AF     	 add r7,sp,#0
 10438              	.LCFI344:
 10439              	 .cfi_def_cfa_register 7
 10440 0006 7860     	 str r0,[r7,#4]
 10441 0008 3960     	 str r1,[r7]
6713:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6714:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6715:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6716:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10442              	 .loc 1 6716 0
 10443 000a 07F10C03 	 add r3,r7,#12
 10444 000e 1846     	 mov r0,r3
 10445 0010 3968     	 ldr r1,[r7]
 10446 0012 FFF7FEFF 	 bl putc_init
6717:../Dave/Generated/FATFS/ff_Src/ff.c **** 	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 10447              	 .loc 1 6717 0
 10448 0016 09E0     	 b .L633
 10449              	.L634:
 10450              	 .loc 1 6717 0 is_stmt 0 discriminator 2
 10451 0018 7B68     	 ldr r3,[r7,#4]
 10452 001a 5A1C     	 adds r2,r3,#1
 10453 001c 7A60     	 str r2,[r7,#4]
 10454 001e 1B78     	 ldrb r3,[r3]
 10455 0020 07F10C02 	 add r2,r7,#12
 10456 0024 1046     	 mov r0,r2
 10457 0026 1946     	 mov r1,r3
 10458 0028 FFF7FEFF 	 bl putc_bfd
 10459              	.L633:
 10460              	 .loc 1 6717 0 discriminator 1
 10461 002c 7B68     	 ldr r3,[r7,#4]
 10462 002e 1B78     	 ldrb r3,[r3]
 10463 0030 002B     	 cmp r3,#0
 10464 0032 F1D1     	 bne .L634
6718:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 10465              	 .loc 1 6718 0 is_stmt 1
 10466 0034 07F10C03 	 add r3,r7,#12
 10467 0038 1846     	 mov r0,r3
 10468 003a FFF7FEFF 	 bl putc_flush
 10469 003e 0346     	 mov r3,r0
6719:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 10470              	 .loc 1 6719 0
 10471 0040 1846     	 mov r0,r3
 10472 0042 5837     	 adds r7,r7,#88
 10473              	.LCFI345:
 10474              	 .cfi_def_cfa_offset 8
 10475 0044 BD46     	 mov sp,r7
 10476              	.LCFI346:
 10477              	 .cfi_def_cfa_register 13
 10478              	 
 10479 0046 80BD     	 pop {r7,pc}
 10480              	 .cfi_endproc
 10481              	.LFE65:
 10483              	 .section .text.f_printf,"ax",%progbits
 10484              	 .align 2
 10485              	 .global f_printf
 10486              	 .thumb
 10487              	 .thumb_func
 10489              	f_printf:
 10490              	.LFB66:
6720:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6721:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6722:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6723:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6724:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6725:../Dave/Generated/FATFS/ff_Src/ff.c **** /* Put a Formatted String to the File                                    */
6726:../Dave/Generated/FATFS/ff_Src/ff.c **** /*-----------------------------------------------------------------------*/
6727:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6728:../Dave/Generated/FATFS/ff_Src/ff.c **** int f_printf (
6729:../Dave/Generated/FATFS/ff_Src/ff.c **** 	FIL* fp,			/* Pointer to the file object */
6730:../Dave/Generated/FATFS/ff_Src/ff.c **** 	const TCHAR* fmt,	/* Pointer to the format string */
6731:../Dave/Generated/FATFS/ff_Src/ff.c **** 	...					/* Optional arguments... */
6732:../Dave/Generated/FATFS/ff_Src/ff.c **** )
6733:../Dave/Generated/FATFS/ff_Src/ff.c **** {
 10491              	 .loc 1 6733 0
 10492              	 .cfi_startproc
 10493              	 
 10494              	 
 10495 0000 0EB4     	 push {r1,r2,r3}
 10496              	.LCFI347:
 10497              	 .cfi_def_cfa_offset 12
 10498              	 .cfi_offset 1,-12
 10499              	 .cfi_offset 2,-8
 10500              	 .cfi_offset 3,-4
 10501 0002 80B5     	 push {r7,lr}
 10502              	.LCFI348:
 10503              	 .cfi_def_cfa_offset 20
 10504              	 .cfi_offset 7,-20
 10505              	 .cfi_offset 14,-16
 10506 0004 A7B0     	 sub sp,sp,#156
 10507              	.LCFI349:
 10508              	 .cfi_def_cfa_offset 176
 10509 0006 00AF     	 add r7,sp,#0
 10510              	.LCFI350:
 10511              	 .cfi_def_cfa_register 7
 10512 0008 7860     	 str r0,[r7,#4]
6734:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_list arp;
6735:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putbuff pb;
6736:../Dave/Generated/FATFS/ff_Src/ff.c **** 	BYTE f, r;
6737:../Dave/Generated/FATFS/ff_Src/ff.c **** 	UINT i, j, w;
6738:../Dave/Generated/FATFS/ff_Src/ff.c **** 	DWORD v;
6739:../Dave/Generated/FATFS/ff_Src/ff.c **** 	TCHAR c, d, str[32], *p;
6740:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6741:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6742:../Dave/Generated/FATFS/ff_Src/ff.c **** 	putc_init(&pb, fp);
 10513              	 .loc 1 6742 0
 10514 000a 07F12C03 	 add r3,r7,#44
 10515 000e 1846     	 mov r0,r3
 10516 0010 7968     	 ldr r1,[r7,#4]
 10517 0012 FFF7FEFF 	 bl putc_init
6743:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6744:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_start(arp, fmt);
 10518              	 .loc 1 6744 0
 10519 0016 07F1A803 	 add r3,r7,#168
 10520 001a BB67     	 str r3,[r7,#120]
 10521              	.L687:
6745:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6746:../Dave/Generated/FATFS/ff_Src/ff.c **** 	for (;;) {
6747:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 10522              	 .loc 1 6747 0
 10523 001c D7F8A430 	 ldr r3,[r7,#164]
 10524 0020 5A1C     	 adds r2,r3,#1
 10525 0022 C7F8A420 	 str r2,[r7,#164]
 10526 0026 1B78     	 ldrb r3,[r3]
 10527 0028 87F88330 	 strb r3,[r7,#131]
6748:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;			/* End of string */
 10528              	 .loc 1 6748 0
 10529 002c 97F88330 	 ldrb r3,[r7,#131]
 10530 0030 002B     	 cmp r3,#0
 10531 0032 00D1     	 bne .L637
 10532 0034 07E2     	 b .L638
 10533              	.L637:
6749:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c != '%') {				/* Non escape character */
 10534              	 .loc 1 6749 0
 10535 0036 97F88330 	 ldrb r3,[r7,#131]
 10536 003a 252B     	 cmp r3,#37
 10537 003c 08D0     	 beq .L639
6750:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c);
 10538              	 .loc 1 6750 0
 10539 003e 07F12C02 	 add r2,r7,#44
 10540 0042 97F88330 	 ldrb r3,[r7,#131]
 10541 0046 1046     	 mov r0,r2
 10542 0048 1946     	 mov r1,r3
 10543 004a FFF7FEFF 	 bl putc_bfd
6751:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 10544              	 .loc 1 6751 0
 10545 004e F9E1     	 b .L640
 10546              	.L639:
6752:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6753:../Dave/Generated/FATFS/ff_Src/ff.c **** 		w = f = 0;
 10547              	 .loc 1 6753 0
 10548 0050 0023     	 movs r3,#0
 10549 0052 87F89730 	 strb r3,[r7,#151]
 10550 0056 0023     	 movs r3,#0
 10551 0058 C7F88830 	 str r3,[r7,#136]
6754:../Dave/Generated/FATFS/ff_Src/ff.c **** 		c = *fmt++;
 10552              	 .loc 1 6754 0
 10553 005c D7F8A430 	 ldr r3,[r7,#164]
 10554 0060 5A1C     	 adds r2,r3,#1
 10555 0062 C7F8A420 	 str r2,[r7,#164]
 10556 0066 1B78     	 ldrb r3,[r3]
 10557 0068 87F88330 	 strb r3,[r7,#131]
6755:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '0') {				/* Flag: '0' padding */
 10558              	 .loc 1 6755 0
 10559 006c 97F88330 	 ldrb r3,[r7,#131]
 10560 0070 302B     	 cmp r3,#48
 10561 0072 0BD1     	 bne .L641
6756:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f = 1; c = *fmt++;
 10562              	 .loc 1 6756 0
 10563 0074 0123     	 movs r3,#1
 10564 0076 87F89730 	 strb r3,[r7,#151]
 10565 007a D7F8A430 	 ldr r3,[r7,#164]
 10566 007e 5A1C     	 adds r2,r3,#1
 10567 0080 C7F8A420 	 str r2,[r7,#164]
 10568 0084 1B78     	 ldrb r3,[r3]
 10569 0086 87F88330 	 strb r3,[r7,#131]
 10570 008a 0EE0     	 b .L642
 10571              	.L641:
6757:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6758:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (c == '-') {			/* Flag: left justified */
 10572              	 .loc 1 6758 0
 10573 008c 97F88330 	 ldrb r3,[r7,#131]
 10574 0090 2D2B     	 cmp r3,#45
 10575 0092 0AD1     	 bne .L642
6759:../Dave/Generated/FATFS/ff_Src/ff.c **** 				f = 2; c = *fmt++;
 10576              	 .loc 1 6759 0
 10577 0094 0223     	 movs r3,#2
 10578 0096 87F89730 	 strb r3,[r7,#151]
 10579 009a D7F8A430 	 ldr r3,[r7,#164]
 10580 009e 5A1C     	 adds r2,r3,#1
 10581 00a0 C7F8A420 	 str r2,[r7,#164]
 10582 00a4 1B78     	 ldrb r3,[r3]
 10583 00a6 87F88330 	 strb r3,[r7,#131]
 10584              	.L642:
6760:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6761:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6762:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == '*') {				/* Minimum width by argument */
 10585              	 .loc 1 6762 0
 10586 00aa 97F88330 	 ldrb r3,[r7,#131]
 10587 00ae 2A2B     	 cmp r3,#42
 10588 00b0 0ED1     	 bne .L643
6763:../Dave/Generated/FATFS/ff_Src/ff.c **** 			w = va_arg(arp, int);
 10589              	 .loc 1 6763 0
 10590 00b2 BB6F     	 ldr r3,[r7,#120]
 10591 00b4 1A1D     	 adds r2,r3,#4
 10592 00b6 BA67     	 str r2,[r7,#120]
 10593 00b8 1B68     	 ldr r3,[r3]
 10594 00ba C7F88830 	 str r3,[r7,#136]
6764:../Dave/Generated/FATFS/ff_Src/ff.c **** 			c = *fmt++;
 10595              	 .loc 1 6764 0
 10596 00be D7F8A430 	 ldr r3,[r7,#164]
 10597 00c2 5A1C     	 adds r2,r3,#1
 10598 00c4 C7F8A420 	 str r2,[r7,#164]
 10599 00c8 1B78     	 ldrb r3,[r3]
 10600 00ca 87F88330 	 strb r3,[r7,#131]
 10601 00ce 1DE0     	 b .L644
 10602              	.L643:
6765:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} else {
6766:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (IsDigit(c)) {	/* Minimum width */
 10603              	 .loc 1 6766 0
 10604 00d0 14E0     	 b .L645
 10605              	.L646:
6767:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10606              	 .loc 1 6767 0
 10607 00d2 D7F88820 	 ldr r2,[r7,#136]
 10608 00d6 1346     	 mov r3,r2
 10609 00d8 9B00     	 lsls r3,r3,#2
 10610 00da 1344     	 add r3,r3,r2
 10611 00dc 5B00     	 lsls r3,r3,#1
 10612 00de 1A46     	 mov r2,r3
 10613 00e0 97F88330 	 ldrb r3,[r7,#131]
 10614 00e4 1344     	 add r3,r3,r2
 10615 00e6 303B     	 subs r3,r3,#48
 10616 00e8 C7F88830 	 str r3,[r7,#136]
6768:../Dave/Generated/FATFS/ff_Src/ff.c **** 				c = *fmt++;
 10617              	 .loc 1 6768 0
 10618 00ec D7F8A430 	 ldr r3,[r7,#164]
 10619 00f0 5A1C     	 adds r2,r3,#1
 10620 00f2 C7F8A420 	 str r2,[r7,#164]
 10621 00f6 1B78     	 ldrb r3,[r3]
 10622 00f8 87F88330 	 strb r3,[r7,#131]
 10623              	.L645:
6766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10624              	 .loc 1 6766 0
 10625 00fc 97F88330 	 ldrb r3,[r7,#131]
 10626 0100 2F2B     	 cmp r3,#47
 10627 0102 03D9     	 bls .L644
6766:../Dave/Generated/FATFS/ff_Src/ff.c **** 				w = w * 10 + c - '0';
 10628              	 .loc 1 6766 0 is_stmt 0 discriminator 1
 10629 0104 97F88330 	 ldrb r3,[r7,#131]
 10630 0108 392B     	 cmp r3,#57
 10631 010a E2D9     	 bls .L646
 10632              	.L644:
6769:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6770:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6771:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
 10633              	 .loc 1 6771 0 is_stmt 1
 10634 010c 97F88330 	 ldrb r3,[r7,#131]
 10635 0110 6C2B     	 cmp r3,#108
 10636 0112 03D0     	 beq .L647
 10637              	 .loc 1 6771 0 is_stmt 0 discriminator 1
 10638 0114 97F88330 	 ldrb r3,[r7,#131]
 10639 0118 4C2B     	 cmp r3,#76
 10640 011a 0DD1     	 bne .L648
 10641              	.L647:
6772:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 4; c = *fmt++;
 10642              	 .loc 1 6772 0 is_stmt 1
 10643 011c 97F89730 	 ldrb r3,[r7,#151]
 10644 0120 43F00403 	 orr r3,r3,#4
 10645 0124 87F89730 	 strb r3,[r7,#151]
 10646 0128 D7F8A430 	 ldr r3,[r7,#164]
 10647 012c 5A1C     	 adds r2,r3,#1
 10648 012e C7F8A420 	 str r2,[r7,#164]
 10649 0132 1B78     	 ldrb r3,[r3]
 10650 0134 87F88330 	 strb r3,[r7,#131]
 10651              	.L648:
6773:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6774:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (c == 0) break;
 10652              	 .loc 1 6774 0
 10653 0138 97F88330 	 ldrb r3,[r7,#131]
 10654 013c 002B     	 cmp r3,#0
 10655 013e 00D1     	 bne .L649
 10656 0140 81E1     	 b .L638
 10657              	.L649:
6775:../Dave/Generated/FATFS/ff_Src/ff.c **** 		d = c;
 10658              	 .loc 1 6775 0
 10659 0142 97F88330 	 ldrb r3,[r7,#131]
 10660 0146 87F88230 	 strb r3,[r7,#130]
6776:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (IsLower(d)) d -= 0x20;
 10661              	 .loc 1 6776 0
 10662 014a 97F88230 	 ldrb r3,[r7,#130]
 10663 014e 602B     	 cmp r3,#96
 10664 0150 08D9     	 bls .L650
 10665              	 .loc 1 6776 0 is_stmt 0 discriminator 1
 10666 0152 97F88230 	 ldrb r3,[r7,#130]
 10667 0156 7A2B     	 cmp r3,#122
 10668 0158 04D8     	 bhi .L650
 10669              	 .loc 1 6776 0 discriminator 2
 10670 015a 97F88230 	 ldrb r3,[r7,#130]
 10671 015e 203B     	 subs r3,r3,#32
 10672 0160 87F88230 	 strb r3,[r7,#130]
 10673              	.L650:
6777:../Dave/Generated/FATFS/ff_Src/ff.c **** 		switch (d) {				/* Atgument type is... */
 10674              	 .loc 1 6777 0 is_stmt 1
 10675 0164 97F88230 	 ldrb r3,[r7,#130]
 10676 0168 423B     	 subs r3,r3,#66
 10677 016a 162B     	 cmp r3,#22
 10678 016c 00F29980 	 bhi .L651
 10679 0170 01A2     	 adr r2,.L653
 10680 0172 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 10681 0176 00BF     	 .p2align 2
 10682              	.L653:
 10683 0178 83020000 	 .word .L652+1
 10684 017c 6B020000 	 .word .L654+1
 10685 0180 93020000 	 .word .L655+1
 10686 0184 A3020000 	 .word .L651+1
 10687 0188 A3020000 	 .word .L651+1
 10688 018c A3020000 	 .word .L651+1
 10689 0190 A3020000 	 .word .L651+1
 10690 0194 A3020000 	 .word .L651+1
 10691 0198 A3020000 	 .word .L651+1
 10692 019c A3020000 	 .word .L651+1
 10693 01a0 A3020000 	 .word .L651+1
 10694 01a4 A3020000 	 .word .L651+1
 10695 01a8 A3020000 	 .word .L651+1
 10696 01ac 8B020000 	 .word .L656+1
 10697 01b0 A3020000 	 .word .L651+1
 10698 01b4 A3020000 	 .word .L651+1
 10699 01b8 A3020000 	 .word .L651+1
 10700 01bc D5010000 	 .word .L657+1
 10701 01c0 A3020000 	 .word .L651+1
 10702 01c4 93020000 	 .word .L655+1
 10703 01c8 A3020000 	 .word .L651+1
 10704 01cc A3020000 	 .word .L651+1
 10705 01d0 9B020000 	 .word .L658+1
 10706              	 .p2align 1
 10707              	.L657:
6778:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'S':					/* String */
6779:../Dave/Generated/FATFS/ff_Src/ff.c **** 			p = va_arg(arp, TCHAR*);
 10708              	 .loc 1 6779 0
 10709 01d4 BB6F     	 ldr r3,[r7,#120]
 10710 01d6 1A1D     	 adds r2,r3,#4
 10711 01d8 BA67     	 str r2,[r7,#120]
 10712 01da 1B68     	 ldr r3,[r3]
 10713 01dc FB67     	 str r3,[r7,#124]
6780:../Dave/Generated/FATFS/ff_Src/ff.c **** 			for (j = 0; p[j]; j++) ;
 10714              	 .loc 1 6780 0
 10715 01de 0023     	 movs r3,#0
 10716 01e0 C7F88C30 	 str r3,[r7,#140]
 10717 01e4 04E0     	 b .L659
 10718              	.L660:
 10719              	 .loc 1 6780 0 is_stmt 0 discriminator 3
 10720 01e6 D7F88C30 	 ldr r3,[r7,#140]
 10721 01ea 0133     	 adds r3,r3,#1
 10722 01ec C7F88C30 	 str r3,[r7,#140]
 10723              	.L659:
 10724              	 .loc 1 6780 0 discriminator 1
 10725 01f0 FA6F     	 ldr r2,[r7,#124]
 10726 01f2 D7F88C30 	 ldr r3,[r7,#140]
 10727 01f6 1344     	 add r3,r3,r2
 10728 01f8 1B78     	 ldrb r3,[r3]
 10729 01fa 002B     	 cmp r3,#0
 10730 01fc F3D1     	 bne .L660
6781:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (!(f & 2)) {						/* Right padded */
 10731              	 .loc 1 6781 0 is_stmt 1
 10732 01fe 97F89730 	 ldrb r3,[r7,#151]
 10733 0202 03F00203 	 and r3,r3,#2
 10734 0206 002B     	 cmp r3,#0
 10735 0208 0FD1     	 bne .L661
6782:../Dave/Generated/FATFS/ff_Src/ff.c **** 				while (j++ < w) putc_bfd(&pb, ' ') ;
 10736              	 .loc 1 6782 0
 10737 020a 05E0     	 b .L662
 10738              	.L663:
 10739              	 .loc 1 6782 0 is_stmt 0 discriminator 2
 10740 020c 07F12C03 	 add r3,r7,#44
 10741 0210 1846     	 mov r0,r3
 10742 0212 2021     	 movs r1,#32
 10743 0214 FFF7FEFF 	 bl putc_bfd
 10744              	.L662:
 10745              	 .loc 1 6782 0 discriminator 1
 10746 0218 D7F88C30 	 ldr r3,[r7,#140]
 10747 021c 5A1C     	 adds r2,r3,#1
 10748 021e C7F88C20 	 str r2,[r7,#140]
 10749 0222 D7F88820 	 ldr r2,[r7,#136]
 10750 0226 9342     	 cmp r3,r2
 10751 0228 F0D3     	 bcc .L663
 10752              	.L661:
6783:../Dave/Generated/FATFS/ff_Src/ff.c **** 			}
6784:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
 10753              	 .loc 1 6784 0 is_stmt 1
 10754 022a 09E0     	 b .L664
 10755              	.L665:
 10756              	 .loc 1 6784 0 is_stmt 0 discriminator 2
 10757 022c FB6F     	 ldr r3,[r7,#124]
 10758 022e 5A1C     	 adds r2,r3,#1
 10759 0230 FA67     	 str r2,[r7,#124]
 10760 0232 1B78     	 ldrb r3,[r3]
 10761 0234 07F12C02 	 add r2,r7,#44
 10762 0238 1046     	 mov r0,r2
 10763 023a 1946     	 mov r1,r3
 10764 023c FFF7FEFF 	 bl putc_bfd
 10765              	.L664:
 10766              	 .loc 1 6784 0 discriminator 1
 10767 0240 FB6F     	 ldr r3,[r7,#124]
 10768 0242 1B78     	 ldrb r3,[r3]
 10769 0244 002B     	 cmp r3,#0
 10770 0246 F1D1     	 bne .L665
6785:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
 10771              	 .loc 1 6785 0 is_stmt 1
 10772 0248 05E0     	 b .L666
 10773              	.L667:
 10774              	 .loc 1 6785 0 is_stmt 0 discriminator 2
 10775 024a 07F12C03 	 add r3,r7,#44
 10776 024e 1846     	 mov r0,r3
 10777 0250 2021     	 movs r1,#32
 10778 0252 FFF7FEFF 	 bl putc_bfd
 10779              	.L666:
 10780              	 .loc 1 6785 0 discriminator 1
 10781 0256 D7F88C30 	 ldr r3,[r7,#140]
 10782 025a 5A1C     	 adds r2,r3,#1
 10783 025c C7F88C20 	 str r2,[r7,#140]
 10784 0260 D7F88820 	 ldr r2,[r7,#136]
 10785 0264 9342     	 cmp r3,r2
 10786 0266 F0D3     	 bcc .L667
6786:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 10787              	 .loc 1 6786 0 is_stmt 1
 10788 0268 ECE0     	 b .L640
 10789              	.L654:
6787:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6788:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'C':					/* Character */
6789:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, (TCHAR)va_arg(arp, int));
 10790              	 .loc 1 6789 0
 10791 026a BB6F     	 ldr r3,[r7,#120]
 10792 026c 1A1D     	 adds r2,r3,#4
 10793 026e BA67     	 str r2,[r7,#120]
 10794 0270 1B68     	 ldr r3,[r3]
 10795 0272 DBB2     	 uxtb r3,r3
 10796 0274 07F12C02 	 add r2,r7,#44
 10797 0278 1046     	 mov r0,r2
 10798 027a 1946     	 mov r1,r3
 10799 027c FFF7FEFF 	 bl putc_bfd
6790:../Dave/Generated/FATFS/ff_Src/ff.c **** 			continue;
 10800              	 .loc 1 6790 0
 10801 0280 E0E0     	 b .L640
 10802              	.L652:
6791:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6792:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'B':					/* Unsigned binary */
6793:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 2;
 10803              	 .loc 1 6793 0
 10804 0282 0223     	 movs r3,#2
 10805 0284 87F89630 	 strb r3,[r7,#150]
6794:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 10806              	 .loc 1 6794 0
 10807 0288 14E0     	 b .L668
 10808              	.L656:
6795:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6796:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'O':					/* Unsigned octal */
6797:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 8; 
 10809              	 .loc 1 6797 0
 10810 028a 0823     	 movs r3,#8
 10811 028c 87F89630 	 strb r3,[r7,#150]
6798:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 10812              	 .loc 1 6798 0
 10813 0290 10E0     	 b .L668
 10814              	.L655:
6799:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6800:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'D':					/* Signed decimal */
6801:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'U':					/* Unsigned decimal */
6802:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 10;
 10815              	 .loc 1 6802 0
 10816 0292 0A23     	 movs r3,#10
 10817 0294 87F89630 	 strb r3,[r7,#150]
6803:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 10818              	 .loc 1 6803 0
 10819 0298 0CE0     	 b .L668
 10820              	.L658:
6804:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6805:../Dave/Generated/FATFS/ff_Src/ff.c **** 		case 'X':					/* Unsigned hexdecimal */
6806:../Dave/Generated/FATFS/ff_Src/ff.c **** 			r = 16;
 10821              	 .loc 1 6806 0
 10822 029a 1023     	 movs r3,#16
 10823 029c 87F89630 	 strb r3,[r7,#150]
6807:../Dave/Generated/FATFS/ff_Src/ff.c **** 			break;
 10824              	 .loc 1 6807 0
 10825 02a0 08E0     	 b .L668
 10826              	.L651:
6808:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6809:../Dave/Generated/FATFS/ff_Src/ff.c **** 		default:					/* Unknown type (pass-through) */
6810:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, c); continue;
 10827              	 .loc 1 6810 0
 10828 02a2 07F12C02 	 add r2,r7,#44
 10829 02a6 97F88330 	 ldrb r3,[r7,#131]
 10830 02aa 1046     	 mov r0,r2
 10831 02ac 1946     	 mov r1,r3
 10832 02ae FFF7FEFF 	 bl putc_bfd
 10833 02b2 C7E0     	 b .L640
 10834              	.L668:
6811:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6812:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6813:../Dave/Generated/FATFS/ff_Src/ff.c **** 		/* Get an argument and put it in numeral */
6814:../Dave/Generated/FATFS/ff_Src/ff.c **** 		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_
 10835              	 .loc 1 6814 0
 10836 02b4 97F89730 	 ldrb r3,[r7,#151]
 10837 02b8 03F00403 	 and r3,r3,#4
 10838 02bc 002B     	 cmp r3,#0
 10839 02be 04D0     	 beq .L669
 10840              	 .loc 1 6814 0 is_stmt 0 discriminator 1
 10841 02c0 BB6F     	 ldr r3,[r7,#120]
 10842 02c2 1A1D     	 adds r2,r3,#4
 10843 02c4 BA67     	 str r2,[r7,#120]
 10844 02c6 1B68     	 ldr r3,[r3]
 10845 02c8 0CE0     	 b .L670
 10846              	.L669:
 10847              	 .loc 1 6814 0 discriminator 2
 10848 02ca 97F88230 	 ldrb r3,[r7,#130]
 10849 02ce 442B     	 cmp r3,#68
 10850 02d0 04D1     	 bne .L671
 10851              	 .loc 1 6814 0 discriminator 4
 10852 02d2 BB6F     	 ldr r3,[r7,#120]
 10853 02d4 1A1D     	 adds r2,r3,#4
 10854 02d6 BA67     	 str r2,[r7,#120]
 10855 02d8 1B68     	 ldr r3,[r3]
 10856 02da 03E0     	 b .L670
 10857              	.L671:
 10858              	 .loc 1 6814 0 discriminator 5
 10859 02dc BB6F     	 ldr r3,[r7,#120]
 10860 02de 1A1D     	 adds r2,r3,#4
 10861 02e0 BA67     	 str r2,[r7,#120]
 10862 02e2 1B68     	 ldr r3,[r3]
 10863              	.L670:
 10864              	 .loc 1 6814 0 discriminator 8
 10865 02e4 C7F88430 	 str r3,[r7,#132]
6815:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (d == 'D' && (v & 0x80000000)) {
 10866              	 .loc 1 6815 0 is_stmt 1 discriminator 8
 10867 02e8 97F88230 	 ldrb r3,[r7,#130]
 10868 02ec 442B     	 cmp r3,#68
 10869 02ee 0ED1     	 bne .L673
 10870              	 .loc 1 6815 0 is_stmt 0 discriminator 1
 10871 02f0 D7F88430 	 ldr r3,[r7,#132]
 10872 02f4 002B     	 cmp r3,#0
 10873 02f6 0ADA     	 bge .L673
6816:../Dave/Generated/FATFS/ff_Src/ff.c **** 			v = 0 - v;
 10874              	 .loc 1 6816 0 is_stmt 1
 10875 02f8 D7F88430 	 ldr r3,[r7,#132]
 10876 02fc 5B42     	 negs r3,r3
 10877 02fe C7F88430 	 str r3,[r7,#132]
6817:../Dave/Generated/FATFS/ff_Src/ff.c **** 			f |= 8;
 10878              	 .loc 1 6817 0
 10879 0302 97F89730 	 ldrb r3,[r7,#151]
 10880 0306 43F00803 	 orr r3,r3,#8
 10881 030a 87F89730 	 strb r3,[r7,#151]
 10882              	.L673:
6818:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6819:../Dave/Generated/FATFS/ff_Src/ff.c **** 		i = 0;
 10883              	 .loc 1 6819 0
 10884 030e 0023     	 movs r3,#0
 10885 0310 C7F89030 	 str r3,[r7,#144]
 10886              	.L678:
6820:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6821:../Dave/Generated/FATFS/ff_Src/ff.c **** 			d = (TCHAR)(v % r); v /= r;
 10887              	 .loc 1 6821 0
 10888 0314 97F89620 	 ldrb r2,[r7,#150]
 10889 0318 D7F88430 	 ldr r3,[r7,#132]
 10890 031c B3FBF2F1 	 udiv r1,r3,r2
 10891 0320 02FB01F2 	 mul r2,r2,r1
 10892 0324 9B1A     	 subs r3,r3,r2
 10893 0326 87F88230 	 strb r3,[r7,#130]
 10894 032a 97F89630 	 ldrb r3,[r7,#150]
 10895 032e D7F88420 	 ldr r2,[r7,#132]
 10896 0332 B2FBF3F3 	 udiv r3,r2,r3
 10897 0336 C7F88430 	 str r3,[r7,#132]
6822:../Dave/Generated/FATFS/ff_Src/ff.c **** 			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
 10898              	 .loc 1 6822 0
 10899 033a 97F88230 	 ldrb r3,[r7,#130]
 10900 033e 092B     	 cmp r3,#9
 10901 0340 0BD9     	 bls .L674
 10902              	 .loc 1 6822 0 is_stmt 0 discriminator 1
 10903 0342 97F88330 	 ldrb r3,[r7,#131]
 10904 0346 782B     	 cmp r3,#120
 10905 0348 01D1     	 bne .L675
 10906              	 .loc 1 6822 0 discriminator 2
 10907 034a 2722     	 movs r2,#39
 10908 034c 00E0     	 b .L676
 10909              	.L675:
 10910              	 .loc 1 6822 0 discriminator 3
 10911 034e 0722     	 movs r2,#7
 10912              	.L676:
 10913              	 .loc 1 6822 0 discriminator 5
 10914 0350 97F88230 	 ldrb r3,[r7,#130]
 10915 0354 1344     	 add r3,r3,r2
 10916 0356 87F88230 	 strb r3,[r7,#130]
 10917              	.L674:
6823:../Dave/Generated/FATFS/ff_Src/ff.c **** 			str[i++] = d + '0';
 10918              	 .loc 1 6823 0 is_stmt 1
 10919 035a D7F89030 	 ldr r3,[r7,#144]
 10920 035e 5A1C     	 adds r2,r3,#1
 10921 0360 C7F89020 	 str r2,[r7,#144]
 10922 0364 97F88220 	 ldrb r2,[r7,#130]
 10923 0368 3032     	 adds r2,r2,#48
 10924 036a D2B2     	 uxtb r2,r2
 10925 036c 07F19801 	 add r1,r7,#152
 10926 0370 0B44     	 add r3,r3,r1
 10927 0372 03F88C2C 	 strb r2,[r3,#-140]
6824:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (v && i < sizeof str / sizeof *str);
 10928              	 .loc 1 6824 0
 10929 0376 D7F88430 	 ldr r3,[r7,#132]
 10930 037a 002B     	 cmp r3,#0
 10931 037c 03D0     	 beq .L677
 10932              	 .loc 1 6824 0 is_stmt 0 discriminator 1
 10933 037e D7F89030 	 ldr r3,[r7,#144]
 10934 0382 1F2B     	 cmp r3,#31
 10935 0384 C6D9     	 bls .L678
 10936              	.L677:
6825:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (f & 8) str[i++] = '-';
 10937              	 .loc 1 6825 0 is_stmt 1
 10938 0386 97F89730 	 ldrb r3,[r7,#151]
 10939 038a 03F00803 	 and r3,r3,#8
 10940 038e 002B     	 cmp r3,#0
 10941 0390 0AD0     	 beq .L679
 10942              	 .loc 1 6825 0 is_stmt 0 discriminator 1
 10943 0392 D7F89030 	 ldr r3,[r7,#144]
 10944 0396 5A1C     	 adds r2,r3,#1
 10945 0398 C7F89020 	 str r2,[r7,#144]
 10946 039c 07F19802 	 add r2,r7,#152
 10947 03a0 1344     	 add r3,r3,r2
 10948 03a2 2D22     	 movs r2,#45
 10949 03a4 03F88C2C 	 strb r2,[r3,#-140]
 10950              	.L679:
6826:../Dave/Generated/FATFS/ff_Src/ff.c **** 		j = i; d = (f & 1) ? '0' : ' ';
 10951              	 .loc 1 6826 0 is_stmt 1
 10952 03a8 D7F89030 	 ldr r3,[r7,#144]
 10953 03ac C7F88C30 	 str r3,[r7,#140]
 10954 03b0 97F89730 	 ldrb r3,[r7,#151]
 10955 03b4 03F00103 	 and r3,r3,#1
 10956 03b8 002B     	 cmp r3,#0
 10957 03ba 01D0     	 beq .L680
 10958              	 .loc 1 6826 0 is_stmt 0 discriminator 1
 10959 03bc 3023     	 movs r3,#48
 10960 03be 00E0     	 b .L681
 10961              	.L680:
 10962              	 .loc 1 6826 0 discriminator 2
 10963 03c0 2023     	 movs r3,#32
 10964              	.L681:
 10965              	 .loc 1 6826 0 discriminator 4
 10966 03c2 87F88230 	 strb r3,[r7,#130]
6827:../Dave/Generated/FATFS/ff_Src/ff.c **** 		if (!(f & 2)) {
 10967              	 .loc 1 6827 0 is_stmt 1 discriminator 4
 10968 03c6 97F89730 	 ldrb r3,[r7,#151]
 10969 03ca 03F00203 	 and r3,r3,#2
 10970 03ce 002B     	 cmp r3,#0
 10971 03d0 11D1     	 bne .L682
6828:../Dave/Generated/FATFS/ff_Src/ff.c **** 			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
 10972              	 .loc 1 6828 0
 10973 03d2 07E0     	 b .L683
 10974              	.L684:
 10975              	 .loc 1 6828 0 is_stmt 0 discriminator 2
 10976 03d4 07F12C02 	 add r2,r7,#44
 10977 03d8 97F88230 	 ldrb r3,[r7,#130]
 10978 03dc 1046     	 mov r0,r2
 10979 03de 1946     	 mov r1,r3
 10980 03e0 FFF7FEFF 	 bl putc_bfd
 10981              	.L683:
 10982              	 .loc 1 6828 0 discriminator 1
 10983 03e4 D7F88C30 	 ldr r3,[r7,#140]
 10984 03e8 5A1C     	 adds r2,r3,#1
 10985 03ea C7F88C20 	 str r2,[r7,#140]
 10986 03ee D7F88820 	 ldr r2,[r7,#136]
 10987 03f2 9342     	 cmp r3,r2
 10988 03f4 EED3     	 bcc .L684
 10989              	.L682:
6829:../Dave/Generated/FATFS/ff_Src/ff.c **** 		}
6830:../Dave/Generated/FATFS/ff_Src/ff.c **** 		do {
6831:../Dave/Generated/FATFS/ff_Src/ff.c **** 			putc_bfd(&pb, str[--i]);			/* Number body */
 10990              	 .loc 1 6831 0 is_stmt 1 discriminator 1
 10991 03f6 D7F89030 	 ldr r3,[r7,#144]
 10992 03fa 013B     	 subs r3,r3,#1
 10993 03fc C7F89030 	 str r3,[r7,#144]
 10994 0400 07F10C02 	 add r2,r7,#12
 10995 0404 D7F89030 	 ldr r3,[r7,#144]
 10996 0408 1344     	 add r3,r3,r2
 10997 040a 1B78     	 ldrb r3,[r3]
 10998 040c 07F12C02 	 add r2,r7,#44
 10999 0410 1046     	 mov r0,r2
 11000 0412 1946     	 mov r1,r3
 11001 0414 FFF7FEFF 	 bl putc_bfd
6832:../Dave/Generated/FATFS/ff_Src/ff.c **** 		} while (i);
 11002              	 .loc 1 6832 0 discriminator 1
 11003 0418 D7F89030 	 ldr r3,[r7,#144]
 11004 041c 002B     	 cmp r3,#0
 11005 041e EAD1     	 bne .L682
6833:../Dave/Generated/FATFS/ff_Src/ff.c **** 		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
 11006              	 .loc 1 6833 0
 11007 0420 07E0     	 b .L685
 11008              	.L686:
 11009              	 .loc 1 6833 0 is_stmt 0 discriminator 2
 11010 0422 07F12C02 	 add r2,r7,#44
 11011 0426 97F88230 	 ldrb r3,[r7,#130]
 11012 042a 1046     	 mov r0,r2
 11013 042c 1946     	 mov r1,r3
 11014 042e FFF7FEFF 	 bl putc_bfd
 11015              	.L685:
 11016              	 .loc 1 6833 0 discriminator 1
 11017 0432 D7F88C30 	 ldr r3,[r7,#140]
 11018 0436 5A1C     	 adds r2,r3,#1
 11019 0438 C7F88C20 	 str r2,[r7,#140]
 11020 043c D7F88820 	 ldr r2,[r7,#136]
 11021 0440 9342     	 cmp r3,r2
 11022 0442 EED3     	 bcc .L686
 11023              	.L640:
6834:../Dave/Generated/FATFS/ff_Src/ff.c **** 	}
 11024              	 .loc 1 6834 0 is_stmt 1
 11025 0444 EAE5     	 b .L687
 11026              	.L638:
6835:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6836:../Dave/Generated/FATFS/ff_Src/ff.c **** 	va_end(arp);
6837:../Dave/Generated/FATFS/ff_Src/ff.c **** 
6838:../Dave/Generated/FATFS/ff_Src/ff.c **** 	return putc_flush(&pb);
 11027              	 .loc 1 6838 0
 11028 0446 07F12C03 	 add r3,r7,#44
 11029 044a 1846     	 mov r0,r3
 11030 044c FFF7FEFF 	 bl putc_flush
 11031 0450 0346     	 mov r3,r0
6839:../Dave/Generated/FATFS/ff_Src/ff.c **** }
 11032              	 .loc 1 6839 0
 11033 0452 1846     	 mov r0,r3
 11034 0454 9C37     	 adds r7,r7,#156
 11035              	.LCFI351:
 11036              	 .cfi_def_cfa_offset 20
 11037 0456 BD46     	 mov sp,r7
 11038              	.LCFI352:
 11039              	 .cfi_def_cfa_register 13
 11040              	 
 11041 0458 BDE88040 	 pop {r7,lr}
 11042              	.LCFI353:
 11043              	 .cfi_restore 14
 11044              	 .cfi_restore 7
 11045              	 .cfi_def_cfa_offset 12
 11046 045c 03B0     	 add sp,sp,#12
 11047              	.LCFI354:
 11048              	 .cfi_restore 3
 11049              	 .cfi_restore 2
 11050              	 .cfi_restore 1
 11051              	 .cfi_def_cfa_offset 0
 11052 045e 7047     	 bx lr
 11053              	 .cfi_endproc
 11054              	.LFE66:
 11056              	 .text
 11057              	.Letext0:
 11058              	 .file 2 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 11059              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 11060              	 .file 4 "../Dave/Generated/FATFS/ff_Src/ff.h"
 11061              	 .file 5 "../Dave/Generated/FATFS/ff_Src/diskio.h"
 11062              	 .file 6 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\lib\\gcc\\arm-none-eabi\\4.9.3\\include\\stdarg.h"
 11063              	 .file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 ff.c
    {standard input}:20     .bss.FatFs:00000000 $d
    {standard input}:23     .bss.FatFs:00000000 FatFs
    {standard input}:26     .bss.Fsid:00000000 $d
    {standard input}:29     .bss.Fsid:00000000 Fsid
    {standard input}:34     .bss.CurrVol:00000000 CurrVol
    {standard input}:35     .bss.CurrVol:00000000 $d
    {standard input}:37     .bss.Files:00000000 $d
    {standard input}:40     .bss.Files:00000000 Files
    {standard input}:43     .rodata.ExCvt:00000000 $d
    {standard input}:46     .rodata.ExCvt:00000000 ExCvt
    {standard input}:176    .text.ld_word:00000000 $t
    {standard input}:180    .text.ld_word:00000000 ld_word
    {standard input}:234    .text.ld_dword:00000000 $t
    {standard input}:238    .text.ld_dword:00000000 ld_dword
    {standard input}:304    .text.st_word:00000000 $t
    {standard input}:308    .text.st_word:00000000 st_word
    {standard input}:362    .text.st_dword:00000000 $t
    {standard input}:366    .text.st_dword:00000000 st_dword
    {standard input}:439    .text.mem_cpy:00000000 $t
    {standard input}:443    .text.mem_cpy:00000000 mem_cpy
    {standard input}:508    .text.mem_set:00000000 $t
    {standard input}:512    .text.mem_set:00000000 mem_set
    {standard input}:567    .text.mem_cmp:00000000 $t
    {standard input}:571    .text.mem_cmp:00000000 mem_cmp
    {standard input}:644    .text.chk_chr:00000000 $t
    {standard input}:648    .text.chk_chr:00000000 chk_chr
    {standard input}:709    .text.dbc_1st:00000000 $t
    {standard input}:713    .text.dbc_1st:00000000 dbc_1st
    {standard input}:761    .text.dbc_2nd:00000000 $t
    {standard input}:765    .text.dbc_2nd:00000000 dbc_2nd
    {standard input}:813    .text.chk_lock:00000000 $t
    {standard input}:817    .text.chk_lock:00000000 chk_lock
    {standard input}:960    .text.chk_lock:000000b0 $d
    {standard input}:965    .text.enq_lock:00000000 $t
    {standard input}:969    .text.enq_lock:00000000 enq_lock
    {standard input}:1033   .text.enq_lock:00000040 $d
    {standard input}:1038   .text.inc_lock:00000000 $t
    {standard input}:1042   .text.inc_lock:00000000 inc_lock
    {standard input}:1240   .text.inc_lock:00000110 $d
    {standard input}:1245   .text.dec_lock:00000000 $t
    {standard input}:1249   .text.dec_lock:00000000 dec_lock
    {standard input}:1347   .text.dec_lock:00000074 $d
    {standard input}:1352   .text.clear_lock:00000000 $t
    {standard input}:1356   .text.clear_lock:00000000 clear_lock
    {standard input}:1421   .text.clear_lock:00000040 $d
    {standard input}:1426   .text.sync_window:00000000 $t
    {standard input}:1430   .text.sync_window:00000000 sync_window
    {standard input}:1525   .text.move_window:00000000 $t
    {standard input}:1529   .text.move_window:00000000 move_window
    {standard input}:1607   .text.sync_fs:00000000 $t
    {standard input}:1611   .text.sync_fs:00000000 sync_fs
    {standard input}:1741   .text.sync_fs:000000d4 $d
    {standard input}:1747   .text.clst2sect:00000000 $t
    {standard input}:1751   .text.clst2sect:00000000 clst2sect
    {standard input}:1813   .text.get_fat:00000000 $t
    {standard input}:1817   .text.get_fat:00000000 get_fat
    {standard input}:2022   .text.put_fat:00000000 $t
    {standard input}:2026   .text.put_fat:00000000 put_fat
    {standard input}:2301   .text.remove_chain:00000000 $t
    {standard input}:2305   .text.remove_chain:00000000 remove_chain
    {standard input}:2457   .text.create_chain:00000000 $t
    {standard input}:2461   .text.create_chain:00000000 create_chain
    {standard input}:2770   .text.dir_clear:00000000 $t
    {standard input}:2774   .text.dir_clear:00000000 dir_clear
    {standard input}:2883   .text.dir_sdi:00000000 $t
    {standard input}:2887   .text.dir_sdi:00000000 dir_sdi
    {standard input}:3071   .text.dir_next:00000000 $t
    {standard input}:3075   .text.dir_next:00000000 dir_next
    {standard input}:3286   .text.dir_alloc:00000000 $t
    {standard input}:3290   .text.dir_alloc:00000000 dir_alloc
    {standard input}:3405   .text.ld_clust:00000000 $t
    {standard input}:3409   .text.ld_clust:00000000 ld_clust
    {standard input}:3467   .text.st_clust:00000000 $t
    {standard input}:3471   .text.st_clust:00000000 st_clust
    {standard input}:3527   .text.dir_read:00000000 $t
    {standard input}:3531   .text.dir_read:00000000 dir_read
    {standard input}:3668   .text.dir_find:00000000 $t
    {standard input}:3672   .text.dir_find:00000000 dir_find
    {standard input}:3796   .text.dir_register:00000000 $t
    {standard input}:3800   .text.dir_register:00000000 dir_register
    {standard input}:3881   .text.dir_remove:00000000 $t
    {standard input}:3885   .text.dir_remove:00000000 dir_remove
    {standard input}:3945   .text.get_fileinfo:00000000 $t
    {standard input}:3949   .text.get_fileinfo:00000000 get_fileinfo
    {standard input}:4093   .rodata:00000000 $d
    {standard input}:4097   .text.create_name:00000000 $t
    {standard input}:4101   .text.create_name:00000000 create_name
    {standard input}:4449   .text.create_name:00000214 $d
    {standard input}:4455   .text.follow_path:00000000 $t
    {standard input}:4459   .text.follow_path:00000000 follow_path
    {standard input}:4657   .text.get_ldnumber:00000000 $t
    {standard input}:4661   .text.get_ldnumber:00000000 get_ldnumber
    {standard input}:4779   .text.get_ldnumber:0000008c $d
    {standard input}:4788   .text.check_fs:00000000 $t
    {standard input}:4792   .text.check_fs:00000000 check_fs
    {standard input}:4965   .text.check_fs:0000010c $d
    {standard input}:4970   .text.find_volume:00000000 $t
    {standard input}:4974   .text.find_volume:00000000 find_volume
    {standard input}:5118   .text.mount_volume:00000000 $t
    {standard input}:5122   .text.mount_volume:00000000 mount_volume
    {standard input}:5561   .text.mount_volume:000002b8 $d
    {standard input}:5565   .text.mount_volume:000002c0 $t
    {standard input}:5721   .text.mount_volume:000003cc $d
    {standard input}:5728   .text.validate:00000000 $t
    {standard input}:5732   .text.validate:00000000 validate
    {standard input}:5822   .text.f_mount:00000000 $t
    {standard input}:5827   .text.f_mount:00000000 f_mount
    {standard input}:5928   .text.f_mount:00000084 $d
    {standard input}:5933   .text.f_open:00000000 $t
    {standard input}:5938   .text.f_open:00000000 f_open
    {standard input}:6447   .text.f_read:00000000 $t
    {standard input}:6452   .text.f_read:00000000 f_read
    {standard input}:6841   .text.f_write:00000000 $t
    {standard input}:6846   .text.f_write:00000000 f_write
    {standard input}:7292   .text.f_sync:00000000 $t
    {standard input}:7297   .text.f_sync:00000000 f_sync
    {standard input}:7460   .text.f_close:00000000 $t
    {standard input}:7465   .text.f_close:00000000 f_close
    {standard input}:7536   .text.f_chdrive:00000000 $t
    {standard input}:7541   .text.f_chdrive:00000000 f_chdrive
    {standard input}:7593   .text.f_chdrive:00000030 $d
    {standard input}:7598   .text.f_chdir:00000000 $t
    {standard input}:7603   .text.f_chdir:00000000 f_chdir
    {standard input}:7706   .text.f_getcwd:00000000 $t
    {standard input}:7711   .text.f_getcwd:00000000 f_getcwd
    {standard input}:7996   .text.f_lseek:00000000 $t
    {standard input}:8001   .text.f_lseek:00000000 f_lseek
    {standard input}:8396   .text.f_opendir:00000000 $t
    {standard input}:8401   .text.f_opendir:00000000 f_opendir
    {standard input}:8565   .text.f_closedir:00000000 $t
    {standard input}:8570   .text.f_closedir:00000000 f_closedir
    {standard input}:8638   .text.f_readdir:00000000 $t
    {standard input}:8643   .text.f_readdir:00000000 f_readdir
    {standard input}:8738   .text.f_stat:00000000 $t
    {standard input}:8743   .text.f_stat:00000000 f_stat
    {standard input}:8824   .text.f_getfree:00000000 $t
    {standard input}:8829   .text.f_getfree:00000000 f_getfree
    {standard input}:9066   .text.f_truncate:00000000 $t
    {standard input}:9071   .text.f_truncate:00000000 f_truncate
    {standard input}:9278   .text.f_unlink:00000000 $t
    {standard input}:9283   .text.f_unlink:00000000 f_unlink
    {standard input}:9498   .text.f_mkdir:00000000 $t
    {standard input}:9503   .text.f_mkdir:00000000 f_mkdir
    {standard input}:9748   .text.f_rename:00000000 $t
    {standard input}:9753   .text.f_rename:00000000 f_rename
    {standard input}:10030  .text.f_gets:00000000 $t
    {standard input}:10035  .text.f_gets:00000000 f_gets
    {standard input}:10142  .text.putc_bfd:00000000 $t
    {standard input}:10146  .text.putc_bfd:00000000 putc_bfd
    {standard input}:10245  .text.putc_flush:00000000 $t
    {standard input}:10249  .text.putc_flush:00000000 putc_flush
    {standard input}:10318  .text.putc_init:00000000 $t
    {standard input}:10322  .text.putc_init:00000000 putc_init
    {standard input}:10363  .text.f_putc:00000000 $t
    {standard input}:10368  .text.f_putc:00000000 f_putc
    {standard input}:10418  .text.f_puts:00000000 $t
    {standard input}:10423  .text.f_puts:00000000 f_puts
    {standard input}:10484  .text.f_printf:00000000 $t
    {standard input}:10489  .text.f_printf:00000000 f_printf
    {standard input}:10683  .text.f_printf:00000178 $d
    {standard input}:10706  .text.f_printf:000001d4 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
disk_write
disk_read
disk_ioctl
disk_status
disk_initialize
get_fattime
