   1              	 .syntax unified
   2              	 .cpu cortex-m4
   3              	 .eabi_attribute 27,3
   4              	 .fpu fpv4-sp-d16
   5              	 .eabi_attribute 20,1
   6              	 .eabi_attribute 21,1
   7              	 .eabi_attribute 23,3
   8              	 .eabi_attribute 24,1
   9              	 .eabi_attribute 25,1
  10              	 .eabi_attribute 26,1
  11              	 .eabi_attribute 30,6
  12              	 .eabi_attribute 34,1
  13              	 .eabi_attribute 18,4
  14              	 .thumb
  15              	 .file "sdmmc_block.c"
  16              	 .text
  17              	.Ltext0:
  18              	 .cfi_sections .debug_frame
  19              	 .section .text.SDMMC_BLOCK_SPI_GetState,"ax",%progbits
  20              	 .align 2
  21              	 .thumb
  22              	 .thumb_func
  24              	SDMMC_BLOCK_SPI_GetState:
  25              	.LFB324:
  26              	 .file 1 "../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h"
   1:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**
   2:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * @file sdmmc_block_private_spi.h
   3:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * @date 2016-08-24
   4:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
   5:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * NOTE:
   6:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   7:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
   8:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * @cond
   9:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  **************************************************************************************************
  10:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * SDMMC_BLOCK v4.0.30 - Configures the SPI channel to instance to interface the SDMMC card.
  11:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  12:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * Copyright (c) 2016-2020, Infineon Technologies AG
  13:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * All rights reserved.
  14:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  15:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  16:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * following conditions are met:
  17:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  18:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  19:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   disclaimer.
  20:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  21:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  22:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  23:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  24:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  25:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *   products derived from this software without specific prior written permission.
  26:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  27:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  28:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  29:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  30:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  31:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  32:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  33:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  34:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  35:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  36:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * with Infineon Technologies AG (dave@infineon.com).
  37:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  **************************************************************************************************
  38:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  39:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * Change History
  40:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * --------------
  41:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  42:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * 2016-01-20:
  43:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - Initial version. <br>
  44:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  45:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * 2016-02-08:
  46:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - Help Doc updated. <br>
  47:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - Bug fixes done.<br>
  48:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  49:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * 2016-04-05:
  50:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - Return status updates are done. <br>
  51:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - MISRA fixes.<br>
  52:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *     - Bug fixes done for PR.<br>
  53:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  54:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  * @endcond
  55:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  *
  56:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****  */
  57:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  58:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #ifndef SDMMC_BLOCK_SPI_H
  59:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_H
  60:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  61:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**************************************************************************************************
  62:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   * HEADER FILES
  63:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** ***************************************************************************************************
  64:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  65:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #include "sdmmc_block.h"
  66:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  67:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**************************************************************************************************
  68:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   * MACROS
  69:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** ***************************************************************************************************
  70:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  71:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #ifdef SDMMC_BLOCK_SPI
  72:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  73:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Commands   */
  74:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Definitions for MMC/SDC command */
  75:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD0       (0x40U+0U)  /* GO_IDLE_STATE */
  76:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD1       (0x40U+1U)  /* SEND_OP_COND (MMC) */
  77:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  78:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD8       (0x40U+8U)  /* SEND_IF_COND */
  79:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD9       (0x40U+9U)  /* SEND_CSD */
  80:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD10      (0x40U+10U)  /* SEND_CID */
  81:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD12      (0x40U+12U)  /* STOP_TRANSMISSION */
  82:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD13      (0x40U+13U)  /* SD_STATUS (SDC) */
  83:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  84:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD16      (0x40U+16U)  /* SET_BLOCKLEN */
  85:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD17      (0x40U+17U)  /* READ_SINGLE_BLOCK */
  86:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD18      (0x40U+18U)  /* READ_MULTIPLE_BLOCK */
  87:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD23      (0x40U+23U)  /* SET_BLOCK_COUNT (MMC) */
  88:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  89:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD24      (0x40U+24U)  /* WRITE_BLOCK */
  90:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD25      (0x40U+25U)  /* WRITE_MULTIPLE_BLOCK */
  91:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD27      (0x40U+27U)  /* PROGRAM_CSD */
  92:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD32      (0x40U+32U)  /* ERASE_BLOCK_START_ADDR*/
  93:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD33      (0x40U+33U)  /* ERASE_BLOCK_END_ADDR*/
  94:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD38      (0x40U+38U)  /* ERASE_SELECTED_BLOCKS*/
  95:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD42      (0x40U+42U)  /* LOCK_UNLOCK*/
  96:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
  97:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD55      (0x40U+55U)  /* APP_CMD */
  98:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD58      (0x40U+58U)  /* READ_OCR */
  99:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD59      (0x40U+59U)  /* CRC*/
 100:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 101:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_ACMD13     (0xC0U+13U)  /* SD_STATUS (SDC) */
 102:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_ACMD22     (0xC0U+22U)  /* SEND_NUM_WR_BLOCKS */
 103:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 104:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_ACMD23     (0xC0U+23U)  /* SET_WR_BLK_ERASE_COUNT (SDC) */
 105:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_ACMD41     (0x40U+41U)  /* SEND_OP_COND (SDC) */
 106:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_ACMD51     (0x40U+51U)  /* SEND_SCR */
 107:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* End of Commands */
 108:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 109:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Read write related tokens */
 110:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_START_BLOCK_TOKEN         (0xFEU)  /**< Start single block token */
 111:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_START_MULTI_BLOCK_TOKEN   (0xFCU)  /**< Start multiple blocks token */
 112:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_STOP_TRANSMISSION         (0xFDU)  /**< Start multiple blocks token */
 113:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 114:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Command TimeOut definitions */
 115:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CMD_TIMOUT                (8000U)  /* Command Time Out */
 116:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_BUSY_TIMOUT               (50000U) /* Command Time Out */
 117:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CSD_CID_LENGTH            (16U)    /* 16 bytes */
 118:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_OCR_LENGTH                (4U)     /* 4 bytes */
 119:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 120:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Data Response definitions */
 121:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_DR_MSK                    (0x1FU)  /* Data response mask */
 122:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_DR_ACCEPT                 (0x05U)  /* Daata accpted */
 123:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_DR_CRC_ERROR              (0x0BU)  /* Daata accpted */
 124:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_DR_WRITE_ERROR            (0x0DU)  /* Daata accpted */
 125:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 126:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /* Other Definitions */
 127:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_BYTES_PER_SECTOR          (0x200U) /* Bytes Per Sector */
 128:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CRC_BYTES                 (0x2U)   /* No of CRC bytes */
 129:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_DELAY_CLOCK_COUNT         (0x1U)   /* Delay of 8-clock cycles */
 130:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 131:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_OCR_CCS_BIT_MSK           (0x40U)
 132:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CSR_CARD_LOCK_STATUS_MSK  (0x01U)
 133:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #define SDMMC_BLOCK_SPI_CSR_CARD_LOCK_ERROR_MSK   (0x02U)
 134:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 135:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**************************************************************************************************
 136:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   * ENUMS
 137:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** ***************************************************************************************************
 138:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 139:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**************************************************************************************************
 140:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   * DATA STRUCTURES
 141:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** ***************************************************************************************************
 142:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 143:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** /**************************************************************************************************
 144:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   * API Prototypes
 145:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** ***************************************************************************************************
 146:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #ifdef __cplusplus
 147:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** extern "C" {
 148:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** #endif
 149:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 150:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_Init(SDMMC_BLOCK_t *const obj);
 151:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 152:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_CardIdentificationProcess(SDMMC_BLOCK_t *const obj);
 153:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 154:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_ReadBlock(SDMMC_BLOCK_t *const obj,
 155:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                uint8_t *read_buf,
 156:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                const uint32_t sector_number,
 157:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                const uint32_t sector_count);
 158:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 159:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_SPI_WriteBlock(SDMMC_BLOCK_t *const obj,
 160:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                 uint8_t *write_buf,
 161:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                 const uint32_t sector_number,
 162:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                 const uint32_t sector_count);
 163:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 164:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorCount(SDMMC_BLOCK_t *const obj, uint32_t *sector
 165:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 166:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetBlockSize(SDMMC_BLOCK_t *const obj, uint32_t *block_si
 167:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 168:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCsd(SDMMC_BLOCK_t *const obj, void *buffer);
 169:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 170:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCid(SDMMC_BLOCK_t *const obj, void *buffer);
 171:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 172:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetOcr(const SDMMC_BLOCK_t *const obj, void *buffer);
 173:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 174:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSdStatus(const SDMMC_BLOCK_t *const obj, uint8_t *buff
 175:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 176:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetLockStatus(SDMMC_BLOCK_t *const obj,
 177:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                         SDMMC_BLOCK_CARD_LOCK_STATUS_t * lock_statu
 178:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 179:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EjectCard(SDMMC_BLOCK_t *const obj);
 180:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 181:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_EraseBlock(SDMMC_BLOCK_t *const obj,
 182:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                      const uint32_t start_address,
 183:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                      const uint32_t end_address);
 184:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 185:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_LockUnlockCard(SDMMC_BLOCK_t *const obj,
 186:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                          SDMMC_BLOCK_LOCK_STRUCTURE_t *lock,
 187:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                          const SDMMC_BLOCK_CARD_LOCK_STATUS_t expec
 188:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 189:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** __STATIC_INLINE uint8_t SDMMC_BLOCK_SPI_GetState(const SDMMC_BLOCK_t *const obj)
 190:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** {
  27              	 .loc 1 190 0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32 0000 80B4     	 push {r7}
  33              	.LCFI0:
  34              	 .cfi_def_cfa_offset 4
  35              	 .cfi_offset 7,-4
  36 0002 83B0     	 sub sp,sp,#12
  37              	.LCFI1:
  38              	 .cfi_def_cfa_offset 16
  39 0004 00AF     	 add r7,sp,#0
  40              	.LCFI2:
  41              	 .cfi_def_cfa_register 7
  42 0006 7860     	 str r0,[r7,#4]
 191:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   /* This is for FATFS only. In FATFS only 4 status values are stated. So extra status are neglecte
 192:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   return (obj->card_state & 0xFU);
  43              	 .loc 1 192 0
  44 0008 7B68     	 ldr r3,[r7,#4]
  45 000a 1B7A     	 ldrb r3,[r3,#8]
  46 000c 03F00F03 	 and r3,r3,#15
  47 0010 DBB2     	 uxtb r3,r3
 193:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** }
  48              	 .loc 1 193 0
  49 0012 1846     	 mov r0,r3
  50 0014 0C37     	 adds r7,r7,#12
  51              	.LCFI3:
  52              	 .cfi_def_cfa_offset 4
  53 0016 BD46     	 mov sp,r7
  54              	.LCFI4:
  55              	 .cfi_def_cfa_register 13
  56              	 
  57 0018 5DF8047B 	 ldr r7,[sp],#4
  58              	.LCFI5:
  59              	 .cfi_restore 7
  60              	 .cfi_def_cfa_offset 0
  61 001c 7047     	 bx lr
  62              	 .cfi_endproc
  63              	.LFE324:
  65 001e 00BF     	 .section .text.SDMMC_BLOCK_SPI_GetSectorSize,"ax",%progbits
  66              	 .align 2
  67              	 .thumb
  68              	 .thumb_func
  70              	SDMMC_BLOCK_SPI_GetSectorSize:
  71              	.LFB325:
 194:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 195:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** __STATIC_INLINE SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetSectorSize(const SDMMC_BLOCK_t *const 
 196:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****                                                                         void *sector_size)
 197:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** {
  72              	 .loc 1 197 0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
  77 0000 80B4     	 push {r7}
  78              	.LCFI6:
  79              	 .cfi_def_cfa_offset 4
  80              	 .cfi_offset 7,-4
  81 0002 83B0     	 sub sp,sp,#12
  82              	.LCFI7:
  83              	 .cfi_def_cfa_offset 16
  84 0004 00AF     	 add r7,sp,#0
  85              	.LCFI8:
  86              	 .cfi_def_cfa_register 7
  87 0006 7860     	 str r0,[r7,#4]
  88 0008 3960     	 str r1,[r7]
 198:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   *(uint16_t *)sector_size = (uint16_t)512;
  89              	 .loc 1 198 0
  90 000a 3B68     	 ldr r3,[r7]
  91 000c 4FF40072 	 mov r2,#512
  92 0010 1A80     	 strh r2,[r3]
 199:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 200:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
  93              	 .loc 1 200 0
  94 0012 0023     	 movs r3,#0
 201:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** }
  95              	 .loc 1 201 0
  96 0014 1846     	 mov r0,r3
  97 0016 0C37     	 adds r7,r7,#12
  98              	.LCFI9:
  99              	 .cfi_def_cfa_offset 4
 100 0018 BD46     	 mov sp,r7
 101              	.LCFI10:
 102              	 .cfi_def_cfa_register 13
 103              	 
 104 001a 5DF8047B 	 ldr r7,[sp],#4
 105              	.LCFI11:
 106              	 .cfi_restore 7
 107              	 .cfi_def_cfa_offset 0
 108 001e 7047     	 bx lr
 109              	 .cfi_endproc
 110              	.LFE325:
 112              	 .section .text.SDMMC_BLOCK_SPI_GetCardType,"ax",%progbits
 113              	 .align 2
 114              	 .thumb
 115              	 .thumb_func
 117              	SDMMC_BLOCK_SPI_GetCardType:
 118              	.LFB326:
 202:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 203:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** __STATIC_INLINE SDMMC_BLOCK_MODE_STATUS_t SDMMC_BLOCK_SPI_GetCardType(const SDMMC_BLOCK_t *const ob
 204:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** {
 119              	 .loc 1 204 0
 120              	 .cfi_startproc
 121              	 
 122              	 
 123              	 
 124 0000 80B4     	 push {r7}
 125              	.LCFI12:
 126              	 .cfi_def_cfa_offset 4
 127              	 .cfi_offset 7,-4
 128 0002 83B0     	 sub sp,sp,#12
 129              	.LCFI13:
 130              	 .cfi_def_cfa_offset 16
 131 0004 00AF     	 add r7,sp,#0
 132              	.LCFI14:
 133              	 .cfi_def_cfa_register 7
 134 0006 7860     	 str r0,[r7,#4]
 135 0008 3960     	 str r1,[r7]
 205:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   *(uint32_t *)card_type = obj->card_type;
 136              	 .loc 1 205 0
 137 000a 7B68     	 ldr r3,[r7,#4]
 138 000c 5B7A     	 ldrb r3,[r3,#9]
 139 000e 1A46     	 mov r2,r3
 140 0010 3B68     	 ldr r3,[r7]
 141 0012 1A60     	 str r2,[r3]
 206:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** 
 207:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h ****   return SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 142              	 .loc 1 207 0
 143 0014 0023     	 movs r3,#0
 208:../Dave/Generated/SDMMC_BLOCK/sdmmc_block_private_spi.h **** }
 144              	 .loc 1 208 0
 145 0016 1846     	 mov r0,r3
 146 0018 0C37     	 adds r7,r7,#12
 147              	.LCFI15:
 148              	 .cfi_def_cfa_offset 4
 149 001a BD46     	 mov sp,r7
 150              	.LCFI16:
 151              	 .cfi_def_cfa_register 13
 152              	 
 153 001c 5DF8047B 	 ldr r7,[sp],#4
 154              	.LCFI17:
 155              	 .cfi_restore 7
 156              	 .cfi_def_cfa_offset 0
 157 0020 7047     	 bx lr
 158              	 .cfi_endproc
 159              	.LFE326:
 161 0022 00BF     	 .section .text.SDMMC_BLOCK_GetAppVersion,"ax",%progbits
 162              	 .align 2
 163              	 .global SDMMC_BLOCK_GetAppVersion
 164              	 .thumb
 165              	 .thumb_func
 167              	SDMMC_BLOCK_GetAppVersion:
 168              	.LFB327:
 169              	 .file 2 "../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c"
   1:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
   2:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**
   3:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @file sdmmc_block.c
   4:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @date 2016-08-24
   5:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
   6:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * NOTE:
   7:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * This file is generated by DAVE. Any manual modification done to this file will be lost when the 
   8:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
   9:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @cond
  10:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  11:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SDMMC_BLOCK v4.0.32 - The SDMMC_BLOCK APP is a generic SD/MMC card block device driver designed 
  12:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *                      with all relevant functionalities like writing or reading blocks of data fr
  13:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  14:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Copyright (c) 2016-2020, Infineon Technologies AG
  15:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * All rights reserved.
  16:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  17:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Redistribution and use in source and binary forms, with or without modification,are permitted pr
  18:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * following conditions are met:
  19:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  20:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Redistributions of source code must retain the above copyright notice, this list of conditions
  21:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   disclaimer.
  22:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  23:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Redistributions in binary form must reproduce the above copyright notice, this list of conditi
  24:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   following disclaimer in the documentation and/or other materials provided with the distributio
  25:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  26:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   Neither the name of the copyright holders nor the names of its contributors may be used to end
  27:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *   products derived from this software without specific prior written permission.
  28:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  29:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR I
  30:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTI
  31:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, IN
  32:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBS
  33:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THE
  34:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
  35:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  36:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  37:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * To improve the quality of the software, users are encouraged to share modifications, enhancement
  38:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * with Infineon Technologies AG (dave@infineon.com).
  39:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  40:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  41:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Change History
  42:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * --------------
  43:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  44:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-01-20:
  45:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Initial version. <br>
  46:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  47:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-02-05:
  48:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - RTOS support added. <br>
  49:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Bug fixes done.<br>
  50:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  51:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-02-08:
  52:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Help Doc updated. <br>
  53:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Bug fixes done.<br>
  54:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  55:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * 2016-04-05:
  56:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - Remove dead code <br>
  57:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *     - MISRA fixes <br>
  58:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  *
  59:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * @endcond
  60:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  */
  61:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  62:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  63:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * HEADER FILES
  64:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  65:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  66:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #include "sdmmc_block.h"
  67:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  68:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
  69:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # if SDMMC_BLOCK_RTOS_MODE_SELECT
  70:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_sd_rtos.h"
  71:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #else
  72:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_sd.h"
  73:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # endif /* SDMMC_BLOCK_RTOS_MODE_SELECT */
  74:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD */
  75:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  76:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
  77:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # if SDMMC_BLOCK_RTOS_MODE_SELECT
  78:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_spi_rtos.h"
  79:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #else
  80:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #  include "sdmmc_block_private_spi.h"
  81:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** # endif /* SDMMC_BLOCK_RTOS_MODE_SELECT */
  82:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SPI */
  83:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  84:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  85:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * MACROS
  86:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  87:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  88:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_LOCK                 (0x4U) /* Lock the card */
  89:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_UNLOCK               (0x0U) /* Unlock the card */
  90:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_SET_PASSWD           (0x1U) /* Set the password for the card */
  91:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_CLR_PASSWD           (0x2U) /* Clears the password */
  92:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_SET_PASSWD_AND_LOCK  (0x5U) /* Set the password and locks the card */
  93:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #define SDMMC_BLOCK_FORCE_ERASE          (0x8U) /* Force erase the password data */
  94:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  95:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
  96:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL DATA
  97:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
  98:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
  99:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 100:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL ROUTINES
 101:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 102:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 103:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** static SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_lFlushDiskWriteCache(SDMMC_BLOCK_t *obj);
 104:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 105:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 106:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * API IMPLEMENTATION
 107:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 108:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 109:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Retrieve the version of the SDMMC_BLOCK APP */
 110:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** DAVE_APP_VERSION_t SDMMC_BLOCK_GetAppVersion(void)
 111:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 170              	 .loc 2 111 0
 171              	 .cfi_startproc
 172              	 
 173              	 
 174              	 
 175 0000 80B4     	 push {r7}
 176              	.LCFI18:
 177              	 .cfi_def_cfa_offset 4
 178              	 .cfi_offset 7,-4
 179 0002 83B0     	 sub sp,sp,#12
 180              	.LCFI19:
 181              	 .cfi_def_cfa_offset 16
 182 0004 00AF     	 add r7,sp,#0
 183              	.LCFI20:
 184              	 .cfi_def_cfa_register 7
 112:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   DAVE_APP_VERSION_t version;
 113:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 114:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.major = SDMMC_BLOCK_MAJOR_VERSION;
 185              	 .loc 2 114 0
 186 0006 0423     	 movs r3,#4
 187 0008 3B70     	 strb r3,[r7]
 115:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.minor = SDMMC_BLOCK_MINOR_VERSION;
 188              	 .loc 2 115 0
 189 000a 0023     	 movs r3,#0
 190 000c 7B70     	 strb r3,[r7,#1]
 116:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   version.patch = SDMMC_BLOCK_PATCH_VERSION;
 191              	 .loc 2 116 0
 192 000e 2023     	 movs r3,#32
 193 0010 BB70     	 strb r3,[r7,#2]
 117:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 118:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return version;
 194              	 .loc 2 118 0
 195 0012 3B1D     	 adds r3,r7,#4
 196 0014 3A46     	 mov r2,r7
 197 0016 1268     	 ldr r2,[r2]
 198 0018 1146     	 mov r1,r2
 199 001a 1980     	 strh r1,[r3]
 200 001c 0233     	 adds r3,r3,#2
 201 001e 120C     	 lsrs r2,r2,#16
 202 0020 1A70     	 strb r2,[r3]
 203 0022 0023     	 movs r3,#0
 204 0024 3A79     	 ldrb r2,[r7,#4]
 205 0026 62F30703 	 bfi r3,r2,#0,#8
 206 002a 7A79     	 ldrb r2,[r7,#5]
 207 002c 62F30F23 	 bfi r3,r2,#8,#8
 208 0030 BA79     	 ldrb r2,[r7,#6]
 209 0032 62F31743 	 bfi r3,r2,#16,#8
 119:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 210              	 .loc 2 119 0
 211 0036 1846     	 mov r0,r3
 212 0038 0C37     	 adds r7,r7,#12
 213              	.LCFI21:
 214              	 .cfi_def_cfa_offset 4
 215 003a BD46     	 mov sp,r7
 216              	.LCFI22:
 217              	 .cfi_def_cfa_register 13
 218              	 
 219 003c 5DF8047B 	 ldr r7,[sp],#4
 220              	.LCFI23:
 221              	 .cfi_restore 7
 222              	 .cfi_def_cfa_offset 0
 223 0040 7047     	 bx lr
 224              	 .cfi_endproc
 225              	.LFE327:
 227 0042 00BF     	 .section .text.SDMMC_BLOCK_Init,"ax",%progbits
 228              	 .align 2
 229              	 .global SDMMC_BLOCK_Init
 230              	 .thumb
 231              	 .thumb_func
 233              	SDMMC_BLOCK_Init:
 234              	.LFB328:
 120:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 121:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* SDMMC_BLOCK initialization function */
 122:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Init(SDMMC_BLOCK_t *const obj)
 123:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 235              	 .loc 2 123 0
 236              	 .cfi_startproc
 237              	 
 238              	 
 239 0000 80B5     	 push {r7,lr}
 240              	.LCFI24:
 241              	 .cfi_def_cfa_offset 8
 242              	 .cfi_offset 7,-8
 243              	 .cfi_offset 14,-4
 244 0002 84B0     	 sub sp,sp,#16
 245              	.LCFI25:
 246              	 .cfi_def_cfa_offset 24
 247 0004 00AF     	 add r7,sp,#0
 248              	.LCFI26:
 249              	 .cfi_def_cfa_register 7
 250 0006 7860     	 str r0,[r7,#4]
 124:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 251              	 .loc 2 124 0
 252 0008 0023     	 movs r3,#0
 253 000a FB73     	 strb r3,[r7,#15]
 125:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 254              	 .loc 2 125 0
 255 000c 0023     	 movs r3,#0
 256 000e BB73     	 strb r3,[r7,#14]
 126:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 127:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_Init:Null obj is passed as input" , (obj != NULL));
 128:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 129:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->init_flag == 1U)
 257              	 .loc 2 129 0
 258 0010 7B68     	 ldr r3,[r7,#4]
 259 0012 5B7B     	 ldrb r3,[r3,#13]
 260 0014 002B     	 cmp r3,#0
 261 0016 02D0     	 beq .L10
 130:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 131:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_SUCCESS;
 262              	 .loc 2 131 0
 263 0018 0023     	 movs r3,#0
 264 001a FB73     	 strb r3,[r7,#15]
 265 001c 1BE0     	 b .L11
 266              	.L10:
 132:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 133:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   else
 134:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 135:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     /* Setup pins */
 136:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->init_pins != NULL)
 267              	 .loc 2 136 0
 268 001e 7B68     	 ldr r3,[r7,#4]
 269 0020 5B68     	 ldr r3,[r3,#4]
 270 0022 002B     	 cmp r3,#0
 271 0024 02D0     	 beq .L12
 137:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 138:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_pins();
 272              	 .loc 2 138 0
 273 0026 7B68     	 ldr r3,[r7,#4]
 274 0028 5B68     	 ldr r3,[r3,#4]
 275 002a 9847     	 blx r3
 276              	.L12:
 139:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 140:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 141:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 142:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 277              	 .loc 2 142 0
 278 002c 7B68     	 ldr r3,[r7,#4]
 279 002e 1B7B     	 ldrb r3,[r3,#12]
 280 0030 012B     	 cmp r3,#1
 281 0032 04D1     	 bne .L13
 143:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 144:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SPI_Init(obj);
 282              	 .loc 2 144 0
 283 0034 7868     	 ldr r0,[r7,#4]
 284 0036 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_Init
 285 003a 0346     	 mov r3,r0
 286 003c BB73     	 strb r3,[r7,#14]
 287              	.L13:
 145:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 146:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 147:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 148:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 149:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 150:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 151:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SD_Init(obj);
 152:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 153:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 154:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 155:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status != SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 288              	 .loc 2 155 0
 289 003e BB7B     	 ldrb r3,[r7,#14]
 290 0040 002B     	 cmp r3,#0
 291 0042 05D0     	 beq .L14
 156:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 157:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_FAILURE;
 292              	 .loc 2 157 0
 293 0044 0123     	 movs r3,#1
 294 0046 FB73     	 strb r3,[r7,#15]
 158:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_flag = 0U;
 295              	 .loc 2 158 0
 296 0048 7B68     	 ldr r3,[r7,#4]
 297 004a 0022     	 movs r2,#0
 298 004c 5A73     	 strb r2,[r3,#13]
 299 004e 02E0     	 b .L11
 300              	.L14:
 159:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 160:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else
 161:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 162:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       obj->init_flag = 1U;
 301              	 .loc 2 162 0
 302 0050 7B68     	 ldr r3,[r7,#4]
 303 0052 0122     	 movs r2,#1
 304 0054 5A73     	 strb r2,[r3,#13]
 305              	.L11:
 163:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 164:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 165:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 166:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 306              	 .loc 2 166 0
 307 0056 FB7B     	 ldrb r3,[r7,#15]
 167:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 308              	 .loc 2 167 0
 309 0058 1846     	 mov r0,r3
 310 005a 1037     	 adds r7,r7,#16
 311              	.LCFI27:
 312              	 .cfi_def_cfa_offset 8
 313 005c BD46     	 mov sp,r7
 314              	.LCFI28:
 315              	 .cfi_def_cfa_register 13
 316              	 
 317 005e 80BD     	 pop {r7,pc}
 318              	 .cfi_endproc
 319              	.LFE328:
 321              	 .section .text.SDMMC_BLOCK_Initialize,"ax",%progbits
 322              	 .align 2
 323              	 .global SDMMC_BLOCK_Initialize
 324              	 .thumb
 325              	 .thumb_func
 327              	SDMMC_BLOCK_Initialize:
 328              	.LFB329:
 168:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 169:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Initialize the card identification process */
 170:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Initialize(SDMMC_BLOCK_t *const obj)
 171:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 329              	 .loc 2 171 0
 330              	 .cfi_startproc
 331              	 
 332              	 
 333 0000 80B5     	 push {r7,lr}
 334              	.LCFI29:
 335              	 .cfi_def_cfa_offset 8
 336              	 .cfi_offset 7,-8
 337              	 .cfi_offset 14,-4
 338 0002 84B0     	 sub sp,sp,#16
 339              	.LCFI30:
 340              	 .cfi_def_cfa_offset 24
 341 0004 00AF     	 add r7,sp,#0
 342              	.LCFI31:
 343              	 .cfi_def_cfa_register 7
 344 0006 7860     	 str r0,[r7,#4]
 172:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 345              	 .loc 2 172 0
 346 0008 0023     	 movs r3,#0
 347 000a FB73     	 strb r3,[r7,#15]
 173:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_FAILURE;
 348              	 .loc 2 173 0
 349 000c 0123     	 movs r3,#1
 350 000e BB73     	 strb r3,[r7,#14]
 174:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 175:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_Initialize:Null obj is passed as input" , (obj != NULL));
 176:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 177:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 178:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 351              	 .loc 2 178 0
 352 0010 7B68     	 ldr r3,[r7,#4]
 353 0012 1B7B     	 ldrb r3,[r3,#12]
 354 0014 012B     	 cmp r3,#1
 355 0016 04D1     	 bne .L17
 179:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 180:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SPI_CardIdentificationProcess(obj);
 356              	 .loc 2 180 0
 357 0018 7868     	 ldr r0,[r7,#4]
 358 001a FFF7FEFF 	 bl SDMMC_BLOCK_SPI_CardIdentificationProcess
 359 001e 0346     	 mov r3,r0
 360 0020 FB73     	 strb r3,[r7,#15]
 361              	.L17:
 181:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 182:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 183:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 184:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 185:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 186:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 187:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       mode_status = SDMMC_BLOCK_SD_CardIdentificationProcess(obj);
 188:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 189:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 190:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 191:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 362              	 .loc 2 191 0
 363 0022 FB7B     	 ldrb r3,[r7,#15]
 364 0024 002B     	 cmp r3,#0
 365 0026 01D1     	 bne .L18
 192:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 193:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_SUCCESS;
 366              	 .loc 2 193 0
 367 0028 0023     	 movs r3,#0
 368 002a BB73     	 strb r3,[r7,#14]
 369              	.L18:
 194:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 195:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 196:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 370              	 .loc 2 196 0
 371 002c BB7B     	 ldrb r3,[r7,#14]
 197:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 372              	 .loc 2 197 0
 373 002e 1846     	 mov r0,r3
 374 0030 1037     	 adds r7,r7,#16
 375              	.LCFI32:
 376              	 .cfi_def_cfa_offset 8
 377 0032 BD46     	 mov sp,r7
 378              	.LCFI33:
 379              	 .cfi_def_cfa_register 13
 380              	 
 381 0034 80BD     	 pop {r7,pc}
 382              	 .cfi_endproc
 383              	.LFE329:
 385 0036 00BF     	 .section .text.SDMMC_BLOCK_ReadBlock,"ax",%progbits
 386              	 .align 2
 387              	 .global SDMMC_BLOCK_ReadBlock
 388              	 .thumb
 389              	 .thumb_func
 391              	SDMMC_BLOCK_ReadBlock:
 392              	.LFB330:
 198:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 199:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Read the specified number of sectors of data from the specified address */
 200:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_ReadBlock(SDMMC_BLOCK_t *const obj,
 201:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            uint8_t* read_buf,
 202:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            const uint32_t sector_number,
 203:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                            const uint8_t sector_count)
 204:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 393              	 .loc 2 204 0
 394              	 .cfi_startproc
 395              	 
 396              	 
 397 0000 80B5     	 push {r7,lr}
 398              	.LCFI34:
 399              	 .cfi_def_cfa_offset 8
 400              	 .cfi_offset 7,-8
 401              	 .cfi_offset 14,-4
 402 0002 86B0     	 sub sp,sp,#24
 403              	.LCFI35:
 404              	 .cfi_def_cfa_offset 32
 405 0004 00AF     	 add r7,sp,#0
 406              	.LCFI36:
 407              	 .cfi_def_cfa_register 7
 408 0006 F860     	 str r0,[r7,#12]
 409 0008 B960     	 str r1,[r7,#8]
 410 000a 7A60     	 str r2,[r7,#4]
 411 000c FB70     	 strb r3,[r7,#3]
 205:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 412              	 .loc 2 205 0
 413 000e 0023     	 movs r3,#0
 414 0010 FB75     	 strb r3,[r7,#23]
 206:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 207:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Null obj is passed as input" , (obj != NULL));
 208:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Read buffer address is invalid" , (read_buf != NULL));
 209:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_ReadBlock:Sector count to be read is zero" , (sector_count != 0U));
 210:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 211:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 212:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 415              	 .loc 2 212 0
 416 0012 FB68     	 ldr r3,[r7,#12]
 417 0014 1B7B     	 ldrb r3,[r3,#12]
 418 0016 012B     	 cmp r3,#1
 419 0018 07D1     	 bne .L21
 213:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 214:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SPI_ReadBlock(obj, read_buf, sector_number, (uint32_t)sector_count);
 420              	 .loc 2 214 0
 421 001a FB78     	 ldrb r3,[r7,#3]
 422 001c F868     	 ldr r0,[r7,#12]
 423 001e B968     	 ldr r1,[r7,#8]
 424 0020 7A68     	 ldr r2,[r7,#4]
 425 0022 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_ReadBlock
 426 0026 0346     	 mov r3,r0
 427 0028 FB75     	 strb r3,[r7,#23]
 428              	.L21:
 215:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 216:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 217:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 218:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 219:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 220:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 221:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SD_ReadBlock(obj, read_buf, sector_number, sector_count);
 222:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 223:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 224:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 225:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 429              	 .loc 2 225 0
 430 002a FB7D     	 ldrb r3,[r7,#23]
 226:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 431              	 .loc 2 226 0
 432 002c 1846     	 mov r0,r3
 433 002e 1837     	 adds r7,r7,#24
 434              	.LCFI37:
 435              	 .cfi_def_cfa_offset 8
 436 0030 BD46     	 mov sp,r7
 437              	.LCFI38:
 438              	 .cfi_def_cfa_register 13
 439              	 
 440 0032 80BD     	 pop {r7,pc}
 441              	 .cfi_endproc
 442              	.LFE330:
 444              	 .section .text.SDMMC_BLOCK_WriteBlock,"ax",%progbits
 445              	 .align 2
 446              	 .global SDMMC_BLOCK_WriteBlock
 447              	 .thumb
 448              	 .thumb_func
 450              	SDMMC_BLOCK_WriteBlock:
 451              	.LFB331:
 227:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 228:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Write the specified number of sectors of data from the specified address */
 229:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_WriteBlock(SDMMC_BLOCK_t *const obj,
 230:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             uint8_t* write_buf,
 231:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             const uint32_t sector_number,
 232:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                             const uint8_t sector_count)
 233:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 452              	 .loc 2 233 0
 453              	 .cfi_startproc
 454              	 
 455              	 
 456 0000 80B5     	 push {r7,lr}
 457              	.LCFI39:
 458              	 .cfi_def_cfa_offset 8
 459              	 .cfi_offset 7,-8
 460              	 .cfi_offset 14,-4
 461 0002 86B0     	 sub sp,sp,#24
 462              	.LCFI40:
 463              	 .cfi_def_cfa_offset 32
 464 0004 00AF     	 add r7,sp,#0
 465              	.LCFI41:
 466              	 .cfi_def_cfa_register 7
 467 0006 F860     	 str r0,[r7,#12]
 468 0008 B960     	 str r1,[r7,#8]
 469 000a 7A60     	 str r2,[r7,#4]
 470 000c FB70     	 strb r3,[r7,#3]
 234:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 471              	 .loc 2 234 0
 472 000e 0023     	 movs r3,#0
 473 0010 FB75     	 strb r3,[r7,#23]
 235:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 236:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Null obj is passed as input" , (obj != NULL));
 237:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Write buffer address is invalid" , (write_buf != NULL));
 238:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Sector count to be written is zero" , (sector_count != 0U));
 239:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 240:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 241:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 474              	 .loc 2 241 0
 475 0012 FB68     	 ldr r3,[r7,#12]
 476 0014 1B7B     	 ldrb r3,[r3,#12]
 477 0016 012B     	 cmp r3,#1
 478 0018 07D1     	 bne .L24
 242:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 243:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SPI_WriteBlock(obj, write_buf, sector_number, (uint32_t)sector_count);
 479              	 .loc 2 243 0
 480 001a FB78     	 ldrb r3,[r7,#3]
 481 001c F868     	 ldr r0,[r7,#12]
 482 001e B968     	 ldr r1,[r7,#8]
 483 0020 7A68     	 ldr r2,[r7,#4]
 484 0022 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_WriteBlock
 485 0026 0346     	 mov r3,r0
 486 0028 FB75     	 strb r3,[r7,#23]
 487              	.L24:
 244:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 245:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 246:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 247:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 248:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 249:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 250:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_SD_WriteBlock(obj, write_buf, sector_number, sector_count);
 251:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 252:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 253:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 254:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 488              	 .loc 2 254 0
 489 002a FB7D     	 ldrb r3,[r7,#23]
 255:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 490              	 .loc 2 255 0
 491 002c 1846     	 mov r0,r3
 492 002e 1837     	 adds r7,r7,#24
 493              	.LCFI42:
 494              	 .cfi_def_cfa_offset 8
 495 0030 BD46     	 mov sp,r7
 496              	.LCFI43:
 497              	 .cfi_def_cfa_register 13
 498              	 
 499 0032 80BD     	 pop {r7,pc}
 500              	 .cfi_endproc
 501              	.LFE331:
 503              	 .section .text.SDMMC_BLOCK_GetStatus,"ax",%progbits
 504              	 .align 2
 505              	 .global SDMMC_BLOCK_GetStatus
 506              	 .thumb
 507              	 .thumb_func
 509              	SDMMC_BLOCK_GetStatus:
 510              	.LFB332:
 256:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 257:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Get the current status of the card */
 258:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** uint8_t SDMMC_BLOCK_GetStatus(SDMMC_BLOCK_t *const obj)
 259:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 511              	 .loc 2 259 0
 512              	 .cfi_startproc
 513              	 
 514              	 
 515 0000 80B5     	 push {r7,lr}
 516              	.LCFI44:
 517              	 .cfi_def_cfa_offset 8
 518              	 .cfi_offset 7,-8
 519              	 .cfi_offset 14,-4
 520 0002 84B0     	 sub sp,sp,#16
 521              	.LCFI45:
 522              	 .cfi_def_cfa_offset 24
 523 0004 00AF     	 add r7,sp,#0
 524              	.LCFI46:
 525              	 .cfi_def_cfa_register 7
 526 0006 7860     	 str r0,[r7,#4]
 260:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   uint8_t disk_status = 0U;
 527              	 .loc 2 260 0
 528 0008 0023     	 movs r3,#0
 529 000a FB73     	 strb r3,[r7,#15]
 261:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 262:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 263:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 530              	 .loc 2 263 0
 531 000c 7B68     	 ldr r3,[r7,#4]
 532 000e 1B7B     	 ldrb r3,[r3,#12]
 533 0010 012B     	 cmp r3,#1
 534 0012 04D1     	 bne .L27
 264:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 265:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       disk_status = SDMMC_BLOCK_SPI_GetState(obj);
 535              	 .loc 2 265 0
 536 0014 7868     	 ldr r0,[r7,#4]
 537 0016 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetState
 538 001a 0346     	 mov r3,r0
 539 001c FB73     	 strb r3,[r7,#15]
 540              	.L27:
 266:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 267:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 268:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 269:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 270:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 271:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 272:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       disk_status = SDMMC_BLOCK_SD_GetState(obj);
 273:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 274:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 275:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 276:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return disk_status;
 541              	 .loc 2 276 0
 542 001e FB7B     	 ldrb r3,[r7,#15]
 277:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 543              	 .loc 2 277 0
 544 0020 1846     	 mov r0,r3
 545 0022 1037     	 adds r7,r7,#16
 546              	.LCFI47:
 547              	 .cfi_def_cfa_offset 8
 548 0024 BD46     	 mov sp,r7
 549              	.LCFI48:
 550              	 .cfi_def_cfa_register 13
 551              	 
 552 0026 80BD     	 pop {r7,pc}
 553              	 .cfi_endproc
 554              	.LFE332:
 556              	 .section .text.SDMMC_BLOCK_Ioctl,"ax",%progbits
 557              	 .align 2
 558              	 .global SDMMC_BLOCK_Ioctl
 559              	 .thumb
 560              	 .thumb_func
 562              	SDMMC_BLOCK_Ioctl:
 563              	.LFB333:
 278:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 279:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* I/O control */
 280:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_Ioctl(SDMMC_BLOCK_t *const obj, const uint8_t command, void *buffe
 281:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 564              	 .loc 2 281 0
 565              	 .cfi_startproc
 566              	 
 567              	 
 568 0000 90B5     	 push {r4,r7,lr}
 569              	.LCFI49:
 570              	 .cfi_def_cfa_offset 12
 571              	 .cfi_offset 4,-12
 572              	 .cfi_offset 7,-8
 573              	 .cfi_offset 14,-4
 574 0002 91B0     	 sub sp,sp,#68
 575              	.LCFI50:
 576              	 .cfi_def_cfa_offset 80
 577 0004 00AF     	 add r7,sp,#0
 578              	.LCFI51:
 579              	 .cfi_def_cfa_register 7
 580 0006 F860     	 str r0,[r7,#12]
 581 0008 0B46     	 mov r3,r1
 582 000a 7A60     	 str r2,[r7,#4]
 583 000c FB72     	 strb r3,[r7,#11]
 282:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_SUCCESS;
 584              	 .loc 2 282 0
 585 000e 0023     	 movs r3,#0
 586 0010 87F83F30 	 strb r3,[r7,#63]
 283:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_MODE_STATUS_t mode_status = SDMMC_BLOCK_MODE_STATUS_SUCCESS;
 587              	 .loc 2 283 0
 588 0014 0023     	 movs r3,#0
 589 0016 87F83E30 	 strb r3,[r7,#62]
 284:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   uint8_t card_status;
 285:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   bool valid_command = true;
 590              	 .loc 2 285 0
 591 001a 0123     	 movs r3,#1
 592 001c 87F83D30 	 strb r3,[r7,#61]
 286:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_ERASE_ADDRESS_t *erase_ptr;
 287:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_LOCK_STRUCTURE_t lock = {0U};
 593              	 .loc 2 287 0
 594 0020 07F11003 	 add r3,r7,#16
 595 0024 0022     	 movs r2,#0
 596 0026 1A60     	 str r2,[r3]
 597 0028 0433     	 adds r3,r3,#4
 598 002a 0022     	 movs r2,#0
 599 002c 1A60     	 str r2,[r3]
 600 002e 0433     	 adds r3,r3,#4
 601 0030 0022     	 movs r2,#0
 602 0032 1A60     	 str r2,[r3]
 603 0034 0433     	 adds r3,r3,#4
 604 0036 0022     	 movs r2,#0
 605 0038 1A60     	 str r2,[r3]
 606 003a 0433     	 adds r3,r3,#4
 607 003c 0022     	 movs r2,#0
 608 003e 1A60     	 str r2,[r3]
 609 0040 0433     	 adds r3,r3,#4
 610 0042 0022     	 movs r2,#0
 611 0044 1A60     	 str r2,[r3]
 612 0046 0433     	 adds r3,r3,#4
 613 0048 0022     	 movs r2,#0
 614 004a 1A60     	 str r2,[r3]
 615 004c 0433     	 adds r3,r3,#4
 616 004e 0022     	 movs r2,#0
 617 0050 1A60     	 str r2,[r3]
 618 0052 0433     	 adds r3,r3,#4
 619 0054 0022     	 movs r2,#0
 620 0056 1A80     	 strh r2,[r3]
 621 0058 0233     	 adds r3,r3,#2
 288:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   const SDMMC_BLOCK_PASSWORD_t *password;
 289:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 290:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   XMC_ASSERT("SDMMC_BLOCK_WriteBlock:Null obj is passed as input" , (obj != NULL));
 291:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 292:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /* If card is not initialized or inserted */
 293:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if ((obj->card_state & (uint8_t)SDMMC_BLOCK_CARD_STATE_NOT_INITIALIZED) == (uint8_t)0)
 622              	 .loc 2 293 0
 623 005a FB68     	 ldr r3,[r7,#12]
 624 005c 1B7A     	 ldrb r3,[r3,#8]
 625 005e 03F00103 	 and r3,r3,#1
 626 0062 002B     	 cmp r3,#0
 627 0064 1ED1     	 bne .L30
 294:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 295:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     card_status = SDMMC_BLOCK_GetStatus(obj);
 628              	 .loc 2 295 0
 629 0066 F868     	 ldr r0,[r7,#12]
 630 0068 FFF7FEFF 	 bl SDMMC_BLOCK_GetStatus
 631 006c 0346     	 mov r3,r0
 632 006e 87F83C30 	 strb r3,[r7,#60]
 296:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 297:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if ((card_status & (uint8_t)SDMMC_BLOCK_CARD_STATE_LOCKED) != 0U)
 633              	 .loc 2 297 0
 634 0072 97F83C30 	 ldrb r3,[r7,#60]
 635 0076 03F00803 	 and r3,r3,#8
 636 007a 002B     	 cmp r3,#0
 637 007c 18D0     	 beq .L33
 298:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 299:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_LOCKED;
 638              	 .loc 2 299 0
 639 007e 0523     	 movs r3,#5
 640 0080 87F83F30 	 strb r3,[r7,#63]
 300:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       if ((command == (uint8_t)SDMMC_BLOCK_CTRL_SYNC) ||
 641              	 .loc 2 300 0
 642 0084 FB7A     	 ldrb r3,[r7,#11]
 643 0086 002B     	 cmp r3,#0
 644 0088 08D0     	 beq .L32
 645              	 .loc 2 300 0 is_stmt 0 discriminator 1
 646 008a FB7A     	 ldrb r3,[r7,#11]
 647 008c 0D2B     	 cmp r3,#13
 648 008e 05D0     	 beq .L32
 301:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_MMC_GET_OCR) ||
 649              	 .loc 2 301 0 is_stmt 1
 650 0090 FB7A     	 ldrb r3,[r7,#11]
 651 0092 0E2B     	 cmp r3,#14
 652 0094 02D0     	 beq .L32
 302:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_MMC_GET_SDSTAT) ||
 653              	 .loc 2 302 0
 654 0096 FB7A     	 ldrb r3,[r7,#11]
 655 0098 042B     	 cmp r3,#4
 656 009a 09D1     	 bne .L33
 657              	.L32:
 303:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           (command == (uint8_t)SDMMC_BLOCK_CTRL_TRIM))
 304:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       {
 305:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         valid_command = false;
 658              	 .loc 2 305 0
 659 009c 0023     	 movs r3,#0
 660 009e 87F83D30 	 strb r3,[r7,#61]
 661 00a2 05E0     	 b .L33
 662              	.L30:
 306:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       }
 307:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 308:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 309:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   else
 310:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 311:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     valid_command = false;
 663              	 .loc 2 311 0
 664 00a4 0023     	 movs r3,#0
 665 00a6 87F83D30 	 strb r3,[r7,#61]
 312:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_NOTRDY;
 666              	 .loc 2 312 0
 667 00aa 0323     	 movs r3,#3
 668 00ac 87F83F30 	 strb r3,[r7,#63]
 669              	.L33:
 313:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 314:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 315:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (valid_command == true)
 670              	 .loc 2 315 0
 671 00b0 97F83D30 	 ldrb r3,[r7,#61]
 672 00b4 002B     	 cmp r3,#0
 673 00b6 00F04082 	 beq .L34
 316:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 317:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     /* Switch to the respective IOCTL command */
 318:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     switch (command)
 674              	 .loc 2 318 0
 675 00ba FB7A     	 ldrb r3,[r7,#11]
 676 00bc 252B     	 cmp r3,#37
 677 00be 00F21982 	 bhi .L35
 678 00c2 01A2     	 adr r2,.L37
 679 00c4 52F823F0 	 ldr pc,[r2,r3,lsl#2]
 680              	 .p2align 2
 681              	.L37:
 682 00c8 61010000 	 .word .L36+1
 683 00cc 89010000 	 .word .L38+1
 684 00d0 6F010000 	 .word .L39+1
 685 00d4 CB010000 	 .word .L40+1
 686 00d8 A3010000 	 .word .L41+1
 687 00dc F5040000 	 .word .L35+1
 688 00e0 F5040000 	 .word .L35+1
 689 00e4 DD040000 	 .word .L42+1
 690 00e8 F5040000 	 .word .L35+1
 691 00ec F5040000 	 .word .L35+1
 692 00f0 E5010000 	 .word .L43+1
 693 00f4 FF010000 	 .word .L44+1
 694 00f8 19020000 	 .word .L45+1
 695 00fc 33020000 	 .word .L46+1
 696 0100 4D020000 	 .word .L47+1
 697 0104 F5040000 	 .word .L35+1
 698 0108 F5040000 	 .word .L35+1
 699 010c F5040000 	 .word .L35+1
 700 0110 F5040000 	 .word .L35+1
 701 0114 F5040000 	 .word .L35+1
 702 0118 F5040000 	 .word .L35+1
 703 011c F5040000 	 .word .L35+1
 704 0120 F5040000 	 .word .L35+1
 705 0124 F5040000 	 .word .L35+1
 706 0128 F5040000 	 .word .L35+1
 707 012c F5040000 	 .word .L35+1
 708 0130 F5040000 	 .word .L35+1
 709 0134 F5040000 	 .word .L35+1
 710 0138 F5040000 	 .word .L35+1
 711 013c F5040000 	 .word .L35+1
 712 0140 F5040000 	 .word .L35+1
 713 0144 67020000 	 .word .L48+1
 714 0148 BF020000 	 .word .L49+1
 715 014c 17030000 	 .word .L50+1
 716 0150 AF030000 	 .word .L51+1
 717 0154 07040000 	 .word .L52+1
 718 0158 9F040000 	 .word .L53+1
 719 015c B9040000 	 .word .L54+1
 720              	 .p2align 1
 721              	.L36:
 319:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 320:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 321:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Control sync
 322:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 323:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_SYNC:
 324:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         status = SDMMC_BLOCK_lFlushDiskWriteCache(obj);
 722              	 .loc 2 324 0
 723 0160 F868     	 ldr r0,[r7,#12]
 724 0162 FFF7FEFF 	 bl SDMMC_BLOCK_lFlushDiskWriteCache
 725 0166 0346     	 mov r3,r0
 726 0168 87F83F30 	 strb r3,[r7,#63]
 325:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 727              	 .loc 2 325 0
 728 016c C6E1     	 b .L55
 729              	.L39:
 326:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 327:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 328:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get sector size
 329:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 330:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_SECTOR_SIZE:
 331:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 332:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 730              	 .loc 2 332 0
 731 016e FB68     	 ldr r3,[r7,#12]
 732 0170 1B7B     	 ldrb r3,[r3,#12]
 733 0172 012B     	 cmp r3,#1
 734 0174 07D1     	 bne .L56
 333:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 334:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSectorSize(obj, buffer);
 735              	 .loc 2 334 0
 736 0176 F868     	 ldr r0,[r7,#12]
 737 0178 7968     	 ldr r1,[r7,#4]
 738 017a FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetSectorSize
 739 017e 0346     	 mov r3,r0
 740 0180 87F83E30 	 strb r3,[r7,#62]
 335:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 336:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 337:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 338:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 339:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 340:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 341:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSectorSize(obj, buffer);
 342:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 343:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 344:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 345:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       break;
 741              	 .loc 2 345 0
 742 0184 BAE1     	 b .L55
 743              	.L56:
 744 0186 B9E1     	 b .L55
 745              	.L38:
 346:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 347:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 348:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get sector count
 349:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 350:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_SECTOR_COUNT:
 351:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 352:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 746              	 .loc 2 352 0
 747 0188 FB68     	 ldr r3,[r7,#12]
 748 018a 1B7B     	 ldrb r3,[r3,#12]
 749 018c 012B     	 cmp r3,#1
 750 018e 07D1     	 bne .L57
 353:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 354:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSectorCount(obj, buffer);
 751              	 .loc 2 354 0
 752 0190 F868     	 ldr r0,[r7,#12]
 753 0192 7968     	 ldr r1,[r7,#4]
 754 0194 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetSectorCount
 755 0198 0346     	 mov r3,r0
 756 019a 87F83E30 	 strb r3,[r7,#62]
 355:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 356:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 357:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 358:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 359:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 360:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 361:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSectorCount(obj, buffer);
 362:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 363:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 364:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 757              	 .loc 2 364 0
 758 019e ADE1     	 b .L55
 759              	.L57:
 760 01a0 ACE1     	 b .L55
 761              	.L41:
 365:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 366:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 367:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Control trim. Erase the content in the specified sectors
 368:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 369:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_TRIM:
 370:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         erase_ptr = (SDMMC_BLOCK_ERASE_ADDRESS_t *) buffer;
 762              	 .loc 2 370 0
 763 01a2 7B68     	 ldr r3,[r7,#4]
 764 01a4 BB63     	 str r3,[r7,#56]
 371:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 372:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 765              	 .loc 2 372 0
 766 01a6 FB68     	 ldr r3,[r7,#12]
 767 01a8 1B7B     	 ldrb r3,[r3,#12]
 768 01aa 012B     	 cmp r3,#1
 769 01ac 0CD1     	 bne .L58
 373:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 374:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end
 770              	 .loc 2 374 0
 771 01ae BB6B     	 ldr r3,[r7,#56]
 772 01b0 1A68     	 ldr r2,[r3]
 773 01b2 BB6B     	 ldr r3,[r7,#56]
 774 01b4 5B68     	 ldr r3,[r3,#4]
 775 01b6 F868     	 ldr r0,[r7,#12]
 776 01b8 1146     	 mov r1,r2
 777 01ba 1A46     	 mov r2,r3
 778 01bc FFF7FEFF 	 bl SDMMC_BLOCK_SPI_EraseBlock
 779 01c0 0346     	 mov r3,r0
 780 01c2 87F83E30 	 strb r3,[r7,#62]
 375:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 376:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 377:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 378:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 379:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 380:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 381:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_EraseBlock(obj, (erase_ptr->start_address), (erase_ptr->end_
 382:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 383:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 384:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 781              	 .loc 2 384 0
 782 01c6 99E1     	 b .L55
 783              	.L58:
 784 01c8 98E1     	 b .L55
 785              	.L40:
 385:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 386:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 387:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get block size
 388:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 389:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_GET_BLOCK_SIZE:
 390:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 391:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 786              	 .loc 2 391 0
 787 01ca FB68     	 ldr r3,[r7,#12]
 788 01cc 1B7B     	 ldrb r3,[r3,#12]
 789 01ce 012B     	 cmp r3,#1
 790 01d0 07D1     	 bne .L59
 392:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 393:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetBlockSize(obj, buffer);
 791              	 .loc 2 393 0
 792 01d2 F868     	 ldr r0,[r7,#12]
 793 01d4 7968     	 ldr r1,[r7,#4]
 794 01d6 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetBlockSize
 795 01da 0346     	 mov r3,r0
 796 01dc 87F83E30 	 strb r3,[r7,#62]
 394:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 395:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 396:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 397:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 398:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 399:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 400:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetBlockSize(obj, buffer);
 401:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 402:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 403:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 797              	 .loc 2 403 0
 798 01e0 8CE1     	 b .L55
 799              	.L59:
 800 01e2 8BE1     	 b .L55
 801              	.L43:
 404:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 405:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 406:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get the type of the card
 407:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 408:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_TYPE:
 409:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 410:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 802              	 .loc 2 410 0
 803 01e4 FB68     	 ldr r3,[r7,#12]
 804 01e6 1B7B     	 ldrb r3,[r3,#12]
 805 01e8 012B     	 cmp r3,#1
 806 01ea 07D1     	 bne .L60
 411:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 412:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCardType(obj, buffer);
 807              	 .loc 2 412 0
 808 01ec F868     	 ldr r0,[r7,#12]
 809 01ee 7968     	 ldr r1,[r7,#4]
 810 01f0 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetCardType
 811 01f4 0346     	 mov r3,r0
 812 01f6 87F83E30 	 strb r3,[r7,#62]
 413:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 414:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 415:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 416:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 417:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 418:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 419:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCardType(obj, buffer);
 420:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 421:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 422:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 813              	 .loc 2 422 0
 814 01fa 7FE1     	 b .L55
 815              	.L60:
 816 01fc 7EE1     	 b .L55
 817              	.L44:
 423:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 424:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 425:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get CSD
 426:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 427:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_CSD:
 428:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 429:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 818              	 .loc 2 429 0
 819 01fe FB68     	 ldr r3,[r7,#12]
 820 0200 1B7B     	 ldrb r3,[r3,#12]
 821 0202 012B     	 cmp r3,#1
 822 0204 07D1     	 bne .L61
 430:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 431:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCsd(obj, buffer);
 823              	 .loc 2 431 0
 824 0206 F868     	 ldr r0,[r7,#12]
 825 0208 7968     	 ldr r1,[r7,#4]
 826 020a FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetCsd
 827 020e 0346     	 mov r3,r0
 828 0210 87F83E30 	 strb r3,[r7,#62]
 432:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 433:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 434:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 435:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 436:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 437:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 438:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCsd(obj, buffer);
 439:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 440:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 441:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 829              	 .loc 2 441 0
 830 0214 72E1     	 b .L55
 831              	.L61:
 832 0216 71E1     	 b .L55
 833              	.L45:
 442:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 443:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 444:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get CID
 445:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 446:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_CID:
 447:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 448:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 834              	 .loc 2 448 0
 835 0218 FB68     	 ldr r3,[r7,#12]
 836 021a 1B7B     	 ldrb r3,[r3,#12]
 837 021c 012B     	 cmp r3,#1
 838 021e 07D1     	 bne .L62
 449:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 450:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetCid(obj, buffer);
 839              	 .loc 2 450 0
 840 0220 F868     	 ldr r0,[r7,#12]
 841 0222 7968     	 ldr r1,[r7,#4]
 842 0224 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetCid
 843 0228 0346     	 mov r3,r0
 844 022a 87F83E30 	 strb r3,[r7,#62]
 451:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 452:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 453:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 454:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 455:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 456:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 457:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetCid(obj, buffer);
 458:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 459:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 460:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 845              	 .loc 2 460 0
 846 022e 65E1     	 b .L55
 847              	.L62:
 848 0230 64E1     	 b .L55
 849              	.L46:
 461:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 462:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 463:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get OCR
 464:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 465:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_OCR:
 466:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 467:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 850              	 .loc 2 467 0
 851 0232 FB68     	 ldr r3,[r7,#12]
 852 0234 1B7B     	 ldrb r3,[r3,#12]
 853 0236 012B     	 cmp r3,#1
 854 0238 07D1     	 bne .L63
 468:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 469:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetOcr(obj, buffer);
 855              	 .loc 2 469 0
 856 023a F868     	 ldr r0,[r7,#12]
 857 023c 7968     	 ldr r1,[r7,#4]
 858 023e FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetOcr
 859 0242 0346     	 mov r3,r0
 860 0244 87F83E30 	 strb r3,[r7,#62]
 470:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 471:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 472:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 473:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 474:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 475:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 476:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetOcr(obj, buffer);
 477:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 478:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 479:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 861              	 .loc 2 479 0
 862 0248 58E1     	 b .L55
 863              	.L63:
 864 024a 57E1     	 b .L55
 865              	.L47:
 480:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 481:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 482:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Get SD status
 483:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 484:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_GET_SDSTAT:
 485:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 486:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 866              	 .loc 2 486 0
 867 024c FB68     	 ldr r3,[r7,#12]
 868 024e 1B7B     	 ldrb r3,[r3,#12]
 869 0250 012B     	 cmp r3,#1
 870 0252 07D1     	 bne .L64
 487:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 488:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_GetSdStatus(obj, buffer);
 871              	 .loc 2 488 0
 872 0254 F868     	 ldr r0,[r7,#12]
 873 0256 7968     	 ldr r1,[r7,#4]
 874 0258 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetSdStatus
 875 025c 0346     	 mov r3,r0
 876 025e 87F83E30 	 strb r3,[r7,#62]
 489:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 490:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 491:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 492:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 493:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 494:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 495:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetSdStatus(obj, buffer);
 496:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 497:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 498:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 877              	 .loc 2 498 0
 878 0262 4BE1     	 b .L55
 879              	.L64:
 880 0264 4AE1     	 b .L55
 881              	.L48:
 499:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 500:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 501:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Lock card
 502:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 503:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_LOCK_CARD:
 504:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_LOCK;
 882              	 .loc 2 504 0
 883 0266 0423     	 movs r3,#4
 884 0268 3B74     	 strb r3,[r7,#16]
 505:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 885              	 .loc 2 505 0
 886 026a 7B68     	 ldr r3,[r7,#4]
 887 026c 7B63     	 str r3,[r7,#52]
 506:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 507:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         /* Check password length doesn't exceeds the permitted length */
 508:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 888              	 .loc 2 508 0
 889 026e 7B6B     	 ldr r3,[r7,#52]
 890 0270 93F82030 	 ldrb r3,[r3,#32]
 891 0274 102B     	 cmp r3,#16
 892 0276 1DD8     	 bhi .L65
 509:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 510:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 893              	 .loc 2 510 0
 894 0278 7B6B     	 ldr r3,[r7,#52]
 895 027a 93F82030 	 ldrb r3,[r3,#32]
 896 027e 7B74     	 strb r3,[r7,#17]
 511:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 897              	 .loc 2 511 0
 898 0280 7A6B     	 ldr r2,[r7,#52]
 899 0282 7B7C     	 ldrb r3,[r7,#17]
 900 0284 1C46     	 mov r4,r3
 901 0286 07F11003 	 add r3,r7,#16
 902 028a 0233     	 adds r3,r3,#2
 903 028c 1846     	 mov r0,r3
 904 028e 1146     	 mov r1,r2
 905 0290 2246     	 mov r2,r4
 906 0292 FFF7FEFF 	 bl memcpy
 512:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 513:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 514:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 907              	 .loc 2 514 0
 908 0296 FB68     	 ldr r3,[r7,#12]
 909 0298 1B7B     	 ldrb r3,[r3,#12]
 910 029a 012B     	 cmp r3,#1
 911 029c 0ED1     	 bne .L67
 515:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 516:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_L
 912              	 .loc 2 516 0
 913 029e 07F11003 	 add r3,r7,#16
 914 02a2 F868     	 ldr r0,[r7,#12]
 915 02a4 1946     	 mov r1,r3
 916 02a6 0122     	 movs r2,#1
 917 02a8 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 918 02ac 0346     	 mov r3,r0
 919 02ae 87F83E30 	 strb r3,[r7,#62]
 517:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 518:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 519:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 520:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 521:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 522:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 523:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LO
 524:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 525:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 526:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 527:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 528:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 529:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 530:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 531:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 920              	 .loc 2 531 0
 921 02b2 23E1     	 b .L55
 922              	.L65:
 529:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 923              	 .loc 2 529 0
 924 02b4 0A23     	 movs r3,#10
 925 02b6 87F83E30 	 strb r3,[r7,#62]
 926              	 .loc 2 531 0
 927 02ba 1FE1     	 b .L55
 928              	.L67:
 929              	 .loc 2 531 0 is_stmt 0 discriminator 1
 930 02bc 1EE1     	 b .L55
 931              	.L49:
 532:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 533:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 534:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Unlock card
 535:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 536:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_UNLOCK_CARD:
 537:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_UNLOCK;
 932              	 .loc 2 537 0 is_stmt 1
 933 02be 0023     	 movs r3,#0
 934 02c0 3B74     	 strb r3,[r7,#16]
 538:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 935              	 .loc 2 538 0
 936 02c2 7B68     	 ldr r3,[r7,#4]
 937 02c4 7B63     	 str r3,[r7,#52]
 539:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 540:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 938              	 .loc 2 540 0
 939 02c6 7B6B     	 ldr r3,[r7,#52]
 940 02c8 93F82030 	 ldrb r3,[r3,#32]
 941 02cc 102B     	 cmp r3,#16
 942 02ce 1DD8     	 bhi .L68
 541:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 542:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 943              	 .loc 2 542 0
 944 02d0 7B6B     	 ldr r3,[r7,#52]
 945 02d2 93F82030 	 ldrb r3,[r3,#32]
 946 02d6 7B74     	 strb r3,[r7,#17]
 543:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 947              	 .loc 2 543 0
 948 02d8 7A6B     	 ldr r2,[r7,#52]
 949 02da 7B7C     	 ldrb r3,[r7,#17]
 950 02dc 1C46     	 mov r4,r3
 951 02de 07F11003 	 add r3,r7,#16
 952 02e2 0233     	 adds r3,r3,#2
 953 02e4 1846     	 mov r0,r3
 954 02e6 1146     	 mov r1,r2
 955 02e8 2246     	 mov r2,r4
 956 02ea FFF7FEFF 	 bl memcpy
 544:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 545:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 546:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 957              	 .loc 2 546 0
 958 02ee FB68     	 ldr r3,[r7,#12]
 959 02f0 1B7B     	 ldrb r3,[r3,#12]
 960 02f2 012B     	 cmp r3,#1
 961 02f4 0ED1     	 bne .L70
 547:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 548:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 962              	 .loc 2 548 0
 963 02f6 07F11003 	 add r3,r7,#16
 964 02fa F868     	 ldr r0,[r7,#12]
 965 02fc 1946     	 mov r1,r3
 966 02fe 0022     	 movs r2,#0
 967 0300 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 968 0304 0346     	 mov r3,r0
 969 0306 87F83E30 	 strb r3,[r7,#62]
 549:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 550:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 551:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 552:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 553:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 554:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 555:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 556:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 557:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 558:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 559:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 560:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 561:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 562:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 563:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 970              	 .loc 2 563 0
 971 030a F7E0     	 b .L55
 972              	.L68:
 561:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 973              	 .loc 2 561 0
 974 030c 0A23     	 movs r3,#10
 975 030e 87F83E30 	 strb r3,[r7,#62]
 976              	 .loc 2 563 0
 977 0312 F3E0     	 b .L55
 978              	.L70:
 979              	 .loc 2 563 0 is_stmt 0 discriminator 2
 980 0314 F2E0     	 b .L55
 981              	.L50:
 564:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 565:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 566:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Set card password
 567:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 568:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_SET_PASSWD:
 569:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD;
 982              	 .loc 2 569 0 is_stmt 1
 983 0316 0123     	 movs r3,#1
 984 0318 3B74     	 strb r3,[r7,#16]
 570:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 985              	 .loc 2 570 0
 986 031a 7B68     	 ldr r3,[r7,#4]
 987 031c 7B63     	 str r3,[r7,#52]
 571:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 572:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 988              	 .loc 2 572 0
 989 031e 7B6B     	 ldr r3,[r7,#52]
 990 0320 93F82030 	 ldrb r3,[r3,#32]
 991 0324 102B     	 cmp r3,#16
 992 0326 3DD8     	 bhi .L71
 573:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 993              	 .loc 2 573 0 discriminator 1
 994 0328 7B6B     	 ldr r3,[r7,#52]
 995 032a 93F82130 	 ldrb r3,[r3,#33]
 572:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 996              	 .loc 2 572 0 discriminator 1
 997 032e 102B     	 cmp r3,#16
 998 0330 38D8     	 bhi .L71
 574:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 575:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 999              	 .loc 2 575 0
 1000 0332 7B6B     	 ldr r3,[r7,#52]
 1001 0334 93F82020 	 ldrb r2,[r3,#32]
 1002 0338 7B6B     	 ldr r3,[r7,#52]
 1003 033a 93F82130 	 ldrb r3,[r3,#33]
 1004 033e 1344     	 add r3,r3,r2
 1005 0340 DBB2     	 uxtb r3,r3
 1006 0342 7B74     	 strb r3,[r7,#17]
 576:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 1007              	 .loc 2 576 0
 1008 0344 7A6B     	 ldr r2,[r7,#52]
 1009 0346 7B6B     	 ldr r3,[r7,#52]
 1010 0348 93F82030 	 ldrb r3,[r3,#32]
 1011 034c 1C46     	 mov r4,r3
 1012 034e 07F11003 	 add r3,r7,#16
 1013 0352 0233     	 adds r3,r3,#2
 1014 0354 1846     	 mov r0,r3
 1015 0356 1146     	 mov r1,r2
 1016 0358 2246     	 mov r2,r4
 1017 035a FFF7FEFF 	 bl memcpy
 577:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 1018              	 .loc 2 577 0
 1019 035e 7B6B     	 ldr r3,[r7,#52]
 1020 0360 93F82030 	 ldrb r3,[r3,#32]
 1021 0364 1A46     	 mov r2,r3
 1022 0366 07F11003 	 add r3,r7,#16
 1023 036a 1344     	 add r3,r3,r2
 1024 036c 991C     	 adds r1,r3,#2
 1025 036e 7B6B     	 ldr r3,[r7,#52]
 1026 0370 03F11002 	 add r2,r3,#16
 1027 0374 7B6B     	 ldr r3,[r7,#52]
 1028 0376 93F82130 	 ldrb r3,[r3,#33]
 1029 037a 0846     	 mov r0,r1
 1030 037c 1146     	 mov r1,r2
 1031 037e 1A46     	 mov r2,r3
 1032 0380 FFF7FEFF 	 bl memcpy
 578:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 579:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #ifdef SDMMC_BLOCK_SPI
 580:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1033              	 .loc 2 580 0
 1034 0384 FB68     	 ldr r3,[r7,#12]
 1035 0386 1B7B     	 ldrb r3,[r3,#12]
 1036 0388 012B     	 cmp r3,#1
 1037 038a 0AD1     	 bne .L72
 581:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 582:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 1038              	 .loc 2 582 0
 1039 038c 07F11003 	 add r3,r7,#16
 1040 0390 F868     	 ldr r0,[r7,#12]
 1041 0392 1946     	 mov r1,r3
 1042 0394 0022     	 movs r2,#0
 1043 0396 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 1044 039a 0346     	 mov r3,r0
 1045 039c 87F83E30 	 strb r3,[r7,#62]
 580:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 1046              	 .loc 2 580 0
 1047 03a0 04E0     	 b .L73
 1048              	.L72:
 1049 03a2 03E0     	 b .L73
 1050              	.L71:
 583:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 584:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #endif
 585:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 586:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #ifdef SDMMC_BLOCK_SD
 587:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 588:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 589:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 590:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 591:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     #endif
 592:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 593:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 594:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 595:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 1051              	 .loc 2 595 0
 1052 03a4 0A23     	 movs r3,#10
 1053 03a6 87F83E30 	 strb r3,[r7,#62]
 596:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 597:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1054              	 .loc 2 597 0
 1055 03aa A7E0     	 b .L55
 1056              	.L73:
 1057              	 .loc 2 597 0 is_stmt 0 discriminator 3
 1058 03ac A6E0     	 b .L55
 1059              	.L51:
 598:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 599:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 600:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Clear card password
 601:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 602:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_CLEAR_PASSWD:
 603:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_CLR_PASSWD;
 1060              	 .loc 2 603 0 is_stmt 1
 1061 03ae 0223     	 movs r3,#2
 1062 03b0 3B74     	 strb r3,[r7,#16]
 604:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 1063              	 .loc 2 604 0
 1064 03b2 7B68     	 ldr r3,[r7,#4]
 1065 03b4 7B63     	 str r3,[r7,#52]
 605:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH)
 1066              	 .loc 2 605 0
 1067 03b6 7B6B     	 ldr r3,[r7,#52]
 1068 03b8 93F82030 	 ldrb r3,[r3,#32]
 1069 03bc 102B     	 cmp r3,#16
 1070 03be 1DD8     	 bhi .L74
 606:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 607:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len;
 1071              	 .loc 2 607 0
 1072 03c0 7B6B     	 ldr r3,[r7,#52]
 1073 03c2 93F82030 	 ldrb r3,[r3,#32]
 1074 03c6 7B74     	 strb r3,[r7,#17]
 608:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, lock.pwd_len);
 1075              	 .loc 2 608 0
 1076 03c8 7A6B     	 ldr r2,[r7,#52]
 1077 03ca 7B7C     	 ldrb r3,[r7,#17]
 1078 03cc 1C46     	 mov r4,r3
 1079 03ce 07F11003 	 add r3,r7,#16
 1080 03d2 0233     	 adds r3,r3,#2
 1081 03d4 1846     	 mov r0,r3
 1082 03d6 1146     	 mov r1,r2
 1083 03d8 2246     	 mov r2,r4
 1084 03da FFF7FEFF 	 bl memcpy
 609:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 610:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 611:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1085              	 .loc 2 611 0
 1086 03de FB68     	 ldr r3,[r7,#12]
 1087 03e0 1B7B     	 ldrb r3,[r3,#12]
 1088 03e2 012B     	 cmp r3,#1
 1089 03e4 0ED1     	 bne .L76
 612:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 613:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_U
 1090              	 .loc 2 613 0
 1091 03e6 07F11003 	 add r3,r7,#16
 1092 03ea F868     	 ldr r0,[r7,#12]
 1093 03ec 1946     	 mov r1,r3
 1094 03ee 0022     	 movs r2,#0
 1095 03f0 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 1096 03f4 0346     	 mov r3,r0
 1097 03f6 87F83E30 	 strb r3,[r7,#62]
 614:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 615:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 616:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 617:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 618:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 619:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 620:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UN
 621:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 622:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 623:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 624:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 625:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 626:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 627:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 628:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1098              	 .loc 2 628 0
 1099 03fa 7FE0     	 b .L55
 1100              	.L74:
 626:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 1101              	 .loc 2 626 0
 1102 03fc 0A23     	 movs r3,#10
 1103 03fe 87F83E30 	 strb r3,[r7,#62]
 1104              	 .loc 2 628 0
 1105 0402 7BE0     	 b .L55
 1106              	.L76:
 1107              	 .loc 2 628 0 is_stmt 0 discriminator 4
 1108 0404 7AE0     	 b .L55
 1109              	.L52:
 629:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 630:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 631:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Set card lock
 632:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 633:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_SET_LOCK:
 634:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_SET_PASSWD_AND_LOCK;
 1110              	 .loc 2 634 0 is_stmt 1
 1111 0406 0523     	 movs r3,#5
 1112 0408 3B74     	 strb r3,[r7,#16]
 635:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         password = (const SDMMC_BLOCK_PASSWORD_t *)buffer;
 1113              	 .loc 2 635 0
 1114 040a 7B68     	 ldr r3,[r7,#4]
 1115 040c 7B63     	 str r3,[r7,#52]
 636:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 637:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if ((password->old_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH) &&
 1116              	 .loc 2 637 0
 1117 040e 7B6B     	 ldr r3,[r7,#52]
 1118 0410 93F82030 	 ldrb r3,[r3,#32]
 1119 0414 102B     	 cmp r3,#16
 1120 0416 3DD8     	 bhi .L77
 638:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 1121              	 .loc 2 638 0 discriminator 1
 1122 0418 7B6B     	 ldr r3,[r7,#52]
 1123 041a 93F82130 	 ldrb r3,[r3,#33]
 637:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             (password->new_pwd_len <= (uint8_t)SDMMC_BLOCK_MAX_PASSWORD_LENGTH))
 1124              	 .loc 2 637 0 discriminator 1
 1125 041e 102B     	 cmp r3,#16
 1126 0420 38D8     	 bhi .L77
 639:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 640:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           lock.pwd_len = password->old_pwd_len + password->new_pwd_len;
 1127              	 .loc 2 640 0
 1128 0422 7B6B     	 ldr r3,[r7,#52]
 1129 0424 93F82020 	 ldrb r2,[r3,#32]
 1130 0428 7B6B     	 ldr r3,[r7,#52]
 1131 042a 93F82130 	 ldrb r3,[r3,#33]
 1132 042e 1344     	 add r3,r3,r2
 1133 0430 DBB2     	 uxtb r3,r3
 1134 0432 7B74     	 strb r3,[r7,#17]
 641:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(lock.pwd_data, password->old_pwd, password->old_pwd_len);
 1135              	 .loc 2 641 0
 1136 0434 7A6B     	 ldr r2,[r7,#52]
 1137 0436 7B6B     	 ldr r3,[r7,#52]
 1138 0438 93F82030 	 ldrb r3,[r3,#32]
 1139 043c 1C46     	 mov r4,r3
 1140 043e 07F11003 	 add r3,r7,#16
 1141 0442 0233     	 adds r3,r3,#2
 1142 0444 1846     	 mov r0,r3
 1143 0446 1146     	 mov r1,r2
 1144 0448 2246     	 mov r2,r4
 1145 044a FFF7FEFF 	 bl memcpy
 642:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           memcpy(&lock.pwd_data[password->old_pwd_len], password->new_pwd, password->new_pwd_len);
 1146              	 .loc 2 642 0
 1147 044e 7B6B     	 ldr r3,[r7,#52]
 1148 0450 93F82030 	 ldrb r3,[r3,#32]
 1149 0454 1A46     	 mov r2,r3
 1150 0456 07F11003 	 add r3,r7,#16
 1151 045a 1344     	 add r3,r3,r2
 1152 045c 991C     	 adds r1,r3,#2
 1153 045e 7B6B     	 ldr r3,[r7,#52]
 1154 0460 03F11002 	 add r2,r3,#16
 1155 0464 7B6B     	 ldr r3,[r7,#52]
 1156 0466 93F82130 	 ldrb r3,[r3,#33]
 1157 046a 0846     	 mov r0,r1
 1158 046c 1146     	 mov r1,r2
 1159 046e 1A46     	 mov r2,r3
 1160 0470 FFF7FEFF 	 bl memcpy
 643:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 644:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 645:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1161              	 .loc 2 645 0
 1162 0474 FB68     	 ldr r3,[r7,#12]
 1163 0476 1B7B     	 ldrb r3,[r3,#12]
 1164 0478 012B     	 cmp r3,#1
 1165 047a 0AD1     	 bne .L78
 646:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 647:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_L
 1166              	 .loc 2 647 0
 1167 047c 07F11003 	 add r3,r7,#16
 1168 0480 F868     	 ldr r0,[r7,#12]
 1169 0482 1946     	 mov r1,r3
 1170 0484 0122     	 movs r2,#1
 1171 0486 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 1172 048a 0346     	 mov r3,r0
 1173 048c 87F83E30 	 strb r3,[r7,#62]
 645:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 1174              	 .loc 2 645 0
 1175 0490 04E0     	 b .L79
 1176              	.L78:
 1177 0492 03E0     	 b .L79
 1178              	.L77:
 648:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 649:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 650:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 651:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 652:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 653:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           {
 654:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****             mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_LO
 655:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           }
 656:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 657:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 658:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         else
 659:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 660:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 1179              	 .loc 2 660 0
 1180 0494 0A23     	 movs r3,#10
 1181 0496 87F83E30 	 strb r3,[r7,#62]
 661:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 662:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1182              	 .loc 2 662 0
 1183 049a 2FE0     	 b .L55
 1184              	.L79:
 1185              	 .loc 2 662 0 is_stmt 0 discriminator 5
 1186 049c 2EE0     	 b .L55
 1187              	.L53:
 663:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 664:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 665:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Read lock status
 666:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 667:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_READ_LOCK_STATUS:
 668:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 669:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 670:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1188              	 .loc 2 670 0 is_stmt 1
 1189 049e FB68     	 ldr r3,[r7,#12]
 1190 04a0 1B7B     	 ldrb r3,[r3,#12]
 1191 04a2 012B     	 cmp r3,#1
 1192 04a4 07D1     	 bne .L80
 671:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 672:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status =  SDMMC_BLOCK_SPI_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffe
 1193              	 .loc 2 672 0
 1194 04a6 F868     	 ldr r0,[r7,#12]
 1195 04a8 7968     	 ldr r1,[r7,#4]
 1196 04aa FFF7FEFF 	 bl SDMMC_BLOCK_SPI_GetLockStatus
 1197 04ae 0346     	 mov r3,r0
 1198 04b0 87F83E30 	 strb r3,[r7,#62]
 673:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 674:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 675:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 676:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 677:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 678:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 679:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_GetLockStatus(obj, (SDMMC_BLOCK_CARD_LOCK_STATUS_t *)buffer)
 680:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 681:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 682:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1199              	 .loc 2 682 0
 1200 04b4 22E0     	 b .L55
 1201              	.L80:
 1202 04b6 21E0     	 b .L55
 1203              	.L54:
 683:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 684:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 685:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Force card erase
 686:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 687:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_MMC_FORCE_ERASE:
 688:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         lock.mode = (uint8_t)SDMMC_BLOCK_FORCE_ERASE;
 1204              	 .loc 2 688 0
 1205 04b8 0823     	 movs r3,#8
 1206 04ba 3B74     	 strb r3,[r7,#16]
 689:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 690:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1207              	 .loc 2 690 0
 1208 04bc FB68     	 ldr r3,[r7,#12]
 1209 04be 1B7B     	 ldrb r3,[r3,#12]
 1210 04c0 012B     	 cmp r3,#1
 1211 04c2 0AD1     	 bne .L81
 691:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 692:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNL
 1212              	 .loc 2 692 0
 1213 04c4 07F11003 	 add r3,r7,#16
 1214 04c8 F868     	 ldr r0,[r7,#12]
 1215 04ca 1946     	 mov r1,r3
 1216 04cc 0022     	 movs r2,#0
 1217 04ce FFF7FEFF 	 bl SDMMC_BLOCK_SPI_LockUnlockCard
 1218 04d2 0346     	 mov r3,r0
 1219 04d4 87F83E30 	 strb r3,[r7,#62]
 693:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 694:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 695:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 696:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 697:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 698:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 699:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_LockUnlockCard(obj, &lock, SDMMC_BLOCK_CARD_LOCK_STATUS_UNLO
 700:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 701:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 702:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1220              	 .loc 2 702 0
 1221 04d8 10E0     	 b .L55
 1222              	.L81:
 1223 04da 0FE0     	 b .L55
 1224              	.L42:
 703:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 704:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       /*
 705:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        * Eject card
 706:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****        */
 707:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       case SDMMC_BLOCK_CTRL_EJECT:
 708:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SPI
 709:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SPI)
 1225              	 .loc 2 709 0
 1226 04dc FB68     	 ldr r3,[r7,#12]
 1227 04de 1B7B     	 ldrb r3,[r3,#12]
 1228 04e0 012B     	 cmp r3,#1
 1229 04e2 06D1     	 bne .L82
 710:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 711:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SPI_EjectCard(obj);
 1230              	 .loc 2 711 0
 1231 04e4 F868     	 ldr r0,[r7,#12]
 1232 04e6 FFF7FEFF 	 bl SDMMC_BLOCK_SPI_EjectCard
 1233 04ea 0346     	 mov r3,r0
 1234 04ec 87F83E30 	 strb r3,[r7,#62]
 712:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 713:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 714:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 715:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 716:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         if (obj->interface_mode == SDMMC_BLOCK_CARD_INTERFACE_SD)
 717:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         {
 718:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****           mode_status = SDMMC_BLOCK_SD_EjectCard(obj);
 719:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         }
 720:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif
 721:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1235              	 .loc 2 721 0
 1236 04f0 04E0     	 b .L55
 1237              	.L82:
 1238 04f2 03E0     	 b .L55
 1239              	.L35:
 722:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 723:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       default:
 724:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         mode_status = SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR;
 1240              	 .loc 2 724 0
 1241 04f4 0A23     	 movs r3,#10
 1242 04f6 87F83E30 	 strb r3,[r7,#62]
 725:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****         break;
 1243              	 .loc 2 725 0
 1244 04fa 00BF     	 nop
 1245              	.L55:
 726:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 727:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 728:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     if (mode_status == SDMMC_BLOCK_MODE_STATUS_SUCCESS)
 1246              	 .loc 2 728 0
 1247 04fc 97F83E30 	 ldrb r3,[r7,#62]
 1248 0500 002B     	 cmp r3,#0
 1249 0502 03D1     	 bne .L83
 729:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 730:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_SUCCESS;
 1250              	 .loc 2 730 0
 1251 0504 0023     	 movs r3,#0
 1252 0506 87F83F30 	 strb r3,[r7,#63]
 1253 050a 16E0     	 b .L34
 1254              	.L83:
 731:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 732:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else if (mode_status == SDMMC_BLOCK_MODE_STATUS_WP_VIOLATION_ERROR)
 1255              	 .loc 2 732 0
 1256 050c 97F83E30 	 ldrb r3,[r7,#62]
 1257 0510 0F2B     	 cmp r3,#15
 1258 0512 03D1     	 bne .L84
 733:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 734:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_WRPRT;
 1259              	 .loc 2 734 0
 1260 0514 0223     	 movs r3,#2
 1261 0516 87F83F30 	 strb r3,[r7,#63]
 1262 051a 0EE0     	 b .L34
 1263              	.L84:
 735:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 736:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else if ((mode_status == SDMMC_BLOCK_MODE_STATUS_OUT_OF_RANGE_ERROR) ||
 1264              	 .loc 2 736 0
 1265 051c 97F83E30 	 ldrb r3,[r7,#62]
 1266 0520 0A2B     	 cmp r3,#10
 1267 0522 03D0     	 beq .L85
 1268              	 .loc 2 736 0 is_stmt 0 discriminator 1
 1269 0524 97F83E30 	 ldrb r3,[r7,#62]
 1270 0528 332B     	 cmp r3,#51
 1271 052a 03D1     	 bne .L86
 1272              	.L85:
 737:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****              (mode_status == SDMMC_BLOCK_MODE_STATUS_SECTOR_OUT_OF_BOUND))
 738:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 739:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_PARERR;
 1273              	 .loc 2 739 0 is_stmt 1
 1274 052c 0423     	 movs r3,#4
 1275 052e 87F83F30 	 strb r3,[r7,#63]
 1276 0532 02E0     	 b .L34
 1277              	.L86:
 740:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 741:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     else
 742:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     {
 743:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****       status = SDMMC_BLOCK_STATUS_FAILURE;
 1278              	 .loc 2 743 0
 1279 0534 0123     	 movs r3,#1
 1280 0536 87F83F30 	 strb r3,[r7,#63]
 1281              	.L34:
 744:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     }
 745:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 746:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 747:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 1282              	 .loc 2 747 0
 1283 053a 97F83F30 	 ldrb r3,[r7,#63]
 748:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 1284              	 .loc 2 748 0
 1285 053e 1846     	 mov r0,r3
 1286 0540 4437     	 adds r7,r7,#68
 1287              	.LCFI52:
 1288              	 .cfi_def_cfa_offset 12
 1289 0542 BD46     	 mov sp,r7
 1290              	.LCFI53:
 1291              	 .cfi_def_cfa_register 13
 1292              	 
 1293 0544 90BD     	 pop {r4,r7,pc}
 1294              	 .cfi_endproc
 1295              	.LFE333:
 1297 0546 00BF     	 .section .text.SDMMC_BLOCK_lFlushDiskWriteCache,"ax",%progbits
 1298              	 .align 2
 1299              	 .thumb
 1300              	 .thumb_func
 1302              	SDMMC_BLOCK_lFlushDiskWriteCache:
 1303              	.LFB334:
 749:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 750:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #if SDMMC_BLOCK_SD_CARD_DETECTION_SUPPORT
 751:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 752:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #ifdef SDMMC_BLOCK_SD
 753:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 754:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /*
 755:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * Registers the callback function for the card detection
 756:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * mechanism.
 757:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  */
 758:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_RegisterCallback(SDMMC_BLOCK_t *const obj,
 759:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****                                                   void (*cb)(SDMMC_BLOCK_SD_INTERRUPT_t))
 760:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 761:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   SDMMC_BLOCK_STATUS_t status = SDMMC_BLOCK_STATUS_PARERR;
 762:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 763:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /* Check if the callback is not NULL */
 764:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   if (cb != NULL)
 765:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   {
 766:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     obj->sdmmc_sd->callback = cb;
 767:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****     status = SDMMC_BLOCK_STATUS_SUCCESS;
 768:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   }
 769:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 770:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return status;
 771:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 772:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 773:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD */
 774:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 775:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** #endif /* SDMMC_BLOCK_SD_CARD_DETECTION_SUPPORT */
 776:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 777:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /**************************************************************************************************
 778:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  * LOCAL ROUTINES IMPLEMENTATION
 779:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****  **************************************************************************************************
 780:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** 
 781:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** /* Flush disk cache */
 782:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** static SDMMC_BLOCK_STATUS_t SDMMC_BLOCK_lFlushDiskWriteCache(SDMMC_BLOCK_t *obj)
 783:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** {
 1304              	 .loc 2 783 0
 1305              	 .cfi_startproc
 1306              	 
 1307              	 
 1308              	 
 1309 0000 80B4     	 push {r7}
 1310              	.LCFI54:
 1311              	 .cfi_def_cfa_offset 4
 1312              	 .cfi_offset 7,-4
 1313 0002 83B0     	 sub sp,sp,#12
 1314              	.LCFI55:
 1315              	 .cfi_def_cfa_offset 16
 1316 0004 00AF     	 add r7,sp,#0
 1317              	.LCFI56:
 1318              	 .cfi_def_cfa_register 7
 1319 0006 7860     	 str r0,[r7,#4]
 784:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   /*
 785:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * A flush is generally meant for writing filled buffers/cache to the
 786:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * media. We're already ensuring that a write block(s) operation completes
 787:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * before it exits WriteBlock().
 788:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * So, this function does nothing at the moment. We are simply going to
 789:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    * return success
 790:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****    */
 791:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c ****   return SDMMC_BLOCK_STATUS_SUCCESS;
 1320              	 .loc 2 791 0
 1321 0008 0023     	 movs r3,#0
 792:../Dave/Generated/SDMMC_BLOCK/sdmmc_block.c **** }
 1322              	 .loc 2 792 0
 1323 000a 1846     	 mov r0,r3
 1324 000c 0C37     	 adds r7,r7,#12
 1325              	.LCFI57:
 1326              	 .cfi_def_cfa_offset 4
 1327 000e BD46     	 mov sp,r7
 1328              	.LCFI58:
 1329              	 .cfi_def_cfa_register 13
 1330              	 
 1331 0010 5DF8047B 	 ldr r7,[sp],#4
 1332              	.LCFI59:
 1333              	 .cfi_restore 7
 1334              	 .cfi_def_cfa_offset 0
 1335 0014 7047     	 bx lr
 1336              	 .cfi_endproc
 1337              	.LFE334:
 1339 0016 00BF     	 .text
 1340              	.Letext0:
 1341              	 .file 3 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\machine\\_default_types.h"
 1342              	 .file 4 "c:\\infineon\\tools\\dave ide\\4.5.0.202105191637\\eclipse\\arm-gcc-49\\arm-none-eabi\\include\\stdint.h"
 1343              	 .file 5 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/XMC4700.h"
 1344              	 .file 6 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_gpio.h"
 1345              	 .file 7 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc4_gpio.h"
 1346              	 .file 8 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_usic.h"
 1347              	 .file 9 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_spi.h"
 1348              	 .file 10 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/DAVE_Common.h"
 1349              	 .file 11 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/XMCLib/inc/xmc_dma.h"
 1350              	 .file 12 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/GLOBAL_DMA/global_dma.h"
 1351              	 .file 13 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Dave/Generated/SPI_MASTER/spi_master.h"
 1352              	 .file 14 "../Dave/Generated/SDMMC_BLOCK/sdmmc_block.h"
 1353              	 .file 15 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/cmsis_gcc.h"
 1354              	 .file 16 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Include/core_cm4.h"
 1355              	 .file 17 "D:/Projects/VCU Firmware Main/IRP/Git Repo/VCU14_29bit_overCAN_withIRP_new4g_proto26_adding_All10sec_data/Libraries/CMSIS/Infineon/XMC4700_series/Include/system_XMC4700.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sdmmc_block.c
    {standard input}:20     .text.SDMMC_BLOCK_SPI_GetState:00000000 $t
    {standard input}:24     .text.SDMMC_BLOCK_SPI_GetState:00000000 SDMMC_BLOCK_SPI_GetState
    {standard input}:66     .text.SDMMC_BLOCK_SPI_GetSectorSize:00000000 $t
    {standard input}:70     .text.SDMMC_BLOCK_SPI_GetSectorSize:00000000 SDMMC_BLOCK_SPI_GetSectorSize
    {standard input}:113    .text.SDMMC_BLOCK_SPI_GetCardType:00000000 $t
    {standard input}:117    .text.SDMMC_BLOCK_SPI_GetCardType:00000000 SDMMC_BLOCK_SPI_GetCardType
    {standard input}:162    .text.SDMMC_BLOCK_GetAppVersion:00000000 $t
    {standard input}:167    .text.SDMMC_BLOCK_GetAppVersion:00000000 SDMMC_BLOCK_GetAppVersion
    {standard input}:228    .text.SDMMC_BLOCK_Init:00000000 $t
    {standard input}:233    .text.SDMMC_BLOCK_Init:00000000 SDMMC_BLOCK_Init
    {standard input}:322    .text.SDMMC_BLOCK_Initialize:00000000 $t
    {standard input}:327    .text.SDMMC_BLOCK_Initialize:00000000 SDMMC_BLOCK_Initialize
    {standard input}:386    .text.SDMMC_BLOCK_ReadBlock:00000000 $t
    {standard input}:391    .text.SDMMC_BLOCK_ReadBlock:00000000 SDMMC_BLOCK_ReadBlock
    {standard input}:445    .text.SDMMC_BLOCK_WriteBlock:00000000 $t
    {standard input}:450    .text.SDMMC_BLOCK_WriteBlock:00000000 SDMMC_BLOCK_WriteBlock
    {standard input}:504    .text.SDMMC_BLOCK_GetStatus:00000000 $t
    {standard input}:509    .text.SDMMC_BLOCK_GetStatus:00000000 SDMMC_BLOCK_GetStatus
    {standard input}:557    .text.SDMMC_BLOCK_Ioctl:00000000 $t
    {standard input}:562    .text.SDMMC_BLOCK_Ioctl:00000000 SDMMC_BLOCK_Ioctl
    {standard input}:682    .text.SDMMC_BLOCK_Ioctl:000000c8 $d
    {standard input}:720    .text.SDMMC_BLOCK_Ioctl:00000160 $t
    {standard input}:1302   .text.SDMMC_BLOCK_lFlushDiskWriteCache:00000000 SDMMC_BLOCK_lFlushDiskWriteCache
    {standard input}:1298   .text.SDMMC_BLOCK_lFlushDiskWriteCache:00000000 $t
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
SDMMC_BLOCK_SPI_Init
SDMMC_BLOCK_SPI_CardIdentificationProcess
SDMMC_BLOCK_SPI_ReadBlock
SDMMC_BLOCK_SPI_WriteBlock
SDMMC_BLOCK_SPI_GetSectorCount
SDMMC_BLOCK_SPI_EraseBlock
SDMMC_BLOCK_SPI_GetBlockSize
SDMMC_BLOCK_SPI_GetCsd
SDMMC_BLOCK_SPI_GetCid
SDMMC_BLOCK_SPI_GetOcr
SDMMC_BLOCK_SPI_GetSdStatus
memcpy
SDMMC_BLOCK_SPI_LockUnlockCard
SDMMC_BLOCK_SPI_GetLockStatus
SDMMC_BLOCK_SPI_EjectCard
